/* Generated code for Python module 'plistlib'
 * created by Nuitka version 0.6.2
 *
 * This code is in part copyright 2019 Kay Hayen.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

#include "nuitka/prelude.h"

#include "__helpers.h"

/* The "_module_plistlib" is a Python object pointer of module type.
 *
 * Note: For full compatibility with CPython, every module variable access
 * needs to go through it except for cases where the module cannot possibly
 * have changed in the mean time.
 */

PyObject *module_plistlib;
PyDictObject *moduledict_plistlib;

/* The declarations of module constants used, if any. */
static PyObject *const_tuple_47b5affa04c2f26006db643529889f18_tuple;
static PyObject *const_str_plain_write_dict;
extern PyObject *const_str_plain___spec__;
extern PyObject *const_str_plain_dict;
extern PyObject *const_str_plain___name__;
static PyObject *const_str_plain_maxbinsize;
static PyObject *const_str_plain_writePlist;
extern PyObject *const_str_plain_sorted;
extern PyObject *const_str_plain_i;
extern PyObject *const_int_pos_9;
extern PyObject *const_str_plain_object;
static PyObject *const_str_plain__scalars;
static PyObject *const_str_plain__is_fmt_binary;
extern PyObject *const_int_pos_208;
extern PyObject *const_str_plain_max;
extern PyObject *const_str_plain_encode;
static PyObject *const_tuple_9baa4e03aa6f68e7a024d9ed2f9ce383_tuple;
static PyObject *const_int_pos_19;
extern PyObject *const_str_plain_hour;
static PyObject *const_str_digest_709ace4422e85fc85e4ac6f17a9f2741;
static PyObject *const_str_plain_end_integer;
static PyObject *const_str_plain__DumbXMLWriter;
extern PyObject *const_tuple_bytes_chr_0_tuple;
extern PyObject *const_str_plain_b2a_base64;
static PyObject *const_str_digest_ef90eba32953df4533399b3bd5512b87;
extern PyObject *const_str_plain_m;
extern PyObject *const_str_plain_mode;
extern PyObject *const_str_plain_os;
extern PyObject *const_str_plain_None;
static PyObject *const_str_plain_ParseFile;
static PyObject *const_str_plain_bom;
static PyObject *const_str_plain_pieces;
extern PyObject *const_str_plain_second;
static PyObject *const_str_plain_write_array;
static PyObject *const_str_plain__ref_size;
static PyObject *const_tuple_b8e54e8a5350150160288b1946222fce_tuple;
extern PyObject *const_str_plain_start;
extern PyObject *const_tuple_none_none_none_tuple;
static PyObject *const_str_digest_2d6be220c1ec10e13ee045608ed4f210;
static PyObject *const_str_digest_d21f4e2199bc86e1c924dc3ed9f1fbf4;
extern PyObject *const_int_pos_16;
static PyObject *const_str_plain_false;
static PyObject *const_tuple_str_plain_self_str_plain_array_str_plain_value_tuple;
extern PyObject *const_str_plain_contextlib;
extern PyObject *const_int_pos_32;
extern PyObject *const_str_plain___debug__;
static PyObject *const_int_neg_9223372036854775808;
static PyObject *const_str_digest_5c5bea784457cd769cf2d0a7c5add271;
static PyObject *const_str_plain_num_objects;
extern PyObject *const_str_angle_genexpr;
extern PyObject *const_str_plain_str;
static PyObject *const_str_digest_7ba0133bc3119ad9630c08f3519c5f25;
static PyObject *const_str_plain_top_object;
static PyObject *const_str_digest_6583f9dd4ad34b121a1756d5bda1dffa;
extern PyObject *const_tuple_int_pos_4_tuple;
static PyObject *const_tuple_25668ffae678bfc7b9117007742f267f_tuple;
static PyObject *const_str_digest_6153138c885a517dff97b435623517b4;
static PyObject *const_str_plain__objtable;
extern PyObject *const_str_plain_bytearray;
static PyObject *const_str_digest_93db4cc720679c16c4810fecd5e3e28c;
static PyObject *const_str_plain_end_date;
static PyObject *const_str_digest_e8b5b617841013b69c2195852fb55e5f;
static PyObject *const_str_plain__PlistWriter;
extern PyObject *const_str_plain_BytesIO;
extern PyObject *const_str_plain_seconds;
static PyObject *const_str_plain_detect;
static PyObject *const_str_digest_19a40d89232ab3046ca85b82add92df5;
extern PyObject *const_int_pos_8;
extern PyObject *const_str_plain_load;
static PyObject *const_str_digest_b88ec066015c7720232071fa9e175d13;
static PyObject *const_str_plain_end_false;
static PyObject *const_tuple_9522554f5f5338f988ab20038367cb18_tuple;
static PyObject *const_str_plain_indent_level;
static PyObject *const_str_plain_sort_version;
static PyObject *const_tuple_str_plain__PlistParser_tuple_empty_tuple;
static PyObject *const_str_plain_writer;
static PyObject *const_str_digest_bb6534566f5b003bfb322d5b174e21cf;
static PyObject *const_tuple_int_0_bytes_chr_9_int_pos_1_true_false_tuple;
extern PyObject *const_str_chr_9;
static PyObject *const_str_plain__ref_format;
extern PyObject *const_tuple_int_0_tuple;
extern PyObject *const_str_digest_f8a05ce6419eb433bc14bb5bfb3e62be;
extern PyObject *const_str_plain_contextmanager;
static PyObject *const_str_plain_end_element;
extern PyObject *const_str_plain_False;
static PyObject *const_str_digest_098cae6af4590a5be139fc9e6eb09d4d;
static PyObject *const_str_plain_EndElementHandler;
extern PyObject *const_str_digest_c075052d723d6707083e869a0e3659bb;
static PyObject *const_tuple_a7f2679b5a7ee191ec47598e0c252f18_tuple;
extern PyObject *const_str_plain_pop;
extern PyObject *const_int_0;
extern PyObject *const_slice_none_int_pos_8_none;
static PyObject *const_str_plain_end_dict;
extern PyObject *const_str_plain___members__;
static PyObject *const_str_digest_a40e3915d472621166a50dadef08ff76;
static PyObject *const_tuple_15847381bc67e44c74cc6010c7c7f848_tuple;
extern PyObject *const_str_plain_getvalue;
static PyObject *const_str_digest_319c1a717878e014ecb8fc79474aef31;
static PyObject *const_str_digest_376488162a4b457dc0f7e24a467edc33;
static PyObject *const_str_plain_FMT_BINARY;
extern PyObject *const_int_pos_51;
static PyObject *const_str_plain_FMT_XML;
extern PyObject *const_str_plain_B;
static PyObject *const_str_digest_5a6bc68f62f243e5febb003858df9a4d;
static PyObject *const_tuple_int_pos_32_tuple;
extern PyObject *const_bytes_chr_10;
static PyObject *const_str_digest_5488d6035ce32cb670efe19cb3e3e6e0;
static PyObject *const_str_plain_end_real;
extern PyObject *const_int_pos_64;
static PyObject *const_str_digest_c0c3759da123e387798315e75d2fed70;
extern PyObject *const_str_plain_get_data;
extern PyObject *const_str_plain_year;
extern PyObject *const_int_pos_4;
extern PyObject *const_tuple_str_plain_data_tuple;
static PyObject *const_tuple_623aab190dd8a0ffb8f075c95f8d756d_tuple;
static PyObject *const_str_plain_maxlinelength;
extern PyObject *const_str_plain_type;
extern PyObject *const_str_plain___cached__;
static PyObject *const_str_digest_509d2c061e910144dad29e294d0e99af;
extern PyObject *const_str_plain_plistlib;
extern PyObject *const_tuple_none_tuple;
static PyObject *const_str_digest_492eced51578a561806e20ae8ef1f867;
static PyObject *const_bytes_chr_9;
extern PyObject *const_str_plain_prefixes;
static PyObject *const_str_digest_226565d3552bd23afa8c5978471661ea;
static PyObject *const_str_plain_tokenL;
extern PyObject *const_int_pos_1;
extern PyObject *const_str_plain_replace;
extern PyObject *const_tuple_str_plain_self_str_plain_line_tuple;
static PyObject *const_str_plain__read_ints;
extern PyObject *const_str_plain_other;
extern PyObject *const_tuple_str_plain_self_str_plain_data_tuple;
static PyObject *const_bytes_chr_20;
static PyObject *const_str_plain_skipkeys;
static PyObject *const_str_plain_add_object;
extern PyObject *const_str_plain___prepare__;
extern PyObject *const_int_pos_160;
extern PyObject *const_tuple_int_pos_8_tuple;
extern PyObject *const_str_plain_write;
extern PyObject *const_str_plain___repr__;
static PyObject *const_tuple_str_plain_self_str_plain_n_str_plain_size_str_plain_data_tuple;
extern PyObject *const_str_plain_module;
static PyObject *const_tuple_str_plain_Data_tuple_empty_tuple;
static PyObject *const_str_digest_d157bbee9bf6e82d2b8fd0f849cf01c7;
extern PyObject *const_str_plain_startswith;
extern PyObject *const_tuple_str_chr_60_str_digest_25fd5ead3f086addba74ff5e559ee564_tuple;
extern PyObject *const_int_pos_4294967296;
static PyObject *const_tuple_str_plain_self_str_plain_attrs_str_plain_d_tuple;
static PyObject *const_str_plain_asBase64;
static PyObject *const_str_plain_key_refs;
extern PyObject *const_str_chr_38;
static PyObject *const_str_plain__write_object;
static PyObject *const_str_plain_pfx;
extern PyObject *const_str_plain_timedelta;
extern PyObject *const_str_plain_string;
extern PyObject *const_str_plain___file__;
static PyObject *const_tuple_bcb813e58dde09b7032e289858300c76_tuple;
extern PyObject *const_str_plain_struct;
extern PyObject *const_str_plain_unpack;
static PyObject *const_str_plain_end_array;
static PyObject *const_str_digest_7b6f2dcaf0f7afb26874dc91eb48fdfd;
static PyObject *const_tuple_str_plain_self_str_plain_attrs_str_plain_a_tuple;
extern PyObject *const_str_plain_stack;
static PyObject *const_str_plain_offset_table_offset;
static PyObject *const_str_plain_rootItems;
extern PyObject *const_str_plain_fmt;
extern PyObject *const_str_plain_SEEK_END;
static PyObject *const_str_plain_offset_size;
extern PyObject *const_int_pos_80;
extern PyObject *const_str_plain_seek;
static PyObject *const_str_digest_8be052e714db42ed917ef93431760d0b;
static PyObject *const_str_digest_e5d58339820a87bba8cbb522f71890a2;
static PyObject *const_str_plain__skipkeys;
static PyObject *const_tuple_ee76a917505f42f364215f078effac82_tuple;
extern PyObject *const_str_plain_H;
static PyObject *const_str_digest_76d6e11399c7aa1061842aa32438ca8b;
extern PyObject *const_tuple_bytes_chr_10_tuple;
static PyObject *const_str_plain__decode_base64;
static PyObject *const_str_plain_writeHeader;
static PyObject *const_tuple_bytes_chr_9_bytes_digest_0687ed4919ad17fa1840df46e91d0910_tuple;
extern PyObject *const_str_plain_read;
extern PyObject *const_tuple_int_pos_1_tuple;
static PyObject *const_str_plain_InvalidFileException;
static PyObject *const_tuple_str_plain_d_tuple;
static PyObject *const_str_digest_effaccf01132aa7a279407b5ff12ad69;
static PyObject *const_str_digest_155a756f54744518395968bd831829a0;
extern PyObject *const_str_chr_62;
extern PyObject *const_str_plain___orig_bases__;
extern PyObject *const_str_plain_wb;
static PyObject *const_str_digest_3ceff0c8cf65327ba798e42abd161faa;
extern PyObject *const_str_plain_lst;
static PyObject *const_str_digest_f8bafc552baab4cac1e232d282cdb986;
static PyObject *const_str_digest_a5d06843ffb0b436ec51dd55af67c502;
extern PyObject *const_tuple_list_empty_list_empty_tuple;
static PyObject *const_str_plain__controlCharPat;
static PyObject *const_str_plain_write_data;
extern PyObject *const_str_plain__fp;
extern PyObject *const_str_plain___qualname__;
static PyObject *const_int_neg_32;
extern PyObject *const_str_plain_n;
static PyObject *const_tuple_f93ca986507b5d7bc076a33adb0d1b71_tuple;
extern PyObject *const_str_plain_writeln;
extern PyObject *const_str_plain_p;
extern PyObject *const_str_plain_value;
static PyObject *const_str_digest_b737658f4b2da5ff2ae42c0fba5b6033;
static PyObject *const_tuple_str_plain_cls_str_plain_data_tuple;
static PyObject *const_str_plain__getrefnum;
extern PyObject *const_str_plain_message;
static PyObject *const_str_plain__date_to_string;
static PyObject *const_tuple_str_digest_7d8c029aa14d4038a202ab8b1ce8db36_tuple;
static PyObject *const_str_plain_BOM_UTF16_BE;
static PyObject *const_str_plain__BinaryPlistParser;
extern PyObject *const_tuple_str_plain_self_str_plain_value_tuple;
static PyObject *const_int_pos_34;
static PyObject *const_str_digest_9705f9bcd6179641b4862cd0d8a2fd26;
extern PyObject *const_str_plain_datetime;
static PyObject *const_str_plain_begin_array;
static PyObject *const_str_digest_c9a912e7747523d7f6380ebb87307469;
extern PyObject *const_str_plain_P;
static PyObject *const_str_plain_StartElementHandler;
extern PyObject *const_str_plain_groupdict;
static PyObject *const_tuple_str_plain_array_tuple;
static PyObject *const_str_plain_end_key;
extern PyObject *const_str_plain_error;
static PyObject *const_str_plain__sort_keys;
extern PyObject *const_str_plain_integer;
static PyObject *const_str_plain__dict_type;
extern PyObject *const_int_pos_2001;
static PyObject *const_str_digest_9d915ddb152ecaa439ec97699234e5a3;
extern PyObject *const_str_plain_decode;
extern PyObject *const_str_plain_pack;
extern PyObject *const_str_plain_k;
extern PyObject *const_str_plain___getitem__;
extern PyObject *const_str_plain___all__;
static PyObject *const_tuple_f4567b4de8a9c702e1f99f4ec37ddd85_tuple;
extern PyObject *const_str_plain_f;
static PyObject *const_str_digest_3c048894775f66f19300c824177e657d;
extern PyObject *const_int_pos_15;
extern PyObject *const_int_pos_18;
extern PyObject *const_str_plain_dumps;
extern PyObject *const_str_plain_text;
static PyObject *const_str_digest_67d4853a9b27d1ed49dfc583b05f2dc2;
extern PyObject *const_str_plain_origin;
static PyObject *const_str_plain_BOM_UTF8;
static PyObject *const_str_digest_5050cf860e68bc9f9751cc7744a512f0;
extern PyObject *const_str_digest_75fd71b1edada749c2ef7ac810062295;
static PyObject *const_str_digest_d1666c2e815cdf8c51a87c4cc5a38f18;
static PyObject *const_str_digest_a166d0e20cf23102cf939cef62c22331;
static PyObject *const_tuple_int_0_str_chr_9_tuple;
static PyObject *const_str_digest_44d5b97bfcdc23fe8972f889bcf9f31b;
static PyObject *const_str_plain_begin_element;
extern PyObject *const_str_plain_d;
extern PyObject *const_str_plain_v;
static PyObject *const_str_plain__get_size;
static PyObject *const_tuple_str_digest_376488162a4b457dc0f7e24a467edc33_tuple;
static PyObject *const_tuple_str_plain_self_str_plain_maxlinelength_tuple;
static PyObject *const_str_digest_1be925b60179ca3ccaa06f3b6ddcf5ec;
static PyObject *const_str_plain_sort_keys;
extern PyObject *const_str_plain_io;
static PyObject *const_str_digest_b3a31e7b106c45d8dfd995a9fd411a18;
static PyObject *const_tuple_str_plain_pathOrFile_str_plain_mode_str_plain_fp_tuple;
extern PyObject *const_int_pos_256;
static PyObject *const_tuple_str_plain_self_str_plain_element_str_plain_handler_tuple;
extern PyObject *const_list_int_0_list;
extern PyObject *const_str_plain_tuple;
extern PyObject *const_str_plain_day;
static PyObject *const_str_plain_end_data;
extern PyObject *const_str_plain_key;
static PyObject *const_tuple_str_plain_self_str_plain_element_tuple;
static PyObject *const_tuple_str_plain_count_tuple;
static PyObject *const_str_digest_95be78bea9f8fecb1a87a18711816150;
extern PyObject *const_str_plain___init__;
static PyObject *const_tuple_str_plain_dict_tuple;
extern PyObject *const_str_plain_parse;
static PyObject *const_str_plain_offset_format;
static PyObject *const_tuple_int_pos_2001_int_pos_1_int_pos_1_tuple;
static PyObject *const_str_plain_end_true;
static PyObject *const_str_plain_pathOrFile;
extern PyObject *const_str_plain_loads;
static PyObject *const_str_digest_b6db9426a48b9cf0810b1b19f24bd616;
extern PyObject *const_str_plain_has_location;
extern PyObject *const_str_plain_ascii;
extern PyObject *const_str_plain_date;
extern PyObject *const_str_plain_info;
extern PyObject *const_str_empty;
static PyObject *const_tuple_a3f07ad2f4f94a590d2259e1eff15185_tuple;
extern PyObject *const_bytes_chr_8;
static PyObject *const_str_digest_a87aa14c38af2ff58724efaca0a1d2d7;
static PyObject *const_tuple_8121465133473965ed0ce81878ee793a_tuple;
static PyObject *const_tuple_str_digest_600e634b68a231758b74eb05aa74dac8_tuple;
static PyObject *const_tuple_str_plain_ParserCreate_tuple;
static PyObject *const_bytes_digest_fb33fa19223055b76ab12de7593a77ac;
extern PyObject *const_str_digest_945228044f484d0c86a3cdf3a6e4cbbd;
extern PyObject *const_tuple_str_digest_c075052d723d6707083e869a0e3659bb_tuple;
static PyObject *const_str_plain_end_;
extern PyObject *const_str_plain_result;
extern PyObject *const_str_plain_big;
static PyObject *const_str_plain_array;
static PyObject *const_tuple_int_pos_76_tuple;
extern PyObject *const_tuple_type_tuple_type_list_tuple;
extern PyObject *const_int_pos_240;
static PyObject *const_list_4c2fb79125cde76e7e3b3847734701ed_list;
static PyObject *const_str_digest_18c2ace845f9015af5a765b47e9c1bfd;
static PyObject *const_tuple_9a52825cf95a5e4bc44d5812c1959e25_tuple;
extern PyObject *const_str_plain_month;
static PyObject *const_dict_572050117e2cfc8c656df66eb5790338;
extern PyObject *const_str_plain_bytes;
static PyObject *const_tuple_str_digest_564b88fedb28bf2460a9105c33b11e5b_tuple;
extern PyObject *const_str_plain_prefix;
extern PyObject *const_str_plain_signed;
static PyObject *const_str_plain_CurrentLineNumber;
static PyObject *const_str_plain_write_bytes;
static PyObject *const_str_plain__read_object;
static PyObject *const_str_plain__indent_level;
extern PyObject *const_int_neg_1;
static PyObject *const_str_digest_407f44c0f2b9d8aa40f83eef14d23ffc;
static PyObject *const_str_digest_c8c657a818eac5840fa113aebcb51682;
static PyObject *const_str_digest_6f92f0376a7df9ac4b45fb00bb287e2e;
extern PyObject *const_int_pos_17;
static PyObject *const_str_plain__write_size;
extern PyObject *const_tuple_str_plain_header_tuple;
static PyObject *const_str_plain_handle_data;
static PyObject *const_str_digest_daab762c4c76ca471d99a7322ef0cb36;
static PyObject *const_str_digest_0a1de9132902fa5ffc8d8b3c8b69062b;
static PyObject *const_str_plain_refnum;
static PyObject *const_str_digest_1c574f569296f7afc2b0ef363b41bf5d;
extern PyObject *const_tuple_type_bytes_type_bytearray_tuple;
static PyObject *const_str_digest_7595143d13e16374aae8a97c18af4a93;
extern PyObject *const_str_plain_classmethod;
static PyObject *const_str_plain_real;
static PyObject *const_str_plain__PlistParser;
extern PyObject *const_tuple_true_tuple;
static PyObject *const_tuple_str_plain__BinaryPlistParser_tuple_empty_tuple;
extern PyObject *const_str_plain___doc__;
extern PyObject *const_str_plain_re;
static PyObject *const_str_plain_write_value;
extern PyObject *const_str_plain_extend;
static PyObject *const_tuple_3348473375ddd0ae03b4ed982e352bb5_tuple;
static PyObject *const_str_digest_9abbcb4730c2592c58f5741917eba8c7;
extern PyObject *const_str_plain_root;
static PyObject *const_bytes_digest_989365e9d702141b7617a68e35459180;
extern PyObject *const_str_plain_attrs;
extern PyObject *const_int_pos_76;
extern PyObject *const_str_plain_data;
extern PyObject *const_str_plain_a2b_base64;
extern PyObject *const_tuple_str_plain_ascii_tuple;
extern PyObject *const_str_plain_s;
extern PyObject *const_str_plain_fileobj;
static PyObject *const_str_plain_current_key;
extern PyObject *const_str_plain_warnings;
static PyObject *const_str_digest_834e99f6e73d4fc4f41fde0b03077b1e;
static PyObject *const_str_plain_BOM_UTF16_LE;
static PyObject *const_str_digest_89886dc1cffd86ab711771894abdfcb5;
static PyObject *const_tuple_fc530a996c2a4da49f5adddef59d0b0f_tuple;
extern PyObject *const_str_digest_b9c4baf879ebd882d40843df3a4dead7;
static PyObject *const_str_digest_ea1fa55ed2e0192d31493e4bfcf4471f;
extern PyObject *const_tuple_str_plain_self_tuple;
extern PyObject *const_str_plain_float;
static PyObject *const_str_digest_3dc7a5d8e36836bd2526010c8c66647e;
static PyObject *const_str_digest_3c4021139830c6416110a9b56838cb10;
static PyObject *const_str_plain_refs;
extern PyObject *const_tuple_str_plain_self_str_plain_fileobj_tuple;
static PyObject *const_str_plain_begin_;
extern PyObject *const_tuple_empty;
static PyObject *const_str_digest_89062d13c68a98c2a3f69b44901f001e;
extern PyObject *const_str_plain_append;
extern PyObject *const_str_plain_tell;
extern PyObject *const_str_plain_parser;
static PyObject *const_str_plain_PlistFormat;
extern PyObject *const_str_plain_compile;
static PyObject *const_str_plain__objects;
extern PyObject *const_tuple_str_plain_BytesIO_tuple;
extern PyObject *const_str_plain_split;
extern PyObject *const_str_plain_token;
static PyObject *const_str_plain_tokenH;
extern PyObject *const_str_digest_6dbea4a21602f55a0ca9391648f3d9be;
extern PyObject *const_str_plain_list;
static PyObject *const_str_plain_handle_end_element;
static PyObject *const_str_digest_e3c3d78d4d66a632c6ad68dc0fb31d57;
static PyObject *const_str_plain_simple_element;
static PyObject *const_tuple_str_plain_pathOrFile_str_plain_fp_tuple;
extern PyObject *const_tuple_bytes_chr_8_tuple;
extern PyObject *const_str_plain_val;
static PyObject *const_str_plain_trailer;
static PyObject *const_tuple_51eca9911886c08a181f0b3b32aff98f_tuple;
static PyObject *const_str_plain_begin_dict;
static PyObject *const_str_plain__BINARY_FORMAT;
static PyObject *const_str_plain_readPlistFromBytes;
static PyObject *const_str_digest_5fb9888f03b6fa8c88863dd75de0b251;
static PyObject *const_str_digest_b729e27145963e501b74d8c5bd73c01b;
extern PyObject *const_str_plain_x;
static PyObject *const_str_digest_9d86821dbf39b1da342fb20140712fd0;
static PyObject *const_str_plain__object_offsets;
static PyObject *const_tuple_str_plain_o_str_plain_self_tuple;
static PyObject *const_tuple_f06fe5f660b6ac56d4e67dbf2446d72f_tuple;
static PyObject *const_tuple_str_plain_text_str_plain_m_tuple;
static PyObject *const_str_digest_1f4f58bc6fea283b13f6c2311a470c86;
static PyObject *const_str_plain__read_refs;
static PyObject *const_str_digest_4517dddc677dac91392a1f75e459c993;
static PyObject *const_tuple_str_plain_self_str_plain_element_str_plain_value_tuple;
extern PyObject *const_str_plain_ASCII;
extern PyObject *const_str_plain___class__;
static PyObject *const_str_digest_95c6edc8377269178fe38ea261bee446;
static PyObject *const_str_plain__undefined;
extern PyObject *const_tuple_type_ValueError_tuple;
static PyObject *const_tuple_73e51a79bceeb2bb282b2d6673dc631b_tuple;
extern PyObject *const_str_plain___module__;
extern PyObject *const_str_plain_codecs;
static PyObject *const_str_digest_72acf5789151589e4bb12886f367c8fe;
extern PyObject *const_str_plain_true;
static PyObject *const_str_plain_ParserCreate;
static PyObject *const_str_digest_9a002219a8a2be2861fd57bef41a138e;
extern PyObject *const_str_plain_chunk;
static PyObject *const_str_digest_564b88fedb28bf2460a9105c33b11e5b;
static PyObject *const_str_digest_9651dd0449a14ad5904ac274e123ee0d;
static PyObject *const_str_digest_734f4e9d064717646102b3a04f68706f;
extern PyObject *const_str_plain_update;
static PyObject *const_int_pos_9223372036854775808;
static PyObject *const_str_digest_2e3858af0e538d1c2134ccf4748c93e8;
static PyObject *const_str_plain__objlist;
static PyObject *const_str_plain_fromBase64;
static PyObject *const_tuple_str_plain_true_tuple;
static PyObject *const_str_plain_chain;
static PyObject *const_str_digest_282449a0c2f79caa66c3a61de5f7b6f9;
static PyObject *const_tuple_c4159da068cc7bb7ded454d4c150f6c3_tuple;
static PyObject *const_str_digest_804a38dc1a83365cac5b477b7440f5b1;
extern PyObject *const_str_plain_enum;
extern PyObject *const_tuple_str_plain_warn_tuple;
static PyObject *const_tuple_ca0747bf52cf4219b2eb6201591d1ad9_tuple;
static PyObject *const_str_plain__escape;
static PyObject *const_tuple_f67937c5085725b81272367eb7afbd7a_tuple;
extern PyObject *const_list_empty;
static PyObject *const_str_digest_a6fe705e9b22b64bcb8bdabe0939e7dd;
static PyObject *const_int_pos_35;
static PyObject *const_tuple_bytes_chr_9_tuple;
static PyObject *const_tuple_str_plain_value_str_plain_pathOrFile_str_plain_fp_tuple;
static PyObject *const_tuple_str_plain_self_str_plain_token_str_plain_size_tuple;
static PyObject *const_str_plain_dict_type;
static PyObject *const_str_plain_order;
extern PyObject *const_tuple_str_chr_62_str_digest_f8a05ce6419eb433bc14bb5bfb3e62be_tuple;
extern PyObject *const_str_plain_warn;
extern PyObject *const_str_plain_itertools;
extern PyObject *const_str_plain_metaclass;
static PyObject *const_str_plain_PLISTHEADER;
extern PyObject *const_tuple_str_plain___class___tuple;
extern PyObject *const_str_chr_60;
extern PyObject *const_str_plain__encode_base64;
extern PyObject *const_tuple_false_tuple;
extern PyObject *const_str_angle_metaclass;
extern PyObject *const_str_plain_zip;
static PyObject *const_str_digest_448f4d2b573bf42d517b7fbb5b453135;
extern PyObject *const_tuple_str_chr_13_str_newline_tuple;
static PyObject *const_str_plain_readPlist;
extern PyObject *const_str_plain_offset;
extern PyObject *const_str_plain___exit__;
extern PyObject *const_str_plain_a;
static PyObject *const_str_digest_7feffa0d4df18481696e57eff8cd7d01;
extern PyObject *const_str_plain_items;
extern PyObject *const_tuple_str_plain_s_tuple;
static PyObject *const_dict_31495aba724870ae8e6ca826d32e28fd;
extern PyObject *const_str_plain_size;
static PyObject *const_str_plain__BinaryPlistWriter;
static PyObject *const_str_plain__date_from_string;
extern PyObject *const_str_plain___enter__;
static PyObject *const_str_plain_writePlistToBytes;
extern PyObject *const_str_plain_cls;
static PyObject *const_bytes_digest_de1738a381f06fd62424af1a5cd3e07d;
extern PyObject *const_str_plain_join;
static PyObject *const_str_plain_obj_refs;
static PyObject *const_tuple_str_plain_value_str_plain_f_tuple;
static PyObject *const_str_digest_0884d2cecf7ee3c4477d68aebb70615a;
static PyObject *const_str_plain__flatten;
extern PyObject *const_str_plain_fp;
extern PyObject *const_str_plain_L;
static PyObject *const_str_digest_ba37f10e62fb9060b09449a8c6d1ceec;
static PyObject *const_str_digest_bf0bf6f703a8834292a72b83227d2c09;
extern PyObject *const_tuple_str_plain_self_str_plain_n_tuple;
static PyObject *const_tuple_int_pos_16_str_plain_big_tuple;
static PyObject *const_str_digest_582612ba88d27e5080633094b8b89771;
extern PyObject *const_str_plain_t;
static PyObject *const_str_digest_8ec6226e6f1c24f4652c7ab62abc0dd4;
static PyObject *const_dict_c061ef12f02b7b74854c0240ac25e2d7;
extern PyObject *const_tuple_str_plain_self_str_plain_other_tuple;
extern PyObject *const_str_plain_int;
static PyObject *const_str_digest_600e634b68a231758b74eb05aa74dac8;
static PyObject *const_str_plain_use_builtin_types;
extern PyObject *const_str_plain_DeprecationWarning;
static PyObject *const_str_plain__use_builtin_types;
static PyObject *const_str_plain__maybe_open;
static PyObject *const_str_plain_CharacterDataHandler;
static PyObject *const_tuple_bytes_digest_f56f4391a49dc6cc1c15f8ec95e9a37e_tuple;
extern PyObject *const_str_chr_13;
static PyObject *const_tuple_4b6d164b3a55ae95cc6a822617747d71_tuple;
static PyObject *const_str_plain__is_fmt_xml;
extern PyObject *const_str_plain_line;
extern PyObject *const_str_plain_keys;
extern PyObject *const_str_plain_rb;
extern PyObject *const_str_plain_indent;
extern PyObject *const_str_plain_dump;
extern PyObject *const_str_digest_d7908dd66617c9f5e7c68a06d1603722;
static PyObject *const_str_digest_7d8c029aa14d4038a202ab8b1ce8db36;
extern PyObject *const_tuple_str_plain_self_str_plain_message_tuple;
extern PyObject *const_tuple_str_chr_38_str_digest_945228044f484d0c86a3cdf3a6e4cbbd_tuple;
extern PyObject *const_str_plain_element;
static PyObject *const_str_digest_f2af2a2c9cdc01eb0f569ccd625dd787;
extern PyObject *const_bytes_digest_0687ed4919ad17fa1840df46e91d0910;
extern PyObject *const_str_plain_match;
static PyObject *const_tuple_str_digest_76d6e11399c7aa1061842aa32438ca8b_tuple;
extern PyObject *const_str_plain_Q;
static PyObject *const_str_digest_4a0af618cadba292e889bc974db429ae;
static PyObject *const_str_digest_fa131f0d55baa8ff96752bf4d0d75d8b;
static PyObject *const_str_plain_valRefs;
static PyObject *const_str_plain__objidtable;
static PyObject *const_int_pos_96;
static PyObject *const_dict_7611676ed95705a12123cc4968fd525a;
static PyObject *const_str_digest_dd5e881535aa5bf3f89c844831fa26f3;
extern PyObject *const_str_plain_encoding;
static PyObject *const_str_plain_end_string;
static PyObject *const_str_digest_7629749259f94868388f3bdf15c07b50;
static PyObject *const_str_digest_4d6355d35ff72a144820ce33fe2817b6;
extern PyObject *const_str_plain___eq__;
extern PyObject *const_str_plain_count;
extern PyObject *const_str_digest_a9f9a21e276932d061c34fdf077216a6;
static PyObject *const_str_plain__dateParser;
static PyObject *const_str_plain_keyRefs;
extern PyObject *const_str_plain_ref;
extern PyObject *const_str_plain_search;
static PyObject *const_str_digest_e38d98d8b95676efcd76bd78912c93d4;
extern PyObject *const_str_plain_o;
static PyObject *const_str_digest_8d62357ffcb3fc7ced7c1530d09de881;
static PyObject *const_str_digest_0f355a08be39617fb7ccf1cb3db7d27d;
static PyObject *const_str_digest_3cce387f11a2d373b31af028bfe0d7e6;
extern PyObject *const_str_angle_listcomp;
extern PyObject *const_str_digest_a7636f57d1f8f80548278378b7bf84e2;
extern PyObject *const_str_digest_25fd5ead3f086addba74ff5e559ee564;
extern PyObject *const_str_plain_header;
static PyObject *const_tuple_type_list_type_tuple_tuple;
static PyObject *const_tuple_str_plain_false_tuple;
static PyObject *const_str_digest_3ab646e83642152a9eac19a64a983145;
extern PyObject *const_bytes_empty;
extern PyObject *const_str_plain_Enum;
static PyObject *const_str_digest_6406ac9858cad296e77a7e9ea874e091;
static PyObject *const_str_digest_ce1af1d930c7b52b9dba2b47a65ffee8;
static PyObject *const_str_plain_gd;
static PyObject *const_dict_1e8b691e3d0182a72f212a61a8dd1482;
static PyObject *const_str_digest_28f43fb065e63e931ff3bd1821e4d43f;
extern PyObject *const_tuple_type_object_tuple;
extern PyObject *const_str_plain_minute;
extern PyObject *const_tuple_str_digest_7ca129d2d421fe965ad48cbb290b579b_str_newline_tuple;
extern PyObject *const_str_plain_binascii;
static PyObject *const_tuple_str_plain__DumbXMLWriter_tuple_empty_tuple;
static PyObject *const_str_digest_4f64dd367e7c9df0d6009a67327d443e;
static PyObject *const_str_digest_c1047800c0437512bd9b2438244faa57;
extern PyObject *const_str_plain_values;
static PyObject *const_str_plain__count_to_size;
static PyObject *const_tuple_str_digest_282449a0c2f79caa66c3a61de5f7b6f9_tuple;
extern PyObject *const_str_digest_7ca129d2d421fe965ad48cbb290b579b;
extern PyObject *const_str_newline;
static PyObject *const_int_pos_18446744073709551616;
static PyObject *const_str_digest_e66a58b0ebd58c72824db2808901d3e9;
extern PyObject *const_int_pos_3;
static PyObject *const_str_plain_handle_begin_element;
extern PyObject *const_str_plain_self;
extern PyObject *const_str_plain_total_seconds;
extern PyObject *const_str_plain_Data;
static PyObject *const_str_digest_403c2e6bf7233ba4eb16201b08761c63;
static PyObject *const_str_plain__FORMATS;
static PyObject *const_tuple_1e30baefcdf4dd7733e4c72efef968f7_tuple;
extern PyObject *const_int_pos_2;
extern PyObject *const_str_plain_to_bytes;
extern PyObject *const_bytes_chr_0;
extern PyObject *const_str_plain_from_bytes;
extern PyObject *const_str_plain_obj;
extern PyObject *const_int_pos_65536;
extern PyObject *const_str_plain_file;
extern PyObject *const_str_plain_handler;
static PyObject *const_bytes_digest_f56f4391a49dc6cc1c15f8ec95e9a37e;
static PyObject *module_filename_obj;

/* Indicator if this modules private constants were created yet. */
static bool constants_created = false;

/* Function to create module private constants. */
static void createModuleConstants( void )
{
    const_tuple_47b5affa04c2f26006db643529889f18_tuple = PyTuple_New( 3 );
    PyTuple_SET_ITEM( const_tuple_47b5affa04c2f26006db643529889f18_tuple, 0, const_str_plain_self ); Py_INCREF( const_str_plain_self );
    const_str_plain_use_builtin_types = UNSTREAM_STRING_ASCII( &constant_bin[ 507577 ], 17, 1 );
    PyTuple_SET_ITEM( const_tuple_47b5affa04c2f26006db643529889f18_tuple, 1, const_str_plain_use_builtin_types ); Py_INCREF( const_str_plain_use_builtin_types );
    const_str_plain_dict_type = UNSTREAM_STRING_ASCII( &constant_bin[ 507594 ], 9, 1 );
    PyTuple_SET_ITEM( const_tuple_47b5affa04c2f26006db643529889f18_tuple, 2, const_str_plain_dict_type ); Py_INCREF( const_str_plain_dict_type );
    const_str_plain_write_dict = UNSTREAM_STRING_ASCII( &constant_bin[ 507603 ], 10, 1 );
    const_str_plain_maxbinsize = UNSTREAM_STRING_ASCII( &constant_bin[ 507613 ], 10, 1 );
    const_str_plain_writePlist = UNSTREAM_STRING_ASCII( &constant_bin[ 507623 ], 10, 1 );
    const_str_plain__scalars = UNSTREAM_STRING_ASCII( &constant_bin[ 507633 ], 8, 1 );
    const_str_plain__is_fmt_binary = UNSTREAM_STRING_ASCII( &constant_bin[ 507641 ], 14, 1 );
    const_tuple_9baa4e03aa6f68e7a024d9ed2f9ce383_tuple = PyTuple_New( 6 );
    PyTuple_SET_ITEM( const_tuple_9baa4e03aa6f68e7a024d9ed2f9ce383_tuple, 0, const_str_plain_s ); Py_INCREF( const_str_plain_s );
    const_str_plain_order = UNSTREAM_STRING_ASCII( &constant_bin[ 46354 ], 5, 1 );
    PyTuple_SET_ITEM( const_tuple_9baa4e03aa6f68e7a024d9ed2f9ce383_tuple, 1, const_str_plain_order ); Py_INCREF( const_str_plain_order );
    const_str_plain_gd = UNSTREAM_STRING_ASCII( &constant_bin[ 4509 ], 2, 1 );
    PyTuple_SET_ITEM( const_tuple_9baa4e03aa6f68e7a024d9ed2f9ce383_tuple, 2, const_str_plain_gd ); Py_INCREF( const_str_plain_gd );
    PyTuple_SET_ITEM( const_tuple_9baa4e03aa6f68e7a024d9ed2f9ce383_tuple, 3, const_str_plain_lst ); Py_INCREF( const_str_plain_lst );
    PyTuple_SET_ITEM( const_tuple_9baa4e03aa6f68e7a024d9ed2f9ce383_tuple, 4, const_str_plain_key ); Py_INCREF( const_str_plain_key );
    PyTuple_SET_ITEM( const_tuple_9baa4e03aa6f68e7a024d9ed2f9ce383_tuple, 5, const_str_plain_val ); Py_INCREF( const_str_plain_val );
    const_int_pos_19 = PyLong_FromUnsignedLong( 19ul );
    const_str_digest_709ace4422e85fc85e4ac6f17a9f2741 = UNSTREAM_STRING_ASCII( &constant_bin[ 507655 ], 23, 0 );
    const_str_plain_end_integer = UNSTREAM_STRING_ASCII( &constant_bin[ 507678 ], 11, 1 );
    const_str_plain__DumbXMLWriter = UNSTREAM_STRING_ASCII( &constant_bin[ 507689 ], 14, 1 );
    const_str_digest_ef90eba32953df4533399b3bd5512b87 = UNSTREAM_STRING_ASCII( &constant_bin[ 507703 ], 23, 0 );
    const_str_plain_ParseFile = UNSTREAM_STRING_ASCII( &constant_bin[ 507726 ], 9, 1 );
    const_str_plain_bom = UNSTREAM_STRING_ASCII( &constant_bin[ 507735 ], 3, 1 );
    const_str_plain_pieces = UNSTREAM_STRING_ASCII( &constant_bin[ 127432 ], 6, 1 );
    const_str_plain_write_array = UNSTREAM_STRING_ASCII( &constant_bin[ 507738 ], 11, 1 );
    const_str_plain__ref_size = UNSTREAM_STRING_ASCII( &constant_bin[ 507749 ], 9, 1 );
    const_tuple_b8e54e8a5350150160288b1946222fce_tuple = PyTuple_New( 6 );
    PyTuple_SET_ITEM( const_tuple_b8e54e8a5350150160288b1946222fce_tuple, 0, const_str_plain_value ); Py_INCREF( const_str_plain_value );
    PyTuple_SET_ITEM( const_tuple_b8e54e8a5350150160288b1946222fce_tuple, 1, const_str_plain_fp ); Py_INCREF( const_str_plain_fp );
    PyTuple_SET_ITEM( const_tuple_b8e54e8a5350150160288b1946222fce_tuple, 2, const_str_plain_fmt ); Py_INCREF( const_str_plain_fmt );
    const_str_plain_sort_keys = UNSTREAM_STRING_ASCII( &constant_bin[ 507758 ], 9, 1 );
    PyTuple_SET_ITEM( const_tuple_b8e54e8a5350150160288b1946222fce_tuple, 3, const_str_plain_sort_keys ); Py_INCREF( const_str_plain_sort_keys );
    const_str_plain_skipkeys = UNSTREAM_STRING_ASCII( &constant_bin[ 507767 ], 8, 1 );
    PyTuple_SET_ITEM( const_tuple_b8e54e8a5350150160288b1946222fce_tuple, 4, const_str_plain_skipkeys ); Py_INCREF( const_str_plain_skipkeys );
    const_str_plain_writer = UNSTREAM_STRING_ASCII( &constant_bin[ 152858 ], 6, 1 );
    PyTuple_SET_ITEM( const_tuple_b8e54e8a5350150160288b1946222fce_tuple, 5, const_str_plain_writer ); Py_INCREF( const_str_plain_writer );
    const_str_digest_2d6be220c1ec10e13ee045608ed4f210 = UNSTREAM_STRING_ASCII( &constant_bin[ 507775 ], 31, 0 );
    const_str_digest_d21f4e2199bc86e1c924dc3ed9f1fbf4 = UNSTREAM_STRING_ASCII( &constant_bin[ 507806 ], 21, 0 );
    const_str_plain_false = UNSTREAM_STRING_ASCII( &constant_bin[ 6668 ], 5, 1 );
    const_tuple_str_plain_self_str_plain_array_str_plain_value_tuple = PyTuple_New( 3 );
    PyTuple_SET_ITEM( const_tuple_str_plain_self_str_plain_array_str_plain_value_tuple, 0, const_str_plain_self ); Py_INCREF( const_str_plain_self );
    const_str_plain_array = UNSTREAM_STRING_ASCII( &constant_bin[ 79107 ], 5, 1 );
    PyTuple_SET_ITEM( const_tuple_str_plain_self_str_plain_array_str_plain_value_tuple, 1, const_str_plain_array ); Py_INCREF( const_str_plain_array );
    PyTuple_SET_ITEM( const_tuple_str_plain_self_str_plain_array_str_plain_value_tuple, 2, const_str_plain_value ); Py_INCREF( const_str_plain_value );
    const_int_neg_9223372036854775808 = PyMarshal_ReadObjectFromString( (char *)&constant_bin[ 507827 ], 15 );
    const_str_digest_5c5bea784457cd769cf2d0a7c5add271 = UNSTREAM_STRING_ASCII( &constant_bin[ 507842 ], 4, 0 );
    const_str_plain_num_objects = UNSTREAM_STRING_ASCII( &constant_bin[ 507846 ], 11, 1 );
    const_str_digest_7ba0133bc3119ad9630c08f3519c5f25 = UNSTREAM_STRING_ASCII( &constant_bin[ 507857 ], 175, 0 );
    const_str_plain_top_object = UNSTREAM_STRING_ASCII( &constant_bin[ 508032 ], 10, 1 );
    const_str_digest_6583f9dd4ad34b121a1756d5bda1dffa = UNSTREAM_STRING_ASCII( &constant_bin[ 508042 ], 22, 0 );
    const_tuple_25668ffae678bfc7b9117007742f267f_tuple = PyTuple_New( 4 );
    PyTuple_SET_ITEM( const_tuple_25668ffae678bfc7b9117007742f267f_tuple, 0, const_str_plain_self ); Py_INCREF( const_str_plain_self );
    PyTuple_SET_ITEM( const_tuple_25668ffae678bfc7b9117007742f267f_tuple, 1, const_str_plain_fp ); Py_INCREF( const_str_plain_fp );
    PyTuple_SET_ITEM( const_tuple_25668ffae678bfc7b9117007742f267f_tuple, 2, const_str_plain_sort_keys ); Py_INCREF( const_str_plain_sort_keys );
    PyTuple_SET_ITEM( const_tuple_25668ffae678bfc7b9117007742f267f_tuple, 3, const_str_plain_skipkeys ); Py_INCREF( const_str_plain_skipkeys );
    const_str_digest_6153138c885a517dff97b435623517b4 = UNSTREAM_STRING_ASCII( &constant_bin[ 508064 ], 24, 0 );
    const_str_plain__objtable = UNSTREAM_STRING_ASCII( &constant_bin[ 508088 ], 9, 1 );
    const_str_digest_93db4cc720679c16c4810fecd5e3e28c = UNSTREAM_STRING_ASCII( &constant_bin[ 508097 ], 36, 0 );
    const_str_plain_end_date = UNSTREAM_STRING_ASCII( &constant_bin[ 508133 ], 8, 1 );
    const_str_digest_e8b5b617841013b69c2195852fb55e5f = UNSTREAM_STRING_ASCII( &constant_bin[ 508141 ], 57, 0 );
    const_str_plain__PlistWriter = UNSTREAM_STRING_ASCII( &constant_bin[ 507806 ], 12, 1 );
    const_str_plain_detect = UNSTREAM_STRING_ASCII( &constant_bin[ 193080 ], 6, 1 );
    const_str_digest_19a40d89232ab3046ca85b82add92df5 = UNSTREAM_STRING_ASCII( &constant_bin[ 508198 ], 1493, 0 );
    const_str_digest_b88ec066015c7720232071fa9e175d13 = UNSTREAM_STRING_ASCII( &constant_bin[ 509691 ], 81, 0 );
    const_str_plain_end_false = UNSTREAM_STRING_ASCII( &constant_bin[ 509772 ], 9, 1 );
    const_tuple_9522554f5f5338f988ab20038367cb18_tuple = PyTuple_New( 7 );
    PyTuple_SET_ITEM( const_tuple_9522554f5f5338f988ab20038367cb18_tuple, 0, const_str_plain_header ); Py_INCREF( const_str_plain_header );
    PyTuple_SET_ITEM( const_tuple_9522554f5f5338f988ab20038367cb18_tuple, 1, const_str_plain_prefixes ); Py_INCREF( const_str_plain_prefixes );
    const_str_plain_pfx = UNSTREAM_STRING_ASCII( &constant_bin[ 434812 ], 3, 1 );
    PyTuple_SET_ITEM( const_tuple_9522554f5f5338f988ab20038367cb18_tuple, 2, const_str_plain_pfx ); Py_INCREF( const_str_plain_pfx );
    PyTuple_SET_ITEM( const_tuple_9522554f5f5338f988ab20038367cb18_tuple, 3, const_str_plain_bom ); Py_INCREF( const_str_plain_bom );
    PyTuple_SET_ITEM( const_tuple_9522554f5f5338f988ab20038367cb18_tuple, 4, const_str_plain_encoding ); Py_INCREF( const_str_plain_encoding );
    PyTuple_SET_ITEM( const_tuple_9522554f5f5338f988ab20038367cb18_tuple, 5, const_str_plain_start ); Py_INCREF( const_str_plain_start );
    PyTuple_SET_ITEM( const_tuple_9522554f5f5338f988ab20038367cb18_tuple, 6, const_str_plain_prefix ); Py_INCREF( const_str_plain_prefix );
    const_str_plain_indent_level = UNSTREAM_STRING_ASCII( &constant_bin[ 509781 ], 12, 1 );
    const_str_plain_sort_version = UNSTREAM_STRING_ASCII( &constant_bin[ 509793 ], 12, 1 );
    const_tuple_str_plain__PlistParser_tuple_empty_tuple = PyTuple_New( 2 );
    const_str_plain__PlistParser = UNSTREAM_STRING_ASCII( &constant_bin[ 507655 ], 12, 1 );
    PyTuple_SET_ITEM( const_tuple_str_plain__PlistParser_tuple_empty_tuple, 0, const_str_plain__PlistParser ); Py_INCREF( const_str_plain__PlistParser );
    PyTuple_SET_ITEM( const_tuple_str_plain__PlistParser_tuple_empty_tuple, 1, const_tuple_empty ); Py_INCREF( const_tuple_empty );
    const_str_digest_bb6534566f5b003bfb322d5b174e21cf = UNSTREAM_STRING_ASCII( &constant_bin[ 509805 ], 31, 0 );
    const_tuple_int_0_bytes_chr_9_int_pos_1_true_false_tuple = PyTuple_New( 5 );
    PyTuple_SET_ITEM( const_tuple_int_0_bytes_chr_9_int_pos_1_true_false_tuple, 0, const_int_0 ); Py_INCREF( const_int_0 );
    const_bytes_chr_9 = UNSTREAM_BYTES( &constant_bin[ 4523 ], 1 );
    PyTuple_SET_ITEM( const_tuple_int_0_bytes_chr_9_int_pos_1_true_false_tuple, 1, const_bytes_chr_9 ); Py_INCREF( const_bytes_chr_9 );
    PyTuple_SET_ITEM( const_tuple_int_0_bytes_chr_9_int_pos_1_true_false_tuple, 2, const_int_pos_1 ); Py_INCREF( const_int_pos_1 );
    PyTuple_SET_ITEM( const_tuple_int_0_bytes_chr_9_int_pos_1_true_false_tuple, 3, Py_True ); Py_INCREF( Py_True );
    PyTuple_SET_ITEM( const_tuple_int_0_bytes_chr_9_int_pos_1_true_false_tuple, 4, Py_False ); Py_INCREF( Py_False );
    const_str_plain__ref_format = UNSTREAM_STRING_ASCII( &constant_bin[ 509836 ], 11, 1 );
    const_str_plain_end_element = UNSTREAM_STRING_ASCII( &constant_bin[ 507795 ], 11, 1 );
    const_str_digest_098cae6af4590a5be139fc9e6eb09d4d = UNSTREAM_STRING_ASCII( &constant_bin[ 509847 ], 22, 0 );
    const_str_plain_EndElementHandler = UNSTREAM_STRING_ASCII( &constant_bin[ 509869 ], 17, 1 );
    const_tuple_a7f2679b5a7ee191ec47598e0c252f18_tuple = PyTuple_New( 2 );
    const_str_plain_PlistFormat = UNSTREAM_STRING_ASCII( &constant_bin[ 509886 ], 11, 1 );
    PyTuple_SET_ITEM( const_tuple_a7f2679b5a7ee191ec47598e0c252f18_tuple, 0, const_str_plain_PlistFormat ); Py_INCREF( const_str_plain_PlistFormat );
    const_str_digest_9d86821dbf39b1da342fb20140712fd0 = UNSTREAM_STRING_ASCII( &constant_bin[ 509897 ], 18, 0 );
    PyTuple_SET_ITEM( const_tuple_a7f2679b5a7ee191ec47598e0c252f18_tuple, 1, const_str_digest_9d86821dbf39b1da342fb20140712fd0 ); Py_INCREF( const_str_digest_9d86821dbf39b1da342fb20140712fd0 );
    const_str_plain_end_dict = UNSTREAM_STRING_ASCII( &constant_bin[ 509915 ], 8, 1 );
    const_str_digest_a40e3915d472621166a50dadef08ff76 = UNSTREAM_STRING_ASCII( &constant_bin[ 509923 ], 4, 0 );
    const_tuple_15847381bc67e44c74cc6010c7c7f848_tuple = PyTuple_New( 3 );
    PyTuple_SET_ITEM( const_tuple_15847381bc67e44c74cc6010c7c7f848_tuple, 0, const_str_digest_b9c4baf879ebd882d40843df3a4dead7 ); Py_INCREF( const_str_digest_b9c4baf879ebd882d40843df3a4dead7 );
    PyTuple_SET_ITEM( const_tuple_15847381bc67e44c74cc6010c7c7f848_tuple, 1, const_str_plain_x ); Py_INCREF( const_str_plain_x );
    PyTuple_SET_ITEM( const_tuple_15847381bc67e44c74cc6010c7c7f848_tuple, 2, const_str_plain_self ); Py_INCREF( const_str_plain_self );
    const_str_digest_319c1a717878e014ecb8fc79474aef31 = UNSTREAM_STRING_ASCII( &constant_bin[ 509927 ], 120, 0 );
    const_str_digest_376488162a4b457dc0f7e24a467edc33 = UNSTREAM_STRING_ASCII( &constant_bin[ 510047 ], 8, 0 );
    const_str_plain_FMT_BINARY = UNSTREAM_STRING_ASCII( &constant_bin[ 509905 ], 10, 1 );
    const_str_plain_FMT_XML = UNSTREAM_STRING_ASCII( &constant_bin[ 509897 ], 7, 1 );
    const_str_digest_5a6bc68f62f243e5febb003858df9a4d = UNSTREAM_STRING_ASCII( &constant_bin[ 510055 ], 112, 0 );
    const_tuple_int_pos_32_tuple = PyTuple_New( 1 );
    PyTuple_SET_ITEM( const_tuple_int_pos_32_tuple, 0, const_int_pos_32 ); Py_INCREF( const_int_pos_32 );
    const_str_digest_5488d6035ce32cb670efe19cb3e3e6e0 = UNSTREAM_STRING_ASCII( &constant_bin[ 510167 ], 20, 0 );
    const_str_plain_end_real = UNSTREAM_STRING_ASCII( &constant_bin[ 510187 ], 8, 1 );
    const_str_digest_c0c3759da123e387798315e75d2fed70 = UNSTREAM_STRING_ASCII( &constant_bin[ 12472 ], 4, 0 );
    const_tuple_623aab190dd8a0ffb8f075c95f8d756d_tuple = PyTuple_New( 5 );
    PyTuple_SET_ITEM( const_tuple_623aab190dd8a0ffb8f075c95f8d756d_tuple, 0, const_str_plain_self ); Py_INCREF( const_str_plain_self );
    PyTuple_SET_ITEM( const_tuple_623aab190dd8a0ffb8f075c95f8d756d_tuple, 1, const_str_plain_d ); Py_INCREF( const_str_plain_d );
    PyTuple_SET_ITEM( const_tuple_623aab190dd8a0ffb8f075c95f8d756d_tuple, 2, const_str_plain_items ); Py_INCREF( const_str_plain_items );
    PyTuple_SET_ITEM( const_tuple_623aab190dd8a0ffb8f075c95f8d756d_tuple, 3, const_str_plain_key ); Py_INCREF( const_str_plain_key );
    PyTuple_SET_ITEM( const_tuple_623aab190dd8a0ffb8f075c95f8d756d_tuple, 4, const_str_plain_value ); Py_INCREF( const_str_plain_value );
    const_str_plain_maxlinelength = UNSTREAM_STRING_ASCII( &constant_bin[ 510195 ], 13, 1 );
    const_str_digest_509d2c061e910144dad29e294d0e99af = UNSTREAM_STRING_ASCII( &constant_bin[ 510208 ], 113, 0 );
    const_str_digest_492eced51578a561806e20ae8ef1f867 = UNSTREAM_STRING_ASCII( &constant_bin[ 35304 ], 2, 0 );
    const_str_digest_226565d3552bd23afa8c5978471661ea = UNSTREAM_STRING_ASCII( &constant_bin[ 510321 ], 37, 0 );
    const_str_plain_tokenL = UNSTREAM_STRING_ASCII( &constant_bin[ 510358 ], 6, 1 );
    const_str_plain__read_ints = UNSTREAM_STRING_ASCII( &constant_bin[ 510364 ], 10, 1 );
    const_bytes_chr_20 = UNSTREAM_BYTES( &constant_bin[ 3205 ], 1 );
    const_str_plain_add_object = UNSTREAM_STRING_ASCII( &constant_bin[ 510374 ], 10, 1 );
    const_tuple_str_plain_self_str_plain_n_str_plain_size_str_plain_data_tuple = PyTuple_New( 4 );
    PyTuple_SET_ITEM( const_tuple_str_plain_self_str_plain_n_str_plain_size_str_plain_data_tuple, 0, const_str_plain_self ); Py_INCREF( const_str_plain_self );
    PyTuple_SET_ITEM( const_tuple_str_plain_self_str_plain_n_str_plain_size_str_plain_data_tuple, 1, const_str_plain_n ); Py_INCREF( const_str_plain_n );
    PyTuple_SET_ITEM( const_tuple_str_plain_self_str_plain_n_str_plain_size_str_plain_data_tuple, 2, const_str_plain_size ); Py_INCREF( const_str_plain_size );
    PyTuple_SET_ITEM( const_tuple_str_plain_self_str_plain_n_str_plain_size_str_plain_data_tuple, 3, const_str_plain_data ); Py_INCREF( const_str_plain_data );
    const_tuple_str_plain_Data_tuple_empty_tuple = PyTuple_New( 2 );
    PyTuple_SET_ITEM( const_tuple_str_plain_Data_tuple_empty_tuple, 0, const_str_plain_Data ); Py_INCREF( const_str_plain_Data );
    PyTuple_SET_ITEM( const_tuple_str_plain_Data_tuple_empty_tuple, 1, const_tuple_empty ); Py_INCREF( const_tuple_empty );
    const_str_digest_d157bbee9bf6e82d2b8fd0f849cf01c7 = UNSTREAM_STRING_ASCII( &constant_bin[ 510384 ], 21, 0 );
    const_tuple_str_plain_self_str_plain_attrs_str_plain_d_tuple = PyTuple_New( 3 );
    PyTuple_SET_ITEM( const_tuple_str_plain_self_str_plain_attrs_str_plain_d_tuple, 0, const_str_plain_self ); Py_INCREF( const_str_plain_self );
    PyTuple_SET_ITEM( const_tuple_str_plain_self_str_plain_attrs_str_plain_d_tuple, 1, const_str_plain_attrs ); Py_INCREF( const_str_plain_attrs );
    PyTuple_SET_ITEM( const_tuple_str_plain_self_str_plain_attrs_str_plain_d_tuple, 2, const_str_plain_d ); Py_INCREF( const_str_plain_d );
    const_str_plain_asBase64 = UNSTREAM_STRING_ASCII( &constant_bin[ 510405 ], 8, 1 );
    const_str_plain_key_refs = UNSTREAM_STRING_ASCII( &constant_bin[ 510413 ], 8, 1 );
    const_str_plain__write_object = UNSTREAM_STRING_ASCII( &constant_bin[ 510421 ], 13, 1 );
    const_tuple_bcb813e58dde09b7032e289858300c76_tuple = PyTuple_New( 5 );
    PyTuple_SET_ITEM( const_tuple_bcb813e58dde09b7032e289858300c76_tuple, 0, const_str_plain_self ); Py_INCREF( const_str_plain_self );
    PyTuple_SET_ITEM( const_tuple_bcb813e58dde09b7032e289858300c76_tuple, 1, const_str_plain_tokenL ); Py_INCREF( const_str_plain_tokenL );
    PyTuple_SET_ITEM( const_tuple_bcb813e58dde09b7032e289858300c76_tuple, 2, const_str_plain_m ); Py_INCREF( const_str_plain_m );
    PyTuple_SET_ITEM( const_tuple_bcb813e58dde09b7032e289858300c76_tuple, 3, const_str_plain_s ); Py_INCREF( const_str_plain_s );
    PyTuple_SET_ITEM( const_tuple_bcb813e58dde09b7032e289858300c76_tuple, 4, const_str_plain_f ); Py_INCREF( const_str_plain_f );
    const_str_plain_end_array = UNSTREAM_STRING_ASCII( &constant_bin[ 509860 ], 9, 1 );
    const_str_digest_7b6f2dcaf0f7afb26874dc91eb48fdfd = UNSTREAM_STRING_ASCII( &constant_bin[ 510434 ], 13, 0 );
    const_tuple_str_plain_self_str_plain_attrs_str_plain_a_tuple = PyTuple_New( 3 );
    PyTuple_SET_ITEM( const_tuple_str_plain_self_str_plain_attrs_str_plain_a_tuple, 0, const_str_plain_self ); Py_INCREF( const_str_plain_self );
    PyTuple_SET_ITEM( const_tuple_str_plain_self_str_plain_attrs_str_plain_a_tuple, 1, const_str_plain_attrs ); Py_INCREF( const_str_plain_attrs );
    PyTuple_SET_ITEM( const_tuple_str_plain_self_str_plain_attrs_str_plain_a_tuple, 2, const_str_plain_a ); Py_INCREF( const_str_plain_a );
    const_str_plain_offset_table_offset = UNSTREAM_STRING_ASCII( &constant_bin[ 510447 ], 19, 1 );
    const_str_plain_rootItems = UNSTREAM_STRING_ASCII( &constant_bin[ 510466 ], 9, 1 );
    const_str_plain_offset_size = UNSTREAM_STRING_ASCII( &constant_bin[ 510475 ], 11, 1 );
    const_str_digest_8be052e714db42ed917ef93431760d0b = UNSTREAM_STRING_ASCII( &constant_bin[ 510486 ], 4, 0 );
    const_str_digest_e5d58339820a87bba8cbb522f71890a2 = UNSTREAM_STRING_ASCII( &constant_bin[ 510490 ], 23, 0 );
    const_str_plain__skipkeys = UNSTREAM_STRING_ASCII( &constant_bin[ 510513 ], 9, 1 );
    const_tuple_ee76a917505f42f364215f078effac82_tuple = PyTuple_New( 4 );
    PyTuple_SET_ITEM( const_tuple_ee76a917505f42f364215f078effac82_tuple, 0, const_str_plain_self ); Py_INCREF( const_str_plain_self );
    PyTuple_SET_ITEM( const_tuple_ee76a917505f42f364215f078effac82_tuple, 1, const_str_plain_file ); Py_INCREF( const_str_plain_file );
    PyTuple_SET_ITEM( const_tuple_ee76a917505f42f364215f078effac82_tuple, 2, const_str_plain_indent_level ); Py_INCREF( const_str_plain_indent_level );
    PyTuple_SET_ITEM( const_tuple_ee76a917505f42f364215f078effac82_tuple, 3, const_str_plain_indent ); Py_INCREF( const_str_plain_indent );
    const_str_digest_76d6e11399c7aa1061842aa32438ca8b = UNSTREAM_STRING_ASCII( &constant_bin[ 510522 ], 21, 0 );
    const_str_plain__decode_base64 = UNSTREAM_STRING_ASCII( &constant_bin[ 510543 ], 14, 1 );
    const_str_plain_writeHeader = UNSTREAM_STRING_ASCII( &constant_bin[ 510557 ], 11, 1 );
    const_tuple_bytes_chr_9_bytes_digest_0687ed4919ad17fa1840df46e91d0910_tuple = PyTuple_New( 2 );
    PyTuple_SET_ITEM( const_tuple_bytes_chr_9_bytes_digest_0687ed4919ad17fa1840df46e91d0910_tuple, 0, const_bytes_chr_9 ); Py_INCREF( const_bytes_chr_9 );
    PyTuple_SET_ITEM( const_tuple_bytes_chr_9_bytes_digest_0687ed4919ad17fa1840df46e91d0910_tuple, 1, const_bytes_digest_0687ed4919ad17fa1840df46e91d0910 ); Py_INCREF( const_bytes_digest_0687ed4919ad17fa1840df46e91d0910 );
    const_str_plain_InvalidFileException = UNSTREAM_STRING_ASCII( &constant_bin[ 510568 ], 20, 1 );
    const_tuple_str_plain_d_tuple = PyTuple_New( 1 );
    PyTuple_SET_ITEM( const_tuple_str_plain_d_tuple, 0, const_str_plain_d ); Py_INCREF( const_str_plain_d );
    const_str_digest_effaccf01132aa7a279407b5ff12ad69 = UNSTREAM_STRING_ASCII( &constant_bin[ 510588 ], 5, 0 );
    const_str_digest_155a756f54744518395968bd831829a0 = UNSTREAM_STRING_ASCII( &constant_bin[ 510593 ], 65, 0 );
    const_str_digest_3ceff0c8cf65327ba798e42abd161faa = UNSTREAM_STRING_ASCII( &constant_bin[ 510658 ], 18, 0 );
    const_str_digest_f8bafc552baab4cac1e232d282cdb986 = UNSTREAM_STRING_ASCII( &constant_bin[ 510676 ], 15, 0 );
    const_str_digest_a5d06843ffb0b436ec51dd55af67c502 = UNSTREAM_STRING_ASCII( &constant_bin[ 510691 ], 29, 0 );
    const_str_plain__controlCharPat = UNSTREAM_STRING_ASCII( &constant_bin[ 510720 ], 15, 1 );
    const_str_plain_write_data = UNSTREAM_STRING_ASCII( &constant_bin[ 510735 ], 10, 1 );
    const_int_neg_32 = PyLong_FromLong( -32l );
    const_tuple_f93ca986507b5d7bc076a33adb0d1b71_tuple = PyTuple_New( 2 );
    const_bytes_digest_fb33fa19223055b76ab12de7593a77ac = UNSTREAM_BYTES( &constant_bin[ 47628 ], 5 );
    PyTuple_SET_ITEM( const_tuple_f93ca986507b5d7bc076a33adb0d1b71_tuple, 0, const_bytes_digest_fb33fa19223055b76ab12de7593a77ac ); Py_INCREF( const_bytes_digest_fb33fa19223055b76ab12de7593a77ac );
    const_bytes_digest_de1738a381f06fd62424af1a5cd3e07d = UNSTREAM_BYTES( &constant_bin[ 510522 ], 6 );
    PyTuple_SET_ITEM( const_tuple_f93ca986507b5d7bc076a33adb0d1b71_tuple, 1, const_bytes_digest_de1738a381f06fd62424af1a5cd3e07d ); Py_INCREF( const_bytes_digest_de1738a381f06fd62424af1a5cd3e07d );
    const_str_digest_b737658f4b2da5ff2ae42c0fba5b6033 = UNSTREAM_STRING_ASCII( &constant_bin[ 510745 ], 9, 0 );
    const_tuple_str_plain_cls_str_plain_data_tuple = PyTuple_New( 2 );
    PyTuple_SET_ITEM( const_tuple_str_plain_cls_str_plain_data_tuple, 0, const_str_plain_cls ); Py_INCREF( const_str_plain_cls );
    PyTuple_SET_ITEM( const_tuple_str_plain_cls_str_plain_data_tuple, 1, const_str_plain_data ); Py_INCREF( const_str_plain_data );
    const_str_plain__getrefnum = UNSTREAM_STRING_ASCII( &constant_bin[ 510754 ], 10, 1 );
    const_str_plain__date_to_string = UNSTREAM_STRING_ASCII( &constant_bin[ 510764 ], 15, 1 );
    const_tuple_str_digest_7d8c029aa14d4038a202ab8b1ce8db36_tuple = PyTuple_New( 1 );
    const_str_digest_7d8c029aa14d4038a202ab8b1ce8db36 = UNSTREAM_STRING_ASCII( &constant_bin[ 510779 ], 8, 0 );
    PyTuple_SET_ITEM( const_tuple_str_digest_7d8c029aa14d4038a202ab8b1ce8db36_tuple, 0, const_str_digest_7d8c029aa14d4038a202ab8b1ce8db36 ); Py_INCREF( const_str_digest_7d8c029aa14d4038a202ab8b1ce8db36 );
    const_str_plain_BOM_UTF16_BE = UNSTREAM_STRING_ASCII( &constant_bin[ 510787 ], 12, 1 );
    const_str_plain__BinaryPlistParser = UNSTREAM_STRING_ASCII( &constant_bin[ 508064 ], 18, 1 );
    const_int_pos_34 = PyLong_FromUnsignedLong( 34ul );
    const_str_digest_9705f9bcd6179641b4862cd0d8a2fd26 = UNSTREAM_STRING_ASCII( &constant_bin[ 510799 ], 29, 0 );
    const_str_plain_begin_array = UNSTREAM_STRING_ASCII( &constant_bin[ 510828 ], 11, 1 );
    const_str_digest_c9a912e7747523d7f6380ebb87307469 = UNSTREAM_STRING_ASCII( &constant_bin[ 510839 ], 21, 0 );
    const_str_plain_StartElementHandler = UNSTREAM_STRING_ASCII( &constant_bin[ 510860 ], 19, 1 );
    const_tuple_str_plain_array_tuple = PyTuple_New( 1 );
    PyTuple_SET_ITEM( const_tuple_str_plain_array_tuple, 0, const_str_plain_array ); Py_INCREF( const_str_plain_array );
    const_str_plain_end_key = UNSTREAM_STRING_ASCII( &constant_bin[ 510879 ], 7, 1 );
    const_str_plain__sort_keys = UNSTREAM_STRING_ASCII( &constant_bin[ 510886 ], 10, 1 );
    const_str_plain__dict_type = UNSTREAM_STRING_ASCII( &constant_bin[ 510896 ], 10, 1 );
    const_str_digest_9d915ddb152ecaa439ec97699234e5a3 = UNSTREAM_STRING_ASCII( &constant_bin[ 510906 ], 29, 0 );
    const_tuple_f4567b4de8a9c702e1f99f4ec37ddd85_tuple = PyTuple_New( 4 );
    PyTuple_SET_ITEM( const_tuple_f4567b4de8a9c702e1f99f4ec37ddd85_tuple, 0, const_str_digest_b9c4baf879ebd882d40843df3a4dead7 ); Py_INCREF( const_str_digest_b9c4baf879ebd882d40843df3a4dead7 );
    PyTuple_SET_ITEM( const_tuple_f4567b4de8a9c702e1f99f4ec37ddd85_tuple, 1, const_str_plain_i ); Py_INCREF( const_str_plain_i );
    PyTuple_SET_ITEM( const_tuple_f4567b4de8a9c702e1f99f4ec37ddd85_tuple, 2, const_str_plain_data ); Py_INCREF( const_str_plain_data );
    PyTuple_SET_ITEM( const_tuple_f4567b4de8a9c702e1f99f4ec37ddd85_tuple, 3, const_str_plain_size ); Py_INCREF( const_str_plain_size );
    const_str_digest_3c048894775f66f19300c824177e657d = UNSTREAM_STRING_ASCII( &constant_bin[ 510935 ], 24, 0 );
    const_str_digest_67d4853a9b27d1ed49dfc583b05f2dc2 = UNSTREAM_STRING_ASCII( &constant_bin[ 510959 ], 21, 0 );
    const_str_plain_BOM_UTF8 = UNSTREAM_STRING_ASCII( &constant_bin[ 510980 ], 8, 1 );
    const_str_digest_5050cf860e68bc9f9751cc7744a512f0 = UNSTREAM_STRING_ASCII( &constant_bin[ 510988 ], 26, 0 );
    const_str_digest_d1666c2e815cdf8c51a87c4cc5a38f18 = UNSTREAM_STRING_ASCII( &constant_bin[ 511014 ], 56, 0 );
    const_str_digest_a166d0e20cf23102cf939cef62c22331 = UNSTREAM_STRING_ASCII( &constant_bin[ 511070 ], 9, 0 );
    const_tuple_int_0_str_chr_9_tuple = PyTuple_New( 2 );
    PyTuple_SET_ITEM( const_tuple_int_0_str_chr_9_tuple, 0, const_int_0 ); Py_INCREF( const_int_0 );
    PyTuple_SET_ITEM( const_tuple_int_0_str_chr_9_tuple, 1, const_str_chr_9 ); Py_INCREF( const_str_chr_9 );
    const_str_digest_44d5b97bfcdc23fe8972f889bcf9f31b = UNSTREAM_STRING_ASCII( &constant_bin[ 511079 ], 30, 0 );
    const_str_plain_begin_element = UNSTREAM_STRING_ASCII( &constant_bin[ 511109 ], 13, 1 );
    const_str_plain__get_size = UNSTREAM_STRING_ASCII( &constant_bin[ 511122 ], 9, 1 );
    const_tuple_str_digest_376488162a4b457dc0f7e24a467edc33_tuple = PyTuple_New( 1 );
    PyTuple_SET_ITEM( const_tuple_str_digest_376488162a4b457dc0f7e24a467edc33_tuple, 0, const_str_digest_376488162a4b457dc0f7e24a467edc33 ); Py_INCREF( const_str_digest_376488162a4b457dc0f7e24a467edc33 );
    const_tuple_str_plain_self_str_plain_maxlinelength_tuple = PyTuple_New( 2 );
    PyTuple_SET_ITEM( const_tuple_str_plain_self_str_plain_maxlinelength_tuple, 0, const_str_plain_self ); Py_INCREF( const_str_plain_self );
    PyTuple_SET_ITEM( const_tuple_str_plain_self_str_plain_maxlinelength_tuple, 1, const_str_plain_maxlinelength ); Py_INCREF( const_str_plain_maxlinelength );
    const_str_digest_1be925b60179ca3ccaa06f3b6ddcf5ec = UNSTREAM_STRING_ASCII( &constant_bin[ 511131 ], 33, 0 );
    const_str_digest_b3a31e7b106c45d8dfd995a9fd411a18 = UNSTREAM_STRING_ASCII( &constant_bin[ 511164 ], 24, 0 );
    const_tuple_str_plain_pathOrFile_str_plain_mode_str_plain_fp_tuple = PyTuple_New( 3 );
    const_str_plain_pathOrFile = UNSTREAM_STRING_ASCII( &constant_bin[ 507897 ], 10, 1 );
    PyTuple_SET_ITEM( const_tuple_str_plain_pathOrFile_str_plain_mode_str_plain_fp_tuple, 0, const_str_plain_pathOrFile ); Py_INCREF( const_str_plain_pathOrFile );
    PyTuple_SET_ITEM( const_tuple_str_plain_pathOrFile_str_plain_mode_str_plain_fp_tuple, 1, const_str_plain_mode ); Py_INCREF( const_str_plain_mode );
    PyTuple_SET_ITEM( const_tuple_str_plain_pathOrFile_str_plain_mode_str_plain_fp_tuple, 2, const_str_plain_fp ); Py_INCREF( const_str_plain_fp );
    const_tuple_str_plain_self_str_plain_element_str_plain_handler_tuple = PyTuple_New( 3 );
    PyTuple_SET_ITEM( const_tuple_str_plain_self_str_plain_element_str_plain_handler_tuple, 0, const_str_plain_self ); Py_INCREF( const_str_plain_self );
    PyTuple_SET_ITEM( const_tuple_str_plain_self_str_plain_element_str_plain_handler_tuple, 1, const_str_plain_element ); Py_INCREF( const_str_plain_element );
    PyTuple_SET_ITEM( const_tuple_str_plain_self_str_plain_element_str_plain_handler_tuple, 2, const_str_plain_handler ); Py_INCREF( const_str_plain_handler );
    const_str_plain_end_data = UNSTREAM_STRING_ASCII( &constant_bin[ 510852 ], 8, 1 );
    const_tuple_str_plain_self_str_plain_element_tuple = PyTuple_New( 2 );
    PyTuple_SET_ITEM( const_tuple_str_plain_self_str_plain_element_tuple, 0, const_str_plain_self ); Py_INCREF( const_str_plain_self );
    PyTuple_SET_ITEM( const_tuple_str_plain_self_str_plain_element_tuple, 1, const_str_plain_element ); Py_INCREF( const_str_plain_element );
    const_tuple_str_plain_count_tuple = PyTuple_New( 1 );
    PyTuple_SET_ITEM( const_tuple_str_plain_count_tuple, 0, const_str_plain_count ); Py_INCREF( const_str_plain_count );
    const_str_digest_95be78bea9f8fecb1a87a18711816150 = UNSTREAM_STRING_ASCII( &constant_bin[ 511188 ], 4, 0 );
    const_tuple_str_plain_dict_tuple = PyTuple_New( 1 );
    PyTuple_SET_ITEM( const_tuple_str_plain_dict_tuple, 0, const_str_plain_dict ); Py_INCREF( const_str_plain_dict );
    const_str_plain_offset_format = UNSTREAM_STRING_ASCII( &constant_bin[ 511192 ], 13, 1 );
    const_tuple_int_pos_2001_int_pos_1_int_pos_1_tuple = PyTuple_New( 3 );
    PyTuple_SET_ITEM( const_tuple_int_pos_2001_int_pos_1_int_pos_1_tuple, 0, const_int_pos_2001 ); Py_INCREF( const_int_pos_2001 );
    PyTuple_SET_ITEM( const_tuple_int_pos_2001_int_pos_1_int_pos_1_tuple, 1, const_int_pos_1 ); Py_INCREF( const_int_pos_1 );
    PyTuple_SET_ITEM( const_tuple_int_pos_2001_int_pos_1_int_pos_1_tuple, 2, const_int_pos_1 ); Py_INCREF( const_int_pos_1 );
    const_str_plain_end_true = UNSTREAM_STRING_ASCII( &constant_bin[ 511205 ], 8, 1 );
    const_str_digest_b6db9426a48b9cf0810b1b19f24bd616 = UNSTREAM_STRING_ASCII( &constant_bin[ 511213 ], 3, 0 );
    const_tuple_a3f07ad2f4f94a590d2259e1eff15185_tuple = PyTuple_New( 9 );
    PyTuple_SET_ITEM( const_tuple_a3f07ad2f4f94a590d2259e1eff15185_tuple, 0, const_str_plain_self ); Py_INCREF( const_str_plain_self );
    PyTuple_SET_ITEM( const_tuple_a3f07ad2f4f94a590d2259e1eff15185_tuple, 1, const_str_plain_value ); Py_INCREF( const_str_plain_value );
    const_str_plain_refnum = UNSTREAM_STRING_ASCII( &constant_bin[ 510758 ], 6, 1 );
    PyTuple_SET_ITEM( const_tuple_a3f07ad2f4f94a590d2259e1eff15185_tuple, 2, const_str_plain_refnum ); Py_INCREF( const_str_plain_refnum );
    PyTuple_SET_ITEM( const_tuple_a3f07ad2f4f94a590d2259e1eff15185_tuple, 3, const_str_plain_keys ); Py_INCREF( const_str_plain_keys );
    PyTuple_SET_ITEM( const_tuple_a3f07ad2f4f94a590d2259e1eff15185_tuple, 4, const_str_plain_values ); Py_INCREF( const_str_plain_values );
    PyTuple_SET_ITEM( const_tuple_a3f07ad2f4f94a590d2259e1eff15185_tuple, 5, const_str_plain_items ); Py_INCREF( const_str_plain_items );
    PyTuple_SET_ITEM( const_tuple_a3f07ad2f4f94a590d2259e1eff15185_tuple, 6, const_str_plain_k ); Py_INCREF( const_str_plain_k );
    PyTuple_SET_ITEM( const_tuple_a3f07ad2f4f94a590d2259e1eff15185_tuple, 7, const_str_plain_v ); Py_INCREF( const_str_plain_v );
    PyTuple_SET_ITEM( const_tuple_a3f07ad2f4f94a590d2259e1eff15185_tuple, 8, const_str_plain_o ); Py_INCREF( const_str_plain_o );
    const_str_digest_a87aa14c38af2ff58724efaca0a1d2d7 = UNSTREAM_STRING_ASCII( &constant_bin[ 511216 ], 28, 0 );
    const_tuple_8121465133473965ed0ce81878ee793a_tuple = PyTuple_New( 10 );
    PyTuple_SET_ITEM( const_tuple_8121465133473965ed0ce81878ee793a_tuple, 0, const_str_plain_self ); Py_INCREF( const_str_plain_self );
    PyTuple_SET_ITEM( const_tuple_8121465133473965ed0ce81878ee793a_tuple, 1, const_str_plain_value ); Py_INCREF( const_str_plain_value );
    PyTuple_SET_ITEM( const_tuple_8121465133473965ed0ce81878ee793a_tuple, 2, const_str_plain_num_objects ); Py_INCREF( const_str_plain_num_objects );
    PyTuple_SET_ITEM( const_tuple_8121465133473965ed0ce81878ee793a_tuple, 3, const_str_plain_obj ); Py_INCREF( const_str_plain_obj );
    PyTuple_SET_ITEM( const_tuple_8121465133473965ed0ce81878ee793a_tuple, 4, const_str_plain_top_object ); Py_INCREF( const_str_plain_top_object );
    PyTuple_SET_ITEM( const_tuple_8121465133473965ed0ce81878ee793a_tuple, 5, const_str_plain_offset_table_offset ); Py_INCREF( const_str_plain_offset_table_offset );
    PyTuple_SET_ITEM( const_tuple_8121465133473965ed0ce81878ee793a_tuple, 6, const_str_plain_offset_size ); Py_INCREF( const_str_plain_offset_size );
    PyTuple_SET_ITEM( const_tuple_8121465133473965ed0ce81878ee793a_tuple, 7, const_str_plain_offset_format ); Py_INCREF( const_str_plain_offset_format );
    PyTuple_SET_ITEM( const_tuple_8121465133473965ed0ce81878ee793a_tuple, 8, const_str_plain_sort_version ); Py_INCREF( const_str_plain_sort_version );
    const_str_plain_trailer = UNSTREAM_STRING_ASCII( &constant_bin[ 360663 ], 7, 1 );
    PyTuple_SET_ITEM( const_tuple_8121465133473965ed0ce81878ee793a_tuple, 9, const_str_plain_trailer ); Py_INCREF( const_str_plain_trailer );
    const_tuple_str_digest_600e634b68a231758b74eb05aa74dac8_tuple = PyTuple_New( 1 );
    const_str_digest_600e634b68a231758b74eb05aa74dac8 = UNSTREAM_STRING_ASCII( &constant_bin[ 511244 ], 118, 0 );
    PyTuple_SET_ITEM( const_tuple_str_digest_600e634b68a231758b74eb05aa74dac8_tuple, 0, const_str_digest_600e634b68a231758b74eb05aa74dac8 ); Py_INCREF( const_str_digest_600e634b68a231758b74eb05aa74dac8 );
    const_tuple_str_plain_ParserCreate_tuple = PyTuple_New( 1 );
    const_str_plain_ParserCreate = UNSTREAM_STRING_ASCII( &constant_bin[ 511362 ], 12, 1 );
    PyTuple_SET_ITEM( const_tuple_str_plain_ParserCreate_tuple, 0, const_str_plain_ParserCreate ); Py_INCREF( const_str_plain_ParserCreate );
    const_str_plain_end_ = UNSTREAM_STRING_ASCII( &constant_bin[ 19029 ], 4, 1 );
    const_tuple_int_pos_76_tuple = PyTuple_New( 1 );
    PyTuple_SET_ITEM( const_tuple_int_pos_76_tuple, 0, const_int_pos_76 ); Py_INCREF( const_int_pos_76 );
    const_list_4c2fb79125cde76e7e3b3847734701ed_list = PyList_New( 12 );
    const_str_plain_readPlist = UNSTREAM_STRING_ASCII( &constant_bin[ 511018 ], 9, 1 );
    PyList_SET_ITEM( const_list_4c2fb79125cde76e7e3b3847734701ed_list, 0, const_str_plain_readPlist ); Py_INCREF( const_str_plain_readPlist );
    PyList_SET_ITEM( const_list_4c2fb79125cde76e7e3b3847734701ed_list, 1, const_str_plain_writePlist ); Py_INCREF( const_str_plain_writePlist );
    const_str_plain_readPlistFromBytes = UNSTREAM_STRING_ASCII( &constant_bin[ 511374 ], 18, 1 );
    PyList_SET_ITEM( const_list_4c2fb79125cde76e7e3b3847734701ed_list, 2, const_str_plain_readPlistFromBytes ); Py_INCREF( const_str_plain_readPlistFromBytes );
    const_str_plain_writePlistToBytes = UNSTREAM_STRING_ASCII( &constant_bin[ 510597 ], 17, 1 );
    PyList_SET_ITEM( const_list_4c2fb79125cde76e7e3b3847734701ed_list, 3, const_str_plain_writePlistToBytes ); Py_INCREF( const_str_plain_writePlistToBytes );
    PyList_SET_ITEM( const_list_4c2fb79125cde76e7e3b3847734701ed_list, 4, const_str_plain_Data ); Py_INCREF( const_str_plain_Data );
    PyList_SET_ITEM( const_list_4c2fb79125cde76e7e3b3847734701ed_list, 5, const_str_plain_InvalidFileException ); Py_INCREF( const_str_plain_InvalidFileException );
    PyList_SET_ITEM( const_list_4c2fb79125cde76e7e3b3847734701ed_list, 6, const_str_plain_FMT_XML ); Py_INCREF( const_str_plain_FMT_XML );
    PyList_SET_ITEM( const_list_4c2fb79125cde76e7e3b3847734701ed_list, 7, const_str_plain_FMT_BINARY ); Py_INCREF( const_str_plain_FMT_BINARY );
    PyList_SET_ITEM( const_list_4c2fb79125cde76e7e3b3847734701ed_list, 8, const_str_plain_load ); Py_INCREF( const_str_plain_load );
    PyList_SET_ITEM( const_list_4c2fb79125cde76e7e3b3847734701ed_list, 9, const_str_plain_dump ); Py_INCREF( const_str_plain_dump );
    PyList_SET_ITEM( const_list_4c2fb79125cde76e7e3b3847734701ed_list, 10, const_str_plain_loads ); Py_INCREF( const_str_plain_loads );
    PyList_SET_ITEM( const_list_4c2fb79125cde76e7e3b3847734701ed_list, 11, const_str_plain_dumps ); Py_INCREF( const_str_plain_dumps );
    const_str_digest_18c2ace845f9015af5a765b47e9c1bfd = UNSTREAM_STRING_ASCII( &constant_bin[ 511392 ], 11, 0 );
    const_tuple_9a52825cf95a5e4bc44d5812c1959e25_tuple = PyTuple_New( 6 );
    PyTuple_SET_ITEM( const_tuple_9a52825cf95a5e4bc44d5812c1959e25_tuple, 0, const_str_plain_s ); Py_INCREF( const_str_plain_s );
    PyTuple_SET_ITEM( const_tuple_9a52825cf95a5e4bc44d5812c1959e25_tuple, 1, const_str_plain_maxlinelength ); Py_INCREF( const_str_plain_maxlinelength );
    PyTuple_SET_ITEM( const_tuple_9a52825cf95a5e4bc44d5812c1959e25_tuple, 2, const_str_plain_maxbinsize ); Py_INCREF( const_str_plain_maxbinsize );
    PyTuple_SET_ITEM( const_tuple_9a52825cf95a5e4bc44d5812c1959e25_tuple, 3, const_str_plain_pieces ); Py_INCREF( const_str_plain_pieces );
    PyTuple_SET_ITEM( const_tuple_9a52825cf95a5e4bc44d5812c1959e25_tuple, 4, const_str_plain_i ); Py_INCREF( const_str_plain_i );
    PyTuple_SET_ITEM( const_tuple_9a52825cf95a5e4bc44d5812c1959e25_tuple, 5, const_str_plain_chunk ); Py_INCREF( const_str_plain_chunk );
    const_dict_572050117e2cfc8c656df66eb5790338 = _PyDict_NewPresized( 1 );
    PyDict_SetItem( const_dict_572050117e2cfc8c656df66eb5790338, const_str_plain_signed, Py_True );
    assert( PyDict_Size( const_dict_572050117e2cfc8c656df66eb5790338 ) == 1 );
    const_tuple_str_digest_564b88fedb28bf2460a9105c33b11e5b_tuple = PyTuple_New( 1 );
    const_str_digest_564b88fedb28bf2460a9105c33b11e5b = UNSTREAM_STRING_ASCII( &constant_bin[ 511403 ], 9, 0 );
    PyTuple_SET_ITEM( const_tuple_str_digest_564b88fedb28bf2460a9105c33b11e5b_tuple, 0, const_str_digest_564b88fedb28bf2460a9105c33b11e5b ); Py_INCREF( const_str_digest_564b88fedb28bf2460a9105c33b11e5b );
    const_str_plain_CurrentLineNumber = UNSTREAM_STRING_ASCII( &constant_bin[ 511412 ], 17, 1 );
    const_str_plain_write_bytes = UNSTREAM_STRING_ASCII( &constant_bin[ 511429 ], 11, 1 );
    const_str_plain__read_object = UNSTREAM_STRING_ASCII( &constant_bin[ 509824 ], 12, 1 );
    const_str_plain__indent_level = UNSTREAM_STRING_ASCII( &constant_bin[ 511440 ], 13, 1 );
    const_str_digest_407f44c0f2b9d8aa40f83eef14d23ffc = UNSTREAM_STRING_ASCII( &constant_bin[ 511453 ], 29, 0 );
    const_str_digest_c8c657a818eac5840fa113aebcb51682 = UNSTREAM_STRING_ASCII( &constant_bin[ 511482 ], 132, 0 );
    const_str_digest_6f92f0376a7df9ac4b45fb00bb287e2e = UNSTREAM_STRING_ASCII( &constant_bin[ 511614 ], 66, 0 );
    const_str_plain__write_size = UNSTREAM_STRING_ASCII( &constant_bin[ 511680 ], 11, 1 );
    const_str_plain_handle_data = UNSTREAM_STRING_ASCII( &constant_bin[ 511691 ], 11, 1 );
    const_str_digest_daab762c4c76ca471d99a7322ef0cb36 = UNSTREAM_STRING_ASCII( &constant_bin[ 511702 ], 24, 0 );
    const_str_digest_0a1de9132902fa5ffc8d8b3c8b69062b = UNSTREAM_STRING_ASCII( &constant_bin[ 511726 ], 21, 0 );
    const_str_digest_1c574f569296f7afc2b0ef363b41bf5d = UNSTREAM_STRING_ASCII( &constant_bin[ 511747 ], 259, 0 );
    const_str_digest_7595143d13e16374aae8a97c18af4a93 = UNSTREAM_STRING_ASCII( &constant_bin[ 512006 ], 13, 0 );
    const_str_plain_real = UNSTREAM_STRING_ASCII( &constant_bin[ 37139 ], 4, 1 );
    const_tuple_str_plain__BinaryPlistParser_tuple_empty_tuple = PyTuple_New( 2 );
    PyTuple_SET_ITEM( const_tuple_str_plain__BinaryPlistParser_tuple_empty_tuple, 0, const_str_plain__BinaryPlistParser ); Py_INCREF( const_str_plain__BinaryPlistParser );
    PyTuple_SET_ITEM( const_tuple_str_plain__BinaryPlistParser_tuple_empty_tuple, 1, const_tuple_empty ); Py_INCREF( const_tuple_empty );
    const_str_plain_write_value = UNSTREAM_STRING_ASCII( &constant_bin[ 512019 ], 11, 1 );
    const_tuple_3348473375ddd0ae03b4ed982e352bb5_tuple = PyTuple_New( 7 );
    PyTuple_SET_ITEM( const_tuple_3348473375ddd0ae03b4ed982e352bb5_tuple, 0, const_str_plain_self ); Py_INCREF( const_str_plain_self );
    PyTuple_SET_ITEM( const_tuple_3348473375ddd0ae03b4ed982e352bb5_tuple, 1, const_str_plain_fp ); Py_INCREF( const_str_plain_fp );
    PyTuple_SET_ITEM( const_tuple_3348473375ddd0ae03b4ed982e352bb5_tuple, 2, const_str_plain_trailer ); Py_INCREF( const_str_plain_trailer );
    PyTuple_SET_ITEM( const_tuple_3348473375ddd0ae03b4ed982e352bb5_tuple, 3, const_str_plain_offset_size ); Py_INCREF( const_str_plain_offset_size );
    PyTuple_SET_ITEM( const_tuple_3348473375ddd0ae03b4ed982e352bb5_tuple, 4, const_str_plain_num_objects ); Py_INCREF( const_str_plain_num_objects );
    PyTuple_SET_ITEM( const_tuple_3348473375ddd0ae03b4ed982e352bb5_tuple, 5, const_str_plain_top_object ); Py_INCREF( const_str_plain_top_object );
    PyTuple_SET_ITEM( const_tuple_3348473375ddd0ae03b4ed982e352bb5_tuple, 6, const_str_plain_offset_table_offset ); Py_INCREF( const_str_plain_offset_table_offset );
    const_str_digest_9abbcb4730c2592c58f5741917eba8c7 = UNSTREAM_STRING_ASCII( &constant_bin[ 512030 ], 23, 0 );
    const_bytes_digest_989365e9d702141b7617a68e35459180 = UNSTREAM_BYTES( &constant_bin[ 512053 ], 142 );
    const_str_plain_current_key = UNSTREAM_STRING_ASCII( &constant_bin[ 512195 ], 11, 1 );
    const_str_digest_834e99f6e73d4fc4f41fde0b03077b1e = UNSTREAM_STRING_ASCII( &constant_bin[ 512206 ], 23, 0 );
    const_str_plain_BOM_UTF16_LE = UNSTREAM_STRING_ASCII( &constant_bin[ 512229 ], 12, 1 );
    const_str_digest_89886dc1cffd86ab711771894abdfcb5 = UNSTREAM_STRING_ASCII( &constant_bin[ 512241 ], 5, 0 );
    const_tuple_fc530a996c2a4da49f5adddef59d0b0f_tuple = PyTuple_New( 5 );
    PyTuple_SET_ITEM( const_tuple_fc530a996c2a4da49f5adddef59d0b0f_tuple, 0, const_str_plain_value ); Py_INCREF( const_str_plain_value );
    PyTuple_SET_ITEM( const_tuple_fc530a996c2a4da49f5adddef59d0b0f_tuple, 1, const_str_plain_fmt ); Py_INCREF( const_str_plain_fmt );
    PyTuple_SET_ITEM( const_tuple_fc530a996c2a4da49f5adddef59d0b0f_tuple, 2, const_str_plain_skipkeys ); Py_INCREF( const_str_plain_skipkeys );
    PyTuple_SET_ITEM( const_tuple_fc530a996c2a4da49f5adddef59d0b0f_tuple, 3, const_str_plain_sort_keys ); Py_INCREF( const_str_plain_sort_keys );
    PyTuple_SET_ITEM( const_tuple_fc530a996c2a4da49f5adddef59d0b0f_tuple, 4, const_str_plain_fp ); Py_INCREF( const_str_plain_fp );
    const_str_digest_ea1fa55ed2e0192d31493e4bfcf4471f = UNSTREAM_STRING_ASCII( &constant_bin[ 512246 ], 28, 0 );
    const_str_digest_3dc7a5d8e36836bd2526010c8c66647e = UNSTREAM_STRING_ASCII( &constant_bin[ 512274 ], 21, 0 );
    const_str_digest_3c4021139830c6416110a9b56838cb10 = UNSTREAM_STRING_ASCII( &constant_bin[ 511702 ], 18, 0 );
    const_str_plain_refs = UNSTREAM_STRING_ASCII( &constant_bin[ 312765 ], 4, 1 );
    const_str_plain_begin_ = UNSTREAM_STRING_ASCII( &constant_bin[ 507668 ], 6, 1 );
    const_str_digest_89062d13c68a98c2a3f69b44901f001e = UNSTREAM_STRING_ASCII( &constant_bin[ 512295 ], 24, 0 );
    const_str_plain__objects = UNSTREAM_STRING_ASCII( &constant_bin[ 507849 ], 8, 1 );
    const_str_plain_tokenH = UNSTREAM_STRING_ASCII( &constant_bin[ 512319 ], 6, 1 );
    const_str_plain_handle_end_element = UNSTREAM_STRING_ASCII( &constant_bin[ 507788 ], 18, 1 );
    const_str_digest_e3c3d78d4d66a632c6ad68dc0fb31d57 = UNSTREAM_STRING_ASCII( &constant_bin[ 155106 ], 20, 0 );
    const_str_plain_simple_element = UNSTREAM_STRING_ASCII( &constant_bin[ 510814 ], 14, 1 );
    const_tuple_str_plain_pathOrFile_str_plain_fp_tuple = PyTuple_New( 2 );
    PyTuple_SET_ITEM( const_tuple_str_plain_pathOrFile_str_plain_fp_tuple, 0, const_str_plain_pathOrFile ); Py_INCREF( const_str_plain_pathOrFile );
    PyTuple_SET_ITEM( const_tuple_str_plain_pathOrFile_str_plain_fp_tuple, 1, const_str_plain_fp ); Py_INCREF( const_str_plain_fp );
    const_tuple_51eca9911886c08a181f0b3b32aff98f_tuple = PyTuple_New( 4 );
    PyTuple_SET_ITEM( const_tuple_51eca9911886c08a181f0b3b32aff98f_tuple, 0, const_str_plain_self ); Py_INCREF( const_str_plain_self );
    PyTuple_SET_ITEM( const_tuple_51eca9911886c08a181f0b3b32aff98f_tuple, 1, const_str_plain_data ); Py_INCREF( const_str_plain_data );
    PyTuple_SET_ITEM( const_tuple_51eca9911886c08a181f0b3b32aff98f_tuple, 2, const_str_plain_maxlinelength ); Py_INCREF( const_str_plain_maxlinelength );
    PyTuple_SET_ITEM( const_tuple_51eca9911886c08a181f0b3b32aff98f_tuple, 3, const_str_plain_line ); Py_INCREF( const_str_plain_line );
    const_str_plain_begin_dict = UNSTREAM_STRING_ASCII( &constant_bin[ 507668 ], 10, 1 );
    const_str_plain__BINARY_FORMAT = UNSTREAM_STRING_ASCII( &constant_bin[ 512325 ], 14, 1 );
    const_str_digest_5fb9888f03b6fa8c88863dd75de0b251 = UNSTREAM_STRING_ASCII( &constant_bin[ 512339 ], 21, 0 );
    const_str_digest_b729e27145963e501b74d8c5bd73c01b = UNSTREAM_STRING_ASCII( &constant_bin[ 512360 ], 27, 0 );
    const_str_plain__object_offsets = UNSTREAM_STRING_ASCII( &constant_bin[ 512387 ], 15, 1 );
    const_tuple_str_plain_o_str_plain_self_tuple = PyTuple_New( 2 );
    PyTuple_SET_ITEM( const_tuple_str_plain_o_str_plain_self_tuple, 0, const_str_plain_o ); Py_INCREF( const_str_plain_o );
    PyTuple_SET_ITEM( const_tuple_str_plain_o_str_plain_self_tuple, 1, const_str_plain_self ); Py_INCREF( const_str_plain_self );
    const_tuple_f06fe5f660b6ac56d4e67dbf2446d72f_tuple = PyTuple_New( 5 );
    PyTuple_SET_ITEM( const_tuple_f06fe5f660b6ac56d4e67dbf2446d72f_tuple, 0, const_str_plain_value ); Py_INCREF( const_str_plain_value );
    PyTuple_SET_ITEM( const_tuple_f06fe5f660b6ac56d4e67dbf2446d72f_tuple, 1, const_str_plain_fmt ); Py_INCREF( const_str_plain_fmt );
    PyTuple_SET_ITEM( const_tuple_f06fe5f660b6ac56d4e67dbf2446d72f_tuple, 2, const_str_plain_use_builtin_types ); Py_INCREF( const_str_plain_use_builtin_types );
    PyTuple_SET_ITEM( const_tuple_f06fe5f660b6ac56d4e67dbf2446d72f_tuple, 3, const_str_plain_dict_type ); Py_INCREF( const_str_plain_dict_type );
    PyTuple_SET_ITEM( const_tuple_f06fe5f660b6ac56d4e67dbf2446d72f_tuple, 4, const_str_plain_fp ); Py_INCREF( const_str_plain_fp );
    const_tuple_str_plain_text_str_plain_m_tuple = PyTuple_New( 2 );
    PyTuple_SET_ITEM( const_tuple_str_plain_text_str_plain_m_tuple, 0, const_str_plain_text ); Py_INCREF( const_str_plain_text );
    PyTuple_SET_ITEM( const_tuple_str_plain_text_str_plain_m_tuple, 1, const_str_plain_m ); Py_INCREF( const_str_plain_m );
    const_str_digest_1f4f58bc6fea283b13f6c2311a470c86 = UNSTREAM_STRING_ASCII( &constant_bin[ 512402 ], 3, 0 );
    const_str_plain__read_refs = UNSTREAM_STRING_ASCII( &constant_bin[ 510710 ], 10, 1 );
    const_str_digest_4517dddc677dac91392a1f75e459c993 = UNSTREAM_STRING_ASCII( &constant_bin[ 512405 ], 20, 0 );
    const_tuple_str_plain_self_str_plain_element_str_plain_value_tuple = PyTuple_New( 3 );
    PyTuple_SET_ITEM( const_tuple_str_plain_self_str_plain_element_str_plain_value_tuple, 0, const_str_plain_self ); Py_INCREF( const_str_plain_self );
    PyTuple_SET_ITEM( const_tuple_str_plain_self_str_plain_element_str_plain_value_tuple, 1, const_str_plain_element ); Py_INCREF( const_str_plain_element );
    PyTuple_SET_ITEM( const_tuple_str_plain_self_str_plain_element_str_plain_value_tuple, 2, const_str_plain_value ); Py_INCREF( const_str_plain_value );
    const_str_digest_95c6edc8377269178fe38ea261bee446 = UNSTREAM_STRING_ASCII( &constant_bin[ 512425 ], 3, 0 );
    const_str_plain__undefined = UNSTREAM_STRING_ASCII( &constant_bin[ 512428 ], 10, 1 );
    const_tuple_73e51a79bceeb2bb282b2d6673dc631b_tuple = PyTuple_New( 12 );
    PyTuple_SET_ITEM( const_tuple_73e51a79bceeb2bb282b2d6673dc631b_tuple, 0, const_str_plain_self ); Py_INCREF( const_str_plain_self );
    PyTuple_SET_ITEM( const_tuple_73e51a79bceeb2bb282b2d6673dc631b_tuple, 1, const_str_plain_value ); Py_INCREF( const_str_plain_value );
    PyTuple_SET_ITEM( const_tuple_73e51a79bceeb2bb282b2d6673dc631b_tuple, 2, const_str_plain_ref ); Py_INCREF( const_str_plain_ref );
    PyTuple_SET_ITEM( const_tuple_73e51a79bceeb2bb282b2d6673dc631b_tuple, 3, const_str_plain_f ); Py_INCREF( const_str_plain_f );
    PyTuple_SET_ITEM( const_tuple_73e51a79bceeb2bb282b2d6673dc631b_tuple, 4, const_str_plain_t ); Py_INCREF( const_str_plain_t );
    PyTuple_SET_ITEM( const_tuple_73e51a79bceeb2bb282b2d6673dc631b_tuple, 5, const_str_plain_refs ); Py_INCREF( const_str_plain_refs );
    PyTuple_SET_ITEM( const_tuple_73e51a79bceeb2bb282b2d6673dc631b_tuple, 6, const_str_plain_s ); Py_INCREF( const_str_plain_s );
    const_str_plain_keyRefs = UNSTREAM_STRING_ASCII( &constant_bin[ 512438 ], 7, 1 );
    PyTuple_SET_ITEM( const_tuple_73e51a79bceeb2bb282b2d6673dc631b_tuple, 7, const_str_plain_keyRefs ); Py_INCREF( const_str_plain_keyRefs );
    const_str_plain_valRefs = UNSTREAM_STRING_ASCII( &constant_bin[ 512445 ], 7, 1 );
    PyTuple_SET_ITEM( const_tuple_73e51a79bceeb2bb282b2d6673dc631b_tuple, 8, const_str_plain_valRefs ); Py_INCREF( const_str_plain_valRefs );
    PyTuple_SET_ITEM( const_tuple_73e51a79bceeb2bb282b2d6673dc631b_tuple, 9, const_str_plain_rootItems ); Py_INCREF( const_str_plain_rootItems );
    PyTuple_SET_ITEM( const_tuple_73e51a79bceeb2bb282b2d6673dc631b_tuple, 10, const_str_plain_k ); Py_INCREF( const_str_plain_k );
    PyTuple_SET_ITEM( const_tuple_73e51a79bceeb2bb282b2d6673dc631b_tuple, 11, const_str_plain_v ); Py_INCREF( const_str_plain_v );
    const_str_digest_72acf5789151589e4bb12886f367c8fe = UNSTREAM_STRING_ASCII( &constant_bin[ 512452 ], 123, 0 );
    const_str_digest_9a002219a8a2be2861fd57bef41a138e = UNSTREAM_STRING_ASCII( &constant_bin[ 508198 ], 11, 0 );
    const_str_digest_9651dd0449a14ad5904ac274e123ee0d = UNSTREAM_STRING_ASCII( &constant_bin[ 512575 ], 60, 0 );
    const_str_digest_734f4e9d064717646102b3a04f68706f = UNSTREAM_STRING_ASCII( &constant_bin[ 35304 ], 3, 0 );
    const_int_pos_9223372036854775808 = PyMarshal_ReadObjectFromString( (char *)&constant_bin[ 512635 ], 15 );
    const_str_digest_2e3858af0e538d1c2134ccf4748c93e8 = UNSTREAM_STRING_ASCII( &constant_bin[ 512650 ], 3, 0 );
    const_str_plain__objlist = UNSTREAM_STRING_ASCII( &constant_bin[ 512653 ], 8, 1 );
    const_str_plain_fromBase64 = UNSTREAM_STRING_ASCII( &constant_bin[ 510681 ], 10, 1 );
    const_tuple_str_plain_true_tuple = PyTuple_New( 1 );
    PyTuple_SET_ITEM( const_tuple_str_plain_true_tuple, 0, const_str_plain_true ); Py_INCREF( const_str_plain_true );
    const_str_plain_chain = UNSTREAM_STRING_ASCII( &constant_bin[ 108230 ], 5, 1 );
    const_str_digest_282449a0c2f79caa66c3a61de5f7b6f9 = UNSTREAM_STRING_ASCII( &constant_bin[ 512661 ], 12, 0 );
    const_tuple_c4159da068cc7bb7ded454d4c150f6c3_tuple = PyTuple_New( 7 );
    PyTuple_SET_ITEM( const_tuple_c4159da068cc7bb7ded454d4c150f6c3_tuple, 0, const_str_plain_self ); Py_INCREF( const_str_plain_self );
    PyTuple_SET_ITEM( const_tuple_c4159da068cc7bb7ded454d4c150f6c3_tuple, 1, const_str_plain_file ); Py_INCREF( const_str_plain_file );
    PyTuple_SET_ITEM( const_tuple_c4159da068cc7bb7ded454d4c150f6c3_tuple, 2, const_str_plain_indent_level ); Py_INCREF( const_str_plain_indent_level );
    PyTuple_SET_ITEM( const_tuple_c4159da068cc7bb7ded454d4c150f6c3_tuple, 3, const_str_plain_indent ); Py_INCREF( const_str_plain_indent );
    PyTuple_SET_ITEM( const_tuple_c4159da068cc7bb7ded454d4c150f6c3_tuple, 4, const_str_plain_writeHeader ); Py_INCREF( const_str_plain_writeHeader );
    PyTuple_SET_ITEM( const_tuple_c4159da068cc7bb7ded454d4c150f6c3_tuple, 5, const_str_plain_sort_keys ); Py_INCREF( const_str_plain_sort_keys );
    PyTuple_SET_ITEM( const_tuple_c4159da068cc7bb7ded454d4c150f6c3_tuple, 6, const_str_plain_skipkeys ); Py_INCREF( const_str_plain_skipkeys );
    const_str_digest_804a38dc1a83365cac5b477b7440f5b1 = UNSTREAM_STRING_ASCII( &constant_bin[ 512673 ], 27, 0 );
    const_tuple_ca0747bf52cf4219b2eb6201591d1ad9_tuple = PyTuple_New( 6 );
    PyTuple_SET_ITEM( const_tuple_ca0747bf52cf4219b2eb6201591d1ad9_tuple, 0, const_str_plain_year ); Py_INCREF( const_str_plain_year );
    PyTuple_SET_ITEM( const_tuple_ca0747bf52cf4219b2eb6201591d1ad9_tuple, 1, const_str_plain_month ); Py_INCREF( const_str_plain_month );
    PyTuple_SET_ITEM( const_tuple_ca0747bf52cf4219b2eb6201591d1ad9_tuple, 2, const_str_plain_day ); Py_INCREF( const_str_plain_day );
    PyTuple_SET_ITEM( const_tuple_ca0747bf52cf4219b2eb6201591d1ad9_tuple, 3, const_str_plain_hour ); Py_INCREF( const_str_plain_hour );
    PyTuple_SET_ITEM( const_tuple_ca0747bf52cf4219b2eb6201591d1ad9_tuple, 4, const_str_plain_minute ); Py_INCREF( const_str_plain_minute );
    PyTuple_SET_ITEM( const_tuple_ca0747bf52cf4219b2eb6201591d1ad9_tuple, 5, const_str_plain_second ); Py_INCREF( const_str_plain_second );
    const_str_plain__escape = UNSTREAM_STRING_ASCII( &constant_bin[ 11969 ], 7, 1 );
    const_tuple_f67937c5085725b81272367eb7afbd7a_tuple = PyTuple_New( 8 );
    PyTuple_SET_ITEM( const_tuple_f67937c5085725b81272367eb7afbd7a_tuple, 0, const_str_plain_fp ); Py_INCREF( const_str_plain_fp );
    PyTuple_SET_ITEM( const_tuple_f67937c5085725b81272367eb7afbd7a_tuple, 1, const_str_plain_fmt ); Py_INCREF( const_str_plain_fmt );
    PyTuple_SET_ITEM( const_tuple_f67937c5085725b81272367eb7afbd7a_tuple, 2, const_str_plain_use_builtin_types ); Py_INCREF( const_str_plain_use_builtin_types );
    PyTuple_SET_ITEM( const_tuple_f67937c5085725b81272367eb7afbd7a_tuple, 3, const_str_plain_dict_type ); Py_INCREF( const_str_plain_dict_type );
    PyTuple_SET_ITEM( const_tuple_f67937c5085725b81272367eb7afbd7a_tuple, 4, const_str_plain_header ); Py_INCREF( const_str_plain_header );
    PyTuple_SET_ITEM( const_tuple_f67937c5085725b81272367eb7afbd7a_tuple, 5, const_str_plain_info ); Py_INCREF( const_str_plain_info );
    PyTuple_SET_ITEM( const_tuple_f67937c5085725b81272367eb7afbd7a_tuple, 6, const_str_plain_P ); Py_INCREF( const_str_plain_P );
    PyTuple_SET_ITEM( const_tuple_f67937c5085725b81272367eb7afbd7a_tuple, 7, const_str_plain_p ); Py_INCREF( const_str_plain_p );
    const_str_digest_a6fe705e9b22b64bcb8bdabe0939e7dd = UNSTREAM_STRING_ASCII( &constant_bin[ 512700 ], 29, 0 );
    const_int_pos_35 = PyLong_FromUnsignedLong( 35ul );
    const_tuple_bytes_chr_9_tuple = PyTuple_New( 1 );
    PyTuple_SET_ITEM( const_tuple_bytes_chr_9_tuple, 0, const_bytes_chr_9 ); Py_INCREF( const_bytes_chr_9 );
    const_tuple_str_plain_value_str_plain_pathOrFile_str_plain_fp_tuple = PyTuple_New( 3 );
    PyTuple_SET_ITEM( const_tuple_str_plain_value_str_plain_pathOrFile_str_plain_fp_tuple, 0, const_str_plain_value ); Py_INCREF( const_str_plain_value );
    PyTuple_SET_ITEM( const_tuple_str_plain_value_str_plain_pathOrFile_str_plain_fp_tuple, 1, const_str_plain_pathOrFile ); Py_INCREF( const_str_plain_pathOrFile );
    PyTuple_SET_ITEM( const_tuple_str_plain_value_str_plain_pathOrFile_str_plain_fp_tuple, 2, const_str_plain_fp ); Py_INCREF( const_str_plain_fp );
    const_tuple_str_plain_self_str_plain_token_str_plain_size_tuple = PyTuple_New( 3 );
    PyTuple_SET_ITEM( const_tuple_str_plain_self_str_plain_token_str_plain_size_tuple, 0, const_str_plain_self ); Py_INCREF( const_str_plain_self );
    PyTuple_SET_ITEM( const_tuple_str_plain_self_str_plain_token_str_plain_size_tuple, 1, const_str_plain_token ); Py_INCREF( const_str_plain_token );
    PyTuple_SET_ITEM( const_tuple_str_plain_self_str_plain_token_str_plain_size_tuple, 2, const_str_plain_size ); Py_INCREF( const_str_plain_size );
    const_str_plain_PLISTHEADER = UNSTREAM_STRING_ASCII( &constant_bin[ 512729 ], 11, 1 );
    const_str_digest_448f4d2b573bf42d517b7fbb5b453135 = UNSTREAM_STRING_ASCII( &constant_bin[ 512740 ], 24, 0 );
    const_str_digest_7feffa0d4df18481696e57eff8cd7d01 = UNSTREAM_STRING_ASCII( &constant_bin[ 107857 ], 2, 0 );
    const_dict_31495aba724870ae8e6ca826d32e28fd = _PyDict_NewPresized( 1 );
    PyDict_SetItem( const_dict_31495aba724870ae8e6ca826d32e28fd, const_str_plain_module, const_str_plain_plistlib );
    assert( PyDict_Size( const_dict_31495aba724870ae8e6ca826d32e28fd ) == 1 );
    const_str_plain__BinaryPlistWriter = UNSTREAM_STRING_ASCII( &constant_bin[ 511453 ], 18, 1 );
    const_str_plain__date_from_string = UNSTREAM_STRING_ASCII( &constant_bin[ 512764 ], 17, 1 );
    const_str_plain_obj_refs = UNSTREAM_STRING_ASCII( &constant_bin[ 512781 ], 8, 1 );
    const_tuple_str_plain_value_str_plain_f_tuple = PyTuple_New( 2 );
    PyTuple_SET_ITEM( const_tuple_str_plain_value_str_plain_f_tuple, 0, const_str_plain_value ); Py_INCREF( const_str_plain_value );
    PyTuple_SET_ITEM( const_tuple_str_plain_value_str_plain_f_tuple, 1, const_str_plain_f ); Py_INCREF( const_str_plain_f );
    const_str_digest_0884d2cecf7ee3c4477d68aebb70615a = UNSTREAM_STRING_ASCII( &constant_bin[ 512789 ], 11, 0 );
    const_str_plain__flatten = UNSTREAM_STRING_ASCII( &constant_bin[ 512692 ], 8, 1 );
    const_str_digest_ba37f10e62fb9060b09449a8c6d1ceec = UNSTREAM_STRING_ASCII( &constant_bin[ 512800 ], 22, 0 );
    const_str_digest_bf0bf6f703a8834292a72b83227d2c09 = UNSTREAM_STRING_ASCII( &constant_bin[ 512822 ], 30, 0 );
    const_tuple_int_pos_16_str_plain_big_tuple = PyTuple_New( 2 );
    PyTuple_SET_ITEM( const_tuple_int_pos_16_str_plain_big_tuple, 0, const_int_pos_16 ); Py_INCREF( const_int_pos_16 );
    PyTuple_SET_ITEM( const_tuple_int_pos_16_str_plain_big_tuple, 1, const_str_plain_big ); Py_INCREF( const_str_plain_big );
    const_str_digest_582612ba88d27e5080633094b8b89771 = UNSTREAM_STRING_ASCII( &constant_bin[ 512852 ], 24, 0 );
    const_str_digest_8ec6226e6f1c24f4652c7ab62abc0dd4 = UNSTREAM_STRING_ASCII( &constant_bin[ 512876 ], 23, 0 );
    const_dict_c061ef12f02b7b74854c0240ac25e2d7 = _PyDict_NewPresized( 3 );
    PyDict_SetItem( const_dict_c061ef12f02b7b74854c0240ac25e2d7, const_str_plain_fmt, Py_None );
    PyDict_SetItem( const_dict_c061ef12f02b7b74854c0240ac25e2d7, const_str_plain_use_builtin_types, Py_True );
    PyDict_SetItem( const_dict_c061ef12f02b7b74854c0240ac25e2d7, const_str_plain_dict_type, (PyObject *)&PyDict_Type );
    assert( PyDict_Size( const_dict_c061ef12f02b7b74854c0240ac25e2d7 ) == 3 );
    const_str_plain__use_builtin_types = UNSTREAM_STRING_ASCII( &constant_bin[ 512899 ], 18, 1 );
    const_str_plain__maybe_open = UNSTREAM_STRING_ASCII( &constant_bin[ 512917 ], 11, 1 );
    const_str_plain_CharacterDataHandler = UNSTREAM_STRING_ASCII( &constant_bin[ 512928 ], 20, 1 );
    const_tuple_bytes_digest_f56f4391a49dc6cc1c15f8ec95e9a37e_tuple = PyTuple_New( 1 );
    const_bytes_digest_f56f4391a49dc6cc1c15f8ec95e9a37e = UNSTREAM_BYTES( &constant_bin[ 512948 ], 8 );
    PyTuple_SET_ITEM( const_tuple_bytes_digest_f56f4391a49dc6cc1c15f8ec95e9a37e_tuple, 0, const_bytes_digest_f56f4391a49dc6cc1c15f8ec95e9a37e ); Py_INCREF( const_bytes_digest_f56f4391a49dc6cc1c15f8ec95e9a37e );
    const_tuple_4b6d164b3a55ae95cc6a822617747d71_tuple = PyTuple_New( 13 );
    PyTuple_SET_ITEM( const_tuple_4b6d164b3a55ae95cc6a822617747d71_tuple, 0, const_str_plain_self ); Py_INCREF( const_str_plain_self );
    PyTuple_SET_ITEM( const_tuple_4b6d164b3a55ae95cc6a822617747d71_tuple, 1, const_str_plain_ref ); Py_INCREF( const_str_plain_ref );
    PyTuple_SET_ITEM( const_tuple_4b6d164b3a55ae95cc6a822617747d71_tuple, 2, const_str_plain_result ); Py_INCREF( const_str_plain_result );
    PyTuple_SET_ITEM( const_tuple_4b6d164b3a55ae95cc6a822617747d71_tuple, 3, const_str_plain_offset ); Py_INCREF( const_str_plain_offset );
    PyTuple_SET_ITEM( const_tuple_4b6d164b3a55ae95cc6a822617747d71_tuple, 4, const_str_plain_token ); Py_INCREF( const_str_plain_token );
    PyTuple_SET_ITEM( const_tuple_4b6d164b3a55ae95cc6a822617747d71_tuple, 5, const_str_plain_tokenH ); Py_INCREF( const_str_plain_tokenH );
    PyTuple_SET_ITEM( const_tuple_4b6d164b3a55ae95cc6a822617747d71_tuple, 6, const_str_plain_tokenL ); Py_INCREF( const_str_plain_tokenL );
    PyTuple_SET_ITEM( const_tuple_4b6d164b3a55ae95cc6a822617747d71_tuple, 7, const_str_plain_f ); Py_INCREF( const_str_plain_f );
    PyTuple_SET_ITEM( const_tuple_4b6d164b3a55ae95cc6a822617747d71_tuple, 8, const_str_plain_s ); Py_INCREF( const_str_plain_s );
    PyTuple_SET_ITEM( const_tuple_4b6d164b3a55ae95cc6a822617747d71_tuple, 9, const_str_plain_obj_refs ); Py_INCREF( const_str_plain_obj_refs );
    PyTuple_SET_ITEM( const_tuple_4b6d164b3a55ae95cc6a822617747d71_tuple, 10, const_str_plain_key_refs ); Py_INCREF( const_str_plain_key_refs );
    PyTuple_SET_ITEM( const_tuple_4b6d164b3a55ae95cc6a822617747d71_tuple, 11, const_str_plain_k ); Py_INCREF( const_str_plain_k );
    PyTuple_SET_ITEM( const_tuple_4b6d164b3a55ae95cc6a822617747d71_tuple, 12, const_str_plain_o ); Py_INCREF( const_str_plain_o );
    const_str_plain__is_fmt_xml = UNSTREAM_STRING_ASCII( &constant_bin[ 512956 ], 11, 1 );
    const_str_digest_f2af2a2c9cdc01eb0f569ccd625dd787 = UNSTREAM_STRING_ASCII( &constant_bin[ 512967 ], 93, 0 );
    const_tuple_str_digest_76d6e11399c7aa1061842aa32438ca8b_tuple = PyTuple_New( 1 );
    PyTuple_SET_ITEM( const_tuple_str_digest_76d6e11399c7aa1061842aa32438ca8b_tuple, 0, const_str_digest_76d6e11399c7aa1061842aa32438ca8b ); Py_INCREF( const_str_digest_76d6e11399c7aa1061842aa32438ca8b );
    const_str_digest_4a0af618cadba292e889bc974db429ae = UNSTREAM_STRING_ASCII( &constant_bin[ 513060 ], 48, 0 );
    const_str_digest_fa131f0d55baa8ff96752bf4d0d75d8b = UNSTREAM_STRING_ASCII( &constant_bin[ 513108 ], 63, 0 );
    const_str_plain__objidtable = UNSTREAM_STRING_ASCII( &constant_bin[ 513171 ], 11, 1 );
    const_int_pos_96 = PyLong_FromUnsignedLong( 96ul );
    const_dict_7611676ed95705a12123cc4968fd525a = _PyDict_NewPresized( 2 );
    PyDict_SetItem( const_dict_7611676ed95705a12123cc4968fd525a, const_str_plain_fmt, Py_None );
    PyDict_SetItem( const_dict_7611676ed95705a12123cc4968fd525a, const_str_plain_use_builtin_types, Py_False );
    assert( PyDict_Size( const_dict_7611676ed95705a12123cc4968fd525a ) == 2 );
    const_str_digest_dd5e881535aa5bf3f89c844831fa26f3 = UNSTREAM_STRING_ASCII( &constant_bin[ 513182 ], 17, 0 );
    const_str_plain_end_string = UNSTREAM_STRING_ASCII( &constant_bin[ 512219 ], 10, 1 );
    const_str_digest_7629749259f94868388f3bdf15c07b50 = UNSTREAM_STRING_ASCII( &constant_bin[ 513199 ], 25, 0 );
    const_str_digest_4d6355d35ff72a144820ce33fe2817b6 = UNSTREAM_STRING_ASCII( &constant_bin[ 513224 ], 50, 0 );
    const_str_plain__dateParser = UNSTREAM_STRING_ASCII( &constant_bin[ 513274 ], 11, 1 );
    const_str_digest_e38d98d8b95676efcd76bd78912c93d4 = UNSTREAM_STRING_ASCII( &constant_bin[ 513285 ], 24, 0 );
    const_str_digest_8d62357ffcb3fc7ced7c1530d09de881 = UNSTREAM_STRING_ASCII( &constant_bin[ 513060 ], 29, 0 );
    const_str_digest_0f355a08be39617fb7ccf1cb3db7d27d = UNSTREAM_STRING_ASCII( &constant_bin[ 513309 ], 21, 0 );
    const_str_digest_3cce387f11a2d373b31af028bfe0d7e6 = UNSTREAM_STRING_ASCII( &constant_bin[ 513330 ], 165, 0 );
    const_tuple_type_list_type_tuple_tuple = PyTuple_New( 2 );
    PyTuple_SET_ITEM( const_tuple_type_list_type_tuple_tuple, 0, (PyObject *)&PyList_Type ); Py_INCREF( (PyObject *)&PyList_Type );
    PyTuple_SET_ITEM( const_tuple_type_list_type_tuple_tuple, 1, (PyObject *)&PyTuple_Type ); Py_INCREF( (PyObject *)&PyTuple_Type );
    const_tuple_str_plain_false_tuple = PyTuple_New( 1 );
    PyTuple_SET_ITEM( const_tuple_str_plain_false_tuple, 0, const_str_plain_false ); Py_INCREF( const_str_plain_false );
    const_str_digest_3ab646e83642152a9eac19a64a983145 = UNSTREAM_STRING_ASCII( &constant_bin[ 507842 ], 3, 0 );
    const_str_digest_6406ac9858cad296e77a7e9ea874e091 = UNSTREAM_STRING_ASCII( &constant_bin[ 513495 ], 22, 0 );
    const_str_digest_ce1af1d930c7b52b9dba2b47a65ffee8 = UNSTREAM_STRING_ASCII( &constant_bin[ 513517 ], 32, 0 );
    const_dict_1e8b691e3d0182a72f212a61a8dd1482 = _PyDict_NewPresized( 4 );
    PyDict_SetItem( const_dict_1e8b691e3d0182a72f212a61a8dd1482, const_int_pos_1, const_str_plain_B );
    PyDict_SetItem( const_dict_1e8b691e3d0182a72f212a61a8dd1482, const_int_pos_2, const_str_plain_H );
    PyDict_SetItem( const_dict_1e8b691e3d0182a72f212a61a8dd1482, const_int_pos_4, const_str_plain_L );
    PyDict_SetItem( const_dict_1e8b691e3d0182a72f212a61a8dd1482, const_int_pos_8, const_str_plain_Q );
    assert( PyDict_Size( const_dict_1e8b691e3d0182a72f212a61a8dd1482 ) == 4 );
    const_str_digest_28f43fb065e63e931ff3bd1821e4d43f = UNSTREAM_STRING_ASCII( &constant_bin[ 513549 ], 21, 0 );
    const_tuple_str_plain__DumbXMLWriter_tuple_empty_tuple = PyTuple_New( 2 );
    PyTuple_SET_ITEM( const_tuple_str_plain__DumbXMLWriter_tuple_empty_tuple, 0, const_str_plain__DumbXMLWriter ); Py_INCREF( const_str_plain__DumbXMLWriter );
    PyTuple_SET_ITEM( const_tuple_str_plain__DumbXMLWriter_tuple_empty_tuple, 1, const_tuple_empty ); Py_INCREF( const_tuple_empty );
    const_str_digest_4f64dd367e7c9df0d6009a67327d443e = UNSTREAM_STRING_ASCII( &constant_bin[ 513570 ], 8, 0 );
    const_str_digest_c1047800c0437512bd9b2438244faa57 = UNSTREAM_STRING_ASCII( &constant_bin[ 513578 ], 27, 0 );
    const_str_plain__count_to_size = UNSTREAM_STRING_ASCII( &constant_bin[ 513605 ], 14, 1 );
    const_tuple_str_digest_282449a0c2f79caa66c3a61de5f7b6f9_tuple = PyTuple_New( 1 );
    PyTuple_SET_ITEM( const_tuple_str_digest_282449a0c2f79caa66c3a61de5f7b6f9_tuple, 0, const_str_digest_282449a0c2f79caa66c3a61de5f7b6f9 ); Py_INCREF( const_str_digest_282449a0c2f79caa66c3a61de5f7b6f9 );
    const_int_pos_18446744073709551616 = PyMarshal_ReadObjectFromString( (char *)&constant_bin[ 513619 ], 15 );
    const_str_digest_e66a58b0ebd58c72824db2808901d3e9 = UNSTREAM_STRING_ASCII( &constant_bin[ 513634 ], 125, 0 );
    const_str_plain_handle_begin_element = UNSTREAM_STRING_ASCII( &constant_bin[ 511144 ], 20, 1 );
    const_str_digest_403c2e6bf7233ba4eb16201b08761c63 = UNSTREAM_STRING_ASCII( &constant_bin[ 513759 ], 13, 0 );
    const_str_plain__FORMATS = UNSTREAM_STRING_ASCII( &constant_bin[ 513772 ], 8, 1 );
    const_tuple_1e30baefcdf4dd7733e4c72efef968f7_tuple = PyTuple_New( 4 );
    PyTuple_SET_ITEM( const_tuple_1e30baefcdf4dd7733e4c72efef968f7_tuple, 0, const_str_plain_self ); Py_INCREF( const_str_plain_self );
    PyTuple_SET_ITEM( const_tuple_1e30baefcdf4dd7733e4c72efef968f7_tuple, 1, const_str_plain_element ); Py_INCREF( const_str_plain_element );
    PyTuple_SET_ITEM( const_tuple_1e30baefcdf4dd7733e4c72efef968f7_tuple, 2, const_str_plain_attrs ); Py_INCREF( const_str_plain_attrs );
    PyTuple_SET_ITEM( const_tuple_1e30baefcdf4dd7733e4c72efef968f7_tuple, 3, const_str_plain_handler ); Py_INCREF( const_str_plain_handler );

    constants_created = true;
}

/* Function to verify module private constants for non-corruption. */
#ifndef __NUITKA_NO_ASSERT__
void checkModuleConstants_plistlib( void )
{
    // The module may not have been used at all, then ignore this.
    if (constants_created == false) return;


}
#endif

// The module code objects.
static PyCodeObject *codeobj_6faa91d48d00847614d477f9e48582b4;
static PyCodeObject *codeobj_e25d154ed70a39e57de34784481fa24d;
static PyCodeObject *codeobj_1d0f5f6fb0fb7d83d8574ec7f2ca3cea;
static PyCodeObject *codeobj_6a6219654a078aede7e40aaccdae8e56;
static PyCodeObject *codeobj_4f9522afa0b8e72f782625388c8d1967;
static PyCodeObject *codeobj_0ee0e62e2cf347fc328cca3af8db7ad8;
static PyCodeObject *codeobj_b7ec1aac708d028b6f1d124365549dc4;
static PyCodeObject *codeobj_5e97e27e88e3107c75e82e003d130761;
static PyCodeObject *codeobj_d7b3abeaeedf39c2eb398bdd3372b84e;
static PyCodeObject *codeobj_e67d9a4f703826ca272037e679cd200c;
static PyCodeObject *codeobj_cbfca6005e13c074f5180327fa6b5639;
static PyCodeObject *codeobj_b1f25262fbfc33eb3f345501504bd8f8;
static PyCodeObject *codeobj_9aef60c55aaa42e7bdc318a827042dc2;
static PyCodeObject *codeobj_f4d3ab61dc67f46b7466c1806f9ea741;
static PyCodeObject *codeobj_4f9251679fe309191bf67eed2d91a7fe;
static PyCodeObject *codeobj_bbb1f15ac628392d781447385fcc52bf;
static PyCodeObject *codeobj_8251681e754e9889f9bbf45825113951;
static PyCodeObject *codeobj_3a1d2301131a3b19b93316b3230ee924;
static PyCodeObject *codeobj_622e7b07b6a23e8e10ca6224584ec87f;
static PyCodeObject *codeobj_bd0be69468a9187fdfbee75e4cfd5679;
static PyCodeObject *codeobj_927a7a355580569d3e630a4925f287a3;
static PyCodeObject *codeobj_17d7052b9c3a53ead109ed86ee31520c;
static PyCodeObject *codeobj_b9429066ec0e7c0c6d166bbcdc671c14;
static PyCodeObject *codeobj_02c98b6f7544c4ced2c0d665794352de;
static PyCodeObject *codeobj_eb47429ce69b824e6c93ceac84e00d77;
static PyCodeObject *codeobj_0b4c9aa5657ccaeb016e84e0b5e47236;
static PyCodeObject *codeobj_a6aec4ddff54c70832a6d33f1dce40fd;
static PyCodeObject *codeobj_933cff0e6c2cdec9aff47fca315f05bb;
static PyCodeObject *codeobj_fb43eab1ae27c6acb6e7038c52d00258;
static PyCodeObject *codeobj_c4ab7b1151dc1dc8ba211fdaa8810c05;
static PyCodeObject *codeobj_dafd355cb1f2b6e746cd6dd919a0797d;
static PyCodeObject *codeobj_ce27cf377074662a245da56d34a90579;
static PyCodeObject *codeobj_71f53baa965bdab6179a073e81d75811;
static PyCodeObject *codeobj_1bf1851e5e22923611966fe471a992e2;
static PyCodeObject *codeobj_b755b67a5fe4586c6fe186a1c960c2e2;
static PyCodeObject *codeobj_edf236a14f5145c2001a5486f9240237;
static PyCodeObject *codeobj_e300c162d27a6a43dc187281e877cd78;
static PyCodeObject *codeobj_d5586451b88a3c879eeca6a008e57522;
static PyCodeObject *codeobj_1f8721614f27c95ef32954e497ba091f;
static PyCodeObject *codeobj_c703ebb5931b8474dc0577e26f98f0eb;
static PyCodeObject *codeobj_29ec20723eec2f98ed1638ff1580d134;
static PyCodeObject *codeobj_ec7700a560b5db815e48a8c01e9e1467;
static PyCodeObject *codeobj_9f3aee96bd74e937729a5c400a418f8d;
static PyCodeObject *codeobj_f3a77dd01f75c2e6f726a302d6653c9b;
static PyCodeObject *codeobj_86bfb94d82246de2165612ee08b14306;
static PyCodeObject *codeobj_394db3475a232081bdb1f978c225930f;
static PyCodeObject *codeobj_3db2e52ef33d4eb073b73ae073e4ef5a;
static PyCodeObject *codeobj_c137ab2f19076c37db18924be34543b0;
static PyCodeObject *codeobj_4a99c9a153c5488c06b277919fc55b52;
static PyCodeObject *codeobj_4558bf051938d18c1bb120aac473f569;
static PyCodeObject *codeobj_ef0071820f77a4becce92fd52300ac9b;
static PyCodeObject *codeobj_391b3640d9ded65d2588654840fa2e13;
static PyCodeObject *codeobj_450bf0e55fae22b04555a9e483a3a399;
static PyCodeObject *codeobj_53fe42fd8bf57f188acf5a315f6a6348;
static PyCodeObject *codeobj_a361a94c0aa4bb29cd54db7f2d6290cd;
static PyCodeObject *codeobj_5052dea2b041b2538c399c0901792c9e;
static PyCodeObject *codeobj_ff13cfe69c3214da91317aaa57f94838;
static PyCodeObject *codeobj_247e4d428c357065ba9e8f9bb7513632;
static PyCodeObject *codeobj_a3f9da33bfba4743a02507aae8009f4a;
static PyCodeObject *codeobj_0b77ad39ed98f2b4798b7f0c3ce21305;
static PyCodeObject *codeobj_5bd748325e1b93cb6ac76b1377ec42c1;
static PyCodeObject *codeobj_d27062a5a768bed0b64c62e12915c34e;
static PyCodeObject *codeobj_3924ce3c9aecb71bd1721cfe145c0d4a;
static PyCodeObject *codeobj_f6994825c2e6565735c8665b48060b34;
static PyCodeObject *codeobj_f2d824099d637e3632344b6ab8f1be45;
static PyCodeObject *codeobj_f619f06bf75def1d2791a7f0bc383d26;
static PyCodeObject *codeobj_6b99acd8979c98546f55969395a59194;
static PyCodeObject *codeobj_2ab18736824656190d9afedab53a988a;
static PyCodeObject *codeobj_f1c231a35a21038f690c7692c030f1ba;
static PyCodeObject *codeobj_d5b82ebdfff3fa51cb1a9d07ee878447;
static PyCodeObject *codeobj_3e8551b09cd55b45e9d831e24972fa46;
static PyCodeObject *codeobj_454dd373f5c99cba8da5eec2ae808a9a;
static PyCodeObject *codeobj_398c2ead7dab203b363086ad8619c7ac;
static PyCodeObject *codeobj_463289b78eb680a3e5594916603300dd;
static PyCodeObject *codeobj_4e13ffd4d8633b9daf5c9ed811ff8fef;
static PyCodeObject *codeobj_c0f5be1b35baf9f3b0c01ecf8ced538a;
static PyCodeObject *codeobj_3b5b591b966c1dc4c84cbc03ce10a24b;

static void createModuleCodeObjects(void)
{
    module_filename_obj = MAKE_RELATIVE_PATH( const_str_digest_9a002219a8a2be2861fd57bef41a138e );
    codeobj_6faa91d48d00847614d477f9e48582b4 = MAKE_CODEOBJ( module_filename_obj, const_str_angle_genexpr, 584, const_tuple_f4567b4de8a9c702e1f99f4ec37ddd85_tuple, 1, 0, CO_GENERATOR | CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE );
    codeobj_e25d154ed70a39e57de34784481fa24d = MAKE_CODEOBJ( module_filename_obj, const_str_angle_genexpr, 661, const_tuple_15847381bc67e44c74cc6010c7c7f848_tuple, 1, 0, CO_GENERATOR | CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE );
    codeobj_1d0f5f6fb0fb7d83d8574ec7f2ca3cea = MAKE_CODEOBJ( module_filename_obj, const_str_angle_listcomp, 879, const_tuple_str_plain_o_str_plain_self_tuple, 1, 0, CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE );
    codeobj_6a6219654a078aede7e40aaccdae8e56 = MAKE_CODEOBJ( module_filename_obj, const_str_digest_dd5e881535aa5bf3f89c844831fa26f3, 1, const_tuple_empty, 0, 0, CO_NOFREE );
    codeobj_4f9522afa0b8e72f782625388c8d1967 = MAKE_CODEOBJ( module_filename_obj, const_str_plain_Data, 139, const_tuple_str_plain___class___tuple, 0, 0, CO_NOFREE );
    codeobj_0ee0e62e2cf347fc328cca3af8db7ad8 = MAKE_CODEOBJ( module_filename_obj, const_str_plain_InvalidFileException, 522, const_tuple_str_plain___class___tuple, 0, 0, CO_NOFREE );
    codeobj_b7ec1aac708d028b6f1d124365549dc4 = MAKE_CODEOBJ( module_filename_obj, const_str_plain__BinaryPlistParser, 530, const_tuple_str_plain___class___tuple, 0, 0, CO_NOFREE );
    codeobj_5e97e27e88e3107c75e82e003d130761 = MAKE_CODEOBJ( module_filename_obj, const_str_plain__BinaryPlistWriter, 699, const_tuple_str_plain___class___tuple, 0, 0, CO_NOFREE );
    codeobj_d7b3abeaeedf39c2eb398bdd3372b84e = MAKE_CODEOBJ( module_filename_obj, const_str_plain__DumbXMLWriter, 351, const_tuple_str_plain___class___tuple, 0, 0, CO_NOFREE );
    codeobj_e67d9a4f703826ca272037e679cd200c = MAKE_CODEOBJ( module_filename_obj, const_str_plain__PlistParser, 247, const_tuple_str_plain___class___tuple, 0, 0, CO_NOFREE );
    codeobj_cbfca6005e13c074f5180327fa6b5639 = MAKE_CODEOBJ( module_filename_obj, const_str_plain__PlistWriter, 389, const_tuple_str_plain___class___tuple, 0, 0, CO_NOFREE );
    codeobj_b1f25262fbfc33eb3f345501504bd8f8 = MAKE_CODEOBJ( module_filename_obj, const_str_plain___eq__, 160, const_tuple_str_plain_self_str_plain_other_tuple, 2, 0, CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE );
    codeobj_9aef60c55aaa42e7bdc318a827042dc2 = MAKE_CODEOBJ( module_filename_obj, const_str_plain___init__, 146, const_tuple_str_plain_self_str_plain_data_tuple, 2, 0, CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE );
    codeobj_f4d3ab61dc67f46b7466c1806f9ea741 = MAKE_CODEOBJ( module_filename_obj, const_str_plain___init__, 248, const_tuple_47b5affa04c2f26006db643529889f18_tuple, 3, 0, CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE );
    codeobj_4f9251679fe309191bf67eed2d91a7fe = MAKE_CODEOBJ( module_filename_obj, const_str_plain___init__, 352, const_tuple_ee76a917505f42f364215f078effac82_tuple, 4, 0, CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE );
    codeobj_bbb1f15ac628392d781447385fcc52bf = MAKE_CODEOBJ( module_filename_obj, const_str_plain___init__, 390, const_tuple_c4159da068cc7bb7ded454d4c150f6c3_tuple, 7, 0, CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE );
    codeobj_8251681e754e9889f9bbf45825113951 = MAKE_CODEOBJ( module_filename_obj, const_str_plain___init__, 523, const_tuple_str_plain_self_str_plain_message_tuple, 2, 0, CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE );
    codeobj_3a1d2301131a3b19b93316b3230ee924 = MAKE_CODEOBJ( module_filename_obj, const_str_plain___init__, 538, const_tuple_47b5affa04c2f26006db643529889f18_tuple, 3, 0, CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE );
    codeobj_622e7b07b6a23e8e10ca6224584ec87f = MAKE_CODEOBJ( module_filename_obj, const_str_plain___init__, 700, const_tuple_25668ffae678bfc7b9117007742f267f_tuple, 4, 0, CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE );
    codeobj_bd0be69468a9187fdfbee75e4cfd5679 = MAKE_CODEOBJ( module_filename_obj, const_str_plain___repr__, 168, const_tuple_str_plain_self_tuple, 1, 0, CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE );
    codeobj_927a7a355580569d3e630a4925f287a3 = MAKE_CODEOBJ( module_filename_obj, const_str_plain__count_to_size, 684, const_tuple_str_plain_count_tuple, 1, 0, CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE );
    codeobj_17d7052b9c3a53ead109ed86ee31520c = MAKE_CODEOBJ( module_filename_obj, const_str_plain__date_from_string, 217, const_tuple_9baa4e03aa6f68e7a024d9ed2f9ce383_tuple, 1, 0, CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE );
    codeobj_b9429066ec0e7c0c6d166bbcdc671c14 = MAKE_CODEOBJ( module_filename_obj, const_str_plain__date_to_string, 229, const_tuple_str_plain_d_tuple, 1, 0, CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE );
    codeobj_02c98b6f7544c4ced2c0d665794352de = MAKE_CODEOBJ( module_filename_obj, const_str_plain__decode_base64, 204, const_tuple_str_plain_s_tuple, 1, 0, CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE );
    codeobj_eb47429ce69b824e6c93ceac84e00d77 = MAKE_CODEOBJ( module_filename_obj, const_str_plain__encode_base64, 195, const_tuple_9a52825cf95a5e4bc44d5812c1959e25_tuple, 2, 0, CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE );
    codeobj_0b4c9aa5657ccaeb016e84e0b5e47236 = MAKE_CODEOBJ( module_filename_obj, const_str_plain__escape, 235, const_tuple_str_plain_text_str_plain_m_tuple, 1, 0, CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE );
    codeobj_a6aec4ddff54c70832a6d33f1dce40fd = MAKE_CODEOBJ( module_filename_obj, const_str_plain__flatten, 750, const_tuple_a3f07ad2f4f94a590d2259e1eff15185_tuple, 2, 0, CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE );
    codeobj_933cff0e6c2cdec9aff47fca315f05bb = MAKE_CODEOBJ( module_filename_obj, const_str_plain__get_size, 567, const_tuple_bcb813e58dde09b7032e289858300c76_tuple, 2, 0, CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE );
    codeobj_fb43eab1ae27c6acb6e7038c52d00258 = MAKE_CODEOBJ( module_filename_obj, const_str_plain__getrefnum, 798, const_tuple_str_plain_self_str_plain_value_tuple, 2, 0, CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE );
    codeobj_c4ab7b1151dc1dc8ba211fdaa8810c05 = MAKE_CODEOBJ( module_filename_obj, const_str_plain__is_fmt_binary, 909, const_tuple_str_plain_header_tuple, 1, 0, CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE );
    codeobj_dafd355cb1f2b6e746cd6dd919a0797d = MAKE_CODEOBJ( module_filename_obj, const_str_plain__is_fmt_xml, 489, const_tuple_9522554f5f5338f988ab20038367cb18_tuple, 1, 0, CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE );
    codeobj_ce27cf377074662a245da56d34a90579 = MAKE_CODEOBJ( module_filename_obj, const_str_plain__maybe_open, 79, const_tuple_str_plain_pathOrFile_str_plain_mode_str_plain_fp_tuple, 2, 0, CO_GENERATOR | CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE );
    codeobj_71f53baa965bdab6179a073e81d75811 = MAKE_CODEOBJ( module_filename_obj, const_str_plain__read_ints, 577, const_tuple_str_plain_self_str_plain_n_str_plain_size_str_plain_data_tuple, 3, 0, CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE );
    codeobj_1bf1851e5e22923611966fe471a992e2 = MAKE_CODEOBJ( module_filename_obj, const_str_plain__read_object, 590, const_tuple_4b6d164b3a55ae95cc6a822617747d71_tuple, 2, 0, CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE );
    codeobj_b755b67a5fe4586c6fe186a1c960c2e2 = MAKE_CODEOBJ( module_filename_obj, const_str_plain__read_refs, 587, const_tuple_str_plain_self_str_plain_n_tuple, 2, 0, CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE );
    codeobj_edf236a14f5145c2001a5486f9240237 = MAKE_CODEOBJ( module_filename_obj, const_str_plain__write_object, 822, const_tuple_73e51a79bceeb2bb282b2d6673dc631b_tuple, 2, 0, CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE );
    codeobj_e300c162d27a6a43dc187281e877cd78 = MAKE_CODEOBJ( module_filename_obj, const_str_plain__write_size, 806, const_tuple_str_plain_self_str_plain_token_str_plain_size_tuple, 3, 0, CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE );
    codeobj_d5586451b88a3c879eeca6a008e57522 = MAKE_CODEOBJ( module_filename_obj, const_str_plain_add_object, 277, const_tuple_str_plain_self_str_plain_value_tuple, 2, 0, CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE );
    codeobj_1f8721614f27c95ef32954e497ba091f = MAKE_CODEOBJ( module_filename_obj, const_str_plain_asBase64, 157, const_tuple_str_plain_self_str_plain_maxlinelength_tuple, 2, 0, CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE );
    codeobj_c703ebb5931b8474dc0577e26f98f0eb = MAKE_CODEOBJ( module_filename_obj, const_str_plain_begin_array, 317, const_tuple_str_plain_self_str_plain_attrs_str_plain_a_tuple, 2, 0, CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE );
    codeobj_29ec20723eec2f98ed1638ff1580d134 = MAKE_CODEOBJ( module_filename_obj, const_str_plain_begin_dict, 300, const_tuple_str_plain_self_str_plain_attrs_str_plain_d_tuple, 2, 0, CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE );
    codeobj_ec7700a560b5db815e48a8c01e9e1467 = MAKE_CODEOBJ( module_filename_obj, const_str_plain_begin_element, 358, const_tuple_str_plain_self_str_plain_element_tuple, 2, 0, CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE );
    codeobj_9f3aee96bd74e937729a5c400a418f8d = MAKE_CODEOBJ( module_filename_obj, const_str_plain_dump, 962, const_tuple_b8e54e8a5350150160288b1946222fce_tuple, 2, 3, CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE );
    codeobj_f3a77dd01f75c2e6f726a302d6653c9b = MAKE_CODEOBJ( module_filename_obj, const_str_plain_dumps, 973, const_tuple_fc530a996c2a4da49f5adddef59d0b0f_tuple, 1, 3, CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE );
    codeobj_86bfb94d82246de2165612ee08b14306 = MAKE_CODEOBJ( module_filename_obj, const_str_plain_end_array, 322, const_tuple_str_plain_self_tuple, 1, 0, CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE );
    codeobj_394db3475a232081bdb1f978c225930f = MAKE_CODEOBJ( module_filename_obj, const_str_plain_end_data, 340, const_tuple_str_plain_self_tuple, 1, 0, CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE );
    codeobj_3db2e52ef33d4eb073b73ae073e4ef5a = MAKE_CODEOBJ( module_filename_obj, const_str_plain_end_date, 347, const_tuple_str_plain_self_tuple, 1, 0, CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE );
    codeobj_c137ab2f19076c37db18924be34543b0 = MAKE_CODEOBJ( module_filename_obj, const_str_plain_end_dict, 305, const_tuple_str_plain_self_tuple, 1, 0, CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE );
    codeobj_4a99c9a153c5488c06b277919fc55b52 = MAKE_CODEOBJ( module_filename_obj, const_str_plain_end_element, 363, const_tuple_str_plain_self_str_plain_element_tuple, 2, 0, CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE );
    codeobj_4558bf051938d18c1bb120aac473f569 = MAKE_CODEOBJ( module_filename_obj, const_str_plain_end_false, 328, const_tuple_str_plain_self_tuple, 1, 0, CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE );
    codeobj_ef0071820f77a4becce92fd52300ac9b = MAKE_CODEOBJ( module_filename_obj, const_str_plain_end_integer, 331, const_tuple_str_plain_self_tuple, 1, 0, CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE );
    codeobj_391b3640d9ded65d2588654840fa2e13 = MAKE_CODEOBJ( module_filename_obj, const_str_plain_end_key, 311, const_tuple_str_plain_self_tuple, 1, 0, CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE );
    codeobj_450bf0e55fae22b04555a9e483a3a399 = MAKE_CODEOBJ( module_filename_obj, const_str_plain_end_real, 334, const_tuple_str_plain_self_tuple, 1, 0, CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE );
    codeobj_53fe42fd8bf57f188acf5a315f6a6348 = MAKE_CODEOBJ( module_filename_obj, const_str_plain_end_string, 337, const_tuple_str_plain_self_tuple, 1, 0, CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE );
    codeobj_a361a94c0aa4bb29cd54db7f2d6290cd = MAKE_CODEOBJ( module_filename_obj, const_str_plain_end_true, 325, const_tuple_str_plain_self_tuple, 1, 0, CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE );
    codeobj_5052dea2b041b2538c399c0901792c9e = MAKE_CODEOBJ( module_filename_obj, const_str_plain_fromBase64, 151, const_tuple_str_plain_cls_str_plain_data_tuple, 2, 0, CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE );
    codeobj_ff13cfe69c3214da91317aaa57f94838 = MAKE_CODEOBJ( module_filename_obj, const_str_plain_get_data, 293, const_tuple_str_plain_self_str_plain_data_tuple, 1, 0, CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE );
    codeobj_247e4d428c357065ba9e8f9bb7513632 = MAKE_CODEOBJ( module_filename_obj, const_str_plain_handle_begin_element, 263, const_tuple_1e30baefcdf4dd7733e4c72efef968f7_tuple, 3, 0, CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE );
    codeobj_a3f9da33bfba4743a02507aae8009f4a = MAKE_CODEOBJ( module_filename_obj, const_str_plain_handle_data, 274, const_tuple_str_plain_self_str_plain_data_tuple, 2, 0, CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE );
    codeobj_0b77ad39ed98f2b4798b7f0c3ce21305 = MAKE_CODEOBJ( module_filename_obj, const_str_plain_handle_end_element, 269, const_tuple_str_plain_self_str_plain_element_str_plain_handler_tuple, 2, 0, CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE );
    codeobj_5bd748325e1b93cb6ac76b1377ec42c1 = MAKE_CODEOBJ( module_filename_obj, const_str_plain_load, 931, const_tuple_f67937c5085725b81272367eb7afbd7a_tuple, 1, 3, CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE );
    codeobj_d27062a5a768bed0b64c62e12915c34e = MAKE_CODEOBJ( module_filename_obj, const_str_plain_loads, 953, const_tuple_f06fe5f660b6ac56d4e67dbf2446d72f_tuple, 1, 3, CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE );
    codeobj_3924ce3c9aecb71bd1721cfe145c0d4a = MAKE_CODEOBJ( module_filename_obj, const_str_plain_parse, 255, const_tuple_str_plain_self_str_plain_fileobj_tuple, 2, 0, CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE );
    codeobj_f6994825c2e6565735c8665b48060b34 = MAKE_CODEOBJ( module_filename_obj, const_str_plain_parse, 542, const_tuple_3348473375ddd0ae03b4ed982e352bb5_tuple, 2, 0, CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE );
    codeobj_f2d824099d637e3632344b6ab8f1be45 = MAKE_CODEOBJ( module_filename_obj, const_str_plain_readPlist, 89, const_tuple_str_plain_pathOrFile_str_plain_fp_tuple, 1, 0, CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE );
    codeobj_f619f06bf75def1d2791a7f0bc383d26 = MAKE_CODEOBJ( module_filename_obj, const_str_plain_readPlistFromBytes, 115, const_tuple_str_plain_data_tuple, 1, 0, CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE );
    codeobj_6b99acd8979c98546f55969395a59194 = MAKE_CODEOBJ( module_filename_obj, const_str_plain_simple_element, 369, const_tuple_str_plain_self_str_plain_element_str_plain_value_tuple, 3, 0, CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE );
    codeobj_2ab18736824656190d9afedab53a988a = MAKE_CODEOBJ( module_filename_obj, const_str_plain_write, 400, const_tuple_str_plain_self_str_plain_value_tuple, 2, 0, CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE );
    codeobj_f1c231a35a21038f690c7692c030f1ba = MAKE_CODEOBJ( module_filename_obj, const_str_plain_write, 705, const_tuple_8121465133473965ed0ce81878ee793a_tuple, 2, 0, CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE );
    codeobj_d5b82ebdfff3fa51cb1a9d07ee878447 = MAKE_CODEOBJ( module_filename_obj, const_str_plain_writePlist, 102, const_tuple_str_plain_value_str_plain_pathOrFile_str_plain_fp_tuple, 2, 0, CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE );
    codeobj_3e8551b09cd55b45e9d831e24972fa46 = MAKE_CODEOBJ( module_filename_obj, const_str_plain_writePlistToBytes, 126, const_tuple_str_plain_value_str_plain_f_tuple, 1, 0, CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE );
    codeobj_454dd373f5c99cba8da5eec2ae808a9a = MAKE_CODEOBJ( module_filename_obj, const_str_plain_write_array, 478, const_tuple_str_plain_self_str_plain_array_str_plain_value_tuple, 2, 0, CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE );
    codeobj_398c2ead7dab203b363086ad8619c7ac = MAKE_CODEOBJ( module_filename_obj, const_str_plain_write_bytes, 445, const_tuple_51eca9911886c08a181f0b3b32aff98f_tuple, 2, 0, CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE );
    codeobj_463289b78eb680a3e5594916603300dd = MAKE_CODEOBJ( module_filename_obj, const_str_plain_write_data, 442, const_tuple_str_plain_self_str_plain_data_tuple, 2, 0, CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE );
    codeobj_4e13ffd4d8633b9daf5c9ed811ff8fef = MAKE_CODEOBJ( module_filename_obj, const_str_plain_write_dict, 458, const_tuple_623aab190dd8a0ffb8f075c95f8d756d_tuple, 2, 0, CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE );
    codeobj_c0f5be1b35baf9f3b0c01ecf8ced538a = MAKE_CODEOBJ( module_filename_obj, const_str_plain_write_value, 405, const_tuple_str_plain_self_str_plain_value_tuple, 2, 0, CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE );
    codeobj_3b5b591b966c1dc4c84cbc03ce10a24b = MAKE_CODEOBJ( module_filename_obj, const_str_plain_writeln, 377, const_tuple_str_plain_self_str_plain_line_tuple, 2, 0, CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE );
}

// The module function declarations.
static PyObject *plistlib$$$function_1__maybe_open$$$genobj_1__maybe_open_maker( void );


static PyObject *plistlib$$$function_52__read_ints$$$genexpr_1_genexpr_maker( void );


static PyObject *plistlib$$$function_54__read_object$$$genexpr_1_genexpr_maker( void );


NUITKA_CROSS_MODULE PyObject *impl___internal__$$$function_1__mro_entries_conversion( PyObject **python_pars );


NUITKA_CROSS_MODULE PyObject *impl___internal__$$$function_2_complex_call_helper_star_list( PyObject **python_pars );


NUITKA_CROSS_MODULE PyObject *impl___internal__$$$function_4_complex_call_helper_pos_star_list( PyObject **python_pars );


static PyObject *MAKE_FUNCTION_plistlib$$$function_10___repr__(  );


static PyObject *MAKE_FUNCTION_plistlib$$$function_11__encode_base64( PyObject *defaults );


static PyObject *MAKE_FUNCTION_plistlib$$$function_12__decode_base64(  );


static PyObject *MAKE_FUNCTION_plistlib$$$function_13__date_from_string(  );


static PyObject *MAKE_FUNCTION_plistlib$$$function_14__date_to_string(  );


static PyObject *MAKE_FUNCTION_plistlib$$$function_15__escape(  );


static PyObject *MAKE_FUNCTION_plistlib$$$function_16___init__(  );


static PyObject *MAKE_FUNCTION_plistlib$$$function_17_parse(  );


static PyObject *MAKE_FUNCTION_plistlib$$$function_18_handle_begin_element(  );


static PyObject *MAKE_FUNCTION_plistlib$$$function_19_handle_end_element(  );


static PyObject *MAKE_FUNCTION_plistlib$$$function_1__maybe_open(  );


static PyObject *MAKE_FUNCTION_plistlib$$$function_20_handle_data(  );


static PyObject *MAKE_FUNCTION_plistlib$$$function_21_add_object(  );


static PyObject *MAKE_FUNCTION_plistlib$$$function_22_get_data(  );


static PyObject *MAKE_FUNCTION_plistlib$$$function_23_begin_dict(  );


static PyObject *MAKE_FUNCTION_plistlib$$$function_24_end_dict(  );


static PyObject *MAKE_FUNCTION_plistlib$$$function_25_end_key(  );


static PyObject *MAKE_FUNCTION_plistlib$$$function_26_begin_array(  );


static PyObject *MAKE_FUNCTION_plistlib$$$function_27_end_array(  );


static PyObject *MAKE_FUNCTION_plistlib$$$function_28_end_true(  );


static PyObject *MAKE_FUNCTION_plistlib$$$function_29_end_false(  );


static PyObject *MAKE_FUNCTION_plistlib$$$function_2_readPlist(  );


static PyObject *MAKE_FUNCTION_plistlib$$$function_30_end_integer(  );


static PyObject *MAKE_FUNCTION_plistlib$$$function_31_end_real(  );


static PyObject *MAKE_FUNCTION_plistlib$$$function_32_end_string(  );


static PyObject *MAKE_FUNCTION_plistlib$$$function_33_end_data(  );


static PyObject *MAKE_FUNCTION_plistlib$$$function_34_end_date(  );


static PyObject *MAKE_FUNCTION_plistlib$$$function_35___init__( PyObject *defaults );


static PyObject *MAKE_FUNCTION_plistlib$$$function_36_begin_element(  );


static PyObject *MAKE_FUNCTION_plistlib$$$function_37_end_element(  );


static PyObject *MAKE_FUNCTION_plistlib$$$function_38_simple_element( PyObject *defaults );


static PyObject *MAKE_FUNCTION_plistlib$$$function_39_writeln(  );


static PyObject *MAKE_FUNCTION_plistlib$$$function_3_writePlist(  );


static PyObject *MAKE_FUNCTION_plistlib$$$function_40___init__( PyObject *defaults );


static PyObject *MAKE_FUNCTION_plistlib$$$function_41_write(  );


static PyObject *MAKE_FUNCTION_plistlib$$$function_42_write_value(  );


static PyObject *MAKE_FUNCTION_plistlib$$$function_43_write_data(  );


static PyObject *MAKE_FUNCTION_plistlib$$$function_44_write_bytes(  );


static PyObject *MAKE_FUNCTION_plistlib$$$function_45_write_dict(  );


static PyObject *MAKE_FUNCTION_plistlib$$$function_46_write_array(  );


static PyObject *MAKE_FUNCTION_plistlib$$$function_47__is_fmt_xml(  );


static PyObject *MAKE_FUNCTION_plistlib$$$function_48___init__( PyObject *defaults );


static PyObject *MAKE_FUNCTION_plistlib$$$function_49___init__(  );


static PyObject *MAKE_FUNCTION_plistlib$$$function_4_readPlistFromBytes(  );


static PyObject *MAKE_FUNCTION_plistlib$$$function_50_parse(  );


static PyObject *MAKE_FUNCTION_plistlib$$$function_51__get_size(  );


static PyObject *MAKE_FUNCTION_plistlib$$$function_52__read_ints(  );


static PyObject *MAKE_FUNCTION_plistlib$$$function_53__read_refs(  );


static PyObject *MAKE_FUNCTION_plistlib$$$function_54__read_object(  );


static PyObject *MAKE_FUNCTION_plistlib$$$function_55__count_to_size(  );


static PyObject *MAKE_FUNCTION_plistlib$$$function_56___init__(  );


static PyObject *MAKE_FUNCTION_plistlib$$$function_57_write(  );


static PyObject *MAKE_FUNCTION_plistlib$$$function_58__flatten(  );


static PyObject *MAKE_FUNCTION_plistlib$$$function_59__getrefnum(  );


static PyObject *MAKE_FUNCTION_plistlib$$$function_5_writePlistToBytes(  );


static PyObject *MAKE_FUNCTION_plistlib$$$function_60__write_size(  );


static PyObject *MAKE_FUNCTION_plistlib$$$function_61__write_object(  );


static PyObject *MAKE_FUNCTION_plistlib$$$function_62__is_fmt_binary(  );


static PyObject *MAKE_FUNCTION_plistlib$$$function_63_load( PyObject *kw_defaults );


static PyObject *MAKE_FUNCTION_plistlib$$$function_64_loads( PyObject *kw_defaults );


static PyObject *MAKE_FUNCTION_plistlib$$$function_65_dump( PyObject *kw_defaults );


static PyObject *MAKE_FUNCTION_plistlib$$$function_66_dumps( PyObject *kw_defaults );


static PyObject *MAKE_FUNCTION_plistlib$$$function_6___init__(  );


static PyObject *MAKE_FUNCTION_plistlib$$$function_7_fromBase64(  );


static PyObject *MAKE_FUNCTION_plistlib$$$function_8_asBase64( PyObject *defaults );


static PyObject *MAKE_FUNCTION_plistlib$$$function_9___eq__(  );


// The module function definitions.
static PyObject *impl_plistlib$$$function_1__maybe_open( struct Nuitka_FunctionObject const *self, PyObject **python_pars )
{
    // Preserve error status for checks
#ifndef __NUITKA_NO_ASSERT__
    NUITKA_MAY_BE_UNUSED bool had_error = ERROR_OCCURRED();
#endif

    // Local variable declarations.
    struct Nuitka_CellObject *par_pathOrFile = PyCell_NEW1( python_pars[ 0 ] );
    struct Nuitka_CellObject *par_mode = PyCell_NEW1( python_pars[ 1 ] );
    PyObject *tmp_return_value = NULL;

    // Actual function body.
    // Tried code:
    tmp_return_value = plistlib$$$function_1__maybe_open$$$genobj_1__maybe_open_maker();

    ((struct Nuitka_GeneratorObject *)tmp_return_value)->m_closure[0] = par_mode;
    Py_INCREF( ((struct Nuitka_GeneratorObject *)tmp_return_value)->m_closure[0] );
    ((struct Nuitka_GeneratorObject *)tmp_return_value)->m_closure[1] = par_pathOrFile;
    Py_INCREF( ((struct Nuitka_GeneratorObject *)tmp_return_value)->m_closure[1] );


    goto try_return_handler_1;
    // tried codes exits in all cases
    NUITKA_CANNOT_GET_HERE( plistlib$$$function_1__maybe_open );
    return NULL;
    // Return handler code:
    try_return_handler_1:;
    CHECK_OBJECT( (PyObject *)par_pathOrFile );
    Py_DECREF( par_pathOrFile );
    par_pathOrFile = NULL;

    CHECK_OBJECT( (PyObject *)par_mode );
    Py_DECREF( par_mode );
    par_mode = NULL;

    goto function_return_exit;
    // End of try:
    CHECK_OBJECT( (PyObject *)par_pathOrFile );
    Py_DECREF( par_pathOrFile );
    par_pathOrFile = NULL;

    CHECK_OBJECT( (PyObject *)par_mode );
    Py_DECREF( par_mode );
    par_mode = NULL;


    // Return statement must have exited already.
    NUITKA_CANNOT_GET_HERE( plistlib$$$function_1__maybe_open );
    return NULL;


function_return_exit:
   // Function cleanup code if any.


   // Actual function exit with return value, making sure we did not make
   // the error status worse despite non-NULL return.
   CHECK_OBJECT( tmp_return_value );
   assert( had_error || !ERROR_OCCURRED() );
   return tmp_return_value;
}



struct plistlib$$$function_1__maybe_open$$$genobj_1__maybe_open_locals {
    PyObject *var_fp;
    PyObject *tmp_with_1__enter;
    PyObject *tmp_with_1__exit;
    nuitka_bool tmp_with_1__indicator;
    PyObject *tmp_with_1__source;
    char const *type_description_1;
    PyObject *exception_type;
    PyObject *exception_value;
    PyTracebackObject *exception_tb;
    int exception_lineno;
    int tmp_res;
    char yield_tmps[1024];
    PyObject *exception_keeper_type_1;
    PyObject *exception_keeper_value_1;
    PyTracebackObject *exception_keeper_tb_1;
    int exception_keeper_lineno_1;
    PyObject *exception_preserved_type_1;
    PyObject *exception_preserved_value_1;
    PyTracebackObject *exception_preserved_tb_1;
    bool tmp_result;
    PyObject *exception_keeper_type_2;
    PyObject *exception_keeper_value_2;
    PyTracebackObject *exception_keeper_tb_2;
    int exception_keeper_lineno_2;
    PyObject *exception_keeper_type_3;
    PyObject *exception_keeper_value_3;
    PyTracebackObject *exception_keeper_tb_3;
    int exception_keeper_lineno_3;
    PyObject *exception_keeper_type_4;
    PyObject *exception_keeper_value_4;
    PyTracebackObject *exception_keeper_tb_4;
    int exception_keeper_lineno_4;
    PyObject *exception_keeper_type_5;
    PyObject *exception_keeper_value_5;
    PyTracebackObject *exception_keeper_tb_5;
    int exception_keeper_lineno_5;
};

static PyObject *plistlib$$$function_1__maybe_open$$$genobj_1__maybe_open_context( struct Nuitka_GeneratorObject *generator, PyObject *yield_return_value )
{
    CHECK_OBJECT( (PyObject *)generator );
    assert( Nuitka_Generator_Check( (PyObject *)generator ) );

    // Heap access if used.
    struct plistlib$$$function_1__maybe_open$$$genobj_1__maybe_open_locals *generator_heap = (struct plistlib$$$function_1__maybe_open$$$genobj_1__maybe_open_locals *)generator->m_heap_storage;

    // Dispatch to yield based on return label index:
    switch(generator->m_yield_return_index) {
    case 2: goto yield_return_2;
    case 1: goto yield_return_1;
    }

    // Local variable initialization
    static struct Nuitka_FrameObject *cache_m_frame = NULL;
    generator_heap->var_fp = NULL;
    generator_heap->tmp_with_1__enter = NULL;
    generator_heap->tmp_with_1__exit = NULL;
    generator_heap->tmp_with_1__indicator = NUITKA_BOOL_UNASSIGNED;
    generator_heap->tmp_with_1__source = NULL;
    generator_heap->type_description_1 = NULL;
    generator_heap->exception_type = NULL;
    generator_heap->exception_value = NULL;
    generator_heap->exception_tb = NULL;
    generator_heap->exception_lineno = 0;

    // Actual generator function body.
    // Tried code:
    MAKE_OR_REUSE_FRAME( cache_m_frame, codeobj_ce27cf377074662a245da56d34a90579, module_plistlib, sizeof(void *)+sizeof(void *)+sizeof(void *) );
    generator->m_frame = cache_m_frame;

    // Mark the frame object as in use, ref count 1 will be up for reuse.
    Py_INCREF( generator->m_frame );
    assert( Py_REFCNT( generator->m_frame ) == 2 ); // Frame stack

#if PYTHON_VERSION >= 340
    generator->m_frame->m_frame.f_gen = (PyObject *)generator;
#endif

    Py_CLEAR( generator->m_frame->m_frame.f_back );

    generator->m_frame->m_frame.f_back = PyThreadState_GET()->frame;
    Py_INCREF( generator->m_frame->m_frame.f_back );

    PyThreadState_GET()->frame = &generator->m_frame->m_frame;
    Py_INCREF( generator->m_frame );

    Nuitka_Frame_MarkAsExecuting( generator->m_frame );

#if PYTHON_VERSION >= 300
    // Accept currently existing exception as the one to publish again when we
    // yield or yield from.
    {
        PyThreadState *thread_state = PyThreadState_GET();

#if PYTHON_VERSION < 370
        generator->m_frame->m_frame.f_exc_type = EXC_TYPE( thread_state );
    if ( generator->m_frame->m_frame.f_exc_type == Py_None ) generator->m_frame->m_frame.f_exc_type = NULL;
        Py_XINCREF( generator->m_frame->m_frame.f_exc_type );
    generator->m_frame->m_frame.f_exc_value = EXC_VALUE( thread_state );
        Py_XINCREF( generator->m_frame->m_frame.f_exc_value );
    generator->m_frame->m_frame.f_exc_traceback = EXC_TRACEBACK( thread_state );
        Py_XINCREF( generator->m_frame->m_frame.f_exc_traceback );
#else
        generator->m_exc_state.exc_type = EXC_TYPE( thread_state );
        if ( generator->m_exc_state.exc_type == Py_None ) generator->m_exc_state.exc_type = NULL;
        Py_XINCREF( generator->m_exc_state.exc_type );
        generator->m_exc_state.exc_value = EXC_VALUE( thread_state );
        Py_XINCREF( generator->m_exc_state.exc_value );
        generator->m_exc_state.exc_traceback = EXC_TRACEBACK( thread_state );
        Py_XINCREF( generator->m_exc_state.exc_traceback );
#endif
    }

#endif

    // Framed code:
    {
        nuitka_bool tmp_condition_result_1;
        PyObject *tmp_isinstance_inst_1;
        PyObject *tmp_isinstance_cls_1;
        if ( PyCell_GET( generator->m_closure[1] ) == NULL )
        {

            generator_heap->exception_type = PyExc_NameError;
            Py_INCREF( generator_heap->exception_type );
            generator_heap->exception_value = PyUnicode_FromFormat( "free variable '%s' referenced before assignment in enclosing scope", "pathOrFile" );
            generator_heap->exception_tb = NULL;
            NORMALIZE_EXCEPTION( &generator_heap->exception_type, &generator_heap->exception_value, &generator_heap->exception_tb );
            CHAIN_EXCEPTION( generator_heap->exception_value );

            generator_heap->exception_lineno = 81;
            generator_heap->type_description_1 = "cco";
            goto frame_exception_exit_1;
        }

        tmp_isinstance_inst_1 = PyCell_GET( generator->m_closure[1] );
        tmp_isinstance_cls_1 = (PyObject *)&PyUnicode_Type;
        generator_heap->tmp_res = Nuitka_IsInstance( tmp_isinstance_inst_1, tmp_isinstance_cls_1 );
        if ( generator_heap->tmp_res == -1 )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &generator_heap->exception_type, &generator_heap->exception_value, &generator_heap->exception_tb );


            generator_heap->exception_lineno = 81;
            generator_heap->type_description_1 = "cco";
            goto frame_exception_exit_1;
        }
        tmp_condition_result_1 = ( generator_heap->tmp_res != 0 ) ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
        if ( tmp_condition_result_1 == NUITKA_BOOL_TRUE )
        {
            goto branch_yes_1;
        }
        else
        {
            goto branch_no_1;
        }
        branch_yes_1:;
        // Tried code:
        {
            PyObject *tmp_assign_source_1;
            PyObject *tmp_open_filename_1;
            PyObject *tmp_open_mode_1;
            if ( PyCell_GET( generator->m_closure[1] ) == NULL )
            {

                generator_heap->exception_type = PyExc_NameError;
                Py_INCREF( generator_heap->exception_type );
                generator_heap->exception_value = PyUnicode_FromFormat( "free variable '%s' referenced before assignment in enclosing scope", "pathOrFile" );
                generator_heap->exception_tb = NULL;
                NORMALIZE_EXCEPTION( &generator_heap->exception_type, &generator_heap->exception_value, &generator_heap->exception_tb );
                CHAIN_EXCEPTION( generator_heap->exception_value );

                generator_heap->exception_lineno = 82;
                generator_heap->type_description_1 = "cco";
                goto try_except_handler_2;
            }

            tmp_open_filename_1 = PyCell_GET( generator->m_closure[1] );
            if ( PyCell_GET( generator->m_closure[0] ) == NULL )
            {

                generator_heap->exception_type = PyExc_NameError;
                Py_INCREF( generator_heap->exception_type );
                generator_heap->exception_value = PyUnicode_FromFormat( "free variable '%s' referenced before assignment in enclosing scope", "mode" );
                generator_heap->exception_tb = NULL;
                NORMALIZE_EXCEPTION( &generator_heap->exception_type, &generator_heap->exception_value, &generator_heap->exception_tb );
                CHAIN_EXCEPTION( generator_heap->exception_value );

                generator_heap->exception_lineno = 82;
                generator_heap->type_description_1 = "cco";
                goto try_except_handler_2;
            }

            tmp_open_mode_1 = PyCell_GET( generator->m_closure[0] );
            tmp_assign_source_1 = BUILTIN_OPEN( tmp_open_filename_1, tmp_open_mode_1, NULL, NULL, NULL, NULL, NULL, NULL );
            if ( tmp_assign_source_1 == NULL )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &generator_heap->exception_type, &generator_heap->exception_value, &generator_heap->exception_tb );


                generator_heap->exception_lineno = 82;
                generator_heap->type_description_1 = "cco";
                goto try_except_handler_2;
            }
            assert( generator_heap->tmp_with_1__source == NULL );
            generator_heap->tmp_with_1__source = tmp_assign_source_1;
        }
        {
            PyObject *tmp_assign_source_2;
            PyObject *tmp_called_name_1;
            PyObject *tmp_source_name_1;
            CHECK_OBJECT( generator_heap->tmp_with_1__source );
            tmp_source_name_1 = generator_heap->tmp_with_1__source;
            tmp_called_name_1 = LOOKUP_SPECIAL( tmp_source_name_1, const_str_plain___enter__ );
            if ( tmp_called_name_1 == NULL )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &generator_heap->exception_type, &generator_heap->exception_value, &generator_heap->exception_tb );


                generator_heap->exception_lineno = 82;
                generator_heap->type_description_1 = "cco";
                goto try_except_handler_2;
            }
            generator->m_frame->m_frame.f_lineno = 82;
            tmp_assign_source_2 = CALL_FUNCTION_NO_ARGS( tmp_called_name_1 );
            Py_DECREF( tmp_called_name_1 );
            if ( tmp_assign_source_2 == NULL )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &generator_heap->exception_type, &generator_heap->exception_value, &generator_heap->exception_tb );


                generator_heap->exception_lineno = 82;
                generator_heap->type_description_1 = "cco";
                goto try_except_handler_2;
            }
            assert( generator_heap->tmp_with_1__enter == NULL );
            generator_heap->tmp_with_1__enter = tmp_assign_source_2;
        }
        {
            PyObject *tmp_assign_source_3;
            PyObject *tmp_source_name_2;
            CHECK_OBJECT( generator_heap->tmp_with_1__source );
            tmp_source_name_2 = generator_heap->tmp_with_1__source;
            tmp_assign_source_3 = LOOKUP_SPECIAL( tmp_source_name_2, const_str_plain___exit__ );
            if ( tmp_assign_source_3 == NULL )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &generator_heap->exception_type, &generator_heap->exception_value, &generator_heap->exception_tb );


                generator_heap->exception_lineno = 82;
                generator_heap->type_description_1 = "cco";
                goto try_except_handler_2;
            }
            assert( generator_heap->tmp_with_1__exit == NULL );
            generator_heap->tmp_with_1__exit = tmp_assign_source_3;
        }
        {
            nuitka_bool tmp_assign_source_4;
            tmp_assign_source_4 = NUITKA_BOOL_TRUE;
            generator_heap->tmp_with_1__indicator = tmp_assign_source_4;
        }
        {
            PyObject *tmp_assign_source_5;
            CHECK_OBJECT( generator_heap->tmp_with_1__enter );
            tmp_assign_source_5 = generator_heap->tmp_with_1__enter;
            assert( generator_heap->var_fp == NULL );
            Py_INCREF( tmp_assign_source_5 );
            generator_heap->var_fp = tmp_assign_source_5;
        }
        // Tried code:
        // Tried code:
        {
            PyObject *tmp_expression_name_1;
            NUITKA_MAY_BE_UNUSED PyObject *tmp_yield_result_1;
            CHECK_OBJECT( generator_heap->var_fp );
            tmp_expression_name_1 = generator_heap->var_fp;
            Py_INCREF( tmp_expression_name_1 );
            Nuitka_PreserveHeap( generator_heap->yield_tmps, &tmp_condition_result_1, sizeof(nuitka_bool), &tmp_isinstance_inst_1, sizeof(PyObject *), &tmp_isinstance_cls_1, sizeof(PyObject *), NULL );
            generator->m_yield_return_index = 1;
            return tmp_expression_name_1;
            yield_return_1:
            Nuitka_RestoreHeap( generator_heap->yield_tmps, &tmp_condition_result_1, sizeof(nuitka_bool), &tmp_isinstance_inst_1, sizeof(PyObject *), &tmp_isinstance_cls_1, sizeof(PyObject *), NULL );
            if ( yield_return_value == NULL )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &generator_heap->exception_type, &generator_heap->exception_value, &generator_heap->exception_tb );


                generator_heap->exception_lineno = 83;
                generator_heap->type_description_1 = "cco";
                goto try_except_handler_4;
            }
            tmp_yield_result_1 = yield_return_value;
        }
        goto try_end_1;
        // Exception handler code:
        try_except_handler_4:;
        generator_heap->exception_keeper_type_1 = generator_heap->exception_type;
        generator_heap->exception_keeper_value_1 = generator_heap->exception_value;
        generator_heap->exception_keeper_tb_1 = generator_heap->exception_tb;
        generator_heap->exception_keeper_lineno_1 = generator_heap->exception_lineno;
        generator_heap->exception_type = NULL;
        generator_heap->exception_value = NULL;
        generator_heap->exception_tb = NULL;
        generator_heap->exception_lineno = 0;

        // Preserve existing published exception.
        generator_heap->exception_preserved_type_1 = EXC_TYPE(PyThreadState_GET());
        Py_XINCREF( generator_heap->exception_preserved_type_1 );
        generator_heap->exception_preserved_value_1 = EXC_VALUE(PyThreadState_GET());
        Py_XINCREF( generator_heap->exception_preserved_value_1 );
        generator_heap->exception_preserved_tb_1 = (PyTracebackObject *)EXC_TRACEBACK(PyThreadState_GET());
        Py_XINCREF( generator_heap->exception_preserved_tb_1 );

        if ( generator_heap->exception_keeper_tb_1 == NULL )
        {
            generator_heap->exception_keeper_tb_1 = MAKE_TRACEBACK( generator->m_frame, generator_heap->exception_keeper_lineno_1 );
        }
        else if ( generator_heap->exception_keeper_lineno_1 != 0 )
        {
            generator_heap->exception_keeper_tb_1 = ADD_TRACEBACK( generator_heap->exception_keeper_tb_1, generator->m_frame, generator_heap->exception_keeper_lineno_1 );
        }

        NORMALIZE_EXCEPTION( &generator_heap->exception_keeper_type_1, &generator_heap->exception_keeper_value_1, &generator_heap->exception_keeper_tb_1 );
        PyException_SetTraceback( generator_heap->exception_keeper_value_1, (PyObject *)generator_heap->exception_keeper_tb_1 );
        PUBLISH_EXCEPTION( &generator_heap->exception_keeper_type_1, &generator_heap->exception_keeper_value_1, &generator_heap->exception_keeper_tb_1 );
        // Tried code:
        {
            nuitka_bool tmp_condition_result_2;
            PyObject *tmp_compexpr_left_1;
            PyObject *tmp_compexpr_right_1;
            tmp_compexpr_left_1 = EXC_TYPE(PyThreadState_GET());
            tmp_compexpr_right_1 = PyExc_BaseException;
            generator_heap->tmp_res = EXCEPTION_MATCH_BOOL( tmp_compexpr_left_1, tmp_compexpr_right_1 );
            if ( generator_heap->tmp_res == -1 )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &generator_heap->exception_type, &generator_heap->exception_value, &generator_heap->exception_tb );


                generator_heap->exception_lineno = 82;
                generator_heap->type_description_1 = "cco";
                goto try_except_handler_5;
            }
            tmp_condition_result_2 = ( generator_heap->tmp_res != 0 ) ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
            if ( tmp_condition_result_2 == NUITKA_BOOL_TRUE )
            {
                goto branch_yes_2;
            }
            else
            {
                goto branch_no_2;
            }
            branch_yes_2:;
            {
                nuitka_bool tmp_assign_source_6;
                tmp_assign_source_6 = NUITKA_BOOL_FALSE;
                generator_heap->tmp_with_1__indicator = tmp_assign_source_6;
            }
            {
                nuitka_bool tmp_condition_result_3;
                PyObject *tmp_operand_name_1;
                PyObject *tmp_called_name_2;
                PyObject *tmp_args_element_name_1;
                PyObject *tmp_args_element_name_2;
                PyObject *tmp_args_element_name_3;
                CHECK_OBJECT( generator_heap->tmp_with_1__exit );
                tmp_called_name_2 = generator_heap->tmp_with_1__exit;
                tmp_args_element_name_1 = EXC_TYPE(PyThreadState_GET());
                tmp_args_element_name_2 = EXC_VALUE(PyThreadState_GET());
                tmp_args_element_name_3 = EXC_TRACEBACK(PyThreadState_GET());
                generator->m_frame->m_frame.f_lineno = 82;
                {
                    PyObject *call_args[] = { tmp_args_element_name_1, tmp_args_element_name_2, tmp_args_element_name_3 };
                    tmp_operand_name_1 = CALL_FUNCTION_WITH_ARGS3( tmp_called_name_2, call_args );
                }

                if ( tmp_operand_name_1 == NULL )
                {
                    assert( ERROR_OCCURRED() );

                    FETCH_ERROR_OCCURRED( &generator_heap->exception_type, &generator_heap->exception_value, &generator_heap->exception_tb );


                    generator_heap->exception_lineno = 82;
                    generator_heap->type_description_1 = "cco";
                    goto try_except_handler_5;
                }
                generator_heap->tmp_res = CHECK_IF_TRUE( tmp_operand_name_1 );
                Py_DECREF( tmp_operand_name_1 );
                if ( generator_heap->tmp_res == -1 )
                {
                    assert( ERROR_OCCURRED() );

                    FETCH_ERROR_OCCURRED( &generator_heap->exception_type, &generator_heap->exception_value, &generator_heap->exception_tb );


                    generator_heap->exception_lineno = 82;
                    generator_heap->type_description_1 = "cco";
                    goto try_except_handler_5;
                }
                tmp_condition_result_3 = ( generator_heap->tmp_res == 0 ) ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
                if ( tmp_condition_result_3 == NUITKA_BOOL_TRUE )
                {
                    goto branch_yes_3;
                }
                else
                {
                    goto branch_no_3;
                }
                branch_yes_3:;
                generator_heap->tmp_result = RERAISE_EXCEPTION( &generator_heap->exception_type, &generator_heap->exception_value, &generator_heap->exception_tb );
                if (unlikely( generator_heap->tmp_result == false ))
                {
                    generator_heap->exception_lineno = 82;
                }

                if (generator_heap->exception_tb && generator_heap->exception_tb->tb_frame == &generator->m_frame->m_frame) generator->m_frame->m_frame.f_lineno = generator_heap->exception_tb->tb_lineno;
                generator_heap->type_description_1 = "cco";
                goto try_except_handler_5;
                branch_no_3:;
            }
            goto branch_end_2;
            branch_no_2:;
            generator_heap->tmp_result = RERAISE_EXCEPTION( &generator_heap->exception_type, &generator_heap->exception_value, &generator_heap->exception_tb );
            if (unlikely( generator_heap->tmp_result == false ))
            {
                generator_heap->exception_lineno = 82;
            }

            if (generator_heap->exception_tb && generator_heap->exception_tb->tb_frame == &generator->m_frame->m_frame) generator->m_frame->m_frame.f_lineno = generator_heap->exception_tb->tb_lineno;
            generator_heap->type_description_1 = "cco";
            goto try_except_handler_5;
            branch_end_2:;
        }
        goto try_end_2;
        // Exception handler code:
        try_except_handler_5:;
        generator_heap->exception_keeper_type_2 = generator_heap->exception_type;
        generator_heap->exception_keeper_value_2 = generator_heap->exception_value;
        generator_heap->exception_keeper_tb_2 = generator_heap->exception_tb;
        generator_heap->exception_keeper_lineno_2 = generator_heap->exception_lineno;
        generator_heap->exception_type = NULL;
        generator_heap->exception_value = NULL;
        generator_heap->exception_tb = NULL;
        generator_heap->exception_lineno = 0;

        // Restore previous exception.
        SET_CURRENT_EXCEPTION( generator_heap->exception_preserved_type_1, generator_heap->exception_preserved_value_1, generator_heap->exception_preserved_tb_1 );
        // Re-raise.
        generator_heap->exception_type = generator_heap->exception_keeper_type_2;
        generator_heap->exception_value = generator_heap->exception_keeper_value_2;
        generator_heap->exception_tb = generator_heap->exception_keeper_tb_2;
        generator_heap->exception_lineno = generator_heap->exception_keeper_lineno_2;

        goto try_except_handler_3;
        // End of try:
        try_end_2:;
        // Restore previous exception.
        SET_CURRENT_EXCEPTION( generator_heap->exception_preserved_type_1, generator_heap->exception_preserved_value_1, generator_heap->exception_preserved_tb_1 );
        goto try_end_1;
        // exception handler codes exits in all cases
        NUITKA_CANNOT_GET_HERE( plistlib$$$function_1__maybe_open$$$genobj_1__maybe_open );
        return NULL;
        // End of try:
        try_end_1:;
        goto try_end_3;
        // Exception handler code:
        try_except_handler_3:;
        generator_heap->exception_keeper_type_3 = generator_heap->exception_type;
        generator_heap->exception_keeper_value_3 = generator_heap->exception_value;
        generator_heap->exception_keeper_tb_3 = generator_heap->exception_tb;
        generator_heap->exception_keeper_lineno_3 = generator_heap->exception_lineno;
        generator_heap->exception_type = NULL;
        generator_heap->exception_value = NULL;
        generator_heap->exception_tb = NULL;
        generator_heap->exception_lineno = 0;

        {
            nuitka_bool tmp_condition_result_4;
            nuitka_bool tmp_compexpr_left_2;
            nuitka_bool tmp_compexpr_right_2;
            assert( generator_heap->tmp_with_1__indicator != NUITKA_BOOL_UNASSIGNED);
            tmp_compexpr_left_2 = generator_heap->tmp_with_1__indicator;
            tmp_compexpr_right_2 = NUITKA_BOOL_TRUE;
            tmp_condition_result_4 = ( tmp_compexpr_left_2 == tmp_compexpr_right_2 ) ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
            if ( tmp_condition_result_4 == NUITKA_BOOL_TRUE )
            {
                goto branch_yes_4;
            }
            else
            {
                goto branch_no_4;
            }
            branch_yes_4:;
            {
                PyObject *tmp_called_name_3;
                PyObject *tmp_call_result_1;
                CHECK_OBJECT( generator_heap->tmp_with_1__exit );
                tmp_called_name_3 = generator_heap->tmp_with_1__exit;
                generator->m_frame->m_frame.f_lineno = 82;
                tmp_call_result_1 = CALL_FUNCTION_WITH_ARGS3( tmp_called_name_3, &PyTuple_GET_ITEM( const_tuple_none_none_none_tuple, 0 ) );

                if ( tmp_call_result_1 == NULL )
                {
                    assert( ERROR_OCCURRED() );

                    FETCH_ERROR_OCCURRED( &generator_heap->exception_type, &generator_heap->exception_value, &generator_heap->exception_tb );

                    Py_DECREF( generator_heap->exception_keeper_type_3 );
                    Py_XDECREF( generator_heap->exception_keeper_value_3 );
                    Py_XDECREF( generator_heap->exception_keeper_tb_3 );

                    generator_heap->exception_lineno = 82;
                    generator_heap->type_description_1 = "cco";
                    goto try_except_handler_2;
                }
                Py_DECREF( tmp_call_result_1 );
            }
            branch_no_4:;
        }
        // Re-raise.
        generator_heap->exception_type = generator_heap->exception_keeper_type_3;
        generator_heap->exception_value = generator_heap->exception_keeper_value_3;
        generator_heap->exception_tb = generator_heap->exception_keeper_tb_3;
        generator_heap->exception_lineno = generator_heap->exception_keeper_lineno_3;

        goto try_except_handler_2;
        // End of try:
        try_end_3:;
        {
            nuitka_bool tmp_condition_result_5;
            nuitka_bool tmp_compexpr_left_3;
            nuitka_bool tmp_compexpr_right_3;
            assert( generator_heap->tmp_with_1__indicator != NUITKA_BOOL_UNASSIGNED);
            tmp_compexpr_left_3 = generator_heap->tmp_with_1__indicator;
            tmp_compexpr_right_3 = NUITKA_BOOL_TRUE;
            tmp_condition_result_5 = ( tmp_compexpr_left_3 == tmp_compexpr_right_3 ) ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
            if ( tmp_condition_result_5 == NUITKA_BOOL_TRUE )
            {
                goto branch_yes_5;
            }
            else
            {
                goto branch_no_5;
            }
            branch_yes_5:;
            {
                PyObject *tmp_called_name_4;
                PyObject *tmp_call_result_2;
                CHECK_OBJECT( generator_heap->tmp_with_1__exit );
                tmp_called_name_4 = generator_heap->tmp_with_1__exit;
                generator->m_frame->m_frame.f_lineno = 82;
                tmp_call_result_2 = CALL_FUNCTION_WITH_ARGS3( tmp_called_name_4, &PyTuple_GET_ITEM( const_tuple_none_none_none_tuple, 0 ) );

                if ( tmp_call_result_2 == NULL )
                {
                    assert( ERROR_OCCURRED() );

                    FETCH_ERROR_OCCURRED( &generator_heap->exception_type, &generator_heap->exception_value, &generator_heap->exception_tb );


                    generator_heap->exception_lineno = 82;
                    generator_heap->type_description_1 = "cco";
                    goto try_except_handler_2;
                }
                Py_DECREF( tmp_call_result_2 );
            }
            branch_no_5:;
        }
        goto try_end_4;
        // Exception handler code:
        try_except_handler_2:;
        generator_heap->exception_keeper_type_4 = generator_heap->exception_type;
        generator_heap->exception_keeper_value_4 = generator_heap->exception_value;
        generator_heap->exception_keeper_tb_4 = generator_heap->exception_tb;
        generator_heap->exception_keeper_lineno_4 = generator_heap->exception_lineno;
        generator_heap->exception_type = NULL;
        generator_heap->exception_value = NULL;
        generator_heap->exception_tb = NULL;
        generator_heap->exception_lineno = 0;

        Py_XDECREF( generator_heap->tmp_with_1__source );
        generator_heap->tmp_with_1__source = NULL;

        Py_XDECREF( generator_heap->tmp_with_1__enter );
        generator_heap->tmp_with_1__enter = NULL;

        Py_XDECREF( generator_heap->tmp_with_1__exit );
        generator_heap->tmp_with_1__exit = NULL;

        // Re-raise.
        generator_heap->exception_type = generator_heap->exception_keeper_type_4;
        generator_heap->exception_value = generator_heap->exception_keeper_value_4;
        generator_heap->exception_tb = generator_heap->exception_keeper_tb_4;
        generator_heap->exception_lineno = generator_heap->exception_keeper_lineno_4;

        goto frame_exception_exit_1;
        // End of try:
        try_end_4:;
        CHECK_OBJECT( (PyObject *)generator_heap->tmp_with_1__source );
        Py_DECREF( generator_heap->tmp_with_1__source );
        generator_heap->tmp_with_1__source = NULL;

        CHECK_OBJECT( (PyObject *)generator_heap->tmp_with_1__enter );
        Py_DECREF( generator_heap->tmp_with_1__enter );
        generator_heap->tmp_with_1__enter = NULL;

        CHECK_OBJECT( (PyObject *)generator_heap->tmp_with_1__exit );
        Py_DECREF( generator_heap->tmp_with_1__exit );
        generator_heap->tmp_with_1__exit = NULL;

        goto branch_end_1;
        branch_no_1:;
        {
            PyObject *tmp_expression_name_2;
            NUITKA_MAY_BE_UNUSED PyObject *tmp_yield_result_2;
            if ( PyCell_GET( generator->m_closure[1] ) == NULL )
            {

                generator_heap->exception_type = PyExc_NameError;
                Py_INCREF( generator_heap->exception_type );
                generator_heap->exception_value = PyUnicode_FromFormat( "free variable '%s' referenced before assignment in enclosing scope", "pathOrFile" );
                generator_heap->exception_tb = NULL;
                NORMALIZE_EXCEPTION( &generator_heap->exception_type, &generator_heap->exception_value, &generator_heap->exception_tb );
                CHAIN_EXCEPTION( generator_heap->exception_value );

                generator_heap->exception_lineno = 86;
                generator_heap->type_description_1 = "cco";
                goto frame_exception_exit_1;
            }

            tmp_expression_name_2 = PyCell_GET( generator->m_closure[1] );
            Py_INCREF( tmp_expression_name_2 );
            Nuitka_PreserveHeap( generator_heap->yield_tmps, &tmp_condition_result_1, sizeof(nuitka_bool), &tmp_isinstance_inst_1, sizeof(PyObject *), &tmp_isinstance_cls_1, sizeof(PyObject *), NULL );
            generator->m_yield_return_index = 2;
            return tmp_expression_name_2;
            yield_return_2:
            Nuitka_RestoreHeap( generator_heap->yield_tmps, &tmp_condition_result_1, sizeof(nuitka_bool), &tmp_isinstance_inst_1, sizeof(PyObject *), &tmp_isinstance_cls_1, sizeof(PyObject *), NULL );
            if ( yield_return_value == NULL )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &generator_heap->exception_type, &generator_heap->exception_value, &generator_heap->exception_tb );


                generator_heap->exception_lineno = 86;
                generator_heap->type_description_1 = "cco";
                goto frame_exception_exit_1;
            }
            tmp_yield_result_2 = yield_return_value;
        }
        branch_end_1:;
    }

    Nuitka_Frame_MarkAsNotExecuting( generator->m_frame );

#if PYTHON_VERSION >= 370
    Py_CLEAR( generator->m_exc_state.exc_type );
    Py_CLEAR( generator->m_exc_state.exc_value );
    Py_CLEAR( generator->m_exc_state.exc_traceback );
#elif PYTHON_VERSION >= 300
    Py_CLEAR( generator->m_frame->m_frame.f_exc_type );
    Py_CLEAR( generator->m_frame->m_frame.f_exc_value );
    Py_CLEAR( generator->m_frame->m_frame.f_exc_traceback );
#endif

    // Allow re-use of the frame again.
    Py_DECREF( generator->m_frame );
    goto frame_no_exception_1;

    frame_exception_exit_1:;

    // If it's not an exit exception, consider and create a traceback for it.
    if ( !EXCEPTION_MATCH_GENERATOR( generator_heap->exception_type ) )
    {
        if ( generator_heap->exception_tb == NULL )
        {
            generator_heap->exception_tb = MAKE_TRACEBACK( generator->m_frame, generator_heap->exception_lineno );
        }
        else if ( generator_heap->exception_tb->tb_frame != &generator->m_frame->m_frame )
        {
            generator_heap->exception_tb = ADD_TRACEBACK( generator_heap->exception_tb, generator->m_frame, generator_heap->exception_lineno );
        }

        Nuitka_Frame_AttachLocals(
            (struct Nuitka_FrameObject *)generator->m_frame,
            generator_heap->type_description_1,
            generator->m_closure[1],
            generator->m_closure[0],
            generator_heap->var_fp
        );


        // Release cached frame.
        if ( generator->m_frame == cache_m_frame )
        {
            Py_DECREF( generator->m_frame );
        }
        cache_m_frame = NULL;

        assertFrameObject( generator->m_frame );
    }

#if PYTHON_VERSION >= 370
    Py_CLEAR( generator->m_exc_state.exc_type );
    Py_CLEAR( generator->m_exc_state.exc_value );
    Py_CLEAR( generator->m_exc_state.exc_traceback );
#elif PYTHON_VERSION >= 300
    Py_CLEAR( generator->m_frame->m_frame.f_exc_type );
    Py_CLEAR( generator->m_frame->m_frame.f_exc_value );
    Py_CLEAR( generator->m_frame->m_frame.f_exc_traceback );
#endif

    Py_DECREF( generator->m_frame );

    // Return the error.
    goto try_except_handler_1;

    frame_no_exception_1:;
    goto try_end_5;
    // Exception handler code:
    try_except_handler_1:;
    generator_heap->exception_keeper_type_5 = generator_heap->exception_type;
    generator_heap->exception_keeper_value_5 = generator_heap->exception_value;
    generator_heap->exception_keeper_tb_5 = generator_heap->exception_tb;
    generator_heap->exception_keeper_lineno_5 = generator_heap->exception_lineno;
    generator_heap->exception_type = NULL;
    generator_heap->exception_value = NULL;
    generator_heap->exception_tb = NULL;
    generator_heap->exception_lineno = 0;

    Py_XDECREF( generator_heap->var_fp );
    generator_heap->var_fp = NULL;

    // Re-raise.
    generator_heap->exception_type = generator_heap->exception_keeper_type_5;
    generator_heap->exception_value = generator_heap->exception_keeper_value_5;
    generator_heap->exception_tb = generator_heap->exception_keeper_tb_5;
    generator_heap->exception_lineno = generator_heap->exception_keeper_lineno_5;

    goto function_exception_exit;
    // End of try:
    try_end_5:;
    Py_XDECREF( generator_heap->var_fp );
    generator_heap->var_fp = NULL;



    return NULL;

    function_exception_exit:
    assert( generator_heap->exception_type );
    RESTORE_ERROR_OCCURRED( generator_heap->exception_type, generator_heap->exception_value, generator_heap->exception_tb );

    return NULL;

}

static PyObject *plistlib$$$function_1__maybe_open$$$genobj_1__maybe_open_maker( void )
{
    return Nuitka_Generator_New(
        plistlib$$$function_1__maybe_open$$$genobj_1__maybe_open_context,
        module_plistlib,
        const_str_plain__maybe_open,
#if PYTHON_VERSION >= 350
        NULL,
#endif
        codeobj_ce27cf377074662a245da56d34a90579,
        2,
        sizeof(struct plistlib$$$function_1__maybe_open$$$genobj_1__maybe_open_locals)
    );
}


static PyObject *impl_plistlib$$$function_2_readPlist( struct Nuitka_FunctionObject const *self, PyObject **python_pars )
{
    // Preserve error status for checks
#ifndef __NUITKA_NO_ASSERT__
    NUITKA_MAY_BE_UNUSED bool had_error = ERROR_OCCURRED();
#endif

    // Local variable declarations.
    PyObject *par_pathOrFile = python_pars[ 0 ];
    PyObject *var_fp = NULL;
    PyObject *tmp_with_1__enter = NULL;
    PyObject *tmp_with_1__exit = NULL;
    nuitka_bool tmp_with_1__indicator = NUITKA_BOOL_UNASSIGNED;
    PyObject *tmp_with_1__source = NULL;
    struct Nuitka_FrameObject *frame_f2d824099d637e3632344b6ab8f1be45;
    NUITKA_MAY_BE_UNUSED char const *type_description_1 = NULL;
    PyObject *exception_type = NULL;
    PyObject *exception_value = NULL;
    PyTracebackObject *exception_tb = NULL;
    NUITKA_MAY_BE_UNUSED int exception_lineno = 0;
    PyObject *tmp_return_value = NULL;
    PyObject *exception_keeper_type_1;
    PyObject *exception_keeper_value_1;
    PyTracebackObject *exception_keeper_tb_1;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_1;
    PyObject *exception_preserved_type_1;
    PyObject *exception_preserved_value_1;
    PyTracebackObject *exception_preserved_tb_1;
    int tmp_res;
    bool tmp_result;
    PyObject *exception_keeper_type_2;
    PyObject *exception_keeper_value_2;
    PyTracebackObject *exception_keeper_tb_2;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_2;
    PyObject *exception_keeper_type_3;
    PyObject *exception_keeper_value_3;
    PyTracebackObject *exception_keeper_tb_3;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_3;
    PyObject *exception_keeper_type_4;
    PyObject *exception_keeper_value_4;
    PyTracebackObject *exception_keeper_tb_4;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_4;
    static struct Nuitka_FrameObject *cache_frame_f2d824099d637e3632344b6ab8f1be45 = NULL;
    PyObject *exception_keeper_type_5;
    PyObject *exception_keeper_value_5;
    PyTracebackObject *exception_keeper_tb_5;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_5;

    // Actual function body.
    // Tried code:
    MAKE_OR_REUSE_FRAME( cache_frame_f2d824099d637e3632344b6ab8f1be45, codeobj_f2d824099d637e3632344b6ab8f1be45, module_plistlib, sizeof(void *)+sizeof(void *) );
    frame_f2d824099d637e3632344b6ab8f1be45 = cache_frame_f2d824099d637e3632344b6ab8f1be45;

    // Push the new frame as the currently active one.
    pushFrameStack( frame_f2d824099d637e3632344b6ab8f1be45 );

    // Mark the frame object as in use, ref count 1 will be up for reuse.
    assert( Py_REFCNT( frame_f2d824099d637e3632344b6ab8f1be45 ) == 2 ); // Frame stack

    // Framed code:
    {
        PyObject *tmp_called_name_1;
        PyObject *tmp_mvar_value_1;
        PyObject *tmp_call_result_1;
        PyObject *tmp_args_element_name_1;
        PyObject *tmp_args_element_name_2;
        PyObject *tmp_mvar_value_2;
        PyObject *tmp_args_element_name_3;
        tmp_mvar_value_1 = GET_STRING_DICT_VALUE( moduledict_plistlib, (Nuitka_StringObject *)const_str_plain_warn );

        if (unlikely( tmp_mvar_value_1 == NULL ))
        {
            tmp_mvar_value_1 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_warn );
        }

        if ( tmp_mvar_value_1 == NULL )
        {

            exception_type = PyExc_NameError;
            Py_INCREF( exception_type );
            exception_value = PyUnicode_FromFormat( "name '%s' is not defined", "warn" );
            exception_tb = NULL;
            NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
            CHAIN_EXCEPTION( exception_value );

            exception_lineno = 96;
            type_description_1 = "oo";
            goto frame_exception_exit_1;
        }

        tmp_called_name_1 = tmp_mvar_value_1;
        tmp_args_element_name_1 = const_str_digest_d1666c2e815cdf8c51a87c4cc5a38f18;
        tmp_mvar_value_2 = GET_STRING_DICT_VALUE( moduledict_plistlib, (Nuitka_StringObject *)const_str_plain_DeprecationWarning );

        if (unlikely( tmp_mvar_value_2 == NULL ))
        {
            tmp_mvar_value_2 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_DeprecationWarning );
        }

        if ( tmp_mvar_value_2 == NULL )
        {

            exception_type = PyExc_NameError;
            Py_INCREF( exception_type );
            exception_value = PyUnicode_FromFormat( "name '%s' is not defined", "DeprecationWarning" );
            exception_tb = NULL;
            NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
            CHAIN_EXCEPTION( exception_value );

            exception_lineno = 97;
            type_description_1 = "oo";
            goto frame_exception_exit_1;
        }

        tmp_args_element_name_2 = tmp_mvar_value_2;
        tmp_args_element_name_3 = const_int_pos_2;
        frame_f2d824099d637e3632344b6ab8f1be45->m_frame.f_lineno = 96;
        {
            PyObject *call_args[] = { tmp_args_element_name_1, tmp_args_element_name_2, tmp_args_element_name_3 };
            tmp_call_result_1 = CALL_FUNCTION_WITH_ARGS3( tmp_called_name_1, call_args );
        }

        if ( tmp_call_result_1 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 96;
            type_description_1 = "oo";
            goto frame_exception_exit_1;
        }
        Py_DECREF( tmp_call_result_1 );
    }
    // Tried code:
    {
        PyObject *tmp_assign_source_1;
        PyObject *tmp_called_name_2;
        PyObject *tmp_mvar_value_3;
        PyObject *tmp_args_element_name_4;
        PyObject *tmp_args_element_name_5;
        tmp_mvar_value_3 = GET_STRING_DICT_VALUE( moduledict_plistlib, (Nuitka_StringObject *)const_str_plain__maybe_open );

        if (unlikely( tmp_mvar_value_3 == NULL ))
        {
            tmp_mvar_value_3 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain__maybe_open );
        }

        if ( tmp_mvar_value_3 == NULL )
        {

            exception_type = PyExc_NameError;
            Py_INCREF( exception_type );
            exception_value = PyUnicode_FromFormat( "name '%s' is not defined", "_maybe_open" );
            exception_tb = NULL;
            NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
            CHAIN_EXCEPTION( exception_value );

            exception_lineno = 99;
            type_description_1 = "oo";
            goto try_except_handler_2;
        }

        tmp_called_name_2 = tmp_mvar_value_3;
        CHECK_OBJECT( par_pathOrFile );
        tmp_args_element_name_4 = par_pathOrFile;
        tmp_args_element_name_5 = const_str_plain_rb;
        frame_f2d824099d637e3632344b6ab8f1be45->m_frame.f_lineno = 99;
        {
            PyObject *call_args[] = { tmp_args_element_name_4, tmp_args_element_name_5 };
            tmp_assign_source_1 = CALL_FUNCTION_WITH_ARGS2( tmp_called_name_2, call_args );
        }

        if ( tmp_assign_source_1 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 99;
            type_description_1 = "oo";
            goto try_except_handler_2;
        }
        assert( tmp_with_1__source == NULL );
        tmp_with_1__source = tmp_assign_source_1;
    }
    {
        PyObject *tmp_assign_source_2;
        PyObject *tmp_called_name_3;
        PyObject *tmp_source_name_1;
        CHECK_OBJECT( tmp_with_1__source );
        tmp_source_name_1 = tmp_with_1__source;
        tmp_called_name_3 = LOOKUP_SPECIAL( tmp_source_name_1, const_str_plain___enter__ );
        if ( tmp_called_name_3 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 99;
            type_description_1 = "oo";
            goto try_except_handler_2;
        }
        frame_f2d824099d637e3632344b6ab8f1be45->m_frame.f_lineno = 99;
        tmp_assign_source_2 = CALL_FUNCTION_NO_ARGS( tmp_called_name_3 );
        Py_DECREF( tmp_called_name_3 );
        if ( tmp_assign_source_2 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 99;
            type_description_1 = "oo";
            goto try_except_handler_2;
        }
        assert( tmp_with_1__enter == NULL );
        tmp_with_1__enter = tmp_assign_source_2;
    }
    {
        PyObject *tmp_assign_source_3;
        PyObject *tmp_source_name_2;
        CHECK_OBJECT( tmp_with_1__source );
        tmp_source_name_2 = tmp_with_1__source;
        tmp_assign_source_3 = LOOKUP_SPECIAL( tmp_source_name_2, const_str_plain___exit__ );
        if ( tmp_assign_source_3 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 99;
            type_description_1 = "oo";
            goto try_except_handler_2;
        }
        assert( tmp_with_1__exit == NULL );
        tmp_with_1__exit = tmp_assign_source_3;
    }
    {
        nuitka_bool tmp_assign_source_4;
        tmp_assign_source_4 = NUITKA_BOOL_TRUE;
        tmp_with_1__indicator = tmp_assign_source_4;
    }
    {
        PyObject *tmp_assign_source_5;
        CHECK_OBJECT( tmp_with_1__enter );
        tmp_assign_source_5 = tmp_with_1__enter;
        assert( var_fp == NULL );
        Py_INCREF( tmp_assign_source_5 );
        var_fp = tmp_assign_source_5;
    }
    // Tried code:
    // Tried code:
    {
        PyObject *tmp_called_name_4;
        PyObject *tmp_mvar_value_4;
        PyObject *tmp_args_name_1;
        PyObject *tmp_tuple_element_1;
        PyObject *tmp_kw_name_1;
        tmp_mvar_value_4 = GET_STRING_DICT_VALUE( moduledict_plistlib, (Nuitka_StringObject *)const_str_plain_load );

        if (unlikely( tmp_mvar_value_4 == NULL ))
        {
            tmp_mvar_value_4 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_load );
        }

        if ( tmp_mvar_value_4 == NULL )
        {

            exception_type = PyExc_NameError;
            Py_INCREF( exception_type );
            exception_value = PyUnicode_FromFormat( "name '%s' is not defined", "load" );
            exception_tb = NULL;
            NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
            CHAIN_EXCEPTION( exception_value );

            exception_lineno = 100;
            type_description_1 = "oo";
            goto try_except_handler_4;
        }

        tmp_called_name_4 = tmp_mvar_value_4;
        CHECK_OBJECT( var_fp );
        tmp_tuple_element_1 = var_fp;
        tmp_args_name_1 = PyTuple_New( 1 );
        Py_INCREF( tmp_tuple_element_1 );
        PyTuple_SET_ITEM( tmp_args_name_1, 0, tmp_tuple_element_1 );
        tmp_kw_name_1 = PyDict_Copy( const_dict_7611676ed95705a12123cc4968fd525a );
        frame_f2d824099d637e3632344b6ab8f1be45->m_frame.f_lineno = 100;
        tmp_return_value = CALL_FUNCTION( tmp_called_name_4, tmp_args_name_1, tmp_kw_name_1 );
        Py_DECREF( tmp_args_name_1 );
        Py_DECREF( tmp_kw_name_1 );
        if ( tmp_return_value == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 100;
            type_description_1 = "oo";
            goto try_except_handler_4;
        }
        goto try_return_handler_3;
    }
    // tried codes exits in all cases
    NUITKA_CANNOT_GET_HERE( plistlib$$$function_2_readPlist );
    return NULL;
    // Exception handler code:
    try_except_handler_4:;
    exception_keeper_type_1 = exception_type;
    exception_keeper_value_1 = exception_value;
    exception_keeper_tb_1 = exception_tb;
    exception_keeper_lineno_1 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    // Preserve existing published exception.
    exception_preserved_type_1 = EXC_TYPE(PyThreadState_GET());
    Py_XINCREF( exception_preserved_type_1 );
    exception_preserved_value_1 = EXC_VALUE(PyThreadState_GET());
    Py_XINCREF( exception_preserved_value_1 );
    exception_preserved_tb_1 = (PyTracebackObject *)EXC_TRACEBACK(PyThreadState_GET());
    Py_XINCREF( exception_preserved_tb_1 );

    if ( exception_keeper_tb_1 == NULL )
    {
        exception_keeper_tb_1 = MAKE_TRACEBACK( frame_f2d824099d637e3632344b6ab8f1be45, exception_keeper_lineno_1 );
    }
    else if ( exception_keeper_lineno_1 != 0 )
    {
        exception_keeper_tb_1 = ADD_TRACEBACK( exception_keeper_tb_1, frame_f2d824099d637e3632344b6ab8f1be45, exception_keeper_lineno_1 );
    }

    NORMALIZE_EXCEPTION( &exception_keeper_type_1, &exception_keeper_value_1, &exception_keeper_tb_1 );
    PyException_SetTraceback( exception_keeper_value_1, (PyObject *)exception_keeper_tb_1 );
    PUBLISH_EXCEPTION( &exception_keeper_type_1, &exception_keeper_value_1, &exception_keeper_tb_1 );
    // Tried code:
    {
        nuitka_bool tmp_condition_result_1;
        PyObject *tmp_compexpr_left_1;
        PyObject *tmp_compexpr_right_1;
        tmp_compexpr_left_1 = EXC_TYPE(PyThreadState_GET());
        tmp_compexpr_right_1 = PyExc_BaseException;
        tmp_res = EXCEPTION_MATCH_BOOL( tmp_compexpr_left_1, tmp_compexpr_right_1 );
        if ( tmp_res == -1 )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 99;
            type_description_1 = "oo";
            goto try_except_handler_5;
        }
        tmp_condition_result_1 = ( tmp_res != 0 ) ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
        if ( tmp_condition_result_1 == NUITKA_BOOL_TRUE )
        {
            goto branch_yes_1;
        }
        else
        {
            goto branch_no_1;
        }
        branch_yes_1:;
        {
            nuitka_bool tmp_assign_source_6;
            tmp_assign_source_6 = NUITKA_BOOL_FALSE;
            tmp_with_1__indicator = tmp_assign_source_6;
        }
        {
            nuitka_bool tmp_condition_result_2;
            PyObject *tmp_operand_name_1;
            PyObject *tmp_called_name_5;
            PyObject *tmp_args_element_name_6;
            PyObject *tmp_args_element_name_7;
            PyObject *tmp_args_element_name_8;
            CHECK_OBJECT( tmp_with_1__exit );
            tmp_called_name_5 = tmp_with_1__exit;
            tmp_args_element_name_6 = EXC_TYPE(PyThreadState_GET());
            tmp_args_element_name_7 = EXC_VALUE(PyThreadState_GET());
            tmp_args_element_name_8 = EXC_TRACEBACK(PyThreadState_GET());
            frame_f2d824099d637e3632344b6ab8f1be45->m_frame.f_lineno = 99;
            {
                PyObject *call_args[] = { tmp_args_element_name_6, tmp_args_element_name_7, tmp_args_element_name_8 };
                tmp_operand_name_1 = CALL_FUNCTION_WITH_ARGS3( tmp_called_name_5, call_args );
            }

            if ( tmp_operand_name_1 == NULL )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 99;
                type_description_1 = "oo";
                goto try_except_handler_5;
            }
            tmp_res = CHECK_IF_TRUE( tmp_operand_name_1 );
            Py_DECREF( tmp_operand_name_1 );
            if ( tmp_res == -1 )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 99;
                type_description_1 = "oo";
                goto try_except_handler_5;
            }
            tmp_condition_result_2 = ( tmp_res == 0 ) ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
            if ( tmp_condition_result_2 == NUITKA_BOOL_TRUE )
            {
                goto branch_yes_2;
            }
            else
            {
                goto branch_no_2;
            }
            branch_yes_2:;
            tmp_result = RERAISE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
            if (unlikely( tmp_result == false ))
            {
                exception_lineno = 99;
            }

            if (exception_tb && exception_tb->tb_frame == &frame_f2d824099d637e3632344b6ab8f1be45->m_frame) frame_f2d824099d637e3632344b6ab8f1be45->m_frame.f_lineno = exception_tb->tb_lineno;
            type_description_1 = "oo";
            goto try_except_handler_5;
            branch_no_2:;
        }
        goto branch_end_1;
        branch_no_1:;
        tmp_result = RERAISE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
        if (unlikely( tmp_result == false ))
        {
            exception_lineno = 99;
        }

        if (exception_tb && exception_tb->tb_frame == &frame_f2d824099d637e3632344b6ab8f1be45->m_frame) frame_f2d824099d637e3632344b6ab8f1be45->m_frame.f_lineno = exception_tb->tb_lineno;
        type_description_1 = "oo";
        goto try_except_handler_5;
        branch_end_1:;
    }
    goto try_end_1;
    // Exception handler code:
    try_except_handler_5:;
    exception_keeper_type_2 = exception_type;
    exception_keeper_value_2 = exception_value;
    exception_keeper_tb_2 = exception_tb;
    exception_keeper_lineno_2 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    // Restore previous exception.
    SET_CURRENT_EXCEPTION( exception_preserved_type_1, exception_preserved_value_1, exception_preserved_tb_1 );
    // Re-raise.
    exception_type = exception_keeper_type_2;
    exception_value = exception_keeper_value_2;
    exception_tb = exception_keeper_tb_2;
    exception_lineno = exception_keeper_lineno_2;

    goto try_except_handler_3;
    // End of try:
    try_end_1:;
    // Restore previous exception.
    SET_CURRENT_EXCEPTION( exception_preserved_type_1, exception_preserved_value_1, exception_preserved_tb_1 );
    goto try_end_2;
    // exception handler codes exits in all cases
    NUITKA_CANNOT_GET_HERE( plistlib$$$function_2_readPlist );
    return NULL;
    // End of try:
    try_end_2:;
    goto try_end_3;
    // Return handler code:
    try_return_handler_3:;
    {
        PyObject *tmp_called_name_6;
        PyObject *tmp_call_result_2;
        CHECK_OBJECT( tmp_with_1__exit );
        tmp_called_name_6 = tmp_with_1__exit;
        frame_f2d824099d637e3632344b6ab8f1be45->m_frame.f_lineno = 99;
        tmp_call_result_2 = CALL_FUNCTION_WITH_ARGS3( tmp_called_name_6, &PyTuple_GET_ITEM( const_tuple_none_none_none_tuple, 0 ) );

        if ( tmp_call_result_2 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 99;
            type_description_1 = "oo";
            goto try_except_handler_2;
        }
        Py_DECREF( tmp_call_result_2 );
    }
    goto try_return_handler_2;
    // Exception handler code:
    try_except_handler_3:;
    exception_keeper_type_3 = exception_type;
    exception_keeper_value_3 = exception_value;
    exception_keeper_tb_3 = exception_tb;
    exception_keeper_lineno_3 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    {
        nuitka_bool tmp_condition_result_3;
        nuitka_bool tmp_compexpr_left_2;
        nuitka_bool tmp_compexpr_right_2;
        assert( tmp_with_1__indicator != NUITKA_BOOL_UNASSIGNED);
        tmp_compexpr_left_2 = tmp_with_1__indicator;
        tmp_compexpr_right_2 = NUITKA_BOOL_TRUE;
        tmp_condition_result_3 = ( tmp_compexpr_left_2 == tmp_compexpr_right_2 ) ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
        if ( tmp_condition_result_3 == NUITKA_BOOL_TRUE )
        {
            goto branch_yes_3;
        }
        else
        {
            goto branch_no_3;
        }
        branch_yes_3:;
        {
            PyObject *tmp_called_name_7;
            PyObject *tmp_call_result_3;
            CHECK_OBJECT( tmp_with_1__exit );
            tmp_called_name_7 = tmp_with_1__exit;
            frame_f2d824099d637e3632344b6ab8f1be45->m_frame.f_lineno = 99;
            tmp_call_result_3 = CALL_FUNCTION_WITH_ARGS3( tmp_called_name_7, &PyTuple_GET_ITEM( const_tuple_none_none_none_tuple, 0 ) );

            if ( tmp_call_result_3 == NULL )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );

                Py_DECREF( exception_keeper_type_3 );
                Py_XDECREF( exception_keeper_value_3 );
                Py_XDECREF( exception_keeper_tb_3 );

                exception_lineno = 99;
                type_description_1 = "oo";
                goto try_except_handler_2;
            }
            Py_DECREF( tmp_call_result_3 );
        }
        branch_no_3:;
    }
    // Re-raise.
    exception_type = exception_keeper_type_3;
    exception_value = exception_keeper_value_3;
    exception_tb = exception_keeper_tb_3;
    exception_lineno = exception_keeper_lineno_3;

    goto try_except_handler_2;
    // End of try:
    try_end_3:;
    {
        nuitka_bool tmp_condition_result_4;
        nuitka_bool tmp_compexpr_left_3;
        nuitka_bool tmp_compexpr_right_3;
        assert( tmp_with_1__indicator != NUITKA_BOOL_UNASSIGNED);
        tmp_compexpr_left_3 = tmp_with_1__indicator;
        tmp_compexpr_right_3 = NUITKA_BOOL_TRUE;
        tmp_condition_result_4 = ( tmp_compexpr_left_3 == tmp_compexpr_right_3 ) ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
        if ( tmp_condition_result_4 == NUITKA_BOOL_TRUE )
        {
            goto branch_yes_4;
        }
        else
        {
            goto branch_no_4;
        }
        branch_yes_4:;
        {
            PyObject *tmp_called_name_8;
            PyObject *tmp_call_result_4;
            CHECK_OBJECT( tmp_with_1__exit );
            tmp_called_name_8 = tmp_with_1__exit;
            frame_f2d824099d637e3632344b6ab8f1be45->m_frame.f_lineno = 99;
            tmp_call_result_4 = CALL_FUNCTION_WITH_ARGS3( tmp_called_name_8, &PyTuple_GET_ITEM( const_tuple_none_none_none_tuple, 0 ) );

            if ( tmp_call_result_4 == NULL )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 99;
                type_description_1 = "oo";
                goto try_except_handler_2;
            }
            Py_DECREF( tmp_call_result_4 );
        }
        branch_no_4:;
    }
    goto try_end_4;
    // Return handler code:
    try_return_handler_2:;
    CHECK_OBJECT( (PyObject *)tmp_with_1__source );
    Py_DECREF( tmp_with_1__source );
    tmp_with_1__source = NULL;

    CHECK_OBJECT( (PyObject *)tmp_with_1__enter );
    Py_DECREF( tmp_with_1__enter );
    tmp_with_1__enter = NULL;

    CHECK_OBJECT( (PyObject *)tmp_with_1__exit );
    Py_DECREF( tmp_with_1__exit );
    tmp_with_1__exit = NULL;

    goto frame_return_exit_1;
    // Exception handler code:
    try_except_handler_2:;
    exception_keeper_type_4 = exception_type;
    exception_keeper_value_4 = exception_value;
    exception_keeper_tb_4 = exception_tb;
    exception_keeper_lineno_4 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    Py_XDECREF( tmp_with_1__source );
    tmp_with_1__source = NULL;

    Py_XDECREF( tmp_with_1__enter );
    tmp_with_1__enter = NULL;

    Py_XDECREF( tmp_with_1__exit );
    tmp_with_1__exit = NULL;

    // Re-raise.
    exception_type = exception_keeper_type_4;
    exception_value = exception_keeper_value_4;
    exception_tb = exception_keeper_tb_4;
    exception_lineno = exception_keeper_lineno_4;

    goto frame_exception_exit_1;
    // End of try:
    try_end_4:;

#if 0
    RESTORE_FRAME_EXCEPTION( frame_f2d824099d637e3632344b6ab8f1be45 );
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto frame_no_exception_1;

    frame_return_exit_1:;
#if 0
    RESTORE_FRAME_EXCEPTION( frame_f2d824099d637e3632344b6ab8f1be45 );
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto try_return_handler_1;

    frame_exception_exit_1:;

#if 0
    RESTORE_FRAME_EXCEPTION( frame_f2d824099d637e3632344b6ab8f1be45 );
#endif

    if ( exception_tb == NULL )
    {
        exception_tb = MAKE_TRACEBACK( frame_f2d824099d637e3632344b6ab8f1be45, exception_lineno );
    }
    else if ( exception_tb->tb_frame != &frame_f2d824099d637e3632344b6ab8f1be45->m_frame )
    {
        exception_tb = ADD_TRACEBACK( exception_tb, frame_f2d824099d637e3632344b6ab8f1be45, exception_lineno );
    }

    // Attachs locals to frame if any.
    Nuitka_Frame_AttachLocals(
        (struct Nuitka_FrameObject *)frame_f2d824099d637e3632344b6ab8f1be45,
        type_description_1,
        par_pathOrFile,
        var_fp
    );


    // Release cached frame.
    if ( frame_f2d824099d637e3632344b6ab8f1be45 == cache_frame_f2d824099d637e3632344b6ab8f1be45 )
    {
        Py_DECREF( frame_f2d824099d637e3632344b6ab8f1be45 );
    }
    cache_frame_f2d824099d637e3632344b6ab8f1be45 = NULL;

    assertFrameObject( frame_f2d824099d637e3632344b6ab8f1be45 );

    // Put the previous frame back on top.
    popFrameStack();

    // Return the error.
    goto try_except_handler_1;

    frame_no_exception_1:;
    CHECK_OBJECT( (PyObject *)tmp_with_1__source );
    Py_DECREF( tmp_with_1__source );
    tmp_with_1__source = NULL;

    CHECK_OBJECT( (PyObject *)tmp_with_1__enter );
    Py_DECREF( tmp_with_1__enter );
    tmp_with_1__enter = NULL;

    CHECK_OBJECT( (PyObject *)tmp_with_1__exit );
    Py_DECREF( tmp_with_1__exit );
    tmp_with_1__exit = NULL;

    tmp_return_value = Py_None;
    Py_INCREF( tmp_return_value );
    goto try_return_handler_1;
    // tried codes exits in all cases
    NUITKA_CANNOT_GET_HERE( plistlib$$$function_2_readPlist );
    return NULL;
    // Return handler code:
    try_return_handler_1:;
    CHECK_OBJECT( (PyObject *)par_pathOrFile );
    Py_DECREF( par_pathOrFile );
    par_pathOrFile = NULL;

    CHECK_OBJECT( (PyObject *)var_fp );
    Py_DECREF( var_fp );
    var_fp = NULL;

    goto function_return_exit;
    // Exception handler code:
    try_except_handler_1:;
    exception_keeper_type_5 = exception_type;
    exception_keeper_value_5 = exception_value;
    exception_keeper_tb_5 = exception_tb;
    exception_keeper_lineno_5 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    CHECK_OBJECT( (PyObject *)par_pathOrFile );
    Py_DECREF( par_pathOrFile );
    par_pathOrFile = NULL;

    Py_XDECREF( var_fp );
    var_fp = NULL;

    // Re-raise.
    exception_type = exception_keeper_type_5;
    exception_value = exception_keeper_value_5;
    exception_tb = exception_keeper_tb_5;
    exception_lineno = exception_keeper_lineno_5;

    goto function_exception_exit;
    // End of try:

    // Return statement must have exited already.
    NUITKA_CANNOT_GET_HERE( plistlib$$$function_2_readPlist );
    return NULL;

function_exception_exit:
    assert( exception_type );
    RESTORE_ERROR_OCCURRED( exception_type, exception_value, exception_tb );

    return NULL;

function_return_exit:
   // Function cleanup code if any.


   // Actual function exit with return value, making sure we did not make
   // the error status worse despite non-NULL return.
   CHECK_OBJECT( tmp_return_value );
   assert( had_error || !ERROR_OCCURRED() );
   return tmp_return_value;
}


static PyObject *impl_plistlib$$$function_3_writePlist( struct Nuitka_FunctionObject const *self, PyObject **python_pars )
{
    // Preserve error status for checks
#ifndef __NUITKA_NO_ASSERT__
    NUITKA_MAY_BE_UNUSED bool had_error = ERROR_OCCURRED();
#endif

    // Local variable declarations.
    PyObject *par_value = python_pars[ 0 ];
    PyObject *par_pathOrFile = python_pars[ 1 ];
    PyObject *var_fp = NULL;
    PyObject *tmp_with_1__enter = NULL;
    PyObject *tmp_with_1__exit = NULL;
    nuitka_bool tmp_with_1__indicator = NUITKA_BOOL_UNASSIGNED;
    PyObject *tmp_with_1__source = NULL;
    struct Nuitka_FrameObject *frame_d5b82ebdfff3fa51cb1a9d07ee878447;
    NUITKA_MAY_BE_UNUSED char const *type_description_1 = NULL;
    PyObject *exception_type = NULL;
    PyObject *exception_value = NULL;
    PyTracebackObject *exception_tb = NULL;
    NUITKA_MAY_BE_UNUSED int exception_lineno = 0;
    int tmp_res;
    PyObject *exception_keeper_type_1;
    PyObject *exception_keeper_value_1;
    PyTracebackObject *exception_keeper_tb_1;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_1;
    PyObject *exception_preserved_type_1;
    PyObject *exception_preserved_value_1;
    PyTracebackObject *exception_preserved_tb_1;
    bool tmp_result;
    PyObject *exception_keeper_type_2;
    PyObject *exception_keeper_value_2;
    PyTracebackObject *exception_keeper_tb_2;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_2;
    PyObject *exception_keeper_type_3;
    PyObject *exception_keeper_value_3;
    PyTracebackObject *exception_keeper_tb_3;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_3;
    PyObject *exception_keeper_type_4;
    PyObject *exception_keeper_value_4;
    PyTracebackObject *exception_keeper_tb_4;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_4;
    static struct Nuitka_FrameObject *cache_frame_d5b82ebdfff3fa51cb1a9d07ee878447 = NULL;
    PyObject *tmp_return_value = NULL;
    PyObject *exception_keeper_type_5;
    PyObject *exception_keeper_value_5;
    PyTracebackObject *exception_keeper_tb_5;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_5;

    // Actual function body.
    // Tried code:
    MAKE_OR_REUSE_FRAME( cache_frame_d5b82ebdfff3fa51cb1a9d07ee878447, codeobj_d5b82ebdfff3fa51cb1a9d07ee878447, module_plistlib, sizeof(void *)+sizeof(void *)+sizeof(void *) );
    frame_d5b82ebdfff3fa51cb1a9d07ee878447 = cache_frame_d5b82ebdfff3fa51cb1a9d07ee878447;

    // Push the new frame as the currently active one.
    pushFrameStack( frame_d5b82ebdfff3fa51cb1a9d07ee878447 );

    // Mark the frame object as in use, ref count 1 will be up for reuse.
    assert( Py_REFCNT( frame_d5b82ebdfff3fa51cb1a9d07ee878447 ) == 2 ); // Frame stack

    // Framed code:
    {
        PyObject *tmp_called_name_1;
        PyObject *tmp_mvar_value_1;
        PyObject *tmp_call_result_1;
        PyObject *tmp_args_element_name_1;
        PyObject *tmp_args_element_name_2;
        PyObject *tmp_mvar_value_2;
        PyObject *tmp_args_element_name_3;
        tmp_mvar_value_1 = GET_STRING_DICT_VALUE( moduledict_plistlib, (Nuitka_StringObject *)const_str_plain_warn );

        if (unlikely( tmp_mvar_value_1 == NULL ))
        {
            tmp_mvar_value_1 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_warn );
        }

        if ( tmp_mvar_value_1 == NULL )
        {

            exception_type = PyExc_NameError;
            Py_INCREF( exception_type );
            exception_value = PyUnicode_FromFormat( "name '%s' is not defined", "warn" );
            exception_tb = NULL;
            NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
            CHAIN_EXCEPTION( exception_value );

            exception_lineno = 109;
            type_description_1 = "ooo";
            goto frame_exception_exit_1;
        }

        tmp_called_name_1 = tmp_mvar_value_1;
        tmp_args_element_name_1 = const_str_digest_e8b5b617841013b69c2195852fb55e5f;
        tmp_mvar_value_2 = GET_STRING_DICT_VALUE( moduledict_plistlib, (Nuitka_StringObject *)const_str_plain_DeprecationWarning );

        if (unlikely( tmp_mvar_value_2 == NULL ))
        {
            tmp_mvar_value_2 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_DeprecationWarning );
        }

        if ( tmp_mvar_value_2 == NULL )
        {

            exception_type = PyExc_NameError;
            Py_INCREF( exception_type );
            exception_value = PyUnicode_FromFormat( "name '%s' is not defined", "DeprecationWarning" );
            exception_tb = NULL;
            NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
            CHAIN_EXCEPTION( exception_value );

            exception_lineno = 110;
            type_description_1 = "ooo";
            goto frame_exception_exit_1;
        }

        tmp_args_element_name_2 = tmp_mvar_value_2;
        tmp_args_element_name_3 = const_int_pos_2;
        frame_d5b82ebdfff3fa51cb1a9d07ee878447->m_frame.f_lineno = 109;
        {
            PyObject *call_args[] = { tmp_args_element_name_1, tmp_args_element_name_2, tmp_args_element_name_3 };
            tmp_call_result_1 = CALL_FUNCTION_WITH_ARGS3( tmp_called_name_1, call_args );
        }

        if ( tmp_call_result_1 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 109;
            type_description_1 = "ooo";
            goto frame_exception_exit_1;
        }
        Py_DECREF( tmp_call_result_1 );
    }
    // Tried code:
    {
        PyObject *tmp_assign_source_1;
        PyObject *tmp_called_name_2;
        PyObject *tmp_mvar_value_3;
        PyObject *tmp_args_element_name_4;
        PyObject *tmp_args_element_name_5;
        tmp_mvar_value_3 = GET_STRING_DICT_VALUE( moduledict_plistlib, (Nuitka_StringObject *)const_str_plain__maybe_open );

        if (unlikely( tmp_mvar_value_3 == NULL ))
        {
            tmp_mvar_value_3 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain__maybe_open );
        }

        if ( tmp_mvar_value_3 == NULL )
        {

            exception_type = PyExc_NameError;
            Py_INCREF( exception_type );
            exception_value = PyUnicode_FromFormat( "name '%s' is not defined", "_maybe_open" );
            exception_tb = NULL;
            NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
            CHAIN_EXCEPTION( exception_value );

            exception_lineno = 111;
            type_description_1 = "ooo";
            goto try_except_handler_2;
        }

        tmp_called_name_2 = tmp_mvar_value_3;
        CHECK_OBJECT( par_pathOrFile );
        tmp_args_element_name_4 = par_pathOrFile;
        tmp_args_element_name_5 = const_str_plain_wb;
        frame_d5b82ebdfff3fa51cb1a9d07ee878447->m_frame.f_lineno = 111;
        {
            PyObject *call_args[] = { tmp_args_element_name_4, tmp_args_element_name_5 };
            tmp_assign_source_1 = CALL_FUNCTION_WITH_ARGS2( tmp_called_name_2, call_args );
        }

        if ( tmp_assign_source_1 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 111;
            type_description_1 = "ooo";
            goto try_except_handler_2;
        }
        assert( tmp_with_1__source == NULL );
        tmp_with_1__source = tmp_assign_source_1;
    }
    {
        PyObject *tmp_assign_source_2;
        PyObject *tmp_called_name_3;
        PyObject *tmp_source_name_1;
        CHECK_OBJECT( tmp_with_1__source );
        tmp_source_name_1 = tmp_with_1__source;
        tmp_called_name_3 = LOOKUP_SPECIAL( tmp_source_name_1, const_str_plain___enter__ );
        if ( tmp_called_name_3 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 111;
            type_description_1 = "ooo";
            goto try_except_handler_2;
        }
        frame_d5b82ebdfff3fa51cb1a9d07ee878447->m_frame.f_lineno = 111;
        tmp_assign_source_2 = CALL_FUNCTION_NO_ARGS( tmp_called_name_3 );
        Py_DECREF( tmp_called_name_3 );
        if ( tmp_assign_source_2 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 111;
            type_description_1 = "ooo";
            goto try_except_handler_2;
        }
        assert( tmp_with_1__enter == NULL );
        tmp_with_1__enter = tmp_assign_source_2;
    }
    {
        PyObject *tmp_assign_source_3;
        PyObject *tmp_source_name_2;
        CHECK_OBJECT( tmp_with_1__source );
        tmp_source_name_2 = tmp_with_1__source;
        tmp_assign_source_3 = LOOKUP_SPECIAL( tmp_source_name_2, const_str_plain___exit__ );
        if ( tmp_assign_source_3 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 111;
            type_description_1 = "ooo";
            goto try_except_handler_2;
        }
        assert( tmp_with_1__exit == NULL );
        tmp_with_1__exit = tmp_assign_source_3;
    }
    {
        nuitka_bool tmp_assign_source_4;
        tmp_assign_source_4 = NUITKA_BOOL_TRUE;
        tmp_with_1__indicator = tmp_assign_source_4;
    }
    {
        PyObject *tmp_assign_source_5;
        CHECK_OBJECT( tmp_with_1__enter );
        tmp_assign_source_5 = tmp_with_1__enter;
        assert( var_fp == NULL );
        Py_INCREF( tmp_assign_source_5 );
        var_fp = tmp_assign_source_5;
    }
    // Tried code:
    // Tried code:
    {
        PyObject *tmp_called_name_4;
        PyObject *tmp_mvar_value_4;
        PyObject *tmp_call_result_2;
        PyObject *tmp_args_name_1;
        PyObject *tmp_tuple_element_1;
        PyObject *tmp_kw_name_1;
        PyObject *tmp_dict_key_1;
        PyObject *tmp_dict_value_1;
        PyObject *tmp_mvar_value_5;
        PyObject *tmp_dict_key_2;
        PyObject *tmp_dict_value_2;
        PyObject *tmp_dict_key_3;
        PyObject *tmp_dict_value_3;
        tmp_mvar_value_4 = GET_STRING_DICT_VALUE( moduledict_plistlib, (Nuitka_StringObject *)const_str_plain_dump );

        if (unlikely( tmp_mvar_value_4 == NULL ))
        {
            tmp_mvar_value_4 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_dump );
        }

        if ( tmp_mvar_value_4 == NULL )
        {

            exception_type = PyExc_NameError;
            Py_INCREF( exception_type );
            exception_value = PyUnicode_FromFormat( "name '%s' is not defined", "dump" );
            exception_tb = NULL;
            NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
            CHAIN_EXCEPTION( exception_value );

            exception_lineno = 112;
            type_description_1 = "ooo";
            goto try_except_handler_4;
        }

        tmp_called_name_4 = tmp_mvar_value_4;
        CHECK_OBJECT( par_value );
        tmp_tuple_element_1 = par_value;
        tmp_args_name_1 = PyTuple_New( 2 );
        Py_INCREF( tmp_tuple_element_1 );
        PyTuple_SET_ITEM( tmp_args_name_1, 0, tmp_tuple_element_1 );
        CHECK_OBJECT( var_fp );
        tmp_tuple_element_1 = var_fp;
        Py_INCREF( tmp_tuple_element_1 );
        PyTuple_SET_ITEM( tmp_args_name_1, 1, tmp_tuple_element_1 );
        tmp_dict_key_1 = const_str_plain_fmt;
        tmp_mvar_value_5 = GET_STRING_DICT_VALUE( moduledict_plistlib, (Nuitka_StringObject *)const_str_plain_FMT_XML );

        if (unlikely( tmp_mvar_value_5 == NULL ))
        {
            tmp_mvar_value_5 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_FMT_XML );
        }

        if ( tmp_mvar_value_5 == NULL )
        {
            Py_DECREF( tmp_args_name_1 );
            exception_type = PyExc_NameError;
            Py_INCREF( exception_type );
            exception_value = PyUnicode_FromFormat( "name '%s' is not defined", "FMT_XML" );
            exception_tb = NULL;
            NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
            CHAIN_EXCEPTION( exception_value );

            exception_lineno = 112;
            type_description_1 = "ooo";
            goto try_except_handler_4;
        }

        tmp_dict_value_1 = tmp_mvar_value_5;
        tmp_kw_name_1 = _PyDict_NewPresized( 3 );
        tmp_res = PyDict_SetItem( tmp_kw_name_1, tmp_dict_key_1, tmp_dict_value_1 );
        assert( !(tmp_res != 0) );
        tmp_dict_key_2 = const_str_plain_sort_keys;
        tmp_dict_value_2 = Py_True;
        tmp_res = PyDict_SetItem( tmp_kw_name_1, tmp_dict_key_2, tmp_dict_value_2 );
        assert( !(tmp_res != 0) );
        tmp_dict_key_3 = const_str_plain_skipkeys;
        tmp_dict_value_3 = Py_False;
        tmp_res = PyDict_SetItem( tmp_kw_name_1, tmp_dict_key_3, tmp_dict_value_3 );
        assert( !(tmp_res != 0) );
        frame_d5b82ebdfff3fa51cb1a9d07ee878447->m_frame.f_lineno = 112;
        tmp_call_result_2 = CALL_FUNCTION( tmp_called_name_4, tmp_args_name_1, tmp_kw_name_1 );
        Py_DECREF( tmp_args_name_1 );
        Py_DECREF( tmp_kw_name_1 );
        if ( tmp_call_result_2 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 112;
            type_description_1 = "ooo";
            goto try_except_handler_4;
        }
        Py_DECREF( tmp_call_result_2 );
    }
    goto try_end_1;
    // Exception handler code:
    try_except_handler_4:;
    exception_keeper_type_1 = exception_type;
    exception_keeper_value_1 = exception_value;
    exception_keeper_tb_1 = exception_tb;
    exception_keeper_lineno_1 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    // Preserve existing published exception.
    exception_preserved_type_1 = EXC_TYPE(PyThreadState_GET());
    Py_XINCREF( exception_preserved_type_1 );
    exception_preserved_value_1 = EXC_VALUE(PyThreadState_GET());
    Py_XINCREF( exception_preserved_value_1 );
    exception_preserved_tb_1 = (PyTracebackObject *)EXC_TRACEBACK(PyThreadState_GET());
    Py_XINCREF( exception_preserved_tb_1 );

    if ( exception_keeper_tb_1 == NULL )
    {
        exception_keeper_tb_1 = MAKE_TRACEBACK( frame_d5b82ebdfff3fa51cb1a9d07ee878447, exception_keeper_lineno_1 );
    }
    else if ( exception_keeper_lineno_1 != 0 )
    {
        exception_keeper_tb_1 = ADD_TRACEBACK( exception_keeper_tb_1, frame_d5b82ebdfff3fa51cb1a9d07ee878447, exception_keeper_lineno_1 );
    }

    NORMALIZE_EXCEPTION( &exception_keeper_type_1, &exception_keeper_value_1, &exception_keeper_tb_1 );
    PyException_SetTraceback( exception_keeper_value_1, (PyObject *)exception_keeper_tb_1 );
    PUBLISH_EXCEPTION( &exception_keeper_type_1, &exception_keeper_value_1, &exception_keeper_tb_1 );
    // Tried code:
    {
        nuitka_bool tmp_condition_result_1;
        PyObject *tmp_compexpr_left_1;
        PyObject *tmp_compexpr_right_1;
        tmp_compexpr_left_1 = EXC_TYPE(PyThreadState_GET());
        tmp_compexpr_right_1 = PyExc_BaseException;
        tmp_res = EXCEPTION_MATCH_BOOL( tmp_compexpr_left_1, tmp_compexpr_right_1 );
        if ( tmp_res == -1 )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 111;
            type_description_1 = "ooo";
            goto try_except_handler_5;
        }
        tmp_condition_result_1 = ( tmp_res != 0 ) ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
        if ( tmp_condition_result_1 == NUITKA_BOOL_TRUE )
        {
            goto branch_yes_1;
        }
        else
        {
            goto branch_no_1;
        }
        branch_yes_1:;
        {
            nuitka_bool tmp_assign_source_6;
            tmp_assign_source_6 = NUITKA_BOOL_FALSE;
            tmp_with_1__indicator = tmp_assign_source_6;
        }
        {
            nuitka_bool tmp_condition_result_2;
            PyObject *tmp_operand_name_1;
            PyObject *tmp_called_name_5;
            PyObject *tmp_args_element_name_6;
            PyObject *tmp_args_element_name_7;
            PyObject *tmp_args_element_name_8;
            CHECK_OBJECT( tmp_with_1__exit );
            tmp_called_name_5 = tmp_with_1__exit;
            tmp_args_element_name_6 = EXC_TYPE(PyThreadState_GET());
            tmp_args_element_name_7 = EXC_VALUE(PyThreadState_GET());
            tmp_args_element_name_8 = EXC_TRACEBACK(PyThreadState_GET());
            frame_d5b82ebdfff3fa51cb1a9d07ee878447->m_frame.f_lineno = 111;
            {
                PyObject *call_args[] = { tmp_args_element_name_6, tmp_args_element_name_7, tmp_args_element_name_8 };
                tmp_operand_name_1 = CALL_FUNCTION_WITH_ARGS3( tmp_called_name_5, call_args );
            }

            if ( tmp_operand_name_1 == NULL )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 111;
                type_description_1 = "ooo";
                goto try_except_handler_5;
            }
            tmp_res = CHECK_IF_TRUE( tmp_operand_name_1 );
            Py_DECREF( tmp_operand_name_1 );
            if ( tmp_res == -1 )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 111;
                type_description_1 = "ooo";
                goto try_except_handler_5;
            }
            tmp_condition_result_2 = ( tmp_res == 0 ) ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
            if ( tmp_condition_result_2 == NUITKA_BOOL_TRUE )
            {
                goto branch_yes_2;
            }
            else
            {
                goto branch_no_2;
            }
            branch_yes_2:;
            tmp_result = RERAISE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
            if (unlikely( tmp_result == false ))
            {
                exception_lineno = 111;
            }

            if (exception_tb && exception_tb->tb_frame == &frame_d5b82ebdfff3fa51cb1a9d07ee878447->m_frame) frame_d5b82ebdfff3fa51cb1a9d07ee878447->m_frame.f_lineno = exception_tb->tb_lineno;
            type_description_1 = "ooo";
            goto try_except_handler_5;
            branch_no_2:;
        }
        goto branch_end_1;
        branch_no_1:;
        tmp_result = RERAISE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
        if (unlikely( tmp_result == false ))
        {
            exception_lineno = 111;
        }

        if (exception_tb && exception_tb->tb_frame == &frame_d5b82ebdfff3fa51cb1a9d07ee878447->m_frame) frame_d5b82ebdfff3fa51cb1a9d07ee878447->m_frame.f_lineno = exception_tb->tb_lineno;
        type_description_1 = "ooo";
        goto try_except_handler_5;
        branch_end_1:;
    }
    goto try_end_2;
    // Exception handler code:
    try_except_handler_5:;
    exception_keeper_type_2 = exception_type;
    exception_keeper_value_2 = exception_value;
    exception_keeper_tb_2 = exception_tb;
    exception_keeper_lineno_2 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    // Restore previous exception.
    SET_CURRENT_EXCEPTION( exception_preserved_type_1, exception_preserved_value_1, exception_preserved_tb_1 );
    // Re-raise.
    exception_type = exception_keeper_type_2;
    exception_value = exception_keeper_value_2;
    exception_tb = exception_keeper_tb_2;
    exception_lineno = exception_keeper_lineno_2;

    goto try_except_handler_3;
    // End of try:
    try_end_2:;
    // Restore previous exception.
    SET_CURRENT_EXCEPTION( exception_preserved_type_1, exception_preserved_value_1, exception_preserved_tb_1 );
    goto try_end_1;
    // exception handler codes exits in all cases
    NUITKA_CANNOT_GET_HERE( plistlib$$$function_3_writePlist );
    return NULL;
    // End of try:
    try_end_1:;
    goto try_end_3;
    // Exception handler code:
    try_except_handler_3:;
    exception_keeper_type_3 = exception_type;
    exception_keeper_value_3 = exception_value;
    exception_keeper_tb_3 = exception_tb;
    exception_keeper_lineno_3 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    {
        nuitka_bool tmp_condition_result_3;
        nuitka_bool tmp_compexpr_left_2;
        nuitka_bool tmp_compexpr_right_2;
        assert( tmp_with_1__indicator != NUITKA_BOOL_UNASSIGNED);
        tmp_compexpr_left_2 = tmp_with_1__indicator;
        tmp_compexpr_right_2 = NUITKA_BOOL_TRUE;
        tmp_condition_result_3 = ( tmp_compexpr_left_2 == tmp_compexpr_right_2 ) ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
        if ( tmp_condition_result_3 == NUITKA_BOOL_TRUE )
        {
            goto branch_yes_3;
        }
        else
        {
            goto branch_no_3;
        }
        branch_yes_3:;
        {
            PyObject *tmp_called_name_6;
            PyObject *tmp_call_result_3;
            CHECK_OBJECT( tmp_with_1__exit );
            tmp_called_name_6 = tmp_with_1__exit;
            frame_d5b82ebdfff3fa51cb1a9d07ee878447->m_frame.f_lineno = 111;
            tmp_call_result_3 = CALL_FUNCTION_WITH_ARGS3( tmp_called_name_6, &PyTuple_GET_ITEM( const_tuple_none_none_none_tuple, 0 ) );

            if ( tmp_call_result_3 == NULL )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );

                Py_DECREF( exception_keeper_type_3 );
                Py_XDECREF( exception_keeper_value_3 );
                Py_XDECREF( exception_keeper_tb_3 );

                exception_lineno = 111;
                type_description_1 = "ooo";
                goto try_except_handler_2;
            }
            Py_DECREF( tmp_call_result_3 );
        }
        branch_no_3:;
    }
    // Re-raise.
    exception_type = exception_keeper_type_3;
    exception_value = exception_keeper_value_3;
    exception_tb = exception_keeper_tb_3;
    exception_lineno = exception_keeper_lineno_3;

    goto try_except_handler_2;
    // End of try:
    try_end_3:;
    {
        nuitka_bool tmp_condition_result_4;
        nuitka_bool tmp_compexpr_left_3;
        nuitka_bool tmp_compexpr_right_3;
        assert( tmp_with_1__indicator != NUITKA_BOOL_UNASSIGNED);
        tmp_compexpr_left_3 = tmp_with_1__indicator;
        tmp_compexpr_right_3 = NUITKA_BOOL_TRUE;
        tmp_condition_result_4 = ( tmp_compexpr_left_3 == tmp_compexpr_right_3 ) ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
        if ( tmp_condition_result_4 == NUITKA_BOOL_TRUE )
        {
            goto branch_yes_4;
        }
        else
        {
            goto branch_no_4;
        }
        branch_yes_4:;
        {
            PyObject *tmp_called_name_7;
            PyObject *tmp_call_result_4;
            CHECK_OBJECT( tmp_with_1__exit );
            tmp_called_name_7 = tmp_with_1__exit;
            frame_d5b82ebdfff3fa51cb1a9d07ee878447->m_frame.f_lineno = 111;
            tmp_call_result_4 = CALL_FUNCTION_WITH_ARGS3( tmp_called_name_7, &PyTuple_GET_ITEM( const_tuple_none_none_none_tuple, 0 ) );

            if ( tmp_call_result_4 == NULL )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 111;
                type_description_1 = "ooo";
                goto try_except_handler_2;
            }
            Py_DECREF( tmp_call_result_4 );
        }
        branch_no_4:;
    }
    goto try_end_4;
    // Exception handler code:
    try_except_handler_2:;
    exception_keeper_type_4 = exception_type;
    exception_keeper_value_4 = exception_value;
    exception_keeper_tb_4 = exception_tb;
    exception_keeper_lineno_4 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    Py_XDECREF( tmp_with_1__source );
    tmp_with_1__source = NULL;

    Py_XDECREF( tmp_with_1__enter );
    tmp_with_1__enter = NULL;

    Py_XDECREF( tmp_with_1__exit );
    tmp_with_1__exit = NULL;

    // Re-raise.
    exception_type = exception_keeper_type_4;
    exception_value = exception_keeper_value_4;
    exception_tb = exception_keeper_tb_4;
    exception_lineno = exception_keeper_lineno_4;

    goto frame_exception_exit_1;
    // End of try:
    try_end_4:;

#if 0
    RESTORE_FRAME_EXCEPTION( frame_d5b82ebdfff3fa51cb1a9d07ee878447 );
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto frame_no_exception_1;

    frame_exception_exit_1:;

#if 0
    RESTORE_FRAME_EXCEPTION( frame_d5b82ebdfff3fa51cb1a9d07ee878447 );
#endif

    if ( exception_tb == NULL )
    {
        exception_tb = MAKE_TRACEBACK( frame_d5b82ebdfff3fa51cb1a9d07ee878447, exception_lineno );
    }
    else if ( exception_tb->tb_frame != &frame_d5b82ebdfff3fa51cb1a9d07ee878447->m_frame )
    {
        exception_tb = ADD_TRACEBACK( exception_tb, frame_d5b82ebdfff3fa51cb1a9d07ee878447, exception_lineno );
    }

    // Attachs locals to frame if any.
    Nuitka_Frame_AttachLocals(
        (struct Nuitka_FrameObject *)frame_d5b82ebdfff3fa51cb1a9d07ee878447,
        type_description_1,
        par_value,
        par_pathOrFile,
        var_fp
    );


    // Release cached frame.
    if ( frame_d5b82ebdfff3fa51cb1a9d07ee878447 == cache_frame_d5b82ebdfff3fa51cb1a9d07ee878447 )
    {
        Py_DECREF( frame_d5b82ebdfff3fa51cb1a9d07ee878447 );
    }
    cache_frame_d5b82ebdfff3fa51cb1a9d07ee878447 = NULL;

    assertFrameObject( frame_d5b82ebdfff3fa51cb1a9d07ee878447 );

    // Put the previous frame back on top.
    popFrameStack();

    // Return the error.
    goto try_except_handler_1;

    frame_no_exception_1:;
    CHECK_OBJECT( (PyObject *)tmp_with_1__source );
    Py_DECREF( tmp_with_1__source );
    tmp_with_1__source = NULL;

    CHECK_OBJECT( (PyObject *)tmp_with_1__enter );
    Py_DECREF( tmp_with_1__enter );
    tmp_with_1__enter = NULL;

    CHECK_OBJECT( (PyObject *)tmp_with_1__exit );
    Py_DECREF( tmp_with_1__exit );
    tmp_with_1__exit = NULL;

    tmp_return_value = Py_None;
    Py_INCREF( tmp_return_value );
    goto try_return_handler_1;
    // tried codes exits in all cases
    NUITKA_CANNOT_GET_HERE( plistlib$$$function_3_writePlist );
    return NULL;
    // Return handler code:
    try_return_handler_1:;
    CHECK_OBJECT( (PyObject *)par_value );
    Py_DECREF( par_value );
    par_value = NULL;

    CHECK_OBJECT( (PyObject *)par_pathOrFile );
    Py_DECREF( par_pathOrFile );
    par_pathOrFile = NULL;

    CHECK_OBJECT( (PyObject *)var_fp );
    Py_DECREF( var_fp );
    var_fp = NULL;

    goto function_return_exit;
    // Exception handler code:
    try_except_handler_1:;
    exception_keeper_type_5 = exception_type;
    exception_keeper_value_5 = exception_value;
    exception_keeper_tb_5 = exception_tb;
    exception_keeper_lineno_5 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    CHECK_OBJECT( (PyObject *)par_value );
    Py_DECREF( par_value );
    par_value = NULL;

    CHECK_OBJECT( (PyObject *)par_pathOrFile );
    Py_DECREF( par_pathOrFile );
    par_pathOrFile = NULL;

    Py_XDECREF( var_fp );
    var_fp = NULL;

    // Re-raise.
    exception_type = exception_keeper_type_5;
    exception_value = exception_keeper_value_5;
    exception_tb = exception_keeper_tb_5;
    exception_lineno = exception_keeper_lineno_5;

    goto function_exception_exit;
    // End of try:

    // Return statement must have exited already.
    NUITKA_CANNOT_GET_HERE( plistlib$$$function_3_writePlist );
    return NULL;

function_exception_exit:
    assert( exception_type );
    RESTORE_ERROR_OCCURRED( exception_type, exception_value, exception_tb );

    return NULL;

function_return_exit:
   // Function cleanup code if any.


   // Actual function exit with return value, making sure we did not make
   // the error status worse despite non-NULL return.
   CHECK_OBJECT( tmp_return_value );
   assert( had_error || !ERROR_OCCURRED() );
   return tmp_return_value;
}


static PyObject *impl_plistlib$$$function_4_readPlistFromBytes( struct Nuitka_FunctionObject const *self, PyObject **python_pars )
{
    // Preserve error status for checks
#ifndef __NUITKA_NO_ASSERT__
    NUITKA_MAY_BE_UNUSED bool had_error = ERROR_OCCURRED();
#endif

    // Local variable declarations.
    PyObject *par_data = python_pars[ 0 ];
    struct Nuitka_FrameObject *frame_f619f06bf75def1d2791a7f0bc383d26;
    NUITKA_MAY_BE_UNUSED char const *type_description_1 = NULL;
    PyObject *exception_type = NULL;
    PyObject *exception_value = NULL;
    PyTracebackObject *exception_tb = NULL;
    NUITKA_MAY_BE_UNUSED int exception_lineno = 0;
    PyObject *tmp_return_value = NULL;
    static struct Nuitka_FrameObject *cache_frame_f619f06bf75def1d2791a7f0bc383d26 = NULL;
    PyObject *exception_keeper_type_1;
    PyObject *exception_keeper_value_1;
    PyTracebackObject *exception_keeper_tb_1;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_1;

    // Actual function body.
    // Tried code:
    MAKE_OR_REUSE_FRAME( cache_frame_f619f06bf75def1d2791a7f0bc383d26, codeobj_f619f06bf75def1d2791a7f0bc383d26, module_plistlib, sizeof(void *) );
    frame_f619f06bf75def1d2791a7f0bc383d26 = cache_frame_f619f06bf75def1d2791a7f0bc383d26;

    // Push the new frame as the currently active one.
    pushFrameStack( frame_f619f06bf75def1d2791a7f0bc383d26 );

    // Mark the frame object as in use, ref count 1 will be up for reuse.
    assert( Py_REFCNT( frame_f619f06bf75def1d2791a7f0bc383d26 ) == 2 ); // Frame stack

    // Framed code:
    {
        PyObject *tmp_called_name_1;
        PyObject *tmp_mvar_value_1;
        PyObject *tmp_call_result_1;
        PyObject *tmp_args_element_name_1;
        PyObject *tmp_args_element_name_2;
        PyObject *tmp_mvar_value_2;
        PyObject *tmp_args_element_name_3;
        tmp_mvar_value_1 = GET_STRING_DICT_VALUE( moduledict_plistlib, (Nuitka_StringObject *)const_str_plain_warn );

        if (unlikely( tmp_mvar_value_1 == NULL ))
        {
            tmp_mvar_value_1 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_warn );
        }

        if ( tmp_mvar_value_1 == NULL )
        {

            exception_type = PyExc_NameError;
            Py_INCREF( exception_type );
            exception_value = PyUnicode_FromFormat( "name '%s' is not defined", "warn" );
            exception_tb = NULL;
            NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
            CHAIN_EXCEPTION( exception_value );

            exception_lineno = 121;
            type_description_1 = "o";
            goto frame_exception_exit_1;
        }

        tmp_called_name_1 = tmp_mvar_value_1;
        tmp_args_element_name_1 = const_str_digest_6f92f0376a7df9ac4b45fb00bb287e2e;
        tmp_mvar_value_2 = GET_STRING_DICT_VALUE( moduledict_plistlib, (Nuitka_StringObject *)const_str_plain_DeprecationWarning );

        if (unlikely( tmp_mvar_value_2 == NULL ))
        {
            tmp_mvar_value_2 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_DeprecationWarning );
        }

        if ( tmp_mvar_value_2 == NULL )
        {

            exception_type = PyExc_NameError;
            Py_INCREF( exception_type );
            exception_value = PyUnicode_FromFormat( "name '%s' is not defined", "DeprecationWarning" );
            exception_tb = NULL;
            NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
            CHAIN_EXCEPTION( exception_value );

            exception_lineno = 122;
            type_description_1 = "o";
            goto frame_exception_exit_1;
        }

        tmp_args_element_name_2 = tmp_mvar_value_2;
        tmp_args_element_name_3 = const_int_pos_2;
        frame_f619f06bf75def1d2791a7f0bc383d26->m_frame.f_lineno = 121;
        {
            PyObject *call_args[] = { tmp_args_element_name_1, tmp_args_element_name_2, tmp_args_element_name_3 };
            tmp_call_result_1 = CALL_FUNCTION_WITH_ARGS3( tmp_called_name_1, call_args );
        }

        if ( tmp_call_result_1 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 121;
            type_description_1 = "o";
            goto frame_exception_exit_1;
        }
        Py_DECREF( tmp_call_result_1 );
    }
    {
        PyObject *tmp_called_name_2;
        PyObject *tmp_mvar_value_3;
        PyObject *tmp_args_name_1;
        PyObject *tmp_tuple_element_1;
        PyObject *tmp_called_name_3;
        PyObject *tmp_mvar_value_4;
        PyObject *tmp_args_element_name_4;
        PyObject *tmp_kw_name_1;
        tmp_mvar_value_3 = GET_STRING_DICT_VALUE( moduledict_plistlib, (Nuitka_StringObject *)const_str_plain_load );

        if (unlikely( tmp_mvar_value_3 == NULL ))
        {
            tmp_mvar_value_3 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_load );
        }

        if ( tmp_mvar_value_3 == NULL )
        {

            exception_type = PyExc_NameError;
            Py_INCREF( exception_type );
            exception_value = PyUnicode_FromFormat( "name '%s' is not defined", "load" );
            exception_tb = NULL;
            NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
            CHAIN_EXCEPTION( exception_value );

            exception_lineno = 123;
            type_description_1 = "o";
            goto frame_exception_exit_1;
        }

        tmp_called_name_2 = tmp_mvar_value_3;
        tmp_mvar_value_4 = GET_STRING_DICT_VALUE( moduledict_plistlib, (Nuitka_StringObject *)const_str_plain_BytesIO );

        if (unlikely( tmp_mvar_value_4 == NULL ))
        {
            tmp_mvar_value_4 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_BytesIO );
        }

        if ( tmp_mvar_value_4 == NULL )
        {

            exception_type = PyExc_NameError;
            Py_INCREF( exception_type );
            exception_value = PyUnicode_FromFormat( "name '%s' is not defined", "BytesIO" );
            exception_tb = NULL;
            NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
            CHAIN_EXCEPTION( exception_value );

            exception_lineno = 123;
            type_description_1 = "o";
            goto frame_exception_exit_1;
        }

        tmp_called_name_3 = tmp_mvar_value_4;
        CHECK_OBJECT( par_data );
        tmp_args_element_name_4 = par_data;
        frame_f619f06bf75def1d2791a7f0bc383d26->m_frame.f_lineno = 123;
        {
            PyObject *call_args[] = { tmp_args_element_name_4 };
            tmp_tuple_element_1 = CALL_FUNCTION_WITH_ARGS1( tmp_called_name_3, call_args );
        }

        if ( tmp_tuple_element_1 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 123;
            type_description_1 = "o";
            goto frame_exception_exit_1;
        }
        tmp_args_name_1 = PyTuple_New( 1 );
        PyTuple_SET_ITEM( tmp_args_name_1, 0, tmp_tuple_element_1 );
        tmp_kw_name_1 = PyDict_Copy( const_dict_7611676ed95705a12123cc4968fd525a );
        frame_f619f06bf75def1d2791a7f0bc383d26->m_frame.f_lineno = 123;
        tmp_return_value = CALL_FUNCTION( tmp_called_name_2, tmp_args_name_1, tmp_kw_name_1 );
        Py_DECREF( tmp_args_name_1 );
        Py_DECREF( tmp_kw_name_1 );
        if ( tmp_return_value == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 123;
            type_description_1 = "o";
            goto frame_exception_exit_1;
        }
        goto frame_return_exit_1;
    }

#if 0
    RESTORE_FRAME_EXCEPTION( frame_f619f06bf75def1d2791a7f0bc383d26 );
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto frame_no_exception_1;

    frame_return_exit_1:;
#if 0
    RESTORE_FRAME_EXCEPTION( frame_f619f06bf75def1d2791a7f0bc383d26 );
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto try_return_handler_1;

    frame_exception_exit_1:;

#if 0
    RESTORE_FRAME_EXCEPTION( frame_f619f06bf75def1d2791a7f0bc383d26 );
#endif

    if ( exception_tb == NULL )
    {
        exception_tb = MAKE_TRACEBACK( frame_f619f06bf75def1d2791a7f0bc383d26, exception_lineno );
    }
    else if ( exception_tb->tb_frame != &frame_f619f06bf75def1d2791a7f0bc383d26->m_frame )
    {
        exception_tb = ADD_TRACEBACK( exception_tb, frame_f619f06bf75def1d2791a7f0bc383d26, exception_lineno );
    }

    // Attachs locals to frame if any.
    Nuitka_Frame_AttachLocals(
        (struct Nuitka_FrameObject *)frame_f619f06bf75def1d2791a7f0bc383d26,
        type_description_1,
        par_data
    );


    // Release cached frame.
    if ( frame_f619f06bf75def1d2791a7f0bc383d26 == cache_frame_f619f06bf75def1d2791a7f0bc383d26 )
    {
        Py_DECREF( frame_f619f06bf75def1d2791a7f0bc383d26 );
    }
    cache_frame_f619f06bf75def1d2791a7f0bc383d26 = NULL;

    assertFrameObject( frame_f619f06bf75def1d2791a7f0bc383d26 );

    // Put the previous frame back on top.
    popFrameStack();

    // Return the error.
    goto try_except_handler_1;

    frame_no_exception_1:;
    // tried codes exits in all cases
    NUITKA_CANNOT_GET_HERE( plistlib$$$function_4_readPlistFromBytes );
    return NULL;
    // Return handler code:
    try_return_handler_1:;
    CHECK_OBJECT( (PyObject *)par_data );
    Py_DECREF( par_data );
    par_data = NULL;

    goto function_return_exit;
    // Exception handler code:
    try_except_handler_1:;
    exception_keeper_type_1 = exception_type;
    exception_keeper_value_1 = exception_value;
    exception_keeper_tb_1 = exception_tb;
    exception_keeper_lineno_1 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    CHECK_OBJECT( (PyObject *)par_data );
    Py_DECREF( par_data );
    par_data = NULL;

    // Re-raise.
    exception_type = exception_keeper_type_1;
    exception_value = exception_keeper_value_1;
    exception_tb = exception_keeper_tb_1;
    exception_lineno = exception_keeper_lineno_1;

    goto function_exception_exit;
    // End of try:

    // Return statement must have exited already.
    NUITKA_CANNOT_GET_HERE( plistlib$$$function_4_readPlistFromBytes );
    return NULL;

function_exception_exit:
    assert( exception_type );
    RESTORE_ERROR_OCCURRED( exception_type, exception_value, exception_tb );

    return NULL;

function_return_exit:
   // Function cleanup code if any.


   // Actual function exit with return value, making sure we did not make
   // the error status worse despite non-NULL return.
   CHECK_OBJECT( tmp_return_value );
   assert( had_error || !ERROR_OCCURRED() );
   return tmp_return_value;
}


static PyObject *impl_plistlib$$$function_5_writePlistToBytes( struct Nuitka_FunctionObject const *self, PyObject **python_pars )
{
    // Preserve error status for checks
#ifndef __NUITKA_NO_ASSERT__
    NUITKA_MAY_BE_UNUSED bool had_error = ERROR_OCCURRED();
#endif

    // Local variable declarations.
    PyObject *par_value = python_pars[ 0 ];
    PyObject *var_f = NULL;
    struct Nuitka_FrameObject *frame_3e8551b09cd55b45e9d831e24972fa46;
    NUITKA_MAY_BE_UNUSED char const *type_description_1 = NULL;
    PyObject *exception_type = NULL;
    PyObject *exception_value = NULL;
    PyTracebackObject *exception_tb = NULL;
    NUITKA_MAY_BE_UNUSED int exception_lineno = 0;
    int tmp_res;
    PyObject *tmp_return_value = NULL;
    static struct Nuitka_FrameObject *cache_frame_3e8551b09cd55b45e9d831e24972fa46 = NULL;
    PyObject *exception_keeper_type_1;
    PyObject *exception_keeper_value_1;
    PyTracebackObject *exception_keeper_tb_1;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_1;

    // Actual function body.
    // Tried code:
    MAKE_OR_REUSE_FRAME( cache_frame_3e8551b09cd55b45e9d831e24972fa46, codeobj_3e8551b09cd55b45e9d831e24972fa46, module_plistlib, sizeof(void *)+sizeof(void *) );
    frame_3e8551b09cd55b45e9d831e24972fa46 = cache_frame_3e8551b09cd55b45e9d831e24972fa46;

    // Push the new frame as the currently active one.
    pushFrameStack( frame_3e8551b09cd55b45e9d831e24972fa46 );

    // Mark the frame object as in use, ref count 1 will be up for reuse.
    assert( Py_REFCNT( frame_3e8551b09cd55b45e9d831e24972fa46 ) == 2 ); // Frame stack

    // Framed code:
    {
        PyObject *tmp_called_name_1;
        PyObject *tmp_mvar_value_1;
        PyObject *tmp_call_result_1;
        PyObject *tmp_args_element_name_1;
        PyObject *tmp_args_element_name_2;
        PyObject *tmp_mvar_value_2;
        PyObject *tmp_args_element_name_3;
        tmp_mvar_value_1 = GET_STRING_DICT_VALUE( moduledict_plistlib, (Nuitka_StringObject *)const_str_plain_warn );

        if (unlikely( tmp_mvar_value_1 == NULL ))
        {
            tmp_mvar_value_1 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_warn );
        }

        if ( tmp_mvar_value_1 == NULL )
        {

            exception_type = PyExc_NameError;
            Py_INCREF( exception_type );
            exception_value = PyUnicode_FromFormat( "name '%s' is not defined", "warn" );
            exception_tb = NULL;
            NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
            CHAIN_EXCEPTION( exception_value );

            exception_lineno = 132;
            type_description_1 = "oo";
            goto frame_exception_exit_1;
        }

        tmp_called_name_1 = tmp_mvar_value_1;
        tmp_args_element_name_1 = const_str_digest_155a756f54744518395968bd831829a0;
        tmp_mvar_value_2 = GET_STRING_DICT_VALUE( moduledict_plistlib, (Nuitka_StringObject *)const_str_plain_DeprecationWarning );

        if (unlikely( tmp_mvar_value_2 == NULL ))
        {
            tmp_mvar_value_2 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_DeprecationWarning );
        }

        if ( tmp_mvar_value_2 == NULL )
        {

            exception_type = PyExc_NameError;
            Py_INCREF( exception_type );
            exception_value = PyUnicode_FromFormat( "name '%s' is not defined", "DeprecationWarning" );
            exception_tb = NULL;
            NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
            CHAIN_EXCEPTION( exception_value );

            exception_lineno = 133;
            type_description_1 = "oo";
            goto frame_exception_exit_1;
        }

        tmp_args_element_name_2 = tmp_mvar_value_2;
        tmp_args_element_name_3 = const_int_pos_2;
        frame_3e8551b09cd55b45e9d831e24972fa46->m_frame.f_lineno = 132;
        {
            PyObject *call_args[] = { tmp_args_element_name_1, tmp_args_element_name_2, tmp_args_element_name_3 };
            tmp_call_result_1 = CALL_FUNCTION_WITH_ARGS3( tmp_called_name_1, call_args );
        }

        if ( tmp_call_result_1 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 132;
            type_description_1 = "oo";
            goto frame_exception_exit_1;
        }
        Py_DECREF( tmp_call_result_1 );
    }
    {
        PyObject *tmp_assign_source_1;
        PyObject *tmp_called_name_2;
        PyObject *tmp_mvar_value_3;
        tmp_mvar_value_3 = GET_STRING_DICT_VALUE( moduledict_plistlib, (Nuitka_StringObject *)const_str_plain_BytesIO );

        if (unlikely( tmp_mvar_value_3 == NULL ))
        {
            tmp_mvar_value_3 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_BytesIO );
        }

        if ( tmp_mvar_value_3 == NULL )
        {

            exception_type = PyExc_NameError;
            Py_INCREF( exception_type );
            exception_value = PyUnicode_FromFormat( "name '%s' is not defined", "BytesIO" );
            exception_tb = NULL;
            NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
            CHAIN_EXCEPTION( exception_value );

            exception_lineno = 134;
            type_description_1 = "oo";
            goto frame_exception_exit_1;
        }

        tmp_called_name_2 = tmp_mvar_value_3;
        frame_3e8551b09cd55b45e9d831e24972fa46->m_frame.f_lineno = 134;
        tmp_assign_source_1 = CALL_FUNCTION_NO_ARGS( tmp_called_name_2 );
        if ( tmp_assign_source_1 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 134;
            type_description_1 = "oo";
            goto frame_exception_exit_1;
        }
        assert( var_f == NULL );
        var_f = tmp_assign_source_1;
    }
    {
        PyObject *tmp_called_name_3;
        PyObject *tmp_mvar_value_4;
        PyObject *tmp_call_result_2;
        PyObject *tmp_args_name_1;
        PyObject *tmp_tuple_element_1;
        PyObject *tmp_kw_name_1;
        PyObject *tmp_dict_key_1;
        PyObject *tmp_dict_value_1;
        PyObject *tmp_mvar_value_5;
        PyObject *tmp_dict_key_2;
        PyObject *tmp_dict_value_2;
        PyObject *tmp_dict_key_3;
        PyObject *tmp_dict_value_3;
        tmp_mvar_value_4 = GET_STRING_DICT_VALUE( moduledict_plistlib, (Nuitka_StringObject *)const_str_plain_dump );

        if (unlikely( tmp_mvar_value_4 == NULL ))
        {
            tmp_mvar_value_4 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_dump );
        }

        if ( tmp_mvar_value_4 == NULL )
        {

            exception_type = PyExc_NameError;
            Py_INCREF( exception_type );
            exception_value = PyUnicode_FromFormat( "name '%s' is not defined", "dump" );
            exception_tb = NULL;
            NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
            CHAIN_EXCEPTION( exception_value );

            exception_lineno = 135;
            type_description_1 = "oo";
            goto frame_exception_exit_1;
        }

        tmp_called_name_3 = tmp_mvar_value_4;
        CHECK_OBJECT( par_value );
        tmp_tuple_element_1 = par_value;
        tmp_args_name_1 = PyTuple_New( 2 );
        Py_INCREF( tmp_tuple_element_1 );
        PyTuple_SET_ITEM( tmp_args_name_1, 0, tmp_tuple_element_1 );
        CHECK_OBJECT( var_f );
        tmp_tuple_element_1 = var_f;
        Py_INCREF( tmp_tuple_element_1 );
        PyTuple_SET_ITEM( tmp_args_name_1, 1, tmp_tuple_element_1 );
        tmp_dict_key_1 = const_str_plain_fmt;
        tmp_mvar_value_5 = GET_STRING_DICT_VALUE( moduledict_plistlib, (Nuitka_StringObject *)const_str_plain_FMT_XML );

        if (unlikely( tmp_mvar_value_5 == NULL ))
        {
            tmp_mvar_value_5 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_FMT_XML );
        }

        if ( tmp_mvar_value_5 == NULL )
        {
            Py_DECREF( tmp_args_name_1 );
            exception_type = PyExc_NameError;
            Py_INCREF( exception_type );
            exception_value = PyUnicode_FromFormat( "name '%s' is not defined", "FMT_XML" );
            exception_tb = NULL;
            NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
            CHAIN_EXCEPTION( exception_value );

            exception_lineno = 135;
            type_description_1 = "oo";
            goto frame_exception_exit_1;
        }

        tmp_dict_value_1 = tmp_mvar_value_5;
        tmp_kw_name_1 = _PyDict_NewPresized( 3 );
        tmp_res = PyDict_SetItem( tmp_kw_name_1, tmp_dict_key_1, tmp_dict_value_1 );
        assert( !(tmp_res != 0) );
        tmp_dict_key_2 = const_str_plain_sort_keys;
        tmp_dict_value_2 = Py_True;
        tmp_res = PyDict_SetItem( tmp_kw_name_1, tmp_dict_key_2, tmp_dict_value_2 );
        assert( !(tmp_res != 0) );
        tmp_dict_key_3 = const_str_plain_skipkeys;
        tmp_dict_value_3 = Py_False;
        tmp_res = PyDict_SetItem( tmp_kw_name_1, tmp_dict_key_3, tmp_dict_value_3 );
        assert( !(tmp_res != 0) );
        frame_3e8551b09cd55b45e9d831e24972fa46->m_frame.f_lineno = 135;
        tmp_call_result_2 = CALL_FUNCTION( tmp_called_name_3, tmp_args_name_1, tmp_kw_name_1 );
        Py_DECREF( tmp_args_name_1 );
        Py_DECREF( tmp_kw_name_1 );
        if ( tmp_call_result_2 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 135;
            type_description_1 = "oo";
            goto frame_exception_exit_1;
        }
        Py_DECREF( tmp_call_result_2 );
    }
    {
        PyObject *tmp_called_instance_1;
        CHECK_OBJECT( var_f );
        tmp_called_instance_1 = var_f;
        frame_3e8551b09cd55b45e9d831e24972fa46->m_frame.f_lineno = 136;
        tmp_return_value = CALL_METHOD_NO_ARGS( tmp_called_instance_1, const_str_plain_getvalue );
        if ( tmp_return_value == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 136;
            type_description_1 = "oo";
            goto frame_exception_exit_1;
        }
        goto frame_return_exit_1;
    }

#if 0
    RESTORE_FRAME_EXCEPTION( frame_3e8551b09cd55b45e9d831e24972fa46 );
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto frame_no_exception_1;

    frame_return_exit_1:;
#if 0
    RESTORE_FRAME_EXCEPTION( frame_3e8551b09cd55b45e9d831e24972fa46 );
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto try_return_handler_1;

    frame_exception_exit_1:;

#if 0
    RESTORE_FRAME_EXCEPTION( frame_3e8551b09cd55b45e9d831e24972fa46 );
#endif

    if ( exception_tb == NULL )
    {
        exception_tb = MAKE_TRACEBACK( frame_3e8551b09cd55b45e9d831e24972fa46, exception_lineno );
    }
    else if ( exception_tb->tb_frame != &frame_3e8551b09cd55b45e9d831e24972fa46->m_frame )
    {
        exception_tb = ADD_TRACEBACK( exception_tb, frame_3e8551b09cd55b45e9d831e24972fa46, exception_lineno );
    }

    // Attachs locals to frame if any.
    Nuitka_Frame_AttachLocals(
        (struct Nuitka_FrameObject *)frame_3e8551b09cd55b45e9d831e24972fa46,
        type_description_1,
        par_value,
        var_f
    );


    // Release cached frame.
    if ( frame_3e8551b09cd55b45e9d831e24972fa46 == cache_frame_3e8551b09cd55b45e9d831e24972fa46 )
    {
        Py_DECREF( frame_3e8551b09cd55b45e9d831e24972fa46 );
    }
    cache_frame_3e8551b09cd55b45e9d831e24972fa46 = NULL;

    assertFrameObject( frame_3e8551b09cd55b45e9d831e24972fa46 );

    // Put the previous frame back on top.
    popFrameStack();

    // Return the error.
    goto try_except_handler_1;

    frame_no_exception_1:;
    // tried codes exits in all cases
    NUITKA_CANNOT_GET_HERE( plistlib$$$function_5_writePlistToBytes );
    return NULL;
    // Return handler code:
    try_return_handler_1:;
    CHECK_OBJECT( (PyObject *)par_value );
    Py_DECREF( par_value );
    par_value = NULL;

    CHECK_OBJECT( (PyObject *)var_f );
    Py_DECREF( var_f );
    var_f = NULL;

    goto function_return_exit;
    // Exception handler code:
    try_except_handler_1:;
    exception_keeper_type_1 = exception_type;
    exception_keeper_value_1 = exception_value;
    exception_keeper_tb_1 = exception_tb;
    exception_keeper_lineno_1 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    CHECK_OBJECT( (PyObject *)par_value );
    Py_DECREF( par_value );
    par_value = NULL;

    Py_XDECREF( var_f );
    var_f = NULL;

    // Re-raise.
    exception_type = exception_keeper_type_1;
    exception_value = exception_keeper_value_1;
    exception_tb = exception_keeper_tb_1;
    exception_lineno = exception_keeper_lineno_1;

    goto function_exception_exit;
    // End of try:

    // Return statement must have exited already.
    NUITKA_CANNOT_GET_HERE( plistlib$$$function_5_writePlistToBytes );
    return NULL;

function_exception_exit:
    assert( exception_type );
    RESTORE_ERROR_OCCURRED( exception_type, exception_value, exception_tb );

    return NULL;

function_return_exit:
   // Function cleanup code if any.


   // Actual function exit with return value, making sure we did not make
   // the error status worse despite non-NULL return.
   CHECK_OBJECT( tmp_return_value );
   assert( had_error || !ERROR_OCCURRED() );
   return tmp_return_value;
}


static PyObject *impl_plistlib$$$function_6___init__( struct Nuitka_FunctionObject const *self, PyObject **python_pars )
{
    // Preserve error status for checks
#ifndef __NUITKA_NO_ASSERT__
    NUITKA_MAY_BE_UNUSED bool had_error = ERROR_OCCURRED();
#endif

    // Local variable declarations.
    PyObject *par_self = python_pars[ 0 ];
    PyObject *par_data = python_pars[ 1 ];
    struct Nuitka_FrameObject *frame_9aef60c55aaa42e7bdc318a827042dc2;
    NUITKA_MAY_BE_UNUSED char const *type_description_1 = NULL;
    int tmp_res;
    PyObject *exception_type = NULL;
    PyObject *exception_value = NULL;
    PyTracebackObject *exception_tb = NULL;
    NUITKA_MAY_BE_UNUSED int exception_lineno = 0;
    bool tmp_result;
    static struct Nuitka_FrameObject *cache_frame_9aef60c55aaa42e7bdc318a827042dc2 = NULL;
    PyObject *tmp_return_value = NULL;
    PyObject *exception_keeper_type_1;
    PyObject *exception_keeper_value_1;
    PyTracebackObject *exception_keeper_tb_1;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_1;

    // Actual function body.
    // Tried code:
    MAKE_OR_REUSE_FRAME( cache_frame_9aef60c55aaa42e7bdc318a827042dc2, codeobj_9aef60c55aaa42e7bdc318a827042dc2, module_plistlib, sizeof(void *)+sizeof(void *) );
    frame_9aef60c55aaa42e7bdc318a827042dc2 = cache_frame_9aef60c55aaa42e7bdc318a827042dc2;

    // Push the new frame as the currently active one.
    pushFrameStack( frame_9aef60c55aaa42e7bdc318a827042dc2 );

    // Mark the frame object as in use, ref count 1 will be up for reuse.
    assert( Py_REFCNT( frame_9aef60c55aaa42e7bdc318a827042dc2 ) == 2 ); // Frame stack

    // Framed code:
    {
        nuitka_bool tmp_condition_result_1;
        PyObject *tmp_operand_name_1;
        PyObject *tmp_isinstance_inst_1;
        PyObject *tmp_isinstance_cls_1;
        CHECK_OBJECT( par_data );
        tmp_isinstance_inst_1 = par_data;
        tmp_isinstance_cls_1 = (PyObject *)&PyBytes_Type;
        tmp_res = Nuitka_IsInstance( tmp_isinstance_inst_1, tmp_isinstance_cls_1 );
        if ( tmp_res == -1 )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 147;
            type_description_1 = "oo";
            goto frame_exception_exit_1;
        }
        tmp_operand_name_1 = ( tmp_res != 0 ) ? Py_True : Py_False;
        tmp_res = CHECK_IF_TRUE( tmp_operand_name_1 );
        if ( tmp_res == -1 )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 147;
            type_description_1 = "oo";
            goto frame_exception_exit_1;
        }
        tmp_condition_result_1 = ( tmp_res == 0 ) ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
        if ( tmp_condition_result_1 == NUITKA_BOOL_TRUE )
        {
            goto branch_yes_1;
        }
        else
        {
            goto branch_no_1;
        }
        branch_yes_1:;
        {
            PyObject *tmp_raise_type_1;
            PyObject *tmp_make_exception_arg_1;
            tmp_make_exception_arg_1 = const_str_digest_0a1de9132902fa5ffc8d8b3c8b69062b;
            frame_9aef60c55aaa42e7bdc318a827042dc2->m_frame.f_lineno = 148;
            {
                PyObject *call_args[] = { tmp_make_exception_arg_1 };
                tmp_raise_type_1 = CALL_FUNCTION_WITH_ARGS1( PyExc_TypeError, call_args );
            }

            assert( !(tmp_raise_type_1 == NULL) );
            exception_type = tmp_raise_type_1;
            exception_lineno = 148;
            RAISE_EXCEPTION_WITH_TYPE( &exception_type, &exception_value, &exception_tb );
            type_description_1 = "oo";
            goto frame_exception_exit_1;
        }
        branch_no_1:;
    }
    {
        PyObject *tmp_assattr_name_1;
        PyObject *tmp_assattr_target_1;
        CHECK_OBJECT( par_data );
        tmp_assattr_name_1 = par_data;
        CHECK_OBJECT( par_self );
        tmp_assattr_target_1 = par_self;
        tmp_result = SET_ATTRIBUTE( tmp_assattr_target_1, const_str_plain_data, tmp_assattr_name_1 );
        if ( tmp_result == false )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 149;
            type_description_1 = "oo";
            goto frame_exception_exit_1;
        }
    }

#if 0
    RESTORE_FRAME_EXCEPTION( frame_9aef60c55aaa42e7bdc318a827042dc2 );
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto frame_no_exception_1;

    frame_exception_exit_1:;

#if 0
    RESTORE_FRAME_EXCEPTION( frame_9aef60c55aaa42e7bdc318a827042dc2 );
#endif

    if ( exception_tb == NULL )
    {
        exception_tb = MAKE_TRACEBACK( frame_9aef60c55aaa42e7bdc318a827042dc2, exception_lineno );
    }
    else if ( exception_tb->tb_frame != &frame_9aef60c55aaa42e7bdc318a827042dc2->m_frame )
    {
        exception_tb = ADD_TRACEBACK( exception_tb, frame_9aef60c55aaa42e7bdc318a827042dc2, exception_lineno );
    }

    // Attachs locals to frame if any.
    Nuitka_Frame_AttachLocals(
        (struct Nuitka_FrameObject *)frame_9aef60c55aaa42e7bdc318a827042dc2,
        type_description_1,
        par_self,
        par_data
    );


    // Release cached frame.
    if ( frame_9aef60c55aaa42e7bdc318a827042dc2 == cache_frame_9aef60c55aaa42e7bdc318a827042dc2 )
    {
        Py_DECREF( frame_9aef60c55aaa42e7bdc318a827042dc2 );
    }
    cache_frame_9aef60c55aaa42e7bdc318a827042dc2 = NULL;

    assertFrameObject( frame_9aef60c55aaa42e7bdc318a827042dc2 );

    // Put the previous frame back on top.
    popFrameStack();

    // Return the error.
    goto try_except_handler_1;

    frame_no_exception_1:;
    tmp_return_value = Py_None;
    Py_INCREF( tmp_return_value );
    goto try_return_handler_1;
    // tried codes exits in all cases
    NUITKA_CANNOT_GET_HERE( plistlib$$$function_6___init__ );
    return NULL;
    // Return handler code:
    try_return_handler_1:;
    CHECK_OBJECT( (PyObject *)par_self );
    Py_DECREF( par_self );
    par_self = NULL;

    CHECK_OBJECT( (PyObject *)par_data );
    Py_DECREF( par_data );
    par_data = NULL;

    goto function_return_exit;
    // Exception handler code:
    try_except_handler_1:;
    exception_keeper_type_1 = exception_type;
    exception_keeper_value_1 = exception_value;
    exception_keeper_tb_1 = exception_tb;
    exception_keeper_lineno_1 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    CHECK_OBJECT( (PyObject *)par_self );
    Py_DECREF( par_self );
    par_self = NULL;

    CHECK_OBJECT( (PyObject *)par_data );
    Py_DECREF( par_data );
    par_data = NULL;

    // Re-raise.
    exception_type = exception_keeper_type_1;
    exception_value = exception_keeper_value_1;
    exception_tb = exception_keeper_tb_1;
    exception_lineno = exception_keeper_lineno_1;

    goto function_exception_exit;
    // End of try:

    // Return statement must have exited already.
    NUITKA_CANNOT_GET_HERE( plistlib$$$function_6___init__ );
    return NULL;

function_exception_exit:
    assert( exception_type );
    RESTORE_ERROR_OCCURRED( exception_type, exception_value, exception_tb );

    return NULL;

function_return_exit:
   // Function cleanup code if any.


   // Actual function exit with return value, making sure we did not make
   // the error status worse despite non-NULL return.
   CHECK_OBJECT( tmp_return_value );
   assert( had_error || !ERROR_OCCURRED() );
   return tmp_return_value;
}


static PyObject *impl_plistlib$$$function_7_fromBase64( struct Nuitka_FunctionObject const *self, PyObject **python_pars )
{
    // Preserve error status for checks
#ifndef __NUITKA_NO_ASSERT__
    NUITKA_MAY_BE_UNUSED bool had_error = ERROR_OCCURRED();
#endif

    // Local variable declarations.
    PyObject *par_cls = python_pars[ 0 ];
    PyObject *par_data = python_pars[ 1 ];
    struct Nuitka_FrameObject *frame_5052dea2b041b2538c399c0901792c9e;
    NUITKA_MAY_BE_UNUSED char const *type_description_1 = NULL;
    PyObject *tmp_return_value = NULL;
    PyObject *exception_type = NULL;
    PyObject *exception_value = NULL;
    PyTracebackObject *exception_tb = NULL;
    NUITKA_MAY_BE_UNUSED int exception_lineno = 0;
    static struct Nuitka_FrameObject *cache_frame_5052dea2b041b2538c399c0901792c9e = NULL;
    PyObject *exception_keeper_type_1;
    PyObject *exception_keeper_value_1;
    PyTracebackObject *exception_keeper_tb_1;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_1;

    // Actual function body.
    // Tried code:
    MAKE_OR_REUSE_FRAME( cache_frame_5052dea2b041b2538c399c0901792c9e, codeobj_5052dea2b041b2538c399c0901792c9e, module_plistlib, sizeof(void *)+sizeof(void *) );
    frame_5052dea2b041b2538c399c0901792c9e = cache_frame_5052dea2b041b2538c399c0901792c9e;

    // Push the new frame as the currently active one.
    pushFrameStack( frame_5052dea2b041b2538c399c0901792c9e );

    // Mark the frame object as in use, ref count 1 will be up for reuse.
    assert( Py_REFCNT( frame_5052dea2b041b2538c399c0901792c9e ) == 2 ); // Frame stack

    // Framed code:
    {
        PyObject *tmp_called_name_1;
        PyObject *tmp_args_element_name_1;
        PyObject *tmp_called_name_2;
        PyObject *tmp_mvar_value_1;
        PyObject *tmp_args_element_name_2;
        CHECK_OBJECT( par_cls );
        tmp_called_name_1 = par_cls;
        tmp_mvar_value_1 = GET_STRING_DICT_VALUE( moduledict_plistlib, (Nuitka_StringObject *)const_str_plain__decode_base64 );

        if (unlikely( tmp_mvar_value_1 == NULL ))
        {
            tmp_mvar_value_1 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain__decode_base64 );
        }

        if ( tmp_mvar_value_1 == NULL )
        {

            exception_type = PyExc_NameError;
            Py_INCREF( exception_type );
            exception_value = PyUnicode_FromFormat( "name '%s' is not defined", "_decode_base64" );
            exception_tb = NULL;
            NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
            CHAIN_EXCEPTION( exception_value );

            exception_lineno = 155;
            type_description_1 = "oo";
            goto frame_exception_exit_1;
        }

        tmp_called_name_2 = tmp_mvar_value_1;
        CHECK_OBJECT( par_data );
        tmp_args_element_name_2 = par_data;
        frame_5052dea2b041b2538c399c0901792c9e->m_frame.f_lineno = 155;
        {
            PyObject *call_args[] = { tmp_args_element_name_2 };
            tmp_args_element_name_1 = CALL_FUNCTION_WITH_ARGS1( tmp_called_name_2, call_args );
        }

        if ( tmp_args_element_name_1 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 155;
            type_description_1 = "oo";
            goto frame_exception_exit_1;
        }
        frame_5052dea2b041b2538c399c0901792c9e->m_frame.f_lineno = 155;
        {
            PyObject *call_args[] = { tmp_args_element_name_1 };
            tmp_return_value = CALL_FUNCTION_WITH_ARGS1( tmp_called_name_1, call_args );
        }

        Py_DECREF( tmp_args_element_name_1 );
        if ( tmp_return_value == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 155;
            type_description_1 = "oo";
            goto frame_exception_exit_1;
        }
        goto frame_return_exit_1;
    }

#if 0
    RESTORE_FRAME_EXCEPTION( frame_5052dea2b041b2538c399c0901792c9e );
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto frame_no_exception_1;

    frame_return_exit_1:;
#if 0
    RESTORE_FRAME_EXCEPTION( frame_5052dea2b041b2538c399c0901792c9e );
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto try_return_handler_1;

    frame_exception_exit_1:;

#if 0
    RESTORE_FRAME_EXCEPTION( frame_5052dea2b041b2538c399c0901792c9e );
#endif

    if ( exception_tb == NULL )
    {
        exception_tb = MAKE_TRACEBACK( frame_5052dea2b041b2538c399c0901792c9e, exception_lineno );
    }
    else if ( exception_tb->tb_frame != &frame_5052dea2b041b2538c399c0901792c9e->m_frame )
    {
        exception_tb = ADD_TRACEBACK( exception_tb, frame_5052dea2b041b2538c399c0901792c9e, exception_lineno );
    }

    // Attachs locals to frame if any.
    Nuitka_Frame_AttachLocals(
        (struct Nuitka_FrameObject *)frame_5052dea2b041b2538c399c0901792c9e,
        type_description_1,
        par_cls,
        par_data
    );


    // Release cached frame.
    if ( frame_5052dea2b041b2538c399c0901792c9e == cache_frame_5052dea2b041b2538c399c0901792c9e )
    {
        Py_DECREF( frame_5052dea2b041b2538c399c0901792c9e );
    }
    cache_frame_5052dea2b041b2538c399c0901792c9e = NULL;

    assertFrameObject( frame_5052dea2b041b2538c399c0901792c9e );

    // Put the previous frame back on top.
    popFrameStack();

    // Return the error.
    goto try_except_handler_1;

    frame_no_exception_1:;
    // tried codes exits in all cases
    NUITKA_CANNOT_GET_HERE( plistlib$$$function_7_fromBase64 );
    return NULL;
    // Return handler code:
    try_return_handler_1:;
    CHECK_OBJECT( (PyObject *)par_cls );
    Py_DECREF( par_cls );
    par_cls = NULL;

    CHECK_OBJECT( (PyObject *)par_data );
    Py_DECREF( par_data );
    par_data = NULL;

    goto function_return_exit;
    // Exception handler code:
    try_except_handler_1:;
    exception_keeper_type_1 = exception_type;
    exception_keeper_value_1 = exception_value;
    exception_keeper_tb_1 = exception_tb;
    exception_keeper_lineno_1 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    CHECK_OBJECT( (PyObject *)par_cls );
    Py_DECREF( par_cls );
    par_cls = NULL;

    CHECK_OBJECT( (PyObject *)par_data );
    Py_DECREF( par_data );
    par_data = NULL;

    // Re-raise.
    exception_type = exception_keeper_type_1;
    exception_value = exception_keeper_value_1;
    exception_tb = exception_keeper_tb_1;
    exception_lineno = exception_keeper_lineno_1;

    goto function_exception_exit;
    // End of try:

    // Return statement must have exited already.
    NUITKA_CANNOT_GET_HERE( plistlib$$$function_7_fromBase64 );
    return NULL;

function_exception_exit:
    assert( exception_type );
    RESTORE_ERROR_OCCURRED( exception_type, exception_value, exception_tb );

    return NULL;

function_return_exit:
   // Function cleanup code if any.


   // Actual function exit with return value, making sure we did not make
   // the error status worse despite non-NULL return.
   CHECK_OBJECT( tmp_return_value );
   assert( had_error || !ERROR_OCCURRED() );
   return tmp_return_value;
}


static PyObject *impl_plistlib$$$function_8_asBase64( struct Nuitka_FunctionObject const *self, PyObject **python_pars )
{
    // Preserve error status for checks
#ifndef __NUITKA_NO_ASSERT__
    NUITKA_MAY_BE_UNUSED bool had_error = ERROR_OCCURRED();
#endif

    // Local variable declarations.
    PyObject *par_self = python_pars[ 0 ];
    PyObject *par_maxlinelength = python_pars[ 1 ];
    struct Nuitka_FrameObject *frame_1f8721614f27c95ef32954e497ba091f;
    NUITKA_MAY_BE_UNUSED char const *type_description_1 = NULL;
    PyObject *tmp_return_value = NULL;
    PyObject *exception_type = NULL;
    PyObject *exception_value = NULL;
    PyTracebackObject *exception_tb = NULL;
    NUITKA_MAY_BE_UNUSED int exception_lineno = 0;
    static struct Nuitka_FrameObject *cache_frame_1f8721614f27c95ef32954e497ba091f = NULL;
    PyObject *exception_keeper_type_1;
    PyObject *exception_keeper_value_1;
    PyTracebackObject *exception_keeper_tb_1;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_1;

    // Actual function body.
    // Tried code:
    MAKE_OR_REUSE_FRAME( cache_frame_1f8721614f27c95ef32954e497ba091f, codeobj_1f8721614f27c95ef32954e497ba091f, module_plistlib, sizeof(void *)+sizeof(void *) );
    frame_1f8721614f27c95ef32954e497ba091f = cache_frame_1f8721614f27c95ef32954e497ba091f;

    // Push the new frame as the currently active one.
    pushFrameStack( frame_1f8721614f27c95ef32954e497ba091f );

    // Mark the frame object as in use, ref count 1 will be up for reuse.
    assert( Py_REFCNT( frame_1f8721614f27c95ef32954e497ba091f ) == 2 ); // Frame stack

    // Framed code:
    {
        PyObject *tmp_called_name_1;
        PyObject *tmp_mvar_value_1;
        PyObject *tmp_args_element_name_1;
        PyObject *tmp_source_name_1;
        PyObject *tmp_args_element_name_2;
        tmp_mvar_value_1 = GET_STRING_DICT_VALUE( moduledict_plistlib, (Nuitka_StringObject *)const_str_plain__encode_base64 );

        if (unlikely( tmp_mvar_value_1 == NULL ))
        {
            tmp_mvar_value_1 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain__encode_base64 );
        }

        if ( tmp_mvar_value_1 == NULL )
        {

            exception_type = PyExc_NameError;
            Py_INCREF( exception_type );
            exception_value = PyUnicode_FromFormat( "name '%s' is not defined", "_encode_base64" );
            exception_tb = NULL;
            NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
            CHAIN_EXCEPTION( exception_value );

            exception_lineno = 158;
            type_description_1 = "oo";
            goto frame_exception_exit_1;
        }

        tmp_called_name_1 = tmp_mvar_value_1;
        CHECK_OBJECT( par_self );
        tmp_source_name_1 = par_self;
        tmp_args_element_name_1 = LOOKUP_ATTRIBUTE( tmp_source_name_1, const_str_plain_data );
        if ( tmp_args_element_name_1 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 158;
            type_description_1 = "oo";
            goto frame_exception_exit_1;
        }
        CHECK_OBJECT( par_maxlinelength );
        tmp_args_element_name_2 = par_maxlinelength;
        frame_1f8721614f27c95ef32954e497ba091f->m_frame.f_lineno = 158;
        {
            PyObject *call_args[] = { tmp_args_element_name_1, tmp_args_element_name_2 };
            tmp_return_value = CALL_FUNCTION_WITH_ARGS2( tmp_called_name_1, call_args );
        }

        Py_DECREF( tmp_args_element_name_1 );
        if ( tmp_return_value == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 158;
            type_description_1 = "oo";
            goto frame_exception_exit_1;
        }
        goto frame_return_exit_1;
    }

#if 0
    RESTORE_FRAME_EXCEPTION( frame_1f8721614f27c95ef32954e497ba091f );
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto frame_no_exception_1;

    frame_return_exit_1:;
#if 0
    RESTORE_FRAME_EXCEPTION( frame_1f8721614f27c95ef32954e497ba091f );
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto try_return_handler_1;

    frame_exception_exit_1:;

#if 0
    RESTORE_FRAME_EXCEPTION( frame_1f8721614f27c95ef32954e497ba091f );
#endif

    if ( exception_tb == NULL )
    {
        exception_tb = MAKE_TRACEBACK( frame_1f8721614f27c95ef32954e497ba091f, exception_lineno );
    }
    else if ( exception_tb->tb_frame != &frame_1f8721614f27c95ef32954e497ba091f->m_frame )
    {
        exception_tb = ADD_TRACEBACK( exception_tb, frame_1f8721614f27c95ef32954e497ba091f, exception_lineno );
    }

    // Attachs locals to frame if any.
    Nuitka_Frame_AttachLocals(
        (struct Nuitka_FrameObject *)frame_1f8721614f27c95ef32954e497ba091f,
        type_description_1,
        par_self,
        par_maxlinelength
    );


    // Release cached frame.
    if ( frame_1f8721614f27c95ef32954e497ba091f == cache_frame_1f8721614f27c95ef32954e497ba091f )
    {
        Py_DECREF( frame_1f8721614f27c95ef32954e497ba091f );
    }
    cache_frame_1f8721614f27c95ef32954e497ba091f = NULL;

    assertFrameObject( frame_1f8721614f27c95ef32954e497ba091f );

    // Put the previous frame back on top.
    popFrameStack();

    // Return the error.
    goto try_except_handler_1;

    frame_no_exception_1:;
    // tried codes exits in all cases
    NUITKA_CANNOT_GET_HERE( plistlib$$$function_8_asBase64 );
    return NULL;
    // Return handler code:
    try_return_handler_1:;
    CHECK_OBJECT( (PyObject *)par_self );
    Py_DECREF( par_self );
    par_self = NULL;

    CHECK_OBJECT( (PyObject *)par_maxlinelength );
    Py_DECREF( par_maxlinelength );
    par_maxlinelength = NULL;

    goto function_return_exit;
    // Exception handler code:
    try_except_handler_1:;
    exception_keeper_type_1 = exception_type;
    exception_keeper_value_1 = exception_value;
    exception_keeper_tb_1 = exception_tb;
    exception_keeper_lineno_1 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    CHECK_OBJECT( (PyObject *)par_self );
    Py_DECREF( par_self );
    par_self = NULL;

    CHECK_OBJECT( (PyObject *)par_maxlinelength );
    Py_DECREF( par_maxlinelength );
    par_maxlinelength = NULL;

    // Re-raise.
    exception_type = exception_keeper_type_1;
    exception_value = exception_keeper_value_1;
    exception_tb = exception_keeper_tb_1;
    exception_lineno = exception_keeper_lineno_1;

    goto function_exception_exit;
    // End of try:

    // Return statement must have exited already.
    NUITKA_CANNOT_GET_HERE( plistlib$$$function_8_asBase64 );
    return NULL;

function_exception_exit:
    assert( exception_type );
    RESTORE_ERROR_OCCURRED( exception_type, exception_value, exception_tb );

    return NULL;

function_return_exit:
   // Function cleanup code if any.


   // Actual function exit with return value, making sure we did not make
   // the error status worse despite non-NULL return.
   CHECK_OBJECT( tmp_return_value );
   assert( had_error || !ERROR_OCCURRED() );
   return tmp_return_value;
}


static PyObject *impl_plistlib$$$function_9___eq__( struct Nuitka_FunctionObject const *self, PyObject **python_pars )
{
    // Preserve error status for checks
#ifndef __NUITKA_NO_ASSERT__
    NUITKA_MAY_BE_UNUSED bool had_error = ERROR_OCCURRED();
#endif

    // Local variable declarations.
    PyObject *par_self = python_pars[ 0 ];
    PyObject *par_other = python_pars[ 1 ];
    struct Nuitka_FrameObject *frame_b1f25262fbfc33eb3f345501504bd8f8;
    NUITKA_MAY_BE_UNUSED char const *type_description_1 = NULL;
    PyObject *exception_type = NULL;
    PyObject *exception_value = NULL;
    PyTracebackObject *exception_tb = NULL;
    NUITKA_MAY_BE_UNUSED int exception_lineno = 0;
    int tmp_res;
    PyObject *tmp_return_value = NULL;
    static struct Nuitka_FrameObject *cache_frame_b1f25262fbfc33eb3f345501504bd8f8 = NULL;
    PyObject *exception_keeper_type_1;
    PyObject *exception_keeper_value_1;
    PyTracebackObject *exception_keeper_tb_1;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_1;

    // Actual function body.
    // Tried code:
    MAKE_OR_REUSE_FRAME( cache_frame_b1f25262fbfc33eb3f345501504bd8f8, codeobj_b1f25262fbfc33eb3f345501504bd8f8, module_plistlib, sizeof(void *)+sizeof(void *) );
    frame_b1f25262fbfc33eb3f345501504bd8f8 = cache_frame_b1f25262fbfc33eb3f345501504bd8f8;

    // Push the new frame as the currently active one.
    pushFrameStack( frame_b1f25262fbfc33eb3f345501504bd8f8 );

    // Mark the frame object as in use, ref count 1 will be up for reuse.
    assert( Py_REFCNT( frame_b1f25262fbfc33eb3f345501504bd8f8 ) == 2 ); // Frame stack

    // Framed code:
    {
        nuitka_bool tmp_condition_result_1;
        PyObject *tmp_isinstance_inst_1;
        PyObject *tmp_isinstance_cls_1;
        PyObject *tmp_source_name_1;
        CHECK_OBJECT( par_other );
        tmp_isinstance_inst_1 = par_other;
        CHECK_OBJECT( par_self );
        tmp_source_name_1 = par_self;
        tmp_isinstance_cls_1 = LOOKUP_ATTRIBUTE_CLASS_SLOT( tmp_source_name_1 );
        if ( tmp_isinstance_cls_1 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 161;
            type_description_1 = "oo";
            goto frame_exception_exit_1;
        }
        tmp_res = Nuitka_IsInstance( tmp_isinstance_inst_1, tmp_isinstance_cls_1 );
        Py_DECREF( tmp_isinstance_cls_1 );
        if ( tmp_res == -1 )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 161;
            type_description_1 = "oo";
            goto frame_exception_exit_1;
        }
        tmp_condition_result_1 = ( tmp_res != 0 ) ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
        if ( tmp_condition_result_1 == NUITKA_BOOL_TRUE )
        {
            goto branch_yes_1;
        }
        else
        {
            goto branch_no_1;
        }
        branch_yes_1:;
        {
            PyObject *tmp_compexpr_left_1;
            PyObject *tmp_compexpr_right_1;
            PyObject *tmp_source_name_2;
            PyObject *tmp_source_name_3;
            CHECK_OBJECT( par_self );
            tmp_source_name_2 = par_self;
            tmp_compexpr_left_1 = LOOKUP_ATTRIBUTE( tmp_source_name_2, const_str_plain_data );
            if ( tmp_compexpr_left_1 == NULL )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 162;
                type_description_1 = "oo";
                goto frame_exception_exit_1;
            }
            CHECK_OBJECT( par_other );
            tmp_source_name_3 = par_other;
            tmp_compexpr_right_1 = LOOKUP_ATTRIBUTE( tmp_source_name_3, const_str_plain_data );
            if ( tmp_compexpr_right_1 == NULL )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
                Py_DECREF( tmp_compexpr_left_1 );

                exception_lineno = 162;
                type_description_1 = "oo";
                goto frame_exception_exit_1;
            }
            tmp_return_value = RICH_COMPARE_EQ_OBJECT_OBJECT( tmp_compexpr_left_1, tmp_compexpr_right_1 );
            Py_DECREF( tmp_compexpr_left_1 );
            Py_DECREF( tmp_compexpr_right_1 );
            if ( tmp_return_value == NULL )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 162;
                type_description_1 = "oo";
                goto frame_exception_exit_1;
            }
            goto frame_return_exit_1;
        }
        goto branch_end_1;
        branch_no_1:;
        {
            nuitka_bool tmp_condition_result_2;
            PyObject *tmp_isinstance_inst_2;
            PyObject *tmp_isinstance_cls_2;
            CHECK_OBJECT( par_other );
            tmp_isinstance_inst_2 = par_other;
            tmp_isinstance_cls_2 = (PyObject *)&PyBytes_Type;
            tmp_res = Nuitka_IsInstance( tmp_isinstance_inst_2, tmp_isinstance_cls_2 );
            if ( tmp_res == -1 )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 163;
                type_description_1 = "oo";
                goto frame_exception_exit_1;
            }
            tmp_condition_result_2 = ( tmp_res != 0 ) ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
            if ( tmp_condition_result_2 == NUITKA_BOOL_TRUE )
            {
                goto branch_yes_2;
            }
            else
            {
                goto branch_no_2;
            }
            branch_yes_2:;
            {
                PyObject *tmp_compexpr_left_2;
                PyObject *tmp_compexpr_right_2;
                PyObject *tmp_source_name_4;
                CHECK_OBJECT( par_self );
                tmp_source_name_4 = par_self;
                tmp_compexpr_left_2 = LOOKUP_ATTRIBUTE( tmp_source_name_4, const_str_plain_data );
                if ( tmp_compexpr_left_2 == NULL )
                {
                    assert( ERROR_OCCURRED() );

                    FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                    exception_lineno = 164;
                    type_description_1 = "oo";
                    goto frame_exception_exit_1;
                }
                CHECK_OBJECT( par_other );
                tmp_compexpr_right_2 = par_other;
                tmp_return_value = RICH_COMPARE_EQ_OBJECT_OBJECT( tmp_compexpr_left_2, tmp_compexpr_right_2 );
                Py_DECREF( tmp_compexpr_left_2 );
                if ( tmp_return_value == NULL )
                {
                    assert( ERROR_OCCURRED() );

                    FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                    exception_lineno = 164;
                    type_description_1 = "oo";
                    goto frame_exception_exit_1;
                }
                goto frame_return_exit_1;
            }
            goto branch_end_2;
            branch_no_2:;
            tmp_return_value = Py_NotImplemented;
            Py_INCREF( tmp_return_value );
            goto frame_return_exit_1;
            branch_end_2:;
        }
        branch_end_1:;
    }

#if 0
    RESTORE_FRAME_EXCEPTION( frame_b1f25262fbfc33eb3f345501504bd8f8 );
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto frame_no_exception_1;

    frame_return_exit_1:;
#if 0
    RESTORE_FRAME_EXCEPTION( frame_b1f25262fbfc33eb3f345501504bd8f8 );
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto try_return_handler_1;

    frame_exception_exit_1:;

#if 0
    RESTORE_FRAME_EXCEPTION( frame_b1f25262fbfc33eb3f345501504bd8f8 );
#endif

    if ( exception_tb == NULL )
    {
        exception_tb = MAKE_TRACEBACK( frame_b1f25262fbfc33eb3f345501504bd8f8, exception_lineno );
    }
    else if ( exception_tb->tb_frame != &frame_b1f25262fbfc33eb3f345501504bd8f8->m_frame )
    {
        exception_tb = ADD_TRACEBACK( exception_tb, frame_b1f25262fbfc33eb3f345501504bd8f8, exception_lineno );
    }

    // Attachs locals to frame if any.
    Nuitka_Frame_AttachLocals(
        (struct Nuitka_FrameObject *)frame_b1f25262fbfc33eb3f345501504bd8f8,
        type_description_1,
        par_self,
        par_other
    );


    // Release cached frame.
    if ( frame_b1f25262fbfc33eb3f345501504bd8f8 == cache_frame_b1f25262fbfc33eb3f345501504bd8f8 )
    {
        Py_DECREF( frame_b1f25262fbfc33eb3f345501504bd8f8 );
    }
    cache_frame_b1f25262fbfc33eb3f345501504bd8f8 = NULL;

    assertFrameObject( frame_b1f25262fbfc33eb3f345501504bd8f8 );

    // Put the previous frame back on top.
    popFrameStack();

    // Return the error.
    goto try_except_handler_1;

    frame_no_exception_1:;
    // tried codes exits in all cases
    NUITKA_CANNOT_GET_HERE( plistlib$$$function_9___eq__ );
    return NULL;
    // Return handler code:
    try_return_handler_1:;
    CHECK_OBJECT( (PyObject *)par_self );
    Py_DECREF( par_self );
    par_self = NULL;

    CHECK_OBJECT( (PyObject *)par_other );
    Py_DECREF( par_other );
    par_other = NULL;

    goto function_return_exit;
    // Exception handler code:
    try_except_handler_1:;
    exception_keeper_type_1 = exception_type;
    exception_keeper_value_1 = exception_value;
    exception_keeper_tb_1 = exception_tb;
    exception_keeper_lineno_1 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    CHECK_OBJECT( (PyObject *)par_self );
    Py_DECREF( par_self );
    par_self = NULL;

    CHECK_OBJECT( (PyObject *)par_other );
    Py_DECREF( par_other );
    par_other = NULL;

    // Re-raise.
    exception_type = exception_keeper_type_1;
    exception_value = exception_keeper_value_1;
    exception_tb = exception_keeper_tb_1;
    exception_lineno = exception_keeper_lineno_1;

    goto function_exception_exit;
    // End of try:

    // Return statement must have exited already.
    NUITKA_CANNOT_GET_HERE( plistlib$$$function_9___eq__ );
    return NULL;

function_exception_exit:
    assert( exception_type );
    RESTORE_ERROR_OCCURRED( exception_type, exception_value, exception_tb );

    return NULL;

function_return_exit:
   // Function cleanup code if any.


   // Actual function exit with return value, making sure we did not make
   // the error status worse despite non-NULL return.
   CHECK_OBJECT( tmp_return_value );
   assert( had_error || !ERROR_OCCURRED() );
   return tmp_return_value;
}


static PyObject *impl_plistlib$$$function_10___repr__( struct Nuitka_FunctionObject const *self, PyObject **python_pars )
{
    // Preserve error status for checks
#ifndef __NUITKA_NO_ASSERT__
    NUITKA_MAY_BE_UNUSED bool had_error = ERROR_OCCURRED();
#endif

    // Local variable declarations.
    PyObject *par_self = python_pars[ 0 ];
    struct Nuitka_FrameObject *frame_bd0be69468a9187fdfbee75e4cfd5679;
    NUITKA_MAY_BE_UNUSED char const *type_description_1 = NULL;
    PyObject *tmp_return_value = NULL;
    PyObject *exception_type = NULL;
    PyObject *exception_value = NULL;
    PyTracebackObject *exception_tb = NULL;
    NUITKA_MAY_BE_UNUSED int exception_lineno = 0;
    static struct Nuitka_FrameObject *cache_frame_bd0be69468a9187fdfbee75e4cfd5679 = NULL;
    PyObject *exception_keeper_type_1;
    PyObject *exception_keeper_value_1;
    PyTracebackObject *exception_keeper_tb_1;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_1;

    // Actual function body.
    // Tried code:
    MAKE_OR_REUSE_FRAME( cache_frame_bd0be69468a9187fdfbee75e4cfd5679, codeobj_bd0be69468a9187fdfbee75e4cfd5679, module_plistlib, sizeof(void *) );
    frame_bd0be69468a9187fdfbee75e4cfd5679 = cache_frame_bd0be69468a9187fdfbee75e4cfd5679;

    // Push the new frame as the currently active one.
    pushFrameStack( frame_bd0be69468a9187fdfbee75e4cfd5679 );

    // Mark the frame object as in use, ref count 1 will be up for reuse.
    assert( Py_REFCNT( frame_bd0be69468a9187fdfbee75e4cfd5679 ) == 2 ); // Frame stack

    // Framed code:
    {
        PyObject *tmp_left_name_1;
        PyObject *tmp_right_name_1;
        PyObject *tmp_tuple_element_1;
        PyObject *tmp_source_name_1;
        PyObject *tmp_source_name_2;
        PyObject *tmp_operand_name_1;
        PyObject *tmp_source_name_3;
        tmp_left_name_1 = const_str_digest_a7636f57d1f8f80548278378b7bf84e2;
        CHECK_OBJECT( par_self );
        tmp_source_name_2 = par_self;
        tmp_source_name_1 = LOOKUP_ATTRIBUTE_CLASS_SLOT( tmp_source_name_2 );
        if ( tmp_source_name_1 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 169;
            type_description_1 = "o";
            goto frame_exception_exit_1;
        }
        tmp_tuple_element_1 = LOOKUP_ATTRIBUTE( tmp_source_name_1, const_str_plain___name__ );
        Py_DECREF( tmp_source_name_1 );
        if ( tmp_tuple_element_1 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 169;
            type_description_1 = "o";
            goto frame_exception_exit_1;
        }
        tmp_right_name_1 = PyTuple_New( 2 );
        PyTuple_SET_ITEM( tmp_right_name_1, 0, tmp_tuple_element_1 );
        CHECK_OBJECT( par_self );
        tmp_source_name_3 = par_self;
        tmp_operand_name_1 = LOOKUP_ATTRIBUTE( tmp_source_name_3, const_str_plain_data );
        if ( tmp_operand_name_1 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
            Py_DECREF( tmp_right_name_1 );

            exception_lineno = 169;
            type_description_1 = "o";
            goto frame_exception_exit_1;
        }
        tmp_tuple_element_1 = UNARY_OPERATION( PyObject_Repr, tmp_operand_name_1 );
        Py_DECREF( tmp_operand_name_1 );
        if ( tmp_tuple_element_1 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
            Py_DECREF( tmp_right_name_1 );

            exception_lineno = 169;
            type_description_1 = "o";
            goto frame_exception_exit_1;
        }
        PyTuple_SET_ITEM( tmp_right_name_1, 1, tmp_tuple_element_1 );
        tmp_return_value = BINARY_OPERATION_REMAINDER( tmp_left_name_1, tmp_right_name_1 );
        Py_DECREF( tmp_right_name_1 );
        if ( tmp_return_value == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 169;
            type_description_1 = "o";
            goto frame_exception_exit_1;
        }
        goto frame_return_exit_1;
    }

#if 0
    RESTORE_FRAME_EXCEPTION( frame_bd0be69468a9187fdfbee75e4cfd5679 );
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto frame_no_exception_1;

    frame_return_exit_1:;
#if 0
    RESTORE_FRAME_EXCEPTION( frame_bd0be69468a9187fdfbee75e4cfd5679 );
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto try_return_handler_1;

    frame_exception_exit_1:;

#if 0
    RESTORE_FRAME_EXCEPTION( frame_bd0be69468a9187fdfbee75e4cfd5679 );
#endif

    if ( exception_tb == NULL )
    {
        exception_tb = MAKE_TRACEBACK( frame_bd0be69468a9187fdfbee75e4cfd5679, exception_lineno );
    }
    else if ( exception_tb->tb_frame != &frame_bd0be69468a9187fdfbee75e4cfd5679->m_frame )
    {
        exception_tb = ADD_TRACEBACK( exception_tb, frame_bd0be69468a9187fdfbee75e4cfd5679, exception_lineno );
    }

    // Attachs locals to frame if any.
    Nuitka_Frame_AttachLocals(
        (struct Nuitka_FrameObject *)frame_bd0be69468a9187fdfbee75e4cfd5679,
        type_description_1,
        par_self
    );


    // Release cached frame.
    if ( frame_bd0be69468a9187fdfbee75e4cfd5679 == cache_frame_bd0be69468a9187fdfbee75e4cfd5679 )
    {
        Py_DECREF( frame_bd0be69468a9187fdfbee75e4cfd5679 );
    }
    cache_frame_bd0be69468a9187fdfbee75e4cfd5679 = NULL;

    assertFrameObject( frame_bd0be69468a9187fdfbee75e4cfd5679 );

    // Put the previous frame back on top.
    popFrameStack();

    // Return the error.
    goto try_except_handler_1;

    frame_no_exception_1:;
    // tried codes exits in all cases
    NUITKA_CANNOT_GET_HERE( plistlib$$$function_10___repr__ );
    return NULL;
    // Return handler code:
    try_return_handler_1:;
    CHECK_OBJECT( (PyObject *)par_self );
    Py_DECREF( par_self );
    par_self = NULL;

    goto function_return_exit;
    // Exception handler code:
    try_except_handler_1:;
    exception_keeper_type_1 = exception_type;
    exception_keeper_value_1 = exception_value;
    exception_keeper_tb_1 = exception_tb;
    exception_keeper_lineno_1 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    CHECK_OBJECT( (PyObject *)par_self );
    Py_DECREF( par_self );
    par_self = NULL;

    // Re-raise.
    exception_type = exception_keeper_type_1;
    exception_value = exception_keeper_value_1;
    exception_tb = exception_keeper_tb_1;
    exception_lineno = exception_keeper_lineno_1;

    goto function_exception_exit;
    // End of try:

    // Return statement must have exited already.
    NUITKA_CANNOT_GET_HERE( plistlib$$$function_10___repr__ );
    return NULL;

function_exception_exit:
    assert( exception_type );
    RESTORE_ERROR_OCCURRED( exception_type, exception_value, exception_tb );

    return NULL;

function_return_exit:
   // Function cleanup code if any.


   // Actual function exit with return value, making sure we did not make
   // the error status worse despite non-NULL return.
   CHECK_OBJECT( tmp_return_value );
   assert( had_error || !ERROR_OCCURRED() );
   return tmp_return_value;
}


static PyObject *impl_plistlib$$$function_11__encode_base64( struct Nuitka_FunctionObject const *self, PyObject **python_pars )
{
    // Preserve error status for checks
#ifndef __NUITKA_NO_ASSERT__
    NUITKA_MAY_BE_UNUSED bool had_error = ERROR_OCCURRED();
#endif

    // Local variable declarations.
    PyObject *par_s = python_pars[ 0 ];
    PyObject *par_maxlinelength = python_pars[ 1 ];
    PyObject *var_maxbinsize = NULL;
    PyObject *var_pieces = NULL;
    PyObject *var_i = NULL;
    PyObject *var_chunk = NULL;
    PyObject *tmp_for_loop_1__for_iterator = NULL;
    PyObject *tmp_for_loop_1__iter_value = NULL;
    struct Nuitka_FrameObject *frame_eb47429ce69b824e6c93ceac84e00d77;
    NUITKA_MAY_BE_UNUSED char const *type_description_1 = NULL;
    PyObject *exception_type = NULL;
    PyObject *exception_value = NULL;
    PyTracebackObject *exception_tb = NULL;
    NUITKA_MAY_BE_UNUSED int exception_lineno = 0;
    PyObject *exception_keeper_type_1;
    PyObject *exception_keeper_value_1;
    PyTracebackObject *exception_keeper_tb_1;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_1;
    PyObject *tmp_return_value = NULL;
    static struct Nuitka_FrameObject *cache_frame_eb47429ce69b824e6c93ceac84e00d77 = NULL;
    PyObject *exception_keeper_type_2;
    PyObject *exception_keeper_value_2;
    PyTracebackObject *exception_keeper_tb_2;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_2;

    // Actual function body.
    // Tried code:
    MAKE_OR_REUSE_FRAME( cache_frame_eb47429ce69b824e6c93ceac84e00d77, codeobj_eb47429ce69b824e6c93ceac84e00d77, module_plistlib, sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *) );
    frame_eb47429ce69b824e6c93ceac84e00d77 = cache_frame_eb47429ce69b824e6c93ceac84e00d77;

    // Push the new frame as the currently active one.
    pushFrameStack( frame_eb47429ce69b824e6c93ceac84e00d77 );

    // Mark the frame object as in use, ref count 1 will be up for reuse.
    assert( Py_REFCNT( frame_eb47429ce69b824e6c93ceac84e00d77 ) == 2 ); // Frame stack

    // Framed code:
    {
        PyObject *tmp_assign_source_1;
        PyObject *tmp_left_name_1;
        PyObject *tmp_left_name_2;
        PyObject *tmp_right_name_1;
        PyObject *tmp_right_name_2;
        CHECK_OBJECT( par_maxlinelength );
        tmp_left_name_2 = par_maxlinelength;
        tmp_right_name_1 = const_int_pos_4;
        tmp_left_name_1 = BINARY_OPERATION_FLOORDIV( tmp_left_name_2, tmp_right_name_1 );
        if ( tmp_left_name_1 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 197;
            type_description_1 = "oooooo";
            goto frame_exception_exit_1;
        }
        tmp_right_name_2 = const_int_pos_3;
        tmp_assign_source_1 = BINARY_OPERATION_MUL( tmp_left_name_1, tmp_right_name_2 );
        Py_DECREF( tmp_left_name_1 );
        if ( tmp_assign_source_1 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 197;
            type_description_1 = "oooooo";
            goto frame_exception_exit_1;
        }
        assert( var_maxbinsize == NULL );
        var_maxbinsize = tmp_assign_source_1;
    }
    {
        PyObject *tmp_assign_source_2;
        tmp_assign_source_2 = PyList_New( 0 );
        assert( var_pieces == NULL );
        var_pieces = tmp_assign_source_2;
    }
    {
        PyObject *tmp_assign_source_3;
        PyObject *tmp_iter_arg_1;
        PyObject *tmp_xrange_low_1;
        PyObject *tmp_xrange_high_1;
        PyObject *tmp_len_arg_1;
        PyObject *tmp_xrange_step_1;
        tmp_xrange_low_1 = const_int_0;
        CHECK_OBJECT( par_s );
        tmp_len_arg_1 = par_s;
        tmp_xrange_high_1 = BUILTIN_LEN( tmp_len_arg_1 );
        if ( tmp_xrange_high_1 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 199;
            type_description_1 = "oooooo";
            goto frame_exception_exit_1;
        }
        CHECK_OBJECT( var_maxbinsize );
        tmp_xrange_step_1 = var_maxbinsize;
        tmp_iter_arg_1 = BUILTIN_XRANGE3( tmp_xrange_low_1, tmp_xrange_high_1, tmp_xrange_step_1 );
        Py_DECREF( tmp_xrange_high_1 );
        if ( tmp_iter_arg_1 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 199;
            type_description_1 = "oooooo";
            goto frame_exception_exit_1;
        }
        tmp_assign_source_3 = MAKE_ITERATOR( tmp_iter_arg_1 );
        Py_DECREF( tmp_iter_arg_1 );
        if ( tmp_assign_source_3 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 199;
            type_description_1 = "oooooo";
            goto frame_exception_exit_1;
        }
        assert( tmp_for_loop_1__for_iterator == NULL );
        tmp_for_loop_1__for_iterator = tmp_assign_source_3;
    }
    // Tried code:
    loop_start_1:;
    {
        PyObject *tmp_next_source_1;
        PyObject *tmp_assign_source_4;
        CHECK_OBJECT( tmp_for_loop_1__for_iterator );
        tmp_next_source_1 = tmp_for_loop_1__for_iterator;
        tmp_assign_source_4 = ITERATOR_NEXT( tmp_next_source_1 );
        if ( tmp_assign_source_4 == NULL )
        {
            if ( CHECK_AND_CLEAR_STOP_ITERATION_OCCURRED() )
            {

                goto loop_end_1;
            }
            else
            {

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
                type_description_1 = "oooooo";
                exception_lineno = 199;
                goto try_except_handler_2;
            }
        }

        {
            PyObject *old = tmp_for_loop_1__iter_value;
            tmp_for_loop_1__iter_value = tmp_assign_source_4;
            Py_XDECREF( old );
        }

    }
    {
        PyObject *tmp_assign_source_5;
        CHECK_OBJECT( tmp_for_loop_1__iter_value );
        tmp_assign_source_5 = tmp_for_loop_1__iter_value;
        {
            PyObject *old = var_i;
            var_i = tmp_assign_source_5;
            Py_INCREF( var_i );
            Py_XDECREF( old );
        }

    }
    {
        PyObject *tmp_assign_source_6;
        PyObject *tmp_subscribed_name_1;
        PyObject *tmp_subscript_name_1;
        PyObject *tmp_start_name_1;
        PyObject *tmp_stop_name_1;
        PyObject *tmp_left_name_3;
        PyObject *tmp_right_name_3;
        PyObject *tmp_step_name_1;
        CHECK_OBJECT( par_s );
        tmp_subscribed_name_1 = par_s;
        CHECK_OBJECT( var_i );
        tmp_start_name_1 = var_i;
        CHECK_OBJECT( var_i );
        tmp_left_name_3 = var_i;
        CHECK_OBJECT( var_maxbinsize );
        tmp_right_name_3 = var_maxbinsize;
        tmp_stop_name_1 = BINARY_OPERATION_ADD_OBJECT_OBJECT( tmp_left_name_3, tmp_right_name_3 );
        if ( tmp_stop_name_1 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 200;
            type_description_1 = "oooooo";
            goto try_except_handler_2;
        }
        tmp_step_name_1 = Py_None;
        tmp_subscript_name_1 = MAKE_SLICEOBJ3( tmp_start_name_1, tmp_stop_name_1, tmp_step_name_1 );
        Py_DECREF( tmp_stop_name_1 );
        assert( !(tmp_subscript_name_1 == NULL) );
        tmp_assign_source_6 = LOOKUP_SUBSCRIPT( tmp_subscribed_name_1, tmp_subscript_name_1 );
        Py_DECREF( tmp_subscript_name_1 );
        if ( tmp_assign_source_6 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 200;
            type_description_1 = "oooooo";
            goto try_except_handler_2;
        }
        {
            PyObject *old = var_chunk;
            var_chunk = tmp_assign_source_6;
            Py_XDECREF( old );
        }

    }
    {
        PyObject *tmp_called_name_1;
        PyObject *tmp_source_name_1;
        PyObject *tmp_call_result_1;
        PyObject *tmp_args_element_name_1;
        PyObject *tmp_called_instance_1;
        PyObject *tmp_mvar_value_1;
        PyObject *tmp_args_element_name_2;
        CHECK_OBJECT( var_pieces );
        tmp_source_name_1 = var_pieces;
        tmp_called_name_1 = LOOKUP_ATTRIBUTE( tmp_source_name_1, const_str_plain_append );
        if ( tmp_called_name_1 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 201;
            type_description_1 = "oooooo";
            goto try_except_handler_2;
        }
        tmp_mvar_value_1 = GET_STRING_DICT_VALUE( moduledict_plistlib, (Nuitka_StringObject *)const_str_plain_binascii );

        if (unlikely( tmp_mvar_value_1 == NULL ))
        {
            tmp_mvar_value_1 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_binascii );
        }

        if ( tmp_mvar_value_1 == NULL )
        {
            Py_DECREF( tmp_called_name_1 );
            exception_type = PyExc_NameError;
            Py_INCREF( exception_type );
            exception_value = PyUnicode_FromFormat( "name '%s' is not defined", "binascii" );
            exception_tb = NULL;
            NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
            CHAIN_EXCEPTION( exception_value );

            exception_lineno = 201;
            type_description_1 = "oooooo";
            goto try_except_handler_2;
        }

        tmp_called_instance_1 = tmp_mvar_value_1;
        CHECK_OBJECT( var_chunk );
        tmp_args_element_name_2 = var_chunk;
        frame_eb47429ce69b824e6c93ceac84e00d77->m_frame.f_lineno = 201;
        {
            PyObject *call_args[] = { tmp_args_element_name_2 };
            tmp_args_element_name_1 = CALL_METHOD_WITH_ARGS1( tmp_called_instance_1, const_str_plain_b2a_base64, call_args );
        }

        if ( tmp_args_element_name_1 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
            Py_DECREF( tmp_called_name_1 );

            exception_lineno = 201;
            type_description_1 = "oooooo";
            goto try_except_handler_2;
        }
        frame_eb47429ce69b824e6c93ceac84e00d77->m_frame.f_lineno = 201;
        {
            PyObject *call_args[] = { tmp_args_element_name_1 };
            tmp_call_result_1 = CALL_FUNCTION_WITH_ARGS1( tmp_called_name_1, call_args );
        }

        Py_DECREF( tmp_called_name_1 );
        Py_DECREF( tmp_args_element_name_1 );
        if ( tmp_call_result_1 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 201;
            type_description_1 = "oooooo";
            goto try_except_handler_2;
        }
        Py_DECREF( tmp_call_result_1 );
    }
    if ( CONSIDER_THREADING() == false )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 199;
        type_description_1 = "oooooo";
        goto try_except_handler_2;
    }
    goto loop_start_1;
    loop_end_1:;
    goto try_end_1;
    // Exception handler code:
    try_except_handler_2:;
    exception_keeper_type_1 = exception_type;
    exception_keeper_value_1 = exception_value;
    exception_keeper_tb_1 = exception_tb;
    exception_keeper_lineno_1 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    Py_XDECREF( tmp_for_loop_1__iter_value );
    tmp_for_loop_1__iter_value = NULL;

    CHECK_OBJECT( (PyObject *)tmp_for_loop_1__for_iterator );
    Py_DECREF( tmp_for_loop_1__for_iterator );
    tmp_for_loop_1__for_iterator = NULL;

    // Re-raise.
    exception_type = exception_keeper_type_1;
    exception_value = exception_keeper_value_1;
    exception_tb = exception_keeper_tb_1;
    exception_lineno = exception_keeper_lineno_1;

    goto frame_exception_exit_1;
    // End of try:
    try_end_1:;
    Py_XDECREF( tmp_for_loop_1__iter_value );
    tmp_for_loop_1__iter_value = NULL;

    CHECK_OBJECT( (PyObject *)tmp_for_loop_1__for_iterator );
    Py_DECREF( tmp_for_loop_1__for_iterator );
    tmp_for_loop_1__for_iterator = NULL;

    {
        PyObject *tmp_called_instance_2;
        PyObject *tmp_args_element_name_3;
        tmp_called_instance_2 = const_bytes_empty;
        CHECK_OBJECT( var_pieces );
        tmp_args_element_name_3 = var_pieces;
        frame_eb47429ce69b824e6c93ceac84e00d77->m_frame.f_lineno = 202;
        {
            PyObject *call_args[] = { tmp_args_element_name_3 };
            tmp_return_value = CALL_METHOD_WITH_ARGS1( tmp_called_instance_2, const_str_plain_join, call_args );
        }

        if ( tmp_return_value == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 202;
            type_description_1 = "oooooo";
            goto frame_exception_exit_1;
        }
        goto frame_return_exit_1;
    }

#if 0
    RESTORE_FRAME_EXCEPTION( frame_eb47429ce69b824e6c93ceac84e00d77 );
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto frame_no_exception_1;

    frame_return_exit_1:;
#if 0
    RESTORE_FRAME_EXCEPTION( frame_eb47429ce69b824e6c93ceac84e00d77 );
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto try_return_handler_1;

    frame_exception_exit_1:;

#if 0
    RESTORE_FRAME_EXCEPTION( frame_eb47429ce69b824e6c93ceac84e00d77 );
#endif

    if ( exception_tb == NULL )
    {
        exception_tb = MAKE_TRACEBACK( frame_eb47429ce69b824e6c93ceac84e00d77, exception_lineno );
    }
    else if ( exception_tb->tb_frame != &frame_eb47429ce69b824e6c93ceac84e00d77->m_frame )
    {
        exception_tb = ADD_TRACEBACK( exception_tb, frame_eb47429ce69b824e6c93ceac84e00d77, exception_lineno );
    }

    // Attachs locals to frame if any.
    Nuitka_Frame_AttachLocals(
        (struct Nuitka_FrameObject *)frame_eb47429ce69b824e6c93ceac84e00d77,
        type_description_1,
        par_s,
        par_maxlinelength,
        var_maxbinsize,
        var_pieces,
        var_i,
        var_chunk
    );


    // Release cached frame.
    if ( frame_eb47429ce69b824e6c93ceac84e00d77 == cache_frame_eb47429ce69b824e6c93ceac84e00d77 )
    {
        Py_DECREF( frame_eb47429ce69b824e6c93ceac84e00d77 );
    }
    cache_frame_eb47429ce69b824e6c93ceac84e00d77 = NULL;

    assertFrameObject( frame_eb47429ce69b824e6c93ceac84e00d77 );

    // Put the previous frame back on top.
    popFrameStack();

    // Return the error.
    goto try_except_handler_1;

    frame_no_exception_1:;
    // tried codes exits in all cases
    NUITKA_CANNOT_GET_HERE( plistlib$$$function_11__encode_base64 );
    return NULL;
    // Return handler code:
    try_return_handler_1:;
    CHECK_OBJECT( (PyObject *)par_s );
    Py_DECREF( par_s );
    par_s = NULL;

    CHECK_OBJECT( (PyObject *)par_maxlinelength );
    Py_DECREF( par_maxlinelength );
    par_maxlinelength = NULL;

    CHECK_OBJECT( (PyObject *)var_maxbinsize );
    Py_DECREF( var_maxbinsize );
    var_maxbinsize = NULL;

    CHECK_OBJECT( (PyObject *)var_pieces );
    Py_DECREF( var_pieces );
    var_pieces = NULL;

    Py_XDECREF( var_i );
    var_i = NULL;

    Py_XDECREF( var_chunk );
    var_chunk = NULL;

    goto function_return_exit;
    // Exception handler code:
    try_except_handler_1:;
    exception_keeper_type_2 = exception_type;
    exception_keeper_value_2 = exception_value;
    exception_keeper_tb_2 = exception_tb;
    exception_keeper_lineno_2 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    CHECK_OBJECT( (PyObject *)par_s );
    Py_DECREF( par_s );
    par_s = NULL;

    CHECK_OBJECT( (PyObject *)par_maxlinelength );
    Py_DECREF( par_maxlinelength );
    par_maxlinelength = NULL;

    Py_XDECREF( var_maxbinsize );
    var_maxbinsize = NULL;

    Py_XDECREF( var_pieces );
    var_pieces = NULL;

    Py_XDECREF( var_i );
    var_i = NULL;

    Py_XDECREF( var_chunk );
    var_chunk = NULL;

    // Re-raise.
    exception_type = exception_keeper_type_2;
    exception_value = exception_keeper_value_2;
    exception_tb = exception_keeper_tb_2;
    exception_lineno = exception_keeper_lineno_2;

    goto function_exception_exit;
    // End of try:

    // Return statement must have exited already.
    NUITKA_CANNOT_GET_HERE( plistlib$$$function_11__encode_base64 );
    return NULL;

function_exception_exit:
    assert( exception_type );
    RESTORE_ERROR_OCCURRED( exception_type, exception_value, exception_tb );

    return NULL;

function_return_exit:
   // Function cleanup code if any.


   // Actual function exit with return value, making sure we did not make
   // the error status worse despite non-NULL return.
   CHECK_OBJECT( tmp_return_value );
   assert( had_error || !ERROR_OCCURRED() );
   return tmp_return_value;
}


static PyObject *impl_plistlib$$$function_12__decode_base64( struct Nuitka_FunctionObject const *self, PyObject **python_pars )
{
    // Preserve error status for checks
#ifndef __NUITKA_NO_ASSERT__
    NUITKA_MAY_BE_UNUSED bool had_error = ERROR_OCCURRED();
#endif

    // Local variable declarations.
    PyObject *par_s = python_pars[ 0 ];
    struct Nuitka_FrameObject *frame_02c98b6f7544c4ced2c0d665794352de;
    NUITKA_MAY_BE_UNUSED char const *type_description_1 = NULL;
    int tmp_res;
    PyObject *exception_type = NULL;
    PyObject *exception_value = NULL;
    PyTracebackObject *exception_tb = NULL;
    NUITKA_MAY_BE_UNUSED int exception_lineno = 0;
    PyObject *tmp_return_value = NULL;
    static struct Nuitka_FrameObject *cache_frame_02c98b6f7544c4ced2c0d665794352de = NULL;
    PyObject *exception_keeper_type_1;
    PyObject *exception_keeper_value_1;
    PyTracebackObject *exception_keeper_tb_1;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_1;

    // Actual function body.
    // Tried code:
    MAKE_OR_REUSE_FRAME( cache_frame_02c98b6f7544c4ced2c0d665794352de, codeobj_02c98b6f7544c4ced2c0d665794352de, module_plistlib, sizeof(void *) );
    frame_02c98b6f7544c4ced2c0d665794352de = cache_frame_02c98b6f7544c4ced2c0d665794352de;

    // Push the new frame as the currently active one.
    pushFrameStack( frame_02c98b6f7544c4ced2c0d665794352de );

    // Mark the frame object as in use, ref count 1 will be up for reuse.
    assert( Py_REFCNT( frame_02c98b6f7544c4ced2c0d665794352de ) == 2 ); // Frame stack

    // Framed code:
    {
        nuitka_bool tmp_condition_result_1;
        PyObject *tmp_isinstance_inst_1;
        PyObject *tmp_isinstance_cls_1;
        CHECK_OBJECT( par_s );
        tmp_isinstance_inst_1 = par_s;
        tmp_isinstance_cls_1 = (PyObject *)&PyUnicode_Type;
        tmp_res = Nuitka_IsInstance( tmp_isinstance_inst_1, tmp_isinstance_cls_1 );
        if ( tmp_res == -1 )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 205;
            type_description_1 = "o";
            goto frame_exception_exit_1;
        }
        tmp_condition_result_1 = ( tmp_res != 0 ) ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
        if ( tmp_condition_result_1 == NUITKA_BOOL_TRUE )
        {
            goto branch_yes_1;
        }
        else
        {
            goto branch_no_1;
        }
        branch_yes_1:;
        {
            PyObject *tmp_called_name_1;
            PyObject *tmp_source_name_1;
            PyObject *tmp_mvar_value_1;
            PyObject *tmp_args_element_name_1;
            PyObject *tmp_called_instance_1;
            tmp_mvar_value_1 = GET_STRING_DICT_VALUE( moduledict_plistlib, (Nuitka_StringObject *)const_str_plain_binascii );

            if (unlikely( tmp_mvar_value_1 == NULL ))
            {
                tmp_mvar_value_1 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_binascii );
            }

            if ( tmp_mvar_value_1 == NULL )
            {

                exception_type = PyExc_NameError;
                Py_INCREF( exception_type );
                exception_value = PyUnicode_FromFormat( "name '%s' is not defined", "binascii" );
                exception_tb = NULL;
                NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
                CHAIN_EXCEPTION( exception_value );

                exception_lineno = 206;
                type_description_1 = "o";
                goto frame_exception_exit_1;
            }

            tmp_source_name_1 = tmp_mvar_value_1;
            tmp_called_name_1 = LOOKUP_ATTRIBUTE( tmp_source_name_1, const_str_plain_a2b_base64 );
            if ( tmp_called_name_1 == NULL )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 206;
                type_description_1 = "o";
                goto frame_exception_exit_1;
            }
            CHECK_OBJECT( par_s );
            tmp_called_instance_1 = par_s;
            frame_02c98b6f7544c4ced2c0d665794352de->m_frame.f_lineno = 206;
            tmp_args_element_name_1 = CALL_METHOD_WITH_ARGS1( tmp_called_instance_1, const_str_plain_encode, &PyTuple_GET_ITEM( const_tuple_str_digest_c075052d723d6707083e869a0e3659bb_tuple, 0 ) );

            if ( tmp_args_element_name_1 == NULL )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
                Py_DECREF( tmp_called_name_1 );

                exception_lineno = 206;
                type_description_1 = "o";
                goto frame_exception_exit_1;
            }
            frame_02c98b6f7544c4ced2c0d665794352de->m_frame.f_lineno = 206;
            {
                PyObject *call_args[] = { tmp_args_element_name_1 };
                tmp_return_value = CALL_FUNCTION_WITH_ARGS1( tmp_called_name_1, call_args );
            }

            Py_DECREF( tmp_called_name_1 );
            Py_DECREF( tmp_args_element_name_1 );
            if ( tmp_return_value == NULL )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 206;
                type_description_1 = "o";
                goto frame_exception_exit_1;
            }
            goto frame_return_exit_1;
        }
        goto branch_end_1;
        branch_no_1:;
        {
            PyObject *tmp_called_instance_2;
            PyObject *tmp_mvar_value_2;
            PyObject *tmp_args_element_name_2;
            tmp_mvar_value_2 = GET_STRING_DICT_VALUE( moduledict_plistlib, (Nuitka_StringObject *)const_str_plain_binascii );

            if (unlikely( tmp_mvar_value_2 == NULL ))
            {
                tmp_mvar_value_2 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_binascii );
            }

            if ( tmp_mvar_value_2 == NULL )
            {

                exception_type = PyExc_NameError;
                Py_INCREF( exception_type );
                exception_value = PyUnicode_FromFormat( "name '%s' is not defined", "binascii" );
                exception_tb = NULL;
                NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
                CHAIN_EXCEPTION( exception_value );

                exception_lineno = 209;
                type_description_1 = "o";
                goto frame_exception_exit_1;
            }

            tmp_called_instance_2 = tmp_mvar_value_2;
            CHECK_OBJECT( par_s );
            tmp_args_element_name_2 = par_s;
            frame_02c98b6f7544c4ced2c0d665794352de->m_frame.f_lineno = 209;
            {
                PyObject *call_args[] = { tmp_args_element_name_2 };
                tmp_return_value = CALL_METHOD_WITH_ARGS1( tmp_called_instance_2, const_str_plain_a2b_base64, call_args );
            }

            if ( tmp_return_value == NULL )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 209;
                type_description_1 = "o";
                goto frame_exception_exit_1;
            }
            goto frame_return_exit_1;
        }
        branch_end_1:;
    }

#if 0
    RESTORE_FRAME_EXCEPTION( frame_02c98b6f7544c4ced2c0d665794352de );
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto frame_no_exception_1;

    frame_return_exit_1:;
#if 0
    RESTORE_FRAME_EXCEPTION( frame_02c98b6f7544c4ced2c0d665794352de );
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto try_return_handler_1;

    frame_exception_exit_1:;

#if 0
    RESTORE_FRAME_EXCEPTION( frame_02c98b6f7544c4ced2c0d665794352de );
#endif

    if ( exception_tb == NULL )
    {
        exception_tb = MAKE_TRACEBACK( frame_02c98b6f7544c4ced2c0d665794352de, exception_lineno );
    }
    else if ( exception_tb->tb_frame != &frame_02c98b6f7544c4ced2c0d665794352de->m_frame )
    {
        exception_tb = ADD_TRACEBACK( exception_tb, frame_02c98b6f7544c4ced2c0d665794352de, exception_lineno );
    }

    // Attachs locals to frame if any.
    Nuitka_Frame_AttachLocals(
        (struct Nuitka_FrameObject *)frame_02c98b6f7544c4ced2c0d665794352de,
        type_description_1,
        par_s
    );


    // Release cached frame.
    if ( frame_02c98b6f7544c4ced2c0d665794352de == cache_frame_02c98b6f7544c4ced2c0d665794352de )
    {
        Py_DECREF( frame_02c98b6f7544c4ced2c0d665794352de );
    }
    cache_frame_02c98b6f7544c4ced2c0d665794352de = NULL;

    assertFrameObject( frame_02c98b6f7544c4ced2c0d665794352de );

    // Put the previous frame back on top.
    popFrameStack();

    // Return the error.
    goto try_except_handler_1;

    frame_no_exception_1:;
    // tried codes exits in all cases
    NUITKA_CANNOT_GET_HERE( plistlib$$$function_12__decode_base64 );
    return NULL;
    // Return handler code:
    try_return_handler_1:;
    CHECK_OBJECT( (PyObject *)par_s );
    Py_DECREF( par_s );
    par_s = NULL;

    goto function_return_exit;
    // Exception handler code:
    try_except_handler_1:;
    exception_keeper_type_1 = exception_type;
    exception_keeper_value_1 = exception_value;
    exception_keeper_tb_1 = exception_tb;
    exception_keeper_lineno_1 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    CHECK_OBJECT( (PyObject *)par_s );
    Py_DECREF( par_s );
    par_s = NULL;

    // Re-raise.
    exception_type = exception_keeper_type_1;
    exception_value = exception_keeper_value_1;
    exception_tb = exception_keeper_tb_1;
    exception_lineno = exception_keeper_lineno_1;

    goto function_exception_exit;
    // End of try:

    // Return statement must have exited already.
    NUITKA_CANNOT_GET_HERE( plistlib$$$function_12__decode_base64 );
    return NULL;

function_exception_exit:
    assert( exception_type );
    RESTORE_ERROR_OCCURRED( exception_type, exception_value, exception_tb );

    return NULL;

function_return_exit:
   // Function cleanup code if any.


   // Actual function exit with return value, making sure we did not make
   // the error status worse despite non-NULL return.
   CHECK_OBJECT( tmp_return_value );
   assert( had_error || !ERROR_OCCURRED() );
   return tmp_return_value;
}


static PyObject *impl_plistlib$$$function_13__date_from_string( struct Nuitka_FunctionObject const *self, PyObject **python_pars )
{
    // Preserve error status for checks
#ifndef __NUITKA_NO_ASSERT__
    NUITKA_MAY_BE_UNUSED bool had_error = ERROR_OCCURRED();
#endif

    // Local variable declarations.
    PyObject *par_s = python_pars[ 0 ];
    PyObject *var_gd = NULL;
    PyObject *var_lst = NULL;
    PyObject *var_key = NULL;
    PyObject *var_val = NULL;
    PyObject *tmp_for_loop_1__for_iterator = NULL;
    PyObject *tmp_for_loop_1__iter_value = NULL;
    struct Nuitka_FrameObject *frame_17d7052b9c3a53ead109ed86ee31520c;
    NUITKA_MAY_BE_UNUSED char const *type_description_1 = NULL;
    PyObject *exception_type = NULL;
    PyObject *exception_value = NULL;
    PyTracebackObject *exception_tb = NULL;
    NUITKA_MAY_BE_UNUSED int exception_lineno = 0;
    PyObject *exception_keeper_type_1;
    PyObject *exception_keeper_value_1;
    PyTracebackObject *exception_keeper_tb_1;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_1;
    PyObject *tmp_return_value = NULL;
    static struct Nuitka_FrameObject *cache_frame_17d7052b9c3a53ead109ed86ee31520c = NULL;
    PyObject *exception_keeper_type_2;
    PyObject *exception_keeper_value_2;
    PyTracebackObject *exception_keeper_tb_2;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_2;

    // Actual function body.
    // Tried code:
    MAKE_OR_REUSE_FRAME( cache_frame_17d7052b9c3a53ead109ed86ee31520c, codeobj_17d7052b9c3a53ead109ed86ee31520c, module_plistlib, sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *) );
    frame_17d7052b9c3a53ead109ed86ee31520c = cache_frame_17d7052b9c3a53ead109ed86ee31520c;

    // Push the new frame as the currently active one.
    pushFrameStack( frame_17d7052b9c3a53ead109ed86ee31520c );

    // Mark the frame object as in use, ref count 1 will be up for reuse.
    assert( Py_REFCNT( frame_17d7052b9c3a53ead109ed86ee31520c ) == 2 ); // Frame stack

    // Framed code:
    {
        PyObject *tmp_assign_source_1;
        PyObject *tmp_called_instance_1;
        PyObject *tmp_called_instance_2;
        PyObject *tmp_mvar_value_1;
        PyObject *tmp_args_element_name_1;
        tmp_mvar_value_1 = GET_STRING_DICT_VALUE( moduledict_plistlib, (Nuitka_StringObject *)const_str_plain__dateParser );

        if (unlikely( tmp_mvar_value_1 == NULL ))
        {
            tmp_mvar_value_1 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain__dateParser );
        }

        if ( tmp_mvar_value_1 == NULL )
        {

            exception_type = PyExc_NameError;
            Py_INCREF( exception_type );
            exception_value = PyUnicode_FromFormat( "name '%s' is not defined", "_dateParser" );
            exception_tb = NULL;
            NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
            CHAIN_EXCEPTION( exception_value );

            exception_lineno = 219;
            type_description_1 = "oNoooo";
            goto frame_exception_exit_1;
        }

        tmp_called_instance_2 = tmp_mvar_value_1;
        CHECK_OBJECT( par_s );
        tmp_args_element_name_1 = par_s;
        frame_17d7052b9c3a53ead109ed86ee31520c->m_frame.f_lineno = 219;
        {
            PyObject *call_args[] = { tmp_args_element_name_1 };
            tmp_called_instance_1 = CALL_METHOD_WITH_ARGS1( tmp_called_instance_2, const_str_plain_match, call_args );
        }

        if ( tmp_called_instance_1 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 219;
            type_description_1 = "oNoooo";
            goto frame_exception_exit_1;
        }
        frame_17d7052b9c3a53ead109ed86ee31520c->m_frame.f_lineno = 219;
        tmp_assign_source_1 = CALL_METHOD_NO_ARGS( tmp_called_instance_1, const_str_plain_groupdict );
        Py_DECREF( tmp_called_instance_1 );
        if ( tmp_assign_source_1 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 219;
            type_description_1 = "oNoooo";
            goto frame_exception_exit_1;
        }
        assert( var_gd == NULL );
        var_gd = tmp_assign_source_1;
    }
    {
        PyObject *tmp_assign_source_2;
        tmp_assign_source_2 = PyList_New( 0 );
        assert( var_lst == NULL );
        var_lst = tmp_assign_source_2;
    }
    {
        PyObject *tmp_assign_source_3;
        PyObject *tmp_iter_arg_1;
        tmp_iter_arg_1 = const_tuple_ca0747bf52cf4219b2eb6201591d1ad9_tuple;
        tmp_assign_source_3 = MAKE_ITERATOR( tmp_iter_arg_1 );
        assert( !(tmp_assign_source_3 == NULL) );
        assert( tmp_for_loop_1__for_iterator == NULL );
        tmp_for_loop_1__for_iterator = tmp_assign_source_3;
    }
    // Tried code:
    loop_start_1:;
    {
        PyObject *tmp_next_source_1;
        PyObject *tmp_assign_source_4;
        CHECK_OBJECT( tmp_for_loop_1__for_iterator );
        tmp_next_source_1 = tmp_for_loop_1__for_iterator;
        tmp_assign_source_4 = ITERATOR_NEXT( tmp_next_source_1 );
        if ( tmp_assign_source_4 == NULL )
        {
            if ( CHECK_AND_CLEAR_STOP_ITERATION_OCCURRED() )
            {

                goto loop_end_1;
            }
            else
            {

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
                type_description_1 = "oNoooo";
                exception_lineno = 221;
                goto try_except_handler_2;
            }
        }

        {
            PyObject *old = tmp_for_loop_1__iter_value;
            tmp_for_loop_1__iter_value = tmp_assign_source_4;
            Py_XDECREF( old );
        }

    }
    {
        PyObject *tmp_assign_source_5;
        CHECK_OBJECT( tmp_for_loop_1__iter_value );
        tmp_assign_source_5 = tmp_for_loop_1__iter_value;
        {
            PyObject *old = var_key;
            var_key = tmp_assign_source_5;
            Py_INCREF( var_key );
            Py_XDECREF( old );
        }

    }
    {
        PyObject *tmp_assign_source_6;
        PyObject *tmp_subscribed_name_1;
        PyObject *tmp_subscript_name_1;
        CHECK_OBJECT( var_gd );
        tmp_subscribed_name_1 = var_gd;
        CHECK_OBJECT( var_key );
        tmp_subscript_name_1 = var_key;
        tmp_assign_source_6 = LOOKUP_SUBSCRIPT( tmp_subscribed_name_1, tmp_subscript_name_1 );
        if ( tmp_assign_source_6 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 222;
            type_description_1 = "oNoooo";
            goto try_except_handler_2;
        }
        {
            PyObject *old = var_val;
            var_val = tmp_assign_source_6;
            Py_XDECREF( old );
        }

    }
    {
        nuitka_bool tmp_condition_result_1;
        PyObject *tmp_compexpr_left_1;
        PyObject *tmp_compexpr_right_1;
        CHECK_OBJECT( var_val );
        tmp_compexpr_left_1 = var_val;
        tmp_compexpr_right_1 = Py_None;
        tmp_condition_result_1 = ( tmp_compexpr_left_1 == tmp_compexpr_right_1 ) ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
        if ( tmp_condition_result_1 == NUITKA_BOOL_TRUE )
        {
            goto branch_yes_1;
        }
        else
        {
            goto branch_no_1;
        }
        branch_yes_1:;
        goto loop_end_1;
        branch_no_1:;
    }
    {
        PyObject *tmp_called_name_1;
        PyObject *tmp_source_name_1;
        PyObject *tmp_call_result_1;
        PyObject *tmp_args_element_name_2;
        PyObject *tmp_int_arg_1;
        CHECK_OBJECT( var_lst );
        tmp_source_name_1 = var_lst;
        tmp_called_name_1 = LOOKUP_ATTRIBUTE( tmp_source_name_1, const_str_plain_append );
        if ( tmp_called_name_1 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 225;
            type_description_1 = "oNoooo";
            goto try_except_handler_2;
        }
        CHECK_OBJECT( var_val );
        tmp_int_arg_1 = var_val;
        tmp_args_element_name_2 = PyNumber_Int( tmp_int_arg_1 );
        if ( tmp_args_element_name_2 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
            Py_DECREF( tmp_called_name_1 );

            exception_lineno = 225;
            type_description_1 = "oNoooo";
            goto try_except_handler_2;
        }
        frame_17d7052b9c3a53ead109ed86ee31520c->m_frame.f_lineno = 225;
        {
            PyObject *call_args[] = { tmp_args_element_name_2 };
            tmp_call_result_1 = CALL_FUNCTION_WITH_ARGS1( tmp_called_name_1, call_args );
        }

        Py_DECREF( tmp_called_name_1 );
        Py_DECREF( tmp_args_element_name_2 );
        if ( tmp_call_result_1 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 225;
            type_description_1 = "oNoooo";
            goto try_except_handler_2;
        }
        Py_DECREF( tmp_call_result_1 );
    }
    if ( CONSIDER_THREADING() == false )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 221;
        type_description_1 = "oNoooo";
        goto try_except_handler_2;
    }
    goto loop_start_1;
    loop_end_1:;
    goto try_end_1;
    // Exception handler code:
    try_except_handler_2:;
    exception_keeper_type_1 = exception_type;
    exception_keeper_value_1 = exception_value;
    exception_keeper_tb_1 = exception_tb;
    exception_keeper_lineno_1 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    Py_XDECREF( tmp_for_loop_1__iter_value );
    tmp_for_loop_1__iter_value = NULL;

    CHECK_OBJECT( (PyObject *)tmp_for_loop_1__for_iterator );
    Py_DECREF( tmp_for_loop_1__for_iterator );
    tmp_for_loop_1__for_iterator = NULL;

    // Re-raise.
    exception_type = exception_keeper_type_1;
    exception_value = exception_keeper_value_1;
    exception_tb = exception_keeper_tb_1;
    exception_lineno = exception_keeper_lineno_1;

    goto frame_exception_exit_1;
    // End of try:
    try_end_1:;
    Py_XDECREF( tmp_for_loop_1__iter_value );
    tmp_for_loop_1__iter_value = NULL;

    CHECK_OBJECT( (PyObject *)tmp_for_loop_1__for_iterator );
    Py_DECREF( tmp_for_loop_1__for_iterator );
    tmp_for_loop_1__for_iterator = NULL;

    {
        PyObject *tmp_dircall_arg1_1;
        PyObject *tmp_source_name_2;
        PyObject *tmp_mvar_value_2;
        PyObject *tmp_dircall_arg2_1;
        tmp_mvar_value_2 = GET_STRING_DICT_VALUE( moduledict_plistlib, (Nuitka_StringObject *)const_str_plain_datetime );

        if (unlikely( tmp_mvar_value_2 == NULL ))
        {
            tmp_mvar_value_2 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_datetime );
        }

        if ( tmp_mvar_value_2 == NULL )
        {

            exception_type = PyExc_NameError;
            Py_INCREF( exception_type );
            exception_value = PyUnicode_FromFormat( "name '%s' is not defined", "datetime" );
            exception_tb = NULL;
            NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
            CHAIN_EXCEPTION( exception_value );

            exception_lineno = 226;
            type_description_1 = "oNoooo";
            goto frame_exception_exit_1;
        }

        tmp_source_name_2 = tmp_mvar_value_2;
        tmp_dircall_arg1_1 = LOOKUP_ATTRIBUTE( tmp_source_name_2, const_str_plain_datetime );
        if ( tmp_dircall_arg1_1 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 226;
            type_description_1 = "oNoooo";
            goto frame_exception_exit_1;
        }
        CHECK_OBJECT( var_lst );
        tmp_dircall_arg2_1 = var_lst;
        Py_INCREF( tmp_dircall_arg2_1 );

        {
            PyObject *dir_call_args[] = {tmp_dircall_arg1_1, tmp_dircall_arg2_1};
            tmp_return_value = impl___internal__$$$function_2_complex_call_helper_star_list( dir_call_args );
        }
        if ( tmp_return_value == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 226;
            type_description_1 = "oNoooo";
            goto frame_exception_exit_1;
        }
        goto frame_return_exit_1;
    }

#if 0
    RESTORE_FRAME_EXCEPTION( frame_17d7052b9c3a53ead109ed86ee31520c );
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto frame_no_exception_1;

    frame_return_exit_1:;
#if 0
    RESTORE_FRAME_EXCEPTION( frame_17d7052b9c3a53ead109ed86ee31520c );
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto try_return_handler_1;

    frame_exception_exit_1:;

#if 0
    RESTORE_FRAME_EXCEPTION( frame_17d7052b9c3a53ead109ed86ee31520c );
#endif

    if ( exception_tb == NULL )
    {
        exception_tb = MAKE_TRACEBACK( frame_17d7052b9c3a53ead109ed86ee31520c, exception_lineno );
    }
    else if ( exception_tb->tb_frame != &frame_17d7052b9c3a53ead109ed86ee31520c->m_frame )
    {
        exception_tb = ADD_TRACEBACK( exception_tb, frame_17d7052b9c3a53ead109ed86ee31520c, exception_lineno );
    }

    // Attachs locals to frame if any.
    Nuitka_Frame_AttachLocals(
        (struct Nuitka_FrameObject *)frame_17d7052b9c3a53ead109ed86ee31520c,
        type_description_1,
        par_s,
        NULL,
        var_gd,
        var_lst,
        var_key,
        var_val
    );


    // Release cached frame.
    if ( frame_17d7052b9c3a53ead109ed86ee31520c == cache_frame_17d7052b9c3a53ead109ed86ee31520c )
    {
        Py_DECREF( frame_17d7052b9c3a53ead109ed86ee31520c );
    }
    cache_frame_17d7052b9c3a53ead109ed86ee31520c = NULL;

    assertFrameObject( frame_17d7052b9c3a53ead109ed86ee31520c );

    // Put the previous frame back on top.
    popFrameStack();

    // Return the error.
    goto try_except_handler_1;

    frame_no_exception_1:;
    // tried codes exits in all cases
    NUITKA_CANNOT_GET_HERE( plistlib$$$function_13__date_from_string );
    return NULL;
    // Return handler code:
    try_return_handler_1:;
    CHECK_OBJECT( (PyObject *)par_s );
    Py_DECREF( par_s );
    par_s = NULL;

    CHECK_OBJECT( (PyObject *)var_gd );
    Py_DECREF( var_gd );
    var_gd = NULL;

    CHECK_OBJECT( (PyObject *)var_lst );
    Py_DECREF( var_lst );
    var_lst = NULL;

    Py_XDECREF( var_key );
    var_key = NULL;

    Py_XDECREF( var_val );
    var_val = NULL;

    goto function_return_exit;
    // Exception handler code:
    try_except_handler_1:;
    exception_keeper_type_2 = exception_type;
    exception_keeper_value_2 = exception_value;
    exception_keeper_tb_2 = exception_tb;
    exception_keeper_lineno_2 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    CHECK_OBJECT( (PyObject *)par_s );
    Py_DECREF( par_s );
    par_s = NULL;

    Py_XDECREF( var_gd );
    var_gd = NULL;

    Py_XDECREF( var_lst );
    var_lst = NULL;

    Py_XDECREF( var_key );
    var_key = NULL;

    Py_XDECREF( var_val );
    var_val = NULL;

    // Re-raise.
    exception_type = exception_keeper_type_2;
    exception_value = exception_keeper_value_2;
    exception_tb = exception_keeper_tb_2;
    exception_lineno = exception_keeper_lineno_2;

    goto function_exception_exit;
    // End of try:

    // Return statement must have exited already.
    NUITKA_CANNOT_GET_HERE( plistlib$$$function_13__date_from_string );
    return NULL;

function_exception_exit:
    assert( exception_type );
    RESTORE_ERROR_OCCURRED( exception_type, exception_value, exception_tb );

    return NULL;

function_return_exit:
   // Function cleanup code if any.


   // Actual function exit with return value, making sure we did not make
   // the error status worse despite non-NULL return.
   CHECK_OBJECT( tmp_return_value );
   assert( had_error || !ERROR_OCCURRED() );
   return tmp_return_value;
}


static PyObject *impl_plistlib$$$function_14__date_to_string( struct Nuitka_FunctionObject const *self, PyObject **python_pars )
{
    // Preserve error status for checks
#ifndef __NUITKA_NO_ASSERT__
    NUITKA_MAY_BE_UNUSED bool had_error = ERROR_OCCURRED();
#endif

    // Local variable declarations.
    PyObject *par_d = python_pars[ 0 ];
    struct Nuitka_FrameObject *frame_b9429066ec0e7c0c6d166bbcdc671c14;
    NUITKA_MAY_BE_UNUSED char const *type_description_1 = NULL;
    PyObject *tmp_return_value = NULL;
    PyObject *exception_type = NULL;
    PyObject *exception_value = NULL;
    PyTracebackObject *exception_tb = NULL;
    NUITKA_MAY_BE_UNUSED int exception_lineno = 0;
    static struct Nuitka_FrameObject *cache_frame_b9429066ec0e7c0c6d166bbcdc671c14 = NULL;
    PyObject *exception_keeper_type_1;
    PyObject *exception_keeper_value_1;
    PyTracebackObject *exception_keeper_tb_1;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_1;

    // Actual function body.
    // Tried code:
    MAKE_OR_REUSE_FRAME( cache_frame_b9429066ec0e7c0c6d166bbcdc671c14, codeobj_b9429066ec0e7c0c6d166bbcdc671c14, module_plistlib, sizeof(void *) );
    frame_b9429066ec0e7c0c6d166bbcdc671c14 = cache_frame_b9429066ec0e7c0c6d166bbcdc671c14;

    // Push the new frame as the currently active one.
    pushFrameStack( frame_b9429066ec0e7c0c6d166bbcdc671c14 );

    // Mark the frame object as in use, ref count 1 will be up for reuse.
    assert( Py_REFCNT( frame_b9429066ec0e7c0c6d166bbcdc671c14 ) == 2 ); // Frame stack

    // Framed code:
    {
        PyObject *tmp_left_name_1;
        PyObject *tmp_right_name_1;
        PyObject *tmp_tuple_element_1;
        PyObject *tmp_source_name_1;
        PyObject *tmp_source_name_2;
        PyObject *tmp_source_name_3;
        PyObject *tmp_source_name_4;
        PyObject *tmp_source_name_5;
        PyObject *tmp_source_name_6;
        tmp_left_name_1 = const_str_digest_44d5b97bfcdc23fe8972f889bcf9f31b;
        CHECK_OBJECT( par_d );
        tmp_source_name_1 = par_d;
        tmp_tuple_element_1 = LOOKUP_ATTRIBUTE( tmp_source_name_1, const_str_plain_year );
        if ( tmp_tuple_element_1 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 231;
            type_description_1 = "o";
            goto frame_exception_exit_1;
        }
        tmp_right_name_1 = PyTuple_New( 6 );
        PyTuple_SET_ITEM( tmp_right_name_1, 0, tmp_tuple_element_1 );
        CHECK_OBJECT( par_d );
        tmp_source_name_2 = par_d;
        tmp_tuple_element_1 = LOOKUP_ATTRIBUTE( tmp_source_name_2, const_str_plain_month );
        if ( tmp_tuple_element_1 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
            Py_DECREF( tmp_right_name_1 );

            exception_lineno = 231;
            type_description_1 = "o";
            goto frame_exception_exit_1;
        }
        PyTuple_SET_ITEM( tmp_right_name_1, 1, tmp_tuple_element_1 );
        CHECK_OBJECT( par_d );
        tmp_source_name_3 = par_d;
        tmp_tuple_element_1 = LOOKUP_ATTRIBUTE( tmp_source_name_3, const_str_plain_day );
        if ( tmp_tuple_element_1 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
            Py_DECREF( tmp_right_name_1 );

            exception_lineno = 231;
            type_description_1 = "o";
            goto frame_exception_exit_1;
        }
        PyTuple_SET_ITEM( tmp_right_name_1, 2, tmp_tuple_element_1 );
        CHECK_OBJECT( par_d );
        tmp_source_name_4 = par_d;
        tmp_tuple_element_1 = LOOKUP_ATTRIBUTE( tmp_source_name_4, const_str_plain_hour );
        if ( tmp_tuple_element_1 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
            Py_DECREF( tmp_right_name_1 );

            exception_lineno = 232;
            type_description_1 = "o";
            goto frame_exception_exit_1;
        }
        PyTuple_SET_ITEM( tmp_right_name_1, 3, tmp_tuple_element_1 );
        CHECK_OBJECT( par_d );
        tmp_source_name_5 = par_d;
        tmp_tuple_element_1 = LOOKUP_ATTRIBUTE( tmp_source_name_5, const_str_plain_minute );
        if ( tmp_tuple_element_1 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
            Py_DECREF( tmp_right_name_1 );

            exception_lineno = 232;
            type_description_1 = "o";
            goto frame_exception_exit_1;
        }
        PyTuple_SET_ITEM( tmp_right_name_1, 4, tmp_tuple_element_1 );
        CHECK_OBJECT( par_d );
        tmp_source_name_6 = par_d;
        tmp_tuple_element_1 = LOOKUP_ATTRIBUTE( tmp_source_name_6, const_str_plain_second );
        if ( tmp_tuple_element_1 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
            Py_DECREF( tmp_right_name_1 );

            exception_lineno = 232;
            type_description_1 = "o";
            goto frame_exception_exit_1;
        }
        PyTuple_SET_ITEM( tmp_right_name_1, 5, tmp_tuple_element_1 );
        tmp_return_value = BINARY_OPERATION_REMAINDER( tmp_left_name_1, tmp_right_name_1 );
        Py_DECREF( tmp_right_name_1 );
        if ( tmp_return_value == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 230;
            type_description_1 = "o";
            goto frame_exception_exit_1;
        }
        goto frame_return_exit_1;
    }

#if 0
    RESTORE_FRAME_EXCEPTION( frame_b9429066ec0e7c0c6d166bbcdc671c14 );
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto frame_no_exception_1;

    frame_return_exit_1:;
#if 0
    RESTORE_FRAME_EXCEPTION( frame_b9429066ec0e7c0c6d166bbcdc671c14 );
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto try_return_handler_1;

    frame_exception_exit_1:;

#if 0
    RESTORE_FRAME_EXCEPTION( frame_b9429066ec0e7c0c6d166bbcdc671c14 );
#endif

    if ( exception_tb == NULL )
    {
        exception_tb = MAKE_TRACEBACK( frame_b9429066ec0e7c0c6d166bbcdc671c14, exception_lineno );
    }
    else if ( exception_tb->tb_frame != &frame_b9429066ec0e7c0c6d166bbcdc671c14->m_frame )
    {
        exception_tb = ADD_TRACEBACK( exception_tb, frame_b9429066ec0e7c0c6d166bbcdc671c14, exception_lineno );
    }

    // Attachs locals to frame if any.
    Nuitka_Frame_AttachLocals(
        (struct Nuitka_FrameObject *)frame_b9429066ec0e7c0c6d166bbcdc671c14,
        type_description_1,
        par_d
    );


    // Release cached frame.
    if ( frame_b9429066ec0e7c0c6d166bbcdc671c14 == cache_frame_b9429066ec0e7c0c6d166bbcdc671c14 )
    {
        Py_DECREF( frame_b9429066ec0e7c0c6d166bbcdc671c14 );
    }
    cache_frame_b9429066ec0e7c0c6d166bbcdc671c14 = NULL;

    assertFrameObject( frame_b9429066ec0e7c0c6d166bbcdc671c14 );

    // Put the previous frame back on top.
    popFrameStack();

    // Return the error.
    goto try_except_handler_1;

    frame_no_exception_1:;
    // tried codes exits in all cases
    NUITKA_CANNOT_GET_HERE( plistlib$$$function_14__date_to_string );
    return NULL;
    // Return handler code:
    try_return_handler_1:;
    CHECK_OBJECT( (PyObject *)par_d );
    Py_DECREF( par_d );
    par_d = NULL;

    goto function_return_exit;
    // Exception handler code:
    try_except_handler_1:;
    exception_keeper_type_1 = exception_type;
    exception_keeper_value_1 = exception_value;
    exception_keeper_tb_1 = exception_tb;
    exception_keeper_lineno_1 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    CHECK_OBJECT( (PyObject *)par_d );
    Py_DECREF( par_d );
    par_d = NULL;

    // Re-raise.
    exception_type = exception_keeper_type_1;
    exception_value = exception_keeper_value_1;
    exception_tb = exception_keeper_tb_1;
    exception_lineno = exception_keeper_lineno_1;

    goto function_exception_exit;
    // End of try:

    // Return statement must have exited already.
    NUITKA_CANNOT_GET_HERE( plistlib$$$function_14__date_to_string );
    return NULL;

function_exception_exit:
    assert( exception_type );
    RESTORE_ERROR_OCCURRED( exception_type, exception_value, exception_tb );

    return NULL;

function_return_exit:
   // Function cleanup code if any.


   // Actual function exit with return value, making sure we did not make
   // the error status worse despite non-NULL return.
   CHECK_OBJECT( tmp_return_value );
   assert( had_error || !ERROR_OCCURRED() );
   return tmp_return_value;
}


static PyObject *impl_plistlib$$$function_15__escape( struct Nuitka_FunctionObject const *self, PyObject **python_pars )
{
    // Preserve error status for checks
#ifndef __NUITKA_NO_ASSERT__
    NUITKA_MAY_BE_UNUSED bool had_error = ERROR_OCCURRED();
#endif

    // Local variable declarations.
    PyObject *par_text = python_pars[ 0 ];
    PyObject *var_m = NULL;
    struct Nuitka_FrameObject *frame_0b4c9aa5657ccaeb016e84e0b5e47236;
    NUITKA_MAY_BE_UNUSED char const *type_description_1 = NULL;
    PyObject *exception_type = NULL;
    PyObject *exception_value = NULL;
    PyTracebackObject *exception_tb = NULL;
    NUITKA_MAY_BE_UNUSED int exception_lineno = 0;
    static struct Nuitka_FrameObject *cache_frame_0b4c9aa5657ccaeb016e84e0b5e47236 = NULL;
    PyObject *tmp_return_value = NULL;
    PyObject *exception_keeper_type_1;
    PyObject *exception_keeper_value_1;
    PyTracebackObject *exception_keeper_tb_1;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_1;

    // Actual function body.
    // Tried code:
    MAKE_OR_REUSE_FRAME( cache_frame_0b4c9aa5657ccaeb016e84e0b5e47236, codeobj_0b4c9aa5657ccaeb016e84e0b5e47236, module_plistlib, sizeof(void *)+sizeof(void *) );
    frame_0b4c9aa5657ccaeb016e84e0b5e47236 = cache_frame_0b4c9aa5657ccaeb016e84e0b5e47236;

    // Push the new frame as the currently active one.
    pushFrameStack( frame_0b4c9aa5657ccaeb016e84e0b5e47236 );

    // Mark the frame object as in use, ref count 1 will be up for reuse.
    assert( Py_REFCNT( frame_0b4c9aa5657ccaeb016e84e0b5e47236 ) == 2 ); // Frame stack

    // Framed code:
    {
        PyObject *tmp_assign_source_1;
        PyObject *tmp_called_instance_1;
        PyObject *tmp_mvar_value_1;
        PyObject *tmp_args_element_name_1;
        tmp_mvar_value_1 = GET_STRING_DICT_VALUE( moduledict_plistlib, (Nuitka_StringObject *)const_str_plain__controlCharPat );

        if (unlikely( tmp_mvar_value_1 == NULL ))
        {
            tmp_mvar_value_1 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain__controlCharPat );
        }

        if ( tmp_mvar_value_1 == NULL )
        {

            exception_type = PyExc_NameError;
            Py_INCREF( exception_type );
            exception_value = PyUnicode_FromFormat( "name '%s' is not defined", "_controlCharPat" );
            exception_tb = NULL;
            NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
            CHAIN_EXCEPTION( exception_value );

            exception_lineno = 236;
            type_description_1 = "oo";
            goto frame_exception_exit_1;
        }

        tmp_called_instance_1 = tmp_mvar_value_1;
        CHECK_OBJECT( par_text );
        tmp_args_element_name_1 = par_text;
        frame_0b4c9aa5657ccaeb016e84e0b5e47236->m_frame.f_lineno = 236;
        {
            PyObject *call_args[] = { tmp_args_element_name_1 };
            tmp_assign_source_1 = CALL_METHOD_WITH_ARGS1( tmp_called_instance_1, const_str_plain_search, call_args );
        }

        if ( tmp_assign_source_1 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 236;
            type_description_1 = "oo";
            goto frame_exception_exit_1;
        }
        assert( var_m == NULL );
        var_m = tmp_assign_source_1;
    }
    {
        nuitka_bool tmp_condition_result_1;
        PyObject *tmp_compexpr_left_1;
        PyObject *tmp_compexpr_right_1;
        CHECK_OBJECT( var_m );
        tmp_compexpr_left_1 = var_m;
        tmp_compexpr_right_1 = Py_None;
        tmp_condition_result_1 = ( tmp_compexpr_left_1 != tmp_compexpr_right_1 ) ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
        if ( tmp_condition_result_1 == NUITKA_BOOL_TRUE )
        {
            goto branch_yes_1;
        }
        else
        {
            goto branch_no_1;
        }
        branch_yes_1:;
        {
            PyObject *tmp_raise_type_1;
            PyObject *tmp_make_exception_arg_1;
            tmp_make_exception_arg_1 = const_str_digest_9651dd0449a14ad5904ac274e123ee0d;
            frame_0b4c9aa5657ccaeb016e84e0b5e47236->m_frame.f_lineno = 238;
            {
                PyObject *call_args[] = { tmp_make_exception_arg_1 };
                tmp_raise_type_1 = CALL_FUNCTION_WITH_ARGS1( PyExc_ValueError, call_args );
            }

            assert( !(tmp_raise_type_1 == NULL) );
            exception_type = tmp_raise_type_1;
            exception_lineno = 238;
            RAISE_EXCEPTION_WITH_TYPE( &exception_type, &exception_value, &exception_tb );
            type_description_1 = "oo";
            goto frame_exception_exit_1;
        }
        branch_no_1:;
    }
    {
        PyObject *tmp_assign_source_2;
        PyObject *tmp_called_instance_2;
        CHECK_OBJECT( par_text );
        tmp_called_instance_2 = par_text;
        frame_0b4c9aa5657ccaeb016e84e0b5e47236->m_frame.f_lineno = 240;
        tmp_assign_source_2 = CALL_METHOD_WITH_ARGS2( tmp_called_instance_2, const_str_plain_replace, &PyTuple_GET_ITEM( const_tuple_str_digest_7ca129d2d421fe965ad48cbb290b579b_str_newline_tuple, 0 ) );

        if ( tmp_assign_source_2 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 240;
            type_description_1 = "oo";
            goto frame_exception_exit_1;
        }
        {
            PyObject *old = par_text;
            assert( old != NULL );
            par_text = tmp_assign_source_2;
            Py_DECREF( old );
        }

    }
    {
        PyObject *tmp_assign_source_3;
        PyObject *tmp_called_instance_3;
        CHECK_OBJECT( par_text );
        tmp_called_instance_3 = par_text;
        frame_0b4c9aa5657ccaeb016e84e0b5e47236->m_frame.f_lineno = 241;
        tmp_assign_source_3 = CALL_METHOD_WITH_ARGS2( tmp_called_instance_3, const_str_plain_replace, &PyTuple_GET_ITEM( const_tuple_str_chr_13_str_newline_tuple, 0 ) );

        if ( tmp_assign_source_3 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 241;
            type_description_1 = "oo";
            goto frame_exception_exit_1;
        }
        {
            PyObject *old = par_text;
            assert( old != NULL );
            par_text = tmp_assign_source_3;
            Py_DECREF( old );
        }

    }
    {
        PyObject *tmp_assign_source_4;
        PyObject *tmp_called_instance_4;
        CHECK_OBJECT( par_text );
        tmp_called_instance_4 = par_text;
        frame_0b4c9aa5657ccaeb016e84e0b5e47236->m_frame.f_lineno = 242;
        tmp_assign_source_4 = CALL_METHOD_WITH_ARGS2( tmp_called_instance_4, const_str_plain_replace, &PyTuple_GET_ITEM( const_tuple_str_chr_38_str_digest_945228044f484d0c86a3cdf3a6e4cbbd_tuple, 0 ) );

        if ( tmp_assign_source_4 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 242;
            type_description_1 = "oo";
            goto frame_exception_exit_1;
        }
        {
            PyObject *old = par_text;
            assert( old != NULL );
            par_text = tmp_assign_source_4;
            Py_DECREF( old );
        }

    }
    {
        PyObject *tmp_assign_source_5;
        PyObject *tmp_called_instance_5;
        CHECK_OBJECT( par_text );
        tmp_called_instance_5 = par_text;
        frame_0b4c9aa5657ccaeb016e84e0b5e47236->m_frame.f_lineno = 243;
        tmp_assign_source_5 = CALL_METHOD_WITH_ARGS2( tmp_called_instance_5, const_str_plain_replace, &PyTuple_GET_ITEM( const_tuple_str_chr_60_str_digest_25fd5ead3f086addba74ff5e559ee564_tuple, 0 ) );

        if ( tmp_assign_source_5 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 243;
            type_description_1 = "oo";
            goto frame_exception_exit_1;
        }
        {
            PyObject *old = par_text;
            assert( old != NULL );
            par_text = tmp_assign_source_5;
            Py_DECREF( old );
        }

    }
    {
        PyObject *tmp_assign_source_6;
        PyObject *tmp_called_instance_6;
        CHECK_OBJECT( par_text );
        tmp_called_instance_6 = par_text;
        frame_0b4c9aa5657ccaeb016e84e0b5e47236->m_frame.f_lineno = 244;
        tmp_assign_source_6 = CALL_METHOD_WITH_ARGS2( tmp_called_instance_6, const_str_plain_replace, &PyTuple_GET_ITEM( const_tuple_str_chr_62_str_digest_f8a05ce6419eb433bc14bb5bfb3e62be_tuple, 0 ) );

        if ( tmp_assign_source_6 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 244;
            type_description_1 = "oo";
            goto frame_exception_exit_1;
        }
        {
            PyObject *old = par_text;
            assert( old != NULL );
            par_text = tmp_assign_source_6;
            Py_DECREF( old );
        }

    }

#if 0
    RESTORE_FRAME_EXCEPTION( frame_0b4c9aa5657ccaeb016e84e0b5e47236 );
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto frame_no_exception_1;

    frame_exception_exit_1:;

#if 0
    RESTORE_FRAME_EXCEPTION( frame_0b4c9aa5657ccaeb016e84e0b5e47236 );
#endif

    if ( exception_tb == NULL )
    {
        exception_tb = MAKE_TRACEBACK( frame_0b4c9aa5657ccaeb016e84e0b5e47236, exception_lineno );
    }
    else if ( exception_tb->tb_frame != &frame_0b4c9aa5657ccaeb016e84e0b5e47236->m_frame )
    {
        exception_tb = ADD_TRACEBACK( exception_tb, frame_0b4c9aa5657ccaeb016e84e0b5e47236, exception_lineno );
    }

    // Attachs locals to frame if any.
    Nuitka_Frame_AttachLocals(
        (struct Nuitka_FrameObject *)frame_0b4c9aa5657ccaeb016e84e0b5e47236,
        type_description_1,
        par_text,
        var_m
    );


    // Release cached frame.
    if ( frame_0b4c9aa5657ccaeb016e84e0b5e47236 == cache_frame_0b4c9aa5657ccaeb016e84e0b5e47236 )
    {
        Py_DECREF( frame_0b4c9aa5657ccaeb016e84e0b5e47236 );
    }
    cache_frame_0b4c9aa5657ccaeb016e84e0b5e47236 = NULL;

    assertFrameObject( frame_0b4c9aa5657ccaeb016e84e0b5e47236 );

    // Put the previous frame back on top.
    popFrameStack();

    // Return the error.
    goto try_except_handler_1;

    frame_no_exception_1:;
    CHECK_OBJECT( par_text );
    tmp_return_value = par_text;
    Py_INCREF( tmp_return_value );
    goto try_return_handler_1;
    // tried codes exits in all cases
    NUITKA_CANNOT_GET_HERE( plistlib$$$function_15__escape );
    return NULL;
    // Return handler code:
    try_return_handler_1:;
    CHECK_OBJECT( (PyObject *)par_text );
    Py_DECREF( par_text );
    par_text = NULL;

    CHECK_OBJECT( (PyObject *)var_m );
    Py_DECREF( var_m );
    var_m = NULL;

    goto function_return_exit;
    // Exception handler code:
    try_except_handler_1:;
    exception_keeper_type_1 = exception_type;
    exception_keeper_value_1 = exception_value;
    exception_keeper_tb_1 = exception_tb;
    exception_keeper_lineno_1 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    CHECK_OBJECT( (PyObject *)par_text );
    Py_DECREF( par_text );
    par_text = NULL;

    Py_XDECREF( var_m );
    var_m = NULL;

    // Re-raise.
    exception_type = exception_keeper_type_1;
    exception_value = exception_keeper_value_1;
    exception_tb = exception_keeper_tb_1;
    exception_lineno = exception_keeper_lineno_1;

    goto function_exception_exit;
    // End of try:

    // Return statement must have exited already.
    NUITKA_CANNOT_GET_HERE( plistlib$$$function_15__escape );
    return NULL;

function_exception_exit:
    assert( exception_type );
    RESTORE_ERROR_OCCURRED( exception_type, exception_value, exception_tb );

    return NULL;

function_return_exit:
   // Function cleanup code if any.


   // Actual function exit with return value, making sure we did not make
   // the error status worse despite non-NULL return.
   CHECK_OBJECT( tmp_return_value );
   assert( had_error || !ERROR_OCCURRED() );
   return tmp_return_value;
}


static PyObject *impl_plistlib$$$function_16___init__( struct Nuitka_FunctionObject const *self, PyObject **python_pars )
{
    // Preserve error status for checks
#ifndef __NUITKA_NO_ASSERT__
    NUITKA_MAY_BE_UNUSED bool had_error = ERROR_OCCURRED();
#endif

    // Local variable declarations.
    PyObject *par_self = python_pars[ 0 ];
    PyObject *par_use_builtin_types = python_pars[ 1 ];
    PyObject *par_dict_type = python_pars[ 2 ];
    struct Nuitka_FrameObject *frame_f4d3ab61dc67f46b7466c1806f9ea741;
    NUITKA_MAY_BE_UNUSED char const *type_description_1 = NULL;
    bool tmp_result;
    PyObject *exception_type = NULL;
    PyObject *exception_value = NULL;
    PyTracebackObject *exception_tb = NULL;
    NUITKA_MAY_BE_UNUSED int exception_lineno = 0;
    static struct Nuitka_FrameObject *cache_frame_f4d3ab61dc67f46b7466c1806f9ea741 = NULL;
    PyObject *tmp_return_value = NULL;
    PyObject *exception_keeper_type_1;
    PyObject *exception_keeper_value_1;
    PyTracebackObject *exception_keeper_tb_1;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_1;

    // Actual function body.
    // Tried code:
    MAKE_OR_REUSE_FRAME( cache_frame_f4d3ab61dc67f46b7466c1806f9ea741, codeobj_f4d3ab61dc67f46b7466c1806f9ea741, module_plistlib, sizeof(void *)+sizeof(void *)+sizeof(void *) );
    frame_f4d3ab61dc67f46b7466c1806f9ea741 = cache_frame_f4d3ab61dc67f46b7466c1806f9ea741;

    // Push the new frame as the currently active one.
    pushFrameStack( frame_f4d3ab61dc67f46b7466c1806f9ea741 );

    // Mark the frame object as in use, ref count 1 will be up for reuse.
    assert( Py_REFCNT( frame_f4d3ab61dc67f46b7466c1806f9ea741 ) == 2 ); // Frame stack

    // Framed code:
    {
        PyObject *tmp_assattr_name_1;
        PyObject *tmp_assattr_target_1;
        tmp_assattr_name_1 = PyList_New( 0 );
        CHECK_OBJECT( par_self );
        tmp_assattr_target_1 = par_self;
        tmp_result = SET_ATTRIBUTE( tmp_assattr_target_1, const_str_plain_stack, tmp_assattr_name_1 );
        Py_DECREF( tmp_assattr_name_1 );
        if ( tmp_result == false )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 249;
            type_description_1 = "ooo";
            goto frame_exception_exit_1;
        }
    }
    {
        PyObject *tmp_assattr_name_2;
        PyObject *tmp_assattr_target_2;
        tmp_assattr_name_2 = Py_None;
        CHECK_OBJECT( par_self );
        tmp_assattr_target_2 = par_self;
        tmp_result = SET_ATTRIBUTE( tmp_assattr_target_2, const_str_plain_current_key, tmp_assattr_name_2 );
        if ( tmp_result == false )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 250;
            type_description_1 = "ooo";
            goto frame_exception_exit_1;
        }
    }
    {
        PyObject *tmp_assattr_name_3;
        PyObject *tmp_assattr_target_3;
        tmp_assattr_name_3 = Py_None;
        CHECK_OBJECT( par_self );
        tmp_assattr_target_3 = par_self;
        tmp_result = SET_ATTRIBUTE( tmp_assattr_target_3, const_str_plain_root, tmp_assattr_name_3 );
        if ( tmp_result == false )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 251;
            type_description_1 = "ooo";
            goto frame_exception_exit_1;
        }
    }
    {
        PyObject *tmp_assattr_name_4;
        PyObject *tmp_assattr_target_4;
        CHECK_OBJECT( par_use_builtin_types );
        tmp_assattr_name_4 = par_use_builtin_types;
        CHECK_OBJECT( par_self );
        tmp_assattr_target_4 = par_self;
        tmp_result = SET_ATTRIBUTE( tmp_assattr_target_4, const_str_plain__use_builtin_types, tmp_assattr_name_4 );
        if ( tmp_result == false )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 252;
            type_description_1 = "ooo";
            goto frame_exception_exit_1;
        }
    }
    {
        PyObject *tmp_assattr_name_5;
        PyObject *tmp_assattr_target_5;
        CHECK_OBJECT( par_dict_type );
        tmp_assattr_name_5 = par_dict_type;
        CHECK_OBJECT( par_self );
        tmp_assattr_target_5 = par_self;
        tmp_result = SET_ATTRIBUTE( tmp_assattr_target_5, const_str_plain__dict_type, tmp_assattr_name_5 );
        if ( tmp_result == false )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 253;
            type_description_1 = "ooo";
            goto frame_exception_exit_1;
        }
    }

#if 0
    RESTORE_FRAME_EXCEPTION( frame_f4d3ab61dc67f46b7466c1806f9ea741 );
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto frame_no_exception_1;

    frame_exception_exit_1:;

#if 0
    RESTORE_FRAME_EXCEPTION( frame_f4d3ab61dc67f46b7466c1806f9ea741 );
#endif

    if ( exception_tb == NULL )
    {
        exception_tb = MAKE_TRACEBACK( frame_f4d3ab61dc67f46b7466c1806f9ea741, exception_lineno );
    }
    else if ( exception_tb->tb_frame != &frame_f4d3ab61dc67f46b7466c1806f9ea741->m_frame )
    {
        exception_tb = ADD_TRACEBACK( exception_tb, frame_f4d3ab61dc67f46b7466c1806f9ea741, exception_lineno );
    }

    // Attachs locals to frame if any.
    Nuitka_Frame_AttachLocals(
        (struct Nuitka_FrameObject *)frame_f4d3ab61dc67f46b7466c1806f9ea741,
        type_description_1,
        par_self,
        par_use_builtin_types,
        par_dict_type
    );


    // Release cached frame.
    if ( frame_f4d3ab61dc67f46b7466c1806f9ea741 == cache_frame_f4d3ab61dc67f46b7466c1806f9ea741 )
    {
        Py_DECREF( frame_f4d3ab61dc67f46b7466c1806f9ea741 );
    }
    cache_frame_f4d3ab61dc67f46b7466c1806f9ea741 = NULL;

    assertFrameObject( frame_f4d3ab61dc67f46b7466c1806f9ea741 );

    // Put the previous frame back on top.
    popFrameStack();

    // Return the error.
    goto try_except_handler_1;

    frame_no_exception_1:;
    tmp_return_value = Py_None;
    Py_INCREF( tmp_return_value );
    goto try_return_handler_1;
    // tried codes exits in all cases
    NUITKA_CANNOT_GET_HERE( plistlib$$$function_16___init__ );
    return NULL;
    // Return handler code:
    try_return_handler_1:;
    CHECK_OBJECT( (PyObject *)par_self );
    Py_DECREF( par_self );
    par_self = NULL;

    CHECK_OBJECT( (PyObject *)par_use_builtin_types );
    Py_DECREF( par_use_builtin_types );
    par_use_builtin_types = NULL;

    CHECK_OBJECT( (PyObject *)par_dict_type );
    Py_DECREF( par_dict_type );
    par_dict_type = NULL;

    goto function_return_exit;
    // Exception handler code:
    try_except_handler_1:;
    exception_keeper_type_1 = exception_type;
    exception_keeper_value_1 = exception_value;
    exception_keeper_tb_1 = exception_tb;
    exception_keeper_lineno_1 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    CHECK_OBJECT( (PyObject *)par_self );
    Py_DECREF( par_self );
    par_self = NULL;

    CHECK_OBJECT( (PyObject *)par_use_builtin_types );
    Py_DECREF( par_use_builtin_types );
    par_use_builtin_types = NULL;

    CHECK_OBJECT( (PyObject *)par_dict_type );
    Py_DECREF( par_dict_type );
    par_dict_type = NULL;

    // Re-raise.
    exception_type = exception_keeper_type_1;
    exception_value = exception_keeper_value_1;
    exception_tb = exception_keeper_tb_1;
    exception_lineno = exception_keeper_lineno_1;

    goto function_exception_exit;
    // End of try:

    // Return statement must have exited already.
    NUITKA_CANNOT_GET_HERE( plistlib$$$function_16___init__ );
    return NULL;

function_exception_exit:
    assert( exception_type );
    RESTORE_ERROR_OCCURRED( exception_type, exception_value, exception_tb );

    return NULL;

function_return_exit:
   // Function cleanup code if any.


   // Actual function exit with return value, making sure we did not make
   // the error status worse despite non-NULL return.
   CHECK_OBJECT( tmp_return_value );
   assert( had_error || !ERROR_OCCURRED() );
   return tmp_return_value;
}


static PyObject *impl_plistlib$$$function_17_parse( struct Nuitka_FunctionObject const *self, PyObject **python_pars )
{
    // Preserve error status for checks
#ifndef __NUITKA_NO_ASSERT__
    NUITKA_MAY_BE_UNUSED bool had_error = ERROR_OCCURRED();
#endif

    // Local variable declarations.
    PyObject *par_self = python_pars[ 0 ];
    PyObject *par_fileobj = python_pars[ 1 ];
    struct Nuitka_FrameObject *frame_3924ce3c9aecb71bd1721cfe145c0d4a;
    NUITKA_MAY_BE_UNUSED char const *type_description_1 = NULL;
    PyObject *exception_type = NULL;
    PyObject *exception_value = NULL;
    PyTracebackObject *exception_tb = NULL;
    NUITKA_MAY_BE_UNUSED int exception_lineno = 0;
    bool tmp_result;
    PyObject *tmp_return_value = NULL;
    static struct Nuitka_FrameObject *cache_frame_3924ce3c9aecb71bd1721cfe145c0d4a = NULL;
    PyObject *exception_keeper_type_1;
    PyObject *exception_keeper_value_1;
    PyTracebackObject *exception_keeper_tb_1;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_1;

    // Actual function body.
    // Tried code:
    MAKE_OR_REUSE_FRAME( cache_frame_3924ce3c9aecb71bd1721cfe145c0d4a, codeobj_3924ce3c9aecb71bd1721cfe145c0d4a, module_plistlib, sizeof(void *)+sizeof(void *) );
    frame_3924ce3c9aecb71bd1721cfe145c0d4a = cache_frame_3924ce3c9aecb71bd1721cfe145c0d4a;

    // Push the new frame as the currently active one.
    pushFrameStack( frame_3924ce3c9aecb71bd1721cfe145c0d4a );

    // Mark the frame object as in use, ref count 1 will be up for reuse.
    assert( Py_REFCNT( frame_3924ce3c9aecb71bd1721cfe145c0d4a ) == 2 ); // Frame stack

    // Framed code:
    {
        PyObject *tmp_assattr_name_1;
        PyObject *tmp_called_name_1;
        PyObject *tmp_mvar_value_1;
        PyObject *tmp_assattr_target_1;
        tmp_mvar_value_1 = GET_STRING_DICT_VALUE( moduledict_plistlib, (Nuitka_StringObject *)const_str_plain_ParserCreate );

        if (unlikely( tmp_mvar_value_1 == NULL ))
        {
            tmp_mvar_value_1 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_ParserCreate );
        }

        if ( tmp_mvar_value_1 == NULL )
        {

            exception_type = PyExc_NameError;
            Py_INCREF( exception_type );
            exception_value = PyUnicode_FromFormat( "name '%s' is not defined", "ParserCreate" );
            exception_tb = NULL;
            NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
            CHAIN_EXCEPTION( exception_value );

            exception_lineno = 256;
            type_description_1 = "oo";
            goto frame_exception_exit_1;
        }

        tmp_called_name_1 = tmp_mvar_value_1;
        frame_3924ce3c9aecb71bd1721cfe145c0d4a->m_frame.f_lineno = 256;
        tmp_assattr_name_1 = CALL_FUNCTION_NO_ARGS( tmp_called_name_1 );
        if ( tmp_assattr_name_1 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 256;
            type_description_1 = "oo";
            goto frame_exception_exit_1;
        }
        CHECK_OBJECT( par_self );
        tmp_assattr_target_1 = par_self;
        tmp_result = SET_ATTRIBUTE( tmp_assattr_target_1, const_str_plain_parser, tmp_assattr_name_1 );
        Py_DECREF( tmp_assattr_name_1 );
        if ( tmp_result == false )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 256;
            type_description_1 = "oo";
            goto frame_exception_exit_1;
        }
    }
    {
        PyObject *tmp_assattr_name_2;
        PyObject *tmp_source_name_1;
        PyObject *tmp_assattr_target_2;
        PyObject *tmp_source_name_2;
        CHECK_OBJECT( par_self );
        tmp_source_name_1 = par_self;
        tmp_assattr_name_2 = LOOKUP_ATTRIBUTE( tmp_source_name_1, const_str_plain_handle_begin_element );
        if ( tmp_assattr_name_2 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 257;
            type_description_1 = "oo";
            goto frame_exception_exit_1;
        }
        CHECK_OBJECT( par_self );
        tmp_source_name_2 = par_self;
        tmp_assattr_target_2 = LOOKUP_ATTRIBUTE( tmp_source_name_2, const_str_plain_parser );
        if ( tmp_assattr_target_2 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
            Py_DECREF( tmp_assattr_name_2 );

            exception_lineno = 257;
            type_description_1 = "oo";
            goto frame_exception_exit_1;
        }
        tmp_result = SET_ATTRIBUTE( tmp_assattr_target_2, const_str_plain_StartElementHandler, tmp_assattr_name_2 );
        Py_DECREF( tmp_assattr_name_2 );
        Py_DECREF( tmp_assattr_target_2 );
        if ( tmp_result == false )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 257;
            type_description_1 = "oo";
            goto frame_exception_exit_1;
        }
    }
    {
        PyObject *tmp_assattr_name_3;
        PyObject *tmp_source_name_3;
        PyObject *tmp_assattr_target_3;
        PyObject *tmp_source_name_4;
        CHECK_OBJECT( par_self );
        tmp_source_name_3 = par_self;
        tmp_assattr_name_3 = LOOKUP_ATTRIBUTE( tmp_source_name_3, const_str_plain_handle_end_element );
        if ( tmp_assattr_name_3 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 258;
            type_description_1 = "oo";
            goto frame_exception_exit_1;
        }
        CHECK_OBJECT( par_self );
        tmp_source_name_4 = par_self;
        tmp_assattr_target_3 = LOOKUP_ATTRIBUTE( tmp_source_name_4, const_str_plain_parser );
        if ( tmp_assattr_target_3 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
            Py_DECREF( tmp_assattr_name_3 );

            exception_lineno = 258;
            type_description_1 = "oo";
            goto frame_exception_exit_1;
        }
        tmp_result = SET_ATTRIBUTE( tmp_assattr_target_3, const_str_plain_EndElementHandler, tmp_assattr_name_3 );
        Py_DECREF( tmp_assattr_name_3 );
        Py_DECREF( tmp_assattr_target_3 );
        if ( tmp_result == false )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 258;
            type_description_1 = "oo";
            goto frame_exception_exit_1;
        }
    }
    {
        PyObject *tmp_assattr_name_4;
        PyObject *tmp_source_name_5;
        PyObject *tmp_assattr_target_4;
        PyObject *tmp_source_name_6;
        CHECK_OBJECT( par_self );
        tmp_source_name_5 = par_self;
        tmp_assattr_name_4 = LOOKUP_ATTRIBUTE( tmp_source_name_5, const_str_plain_handle_data );
        if ( tmp_assattr_name_4 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 259;
            type_description_1 = "oo";
            goto frame_exception_exit_1;
        }
        CHECK_OBJECT( par_self );
        tmp_source_name_6 = par_self;
        tmp_assattr_target_4 = LOOKUP_ATTRIBUTE( tmp_source_name_6, const_str_plain_parser );
        if ( tmp_assattr_target_4 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
            Py_DECREF( tmp_assattr_name_4 );

            exception_lineno = 259;
            type_description_1 = "oo";
            goto frame_exception_exit_1;
        }
        tmp_result = SET_ATTRIBUTE( tmp_assattr_target_4, const_str_plain_CharacterDataHandler, tmp_assattr_name_4 );
        Py_DECREF( tmp_assattr_name_4 );
        Py_DECREF( tmp_assattr_target_4 );
        if ( tmp_result == false )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 259;
            type_description_1 = "oo";
            goto frame_exception_exit_1;
        }
    }
    {
        PyObject *tmp_called_instance_1;
        PyObject *tmp_source_name_7;
        PyObject *tmp_call_result_1;
        PyObject *tmp_args_element_name_1;
        CHECK_OBJECT( par_self );
        tmp_source_name_7 = par_self;
        tmp_called_instance_1 = LOOKUP_ATTRIBUTE( tmp_source_name_7, const_str_plain_parser );
        if ( tmp_called_instance_1 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 260;
            type_description_1 = "oo";
            goto frame_exception_exit_1;
        }
        CHECK_OBJECT( par_fileobj );
        tmp_args_element_name_1 = par_fileobj;
        frame_3924ce3c9aecb71bd1721cfe145c0d4a->m_frame.f_lineno = 260;
        {
            PyObject *call_args[] = { tmp_args_element_name_1 };
            tmp_call_result_1 = CALL_METHOD_WITH_ARGS1( tmp_called_instance_1, const_str_plain_ParseFile, call_args );
        }

        Py_DECREF( tmp_called_instance_1 );
        if ( tmp_call_result_1 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 260;
            type_description_1 = "oo";
            goto frame_exception_exit_1;
        }
        Py_DECREF( tmp_call_result_1 );
    }
    {
        PyObject *tmp_source_name_8;
        CHECK_OBJECT( par_self );
        tmp_source_name_8 = par_self;
        tmp_return_value = LOOKUP_ATTRIBUTE( tmp_source_name_8, const_str_plain_root );
        if ( tmp_return_value == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 261;
            type_description_1 = "oo";
            goto frame_exception_exit_1;
        }
        goto frame_return_exit_1;
    }

#if 0
    RESTORE_FRAME_EXCEPTION( frame_3924ce3c9aecb71bd1721cfe145c0d4a );
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto frame_no_exception_1;

    frame_return_exit_1:;
#if 0
    RESTORE_FRAME_EXCEPTION( frame_3924ce3c9aecb71bd1721cfe145c0d4a );
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto try_return_handler_1;

    frame_exception_exit_1:;

#if 0
    RESTORE_FRAME_EXCEPTION( frame_3924ce3c9aecb71bd1721cfe145c0d4a );
#endif

    if ( exception_tb == NULL )
    {
        exception_tb = MAKE_TRACEBACK( frame_3924ce3c9aecb71bd1721cfe145c0d4a, exception_lineno );
    }
    else if ( exception_tb->tb_frame != &frame_3924ce3c9aecb71bd1721cfe145c0d4a->m_frame )
    {
        exception_tb = ADD_TRACEBACK( exception_tb, frame_3924ce3c9aecb71bd1721cfe145c0d4a, exception_lineno );
    }

    // Attachs locals to frame if any.
    Nuitka_Frame_AttachLocals(
        (struct Nuitka_FrameObject *)frame_3924ce3c9aecb71bd1721cfe145c0d4a,
        type_description_1,
        par_self,
        par_fileobj
    );


    // Release cached frame.
    if ( frame_3924ce3c9aecb71bd1721cfe145c0d4a == cache_frame_3924ce3c9aecb71bd1721cfe145c0d4a )
    {
        Py_DECREF( frame_3924ce3c9aecb71bd1721cfe145c0d4a );
    }
    cache_frame_3924ce3c9aecb71bd1721cfe145c0d4a = NULL;

    assertFrameObject( frame_3924ce3c9aecb71bd1721cfe145c0d4a );

    // Put the previous frame back on top.
    popFrameStack();

    // Return the error.
    goto try_except_handler_1;

    frame_no_exception_1:;
    // tried codes exits in all cases
    NUITKA_CANNOT_GET_HERE( plistlib$$$function_17_parse );
    return NULL;
    // Return handler code:
    try_return_handler_1:;
    CHECK_OBJECT( (PyObject *)par_self );
    Py_DECREF( par_self );
    par_self = NULL;

    CHECK_OBJECT( (PyObject *)par_fileobj );
    Py_DECREF( par_fileobj );
    par_fileobj = NULL;

    goto function_return_exit;
    // Exception handler code:
    try_except_handler_1:;
    exception_keeper_type_1 = exception_type;
    exception_keeper_value_1 = exception_value;
    exception_keeper_tb_1 = exception_tb;
    exception_keeper_lineno_1 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    CHECK_OBJECT( (PyObject *)par_self );
    Py_DECREF( par_self );
    par_self = NULL;

    CHECK_OBJECT( (PyObject *)par_fileobj );
    Py_DECREF( par_fileobj );
    par_fileobj = NULL;

    // Re-raise.
    exception_type = exception_keeper_type_1;
    exception_value = exception_keeper_value_1;
    exception_tb = exception_keeper_tb_1;
    exception_lineno = exception_keeper_lineno_1;

    goto function_exception_exit;
    // End of try:

    // Return statement must have exited already.
    NUITKA_CANNOT_GET_HERE( plistlib$$$function_17_parse );
    return NULL;

function_exception_exit:
    assert( exception_type );
    RESTORE_ERROR_OCCURRED( exception_type, exception_value, exception_tb );

    return NULL;

function_return_exit:
   // Function cleanup code if any.


   // Actual function exit with return value, making sure we did not make
   // the error status worse despite non-NULL return.
   CHECK_OBJECT( tmp_return_value );
   assert( had_error || !ERROR_OCCURRED() );
   return tmp_return_value;
}


static PyObject *impl_plistlib$$$function_18_handle_begin_element( struct Nuitka_FunctionObject const *self, PyObject **python_pars )
{
    // Preserve error status for checks
#ifndef __NUITKA_NO_ASSERT__
    NUITKA_MAY_BE_UNUSED bool had_error = ERROR_OCCURRED();
#endif

    // Local variable declarations.
    PyObject *par_self = python_pars[ 0 ];
    PyObject *par_element = python_pars[ 1 ];
    PyObject *par_attrs = python_pars[ 2 ];
    PyObject *var_handler = NULL;
    struct Nuitka_FrameObject *frame_247e4d428c357065ba9e8f9bb7513632;
    NUITKA_MAY_BE_UNUSED char const *type_description_1 = NULL;
    bool tmp_result;
    PyObject *exception_type = NULL;
    PyObject *exception_value = NULL;
    PyTracebackObject *exception_tb = NULL;
    NUITKA_MAY_BE_UNUSED int exception_lineno = 0;
    static struct Nuitka_FrameObject *cache_frame_247e4d428c357065ba9e8f9bb7513632 = NULL;
    PyObject *tmp_return_value = NULL;
    PyObject *exception_keeper_type_1;
    PyObject *exception_keeper_value_1;
    PyTracebackObject *exception_keeper_tb_1;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_1;

    // Actual function body.
    // Tried code:
    MAKE_OR_REUSE_FRAME( cache_frame_247e4d428c357065ba9e8f9bb7513632, codeobj_247e4d428c357065ba9e8f9bb7513632, module_plistlib, sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *) );
    frame_247e4d428c357065ba9e8f9bb7513632 = cache_frame_247e4d428c357065ba9e8f9bb7513632;

    // Push the new frame as the currently active one.
    pushFrameStack( frame_247e4d428c357065ba9e8f9bb7513632 );

    // Mark the frame object as in use, ref count 1 will be up for reuse.
    assert( Py_REFCNT( frame_247e4d428c357065ba9e8f9bb7513632 ) == 2 ); // Frame stack

    // Framed code:
    {
        PyObject *tmp_assattr_name_1;
        PyObject *tmp_assattr_target_1;
        tmp_assattr_name_1 = PyList_New( 0 );
        CHECK_OBJECT( par_self );
        tmp_assattr_target_1 = par_self;
        tmp_result = SET_ATTRIBUTE( tmp_assattr_target_1, const_str_plain_data, tmp_assattr_name_1 );
        Py_DECREF( tmp_assattr_name_1 );
        if ( tmp_result == false )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 264;
            type_description_1 = "oooo";
            goto frame_exception_exit_1;
        }
    }
    {
        PyObject *tmp_assign_source_1;
        PyObject *tmp_getattr_target_1;
        PyObject *tmp_getattr_attr_1;
        PyObject *tmp_left_name_1;
        PyObject *tmp_right_name_1;
        PyObject *tmp_getattr_default_1;
        CHECK_OBJECT( par_self );
        tmp_getattr_target_1 = par_self;
        tmp_left_name_1 = const_str_plain_begin_;
        CHECK_OBJECT( par_element );
        tmp_right_name_1 = par_element;
        tmp_getattr_attr_1 = BINARY_OPERATION_ADD_UNICODE_OBJECT( tmp_left_name_1, tmp_right_name_1 );
        if ( tmp_getattr_attr_1 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 265;
            type_description_1 = "oooo";
            goto frame_exception_exit_1;
        }
        tmp_getattr_default_1 = Py_None;
        tmp_assign_source_1 = BUILTIN_GETATTR( tmp_getattr_target_1, tmp_getattr_attr_1, tmp_getattr_default_1 );
        Py_DECREF( tmp_getattr_attr_1 );
        if ( tmp_assign_source_1 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 265;
            type_description_1 = "oooo";
            goto frame_exception_exit_1;
        }
        assert( var_handler == NULL );
        var_handler = tmp_assign_source_1;
    }
    {
        nuitka_bool tmp_condition_result_1;
        PyObject *tmp_compexpr_left_1;
        PyObject *tmp_compexpr_right_1;
        CHECK_OBJECT( var_handler );
        tmp_compexpr_left_1 = var_handler;
        tmp_compexpr_right_1 = Py_None;
        tmp_condition_result_1 = ( tmp_compexpr_left_1 != tmp_compexpr_right_1 ) ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
        if ( tmp_condition_result_1 == NUITKA_BOOL_TRUE )
        {
            goto branch_yes_1;
        }
        else
        {
            goto branch_no_1;
        }
        branch_yes_1:;
        {
            PyObject *tmp_called_name_1;
            PyObject *tmp_call_result_1;
            PyObject *tmp_args_element_name_1;
            CHECK_OBJECT( var_handler );
            tmp_called_name_1 = var_handler;
            CHECK_OBJECT( par_attrs );
            tmp_args_element_name_1 = par_attrs;
            frame_247e4d428c357065ba9e8f9bb7513632->m_frame.f_lineno = 267;
            {
                PyObject *call_args[] = { tmp_args_element_name_1 };
                tmp_call_result_1 = CALL_FUNCTION_WITH_ARGS1( tmp_called_name_1, call_args );
            }

            if ( tmp_call_result_1 == NULL )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 267;
                type_description_1 = "oooo";
                goto frame_exception_exit_1;
            }
            Py_DECREF( tmp_call_result_1 );
        }
        branch_no_1:;
    }

#if 0
    RESTORE_FRAME_EXCEPTION( frame_247e4d428c357065ba9e8f9bb7513632 );
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto frame_no_exception_1;

    frame_exception_exit_1:;

#if 0
    RESTORE_FRAME_EXCEPTION( frame_247e4d428c357065ba9e8f9bb7513632 );
#endif

    if ( exception_tb == NULL )
    {
        exception_tb = MAKE_TRACEBACK( frame_247e4d428c357065ba9e8f9bb7513632, exception_lineno );
    }
    else if ( exception_tb->tb_frame != &frame_247e4d428c357065ba9e8f9bb7513632->m_frame )
    {
        exception_tb = ADD_TRACEBACK( exception_tb, frame_247e4d428c357065ba9e8f9bb7513632, exception_lineno );
    }

    // Attachs locals to frame if any.
    Nuitka_Frame_AttachLocals(
        (struct Nuitka_FrameObject *)frame_247e4d428c357065ba9e8f9bb7513632,
        type_description_1,
        par_self,
        par_element,
        par_attrs,
        var_handler
    );


    // Release cached frame.
    if ( frame_247e4d428c357065ba9e8f9bb7513632 == cache_frame_247e4d428c357065ba9e8f9bb7513632 )
    {
        Py_DECREF( frame_247e4d428c357065ba9e8f9bb7513632 );
    }
    cache_frame_247e4d428c357065ba9e8f9bb7513632 = NULL;

    assertFrameObject( frame_247e4d428c357065ba9e8f9bb7513632 );

    // Put the previous frame back on top.
    popFrameStack();

    // Return the error.
    goto try_except_handler_1;

    frame_no_exception_1:;
    tmp_return_value = Py_None;
    Py_INCREF( tmp_return_value );
    goto try_return_handler_1;
    // tried codes exits in all cases
    NUITKA_CANNOT_GET_HERE( plistlib$$$function_18_handle_begin_element );
    return NULL;
    // Return handler code:
    try_return_handler_1:;
    CHECK_OBJECT( (PyObject *)par_self );
    Py_DECREF( par_self );
    par_self = NULL;

    CHECK_OBJECT( (PyObject *)par_element );
    Py_DECREF( par_element );
    par_element = NULL;

    CHECK_OBJECT( (PyObject *)par_attrs );
    Py_DECREF( par_attrs );
    par_attrs = NULL;

    CHECK_OBJECT( (PyObject *)var_handler );
    Py_DECREF( var_handler );
    var_handler = NULL;

    goto function_return_exit;
    // Exception handler code:
    try_except_handler_1:;
    exception_keeper_type_1 = exception_type;
    exception_keeper_value_1 = exception_value;
    exception_keeper_tb_1 = exception_tb;
    exception_keeper_lineno_1 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    CHECK_OBJECT( (PyObject *)par_self );
    Py_DECREF( par_self );
    par_self = NULL;

    CHECK_OBJECT( (PyObject *)par_element );
    Py_DECREF( par_element );
    par_element = NULL;

    CHECK_OBJECT( (PyObject *)par_attrs );
    Py_DECREF( par_attrs );
    par_attrs = NULL;

    Py_XDECREF( var_handler );
    var_handler = NULL;

    // Re-raise.
    exception_type = exception_keeper_type_1;
    exception_value = exception_keeper_value_1;
    exception_tb = exception_keeper_tb_1;
    exception_lineno = exception_keeper_lineno_1;

    goto function_exception_exit;
    // End of try:

    // Return statement must have exited already.
    NUITKA_CANNOT_GET_HERE( plistlib$$$function_18_handle_begin_element );
    return NULL;

function_exception_exit:
    assert( exception_type );
    RESTORE_ERROR_OCCURRED( exception_type, exception_value, exception_tb );

    return NULL;

function_return_exit:
   // Function cleanup code if any.


   // Actual function exit with return value, making sure we did not make
   // the error status worse despite non-NULL return.
   CHECK_OBJECT( tmp_return_value );
   assert( had_error || !ERROR_OCCURRED() );
   return tmp_return_value;
}


static PyObject *impl_plistlib$$$function_19_handle_end_element( struct Nuitka_FunctionObject const *self, PyObject **python_pars )
{
    // Preserve error status for checks
#ifndef __NUITKA_NO_ASSERT__
    NUITKA_MAY_BE_UNUSED bool had_error = ERROR_OCCURRED();
#endif

    // Local variable declarations.
    PyObject *par_self = python_pars[ 0 ];
    PyObject *par_element = python_pars[ 1 ];
    PyObject *var_handler = NULL;
    struct Nuitka_FrameObject *frame_0b77ad39ed98f2b4798b7f0c3ce21305;
    NUITKA_MAY_BE_UNUSED char const *type_description_1 = NULL;
    PyObject *exception_type = NULL;
    PyObject *exception_value = NULL;
    PyTracebackObject *exception_tb = NULL;
    NUITKA_MAY_BE_UNUSED int exception_lineno = 0;
    static struct Nuitka_FrameObject *cache_frame_0b77ad39ed98f2b4798b7f0c3ce21305 = NULL;
    PyObject *tmp_return_value = NULL;
    PyObject *exception_keeper_type_1;
    PyObject *exception_keeper_value_1;
    PyTracebackObject *exception_keeper_tb_1;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_1;

    // Actual function body.
    // Tried code:
    MAKE_OR_REUSE_FRAME( cache_frame_0b77ad39ed98f2b4798b7f0c3ce21305, codeobj_0b77ad39ed98f2b4798b7f0c3ce21305, module_plistlib, sizeof(void *)+sizeof(void *)+sizeof(void *) );
    frame_0b77ad39ed98f2b4798b7f0c3ce21305 = cache_frame_0b77ad39ed98f2b4798b7f0c3ce21305;

    // Push the new frame as the currently active one.
    pushFrameStack( frame_0b77ad39ed98f2b4798b7f0c3ce21305 );

    // Mark the frame object as in use, ref count 1 will be up for reuse.
    assert( Py_REFCNT( frame_0b77ad39ed98f2b4798b7f0c3ce21305 ) == 2 ); // Frame stack

    // Framed code:
    {
        PyObject *tmp_assign_source_1;
        PyObject *tmp_getattr_target_1;
        PyObject *tmp_getattr_attr_1;
        PyObject *tmp_left_name_1;
        PyObject *tmp_right_name_1;
        PyObject *tmp_getattr_default_1;
        CHECK_OBJECT( par_self );
        tmp_getattr_target_1 = par_self;
        tmp_left_name_1 = const_str_plain_end_;
        CHECK_OBJECT( par_element );
        tmp_right_name_1 = par_element;
        tmp_getattr_attr_1 = BINARY_OPERATION_ADD_UNICODE_OBJECT( tmp_left_name_1, tmp_right_name_1 );
        if ( tmp_getattr_attr_1 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 270;
            type_description_1 = "ooo";
            goto frame_exception_exit_1;
        }
        tmp_getattr_default_1 = Py_None;
        tmp_assign_source_1 = BUILTIN_GETATTR( tmp_getattr_target_1, tmp_getattr_attr_1, tmp_getattr_default_1 );
        Py_DECREF( tmp_getattr_attr_1 );
        if ( tmp_assign_source_1 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 270;
            type_description_1 = "ooo";
            goto frame_exception_exit_1;
        }
        assert( var_handler == NULL );
        var_handler = tmp_assign_source_1;
    }
    {
        nuitka_bool tmp_condition_result_1;
        PyObject *tmp_compexpr_left_1;
        PyObject *tmp_compexpr_right_1;
        CHECK_OBJECT( var_handler );
        tmp_compexpr_left_1 = var_handler;
        tmp_compexpr_right_1 = Py_None;
        tmp_condition_result_1 = ( tmp_compexpr_left_1 != tmp_compexpr_right_1 ) ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
        if ( tmp_condition_result_1 == NUITKA_BOOL_TRUE )
        {
            goto branch_yes_1;
        }
        else
        {
            goto branch_no_1;
        }
        branch_yes_1:;
        {
            PyObject *tmp_called_name_1;
            PyObject *tmp_call_result_1;
            CHECK_OBJECT( var_handler );
            tmp_called_name_1 = var_handler;
            frame_0b77ad39ed98f2b4798b7f0c3ce21305->m_frame.f_lineno = 272;
            tmp_call_result_1 = CALL_FUNCTION_NO_ARGS( tmp_called_name_1 );
            if ( tmp_call_result_1 == NULL )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 272;
                type_description_1 = "ooo";
                goto frame_exception_exit_1;
            }
            Py_DECREF( tmp_call_result_1 );
        }
        branch_no_1:;
    }

#if 0
    RESTORE_FRAME_EXCEPTION( frame_0b77ad39ed98f2b4798b7f0c3ce21305 );
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto frame_no_exception_1;

    frame_exception_exit_1:;

#if 0
    RESTORE_FRAME_EXCEPTION( frame_0b77ad39ed98f2b4798b7f0c3ce21305 );
#endif

    if ( exception_tb == NULL )
    {
        exception_tb = MAKE_TRACEBACK( frame_0b77ad39ed98f2b4798b7f0c3ce21305, exception_lineno );
    }
    else if ( exception_tb->tb_frame != &frame_0b77ad39ed98f2b4798b7f0c3ce21305->m_frame )
    {
        exception_tb = ADD_TRACEBACK( exception_tb, frame_0b77ad39ed98f2b4798b7f0c3ce21305, exception_lineno );
    }

    // Attachs locals to frame if any.
    Nuitka_Frame_AttachLocals(
        (struct Nuitka_FrameObject *)frame_0b77ad39ed98f2b4798b7f0c3ce21305,
        type_description_1,
        par_self,
        par_element,
        var_handler
    );


    // Release cached frame.
    if ( frame_0b77ad39ed98f2b4798b7f0c3ce21305 == cache_frame_0b77ad39ed98f2b4798b7f0c3ce21305 )
    {
        Py_DECREF( frame_0b77ad39ed98f2b4798b7f0c3ce21305 );
    }
    cache_frame_0b77ad39ed98f2b4798b7f0c3ce21305 = NULL;

    assertFrameObject( frame_0b77ad39ed98f2b4798b7f0c3ce21305 );

    // Put the previous frame back on top.
    popFrameStack();

    // Return the error.
    goto try_except_handler_1;

    frame_no_exception_1:;
    tmp_return_value = Py_None;
    Py_INCREF( tmp_return_value );
    goto try_return_handler_1;
    // tried codes exits in all cases
    NUITKA_CANNOT_GET_HERE( plistlib$$$function_19_handle_end_element );
    return NULL;
    // Return handler code:
    try_return_handler_1:;
    CHECK_OBJECT( (PyObject *)par_self );
    Py_DECREF( par_self );
    par_self = NULL;

    CHECK_OBJECT( (PyObject *)par_element );
    Py_DECREF( par_element );
    par_element = NULL;

    CHECK_OBJECT( (PyObject *)var_handler );
    Py_DECREF( var_handler );
    var_handler = NULL;

    goto function_return_exit;
    // Exception handler code:
    try_except_handler_1:;
    exception_keeper_type_1 = exception_type;
    exception_keeper_value_1 = exception_value;
    exception_keeper_tb_1 = exception_tb;
    exception_keeper_lineno_1 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    CHECK_OBJECT( (PyObject *)par_self );
    Py_DECREF( par_self );
    par_self = NULL;

    CHECK_OBJECT( (PyObject *)par_element );
    Py_DECREF( par_element );
    par_element = NULL;

    Py_XDECREF( var_handler );
    var_handler = NULL;

    // Re-raise.
    exception_type = exception_keeper_type_1;
    exception_value = exception_keeper_value_1;
    exception_tb = exception_keeper_tb_1;
    exception_lineno = exception_keeper_lineno_1;

    goto function_exception_exit;
    // End of try:

    // Return statement must have exited already.
    NUITKA_CANNOT_GET_HERE( plistlib$$$function_19_handle_end_element );
    return NULL;

function_exception_exit:
    assert( exception_type );
    RESTORE_ERROR_OCCURRED( exception_type, exception_value, exception_tb );

    return NULL;

function_return_exit:
   // Function cleanup code if any.


   // Actual function exit with return value, making sure we did not make
   // the error status worse despite non-NULL return.
   CHECK_OBJECT( tmp_return_value );
   assert( had_error || !ERROR_OCCURRED() );
   return tmp_return_value;
}


static PyObject *impl_plistlib$$$function_20_handle_data( struct Nuitka_FunctionObject const *self, PyObject **python_pars )
{
    // Preserve error status for checks
#ifndef __NUITKA_NO_ASSERT__
    NUITKA_MAY_BE_UNUSED bool had_error = ERROR_OCCURRED();
#endif

    // Local variable declarations.
    PyObject *par_self = python_pars[ 0 ];
    PyObject *par_data = python_pars[ 1 ];
    struct Nuitka_FrameObject *frame_a3f9da33bfba4743a02507aae8009f4a;
    NUITKA_MAY_BE_UNUSED char const *type_description_1 = NULL;
    PyObject *exception_type = NULL;
    PyObject *exception_value = NULL;
    PyTracebackObject *exception_tb = NULL;
    NUITKA_MAY_BE_UNUSED int exception_lineno = 0;
    static struct Nuitka_FrameObject *cache_frame_a3f9da33bfba4743a02507aae8009f4a = NULL;
    PyObject *tmp_return_value = NULL;
    PyObject *exception_keeper_type_1;
    PyObject *exception_keeper_value_1;
    PyTracebackObject *exception_keeper_tb_1;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_1;

    // Actual function body.
    // Tried code:
    MAKE_OR_REUSE_FRAME( cache_frame_a3f9da33bfba4743a02507aae8009f4a, codeobj_a3f9da33bfba4743a02507aae8009f4a, module_plistlib, sizeof(void *)+sizeof(void *) );
    frame_a3f9da33bfba4743a02507aae8009f4a = cache_frame_a3f9da33bfba4743a02507aae8009f4a;

    // Push the new frame as the currently active one.
    pushFrameStack( frame_a3f9da33bfba4743a02507aae8009f4a );

    // Mark the frame object as in use, ref count 1 will be up for reuse.
    assert( Py_REFCNT( frame_a3f9da33bfba4743a02507aae8009f4a ) == 2 ); // Frame stack

    // Framed code:
    {
        PyObject *tmp_called_instance_1;
        PyObject *tmp_source_name_1;
        PyObject *tmp_call_result_1;
        PyObject *tmp_args_element_name_1;
        CHECK_OBJECT( par_self );
        tmp_source_name_1 = par_self;
        tmp_called_instance_1 = LOOKUP_ATTRIBUTE( tmp_source_name_1, const_str_plain_data );
        if ( tmp_called_instance_1 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 275;
            type_description_1 = "oo";
            goto frame_exception_exit_1;
        }
        CHECK_OBJECT( par_data );
        tmp_args_element_name_1 = par_data;
        frame_a3f9da33bfba4743a02507aae8009f4a->m_frame.f_lineno = 275;
        {
            PyObject *call_args[] = { tmp_args_element_name_1 };
            tmp_call_result_1 = CALL_METHOD_WITH_ARGS1( tmp_called_instance_1, const_str_plain_append, call_args );
        }

        Py_DECREF( tmp_called_instance_1 );
        if ( tmp_call_result_1 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 275;
            type_description_1 = "oo";
            goto frame_exception_exit_1;
        }
        Py_DECREF( tmp_call_result_1 );
    }

#if 0
    RESTORE_FRAME_EXCEPTION( frame_a3f9da33bfba4743a02507aae8009f4a );
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto frame_no_exception_1;

    frame_exception_exit_1:;

#if 0
    RESTORE_FRAME_EXCEPTION( frame_a3f9da33bfba4743a02507aae8009f4a );
#endif

    if ( exception_tb == NULL )
    {
        exception_tb = MAKE_TRACEBACK( frame_a3f9da33bfba4743a02507aae8009f4a, exception_lineno );
    }
    else if ( exception_tb->tb_frame != &frame_a3f9da33bfba4743a02507aae8009f4a->m_frame )
    {
        exception_tb = ADD_TRACEBACK( exception_tb, frame_a3f9da33bfba4743a02507aae8009f4a, exception_lineno );
    }

    // Attachs locals to frame if any.
    Nuitka_Frame_AttachLocals(
        (struct Nuitka_FrameObject *)frame_a3f9da33bfba4743a02507aae8009f4a,
        type_description_1,
        par_self,
        par_data
    );


    // Release cached frame.
    if ( frame_a3f9da33bfba4743a02507aae8009f4a == cache_frame_a3f9da33bfba4743a02507aae8009f4a )
    {
        Py_DECREF( frame_a3f9da33bfba4743a02507aae8009f4a );
    }
    cache_frame_a3f9da33bfba4743a02507aae8009f4a = NULL;

    assertFrameObject( frame_a3f9da33bfba4743a02507aae8009f4a );

    // Put the previous frame back on top.
    popFrameStack();

    // Return the error.
    goto try_except_handler_1;

    frame_no_exception_1:;
    tmp_return_value = Py_None;
    Py_INCREF( tmp_return_value );
    goto try_return_handler_1;
    // tried codes exits in all cases
    NUITKA_CANNOT_GET_HERE( plistlib$$$function_20_handle_data );
    return NULL;
    // Return handler code:
    try_return_handler_1:;
    CHECK_OBJECT( (PyObject *)par_self );
    Py_DECREF( par_self );
    par_self = NULL;

    CHECK_OBJECT( (PyObject *)par_data );
    Py_DECREF( par_data );
    par_data = NULL;

    goto function_return_exit;
    // Exception handler code:
    try_except_handler_1:;
    exception_keeper_type_1 = exception_type;
    exception_keeper_value_1 = exception_value;
    exception_keeper_tb_1 = exception_tb;
    exception_keeper_lineno_1 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    CHECK_OBJECT( (PyObject *)par_self );
    Py_DECREF( par_self );
    par_self = NULL;

    CHECK_OBJECT( (PyObject *)par_data );
    Py_DECREF( par_data );
    par_data = NULL;

    // Re-raise.
    exception_type = exception_keeper_type_1;
    exception_value = exception_keeper_value_1;
    exception_tb = exception_keeper_tb_1;
    exception_lineno = exception_keeper_lineno_1;

    goto function_exception_exit;
    // End of try:

    // Return statement must have exited already.
    NUITKA_CANNOT_GET_HERE( plistlib$$$function_20_handle_data );
    return NULL;

function_exception_exit:
    assert( exception_type );
    RESTORE_ERROR_OCCURRED( exception_type, exception_value, exception_tb );

    return NULL;

function_return_exit:
   // Function cleanup code if any.


   // Actual function exit with return value, making sure we did not make
   // the error status worse despite non-NULL return.
   CHECK_OBJECT( tmp_return_value );
   assert( had_error || !ERROR_OCCURRED() );
   return tmp_return_value;
}


static PyObject *impl_plistlib$$$function_21_add_object( struct Nuitka_FunctionObject const *self, PyObject **python_pars )
{
    // Preserve error status for checks
#ifndef __NUITKA_NO_ASSERT__
    NUITKA_MAY_BE_UNUSED bool had_error = ERROR_OCCURRED();
#endif

    // Local variable declarations.
    PyObject *par_self = python_pars[ 0 ];
    PyObject *par_value = python_pars[ 1 ];
    struct Nuitka_FrameObject *frame_d5586451b88a3c879eeca6a008e57522;
    NUITKA_MAY_BE_UNUSED char const *type_description_1 = NULL;
    PyObject *exception_type = NULL;
    PyObject *exception_value = NULL;
    PyTracebackObject *exception_tb = NULL;
    NUITKA_MAY_BE_UNUSED int exception_lineno = 0;
    int tmp_res;
    bool tmp_result;
    static struct Nuitka_FrameObject *cache_frame_d5586451b88a3c879eeca6a008e57522 = NULL;
    PyObject *tmp_return_value = NULL;
    PyObject *exception_keeper_type_1;
    PyObject *exception_keeper_value_1;
    PyTracebackObject *exception_keeper_tb_1;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_1;

    // Actual function body.
    // Tried code:
    MAKE_OR_REUSE_FRAME( cache_frame_d5586451b88a3c879eeca6a008e57522, codeobj_d5586451b88a3c879eeca6a008e57522, module_plistlib, sizeof(void *)+sizeof(void *) );
    frame_d5586451b88a3c879eeca6a008e57522 = cache_frame_d5586451b88a3c879eeca6a008e57522;

    // Push the new frame as the currently active one.
    pushFrameStack( frame_d5586451b88a3c879eeca6a008e57522 );

    // Mark the frame object as in use, ref count 1 will be up for reuse.
    assert( Py_REFCNT( frame_d5586451b88a3c879eeca6a008e57522 ) == 2 ); // Frame stack

    // Framed code:
    {
        nuitka_bool tmp_condition_result_1;
        PyObject *tmp_compexpr_left_1;
        PyObject *tmp_compexpr_right_1;
        PyObject *tmp_source_name_1;
        CHECK_OBJECT( par_self );
        tmp_source_name_1 = par_self;
        tmp_compexpr_left_1 = LOOKUP_ATTRIBUTE( tmp_source_name_1, const_str_plain_current_key );
        if ( tmp_compexpr_left_1 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 278;
            type_description_1 = "oo";
            goto frame_exception_exit_1;
        }
        tmp_compexpr_right_1 = Py_None;
        tmp_condition_result_1 = ( tmp_compexpr_left_1 != tmp_compexpr_right_1 ) ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
        Py_DECREF( tmp_compexpr_left_1 );
        if ( tmp_condition_result_1 == NUITKA_BOOL_TRUE )
        {
            goto branch_yes_1;
        }
        else
        {
            goto branch_no_1;
        }
        branch_yes_1:;
        {
            nuitka_bool tmp_condition_result_2;
            PyObject *tmp_operand_name_1;
            PyObject *tmp_isinstance_inst_1;
            PyObject *tmp_isinstance_cls_1;
            PyObject *tmp_subscribed_name_1;
            PyObject *tmp_source_name_2;
            PyObject *tmp_subscript_name_1;
            CHECK_OBJECT( par_self );
            tmp_source_name_2 = par_self;
            tmp_subscribed_name_1 = LOOKUP_ATTRIBUTE( tmp_source_name_2, const_str_plain_stack );
            if ( tmp_subscribed_name_1 == NULL )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 279;
                type_description_1 = "oo";
                goto frame_exception_exit_1;
            }
            tmp_subscript_name_1 = const_int_neg_1;
            tmp_isinstance_inst_1 = LOOKUP_SUBSCRIPT_CONST( tmp_subscribed_name_1, tmp_subscript_name_1, -1 );
            Py_DECREF( tmp_subscribed_name_1 );
            if ( tmp_isinstance_inst_1 == NULL )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 279;
                type_description_1 = "oo";
                goto frame_exception_exit_1;
            }
            tmp_isinstance_cls_1 = LOOKUP_BUILTIN( const_str_plain_dict );
            assert( tmp_isinstance_cls_1 != NULL );
            tmp_res = Nuitka_IsInstance( tmp_isinstance_inst_1, tmp_isinstance_cls_1 );
            Py_DECREF( tmp_isinstance_inst_1 );
            if ( tmp_res == -1 )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 279;
                type_description_1 = "oo";
                goto frame_exception_exit_1;
            }
            tmp_operand_name_1 = ( tmp_res != 0 ) ? Py_True : Py_False;
            tmp_res = CHECK_IF_TRUE( tmp_operand_name_1 );
            if ( tmp_res == -1 )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 279;
                type_description_1 = "oo";
                goto frame_exception_exit_1;
            }
            tmp_condition_result_2 = ( tmp_res == 0 ) ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
            if ( tmp_condition_result_2 == NUITKA_BOOL_TRUE )
            {
                goto branch_yes_2;
            }
            else
            {
                goto branch_no_2;
            }
            branch_yes_2:;
            {
                PyObject *tmp_raise_type_1;
                PyObject *tmp_make_exception_arg_1;
                PyObject *tmp_left_name_1;
                PyObject *tmp_right_name_1;
                PyObject *tmp_source_name_3;
                PyObject *tmp_source_name_4;
                tmp_left_name_1 = const_str_digest_a6fe705e9b22b64bcb8bdabe0939e7dd;
                CHECK_OBJECT( par_self );
                tmp_source_name_4 = par_self;
                tmp_source_name_3 = LOOKUP_ATTRIBUTE( tmp_source_name_4, const_str_plain_parser );
                if ( tmp_source_name_3 == NULL )
                {
                    assert( ERROR_OCCURRED() );

                    FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                    exception_lineno = 281;
                    type_description_1 = "oo";
                    goto frame_exception_exit_1;
                }
                tmp_right_name_1 = LOOKUP_ATTRIBUTE( tmp_source_name_3, const_str_plain_CurrentLineNumber );
                Py_DECREF( tmp_source_name_3 );
                if ( tmp_right_name_1 == NULL )
                {
                    assert( ERROR_OCCURRED() );

                    FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                    exception_lineno = 281;
                    type_description_1 = "oo";
                    goto frame_exception_exit_1;
                }
                tmp_make_exception_arg_1 = BINARY_OPERATION_REMAINDER( tmp_left_name_1, tmp_right_name_1 );
                Py_DECREF( tmp_right_name_1 );
                if ( tmp_make_exception_arg_1 == NULL )
                {
                    assert( ERROR_OCCURRED() );

                    FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                    exception_lineno = 280;
                    type_description_1 = "oo";
                    goto frame_exception_exit_1;
                }
                frame_d5586451b88a3c879eeca6a008e57522->m_frame.f_lineno = 280;
                {
                    PyObject *call_args[] = { tmp_make_exception_arg_1 };
                    tmp_raise_type_1 = CALL_FUNCTION_WITH_ARGS1( PyExc_ValueError, call_args );
                }

                Py_DECREF( tmp_make_exception_arg_1 );
                assert( !(tmp_raise_type_1 == NULL) );
                exception_type = tmp_raise_type_1;
                exception_lineno = 280;
                RAISE_EXCEPTION_WITH_TYPE( &exception_type, &exception_value, &exception_tb );
                type_description_1 = "oo";
                goto frame_exception_exit_1;
            }
            branch_no_2:;
        }
        {
            PyObject *tmp_ass_subvalue_1;
            PyObject *tmp_ass_subscribed_1;
            PyObject *tmp_subscribed_name_2;
            PyObject *tmp_source_name_5;
            PyObject *tmp_subscript_name_2;
            PyObject *tmp_ass_subscript_1;
            PyObject *tmp_source_name_6;
            CHECK_OBJECT( par_value );
            tmp_ass_subvalue_1 = par_value;
            CHECK_OBJECT( par_self );
            tmp_source_name_5 = par_self;
            tmp_subscribed_name_2 = LOOKUP_ATTRIBUTE( tmp_source_name_5, const_str_plain_stack );
            if ( tmp_subscribed_name_2 == NULL )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 282;
                type_description_1 = "oo";
                goto frame_exception_exit_1;
            }
            tmp_subscript_name_2 = const_int_neg_1;
            tmp_ass_subscribed_1 = LOOKUP_SUBSCRIPT_CONST( tmp_subscribed_name_2, tmp_subscript_name_2, -1 );
            Py_DECREF( tmp_subscribed_name_2 );
            if ( tmp_ass_subscribed_1 == NULL )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 282;
                type_description_1 = "oo";
                goto frame_exception_exit_1;
            }
            CHECK_OBJECT( par_self );
            tmp_source_name_6 = par_self;
            tmp_ass_subscript_1 = LOOKUP_ATTRIBUTE( tmp_source_name_6, const_str_plain_current_key );
            if ( tmp_ass_subscript_1 == NULL )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
                Py_DECREF( tmp_ass_subscribed_1 );

                exception_lineno = 282;
                type_description_1 = "oo";
                goto frame_exception_exit_1;
            }
            tmp_result = SET_SUBSCRIPT( tmp_ass_subscribed_1, tmp_ass_subscript_1, tmp_ass_subvalue_1 );
            Py_DECREF( tmp_ass_subscribed_1 );
            Py_DECREF( tmp_ass_subscript_1 );
            if ( tmp_result == false )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 282;
                type_description_1 = "oo";
                goto frame_exception_exit_1;
            }
        }
        {
            PyObject *tmp_assattr_name_1;
            PyObject *tmp_assattr_target_1;
            tmp_assattr_name_1 = Py_None;
            CHECK_OBJECT( par_self );
            tmp_assattr_target_1 = par_self;
            tmp_result = SET_ATTRIBUTE( tmp_assattr_target_1, const_str_plain_current_key, tmp_assattr_name_1 );
            if ( tmp_result == false )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 283;
                type_description_1 = "oo";
                goto frame_exception_exit_1;
            }
        }
        goto branch_end_1;
        branch_no_1:;
        {
            nuitka_bool tmp_condition_result_3;
            PyObject *tmp_operand_name_2;
            PyObject *tmp_source_name_7;
            CHECK_OBJECT( par_self );
            tmp_source_name_7 = par_self;
            tmp_operand_name_2 = LOOKUP_ATTRIBUTE( tmp_source_name_7, const_str_plain_stack );
            if ( tmp_operand_name_2 == NULL )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 284;
                type_description_1 = "oo";
                goto frame_exception_exit_1;
            }
            tmp_res = CHECK_IF_TRUE( tmp_operand_name_2 );
            Py_DECREF( tmp_operand_name_2 );
            if ( tmp_res == -1 )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 284;
                type_description_1 = "oo";
                goto frame_exception_exit_1;
            }
            tmp_condition_result_3 = ( tmp_res == 0 ) ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
            if ( tmp_condition_result_3 == NUITKA_BOOL_TRUE )
            {
                goto branch_yes_3;
            }
            else
            {
                goto branch_no_3;
            }
            branch_yes_3:;
            {
                PyObject *tmp_assattr_name_2;
                PyObject *tmp_assattr_target_2;
                CHECK_OBJECT( par_value );
                tmp_assattr_name_2 = par_value;
                CHECK_OBJECT( par_self );
                tmp_assattr_target_2 = par_self;
                tmp_result = SET_ATTRIBUTE( tmp_assattr_target_2, const_str_plain_root, tmp_assattr_name_2 );
                if ( tmp_result == false )
                {
                    assert( ERROR_OCCURRED() );

                    FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                    exception_lineno = 286;
                    type_description_1 = "oo";
                    goto frame_exception_exit_1;
                }
            }
            goto branch_end_3;
            branch_no_3:;
            {
                nuitka_bool tmp_condition_result_4;
                PyObject *tmp_operand_name_3;
                PyObject *tmp_isinstance_inst_2;
                PyObject *tmp_isinstance_cls_2;
                PyObject *tmp_subscribed_name_3;
                PyObject *tmp_source_name_8;
                PyObject *tmp_subscript_name_3;
                CHECK_OBJECT( par_self );
                tmp_source_name_8 = par_self;
                tmp_subscribed_name_3 = LOOKUP_ATTRIBUTE( tmp_source_name_8, const_str_plain_stack );
                if ( tmp_subscribed_name_3 == NULL )
                {
                    assert( ERROR_OCCURRED() );

                    FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                    exception_lineno = 288;
                    type_description_1 = "oo";
                    goto frame_exception_exit_1;
                }
                tmp_subscript_name_3 = const_int_neg_1;
                tmp_isinstance_inst_2 = LOOKUP_SUBSCRIPT_CONST( tmp_subscribed_name_3, tmp_subscript_name_3, -1 );
                Py_DECREF( tmp_subscribed_name_3 );
                if ( tmp_isinstance_inst_2 == NULL )
                {
                    assert( ERROR_OCCURRED() );

                    FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                    exception_lineno = 288;
                    type_description_1 = "oo";
                    goto frame_exception_exit_1;
                }
                tmp_isinstance_cls_2 = LOOKUP_BUILTIN( const_str_plain_list );
                assert( tmp_isinstance_cls_2 != NULL );
                tmp_res = Nuitka_IsInstance( tmp_isinstance_inst_2, tmp_isinstance_cls_2 );
                Py_DECREF( tmp_isinstance_inst_2 );
                if ( tmp_res == -1 )
                {
                    assert( ERROR_OCCURRED() );

                    FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                    exception_lineno = 288;
                    type_description_1 = "oo";
                    goto frame_exception_exit_1;
                }
                tmp_operand_name_3 = ( tmp_res != 0 ) ? Py_True : Py_False;
                tmp_res = CHECK_IF_TRUE( tmp_operand_name_3 );
                if ( tmp_res == -1 )
                {
                    assert( ERROR_OCCURRED() );

                    FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                    exception_lineno = 288;
                    type_description_1 = "oo";
                    goto frame_exception_exit_1;
                }
                tmp_condition_result_4 = ( tmp_res == 0 ) ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
                if ( tmp_condition_result_4 == NUITKA_BOOL_TRUE )
                {
                    goto branch_yes_4;
                }
                else
                {
                    goto branch_no_4;
                }
                branch_yes_4:;
                {
                    PyObject *tmp_raise_type_2;
                    PyObject *tmp_make_exception_arg_2;
                    PyObject *tmp_left_name_2;
                    PyObject *tmp_right_name_2;
                    PyObject *tmp_source_name_9;
                    PyObject *tmp_source_name_10;
                    tmp_left_name_2 = const_str_digest_a6fe705e9b22b64bcb8bdabe0939e7dd;
                    CHECK_OBJECT( par_self );
                    tmp_source_name_10 = par_self;
                    tmp_source_name_9 = LOOKUP_ATTRIBUTE( tmp_source_name_10, const_str_plain_parser );
                    if ( tmp_source_name_9 == NULL )
                    {
                        assert( ERROR_OCCURRED() );

                        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                        exception_lineno = 290;
                        type_description_1 = "oo";
                        goto frame_exception_exit_1;
                    }
                    tmp_right_name_2 = LOOKUP_ATTRIBUTE( tmp_source_name_9, const_str_plain_CurrentLineNumber );
                    Py_DECREF( tmp_source_name_9 );
                    if ( tmp_right_name_2 == NULL )
                    {
                        assert( ERROR_OCCURRED() );

                        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                        exception_lineno = 290;
                        type_description_1 = "oo";
                        goto frame_exception_exit_1;
                    }
                    tmp_make_exception_arg_2 = BINARY_OPERATION_REMAINDER( tmp_left_name_2, tmp_right_name_2 );
                    Py_DECREF( tmp_right_name_2 );
                    if ( tmp_make_exception_arg_2 == NULL )
                    {
                        assert( ERROR_OCCURRED() );

                        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                        exception_lineno = 289;
                        type_description_1 = "oo";
                        goto frame_exception_exit_1;
                    }
                    frame_d5586451b88a3c879eeca6a008e57522->m_frame.f_lineno = 289;
                    {
                        PyObject *call_args[] = { tmp_make_exception_arg_2 };
                        tmp_raise_type_2 = CALL_FUNCTION_WITH_ARGS1( PyExc_ValueError, call_args );
                    }

                    Py_DECREF( tmp_make_exception_arg_2 );
                    assert( !(tmp_raise_type_2 == NULL) );
                    exception_type = tmp_raise_type_2;
                    exception_lineno = 289;
                    RAISE_EXCEPTION_WITH_TYPE( &exception_type, &exception_value, &exception_tb );
                    type_description_1 = "oo";
                    goto frame_exception_exit_1;
                }
                branch_no_4:;
            }
            {
                PyObject *tmp_called_instance_1;
                PyObject *tmp_subscribed_name_4;
                PyObject *tmp_source_name_11;
                PyObject *tmp_subscript_name_4;
                PyObject *tmp_call_result_1;
                PyObject *tmp_args_element_name_1;
                CHECK_OBJECT( par_self );
                tmp_source_name_11 = par_self;
                tmp_subscribed_name_4 = LOOKUP_ATTRIBUTE( tmp_source_name_11, const_str_plain_stack );
                if ( tmp_subscribed_name_4 == NULL )
                {
                    assert( ERROR_OCCURRED() );

                    FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                    exception_lineno = 291;
                    type_description_1 = "oo";
                    goto frame_exception_exit_1;
                }
                tmp_subscript_name_4 = const_int_neg_1;
                tmp_called_instance_1 = LOOKUP_SUBSCRIPT_CONST( tmp_subscribed_name_4, tmp_subscript_name_4, -1 );
                Py_DECREF( tmp_subscribed_name_4 );
                if ( tmp_called_instance_1 == NULL )
                {
                    assert( ERROR_OCCURRED() );

                    FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                    exception_lineno = 291;
                    type_description_1 = "oo";
                    goto frame_exception_exit_1;
                }
                CHECK_OBJECT( par_value );
                tmp_args_element_name_1 = par_value;
                frame_d5586451b88a3c879eeca6a008e57522->m_frame.f_lineno = 291;
                {
                    PyObject *call_args[] = { tmp_args_element_name_1 };
                    tmp_call_result_1 = CALL_METHOD_WITH_ARGS1( tmp_called_instance_1, const_str_plain_append, call_args );
                }

                Py_DECREF( tmp_called_instance_1 );
                if ( tmp_call_result_1 == NULL )
                {
                    assert( ERROR_OCCURRED() );

                    FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                    exception_lineno = 291;
                    type_description_1 = "oo";
                    goto frame_exception_exit_1;
                }
                Py_DECREF( tmp_call_result_1 );
            }
            branch_end_3:;
        }
        branch_end_1:;
    }

#if 0
    RESTORE_FRAME_EXCEPTION( frame_d5586451b88a3c879eeca6a008e57522 );
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto frame_no_exception_1;

    frame_exception_exit_1:;

#if 0
    RESTORE_FRAME_EXCEPTION( frame_d5586451b88a3c879eeca6a008e57522 );
#endif

    if ( exception_tb == NULL )
    {
        exception_tb = MAKE_TRACEBACK( frame_d5586451b88a3c879eeca6a008e57522, exception_lineno );
    }
    else if ( exception_tb->tb_frame != &frame_d5586451b88a3c879eeca6a008e57522->m_frame )
    {
        exception_tb = ADD_TRACEBACK( exception_tb, frame_d5586451b88a3c879eeca6a008e57522, exception_lineno );
    }

    // Attachs locals to frame if any.
    Nuitka_Frame_AttachLocals(
        (struct Nuitka_FrameObject *)frame_d5586451b88a3c879eeca6a008e57522,
        type_description_1,
        par_self,
        par_value
    );


    // Release cached frame.
    if ( frame_d5586451b88a3c879eeca6a008e57522 == cache_frame_d5586451b88a3c879eeca6a008e57522 )
    {
        Py_DECREF( frame_d5586451b88a3c879eeca6a008e57522 );
    }
    cache_frame_d5586451b88a3c879eeca6a008e57522 = NULL;

    assertFrameObject( frame_d5586451b88a3c879eeca6a008e57522 );

    // Put the previous frame back on top.
    popFrameStack();

    // Return the error.
    goto try_except_handler_1;

    frame_no_exception_1:;
    tmp_return_value = Py_None;
    Py_INCREF( tmp_return_value );
    goto try_return_handler_1;
    // tried codes exits in all cases
    NUITKA_CANNOT_GET_HERE( plistlib$$$function_21_add_object );
    return NULL;
    // Return handler code:
    try_return_handler_1:;
    CHECK_OBJECT( (PyObject *)par_self );
    Py_DECREF( par_self );
    par_self = NULL;

    CHECK_OBJECT( (PyObject *)par_value );
    Py_DECREF( par_value );
    par_value = NULL;

    goto function_return_exit;
    // Exception handler code:
    try_except_handler_1:;
    exception_keeper_type_1 = exception_type;
    exception_keeper_value_1 = exception_value;
    exception_keeper_tb_1 = exception_tb;
    exception_keeper_lineno_1 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    CHECK_OBJECT( (PyObject *)par_self );
    Py_DECREF( par_self );
    par_self = NULL;

    CHECK_OBJECT( (PyObject *)par_value );
    Py_DECREF( par_value );
    par_value = NULL;

    // Re-raise.
    exception_type = exception_keeper_type_1;
    exception_value = exception_keeper_value_1;
    exception_tb = exception_keeper_tb_1;
    exception_lineno = exception_keeper_lineno_1;

    goto function_exception_exit;
    // End of try:

    // Return statement must have exited already.
    NUITKA_CANNOT_GET_HERE( plistlib$$$function_21_add_object );
    return NULL;

function_exception_exit:
    assert( exception_type );
    RESTORE_ERROR_OCCURRED( exception_type, exception_value, exception_tb );

    return NULL;

function_return_exit:
   // Function cleanup code if any.


   // Actual function exit with return value, making sure we did not make
   // the error status worse despite non-NULL return.
   CHECK_OBJECT( tmp_return_value );
   assert( had_error || !ERROR_OCCURRED() );
   return tmp_return_value;
}


static PyObject *impl_plistlib$$$function_22_get_data( struct Nuitka_FunctionObject const *self, PyObject **python_pars )
{
    // Preserve error status for checks
#ifndef __NUITKA_NO_ASSERT__
    NUITKA_MAY_BE_UNUSED bool had_error = ERROR_OCCURRED();
#endif

    // Local variable declarations.
    PyObject *par_self = python_pars[ 0 ];
    PyObject *var_data = NULL;
    struct Nuitka_FrameObject *frame_ff13cfe69c3214da91317aaa57f94838;
    NUITKA_MAY_BE_UNUSED char const *type_description_1 = NULL;
    PyObject *exception_type = NULL;
    PyObject *exception_value = NULL;
    PyTracebackObject *exception_tb = NULL;
    NUITKA_MAY_BE_UNUSED int exception_lineno = 0;
    bool tmp_result;
    static struct Nuitka_FrameObject *cache_frame_ff13cfe69c3214da91317aaa57f94838 = NULL;
    PyObject *tmp_return_value = NULL;
    PyObject *exception_keeper_type_1;
    PyObject *exception_keeper_value_1;
    PyTracebackObject *exception_keeper_tb_1;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_1;

    // Actual function body.
    // Tried code:
    MAKE_OR_REUSE_FRAME( cache_frame_ff13cfe69c3214da91317aaa57f94838, codeobj_ff13cfe69c3214da91317aaa57f94838, module_plistlib, sizeof(void *)+sizeof(void *) );
    frame_ff13cfe69c3214da91317aaa57f94838 = cache_frame_ff13cfe69c3214da91317aaa57f94838;

    // Push the new frame as the currently active one.
    pushFrameStack( frame_ff13cfe69c3214da91317aaa57f94838 );

    // Mark the frame object as in use, ref count 1 will be up for reuse.
    assert( Py_REFCNT( frame_ff13cfe69c3214da91317aaa57f94838 ) == 2 ); // Frame stack

    // Framed code:
    {
        PyObject *tmp_assign_source_1;
        PyObject *tmp_called_name_1;
        PyObject *tmp_source_name_1;
        PyObject *tmp_args_element_name_1;
        PyObject *tmp_source_name_2;
        tmp_source_name_1 = const_str_empty;
        tmp_called_name_1 = LOOKUP_ATTRIBUTE( tmp_source_name_1, const_str_plain_join );
        assert( !(tmp_called_name_1 == NULL) );
        CHECK_OBJECT( par_self );
        tmp_source_name_2 = par_self;
        tmp_args_element_name_1 = LOOKUP_ATTRIBUTE( tmp_source_name_2, const_str_plain_data );
        if ( tmp_args_element_name_1 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
            Py_DECREF( tmp_called_name_1 );

            exception_lineno = 294;
            type_description_1 = "oo";
            goto frame_exception_exit_1;
        }
        frame_ff13cfe69c3214da91317aaa57f94838->m_frame.f_lineno = 294;
        {
            PyObject *call_args[] = { tmp_args_element_name_1 };
            tmp_assign_source_1 = CALL_FUNCTION_WITH_ARGS1( tmp_called_name_1, call_args );
        }

        Py_DECREF( tmp_called_name_1 );
        Py_DECREF( tmp_args_element_name_1 );
        if ( tmp_assign_source_1 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 294;
            type_description_1 = "oo";
            goto frame_exception_exit_1;
        }
        assert( var_data == NULL );
        var_data = tmp_assign_source_1;
    }
    {
        PyObject *tmp_assattr_name_1;
        PyObject *tmp_assattr_target_1;
        tmp_assattr_name_1 = PyList_New( 0 );
        CHECK_OBJECT( par_self );
        tmp_assattr_target_1 = par_self;
        tmp_result = SET_ATTRIBUTE( tmp_assattr_target_1, const_str_plain_data, tmp_assattr_name_1 );
        Py_DECREF( tmp_assattr_name_1 );
        if ( tmp_result == false )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 295;
            type_description_1 = "oo";
            goto frame_exception_exit_1;
        }
    }

#if 0
    RESTORE_FRAME_EXCEPTION( frame_ff13cfe69c3214da91317aaa57f94838 );
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto frame_no_exception_1;

    frame_exception_exit_1:;

#if 0
    RESTORE_FRAME_EXCEPTION( frame_ff13cfe69c3214da91317aaa57f94838 );
#endif

    if ( exception_tb == NULL )
    {
        exception_tb = MAKE_TRACEBACK( frame_ff13cfe69c3214da91317aaa57f94838, exception_lineno );
    }
    else if ( exception_tb->tb_frame != &frame_ff13cfe69c3214da91317aaa57f94838->m_frame )
    {
        exception_tb = ADD_TRACEBACK( exception_tb, frame_ff13cfe69c3214da91317aaa57f94838, exception_lineno );
    }

    // Attachs locals to frame if any.
    Nuitka_Frame_AttachLocals(
        (struct Nuitka_FrameObject *)frame_ff13cfe69c3214da91317aaa57f94838,
        type_description_1,
        par_self,
        var_data
    );


    // Release cached frame.
    if ( frame_ff13cfe69c3214da91317aaa57f94838 == cache_frame_ff13cfe69c3214da91317aaa57f94838 )
    {
        Py_DECREF( frame_ff13cfe69c3214da91317aaa57f94838 );
    }
    cache_frame_ff13cfe69c3214da91317aaa57f94838 = NULL;

    assertFrameObject( frame_ff13cfe69c3214da91317aaa57f94838 );

    // Put the previous frame back on top.
    popFrameStack();

    // Return the error.
    goto try_except_handler_1;

    frame_no_exception_1:;
    CHECK_OBJECT( var_data );
    tmp_return_value = var_data;
    Py_INCREF( tmp_return_value );
    goto try_return_handler_1;
    // tried codes exits in all cases
    NUITKA_CANNOT_GET_HERE( plistlib$$$function_22_get_data );
    return NULL;
    // Return handler code:
    try_return_handler_1:;
    CHECK_OBJECT( (PyObject *)par_self );
    Py_DECREF( par_self );
    par_self = NULL;

    CHECK_OBJECT( (PyObject *)var_data );
    Py_DECREF( var_data );
    var_data = NULL;

    goto function_return_exit;
    // Exception handler code:
    try_except_handler_1:;
    exception_keeper_type_1 = exception_type;
    exception_keeper_value_1 = exception_value;
    exception_keeper_tb_1 = exception_tb;
    exception_keeper_lineno_1 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    CHECK_OBJECT( (PyObject *)par_self );
    Py_DECREF( par_self );
    par_self = NULL;

    Py_XDECREF( var_data );
    var_data = NULL;

    // Re-raise.
    exception_type = exception_keeper_type_1;
    exception_value = exception_keeper_value_1;
    exception_tb = exception_keeper_tb_1;
    exception_lineno = exception_keeper_lineno_1;

    goto function_exception_exit;
    // End of try:

    // Return statement must have exited already.
    NUITKA_CANNOT_GET_HERE( plistlib$$$function_22_get_data );
    return NULL;

function_exception_exit:
    assert( exception_type );
    RESTORE_ERROR_OCCURRED( exception_type, exception_value, exception_tb );

    return NULL;

function_return_exit:
   // Function cleanup code if any.


   // Actual function exit with return value, making sure we did not make
   // the error status worse despite non-NULL return.
   CHECK_OBJECT( tmp_return_value );
   assert( had_error || !ERROR_OCCURRED() );
   return tmp_return_value;
}


static PyObject *impl_plistlib$$$function_23_begin_dict( struct Nuitka_FunctionObject const *self, PyObject **python_pars )
{
    // Preserve error status for checks
#ifndef __NUITKA_NO_ASSERT__
    NUITKA_MAY_BE_UNUSED bool had_error = ERROR_OCCURRED();
#endif

    // Local variable declarations.
    PyObject *par_self = python_pars[ 0 ];
    PyObject *par_attrs = python_pars[ 1 ];
    PyObject *var_d = NULL;
    struct Nuitka_FrameObject *frame_29ec20723eec2f98ed1638ff1580d134;
    NUITKA_MAY_BE_UNUSED char const *type_description_1 = NULL;
    PyObject *exception_type = NULL;
    PyObject *exception_value = NULL;
    PyTracebackObject *exception_tb = NULL;
    NUITKA_MAY_BE_UNUSED int exception_lineno = 0;
    static struct Nuitka_FrameObject *cache_frame_29ec20723eec2f98ed1638ff1580d134 = NULL;
    PyObject *tmp_return_value = NULL;
    PyObject *exception_keeper_type_1;
    PyObject *exception_keeper_value_1;
    PyTracebackObject *exception_keeper_tb_1;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_1;

    // Actual function body.
    // Tried code:
    MAKE_OR_REUSE_FRAME( cache_frame_29ec20723eec2f98ed1638ff1580d134, codeobj_29ec20723eec2f98ed1638ff1580d134, module_plistlib, sizeof(void *)+sizeof(void *)+sizeof(void *) );
    frame_29ec20723eec2f98ed1638ff1580d134 = cache_frame_29ec20723eec2f98ed1638ff1580d134;

    // Push the new frame as the currently active one.
    pushFrameStack( frame_29ec20723eec2f98ed1638ff1580d134 );

    // Mark the frame object as in use, ref count 1 will be up for reuse.
    assert( Py_REFCNT( frame_29ec20723eec2f98ed1638ff1580d134 ) == 2 ); // Frame stack

    // Framed code:
    {
        PyObject *tmp_assign_source_1;
        PyObject *tmp_called_instance_1;
        CHECK_OBJECT( par_self );
        tmp_called_instance_1 = par_self;
        frame_29ec20723eec2f98ed1638ff1580d134->m_frame.f_lineno = 301;
        tmp_assign_source_1 = CALL_METHOD_NO_ARGS( tmp_called_instance_1, const_str_plain__dict_type );
        if ( tmp_assign_source_1 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 301;
            type_description_1 = "ooo";
            goto frame_exception_exit_1;
        }
        assert( var_d == NULL );
        var_d = tmp_assign_source_1;
    }
    {
        PyObject *tmp_called_instance_2;
        PyObject *tmp_call_result_1;
        PyObject *tmp_args_element_name_1;
        CHECK_OBJECT( par_self );
        tmp_called_instance_2 = par_self;
        CHECK_OBJECT( var_d );
        tmp_args_element_name_1 = var_d;
        frame_29ec20723eec2f98ed1638ff1580d134->m_frame.f_lineno = 302;
        {
            PyObject *call_args[] = { tmp_args_element_name_1 };
            tmp_call_result_1 = CALL_METHOD_WITH_ARGS1( tmp_called_instance_2, const_str_plain_add_object, call_args );
        }

        if ( tmp_call_result_1 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 302;
            type_description_1 = "ooo";
            goto frame_exception_exit_1;
        }
        Py_DECREF( tmp_call_result_1 );
    }
    {
        PyObject *tmp_called_instance_3;
        PyObject *tmp_source_name_1;
        PyObject *tmp_call_result_2;
        PyObject *tmp_args_element_name_2;
        CHECK_OBJECT( par_self );
        tmp_source_name_1 = par_self;
        tmp_called_instance_3 = LOOKUP_ATTRIBUTE( tmp_source_name_1, const_str_plain_stack );
        if ( tmp_called_instance_3 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 303;
            type_description_1 = "ooo";
            goto frame_exception_exit_1;
        }
        CHECK_OBJECT( var_d );
        tmp_args_element_name_2 = var_d;
        frame_29ec20723eec2f98ed1638ff1580d134->m_frame.f_lineno = 303;
        {
            PyObject *call_args[] = { tmp_args_element_name_2 };
            tmp_call_result_2 = CALL_METHOD_WITH_ARGS1( tmp_called_instance_3, const_str_plain_append, call_args );
        }

        Py_DECREF( tmp_called_instance_3 );
        if ( tmp_call_result_2 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 303;
            type_description_1 = "ooo";
            goto frame_exception_exit_1;
        }
        Py_DECREF( tmp_call_result_2 );
    }

#if 0
    RESTORE_FRAME_EXCEPTION( frame_29ec20723eec2f98ed1638ff1580d134 );
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto frame_no_exception_1;

    frame_exception_exit_1:;

#if 0
    RESTORE_FRAME_EXCEPTION( frame_29ec20723eec2f98ed1638ff1580d134 );
#endif

    if ( exception_tb == NULL )
    {
        exception_tb = MAKE_TRACEBACK( frame_29ec20723eec2f98ed1638ff1580d134, exception_lineno );
    }
    else if ( exception_tb->tb_frame != &frame_29ec20723eec2f98ed1638ff1580d134->m_frame )
    {
        exception_tb = ADD_TRACEBACK( exception_tb, frame_29ec20723eec2f98ed1638ff1580d134, exception_lineno );
    }

    // Attachs locals to frame if any.
    Nuitka_Frame_AttachLocals(
        (struct Nuitka_FrameObject *)frame_29ec20723eec2f98ed1638ff1580d134,
        type_description_1,
        par_self,
        par_attrs,
        var_d
    );


    // Release cached frame.
    if ( frame_29ec20723eec2f98ed1638ff1580d134 == cache_frame_29ec20723eec2f98ed1638ff1580d134 )
    {
        Py_DECREF( frame_29ec20723eec2f98ed1638ff1580d134 );
    }
    cache_frame_29ec20723eec2f98ed1638ff1580d134 = NULL;

    assertFrameObject( frame_29ec20723eec2f98ed1638ff1580d134 );

    // Put the previous frame back on top.
    popFrameStack();

    // Return the error.
    goto try_except_handler_1;

    frame_no_exception_1:;
    tmp_return_value = Py_None;
    Py_INCREF( tmp_return_value );
    goto try_return_handler_1;
    // tried codes exits in all cases
    NUITKA_CANNOT_GET_HERE( plistlib$$$function_23_begin_dict );
    return NULL;
    // Return handler code:
    try_return_handler_1:;
    CHECK_OBJECT( (PyObject *)par_self );
    Py_DECREF( par_self );
    par_self = NULL;

    CHECK_OBJECT( (PyObject *)par_attrs );
    Py_DECREF( par_attrs );
    par_attrs = NULL;

    CHECK_OBJECT( (PyObject *)var_d );
    Py_DECREF( var_d );
    var_d = NULL;

    goto function_return_exit;
    // Exception handler code:
    try_except_handler_1:;
    exception_keeper_type_1 = exception_type;
    exception_keeper_value_1 = exception_value;
    exception_keeper_tb_1 = exception_tb;
    exception_keeper_lineno_1 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    CHECK_OBJECT( (PyObject *)par_self );
    Py_DECREF( par_self );
    par_self = NULL;

    CHECK_OBJECT( (PyObject *)par_attrs );
    Py_DECREF( par_attrs );
    par_attrs = NULL;

    Py_XDECREF( var_d );
    var_d = NULL;

    // Re-raise.
    exception_type = exception_keeper_type_1;
    exception_value = exception_keeper_value_1;
    exception_tb = exception_keeper_tb_1;
    exception_lineno = exception_keeper_lineno_1;

    goto function_exception_exit;
    // End of try:

    // Return statement must have exited already.
    NUITKA_CANNOT_GET_HERE( plistlib$$$function_23_begin_dict );
    return NULL;

function_exception_exit:
    assert( exception_type );
    RESTORE_ERROR_OCCURRED( exception_type, exception_value, exception_tb );

    return NULL;

function_return_exit:
   // Function cleanup code if any.


   // Actual function exit with return value, making sure we did not make
   // the error status worse despite non-NULL return.
   CHECK_OBJECT( tmp_return_value );
   assert( had_error || !ERROR_OCCURRED() );
   return tmp_return_value;
}


static PyObject *impl_plistlib$$$function_24_end_dict( struct Nuitka_FunctionObject const *self, PyObject **python_pars )
{
    // Preserve error status for checks
#ifndef __NUITKA_NO_ASSERT__
    NUITKA_MAY_BE_UNUSED bool had_error = ERROR_OCCURRED();
#endif

    // Local variable declarations.
    PyObject *par_self = python_pars[ 0 ];
    struct Nuitka_FrameObject *frame_c137ab2f19076c37db18924be34543b0;
    NUITKA_MAY_BE_UNUSED char const *type_description_1 = NULL;
    PyObject *exception_type = NULL;
    PyObject *exception_value = NULL;
    PyTracebackObject *exception_tb = NULL;
    NUITKA_MAY_BE_UNUSED int exception_lineno = 0;
    static struct Nuitka_FrameObject *cache_frame_c137ab2f19076c37db18924be34543b0 = NULL;
    PyObject *tmp_return_value = NULL;
    PyObject *exception_keeper_type_1;
    PyObject *exception_keeper_value_1;
    PyTracebackObject *exception_keeper_tb_1;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_1;

    // Actual function body.
    // Tried code:
    MAKE_OR_REUSE_FRAME( cache_frame_c137ab2f19076c37db18924be34543b0, codeobj_c137ab2f19076c37db18924be34543b0, module_plistlib, sizeof(void *) );
    frame_c137ab2f19076c37db18924be34543b0 = cache_frame_c137ab2f19076c37db18924be34543b0;

    // Push the new frame as the currently active one.
    pushFrameStack( frame_c137ab2f19076c37db18924be34543b0 );

    // Mark the frame object as in use, ref count 1 will be up for reuse.
    assert( Py_REFCNT( frame_c137ab2f19076c37db18924be34543b0 ) == 2 ); // Frame stack

    // Framed code:
    {
        nuitka_bool tmp_condition_result_1;
        PyObject *tmp_source_name_1;
        PyObject *tmp_attribute_value_1;
        int tmp_truth_name_1;
        CHECK_OBJECT( par_self );
        tmp_source_name_1 = par_self;
        tmp_attribute_value_1 = LOOKUP_ATTRIBUTE( tmp_source_name_1, const_str_plain_current_key );
        if ( tmp_attribute_value_1 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 306;
            type_description_1 = "o";
            goto frame_exception_exit_1;
        }
        tmp_truth_name_1 = CHECK_IF_TRUE( tmp_attribute_value_1 );
        if ( tmp_truth_name_1 == -1 )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
            Py_DECREF( tmp_attribute_value_1 );

            exception_lineno = 306;
            type_description_1 = "o";
            goto frame_exception_exit_1;
        }
        tmp_condition_result_1 = tmp_truth_name_1 == 1 ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
        Py_DECREF( tmp_attribute_value_1 );
        if ( tmp_condition_result_1 == NUITKA_BOOL_TRUE )
        {
            goto branch_yes_1;
        }
        else
        {
            goto branch_no_1;
        }
        branch_yes_1:;
        {
            PyObject *tmp_raise_type_1;
            PyObject *tmp_make_exception_arg_1;
            PyObject *tmp_left_name_1;
            PyObject *tmp_right_name_1;
            PyObject *tmp_tuple_element_1;
            PyObject *tmp_source_name_2;
            PyObject *tmp_source_name_3;
            PyObject *tmp_source_name_4;
            tmp_left_name_1 = const_str_digest_226565d3552bd23afa8c5978471661ea;
            CHECK_OBJECT( par_self );
            tmp_source_name_2 = par_self;
            tmp_tuple_element_1 = LOOKUP_ATTRIBUTE( tmp_source_name_2, const_str_plain_current_key );
            if ( tmp_tuple_element_1 == NULL )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 308;
                type_description_1 = "o";
                goto frame_exception_exit_1;
            }
            tmp_right_name_1 = PyTuple_New( 2 );
            PyTuple_SET_ITEM( tmp_right_name_1, 0, tmp_tuple_element_1 );
            CHECK_OBJECT( par_self );
            tmp_source_name_4 = par_self;
            tmp_source_name_3 = LOOKUP_ATTRIBUTE( tmp_source_name_4, const_str_plain_parser );
            if ( tmp_source_name_3 == NULL )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
                Py_DECREF( tmp_right_name_1 );

                exception_lineno = 308;
                type_description_1 = "o";
                goto frame_exception_exit_1;
            }
            tmp_tuple_element_1 = LOOKUP_ATTRIBUTE( tmp_source_name_3, const_str_plain_CurrentLineNumber );
            Py_DECREF( tmp_source_name_3 );
            if ( tmp_tuple_element_1 == NULL )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
                Py_DECREF( tmp_right_name_1 );

                exception_lineno = 308;
                type_description_1 = "o";
                goto frame_exception_exit_1;
            }
            PyTuple_SET_ITEM( tmp_right_name_1, 1, tmp_tuple_element_1 );
            tmp_make_exception_arg_1 = BINARY_OPERATION_REMAINDER( tmp_left_name_1, tmp_right_name_1 );
            Py_DECREF( tmp_right_name_1 );
            if ( tmp_make_exception_arg_1 == NULL )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 307;
                type_description_1 = "o";
                goto frame_exception_exit_1;
            }
            frame_c137ab2f19076c37db18924be34543b0->m_frame.f_lineno = 307;
            {
                PyObject *call_args[] = { tmp_make_exception_arg_1 };
                tmp_raise_type_1 = CALL_FUNCTION_WITH_ARGS1( PyExc_ValueError, call_args );
            }

            Py_DECREF( tmp_make_exception_arg_1 );
            assert( !(tmp_raise_type_1 == NULL) );
            exception_type = tmp_raise_type_1;
            exception_lineno = 307;
            RAISE_EXCEPTION_WITH_TYPE( &exception_type, &exception_value, &exception_tb );
            type_description_1 = "o";
            goto frame_exception_exit_1;
        }
        branch_no_1:;
    }
    {
        PyObject *tmp_called_instance_1;
        PyObject *tmp_source_name_5;
        PyObject *tmp_call_result_1;
        CHECK_OBJECT( par_self );
        tmp_source_name_5 = par_self;
        tmp_called_instance_1 = LOOKUP_ATTRIBUTE( tmp_source_name_5, const_str_plain_stack );
        if ( tmp_called_instance_1 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 309;
            type_description_1 = "o";
            goto frame_exception_exit_1;
        }
        frame_c137ab2f19076c37db18924be34543b0->m_frame.f_lineno = 309;
        tmp_call_result_1 = CALL_METHOD_NO_ARGS( tmp_called_instance_1, const_str_plain_pop );
        Py_DECREF( tmp_called_instance_1 );
        if ( tmp_call_result_1 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 309;
            type_description_1 = "o";
            goto frame_exception_exit_1;
        }
        Py_DECREF( tmp_call_result_1 );
    }

#if 0
    RESTORE_FRAME_EXCEPTION( frame_c137ab2f19076c37db18924be34543b0 );
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto frame_no_exception_1;

    frame_exception_exit_1:;

#if 0
    RESTORE_FRAME_EXCEPTION( frame_c137ab2f19076c37db18924be34543b0 );
#endif

    if ( exception_tb == NULL )
    {
        exception_tb = MAKE_TRACEBACK( frame_c137ab2f19076c37db18924be34543b0, exception_lineno );
    }
    else if ( exception_tb->tb_frame != &frame_c137ab2f19076c37db18924be34543b0->m_frame )
    {
        exception_tb = ADD_TRACEBACK( exception_tb, frame_c137ab2f19076c37db18924be34543b0, exception_lineno );
    }

    // Attachs locals to frame if any.
    Nuitka_Frame_AttachLocals(
        (struct Nuitka_FrameObject *)frame_c137ab2f19076c37db18924be34543b0,
        type_description_1,
        par_self
    );


    // Release cached frame.
    if ( frame_c137ab2f19076c37db18924be34543b0 == cache_frame_c137ab2f19076c37db18924be34543b0 )
    {
        Py_DECREF( frame_c137ab2f19076c37db18924be34543b0 );
    }
    cache_frame_c137ab2f19076c37db18924be34543b0 = NULL;

    assertFrameObject( frame_c137ab2f19076c37db18924be34543b0 );

    // Put the previous frame back on top.
    popFrameStack();

    // Return the error.
    goto try_except_handler_1;

    frame_no_exception_1:;
    tmp_return_value = Py_None;
    Py_INCREF( tmp_return_value );
    goto try_return_handler_1;
    // tried codes exits in all cases
    NUITKA_CANNOT_GET_HERE( plistlib$$$function_24_end_dict );
    return NULL;
    // Return handler code:
    try_return_handler_1:;
    CHECK_OBJECT( (PyObject *)par_self );
    Py_DECREF( par_self );
    par_self = NULL;

    goto function_return_exit;
    // Exception handler code:
    try_except_handler_1:;
    exception_keeper_type_1 = exception_type;
    exception_keeper_value_1 = exception_value;
    exception_keeper_tb_1 = exception_tb;
    exception_keeper_lineno_1 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    CHECK_OBJECT( (PyObject *)par_self );
    Py_DECREF( par_self );
    par_self = NULL;

    // Re-raise.
    exception_type = exception_keeper_type_1;
    exception_value = exception_keeper_value_1;
    exception_tb = exception_keeper_tb_1;
    exception_lineno = exception_keeper_lineno_1;

    goto function_exception_exit;
    // End of try:

    // Return statement must have exited already.
    NUITKA_CANNOT_GET_HERE( plistlib$$$function_24_end_dict );
    return NULL;

function_exception_exit:
    assert( exception_type );
    RESTORE_ERROR_OCCURRED( exception_type, exception_value, exception_tb );

    return NULL;

function_return_exit:
   // Function cleanup code if any.


   // Actual function exit with return value, making sure we did not make
   // the error status worse despite non-NULL return.
   CHECK_OBJECT( tmp_return_value );
   assert( had_error || !ERROR_OCCURRED() );
   return tmp_return_value;
}


static PyObject *impl_plistlib$$$function_25_end_key( struct Nuitka_FunctionObject const *self, PyObject **python_pars )
{
    // Preserve error status for checks
#ifndef __NUITKA_NO_ASSERT__
    NUITKA_MAY_BE_UNUSED bool had_error = ERROR_OCCURRED();
#endif

    // Local variable declarations.
    PyObject *par_self = python_pars[ 0 ];
    struct Nuitka_FrameObject *frame_391b3640d9ded65d2588654840fa2e13;
    NUITKA_MAY_BE_UNUSED char const *type_description_1 = NULL;
    PyObject *exception_type = NULL;
    PyObject *exception_value = NULL;
    PyTracebackObject *exception_tb = NULL;
    NUITKA_MAY_BE_UNUSED int exception_lineno = 0;
    int tmp_res;
    bool tmp_result;
    static struct Nuitka_FrameObject *cache_frame_391b3640d9ded65d2588654840fa2e13 = NULL;
    PyObject *tmp_return_value = NULL;
    PyObject *exception_keeper_type_1;
    PyObject *exception_keeper_value_1;
    PyTracebackObject *exception_keeper_tb_1;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_1;

    // Actual function body.
    // Tried code:
    MAKE_OR_REUSE_FRAME( cache_frame_391b3640d9ded65d2588654840fa2e13, codeobj_391b3640d9ded65d2588654840fa2e13, module_plistlib, sizeof(void *) );
    frame_391b3640d9ded65d2588654840fa2e13 = cache_frame_391b3640d9ded65d2588654840fa2e13;

    // Push the new frame as the currently active one.
    pushFrameStack( frame_391b3640d9ded65d2588654840fa2e13 );

    // Mark the frame object as in use, ref count 1 will be up for reuse.
    assert( Py_REFCNT( frame_391b3640d9ded65d2588654840fa2e13 ) == 2 ); // Frame stack

    // Framed code:
    {
        nuitka_bool tmp_condition_result_1;
        int tmp_or_left_truth_1;
        nuitka_bool tmp_or_left_value_1;
        nuitka_bool tmp_or_right_value_1;
        PyObject *tmp_source_name_1;
        PyObject *tmp_attribute_value_1;
        int tmp_truth_name_1;
        PyObject *tmp_operand_name_1;
        PyObject *tmp_isinstance_inst_1;
        PyObject *tmp_isinstance_cls_1;
        PyObject *tmp_subscribed_name_1;
        PyObject *tmp_source_name_2;
        PyObject *tmp_subscript_name_1;
        CHECK_OBJECT( par_self );
        tmp_source_name_1 = par_self;
        tmp_attribute_value_1 = LOOKUP_ATTRIBUTE( tmp_source_name_1, const_str_plain_current_key );
        if ( tmp_attribute_value_1 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 312;
            type_description_1 = "o";
            goto frame_exception_exit_1;
        }
        tmp_truth_name_1 = CHECK_IF_TRUE( tmp_attribute_value_1 );
        if ( tmp_truth_name_1 == -1 )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
            Py_DECREF( tmp_attribute_value_1 );

            exception_lineno = 312;
            type_description_1 = "o";
            goto frame_exception_exit_1;
        }
        tmp_or_left_value_1 = tmp_truth_name_1 == 1 ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
        Py_DECREF( tmp_attribute_value_1 );
        tmp_or_left_truth_1 = tmp_or_left_value_1 == NUITKA_BOOL_TRUE ? 1 : 0;
        if ( tmp_or_left_truth_1 == 1 )
        {
            goto or_left_1;
        }
        else
        {
            goto or_right_1;
        }
        or_right_1:;
        CHECK_OBJECT( par_self );
        tmp_source_name_2 = par_self;
        tmp_subscribed_name_1 = LOOKUP_ATTRIBUTE( tmp_source_name_2, const_str_plain_stack );
        if ( tmp_subscribed_name_1 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 312;
            type_description_1 = "o";
            goto frame_exception_exit_1;
        }
        tmp_subscript_name_1 = const_int_neg_1;
        tmp_isinstance_inst_1 = LOOKUP_SUBSCRIPT_CONST( tmp_subscribed_name_1, tmp_subscript_name_1, -1 );
        Py_DECREF( tmp_subscribed_name_1 );
        if ( tmp_isinstance_inst_1 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 312;
            type_description_1 = "o";
            goto frame_exception_exit_1;
        }
        tmp_isinstance_cls_1 = LOOKUP_BUILTIN( const_str_plain_dict );
        assert( tmp_isinstance_cls_1 != NULL );
        tmp_res = Nuitka_IsInstance( tmp_isinstance_inst_1, tmp_isinstance_cls_1 );
        Py_DECREF( tmp_isinstance_inst_1 );
        if ( tmp_res == -1 )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 312;
            type_description_1 = "o";
            goto frame_exception_exit_1;
        }
        tmp_operand_name_1 = ( tmp_res != 0 ) ? Py_True : Py_False;
        tmp_res = CHECK_IF_TRUE( tmp_operand_name_1 );
        if ( tmp_res == -1 )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 312;
            type_description_1 = "o";
            goto frame_exception_exit_1;
        }
        tmp_or_right_value_1 = ( tmp_res == 0 ) ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
        tmp_condition_result_1 = tmp_or_right_value_1;
        goto or_end_1;
        or_left_1:;
        tmp_condition_result_1 = tmp_or_left_value_1;
        or_end_1:;
        if ( tmp_condition_result_1 == NUITKA_BOOL_TRUE )
        {
            goto branch_yes_1;
        }
        else
        {
            goto branch_no_1;
        }
        branch_yes_1:;
        {
            PyObject *tmp_raise_type_1;
            PyObject *tmp_make_exception_arg_1;
            PyObject *tmp_left_name_1;
            PyObject *tmp_right_name_1;
            PyObject *tmp_source_name_3;
            PyObject *tmp_source_name_4;
            tmp_left_name_1 = const_str_digest_7629749259f94868388f3bdf15c07b50;
            CHECK_OBJECT( par_self );
            tmp_source_name_4 = par_self;
            tmp_source_name_3 = LOOKUP_ATTRIBUTE( tmp_source_name_4, const_str_plain_parser );
            if ( tmp_source_name_3 == NULL )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 314;
                type_description_1 = "o";
                goto frame_exception_exit_1;
            }
            tmp_right_name_1 = LOOKUP_ATTRIBUTE( tmp_source_name_3, const_str_plain_CurrentLineNumber );
            Py_DECREF( tmp_source_name_3 );
            if ( tmp_right_name_1 == NULL )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 314;
                type_description_1 = "o";
                goto frame_exception_exit_1;
            }
            tmp_make_exception_arg_1 = BINARY_OPERATION_REMAINDER( tmp_left_name_1, tmp_right_name_1 );
            Py_DECREF( tmp_right_name_1 );
            if ( tmp_make_exception_arg_1 == NULL )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 313;
                type_description_1 = "o";
                goto frame_exception_exit_1;
            }
            frame_391b3640d9ded65d2588654840fa2e13->m_frame.f_lineno = 313;
            {
                PyObject *call_args[] = { tmp_make_exception_arg_1 };
                tmp_raise_type_1 = CALL_FUNCTION_WITH_ARGS1( PyExc_ValueError, call_args );
            }

            Py_DECREF( tmp_make_exception_arg_1 );
            assert( !(tmp_raise_type_1 == NULL) );
            exception_type = tmp_raise_type_1;
            exception_lineno = 313;
            RAISE_EXCEPTION_WITH_TYPE( &exception_type, &exception_value, &exception_tb );
            type_description_1 = "o";
            goto frame_exception_exit_1;
        }
        branch_no_1:;
    }
    {
        PyObject *tmp_assattr_name_1;
        PyObject *tmp_called_instance_1;
        PyObject *tmp_assattr_target_1;
        CHECK_OBJECT( par_self );
        tmp_called_instance_1 = par_self;
        frame_391b3640d9ded65d2588654840fa2e13->m_frame.f_lineno = 315;
        tmp_assattr_name_1 = CALL_METHOD_NO_ARGS( tmp_called_instance_1, const_str_plain_get_data );
        if ( tmp_assattr_name_1 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 315;
            type_description_1 = "o";
            goto frame_exception_exit_1;
        }
        CHECK_OBJECT( par_self );
        tmp_assattr_target_1 = par_self;
        tmp_result = SET_ATTRIBUTE( tmp_assattr_target_1, const_str_plain_current_key, tmp_assattr_name_1 );
        Py_DECREF( tmp_assattr_name_1 );
        if ( tmp_result == false )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 315;
            type_description_1 = "o";
            goto frame_exception_exit_1;
        }
    }

#if 0
    RESTORE_FRAME_EXCEPTION( frame_391b3640d9ded65d2588654840fa2e13 );
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto frame_no_exception_1;

    frame_exception_exit_1:;

#if 0
    RESTORE_FRAME_EXCEPTION( frame_391b3640d9ded65d2588654840fa2e13 );
#endif

    if ( exception_tb == NULL )
    {
        exception_tb = MAKE_TRACEBACK( frame_391b3640d9ded65d2588654840fa2e13, exception_lineno );
    }
    else if ( exception_tb->tb_frame != &frame_391b3640d9ded65d2588654840fa2e13->m_frame )
    {
        exception_tb = ADD_TRACEBACK( exception_tb, frame_391b3640d9ded65d2588654840fa2e13, exception_lineno );
    }

    // Attachs locals to frame if any.
    Nuitka_Frame_AttachLocals(
        (struct Nuitka_FrameObject *)frame_391b3640d9ded65d2588654840fa2e13,
        type_description_1,
        par_self
    );


    // Release cached frame.
    if ( frame_391b3640d9ded65d2588654840fa2e13 == cache_frame_391b3640d9ded65d2588654840fa2e13 )
    {
        Py_DECREF( frame_391b3640d9ded65d2588654840fa2e13 );
    }
    cache_frame_391b3640d9ded65d2588654840fa2e13 = NULL;

    assertFrameObject( frame_391b3640d9ded65d2588654840fa2e13 );

    // Put the previous frame back on top.
    popFrameStack();

    // Return the error.
    goto try_except_handler_1;

    frame_no_exception_1:;
    tmp_return_value = Py_None;
    Py_INCREF( tmp_return_value );
    goto try_return_handler_1;
    // tried codes exits in all cases
    NUITKA_CANNOT_GET_HERE( plistlib$$$function_25_end_key );
    return NULL;
    // Return handler code:
    try_return_handler_1:;
    CHECK_OBJECT( (PyObject *)par_self );
    Py_DECREF( par_self );
    par_self = NULL;

    goto function_return_exit;
    // Exception handler code:
    try_except_handler_1:;
    exception_keeper_type_1 = exception_type;
    exception_keeper_value_1 = exception_value;
    exception_keeper_tb_1 = exception_tb;
    exception_keeper_lineno_1 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    CHECK_OBJECT( (PyObject *)par_self );
    Py_DECREF( par_self );
    par_self = NULL;

    // Re-raise.
    exception_type = exception_keeper_type_1;
    exception_value = exception_keeper_value_1;
    exception_tb = exception_keeper_tb_1;
    exception_lineno = exception_keeper_lineno_1;

    goto function_exception_exit;
    // End of try:

    // Return statement must have exited already.
    NUITKA_CANNOT_GET_HERE( plistlib$$$function_25_end_key );
    return NULL;

function_exception_exit:
    assert( exception_type );
    RESTORE_ERROR_OCCURRED( exception_type, exception_value, exception_tb );

    return NULL;

function_return_exit:
   // Function cleanup code if any.


   // Actual function exit with return value, making sure we did not make
   // the error status worse despite non-NULL return.
   CHECK_OBJECT( tmp_return_value );
   assert( had_error || !ERROR_OCCURRED() );
   return tmp_return_value;
}


static PyObject *impl_plistlib$$$function_26_begin_array( struct Nuitka_FunctionObject const *self, PyObject **python_pars )
{
    // Preserve error status for checks
#ifndef __NUITKA_NO_ASSERT__
    NUITKA_MAY_BE_UNUSED bool had_error = ERROR_OCCURRED();
#endif

    // Local variable declarations.
    PyObject *par_self = python_pars[ 0 ];
    PyObject *par_attrs = python_pars[ 1 ];
    PyObject *var_a = NULL;
    struct Nuitka_FrameObject *frame_c703ebb5931b8474dc0577e26f98f0eb;
    NUITKA_MAY_BE_UNUSED char const *type_description_1 = NULL;
    PyObject *exception_type = NULL;
    PyObject *exception_value = NULL;
    PyTracebackObject *exception_tb = NULL;
    NUITKA_MAY_BE_UNUSED int exception_lineno = 0;
    static struct Nuitka_FrameObject *cache_frame_c703ebb5931b8474dc0577e26f98f0eb = NULL;
    PyObject *tmp_return_value = NULL;
    PyObject *exception_keeper_type_1;
    PyObject *exception_keeper_value_1;
    PyTracebackObject *exception_keeper_tb_1;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_1;

    // Actual function body.
    {
        PyObject *tmp_assign_source_1;
        tmp_assign_source_1 = PyList_New( 0 );
        assert( var_a == NULL );
        var_a = tmp_assign_source_1;
    }
    // Tried code:
    MAKE_OR_REUSE_FRAME( cache_frame_c703ebb5931b8474dc0577e26f98f0eb, codeobj_c703ebb5931b8474dc0577e26f98f0eb, module_plistlib, sizeof(void *)+sizeof(void *)+sizeof(void *) );
    frame_c703ebb5931b8474dc0577e26f98f0eb = cache_frame_c703ebb5931b8474dc0577e26f98f0eb;

    // Push the new frame as the currently active one.
    pushFrameStack( frame_c703ebb5931b8474dc0577e26f98f0eb );

    // Mark the frame object as in use, ref count 1 will be up for reuse.
    assert( Py_REFCNT( frame_c703ebb5931b8474dc0577e26f98f0eb ) == 2 ); // Frame stack

    // Framed code:
    {
        PyObject *tmp_called_instance_1;
        PyObject *tmp_call_result_1;
        PyObject *tmp_args_element_name_1;
        CHECK_OBJECT( par_self );
        tmp_called_instance_1 = par_self;
        CHECK_OBJECT( var_a );
        tmp_args_element_name_1 = var_a;
        frame_c703ebb5931b8474dc0577e26f98f0eb->m_frame.f_lineno = 319;
        {
            PyObject *call_args[] = { tmp_args_element_name_1 };
            tmp_call_result_1 = CALL_METHOD_WITH_ARGS1( tmp_called_instance_1, const_str_plain_add_object, call_args );
        }

        if ( tmp_call_result_1 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 319;
            type_description_1 = "ooo";
            goto frame_exception_exit_1;
        }
        Py_DECREF( tmp_call_result_1 );
    }
    {
        PyObject *tmp_called_instance_2;
        PyObject *tmp_source_name_1;
        PyObject *tmp_call_result_2;
        PyObject *tmp_args_element_name_2;
        CHECK_OBJECT( par_self );
        tmp_source_name_1 = par_self;
        tmp_called_instance_2 = LOOKUP_ATTRIBUTE( tmp_source_name_1, const_str_plain_stack );
        if ( tmp_called_instance_2 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 320;
            type_description_1 = "ooo";
            goto frame_exception_exit_1;
        }
        CHECK_OBJECT( var_a );
        tmp_args_element_name_2 = var_a;
        frame_c703ebb5931b8474dc0577e26f98f0eb->m_frame.f_lineno = 320;
        {
            PyObject *call_args[] = { tmp_args_element_name_2 };
            tmp_call_result_2 = CALL_METHOD_WITH_ARGS1( tmp_called_instance_2, const_str_plain_append, call_args );
        }

        Py_DECREF( tmp_called_instance_2 );
        if ( tmp_call_result_2 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 320;
            type_description_1 = "ooo";
            goto frame_exception_exit_1;
        }
        Py_DECREF( tmp_call_result_2 );
    }

#if 0
    RESTORE_FRAME_EXCEPTION( frame_c703ebb5931b8474dc0577e26f98f0eb );
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto frame_no_exception_1;

    frame_exception_exit_1:;

#if 0
    RESTORE_FRAME_EXCEPTION( frame_c703ebb5931b8474dc0577e26f98f0eb );
#endif

    if ( exception_tb == NULL )
    {
        exception_tb = MAKE_TRACEBACK( frame_c703ebb5931b8474dc0577e26f98f0eb, exception_lineno );
    }
    else if ( exception_tb->tb_frame != &frame_c703ebb5931b8474dc0577e26f98f0eb->m_frame )
    {
        exception_tb = ADD_TRACEBACK( exception_tb, frame_c703ebb5931b8474dc0577e26f98f0eb, exception_lineno );
    }

    // Attachs locals to frame if any.
    Nuitka_Frame_AttachLocals(
        (struct Nuitka_FrameObject *)frame_c703ebb5931b8474dc0577e26f98f0eb,
        type_description_1,
        par_self,
        par_attrs,
        var_a
    );


    // Release cached frame.
    if ( frame_c703ebb5931b8474dc0577e26f98f0eb == cache_frame_c703ebb5931b8474dc0577e26f98f0eb )
    {
        Py_DECREF( frame_c703ebb5931b8474dc0577e26f98f0eb );
    }
    cache_frame_c703ebb5931b8474dc0577e26f98f0eb = NULL;

    assertFrameObject( frame_c703ebb5931b8474dc0577e26f98f0eb );

    // Put the previous frame back on top.
    popFrameStack();

    // Return the error.
    goto try_except_handler_1;

    frame_no_exception_1:;
    tmp_return_value = Py_None;
    Py_INCREF( tmp_return_value );
    goto try_return_handler_1;
    // tried codes exits in all cases
    NUITKA_CANNOT_GET_HERE( plistlib$$$function_26_begin_array );
    return NULL;
    // Return handler code:
    try_return_handler_1:;
    CHECK_OBJECT( (PyObject *)par_self );
    Py_DECREF( par_self );
    par_self = NULL;

    CHECK_OBJECT( (PyObject *)par_attrs );
    Py_DECREF( par_attrs );
    par_attrs = NULL;

    CHECK_OBJECT( (PyObject *)var_a );
    Py_DECREF( var_a );
    var_a = NULL;

    goto function_return_exit;
    // Exception handler code:
    try_except_handler_1:;
    exception_keeper_type_1 = exception_type;
    exception_keeper_value_1 = exception_value;
    exception_keeper_tb_1 = exception_tb;
    exception_keeper_lineno_1 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    CHECK_OBJECT( (PyObject *)par_self );
    Py_DECREF( par_self );
    par_self = NULL;

    CHECK_OBJECT( (PyObject *)par_attrs );
    Py_DECREF( par_attrs );
    par_attrs = NULL;

    CHECK_OBJECT( (PyObject *)var_a );
    Py_DECREF( var_a );
    var_a = NULL;

    // Re-raise.
    exception_type = exception_keeper_type_1;
    exception_value = exception_keeper_value_1;
    exception_tb = exception_keeper_tb_1;
    exception_lineno = exception_keeper_lineno_1;

    goto function_exception_exit;
    // End of try:

    // Return statement must have exited already.
    NUITKA_CANNOT_GET_HERE( plistlib$$$function_26_begin_array );
    return NULL;

function_exception_exit:
    assert( exception_type );
    RESTORE_ERROR_OCCURRED( exception_type, exception_value, exception_tb );

    return NULL;

function_return_exit:
   // Function cleanup code if any.


   // Actual function exit with return value, making sure we did not make
   // the error status worse despite non-NULL return.
   CHECK_OBJECT( tmp_return_value );
   assert( had_error || !ERROR_OCCURRED() );
   return tmp_return_value;
}


static PyObject *impl_plistlib$$$function_27_end_array( struct Nuitka_FunctionObject const *self, PyObject **python_pars )
{
    // Preserve error status for checks
#ifndef __NUITKA_NO_ASSERT__
    NUITKA_MAY_BE_UNUSED bool had_error = ERROR_OCCURRED();
#endif

    // Local variable declarations.
    PyObject *par_self = python_pars[ 0 ];
    struct Nuitka_FrameObject *frame_86bfb94d82246de2165612ee08b14306;
    NUITKA_MAY_BE_UNUSED char const *type_description_1 = NULL;
    PyObject *exception_type = NULL;
    PyObject *exception_value = NULL;
    PyTracebackObject *exception_tb = NULL;
    NUITKA_MAY_BE_UNUSED int exception_lineno = 0;
    static struct Nuitka_FrameObject *cache_frame_86bfb94d82246de2165612ee08b14306 = NULL;
    PyObject *tmp_return_value = NULL;
    PyObject *exception_keeper_type_1;
    PyObject *exception_keeper_value_1;
    PyTracebackObject *exception_keeper_tb_1;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_1;

    // Actual function body.
    // Tried code:
    MAKE_OR_REUSE_FRAME( cache_frame_86bfb94d82246de2165612ee08b14306, codeobj_86bfb94d82246de2165612ee08b14306, module_plistlib, sizeof(void *) );
    frame_86bfb94d82246de2165612ee08b14306 = cache_frame_86bfb94d82246de2165612ee08b14306;

    // Push the new frame as the currently active one.
    pushFrameStack( frame_86bfb94d82246de2165612ee08b14306 );

    // Mark the frame object as in use, ref count 1 will be up for reuse.
    assert( Py_REFCNT( frame_86bfb94d82246de2165612ee08b14306 ) == 2 ); // Frame stack

    // Framed code:
    {
        PyObject *tmp_called_instance_1;
        PyObject *tmp_source_name_1;
        PyObject *tmp_call_result_1;
        CHECK_OBJECT( par_self );
        tmp_source_name_1 = par_self;
        tmp_called_instance_1 = LOOKUP_ATTRIBUTE( tmp_source_name_1, const_str_plain_stack );
        if ( tmp_called_instance_1 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 323;
            type_description_1 = "o";
            goto frame_exception_exit_1;
        }
        frame_86bfb94d82246de2165612ee08b14306->m_frame.f_lineno = 323;
        tmp_call_result_1 = CALL_METHOD_NO_ARGS( tmp_called_instance_1, const_str_plain_pop );
        Py_DECREF( tmp_called_instance_1 );
        if ( tmp_call_result_1 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 323;
            type_description_1 = "o";
            goto frame_exception_exit_1;
        }
        Py_DECREF( tmp_call_result_1 );
    }

#if 0
    RESTORE_FRAME_EXCEPTION( frame_86bfb94d82246de2165612ee08b14306 );
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto frame_no_exception_1;

    frame_exception_exit_1:;

#if 0
    RESTORE_FRAME_EXCEPTION( frame_86bfb94d82246de2165612ee08b14306 );
#endif

    if ( exception_tb == NULL )
    {
        exception_tb = MAKE_TRACEBACK( frame_86bfb94d82246de2165612ee08b14306, exception_lineno );
    }
    else if ( exception_tb->tb_frame != &frame_86bfb94d82246de2165612ee08b14306->m_frame )
    {
        exception_tb = ADD_TRACEBACK( exception_tb, frame_86bfb94d82246de2165612ee08b14306, exception_lineno );
    }

    // Attachs locals to frame if any.
    Nuitka_Frame_AttachLocals(
        (struct Nuitka_FrameObject *)frame_86bfb94d82246de2165612ee08b14306,
        type_description_1,
        par_self
    );


    // Release cached frame.
    if ( frame_86bfb94d82246de2165612ee08b14306 == cache_frame_86bfb94d82246de2165612ee08b14306 )
    {
        Py_DECREF( frame_86bfb94d82246de2165612ee08b14306 );
    }
    cache_frame_86bfb94d82246de2165612ee08b14306 = NULL;

    assertFrameObject( frame_86bfb94d82246de2165612ee08b14306 );

    // Put the previous frame back on top.
    popFrameStack();

    // Return the error.
    goto try_except_handler_1;

    frame_no_exception_1:;
    tmp_return_value = Py_None;
    Py_INCREF( tmp_return_value );
    goto try_return_handler_1;
    // tried codes exits in all cases
    NUITKA_CANNOT_GET_HERE( plistlib$$$function_27_end_array );
    return NULL;
    // Return handler code:
    try_return_handler_1:;
    CHECK_OBJECT( (PyObject *)par_self );
    Py_DECREF( par_self );
    par_self = NULL;

    goto function_return_exit;
    // Exception handler code:
    try_except_handler_1:;
    exception_keeper_type_1 = exception_type;
    exception_keeper_value_1 = exception_value;
    exception_keeper_tb_1 = exception_tb;
    exception_keeper_lineno_1 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    CHECK_OBJECT( (PyObject *)par_self );
    Py_DECREF( par_self );
    par_self = NULL;

    // Re-raise.
    exception_type = exception_keeper_type_1;
    exception_value = exception_keeper_value_1;
    exception_tb = exception_keeper_tb_1;
    exception_lineno = exception_keeper_lineno_1;

    goto function_exception_exit;
    // End of try:

    // Return statement must have exited already.
    NUITKA_CANNOT_GET_HERE( plistlib$$$function_27_end_array );
    return NULL;

function_exception_exit:
    assert( exception_type );
    RESTORE_ERROR_OCCURRED( exception_type, exception_value, exception_tb );

    return NULL;

function_return_exit:
   // Function cleanup code if any.


   // Actual function exit with return value, making sure we did not make
   // the error status worse despite non-NULL return.
   CHECK_OBJECT( tmp_return_value );
   assert( had_error || !ERROR_OCCURRED() );
   return tmp_return_value;
}


static PyObject *impl_plistlib$$$function_28_end_true( struct Nuitka_FunctionObject const *self, PyObject **python_pars )
{
    // Preserve error status for checks
#ifndef __NUITKA_NO_ASSERT__
    NUITKA_MAY_BE_UNUSED bool had_error = ERROR_OCCURRED();
#endif

    // Local variable declarations.
    PyObject *par_self = python_pars[ 0 ];
    struct Nuitka_FrameObject *frame_a361a94c0aa4bb29cd54db7f2d6290cd;
    NUITKA_MAY_BE_UNUSED char const *type_description_1 = NULL;
    PyObject *exception_type = NULL;
    PyObject *exception_value = NULL;
    PyTracebackObject *exception_tb = NULL;
    NUITKA_MAY_BE_UNUSED int exception_lineno = 0;
    static struct Nuitka_FrameObject *cache_frame_a361a94c0aa4bb29cd54db7f2d6290cd = NULL;
    PyObject *tmp_return_value = NULL;
    PyObject *exception_keeper_type_1;
    PyObject *exception_keeper_value_1;
    PyTracebackObject *exception_keeper_tb_1;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_1;

    // Actual function body.
    // Tried code:
    MAKE_OR_REUSE_FRAME( cache_frame_a361a94c0aa4bb29cd54db7f2d6290cd, codeobj_a361a94c0aa4bb29cd54db7f2d6290cd, module_plistlib, sizeof(void *) );
    frame_a361a94c0aa4bb29cd54db7f2d6290cd = cache_frame_a361a94c0aa4bb29cd54db7f2d6290cd;

    // Push the new frame as the currently active one.
    pushFrameStack( frame_a361a94c0aa4bb29cd54db7f2d6290cd );

    // Mark the frame object as in use, ref count 1 will be up for reuse.
    assert( Py_REFCNT( frame_a361a94c0aa4bb29cd54db7f2d6290cd ) == 2 ); // Frame stack

    // Framed code:
    {
        PyObject *tmp_called_instance_1;
        PyObject *tmp_call_result_1;
        CHECK_OBJECT( par_self );
        tmp_called_instance_1 = par_self;
        frame_a361a94c0aa4bb29cd54db7f2d6290cd->m_frame.f_lineno = 326;
        tmp_call_result_1 = CALL_METHOD_WITH_ARGS1( tmp_called_instance_1, const_str_plain_add_object, &PyTuple_GET_ITEM( const_tuple_true_tuple, 0 ) );

        if ( tmp_call_result_1 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 326;
            type_description_1 = "o";
            goto frame_exception_exit_1;
        }
        Py_DECREF( tmp_call_result_1 );
    }

#if 0
    RESTORE_FRAME_EXCEPTION( frame_a361a94c0aa4bb29cd54db7f2d6290cd );
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto frame_no_exception_1;

    frame_exception_exit_1:;

#if 0
    RESTORE_FRAME_EXCEPTION( frame_a361a94c0aa4bb29cd54db7f2d6290cd );
#endif

    if ( exception_tb == NULL )
    {
        exception_tb = MAKE_TRACEBACK( frame_a361a94c0aa4bb29cd54db7f2d6290cd, exception_lineno );
    }
    else if ( exception_tb->tb_frame != &frame_a361a94c0aa4bb29cd54db7f2d6290cd->m_frame )
    {
        exception_tb = ADD_TRACEBACK( exception_tb, frame_a361a94c0aa4bb29cd54db7f2d6290cd, exception_lineno );
    }

    // Attachs locals to frame if any.
    Nuitka_Frame_AttachLocals(
        (struct Nuitka_FrameObject *)frame_a361a94c0aa4bb29cd54db7f2d6290cd,
        type_description_1,
        par_self
    );


    // Release cached frame.
    if ( frame_a361a94c0aa4bb29cd54db7f2d6290cd == cache_frame_a361a94c0aa4bb29cd54db7f2d6290cd )
    {
        Py_DECREF( frame_a361a94c0aa4bb29cd54db7f2d6290cd );
    }
    cache_frame_a361a94c0aa4bb29cd54db7f2d6290cd = NULL;

    assertFrameObject( frame_a361a94c0aa4bb29cd54db7f2d6290cd );

    // Put the previous frame back on top.
    popFrameStack();

    // Return the error.
    goto try_except_handler_1;

    frame_no_exception_1:;
    tmp_return_value = Py_None;
    Py_INCREF( tmp_return_value );
    goto try_return_handler_1;
    // tried codes exits in all cases
    NUITKA_CANNOT_GET_HERE( plistlib$$$function_28_end_true );
    return NULL;
    // Return handler code:
    try_return_handler_1:;
    CHECK_OBJECT( (PyObject *)par_self );
    Py_DECREF( par_self );
    par_self = NULL;

    goto function_return_exit;
    // Exception handler code:
    try_except_handler_1:;
    exception_keeper_type_1 = exception_type;
    exception_keeper_value_1 = exception_value;
    exception_keeper_tb_1 = exception_tb;
    exception_keeper_lineno_1 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    CHECK_OBJECT( (PyObject *)par_self );
    Py_DECREF( par_self );
    par_self = NULL;

    // Re-raise.
    exception_type = exception_keeper_type_1;
    exception_value = exception_keeper_value_1;
    exception_tb = exception_keeper_tb_1;
    exception_lineno = exception_keeper_lineno_1;

    goto function_exception_exit;
    // End of try:

    // Return statement must have exited already.
    NUITKA_CANNOT_GET_HERE( plistlib$$$function_28_end_true );
    return NULL;

function_exception_exit:
    assert( exception_type );
    RESTORE_ERROR_OCCURRED( exception_type, exception_value, exception_tb );

    return NULL;

function_return_exit:
   // Function cleanup code if any.


   // Actual function exit with return value, making sure we did not make
   // the error status worse despite non-NULL return.
   CHECK_OBJECT( tmp_return_value );
   assert( had_error || !ERROR_OCCURRED() );
   return tmp_return_value;
}


static PyObject *impl_plistlib$$$function_29_end_false( struct Nuitka_FunctionObject const *self, PyObject **python_pars )
{
    // Preserve error status for checks
#ifndef __NUITKA_NO_ASSERT__
    NUITKA_MAY_BE_UNUSED bool had_error = ERROR_OCCURRED();
#endif

    // Local variable declarations.
    PyObject *par_self = python_pars[ 0 ];
    struct Nuitka_FrameObject *frame_4558bf051938d18c1bb120aac473f569;
    NUITKA_MAY_BE_UNUSED char const *type_description_1 = NULL;
    PyObject *exception_type = NULL;
    PyObject *exception_value = NULL;
    PyTracebackObject *exception_tb = NULL;
    NUITKA_MAY_BE_UNUSED int exception_lineno = 0;
    static struct Nuitka_FrameObject *cache_frame_4558bf051938d18c1bb120aac473f569 = NULL;
    PyObject *tmp_return_value = NULL;
    PyObject *exception_keeper_type_1;
    PyObject *exception_keeper_value_1;
    PyTracebackObject *exception_keeper_tb_1;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_1;

    // Actual function body.
    // Tried code:
    MAKE_OR_REUSE_FRAME( cache_frame_4558bf051938d18c1bb120aac473f569, codeobj_4558bf051938d18c1bb120aac473f569, module_plistlib, sizeof(void *) );
    frame_4558bf051938d18c1bb120aac473f569 = cache_frame_4558bf051938d18c1bb120aac473f569;

    // Push the new frame as the currently active one.
    pushFrameStack( frame_4558bf051938d18c1bb120aac473f569 );

    // Mark the frame object as in use, ref count 1 will be up for reuse.
    assert( Py_REFCNT( frame_4558bf051938d18c1bb120aac473f569 ) == 2 ); // Frame stack

    // Framed code:
    {
        PyObject *tmp_called_instance_1;
        PyObject *tmp_call_result_1;
        CHECK_OBJECT( par_self );
        tmp_called_instance_1 = par_self;
        frame_4558bf051938d18c1bb120aac473f569->m_frame.f_lineno = 329;
        tmp_call_result_1 = CALL_METHOD_WITH_ARGS1( tmp_called_instance_1, const_str_plain_add_object, &PyTuple_GET_ITEM( const_tuple_false_tuple, 0 ) );

        if ( tmp_call_result_1 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 329;
            type_description_1 = "o";
            goto frame_exception_exit_1;
        }
        Py_DECREF( tmp_call_result_1 );
    }

#if 0
    RESTORE_FRAME_EXCEPTION( frame_4558bf051938d18c1bb120aac473f569 );
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto frame_no_exception_1;

    frame_exception_exit_1:;

#if 0
    RESTORE_FRAME_EXCEPTION( frame_4558bf051938d18c1bb120aac473f569 );
#endif

    if ( exception_tb == NULL )
    {
        exception_tb = MAKE_TRACEBACK( frame_4558bf051938d18c1bb120aac473f569, exception_lineno );
    }
    else if ( exception_tb->tb_frame != &frame_4558bf051938d18c1bb120aac473f569->m_frame )
    {
        exception_tb = ADD_TRACEBACK( exception_tb, frame_4558bf051938d18c1bb120aac473f569, exception_lineno );
    }

    // Attachs locals to frame if any.
    Nuitka_Frame_AttachLocals(
        (struct Nuitka_FrameObject *)frame_4558bf051938d18c1bb120aac473f569,
        type_description_1,
        par_self
    );


    // Release cached frame.
    if ( frame_4558bf051938d18c1bb120aac473f569 == cache_frame_4558bf051938d18c1bb120aac473f569 )
    {
        Py_DECREF( frame_4558bf051938d18c1bb120aac473f569 );
    }
    cache_frame_4558bf051938d18c1bb120aac473f569 = NULL;

    assertFrameObject( frame_4558bf051938d18c1bb120aac473f569 );

    // Put the previous frame back on top.
    popFrameStack();

    // Return the error.
    goto try_except_handler_1;

    frame_no_exception_1:;
    tmp_return_value = Py_None;
    Py_INCREF( tmp_return_value );
    goto try_return_handler_1;
    // tried codes exits in all cases
    NUITKA_CANNOT_GET_HERE( plistlib$$$function_29_end_false );
    return NULL;
    // Return handler code:
    try_return_handler_1:;
    CHECK_OBJECT( (PyObject *)par_self );
    Py_DECREF( par_self );
    par_self = NULL;

    goto function_return_exit;
    // Exception handler code:
    try_except_handler_1:;
    exception_keeper_type_1 = exception_type;
    exception_keeper_value_1 = exception_value;
    exception_keeper_tb_1 = exception_tb;
    exception_keeper_lineno_1 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    CHECK_OBJECT( (PyObject *)par_self );
    Py_DECREF( par_self );
    par_self = NULL;

    // Re-raise.
    exception_type = exception_keeper_type_1;
    exception_value = exception_keeper_value_1;
    exception_tb = exception_keeper_tb_1;
    exception_lineno = exception_keeper_lineno_1;

    goto function_exception_exit;
    // End of try:

    // Return statement must have exited already.
    NUITKA_CANNOT_GET_HERE( plistlib$$$function_29_end_false );
    return NULL;

function_exception_exit:
    assert( exception_type );
    RESTORE_ERROR_OCCURRED( exception_type, exception_value, exception_tb );

    return NULL;

function_return_exit:
   // Function cleanup code if any.


   // Actual function exit with return value, making sure we did not make
   // the error status worse despite non-NULL return.
   CHECK_OBJECT( tmp_return_value );
   assert( had_error || !ERROR_OCCURRED() );
   return tmp_return_value;
}


static PyObject *impl_plistlib$$$function_30_end_integer( struct Nuitka_FunctionObject const *self, PyObject **python_pars )
{
    // Preserve error status for checks
#ifndef __NUITKA_NO_ASSERT__
    NUITKA_MAY_BE_UNUSED bool had_error = ERROR_OCCURRED();
#endif

    // Local variable declarations.
    PyObject *par_self = python_pars[ 0 ];
    struct Nuitka_FrameObject *frame_ef0071820f77a4becce92fd52300ac9b;
    NUITKA_MAY_BE_UNUSED char const *type_description_1 = NULL;
    PyObject *exception_type = NULL;
    PyObject *exception_value = NULL;
    PyTracebackObject *exception_tb = NULL;
    NUITKA_MAY_BE_UNUSED int exception_lineno = 0;
    static struct Nuitka_FrameObject *cache_frame_ef0071820f77a4becce92fd52300ac9b = NULL;
    PyObject *tmp_return_value = NULL;
    PyObject *exception_keeper_type_1;
    PyObject *exception_keeper_value_1;
    PyTracebackObject *exception_keeper_tb_1;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_1;

    // Actual function body.
    // Tried code:
    MAKE_OR_REUSE_FRAME( cache_frame_ef0071820f77a4becce92fd52300ac9b, codeobj_ef0071820f77a4becce92fd52300ac9b, module_plistlib, sizeof(void *) );
    frame_ef0071820f77a4becce92fd52300ac9b = cache_frame_ef0071820f77a4becce92fd52300ac9b;

    // Push the new frame as the currently active one.
    pushFrameStack( frame_ef0071820f77a4becce92fd52300ac9b );

    // Mark the frame object as in use, ref count 1 will be up for reuse.
    assert( Py_REFCNT( frame_ef0071820f77a4becce92fd52300ac9b ) == 2 ); // Frame stack

    // Framed code:
    {
        PyObject *tmp_called_name_1;
        PyObject *tmp_source_name_1;
        PyObject *tmp_call_result_1;
        PyObject *tmp_args_element_name_1;
        PyObject *tmp_int_arg_1;
        PyObject *tmp_called_instance_1;
        CHECK_OBJECT( par_self );
        tmp_source_name_1 = par_self;
        tmp_called_name_1 = LOOKUP_ATTRIBUTE( tmp_source_name_1, const_str_plain_add_object );
        if ( tmp_called_name_1 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 332;
            type_description_1 = "o";
            goto frame_exception_exit_1;
        }
        CHECK_OBJECT( par_self );
        tmp_called_instance_1 = par_self;
        frame_ef0071820f77a4becce92fd52300ac9b->m_frame.f_lineno = 332;
        tmp_int_arg_1 = CALL_METHOD_NO_ARGS( tmp_called_instance_1, const_str_plain_get_data );
        if ( tmp_int_arg_1 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
            Py_DECREF( tmp_called_name_1 );

            exception_lineno = 332;
            type_description_1 = "o";
            goto frame_exception_exit_1;
        }
        tmp_args_element_name_1 = PyNumber_Int( tmp_int_arg_1 );
        Py_DECREF( tmp_int_arg_1 );
        if ( tmp_args_element_name_1 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
            Py_DECREF( tmp_called_name_1 );

            exception_lineno = 332;
            type_description_1 = "o";
            goto frame_exception_exit_1;
        }
        frame_ef0071820f77a4becce92fd52300ac9b->m_frame.f_lineno = 332;
        {
            PyObject *call_args[] = { tmp_args_element_name_1 };
            tmp_call_result_1 = CALL_FUNCTION_WITH_ARGS1( tmp_called_name_1, call_args );
        }

        Py_DECREF( tmp_called_name_1 );
        Py_DECREF( tmp_args_element_name_1 );
        if ( tmp_call_result_1 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 332;
            type_description_1 = "o";
            goto frame_exception_exit_1;
        }
        Py_DECREF( tmp_call_result_1 );
    }

#if 0
    RESTORE_FRAME_EXCEPTION( frame_ef0071820f77a4becce92fd52300ac9b );
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto frame_no_exception_1;

    frame_exception_exit_1:;

#if 0
    RESTORE_FRAME_EXCEPTION( frame_ef0071820f77a4becce92fd52300ac9b );
#endif

    if ( exception_tb == NULL )
    {
        exception_tb = MAKE_TRACEBACK( frame_ef0071820f77a4becce92fd52300ac9b, exception_lineno );
    }
    else if ( exception_tb->tb_frame != &frame_ef0071820f77a4becce92fd52300ac9b->m_frame )
    {
        exception_tb = ADD_TRACEBACK( exception_tb, frame_ef0071820f77a4becce92fd52300ac9b, exception_lineno );
    }

    // Attachs locals to frame if any.
    Nuitka_Frame_AttachLocals(
        (struct Nuitka_FrameObject *)frame_ef0071820f77a4becce92fd52300ac9b,
        type_description_1,
        par_self
    );


    // Release cached frame.
    if ( frame_ef0071820f77a4becce92fd52300ac9b == cache_frame_ef0071820f77a4becce92fd52300ac9b )
    {
        Py_DECREF( frame_ef0071820f77a4becce92fd52300ac9b );
    }
    cache_frame_ef0071820f77a4becce92fd52300ac9b = NULL;

    assertFrameObject( frame_ef0071820f77a4becce92fd52300ac9b );

    // Put the previous frame back on top.
    popFrameStack();

    // Return the error.
    goto try_except_handler_1;

    frame_no_exception_1:;
    tmp_return_value = Py_None;
    Py_INCREF( tmp_return_value );
    goto try_return_handler_1;
    // tried codes exits in all cases
    NUITKA_CANNOT_GET_HERE( plistlib$$$function_30_end_integer );
    return NULL;
    // Return handler code:
    try_return_handler_1:;
    CHECK_OBJECT( (PyObject *)par_self );
    Py_DECREF( par_self );
    par_self = NULL;

    goto function_return_exit;
    // Exception handler code:
    try_except_handler_1:;
    exception_keeper_type_1 = exception_type;
    exception_keeper_value_1 = exception_value;
    exception_keeper_tb_1 = exception_tb;
    exception_keeper_lineno_1 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    CHECK_OBJECT( (PyObject *)par_self );
    Py_DECREF( par_self );
    par_self = NULL;

    // Re-raise.
    exception_type = exception_keeper_type_1;
    exception_value = exception_keeper_value_1;
    exception_tb = exception_keeper_tb_1;
    exception_lineno = exception_keeper_lineno_1;

    goto function_exception_exit;
    // End of try:

    // Return statement must have exited already.
    NUITKA_CANNOT_GET_HERE( plistlib$$$function_30_end_integer );
    return NULL;

function_exception_exit:
    assert( exception_type );
    RESTORE_ERROR_OCCURRED( exception_type, exception_value, exception_tb );

    return NULL;

function_return_exit:
   // Function cleanup code if any.


   // Actual function exit with return value, making sure we did not make
   // the error status worse despite non-NULL return.
   CHECK_OBJECT( tmp_return_value );
   assert( had_error || !ERROR_OCCURRED() );
   return tmp_return_value;
}


static PyObject *impl_plistlib$$$function_31_end_real( struct Nuitka_FunctionObject const *self, PyObject **python_pars )
{
    // Preserve error status for checks
#ifndef __NUITKA_NO_ASSERT__
    NUITKA_MAY_BE_UNUSED bool had_error = ERROR_OCCURRED();
#endif

    // Local variable declarations.
    PyObject *par_self = python_pars[ 0 ];
    struct Nuitka_FrameObject *frame_450bf0e55fae22b04555a9e483a3a399;
    NUITKA_MAY_BE_UNUSED char const *type_description_1 = NULL;
    PyObject *exception_type = NULL;
    PyObject *exception_value = NULL;
    PyTracebackObject *exception_tb = NULL;
    NUITKA_MAY_BE_UNUSED int exception_lineno = 0;
    static struct Nuitka_FrameObject *cache_frame_450bf0e55fae22b04555a9e483a3a399 = NULL;
    PyObject *tmp_return_value = NULL;
    PyObject *exception_keeper_type_1;
    PyObject *exception_keeper_value_1;
    PyTracebackObject *exception_keeper_tb_1;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_1;

    // Actual function body.
    // Tried code:
    MAKE_OR_REUSE_FRAME( cache_frame_450bf0e55fae22b04555a9e483a3a399, codeobj_450bf0e55fae22b04555a9e483a3a399, module_plistlib, sizeof(void *) );
    frame_450bf0e55fae22b04555a9e483a3a399 = cache_frame_450bf0e55fae22b04555a9e483a3a399;

    // Push the new frame as the currently active one.
    pushFrameStack( frame_450bf0e55fae22b04555a9e483a3a399 );

    // Mark the frame object as in use, ref count 1 will be up for reuse.
    assert( Py_REFCNT( frame_450bf0e55fae22b04555a9e483a3a399 ) == 2 ); // Frame stack

    // Framed code:
    {
        PyObject *tmp_called_name_1;
        PyObject *tmp_source_name_1;
        PyObject *tmp_call_result_1;
        PyObject *tmp_args_element_name_1;
        PyObject *tmp_float_arg_1;
        PyObject *tmp_called_instance_1;
        CHECK_OBJECT( par_self );
        tmp_source_name_1 = par_self;
        tmp_called_name_1 = LOOKUP_ATTRIBUTE( tmp_source_name_1, const_str_plain_add_object );
        if ( tmp_called_name_1 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 335;
            type_description_1 = "o";
            goto frame_exception_exit_1;
        }
        CHECK_OBJECT( par_self );
        tmp_called_instance_1 = par_self;
        frame_450bf0e55fae22b04555a9e483a3a399->m_frame.f_lineno = 335;
        tmp_float_arg_1 = CALL_METHOD_NO_ARGS( tmp_called_instance_1, const_str_plain_get_data );
        if ( tmp_float_arg_1 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
            Py_DECREF( tmp_called_name_1 );

            exception_lineno = 335;
            type_description_1 = "o";
            goto frame_exception_exit_1;
        }
        tmp_args_element_name_1 = TO_FLOAT( tmp_float_arg_1 );
        Py_DECREF( tmp_float_arg_1 );
        if ( tmp_args_element_name_1 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
            Py_DECREF( tmp_called_name_1 );

            exception_lineno = 335;
            type_description_1 = "o";
            goto frame_exception_exit_1;
        }
        frame_450bf0e55fae22b04555a9e483a3a399->m_frame.f_lineno = 335;
        {
            PyObject *call_args[] = { tmp_args_element_name_1 };
            tmp_call_result_1 = CALL_FUNCTION_WITH_ARGS1( tmp_called_name_1, call_args );
        }

        Py_DECREF( tmp_called_name_1 );
        Py_DECREF( tmp_args_element_name_1 );
        if ( tmp_call_result_1 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 335;
            type_description_1 = "o";
            goto frame_exception_exit_1;
        }
        Py_DECREF( tmp_call_result_1 );
    }

#if 0
    RESTORE_FRAME_EXCEPTION( frame_450bf0e55fae22b04555a9e483a3a399 );
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto frame_no_exception_1;

    frame_exception_exit_1:;

#if 0
    RESTORE_FRAME_EXCEPTION( frame_450bf0e55fae22b04555a9e483a3a399 );
#endif

    if ( exception_tb == NULL )
    {
        exception_tb = MAKE_TRACEBACK( frame_450bf0e55fae22b04555a9e483a3a399, exception_lineno );
    }
    else if ( exception_tb->tb_frame != &frame_450bf0e55fae22b04555a9e483a3a399->m_frame )
    {
        exception_tb = ADD_TRACEBACK( exception_tb, frame_450bf0e55fae22b04555a9e483a3a399, exception_lineno );
    }

    // Attachs locals to frame if any.
    Nuitka_Frame_AttachLocals(
        (struct Nuitka_FrameObject *)frame_450bf0e55fae22b04555a9e483a3a399,
        type_description_1,
        par_self
    );


    // Release cached frame.
    if ( frame_450bf0e55fae22b04555a9e483a3a399 == cache_frame_450bf0e55fae22b04555a9e483a3a399 )
    {
        Py_DECREF( frame_450bf0e55fae22b04555a9e483a3a399 );
    }
    cache_frame_450bf0e55fae22b04555a9e483a3a399 = NULL;

    assertFrameObject( frame_450bf0e55fae22b04555a9e483a3a399 );

    // Put the previous frame back on top.
    popFrameStack();

    // Return the error.
    goto try_except_handler_1;

    frame_no_exception_1:;
    tmp_return_value = Py_None;
    Py_INCREF( tmp_return_value );
    goto try_return_handler_1;
    // tried codes exits in all cases
    NUITKA_CANNOT_GET_HERE( plistlib$$$function_31_end_real );
    return NULL;
    // Return handler code:
    try_return_handler_1:;
    CHECK_OBJECT( (PyObject *)par_self );
    Py_DECREF( par_self );
    par_self = NULL;

    goto function_return_exit;
    // Exception handler code:
    try_except_handler_1:;
    exception_keeper_type_1 = exception_type;
    exception_keeper_value_1 = exception_value;
    exception_keeper_tb_1 = exception_tb;
    exception_keeper_lineno_1 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    CHECK_OBJECT( (PyObject *)par_self );
    Py_DECREF( par_self );
    par_self = NULL;

    // Re-raise.
    exception_type = exception_keeper_type_1;
    exception_value = exception_keeper_value_1;
    exception_tb = exception_keeper_tb_1;
    exception_lineno = exception_keeper_lineno_1;

    goto function_exception_exit;
    // End of try:

    // Return statement must have exited already.
    NUITKA_CANNOT_GET_HERE( plistlib$$$function_31_end_real );
    return NULL;

function_exception_exit:
    assert( exception_type );
    RESTORE_ERROR_OCCURRED( exception_type, exception_value, exception_tb );

    return NULL;

function_return_exit:
   // Function cleanup code if any.


   // Actual function exit with return value, making sure we did not make
   // the error status worse despite non-NULL return.
   CHECK_OBJECT( tmp_return_value );
   assert( had_error || !ERROR_OCCURRED() );
   return tmp_return_value;
}


static PyObject *impl_plistlib$$$function_32_end_string( struct Nuitka_FunctionObject const *self, PyObject **python_pars )
{
    // Preserve error status for checks
#ifndef __NUITKA_NO_ASSERT__
    NUITKA_MAY_BE_UNUSED bool had_error = ERROR_OCCURRED();
#endif

    // Local variable declarations.
    PyObject *par_self = python_pars[ 0 ];
    struct Nuitka_FrameObject *frame_53fe42fd8bf57f188acf5a315f6a6348;
    NUITKA_MAY_BE_UNUSED char const *type_description_1 = NULL;
    PyObject *exception_type = NULL;
    PyObject *exception_value = NULL;
    PyTracebackObject *exception_tb = NULL;
    NUITKA_MAY_BE_UNUSED int exception_lineno = 0;
    static struct Nuitka_FrameObject *cache_frame_53fe42fd8bf57f188acf5a315f6a6348 = NULL;
    PyObject *tmp_return_value = NULL;
    PyObject *exception_keeper_type_1;
    PyObject *exception_keeper_value_1;
    PyTracebackObject *exception_keeper_tb_1;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_1;

    // Actual function body.
    // Tried code:
    MAKE_OR_REUSE_FRAME( cache_frame_53fe42fd8bf57f188acf5a315f6a6348, codeobj_53fe42fd8bf57f188acf5a315f6a6348, module_plistlib, sizeof(void *) );
    frame_53fe42fd8bf57f188acf5a315f6a6348 = cache_frame_53fe42fd8bf57f188acf5a315f6a6348;

    // Push the new frame as the currently active one.
    pushFrameStack( frame_53fe42fd8bf57f188acf5a315f6a6348 );

    // Mark the frame object as in use, ref count 1 will be up for reuse.
    assert( Py_REFCNT( frame_53fe42fd8bf57f188acf5a315f6a6348 ) == 2 ); // Frame stack

    // Framed code:
    {
        PyObject *tmp_called_name_1;
        PyObject *tmp_source_name_1;
        PyObject *tmp_call_result_1;
        PyObject *tmp_args_element_name_1;
        PyObject *tmp_called_instance_1;
        CHECK_OBJECT( par_self );
        tmp_source_name_1 = par_self;
        tmp_called_name_1 = LOOKUP_ATTRIBUTE( tmp_source_name_1, const_str_plain_add_object );
        if ( tmp_called_name_1 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 338;
            type_description_1 = "o";
            goto frame_exception_exit_1;
        }
        CHECK_OBJECT( par_self );
        tmp_called_instance_1 = par_self;
        frame_53fe42fd8bf57f188acf5a315f6a6348->m_frame.f_lineno = 338;
        tmp_args_element_name_1 = CALL_METHOD_NO_ARGS( tmp_called_instance_1, const_str_plain_get_data );
        if ( tmp_args_element_name_1 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
            Py_DECREF( tmp_called_name_1 );

            exception_lineno = 338;
            type_description_1 = "o";
            goto frame_exception_exit_1;
        }
        frame_53fe42fd8bf57f188acf5a315f6a6348->m_frame.f_lineno = 338;
        {
            PyObject *call_args[] = { tmp_args_element_name_1 };
            tmp_call_result_1 = CALL_FUNCTION_WITH_ARGS1( tmp_called_name_1, call_args );
        }

        Py_DECREF( tmp_called_name_1 );
        Py_DECREF( tmp_args_element_name_1 );
        if ( tmp_call_result_1 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 338;
            type_description_1 = "o";
            goto frame_exception_exit_1;
        }
        Py_DECREF( tmp_call_result_1 );
    }

#if 0
    RESTORE_FRAME_EXCEPTION( frame_53fe42fd8bf57f188acf5a315f6a6348 );
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto frame_no_exception_1;

    frame_exception_exit_1:;

#if 0
    RESTORE_FRAME_EXCEPTION( frame_53fe42fd8bf57f188acf5a315f6a6348 );
#endif

    if ( exception_tb == NULL )
    {
        exception_tb = MAKE_TRACEBACK( frame_53fe42fd8bf57f188acf5a315f6a6348, exception_lineno );
    }
    else if ( exception_tb->tb_frame != &frame_53fe42fd8bf57f188acf5a315f6a6348->m_frame )
    {
        exception_tb = ADD_TRACEBACK( exception_tb, frame_53fe42fd8bf57f188acf5a315f6a6348, exception_lineno );
    }

    // Attachs locals to frame if any.
    Nuitka_Frame_AttachLocals(
        (struct Nuitka_FrameObject *)frame_53fe42fd8bf57f188acf5a315f6a6348,
        type_description_1,
        par_self
    );


    // Release cached frame.
    if ( frame_53fe42fd8bf57f188acf5a315f6a6348 == cache_frame_53fe42fd8bf57f188acf5a315f6a6348 )
    {
        Py_DECREF( frame_53fe42fd8bf57f188acf5a315f6a6348 );
    }
    cache_frame_53fe42fd8bf57f188acf5a315f6a6348 = NULL;

    assertFrameObject( frame_53fe42fd8bf57f188acf5a315f6a6348 );

    // Put the previous frame back on top.
    popFrameStack();

    // Return the error.
    goto try_except_handler_1;

    frame_no_exception_1:;
    tmp_return_value = Py_None;
    Py_INCREF( tmp_return_value );
    goto try_return_handler_1;
    // tried codes exits in all cases
    NUITKA_CANNOT_GET_HERE( plistlib$$$function_32_end_string );
    return NULL;
    // Return handler code:
    try_return_handler_1:;
    CHECK_OBJECT( (PyObject *)par_self );
    Py_DECREF( par_self );
    par_self = NULL;

    goto function_return_exit;
    // Exception handler code:
    try_except_handler_1:;
    exception_keeper_type_1 = exception_type;
    exception_keeper_value_1 = exception_value;
    exception_keeper_tb_1 = exception_tb;
    exception_keeper_lineno_1 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    CHECK_OBJECT( (PyObject *)par_self );
    Py_DECREF( par_self );
    par_self = NULL;

    // Re-raise.
    exception_type = exception_keeper_type_1;
    exception_value = exception_keeper_value_1;
    exception_tb = exception_keeper_tb_1;
    exception_lineno = exception_keeper_lineno_1;

    goto function_exception_exit;
    // End of try:

    // Return statement must have exited already.
    NUITKA_CANNOT_GET_HERE( plistlib$$$function_32_end_string );
    return NULL;

function_exception_exit:
    assert( exception_type );
    RESTORE_ERROR_OCCURRED( exception_type, exception_value, exception_tb );

    return NULL;

function_return_exit:
   // Function cleanup code if any.


   // Actual function exit with return value, making sure we did not make
   // the error status worse despite non-NULL return.
   CHECK_OBJECT( tmp_return_value );
   assert( had_error || !ERROR_OCCURRED() );
   return tmp_return_value;
}


static PyObject *impl_plistlib$$$function_33_end_data( struct Nuitka_FunctionObject const *self, PyObject **python_pars )
{
    // Preserve error status for checks
#ifndef __NUITKA_NO_ASSERT__
    NUITKA_MAY_BE_UNUSED bool had_error = ERROR_OCCURRED();
#endif

    // Local variable declarations.
    PyObject *par_self = python_pars[ 0 ];
    struct Nuitka_FrameObject *frame_394db3475a232081bdb1f978c225930f;
    NUITKA_MAY_BE_UNUSED char const *type_description_1 = NULL;
    PyObject *exception_type = NULL;
    PyObject *exception_value = NULL;
    PyTracebackObject *exception_tb = NULL;
    NUITKA_MAY_BE_UNUSED int exception_lineno = 0;
    static struct Nuitka_FrameObject *cache_frame_394db3475a232081bdb1f978c225930f = NULL;
    PyObject *tmp_return_value = NULL;
    PyObject *exception_keeper_type_1;
    PyObject *exception_keeper_value_1;
    PyTracebackObject *exception_keeper_tb_1;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_1;

    // Actual function body.
    // Tried code:
    MAKE_OR_REUSE_FRAME( cache_frame_394db3475a232081bdb1f978c225930f, codeobj_394db3475a232081bdb1f978c225930f, module_plistlib, sizeof(void *) );
    frame_394db3475a232081bdb1f978c225930f = cache_frame_394db3475a232081bdb1f978c225930f;

    // Push the new frame as the currently active one.
    pushFrameStack( frame_394db3475a232081bdb1f978c225930f );

    // Mark the frame object as in use, ref count 1 will be up for reuse.
    assert( Py_REFCNT( frame_394db3475a232081bdb1f978c225930f ) == 2 ); // Frame stack

    // Framed code:
    {
        nuitka_bool tmp_condition_result_1;
        PyObject *tmp_source_name_1;
        PyObject *tmp_attribute_value_1;
        int tmp_truth_name_1;
        CHECK_OBJECT( par_self );
        tmp_source_name_1 = par_self;
        tmp_attribute_value_1 = LOOKUP_ATTRIBUTE( tmp_source_name_1, const_str_plain__use_builtin_types );
        if ( tmp_attribute_value_1 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 341;
            type_description_1 = "o";
            goto frame_exception_exit_1;
        }
        tmp_truth_name_1 = CHECK_IF_TRUE( tmp_attribute_value_1 );
        if ( tmp_truth_name_1 == -1 )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
            Py_DECREF( tmp_attribute_value_1 );

            exception_lineno = 341;
            type_description_1 = "o";
            goto frame_exception_exit_1;
        }
        tmp_condition_result_1 = tmp_truth_name_1 == 1 ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
        Py_DECREF( tmp_attribute_value_1 );
        if ( tmp_condition_result_1 == NUITKA_BOOL_TRUE )
        {
            goto branch_yes_1;
        }
        else
        {
            goto branch_no_1;
        }
        branch_yes_1:;
        {
            PyObject *tmp_called_name_1;
            PyObject *tmp_source_name_2;
            PyObject *tmp_call_result_1;
            PyObject *tmp_args_element_name_1;
            PyObject *tmp_called_name_2;
            PyObject *tmp_mvar_value_1;
            PyObject *tmp_args_element_name_2;
            PyObject *tmp_called_instance_1;
            CHECK_OBJECT( par_self );
            tmp_source_name_2 = par_self;
            tmp_called_name_1 = LOOKUP_ATTRIBUTE( tmp_source_name_2, const_str_plain_add_object );
            if ( tmp_called_name_1 == NULL )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 342;
                type_description_1 = "o";
                goto frame_exception_exit_1;
            }
            tmp_mvar_value_1 = GET_STRING_DICT_VALUE( moduledict_plistlib, (Nuitka_StringObject *)const_str_plain__decode_base64 );

            if (unlikely( tmp_mvar_value_1 == NULL ))
            {
                tmp_mvar_value_1 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain__decode_base64 );
            }

            if ( tmp_mvar_value_1 == NULL )
            {
                Py_DECREF( tmp_called_name_1 );
                exception_type = PyExc_NameError;
                Py_INCREF( exception_type );
                exception_value = PyUnicode_FromFormat( "name '%s' is not defined", "_decode_base64" );
                exception_tb = NULL;
                NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
                CHAIN_EXCEPTION( exception_value );

                exception_lineno = 342;
                type_description_1 = "o";
                goto frame_exception_exit_1;
            }

            tmp_called_name_2 = tmp_mvar_value_1;
            CHECK_OBJECT( par_self );
            tmp_called_instance_1 = par_self;
            frame_394db3475a232081bdb1f978c225930f->m_frame.f_lineno = 342;
            tmp_args_element_name_2 = CALL_METHOD_NO_ARGS( tmp_called_instance_1, const_str_plain_get_data );
            if ( tmp_args_element_name_2 == NULL )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
                Py_DECREF( tmp_called_name_1 );

                exception_lineno = 342;
                type_description_1 = "o";
                goto frame_exception_exit_1;
            }
            frame_394db3475a232081bdb1f978c225930f->m_frame.f_lineno = 342;
            {
                PyObject *call_args[] = { tmp_args_element_name_2 };
                tmp_args_element_name_1 = CALL_FUNCTION_WITH_ARGS1( tmp_called_name_2, call_args );
            }

            Py_DECREF( tmp_args_element_name_2 );
            if ( tmp_args_element_name_1 == NULL )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
                Py_DECREF( tmp_called_name_1 );

                exception_lineno = 342;
                type_description_1 = "o";
                goto frame_exception_exit_1;
            }
            frame_394db3475a232081bdb1f978c225930f->m_frame.f_lineno = 342;
            {
                PyObject *call_args[] = { tmp_args_element_name_1 };
                tmp_call_result_1 = CALL_FUNCTION_WITH_ARGS1( tmp_called_name_1, call_args );
            }

            Py_DECREF( tmp_called_name_1 );
            Py_DECREF( tmp_args_element_name_1 );
            if ( tmp_call_result_1 == NULL )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 342;
                type_description_1 = "o";
                goto frame_exception_exit_1;
            }
            Py_DECREF( tmp_call_result_1 );
        }
        goto branch_end_1;
        branch_no_1:;
        {
            PyObject *tmp_called_name_3;
            PyObject *tmp_source_name_3;
            PyObject *tmp_call_result_2;
            PyObject *tmp_args_element_name_3;
            PyObject *tmp_called_name_4;
            PyObject *tmp_source_name_4;
            PyObject *tmp_mvar_value_2;
            PyObject *tmp_args_element_name_4;
            PyObject *tmp_called_instance_2;
            CHECK_OBJECT( par_self );
            tmp_source_name_3 = par_self;
            tmp_called_name_3 = LOOKUP_ATTRIBUTE( tmp_source_name_3, const_str_plain_add_object );
            if ( tmp_called_name_3 == NULL )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 345;
                type_description_1 = "o";
                goto frame_exception_exit_1;
            }
            tmp_mvar_value_2 = GET_STRING_DICT_VALUE( moduledict_plistlib, (Nuitka_StringObject *)const_str_plain_Data );

            if (unlikely( tmp_mvar_value_2 == NULL ))
            {
                tmp_mvar_value_2 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_Data );
            }

            if ( tmp_mvar_value_2 == NULL )
            {
                Py_DECREF( tmp_called_name_3 );
                exception_type = PyExc_NameError;
                Py_INCREF( exception_type );
                exception_value = PyUnicode_FromFormat( "name '%s' is not defined", "Data" );
                exception_tb = NULL;
                NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
                CHAIN_EXCEPTION( exception_value );

                exception_lineno = 345;
                type_description_1 = "o";
                goto frame_exception_exit_1;
            }

            tmp_source_name_4 = tmp_mvar_value_2;
            tmp_called_name_4 = LOOKUP_ATTRIBUTE( tmp_source_name_4, const_str_plain_fromBase64 );
            if ( tmp_called_name_4 == NULL )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
                Py_DECREF( tmp_called_name_3 );

                exception_lineno = 345;
                type_description_1 = "o";
                goto frame_exception_exit_1;
            }
            CHECK_OBJECT( par_self );
            tmp_called_instance_2 = par_self;
            frame_394db3475a232081bdb1f978c225930f->m_frame.f_lineno = 345;
            tmp_args_element_name_4 = CALL_METHOD_NO_ARGS( tmp_called_instance_2, const_str_plain_get_data );
            if ( tmp_args_element_name_4 == NULL )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
                Py_DECREF( tmp_called_name_3 );
                Py_DECREF( tmp_called_name_4 );

                exception_lineno = 345;
                type_description_1 = "o";
                goto frame_exception_exit_1;
            }
            frame_394db3475a232081bdb1f978c225930f->m_frame.f_lineno = 345;
            {
                PyObject *call_args[] = { tmp_args_element_name_4 };
                tmp_args_element_name_3 = CALL_FUNCTION_WITH_ARGS1( tmp_called_name_4, call_args );
            }

            Py_DECREF( tmp_called_name_4 );
            Py_DECREF( tmp_args_element_name_4 );
            if ( tmp_args_element_name_3 == NULL )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
                Py_DECREF( tmp_called_name_3 );

                exception_lineno = 345;
                type_description_1 = "o";
                goto frame_exception_exit_1;
            }
            frame_394db3475a232081bdb1f978c225930f->m_frame.f_lineno = 345;
            {
                PyObject *call_args[] = { tmp_args_element_name_3 };
                tmp_call_result_2 = CALL_FUNCTION_WITH_ARGS1( tmp_called_name_3, call_args );
            }

            Py_DECREF( tmp_called_name_3 );
            Py_DECREF( tmp_args_element_name_3 );
            if ( tmp_call_result_2 == NULL )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 345;
                type_description_1 = "o";
                goto frame_exception_exit_1;
            }
            Py_DECREF( tmp_call_result_2 );
        }
        branch_end_1:;
    }

#if 0
    RESTORE_FRAME_EXCEPTION( frame_394db3475a232081bdb1f978c225930f );
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto frame_no_exception_1;

    frame_exception_exit_1:;

#if 0
    RESTORE_FRAME_EXCEPTION( frame_394db3475a232081bdb1f978c225930f );
#endif

    if ( exception_tb == NULL )
    {
        exception_tb = MAKE_TRACEBACK( frame_394db3475a232081bdb1f978c225930f, exception_lineno );
    }
    else if ( exception_tb->tb_frame != &frame_394db3475a232081bdb1f978c225930f->m_frame )
    {
        exception_tb = ADD_TRACEBACK( exception_tb, frame_394db3475a232081bdb1f978c225930f, exception_lineno );
    }

    // Attachs locals to frame if any.
    Nuitka_Frame_AttachLocals(
        (struct Nuitka_FrameObject *)frame_394db3475a232081bdb1f978c225930f,
        type_description_1,
        par_self
    );


    // Release cached frame.
    if ( frame_394db3475a232081bdb1f978c225930f == cache_frame_394db3475a232081bdb1f978c225930f )
    {
        Py_DECREF( frame_394db3475a232081bdb1f978c225930f );
    }
    cache_frame_394db3475a232081bdb1f978c225930f = NULL;

    assertFrameObject( frame_394db3475a232081bdb1f978c225930f );

    // Put the previous frame back on top.
    popFrameStack();

    // Return the error.
    goto try_except_handler_1;

    frame_no_exception_1:;
    tmp_return_value = Py_None;
    Py_INCREF( tmp_return_value );
    goto try_return_handler_1;
    // tried codes exits in all cases
    NUITKA_CANNOT_GET_HERE( plistlib$$$function_33_end_data );
    return NULL;
    // Return handler code:
    try_return_handler_1:;
    CHECK_OBJECT( (PyObject *)par_self );
    Py_DECREF( par_self );
    par_self = NULL;

    goto function_return_exit;
    // Exception handler code:
    try_except_handler_1:;
    exception_keeper_type_1 = exception_type;
    exception_keeper_value_1 = exception_value;
    exception_keeper_tb_1 = exception_tb;
    exception_keeper_lineno_1 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    CHECK_OBJECT( (PyObject *)par_self );
    Py_DECREF( par_self );
    par_self = NULL;

    // Re-raise.
    exception_type = exception_keeper_type_1;
    exception_value = exception_keeper_value_1;
    exception_tb = exception_keeper_tb_1;
    exception_lineno = exception_keeper_lineno_1;

    goto function_exception_exit;
    // End of try:

    // Return statement must have exited already.
    NUITKA_CANNOT_GET_HERE( plistlib$$$function_33_end_data );
    return NULL;

function_exception_exit:
    assert( exception_type );
    RESTORE_ERROR_OCCURRED( exception_type, exception_value, exception_tb );

    return NULL;

function_return_exit:
   // Function cleanup code if any.


   // Actual function exit with return value, making sure we did not make
   // the error status worse despite non-NULL return.
   CHECK_OBJECT( tmp_return_value );
   assert( had_error || !ERROR_OCCURRED() );
   return tmp_return_value;
}


static PyObject *impl_plistlib$$$function_34_end_date( struct Nuitka_FunctionObject const *self, PyObject **python_pars )
{
    // Preserve error status for checks
#ifndef __NUITKA_NO_ASSERT__
    NUITKA_MAY_BE_UNUSED bool had_error = ERROR_OCCURRED();
#endif

    // Local variable declarations.
    PyObject *par_self = python_pars[ 0 ];
    struct Nuitka_FrameObject *frame_3db2e52ef33d4eb073b73ae073e4ef5a;
    NUITKA_MAY_BE_UNUSED char const *type_description_1 = NULL;
    PyObject *exception_type = NULL;
    PyObject *exception_value = NULL;
    PyTracebackObject *exception_tb = NULL;
    NUITKA_MAY_BE_UNUSED int exception_lineno = 0;
    static struct Nuitka_FrameObject *cache_frame_3db2e52ef33d4eb073b73ae073e4ef5a = NULL;
    PyObject *tmp_return_value = NULL;
    PyObject *exception_keeper_type_1;
    PyObject *exception_keeper_value_1;
    PyTracebackObject *exception_keeper_tb_1;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_1;

    // Actual function body.
    // Tried code:
    MAKE_OR_REUSE_FRAME( cache_frame_3db2e52ef33d4eb073b73ae073e4ef5a, codeobj_3db2e52ef33d4eb073b73ae073e4ef5a, module_plistlib, sizeof(void *) );
    frame_3db2e52ef33d4eb073b73ae073e4ef5a = cache_frame_3db2e52ef33d4eb073b73ae073e4ef5a;

    // Push the new frame as the currently active one.
    pushFrameStack( frame_3db2e52ef33d4eb073b73ae073e4ef5a );

    // Mark the frame object as in use, ref count 1 will be up for reuse.
    assert( Py_REFCNT( frame_3db2e52ef33d4eb073b73ae073e4ef5a ) == 2 ); // Frame stack

    // Framed code:
    {
        PyObject *tmp_called_name_1;
        PyObject *tmp_source_name_1;
        PyObject *tmp_call_result_1;
        PyObject *tmp_args_element_name_1;
        PyObject *tmp_called_name_2;
        PyObject *tmp_mvar_value_1;
        PyObject *tmp_args_element_name_2;
        PyObject *tmp_called_instance_1;
        CHECK_OBJECT( par_self );
        tmp_source_name_1 = par_self;
        tmp_called_name_1 = LOOKUP_ATTRIBUTE( tmp_source_name_1, const_str_plain_add_object );
        if ( tmp_called_name_1 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 348;
            type_description_1 = "o";
            goto frame_exception_exit_1;
        }
        tmp_mvar_value_1 = GET_STRING_DICT_VALUE( moduledict_plistlib, (Nuitka_StringObject *)const_str_plain__date_from_string );

        if (unlikely( tmp_mvar_value_1 == NULL ))
        {
            tmp_mvar_value_1 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain__date_from_string );
        }

        if ( tmp_mvar_value_1 == NULL )
        {
            Py_DECREF( tmp_called_name_1 );
            exception_type = PyExc_NameError;
            Py_INCREF( exception_type );
            exception_value = PyUnicode_FromFormat( "name '%s' is not defined", "_date_from_string" );
            exception_tb = NULL;
            NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
            CHAIN_EXCEPTION( exception_value );

            exception_lineno = 348;
            type_description_1 = "o";
            goto frame_exception_exit_1;
        }

        tmp_called_name_2 = tmp_mvar_value_1;
        CHECK_OBJECT( par_self );
        tmp_called_instance_1 = par_self;
        frame_3db2e52ef33d4eb073b73ae073e4ef5a->m_frame.f_lineno = 348;
        tmp_args_element_name_2 = CALL_METHOD_NO_ARGS( tmp_called_instance_1, const_str_plain_get_data );
        if ( tmp_args_element_name_2 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
            Py_DECREF( tmp_called_name_1 );

            exception_lineno = 348;
            type_description_1 = "o";
            goto frame_exception_exit_1;
        }
        frame_3db2e52ef33d4eb073b73ae073e4ef5a->m_frame.f_lineno = 348;
        {
            PyObject *call_args[] = { tmp_args_element_name_2 };
            tmp_args_element_name_1 = CALL_FUNCTION_WITH_ARGS1( tmp_called_name_2, call_args );
        }

        Py_DECREF( tmp_args_element_name_2 );
        if ( tmp_args_element_name_1 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
            Py_DECREF( tmp_called_name_1 );

            exception_lineno = 348;
            type_description_1 = "o";
            goto frame_exception_exit_1;
        }
        frame_3db2e52ef33d4eb073b73ae073e4ef5a->m_frame.f_lineno = 348;
        {
            PyObject *call_args[] = { tmp_args_element_name_1 };
            tmp_call_result_1 = CALL_FUNCTION_WITH_ARGS1( tmp_called_name_1, call_args );
        }

        Py_DECREF( tmp_called_name_1 );
        Py_DECREF( tmp_args_element_name_1 );
        if ( tmp_call_result_1 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 348;
            type_description_1 = "o";
            goto frame_exception_exit_1;
        }
        Py_DECREF( tmp_call_result_1 );
    }

#if 0
    RESTORE_FRAME_EXCEPTION( frame_3db2e52ef33d4eb073b73ae073e4ef5a );
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto frame_no_exception_1;

    frame_exception_exit_1:;

#if 0
    RESTORE_FRAME_EXCEPTION( frame_3db2e52ef33d4eb073b73ae073e4ef5a );
#endif

    if ( exception_tb == NULL )
    {
        exception_tb = MAKE_TRACEBACK( frame_3db2e52ef33d4eb073b73ae073e4ef5a, exception_lineno );
    }
    else if ( exception_tb->tb_frame != &frame_3db2e52ef33d4eb073b73ae073e4ef5a->m_frame )
    {
        exception_tb = ADD_TRACEBACK( exception_tb, frame_3db2e52ef33d4eb073b73ae073e4ef5a, exception_lineno );
    }

    // Attachs locals to frame if any.
    Nuitka_Frame_AttachLocals(
        (struct Nuitka_FrameObject *)frame_3db2e52ef33d4eb073b73ae073e4ef5a,
        type_description_1,
        par_self
    );


    // Release cached frame.
    if ( frame_3db2e52ef33d4eb073b73ae073e4ef5a == cache_frame_3db2e52ef33d4eb073b73ae073e4ef5a )
    {
        Py_DECREF( frame_3db2e52ef33d4eb073b73ae073e4ef5a );
    }
    cache_frame_3db2e52ef33d4eb073b73ae073e4ef5a = NULL;

    assertFrameObject( frame_3db2e52ef33d4eb073b73ae073e4ef5a );

    // Put the previous frame back on top.
    popFrameStack();

    // Return the error.
    goto try_except_handler_1;

    frame_no_exception_1:;
    tmp_return_value = Py_None;
    Py_INCREF( tmp_return_value );
    goto try_return_handler_1;
    // tried codes exits in all cases
    NUITKA_CANNOT_GET_HERE( plistlib$$$function_34_end_date );
    return NULL;
    // Return handler code:
    try_return_handler_1:;
    CHECK_OBJECT( (PyObject *)par_self );
    Py_DECREF( par_self );
    par_self = NULL;

    goto function_return_exit;
    // Exception handler code:
    try_except_handler_1:;
    exception_keeper_type_1 = exception_type;
    exception_keeper_value_1 = exception_value;
    exception_keeper_tb_1 = exception_tb;
    exception_keeper_lineno_1 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    CHECK_OBJECT( (PyObject *)par_self );
    Py_DECREF( par_self );
    par_self = NULL;

    // Re-raise.
    exception_type = exception_keeper_type_1;
    exception_value = exception_keeper_value_1;
    exception_tb = exception_keeper_tb_1;
    exception_lineno = exception_keeper_lineno_1;

    goto function_exception_exit;
    // End of try:

    // Return statement must have exited already.
    NUITKA_CANNOT_GET_HERE( plistlib$$$function_34_end_date );
    return NULL;

function_exception_exit:
    assert( exception_type );
    RESTORE_ERROR_OCCURRED( exception_type, exception_value, exception_tb );

    return NULL;

function_return_exit:
   // Function cleanup code if any.


   // Actual function exit with return value, making sure we did not make
   // the error status worse despite non-NULL return.
   CHECK_OBJECT( tmp_return_value );
   assert( had_error || !ERROR_OCCURRED() );
   return tmp_return_value;
}


static PyObject *impl_plistlib$$$function_35___init__( struct Nuitka_FunctionObject const *self, PyObject **python_pars )
{
    // Preserve error status for checks
#ifndef __NUITKA_NO_ASSERT__
    NUITKA_MAY_BE_UNUSED bool had_error = ERROR_OCCURRED();
#endif

    // Local variable declarations.
    PyObject *par_self = python_pars[ 0 ];
    PyObject *par_file = python_pars[ 1 ];
    PyObject *par_indent_level = python_pars[ 2 ];
    PyObject *par_indent = python_pars[ 3 ];
    struct Nuitka_FrameObject *frame_4f9251679fe309191bf67eed2d91a7fe;
    NUITKA_MAY_BE_UNUSED char const *type_description_1 = NULL;
    bool tmp_result;
    PyObject *exception_type = NULL;
    PyObject *exception_value = NULL;
    PyTracebackObject *exception_tb = NULL;
    NUITKA_MAY_BE_UNUSED int exception_lineno = 0;
    static struct Nuitka_FrameObject *cache_frame_4f9251679fe309191bf67eed2d91a7fe = NULL;
    PyObject *tmp_return_value = NULL;
    PyObject *exception_keeper_type_1;
    PyObject *exception_keeper_value_1;
    PyTracebackObject *exception_keeper_tb_1;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_1;

    // Actual function body.
    // Tried code:
    MAKE_OR_REUSE_FRAME( cache_frame_4f9251679fe309191bf67eed2d91a7fe, codeobj_4f9251679fe309191bf67eed2d91a7fe, module_plistlib, sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *) );
    frame_4f9251679fe309191bf67eed2d91a7fe = cache_frame_4f9251679fe309191bf67eed2d91a7fe;

    // Push the new frame as the currently active one.
    pushFrameStack( frame_4f9251679fe309191bf67eed2d91a7fe );

    // Mark the frame object as in use, ref count 1 will be up for reuse.
    assert( Py_REFCNT( frame_4f9251679fe309191bf67eed2d91a7fe ) == 2 ); // Frame stack

    // Framed code:
    {
        PyObject *tmp_assattr_name_1;
        PyObject *tmp_assattr_target_1;
        CHECK_OBJECT( par_file );
        tmp_assattr_name_1 = par_file;
        CHECK_OBJECT( par_self );
        tmp_assattr_target_1 = par_self;
        tmp_result = SET_ATTRIBUTE( tmp_assattr_target_1, const_str_plain_file, tmp_assattr_name_1 );
        if ( tmp_result == false )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 353;
            type_description_1 = "oooo";
            goto frame_exception_exit_1;
        }
    }
    {
        PyObject *tmp_assattr_name_2;
        PyObject *tmp_assattr_target_2;
        tmp_assattr_name_2 = PyList_New( 0 );
        CHECK_OBJECT( par_self );
        tmp_assattr_target_2 = par_self;
        tmp_result = SET_ATTRIBUTE( tmp_assattr_target_2, const_str_plain_stack, tmp_assattr_name_2 );
        Py_DECREF( tmp_assattr_name_2 );
        if ( tmp_result == false )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 354;
            type_description_1 = "oooo";
            goto frame_exception_exit_1;
        }
    }
    {
        PyObject *tmp_assattr_name_3;
        PyObject *tmp_assattr_target_3;
        CHECK_OBJECT( par_indent_level );
        tmp_assattr_name_3 = par_indent_level;
        CHECK_OBJECT( par_self );
        tmp_assattr_target_3 = par_self;
        tmp_result = SET_ATTRIBUTE( tmp_assattr_target_3, const_str_plain__indent_level, tmp_assattr_name_3 );
        if ( tmp_result == false )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 355;
            type_description_1 = "oooo";
            goto frame_exception_exit_1;
        }
    }
    {
        PyObject *tmp_assattr_name_4;
        PyObject *tmp_assattr_target_4;
        CHECK_OBJECT( par_indent );
        tmp_assattr_name_4 = par_indent;
        CHECK_OBJECT( par_self );
        tmp_assattr_target_4 = par_self;
        tmp_result = SET_ATTRIBUTE( tmp_assattr_target_4, const_str_plain_indent, tmp_assattr_name_4 );
        if ( tmp_result == false )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 356;
            type_description_1 = "oooo";
            goto frame_exception_exit_1;
        }
    }

#if 0
    RESTORE_FRAME_EXCEPTION( frame_4f9251679fe309191bf67eed2d91a7fe );
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto frame_no_exception_1;

    frame_exception_exit_1:;

#if 0
    RESTORE_FRAME_EXCEPTION( frame_4f9251679fe309191bf67eed2d91a7fe );
#endif

    if ( exception_tb == NULL )
    {
        exception_tb = MAKE_TRACEBACK( frame_4f9251679fe309191bf67eed2d91a7fe, exception_lineno );
    }
    else if ( exception_tb->tb_frame != &frame_4f9251679fe309191bf67eed2d91a7fe->m_frame )
    {
        exception_tb = ADD_TRACEBACK( exception_tb, frame_4f9251679fe309191bf67eed2d91a7fe, exception_lineno );
    }

    // Attachs locals to frame if any.
    Nuitka_Frame_AttachLocals(
        (struct Nuitka_FrameObject *)frame_4f9251679fe309191bf67eed2d91a7fe,
        type_description_1,
        par_self,
        par_file,
        par_indent_level,
        par_indent
    );


    // Release cached frame.
    if ( frame_4f9251679fe309191bf67eed2d91a7fe == cache_frame_4f9251679fe309191bf67eed2d91a7fe )
    {
        Py_DECREF( frame_4f9251679fe309191bf67eed2d91a7fe );
    }
    cache_frame_4f9251679fe309191bf67eed2d91a7fe = NULL;

    assertFrameObject( frame_4f9251679fe309191bf67eed2d91a7fe );

    // Put the previous frame back on top.
    popFrameStack();

    // Return the error.
    goto try_except_handler_1;

    frame_no_exception_1:;
    tmp_return_value = Py_None;
    Py_INCREF( tmp_return_value );
    goto try_return_handler_1;
    // tried codes exits in all cases
    NUITKA_CANNOT_GET_HERE( plistlib$$$function_35___init__ );
    return NULL;
    // Return handler code:
    try_return_handler_1:;
    CHECK_OBJECT( (PyObject *)par_self );
    Py_DECREF( par_self );
    par_self = NULL;

    CHECK_OBJECT( (PyObject *)par_file );
    Py_DECREF( par_file );
    par_file = NULL;

    CHECK_OBJECT( (PyObject *)par_indent_level );
    Py_DECREF( par_indent_level );
    par_indent_level = NULL;

    CHECK_OBJECT( (PyObject *)par_indent );
    Py_DECREF( par_indent );
    par_indent = NULL;

    goto function_return_exit;
    // Exception handler code:
    try_except_handler_1:;
    exception_keeper_type_1 = exception_type;
    exception_keeper_value_1 = exception_value;
    exception_keeper_tb_1 = exception_tb;
    exception_keeper_lineno_1 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    CHECK_OBJECT( (PyObject *)par_self );
    Py_DECREF( par_self );
    par_self = NULL;

    CHECK_OBJECT( (PyObject *)par_file );
    Py_DECREF( par_file );
    par_file = NULL;

    CHECK_OBJECT( (PyObject *)par_indent_level );
    Py_DECREF( par_indent_level );
    par_indent_level = NULL;

    CHECK_OBJECT( (PyObject *)par_indent );
    Py_DECREF( par_indent );
    par_indent = NULL;

    // Re-raise.
    exception_type = exception_keeper_type_1;
    exception_value = exception_keeper_value_1;
    exception_tb = exception_keeper_tb_1;
    exception_lineno = exception_keeper_lineno_1;

    goto function_exception_exit;
    // End of try:

    // Return statement must have exited already.
    NUITKA_CANNOT_GET_HERE( plistlib$$$function_35___init__ );
    return NULL;

function_exception_exit:
    assert( exception_type );
    RESTORE_ERROR_OCCURRED( exception_type, exception_value, exception_tb );

    return NULL;

function_return_exit:
   // Function cleanup code if any.


   // Actual function exit with return value, making sure we did not make
   // the error status worse despite non-NULL return.
   CHECK_OBJECT( tmp_return_value );
   assert( had_error || !ERROR_OCCURRED() );
   return tmp_return_value;
}


static PyObject *impl_plistlib$$$function_36_begin_element( struct Nuitka_FunctionObject const *self, PyObject **python_pars )
{
    // Preserve error status for checks
#ifndef __NUITKA_NO_ASSERT__
    NUITKA_MAY_BE_UNUSED bool had_error = ERROR_OCCURRED();
#endif

    // Local variable declarations.
    PyObject *par_self = python_pars[ 0 ];
    PyObject *par_element = python_pars[ 1 ];
    PyObject *tmp_inplace_assign_attr_1__end = NULL;
    PyObject *tmp_inplace_assign_attr_1__start = NULL;
    struct Nuitka_FrameObject *frame_ec7700a560b5db815e48a8c01e9e1467;
    NUITKA_MAY_BE_UNUSED char const *type_description_1 = NULL;
    PyObject *exception_type = NULL;
    PyObject *exception_value = NULL;
    PyTracebackObject *exception_tb = NULL;
    NUITKA_MAY_BE_UNUSED int exception_lineno = 0;
    bool tmp_result;
    PyObject *exception_keeper_type_1;
    PyObject *exception_keeper_value_1;
    PyTracebackObject *exception_keeper_tb_1;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_1;
    PyObject *exception_keeper_type_2;
    PyObject *exception_keeper_value_2;
    PyTracebackObject *exception_keeper_tb_2;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_2;
    static struct Nuitka_FrameObject *cache_frame_ec7700a560b5db815e48a8c01e9e1467 = NULL;
    PyObject *tmp_return_value = NULL;
    PyObject *exception_keeper_type_3;
    PyObject *exception_keeper_value_3;
    PyTracebackObject *exception_keeper_tb_3;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_3;

    // Actual function body.
    // Tried code:
    MAKE_OR_REUSE_FRAME( cache_frame_ec7700a560b5db815e48a8c01e9e1467, codeobj_ec7700a560b5db815e48a8c01e9e1467, module_plistlib, sizeof(void *)+sizeof(void *) );
    frame_ec7700a560b5db815e48a8c01e9e1467 = cache_frame_ec7700a560b5db815e48a8c01e9e1467;

    // Push the new frame as the currently active one.
    pushFrameStack( frame_ec7700a560b5db815e48a8c01e9e1467 );

    // Mark the frame object as in use, ref count 1 will be up for reuse.
    assert( Py_REFCNT( frame_ec7700a560b5db815e48a8c01e9e1467 ) == 2 ); // Frame stack

    // Framed code:
    {
        PyObject *tmp_called_instance_1;
        PyObject *tmp_source_name_1;
        PyObject *tmp_call_result_1;
        PyObject *tmp_args_element_name_1;
        CHECK_OBJECT( par_self );
        tmp_source_name_1 = par_self;
        tmp_called_instance_1 = LOOKUP_ATTRIBUTE( tmp_source_name_1, const_str_plain_stack );
        if ( tmp_called_instance_1 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 359;
            type_description_1 = "oo";
            goto frame_exception_exit_1;
        }
        CHECK_OBJECT( par_element );
        tmp_args_element_name_1 = par_element;
        frame_ec7700a560b5db815e48a8c01e9e1467->m_frame.f_lineno = 359;
        {
            PyObject *call_args[] = { tmp_args_element_name_1 };
            tmp_call_result_1 = CALL_METHOD_WITH_ARGS1( tmp_called_instance_1, const_str_plain_append, call_args );
        }

        Py_DECREF( tmp_called_instance_1 );
        if ( tmp_call_result_1 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 359;
            type_description_1 = "oo";
            goto frame_exception_exit_1;
        }
        Py_DECREF( tmp_call_result_1 );
    }
    {
        PyObject *tmp_called_name_1;
        PyObject *tmp_source_name_2;
        PyObject *tmp_call_result_2;
        PyObject *tmp_args_element_name_2;
        PyObject *tmp_left_name_1;
        PyObject *tmp_right_name_1;
        CHECK_OBJECT( par_self );
        tmp_source_name_2 = par_self;
        tmp_called_name_1 = LOOKUP_ATTRIBUTE( tmp_source_name_2, const_str_plain_writeln );
        if ( tmp_called_name_1 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 360;
            type_description_1 = "oo";
            goto frame_exception_exit_1;
        }
        tmp_left_name_1 = const_str_digest_c0c3759da123e387798315e75d2fed70;
        CHECK_OBJECT( par_element );
        tmp_right_name_1 = par_element;
        tmp_args_element_name_2 = BINARY_OPERATION_REMAINDER( tmp_left_name_1, tmp_right_name_1 );
        if ( tmp_args_element_name_2 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
            Py_DECREF( tmp_called_name_1 );

            exception_lineno = 360;
            type_description_1 = "oo";
            goto frame_exception_exit_1;
        }
        frame_ec7700a560b5db815e48a8c01e9e1467->m_frame.f_lineno = 360;
        {
            PyObject *call_args[] = { tmp_args_element_name_2 };
            tmp_call_result_2 = CALL_FUNCTION_WITH_ARGS1( tmp_called_name_1, call_args );
        }

        Py_DECREF( tmp_called_name_1 );
        Py_DECREF( tmp_args_element_name_2 );
        if ( tmp_call_result_2 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 360;
            type_description_1 = "oo";
            goto frame_exception_exit_1;
        }
        Py_DECREF( tmp_call_result_2 );
    }
    {
        PyObject *tmp_assign_source_1;
        PyObject *tmp_source_name_3;
        CHECK_OBJECT( par_self );
        tmp_source_name_3 = par_self;
        tmp_assign_source_1 = LOOKUP_ATTRIBUTE( tmp_source_name_3, const_str_plain__indent_level );
        if ( tmp_assign_source_1 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 361;
            type_description_1 = "oo";
            goto frame_exception_exit_1;
        }
        assert( tmp_inplace_assign_attr_1__start == NULL );
        tmp_inplace_assign_attr_1__start = tmp_assign_source_1;
    }
    // Tried code:
    {
        PyObject *tmp_assign_source_2;
        PyObject *tmp_left_name_2;
        PyObject *tmp_right_name_2;
        CHECK_OBJECT( tmp_inplace_assign_attr_1__start );
        tmp_left_name_2 = tmp_inplace_assign_attr_1__start;
        tmp_right_name_2 = const_int_pos_1;
        tmp_assign_source_2 = BINARY_OPERATION( PyNumber_InPlaceAdd, tmp_left_name_2, tmp_right_name_2 );
        if ( tmp_assign_source_2 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 361;
            type_description_1 = "oo";
            goto try_except_handler_2;
        }
        assert( tmp_inplace_assign_attr_1__end == NULL );
        tmp_inplace_assign_attr_1__end = tmp_assign_source_2;
    }
    // Tried code:
    {
        PyObject *tmp_assattr_name_1;
        PyObject *tmp_assattr_target_1;
        CHECK_OBJECT( tmp_inplace_assign_attr_1__end );
        tmp_assattr_name_1 = tmp_inplace_assign_attr_1__end;
        CHECK_OBJECT( par_self );
        tmp_assattr_target_1 = par_self;
        tmp_result = SET_ATTRIBUTE( tmp_assattr_target_1, const_str_plain__indent_level, tmp_assattr_name_1 );
        if ( tmp_result == false )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 361;
            type_description_1 = "oo";
            goto try_except_handler_3;
        }
    }
    goto try_end_1;
    // Exception handler code:
    try_except_handler_3:;
    exception_keeper_type_1 = exception_type;
    exception_keeper_value_1 = exception_value;
    exception_keeper_tb_1 = exception_tb;
    exception_keeper_lineno_1 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    CHECK_OBJECT( (PyObject *)tmp_inplace_assign_attr_1__end );
    Py_DECREF( tmp_inplace_assign_attr_1__end );
    tmp_inplace_assign_attr_1__end = NULL;

    // Re-raise.
    exception_type = exception_keeper_type_1;
    exception_value = exception_keeper_value_1;
    exception_tb = exception_keeper_tb_1;
    exception_lineno = exception_keeper_lineno_1;

    goto try_except_handler_2;
    // End of try:
    try_end_1:;
    goto try_end_2;
    // Exception handler code:
    try_except_handler_2:;
    exception_keeper_type_2 = exception_type;
    exception_keeper_value_2 = exception_value;
    exception_keeper_tb_2 = exception_tb;
    exception_keeper_lineno_2 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    CHECK_OBJECT( (PyObject *)tmp_inplace_assign_attr_1__start );
    Py_DECREF( tmp_inplace_assign_attr_1__start );
    tmp_inplace_assign_attr_1__start = NULL;

    // Re-raise.
    exception_type = exception_keeper_type_2;
    exception_value = exception_keeper_value_2;
    exception_tb = exception_keeper_tb_2;
    exception_lineno = exception_keeper_lineno_2;

    goto frame_exception_exit_1;
    // End of try:
    try_end_2:;

#if 0
    RESTORE_FRAME_EXCEPTION( frame_ec7700a560b5db815e48a8c01e9e1467 );
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto frame_no_exception_1;

    frame_exception_exit_1:;

#if 0
    RESTORE_FRAME_EXCEPTION( frame_ec7700a560b5db815e48a8c01e9e1467 );
#endif

    if ( exception_tb == NULL )
    {
        exception_tb = MAKE_TRACEBACK( frame_ec7700a560b5db815e48a8c01e9e1467, exception_lineno );
    }
    else if ( exception_tb->tb_frame != &frame_ec7700a560b5db815e48a8c01e9e1467->m_frame )
    {
        exception_tb = ADD_TRACEBACK( exception_tb, frame_ec7700a560b5db815e48a8c01e9e1467, exception_lineno );
    }

    // Attachs locals to frame if any.
    Nuitka_Frame_AttachLocals(
        (struct Nuitka_FrameObject *)frame_ec7700a560b5db815e48a8c01e9e1467,
        type_description_1,
        par_self,
        par_element
    );


    // Release cached frame.
    if ( frame_ec7700a560b5db815e48a8c01e9e1467 == cache_frame_ec7700a560b5db815e48a8c01e9e1467 )
    {
        Py_DECREF( frame_ec7700a560b5db815e48a8c01e9e1467 );
    }
    cache_frame_ec7700a560b5db815e48a8c01e9e1467 = NULL;

    assertFrameObject( frame_ec7700a560b5db815e48a8c01e9e1467 );

    // Put the previous frame back on top.
    popFrameStack();

    // Return the error.
    goto try_except_handler_1;

    frame_no_exception_1:;
    CHECK_OBJECT( (PyObject *)tmp_inplace_assign_attr_1__end );
    Py_DECREF( tmp_inplace_assign_attr_1__end );
    tmp_inplace_assign_attr_1__end = NULL;

    CHECK_OBJECT( (PyObject *)tmp_inplace_assign_attr_1__start );
    Py_DECREF( tmp_inplace_assign_attr_1__start );
    tmp_inplace_assign_attr_1__start = NULL;

    tmp_return_value = Py_None;
    Py_INCREF( tmp_return_value );
    goto try_return_handler_1;
    // tried codes exits in all cases
    NUITKA_CANNOT_GET_HERE( plistlib$$$function_36_begin_element );
    return NULL;
    // Return handler code:
    try_return_handler_1:;
    CHECK_OBJECT( (PyObject *)par_self );
    Py_DECREF( par_self );
    par_self = NULL;

    CHECK_OBJECT( (PyObject *)par_element );
    Py_DECREF( par_element );
    par_element = NULL;

    goto function_return_exit;
    // Exception handler code:
    try_except_handler_1:;
    exception_keeper_type_3 = exception_type;
    exception_keeper_value_3 = exception_value;
    exception_keeper_tb_3 = exception_tb;
    exception_keeper_lineno_3 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    CHECK_OBJECT( (PyObject *)par_self );
    Py_DECREF( par_self );
    par_self = NULL;

    CHECK_OBJECT( (PyObject *)par_element );
    Py_DECREF( par_element );
    par_element = NULL;

    // Re-raise.
    exception_type = exception_keeper_type_3;
    exception_value = exception_keeper_value_3;
    exception_tb = exception_keeper_tb_3;
    exception_lineno = exception_keeper_lineno_3;

    goto function_exception_exit;
    // End of try:

    // Return statement must have exited already.
    NUITKA_CANNOT_GET_HERE( plistlib$$$function_36_begin_element );
    return NULL;

function_exception_exit:
    assert( exception_type );
    RESTORE_ERROR_OCCURRED( exception_type, exception_value, exception_tb );

    return NULL;

function_return_exit:
   // Function cleanup code if any.


   // Actual function exit with return value, making sure we did not make
   // the error status worse despite non-NULL return.
   CHECK_OBJECT( tmp_return_value );
   assert( had_error || !ERROR_OCCURRED() );
   return tmp_return_value;
}


static PyObject *impl_plistlib$$$function_37_end_element( struct Nuitka_FunctionObject const *self, PyObject **python_pars )
{
    // Preserve error status for checks
#ifndef __NUITKA_NO_ASSERT__
    NUITKA_MAY_BE_UNUSED bool had_error = ERROR_OCCURRED();
#endif

    // Local variable declarations.
    PyObject *par_self = python_pars[ 0 ];
    PyObject *par_element = python_pars[ 1 ];
    PyObject *tmp_inplace_assign_attr_1__end = NULL;
    PyObject *tmp_inplace_assign_attr_1__start = NULL;
    struct Nuitka_FrameObject *frame_4a99c9a153c5488c06b277919fc55b52;
    NUITKA_MAY_BE_UNUSED char const *type_description_1 = NULL;
    PyObject *exception_type = NULL;
    PyObject *exception_value = NULL;
    PyTracebackObject *exception_tb = NULL;
    NUITKA_MAY_BE_UNUSED int exception_lineno = 0;
    int tmp_res;
    bool tmp_result;
    PyObject *exception_keeper_type_1;
    PyObject *exception_keeper_value_1;
    PyTracebackObject *exception_keeper_tb_1;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_1;
    PyObject *exception_keeper_type_2;
    PyObject *exception_keeper_value_2;
    PyTracebackObject *exception_keeper_tb_2;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_2;
    static struct Nuitka_FrameObject *cache_frame_4a99c9a153c5488c06b277919fc55b52 = NULL;
    PyObject *tmp_return_value = NULL;
    PyObject *exception_keeper_type_3;
    PyObject *exception_keeper_value_3;
    PyTracebackObject *exception_keeper_tb_3;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_3;

    // Actual function body.
    // Tried code:
    MAKE_OR_REUSE_FRAME( cache_frame_4a99c9a153c5488c06b277919fc55b52, codeobj_4a99c9a153c5488c06b277919fc55b52, module_plistlib, sizeof(void *)+sizeof(void *) );
    frame_4a99c9a153c5488c06b277919fc55b52 = cache_frame_4a99c9a153c5488c06b277919fc55b52;

    // Push the new frame as the currently active one.
    pushFrameStack( frame_4a99c9a153c5488c06b277919fc55b52 );

    // Mark the frame object as in use, ref count 1 will be up for reuse.
    assert( Py_REFCNT( frame_4a99c9a153c5488c06b277919fc55b52 ) == 2 ); // Frame stack

    // Framed code:
    {
        nuitka_bool tmp_condition_result_1;
        PyObject *tmp_operand_name_1;
        PyObject *tmp_compexpr_left_1;
        PyObject *tmp_compexpr_right_1;
        PyObject *tmp_source_name_1;
        CHECK_OBJECT( par_self );
        tmp_source_name_1 = par_self;
        tmp_compexpr_left_1 = LOOKUP_ATTRIBUTE( tmp_source_name_1, const_str_plain__indent_level );
        if ( tmp_compexpr_left_1 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 364;
            type_description_1 = "oo";
            goto frame_exception_exit_1;
        }
        tmp_compexpr_right_1 = const_int_0;
        tmp_operand_name_1 = RICH_COMPARE_GT_OBJECT_OBJECT( tmp_compexpr_left_1, tmp_compexpr_right_1 );
        Py_DECREF( tmp_compexpr_left_1 );
        if ( tmp_operand_name_1 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 364;
            type_description_1 = "oo";
            goto frame_exception_exit_1;
        }
        tmp_res = CHECK_IF_TRUE( tmp_operand_name_1 );
        Py_DECREF( tmp_operand_name_1 );
        if ( tmp_res == -1 )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 364;
            type_description_1 = "oo";
            goto frame_exception_exit_1;
        }
        tmp_condition_result_1 = ( tmp_res == 0 ) ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
        if ( tmp_condition_result_1 == NUITKA_BOOL_TRUE )
        {
            goto branch_yes_1;
        }
        else
        {
            goto branch_no_1;
        }
        branch_yes_1:;
        {
            PyObject *tmp_raise_type_1;
            tmp_raise_type_1 = PyExc_AssertionError;
            exception_type = tmp_raise_type_1;
            Py_INCREF( tmp_raise_type_1 );
            exception_lineno = 364;
            RAISE_EXCEPTION_WITH_TYPE( &exception_type, &exception_value, &exception_tb );
            type_description_1 = "oo";
            goto frame_exception_exit_1;
        }
        branch_no_1:;
    }
    {
        nuitka_bool tmp_condition_result_2;
        PyObject *tmp_operand_name_2;
        PyObject *tmp_compexpr_left_2;
        PyObject *tmp_compexpr_right_2;
        PyObject *tmp_called_instance_1;
        PyObject *tmp_source_name_2;
        CHECK_OBJECT( par_self );
        tmp_source_name_2 = par_self;
        tmp_called_instance_1 = LOOKUP_ATTRIBUTE( tmp_source_name_2, const_str_plain_stack );
        if ( tmp_called_instance_1 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 365;
            type_description_1 = "oo";
            goto frame_exception_exit_1;
        }
        frame_4a99c9a153c5488c06b277919fc55b52->m_frame.f_lineno = 365;
        tmp_compexpr_left_2 = CALL_METHOD_NO_ARGS( tmp_called_instance_1, const_str_plain_pop );
        Py_DECREF( tmp_called_instance_1 );
        if ( tmp_compexpr_left_2 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 365;
            type_description_1 = "oo";
            goto frame_exception_exit_1;
        }
        CHECK_OBJECT( par_element );
        tmp_compexpr_right_2 = par_element;
        tmp_operand_name_2 = RICH_COMPARE_EQ_OBJECT_OBJECT( tmp_compexpr_left_2, tmp_compexpr_right_2 );
        Py_DECREF( tmp_compexpr_left_2 );
        if ( tmp_operand_name_2 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 365;
            type_description_1 = "oo";
            goto frame_exception_exit_1;
        }
        tmp_res = CHECK_IF_TRUE( tmp_operand_name_2 );
        Py_DECREF( tmp_operand_name_2 );
        if ( tmp_res == -1 )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 365;
            type_description_1 = "oo";
            goto frame_exception_exit_1;
        }
        tmp_condition_result_2 = ( tmp_res == 0 ) ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
        if ( tmp_condition_result_2 == NUITKA_BOOL_TRUE )
        {
            goto branch_yes_2;
        }
        else
        {
            goto branch_no_2;
        }
        branch_yes_2:;
        {
            PyObject *tmp_raise_type_2;
            tmp_raise_type_2 = PyExc_AssertionError;
            exception_type = tmp_raise_type_2;
            Py_INCREF( tmp_raise_type_2 );
            exception_lineno = 365;
            RAISE_EXCEPTION_WITH_TYPE( &exception_type, &exception_value, &exception_tb );
            type_description_1 = "oo";
            goto frame_exception_exit_1;
        }
        branch_no_2:;
    }
    {
        PyObject *tmp_assign_source_1;
        PyObject *tmp_source_name_3;
        CHECK_OBJECT( par_self );
        tmp_source_name_3 = par_self;
        tmp_assign_source_1 = LOOKUP_ATTRIBUTE( tmp_source_name_3, const_str_plain__indent_level );
        if ( tmp_assign_source_1 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 366;
            type_description_1 = "oo";
            goto frame_exception_exit_1;
        }
        assert( tmp_inplace_assign_attr_1__start == NULL );
        tmp_inplace_assign_attr_1__start = tmp_assign_source_1;
    }
    // Tried code:
    {
        PyObject *tmp_assign_source_2;
        PyObject *tmp_left_name_1;
        PyObject *tmp_right_name_1;
        CHECK_OBJECT( tmp_inplace_assign_attr_1__start );
        tmp_left_name_1 = tmp_inplace_assign_attr_1__start;
        tmp_right_name_1 = const_int_pos_1;
        tmp_assign_source_2 = BINARY_OPERATION( PyNumber_InPlaceSubtract, tmp_left_name_1, tmp_right_name_1 );
        if ( tmp_assign_source_2 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 366;
            type_description_1 = "oo";
            goto try_except_handler_2;
        }
        assert( tmp_inplace_assign_attr_1__end == NULL );
        tmp_inplace_assign_attr_1__end = tmp_assign_source_2;
    }
    // Tried code:
    {
        PyObject *tmp_assattr_name_1;
        PyObject *tmp_assattr_target_1;
        CHECK_OBJECT( tmp_inplace_assign_attr_1__end );
        tmp_assattr_name_1 = tmp_inplace_assign_attr_1__end;
        CHECK_OBJECT( par_self );
        tmp_assattr_target_1 = par_self;
        tmp_result = SET_ATTRIBUTE( tmp_assattr_target_1, const_str_plain__indent_level, tmp_assattr_name_1 );
        if ( tmp_result == false )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 366;
            type_description_1 = "oo";
            goto try_except_handler_3;
        }
    }
    goto try_end_1;
    // Exception handler code:
    try_except_handler_3:;
    exception_keeper_type_1 = exception_type;
    exception_keeper_value_1 = exception_value;
    exception_keeper_tb_1 = exception_tb;
    exception_keeper_lineno_1 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    CHECK_OBJECT( (PyObject *)tmp_inplace_assign_attr_1__end );
    Py_DECREF( tmp_inplace_assign_attr_1__end );
    tmp_inplace_assign_attr_1__end = NULL;

    // Re-raise.
    exception_type = exception_keeper_type_1;
    exception_value = exception_keeper_value_1;
    exception_tb = exception_keeper_tb_1;
    exception_lineno = exception_keeper_lineno_1;

    goto try_except_handler_2;
    // End of try:
    try_end_1:;
    goto try_end_2;
    // Exception handler code:
    try_except_handler_2:;
    exception_keeper_type_2 = exception_type;
    exception_keeper_value_2 = exception_value;
    exception_keeper_tb_2 = exception_tb;
    exception_keeper_lineno_2 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    CHECK_OBJECT( (PyObject *)tmp_inplace_assign_attr_1__start );
    Py_DECREF( tmp_inplace_assign_attr_1__start );
    tmp_inplace_assign_attr_1__start = NULL;

    // Re-raise.
    exception_type = exception_keeper_type_2;
    exception_value = exception_keeper_value_2;
    exception_tb = exception_keeper_tb_2;
    exception_lineno = exception_keeper_lineno_2;

    goto frame_exception_exit_1;
    // End of try:
    try_end_2:;
    CHECK_OBJECT( (PyObject *)tmp_inplace_assign_attr_1__end );
    Py_DECREF( tmp_inplace_assign_attr_1__end );
    tmp_inplace_assign_attr_1__end = NULL;

    CHECK_OBJECT( (PyObject *)tmp_inplace_assign_attr_1__start );
    Py_DECREF( tmp_inplace_assign_attr_1__start );
    tmp_inplace_assign_attr_1__start = NULL;

    {
        PyObject *tmp_called_name_1;
        PyObject *tmp_source_name_4;
        PyObject *tmp_call_result_1;
        PyObject *tmp_args_element_name_1;
        PyObject *tmp_left_name_2;
        PyObject *tmp_right_name_2;
        CHECK_OBJECT( par_self );
        tmp_source_name_4 = par_self;
        tmp_called_name_1 = LOOKUP_ATTRIBUTE( tmp_source_name_4, const_str_plain_writeln );
        if ( tmp_called_name_1 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 367;
            type_description_1 = "oo";
            goto frame_exception_exit_1;
        }
        tmp_left_name_2 = const_str_digest_effaccf01132aa7a279407b5ff12ad69;
        CHECK_OBJECT( par_element );
        tmp_right_name_2 = par_element;
        tmp_args_element_name_1 = BINARY_OPERATION_REMAINDER( tmp_left_name_2, tmp_right_name_2 );
        if ( tmp_args_element_name_1 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
            Py_DECREF( tmp_called_name_1 );

            exception_lineno = 367;
            type_description_1 = "oo";
            goto frame_exception_exit_1;
        }
        frame_4a99c9a153c5488c06b277919fc55b52->m_frame.f_lineno = 367;
        {
            PyObject *call_args[] = { tmp_args_element_name_1 };
            tmp_call_result_1 = CALL_FUNCTION_WITH_ARGS1( tmp_called_name_1, call_args );
        }

        Py_DECREF( tmp_called_name_1 );
        Py_DECREF( tmp_args_element_name_1 );
        if ( tmp_call_result_1 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 367;
            type_description_1 = "oo";
            goto frame_exception_exit_1;
        }
        Py_DECREF( tmp_call_result_1 );
    }

#if 0
    RESTORE_FRAME_EXCEPTION( frame_4a99c9a153c5488c06b277919fc55b52 );
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto frame_no_exception_1;

    frame_exception_exit_1:;

#if 0
    RESTORE_FRAME_EXCEPTION( frame_4a99c9a153c5488c06b277919fc55b52 );
#endif

    if ( exception_tb == NULL )
    {
        exception_tb = MAKE_TRACEBACK( frame_4a99c9a153c5488c06b277919fc55b52, exception_lineno );
    }
    else if ( exception_tb->tb_frame != &frame_4a99c9a153c5488c06b277919fc55b52->m_frame )
    {
        exception_tb = ADD_TRACEBACK( exception_tb, frame_4a99c9a153c5488c06b277919fc55b52, exception_lineno );
    }

    // Attachs locals to frame if any.
    Nuitka_Frame_AttachLocals(
        (struct Nuitka_FrameObject *)frame_4a99c9a153c5488c06b277919fc55b52,
        type_description_1,
        par_self,
        par_element
    );


    // Release cached frame.
    if ( frame_4a99c9a153c5488c06b277919fc55b52 == cache_frame_4a99c9a153c5488c06b277919fc55b52 )
    {
        Py_DECREF( frame_4a99c9a153c5488c06b277919fc55b52 );
    }
    cache_frame_4a99c9a153c5488c06b277919fc55b52 = NULL;

    assertFrameObject( frame_4a99c9a153c5488c06b277919fc55b52 );

    // Put the previous frame back on top.
    popFrameStack();

    // Return the error.
    goto try_except_handler_1;

    frame_no_exception_1:;
    tmp_return_value = Py_None;
    Py_INCREF( tmp_return_value );
    goto try_return_handler_1;
    // tried codes exits in all cases
    NUITKA_CANNOT_GET_HERE( plistlib$$$function_37_end_element );
    return NULL;
    // Return handler code:
    try_return_handler_1:;
    CHECK_OBJECT( (PyObject *)par_self );
    Py_DECREF( par_self );
    par_self = NULL;

    CHECK_OBJECT( (PyObject *)par_element );
    Py_DECREF( par_element );
    par_element = NULL;

    goto function_return_exit;
    // Exception handler code:
    try_except_handler_1:;
    exception_keeper_type_3 = exception_type;
    exception_keeper_value_3 = exception_value;
    exception_keeper_tb_3 = exception_tb;
    exception_keeper_lineno_3 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    CHECK_OBJECT( (PyObject *)par_self );
    Py_DECREF( par_self );
    par_self = NULL;

    CHECK_OBJECT( (PyObject *)par_element );
    Py_DECREF( par_element );
    par_element = NULL;

    // Re-raise.
    exception_type = exception_keeper_type_3;
    exception_value = exception_keeper_value_3;
    exception_tb = exception_keeper_tb_3;
    exception_lineno = exception_keeper_lineno_3;

    goto function_exception_exit;
    // End of try:

    // Return statement must have exited already.
    NUITKA_CANNOT_GET_HERE( plistlib$$$function_37_end_element );
    return NULL;

function_exception_exit:
    assert( exception_type );
    RESTORE_ERROR_OCCURRED( exception_type, exception_value, exception_tb );

    return NULL;

function_return_exit:
   // Function cleanup code if any.


   // Actual function exit with return value, making sure we did not make
   // the error status worse despite non-NULL return.
   CHECK_OBJECT( tmp_return_value );
   assert( had_error || !ERROR_OCCURRED() );
   return tmp_return_value;
}


static PyObject *impl_plistlib$$$function_38_simple_element( struct Nuitka_FunctionObject const *self, PyObject **python_pars )
{
    // Preserve error status for checks
#ifndef __NUITKA_NO_ASSERT__
    NUITKA_MAY_BE_UNUSED bool had_error = ERROR_OCCURRED();
#endif

    // Local variable declarations.
    PyObject *par_self = python_pars[ 0 ];
    PyObject *par_element = python_pars[ 1 ];
    PyObject *par_value = python_pars[ 2 ];
    struct Nuitka_FrameObject *frame_6b99acd8979c98546f55969395a59194;
    NUITKA_MAY_BE_UNUSED char const *type_description_1 = NULL;
    PyObject *exception_type = NULL;
    PyObject *exception_value = NULL;
    PyTracebackObject *exception_tb = NULL;
    NUITKA_MAY_BE_UNUSED int exception_lineno = 0;
    static struct Nuitka_FrameObject *cache_frame_6b99acd8979c98546f55969395a59194 = NULL;
    PyObject *tmp_return_value = NULL;
    PyObject *exception_keeper_type_1;
    PyObject *exception_keeper_value_1;
    PyTracebackObject *exception_keeper_tb_1;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_1;

    // Actual function body.
    // Tried code:
    MAKE_OR_REUSE_FRAME( cache_frame_6b99acd8979c98546f55969395a59194, codeobj_6b99acd8979c98546f55969395a59194, module_plistlib, sizeof(void *)+sizeof(void *)+sizeof(void *) );
    frame_6b99acd8979c98546f55969395a59194 = cache_frame_6b99acd8979c98546f55969395a59194;

    // Push the new frame as the currently active one.
    pushFrameStack( frame_6b99acd8979c98546f55969395a59194 );

    // Mark the frame object as in use, ref count 1 will be up for reuse.
    assert( Py_REFCNT( frame_6b99acd8979c98546f55969395a59194 ) == 2 ); // Frame stack

    // Framed code:
    {
        nuitka_bool tmp_condition_result_1;
        PyObject *tmp_compexpr_left_1;
        PyObject *tmp_compexpr_right_1;
        CHECK_OBJECT( par_value );
        tmp_compexpr_left_1 = par_value;
        tmp_compexpr_right_1 = Py_None;
        tmp_condition_result_1 = ( tmp_compexpr_left_1 != tmp_compexpr_right_1 ) ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
        if ( tmp_condition_result_1 == NUITKA_BOOL_TRUE )
        {
            goto branch_yes_1;
        }
        else
        {
            goto branch_no_1;
        }
        branch_yes_1:;
        {
            PyObject *tmp_assign_source_1;
            PyObject *tmp_called_name_1;
            PyObject *tmp_mvar_value_1;
            PyObject *tmp_args_element_name_1;
            tmp_mvar_value_1 = GET_STRING_DICT_VALUE( moduledict_plistlib, (Nuitka_StringObject *)const_str_plain__escape );

            if (unlikely( tmp_mvar_value_1 == NULL ))
            {
                tmp_mvar_value_1 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain__escape );
            }

            if ( tmp_mvar_value_1 == NULL )
            {

                exception_type = PyExc_NameError;
                Py_INCREF( exception_type );
                exception_value = PyUnicode_FromFormat( "name '%s' is not defined", "_escape" );
                exception_tb = NULL;
                NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
                CHAIN_EXCEPTION( exception_value );

                exception_lineno = 371;
                type_description_1 = "ooo";
                goto frame_exception_exit_1;
            }

            tmp_called_name_1 = tmp_mvar_value_1;
            CHECK_OBJECT( par_value );
            tmp_args_element_name_1 = par_value;
            frame_6b99acd8979c98546f55969395a59194->m_frame.f_lineno = 371;
            {
                PyObject *call_args[] = { tmp_args_element_name_1 };
                tmp_assign_source_1 = CALL_FUNCTION_WITH_ARGS1( tmp_called_name_1, call_args );
            }

            if ( tmp_assign_source_1 == NULL )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 371;
                type_description_1 = "ooo";
                goto frame_exception_exit_1;
            }
            {
                PyObject *old = par_value;
                assert( old != NULL );
                par_value = tmp_assign_source_1;
                Py_DECREF( old );
            }

        }
        {
            PyObject *tmp_called_name_2;
            PyObject *tmp_source_name_1;
            PyObject *tmp_call_result_1;
            PyObject *tmp_args_element_name_2;
            PyObject *tmp_left_name_1;
            PyObject *tmp_right_name_1;
            PyObject *tmp_tuple_element_1;
            CHECK_OBJECT( par_self );
            tmp_source_name_1 = par_self;
            tmp_called_name_2 = LOOKUP_ATTRIBUTE( tmp_source_name_1, const_str_plain_writeln );
            if ( tmp_called_name_2 == NULL )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 372;
                type_description_1 = "ooo";
                goto frame_exception_exit_1;
            }
            tmp_left_name_1 = const_str_digest_18c2ace845f9015af5a765b47e9c1bfd;
            CHECK_OBJECT( par_element );
            tmp_tuple_element_1 = par_element;
            tmp_right_name_1 = PyTuple_New( 3 );
            Py_INCREF( tmp_tuple_element_1 );
            PyTuple_SET_ITEM( tmp_right_name_1, 0, tmp_tuple_element_1 );
            CHECK_OBJECT( par_value );
            tmp_tuple_element_1 = par_value;
            Py_INCREF( tmp_tuple_element_1 );
            PyTuple_SET_ITEM( tmp_right_name_1, 1, tmp_tuple_element_1 );
            CHECK_OBJECT( par_element );
            tmp_tuple_element_1 = par_element;
            Py_INCREF( tmp_tuple_element_1 );
            PyTuple_SET_ITEM( tmp_right_name_1, 2, tmp_tuple_element_1 );
            tmp_args_element_name_2 = BINARY_OPERATION_REMAINDER( tmp_left_name_1, tmp_right_name_1 );
            Py_DECREF( tmp_right_name_1 );
            if ( tmp_args_element_name_2 == NULL )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
                Py_DECREF( tmp_called_name_2 );

                exception_lineno = 372;
                type_description_1 = "ooo";
                goto frame_exception_exit_1;
            }
            frame_6b99acd8979c98546f55969395a59194->m_frame.f_lineno = 372;
            {
                PyObject *call_args[] = { tmp_args_element_name_2 };
                tmp_call_result_1 = CALL_FUNCTION_WITH_ARGS1( tmp_called_name_2, call_args );
            }

            Py_DECREF( tmp_called_name_2 );
            Py_DECREF( tmp_args_element_name_2 );
            if ( tmp_call_result_1 == NULL )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 372;
                type_description_1 = "ooo";
                goto frame_exception_exit_1;
            }
            Py_DECREF( tmp_call_result_1 );
        }
        goto branch_end_1;
        branch_no_1:;
        {
            PyObject *tmp_called_name_3;
            PyObject *tmp_source_name_2;
            PyObject *tmp_call_result_2;
            PyObject *tmp_args_element_name_3;
            PyObject *tmp_left_name_2;
            PyObject *tmp_right_name_2;
            CHECK_OBJECT( par_self );
            tmp_source_name_2 = par_self;
            tmp_called_name_3 = LOOKUP_ATTRIBUTE( tmp_source_name_2, const_str_plain_writeln );
            if ( tmp_called_name_3 == NULL )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 375;
                type_description_1 = "ooo";
                goto frame_exception_exit_1;
            }
            tmp_left_name_2 = const_str_digest_89886dc1cffd86ab711771894abdfcb5;
            CHECK_OBJECT( par_element );
            tmp_right_name_2 = par_element;
            tmp_args_element_name_3 = BINARY_OPERATION_REMAINDER( tmp_left_name_2, tmp_right_name_2 );
            if ( tmp_args_element_name_3 == NULL )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
                Py_DECREF( tmp_called_name_3 );

                exception_lineno = 375;
                type_description_1 = "ooo";
                goto frame_exception_exit_1;
            }
            frame_6b99acd8979c98546f55969395a59194->m_frame.f_lineno = 375;
            {
                PyObject *call_args[] = { tmp_args_element_name_3 };
                tmp_call_result_2 = CALL_FUNCTION_WITH_ARGS1( tmp_called_name_3, call_args );
            }

            Py_DECREF( tmp_called_name_3 );
            Py_DECREF( tmp_args_element_name_3 );
            if ( tmp_call_result_2 == NULL )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 375;
                type_description_1 = "ooo";
                goto frame_exception_exit_1;
            }
            Py_DECREF( tmp_call_result_2 );
        }
        branch_end_1:;
    }

#if 0
    RESTORE_FRAME_EXCEPTION( frame_6b99acd8979c98546f55969395a59194 );
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto frame_no_exception_1;

    frame_exception_exit_1:;

#if 0
    RESTORE_FRAME_EXCEPTION( frame_6b99acd8979c98546f55969395a59194 );
#endif

    if ( exception_tb == NULL )
    {
        exception_tb = MAKE_TRACEBACK( frame_6b99acd8979c98546f55969395a59194, exception_lineno );
    }
    else if ( exception_tb->tb_frame != &frame_6b99acd8979c98546f55969395a59194->m_frame )
    {
        exception_tb = ADD_TRACEBACK( exception_tb, frame_6b99acd8979c98546f55969395a59194, exception_lineno );
    }

    // Attachs locals to frame if any.
    Nuitka_Frame_AttachLocals(
        (struct Nuitka_FrameObject *)frame_6b99acd8979c98546f55969395a59194,
        type_description_1,
        par_self,
        par_element,
        par_value
    );


    // Release cached frame.
    if ( frame_6b99acd8979c98546f55969395a59194 == cache_frame_6b99acd8979c98546f55969395a59194 )
    {
        Py_DECREF( frame_6b99acd8979c98546f55969395a59194 );
    }
    cache_frame_6b99acd8979c98546f55969395a59194 = NULL;

    assertFrameObject( frame_6b99acd8979c98546f55969395a59194 );

    // Put the previous frame back on top.
    popFrameStack();

    // Return the error.
    goto try_except_handler_1;

    frame_no_exception_1:;
    tmp_return_value = Py_None;
    Py_INCREF( tmp_return_value );
    goto try_return_handler_1;
    // tried codes exits in all cases
    NUITKA_CANNOT_GET_HERE( plistlib$$$function_38_simple_element );
    return NULL;
    // Return handler code:
    try_return_handler_1:;
    CHECK_OBJECT( (PyObject *)par_self );
    Py_DECREF( par_self );
    par_self = NULL;

    CHECK_OBJECT( (PyObject *)par_element );
    Py_DECREF( par_element );
    par_element = NULL;

    CHECK_OBJECT( (PyObject *)par_value );
    Py_DECREF( par_value );
    par_value = NULL;

    goto function_return_exit;
    // Exception handler code:
    try_except_handler_1:;
    exception_keeper_type_1 = exception_type;
    exception_keeper_value_1 = exception_value;
    exception_keeper_tb_1 = exception_tb;
    exception_keeper_lineno_1 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    CHECK_OBJECT( (PyObject *)par_self );
    Py_DECREF( par_self );
    par_self = NULL;

    CHECK_OBJECT( (PyObject *)par_element );
    Py_DECREF( par_element );
    par_element = NULL;

    CHECK_OBJECT( (PyObject *)par_value );
    Py_DECREF( par_value );
    par_value = NULL;

    // Re-raise.
    exception_type = exception_keeper_type_1;
    exception_value = exception_keeper_value_1;
    exception_tb = exception_keeper_tb_1;
    exception_lineno = exception_keeper_lineno_1;

    goto function_exception_exit;
    // End of try:

    // Return statement must have exited already.
    NUITKA_CANNOT_GET_HERE( plistlib$$$function_38_simple_element );
    return NULL;

function_exception_exit:
    assert( exception_type );
    RESTORE_ERROR_OCCURRED( exception_type, exception_value, exception_tb );

    return NULL;

function_return_exit:
   // Function cleanup code if any.


   // Actual function exit with return value, making sure we did not make
   // the error status worse despite non-NULL return.
   CHECK_OBJECT( tmp_return_value );
   assert( had_error || !ERROR_OCCURRED() );
   return tmp_return_value;
}


static PyObject *impl_plistlib$$$function_39_writeln( struct Nuitka_FunctionObject const *self, PyObject **python_pars )
{
    // Preserve error status for checks
#ifndef __NUITKA_NO_ASSERT__
    NUITKA_MAY_BE_UNUSED bool had_error = ERROR_OCCURRED();
#endif

    // Local variable declarations.
    PyObject *par_self = python_pars[ 0 ];
    PyObject *par_line = python_pars[ 1 ];
    struct Nuitka_FrameObject *frame_3b5b591b966c1dc4c84cbc03ce10a24b;
    NUITKA_MAY_BE_UNUSED char const *type_description_1 = NULL;
    PyObject *exception_type = NULL;
    PyObject *exception_value = NULL;
    PyTracebackObject *exception_tb = NULL;
    NUITKA_MAY_BE_UNUSED int exception_lineno = 0;
    int tmp_res;
    static struct Nuitka_FrameObject *cache_frame_3b5b591b966c1dc4c84cbc03ce10a24b = NULL;
    PyObject *tmp_return_value = NULL;
    PyObject *exception_keeper_type_1;
    PyObject *exception_keeper_value_1;
    PyTracebackObject *exception_keeper_tb_1;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_1;

    // Actual function body.
    // Tried code:
    MAKE_OR_REUSE_FRAME( cache_frame_3b5b591b966c1dc4c84cbc03ce10a24b, codeobj_3b5b591b966c1dc4c84cbc03ce10a24b, module_plistlib, sizeof(void *)+sizeof(void *) );
    frame_3b5b591b966c1dc4c84cbc03ce10a24b = cache_frame_3b5b591b966c1dc4c84cbc03ce10a24b;

    // Push the new frame as the currently active one.
    pushFrameStack( frame_3b5b591b966c1dc4c84cbc03ce10a24b );

    // Mark the frame object as in use, ref count 1 will be up for reuse.
    assert( Py_REFCNT( frame_3b5b591b966c1dc4c84cbc03ce10a24b ) == 2 ); // Frame stack

    // Framed code:
    {
        nuitka_bool tmp_condition_result_1;
        int tmp_truth_name_1;
        CHECK_OBJECT( par_line );
        tmp_truth_name_1 = CHECK_IF_TRUE( par_line );
        if ( tmp_truth_name_1 == -1 )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 378;
            type_description_1 = "oo";
            goto frame_exception_exit_1;
        }
        tmp_condition_result_1 = tmp_truth_name_1 == 1 ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
        if ( tmp_condition_result_1 == NUITKA_BOOL_TRUE )
        {
            goto branch_yes_1;
        }
        else
        {
            goto branch_no_1;
        }
        branch_yes_1:;
        {
            nuitka_bool tmp_condition_result_2;
            PyObject *tmp_isinstance_inst_1;
            PyObject *tmp_isinstance_cls_1;
            CHECK_OBJECT( par_line );
            tmp_isinstance_inst_1 = par_line;
            tmp_isinstance_cls_1 = (PyObject *)&PyUnicode_Type;
            tmp_res = Nuitka_IsInstance( tmp_isinstance_inst_1, tmp_isinstance_cls_1 );
            if ( tmp_res == -1 )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 382;
                type_description_1 = "oo";
                goto frame_exception_exit_1;
            }
            tmp_condition_result_2 = ( tmp_res != 0 ) ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
            if ( tmp_condition_result_2 == NUITKA_BOOL_TRUE )
            {
                goto branch_yes_2;
            }
            else
            {
                goto branch_no_2;
            }
            branch_yes_2:;
            {
                PyObject *tmp_assign_source_1;
                PyObject *tmp_called_instance_1;
                CHECK_OBJECT( par_line );
                tmp_called_instance_1 = par_line;
                frame_3b5b591b966c1dc4c84cbc03ce10a24b->m_frame.f_lineno = 383;
                tmp_assign_source_1 = CALL_METHOD_WITH_ARGS1( tmp_called_instance_1, const_str_plain_encode, &PyTuple_GET_ITEM( const_tuple_str_digest_c075052d723d6707083e869a0e3659bb_tuple, 0 ) );

                if ( tmp_assign_source_1 == NULL )
                {
                    assert( ERROR_OCCURRED() );

                    FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                    exception_lineno = 383;
                    type_description_1 = "oo";
                    goto frame_exception_exit_1;
                }
                {
                    PyObject *old = par_line;
                    assert( old != NULL );
                    par_line = tmp_assign_source_1;
                    Py_DECREF( old );
                }

            }
            branch_no_2:;
        }
        {
            PyObject *tmp_called_name_1;
            PyObject *tmp_source_name_1;
            PyObject *tmp_source_name_2;
            PyObject *tmp_call_result_1;
            PyObject *tmp_args_element_name_1;
            PyObject *tmp_left_name_1;
            PyObject *tmp_source_name_3;
            PyObject *tmp_right_name_1;
            PyObject *tmp_source_name_4;
            CHECK_OBJECT( par_self );
            tmp_source_name_2 = par_self;
            tmp_source_name_1 = LOOKUP_ATTRIBUTE( tmp_source_name_2, const_str_plain_file );
            if ( tmp_source_name_1 == NULL )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 384;
                type_description_1 = "oo";
                goto frame_exception_exit_1;
            }
            tmp_called_name_1 = LOOKUP_ATTRIBUTE( tmp_source_name_1, const_str_plain_write );
            Py_DECREF( tmp_source_name_1 );
            if ( tmp_called_name_1 == NULL )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 384;
                type_description_1 = "oo";
                goto frame_exception_exit_1;
            }
            CHECK_OBJECT( par_self );
            tmp_source_name_3 = par_self;
            tmp_left_name_1 = LOOKUP_ATTRIBUTE( tmp_source_name_3, const_str_plain__indent_level );
            if ( tmp_left_name_1 == NULL )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
                Py_DECREF( tmp_called_name_1 );

                exception_lineno = 384;
                type_description_1 = "oo";
                goto frame_exception_exit_1;
            }
            CHECK_OBJECT( par_self );
            tmp_source_name_4 = par_self;
            tmp_right_name_1 = LOOKUP_ATTRIBUTE( tmp_source_name_4, const_str_plain_indent );
            if ( tmp_right_name_1 == NULL )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
                Py_DECREF( tmp_called_name_1 );
                Py_DECREF( tmp_left_name_1 );

                exception_lineno = 384;
                type_description_1 = "oo";
                goto frame_exception_exit_1;
            }
            tmp_args_element_name_1 = BINARY_OPERATION_MUL( tmp_left_name_1, tmp_right_name_1 );
            Py_DECREF( tmp_left_name_1 );
            Py_DECREF( tmp_right_name_1 );
            if ( tmp_args_element_name_1 == NULL )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
                Py_DECREF( tmp_called_name_1 );

                exception_lineno = 384;
                type_description_1 = "oo";
                goto frame_exception_exit_1;
            }
            frame_3b5b591b966c1dc4c84cbc03ce10a24b->m_frame.f_lineno = 384;
            {
                PyObject *call_args[] = { tmp_args_element_name_1 };
                tmp_call_result_1 = CALL_FUNCTION_WITH_ARGS1( tmp_called_name_1, call_args );
            }

            Py_DECREF( tmp_called_name_1 );
            Py_DECREF( tmp_args_element_name_1 );
            if ( tmp_call_result_1 == NULL )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 384;
                type_description_1 = "oo";
                goto frame_exception_exit_1;
            }
            Py_DECREF( tmp_call_result_1 );
        }
        {
            PyObject *tmp_called_instance_2;
            PyObject *tmp_source_name_5;
            PyObject *tmp_call_result_2;
            PyObject *tmp_args_element_name_2;
            CHECK_OBJECT( par_self );
            tmp_source_name_5 = par_self;
            tmp_called_instance_2 = LOOKUP_ATTRIBUTE( tmp_source_name_5, const_str_plain_file );
            if ( tmp_called_instance_2 == NULL )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 385;
                type_description_1 = "oo";
                goto frame_exception_exit_1;
            }
            CHECK_OBJECT( par_line );
            tmp_args_element_name_2 = par_line;
            frame_3b5b591b966c1dc4c84cbc03ce10a24b->m_frame.f_lineno = 385;
            {
                PyObject *call_args[] = { tmp_args_element_name_2 };
                tmp_call_result_2 = CALL_METHOD_WITH_ARGS1( tmp_called_instance_2, const_str_plain_write, call_args );
            }

            Py_DECREF( tmp_called_instance_2 );
            if ( tmp_call_result_2 == NULL )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 385;
                type_description_1 = "oo";
                goto frame_exception_exit_1;
            }
            Py_DECREF( tmp_call_result_2 );
        }
        branch_no_1:;
    }
    {
        PyObject *tmp_called_instance_3;
        PyObject *tmp_source_name_6;
        PyObject *tmp_call_result_3;
        CHECK_OBJECT( par_self );
        tmp_source_name_6 = par_self;
        tmp_called_instance_3 = LOOKUP_ATTRIBUTE( tmp_source_name_6, const_str_plain_file );
        if ( tmp_called_instance_3 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 386;
            type_description_1 = "oo";
            goto frame_exception_exit_1;
        }
        frame_3b5b591b966c1dc4c84cbc03ce10a24b->m_frame.f_lineno = 386;
        tmp_call_result_3 = CALL_METHOD_WITH_ARGS1( tmp_called_instance_3, const_str_plain_write, &PyTuple_GET_ITEM( const_tuple_bytes_chr_10_tuple, 0 ) );

        Py_DECREF( tmp_called_instance_3 );
        if ( tmp_call_result_3 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 386;
            type_description_1 = "oo";
            goto frame_exception_exit_1;
        }
        Py_DECREF( tmp_call_result_3 );
    }

#if 0
    RESTORE_FRAME_EXCEPTION( frame_3b5b591b966c1dc4c84cbc03ce10a24b );
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto frame_no_exception_1;

    frame_exception_exit_1:;

#if 0
    RESTORE_FRAME_EXCEPTION( frame_3b5b591b966c1dc4c84cbc03ce10a24b );
#endif

    if ( exception_tb == NULL )
    {
        exception_tb = MAKE_TRACEBACK( frame_3b5b591b966c1dc4c84cbc03ce10a24b, exception_lineno );
    }
    else if ( exception_tb->tb_frame != &frame_3b5b591b966c1dc4c84cbc03ce10a24b->m_frame )
    {
        exception_tb = ADD_TRACEBACK( exception_tb, frame_3b5b591b966c1dc4c84cbc03ce10a24b, exception_lineno );
    }

    // Attachs locals to frame if any.
    Nuitka_Frame_AttachLocals(
        (struct Nuitka_FrameObject *)frame_3b5b591b966c1dc4c84cbc03ce10a24b,
        type_description_1,
        par_self,
        par_line
    );


    // Release cached frame.
    if ( frame_3b5b591b966c1dc4c84cbc03ce10a24b == cache_frame_3b5b591b966c1dc4c84cbc03ce10a24b )
    {
        Py_DECREF( frame_3b5b591b966c1dc4c84cbc03ce10a24b );
    }
    cache_frame_3b5b591b966c1dc4c84cbc03ce10a24b = NULL;

    assertFrameObject( frame_3b5b591b966c1dc4c84cbc03ce10a24b );

    // Put the previous frame back on top.
    popFrameStack();

    // Return the error.
    goto try_except_handler_1;

    frame_no_exception_1:;
    tmp_return_value = Py_None;
    Py_INCREF( tmp_return_value );
    goto try_return_handler_1;
    // tried codes exits in all cases
    NUITKA_CANNOT_GET_HERE( plistlib$$$function_39_writeln );
    return NULL;
    // Return handler code:
    try_return_handler_1:;
    CHECK_OBJECT( (PyObject *)par_self );
    Py_DECREF( par_self );
    par_self = NULL;

    Py_XDECREF( par_line );
    par_line = NULL;

    goto function_return_exit;
    // Exception handler code:
    try_except_handler_1:;
    exception_keeper_type_1 = exception_type;
    exception_keeper_value_1 = exception_value;
    exception_keeper_tb_1 = exception_tb;
    exception_keeper_lineno_1 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    CHECK_OBJECT( (PyObject *)par_self );
    Py_DECREF( par_self );
    par_self = NULL;

    Py_XDECREF( par_line );
    par_line = NULL;

    // Re-raise.
    exception_type = exception_keeper_type_1;
    exception_value = exception_keeper_value_1;
    exception_tb = exception_keeper_tb_1;
    exception_lineno = exception_keeper_lineno_1;

    goto function_exception_exit;
    // End of try:

    // Return statement must have exited already.
    NUITKA_CANNOT_GET_HERE( plistlib$$$function_39_writeln );
    return NULL;

function_exception_exit:
    assert( exception_type );
    RESTORE_ERROR_OCCURRED( exception_type, exception_value, exception_tb );

    return NULL;

function_return_exit:
   // Function cleanup code if any.


   // Actual function exit with return value, making sure we did not make
   // the error status worse despite non-NULL return.
   CHECK_OBJECT( tmp_return_value );
   assert( had_error || !ERROR_OCCURRED() );
   return tmp_return_value;
}


static PyObject *impl_plistlib$$$function_40___init__( struct Nuitka_FunctionObject const *self, PyObject **python_pars )
{
    // Preserve error status for checks
#ifndef __NUITKA_NO_ASSERT__
    NUITKA_MAY_BE_UNUSED bool had_error = ERROR_OCCURRED();
#endif

    // Local variable declarations.
    PyObject *par_self = python_pars[ 0 ];
    PyObject *par_file = python_pars[ 1 ];
    PyObject *par_indent_level = python_pars[ 2 ];
    PyObject *par_indent = python_pars[ 3 ];
    PyObject *par_writeHeader = python_pars[ 4 ];
    PyObject *par_sort_keys = python_pars[ 5 ];
    PyObject *par_skipkeys = python_pars[ 6 ];
    struct Nuitka_FrameObject *frame_bbb1f15ac628392d781447385fcc52bf;
    NUITKA_MAY_BE_UNUSED char const *type_description_1 = NULL;
    PyObject *exception_type = NULL;
    PyObject *exception_value = NULL;
    PyTracebackObject *exception_tb = NULL;
    NUITKA_MAY_BE_UNUSED int exception_lineno = 0;
    bool tmp_result;
    static struct Nuitka_FrameObject *cache_frame_bbb1f15ac628392d781447385fcc52bf = NULL;
    PyObject *tmp_return_value = NULL;
    PyObject *exception_keeper_type_1;
    PyObject *exception_keeper_value_1;
    PyTracebackObject *exception_keeper_tb_1;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_1;

    // Actual function body.
    // Tried code:
    MAKE_OR_REUSE_FRAME( cache_frame_bbb1f15ac628392d781447385fcc52bf, codeobj_bbb1f15ac628392d781447385fcc52bf, module_plistlib, sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *) );
    frame_bbb1f15ac628392d781447385fcc52bf = cache_frame_bbb1f15ac628392d781447385fcc52bf;

    // Push the new frame as the currently active one.
    pushFrameStack( frame_bbb1f15ac628392d781447385fcc52bf );

    // Mark the frame object as in use, ref count 1 will be up for reuse.
    assert( Py_REFCNT( frame_bbb1f15ac628392d781447385fcc52bf ) == 2 ); // Frame stack

    // Framed code:
    {
        nuitka_bool tmp_condition_result_1;
        int tmp_truth_name_1;
        CHECK_OBJECT( par_writeHeader );
        tmp_truth_name_1 = CHECK_IF_TRUE( par_writeHeader );
        if ( tmp_truth_name_1 == -1 )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 394;
            type_description_1 = "ooooooo";
            goto frame_exception_exit_1;
        }
        tmp_condition_result_1 = tmp_truth_name_1 == 1 ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
        if ( tmp_condition_result_1 == NUITKA_BOOL_TRUE )
        {
            goto branch_yes_1;
        }
        else
        {
            goto branch_no_1;
        }
        branch_yes_1:;
        {
            PyObject *tmp_called_name_1;
            PyObject *tmp_source_name_1;
            PyObject *tmp_call_result_1;
            PyObject *tmp_args_element_name_1;
            PyObject *tmp_mvar_value_1;
            CHECK_OBJECT( par_file );
            tmp_source_name_1 = par_file;
            tmp_called_name_1 = LOOKUP_ATTRIBUTE( tmp_source_name_1, const_str_plain_write );
            if ( tmp_called_name_1 == NULL )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 395;
                type_description_1 = "ooooooo";
                goto frame_exception_exit_1;
            }
            tmp_mvar_value_1 = GET_STRING_DICT_VALUE( moduledict_plistlib, (Nuitka_StringObject *)const_str_plain_PLISTHEADER );

            if (unlikely( tmp_mvar_value_1 == NULL ))
            {
                tmp_mvar_value_1 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_PLISTHEADER );
            }

            if ( tmp_mvar_value_1 == NULL )
            {
                Py_DECREF( tmp_called_name_1 );
                exception_type = PyExc_NameError;
                Py_INCREF( exception_type );
                exception_value = PyUnicode_FromFormat( "name '%s' is not defined", "PLISTHEADER" );
                exception_tb = NULL;
                NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
                CHAIN_EXCEPTION( exception_value );

                exception_lineno = 395;
                type_description_1 = "ooooooo";
                goto frame_exception_exit_1;
            }

            tmp_args_element_name_1 = tmp_mvar_value_1;
            frame_bbb1f15ac628392d781447385fcc52bf->m_frame.f_lineno = 395;
            {
                PyObject *call_args[] = { tmp_args_element_name_1 };
                tmp_call_result_1 = CALL_FUNCTION_WITH_ARGS1( tmp_called_name_1, call_args );
            }

            Py_DECREF( tmp_called_name_1 );
            if ( tmp_call_result_1 == NULL )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 395;
                type_description_1 = "ooooooo";
                goto frame_exception_exit_1;
            }
            Py_DECREF( tmp_call_result_1 );
        }
        branch_no_1:;
    }
    {
        PyObject *tmp_called_instance_1;
        PyObject *tmp_mvar_value_2;
        PyObject *tmp_call_result_2;
        PyObject *tmp_args_element_name_2;
        PyObject *tmp_args_element_name_3;
        PyObject *tmp_args_element_name_4;
        PyObject *tmp_args_element_name_5;
        tmp_mvar_value_2 = GET_STRING_DICT_VALUE( moduledict_plistlib, (Nuitka_StringObject *)const_str_plain__DumbXMLWriter );

        if (unlikely( tmp_mvar_value_2 == NULL ))
        {
            tmp_mvar_value_2 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain__DumbXMLWriter );
        }

        if ( tmp_mvar_value_2 == NULL )
        {

            exception_type = PyExc_NameError;
            Py_INCREF( exception_type );
            exception_value = PyUnicode_FromFormat( "name '%s' is not defined", "_DumbXMLWriter" );
            exception_tb = NULL;
            NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
            CHAIN_EXCEPTION( exception_value );

            exception_lineno = 396;
            type_description_1 = "ooooooo";
            goto frame_exception_exit_1;
        }

        tmp_called_instance_1 = tmp_mvar_value_2;
        CHECK_OBJECT( par_self );
        tmp_args_element_name_2 = par_self;
        CHECK_OBJECT( par_file );
        tmp_args_element_name_3 = par_file;
        CHECK_OBJECT( par_indent_level );
        tmp_args_element_name_4 = par_indent_level;
        CHECK_OBJECT( par_indent );
        tmp_args_element_name_5 = par_indent;
        frame_bbb1f15ac628392d781447385fcc52bf->m_frame.f_lineno = 396;
        {
            PyObject *call_args[] = { tmp_args_element_name_2, tmp_args_element_name_3, tmp_args_element_name_4, tmp_args_element_name_5 };
            tmp_call_result_2 = CALL_METHOD_WITH_ARGS4( tmp_called_instance_1, const_str_plain___init__, call_args );
        }

        if ( tmp_call_result_2 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 396;
            type_description_1 = "ooooooo";
            goto frame_exception_exit_1;
        }
        Py_DECREF( tmp_call_result_2 );
    }
    {
        PyObject *tmp_assattr_name_1;
        PyObject *tmp_assattr_target_1;
        CHECK_OBJECT( par_sort_keys );
        tmp_assattr_name_1 = par_sort_keys;
        CHECK_OBJECT( par_self );
        tmp_assattr_target_1 = par_self;
        tmp_result = SET_ATTRIBUTE( tmp_assattr_target_1, const_str_plain__sort_keys, tmp_assattr_name_1 );
        if ( tmp_result == false )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 397;
            type_description_1 = "ooooooo";
            goto frame_exception_exit_1;
        }
    }
    {
        PyObject *tmp_assattr_name_2;
        PyObject *tmp_assattr_target_2;
        CHECK_OBJECT( par_skipkeys );
        tmp_assattr_name_2 = par_skipkeys;
        CHECK_OBJECT( par_self );
        tmp_assattr_target_2 = par_self;
        tmp_result = SET_ATTRIBUTE( tmp_assattr_target_2, const_str_plain__skipkeys, tmp_assattr_name_2 );
        if ( tmp_result == false )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 398;
            type_description_1 = "ooooooo";
            goto frame_exception_exit_1;
        }
    }

#if 0
    RESTORE_FRAME_EXCEPTION( frame_bbb1f15ac628392d781447385fcc52bf );
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto frame_no_exception_1;

    frame_exception_exit_1:;

#if 0
    RESTORE_FRAME_EXCEPTION( frame_bbb1f15ac628392d781447385fcc52bf );
#endif

    if ( exception_tb == NULL )
    {
        exception_tb = MAKE_TRACEBACK( frame_bbb1f15ac628392d781447385fcc52bf, exception_lineno );
    }
    else if ( exception_tb->tb_frame != &frame_bbb1f15ac628392d781447385fcc52bf->m_frame )
    {
        exception_tb = ADD_TRACEBACK( exception_tb, frame_bbb1f15ac628392d781447385fcc52bf, exception_lineno );
    }

    // Attachs locals to frame if any.
    Nuitka_Frame_AttachLocals(
        (struct Nuitka_FrameObject *)frame_bbb1f15ac628392d781447385fcc52bf,
        type_description_1,
        par_self,
        par_file,
        par_indent_level,
        par_indent,
        par_writeHeader,
        par_sort_keys,
        par_skipkeys
    );


    // Release cached frame.
    if ( frame_bbb1f15ac628392d781447385fcc52bf == cache_frame_bbb1f15ac628392d781447385fcc52bf )
    {
        Py_DECREF( frame_bbb1f15ac628392d781447385fcc52bf );
    }
    cache_frame_bbb1f15ac628392d781447385fcc52bf = NULL;

    assertFrameObject( frame_bbb1f15ac628392d781447385fcc52bf );

    // Put the previous frame back on top.
    popFrameStack();

    // Return the error.
    goto try_except_handler_1;

    frame_no_exception_1:;
    tmp_return_value = Py_None;
    Py_INCREF( tmp_return_value );
    goto try_return_handler_1;
    // tried codes exits in all cases
    NUITKA_CANNOT_GET_HERE( plistlib$$$function_40___init__ );
    return NULL;
    // Return handler code:
    try_return_handler_1:;
    CHECK_OBJECT( (PyObject *)par_self );
    Py_DECREF( par_self );
    par_self = NULL;

    CHECK_OBJECT( (PyObject *)par_file );
    Py_DECREF( par_file );
    par_file = NULL;

    CHECK_OBJECT( (PyObject *)par_indent_level );
    Py_DECREF( par_indent_level );
    par_indent_level = NULL;

    CHECK_OBJECT( (PyObject *)par_indent );
    Py_DECREF( par_indent );
    par_indent = NULL;

    CHECK_OBJECT( (PyObject *)par_writeHeader );
    Py_DECREF( par_writeHeader );
    par_writeHeader = NULL;

    CHECK_OBJECT( (PyObject *)par_sort_keys );
    Py_DECREF( par_sort_keys );
    par_sort_keys = NULL;

    CHECK_OBJECT( (PyObject *)par_skipkeys );
    Py_DECREF( par_skipkeys );
    par_skipkeys = NULL;

    goto function_return_exit;
    // Exception handler code:
    try_except_handler_1:;
    exception_keeper_type_1 = exception_type;
    exception_keeper_value_1 = exception_value;
    exception_keeper_tb_1 = exception_tb;
    exception_keeper_lineno_1 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    CHECK_OBJECT( (PyObject *)par_self );
    Py_DECREF( par_self );
    par_self = NULL;

    CHECK_OBJECT( (PyObject *)par_file );
    Py_DECREF( par_file );
    par_file = NULL;

    CHECK_OBJECT( (PyObject *)par_indent_level );
    Py_DECREF( par_indent_level );
    par_indent_level = NULL;

    CHECK_OBJECT( (PyObject *)par_indent );
    Py_DECREF( par_indent );
    par_indent = NULL;

    CHECK_OBJECT( (PyObject *)par_writeHeader );
    Py_DECREF( par_writeHeader );
    par_writeHeader = NULL;

    CHECK_OBJECT( (PyObject *)par_sort_keys );
    Py_DECREF( par_sort_keys );
    par_sort_keys = NULL;

    CHECK_OBJECT( (PyObject *)par_skipkeys );
    Py_DECREF( par_skipkeys );
    par_skipkeys = NULL;

    // Re-raise.
    exception_type = exception_keeper_type_1;
    exception_value = exception_keeper_value_1;
    exception_tb = exception_keeper_tb_1;
    exception_lineno = exception_keeper_lineno_1;

    goto function_exception_exit;
    // End of try:

    // Return statement must have exited already.
    NUITKA_CANNOT_GET_HERE( plistlib$$$function_40___init__ );
    return NULL;

function_exception_exit:
    assert( exception_type );
    RESTORE_ERROR_OCCURRED( exception_type, exception_value, exception_tb );

    return NULL;

function_return_exit:
   // Function cleanup code if any.


   // Actual function exit with return value, making sure we did not make
   // the error status worse despite non-NULL return.
   CHECK_OBJECT( tmp_return_value );
   assert( had_error || !ERROR_OCCURRED() );
   return tmp_return_value;
}


static PyObject *impl_plistlib$$$function_41_write( struct Nuitka_FunctionObject const *self, PyObject **python_pars )
{
    // Preserve error status for checks
#ifndef __NUITKA_NO_ASSERT__
    NUITKA_MAY_BE_UNUSED bool had_error = ERROR_OCCURRED();
#endif

    // Local variable declarations.
    PyObject *par_self = python_pars[ 0 ];
    PyObject *par_value = python_pars[ 1 ];
    struct Nuitka_FrameObject *frame_2ab18736824656190d9afedab53a988a;
    NUITKA_MAY_BE_UNUSED char const *type_description_1 = NULL;
    PyObject *exception_type = NULL;
    PyObject *exception_value = NULL;
    PyTracebackObject *exception_tb = NULL;
    NUITKA_MAY_BE_UNUSED int exception_lineno = 0;
    static struct Nuitka_FrameObject *cache_frame_2ab18736824656190d9afedab53a988a = NULL;
    PyObject *tmp_return_value = NULL;
    PyObject *exception_keeper_type_1;
    PyObject *exception_keeper_value_1;
    PyTracebackObject *exception_keeper_tb_1;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_1;

    // Actual function body.
    // Tried code:
    MAKE_OR_REUSE_FRAME( cache_frame_2ab18736824656190d9afedab53a988a, codeobj_2ab18736824656190d9afedab53a988a, module_plistlib, sizeof(void *)+sizeof(void *) );
    frame_2ab18736824656190d9afedab53a988a = cache_frame_2ab18736824656190d9afedab53a988a;

    // Push the new frame as the currently active one.
    pushFrameStack( frame_2ab18736824656190d9afedab53a988a );

    // Mark the frame object as in use, ref count 1 will be up for reuse.
    assert( Py_REFCNT( frame_2ab18736824656190d9afedab53a988a ) == 2 ); // Frame stack

    // Framed code:
    {
        PyObject *tmp_called_instance_1;
        PyObject *tmp_call_result_1;
        CHECK_OBJECT( par_self );
        tmp_called_instance_1 = par_self;
        frame_2ab18736824656190d9afedab53a988a->m_frame.f_lineno = 401;
        tmp_call_result_1 = CALL_METHOD_WITH_ARGS1( tmp_called_instance_1, const_str_plain_writeln, &PyTuple_GET_ITEM( const_tuple_str_digest_76d6e11399c7aa1061842aa32438ca8b_tuple, 0 ) );

        if ( tmp_call_result_1 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 401;
            type_description_1 = "oo";
            goto frame_exception_exit_1;
        }
        Py_DECREF( tmp_call_result_1 );
    }
    {
        PyObject *tmp_called_instance_2;
        PyObject *tmp_call_result_2;
        PyObject *tmp_args_element_name_1;
        CHECK_OBJECT( par_self );
        tmp_called_instance_2 = par_self;
        CHECK_OBJECT( par_value );
        tmp_args_element_name_1 = par_value;
        frame_2ab18736824656190d9afedab53a988a->m_frame.f_lineno = 402;
        {
            PyObject *call_args[] = { tmp_args_element_name_1 };
            tmp_call_result_2 = CALL_METHOD_WITH_ARGS1( tmp_called_instance_2, const_str_plain_write_value, call_args );
        }

        if ( tmp_call_result_2 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 402;
            type_description_1 = "oo";
            goto frame_exception_exit_1;
        }
        Py_DECREF( tmp_call_result_2 );
    }
    {
        PyObject *tmp_called_instance_3;
        PyObject *tmp_call_result_3;
        CHECK_OBJECT( par_self );
        tmp_called_instance_3 = par_self;
        frame_2ab18736824656190d9afedab53a988a->m_frame.f_lineno = 403;
        tmp_call_result_3 = CALL_METHOD_WITH_ARGS1( tmp_called_instance_3, const_str_plain_writeln, &PyTuple_GET_ITEM( const_tuple_str_digest_376488162a4b457dc0f7e24a467edc33_tuple, 0 ) );

        if ( tmp_call_result_3 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 403;
            type_description_1 = "oo";
            goto frame_exception_exit_1;
        }
        Py_DECREF( tmp_call_result_3 );
    }

#if 0
    RESTORE_FRAME_EXCEPTION( frame_2ab18736824656190d9afedab53a988a );
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto frame_no_exception_1;

    frame_exception_exit_1:;

#if 0
    RESTORE_FRAME_EXCEPTION( frame_2ab18736824656190d9afedab53a988a );
#endif

    if ( exception_tb == NULL )
    {
        exception_tb = MAKE_TRACEBACK( frame_2ab18736824656190d9afedab53a988a, exception_lineno );
    }
    else if ( exception_tb->tb_frame != &frame_2ab18736824656190d9afedab53a988a->m_frame )
    {
        exception_tb = ADD_TRACEBACK( exception_tb, frame_2ab18736824656190d9afedab53a988a, exception_lineno );
    }

    // Attachs locals to frame if any.
    Nuitka_Frame_AttachLocals(
        (struct Nuitka_FrameObject *)frame_2ab18736824656190d9afedab53a988a,
        type_description_1,
        par_self,
        par_value
    );


    // Release cached frame.
    if ( frame_2ab18736824656190d9afedab53a988a == cache_frame_2ab18736824656190d9afedab53a988a )
    {
        Py_DECREF( frame_2ab18736824656190d9afedab53a988a );
    }
    cache_frame_2ab18736824656190d9afedab53a988a = NULL;

    assertFrameObject( frame_2ab18736824656190d9afedab53a988a );

    // Put the previous frame back on top.
    popFrameStack();

    // Return the error.
    goto try_except_handler_1;

    frame_no_exception_1:;
    tmp_return_value = Py_None;
    Py_INCREF( tmp_return_value );
    goto try_return_handler_1;
    // tried codes exits in all cases
    NUITKA_CANNOT_GET_HERE( plistlib$$$function_41_write );
    return NULL;
    // Return handler code:
    try_return_handler_1:;
    CHECK_OBJECT( (PyObject *)par_self );
    Py_DECREF( par_self );
    par_self = NULL;

    CHECK_OBJECT( (PyObject *)par_value );
    Py_DECREF( par_value );
    par_value = NULL;

    goto function_return_exit;
    // Exception handler code:
    try_except_handler_1:;
    exception_keeper_type_1 = exception_type;
    exception_keeper_value_1 = exception_value;
    exception_keeper_tb_1 = exception_tb;
    exception_keeper_lineno_1 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    CHECK_OBJECT( (PyObject *)par_self );
    Py_DECREF( par_self );
    par_self = NULL;

    CHECK_OBJECT( (PyObject *)par_value );
    Py_DECREF( par_value );
    par_value = NULL;

    // Re-raise.
    exception_type = exception_keeper_type_1;
    exception_value = exception_keeper_value_1;
    exception_tb = exception_keeper_tb_1;
    exception_lineno = exception_keeper_lineno_1;

    goto function_exception_exit;
    // End of try:

    // Return statement must have exited already.
    NUITKA_CANNOT_GET_HERE( plistlib$$$function_41_write );
    return NULL;

function_exception_exit:
    assert( exception_type );
    RESTORE_ERROR_OCCURRED( exception_type, exception_value, exception_tb );

    return NULL;

function_return_exit:
   // Function cleanup code if any.


   // Actual function exit with return value, making sure we did not make
   // the error status worse despite non-NULL return.
   CHECK_OBJECT( tmp_return_value );
   assert( had_error || !ERROR_OCCURRED() );
   return tmp_return_value;
}


static PyObject *impl_plistlib$$$function_42_write_value( struct Nuitka_FunctionObject const *self, PyObject **python_pars )
{
    // Preserve error status for checks
#ifndef __NUITKA_NO_ASSERT__
    NUITKA_MAY_BE_UNUSED bool had_error = ERROR_OCCURRED();
#endif

    // Local variable declarations.
    PyObject *par_self = python_pars[ 0 ];
    PyObject *par_value = python_pars[ 1 ];
    PyObject *tmp_comparison_chain_1__comparison_result = NULL;
    PyObject *tmp_comparison_chain_1__operand_2 = NULL;
    struct Nuitka_FrameObject *frame_c0f5be1b35baf9f3b0c01ecf8ced538a;
    NUITKA_MAY_BE_UNUSED char const *type_description_1 = NULL;
    int tmp_res;
    PyObject *exception_type = NULL;
    PyObject *exception_value = NULL;
    PyTracebackObject *exception_tb = NULL;
    NUITKA_MAY_BE_UNUSED int exception_lineno = 0;
    PyObject *exception_keeper_type_1;
    PyObject *exception_keeper_value_1;
    PyTracebackObject *exception_keeper_tb_1;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_1;
    static struct Nuitka_FrameObject *cache_frame_c0f5be1b35baf9f3b0c01ecf8ced538a = NULL;
    PyObject *tmp_return_value = NULL;
    PyObject *exception_keeper_type_2;
    PyObject *exception_keeper_value_2;
    PyTracebackObject *exception_keeper_tb_2;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_2;

    // Actual function body.
    // Tried code:
    MAKE_OR_REUSE_FRAME( cache_frame_c0f5be1b35baf9f3b0c01ecf8ced538a, codeobj_c0f5be1b35baf9f3b0c01ecf8ced538a, module_plistlib, sizeof(void *)+sizeof(void *) );
    frame_c0f5be1b35baf9f3b0c01ecf8ced538a = cache_frame_c0f5be1b35baf9f3b0c01ecf8ced538a;

    // Push the new frame as the currently active one.
    pushFrameStack( frame_c0f5be1b35baf9f3b0c01ecf8ced538a );

    // Mark the frame object as in use, ref count 1 will be up for reuse.
    assert( Py_REFCNT( frame_c0f5be1b35baf9f3b0c01ecf8ced538a ) == 2 ); // Frame stack

    // Framed code:
    {
        nuitka_bool tmp_condition_result_1;
        PyObject *tmp_isinstance_inst_1;
        PyObject *tmp_isinstance_cls_1;
        CHECK_OBJECT( par_value );
        tmp_isinstance_inst_1 = par_value;
        tmp_isinstance_cls_1 = (PyObject *)&PyUnicode_Type;
        tmp_res = Nuitka_IsInstance( tmp_isinstance_inst_1, tmp_isinstance_cls_1 );
        if ( tmp_res == -1 )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 406;
            type_description_1 = "oo";
            goto frame_exception_exit_1;
        }
        tmp_condition_result_1 = ( tmp_res != 0 ) ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
        if ( tmp_condition_result_1 == NUITKA_BOOL_TRUE )
        {
            goto branch_yes_1;
        }
        else
        {
            goto branch_no_1;
        }
        branch_yes_1:;
        {
            PyObject *tmp_called_instance_1;
            PyObject *tmp_call_result_1;
            PyObject *tmp_args_element_name_1;
            PyObject *tmp_args_element_name_2;
            CHECK_OBJECT( par_self );
            tmp_called_instance_1 = par_self;
            tmp_args_element_name_1 = const_str_plain_string;
            CHECK_OBJECT( par_value );
            tmp_args_element_name_2 = par_value;
            frame_c0f5be1b35baf9f3b0c01ecf8ced538a->m_frame.f_lineno = 407;
            {
                PyObject *call_args[] = { tmp_args_element_name_1, tmp_args_element_name_2 };
                tmp_call_result_1 = CALL_METHOD_WITH_ARGS2( tmp_called_instance_1, const_str_plain_simple_element, call_args );
            }

            if ( tmp_call_result_1 == NULL )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 407;
                type_description_1 = "oo";
                goto frame_exception_exit_1;
            }
            Py_DECREF( tmp_call_result_1 );
        }
        goto branch_end_1;
        branch_no_1:;
        {
            nuitka_bool tmp_condition_result_2;
            PyObject *tmp_compexpr_left_1;
            PyObject *tmp_compexpr_right_1;
            CHECK_OBJECT( par_value );
            tmp_compexpr_left_1 = par_value;
            tmp_compexpr_right_1 = Py_True;
            tmp_condition_result_2 = ( tmp_compexpr_left_1 == tmp_compexpr_right_1 ) ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
            if ( tmp_condition_result_2 == NUITKA_BOOL_TRUE )
            {
                goto branch_yes_2;
            }
            else
            {
                goto branch_no_2;
            }
            branch_yes_2:;
            {
                PyObject *tmp_called_instance_2;
                PyObject *tmp_call_result_2;
                CHECK_OBJECT( par_self );
                tmp_called_instance_2 = par_self;
                frame_c0f5be1b35baf9f3b0c01ecf8ced538a->m_frame.f_lineno = 410;
                tmp_call_result_2 = CALL_METHOD_WITH_ARGS1( tmp_called_instance_2, const_str_plain_simple_element, &PyTuple_GET_ITEM( const_tuple_str_plain_true_tuple, 0 ) );

                if ( tmp_call_result_2 == NULL )
                {
                    assert( ERROR_OCCURRED() );

                    FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                    exception_lineno = 410;
                    type_description_1 = "oo";
                    goto frame_exception_exit_1;
                }
                Py_DECREF( tmp_call_result_2 );
            }
            goto branch_end_2;
            branch_no_2:;
            {
                nuitka_bool tmp_condition_result_3;
                PyObject *tmp_compexpr_left_2;
                PyObject *tmp_compexpr_right_2;
                CHECK_OBJECT( par_value );
                tmp_compexpr_left_2 = par_value;
                tmp_compexpr_right_2 = Py_False;
                tmp_condition_result_3 = ( tmp_compexpr_left_2 == tmp_compexpr_right_2 ) ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
                if ( tmp_condition_result_3 == NUITKA_BOOL_TRUE )
                {
                    goto branch_yes_3;
                }
                else
                {
                    goto branch_no_3;
                }
                branch_yes_3:;
                {
                    PyObject *tmp_called_instance_3;
                    PyObject *tmp_call_result_3;
                    CHECK_OBJECT( par_self );
                    tmp_called_instance_3 = par_self;
                    frame_c0f5be1b35baf9f3b0c01ecf8ced538a->m_frame.f_lineno = 413;
                    tmp_call_result_3 = CALL_METHOD_WITH_ARGS1( tmp_called_instance_3, const_str_plain_simple_element, &PyTuple_GET_ITEM( const_tuple_str_plain_false_tuple, 0 ) );

                    if ( tmp_call_result_3 == NULL )
                    {
                        assert( ERROR_OCCURRED() );

                        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                        exception_lineno = 413;
                        type_description_1 = "oo";
                        goto frame_exception_exit_1;
                    }
                    Py_DECREF( tmp_call_result_3 );
                }
                goto branch_end_3;
                branch_no_3:;
                {
                    nuitka_bool tmp_condition_result_4;
                    PyObject *tmp_isinstance_inst_2;
                    PyObject *tmp_isinstance_cls_2;
                    CHECK_OBJECT( par_value );
                    tmp_isinstance_inst_2 = par_value;
                    tmp_isinstance_cls_2 = (PyObject *)&PyLong_Type;
                    tmp_res = Nuitka_IsInstance( tmp_isinstance_inst_2, tmp_isinstance_cls_2 );
                    if ( tmp_res == -1 )
                    {
                        assert( ERROR_OCCURRED() );

                        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                        exception_lineno = 415;
                        type_description_1 = "oo";
                        goto frame_exception_exit_1;
                    }
                    tmp_condition_result_4 = ( tmp_res != 0 ) ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
                    if ( tmp_condition_result_4 == NUITKA_BOOL_TRUE )
                    {
                        goto branch_yes_4;
                    }
                    else
                    {
                        goto branch_no_4;
                    }
                    branch_yes_4:;
                    {
                        nuitka_bool tmp_condition_result_5;
                        PyObject *tmp_outline_return_value_1;
                        int tmp_truth_name_1;
                        {
                            PyObject *tmp_assign_source_1;
                            CHECK_OBJECT( par_value );
                            tmp_assign_source_1 = par_value;
                            assert( tmp_comparison_chain_1__operand_2 == NULL );
                            Py_INCREF( tmp_assign_source_1 );
                            tmp_comparison_chain_1__operand_2 = tmp_assign_source_1;
                        }
                        // Tried code:
                        {
                            PyObject *tmp_assign_source_2;
                            PyObject *tmp_compexpr_left_3;
                            PyObject *tmp_compexpr_right_3;
                            tmp_compexpr_left_3 = const_int_neg_9223372036854775808;
                            CHECK_OBJECT( tmp_comparison_chain_1__operand_2 );
                            tmp_compexpr_right_3 = tmp_comparison_chain_1__operand_2;
                            tmp_assign_source_2 = RICH_COMPARE_LTE_OBJECT_OBJECT( tmp_compexpr_left_3, tmp_compexpr_right_3 );
                            if ( tmp_assign_source_2 == NULL )
                            {
                                assert( ERROR_OCCURRED() );

                                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                                exception_lineno = 416;
                                type_description_1 = "oo";
                                goto try_except_handler_2;
                            }
                            assert( tmp_comparison_chain_1__comparison_result == NULL );
                            tmp_comparison_chain_1__comparison_result = tmp_assign_source_2;
                        }
                        {
                            nuitka_bool tmp_condition_result_6;
                            PyObject *tmp_operand_name_1;
                            CHECK_OBJECT( tmp_comparison_chain_1__comparison_result );
                            tmp_operand_name_1 = tmp_comparison_chain_1__comparison_result;
                            tmp_res = CHECK_IF_TRUE( tmp_operand_name_1 );
                            if ( tmp_res == -1 )
                            {
                                assert( ERROR_OCCURRED() );

                                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                                exception_lineno = 416;
                                type_description_1 = "oo";
                                goto try_except_handler_2;
                            }
                            tmp_condition_result_6 = ( tmp_res == 0 ) ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
                            if ( tmp_condition_result_6 == NUITKA_BOOL_TRUE )
                            {
                                goto branch_yes_6;
                            }
                            else
                            {
                                goto branch_no_6;
                            }
                            branch_yes_6:;
                            CHECK_OBJECT( tmp_comparison_chain_1__comparison_result );
                            tmp_outline_return_value_1 = tmp_comparison_chain_1__comparison_result;
                            Py_INCREF( tmp_outline_return_value_1 );
                            goto try_return_handler_2;
                            branch_no_6:;
                        }
                        {
                            PyObject *tmp_compexpr_left_4;
                            PyObject *tmp_compexpr_right_4;
                            CHECK_OBJECT( tmp_comparison_chain_1__operand_2 );
                            tmp_compexpr_left_4 = tmp_comparison_chain_1__operand_2;
                            tmp_compexpr_right_4 = const_int_pos_18446744073709551616;
                            tmp_outline_return_value_1 = RICH_COMPARE_LT_OBJECT_OBJECT( tmp_compexpr_left_4, tmp_compexpr_right_4 );
                            if ( tmp_outline_return_value_1 == NULL )
                            {
                                assert( ERROR_OCCURRED() );

                                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                                exception_lineno = 416;
                                type_description_1 = "oo";
                                goto try_except_handler_2;
                            }
                            goto try_return_handler_2;
                        }
                        // tried codes exits in all cases
                        NUITKA_CANNOT_GET_HERE( plistlib$$$function_42_write_value );
                        return NULL;
                        // Return handler code:
                        try_return_handler_2:;
                        CHECK_OBJECT( (PyObject *)tmp_comparison_chain_1__operand_2 );
                        Py_DECREF( tmp_comparison_chain_1__operand_2 );
                        tmp_comparison_chain_1__operand_2 = NULL;

                        CHECK_OBJECT( (PyObject *)tmp_comparison_chain_1__comparison_result );
                        Py_DECREF( tmp_comparison_chain_1__comparison_result );
                        tmp_comparison_chain_1__comparison_result = NULL;

                        goto outline_result_1;
                        // Exception handler code:
                        try_except_handler_2:;
                        exception_keeper_type_1 = exception_type;
                        exception_keeper_value_1 = exception_value;
                        exception_keeper_tb_1 = exception_tb;
                        exception_keeper_lineno_1 = exception_lineno;
                        exception_type = NULL;
                        exception_value = NULL;
                        exception_tb = NULL;
                        exception_lineno = 0;

                        CHECK_OBJECT( (PyObject *)tmp_comparison_chain_1__operand_2 );
                        Py_DECREF( tmp_comparison_chain_1__operand_2 );
                        tmp_comparison_chain_1__operand_2 = NULL;

                        Py_XDECREF( tmp_comparison_chain_1__comparison_result );
                        tmp_comparison_chain_1__comparison_result = NULL;

                        // Re-raise.
                        exception_type = exception_keeper_type_1;
                        exception_value = exception_keeper_value_1;
                        exception_tb = exception_keeper_tb_1;
                        exception_lineno = exception_keeper_lineno_1;

                        goto frame_exception_exit_1;
                        // End of try:
                        // Return statement must have exited already.
                        NUITKA_CANNOT_GET_HERE( plistlib$$$function_42_write_value );
                        return NULL;
                        outline_result_1:;
                        tmp_truth_name_1 = CHECK_IF_TRUE( tmp_outline_return_value_1 );
                        if ( tmp_truth_name_1 == -1 )
                        {
                            assert( ERROR_OCCURRED() );

                            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
                            Py_DECREF( tmp_outline_return_value_1 );

                            exception_lineno = 416;
                            type_description_1 = "oo";
                            goto frame_exception_exit_1;
                        }
                        tmp_condition_result_5 = tmp_truth_name_1 == 1 ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
                        Py_DECREF( tmp_outline_return_value_1 );
                        if ( tmp_condition_result_5 == NUITKA_BOOL_TRUE )
                        {
                            goto branch_yes_5;
                        }
                        else
                        {
                            goto branch_no_5;
                        }
                        branch_yes_5:;
                        {
                            PyObject *tmp_called_name_1;
                            PyObject *tmp_source_name_1;
                            PyObject *tmp_call_result_4;
                            PyObject *tmp_args_element_name_3;
                            PyObject *tmp_args_element_name_4;
                            PyObject *tmp_left_name_1;
                            PyObject *tmp_right_name_1;
                            CHECK_OBJECT( par_self );
                            tmp_source_name_1 = par_self;
                            tmp_called_name_1 = LOOKUP_ATTRIBUTE( tmp_source_name_1, const_str_plain_simple_element );
                            if ( tmp_called_name_1 == NULL )
                            {
                                assert( ERROR_OCCURRED() );

                                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                                exception_lineno = 417;
                                type_description_1 = "oo";
                                goto frame_exception_exit_1;
                            }
                            tmp_args_element_name_3 = const_str_plain_integer;
                            tmp_left_name_1 = const_str_digest_a9f9a21e276932d061c34fdf077216a6;
                            CHECK_OBJECT( par_value );
                            tmp_right_name_1 = par_value;
                            tmp_args_element_name_4 = BINARY_OPERATION_REMAINDER( tmp_left_name_1, tmp_right_name_1 );
                            if ( tmp_args_element_name_4 == NULL )
                            {
                                assert( ERROR_OCCURRED() );

                                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
                                Py_DECREF( tmp_called_name_1 );

                                exception_lineno = 417;
                                type_description_1 = "oo";
                                goto frame_exception_exit_1;
                            }
                            frame_c0f5be1b35baf9f3b0c01ecf8ced538a->m_frame.f_lineno = 417;
                            {
                                PyObject *call_args[] = { tmp_args_element_name_3, tmp_args_element_name_4 };
                                tmp_call_result_4 = CALL_FUNCTION_WITH_ARGS2( tmp_called_name_1, call_args );
                            }

                            Py_DECREF( tmp_called_name_1 );
                            Py_DECREF( tmp_args_element_name_4 );
                            if ( tmp_call_result_4 == NULL )
                            {
                                assert( ERROR_OCCURRED() );

                                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                                exception_lineno = 417;
                                type_description_1 = "oo";
                                goto frame_exception_exit_1;
                            }
                            Py_DECREF( tmp_call_result_4 );
                        }
                        goto branch_end_5;
                        branch_no_5:;
                        {
                            PyObject *tmp_raise_type_1;
                            PyObject *tmp_make_exception_arg_1;
                            CHECK_OBJECT( par_value );
                            tmp_make_exception_arg_1 = par_value;
                            frame_c0f5be1b35baf9f3b0c01ecf8ced538a->m_frame.f_lineno = 419;
                            {
                                PyObject *call_args[] = { tmp_make_exception_arg_1 };
                                tmp_raise_type_1 = CALL_FUNCTION_WITH_ARGS1( PyExc_OverflowError, call_args );
                            }

                            assert( !(tmp_raise_type_1 == NULL) );
                            exception_type = tmp_raise_type_1;
                            exception_lineno = 419;
                            RAISE_EXCEPTION_WITH_TYPE( &exception_type, &exception_value, &exception_tb );
                            type_description_1 = "oo";
                            goto frame_exception_exit_1;
                        }
                        branch_end_5:;
                    }
                    goto branch_end_4;
                    branch_no_4:;
                    {
                        nuitka_bool tmp_condition_result_7;
                        PyObject *tmp_isinstance_inst_3;
                        PyObject *tmp_isinstance_cls_3;
                        CHECK_OBJECT( par_value );
                        tmp_isinstance_inst_3 = par_value;
                        tmp_isinstance_cls_3 = (PyObject *)&PyFloat_Type;
                        tmp_res = Nuitka_IsInstance( tmp_isinstance_inst_3, tmp_isinstance_cls_3 );
                        if ( tmp_res == -1 )
                        {
                            assert( ERROR_OCCURRED() );

                            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                            exception_lineno = 421;
                            type_description_1 = "oo";
                            goto frame_exception_exit_1;
                        }
                        tmp_condition_result_7 = ( tmp_res != 0 ) ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
                        if ( tmp_condition_result_7 == NUITKA_BOOL_TRUE )
                        {
                            goto branch_yes_7;
                        }
                        else
                        {
                            goto branch_no_7;
                        }
                        branch_yes_7:;
                        {
                            PyObject *tmp_called_name_2;
                            PyObject *tmp_source_name_2;
                            PyObject *tmp_call_result_5;
                            PyObject *tmp_args_element_name_5;
                            PyObject *tmp_args_element_name_6;
                            PyObject *tmp_operand_name_2;
                            CHECK_OBJECT( par_self );
                            tmp_source_name_2 = par_self;
                            tmp_called_name_2 = LOOKUP_ATTRIBUTE( tmp_source_name_2, const_str_plain_simple_element );
                            if ( tmp_called_name_2 == NULL )
                            {
                                assert( ERROR_OCCURRED() );

                                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                                exception_lineno = 422;
                                type_description_1 = "oo";
                                goto frame_exception_exit_1;
                            }
                            tmp_args_element_name_5 = const_str_plain_real;
                            CHECK_OBJECT( par_value );
                            tmp_operand_name_2 = par_value;
                            tmp_args_element_name_6 = UNARY_OPERATION( PyObject_Repr, tmp_operand_name_2 );
                            if ( tmp_args_element_name_6 == NULL )
                            {
                                assert( ERROR_OCCURRED() );

                                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
                                Py_DECREF( tmp_called_name_2 );

                                exception_lineno = 422;
                                type_description_1 = "oo";
                                goto frame_exception_exit_1;
                            }
                            frame_c0f5be1b35baf9f3b0c01ecf8ced538a->m_frame.f_lineno = 422;
                            {
                                PyObject *call_args[] = { tmp_args_element_name_5, tmp_args_element_name_6 };
                                tmp_call_result_5 = CALL_FUNCTION_WITH_ARGS2( tmp_called_name_2, call_args );
                            }

                            Py_DECREF( tmp_called_name_2 );
                            Py_DECREF( tmp_args_element_name_6 );
                            if ( tmp_call_result_5 == NULL )
                            {
                                assert( ERROR_OCCURRED() );

                                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                                exception_lineno = 422;
                                type_description_1 = "oo";
                                goto frame_exception_exit_1;
                            }
                            Py_DECREF( tmp_call_result_5 );
                        }
                        goto branch_end_7;
                        branch_no_7:;
                        {
                            nuitka_bool tmp_condition_result_8;
                            PyObject *tmp_isinstance_inst_4;
                            PyObject *tmp_isinstance_cls_4;
                            CHECK_OBJECT( par_value );
                            tmp_isinstance_inst_4 = par_value;
                            tmp_isinstance_cls_4 = (PyObject *)&PyDict_Type;
                            tmp_res = Nuitka_IsInstance( tmp_isinstance_inst_4, tmp_isinstance_cls_4 );
                            if ( tmp_res == -1 )
                            {
                                assert( ERROR_OCCURRED() );

                                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                                exception_lineno = 424;
                                type_description_1 = "oo";
                                goto frame_exception_exit_1;
                            }
                            tmp_condition_result_8 = ( tmp_res != 0 ) ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
                            if ( tmp_condition_result_8 == NUITKA_BOOL_TRUE )
                            {
                                goto branch_yes_8;
                            }
                            else
                            {
                                goto branch_no_8;
                            }
                            branch_yes_8:;
                            {
                                PyObject *tmp_called_instance_4;
                                PyObject *tmp_call_result_6;
                                PyObject *tmp_args_element_name_7;
                                CHECK_OBJECT( par_self );
                                tmp_called_instance_4 = par_self;
                                CHECK_OBJECT( par_value );
                                tmp_args_element_name_7 = par_value;
                                frame_c0f5be1b35baf9f3b0c01ecf8ced538a->m_frame.f_lineno = 425;
                                {
                                    PyObject *call_args[] = { tmp_args_element_name_7 };
                                    tmp_call_result_6 = CALL_METHOD_WITH_ARGS1( tmp_called_instance_4, const_str_plain_write_dict, call_args );
                                }

                                if ( tmp_call_result_6 == NULL )
                                {
                                    assert( ERROR_OCCURRED() );

                                    FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                                    exception_lineno = 425;
                                    type_description_1 = "oo";
                                    goto frame_exception_exit_1;
                                }
                                Py_DECREF( tmp_call_result_6 );
                            }
                            goto branch_end_8;
                            branch_no_8:;
                            {
                                nuitka_bool tmp_condition_result_9;
                                PyObject *tmp_isinstance_inst_5;
                                PyObject *tmp_isinstance_cls_5;
                                PyObject *tmp_mvar_value_1;
                                CHECK_OBJECT( par_value );
                                tmp_isinstance_inst_5 = par_value;
                                tmp_mvar_value_1 = GET_STRING_DICT_VALUE( moduledict_plistlib, (Nuitka_StringObject *)const_str_plain_Data );

                                if (unlikely( tmp_mvar_value_1 == NULL ))
                                {
                                    tmp_mvar_value_1 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_Data );
                                }

                                if ( tmp_mvar_value_1 == NULL )
                                {

                                    exception_type = PyExc_NameError;
                                    Py_INCREF( exception_type );
                                    exception_value = PyUnicode_FromFormat( "name '%s' is not defined", "Data" );
                                    exception_tb = NULL;
                                    NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
                                    CHAIN_EXCEPTION( exception_value );

                                    exception_lineno = 427;
                                    type_description_1 = "oo";
                                    goto frame_exception_exit_1;
                                }

                                tmp_isinstance_cls_5 = tmp_mvar_value_1;
                                tmp_res = Nuitka_IsInstance( tmp_isinstance_inst_5, tmp_isinstance_cls_5 );
                                if ( tmp_res == -1 )
                                {
                                    assert( ERROR_OCCURRED() );

                                    FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                                    exception_lineno = 427;
                                    type_description_1 = "oo";
                                    goto frame_exception_exit_1;
                                }
                                tmp_condition_result_9 = ( tmp_res != 0 ) ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
                                if ( tmp_condition_result_9 == NUITKA_BOOL_TRUE )
                                {
                                    goto branch_yes_9;
                                }
                                else
                                {
                                    goto branch_no_9;
                                }
                                branch_yes_9:;
                                {
                                    PyObject *tmp_called_instance_5;
                                    PyObject *tmp_call_result_7;
                                    PyObject *tmp_args_element_name_8;
                                    CHECK_OBJECT( par_self );
                                    tmp_called_instance_5 = par_self;
                                    CHECK_OBJECT( par_value );
                                    tmp_args_element_name_8 = par_value;
                                    frame_c0f5be1b35baf9f3b0c01ecf8ced538a->m_frame.f_lineno = 428;
                                    {
                                        PyObject *call_args[] = { tmp_args_element_name_8 };
                                        tmp_call_result_7 = CALL_METHOD_WITH_ARGS1( tmp_called_instance_5, const_str_plain_write_data, call_args );
                                    }

                                    if ( tmp_call_result_7 == NULL )
                                    {
                                        assert( ERROR_OCCURRED() );

                                        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                                        exception_lineno = 428;
                                        type_description_1 = "oo";
                                        goto frame_exception_exit_1;
                                    }
                                    Py_DECREF( tmp_call_result_7 );
                                }
                                goto branch_end_9;
                                branch_no_9:;
                                {
                                    nuitka_bool tmp_condition_result_10;
                                    PyObject *tmp_isinstance_inst_6;
                                    PyObject *tmp_isinstance_cls_6;
                                    CHECK_OBJECT( par_value );
                                    tmp_isinstance_inst_6 = par_value;
                                    tmp_isinstance_cls_6 = const_tuple_type_bytes_type_bytearray_tuple;
                                    tmp_res = Nuitka_IsInstance( tmp_isinstance_inst_6, tmp_isinstance_cls_6 );
                                    if ( tmp_res == -1 )
                                    {
                                        assert( ERROR_OCCURRED() );

                                        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                                        exception_lineno = 430;
                                        type_description_1 = "oo";
                                        goto frame_exception_exit_1;
                                    }
                                    tmp_condition_result_10 = ( tmp_res != 0 ) ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
                                    if ( tmp_condition_result_10 == NUITKA_BOOL_TRUE )
                                    {
                                        goto branch_yes_10;
                                    }
                                    else
                                    {
                                        goto branch_no_10;
                                    }
                                    branch_yes_10:;
                                    {
                                        PyObject *tmp_called_instance_6;
                                        PyObject *tmp_call_result_8;
                                        PyObject *tmp_args_element_name_9;
                                        CHECK_OBJECT( par_self );
                                        tmp_called_instance_6 = par_self;
                                        CHECK_OBJECT( par_value );
                                        tmp_args_element_name_9 = par_value;
                                        frame_c0f5be1b35baf9f3b0c01ecf8ced538a->m_frame.f_lineno = 431;
                                        {
                                            PyObject *call_args[] = { tmp_args_element_name_9 };
                                            tmp_call_result_8 = CALL_METHOD_WITH_ARGS1( tmp_called_instance_6, const_str_plain_write_bytes, call_args );
                                        }

                                        if ( tmp_call_result_8 == NULL )
                                        {
                                            assert( ERROR_OCCURRED() );

                                            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                                            exception_lineno = 431;
                                            type_description_1 = "oo";
                                            goto frame_exception_exit_1;
                                        }
                                        Py_DECREF( tmp_call_result_8 );
                                    }
                                    goto branch_end_10;
                                    branch_no_10:;
                                    {
                                        nuitka_bool tmp_condition_result_11;
                                        PyObject *tmp_isinstance_inst_7;
                                        PyObject *tmp_isinstance_cls_7;
                                        PyObject *tmp_source_name_3;
                                        PyObject *tmp_mvar_value_2;
                                        CHECK_OBJECT( par_value );
                                        tmp_isinstance_inst_7 = par_value;
                                        tmp_mvar_value_2 = GET_STRING_DICT_VALUE( moduledict_plistlib, (Nuitka_StringObject *)const_str_plain_datetime );

                                        if (unlikely( tmp_mvar_value_2 == NULL ))
                                        {
                                            tmp_mvar_value_2 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_datetime );
                                        }

                                        if ( tmp_mvar_value_2 == NULL )
                                        {

                                            exception_type = PyExc_NameError;
                                            Py_INCREF( exception_type );
                                            exception_value = PyUnicode_FromFormat( "name '%s' is not defined", "datetime" );
                                            exception_tb = NULL;
                                            NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
                                            CHAIN_EXCEPTION( exception_value );

                                            exception_lineno = 433;
                                            type_description_1 = "oo";
                                            goto frame_exception_exit_1;
                                        }

                                        tmp_source_name_3 = tmp_mvar_value_2;
                                        tmp_isinstance_cls_7 = LOOKUP_ATTRIBUTE( tmp_source_name_3, const_str_plain_datetime );
                                        if ( tmp_isinstance_cls_7 == NULL )
                                        {
                                            assert( ERROR_OCCURRED() );

                                            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                                            exception_lineno = 433;
                                            type_description_1 = "oo";
                                            goto frame_exception_exit_1;
                                        }
                                        tmp_res = Nuitka_IsInstance( tmp_isinstance_inst_7, tmp_isinstance_cls_7 );
                                        Py_DECREF( tmp_isinstance_cls_7 );
                                        if ( tmp_res == -1 )
                                        {
                                            assert( ERROR_OCCURRED() );

                                            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                                            exception_lineno = 433;
                                            type_description_1 = "oo";
                                            goto frame_exception_exit_1;
                                        }
                                        tmp_condition_result_11 = ( tmp_res != 0 ) ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
                                        if ( tmp_condition_result_11 == NUITKA_BOOL_TRUE )
                                        {
                                            goto branch_yes_11;
                                        }
                                        else
                                        {
                                            goto branch_no_11;
                                        }
                                        branch_yes_11:;
                                        {
                                            PyObject *tmp_called_name_3;
                                            PyObject *tmp_source_name_4;
                                            PyObject *tmp_call_result_9;
                                            PyObject *tmp_args_element_name_10;
                                            PyObject *tmp_args_element_name_11;
                                            PyObject *tmp_called_name_4;
                                            PyObject *tmp_mvar_value_3;
                                            PyObject *tmp_args_element_name_12;
                                            CHECK_OBJECT( par_self );
                                            tmp_source_name_4 = par_self;
                                            tmp_called_name_3 = LOOKUP_ATTRIBUTE( tmp_source_name_4, const_str_plain_simple_element );
                                            if ( tmp_called_name_3 == NULL )
                                            {
                                                assert( ERROR_OCCURRED() );

                                                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                                                exception_lineno = 434;
                                                type_description_1 = "oo";
                                                goto frame_exception_exit_1;
                                            }
                                            tmp_args_element_name_10 = const_str_plain_date;
                                            tmp_mvar_value_3 = GET_STRING_DICT_VALUE( moduledict_plistlib, (Nuitka_StringObject *)const_str_plain__date_to_string );

                                            if (unlikely( tmp_mvar_value_3 == NULL ))
                                            {
                                                tmp_mvar_value_3 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain__date_to_string );
                                            }

                                            if ( tmp_mvar_value_3 == NULL )
                                            {
                                                Py_DECREF( tmp_called_name_3 );
                                                exception_type = PyExc_NameError;
                                                Py_INCREF( exception_type );
                                                exception_value = PyUnicode_FromFormat( "name '%s' is not defined", "_date_to_string" );
                                                exception_tb = NULL;
                                                NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
                                                CHAIN_EXCEPTION( exception_value );

                                                exception_lineno = 434;
                                                type_description_1 = "oo";
                                                goto frame_exception_exit_1;
                                            }

                                            tmp_called_name_4 = tmp_mvar_value_3;
                                            CHECK_OBJECT( par_value );
                                            tmp_args_element_name_12 = par_value;
                                            frame_c0f5be1b35baf9f3b0c01ecf8ced538a->m_frame.f_lineno = 434;
                                            {
                                                PyObject *call_args[] = { tmp_args_element_name_12 };
                                                tmp_args_element_name_11 = CALL_FUNCTION_WITH_ARGS1( tmp_called_name_4, call_args );
                                            }

                                            if ( tmp_args_element_name_11 == NULL )
                                            {
                                                assert( ERROR_OCCURRED() );

                                                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
                                                Py_DECREF( tmp_called_name_3 );

                                                exception_lineno = 434;
                                                type_description_1 = "oo";
                                                goto frame_exception_exit_1;
                                            }
                                            frame_c0f5be1b35baf9f3b0c01ecf8ced538a->m_frame.f_lineno = 434;
                                            {
                                                PyObject *call_args[] = { tmp_args_element_name_10, tmp_args_element_name_11 };
                                                tmp_call_result_9 = CALL_FUNCTION_WITH_ARGS2( tmp_called_name_3, call_args );
                                            }

                                            Py_DECREF( tmp_called_name_3 );
                                            Py_DECREF( tmp_args_element_name_11 );
                                            if ( tmp_call_result_9 == NULL )
                                            {
                                                assert( ERROR_OCCURRED() );

                                                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                                                exception_lineno = 434;
                                                type_description_1 = "oo";
                                                goto frame_exception_exit_1;
                                            }
                                            Py_DECREF( tmp_call_result_9 );
                                        }
                                        goto branch_end_11;
                                        branch_no_11:;
                                        {
                                            nuitka_bool tmp_condition_result_12;
                                            PyObject *tmp_isinstance_inst_8;
                                            PyObject *tmp_isinstance_cls_8;
                                            CHECK_OBJECT( par_value );
                                            tmp_isinstance_inst_8 = par_value;
                                            tmp_isinstance_cls_8 = const_tuple_type_tuple_type_list_tuple;
                                            tmp_res = Nuitka_IsInstance( tmp_isinstance_inst_8, tmp_isinstance_cls_8 );
                                            if ( tmp_res == -1 )
                                            {
                                                assert( ERROR_OCCURRED() );

                                                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                                                exception_lineno = 436;
                                                type_description_1 = "oo";
                                                goto frame_exception_exit_1;
                                            }
                                            tmp_condition_result_12 = ( tmp_res != 0 ) ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
                                            if ( tmp_condition_result_12 == NUITKA_BOOL_TRUE )
                                            {
                                                goto branch_yes_12;
                                            }
                                            else
                                            {
                                                goto branch_no_12;
                                            }
                                            branch_yes_12:;
                                            {
                                                PyObject *tmp_called_instance_7;
                                                PyObject *tmp_call_result_10;
                                                PyObject *tmp_args_element_name_13;
                                                CHECK_OBJECT( par_self );
                                                tmp_called_instance_7 = par_self;
                                                CHECK_OBJECT( par_value );
                                                tmp_args_element_name_13 = par_value;
                                                frame_c0f5be1b35baf9f3b0c01ecf8ced538a->m_frame.f_lineno = 437;
                                                {
                                                    PyObject *call_args[] = { tmp_args_element_name_13 };
                                                    tmp_call_result_10 = CALL_METHOD_WITH_ARGS1( tmp_called_instance_7, const_str_plain_write_array, call_args );
                                                }

                                                if ( tmp_call_result_10 == NULL )
                                                {
                                                    assert( ERROR_OCCURRED() );

                                                    FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                                                    exception_lineno = 437;
                                                    type_description_1 = "oo";
                                                    goto frame_exception_exit_1;
                                                }
                                                Py_DECREF( tmp_call_result_10 );
                                            }
                                            goto branch_end_12;
                                            branch_no_12:;
                                            {
                                                PyObject *tmp_raise_type_2;
                                                PyObject *tmp_make_exception_arg_2;
                                                PyObject *tmp_left_name_2;
                                                PyObject *tmp_right_name_2;
                                                PyObject *tmp_type_arg_1;
                                                tmp_left_name_2 = const_str_digest_5488d6035ce32cb670efe19cb3e3e6e0;
                                                CHECK_OBJECT( par_value );
                                                tmp_type_arg_1 = par_value;
                                                tmp_right_name_2 = BUILTIN_TYPE1( tmp_type_arg_1 );
                                                assert( !(tmp_right_name_2 == NULL) );
                                                tmp_make_exception_arg_2 = BINARY_OPERATION_REMAINDER( tmp_left_name_2, tmp_right_name_2 );
                                                Py_DECREF( tmp_right_name_2 );
                                                if ( tmp_make_exception_arg_2 == NULL )
                                                {
                                                    assert( ERROR_OCCURRED() );

                                                    FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                                                    exception_lineno = 440;
                                                    type_description_1 = "oo";
                                                    goto frame_exception_exit_1;
                                                }
                                                frame_c0f5be1b35baf9f3b0c01ecf8ced538a->m_frame.f_lineno = 440;
                                                {
                                                    PyObject *call_args[] = { tmp_make_exception_arg_2 };
                                                    tmp_raise_type_2 = CALL_FUNCTION_WITH_ARGS1( PyExc_TypeError, call_args );
                                                }

                                                Py_DECREF( tmp_make_exception_arg_2 );
                                                assert( !(tmp_raise_type_2 == NULL) );
                                                exception_type = tmp_raise_type_2;
                                                exception_lineno = 440;
                                                RAISE_EXCEPTION_WITH_TYPE( &exception_type, &exception_value, &exception_tb );
                                                type_description_1 = "oo";
                                                goto frame_exception_exit_1;
                                            }
                                            branch_end_12:;
                                        }
                                        branch_end_11:;
                                    }
                                    branch_end_10:;
                                }
                                branch_end_9:;
                            }
                            branch_end_8:;
                        }
                        branch_end_7:;
                    }
                    branch_end_4:;
                }
                branch_end_3:;
            }
            branch_end_2:;
        }
        branch_end_1:;
    }

#if 0
    RESTORE_FRAME_EXCEPTION( frame_c0f5be1b35baf9f3b0c01ecf8ced538a );
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto frame_no_exception_1;

    frame_exception_exit_1:;

#if 0
    RESTORE_FRAME_EXCEPTION( frame_c0f5be1b35baf9f3b0c01ecf8ced538a );
#endif

    if ( exception_tb == NULL )
    {
        exception_tb = MAKE_TRACEBACK( frame_c0f5be1b35baf9f3b0c01ecf8ced538a, exception_lineno );
    }
    else if ( exception_tb->tb_frame != &frame_c0f5be1b35baf9f3b0c01ecf8ced538a->m_frame )
    {
        exception_tb = ADD_TRACEBACK( exception_tb, frame_c0f5be1b35baf9f3b0c01ecf8ced538a, exception_lineno );
    }

    // Attachs locals to frame if any.
    Nuitka_Frame_AttachLocals(
        (struct Nuitka_FrameObject *)frame_c0f5be1b35baf9f3b0c01ecf8ced538a,
        type_description_1,
        par_self,
        par_value
    );


    // Release cached frame.
    if ( frame_c0f5be1b35baf9f3b0c01ecf8ced538a == cache_frame_c0f5be1b35baf9f3b0c01ecf8ced538a )
    {
        Py_DECREF( frame_c0f5be1b35baf9f3b0c01ecf8ced538a );
    }
    cache_frame_c0f5be1b35baf9f3b0c01ecf8ced538a = NULL;

    assertFrameObject( frame_c0f5be1b35baf9f3b0c01ecf8ced538a );

    // Put the previous frame back on top.
    popFrameStack();

    // Return the error.
    goto try_except_handler_1;

    frame_no_exception_1:;
    tmp_return_value = Py_None;
    Py_INCREF( tmp_return_value );
    goto try_return_handler_1;
    // tried codes exits in all cases
    NUITKA_CANNOT_GET_HERE( plistlib$$$function_42_write_value );
    return NULL;
    // Return handler code:
    try_return_handler_1:;
    CHECK_OBJECT( (PyObject *)par_self );
    Py_DECREF( par_self );
    par_self = NULL;

    CHECK_OBJECT( (PyObject *)par_value );
    Py_DECREF( par_value );
    par_value = NULL;

    goto function_return_exit;
    // Exception handler code:
    try_except_handler_1:;
    exception_keeper_type_2 = exception_type;
    exception_keeper_value_2 = exception_value;
    exception_keeper_tb_2 = exception_tb;
    exception_keeper_lineno_2 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    CHECK_OBJECT( (PyObject *)par_self );
    Py_DECREF( par_self );
    par_self = NULL;

    CHECK_OBJECT( (PyObject *)par_value );
    Py_DECREF( par_value );
    par_value = NULL;

    // Re-raise.
    exception_type = exception_keeper_type_2;
    exception_value = exception_keeper_value_2;
    exception_tb = exception_keeper_tb_2;
    exception_lineno = exception_keeper_lineno_2;

    goto function_exception_exit;
    // End of try:

    // Return statement must have exited already.
    NUITKA_CANNOT_GET_HERE( plistlib$$$function_42_write_value );
    return NULL;

function_exception_exit:
    assert( exception_type );
    RESTORE_ERROR_OCCURRED( exception_type, exception_value, exception_tb );

    return NULL;

function_return_exit:
   // Function cleanup code if any.


   // Actual function exit with return value, making sure we did not make
   // the error status worse despite non-NULL return.
   CHECK_OBJECT( tmp_return_value );
   assert( had_error || !ERROR_OCCURRED() );
   return tmp_return_value;
}


static PyObject *impl_plistlib$$$function_43_write_data( struct Nuitka_FunctionObject const *self, PyObject **python_pars )
{
    // Preserve error status for checks
#ifndef __NUITKA_NO_ASSERT__
    NUITKA_MAY_BE_UNUSED bool had_error = ERROR_OCCURRED();
#endif

    // Local variable declarations.
    PyObject *par_self = python_pars[ 0 ];
    PyObject *par_data = python_pars[ 1 ];
    struct Nuitka_FrameObject *frame_463289b78eb680a3e5594916603300dd;
    NUITKA_MAY_BE_UNUSED char const *type_description_1 = NULL;
    PyObject *exception_type = NULL;
    PyObject *exception_value = NULL;
    PyTracebackObject *exception_tb = NULL;
    NUITKA_MAY_BE_UNUSED int exception_lineno = 0;
    static struct Nuitka_FrameObject *cache_frame_463289b78eb680a3e5594916603300dd = NULL;
    PyObject *tmp_return_value = NULL;
    PyObject *exception_keeper_type_1;
    PyObject *exception_keeper_value_1;
    PyTracebackObject *exception_keeper_tb_1;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_1;

    // Actual function body.
    // Tried code:
    MAKE_OR_REUSE_FRAME( cache_frame_463289b78eb680a3e5594916603300dd, codeobj_463289b78eb680a3e5594916603300dd, module_plistlib, sizeof(void *)+sizeof(void *) );
    frame_463289b78eb680a3e5594916603300dd = cache_frame_463289b78eb680a3e5594916603300dd;

    // Push the new frame as the currently active one.
    pushFrameStack( frame_463289b78eb680a3e5594916603300dd );

    // Mark the frame object as in use, ref count 1 will be up for reuse.
    assert( Py_REFCNT( frame_463289b78eb680a3e5594916603300dd ) == 2 ); // Frame stack

    // Framed code:
    {
        PyObject *tmp_called_name_1;
        PyObject *tmp_source_name_1;
        PyObject *tmp_call_result_1;
        PyObject *tmp_args_element_name_1;
        PyObject *tmp_source_name_2;
        CHECK_OBJECT( par_self );
        tmp_source_name_1 = par_self;
        tmp_called_name_1 = LOOKUP_ATTRIBUTE( tmp_source_name_1, const_str_plain_write_bytes );
        if ( tmp_called_name_1 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 443;
            type_description_1 = "oo";
            goto frame_exception_exit_1;
        }
        CHECK_OBJECT( par_data );
        tmp_source_name_2 = par_data;
        tmp_args_element_name_1 = LOOKUP_ATTRIBUTE( tmp_source_name_2, const_str_plain_data );
        if ( tmp_args_element_name_1 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
            Py_DECREF( tmp_called_name_1 );

            exception_lineno = 443;
            type_description_1 = "oo";
            goto frame_exception_exit_1;
        }
        frame_463289b78eb680a3e5594916603300dd->m_frame.f_lineno = 443;
        {
            PyObject *call_args[] = { tmp_args_element_name_1 };
            tmp_call_result_1 = CALL_FUNCTION_WITH_ARGS1( tmp_called_name_1, call_args );
        }

        Py_DECREF( tmp_called_name_1 );
        Py_DECREF( tmp_args_element_name_1 );
        if ( tmp_call_result_1 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 443;
            type_description_1 = "oo";
            goto frame_exception_exit_1;
        }
        Py_DECREF( tmp_call_result_1 );
    }

#if 0
    RESTORE_FRAME_EXCEPTION( frame_463289b78eb680a3e5594916603300dd );
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto frame_no_exception_1;

    frame_exception_exit_1:;

#if 0
    RESTORE_FRAME_EXCEPTION( frame_463289b78eb680a3e5594916603300dd );
#endif

    if ( exception_tb == NULL )
    {
        exception_tb = MAKE_TRACEBACK( frame_463289b78eb680a3e5594916603300dd, exception_lineno );
    }
    else if ( exception_tb->tb_frame != &frame_463289b78eb680a3e5594916603300dd->m_frame )
    {
        exception_tb = ADD_TRACEBACK( exception_tb, frame_463289b78eb680a3e5594916603300dd, exception_lineno );
    }

    // Attachs locals to frame if any.
    Nuitka_Frame_AttachLocals(
        (struct Nuitka_FrameObject *)frame_463289b78eb680a3e5594916603300dd,
        type_description_1,
        par_self,
        par_data
    );


    // Release cached frame.
    if ( frame_463289b78eb680a3e5594916603300dd == cache_frame_463289b78eb680a3e5594916603300dd )
    {
        Py_DECREF( frame_463289b78eb680a3e5594916603300dd );
    }
    cache_frame_463289b78eb680a3e5594916603300dd = NULL;

    assertFrameObject( frame_463289b78eb680a3e5594916603300dd );

    // Put the previous frame back on top.
    popFrameStack();

    // Return the error.
    goto try_except_handler_1;

    frame_no_exception_1:;
    tmp_return_value = Py_None;
    Py_INCREF( tmp_return_value );
    goto try_return_handler_1;
    // tried codes exits in all cases
    NUITKA_CANNOT_GET_HERE( plistlib$$$function_43_write_data );
    return NULL;
    // Return handler code:
    try_return_handler_1:;
    CHECK_OBJECT( (PyObject *)par_self );
    Py_DECREF( par_self );
    par_self = NULL;

    CHECK_OBJECT( (PyObject *)par_data );
    Py_DECREF( par_data );
    par_data = NULL;

    goto function_return_exit;
    // Exception handler code:
    try_except_handler_1:;
    exception_keeper_type_1 = exception_type;
    exception_keeper_value_1 = exception_value;
    exception_keeper_tb_1 = exception_tb;
    exception_keeper_lineno_1 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    CHECK_OBJECT( (PyObject *)par_self );
    Py_DECREF( par_self );
    par_self = NULL;

    CHECK_OBJECT( (PyObject *)par_data );
    Py_DECREF( par_data );
    par_data = NULL;

    // Re-raise.
    exception_type = exception_keeper_type_1;
    exception_value = exception_keeper_value_1;
    exception_tb = exception_keeper_tb_1;
    exception_lineno = exception_keeper_lineno_1;

    goto function_exception_exit;
    // End of try:

    // Return statement must have exited already.
    NUITKA_CANNOT_GET_HERE( plistlib$$$function_43_write_data );
    return NULL;

function_exception_exit:
    assert( exception_type );
    RESTORE_ERROR_OCCURRED( exception_type, exception_value, exception_tb );

    return NULL;

function_return_exit:
   // Function cleanup code if any.


   // Actual function exit with return value, making sure we did not make
   // the error status worse despite non-NULL return.
   CHECK_OBJECT( tmp_return_value );
   assert( had_error || !ERROR_OCCURRED() );
   return tmp_return_value;
}


static PyObject *impl_plistlib$$$function_44_write_bytes( struct Nuitka_FunctionObject const *self, PyObject **python_pars )
{
    // Preserve error status for checks
#ifndef __NUITKA_NO_ASSERT__
    NUITKA_MAY_BE_UNUSED bool had_error = ERROR_OCCURRED();
#endif

    // Local variable declarations.
    PyObject *par_self = python_pars[ 0 ];
    PyObject *par_data = python_pars[ 1 ];
    PyObject *var_maxlinelength = NULL;
    PyObject *var_line = NULL;
    PyObject *tmp_for_loop_1__for_iterator = NULL;
    PyObject *tmp_for_loop_1__iter_value = NULL;
    PyObject *tmp_inplace_assign_attr_1__end = NULL;
    PyObject *tmp_inplace_assign_attr_1__start = NULL;
    PyObject *tmp_inplace_assign_attr_2__end = NULL;
    PyObject *tmp_inplace_assign_attr_2__start = NULL;
    struct Nuitka_FrameObject *frame_398c2ead7dab203b363086ad8619c7ac;
    NUITKA_MAY_BE_UNUSED char const *type_description_1 = NULL;
    PyObject *exception_type = NULL;
    PyObject *exception_value = NULL;
    PyTracebackObject *exception_tb = NULL;
    NUITKA_MAY_BE_UNUSED int exception_lineno = 0;
    bool tmp_result;
    PyObject *exception_keeper_type_1;
    PyObject *exception_keeper_value_1;
    PyTracebackObject *exception_keeper_tb_1;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_1;
    PyObject *exception_keeper_type_2;
    PyObject *exception_keeper_value_2;
    PyTracebackObject *exception_keeper_tb_2;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_2;
    PyObject *exception_keeper_type_3;
    PyObject *exception_keeper_value_3;
    PyTracebackObject *exception_keeper_tb_3;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_3;
    PyObject *exception_keeper_type_4;
    PyObject *exception_keeper_value_4;
    PyTracebackObject *exception_keeper_tb_4;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_4;
    PyObject *exception_keeper_type_5;
    PyObject *exception_keeper_value_5;
    PyTracebackObject *exception_keeper_tb_5;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_5;
    static struct Nuitka_FrameObject *cache_frame_398c2ead7dab203b363086ad8619c7ac = NULL;
    PyObject *tmp_return_value = NULL;
    PyObject *exception_keeper_type_6;
    PyObject *exception_keeper_value_6;
    PyTracebackObject *exception_keeper_tb_6;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_6;

    // Actual function body.
    // Tried code:
    MAKE_OR_REUSE_FRAME( cache_frame_398c2ead7dab203b363086ad8619c7ac, codeobj_398c2ead7dab203b363086ad8619c7ac, module_plistlib, sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *) );
    frame_398c2ead7dab203b363086ad8619c7ac = cache_frame_398c2ead7dab203b363086ad8619c7ac;

    // Push the new frame as the currently active one.
    pushFrameStack( frame_398c2ead7dab203b363086ad8619c7ac );

    // Mark the frame object as in use, ref count 1 will be up for reuse.
    assert( Py_REFCNT( frame_398c2ead7dab203b363086ad8619c7ac ) == 2 ); // Frame stack

    // Framed code:
    {
        PyObject *tmp_called_instance_1;
        PyObject *tmp_call_result_1;
        CHECK_OBJECT( par_self );
        tmp_called_instance_1 = par_self;
        frame_398c2ead7dab203b363086ad8619c7ac->m_frame.f_lineno = 446;
        tmp_call_result_1 = CALL_METHOD_WITH_ARGS1( tmp_called_instance_1, const_str_plain_begin_element, &PyTuple_GET_ITEM( const_tuple_str_plain_data_tuple, 0 ) );

        if ( tmp_call_result_1 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 446;
            type_description_1 = "oooo";
            goto frame_exception_exit_1;
        }
        Py_DECREF( tmp_call_result_1 );
    }
    {
        PyObject *tmp_assign_source_1;
        PyObject *tmp_source_name_1;
        CHECK_OBJECT( par_self );
        tmp_source_name_1 = par_self;
        tmp_assign_source_1 = LOOKUP_ATTRIBUTE( tmp_source_name_1, const_str_plain__indent_level );
        if ( tmp_assign_source_1 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 447;
            type_description_1 = "oooo";
            goto frame_exception_exit_1;
        }
        assert( tmp_inplace_assign_attr_1__start == NULL );
        tmp_inplace_assign_attr_1__start = tmp_assign_source_1;
    }
    // Tried code:
    {
        PyObject *tmp_assign_source_2;
        PyObject *tmp_left_name_1;
        PyObject *tmp_right_name_1;
        CHECK_OBJECT( tmp_inplace_assign_attr_1__start );
        tmp_left_name_1 = tmp_inplace_assign_attr_1__start;
        tmp_right_name_1 = const_int_pos_1;
        tmp_assign_source_2 = BINARY_OPERATION( PyNumber_InPlaceSubtract, tmp_left_name_1, tmp_right_name_1 );
        if ( tmp_assign_source_2 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 447;
            type_description_1 = "oooo";
            goto try_except_handler_2;
        }
        assert( tmp_inplace_assign_attr_1__end == NULL );
        tmp_inplace_assign_attr_1__end = tmp_assign_source_2;
    }
    // Tried code:
    {
        PyObject *tmp_assattr_name_1;
        PyObject *tmp_assattr_target_1;
        CHECK_OBJECT( tmp_inplace_assign_attr_1__end );
        tmp_assattr_name_1 = tmp_inplace_assign_attr_1__end;
        CHECK_OBJECT( par_self );
        tmp_assattr_target_1 = par_self;
        tmp_result = SET_ATTRIBUTE( tmp_assattr_target_1, const_str_plain__indent_level, tmp_assattr_name_1 );
        if ( tmp_result == false )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 447;
            type_description_1 = "oooo";
            goto try_except_handler_3;
        }
    }
    goto try_end_1;
    // Exception handler code:
    try_except_handler_3:;
    exception_keeper_type_1 = exception_type;
    exception_keeper_value_1 = exception_value;
    exception_keeper_tb_1 = exception_tb;
    exception_keeper_lineno_1 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    CHECK_OBJECT( (PyObject *)tmp_inplace_assign_attr_1__end );
    Py_DECREF( tmp_inplace_assign_attr_1__end );
    tmp_inplace_assign_attr_1__end = NULL;

    // Re-raise.
    exception_type = exception_keeper_type_1;
    exception_value = exception_keeper_value_1;
    exception_tb = exception_keeper_tb_1;
    exception_lineno = exception_keeper_lineno_1;

    goto try_except_handler_2;
    // End of try:
    try_end_1:;
    goto try_end_2;
    // Exception handler code:
    try_except_handler_2:;
    exception_keeper_type_2 = exception_type;
    exception_keeper_value_2 = exception_value;
    exception_keeper_tb_2 = exception_tb;
    exception_keeper_lineno_2 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    CHECK_OBJECT( (PyObject *)tmp_inplace_assign_attr_1__start );
    Py_DECREF( tmp_inplace_assign_attr_1__start );
    tmp_inplace_assign_attr_1__start = NULL;

    // Re-raise.
    exception_type = exception_keeper_type_2;
    exception_value = exception_keeper_value_2;
    exception_tb = exception_keeper_tb_2;
    exception_lineno = exception_keeper_lineno_2;

    goto frame_exception_exit_1;
    // End of try:
    try_end_2:;
    CHECK_OBJECT( (PyObject *)tmp_inplace_assign_attr_1__end );
    Py_DECREF( tmp_inplace_assign_attr_1__end );
    tmp_inplace_assign_attr_1__end = NULL;

    CHECK_OBJECT( (PyObject *)tmp_inplace_assign_attr_1__start );
    Py_DECREF( tmp_inplace_assign_attr_1__start );
    tmp_inplace_assign_attr_1__start = NULL;

    {
        PyObject *tmp_assign_source_3;
        PyObject *tmp_called_name_1;
        PyObject *tmp_args_element_name_1;
        PyObject *tmp_args_element_name_2;
        PyObject *tmp_left_name_2;
        PyObject *tmp_right_name_2;
        PyObject *tmp_len_arg_1;
        PyObject *tmp_left_name_3;
        PyObject *tmp_called_instance_2;
        PyObject *tmp_source_name_2;
        PyObject *tmp_right_name_3;
        PyObject *tmp_source_name_3;
        tmp_called_name_1 = LOOKUP_BUILTIN( const_str_plain_max );
        assert( tmp_called_name_1 != NULL );
        tmp_args_element_name_1 = const_int_pos_16;
        tmp_left_name_2 = const_int_pos_76;
        CHECK_OBJECT( par_self );
        tmp_source_name_2 = par_self;
        tmp_called_instance_2 = LOOKUP_ATTRIBUTE( tmp_source_name_2, const_str_plain_indent );
        if ( tmp_called_instance_2 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 450;
            type_description_1 = "oooo";
            goto frame_exception_exit_1;
        }
        frame_398c2ead7dab203b363086ad8619c7ac->m_frame.f_lineno = 450;
        tmp_left_name_3 = CALL_METHOD_WITH_ARGS2( tmp_called_instance_2, const_str_plain_replace, &PyTuple_GET_ITEM( const_tuple_bytes_chr_9_bytes_digest_0687ed4919ad17fa1840df46e91d0910_tuple, 0 ) );

        Py_DECREF( tmp_called_instance_2 );
        if ( tmp_left_name_3 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 450;
            type_description_1 = "oooo";
            goto frame_exception_exit_1;
        }
        CHECK_OBJECT( par_self );
        tmp_source_name_3 = par_self;
        tmp_right_name_3 = LOOKUP_ATTRIBUTE( tmp_source_name_3, const_str_plain__indent_level );
        if ( tmp_right_name_3 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
            Py_DECREF( tmp_left_name_3 );

            exception_lineno = 450;
            type_description_1 = "oooo";
            goto frame_exception_exit_1;
        }
        tmp_len_arg_1 = BINARY_OPERATION_MUL( tmp_left_name_3, tmp_right_name_3 );
        Py_DECREF( tmp_left_name_3 );
        Py_DECREF( tmp_right_name_3 );
        if ( tmp_len_arg_1 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 450;
            type_description_1 = "oooo";
            goto frame_exception_exit_1;
        }
        tmp_right_name_2 = BUILTIN_LEN( tmp_len_arg_1 );
        Py_DECREF( tmp_len_arg_1 );
        if ( tmp_right_name_2 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 450;
            type_description_1 = "oooo";
            goto frame_exception_exit_1;
        }
        tmp_args_element_name_2 = BINARY_OPERATION_SUB( tmp_left_name_2, tmp_right_name_2 );
        Py_DECREF( tmp_right_name_2 );
        if ( tmp_args_element_name_2 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 450;
            type_description_1 = "oooo";
            goto frame_exception_exit_1;
        }
        frame_398c2ead7dab203b363086ad8619c7ac->m_frame.f_lineno = 448;
        {
            PyObject *call_args[] = { tmp_args_element_name_1, tmp_args_element_name_2 };
            tmp_assign_source_3 = CALL_FUNCTION_WITH_ARGS2( tmp_called_name_1, call_args );
        }

        Py_DECREF( tmp_args_element_name_2 );
        if ( tmp_assign_source_3 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 448;
            type_description_1 = "oooo";
            goto frame_exception_exit_1;
        }
        assert( var_maxlinelength == NULL );
        var_maxlinelength = tmp_assign_source_3;
    }
    {
        PyObject *tmp_assign_source_4;
        PyObject *tmp_iter_arg_1;
        PyObject *tmp_called_instance_3;
        PyObject *tmp_called_name_2;
        PyObject *tmp_mvar_value_1;
        PyObject *tmp_args_element_name_3;
        PyObject *tmp_args_element_name_4;
        tmp_mvar_value_1 = GET_STRING_DICT_VALUE( moduledict_plistlib, (Nuitka_StringObject *)const_str_plain__encode_base64 );

        if (unlikely( tmp_mvar_value_1 == NULL ))
        {
            tmp_mvar_value_1 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain__encode_base64 );
        }

        if ( tmp_mvar_value_1 == NULL )
        {

            exception_type = PyExc_NameError;
            Py_INCREF( exception_type );
            exception_value = PyUnicode_FromFormat( "name '%s' is not defined", "_encode_base64" );
            exception_tb = NULL;
            NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
            CHAIN_EXCEPTION( exception_value );

            exception_lineno = 452;
            type_description_1 = "oooo";
            goto frame_exception_exit_1;
        }

        tmp_called_name_2 = tmp_mvar_value_1;
        CHECK_OBJECT( par_data );
        tmp_args_element_name_3 = par_data;
        CHECK_OBJECT( var_maxlinelength );
        tmp_args_element_name_4 = var_maxlinelength;
        frame_398c2ead7dab203b363086ad8619c7ac->m_frame.f_lineno = 452;
        {
            PyObject *call_args[] = { tmp_args_element_name_3, tmp_args_element_name_4 };
            tmp_called_instance_3 = CALL_FUNCTION_WITH_ARGS2( tmp_called_name_2, call_args );
        }

        if ( tmp_called_instance_3 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 452;
            type_description_1 = "oooo";
            goto frame_exception_exit_1;
        }
        frame_398c2ead7dab203b363086ad8619c7ac->m_frame.f_lineno = 452;
        tmp_iter_arg_1 = CALL_METHOD_WITH_ARGS1( tmp_called_instance_3, const_str_plain_split, &PyTuple_GET_ITEM( const_tuple_bytes_chr_10_tuple, 0 ) );

        Py_DECREF( tmp_called_instance_3 );
        if ( tmp_iter_arg_1 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 452;
            type_description_1 = "oooo";
            goto frame_exception_exit_1;
        }
        tmp_assign_source_4 = MAKE_ITERATOR( tmp_iter_arg_1 );
        Py_DECREF( tmp_iter_arg_1 );
        if ( tmp_assign_source_4 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 452;
            type_description_1 = "oooo";
            goto frame_exception_exit_1;
        }
        assert( tmp_for_loop_1__for_iterator == NULL );
        tmp_for_loop_1__for_iterator = tmp_assign_source_4;
    }
    // Tried code:
    loop_start_1:;
    {
        PyObject *tmp_next_source_1;
        PyObject *tmp_assign_source_5;
        CHECK_OBJECT( tmp_for_loop_1__for_iterator );
        tmp_next_source_1 = tmp_for_loop_1__for_iterator;
        tmp_assign_source_5 = ITERATOR_NEXT( tmp_next_source_1 );
        if ( tmp_assign_source_5 == NULL )
        {
            if ( CHECK_AND_CLEAR_STOP_ITERATION_OCCURRED() )
            {

                goto loop_end_1;
            }
            else
            {

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
                type_description_1 = "oooo";
                exception_lineno = 452;
                goto try_except_handler_4;
            }
        }

        {
            PyObject *old = tmp_for_loop_1__iter_value;
            tmp_for_loop_1__iter_value = tmp_assign_source_5;
            Py_XDECREF( old );
        }

    }
    {
        PyObject *tmp_assign_source_6;
        CHECK_OBJECT( tmp_for_loop_1__iter_value );
        tmp_assign_source_6 = tmp_for_loop_1__iter_value;
        {
            PyObject *old = var_line;
            var_line = tmp_assign_source_6;
            Py_INCREF( var_line );
            Py_XDECREF( old );
        }

    }
    {
        nuitka_bool tmp_condition_result_1;
        int tmp_truth_name_1;
        CHECK_OBJECT( var_line );
        tmp_truth_name_1 = CHECK_IF_TRUE( var_line );
        if ( tmp_truth_name_1 == -1 )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 453;
            type_description_1 = "oooo";
            goto try_except_handler_4;
        }
        tmp_condition_result_1 = tmp_truth_name_1 == 1 ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
        if ( tmp_condition_result_1 == NUITKA_BOOL_TRUE )
        {
            goto branch_yes_1;
        }
        else
        {
            goto branch_no_1;
        }
        branch_yes_1:;
        {
            PyObject *tmp_called_instance_4;
            PyObject *tmp_call_result_2;
            PyObject *tmp_args_element_name_5;
            CHECK_OBJECT( par_self );
            tmp_called_instance_4 = par_self;
            CHECK_OBJECT( var_line );
            tmp_args_element_name_5 = var_line;
            frame_398c2ead7dab203b363086ad8619c7ac->m_frame.f_lineno = 454;
            {
                PyObject *call_args[] = { tmp_args_element_name_5 };
                tmp_call_result_2 = CALL_METHOD_WITH_ARGS1( tmp_called_instance_4, const_str_plain_writeln, call_args );
            }

            if ( tmp_call_result_2 == NULL )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 454;
                type_description_1 = "oooo";
                goto try_except_handler_4;
            }
            Py_DECREF( tmp_call_result_2 );
        }
        branch_no_1:;
    }
    if ( CONSIDER_THREADING() == false )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 452;
        type_description_1 = "oooo";
        goto try_except_handler_4;
    }
    goto loop_start_1;
    loop_end_1:;
    goto try_end_3;
    // Exception handler code:
    try_except_handler_4:;
    exception_keeper_type_3 = exception_type;
    exception_keeper_value_3 = exception_value;
    exception_keeper_tb_3 = exception_tb;
    exception_keeper_lineno_3 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    Py_XDECREF( tmp_for_loop_1__iter_value );
    tmp_for_loop_1__iter_value = NULL;

    CHECK_OBJECT( (PyObject *)tmp_for_loop_1__for_iterator );
    Py_DECREF( tmp_for_loop_1__for_iterator );
    tmp_for_loop_1__for_iterator = NULL;

    // Re-raise.
    exception_type = exception_keeper_type_3;
    exception_value = exception_keeper_value_3;
    exception_tb = exception_keeper_tb_3;
    exception_lineno = exception_keeper_lineno_3;

    goto frame_exception_exit_1;
    // End of try:
    try_end_3:;
    Py_XDECREF( tmp_for_loop_1__iter_value );
    tmp_for_loop_1__iter_value = NULL;

    CHECK_OBJECT( (PyObject *)tmp_for_loop_1__for_iterator );
    Py_DECREF( tmp_for_loop_1__for_iterator );
    tmp_for_loop_1__for_iterator = NULL;

    {
        PyObject *tmp_assign_source_7;
        PyObject *tmp_source_name_4;
        CHECK_OBJECT( par_self );
        tmp_source_name_4 = par_self;
        tmp_assign_source_7 = LOOKUP_ATTRIBUTE( tmp_source_name_4, const_str_plain__indent_level );
        if ( tmp_assign_source_7 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 455;
            type_description_1 = "oooo";
            goto frame_exception_exit_1;
        }
        assert( tmp_inplace_assign_attr_2__start == NULL );
        tmp_inplace_assign_attr_2__start = tmp_assign_source_7;
    }
    // Tried code:
    {
        PyObject *tmp_assign_source_8;
        PyObject *tmp_left_name_4;
        PyObject *tmp_right_name_4;
        CHECK_OBJECT( tmp_inplace_assign_attr_2__start );
        tmp_left_name_4 = tmp_inplace_assign_attr_2__start;
        tmp_right_name_4 = const_int_pos_1;
        tmp_assign_source_8 = BINARY_OPERATION( PyNumber_InPlaceAdd, tmp_left_name_4, tmp_right_name_4 );
        if ( tmp_assign_source_8 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 455;
            type_description_1 = "oooo";
            goto try_except_handler_5;
        }
        assert( tmp_inplace_assign_attr_2__end == NULL );
        tmp_inplace_assign_attr_2__end = tmp_assign_source_8;
    }
    // Tried code:
    {
        PyObject *tmp_assattr_name_2;
        PyObject *tmp_assattr_target_2;
        CHECK_OBJECT( tmp_inplace_assign_attr_2__end );
        tmp_assattr_name_2 = tmp_inplace_assign_attr_2__end;
        CHECK_OBJECT( par_self );
        tmp_assattr_target_2 = par_self;
        tmp_result = SET_ATTRIBUTE( tmp_assattr_target_2, const_str_plain__indent_level, tmp_assattr_name_2 );
        if ( tmp_result == false )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 455;
            type_description_1 = "oooo";
            goto try_except_handler_6;
        }
    }
    goto try_end_4;
    // Exception handler code:
    try_except_handler_6:;
    exception_keeper_type_4 = exception_type;
    exception_keeper_value_4 = exception_value;
    exception_keeper_tb_4 = exception_tb;
    exception_keeper_lineno_4 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    CHECK_OBJECT( (PyObject *)tmp_inplace_assign_attr_2__end );
    Py_DECREF( tmp_inplace_assign_attr_2__end );
    tmp_inplace_assign_attr_2__end = NULL;

    // Re-raise.
    exception_type = exception_keeper_type_4;
    exception_value = exception_keeper_value_4;
    exception_tb = exception_keeper_tb_4;
    exception_lineno = exception_keeper_lineno_4;

    goto try_except_handler_5;
    // End of try:
    try_end_4:;
    goto try_end_5;
    // Exception handler code:
    try_except_handler_5:;
    exception_keeper_type_5 = exception_type;
    exception_keeper_value_5 = exception_value;
    exception_keeper_tb_5 = exception_tb;
    exception_keeper_lineno_5 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    CHECK_OBJECT( (PyObject *)tmp_inplace_assign_attr_2__start );
    Py_DECREF( tmp_inplace_assign_attr_2__start );
    tmp_inplace_assign_attr_2__start = NULL;

    // Re-raise.
    exception_type = exception_keeper_type_5;
    exception_value = exception_keeper_value_5;
    exception_tb = exception_keeper_tb_5;
    exception_lineno = exception_keeper_lineno_5;

    goto frame_exception_exit_1;
    // End of try:
    try_end_5:;
    CHECK_OBJECT( (PyObject *)tmp_inplace_assign_attr_2__end );
    Py_DECREF( tmp_inplace_assign_attr_2__end );
    tmp_inplace_assign_attr_2__end = NULL;

    CHECK_OBJECT( (PyObject *)tmp_inplace_assign_attr_2__start );
    Py_DECREF( tmp_inplace_assign_attr_2__start );
    tmp_inplace_assign_attr_2__start = NULL;

    {
        PyObject *tmp_called_instance_5;
        PyObject *tmp_call_result_3;
        CHECK_OBJECT( par_self );
        tmp_called_instance_5 = par_self;
        frame_398c2ead7dab203b363086ad8619c7ac->m_frame.f_lineno = 456;
        tmp_call_result_3 = CALL_METHOD_WITH_ARGS1( tmp_called_instance_5, const_str_plain_end_element, &PyTuple_GET_ITEM( const_tuple_str_plain_data_tuple, 0 ) );

        if ( tmp_call_result_3 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 456;
            type_description_1 = "oooo";
            goto frame_exception_exit_1;
        }
        Py_DECREF( tmp_call_result_3 );
    }

#if 0
    RESTORE_FRAME_EXCEPTION( frame_398c2ead7dab203b363086ad8619c7ac );
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto frame_no_exception_1;

    frame_exception_exit_1:;

#if 0
    RESTORE_FRAME_EXCEPTION( frame_398c2ead7dab203b363086ad8619c7ac );
#endif

    if ( exception_tb == NULL )
    {
        exception_tb = MAKE_TRACEBACK( frame_398c2ead7dab203b363086ad8619c7ac, exception_lineno );
    }
    else if ( exception_tb->tb_frame != &frame_398c2ead7dab203b363086ad8619c7ac->m_frame )
    {
        exception_tb = ADD_TRACEBACK( exception_tb, frame_398c2ead7dab203b363086ad8619c7ac, exception_lineno );
    }

    // Attachs locals to frame if any.
    Nuitka_Frame_AttachLocals(
        (struct Nuitka_FrameObject *)frame_398c2ead7dab203b363086ad8619c7ac,
        type_description_1,
        par_self,
        par_data,
        var_maxlinelength,
        var_line
    );


    // Release cached frame.
    if ( frame_398c2ead7dab203b363086ad8619c7ac == cache_frame_398c2ead7dab203b363086ad8619c7ac )
    {
        Py_DECREF( frame_398c2ead7dab203b363086ad8619c7ac );
    }
    cache_frame_398c2ead7dab203b363086ad8619c7ac = NULL;

    assertFrameObject( frame_398c2ead7dab203b363086ad8619c7ac );

    // Put the previous frame back on top.
    popFrameStack();

    // Return the error.
    goto try_except_handler_1;

    frame_no_exception_1:;
    tmp_return_value = Py_None;
    Py_INCREF( tmp_return_value );
    goto try_return_handler_1;
    // tried codes exits in all cases
    NUITKA_CANNOT_GET_HERE( plistlib$$$function_44_write_bytes );
    return NULL;
    // Return handler code:
    try_return_handler_1:;
    CHECK_OBJECT( (PyObject *)par_self );
    Py_DECREF( par_self );
    par_self = NULL;

    CHECK_OBJECT( (PyObject *)par_data );
    Py_DECREF( par_data );
    par_data = NULL;

    CHECK_OBJECT( (PyObject *)var_maxlinelength );
    Py_DECREF( var_maxlinelength );
    var_maxlinelength = NULL;

    Py_XDECREF( var_line );
    var_line = NULL;

    goto function_return_exit;
    // Exception handler code:
    try_except_handler_1:;
    exception_keeper_type_6 = exception_type;
    exception_keeper_value_6 = exception_value;
    exception_keeper_tb_6 = exception_tb;
    exception_keeper_lineno_6 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    CHECK_OBJECT( (PyObject *)par_self );
    Py_DECREF( par_self );
    par_self = NULL;

    CHECK_OBJECT( (PyObject *)par_data );
    Py_DECREF( par_data );
    par_data = NULL;

    Py_XDECREF( var_maxlinelength );
    var_maxlinelength = NULL;

    Py_XDECREF( var_line );
    var_line = NULL;

    // Re-raise.
    exception_type = exception_keeper_type_6;
    exception_value = exception_keeper_value_6;
    exception_tb = exception_keeper_tb_6;
    exception_lineno = exception_keeper_lineno_6;

    goto function_exception_exit;
    // End of try:

    // Return statement must have exited already.
    NUITKA_CANNOT_GET_HERE( plistlib$$$function_44_write_bytes );
    return NULL;

function_exception_exit:
    assert( exception_type );
    RESTORE_ERROR_OCCURRED( exception_type, exception_value, exception_tb );

    return NULL;

function_return_exit:
   // Function cleanup code if any.


   // Actual function exit with return value, making sure we did not make
   // the error status worse despite non-NULL return.
   CHECK_OBJECT( tmp_return_value );
   assert( had_error || !ERROR_OCCURRED() );
   return tmp_return_value;
}


static PyObject *impl_plistlib$$$function_45_write_dict( struct Nuitka_FunctionObject const *self, PyObject **python_pars )
{
    // Preserve error status for checks
#ifndef __NUITKA_NO_ASSERT__
    NUITKA_MAY_BE_UNUSED bool had_error = ERROR_OCCURRED();
#endif

    // Local variable declarations.
    PyObject *par_self = python_pars[ 0 ];
    PyObject *par_d = python_pars[ 1 ];
    PyObject *var_items = NULL;
    PyObject *var_key = NULL;
    PyObject *var_value = NULL;
    PyObject *tmp_for_loop_1__for_iterator = NULL;
    PyObject *tmp_for_loop_1__iter_value = NULL;
    PyObject *tmp_tuple_unpack_1__element_1 = NULL;
    PyObject *tmp_tuple_unpack_1__element_2 = NULL;
    PyObject *tmp_tuple_unpack_1__source_iter = NULL;
    struct Nuitka_FrameObject *frame_4e13ffd4d8633b9daf5c9ed811ff8fef;
    NUITKA_MAY_BE_UNUSED char const *type_description_1 = NULL;
    PyObject *exception_type = NULL;
    PyObject *exception_value = NULL;
    PyTracebackObject *exception_tb = NULL;
    NUITKA_MAY_BE_UNUSED int exception_lineno = 0;
    PyObject *tmp_iterator_attempt;
    PyObject *exception_keeper_type_1;
    PyObject *exception_keeper_value_1;
    PyTracebackObject *exception_keeper_tb_1;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_1;
    PyObject *exception_keeper_type_2;
    PyObject *exception_keeper_value_2;
    PyTracebackObject *exception_keeper_tb_2;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_2;
    int tmp_res;
    PyObject *exception_keeper_type_3;
    PyObject *exception_keeper_value_3;
    PyTracebackObject *exception_keeper_tb_3;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_3;
    static struct Nuitka_FrameObject *cache_frame_4e13ffd4d8633b9daf5c9ed811ff8fef = NULL;
    PyObject *tmp_return_value = NULL;
    PyObject *exception_keeper_type_4;
    PyObject *exception_keeper_value_4;
    PyTracebackObject *exception_keeper_tb_4;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_4;

    // Actual function body.
    // Tried code:
    MAKE_OR_REUSE_FRAME( cache_frame_4e13ffd4d8633b9daf5c9ed811ff8fef, codeobj_4e13ffd4d8633b9daf5c9ed811ff8fef, module_plistlib, sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *) );
    frame_4e13ffd4d8633b9daf5c9ed811ff8fef = cache_frame_4e13ffd4d8633b9daf5c9ed811ff8fef;

    // Push the new frame as the currently active one.
    pushFrameStack( frame_4e13ffd4d8633b9daf5c9ed811ff8fef );

    // Mark the frame object as in use, ref count 1 will be up for reuse.
    assert( Py_REFCNT( frame_4e13ffd4d8633b9daf5c9ed811ff8fef ) == 2 ); // Frame stack

    // Framed code:
    {
        nuitka_bool tmp_condition_result_1;
        int tmp_truth_name_1;
        CHECK_OBJECT( par_d );
        tmp_truth_name_1 = CHECK_IF_TRUE( par_d );
        if ( tmp_truth_name_1 == -1 )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 459;
            type_description_1 = "ooooo";
            goto frame_exception_exit_1;
        }
        tmp_condition_result_1 = tmp_truth_name_1 == 1 ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
        if ( tmp_condition_result_1 == NUITKA_BOOL_TRUE )
        {
            goto branch_yes_1;
        }
        else
        {
            goto branch_no_1;
        }
        branch_yes_1:;
        {
            PyObject *tmp_called_instance_1;
            PyObject *tmp_call_result_1;
            CHECK_OBJECT( par_self );
            tmp_called_instance_1 = par_self;
            frame_4e13ffd4d8633b9daf5c9ed811ff8fef->m_frame.f_lineno = 460;
            tmp_call_result_1 = CALL_METHOD_WITH_ARGS1( tmp_called_instance_1, const_str_plain_begin_element, &PyTuple_GET_ITEM( const_tuple_str_plain_dict_tuple, 0 ) );

            if ( tmp_call_result_1 == NULL )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 460;
                type_description_1 = "ooooo";
                goto frame_exception_exit_1;
            }
            Py_DECREF( tmp_call_result_1 );
        }
        {
            nuitka_bool tmp_condition_result_2;
            PyObject *tmp_source_name_1;
            PyObject *tmp_attribute_value_1;
            int tmp_truth_name_2;
            CHECK_OBJECT( par_self );
            tmp_source_name_1 = par_self;
            tmp_attribute_value_1 = LOOKUP_ATTRIBUTE( tmp_source_name_1, const_str_plain__sort_keys );
            if ( tmp_attribute_value_1 == NULL )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 461;
                type_description_1 = "ooooo";
                goto frame_exception_exit_1;
            }
            tmp_truth_name_2 = CHECK_IF_TRUE( tmp_attribute_value_1 );
            if ( tmp_truth_name_2 == -1 )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
                Py_DECREF( tmp_attribute_value_1 );

                exception_lineno = 461;
                type_description_1 = "ooooo";
                goto frame_exception_exit_1;
            }
            tmp_condition_result_2 = tmp_truth_name_2 == 1 ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
            Py_DECREF( tmp_attribute_value_1 );
            if ( tmp_condition_result_2 == NUITKA_BOOL_TRUE )
            {
                goto branch_yes_2;
            }
            else
            {
                goto branch_no_2;
            }
            branch_yes_2:;
            {
                PyObject *tmp_assign_source_1;
                PyObject *tmp_called_name_1;
                PyObject *tmp_args_element_name_1;
                PyObject *tmp_called_instance_2;
                tmp_called_name_1 = LOOKUP_BUILTIN( const_str_plain_sorted );
                assert( tmp_called_name_1 != NULL );
                CHECK_OBJECT( par_d );
                tmp_called_instance_2 = par_d;
                frame_4e13ffd4d8633b9daf5c9ed811ff8fef->m_frame.f_lineno = 462;
                tmp_args_element_name_1 = CALL_METHOD_NO_ARGS( tmp_called_instance_2, const_str_plain_items );
                if ( tmp_args_element_name_1 == NULL )
                {
                    assert( ERROR_OCCURRED() );

                    FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                    exception_lineno = 462;
                    type_description_1 = "ooooo";
                    goto frame_exception_exit_1;
                }
                frame_4e13ffd4d8633b9daf5c9ed811ff8fef->m_frame.f_lineno = 462;
                {
                    PyObject *call_args[] = { tmp_args_element_name_1 };
                    tmp_assign_source_1 = CALL_FUNCTION_WITH_ARGS1( tmp_called_name_1, call_args );
                }

                Py_DECREF( tmp_args_element_name_1 );
                if ( tmp_assign_source_1 == NULL )
                {
                    assert( ERROR_OCCURRED() );

                    FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                    exception_lineno = 462;
                    type_description_1 = "ooooo";
                    goto frame_exception_exit_1;
                }
                assert( var_items == NULL );
                var_items = tmp_assign_source_1;
            }
            goto branch_end_2;
            branch_no_2:;
            {
                PyObject *tmp_assign_source_2;
                PyObject *tmp_called_instance_3;
                CHECK_OBJECT( par_d );
                tmp_called_instance_3 = par_d;
                frame_4e13ffd4d8633b9daf5c9ed811ff8fef->m_frame.f_lineno = 464;
                tmp_assign_source_2 = CALL_METHOD_NO_ARGS( tmp_called_instance_3, const_str_plain_items );
                if ( tmp_assign_source_2 == NULL )
                {
                    assert( ERROR_OCCURRED() );

                    FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                    exception_lineno = 464;
                    type_description_1 = "ooooo";
                    goto frame_exception_exit_1;
                }
                assert( var_items == NULL );
                var_items = tmp_assign_source_2;
            }
            branch_end_2:;
        }
        {
            PyObject *tmp_assign_source_3;
            PyObject *tmp_iter_arg_1;
            CHECK_OBJECT( var_items );
            tmp_iter_arg_1 = var_items;
            tmp_assign_source_3 = MAKE_ITERATOR( tmp_iter_arg_1 );
            if ( tmp_assign_source_3 == NULL )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 466;
                type_description_1 = "ooooo";
                goto frame_exception_exit_1;
            }
            assert( tmp_for_loop_1__for_iterator == NULL );
            tmp_for_loop_1__for_iterator = tmp_assign_source_3;
        }
        // Tried code:
        loop_start_1:;
        {
            PyObject *tmp_next_source_1;
            PyObject *tmp_assign_source_4;
            CHECK_OBJECT( tmp_for_loop_1__for_iterator );
            tmp_next_source_1 = tmp_for_loop_1__for_iterator;
            tmp_assign_source_4 = ITERATOR_NEXT( tmp_next_source_1 );
            if ( tmp_assign_source_4 == NULL )
            {
                if ( CHECK_AND_CLEAR_STOP_ITERATION_OCCURRED() )
                {

                    goto loop_end_1;
                }
                else
                {

                    FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
                    type_description_1 = "ooooo";
                    exception_lineno = 466;
                    goto try_except_handler_2;
                }
            }

            {
                PyObject *old = tmp_for_loop_1__iter_value;
                tmp_for_loop_1__iter_value = tmp_assign_source_4;
                Py_XDECREF( old );
            }

        }
        // Tried code:
        {
            PyObject *tmp_assign_source_5;
            PyObject *tmp_iter_arg_2;
            CHECK_OBJECT( tmp_for_loop_1__iter_value );
            tmp_iter_arg_2 = tmp_for_loop_1__iter_value;
            tmp_assign_source_5 = MAKE_UNPACK_ITERATOR( tmp_iter_arg_2 );
            if ( tmp_assign_source_5 == NULL )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 466;
                type_description_1 = "ooooo";
                goto try_except_handler_3;
            }
            {
                PyObject *old = tmp_tuple_unpack_1__source_iter;
                tmp_tuple_unpack_1__source_iter = tmp_assign_source_5;
                Py_XDECREF( old );
            }

        }
        // Tried code:
        {
            PyObject *tmp_assign_source_6;
            PyObject *tmp_unpack_1;
            CHECK_OBJECT( tmp_tuple_unpack_1__source_iter );
            tmp_unpack_1 = tmp_tuple_unpack_1__source_iter;
            tmp_assign_source_6 = UNPACK_NEXT( tmp_unpack_1, 0, 2 );
            if ( tmp_assign_source_6 == NULL )
            {
                if ( !ERROR_OCCURRED() )
                {
                    exception_type = PyExc_StopIteration;
                    Py_INCREF( exception_type );
                    exception_value = NULL;
                    exception_tb = NULL;
                }
                else
                {
                    FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
                }


                type_description_1 = "ooooo";
                exception_lineno = 466;
                goto try_except_handler_4;
            }
            {
                PyObject *old = tmp_tuple_unpack_1__element_1;
                tmp_tuple_unpack_1__element_1 = tmp_assign_source_6;
                Py_XDECREF( old );
            }

        }
        {
            PyObject *tmp_assign_source_7;
            PyObject *tmp_unpack_2;
            CHECK_OBJECT( tmp_tuple_unpack_1__source_iter );
            tmp_unpack_2 = tmp_tuple_unpack_1__source_iter;
            tmp_assign_source_7 = UNPACK_NEXT( tmp_unpack_2, 1, 2 );
            if ( tmp_assign_source_7 == NULL )
            {
                if ( !ERROR_OCCURRED() )
                {
                    exception_type = PyExc_StopIteration;
                    Py_INCREF( exception_type );
                    exception_value = NULL;
                    exception_tb = NULL;
                }
                else
                {
                    FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
                }


                type_description_1 = "ooooo";
                exception_lineno = 466;
                goto try_except_handler_4;
            }
            {
                PyObject *old = tmp_tuple_unpack_1__element_2;
                tmp_tuple_unpack_1__element_2 = tmp_assign_source_7;
                Py_XDECREF( old );
            }

        }
        {
            PyObject *tmp_iterator_name_1;
            CHECK_OBJECT( tmp_tuple_unpack_1__source_iter );
            tmp_iterator_name_1 = tmp_tuple_unpack_1__source_iter;
            // Check if iterator has left-over elements.
            CHECK_OBJECT( tmp_iterator_name_1 ); assert( HAS_ITERNEXT( tmp_iterator_name_1 ) );

            tmp_iterator_attempt = (*Py_TYPE( tmp_iterator_name_1 )->tp_iternext)( tmp_iterator_name_1 );

            if (likely( tmp_iterator_attempt == NULL ))
            {
                PyObject *error = GET_ERROR_OCCURRED();

                if ( error != NULL )
                {
                    if ( EXCEPTION_MATCH_BOOL_SINGLE( error, PyExc_StopIteration ))
                    {
                        CLEAR_ERROR_OCCURRED();
                    }
                    else
                    {
                        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );

                        type_description_1 = "ooooo";
                        exception_lineno = 466;
                        goto try_except_handler_4;
                    }
                }
            }
            else
            {
                Py_DECREF( tmp_iterator_attempt );

                // TODO: Could avoid PyErr_Format.
#if PYTHON_VERSION < 300
                PyErr_Format( PyExc_ValueError, "too many values to unpack" );
#else
                PyErr_Format( PyExc_ValueError, "too many values to unpack (expected 2)" );
#endif
                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );

                type_description_1 = "ooooo";
                exception_lineno = 466;
                goto try_except_handler_4;
            }
        }
        goto try_end_1;
        // Exception handler code:
        try_except_handler_4:;
        exception_keeper_type_1 = exception_type;
        exception_keeper_value_1 = exception_value;
        exception_keeper_tb_1 = exception_tb;
        exception_keeper_lineno_1 = exception_lineno;
        exception_type = NULL;
        exception_value = NULL;
        exception_tb = NULL;
        exception_lineno = 0;

        CHECK_OBJECT( (PyObject *)tmp_tuple_unpack_1__source_iter );
        Py_DECREF( tmp_tuple_unpack_1__source_iter );
        tmp_tuple_unpack_1__source_iter = NULL;

        // Re-raise.
        exception_type = exception_keeper_type_1;
        exception_value = exception_keeper_value_1;
        exception_tb = exception_keeper_tb_1;
        exception_lineno = exception_keeper_lineno_1;

        goto try_except_handler_3;
        // End of try:
        try_end_1:;
        goto try_end_2;
        // Exception handler code:
        try_except_handler_3:;
        exception_keeper_type_2 = exception_type;
        exception_keeper_value_2 = exception_value;
        exception_keeper_tb_2 = exception_tb;
        exception_keeper_lineno_2 = exception_lineno;
        exception_type = NULL;
        exception_value = NULL;
        exception_tb = NULL;
        exception_lineno = 0;

        Py_XDECREF( tmp_tuple_unpack_1__element_1 );
        tmp_tuple_unpack_1__element_1 = NULL;

        Py_XDECREF( tmp_tuple_unpack_1__element_2 );
        tmp_tuple_unpack_1__element_2 = NULL;

        // Re-raise.
        exception_type = exception_keeper_type_2;
        exception_value = exception_keeper_value_2;
        exception_tb = exception_keeper_tb_2;
        exception_lineno = exception_keeper_lineno_2;

        goto try_except_handler_2;
        // End of try:
        try_end_2:;
        CHECK_OBJECT( (PyObject *)tmp_tuple_unpack_1__source_iter );
        Py_DECREF( tmp_tuple_unpack_1__source_iter );
        tmp_tuple_unpack_1__source_iter = NULL;

        {
            PyObject *tmp_assign_source_8;
            CHECK_OBJECT( tmp_tuple_unpack_1__element_1 );
            tmp_assign_source_8 = tmp_tuple_unpack_1__element_1;
            {
                PyObject *old = var_key;
                var_key = tmp_assign_source_8;
                Py_INCREF( var_key );
                Py_XDECREF( old );
            }

        }
        Py_XDECREF( tmp_tuple_unpack_1__element_1 );
        tmp_tuple_unpack_1__element_1 = NULL;

        {
            PyObject *tmp_assign_source_9;
            CHECK_OBJECT( tmp_tuple_unpack_1__element_2 );
            tmp_assign_source_9 = tmp_tuple_unpack_1__element_2;
            {
                PyObject *old = var_value;
                var_value = tmp_assign_source_9;
                Py_INCREF( var_value );
                Py_XDECREF( old );
            }

        }
        Py_XDECREF( tmp_tuple_unpack_1__element_2 );
        tmp_tuple_unpack_1__element_2 = NULL;

        {
            nuitka_bool tmp_condition_result_3;
            PyObject *tmp_operand_name_1;
            PyObject *tmp_isinstance_inst_1;
            PyObject *tmp_isinstance_cls_1;
            CHECK_OBJECT( var_key );
            tmp_isinstance_inst_1 = var_key;
            tmp_isinstance_cls_1 = (PyObject *)&PyUnicode_Type;
            tmp_res = Nuitka_IsInstance( tmp_isinstance_inst_1, tmp_isinstance_cls_1 );
            if ( tmp_res == -1 )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 467;
                type_description_1 = "ooooo";
                goto try_except_handler_2;
            }
            tmp_operand_name_1 = ( tmp_res != 0 ) ? Py_True : Py_False;
            tmp_res = CHECK_IF_TRUE( tmp_operand_name_1 );
            if ( tmp_res == -1 )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 467;
                type_description_1 = "ooooo";
                goto try_except_handler_2;
            }
            tmp_condition_result_3 = ( tmp_res == 0 ) ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
            if ( tmp_condition_result_3 == NUITKA_BOOL_TRUE )
            {
                goto branch_yes_3;
            }
            else
            {
                goto branch_no_3;
            }
            branch_yes_3:;
            {
                nuitka_bool tmp_condition_result_4;
                PyObject *tmp_source_name_2;
                PyObject *tmp_attribute_value_2;
                int tmp_truth_name_3;
                CHECK_OBJECT( par_self );
                tmp_source_name_2 = par_self;
                tmp_attribute_value_2 = LOOKUP_ATTRIBUTE( tmp_source_name_2, const_str_plain__skipkeys );
                if ( tmp_attribute_value_2 == NULL )
                {
                    assert( ERROR_OCCURRED() );

                    FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                    exception_lineno = 468;
                    type_description_1 = "ooooo";
                    goto try_except_handler_2;
                }
                tmp_truth_name_3 = CHECK_IF_TRUE( tmp_attribute_value_2 );
                if ( tmp_truth_name_3 == -1 )
                {
                    assert( ERROR_OCCURRED() );

                    FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
                    Py_DECREF( tmp_attribute_value_2 );

                    exception_lineno = 468;
                    type_description_1 = "ooooo";
                    goto try_except_handler_2;
                }
                tmp_condition_result_4 = tmp_truth_name_3 == 1 ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
                Py_DECREF( tmp_attribute_value_2 );
                if ( tmp_condition_result_4 == NUITKA_BOOL_TRUE )
                {
                    goto branch_yes_4;
                }
                else
                {
                    goto branch_no_4;
                }
                branch_yes_4:;
                goto loop_start_1;
                branch_no_4:;
            }
            {
                PyObject *tmp_raise_type_1;
                PyObject *tmp_make_exception_arg_1;
                tmp_make_exception_arg_1 = const_str_digest_e3c3d78d4d66a632c6ad68dc0fb31d57;
                frame_4e13ffd4d8633b9daf5c9ed811ff8fef->m_frame.f_lineno = 470;
                {
                    PyObject *call_args[] = { tmp_make_exception_arg_1 };
                    tmp_raise_type_1 = CALL_FUNCTION_WITH_ARGS1( PyExc_TypeError, call_args );
                }

                assert( !(tmp_raise_type_1 == NULL) );
                exception_type = tmp_raise_type_1;
                exception_lineno = 470;
                RAISE_EXCEPTION_WITH_TYPE( &exception_type, &exception_value, &exception_tb );
                type_description_1 = "ooooo";
                goto try_except_handler_2;
            }
            branch_no_3:;
        }
        {
            PyObject *tmp_called_instance_4;
            PyObject *tmp_call_result_2;
            PyObject *tmp_args_element_name_2;
            PyObject *tmp_args_element_name_3;
            CHECK_OBJECT( par_self );
            tmp_called_instance_4 = par_self;
            tmp_args_element_name_2 = const_str_plain_key;
            CHECK_OBJECT( var_key );
            tmp_args_element_name_3 = var_key;
            frame_4e13ffd4d8633b9daf5c9ed811ff8fef->m_frame.f_lineno = 471;
            {
                PyObject *call_args[] = { tmp_args_element_name_2, tmp_args_element_name_3 };
                tmp_call_result_2 = CALL_METHOD_WITH_ARGS2( tmp_called_instance_4, const_str_plain_simple_element, call_args );
            }

            if ( tmp_call_result_2 == NULL )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 471;
                type_description_1 = "ooooo";
                goto try_except_handler_2;
            }
            Py_DECREF( tmp_call_result_2 );
        }
        {
            PyObject *tmp_called_instance_5;
            PyObject *tmp_call_result_3;
            PyObject *tmp_args_element_name_4;
            CHECK_OBJECT( par_self );
            tmp_called_instance_5 = par_self;
            CHECK_OBJECT( var_value );
            tmp_args_element_name_4 = var_value;
            frame_4e13ffd4d8633b9daf5c9ed811ff8fef->m_frame.f_lineno = 472;
            {
                PyObject *call_args[] = { tmp_args_element_name_4 };
                tmp_call_result_3 = CALL_METHOD_WITH_ARGS1( tmp_called_instance_5, const_str_plain_write_value, call_args );
            }

            if ( tmp_call_result_3 == NULL )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 472;
                type_description_1 = "ooooo";
                goto try_except_handler_2;
            }
            Py_DECREF( tmp_call_result_3 );
        }
        if ( CONSIDER_THREADING() == false )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 466;
            type_description_1 = "ooooo";
            goto try_except_handler_2;
        }
        goto loop_start_1;
        loop_end_1:;
        goto try_end_3;
        // Exception handler code:
        try_except_handler_2:;
        exception_keeper_type_3 = exception_type;
        exception_keeper_value_3 = exception_value;
        exception_keeper_tb_3 = exception_tb;
        exception_keeper_lineno_3 = exception_lineno;
        exception_type = NULL;
        exception_value = NULL;
        exception_tb = NULL;
        exception_lineno = 0;

        Py_XDECREF( tmp_for_loop_1__iter_value );
        tmp_for_loop_1__iter_value = NULL;

        CHECK_OBJECT( (PyObject *)tmp_for_loop_1__for_iterator );
        Py_DECREF( tmp_for_loop_1__for_iterator );
        tmp_for_loop_1__for_iterator = NULL;

        // Re-raise.
        exception_type = exception_keeper_type_3;
        exception_value = exception_keeper_value_3;
        exception_tb = exception_keeper_tb_3;
        exception_lineno = exception_keeper_lineno_3;

        goto frame_exception_exit_1;
        // End of try:
        try_end_3:;
        Py_XDECREF( tmp_for_loop_1__iter_value );
        tmp_for_loop_1__iter_value = NULL;

        CHECK_OBJECT( (PyObject *)tmp_for_loop_1__for_iterator );
        Py_DECREF( tmp_for_loop_1__for_iterator );
        tmp_for_loop_1__for_iterator = NULL;

        {
            PyObject *tmp_called_instance_6;
            PyObject *tmp_call_result_4;
            CHECK_OBJECT( par_self );
            tmp_called_instance_6 = par_self;
            frame_4e13ffd4d8633b9daf5c9ed811ff8fef->m_frame.f_lineno = 473;
            tmp_call_result_4 = CALL_METHOD_WITH_ARGS1( tmp_called_instance_6, const_str_plain_end_element, &PyTuple_GET_ITEM( const_tuple_str_plain_dict_tuple, 0 ) );

            if ( tmp_call_result_4 == NULL )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 473;
                type_description_1 = "ooooo";
                goto frame_exception_exit_1;
            }
            Py_DECREF( tmp_call_result_4 );
        }
        goto branch_end_1;
        branch_no_1:;
        {
            PyObject *tmp_called_instance_7;
            PyObject *tmp_call_result_5;
            CHECK_OBJECT( par_self );
            tmp_called_instance_7 = par_self;
            frame_4e13ffd4d8633b9daf5c9ed811ff8fef->m_frame.f_lineno = 476;
            tmp_call_result_5 = CALL_METHOD_WITH_ARGS1( tmp_called_instance_7, const_str_plain_simple_element, &PyTuple_GET_ITEM( const_tuple_str_plain_dict_tuple, 0 ) );

            if ( tmp_call_result_5 == NULL )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 476;
                type_description_1 = "ooooo";
                goto frame_exception_exit_1;
            }
            Py_DECREF( tmp_call_result_5 );
        }
        branch_end_1:;
    }

#if 0
    RESTORE_FRAME_EXCEPTION( frame_4e13ffd4d8633b9daf5c9ed811ff8fef );
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto frame_no_exception_1;

    frame_exception_exit_1:;

#if 0
    RESTORE_FRAME_EXCEPTION( frame_4e13ffd4d8633b9daf5c9ed811ff8fef );
#endif

    if ( exception_tb == NULL )
    {
        exception_tb = MAKE_TRACEBACK( frame_4e13ffd4d8633b9daf5c9ed811ff8fef, exception_lineno );
    }
    else if ( exception_tb->tb_frame != &frame_4e13ffd4d8633b9daf5c9ed811ff8fef->m_frame )
    {
        exception_tb = ADD_TRACEBACK( exception_tb, frame_4e13ffd4d8633b9daf5c9ed811ff8fef, exception_lineno );
    }

    // Attachs locals to frame if any.
    Nuitka_Frame_AttachLocals(
        (struct Nuitka_FrameObject *)frame_4e13ffd4d8633b9daf5c9ed811ff8fef,
        type_description_1,
        par_self,
        par_d,
        var_items,
        var_key,
        var_value
    );


    // Release cached frame.
    if ( frame_4e13ffd4d8633b9daf5c9ed811ff8fef == cache_frame_4e13ffd4d8633b9daf5c9ed811ff8fef )
    {
        Py_DECREF( frame_4e13ffd4d8633b9daf5c9ed811ff8fef );
    }
    cache_frame_4e13ffd4d8633b9daf5c9ed811ff8fef = NULL;

    assertFrameObject( frame_4e13ffd4d8633b9daf5c9ed811ff8fef );

    // Put the previous frame back on top.
    popFrameStack();

    // Return the error.
    goto try_except_handler_1;

    frame_no_exception_1:;
    tmp_return_value = Py_None;
    Py_INCREF( tmp_return_value );
    goto try_return_handler_1;
    // tried codes exits in all cases
    NUITKA_CANNOT_GET_HERE( plistlib$$$function_45_write_dict );
    return NULL;
    // Return handler code:
    try_return_handler_1:;
    CHECK_OBJECT( (PyObject *)par_self );
    Py_DECREF( par_self );
    par_self = NULL;

    CHECK_OBJECT( (PyObject *)par_d );
    Py_DECREF( par_d );
    par_d = NULL;

    Py_XDECREF( var_items );
    var_items = NULL;

    Py_XDECREF( var_key );
    var_key = NULL;

    Py_XDECREF( var_value );
    var_value = NULL;

    goto function_return_exit;
    // Exception handler code:
    try_except_handler_1:;
    exception_keeper_type_4 = exception_type;
    exception_keeper_value_4 = exception_value;
    exception_keeper_tb_4 = exception_tb;
    exception_keeper_lineno_4 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    CHECK_OBJECT( (PyObject *)par_self );
    Py_DECREF( par_self );
    par_self = NULL;

    CHECK_OBJECT( (PyObject *)par_d );
    Py_DECREF( par_d );
    par_d = NULL;

    Py_XDECREF( var_items );
    var_items = NULL;

    Py_XDECREF( var_key );
    var_key = NULL;

    Py_XDECREF( var_value );
    var_value = NULL;

    // Re-raise.
    exception_type = exception_keeper_type_4;
    exception_value = exception_keeper_value_4;
    exception_tb = exception_keeper_tb_4;
    exception_lineno = exception_keeper_lineno_4;

    goto function_exception_exit;
    // End of try:

    // Return statement must have exited already.
    NUITKA_CANNOT_GET_HERE( plistlib$$$function_45_write_dict );
    return NULL;

function_exception_exit:
    assert( exception_type );
    RESTORE_ERROR_OCCURRED( exception_type, exception_value, exception_tb );

    return NULL;

function_return_exit:
   // Function cleanup code if any.


   // Actual function exit with return value, making sure we did not make
   // the error status worse despite non-NULL return.
   CHECK_OBJECT( tmp_return_value );
   assert( had_error || !ERROR_OCCURRED() );
   return tmp_return_value;
}


static PyObject *impl_plistlib$$$function_46_write_array( struct Nuitka_FunctionObject const *self, PyObject **python_pars )
{
    // Preserve error status for checks
#ifndef __NUITKA_NO_ASSERT__
    NUITKA_MAY_BE_UNUSED bool had_error = ERROR_OCCURRED();
#endif

    // Local variable declarations.
    PyObject *par_self = python_pars[ 0 ];
    PyObject *par_array = python_pars[ 1 ];
    PyObject *var_value = NULL;
    PyObject *tmp_for_loop_1__for_iterator = NULL;
    PyObject *tmp_for_loop_1__iter_value = NULL;
    struct Nuitka_FrameObject *frame_454dd373f5c99cba8da5eec2ae808a9a;
    NUITKA_MAY_BE_UNUSED char const *type_description_1 = NULL;
    PyObject *exception_type = NULL;
    PyObject *exception_value = NULL;
    PyTracebackObject *exception_tb = NULL;
    NUITKA_MAY_BE_UNUSED int exception_lineno = 0;
    PyObject *exception_keeper_type_1;
    PyObject *exception_keeper_value_1;
    PyTracebackObject *exception_keeper_tb_1;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_1;
    static struct Nuitka_FrameObject *cache_frame_454dd373f5c99cba8da5eec2ae808a9a = NULL;
    PyObject *tmp_return_value = NULL;
    PyObject *exception_keeper_type_2;
    PyObject *exception_keeper_value_2;
    PyTracebackObject *exception_keeper_tb_2;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_2;

    // Actual function body.
    // Tried code:
    MAKE_OR_REUSE_FRAME( cache_frame_454dd373f5c99cba8da5eec2ae808a9a, codeobj_454dd373f5c99cba8da5eec2ae808a9a, module_plistlib, sizeof(void *)+sizeof(void *)+sizeof(void *) );
    frame_454dd373f5c99cba8da5eec2ae808a9a = cache_frame_454dd373f5c99cba8da5eec2ae808a9a;

    // Push the new frame as the currently active one.
    pushFrameStack( frame_454dd373f5c99cba8da5eec2ae808a9a );

    // Mark the frame object as in use, ref count 1 will be up for reuse.
    assert( Py_REFCNT( frame_454dd373f5c99cba8da5eec2ae808a9a ) == 2 ); // Frame stack

    // Framed code:
    {
        nuitka_bool tmp_condition_result_1;
        int tmp_truth_name_1;
        CHECK_OBJECT( par_array );
        tmp_truth_name_1 = CHECK_IF_TRUE( par_array );
        if ( tmp_truth_name_1 == -1 )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 479;
            type_description_1 = "ooo";
            goto frame_exception_exit_1;
        }
        tmp_condition_result_1 = tmp_truth_name_1 == 1 ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
        if ( tmp_condition_result_1 == NUITKA_BOOL_TRUE )
        {
            goto branch_yes_1;
        }
        else
        {
            goto branch_no_1;
        }
        branch_yes_1:;
        {
            PyObject *tmp_called_instance_1;
            PyObject *tmp_call_result_1;
            CHECK_OBJECT( par_self );
            tmp_called_instance_1 = par_self;
            frame_454dd373f5c99cba8da5eec2ae808a9a->m_frame.f_lineno = 480;
            tmp_call_result_1 = CALL_METHOD_WITH_ARGS1( tmp_called_instance_1, const_str_plain_begin_element, &PyTuple_GET_ITEM( const_tuple_str_plain_array_tuple, 0 ) );

            if ( tmp_call_result_1 == NULL )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 480;
                type_description_1 = "ooo";
                goto frame_exception_exit_1;
            }
            Py_DECREF( tmp_call_result_1 );
        }
        {
            PyObject *tmp_assign_source_1;
            PyObject *tmp_iter_arg_1;
            CHECK_OBJECT( par_array );
            tmp_iter_arg_1 = par_array;
            tmp_assign_source_1 = MAKE_ITERATOR( tmp_iter_arg_1 );
            if ( tmp_assign_source_1 == NULL )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 481;
                type_description_1 = "ooo";
                goto frame_exception_exit_1;
            }
            assert( tmp_for_loop_1__for_iterator == NULL );
            tmp_for_loop_1__for_iterator = tmp_assign_source_1;
        }
        // Tried code:
        loop_start_1:;
        {
            PyObject *tmp_next_source_1;
            PyObject *tmp_assign_source_2;
            CHECK_OBJECT( tmp_for_loop_1__for_iterator );
            tmp_next_source_1 = tmp_for_loop_1__for_iterator;
            tmp_assign_source_2 = ITERATOR_NEXT( tmp_next_source_1 );
            if ( tmp_assign_source_2 == NULL )
            {
                if ( CHECK_AND_CLEAR_STOP_ITERATION_OCCURRED() )
                {

                    goto loop_end_1;
                }
                else
                {

                    FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
                    type_description_1 = "ooo";
                    exception_lineno = 481;
                    goto try_except_handler_2;
                }
            }

            {
                PyObject *old = tmp_for_loop_1__iter_value;
                tmp_for_loop_1__iter_value = tmp_assign_source_2;
                Py_XDECREF( old );
            }

        }
        {
            PyObject *tmp_assign_source_3;
            CHECK_OBJECT( tmp_for_loop_1__iter_value );
            tmp_assign_source_3 = tmp_for_loop_1__iter_value;
            {
                PyObject *old = var_value;
                var_value = tmp_assign_source_3;
                Py_INCREF( var_value );
                Py_XDECREF( old );
            }

        }
        {
            PyObject *tmp_called_instance_2;
            PyObject *tmp_call_result_2;
            PyObject *tmp_args_element_name_1;
            CHECK_OBJECT( par_self );
            tmp_called_instance_2 = par_self;
            CHECK_OBJECT( var_value );
            tmp_args_element_name_1 = var_value;
            frame_454dd373f5c99cba8da5eec2ae808a9a->m_frame.f_lineno = 482;
            {
                PyObject *call_args[] = { tmp_args_element_name_1 };
                tmp_call_result_2 = CALL_METHOD_WITH_ARGS1( tmp_called_instance_2, const_str_plain_write_value, call_args );
            }

            if ( tmp_call_result_2 == NULL )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 482;
                type_description_1 = "ooo";
                goto try_except_handler_2;
            }
            Py_DECREF( tmp_call_result_2 );
        }
        if ( CONSIDER_THREADING() == false )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 481;
            type_description_1 = "ooo";
            goto try_except_handler_2;
        }
        goto loop_start_1;
        loop_end_1:;
        goto try_end_1;
        // Exception handler code:
        try_except_handler_2:;
        exception_keeper_type_1 = exception_type;
        exception_keeper_value_1 = exception_value;
        exception_keeper_tb_1 = exception_tb;
        exception_keeper_lineno_1 = exception_lineno;
        exception_type = NULL;
        exception_value = NULL;
        exception_tb = NULL;
        exception_lineno = 0;

        Py_XDECREF( tmp_for_loop_1__iter_value );
        tmp_for_loop_1__iter_value = NULL;

        CHECK_OBJECT( (PyObject *)tmp_for_loop_1__for_iterator );
        Py_DECREF( tmp_for_loop_1__for_iterator );
        tmp_for_loop_1__for_iterator = NULL;

        // Re-raise.
        exception_type = exception_keeper_type_1;
        exception_value = exception_keeper_value_1;
        exception_tb = exception_keeper_tb_1;
        exception_lineno = exception_keeper_lineno_1;

        goto frame_exception_exit_1;
        // End of try:
        try_end_1:;
        Py_XDECREF( tmp_for_loop_1__iter_value );
        tmp_for_loop_1__iter_value = NULL;

        CHECK_OBJECT( (PyObject *)tmp_for_loop_1__for_iterator );
        Py_DECREF( tmp_for_loop_1__for_iterator );
        tmp_for_loop_1__for_iterator = NULL;

        {
            PyObject *tmp_called_instance_3;
            PyObject *tmp_call_result_3;
            CHECK_OBJECT( par_self );
            tmp_called_instance_3 = par_self;
            frame_454dd373f5c99cba8da5eec2ae808a9a->m_frame.f_lineno = 483;
            tmp_call_result_3 = CALL_METHOD_WITH_ARGS1( tmp_called_instance_3, const_str_plain_end_element, &PyTuple_GET_ITEM( const_tuple_str_plain_array_tuple, 0 ) );

            if ( tmp_call_result_3 == NULL )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 483;
                type_description_1 = "ooo";
                goto frame_exception_exit_1;
            }
            Py_DECREF( tmp_call_result_3 );
        }
        goto branch_end_1;
        branch_no_1:;
        {
            PyObject *tmp_called_instance_4;
            PyObject *tmp_call_result_4;
            CHECK_OBJECT( par_self );
            tmp_called_instance_4 = par_self;
            frame_454dd373f5c99cba8da5eec2ae808a9a->m_frame.f_lineno = 486;
            tmp_call_result_4 = CALL_METHOD_WITH_ARGS1( tmp_called_instance_4, const_str_plain_simple_element, &PyTuple_GET_ITEM( const_tuple_str_plain_array_tuple, 0 ) );

            if ( tmp_call_result_4 == NULL )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 486;
                type_description_1 = "ooo";
                goto frame_exception_exit_1;
            }
            Py_DECREF( tmp_call_result_4 );
        }
        branch_end_1:;
    }

#if 0
    RESTORE_FRAME_EXCEPTION( frame_454dd373f5c99cba8da5eec2ae808a9a );
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto frame_no_exception_1;

    frame_exception_exit_1:;

#if 0
    RESTORE_FRAME_EXCEPTION( frame_454dd373f5c99cba8da5eec2ae808a9a );
#endif

    if ( exception_tb == NULL )
    {
        exception_tb = MAKE_TRACEBACK( frame_454dd373f5c99cba8da5eec2ae808a9a, exception_lineno );
    }
    else if ( exception_tb->tb_frame != &frame_454dd373f5c99cba8da5eec2ae808a9a->m_frame )
    {
        exception_tb = ADD_TRACEBACK( exception_tb, frame_454dd373f5c99cba8da5eec2ae808a9a, exception_lineno );
    }

    // Attachs locals to frame if any.
    Nuitka_Frame_AttachLocals(
        (struct Nuitka_FrameObject *)frame_454dd373f5c99cba8da5eec2ae808a9a,
        type_description_1,
        par_self,
        par_array,
        var_value
    );


    // Release cached frame.
    if ( frame_454dd373f5c99cba8da5eec2ae808a9a == cache_frame_454dd373f5c99cba8da5eec2ae808a9a )
    {
        Py_DECREF( frame_454dd373f5c99cba8da5eec2ae808a9a );
    }
    cache_frame_454dd373f5c99cba8da5eec2ae808a9a = NULL;

    assertFrameObject( frame_454dd373f5c99cba8da5eec2ae808a9a );

    // Put the previous frame back on top.
    popFrameStack();

    // Return the error.
    goto try_except_handler_1;

    frame_no_exception_1:;
    tmp_return_value = Py_None;
    Py_INCREF( tmp_return_value );
    goto try_return_handler_1;
    // tried codes exits in all cases
    NUITKA_CANNOT_GET_HERE( plistlib$$$function_46_write_array );
    return NULL;
    // Return handler code:
    try_return_handler_1:;
    CHECK_OBJECT( (PyObject *)par_self );
    Py_DECREF( par_self );
    par_self = NULL;

    CHECK_OBJECT( (PyObject *)par_array );
    Py_DECREF( par_array );
    par_array = NULL;

    Py_XDECREF( var_value );
    var_value = NULL;

    goto function_return_exit;
    // Exception handler code:
    try_except_handler_1:;
    exception_keeper_type_2 = exception_type;
    exception_keeper_value_2 = exception_value;
    exception_keeper_tb_2 = exception_tb;
    exception_keeper_lineno_2 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    CHECK_OBJECT( (PyObject *)par_self );
    Py_DECREF( par_self );
    par_self = NULL;

    CHECK_OBJECT( (PyObject *)par_array );
    Py_DECREF( par_array );
    par_array = NULL;

    Py_XDECREF( var_value );
    var_value = NULL;

    // Re-raise.
    exception_type = exception_keeper_type_2;
    exception_value = exception_keeper_value_2;
    exception_tb = exception_keeper_tb_2;
    exception_lineno = exception_keeper_lineno_2;

    goto function_exception_exit;
    // End of try:

    // Return statement must have exited already.
    NUITKA_CANNOT_GET_HERE( plistlib$$$function_46_write_array );
    return NULL;

function_exception_exit:
    assert( exception_type );
    RESTORE_ERROR_OCCURRED( exception_type, exception_value, exception_tb );

    return NULL;

function_return_exit:
   // Function cleanup code if any.


   // Actual function exit with return value, making sure we did not make
   // the error status worse despite non-NULL return.
   CHECK_OBJECT( tmp_return_value );
   assert( had_error || !ERROR_OCCURRED() );
   return tmp_return_value;
}


static PyObject *impl_plistlib$$$function_47__is_fmt_xml( struct Nuitka_FunctionObject const *self, PyObject **python_pars )
{
    // Preserve error status for checks
#ifndef __NUITKA_NO_ASSERT__
    NUITKA_MAY_BE_UNUSED bool had_error = ERROR_OCCURRED();
#endif

    // Local variable declarations.
    PyObject *par_header = python_pars[ 0 ];
    PyObject *var_pfx = NULL;
    PyObject *var_bom = NULL;
    PyObject *var_encoding = NULL;
    PyObject *var_start = NULL;
    PyObject *var_prefix = NULL;
    PyObject *tmp_for_loop_1__for_iterator = NULL;
    PyObject *tmp_for_loop_1__iter_value = NULL;
    PyObject *tmp_for_loop_2__for_iterator = NULL;
    PyObject *tmp_for_loop_2__iter_value = NULL;
    PyObject *tmp_for_loop_3__for_iterator = NULL;
    PyObject *tmp_for_loop_3__iter_value = NULL;
    PyObject *tmp_tuple_unpack_1__element_1 = NULL;
    PyObject *tmp_tuple_unpack_1__element_2 = NULL;
    PyObject *tmp_tuple_unpack_1__source_iter = NULL;
    struct Nuitka_FrameObject *frame_dafd355cb1f2b6e746cd6dd919a0797d;
    NUITKA_MAY_BE_UNUSED char const *type_description_1 = NULL;
    PyObject *exception_type = NULL;
    PyObject *exception_value = NULL;
    PyTracebackObject *exception_tb = NULL;
    NUITKA_MAY_BE_UNUSED int exception_lineno = 0;
    PyObject *tmp_return_value = NULL;
    PyObject *exception_keeper_type_1;
    PyObject *exception_keeper_value_1;
    PyTracebackObject *exception_keeper_tb_1;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_1;
    PyObject *tmp_iterator_attempt;
    PyObject *exception_keeper_type_2;
    PyObject *exception_keeper_value_2;
    PyTracebackObject *exception_keeper_tb_2;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_2;
    PyObject *exception_keeper_type_3;
    PyObject *exception_keeper_value_3;
    PyTracebackObject *exception_keeper_tb_3;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_3;
    int tmp_res;
    PyObject *exception_keeper_type_4;
    PyObject *exception_keeper_value_4;
    PyTracebackObject *exception_keeper_tb_4;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_4;
    PyObject *exception_keeper_type_5;
    PyObject *exception_keeper_value_5;
    PyTracebackObject *exception_keeper_tb_5;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_5;
    static struct Nuitka_FrameObject *cache_frame_dafd355cb1f2b6e746cd6dd919a0797d = NULL;
    PyObject *exception_keeper_type_6;
    PyObject *exception_keeper_value_6;
    PyTracebackObject *exception_keeper_tb_6;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_6;

    // Actual function body.
    {
        PyObject *tmp_assign_source_1;
        PyObject *tmp_iter_arg_1;
        tmp_iter_arg_1 = const_tuple_f93ca986507b5d7bc076a33adb0d1b71_tuple;
        tmp_assign_source_1 = MAKE_ITERATOR( tmp_iter_arg_1 );
        assert( !(tmp_assign_source_1 == NULL) );
        assert( tmp_for_loop_1__for_iterator == NULL );
        tmp_for_loop_1__for_iterator = tmp_assign_source_1;
    }
    // Tried code:
    MAKE_OR_REUSE_FRAME( cache_frame_dafd355cb1f2b6e746cd6dd919a0797d, codeobj_dafd355cb1f2b6e746cd6dd919a0797d, module_plistlib, sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *) );
    frame_dafd355cb1f2b6e746cd6dd919a0797d = cache_frame_dafd355cb1f2b6e746cd6dd919a0797d;

    // Push the new frame as the currently active one.
    pushFrameStack( frame_dafd355cb1f2b6e746cd6dd919a0797d );

    // Mark the frame object as in use, ref count 1 will be up for reuse.
    assert( Py_REFCNT( frame_dafd355cb1f2b6e746cd6dd919a0797d ) == 2 ); // Frame stack

    // Framed code:
    // Tried code:
    loop_start_1:;
    {
        PyObject *tmp_next_source_1;
        PyObject *tmp_assign_source_2;
        CHECK_OBJECT( tmp_for_loop_1__for_iterator );
        tmp_next_source_1 = tmp_for_loop_1__for_iterator;
        tmp_assign_source_2 = ITERATOR_NEXT( tmp_next_source_1 );
        if ( tmp_assign_source_2 == NULL )
        {
            if ( CHECK_AND_CLEAR_STOP_ITERATION_OCCURRED() )
            {

                goto loop_end_1;
            }
            else
            {

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
                type_description_1 = "oNooooo";
                exception_lineno = 492;
                goto try_except_handler_2;
            }
        }

        {
            PyObject *old = tmp_for_loop_1__iter_value;
            tmp_for_loop_1__iter_value = tmp_assign_source_2;
            Py_XDECREF( old );
        }

    }
    {
        PyObject *tmp_assign_source_3;
        CHECK_OBJECT( tmp_for_loop_1__iter_value );
        tmp_assign_source_3 = tmp_for_loop_1__iter_value;
        {
            PyObject *old = var_pfx;
            var_pfx = tmp_assign_source_3;
            Py_INCREF( var_pfx );
            Py_XDECREF( old );
        }

    }
    {
        nuitka_bool tmp_condition_result_1;
        PyObject *tmp_called_instance_1;
        PyObject *tmp_call_result_1;
        PyObject *tmp_args_element_name_1;
        int tmp_truth_name_1;
        CHECK_OBJECT( par_header );
        tmp_called_instance_1 = par_header;
        CHECK_OBJECT( var_pfx );
        tmp_args_element_name_1 = var_pfx;
        frame_dafd355cb1f2b6e746cd6dd919a0797d->m_frame.f_lineno = 493;
        {
            PyObject *call_args[] = { tmp_args_element_name_1 };
            tmp_call_result_1 = CALL_METHOD_WITH_ARGS1( tmp_called_instance_1, const_str_plain_startswith, call_args );
        }

        if ( tmp_call_result_1 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 493;
            type_description_1 = "oNooooo";
            goto try_except_handler_2;
        }
        tmp_truth_name_1 = CHECK_IF_TRUE( tmp_call_result_1 );
        if ( tmp_truth_name_1 == -1 )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
            Py_DECREF( tmp_call_result_1 );

            exception_lineno = 493;
            type_description_1 = "oNooooo";
            goto try_except_handler_2;
        }
        tmp_condition_result_1 = tmp_truth_name_1 == 1 ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
        Py_DECREF( tmp_call_result_1 );
        if ( tmp_condition_result_1 == NUITKA_BOOL_TRUE )
        {
            goto branch_yes_1;
        }
        else
        {
            goto branch_no_1;
        }
        branch_yes_1:;
        tmp_return_value = Py_True;
        Py_INCREF( tmp_return_value );
        goto try_return_handler_2;
        branch_no_1:;
    }
    if ( CONSIDER_THREADING() == false )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 492;
        type_description_1 = "oNooooo";
        goto try_except_handler_2;
    }
    goto loop_start_1;
    loop_end_1:;
    goto try_end_1;
    // Return handler code:
    try_return_handler_2:;
    CHECK_OBJECT( (PyObject *)tmp_for_loop_1__iter_value );
    Py_DECREF( tmp_for_loop_1__iter_value );
    tmp_for_loop_1__iter_value = NULL;

    CHECK_OBJECT( (PyObject *)tmp_for_loop_1__for_iterator );
    Py_DECREF( tmp_for_loop_1__for_iterator );
    tmp_for_loop_1__for_iterator = NULL;

    goto frame_return_exit_1;
    // Exception handler code:
    try_except_handler_2:;
    exception_keeper_type_1 = exception_type;
    exception_keeper_value_1 = exception_value;
    exception_keeper_tb_1 = exception_tb;
    exception_keeper_lineno_1 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    Py_XDECREF( tmp_for_loop_1__iter_value );
    tmp_for_loop_1__iter_value = NULL;

    CHECK_OBJECT( (PyObject *)tmp_for_loop_1__for_iterator );
    Py_DECREF( tmp_for_loop_1__for_iterator );
    tmp_for_loop_1__for_iterator = NULL;

    // Re-raise.
    exception_type = exception_keeper_type_1;
    exception_value = exception_keeper_value_1;
    exception_tb = exception_keeper_tb_1;
    exception_lineno = exception_keeper_lineno_1;

    goto frame_exception_exit_1;
    // End of try:
    try_end_1:;
    Py_XDECREF( tmp_for_loop_1__iter_value );
    tmp_for_loop_1__iter_value = NULL;

    CHECK_OBJECT( (PyObject *)tmp_for_loop_1__for_iterator );
    Py_DECREF( tmp_for_loop_1__for_iterator );
    tmp_for_loop_1__for_iterator = NULL;

    {
        PyObject *tmp_assign_source_4;
        PyObject *tmp_iter_arg_2;
        PyObject *tmp_tuple_element_1;
        PyObject *tmp_tuple_element_2;
        PyObject *tmp_source_name_1;
        PyObject *tmp_mvar_value_1;
        PyObject *tmp_tuple_element_3;
        PyObject *tmp_source_name_2;
        PyObject *tmp_mvar_value_2;
        PyObject *tmp_tuple_element_4;
        PyObject *tmp_source_name_3;
        PyObject *tmp_mvar_value_3;
        tmp_mvar_value_1 = GET_STRING_DICT_VALUE( moduledict_plistlib, (Nuitka_StringObject *)const_str_plain_codecs );

        if (unlikely( tmp_mvar_value_1 == NULL ))
        {
            tmp_mvar_value_1 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_codecs );
        }

        if ( tmp_mvar_value_1 == NULL )
        {

            exception_type = PyExc_NameError;
            Py_INCREF( exception_type );
            exception_value = PyUnicode_FromFormat( "name '%s' is not defined", "codecs" );
            exception_tb = NULL;
            NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
            CHAIN_EXCEPTION( exception_value );

            exception_lineno = 500;
            type_description_1 = "oNooooo";
            goto frame_exception_exit_1;
        }

        tmp_source_name_1 = tmp_mvar_value_1;
        tmp_tuple_element_2 = LOOKUP_ATTRIBUTE( tmp_source_name_1, const_str_plain_BOM_UTF8 );
        if ( tmp_tuple_element_2 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 500;
            type_description_1 = "oNooooo";
            goto frame_exception_exit_1;
        }
        tmp_tuple_element_1 = PyTuple_New( 2 );
        PyTuple_SET_ITEM( tmp_tuple_element_1, 0, tmp_tuple_element_2 );
        tmp_tuple_element_2 = const_str_digest_c075052d723d6707083e869a0e3659bb;
        Py_INCREF( tmp_tuple_element_2 );
        PyTuple_SET_ITEM( tmp_tuple_element_1, 1, tmp_tuple_element_2 );
        tmp_iter_arg_2 = PyTuple_New( 3 );
        PyTuple_SET_ITEM( tmp_iter_arg_2, 0, tmp_tuple_element_1 );
        tmp_mvar_value_2 = GET_STRING_DICT_VALUE( moduledict_plistlib, (Nuitka_StringObject *)const_str_plain_codecs );

        if (unlikely( tmp_mvar_value_2 == NULL ))
        {
            tmp_mvar_value_2 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_codecs );
        }

        if ( tmp_mvar_value_2 == NULL )
        {
            Py_DECREF( tmp_iter_arg_2 );
            exception_type = PyExc_NameError;
            Py_INCREF( exception_type );
            exception_value = PyUnicode_FromFormat( "name '%s' is not defined", "codecs" );
            exception_tb = NULL;
            NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
            CHAIN_EXCEPTION( exception_value );

            exception_lineno = 501;
            type_description_1 = "oNooooo";
            goto frame_exception_exit_1;
        }

        tmp_source_name_2 = tmp_mvar_value_2;
        tmp_tuple_element_3 = LOOKUP_ATTRIBUTE( tmp_source_name_2, const_str_plain_BOM_UTF16_BE );
        if ( tmp_tuple_element_3 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
            Py_DECREF( tmp_iter_arg_2 );

            exception_lineno = 501;
            type_description_1 = "oNooooo";
            goto frame_exception_exit_1;
        }
        tmp_tuple_element_1 = PyTuple_New( 2 );
        PyTuple_SET_ITEM( tmp_tuple_element_1, 0, tmp_tuple_element_3 );
        tmp_tuple_element_3 = const_str_digest_b737658f4b2da5ff2ae42c0fba5b6033;
        Py_INCREF( tmp_tuple_element_3 );
        PyTuple_SET_ITEM( tmp_tuple_element_1, 1, tmp_tuple_element_3 );
        PyTuple_SET_ITEM( tmp_iter_arg_2, 1, tmp_tuple_element_1 );
        tmp_mvar_value_3 = GET_STRING_DICT_VALUE( moduledict_plistlib, (Nuitka_StringObject *)const_str_plain_codecs );

        if (unlikely( tmp_mvar_value_3 == NULL ))
        {
            tmp_mvar_value_3 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_codecs );
        }

        if ( tmp_mvar_value_3 == NULL )
        {
            Py_DECREF( tmp_iter_arg_2 );
            exception_type = PyExc_NameError;
            Py_INCREF( exception_type );
            exception_value = PyUnicode_FromFormat( "name '%s' is not defined", "codecs" );
            exception_tb = NULL;
            NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
            CHAIN_EXCEPTION( exception_value );

            exception_lineno = 502;
            type_description_1 = "oNooooo";
            goto frame_exception_exit_1;
        }

        tmp_source_name_3 = tmp_mvar_value_3;
        tmp_tuple_element_4 = LOOKUP_ATTRIBUTE( tmp_source_name_3, const_str_plain_BOM_UTF16_LE );
        if ( tmp_tuple_element_4 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
            Py_DECREF( tmp_iter_arg_2 );

            exception_lineno = 502;
            type_description_1 = "oNooooo";
            goto frame_exception_exit_1;
        }
        tmp_tuple_element_1 = PyTuple_New( 2 );
        PyTuple_SET_ITEM( tmp_tuple_element_1, 0, tmp_tuple_element_4 );
        tmp_tuple_element_4 = const_str_digest_a166d0e20cf23102cf939cef62c22331;
        Py_INCREF( tmp_tuple_element_4 );
        PyTuple_SET_ITEM( tmp_tuple_element_1, 1, tmp_tuple_element_4 );
        PyTuple_SET_ITEM( tmp_iter_arg_2, 2, tmp_tuple_element_1 );
        tmp_assign_source_4 = MAKE_ITERATOR( tmp_iter_arg_2 );
        Py_DECREF( tmp_iter_arg_2 );
        if ( tmp_assign_source_4 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 500;
            type_description_1 = "oNooooo";
            goto frame_exception_exit_1;
        }
        assert( tmp_for_loop_2__for_iterator == NULL );
        tmp_for_loop_2__for_iterator = tmp_assign_source_4;
    }
    // Tried code:
    loop_start_2:;
    {
        PyObject *tmp_next_source_2;
        PyObject *tmp_assign_source_5;
        CHECK_OBJECT( tmp_for_loop_2__for_iterator );
        tmp_next_source_2 = tmp_for_loop_2__for_iterator;
        tmp_assign_source_5 = ITERATOR_NEXT( tmp_next_source_2 );
        if ( tmp_assign_source_5 == NULL )
        {
            if ( CHECK_AND_CLEAR_STOP_ITERATION_OCCURRED() )
            {

                goto loop_end_2;
            }
            else
            {

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
                type_description_1 = "oNooooo";
                exception_lineno = 499;
                goto try_except_handler_3;
            }
        }

        {
            PyObject *old = tmp_for_loop_2__iter_value;
            tmp_for_loop_2__iter_value = tmp_assign_source_5;
            Py_XDECREF( old );
        }

    }
    // Tried code:
    {
        PyObject *tmp_assign_source_6;
        PyObject *tmp_iter_arg_3;
        CHECK_OBJECT( tmp_for_loop_2__iter_value );
        tmp_iter_arg_3 = tmp_for_loop_2__iter_value;
        tmp_assign_source_6 = MAKE_UNPACK_ITERATOR( tmp_iter_arg_3 );
        if ( tmp_assign_source_6 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 499;
            type_description_1 = "oNooooo";
            goto try_except_handler_4;
        }
        {
            PyObject *old = tmp_tuple_unpack_1__source_iter;
            tmp_tuple_unpack_1__source_iter = tmp_assign_source_6;
            Py_XDECREF( old );
        }

    }
    // Tried code:
    {
        PyObject *tmp_assign_source_7;
        PyObject *tmp_unpack_1;
        CHECK_OBJECT( tmp_tuple_unpack_1__source_iter );
        tmp_unpack_1 = tmp_tuple_unpack_1__source_iter;
        tmp_assign_source_7 = UNPACK_NEXT( tmp_unpack_1, 0, 2 );
        if ( tmp_assign_source_7 == NULL )
        {
            if ( !ERROR_OCCURRED() )
            {
                exception_type = PyExc_StopIteration;
                Py_INCREF( exception_type );
                exception_value = NULL;
                exception_tb = NULL;
            }
            else
            {
                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
            }


            type_description_1 = "oNooooo";
            exception_lineno = 499;
            goto try_except_handler_5;
        }
        {
            PyObject *old = tmp_tuple_unpack_1__element_1;
            tmp_tuple_unpack_1__element_1 = tmp_assign_source_7;
            Py_XDECREF( old );
        }

    }
    {
        PyObject *tmp_assign_source_8;
        PyObject *tmp_unpack_2;
        CHECK_OBJECT( tmp_tuple_unpack_1__source_iter );
        tmp_unpack_2 = tmp_tuple_unpack_1__source_iter;
        tmp_assign_source_8 = UNPACK_NEXT( tmp_unpack_2, 1, 2 );
        if ( tmp_assign_source_8 == NULL )
        {
            if ( !ERROR_OCCURRED() )
            {
                exception_type = PyExc_StopIteration;
                Py_INCREF( exception_type );
                exception_value = NULL;
                exception_tb = NULL;
            }
            else
            {
                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
            }


            type_description_1 = "oNooooo";
            exception_lineno = 499;
            goto try_except_handler_5;
        }
        {
            PyObject *old = tmp_tuple_unpack_1__element_2;
            tmp_tuple_unpack_1__element_2 = tmp_assign_source_8;
            Py_XDECREF( old );
        }

    }
    {
        PyObject *tmp_iterator_name_1;
        CHECK_OBJECT( tmp_tuple_unpack_1__source_iter );
        tmp_iterator_name_1 = tmp_tuple_unpack_1__source_iter;
        // Check if iterator has left-over elements.
        CHECK_OBJECT( tmp_iterator_name_1 ); assert( HAS_ITERNEXT( tmp_iterator_name_1 ) );

        tmp_iterator_attempt = (*Py_TYPE( tmp_iterator_name_1 )->tp_iternext)( tmp_iterator_name_1 );

        if (likely( tmp_iterator_attempt == NULL ))
        {
            PyObject *error = GET_ERROR_OCCURRED();

            if ( error != NULL )
            {
                if ( EXCEPTION_MATCH_BOOL_SINGLE( error, PyExc_StopIteration ))
                {
                    CLEAR_ERROR_OCCURRED();
                }
                else
                {
                    FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );

                    type_description_1 = "oNooooo";
                    exception_lineno = 499;
                    goto try_except_handler_5;
                }
            }
        }
        else
        {
            Py_DECREF( tmp_iterator_attempt );

            // TODO: Could avoid PyErr_Format.
#if PYTHON_VERSION < 300
            PyErr_Format( PyExc_ValueError, "too many values to unpack" );
#else
            PyErr_Format( PyExc_ValueError, "too many values to unpack (expected 2)" );
#endif
            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );

            type_description_1 = "oNooooo";
            exception_lineno = 499;
            goto try_except_handler_5;
        }
    }
    goto try_end_2;
    // Exception handler code:
    try_except_handler_5:;
    exception_keeper_type_2 = exception_type;
    exception_keeper_value_2 = exception_value;
    exception_keeper_tb_2 = exception_tb;
    exception_keeper_lineno_2 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    CHECK_OBJECT( (PyObject *)tmp_tuple_unpack_1__source_iter );
    Py_DECREF( tmp_tuple_unpack_1__source_iter );
    tmp_tuple_unpack_1__source_iter = NULL;

    // Re-raise.
    exception_type = exception_keeper_type_2;
    exception_value = exception_keeper_value_2;
    exception_tb = exception_keeper_tb_2;
    exception_lineno = exception_keeper_lineno_2;

    goto try_except_handler_4;
    // End of try:
    try_end_2:;
    goto try_end_3;
    // Exception handler code:
    try_except_handler_4:;
    exception_keeper_type_3 = exception_type;
    exception_keeper_value_3 = exception_value;
    exception_keeper_tb_3 = exception_tb;
    exception_keeper_lineno_3 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    Py_XDECREF( tmp_tuple_unpack_1__element_1 );
    tmp_tuple_unpack_1__element_1 = NULL;

    Py_XDECREF( tmp_tuple_unpack_1__element_2 );
    tmp_tuple_unpack_1__element_2 = NULL;

    // Re-raise.
    exception_type = exception_keeper_type_3;
    exception_value = exception_keeper_value_3;
    exception_tb = exception_keeper_tb_3;
    exception_lineno = exception_keeper_lineno_3;

    goto try_except_handler_3;
    // End of try:
    try_end_3:;
    CHECK_OBJECT( (PyObject *)tmp_tuple_unpack_1__source_iter );
    Py_DECREF( tmp_tuple_unpack_1__source_iter );
    tmp_tuple_unpack_1__source_iter = NULL;

    {
        PyObject *tmp_assign_source_9;
        CHECK_OBJECT( tmp_tuple_unpack_1__element_1 );
        tmp_assign_source_9 = tmp_tuple_unpack_1__element_1;
        {
            PyObject *old = var_bom;
            var_bom = tmp_assign_source_9;
            Py_INCREF( var_bom );
            Py_XDECREF( old );
        }

    }
    Py_XDECREF( tmp_tuple_unpack_1__element_1 );
    tmp_tuple_unpack_1__element_1 = NULL;

    {
        PyObject *tmp_assign_source_10;
        CHECK_OBJECT( tmp_tuple_unpack_1__element_2 );
        tmp_assign_source_10 = tmp_tuple_unpack_1__element_2;
        {
            PyObject *old = var_encoding;
            var_encoding = tmp_assign_source_10;
            Py_INCREF( var_encoding );
            Py_XDECREF( old );
        }

    }
    Py_XDECREF( tmp_tuple_unpack_1__element_2 );
    tmp_tuple_unpack_1__element_2 = NULL;

    {
        nuitka_bool tmp_condition_result_2;
        PyObject *tmp_operand_name_1;
        PyObject *tmp_called_instance_2;
        PyObject *tmp_args_element_name_2;
        CHECK_OBJECT( par_header );
        tmp_called_instance_2 = par_header;
        CHECK_OBJECT( var_bom );
        tmp_args_element_name_2 = var_bom;
        frame_dafd355cb1f2b6e746cd6dd919a0797d->m_frame.f_lineno = 507;
        {
            PyObject *call_args[] = { tmp_args_element_name_2 };
            tmp_operand_name_1 = CALL_METHOD_WITH_ARGS1( tmp_called_instance_2, const_str_plain_startswith, call_args );
        }

        if ( tmp_operand_name_1 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 507;
            type_description_1 = "oNooooo";
            goto try_except_handler_3;
        }
        tmp_res = CHECK_IF_TRUE( tmp_operand_name_1 );
        Py_DECREF( tmp_operand_name_1 );
        if ( tmp_res == -1 )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 507;
            type_description_1 = "oNooooo";
            goto try_except_handler_3;
        }
        tmp_condition_result_2 = ( tmp_res == 0 ) ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
        if ( tmp_condition_result_2 == NUITKA_BOOL_TRUE )
        {
            goto branch_yes_2;
        }
        else
        {
            goto branch_no_2;
        }
        branch_yes_2:;
        goto loop_start_2;
        branch_no_2:;
    }
    {
        PyObject *tmp_assign_source_11;
        PyObject *tmp_iter_arg_4;
        tmp_iter_arg_4 = const_tuple_f93ca986507b5d7bc076a33adb0d1b71_tuple;
        tmp_assign_source_11 = MAKE_ITERATOR( tmp_iter_arg_4 );
        assert( !(tmp_assign_source_11 == NULL) );
        {
            PyObject *old = tmp_for_loop_3__for_iterator;
            tmp_for_loop_3__for_iterator = tmp_assign_source_11;
            Py_XDECREF( old );
        }

    }
    // Tried code:
    loop_start_3:;
    {
        PyObject *tmp_next_source_3;
        PyObject *tmp_assign_source_12;
        CHECK_OBJECT( tmp_for_loop_3__for_iterator );
        tmp_next_source_3 = tmp_for_loop_3__for_iterator;
        tmp_assign_source_12 = ITERATOR_NEXT( tmp_next_source_3 );
        if ( tmp_assign_source_12 == NULL )
        {
            if ( CHECK_AND_CLEAR_STOP_ITERATION_OCCURRED() )
            {

                goto loop_end_3;
            }
            else
            {

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
                type_description_1 = "oNooooo";
                exception_lineno = 510;
                goto try_except_handler_6;
            }
        }

        {
            PyObject *old = tmp_for_loop_3__iter_value;
            tmp_for_loop_3__iter_value = tmp_assign_source_12;
            Py_XDECREF( old );
        }

    }
    {
        PyObject *tmp_assign_source_13;
        CHECK_OBJECT( tmp_for_loop_3__iter_value );
        tmp_assign_source_13 = tmp_for_loop_3__iter_value;
        {
            PyObject *old = var_start;
            var_start = tmp_assign_source_13;
            Py_INCREF( var_start );
            Py_XDECREF( old );
        }

    }
    {
        PyObject *tmp_assign_source_14;
        PyObject *tmp_left_name_1;
        PyObject *tmp_right_name_1;
        PyObject *tmp_called_instance_3;
        PyObject *tmp_called_instance_4;
        PyObject *tmp_args_element_name_3;
        CHECK_OBJECT( var_bom );
        tmp_left_name_1 = var_bom;
        CHECK_OBJECT( var_start );
        tmp_called_instance_4 = var_start;
        frame_dafd355cb1f2b6e746cd6dd919a0797d->m_frame.f_lineno = 511;
        tmp_called_instance_3 = CALL_METHOD_WITH_ARGS1( tmp_called_instance_4, const_str_plain_decode, &PyTuple_GET_ITEM( const_tuple_str_plain_ascii_tuple, 0 ) );

        if ( tmp_called_instance_3 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 511;
            type_description_1 = "oNooooo";
            goto try_except_handler_6;
        }
        CHECK_OBJECT( var_encoding );
        tmp_args_element_name_3 = var_encoding;
        frame_dafd355cb1f2b6e746cd6dd919a0797d->m_frame.f_lineno = 511;
        {
            PyObject *call_args[] = { tmp_args_element_name_3 };
            tmp_right_name_1 = CALL_METHOD_WITH_ARGS1( tmp_called_instance_3, const_str_plain_encode, call_args );
        }

        Py_DECREF( tmp_called_instance_3 );
        if ( tmp_right_name_1 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 511;
            type_description_1 = "oNooooo";
            goto try_except_handler_6;
        }
        tmp_assign_source_14 = BINARY_OPERATION_ADD_OBJECT_OBJECT( tmp_left_name_1, tmp_right_name_1 );
        Py_DECREF( tmp_right_name_1 );
        if ( tmp_assign_source_14 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 511;
            type_description_1 = "oNooooo";
            goto try_except_handler_6;
        }
        {
            PyObject *old = var_prefix;
            var_prefix = tmp_assign_source_14;
            Py_XDECREF( old );
        }

    }
    {
        nuitka_bool tmp_condition_result_3;
        PyObject *tmp_compexpr_left_1;
        PyObject *tmp_compexpr_right_1;
        PyObject *tmp_subscribed_name_1;
        PyObject *tmp_subscript_name_1;
        PyObject *tmp_start_name_1;
        PyObject *tmp_stop_name_1;
        PyObject *tmp_len_arg_1;
        PyObject *tmp_step_name_1;
        CHECK_OBJECT( par_header );
        tmp_subscribed_name_1 = par_header;
        tmp_start_name_1 = Py_None;
        CHECK_OBJECT( var_prefix );
        tmp_len_arg_1 = var_prefix;
        tmp_stop_name_1 = BUILTIN_LEN( tmp_len_arg_1 );
        if ( tmp_stop_name_1 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 512;
            type_description_1 = "oNooooo";
            goto try_except_handler_6;
        }
        tmp_step_name_1 = Py_None;
        tmp_subscript_name_1 = MAKE_SLICEOBJ3( tmp_start_name_1, tmp_stop_name_1, tmp_step_name_1 );
        Py_DECREF( tmp_stop_name_1 );
        assert( !(tmp_subscript_name_1 == NULL) );
        tmp_compexpr_left_1 = LOOKUP_SUBSCRIPT( tmp_subscribed_name_1, tmp_subscript_name_1 );
        Py_DECREF( tmp_subscript_name_1 );
        if ( tmp_compexpr_left_1 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 512;
            type_description_1 = "oNooooo";
            goto try_except_handler_6;
        }
        CHECK_OBJECT( var_prefix );
        tmp_compexpr_right_1 = var_prefix;
        tmp_res = RICH_COMPARE_BOOL_EQ_OBJECT_OBJECT( tmp_compexpr_left_1, tmp_compexpr_right_1 );
        Py_DECREF( tmp_compexpr_left_1 );
        if ( tmp_res == -1 )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 512;
            type_description_1 = "oNooooo";
            goto try_except_handler_6;
        }
        tmp_condition_result_3 = ( tmp_res != 0 ) ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
        if ( tmp_condition_result_3 == NUITKA_BOOL_TRUE )
        {
            goto branch_yes_3;
        }
        else
        {
            goto branch_no_3;
        }
        branch_yes_3:;
        tmp_return_value = Py_True;
        Py_INCREF( tmp_return_value );
        goto try_return_handler_6;
        branch_no_3:;
    }
    if ( CONSIDER_THREADING() == false )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 510;
        type_description_1 = "oNooooo";
        goto try_except_handler_6;
    }
    goto loop_start_3;
    loop_end_3:;
    goto try_end_4;
    // Return handler code:
    try_return_handler_6:;
    CHECK_OBJECT( (PyObject *)tmp_for_loop_3__iter_value );
    Py_DECREF( tmp_for_loop_3__iter_value );
    tmp_for_loop_3__iter_value = NULL;

    CHECK_OBJECT( (PyObject *)tmp_for_loop_3__for_iterator );
    Py_DECREF( tmp_for_loop_3__for_iterator );
    tmp_for_loop_3__for_iterator = NULL;

    goto try_return_handler_3;
    // Exception handler code:
    try_except_handler_6:;
    exception_keeper_type_4 = exception_type;
    exception_keeper_value_4 = exception_value;
    exception_keeper_tb_4 = exception_tb;
    exception_keeper_lineno_4 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    Py_XDECREF( tmp_for_loop_3__iter_value );
    tmp_for_loop_3__iter_value = NULL;

    CHECK_OBJECT( (PyObject *)tmp_for_loop_3__for_iterator );
    Py_DECREF( tmp_for_loop_3__for_iterator );
    tmp_for_loop_3__for_iterator = NULL;

    // Re-raise.
    exception_type = exception_keeper_type_4;
    exception_value = exception_keeper_value_4;
    exception_tb = exception_keeper_tb_4;
    exception_lineno = exception_keeper_lineno_4;

    goto try_except_handler_3;
    // End of try:
    try_end_4:;
    Py_XDECREF( tmp_for_loop_3__iter_value );
    tmp_for_loop_3__iter_value = NULL;

    CHECK_OBJECT( (PyObject *)tmp_for_loop_3__for_iterator );
    Py_DECREF( tmp_for_loop_3__for_iterator );
    tmp_for_loop_3__for_iterator = NULL;

    if ( CONSIDER_THREADING() == false )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 499;
        type_description_1 = "oNooooo";
        goto try_except_handler_3;
    }
    goto loop_start_2;
    loop_end_2:;
    goto try_end_5;
    // Return handler code:
    try_return_handler_3:;
    CHECK_OBJECT( (PyObject *)tmp_for_loop_2__iter_value );
    Py_DECREF( tmp_for_loop_2__iter_value );
    tmp_for_loop_2__iter_value = NULL;

    CHECK_OBJECT( (PyObject *)tmp_for_loop_2__for_iterator );
    Py_DECREF( tmp_for_loop_2__for_iterator );
    tmp_for_loop_2__for_iterator = NULL;

    goto frame_return_exit_1;
    // Exception handler code:
    try_except_handler_3:;
    exception_keeper_type_5 = exception_type;
    exception_keeper_value_5 = exception_value;
    exception_keeper_tb_5 = exception_tb;
    exception_keeper_lineno_5 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    Py_XDECREF( tmp_for_loop_2__iter_value );
    tmp_for_loop_2__iter_value = NULL;

    CHECK_OBJECT( (PyObject *)tmp_for_loop_2__for_iterator );
    Py_DECREF( tmp_for_loop_2__for_iterator );
    tmp_for_loop_2__for_iterator = NULL;

    // Re-raise.
    exception_type = exception_keeper_type_5;
    exception_value = exception_keeper_value_5;
    exception_tb = exception_keeper_tb_5;
    exception_lineno = exception_keeper_lineno_5;

    goto frame_exception_exit_1;
    // End of try:
    try_end_5:;

#if 0
    RESTORE_FRAME_EXCEPTION( frame_dafd355cb1f2b6e746cd6dd919a0797d );
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto frame_no_exception_1;

    frame_return_exit_1:;
#if 0
    RESTORE_FRAME_EXCEPTION( frame_dafd355cb1f2b6e746cd6dd919a0797d );
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto try_return_handler_1;

    frame_exception_exit_1:;

#if 0
    RESTORE_FRAME_EXCEPTION( frame_dafd355cb1f2b6e746cd6dd919a0797d );
#endif

    if ( exception_tb == NULL )
    {
        exception_tb = MAKE_TRACEBACK( frame_dafd355cb1f2b6e746cd6dd919a0797d, exception_lineno );
    }
    else if ( exception_tb->tb_frame != &frame_dafd355cb1f2b6e746cd6dd919a0797d->m_frame )
    {
        exception_tb = ADD_TRACEBACK( exception_tb, frame_dafd355cb1f2b6e746cd6dd919a0797d, exception_lineno );
    }

    // Attachs locals to frame if any.
    Nuitka_Frame_AttachLocals(
        (struct Nuitka_FrameObject *)frame_dafd355cb1f2b6e746cd6dd919a0797d,
        type_description_1,
        par_header,
        NULL,
        var_pfx,
        var_bom,
        var_encoding,
        var_start,
        var_prefix
    );


    // Release cached frame.
    if ( frame_dafd355cb1f2b6e746cd6dd919a0797d == cache_frame_dafd355cb1f2b6e746cd6dd919a0797d )
    {
        Py_DECREF( frame_dafd355cb1f2b6e746cd6dd919a0797d );
    }
    cache_frame_dafd355cb1f2b6e746cd6dd919a0797d = NULL;

    assertFrameObject( frame_dafd355cb1f2b6e746cd6dd919a0797d );

    // Put the previous frame back on top.
    popFrameStack();

    // Return the error.
    goto try_except_handler_1;

    frame_no_exception_1:;
    Py_XDECREF( tmp_for_loop_2__iter_value );
    tmp_for_loop_2__iter_value = NULL;

    CHECK_OBJECT( (PyObject *)tmp_for_loop_2__for_iterator );
    Py_DECREF( tmp_for_loop_2__for_iterator );
    tmp_for_loop_2__for_iterator = NULL;

    tmp_return_value = Py_False;
    Py_INCREF( tmp_return_value );
    goto try_return_handler_1;
    // tried codes exits in all cases
    NUITKA_CANNOT_GET_HERE( plistlib$$$function_47__is_fmt_xml );
    return NULL;
    // Return handler code:
    try_return_handler_1:;
    CHECK_OBJECT( (PyObject *)par_header );
    Py_DECREF( par_header );
    par_header = NULL;

    Py_XDECREF( var_pfx );
    var_pfx = NULL;

    Py_XDECREF( var_bom );
    var_bom = NULL;

    Py_XDECREF( var_encoding );
    var_encoding = NULL;

    Py_XDECREF( var_start );
    var_start = NULL;

    Py_XDECREF( var_prefix );
    var_prefix = NULL;

    goto function_return_exit;
    // Exception handler code:
    try_except_handler_1:;
    exception_keeper_type_6 = exception_type;
    exception_keeper_value_6 = exception_value;
    exception_keeper_tb_6 = exception_tb;
    exception_keeper_lineno_6 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    CHECK_OBJECT( (PyObject *)par_header );
    Py_DECREF( par_header );
    par_header = NULL;

    Py_XDECREF( var_pfx );
    var_pfx = NULL;

    Py_XDECREF( var_bom );
    var_bom = NULL;

    Py_XDECREF( var_encoding );
    var_encoding = NULL;

    Py_XDECREF( var_start );
    var_start = NULL;

    Py_XDECREF( var_prefix );
    var_prefix = NULL;

    // Re-raise.
    exception_type = exception_keeper_type_6;
    exception_value = exception_keeper_value_6;
    exception_tb = exception_keeper_tb_6;
    exception_lineno = exception_keeper_lineno_6;

    goto function_exception_exit;
    // End of try:

    // Return statement must have exited already.
    NUITKA_CANNOT_GET_HERE( plistlib$$$function_47__is_fmt_xml );
    return NULL;

function_exception_exit:
    assert( exception_type );
    RESTORE_ERROR_OCCURRED( exception_type, exception_value, exception_tb );

    return NULL;

function_return_exit:
   // Function cleanup code if any.


   // Actual function exit with return value, making sure we did not make
   // the error status worse despite non-NULL return.
   CHECK_OBJECT( tmp_return_value );
   assert( had_error || !ERROR_OCCURRED() );
   return tmp_return_value;
}


static PyObject *impl_plistlib$$$function_48___init__( struct Nuitka_FunctionObject const *self, PyObject **python_pars )
{
    // Preserve error status for checks
#ifndef __NUITKA_NO_ASSERT__
    NUITKA_MAY_BE_UNUSED bool had_error = ERROR_OCCURRED();
#endif

    // Local variable declarations.
    PyObject *par_self = python_pars[ 0 ];
    PyObject *par_message = python_pars[ 1 ];
    struct Nuitka_FrameObject *frame_8251681e754e9889f9bbf45825113951;
    NUITKA_MAY_BE_UNUSED char const *type_description_1 = NULL;
    PyObject *exception_type = NULL;
    PyObject *exception_value = NULL;
    PyTracebackObject *exception_tb = NULL;
    NUITKA_MAY_BE_UNUSED int exception_lineno = 0;
    static struct Nuitka_FrameObject *cache_frame_8251681e754e9889f9bbf45825113951 = NULL;
    PyObject *tmp_return_value = NULL;
    PyObject *exception_keeper_type_1;
    PyObject *exception_keeper_value_1;
    PyTracebackObject *exception_keeper_tb_1;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_1;

    // Actual function body.
    // Tried code:
    MAKE_OR_REUSE_FRAME( cache_frame_8251681e754e9889f9bbf45825113951, codeobj_8251681e754e9889f9bbf45825113951, module_plistlib, sizeof(void *)+sizeof(void *) );
    frame_8251681e754e9889f9bbf45825113951 = cache_frame_8251681e754e9889f9bbf45825113951;

    // Push the new frame as the currently active one.
    pushFrameStack( frame_8251681e754e9889f9bbf45825113951 );

    // Mark the frame object as in use, ref count 1 will be up for reuse.
    assert( Py_REFCNT( frame_8251681e754e9889f9bbf45825113951 ) == 2 ); // Frame stack

    // Framed code:
    {
        PyObject *tmp_called_instance_1;
        PyObject *tmp_call_result_1;
        PyObject *tmp_args_element_name_1;
        PyObject *tmp_args_element_name_2;
        tmp_called_instance_1 = PyExc_ValueError;
        CHECK_OBJECT( par_self );
        tmp_args_element_name_1 = par_self;
        CHECK_OBJECT( par_message );
        tmp_args_element_name_2 = par_message;
        frame_8251681e754e9889f9bbf45825113951->m_frame.f_lineno = 524;
        {
            PyObject *call_args[] = { tmp_args_element_name_1, tmp_args_element_name_2 };
            tmp_call_result_1 = CALL_METHOD_WITH_ARGS2( tmp_called_instance_1, const_str_plain___init__, call_args );
        }

        if ( tmp_call_result_1 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 524;
            type_description_1 = "oo";
            goto frame_exception_exit_1;
        }
        Py_DECREF( tmp_call_result_1 );
    }

#if 0
    RESTORE_FRAME_EXCEPTION( frame_8251681e754e9889f9bbf45825113951 );
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto frame_no_exception_1;

    frame_exception_exit_1:;

#if 0
    RESTORE_FRAME_EXCEPTION( frame_8251681e754e9889f9bbf45825113951 );
#endif

    if ( exception_tb == NULL )
    {
        exception_tb = MAKE_TRACEBACK( frame_8251681e754e9889f9bbf45825113951, exception_lineno );
    }
    else if ( exception_tb->tb_frame != &frame_8251681e754e9889f9bbf45825113951->m_frame )
    {
        exception_tb = ADD_TRACEBACK( exception_tb, frame_8251681e754e9889f9bbf45825113951, exception_lineno );
    }

    // Attachs locals to frame if any.
    Nuitka_Frame_AttachLocals(
        (struct Nuitka_FrameObject *)frame_8251681e754e9889f9bbf45825113951,
        type_description_1,
        par_self,
        par_message
    );


    // Release cached frame.
    if ( frame_8251681e754e9889f9bbf45825113951 == cache_frame_8251681e754e9889f9bbf45825113951 )
    {
        Py_DECREF( frame_8251681e754e9889f9bbf45825113951 );
    }
    cache_frame_8251681e754e9889f9bbf45825113951 = NULL;

    assertFrameObject( frame_8251681e754e9889f9bbf45825113951 );

    // Put the previous frame back on top.
    popFrameStack();

    // Return the error.
    goto try_except_handler_1;

    frame_no_exception_1:;
    tmp_return_value = Py_None;
    Py_INCREF( tmp_return_value );
    goto try_return_handler_1;
    // tried codes exits in all cases
    NUITKA_CANNOT_GET_HERE( plistlib$$$function_48___init__ );
    return NULL;
    // Return handler code:
    try_return_handler_1:;
    CHECK_OBJECT( (PyObject *)par_self );
    Py_DECREF( par_self );
    par_self = NULL;

    CHECK_OBJECT( (PyObject *)par_message );
    Py_DECREF( par_message );
    par_message = NULL;

    goto function_return_exit;
    // Exception handler code:
    try_except_handler_1:;
    exception_keeper_type_1 = exception_type;
    exception_keeper_value_1 = exception_value;
    exception_keeper_tb_1 = exception_tb;
    exception_keeper_lineno_1 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    CHECK_OBJECT( (PyObject *)par_self );
    Py_DECREF( par_self );
    par_self = NULL;

    CHECK_OBJECT( (PyObject *)par_message );
    Py_DECREF( par_message );
    par_message = NULL;

    // Re-raise.
    exception_type = exception_keeper_type_1;
    exception_value = exception_keeper_value_1;
    exception_tb = exception_keeper_tb_1;
    exception_lineno = exception_keeper_lineno_1;

    goto function_exception_exit;
    // End of try:

    // Return statement must have exited already.
    NUITKA_CANNOT_GET_HERE( plistlib$$$function_48___init__ );
    return NULL;

function_exception_exit:
    assert( exception_type );
    RESTORE_ERROR_OCCURRED( exception_type, exception_value, exception_tb );

    return NULL;

function_return_exit:
   // Function cleanup code if any.


   // Actual function exit with return value, making sure we did not make
   // the error status worse despite non-NULL return.
   CHECK_OBJECT( tmp_return_value );
   assert( had_error || !ERROR_OCCURRED() );
   return tmp_return_value;
}


static PyObject *impl_plistlib$$$function_49___init__( struct Nuitka_FunctionObject const *self, PyObject **python_pars )
{
    // Preserve error status for checks
#ifndef __NUITKA_NO_ASSERT__
    NUITKA_MAY_BE_UNUSED bool had_error = ERROR_OCCURRED();
#endif

    // Local variable declarations.
    PyObject *par_self = python_pars[ 0 ];
    PyObject *par_use_builtin_types = python_pars[ 1 ];
    PyObject *par_dict_type = python_pars[ 2 ];
    struct Nuitka_FrameObject *frame_3a1d2301131a3b19b93316b3230ee924;
    NUITKA_MAY_BE_UNUSED char const *type_description_1 = NULL;
    bool tmp_result;
    PyObject *exception_type = NULL;
    PyObject *exception_value = NULL;
    PyTracebackObject *exception_tb = NULL;
    NUITKA_MAY_BE_UNUSED int exception_lineno = 0;
    static struct Nuitka_FrameObject *cache_frame_3a1d2301131a3b19b93316b3230ee924 = NULL;
    PyObject *tmp_return_value = NULL;
    PyObject *exception_keeper_type_1;
    PyObject *exception_keeper_value_1;
    PyTracebackObject *exception_keeper_tb_1;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_1;

    // Actual function body.
    // Tried code:
    MAKE_OR_REUSE_FRAME( cache_frame_3a1d2301131a3b19b93316b3230ee924, codeobj_3a1d2301131a3b19b93316b3230ee924, module_plistlib, sizeof(void *)+sizeof(void *)+sizeof(void *) );
    frame_3a1d2301131a3b19b93316b3230ee924 = cache_frame_3a1d2301131a3b19b93316b3230ee924;

    // Push the new frame as the currently active one.
    pushFrameStack( frame_3a1d2301131a3b19b93316b3230ee924 );

    // Mark the frame object as in use, ref count 1 will be up for reuse.
    assert( Py_REFCNT( frame_3a1d2301131a3b19b93316b3230ee924 ) == 2 ); // Frame stack

    // Framed code:
    {
        PyObject *tmp_assattr_name_1;
        PyObject *tmp_assattr_target_1;
        CHECK_OBJECT( par_use_builtin_types );
        tmp_assattr_name_1 = par_use_builtin_types;
        CHECK_OBJECT( par_self );
        tmp_assattr_target_1 = par_self;
        tmp_result = SET_ATTRIBUTE( tmp_assattr_target_1, const_str_plain__use_builtin_types, tmp_assattr_name_1 );
        if ( tmp_result == false )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 539;
            type_description_1 = "ooo";
            goto frame_exception_exit_1;
        }
    }
    {
        PyObject *tmp_assattr_name_2;
        PyObject *tmp_assattr_target_2;
        CHECK_OBJECT( par_dict_type );
        tmp_assattr_name_2 = par_dict_type;
        CHECK_OBJECT( par_self );
        tmp_assattr_target_2 = par_self;
        tmp_result = SET_ATTRIBUTE( tmp_assattr_target_2, const_str_plain__dict_type, tmp_assattr_name_2 );
        if ( tmp_result == false )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 540;
            type_description_1 = "ooo";
            goto frame_exception_exit_1;
        }
    }

#if 0
    RESTORE_FRAME_EXCEPTION( frame_3a1d2301131a3b19b93316b3230ee924 );
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto frame_no_exception_1;

    frame_exception_exit_1:;

#if 0
    RESTORE_FRAME_EXCEPTION( frame_3a1d2301131a3b19b93316b3230ee924 );
#endif

    if ( exception_tb == NULL )
    {
        exception_tb = MAKE_TRACEBACK( frame_3a1d2301131a3b19b93316b3230ee924, exception_lineno );
    }
    else if ( exception_tb->tb_frame != &frame_3a1d2301131a3b19b93316b3230ee924->m_frame )
    {
        exception_tb = ADD_TRACEBACK( exception_tb, frame_3a1d2301131a3b19b93316b3230ee924, exception_lineno );
    }

    // Attachs locals to frame if any.
    Nuitka_Frame_AttachLocals(
        (struct Nuitka_FrameObject *)frame_3a1d2301131a3b19b93316b3230ee924,
        type_description_1,
        par_self,
        par_use_builtin_types,
        par_dict_type
    );


    // Release cached frame.
    if ( frame_3a1d2301131a3b19b93316b3230ee924 == cache_frame_3a1d2301131a3b19b93316b3230ee924 )
    {
        Py_DECREF( frame_3a1d2301131a3b19b93316b3230ee924 );
    }
    cache_frame_3a1d2301131a3b19b93316b3230ee924 = NULL;

    assertFrameObject( frame_3a1d2301131a3b19b93316b3230ee924 );

    // Put the previous frame back on top.
    popFrameStack();

    // Return the error.
    goto try_except_handler_1;

    frame_no_exception_1:;
    tmp_return_value = Py_None;
    Py_INCREF( tmp_return_value );
    goto try_return_handler_1;
    // tried codes exits in all cases
    NUITKA_CANNOT_GET_HERE( plistlib$$$function_49___init__ );
    return NULL;
    // Return handler code:
    try_return_handler_1:;
    CHECK_OBJECT( (PyObject *)par_self );
    Py_DECREF( par_self );
    par_self = NULL;

    CHECK_OBJECT( (PyObject *)par_use_builtin_types );
    Py_DECREF( par_use_builtin_types );
    par_use_builtin_types = NULL;

    CHECK_OBJECT( (PyObject *)par_dict_type );
    Py_DECREF( par_dict_type );
    par_dict_type = NULL;

    goto function_return_exit;
    // Exception handler code:
    try_except_handler_1:;
    exception_keeper_type_1 = exception_type;
    exception_keeper_value_1 = exception_value;
    exception_keeper_tb_1 = exception_tb;
    exception_keeper_lineno_1 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    CHECK_OBJECT( (PyObject *)par_self );
    Py_DECREF( par_self );
    par_self = NULL;

    CHECK_OBJECT( (PyObject *)par_use_builtin_types );
    Py_DECREF( par_use_builtin_types );
    par_use_builtin_types = NULL;

    CHECK_OBJECT( (PyObject *)par_dict_type );
    Py_DECREF( par_dict_type );
    par_dict_type = NULL;

    // Re-raise.
    exception_type = exception_keeper_type_1;
    exception_value = exception_keeper_value_1;
    exception_tb = exception_keeper_tb_1;
    exception_lineno = exception_keeper_lineno_1;

    goto function_exception_exit;
    // End of try:

    // Return statement must have exited already.
    NUITKA_CANNOT_GET_HERE( plistlib$$$function_49___init__ );
    return NULL;

function_exception_exit:
    assert( exception_type );
    RESTORE_ERROR_OCCURRED( exception_type, exception_value, exception_tb );

    return NULL;

function_return_exit:
   // Function cleanup code if any.


   // Actual function exit with return value, making sure we did not make
   // the error status worse despite non-NULL return.
   CHECK_OBJECT( tmp_return_value );
   assert( had_error || !ERROR_OCCURRED() );
   return tmp_return_value;
}


static PyObject *impl_plistlib$$$function_50_parse( struct Nuitka_FunctionObject const *self, PyObject **python_pars )
{
    // Preserve error status for checks
#ifndef __NUITKA_NO_ASSERT__
    NUITKA_MAY_BE_UNUSED bool had_error = ERROR_OCCURRED();
#endif

    // Local variable declarations.
    PyObject *par_self = python_pars[ 0 ];
    PyObject *par_fp = python_pars[ 1 ];
    PyObject *var_trailer = NULL;
    PyObject *var_offset_size = NULL;
    PyObject *var_num_objects = NULL;
    PyObject *var_top_object = NULL;
    PyObject *var_offset_table_offset = NULL;
    PyObject *tmp_tuple_unpack_1__element_1 = NULL;
    PyObject *tmp_tuple_unpack_1__element_2 = NULL;
    PyObject *tmp_tuple_unpack_1__element_3 = NULL;
    PyObject *tmp_tuple_unpack_1__element_4 = NULL;
    PyObject *tmp_tuple_unpack_1__element_5 = NULL;
    PyObject *tmp_tuple_unpack_1__source_iter = NULL;
    struct Nuitka_FrameObject *frame_f6994825c2e6565735c8665b48060b34;
    NUITKA_MAY_BE_UNUSED char const *type_description_1 = NULL;
    bool tmp_result;
    PyObject *exception_type = NULL;
    PyObject *exception_value = NULL;
    PyTracebackObject *exception_tb = NULL;
    NUITKA_MAY_BE_UNUSED int exception_lineno = 0;
    int tmp_res;
    PyObject *tmp_iterator_attempt;
    PyObject *exception_keeper_type_1;
    PyObject *exception_keeper_value_1;
    PyTracebackObject *exception_keeper_tb_1;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_1;
    PyObject *exception_keeper_type_2;
    PyObject *exception_keeper_value_2;
    PyTracebackObject *exception_keeper_tb_2;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_2;
    PyObject *tmp_return_value = NULL;
    PyObject *exception_keeper_type_3;
    PyObject *exception_keeper_value_3;
    PyTracebackObject *exception_keeper_tb_3;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_3;
    PyObject *exception_preserved_type_1;
    PyObject *exception_preserved_value_1;
    PyTracebackObject *exception_preserved_tb_1;
    PyObject *exception_keeper_type_4;
    PyObject *exception_keeper_value_4;
    PyTracebackObject *exception_keeper_tb_4;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_4;
    static struct Nuitka_FrameObject *cache_frame_f6994825c2e6565735c8665b48060b34 = NULL;
    PyObject *exception_keeper_type_5;
    PyObject *exception_keeper_value_5;
    PyTracebackObject *exception_keeper_tb_5;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_5;

    // Actual function body.
    // Tried code:
    MAKE_OR_REUSE_FRAME( cache_frame_f6994825c2e6565735c8665b48060b34, codeobj_f6994825c2e6565735c8665b48060b34, module_plistlib, sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *) );
    frame_f6994825c2e6565735c8665b48060b34 = cache_frame_f6994825c2e6565735c8665b48060b34;

    // Push the new frame as the currently active one.
    pushFrameStack( frame_f6994825c2e6565735c8665b48060b34 );

    // Mark the frame object as in use, ref count 1 will be up for reuse.
    assert( Py_REFCNT( frame_f6994825c2e6565735c8665b48060b34 ) == 2 ); // Frame stack

    // Framed code:
    // Tried code:
    {
        PyObject *tmp_assattr_name_1;
        PyObject *tmp_assattr_target_1;
        CHECK_OBJECT( par_fp );
        tmp_assattr_name_1 = par_fp;
        CHECK_OBJECT( par_self );
        tmp_assattr_target_1 = par_self;
        tmp_result = SET_ATTRIBUTE( tmp_assattr_target_1, const_str_plain__fp, tmp_assattr_name_1 );
        if ( tmp_result == false )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 549;
            type_description_1 = "ooooooo";
            goto try_except_handler_2;
        }
    }
    {
        PyObject *tmp_called_name_1;
        PyObject *tmp_source_name_1;
        PyObject *tmp_source_name_2;
        PyObject *tmp_call_result_1;
        PyObject *tmp_args_element_name_1;
        PyObject *tmp_args_element_name_2;
        PyObject *tmp_source_name_3;
        PyObject *tmp_mvar_value_1;
        CHECK_OBJECT( par_self );
        tmp_source_name_2 = par_self;
        tmp_source_name_1 = LOOKUP_ATTRIBUTE( tmp_source_name_2, const_str_plain__fp );
        if ( tmp_source_name_1 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 550;
            type_description_1 = "ooooooo";
            goto try_except_handler_2;
        }
        tmp_called_name_1 = LOOKUP_ATTRIBUTE( tmp_source_name_1, const_str_plain_seek );
        Py_DECREF( tmp_source_name_1 );
        if ( tmp_called_name_1 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 550;
            type_description_1 = "ooooooo";
            goto try_except_handler_2;
        }
        tmp_args_element_name_1 = const_int_neg_32;
        tmp_mvar_value_1 = GET_STRING_DICT_VALUE( moduledict_plistlib, (Nuitka_StringObject *)const_str_plain_os );

        if (unlikely( tmp_mvar_value_1 == NULL ))
        {
            tmp_mvar_value_1 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_os );
        }

        if ( tmp_mvar_value_1 == NULL )
        {
            Py_DECREF( tmp_called_name_1 );
            exception_type = PyExc_NameError;
            Py_INCREF( exception_type );
            exception_value = PyUnicode_FromFormat( "name '%s' is not defined", "os" );
            exception_tb = NULL;
            NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
            CHAIN_EXCEPTION( exception_value );

            exception_lineno = 550;
            type_description_1 = "ooooooo";
            goto try_except_handler_2;
        }

        tmp_source_name_3 = tmp_mvar_value_1;
        tmp_args_element_name_2 = LOOKUP_ATTRIBUTE( tmp_source_name_3, const_str_plain_SEEK_END );
        if ( tmp_args_element_name_2 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
            Py_DECREF( tmp_called_name_1 );

            exception_lineno = 550;
            type_description_1 = "ooooooo";
            goto try_except_handler_2;
        }
        frame_f6994825c2e6565735c8665b48060b34->m_frame.f_lineno = 550;
        {
            PyObject *call_args[] = { tmp_args_element_name_1, tmp_args_element_name_2 };
            tmp_call_result_1 = CALL_FUNCTION_WITH_ARGS2( tmp_called_name_1, call_args );
        }

        Py_DECREF( tmp_called_name_1 );
        Py_DECREF( tmp_args_element_name_2 );
        if ( tmp_call_result_1 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 550;
            type_description_1 = "ooooooo";
            goto try_except_handler_2;
        }
        Py_DECREF( tmp_call_result_1 );
    }
    {
        PyObject *tmp_assign_source_1;
        PyObject *tmp_called_instance_1;
        PyObject *tmp_source_name_4;
        CHECK_OBJECT( par_self );
        tmp_source_name_4 = par_self;
        tmp_called_instance_1 = LOOKUP_ATTRIBUTE( tmp_source_name_4, const_str_plain__fp );
        if ( tmp_called_instance_1 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 551;
            type_description_1 = "ooooooo";
            goto try_except_handler_2;
        }
        frame_f6994825c2e6565735c8665b48060b34->m_frame.f_lineno = 551;
        tmp_assign_source_1 = CALL_METHOD_WITH_ARGS1( tmp_called_instance_1, const_str_plain_read, &PyTuple_GET_ITEM( const_tuple_int_pos_32_tuple, 0 ) );

        Py_DECREF( tmp_called_instance_1 );
        if ( tmp_assign_source_1 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 551;
            type_description_1 = "ooooooo";
            goto try_except_handler_2;
        }
        assert( var_trailer == NULL );
        var_trailer = tmp_assign_source_1;
    }
    {
        nuitka_bool tmp_condition_result_1;
        PyObject *tmp_compexpr_left_1;
        PyObject *tmp_compexpr_right_1;
        PyObject *tmp_len_arg_1;
        CHECK_OBJECT( var_trailer );
        tmp_len_arg_1 = var_trailer;
        tmp_compexpr_left_1 = BUILTIN_LEN( tmp_len_arg_1 );
        if ( tmp_compexpr_left_1 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 552;
            type_description_1 = "ooooooo";
            goto try_except_handler_2;
        }
        tmp_compexpr_right_1 = const_int_pos_32;
        tmp_res = RICH_COMPARE_BOOL_NOTEQ_OBJECT_OBJECT( tmp_compexpr_left_1, tmp_compexpr_right_1 );
        Py_DECREF( tmp_compexpr_left_1 );
        assert( !(tmp_res == -1) );
        tmp_condition_result_1 = ( tmp_res != 0 ) ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
        if ( tmp_condition_result_1 == NUITKA_BOOL_TRUE )
        {
            goto branch_yes_1;
        }
        else
        {
            goto branch_no_1;
        }
        branch_yes_1:;
        {
            PyObject *tmp_raise_type_1;
            PyObject *tmp_called_name_2;
            PyObject *tmp_mvar_value_2;
            tmp_mvar_value_2 = GET_STRING_DICT_VALUE( moduledict_plistlib, (Nuitka_StringObject *)const_str_plain_InvalidFileException );

            if (unlikely( tmp_mvar_value_2 == NULL ))
            {
                tmp_mvar_value_2 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_InvalidFileException );
            }

            if ( tmp_mvar_value_2 == NULL )
            {

                exception_type = PyExc_NameError;
                Py_INCREF( exception_type );
                exception_value = PyUnicode_FromFormat( "name '%s' is not defined", "InvalidFileException" );
                exception_tb = NULL;
                NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
                CHAIN_EXCEPTION( exception_value );

                exception_lineno = 553;
                type_description_1 = "ooooooo";
                goto try_except_handler_2;
            }

            tmp_called_name_2 = tmp_mvar_value_2;
            frame_f6994825c2e6565735c8665b48060b34->m_frame.f_lineno = 553;
            tmp_raise_type_1 = CALL_FUNCTION_NO_ARGS( tmp_called_name_2 );
            if ( tmp_raise_type_1 == NULL )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 553;
                type_description_1 = "ooooooo";
                goto try_except_handler_2;
            }
            exception_type = tmp_raise_type_1;
            exception_lineno = 553;
            RAISE_EXCEPTION_WITH_TYPE( &exception_type, &exception_value, &exception_tb );
            type_description_1 = "ooooooo";
            goto try_except_handler_2;
        }
        branch_no_1:;
    }
    // Tried code:
    {
        PyObject *tmp_assign_source_2;
        PyObject *tmp_iter_arg_1;
        PyObject *tmp_called_instance_2;
        PyObject *tmp_mvar_value_3;
        PyObject *tmp_args_element_name_3;
        PyObject *tmp_args_element_name_4;
        tmp_mvar_value_3 = GET_STRING_DICT_VALUE( moduledict_plistlib, (Nuitka_StringObject *)const_str_plain_struct );

        if (unlikely( tmp_mvar_value_3 == NULL ))
        {
            tmp_mvar_value_3 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_struct );
        }

        if ( tmp_mvar_value_3 == NULL )
        {

            exception_type = PyExc_NameError;
            Py_INCREF( exception_type );
            exception_value = PyUnicode_FromFormat( "name '%s' is not defined", "struct" );
            exception_tb = NULL;
            NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
            CHAIN_EXCEPTION( exception_value );

            exception_lineno = 557;
            type_description_1 = "ooooooo";
            goto try_except_handler_3;
        }

        tmp_called_instance_2 = tmp_mvar_value_3;
        tmp_args_element_name_3 = const_str_digest_4f64dd367e7c9df0d6009a67327d443e;
        CHECK_OBJECT( var_trailer );
        tmp_args_element_name_4 = var_trailer;
        frame_f6994825c2e6565735c8665b48060b34->m_frame.f_lineno = 557;
        {
            PyObject *call_args[] = { tmp_args_element_name_3, tmp_args_element_name_4 };
            tmp_iter_arg_1 = CALL_METHOD_WITH_ARGS2( tmp_called_instance_2, const_str_plain_unpack, call_args );
        }

        if ( tmp_iter_arg_1 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 557;
            type_description_1 = "ooooooo";
            goto try_except_handler_3;
        }
        tmp_assign_source_2 = MAKE_UNPACK_ITERATOR( tmp_iter_arg_1 );
        Py_DECREF( tmp_iter_arg_1 );
        if ( tmp_assign_source_2 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 554;
            type_description_1 = "ooooooo";
            goto try_except_handler_3;
        }
        assert( tmp_tuple_unpack_1__source_iter == NULL );
        tmp_tuple_unpack_1__source_iter = tmp_assign_source_2;
    }
    // Tried code:
    {
        PyObject *tmp_assign_source_3;
        PyObject *tmp_unpack_1;
        CHECK_OBJECT( tmp_tuple_unpack_1__source_iter );
        tmp_unpack_1 = tmp_tuple_unpack_1__source_iter;
        tmp_assign_source_3 = UNPACK_NEXT( tmp_unpack_1, 0, 5 );
        if ( tmp_assign_source_3 == NULL )
        {
            if ( !ERROR_OCCURRED() )
            {
                exception_type = PyExc_StopIteration;
                Py_INCREF( exception_type );
                exception_value = NULL;
                exception_tb = NULL;
            }
            else
            {
                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
            }


            type_description_1 = "ooooooo";
            exception_lineno = 554;
            goto try_except_handler_4;
        }
        assert( tmp_tuple_unpack_1__element_1 == NULL );
        tmp_tuple_unpack_1__element_1 = tmp_assign_source_3;
    }
    {
        PyObject *tmp_assign_source_4;
        PyObject *tmp_unpack_2;
        CHECK_OBJECT( tmp_tuple_unpack_1__source_iter );
        tmp_unpack_2 = tmp_tuple_unpack_1__source_iter;
        tmp_assign_source_4 = UNPACK_NEXT( tmp_unpack_2, 1, 5 );
        if ( tmp_assign_source_4 == NULL )
        {
            if ( !ERROR_OCCURRED() )
            {
                exception_type = PyExc_StopIteration;
                Py_INCREF( exception_type );
                exception_value = NULL;
                exception_tb = NULL;
            }
            else
            {
                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
            }


            type_description_1 = "ooooooo";
            exception_lineno = 554;
            goto try_except_handler_4;
        }
        assert( tmp_tuple_unpack_1__element_2 == NULL );
        tmp_tuple_unpack_1__element_2 = tmp_assign_source_4;
    }
    {
        PyObject *tmp_assign_source_5;
        PyObject *tmp_unpack_3;
        CHECK_OBJECT( tmp_tuple_unpack_1__source_iter );
        tmp_unpack_3 = tmp_tuple_unpack_1__source_iter;
        tmp_assign_source_5 = UNPACK_NEXT( tmp_unpack_3, 2, 5 );
        if ( tmp_assign_source_5 == NULL )
        {
            if ( !ERROR_OCCURRED() )
            {
                exception_type = PyExc_StopIteration;
                Py_INCREF( exception_type );
                exception_value = NULL;
                exception_tb = NULL;
            }
            else
            {
                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
            }


            type_description_1 = "ooooooo";
            exception_lineno = 554;
            goto try_except_handler_4;
        }
        assert( tmp_tuple_unpack_1__element_3 == NULL );
        tmp_tuple_unpack_1__element_3 = tmp_assign_source_5;
    }
    {
        PyObject *tmp_assign_source_6;
        PyObject *tmp_unpack_4;
        CHECK_OBJECT( tmp_tuple_unpack_1__source_iter );
        tmp_unpack_4 = tmp_tuple_unpack_1__source_iter;
        tmp_assign_source_6 = UNPACK_NEXT( tmp_unpack_4, 3, 5 );
        if ( tmp_assign_source_6 == NULL )
        {
            if ( !ERROR_OCCURRED() )
            {
                exception_type = PyExc_StopIteration;
                Py_INCREF( exception_type );
                exception_value = NULL;
                exception_tb = NULL;
            }
            else
            {
                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
            }


            type_description_1 = "ooooooo";
            exception_lineno = 554;
            goto try_except_handler_4;
        }
        assert( tmp_tuple_unpack_1__element_4 == NULL );
        tmp_tuple_unpack_1__element_4 = tmp_assign_source_6;
    }
    {
        PyObject *tmp_assign_source_7;
        PyObject *tmp_unpack_5;
        CHECK_OBJECT( tmp_tuple_unpack_1__source_iter );
        tmp_unpack_5 = tmp_tuple_unpack_1__source_iter;
        tmp_assign_source_7 = UNPACK_NEXT( tmp_unpack_5, 4, 5 );
        if ( tmp_assign_source_7 == NULL )
        {
            if ( !ERROR_OCCURRED() )
            {
                exception_type = PyExc_StopIteration;
                Py_INCREF( exception_type );
                exception_value = NULL;
                exception_tb = NULL;
            }
            else
            {
                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
            }


            type_description_1 = "ooooooo";
            exception_lineno = 554;
            goto try_except_handler_4;
        }
        assert( tmp_tuple_unpack_1__element_5 == NULL );
        tmp_tuple_unpack_1__element_5 = tmp_assign_source_7;
    }
    {
        PyObject *tmp_iterator_name_1;
        CHECK_OBJECT( tmp_tuple_unpack_1__source_iter );
        tmp_iterator_name_1 = tmp_tuple_unpack_1__source_iter;
        // Check if iterator has left-over elements.
        CHECK_OBJECT( tmp_iterator_name_1 ); assert( HAS_ITERNEXT( tmp_iterator_name_1 ) );

        tmp_iterator_attempt = (*Py_TYPE( tmp_iterator_name_1 )->tp_iternext)( tmp_iterator_name_1 );

        if (likely( tmp_iterator_attempt == NULL ))
        {
            PyObject *error = GET_ERROR_OCCURRED();

            if ( error != NULL )
            {
                if ( EXCEPTION_MATCH_BOOL_SINGLE( error, PyExc_StopIteration ))
                {
                    CLEAR_ERROR_OCCURRED();
                }
                else
                {
                    FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );

                    type_description_1 = "ooooooo";
                    exception_lineno = 554;
                    goto try_except_handler_4;
                }
            }
        }
        else
        {
            Py_DECREF( tmp_iterator_attempt );

            // TODO: Could avoid PyErr_Format.
#if PYTHON_VERSION < 300
            PyErr_Format( PyExc_ValueError, "too many values to unpack" );
#else
            PyErr_Format( PyExc_ValueError, "too many values to unpack (expected 5)" );
#endif
            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );

            type_description_1 = "ooooooo";
            exception_lineno = 554;
            goto try_except_handler_4;
        }
    }
    goto try_end_1;
    // Exception handler code:
    try_except_handler_4:;
    exception_keeper_type_1 = exception_type;
    exception_keeper_value_1 = exception_value;
    exception_keeper_tb_1 = exception_tb;
    exception_keeper_lineno_1 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    CHECK_OBJECT( (PyObject *)tmp_tuple_unpack_1__source_iter );
    Py_DECREF( tmp_tuple_unpack_1__source_iter );
    tmp_tuple_unpack_1__source_iter = NULL;

    // Re-raise.
    exception_type = exception_keeper_type_1;
    exception_value = exception_keeper_value_1;
    exception_tb = exception_keeper_tb_1;
    exception_lineno = exception_keeper_lineno_1;

    goto try_except_handler_3;
    // End of try:
    try_end_1:;
    CHECK_OBJECT( (PyObject *)tmp_tuple_unpack_1__source_iter );
    Py_DECREF( tmp_tuple_unpack_1__source_iter );
    tmp_tuple_unpack_1__source_iter = NULL;

    {
        PyObject *tmp_assign_source_8;
        CHECK_OBJECT( tmp_tuple_unpack_1__element_1 );
        tmp_assign_source_8 = tmp_tuple_unpack_1__element_1;
        assert( var_offset_size == NULL );
        Py_INCREF( tmp_assign_source_8 );
        var_offset_size = tmp_assign_source_8;
    }
    Py_XDECREF( tmp_tuple_unpack_1__element_1 );
    tmp_tuple_unpack_1__element_1 = NULL;

    {
        PyObject *tmp_assattr_name_2;
        PyObject *tmp_assattr_target_2;
        CHECK_OBJECT( tmp_tuple_unpack_1__element_2 );
        tmp_assattr_name_2 = tmp_tuple_unpack_1__element_2;
        CHECK_OBJECT( par_self );
        tmp_assattr_target_2 = par_self;
        tmp_result = SET_ATTRIBUTE( tmp_assattr_target_2, const_str_plain__ref_size, tmp_assattr_name_2 );
        if ( tmp_result == false )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 554;
            type_description_1 = "ooooooo";
            goto try_except_handler_3;
        }
    }
    goto try_end_2;
    // Exception handler code:
    try_except_handler_3:;
    exception_keeper_type_2 = exception_type;
    exception_keeper_value_2 = exception_value;
    exception_keeper_tb_2 = exception_tb;
    exception_keeper_lineno_2 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    Py_XDECREF( tmp_tuple_unpack_1__element_1 );
    tmp_tuple_unpack_1__element_1 = NULL;

    Py_XDECREF( tmp_tuple_unpack_1__element_2 );
    tmp_tuple_unpack_1__element_2 = NULL;

    Py_XDECREF( tmp_tuple_unpack_1__element_3 );
    tmp_tuple_unpack_1__element_3 = NULL;

    Py_XDECREF( tmp_tuple_unpack_1__element_4 );
    tmp_tuple_unpack_1__element_4 = NULL;

    Py_XDECREF( tmp_tuple_unpack_1__element_5 );
    tmp_tuple_unpack_1__element_5 = NULL;

    // Re-raise.
    exception_type = exception_keeper_type_2;
    exception_value = exception_keeper_value_2;
    exception_tb = exception_keeper_tb_2;
    exception_lineno = exception_keeper_lineno_2;

    goto try_except_handler_2;
    // End of try:
    try_end_2:;
    Py_XDECREF( tmp_tuple_unpack_1__element_2 );
    tmp_tuple_unpack_1__element_2 = NULL;

    {
        PyObject *tmp_assign_source_9;
        CHECK_OBJECT( tmp_tuple_unpack_1__element_3 );
        tmp_assign_source_9 = tmp_tuple_unpack_1__element_3;
        assert( var_num_objects == NULL );
        Py_INCREF( tmp_assign_source_9 );
        var_num_objects = tmp_assign_source_9;
    }
    Py_XDECREF( tmp_tuple_unpack_1__element_3 );
    tmp_tuple_unpack_1__element_3 = NULL;

    {
        PyObject *tmp_assign_source_10;
        CHECK_OBJECT( tmp_tuple_unpack_1__element_4 );
        tmp_assign_source_10 = tmp_tuple_unpack_1__element_4;
        assert( var_top_object == NULL );
        Py_INCREF( tmp_assign_source_10 );
        var_top_object = tmp_assign_source_10;
    }
    Py_XDECREF( tmp_tuple_unpack_1__element_4 );
    tmp_tuple_unpack_1__element_4 = NULL;

    {
        PyObject *tmp_assign_source_11;
        CHECK_OBJECT( tmp_tuple_unpack_1__element_5 );
        tmp_assign_source_11 = tmp_tuple_unpack_1__element_5;
        assert( var_offset_table_offset == NULL );
        Py_INCREF( tmp_assign_source_11 );
        var_offset_table_offset = tmp_assign_source_11;
    }
    Py_XDECREF( tmp_tuple_unpack_1__element_5 );
    tmp_tuple_unpack_1__element_5 = NULL;

    {
        PyObject *tmp_called_instance_3;
        PyObject *tmp_source_name_5;
        PyObject *tmp_call_result_2;
        PyObject *tmp_args_element_name_5;
        CHECK_OBJECT( par_self );
        tmp_source_name_5 = par_self;
        tmp_called_instance_3 = LOOKUP_ATTRIBUTE( tmp_source_name_5, const_str_plain__fp );
        if ( tmp_called_instance_3 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 558;
            type_description_1 = "ooooooo";
            goto try_except_handler_2;
        }
        CHECK_OBJECT( var_offset_table_offset );
        tmp_args_element_name_5 = var_offset_table_offset;
        frame_f6994825c2e6565735c8665b48060b34->m_frame.f_lineno = 558;
        {
            PyObject *call_args[] = { tmp_args_element_name_5 };
            tmp_call_result_2 = CALL_METHOD_WITH_ARGS1( tmp_called_instance_3, const_str_plain_seek, call_args );
        }

        Py_DECREF( tmp_called_instance_3 );
        if ( tmp_call_result_2 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 558;
            type_description_1 = "ooooooo";
            goto try_except_handler_2;
        }
        Py_DECREF( tmp_call_result_2 );
    }
    {
        PyObject *tmp_assattr_name_3;
        PyObject *tmp_called_instance_4;
        PyObject *tmp_args_element_name_6;
        PyObject *tmp_args_element_name_7;
        PyObject *tmp_assattr_target_3;
        CHECK_OBJECT( par_self );
        tmp_called_instance_4 = par_self;
        CHECK_OBJECT( var_num_objects );
        tmp_args_element_name_6 = var_num_objects;
        CHECK_OBJECT( var_offset_size );
        tmp_args_element_name_7 = var_offset_size;
        frame_f6994825c2e6565735c8665b48060b34->m_frame.f_lineno = 559;
        {
            PyObject *call_args[] = { tmp_args_element_name_6, tmp_args_element_name_7 };
            tmp_assattr_name_3 = CALL_METHOD_WITH_ARGS2( tmp_called_instance_4, const_str_plain__read_ints, call_args );
        }

        if ( tmp_assattr_name_3 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 559;
            type_description_1 = "ooooooo";
            goto try_except_handler_2;
        }
        CHECK_OBJECT( par_self );
        tmp_assattr_target_3 = par_self;
        tmp_result = SET_ATTRIBUTE( tmp_assattr_target_3, const_str_plain__object_offsets, tmp_assattr_name_3 );
        Py_DECREF( tmp_assattr_name_3 );
        if ( tmp_result == false )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 559;
            type_description_1 = "ooooooo";
            goto try_except_handler_2;
        }
    }
    {
        PyObject *tmp_assattr_name_4;
        PyObject *tmp_left_name_1;
        PyObject *tmp_list_element_1;
        PyObject *tmp_mvar_value_4;
        PyObject *tmp_right_name_1;
        PyObject *tmp_assattr_target_4;
        tmp_mvar_value_4 = GET_STRING_DICT_VALUE( moduledict_plistlib, (Nuitka_StringObject *)const_str_plain__undefined );

        if (unlikely( tmp_mvar_value_4 == NULL ))
        {
            tmp_mvar_value_4 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain__undefined );
        }

        if ( tmp_mvar_value_4 == NULL )
        {

            exception_type = PyExc_NameError;
            Py_INCREF( exception_type );
            exception_value = PyUnicode_FromFormat( "name '%s' is not defined", "_undefined" );
            exception_tb = NULL;
            NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
            CHAIN_EXCEPTION( exception_value );

            exception_lineno = 560;
            type_description_1 = "ooooooo";
            goto try_except_handler_2;
        }

        tmp_list_element_1 = tmp_mvar_value_4;
        tmp_left_name_1 = PyList_New( 1 );
        Py_INCREF( tmp_list_element_1 );
        PyList_SET_ITEM( tmp_left_name_1, 0, tmp_list_element_1 );
        CHECK_OBJECT( var_num_objects );
        tmp_right_name_1 = var_num_objects;
        tmp_assattr_name_4 = BINARY_OPERATION_MUL( tmp_left_name_1, tmp_right_name_1 );
        Py_DECREF( tmp_left_name_1 );
        if ( tmp_assattr_name_4 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 560;
            type_description_1 = "ooooooo";
            goto try_except_handler_2;
        }
        CHECK_OBJECT( par_self );
        tmp_assattr_target_4 = par_self;
        tmp_result = SET_ATTRIBUTE( tmp_assattr_target_4, const_str_plain__objects, tmp_assattr_name_4 );
        Py_DECREF( tmp_assattr_name_4 );
        if ( tmp_result == false )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 560;
            type_description_1 = "ooooooo";
            goto try_except_handler_2;
        }
    }
    {
        PyObject *tmp_called_instance_5;
        PyObject *tmp_args_element_name_8;
        CHECK_OBJECT( par_self );
        tmp_called_instance_5 = par_self;
        CHECK_OBJECT( var_top_object );
        tmp_args_element_name_8 = var_top_object;
        frame_f6994825c2e6565735c8665b48060b34->m_frame.f_lineno = 561;
        {
            PyObject *call_args[] = { tmp_args_element_name_8 };
            tmp_return_value = CALL_METHOD_WITH_ARGS1( tmp_called_instance_5, const_str_plain__read_object, call_args );
        }

        if ( tmp_return_value == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 561;
            type_description_1 = "ooooooo";
            goto try_except_handler_2;
        }
        goto frame_return_exit_1;
    }
    // tried codes exits in all cases
    NUITKA_CANNOT_GET_HERE( plistlib$$$function_50_parse );
    return NULL;
    // Exception handler code:
    try_except_handler_2:;
    exception_keeper_type_3 = exception_type;
    exception_keeper_value_3 = exception_value;
    exception_keeper_tb_3 = exception_tb;
    exception_keeper_lineno_3 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    // Preserve existing published exception.
    exception_preserved_type_1 = EXC_TYPE(PyThreadState_GET());
    Py_XINCREF( exception_preserved_type_1 );
    exception_preserved_value_1 = EXC_VALUE(PyThreadState_GET());
    Py_XINCREF( exception_preserved_value_1 );
    exception_preserved_tb_1 = (PyTracebackObject *)EXC_TRACEBACK(PyThreadState_GET());
    Py_XINCREF( exception_preserved_tb_1 );

    if ( exception_keeper_tb_3 == NULL )
    {
        exception_keeper_tb_3 = MAKE_TRACEBACK( frame_f6994825c2e6565735c8665b48060b34, exception_keeper_lineno_3 );
    }
    else if ( exception_keeper_lineno_3 != 0 )
    {
        exception_keeper_tb_3 = ADD_TRACEBACK( exception_keeper_tb_3, frame_f6994825c2e6565735c8665b48060b34, exception_keeper_lineno_3 );
    }

    NORMALIZE_EXCEPTION( &exception_keeper_type_3, &exception_keeper_value_3, &exception_keeper_tb_3 );
    PyException_SetTraceback( exception_keeper_value_3, (PyObject *)exception_keeper_tb_3 );
    PUBLISH_EXCEPTION( &exception_keeper_type_3, &exception_keeper_value_3, &exception_keeper_tb_3 );
    // Tried code:
    {
        nuitka_bool tmp_condition_result_2;
        PyObject *tmp_compexpr_left_2;
        PyObject *tmp_compexpr_right_2;
        PyObject *tmp_tuple_element_1;
        PyObject *tmp_source_name_6;
        PyObject *tmp_mvar_value_5;
        tmp_compexpr_left_2 = EXC_TYPE(PyThreadState_GET());
        tmp_tuple_element_1 = PyExc_OSError;
        tmp_compexpr_right_2 = PyTuple_New( 5 );
        Py_INCREF( tmp_tuple_element_1 );
        PyTuple_SET_ITEM( tmp_compexpr_right_2, 0, tmp_tuple_element_1 );
        tmp_tuple_element_1 = PyExc_IndexError;
        Py_INCREF( tmp_tuple_element_1 );
        PyTuple_SET_ITEM( tmp_compexpr_right_2, 1, tmp_tuple_element_1 );
        tmp_mvar_value_5 = GET_STRING_DICT_VALUE( moduledict_plistlib, (Nuitka_StringObject *)const_str_plain_struct );

        if (unlikely( tmp_mvar_value_5 == NULL ))
        {
            tmp_mvar_value_5 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_struct );
        }

        if ( tmp_mvar_value_5 == NULL )
        {
            Py_DECREF( tmp_compexpr_right_2 );
            exception_type = PyExc_NameError;
            Py_INCREF( exception_type );
            exception_value = PyUnicode_FromFormat( "name '%s' is not defined", "struct" );
            exception_tb = NULL;
            NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
            CHAIN_EXCEPTION( exception_value );

            exception_lineno = 563;
            type_description_1 = "ooooooo";
            goto try_except_handler_5;
        }

        tmp_source_name_6 = tmp_mvar_value_5;
        tmp_tuple_element_1 = LOOKUP_ATTRIBUTE( tmp_source_name_6, const_str_plain_error );
        if ( tmp_tuple_element_1 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
            Py_DECREF( tmp_compexpr_right_2 );

            exception_lineno = 563;
            type_description_1 = "ooooooo";
            goto try_except_handler_5;
        }
        PyTuple_SET_ITEM( tmp_compexpr_right_2, 2, tmp_tuple_element_1 );
        tmp_tuple_element_1 = PyExc_OverflowError;
        Py_INCREF( tmp_tuple_element_1 );
        PyTuple_SET_ITEM( tmp_compexpr_right_2, 3, tmp_tuple_element_1 );
        tmp_tuple_element_1 = PyExc_UnicodeDecodeError;
        Py_INCREF( tmp_tuple_element_1 );
        PyTuple_SET_ITEM( tmp_compexpr_right_2, 4, tmp_tuple_element_1 );
        tmp_res = EXCEPTION_MATCH_BOOL( tmp_compexpr_left_2, tmp_compexpr_right_2 );
        Py_DECREF( tmp_compexpr_right_2 );
        if ( tmp_res == -1 )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 563;
            type_description_1 = "ooooooo";
            goto try_except_handler_5;
        }
        tmp_condition_result_2 = ( tmp_res != 0 ) ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
        if ( tmp_condition_result_2 == NUITKA_BOOL_TRUE )
        {
            goto branch_yes_2;
        }
        else
        {
            goto branch_no_2;
        }
        branch_yes_2:;
        {
            PyObject *tmp_raise_type_2;
            PyObject *tmp_called_name_3;
            PyObject *tmp_mvar_value_6;
            tmp_mvar_value_6 = GET_STRING_DICT_VALUE( moduledict_plistlib, (Nuitka_StringObject *)const_str_plain_InvalidFileException );

            if (unlikely( tmp_mvar_value_6 == NULL ))
            {
                tmp_mvar_value_6 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_InvalidFileException );
            }

            if ( tmp_mvar_value_6 == NULL )
            {

                exception_type = PyExc_NameError;
                Py_INCREF( exception_type );
                exception_value = PyUnicode_FromFormat( "name '%s' is not defined", "InvalidFileException" );
                exception_tb = NULL;
                NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
                CHAIN_EXCEPTION( exception_value );

                exception_lineno = 565;
                type_description_1 = "ooooooo";
                goto try_except_handler_5;
            }

            tmp_called_name_3 = tmp_mvar_value_6;
            frame_f6994825c2e6565735c8665b48060b34->m_frame.f_lineno = 565;
            tmp_raise_type_2 = CALL_FUNCTION_NO_ARGS( tmp_called_name_3 );
            if ( tmp_raise_type_2 == NULL )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 565;
                type_description_1 = "ooooooo";
                goto try_except_handler_5;
            }
            exception_type = tmp_raise_type_2;
            exception_lineno = 565;
            RAISE_EXCEPTION_WITH_TYPE( &exception_type, &exception_value, &exception_tb );
            type_description_1 = "ooooooo";
            goto try_except_handler_5;
        }
        goto branch_end_2;
        branch_no_2:;
        tmp_result = RERAISE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
        if (unlikely( tmp_result == false ))
        {
            exception_lineno = 543;
        }

        if (exception_tb && exception_tb->tb_frame == &frame_f6994825c2e6565735c8665b48060b34->m_frame) frame_f6994825c2e6565735c8665b48060b34->m_frame.f_lineno = exception_tb->tb_lineno;
        type_description_1 = "ooooooo";
        goto try_except_handler_5;
        branch_end_2:;
    }
    // tried codes exits in all cases
    NUITKA_CANNOT_GET_HERE( plistlib$$$function_50_parse );
    return NULL;
    // Exception handler code:
    try_except_handler_5:;
    exception_keeper_type_4 = exception_type;
    exception_keeper_value_4 = exception_value;
    exception_keeper_tb_4 = exception_tb;
    exception_keeper_lineno_4 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    // Restore previous exception.
    SET_CURRENT_EXCEPTION( exception_preserved_type_1, exception_preserved_value_1, exception_preserved_tb_1 );
    // Re-raise.
    exception_type = exception_keeper_type_4;
    exception_value = exception_keeper_value_4;
    exception_tb = exception_keeper_tb_4;
    exception_lineno = exception_keeper_lineno_4;

    goto frame_exception_exit_1;
    // End of try:
    // End of try:

#if 0
    RESTORE_FRAME_EXCEPTION( frame_f6994825c2e6565735c8665b48060b34 );
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto frame_no_exception_1;

    frame_return_exit_1:;
#if 0
    RESTORE_FRAME_EXCEPTION( frame_f6994825c2e6565735c8665b48060b34 );
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto try_return_handler_1;

    frame_exception_exit_1:;

#if 0
    RESTORE_FRAME_EXCEPTION( frame_f6994825c2e6565735c8665b48060b34 );
#endif

    if ( exception_tb == NULL )
    {
        exception_tb = MAKE_TRACEBACK( frame_f6994825c2e6565735c8665b48060b34, exception_lineno );
    }
    else if ( exception_tb->tb_frame != &frame_f6994825c2e6565735c8665b48060b34->m_frame )
    {
        exception_tb = ADD_TRACEBACK( exception_tb, frame_f6994825c2e6565735c8665b48060b34, exception_lineno );
    }

    // Attachs locals to frame if any.
    Nuitka_Frame_AttachLocals(
        (struct Nuitka_FrameObject *)frame_f6994825c2e6565735c8665b48060b34,
        type_description_1,
        par_self,
        par_fp,
        var_trailer,
        var_offset_size,
        var_num_objects,
        var_top_object,
        var_offset_table_offset
    );


    // Release cached frame.
    if ( frame_f6994825c2e6565735c8665b48060b34 == cache_frame_f6994825c2e6565735c8665b48060b34 )
    {
        Py_DECREF( frame_f6994825c2e6565735c8665b48060b34 );
    }
    cache_frame_f6994825c2e6565735c8665b48060b34 = NULL;

    assertFrameObject( frame_f6994825c2e6565735c8665b48060b34 );

    // Put the previous frame back on top.
    popFrameStack();

    // Return the error.
    goto try_except_handler_1;

    frame_no_exception_1:;
    // tried codes exits in all cases
    NUITKA_CANNOT_GET_HERE( plistlib$$$function_50_parse );
    return NULL;
    // Return handler code:
    try_return_handler_1:;
    CHECK_OBJECT( (PyObject *)par_self );
    Py_DECREF( par_self );
    par_self = NULL;

    CHECK_OBJECT( (PyObject *)par_fp );
    Py_DECREF( par_fp );
    par_fp = NULL;

    CHECK_OBJECT( (PyObject *)var_trailer );
    Py_DECREF( var_trailer );
    var_trailer = NULL;

    CHECK_OBJECT( (PyObject *)var_offset_size );
    Py_DECREF( var_offset_size );
    var_offset_size = NULL;

    CHECK_OBJECT( (PyObject *)var_num_objects );
    Py_DECREF( var_num_objects );
    var_num_objects = NULL;

    CHECK_OBJECT( (PyObject *)var_top_object );
    Py_DECREF( var_top_object );
    var_top_object = NULL;

    CHECK_OBJECT( (PyObject *)var_offset_table_offset );
    Py_DECREF( var_offset_table_offset );
    var_offset_table_offset = NULL;

    goto function_return_exit;
    // Exception handler code:
    try_except_handler_1:;
    exception_keeper_type_5 = exception_type;
    exception_keeper_value_5 = exception_value;
    exception_keeper_tb_5 = exception_tb;
    exception_keeper_lineno_5 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    CHECK_OBJECT( (PyObject *)par_self );
    Py_DECREF( par_self );
    par_self = NULL;

    CHECK_OBJECT( (PyObject *)par_fp );
    Py_DECREF( par_fp );
    par_fp = NULL;

    Py_XDECREF( var_trailer );
    var_trailer = NULL;

    Py_XDECREF( var_offset_size );
    var_offset_size = NULL;

    Py_XDECREF( var_num_objects );
    var_num_objects = NULL;

    Py_XDECREF( var_top_object );
    var_top_object = NULL;

    Py_XDECREF( var_offset_table_offset );
    var_offset_table_offset = NULL;

    // Re-raise.
    exception_type = exception_keeper_type_5;
    exception_value = exception_keeper_value_5;
    exception_tb = exception_keeper_tb_5;
    exception_lineno = exception_keeper_lineno_5;

    goto function_exception_exit;
    // End of try:

    // Return statement must have exited already.
    NUITKA_CANNOT_GET_HERE( plistlib$$$function_50_parse );
    return NULL;

function_exception_exit:
    assert( exception_type );
    RESTORE_ERROR_OCCURRED( exception_type, exception_value, exception_tb );

    return NULL;

function_return_exit:
   // Function cleanup code if any.


   // Actual function exit with return value, making sure we did not make
   // the error status worse despite non-NULL return.
   CHECK_OBJECT( tmp_return_value );
   assert( had_error || !ERROR_OCCURRED() );
   return tmp_return_value;
}


static PyObject *impl_plistlib$$$function_51__get_size( struct Nuitka_FunctionObject const *self, PyObject **python_pars )
{
    // Preserve error status for checks
#ifndef __NUITKA_NO_ASSERT__
    NUITKA_MAY_BE_UNUSED bool had_error = ERROR_OCCURRED();
#endif

    // Local variable declarations.
    PyObject *par_self = python_pars[ 0 ];
    PyObject *par_tokenL = python_pars[ 1 ];
    PyObject *var_m = NULL;
    PyObject *var_s = NULL;
    PyObject *var_f = NULL;
    struct Nuitka_FrameObject *frame_933cff0e6c2cdec9aff47fca315f05bb;
    NUITKA_MAY_BE_UNUSED char const *type_description_1 = NULL;
    int tmp_res;
    PyObject *exception_type = NULL;
    PyObject *exception_value = NULL;
    PyTracebackObject *exception_tb = NULL;
    NUITKA_MAY_BE_UNUSED int exception_lineno = 0;
    PyObject *tmp_return_value = NULL;
    static struct Nuitka_FrameObject *cache_frame_933cff0e6c2cdec9aff47fca315f05bb = NULL;
    PyObject *exception_keeper_type_1;
    PyObject *exception_keeper_value_1;
    PyTracebackObject *exception_keeper_tb_1;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_1;

    // Actual function body.
    // Tried code:
    MAKE_OR_REUSE_FRAME( cache_frame_933cff0e6c2cdec9aff47fca315f05bb, codeobj_933cff0e6c2cdec9aff47fca315f05bb, module_plistlib, sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *) );
    frame_933cff0e6c2cdec9aff47fca315f05bb = cache_frame_933cff0e6c2cdec9aff47fca315f05bb;

    // Push the new frame as the currently active one.
    pushFrameStack( frame_933cff0e6c2cdec9aff47fca315f05bb );

    // Mark the frame object as in use, ref count 1 will be up for reuse.
    assert( Py_REFCNT( frame_933cff0e6c2cdec9aff47fca315f05bb ) == 2 ); // Frame stack

    // Framed code:
    {
        nuitka_bool tmp_condition_result_1;
        PyObject *tmp_compexpr_left_1;
        PyObject *tmp_compexpr_right_1;
        CHECK_OBJECT( par_tokenL );
        tmp_compexpr_left_1 = par_tokenL;
        tmp_compexpr_right_1 = const_int_pos_15;
        tmp_res = RICH_COMPARE_BOOL_EQ_OBJECT_OBJECT( tmp_compexpr_left_1, tmp_compexpr_right_1 );
        if ( tmp_res == -1 )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 569;
            type_description_1 = "ooooo";
            goto frame_exception_exit_1;
        }
        tmp_condition_result_1 = ( tmp_res != 0 ) ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
        if ( tmp_condition_result_1 == NUITKA_BOOL_TRUE )
        {
            goto branch_yes_1;
        }
        else
        {
            goto branch_no_1;
        }
        branch_yes_1:;
        {
            PyObject *tmp_assign_source_1;
            PyObject *tmp_left_name_1;
            PyObject *tmp_subscribed_name_1;
            PyObject *tmp_called_instance_1;
            PyObject *tmp_source_name_1;
            PyObject *tmp_subscript_name_1;
            PyObject *tmp_right_name_1;
            CHECK_OBJECT( par_self );
            tmp_source_name_1 = par_self;
            tmp_called_instance_1 = LOOKUP_ATTRIBUTE( tmp_source_name_1, const_str_plain__fp );
            if ( tmp_called_instance_1 == NULL )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 570;
                type_description_1 = "ooooo";
                goto frame_exception_exit_1;
            }
            frame_933cff0e6c2cdec9aff47fca315f05bb->m_frame.f_lineno = 570;
            tmp_subscribed_name_1 = CALL_METHOD_WITH_ARGS1( tmp_called_instance_1, const_str_plain_read, &PyTuple_GET_ITEM( const_tuple_int_pos_1_tuple, 0 ) );

            Py_DECREF( tmp_called_instance_1 );
            if ( tmp_subscribed_name_1 == NULL )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 570;
                type_description_1 = "ooooo";
                goto frame_exception_exit_1;
            }
            tmp_subscript_name_1 = const_int_0;
            tmp_left_name_1 = LOOKUP_SUBSCRIPT_CONST( tmp_subscribed_name_1, tmp_subscript_name_1, 0 );
            Py_DECREF( tmp_subscribed_name_1 );
            if ( tmp_left_name_1 == NULL )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 570;
                type_description_1 = "ooooo";
                goto frame_exception_exit_1;
            }
            tmp_right_name_1 = const_int_pos_3;
            tmp_assign_source_1 = BINARY_OPERATION( PyNumber_And, tmp_left_name_1, tmp_right_name_1 );
            Py_DECREF( tmp_left_name_1 );
            if ( tmp_assign_source_1 == NULL )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 570;
                type_description_1 = "ooooo";
                goto frame_exception_exit_1;
            }
            assert( var_m == NULL );
            var_m = tmp_assign_source_1;
        }
        {
            PyObject *tmp_assign_source_2;
            PyObject *tmp_left_name_2;
            PyObject *tmp_right_name_2;
            tmp_left_name_2 = const_int_pos_1;
            CHECK_OBJECT( var_m );
            tmp_right_name_2 = var_m;
            tmp_assign_source_2 = BINARY_OPERATION( PyNumber_Lshift, tmp_left_name_2, tmp_right_name_2 );
            if ( tmp_assign_source_2 == NULL )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 571;
                type_description_1 = "ooooo";
                goto frame_exception_exit_1;
            }
            assert( var_s == NULL );
            var_s = tmp_assign_source_2;
        }
        {
            PyObject *tmp_assign_source_3;
            PyObject *tmp_left_name_3;
            PyObject *tmp_right_name_3;
            PyObject *tmp_subscribed_name_2;
            PyObject *tmp_mvar_value_1;
            PyObject *tmp_subscript_name_2;
            tmp_left_name_3 = const_str_chr_62;
            tmp_mvar_value_1 = GET_STRING_DICT_VALUE( moduledict_plistlib, (Nuitka_StringObject *)const_str_plain__BINARY_FORMAT );

            if (unlikely( tmp_mvar_value_1 == NULL ))
            {
                tmp_mvar_value_1 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain__BINARY_FORMAT );
            }

            if ( tmp_mvar_value_1 == NULL )
            {

                exception_type = PyExc_NameError;
                Py_INCREF( exception_type );
                exception_value = PyUnicode_FromFormat( "name '%s' is not defined", "_BINARY_FORMAT" );
                exception_tb = NULL;
                NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
                CHAIN_EXCEPTION( exception_value );

                exception_lineno = 572;
                type_description_1 = "ooooo";
                goto frame_exception_exit_1;
            }

            tmp_subscribed_name_2 = tmp_mvar_value_1;
            CHECK_OBJECT( var_s );
            tmp_subscript_name_2 = var_s;
            tmp_right_name_3 = LOOKUP_SUBSCRIPT( tmp_subscribed_name_2, tmp_subscript_name_2 );
            if ( tmp_right_name_3 == NULL )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 572;
                type_description_1 = "ooooo";
                goto frame_exception_exit_1;
            }
            tmp_assign_source_3 = BINARY_OPERATION_ADD_UNICODE_OBJECT( tmp_left_name_3, tmp_right_name_3 );
            Py_DECREF( tmp_right_name_3 );
            if ( tmp_assign_source_3 == NULL )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 572;
                type_description_1 = "ooooo";
                goto frame_exception_exit_1;
            }
            assert( var_f == NULL );
            var_f = tmp_assign_source_3;
        }
        {
            PyObject *tmp_subscribed_name_3;
            PyObject *tmp_called_name_1;
            PyObject *tmp_source_name_2;
            PyObject *tmp_mvar_value_2;
            PyObject *tmp_args_element_name_1;
            PyObject *tmp_args_element_name_2;
            PyObject *tmp_called_instance_2;
            PyObject *tmp_source_name_3;
            PyObject *tmp_args_element_name_3;
            PyObject *tmp_subscript_name_3;
            tmp_mvar_value_2 = GET_STRING_DICT_VALUE( moduledict_plistlib, (Nuitka_StringObject *)const_str_plain_struct );

            if (unlikely( tmp_mvar_value_2 == NULL ))
            {
                tmp_mvar_value_2 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_struct );
            }

            if ( tmp_mvar_value_2 == NULL )
            {

                exception_type = PyExc_NameError;
                Py_INCREF( exception_type );
                exception_value = PyUnicode_FromFormat( "name '%s' is not defined", "struct" );
                exception_tb = NULL;
                NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
                CHAIN_EXCEPTION( exception_value );

                exception_lineno = 573;
                type_description_1 = "ooooo";
                goto frame_exception_exit_1;
            }

            tmp_source_name_2 = tmp_mvar_value_2;
            tmp_called_name_1 = LOOKUP_ATTRIBUTE( tmp_source_name_2, const_str_plain_unpack );
            if ( tmp_called_name_1 == NULL )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 573;
                type_description_1 = "ooooo";
                goto frame_exception_exit_1;
            }
            CHECK_OBJECT( var_f );
            tmp_args_element_name_1 = var_f;
            CHECK_OBJECT( par_self );
            tmp_source_name_3 = par_self;
            tmp_called_instance_2 = LOOKUP_ATTRIBUTE( tmp_source_name_3, const_str_plain__fp );
            if ( tmp_called_instance_2 == NULL )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
                Py_DECREF( tmp_called_name_1 );

                exception_lineno = 573;
                type_description_1 = "ooooo";
                goto frame_exception_exit_1;
            }
            CHECK_OBJECT( var_s );
            tmp_args_element_name_3 = var_s;
            frame_933cff0e6c2cdec9aff47fca315f05bb->m_frame.f_lineno = 573;
            {
                PyObject *call_args[] = { tmp_args_element_name_3 };
                tmp_args_element_name_2 = CALL_METHOD_WITH_ARGS1( tmp_called_instance_2, const_str_plain_read, call_args );
            }

            Py_DECREF( tmp_called_instance_2 );
            if ( tmp_args_element_name_2 == NULL )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
                Py_DECREF( tmp_called_name_1 );

                exception_lineno = 573;
                type_description_1 = "ooooo";
                goto frame_exception_exit_1;
            }
            frame_933cff0e6c2cdec9aff47fca315f05bb->m_frame.f_lineno = 573;
            {
                PyObject *call_args[] = { tmp_args_element_name_1, tmp_args_element_name_2 };
                tmp_subscribed_name_3 = CALL_FUNCTION_WITH_ARGS2( tmp_called_name_1, call_args );
            }

            Py_DECREF( tmp_called_name_1 );
            Py_DECREF( tmp_args_element_name_2 );
            if ( tmp_subscribed_name_3 == NULL )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 573;
                type_description_1 = "ooooo";
                goto frame_exception_exit_1;
            }
            tmp_subscript_name_3 = const_int_0;
            tmp_return_value = LOOKUP_SUBSCRIPT_CONST( tmp_subscribed_name_3, tmp_subscript_name_3, 0 );
            Py_DECREF( tmp_subscribed_name_3 );
            if ( tmp_return_value == NULL )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 573;
                type_description_1 = "ooooo";
                goto frame_exception_exit_1;
            }
            goto frame_return_exit_1;
        }
        branch_no_1:;
    }

#if 0
    RESTORE_FRAME_EXCEPTION( frame_933cff0e6c2cdec9aff47fca315f05bb );
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto frame_no_exception_1;

    frame_return_exit_1:;
#if 0
    RESTORE_FRAME_EXCEPTION( frame_933cff0e6c2cdec9aff47fca315f05bb );
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto try_return_handler_1;

    frame_exception_exit_1:;

#if 0
    RESTORE_FRAME_EXCEPTION( frame_933cff0e6c2cdec9aff47fca315f05bb );
#endif

    if ( exception_tb == NULL )
    {
        exception_tb = MAKE_TRACEBACK( frame_933cff0e6c2cdec9aff47fca315f05bb, exception_lineno );
    }
    else if ( exception_tb->tb_frame != &frame_933cff0e6c2cdec9aff47fca315f05bb->m_frame )
    {
        exception_tb = ADD_TRACEBACK( exception_tb, frame_933cff0e6c2cdec9aff47fca315f05bb, exception_lineno );
    }

    // Attachs locals to frame if any.
    Nuitka_Frame_AttachLocals(
        (struct Nuitka_FrameObject *)frame_933cff0e6c2cdec9aff47fca315f05bb,
        type_description_1,
        par_self,
        par_tokenL,
        var_m,
        var_s,
        var_f
    );


    // Release cached frame.
    if ( frame_933cff0e6c2cdec9aff47fca315f05bb == cache_frame_933cff0e6c2cdec9aff47fca315f05bb )
    {
        Py_DECREF( frame_933cff0e6c2cdec9aff47fca315f05bb );
    }
    cache_frame_933cff0e6c2cdec9aff47fca315f05bb = NULL;

    assertFrameObject( frame_933cff0e6c2cdec9aff47fca315f05bb );

    // Put the previous frame back on top.
    popFrameStack();

    // Return the error.
    goto try_except_handler_1;

    frame_no_exception_1:;
    CHECK_OBJECT( par_tokenL );
    tmp_return_value = par_tokenL;
    Py_INCREF( tmp_return_value );
    goto try_return_handler_1;
    // tried codes exits in all cases
    NUITKA_CANNOT_GET_HERE( plistlib$$$function_51__get_size );
    return NULL;
    // Return handler code:
    try_return_handler_1:;
    CHECK_OBJECT( (PyObject *)par_self );
    Py_DECREF( par_self );
    par_self = NULL;

    CHECK_OBJECT( (PyObject *)par_tokenL );
    Py_DECREF( par_tokenL );
    par_tokenL = NULL;

    Py_XDECREF( var_m );
    var_m = NULL;

    Py_XDECREF( var_s );
    var_s = NULL;

    Py_XDECREF( var_f );
    var_f = NULL;

    goto function_return_exit;
    // Exception handler code:
    try_except_handler_1:;
    exception_keeper_type_1 = exception_type;
    exception_keeper_value_1 = exception_value;
    exception_keeper_tb_1 = exception_tb;
    exception_keeper_lineno_1 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    CHECK_OBJECT( (PyObject *)par_self );
    Py_DECREF( par_self );
    par_self = NULL;

    CHECK_OBJECT( (PyObject *)par_tokenL );
    Py_DECREF( par_tokenL );
    par_tokenL = NULL;

    Py_XDECREF( var_m );
    var_m = NULL;

    Py_XDECREF( var_s );
    var_s = NULL;

    Py_XDECREF( var_f );
    var_f = NULL;

    // Re-raise.
    exception_type = exception_keeper_type_1;
    exception_value = exception_keeper_value_1;
    exception_tb = exception_keeper_tb_1;
    exception_lineno = exception_keeper_lineno_1;

    goto function_exception_exit;
    // End of try:

    // Return statement must have exited already.
    NUITKA_CANNOT_GET_HERE( plistlib$$$function_51__get_size );
    return NULL;

function_exception_exit:
    assert( exception_type );
    RESTORE_ERROR_OCCURRED( exception_type, exception_value, exception_tb );

    return NULL;

function_return_exit:
   // Function cleanup code if any.


   // Actual function exit with return value, making sure we did not make
   // the error status worse despite non-NULL return.
   CHECK_OBJECT( tmp_return_value );
   assert( had_error || !ERROR_OCCURRED() );
   return tmp_return_value;
}


static PyObject *impl_plistlib$$$function_52__read_ints( struct Nuitka_FunctionObject const *self, PyObject **python_pars )
{
    // Preserve error status for checks
#ifndef __NUITKA_NO_ASSERT__
    NUITKA_MAY_BE_UNUSED bool had_error = ERROR_OCCURRED();
#endif

    // Local variable declarations.
    PyObject *par_self = python_pars[ 0 ];
    PyObject *par_n = python_pars[ 1 ];
    struct Nuitka_CellObject *par_size = PyCell_NEW1( python_pars[ 2 ] );
    struct Nuitka_CellObject *var_data = PyCell_EMPTY();
    PyObject *tmp_genexpr_1__$0 = NULL;
    struct Nuitka_FrameObject *frame_71f53baa965bdab6179a073e81d75811;
    NUITKA_MAY_BE_UNUSED char const *type_description_1 = NULL;
    PyObject *exception_type = NULL;
    PyObject *exception_value = NULL;
    PyTracebackObject *exception_tb = NULL;
    NUITKA_MAY_BE_UNUSED int exception_lineno = 0;
    int tmp_res;
    PyObject *tmp_return_value = NULL;
    static struct Nuitka_FrameObject *cache_frame_71f53baa965bdab6179a073e81d75811 = NULL;
    PyObject *exception_keeper_type_1;
    PyObject *exception_keeper_value_1;
    PyTracebackObject *exception_keeper_tb_1;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_1;

    // Actual function body.
    // Tried code:
    MAKE_OR_REUSE_FRAME( cache_frame_71f53baa965bdab6179a073e81d75811, codeobj_71f53baa965bdab6179a073e81d75811, module_plistlib, sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *) );
    frame_71f53baa965bdab6179a073e81d75811 = cache_frame_71f53baa965bdab6179a073e81d75811;

    // Push the new frame as the currently active one.
    pushFrameStack( frame_71f53baa965bdab6179a073e81d75811 );

    // Mark the frame object as in use, ref count 1 will be up for reuse.
    assert( Py_REFCNT( frame_71f53baa965bdab6179a073e81d75811 ) == 2 ); // Frame stack

    // Framed code:
    {
        PyObject *tmp_assign_source_1;
        PyObject *tmp_called_name_1;
        PyObject *tmp_source_name_1;
        PyObject *tmp_source_name_2;
        PyObject *tmp_args_element_name_1;
        PyObject *tmp_left_name_1;
        PyObject *tmp_right_name_1;
        CHECK_OBJECT( par_self );
        tmp_source_name_2 = par_self;
        tmp_source_name_1 = LOOKUP_ATTRIBUTE( tmp_source_name_2, const_str_plain__fp );
        if ( tmp_source_name_1 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 578;
            type_description_1 = "oocc";
            goto frame_exception_exit_1;
        }
        tmp_called_name_1 = LOOKUP_ATTRIBUTE( tmp_source_name_1, const_str_plain_read );
        Py_DECREF( tmp_source_name_1 );
        if ( tmp_called_name_1 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 578;
            type_description_1 = "oocc";
            goto frame_exception_exit_1;
        }
        CHECK_OBJECT( PyCell_GET( par_size ) );
        tmp_left_name_1 = PyCell_GET( par_size );
        CHECK_OBJECT( par_n );
        tmp_right_name_1 = par_n;
        tmp_args_element_name_1 = BINARY_OPERATION_MUL( tmp_left_name_1, tmp_right_name_1 );
        if ( tmp_args_element_name_1 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
            Py_DECREF( tmp_called_name_1 );

            exception_lineno = 578;
            type_description_1 = "oocc";
            goto frame_exception_exit_1;
        }
        frame_71f53baa965bdab6179a073e81d75811->m_frame.f_lineno = 578;
        {
            PyObject *call_args[] = { tmp_args_element_name_1 };
            tmp_assign_source_1 = CALL_FUNCTION_WITH_ARGS1( tmp_called_name_1, call_args );
        }

        Py_DECREF( tmp_called_name_1 );
        Py_DECREF( tmp_args_element_name_1 );
        if ( tmp_assign_source_1 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 578;
            type_description_1 = "oocc";
            goto frame_exception_exit_1;
        }
        assert( PyCell_GET( var_data ) == NULL );
        PyCell_SET( var_data, tmp_assign_source_1 );

    }
    {
        nuitka_bool tmp_condition_result_1;
        PyObject *tmp_compexpr_left_1;
        PyObject *tmp_compexpr_right_1;
        PyObject *tmp_mvar_value_1;
        CHECK_OBJECT( PyCell_GET( par_size ) );
        tmp_compexpr_left_1 = PyCell_GET( par_size );
        tmp_mvar_value_1 = GET_STRING_DICT_VALUE( moduledict_plistlib, (Nuitka_StringObject *)const_str_plain__BINARY_FORMAT );

        if (unlikely( tmp_mvar_value_1 == NULL ))
        {
            tmp_mvar_value_1 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain__BINARY_FORMAT );
        }

        if ( tmp_mvar_value_1 == NULL )
        {

            exception_type = PyExc_NameError;
            Py_INCREF( exception_type );
            exception_value = PyUnicode_FromFormat( "name '%s' is not defined", "_BINARY_FORMAT" );
            exception_tb = NULL;
            NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
            CHAIN_EXCEPTION( exception_value );

            exception_lineno = 579;
            type_description_1 = "oocc";
            goto frame_exception_exit_1;
        }

        tmp_compexpr_right_1 = tmp_mvar_value_1;
        tmp_res = PySequence_Contains( tmp_compexpr_right_1, tmp_compexpr_left_1 );
        if ( tmp_res == -1 )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 579;
            type_description_1 = "oocc";
            goto frame_exception_exit_1;
        }
        tmp_condition_result_1 = ( tmp_res == 1 ) ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
        if ( tmp_condition_result_1 == NUITKA_BOOL_TRUE )
        {
            goto branch_yes_1;
        }
        else
        {
            goto branch_no_1;
        }
        branch_yes_1:;
        {
            PyObject *tmp_called_name_2;
            PyObject *tmp_source_name_3;
            PyObject *tmp_mvar_value_2;
            PyObject *tmp_args_element_name_2;
            PyObject *tmp_left_name_2;
            PyObject *tmp_right_name_2;
            PyObject *tmp_left_name_3;
            PyObject *tmp_subscribed_name_1;
            PyObject *tmp_mvar_value_3;
            PyObject *tmp_subscript_name_1;
            PyObject *tmp_right_name_3;
            PyObject *tmp_args_element_name_3;
            tmp_mvar_value_2 = GET_STRING_DICT_VALUE( moduledict_plistlib, (Nuitka_StringObject *)const_str_plain_struct );

            if (unlikely( tmp_mvar_value_2 == NULL ))
            {
                tmp_mvar_value_2 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_struct );
            }

            if ( tmp_mvar_value_2 == NULL )
            {

                exception_type = PyExc_NameError;
                Py_INCREF( exception_type );
                exception_value = PyUnicode_FromFormat( "name '%s' is not defined", "struct" );
                exception_tb = NULL;
                NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
                CHAIN_EXCEPTION( exception_value );

                exception_lineno = 580;
                type_description_1 = "oocc";
                goto frame_exception_exit_1;
            }

            tmp_source_name_3 = tmp_mvar_value_2;
            tmp_called_name_2 = LOOKUP_ATTRIBUTE( tmp_source_name_3, const_str_plain_unpack );
            if ( tmp_called_name_2 == NULL )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 580;
                type_description_1 = "oocc";
                goto frame_exception_exit_1;
            }
            tmp_left_name_2 = const_str_chr_62;
            tmp_mvar_value_3 = GET_STRING_DICT_VALUE( moduledict_plistlib, (Nuitka_StringObject *)const_str_plain__BINARY_FORMAT );

            if (unlikely( tmp_mvar_value_3 == NULL ))
            {
                tmp_mvar_value_3 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain__BINARY_FORMAT );
            }

            if ( tmp_mvar_value_3 == NULL )
            {
                Py_DECREF( tmp_called_name_2 );
                exception_type = PyExc_NameError;
                Py_INCREF( exception_type );
                exception_value = PyUnicode_FromFormat( "name '%s' is not defined", "_BINARY_FORMAT" );
                exception_tb = NULL;
                NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
                CHAIN_EXCEPTION( exception_value );

                exception_lineno = 580;
                type_description_1 = "oocc";
                goto frame_exception_exit_1;
            }

            tmp_subscribed_name_1 = tmp_mvar_value_3;
            CHECK_OBJECT( PyCell_GET( par_size ) );
            tmp_subscript_name_1 = PyCell_GET( par_size );
            tmp_left_name_3 = LOOKUP_SUBSCRIPT( tmp_subscribed_name_1, tmp_subscript_name_1 );
            if ( tmp_left_name_3 == NULL )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
                Py_DECREF( tmp_called_name_2 );

                exception_lineno = 580;
                type_description_1 = "oocc";
                goto frame_exception_exit_1;
            }
            CHECK_OBJECT( par_n );
            tmp_right_name_3 = par_n;
            tmp_right_name_2 = BINARY_OPERATION_MUL( tmp_left_name_3, tmp_right_name_3 );
            Py_DECREF( tmp_left_name_3 );
            if ( tmp_right_name_2 == NULL )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
                Py_DECREF( tmp_called_name_2 );

                exception_lineno = 580;
                type_description_1 = "oocc";
                goto frame_exception_exit_1;
            }
            tmp_args_element_name_2 = BINARY_OPERATION_ADD_UNICODE_OBJECT( tmp_left_name_2, tmp_right_name_2 );
            Py_DECREF( tmp_right_name_2 );
            if ( tmp_args_element_name_2 == NULL )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
                Py_DECREF( tmp_called_name_2 );

                exception_lineno = 580;
                type_description_1 = "oocc";
                goto frame_exception_exit_1;
            }
            CHECK_OBJECT( PyCell_GET( var_data ) );
            tmp_args_element_name_3 = PyCell_GET( var_data );
            frame_71f53baa965bdab6179a073e81d75811->m_frame.f_lineno = 580;
            {
                PyObject *call_args[] = { tmp_args_element_name_2, tmp_args_element_name_3 };
                tmp_return_value = CALL_FUNCTION_WITH_ARGS2( tmp_called_name_2, call_args );
            }

            Py_DECREF( tmp_called_name_2 );
            Py_DECREF( tmp_args_element_name_2 );
            if ( tmp_return_value == NULL )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 580;
                type_description_1 = "oocc";
                goto frame_exception_exit_1;
            }
            goto frame_return_exit_1;
        }
        goto branch_end_1;
        branch_no_1:;
        {
            nuitka_bool tmp_condition_result_2;
            int tmp_or_left_truth_1;
            nuitka_bool tmp_or_left_value_1;
            nuitka_bool tmp_or_right_value_1;
            PyObject *tmp_operand_name_1;
            PyObject *tmp_compexpr_left_2;
            PyObject *tmp_compexpr_right_2;
            PyObject *tmp_len_arg_1;
            PyObject *tmp_left_name_4;
            PyObject *tmp_right_name_4;
            CHECK_OBJECT( PyCell_GET( par_size ) );
            tmp_operand_name_1 = PyCell_GET( par_size );
            tmp_res = CHECK_IF_TRUE( tmp_operand_name_1 );
            if ( tmp_res == -1 )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 582;
                type_description_1 = "oocc";
                goto frame_exception_exit_1;
            }
            tmp_or_left_value_1 = ( tmp_res == 0 ) ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
            tmp_or_left_truth_1 = tmp_or_left_value_1 == NUITKA_BOOL_TRUE ? 1 : 0;
            if ( tmp_or_left_truth_1 == 1 )
            {
                goto or_left_1;
            }
            else
            {
                goto or_right_1;
            }
            or_right_1:;
            CHECK_OBJECT( PyCell_GET( var_data ) );
            tmp_len_arg_1 = PyCell_GET( var_data );
            tmp_compexpr_left_2 = BUILTIN_LEN( tmp_len_arg_1 );
            if ( tmp_compexpr_left_2 == NULL )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 582;
                type_description_1 = "oocc";
                goto frame_exception_exit_1;
            }
            CHECK_OBJECT( PyCell_GET( par_size ) );
            tmp_left_name_4 = PyCell_GET( par_size );
            CHECK_OBJECT( par_n );
            tmp_right_name_4 = par_n;
            tmp_compexpr_right_2 = BINARY_OPERATION_MUL( tmp_left_name_4, tmp_right_name_4 );
            if ( tmp_compexpr_right_2 == NULL )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
                Py_DECREF( tmp_compexpr_left_2 );

                exception_lineno = 582;
                type_description_1 = "oocc";
                goto frame_exception_exit_1;
            }
            tmp_res = RICH_COMPARE_BOOL_NOTEQ_OBJECT_OBJECT( tmp_compexpr_left_2, tmp_compexpr_right_2 );
            Py_DECREF( tmp_compexpr_left_2 );
            Py_DECREF( tmp_compexpr_right_2 );
            if ( tmp_res == -1 )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 582;
                type_description_1 = "oocc";
                goto frame_exception_exit_1;
            }
            tmp_or_right_value_1 = ( tmp_res != 0 ) ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
            tmp_condition_result_2 = tmp_or_right_value_1;
            goto or_end_1;
            or_left_1:;
            tmp_condition_result_2 = tmp_or_left_value_1;
            or_end_1:;
            if ( tmp_condition_result_2 == NUITKA_BOOL_TRUE )
            {
                goto branch_yes_2;
            }
            else
            {
                goto branch_no_2;
            }
            branch_yes_2:;
            {
                PyObject *tmp_raise_type_1;
                PyObject *tmp_called_name_3;
                PyObject *tmp_mvar_value_4;
                tmp_mvar_value_4 = GET_STRING_DICT_VALUE( moduledict_plistlib, (Nuitka_StringObject *)const_str_plain_InvalidFileException );

                if (unlikely( tmp_mvar_value_4 == NULL ))
                {
                    tmp_mvar_value_4 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_InvalidFileException );
                }

                if ( tmp_mvar_value_4 == NULL )
                {

                    exception_type = PyExc_NameError;
                    Py_INCREF( exception_type );
                    exception_value = PyUnicode_FromFormat( "name '%s' is not defined", "InvalidFileException" );
                    exception_tb = NULL;
                    NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
                    CHAIN_EXCEPTION( exception_value );

                    exception_lineno = 583;
                    type_description_1 = "oocc";
                    goto frame_exception_exit_1;
                }

                tmp_called_name_3 = tmp_mvar_value_4;
                frame_71f53baa965bdab6179a073e81d75811->m_frame.f_lineno = 583;
                tmp_raise_type_1 = CALL_FUNCTION_NO_ARGS( tmp_called_name_3 );
                if ( tmp_raise_type_1 == NULL )
                {
                    assert( ERROR_OCCURRED() );

                    FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                    exception_lineno = 583;
                    type_description_1 = "oocc";
                    goto frame_exception_exit_1;
                }
                exception_type = tmp_raise_type_1;
                exception_lineno = 583;
                RAISE_EXCEPTION_WITH_TYPE( &exception_type, &exception_value, &exception_tb );
                type_description_1 = "oocc";
                goto frame_exception_exit_1;
            }
            branch_no_2:;
        }
        {
            PyObject *tmp_tuple_arg_1;
            {
                PyObject *tmp_assign_source_2;
                PyObject *tmp_iter_arg_1;
                PyObject *tmp_xrange_low_1;
                PyObject *tmp_xrange_high_1;
                PyObject *tmp_left_name_5;
                PyObject *tmp_right_name_5;
                PyObject *tmp_xrange_step_1;
                tmp_xrange_low_1 = const_int_0;
                CHECK_OBJECT( PyCell_GET( par_size ) );
                tmp_left_name_5 = PyCell_GET( par_size );
                CHECK_OBJECT( par_n );
                tmp_right_name_5 = par_n;
                tmp_xrange_high_1 = BINARY_OPERATION_MUL( tmp_left_name_5, tmp_right_name_5 );
                if ( tmp_xrange_high_1 == NULL )
                {
                    assert( ERROR_OCCURRED() );

                    FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                    exception_lineno = 585;
                    type_description_1 = "oocc";
                    goto frame_exception_exit_1;
                }
                CHECK_OBJECT( PyCell_GET( par_size ) );
                tmp_xrange_step_1 = PyCell_GET( par_size );
                tmp_iter_arg_1 = BUILTIN_XRANGE3( tmp_xrange_low_1, tmp_xrange_high_1, tmp_xrange_step_1 );
                Py_DECREF( tmp_xrange_high_1 );
                if ( tmp_iter_arg_1 == NULL )
                {
                    assert( ERROR_OCCURRED() );

                    FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                    exception_lineno = 585;
                    type_description_1 = "oocc";
                    goto frame_exception_exit_1;
                }
                tmp_assign_source_2 = MAKE_ITERATOR( tmp_iter_arg_1 );
                Py_DECREF( tmp_iter_arg_1 );
                if ( tmp_assign_source_2 == NULL )
                {
                    assert( ERROR_OCCURRED() );

                    FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                    exception_lineno = 584;
                    type_description_1 = "oocc";
                    goto frame_exception_exit_1;
                }
                assert( tmp_genexpr_1__$0 == NULL );
                tmp_genexpr_1__$0 = tmp_assign_source_2;
            }
            // Tried code:
            tmp_tuple_arg_1 = plistlib$$$function_52__read_ints$$$genexpr_1_genexpr_maker();

            ((struct Nuitka_GeneratorObject *)tmp_tuple_arg_1)->m_closure[0] = var_data;
            Py_INCREF( ((struct Nuitka_GeneratorObject *)tmp_tuple_arg_1)->m_closure[0] );
            ((struct Nuitka_GeneratorObject *)tmp_tuple_arg_1)->m_closure[1] = PyCell_NEW0( tmp_genexpr_1__$0 );
            ((struct Nuitka_GeneratorObject *)tmp_tuple_arg_1)->m_closure[2] = par_size;
            Py_INCREF( ((struct Nuitka_GeneratorObject *)tmp_tuple_arg_1)->m_closure[2] );


            goto try_return_handler_2;
            // tried codes exits in all cases
            NUITKA_CANNOT_GET_HERE( plistlib$$$function_52__read_ints );
            return NULL;
            // Return handler code:
            try_return_handler_2:;
            CHECK_OBJECT( (PyObject *)tmp_genexpr_1__$0 );
            Py_DECREF( tmp_genexpr_1__$0 );
            tmp_genexpr_1__$0 = NULL;

            goto outline_result_1;
            // End of try:
            CHECK_OBJECT( (PyObject *)tmp_genexpr_1__$0 );
            Py_DECREF( tmp_genexpr_1__$0 );
            tmp_genexpr_1__$0 = NULL;

            // Return statement must have exited already.
            NUITKA_CANNOT_GET_HERE( plistlib$$$function_52__read_ints );
            return NULL;
            outline_result_1:;
            tmp_return_value = PySequence_Tuple( tmp_tuple_arg_1 );
            Py_DECREF( tmp_tuple_arg_1 );
            if ( tmp_return_value == NULL )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 584;
                type_description_1 = "oocc";
                goto frame_exception_exit_1;
            }
            goto frame_return_exit_1;
        }
        branch_end_1:;
    }

#if 0
    RESTORE_FRAME_EXCEPTION( frame_71f53baa965bdab6179a073e81d75811 );
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto frame_no_exception_1;

    frame_return_exit_1:;
#if 0
    RESTORE_FRAME_EXCEPTION( frame_71f53baa965bdab6179a073e81d75811 );
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto try_return_handler_1;

    frame_exception_exit_1:;

#if 0
    RESTORE_FRAME_EXCEPTION( frame_71f53baa965bdab6179a073e81d75811 );
#endif

    if ( exception_tb == NULL )
    {
        exception_tb = MAKE_TRACEBACK( frame_71f53baa965bdab6179a073e81d75811, exception_lineno );
    }
    else if ( exception_tb->tb_frame != &frame_71f53baa965bdab6179a073e81d75811->m_frame )
    {
        exception_tb = ADD_TRACEBACK( exception_tb, frame_71f53baa965bdab6179a073e81d75811, exception_lineno );
    }

    // Attachs locals to frame if any.
    Nuitka_Frame_AttachLocals(
        (struct Nuitka_FrameObject *)frame_71f53baa965bdab6179a073e81d75811,
        type_description_1,
        par_self,
        par_n,
        par_size,
        var_data
    );


    // Release cached frame.
    if ( frame_71f53baa965bdab6179a073e81d75811 == cache_frame_71f53baa965bdab6179a073e81d75811 )
    {
        Py_DECREF( frame_71f53baa965bdab6179a073e81d75811 );
    }
    cache_frame_71f53baa965bdab6179a073e81d75811 = NULL;

    assertFrameObject( frame_71f53baa965bdab6179a073e81d75811 );

    // Put the previous frame back on top.
    popFrameStack();

    // Return the error.
    goto try_except_handler_1;

    frame_no_exception_1:;
    // tried codes exits in all cases
    NUITKA_CANNOT_GET_HERE( plistlib$$$function_52__read_ints );
    return NULL;
    // Return handler code:
    try_return_handler_1:;
    CHECK_OBJECT( (PyObject *)par_self );
    Py_DECREF( par_self );
    par_self = NULL;

    CHECK_OBJECT( (PyObject *)par_n );
    Py_DECREF( par_n );
    par_n = NULL;

    CHECK_OBJECT( (PyObject *)par_size );
    Py_DECREF( par_size );
    par_size = NULL;

    CHECK_OBJECT( (PyObject *)var_data );
    Py_DECREF( var_data );
    var_data = NULL;

    goto function_return_exit;
    // Exception handler code:
    try_except_handler_1:;
    exception_keeper_type_1 = exception_type;
    exception_keeper_value_1 = exception_value;
    exception_keeper_tb_1 = exception_tb;
    exception_keeper_lineno_1 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    CHECK_OBJECT( (PyObject *)par_self );
    Py_DECREF( par_self );
    par_self = NULL;

    CHECK_OBJECT( (PyObject *)par_n );
    Py_DECREF( par_n );
    par_n = NULL;

    CHECK_OBJECT( (PyObject *)par_size );
    Py_DECREF( par_size );
    par_size = NULL;

    CHECK_OBJECT( (PyObject *)var_data );
    Py_DECREF( var_data );
    var_data = NULL;

    // Re-raise.
    exception_type = exception_keeper_type_1;
    exception_value = exception_keeper_value_1;
    exception_tb = exception_keeper_tb_1;
    exception_lineno = exception_keeper_lineno_1;

    goto function_exception_exit;
    // End of try:

    // Return statement must have exited already.
    NUITKA_CANNOT_GET_HERE( plistlib$$$function_52__read_ints );
    return NULL;

function_exception_exit:
    assert( exception_type );
    RESTORE_ERROR_OCCURRED( exception_type, exception_value, exception_tb );

    return NULL;

function_return_exit:
   // Function cleanup code if any.


   // Actual function exit with return value, making sure we did not make
   // the error status worse despite non-NULL return.
   CHECK_OBJECT( tmp_return_value );
   assert( had_error || !ERROR_OCCURRED() );
   return tmp_return_value;
}



struct plistlib$$$function_52__read_ints$$$genexpr_1_genexpr_locals {
    PyObject *var_i;
    PyObject *tmp_iter_value_0;
    char const *type_description_1;
    PyObject *exception_type;
    PyObject *exception_value;
    PyTracebackObject *exception_tb;
    int exception_lineno;
    char yield_tmps[1024];
    PyObject *exception_keeper_type_1;
    PyObject *exception_keeper_value_1;
    PyTracebackObject *exception_keeper_tb_1;
    int exception_keeper_lineno_1;
    PyObject *exception_keeper_type_2;
    PyObject *exception_keeper_value_2;
    PyTracebackObject *exception_keeper_tb_2;
    int exception_keeper_lineno_2;
};

static PyObject *plistlib$$$function_52__read_ints$$$genexpr_1_genexpr_context( struct Nuitka_GeneratorObject *generator, PyObject *yield_return_value )
{
    CHECK_OBJECT( (PyObject *)generator );
    assert( Nuitka_Generator_Check( (PyObject *)generator ) );

    // Heap access if used.
    struct plistlib$$$function_52__read_ints$$$genexpr_1_genexpr_locals *generator_heap = (struct plistlib$$$function_52__read_ints$$$genexpr_1_genexpr_locals *)generator->m_heap_storage;

    // Dispatch to yield based on return label index:
    switch(generator->m_yield_return_index) {
    case 1: goto yield_return_1;
    }

    // Local variable initialization
    static struct Nuitka_FrameObject *cache_m_frame = NULL;
    generator_heap->var_i = NULL;
    generator_heap->tmp_iter_value_0 = NULL;
    generator_heap->type_description_1 = NULL;
    generator_heap->exception_type = NULL;
    generator_heap->exception_value = NULL;
    generator_heap->exception_tb = NULL;
    generator_heap->exception_lineno = 0;

    // Actual generator function body.
    // Tried code:
    MAKE_OR_REUSE_FRAME( cache_m_frame, codeobj_6faa91d48d00847614d477f9e48582b4, module_plistlib, sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *) );
    generator->m_frame = cache_m_frame;

    // Mark the frame object as in use, ref count 1 will be up for reuse.
    Py_INCREF( generator->m_frame );
    assert( Py_REFCNT( generator->m_frame ) == 2 ); // Frame stack

#if PYTHON_VERSION >= 340
    generator->m_frame->m_frame.f_gen = (PyObject *)generator;
#endif

    Py_CLEAR( generator->m_frame->m_frame.f_back );

    generator->m_frame->m_frame.f_back = PyThreadState_GET()->frame;
    Py_INCREF( generator->m_frame->m_frame.f_back );

    PyThreadState_GET()->frame = &generator->m_frame->m_frame;
    Py_INCREF( generator->m_frame );

    Nuitka_Frame_MarkAsExecuting( generator->m_frame );

#if PYTHON_VERSION >= 300
    // Accept currently existing exception as the one to publish again when we
    // yield or yield from.
    {
        PyThreadState *thread_state = PyThreadState_GET();

#if PYTHON_VERSION < 370
        generator->m_frame->m_frame.f_exc_type = EXC_TYPE( thread_state );
    if ( generator->m_frame->m_frame.f_exc_type == Py_None ) generator->m_frame->m_frame.f_exc_type = NULL;
        Py_XINCREF( generator->m_frame->m_frame.f_exc_type );
    generator->m_frame->m_frame.f_exc_value = EXC_VALUE( thread_state );
        Py_XINCREF( generator->m_frame->m_frame.f_exc_value );
    generator->m_frame->m_frame.f_exc_traceback = EXC_TRACEBACK( thread_state );
        Py_XINCREF( generator->m_frame->m_frame.f_exc_traceback );
#else
        generator->m_exc_state.exc_type = EXC_TYPE( thread_state );
        if ( generator->m_exc_state.exc_type == Py_None ) generator->m_exc_state.exc_type = NULL;
        Py_XINCREF( generator->m_exc_state.exc_type );
        generator->m_exc_state.exc_value = EXC_VALUE( thread_state );
        Py_XINCREF( generator->m_exc_state.exc_value );
        generator->m_exc_state.exc_traceback = EXC_TRACEBACK( thread_state );
        Py_XINCREF( generator->m_exc_state.exc_traceback );
#endif
    }

#endif

    // Framed code:
    // Tried code:
    loop_start_1:;
    {
        PyObject *tmp_next_source_1;
        PyObject *tmp_assign_source_1;
        CHECK_OBJECT( PyCell_GET( generator->m_closure[1] ) );
        tmp_next_source_1 = PyCell_GET( generator->m_closure[1] );
        tmp_assign_source_1 = ITERATOR_NEXT( tmp_next_source_1 );
        if ( tmp_assign_source_1 == NULL )
        {
            if ( CHECK_AND_CLEAR_STOP_ITERATION_OCCURRED() )
            {

                goto loop_end_1;
            }
            else
            {

                FETCH_ERROR_OCCURRED( &generator_heap->exception_type, &generator_heap->exception_value, &generator_heap->exception_tb );
                generator_heap->type_description_1 = "Nocc";
                generator_heap->exception_lineno = 584;
                goto try_except_handler_2;
            }
        }

        {
            PyObject *old = generator_heap->tmp_iter_value_0;
            generator_heap->tmp_iter_value_0 = tmp_assign_source_1;
            Py_XDECREF( old );
        }

    }
    {
        PyObject *tmp_assign_source_2;
        CHECK_OBJECT( generator_heap->tmp_iter_value_0 );
        tmp_assign_source_2 = generator_heap->tmp_iter_value_0;
        {
            PyObject *old = generator_heap->var_i;
            generator_heap->var_i = tmp_assign_source_2;
            Py_INCREF( generator_heap->var_i );
            Py_XDECREF( old );
        }

    }
    {
        PyObject *tmp_expression_name_1;
        PyObject *tmp_called_name_1;
        PyObject *tmp_source_name_1;
        PyObject *tmp_args_element_name_1;
        PyObject *tmp_subscribed_name_1;
        PyObject *tmp_subscript_name_1;
        PyObject *tmp_start_name_1;
        PyObject *tmp_stop_name_1;
        PyObject *tmp_left_name_1;
        PyObject *tmp_right_name_1;
        PyObject *tmp_step_name_1;
        PyObject *tmp_args_element_name_2;
        NUITKA_MAY_BE_UNUSED PyObject *tmp_yield_result_1;
        tmp_source_name_1 = (PyObject *)&PyLong_Type;
        tmp_called_name_1 = LOOKUP_ATTRIBUTE( tmp_source_name_1, const_str_plain_from_bytes );
        assert( !(tmp_called_name_1 == NULL) );
        if ( PyCell_GET( generator->m_closure[0] ) == NULL )
        {
            Py_DECREF( tmp_called_name_1 );
            generator_heap->exception_type = PyExc_NameError;
            Py_INCREF( generator_heap->exception_type );
            generator_heap->exception_value = PyUnicode_FromFormat( "free variable '%s' referenced before assignment in enclosing scope", "data" );
            generator_heap->exception_tb = NULL;
            NORMALIZE_EXCEPTION( &generator_heap->exception_type, &generator_heap->exception_value, &generator_heap->exception_tb );
            CHAIN_EXCEPTION( generator_heap->exception_value );

            generator_heap->exception_lineno = 584;
            generator_heap->type_description_1 = "Nocc";
            goto try_except_handler_2;
        }

        tmp_subscribed_name_1 = PyCell_GET( generator->m_closure[0] );
        CHECK_OBJECT( generator_heap->var_i );
        tmp_start_name_1 = generator_heap->var_i;
        CHECK_OBJECT( generator_heap->var_i );
        tmp_left_name_1 = generator_heap->var_i;
        if ( PyCell_GET( generator->m_closure[2] ) == NULL )
        {
            Py_DECREF( tmp_called_name_1 );
            generator_heap->exception_type = PyExc_NameError;
            Py_INCREF( generator_heap->exception_type );
            generator_heap->exception_value = PyUnicode_FromFormat( "free variable '%s' referenced before assignment in enclosing scope", "size" );
            generator_heap->exception_tb = NULL;
            NORMALIZE_EXCEPTION( &generator_heap->exception_type, &generator_heap->exception_value, &generator_heap->exception_tb );
            CHAIN_EXCEPTION( generator_heap->exception_value );

            generator_heap->exception_lineno = 584;
            generator_heap->type_description_1 = "Nocc";
            goto try_except_handler_2;
        }

        tmp_right_name_1 = PyCell_GET( generator->m_closure[2] );
        tmp_stop_name_1 = BINARY_OPERATION_ADD_OBJECT_OBJECT( tmp_left_name_1, tmp_right_name_1 );
        if ( tmp_stop_name_1 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &generator_heap->exception_type, &generator_heap->exception_value, &generator_heap->exception_tb );
            Py_DECREF( tmp_called_name_1 );

            generator_heap->exception_lineno = 584;
            generator_heap->type_description_1 = "Nocc";
            goto try_except_handler_2;
        }
        tmp_step_name_1 = Py_None;
        tmp_subscript_name_1 = MAKE_SLICEOBJ3( tmp_start_name_1, tmp_stop_name_1, tmp_step_name_1 );
        Py_DECREF( tmp_stop_name_1 );
        assert( !(tmp_subscript_name_1 == NULL) );
        tmp_args_element_name_1 = LOOKUP_SUBSCRIPT( tmp_subscribed_name_1, tmp_subscript_name_1 );
        Py_DECREF( tmp_subscript_name_1 );
        if ( tmp_args_element_name_1 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &generator_heap->exception_type, &generator_heap->exception_value, &generator_heap->exception_tb );
            Py_DECREF( tmp_called_name_1 );

            generator_heap->exception_lineno = 584;
            generator_heap->type_description_1 = "Nocc";
            goto try_except_handler_2;
        }
        tmp_args_element_name_2 = const_str_plain_big;
        generator->m_frame->m_frame.f_lineno = 584;
        {
            PyObject *call_args[] = { tmp_args_element_name_1, tmp_args_element_name_2 };
            tmp_expression_name_1 = CALL_FUNCTION_WITH_ARGS2( tmp_called_name_1, call_args );
        }

        Py_DECREF( tmp_called_name_1 );
        Py_DECREF( tmp_args_element_name_1 );
        if ( tmp_expression_name_1 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &generator_heap->exception_type, &generator_heap->exception_value, &generator_heap->exception_tb );


            generator_heap->exception_lineno = 584;
            generator_heap->type_description_1 = "Nocc";
            goto try_except_handler_2;
        }
        Nuitka_PreserveHeap( generator_heap->yield_tmps, &tmp_called_name_1, sizeof(PyObject *), &tmp_source_name_1, sizeof(PyObject *), &tmp_args_element_name_1, sizeof(PyObject *), &tmp_subscribed_name_1, sizeof(PyObject *), &tmp_subscript_name_1, sizeof(PyObject *), &tmp_start_name_1, sizeof(PyObject *), &tmp_stop_name_1, sizeof(PyObject *), &tmp_left_name_1, sizeof(PyObject *), &tmp_right_name_1, sizeof(PyObject *), &tmp_step_name_1, sizeof(PyObject *), &tmp_args_element_name_2, sizeof(PyObject *), NULL );
        generator->m_yield_return_index = 1;
        return tmp_expression_name_1;
        yield_return_1:
        Nuitka_RestoreHeap( generator_heap->yield_tmps, &tmp_called_name_1, sizeof(PyObject *), &tmp_source_name_1, sizeof(PyObject *), &tmp_args_element_name_1, sizeof(PyObject *), &tmp_subscribed_name_1, sizeof(PyObject *), &tmp_subscript_name_1, sizeof(PyObject *), &tmp_start_name_1, sizeof(PyObject *), &tmp_stop_name_1, sizeof(PyObject *), &tmp_left_name_1, sizeof(PyObject *), &tmp_right_name_1, sizeof(PyObject *), &tmp_step_name_1, sizeof(PyObject *), &tmp_args_element_name_2, sizeof(PyObject *), NULL );
        if ( yield_return_value == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &generator_heap->exception_type, &generator_heap->exception_value, &generator_heap->exception_tb );


            generator_heap->exception_lineno = 584;
            generator_heap->type_description_1 = "Nocc";
            goto try_except_handler_2;
        }
        tmp_yield_result_1 = yield_return_value;
    }
    if ( CONSIDER_THREADING() == false )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &generator_heap->exception_type, &generator_heap->exception_value, &generator_heap->exception_tb );


        generator_heap->exception_lineno = 584;
        generator_heap->type_description_1 = "Nocc";
        goto try_except_handler_2;
    }
    goto loop_start_1;
    loop_end_1:;
    goto try_end_1;
    // Exception handler code:
    try_except_handler_2:;
    generator_heap->exception_keeper_type_1 = generator_heap->exception_type;
    generator_heap->exception_keeper_value_1 = generator_heap->exception_value;
    generator_heap->exception_keeper_tb_1 = generator_heap->exception_tb;
    generator_heap->exception_keeper_lineno_1 = generator_heap->exception_lineno;
    generator_heap->exception_type = NULL;
    generator_heap->exception_value = NULL;
    generator_heap->exception_tb = NULL;
    generator_heap->exception_lineno = 0;

    Py_XDECREF( generator_heap->tmp_iter_value_0 );
    generator_heap->tmp_iter_value_0 = NULL;

    // Re-raise.
    generator_heap->exception_type = generator_heap->exception_keeper_type_1;
    generator_heap->exception_value = generator_heap->exception_keeper_value_1;
    generator_heap->exception_tb = generator_heap->exception_keeper_tb_1;
    generator_heap->exception_lineno = generator_heap->exception_keeper_lineno_1;

    goto frame_exception_exit_1;
    // End of try:
    try_end_1:;

    Nuitka_Frame_MarkAsNotExecuting( generator->m_frame );

#if PYTHON_VERSION >= 370
    Py_CLEAR( generator->m_exc_state.exc_type );
    Py_CLEAR( generator->m_exc_state.exc_value );
    Py_CLEAR( generator->m_exc_state.exc_traceback );
#elif PYTHON_VERSION >= 300
    Py_CLEAR( generator->m_frame->m_frame.f_exc_type );
    Py_CLEAR( generator->m_frame->m_frame.f_exc_value );
    Py_CLEAR( generator->m_frame->m_frame.f_exc_traceback );
#endif

    // Allow re-use of the frame again.
    Py_DECREF( generator->m_frame );
    goto frame_no_exception_1;

    frame_exception_exit_1:;

    // If it's not an exit exception, consider and create a traceback for it.
    if ( !EXCEPTION_MATCH_GENERATOR( generator_heap->exception_type ) )
    {
        if ( generator_heap->exception_tb == NULL )
        {
            generator_heap->exception_tb = MAKE_TRACEBACK( generator->m_frame, generator_heap->exception_lineno );
        }
        else if ( generator_heap->exception_tb->tb_frame != &generator->m_frame->m_frame )
        {
            generator_heap->exception_tb = ADD_TRACEBACK( generator_heap->exception_tb, generator->m_frame, generator_heap->exception_lineno );
        }

        Nuitka_Frame_AttachLocals(
            (struct Nuitka_FrameObject *)generator->m_frame,
            generator_heap->type_description_1,
            NULL,
            generator_heap->var_i,
            generator->m_closure[0],
            generator->m_closure[2]
        );


        // Release cached frame.
        if ( generator->m_frame == cache_m_frame )
        {
            Py_DECREF( generator->m_frame );
        }
        cache_m_frame = NULL;

        assertFrameObject( generator->m_frame );
    }

#if PYTHON_VERSION >= 370
    Py_CLEAR( generator->m_exc_state.exc_type );
    Py_CLEAR( generator->m_exc_state.exc_value );
    Py_CLEAR( generator->m_exc_state.exc_traceback );
#elif PYTHON_VERSION >= 300
    Py_CLEAR( generator->m_frame->m_frame.f_exc_type );
    Py_CLEAR( generator->m_frame->m_frame.f_exc_value );
    Py_CLEAR( generator->m_frame->m_frame.f_exc_traceback );
#endif

    Py_DECREF( generator->m_frame );

    // Return the error.
    goto try_except_handler_1;

    frame_no_exception_1:;
    goto try_end_2;
    // Exception handler code:
    try_except_handler_1:;
    generator_heap->exception_keeper_type_2 = generator_heap->exception_type;
    generator_heap->exception_keeper_value_2 = generator_heap->exception_value;
    generator_heap->exception_keeper_tb_2 = generator_heap->exception_tb;
    generator_heap->exception_keeper_lineno_2 = generator_heap->exception_lineno;
    generator_heap->exception_type = NULL;
    generator_heap->exception_value = NULL;
    generator_heap->exception_tb = NULL;
    generator_heap->exception_lineno = 0;

    Py_XDECREF( generator_heap->var_i );
    generator_heap->var_i = NULL;

    // Re-raise.
    generator_heap->exception_type = generator_heap->exception_keeper_type_2;
    generator_heap->exception_value = generator_heap->exception_keeper_value_2;
    generator_heap->exception_tb = generator_heap->exception_keeper_tb_2;
    generator_heap->exception_lineno = generator_heap->exception_keeper_lineno_2;

    goto function_exception_exit;
    // End of try:
    try_end_2:;
    Py_XDECREF( generator_heap->tmp_iter_value_0 );
    generator_heap->tmp_iter_value_0 = NULL;

    Py_XDECREF( generator_heap->var_i );
    generator_heap->var_i = NULL;



    return NULL;

    function_exception_exit:
    assert( generator_heap->exception_type );
    RESTORE_ERROR_OCCURRED( generator_heap->exception_type, generator_heap->exception_value, generator_heap->exception_tb );

    return NULL;

}

static PyObject *plistlib$$$function_52__read_ints$$$genexpr_1_genexpr_maker( void )
{
    return Nuitka_Generator_New(
        plistlib$$$function_52__read_ints$$$genexpr_1_genexpr_context,
        module_plistlib,
        const_str_angle_genexpr,
#if PYTHON_VERSION >= 350
        const_str_digest_4a0af618cadba292e889bc974db429ae,
#endif
        codeobj_6faa91d48d00847614d477f9e48582b4,
        3,
        sizeof(struct plistlib$$$function_52__read_ints$$$genexpr_1_genexpr_locals)
    );
}


static PyObject *impl_plistlib$$$function_53__read_refs( struct Nuitka_FunctionObject const *self, PyObject **python_pars )
{
    // Preserve error status for checks
#ifndef __NUITKA_NO_ASSERT__
    NUITKA_MAY_BE_UNUSED bool had_error = ERROR_OCCURRED();
#endif

    // Local variable declarations.
    PyObject *par_self = python_pars[ 0 ];
    PyObject *par_n = python_pars[ 1 ];
    struct Nuitka_FrameObject *frame_b755b67a5fe4586c6fe186a1c960c2e2;
    NUITKA_MAY_BE_UNUSED char const *type_description_1 = NULL;
    PyObject *tmp_return_value = NULL;
    PyObject *exception_type = NULL;
    PyObject *exception_value = NULL;
    PyTracebackObject *exception_tb = NULL;
    NUITKA_MAY_BE_UNUSED int exception_lineno = 0;
    static struct Nuitka_FrameObject *cache_frame_b755b67a5fe4586c6fe186a1c960c2e2 = NULL;
    PyObject *exception_keeper_type_1;
    PyObject *exception_keeper_value_1;
    PyTracebackObject *exception_keeper_tb_1;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_1;

    // Actual function body.
    // Tried code:
    MAKE_OR_REUSE_FRAME( cache_frame_b755b67a5fe4586c6fe186a1c960c2e2, codeobj_b755b67a5fe4586c6fe186a1c960c2e2, module_plistlib, sizeof(void *)+sizeof(void *) );
    frame_b755b67a5fe4586c6fe186a1c960c2e2 = cache_frame_b755b67a5fe4586c6fe186a1c960c2e2;

    // Push the new frame as the currently active one.
    pushFrameStack( frame_b755b67a5fe4586c6fe186a1c960c2e2 );

    // Mark the frame object as in use, ref count 1 will be up for reuse.
    assert( Py_REFCNT( frame_b755b67a5fe4586c6fe186a1c960c2e2 ) == 2 ); // Frame stack

    // Framed code:
    {
        PyObject *tmp_called_name_1;
        PyObject *tmp_source_name_1;
        PyObject *tmp_args_element_name_1;
        PyObject *tmp_args_element_name_2;
        PyObject *tmp_source_name_2;
        CHECK_OBJECT( par_self );
        tmp_source_name_1 = par_self;
        tmp_called_name_1 = LOOKUP_ATTRIBUTE( tmp_source_name_1, const_str_plain__read_ints );
        if ( tmp_called_name_1 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 588;
            type_description_1 = "oo";
            goto frame_exception_exit_1;
        }
        CHECK_OBJECT( par_n );
        tmp_args_element_name_1 = par_n;
        CHECK_OBJECT( par_self );
        tmp_source_name_2 = par_self;
        tmp_args_element_name_2 = LOOKUP_ATTRIBUTE( tmp_source_name_2, const_str_plain__ref_size );
        if ( tmp_args_element_name_2 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
            Py_DECREF( tmp_called_name_1 );

            exception_lineno = 588;
            type_description_1 = "oo";
            goto frame_exception_exit_1;
        }
        frame_b755b67a5fe4586c6fe186a1c960c2e2->m_frame.f_lineno = 588;
        {
            PyObject *call_args[] = { tmp_args_element_name_1, tmp_args_element_name_2 };
            tmp_return_value = CALL_FUNCTION_WITH_ARGS2( tmp_called_name_1, call_args );
        }

        Py_DECREF( tmp_called_name_1 );
        Py_DECREF( tmp_args_element_name_2 );
        if ( tmp_return_value == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 588;
            type_description_1 = "oo";
            goto frame_exception_exit_1;
        }
        goto frame_return_exit_1;
    }

#if 0
    RESTORE_FRAME_EXCEPTION( frame_b755b67a5fe4586c6fe186a1c960c2e2 );
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto frame_no_exception_1;

    frame_return_exit_1:;
#if 0
    RESTORE_FRAME_EXCEPTION( frame_b755b67a5fe4586c6fe186a1c960c2e2 );
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto try_return_handler_1;

    frame_exception_exit_1:;

#if 0
    RESTORE_FRAME_EXCEPTION( frame_b755b67a5fe4586c6fe186a1c960c2e2 );
#endif

    if ( exception_tb == NULL )
    {
        exception_tb = MAKE_TRACEBACK( frame_b755b67a5fe4586c6fe186a1c960c2e2, exception_lineno );
    }
    else if ( exception_tb->tb_frame != &frame_b755b67a5fe4586c6fe186a1c960c2e2->m_frame )
    {
        exception_tb = ADD_TRACEBACK( exception_tb, frame_b755b67a5fe4586c6fe186a1c960c2e2, exception_lineno );
    }

    // Attachs locals to frame if any.
    Nuitka_Frame_AttachLocals(
        (struct Nuitka_FrameObject *)frame_b755b67a5fe4586c6fe186a1c960c2e2,
        type_description_1,
        par_self,
        par_n
    );


    // Release cached frame.
    if ( frame_b755b67a5fe4586c6fe186a1c960c2e2 == cache_frame_b755b67a5fe4586c6fe186a1c960c2e2 )
    {
        Py_DECREF( frame_b755b67a5fe4586c6fe186a1c960c2e2 );
    }
    cache_frame_b755b67a5fe4586c6fe186a1c960c2e2 = NULL;

    assertFrameObject( frame_b755b67a5fe4586c6fe186a1c960c2e2 );

    // Put the previous frame back on top.
    popFrameStack();

    // Return the error.
    goto try_except_handler_1;

    frame_no_exception_1:;
    // tried codes exits in all cases
    NUITKA_CANNOT_GET_HERE( plistlib$$$function_53__read_refs );
    return NULL;
    // Return handler code:
    try_return_handler_1:;
    CHECK_OBJECT( (PyObject *)par_self );
    Py_DECREF( par_self );
    par_self = NULL;

    CHECK_OBJECT( (PyObject *)par_n );
    Py_DECREF( par_n );
    par_n = NULL;

    goto function_return_exit;
    // Exception handler code:
    try_except_handler_1:;
    exception_keeper_type_1 = exception_type;
    exception_keeper_value_1 = exception_value;
    exception_keeper_tb_1 = exception_tb;
    exception_keeper_lineno_1 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    CHECK_OBJECT( (PyObject *)par_self );
    Py_DECREF( par_self );
    par_self = NULL;

    CHECK_OBJECT( (PyObject *)par_n );
    Py_DECREF( par_n );
    par_n = NULL;

    // Re-raise.
    exception_type = exception_keeper_type_1;
    exception_value = exception_keeper_value_1;
    exception_tb = exception_keeper_tb_1;
    exception_lineno = exception_keeper_lineno_1;

    goto function_exception_exit;
    // End of try:

    // Return statement must have exited already.
    NUITKA_CANNOT_GET_HERE( plistlib$$$function_53__read_refs );
    return NULL;

function_exception_exit:
    assert( exception_type );
    RESTORE_ERROR_OCCURRED( exception_type, exception_value, exception_tb );

    return NULL;

function_return_exit:
   // Function cleanup code if any.


   // Actual function exit with return value, making sure we did not make
   // the error status worse despite non-NULL return.
   CHECK_OBJECT( tmp_return_value );
   assert( had_error || !ERROR_OCCURRED() );
   return tmp_return_value;
}


static PyObject *impl_plistlib$$$function_54__read_object( struct Nuitka_FunctionObject const *self, PyObject **python_pars )
{
    // Preserve error status for checks
#ifndef __NUITKA_NO_ASSERT__
    NUITKA_MAY_BE_UNUSED bool had_error = ERROR_OCCURRED();
#endif

    // Local variable declarations.
    struct Nuitka_CellObject *par_self = PyCell_NEW1( python_pars[ 0 ] );
    PyObject *par_ref = python_pars[ 1 ];
    PyObject *var_result = NULL;
    PyObject *var_offset = NULL;
    PyObject *var_token = NULL;
    PyObject *var_tokenH = NULL;
    PyObject *var_tokenL = NULL;
    PyObject *var_f = NULL;
    PyObject *var_s = NULL;
    PyObject *var_obj_refs = NULL;
    PyObject *var_key_refs = NULL;
    PyObject *var_k = NULL;
    PyObject *var_o = NULL;
    PyObject *tmp_for_loop_1__for_iterator = NULL;
    PyObject *tmp_for_loop_1__iter_value = NULL;
    PyObject *tmp_genexpr_1__$0 = NULL;
    PyObject *tmp_tuple_unpack_1__element_1 = NULL;
    PyObject *tmp_tuple_unpack_1__element_2 = NULL;
    PyObject *tmp_tuple_unpack_1__source_iter = NULL;
    PyObject *tmp_tuple_unpack_2__element_1 = NULL;
    PyObject *tmp_tuple_unpack_2__element_2 = NULL;
    PyObject *tmp_tuple_unpack_2__source_iter = NULL;
    struct Nuitka_FrameObject *frame_1bf1851e5e22923611966fe471a992e2;
    NUITKA_MAY_BE_UNUSED char const *type_description_1 = NULL;
    PyObject *exception_type = NULL;
    PyObject *exception_value = NULL;
    PyTracebackObject *exception_tb = NULL;
    NUITKA_MAY_BE_UNUSED int exception_lineno = 0;
    PyObject *tmp_return_value = NULL;
    PyObject *exception_keeper_type_1;
    PyObject *exception_keeper_value_1;
    PyTracebackObject *exception_keeper_tb_1;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_1;
    PyObject *exception_keeper_type_2;
    PyObject *exception_keeper_value_2;
    PyTracebackObject *exception_keeper_tb_2;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_2;
    int tmp_res;
    bool tmp_result;
    PyObject *tmp_iterator_attempt;
    PyObject *exception_keeper_type_3;
    PyObject *exception_keeper_value_3;
    PyTracebackObject *exception_keeper_tb_3;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_3;
    PyObject *exception_keeper_type_4;
    PyObject *exception_keeper_value_4;
    PyTracebackObject *exception_keeper_tb_4;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_4;
    PyObject *exception_keeper_type_5;
    PyObject *exception_keeper_value_5;
    PyTracebackObject *exception_keeper_tb_5;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_5;
    static struct Nuitka_FrameObject *cache_frame_1bf1851e5e22923611966fe471a992e2 = NULL;
    PyObject *exception_keeper_type_6;
    PyObject *exception_keeper_value_6;
    PyTracebackObject *exception_keeper_tb_6;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_6;

    // Actual function body.
    // Tried code:
    MAKE_OR_REUSE_FRAME( cache_frame_1bf1851e5e22923611966fe471a992e2, codeobj_1bf1851e5e22923611966fe471a992e2, module_plistlib, sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *) );
    frame_1bf1851e5e22923611966fe471a992e2 = cache_frame_1bf1851e5e22923611966fe471a992e2;

    // Push the new frame as the currently active one.
    pushFrameStack( frame_1bf1851e5e22923611966fe471a992e2 );

    // Mark the frame object as in use, ref count 1 will be up for reuse.
    assert( Py_REFCNT( frame_1bf1851e5e22923611966fe471a992e2 ) == 2 ); // Frame stack

    // Framed code:
    {
        PyObject *tmp_assign_source_1;
        PyObject *tmp_subscribed_name_1;
        PyObject *tmp_source_name_1;
        PyObject *tmp_subscript_name_1;
        CHECK_OBJECT( PyCell_GET( par_self ) );
        tmp_source_name_1 = PyCell_GET( par_self );
        tmp_subscribed_name_1 = LOOKUP_ATTRIBUTE( tmp_source_name_1, const_str_plain__objects );
        if ( tmp_subscribed_name_1 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 596;
            type_description_1 = "coooooooooooo";
            goto frame_exception_exit_1;
        }
        CHECK_OBJECT( par_ref );
        tmp_subscript_name_1 = par_ref;
        tmp_assign_source_1 = LOOKUP_SUBSCRIPT( tmp_subscribed_name_1, tmp_subscript_name_1 );
        Py_DECREF( tmp_subscribed_name_1 );
        if ( tmp_assign_source_1 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 596;
            type_description_1 = "coooooooooooo";
            goto frame_exception_exit_1;
        }
        assert( var_result == NULL );
        var_result = tmp_assign_source_1;
    }
    {
        nuitka_bool tmp_condition_result_1;
        PyObject *tmp_compexpr_left_1;
        PyObject *tmp_compexpr_right_1;
        PyObject *tmp_mvar_value_1;
        CHECK_OBJECT( var_result );
        tmp_compexpr_left_1 = var_result;
        tmp_mvar_value_1 = GET_STRING_DICT_VALUE( moduledict_plistlib, (Nuitka_StringObject *)const_str_plain__undefined );

        if (unlikely( tmp_mvar_value_1 == NULL ))
        {
            tmp_mvar_value_1 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain__undefined );
        }

        if ( tmp_mvar_value_1 == NULL )
        {

            exception_type = PyExc_NameError;
            Py_INCREF( exception_type );
            exception_value = PyUnicode_FromFormat( "name '%s' is not defined", "_undefined" );
            exception_tb = NULL;
            NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
            CHAIN_EXCEPTION( exception_value );

            exception_lineno = 597;
            type_description_1 = "coooooooooooo";
            goto frame_exception_exit_1;
        }

        tmp_compexpr_right_1 = tmp_mvar_value_1;
        tmp_condition_result_1 = ( tmp_compexpr_left_1 != tmp_compexpr_right_1 ) ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
        if ( tmp_condition_result_1 == NUITKA_BOOL_TRUE )
        {
            goto branch_yes_1;
        }
        else
        {
            goto branch_no_1;
        }
        branch_yes_1:;
        CHECK_OBJECT( var_result );
        tmp_return_value = var_result;
        Py_INCREF( tmp_return_value );
        goto frame_return_exit_1;
        branch_no_1:;
    }
    {
        PyObject *tmp_assign_source_2;
        PyObject *tmp_subscribed_name_2;
        PyObject *tmp_source_name_2;
        PyObject *tmp_subscript_name_2;
        CHECK_OBJECT( PyCell_GET( par_self ) );
        tmp_source_name_2 = PyCell_GET( par_self );
        tmp_subscribed_name_2 = LOOKUP_ATTRIBUTE( tmp_source_name_2, const_str_plain__object_offsets );
        if ( tmp_subscribed_name_2 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 600;
            type_description_1 = "coooooooooooo";
            goto frame_exception_exit_1;
        }
        CHECK_OBJECT( par_ref );
        tmp_subscript_name_2 = par_ref;
        tmp_assign_source_2 = LOOKUP_SUBSCRIPT( tmp_subscribed_name_2, tmp_subscript_name_2 );
        Py_DECREF( tmp_subscribed_name_2 );
        if ( tmp_assign_source_2 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 600;
            type_description_1 = "coooooooooooo";
            goto frame_exception_exit_1;
        }
        assert( var_offset == NULL );
        var_offset = tmp_assign_source_2;
    }
    {
        PyObject *tmp_called_instance_1;
        PyObject *tmp_source_name_3;
        PyObject *tmp_call_result_1;
        PyObject *tmp_args_element_name_1;
        CHECK_OBJECT( PyCell_GET( par_self ) );
        tmp_source_name_3 = PyCell_GET( par_self );
        tmp_called_instance_1 = LOOKUP_ATTRIBUTE( tmp_source_name_3, const_str_plain__fp );
        if ( tmp_called_instance_1 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 601;
            type_description_1 = "coooooooooooo";
            goto frame_exception_exit_1;
        }
        CHECK_OBJECT( var_offset );
        tmp_args_element_name_1 = var_offset;
        frame_1bf1851e5e22923611966fe471a992e2->m_frame.f_lineno = 601;
        {
            PyObject *call_args[] = { tmp_args_element_name_1 };
            tmp_call_result_1 = CALL_METHOD_WITH_ARGS1( tmp_called_instance_1, const_str_plain_seek, call_args );
        }

        Py_DECREF( tmp_called_instance_1 );
        if ( tmp_call_result_1 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 601;
            type_description_1 = "coooooooooooo";
            goto frame_exception_exit_1;
        }
        Py_DECREF( tmp_call_result_1 );
    }
    {
        PyObject *tmp_assign_source_3;
        PyObject *tmp_subscribed_name_3;
        PyObject *tmp_called_instance_2;
        PyObject *tmp_source_name_4;
        PyObject *tmp_subscript_name_3;
        CHECK_OBJECT( PyCell_GET( par_self ) );
        tmp_source_name_4 = PyCell_GET( par_self );
        tmp_called_instance_2 = LOOKUP_ATTRIBUTE( tmp_source_name_4, const_str_plain__fp );
        if ( tmp_called_instance_2 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 602;
            type_description_1 = "coooooooooooo";
            goto frame_exception_exit_1;
        }
        frame_1bf1851e5e22923611966fe471a992e2->m_frame.f_lineno = 602;
        tmp_subscribed_name_3 = CALL_METHOD_WITH_ARGS1( tmp_called_instance_2, const_str_plain_read, &PyTuple_GET_ITEM( const_tuple_int_pos_1_tuple, 0 ) );

        Py_DECREF( tmp_called_instance_2 );
        if ( tmp_subscribed_name_3 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 602;
            type_description_1 = "coooooooooooo";
            goto frame_exception_exit_1;
        }
        tmp_subscript_name_3 = const_int_0;
        tmp_assign_source_3 = LOOKUP_SUBSCRIPT_CONST( tmp_subscribed_name_3, tmp_subscript_name_3, 0 );
        Py_DECREF( tmp_subscribed_name_3 );
        if ( tmp_assign_source_3 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 602;
            type_description_1 = "coooooooooooo";
            goto frame_exception_exit_1;
        }
        assert( var_token == NULL );
        var_token = tmp_assign_source_3;
    }
    // Tried code:
    {
        PyObject *tmp_assign_source_4;
        PyObject *tmp_iter_arg_1;
        PyObject *tmp_tuple_element_1;
        PyObject *tmp_left_name_1;
        PyObject *tmp_right_name_1;
        PyObject *tmp_left_name_2;
        PyObject *tmp_right_name_2;
        CHECK_OBJECT( var_token );
        tmp_left_name_1 = var_token;
        tmp_right_name_1 = const_int_pos_240;
        tmp_tuple_element_1 = BINARY_OPERATION( PyNumber_And, tmp_left_name_1, tmp_right_name_1 );
        if ( tmp_tuple_element_1 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 603;
            type_description_1 = "coooooooooooo";
            goto try_except_handler_2;
        }
        tmp_iter_arg_1 = PyTuple_New( 2 );
        PyTuple_SET_ITEM( tmp_iter_arg_1, 0, tmp_tuple_element_1 );
        CHECK_OBJECT( var_token );
        tmp_left_name_2 = var_token;
        tmp_right_name_2 = const_int_pos_15;
        tmp_tuple_element_1 = BINARY_OPERATION( PyNumber_And, tmp_left_name_2, tmp_right_name_2 );
        if ( tmp_tuple_element_1 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
            Py_DECREF( tmp_iter_arg_1 );

            exception_lineno = 603;
            type_description_1 = "coooooooooooo";
            goto try_except_handler_2;
        }
        PyTuple_SET_ITEM( tmp_iter_arg_1, 1, tmp_tuple_element_1 );
        tmp_assign_source_4 = MAKE_UNPACK_ITERATOR( tmp_iter_arg_1 );
        Py_DECREF( tmp_iter_arg_1 );
        if ( tmp_assign_source_4 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 603;
            type_description_1 = "coooooooooooo";
            goto try_except_handler_2;
        }
        assert( tmp_tuple_unpack_1__source_iter == NULL );
        tmp_tuple_unpack_1__source_iter = tmp_assign_source_4;
    }
    // Tried code:
    {
        PyObject *tmp_assign_source_5;
        PyObject *tmp_unpack_1;
        CHECK_OBJECT( tmp_tuple_unpack_1__source_iter );
        tmp_unpack_1 = tmp_tuple_unpack_1__source_iter;
        tmp_assign_source_5 = UNPACK_NEXT( tmp_unpack_1, 0, 2 );
        if ( tmp_assign_source_5 == NULL )
        {
            if ( !ERROR_OCCURRED() )
            {
                exception_type = PyExc_StopIteration;
                Py_INCREF( exception_type );
                exception_value = NULL;
                exception_tb = NULL;
            }
            else
            {
                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
            }


            type_description_1 = "coooooooooooo";
            exception_lineno = 603;
            goto try_except_handler_3;
        }
        assert( tmp_tuple_unpack_1__element_1 == NULL );
        tmp_tuple_unpack_1__element_1 = tmp_assign_source_5;
    }
    {
        PyObject *tmp_assign_source_6;
        PyObject *tmp_unpack_2;
        CHECK_OBJECT( tmp_tuple_unpack_1__source_iter );
        tmp_unpack_2 = tmp_tuple_unpack_1__source_iter;
        tmp_assign_source_6 = UNPACK_NEXT( tmp_unpack_2, 1, 2 );
        if ( tmp_assign_source_6 == NULL )
        {
            if ( !ERROR_OCCURRED() )
            {
                exception_type = PyExc_StopIteration;
                Py_INCREF( exception_type );
                exception_value = NULL;
                exception_tb = NULL;
            }
            else
            {
                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
            }


            type_description_1 = "coooooooooooo";
            exception_lineno = 603;
            goto try_except_handler_3;
        }
        assert( tmp_tuple_unpack_1__element_2 == NULL );
        tmp_tuple_unpack_1__element_2 = tmp_assign_source_6;
    }
    goto try_end_1;
    // Exception handler code:
    try_except_handler_3:;
    exception_keeper_type_1 = exception_type;
    exception_keeper_value_1 = exception_value;
    exception_keeper_tb_1 = exception_tb;
    exception_keeper_lineno_1 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    CHECK_OBJECT( (PyObject *)tmp_tuple_unpack_1__source_iter );
    Py_DECREF( tmp_tuple_unpack_1__source_iter );
    tmp_tuple_unpack_1__source_iter = NULL;

    // Re-raise.
    exception_type = exception_keeper_type_1;
    exception_value = exception_keeper_value_1;
    exception_tb = exception_keeper_tb_1;
    exception_lineno = exception_keeper_lineno_1;

    goto try_except_handler_2;
    // End of try:
    try_end_1:;
    goto try_end_2;
    // Exception handler code:
    try_except_handler_2:;
    exception_keeper_type_2 = exception_type;
    exception_keeper_value_2 = exception_value;
    exception_keeper_tb_2 = exception_tb;
    exception_keeper_lineno_2 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    Py_XDECREF( tmp_tuple_unpack_1__element_1 );
    tmp_tuple_unpack_1__element_1 = NULL;

    // Re-raise.
    exception_type = exception_keeper_type_2;
    exception_value = exception_keeper_value_2;
    exception_tb = exception_keeper_tb_2;
    exception_lineno = exception_keeper_lineno_2;

    goto frame_exception_exit_1;
    // End of try:
    try_end_2:;
    CHECK_OBJECT( (PyObject *)tmp_tuple_unpack_1__source_iter );
    Py_DECREF( tmp_tuple_unpack_1__source_iter );
    tmp_tuple_unpack_1__source_iter = NULL;

    {
        PyObject *tmp_assign_source_7;
        CHECK_OBJECT( tmp_tuple_unpack_1__element_1 );
        tmp_assign_source_7 = tmp_tuple_unpack_1__element_1;
        assert( var_tokenH == NULL );
        Py_INCREF( tmp_assign_source_7 );
        var_tokenH = tmp_assign_source_7;
    }
    Py_XDECREF( tmp_tuple_unpack_1__element_1 );
    tmp_tuple_unpack_1__element_1 = NULL;

    {
        PyObject *tmp_assign_source_8;
        CHECK_OBJECT( tmp_tuple_unpack_1__element_2 );
        tmp_assign_source_8 = tmp_tuple_unpack_1__element_2;
        assert( var_tokenL == NULL );
        Py_INCREF( tmp_assign_source_8 );
        var_tokenL = tmp_assign_source_8;
    }
    Py_XDECREF( tmp_tuple_unpack_1__element_2 );
    tmp_tuple_unpack_1__element_2 = NULL;

    {
        nuitka_bool tmp_condition_result_2;
        PyObject *tmp_compexpr_left_2;
        PyObject *tmp_compexpr_right_2;
        CHECK_OBJECT( var_token );
        tmp_compexpr_left_2 = var_token;
        tmp_compexpr_right_2 = const_int_0;
        tmp_res = RICH_COMPARE_BOOL_EQ_OBJECT_OBJECT( tmp_compexpr_left_2, tmp_compexpr_right_2 );
        if ( tmp_res == -1 )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 605;
            type_description_1 = "coooooooooooo";
            goto frame_exception_exit_1;
        }
        tmp_condition_result_2 = ( tmp_res != 0 ) ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
        if ( tmp_condition_result_2 == NUITKA_BOOL_TRUE )
        {
            goto branch_yes_2;
        }
        else
        {
            goto branch_no_2;
        }
        branch_yes_2:;
        {
            PyObject *tmp_assign_source_9;
            tmp_assign_source_9 = Py_None;
            {
                PyObject *old = var_result;
                assert( old != NULL );
                var_result = tmp_assign_source_9;
                Py_INCREF( var_result );
                Py_DECREF( old );
            }

        }
        goto branch_end_2;
        branch_no_2:;
        {
            nuitka_bool tmp_condition_result_3;
            PyObject *tmp_compexpr_left_3;
            PyObject *tmp_compexpr_right_3;
            CHECK_OBJECT( var_token );
            tmp_compexpr_left_3 = var_token;
            tmp_compexpr_right_3 = const_int_pos_8;
            tmp_res = RICH_COMPARE_BOOL_EQ_OBJECT_OBJECT( tmp_compexpr_left_3, tmp_compexpr_right_3 );
            if ( tmp_res == -1 )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 608;
                type_description_1 = "coooooooooooo";
                goto frame_exception_exit_1;
            }
            tmp_condition_result_3 = ( tmp_res != 0 ) ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
            if ( tmp_condition_result_3 == NUITKA_BOOL_TRUE )
            {
                goto branch_yes_3;
            }
            else
            {
                goto branch_no_3;
            }
            branch_yes_3:;
            {
                PyObject *tmp_assign_source_10;
                tmp_assign_source_10 = Py_False;
                {
                    PyObject *old = var_result;
                    assert( old != NULL );
                    var_result = tmp_assign_source_10;
                    Py_INCREF( var_result );
                    Py_DECREF( old );
                }

            }
            goto branch_end_3;
            branch_no_3:;
            {
                nuitka_bool tmp_condition_result_4;
                PyObject *tmp_compexpr_left_4;
                PyObject *tmp_compexpr_right_4;
                CHECK_OBJECT( var_token );
                tmp_compexpr_left_4 = var_token;
                tmp_compexpr_right_4 = const_int_pos_9;
                tmp_res = RICH_COMPARE_BOOL_EQ_OBJECT_OBJECT( tmp_compexpr_left_4, tmp_compexpr_right_4 );
                if ( tmp_res == -1 )
                {
                    assert( ERROR_OCCURRED() );

                    FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                    exception_lineno = 611;
                    type_description_1 = "coooooooooooo";
                    goto frame_exception_exit_1;
                }
                tmp_condition_result_4 = ( tmp_res != 0 ) ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
                if ( tmp_condition_result_4 == NUITKA_BOOL_TRUE )
                {
                    goto branch_yes_4;
                }
                else
                {
                    goto branch_no_4;
                }
                branch_yes_4:;
                {
                    PyObject *tmp_assign_source_11;
                    tmp_assign_source_11 = Py_True;
                    {
                        PyObject *old = var_result;
                        assert( old != NULL );
                        var_result = tmp_assign_source_11;
                        Py_INCREF( var_result );
                        Py_DECREF( old );
                    }

                }
                goto branch_end_4;
                branch_no_4:;
                {
                    nuitka_bool tmp_condition_result_5;
                    PyObject *tmp_compexpr_left_5;
                    PyObject *tmp_compexpr_right_5;
                    CHECK_OBJECT( var_token );
                    tmp_compexpr_left_5 = var_token;
                    tmp_compexpr_right_5 = const_int_pos_15;
                    tmp_res = RICH_COMPARE_BOOL_EQ_OBJECT_OBJECT( tmp_compexpr_left_5, tmp_compexpr_right_5 );
                    if ( tmp_res == -1 )
                    {
                        assert( ERROR_OCCURRED() );

                        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                        exception_lineno = 617;
                        type_description_1 = "coooooooooooo";
                        goto frame_exception_exit_1;
                    }
                    tmp_condition_result_5 = ( tmp_res != 0 ) ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
                    if ( tmp_condition_result_5 == NUITKA_BOOL_TRUE )
                    {
                        goto branch_yes_5;
                    }
                    else
                    {
                        goto branch_no_5;
                    }
                    branch_yes_5:;
                    {
                        PyObject *tmp_assign_source_12;
                        tmp_assign_source_12 = const_bytes_empty;
                        {
                            PyObject *old = var_result;
                            assert( old != NULL );
                            var_result = tmp_assign_source_12;
                            Py_INCREF( var_result );
                            Py_DECREF( old );
                        }

                    }
                    goto branch_end_5;
                    branch_no_5:;
                    {
                        nuitka_bool tmp_condition_result_6;
                        PyObject *tmp_compexpr_left_6;
                        PyObject *tmp_compexpr_right_6;
                        CHECK_OBJECT( var_tokenH );
                        tmp_compexpr_left_6 = var_tokenH;
                        tmp_compexpr_right_6 = const_int_pos_16;
                        tmp_res = RICH_COMPARE_BOOL_EQ_OBJECT_OBJECT( tmp_compexpr_left_6, tmp_compexpr_right_6 );
                        if ( tmp_res == -1 )
                        {
                            assert( ERROR_OCCURRED() );

                            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                            exception_lineno = 620;
                            type_description_1 = "coooooooooooo";
                            goto frame_exception_exit_1;
                        }
                        tmp_condition_result_6 = ( tmp_res != 0 ) ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
                        if ( tmp_condition_result_6 == NUITKA_BOOL_TRUE )
                        {
                            goto branch_yes_6;
                        }
                        else
                        {
                            goto branch_no_6;
                        }
                        branch_yes_6:;
                        {
                            PyObject *tmp_assign_source_13;
                            PyObject *tmp_called_name_1;
                            PyObject *tmp_source_name_5;
                            PyObject *tmp_args_name_1;
                            PyObject *tmp_tuple_element_2;
                            PyObject *tmp_called_name_2;
                            PyObject *tmp_source_name_6;
                            PyObject *tmp_source_name_7;
                            PyObject *tmp_args_element_name_2;
                            PyObject *tmp_left_name_3;
                            PyObject *tmp_right_name_3;
                            PyObject *tmp_kw_name_1;
                            PyObject *tmp_dict_key_1;
                            PyObject *tmp_dict_value_1;
                            PyObject *tmp_compexpr_left_7;
                            PyObject *tmp_compexpr_right_7;
                            tmp_source_name_5 = (PyObject *)&PyLong_Type;
                            tmp_called_name_1 = LOOKUP_ATTRIBUTE( tmp_source_name_5, const_str_plain_from_bytes );
                            assert( !(tmp_called_name_1 == NULL) );
                            CHECK_OBJECT( PyCell_GET( par_self ) );
                            tmp_source_name_7 = PyCell_GET( par_self );
                            tmp_source_name_6 = LOOKUP_ATTRIBUTE( tmp_source_name_7, const_str_plain__fp );
                            if ( tmp_source_name_6 == NULL )
                            {
                                assert( ERROR_OCCURRED() );

                                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
                                Py_DECREF( tmp_called_name_1 );

                                exception_lineno = 621;
                                type_description_1 = "coooooooooooo";
                                goto frame_exception_exit_1;
                            }
                            tmp_called_name_2 = LOOKUP_ATTRIBUTE( tmp_source_name_6, const_str_plain_read );
                            Py_DECREF( tmp_source_name_6 );
                            if ( tmp_called_name_2 == NULL )
                            {
                                assert( ERROR_OCCURRED() );

                                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
                                Py_DECREF( tmp_called_name_1 );

                                exception_lineno = 621;
                                type_description_1 = "coooooooooooo";
                                goto frame_exception_exit_1;
                            }
                            tmp_left_name_3 = const_int_pos_1;
                            CHECK_OBJECT( var_tokenL );
                            tmp_right_name_3 = var_tokenL;
                            tmp_args_element_name_2 = BINARY_OPERATION( PyNumber_Lshift, tmp_left_name_3, tmp_right_name_3 );
                            if ( tmp_args_element_name_2 == NULL )
                            {
                                assert( ERROR_OCCURRED() );

                                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
                                Py_DECREF( tmp_called_name_1 );
                                Py_DECREF( tmp_called_name_2 );

                                exception_lineno = 621;
                                type_description_1 = "coooooooooooo";
                                goto frame_exception_exit_1;
                            }
                            frame_1bf1851e5e22923611966fe471a992e2->m_frame.f_lineno = 621;
                            {
                                PyObject *call_args[] = { tmp_args_element_name_2 };
                                tmp_tuple_element_2 = CALL_FUNCTION_WITH_ARGS1( tmp_called_name_2, call_args );
                            }

                            Py_DECREF( tmp_called_name_2 );
                            Py_DECREF( tmp_args_element_name_2 );
                            if ( tmp_tuple_element_2 == NULL )
                            {
                                assert( ERROR_OCCURRED() );

                                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
                                Py_DECREF( tmp_called_name_1 );

                                exception_lineno = 621;
                                type_description_1 = "coooooooooooo";
                                goto frame_exception_exit_1;
                            }
                            tmp_args_name_1 = PyTuple_New( 2 );
                            PyTuple_SET_ITEM( tmp_args_name_1, 0, tmp_tuple_element_2 );
                            tmp_tuple_element_2 = const_str_plain_big;
                            Py_INCREF( tmp_tuple_element_2 );
                            PyTuple_SET_ITEM( tmp_args_name_1, 1, tmp_tuple_element_2 );
                            tmp_dict_key_1 = const_str_plain_signed;
                            CHECK_OBJECT( var_tokenL );
                            tmp_compexpr_left_7 = var_tokenL;
                            tmp_compexpr_right_7 = const_int_pos_3;
                            tmp_dict_value_1 = RICH_COMPARE_GTE_OBJECT_OBJECT( tmp_compexpr_left_7, tmp_compexpr_right_7 );
                            if ( tmp_dict_value_1 == NULL )
                            {
                                assert( ERROR_OCCURRED() );

                                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
                                Py_DECREF( tmp_called_name_1 );
                                Py_DECREF( tmp_args_name_1 );

                                exception_lineno = 622;
                                type_description_1 = "coooooooooooo";
                                goto frame_exception_exit_1;
                            }
                            tmp_kw_name_1 = _PyDict_NewPresized( 1 );
                            tmp_res = PyDict_SetItem( tmp_kw_name_1, tmp_dict_key_1, tmp_dict_value_1 );
                            Py_DECREF( tmp_dict_value_1 );
                            assert( !(tmp_res != 0) );
                            frame_1bf1851e5e22923611966fe471a992e2->m_frame.f_lineno = 621;
                            tmp_assign_source_13 = CALL_FUNCTION( tmp_called_name_1, tmp_args_name_1, tmp_kw_name_1 );
                            Py_DECREF( tmp_called_name_1 );
                            Py_DECREF( tmp_args_name_1 );
                            Py_DECREF( tmp_kw_name_1 );
                            if ( tmp_assign_source_13 == NULL )
                            {
                                assert( ERROR_OCCURRED() );

                                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                                exception_lineno = 621;
                                type_description_1 = "coooooooooooo";
                                goto frame_exception_exit_1;
                            }
                            {
                                PyObject *old = var_result;
                                assert( old != NULL );
                                var_result = tmp_assign_source_13;
                                Py_DECREF( old );
                            }

                        }
                        goto branch_end_6;
                        branch_no_6:;
                        {
                            nuitka_bool tmp_condition_result_7;
                            PyObject *tmp_compexpr_left_8;
                            PyObject *tmp_compexpr_right_8;
                            CHECK_OBJECT( var_token );
                            tmp_compexpr_left_8 = var_token;
                            tmp_compexpr_right_8 = const_int_pos_34;
                            tmp_res = RICH_COMPARE_BOOL_EQ_OBJECT_OBJECT( tmp_compexpr_left_8, tmp_compexpr_right_8 );
                            if ( tmp_res == -1 )
                            {
                                assert( ERROR_OCCURRED() );

                                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                                exception_lineno = 624;
                                type_description_1 = "coooooooooooo";
                                goto frame_exception_exit_1;
                            }
                            tmp_condition_result_7 = ( tmp_res != 0 ) ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
                            if ( tmp_condition_result_7 == NUITKA_BOOL_TRUE )
                            {
                                goto branch_yes_7;
                            }
                            else
                            {
                                goto branch_no_7;
                            }
                            branch_yes_7:;
                            {
                                PyObject *tmp_assign_source_14;
                                PyObject *tmp_subscribed_name_4;
                                PyObject *tmp_called_name_3;
                                PyObject *tmp_source_name_8;
                                PyObject *tmp_mvar_value_2;
                                PyObject *tmp_args_element_name_3;
                                PyObject *tmp_args_element_name_4;
                                PyObject *tmp_called_instance_3;
                                PyObject *tmp_source_name_9;
                                PyObject *tmp_subscript_name_4;
                                tmp_mvar_value_2 = GET_STRING_DICT_VALUE( moduledict_plistlib, (Nuitka_StringObject *)const_str_plain_struct );

                                if (unlikely( tmp_mvar_value_2 == NULL ))
                                {
                                    tmp_mvar_value_2 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_struct );
                                }

                                if ( tmp_mvar_value_2 == NULL )
                                {

                                    exception_type = PyExc_NameError;
                                    Py_INCREF( exception_type );
                                    exception_value = PyUnicode_FromFormat( "name '%s' is not defined", "struct" );
                                    exception_tb = NULL;
                                    NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
                                    CHAIN_EXCEPTION( exception_value );

                                    exception_lineno = 625;
                                    type_description_1 = "coooooooooooo";
                                    goto frame_exception_exit_1;
                                }

                                tmp_source_name_8 = tmp_mvar_value_2;
                                tmp_called_name_3 = LOOKUP_ATTRIBUTE( tmp_source_name_8, const_str_plain_unpack );
                                if ( tmp_called_name_3 == NULL )
                                {
                                    assert( ERROR_OCCURRED() );

                                    FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                                    exception_lineno = 625;
                                    type_description_1 = "coooooooooooo";
                                    goto frame_exception_exit_1;
                                }
                                tmp_args_element_name_3 = const_str_digest_7feffa0d4df18481696e57eff8cd7d01;
                                CHECK_OBJECT( PyCell_GET( par_self ) );
                                tmp_source_name_9 = PyCell_GET( par_self );
                                tmp_called_instance_3 = LOOKUP_ATTRIBUTE( tmp_source_name_9, const_str_plain__fp );
                                if ( tmp_called_instance_3 == NULL )
                                {
                                    assert( ERROR_OCCURRED() );

                                    FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
                                    Py_DECREF( tmp_called_name_3 );

                                    exception_lineno = 625;
                                    type_description_1 = "coooooooooooo";
                                    goto frame_exception_exit_1;
                                }
                                frame_1bf1851e5e22923611966fe471a992e2->m_frame.f_lineno = 625;
                                tmp_args_element_name_4 = CALL_METHOD_WITH_ARGS1( tmp_called_instance_3, const_str_plain_read, &PyTuple_GET_ITEM( const_tuple_int_pos_4_tuple, 0 ) );

                                Py_DECREF( tmp_called_instance_3 );
                                if ( tmp_args_element_name_4 == NULL )
                                {
                                    assert( ERROR_OCCURRED() );

                                    FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
                                    Py_DECREF( tmp_called_name_3 );

                                    exception_lineno = 625;
                                    type_description_1 = "coooooooooooo";
                                    goto frame_exception_exit_1;
                                }
                                frame_1bf1851e5e22923611966fe471a992e2->m_frame.f_lineno = 625;
                                {
                                    PyObject *call_args[] = { tmp_args_element_name_3, tmp_args_element_name_4 };
                                    tmp_subscribed_name_4 = CALL_FUNCTION_WITH_ARGS2( tmp_called_name_3, call_args );
                                }

                                Py_DECREF( tmp_called_name_3 );
                                Py_DECREF( tmp_args_element_name_4 );
                                if ( tmp_subscribed_name_4 == NULL )
                                {
                                    assert( ERROR_OCCURRED() );

                                    FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                                    exception_lineno = 625;
                                    type_description_1 = "coooooooooooo";
                                    goto frame_exception_exit_1;
                                }
                                tmp_subscript_name_4 = const_int_0;
                                tmp_assign_source_14 = LOOKUP_SUBSCRIPT_CONST( tmp_subscribed_name_4, tmp_subscript_name_4, 0 );
                                Py_DECREF( tmp_subscribed_name_4 );
                                if ( tmp_assign_source_14 == NULL )
                                {
                                    assert( ERROR_OCCURRED() );

                                    FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                                    exception_lineno = 625;
                                    type_description_1 = "coooooooooooo";
                                    goto frame_exception_exit_1;
                                }
                                {
                                    PyObject *old = var_result;
                                    assert( old != NULL );
                                    var_result = tmp_assign_source_14;
                                    Py_DECREF( old );
                                }

                            }
                            goto branch_end_7;
                            branch_no_7:;
                            {
                                nuitka_bool tmp_condition_result_8;
                                PyObject *tmp_compexpr_left_9;
                                PyObject *tmp_compexpr_right_9;
                                CHECK_OBJECT( var_token );
                                tmp_compexpr_left_9 = var_token;
                                tmp_compexpr_right_9 = const_int_pos_35;
                                tmp_res = RICH_COMPARE_BOOL_EQ_OBJECT_OBJECT( tmp_compexpr_left_9, tmp_compexpr_right_9 );
                                if ( tmp_res == -1 )
                                {
                                    assert( ERROR_OCCURRED() );

                                    FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                                    exception_lineno = 627;
                                    type_description_1 = "coooooooooooo";
                                    goto frame_exception_exit_1;
                                }
                                tmp_condition_result_8 = ( tmp_res != 0 ) ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
                                if ( tmp_condition_result_8 == NUITKA_BOOL_TRUE )
                                {
                                    goto branch_yes_8;
                                }
                                else
                                {
                                    goto branch_no_8;
                                }
                                branch_yes_8:;
                                {
                                    PyObject *tmp_assign_source_15;
                                    PyObject *tmp_subscribed_name_5;
                                    PyObject *tmp_called_name_4;
                                    PyObject *tmp_source_name_10;
                                    PyObject *tmp_mvar_value_3;
                                    PyObject *tmp_args_element_name_5;
                                    PyObject *tmp_args_element_name_6;
                                    PyObject *tmp_called_instance_4;
                                    PyObject *tmp_source_name_11;
                                    PyObject *tmp_subscript_name_5;
                                    tmp_mvar_value_3 = GET_STRING_DICT_VALUE( moduledict_plistlib, (Nuitka_StringObject *)const_str_plain_struct );

                                    if (unlikely( tmp_mvar_value_3 == NULL ))
                                    {
                                        tmp_mvar_value_3 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_struct );
                                    }

                                    if ( tmp_mvar_value_3 == NULL )
                                    {

                                        exception_type = PyExc_NameError;
                                        Py_INCREF( exception_type );
                                        exception_value = PyUnicode_FromFormat( "name '%s' is not defined", "struct" );
                                        exception_tb = NULL;
                                        NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
                                        CHAIN_EXCEPTION( exception_value );

                                        exception_lineno = 628;
                                        type_description_1 = "coooooooooooo";
                                        goto frame_exception_exit_1;
                                    }

                                    tmp_source_name_10 = tmp_mvar_value_3;
                                    tmp_called_name_4 = LOOKUP_ATTRIBUTE( tmp_source_name_10, const_str_plain_unpack );
                                    if ( tmp_called_name_4 == NULL )
                                    {
                                        assert( ERROR_OCCURRED() );

                                        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                                        exception_lineno = 628;
                                        type_description_1 = "coooooooooooo";
                                        goto frame_exception_exit_1;
                                    }
                                    tmp_args_element_name_5 = const_str_digest_6dbea4a21602f55a0ca9391648f3d9be;
                                    CHECK_OBJECT( PyCell_GET( par_self ) );
                                    tmp_source_name_11 = PyCell_GET( par_self );
                                    tmp_called_instance_4 = LOOKUP_ATTRIBUTE( tmp_source_name_11, const_str_plain__fp );
                                    if ( tmp_called_instance_4 == NULL )
                                    {
                                        assert( ERROR_OCCURRED() );

                                        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
                                        Py_DECREF( tmp_called_name_4 );

                                        exception_lineno = 628;
                                        type_description_1 = "coooooooooooo";
                                        goto frame_exception_exit_1;
                                    }
                                    frame_1bf1851e5e22923611966fe471a992e2->m_frame.f_lineno = 628;
                                    tmp_args_element_name_6 = CALL_METHOD_WITH_ARGS1( tmp_called_instance_4, const_str_plain_read, &PyTuple_GET_ITEM( const_tuple_int_pos_8_tuple, 0 ) );

                                    Py_DECREF( tmp_called_instance_4 );
                                    if ( tmp_args_element_name_6 == NULL )
                                    {
                                        assert( ERROR_OCCURRED() );

                                        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
                                        Py_DECREF( tmp_called_name_4 );

                                        exception_lineno = 628;
                                        type_description_1 = "coooooooooooo";
                                        goto frame_exception_exit_1;
                                    }
                                    frame_1bf1851e5e22923611966fe471a992e2->m_frame.f_lineno = 628;
                                    {
                                        PyObject *call_args[] = { tmp_args_element_name_5, tmp_args_element_name_6 };
                                        tmp_subscribed_name_5 = CALL_FUNCTION_WITH_ARGS2( tmp_called_name_4, call_args );
                                    }

                                    Py_DECREF( tmp_called_name_4 );
                                    Py_DECREF( tmp_args_element_name_6 );
                                    if ( tmp_subscribed_name_5 == NULL )
                                    {
                                        assert( ERROR_OCCURRED() );

                                        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                                        exception_lineno = 628;
                                        type_description_1 = "coooooooooooo";
                                        goto frame_exception_exit_1;
                                    }
                                    tmp_subscript_name_5 = const_int_0;
                                    tmp_assign_source_15 = LOOKUP_SUBSCRIPT_CONST( tmp_subscribed_name_5, tmp_subscript_name_5, 0 );
                                    Py_DECREF( tmp_subscribed_name_5 );
                                    if ( tmp_assign_source_15 == NULL )
                                    {
                                        assert( ERROR_OCCURRED() );

                                        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                                        exception_lineno = 628;
                                        type_description_1 = "coooooooooooo";
                                        goto frame_exception_exit_1;
                                    }
                                    {
                                        PyObject *old = var_result;
                                        assert( old != NULL );
                                        var_result = tmp_assign_source_15;
                                        Py_DECREF( old );
                                    }

                                }
                                goto branch_end_8;
                                branch_no_8:;
                                {
                                    nuitka_bool tmp_condition_result_9;
                                    PyObject *tmp_compexpr_left_10;
                                    PyObject *tmp_compexpr_right_10;
                                    CHECK_OBJECT( var_token );
                                    tmp_compexpr_left_10 = var_token;
                                    tmp_compexpr_right_10 = const_int_pos_51;
                                    tmp_res = RICH_COMPARE_BOOL_EQ_OBJECT_OBJECT( tmp_compexpr_left_10, tmp_compexpr_right_10 );
                                    if ( tmp_res == -1 )
                                    {
                                        assert( ERROR_OCCURRED() );

                                        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                                        exception_lineno = 630;
                                        type_description_1 = "coooooooooooo";
                                        goto frame_exception_exit_1;
                                    }
                                    tmp_condition_result_9 = ( tmp_res != 0 ) ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
                                    if ( tmp_condition_result_9 == NUITKA_BOOL_TRUE )
                                    {
                                        goto branch_yes_9;
                                    }
                                    else
                                    {
                                        goto branch_no_9;
                                    }
                                    branch_yes_9:;
                                    {
                                        PyObject *tmp_assign_source_16;
                                        PyObject *tmp_subscribed_name_6;
                                        PyObject *tmp_called_name_5;
                                        PyObject *tmp_source_name_12;
                                        PyObject *tmp_mvar_value_4;
                                        PyObject *tmp_args_element_name_7;
                                        PyObject *tmp_args_element_name_8;
                                        PyObject *tmp_called_instance_5;
                                        PyObject *tmp_source_name_13;
                                        PyObject *tmp_subscript_name_6;
                                        tmp_mvar_value_4 = GET_STRING_DICT_VALUE( moduledict_plistlib, (Nuitka_StringObject *)const_str_plain_struct );

                                        if (unlikely( tmp_mvar_value_4 == NULL ))
                                        {
                                            tmp_mvar_value_4 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_struct );
                                        }

                                        if ( tmp_mvar_value_4 == NULL )
                                        {

                                            exception_type = PyExc_NameError;
                                            Py_INCREF( exception_type );
                                            exception_value = PyUnicode_FromFormat( "name '%s' is not defined", "struct" );
                                            exception_tb = NULL;
                                            NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
                                            CHAIN_EXCEPTION( exception_value );

                                            exception_lineno = 631;
                                            type_description_1 = "coooooooooooo";
                                            goto frame_exception_exit_1;
                                        }

                                        tmp_source_name_12 = tmp_mvar_value_4;
                                        tmp_called_name_5 = LOOKUP_ATTRIBUTE( tmp_source_name_12, const_str_plain_unpack );
                                        if ( tmp_called_name_5 == NULL )
                                        {
                                            assert( ERROR_OCCURRED() );

                                            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                                            exception_lineno = 631;
                                            type_description_1 = "coooooooooooo";
                                            goto frame_exception_exit_1;
                                        }
                                        tmp_args_element_name_7 = const_str_digest_6dbea4a21602f55a0ca9391648f3d9be;
                                        CHECK_OBJECT( PyCell_GET( par_self ) );
                                        tmp_source_name_13 = PyCell_GET( par_self );
                                        tmp_called_instance_5 = LOOKUP_ATTRIBUTE( tmp_source_name_13, const_str_plain__fp );
                                        if ( tmp_called_instance_5 == NULL )
                                        {
                                            assert( ERROR_OCCURRED() );

                                            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
                                            Py_DECREF( tmp_called_name_5 );

                                            exception_lineno = 631;
                                            type_description_1 = "coooooooooooo";
                                            goto frame_exception_exit_1;
                                        }
                                        frame_1bf1851e5e22923611966fe471a992e2->m_frame.f_lineno = 631;
                                        tmp_args_element_name_8 = CALL_METHOD_WITH_ARGS1( tmp_called_instance_5, const_str_plain_read, &PyTuple_GET_ITEM( const_tuple_int_pos_8_tuple, 0 ) );

                                        Py_DECREF( tmp_called_instance_5 );
                                        if ( tmp_args_element_name_8 == NULL )
                                        {
                                            assert( ERROR_OCCURRED() );

                                            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
                                            Py_DECREF( tmp_called_name_5 );

                                            exception_lineno = 631;
                                            type_description_1 = "coooooooooooo";
                                            goto frame_exception_exit_1;
                                        }
                                        frame_1bf1851e5e22923611966fe471a992e2->m_frame.f_lineno = 631;
                                        {
                                            PyObject *call_args[] = { tmp_args_element_name_7, tmp_args_element_name_8 };
                                            tmp_subscribed_name_6 = CALL_FUNCTION_WITH_ARGS2( tmp_called_name_5, call_args );
                                        }

                                        Py_DECREF( tmp_called_name_5 );
                                        Py_DECREF( tmp_args_element_name_8 );
                                        if ( tmp_subscribed_name_6 == NULL )
                                        {
                                            assert( ERROR_OCCURRED() );

                                            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                                            exception_lineno = 631;
                                            type_description_1 = "coooooooooooo";
                                            goto frame_exception_exit_1;
                                        }
                                        tmp_subscript_name_6 = const_int_0;
                                        tmp_assign_source_16 = LOOKUP_SUBSCRIPT_CONST( tmp_subscribed_name_6, tmp_subscript_name_6, 0 );
                                        Py_DECREF( tmp_subscribed_name_6 );
                                        if ( tmp_assign_source_16 == NULL )
                                        {
                                            assert( ERROR_OCCURRED() );

                                            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                                            exception_lineno = 631;
                                            type_description_1 = "coooooooooooo";
                                            goto frame_exception_exit_1;
                                        }
                                        assert( var_f == NULL );
                                        var_f = tmp_assign_source_16;
                                    }
                                    {
                                        PyObject *tmp_assign_source_17;
                                        PyObject *tmp_left_name_4;
                                        PyObject *tmp_called_instance_6;
                                        PyObject *tmp_mvar_value_5;
                                        PyObject *tmp_right_name_4;
                                        PyObject *tmp_called_name_6;
                                        PyObject *tmp_source_name_14;
                                        PyObject *tmp_mvar_value_6;
                                        PyObject *tmp_kw_name_2;
                                        PyObject *tmp_dict_key_2;
                                        PyObject *tmp_dict_value_2;
                                        tmp_mvar_value_5 = GET_STRING_DICT_VALUE( moduledict_plistlib, (Nuitka_StringObject *)const_str_plain_datetime );

                                        if (unlikely( tmp_mvar_value_5 == NULL ))
                                        {
                                            tmp_mvar_value_5 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_datetime );
                                        }

                                        if ( tmp_mvar_value_5 == NULL )
                                        {

                                            exception_type = PyExc_NameError;
                                            Py_INCREF( exception_type );
                                            exception_value = PyUnicode_FromFormat( "name '%s' is not defined", "datetime" );
                                            exception_tb = NULL;
                                            NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
                                            CHAIN_EXCEPTION( exception_value );

                                            exception_lineno = 634;
                                            type_description_1 = "coooooooooooo";
                                            goto frame_exception_exit_1;
                                        }

                                        tmp_called_instance_6 = tmp_mvar_value_5;
                                        frame_1bf1851e5e22923611966fe471a992e2->m_frame.f_lineno = 634;
                                        tmp_left_name_4 = CALL_METHOD_WITH_ARGS3( tmp_called_instance_6, const_str_plain_datetime, &PyTuple_GET_ITEM( const_tuple_int_pos_2001_int_pos_1_int_pos_1_tuple, 0 ) );

                                        if ( tmp_left_name_4 == NULL )
                                        {
                                            assert( ERROR_OCCURRED() );

                                            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                                            exception_lineno = 634;
                                            type_description_1 = "coooooooooooo";
                                            goto frame_exception_exit_1;
                                        }
                                        tmp_mvar_value_6 = GET_STRING_DICT_VALUE( moduledict_plistlib, (Nuitka_StringObject *)const_str_plain_datetime );

                                        if (unlikely( tmp_mvar_value_6 == NULL ))
                                        {
                                            tmp_mvar_value_6 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_datetime );
                                        }

                                        if ( tmp_mvar_value_6 == NULL )
                                        {
                                            Py_DECREF( tmp_left_name_4 );
                                            exception_type = PyExc_NameError;
                                            Py_INCREF( exception_type );
                                            exception_value = PyUnicode_FromFormat( "name '%s' is not defined", "datetime" );
                                            exception_tb = NULL;
                                            NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
                                            CHAIN_EXCEPTION( exception_value );

                                            exception_lineno = 635;
                                            type_description_1 = "coooooooooooo";
                                            goto frame_exception_exit_1;
                                        }

                                        tmp_source_name_14 = tmp_mvar_value_6;
                                        tmp_called_name_6 = LOOKUP_ATTRIBUTE( tmp_source_name_14, const_str_plain_timedelta );
                                        if ( tmp_called_name_6 == NULL )
                                        {
                                            assert( ERROR_OCCURRED() );

                                            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
                                            Py_DECREF( tmp_left_name_4 );

                                            exception_lineno = 635;
                                            type_description_1 = "coooooooooooo";
                                            goto frame_exception_exit_1;
                                        }
                                        tmp_dict_key_2 = const_str_plain_seconds;
                                        CHECK_OBJECT( var_f );
                                        tmp_dict_value_2 = var_f;
                                        tmp_kw_name_2 = _PyDict_NewPresized( 1 );
                                        tmp_res = PyDict_SetItem( tmp_kw_name_2, tmp_dict_key_2, tmp_dict_value_2 );
                                        assert( !(tmp_res != 0) );
                                        frame_1bf1851e5e22923611966fe471a992e2->m_frame.f_lineno = 635;
                                        tmp_right_name_4 = CALL_FUNCTION_WITH_KEYARGS( tmp_called_name_6, tmp_kw_name_2 );
                                        Py_DECREF( tmp_called_name_6 );
                                        Py_DECREF( tmp_kw_name_2 );
                                        if ( tmp_right_name_4 == NULL )
                                        {
                                            assert( ERROR_OCCURRED() );

                                            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
                                            Py_DECREF( tmp_left_name_4 );

                                            exception_lineno = 635;
                                            type_description_1 = "coooooooooooo";
                                            goto frame_exception_exit_1;
                                        }
                                        tmp_assign_source_17 = BINARY_OPERATION_ADD_OBJECT_OBJECT( tmp_left_name_4, tmp_right_name_4 );
                                        Py_DECREF( tmp_left_name_4 );
                                        Py_DECREF( tmp_right_name_4 );
                                        if ( tmp_assign_source_17 == NULL )
                                        {
                                            assert( ERROR_OCCURRED() );

                                            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                                            exception_lineno = 634;
                                            type_description_1 = "coooooooooooo";
                                            goto frame_exception_exit_1;
                                        }
                                        {
                                            PyObject *old = var_result;
                                            assert( old != NULL );
                                            var_result = tmp_assign_source_17;
                                            Py_DECREF( old );
                                        }

                                    }
                                    goto branch_end_9;
                                    branch_no_9:;
                                    {
                                        nuitka_bool tmp_condition_result_10;
                                        PyObject *tmp_compexpr_left_11;
                                        PyObject *tmp_compexpr_right_11;
                                        CHECK_OBJECT( var_tokenH );
                                        tmp_compexpr_left_11 = var_tokenH;
                                        tmp_compexpr_right_11 = const_int_pos_64;
                                        tmp_res = RICH_COMPARE_BOOL_EQ_OBJECT_OBJECT( tmp_compexpr_left_11, tmp_compexpr_right_11 );
                                        if ( tmp_res == -1 )
                                        {
                                            assert( ERROR_OCCURRED() );

                                            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                                            exception_lineno = 637;
                                            type_description_1 = "coooooooooooo";
                                            goto frame_exception_exit_1;
                                        }
                                        tmp_condition_result_10 = ( tmp_res != 0 ) ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
                                        if ( tmp_condition_result_10 == NUITKA_BOOL_TRUE )
                                        {
                                            goto branch_yes_10;
                                        }
                                        else
                                        {
                                            goto branch_no_10;
                                        }
                                        branch_yes_10:;
                                        {
                                            PyObject *tmp_assign_source_18;
                                            PyObject *tmp_called_instance_7;
                                            PyObject *tmp_args_element_name_9;
                                            CHECK_OBJECT( PyCell_GET( par_self ) );
                                            tmp_called_instance_7 = PyCell_GET( par_self );
                                            CHECK_OBJECT( var_tokenL );
                                            tmp_args_element_name_9 = var_tokenL;
                                            frame_1bf1851e5e22923611966fe471a992e2->m_frame.f_lineno = 638;
                                            {
                                                PyObject *call_args[] = { tmp_args_element_name_9 };
                                                tmp_assign_source_18 = CALL_METHOD_WITH_ARGS1( tmp_called_instance_7, const_str_plain__get_size, call_args );
                                            }

                                            if ( tmp_assign_source_18 == NULL )
                                            {
                                                assert( ERROR_OCCURRED() );

                                                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                                                exception_lineno = 638;
                                                type_description_1 = "coooooooooooo";
                                                goto frame_exception_exit_1;
                                            }
                                            assert( var_s == NULL );
                                            var_s = tmp_assign_source_18;
                                        }
                                        {
                                            nuitka_bool tmp_condition_result_11;
                                            PyObject *tmp_source_name_15;
                                            PyObject *tmp_attribute_value_1;
                                            int tmp_truth_name_1;
                                            CHECK_OBJECT( PyCell_GET( par_self ) );
                                            tmp_source_name_15 = PyCell_GET( par_self );
                                            tmp_attribute_value_1 = LOOKUP_ATTRIBUTE( tmp_source_name_15, const_str_plain__use_builtin_types );
                                            if ( tmp_attribute_value_1 == NULL )
                                            {
                                                assert( ERROR_OCCURRED() );

                                                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                                                exception_lineno = 639;
                                                type_description_1 = "coooooooooooo";
                                                goto frame_exception_exit_1;
                                            }
                                            tmp_truth_name_1 = CHECK_IF_TRUE( tmp_attribute_value_1 );
                                            if ( tmp_truth_name_1 == -1 )
                                            {
                                                assert( ERROR_OCCURRED() );

                                                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
                                                Py_DECREF( tmp_attribute_value_1 );

                                                exception_lineno = 639;
                                                type_description_1 = "coooooooooooo";
                                                goto frame_exception_exit_1;
                                            }
                                            tmp_condition_result_11 = tmp_truth_name_1 == 1 ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
                                            Py_DECREF( tmp_attribute_value_1 );
                                            if ( tmp_condition_result_11 == NUITKA_BOOL_TRUE )
                                            {
                                                goto branch_yes_11;
                                            }
                                            else
                                            {
                                                goto branch_no_11;
                                            }
                                            branch_yes_11:;
                                            {
                                                PyObject *tmp_assign_source_19;
                                                PyObject *tmp_called_instance_8;
                                                PyObject *tmp_source_name_16;
                                                PyObject *tmp_args_element_name_10;
                                                CHECK_OBJECT( PyCell_GET( par_self ) );
                                                tmp_source_name_16 = PyCell_GET( par_self );
                                                tmp_called_instance_8 = LOOKUP_ATTRIBUTE( tmp_source_name_16, const_str_plain__fp );
                                                if ( tmp_called_instance_8 == NULL )
                                                {
                                                    assert( ERROR_OCCURRED() );

                                                    FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                                                    exception_lineno = 640;
                                                    type_description_1 = "coooooooooooo";
                                                    goto frame_exception_exit_1;
                                                }
                                                CHECK_OBJECT( var_s );
                                                tmp_args_element_name_10 = var_s;
                                                frame_1bf1851e5e22923611966fe471a992e2->m_frame.f_lineno = 640;
                                                {
                                                    PyObject *call_args[] = { tmp_args_element_name_10 };
                                                    tmp_assign_source_19 = CALL_METHOD_WITH_ARGS1( tmp_called_instance_8, const_str_plain_read, call_args );
                                                }

                                                Py_DECREF( tmp_called_instance_8 );
                                                if ( tmp_assign_source_19 == NULL )
                                                {
                                                    assert( ERROR_OCCURRED() );

                                                    FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                                                    exception_lineno = 640;
                                                    type_description_1 = "coooooooooooo";
                                                    goto frame_exception_exit_1;
                                                }
                                                {
                                                    PyObject *old = var_result;
                                                    assert( old != NULL );
                                                    var_result = tmp_assign_source_19;
                                                    Py_DECREF( old );
                                                }

                                            }
                                            goto branch_end_11;
                                            branch_no_11:;
                                            {
                                                PyObject *tmp_assign_source_20;
                                                PyObject *tmp_called_name_7;
                                                PyObject *tmp_mvar_value_7;
                                                PyObject *tmp_args_element_name_11;
                                                PyObject *tmp_called_instance_9;
                                                PyObject *tmp_source_name_17;
                                                PyObject *tmp_args_element_name_12;
                                                tmp_mvar_value_7 = GET_STRING_DICT_VALUE( moduledict_plistlib, (Nuitka_StringObject *)const_str_plain_Data );

                                                if (unlikely( tmp_mvar_value_7 == NULL ))
                                                {
                                                    tmp_mvar_value_7 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_Data );
                                                }

                                                if ( tmp_mvar_value_7 == NULL )
                                                {

                                                    exception_type = PyExc_NameError;
                                                    Py_INCREF( exception_type );
                                                    exception_value = PyUnicode_FromFormat( "name '%s' is not defined", "Data" );
                                                    exception_tb = NULL;
                                                    NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
                                                    CHAIN_EXCEPTION( exception_value );

                                                    exception_lineno = 642;
                                                    type_description_1 = "coooooooooooo";
                                                    goto frame_exception_exit_1;
                                                }

                                                tmp_called_name_7 = tmp_mvar_value_7;
                                                CHECK_OBJECT( PyCell_GET( par_self ) );
                                                tmp_source_name_17 = PyCell_GET( par_self );
                                                tmp_called_instance_9 = LOOKUP_ATTRIBUTE( tmp_source_name_17, const_str_plain__fp );
                                                if ( tmp_called_instance_9 == NULL )
                                                {
                                                    assert( ERROR_OCCURRED() );

                                                    FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                                                    exception_lineno = 642;
                                                    type_description_1 = "coooooooooooo";
                                                    goto frame_exception_exit_1;
                                                }
                                                CHECK_OBJECT( var_s );
                                                tmp_args_element_name_12 = var_s;
                                                frame_1bf1851e5e22923611966fe471a992e2->m_frame.f_lineno = 642;
                                                {
                                                    PyObject *call_args[] = { tmp_args_element_name_12 };
                                                    tmp_args_element_name_11 = CALL_METHOD_WITH_ARGS1( tmp_called_instance_9, const_str_plain_read, call_args );
                                                }

                                                Py_DECREF( tmp_called_instance_9 );
                                                if ( tmp_args_element_name_11 == NULL )
                                                {
                                                    assert( ERROR_OCCURRED() );

                                                    FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                                                    exception_lineno = 642;
                                                    type_description_1 = "coooooooooooo";
                                                    goto frame_exception_exit_1;
                                                }
                                                frame_1bf1851e5e22923611966fe471a992e2->m_frame.f_lineno = 642;
                                                {
                                                    PyObject *call_args[] = { tmp_args_element_name_11 };
                                                    tmp_assign_source_20 = CALL_FUNCTION_WITH_ARGS1( tmp_called_name_7, call_args );
                                                }

                                                Py_DECREF( tmp_args_element_name_11 );
                                                if ( tmp_assign_source_20 == NULL )
                                                {
                                                    assert( ERROR_OCCURRED() );

                                                    FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                                                    exception_lineno = 642;
                                                    type_description_1 = "coooooooooooo";
                                                    goto frame_exception_exit_1;
                                                }
                                                {
                                                    PyObject *old = var_result;
                                                    assert( old != NULL );
                                                    var_result = tmp_assign_source_20;
                                                    Py_DECREF( old );
                                                }

                                            }
                                            branch_end_11:;
                                        }
                                        goto branch_end_10;
                                        branch_no_10:;
                                        {
                                            nuitka_bool tmp_condition_result_12;
                                            PyObject *tmp_compexpr_left_12;
                                            PyObject *tmp_compexpr_right_12;
                                            CHECK_OBJECT( var_tokenH );
                                            tmp_compexpr_left_12 = var_tokenH;
                                            tmp_compexpr_right_12 = const_int_pos_80;
                                            tmp_res = RICH_COMPARE_BOOL_EQ_OBJECT_OBJECT( tmp_compexpr_left_12, tmp_compexpr_right_12 );
                                            if ( tmp_res == -1 )
                                            {
                                                assert( ERROR_OCCURRED() );

                                                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                                                exception_lineno = 644;
                                                type_description_1 = "coooooooooooo";
                                                goto frame_exception_exit_1;
                                            }
                                            tmp_condition_result_12 = ( tmp_res != 0 ) ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
                                            if ( tmp_condition_result_12 == NUITKA_BOOL_TRUE )
                                            {
                                                goto branch_yes_12;
                                            }
                                            else
                                            {
                                                goto branch_no_12;
                                            }
                                            branch_yes_12:;
                                            {
                                                PyObject *tmp_assign_source_21;
                                                PyObject *tmp_called_instance_10;
                                                PyObject *tmp_args_element_name_13;
                                                CHECK_OBJECT( PyCell_GET( par_self ) );
                                                tmp_called_instance_10 = PyCell_GET( par_self );
                                                CHECK_OBJECT( var_tokenL );
                                                tmp_args_element_name_13 = var_tokenL;
                                                frame_1bf1851e5e22923611966fe471a992e2->m_frame.f_lineno = 645;
                                                {
                                                    PyObject *call_args[] = { tmp_args_element_name_13 };
                                                    tmp_assign_source_21 = CALL_METHOD_WITH_ARGS1( tmp_called_instance_10, const_str_plain__get_size, call_args );
                                                }

                                                if ( tmp_assign_source_21 == NULL )
                                                {
                                                    assert( ERROR_OCCURRED() );

                                                    FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                                                    exception_lineno = 645;
                                                    type_description_1 = "coooooooooooo";
                                                    goto frame_exception_exit_1;
                                                }
                                                assert( var_s == NULL );
                                                var_s = tmp_assign_source_21;
                                            }
                                            {
                                                PyObject *tmp_assign_source_22;
                                                PyObject *tmp_called_instance_11;
                                                PyObject *tmp_called_instance_12;
                                                PyObject *tmp_source_name_18;
                                                PyObject *tmp_args_element_name_14;
                                                CHECK_OBJECT( PyCell_GET( par_self ) );
                                                tmp_source_name_18 = PyCell_GET( par_self );
                                                tmp_called_instance_12 = LOOKUP_ATTRIBUTE( tmp_source_name_18, const_str_plain__fp );
                                                if ( tmp_called_instance_12 == NULL )
                                                {
                                                    assert( ERROR_OCCURRED() );

                                                    FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                                                    exception_lineno = 646;
                                                    type_description_1 = "coooooooooooo";
                                                    goto frame_exception_exit_1;
                                                }
                                                CHECK_OBJECT( var_s );
                                                tmp_args_element_name_14 = var_s;
                                                frame_1bf1851e5e22923611966fe471a992e2->m_frame.f_lineno = 646;
                                                {
                                                    PyObject *call_args[] = { tmp_args_element_name_14 };
                                                    tmp_called_instance_11 = CALL_METHOD_WITH_ARGS1( tmp_called_instance_12, const_str_plain_read, call_args );
                                                }

                                                Py_DECREF( tmp_called_instance_12 );
                                                if ( tmp_called_instance_11 == NULL )
                                                {
                                                    assert( ERROR_OCCURRED() );

                                                    FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                                                    exception_lineno = 646;
                                                    type_description_1 = "coooooooooooo";
                                                    goto frame_exception_exit_1;
                                                }
                                                frame_1bf1851e5e22923611966fe471a992e2->m_frame.f_lineno = 646;
                                                tmp_assign_source_22 = CALL_METHOD_WITH_ARGS1( tmp_called_instance_11, const_str_plain_decode, &PyTuple_GET_ITEM( const_tuple_str_plain_ascii_tuple, 0 ) );

                                                Py_DECREF( tmp_called_instance_11 );
                                                if ( tmp_assign_source_22 == NULL )
                                                {
                                                    assert( ERROR_OCCURRED() );

                                                    FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                                                    exception_lineno = 646;
                                                    type_description_1 = "coooooooooooo";
                                                    goto frame_exception_exit_1;
                                                }
                                                {
                                                    PyObject *old = var_result;
                                                    assert( old != NULL );
                                                    var_result = tmp_assign_source_22;
                                                    Py_DECREF( old );
                                                }

                                            }
                                            goto branch_end_12;
                                            branch_no_12:;
                                            {
                                                nuitka_bool tmp_condition_result_13;
                                                PyObject *tmp_compexpr_left_13;
                                                PyObject *tmp_compexpr_right_13;
                                                CHECK_OBJECT( var_tokenH );
                                                tmp_compexpr_left_13 = var_tokenH;
                                                tmp_compexpr_right_13 = const_int_pos_96;
                                                tmp_res = RICH_COMPARE_BOOL_EQ_OBJECT_OBJECT( tmp_compexpr_left_13, tmp_compexpr_right_13 );
                                                if ( tmp_res == -1 )
                                                {
                                                    assert( ERROR_OCCURRED() );

                                                    FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                                                    exception_lineno = 649;
                                                    type_description_1 = "coooooooooooo";
                                                    goto frame_exception_exit_1;
                                                }
                                                tmp_condition_result_13 = ( tmp_res != 0 ) ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
                                                if ( tmp_condition_result_13 == NUITKA_BOOL_TRUE )
                                                {
                                                    goto branch_yes_13;
                                                }
                                                else
                                                {
                                                    goto branch_no_13;
                                                }
                                                branch_yes_13:;
                                                {
                                                    PyObject *tmp_assign_source_23;
                                                    PyObject *tmp_called_instance_13;
                                                    PyObject *tmp_args_element_name_15;
                                                    CHECK_OBJECT( PyCell_GET( par_self ) );
                                                    tmp_called_instance_13 = PyCell_GET( par_self );
                                                    CHECK_OBJECT( var_tokenL );
                                                    tmp_args_element_name_15 = var_tokenL;
                                                    frame_1bf1851e5e22923611966fe471a992e2->m_frame.f_lineno = 650;
                                                    {
                                                        PyObject *call_args[] = { tmp_args_element_name_15 };
                                                        tmp_assign_source_23 = CALL_METHOD_WITH_ARGS1( tmp_called_instance_13, const_str_plain__get_size, call_args );
                                                    }

                                                    if ( tmp_assign_source_23 == NULL )
                                                    {
                                                        assert( ERROR_OCCURRED() );

                                                        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                                                        exception_lineno = 650;
                                                        type_description_1 = "coooooooooooo";
                                                        goto frame_exception_exit_1;
                                                    }
                                                    assert( var_s == NULL );
                                                    var_s = tmp_assign_source_23;
                                                }
                                                {
                                                    PyObject *tmp_assign_source_24;
                                                    PyObject *tmp_called_instance_14;
                                                    PyObject *tmp_called_name_8;
                                                    PyObject *tmp_source_name_19;
                                                    PyObject *tmp_source_name_20;
                                                    PyObject *tmp_args_element_name_16;
                                                    PyObject *tmp_left_name_5;
                                                    PyObject *tmp_right_name_5;
                                                    CHECK_OBJECT( PyCell_GET( par_self ) );
                                                    tmp_source_name_20 = PyCell_GET( par_self );
                                                    tmp_source_name_19 = LOOKUP_ATTRIBUTE( tmp_source_name_20, const_str_plain__fp );
                                                    if ( tmp_source_name_19 == NULL )
                                                    {
                                                        assert( ERROR_OCCURRED() );

                                                        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                                                        exception_lineno = 651;
                                                        type_description_1 = "coooooooooooo";
                                                        goto frame_exception_exit_1;
                                                    }
                                                    tmp_called_name_8 = LOOKUP_ATTRIBUTE( tmp_source_name_19, const_str_plain_read );
                                                    Py_DECREF( tmp_source_name_19 );
                                                    if ( tmp_called_name_8 == NULL )
                                                    {
                                                        assert( ERROR_OCCURRED() );

                                                        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                                                        exception_lineno = 651;
                                                        type_description_1 = "coooooooooooo";
                                                        goto frame_exception_exit_1;
                                                    }
                                                    CHECK_OBJECT( var_s );
                                                    tmp_left_name_5 = var_s;
                                                    tmp_right_name_5 = const_int_pos_2;
                                                    tmp_args_element_name_16 = BINARY_OPERATION_MUL( tmp_left_name_5, tmp_right_name_5 );
                                                    if ( tmp_args_element_name_16 == NULL )
                                                    {
                                                        assert( ERROR_OCCURRED() );

                                                        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
                                                        Py_DECREF( tmp_called_name_8 );

                                                        exception_lineno = 651;
                                                        type_description_1 = "coooooooooooo";
                                                        goto frame_exception_exit_1;
                                                    }
                                                    frame_1bf1851e5e22923611966fe471a992e2->m_frame.f_lineno = 651;
                                                    {
                                                        PyObject *call_args[] = { tmp_args_element_name_16 };
                                                        tmp_called_instance_14 = CALL_FUNCTION_WITH_ARGS1( tmp_called_name_8, call_args );
                                                    }

                                                    Py_DECREF( tmp_called_name_8 );
                                                    Py_DECREF( tmp_args_element_name_16 );
                                                    if ( tmp_called_instance_14 == NULL )
                                                    {
                                                        assert( ERROR_OCCURRED() );

                                                        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                                                        exception_lineno = 651;
                                                        type_description_1 = "coooooooooooo";
                                                        goto frame_exception_exit_1;
                                                    }
                                                    frame_1bf1851e5e22923611966fe471a992e2->m_frame.f_lineno = 651;
                                                    tmp_assign_source_24 = CALL_METHOD_WITH_ARGS1( tmp_called_instance_14, const_str_plain_decode, &PyTuple_GET_ITEM( const_tuple_str_digest_7d8c029aa14d4038a202ab8b1ce8db36_tuple, 0 ) );

                                                    Py_DECREF( tmp_called_instance_14 );
                                                    if ( tmp_assign_source_24 == NULL )
                                                    {
                                                        assert( ERROR_OCCURRED() );

                                                        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                                                        exception_lineno = 651;
                                                        type_description_1 = "coooooooooooo";
                                                        goto frame_exception_exit_1;
                                                    }
                                                    {
                                                        PyObject *old = var_result;
                                                        assert( old != NULL );
                                                        var_result = tmp_assign_source_24;
                                                        Py_DECREF( old );
                                                    }

                                                }
                                                goto branch_end_13;
                                                branch_no_13:;
                                                {
                                                    nuitka_bool tmp_condition_result_14;
                                                    PyObject *tmp_compexpr_left_14;
                                                    PyObject *tmp_compexpr_right_14;
                                                    CHECK_OBJECT( var_tokenH );
                                                    tmp_compexpr_left_14 = var_tokenH;
                                                    tmp_compexpr_right_14 = const_int_pos_160;
                                                    tmp_res = RICH_COMPARE_BOOL_EQ_OBJECT_OBJECT( tmp_compexpr_left_14, tmp_compexpr_right_14 );
                                                    if ( tmp_res == -1 )
                                                    {
                                                        assert( ERROR_OCCURRED() );

                                                        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                                                        exception_lineno = 656;
                                                        type_description_1 = "coooooooooooo";
                                                        goto frame_exception_exit_1;
                                                    }
                                                    tmp_condition_result_14 = ( tmp_res != 0 ) ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
                                                    if ( tmp_condition_result_14 == NUITKA_BOOL_TRUE )
                                                    {
                                                        goto branch_yes_14;
                                                    }
                                                    else
                                                    {
                                                        goto branch_no_14;
                                                    }
                                                    branch_yes_14:;
                                                    {
                                                        PyObject *tmp_assign_source_25;
                                                        PyObject *tmp_called_instance_15;
                                                        PyObject *tmp_args_element_name_17;
                                                        CHECK_OBJECT( PyCell_GET( par_self ) );
                                                        tmp_called_instance_15 = PyCell_GET( par_self );
                                                        CHECK_OBJECT( var_tokenL );
                                                        tmp_args_element_name_17 = var_tokenL;
                                                        frame_1bf1851e5e22923611966fe471a992e2->m_frame.f_lineno = 657;
                                                        {
                                                            PyObject *call_args[] = { tmp_args_element_name_17 };
                                                            tmp_assign_source_25 = CALL_METHOD_WITH_ARGS1( tmp_called_instance_15, const_str_plain__get_size, call_args );
                                                        }

                                                        if ( tmp_assign_source_25 == NULL )
                                                        {
                                                            assert( ERROR_OCCURRED() );

                                                            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                                                            exception_lineno = 657;
                                                            type_description_1 = "coooooooooooo";
                                                            goto frame_exception_exit_1;
                                                        }
                                                        assert( var_s == NULL );
                                                        var_s = tmp_assign_source_25;
                                                    }
                                                    {
                                                        PyObject *tmp_assign_source_26;
                                                        PyObject *tmp_called_instance_16;
                                                        PyObject *tmp_args_element_name_18;
                                                        CHECK_OBJECT( PyCell_GET( par_self ) );
                                                        tmp_called_instance_16 = PyCell_GET( par_self );
                                                        CHECK_OBJECT( var_s );
                                                        tmp_args_element_name_18 = var_s;
                                                        frame_1bf1851e5e22923611966fe471a992e2->m_frame.f_lineno = 658;
                                                        {
                                                            PyObject *call_args[] = { tmp_args_element_name_18 };
                                                            tmp_assign_source_26 = CALL_METHOD_WITH_ARGS1( tmp_called_instance_16, const_str_plain__read_refs, call_args );
                                                        }

                                                        if ( tmp_assign_source_26 == NULL )
                                                        {
                                                            assert( ERROR_OCCURRED() );

                                                            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                                                            exception_lineno = 658;
                                                            type_description_1 = "coooooooooooo";
                                                            goto frame_exception_exit_1;
                                                        }
                                                        assert( var_obj_refs == NULL );
                                                        var_obj_refs = tmp_assign_source_26;
                                                    }
                                                    {
                                                        PyObject *tmp_assign_source_27;
                                                        tmp_assign_source_27 = PyList_New( 0 );
                                                        {
                                                            PyObject *old = var_result;
                                                            assert( old != NULL );
                                                            var_result = tmp_assign_source_27;
                                                            Py_DECREF( old );
                                                        }

                                                    }
                                                    {
                                                        PyObject *tmp_ass_subvalue_1;
                                                        PyObject *tmp_ass_subscribed_1;
                                                        PyObject *tmp_source_name_21;
                                                        PyObject *tmp_ass_subscript_1;
                                                        CHECK_OBJECT( var_result );
                                                        tmp_ass_subvalue_1 = var_result;
                                                        CHECK_OBJECT( PyCell_GET( par_self ) );
                                                        tmp_source_name_21 = PyCell_GET( par_self );
                                                        tmp_ass_subscribed_1 = LOOKUP_ATTRIBUTE( tmp_source_name_21, const_str_plain__objects );
                                                        if ( tmp_ass_subscribed_1 == NULL )
                                                        {
                                                            assert( ERROR_OCCURRED() );

                                                            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                                                            exception_lineno = 660;
                                                            type_description_1 = "coooooooooooo";
                                                            goto frame_exception_exit_1;
                                                        }
                                                        CHECK_OBJECT( par_ref );
                                                        tmp_ass_subscript_1 = par_ref;
                                                        tmp_result = SET_SUBSCRIPT( tmp_ass_subscribed_1, tmp_ass_subscript_1, tmp_ass_subvalue_1 );
                                                        Py_DECREF( tmp_ass_subscribed_1 );
                                                        if ( tmp_result == false )
                                                        {
                                                            assert( ERROR_OCCURRED() );

                                                            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                                                            exception_lineno = 660;
                                                            type_description_1 = "coooooooooooo";
                                                            goto frame_exception_exit_1;
                                                        }
                                                    }
                                                    {
                                                        PyObject *tmp_called_name_9;
                                                        PyObject *tmp_source_name_22;
                                                        PyObject *tmp_call_result_2;
                                                        PyObject *tmp_args_element_name_19;
                                                        CHECK_OBJECT( var_result );
                                                        tmp_source_name_22 = var_result;
                                                        tmp_called_name_9 = LOOKUP_ATTRIBUTE( tmp_source_name_22, const_str_plain_extend );
                                                        if ( tmp_called_name_9 == NULL )
                                                        {
                                                            assert( ERROR_OCCURRED() );

                                                            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                                                            exception_lineno = 661;
                                                            type_description_1 = "coooooooooooo";
                                                            goto frame_exception_exit_1;
                                                        }
                                                        {
                                                            PyObject *tmp_assign_source_28;
                                                            PyObject *tmp_iter_arg_2;
                                                            CHECK_OBJECT( var_obj_refs );
                                                            tmp_iter_arg_2 = var_obj_refs;
                                                            tmp_assign_source_28 = MAKE_ITERATOR( tmp_iter_arg_2 );
                                                            if ( tmp_assign_source_28 == NULL )
                                                            {
                                                                assert( ERROR_OCCURRED() );

                                                                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                                                                exception_lineno = 661;
                                                                type_description_1 = "coooooooooooo";
                                                                goto frame_exception_exit_1;
                                                            }
                                                            assert( tmp_genexpr_1__$0 == NULL );
                                                            tmp_genexpr_1__$0 = tmp_assign_source_28;
                                                        }
                                                        // Tried code:
                                                        tmp_args_element_name_19 = plistlib$$$function_54__read_object$$$genexpr_1_genexpr_maker();

                                                        ((struct Nuitka_GeneratorObject *)tmp_args_element_name_19)->m_closure[0] = PyCell_NEW0( tmp_genexpr_1__$0 );
                                                        ((struct Nuitka_GeneratorObject *)tmp_args_element_name_19)->m_closure[1] = par_self;
                                                        Py_INCREF( ((struct Nuitka_GeneratorObject *)tmp_args_element_name_19)->m_closure[1] );


                                                        goto try_return_handler_4;
                                                        // tried codes exits in all cases
                                                        NUITKA_CANNOT_GET_HERE( plistlib$$$function_54__read_object );
                                                        return NULL;
                                                        // Return handler code:
                                                        try_return_handler_4:;
                                                        CHECK_OBJECT( (PyObject *)tmp_genexpr_1__$0 );
                                                        Py_DECREF( tmp_genexpr_1__$0 );
                                                        tmp_genexpr_1__$0 = NULL;

                                                        goto outline_result_1;
                                                        // End of try:
                                                        CHECK_OBJECT( (PyObject *)tmp_genexpr_1__$0 );
                                                        Py_DECREF( tmp_genexpr_1__$0 );
                                                        tmp_genexpr_1__$0 = NULL;

                                                        // Return statement must have exited already.
                                                        NUITKA_CANNOT_GET_HERE( plistlib$$$function_54__read_object );
                                                        return NULL;
                                                        outline_result_1:;
                                                        frame_1bf1851e5e22923611966fe471a992e2->m_frame.f_lineno = 661;
                                                        {
                                                            PyObject *call_args[] = { tmp_args_element_name_19 };
                                                            tmp_call_result_2 = CALL_FUNCTION_WITH_ARGS1( tmp_called_name_9, call_args );
                                                        }

                                                        Py_DECREF( tmp_called_name_9 );
                                                        Py_DECREF( tmp_args_element_name_19 );
                                                        if ( tmp_call_result_2 == NULL )
                                                        {
                                                            assert( ERROR_OCCURRED() );

                                                            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                                                            exception_lineno = 661;
                                                            type_description_1 = "coooooooooooo";
                                                            goto frame_exception_exit_1;
                                                        }
                                                        Py_DECREF( tmp_call_result_2 );
                                                    }
                                                    goto branch_end_14;
                                                    branch_no_14:;
                                                    {
                                                        nuitka_bool tmp_condition_result_15;
                                                        PyObject *tmp_compexpr_left_15;
                                                        PyObject *tmp_compexpr_right_15;
                                                        CHECK_OBJECT( var_tokenH );
                                                        tmp_compexpr_left_15 = var_tokenH;
                                                        tmp_compexpr_right_15 = const_int_pos_208;
                                                        tmp_res = RICH_COMPARE_BOOL_EQ_OBJECT_OBJECT( tmp_compexpr_left_15, tmp_compexpr_right_15 );
                                                        if ( tmp_res == -1 )
                                                        {
                                                            assert( ERROR_OCCURRED() );

                                                            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                                                            exception_lineno = 669;
                                                            type_description_1 = "coooooooooooo";
                                                            goto frame_exception_exit_1;
                                                        }
                                                        tmp_condition_result_15 = ( tmp_res != 0 ) ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
                                                        if ( tmp_condition_result_15 == NUITKA_BOOL_TRUE )
                                                        {
                                                            goto branch_yes_15;
                                                        }
                                                        else
                                                        {
                                                            goto branch_no_15;
                                                        }
                                                        branch_yes_15:;
                                                        {
                                                            PyObject *tmp_assign_source_29;
                                                            PyObject *tmp_called_instance_17;
                                                            PyObject *tmp_args_element_name_20;
                                                            CHECK_OBJECT( PyCell_GET( par_self ) );
                                                            tmp_called_instance_17 = PyCell_GET( par_self );
                                                            CHECK_OBJECT( var_tokenL );
                                                            tmp_args_element_name_20 = var_tokenL;
                                                            frame_1bf1851e5e22923611966fe471a992e2->m_frame.f_lineno = 670;
                                                            {
                                                                PyObject *call_args[] = { tmp_args_element_name_20 };
                                                                tmp_assign_source_29 = CALL_METHOD_WITH_ARGS1( tmp_called_instance_17, const_str_plain__get_size, call_args );
                                                            }

                                                            if ( tmp_assign_source_29 == NULL )
                                                            {
                                                                assert( ERROR_OCCURRED() );

                                                                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                                                                exception_lineno = 670;
                                                                type_description_1 = "coooooooooooo";
                                                                goto frame_exception_exit_1;
                                                            }
                                                            assert( var_s == NULL );
                                                            var_s = tmp_assign_source_29;
                                                        }
                                                        {
                                                            PyObject *tmp_assign_source_30;
                                                            PyObject *tmp_called_instance_18;
                                                            PyObject *tmp_args_element_name_21;
                                                            CHECK_OBJECT( PyCell_GET( par_self ) );
                                                            tmp_called_instance_18 = PyCell_GET( par_self );
                                                            CHECK_OBJECT( var_s );
                                                            tmp_args_element_name_21 = var_s;
                                                            frame_1bf1851e5e22923611966fe471a992e2->m_frame.f_lineno = 671;
                                                            {
                                                                PyObject *call_args[] = { tmp_args_element_name_21 };
                                                                tmp_assign_source_30 = CALL_METHOD_WITH_ARGS1( tmp_called_instance_18, const_str_plain__read_refs, call_args );
                                                            }

                                                            if ( tmp_assign_source_30 == NULL )
                                                            {
                                                                assert( ERROR_OCCURRED() );

                                                                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                                                                exception_lineno = 671;
                                                                type_description_1 = "coooooooooooo";
                                                                goto frame_exception_exit_1;
                                                            }
                                                            assert( var_key_refs == NULL );
                                                            var_key_refs = tmp_assign_source_30;
                                                        }
                                                        {
                                                            PyObject *tmp_assign_source_31;
                                                            PyObject *tmp_called_instance_19;
                                                            PyObject *tmp_args_element_name_22;
                                                            CHECK_OBJECT( PyCell_GET( par_self ) );
                                                            tmp_called_instance_19 = PyCell_GET( par_self );
                                                            CHECK_OBJECT( var_s );
                                                            tmp_args_element_name_22 = var_s;
                                                            frame_1bf1851e5e22923611966fe471a992e2->m_frame.f_lineno = 672;
                                                            {
                                                                PyObject *call_args[] = { tmp_args_element_name_22 };
                                                                tmp_assign_source_31 = CALL_METHOD_WITH_ARGS1( tmp_called_instance_19, const_str_plain__read_refs, call_args );
                                                            }

                                                            if ( tmp_assign_source_31 == NULL )
                                                            {
                                                                assert( ERROR_OCCURRED() );

                                                                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                                                                exception_lineno = 672;
                                                                type_description_1 = "coooooooooooo";
                                                                goto frame_exception_exit_1;
                                                            }
                                                            assert( var_obj_refs == NULL );
                                                            var_obj_refs = tmp_assign_source_31;
                                                        }
                                                        {
                                                            PyObject *tmp_assign_source_32;
                                                            PyObject *tmp_called_instance_20;
                                                            CHECK_OBJECT( PyCell_GET( par_self ) );
                                                            tmp_called_instance_20 = PyCell_GET( par_self );
                                                            frame_1bf1851e5e22923611966fe471a992e2->m_frame.f_lineno = 673;
                                                            tmp_assign_source_32 = CALL_METHOD_NO_ARGS( tmp_called_instance_20, const_str_plain__dict_type );
                                                            if ( tmp_assign_source_32 == NULL )
                                                            {
                                                                assert( ERROR_OCCURRED() );

                                                                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                                                                exception_lineno = 673;
                                                                type_description_1 = "coooooooooooo";
                                                                goto frame_exception_exit_1;
                                                            }
                                                            {
                                                                PyObject *old = var_result;
                                                                assert( old != NULL );
                                                                var_result = tmp_assign_source_32;
                                                                Py_DECREF( old );
                                                            }

                                                        }
                                                        {
                                                            PyObject *tmp_ass_subvalue_2;
                                                            PyObject *tmp_ass_subscribed_2;
                                                            PyObject *tmp_source_name_23;
                                                            PyObject *tmp_ass_subscript_2;
                                                            CHECK_OBJECT( var_result );
                                                            tmp_ass_subvalue_2 = var_result;
                                                            CHECK_OBJECT( PyCell_GET( par_self ) );
                                                            tmp_source_name_23 = PyCell_GET( par_self );
                                                            tmp_ass_subscribed_2 = LOOKUP_ATTRIBUTE( tmp_source_name_23, const_str_plain__objects );
                                                            if ( tmp_ass_subscribed_2 == NULL )
                                                            {
                                                                assert( ERROR_OCCURRED() );

                                                                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                                                                exception_lineno = 674;
                                                                type_description_1 = "coooooooooooo";
                                                                goto frame_exception_exit_1;
                                                            }
                                                            CHECK_OBJECT( par_ref );
                                                            tmp_ass_subscript_2 = par_ref;
                                                            tmp_result = SET_SUBSCRIPT( tmp_ass_subscribed_2, tmp_ass_subscript_2, tmp_ass_subvalue_2 );
                                                            Py_DECREF( tmp_ass_subscribed_2 );
                                                            if ( tmp_result == false )
                                                            {
                                                                assert( ERROR_OCCURRED() );

                                                                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                                                                exception_lineno = 674;
                                                                type_description_1 = "coooooooooooo";
                                                                goto frame_exception_exit_1;
                                                            }
                                                        }
                                                        {
                                                            PyObject *tmp_assign_source_33;
                                                            PyObject *tmp_iter_arg_3;
                                                            PyObject *tmp_called_name_10;
                                                            PyObject *tmp_args_element_name_23;
                                                            PyObject *tmp_args_element_name_24;
                                                            tmp_called_name_10 = (PyObject *)&PyZip_Type;
                                                            CHECK_OBJECT( var_key_refs );
                                                            tmp_args_element_name_23 = var_key_refs;
                                                            CHECK_OBJECT( var_obj_refs );
                                                            tmp_args_element_name_24 = var_obj_refs;
                                                            frame_1bf1851e5e22923611966fe471a992e2->m_frame.f_lineno = 675;
                                                            {
                                                                PyObject *call_args[] = { tmp_args_element_name_23, tmp_args_element_name_24 };
                                                                tmp_iter_arg_3 = CALL_FUNCTION_WITH_ARGS2( tmp_called_name_10, call_args );
                                                            }

                                                            if ( tmp_iter_arg_3 == NULL )
                                                            {
                                                                assert( ERROR_OCCURRED() );

                                                                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                                                                exception_lineno = 675;
                                                                type_description_1 = "coooooooooooo";
                                                                goto frame_exception_exit_1;
                                                            }
                                                            tmp_assign_source_33 = MAKE_ITERATOR( tmp_iter_arg_3 );
                                                            Py_DECREF( tmp_iter_arg_3 );
                                                            if ( tmp_assign_source_33 == NULL )
                                                            {
                                                                assert( ERROR_OCCURRED() );

                                                                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                                                                exception_lineno = 675;
                                                                type_description_1 = "coooooooooooo";
                                                                goto frame_exception_exit_1;
                                                            }
                                                            assert( tmp_for_loop_1__for_iterator == NULL );
                                                            tmp_for_loop_1__for_iterator = tmp_assign_source_33;
                                                        }
                                                        // Tried code:
                                                        loop_start_1:;
                                                        {
                                                            PyObject *tmp_next_source_1;
                                                            PyObject *tmp_assign_source_34;
                                                            CHECK_OBJECT( tmp_for_loop_1__for_iterator );
                                                            tmp_next_source_1 = tmp_for_loop_1__for_iterator;
                                                            tmp_assign_source_34 = ITERATOR_NEXT( tmp_next_source_1 );
                                                            if ( tmp_assign_source_34 == NULL )
                                                            {
                                                                if ( CHECK_AND_CLEAR_STOP_ITERATION_OCCURRED() )
                                                                {

                                                                    goto loop_end_1;
                                                                }
                                                                else
                                                                {

                                                                    FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
                                                                    type_description_1 = "coooooooooooo";
                                                                    exception_lineno = 675;
                                                                    goto try_except_handler_5;
                                                                }
                                                            }

                                                            {
                                                                PyObject *old = tmp_for_loop_1__iter_value;
                                                                tmp_for_loop_1__iter_value = tmp_assign_source_34;
                                                                Py_XDECREF( old );
                                                            }

                                                        }
                                                        // Tried code:
                                                        {
                                                            PyObject *tmp_assign_source_35;
                                                            PyObject *tmp_iter_arg_4;
                                                            CHECK_OBJECT( tmp_for_loop_1__iter_value );
                                                            tmp_iter_arg_4 = tmp_for_loop_1__iter_value;
                                                            tmp_assign_source_35 = MAKE_UNPACK_ITERATOR( tmp_iter_arg_4 );
                                                            if ( tmp_assign_source_35 == NULL )
                                                            {
                                                                assert( ERROR_OCCURRED() );

                                                                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                                                                exception_lineno = 675;
                                                                type_description_1 = "coooooooooooo";
                                                                goto try_except_handler_6;
                                                            }
                                                            {
                                                                PyObject *old = tmp_tuple_unpack_2__source_iter;
                                                                tmp_tuple_unpack_2__source_iter = tmp_assign_source_35;
                                                                Py_XDECREF( old );
                                                            }

                                                        }
                                                        // Tried code:
                                                        {
                                                            PyObject *tmp_assign_source_36;
                                                            PyObject *tmp_unpack_3;
                                                            CHECK_OBJECT( tmp_tuple_unpack_2__source_iter );
                                                            tmp_unpack_3 = tmp_tuple_unpack_2__source_iter;
                                                            tmp_assign_source_36 = UNPACK_NEXT( tmp_unpack_3, 0, 2 );
                                                            if ( tmp_assign_source_36 == NULL )
                                                            {
                                                                if ( !ERROR_OCCURRED() )
                                                                {
                                                                    exception_type = PyExc_StopIteration;
                                                                    Py_INCREF( exception_type );
                                                                    exception_value = NULL;
                                                                    exception_tb = NULL;
                                                                }
                                                                else
                                                                {
                                                                    FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
                                                                }


                                                                type_description_1 = "coooooooooooo";
                                                                exception_lineno = 675;
                                                                goto try_except_handler_7;
                                                            }
                                                            {
                                                                PyObject *old = tmp_tuple_unpack_2__element_1;
                                                                tmp_tuple_unpack_2__element_1 = tmp_assign_source_36;
                                                                Py_XDECREF( old );
                                                            }

                                                        }
                                                        {
                                                            PyObject *tmp_assign_source_37;
                                                            PyObject *tmp_unpack_4;
                                                            CHECK_OBJECT( tmp_tuple_unpack_2__source_iter );
                                                            tmp_unpack_4 = tmp_tuple_unpack_2__source_iter;
                                                            tmp_assign_source_37 = UNPACK_NEXT( tmp_unpack_4, 1, 2 );
                                                            if ( tmp_assign_source_37 == NULL )
                                                            {
                                                                if ( !ERROR_OCCURRED() )
                                                                {
                                                                    exception_type = PyExc_StopIteration;
                                                                    Py_INCREF( exception_type );
                                                                    exception_value = NULL;
                                                                    exception_tb = NULL;
                                                                }
                                                                else
                                                                {
                                                                    FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
                                                                }


                                                                type_description_1 = "coooooooooooo";
                                                                exception_lineno = 675;
                                                                goto try_except_handler_7;
                                                            }
                                                            {
                                                                PyObject *old = tmp_tuple_unpack_2__element_2;
                                                                tmp_tuple_unpack_2__element_2 = tmp_assign_source_37;
                                                                Py_XDECREF( old );
                                                            }

                                                        }
                                                        {
                                                            PyObject *tmp_iterator_name_1;
                                                            CHECK_OBJECT( tmp_tuple_unpack_2__source_iter );
                                                            tmp_iterator_name_1 = tmp_tuple_unpack_2__source_iter;
                                                            // Check if iterator has left-over elements.
                                                            CHECK_OBJECT( tmp_iterator_name_1 ); assert( HAS_ITERNEXT( tmp_iterator_name_1 ) );

                                                            tmp_iterator_attempt = (*Py_TYPE( tmp_iterator_name_1 )->tp_iternext)( tmp_iterator_name_1 );

                                                            if (likely( tmp_iterator_attempt == NULL ))
                                                            {
                                                                PyObject *error = GET_ERROR_OCCURRED();

                                                                if ( error != NULL )
                                                                {
                                                                    if ( EXCEPTION_MATCH_BOOL_SINGLE( error, PyExc_StopIteration ))
                                                                    {
                                                                        CLEAR_ERROR_OCCURRED();
                                                                    }
                                                                    else
                                                                    {
                                                                        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );

                                                                        type_description_1 = "coooooooooooo";
                                                                        exception_lineno = 675;
                                                                        goto try_except_handler_7;
                                                                    }
                                                                }
                                                            }
                                                            else
                                                            {
                                                                Py_DECREF( tmp_iterator_attempt );

                                                                // TODO: Could avoid PyErr_Format.
#if PYTHON_VERSION < 300
                                                                PyErr_Format( PyExc_ValueError, "too many values to unpack" );
#else
                                                                PyErr_Format( PyExc_ValueError, "too many values to unpack (expected 2)" );
#endif
                                                                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );

                                                                type_description_1 = "coooooooooooo";
                                                                exception_lineno = 675;
                                                                goto try_except_handler_7;
                                                            }
                                                        }
                                                        goto try_end_3;
                                                        // Exception handler code:
                                                        try_except_handler_7:;
                                                        exception_keeper_type_3 = exception_type;
                                                        exception_keeper_value_3 = exception_value;
                                                        exception_keeper_tb_3 = exception_tb;
                                                        exception_keeper_lineno_3 = exception_lineno;
                                                        exception_type = NULL;
                                                        exception_value = NULL;
                                                        exception_tb = NULL;
                                                        exception_lineno = 0;

                                                        CHECK_OBJECT( (PyObject *)tmp_tuple_unpack_2__source_iter );
                                                        Py_DECREF( tmp_tuple_unpack_2__source_iter );
                                                        tmp_tuple_unpack_2__source_iter = NULL;

                                                        // Re-raise.
                                                        exception_type = exception_keeper_type_3;
                                                        exception_value = exception_keeper_value_3;
                                                        exception_tb = exception_keeper_tb_3;
                                                        exception_lineno = exception_keeper_lineno_3;

                                                        goto try_except_handler_6;
                                                        // End of try:
                                                        try_end_3:;
                                                        goto try_end_4;
                                                        // Exception handler code:
                                                        try_except_handler_6:;
                                                        exception_keeper_type_4 = exception_type;
                                                        exception_keeper_value_4 = exception_value;
                                                        exception_keeper_tb_4 = exception_tb;
                                                        exception_keeper_lineno_4 = exception_lineno;
                                                        exception_type = NULL;
                                                        exception_value = NULL;
                                                        exception_tb = NULL;
                                                        exception_lineno = 0;

                                                        Py_XDECREF( tmp_tuple_unpack_2__element_1 );
                                                        tmp_tuple_unpack_2__element_1 = NULL;

                                                        Py_XDECREF( tmp_tuple_unpack_2__element_2 );
                                                        tmp_tuple_unpack_2__element_2 = NULL;

                                                        // Re-raise.
                                                        exception_type = exception_keeper_type_4;
                                                        exception_value = exception_keeper_value_4;
                                                        exception_tb = exception_keeper_tb_4;
                                                        exception_lineno = exception_keeper_lineno_4;

                                                        goto try_except_handler_5;
                                                        // End of try:
                                                        try_end_4:;
                                                        CHECK_OBJECT( (PyObject *)tmp_tuple_unpack_2__source_iter );
                                                        Py_DECREF( tmp_tuple_unpack_2__source_iter );
                                                        tmp_tuple_unpack_2__source_iter = NULL;

                                                        {
                                                            PyObject *tmp_assign_source_38;
                                                            CHECK_OBJECT( tmp_tuple_unpack_2__element_1 );
                                                            tmp_assign_source_38 = tmp_tuple_unpack_2__element_1;
                                                            {
                                                                PyObject *old = var_k;
                                                                var_k = tmp_assign_source_38;
                                                                Py_INCREF( var_k );
                                                                Py_XDECREF( old );
                                                            }

                                                        }
                                                        Py_XDECREF( tmp_tuple_unpack_2__element_1 );
                                                        tmp_tuple_unpack_2__element_1 = NULL;

                                                        {
                                                            PyObject *tmp_assign_source_39;
                                                            CHECK_OBJECT( tmp_tuple_unpack_2__element_2 );
                                                            tmp_assign_source_39 = tmp_tuple_unpack_2__element_2;
                                                            {
                                                                PyObject *old = var_o;
                                                                var_o = tmp_assign_source_39;
                                                                Py_INCREF( var_o );
                                                                Py_XDECREF( old );
                                                            }

                                                        }
                                                        Py_XDECREF( tmp_tuple_unpack_2__element_2 );
                                                        tmp_tuple_unpack_2__element_2 = NULL;

                                                        {
                                                            PyObject *tmp_ass_subvalue_3;
                                                            PyObject *tmp_called_instance_21;
                                                            PyObject *tmp_args_element_name_25;
                                                            PyObject *tmp_ass_subscribed_3;
                                                            PyObject *tmp_ass_subscript_3;
                                                            PyObject *tmp_called_instance_22;
                                                            PyObject *tmp_args_element_name_26;
                                                            CHECK_OBJECT( PyCell_GET( par_self ) );
                                                            tmp_called_instance_21 = PyCell_GET( par_self );
                                                            CHECK_OBJECT( var_o );
                                                            tmp_args_element_name_25 = var_o;
                                                            frame_1bf1851e5e22923611966fe471a992e2->m_frame.f_lineno = 676;
                                                            {
                                                                PyObject *call_args[] = { tmp_args_element_name_25 };
                                                                tmp_ass_subvalue_3 = CALL_METHOD_WITH_ARGS1( tmp_called_instance_21, const_str_plain__read_object, call_args );
                                                            }

                                                            if ( tmp_ass_subvalue_3 == NULL )
                                                            {
                                                                assert( ERROR_OCCURRED() );

                                                                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                                                                exception_lineno = 676;
                                                                type_description_1 = "coooooooooooo";
                                                                goto try_except_handler_5;
                                                            }
                                                            CHECK_OBJECT( var_result );
                                                            tmp_ass_subscribed_3 = var_result;
                                                            CHECK_OBJECT( PyCell_GET( par_self ) );
                                                            tmp_called_instance_22 = PyCell_GET( par_self );
                                                            CHECK_OBJECT( var_k );
                                                            tmp_args_element_name_26 = var_k;
                                                            frame_1bf1851e5e22923611966fe471a992e2->m_frame.f_lineno = 676;
                                                            {
                                                                PyObject *call_args[] = { tmp_args_element_name_26 };
                                                                tmp_ass_subscript_3 = CALL_METHOD_WITH_ARGS1( tmp_called_instance_22, const_str_plain__read_object, call_args );
                                                            }

                                                            if ( tmp_ass_subscript_3 == NULL )
                                                            {
                                                                assert( ERROR_OCCURRED() );

                                                                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
                                                                Py_DECREF( tmp_ass_subvalue_3 );

                                                                exception_lineno = 676;
                                                                type_description_1 = "coooooooooooo";
                                                                goto try_except_handler_5;
                                                            }
                                                            tmp_result = SET_SUBSCRIPT( tmp_ass_subscribed_3, tmp_ass_subscript_3, tmp_ass_subvalue_3 );
                                                            Py_DECREF( tmp_ass_subscript_3 );
                                                            Py_DECREF( tmp_ass_subvalue_3 );
                                                            if ( tmp_result == false )
                                                            {
                                                                assert( ERROR_OCCURRED() );

                                                                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                                                                exception_lineno = 676;
                                                                type_description_1 = "coooooooooooo";
                                                                goto try_except_handler_5;
                                                            }
                                                        }
                                                        if ( CONSIDER_THREADING() == false )
                                                        {
                                                            assert( ERROR_OCCURRED() );

                                                            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                                                            exception_lineno = 675;
                                                            type_description_1 = "coooooooooooo";
                                                            goto try_except_handler_5;
                                                        }
                                                        goto loop_start_1;
                                                        loop_end_1:;
                                                        goto try_end_5;
                                                        // Exception handler code:
                                                        try_except_handler_5:;
                                                        exception_keeper_type_5 = exception_type;
                                                        exception_keeper_value_5 = exception_value;
                                                        exception_keeper_tb_5 = exception_tb;
                                                        exception_keeper_lineno_5 = exception_lineno;
                                                        exception_type = NULL;
                                                        exception_value = NULL;
                                                        exception_tb = NULL;
                                                        exception_lineno = 0;

                                                        Py_XDECREF( tmp_for_loop_1__iter_value );
                                                        tmp_for_loop_1__iter_value = NULL;

                                                        CHECK_OBJECT( (PyObject *)tmp_for_loop_1__for_iterator );
                                                        Py_DECREF( tmp_for_loop_1__for_iterator );
                                                        tmp_for_loop_1__for_iterator = NULL;

                                                        // Re-raise.
                                                        exception_type = exception_keeper_type_5;
                                                        exception_value = exception_keeper_value_5;
                                                        exception_tb = exception_keeper_tb_5;
                                                        exception_lineno = exception_keeper_lineno_5;

                                                        goto frame_exception_exit_1;
                                                        // End of try:
                                                        try_end_5:;
                                                        Py_XDECREF( tmp_for_loop_1__iter_value );
                                                        tmp_for_loop_1__iter_value = NULL;

                                                        CHECK_OBJECT( (PyObject *)tmp_for_loop_1__for_iterator );
                                                        Py_DECREF( tmp_for_loop_1__for_iterator );
                                                        tmp_for_loop_1__for_iterator = NULL;

                                                        goto branch_end_15;
                                                        branch_no_15:;
                                                        {
                                                            PyObject *tmp_raise_type_1;
                                                            PyObject *tmp_called_name_11;
                                                            PyObject *tmp_mvar_value_8;
                                                            tmp_mvar_value_8 = GET_STRING_DICT_VALUE( moduledict_plistlib, (Nuitka_StringObject *)const_str_plain_InvalidFileException );

                                                            if (unlikely( tmp_mvar_value_8 == NULL ))
                                                            {
                                                                tmp_mvar_value_8 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_InvalidFileException );
                                                            }

                                                            if ( tmp_mvar_value_8 == NULL )
                                                            {

                                                                exception_type = PyExc_NameError;
                                                                Py_INCREF( exception_type );
                                                                exception_value = PyUnicode_FromFormat( "name '%s' is not defined", "InvalidFileException" );
                                                                exception_tb = NULL;
                                                                NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
                                                                CHAIN_EXCEPTION( exception_value );

                                                                exception_lineno = 679;
                                                                type_description_1 = "coooooooooooo";
                                                                goto frame_exception_exit_1;
                                                            }

                                                            tmp_called_name_11 = tmp_mvar_value_8;
                                                            frame_1bf1851e5e22923611966fe471a992e2->m_frame.f_lineno = 679;
                                                            tmp_raise_type_1 = CALL_FUNCTION_NO_ARGS( tmp_called_name_11 );
                                                            if ( tmp_raise_type_1 == NULL )
                                                            {
                                                                assert( ERROR_OCCURRED() );

                                                                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                                                                exception_lineno = 679;
                                                                type_description_1 = "coooooooooooo";
                                                                goto frame_exception_exit_1;
                                                            }
                                                            exception_type = tmp_raise_type_1;
                                                            exception_lineno = 679;
                                                            RAISE_EXCEPTION_WITH_TYPE( &exception_type, &exception_value, &exception_tb );
                                                            type_description_1 = "coooooooooooo";
                                                            goto frame_exception_exit_1;
                                                        }
                                                        branch_end_15:;
                                                    }
                                                    branch_end_14:;
                                                }
                                                branch_end_13:;
                                            }
                                            branch_end_12:;
                                        }
                                        branch_end_10:;
                                    }
                                    branch_end_9:;
                                }
                                branch_end_8:;
                            }
                            branch_end_7:;
                        }
                        branch_end_6:;
                    }
                    branch_end_5:;
                }
                branch_end_4:;
            }
            branch_end_3:;
        }
        branch_end_2:;
    }
    {
        PyObject *tmp_ass_subvalue_4;
        PyObject *tmp_ass_subscribed_4;
        PyObject *tmp_source_name_24;
        PyObject *tmp_ass_subscript_4;
        if ( var_result == NULL )
        {

            exception_type = PyExc_UnboundLocalError;
            Py_INCREF( exception_type );
            exception_value = PyUnicode_FromFormat( "local variable '%s' referenced before assignment", "result" );
            exception_tb = NULL;
            NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
            CHAIN_EXCEPTION( exception_value );

            exception_lineno = 681;
            type_description_1 = "coooooooooooo";
            goto frame_exception_exit_1;
        }

        tmp_ass_subvalue_4 = var_result;
        CHECK_OBJECT( PyCell_GET( par_self ) );
        tmp_source_name_24 = PyCell_GET( par_self );
        tmp_ass_subscribed_4 = LOOKUP_ATTRIBUTE( tmp_source_name_24, const_str_plain__objects );
        if ( tmp_ass_subscribed_4 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 681;
            type_description_1 = "coooooooooooo";
            goto frame_exception_exit_1;
        }
        CHECK_OBJECT( par_ref );
        tmp_ass_subscript_4 = par_ref;
        tmp_result = SET_SUBSCRIPT( tmp_ass_subscribed_4, tmp_ass_subscript_4, tmp_ass_subvalue_4 );
        Py_DECREF( tmp_ass_subscribed_4 );
        if ( tmp_result == false )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 681;
            type_description_1 = "coooooooooooo";
            goto frame_exception_exit_1;
        }
    }
    if ( var_result == NULL )
    {

        exception_type = PyExc_UnboundLocalError;
        Py_INCREF( exception_type );
        exception_value = PyUnicode_FromFormat( "local variable '%s' referenced before assignment", "result" );
        exception_tb = NULL;
        NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
        CHAIN_EXCEPTION( exception_value );

        exception_lineno = 682;
        type_description_1 = "coooooooooooo";
        goto frame_exception_exit_1;
    }

    tmp_return_value = var_result;
    Py_INCREF( tmp_return_value );
    goto frame_return_exit_1;

#if 0
    RESTORE_FRAME_EXCEPTION( frame_1bf1851e5e22923611966fe471a992e2 );
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto frame_no_exception_1;

    frame_return_exit_1:;
#if 0
    RESTORE_FRAME_EXCEPTION( frame_1bf1851e5e22923611966fe471a992e2 );
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto try_return_handler_1;

    frame_exception_exit_1:;

#if 0
    RESTORE_FRAME_EXCEPTION( frame_1bf1851e5e22923611966fe471a992e2 );
#endif

    if ( exception_tb == NULL )
    {
        exception_tb = MAKE_TRACEBACK( frame_1bf1851e5e22923611966fe471a992e2, exception_lineno );
    }
    else if ( exception_tb->tb_frame != &frame_1bf1851e5e22923611966fe471a992e2->m_frame )
    {
        exception_tb = ADD_TRACEBACK( exception_tb, frame_1bf1851e5e22923611966fe471a992e2, exception_lineno );
    }

    // Attachs locals to frame if any.
    Nuitka_Frame_AttachLocals(
        (struct Nuitka_FrameObject *)frame_1bf1851e5e22923611966fe471a992e2,
        type_description_1,
        par_self,
        par_ref,
        var_result,
        var_offset,
        var_token,
        var_tokenH,
        var_tokenL,
        var_f,
        var_s,
        var_obj_refs,
        var_key_refs,
        var_k,
        var_o
    );


    // Release cached frame.
    if ( frame_1bf1851e5e22923611966fe471a992e2 == cache_frame_1bf1851e5e22923611966fe471a992e2 )
    {
        Py_DECREF( frame_1bf1851e5e22923611966fe471a992e2 );
    }
    cache_frame_1bf1851e5e22923611966fe471a992e2 = NULL;

    assertFrameObject( frame_1bf1851e5e22923611966fe471a992e2 );

    // Put the previous frame back on top.
    popFrameStack();

    // Return the error.
    goto try_except_handler_1;

    frame_no_exception_1:;
    // tried codes exits in all cases
    NUITKA_CANNOT_GET_HERE( plistlib$$$function_54__read_object );
    return NULL;
    // Return handler code:
    try_return_handler_1:;
    CHECK_OBJECT( (PyObject *)par_self );
    Py_DECREF( par_self );
    par_self = NULL;

    CHECK_OBJECT( (PyObject *)par_ref );
    Py_DECREF( par_ref );
    par_ref = NULL;

    Py_XDECREF( var_result );
    var_result = NULL;

    Py_XDECREF( var_offset );
    var_offset = NULL;

    Py_XDECREF( var_token );
    var_token = NULL;

    Py_XDECREF( var_tokenH );
    var_tokenH = NULL;

    Py_XDECREF( var_tokenL );
    var_tokenL = NULL;

    Py_XDECREF( var_f );
    var_f = NULL;

    Py_XDECREF( var_s );
    var_s = NULL;

    Py_XDECREF( var_obj_refs );
    var_obj_refs = NULL;

    Py_XDECREF( var_key_refs );
    var_key_refs = NULL;

    Py_XDECREF( var_k );
    var_k = NULL;

    Py_XDECREF( var_o );
    var_o = NULL;

    goto function_return_exit;
    // Exception handler code:
    try_except_handler_1:;
    exception_keeper_type_6 = exception_type;
    exception_keeper_value_6 = exception_value;
    exception_keeper_tb_6 = exception_tb;
    exception_keeper_lineno_6 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    CHECK_OBJECT( (PyObject *)par_self );
    Py_DECREF( par_self );
    par_self = NULL;

    CHECK_OBJECT( (PyObject *)par_ref );
    Py_DECREF( par_ref );
    par_ref = NULL;

    Py_XDECREF( var_result );
    var_result = NULL;

    Py_XDECREF( var_offset );
    var_offset = NULL;

    Py_XDECREF( var_token );
    var_token = NULL;

    Py_XDECREF( var_tokenH );
    var_tokenH = NULL;

    Py_XDECREF( var_tokenL );
    var_tokenL = NULL;

    Py_XDECREF( var_f );
    var_f = NULL;

    Py_XDECREF( var_s );
    var_s = NULL;

    Py_XDECREF( var_obj_refs );
    var_obj_refs = NULL;

    Py_XDECREF( var_key_refs );
    var_key_refs = NULL;

    Py_XDECREF( var_k );
    var_k = NULL;

    Py_XDECREF( var_o );
    var_o = NULL;

    // Re-raise.
    exception_type = exception_keeper_type_6;
    exception_value = exception_keeper_value_6;
    exception_tb = exception_keeper_tb_6;
    exception_lineno = exception_keeper_lineno_6;

    goto function_exception_exit;
    // End of try:

    // Return statement must have exited already.
    NUITKA_CANNOT_GET_HERE( plistlib$$$function_54__read_object );
    return NULL;

function_exception_exit:
    assert( exception_type );
    RESTORE_ERROR_OCCURRED( exception_type, exception_value, exception_tb );

    return NULL;

function_return_exit:
   // Function cleanup code if any.


   // Actual function exit with return value, making sure we did not make
   // the error status worse despite non-NULL return.
   CHECK_OBJECT( tmp_return_value );
   assert( had_error || !ERROR_OCCURRED() );
   return tmp_return_value;
}



struct plistlib$$$function_54__read_object$$$genexpr_1_genexpr_locals {
    PyObject *var_x;
    PyObject *tmp_iter_value_0;
    char const *type_description_1;
    PyObject *exception_type;
    PyObject *exception_value;
    PyTracebackObject *exception_tb;
    int exception_lineno;
    char yield_tmps[1024];
    PyObject *exception_keeper_type_1;
    PyObject *exception_keeper_value_1;
    PyTracebackObject *exception_keeper_tb_1;
    int exception_keeper_lineno_1;
    PyObject *exception_keeper_type_2;
    PyObject *exception_keeper_value_2;
    PyTracebackObject *exception_keeper_tb_2;
    int exception_keeper_lineno_2;
};

static PyObject *plistlib$$$function_54__read_object$$$genexpr_1_genexpr_context( struct Nuitka_GeneratorObject *generator, PyObject *yield_return_value )
{
    CHECK_OBJECT( (PyObject *)generator );
    assert( Nuitka_Generator_Check( (PyObject *)generator ) );

    // Heap access if used.
    struct plistlib$$$function_54__read_object$$$genexpr_1_genexpr_locals *generator_heap = (struct plistlib$$$function_54__read_object$$$genexpr_1_genexpr_locals *)generator->m_heap_storage;

    // Dispatch to yield based on return label index:
    switch(generator->m_yield_return_index) {
    case 1: goto yield_return_1;
    }

    // Local variable initialization
    static struct Nuitka_FrameObject *cache_m_frame = NULL;
    generator_heap->var_x = NULL;
    generator_heap->tmp_iter_value_0 = NULL;
    generator_heap->type_description_1 = NULL;
    generator_heap->exception_type = NULL;
    generator_heap->exception_value = NULL;
    generator_heap->exception_tb = NULL;
    generator_heap->exception_lineno = 0;

    // Actual generator function body.
    // Tried code:
    MAKE_OR_REUSE_FRAME( cache_m_frame, codeobj_e25d154ed70a39e57de34784481fa24d, module_plistlib, sizeof(void *)+sizeof(void *)+sizeof(void *) );
    generator->m_frame = cache_m_frame;

    // Mark the frame object as in use, ref count 1 will be up for reuse.
    Py_INCREF( generator->m_frame );
    assert( Py_REFCNT( generator->m_frame ) == 2 ); // Frame stack

#if PYTHON_VERSION >= 340
    generator->m_frame->m_frame.f_gen = (PyObject *)generator;
#endif

    Py_CLEAR( generator->m_frame->m_frame.f_back );

    generator->m_frame->m_frame.f_back = PyThreadState_GET()->frame;
    Py_INCREF( generator->m_frame->m_frame.f_back );

    PyThreadState_GET()->frame = &generator->m_frame->m_frame;
    Py_INCREF( generator->m_frame );

    Nuitka_Frame_MarkAsExecuting( generator->m_frame );

#if PYTHON_VERSION >= 300
    // Accept currently existing exception as the one to publish again when we
    // yield or yield from.
    {
        PyThreadState *thread_state = PyThreadState_GET();

#if PYTHON_VERSION < 370
        generator->m_frame->m_frame.f_exc_type = EXC_TYPE( thread_state );
    if ( generator->m_frame->m_frame.f_exc_type == Py_None ) generator->m_frame->m_frame.f_exc_type = NULL;
        Py_XINCREF( generator->m_frame->m_frame.f_exc_type );
    generator->m_frame->m_frame.f_exc_value = EXC_VALUE( thread_state );
        Py_XINCREF( generator->m_frame->m_frame.f_exc_value );
    generator->m_frame->m_frame.f_exc_traceback = EXC_TRACEBACK( thread_state );
        Py_XINCREF( generator->m_frame->m_frame.f_exc_traceback );
#else
        generator->m_exc_state.exc_type = EXC_TYPE( thread_state );
        if ( generator->m_exc_state.exc_type == Py_None ) generator->m_exc_state.exc_type = NULL;
        Py_XINCREF( generator->m_exc_state.exc_type );
        generator->m_exc_state.exc_value = EXC_VALUE( thread_state );
        Py_XINCREF( generator->m_exc_state.exc_value );
        generator->m_exc_state.exc_traceback = EXC_TRACEBACK( thread_state );
        Py_XINCREF( generator->m_exc_state.exc_traceback );
#endif
    }

#endif

    // Framed code:
    // Tried code:
    loop_start_1:;
    {
        PyObject *tmp_next_source_1;
        PyObject *tmp_assign_source_1;
        CHECK_OBJECT( PyCell_GET( generator->m_closure[0] ) );
        tmp_next_source_1 = PyCell_GET( generator->m_closure[0] );
        tmp_assign_source_1 = ITERATOR_NEXT( tmp_next_source_1 );
        if ( tmp_assign_source_1 == NULL )
        {
            if ( CHECK_AND_CLEAR_STOP_ITERATION_OCCURRED() )
            {

                goto loop_end_1;
            }
            else
            {

                FETCH_ERROR_OCCURRED( &generator_heap->exception_type, &generator_heap->exception_value, &generator_heap->exception_tb );
                generator_heap->type_description_1 = "Noc";
                generator_heap->exception_lineno = 661;
                goto try_except_handler_2;
            }
        }

        {
            PyObject *old = generator_heap->tmp_iter_value_0;
            generator_heap->tmp_iter_value_0 = tmp_assign_source_1;
            Py_XDECREF( old );
        }

    }
    {
        PyObject *tmp_assign_source_2;
        CHECK_OBJECT( generator_heap->tmp_iter_value_0 );
        tmp_assign_source_2 = generator_heap->tmp_iter_value_0;
        {
            PyObject *old = generator_heap->var_x;
            generator_heap->var_x = tmp_assign_source_2;
            Py_INCREF( generator_heap->var_x );
            Py_XDECREF( old );
        }

    }
    {
        PyObject *tmp_expression_name_1;
        PyObject *tmp_called_instance_1;
        PyObject *tmp_args_element_name_1;
        NUITKA_MAY_BE_UNUSED PyObject *tmp_yield_result_1;
        if ( PyCell_GET( generator->m_closure[1] ) == NULL )
        {

            generator_heap->exception_type = PyExc_NameError;
            Py_INCREF( generator_heap->exception_type );
            generator_heap->exception_value = PyUnicode_FromFormat( "free variable '%s' referenced before assignment in enclosing scope", "self" );
            generator_heap->exception_tb = NULL;
            NORMALIZE_EXCEPTION( &generator_heap->exception_type, &generator_heap->exception_value, &generator_heap->exception_tb );
            CHAIN_EXCEPTION( generator_heap->exception_value );

            generator_heap->exception_lineno = 661;
            generator_heap->type_description_1 = "Noc";
            goto try_except_handler_2;
        }

        tmp_called_instance_1 = PyCell_GET( generator->m_closure[1] );
        CHECK_OBJECT( generator_heap->var_x );
        tmp_args_element_name_1 = generator_heap->var_x;
        generator->m_frame->m_frame.f_lineno = 661;
        {
            PyObject *call_args[] = { tmp_args_element_name_1 };
            tmp_expression_name_1 = CALL_METHOD_WITH_ARGS1( tmp_called_instance_1, const_str_plain__read_object, call_args );
        }

        if ( tmp_expression_name_1 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &generator_heap->exception_type, &generator_heap->exception_value, &generator_heap->exception_tb );


            generator_heap->exception_lineno = 661;
            generator_heap->type_description_1 = "Noc";
            goto try_except_handler_2;
        }
        Nuitka_PreserveHeap( generator_heap->yield_tmps, &tmp_called_instance_1, sizeof(PyObject *), &tmp_args_element_name_1, sizeof(PyObject *), NULL );
        generator->m_yield_return_index = 1;
        return tmp_expression_name_1;
        yield_return_1:
        Nuitka_RestoreHeap( generator_heap->yield_tmps, &tmp_called_instance_1, sizeof(PyObject *), &tmp_args_element_name_1, sizeof(PyObject *), NULL );
        if ( yield_return_value == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &generator_heap->exception_type, &generator_heap->exception_value, &generator_heap->exception_tb );


            generator_heap->exception_lineno = 661;
            generator_heap->type_description_1 = "Noc";
            goto try_except_handler_2;
        }
        tmp_yield_result_1 = yield_return_value;
    }
    if ( CONSIDER_THREADING() == false )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &generator_heap->exception_type, &generator_heap->exception_value, &generator_heap->exception_tb );


        generator_heap->exception_lineno = 661;
        generator_heap->type_description_1 = "Noc";
        goto try_except_handler_2;
    }
    goto loop_start_1;
    loop_end_1:;
    goto try_end_1;
    // Exception handler code:
    try_except_handler_2:;
    generator_heap->exception_keeper_type_1 = generator_heap->exception_type;
    generator_heap->exception_keeper_value_1 = generator_heap->exception_value;
    generator_heap->exception_keeper_tb_1 = generator_heap->exception_tb;
    generator_heap->exception_keeper_lineno_1 = generator_heap->exception_lineno;
    generator_heap->exception_type = NULL;
    generator_heap->exception_value = NULL;
    generator_heap->exception_tb = NULL;
    generator_heap->exception_lineno = 0;

    Py_XDECREF( generator_heap->tmp_iter_value_0 );
    generator_heap->tmp_iter_value_0 = NULL;

    // Re-raise.
    generator_heap->exception_type = generator_heap->exception_keeper_type_1;
    generator_heap->exception_value = generator_heap->exception_keeper_value_1;
    generator_heap->exception_tb = generator_heap->exception_keeper_tb_1;
    generator_heap->exception_lineno = generator_heap->exception_keeper_lineno_1;

    goto frame_exception_exit_1;
    // End of try:
    try_end_1:;

    Nuitka_Frame_MarkAsNotExecuting( generator->m_frame );

#if PYTHON_VERSION >= 370
    Py_CLEAR( generator->m_exc_state.exc_type );
    Py_CLEAR( generator->m_exc_state.exc_value );
    Py_CLEAR( generator->m_exc_state.exc_traceback );
#elif PYTHON_VERSION >= 300
    Py_CLEAR( generator->m_frame->m_frame.f_exc_type );
    Py_CLEAR( generator->m_frame->m_frame.f_exc_value );
    Py_CLEAR( generator->m_frame->m_frame.f_exc_traceback );
#endif

    // Allow re-use of the frame again.
    Py_DECREF( generator->m_frame );
    goto frame_no_exception_1;

    frame_exception_exit_1:;

    // If it's not an exit exception, consider and create a traceback for it.
    if ( !EXCEPTION_MATCH_GENERATOR( generator_heap->exception_type ) )
    {
        if ( generator_heap->exception_tb == NULL )
        {
            generator_heap->exception_tb = MAKE_TRACEBACK( generator->m_frame, generator_heap->exception_lineno );
        }
        else if ( generator_heap->exception_tb->tb_frame != &generator->m_frame->m_frame )
        {
            generator_heap->exception_tb = ADD_TRACEBACK( generator_heap->exception_tb, generator->m_frame, generator_heap->exception_lineno );
        }

        Nuitka_Frame_AttachLocals(
            (struct Nuitka_FrameObject *)generator->m_frame,
            generator_heap->type_description_1,
            NULL,
            generator_heap->var_x,
            generator->m_closure[1]
        );


        // Release cached frame.
        if ( generator->m_frame == cache_m_frame )
        {
            Py_DECREF( generator->m_frame );
        }
        cache_m_frame = NULL;

        assertFrameObject( generator->m_frame );
    }

#if PYTHON_VERSION >= 370
    Py_CLEAR( generator->m_exc_state.exc_type );
    Py_CLEAR( generator->m_exc_state.exc_value );
    Py_CLEAR( generator->m_exc_state.exc_traceback );
#elif PYTHON_VERSION >= 300
    Py_CLEAR( generator->m_frame->m_frame.f_exc_type );
    Py_CLEAR( generator->m_frame->m_frame.f_exc_value );
    Py_CLEAR( generator->m_frame->m_frame.f_exc_traceback );
#endif

    Py_DECREF( generator->m_frame );

    // Return the error.
    goto try_except_handler_1;

    frame_no_exception_1:;
    goto try_end_2;
    // Exception handler code:
    try_except_handler_1:;
    generator_heap->exception_keeper_type_2 = generator_heap->exception_type;
    generator_heap->exception_keeper_value_2 = generator_heap->exception_value;
    generator_heap->exception_keeper_tb_2 = generator_heap->exception_tb;
    generator_heap->exception_keeper_lineno_2 = generator_heap->exception_lineno;
    generator_heap->exception_type = NULL;
    generator_heap->exception_value = NULL;
    generator_heap->exception_tb = NULL;
    generator_heap->exception_lineno = 0;

    Py_XDECREF( generator_heap->var_x );
    generator_heap->var_x = NULL;

    // Re-raise.
    generator_heap->exception_type = generator_heap->exception_keeper_type_2;
    generator_heap->exception_value = generator_heap->exception_keeper_value_2;
    generator_heap->exception_tb = generator_heap->exception_keeper_tb_2;
    generator_heap->exception_lineno = generator_heap->exception_keeper_lineno_2;

    goto function_exception_exit;
    // End of try:
    try_end_2:;
    Py_XDECREF( generator_heap->tmp_iter_value_0 );
    generator_heap->tmp_iter_value_0 = NULL;

    Py_XDECREF( generator_heap->var_x );
    generator_heap->var_x = NULL;



    return NULL;

    function_exception_exit:
    assert( generator_heap->exception_type );
    RESTORE_ERROR_OCCURRED( generator_heap->exception_type, generator_heap->exception_value, generator_heap->exception_tb );

    return NULL;

}

static PyObject *plistlib$$$function_54__read_object$$$genexpr_1_genexpr_maker( void )
{
    return Nuitka_Generator_New(
        plistlib$$$function_54__read_object$$$genexpr_1_genexpr_context,
        module_plistlib,
        const_str_angle_genexpr,
#if PYTHON_VERSION >= 350
        const_str_digest_4d6355d35ff72a144820ce33fe2817b6,
#endif
        codeobj_e25d154ed70a39e57de34784481fa24d,
        2,
        sizeof(struct plistlib$$$function_54__read_object$$$genexpr_1_genexpr_locals)
    );
}


static PyObject *impl_plistlib$$$function_55__count_to_size( struct Nuitka_FunctionObject const *self, PyObject **python_pars )
{
    // Preserve error status for checks
#ifndef __NUITKA_NO_ASSERT__
    NUITKA_MAY_BE_UNUSED bool had_error = ERROR_OCCURRED();
#endif

    // Local variable declarations.
    PyObject *par_count = python_pars[ 0 ];
    struct Nuitka_FrameObject *frame_927a7a355580569d3e630a4925f287a3;
    NUITKA_MAY_BE_UNUSED char const *type_description_1 = NULL;
    int tmp_res;
    PyObject *exception_type = NULL;
    PyObject *exception_value = NULL;
    PyTracebackObject *exception_tb = NULL;
    NUITKA_MAY_BE_UNUSED int exception_lineno = 0;
    PyObject *tmp_return_value = NULL;
    static struct Nuitka_FrameObject *cache_frame_927a7a355580569d3e630a4925f287a3 = NULL;
    PyObject *exception_keeper_type_1;
    PyObject *exception_keeper_value_1;
    PyTracebackObject *exception_keeper_tb_1;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_1;

    // Actual function body.
    // Tried code:
    MAKE_OR_REUSE_FRAME( cache_frame_927a7a355580569d3e630a4925f287a3, codeobj_927a7a355580569d3e630a4925f287a3, module_plistlib, sizeof(void *) );
    frame_927a7a355580569d3e630a4925f287a3 = cache_frame_927a7a355580569d3e630a4925f287a3;

    // Push the new frame as the currently active one.
    pushFrameStack( frame_927a7a355580569d3e630a4925f287a3 );

    // Mark the frame object as in use, ref count 1 will be up for reuse.
    assert( Py_REFCNT( frame_927a7a355580569d3e630a4925f287a3 ) == 2 ); // Frame stack

    // Framed code:
    {
        nuitka_bool tmp_condition_result_1;
        PyObject *tmp_compexpr_left_1;
        PyObject *tmp_compexpr_right_1;
        CHECK_OBJECT( par_count );
        tmp_compexpr_left_1 = par_count;
        tmp_compexpr_right_1 = const_int_pos_256;
        tmp_res = RICH_COMPARE_BOOL_LT_OBJECT_OBJECT( tmp_compexpr_left_1, tmp_compexpr_right_1 );
        if ( tmp_res == -1 )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 685;
            type_description_1 = "o";
            goto frame_exception_exit_1;
        }
        tmp_condition_result_1 = ( tmp_res != 0 ) ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
        if ( tmp_condition_result_1 == NUITKA_BOOL_TRUE )
        {
            goto branch_yes_1;
        }
        else
        {
            goto branch_no_1;
        }
        branch_yes_1:;
        tmp_return_value = const_int_pos_1;
        Py_INCREF( tmp_return_value );
        goto frame_return_exit_1;
        goto branch_end_1;
        branch_no_1:;
        {
            nuitka_bool tmp_condition_result_2;
            PyObject *tmp_compexpr_left_2;
            PyObject *tmp_compexpr_right_2;
            CHECK_OBJECT( par_count );
            tmp_compexpr_left_2 = par_count;
            tmp_compexpr_right_2 = const_int_pos_65536;
            tmp_res = RICH_COMPARE_BOOL_LT_OBJECT_OBJECT( tmp_compexpr_left_2, tmp_compexpr_right_2 );
            if ( tmp_res == -1 )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 688;
                type_description_1 = "o";
                goto frame_exception_exit_1;
            }
            tmp_condition_result_2 = ( tmp_res != 0 ) ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
            if ( tmp_condition_result_2 == NUITKA_BOOL_TRUE )
            {
                goto branch_yes_2;
            }
            else
            {
                goto branch_no_2;
            }
            branch_yes_2:;
            tmp_return_value = const_int_pos_2;
            Py_INCREF( tmp_return_value );
            goto frame_return_exit_1;
            goto branch_end_2;
            branch_no_2:;
            {
                nuitka_bool tmp_condition_result_3;
                PyObject *tmp_left_name_1;
                PyObject *tmp_left_name_2;
                PyObject *tmp_right_name_1;
                PyObject *tmp_right_name_2;
                PyObject *tmp_op_lshift_res_1;
                int tmp_truth_name_1;
                CHECK_OBJECT( par_count );
                tmp_left_name_2 = par_count;
                tmp_right_name_1 = const_int_pos_1;
                tmp_left_name_1 = BINARY_OPERATION( PyNumber_Lshift, tmp_left_name_2, tmp_right_name_1 );
                if ( tmp_left_name_1 == NULL )
                {
                    assert( ERROR_OCCURRED() );

                    FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                    exception_lineno = 691;
                    type_description_1 = "o";
                    goto frame_exception_exit_1;
                }
                tmp_right_name_2 = const_int_pos_32;
                tmp_op_lshift_res_1 = BINARY_OPERATION( PyNumber_Lshift, tmp_left_name_1, tmp_right_name_2 );
                Py_DECREF( tmp_left_name_1 );
                if ( tmp_op_lshift_res_1 == NULL )
                {
                    assert( ERROR_OCCURRED() );

                    FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                    exception_lineno = 691;
                    type_description_1 = "o";
                    goto frame_exception_exit_1;
                }
                tmp_truth_name_1 = CHECK_IF_TRUE( tmp_op_lshift_res_1 );
                if ( tmp_truth_name_1 == -1 )
                {
                    assert( ERROR_OCCURRED() );

                    FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
                    Py_DECREF( tmp_op_lshift_res_1 );

                    exception_lineno = 691;
                    type_description_1 = "o";
                    goto frame_exception_exit_1;
                }
                tmp_condition_result_3 = tmp_truth_name_1 == 1 ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
                Py_DECREF( tmp_op_lshift_res_1 );
                if ( tmp_condition_result_3 == NUITKA_BOOL_TRUE )
                {
                    goto branch_yes_3;
                }
                else
                {
                    goto branch_no_3;
                }
                branch_yes_3:;
                tmp_return_value = const_int_pos_4;
                Py_INCREF( tmp_return_value );
                goto frame_return_exit_1;
                goto branch_end_3;
                branch_no_3:;
                tmp_return_value = const_int_pos_8;
                Py_INCREF( tmp_return_value );
                goto frame_return_exit_1;
                branch_end_3:;
            }
            branch_end_2:;
        }
        branch_end_1:;
    }

#if 0
    RESTORE_FRAME_EXCEPTION( frame_927a7a355580569d3e630a4925f287a3 );
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto frame_no_exception_1;

    frame_return_exit_1:;
#if 0
    RESTORE_FRAME_EXCEPTION( frame_927a7a355580569d3e630a4925f287a3 );
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto try_return_handler_1;

    frame_exception_exit_1:;

#if 0
    RESTORE_FRAME_EXCEPTION( frame_927a7a355580569d3e630a4925f287a3 );
#endif

    if ( exception_tb == NULL )
    {
        exception_tb = MAKE_TRACEBACK( frame_927a7a355580569d3e630a4925f287a3, exception_lineno );
    }
    else if ( exception_tb->tb_frame != &frame_927a7a355580569d3e630a4925f287a3->m_frame )
    {
        exception_tb = ADD_TRACEBACK( exception_tb, frame_927a7a355580569d3e630a4925f287a3, exception_lineno );
    }

    // Attachs locals to frame if any.
    Nuitka_Frame_AttachLocals(
        (struct Nuitka_FrameObject *)frame_927a7a355580569d3e630a4925f287a3,
        type_description_1,
        par_count
    );


    // Release cached frame.
    if ( frame_927a7a355580569d3e630a4925f287a3 == cache_frame_927a7a355580569d3e630a4925f287a3 )
    {
        Py_DECREF( frame_927a7a355580569d3e630a4925f287a3 );
    }
    cache_frame_927a7a355580569d3e630a4925f287a3 = NULL;

    assertFrameObject( frame_927a7a355580569d3e630a4925f287a3 );

    // Put the previous frame back on top.
    popFrameStack();

    // Return the error.
    goto try_except_handler_1;

    frame_no_exception_1:;
    // tried codes exits in all cases
    NUITKA_CANNOT_GET_HERE( plistlib$$$function_55__count_to_size );
    return NULL;
    // Return handler code:
    try_return_handler_1:;
    CHECK_OBJECT( (PyObject *)par_count );
    Py_DECREF( par_count );
    par_count = NULL;

    goto function_return_exit;
    // Exception handler code:
    try_except_handler_1:;
    exception_keeper_type_1 = exception_type;
    exception_keeper_value_1 = exception_value;
    exception_keeper_tb_1 = exception_tb;
    exception_keeper_lineno_1 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    CHECK_OBJECT( (PyObject *)par_count );
    Py_DECREF( par_count );
    par_count = NULL;

    // Re-raise.
    exception_type = exception_keeper_type_1;
    exception_value = exception_keeper_value_1;
    exception_tb = exception_keeper_tb_1;
    exception_lineno = exception_keeper_lineno_1;

    goto function_exception_exit;
    // End of try:

    // Return statement must have exited already.
    NUITKA_CANNOT_GET_HERE( plistlib$$$function_55__count_to_size );
    return NULL;

function_exception_exit:
    assert( exception_type );
    RESTORE_ERROR_OCCURRED( exception_type, exception_value, exception_tb );

    return NULL;

function_return_exit:
   // Function cleanup code if any.


   // Actual function exit with return value, making sure we did not make
   // the error status worse despite non-NULL return.
   CHECK_OBJECT( tmp_return_value );
   assert( had_error || !ERROR_OCCURRED() );
   return tmp_return_value;
}


static PyObject *impl_plistlib$$$function_56___init__( struct Nuitka_FunctionObject const *self, PyObject **python_pars )
{
    // Preserve error status for checks
#ifndef __NUITKA_NO_ASSERT__
    NUITKA_MAY_BE_UNUSED bool had_error = ERROR_OCCURRED();
#endif

    // Local variable declarations.
    PyObject *par_self = python_pars[ 0 ];
    PyObject *par_fp = python_pars[ 1 ];
    PyObject *par_sort_keys = python_pars[ 2 ];
    PyObject *par_skipkeys = python_pars[ 3 ];
    struct Nuitka_FrameObject *frame_622e7b07b6a23e8e10ca6224584ec87f;
    NUITKA_MAY_BE_UNUSED char const *type_description_1 = NULL;
    bool tmp_result;
    PyObject *exception_type = NULL;
    PyObject *exception_value = NULL;
    PyTracebackObject *exception_tb = NULL;
    NUITKA_MAY_BE_UNUSED int exception_lineno = 0;
    static struct Nuitka_FrameObject *cache_frame_622e7b07b6a23e8e10ca6224584ec87f = NULL;
    PyObject *tmp_return_value = NULL;
    PyObject *exception_keeper_type_1;
    PyObject *exception_keeper_value_1;
    PyTracebackObject *exception_keeper_tb_1;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_1;

    // Actual function body.
    // Tried code:
    MAKE_OR_REUSE_FRAME( cache_frame_622e7b07b6a23e8e10ca6224584ec87f, codeobj_622e7b07b6a23e8e10ca6224584ec87f, module_plistlib, sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *) );
    frame_622e7b07b6a23e8e10ca6224584ec87f = cache_frame_622e7b07b6a23e8e10ca6224584ec87f;

    // Push the new frame as the currently active one.
    pushFrameStack( frame_622e7b07b6a23e8e10ca6224584ec87f );

    // Mark the frame object as in use, ref count 1 will be up for reuse.
    assert( Py_REFCNT( frame_622e7b07b6a23e8e10ca6224584ec87f ) == 2 ); // Frame stack

    // Framed code:
    {
        PyObject *tmp_assattr_name_1;
        PyObject *tmp_assattr_target_1;
        CHECK_OBJECT( par_fp );
        tmp_assattr_name_1 = par_fp;
        CHECK_OBJECT( par_self );
        tmp_assattr_target_1 = par_self;
        tmp_result = SET_ATTRIBUTE( tmp_assattr_target_1, const_str_plain__fp, tmp_assattr_name_1 );
        if ( tmp_result == false )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 701;
            type_description_1 = "oooo";
            goto frame_exception_exit_1;
        }
    }
    {
        PyObject *tmp_assattr_name_2;
        PyObject *tmp_assattr_target_2;
        CHECK_OBJECT( par_sort_keys );
        tmp_assattr_name_2 = par_sort_keys;
        CHECK_OBJECT( par_self );
        tmp_assattr_target_2 = par_self;
        tmp_result = SET_ATTRIBUTE( tmp_assattr_target_2, const_str_plain__sort_keys, tmp_assattr_name_2 );
        if ( tmp_result == false )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 702;
            type_description_1 = "oooo";
            goto frame_exception_exit_1;
        }
    }
    {
        PyObject *tmp_assattr_name_3;
        PyObject *tmp_assattr_target_3;
        CHECK_OBJECT( par_skipkeys );
        tmp_assattr_name_3 = par_skipkeys;
        CHECK_OBJECT( par_self );
        tmp_assattr_target_3 = par_self;
        tmp_result = SET_ATTRIBUTE( tmp_assattr_target_3, const_str_plain__skipkeys, tmp_assattr_name_3 );
        if ( tmp_result == false )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 703;
            type_description_1 = "oooo";
            goto frame_exception_exit_1;
        }
    }

#if 0
    RESTORE_FRAME_EXCEPTION( frame_622e7b07b6a23e8e10ca6224584ec87f );
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto frame_no_exception_1;

    frame_exception_exit_1:;

#if 0
    RESTORE_FRAME_EXCEPTION( frame_622e7b07b6a23e8e10ca6224584ec87f );
#endif

    if ( exception_tb == NULL )
    {
        exception_tb = MAKE_TRACEBACK( frame_622e7b07b6a23e8e10ca6224584ec87f, exception_lineno );
    }
    else if ( exception_tb->tb_frame != &frame_622e7b07b6a23e8e10ca6224584ec87f->m_frame )
    {
        exception_tb = ADD_TRACEBACK( exception_tb, frame_622e7b07b6a23e8e10ca6224584ec87f, exception_lineno );
    }

    // Attachs locals to frame if any.
    Nuitka_Frame_AttachLocals(
        (struct Nuitka_FrameObject *)frame_622e7b07b6a23e8e10ca6224584ec87f,
        type_description_1,
        par_self,
        par_fp,
        par_sort_keys,
        par_skipkeys
    );


    // Release cached frame.
    if ( frame_622e7b07b6a23e8e10ca6224584ec87f == cache_frame_622e7b07b6a23e8e10ca6224584ec87f )
    {
        Py_DECREF( frame_622e7b07b6a23e8e10ca6224584ec87f );
    }
    cache_frame_622e7b07b6a23e8e10ca6224584ec87f = NULL;

    assertFrameObject( frame_622e7b07b6a23e8e10ca6224584ec87f );

    // Put the previous frame back on top.
    popFrameStack();

    // Return the error.
    goto try_except_handler_1;

    frame_no_exception_1:;
    tmp_return_value = Py_None;
    Py_INCREF( tmp_return_value );
    goto try_return_handler_1;
    // tried codes exits in all cases
    NUITKA_CANNOT_GET_HERE( plistlib$$$function_56___init__ );
    return NULL;
    // Return handler code:
    try_return_handler_1:;
    CHECK_OBJECT( (PyObject *)par_self );
    Py_DECREF( par_self );
    par_self = NULL;

    CHECK_OBJECT( (PyObject *)par_fp );
    Py_DECREF( par_fp );
    par_fp = NULL;

    CHECK_OBJECT( (PyObject *)par_sort_keys );
    Py_DECREF( par_sort_keys );
    par_sort_keys = NULL;

    CHECK_OBJECT( (PyObject *)par_skipkeys );
    Py_DECREF( par_skipkeys );
    par_skipkeys = NULL;

    goto function_return_exit;
    // Exception handler code:
    try_except_handler_1:;
    exception_keeper_type_1 = exception_type;
    exception_keeper_value_1 = exception_value;
    exception_keeper_tb_1 = exception_tb;
    exception_keeper_lineno_1 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    CHECK_OBJECT( (PyObject *)par_self );
    Py_DECREF( par_self );
    par_self = NULL;

    CHECK_OBJECT( (PyObject *)par_fp );
    Py_DECREF( par_fp );
    par_fp = NULL;

    CHECK_OBJECT( (PyObject *)par_sort_keys );
    Py_DECREF( par_sort_keys );
    par_sort_keys = NULL;

    CHECK_OBJECT( (PyObject *)par_skipkeys );
    Py_DECREF( par_skipkeys );
    par_skipkeys = NULL;

    // Re-raise.
    exception_type = exception_keeper_type_1;
    exception_value = exception_keeper_value_1;
    exception_tb = exception_keeper_tb_1;
    exception_lineno = exception_keeper_lineno_1;

    goto function_exception_exit;
    // End of try:

    // Return statement must have exited already.
    NUITKA_CANNOT_GET_HERE( plistlib$$$function_56___init__ );
    return NULL;

function_exception_exit:
    assert( exception_type );
    RESTORE_ERROR_OCCURRED( exception_type, exception_value, exception_tb );

    return NULL;

function_return_exit:
   // Function cleanup code if any.


   // Actual function exit with return value, making sure we did not make
   // the error status worse despite non-NULL return.
   CHECK_OBJECT( tmp_return_value );
   assert( had_error || !ERROR_OCCURRED() );
   return tmp_return_value;
}


static PyObject *impl_plistlib$$$function_57_write( struct Nuitka_FunctionObject const *self, PyObject **python_pars )
{
    // Preserve error status for checks
#ifndef __NUITKA_NO_ASSERT__
    NUITKA_MAY_BE_UNUSED bool had_error = ERROR_OCCURRED();
#endif

    // Local variable declarations.
    PyObject *par_self = python_pars[ 0 ];
    PyObject *par_value = python_pars[ 1 ];
    PyObject *var_num_objects = NULL;
    PyObject *var_obj = NULL;
    PyObject *var_top_object = NULL;
    PyObject *var_offset_table_offset = NULL;
    PyObject *var_offset_size = NULL;
    PyObject *var_offset_format = NULL;
    PyObject *var_trailer = NULL;
    PyObject *tmp_for_loop_1__for_iterator = NULL;
    PyObject *tmp_for_loop_1__iter_value = NULL;
    struct Nuitka_FrameObject *frame_f1c231a35a21038f690c7692c030f1ba;
    NUITKA_MAY_BE_UNUSED char const *type_description_1 = NULL;
    bool tmp_result;
    PyObject *exception_type = NULL;
    PyObject *exception_value = NULL;
    PyTracebackObject *exception_tb = NULL;
    NUITKA_MAY_BE_UNUSED int exception_lineno = 0;
    PyObject *exception_keeper_type_1;
    PyObject *exception_keeper_value_1;
    PyTracebackObject *exception_keeper_tb_1;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_1;
    static struct Nuitka_FrameObject *cache_frame_f1c231a35a21038f690c7692c030f1ba = NULL;
    PyObject *tmp_return_value = NULL;
    PyObject *exception_keeper_type_2;
    PyObject *exception_keeper_value_2;
    PyTracebackObject *exception_keeper_tb_2;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_2;

    // Actual function body.
    // Tried code:
    MAKE_OR_REUSE_FRAME( cache_frame_f1c231a35a21038f690c7692c030f1ba, codeobj_f1c231a35a21038f690c7692c030f1ba, module_plistlib, sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *) );
    frame_f1c231a35a21038f690c7692c030f1ba = cache_frame_f1c231a35a21038f690c7692c030f1ba;

    // Push the new frame as the currently active one.
    pushFrameStack( frame_f1c231a35a21038f690c7692c030f1ba );

    // Mark the frame object as in use, ref count 1 will be up for reuse.
    assert( Py_REFCNT( frame_f1c231a35a21038f690c7692c030f1ba ) == 2 ); // Frame stack

    // Framed code:
    {
        PyObject *tmp_assattr_name_1;
        PyObject *tmp_assattr_target_1;
        tmp_assattr_name_1 = PyList_New( 0 );
        CHECK_OBJECT( par_self );
        tmp_assattr_target_1 = par_self;
        tmp_result = SET_ATTRIBUTE( tmp_assattr_target_1, const_str_plain__objlist, tmp_assattr_name_1 );
        Py_DECREF( tmp_assattr_name_1 );
        if ( tmp_result == false )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 708;
            type_description_1 = "ooooooooNo";
            goto frame_exception_exit_1;
        }
    }
    {
        PyObject *tmp_assattr_name_2;
        PyObject *tmp_assattr_target_2;
        tmp_assattr_name_2 = PyDict_New();
        CHECK_OBJECT( par_self );
        tmp_assattr_target_2 = par_self;
        tmp_result = SET_ATTRIBUTE( tmp_assattr_target_2, const_str_plain__objtable, tmp_assattr_name_2 );
        Py_DECREF( tmp_assattr_name_2 );
        if ( tmp_result == false )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 714;
            type_description_1 = "ooooooooNo";
            goto frame_exception_exit_1;
        }
    }
    {
        PyObject *tmp_assattr_name_3;
        PyObject *tmp_assattr_target_3;
        tmp_assattr_name_3 = PyDict_New();
        CHECK_OBJECT( par_self );
        tmp_assattr_target_3 = par_self;
        tmp_result = SET_ATTRIBUTE( tmp_assattr_target_3, const_str_plain__objidtable, tmp_assattr_name_3 );
        Py_DECREF( tmp_assattr_name_3 );
        if ( tmp_result == false )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 715;
            type_description_1 = "ooooooooNo";
            goto frame_exception_exit_1;
        }
    }
    {
        PyObject *tmp_called_instance_1;
        PyObject *tmp_call_result_1;
        PyObject *tmp_args_element_name_1;
        CHECK_OBJECT( par_self );
        tmp_called_instance_1 = par_self;
        CHECK_OBJECT( par_value );
        tmp_args_element_name_1 = par_value;
        frame_f1c231a35a21038f690c7692c030f1ba->m_frame.f_lineno = 718;
        {
            PyObject *call_args[] = { tmp_args_element_name_1 };
            tmp_call_result_1 = CALL_METHOD_WITH_ARGS1( tmp_called_instance_1, const_str_plain__flatten, call_args );
        }

        if ( tmp_call_result_1 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 718;
            type_description_1 = "ooooooooNo";
            goto frame_exception_exit_1;
        }
        Py_DECREF( tmp_call_result_1 );
    }
    {
        PyObject *tmp_assign_source_1;
        PyObject *tmp_len_arg_1;
        PyObject *tmp_source_name_1;
        CHECK_OBJECT( par_self );
        tmp_source_name_1 = par_self;
        tmp_len_arg_1 = LOOKUP_ATTRIBUTE( tmp_source_name_1, const_str_plain__objlist );
        if ( tmp_len_arg_1 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 722;
            type_description_1 = "ooooooooNo";
            goto frame_exception_exit_1;
        }
        tmp_assign_source_1 = BUILTIN_LEN( tmp_len_arg_1 );
        Py_DECREF( tmp_len_arg_1 );
        if ( tmp_assign_source_1 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 722;
            type_description_1 = "ooooooooNo";
            goto frame_exception_exit_1;
        }
        assert( var_num_objects == NULL );
        var_num_objects = tmp_assign_source_1;
    }
    {
        PyObject *tmp_assattr_name_4;
        PyObject *tmp_left_name_1;
        PyObject *tmp_right_name_1;
        PyObject *tmp_assattr_target_4;
        tmp_left_name_1 = LIST_COPY( const_list_int_0_list );
        CHECK_OBJECT( var_num_objects );
        tmp_right_name_1 = var_num_objects;
        tmp_assattr_name_4 = BINARY_OPERATION_MUL( tmp_left_name_1, tmp_right_name_1 );
        Py_DECREF( tmp_left_name_1 );
        if ( tmp_assattr_name_4 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 723;
            type_description_1 = "ooooooooNo";
            goto frame_exception_exit_1;
        }
        CHECK_OBJECT( par_self );
        tmp_assattr_target_4 = par_self;
        tmp_result = SET_ATTRIBUTE( tmp_assattr_target_4, const_str_plain__object_offsets, tmp_assattr_name_4 );
        Py_DECREF( tmp_assattr_name_4 );
        if ( tmp_result == false )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 723;
            type_description_1 = "ooooooooNo";
            goto frame_exception_exit_1;
        }
    }
    {
        PyObject *tmp_assattr_name_5;
        PyObject *tmp_called_name_1;
        PyObject *tmp_mvar_value_1;
        PyObject *tmp_args_element_name_2;
        PyObject *tmp_assattr_target_5;
        tmp_mvar_value_1 = GET_STRING_DICT_VALUE( moduledict_plistlib, (Nuitka_StringObject *)const_str_plain__count_to_size );

        if (unlikely( tmp_mvar_value_1 == NULL ))
        {
            tmp_mvar_value_1 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain__count_to_size );
        }

        if ( tmp_mvar_value_1 == NULL )
        {

            exception_type = PyExc_NameError;
            Py_INCREF( exception_type );
            exception_value = PyUnicode_FromFormat( "name '%s' is not defined", "_count_to_size" );
            exception_tb = NULL;
            NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
            CHAIN_EXCEPTION( exception_value );

            exception_lineno = 724;
            type_description_1 = "ooooooooNo";
            goto frame_exception_exit_1;
        }

        tmp_called_name_1 = tmp_mvar_value_1;
        CHECK_OBJECT( var_num_objects );
        tmp_args_element_name_2 = var_num_objects;
        frame_f1c231a35a21038f690c7692c030f1ba->m_frame.f_lineno = 724;
        {
            PyObject *call_args[] = { tmp_args_element_name_2 };
            tmp_assattr_name_5 = CALL_FUNCTION_WITH_ARGS1( tmp_called_name_1, call_args );
        }

        if ( tmp_assattr_name_5 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 724;
            type_description_1 = "ooooooooNo";
            goto frame_exception_exit_1;
        }
        CHECK_OBJECT( par_self );
        tmp_assattr_target_5 = par_self;
        tmp_result = SET_ATTRIBUTE( tmp_assattr_target_5, const_str_plain__ref_size, tmp_assattr_name_5 );
        Py_DECREF( tmp_assattr_name_5 );
        if ( tmp_result == false )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 724;
            type_description_1 = "ooooooooNo";
            goto frame_exception_exit_1;
        }
    }
    {
        PyObject *tmp_assattr_name_6;
        PyObject *tmp_subscribed_name_1;
        PyObject *tmp_mvar_value_2;
        PyObject *tmp_subscript_name_1;
        PyObject *tmp_source_name_2;
        PyObject *tmp_assattr_target_6;
        tmp_mvar_value_2 = GET_STRING_DICT_VALUE( moduledict_plistlib, (Nuitka_StringObject *)const_str_plain__BINARY_FORMAT );

        if (unlikely( tmp_mvar_value_2 == NULL ))
        {
            tmp_mvar_value_2 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain__BINARY_FORMAT );
        }

        if ( tmp_mvar_value_2 == NULL )
        {

            exception_type = PyExc_NameError;
            Py_INCREF( exception_type );
            exception_value = PyUnicode_FromFormat( "name '%s' is not defined", "_BINARY_FORMAT" );
            exception_tb = NULL;
            NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
            CHAIN_EXCEPTION( exception_value );

            exception_lineno = 726;
            type_description_1 = "ooooooooNo";
            goto frame_exception_exit_1;
        }

        tmp_subscribed_name_1 = tmp_mvar_value_2;
        CHECK_OBJECT( par_self );
        tmp_source_name_2 = par_self;
        tmp_subscript_name_1 = LOOKUP_ATTRIBUTE( tmp_source_name_2, const_str_plain__ref_size );
        if ( tmp_subscript_name_1 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 726;
            type_description_1 = "ooooooooNo";
            goto frame_exception_exit_1;
        }
        tmp_assattr_name_6 = LOOKUP_SUBSCRIPT( tmp_subscribed_name_1, tmp_subscript_name_1 );
        Py_DECREF( tmp_subscript_name_1 );
        if ( tmp_assattr_name_6 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 726;
            type_description_1 = "ooooooooNo";
            goto frame_exception_exit_1;
        }
        CHECK_OBJECT( par_self );
        tmp_assattr_target_6 = par_self;
        tmp_result = SET_ATTRIBUTE( tmp_assattr_target_6, const_str_plain__ref_format, tmp_assattr_name_6 );
        Py_DECREF( tmp_assattr_name_6 );
        if ( tmp_result == false )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 726;
            type_description_1 = "ooooooooNo";
            goto frame_exception_exit_1;
        }
    }
    {
        PyObject *tmp_called_instance_2;
        PyObject *tmp_source_name_3;
        PyObject *tmp_call_result_2;
        CHECK_OBJECT( par_self );
        tmp_source_name_3 = par_self;
        tmp_called_instance_2 = LOOKUP_ATTRIBUTE( tmp_source_name_3, const_str_plain__fp );
        if ( tmp_called_instance_2 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 729;
            type_description_1 = "ooooooooNo";
            goto frame_exception_exit_1;
        }
        frame_f1c231a35a21038f690c7692c030f1ba->m_frame.f_lineno = 729;
        tmp_call_result_2 = CALL_METHOD_WITH_ARGS1( tmp_called_instance_2, const_str_plain_write, &PyTuple_GET_ITEM( const_tuple_bytes_digest_f56f4391a49dc6cc1c15f8ec95e9a37e_tuple, 0 ) );

        Py_DECREF( tmp_called_instance_2 );
        if ( tmp_call_result_2 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 729;
            type_description_1 = "ooooooooNo";
            goto frame_exception_exit_1;
        }
        Py_DECREF( tmp_call_result_2 );
    }
    {
        PyObject *tmp_assign_source_2;
        PyObject *tmp_iter_arg_1;
        PyObject *tmp_source_name_4;
        CHECK_OBJECT( par_self );
        tmp_source_name_4 = par_self;
        tmp_iter_arg_1 = LOOKUP_ATTRIBUTE( tmp_source_name_4, const_str_plain__objlist );
        if ( tmp_iter_arg_1 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 732;
            type_description_1 = "ooooooooNo";
            goto frame_exception_exit_1;
        }
        tmp_assign_source_2 = MAKE_ITERATOR( tmp_iter_arg_1 );
        Py_DECREF( tmp_iter_arg_1 );
        if ( tmp_assign_source_2 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 732;
            type_description_1 = "ooooooooNo";
            goto frame_exception_exit_1;
        }
        assert( tmp_for_loop_1__for_iterator == NULL );
        tmp_for_loop_1__for_iterator = tmp_assign_source_2;
    }
    // Tried code:
    loop_start_1:;
    {
        PyObject *tmp_next_source_1;
        PyObject *tmp_assign_source_3;
        CHECK_OBJECT( tmp_for_loop_1__for_iterator );
        tmp_next_source_1 = tmp_for_loop_1__for_iterator;
        tmp_assign_source_3 = ITERATOR_NEXT( tmp_next_source_1 );
        if ( tmp_assign_source_3 == NULL )
        {
            if ( CHECK_AND_CLEAR_STOP_ITERATION_OCCURRED() )
            {

                goto loop_end_1;
            }
            else
            {

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
                type_description_1 = "ooooooooNo";
                exception_lineno = 732;
                goto try_except_handler_2;
            }
        }

        {
            PyObject *old = tmp_for_loop_1__iter_value;
            tmp_for_loop_1__iter_value = tmp_assign_source_3;
            Py_XDECREF( old );
        }

    }
    {
        PyObject *tmp_assign_source_4;
        CHECK_OBJECT( tmp_for_loop_1__iter_value );
        tmp_assign_source_4 = tmp_for_loop_1__iter_value;
        {
            PyObject *old = var_obj;
            var_obj = tmp_assign_source_4;
            Py_INCREF( var_obj );
            Py_XDECREF( old );
        }

    }
    {
        PyObject *tmp_called_instance_3;
        PyObject *tmp_call_result_3;
        PyObject *tmp_args_element_name_3;
        CHECK_OBJECT( par_self );
        tmp_called_instance_3 = par_self;
        CHECK_OBJECT( var_obj );
        tmp_args_element_name_3 = var_obj;
        frame_f1c231a35a21038f690c7692c030f1ba->m_frame.f_lineno = 733;
        {
            PyObject *call_args[] = { tmp_args_element_name_3 };
            tmp_call_result_3 = CALL_METHOD_WITH_ARGS1( tmp_called_instance_3, const_str_plain__write_object, call_args );
        }

        if ( tmp_call_result_3 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 733;
            type_description_1 = "ooooooooNo";
            goto try_except_handler_2;
        }
        Py_DECREF( tmp_call_result_3 );
    }
    if ( CONSIDER_THREADING() == false )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 732;
        type_description_1 = "ooooooooNo";
        goto try_except_handler_2;
    }
    goto loop_start_1;
    loop_end_1:;
    goto try_end_1;
    // Exception handler code:
    try_except_handler_2:;
    exception_keeper_type_1 = exception_type;
    exception_keeper_value_1 = exception_value;
    exception_keeper_tb_1 = exception_tb;
    exception_keeper_lineno_1 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    Py_XDECREF( tmp_for_loop_1__iter_value );
    tmp_for_loop_1__iter_value = NULL;

    CHECK_OBJECT( (PyObject *)tmp_for_loop_1__for_iterator );
    Py_DECREF( tmp_for_loop_1__for_iterator );
    tmp_for_loop_1__for_iterator = NULL;

    // Re-raise.
    exception_type = exception_keeper_type_1;
    exception_value = exception_keeper_value_1;
    exception_tb = exception_keeper_tb_1;
    exception_lineno = exception_keeper_lineno_1;

    goto frame_exception_exit_1;
    // End of try:
    try_end_1:;
    Py_XDECREF( tmp_for_loop_1__iter_value );
    tmp_for_loop_1__iter_value = NULL;

    CHECK_OBJECT( (PyObject *)tmp_for_loop_1__for_iterator );
    Py_DECREF( tmp_for_loop_1__for_iterator );
    tmp_for_loop_1__for_iterator = NULL;

    {
        PyObject *tmp_assign_source_5;
        PyObject *tmp_called_instance_4;
        PyObject *tmp_args_element_name_4;
        CHECK_OBJECT( par_self );
        tmp_called_instance_4 = par_self;
        CHECK_OBJECT( par_value );
        tmp_args_element_name_4 = par_value;
        frame_f1c231a35a21038f690c7692c030f1ba->m_frame.f_lineno = 736;
        {
            PyObject *call_args[] = { tmp_args_element_name_4 };
            tmp_assign_source_5 = CALL_METHOD_WITH_ARGS1( tmp_called_instance_4, const_str_plain__getrefnum, call_args );
        }

        if ( tmp_assign_source_5 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 736;
            type_description_1 = "ooooooooNo";
            goto frame_exception_exit_1;
        }
        assert( var_top_object == NULL );
        var_top_object = tmp_assign_source_5;
    }
    {
        PyObject *tmp_assign_source_6;
        PyObject *tmp_called_instance_5;
        PyObject *tmp_source_name_5;
        CHECK_OBJECT( par_self );
        tmp_source_name_5 = par_self;
        tmp_called_instance_5 = LOOKUP_ATTRIBUTE( tmp_source_name_5, const_str_plain__fp );
        if ( tmp_called_instance_5 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 737;
            type_description_1 = "ooooooooNo";
            goto frame_exception_exit_1;
        }
        frame_f1c231a35a21038f690c7692c030f1ba->m_frame.f_lineno = 737;
        tmp_assign_source_6 = CALL_METHOD_NO_ARGS( tmp_called_instance_5, const_str_plain_tell );
        Py_DECREF( tmp_called_instance_5 );
        if ( tmp_assign_source_6 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 737;
            type_description_1 = "ooooooooNo";
            goto frame_exception_exit_1;
        }
        assert( var_offset_table_offset == NULL );
        var_offset_table_offset = tmp_assign_source_6;
    }
    {
        PyObject *tmp_assign_source_7;
        PyObject *tmp_called_name_2;
        PyObject *tmp_mvar_value_3;
        PyObject *tmp_args_element_name_5;
        tmp_mvar_value_3 = GET_STRING_DICT_VALUE( moduledict_plistlib, (Nuitka_StringObject *)const_str_plain__count_to_size );

        if (unlikely( tmp_mvar_value_3 == NULL ))
        {
            tmp_mvar_value_3 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain__count_to_size );
        }

        if ( tmp_mvar_value_3 == NULL )
        {

            exception_type = PyExc_NameError;
            Py_INCREF( exception_type );
            exception_value = PyUnicode_FromFormat( "name '%s' is not defined", "_count_to_size" );
            exception_tb = NULL;
            NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
            CHAIN_EXCEPTION( exception_value );

            exception_lineno = 738;
            type_description_1 = "ooooooooNo";
            goto frame_exception_exit_1;
        }

        tmp_called_name_2 = tmp_mvar_value_3;
        CHECK_OBJECT( var_offset_table_offset );
        tmp_args_element_name_5 = var_offset_table_offset;
        frame_f1c231a35a21038f690c7692c030f1ba->m_frame.f_lineno = 738;
        {
            PyObject *call_args[] = { tmp_args_element_name_5 };
            tmp_assign_source_7 = CALL_FUNCTION_WITH_ARGS1( tmp_called_name_2, call_args );
        }

        if ( tmp_assign_source_7 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 738;
            type_description_1 = "ooooooooNo";
            goto frame_exception_exit_1;
        }
        assert( var_offset_size == NULL );
        var_offset_size = tmp_assign_source_7;
    }
    {
        PyObject *tmp_assign_source_8;
        PyObject *tmp_left_name_2;
        PyObject *tmp_right_name_2;
        PyObject *tmp_left_name_3;
        PyObject *tmp_subscribed_name_2;
        PyObject *tmp_mvar_value_4;
        PyObject *tmp_subscript_name_2;
        PyObject *tmp_right_name_3;
        tmp_left_name_2 = const_str_chr_62;
        tmp_mvar_value_4 = GET_STRING_DICT_VALUE( moduledict_plistlib, (Nuitka_StringObject *)const_str_plain__BINARY_FORMAT );

        if (unlikely( tmp_mvar_value_4 == NULL ))
        {
            tmp_mvar_value_4 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain__BINARY_FORMAT );
        }

        if ( tmp_mvar_value_4 == NULL )
        {

            exception_type = PyExc_NameError;
            Py_INCREF( exception_type );
            exception_value = PyUnicode_FromFormat( "name '%s' is not defined", "_BINARY_FORMAT" );
            exception_tb = NULL;
            NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
            CHAIN_EXCEPTION( exception_value );

            exception_lineno = 739;
            type_description_1 = "ooooooooNo";
            goto frame_exception_exit_1;
        }

        tmp_subscribed_name_2 = tmp_mvar_value_4;
        CHECK_OBJECT( var_offset_size );
        tmp_subscript_name_2 = var_offset_size;
        tmp_left_name_3 = LOOKUP_SUBSCRIPT( tmp_subscribed_name_2, tmp_subscript_name_2 );
        if ( tmp_left_name_3 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 739;
            type_description_1 = "ooooooooNo";
            goto frame_exception_exit_1;
        }
        CHECK_OBJECT( var_num_objects );
        tmp_right_name_3 = var_num_objects;
        tmp_right_name_2 = BINARY_OPERATION_MUL( tmp_left_name_3, tmp_right_name_3 );
        Py_DECREF( tmp_left_name_3 );
        if ( tmp_right_name_2 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 739;
            type_description_1 = "ooooooooNo";
            goto frame_exception_exit_1;
        }
        tmp_assign_source_8 = BINARY_OPERATION_ADD_UNICODE_OBJECT( tmp_left_name_2, tmp_right_name_2 );
        Py_DECREF( tmp_right_name_2 );
        if ( tmp_assign_source_8 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 739;
            type_description_1 = "ooooooooNo";
            goto frame_exception_exit_1;
        }
        assert( var_offset_format == NULL );
        var_offset_format = tmp_assign_source_8;
    }
    {
        PyObject *tmp_called_name_3;
        PyObject *tmp_source_name_6;
        PyObject *tmp_source_name_7;
        PyObject *tmp_call_result_4;
        PyObject *tmp_args_element_name_6;
        PyObject *tmp_dircall_arg1_1;
        PyObject *tmp_source_name_8;
        PyObject *tmp_mvar_value_5;
        PyObject *tmp_dircall_arg2_1;
        PyObject *tmp_tuple_element_1;
        PyObject *tmp_dircall_arg3_1;
        PyObject *tmp_source_name_9;
        CHECK_OBJECT( par_self );
        tmp_source_name_7 = par_self;
        tmp_source_name_6 = LOOKUP_ATTRIBUTE( tmp_source_name_7, const_str_plain__fp );
        if ( tmp_source_name_6 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 740;
            type_description_1 = "ooooooooNo";
            goto frame_exception_exit_1;
        }
        tmp_called_name_3 = LOOKUP_ATTRIBUTE( tmp_source_name_6, const_str_plain_write );
        Py_DECREF( tmp_source_name_6 );
        if ( tmp_called_name_3 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 740;
            type_description_1 = "ooooooooNo";
            goto frame_exception_exit_1;
        }
        tmp_mvar_value_5 = GET_STRING_DICT_VALUE( moduledict_plistlib, (Nuitka_StringObject *)const_str_plain_struct );

        if (unlikely( tmp_mvar_value_5 == NULL ))
        {
            tmp_mvar_value_5 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_struct );
        }

        if ( tmp_mvar_value_5 == NULL )
        {
            Py_DECREF( tmp_called_name_3 );
            exception_type = PyExc_NameError;
            Py_INCREF( exception_type );
            exception_value = PyUnicode_FromFormat( "name '%s' is not defined", "struct" );
            exception_tb = NULL;
            NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
            CHAIN_EXCEPTION( exception_value );

            exception_lineno = 740;
            type_description_1 = "ooooooooNo";
            goto frame_exception_exit_1;
        }

        tmp_source_name_8 = tmp_mvar_value_5;
        tmp_dircall_arg1_1 = LOOKUP_ATTRIBUTE( tmp_source_name_8, const_str_plain_pack );
        if ( tmp_dircall_arg1_1 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
            Py_DECREF( tmp_called_name_3 );

            exception_lineno = 740;
            type_description_1 = "ooooooooNo";
            goto frame_exception_exit_1;
        }
        CHECK_OBJECT( var_offset_format );
        tmp_tuple_element_1 = var_offset_format;
        tmp_dircall_arg2_1 = PyTuple_New( 1 );
        Py_INCREF( tmp_tuple_element_1 );
        PyTuple_SET_ITEM( tmp_dircall_arg2_1, 0, tmp_tuple_element_1 );
        CHECK_OBJECT( par_self );
        tmp_source_name_9 = par_self;
        tmp_dircall_arg3_1 = LOOKUP_ATTRIBUTE( tmp_source_name_9, const_str_plain__object_offsets );
        if ( tmp_dircall_arg3_1 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
            Py_DECREF( tmp_called_name_3 );
            Py_DECREF( tmp_dircall_arg1_1 );
            Py_DECREF( tmp_dircall_arg2_1 );

            exception_lineno = 740;
            type_description_1 = "ooooooooNo";
            goto frame_exception_exit_1;
        }

        {
            PyObject *dir_call_args[] = {tmp_dircall_arg1_1, tmp_dircall_arg2_1, tmp_dircall_arg3_1};
            tmp_args_element_name_6 = impl___internal__$$$function_4_complex_call_helper_pos_star_list( dir_call_args );
        }
        if ( tmp_args_element_name_6 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
            Py_DECREF( tmp_called_name_3 );

            exception_lineno = 740;
            type_description_1 = "ooooooooNo";
            goto frame_exception_exit_1;
        }
        frame_f1c231a35a21038f690c7692c030f1ba->m_frame.f_lineno = 740;
        {
            PyObject *call_args[] = { tmp_args_element_name_6 };
            tmp_call_result_4 = CALL_FUNCTION_WITH_ARGS1( tmp_called_name_3, call_args );
        }

        Py_DECREF( tmp_called_name_3 );
        Py_DECREF( tmp_args_element_name_6 );
        if ( tmp_call_result_4 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 740;
            type_description_1 = "ooooooooNo";
            goto frame_exception_exit_1;
        }
        Py_DECREF( tmp_call_result_4 );
    }
    {
        PyObject *tmp_assign_source_9;
        PyObject *tmp_tuple_element_2;
        PyObject *tmp_source_name_10;
        tmp_tuple_element_2 = const_int_0;
        tmp_assign_source_9 = PyTuple_New( 6 );
        Py_INCREF( tmp_tuple_element_2 );
        PyTuple_SET_ITEM( tmp_assign_source_9, 0, tmp_tuple_element_2 );
        CHECK_OBJECT( var_offset_size );
        tmp_tuple_element_2 = var_offset_size;
        Py_INCREF( tmp_tuple_element_2 );
        PyTuple_SET_ITEM( tmp_assign_source_9, 1, tmp_tuple_element_2 );
        CHECK_OBJECT( par_self );
        tmp_source_name_10 = par_self;
        tmp_tuple_element_2 = LOOKUP_ATTRIBUTE( tmp_source_name_10, const_str_plain__ref_size );
        if ( tmp_tuple_element_2 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
            Py_DECREF( tmp_assign_source_9 );

            exception_lineno = 745;
            type_description_1 = "ooooooooNo";
            goto frame_exception_exit_1;
        }
        PyTuple_SET_ITEM( tmp_assign_source_9, 2, tmp_tuple_element_2 );
        CHECK_OBJECT( var_num_objects );
        tmp_tuple_element_2 = var_num_objects;
        Py_INCREF( tmp_tuple_element_2 );
        PyTuple_SET_ITEM( tmp_assign_source_9, 3, tmp_tuple_element_2 );
        CHECK_OBJECT( var_top_object );
        tmp_tuple_element_2 = var_top_object;
        Py_INCREF( tmp_tuple_element_2 );
        PyTuple_SET_ITEM( tmp_assign_source_9, 4, tmp_tuple_element_2 );
        CHECK_OBJECT( var_offset_table_offset );
        tmp_tuple_element_2 = var_offset_table_offset;
        Py_INCREF( tmp_tuple_element_2 );
        PyTuple_SET_ITEM( tmp_assign_source_9, 5, tmp_tuple_element_2 );
        assert( var_trailer == NULL );
        var_trailer = tmp_assign_source_9;
    }
    {
        PyObject *tmp_called_name_4;
        PyObject *tmp_source_name_11;
        PyObject *tmp_source_name_12;
        PyObject *tmp_call_result_5;
        PyObject *tmp_args_element_name_7;
        PyObject *tmp_dircall_arg1_2;
        PyObject *tmp_source_name_13;
        PyObject *tmp_mvar_value_6;
        PyObject *tmp_dircall_arg2_2;
        PyObject *tmp_dircall_arg3_2;
        CHECK_OBJECT( par_self );
        tmp_source_name_12 = par_self;
        tmp_source_name_11 = LOOKUP_ATTRIBUTE( tmp_source_name_12, const_str_plain__fp );
        if ( tmp_source_name_11 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 748;
            type_description_1 = "ooooooooNo";
            goto frame_exception_exit_1;
        }
        tmp_called_name_4 = LOOKUP_ATTRIBUTE( tmp_source_name_11, const_str_plain_write );
        Py_DECREF( tmp_source_name_11 );
        if ( tmp_called_name_4 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 748;
            type_description_1 = "ooooooooNo";
            goto frame_exception_exit_1;
        }
        tmp_mvar_value_6 = GET_STRING_DICT_VALUE( moduledict_plistlib, (Nuitka_StringObject *)const_str_plain_struct );

        if (unlikely( tmp_mvar_value_6 == NULL ))
        {
            tmp_mvar_value_6 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_struct );
        }

        if ( tmp_mvar_value_6 == NULL )
        {
            Py_DECREF( tmp_called_name_4 );
            exception_type = PyExc_NameError;
            Py_INCREF( exception_type );
            exception_value = PyUnicode_FromFormat( "name '%s' is not defined", "struct" );
            exception_tb = NULL;
            NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
            CHAIN_EXCEPTION( exception_value );

            exception_lineno = 748;
            type_description_1 = "ooooooooNo";
            goto frame_exception_exit_1;
        }

        tmp_source_name_13 = tmp_mvar_value_6;
        tmp_dircall_arg1_2 = LOOKUP_ATTRIBUTE( tmp_source_name_13, const_str_plain_pack );
        if ( tmp_dircall_arg1_2 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
            Py_DECREF( tmp_called_name_4 );

            exception_lineno = 748;
            type_description_1 = "ooooooooNo";
            goto frame_exception_exit_1;
        }
        tmp_dircall_arg2_2 = const_tuple_str_digest_564b88fedb28bf2460a9105c33b11e5b_tuple;
        CHECK_OBJECT( var_trailer );
        tmp_dircall_arg3_2 = var_trailer;
        Py_INCREF( tmp_dircall_arg2_2 );
        Py_INCREF( tmp_dircall_arg3_2 );

        {
            PyObject *dir_call_args[] = {tmp_dircall_arg1_2, tmp_dircall_arg2_2, tmp_dircall_arg3_2};
            tmp_args_element_name_7 = impl___internal__$$$function_4_complex_call_helper_pos_star_list( dir_call_args );
        }
        if ( tmp_args_element_name_7 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
            Py_DECREF( tmp_called_name_4 );

            exception_lineno = 748;
            type_description_1 = "ooooooooNo";
            goto frame_exception_exit_1;
        }
        frame_f1c231a35a21038f690c7692c030f1ba->m_frame.f_lineno = 748;
        {
            PyObject *call_args[] = { tmp_args_element_name_7 };
            tmp_call_result_5 = CALL_FUNCTION_WITH_ARGS1( tmp_called_name_4, call_args );
        }

        Py_DECREF( tmp_called_name_4 );
        Py_DECREF( tmp_args_element_name_7 );
        if ( tmp_call_result_5 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 748;
            type_description_1 = "ooooooooNo";
            goto frame_exception_exit_1;
        }
        Py_DECREF( tmp_call_result_5 );
    }

#if 0
    RESTORE_FRAME_EXCEPTION( frame_f1c231a35a21038f690c7692c030f1ba );
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto frame_no_exception_1;

    frame_exception_exit_1:;

#if 0
    RESTORE_FRAME_EXCEPTION( frame_f1c231a35a21038f690c7692c030f1ba );
#endif

    if ( exception_tb == NULL )
    {
        exception_tb = MAKE_TRACEBACK( frame_f1c231a35a21038f690c7692c030f1ba, exception_lineno );
    }
    else if ( exception_tb->tb_frame != &frame_f1c231a35a21038f690c7692c030f1ba->m_frame )
    {
        exception_tb = ADD_TRACEBACK( exception_tb, frame_f1c231a35a21038f690c7692c030f1ba, exception_lineno );
    }

    // Attachs locals to frame if any.
    Nuitka_Frame_AttachLocals(
        (struct Nuitka_FrameObject *)frame_f1c231a35a21038f690c7692c030f1ba,
        type_description_1,
        par_self,
        par_value,
        var_num_objects,
        var_obj,
        var_top_object,
        var_offset_table_offset,
        var_offset_size,
        var_offset_format,
        NULL,
        var_trailer
    );


    // Release cached frame.
    if ( frame_f1c231a35a21038f690c7692c030f1ba == cache_frame_f1c231a35a21038f690c7692c030f1ba )
    {
        Py_DECREF( frame_f1c231a35a21038f690c7692c030f1ba );
    }
    cache_frame_f1c231a35a21038f690c7692c030f1ba = NULL;

    assertFrameObject( frame_f1c231a35a21038f690c7692c030f1ba );

    // Put the previous frame back on top.
    popFrameStack();

    // Return the error.
    goto try_except_handler_1;

    frame_no_exception_1:;
    tmp_return_value = Py_None;
    Py_INCREF( tmp_return_value );
    goto try_return_handler_1;
    // tried codes exits in all cases
    NUITKA_CANNOT_GET_HERE( plistlib$$$function_57_write );
    return NULL;
    // Return handler code:
    try_return_handler_1:;
    CHECK_OBJECT( (PyObject *)par_self );
    Py_DECREF( par_self );
    par_self = NULL;

    CHECK_OBJECT( (PyObject *)par_value );
    Py_DECREF( par_value );
    par_value = NULL;

    CHECK_OBJECT( (PyObject *)var_num_objects );
    Py_DECREF( var_num_objects );
    var_num_objects = NULL;

    Py_XDECREF( var_obj );
    var_obj = NULL;

    CHECK_OBJECT( (PyObject *)var_top_object );
    Py_DECREF( var_top_object );
    var_top_object = NULL;

    CHECK_OBJECT( (PyObject *)var_offset_table_offset );
    Py_DECREF( var_offset_table_offset );
    var_offset_table_offset = NULL;

    CHECK_OBJECT( (PyObject *)var_offset_size );
    Py_DECREF( var_offset_size );
    var_offset_size = NULL;

    CHECK_OBJECT( (PyObject *)var_offset_format );
    Py_DECREF( var_offset_format );
    var_offset_format = NULL;

    CHECK_OBJECT( (PyObject *)var_trailer );
    Py_DECREF( var_trailer );
    var_trailer = NULL;

    goto function_return_exit;
    // Exception handler code:
    try_except_handler_1:;
    exception_keeper_type_2 = exception_type;
    exception_keeper_value_2 = exception_value;
    exception_keeper_tb_2 = exception_tb;
    exception_keeper_lineno_2 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    CHECK_OBJECT( (PyObject *)par_self );
    Py_DECREF( par_self );
    par_self = NULL;

    CHECK_OBJECT( (PyObject *)par_value );
    Py_DECREF( par_value );
    par_value = NULL;

    Py_XDECREF( var_num_objects );
    var_num_objects = NULL;

    Py_XDECREF( var_obj );
    var_obj = NULL;

    Py_XDECREF( var_top_object );
    var_top_object = NULL;

    Py_XDECREF( var_offset_table_offset );
    var_offset_table_offset = NULL;

    Py_XDECREF( var_offset_size );
    var_offset_size = NULL;

    Py_XDECREF( var_offset_format );
    var_offset_format = NULL;

    Py_XDECREF( var_trailer );
    var_trailer = NULL;

    // Re-raise.
    exception_type = exception_keeper_type_2;
    exception_value = exception_keeper_value_2;
    exception_tb = exception_keeper_tb_2;
    exception_lineno = exception_keeper_lineno_2;

    goto function_exception_exit;
    // End of try:

    // Return statement must have exited already.
    NUITKA_CANNOT_GET_HERE( plistlib$$$function_57_write );
    return NULL;

function_exception_exit:
    assert( exception_type );
    RESTORE_ERROR_OCCURRED( exception_type, exception_value, exception_tb );

    return NULL;

function_return_exit:
   // Function cleanup code if any.


   // Actual function exit with return value, making sure we did not make
   // the error status worse despite non-NULL return.
   CHECK_OBJECT( tmp_return_value );
   assert( had_error || !ERROR_OCCURRED() );
   return tmp_return_value;
}


static PyObject *impl_plistlib$$$function_58__flatten( struct Nuitka_FunctionObject const *self, PyObject **python_pars )
{
    // Preserve error status for checks
#ifndef __NUITKA_NO_ASSERT__
    NUITKA_MAY_BE_UNUSED bool had_error = ERROR_OCCURRED();
#endif

    // Local variable declarations.
    PyObject *par_self = python_pars[ 0 ];
    PyObject *par_value = python_pars[ 1 ];
    PyObject *var_refnum = NULL;
    PyObject *var_keys = NULL;
    PyObject *var_values = NULL;
    PyObject *var_items = NULL;
    PyObject *var_k = NULL;
    PyObject *var_v = NULL;
    PyObject *var_o = NULL;
    PyObject *tmp_for_loop_1__for_iterator = NULL;
    PyObject *tmp_for_loop_1__iter_value = NULL;
    PyObject *tmp_for_loop_2__for_iterator = NULL;
    PyObject *tmp_for_loop_2__iter_value = NULL;
    PyObject *tmp_for_loop_3__for_iterator = NULL;
    PyObject *tmp_for_loop_3__iter_value = NULL;
    PyObject *tmp_tuple_unpack_1__element_1 = NULL;
    PyObject *tmp_tuple_unpack_1__element_2 = NULL;
    PyObject *tmp_tuple_unpack_1__source_iter = NULL;
    struct Nuitka_FrameObject *frame_a6aec4ddff54c70832a6d33f1dce40fd;
    NUITKA_MAY_BE_UNUSED char const *type_description_1 = NULL;
    PyObject *exception_type = NULL;
    PyObject *exception_value = NULL;
    PyTracebackObject *exception_tb = NULL;
    NUITKA_MAY_BE_UNUSED int exception_lineno = 0;
    int tmp_res;
    PyObject *tmp_return_value = NULL;
    bool tmp_result;
    PyObject *tmp_iterator_attempt;
    PyObject *exception_keeper_type_1;
    PyObject *exception_keeper_value_1;
    PyTracebackObject *exception_keeper_tb_1;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_1;
    PyObject *exception_keeper_type_2;
    PyObject *exception_keeper_value_2;
    PyTracebackObject *exception_keeper_tb_2;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_2;
    PyObject *exception_keeper_type_3;
    PyObject *exception_keeper_value_3;
    PyTracebackObject *exception_keeper_tb_3;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_3;
    PyObject *exception_keeper_type_4;
    PyObject *exception_keeper_value_4;
    PyTracebackObject *exception_keeper_tb_4;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_4;
    PyObject *exception_keeper_type_5;
    PyObject *exception_keeper_value_5;
    PyTracebackObject *exception_keeper_tb_5;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_5;
    static struct Nuitka_FrameObject *cache_frame_a6aec4ddff54c70832a6d33f1dce40fd = NULL;
    PyObject *exception_keeper_type_6;
    PyObject *exception_keeper_value_6;
    PyTracebackObject *exception_keeper_tb_6;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_6;

    // Actual function body.
    // Tried code:
    MAKE_OR_REUSE_FRAME( cache_frame_a6aec4ddff54c70832a6d33f1dce40fd, codeobj_a6aec4ddff54c70832a6d33f1dce40fd, module_plistlib, sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *) );
    frame_a6aec4ddff54c70832a6d33f1dce40fd = cache_frame_a6aec4ddff54c70832a6d33f1dce40fd;

    // Push the new frame as the currently active one.
    pushFrameStack( frame_a6aec4ddff54c70832a6d33f1dce40fd );

    // Mark the frame object as in use, ref count 1 will be up for reuse.
    assert( Py_REFCNT( frame_a6aec4ddff54c70832a6d33f1dce40fd ) == 2 ); // Frame stack

    // Framed code:
    {
        nuitka_bool tmp_condition_result_1;
        PyObject *tmp_isinstance_inst_1;
        PyObject *tmp_isinstance_cls_1;
        PyObject *tmp_mvar_value_1;
        CHECK_OBJECT( par_value );
        tmp_isinstance_inst_1 = par_value;
        tmp_mvar_value_1 = GET_STRING_DICT_VALUE( moduledict_plistlib, (Nuitka_StringObject *)const_str_plain__scalars );

        if (unlikely( tmp_mvar_value_1 == NULL ))
        {
            tmp_mvar_value_1 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain__scalars );
        }

        if ( tmp_mvar_value_1 == NULL )
        {

            exception_type = PyExc_NameError;
            Py_INCREF( exception_type );
            exception_value = PyUnicode_FromFormat( "name '%s' is not defined", "_scalars" );
            exception_tb = NULL;
            NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
            CHAIN_EXCEPTION( exception_value );

            exception_lineno = 754;
            type_description_1 = "ooooooooo";
            goto frame_exception_exit_1;
        }

        tmp_isinstance_cls_1 = tmp_mvar_value_1;
        tmp_res = Nuitka_IsInstance( tmp_isinstance_inst_1, tmp_isinstance_cls_1 );
        if ( tmp_res == -1 )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 754;
            type_description_1 = "ooooooooo";
            goto frame_exception_exit_1;
        }
        tmp_condition_result_1 = ( tmp_res != 0 ) ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
        if ( tmp_condition_result_1 == NUITKA_BOOL_TRUE )
        {
            goto branch_yes_1;
        }
        else
        {
            goto branch_no_1;
        }
        branch_yes_1:;
        {
            nuitka_bool tmp_condition_result_2;
            PyObject *tmp_compexpr_left_1;
            PyObject *tmp_compexpr_right_1;
            PyObject *tmp_tuple_element_1;
            PyObject *tmp_type_arg_1;
            PyObject *tmp_source_name_1;
            CHECK_OBJECT( par_value );
            tmp_type_arg_1 = par_value;
            tmp_tuple_element_1 = BUILTIN_TYPE1( tmp_type_arg_1 );
            assert( !(tmp_tuple_element_1 == NULL) );
            tmp_compexpr_left_1 = PyTuple_New( 2 );
            PyTuple_SET_ITEM( tmp_compexpr_left_1, 0, tmp_tuple_element_1 );
            CHECK_OBJECT( par_value );
            tmp_tuple_element_1 = par_value;
            Py_INCREF( tmp_tuple_element_1 );
            PyTuple_SET_ITEM( tmp_compexpr_left_1, 1, tmp_tuple_element_1 );
            CHECK_OBJECT( par_self );
            tmp_source_name_1 = par_self;
            tmp_compexpr_right_1 = LOOKUP_ATTRIBUTE( tmp_source_name_1, const_str_plain__objtable );
            if ( tmp_compexpr_right_1 == NULL )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
                Py_DECREF( tmp_compexpr_left_1 );

                exception_lineno = 755;
                type_description_1 = "ooooooooo";
                goto frame_exception_exit_1;
            }
            tmp_res = PySequence_Contains( tmp_compexpr_right_1, tmp_compexpr_left_1 );
            Py_DECREF( tmp_compexpr_left_1 );
            Py_DECREF( tmp_compexpr_right_1 );
            if ( tmp_res == -1 )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 755;
                type_description_1 = "ooooooooo";
                goto frame_exception_exit_1;
            }
            tmp_condition_result_2 = ( tmp_res == 1 ) ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
            if ( tmp_condition_result_2 == NUITKA_BOOL_TRUE )
            {
                goto branch_yes_2;
            }
            else
            {
                goto branch_no_2;
            }
            branch_yes_2:;
            tmp_return_value = Py_None;
            Py_INCREF( tmp_return_value );
            goto frame_return_exit_1;
            branch_no_2:;
        }
        goto branch_end_1;
        branch_no_1:;
        {
            nuitka_bool tmp_condition_result_3;
            PyObject *tmp_isinstance_inst_2;
            PyObject *tmp_isinstance_cls_2;
            PyObject *tmp_mvar_value_2;
            CHECK_OBJECT( par_value );
            tmp_isinstance_inst_2 = par_value;
            tmp_mvar_value_2 = GET_STRING_DICT_VALUE( moduledict_plistlib, (Nuitka_StringObject *)const_str_plain_Data );

            if (unlikely( tmp_mvar_value_2 == NULL ))
            {
                tmp_mvar_value_2 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_Data );
            }

            if ( tmp_mvar_value_2 == NULL )
            {

                exception_type = PyExc_NameError;
                Py_INCREF( exception_type );
                exception_value = PyUnicode_FromFormat( "name '%s' is not defined", "Data" );
                exception_tb = NULL;
                NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
                CHAIN_EXCEPTION( exception_value );

                exception_lineno = 758;
                type_description_1 = "ooooooooo";
                goto frame_exception_exit_1;
            }

            tmp_isinstance_cls_2 = tmp_mvar_value_2;
            tmp_res = Nuitka_IsInstance( tmp_isinstance_inst_2, tmp_isinstance_cls_2 );
            if ( tmp_res == -1 )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 758;
                type_description_1 = "ooooooooo";
                goto frame_exception_exit_1;
            }
            tmp_condition_result_3 = ( tmp_res != 0 ) ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
            if ( tmp_condition_result_3 == NUITKA_BOOL_TRUE )
            {
                goto branch_yes_3;
            }
            else
            {
                goto branch_no_3;
            }
            branch_yes_3:;
            {
                nuitka_bool tmp_condition_result_4;
                PyObject *tmp_compexpr_left_2;
                PyObject *tmp_compexpr_right_2;
                PyObject *tmp_tuple_element_2;
                PyObject *tmp_type_arg_2;
                PyObject *tmp_source_name_2;
                PyObject *tmp_source_name_3;
                PyObject *tmp_source_name_4;
                CHECK_OBJECT( par_value );
                tmp_source_name_2 = par_value;
                tmp_type_arg_2 = LOOKUP_ATTRIBUTE( tmp_source_name_2, const_str_plain_data );
                if ( tmp_type_arg_2 == NULL )
                {
                    assert( ERROR_OCCURRED() );

                    FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                    exception_lineno = 759;
                    type_description_1 = "ooooooooo";
                    goto frame_exception_exit_1;
                }
                tmp_tuple_element_2 = BUILTIN_TYPE1( tmp_type_arg_2 );
                Py_DECREF( tmp_type_arg_2 );
                if ( tmp_tuple_element_2 == NULL )
                {
                    assert( ERROR_OCCURRED() );

                    FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                    exception_lineno = 759;
                    type_description_1 = "ooooooooo";
                    goto frame_exception_exit_1;
                }
                tmp_compexpr_left_2 = PyTuple_New( 2 );
                PyTuple_SET_ITEM( tmp_compexpr_left_2, 0, tmp_tuple_element_2 );
                CHECK_OBJECT( par_value );
                tmp_source_name_3 = par_value;
                tmp_tuple_element_2 = LOOKUP_ATTRIBUTE( tmp_source_name_3, const_str_plain_data );
                if ( tmp_tuple_element_2 == NULL )
                {
                    assert( ERROR_OCCURRED() );

                    FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
                    Py_DECREF( tmp_compexpr_left_2 );

                    exception_lineno = 759;
                    type_description_1 = "ooooooooo";
                    goto frame_exception_exit_1;
                }
                PyTuple_SET_ITEM( tmp_compexpr_left_2, 1, tmp_tuple_element_2 );
                CHECK_OBJECT( par_self );
                tmp_source_name_4 = par_self;
                tmp_compexpr_right_2 = LOOKUP_ATTRIBUTE( tmp_source_name_4, const_str_plain__objtable );
                if ( tmp_compexpr_right_2 == NULL )
                {
                    assert( ERROR_OCCURRED() );

                    FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
                    Py_DECREF( tmp_compexpr_left_2 );

                    exception_lineno = 759;
                    type_description_1 = "ooooooooo";
                    goto frame_exception_exit_1;
                }
                tmp_res = PySequence_Contains( tmp_compexpr_right_2, tmp_compexpr_left_2 );
                Py_DECREF( tmp_compexpr_left_2 );
                Py_DECREF( tmp_compexpr_right_2 );
                if ( tmp_res == -1 )
                {
                    assert( ERROR_OCCURRED() );

                    FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                    exception_lineno = 759;
                    type_description_1 = "ooooooooo";
                    goto frame_exception_exit_1;
                }
                tmp_condition_result_4 = ( tmp_res == 1 ) ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
                if ( tmp_condition_result_4 == NUITKA_BOOL_TRUE )
                {
                    goto branch_yes_4;
                }
                else
                {
                    goto branch_no_4;
                }
                branch_yes_4:;
                tmp_return_value = Py_None;
                Py_INCREF( tmp_return_value );
                goto frame_return_exit_1;
                branch_no_4:;
            }
            goto branch_end_3;
            branch_no_3:;
            {
                nuitka_bool tmp_condition_result_5;
                PyObject *tmp_compexpr_left_3;
                PyObject *tmp_compexpr_right_3;
                PyObject *tmp_id_arg_1;
                PyObject *tmp_source_name_5;
                CHECK_OBJECT( par_value );
                tmp_id_arg_1 = par_value;
                tmp_compexpr_left_3 = PyLong_FromVoidPtr( tmp_id_arg_1 );
                if ( tmp_compexpr_left_3 == NULL )
                {
                    assert( ERROR_OCCURRED() );

                    FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                    exception_lineno = 762;
                    type_description_1 = "ooooooooo";
                    goto frame_exception_exit_1;
                }
                CHECK_OBJECT( par_self );
                tmp_source_name_5 = par_self;
                tmp_compexpr_right_3 = LOOKUP_ATTRIBUTE( tmp_source_name_5, const_str_plain__objidtable );
                if ( tmp_compexpr_right_3 == NULL )
                {
                    assert( ERROR_OCCURRED() );

                    FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
                    Py_DECREF( tmp_compexpr_left_3 );

                    exception_lineno = 762;
                    type_description_1 = "ooooooooo";
                    goto frame_exception_exit_1;
                }
                tmp_res = PySequence_Contains( tmp_compexpr_right_3, tmp_compexpr_left_3 );
                Py_DECREF( tmp_compexpr_left_3 );
                Py_DECREF( tmp_compexpr_right_3 );
                if ( tmp_res == -1 )
                {
                    assert( ERROR_OCCURRED() );

                    FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                    exception_lineno = 762;
                    type_description_1 = "ooooooooo";
                    goto frame_exception_exit_1;
                }
                tmp_condition_result_5 = ( tmp_res == 1 ) ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
                if ( tmp_condition_result_5 == NUITKA_BOOL_TRUE )
                {
                    goto branch_yes_5;
                }
                else
                {
                    goto branch_no_5;
                }
                branch_yes_5:;
                tmp_return_value = Py_None;
                Py_INCREF( tmp_return_value );
                goto frame_return_exit_1;
                branch_no_5:;
            }
            branch_end_3:;
        }
        branch_end_1:;
    }
    {
        PyObject *tmp_assign_source_1;
        PyObject *tmp_len_arg_1;
        PyObject *tmp_source_name_6;
        CHECK_OBJECT( par_self );
        tmp_source_name_6 = par_self;
        tmp_len_arg_1 = LOOKUP_ATTRIBUTE( tmp_source_name_6, const_str_plain__objlist );
        if ( tmp_len_arg_1 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 766;
            type_description_1 = "ooooooooo";
            goto frame_exception_exit_1;
        }
        tmp_assign_source_1 = BUILTIN_LEN( tmp_len_arg_1 );
        Py_DECREF( tmp_len_arg_1 );
        if ( tmp_assign_source_1 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 766;
            type_description_1 = "ooooooooo";
            goto frame_exception_exit_1;
        }
        assert( var_refnum == NULL );
        var_refnum = tmp_assign_source_1;
    }
    {
        PyObject *tmp_called_instance_1;
        PyObject *tmp_source_name_7;
        PyObject *tmp_call_result_1;
        PyObject *tmp_args_element_name_1;
        CHECK_OBJECT( par_self );
        tmp_source_name_7 = par_self;
        tmp_called_instance_1 = LOOKUP_ATTRIBUTE( tmp_source_name_7, const_str_plain__objlist );
        if ( tmp_called_instance_1 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 767;
            type_description_1 = "ooooooooo";
            goto frame_exception_exit_1;
        }
        CHECK_OBJECT( par_value );
        tmp_args_element_name_1 = par_value;
        frame_a6aec4ddff54c70832a6d33f1dce40fd->m_frame.f_lineno = 767;
        {
            PyObject *call_args[] = { tmp_args_element_name_1 };
            tmp_call_result_1 = CALL_METHOD_WITH_ARGS1( tmp_called_instance_1, const_str_plain_append, call_args );
        }

        Py_DECREF( tmp_called_instance_1 );
        if ( tmp_call_result_1 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 767;
            type_description_1 = "ooooooooo";
            goto frame_exception_exit_1;
        }
        Py_DECREF( tmp_call_result_1 );
    }
    {
        nuitka_bool tmp_condition_result_6;
        PyObject *tmp_isinstance_inst_3;
        PyObject *tmp_isinstance_cls_3;
        PyObject *tmp_mvar_value_3;
        CHECK_OBJECT( par_value );
        tmp_isinstance_inst_3 = par_value;
        tmp_mvar_value_3 = GET_STRING_DICT_VALUE( moduledict_plistlib, (Nuitka_StringObject *)const_str_plain__scalars );

        if (unlikely( tmp_mvar_value_3 == NULL ))
        {
            tmp_mvar_value_3 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain__scalars );
        }

        if ( tmp_mvar_value_3 == NULL )
        {

            exception_type = PyExc_NameError;
            Py_INCREF( exception_type );
            exception_value = PyUnicode_FromFormat( "name '%s' is not defined", "_scalars" );
            exception_tb = NULL;
            NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
            CHAIN_EXCEPTION( exception_value );

            exception_lineno = 768;
            type_description_1 = "ooooooooo";
            goto frame_exception_exit_1;
        }

        tmp_isinstance_cls_3 = tmp_mvar_value_3;
        tmp_res = Nuitka_IsInstance( tmp_isinstance_inst_3, tmp_isinstance_cls_3 );
        if ( tmp_res == -1 )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 768;
            type_description_1 = "ooooooooo";
            goto frame_exception_exit_1;
        }
        tmp_condition_result_6 = ( tmp_res != 0 ) ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
        if ( tmp_condition_result_6 == NUITKA_BOOL_TRUE )
        {
            goto branch_yes_6;
        }
        else
        {
            goto branch_no_6;
        }
        branch_yes_6:;
        {
            PyObject *tmp_ass_subvalue_1;
            PyObject *tmp_ass_subscribed_1;
            PyObject *tmp_source_name_8;
            PyObject *tmp_ass_subscript_1;
            PyObject *tmp_tuple_element_3;
            PyObject *tmp_type_arg_3;
            CHECK_OBJECT( var_refnum );
            tmp_ass_subvalue_1 = var_refnum;
            CHECK_OBJECT( par_self );
            tmp_source_name_8 = par_self;
            tmp_ass_subscribed_1 = LOOKUP_ATTRIBUTE( tmp_source_name_8, const_str_plain__objtable );
            if ( tmp_ass_subscribed_1 == NULL )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 769;
                type_description_1 = "ooooooooo";
                goto frame_exception_exit_1;
            }
            CHECK_OBJECT( par_value );
            tmp_type_arg_3 = par_value;
            tmp_tuple_element_3 = BUILTIN_TYPE1( tmp_type_arg_3 );
            assert( !(tmp_tuple_element_3 == NULL) );
            tmp_ass_subscript_1 = PyTuple_New( 2 );
            PyTuple_SET_ITEM( tmp_ass_subscript_1, 0, tmp_tuple_element_3 );
            CHECK_OBJECT( par_value );
            tmp_tuple_element_3 = par_value;
            Py_INCREF( tmp_tuple_element_3 );
            PyTuple_SET_ITEM( tmp_ass_subscript_1, 1, tmp_tuple_element_3 );
            tmp_result = SET_SUBSCRIPT( tmp_ass_subscribed_1, tmp_ass_subscript_1, tmp_ass_subvalue_1 );
            Py_DECREF( tmp_ass_subscribed_1 );
            Py_DECREF( tmp_ass_subscript_1 );
            if ( tmp_result == false )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 769;
                type_description_1 = "ooooooooo";
                goto frame_exception_exit_1;
            }
        }
        goto branch_end_6;
        branch_no_6:;
        {
            nuitka_bool tmp_condition_result_7;
            PyObject *tmp_isinstance_inst_4;
            PyObject *tmp_isinstance_cls_4;
            PyObject *tmp_mvar_value_4;
            CHECK_OBJECT( par_value );
            tmp_isinstance_inst_4 = par_value;
            tmp_mvar_value_4 = GET_STRING_DICT_VALUE( moduledict_plistlib, (Nuitka_StringObject *)const_str_plain_Data );

            if (unlikely( tmp_mvar_value_4 == NULL ))
            {
                tmp_mvar_value_4 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_Data );
            }

            if ( tmp_mvar_value_4 == NULL )
            {

                exception_type = PyExc_NameError;
                Py_INCREF( exception_type );
                exception_value = PyUnicode_FromFormat( "name '%s' is not defined", "Data" );
                exception_tb = NULL;
                NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
                CHAIN_EXCEPTION( exception_value );

                exception_lineno = 770;
                type_description_1 = "ooooooooo";
                goto frame_exception_exit_1;
            }

            tmp_isinstance_cls_4 = tmp_mvar_value_4;
            tmp_res = Nuitka_IsInstance( tmp_isinstance_inst_4, tmp_isinstance_cls_4 );
            if ( tmp_res == -1 )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 770;
                type_description_1 = "ooooooooo";
                goto frame_exception_exit_1;
            }
            tmp_condition_result_7 = ( tmp_res != 0 ) ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
            if ( tmp_condition_result_7 == NUITKA_BOOL_TRUE )
            {
                goto branch_yes_7;
            }
            else
            {
                goto branch_no_7;
            }
            branch_yes_7:;
            {
                PyObject *tmp_ass_subvalue_2;
                PyObject *tmp_ass_subscribed_2;
                PyObject *tmp_source_name_9;
                PyObject *tmp_ass_subscript_2;
                PyObject *tmp_tuple_element_4;
                PyObject *tmp_type_arg_4;
                PyObject *tmp_source_name_10;
                PyObject *tmp_source_name_11;
                CHECK_OBJECT( var_refnum );
                tmp_ass_subvalue_2 = var_refnum;
                CHECK_OBJECT( par_self );
                tmp_source_name_9 = par_self;
                tmp_ass_subscribed_2 = LOOKUP_ATTRIBUTE( tmp_source_name_9, const_str_plain__objtable );
                if ( tmp_ass_subscribed_2 == NULL )
                {
                    assert( ERROR_OCCURRED() );

                    FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                    exception_lineno = 771;
                    type_description_1 = "ooooooooo";
                    goto frame_exception_exit_1;
                }
                CHECK_OBJECT( par_value );
                tmp_source_name_10 = par_value;
                tmp_type_arg_4 = LOOKUP_ATTRIBUTE( tmp_source_name_10, const_str_plain_data );
                if ( tmp_type_arg_4 == NULL )
                {
                    assert( ERROR_OCCURRED() );

                    FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
                    Py_DECREF( tmp_ass_subscribed_2 );

                    exception_lineno = 771;
                    type_description_1 = "ooooooooo";
                    goto frame_exception_exit_1;
                }
                tmp_tuple_element_4 = BUILTIN_TYPE1( tmp_type_arg_4 );
                Py_DECREF( tmp_type_arg_4 );
                if ( tmp_tuple_element_4 == NULL )
                {
                    assert( ERROR_OCCURRED() );

                    FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
                    Py_DECREF( tmp_ass_subscribed_2 );

                    exception_lineno = 771;
                    type_description_1 = "ooooooooo";
                    goto frame_exception_exit_1;
                }
                tmp_ass_subscript_2 = PyTuple_New( 2 );
                PyTuple_SET_ITEM( tmp_ass_subscript_2, 0, tmp_tuple_element_4 );
                CHECK_OBJECT( par_value );
                tmp_source_name_11 = par_value;
                tmp_tuple_element_4 = LOOKUP_ATTRIBUTE( tmp_source_name_11, const_str_plain_data );
                if ( tmp_tuple_element_4 == NULL )
                {
                    assert( ERROR_OCCURRED() );

                    FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
                    Py_DECREF( tmp_ass_subscribed_2 );
                    Py_DECREF( tmp_ass_subscript_2 );

                    exception_lineno = 771;
                    type_description_1 = "ooooooooo";
                    goto frame_exception_exit_1;
                }
                PyTuple_SET_ITEM( tmp_ass_subscript_2, 1, tmp_tuple_element_4 );
                tmp_result = SET_SUBSCRIPT( tmp_ass_subscribed_2, tmp_ass_subscript_2, tmp_ass_subvalue_2 );
                Py_DECREF( tmp_ass_subscribed_2 );
                Py_DECREF( tmp_ass_subscript_2 );
                if ( tmp_result == false )
                {
                    assert( ERROR_OCCURRED() );

                    FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                    exception_lineno = 771;
                    type_description_1 = "ooooooooo";
                    goto frame_exception_exit_1;
                }
            }
            goto branch_end_7;
            branch_no_7:;
            {
                PyObject *tmp_ass_subvalue_3;
                PyObject *tmp_ass_subscribed_3;
                PyObject *tmp_source_name_12;
                PyObject *tmp_ass_subscript_3;
                PyObject *tmp_id_arg_2;
                CHECK_OBJECT( var_refnum );
                tmp_ass_subvalue_3 = var_refnum;
                CHECK_OBJECT( par_self );
                tmp_source_name_12 = par_self;
                tmp_ass_subscribed_3 = LOOKUP_ATTRIBUTE( tmp_source_name_12, const_str_plain__objidtable );
                if ( tmp_ass_subscribed_3 == NULL )
                {
                    assert( ERROR_OCCURRED() );

                    FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                    exception_lineno = 773;
                    type_description_1 = "ooooooooo";
                    goto frame_exception_exit_1;
                }
                CHECK_OBJECT( par_value );
                tmp_id_arg_2 = par_value;
                tmp_ass_subscript_3 = PyLong_FromVoidPtr( tmp_id_arg_2 );
                if ( tmp_ass_subscript_3 == NULL )
                {
                    assert( ERROR_OCCURRED() );

                    FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
                    Py_DECREF( tmp_ass_subscribed_3 );

                    exception_lineno = 773;
                    type_description_1 = "ooooooooo";
                    goto frame_exception_exit_1;
                }
                tmp_result = SET_SUBSCRIPT( tmp_ass_subscribed_3, tmp_ass_subscript_3, tmp_ass_subvalue_3 );
                Py_DECREF( tmp_ass_subscribed_3 );
                Py_DECREF( tmp_ass_subscript_3 );
                if ( tmp_result == false )
                {
                    assert( ERROR_OCCURRED() );

                    FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                    exception_lineno = 773;
                    type_description_1 = "ooooooooo";
                    goto frame_exception_exit_1;
                }
            }
            branch_end_7:;
        }
        branch_end_6:;
    }
    {
        nuitka_bool tmp_condition_result_8;
        PyObject *tmp_isinstance_inst_5;
        PyObject *tmp_isinstance_cls_5;
        CHECK_OBJECT( par_value );
        tmp_isinstance_inst_5 = par_value;
        tmp_isinstance_cls_5 = (PyObject *)&PyDict_Type;
        tmp_res = Nuitka_IsInstance( tmp_isinstance_inst_5, tmp_isinstance_cls_5 );
        if ( tmp_res == -1 )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 776;
            type_description_1 = "ooooooooo";
            goto frame_exception_exit_1;
        }
        tmp_condition_result_8 = ( tmp_res != 0 ) ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
        if ( tmp_condition_result_8 == NUITKA_BOOL_TRUE )
        {
            goto branch_yes_8;
        }
        else
        {
            goto branch_no_8;
        }
        branch_yes_8:;
        {
            PyObject *tmp_assign_source_2;
            tmp_assign_source_2 = PyList_New( 0 );
            assert( var_keys == NULL );
            var_keys = tmp_assign_source_2;
        }
        {
            PyObject *tmp_assign_source_3;
            tmp_assign_source_3 = PyList_New( 0 );
            assert( var_values == NULL );
            var_values = tmp_assign_source_3;
        }
        {
            PyObject *tmp_assign_source_4;
            PyObject *tmp_called_instance_2;
            CHECK_OBJECT( par_value );
            tmp_called_instance_2 = par_value;
            frame_a6aec4ddff54c70832a6d33f1dce40fd->m_frame.f_lineno = 779;
            tmp_assign_source_4 = CALL_METHOD_NO_ARGS( tmp_called_instance_2, const_str_plain_items );
            if ( tmp_assign_source_4 == NULL )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 779;
                type_description_1 = "ooooooooo";
                goto frame_exception_exit_1;
            }
            assert( var_items == NULL );
            var_items = tmp_assign_source_4;
        }
        {
            nuitka_bool tmp_condition_result_9;
            PyObject *tmp_source_name_13;
            PyObject *tmp_attribute_value_1;
            int tmp_truth_name_1;
            CHECK_OBJECT( par_self );
            tmp_source_name_13 = par_self;
            tmp_attribute_value_1 = LOOKUP_ATTRIBUTE( tmp_source_name_13, const_str_plain__sort_keys );
            if ( tmp_attribute_value_1 == NULL )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 780;
                type_description_1 = "ooooooooo";
                goto frame_exception_exit_1;
            }
            tmp_truth_name_1 = CHECK_IF_TRUE( tmp_attribute_value_1 );
            if ( tmp_truth_name_1 == -1 )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
                Py_DECREF( tmp_attribute_value_1 );

                exception_lineno = 780;
                type_description_1 = "ooooooooo";
                goto frame_exception_exit_1;
            }
            tmp_condition_result_9 = tmp_truth_name_1 == 1 ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
            Py_DECREF( tmp_attribute_value_1 );
            if ( tmp_condition_result_9 == NUITKA_BOOL_TRUE )
            {
                goto branch_yes_9;
            }
            else
            {
                goto branch_no_9;
            }
            branch_yes_9:;
            {
                PyObject *tmp_assign_source_5;
                PyObject *tmp_called_name_1;
                PyObject *tmp_args_element_name_2;
                tmp_called_name_1 = LOOKUP_BUILTIN( const_str_plain_sorted );
                assert( tmp_called_name_1 != NULL );
                CHECK_OBJECT( var_items );
                tmp_args_element_name_2 = var_items;
                frame_a6aec4ddff54c70832a6d33f1dce40fd->m_frame.f_lineno = 781;
                {
                    PyObject *call_args[] = { tmp_args_element_name_2 };
                    tmp_assign_source_5 = CALL_FUNCTION_WITH_ARGS1( tmp_called_name_1, call_args );
                }

                if ( tmp_assign_source_5 == NULL )
                {
                    assert( ERROR_OCCURRED() );

                    FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                    exception_lineno = 781;
                    type_description_1 = "ooooooooo";
                    goto frame_exception_exit_1;
                }
                {
                    PyObject *old = var_items;
                    assert( old != NULL );
                    var_items = tmp_assign_source_5;
                    Py_DECREF( old );
                }

            }
            branch_no_9:;
        }
        {
            PyObject *tmp_assign_source_6;
            PyObject *tmp_iter_arg_1;
            CHECK_OBJECT( var_items );
            tmp_iter_arg_1 = var_items;
            tmp_assign_source_6 = MAKE_ITERATOR( tmp_iter_arg_1 );
            if ( tmp_assign_source_6 == NULL )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 783;
                type_description_1 = "ooooooooo";
                goto frame_exception_exit_1;
            }
            assert( tmp_for_loop_1__for_iterator == NULL );
            tmp_for_loop_1__for_iterator = tmp_assign_source_6;
        }
        // Tried code:
        loop_start_1:;
        {
            PyObject *tmp_next_source_1;
            PyObject *tmp_assign_source_7;
            CHECK_OBJECT( tmp_for_loop_1__for_iterator );
            tmp_next_source_1 = tmp_for_loop_1__for_iterator;
            tmp_assign_source_7 = ITERATOR_NEXT( tmp_next_source_1 );
            if ( tmp_assign_source_7 == NULL )
            {
                if ( CHECK_AND_CLEAR_STOP_ITERATION_OCCURRED() )
                {

                    goto loop_end_1;
                }
                else
                {

                    FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
                    type_description_1 = "ooooooooo";
                    exception_lineno = 783;
                    goto try_except_handler_2;
                }
            }

            {
                PyObject *old = tmp_for_loop_1__iter_value;
                tmp_for_loop_1__iter_value = tmp_assign_source_7;
                Py_XDECREF( old );
            }

        }
        // Tried code:
        {
            PyObject *tmp_assign_source_8;
            PyObject *tmp_iter_arg_2;
            CHECK_OBJECT( tmp_for_loop_1__iter_value );
            tmp_iter_arg_2 = tmp_for_loop_1__iter_value;
            tmp_assign_source_8 = MAKE_UNPACK_ITERATOR( tmp_iter_arg_2 );
            if ( tmp_assign_source_8 == NULL )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 783;
                type_description_1 = "ooooooooo";
                goto try_except_handler_3;
            }
            {
                PyObject *old = tmp_tuple_unpack_1__source_iter;
                tmp_tuple_unpack_1__source_iter = tmp_assign_source_8;
                Py_XDECREF( old );
            }

        }
        // Tried code:
        {
            PyObject *tmp_assign_source_9;
            PyObject *tmp_unpack_1;
            CHECK_OBJECT( tmp_tuple_unpack_1__source_iter );
            tmp_unpack_1 = tmp_tuple_unpack_1__source_iter;
            tmp_assign_source_9 = UNPACK_NEXT( tmp_unpack_1, 0, 2 );
            if ( tmp_assign_source_9 == NULL )
            {
                if ( !ERROR_OCCURRED() )
                {
                    exception_type = PyExc_StopIteration;
                    Py_INCREF( exception_type );
                    exception_value = NULL;
                    exception_tb = NULL;
                }
                else
                {
                    FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
                }


                type_description_1 = "ooooooooo";
                exception_lineno = 783;
                goto try_except_handler_4;
            }
            {
                PyObject *old = tmp_tuple_unpack_1__element_1;
                tmp_tuple_unpack_1__element_1 = tmp_assign_source_9;
                Py_XDECREF( old );
            }

        }
        {
            PyObject *tmp_assign_source_10;
            PyObject *tmp_unpack_2;
            CHECK_OBJECT( tmp_tuple_unpack_1__source_iter );
            tmp_unpack_2 = tmp_tuple_unpack_1__source_iter;
            tmp_assign_source_10 = UNPACK_NEXT( tmp_unpack_2, 1, 2 );
            if ( tmp_assign_source_10 == NULL )
            {
                if ( !ERROR_OCCURRED() )
                {
                    exception_type = PyExc_StopIteration;
                    Py_INCREF( exception_type );
                    exception_value = NULL;
                    exception_tb = NULL;
                }
                else
                {
                    FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
                }


                type_description_1 = "ooooooooo";
                exception_lineno = 783;
                goto try_except_handler_4;
            }
            {
                PyObject *old = tmp_tuple_unpack_1__element_2;
                tmp_tuple_unpack_1__element_2 = tmp_assign_source_10;
                Py_XDECREF( old );
            }

        }
        {
            PyObject *tmp_iterator_name_1;
            CHECK_OBJECT( tmp_tuple_unpack_1__source_iter );
            tmp_iterator_name_1 = tmp_tuple_unpack_1__source_iter;
            // Check if iterator has left-over elements.
            CHECK_OBJECT( tmp_iterator_name_1 ); assert( HAS_ITERNEXT( tmp_iterator_name_1 ) );

            tmp_iterator_attempt = (*Py_TYPE( tmp_iterator_name_1 )->tp_iternext)( tmp_iterator_name_1 );

            if (likely( tmp_iterator_attempt == NULL ))
            {
                PyObject *error = GET_ERROR_OCCURRED();

                if ( error != NULL )
                {
                    if ( EXCEPTION_MATCH_BOOL_SINGLE( error, PyExc_StopIteration ))
                    {
                        CLEAR_ERROR_OCCURRED();
                    }
                    else
                    {
                        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );

                        type_description_1 = "ooooooooo";
                        exception_lineno = 783;
                        goto try_except_handler_4;
                    }
                }
            }
            else
            {
                Py_DECREF( tmp_iterator_attempt );

                // TODO: Could avoid PyErr_Format.
#if PYTHON_VERSION < 300
                PyErr_Format( PyExc_ValueError, "too many values to unpack" );
#else
                PyErr_Format( PyExc_ValueError, "too many values to unpack (expected 2)" );
#endif
                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );

                type_description_1 = "ooooooooo";
                exception_lineno = 783;
                goto try_except_handler_4;
            }
        }
        goto try_end_1;
        // Exception handler code:
        try_except_handler_4:;
        exception_keeper_type_1 = exception_type;
        exception_keeper_value_1 = exception_value;
        exception_keeper_tb_1 = exception_tb;
        exception_keeper_lineno_1 = exception_lineno;
        exception_type = NULL;
        exception_value = NULL;
        exception_tb = NULL;
        exception_lineno = 0;

        CHECK_OBJECT( (PyObject *)tmp_tuple_unpack_1__source_iter );
        Py_DECREF( tmp_tuple_unpack_1__source_iter );
        tmp_tuple_unpack_1__source_iter = NULL;

        // Re-raise.
        exception_type = exception_keeper_type_1;
        exception_value = exception_keeper_value_1;
        exception_tb = exception_keeper_tb_1;
        exception_lineno = exception_keeper_lineno_1;

        goto try_except_handler_3;
        // End of try:
        try_end_1:;
        goto try_end_2;
        // Exception handler code:
        try_except_handler_3:;
        exception_keeper_type_2 = exception_type;
        exception_keeper_value_2 = exception_value;
        exception_keeper_tb_2 = exception_tb;
        exception_keeper_lineno_2 = exception_lineno;
        exception_type = NULL;
        exception_value = NULL;
        exception_tb = NULL;
        exception_lineno = 0;

        Py_XDECREF( tmp_tuple_unpack_1__element_1 );
        tmp_tuple_unpack_1__element_1 = NULL;

        Py_XDECREF( tmp_tuple_unpack_1__element_2 );
        tmp_tuple_unpack_1__element_2 = NULL;

        // Re-raise.
        exception_type = exception_keeper_type_2;
        exception_value = exception_keeper_value_2;
        exception_tb = exception_keeper_tb_2;
        exception_lineno = exception_keeper_lineno_2;

        goto try_except_handler_2;
        // End of try:
        try_end_2:;
        CHECK_OBJECT( (PyObject *)tmp_tuple_unpack_1__source_iter );
        Py_DECREF( tmp_tuple_unpack_1__source_iter );
        tmp_tuple_unpack_1__source_iter = NULL;

        {
            PyObject *tmp_assign_source_11;
            CHECK_OBJECT( tmp_tuple_unpack_1__element_1 );
            tmp_assign_source_11 = tmp_tuple_unpack_1__element_1;
            {
                PyObject *old = var_k;
                var_k = tmp_assign_source_11;
                Py_INCREF( var_k );
                Py_XDECREF( old );
            }

        }
        Py_XDECREF( tmp_tuple_unpack_1__element_1 );
        tmp_tuple_unpack_1__element_1 = NULL;

        {
            PyObject *tmp_assign_source_12;
            CHECK_OBJECT( tmp_tuple_unpack_1__element_2 );
            tmp_assign_source_12 = tmp_tuple_unpack_1__element_2;
            {
                PyObject *old = var_v;
                var_v = tmp_assign_source_12;
                Py_INCREF( var_v );
                Py_XDECREF( old );
            }

        }
        Py_XDECREF( tmp_tuple_unpack_1__element_2 );
        tmp_tuple_unpack_1__element_2 = NULL;

        {
            nuitka_bool tmp_condition_result_10;
            PyObject *tmp_operand_name_1;
            PyObject *tmp_isinstance_inst_6;
            PyObject *tmp_isinstance_cls_6;
            CHECK_OBJECT( var_k );
            tmp_isinstance_inst_6 = var_k;
            tmp_isinstance_cls_6 = (PyObject *)&PyUnicode_Type;
            tmp_res = Nuitka_IsInstance( tmp_isinstance_inst_6, tmp_isinstance_cls_6 );
            if ( tmp_res == -1 )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 784;
                type_description_1 = "ooooooooo";
                goto try_except_handler_2;
            }
            tmp_operand_name_1 = ( tmp_res != 0 ) ? Py_True : Py_False;
            tmp_res = CHECK_IF_TRUE( tmp_operand_name_1 );
            if ( tmp_res == -1 )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 784;
                type_description_1 = "ooooooooo";
                goto try_except_handler_2;
            }
            tmp_condition_result_10 = ( tmp_res == 0 ) ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
            if ( tmp_condition_result_10 == NUITKA_BOOL_TRUE )
            {
                goto branch_yes_10;
            }
            else
            {
                goto branch_no_10;
            }
            branch_yes_10:;
            {
                nuitka_bool tmp_condition_result_11;
                PyObject *tmp_source_name_14;
                PyObject *tmp_attribute_value_2;
                int tmp_truth_name_2;
                CHECK_OBJECT( par_self );
                tmp_source_name_14 = par_self;
                tmp_attribute_value_2 = LOOKUP_ATTRIBUTE( tmp_source_name_14, const_str_plain__skipkeys );
                if ( tmp_attribute_value_2 == NULL )
                {
                    assert( ERROR_OCCURRED() );

                    FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                    exception_lineno = 785;
                    type_description_1 = "ooooooooo";
                    goto try_except_handler_2;
                }
                tmp_truth_name_2 = CHECK_IF_TRUE( tmp_attribute_value_2 );
                if ( tmp_truth_name_2 == -1 )
                {
                    assert( ERROR_OCCURRED() );

                    FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
                    Py_DECREF( tmp_attribute_value_2 );

                    exception_lineno = 785;
                    type_description_1 = "ooooooooo";
                    goto try_except_handler_2;
                }
                tmp_condition_result_11 = tmp_truth_name_2 == 1 ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
                Py_DECREF( tmp_attribute_value_2 );
                if ( tmp_condition_result_11 == NUITKA_BOOL_TRUE )
                {
                    goto branch_yes_11;
                }
                else
                {
                    goto branch_no_11;
                }
                branch_yes_11:;
                goto loop_start_1;
                branch_no_11:;
            }
            {
                PyObject *tmp_raise_type_1;
                PyObject *tmp_make_exception_arg_1;
                tmp_make_exception_arg_1 = const_str_digest_e3c3d78d4d66a632c6ad68dc0fb31d57;
                frame_a6aec4ddff54c70832a6d33f1dce40fd->m_frame.f_lineno = 787;
                {
                    PyObject *call_args[] = { tmp_make_exception_arg_1 };
                    tmp_raise_type_1 = CALL_FUNCTION_WITH_ARGS1( PyExc_TypeError, call_args );
                }

                assert( !(tmp_raise_type_1 == NULL) );
                exception_type = tmp_raise_type_1;
                exception_lineno = 787;
                RAISE_EXCEPTION_WITH_TYPE( &exception_type, &exception_value, &exception_tb );
                type_description_1 = "ooooooooo";
                goto try_except_handler_2;
            }
            branch_no_10:;
        }
        {
            PyObject *tmp_called_instance_3;
            PyObject *tmp_call_result_2;
            PyObject *tmp_args_element_name_3;
            CHECK_OBJECT( var_keys );
            tmp_called_instance_3 = var_keys;
            CHECK_OBJECT( var_k );
            tmp_args_element_name_3 = var_k;
            frame_a6aec4ddff54c70832a6d33f1dce40fd->m_frame.f_lineno = 788;
            {
                PyObject *call_args[] = { tmp_args_element_name_3 };
                tmp_call_result_2 = CALL_METHOD_WITH_ARGS1( tmp_called_instance_3, const_str_plain_append, call_args );
            }

            if ( tmp_call_result_2 == NULL )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 788;
                type_description_1 = "ooooooooo";
                goto try_except_handler_2;
            }
            Py_DECREF( tmp_call_result_2 );
        }
        {
            PyObject *tmp_called_instance_4;
            PyObject *tmp_call_result_3;
            PyObject *tmp_args_element_name_4;
            CHECK_OBJECT( var_values );
            tmp_called_instance_4 = var_values;
            CHECK_OBJECT( var_v );
            tmp_args_element_name_4 = var_v;
            frame_a6aec4ddff54c70832a6d33f1dce40fd->m_frame.f_lineno = 789;
            {
                PyObject *call_args[] = { tmp_args_element_name_4 };
                tmp_call_result_3 = CALL_METHOD_WITH_ARGS1( tmp_called_instance_4, const_str_plain_append, call_args );
            }

            if ( tmp_call_result_3 == NULL )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 789;
                type_description_1 = "ooooooooo";
                goto try_except_handler_2;
            }
            Py_DECREF( tmp_call_result_3 );
        }
        if ( CONSIDER_THREADING() == false )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 783;
            type_description_1 = "ooooooooo";
            goto try_except_handler_2;
        }
        goto loop_start_1;
        loop_end_1:;
        goto try_end_3;
        // Exception handler code:
        try_except_handler_2:;
        exception_keeper_type_3 = exception_type;
        exception_keeper_value_3 = exception_value;
        exception_keeper_tb_3 = exception_tb;
        exception_keeper_lineno_3 = exception_lineno;
        exception_type = NULL;
        exception_value = NULL;
        exception_tb = NULL;
        exception_lineno = 0;

        Py_XDECREF( tmp_for_loop_1__iter_value );
        tmp_for_loop_1__iter_value = NULL;

        CHECK_OBJECT( (PyObject *)tmp_for_loop_1__for_iterator );
        Py_DECREF( tmp_for_loop_1__for_iterator );
        tmp_for_loop_1__for_iterator = NULL;

        // Re-raise.
        exception_type = exception_keeper_type_3;
        exception_value = exception_keeper_value_3;
        exception_tb = exception_keeper_tb_3;
        exception_lineno = exception_keeper_lineno_3;

        goto frame_exception_exit_1;
        // End of try:
        try_end_3:;
        Py_XDECREF( tmp_for_loop_1__iter_value );
        tmp_for_loop_1__iter_value = NULL;

        CHECK_OBJECT( (PyObject *)tmp_for_loop_1__for_iterator );
        Py_DECREF( tmp_for_loop_1__for_iterator );
        tmp_for_loop_1__for_iterator = NULL;

        {
            PyObject *tmp_assign_source_13;
            PyObject *tmp_iter_arg_3;
            PyObject *tmp_called_instance_5;
            PyObject *tmp_mvar_value_5;
            PyObject *tmp_args_element_name_5;
            PyObject *tmp_args_element_name_6;
            tmp_mvar_value_5 = GET_STRING_DICT_VALUE( moduledict_plistlib, (Nuitka_StringObject *)const_str_plain_itertools );

            if (unlikely( tmp_mvar_value_5 == NULL ))
            {
                tmp_mvar_value_5 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_itertools );
            }

            if ( tmp_mvar_value_5 == NULL )
            {

                exception_type = PyExc_NameError;
                Py_INCREF( exception_type );
                exception_value = PyUnicode_FromFormat( "name '%s' is not defined", "itertools" );
                exception_tb = NULL;
                NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
                CHAIN_EXCEPTION( exception_value );

                exception_lineno = 791;
                type_description_1 = "ooooooooo";
                goto frame_exception_exit_1;
            }

            tmp_called_instance_5 = tmp_mvar_value_5;
            CHECK_OBJECT( var_keys );
            tmp_args_element_name_5 = var_keys;
            CHECK_OBJECT( var_values );
            tmp_args_element_name_6 = var_values;
            frame_a6aec4ddff54c70832a6d33f1dce40fd->m_frame.f_lineno = 791;
            {
                PyObject *call_args[] = { tmp_args_element_name_5, tmp_args_element_name_6 };
                tmp_iter_arg_3 = CALL_METHOD_WITH_ARGS2( tmp_called_instance_5, const_str_plain_chain, call_args );
            }

            if ( tmp_iter_arg_3 == NULL )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 791;
                type_description_1 = "ooooooooo";
                goto frame_exception_exit_1;
            }
            tmp_assign_source_13 = MAKE_ITERATOR( tmp_iter_arg_3 );
            Py_DECREF( tmp_iter_arg_3 );
            if ( tmp_assign_source_13 == NULL )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 791;
                type_description_1 = "ooooooooo";
                goto frame_exception_exit_1;
            }
            assert( tmp_for_loop_2__for_iterator == NULL );
            tmp_for_loop_2__for_iterator = tmp_assign_source_13;
        }
        // Tried code:
        loop_start_2:;
        {
            PyObject *tmp_next_source_2;
            PyObject *tmp_assign_source_14;
            CHECK_OBJECT( tmp_for_loop_2__for_iterator );
            tmp_next_source_2 = tmp_for_loop_2__for_iterator;
            tmp_assign_source_14 = ITERATOR_NEXT( tmp_next_source_2 );
            if ( tmp_assign_source_14 == NULL )
            {
                if ( CHECK_AND_CLEAR_STOP_ITERATION_OCCURRED() )
                {

                    goto loop_end_2;
                }
                else
                {

                    FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
                    type_description_1 = "ooooooooo";
                    exception_lineno = 791;
                    goto try_except_handler_5;
                }
            }

            {
                PyObject *old = tmp_for_loop_2__iter_value;
                tmp_for_loop_2__iter_value = tmp_assign_source_14;
                Py_XDECREF( old );
            }

        }
        {
            PyObject *tmp_assign_source_15;
            CHECK_OBJECT( tmp_for_loop_2__iter_value );
            tmp_assign_source_15 = tmp_for_loop_2__iter_value;
            {
                PyObject *old = var_o;
                var_o = tmp_assign_source_15;
                Py_INCREF( var_o );
                Py_XDECREF( old );
            }

        }
        {
            PyObject *tmp_called_instance_6;
            PyObject *tmp_call_result_4;
            PyObject *tmp_args_element_name_7;
            CHECK_OBJECT( par_self );
            tmp_called_instance_6 = par_self;
            CHECK_OBJECT( var_o );
            tmp_args_element_name_7 = var_o;
            frame_a6aec4ddff54c70832a6d33f1dce40fd->m_frame.f_lineno = 792;
            {
                PyObject *call_args[] = { tmp_args_element_name_7 };
                tmp_call_result_4 = CALL_METHOD_WITH_ARGS1( tmp_called_instance_6, const_str_plain__flatten, call_args );
            }

            if ( tmp_call_result_4 == NULL )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 792;
                type_description_1 = "ooooooooo";
                goto try_except_handler_5;
            }
            Py_DECREF( tmp_call_result_4 );
        }
        if ( CONSIDER_THREADING() == false )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 791;
            type_description_1 = "ooooooooo";
            goto try_except_handler_5;
        }
        goto loop_start_2;
        loop_end_2:;
        goto try_end_4;
        // Exception handler code:
        try_except_handler_5:;
        exception_keeper_type_4 = exception_type;
        exception_keeper_value_4 = exception_value;
        exception_keeper_tb_4 = exception_tb;
        exception_keeper_lineno_4 = exception_lineno;
        exception_type = NULL;
        exception_value = NULL;
        exception_tb = NULL;
        exception_lineno = 0;

        Py_XDECREF( tmp_for_loop_2__iter_value );
        tmp_for_loop_2__iter_value = NULL;

        CHECK_OBJECT( (PyObject *)tmp_for_loop_2__for_iterator );
        Py_DECREF( tmp_for_loop_2__for_iterator );
        tmp_for_loop_2__for_iterator = NULL;

        // Re-raise.
        exception_type = exception_keeper_type_4;
        exception_value = exception_keeper_value_4;
        exception_tb = exception_keeper_tb_4;
        exception_lineno = exception_keeper_lineno_4;

        goto frame_exception_exit_1;
        // End of try:
        try_end_4:;
        Py_XDECREF( tmp_for_loop_2__iter_value );
        tmp_for_loop_2__iter_value = NULL;

        CHECK_OBJECT( (PyObject *)tmp_for_loop_2__for_iterator );
        Py_DECREF( tmp_for_loop_2__for_iterator );
        tmp_for_loop_2__for_iterator = NULL;

        goto branch_end_8;
        branch_no_8:;
        {
            nuitka_bool tmp_condition_result_12;
            PyObject *tmp_isinstance_inst_7;
            PyObject *tmp_isinstance_cls_7;
            CHECK_OBJECT( par_value );
            tmp_isinstance_inst_7 = par_value;
            tmp_isinstance_cls_7 = const_tuple_type_list_type_tuple_tuple;
            tmp_res = Nuitka_IsInstance( tmp_isinstance_inst_7, tmp_isinstance_cls_7 );
            if ( tmp_res == -1 )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 794;
                type_description_1 = "ooooooooo";
                goto frame_exception_exit_1;
            }
            tmp_condition_result_12 = ( tmp_res != 0 ) ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
            if ( tmp_condition_result_12 == NUITKA_BOOL_TRUE )
            {
                goto branch_yes_12;
            }
            else
            {
                goto branch_no_12;
            }
            branch_yes_12:;
            {
                PyObject *tmp_assign_source_16;
                PyObject *tmp_iter_arg_4;
                CHECK_OBJECT( par_value );
                tmp_iter_arg_4 = par_value;
                tmp_assign_source_16 = MAKE_ITERATOR( tmp_iter_arg_4 );
                if ( tmp_assign_source_16 == NULL )
                {
                    assert( ERROR_OCCURRED() );

                    FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                    exception_lineno = 795;
                    type_description_1 = "ooooooooo";
                    goto frame_exception_exit_1;
                }
                assert( tmp_for_loop_3__for_iterator == NULL );
                tmp_for_loop_3__for_iterator = tmp_assign_source_16;
            }
            // Tried code:
            loop_start_3:;
            {
                PyObject *tmp_next_source_3;
                PyObject *tmp_assign_source_17;
                CHECK_OBJECT( tmp_for_loop_3__for_iterator );
                tmp_next_source_3 = tmp_for_loop_3__for_iterator;
                tmp_assign_source_17 = ITERATOR_NEXT( tmp_next_source_3 );
                if ( tmp_assign_source_17 == NULL )
                {
                    if ( CHECK_AND_CLEAR_STOP_ITERATION_OCCURRED() )
                    {

                        goto loop_end_3;
                    }
                    else
                    {

                        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
                        type_description_1 = "ooooooooo";
                        exception_lineno = 795;
                        goto try_except_handler_6;
                    }
                }

                {
                    PyObject *old = tmp_for_loop_3__iter_value;
                    tmp_for_loop_3__iter_value = tmp_assign_source_17;
                    Py_XDECREF( old );
                }

            }
            {
                PyObject *tmp_assign_source_18;
                CHECK_OBJECT( tmp_for_loop_3__iter_value );
                tmp_assign_source_18 = tmp_for_loop_3__iter_value;
                {
                    PyObject *old = var_o;
                    var_o = tmp_assign_source_18;
                    Py_INCREF( var_o );
                    Py_XDECREF( old );
                }

            }
            {
                PyObject *tmp_called_instance_7;
                PyObject *tmp_call_result_5;
                PyObject *tmp_args_element_name_8;
                CHECK_OBJECT( par_self );
                tmp_called_instance_7 = par_self;
                CHECK_OBJECT( var_o );
                tmp_args_element_name_8 = var_o;
                frame_a6aec4ddff54c70832a6d33f1dce40fd->m_frame.f_lineno = 796;
                {
                    PyObject *call_args[] = { tmp_args_element_name_8 };
                    tmp_call_result_5 = CALL_METHOD_WITH_ARGS1( tmp_called_instance_7, const_str_plain__flatten, call_args );
                }

                if ( tmp_call_result_5 == NULL )
                {
                    assert( ERROR_OCCURRED() );

                    FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                    exception_lineno = 796;
                    type_description_1 = "ooooooooo";
                    goto try_except_handler_6;
                }
                Py_DECREF( tmp_call_result_5 );
            }
            if ( CONSIDER_THREADING() == false )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 795;
                type_description_1 = "ooooooooo";
                goto try_except_handler_6;
            }
            goto loop_start_3;
            loop_end_3:;
            goto try_end_5;
            // Exception handler code:
            try_except_handler_6:;
            exception_keeper_type_5 = exception_type;
            exception_keeper_value_5 = exception_value;
            exception_keeper_tb_5 = exception_tb;
            exception_keeper_lineno_5 = exception_lineno;
            exception_type = NULL;
            exception_value = NULL;
            exception_tb = NULL;
            exception_lineno = 0;

            Py_XDECREF( tmp_for_loop_3__iter_value );
            tmp_for_loop_3__iter_value = NULL;

            CHECK_OBJECT( (PyObject *)tmp_for_loop_3__for_iterator );
            Py_DECREF( tmp_for_loop_3__for_iterator );
            tmp_for_loop_3__for_iterator = NULL;

            // Re-raise.
            exception_type = exception_keeper_type_5;
            exception_value = exception_keeper_value_5;
            exception_tb = exception_keeper_tb_5;
            exception_lineno = exception_keeper_lineno_5;

            goto frame_exception_exit_1;
            // End of try:
            try_end_5:;
            Py_XDECREF( tmp_for_loop_3__iter_value );
            tmp_for_loop_3__iter_value = NULL;

            CHECK_OBJECT( (PyObject *)tmp_for_loop_3__for_iterator );
            Py_DECREF( tmp_for_loop_3__for_iterator );
            tmp_for_loop_3__for_iterator = NULL;

            branch_no_12:;
        }
        branch_end_8:;
    }

#if 0
    RESTORE_FRAME_EXCEPTION( frame_a6aec4ddff54c70832a6d33f1dce40fd );
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto frame_no_exception_1;

    frame_return_exit_1:;
#if 0
    RESTORE_FRAME_EXCEPTION( frame_a6aec4ddff54c70832a6d33f1dce40fd );
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto try_return_handler_1;

    frame_exception_exit_1:;

#if 0
    RESTORE_FRAME_EXCEPTION( frame_a6aec4ddff54c70832a6d33f1dce40fd );
#endif

    if ( exception_tb == NULL )
    {
        exception_tb = MAKE_TRACEBACK( frame_a6aec4ddff54c70832a6d33f1dce40fd, exception_lineno );
    }
    else if ( exception_tb->tb_frame != &frame_a6aec4ddff54c70832a6d33f1dce40fd->m_frame )
    {
        exception_tb = ADD_TRACEBACK( exception_tb, frame_a6aec4ddff54c70832a6d33f1dce40fd, exception_lineno );
    }

    // Attachs locals to frame if any.
    Nuitka_Frame_AttachLocals(
        (struct Nuitka_FrameObject *)frame_a6aec4ddff54c70832a6d33f1dce40fd,
        type_description_1,
        par_self,
        par_value,
        var_refnum,
        var_keys,
        var_values,
        var_items,
        var_k,
        var_v,
        var_o
    );


    // Release cached frame.
    if ( frame_a6aec4ddff54c70832a6d33f1dce40fd == cache_frame_a6aec4ddff54c70832a6d33f1dce40fd )
    {
        Py_DECREF( frame_a6aec4ddff54c70832a6d33f1dce40fd );
    }
    cache_frame_a6aec4ddff54c70832a6d33f1dce40fd = NULL;

    assertFrameObject( frame_a6aec4ddff54c70832a6d33f1dce40fd );

    // Put the previous frame back on top.
    popFrameStack();

    // Return the error.
    goto try_except_handler_1;

    frame_no_exception_1:;
    tmp_return_value = Py_None;
    Py_INCREF( tmp_return_value );
    goto try_return_handler_1;
    // tried codes exits in all cases
    NUITKA_CANNOT_GET_HERE( plistlib$$$function_58__flatten );
    return NULL;
    // Return handler code:
    try_return_handler_1:;
    CHECK_OBJECT( (PyObject *)par_self );
    Py_DECREF( par_self );
    par_self = NULL;

    CHECK_OBJECT( (PyObject *)par_value );
    Py_DECREF( par_value );
    par_value = NULL;

    Py_XDECREF( var_refnum );
    var_refnum = NULL;

    Py_XDECREF( var_keys );
    var_keys = NULL;

    Py_XDECREF( var_values );
    var_values = NULL;

    Py_XDECREF( var_items );
    var_items = NULL;

    Py_XDECREF( var_k );
    var_k = NULL;

    Py_XDECREF( var_v );
    var_v = NULL;

    Py_XDECREF( var_o );
    var_o = NULL;

    goto function_return_exit;
    // Exception handler code:
    try_except_handler_1:;
    exception_keeper_type_6 = exception_type;
    exception_keeper_value_6 = exception_value;
    exception_keeper_tb_6 = exception_tb;
    exception_keeper_lineno_6 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    CHECK_OBJECT( (PyObject *)par_self );
    Py_DECREF( par_self );
    par_self = NULL;

    CHECK_OBJECT( (PyObject *)par_value );
    Py_DECREF( par_value );
    par_value = NULL;

    Py_XDECREF( var_refnum );
    var_refnum = NULL;

    Py_XDECREF( var_keys );
    var_keys = NULL;

    Py_XDECREF( var_values );
    var_values = NULL;

    Py_XDECREF( var_items );
    var_items = NULL;

    Py_XDECREF( var_k );
    var_k = NULL;

    Py_XDECREF( var_v );
    var_v = NULL;

    Py_XDECREF( var_o );
    var_o = NULL;

    // Re-raise.
    exception_type = exception_keeper_type_6;
    exception_value = exception_keeper_value_6;
    exception_tb = exception_keeper_tb_6;
    exception_lineno = exception_keeper_lineno_6;

    goto function_exception_exit;
    // End of try:

    // Return statement must have exited already.
    NUITKA_CANNOT_GET_HERE( plistlib$$$function_58__flatten );
    return NULL;

function_exception_exit:
    assert( exception_type );
    RESTORE_ERROR_OCCURRED( exception_type, exception_value, exception_tb );

    return NULL;

function_return_exit:
   // Function cleanup code if any.


   // Actual function exit with return value, making sure we did not make
   // the error status worse despite non-NULL return.
   CHECK_OBJECT( tmp_return_value );
   assert( had_error || !ERROR_OCCURRED() );
   return tmp_return_value;
}


static PyObject *impl_plistlib$$$function_59__getrefnum( struct Nuitka_FunctionObject const *self, PyObject **python_pars )
{
    // Preserve error status for checks
#ifndef __NUITKA_NO_ASSERT__
    NUITKA_MAY_BE_UNUSED bool had_error = ERROR_OCCURRED();
#endif

    // Local variable declarations.
    PyObject *par_self = python_pars[ 0 ];
    PyObject *par_value = python_pars[ 1 ];
    struct Nuitka_FrameObject *frame_fb43eab1ae27c6acb6e7038c52d00258;
    NUITKA_MAY_BE_UNUSED char const *type_description_1 = NULL;
    PyObject *exception_type = NULL;
    PyObject *exception_value = NULL;
    PyTracebackObject *exception_tb = NULL;
    NUITKA_MAY_BE_UNUSED int exception_lineno = 0;
    int tmp_res;
    PyObject *tmp_return_value = NULL;
    static struct Nuitka_FrameObject *cache_frame_fb43eab1ae27c6acb6e7038c52d00258 = NULL;
    PyObject *exception_keeper_type_1;
    PyObject *exception_keeper_value_1;
    PyTracebackObject *exception_keeper_tb_1;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_1;

    // Actual function body.
    // Tried code:
    MAKE_OR_REUSE_FRAME( cache_frame_fb43eab1ae27c6acb6e7038c52d00258, codeobj_fb43eab1ae27c6acb6e7038c52d00258, module_plistlib, sizeof(void *)+sizeof(void *) );
    frame_fb43eab1ae27c6acb6e7038c52d00258 = cache_frame_fb43eab1ae27c6acb6e7038c52d00258;

    // Push the new frame as the currently active one.
    pushFrameStack( frame_fb43eab1ae27c6acb6e7038c52d00258 );

    // Mark the frame object as in use, ref count 1 will be up for reuse.
    assert( Py_REFCNT( frame_fb43eab1ae27c6acb6e7038c52d00258 ) == 2 ); // Frame stack

    // Framed code:
    {
        nuitka_bool tmp_condition_result_1;
        PyObject *tmp_isinstance_inst_1;
        PyObject *tmp_isinstance_cls_1;
        PyObject *tmp_mvar_value_1;
        CHECK_OBJECT( par_value );
        tmp_isinstance_inst_1 = par_value;
        tmp_mvar_value_1 = GET_STRING_DICT_VALUE( moduledict_plistlib, (Nuitka_StringObject *)const_str_plain__scalars );

        if (unlikely( tmp_mvar_value_1 == NULL ))
        {
            tmp_mvar_value_1 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain__scalars );
        }

        if ( tmp_mvar_value_1 == NULL )
        {

            exception_type = PyExc_NameError;
            Py_INCREF( exception_type );
            exception_value = PyUnicode_FromFormat( "name '%s' is not defined", "_scalars" );
            exception_tb = NULL;
            NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
            CHAIN_EXCEPTION( exception_value );

            exception_lineno = 799;
            type_description_1 = "oo";
            goto frame_exception_exit_1;
        }

        tmp_isinstance_cls_1 = tmp_mvar_value_1;
        tmp_res = Nuitka_IsInstance( tmp_isinstance_inst_1, tmp_isinstance_cls_1 );
        if ( tmp_res == -1 )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 799;
            type_description_1 = "oo";
            goto frame_exception_exit_1;
        }
        tmp_condition_result_1 = ( tmp_res != 0 ) ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
        if ( tmp_condition_result_1 == NUITKA_BOOL_TRUE )
        {
            goto branch_yes_1;
        }
        else
        {
            goto branch_no_1;
        }
        branch_yes_1:;
        {
            PyObject *tmp_subscribed_name_1;
            PyObject *tmp_source_name_1;
            PyObject *tmp_subscript_name_1;
            PyObject *tmp_tuple_element_1;
            PyObject *tmp_type_arg_1;
            CHECK_OBJECT( par_self );
            tmp_source_name_1 = par_self;
            tmp_subscribed_name_1 = LOOKUP_ATTRIBUTE( tmp_source_name_1, const_str_plain__objtable );
            if ( tmp_subscribed_name_1 == NULL )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 800;
                type_description_1 = "oo";
                goto frame_exception_exit_1;
            }
            CHECK_OBJECT( par_value );
            tmp_type_arg_1 = par_value;
            tmp_tuple_element_1 = BUILTIN_TYPE1( tmp_type_arg_1 );
            assert( !(tmp_tuple_element_1 == NULL) );
            tmp_subscript_name_1 = PyTuple_New( 2 );
            PyTuple_SET_ITEM( tmp_subscript_name_1, 0, tmp_tuple_element_1 );
            CHECK_OBJECT( par_value );
            tmp_tuple_element_1 = par_value;
            Py_INCREF( tmp_tuple_element_1 );
            PyTuple_SET_ITEM( tmp_subscript_name_1, 1, tmp_tuple_element_1 );
            tmp_return_value = LOOKUP_SUBSCRIPT( tmp_subscribed_name_1, tmp_subscript_name_1 );
            Py_DECREF( tmp_subscribed_name_1 );
            Py_DECREF( tmp_subscript_name_1 );
            if ( tmp_return_value == NULL )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 800;
                type_description_1 = "oo";
                goto frame_exception_exit_1;
            }
            goto frame_return_exit_1;
        }
        goto branch_end_1;
        branch_no_1:;
        {
            nuitka_bool tmp_condition_result_2;
            PyObject *tmp_isinstance_inst_2;
            PyObject *tmp_isinstance_cls_2;
            PyObject *tmp_mvar_value_2;
            CHECK_OBJECT( par_value );
            tmp_isinstance_inst_2 = par_value;
            tmp_mvar_value_2 = GET_STRING_DICT_VALUE( moduledict_plistlib, (Nuitka_StringObject *)const_str_plain_Data );

            if (unlikely( tmp_mvar_value_2 == NULL ))
            {
                tmp_mvar_value_2 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_Data );
            }

            if ( tmp_mvar_value_2 == NULL )
            {

                exception_type = PyExc_NameError;
                Py_INCREF( exception_type );
                exception_value = PyUnicode_FromFormat( "name '%s' is not defined", "Data" );
                exception_tb = NULL;
                NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
                CHAIN_EXCEPTION( exception_value );

                exception_lineno = 801;
                type_description_1 = "oo";
                goto frame_exception_exit_1;
            }

            tmp_isinstance_cls_2 = tmp_mvar_value_2;
            tmp_res = Nuitka_IsInstance( tmp_isinstance_inst_2, tmp_isinstance_cls_2 );
            if ( tmp_res == -1 )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 801;
                type_description_1 = "oo";
                goto frame_exception_exit_1;
            }
            tmp_condition_result_2 = ( tmp_res != 0 ) ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
            if ( tmp_condition_result_2 == NUITKA_BOOL_TRUE )
            {
                goto branch_yes_2;
            }
            else
            {
                goto branch_no_2;
            }
            branch_yes_2:;
            {
                PyObject *tmp_subscribed_name_2;
                PyObject *tmp_source_name_2;
                PyObject *tmp_subscript_name_2;
                PyObject *tmp_tuple_element_2;
                PyObject *tmp_type_arg_2;
                PyObject *tmp_source_name_3;
                PyObject *tmp_source_name_4;
                CHECK_OBJECT( par_self );
                tmp_source_name_2 = par_self;
                tmp_subscribed_name_2 = LOOKUP_ATTRIBUTE( tmp_source_name_2, const_str_plain__objtable );
                if ( tmp_subscribed_name_2 == NULL )
                {
                    assert( ERROR_OCCURRED() );

                    FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                    exception_lineno = 802;
                    type_description_1 = "oo";
                    goto frame_exception_exit_1;
                }
                CHECK_OBJECT( par_value );
                tmp_source_name_3 = par_value;
                tmp_type_arg_2 = LOOKUP_ATTRIBUTE( tmp_source_name_3, const_str_plain_data );
                if ( tmp_type_arg_2 == NULL )
                {
                    assert( ERROR_OCCURRED() );

                    FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
                    Py_DECREF( tmp_subscribed_name_2 );

                    exception_lineno = 802;
                    type_description_1 = "oo";
                    goto frame_exception_exit_1;
                }
                tmp_tuple_element_2 = BUILTIN_TYPE1( tmp_type_arg_2 );
                Py_DECREF( tmp_type_arg_2 );
                if ( tmp_tuple_element_2 == NULL )
                {
                    assert( ERROR_OCCURRED() );

                    FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
                    Py_DECREF( tmp_subscribed_name_2 );

                    exception_lineno = 802;
                    type_description_1 = "oo";
                    goto frame_exception_exit_1;
                }
                tmp_subscript_name_2 = PyTuple_New( 2 );
                PyTuple_SET_ITEM( tmp_subscript_name_2, 0, tmp_tuple_element_2 );
                CHECK_OBJECT( par_value );
                tmp_source_name_4 = par_value;
                tmp_tuple_element_2 = LOOKUP_ATTRIBUTE( tmp_source_name_4, const_str_plain_data );
                if ( tmp_tuple_element_2 == NULL )
                {
                    assert( ERROR_OCCURRED() );

                    FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
                    Py_DECREF( tmp_subscribed_name_2 );
                    Py_DECREF( tmp_subscript_name_2 );

                    exception_lineno = 802;
                    type_description_1 = "oo";
                    goto frame_exception_exit_1;
                }
                PyTuple_SET_ITEM( tmp_subscript_name_2, 1, tmp_tuple_element_2 );
                tmp_return_value = LOOKUP_SUBSCRIPT( tmp_subscribed_name_2, tmp_subscript_name_2 );
                Py_DECREF( tmp_subscribed_name_2 );
                Py_DECREF( tmp_subscript_name_2 );
                if ( tmp_return_value == NULL )
                {
                    assert( ERROR_OCCURRED() );

                    FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                    exception_lineno = 802;
                    type_description_1 = "oo";
                    goto frame_exception_exit_1;
                }
                goto frame_return_exit_1;
            }
            goto branch_end_2;
            branch_no_2:;
            {
                PyObject *tmp_subscribed_name_3;
                PyObject *tmp_source_name_5;
                PyObject *tmp_subscript_name_3;
                PyObject *tmp_id_arg_1;
                CHECK_OBJECT( par_self );
                tmp_source_name_5 = par_self;
                tmp_subscribed_name_3 = LOOKUP_ATTRIBUTE( tmp_source_name_5, const_str_plain__objidtable );
                if ( tmp_subscribed_name_3 == NULL )
                {
                    assert( ERROR_OCCURRED() );

                    FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                    exception_lineno = 804;
                    type_description_1 = "oo";
                    goto frame_exception_exit_1;
                }
                CHECK_OBJECT( par_value );
                tmp_id_arg_1 = par_value;
                tmp_subscript_name_3 = PyLong_FromVoidPtr( tmp_id_arg_1 );
                if ( tmp_subscript_name_3 == NULL )
                {
                    assert( ERROR_OCCURRED() );

                    FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
                    Py_DECREF( tmp_subscribed_name_3 );

                    exception_lineno = 804;
                    type_description_1 = "oo";
                    goto frame_exception_exit_1;
                }
                tmp_return_value = LOOKUP_SUBSCRIPT( tmp_subscribed_name_3, tmp_subscript_name_3 );
                Py_DECREF( tmp_subscribed_name_3 );
                Py_DECREF( tmp_subscript_name_3 );
                if ( tmp_return_value == NULL )
                {
                    assert( ERROR_OCCURRED() );

                    FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                    exception_lineno = 804;
                    type_description_1 = "oo";
                    goto frame_exception_exit_1;
                }
                goto frame_return_exit_1;
            }
            branch_end_2:;
        }
        branch_end_1:;
    }

#if 0
    RESTORE_FRAME_EXCEPTION( frame_fb43eab1ae27c6acb6e7038c52d00258 );
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto frame_no_exception_1;

    frame_return_exit_1:;
#if 0
    RESTORE_FRAME_EXCEPTION( frame_fb43eab1ae27c6acb6e7038c52d00258 );
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto try_return_handler_1;

    frame_exception_exit_1:;

#if 0
    RESTORE_FRAME_EXCEPTION( frame_fb43eab1ae27c6acb6e7038c52d00258 );
#endif

    if ( exception_tb == NULL )
    {
        exception_tb = MAKE_TRACEBACK( frame_fb43eab1ae27c6acb6e7038c52d00258, exception_lineno );
    }
    else if ( exception_tb->tb_frame != &frame_fb43eab1ae27c6acb6e7038c52d00258->m_frame )
    {
        exception_tb = ADD_TRACEBACK( exception_tb, frame_fb43eab1ae27c6acb6e7038c52d00258, exception_lineno );
    }

    // Attachs locals to frame if any.
    Nuitka_Frame_AttachLocals(
        (struct Nuitka_FrameObject *)frame_fb43eab1ae27c6acb6e7038c52d00258,
        type_description_1,
        par_self,
        par_value
    );


    // Release cached frame.
    if ( frame_fb43eab1ae27c6acb6e7038c52d00258 == cache_frame_fb43eab1ae27c6acb6e7038c52d00258 )
    {
        Py_DECREF( frame_fb43eab1ae27c6acb6e7038c52d00258 );
    }
    cache_frame_fb43eab1ae27c6acb6e7038c52d00258 = NULL;

    assertFrameObject( frame_fb43eab1ae27c6acb6e7038c52d00258 );

    // Put the previous frame back on top.
    popFrameStack();

    // Return the error.
    goto try_except_handler_1;

    frame_no_exception_1:;
    // tried codes exits in all cases
    NUITKA_CANNOT_GET_HERE( plistlib$$$function_59__getrefnum );
    return NULL;
    // Return handler code:
    try_return_handler_1:;
    CHECK_OBJECT( (PyObject *)par_self );
    Py_DECREF( par_self );
    par_self = NULL;

    CHECK_OBJECT( (PyObject *)par_value );
    Py_DECREF( par_value );
    par_value = NULL;

    goto function_return_exit;
    // Exception handler code:
    try_except_handler_1:;
    exception_keeper_type_1 = exception_type;
    exception_keeper_value_1 = exception_value;
    exception_keeper_tb_1 = exception_tb;
    exception_keeper_lineno_1 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    CHECK_OBJECT( (PyObject *)par_self );
    Py_DECREF( par_self );
    par_self = NULL;

    CHECK_OBJECT( (PyObject *)par_value );
    Py_DECREF( par_value );
    par_value = NULL;

    // Re-raise.
    exception_type = exception_keeper_type_1;
    exception_value = exception_keeper_value_1;
    exception_tb = exception_keeper_tb_1;
    exception_lineno = exception_keeper_lineno_1;

    goto function_exception_exit;
    // End of try:

    // Return statement must have exited already.
    NUITKA_CANNOT_GET_HERE( plistlib$$$function_59__getrefnum );
    return NULL;

function_exception_exit:
    assert( exception_type );
    RESTORE_ERROR_OCCURRED( exception_type, exception_value, exception_tb );

    return NULL;

function_return_exit:
   // Function cleanup code if any.


   // Actual function exit with return value, making sure we did not make
   // the error status worse despite non-NULL return.
   CHECK_OBJECT( tmp_return_value );
   assert( had_error || !ERROR_OCCURRED() );
   return tmp_return_value;
}


static PyObject *impl_plistlib$$$function_60__write_size( struct Nuitka_FunctionObject const *self, PyObject **python_pars )
{
    // Preserve error status for checks
#ifndef __NUITKA_NO_ASSERT__
    NUITKA_MAY_BE_UNUSED bool had_error = ERROR_OCCURRED();
#endif

    // Local variable declarations.
    PyObject *par_self = python_pars[ 0 ];
    PyObject *par_token = python_pars[ 1 ];
    PyObject *par_size = python_pars[ 2 ];
    struct Nuitka_FrameObject *frame_e300c162d27a6a43dc187281e877cd78;
    NUITKA_MAY_BE_UNUSED char const *type_description_1 = NULL;
    int tmp_res;
    PyObject *exception_type = NULL;
    PyObject *exception_value = NULL;
    PyTracebackObject *exception_tb = NULL;
    NUITKA_MAY_BE_UNUSED int exception_lineno = 0;
    static struct Nuitka_FrameObject *cache_frame_e300c162d27a6a43dc187281e877cd78 = NULL;
    PyObject *tmp_return_value = NULL;
    PyObject *exception_keeper_type_1;
    PyObject *exception_keeper_value_1;
    PyTracebackObject *exception_keeper_tb_1;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_1;

    // Actual function body.
    // Tried code:
    MAKE_OR_REUSE_FRAME( cache_frame_e300c162d27a6a43dc187281e877cd78, codeobj_e300c162d27a6a43dc187281e877cd78, module_plistlib, sizeof(void *)+sizeof(void *)+sizeof(void *) );
    frame_e300c162d27a6a43dc187281e877cd78 = cache_frame_e300c162d27a6a43dc187281e877cd78;

    // Push the new frame as the currently active one.
    pushFrameStack( frame_e300c162d27a6a43dc187281e877cd78 );

    // Mark the frame object as in use, ref count 1 will be up for reuse.
    assert( Py_REFCNT( frame_e300c162d27a6a43dc187281e877cd78 ) == 2 ); // Frame stack

    // Framed code:
    {
        nuitka_bool tmp_condition_result_1;
        PyObject *tmp_compexpr_left_1;
        PyObject *tmp_compexpr_right_1;
        CHECK_OBJECT( par_size );
        tmp_compexpr_left_1 = par_size;
        tmp_compexpr_right_1 = const_int_pos_15;
        tmp_res = RICH_COMPARE_BOOL_LT_OBJECT_OBJECT( tmp_compexpr_left_1, tmp_compexpr_right_1 );
        if ( tmp_res == -1 )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 807;
            type_description_1 = "ooo";
            goto frame_exception_exit_1;
        }
        tmp_condition_result_1 = ( tmp_res != 0 ) ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
        if ( tmp_condition_result_1 == NUITKA_BOOL_TRUE )
        {
            goto branch_yes_1;
        }
        else
        {
            goto branch_no_1;
        }
        branch_yes_1:;
        {
            PyObject *tmp_called_name_1;
            PyObject *tmp_source_name_1;
            PyObject *tmp_source_name_2;
            PyObject *tmp_call_result_1;
            PyObject *tmp_args_element_name_1;
            PyObject *tmp_called_name_2;
            PyObject *tmp_source_name_3;
            PyObject *tmp_mvar_value_1;
            PyObject *tmp_args_element_name_2;
            PyObject *tmp_args_element_name_3;
            PyObject *tmp_left_name_1;
            PyObject *tmp_right_name_1;
            CHECK_OBJECT( par_self );
            tmp_source_name_2 = par_self;
            tmp_source_name_1 = LOOKUP_ATTRIBUTE( tmp_source_name_2, const_str_plain__fp );
            if ( tmp_source_name_1 == NULL )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 808;
                type_description_1 = "ooo";
                goto frame_exception_exit_1;
            }
            tmp_called_name_1 = LOOKUP_ATTRIBUTE( tmp_source_name_1, const_str_plain_write );
            Py_DECREF( tmp_source_name_1 );
            if ( tmp_called_name_1 == NULL )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 808;
                type_description_1 = "ooo";
                goto frame_exception_exit_1;
            }
            tmp_mvar_value_1 = GET_STRING_DICT_VALUE( moduledict_plistlib, (Nuitka_StringObject *)const_str_plain_struct );

            if (unlikely( tmp_mvar_value_1 == NULL ))
            {
                tmp_mvar_value_1 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_struct );
            }

            if ( tmp_mvar_value_1 == NULL )
            {
                Py_DECREF( tmp_called_name_1 );
                exception_type = PyExc_NameError;
                Py_INCREF( exception_type );
                exception_value = PyUnicode_FromFormat( "name '%s' is not defined", "struct" );
                exception_tb = NULL;
                NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
                CHAIN_EXCEPTION( exception_value );

                exception_lineno = 808;
                type_description_1 = "ooo";
                goto frame_exception_exit_1;
            }

            tmp_source_name_3 = tmp_mvar_value_1;
            tmp_called_name_2 = LOOKUP_ATTRIBUTE( tmp_source_name_3, const_str_plain_pack );
            if ( tmp_called_name_2 == NULL )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
                Py_DECREF( tmp_called_name_1 );

                exception_lineno = 808;
                type_description_1 = "ooo";
                goto frame_exception_exit_1;
            }
            tmp_args_element_name_2 = const_str_digest_492eced51578a561806e20ae8ef1f867;
            CHECK_OBJECT( par_token );
            tmp_left_name_1 = par_token;
            CHECK_OBJECT( par_size );
            tmp_right_name_1 = par_size;
            tmp_args_element_name_3 = BINARY_OPERATION( PyNumber_Or, tmp_left_name_1, tmp_right_name_1 );
            if ( tmp_args_element_name_3 == NULL )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
                Py_DECREF( tmp_called_name_1 );
                Py_DECREF( tmp_called_name_2 );

                exception_lineno = 808;
                type_description_1 = "ooo";
                goto frame_exception_exit_1;
            }
            frame_e300c162d27a6a43dc187281e877cd78->m_frame.f_lineno = 808;
            {
                PyObject *call_args[] = { tmp_args_element_name_2, tmp_args_element_name_3 };
                tmp_args_element_name_1 = CALL_FUNCTION_WITH_ARGS2( tmp_called_name_2, call_args );
            }

            Py_DECREF( tmp_called_name_2 );
            Py_DECREF( tmp_args_element_name_3 );
            if ( tmp_args_element_name_1 == NULL )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
                Py_DECREF( tmp_called_name_1 );

                exception_lineno = 808;
                type_description_1 = "ooo";
                goto frame_exception_exit_1;
            }
            frame_e300c162d27a6a43dc187281e877cd78->m_frame.f_lineno = 808;
            {
                PyObject *call_args[] = { tmp_args_element_name_1 };
                tmp_call_result_1 = CALL_FUNCTION_WITH_ARGS1( tmp_called_name_1, call_args );
            }

            Py_DECREF( tmp_called_name_1 );
            Py_DECREF( tmp_args_element_name_1 );
            if ( tmp_call_result_1 == NULL )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 808;
                type_description_1 = "ooo";
                goto frame_exception_exit_1;
            }
            Py_DECREF( tmp_call_result_1 );
        }
        goto branch_end_1;
        branch_no_1:;
        {
            nuitka_bool tmp_condition_result_2;
            PyObject *tmp_compexpr_left_2;
            PyObject *tmp_compexpr_right_2;
            CHECK_OBJECT( par_size );
            tmp_compexpr_left_2 = par_size;
            tmp_compexpr_right_2 = const_int_pos_256;
            tmp_res = RICH_COMPARE_BOOL_LT_OBJECT_OBJECT( tmp_compexpr_left_2, tmp_compexpr_right_2 );
            if ( tmp_res == -1 )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 810;
                type_description_1 = "ooo";
                goto frame_exception_exit_1;
            }
            tmp_condition_result_2 = ( tmp_res != 0 ) ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
            if ( tmp_condition_result_2 == NUITKA_BOOL_TRUE )
            {
                goto branch_yes_2;
            }
            else
            {
                goto branch_no_2;
            }
            branch_yes_2:;
            {
                PyObject *tmp_called_name_3;
                PyObject *tmp_source_name_4;
                PyObject *tmp_source_name_5;
                PyObject *tmp_call_result_2;
                PyObject *tmp_args_element_name_4;
                PyObject *tmp_called_name_4;
                PyObject *tmp_source_name_6;
                PyObject *tmp_mvar_value_2;
                PyObject *tmp_args_element_name_5;
                PyObject *tmp_args_element_name_6;
                PyObject *tmp_left_name_2;
                PyObject *tmp_right_name_2;
                PyObject *tmp_args_element_name_7;
                PyObject *tmp_args_element_name_8;
                CHECK_OBJECT( par_self );
                tmp_source_name_5 = par_self;
                tmp_source_name_4 = LOOKUP_ATTRIBUTE( tmp_source_name_5, const_str_plain__fp );
                if ( tmp_source_name_4 == NULL )
                {
                    assert( ERROR_OCCURRED() );

                    FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                    exception_lineno = 811;
                    type_description_1 = "ooo";
                    goto frame_exception_exit_1;
                }
                tmp_called_name_3 = LOOKUP_ATTRIBUTE( tmp_source_name_4, const_str_plain_write );
                Py_DECREF( tmp_source_name_4 );
                if ( tmp_called_name_3 == NULL )
                {
                    assert( ERROR_OCCURRED() );

                    FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                    exception_lineno = 811;
                    type_description_1 = "ooo";
                    goto frame_exception_exit_1;
                }
                tmp_mvar_value_2 = GET_STRING_DICT_VALUE( moduledict_plistlib, (Nuitka_StringObject *)const_str_plain_struct );

                if (unlikely( tmp_mvar_value_2 == NULL ))
                {
                    tmp_mvar_value_2 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_struct );
                }

                if ( tmp_mvar_value_2 == NULL )
                {
                    Py_DECREF( tmp_called_name_3 );
                    exception_type = PyExc_NameError;
                    Py_INCREF( exception_type );
                    exception_value = PyUnicode_FromFormat( "name '%s' is not defined", "struct" );
                    exception_tb = NULL;
                    NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
                    CHAIN_EXCEPTION( exception_value );

                    exception_lineno = 811;
                    type_description_1 = "ooo";
                    goto frame_exception_exit_1;
                }

                tmp_source_name_6 = tmp_mvar_value_2;
                tmp_called_name_4 = LOOKUP_ATTRIBUTE( tmp_source_name_6, const_str_plain_pack );
                if ( tmp_called_name_4 == NULL )
                {
                    assert( ERROR_OCCURRED() );

                    FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
                    Py_DECREF( tmp_called_name_3 );

                    exception_lineno = 811;
                    type_description_1 = "ooo";
                    goto frame_exception_exit_1;
                }
                tmp_args_element_name_5 = const_str_digest_95be78bea9f8fecb1a87a18711816150;
                CHECK_OBJECT( par_token );
                tmp_left_name_2 = par_token;
                tmp_right_name_2 = const_int_pos_15;
                tmp_args_element_name_6 = BINARY_OPERATION( PyNumber_Or, tmp_left_name_2, tmp_right_name_2 );
                if ( tmp_args_element_name_6 == NULL )
                {
                    assert( ERROR_OCCURRED() );

                    FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
                    Py_DECREF( tmp_called_name_3 );
                    Py_DECREF( tmp_called_name_4 );

                    exception_lineno = 811;
                    type_description_1 = "ooo";
                    goto frame_exception_exit_1;
                }
                tmp_args_element_name_7 = const_int_pos_16;
                CHECK_OBJECT( par_size );
                tmp_args_element_name_8 = par_size;
                frame_e300c162d27a6a43dc187281e877cd78->m_frame.f_lineno = 811;
                {
                    PyObject *call_args[] = { tmp_args_element_name_5, tmp_args_element_name_6, tmp_args_element_name_7, tmp_args_element_name_8 };
                    tmp_args_element_name_4 = CALL_FUNCTION_WITH_ARGS4( tmp_called_name_4, call_args );
                }

                Py_DECREF( tmp_called_name_4 );
                Py_DECREF( tmp_args_element_name_6 );
                if ( tmp_args_element_name_4 == NULL )
                {
                    assert( ERROR_OCCURRED() );

                    FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
                    Py_DECREF( tmp_called_name_3 );

                    exception_lineno = 811;
                    type_description_1 = "ooo";
                    goto frame_exception_exit_1;
                }
                frame_e300c162d27a6a43dc187281e877cd78->m_frame.f_lineno = 811;
                {
                    PyObject *call_args[] = { tmp_args_element_name_4 };
                    tmp_call_result_2 = CALL_FUNCTION_WITH_ARGS1( tmp_called_name_3, call_args );
                }

                Py_DECREF( tmp_called_name_3 );
                Py_DECREF( tmp_args_element_name_4 );
                if ( tmp_call_result_2 == NULL )
                {
                    assert( ERROR_OCCURRED() );

                    FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                    exception_lineno = 811;
                    type_description_1 = "ooo";
                    goto frame_exception_exit_1;
                }
                Py_DECREF( tmp_call_result_2 );
            }
            goto branch_end_2;
            branch_no_2:;
            {
                nuitka_bool tmp_condition_result_3;
                PyObject *tmp_compexpr_left_3;
                PyObject *tmp_compexpr_right_3;
                CHECK_OBJECT( par_size );
                tmp_compexpr_left_3 = par_size;
                tmp_compexpr_right_3 = const_int_pos_65536;
                tmp_res = RICH_COMPARE_BOOL_LT_OBJECT_OBJECT( tmp_compexpr_left_3, tmp_compexpr_right_3 );
                if ( tmp_res == -1 )
                {
                    assert( ERROR_OCCURRED() );

                    FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                    exception_lineno = 813;
                    type_description_1 = "ooo";
                    goto frame_exception_exit_1;
                }
                tmp_condition_result_3 = ( tmp_res != 0 ) ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
                if ( tmp_condition_result_3 == NUITKA_BOOL_TRUE )
                {
                    goto branch_yes_3;
                }
                else
                {
                    goto branch_no_3;
                }
                branch_yes_3:;
                {
                    PyObject *tmp_called_name_5;
                    PyObject *tmp_source_name_7;
                    PyObject *tmp_source_name_8;
                    PyObject *tmp_call_result_3;
                    PyObject *tmp_args_element_name_9;
                    PyObject *tmp_called_name_6;
                    PyObject *tmp_source_name_9;
                    PyObject *tmp_mvar_value_3;
                    PyObject *tmp_args_element_name_10;
                    PyObject *tmp_args_element_name_11;
                    PyObject *tmp_left_name_3;
                    PyObject *tmp_right_name_3;
                    PyObject *tmp_args_element_name_12;
                    PyObject *tmp_args_element_name_13;
                    CHECK_OBJECT( par_self );
                    tmp_source_name_8 = par_self;
                    tmp_source_name_7 = LOOKUP_ATTRIBUTE( tmp_source_name_8, const_str_plain__fp );
                    if ( tmp_source_name_7 == NULL )
                    {
                        assert( ERROR_OCCURRED() );

                        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                        exception_lineno = 814;
                        type_description_1 = "ooo";
                        goto frame_exception_exit_1;
                    }
                    tmp_called_name_5 = LOOKUP_ATTRIBUTE( tmp_source_name_7, const_str_plain_write );
                    Py_DECREF( tmp_source_name_7 );
                    if ( tmp_called_name_5 == NULL )
                    {
                        assert( ERROR_OCCURRED() );

                        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                        exception_lineno = 814;
                        type_description_1 = "ooo";
                        goto frame_exception_exit_1;
                    }
                    tmp_mvar_value_3 = GET_STRING_DICT_VALUE( moduledict_plistlib, (Nuitka_StringObject *)const_str_plain_struct );

                    if (unlikely( tmp_mvar_value_3 == NULL ))
                    {
                        tmp_mvar_value_3 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_struct );
                    }

                    if ( tmp_mvar_value_3 == NULL )
                    {
                        Py_DECREF( tmp_called_name_5 );
                        exception_type = PyExc_NameError;
                        Py_INCREF( exception_type );
                        exception_value = PyUnicode_FromFormat( "name '%s' is not defined", "struct" );
                        exception_tb = NULL;
                        NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
                        CHAIN_EXCEPTION( exception_value );

                        exception_lineno = 814;
                        type_description_1 = "ooo";
                        goto frame_exception_exit_1;
                    }

                    tmp_source_name_9 = tmp_mvar_value_3;
                    tmp_called_name_6 = LOOKUP_ATTRIBUTE( tmp_source_name_9, const_str_plain_pack );
                    if ( tmp_called_name_6 == NULL )
                    {
                        assert( ERROR_OCCURRED() );

                        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
                        Py_DECREF( tmp_called_name_5 );

                        exception_lineno = 814;
                        type_description_1 = "ooo";
                        goto frame_exception_exit_1;
                    }
                    tmp_args_element_name_10 = const_str_digest_8be052e714db42ed917ef93431760d0b;
                    CHECK_OBJECT( par_token );
                    tmp_left_name_3 = par_token;
                    tmp_right_name_3 = const_int_pos_15;
                    tmp_args_element_name_11 = BINARY_OPERATION( PyNumber_Or, tmp_left_name_3, tmp_right_name_3 );
                    if ( tmp_args_element_name_11 == NULL )
                    {
                        assert( ERROR_OCCURRED() );

                        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
                        Py_DECREF( tmp_called_name_5 );
                        Py_DECREF( tmp_called_name_6 );

                        exception_lineno = 814;
                        type_description_1 = "ooo";
                        goto frame_exception_exit_1;
                    }
                    tmp_args_element_name_12 = const_int_pos_17;
                    CHECK_OBJECT( par_size );
                    tmp_args_element_name_13 = par_size;
                    frame_e300c162d27a6a43dc187281e877cd78->m_frame.f_lineno = 814;
                    {
                        PyObject *call_args[] = { tmp_args_element_name_10, tmp_args_element_name_11, tmp_args_element_name_12, tmp_args_element_name_13 };
                        tmp_args_element_name_9 = CALL_FUNCTION_WITH_ARGS4( tmp_called_name_6, call_args );
                    }

                    Py_DECREF( tmp_called_name_6 );
                    Py_DECREF( tmp_args_element_name_11 );
                    if ( tmp_args_element_name_9 == NULL )
                    {
                        assert( ERROR_OCCURRED() );

                        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
                        Py_DECREF( tmp_called_name_5 );

                        exception_lineno = 814;
                        type_description_1 = "ooo";
                        goto frame_exception_exit_1;
                    }
                    frame_e300c162d27a6a43dc187281e877cd78->m_frame.f_lineno = 814;
                    {
                        PyObject *call_args[] = { tmp_args_element_name_9 };
                        tmp_call_result_3 = CALL_FUNCTION_WITH_ARGS1( tmp_called_name_5, call_args );
                    }

                    Py_DECREF( tmp_called_name_5 );
                    Py_DECREF( tmp_args_element_name_9 );
                    if ( tmp_call_result_3 == NULL )
                    {
                        assert( ERROR_OCCURRED() );

                        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                        exception_lineno = 814;
                        type_description_1 = "ooo";
                        goto frame_exception_exit_1;
                    }
                    Py_DECREF( tmp_call_result_3 );
                }
                goto branch_end_3;
                branch_no_3:;
                {
                    nuitka_bool tmp_condition_result_4;
                    PyObject *tmp_compexpr_left_4;
                    PyObject *tmp_compexpr_right_4;
                    CHECK_OBJECT( par_size );
                    tmp_compexpr_left_4 = par_size;
                    tmp_compexpr_right_4 = const_int_pos_4294967296;
                    tmp_res = RICH_COMPARE_BOOL_LT_OBJECT_OBJECT( tmp_compexpr_left_4, tmp_compexpr_right_4 );
                    if ( tmp_res == -1 )
                    {
                        assert( ERROR_OCCURRED() );

                        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                        exception_lineno = 816;
                        type_description_1 = "ooo";
                        goto frame_exception_exit_1;
                    }
                    tmp_condition_result_4 = ( tmp_res != 0 ) ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
                    if ( tmp_condition_result_4 == NUITKA_BOOL_TRUE )
                    {
                        goto branch_yes_4;
                    }
                    else
                    {
                        goto branch_no_4;
                    }
                    branch_yes_4:;
                    {
                        PyObject *tmp_called_name_7;
                        PyObject *tmp_source_name_10;
                        PyObject *tmp_source_name_11;
                        PyObject *tmp_call_result_4;
                        PyObject *tmp_args_element_name_14;
                        PyObject *tmp_called_name_8;
                        PyObject *tmp_source_name_12;
                        PyObject *tmp_mvar_value_4;
                        PyObject *tmp_args_element_name_15;
                        PyObject *tmp_args_element_name_16;
                        PyObject *tmp_left_name_4;
                        PyObject *tmp_right_name_4;
                        PyObject *tmp_args_element_name_17;
                        PyObject *tmp_args_element_name_18;
                        CHECK_OBJECT( par_self );
                        tmp_source_name_11 = par_self;
                        tmp_source_name_10 = LOOKUP_ATTRIBUTE( tmp_source_name_11, const_str_plain__fp );
                        if ( tmp_source_name_10 == NULL )
                        {
                            assert( ERROR_OCCURRED() );

                            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                            exception_lineno = 817;
                            type_description_1 = "ooo";
                            goto frame_exception_exit_1;
                        }
                        tmp_called_name_7 = LOOKUP_ATTRIBUTE( tmp_source_name_10, const_str_plain_write );
                        Py_DECREF( tmp_source_name_10 );
                        if ( tmp_called_name_7 == NULL )
                        {
                            assert( ERROR_OCCURRED() );

                            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                            exception_lineno = 817;
                            type_description_1 = "ooo";
                            goto frame_exception_exit_1;
                        }
                        tmp_mvar_value_4 = GET_STRING_DICT_VALUE( moduledict_plistlib, (Nuitka_StringObject *)const_str_plain_struct );

                        if (unlikely( tmp_mvar_value_4 == NULL ))
                        {
                            tmp_mvar_value_4 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_struct );
                        }

                        if ( tmp_mvar_value_4 == NULL )
                        {
                            Py_DECREF( tmp_called_name_7 );
                            exception_type = PyExc_NameError;
                            Py_INCREF( exception_type );
                            exception_value = PyUnicode_FromFormat( "name '%s' is not defined", "struct" );
                            exception_tb = NULL;
                            NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
                            CHAIN_EXCEPTION( exception_value );

                            exception_lineno = 817;
                            type_description_1 = "ooo";
                            goto frame_exception_exit_1;
                        }

                        tmp_source_name_12 = tmp_mvar_value_4;
                        tmp_called_name_8 = LOOKUP_ATTRIBUTE( tmp_source_name_12, const_str_plain_pack );
                        if ( tmp_called_name_8 == NULL )
                        {
                            assert( ERROR_OCCURRED() );

                            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
                            Py_DECREF( tmp_called_name_7 );

                            exception_lineno = 817;
                            type_description_1 = "ooo";
                            goto frame_exception_exit_1;
                        }
                        tmp_args_element_name_15 = const_str_digest_a40e3915d472621166a50dadef08ff76;
                        CHECK_OBJECT( par_token );
                        tmp_left_name_4 = par_token;
                        tmp_right_name_4 = const_int_pos_15;
                        tmp_args_element_name_16 = BINARY_OPERATION( PyNumber_Or, tmp_left_name_4, tmp_right_name_4 );
                        if ( tmp_args_element_name_16 == NULL )
                        {
                            assert( ERROR_OCCURRED() );

                            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
                            Py_DECREF( tmp_called_name_7 );
                            Py_DECREF( tmp_called_name_8 );

                            exception_lineno = 817;
                            type_description_1 = "ooo";
                            goto frame_exception_exit_1;
                        }
                        tmp_args_element_name_17 = const_int_pos_18;
                        CHECK_OBJECT( par_size );
                        tmp_args_element_name_18 = par_size;
                        frame_e300c162d27a6a43dc187281e877cd78->m_frame.f_lineno = 817;
                        {
                            PyObject *call_args[] = { tmp_args_element_name_15, tmp_args_element_name_16, tmp_args_element_name_17, tmp_args_element_name_18 };
                            tmp_args_element_name_14 = CALL_FUNCTION_WITH_ARGS4( tmp_called_name_8, call_args );
                        }

                        Py_DECREF( tmp_called_name_8 );
                        Py_DECREF( tmp_args_element_name_16 );
                        if ( tmp_args_element_name_14 == NULL )
                        {
                            assert( ERROR_OCCURRED() );

                            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
                            Py_DECREF( tmp_called_name_7 );

                            exception_lineno = 817;
                            type_description_1 = "ooo";
                            goto frame_exception_exit_1;
                        }
                        frame_e300c162d27a6a43dc187281e877cd78->m_frame.f_lineno = 817;
                        {
                            PyObject *call_args[] = { tmp_args_element_name_14 };
                            tmp_call_result_4 = CALL_FUNCTION_WITH_ARGS1( tmp_called_name_7, call_args );
                        }

                        Py_DECREF( tmp_called_name_7 );
                        Py_DECREF( tmp_args_element_name_14 );
                        if ( tmp_call_result_4 == NULL )
                        {
                            assert( ERROR_OCCURRED() );

                            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                            exception_lineno = 817;
                            type_description_1 = "ooo";
                            goto frame_exception_exit_1;
                        }
                        Py_DECREF( tmp_call_result_4 );
                    }
                    goto branch_end_4;
                    branch_no_4:;
                    {
                        PyObject *tmp_called_name_9;
                        PyObject *tmp_source_name_13;
                        PyObject *tmp_source_name_14;
                        PyObject *tmp_call_result_5;
                        PyObject *tmp_args_element_name_19;
                        PyObject *tmp_called_name_10;
                        PyObject *tmp_source_name_15;
                        PyObject *tmp_mvar_value_5;
                        PyObject *tmp_args_element_name_20;
                        PyObject *tmp_args_element_name_21;
                        PyObject *tmp_left_name_5;
                        PyObject *tmp_right_name_5;
                        PyObject *tmp_args_element_name_22;
                        PyObject *tmp_args_element_name_23;
                        CHECK_OBJECT( par_self );
                        tmp_source_name_14 = par_self;
                        tmp_source_name_13 = LOOKUP_ATTRIBUTE( tmp_source_name_14, const_str_plain__fp );
                        if ( tmp_source_name_13 == NULL )
                        {
                            assert( ERROR_OCCURRED() );

                            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                            exception_lineno = 820;
                            type_description_1 = "ooo";
                            goto frame_exception_exit_1;
                        }
                        tmp_called_name_9 = LOOKUP_ATTRIBUTE( tmp_source_name_13, const_str_plain_write );
                        Py_DECREF( tmp_source_name_13 );
                        if ( tmp_called_name_9 == NULL )
                        {
                            assert( ERROR_OCCURRED() );

                            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                            exception_lineno = 820;
                            type_description_1 = "ooo";
                            goto frame_exception_exit_1;
                        }
                        tmp_mvar_value_5 = GET_STRING_DICT_VALUE( moduledict_plistlib, (Nuitka_StringObject *)const_str_plain_struct );

                        if (unlikely( tmp_mvar_value_5 == NULL ))
                        {
                            tmp_mvar_value_5 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_struct );
                        }

                        if ( tmp_mvar_value_5 == NULL )
                        {
                            Py_DECREF( tmp_called_name_9 );
                            exception_type = PyExc_NameError;
                            Py_INCREF( exception_type );
                            exception_value = PyUnicode_FromFormat( "name '%s' is not defined", "struct" );
                            exception_tb = NULL;
                            NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
                            CHAIN_EXCEPTION( exception_value );

                            exception_lineno = 820;
                            type_description_1 = "ooo";
                            goto frame_exception_exit_1;
                        }

                        tmp_source_name_15 = tmp_mvar_value_5;
                        tmp_called_name_10 = LOOKUP_ATTRIBUTE( tmp_source_name_15, const_str_plain_pack );
                        if ( tmp_called_name_10 == NULL )
                        {
                            assert( ERROR_OCCURRED() );

                            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
                            Py_DECREF( tmp_called_name_9 );

                            exception_lineno = 820;
                            type_description_1 = "ooo";
                            goto frame_exception_exit_1;
                        }
                        tmp_args_element_name_20 = const_str_digest_5c5bea784457cd769cf2d0a7c5add271;
                        CHECK_OBJECT( par_token );
                        tmp_left_name_5 = par_token;
                        tmp_right_name_5 = const_int_pos_15;
                        tmp_args_element_name_21 = BINARY_OPERATION( PyNumber_Or, tmp_left_name_5, tmp_right_name_5 );
                        if ( tmp_args_element_name_21 == NULL )
                        {
                            assert( ERROR_OCCURRED() );

                            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
                            Py_DECREF( tmp_called_name_9 );
                            Py_DECREF( tmp_called_name_10 );

                            exception_lineno = 820;
                            type_description_1 = "ooo";
                            goto frame_exception_exit_1;
                        }
                        tmp_args_element_name_22 = const_int_pos_19;
                        CHECK_OBJECT( par_size );
                        tmp_args_element_name_23 = par_size;
                        frame_e300c162d27a6a43dc187281e877cd78->m_frame.f_lineno = 820;
                        {
                            PyObject *call_args[] = { tmp_args_element_name_20, tmp_args_element_name_21, tmp_args_element_name_22, tmp_args_element_name_23 };
                            tmp_args_element_name_19 = CALL_FUNCTION_WITH_ARGS4( tmp_called_name_10, call_args );
                        }

                        Py_DECREF( tmp_called_name_10 );
                        Py_DECREF( tmp_args_element_name_21 );
                        if ( tmp_args_element_name_19 == NULL )
                        {
                            assert( ERROR_OCCURRED() );

                            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
                            Py_DECREF( tmp_called_name_9 );

                            exception_lineno = 820;
                            type_description_1 = "ooo";
                            goto frame_exception_exit_1;
                        }
                        frame_e300c162d27a6a43dc187281e877cd78->m_frame.f_lineno = 820;
                        {
                            PyObject *call_args[] = { tmp_args_element_name_19 };
                            tmp_call_result_5 = CALL_FUNCTION_WITH_ARGS1( tmp_called_name_9, call_args );
                        }

                        Py_DECREF( tmp_called_name_9 );
                        Py_DECREF( tmp_args_element_name_19 );
                        if ( tmp_call_result_5 == NULL )
                        {
                            assert( ERROR_OCCURRED() );

                            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                            exception_lineno = 820;
                            type_description_1 = "ooo";
                            goto frame_exception_exit_1;
                        }
                        Py_DECREF( tmp_call_result_5 );
                    }
                    branch_end_4:;
                }
                branch_end_3:;
            }
            branch_end_2:;
        }
        branch_end_1:;
    }

#if 0
    RESTORE_FRAME_EXCEPTION( frame_e300c162d27a6a43dc187281e877cd78 );
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto frame_no_exception_1;

    frame_exception_exit_1:;

#if 0
    RESTORE_FRAME_EXCEPTION( frame_e300c162d27a6a43dc187281e877cd78 );
#endif

    if ( exception_tb == NULL )
    {
        exception_tb = MAKE_TRACEBACK( frame_e300c162d27a6a43dc187281e877cd78, exception_lineno );
    }
    else if ( exception_tb->tb_frame != &frame_e300c162d27a6a43dc187281e877cd78->m_frame )
    {
        exception_tb = ADD_TRACEBACK( exception_tb, frame_e300c162d27a6a43dc187281e877cd78, exception_lineno );
    }

    // Attachs locals to frame if any.
    Nuitka_Frame_AttachLocals(
        (struct Nuitka_FrameObject *)frame_e300c162d27a6a43dc187281e877cd78,
        type_description_1,
        par_self,
        par_token,
        par_size
    );


    // Release cached frame.
    if ( frame_e300c162d27a6a43dc187281e877cd78 == cache_frame_e300c162d27a6a43dc187281e877cd78 )
    {
        Py_DECREF( frame_e300c162d27a6a43dc187281e877cd78 );
    }
    cache_frame_e300c162d27a6a43dc187281e877cd78 = NULL;

    assertFrameObject( frame_e300c162d27a6a43dc187281e877cd78 );

    // Put the previous frame back on top.
    popFrameStack();

    // Return the error.
    goto try_except_handler_1;

    frame_no_exception_1:;
    tmp_return_value = Py_None;
    Py_INCREF( tmp_return_value );
    goto try_return_handler_1;
    // tried codes exits in all cases
    NUITKA_CANNOT_GET_HERE( plistlib$$$function_60__write_size );
    return NULL;
    // Return handler code:
    try_return_handler_1:;
    CHECK_OBJECT( (PyObject *)par_self );
    Py_DECREF( par_self );
    par_self = NULL;

    CHECK_OBJECT( (PyObject *)par_token );
    Py_DECREF( par_token );
    par_token = NULL;

    CHECK_OBJECT( (PyObject *)par_size );
    Py_DECREF( par_size );
    par_size = NULL;

    goto function_return_exit;
    // Exception handler code:
    try_except_handler_1:;
    exception_keeper_type_1 = exception_type;
    exception_keeper_value_1 = exception_value;
    exception_keeper_tb_1 = exception_tb;
    exception_keeper_lineno_1 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    CHECK_OBJECT( (PyObject *)par_self );
    Py_DECREF( par_self );
    par_self = NULL;

    CHECK_OBJECT( (PyObject *)par_token );
    Py_DECREF( par_token );
    par_token = NULL;

    CHECK_OBJECT( (PyObject *)par_size );
    Py_DECREF( par_size );
    par_size = NULL;

    // Re-raise.
    exception_type = exception_keeper_type_1;
    exception_value = exception_keeper_value_1;
    exception_tb = exception_keeper_tb_1;
    exception_lineno = exception_keeper_lineno_1;

    goto function_exception_exit;
    // End of try:

    // Return statement must have exited already.
    NUITKA_CANNOT_GET_HERE( plistlib$$$function_60__write_size );
    return NULL;

function_exception_exit:
    assert( exception_type );
    RESTORE_ERROR_OCCURRED( exception_type, exception_value, exception_tb );

    return NULL;

function_return_exit:
   // Function cleanup code if any.


   // Actual function exit with return value, making sure we did not make
   // the error status worse despite non-NULL return.
   CHECK_OBJECT( tmp_return_value );
   assert( had_error || !ERROR_OCCURRED() );
   return tmp_return_value;
}


static PyObject *impl_plistlib$$$function_61__write_object( struct Nuitka_FunctionObject const *self, PyObject **python_pars )
{
    // Preserve error status for checks
#ifndef __NUITKA_NO_ASSERT__
    NUITKA_MAY_BE_UNUSED bool had_error = ERROR_OCCURRED();
#endif

    // Local variable declarations.
    PyObject *par_self = python_pars[ 0 ];
    PyObject *par_value = python_pars[ 1 ];
    PyObject *var_ref = NULL;
    PyObject *var_f = NULL;
    PyObject *var_t = NULL;
    PyObject *var_refs = NULL;
    PyObject *var_s = NULL;
    PyObject *var_keyRefs = NULL;
    PyObject *var_valRefs = NULL;
    PyObject *var_rootItems = NULL;
    PyObject *var_k = NULL;
    PyObject *var_v = NULL;
    PyObject *outline_0_var_o = NULL;
    PyObject *tmp_for_loop_1__for_iterator = NULL;
    PyObject *tmp_for_loop_1__iter_value = NULL;
    PyObject *tmp_listcomp_1__$0 = NULL;
    PyObject *tmp_listcomp_1__contraction = NULL;
    PyObject *tmp_listcomp_1__iter_value_0 = NULL;
    PyObject *tmp_tuple_unpack_1__element_1 = NULL;
    PyObject *tmp_tuple_unpack_1__element_2 = NULL;
    PyObject *tmp_tuple_unpack_1__source_iter = NULL;
    PyObject *tmp_tuple_unpack_2__element_1 = NULL;
    PyObject *tmp_tuple_unpack_2__element_2 = NULL;
    PyObject *tmp_tuple_unpack_2__source_iter = NULL;
    struct Nuitka_FrameObject *frame_edf236a14f5145c2001a5486f9240237;
    NUITKA_MAY_BE_UNUSED char const *type_description_1 = NULL;
    PyObject *exception_type = NULL;
    PyObject *exception_value = NULL;
    PyTracebackObject *exception_tb = NULL;
    NUITKA_MAY_BE_UNUSED int exception_lineno = 0;
    bool tmp_result;
    int tmp_res;
    PyObject *exception_keeper_type_1;
    PyObject *exception_keeper_value_1;
    PyTracebackObject *exception_keeper_tb_1;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_1;
    PyObject *exception_preserved_type_1;
    PyObject *exception_preserved_value_1;
    PyTracebackObject *exception_preserved_tb_1;
    PyObject *exception_keeper_type_2;
    PyObject *exception_keeper_value_2;
    PyTracebackObject *exception_keeper_tb_2;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_2;
    PyObject *exception_keeper_type_3;
    PyObject *exception_keeper_value_3;
    PyTracebackObject *exception_keeper_tb_3;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_3;
    PyObject *exception_preserved_type_2;
    PyObject *exception_preserved_value_2;
    PyTracebackObject *exception_preserved_tb_2;
    PyObject *exception_keeper_type_4;
    PyObject *exception_keeper_value_4;
    PyTracebackObject *exception_keeper_tb_4;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_4;
    struct Nuitka_FrameObject *frame_1d0f5f6fb0fb7d83d8574ec7f2ca3cea_2;
    NUITKA_MAY_BE_UNUSED char const *type_description_2 = NULL;
    PyObject *exception_keeper_type_5;
    PyObject *exception_keeper_value_5;
    PyTracebackObject *exception_keeper_tb_5;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_5;
    static struct Nuitka_FrameObject *cache_frame_1d0f5f6fb0fb7d83d8574ec7f2ca3cea_2 = NULL;
    PyObject *exception_keeper_type_6;
    PyObject *exception_keeper_value_6;
    PyTracebackObject *exception_keeper_tb_6;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_6;
    PyObject *exception_keeper_type_7;
    PyObject *exception_keeper_value_7;
    PyTracebackObject *exception_keeper_tb_7;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_7;
    PyObject *exception_keeper_type_8;
    PyObject *exception_keeper_value_8;
    PyTracebackObject *exception_keeper_tb_8;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_8;
    PyObject *tmp_iterator_attempt;
    PyObject *exception_keeper_type_9;
    PyObject *exception_keeper_value_9;
    PyTracebackObject *exception_keeper_tb_9;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_9;
    PyObject *exception_keeper_type_10;
    PyObject *exception_keeper_value_10;
    PyTracebackObject *exception_keeper_tb_10;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_10;
    PyObject *exception_keeper_type_11;
    PyObject *exception_keeper_value_11;
    PyTracebackObject *exception_keeper_tb_11;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_11;
    static struct Nuitka_FrameObject *cache_frame_edf236a14f5145c2001a5486f9240237 = NULL;
    PyObject *tmp_return_value = NULL;
    PyObject *exception_keeper_type_12;
    PyObject *exception_keeper_value_12;
    PyTracebackObject *exception_keeper_tb_12;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_12;

    // Actual function body.
    // Tried code:
    MAKE_OR_REUSE_FRAME( cache_frame_edf236a14f5145c2001a5486f9240237, codeobj_edf236a14f5145c2001a5486f9240237, module_plistlib, sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *) );
    frame_edf236a14f5145c2001a5486f9240237 = cache_frame_edf236a14f5145c2001a5486f9240237;

    // Push the new frame as the currently active one.
    pushFrameStack( frame_edf236a14f5145c2001a5486f9240237 );

    // Mark the frame object as in use, ref count 1 will be up for reuse.
    assert( Py_REFCNT( frame_edf236a14f5145c2001a5486f9240237 ) == 2 ); // Frame stack

    // Framed code:
    {
        PyObject *tmp_assign_source_1;
        PyObject *tmp_called_instance_1;
        PyObject *tmp_args_element_name_1;
        CHECK_OBJECT( par_self );
        tmp_called_instance_1 = par_self;
        CHECK_OBJECT( par_value );
        tmp_args_element_name_1 = par_value;
        frame_edf236a14f5145c2001a5486f9240237->m_frame.f_lineno = 823;
        {
            PyObject *call_args[] = { tmp_args_element_name_1 };
            tmp_assign_source_1 = CALL_METHOD_WITH_ARGS1( tmp_called_instance_1, const_str_plain__getrefnum, call_args );
        }

        if ( tmp_assign_source_1 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 823;
            type_description_1 = "oooooooooooo";
            goto frame_exception_exit_1;
        }
        assert( var_ref == NULL );
        var_ref = tmp_assign_source_1;
    }
    {
        PyObject *tmp_ass_subvalue_1;
        PyObject *tmp_called_instance_2;
        PyObject *tmp_source_name_1;
        PyObject *tmp_ass_subscribed_1;
        PyObject *tmp_source_name_2;
        PyObject *tmp_ass_subscript_1;
        CHECK_OBJECT( par_self );
        tmp_source_name_1 = par_self;
        tmp_called_instance_2 = LOOKUP_ATTRIBUTE( tmp_source_name_1, const_str_plain__fp );
        if ( tmp_called_instance_2 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 824;
            type_description_1 = "oooooooooooo";
            goto frame_exception_exit_1;
        }
        frame_edf236a14f5145c2001a5486f9240237->m_frame.f_lineno = 824;
        tmp_ass_subvalue_1 = CALL_METHOD_NO_ARGS( tmp_called_instance_2, const_str_plain_tell );
        Py_DECREF( tmp_called_instance_2 );
        if ( tmp_ass_subvalue_1 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 824;
            type_description_1 = "oooooooooooo";
            goto frame_exception_exit_1;
        }
        CHECK_OBJECT( par_self );
        tmp_source_name_2 = par_self;
        tmp_ass_subscribed_1 = LOOKUP_ATTRIBUTE( tmp_source_name_2, const_str_plain__object_offsets );
        if ( tmp_ass_subscribed_1 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
            Py_DECREF( tmp_ass_subvalue_1 );

            exception_lineno = 824;
            type_description_1 = "oooooooooooo";
            goto frame_exception_exit_1;
        }
        CHECK_OBJECT( var_ref );
        tmp_ass_subscript_1 = var_ref;
        tmp_result = SET_SUBSCRIPT( tmp_ass_subscribed_1, tmp_ass_subscript_1, tmp_ass_subvalue_1 );
        Py_DECREF( tmp_ass_subscribed_1 );
        Py_DECREF( tmp_ass_subvalue_1 );
        if ( tmp_result == false )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 824;
            type_description_1 = "oooooooooooo";
            goto frame_exception_exit_1;
        }
    }
    {
        nuitka_bool tmp_condition_result_1;
        PyObject *tmp_compexpr_left_1;
        PyObject *tmp_compexpr_right_1;
        CHECK_OBJECT( par_value );
        tmp_compexpr_left_1 = par_value;
        tmp_compexpr_right_1 = Py_None;
        tmp_condition_result_1 = ( tmp_compexpr_left_1 == tmp_compexpr_right_1 ) ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
        if ( tmp_condition_result_1 == NUITKA_BOOL_TRUE )
        {
            goto branch_yes_1;
        }
        else
        {
            goto branch_no_1;
        }
        branch_yes_1:;
        {
            PyObject *tmp_called_instance_3;
            PyObject *tmp_source_name_3;
            PyObject *tmp_call_result_1;
            CHECK_OBJECT( par_self );
            tmp_source_name_3 = par_self;
            tmp_called_instance_3 = LOOKUP_ATTRIBUTE( tmp_source_name_3, const_str_plain__fp );
            if ( tmp_called_instance_3 == NULL )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 826;
                type_description_1 = "oooooooooooo";
                goto frame_exception_exit_1;
            }
            frame_edf236a14f5145c2001a5486f9240237->m_frame.f_lineno = 826;
            tmp_call_result_1 = CALL_METHOD_WITH_ARGS1( tmp_called_instance_3, const_str_plain_write, &PyTuple_GET_ITEM( const_tuple_bytes_chr_0_tuple, 0 ) );

            Py_DECREF( tmp_called_instance_3 );
            if ( tmp_call_result_1 == NULL )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 826;
                type_description_1 = "oooooooooooo";
                goto frame_exception_exit_1;
            }
            Py_DECREF( tmp_call_result_1 );
        }
        goto branch_end_1;
        branch_no_1:;
        {
            nuitka_bool tmp_condition_result_2;
            PyObject *tmp_compexpr_left_2;
            PyObject *tmp_compexpr_right_2;
            CHECK_OBJECT( par_value );
            tmp_compexpr_left_2 = par_value;
            tmp_compexpr_right_2 = Py_False;
            tmp_condition_result_2 = ( tmp_compexpr_left_2 == tmp_compexpr_right_2 ) ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
            if ( tmp_condition_result_2 == NUITKA_BOOL_TRUE )
            {
                goto branch_yes_2;
            }
            else
            {
                goto branch_no_2;
            }
            branch_yes_2:;
            {
                PyObject *tmp_called_instance_4;
                PyObject *tmp_source_name_4;
                PyObject *tmp_call_result_2;
                CHECK_OBJECT( par_self );
                tmp_source_name_4 = par_self;
                tmp_called_instance_4 = LOOKUP_ATTRIBUTE( tmp_source_name_4, const_str_plain__fp );
                if ( tmp_called_instance_4 == NULL )
                {
                    assert( ERROR_OCCURRED() );

                    FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                    exception_lineno = 829;
                    type_description_1 = "oooooooooooo";
                    goto frame_exception_exit_1;
                }
                frame_edf236a14f5145c2001a5486f9240237->m_frame.f_lineno = 829;
                tmp_call_result_2 = CALL_METHOD_WITH_ARGS1( tmp_called_instance_4, const_str_plain_write, &PyTuple_GET_ITEM( const_tuple_bytes_chr_8_tuple, 0 ) );

                Py_DECREF( tmp_called_instance_4 );
                if ( tmp_call_result_2 == NULL )
                {
                    assert( ERROR_OCCURRED() );

                    FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                    exception_lineno = 829;
                    type_description_1 = "oooooooooooo";
                    goto frame_exception_exit_1;
                }
                Py_DECREF( tmp_call_result_2 );
            }
            goto branch_end_2;
            branch_no_2:;
            {
                nuitka_bool tmp_condition_result_3;
                PyObject *tmp_compexpr_left_3;
                PyObject *tmp_compexpr_right_3;
                CHECK_OBJECT( par_value );
                tmp_compexpr_left_3 = par_value;
                tmp_compexpr_right_3 = Py_True;
                tmp_condition_result_3 = ( tmp_compexpr_left_3 == tmp_compexpr_right_3 ) ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
                if ( tmp_condition_result_3 == NUITKA_BOOL_TRUE )
                {
                    goto branch_yes_3;
                }
                else
                {
                    goto branch_no_3;
                }
                branch_yes_3:;
                {
                    PyObject *tmp_called_instance_5;
                    PyObject *tmp_source_name_5;
                    PyObject *tmp_call_result_3;
                    CHECK_OBJECT( par_self );
                    tmp_source_name_5 = par_self;
                    tmp_called_instance_5 = LOOKUP_ATTRIBUTE( tmp_source_name_5, const_str_plain__fp );
                    if ( tmp_called_instance_5 == NULL )
                    {
                        assert( ERROR_OCCURRED() );

                        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                        exception_lineno = 832;
                        type_description_1 = "oooooooooooo";
                        goto frame_exception_exit_1;
                    }
                    frame_edf236a14f5145c2001a5486f9240237->m_frame.f_lineno = 832;
                    tmp_call_result_3 = CALL_METHOD_WITH_ARGS1( tmp_called_instance_5, const_str_plain_write, &PyTuple_GET_ITEM( const_tuple_bytes_chr_9_tuple, 0 ) );

                    Py_DECREF( tmp_called_instance_5 );
                    if ( tmp_call_result_3 == NULL )
                    {
                        assert( ERROR_OCCURRED() );

                        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                        exception_lineno = 832;
                        type_description_1 = "oooooooooooo";
                        goto frame_exception_exit_1;
                    }
                    Py_DECREF( tmp_call_result_3 );
                }
                goto branch_end_3;
                branch_no_3:;
                {
                    nuitka_bool tmp_condition_result_4;
                    PyObject *tmp_isinstance_inst_1;
                    PyObject *tmp_isinstance_cls_1;
                    CHECK_OBJECT( par_value );
                    tmp_isinstance_inst_1 = par_value;
                    tmp_isinstance_cls_1 = (PyObject *)&PyLong_Type;
                    tmp_res = Nuitka_IsInstance( tmp_isinstance_inst_1, tmp_isinstance_cls_1 );
                    if ( tmp_res == -1 )
                    {
                        assert( ERROR_OCCURRED() );

                        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                        exception_lineno = 834;
                        type_description_1 = "oooooooooooo";
                        goto frame_exception_exit_1;
                    }
                    tmp_condition_result_4 = ( tmp_res != 0 ) ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
                    if ( tmp_condition_result_4 == NUITKA_BOOL_TRUE )
                    {
                        goto branch_yes_4;
                    }
                    else
                    {
                        goto branch_no_4;
                    }
                    branch_yes_4:;
                    {
                        nuitka_bool tmp_condition_result_5;
                        PyObject *tmp_compexpr_left_4;
                        PyObject *tmp_compexpr_right_4;
                        CHECK_OBJECT( par_value );
                        tmp_compexpr_left_4 = par_value;
                        tmp_compexpr_right_4 = const_int_0;
                        tmp_res = RICH_COMPARE_BOOL_LT_OBJECT_OBJECT( tmp_compexpr_left_4, tmp_compexpr_right_4 );
                        if ( tmp_res == -1 )
                        {
                            assert( ERROR_OCCURRED() );

                            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                            exception_lineno = 835;
                            type_description_1 = "oooooooooooo";
                            goto frame_exception_exit_1;
                        }
                        tmp_condition_result_5 = ( tmp_res != 0 ) ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
                        if ( tmp_condition_result_5 == NUITKA_BOOL_TRUE )
                        {
                            goto branch_yes_5;
                        }
                        else
                        {
                            goto branch_no_5;
                        }
                        branch_yes_5:;
                        // Tried code:
                        {
                            PyObject *tmp_called_name_1;
                            PyObject *tmp_source_name_6;
                            PyObject *tmp_source_name_7;
                            PyObject *tmp_call_result_4;
                            PyObject *tmp_args_element_name_2;
                            PyObject *tmp_called_instance_6;
                            PyObject *tmp_mvar_value_1;
                            PyObject *tmp_args_element_name_3;
                            PyObject *tmp_args_element_name_4;
                            PyObject *tmp_args_element_name_5;
                            CHECK_OBJECT( par_self );
                            tmp_source_name_7 = par_self;
                            tmp_source_name_6 = LOOKUP_ATTRIBUTE( tmp_source_name_7, const_str_plain__fp );
                            if ( tmp_source_name_6 == NULL )
                            {
                                assert( ERROR_OCCURRED() );

                                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                                exception_lineno = 837;
                                type_description_1 = "oooooooooooo";
                                goto try_except_handler_2;
                            }
                            tmp_called_name_1 = LOOKUP_ATTRIBUTE( tmp_source_name_6, const_str_plain_write );
                            Py_DECREF( tmp_source_name_6 );
                            if ( tmp_called_name_1 == NULL )
                            {
                                assert( ERROR_OCCURRED() );

                                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                                exception_lineno = 837;
                                type_description_1 = "oooooooooooo";
                                goto try_except_handler_2;
                            }
                            tmp_mvar_value_1 = GET_STRING_DICT_VALUE( moduledict_plistlib, (Nuitka_StringObject *)const_str_plain_struct );

                            if (unlikely( tmp_mvar_value_1 == NULL ))
                            {
                                tmp_mvar_value_1 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_struct );
                            }

                            if ( tmp_mvar_value_1 == NULL )
                            {
                                Py_DECREF( tmp_called_name_1 );
                                exception_type = PyExc_NameError;
                                Py_INCREF( exception_type );
                                exception_value = PyUnicode_FromFormat( "name '%s' is not defined", "struct" );
                                exception_tb = NULL;
                                NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
                                CHAIN_EXCEPTION( exception_value );

                                exception_lineno = 837;
                                type_description_1 = "oooooooooooo";
                                goto try_except_handler_2;
                            }

                            tmp_called_instance_6 = tmp_mvar_value_1;
                            tmp_args_element_name_3 = const_str_digest_1f4f58bc6fea283b13f6c2311a470c86;
                            tmp_args_element_name_4 = const_int_pos_19;
                            CHECK_OBJECT( par_value );
                            tmp_args_element_name_5 = par_value;
                            frame_edf236a14f5145c2001a5486f9240237->m_frame.f_lineno = 837;
                            {
                                PyObject *call_args[] = { tmp_args_element_name_3, tmp_args_element_name_4, tmp_args_element_name_5 };
                                tmp_args_element_name_2 = CALL_METHOD_WITH_ARGS3( tmp_called_instance_6, const_str_plain_pack, call_args );
                            }

                            if ( tmp_args_element_name_2 == NULL )
                            {
                                assert( ERROR_OCCURRED() );

                                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
                                Py_DECREF( tmp_called_name_1 );

                                exception_lineno = 837;
                                type_description_1 = "oooooooooooo";
                                goto try_except_handler_2;
                            }
                            frame_edf236a14f5145c2001a5486f9240237->m_frame.f_lineno = 837;
                            {
                                PyObject *call_args[] = { tmp_args_element_name_2 };
                                tmp_call_result_4 = CALL_FUNCTION_WITH_ARGS1( tmp_called_name_1, call_args );
                            }

                            Py_DECREF( tmp_called_name_1 );
                            Py_DECREF( tmp_args_element_name_2 );
                            if ( tmp_call_result_4 == NULL )
                            {
                                assert( ERROR_OCCURRED() );

                                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                                exception_lineno = 837;
                                type_description_1 = "oooooooooooo";
                                goto try_except_handler_2;
                            }
                            Py_DECREF( tmp_call_result_4 );
                        }
                        goto try_end_1;
                        // Exception handler code:
                        try_except_handler_2:;
                        exception_keeper_type_1 = exception_type;
                        exception_keeper_value_1 = exception_value;
                        exception_keeper_tb_1 = exception_tb;
                        exception_keeper_lineno_1 = exception_lineno;
                        exception_type = NULL;
                        exception_value = NULL;
                        exception_tb = NULL;
                        exception_lineno = 0;

                        // Preserve existing published exception.
                        exception_preserved_type_1 = EXC_TYPE(PyThreadState_GET());
                        Py_XINCREF( exception_preserved_type_1 );
                        exception_preserved_value_1 = EXC_VALUE(PyThreadState_GET());
                        Py_XINCREF( exception_preserved_value_1 );
                        exception_preserved_tb_1 = (PyTracebackObject *)EXC_TRACEBACK(PyThreadState_GET());
                        Py_XINCREF( exception_preserved_tb_1 );

                        if ( exception_keeper_tb_1 == NULL )
                        {
                            exception_keeper_tb_1 = MAKE_TRACEBACK( frame_edf236a14f5145c2001a5486f9240237, exception_keeper_lineno_1 );
                        }
                        else if ( exception_keeper_lineno_1 != 0 )
                        {
                            exception_keeper_tb_1 = ADD_TRACEBACK( exception_keeper_tb_1, frame_edf236a14f5145c2001a5486f9240237, exception_keeper_lineno_1 );
                        }

                        NORMALIZE_EXCEPTION( &exception_keeper_type_1, &exception_keeper_value_1, &exception_keeper_tb_1 );
                        PyException_SetTraceback( exception_keeper_value_1, (PyObject *)exception_keeper_tb_1 );
                        PUBLISH_EXCEPTION( &exception_keeper_type_1, &exception_keeper_value_1, &exception_keeper_tb_1 );
                        // Tried code:
                        {
                            nuitka_bool tmp_condition_result_6;
                            PyObject *tmp_compexpr_left_5;
                            PyObject *tmp_compexpr_right_5;
                            PyObject *tmp_source_name_8;
                            PyObject *tmp_mvar_value_2;
                            tmp_compexpr_left_5 = EXC_TYPE(PyThreadState_GET());
                            tmp_mvar_value_2 = GET_STRING_DICT_VALUE( moduledict_plistlib, (Nuitka_StringObject *)const_str_plain_struct );

                            if (unlikely( tmp_mvar_value_2 == NULL ))
                            {
                                tmp_mvar_value_2 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_struct );
                            }

                            if ( tmp_mvar_value_2 == NULL )
                            {

                                exception_type = PyExc_NameError;
                                Py_INCREF( exception_type );
                                exception_value = PyUnicode_FromFormat( "name '%s' is not defined", "struct" );
                                exception_tb = NULL;
                                NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
                                CHAIN_EXCEPTION( exception_value );

                                exception_lineno = 838;
                                type_description_1 = "oooooooooooo";
                                goto try_except_handler_3;
                            }

                            tmp_source_name_8 = tmp_mvar_value_2;
                            tmp_compexpr_right_5 = LOOKUP_ATTRIBUTE( tmp_source_name_8, const_str_plain_error );
                            if ( tmp_compexpr_right_5 == NULL )
                            {
                                assert( ERROR_OCCURRED() );

                                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                                exception_lineno = 838;
                                type_description_1 = "oooooooooooo";
                                goto try_except_handler_3;
                            }
                            tmp_res = EXCEPTION_MATCH_BOOL( tmp_compexpr_left_5, tmp_compexpr_right_5 );
                            Py_DECREF( tmp_compexpr_right_5 );
                            if ( tmp_res == -1 )
                            {
                                assert( ERROR_OCCURRED() );

                                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                                exception_lineno = 838;
                                type_description_1 = "oooooooooooo";
                                goto try_except_handler_3;
                            }
                            tmp_condition_result_6 = ( tmp_res != 0 ) ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
                            if ( tmp_condition_result_6 == NUITKA_BOOL_TRUE )
                            {
                                goto branch_yes_6;
                            }
                            else
                            {
                                goto branch_no_6;
                            }
                            branch_yes_6:;
                            {
                                PyObject *tmp_raise_type_1;
                                PyObject *tmp_make_exception_arg_1;
                                PyObject *tmp_raise_cause_1;
                                CHECK_OBJECT( par_value );
                                tmp_make_exception_arg_1 = par_value;
                                frame_edf236a14f5145c2001a5486f9240237->m_frame.f_lineno = 839;
                                {
                                    PyObject *call_args[] = { tmp_make_exception_arg_1 };
                                    tmp_raise_type_1 = CALL_FUNCTION_WITH_ARGS1( PyExc_OverflowError, call_args );
                                }

                                assert( !(tmp_raise_type_1 == NULL) );
                                tmp_raise_cause_1 = Py_None;
                                exception_type = tmp_raise_type_1;
                                exception_value = NULL;
                                Py_INCREF( tmp_raise_cause_1 );
                                exception_lineno = 839;
                                RAISE_EXCEPTION_WITH_CAUSE( &exception_type, &exception_value, &exception_tb, tmp_raise_cause_1 );
                                type_description_1 = "oooooooooooo";
                                goto try_except_handler_3;
                            }
                            goto branch_end_6;
                            branch_no_6:;
                            tmp_result = RERAISE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
                            if (unlikely( tmp_result == false ))
                            {
                                exception_lineno = 836;
                            }

                            if (exception_tb && exception_tb->tb_frame == &frame_edf236a14f5145c2001a5486f9240237->m_frame) frame_edf236a14f5145c2001a5486f9240237->m_frame.f_lineno = exception_tb->tb_lineno;
                            type_description_1 = "oooooooooooo";
                            goto try_except_handler_3;
                            branch_end_6:;
                        }
                        // tried codes exits in all cases
                        NUITKA_CANNOT_GET_HERE( plistlib$$$function_61__write_object );
                        return NULL;
                        // Exception handler code:
                        try_except_handler_3:;
                        exception_keeper_type_2 = exception_type;
                        exception_keeper_value_2 = exception_value;
                        exception_keeper_tb_2 = exception_tb;
                        exception_keeper_lineno_2 = exception_lineno;
                        exception_type = NULL;
                        exception_value = NULL;
                        exception_tb = NULL;
                        exception_lineno = 0;

                        // Restore previous exception.
                        SET_CURRENT_EXCEPTION( exception_preserved_type_1, exception_preserved_value_1, exception_preserved_tb_1 );
                        // Re-raise.
                        exception_type = exception_keeper_type_2;
                        exception_value = exception_keeper_value_2;
                        exception_tb = exception_keeper_tb_2;
                        exception_lineno = exception_keeper_lineno_2;

                        goto frame_exception_exit_1;
                        // End of try:
                        // End of try:
                        try_end_1:;
                        goto branch_end_5;
                        branch_no_5:;
                        {
                            nuitka_bool tmp_condition_result_7;
                            PyObject *tmp_compexpr_left_6;
                            PyObject *tmp_compexpr_right_6;
                            CHECK_OBJECT( par_value );
                            tmp_compexpr_left_6 = par_value;
                            tmp_compexpr_right_6 = const_int_pos_256;
                            tmp_res = RICH_COMPARE_BOOL_LT_OBJECT_OBJECT( tmp_compexpr_left_6, tmp_compexpr_right_6 );
                            if ( tmp_res == -1 )
                            {
                                assert( ERROR_OCCURRED() );

                                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                                exception_lineno = 840;
                                type_description_1 = "oooooooooooo";
                                goto frame_exception_exit_1;
                            }
                            tmp_condition_result_7 = ( tmp_res != 0 ) ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
                            if ( tmp_condition_result_7 == NUITKA_BOOL_TRUE )
                            {
                                goto branch_yes_7;
                            }
                            else
                            {
                                goto branch_no_7;
                            }
                            branch_yes_7:;
                            {
                                PyObject *tmp_called_name_2;
                                PyObject *tmp_source_name_9;
                                PyObject *tmp_source_name_10;
                                PyObject *tmp_call_result_5;
                                PyObject *tmp_args_element_name_6;
                                PyObject *tmp_called_instance_7;
                                PyObject *tmp_mvar_value_3;
                                PyObject *tmp_args_element_name_7;
                                PyObject *tmp_args_element_name_8;
                                PyObject *tmp_args_element_name_9;
                                CHECK_OBJECT( par_self );
                                tmp_source_name_10 = par_self;
                                tmp_source_name_9 = LOOKUP_ATTRIBUTE( tmp_source_name_10, const_str_plain__fp );
                                if ( tmp_source_name_9 == NULL )
                                {
                                    assert( ERROR_OCCURRED() );

                                    FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                                    exception_lineno = 841;
                                    type_description_1 = "oooooooooooo";
                                    goto frame_exception_exit_1;
                                }
                                tmp_called_name_2 = LOOKUP_ATTRIBUTE( tmp_source_name_9, const_str_plain_write );
                                Py_DECREF( tmp_source_name_9 );
                                if ( tmp_called_name_2 == NULL )
                                {
                                    assert( ERROR_OCCURRED() );

                                    FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                                    exception_lineno = 841;
                                    type_description_1 = "oooooooooooo";
                                    goto frame_exception_exit_1;
                                }
                                tmp_mvar_value_3 = GET_STRING_DICT_VALUE( moduledict_plistlib, (Nuitka_StringObject *)const_str_plain_struct );

                                if (unlikely( tmp_mvar_value_3 == NULL ))
                                {
                                    tmp_mvar_value_3 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_struct );
                                }

                                if ( tmp_mvar_value_3 == NULL )
                                {
                                    Py_DECREF( tmp_called_name_2 );
                                    exception_type = PyExc_NameError;
                                    Py_INCREF( exception_type );
                                    exception_value = PyUnicode_FromFormat( "name '%s' is not defined", "struct" );
                                    exception_tb = NULL;
                                    NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
                                    CHAIN_EXCEPTION( exception_value );

                                    exception_lineno = 841;
                                    type_description_1 = "oooooooooooo";
                                    goto frame_exception_exit_1;
                                }

                                tmp_called_instance_7 = tmp_mvar_value_3;
                                tmp_args_element_name_7 = const_str_digest_3ab646e83642152a9eac19a64a983145;
                                tmp_args_element_name_8 = const_int_pos_16;
                                CHECK_OBJECT( par_value );
                                tmp_args_element_name_9 = par_value;
                                frame_edf236a14f5145c2001a5486f9240237->m_frame.f_lineno = 841;
                                {
                                    PyObject *call_args[] = { tmp_args_element_name_7, tmp_args_element_name_8, tmp_args_element_name_9 };
                                    tmp_args_element_name_6 = CALL_METHOD_WITH_ARGS3( tmp_called_instance_7, const_str_plain_pack, call_args );
                                }

                                if ( tmp_args_element_name_6 == NULL )
                                {
                                    assert( ERROR_OCCURRED() );

                                    FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
                                    Py_DECREF( tmp_called_name_2 );

                                    exception_lineno = 841;
                                    type_description_1 = "oooooooooooo";
                                    goto frame_exception_exit_1;
                                }
                                frame_edf236a14f5145c2001a5486f9240237->m_frame.f_lineno = 841;
                                {
                                    PyObject *call_args[] = { tmp_args_element_name_6 };
                                    tmp_call_result_5 = CALL_FUNCTION_WITH_ARGS1( tmp_called_name_2, call_args );
                                }

                                Py_DECREF( tmp_called_name_2 );
                                Py_DECREF( tmp_args_element_name_6 );
                                if ( tmp_call_result_5 == NULL )
                                {
                                    assert( ERROR_OCCURRED() );

                                    FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                                    exception_lineno = 841;
                                    type_description_1 = "oooooooooooo";
                                    goto frame_exception_exit_1;
                                }
                                Py_DECREF( tmp_call_result_5 );
                            }
                            goto branch_end_7;
                            branch_no_7:;
                            {
                                nuitka_bool tmp_condition_result_8;
                                PyObject *tmp_compexpr_left_7;
                                PyObject *tmp_compexpr_right_7;
                                CHECK_OBJECT( par_value );
                                tmp_compexpr_left_7 = par_value;
                                tmp_compexpr_right_7 = const_int_pos_65536;
                                tmp_res = RICH_COMPARE_BOOL_LT_OBJECT_OBJECT( tmp_compexpr_left_7, tmp_compexpr_right_7 );
                                if ( tmp_res == -1 )
                                {
                                    assert( ERROR_OCCURRED() );

                                    FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                                    exception_lineno = 842;
                                    type_description_1 = "oooooooooooo";
                                    goto frame_exception_exit_1;
                                }
                                tmp_condition_result_8 = ( tmp_res != 0 ) ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
                                if ( tmp_condition_result_8 == NUITKA_BOOL_TRUE )
                                {
                                    goto branch_yes_8;
                                }
                                else
                                {
                                    goto branch_no_8;
                                }
                                branch_yes_8:;
                                {
                                    PyObject *tmp_called_name_3;
                                    PyObject *tmp_source_name_11;
                                    PyObject *tmp_source_name_12;
                                    PyObject *tmp_call_result_6;
                                    PyObject *tmp_args_element_name_10;
                                    PyObject *tmp_called_instance_8;
                                    PyObject *tmp_mvar_value_4;
                                    PyObject *tmp_args_element_name_11;
                                    PyObject *tmp_args_element_name_12;
                                    PyObject *tmp_args_element_name_13;
                                    CHECK_OBJECT( par_self );
                                    tmp_source_name_12 = par_self;
                                    tmp_source_name_11 = LOOKUP_ATTRIBUTE( tmp_source_name_12, const_str_plain__fp );
                                    if ( tmp_source_name_11 == NULL )
                                    {
                                        assert( ERROR_OCCURRED() );

                                        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                                        exception_lineno = 843;
                                        type_description_1 = "oooooooooooo";
                                        goto frame_exception_exit_1;
                                    }
                                    tmp_called_name_3 = LOOKUP_ATTRIBUTE( tmp_source_name_11, const_str_plain_write );
                                    Py_DECREF( tmp_source_name_11 );
                                    if ( tmp_called_name_3 == NULL )
                                    {
                                        assert( ERROR_OCCURRED() );

                                        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                                        exception_lineno = 843;
                                        type_description_1 = "oooooooooooo";
                                        goto frame_exception_exit_1;
                                    }
                                    tmp_mvar_value_4 = GET_STRING_DICT_VALUE( moduledict_plistlib, (Nuitka_StringObject *)const_str_plain_struct );

                                    if (unlikely( tmp_mvar_value_4 == NULL ))
                                    {
                                        tmp_mvar_value_4 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_struct );
                                    }

                                    if ( tmp_mvar_value_4 == NULL )
                                    {
                                        Py_DECREF( tmp_called_name_3 );
                                        exception_type = PyExc_NameError;
                                        Py_INCREF( exception_type );
                                        exception_value = PyUnicode_FromFormat( "name '%s' is not defined", "struct" );
                                        exception_tb = NULL;
                                        NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
                                        CHAIN_EXCEPTION( exception_value );

                                        exception_lineno = 843;
                                        type_description_1 = "oooooooooooo";
                                        goto frame_exception_exit_1;
                                    }

                                    tmp_called_instance_8 = tmp_mvar_value_4;
                                    tmp_args_element_name_11 = const_str_digest_b6db9426a48b9cf0810b1b19f24bd616;
                                    tmp_args_element_name_12 = const_int_pos_17;
                                    CHECK_OBJECT( par_value );
                                    tmp_args_element_name_13 = par_value;
                                    frame_edf236a14f5145c2001a5486f9240237->m_frame.f_lineno = 843;
                                    {
                                        PyObject *call_args[] = { tmp_args_element_name_11, tmp_args_element_name_12, tmp_args_element_name_13 };
                                        tmp_args_element_name_10 = CALL_METHOD_WITH_ARGS3( tmp_called_instance_8, const_str_plain_pack, call_args );
                                    }

                                    if ( tmp_args_element_name_10 == NULL )
                                    {
                                        assert( ERROR_OCCURRED() );

                                        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
                                        Py_DECREF( tmp_called_name_3 );

                                        exception_lineno = 843;
                                        type_description_1 = "oooooooooooo";
                                        goto frame_exception_exit_1;
                                    }
                                    frame_edf236a14f5145c2001a5486f9240237->m_frame.f_lineno = 843;
                                    {
                                        PyObject *call_args[] = { tmp_args_element_name_10 };
                                        tmp_call_result_6 = CALL_FUNCTION_WITH_ARGS1( tmp_called_name_3, call_args );
                                    }

                                    Py_DECREF( tmp_called_name_3 );
                                    Py_DECREF( tmp_args_element_name_10 );
                                    if ( tmp_call_result_6 == NULL )
                                    {
                                        assert( ERROR_OCCURRED() );

                                        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                                        exception_lineno = 843;
                                        type_description_1 = "oooooooooooo";
                                        goto frame_exception_exit_1;
                                    }
                                    Py_DECREF( tmp_call_result_6 );
                                }
                                goto branch_end_8;
                                branch_no_8:;
                                {
                                    nuitka_bool tmp_condition_result_9;
                                    PyObject *tmp_compexpr_left_8;
                                    PyObject *tmp_compexpr_right_8;
                                    CHECK_OBJECT( par_value );
                                    tmp_compexpr_left_8 = par_value;
                                    tmp_compexpr_right_8 = const_int_pos_4294967296;
                                    tmp_res = RICH_COMPARE_BOOL_LT_OBJECT_OBJECT( tmp_compexpr_left_8, tmp_compexpr_right_8 );
                                    if ( tmp_res == -1 )
                                    {
                                        assert( ERROR_OCCURRED() );

                                        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                                        exception_lineno = 844;
                                        type_description_1 = "oooooooooooo";
                                        goto frame_exception_exit_1;
                                    }
                                    tmp_condition_result_9 = ( tmp_res != 0 ) ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
                                    if ( tmp_condition_result_9 == NUITKA_BOOL_TRUE )
                                    {
                                        goto branch_yes_9;
                                    }
                                    else
                                    {
                                        goto branch_no_9;
                                    }
                                    branch_yes_9:;
                                    {
                                        PyObject *tmp_called_name_4;
                                        PyObject *tmp_source_name_13;
                                        PyObject *tmp_source_name_14;
                                        PyObject *tmp_call_result_7;
                                        PyObject *tmp_args_element_name_14;
                                        PyObject *tmp_called_instance_9;
                                        PyObject *tmp_mvar_value_5;
                                        PyObject *tmp_args_element_name_15;
                                        PyObject *tmp_args_element_name_16;
                                        PyObject *tmp_args_element_name_17;
                                        CHECK_OBJECT( par_self );
                                        tmp_source_name_14 = par_self;
                                        tmp_source_name_13 = LOOKUP_ATTRIBUTE( tmp_source_name_14, const_str_plain__fp );
                                        if ( tmp_source_name_13 == NULL )
                                        {
                                            assert( ERROR_OCCURRED() );

                                            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                                            exception_lineno = 845;
                                            type_description_1 = "oooooooooooo";
                                            goto frame_exception_exit_1;
                                        }
                                        tmp_called_name_4 = LOOKUP_ATTRIBUTE( tmp_source_name_13, const_str_plain_write );
                                        Py_DECREF( tmp_source_name_13 );
                                        if ( tmp_called_name_4 == NULL )
                                        {
                                            assert( ERROR_OCCURRED() );

                                            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                                            exception_lineno = 845;
                                            type_description_1 = "oooooooooooo";
                                            goto frame_exception_exit_1;
                                        }
                                        tmp_mvar_value_5 = GET_STRING_DICT_VALUE( moduledict_plistlib, (Nuitka_StringObject *)const_str_plain_struct );

                                        if (unlikely( tmp_mvar_value_5 == NULL ))
                                        {
                                            tmp_mvar_value_5 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_struct );
                                        }

                                        if ( tmp_mvar_value_5 == NULL )
                                        {
                                            Py_DECREF( tmp_called_name_4 );
                                            exception_type = PyExc_NameError;
                                            Py_INCREF( exception_type );
                                            exception_value = PyUnicode_FromFormat( "name '%s' is not defined", "struct" );
                                            exception_tb = NULL;
                                            NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
                                            CHAIN_EXCEPTION( exception_value );

                                            exception_lineno = 845;
                                            type_description_1 = "oooooooooooo";
                                            goto frame_exception_exit_1;
                                        }

                                        tmp_called_instance_9 = tmp_mvar_value_5;
                                        tmp_args_element_name_15 = const_str_digest_95c6edc8377269178fe38ea261bee446;
                                        tmp_args_element_name_16 = const_int_pos_18;
                                        CHECK_OBJECT( par_value );
                                        tmp_args_element_name_17 = par_value;
                                        frame_edf236a14f5145c2001a5486f9240237->m_frame.f_lineno = 845;
                                        {
                                            PyObject *call_args[] = { tmp_args_element_name_15, tmp_args_element_name_16, tmp_args_element_name_17 };
                                            tmp_args_element_name_14 = CALL_METHOD_WITH_ARGS3( tmp_called_instance_9, const_str_plain_pack, call_args );
                                        }

                                        if ( tmp_args_element_name_14 == NULL )
                                        {
                                            assert( ERROR_OCCURRED() );

                                            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
                                            Py_DECREF( tmp_called_name_4 );

                                            exception_lineno = 845;
                                            type_description_1 = "oooooooooooo";
                                            goto frame_exception_exit_1;
                                        }
                                        frame_edf236a14f5145c2001a5486f9240237->m_frame.f_lineno = 845;
                                        {
                                            PyObject *call_args[] = { tmp_args_element_name_14 };
                                            tmp_call_result_7 = CALL_FUNCTION_WITH_ARGS1( tmp_called_name_4, call_args );
                                        }

                                        Py_DECREF( tmp_called_name_4 );
                                        Py_DECREF( tmp_args_element_name_14 );
                                        if ( tmp_call_result_7 == NULL )
                                        {
                                            assert( ERROR_OCCURRED() );

                                            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                                            exception_lineno = 845;
                                            type_description_1 = "oooooooooooo";
                                            goto frame_exception_exit_1;
                                        }
                                        Py_DECREF( tmp_call_result_7 );
                                    }
                                    goto branch_end_9;
                                    branch_no_9:;
                                    {
                                        nuitka_bool tmp_condition_result_10;
                                        PyObject *tmp_compexpr_left_9;
                                        PyObject *tmp_compexpr_right_9;
                                        CHECK_OBJECT( par_value );
                                        tmp_compexpr_left_9 = par_value;
                                        tmp_compexpr_right_9 = const_int_pos_9223372036854775808;
                                        tmp_res = RICH_COMPARE_BOOL_LT_OBJECT_OBJECT( tmp_compexpr_left_9, tmp_compexpr_right_9 );
                                        if ( tmp_res == -1 )
                                        {
                                            assert( ERROR_OCCURRED() );

                                            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                                            exception_lineno = 846;
                                            type_description_1 = "oooooooooooo";
                                            goto frame_exception_exit_1;
                                        }
                                        tmp_condition_result_10 = ( tmp_res != 0 ) ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
                                        if ( tmp_condition_result_10 == NUITKA_BOOL_TRUE )
                                        {
                                            goto branch_yes_10;
                                        }
                                        else
                                        {
                                            goto branch_no_10;
                                        }
                                        branch_yes_10:;
                                        {
                                            PyObject *tmp_called_name_5;
                                            PyObject *tmp_source_name_15;
                                            PyObject *tmp_source_name_16;
                                            PyObject *tmp_call_result_8;
                                            PyObject *tmp_args_element_name_18;
                                            PyObject *tmp_called_instance_10;
                                            PyObject *tmp_mvar_value_6;
                                            PyObject *tmp_args_element_name_19;
                                            PyObject *tmp_args_element_name_20;
                                            PyObject *tmp_args_element_name_21;
                                            CHECK_OBJECT( par_self );
                                            tmp_source_name_16 = par_self;
                                            tmp_source_name_15 = LOOKUP_ATTRIBUTE( tmp_source_name_16, const_str_plain__fp );
                                            if ( tmp_source_name_15 == NULL )
                                            {
                                                assert( ERROR_OCCURRED() );

                                                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                                                exception_lineno = 847;
                                                type_description_1 = "oooooooooooo";
                                                goto frame_exception_exit_1;
                                            }
                                            tmp_called_name_5 = LOOKUP_ATTRIBUTE( tmp_source_name_15, const_str_plain_write );
                                            Py_DECREF( tmp_source_name_15 );
                                            if ( tmp_called_name_5 == NULL )
                                            {
                                                assert( ERROR_OCCURRED() );

                                                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                                                exception_lineno = 847;
                                                type_description_1 = "oooooooooooo";
                                                goto frame_exception_exit_1;
                                            }
                                            tmp_mvar_value_6 = GET_STRING_DICT_VALUE( moduledict_plistlib, (Nuitka_StringObject *)const_str_plain_struct );

                                            if (unlikely( tmp_mvar_value_6 == NULL ))
                                            {
                                                tmp_mvar_value_6 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_struct );
                                            }

                                            if ( tmp_mvar_value_6 == NULL )
                                            {
                                                Py_DECREF( tmp_called_name_5 );
                                                exception_type = PyExc_NameError;
                                                Py_INCREF( exception_type );
                                                exception_value = PyUnicode_FromFormat( "name '%s' is not defined", "struct" );
                                                exception_tb = NULL;
                                                NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
                                                CHAIN_EXCEPTION( exception_value );

                                                exception_lineno = 847;
                                                type_description_1 = "oooooooooooo";
                                                goto frame_exception_exit_1;
                                            }

                                            tmp_called_instance_10 = tmp_mvar_value_6;
                                            tmp_args_element_name_19 = const_str_digest_2e3858af0e538d1c2134ccf4748c93e8;
                                            tmp_args_element_name_20 = const_int_pos_19;
                                            CHECK_OBJECT( par_value );
                                            tmp_args_element_name_21 = par_value;
                                            frame_edf236a14f5145c2001a5486f9240237->m_frame.f_lineno = 847;
                                            {
                                                PyObject *call_args[] = { tmp_args_element_name_19, tmp_args_element_name_20, tmp_args_element_name_21 };
                                                tmp_args_element_name_18 = CALL_METHOD_WITH_ARGS3( tmp_called_instance_10, const_str_plain_pack, call_args );
                                            }

                                            if ( tmp_args_element_name_18 == NULL )
                                            {
                                                assert( ERROR_OCCURRED() );

                                                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
                                                Py_DECREF( tmp_called_name_5 );

                                                exception_lineno = 847;
                                                type_description_1 = "oooooooooooo";
                                                goto frame_exception_exit_1;
                                            }
                                            frame_edf236a14f5145c2001a5486f9240237->m_frame.f_lineno = 847;
                                            {
                                                PyObject *call_args[] = { tmp_args_element_name_18 };
                                                tmp_call_result_8 = CALL_FUNCTION_WITH_ARGS1( tmp_called_name_5, call_args );
                                            }

                                            Py_DECREF( tmp_called_name_5 );
                                            Py_DECREF( tmp_args_element_name_18 );
                                            if ( tmp_call_result_8 == NULL )
                                            {
                                                assert( ERROR_OCCURRED() );

                                                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                                                exception_lineno = 847;
                                                type_description_1 = "oooooooooooo";
                                                goto frame_exception_exit_1;
                                            }
                                            Py_DECREF( tmp_call_result_8 );
                                        }
                                        goto branch_end_10;
                                        branch_no_10:;
                                        {
                                            nuitka_bool tmp_condition_result_11;
                                            PyObject *tmp_compexpr_left_10;
                                            PyObject *tmp_compexpr_right_10;
                                            CHECK_OBJECT( par_value );
                                            tmp_compexpr_left_10 = par_value;
                                            tmp_compexpr_right_10 = const_int_pos_18446744073709551616;
                                            tmp_res = RICH_COMPARE_BOOL_LT_OBJECT_OBJECT( tmp_compexpr_left_10, tmp_compexpr_right_10 );
                                            if ( tmp_res == -1 )
                                            {
                                                assert( ERROR_OCCURRED() );

                                                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                                                exception_lineno = 848;
                                                type_description_1 = "oooooooooooo";
                                                goto frame_exception_exit_1;
                                            }
                                            tmp_condition_result_11 = ( tmp_res != 0 ) ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
                                            if ( tmp_condition_result_11 == NUITKA_BOOL_TRUE )
                                            {
                                                goto branch_yes_11;
                                            }
                                            else
                                            {
                                                goto branch_no_11;
                                            }
                                            branch_yes_11:;
                                            {
                                                PyObject *tmp_called_name_6;
                                                PyObject *tmp_source_name_17;
                                                PyObject *tmp_source_name_18;
                                                PyObject *tmp_call_result_9;
                                                PyObject *tmp_args_element_name_22;
                                                PyObject *tmp_left_name_1;
                                                PyObject *tmp_right_name_1;
                                                PyObject *tmp_called_name_7;
                                                PyObject *tmp_source_name_19;
                                                PyObject *tmp_args_name_1;
                                                PyObject *tmp_kw_name_1;
                                                CHECK_OBJECT( par_self );
                                                tmp_source_name_18 = par_self;
                                                tmp_source_name_17 = LOOKUP_ATTRIBUTE( tmp_source_name_18, const_str_plain__fp );
                                                if ( tmp_source_name_17 == NULL )
                                                {
                                                    assert( ERROR_OCCURRED() );

                                                    FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                                                    exception_lineno = 849;
                                                    type_description_1 = "oooooooooooo";
                                                    goto frame_exception_exit_1;
                                                }
                                                tmp_called_name_6 = LOOKUP_ATTRIBUTE( tmp_source_name_17, const_str_plain_write );
                                                Py_DECREF( tmp_source_name_17 );
                                                if ( tmp_called_name_6 == NULL )
                                                {
                                                    assert( ERROR_OCCURRED() );

                                                    FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                                                    exception_lineno = 849;
                                                    type_description_1 = "oooooooooooo";
                                                    goto frame_exception_exit_1;
                                                }
                                                tmp_left_name_1 = const_bytes_chr_20;
                                                CHECK_OBJECT( par_value );
                                                tmp_source_name_19 = par_value;
                                                tmp_called_name_7 = LOOKUP_ATTRIBUTE( tmp_source_name_19, const_str_plain_to_bytes );
                                                if ( tmp_called_name_7 == NULL )
                                                {
                                                    assert( ERROR_OCCURRED() );

                                                    FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
                                                    Py_DECREF( tmp_called_name_6 );

                                                    exception_lineno = 849;
                                                    type_description_1 = "oooooooooooo";
                                                    goto frame_exception_exit_1;
                                                }
                                                tmp_args_name_1 = const_tuple_int_pos_16_str_plain_big_tuple;
                                                tmp_kw_name_1 = PyDict_Copy( const_dict_572050117e2cfc8c656df66eb5790338 );
                                                frame_edf236a14f5145c2001a5486f9240237->m_frame.f_lineno = 849;
                                                tmp_right_name_1 = CALL_FUNCTION( tmp_called_name_7, tmp_args_name_1, tmp_kw_name_1 );
                                                Py_DECREF( tmp_called_name_7 );
                                                Py_DECREF( tmp_kw_name_1 );
                                                if ( tmp_right_name_1 == NULL )
                                                {
                                                    assert( ERROR_OCCURRED() );

                                                    FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
                                                    Py_DECREF( tmp_called_name_6 );

                                                    exception_lineno = 849;
                                                    type_description_1 = "oooooooooooo";
                                                    goto frame_exception_exit_1;
                                                }
                                                tmp_args_element_name_22 = BINARY_OPERATION_ADD_BYTES_OBJECT( tmp_left_name_1, tmp_right_name_1 );
                                                Py_DECREF( tmp_right_name_1 );
                                                if ( tmp_args_element_name_22 == NULL )
                                                {
                                                    assert( ERROR_OCCURRED() );

                                                    FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
                                                    Py_DECREF( tmp_called_name_6 );

                                                    exception_lineno = 849;
                                                    type_description_1 = "oooooooooooo";
                                                    goto frame_exception_exit_1;
                                                }
                                                frame_edf236a14f5145c2001a5486f9240237->m_frame.f_lineno = 849;
                                                {
                                                    PyObject *call_args[] = { tmp_args_element_name_22 };
                                                    tmp_call_result_9 = CALL_FUNCTION_WITH_ARGS1( tmp_called_name_6, call_args );
                                                }

                                                Py_DECREF( tmp_called_name_6 );
                                                Py_DECREF( tmp_args_element_name_22 );
                                                if ( tmp_call_result_9 == NULL )
                                                {
                                                    assert( ERROR_OCCURRED() );

                                                    FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                                                    exception_lineno = 849;
                                                    type_description_1 = "oooooooooooo";
                                                    goto frame_exception_exit_1;
                                                }
                                                Py_DECREF( tmp_call_result_9 );
                                            }
                                            goto branch_end_11;
                                            branch_no_11:;
                                            {
                                                PyObject *tmp_raise_type_2;
                                                PyObject *tmp_make_exception_arg_2;
                                                CHECK_OBJECT( par_value );
                                                tmp_make_exception_arg_2 = par_value;
                                                frame_edf236a14f5145c2001a5486f9240237->m_frame.f_lineno = 851;
                                                {
                                                    PyObject *call_args[] = { tmp_make_exception_arg_2 };
                                                    tmp_raise_type_2 = CALL_FUNCTION_WITH_ARGS1( PyExc_OverflowError, call_args );
                                                }

                                                assert( !(tmp_raise_type_2 == NULL) );
                                                exception_type = tmp_raise_type_2;
                                                exception_lineno = 851;
                                                RAISE_EXCEPTION_WITH_TYPE( &exception_type, &exception_value, &exception_tb );
                                                type_description_1 = "oooooooooooo";
                                                goto frame_exception_exit_1;
                                            }
                                            branch_end_11:;
                                        }
                                        branch_end_10:;
                                    }
                                    branch_end_9:;
                                }
                                branch_end_8:;
                            }
                            branch_end_7:;
                        }
                        branch_end_5:;
                    }
                    goto branch_end_4;
                    branch_no_4:;
                    {
                        nuitka_bool tmp_condition_result_12;
                        PyObject *tmp_isinstance_inst_2;
                        PyObject *tmp_isinstance_cls_2;
                        CHECK_OBJECT( par_value );
                        tmp_isinstance_inst_2 = par_value;
                        tmp_isinstance_cls_2 = (PyObject *)&PyFloat_Type;
                        tmp_res = Nuitka_IsInstance( tmp_isinstance_inst_2, tmp_isinstance_cls_2 );
                        if ( tmp_res == -1 )
                        {
                            assert( ERROR_OCCURRED() );

                            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                            exception_lineno = 853;
                            type_description_1 = "oooooooooooo";
                            goto frame_exception_exit_1;
                        }
                        tmp_condition_result_12 = ( tmp_res != 0 ) ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
                        if ( tmp_condition_result_12 == NUITKA_BOOL_TRUE )
                        {
                            goto branch_yes_12;
                        }
                        else
                        {
                            goto branch_no_12;
                        }
                        branch_yes_12:;
                        {
                            PyObject *tmp_called_name_8;
                            PyObject *tmp_source_name_20;
                            PyObject *tmp_source_name_21;
                            PyObject *tmp_call_result_10;
                            PyObject *tmp_args_element_name_23;
                            PyObject *tmp_called_instance_11;
                            PyObject *tmp_mvar_value_7;
                            PyObject *tmp_args_element_name_24;
                            PyObject *tmp_args_element_name_25;
                            PyObject *tmp_args_element_name_26;
                            CHECK_OBJECT( par_self );
                            tmp_source_name_21 = par_self;
                            tmp_source_name_20 = LOOKUP_ATTRIBUTE( tmp_source_name_21, const_str_plain__fp );
                            if ( tmp_source_name_20 == NULL )
                            {
                                assert( ERROR_OCCURRED() );

                                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                                exception_lineno = 854;
                                type_description_1 = "oooooooooooo";
                                goto frame_exception_exit_1;
                            }
                            tmp_called_name_8 = LOOKUP_ATTRIBUTE( tmp_source_name_20, const_str_plain_write );
                            Py_DECREF( tmp_source_name_20 );
                            if ( tmp_called_name_8 == NULL )
                            {
                                assert( ERROR_OCCURRED() );

                                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                                exception_lineno = 854;
                                type_description_1 = "oooooooooooo";
                                goto frame_exception_exit_1;
                            }
                            tmp_mvar_value_7 = GET_STRING_DICT_VALUE( moduledict_plistlib, (Nuitka_StringObject *)const_str_plain_struct );

                            if (unlikely( tmp_mvar_value_7 == NULL ))
                            {
                                tmp_mvar_value_7 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_struct );
                            }

                            if ( tmp_mvar_value_7 == NULL )
                            {
                                Py_DECREF( tmp_called_name_8 );
                                exception_type = PyExc_NameError;
                                Py_INCREF( exception_type );
                                exception_value = PyUnicode_FromFormat( "name '%s' is not defined", "struct" );
                                exception_tb = NULL;
                                NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
                                CHAIN_EXCEPTION( exception_value );

                                exception_lineno = 854;
                                type_description_1 = "oooooooooooo";
                                goto frame_exception_exit_1;
                            }

                            tmp_called_instance_11 = tmp_mvar_value_7;
                            tmp_args_element_name_24 = const_str_digest_734f4e9d064717646102b3a04f68706f;
                            tmp_args_element_name_25 = const_int_pos_35;
                            CHECK_OBJECT( par_value );
                            tmp_args_element_name_26 = par_value;
                            frame_edf236a14f5145c2001a5486f9240237->m_frame.f_lineno = 854;
                            {
                                PyObject *call_args[] = { tmp_args_element_name_24, tmp_args_element_name_25, tmp_args_element_name_26 };
                                tmp_args_element_name_23 = CALL_METHOD_WITH_ARGS3( tmp_called_instance_11, const_str_plain_pack, call_args );
                            }

                            if ( tmp_args_element_name_23 == NULL )
                            {
                                assert( ERROR_OCCURRED() );

                                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
                                Py_DECREF( tmp_called_name_8 );

                                exception_lineno = 854;
                                type_description_1 = "oooooooooooo";
                                goto frame_exception_exit_1;
                            }
                            frame_edf236a14f5145c2001a5486f9240237->m_frame.f_lineno = 854;
                            {
                                PyObject *call_args[] = { tmp_args_element_name_23 };
                                tmp_call_result_10 = CALL_FUNCTION_WITH_ARGS1( tmp_called_name_8, call_args );
                            }

                            Py_DECREF( tmp_called_name_8 );
                            Py_DECREF( tmp_args_element_name_23 );
                            if ( tmp_call_result_10 == NULL )
                            {
                                assert( ERROR_OCCURRED() );

                                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                                exception_lineno = 854;
                                type_description_1 = "oooooooooooo";
                                goto frame_exception_exit_1;
                            }
                            Py_DECREF( tmp_call_result_10 );
                        }
                        goto branch_end_12;
                        branch_no_12:;
                        {
                            nuitka_bool tmp_condition_result_13;
                            PyObject *tmp_isinstance_inst_3;
                            PyObject *tmp_isinstance_cls_3;
                            PyObject *tmp_source_name_22;
                            PyObject *tmp_mvar_value_8;
                            CHECK_OBJECT( par_value );
                            tmp_isinstance_inst_3 = par_value;
                            tmp_mvar_value_8 = GET_STRING_DICT_VALUE( moduledict_plistlib, (Nuitka_StringObject *)const_str_plain_datetime );

                            if (unlikely( tmp_mvar_value_8 == NULL ))
                            {
                                tmp_mvar_value_8 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_datetime );
                            }

                            if ( tmp_mvar_value_8 == NULL )
                            {

                                exception_type = PyExc_NameError;
                                Py_INCREF( exception_type );
                                exception_value = PyUnicode_FromFormat( "name '%s' is not defined", "datetime" );
                                exception_tb = NULL;
                                NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
                                CHAIN_EXCEPTION( exception_value );

                                exception_lineno = 856;
                                type_description_1 = "oooooooooooo";
                                goto frame_exception_exit_1;
                            }

                            tmp_source_name_22 = tmp_mvar_value_8;
                            tmp_isinstance_cls_3 = LOOKUP_ATTRIBUTE( tmp_source_name_22, const_str_plain_datetime );
                            if ( tmp_isinstance_cls_3 == NULL )
                            {
                                assert( ERROR_OCCURRED() );

                                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                                exception_lineno = 856;
                                type_description_1 = "oooooooooooo";
                                goto frame_exception_exit_1;
                            }
                            tmp_res = Nuitka_IsInstance( tmp_isinstance_inst_3, tmp_isinstance_cls_3 );
                            Py_DECREF( tmp_isinstance_cls_3 );
                            if ( tmp_res == -1 )
                            {
                                assert( ERROR_OCCURRED() );

                                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                                exception_lineno = 856;
                                type_description_1 = "oooooooooooo";
                                goto frame_exception_exit_1;
                            }
                            tmp_condition_result_13 = ( tmp_res != 0 ) ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
                            if ( tmp_condition_result_13 == NUITKA_BOOL_TRUE )
                            {
                                goto branch_yes_13;
                            }
                            else
                            {
                                goto branch_no_13;
                            }
                            branch_yes_13:;
                            {
                                PyObject *tmp_assign_source_2;
                                PyObject *tmp_called_instance_12;
                                PyObject *tmp_left_name_2;
                                PyObject *tmp_right_name_2;
                                PyObject *tmp_called_instance_13;
                                PyObject *tmp_mvar_value_9;
                                CHECK_OBJECT( par_value );
                                tmp_left_name_2 = par_value;
                                tmp_mvar_value_9 = GET_STRING_DICT_VALUE( moduledict_plistlib, (Nuitka_StringObject *)const_str_plain_datetime );

                                if (unlikely( tmp_mvar_value_9 == NULL ))
                                {
                                    tmp_mvar_value_9 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_datetime );
                                }

                                if ( tmp_mvar_value_9 == NULL )
                                {

                                    exception_type = PyExc_NameError;
                                    Py_INCREF( exception_type );
                                    exception_value = PyUnicode_FromFormat( "name '%s' is not defined", "datetime" );
                                    exception_tb = NULL;
                                    NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
                                    CHAIN_EXCEPTION( exception_value );

                                    exception_lineno = 857;
                                    type_description_1 = "oooooooooooo";
                                    goto frame_exception_exit_1;
                                }

                                tmp_called_instance_13 = tmp_mvar_value_9;
                                frame_edf236a14f5145c2001a5486f9240237->m_frame.f_lineno = 857;
                                tmp_right_name_2 = CALL_METHOD_WITH_ARGS3( tmp_called_instance_13, const_str_plain_datetime, &PyTuple_GET_ITEM( const_tuple_int_pos_2001_int_pos_1_int_pos_1_tuple, 0 ) );

                                if ( tmp_right_name_2 == NULL )
                                {
                                    assert( ERROR_OCCURRED() );

                                    FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                                    exception_lineno = 857;
                                    type_description_1 = "oooooooooooo";
                                    goto frame_exception_exit_1;
                                }
                                tmp_called_instance_12 = BINARY_OPERATION_SUB( tmp_left_name_2, tmp_right_name_2 );
                                Py_DECREF( tmp_right_name_2 );
                                if ( tmp_called_instance_12 == NULL )
                                {
                                    assert( ERROR_OCCURRED() );

                                    FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                                    exception_lineno = 857;
                                    type_description_1 = "oooooooooooo";
                                    goto frame_exception_exit_1;
                                }
                                frame_edf236a14f5145c2001a5486f9240237->m_frame.f_lineno = 857;
                                tmp_assign_source_2 = CALL_METHOD_NO_ARGS( tmp_called_instance_12, const_str_plain_total_seconds );
                                Py_DECREF( tmp_called_instance_12 );
                                if ( tmp_assign_source_2 == NULL )
                                {
                                    assert( ERROR_OCCURRED() );

                                    FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                                    exception_lineno = 857;
                                    type_description_1 = "oooooooooooo";
                                    goto frame_exception_exit_1;
                                }
                                assert( var_f == NULL );
                                var_f = tmp_assign_source_2;
                            }
                            {
                                PyObject *tmp_called_name_9;
                                PyObject *tmp_source_name_23;
                                PyObject *tmp_source_name_24;
                                PyObject *tmp_call_result_11;
                                PyObject *tmp_args_element_name_27;
                                PyObject *tmp_called_instance_14;
                                PyObject *tmp_mvar_value_10;
                                PyObject *tmp_args_element_name_28;
                                PyObject *tmp_args_element_name_29;
                                PyObject *tmp_args_element_name_30;
                                CHECK_OBJECT( par_self );
                                tmp_source_name_24 = par_self;
                                tmp_source_name_23 = LOOKUP_ATTRIBUTE( tmp_source_name_24, const_str_plain__fp );
                                if ( tmp_source_name_23 == NULL )
                                {
                                    assert( ERROR_OCCURRED() );

                                    FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                                    exception_lineno = 858;
                                    type_description_1 = "oooooooooooo";
                                    goto frame_exception_exit_1;
                                }
                                tmp_called_name_9 = LOOKUP_ATTRIBUTE( tmp_source_name_23, const_str_plain_write );
                                Py_DECREF( tmp_source_name_23 );
                                if ( tmp_called_name_9 == NULL )
                                {
                                    assert( ERROR_OCCURRED() );

                                    FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                                    exception_lineno = 858;
                                    type_description_1 = "oooooooooooo";
                                    goto frame_exception_exit_1;
                                }
                                tmp_mvar_value_10 = GET_STRING_DICT_VALUE( moduledict_plistlib, (Nuitka_StringObject *)const_str_plain_struct );

                                if (unlikely( tmp_mvar_value_10 == NULL ))
                                {
                                    tmp_mvar_value_10 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_struct );
                                }

                                if ( tmp_mvar_value_10 == NULL )
                                {
                                    Py_DECREF( tmp_called_name_9 );
                                    exception_type = PyExc_NameError;
                                    Py_INCREF( exception_type );
                                    exception_value = PyUnicode_FromFormat( "name '%s' is not defined", "struct" );
                                    exception_tb = NULL;
                                    NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
                                    CHAIN_EXCEPTION( exception_value );

                                    exception_lineno = 858;
                                    type_description_1 = "oooooooooooo";
                                    goto frame_exception_exit_1;
                                }

                                tmp_called_instance_14 = tmp_mvar_value_10;
                                tmp_args_element_name_28 = const_str_digest_734f4e9d064717646102b3a04f68706f;
                                tmp_args_element_name_29 = const_int_pos_51;
                                CHECK_OBJECT( var_f );
                                tmp_args_element_name_30 = var_f;
                                frame_edf236a14f5145c2001a5486f9240237->m_frame.f_lineno = 858;
                                {
                                    PyObject *call_args[] = { tmp_args_element_name_28, tmp_args_element_name_29, tmp_args_element_name_30 };
                                    tmp_args_element_name_27 = CALL_METHOD_WITH_ARGS3( tmp_called_instance_14, const_str_plain_pack, call_args );
                                }

                                if ( tmp_args_element_name_27 == NULL )
                                {
                                    assert( ERROR_OCCURRED() );

                                    FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
                                    Py_DECREF( tmp_called_name_9 );

                                    exception_lineno = 858;
                                    type_description_1 = "oooooooooooo";
                                    goto frame_exception_exit_1;
                                }
                                frame_edf236a14f5145c2001a5486f9240237->m_frame.f_lineno = 858;
                                {
                                    PyObject *call_args[] = { tmp_args_element_name_27 };
                                    tmp_call_result_11 = CALL_FUNCTION_WITH_ARGS1( tmp_called_name_9, call_args );
                                }

                                Py_DECREF( tmp_called_name_9 );
                                Py_DECREF( tmp_args_element_name_27 );
                                if ( tmp_call_result_11 == NULL )
                                {
                                    assert( ERROR_OCCURRED() );

                                    FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                                    exception_lineno = 858;
                                    type_description_1 = "oooooooooooo";
                                    goto frame_exception_exit_1;
                                }
                                Py_DECREF( tmp_call_result_11 );
                            }
                            goto branch_end_13;
                            branch_no_13:;
                            {
                                nuitka_bool tmp_condition_result_14;
                                PyObject *tmp_isinstance_inst_4;
                                PyObject *tmp_isinstance_cls_4;
                                PyObject *tmp_mvar_value_11;
                                CHECK_OBJECT( par_value );
                                tmp_isinstance_inst_4 = par_value;
                                tmp_mvar_value_11 = GET_STRING_DICT_VALUE( moduledict_plistlib, (Nuitka_StringObject *)const_str_plain_Data );

                                if (unlikely( tmp_mvar_value_11 == NULL ))
                                {
                                    tmp_mvar_value_11 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_Data );
                                }

                                if ( tmp_mvar_value_11 == NULL )
                                {

                                    exception_type = PyExc_NameError;
                                    Py_INCREF( exception_type );
                                    exception_value = PyUnicode_FromFormat( "name '%s' is not defined", "Data" );
                                    exception_tb = NULL;
                                    NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
                                    CHAIN_EXCEPTION( exception_value );

                                    exception_lineno = 860;
                                    type_description_1 = "oooooooooooo";
                                    goto frame_exception_exit_1;
                                }

                                tmp_isinstance_cls_4 = tmp_mvar_value_11;
                                tmp_res = Nuitka_IsInstance( tmp_isinstance_inst_4, tmp_isinstance_cls_4 );
                                if ( tmp_res == -1 )
                                {
                                    assert( ERROR_OCCURRED() );

                                    FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                                    exception_lineno = 860;
                                    type_description_1 = "oooooooooooo";
                                    goto frame_exception_exit_1;
                                }
                                tmp_condition_result_14 = ( tmp_res != 0 ) ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
                                if ( tmp_condition_result_14 == NUITKA_BOOL_TRUE )
                                {
                                    goto branch_yes_14;
                                }
                                else
                                {
                                    goto branch_no_14;
                                }
                                branch_yes_14:;
                                {
                                    PyObject *tmp_called_name_10;
                                    PyObject *tmp_source_name_25;
                                    PyObject *tmp_call_result_12;
                                    PyObject *tmp_args_element_name_31;
                                    PyObject *tmp_args_element_name_32;
                                    PyObject *tmp_len_arg_1;
                                    PyObject *tmp_source_name_26;
                                    CHECK_OBJECT( par_self );
                                    tmp_source_name_25 = par_self;
                                    tmp_called_name_10 = LOOKUP_ATTRIBUTE( tmp_source_name_25, const_str_plain__write_size );
                                    if ( tmp_called_name_10 == NULL )
                                    {
                                        assert( ERROR_OCCURRED() );

                                        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                                        exception_lineno = 861;
                                        type_description_1 = "oooooooooooo";
                                        goto frame_exception_exit_1;
                                    }
                                    tmp_args_element_name_31 = const_int_pos_64;
                                    CHECK_OBJECT( par_value );
                                    tmp_source_name_26 = par_value;
                                    tmp_len_arg_1 = LOOKUP_ATTRIBUTE( tmp_source_name_26, const_str_plain_data );
                                    if ( tmp_len_arg_1 == NULL )
                                    {
                                        assert( ERROR_OCCURRED() );

                                        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
                                        Py_DECREF( tmp_called_name_10 );

                                        exception_lineno = 861;
                                        type_description_1 = "oooooooooooo";
                                        goto frame_exception_exit_1;
                                    }
                                    tmp_args_element_name_32 = BUILTIN_LEN( tmp_len_arg_1 );
                                    Py_DECREF( tmp_len_arg_1 );
                                    if ( tmp_args_element_name_32 == NULL )
                                    {
                                        assert( ERROR_OCCURRED() );

                                        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
                                        Py_DECREF( tmp_called_name_10 );

                                        exception_lineno = 861;
                                        type_description_1 = "oooooooooooo";
                                        goto frame_exception_exit_1;
                                    }
                                    frame_edf236a14f5145c2001a5486f9240237->m_frame.f_lineno = 861;
                                    {
                                        PyObject *call_args[] = { tmp_args_element_name_31, tmp_args_element_name_32 };
                                        tmp_call_result_12 = CALL_FUNCTION_WITH_ARGS2( tmp_called_name_10, call_args );
                                    }

                                    Py_DECREF( tmp_called_name_10 );
                                    Py_DECREF( tmp_args_element_name_32 );
                                    if ( tmp_call_result_12 == NULL )
                                    {
                                        assert( ERROR_OCCURRED() );

                                        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                                        exception_lineno = 861;
                                        type_description_1 = "oooooooooooo";
                                        goto frame_exception_exit_1;
                                    }
                                    Py_DECREF( tmp_call_result_12 );
                                }
                                {
                                    PyObject *tmp_called_name_11;
                                    PyObject *tmp_source_name_27;
                                    PyObject *tmp_source_name_28;
                                    PyObject *tmp_call_result_13;
                                    PyObject *tmp_args_element_name_33;
                                    PyObject *tmp_source_name_29;
                                    CHECK_OBJECT( par_self );
                                    tmp_source_name_28 = par_self;
                                    tmp_source_name_27 = LOOKUP_ATTRIBUTE( tmp_source_name_28, const_str_plain__fp );
                                    if ( tmp_source_name_27 == NULL )
                                    {
                                        assert( ERROR_OCCURRED() );

                                        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                                        exception_lineno = 862;
                                        type_description_1 = "oooooooooooo";
                                        goto frame_exception_exit_1;
                                    }
                                    tmp_called_name_11 = LOOKUP_ATTRIBUTE( tmp_source_name_27, const_str_plain_write );
                                    Py_DECREF( tmp_source_name_27 );
                                    if ( tmp_called_name_11 == NULL )
                                    {
                                        assert( ERROR_OCCURRED() );

                                        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                                        exception_lineno = 862;
                                        type_description_1 = "oooooooooooo";
                                        goto frame_exception_exit_1;
                                    }
                                    CHECK_OBJECT( par_value );
                                    tmp_source_name_29 = par_value;
                                    tmp_args_element_name_33 = LOOKUP_ATTRIBUTE( tmp_source_name_29, const_str_plain_data );
                                    if ( tmp_args_element_name_33 == NULL )
                                    {
                                        assert( ERROR_OCCURRED() );

                                        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
                                        Py_DECREF( tmp_called_name_11 );

                                        exception_lineno = 862;
                                        type_description_1 = "oooooooooooo";
                                        goto frame_exception_exit_1;
                                    }
                                    frame_edf236a14f5145c2001a5486f9240237->m_frame.f_lineno = 862;
                                    {
                                        PyObject *call_args[] = { tmp_args_element_name_33 };
                                        tmp_call_result_13 = CALL_FUNCTION_WITH_ARGS1( tmp_called_name_11, call_args );
                                    }

                                    Py_DECREF( tmp_called_name_11 );
                                    Py_DECREF( tmp_args_element_name_33 );
                                    if ( tmp_call_result_13 == NULL )
                                    {
                                        assert( ERROR_OCCURRED() );

                                        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                                        exception_lineno = 862;
                                        type_description_1 = "oooooooooooo";
                                        goto frame_exception_exit_1;
                                    }
                                    Py_DECREF( tmp_call_result_13 );
                                }
                                goto branch_end_14;
                                branch_no_14:;
                                {
                                    nuitka_bool tmp_condition_result_15;
                                    PyObject *tmp_isinstance_inst_5;
                                    PyObject *tmp_isinstance_cls_5;
                                    CHECK_OBJECT( par_value );
                                    tmp_isinstance_inst_5 = par_value;
                                    tmp_isinstance_cls_5 = const_tuple_type_bytes_type_bytearray_tuple;
                                    tmp_res = Nuitka_IsInstance( tmp_isinstance_inst_5, tmp_isinstance_cls_5 );
                                    if ( tmp_res == -1 )
                                    {
                                        assert( ERROR_OCCURRED() );

                                        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                                        exception_lineno = 864;
                                        type_description_1 = "oooooooooooo";
                                        goto frame_exception_exit_1;
                                    }
                                    tmp_condition_result_15 = ( tmp_res != 0 ) ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
                                    if ( tmp_condition_result_15 == NUITKA_BOOL_TRUE )
                                    {
                                        goto branch_yes_15;
                                    }
                                    else
                                    {
                                        goto branch_no_15;
                                    }
                                    branch_yes_15:;
                                    {
                                        PyObject *tmp_called_name_12;
                                        PyObject *tmp_source_name_30;
                                        PyObject *tmp_call_result_14;
                                        PyObject *tmp_args_element_name_34;
                                        PyObject *tmp_args_element_name_35;
                                        PyObject *tmp_len_arg_2;
                                        CHECK_OBJECT( par_self );
                                        tmp_source_name_30 = par_self;
                                        tmp_called_name_12 = LOOKUP_ATTRIBUTE( tmp_source_name_30, const_str_plain__write_size );
                                        if ( tmp_called_name_12 == NULL )
                                        {
                                            assert( ERROR_OCCURRED() );

                                            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                                            exception_lineno = 865;
                                            type_description_1 = "oooooooooooo";
                                            goto frame_exception_exit_1;
                                        }
                                        tmp_args_element_name_34 = const_int_pos_64;
                                        CHECK_OBJECT( par_value );
                                        tmp_len_arg_2 = par_value;
                                        tmp_args_element_name_35 = BUILTIN_LEN( tmp_len_arg_2 );
                                        if ( tmp_args_element_name_35 == NULL )
                                        {
                                            assert( ERROR_OCCURRED() );

                                            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
                                            Py_DECREF( tmp_called_name_12 );

                                            exception_lineno = 865;
                                            type_description_1 = "oooooooooooo";
                                            goto frame_exception_exit_1;
                                        }
                                        frame_edf236a14f5145c2001a5486f9240237->m_frame.f_lineno = 865;
                                        {
                                            PyObject *call_args[] = { tmp_args_element_name_34, tmp_args_element_name_35 };
                                            tmp_call_result_14 = CALL_FUNCTION_WITH_ARGS2( tmp_called_name_12, call_args );
                                        }

                                        Py_DECREF( tmp_called_name_12 );
                                        Py_DECREF( tmp_args_element_name_35 );
                                        if ( tmp_call_result_14 == NULL )
                                        {
                                            assert( ERROR_OCCURRED() );

                                            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                                            exception_lineno = 865;
                                            type_description_1 = "oooooooooooo";
                                            goto frame_exception_exit_1;
                                        }
                                        Py_DECREF( tmp_call_result_14 );
                                    }
                                    {
                                        PyObject *tmp_called_instance_15;
                                        PyObject *tmp_source_name_31;
                                        PyObject *tmp_call_result_15;
                                        PyObject *tmp_args_element_name_36;
                                        CHECK_OBJECT( par_self );
                                        tmp_source_name_31 = par_self;
                                        tmp_called_instance_15 = LOOKUP_ATTRIBUTE( tmp_source_name_31, const_str_plain__fp );
                                        if ( tmp_called_instance_15 == NULL )
                                        {
                                            assert( ERROR_OCCURRED() );

                                            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                                            exception_lineno = 866;
                                            type_description_1 = "oooooooooooo";
                                            goto frame_exception_exit_1;
                                        }
                                        CHECK_OBJECT( par_value );
                                        tmp_args_element_name_36 = par_value;
                                        frame_edf236a14f5145c2001a5486f9240237->m_frame.f_lineno = 866;
                                        {
                                            PyObject *call_args[] = { tmp_args_element_name_36 };
                                            tmp_call_result_15 = CALL_METHOD_WITH_ARGS1( tmp_called_instance_15, const_str_plain_write, call_args );
                                        }

                                        Py_DECREF( tmp_called_instance_15 );
                                        if ( tmp_call_result_15 == NULL )
                                        {
                                            assert( ERROR_OCCURRED() );

                                            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                                            exception_lineno = 866;
                                            type_description_1 = "oooooooooooo";
                                            goto frame_exception_exit_1;
                                        }
                                        Py_DECREF( tmp_call_result_15 );
                                    }
                                    goto branch_end_15;
                                    branch_no_15:;
                                    {
                                        nuitka_bool tmp_condition_result_16;
                                        PyObject *tmp_isinstance_inst_6;
                                        PyObject *tmp_isinstance_cls_6;
                                        CHECK_OBJECT( par_value );
                                        tmp_isinstance_inst_6 = par_value;
                                        tmp_isinstance_cls_6 = (PyObject *)&PyUnicode_Type;
                                        tmp_res = Nuitka_IsInstance( tmp_isinstance_inst_6, tmp_isinstance_cls_6 );
                                        if ( tmp_res == -1 )
                                        {
                                            assert( ERROR_OCCURRED() );

                                            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                                            exception_lineno = 868;
                                            type_description_1 = "oooooooooooo";
                                            goto frame_exception_exit_1;
                                        }
                                        tmp_condition_result_16 = ( tmp_res != 0 ) ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
                                        if ( tmp_condition_result_16 == NUITKA_BOOL_TRUE )
                                        {
                                            goto branch_yes_16;
                                        }
                                        else
                                        {
                                            goto branch_no_16;
                                        }
                                        branch_yes_16:;
                                        // Tried code:
                                        {
                                            PyObject *tmp_assign_source_3;
                                            PyObject *tmp_called_instance_16;
                                            CHECK_OBJECT( par_value );
                                            tmp_called_instance_16 = par_value;
                                            frame_edf236a14f5145c2001a5486f9240237->m_frame.f_lineno = 870;
                                            tmp_assign_source_3 = CALL_METHOD_WITH_ARGS1( tmp_called_instance_16, const_str_plain_encode, &PyTuple_GET_ITEM( const_tuple_str_plain_ascii_tuple, 0 ) );

                                            if ( tmp_assign_source_3 == NULL )
                                            {
                                                assert( ERROR_OCCURRED() );

                                                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                                                exception_lineno = 870;
                                                type_description_1 = "oooooooooooo";
                                                goto try_except_handler_4;
                                            }
                                            assert( var_t == NULL );
                                            var_t = tmp_assign_source_3;
                                        }
                                        {
                                            PyObject *tmp_called_name_13;
                                            PyObject *tmp_source_name_32;
                                            PyObject *tmp_call_result_16;
                                            PyObject *tmp_args_element_name_37;
                                            PyObject *tmp_args_element_name_38;
                                            PyObject *tmp_len_arg_3;
                                            CHECK_OBJECT( par_self );
                                            tmp_source_name_32 = par_self;
                                            tmp_called_name_13 = LOOKUP_ATTRIBUTE( tmp_source_name_32, const_str_plain__write_size );
                                            if ( tmp_called_name_13 == NULL )
                                            {
                                                assert( ERROR_OCCURRED() );

                                                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                                                exception_lineno = 871;
                                                type_description_1 = "oooooooooooo";
                                                goto try_except_handler_4;
                                            }
                                            tmp_args_element_name_37 = const_int_pos_80;
                                            CHECK_OBJECT( par_value );
                                            tmp_len_arg_3 = par_value;
                                            tmp_args_element_name_38 = BUILTIN_LEN( tmp_len_arg_3 );
                                            if ( tmp_args_element_name_38 == NULL )
                                            {
                                                assert( ERROR_OCCURRED() );

                                                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
                                                Py_DECREF( tmp_called_name_13 );

                                                exception_lineno = 871;
                                                type_description_1 = "oooooooooooo";
                                                goto try_except_handler_4;
                                            }
                                            frame_edf236a14f5145c2001a5486f9240237->m_frame.f_lineno = 871;
                                            {
                                                PyObject *call_args[] = { tmp_args_element_name_37, tmp_args_element_name_38 };
                                                tmp_call_result_16 = CALL_FUNCTION_WITH_ARGS2( tmp_called_name_13, call_args );
                                            }

                                            Py_DECREF( tmp_called_name_13 );
                                            Py_DECREF( tmp_args_element_name_38 );
                                            if ( tmp_call_result_16 == NULL )
                                            {
                                                assert( ERROR_OCCURRED() );

                                                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                                                exception_lineno = 871;
                                                type_description_1 = "oooooooooooo";
                                                goto try_except_handler_4;
                                            }
                                            Py_DECREF( tmp_call_result_16 );
                                        }
                                        goto try_end_2;
                                        // Exception handler code:
                                        try_except_handler_4:;
                                        exception_keeper_type_3 = exception_type;
                                        exception_keeper_value_3 = exception_value;
                                        exception_keeper_tb_3 = exception_tb;
                                        exception_keeper_lineno_3 = exception_lineno;
                                        exception_type = NULL;
                                        exception_value = NULL;
                                        exception_tb = NULL;
                                        exception_lineno = 0;

                                        // Preserve existing published exception.
                                        exception_preserved_type_2 = EXC_TYPE(PyThreadState_GET());
                                        Py_XINCREF( exception_preserved_type_2 );
                                        exception_preserved_value_2 = EXC_VALUE(PyThreadState_GET());
                                        Py_XINCREF( exception_preserved_value_2 );
                                        exception_preserved_tb_2 = (PyTracebackObject *)EXC_TRACEBACK(PyThreadState_GET());
                                        Py_XINCREF( exception_preserved_tb_2 );

                                        if ( exception_keeper_tb_3 == NULL )
                                        {
                                            exception_keeper_tb_3 = MAKE_TRACEBACK( frame_edf236a14f5145c2001a5486f9240237, exception_keeper_lineno_3 );
                                        }
                                        else if ( exception_keeper_lineno_3 != 0 )
                                        {
                                            exception_keeper_tb_3 = ADD_TRACEBACK( exception_keeper_tb_3, frame_edf236a14f5145c2001a5486f9240237, exception_keeper_lineno_3 );
                                        }

                                        NORMALIZE_EXCEPTION( &exception_keeper_type_3, &exception_keeper_value_3, &exception_keeper_tb_3 );
                                        PyException_SetTraceback( exception_keeper_value_3, (PyObject *)exception_keeper_tb_3 );
                                        PUBLISH_EXCEPTION( &exception_keeper_type_3, &exception_keeper_value_3, &exception_keeper_tb_3 );
                                        // Tried code:
                                        {
                                            nuitka_bool tmp_condition_result_17;
                                            PyObject *tmp_compexpr_left_11;
                                            PyObject *tmp_compexpr_right_11;
                                            tmp_compexpr_left_11 = EXC_TYPE(PyThreadState_GET());
                                            tmp_compexpr_right_11 = PyExc_UnicodeEncodeError;
                                            tmp_res = EXCEPTION_MATCH_BOOL( tmp_compexpr_left_11, tmp_compexpr_right_11 );
                                            if ( tmp_res == -1 )
                                            {
                                                assert( ERROR_OCCURRED() );

                                                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                                                exception_lineno = 872;
                                                type_description_1 = "oooooooooooo";
                                                goto try_except_handler_5;
                                            }
                                            tmp_condition_result_17 = ( tmp_res != 0 ) ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
                                            if ( tmp_condition_result_17 == NUITKA_BOOL_TRUE )
                                            {
                                                goto branch_yes_17;
                                            }
                                            else
                                            {
                                                goto branch_no_17;
                                            }
                                            branch_yes_17:;
                                            {
                                                PyObject *tmp_assign_source_4;
                                                PyObject *tmp_called_instance_17;
                                                CHECK_OBJECT( par_value );
                                                tmp_called_instance_17 = par_value;
                                                frame_edf236a14f5145c2001a5486f9240237->m_frame.f_lineno = 873;
                                                tmp_assign_source_4 = CALL_METHOD_WITH_ARGS1( tmp_called_instance_17, const_str_plain_encode, &PyTuple_GET_ITEM( const_tuple_str_digest_7d8c029aa14d4038a202ab8b1ce8db36_tuple, 0 ) );

                                                if ( tmp_assign_source_4 == NULL )
                                                {
                                                    assert( ERROR_OCCURRED() );

                                                    FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                                                    exception_lineno = 873;
                                                    type_description_1 = "oooooooooooo";
                                                    goto try_except_handler_5;
                                                }
                                                {
                                                    PyObject *old = var_t;
                                                    var_t = tmp_assign_source_4;
                                                    Py_XDECREF( old );
                                                }

                                            }
                                            {
                                                PyObject *tmp_called_name_14;
                                                PyObject *tmp_source_name_33;
                                                PyObject *tmp_call_result_17;
                                                PyObject *tmp_args_element_name_39;
                                                PyObject *tmp_args_element_name_40;
                                                PyObject *tmp_left_name_3;
                                                PyObject *tmp_len_arg_4;
                                                PyObject *tmp_right_name_3;
                                                CHECK_OBJECT( par_self );
                                                tmp_source_name_33 = par_self;
                                                tmp_called_name_14 = LOOKUP_ATTRIBUTE( tmp_source_name_33, const_str_plain__write_size );
                                                if ( tmp_called_name_14 == NULL )
                                                {
                                                    assert( ERROR_OCCURRED() );

                                                    FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                                                    exception_lineno = 874;
                                                    type_description_1 = "oooooooooooo";
                                                    goto try_except_handler_5;
                                                }
                                                tmp_args_element_name_39 = const_int_pos_96;
                                                CHECK_OBJECT( var_t );
                                                tmp_len_arg_4 = var_t;
                                                tmp_left_name_3 = BUILTIN_LEN( tmp_len_arg_4 );
                                                if ( tmp_left_name_3 == NULL )
                                                {
                                                    assert( ERROR_OCCURRED() );

                                                    FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
                                                    Py_DECREF( tmp_called_name_14 );

                                                    exception_lineno = 874;
                                                    type_description_1 = "oooooooooooo";
                                                    goto try_except_handler_5;
                                                }
                                                tmp_right_name_3 = const_int_pos_2;
                                                tmp_args_element_name_40 = BINARY_OPERATION_FLOORDIV( tmp_left_name_3, tmp_right_name_3 );
                                                Py_DECREF( tmp_left_name_3 );
                                                if ( tmp_args_element_name_40 == NULL )
                                                {
                                                    assert( ERROR_OCCURRED() );

                                                    FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
                                                    Py_DECREF( tmp_called_name_14 );

                                                    exception_lineno = 874;
                                                    type_description_1 = "oooooooooooo";
                                                    goto try_except_handler_5;
                                                }
                                                frame_edf236a14f5145c2001a5486f9240237->m_frame.f_lineno = 874;
                                                {
                                                    PyObject *call_args[] = { tmp_args_element_name_39, tmp_args_element_name_40 };
                                                    tmp_call_result_17 = CALL_FUNCTION_WITH_ARGS2( tmp_called_name_14, call_args );
                                                }

                                                Py_DECREF( tmp_called_name_14 );
                                                Py_DECREF( tmp_args_element_name_40 );
                                                if ( tmp_call_result_17 == NULL )
                                                {
                                                    assert( ERROR_OCCURRED() );

                                                    FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                                                    exception_lineno = 874;
                                                    type_description_1 = "oooooooooooo";
                                                    goto try_except_handler_5;
                                                }
                                                Py_DECREF( tmp_call_result_17 );
                                            }
                                            goto branch_end_17;
                                            branch_no_17:;
                                            tmp_result = RERAISE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
                                            if (unlikely( tmp_result == false ))
                                            {
                                                exception_lineno = 869;
                                            }

                                            if (exception_tb && exception_tb->tb_frame == &frame_edf236a14f5145c2001a5486f9240237->m_frame) frame_edf236a14f5145c2001a5486f9240237->m_frame.f_lineno = exception_tb->tb_lineno;
                                            type_description_1 = "oooooooooooo";
                                            goto try_except_handler_5;
                                            branch_end_17:;
                                        }
                                        goto try_end_3;
                                        // Exception handler code:
                                        try_except_handler_5:;
                                        exception_keeper_type_4 = exception_type;
                                        exception_keeper_value_4 = exception_value;
                                        exception_keeper_tb_4 = exception_tb;
                                        exception_keeper_lineno_4 = exception_lineno;
                                        exception_type = NULL;
                                        exception_value = NULL;
                                        exception_tb = NULL;
                                        exception_lineno = 0;

                                        // Restore previous exception.
                                        SET_CURRENT_EXCEPTION( exception_preserved_type_2, exception_preserved_value_2, exception_preserved_tb_2 );
                                        // Re-raise.
                                        exception_type = exception_keeper_type_4;
                                        exception_value = exception_keeper_value_4;
                                        exception_tb = exception_keeper_tb_4;
                                        exception_lineno = exception_keeper_lineno_4;

                                        goto frame_exception_exit_1;
                                        // End of try:
                                        try_end_3:;
                                        // Restore previous exception.
                                        SET_CURRENT_EXCEPTION( exception_preserved_type_2, exception_preserved_value_2, exception_preserved_tb_2 );
                                        goto try_end_2;
                                        // exception handler codes exits in all cases
                                        NUITKA_CANNOT_GET_HERE( plistlib$$$function_61__write_object );
                                        return NULL;
                                        // End of try:
                                        try_end_2:;
                                        {
                                            PyObject *tmp_called_name_15;
                                            PyObject *tmp_source_name_34;
                                            PyObject *tmp_source_name_35;
                                            PyObject *tmp_call_result_18;
                                            PyObject *tmp_args_element_name_41;
                                            CHECK_OBJECT( par_self );
                                            tmp_source_name_35 = par_self;
                                            tmp_source_name_34 = LOOKUP_ATTRIBUTE( tmp_source_name_35, const_str_plain__fp );
                                            if ( tmp_source_name_34 == NULL )
                                            {
                                                assert( ERROR_OCCURRED() );

                                                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                                                exception_lineno = 876;
                                                type_description_1 = "oooooooooooo";
                                                goto frame_exception_exit_1;
                                            }
                                            tmp_called_name_15 = LOOKUP_ATTRIBUTE( tmp_source_name_34, const_str_plain_write );
                                            Py_DECREF( tmp_source_name_34 );
                                            if ( tmp_called_name_15 == NULL )
                                            {
                                                assert( ERROR_OCCURRED() );

                                                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                                                exception_lineno = 876;
                                                type_description_1 = "oooooooooooo";
                                                goto frame_exception_exit_1;
                                            }
                                            if ( var_t == NULL )
                                            {
                                                Py_DECREF( tmp_called_name_15 );
                                                exception_type = PyExc_UnboundLocalError;
                                                Py_INCREF( exception_type );
                                                exception_value = PyUnicode_FromFormat( "local variable '%s' referenced before assignment", "t" );
                                                exception_tb = NULL;
                                                NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
                                                CHAIN_EXCEPTION( exception_value );

                                                exception_lineno = 876;
                                                type_description_1 = "oooooooooooo";
                                                goto frame_exception_exit_1;
                                            }

                                            tmp_args_element_name_41 = var_t;
                                            frame_edf236a14f5145c2001a5486f9240237->m_frame.f_lineno = 876;
                                            {
                                                PyObject *call_args[] = { tmp_args_element_name_41 };
                                                tmp_call_result_18 = CALL_FUNCTION_WITH_ARGS1( tmp_called_name_15, call_args );
                                            }

                                            Py_DECREF( tmp_called_name_15 );
                                            if ( tmp_call_result_18 == NULL )
                                            {
                                                assert( ERROR_OCCURRED() );

                                                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                                                exception_lineno = 876;
                                                type_description_1 = "oooooooooooo";
                                                goto frame_exception_exit_1;
                                            }
                                            Py_DECREF( tmp_call_result_18 );
                                        }
                                        goto branch_end_16;
                                        branch_no_16:;
                                        {
                                            nuitka_bool tmp_condition_result_18;
                                            PyObject *tmp_isinstance_inst_7;
                                            PyObject *tmp_isinstance_cls_7;
                                            CHECK_OBJECT( par_value );
                                            tmp_isinstance_inst_7 = par_value;
                                            tmp_isinstance_cls_7 = const_tuple_type_list_type_tuple_tuple;
                                            tmp_res = Nuitka_IsInstance( tmp_isinstance_inst_7, tmp_isinstance_cls_7 );
                                            if ( tmp_res == -1 )
                                            {
                                                assert( ERROR_OCCURRED() );

                                                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                                                exception_lineno = 878;
                                                type_description_1 = "oooooooooooo";
                                                goto frame_exception_exit_1;
                                            }
                                            tmp_condition_result_18 = ( tmp_res != 0 ) ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
                                            if ( tmp_condition_result_18 == NUITKA_BOOL_TRUE )
                                            {
                                                goto branch_yes_18;
                                            }
                                            else
                                            {
                                                goto branch_no_18;
                                            }
                                            branch_yes_18:;
                                            {
                                                PyObject *tmp_assign_source_5;
                                                // Tried code:
                                                {
                                                    PyObject *tmp_assign_source_6;
                                                    PyObject *tmp_iter_arg_1;
                                                    CHECK_OBJECT( par_value );
                                                    tmp_iter_arg_1 = par_value;
                                                    tmp_assign_source_6 = MAKE_ITERATOR( tmp_iter_arg_1 );
                                                    if ( tmp_assign_source_6 == NULL )
                                                    {
                                                        assert( ERROR_OCCURRED() );

                                                        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                                                        exception_lineno = 879;
                                                        type_description_1 = "oooooooooooo";
                                                        goto try_except_handler_6;
                                                    }
                                                    assert( tmp_listcomp_1__$0 == NULL );
                                                    tmp_listcomp_1__$0 = tmp_assign_source_6;
                                                }
                                                {
                                                    PyObject *tmp_assign_source_7;
                                                    tmp_assign_source_7 = PyList_New( 0 );
                                                    assert( tmp_listcomp_1__contraction == NULL );
                                                    tmp_listcomp_1__contraction = tmp_assign_source_7;
                                                }
                                                MAKE_OR_REUSE_FRAME( cache_frame_1d0f5f6fb0fb7d83d8574ec7f2ca3cea_2, codeobj_1d0f5f6fb0fb7d83d8574ec7f2ca3cea, module_plistlib, sizeof(void *)+sizeof(void *) );
                                                frame_1d0f5f6fb0fb7d83d8574ec7f2ca3cea_2 = cache_frame_1d0f5f6fb0fb7d83d8574ec7f2ca3cea_2;

                                                // Push the new frame as the currently active one.
                                                pushFrameStack( frame_1d0f5f6fb0fb7d83d8574ec7f2ca3cea_2 );

                                                // Mark the frame object as in use, ref count 1 will be up for reuse.
                                                assert( Py_REFCNT( frame_1d0f5f6fb0fb7d83d8574ec7f2ca3cea_2 ) == 2 ); // Frame stack

                                                // Framed code:
                                                // Tried code:
                                                loop_start_1:;
                                                {
                                                    PyObject *tmp_next_source_1;
                                                    PyObject *tmp_assign_source_8;
                                                    CHECK_OBJECT( tmp_listcomp_1__$0 );
                                                    tmp_next_source_1 = tmp_listcomp_1__$0;
                                                    tmp_assign_source_8 = ITERATOR_NEXT( tmp_next_source_1 );
                                                    if ( tmp_assign_source_8 == NULL )
                                                    {
                                                        if ( CHECK_AND_CLEAR_STOP_ITERATION_OCCURRED() )
                                                        {

                                                            goto loop_end_1;
                                                        }
                                                        else
                                                        {

                                                            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
                                                            type_description_2 = "oo";
                                                            exception_lineno = 879;
                                                            goto try_except_handler_7;
                                                        }
                                                    }

                                                    {
                                                        PyObject *old = tmp_listcomp_1__iter_value_0;
                                                        tmp_listcomp_1__iter_value_0 = tmp_assign_source_8;
                                                        Py_XDECREF( old );
                                                    }

                                                }
                                                {
                                                    PyObject *tmp_assign_source_9;
                                                    CHECK_OBJECT( tmp_listcomp_1__iter_value_0 );
                                                    tmp_assign_source_9 = tmp_listcomp_1__iter_value_0;
                                                    {
                                                        PyObject *old = outline_0_var_o;
                                                        outline_0_var_o = tmp_assign_source_9;
                                                        Py_INCREF( outline_0_var_o );
                                                        Py_XDECREF( old );
                                                    }

                                                }
                                                {
                                                    PyObject *tmp_append_list_1;
                                                    PyObject *tmp_append_value_1;
                                                    PyObject *tmp_called_instance_18;
                                                    PyObject *tmp_args_element_name_42;
                                                    CHECK_OBJECT( tmp_listcomp_1__contraction );
                                                    tmp_append_list_1 = tmp_listcomp_1__contraction;
                                                    CHECK_OBJECT( par_self );
                                                    tmp_called_instance_18 = par_self;
                                                    CHECK_OBJECT( outline_0_var_o );
                                                    tmp_args_element_name_42 = outline_0_var_o;
                                                    frame_1d0f5f6fb0fb7d83d8574ec7f2ca3cea_2->m_frame.f_lineno = 879;
                                                    {
                                                        PyObject *call_args[] = { tmp_args_element_name_42 };
                                                        tmp_append_value_1 = CALL_METHOD_WITH_ARGS1( tmp_called_instance_18, const_str_plain__getrefnum, call_args );
                                                    }

                                                    if ( tmp_append_value_1 == NULL )
                                                    {
                                                        assert( ERROR_OCCURRED() );

                                                        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                                                        exception_lineno = 879;
                                                        type_description_2 = "oo";
                                                        goto try_except_handler_7;
                                                    }
                                                    assert( PyList_Check( tmp_append_list_1 ) );
                                                    tmp_res = PyList_Append( tmp_append_list_1, tmp_append_value_1 );
                                                    Py_DECREF( tmp_append_value_1 );
                                                    if ( tmp_res == -1 )
                                                    {
                                                        assert( ERROR_OCCURRED() );

                                                        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                                                        exception_lineno = 879;
                                                        type_description_2 = "oo";
                                                        goto try_except_handler_7;
                                                    }
                                                }
                                                if ( CONSIDER_THREADING() == false )
                                                {
                                                    assert( ERROR_OCCURRED() );

                                                    FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                                                    exception_lineno = 879;
                                                    type_description_2 = "oo";
                                                    goto try_except_handler_7;
                                                }
                                                goto loop_start_1;
                                                loop_end_1:;
                                                CHECK_OBJECT( tmp_listcomp_1__contraction );
                                                tmp_assign_source_5 = tmp_listcomp_1__contraction;
                                                Py_INCREF( tmp_assign_source_5 );
                                                goto try_return_handler_7;
                                                // tried codes exits in all cases
                                                NUITKA_CANNOT_GET_HERE( plistlib$$$function_61__write_object );
                                                return NULL;
                                                // Return handler code:
                                                try_return_handler_7:;
                                                CHECK_OBJECT( (PyObject *)tmp_listcomp_1__$0 );
                                                Py_DECREF( tmp_listcomp_1__$0 );
                                                tmp_listcomp_1__$0 = NULL;

                                                CHECK_OBJECT( (PyObject *)tmp_listcomp_1__contraction );
                                                Py_DECREF( tmp_listcomp_1__contraction );
                                                tmp_listcomp_1__contraction = NULL;

                                                Py_XDECREF( tmp_listcomp_1__iter_value_0 );
                                                tmp_listcomp_1__iter_value_0 = NULL;

                                                goto frame_return_exit_1;
                                                // Exception handler code:
                                                try_except_handler_7:;
                                                exception_keeper_type_5 = exception_type;
                                                exception_keeper_value_5 = exception_value;
                                                exception_keeper_tb_5 = exception_tb;
                                                exception_keeper_lineno_5 = exception_lineno;
                                                exception_type = NULL;
                                                exception_value = NULL;
                                                exception_tb = NULL;
                                                exception_lineno = 0;

                                                CHECK_OBJECT( (PyObject *)tmp_listcomp_1__$0 );
                                                Py_DECREF( tmp_listcomp_1__$0 );
                                                tmp_listcomp_1__$0 = NULL;

                                                CHECK_OBJECT( (PyObject *)tmp_listcomp_1__contraction );
                                                Py_DECREF( tmp_listcomp_1__contraction );
                                                tmp_listcomp_1__contraction = NULL;

                                                Py_XDECREF( tmp_listcomp_1__iter_value_0 );
                                                tmp_listcomp_1__iter_value_0 = NULL;

                                                // Re-raise.
                                                exception_type = exception_keeper_type_5;
                                                exception_value = exception_keeper_value_5;
                                                exception_tb = exception_keeper_tb_5;
                                                exception_lineno = exception_keeper_lineno_5;

                                                goto frame_exception_exit_2;
                                                // End of try:

#if 0
                                                RESTORE_FRAME_EXCEPTION( frame_1d0f5f6fb0fb7d83d8574ec7f2ca3cea_2 );
#endif

                                                // Put the previous frame back on top.
                                                popFrameStack();

                                                goto frame_no_exception_1;

                                                frame_return_exit_1:;
#if 0
                                                RESTORE_FRAME_EXCEPTION( frame_1d0f5f6fb0fb7d83d8574ec7f2ca3cea_2 );
#endif

                                                // Put the previous frame back on top.
                                                popFrameStack();

                                                goto try_return_handler_6;

                                                frame_exception_exit_2:;

#if 0
                                                RESTORE_FRAME_EXCEPTION( frame_1d0f5f6fb0fb7d83d8574ec7f2ca3cea_2 );
#endif

                                                if ( exception_tb == NULL )
                                                {
                                                    exception_tb = MAKE_TRACEBACK( frame_1d0f5f6fb0fb7d83d8574ec7f2ca3cea_2, exception_lineno );
                                                }
                                                else if ( exception_tb->tb_frame != &frame_1d0f5f6fb0fb7d83d8574ec7f2ca3cea_2->m_frame )
                                                {
                                                    exception_tb = ADD_TRACEBACK( exception_tb, frame_1d0f5f6fb0fb7d83d8574ec7f2ca3cea_2, exception_lineno );
                                                }

                                                // Attachs locals to frame if any.
                                                Nuitka_Frame_AttachLocals(
                                                    (struct Nuitka_FrameObject *)frame_1d0f5f6fb0fb7d83d8574ec7f2ca3cea_2,
                                                    type_description_2,
                                                    outline_0_var_o,
                                                    par_self
                                                );


                                                // Release cached frame.
                                                if ( frame_1d0f5f6fb0fb7d83d8574ec7f2ca3cea_2 == cache_frame_1d0f5f6fb0fb7d83d8574ec7f2ca3cea_2 )
                                                {
                                                    Py_DECREF( frame_1d0f5f6fb0fb7d83d8574ec7f2ca3cea_2 );
                                                }
                                                cache_frame_1d0f5f6fb0fb7d83d8574ec7f2ca3cea_2 = NULL;

                                                assertFrameObject( frame_1d0f5f6fb0fb7d83d8574ec7f2ca3cea_2 );

                                                // Put the previous frame back on top.
                                                popFrameStack();

                                                // Return the error.
                                                goto nested_frame_exit_1;

                                                frame_no_exception_1:;
                                                goto skip_nested_handling_1;
                                                nested_frame_exit_1:;
                                                type_description_1 = "oooooooooooo";
                                                goto try_except_handler_6;
                                                skip_nested_handling_1:;
                                                // tried codes exits in all cases
                                                NUITKA_CANNOT_GET_HERE( plistlib$$$function_61__write_object );
                                                return NULL;
                                                // Return handler code:
                                                try_return_handler_6:;
                                                Py_XDECREF( outline_0_var_o );
                                                outline_0_var_o = NULL;

                                                goto outline_result_1;
                                                // Exception handler code:
                                                try_except_handler_6:;
                                                exception_keeper_type_6 = exception_type;
                                                exception_keeper_value_6 = exception_value;
                                                exception_keeper_tb_6 = exception_tb;
                                                exception_keeper_lineno_6 = exception_lineno;
                                                exception_type = NULL;
                                                exception_value = NULL;
                                                exception_tb = NULL;
                                                exception_lineno = 0;

                                                Py_XDECREF( outline_0_var_o );
                                                outline_0_var_o = NULL;

                                                // Re-raise.
                                                exception_type = exception_keeper_type_6;
                                                exception_value = exception_keeper_value_6;
                                                exception_tb = exception_keeper_tb_6;
                                                exception_lineno = exception_keeper_lineno_6;

                                                goto outline_exception_1;
                                                // End of try:
                                                // Return statement must have exited already.
                                                NUITKA_CANNOT_GET_HERE( plistlib$$$function_61__write_object );
                                                return NULL;
                                                outline_exception_1:;
                                                exception_lineno = 879;
                                                goto frame_exception_exit_1;
                                                outline_result_1:;
                                                assert( var_refs == NULL );
                                                var_refs = tmp_assign_source_5;
                                            }
                                            {
                                                PyObject *tmp_assign_source_10;
                                                PyObject *tmp_len_arg_5;
                                                CHECK_OBJECT( var_refs );
                                                tmp_len_arg_5 = var_refs;
                                                tmp_assign_source_10 = BUILTIN_LEN( tmp_len_arg_5 );
                                                if ( tmp_assign_source_10 == NULL )
                                                {
                                                    assert( ERROR_OCCURRED() );

                                                    FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                                                    exception_lineno = 880;
                                                    type_description_1 = "oooooooooooo";
                                                    goto frame_exception_exit_1;
                                                }
                                                assert( var_s == NULL );
                                                var_s = tmp_assign_source_10;
                                            }
                                            {
                                                PyObject *tmp_called_instance_19;
                                                PyObject *tmp_call_result_19;
                                                PyObject *tmp_args_element_name_43;
                                                PyObject *tmp_args_element_name_44;
                                                CHECK_OBJECT( par_self );
                                                tmp_called_instance_19 = par_self;
                                                tmp_args_element_name_43 = const_int_pos_160;
                                                CHECK_OBJECT( var_s );
                                                tmp_args_element_name_44 = var_s;
                                                frame_edf236a14f5145c2001a5486f9240237->m_frame.f_lineno = 881;
                                                {
                                                    PyObject *call_args[] = { tmp_args_element_name_43, tmp_args_element_name_44 };
                                                    tmp_call_result_19 = CALL_METHOD_WITH_ARGS2( tmp_called_instance_19, const_str_plain__write_size, call_args );
                                                }

                                                if ( tmp_call_result_19 == NULL )
                                                {
                                                    assert( ERROR_OCCURRED() );

                                                    FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                                                    exception_lineno = 881;
                                                    type_description_1 = "oooooooooooo";
                                                    goto frame_exception_exit_1;
                                                }
                                                Py_DECREF( tmp_call_result_19 );
                                            }
                                            {
                                                PyObject *tmp_called_name_16;
                                                PyObject *tmp_source_name_36;
                                                PyObject *tmp_source_name_37;
                                                PyObject *tmp_call_result_20;
                                                PyObject *tmp_args_element_name_45;
                                                PyObject *tmp_dircall_arg1_1;
                                                PyObject *tmp_source_name_38;
                                                PyObject *tmp_mvar_value_12;
                                                PyObject *tmp_dircall_arg2_1;
                                                PyObject *tmp_tuple_element_1;
                                                PyObject *tmp_left_name_4;
                                                PyObject *tmp_right_name_4;
                                                PyObject *tmp_left_name_5;
                                                PyObject *tmp_source_name_39;
                                                PyObject *tmp_right_name_5;
                                                PyObject *tmp_dircall_arg3_1;
                                                CHECK_OBJECT( par_self );
                                                tmp_source_name_37 = par_self;
                                                tmp_source_name_36 = LOOKUP_ATTRIBUTE( tmp_source_name_37, const_str_plain__fp );
                                                if ( tmp_source_name_36 == NULL )
                                                {
                                                    assert( ERROR_OCCURRED() );

                                                    FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                                                    exception_lineno = 882;
                                                    type_description_1 = "oooooooooooo";
                                                    goto frame_exception_exit_1;
                                                }
                                                tmp_called_name_16 = LOOKUP_ATTRIBUTE( tmp_source_name_36, const_str_plain_write );
                                                Py_DECREF( tmp_source_name_36 );
                                                if ( tmp_called_name_16 == NULL )
                                                {
                                                    assert( ERROR_OCCURRED() );

                                                    FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                                                    exception_lineno = 882;
                                                    type_description_1 = "oooooooooooo";
                                                    goto frame_exception_exit_1;
                                                }
                                                tmp_mvar_value_12 = GET_STRING_DICT_VALUE( moduledict_plistlib, (Nuitka_StringObject *)const_str_plain_struct );

                                                if (unlikely( tmp_mvar_value_12 == NULL ))
                                                {
                                                    tmp_mvar_value_12 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_struct );
                                                }

                                                if ( tmp_mvar_value_12 == NULL )
                                                {
                                                    Py_DECREF( tmp_called_name_16 );
                                                    exception_type = PyExc_NameError;
                                                    Py_INCREF( exception_type );
                                                    exception_value = PyUnicode_FromFormat( "name '%s' is not defined", "struct" );
                                                    exception_tb = NULL;
                                                    NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
                                                    CHAIN_EXCEPTION( exception_value );

                                                    exception_lineno = 882;
                                                    type_description_1 = "oooooooooooo";
                                                    goto frame_exception_exit_1;
                                                }

                                                tmp_source_name_38 = tmp_mvar_value_12;
                                                tmp_dircall_arg1_1 = LOOKUP_ATTRIBUTE( tmp_source_name_38, const_str_plain_pack );
                                                if ( tmp_dircall_arg1_1 == NULL )
                                                {
                                                    assert( ERROR_OCCURRED() );

                                                    FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
                                                    Py_DECREF( tmp_called_name_16 );

                                                    exception_lineno = 882;
                                                    type_description_1 = "oooooooooooo";
                                                    goto frame_exception_exit_1;
                                                }
                                                tmp_left_name_4 = const_str_chr_62;
                                                CHECK_OBJECT( par_self );
                                                tmp_source_name_39 = par_self;
                                                tmp_left_name_5 = LOOKUP_ATTRIBUTE( tmp_source_name_39, const_str_plain__ref_format );
                                                if ( tmp_left_name_5 == NULL )
                                                {
                                                    assert( ERROR_OCCURRED() );

                                                    FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
                                                    Py_DECREF( tmp_called_name_16 );
                                                    Py_DECREF( tmp_dircall_arg1_1 );

                                                    exception_lineno = 882;
                                                    type_description_1 = "oooooooooooo";
                                                    goto frame_exception_exit_1;
                                                }
                                                CHECK_OBJECT( var_s );
                                                tmp_right_name_5 = var_s;
                                                tmp_right_name_4 = BINARY_OPERATION_MUL( tmp_left_name_5, tmp_right_name_5 );
                                                Py_DECREF( tmp_left_name_5 );
                                                if ( tmp_right_name_4 == NULL )
                                                {
                                                    assert( ERROR_OCCURRED() );

                                                    FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
                                                    Py_DECREF( tmp_called_name_16 );
                                                    Py_DECREF( tmp_dircall_arg1_1 );

                                                    exception_lineno = 882;
                                                    type_description_1 = "oooooooooooo";
                                                    goto frame_exception_exit_1;
                                                }
                                                tmp_tuple_element_1 = BINARY_OPERATION_ADD_UNICODE_OBJECT( tmp_left_name_4, tmp_right_name_4 );
                                                Py_DECREF( tmp_right_name_4 );
                                                if ( tmp_tuple_element_1 == NULL )
                                                {
                                                    assert( ERROR_OCCURRED() );

                                                    FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
                                                    Py_DECREF( tmp_called_name_16 );
                                                    Py_DECREF( tmp_dircall_arg1_1 );

                                                    exception_lineno = 882;
                                                    type_description_1 = "oooooooooooo";
                                                    goto frame_exception_exit_1;
                                                }
                                                tmp_dircall_arg2_1 = PyTuple_New( 1 );
                                                PyTuple_SET_ITEM( tmp_dircall_arg2_1, 0, tmp_tuple_element_1 );
                                                CHECK_OBJECT( var_refs );
                                                tmp_dircall_arg3_1 = var_refs;
                                                Py_INCREF( tmp_dircall_arg3_1 );

                                                {
                                                    PyObject *dir_call_args[] = {tmp_dircall_arg1_1, tmp_dircall_arg2_1, tmp_dircall_arg3_1};
                                                    tmp_args_element_name_45 = impl___internal__$$$function_4_complex_call_helper_pos_star_list( dir_call_args );
                                                }
                                                if ( tmp_args_element_name_45 == NULL )
                                                {
                                                    assert( ERROR_OCCURRED() );

                                                    FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
                                                    Py_DECREF( tmp_called_name_16 );

                                                    exception_lineno = 882;
                                                    type_description_1 = "oooooooooooo";
                                                    goto frame_exception_exit_1;
                                                }
                                                frame_edf236a14f5145c2001a5486f9240237->m_frame.f_lineno = 882;
                                                {
                                                    PyObject *call_args[] = { tmp_args_element_name_45 };
                                                    tmp_call_result_20 = CALL_FUNCTION_WITH_ARGS1( tmp_called_name_16, call_args );
                                                }

                                                Py_DECREF( tmp_called_name_16 );
                                                Py_DECREF( tmp_args_element_name_45 );
                                                if ( tmp_call_result_20 == NULL )
                                                {
                                                    assert( ERROR_OCCURRED() );

                                                    FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                                                    exception_lineno = 882;
                                                    type_description_1 = "oooooooooooo";
                                                    goto frame_exception_exit_1;
                                                }
                                                Py_DECREF( tmp_call_result_20 );
                                            }
                                            goto branch_end_18;
                                            branch_no_18:;
                                            {
                                                nuitka_bool tmp_condition_result_19;
                                                PyObject *tmp_isinstance_inst_8;
                                                PyObject *tmp_isinstance_cls_8;
                                                CHECK_OBJECT( par_value );
                                                tmp_isinstance_inst_8 = par_value;
                                                tmp_isinstance_cls_8 = (PyObject *)&PyDict_Type;
                                                tmp_res = Nuitka_IsInstance( tmp_isinstance_inst_8, tmp_isinstance_cls_8 );
                                                if ( tmp_res == -1 )
                                                {
                                                    assert( ERROR_OCCURRED() );

                                                    FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                                                    exception_lineno = 884;
                                                    type_description_1 = "oooooooooooo";
                                                    goto frame_exception_exit_1;
                                                }
                                                tmp_condition_result_19 = ( tmp_res != 0 ) ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
                                                if ( tmp_condition_result_19 == NUITKA_BOOL_TRUE )
                                                {
                                                    goto branch_yes_19;
                                                }
                                                else
                                                {
                                                    goto branch_no_19;
                                                }
                                                branch_yes_19:;
                                                {
                                                    PyObject *tmp_assign_source_11;
                                                    PyObject *tmp_iter_arg_2;
                                                    tmp_iter_arg_2 = DEEP_COPY( const_tuple_list_empty_list_empty_tuple );
                                                    tmp_assign_source_11 = MAKE_UNPACK_ITERATOR( tmp_iter_arg_2 );
                                                    Py_DECREF( tmp_iter_arg_2 );
                                                    assert( !(tmp_assign_source_11 == NULL) );
                                                    assert( tmp_tuple_unpack_1__source_iter == NULL );
                                                    tmp_tuple_unpack_1__source_iter = tmp_assign_source_11;
                                                }
                                                // Tried code:
                                                // Tried code:
                                                {
                                                    PyObject *tmp_assign_source_12;
                                                    PyObject *tmp_unpack_1;
                                                    CHECK_OBJECT( tmp_tuple_unpack_1__source_iter );
                                                    tmp_unpack_1 = tmp_tuple_unpack_1__source_iter;
                                                    tmp_assign_source_12 = UNPACK_NEXT( tmp_unpack_1, 0, 2 );
                                                    if ( tmp_assign_source_12 == NULL )
                                                    {
                                                        if ( !ERROR_OCCURRED() )
                                                        {
                                                            exception_type = PyExc_StopIteration;
                                                            Py_INCREF( exception_type );
                                                            exception_value = NULL;
                                                            exception_tb = NULL;
                                                        }
                                                        else
                                                        {
                                                            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
                                                        }


                                                        type_description_1 = "oooooooooooo";
                                                        exception_lineno = 885;
                                                        goto try_except_handler_9;
                                                    }
                                                    assert( tmp_tuple_unpack_1__element_1 == NULL );
                                                    tmp_tuple_unpack_1__element_1 = tmp_assign_source_12;
                                                }
                                                {
                                                    PyObject *tmp_assign_source_13;
                                                    PyObject *tmp_unpack_2;
                                                    CHECK_OBJECT( tmp_tuple_unpack_1__source_iter );
                                                    tmp_unpack_2 = tmp_tuple_unpack_1__source_iter;
                                                    tmp_assign_source_13 = UNPACK_NEXT( tmp_unpack_2, 1, 2 );
                                                    if ( tmp_assign_source_13 == NULL )
                                                    {
                                                        if ( !ERROR_OCCURRED() )
                                                        {
                                                            exception_type = PyExc_StopIteration;
                                                            Py_INCREF( exception_type );
                                                            exception_value = NULL;
                                                            exception_tb = NULL;
                                                        }
                                                        else
                                                        {
                                                            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
                                                        }


                                                        type_description_1 = "oooooooooooo";
                                                        exception_lineno = 885;
                                                        goto try_except_handler_9;
                                                    }
                                                    assert( tmp_tuple_unpack_1__element_2 == NULL );
                                                    tmp_tuple_unpack_1__element_2 = tmp_assign_source_13;
                                                }
                                                goto try_end_4;
                                                // Exception handler code:
                                                try_except_handler_9:;
                                                exception_keeper_type_7 = exception_type;
                                                exception_keeper_value_7 = exception_value;
                                                exception_keeper_tb_7 = exception_tb;
                                                exception_keeper_lineno_7 = exception_lineno;
                                                exception_type = NULL;
                                                exception_value = NULL;
                                                exception_tb = NULL;
                                                exception_lineno = 0;

                                                CHECK_OBJECT( (PyObject *)tmp_tuple_unpack_1__source_iter );
                                                Py_DECREF( tmp_tuple_unpack_1__source_iter );
                                                tmp_tuple_unpack_1__source_iter = NULL;

                                                // Re-raise.
                                                exception_type = exception_keeper_type_7;
                                                exception_value = exception_keeper_value_7;
                                                exception_tb = exception_keeper_tb_7;
                                                exception_lineno = exception_keeper_lineno_7;

                                                goto try_except_handler_8;
                                                // End of try:
                                                try_end_4:;
                                                goto try_end_5;
                                                // Exception handler code:
                                                try_except_handler_8:;
                                                exception_keeper_type_8 = exception_type;
                                                exception_keeper_value_8 = exception_value;
                                                exception_keeper_tb_8 = exception_tb;
                                                exception_keeper_lineno_8 = exception_lineno;
                                                exception_type = NULL;
                                                exception_value = NULL;
                                                exception_tb = NULL;
                                                exception_lineno = 0;

                                                Py_XDECREF( tmp_tuple_unpack_1__element_1 );
                                                tmp_tuple_unpack_1__element_1 = NULL;

                                                // Re-raise.
                                                exception_type = exception_keeper_type_8;
                                                exception_value = exception_keeper_value_8;
                                                exception_tb = exception_keeper_tb_8;
                                                exception_lineno = exception_keeper_lineno_8;

                                                goto frame_exception_exit_1;
                                                // End of try:
                                                try_end_5:;
                                                CHECK_OBJECT( (PyObject *)tmp_tuple_unpack_1__source_iter );
                                                Py_DECREF( tmp_tuple_unpack_1__source_iter );
                                                tmp_tuple_unpack_1__source_iter = NULL;

                                                {
                                                    PyObject *tmp_assign_source_14;
                                                    CHECK_OBJECT( tmp_tuple_unpack_1__element_1 );
                                                    tmp_assign_source_14 = tmp_tuple_unpack_1__element_1;
                                                    assert( var_keyRefs == NULL );
                                                    Py_INCREF( tmp_assign_source_14 );
                                                    var_keyRefs = tmp_assign_source_14;
                                                }
                                                Py_XDECREF( tmp_tuple_unpack_1__element_1 );
                                                tmp_tuple_unpack_1__element_1 = NULL;

                                                {
                                                    PyObject *tmp_assign_source_15;
                                                    CHECK_OBJECT( tmp_tuple_unpack_1__element_2 );
                                                    tmp_assign_source_15 = tmp_tuple_unpack_1__element_2;
                                                    assert( var_valRefs == NULL );
                                                    Py_INCREF( tmp_assign_source_15 );
                                                    var_valRefs = tmp_assign_source_15;
                                                }
                                                Py_XDECREF( tmp_tuple_unpack_1__element_2 );
                                                tmp_tuple_unpack_1__element_2 = NULL;

                                                {
                                                    nuitka_bool tmp_condition_result_20;
                                                    PyObject *tmp_source_name_40;
                                                    PyObject *tmp_attribute_value_1;
                                                    int tmp_truth_name_1;
                                                    CHECK_OBJECT( par_self );
                                                    tmp_source_name_40 = par_self;
                                                    tmp_attribute_value_1 = LOOKUP_ATTRIBUTE( tmp_source_name_40, const_str_plain__sort_keys );
                                                    if ( tmp_attribute_value_1 == NULL )
                                                    {
                                                        assert( ERROR_OCCURRED() );

                                                        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                                                        exception_lineno = 887;
                                                        type_description_1 = "oooooooooooo";
                                                        goto frame_exception_exit_1;
                                                    }
                                                    tmp_truth_name_1 = CHECK_IF_TRUE( tmp_attribute_value_1 );
                                                    if ( tmp_truth_name_1 == -1 )
                                                    {
                                                        assert( ERROR_OCCURRED() );

                                                        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
                                                        Py_DECREF( tmp_attribute_value_1 );

                                                        exception_lineno = 887;
                                                        type_description_1 = "oooooooooooo";
                                                        goto frame_exception_exit_1;
                                                    }
                                                    tmp_condition_result_20 = tmp_truth_name_1 == 1 ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
                                                    Py_DECREF( tmp_attribute_value_1 );
                                                    if ( tmp_condition_result_20 == NUITKA_BOOL_TRUE )
                                                    {
                                                        goto branch_yes_20;
                                                    }
                                                    else
                                                    {
                                                        goto branch_no_20;
                                                    }
                                                    branch_yes_20:;
                                                    {
                                                        PyObject *tmp_assign_source_16;
                                                        PyObject *tmp_called_name_17;
                                                        PyObject *tmp_args_element_name_46;
                                                        PyObject *tmp_called_instance_20;
                                                        tmp_called_name_17 = LOOKUP_BUILTIN( const_str_plain_sorted );
                                                        assert( tmp_called_name_17 != NULL );
                                                        CHECK_OBJECT( par_value );
                                                        tmp_called_instance_20 = par_value;
                                                        frame_edf236a14f5145c2001a5486f9240237->m_frame.f_lineno = 888;
                                                        tmp_args_element_name_46 = CALL_METHOD_NO_ARGS( tmp_called_instance_20, const_str_plain_items );
                                                        if ( tmp_args_element_name_46 == NULL )
                                                        {
                                                            assert( ERROR_OCCURRED() );

                                                            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                                                            exception_lineno = 888;
                                                            type_description_1 = "oooooooooooo";
                                                            goto frame_exception_exit_1;
                                                        }
                                                        frame_edf236a14f5145c2001a5486f9240237->m_frame.f_lineno = 888;
                                                        {
                                                            PyObject *call_args[] = { tmp_args_element_name_46 };
                                                            tmp_assign_source_16 = CALL_FUNCTION_WITH_ARGS1( tmp_called_name_17, call_args );
                                                        }

                                                        Py_DECREF( tmp_args_element_name_46 );
                                                        if ( tmp_assign_source_16 == NULL )
                                                        {
                                                            assert( ERROR_OCCURRED() );

                                                            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                                                            exception_lineno = 888;
                                                            type_description_1 = "oooooooooooo";
                                                            goto frame_exception_exit_1;
                                                        }
                                                        assert( var_rootItems == NULL );
                                                        var_rootItems = tmp_assign_source_16;
                                                    }
                                                    goto branch_end_20;
                                                    branch_no_20:;
                                                    {
                                                        PyObject *tmp_assign_source_17;
                                                        PyObject *tmp_called_instance_21;
                                                        CHECK_OBJECT( par_value );
                                                        tmp_called_instance_21 = par_value;
                                                        frame_edf236a14f5145c2001a5486f9240237->m_frame.f_lineno = 890;
                                                        tmp_assign_source_17 = CALL_METHOD_NO_ARGS( tmp_called_instance_21, const_str_plain_items );
                                                        if ( tmp_assign_source_17 == NULL )
                                                        {
                                                            assert( ERROR_OCCURRED() );

                                                            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                                                            exception_lineno = 890;
                                                            type_description_1 = "oooooooooooo";
                                                            goto frame_exception_exit_1;
                                                        }
                                                        assert( var_rootItems == NULL );
                                                        var_rootItems = tmp_assign_source_17;
                                                    }
                                                    branch_end_20:;
                                                }
                                                {
                                                    PyObject *tmp_assign_source_18;
                                                    PyObject *tmp_iter_arg_3;
                                                    CHECK_OBJECT( var_rootItems );
                                                    tmp_iter_arg_3 = var_rootItems;
                                                    tmp_assign_source_18 = MAKE_ITERATOR( tmp_iter_arg_3 );
                                                    if ( tmp_assign_source_18 == NULL )
                                                    {
                                                        assert( ERROR_OCCURRED() );

                                                        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                                                        exception_lineno = 892;
                                                        type_description_1 = "oooooooooooo";
                                                        goto frame_exception_exit_1;
                                                    }
                                                    assert( tmp_for_loop_1__for_iterator == NULL );
                                                    tmp_for_loop_1__for_iterator = tmp_assign_source_18;
                                                }
                                                // Tried code:
                                                loop_start_2:;
                                                {
                                                    PyObject *tmp_next_source_2;
                                                    PyObject *tmp_assign_source_19;
                                                    CHECK_OBJECT( tmp_for_loop_1__for_iterator );
                                                    tmp_next_source_2 = tmp_for_loop_1__for_iterator;
                                                    tmp_assign_source_19 = ITERATOR_NEXT( tmp_next_source_2 );
                                                    if ( tmp_assign_source_19 == NULL )
                                                    {
                                                        if ( CHECK_AND_CLEAR_STOP_ITERATION_OCCURRED() )
                                                        {

                                                            goto loop_end_2;
                                                        }
                                                        else
                                                        {

                                                            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
                                                            type_description_1 = "oooooooooooo";
                                                            exception_lineno = 892;
                                                            goto try_except_handler_10;
                                                        }
                                                    }

                                                    {
                                                        PyObject *old = tmp_for_loop_1__iter_value;
                                                        tmp_for_loop_1__iter_value = tmp_assign_source_19;
                                                        Py_XDECREF( old );
                                                    }

                                                }
                                                // Tried code:
                                                {
                                                    PyObject *tmp_assign_source_20;
                                                    PyObject *tmp_iter_arg_4;
                                                    CHECK_OBJECT( tmp_for_loop_1__iter_value );
                                                    tmp_iter_arg_4 = tmp_for_loop_1__iter_value;
                                                    tmp_assign_source_20 = MAKE_UNPACK_ITERATOR( tmp_iter_arg_4 );
                                                    if ( tmp_assign_source_20 == NULL )
                                                    {
                                                        assert( ERROR_OCCURRED() );

                                                        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                                                        exception_lineno = 892;
                                                        type_description_1 = "oooooooooooo";
                                                        goto try_except_handler_11;
                                                    }
                                                    {
                                                        PyObject *old = tmp_tuple_unpack_2__source_iter;
                                                        tmp_tuple_unpack_2__source_iter = tmp_assign_source_20;
                                                        Py_XDECREF( old );
                                                    }

                                                }
                                                // Tried code:
                                                {
                                                    PyObject *tmp_assign_source_21;
                                                    PyObject *tmp_unpack_3;
                                                    CHECK_OBJECT( tmp_tuple_unpack_2__source_iter );
                                                    tmp_unpack_3 = tmp_tuple_unpack_2__source_iter;
                                                    tmp_assign_source_21 = UNPACK_NEXT( tmp_unpack_3, 0, 2 );
                                                    if ( tmp_assign_source_21 == NULL )
                                                    {
                                                        if ( !ERROR_OCCURRED() )
                                                        {
                                                            exception_type = PyExc_StopIteration;
                                                            Py_INCREF( exception_type );
                                                            exception_value = NULL;
                                                            exception_tb = NULL;
                                                        }
                                                        else
                                                        {
                                                            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
                                                        }


                                                        type_description_1 = "oooooooooooo";
                                                        exception_lineno = 892;
                                                        goto try_except_handler_12;
                                                    }
                                                    {
                                                        PyObject *old = tmp_tuple_unpack_2__element_1;
                                                        tmp_tuple_unpack_2__element_1 = tmp_assign_source_21;
                                                        Py_XDECREF( old );
                                                    }

                                                }
                                                {
                                                    PyObject *tmp_assign_source_22;
                                                    PyObject *tmp_unpack_4;
                                                    CHECK_OBJECT( tmp_tuple_unpack_2__source_iter );
                                                    tmp_unpack_4 = tmp_tuple_unpack_2__source_iter;
                                                    tmp_assign_source_22 = UNPACK_NEXT( tmp_unpack_4, 1, 2 );
                                                    if ( tmp_assign_source_22 == NULL )
                                                    {
                                                        if ( !ERROR_OCCURRED() )
                                                        {
                                                            exception_type = PyExc_StopIteration;
                                                            Py_INCREF( exception_type );
                                                            exception_value = NULL;
                                                            exception_tb = NULL;
                                                        }
                                                        else
                                                        {
                                                            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
                                                        }


                                                        type_description_1 = "oooooooooooo";
                                                        exception_lineno = 892;
                                                        goto try_except_handler_12;
                                                    }
                                                    {
                                                        PyObject *old = tmp_tuple_unpack_2__element_2;
                                                        tmp_tuple_unpack_2__element_2 = tmp_assign_source_22;
                                                        Py_XDECREF( old );
                                                    }

                                                }
                                                {
                                                    PyObject *tmp_iterator_name_1;
                                                    CHECK_OBJECT( tmp_tuple_unpack_2__source_iter );
                                                    tmp_iterator_name_1 = tmp_tuple_unpack_2__source_iter;
                                                    // Check if iterator has left-over elements.
                                                    CHECK_OBJECT( tmp_iterator_name_1 ); assert( HAS_ITERNEXT( tmp_iterator_name_1 ) );

                                                    tmp_iterator_attempt = (*Py_TYPE( tmp_iterator_name_1 )->tp_iternext)( tmp_iterator_name_1 );

                                                    if (likely( tmp_iterator_attempt == NULL ))
                                                    {
                                                        PyObject *error = GET_ERROR_OCCURRED();

                                                        if ( error != NULL )
                                                        {
                                                            if ( EXCEPTION_MATCH_BOOL_SINGLE( error, PyExc_StopIteration ))
                                                            {
                                                                CLEAR_ERROR_OCCURRED();
                                                            }
                                                            else
                                                            {
                                                                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );

                                                                type_description_1 = "oooooooooooo";
                                                                exception_lineno = 892;
                                                                goto try_except_handler_12;
                                                            }
                                                        }
                                                    }
                                                    else
                                                    {
                                                        Py_DECREF( tmp_iterator_attempt );

                                                        // TODO: Could avoid PyErr_Format.
#if PYTHON_VERSION < 300
                                                        PyErr_Format( PyExc_ValueError, "too many values to unpack" );
#else
                                                        PyErr_Format( PyExc_ValueError, "too many values to unpack (expected 2)" );
#endif
                                                        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );

                                                        type_description_1 = "oooooooooooo";
                                                        exception_lineno = 892;
                                                        goto try_except_handler_12;
                                                    }
                                                }
                                                goto try_end_6;
                                                // Exception handler code:
                                                try_except_handler_12:;
                                                exception_keeper_type_9 = exception_type;
                                                exception_keeper_value_9 = exception_value;
                                                exception_keeper_tb_9 = exception_tb;
                                                exception_keeper_lineno_9 = exception_lineno;
                                                exception_type = NULL;
                                                exception_value = NULL;
                                                exception_tb = NULL;
                                                exception_lineno = 0;

                                                CHECK_OBJECT( (PyObject *)tmp_tuple_unpack_2__source_iter );
                                                Py_DECREF( tmp_tuple_unpack_2__source_iter );
                                                tmp_tuple_unpack_2__source_iter = NULL;

                                                // Re-raise.
                                                exception_type = exception_keeper_type_9;
                                                exception_value = exception_keeper_value_9;
                                                exception_tb = exception_keeper_tb_9;
                                                exception_lineno = exception_keeper_lineno_9;

                                                goto try_except_handler_11;
                                                // End of try:
                                                try_end_6:;
                                                goto try_end_7;
                                                // Exception handler code:
                                                try_except_handler_11:;
                                                exception_keeper_type_10 = exception_type;
                                                exception_keeper_value_10 = exception_value;
                                                exception_keeper_tb_10 = exception_tb;
                                                exception_keeper_lineno_10 = exception_lineno;
                                                exception_type = NULL;
                                                exception_value = NULL;
                                                exception_tb = NULL;
                                                exception_lineno = 0;

                                                Py_XDECREF( tmp_tuple_unpack_2__element_1 );
                                                tmp_tuple_unpack_2__element_1 = NULL;

                                                Py_XDECREF( tmp_tuple_unpack_2__element_2 );
                                                tmp_tuple_unpack_2__element_2 = NULL;

                                                // Re-raise.
                                                exception_type = exception_keeper_type_10;
                                                exception_value = exception_keeper_value_10;
                                                exception_tb = exception_keeper_tb_10;
                                                exception_lineno = exception_keeper_lineno_10;

                                                goto try_except_handler_10;
                                                // End of try:
                                                try_end_7:;
                                                CHECK_OBJECT( (PyObject *)tmp_tuple_unpack_2__source_iter );
                                                Py_DECREF( tmp_tuple_unpack_2__source_iter );
                                                tmp_tuple_unpack_2__source_iter = NULL;

                                                {
                                                    PyObject *tmp_assign_source_23;
                                                    CHECK_OBJECT( tmp_tuple_unpack_2__element_1 );
                                                    tmp_assign_source_23 = tmp_tuple_unpack_2__element_1;
                                                    {
                                                        PyObject *old = var_k;
                                                        var_k = tmp_assign_source_23;
                                                        Py_INCREF( var_k );
                                                        Py_XDECREF( old );
                                                    }

                                                }
                                                Py_XDECREF( tmp_tuple_unpack_2__element_1 );
                                                tmp_tuple_unpack_2__element_1 = NULL;

                                                {
                                                    PyObject *tmp_assign_source_24;
                                                    CHECK_OBJECT( tmp_tuple_unpack_2__element_2 );
                                                    tmp_assign_source_24 = tmp_tuple_unpack_2__element_2;
                                                    {
                                                        PyObject *old = var_v;
                                                        var_v = tmp_assign_source_24;
                                                        Py_INCREF( var_v );
                                                        Py_XDECREF( old );
                                                    }

                                                }
                                                Py_XDECREF( tmp_tuple_unpack_2__element_2 );
                                                tmp_tuple_unpack_2__element_2 = NULL;

                                                {
                                                    nuitka_bool tmp_condition_result_21;
                                                    PyObject *tmp_operand_name_1;
                                                    PyObject *tmp_isinstance_inst_9;
                                                    PyObject *tmp_isinstance_cls_9;
                                                    CHECK_OBJECT( var_k );
                                                    tmp_isinstance_inst_9 = var_k;
                                                    tmp_isinstance_cls_9 = (PyObject *)&PyUnicode_Type;
                                                    tmp_res = Nuitka_IsInstance( tmp_isinstance_inst_9, tmp_isinstance_cls_9 );
                                                    if ( tmp_res == -1 )
                                                    {
                                                        assert( ERROR_OCCURRED() );

                                                        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                                                        exception_lineno = 893;
                                                        type_description_1 = "oooooooooooo";
                                                        goto try_except_handler_10;
                                                    }
                                                    tmp_operand_name_1 = ( tmp_res != 0 ) ? Py_True : Py_False;
                                                    tmp_res = CHECK_IF_TRUE( tmp_operand_name_1 );
                                                    if ( tmp_res == -1 )
                                                    {
                                                        assert( ERROR_OCCURRED() );

                                                        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                                                        exception_lineno = 893;
                                                        type_description_1 = "oooooooooooo";
                                                        goto try_except_handler_10;
                                                    }
                                                    tmp_condition_result_21 = ( tmp_res == 0 ) ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
                                                    if ( tmp_condition_result_21 == NUITKA_BOOL_TRUE )
                                                    {
                                                        goto branch_yes_21;
                                                    }
                                                    else
                                                    {
                                                        goto branch_no_21;
                                                    }
                                                    branch_yes_21:;
                                                    {
                                                        nuitka_bool tmp_condition_result_22;
                                                        PyObject *tmp_source_name_41;
                                                        PyObject *tmp_attribute_value_2;
                                                        int tmp_truth_name_2;
                                                        CHECK_OBJECT( par_self );
                                                        tmp_source_name_41 = par_self;
                                                        tmp_attribute_value_2 = LOOKUP_ATTRIBUTE( tmp_source_name_41, const_str_plain__skipkeys );
                                                        if ( tmp_attribute_value_2 == NULL )
                                                        {
                                                            assert( ERROR_OCCURRED() );

                                                            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                                                            exception_lineno = 894;
                                                            type_description_1 = "oooooooooooo";
                                                            goto try_except_handler_10;
                                                        }
                                                        tmp_truth_name_2 = CHECK_IF_TRUE( tmp_attribute_value_2 );
                                                        if ( tmp_truth_name_2 == -1 )
                                                        {
                                                            assert( ERROR_OCCURRED() );

                                                            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
                                                            Py_DECREF( tmp_attribute_value_2 );

                                                            exception_lineno = 894;
                                                            type_description_1 = "oooooooooooo";
                                                            goto try_except_handler_10;
                                                        }
                                                        tmp_condition_result_22 = tmp_truth_name_2 == 1 ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
                                                        Py_DECREF( tmp_attribute_value_2 );
                                                        if ( tmp_condition_result_22 == NUITKA_BOOL_TRUE )
                                                        {
                                                            goto branch_yes_22;
                                                        }
                                                        else
                                                        {
                                                            goto branch_no_22;
                                                        }
                                                        branch_yes_22:;
                                                        goto loop_start_2;
                                                        branch_no_22:;
                                                    }
                                                    {
                                                        PyObject *tmp_raise_type_3;
                                                        PyObject *tmp_make_exception_arg_3;
                                                        tmp_make_exception_arg_3 = const_str_digest_e3c3d78d4d66a632c6ad68dc0fb31d57;
                                                        frame_edf236a14f5145c2001a5486f9240237->m_frame.f_lineno = 896;
                                                        {
                                                            PyObject *call_args[] = { tmp_make_exception_arg_3 };
                                                            tmp_raise_type_3 = CALL_FUNCTION_WITH_ARGS1( PyExc_TypeError, call_args );
                                                        }

                                                        assert( !(tmp_raise_type_3 == NULL) );
                                                        exception_type = tmp_raise_type_3;
                                                        exception_lineno = 896;
                                                        RAISE_EXCEPTION_WITH_TYPE( &exception_type, &exception_value, &exception_tb );
                                                        type_description_1 = "oooooooooooo";
                                                        goto try_except_handler_10;
                                                    }
                                                    branch_no_21:;
                                                }
                                                {
                                                    PyObject *tmp_called_name_18;
                                                    PyObject *tmp_source_name_42;
                                                    PyObject *tmp_call_result_21;
                                                    PyObject *tmp_args_element_name_47;
                                                    PyObject *tmp_called_instance_22;
                                                    PyObject *tmp_args_element_name_48;
                                                    CHECK_OBJECT( var_keyRefs );
                                                    tmp_source_name_42 = var_keyRefs;
                                                    tmp_called_name_18 = LOOKUP_ATTRIBUTE( tmp_source_name_42, const_str_plain_append );
                                                    if ( tmp_called_name_18 == NULL )
                                                    {
                                                        assert( ERROR_OCCURRED() );

                                                        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                                                        exception_lineno = 897;
                                                        type_description_1 = "oooooooooooo";
                                                        goto try_except_handler_10;
                                                    }
                                                    CHECK_OBJECT( par_self );
                                                    tmp_called_instance_22 = par_self;
                                                    CHECK_OBJECT( var_k );
                                                    tmp_args_element_name_48 = var_k;
                                                    frame_edf236a14f5145c2001a5486f9240237->m_frame.f_lineno = 897;
                                                    {
                                                        PyObject *call_args[] = { tmp_args_element_name_48 };
                                                        tmp_args_element_name_47 = CALL_METHOD_WITH_ARGS1( tmp_called_instance_22, const_str_plain__getrefnum, call_args );
                                                    }

                                                    if ( tmp_args_element_name_47 == NULL )
                                                    {
                                                        assert( ERROR_OCCURRED() );

                                                        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
                                                        Py_DECREF( tmp_called_name_18 );

                                                        exception_lineno = 897;
                                                        type_description_1 = "oooooooooooo";
                                                        goto try_except_handler_10;
                                                    }
                                                    frame_edf236a14f5145c2001a5486f9240237->m_frame.f_lineno = 897;
                                                    {
                                                        PyObject *call_args[] = { tmp_args_element_name_47 };
                                                        tmp_call_result_21 = CALL_FUNCTION_WITH_ARGS1( tmp_called_name_18, call_args );
                                                    }

                                                    Py_DECREF( tmp_called_name_18 );
                                                    Py_DECREF( tmp_args_element_name_47 );
                                                    if ( tmp_call_result_21 == NULL )
                                                    {
                                                        assert( ERROR_OCCURRED() );

                                                        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                                                        exception_lineno = 897;
                                                        type_description_1 = "oooooooooooo";
                                                        goto try_except_handler_10;
                                                    }
                                                    Py_DECREF( tmp_call_result_21 );
                                                }
                                                {
                                                    PyObject *tmp_called_name_19;
                                                    PyObject *tmp_source_name_43;
                                                    PyObject *tmp_call_result_22;
                                                    PyObject *tmp_args_element_name_49;
                                                    PyObject *tmp_called_instance_23;
                                                    PyObject *tmp_args_element_name_50;
                                                    CHECK_OBJECT( var_valRefs );
                                                    tmp_source_name_43 = var_valRefs;
                                                    tmp_called_name_19 = LOOKUP_ATTRIBUTE( tmp_source_name_43, const_str_plain_append );
                                                    if ( tmp_called_name_19 == NULL )
                                                    {
                                                        assert( ERROR_OCCURRED() );

                                                        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                                                        exception_lineno = 898;
                                                        type_description_1 = "oooooooooooo";
                                                        goto try_except_handler_10;
                                                    }
                                                    CHECK_OBJECT( par_self );
                                                    tmp_called_instance_23 = par_self;
                                                    CHECK_OBJECT( var_v );
                                                    tmp_args_element_name_50 = var_v;
                                                    frame_edf236a14f5145c2001a5486f9240237->m_frame.f_lineno = 898;
                                                    {
                                                        PyObject *call_args[] = { tmp_args_element_name_50 };
                                                        tmp_args_element_name_49 = CALL_METHOD_WITH_ARGS1( tmp_called_instance_23, const_str_plain__getrefnum, call_args );
                                                    }

                                                    if ( tmp_args_element_name_49 == NULL )
                                                    {
                                                        assert( ERROR_OCCURRED() );

                                                        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
                                                        Py_DECREF( tmp_called_name_19 );

                                                        exception_lineno = 898;
                                                        type_description_1 = "oooooooooooo";
                                                        goto try_except_handler_10;
                                                    }
                                                    frame_edf236a14f5145c2001a5486f9240237->m_frame.f_lineno = 898;
                                                    {
                                                        PyObject *call_args[] = { tmp_args_element_name_49 };
                                                        tmp_call_result_22 = CALL_FUNCTION_WITH_ARGS1( tmp_called_name_19, call_args );
                                                    }

                                                    Py_DECREF( tmp_called_name_19 );
                                                    Py_DECREF( tmp_args_element_name_49 );
                                                    if ( tmp_call_result_22 == NULL )
                                                    {
                                                        assert( ERROR_OCCURRED() );

                                                        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                                                        exception_lineno = 898;
                                                        type_description_1 = "oooooooooooo";
                                                        goto try_except_handler_10;
                                                    }
                                                    Py_DECREF( tmp_call_result_22 );
                                                }
                                                if ( CONSIDER_THREADING() == false )
                                                {
                                                    assert( ERROR_OCCURRED() );

                                                    FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                                                    exception_lineno = 892;
                                                    type_description_1 = "oooooooooooo";
                                                    goto try_except_handler_10;
                                                }
                                                goto loop_start_2;
                                                loop_end_2:;
                                                goto try_end_8;
                                                // Exception handler code:
                                                try_except_handler_10:;
                                                exception_keeper_type_11 = exception_type;
                                                exception_keeper_value_11 = exception_value;
                                                exception_keeper_tb_11 = exception_tb;
                                                exception_keeper_lineno_11 = exception_lineno;
                                                exception_type = NULL;
                                                exception_value = NULL;
                                                exception_tb = NULL;
                                                exception_lineno = 0;

                                                Py_XDECREF( tmp_for_loop_1__iter_value );
                                                tmp_for_loop_1__iter_value = NULL;

                                                CHECK_OBJECT( (PyObject *)tmp_for_loop_1__for_iterator );
                                                Py_DECREF( tmp_for_loop_1__for_iterator );
                                                tmp_for_loop_1__for_iterator = NULL;

                                                // Re-raise.
                                                exception_type = exception_keeper_type_11;
                                                exception_value = exception_keeper_value_11;
                                                exception_tb = exception_keeper_tb_11;
                                                exception_lineno = exception_keeper_lineno_11;

                                                goto frame_exception_exit_1;
                                                // End of try:
                                                try_end_8:;
                                                Py_XDECREF( tmp_for_loop_1__iter_value );
                                                tmp_for_loop_1__iter_value = NULL;

                                                CHECK_OBJECT( (PyObject *)tmp_for_loop_1__for_iterator );
                                                Py_DECREF( tmp_for_loop_1__for_iterator );
                                                tmp_for_loop_1__for_iterator = NULL;

                                                {
                                                    PyObject *tmp_assign_source_25;
                                                    PyObject *tmp_len_arg_6;
                                                    CHECK_OBJECT( var_keyRefs );
                                                    tmp_len_arg_6 = var_keyRefs;
                                                    tmp_assign_source_25 = BUILTIN_LEN( tmp_len_arg_6 );
                                                    if ( tmp_assign_source_25 == NULL )
                                                    {
                                                        assert( ERROR_OCCURRED() );

                                                        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                                                        exception_lineno = 900;
                                                        type_description_1 = "oooooooooooo";
                                                        goto frame_exception_exit_1;
                                                    }
                                                    assert( var_s == NULL );
                                                    var_s = tmp_assign_source_25;
                                                }
                                                {
                                                    PyObject *tmp_called_instance_24;
                                                    PyObject *tmp_call_result_23;
                                                    PyObject *tmp_args_element_name_51;
                                                    PyObject *tmp_args_element_name_52;
                                                    CHECK_OBJECT( par_self );
                                                    tmp_called_instance_24 = par_self;
                                                    tmp_args_element_name_51 = const_int_pos_208;
                                                    CHECK_OBJECT( var_s );
                                                    tmp_args_element_name_52 = var_s;
                                                    frame_edf236a14f5145c2001a5486f9240237->m_frame.f_lineno = 901;
                                                    {
                                                        PyObject *call_args[] = { tmp_args_element_name_51, tmp_args_element_name_52 };
                                                        tmp_call_result_23 = CALL_METHOD_WITH_ARGS2( tmp_called_instance_24, const_str_plain__write_size, call_args );
                                                    }

                                                    if ( tmp_call_result_23 == NULL )
                                                    {
                                                        assert( ERROR_OCCURRED() );

                                                        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                                                        exception_lineno = 901;
                                                        type_description_1 = "oooooooooooo";
                                                        goto frame_exception_exit_1;
                                                    }
                                                    Py_DECREF( tmp_call_result_23 );
                                                }
                                                {
                                                    PyObject *tmp_called_name_20;
                                                    PyObject *tmp_source_name_44;
                                                    PyObject *tmp_source_name_45;
                                                    PyObject *tmp_call_result_24;
                                                    PyObject *tmp_args_element_name_53;
                                                    PyObject *tmp_dircall_arg1_2;
                                                    PyObject *tmp_source_name_46;
                                                    PyObject *tmp_mvar_value_13;
                                                    PyObject *tmp_dircall_arg2_2;
                                                    PyObject *tmp_tuple_element_2;
                                                    PyObject *tmp_left_name_6;
                                                    PyObject *tmp_right_name_6;
                                                    PyObject *tmp_left_name_7;
                                                    PyObject *tmp_source_name_47;
                                                    PyObject *tmp_right_name_7;
                                                    PyObject *tmp_dircall_arg3_2;
                                                    CHECK_OBJECT( par_self );
                                                    tmp_source_name_45 = par_self;
                                                    tmp_source_name_44 = LOOKUP_ATTRIBUTE( tmp_source_name_45, const_str_plain__fp );
                                                    if ( tmp_source_name_44 == NULL )
                                                    {
                                                        assert( ERROR_OCCURRED() );

                                                        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                                                        exception_lineno = 902;
                                                        type_description_1 = "oooooooooooo";
                                                        goto frame_exception_exit_1;
                                                    }
                                                    tmp_called_name_20 = LOOKUP_ATTRIBUTE( tmp_source_name_44, const_str_plain_write );
                                                    Py_DECREF( tmp_source_name_44 );
                                                    if ( tmp_called_name_20 == NULL )
                                                    {
                                                        assert( ERROR_OCCURRED() );

                                                        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                                                        exception_lineno = 902;
                                                        type_description_1 = "oooooooooooo";
                                                        goto frame_exception_exit_1;
                                                    }
                                                    tmp_mvar_value_13 = GET_STRING_DICT_VALUE( moduledict_plistlib, (Nuitka_StringObject *)const_str_plain_struct );

                                                    if (unlikely( tmp_mvar_value_13 == NULL ))
                                                    {
                                                        tmp_mvar_value_13 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_struct );
                                                    }

                                                    if ( tmp_mvar_value_13 == NULL )
                                                    {
                                                        Py_DECREF( tmp_called_name_20 );
                                                        exception_type = PyExc_NameError;
                                                        Py_INCREF( exception_type );
                                                        exception_value = PyUnicode_FromFormat( "name '%s' is not defined", "struct" );
                                                        exception_tb = NULL;
                                                        NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
                                                        CHAIN_EXCEPTION( exception_value );

                                                        exception_lineno = 902;
                                                        type_description_1 = "oooooooooooo";
                                                        goto frame_exception_exit_1;
                                                    }

                                                    tmp_source_name_46 = tmp_mvar_value_13;
                                                    tmp_dircall_arg1_2 = LOOKUP_ATTRIBUTE( tmp_source_name_46, const_str_plain_pack );
                                                    if ( tmp_dircall_arg1_2 == NULL )
                                                    {
                                                        assert( ERROR_OCCURRED() );

                                                        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
                                                        Py_DECREF( tmp_called_name_20 );

                                                        exception_lineno = 902;
                                                        type_description_1 = "oooooooooooo";
                                                        goto frame_exception_exit_1;
                                                    }
                                                    tmp_left_name_6 = const_str_chr_62;
                                                    CHECK_OBJECT( par_self );
                                                    tmp_source_name_47 = par_self;
                                                    tmp_left_name_7 = LOOKUP_ATTRIBUTE( tmp_source_name_47, const_str_plain__ref_format );
                                                    if ( tmp_left_name_7 == NULL )
                                                    {
                                                        assert( ERROR_OCCURRED() );

                                                        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
                                                        Py_DECREF( tmp_called_name_20 );
                                                        Py_DECREF( tmp_dircall_arg1_2 );

                                                        exception_lineno = 902;
                                                        type_description_1 = "oooooooooooo";
                                                        goto frame_exception_exit_1;
                                                    }
                                                    CHECK_OBJECT( var_s );
                                                    tmp_right_name_7 = var_s;
                                                    tmp_right_name_6 = BINARY_OPERATION_MUL( tmp_left_name_7, tmp_right_name_7 );
                                                    Py_DECREF( tmp_left_name_7 );
                                                    if ( tmp_right_name_6 == NULL )
                                                    {
                                                        assert( ERROR_OCCURRED() );

                                                        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
                                                        Py_DECREF( tmp_called_name_20 );
                                                        Py_DECREF( tmp_dircall_arg1_2 );

                                                        exception_lineno = 902;
                                                        type_description_1 = "oooooooooooo";
                                                        goto frame_exception_exit_1;
                                                    }
                                                    tmp_tuple_element_2 = BINARY_OPERATION_ADD_UNICODE_OBJECT( tmp_left_name_6, tmp_right_name_6 );
                                                    Py_DECREF( tmp_right_name_6 );
                                                    if ( tmp_tuple_element_2 == NULL )
                                                    {
                                                        assert( ERROR_OCCURRED() );

                                                        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
                                                        Py_DECREF( tmp_called_name_20 );
                                                        Py_DECREF( tmp_dircall_arg1_2 );

                                                        exception_lineno = 902;
                                                        type_description_1 = "oooooooooooo";
                                                        goto frame_exception_exit_1;
                                                    }
                                                    tmp_dircall_arg2_2 = PyTuple_New( 1 );
                                                    PyTuple_SET_ITEM( tmp_dircall_arg2_2, 0, tmp_tuple_element_2 );
                                                    CHECK_OBJECT( var_keyRefs );
                                                    tmp_dircall_arg3_2 = var_keyRefs;
                                                    Py_INCREF( tmp_dircall_arg3_2 );

                                                    {
                                                        PyObject *dir_call_args[] = {tmp_dircall_arg1_2, tmp_dircall_arg2_2, tmp_dircall_arg3_2};
                                                        tmp_args_element_name_53 = impl___internal__$$$function_4_complex_call_helper_pos_star_list( dir_call_args );
                                                    }
                                                    if ( tmp_args_element_name_53 == NULL )
                                                    {
                                                        assert( ERROR_OCCURRED() );

                                                        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
                                                        Py_DECREF( tmp_called_name_20 );

                                                        exception_lineno = 902;
                                                        type_description_1 = "oooooooooooo";
                                                        goto frame_exception_exit_1;
                                                    }
                                                    frame_edf236a14f5145c2001a5486f9240237->m_frame.f_lineno = 902;
                                                    {
                                                        PyObject *call_args[] = { tmp_args_element_name_53 };
                                                        tmp_call_result_24 = CALL_FUNCTION_WITH_ARGS1( tmp_called_name_20, call_args );
                                                    }

                                                    Py_DECREF( tmp_called_name_20 );
                                                    Py_DECREF( tmp_args_element_name_53 );
                                                    if ( tmp_call_result_24 == NULL )
                                                    {
                                                        assert( ERROR_OCCURRED() );

                                                        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                                                        exception_lineno = 902;
                                                        type_description_1 = "oooooooooooo";
                                                        goto frame_exception_exit_1;
                                                    }
                                                    Py_DECREF( tmp_call_result_24 );
                                                }
                                                {
                                                    PyObject *tmp_called_name_21;
                                                    PyObject *tmp_source_name_48;
                                                    PyObject *tmp_source_name_49;
                                                    PyObject *tmp_call_result_25;
                                                    PyObject *tmp_args_element_name_54;
                                                    PyObject *tmp_dircall_arg1_3;
                                                    PyObject *tmp_source_name_50;
                                                    PyObject *tmp_mvar_value_14;
                                                    PyObject *tmp_dircall_arg2_3;
                                                    PyObject *tmp_tuple_element_3;
                                                    PyObject *tmp_left_name_8;
                                                    PyObject *tmp_right_name_8;
                                                    PyObject *tmp_left_name_9;
                                                    PyObject *tmp_source_name_51;
                                                    PyObject *tmp_right_name_9;
                                                    PyObject *tmp_dircall_arg3_3;
                                                    CHECK_OBJECT( par_self );
                                                    tmp_source_name_49 = par_self;
                                                    tmp_source_name_48 = LOOKUP_ATTRIBUTE( tmp_source_name_49, const_str_plain__fp );
                                                    if ( tmp_source_name_48 == NULL )
                                                    {
                                                        assert( ERROR_OCCURRED() );

                                                        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                                                        exception_lineno = 903;
                                                        type_description_1 = "oooooooooooo";
                                                        goto frame_exception_exit_1;
                                                    }
                                                    tmp_called_name_21 = LOOKUP_ATTRIBUTE( tmp_source_name_48, const_str_plain_write );
                                                    Py_DECREF( tmp_source_name_48 );
                                                    if ( tmp_called_name_21 == NULL )
                                                    {
                                                        assert( ERROR_OCCURRED() );

                                                        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                                                        exception_lineno = 903;
                                                        type_description_1 = "oooooooooooo";
                                                        goto frame_exception_exit_1;
                                                    }
                                                    tmp_mvar_value_14 = GET_STRING_DICT_VALUE( moduledict_plistlib, (Nuitka_StringObject *)const_str_plain_struct );

                                                    if (unlikely( tmp_mvar_value_14 == NULL ))
                                                    {
                                                        tmp_mvar_value_14 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_struct );
                                                    }

                                                    if ( tmp_mvar_value_14 == NULL )
                                                    {
                                                        Py_DECREF( tmp_called_name_21 );
                                                        exception_type = PyExc_NameError;
                                                        Py_INCREF( exception_type );
                                                        exception_value = PyUnicode_FromFormat( "name '%s' is not defined", "struct" );
                                                        exception_tb = NULL;
                                                        NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
                                                        CHAIN_EXCEPTION( exception_value );

                                                        exception_lineno = 903;
                                                        type_description_1 = "oooooooooooo";
                                                        goto frame_exception_exit_1;
                                                    }

                                                    tmp_source_name_50 = tmp_mvar_value_14;
                                                    tmp_dircall_arg1_3 = LOOKUP_ATTRIBUTE( tmp_source_name_50, const_str_plain_pack );
                                                    if ( tmp_dircall_arg1_3 == NULL )
                                                    {
                                                        assert( ERROR_OCCURRED() );

                                                        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
                                                        Py_DECREF( tmp_called_name_21 );

                                                        exception_lineno = 903;
                                                        type_description_1 = "oooooooooooo";
                                                        goto frame_exception_exit_1;
                                                    }
                                                    tmp_left_name_8 = const_str_chr_62;
                                                    CHECK_OBJECT( par_self );
                                                    tmp_source_name_51 = par_self;
                                                    tmp_left_name_9 = LOOKUP_ATTRIBUTE( tmp_source_name_51, const_str_plain__ref_format );
                                                    if ( tmp_left_name_9 == NULL )
                                                    {
                                                        assert( ERROR_OCCURRED() );

                                                        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
                                                        Py_DECREF( tmp_called_name_21 );
                                                        Py_DECREF( tmp_dircall_arg1_3 );

                                                        exception_lineno = 903;
                                                        type_description_1 = "oooooooooooo";
                                                        goto frame_exception_exit_1;
                                                    }
                                                    CHECK_OBJECT( var_s );
                                                    tmp_right_name_9 = var_s;
                                                    tmp_right_name_8 = BINARY_OPERATION_MUL( tmp_left_name_9, tmp_right_name_9 );
                                                    Py_DECREF( tmp_left_name_9 );
                                                    if ( tmp_right_name_8 == NULL )
                                                    {
                                                        assert( ERROR_OCCURRED() );

                                                        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
                                                        Py_DECREF( tmp_called_name_21 );
                                                        Py_DECREF( tmp_dircall_arg1_3 );

                                                        exception_lineno = 903;
                                                        type_description_1 = "oooooooooooo";
                                                        goto frame_exception_exit_1;
                                                    }
                                                    tmp_tuple_element_3 = BINARY_OPERATION_ADD_UNICODE_OBJECT( tmp_left_name_8, tmp_right_name_8 );
                                                    Py_DECREF( tmp_right_name_8 );
                                                    if ( tmp_tuple_element_3 == NULL )
                                                    {
                                                        assert( ERROR_OCCURRED() );

                                                        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
                                                        Py_DECREF( tmp_called_name_21 );
                                                        Py_DECREF( tmp_dircall_arg1_3 );

                                                        exception_lineno = 903;
                                                        type_description_1 = "oooooooooooo";
                                                        goto frame_exception_exit_1;
                                                    }
                                                    tmp_dircall_arg2_3 = PyTuple_New( 1 );
                                                    PyTuple_SET_ITEM( tmp_dircall_arg2_3, 0, tmp_tuple_element_3 );
                                                    CHECK_OBJECT( var_valRefs );
                                                    tmp_dircall_arg3_3 = var_valRefs;
                                                    Py_INCREF( tmp_dircall_arg3_3 );

                                                    {
                                                        PyObject *dir_call_args[] = {tmp_dircall_arg1_3, tmp_dircall_arg2_3, tmp_dircall_arg3_3};
                                                        tmp_args_element_name_54 = impl___internal__$$$function_4_complex_call_helper_pos_star_list( dir_call_args );
                                                    }
                                                    if ( tmp_args_element_name_54 == NULL )
                                                    {
                                                        assert( ERROR_OCCURRED() );

                                                        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
                                                        Py_DECREF( tmp_called_name_21 );

                                                        exception_lineno = 903;
                                                        type_description_1 = "oooooooooooo";
                                                        goto frame_exception_exit_1;
                                                    }
                                                    frame_edf236a14f5145c2001a5486f9240237->m_frame.f_lineno = 903;
                                                    {
                                                        PyObject *call_args[] = { tmp_args_element_name_54 };
                                                        tmp_call_result_25 = CALL_FUNCTION_WITH_ARGS1( tmp_called_name_21, call_args );
                                                    }

                                                    Py_DECREF( tmp_called_name_21 );
                                                    Py_DECREF( tmp_args_element_name_54 );
                                                    if ( tmp_call_result_25 == NULL )
                                                    {
                                                        assert( ERROR_OCCURRED() );

                                                        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                                                        exception_lineno = 903;
                                                        type_description_1 = "oooooooooooo";
                                                        goto frame_exception_exit_1;
                                                    }
                                                    Py_DECREF( tmp_call_result_25 );
                                                }
                                                goto branch_end_19;
                                                branch_no_19:;
                                                {
                                                    PyObject *tmp_raise_type_4;
                                                    PyObject *tmp_make_exception_arg_4;
                                                    CHECK_OBJECT( par_value );
                                                    tmp_make_exception_arg_4 = par_value;
                                                    frame_edf236a14f5145c2001a5486f9240237->m_frame.f_lineno = 906;
                                                    {
                                                        PyObject *call_args[] = { tmp_make_exception_arg_4 };
                                                        tmp_raise_type_4 = CALL_FUNCTION_WITH_ARGS1( PyExc_TypeError, call_args );
                                                    }

                                                    assert( !(tmp_raise_type_4 == NULL) );
                                                    exception_type = tmp_raise_type_4;
                                                    exception_lineno = 906;
                                                    RAISE_EXCEPTION_WITH_TYPE( &exception_type, &exception_value, &exception_tb );
                                                    type_description_1 = "oooooooooooo";
                                                    goto frame_exception_exit_1;
                                                }
                                                branch_end_19:;
                                            }
                                            branch_end_18:;
                                        }
                                        branch_end_16:;
                                    }
                                    branch_end_15:;
                                }
                                branch_end_14:;
                            }
                            branch_end_13:;
                        }
                        branch_end_12:;
                    }
                    branch_end_4:;
                }
                branch_end_3:;
            }
            branch_end_2:;
        }
        branch_end_1:;
    }

#if 0
    RESTORE_FRAME_EXCEPTION( frame_edf236a14f5145c2001a5486f9240237 );
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto frame_no_exception_2;

    frame_exception_exit_1:;

#if 0
    RESTORE_FRAME_EXCEPTION( frame_edf236a14f5145c2001a5486f9240237 );
#endif

    if ( exception_tb == NULL )
    {
        exception_tb = MAKE_TRACEBACK( frame_edf236a14f5145c2001a5486f9240237, exception_lineno );
    }
    else if ( exception_tb->tb_frame != &frame_edf236a14f5145c2001a5486f9240237->m_frame )
    {
        exception_tb = ADD_TRACEBACK( exception_tb, frame_edf236a14f5145c2001a5486f9240237, exception_lineno );
    }

    // Attachs locals to frame if any.
    Nuitka_Frame_AttachLocals(
        (struct Nuitka_FrameObject *)frame_edf236a14f5145c2001a5486f9240237,
        type_description_1,
        par_self,
        par_value,
        var_ref,
        var_f,
        var_t,
        var_refs,
        var_s,
        var_keyRefs,
        var_valRefs,
        var_rootItems,
        var_k,
        var_v
    );


    // Release cached frame.
    if ( frame_edf236a14f5145c2001a5486f9240237 == cache_frame_edf236a14f5145c2001a5486f9240237 )
    {
        Py_DECREF( frame_edf236a14f5145c2001a5486f9240237 );
    }
    cache_frame_edf236a14f5145c2001a5486f9240237 = NULL;

    assertFrameObject( frame_edf236a14f5145c2001a5486f9240237 );

    // Put the previous frame back on top.
    popFrameStack();

    // Return the error.
    goto try_except_handler_1;

    frame_no_exception_2:;
    tmp_return_value = Py_None;
    Py_INCREF( tmp_return_value );
    goto try_return_handler_1;
    // tried codes exits in all cases
    NUITKA_CANNOT_GET_HERE( plistlib$$$function_61__write_object );
    return NULL;
    // Return handler code:
    try_return_handler_1:;
    CHECK_OBJECT( (PyObject *)par_self );
    Py_DECREF( par_self );
    par_self = NULL;

    CHECK_OBJECT( (PyObject *)par_value );
    Py_DECREF( par_value );
    par_value = NULL;

    CHECK_OBJECT( (PyObject *)var_ref );
    Py_DECREF( var_ref );
    var_ref = NULL;

    Py_XDECREF( var_f );
    var_f = NULL;

    Py_XDECREF( var_t );
    var_t = NULL;

    Py_XDECREF( var_refs );
    var_refs = NULL;

    Py_XDECREF( var_s );
    var_s = NULL;

    Py_XDECREF( var_keyRefs );
    var_keyRefs = NULL;

    Py_XDECREF( var_valRefs );
    var_valRefs = NULL;

    Py_XDECREF( var_rootItems );
    var_rootItems = NULL;

    Py_XDECREF( var_k );
    var_k = NULL;

    Py_XDECREF( var_v );
    var_v = NULL;

    goto function_return_exit;
    // Exception handler code:
    try_except_handler_1:;
    exception_keeper_type_12 = exception_type;
    exception_keeper_value_12 = exception_value;
    exception_keeper_tb_12 = exception_tb;
    exception_keeper_lineno_12 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    CHECK_OBJECT( (PyObject *)par_self );
    Py_DECREF( par_self );
    par_self = NULL;

    CHECK_OBJECT( (PyObject *)par_value );
    Py_DECREF( par_value );
    par_value = NULL;

    Py_XDECREF( var_ref );
    var_ref = NULL;

    Py_XDECREF( var_f );
    var_f = NULL;

    Py_XDECREF( var_t );
    var_t = NULL;

    Py_XDECREF( var_refs );
    var_refs = NULL;

    Py_XDECREF( var_s );
    var_s = NULL;

    Py_XDECREF( var_keyRefs );
    var_keyRefs = NULL;

    Py_XDECREF( var_valRefs );
    var_valRefs = NULL;

    Py_XDECREF( var_rootItems );
    var_rootItems = NULL;

    Py_XDECREF( var_k );
    var_k = NULL;

    Py_XDECREF( var_v );
    var_v = NULL;

    // Re-raise.
    exception_type = exception_keeper_type_12;
    exception_value = exception_keeper_value_12;
    exception_tb = exception_keeper_tb_12;
    exception_lineno = exception_keeper_lineno_12;

    goto function_exception_exit;
    // End of try:

    // Return statement must have exited already.
    NUITKA_CANNOT_GET_HERE( plistlib$$$function_61__write_object );
    return NULL;

function_exception_exit:
    assert( exception_type );
    RESTORE_ERROR_OCCURRED( exception_type, exception_value, exception_tb );

    return NULL;

function_return_exit:
   // Function cleanup code if any.


   // Actual function exit with return value, making sure we did not make
   // the error status worse despite non-NULL return.
   CHECK_OBJECT( tmp_return_value );
   assert( had_error || !ERROR_OCCURRED() );
   return tmp_return_value;
}


static PyObject *impl_plistlib$$$function_62__is_fmt_binary( struct Nuitka_FunctionObject const *self, PyObject **python_pars )
{
    // Preserve error status for checks
#ifndef __NUITKA_NO_ASSERT__
    NUITKA_MAY_BE_UNUSED bool had_error = ERROR_OCCURRED();
#endif

    // Local variable declarations.
    PyObject *par_header = python_pars[ 0 ];
    struct Nuitka_FrameObject *frame_c4ab7b1151dc1dc8ba211fdaa8810c05;
    NUITKA_MAY_BE_UNUSED char const *type_description_1 = NULL;
    PyObject *tmp_return_value = NULL;
    PyObject *exception_type = NULL;
    PyObject *exception_value = NULL;
    PyTracebackObject *exception_tb = NULL;
    NUITKA_MAY_BE_UNUSED int exception_lineno = 0;
    static struct Nuitka_FrameObject *cache_frame_c4ab7b1151dc1dc8ba211fdaa8810c05 = NULL;
    PyObject *exception_keeper_type_1;
    PyObject *exception_keeper_value_1;
    PyTracebackObject *exception_keeper_tb_1;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_1;

    // Actual function body.
    // Tried code:
    MAKE_OR_REUSE_FRAME( cache_frame_c4ab7b1151dc1dc8ba211fdaa8810c05, codeobj_c4ab7b1151dc1dc8ba211fdaa8810c05, module_plistlib, sizeof(void *) );
    frame_c4ab7b1151dc1dc8ba211fdaa8810c05 = cache_frame_c4ab7b1151dc1dc8ba211fdaa8810c05;

    // Push the new frame as the currently active one.
    pushFrameStack( frame_c4ab7b1151dc1dc8ba211fdaa8810c05 );

    // Mark the frame object as in use, ref count 1 will be up for reuse.
    assert( Py_REFCNT( frame_c4ab7b1151dc1dc8ba211fdaa8810c05 ) == 2 ); // Frame stack

    // Framed code:
    {
        PyObject *tmp_compexpr_left_1;
        PyObject *tmp_compexpr_right_1;
        PyObject *tmp_subscribed_name_1;
        PyObject *tmp_subscript_name_1;
        CHECK_OBJECT( par_header );
        tmp_subscribed_name_1 = par_header;
        tmp_subscript_name_1 = const_slice_none_int_pos_8_none;
        tmp_compexpr_left_1 = LOOKUP_SUBSCRIPT( tmp_subscribed_name_1, tmp_subscript_name_1 );
        if ( tmp_compexpr_left_1 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 910;
            type_description_1 = "o";
            goto frame_exception_exit_1;
        }
        tmp_compexpr_right_1 = const_bytes_digest_f56f4391a49dc6cc1c15f8ec95e9a37e;
        tmp_return_value = RICH_COMPARE_EQ_OBJECT_OBJECT( tmp_compexpr_left_1, tmp_compexpr_right_1 );
        Py_DECREF( tmp_compexpr_left_1 );
        if ( tmp_return_value == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 910;
            type_description_1 = "o";
            goto frame_exception_exit_1;
        }
        goto frame_return_exit_1;
    }

#if 0
    RESTORE_FRAME_EXCEPTION( frame_c4ab7b1151dc1dc8ba211fdaa8810c05 );
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto frame_no_exception_1;

    frame_return_exit_1:;
#if 0
    RESTORE_FRAME_EXCEPTION( frame_c4ab7b1151dc1dc8ba211fdaa8810c05 );
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto try_return_handler_1;

    frame_exception_exit_1:;

#if 0
    RESTORE_FRAME_EXCEPTION( frame_c4ab7b1151dc1dc8ba211fdaa8810c05 );
#endif

    if ( exception_tb == NULL )
    {
        exception_tb = MAKE_TRACEBACK( frame_c4ab7b1151dc1dc8ba211fdaa8810c05, exception_lineno );
    }
    else if ( exception_tb->tb_frame != &frame_c4ab7b1151dc1dc8ba211fdaa8810c05->m_frame )
    {
        exception_tb = ADD_TRACEBACK( exception_tb, frame_c4ab7b1151dc1dc8ba211fdaa8810c05, exception_lineno );
    }

    // Attachs locals to frame if any.
    Nuitka_Frame_AttachLocals(
        (struct Nuitka_FrameObject *)frame_c4ab7b1151dc1dc8ba211fdaa8810c05,
        type_description_1,
        par_header
    );


    // Release cached frame.
    if ( frame_c4ab7b1151dc1dc8ba211fdaa8810c05 == cache_frame_c4ab7b1151dc1dc8ba211fdaa8810c05 )
    {
        Py_DECREF( frame_c4ab7b1151dc1dc8ba211fdaa8810c05 );
    }
    cache_frame_c4ab7b1151dc1dc8ba211fdaa8810c05 = NULL;

    assertFrameObject( frame_c4ab7b1151dc1dc8ba211fdaa8810c05 );

    // Put the previous frame back on top.
    popFrameStack();

    // Return the error.
    goto try_except_handler_1;

    frame_no_exception_1:;
    // tried codes exits in all cases
    NUITKA_CANNOT_GET_HERE( plistlib$$$function_62__is_fmt_binary );
    return NULL;
    // Return handler code:
    try_return_handler_1:;
    CHECK_OBJECT( (PyObject *)par_header );
    Py_DECREF( par_header );
    par_header = NULL;

    goto function_return_exit;
    // Exception handler code:
    try_except_handler_1:;
    exception_keeper_type_1 = exception_type;
    exception_keeper_value_1 = exception_value;
    exception_keeper_tb_1 = exception_tb;
    exception_keeper_lineno_1 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    CHECK_OBJECT( (PyObject *)par_header );
    Py_DECREF( par_header );
    par_header = NULL;

    // Re-raise.
    exception_type = exception_keeper_type_1;
    exception_value = exception_keeper_value_1;
    exception_tb = exception_keeper_tb_1;
    exception_lineno = exception_keeper_lineno_1;

    goto function_exception_exit;
    // End of try:

    // Return statement must have exited already.
    NUITKA_CANNOT_GET_HERE( plistlib$$$function_62__is_fmt_binary );
    return NULL;

function_exception_exit:
    assert( exception_type );
    RESTORE_ERROR_OCCURRED( exception_type, exception_value, exception_tb );

    return NULL;

function_return_exit:
   // Function cleanup code if any.


   // Actual function exit with return value, making sure we did not make
   // the error status worse despite non-NULL return.
   CHECK_OBJECT( tmp_return_value );
   assert( had_error || !ERROR_OCCURRED() );
   return tmp_return_value;
}


static PyObject *impl_plistlib$$$function_63_load( struct Nuitka_FunctionObject const *self, PyObject **python_pars )
{
    // Preserve error status for checks
#ifndef __NUITKA_NO_ASSERT__
    NUITKA_MAY_BE_UNUSED bool had_error = ERROR_OCCURRED();
#endif

    // Local variable declarations.
    PyObject *par_fp = python_pars[ 0 ];
    PyObject *par_fmt = python_pars[ 1 ];
    PyObject *par_use_builtin_types = python_pars[ 2 ];
    PyObject *par_dict_type = python_pars[ 3 ];
    PyObject *var_header = NULL;
    PyObject *var_info = NULL;
    PyObject *var_P = NULL;
    PyObject *var_p = NULL;
    nuitka_bool tmp_for_loop_1__break_indicator = NUITKA_BOOL_UNASSIGNED;
    PyObject *tmp_for_loop_1__for_iterator = NULL;
    PyObject *tmp_for_loop_1__iter_value = NULL;
    struct Nuitka_FrameObject *frame_5bd748325e1b93cb6ac76b1377ec42c1;
    NUITKA_MAY_BE_UNUSED char const *type_description_1 = NULL;
    PyObject *exception_type = NULL;
    PyObject *exception_value = NULL;
    PyTracebackObject *exception_tb = NULL;
    NUITKA_MAY_BE_UNUSED int exception_lineno = 0;
    PyObject *exception_keeper_type_1;
    PyObject *exception_keeper_value_1;
    PyTracebackObject *exception_keeper_tb_1;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_1;
    int tmp_res;
    PyObject *exception_keeper_type_2;
    PyObject *exception_keeper_value_2;
    PyTracebackObject *exception_keeper_tb_2;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_2;
    PyObject *exception_keeper_type_3;
    PyObject *exception_keeper_value_3;
    PyTracebackObject *exception_keeper_tb_3;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_3;
    PyObject *tmp_return_value = NULL;
    static struct Nuitka_FrameObject *cache_frame_5bd748325e1b93cb6ac76b1377ec42c1 = NULL;
    PyObject *exception_keeper_type_4;
    PyObject *exception_keeper_value_4;
    PyTracebackObject *exception_keeper_tb_4;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_4;

    // Actual function body.
    // Tried code:
    MAKE_OR_REUSE_FRAME( cache_frame_5bd748325e1b93cb6ac76b1377ec42c1, codeobj_5bd748325e1b93cb6ac76b1377ec42c1, module_plistlib, sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *) );
    frame_5bd748325e1b93cb6ac76b1377ec42c1 = cache_frame_5bd748325e1b93cb6ac76b1377ec42c1;

    // Push the new frame as the currently active one.
    pushFrameStack( frame_5bd748325e1b93cb6ac76b1377ec42c1 );

    // Mark the frame object as in use, ref count 1 will be up for reuse.
    assert( Py_REFCNT( frame_5bd748325e1b93cb6ac76b1377ec42c1 ) == 2 ); // Frame stack

    // Framed code:
    {
        nuitka_bool tmp_condition_result_1;
        PyObject *tmp_compexpr_left_1;
        PyObject *tmp_compexpr_right_1;
        CHECK_OBJECT( par_fmt );
        tmp_compexpr_left_1 = par_fmt;
        tmp_compexpr_right_1 = Py_None;
        tmp_condition_result_1 = ( tmp_compexpr_left_1 == tmp_compexpr_right_1 ) ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
        if ( tmp_condition_result_1 == NUITKA_BOOL_TRUE )
        {
            goto branch_yes_1;
        }
        else
        {
            goto branch_no_1;
        }
        branch_yes_1:;
        {
            PyObject *tmp_assign_source_1;
            PyObject *tmp_called_instance_1;
            CHECK_OBJECT( par_fp );
            tmp_called_instance_1 = par_fp;
            frame_5bd748325e1b93cb6ac76b1377ec42c1->m_frame.f_lineno = 936;
            tmp_assign_source_1 = CALL_METHOD_WITH_ARGS1( tmp_called_instance_1, const_str_plain_read, &PyTuple_GET_ITEM( const_tuple_int_pos_32_tuple, 0 ) );

            if ( tmp_assign_source_1 == NULL )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 936;
                type_description_1 = "oooooooo";
                goto frame_exception_exit_1;
            }
            assert( var_header == NULL );
            var_header = tmp_assign_source_1;
        }
        {
            PyObject *tmp_called_instance_2;
            PyObject *tmp_call_result_1;
            CHECK_OBJECT( par_fp );
            tmp_called_instance_2 = par_fp;
            frame_5bd748325e1b93cb6ac76b1377ec42c1->m_frame.f_lineno = 937;
            tmp_call_result_1 = CALL_METHOD_WITH_ARGS1( tmp_called_instance_2, const_str_plain_seek, &PyTuple_GET_ITEM( const_tuple_int_0_tuple, 0 ) );

            if ( tmp_call_result_1 == NULL )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 937;
                type_description_1 = "oooooooo";
                goto frame_exception_exit_1;
            }
            Py_DECREF( tmp_call_result_1 );
        }
        {
            nuitka_bool tmp_assign_source_2;
            tmp_assign_source_2 = NUITKA_BOOL_FALSE;
            tmp_for_loop_1__break_indicator = tmp_assign_source_2;
        }
        // Tried code:
        {
            PyObject *tmp_assign_source_3;
            PyObject *tmp_iter_arg_1;
            PyObject *tmp_called_instance_3;
            PyObject *tmp_mvar_value_1;
            tmp_mvar_value_1 = GET_STRING_DICT_VALUE( moduledict_plistlib, (Nuitka_StringObject *)const_str_plain__FORMATS );

            if (unlikely( tmp_mvar_value_1 == NULL ))
            {
                tmp_mvar_value_1 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain__FORMATS );
            }

            if ( tmp_mvar_value_1 == NULL )
            {

                exception_type = PyExc_NameError;
                Py_INCREF( exception_type );
                exception_value = PyUnicode_FromFormat( "name '%s' is not defined", "_FORMATS" );
                exception_tb = NULL;
                NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
                CHAIN_EXCEPTION( exception_value );

                exception_lineno = 938;
                type_description_1 = "oooooooo";
                goto try_except_handler_2;
            }

            tmp_called_instance_3 = tmp_mvar_value_1;
            frame_5bd748325e1b93cb6ac76b1377ec42c1->m_frame.f_lineno = 938;
            tmp_iter_arg_1 = CALL_METHOD_NO_ARGS( tmp_called_instance_3, const_str_plain_values );
            if ( tmp_iter_arg_1 == NULL )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 938;
                type_description_1 = "oooooooo";
                goto try_except_handler_2;
            }
            tmp_assign_source_3 = MAKE_ITERATOR( tmp_iter_arg_1 );
            Py_DECREF( tmp_iter_arg_1 );
            if ( tmp_assign_source_3 == NULL )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 938;
                type_description_1 = "oooooooo";
                goto try_except_handler_2;
            }
            assert( tmp_for_loop_1__for_iterator == NULL );
            tmp_for_loop_1__for_iterator = tmp_assign_source_3;
        }
        // Tried code:
        loop_start_1:;
        // Tried code:
        {
            PyObject *tmp_assign_source_4;
            PyObject *tmp_value_name_1;
            CHECK_OBJECT( tmp_for_loop_1__for_iterator );
            tmp_value_name_1 = tmp_for_loop_1__for_iterator;
            tmp_assign_source_4 = ITERATOR_NEXT( tmp_value_name_1 );
            if ( tmp_assign_source_4 == NULL )
            {
                if ( !ERROR_OCCURRED() )
                {
                    exception_type = PyExc_StopIteration;
                    Py_INCREF( exception_type );
                    exception_value = NULL;
                    exception_tb = NULL;
                }
                else
                {
                    FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
                }


                type_description_1 = "oooooooo";
                exception_lineno = 938;
                goto try_except_handler_4;
            }
            {
                PyObject *old = tmp_for_loop_1__iter_value;
                tmp_for_loop_1__iter_value = tmp_assign_source_4;
                Py_XDECREF( old );
            }

        }
        goto try_end_1;
        // Exception handler code:
        try_except_handler_4:;
        exception_keeper_type_1 = exception_type;
        exception_keeper_value_1 = exception_value;
        exception_keeper_tb_1 = exception_tb;
        exception_keeper_lineno_1 = exception_lineno;
        exception_type = NULL;
        exception_value = NULL;
        exception_tb = NULL;
        exception_lineno = 0;

        {
            nuitka_bool tmp_condition_result_2;
            PyObject *tmp_compexpr_left_2;
            PyObject *tmp_compexpr_right_2;
            tmp_compexpr_left_2 = exception_keeper_type_1;
            tmp_compexpr_right_2 = PyExc_StopIteration;
            tmp_res = EXCEPTION_MATCH_BOOL( tmp_compexpr_left_2, tmp_compexpr_right_2 );
            if ( tmp_res == -1 )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );

                Py_DECREF( exception_keeper_type_1 );
                Py_XDECREF( exception_keeper_value_1 );
                Py_XDECREF( exception_keeper_tb_1 );

                exception_lineno = 938;
                type_description_1 = "oooooooo";
                goto try_except_handler_3;
            }
            tmp_condition_result_2 = ( tmp_res != 0 ) ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
            if ( tmp_condition_result_2 == NUITKA_BOOL_TRUE )
            {
                goto branch_yes_2;
            }
            else
            {
                goto branch_no_2;
            }
            branch_yes_2:;
            {
                nuitka_bool tmp_assign_source_5;
                tmp_assign_source_5 = NUITKA_BOOL_TRUE;
                tmp_for_loop_1__break_indicator = tmp_assign_source_5;
            }
            Py_DECREF( exception_keeper_type_1 );
            Py_XDECREF( exception_keeper_value_1 );
            Py_XDECREF( exception_keeper_tb_1 );
            goto loop_end_1;
            goto branch_end_2;
            branch_no_2:;
            // Re-raise.
            exception_type = exception_keeper_type_1;
            exception_value = exception_keeper_value_1;
            exception_tb = exception_keeper_tb_1;
            exception_lineno = exception_keeper_lineno_1;

            goto try_except_handler_3;
            branch_end_2:;
        }
        // End of try:
        try_end_1:;
        {
            PyObject *tmp_assign_source_6;
            CHECK_OBJECT( tmp_for_loop_1__iter_value );
            tmp_assign_source_6 = tmp_for_loop_1__iter_value;
            {
                PyObject *old = var_info;
                var_info = tmp_assign_source_6;
                Py_INCREF( var_info );
                Py_XDECREF( old );
            }

        }
        {
            nuitka_bool tmp_condition_result_3;
            PyObject *tmp_called_name_1;
            PyObject *tmp_subscribed_name_1;
            PyObject *tmp_subscript_name_1;
            PyObject *tmp_call_result_2;
            PyObject *tmp_args_element_name_1;
            int tmp_truth_name_1;
            CHECK_OBJECT( var_info );
            tmp_subscribed_name_1 = var_info;
            tmp_subscript_name_1 = const_str_plain_detect;
            tmp_called_name_1 = LOOKUP_SUBSCRIPT( tmp_subscribed_name_1, tmp_subscript_name_1 );
            if ( tmp_called_name_1 == NULL )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 939;
                type_description_1 = "oooooooo";
                goto try_except_handler_3;
            }
            CHECK_OBJECT( var_header );
            tmp_args_element_name_1 = var_header;
            frame_5bd748325e1b93cb6ac76b1377ec42c1->m_frame.f_lineno = 939;
            {
                PyObject *call_args[] = { tmp_args_element_name_1 };
                tmp_call_result_2 = CALL_FUNCTION_WITH_ARGS1( tmp_called_name_1, call_args );
            }

            Py_DECREF( tmp_called_name_1 );
            if ( tmp_call_result_2 == NULL )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 939;
                type_description_1 = "oooooooo";
                goto try_except_handler_3;
            }
            tmp_truth_name_1 = CHECK_IF_TRUE( tmp_call_result_2 );
            if ( tmp_truth_name_1 == -1 )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
                Py_DECREF( tmp_call_result_2 );

                exception_lineno = 939;
                type_description_1 = "oooooooo";
                goto try_except_handler_3;
            }
            tmp_condition_result_3 = tmp_truth_name_1 == 1 ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
            Py_DECREF( tmp_call_result_2 );
            if ( tmp_condition_result_3 == NUITKA_BOOL_TRUE )
            {
                goto branch_yes_3;
            }
            else
            {
                goto branch_no_3;
            }
            branch_yes_3:;
            {
                PyObject *tmp_assign_source_7;
                PyObject *tmp_subscribed_name_2;
                PyObject *tmp_subscript_name_2;
                CHECK_OBJECT( var_info );
                tmp_subscribed_name_2 = var_info;
                tmp_subscript_name_2 = const_str_plain_parser;
                tmp_assign_source_7 = LOOKUP_SUBSCRIPT( tmp_subscribed_name_2, tmp_subscript_name_2 );
                if ( tmp_assign_source_7 == NULL )
                {
                    assert( ERROR_OCCURRED() );

                    FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                    exception_lineno = 940;
                    type_description_1 = "oooooooo";
                    goto try_except_handler_3;
                }
                {
                    PyObject *old = var_P;
                    var_P = tmp_assign_source_7;
                    Py_XDECREF( old );
                }

            }
            goto loop_end_1;
            branch_no_3:;
        }
        if ( CONSIDER_THREADING() == false )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 938;
            type_description_1 = "oooooooo";
            goto try_except_handler_3;
        }
        goto loop_start_1;
        loop_end_1:;
        goto try_end_2;
        // Exception handler code:
        try_except_handler_3:;
        exception_keeper_type_2 = exception_type;
        exception_keeper_value_2 = exception_value;
        exception_keeper_tb_2 = exception_tb;
        exception_keeper_lineno_2 = exception_lineno;
        exception_type = NULL;
        exception_value = NULL;
        exception_tb = NULL;
        exception_lineno = 0;

        Py_XDECREF( tmp_for_loop_1__iter_value );
        tmp_for_loop_1__iter_value = NULL;

        CHECK_OBJECT( (PyObject *)tmp_for_loop_1__for_iterator );
        Py_DECREF( tmp_for_loop_1__for_iterator );
        tmp_for_loop_1__for_iterator = NULL;

        // Re-raise.
        exception_type = exception_keeper_type_2;
        exception_value = exception_keeper_value_2;
        exception_tb = exception_keeper_tb_2;
        exception_lineno = exception_keeper_lineno_2;

        goto try_except_handler_2;
        // End of try:
        try_end_2:;
        Py_XDECREF( tmp_for_loop_1__iter_value );
        tmp_for_loop_1__iter_value = NULL;

        CHECK_OBJECT( (PyObject *)tmp_for_loop_1__for_iterator );
        Py_DECREF( tmp_for_loop_1__for_iterator );
        tmp_for_loop_1__for_iterator = NULL;

        {
            nuitka_bool tmp_condition_result_4;
            nuitka_bool tmp_compexpr_left_3;
            nuitka_bool tmp_compexpr_right_3;
            assert( tmp_for_loop_1__break_indicator != NUITKA_BOOL_UNASSIGNED);
            tmp_compexpr_left_3 = tmp_for_loop_1__break_indicator;
            tmp_compexpr_right_3 = NUITKA_BOOL_TRUE;
            tmp_condition_result_4 = ( tmp_compexpr_left_3 == tmp_compexpr_right_3 ) ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
            if ( tmp_condition_result_4 == NUITKA_BOOL_TRUE )
            {
                goto branch_yes_4;
            }
            else
            {
                goto branch_no_4;
            }
            branch_yes_4:;
            {
                PyObject *tmp_raise_type_1;
                PyObject *tmp_called_name_2;
                PyObject *tmp_mvar_value_2;
                tmp_mvar_value_2 = GET_STRING_DICT_VALUE( moduledict_plistlib, (Nuitka_StringObject *)const_str_plain_InvalidFileException );

                if (unlikely( tmp_mvar_value_2 == NULL ))
                {
                    tmp_mvar_value_2 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_InvalidFileException );
                }

                if ( tmp_mvar_value_2 == NULL )
                {

                    exception_type = PyExc_NameError;
                    Py_INCREF( exception_type );
                    exception_value = PyUnicode_FromFormat( "name '%s' is not defined", "InvalidFileException" );
                    exception_tb = NULL;
                    NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
                    CHAIN_EXCEPTION( exception_value );

                    exception_lineno = 944;
                    type_description_1 = "oooooooo";
                    goto try_except_handler_2;
                }

                tmp_called_name_2 = tmp_mvar_value_2;
                frame_5bd748325e1b93cb6ac76b1377ec42c1->m_frame.f_lineno = 944;
                tmp_raise_type_1 = CALL_FUNCTION_NO_ARGS( tmp_called_name_2 );
                if ( tmp_raise_type_1 == NULL )
                {
                    assert( ERROR_OCCURRED() );

                    FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                    exception_lineno = 944;
                    type_description_1 = "oooooooo";
                    goto try_except_handler_2;
                }
                exception_type = tmp_raise_type_1;
                exception_lineno = 944;
                RAISE_EXCEPTION_WITH_TYPE( &exception_type, &exception_value, &exception_tb );
                type_description_1 = "oooooooo";
                goto try_except_handler_2;
            }
            branch_no_4:;
        }
        goto try_end_3;
        // Exception handler code:
        try_except_handler_2:;
        exception_keeper_type_3 = exception_type;
        exception_keeper_value_3 = exception_value;
        exception_keeper_tb_3 = exception_tb;
        exception_keeper_lineno_3 = exception_lineno;
        exception_type = NULL;
        exception_value = NULL;
        exception_tb = NULL;
        exception_lineno = 0;

        // Re-raise.
        exception_type = exception_keeper_type_3;
        exception_value = exception_keeper_value_3;
        exception_tb = exception_keeper_tb_3;
        exception_lineno = exception_keeper_lineno_3;

        goto frame_exception_exit_1;
        // End of try:
        try_end_3:;
        goto branch_end_1;
        branch_no_1:;
        {
            PyObject *tmp_assign_source_8;
            PyObject *tmp_subscribed_name_3;
            PyObject *tmp_subscribed_name_4;
            PyObject *tmp_mvar_value_3;
            PyObject *tmp_subscript_name_3;
            PyObject *tmp_subscript_name_4;
            tmp_mvar_value_3 = GET_STRING_DICT_VALUE( moduledict_plistlib, (Nuitka_StringObject *)const_str_plain__FORMATS );

            if (unlikely( tmp_mvar_value_3 == NULL ))
            {
                tmp_mvar_value_3 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain__FORMATS );
            }

            if ( tmp_mvar_value_3 == NULL )
            {

                exception_type = PyExc_NameError;
                Py_INCREF( exception_type );
                exception_value = PyUnicode_FromFormat( "name '%s' is not defined", "_FORMATS" );
                exception_tb = NULL;
                NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
                CHAIN_EXCEPTION( exception_value );

                exception_lineno = 947;
                type_description_1 = "oooooooo";
                goto frame_exception_exit_1;
            }

            tmp_subscribed_name_4 = tmp_mvar_value_3;
            CHECK_OBJECT( par_fmt );
            tmp_subscript_name_3 = par_fmt;
            tmp_subscribed_name_3 = LOOKUP_SUBSCRIPT( tmp_subscribed_name_4, tmp_subscript_name_3 );
            if ( tmp_subscribed_name_3 == NULL )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 947;
                type_description_1 = "oooooooo";
                goto frame_exception_exit_1;
            }
            tmp_subscript_name_4 = const_str_plain_parser;
            tmp_assign_source_8 = LOOKUP_SUBSCRIPT( tmp_subscribed_name_3, tmp_subscript_name_4 );
            Py_DECREF( tmp_subscribed_name_3 );
            if ( tmp_assign_source_8 == NULL )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 947;
                type_description_1 = "oooooooo";
                goto frame_exception_exit_1;
            }
            assert( var_P == NULL );
            var_P = tmp_assign_source_8;
        }
        branch_end_1:;
    }
    {
        PyObject *tmp_assign_source_9;
        PyObject *tmp_called_name_3;
        PyObject *tmp_kw_name_1;
        PyObject *tmp_dict_key_1;
        PyObject *tmp_dict_value_1;
        PyObject *tmp_dict_key_2;
        PyObject *tmp_dict_value_2;
        if ( var_P == NULL )
        {

            exception_type = PyExc_UnboundLocalError;
            Py_INCREF( exception_type );
            exception_value = PyUnicode_FromFormat( "local variable '%s' referenced before assignment", "P" );
            exception_tb = NULL;
            NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
            CHAIN_EXCEPTION( exception_value );

            exception_lineno = 949;
            type_description_1 = "oooooooo";
            goto frame_exception_exit_1;
        }

        tmp_called_name_3 = var_P;
        tmp_dict_key_1 = const_str_plain_use_builtin_types;
        CHECK_OBJECT( par_use_builtin_types );
        tmp_dict_value_1 = par_use_builtin_types;
        tmp_kw_name_1 = _PyDict_NewPresized( 2 );
        tmp_res = PyDict_SetItem( tmp_kw_name_1, tmp_dict_key_1, tmp_dict_value_1 );
        assert( !(tmp_res != 0) );
        tmp_dict_key_2 = const_str_plain_dict_type;
        CHECK_OBJECT( par_dict_type );
        tmp_dict_value_2 = par_dict_type;
        tmp_res = PyDict_SetItem( tmp_kw_name_1, tmp_dict_key_2, tmp_dict_value_2 );
        assert( !(tmp_res != 0) );
        frame_5bd748325e1b93cb6ac76b1377ec42c1->m_frame.f_lineno = 949;
        tmp_assign_source_9 = CALL_FUNCTION_WITH_KEYARGS( tmp_called_name_3, tmp_kw_name_1 );
        Py_DECREF( tmp_kw_name_1 );
        if ( tmp_assign_source_9 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 949;
            type_description_1 = "oooooooo";
            goto frame_exception_exit_1;
        }
        assert( var_p == NULL );
        var_p = tmp_assign_source_9;
    }
    {
        PyObject *tmp_called_instance_4;
        PyObject *tmp_args_element_name_2;
        CHECK_OBJECT( var_p );
        tmp_called_instance_4 = var_p;
        CHECK_OBJECT( par_fp );
        tmp_args_element_name_2 = par_fp;
        frame_5bd748325e1b93cb6ac76b1377ec42c1->m_frame.f_lineno = 950;
        {
            PyObject *call_args[] = { tmp_args_element_name_2 };
            tmp_return_value = CALL_METHOD_WITH_ARGS1( tmp_called_instance_4, const_str_plain_parse, call_args );
        }

        if ( tmp_return_value == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 950;
            type_description_1 = "oooooooo";
            goto frame_exception_exit_1;
        }
        goto frame_return_exit_1;
    }

#if 0
    RESTORE_FRAME_EXCEPTION( frame_5bd748325e1b93cb6ac76b1377ec42c1 );
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto frame_no_exception_1;

    frame_return_exit_1:;
#if 0
    RESTORE_FRAME_EXCEPTION( frame_5bd748325e1b93cb6ac76b1377ec42c1 );
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto try_return_handler_1;

    frame_exception_exit_1:;

#if 0
    RESTORE_FRAME_EXCEPTION( frame_5bd748325e1b93cb6ac76b1377ec42c1 );
#endif

    if ( exception_tb == NULL )
    {
        exception_tb = MAKE_TRACEBACK( frame_5bd748325e1b93cb6ac76b1377ec42c1, exception_lineno );
    }
    else if ( exception_tb->tb_frame != &frame_5bd748325e1b93cb6ac76b1377ec42c1->m_frame )
    {
        exception_tb = ADD_TRACEBACK( exception_tb, frame_5bd748325e1b93cb6ac76b1377ec42c1, exception_lineno );
    }

    // Attachs locals to frame if any.
    Nuitka_Frame_AttachLocals(
        (struct Nuitka_FrameObject *)frame_5bd748325e1b93cb6ac76b1377ec42c1,
        type_description_1,
        par_fp,
        par_fmt,
        par_use_builtin_types,
        par_dict_type,
        var_header,
        var_info,
        var_P,
        var_p
    );


    // Release cached frame.
    if ( frame_5bd748325e1b93cb6ac76b1377ec42c1 == cache_frame_5bd748325e1b93cb6ac76b1377ec42c1 )
    {
        Py_DECREF( frame_5bd748325e1b93cb6ac76b1377ec42c1 );
    }
    cache_frame_5bd748325e1b93cb6ac76b1377ec42c1 = NULL;

    assertFrameObject( frame_5bd748325e1b93cb6ac76b1377ec42c1 );

    // Put the previous frame back on top.
    popFrameStack();

    // Return the error.
    goto try_except_handler_1;

    frame_no_exception_1:;
    // tried codes exits in all cases
    NUITKA_CANNOT_GET_HERE( plistlib$$$function_63_load );
    return NULL;
    // Return handler code:
    try_return_handler_1:;
    CHECK_OBJECT( (PyObject *)par_fp );
    Py_DECREF( par_fp );
    par_fp = NULL;

    CHECK_OBJECT( (PyObject *)par_fmt );
    Py_DECREF( par_fmt );
    par_fmt = NULL;

    CHECK_OBJECT( (PyObject *)par_use_builtin_types );
    Py_DECREF( par_use_builtin_types );
    par_use_builtin_types = NULL;

    CHECK_OBJECT( (PyObject *)par_dict_type );
    Py_DECREF( par_dict_type );
    par_dict_type = NULL;

    Py_XDECREF( var_header );
    var_header = NULL;

    Py_XDECREF( var_info );
    var_info = NULL;

    Py_XDECREF( var_P );
    var_P = NULL;

    CHECK_OBJECT( (PyObject *)var_p );
    Py_DECREF( var_p );
    var_p = NULL;

    goto function_return_exit;
    // Exception handler code:
    try_except_handler_1:;
    exception_keeper_type_4 = exception_type;
    exception_keeper_value_4 = exception_value;
    exception_keeper_tb_4 = exception_tb;
    exception_keeper_lineno_4 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    CHECK_OBJECT( (PyObject *)par_fp );
    Py_DECREF( par_fp );
    par_fp = NULL;

    CHECK_OBJECT( (PyObject *)par_fmt );
    Py_DECREF( par_fmt );
    par_fmt = NULL;

    CHECK_OBJECT( (PyObject *)par_use_builtin_types );
    Py_DECREF( par_use_builtin_types );
    par_use_builtin_types = NULL;

    CHECK_OBJECT( (PyObject *)par_dict_type );
    Py_DECREF( par_dict_type );
    par_dict_type = NULL;

    Py_XDECREF( var_header );
    var_header = NULL;

    Py_XDECREF( var_info );
    var_info = NULL;

    Py_XDECREF( var_P );
    var_P = NULL;

    Py_XDECREF( var_p );
    var_p = NULL;

    // Re-raise.
    exception_type = exception_keeper_type_4;
    exception_value = exception_keeper_value_4;
    exception_tb = exception_keeper_tb_4;
    exception_lineno = exception_keeper_lineno_4;

    goto function_exception_exit;
    // End of try:

    // Return statement must have exited already.
    NUITKA_CANNOT_GET_HERE( plistlib$$$function_63_load );
    return NULL;

function_exception_exit:
    assert( exception_type );
    RESTORE_ERROR_OCCURRED( exception_type, exception_value, exception_tb );

    return NULL;

function_return_exit:
   // Function cleanup code if any.


   // Actual function exit with return value, making sure we did not make
   // the error status worse despite non-NULL return.
   CHECK_OBJECT( tmp_return_value );
   assert( had_error || !ERROR_OCCURRED() );
   return tmp_return_value;
}


static PyObject *impl_plistlib$$$function_64_loads( struct Nuitka_FunctionObject const *self, PyObject **python_pars )
{
    // Preserve error status for checks
#ifndef __NUITKA_NO_ASSERT__
    NUITKA_MAY_BE_UNUSED bool had_error = ERROR_OCCURRED();
#endif

    // Local variable declarations.
    PyObject *par_value = python_pars[ 0 ];
    PyObject *par_fmt = python_pars[ 1 ];
    PyObject *par_use_builtin_types = python_pars[ 2 ];
    PyObject *par_dict_type = python_pars[ 3 ];
    PyObject *var_fp = NULL;
    struct Nuitka_FrameObject *frame_d27062a5a768bed0b64c62e12915c34e;
    NUITKA_MAY_BE_UNUSED char const *type_description_1 = NULL;
    PyObject *exception_type = NULL;
    PyObject *exception_value = NULL;
    PyTracebackObject *exception_tb = NULL;
    NUITKA_MAY_BE_UNUSED int exception_lineno = 0;
    PyObject *tmp_return_value = NULL;
    int tmp_res;
    static struct Nuitka_FrameObject *cache_frame_d27062a5a768bed0b64c62e12915c34e = NULL;
    PyObject *exception_keeper_type_1;
    PyObject *exception_keeper_value_1;
    PyTracebackObject *exception_keeper_tb_1;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_1;

    // Actual function body.
    // Tried code:
    MAKE_OR_REUSE_FRAME( cache_frame_d27062a5a768bed0b64c62e12915c34e, codeobj_d27062a5a768bed0b64c62e12915c34e, module_plistlib, sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *) );
    frame_d27062a5a768bed0b64c62e12915c34e = cache_frame_d27062a5a768bed0b64c62e12915c34e;

    // Push the new frame as the currently active one.
    pushFrameStack( frame_d27062a5a768bed0b64c62e12915c34e );

    // Mark the frame object as in use, ref count 1 will be up for reuse.
    assert( Py_REFCNT( frame_d27062a5a768bed0b64c62e12915c34e ) == 2 ); // Frame stack

    // Framed code:
    {
        PyObject *tmp_assign_source_1;
        PyObject *tmp_called_name_1;
        PyObject *tmp_mvar_value_1;
        PyObject *tmp_args_element_name_1;
        tmp_mvar_value_1 = GET_STRING_DICT_VALUE( moduledict_plistlib, (Nuitka_StringObject *)const_str_plain_BytesIO );

        if (unlikely( tmp_mvar_value_1 == NULL ))
        {
            tmp_mvar_value_1 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_BytesIO );
        }

        if ( tmp_mvar_value_1 == NULL )
        {

            exception_type = PyExc_NameError;
            Py_INCREF( exception_type );
            exception_value = PyUnicode_FromFormat( "name '%s' is not defined", "BytesIO" );
            exception_tb = NULL;
            NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
            CHAIN_EXCEPTION( exception_value );

            exception_lineno = 957;
            type_description_1 = "ooooo";
            goto frame_exception_exit_1;
        }

        tmp_called_name_1 = tmp_mvar_value_1;
        CHECK_OBJECT( par_value );
        tmp_args_element_name_1 = par_value;
        frame_d27062a5a768bed0b64c62e12915c34e->m_frame.f_lineno = 957;
        {
            PyObject *call_args[] = { tmp_args_element_name_1 };
            tmp_assign_source_1 = CALL_FUNCTION_WITH_ARGS1( tmp_called_name_1, call_args );
        }

        if ( tmp_assign_source_1 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 957;
            type_description_1 = "ooooo";
            goto frame_exception_exit_1;
        }
        assert( var_fp == NULL );
        var_fp = tmp_assign_source_1;
    }
    {
        PyObject *tmp_called_name_2;
        PyObject *tmp_mvar_value_2;
        PyObject *tmp_args_name_1;
        PyObject *tmp_tuple_element_1;
        PyObject *tmp_kw_name_1;
        PyObject *tmp_dict_key_1;
        PyObject *tmp_dict_value_1;
        PyObject *tmp_dict_key_2;
        PyObject *tmp_dict_value_2;
        PyObject *tmp_dict_key_3;
        PyObject *tmp_dict_value_3;
        tmp_mvar_value_2 = GET_STRING_DICT_VALUE( moduledict_plistlib, (Nuitka_StringObject *)const_str_plain_load );

        if (unlikely( tmp_mvar_value_2 == NULL ))
        {
            tmp_mvar_value_2 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_load );
        }

        if ( tmp_mvar_value_2 == NULL )
        {

            exception_type = PyExc_NameError;
            Py_INCREF( exception_type );
            exception_value = PyUnicode_FromFormat( "name '%s' is not defined", "load" );
            exception_tb = NULL;
            NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
            CHAIN_EXCEPTION( exception_value );

            exception_lineno = 958;
            type_description_1 = "ooooo";
            goto frame_exception_exit_1;
        }

        tmp_called_name_2 = tmp_mvar_value_2;
        CHECK_OBJECT( var_fp );
        tmp_tuple_element_1 = var_fp;
        tmp_args_name_1 = PyTuple_New( 1 );
        Py_INCREF( tmp_tuple_element_1 );
        PyTuple_SET_ITEM( tmp_args_name_1, 0, tmp_tuple_element_1 );
        tmp_dict_key_1 = const_str_plain_fmt;
        CHECK_OBJECT( par_fmt );
        tmp_dict_value_1 = par_fmt;
        tmp_kw_name_1 = _PyDict_NewPresized( 3 );
        tmp_res = PyDict_SetItem( tmp_kw_name_1, tmp_dict_key_1, tmp_dict_value_1 );
        assert( !(tmp_res != 0) );
        tmp_dict_key_2 = const_str_plain_use_builtin_types;
        CHECK_OBJECT( par_use_builtin_types );
        tmp_dict_value_2 = par_use_builtin_types;
        tmp_res = PyDict_SetItem( tmp_kw_name_1, tmp_dict_key_2, tmp_dict_value_2 );
        assert( !(tmp_res != 0) );
        tmp_dict_key_3 = const_str_plain_dict_type;
        CHECK_OBJECT( par_dict_type );
        tmp_dict_value_3 = par_dict_type;
        tmp_res = PyDict_SetItem( tmp_kw_name_1, tmp_dict_key_3, tmp_dict_value_3 );
        assert( !(tmp_res != 0) );
        frame_d27062a5a768bed0b64c62e12915c34e->m_frame.f_lineno = 958;
        tmp_return_value = CALL_FUNCTION( tmp_called_name_2, tmp_args_name_1, tmp_kw_name_1 );
        Py_DECREF( tmp_args_name_1 );
        Py_DECREF( tmp_kw_name_1 );
        if ( tmp_return_value == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 958;
            type_description_1 = "ooooo";
            goto frame_exception_exit_1;
        }
        goto frame_return_exit_1;
    }

#if 0
    RESTORE_FRAME_EXCEPTION( frame_d27062a5a768bed0b64c62e12915c34e );
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto frame_no_exception_1;

    frame_return_exit_1:;
#if 0
    RESTORE_FRAME_EXCEPTION( frame_d27062a5a768bed0b64c62e12915c34e );
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto try_return_handler_1;

    frame_exception_exit_1:;

#if 0
    RESTORE_FRAME_EXCEPTION( frame_d27062a5a768bed0b64c62e12915c34e );
#endif

    if ( exception_tb == NULL )
    {
        exception_tb = MAKE_TRACEBACK( frame_d27062a5a768bed0b64c62e12915c34e, exception_lineno );
    }
    else if ( exception_tb->tb_frame != &frame_d27062a5a768bed0b64c62e12915c34e->m_frame )
    {
        exception_tb = ADD_TRACEBACK( exception_tb, frame_d27062a5a768bed0b64c62e12915c34e, exception_lineno );
    }

    // Attachs locals to frame if any.
    Nuitka_Frame_AttachLocals(
        (struct Nuitka_FrameObject *)frame_d27062a5a768bed0b64c62e12915c34e,
        type_description_1,
        par_value,
        par_fmt,
        par_use_builtin_types,
        par_dict_type,
        var_fp
    );


    // Release cached frame.
    if ( frame_d27062a5a768bed0b64c62e12915c34e == cache_frame_d27062a5a768bed0b64c62e12915c34e )
    {
        Py_DECREF( frame_d27062a5a768bed0b64c62e12915c34e );
    }
    cache_frame_d27062a5a768bed0b64c62e12915c34e = NULL;

    assertFrameObject( frame_d27062a5a768bed0b64c62e12915c34e );

    // Put the previous frame back on top.
    popFrameStack();

    // Return the error.
    goto try_except_handler_1;

    frame_no_exception_1:;
    // tried codes exits in all cases
    NUITKA_CANNOT_GET_HERE( plistlib$$$function_64_loads );
    return NULL;
    // Return handler code:
    try_return_handler_1:;
    CHECK_OBJECT( (PyObject *)par_value );
    Py_DECREF( par_value );
    par_value = NULL;

    CHECK_OBJECT( (PyObject *)par_fmt );
    Py_DECREF( par_fmt );
    par_fmt = NULL;

    CHECK_OBJECT( (PyObject *)par_use_builtin_types );
    Py_DECREF( par_use_builtin_types );
    par_use_builtin_types = NULL;

    CHECK_OBJECT( (PyObject *)par_dict_type );
    Py_DECREF( par_dict_type );
    par_dict_type = NULL;

    CHECK_OBJECT( (PyObject *)var_fp );
    Py_DECREF( var_fp );
    var_fp = NULL;

    goto function_return_exit;
    // Exception handler code:
    try_except_handler_1:;
    exception_keeper_type_1 = exception_type;
    exception_keeper_value_1 = exception_value;
    exception_keeper_tb_1 = exception_tb;
    exception_keeper_lineno_1 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    CHECK_OBJECT( (PyObject *)par_value );
    Py_DECREF( par_value );
    par_value = NULL;

    CHECK_OBJECT( (PyObject *)par_fmt );
    Py_DECREF( par_fmt );
    par_fmt = NULL;

    CHECK_OBJECT( (PyObject *)par_use_builtin_types );
    Py_DECREF( par_use_builtin_types );
    par_use_builtin_types = NULL;

    CHECK_OBJECT( (PyObject *)par_dict_type );
    Py_DECREF( par_dict_type );
    par_dict_type = NULL;

    Py_XDECREF( var_fp );
    var_fp = NULL;

    // Re-raise.
    exception_type = exception_keeper_type_1;
    exception_value = exception_keeper_value_1;
    exception_tb = exception_keeper_tb_1;
    exception_lineno = exception_keeper_lineno_1;

    goto function_exception_exit;
    // End of try:

    // Return statement must have exited already.
    NUITKA_CANNOT_GET_HERE( plistlib$$$function_64_loads );
    return NULL;

function_exception_exit:
    assert( exception_type );
    RESTORE_ERROR_OCCURRED( exception_type, exception_value, exception_tb );

    return NULL;

function_return_exit:
   // Function cleanup code if any.


   // Actual function exit with return value, making sure we did not make
   // the error status worse despite non-NULL return.
   CHECK_OBJECT( tmp_return_value );
   assert( had_error || !ERROR_OCCURRED() );
   return tmp_return_value;
}


static PyObject *impl_plistlib$$$function_65_dump( struct Nuitka_FunctionObject const *self, PyObject **python_pars )
{
    // Preserve error status for checks
#ifndef __NUITKA_NO_ASSERT__
    NUITKA_MAY_BE_UNUSED bool had_error = ERROR_OCCURRED();
#endif

    // Local variable declarations.
    PyObject *par_value = python_pars[ 0 ];
    PyObject *par_fp = python_pars[ 1 ];
    PyObject *par_fmt = python_pars[ 2 ];
    PyObject *par_sort_keys = python_pars[ 3 ];
    PyObject *par_skipkeys = python_pars[ 4 ];
    PyObject *var_writer = NULL;
    struct Nuitka_FrameObject *frame_9f3aee96bd74e937729a5c400a418f8d;
    NUITKA_MAY_BE_UNUSED char const *type_description_1 = NULL;
    PyObject *exception_type = NULL;
    PyObject *exception_value = NULL;
    PyTracebackObject *exception_tb = NULL;
    NUITKA_MAY_BE_UNUSED int exception_lineno = 0;
    int tmp_res;
    static struct Nuitka_FrameObject *cache_frame_9f3aee96bd74e937729a5c400a418f8d = NULL;
    PyObject *tmp_return_value = NULL;
    PyObject *exception_keeper_type_1;
    PyObject *exception_keeper_value_1;
    PyTracebackObject *exception_keeper_tb_1;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_1;

    // Actual function body.
    // Tried code:
    MAKE_OR_REUSE_FRAME( cache_frame_9f3aee96bd74e937729a5c400a418f8d, codeobj_9f3aee96bd74e937729a5c400a418f8d, module_plistlib, sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *) );
    frame_9f3aee96bd74e937729a5c400a418f8d = cache_frame_9f3aee96bd74e937729a5c400a418f8d;

    // Push the new frame as the currently active one.
    pushFrameStack( frame_9f3aee96bd74e937729a5c400a418f8d );

    // Mark the frame object as in use, ref count 1 will be up for reuse.
    assert( Py_REFCNT( frame_9f3aee96bd74e937729a5c400a418f8d ) == 2 ); // Frame stack

    // Framed code:
    {
        nuitka_bool tmp_condition_result_1;
        PyObject *tmp_compexpr_left_1;
        PyObject *tmp_compexpr_right_1;
        PyObject *tmp_mvar_value_1;
        CHECK_OBJECT( par_fmt );
        tmp_compexpr_left_1 = par_fmt;
        tmp_mvar_value_1 = GET_STRING_DICT_VALUE( moduledict_plistlib, (Nuitka_StringObject *)const_str_plain__FORMATS );

        if (unlikely( tmp_mvar_value_1 == NULL ))
        {
            tmp_mvar_value_1 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain__FORMATS );
        }

        if ( tmp_mvar_value_1 == NULL )
        {

            exception_type = PyExc_NameError;
            Py_INCREF( exception_type );
            exception_value = PyUnicode_FromFormat( "name '%s' is not defined", "_FORMATS" );
            exception_tb = NULL;
            NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
            CHAIN_EXCEPTION( exception_value );

            exception_lineno = 966;
            type_description_1 = "oooooo";
            goto frame_exception_exit_1;
        }

        tmp_compexpr_right_1 = tmp_mvar_value_1;
        tmp_res = PySequence_Contains( tmp_compexpr_right_1, tmp_compexpr_left_1 );
        if ( tmp_res == -1 )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 966;
            type_description_1 = "oooooo";
            goto frame_exception_exit_1;
        }
        tmp_condition_result_1 = ( tmp_res == 0 ) ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
        if ( tmp_condition_result_1 == NUITKA_BOOL_TRUE )
        {
            goto branch_yes_1;
        }
        else
        {
            goto branch_no_1;
        }
        branch_yes_1:;
        {
            PyObject *tmp_raise_type_1;
            PyObject *tmp_make_exception_arg_1;
            PyObject *tmp_left_name_1;
            PyObject *tmp_right_name_1;
            PyObject *tmp_tuple_element_1;
            tmp_left_name_1 = const_str_digest_ba37f10e62fb9060b09449a8c6d1ceec;
            CHECK_OBJECT( par_fmt );
            tmp_tuple_element_1 = par_fmt;
            tmp_right_name_1 = PyTuple_New( 1 );
            Py_INCREF( tmp_tuple_element_1 );
            PyTuple_SET_ITEM( tmp_right_name_1, 0, tmp_tuple_element_1 );
            tmp_make_exception_arg_1 = BINARY_OPERATION_REMAINDER( tmp_left_name_1, tmp_right_name_1 );
            Py_DECREF( tmp_right_name_1 );
            if ( tmp_make_exception_arg_1 == NULL )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 967;
                type_description_1 = "oooooo";
                goto frame_exception_exit_1;
            }
            frame_9f3aee96bd74e937729a5c400a418f8d->m_frame.f_lineno = 967;
            {
                PyObject *call_args[] = { tmp_make_exception_arg_1 };
                tmp_raise_type_1 = CALL_FUNCTION_WITH_ARGS1( PyExc_ValueError, call_args );
            }

            Py_DECREF( tmp_make_exception_arg_1 );
            assert( !(tmp_raise_type_1 == NULL) );
            exception_type = tmp_raise_type_1;
            exception_lineno = 967;
            RAISE_EXCEPTION_WITH_TYPE( &exception_type, &exception_value, &exception_tb );
            type_description_1 = "oooooo";
            goto frame_exception_exit_1;
        }
        branch_no_1:;
    }
    {
        PyObject *tmp_assign_source_1;
        PyObject *tmp_called_name_1;
        PyObject *tmp_subscribed_name_1;
        PyObject *tmp_subscribed_name_2;
        PyObject *tmp_mvar_value_2;
        PyObject *tmp_subscript_name_1;
        PyObject *tmp_subscript_name_2;
        PyObject *tmp_args_name_1;
        PyObject *tmp_tuple_element_2;
        PyObject *tmp_kw_name_1;
        PyObject *tmp_dict_key_1;
        PyObject *tmp_dict_value_1;
        PyObject *tmp_dict_key_2;
        PyObject *tmp_dict_value_2;
        tmp_mvar_value_2 = GET_STRING_DICT_VALUE( moduledict_plistlib, (Nuitka_StringObject *)const_str_plain__FORMATS );

        if (unlikely( tmp_mvar_value_2 == NULL ))
        {
            tmp_mvar_value_2 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain__FORMATS );
        }

        if ( tmp_mvar_value_2 == NULL )
        {

            exception_type = PyExc_NameError;
            Py_INCREF( exception_type );
            exception_value = PyUnicode_FromFormat( "name '%s' is not defined", "_FORMATS" );
            exception_tb = NULL;
            NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
            CHAIN_EXCEPTION( exception_value );

            exception_lineno = 969;
            type_description_1 = "oooooo";
            goto frame_exception_exit_1;
        }

        tmp_subscribed_name_2 = tmp_mvar_value_2;
        CHECK_OBJECT( par_fmt );
        tmp_subscript_name_1 = par_fmt;
        tmp_subscribed_name_1 = LOOKUP_SUBSCRIPT( tmp_subscribed_name_2, tmp_subscript_name_1 );
        if ( tmp_subscribed_name_1 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 969;
            type_description_1 = "oooooo";
            goto frame_exception_exit_1;
        }
        tmp_subscript_name_2 = const_str_plain_writer;
        tmp_called_name_1 = LOOKUP_SUBSCRIPT( tmp_subscribed_name_1, tmp_subscript_name_2 );
        Py_DECREF( tmp_subscribed_name_1 );
        if ( tmp_called_name_1 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 969;
            type_description_1 = "oooooo";
            goto frame_exception_exit_1;
        }
        CHECK_OBJECT( par_fp );
        tmp_tuple_element_2 = par_fp;
        tmp_args_name_1 = PyTuple_New( 1 );
        Py_INCREF( tmp_tuple_element_2 );
        PyTuple_SET_ITEM( tmp_args_name_1, 0, tmp_tuple_element_2 );
        tmp_dict_key_1 = const_str_plain_sort_keys;
        CHECK_OBJECT( par_sort_keys );
        tmp_dict_value_1 = par_sort_keys;
        tmp_kw_name_1 = _PyDict_NewPresized( 2 );
        tmp_res = PyDict_SetItem( tmp_kw_name_1, tmp_dict_key_1, tmp_dict_value_1 );
        assert( !(tmp_res != 0) );
        tmp_dict_key_2 = const_str_plain_skipkeys;
        CHECK_OBJECT( par_skipkeys );
        tmp_dict_value_2 = par_skipkeys;
        tmp_res = PyDict_SetItem( tmp_kw_name_1, tmp_dict_key_2, tmp_dict_value_2 );
        assert( !(tmp_res != 0) );
        frame_9f3aee96bd74e937729a5c400a418f8d->m_frame.f_lineno = 969;
        tmp_assign_source_1 = CALL_FUNCTION( tmp_called_name_1, tmp_args_name_1, tmp_kw_name_1 );
        Py_DECREF( tmp_called_name_1 );
        Py_DECREF( tmp_args_name_1 );
        Py_DECREF( tmp_kw_name_1 );
        if ( tmp_assign_source_1 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 969;
            type_description_1 = "oooooo";
            goto frame_exception_exit_1;
        }
        assert( var_writer == NULL );
        var_writer = tmp_assign_source_1;
    }
    {
        PyObject *tmp_called_instance_1;
        PyObject *tmp_call_result_1;
        PyObject *tmp_args_element_name_1;
        CHECK_OBJECT( var_writer );
        tmp_called_instance_1 = var_writer;
        CHECK_OBJECT( par_value );
        tmp_args_element_name_1 = par_value;
        frame_9f3aee96bd74e937729a5c400a418f8d->m_frame.f_lineno = 970;
        {
            PyObject *call_args[] = { tmp_args_element_name_1 };
            tmp_call_result_1 = CALL_METHOD_WITH_ARGS1( tmp_called_instance_1, const_str_plain_write, call_args );
        }

        if ( tmp_call_result_1 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 970;
            type_description_1 = "oooooo";
            goto frame_exception_exit_1;
        }
        Py_DECREF( tmp_call_result_1 );
    }

#if 0
    RESTORE_FRAME_EXCEPTION( frame_9f3aee96bd74e937729a5c400a418f8d );
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto frame_no_exception_1;

    frame_exception_exit_1:;

#if 0
    RESTORE_FRAME_EXCEPTION( frame_9f3aee96bd74e937729a5c400a418f8d );
#endif

    if ( exception_tb == NULL )
    {
        exception_tb = MAKE_TRACEBACK( frame_9f3aee96bd74e937729a5c400a418f8d, exception_lineno );
    }
    else if ( exception_tb->tb_frame != &frame_9f3aee96bd74e937729a5c400a418f8d->m_frame )
    {
        exception_tb = ADD_TRACEBACK( exception_tb, frame_9f3aee96bd74e937729a5c400a418f8d, exception_lineno );
    }

    // Attachs locals to frame if any.
    Nuitka_Frame_AttachLocals(
        (struct Nuitka_FrameObject *)frame_9f3aee96bd74e937729a5c400a418f8d,
        type_description_1,
        par_value,
        par_fp,
        par_fmt,
        par_sort_keys,
        par_skipkeys,
        var_writer
    );


    // Release cached frame.
    if ( frame_9f3aee96bd74e937729a5c400a418f8d == cache_frame_9f3aee96bd74e937729a5c400a418f8d )
    {
        Py_DECREF( frame_9f3aee96bd74e937729a5c400a418f8d );
    }
    cache_frame_9f3aee96bd74e937729a5c400a418f8d = NULL;

    assertFrameObject( frame_9f3aee96bd74e937729a5c400a418f8d );

    // Put the previous frame back on top.
    popFrameStack();

    // Return the error.
    goto try_except_handler_1;

    frame_no_exception_1:;
    tmp_return_value = Py_None;
    Py_INCREF( tmp_return_value );
    goto try_return_handler_1;
    // tried codes exits in all cases
    NUITKA_CANNOT_GET_HERE( plistlib$$$function_65_dump );
    return NULL;
    // Return handler code:
    try_return_handler_1:;
    CHECK_OBJECT( (PyObject *)par_value );
    Py_DECREF( par_value );
    par_value = NULL;

    CHECK_OBJECT( (PyObject *)par_fp );
    Py_DECREF( par_fp );
    par_fp = NULL;

    CHECK_OBJECT( (PyObject *)par_fmt );
    Py_DECREF( par_fmt );
    par_fmt = NULL;

    CHECK_OBJECT( (PyObject *)par_sort_keys );
    Py_DECREF( par_sort_keys );
    par_sort_keys = NULL;

    CHECK_OBJECT( (PyObject *)par_skipkeys );
    Py_DECREF( par_skipkeys );
    par_skipkeys = NULL;

    CHECK_OBJECT( (PyObject *)var_writer );
    Py_DECREF( var_writer );
    var_writer = NULL;

    goto function_return_exit;
    // Exception handler code:
    try_except_handler_1:;
    exception_keeper_type_1 = exception_type;
    exception_keeper_value_1 = exception_value;
    exception_keeper_tb_1 = exception_tb;
    exception_keeper_lineno_1 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    CHECK_OBJECT( (PyObject *)par_value );
    Py_DECREF( par_value );
    par_value = NULL;

    CHECK_OBJECT( (PyObject *)par_fp );
    Py_DECREF( par_fp );
    par_fp = NULL;

    CHECK_OBJECT( (PyObject *)par_fmt );
    Py_DECREF( par_fmt );
    par_fmt = NULL;

    CHECK_OBJECT( (PyObject *)par_sort_keys );
    Py_DECREF( par_sort_keys );
    par_sort_keys = NULL;

    CHECK_OBJECT( (PyObject *)par_skipkeys );
    Py_DECREF( par_skipkeys );
    par_skipkeys = NULL;

    Py_XDECREF( var_writer );
    var_writer = NULL;

    // Re-raise.
    exception_type = exception_keeper_type_1;
    exception_value = exception_keeper_value_1;
    exception_tb = exception_keeper_tb_1;
    exception_lineno = exception_keeper_lineno_1;

    goto function_exception_exit;
    // End of try:

    // Return statement must have exited already.
    NUITKA_CANNOT_GET_HERE( plistlib$$$function_65_dump );
    return NULL;

function_exception_exit:
    assert( exception_type );
    RESTORE_ERROR_OCCURRED( exception_type, exception_value, exception_tb );

    return NULL;

function_return_exit:
   // Function cleanup code if any.


   // Actual function exit with return value, making sure we did not make
   // the error status worse despite non-NULL return.
   CHECK_OBJECT( tmp_return_value );
   assert( had_error || !ERROR_OCCURRED() );
   return tmp_return_value;
}


static PyObject *impl_plistlib$$$function_66_dumps( struct Nuitka_FunctionObject const *self, PyObject **python_pars )
{
    // Preserve error status for checks
#ifndef __NUITKA_NO_ASSERT__
    NUITKA_MAY_BE_UNUSED bool had_error = ERROR_OCCURRED();
#endif

    // Local variable declarations.
    PyObject *par_value = python_pars[ 0 ];
    PyObject *par_fmt = python_pars[ 1 ];
    PyObject *par_skipkeys = python_pars[ 2 ];
    PyObject *par_sort_keys = python_pars[ 3 ];
    PyObject *var_fp = NULL;
    struct Nuitka_FrameObject *frame_f3a77dd01f75c2e6f726a302d6653c9b;
    NUITKA_MAY_BE_UNUSED char const *type_description_1 = NULL;
    PyObject *exception_type = NULL;
    PyObject *exception_value = NULL;
    PyTracebackObject *exception_tb = NULL;
    NUITKA_MAY_BE_UNUSED int exception_lineno = 0;
    int tmp_res;
    PyObject *tmp_return_value = NULL;
    static struct Nuitka_FrameObject *cache_frame_f3a77dd01f75c2e6f726a302d6653c9b = NULL;
    PyObject *exception_keeper_type_1;
    PyObject *exception_keeper_value_1;
    PyTracebackObject *exception_keeper_tb_1;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_1;

    // Actual function body.
    // Tried code:
    MAKE_OR_REUSE_FRAME( cache_frame_f3a77dd01f75c2e6f726a302d6653c9b, codeobj_f3a77dd01f75c2e6f726a302d6653c9b, module_plistlib, sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *) );
    frame_f3a77dd01f75c2e6f726a302d6653c9b = cache_frame_f3a77dd01f75c2e6f726a302d6653c9b;

    // Push the new frame as the currently active one.
    pushFrameStack( frame_f3a77dd01f75c2e6f726a302d6653c9b );

    // Mark the frame object as in use, ref count 1 will be up for reuse.
    assert( Py_REFCNT( frame_f3a77dd01f75c2e6f726a302d6653c9b ) == 2 ); // Frame stack

    // Framed code:
    {
        PyObject *tmp_assign_source_1;
        PyObject *tmp_called_name_1;
        PyObject *tmp_mvar_value_1;
        tmp_mvar_value_1 = GET_STRING_DICT_VALUE( moduledict_plistlib, (Nuitka_StringObject *)const_str_plain_BytesIO );

        if (unlikely( tmp_mvar_value_1 == NULL ))
        {
            tmp_mvar_value_1 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_BytesIO );
        }

        if ( tmp_mvar_value_1 == NULL )
        {

            exception_type = PyExc_NameError;
            Py_INCREF( exception_type );
            exception_value = PyUnicode_FromFormat( "name '%s' is not defined", "BytesIO" );
            exception_tb = NULL;
            NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
            CHAIN_EXCEPTION( exception_value );

            exception_lineno = 976;
            type_description_1 = "ooooo";
            goto frame_exception_exit_1;
        }

        tmp_called_name_1 = tmp_mvar_value_1;
        frame_f3a77dd01f75c2e6f726a302d6653c9b->m_frame.f_lineno = 976;
        tmp_assign_source_1 = CALL_FUNCTION_NO_ARGS( tmp_called_name_1 );
        if ( tmp_assign_source_1 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 976;
            type_description_1 = "ooooo";
            goto frame_exception_exit_1;
        }
        assert( var_fp == NULL );
        var_fp = tmp_assign_source_1;
    }
    {
        PyObject *tmp_called_name_2;
        PyObject *tmp_mvar_value_2;
        PyObject *tmp_call_result_1;
        PyObject *tmp_args_name_1;
        PyObject *tmp_tuple_element_1;
        PyObject *tmp_kw_name_1;
        PyObject *tmp_dict_key_1;
        PyObject *tmp_dict_value_1;
        PyObject *tmp_dict_key_2;
        PyObject *tmp_dict_value_2;
        PyObject *tmp_dict_key_3;
        PyObject *tmp_dict_value_3;
        tmp_mvar_value_2 = GET_STRING_DICT_VALUE( moduledict_plistlib, (Nuitka_StringObject *)const_str_plain_dump );

        if (unlikely( tmp_mvar_value_2 == NULL ))
        {
            tmp_mvar_value_2 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_dump );
        }

        if ( tmp_mvar_value_2 == NULL )
        {

            exception_type = PyExc_NameError;
            Py_INCREF( exception_type );
            exception_value = PyUnicode_FromFormat( "name '%s' is not defined", "dump" );
            exception_tb = NULL;
            NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
            CHAIN_EXCEPTION( exception_value );

            exception_lineno = 977;
            type_description_1 = "ooooo";
            goto frame_exception_exit_1;
        }

        tmp_called_name_2 = tmp_mvar_value_2;
        CHECK_OBJECT( par_value );
        tmp_tuple_element_1 = par_value;
        tmp_args_name_1 = PyTuple_New( 2 );
        Py_INCREF( tmp_tuple_element_1 );
        PyTuple_SET_ITEM( tmp_args_name_1, 0, tmp_tuple_element_1 );
        CHECK_OBJECT( var_fp );
        tmp_tuple_element_1 = var_fp;
        Py_INCREF( tmp_tuple_element_1 );
        PyTuple_SET_ITEM( tmp_args_name_1, 1, tmp_tuple_element_1 );
        tmp_dict_key_1 = const_str_plain_fmt;
        CHECK_OBJECT( par_fmt );
        tmp_dict_value_1 = par_fmt;
        tmp_kw_name_1 = _PyDict_NewPresized( 3 );
        tmp_res = PyDict_SetItem( tmp_kw_name_1, tmp_dict_key_1, tmp_dict_value_1 );
        assert( !(tmp_res != 0) );
        tmp_dict_key_2 = const_str_plain_skipkeys;
        CHECK_OBJECT( par_skipkeys );
        tmp_dict_value_2 = par_skipkeys;
        tmp_res = PyDict_SetItem( tmp_kw_name_1, tmp_dict_key_2, tmp_dict_value_2 );
        assert( !(tmp_res != 0) );
        tmp_dict_key_3 = const_str_plain_sort_keys;
        CHECK_OBJECT( par_sort_keys );
        tmp_dict_value_3 = par_sort_keys;
        tmp_res = PyDict_SetItem( tmp_kw_name_1, tmp_dict_key_3, tmp_dict_value_3 );
        assert( !(tmp_res != 0) );
        frame_f3a77dd01f75c2e6f726a302d6653c9b->m_frame.f_lineno = 977;
        tmp_call_result_1 = CALL_FUNCTION( tmp_called_name_2, tmp_args_name_1, tmp_kw_name_1 );
        Py_DECREF( tmp_args_name_1 );
        Py_DECREF( tmp_kw_name_1 );
        if ( tmp_call_result_1 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 977;
            type_description_1 = "ooooo";
            goto frame_exception_exit_1;
        }
        Py_DECREF( tmp_call_result_1 );
    }
    {
        PyObject *tmp_called_instance_1;
        CHECK_OBJECT( var_fp );
        tmp_called_instance_1 = var_fp;
        frame_f3a77dd01f75c2e6f726a302d6653c9b->m_frame.f_lineno = 978;
        tmp_return_value = CALL_METHOD_NO_ARGS( tmp_called_instance_1, const_str_plain_getvalue );
        if ( tmp_return_value == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 978;
            type_description_1 = "ooooo";
            goto frame_exception_exit_1;
        }
        goto frame_return_exit_1;
    }

#if 0
    RESTORE_FRAME_EXCEPTION( frame_f3a77dd01f75c2e6f726a302d6653c9b );
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto frame_no_exception_1;

    frame_return_exit_1:;
#if 0
    RESTORE_FRAME_EXCEPTION( frame_f3a77dd01f75c2e6f726a302d6653c9b );
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto try_return_handler_1;

    frame_exception_exit_1:;

#if 0
    RESTORE_FRAME_EXCEPTION( frame_f3a77dd01f75c2e6f726a302d6653c9b );
#endif

    if ( exception_tb == NULL )
    {
        exception_tb = MAKE_TRACEBACK( frame_f3a77dd01f75c2e6f726a302d6653c9b, exception_lineno );
    }
    else if ( exception_tb->tb_frame != &frame_f3a77dd01f75c2e6f726a302d6653c9b->m_frame )
    {
        exception_tb = ADD_TRACEBACK( exception_tb, frame_f3a77dd01f75c2e6f726a302d6653c9b, exception_lineno );
    }

    // Attachs locals to frame if any.
    Nuitka_Frame_AttachLocals(
        (struct Nuitka_FrameObject *)frame_f3a77dd01f75c2e6f726a302d6653c9b,
        type_description_1,
        par_value,
        par_fmt,
        par_skipkeys,
        par_sort_keys,
        var_fp
    );


    // Release cached frame.
    if ( frame_f3a77dd01f75c2e6f726a302d6653c9b == cache_frame_f3a77dd01f75c2e6f726a302d6653c9b )
    {
        Py_DECREF( frame_f3a77dd01f75c2e6f726a302d6653c9b );
    }
    cache_frame_f3a77dd01f75c2e6f726a302d6653c9b = NULL;

    assertFrameObject( frame_f3a77dd01f75c2e6f726a302d6653c9b );

    // Put the previous frame back on top.
    popFrameStack();

    // Return the error.
    goto try_except_handler_1;

    frame_no_exception_1:;
    // tried codes exits in all cases
    NUITKA_CANNOT_GET_HERE( plistlib$$$function_66_dumps );
    return NULL;
    // Return handler code:
    try_return_handler_1:;
    CHECK_OBJECT( (PyObject *)par_value );
    Py_DECREF( par_value );
    par_value = NULL;

    CHECK_OBJECT( (PyObject *)par_fmt );
    Py_DECREF( par_fmt );
    par_fmt = NULL;

    CHECK_OBJECT( (PyObject *)par_skipkeys );
    Py_DECREF( par_skipkeys );
    par_skipkeys = NULL;

    CHECK_OBJECT( (PyObject *)par_sort_keys );
    Py_DECREF( par_sort_keys );
    par_sort_keys = NULL;

    CHECK_OBJECT( (PyObject *)var_fp );
    Py_DECREF( var_fp );
    var_fp = NULL;

    goto function_return_exit;
    // Exception handler code:
    try_except_handler_1:;
    exception_keeper_type_1 = exception_type;
    exception_keeper_value_1 = exception_value;
    exception_keeper_tb_1 = exception_tb;
    exception_keeper_lineno_1 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    CHECK_OBJECT( (PyObject *)par_value );
    Py_DECREF( par_value );
    par_value = NULL;

    CHECK_OBJECT( (PyObject *)par_fmt );
    Py_DECREF( par_fmt );
    par_fmt = NULL;

    CHECK_OBJECT( (PyObject *)par_skipkeys );
    Py_DECREF( par_skipkeys );
    par_skipkeys = NULL;

    CHECK_OBJECT( (PyObject *)par_sort_keys );
    Py_DECREF( par_sort_keys );
    par_sort_keys = NULL;

    Py_XDECREF( var_fp );
    var_fp = NULL;

    // Re-raise.
    exception_type = exception_keeper_type_1;
    exception_value = exception_keeper_value_1;
    exception_tb = exception_keeper_tb_1;
    exception_lineno = exception_keeper_lineno_1;

    goto function_exception_exit;
    // End of try:

    // Return statement must have exited already.
    NUITKA_CANNOT_GET_HERE( plistlib$$$function_66_dumps );
    return NULL;

function_exception_exit:
    assert( exception_type );
    RESTORE_ERROR_OCCURRED( exception_type, exception_value, exception_tb );

    return NULL;

function_return_exit:
   // Function cleanup code if any.


   // Actual function exit with return value, making sure we did not make
   // the error status worse despite non-NULL return.
   CHECK_OBJECT( tmp_return_value );
   assert( had_error || !ERROR_OCCURRED() );
   return tmp_return_value;
}



static PyObject *MAKE_FUNCTION_plistlib$$$function_10___repr__(  )
{
    struct Nuitka_FunctionObject *result = Nuitka_Function_New(
        impl_plistlib$$$function_10___repr__,
        const_str_plain___repr__,
#if PYTHON_VERSION >= 300
        const_str_digest_403c2e6bf7233ba4eb16201b08761c63,
#endif
        codeobj_bd0be69468a9187fdfbee75e4cfd5679,
        NULL,
#if PYTHON_VERSION >= 300
        NULL,
        NULL,
#endif
        module_plistlib,
        NULL,
        0
    );

    return (PyObject *)result;
}



static PyObject *MAKE_FUNCTION_plistlib$$$function_11__encode_base64( PyObject *defaults )
{
    struct Nuitka_FunctionObject *result = Nuitka_Function_New(
        impl_plistlib$$$function_11__encode_base64,
        const_str_plain__encode_base64,
#if PYTHON_VERSION >= 300
        NULL,
#endif
        codeobj_eb47429ce69b824e6c93ceac84e00d77,
        defaults,
#if PYTHON_VERSION >= 300
        NULL,
        NULL,
#endif
        module_plistlib,
        NULL,
        0
    );

    return (PyObject *)result;
}



static PyObject *MAKE_FUNCTION_plistlib$$$function_12__decode_base64(  )
{
    struct Nuitka_FunctionObject *result = Nuitka_Function_New(
        impl_plistlib$$$function_12__decode_base64,
        const_str_plain__decode_base64,
#if PYTHON_VERSION >= 300
        NULL,
#endif
        codeobj_02c98b6f7544c4ced2c0d665794352de,
        NULL,
#if PYTHON_VERSION >= 300
        NULL,
        NULL,
#endif
        module_plistlib,
        NULL,
        0
    );

    return (PyObject *)result;
}



static PyObject *MAKE_FUNCTION_plistlib$$$function_13__date_from_string(  )
{
    struct Nuitka_FunctionObject *result = Nuitka_Function_New(
        impl_plistlib$$$function_13__date_from_string,
        const_str_plain__date_from_string,
#if PYTHON_VERSION >= 300
        NULL,
#endif
        codeobj_17d7052b9c3a53ead109ed86ee31520c,
        NULL,
#if PYTHON_VERSION >= 300
        NULL,
        NULL,
#endif
        module_plistlib,
        NULL,
        0
    );

    return (PyObject *)result;
}



static PyObject *MAKE_FUNCTION_plistlib$$$function_14__date_to_string(  )
{
    struct Nuitka_FunctionObject *result = Nuitka_Function_New(
        impl_plistlib$$$function_14__date_to_string,
        const_str_plain__date_to_string,
#if PYTHON_VERSION >= 300
        NULL,
#endif
        codeobj_b9429066ec0e7c0c6d166bbcdc671c14,
        NULL,
#if PYTHON_VERSION >= 300
        NULL,
        NULL,
#endif
        module_plistlib,
        NULL,
        0
    );

    return (PyObject *)result;
}



static PyObject *MAKE_FUNCTION_plistlib$$$function_15__escape(  )
{
    struct Nuitka_FunctionObject *result = Nuitka_Function_New(
        impl_plistlib$$$function_15__escape,
        const_str_plain__escape,
#if PYTHON_VERSION >= 300
        NULL,
#endif
        codeobj_0b4c9aa5657ccaeb016e84e0b5e47236,
        NULL,
#if PYTHON_VERSION >= 300
        NULL,
        NULL,
#endif
        module_plistlib,
        NULL,
        0
    );

    return (PyObject *)result;
}



static PyObject *MAKE_FUNCTION_plistlib$$$function_16___init__(  )
{
    struct Nuitka_FunctionObject *result = Nuitka_Function_New(
        impl_plistlib$$$function_16___init__,
        const_str_plain___init__,
#if PYTHON_VERSION >= 300
        const_str_digest_d157bbee9bf6e82d2b8fd0f849cf01c7,
#endif
        codeobj_f4d3ab61dc67f46b7466c1806f9ea741,
        NULL,
#if PYTHON_VERSION >= 300
        NULL,
        NULL,
#endif
        module_plistlib,
        NULL,
        0
    );

    return (PyObject *)result;
}



static PyObject *MAKE_FUNCTION_plistlib$$$function_17_parse(  )
{
    struct Nuitka_FunctionObject *result = Nuitka_Function_New(
        impl_plistlib$$$function_17_parse,
        const_str_plain_parse,
#if PYTHON_VERSION >= 300
        const_str_digest_3ceff0c8cf65327ba798e42abd161faa,
#endif
        codeobj_3924ce3c9aecb71bd1721cfe145c0d4a,
        NULL,
#if PYTHON_VERSION >= 300
        NULL,
        NULL,
#endif
        module_plistlib,
        NULL,
        0
    );

    return (PyObject *)result;
}



static PyObject *MAKE_FUNCTION_plistlib$$$function_18_handle_begin_element(  )
{
    struct Nuitka_FunctionObject *result = Nuitka_Function_New(
        impl_plistlib$$$function_18_handle_begin_element,
        const_str_plain_handle_begin_element,
#if PYTHON_VERSION >= 300
        const_str_digest_1be925b60179ca3ccaa06f3b6ddcf5ec,
#endif
        codeobj_247e4d428c357065ba9e8f9bb7513632,
        NULL,
#if PYTHON_VERSION >= 300
        NULL,
        NULL,
#endif
        module_plistlib,
        NULL,
        0
    );

    return (PyObject *)result;
}



static PyObject *MAKE_FUNCTION_plistlib$$$function_19_handle_end_element(  )
{
    struct Nuitka_FunctionObject *result = Nuitka_Function_New(
        impl_plistlib$$$function_19_handle_end_element,
        const_str_plain_handle_end_element,
#if PYTHON_VERSION >= 300
        const_str_digest_2d6be220c1ec10e13ee045608ed4f210,
#endif
        codeobj_0b77ad39ed98f2b4798b7f0c3ce21305,
        NULL,
#if PYTHON_VERSION >= 300
        NULL,
        NULL,
#endif
        module_plistlib,
        NULL,
        0
    );

    return (PyObject *)result;
}



static PyObject *MAKE_FUNCTION_plistlib$$$function_1__maybe_open(  )
{
    struct Nuitka_FunctionObject *result = Nuitka_Function_New(
        impl_plistlib$$$function_1__maybe_open,
        const_str_plain__maybe_open,
#if PYTHON_VERSION >= 300
        NULL,
#endif
        codeobj_ce27cf377074662a245da56d34a90579,
        NULL,
#if PYTHON_VERSION >= 300
        NULL,
        NULL,
#endif
        module_plistlib,
        NULL,
        0
    );

    return (PyObject *)result;
}



static PyObject *MAKE_FUNCTION_plistlib$$$function_20_handle_data(  )
{
    struct Nuitka_FunctionObject *result = Nuitka_Function_New(
        impl_plistlib$$$function_20_handle_data,
        const_str_plain_handle_data,
#if PYTHON_VERSION >= 300
        const_str_digest_448f4d2b573bf42d517b7fbb5b453135,
#endif
        codeobj_a3f9da33bfba4743a02507aae8009f4a,
        NULL,
#if PYTHON_VERSION >= 300
        NULL,
        NULL,
#endif
        module_plistlib,
        NULL,
        0
    );

    return (PyObject *)result;
}



static PyObject *MAKE_FUNCTION_plistlib$$$function_21_add_object(  )
{
    struct Nuitka_FunctionObject *result = Nuitka_Function_New(
        impl_plistlib$$$function_21_add_object,
        const_str_plain_add_object,
#if PYTHON_VERSION >= 300
        const_str_digest_e5d58339820a87bba8cbb522f71890a2,
#endif
        codeobj_d5586451b88a3c879eeca6a008e57522,
        NULL,
#if PYTHON_VERSION >= 300
        NULL,
        NULL,
#endif
        module_plistlib,
        NULL,
        0
    );

    return (PyObject *)result;
}



static PyObject *MAKE_FUNCTION_plistlib$$$function_22_get_data(  )
{
    struct Nuitka_FunctionObject *result = Nuitka_Function_New(
        impl_plistlib$$$function_22_get_data,
        const_str_plain_get_data,
#if PYTHON_VERSION >= 300
        const_str_digest_67d4853a9b27d1ed49dfc583b05f2dc2,
#endif
        codeobj_ff13cfe69c3214da91317aaa57f94838,
        NULL,
#if PYTHON_VERSION >= 300
        NULL,
        NULL,
#endif
        module_plistlib,
        NULL,
        0
    );

    return (PyObject *)result;
}



static PyObject *MAKE_FUNCTION_plistlib$$$function_23_begin_dict(  )
{
    struct Nuitka_FunctionObject *result = Nuitka_Function_New(
        impl_plistlib$$$function_23_begin_dict,
        const_str_plain_begin_dict,
#if PYTHON_VERSION >= 300
        const_str_digest_709ace4422e85fc85e4ac6f17a9f2741,
#endif
        codeobj_29ec20723eec2f98ed1638ff1580d134,
        NULL,
#if PYTHON_VERSION >= 300
        NULL,
        NULL,
#endif
        module_plistlib,
        NULL,
        0
    );

    return (PyObject *)result;
}



static PyObject *MAKE_FUNCTION_plistlib$$$function_24_end_dict(  )
{
    struct Nuitka_FunctionObject *result = Nuitka_Function_New(
        impl_plistlib$$$function_24_end_dict,
        const_str_plain_end_dict,
#if PYTHON_VERSION >= 300
        const_str_digest_0f355a08be39617fb7ccf1cb3db7d27d,
#endif
        codeobj_c137ab2f19076c37db18924be34543b0,
        NULL,
#if PYTHON_VERSION >= 300
        NULL,
        NULL,
#endif
        module_plistlib,
        NULL,
        0
    );

    return (PyObject *)result;
}



static PyObject *MAKE_FUNCTION_plistlib$$$function_25_end_key(  )
{
    struct Nuitka_FunctionObject *result = Nuitka_Function_New(
        impl_plistlib$$$function_25_end_key,
        const_str_plain_end_key,
#if PYTHON_VERSION >= 300
        const_str_digest_4517dddc677dac91392a1f75e459c993,
#endif
        codeobj_391b3640d9ded65d2588654840fa2e13,
        NULL,
#if PYTHON_VERSION >= 300
        NULL,
        NULL,
#endif
        module_plistlib,
        NULL,
        0
    );

    return (PyObject *)result;
}



static PyObject *MAKE_FUNCTION_plistlib$$$function_26_begin_array(  )
{
    struct Nuitka_FunctionObject *result = Nuitka_Function_New(
        impl_plistlib$$$function_26_begin_array,
        const_str_plain_begin_array,
#if PYTHON_VERSION >= 300
        const_str_digest_3c048894775f66f19300c824177e657d,
#endif
        codeobj_c703ebb5931b8474dc0577e26f98f0eb,
        NULL,
#if PYTHON_VERSION >= 300
        NULL,
        NULL,
#endif
        module_plistlib,
        NULL,
        0
    );

    return (PyObject *)result;
}



static PyObject *MAKE_FUNCTION_plistlib$$$function_27_end_array(  )
{
    struct Nuitka_FunctionObject *result = Nuitka_Function_New(
        impl_plistlib$$$function_27_end_array,
        const_str_plain_end_array,
#if PYTHON_VERSION >= 300
        const_str_digest_098cae6af4590a5be139fc9e6eb09d4d,
#endif
        codeobj_86bfb94d82246de2165612ee08b14306,
        NULL,
#if PYTHON_VERSION >= 300
        NULL,
        NULL,
#endif
        module_plistlib,
        NULL,
        0
    );

    return (PyObject *)result;
}



static PyObject *MAKE_FUNCTION_plistlib$$$function_28_end_true(  )
{
    struct Nuitka_FunctionObject *result = Nuitka_Function_New(
        impl_plistlib$$$function_28_end_true,
        const_str_plain_end_true,
#if PYTHON_VERSION >= 300
        const_str_digest_28f43fb065e63e931ff3bd1821e4d43f,
#endif
        codeobj_a361a94c0aa4bb29cd54db7f2d6290cd,
        NULL,
#if PYTHON_VERSION >= 300
        NULL,
        NULL,
#endif
        module_plistlib,
        NULL,
        0
    );

    return (PyObject *)result;
}



static PyObject *MAKE_FUNCTION_plistlib$$$function_29_end_false(  )
{
    struct Nuitka_FunctionObject *result = Nuitka_Function_New(
        impl_plistlib$$$function_29_end_false,
        const_str_plain_end_false,
#if PYTHON_VERSION >= 300
        const_str_digest_6406ac9858cad296e77a7e9ea874e091,
#endif
        codeobj_4558bf051938d18c1bb120aac473f569,
        NULL,
#if PYTHON_VERSION >= 300
        NULL,
        NULL,
#endif
        module_plistlib,
        NULL,
        0
    );

    return (PyObject *)result;
}



static PyObject *MAKE_FUNCTION_plistlib$$$function_2_readPlist(  )
{
    struct Nuitka_FunctionObject *result = Nuitka_Function_New(
        impl_plistlib$$$function_2_readPlist,
        const_str_plain_readPlist,
#if PYTHON_VERSION >= 300
        NULL,
#endif
        codeobj_f2d824099d637e3632344b6ab8f1be45,
        NULL,
#if PYTHON_VERSION >= 300
        NULL,
        NULL,
#endif
        module_plistlib,
        const_str_digest_7ba0133bc3119ad9630c08f3519c5f25,
        0
    );

    return (PyObject *)result;
}



static PyObject *MAKE_FUNCTION_plistlib$$$function_30_end_integer(  )
{
    struct Nuitka_FunctionObject *result = Nuitka_Function_New(
        impl_plistlib$$$function_30_end_integer,
        const_str_plain_end_integer,
#if PYTHON_VERSION >= 300
        const_str_digest_b3a31e7b106c45d8dfd995a9fd411a18,
#endif
        codeobj_ef0071820f77a4becce92fd52300ac9b,
        NULL,
#if PYTHON_VERSION >= 300
        NULL,
        NULL,
#endif
        module_plistlib,
        NULL,
        0
    );

    return (PyObject *)result;
}



static PyObject *MAKE_FUNCTION_plistlib$$$function_31_end_real(  )
{
    struct Nuitka_FunctionObject *result = Nuitka_Function_New(
        impl_plistlib$$$function_31_end_real,
        const_str_plain_end_real,
#if PYTHON_VERSION >= 300
        const_str_digest_5fb9888f03b6fa8c88863dd75de0b251,
#endif
        codeobj_450bf0e55fae22b04555a9e483a3a399,
        NULL,
#if PYTHON_VERSION >= 300
        NULL,
        NULL,
#endif
        module_plistlib,
        NULL,
        0
    );

    return (PyObject *)result;
}



static PyObject *MAKE_FUNCTION_plistlib$$$function_32_end_string(  )
{
    struct Nuitka_FunctionObject *result = Nuitka_Function_New(
        impl_plistlib$$$function_32_end_string,
        const_str_plain_end_string,
#if PYTHON_VERSION >= 300
        const_str_digest_834e99f6e73d4fc4f41fde0b03077b1e,
#endif
        codeobj_53fe42fd8bf57f188acf5a315f6a6348,
        NULL,
#if PYTHON_VERSION >= 300
        NULL,
        NULL,
#endif
        module_plistlib,
        NULL,
        0
    );

    return (PyObject *)result;
}



static PyObject *MAKE_FUNCTION_plistlib$$$function_33_end_data(  )
{
    struct Nuitka_FunctionObject *result = Nuitka_Function_New(
        impl_plistlib$$$function_33_end_data,
        const_str_plain_end_data,
#if PYTHON_VERSION >= 300
        const_str_digest_c9a912e7747523d7f6380ebb87307469,
#endif
        codeobj_394db3475a232081bdb1f978c225930f,
        NULL,
#if PYTHON_VERSION >= 300
        NULL,
        NULL,
#endif
        module_plistlib,
        NULL,
        0
    );

    return (PyObject *)result;
}



static PyObject *MAKE_FUNCTION_plistlib$$$function_34_end_date(  )
{
    struct Nuitka_FunctionObject *result = Nuitka_Function_New(
        impl_plistlib$$$function_34_end_date,
        const_str_plain_end_date,
#if PYTHON_VERSION >= 300
        const_str_digest_3dc7a5d8e36836bd2526010c8c66647e,
#endif
        codeobj_3db2e52ef33d4eb073b73ae073e4ef5a,
        NULL,
#if PYTHON_VERSION >= 300
        NULL,
        NULL,
#endif
        module_plistlib,
        NULL,
        0
    );

    return (PyObject *)result;
}



static PyObject *MAKE_FUNCTION_plistlib$$$function_35___init__( PyObject *defaults )
{
    struct Nuitka_FunctionObject *result = Nuitka_Function_New(
        impl_plistlib$$$function_35___init__,
        const_str_plain___init__,
#if PYTHON_VERSION >= 300
        const_str_digest_ef90eba32953df4533399b3bd5512b87,
#endif
        codeobj_4f9251679fe309191bf67eed2d91a7fe,
        defaults,
#if PYTHON_VERSION >= 300
        NULL,
        NULL,
#endif
        module_plistlib,
        NULL,
        0
    );

    return (PyObject *)result;
}



static PyObject *MAKE_FUNCTION_plistlib$$$function_36_begin_element(  )
{
    struct Nuitka_FunctionObject *result = Nuitka_Function_New(
        impl_plistlib$$$function_36_begin_element,
        const_str_plain_begin_element,
#if PYTHON_VERSION >= 300
        const_str_digest_a87aa14c38af2ff58724efaca0a1d2d7,
#endif
        codeobj_ec7700a560b5db815e48a8c01e9e1467,
        NULL,
#if PYTHON_VERSION >= 300
        NULL,
        NULL,
#endif
        module_plistlib,
        NULL,
        0
    );

    return (PyObject *)result;
}



static PyObject *MAKE_FUNCTION_plistlib$$$function_37_end_element(  )
{
    struct Nuitka_FunctionObject *result = Nuitka_Function_New(
        impl_plistlib$$$function_37_end_element,
        const_str_plain_end_element,
#if PYTHON_VERSION >= 300
        const_str_digest_5050cf860e68bc9f9751cc7744a512f0,
#endif
        codeobj_4a99c9a153c5488c06b277919fc55b52,
        NULL,
#if PYTHON_VERSION >= 300
        NULL,
        NULL,
#endif
        module_plistlib,
        NULL,
        0
    );

    return (PyObject *)result;
}



static PyObject *MAKE_FUNCTION_plistlib$$$function_38_simple_element( PyObject *defaults )
{
    struct Nuitka_FunctionObject *result = Nuitka_Function_New(
        impl_plistlib$$$function_38_simple_element,
        const_str_plain_simple_element,
#if PYTHON_VERSION >= 300
        const_str_digest_9705f9bcd6179641b4862cd0d8a2fd26,
#endif
        codeobj_6b99acd8979c98546f55969395a59194,
        defaults,
#if PYTHON_VERSION >= 300
        NULL,
        NULL,
#endif
        module_plistlib,
        NULL,
        0
    );

    return (PyObject *)result;
}



static PyObject *MAKE_FUNCTION_plistlib$$$function_39_writeln(  )
{
    struct Nuitka_FunctionObject *result = Nuitka_Function_New(
        impl_plistlib$$$function_39_writeln,
        const_str_plain_writeln,
#if PYTHON_VERSION >= 300
        const_str_digest_6583f9dd4ad34b121a1756d5bda1dffa,
#endif
        codeobj_3b5b591b966c1dc4c84cbc03ce10a24b,
        NULL,
#if PYTHON_VERSION >= 300
        NULL,
        NULL,
#endif
        module_plistlib,
        NULL,
        0
    );

    return (PyObject *)result;
}



static PyObject *MAKE_FUNCTION_plistlib$$$function_3_writePlist(  )
{
    struct Nuitka_FunctionObject *result = Nuitka_Function_New(
        impl_plistlib$$$function_3_writePlist,
        const_str_plain_writePlist,
#if PYTHON_VERSION >= 300
        NULL,
#endif
        codeobj_d5b82ebdfff3fa51cb1a9d07ee878447,
        NULL,
#if PYTHON_VERSION >= 300
        NULL,
        NULL,
#endif
        module_plistlib,
        const_str_digest_3cce387f11a2d373b31af028bfe0d7e6,
        0
    );

    return (PyObject *)result;
}



static PyObject *MAKE_FUNCTION_plistlib$$$function_40___init__( PyObject *defaults )
{
    struct Nuitka_FunctionObject *result = Nuitka_Function_New(
        impl_plistlib$$$function_40___init__,
        const_str_plain___init__,
#if PYTHON_VERSION >= 300
        const_str_digest_d21f4e2199bc86e1c924dc3ed9f1fbf4,
#endif
        codeobj_bbb1f15ac628392d781447385fcc52bf,
        defaults,
#if PYTHON_VERSION >= 300
        NULL,
        NULL,
#endif
        module_plistlib,
        NULL,
        0
    );

    return (PyObject *)result;
}



static PyObject *MAKE_FUNCTION_plistlib$$$function_41_write(  )
{
    struct Nuitka_FunctionObject *result = Nuitka_Function_New(
        impl_plistlib$$$function_41_write,
        const_str_plain_write,
#if PYTHON_VERSION >= 300
        const_str_digest_3c4021139830c6416110a9b56838cb10,
#endif
        codeobj_2ab18736824656190d9afedab53a988a,
        NULL,
#if PYTHON_VERSION >= 300
        NULL,
        NULL,
#endif
        module_plistlib,
        NULL,
        0
    );

    return (PyObject *)result;
}



static PyObject *MAKE_FUNCTION_plistlib$$$function_42_write_value(  )
{
    struct Nuitka_FunctionObject *result = Nuitka_Function_New(
        impl_plistlib$$$function_42_write_value,
        const_str_plain_write_value,
#if PYTHON_VERSION >= 300
        const_str_digest_89062d13c68a98c2a3f69b44901f001e,
#endif
        codeobj_c0f5be1b35baf9f3b0c01ecf8ced538a,
        NULL,
#if PYTHON_VERSION >= 300
        NULL,
        NULL,
#endif
        module_plistlib,
        NULL,
        0
    );

    return (PyObject *)result;
}



static PyObject *MAKE_FUNCTION_plistlib$$$function_43_write_data(  )
{
    struct Nuitka_FunctionObject *result = Nuitka_Function_New(
        impl_plistlib$$$function_43_write_data,
        const_str_plain_write_data,
#if PYTHON_VERSION >= 300
        const_str_digest_8ec6226e6f1c24f4652c7ab62abc0dd4,
#endif
        codeobj_463289b78eb680a3e5594916603300dd,
        NULL,
#if PYTHON_VERSION >= 300
        NULL,
        NULL,
#endif
        module_plistlib,
        NULL,
        0
    );

    return (PyObject *)result;
}



static PyObject *MAKE_FUNCTION_plistlib$$$function_44_write_bytes(  )
{
    struct Nuitka_FunctionObject *result = Nuitka_Function_New(
        impl_plistlib$$$function_44_write_bytes,
        const_str_plain_write_bytes,
#if PYTHON_VERSION >= 300
        const_str_digest_582612ba88d27e5080633094b8b89771,
#endif
        codeobj_398c2ead7dab203b363086ad8619c7ac,
        NULL,
#if PYTHON_VERSION >= 300
        NULL,
        NULL,
#endif
        module_plistlib,
        NULL,
        0
    );

    return (PyObject *)result;
}



static PyObject *MAKE_FUNCTION_plistlib$$$function_45_write_dict(  )
{
    struct Nuitka_FunctionObject *result = Nuitka_Function_New(
        impl_plistlib$$$function_45_write_dict,
        const_str_plain_write_dict,
#if PYTHON_VERSION >= 300
        const_str_digest_9abbcb4730c2592c58f5741917eba8c7,
#endif
        codeobj_4e13ffd4d8633b9daf5c9ed811ff8fef,
        NULL,
#if PYTHON_VERSION >= 300
        NULL,
        NULL,
#endif
        module_plistlib,
        NULL,
        0
    );

    return (PyObject *)result;
}



static PyObject *MAKE_FUNCTION_plistlib$$$function_46_write_array(  )
{
    struct Nuitka_FunctionObject *result = Nuitka_Function_New(
        impl_plistlib$$$function_46_write_array,
        const_str_plain_write_array,
#if PYTHON_VERSION >= 300
        const_str_digest_daab762c4c76ca471d99a7322ef0cb36,
#endif
        codeobj_454dd373f5c99cba8da5eec2ae808a9a,
        NULL,
#if PYTHON_VERSION >= 300
        NULL,
        NULL,
#endif
        module_plistlib,
        NULL,
        0
    );

    return (PyObject *)result;
}



static PyObject *MAKE_FUNCTION_plistlib$$$function_47__is_fmt_xml(  )
{
    struct Nuitka_FunctionObject *result = Nuitka_Function_New(
        impl_plistlib$$$function_47__is_fmt_xml,
        const_str_plain__is_fmt_xml,
#if PYTHON_VERSION >= 300
        NULL,
#endif
        codeobj_dafd355cb1f2b6e746cd6dd919a0797d,
        NULL,
#if PYTHON_VERSION >= 300
        NULL,
        NULL,
#endif
        module_plistlib,
        NULL,
        0
    );

    return (PyObject *)result;
}



static PyObject *MAKE_FUNCTION_plistlib$$$function_48___init__( PyObject *defaults )
{
    struct Nuitka_FunctionObject *result = Nuitka_Function_New(
        impl_plistlib$$$function_48___init__,
        const_str_plain___init__,
#if PYTHON_VERSION >= 300
        const_str_digest_9d915ddb152ecaa439ec97699234e5a3,
#endif
        codeobj_8251681e754e9889f9bbf45825113951,
        defaults,
#if PYTHON_VERSION >= 300
        NULL,
        NULL,
#endif
        module_plistlib,
        NULL,
        0
    );

    return (PyObject *)result;
}



static PyObject *MAKE_FUNCTION_plistlib$$$function_49___init__(  )
{
    struct Nuitka_FunctionObject *result = Nuitka_Function_New(
        impl_plistlib$$$function_49___init__,
        const_str_plain___init__,
#if PYTHON_VERSION >= 300
        const_str_digest_c1047800c0437512bd9b2438244faa57,
#endif
        codeobj_3a1d2301131a3b19b93316b3230ee924,
        NULL,
#if PYTHON_VERSION >= 300
        NULL,
        NULL,
#endif
        module_plistlib,
        NULL,
        0
    );

    return (PyObject *)result;
}



static PyObject *MAKE_FUNCTION_plistlib$$$function_4_readPlistFromBytes(  )
{
    struct Nuitka_FunctionObject *result = Nuitka_Function_New(
        impl_plistlib$$$function_4_readPlistFromBytes,
        const_str_plain_readPlistFromBytes,
#if PYTHON_VERSION >= 300
        NULL,
#endif
        codeobj_f619f06bf75def1d2791a7f0bc383d26,
        NULL,
#if PYTHON_VERSION >= 300
        NULL,
        NULL,
#endif
        module_plistlib,
        const_str_digest_e66a58b0ebd58c72824db2808901d3e9,
        0
    );

    return (PyObject *)result;
}



static PyObject *MAKE_FUNCTION_plistlib$$$function_50_parse(  )
{
    struct Nuitka_FunctionObject *result = Nuitka_Function_New(
        impl_plistlib$$$function_50_parse,
        const_str_plain_parse,
#if PYTHON_VERSION >= 300
        const_str_digest_6153138c885a517dff97b435623517b4,
#endif
        codeobj_f6994825c2e6565735c8665b48060b34,
        NULL,
#if PYTHON_VERSION >= 300
        NULL,
        NULL,
#endif
        module_plistlib,
        NULL,
        0
    );

    return (PyObject *)result;
}



static PyObject *MAKE_FUNCTION_plistlib$$$function_51__get_size(  )
{
    struct Nuitka_FunctionObject *result = Nuitka_Function_New(
        impl_plistlib$$$function_51__get_size,
        const_str_plain__get_size,
#if PYTHON_VERSION >= 300
        const_str_digest_ea1fa55ed2e0192d31493e4bfcf4471f,
#endif
        codeobj_933cff0e6c2cdec9aff47fca315f05bb,
        NULL,
#if PYTHON_VERSION >= 300
        NULL,
        NULL,
#endif
        module_plistlib,
        const_str_digest_93db4cc720679c16c4810fecd5e3e28c,
        0
    );

    return (PyObject *)result;
}



static PyObject *MAKE_FUNCTION_plistlib$$$function_52__read_ints(  )
{
    struct Nuitka_FunctionObject *result = Nuitka_Function_New(
        impl_plistlib$$$function_52__read_ints,
        const_str_plain__read_ints,
#if PYTHON_VERSION >= 300
        const_str_digest_8d62357ffcb3fc7ced7c1530d09de881,
#endif
        codeobj_71f53baa965bdab6179a073e81d75811,
        NULL,
#if PYTHON_VERSION >= 300
        NULL,
        NULL,
#endif
        module_plistlib,
        NULL,
        0
    );

    return (PyObject *)result;
}



static PyObject *MAKE_FUNCTION_plistlib$$$function_53__read_refs(  )
{
    struct Nuitka_FunctionObject *result = Nuitka_Function_New(
        impl_plistlib$$$function_53__read_refs,
        const_str_plain__read_refs,
#if PYTHON_VERSION >= 300
        const_str_digest_a5d06843ffb0b436ec51dd55af67c502,
#endif
        codeobj_b755b67a5fe4586c6fe186a1c960c2e2,
        NULL,
#if PYTHON_VERSION >= 300
        NULL,
        NULL,
#endif
        module_plistlib,
        NULL,
        0
    );

    return (PyObject *)result;
}



static PyObject *MAKE_FUNCTION_plistlib$$$function_54__read_object(  )
{
    struct Nuitka_FunctionObject *result = Nuitka_Function_New(
        impl_plistlib$$$function_54__read_object,
        const_str_plain__read_object,
#if PYTHON_VERSION >= 300
        const_str_digest_bb6534566f5b003bfb322d5b174e21cf,
#endif
        codeobj_1bf1851e5e22923611966fe471a992e2,
        NULL,
#if PYTHON_VERSION >= 300
        NULL,
        NULL,
#endif
        module_plistlib,
        const_str_digest_319c1a717878e014ecb8fc79474aef31,
        0
    );

    return (PyObject *)result;
}



static PyObject *MAKE_FUNCTION_plistlib$$$function_55__count_to_size(  )
{
    struct Nuitka_FunctionObject *result = Nuitka_Function_New(
        impl_plistlib$$$function_55__count_to_size,
        const_str_plain__count_to_size,
#if PYTHON_VERSION >= 300
        NULL,
#endif
        codeobj_927a7a355580569d3e630a4925f287a3,
        NULL,
#if PYTHON_VERSION >= 300
        NULL,
        NULL,
#endif
        module_plistlib,
        NULL,
        0
    );

    return (PyObject *)result;
}



static PyObject *MAKE_FUNCTION_plistlib$$$function_56___init__(  )
{
    struct Nuitka_FunctionObject *result = Nuitka_Function_New(
        impl_plistlib$$$function_56___init__,
        const_str_plain___init__,
#if PYTHON_VERSION >= 300
        const_str_digest_b729e27145963e501b74d8c5bd73c01b,
#endif
        codeobj_622e7b07b6a23e8e10ca6224584ec87f,
        NULL,
#if PYTHON_VERSION >= 300
        NULL,
        NULL,
#endif
        module_plistlib,
        NULL,
        0
    );

    return (PyObject *)result;
}



static PyObject *MAKE_FUNCTION_plistlib$$$function_57_write(  )
{
    struct Nuitka_FunctionObject *result = Nuitka_Function_New(
        impl_plistlib$$$function_57_write,
        const_str_plain_write,
#if PYTHON_VERSION >= 300
        const_str_digest_e38d98d8b95676efcd76bd78912c93d4,
#endif
        codeobj_f1c231a35a21038f690c7692c030f1ba,
        NULL,
#if PYTHON_VERSION >= 300
        NULL,
        NULL,
#endif
        module_plistlib,
        NULL,
        0
    );

    return (PyObject *)result;
}



static PyObject *MAKE_FUNCTION_plistlib$$$function_58__flatten(  )
{
    struct Nuitka_FunctionObject *result = Nuitka_Function_New(
        impl_plistlib$$$function_58__flatten,
        const_str_plain__flatten,
#if PYTHON_VERSION >= 300
        const_str_digest_804a38dc1a83365cac5b477b7440f5b1,
#endif
        codeobj_a6aec4ddff54c70832a6d33f1dce40fd,
        NULL,
#if PYTHON_VERSION >= 300
        NULL,
        NULL,
#endif
        module_plistlib,
        NULL,
        0
    );

    return (PyObject *)result;
}



static PyObject *MAKE_FUNCTION_plistlib$$$function_59__getrefnum(  )
{
    struct Nuitka_FunctionObject *result = Nuitka_Function_New(
        impl_plistlib$$$function_59__getrefnum,
        const_str_plain__getrefnum,
#if PYTHON_VERSION >= 300
        const_str_digest_407f44c0f2b9d8aa40f83eef14d23ffc,
#endif
        codeobj_fb43eab1ae27c6acb6e7038c52d00258,
        NULL,
#if PYTHON_VERSION >= 300
        NULL,
        NULL,
#endif
        module_plistlib,
        NULL,
        0
    );

    return (PyObject *)result;
}



static PyObject *MAKE_FUNCTION_plistlib$$$function_5_writePlistToBytes(  )
{
    struct Nuitka_FunctionObject *result = Nuitka_Function_New(
        impl_plistlib$$$function_5_writePlistToBytes,
        const_str_plain_writePlistToBytes,
#if PYTHON_VERSION >= 300
        NULL,
#endif
        codeobj_3e8551b09cd55b45e9d831e24972fa46,
        NULL,
#if PYTHON_VERSION >= 300
        NULL,
        NULL,
#endif
        module_plistlib,
        const_str_digest_5a6bc68f62f243e5febb003858df9a4d,
        0
    );

    return (PyObject *)result;
}



static PyObject *MAKE_FUNCTION_plistlib$$$function_60__write_size(  )
{
    struct Nuitka_FunctionObject *result = Nuitka_Function_New(
        impl_plistlib$$$function_60__write_size,
        const_str_plain__write_size,
#if PYTHON_VERSION >= 300
        const_str_digest_bf0bf6f703a8834292a72b83227d2c09,
#endif
        codeobj_e300c162d27a6a43dc187281e877cd78,
        NULL,
#if PYTHON_VERSION >= 300
        NULL,
        NULL,
#endif
        module_plistlib,
        NULL,
        0
    );

    return (PyObject *)result;
}



static PyObject *MAKE_FUNCTION_plistlib$$$function_61__write_object(  )
{
    struct Nuitka_FunctionObject *result = Nuitka_Function_New(
        impl_plistlib$$$function_61__write_object,
        const_str_plain__write_object,
#if PYTHON_VERSION >= 300
        const_str_digest_ce1af1d930c7b52b9dba2b47a65ffee8,
#endif
        codeobj_edf236a14f5145c2001a5486f9240237,
        NULL,
#if PYTHON_VERSION >= 300
        NULL,
        NULL,
#endif
        module_plistlib,
        NULL,
        0
    );

    return (PyObject *)result;
}



static PyObject *MAKE_FUNCTION_plistlib$$$function_62__is_fmt_binary(  )
{
    struct Nuitka_FunctionObject *result = Nuitka_Function_New(
        impl_plistlib$$$function_62__is_fmt_binary,
        const_str_plain__is_fmt_binary,
#if PYTHON_VERSION >= 300
        NULL,
#endif
        codeobj_c4ab7b1151dc1dc8ba211fdaa8810c05,
        NULL,
#if PYTHON_VERSION >= 300
        NULL,
        NULL,
#endif
        module_plistlib,
        NULL,
        0
    );

    return (PyObject *)result;
}



static PyObject *MAKE_FUNCTION_plistlib$$$function_63_load( PyObject *kw_defaults )
{
    struct Nuitka_FunctionObject *result = Nuitka_Function_New(
        impl_plistlib$$$function_63_load,
        const_str_plain_load,
#if PYTHON_VERSION >= 300
        NULL,
#endif
        codeobj_5bd748325e1b93cb6ac76b1377ec42c1,
        NULL,
#if PYTHON_VERSION >= 300
        kw_defaults,
        NULL,
#endif
        module_plistlib,
        const_str_digest_c8c657a818eac5840fa113aebcb51682,
        0
    );

    return (PyObject *)result;
}



static PyObject *MAKE_FUNCTION_plistlib$$$function_64_loads( PyObject *kw_defaults )
{
    struct Nuitka_FunctionObject *result = Nuitka_Function_New(
        impl_plistlib$$$function_64_loads,
        const_str_plain_loads,
#if PYTHON_VERSION >= 300
        NULL,
#endif
        codeobj_d27062a5a768bed0b64c62e12915c34e,
        NULL,
#if PYTHON_VERSION >= 300
        kw_defaults,
        NULL,
#endif
        module_plistlib,
        const_str_digest_509d2c061e910144dad29e294d0e99af,
        0
    );

    return (PyObject *)result;
}



static PyObject *MAKE_FUNCTION_plistlib$$$function_65_dump( PyObject *kw_defaults )
{
    struct Nuitka_FunctionObject *result = Nuitka_Function_New(
        impl_plistlib$$$function_65_dump,
        const_str_plain_dump,
#if PYTHON_VERSION >= 300
        NULL,
#endif
        codeobj_9f3aee96bd74e937729a5c400a418f8d,
        NULL,
#if PYTHON_VERSION >= 300
        kw_defaults,
        NULL,
#endif
        module_plistlib,
        const_str_digest_b88ec066015c7720232071fa9e175d13,
        0
    );

    return (PyObject *)result;
}



static PyObject *MAKE_FUNCTION_plistlib$$$function_66_dumps( PyObject *kw_defaults )
{
    struct Nuitka_FunctionObject *result = Nuitka_Function_New(
        impl_plistlib$$$function_66_dumps,
        const_str_plain_dumps,
#if PYTHON_VERSION >= 300
        NULL,
#endif
        codeobj_f3a77dd01f75c2e6f726a302d6653c9b,
        NULL,
#if PYTHON_VERSION >= 300
        kw_defaults,
        NULL,
#endif
        module_plistlib,
        const_str_digest_fa131f0d55baa8ff96752bf4d0d75d8b,
        0
    );

    return (PyObject *)result;
}



static PyObject *MAKE_FUNCTION_plistlib$$$function_6___init__(  )
{
    struct Nuitka_FunctionObject *result = Nuitka_Function_New(
        impl_plistlib$$$function_6___init__,
        const_str_plain___init__,
#if PYTHON_VERSION >= 300
        const_str_digest_7b6f2dcaf0f7afb26874dc91eb48fdfd,
#endif
        codeobj_9aef60c55aaa42e7bdc318a827042dc2,
        NULL,
#if PYTHON_VERSION >= 300
        NULL,
        NULL,
#endif
        module_plistlib,
        NULL,
        0
    );

    return (PyObject *)result;
}



static PyObject *MAKE_FUNCTION_plistlib$$$function_7_fromBase64(  )
{
    struct Nuitka_FunctionObject *result = Nuitka_Function_New(
        impl_plistlib$$$function_7_fromBase64,
        const_str_plain_fromBase64,
#if PYTHON_VERSION >= 300
        const_str_digest_f8bafc552baab4cac1e232d282cdb986,
#endif
        codeobj_5052dea2b041b2538c399c0901792c9e,
        NULL,
#if PYTHON_VERSION >= 300
        NULL,
        NULL,
#endif
        module_plistlib,
        NULL,
        0
    );

    return (PyObject *)result;
}



static PyObject *MAKE_FUNCTION_plistlib$$$function_8_asBase64( PyObject *defaults )
{
    struct Nuitka_FunctionObject *result = Nuitka_Function_New(
        impl_plistlib$$$function_8_asBase64,
        const_str_plain_asBase64,
#if PYTHON_VERSION >= 300
        const_str_digest_7595143d13e16374aae8a97c18af4a93,
#endif
        codeobj_1f8721614f27c95ef32954e497ba091f,
        defaults,
#if PYTHON_VERSION >= 300
        NULL,
        NULL,
#endif
        module_plistlib,
        NULL,
        0
    );

    return (PyObject *)result;
}



static PyObject *MAKE_FUNCTION_plistlib$$$function_9___eq__(  )
{
    struct Nuitka_FunctionObject *result = Nuitka_Function_New(
        impl_plistlib$$$function_9___eq__,
        const_str_plain___eq__,
#if PYTHON_VERSION >= 300
        const_str_digest_0884d2cecf7ee3c4477d68aebb70615a,
#endif
        codeobj_b1f25262fbfc33eb3f345501504bd8f8,
        NULL,
#if PYTHON_VERSION >= 300
        NULL,
        NULL,
#endif
        module_plistlib,
        NULL,
        0
    );

    return (PyObject *)result;
}



#if PYTHON_VERSION >= 300
static struct PyModuleDef mdef_plistlib =
{
    PyModuleDef_HEAD_INIT,
    "plistlib",
    NULL,                /* m_doc */
    -1,                  /* m_size */
    NULL,                /* m_methods */
    NULL,                /* m_reload */
    NULL,                /* m_traverse */
    NULL,                /* m_clear */
    NULL,                /* m_free */
  };
#endif

extern PyObject *const_str_plain___compiled__;

extern PyObject *const_str_plain___package__;

#if PYTHON_VERSION >= 300
extern PyObject *const_str_dot;
extern PyObject *const_str_plain___loader__;
#endif

#if PYTHON_VERSION >= 340
extern PyObject *const_str_plain___spec__;
extern PyObject *const_str_plain__initializing;
extern PyObject *const_str_plain_submodule_search_locations;
#endif

extern void _initCompiledCellType();
extern void _initCompiledGeneratorType();
extern void _initCompiledFunctionType();
extern void _initCompiledMethodType();
extern void _initCompiledFrameType();
#if PYTHON_VERSION >= 350
extern void _initCompiledCoroutineTypes();
#endif
#if PYTHON_VERSION >= 360
extern void _initCompiledAsyncgenTypes();
#endif

extern PyTypeObject Nuitka_Loader_Type;

// The exported interface to CPython. On import of the module, this function
// gets called. It has to have an exact function name, in cases it's a shared
// library export. This is hidden behind the MOD_INIT_DECL.

MOD_INIT_DECL( plistlib )
{
#if defined(_NUITKA_EXE) || PYTHON_VERSION >= 300
    static bool _init_done = false;

    // Modules might be imported repeatedly, which is to be ignored.
    if ( _init_done )
    {
        return MOD_RETURN_VALUE( module_plistlib );
    }
    else
    {
        _init_done = true;
    }
#endif

#ifdef _NUITKA_MODULE
    // In case of a stand alone extension module, need to call initialization
    // the init here because that's the first and only time we are going to get
    // called here.

    // Initialize the constant values used.
    _initBuiltinModule();
    createGlobalConstants();

    /* Initialize the compiled types of Nuitka. */
    _initCompiledCellType();
    _initCompiledGeneratorType();
    _initCompiledFunctionType();
    _initCompiledMethodType();
    _initCompiledFrameType();
#if PYTHON_VERSION >= 350
    _initCompiledCoroutineTypes();
#endif
#if PYTHON_VERSION >= 360
    _initCompiledAsyncgenTypes();
#endif

#if PYTHON_VERSION < 300
    _initSlotCompare();
#endif
#if PYTHON_VERSION >= 270
    _initSlotIternext();
#endif

    patchBuiltinModule();
    patchTypeComparison();

    // Enable meta path based loader if not already done.
#ifdef _NUITKA_TRACE
    puts("plistlib: Calling setupMetaPathBasedLoader().");
#endif
    setupMetaPathBasedLoader();

#if PYTHON_VERSION >= 300
    patchInspectModule();
#endif

#endif

    /* The constants only used by this module are created now. */
#ifdef _NUITKA_TRACE
    puts("plistlib: Calling createModuleConstants().");
#endif
    createModuleConstants();

    /* The code objects used by this module are created now. */
#ifdef _NUITKA_TRACE
    puts("plistlib: Calling createModuleCodeObjects().");
#endif
    createModuleCodeObjects();

    // puts( "in initplistlib" );

    // Create the module object first. There are no methods initially, all are
    // added dynamically in actual code only.  Also no "__doc__" is initially
    // set at this time, as it could not contain NUL characters this way, they
    // are instead set in early module code.  No "self" for modules, we have no
    // use for it.
#if PYTHON_VERSION < 300
    module_plistlib = Py_InitModule4(
        "plistlib",       // Module Name
        NULL,                    // No methods initially, all are added
                                 // dynamically in actual module code only.
        NULL,                    // No "__doc__" is initially set, as it could
                                 // not contain NUL this way, added early in
                                 // actual code.
        NULL,                    // No self for modules, we don't use it.
        PYTHON_API_VERSION
    );
#else

    module_plistlib = PyModule_Create( &mdef_plistlib );
#endif

    moduledict_plistlib = MODULE_DICT( module_plistlib );

    // Set __compiled__ to what it we know.
    UPDATE_STRING_DICT1(
        moduledict_plistlib,
        (Nuitka_StringObject *)const_str_plain___compiled__,
        Nuitka_dunder_compiled_value
    );

    // Update "__package__" value to what it ought to be.
    {
#if 0
        PyObject *module_name = GET_STRING_DICT_VALUE( moduledict_plistlib, (Nuitka_StringObject *)const_str_plain___name__ );

        UPDATE_STRING_DICT1(
            moduledict_plistlib,
            (Nuitka_StringObject *)const_str_plain___package__,
            module_name
        );
#else

#if PYTHON_VERSION < 300
        PyObject *module_name = GET_STRING_DICT_VALUE( moduledict_plistlib, (Nuitka_StringObject *)const_str_plain___name__ );
        char const *module_name_cstr = PyString_AS_STRING( module_name );

        char const *last_dot = strrchr( module_name_cstr, '.' );

        if ( last_dot != NULL )
        {
            UPDATE_STRING_DICT1(
                moduledict_plistlib,
                (Nuitka_StringObject *)const_str_plain___package__,
                PyString_FromStringAndSize( module_name_cstr, last_dot - module_name_cstr )
            );
        }
#else
        PyObject *module_name = GET_STRING_DICT_VALUE( moduledict_plistlib, (Nuitka_StringObject *)const_str_plain___name__ );
        Py_ssize_t dot_index = PyUnicode_Find( module_name, const_str_dot, 0, PyUnicode_GetLength( module_name ), -1 );

        if ( dot_index != -1 )
        {
            UPDATE_STRING_DICT1(
                moduledict_plistlib,
                (Nuitka_StringObject *)const_str_plain___package__,
                PyUnicode_Substring( module_name, 0, dot_index )
            );
        }
#endif
#endif
    }

    CHECK_OBJECT( module_plistlib );

// Seems to work for Python2.7 out of the box, but for Python3, the module
// doesn't automatically enter "sys.modules", so do it manually.
#if PYTHON_VERSION >= 300
    {
        int r = PyObject_SetItem( PyImport_GetModuleDict(), const_str_plain_plistlib, module_plistlib );

        assert( r != -1 );
    }
#endif

    // For deep importing of a module we need to have "__builtins__", so we set
    // it ourselves in the same way than CPython does. Note: This must be done
    // before the frame object is allocated, or else it may fail.

    if ( GET_STRING_DICT_VALUE( moduledict_plistlib, (Nuitka_StringObject *)const_str_plain___builtins__ ) == NULL )
    {
        PyObject *value = (PyObject *)builtin_module;

        // Check if main module, not a dict then but the module itself.
#if !defined(_NUITKA_EXE) || !0
        value = PyModule_GetDict( value );
#endif

        UPDATE_STRING_DICT0( moduledict_plistlib, (Nuitka_StringObject *)const_str_plain___builtins__, value );
    }

#if PYTHON_VERSION >= 300
    UPDATE_STRING_DICT0( moduledict_plistlib, (Nuitka_StringObject *)const_str_plain___loader__, (PyObject *)&Nuitka_Loader_Type );
#endif

#if PYTHON_VERSION >= 340
// Set the "__spec__" value

#if 0
    // Main modules just get "None" as spec.
    UPDATE_STRING_DICT0( moduledict_plistlib, (Nuitka_StringObject *)const_str_plain___spec__, Py_None );
#else
    // Other modules get a "ModuleSpec" from the standard mechanism.
    {
        PyObject *bootstrap_module = PyImport_ImportModule("importlib._bootstrap");
        CHECK_OBJECT( bootstrap_module );
        PyObject *module_spec_class = PyObject_GetAttrString( bootstrap_module, "ModuleSpec" );
        Py_DECREF( bootstrap_module );

        PyObject *args[] = {
            GET_STRING_DICT_VALUE( moduledict_plistlib, (Nuitka_StringObject *)const_str_plain___name__ ),
            (PyObject *)&Nuitka_Loader_Type
        };

        PyObject *spec_value = CALL_FUNCTION_WITH_ARGS2(
            module_spec_class,
            args
        );
        Py_DECREF( module_spec_class );

        // We can assume this to never fail, or else we are in trouble anyway.
        CHECK_OBJECT( spec_value );

// For packages set the submodule search locations as well, even if to empty
// list, so investigating code will consider it a package.
#if 0
        SET_ATTRIBUTE( spec_value, const_str_plain_submodule_search_locations, PyList_New(0) );
#endif

// Mark the execution in the "__spec__" value.
        SET_ATTRIBUTE( spec_value, const_str_plain__initializing, Py_True );

        UPDATE_STRING_DICT1( moduledict_plistlib, (Nuitka_StringObject *)const_str_plain___spec__, spec_value );
    }
#endif
#endif

    // Temp variables if any
    PyObject *outline_0_var___class__ = NULL;
    PyObject *outline_1_var___class__ = NULL;
    PyObject *outline_2_var___class__ = NULL;
    PyObject *outline_3_var___class__ = NULL;
    PyObject *outline_4_var___class__ = NULL;
    PyObject *outline_5_var___class__ = NULL;
    PyObject *outline_6_var___class__ = NULL;
    PyObject *tmp_class_creation_1__class_decl_dict = NULL;
    PyObject *tmp_class_creation_1__metaclass = NULL;
    PyObject *tmp_class_creation_1__prepared = NULL;
    PyObject *tmp_class_creation_2__class_decl_dict = NULL;
    PyObject *tmp_class_creation_2__metaclass = NULL;
    PyObject *tmp_class_creation_2__prepared = NULL;
    PyObject *tmp_class_creation_3__class_decl_dict = NULL;
    PyObject *tmp_class_creation_3__metaclass = NULL;
    PyObject *tmp_class_creation_3__prepared = NULL;
    PyObject *tmp_class_creation_4__bases = NULL;
    PyObject *tmp_class_creation_4__bases_orig = NULL;
    PyObject *tmp_class_creation_4__class_decl_dict = NULL;
    PyObject *tmp_class_creation_4__metaclass = NULL;
    PyObject *tmp_class_creation_4__prepared = NULL;
    PyObject *tmp_class_creation_5__bases = NULL;
    PyObject *tmp_class_creation_5__class_decl_dict = NULL;
    PyObject *tmp_class_creation_5__metaclass = NULL;
    PyObject *tmp_class_creation_5__prepared = NULL;
    PyObject *tmp_class_creation_6__class_decl_dict = NULL;
    PyObject *tmp_class_creation_6__metaclass = NULL;
    PyObject *tmp_class_creation_6__prepared = NULL;
    PyObject *tmp_class_creation_7__bases = NULL;
    PyObject *tmp_class_creation_7__class_decl_dict = NULL;
    PyObject *tmp_class_creation_7__metaclass = NULL;
    PyObject *tmp_class_creation_7__prepared = NULL;
    struct Nuitka_FrameObject *frame_6a6219654a078aede7e40aaccdae8e56;
    NUITKA_MAY_BE_UNUSED char const *type_description_1 = NULL;
    bool tmp_result;
    PyObject *exception_type = NULL;
    PyObject *exception_value = NULL;
    PyTracebackObject *exception_tb = NULL;
    NUITKA_MAY_BE_UNUSED int exception_lineno = 0;
    int tmp_res;
    PyObject *tmp_dictdel_dict;
    PyObject *tmp_dictdel_key;
    PyObject *locals_plistlib_139 = NULL;
    PyObject *tmp_dictset_value;
    struct Nuitka_FrameObject *frame_4f9522afa0b8e72f782625388c8d1967_2;
    NUITKA_MAY_BE_UNUSED char const *type_description_2 = NULL;
    static struct Nuitka_FrameObject *cache_frame_4f9522afa0b8e72f782625388c8d1967_2 = NULL;
    PyObject *exception_keeper_type_1;
    PyObject *exception_keeper_value_1;
    PyTracebackObject *exception_keeper_tb_1;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_1;
    PyObject *exception_keeper_type_2;
    PyObject *exception_keeper_value_2;
    PyTracebackObject *exception_keeper_tb_2;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_2;
    PyObject *exception_keeper_type_3;
    PyObject *exception_keeper_value_3;
    PyTracebackObject *exception_keeper_tb_3;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_3;
    PyObject *locals_plistlib_247 = NULL;
    struct Nuitka_FrameObject *frame_e67d9a4f703826ca272037e679cd200c_3;
    NUITKA_MAY_BE_UNUSED char const *type_description_3 = NULL;
    static struct Nuitka_FrameObject *cache_frame_e67d9a4f703826ca272037e679cd200c_3 = NULL;
    PyObject *exception_keeper_type_4;
    PyObject *exception_keeper_value_4;
    PyTracebackObject *exception_keeper_tb_4;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_4;
    PyObject *exception_keeper_type_5;
    PyObject *exception_keeper_value_5;
    PyTracebackObject *exception_keeper_tb_5;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_5;
    PyObject *exception_keeper_type_6;
    PyObject *exception_keeper_value_6;
    PyTracebackObject *exception_keeper_tb_6;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_6;
    PyObject *locals_plistlib_351 = NULL;
    struct Nuitka_FrameObject *frame_d7b3abeaeedf39c2eb398bdd3372b84e_4;
    NUITKA_MAY_BE_UNUSED char const *type_description_4 = NULL;
    static struct Nuitka_FrameObject *cache_frame_d7b3abeaeedf39c2eb398bdd3372b84e_4 = NULL;
    PyObject *exception_keeper_type_7;
    PyObject *exception_keeper_value_7;
    PyTracebackObject *exception_keeper_tb_7;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_7;
    PyObject *exception_keeper_type_8;
    PyObject *exception_keeper_value_8;
    PyTracebackObject *exception_keeper_tb_8;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_8;
    PyObject *exception_keeper_type_9;
    PyObject *exception_keeper_value_9;
    PyTracebackObject *exception_keeper_tb_9;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_9;
    PyObject *locals_plistlib_389 = NULL;
    struct Nuitka_FrameObject *frame_cbfca6005e13c074f5180327fa6b5639_5;
    NUITKA_MAY_BE_UNUSED char const *type_description_5 = NULL;
    static struct Nuitka_FrameObject *cache_frame_cbfca6005e13c074f5180327fa6b5639_5 = NULL;
    PyObject *exception_keeper_type_10;
    PyObject *exception_keeper_value_10;
    PyTracebackObject *exception_keeper_tb_10;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_10;
    PyObject *exception_keeper_type_11;
    PyObject *exception_keeper_value_11;
    PyTracebackObject *exception_keeper_tb_11;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_11;
    PyObject *exception_keeper_type_12;
    PyObject *exception_keeper_value_12;
    PyTracebackObject *exception_keeper_tb_12;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_12;
    PyObject *locals_plistlib_522 = NULL;
    struct Nuitka_FrameObject *frame_0ee0e62e2cf347fc328cca3af8db7ad8_6;
    NUITKA_MAY_BE_UNUSED char const *type_description_6 = NULL;
    static struct Nuitka_FrameObject *cache_frame_0ee0e62e2cf347fc328cca3af8db7ad8_6 = NULL;
    PyObject *exception_keeper_type_13;
    PyObject *exception_keeper_value_13;
    PyTracebackObject *exception_keeper_tb_13;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_13;
    PyObject *exception_keeper_type_14;
    PyObject *exception_keeper_value_14;
    PyTracebackObject *exception_keeper_tb_14;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_14;
    PyObject *exception_keeper_type_15;
    PyObject *exception_keeper_value_15;
    PyTracebackObject *exception_keeper_tb_15;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_15;
    PyObject *locals_plistlib_530 = NULL;
    struct Nuitka_FrameObject *frame_b7ec1aac708d028b6f1d124365549dc4_7;
    NUITKA_MAY_BE_UNUSED char const *type_description_7 = NULL;
    static struct Nuitka_FrameObject *cache_frame_b7ec1aac708d028b6f1d124365549dc4_7 = NULL;
    PyObject *exception_keeper_type_16;
    PyObject *exception_keeper_value_16;
    PyTracebackObject *exception_keeper_tb_16;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_16;
    PyObject *exception_keeper_type_17;
    PyObject *exception_keeper_value_17;
    PyTracebackObject *exception_keeper_tb_17;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_17;
    PyObject *exception_keeper_type_18;
    PyObject *exception_keeper_value_18;
    PyTracebackObject *exception_keeper_tb_18;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_18;
    PyObject *locals_plistlib_699 = NULL;
    struct Nuitka_FrameObject *frame_5e97e27e88e3107c75e82e003d130761_8;
    NUITKA_MAY_BE_UNUSED char const *type_description_8 = NULL;
    static struct Nuitka_FrameObject *cache_frame_5e97e27e88e3107c75e82e003d130761_8 = NULL;
    PyObject *exception_keeper_type_19;
    PyObject *exception_keeper_value_19;
    PyTracebackObject *exception_keeper_tb_19;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_19;
    PyObject *exception_keeper_type_20;
    PyObject *exception_keeper_value_20;
    PyTracebackObject *exception_keeper_tb_20;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_20;
    PyObject *exception_keeper_type_21;
    PyObject *exception_keeper_value_21;
    PyTracebackObject *exception_keeper_tb_21;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_21;

    // Module code.
    {
        PyObject *tmp_assign_source_1;
        tmp_assign_source_1 = const_str_digest_19a40d89232ab3046ca85b82add92df5;
        UPDATE_STRING_DICT0( moduledict_plistlib, (Nuitka_StringObject *)const_str_plain___doc__, tmp_assign_source_1 );
    }
    {
        PyObject *tmp_assign_source_2;
        tmp_assign_source_2 = module_filename_obj;
        UPDATE_STRING_DICT0( moduledict_plistlib, (Nuitka_StringObject *)const_str_plain___file__, tmp_assign_source_2 );
    }
    // Frame without reuse.
    frame_6a6219654a078aede7e40aaccdae8e56 = MAKE_MODULE_FRAME( codeobj_6a6219654a078aede7e40aaccdae8e56, module_plistlib );

    // Push the new frame as the currently active one, and we should be exclusively
    // owning it.
    pushFrameStack( frame_6a6219654a078aede7e40aaccdae8e56 );
    assert( Py_REFCNT( frame_6a6219654a078aede7e40aaccdae8e56 ) == 2 );

    // Framed code:
    {
        PyObject *tmp_assattr_name_1;
        PyObject *tmp_assattr_target_1;
        PyObject *tmp_mvar_value_1;
        tmp_assattr_name_1 = module_filename_obj;
        tmp_mvar_value_1 = GET_STRING_DICT_VALUE( moduledict_plistlib, (Nuitka_StringObject *)const_str_plain___spec__ );

        if (unlikely( tmp_mvar_value_1 == NULL ))
        {
            tmp_mvar_value_1 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain___spec__ );
        }

        CHECK_OBJECT( tmp_mvar_value_1 );
        tmp_assattr_target_1 = tmp_mvar_value_1;
        tmp_result = SET_ATTRIBUTE( tmp_assattr_target_1, const_str_plain_origin, tmp_assattr_name_1 );
        if ( tmp_result == false )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 1;

            goto frame_exception_exit_1;
        }
    }
    {
        PyObject *tmp_assattr_name_2;
        PyObject *tmp_assattr_target_2;
        PyObject *tmp_mvar_value_2;
        tmp_assattr_name_2 = Py_True;
        tmp_mvar_value_2 = GET_STRING_DICT_VALUE( moduledict_plistlib, (Nuitka_StringObject *)const_str_plain___spec__ );

        if (unlikely( tmp_mvar_value_2 == NULL ))
        {
            tmp_mvar_value_2 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain___spec__ );
        }

        CHECK_OBJECT( tmp_mvar_value_2 );
        tmp_assattr_target_2 = tmp_mvar_value_2;
        tmp_result = SET_ATTRIBUTE( tmp_assattr_target_2, const_str_plain_has_location, tmp_assattr_name_2 );
        if ( tmp_result == false )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 1;

            goto frame_exception_exit_1;
        }
    }
    {
        PyObject *tmp_assign_source_3;
        tmp_assign_source_3 = Py_None;
        UPDATE_STRING_DICT0( moduledict_plistlib, (Nuitka_StringObject *)const_str_plain___cached__, tmp_assign_source_3 );
    }
    {
        PyObject *tmp_assign_source_4;
        tmp_assign_source_4 = LIST_COPY( const_list_4c2fb79125cde76e7e3b3847734701ed_list );
        UPDATE_STRING_DICT1( moduledict_plistlib, (Nuitka_StringObject *)const_str_plain___all__, tmp_assign_source_4 );
    }
    {
        PyObject *tmp_assign_source_5;
        PyObject *tmp_name_name_1;
        PyObject *tmp_globals_name_1;
        PyObject *tmp_locals_name_1;
        PyObject *tmp_fromlist_name_1;
        PyObject *tmp_level_name_1;
        tmp_name_name_1 = const_str_plain_binascii;
        tmp_globals_name_1 = (PyObject *)moduledict_plistlib;
        tmp_locals_name_1 = Py_None;
        tmp_fromlist_name_1 = Py_None;
        tmp_level_name_1 = const_int_0;
        frame_6a6219654a078aede7e40aaccdae8e56->m_frame.f_lineno = 54;
        tmp_assign_source_5 = IMPORT_MODULE5( tmp_name_name_1, tmp_globals_name_1, tmp_locals_name_1, tmp_fromlist_name_1, tmp_level_name_1 );
        assert( !(tmp_assign_source_5 == NULL) );
        UPDATE_STRING_DICT1( moduledict_plistlib, (Nuitka_StringObject *)const_str_plain_binascii, tmp_assign_source_5 );
    }
    {
        PyObject *tmp_assign_source_6;
        PyObject *tmp_name_name_2;
        PyObject *tmp_globals_name_2;
        PyObject *tmp_locals_name_2;
        PyObject *tmp_fromlist_name_2;
        PyObject *tmp_level_name_2;
        tmp_name_name_2 = const_str_plain_codecs;
        tmp_globals_name_2 = (PyObject *)moduledict_plistlib;
        tmp_locals_name_2 = Py_None;
        tmp_fromlist_name_2 = Py_None;
        tmp_level_name_2 = const_int_0;
        frame_6a6219654a078aede7e40aaccdae8e56->m_frame.f_lineno = 55;
        tmp_assign_source_6 = IMPORT_MODULE5( tmp_name_name_2, tmp_globals_name_2, tmp_locals_name_2, tmp_fromlist_name_2, tmp_level_name_2 );
        if ( tmp_assign_source_6 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 55;

            goto frame_exception_exit_1;
        }
        UPDATE_STRING_DICT1( moduledict_plistlib, (Nuitka_StringObject *)const_str_plain_codecs, tmp_assign_source_6 );
    }
    {
        PyObject *tmp_assign_source_7;
        PyObject *tmp_name_name_3;
        PyObject *tmp_globals_name_3;
        PyObject *tmp_locals_name_3;
        PyObject *tmp_fromlist_name_3;
        PyObject *tmp_level_name_3;
        tmp_name_name_3 = const_str_plain_contextlib;
        tmp_globals_name_3 = (PyObject *)moduledict_plistlib;
        tmp_locals_name_3 = Py_None;
        tmp_fromlist_name_3 = Py_None;
        tmp_level_name_3 = const_int_0;
        frame_6a6219654a078aede7e40aaccdae8e56->m_frame.f_lineno = 56;
        tmp_assign_source_7 = IMPORT_MODULE5( tmp_name_name_3, tmp_globals_name_3, tmp_locals_name_3, tmp_fromlist_name_3, tmp_level_name_3 );
        if ( tmp_assign_source_7 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 56;

            goto frame_exception_exit_1;
        }
        UPDATE_STRING_DICT1( moduledict_plistlib, (Nuitka_StringObject *)const_str_plain_contextlib, tmp_assign_source_7 );
    }
    {
        PyObject *tmp_assign_source_8;
        PyObject *tmp_name_name_4;
        PyObject *tmp_globals_name_4;
        PyObject *tmp_locals_name_4;
        PyObject *tmp_fromlist_name_4;
        PyObject *tmp_level_name_4;
        tmp_name_name_4 = const_str_plain_datetime;
        tmp_globals_name_4 = (PyObject *)moduledict_plistlib;
        tmp_locals_name_4 = Py_None;
        tmp_fromlist_name_4 = Py_None;
        tmp_level_name_4 = const_int_0;
        frame_6a6219654a078aede7e40aaccdae8e56->m_frame.f_lineno = 57;
        tmp_assign_source_8 = IMPORT_MODULE5( tmp_name_name_4, tmp_globals_name_4, tmp_locals_name_4, tmp_fromlist_name_4, tmp_level_name_4 );
        if ( tmp_assign_source_8 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 57;

            goto frame_exception_exit_1;
        }
        UPDATE_STRING_DICT1( moduledict_plistlib, (Nuitka_StringObject *)const_str_plain_datetime, tmp_assign_source_8 );
    }
    {
        PyObject *tmp_assign_source_9;
        PyObject *tmp_name_name_5;
        PyObject *tmp_globals_name_5;
        PyObject *tmp_locals_name_5;
        PyObject *tmp_fromlist_name_5;
        PyObject *tmp_level_name_5;
        tmp_name_name_5 = const_str_plain_enum;
        tmp_globals_name_5 = (PyObject *)moduledict_plistlib;
        tmp_locals_name_5 = Py_None;
        tmp_fromlist_name_5 = Py_None;
        tmp_level_name_5 = const_int_0;
        frame_6a6219654a078aede7e40aaccdae8e56->m_frame.f_lineno = 58;
        tmp_assign_source_9 = IMPORT_MODULE5( tmp_name_name_5, tmp_globals_name_5, tmp_locals_name_5, tmp_fromlist_name_5, tmp_level_name_5 );
        if ( tmp_assign_source_9 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 58;

            goto frame_exception_exit_1;
        }
        UPDATE_STRING_DICT1( moduledict_plistlib, (Nuitka_StringObject *)const_str_plain_enum, tmp_assign_source_9 );
    }
    {
        PyObject *tmp_assign_source_10;
        PyObject *tmp_import_name_from_1;
        PyObject *tmp_name_name_6;
        PyObject *tmp_globals_name_6;
        PyObject *tmp_locals_name_6;
        PyObject *tmp_fromlist_name_6;
        PyObject *tmp_level_name_6;
        tmp_name_name_6 = const_str_plain_io;
        tmp_globals_name_6 = (PyObject *)moduledict_plistlib;
        tmp_locals_name_6 = Py_None;
        tmp_fromlist_name_6 = const_tuple_str_plain_BytesIO_tuple;
        tmp_level_name_6 = const_int_0;
        frame_6a6219654a078aede7e40aaccdae8e56->m_frame.f_lineno = 59;
        tmp_import_name_from_1 = IMPORT_MODULE5( tmp_name_name_6, tmp_globals_name_6, tmp_locals_name_6, tmp_fromlist_name_6, tmp_level_name_6 );
        if ( tmp_import_name_from_1 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 59;

            goto frame_exception_exit_1;
        }
        tmp_assign_source_10 = IMPORT_NAME( tmp_import_name_from_1, const_str_plain_BytesIO );
        Py_DECREF( tmp_import_name_from_1 );
        if ( tmp_assign_source_10 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 59;

            goto frame_exception_exit_1;
        }
        UPDATE_STRING_DICT1( moduledict_plistlib, (Nuitka_StringObject *)const_str_plain_BytesIO, tmp_assign_source_10 );
    }
    {
        PyObject *tmp_assign_source_11;
        PyObject *tmp_name_name_7;
        PyObject *tmp_globals_name_7;
        PyObject *tmp_locals_name_7;
        PyObject *tmp_fromlist_name_7;
        PyObject *tmp_level_name_7;
        tmp_name_name_7 = const_str_plain_itertools;
        tmp_globals_name_7 = (PyObject *)moduledict_plistlib;
        tmp_locals_name_7 = Py_None;
        tmp_fromlist_name_7 = Py_None;
        tmp_level_name_7 = const_int_0;
        frame_6a6219654a078aede7e40aaccdae8e56->m_frame.f_lineno = 60;
        tmp_assign_source_11 = IMPORT_MODULE5( tmp_name_name_7, tmp_globals_name_7, tmp_locals_name_7, tmp_fromlist_name_7, tmp_level_name_7 );
        assert( !(tmp_assign_source_11 == NULL) );
        UPDATE_STRING_DICT1( moduledict_plistlib, (Nuitka_StringObject *)const_str_plain_itertools, tmp_assign_source_11 );
    }
    {
        PyObject *tmp_assign_source_12;
        PyObject *tmp_name_name_8;
        PyObject *tmp_globals_name_8;
        PyObject *tmp_locals_name_8;
        PyObject *tmp_fromlist_name_8;
        PyObject *tmp_level_name_8;
        tmp_name_name_8 = const_str_plain_os;
        tmp_globals_name_8 = (PyObject *)moduledict_plistlib;
        tmp_locals_name_8 = Py_None;
        tmp_fromlist_name_8 = Py_None;
        tmp_level_name_8 = const_int_0;
        frame_6a6219654a078aede7e40aaccdae8e56->m_frame.f_lineno = 61;
        tmp_assign_source_12 = IMPORT_MODULE5( tmp_name_name_8, tmp_globals_name_8, tmp_locals_name_8, tmp_fromlist_name_8, tmp_level_name_8 );
        if ( tmp_assign_source_12 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 61;

            goto frame_exception_exit_1;
        }
        UPDATE_STRING_DICT1( moduledict_plistlib, (Nuitka_StringObject *)const_str_plain_os, tmp_assign_source_12 );
    }
    {
        PyObject *tmp_assign_source_13;
        PyObject *tmp_name_name_9;
        PyObject *tmp_globals_name_9;
        PyObject *tmp_locals_name_9;
        PyObject *tmp_fromlist_name_9;
        PyObject *tmp_level_name_9;
        tmp_name_name_9 = const_str_plain_re;
        tmp_globals_name_9 = (PyObject *)moduledict_plistlib;
        tmp_locals_name_9 = Py_None;
        tmp_fromlist_name_9 = Py_None;
        tmp_level_name_9 = const_int_0;
        frame_6a6219654a078aede7e40aaccdae8e56->m_frame.f_lineno = 62;
        tmp_assign_source_13 = IMPORT_MODULE5( tmp_name_name_9, tmp_globals_name_9, tmp_locals_name_9, tmp_fromlist_name_9, tmp_level_name_9 );
        if ( tmp_assign_source_13 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 62;

            goto frame_exception_exit_1;
        }
        UPDATE_STRING_DICT1( moduledict_plistlib, (Nuitka_StringObject *)const_str_plain_re, tmp_assign_source_13 );
    }
    {
        PyObject *tmp_assign_source_14;
        PyObject *tmp_name_name_10;
        PyObject *tmp_globals_name_10;
        PyObject *tmp_locals_name_10;
        PyObject *tmp_fromlist_name_10;
        PyObject *tmp_level_name_10;
        tmp_name_name_10 = const_str_plain_struct;
        tmp_globals_name_10 = (PyObject *)moduledict_plistlib;
        tmp_locals_name_10 = Py_None;
        tmp_fromlist_name_10 = Py_None;
        tmp_level_name_10 = const_int_0;
        frame_6a6219654a078aede7e40aaccdae8e56->m_frame.f_lineno = 63;
        tmp_assign_source_14 = IMPORT_MODULE5( tmp_name_name_10, tmp_globals_name_10, tmp_locals_name_10, tmp_fromlist_name_10, tmp_level_name_10 );
        if ( tmp_assign_source_14 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 63;

            goto frame_exception_exit_1;
        }
        UPDATE_STRING_DICT1( moduledict_plistlib, (Nuitka_StringObject *)const_str_plain_struct, tmp_assign_source_14 );
    }
    {
        PyObject *tmp_assign_source_15;
        PyObject *tmp_import_name_from_2;
        PyObject *tmp_name_name_11;
        PyObject *tmp_globals_name_11;
        PyObject *tmp_locals_name_11;
        PyObject *tmp_fromlist_name_11;
        PyObject *tmp_level_name_11;
        tmp_name_name_11 = const_str_plain_warnings;
        tmp_globals_name_11 = (PyObject *)moduledict_plistlib;
        tmp_locals_name_11 = Py_None;
        tmp_fromlist_name_11 = const_tuple_str_plain_warn_tuple;
        tmp_level_name_11 = const_int_0;
        frame_6a6219654a078aede7e40aaccdae8e56->m_frame.f_lineno = 64;
        tmp_import_name_from_2 = IMPORT_MODULE5( tmp_name_name_11, tmp_globals_name_11, tmp_locals_name_11, tmp_fromlist_name_11, tmp_level_name_11 );
        if ( tmp_import_name_from_2 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 64;

            goto frame_exception_exit_1;
        }
        tmp_assign_source_15 = IMPORT_NAME( tmp_import_name_from_2, const_str_plain_warn );
        Py_DECREF( tmp_import_name_from_2 );
        if ( tmp_assign_source_15 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 64;

            goto frame_exception_exit_1;
        }
        UPDATE_STRING_DICT1( moduledict_plistlib, (Nuitka_StringObject *)const_str_plain_warn, tmp_assign_source_15 );
    }
    {
        PyObject *tmp_assign_source_16;
        PyObject *tmp_import_name_from_3;
        PyObject *tmp_name_name_12;
        PyObject *tmp_globals_name_12;
        PyObject *tmp_locals_name_12;
        PyObject *tmp_fromlist_name_12;
        PyObject *tmp_level_name_12;
        tmp_name_name_12 = const_str_digest_d7908dd66617c9f5e7c68a06d1603722;
        tmp_globals_name_12 = (PyObject *)moduledict_plistlib;
        tmp_locals_name_12 = Py_None;
        tmp_fromlist_name_12 = const_tuple_str_plain_ParserCreate_tuple;
        tmp_level_name_12 = const_int_0;
        frame_6a6219654a078aede7e40aaccdae8e56->m_frame.f_lineno = 65;
        tmp_import_name_from_3 = IMPORT_MODULE5( tmp_name_name_12, tmp_globals_name_12, tmp_locals_name_12, tmp_fromlist_name_12, tmp_level_name_12 );
        if ( tmp_import_name_from_3 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 65;

            goto frame_exception_exit_1;
        }
        tmp_assign_source_16 = IMPORT_NAME( tmp_import_name_from_3, const_str_plain_ParserCreate );
        Py_DECREF( tmp_import_name_from_3 );
        if ( tmp_assign_source_16 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 65;

            goto frame_exception_exit_1;
        }
        UPDATE_STRING_DICT1( moduledict_plistlib, (Nuitka_StringObject *)const_str_plain_ParserCreate, tmp_assign_source_16 );
    }
    {
        PyObject *tmp_assign_source_17;
        PyObject *tmp_called_name_1;
        PyObject *tmp_source_name_1;
        PyObject *tmp_mvar_value_3;
        PyObject *tmp_args_name_1;
        PyObject *tmp_kw_name_1;
        tmp_mvar_value_3 = GET_STRING_DICT_VALUE( moduledict_plistlib, (Nuitka_StringObject *)const_str_plain_enum );

        if (unlikely( tmp_mvar_value_3 == NULL ))
        {
            tmp_mvar_value_3 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_enum );
        }

        if ( tmp_mvar_value_3 == NULL )
        {

            exception_type = PyExc_NameError;
            Py_INCREF( exception_type );
            exception_value = PyUnicode_FromFormat( "name '%s' is not defined", "enum" );
            exception_tb = NULL;
            NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
            CHAIN_EXCEPTION( exception_value );

            exception_lineno = 68;

            goto frame_exception_exit_1;
        }

        tmp_source_name_1 = tmp_mvar_value_3;
        tmp_called_name_1 = LOOKUP_ATTRIBUTE( tmp_source_name_1, const_str_plain_Enum );
        if ( tmp_called_name_1 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 68;

            goto frame_exception_exit_1;
        }
        tmp_args_name_1 = const_tuple_a7f2679b5a7ee191ec47598e0c252f18_tuple;
        tmp_kw_name_1 = PyDict_Copy( const_dict_31495aba724870ae8e6ca826d32e28fd );
        frame_6a6219654a078aede7e40aaccdae8e56->m_frame.f_lineno = 68;
        tmp_assign_source_17 = CALL_FUNCTION( tmp_called_name_1, tmp_args_name_1, tmp_kw_name_1 );
        Py_DECREF( tmp_called_name_1 );
        Py_DECREF( tmp_kw_name_1 );
        if ( tmp_assign_source_17 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 68;

            goto frame_exception_exit_1;
        }
        UPDATE_STRING_DICT1( moduledict_plistlib, (Nuitka_StringObject *)const_str_plain_PlistFormat, tmp_assign_source_17 );
    }
    {
        PyObject *tmp_called_name_2;
        PyObject *tmp_source_name_2;
        PyObject *tmp_call_result_1;
        PyObject *tmp_args_element_name_1;
        PyObject *tmp_source_name_3;
        PyObject *tmp_mvar_value_4;
        tmp_source_name_2 = (PyObject *)moduledict_plistlib;
        tmp_called_name_2 = LOOKUP_ATTRIBUTE( tmp_source_name_2, const_str_plain_update );
        if ( tmp_called_name_2 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 69;

            goto frame_exception_exit_1;
        }
        tmp_mvar_value_4 = GET_STRING_DICT_VALUE( moduledict_plistlib, (Nuitka_StringObject *)const_str_plain_PlistFormat );

        if (unlikely( tmp_mvar_value_4 == NULL ))
        {
            tmp_mvar_value_4 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_PlistFormat );
        }

        if ( tmp_mvar_value_4 == NULL )
        {
            Py_DECREF( tmp_called_name_2 );
            exception_type = PyExc_NameError;
            Py_INCREF( exception_type );
            exception_value = PyUnicode_FromFormat( "name '%s' is not defined", "PlistFormat" );
            exception_tb = NULL;
            NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
            CHAIN_EXCEPTION( exception_value );

            exception_lineno = 69;

            goto frame_exception_exit_1;
        }

        tmp_source_name_3 = tmp_mvar_value_4;
        tmp_args_element_name_1 = LOOKUP_ATTRIBUTE( tmp_source_name_3, const_str_plain___members__ );
        if ( tmp_args_element_name_1 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
            Py_DECREF( tmp_called_name_2 );

            exception_lineno = 69;

            goto frame_exception_exit_1;
        }
        frame_6a6219654a078aede7e40aaccdae8e56->m_frame.f_lineno = 69;
        {
            PyObject *call_args[] = { tmp_args_element_name_1 };
            tmp_call_result_1 = CALL_FUNCTION_WITH_ARGS1( tmp_called_name_2, call_args );
        }

        Py_DECREF( tmp_called_name_2 );
        Py_DECREF( tmp_args_element_name_1 );
        if ( tmp_call_result_1 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 69;

            goto frame_exception_exit_1;
        }
        Py_DECREF( tmp_call_result_1 );
    }
    {
        PyObject *tmp_assign_source_18;
        PyObject *tmp_called_instance_1;
        PyObject *tmp_mvar_value_5;
        PyObject *tmp_args_element_name_2;
        tmp_mvar_value_5 = GET_STRING_DICT_VALUE( moduledict_plistlib, (Nuitka_StringObject *)const_str_plain_contextlib );

        if (unlikely( tmp_mvar_value_5 == NULL ))
        {
            tmp_mvar_value_5 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_contextlib );
        }

        if ( tmp_mvar_value_5 == NULL )
        {

            exception_type = PyExc_NameError;
            Py_INCREF( exception_type );
            exception_value = PyUnicode_FromFormat( "name '%s' is not defined", "contextlib" );
            exception_tb = NULL;
            NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
            CHAIN_EXCEPTION( exception_value );

            exception_lineno = 79;

            goto frame_exception_exit_1;
        }

        tmp_called_instance_1 = tmp_mvar_value_5;
        tmp_args_element_name_2 = MAKE_FUNCTION_plistlib$$$function_1__maybe_open(  );



        frame_6a6219654a078aede7e40aaccdae8e56->m_frame.f_lineno = 79;
        {
            PyObject *call_args[] = { tmp_args_element_name_2 };
            tmp_assign_source_18 = CALL_METHOD_WITH_ARGS1( tmp_called_instance_1, const_str_plain_contextmanager, call_args );
        }

        Py_DECREF( tmp_args_element_name_2 );
        if ( tmp_assign_source_18 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 79;

            goto frame_exception_exit_1;
        }
        UPDATE_STRING_DICT1( moduledict_plistlib, (Nuitka_StringObject *)const_str_plain__maybe_open, tmp_assign_source_18 );
    }
    {
        PyObject *tmp_assign_source_19;
        tmp_assign_source_19 = MAKE_FUNCTION_plistlib$$$function_2_readPlist(  );



        UPDATE_STRING_DICT1( moduledict_plistlib, (Nuitka_StringObject *)const_str_plain_readPlist, tmp_assign_source_19 );
    }
    {
        PyObject *tmp_assign_source_20;
        tmp_assign_source_20 = MAKE_FUNCTION_plistlib$$$function_3_writePlist(  );



        UPDATE_STRING_DICT1( moduledict_plistlib, (Nuitka_StringObject *)const_str_plain_writePlist, tmp_assign_source_20 );
    }
    {
        PyObject *tmp_assign_source_21;
        tmp_assign_source_21 = MAKE_FUNCTION_plistlib$$$function_4_readPlistFromBytes(  );



        UPDATE_STRING_DICT1( moduledict_plistlib, (Nuitka_StringObject *)const_str_plain_readPlistFromBytes, tmp_assign_source_21 );
    }
    {
        PyObject *tmp_assign_source_22;
        tmp_assign_source_22 = MAKE_FUNCTION_plistlib$$$function_5_writePlistToBytes(  );



        UPDATE_STRING_DICT1( moduledict_plistlib, (Nuitka_StringObject *)const_str_plain_writePlistToBytes, tmp_assign_source_22 );
    }
    {
        PyObject *tmp_assign_source_23;
        tmp_assign_source_23 = PyDict_New();
        assert( tmp_class_creation_1__class_decl_dict == NULL );
        tmp_class_creation_1__class_decl_dict = tmp_assign_source_23;
    }
    // Tried code:
    {
        PyObject *tmp_assign_source_24;
        PyObject *tmp_metaclass_name_1;
        nuitka_bool tmp_condition_result_1;
        PyObject *tmp_key_name_1;
        PyObject *tmp_dict_name_1;
        PyObject *tmp_dict_name_2;
        PyObject *tmp_key_name_2;
        PyObject *tmp_bases_name_1;
        tmp_key_name_1 = const_str_plain_metaclass;
        CHECK_OBJECT( tmp_class_creation_1__class_decl_dict );
        tmp_dict_name_1 = tmp_class_creation_1__class_decl_dict;
        tmp_res = PyDict_Contains( tmp_dict_name_1, tmp_key_name_1 );
        if ( tmp_res == -1 )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 139;

            goto try_except_handler_1;
        }
        tmp_condition_result_1 = ( tmp_res != 0 ) ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
        if ( tmp_condition_result_1 == NUITKA_BOOL_TRUE )
        {
            goto condexpr_true_1;
        }
        else
        {
            goto condexpr_false_1;
        }
        condexpr_true_1:;
        CHECK_OBJECT( tmp_class_creation_1__class_decl_dict );
        tmp_dict_name_2 = tmp_class_creation_1__class_decl_dict;
        tmp_key_name_2 = const_str_plain_metaclass;
        tmp_metaclass_name_1 = DICT_GET_ITEM( tmp_dict_name_2, tmp_key_name_2 );
        if ( tmp_metaclass_name_1 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 139;

            goto try_except_handler_1;
        }
        goto condexpr_end_1;
        condexpr_false_1:;
        tmp_metaclass_name_1 = (PyObject *)&PyType_Type;
        Py_INCREF( tmp_metaclass_name_1 );
        condexpr_end_1:;
        tmp_bases_name_1 = const_tuple_empty;
        tmp_assign_source_24 = SELECT_METACLASS( tmp_metaclass_name_1, tmp_bases_name_1 );
        Py_DECREF( tmp_metaclass_name_1 );
        if ( tmp_assign_source_24 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 139;

            goto try_except_handler_1;
        }
        assert( tmp_class_creation_1__metaclass == NULL );
        tmp_class_creation_1__metaclass = tmp_assign_source_24;
    }
    {
        nuitka_bool tmp_condition_result_2;
        PyObject *tmp_key_name_3;
        PyObject *tmp_dict_name_3;
        tmp_key_name_3 = const_str_plain_metaclass;
        CHECK_OBJECT( tmp_class_creation_1__class_decl_dict );
        tmp_dict_name_3 = tmp_class_creation_1__class_decl_dict;
        tmp_res = PyDict_Contains( tmp_dict_name_3, tmp_key_name_3 );
        if ( tmp_res == -1 )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 139;

            goto try_except_handler_1;
        }
        tmp_condition_result_2 = ( tmp_res != 0 ) ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
        if ( tmp_condition_result_2 == NUITKA_BOOL_TRUE )
        {
            goto branch_yes_1;
        }
        else
        {
            goto branch_no_1;
        }
        branch_yes_1:;
        CHECK_OBJECT( tmp_class_creation_1__class_decl_dict );
        tmp_dictdel_dict = tmp_class_creation_1__class_decl_dict;
        tmp_dictdel_key = const_str_plain_metaclass;
        tmp_result = DICT_REMOVE_ITEM( tmp_dictdel_dict, tmp_dictdel_key );
        if ( tmp_result == false )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 139;

            goto try_except_handler_1;
        }
        branch_no_1:;
    }
    {
        nuitka_bool tmp_condition_result_3;
        PyObject *tmp_source_name_4;
        CHECK_OBJECT( tmp_class_creation_1__metaclass );
        tmp_source_name_4 = tmp_class_creation_1__metaclass;
        tmp_res = PyObject_HasAttr( tmp_source_name_4, const_str_plain___prepare__ );
        tmp_condition_result_3 = ( tmp_res != 0 ) ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
        if ( tmp_condition_result_3 == NUITKA_BOOL_TRUE )
        {
            goto branch_yes_2;
        }
        else
        {
            goto branch_no_2;
        }
        branch_yes_2:;
        {
            PyObject *tmp_assign_source_25;
            PyObject *tmp_called_name_3;
            PyObject *tmp_source_name_5;
            PyObject *tmp_args_name_2;
            PyObject *tmp_kw_name_2;
            CHECK_OBJECT( tmp_class_creation_1__metaclass );
            tmp_source_name_5 = tmp_class_creation_1__metaclass;
            tmp_called_name_3 = LOOKUP_ATTRIBUTE( tmp_source_name_5, const_str_plain___prepare__ );
            if ( tmp_called_name_3 == NULL )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 139;

                goto try_except_handler_1;
            }
            tmp_args_name_2 = const_tuple_str_plain_Data_tuple_empty_tuple;
            CHECK_OBJECT( tmp_class_creation_1__class_decl_dict );
            tmp_kw_name_2 = tmp_class_creation_1__class_decl_dict;
            frame_6a6219654a078aede7e40aaccdae8e56->m_frame.f_lineno = 139;
            tmp_assign_source_25 = CALL_FUNCTION( tmp_called_name_3, tmp_args_name_2, tmp_kw_name_2 );
            Py_DECREF( tmp_called_name_3 );
            if ( tmp_assign_source_25 == NULL )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 139;

                goto try_except_handler_1;
            }
            assert( tmp_class_creation_1__prepared == NULL );
            tmp_class_creation_1__prepared = tmp_assign_source_25;
        }
        {
            nuitka_bool tmp_condition_result_4;
            PyObject *tmp_operand_name_1;
            PyObject *tmp_source_name_6;
            CHECK_OBJECT( tmp_class_creation_1__prepared );
            tmp_source_name_6 = tmp_class_creation_1__prepared;
            tmp_res = PyObject_HasAttr( tmp_source_name_6, const_str_plain___getitem__ );
            tmp_operand_name_1 = ( tmp_res != 0 ) ? Py_True : Py_False;
            tmp_res = CHECK_IF_TRUE( tmp_operand_name_1 );
            if ( tmp_res == -1 )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 139;

                goto try_except_handler_1;
            }
            tmp_condition_result_4 = ( tmp_res == 0 ) ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
            if ( tmp_condition_result_4 == NUITKA_BOOL_TRUE )
            {
                goto branch_yes_3;
            }
            else
            {
                goto branch_no_3;
            }
            branch_yes_3:;
            {
                PyObject *tmp_raise_type_1;
                PyObject *tmp_raise_value_1;
                PyObject *tmp_left_name_1;
                PyObject *tmp_right_name_1;
                PyObject *tmp_tuple_element_1;
                PyObject *tmp_getattr_target_1;
                PyObject *tmp_getattr_attr_1;
                PyObject *tmp_getattr_default_1;
                PyObject *tmp_source_name_7;
                PyObject *tmp_type_arg_1;
                tmp_raise_type_1 = PyExc_TypeError;
                tmp_left_name_1 = const_str_digest_75fd71b1edada749c2ef7ac810062295;
                CHECK_OBJECT( tmp_class_creation_1__metaclass );
                tmp_getattr_target_1 = tmp_class_creation_1__metaclass;
                tmp_getattr_attr_1 = const_str_plain___name__;
                tmp_getattr_default_1 = const_str_angle_metaclass;
                tmp_tuple_element_1 = BUILTIN_GETATTR( tmp_getattr_target_1, tmp_getattr_attr_1, tmp_getattr_default_1 );
                if ( tmp_tuple_element_1 == NULL )
                {
                    assert( ERROR_OCCURRED() );

                    FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                    exception_lineno = 139;

                    goto try_except_handler_1;
                }
                tmp_right_name_1 = PyTuple_New( 2 );
                PyTuple_SET_ITEM( tmp_right_name_1, 0, tmp_tuple_element_1 );
                CHECK_OBJECT( tmp_class_creation_1__prepared );
                tmp_type_arg_1 = tmp_class_creation_1__prepared;
                tmp_source_name_7 = BUILTIN_TYPE1( tmp_type_arg_1 );
                assert( !(tmp_source_name_7 == NULL) );
                tmp_tuple_element_1 = LOOKUP_ATTRIBUTE( tmp_source_name_7, const_str_plain___name__ );
                Py_DECREF( tmp_source_name_7 );
                if ( tmp_tuple_element_1 == NULL )
                {
                    assert( ERROR_OCCURRED() );

                    FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
                    Py_DECREF( tmp_right_name_1 );

                    exception_lineno = 139;

                    goto try_except_handler_1;
                }
                PyTuple_SET_ITEM( tmp_right_name_1, 1, tmp_tuple_element_1 );
                tmp_raise_value_1 = BINARY_OPERATION_REMAINDER( tmp_left_name_1, tmp_right_name_1 );
                Py_DECREF( tmp_right_name_1 );
                if ( tmp_raise_value_1 == NULL )
                {
                    assert( ERROR_OCCURRED() );

                    FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                    exception_lineno = 139;

                    goto try_except_handler_1;
                }
                exception_type = tmp_raise_type_1;
                Py_INCREF( tmp_raise_type_1 );
                exception_value = tmp_raise_value_1;
                exception_lineno = 139;
                RAISE_EXCEPTION_IMPLICIT( &exception_type, &exception_value, &exception_tb );

                goto try_except_handler_1;
            }
            branch_no_3:;
        }
        goto branch_end_2;
        branch_no_2:;
        {
            PyObject *tmp_assign_source_26;
            tmp_assign_source_26 = PyDict_New();
            assert( tmp_class_creation_1__prepared == NULL );
            tmp_class_creation_1__prepared = tmp_assign_source_26;
        }
        branch_end_2:;
    }
    {
        PyObject *tmp_assign_source_27;
        {
            PyObject *tmp_set_locals_1;
            CHECK_OBJECT( tmp_class_creation_1__prepared );
            tmp_set_locals_1 = tmp_class_creation_1__prepared;
            locals_plistlib_139 = tmp_set_locals_1;
            Py_INCREF( tmp_set_locals_1 );
        }
        // Tried code:
        // Tried code:
        tmp_dictset_value = const_str_plain_plistlib;
        tmp_res = PyObject_SetItem( locals_plistlib_139, const_str_plain___module__, tmp_dictset_value );
        if ( tmp_res != 0 )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 139;

            goto try_except_handler_3;
        }
        tmp_dictset_value = const_str_digest_f2af2a2c9cdc01eb0f569ccd625dd787;
        tmp_res = PyObject_SetItem( locals_plistlib_139, const_str_plain___doc__, tmp_dictset_value );
        if ( tmp_res != 0 )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 139;

            goto try_except_handler_3;
        }
        tmp_dictset_value = const_str_plain_Data;
        tmp_res = PyObject_SetItem( locals_plistlib_139, const_str_plain___qualname__, tmp_dictset_value );
        if ( tmp_res != 0 )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 139;

            goto try_except_handler_3;
        }
        MAKE_OR_REUSE_FRAME( cache_frame_4f9522afa0b8e72f782625388c8d1967_2, codeobj_4f9522afa0b8e72f782625388c8d1967, module_plistlib, sizeof(void *) );
        frame_4f9522afa0b8e72f782625388c8d1967_2 = cache_frame_4f9522afa0b8e72f782625388c8d1967_2;

        // Push the new frame as the currently active one.
        pushFrameStack( frame_4f9522afa0b8e72f782625388c8d1967_2 );

        // Mark the frame object as in use, ref count 1 will be up for reuse.
        assert( Py_REFCNT( frame_4f9522afa0b8e72f782625388c8d1967_2 ) == 2 ); // Frame stack

        // Framed code:
        tmp_dictset_value = MAKE_FUNCTION_plistlib$$$function_6___init__(  );



        tmp_res = PyObject_SetItem( locals_plistlib_139, const_str_plain___init__, tmp_dictset_value );
        Py_DECREF( tmp_dictset_value );
        if ( tmp_res != 0 )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 146;
            type_description_2 = "o";
            goto frame_exception_exit_2;
        }
        {
            nuitka_bool tmp_condition_result_5;
            PyObject *tmp_called_name_4;
            PyObject *tmp_args_element_name_3;
            PyObject *tmp_classmethod_arg_1;
            tmp_res = MAPPING_HAS_ITEM( locals_plistlib_139, const_str_plain_classmethod );

            if ( tmp_res == -1 )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 151;
                type_description_2 = "o";
                goto frame_exception_exit_2;
            }
            tmp_condition_result_5 = ( tmp_res == 1 ) ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
            if ( tmp_condition_result_5 == NUITKA_BOOL_TRUE )
            {
                goto condexpr_true_2;
            }
            else
            {
                goto condexpr_false_2;
            }
            condexpr_true_2:;
            tmp_called_name_4 = PyObject_GetItem( locals_plistlib_139, const_str_plain_classmethod );

            if ( tmp_called_name_4 == NULL && CHECK_AND_CLEAR_KEY_ERROR_OCCURRED() )
            {

                exception_type = PyExc_NameError;
                Py_INCREF( exception_type );
                exception_value = PyUnicode_FromFormat( "name '%s' is not defined", "classmethod" );
                exception_tb = NULL;
                NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
                CHAIN_EXCEPTION( exception_value );

                exception_lineno = 151;
                type_description_2 = "o";
                goto frame_exception_exit_2;
            }

            if ( tmp_called_name_4 == NULL )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 151;
                type_description_2 = "o";
                goto frame_exception_exit_2;
            }
            tmp_args_element_name_3 = MAKE_FUNCTION_plistlib$$$function_7_fromBase64(  );



            frame_4f9522afa0b8e72f782625388c8d1967_2->m_frame.f_lineno = 151;
            {
                PyObject *call_args[] = { tmp_args_element_name_3 };
                tmp_dictset_value = CALL_FUNCTION_WITH_ARGS1( tmp_called_name_4, call_args );
            }

            Py_DECREF( tmp_called_name_4 );
            Py_DECREF( tmp_args_element_name_3 );
            if ( tmp_dictset_value == NULL )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 151;
                type_description_2 = "o";
                goto frame_exception_exit_2;
            }
            goto condexpr_end_2;
            condexpr_false_2:;
            tmp_classmethod_arg_1 = MAKE_FUNCTION_plistlib$$$function_7_fromBase64(  );



            tmp_dictset_value = BUILTIN_CLASSMETHOD( tmp_classmethod_arg_1 );
            Py_DECREF( tmp_classmethod_arg_1 );
            if ( tmp_dictset_value == NULL )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 151;
                type_description_2 = "o";
                goto frame_exception_exit_2;
            }
            condexpr_end_2:;
            tmp_res = PyObject_SetItem( locals_plistlib_139, const_str_plain_fromBase64, tmp_dictset_value );
            Py_DECREF( tmp_dictset_value );
            if ( tmp_res != 0 )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 151;
                type_description_2 = "o";
                goto frame_exception_exit_2;
            }
        }
        {
            PyObject *tmp_defaults_1;
            tmp_defaults_1 = const_tuple_int_pos_76_tuple;
            Py_INCREF( tmp_defaults_1 );
            tmp_dictset_value = MAKE_FUNCTION_plistlib$$$function_8_asBase64( tmp_defaults_1 );



            tmp_res = PyObject_SetItem( locals_plistlib_139, const_str_plain_asBase64, tmp_dictset_value );
            Py_DECREF( tmp_dictset_value );
            if ( tmp_res != 0 )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 157;
                type_description_2 = "o";
                goto frame_exception_exit_2;
            }
        }
        tmp_dictset_value = MAKE_FUNCTION_plistlib$$$function_9___eq__(  );



        tmp_res = PyObject_SetItem( locals_plistlib_139, const_str_plain___eq__, tmp_dictset_value );
        Py_DECREF( tmp_dictset_value );
        if ( tmp_res != 0 )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 160;
            type_description_2 = "o";
            goto frame_exception_exit_2;
        }
        tmp_dictset_value = MAKE_FUNCTION_plistlib$$$function_10___repr__(  );



        tmp_res = PyObject_SetItem( locals_plistlib_139, const_str_plain___repr__, tmp_dictset_value );
        Py_DECREF( tmp_dictset_value );
        if ( tmp_res != 0 )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 168;
            type_description_2 = "o";
            goto frame_exception_exit_2;
        }

#if 0
        RESTORE_FRAME_EXCEPTION( frame_4f9522afa0b8e72f782625388c8d1967_2 );
#endif

        // Put the previous frame back on top.
        popFrameStack();

        goto frame_no_exception_1;

        frame_exception_exit_2:;

#if 0
        RESTORE_FRAME_EXCEPTION( frame_4f9522afa0b8e72f782625388c8d1967_2 );
#endif

        if ( exception_tb == NULL )
        {
            exception_tb = MAKE_TRACEBACK( frame_4f9522afa0b8e72f782625388c8d1967_2, exception_lineno );
        }
        else if ( exception_tb->tb_frame != &frame_4f9522afa0b8e72f782625388c8d1967_2->m_frame )
        {
            exception_tb = ADD_TRACEBACK( exception_tb, frame_4f9522afa0b8e72f782625388c8d1967_2, exception_lineno );
        }

        // Attachs locals to frame if any.
        Nuitka_Frame_AttachLocals(
            (struct Nuitka_FrameObject *)frame_4f9522afa0b8e72f782625388c8d1967_2,
            type_description_2,
            outline_0_var___class__
        );


        // Release cached frame.
        if ( frame_4f9522afa0b8e72f782625388c8d1967_2 == cache_frame_4f9522afa0b8e72f782625388c8d1967_2 )
        {
            Py_DECREF( frame_4f9522afa0b8e72f782625388c8d1967_2 );
        }
        cache_frame_4f9522afa0b8e72f782625388c8d1967_2 = NULL;

        assertFrameObject( frame_4f9522afa0b8e72f782625388c8d1967_2 );

        // Put the previous frame back on top.
        popFrameStack();

        // Return the error.
        goto nested_frame_exit_1;

        frame_no_exception_1:;
        goto skip_nested_handling_1;
        nested_frame_exit_1:;

        goto try_except_handler_3;
        skip_nested_handling_1:;
        {
            PyObject *tmp_assign_source_28;
            PyObject *tmp_called_name_5;
            PyObject *tmp_args_name_3;
            PyObject *tmp_tuple_element_2;
            PyObject *tmp_kw_name_3;
            CHECK_OBJECT( tmp_class_creation_1__metaclass );
            tmp_called_name_5 = tmp_class_creation_1__metaclass;
            tmp_tuple_element_2 = const_str_plain_Data;
            tmp_args_name_3 = PyTuple_New( 3 );
            Py_INCREF( tmp_tuple_element_2 );
            PyTuple_SET_ITEM( tmp_args_name_3, 0, tmp_tuple_element_2 );
            tmp_tuple_element_2 = const_tuple_empty;
            Py_INCREF( tmp_tuple_element_2 );
            PyTuple_SET_ITEM( tmp_args_name_3, 1, tmp_tuple_element_2 );
            tmp_tuple_element_2 = locals_plistlib_139;
            Py_INCREF( tmp_tuple_element_2 );
            PyTuple_SET_ITEM( tmp_args_name_3, 2, tmp_tuple_element_2 );
            CHECK_OBJECT( tmp_class_creation_1__class_decl_dict );
            tmp_kw_name_3 = tmp_class_creation_1__class_decl_dict;
            frame_6a6219654a078aede7e40aaccdae8e56->m_frame.f_lineno = 139;
            tmp_assign_source_28 = CALL_FUNCTION( tmp_called_name_5, tmp_args_name_3, tmp_kw_name_3 );
            Py_DECREF( tmp_args_name_3 );
            if ( tmp_assign_source_28 == NULL )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 139;

                goto try_except_handler_3;
            }
            assert( outline_0_var___class__ == NULL );
            outline_0_var___class__ = tmp_assign_source_28;
        }
        CHECK_OBJECT( outline_0_var___class__ );
        tmp_assign_source_27 = outline_0_var___class__;
        Py_INCREF( tmp_assign_source_27 );
        goto try_return_handler_3;
        // tried codes exits in all cases
        NUITKA_CANNOT_GET_HERE( plistlib );
        return MOD_RETURN_VALUE( NULL );
        // Return handler code:
        try_return_handler_3:;
        Py_DECREF( locals_plistlib_139 );
        locals_plistlib_139 = NULL;
        goto try_return_handler_2;
        // Exception handler code:
        try_except_handler_3:;
        exception_keeper_type_1 = exception_type;
        exception_keeper_value_1 = exception_value;
        exception_keeper_tb_1 = exception_tb;
        exception_keeper_lineno_1 = exception_lineno;
        exception_type = NULL;
        exception_value = NULL;
        exception_tb = NULL;
        exception_lineno = 0;

        Py_DECREF( locals_plistlib_139 );
        locals_plistlib_139 = NULL;
        // Re-raise.
        exception_type = exception_keeper_type_1;
        exception_value = exception_keeper_value_1;
        exception_tb = exception_keeper_tb_1;
        exception_lineno = exception_keeper_lineno_1;

        goto try_except_handler_2;
        // End of try:
        // tried codes exits in all cases
        NUITKA_CANNOT_GET_HERE( plistlib );
        return MOD_RETURN_VALUE( NULL );
        // Return handler code:
        try_return_handler_2:;
        CHECK_OBJECT( (PyObject *)outline_0_var___class__ );
        Py_DECREF( outline_0_var___class__ );
        outline_0_var___class__ = NULL;

        goto outline_result_1;
        // Exception handler code:
        try_except_handler_2:;
        exception_keeper_type_2 = exception_type;
        exception_keeper_value_2 = exception_value;
        exception_keeper_tb_2 = exception_tb;
        exception_keeper_lineno_2 = exception_lineno;
        exception_type = NULL;
        exception_value = NULL;
        exception_tb = NULL;
        exception_lineno = 0;

        // Re-raise.
        exception_type = exception_keeper_type_2;
        exception_value = exception_keeper_value_2;
        exception_tb = exception_keeper_tb_2;
        exception_lineno = exception_keeper_lineno_2;

        goto outline_exception_1;
        // End of try:
        // Return statement must have exited already.
        NUITKA_CANNOT_GET_HERE( plistlib );
        return MOD_RETURN_VALUE( NULL );
        outline_exception_1:;
        exception_lineno = 139;
        goto try_except_handler_1;
        outline_result_1:;
        UPDATE_STRING_DICT1( moduledict_plistlib, (Nuitka_StringObject *)const_str_plain_Data, tmp_assign_source_27 );
    }
    goto try_end_1;
    // Exception handler code:
    try_except_handler_1:;
    exception_keeper_type_3 = exception_type;
    exception_keeper_value_3 = exception_value;
    exception_keeper_tb_3 = exception_tb;
    exception_keeper_lineno_3 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    CHECK_OBJECT( (PyObject *)tmp_class_creation_1__class_decl_dict );
    Py_DECREF( tmp_class_creation_1__class_decl_dict );
    tmp_class_creation_1__class_decl_dict = NULL;

    Py_XDECREF( tmp_class_creation_1__metaclass );
    tmp_class_creation_1__metaclass = NULL;

    Py_XDECREF( tmp_class_creation_1__prepared );
    tmp_class_creation_1__prepared = NULL;

    // Re-raise.
    exception_type = exception_keeper_type_3;
    exception_value = exception_keeper_value_3;
    exception_tb = exception_keeper_tb_3;
    exception_lineno = exception_keeper_lineno_3;

    goto frame_exception_exit_1;
    // End of try:
    try_end_1:;
    CHECK_OBJECT( (PyObject *)tmp_class_creation_1__class_decl_dict );
    Py_DECREF( tmp_class_creation_1__class_decl_dict );
    tmp_class_creation_1__class_decl_dict = NULL;

    CHECK_OBJECT( (PyObject *)tmp_class_creation_1__metaclass );
    Py_DECREF( tmp_class_creation_1__metaclass );
    tmp_class_creation_1__metaclass = NULL;

    CHECK_OBJECT( (PyObject *)tmp_class_creation_1__prepared );
    Py_DECREF( tmp_class_creation_1__prepared );
    tmp_class_creation_1__prepared = NULL;

    {
        PyObject *tmp_assign_source_29;
        tmp_assign_source_29 = const_bytes_digest_989365e9d702141b7617a68e35459180;
        UPDATE_STRING_DICT0( moduledict_plistlib, (Nuitka_StringObject *)const_str_plain_PLISTHEADER, tmp_assign_source_29 );
    }
    {
        PyObject *tmp_assign_source_30;
        PyObject *tmp_called_instance_2;
        PyObject *tmp_mvar_value_6;
        tmp_mvar_value_6 = GET_STRING_DICT_VALUE( moduledict_plistlib, (Nuitka_StringObject *)const_str_plain_re );

        if (unlikely( tmp_mvar_value_6 == NULL ))
        {
            tmp_mvar_value_6 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_re );
        }

        if ( tmp_mvar_value_6 == NULL )
        {

            exception_type = PyExc_NameError;
            Py_INCREF( exception_type );
            exception_value = PyUnicode_FromFormat( "name '%s' is not defined", "re" );
            exception_tb = NULL;
            NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
            CHAIN_EXCEPTION( exception_value );

            exception_lineno = 191;

            goto frame_exception_exit_1;
        }

        tmp_called_instance_2 = tmp_mvar_value_6;
        frame_6a6219654a078aede7e40aaccdae8e56->m_frame.f_lineno = 191;
        tmp_assign_source_30 = CALL_METHOD_WITH_ARGS1( tmp_called_instance_2, const_str_plain_compile, &PyTuple_GET_ITEM( const_tuple_str_digest_600e634b68a231758b74eb05aa74dac8_tuple, 0 ) );

        if ( tmp_assign_source_30 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 191;

            goto frame_exception_exit_1;
        }
        UPDATE_STRING_DICT1( moduledict_plistlib, (Nuitka_StringObject *)const_str_plain__controlCharPat, tmp_assign_source_30 );
    }
    {
        PyObject *tmp_assign_source_31;
        PyObject *tmp_defaults_2;
        tmp_defaults_2 = const_tuple_int_pos_76_tuple;
        Py_INCREF( tmp_defaults_2 );
        tmp_assign_source_31 = MAKE_FUNCTION_plistlib$$$function_11__encode_base64( tmp_defaults_2 );



        UPDATE_STRING_DICT1( moduledict_plistlib, (Nuitka_StringObject *)const_str_plain__encode_base64, tmp_assign_source_31 );
    }
    {
        PyObject *tmp_assign_source_32;
        tmp_assign_source_32 = MAKE_FUNCTION_plistlib$$$function_12__decode_base64(  );



        UPDATE_STRING_DICT1( moduledict_plistlib, (Nuitka_StringObject *)const_str_plain__decode_base64, tmp_assign_source_32 );
    }
    {
        PyObject *tmp_assign_source_33;
        PyObject *tmp_called_name_6;
        PyObject *tmp_source_name_8;
        PyObject *tmp_mvar_value_7;
        PyObject *tmp_args_element_name_4;
        PyObject *tmp_args_element_name_5;
        PyObject *tmp_source_name_9;
        PyObject *tmp_mvar_value_8;
        tmp_mvar_value_7 = GET_STRING_DICT_VALUE( moduledict_plistlib, (Nuitka_StringObject *)const_str_plain_re );

        if (unlikely( tmp_mvar_value_7 == NULL ))
        {
            tmp_mvar_value_7 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_re );
        }

        if ( tmp_mvar_value_7 == NULL )
        {

            exception_type = PyExc_NameError;
            Py_INCREF( exception_type );
            exception_value = PyUnicode_FromFormat( "name '%s' is not defined", "re" );
            exception_tb = NULL;
            NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
            CHAIN_EXCEPTION( exception_value );

            exception_lineno = 214;

            goto frame_exception_exit_1;
        }

        tmp_source_name_8 = tmp_mvar_value_7;
        tmp_called_name_6 = LOOKUP_ATTRIBUTE( tmp_source_name_8, const_str_plain_compile );
        if ( tmp_called_name_6 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 214;

            goto frame_exception_exit_1;
        }
        tmp_args_element_name_4 = const_str_digest_72acf5789151589e4bb12886f367c8fe;
        tmp_mvar_value_8 = GET_STRING_DICT_VALUE( moduledict_plistlib, (Nuitka_StringObject *)const_str_plain_re );

        if (unlikely( tmp_mvar_value_8 == NULL ))
        {
            tmp_mvar_value_8 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_re );
        }

        if ( tmp_mvar_value_8 == NULL )
        {
            Py_DECREF( tmp_called_name_6 );
            exception_type = PyExc_NameError;
            Py_INCREF( exception_type );
            exception_value = PyUnicode_FromFormat( "name '%s' is not defined", "re" );
            exception_tb = NULL;
            NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
            CHAIN_EXCEPTION( exception_value );

            exception_lineno = 214;

            goto frame_exception_exit_1;
        }

        tmp_source_name_9 = tmp_mvar_value_8;
        tmp_args_element_name_5 = LOOKUP_ATTRIBUTE( tmp_source_name_9, const_str_plain_ASCII );
        if ( tmp_args_element_name_5 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
            Py_DECREF( tmp_called_name_6 );

            exception_lineno = 214;

            goto frame_exception_exit_1;
        }
        frame_6a6219654a078aede7e40aaccdae8e56->m_frame.f_lineno = 214;
        {
            PyObject *call_args[] = { tmp_args_element_name_4, tmp_args_element_name_5 };
            tmp_assign_source_33 = CALL_FUNCTION_WITH_ARGS2( tmp_called_name_6, call_args );
        }

        Py_DECREF( tmp_called_name_6 );
        Py_DECREF( tmp_args_element_name_5 );
        if ( tmp_assign_source_33 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 214;

            goto frame_exception_exit_1;
        }
        UPDATE_STRING_DICT1( moduledict_plistlib, (Nuitka_StringObject *)const_str_plain__dateParser, tmp_assign_source_33 );
    }
    {
        PyObject *tmp_assign_source_34;
        tmp_assign_source_34 = MAKE_FUNCTION_plistlib$$$function_13__date_from_string(  );



        UPDATE_STRING_DICT1( moduledict_plistlib, (Nuitka_StringObject *)const_str_plain__date_from_string, tmp_assign_source_34 );
    }
    {
        PyObject *tmp_assign_source_35;
        tmp_assign_source_35 = MAKE_FUNCTION_plistlib$$$function_14__date_to_string(  );



        UPDATE_STRING_DICT1( moduledict_plistlib, (Nuitka_StringObject *)const_str_plain__date_to_string, tmp_assign_source_35 );
    }
    {
        PyObject *tmp_assign_source_36;
        tmp_assign_source_36 = MAKE_FUNCTION_plistlib$$$function_15__escape(  );



        UPDATE_STRING_DICT1( moduledict_plistlib, (Nuitka_StringObject *)const_str_plain__escape, tmp_assign_source_36 );
    }
    {
        PyObject *tmp_assign_source_37;
        tmp_assign_source_37 = PyDict_New();
        assert( tmp_class_creation_2__class_decl_dict == NULL );
        tmp_class_creation_2__class_decl_dict = tmp_assign_source_37;
    }
    // Tried code:
    {
        PyObject *tmp_assign_source_38;
        PyObject *tmp_metaclass_name_2;
        nuitka_bool tmp_condition_result_6;
        PyObject *tmp_key_name_4;
        PyObject *tmp_dict_name_4;
        PyObject *tmp_dict_name_5;
        PyObject *tmp_key_name_5;
        PyObject *tmp_bases_name_2;
        tmp_key_name_4 = const_str_plain_metaclass;
        CHECK_OBJECT( tmp_class_creation_2__class_decl_dict );
        tmp_dict_name_4 = tmp_class_creation_2__class_decl_dict;
        tmp_res = PyDict_Contains( tmp_dict_name_4, tmp_key_name_4 );
        if ( tmp_res == -1 )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 247;

            goto try_except_handler_4;
        }
        tmp_condition_result_6 = ( tmp_res != 0 ) ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
        if ( tmp_condition_result_6 == NUITKA_BOOL_TRUE )
        {
            goto condexpr_true_3;
        }
        else
        {
            goto condexpr_false_3;
        }
        condexpr_true_3:;
        CHECK_OBJECT( tmp_class_creation_2__class_decl_dict );
        tmp_dict_name_5 = tmp_class_creation_2__class_decl_dict;
        tmp_key_name_5 = const_str_plain_metaclass;
        tmp_metaclass_name_2 = DICT_GET_ITEM( tmp_dict_name_5, tmp_key_name_5 );
        if ( tmp_metaclass_name_2 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 247;

            goto try_except_handler_4;
        }
        goto condexpr_end_3;
        condexpr_false_3:;
        tmp_metaclass_name_2 = (PyObject *)&PyType_Type;
        Py_INCREF( tmp_metaclass_name_2 );
        condexpr_end_3:;
        tmp_bases_name_2 = const_tuple_empty;
        tmp_assign_source_38 = SELECT_METACLASS( tmp_metaclass_name_2, tmp_bases_name_2 );
        Py_DECREF( tmp_metaclass_name_2 );
        if ( tmp_assign_source_38 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 247;

            goto try_except_handler_4;
        }
        assert( tmp_class_creation_2__metaclass == NULL );
        tmp_class_creation_2__metaclass = tmp_assign_source_38;
    }
    {
        nuitka_bool tmp_condition_result_7;
        PyObject *tmp_key_name_6;
        PyObject *tmp_dict_name_6;
        tmp_key_name_6 = const_str_plain_metaclass;
        CHECK_OBJECT( tmp_class_creation_2__class_decl_dict );
        tmp_dict_name_6 = tmp_class_creation_2__class_decl_dict;
        tmp_res = PyDict_Contains( tmp_dict_name_6, tmp_key_name_6 );
        if ( tmp_res == -1 )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 247;

            goto try_except_handler_4;
        }
        tmp_condition_result_7 = ( tmp_res != 0 ) ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
        if ( tmp_condition_result_7 == NUITKA_BOOL_TRUE )
        {
            goto branch_yes_4;
        }
        else
        {
            goto branch_no_4;
        }
        branch_yes_4:;
        CHECK_OBJECT( tmp_class_creation_2__class_decl_dict );
        tmp_dictdel_dict = tmp_class_creation_2__class_decl_dict;
        tmp_dictdel_key = const_str_plain_metaclass;
        tmp_result = DICT_REMOVE_ITEM( tmp_dictdel_dict, tmp_dictdel_key );
        if ( tmp_result == false )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 247;

            goto try_except_handler_4;
        }
        branch_no_4:;
    }
    {
        nuitka_bool tmp_condition_result_8;
        PyObject *tmp_source_name_10;
        CHECK_OBJECT( tmp_class_creation_2__metaclass );
        tmp_source_name_10 = tmp_class_creation_2__metaclass;
        tmp_res = PyObject_HasAttr( tmp_source_name_10, const_str_plain___prepare__ );
        tmp_condition_result_8 = ( tmp_res != 0 ) ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
        if ( tmp_condition_result_8 == NUITKA_BOOL_TRUE )
        {
            goto branch_yes_5;
        }
        else
        {
            goto branch_no_5;
        }
        branch_yes_5:;
        {
            PyObject *tmp_assign_source_39;
            PyObject *tmp_called_name_7;
            PyObject *tmp_source_name_11;
            PyObject *tmp_args_name_4;
            PyObject *tmp_kw_name_4;
            CHECK_OBJECT( tmp_class_creation_2__metaclass );
            tmp_source_name_11 = tmp_class_creation_2__metaclass;
            tmp_called_name_7 = LOOKUP_ATTRIBUTE( tmp_source_name_11, const_str_plain___prepare__ );
            if ( tmp_called_name_7 == NULL )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 247;

                goto try_except_handler_4;
            }
            tmp_args_name_4 = const_tuple_str_plain__PlistParser_tuple_empty_tuple;
            CHECK_OBJECT( tmp_class_creation_2__class_decl_dict );
            tmp_kw_name_4 = tmp_class_creation_2__class_decl_dict;
            frame_6a6219654a078aede7e40aaccdae8e56->m_frame.f_lineno = 247;
            tmp_assign_source_39 = CALL_FUNCTION( tmp_called_name_7, tmp_args_name_4, tmp_kw_name_4 );
            Py_DECREF( tmp_called_name_7 );
            if ( tmp_assign_source_39 == NULL )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 247;

                goto try_except_handler_4;
            }
            assert( tmp_class_creation_2__prepared == NULL );
            tmp_class_creation_2__prepared = tmp_assign_source_39;
        }
        {
            nuitka_bool tmp_condition_result_9;
            PyObject *tmp_operand_name_2;
            PyObject *tmp_source_name_12;
            CHECK_OBJECT( tmp_class_creation_2__prepared );
            tmp_source_name_12 = tmp_class_creation_2__prepared;
            tmp_res = PyObject_HasAttr( tmp_source_name_12, const_str_plain___getitem__ );
            tmp_operand_name_2 = ( tmp_res != 0 ) ? Py_True : Py_False;
            tmp_res = CHECK_IF_TRUE( tmp_operand_name_2 );
            if ( tmp_res == -1 )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 247;

                goto try_except_handler_4;
            }
            tmp_condition_result_9 = ( tmp_res == 0 ) ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
            if ( tmp_condition_result_9 == NUITKA_BOOL_TRUE )
            {
                goto branch_yes_6;
            }
            else
            {
                goto branch_no_6;
            }
            branch_yes_6:;
            {
                PyObject *tmp_raise_type_2;
                PyObject *tmp_raise_value_2;
                PyObject *tmp_left_name_2;
                PyObject *tmp_right_name_2;
                PyObject *tmp_tuple_element_3;
                PyObject *tmp_getattr_target_2;
                PyObject *tmp_getattr_attr_2;
                PyObject *tmp_getattr_default_2;
                PyObject *tmp_source_name_13;
                PyObject *tmp_type_arg_2;
                tmp_raise_type_2 = PyExc_TypeError;
                tmp_left_name_2 = const_str_digest_75fd71b1edada749c2ef7ac810062295;
                CHECK_OBJECT( tmp_class_creation_2__metaclass );
                tmp_getattr_target_2 = tmp_class_creation_2__metaclass;
                tmp_getattr_attr_2 = const_str_plain___name__;
                tmp_getattr_default_2 = const_str_angle_metaclass;
                tmp_tuple_element_3 = BUILTIN_GETATTR( tmp_getattr_target_2, tmp_getattr_attr_2, tmp_getattr_default_2 );
                if ( tmp_tuple_element_3 == NULL )
                {
                    assert( ERROR_OCCURRED() );

                    FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                    exception_lineno = 247;

                    goto try_except_handler_4;
                }
                tmp_right_name_2 = PyTuple_New( 2 );
                PyTuple_SET_ITEM( tmp_right_name_2, 0, tmp_tuple_element_3 );
                CHECK_OBJECT( tmp_class_creation_2__prepared );
                tmp_type_arg_2 = tmp_class_creation_2__prepared;
                tmp_source_name_13 = BUILTIN_TYPE1( tmp_type_arg_2 );
                assert( !(tmp_source_name_13 == NULL) );
                tmp_tuple_element_3 = LOOKUP_ATTRIBUTE( tmp_source_name_13, const_str_plain___name__ );
                Py_DECREF( tmp_source_name_13 );
                if ( tmp_tuple_element_3 == NULL )
                {
                    assert( ERROR_OCCURRED() );

                    FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
                    Py_DECREF( tmp_right_name_2 );

                    exception_lineno = 247;

                    goto try_except_handler_4;
                }
                PyTuple_SET_ITEM( tmp_right_name_2, 1, tmp_tuple_element_3 );
                tmp_raise_value_2 = BINARY_OPERATION_REMAINDER( tmp_left_name_2, tmp_right_name_2 );
                Py_DECREF( tmp_right_name_2 );
                if ( tmp_raise_value_2 == NULL )
                {
                    assert( ERROR_OCCURRED() );

                    FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                    exception_lineno = 247;

                    goto try_except_handler_4;
                }
                exception_type = tmp_raise_type_2;
                Py_INCREF( tmp_raise_type_2 );
                exception_value = tmp_raise_value_2;
                exception_lineno = 247;
                RAISE_EXCEPTION_IMPLICIT( &exception_type, &exception_value, &exception_tb );

                goto try_except_handler_4;
            }
            branch_no_6:;
        }
        goto branch_end_5;
        branch_no_5:;
        {
            PyObject *tmp_assign_source_40;
            tmp_assign_source_40 = PyDict_New();
            assert( tmp_class_creation_2__prepared == NULL );
            tmp_class_creation_2__prepared = tmp_assign_source_40;
        }
        branch_end_5:;
    }
    {
        PyObject *tmp_assign_source_41;
        {
            PyObject *tmp_set_locals_2;
            CHECK_OBJECT( tmp_class_creation_2__prepared );
            tmp_set_locals_2 = tmp_class_creation_2__prepared;
            locals_plistlib_247 = tmp_set_locals_2;
            Py_INCREF( tmp_set_locals_2 );
        }
        // Tried code:
        // Tried code:
        tmp_dictset_value = const_str_plain_plistlib;
        tmp_res = PyObject_SetItem( locals_plistlib_247, const_str_plain___module__, tmp_dictset_value );
        if ( tmp_res != 0 )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 247;

            goto try_except_handler_6;
        }
        tmp_dictset_value = const_str_plain__PlistParser;
        tmp_res = PyObject_SetItem( locals_plistlib_247, const_str_plain___qualname__, tmp_dictset_value );
        if ( tmp_res != 0 )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 247;

            goto try_except_handler_6;
        }
        MAKE_OR_REUSE_FRAME( cache_frame_e67d9a4f703826ca272037e679cd200c_3, codeobj_e67d9a4f703826ca272037e679cd200c, module_plistlib, sizeof(void *) );
        frame_e67d9a4f703826ca272037e679cd200c_3 = cache_frame_e67d9a4f703826ca272037e679cd200c_3;

        // Push the new frame as the currently active one.
        pushFrameStack( frame_e67d9a4f703826ca272037e679cd200c_3 );

        // Mark the frame object as in use, ref count 1 will be up for reuse.
        assert( Py_REFCNT( frame_e67d9a4f703826ca272037e679cd200c_3 ) == 2 ); // Frame stack

        // Framed code:
        tmp_dictset_value = MAKE_FUNCTION_plistlib$$$function_16___init__(  );



        tmp_res = PyObject_SetItem( locals_plistlib_247, const_str_plain___init__, tmp_dictset_value );
        Py_DECREF( tmp_dictset_value );
        if ( tmp_res != 0 )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 248;
            type_description_2 = "o";
            goto frame_exception_exit_3;
        }
        tmp_dictset_value = MAKE_FUNCTION_plistlib$$$function_17_parse(  );



        tmp_res = PyObject_SetItem( locals_plistlib_247, const_str_plain_parse, tmp_dictset_value );
        Py_DECREF( tmp_dictset_value );
        if ( tmp_res != 0 )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 255;
            type_description_2 = "o";
            goto frame_exception_exit_3;
        }
        tmp_dictset_value = MAKE_FUNCTION_plistlib$$$function_18_handle_begin_element(  );



        tmp_res = PyObject_SetItem( locals_plistlib_247, const_str_plain_handle_begin_element, tmp_dictset_value );
        Py_DECREF( tmp_dictset_value );
        if ( tmp_res != 0 )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 263;
            type_description_2 = "o";
            goto frame_exception_exit_3;
        }
        tmp_dictset_value = MAKE_FUNCTION_plistlib$$$function_19_handle_end_element(  );



        tmp_res = PyObject_SetItem( locals_plistlib_247, const_str_plain_handle_end_element, tmp_dictset_value );
        Py_DECREF( tmp_dictset_value );
        if ( tmp_res != 0 )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 269;
            type_description_2 = "o";
            goto frame_exception_exit_3;
        }
        tmp_dictset_value = MAKE_FUNCTION_plistlib$$$function_20_handle_data(  );



        tmp_res = PyObject_SetItem( locals_plistlib_247, const_str_plain_handle_data, tmp_dictset_value );
        Py_DECREF( tmp_dictset_value );
        if ( tmp_res != 0 )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 274;
            type_description_2 = "o";
            goto frame_exception_exit_3;
        }
        tmp_dictset_value = MAKE_FUNCTION_plistlib$$$function_21_add_object(  );



        tmp_res = PyObject_SetItem( locals_plistlib_247, const_str_plain_add_object, tmp_dictset_value );
        Py_DECREF( tmp_dictset_value );
        if ( tmp_res != 0 )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 277;
            type_description_2 = "o";
            goto frame_exception_exit_3;
        }
        tmp_dictset_value = MAKE_FUNCTION_plistlib$$$function_22_get_data(  );



        tmp_res = PyObject_SetItem( locals_plistlib_247, const_str_plain_get_data, tmp_dictset_value );
        Py_DECREF( tmp_dictset_value );
        if ( tmp_res != 0 )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 293;
            type_description_2 = "o";
            goto frame_exception_exit_3;
        }
        tmp_dictset_value = MAKE_FUNCTION_plistlib$$$function_23_begin_dict(  );



        tmp_res = PyObject_SetItem( locals_plistlib_247, const_str_plain_begin_dict, tmp_dictset_value );
        Py_DECREF( tmp_dictset_value );
        if ( tmp_res != 0 )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 300;
            type_description_2 = "o";
            goto frame_exception_exit_3;
        }
        tmp_dictset_value = MAKE_FUNCTION_plistlib$$$function_24_end_dict(  );



        tmp_res = PyObject_SetItem( locals_plistlib_247, const_str_plain_end_dict, tmp_dictset_value );
        Py_DECREF( tmp_dictset_value );
        if ( tmp_res != 0 )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 305;
            type_description_2 = "o";
            goto frame_exception_exit_3;
        }
        tmp_dictset_value = MAKE_FUNCTION_plistlib$$$function_25_end_key(  );



        tmp_res = PyObject_SetItem( locals_plistlib_247, const_str_plain_end_key, tmp_dictset_value );
        Py_DECREF( tmp_dictset_value );
        if ( tmp_res != 0 )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 311;
            type_description_2 = "o";
            goto frame_exception_exit_3;
        }
        tmp_dictset_value = MAKE_FUNCTION_plistlib$$$function_26_begin_array(  );



        tmp_res = PyObject_SetItem( locals_plistlib_247, const_str_plain_begin_array, tmp_dictset_value );
        Py_DECREF( tmp_dictset_value );
        if ( tmp_res != 0 )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 317;
            type_description_2 = "o";
            goto frame_exception_exit_3;
        }
        tmp_dictset_value = MAKE_FUNCTION_plistlib$$$function_27_end_array(  );



        tmp_res = PyObject_SetItem( locals_plistlib_247, const_str_plain_end_array, tmp_dictset_value );
        Py_DECREF( tmp_dictset_value );
        if ( tmp_res != 0 )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 322;
            type_description_2 = "o";
            goto frame_exception_exit_3;
        }
        tmp_dictset_value = MAKE_FUNCTION_plistlib$$$function_28_end_true(  );



        tmp_res = PyObject_SetItem( locals_plistlib_247, const_str_plain_end_true, tmp_dictset_value );
        Py_DECREF( tmp_dictset_value );
        if ( tmp_res != 0 )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 325;
            type_description_2 = "o";
            goto frame_exception_exit_3;
        }
        tmp_dictset_value = MAKE_FUNCTION_plistlib$$$function_29_end_false(  );



        tmp_res = PyObject_SetItem( locals_plistlib_247, const_str_plain_end_false, tmp_dictset_value );
        Py_DECREF( tmp_dictset_value );
        if ( tmp_res != 0 )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 328;
            type_description_2 = "o";
            goto frame_exception_exit_3;
        }
        tmp_dictset_value = MAKE_FUNCTION_plistlib$$$function_30_end_integer(  );



        tmp_res = PyObject_SetItem( locals_plistlib_247, const_str_plain_end_integer, tmp_dictset_value );
        Py_DECREF( tmp_dictset_value );
        if ( tmp_res != 0 )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 331;
            type_description_2 = "o";
            goto frame_exception_exit_3;
        }
        tmp_dictset_value = MAKE_FUNCTION_plistlib$$$function_31_end_real(  );



        tmp_res = PyObject_SetItem( locals_plistlib_247, const_str_plain_end_real, tmp_dictset_value );
        Py_DECREF( tmp_dictset_value );
        if ( tmp_res != 0 )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 334;
            type_description_2 = "o";
            goto frame_exception_exit_3;
        }
        tmp_dictset_value = MAKE_FUNCTION_plistlib$$$function_32_end_string(  );



        tmp_res = PyObject_SetItem( locals_plistlib_247, const_str_plain_end_string, tmp_dictset_value );
        Py_DECREF( tmp_dictset_value );
        if ( tmp_res != 0 )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 337;
            type_description_2 = "o";
            goto frame_exception_exit_3;
        }
        tmp_dictset_value = MAKE_FUNCTION_plistlib$$$function_33_end_data(  );



        tmp_res = PyObject_SetItem( locals_plistlib_247, const_str_plain_end_data, tmp_dictset_value );
        Py_DECREF( tmp_dictset_value );
        if ( tmp_res != 0 )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 340;
            type_description_2 = "o";
            goto frame_exception_exit_3;
        }
        tmp_dictset_value = MAKE_FUNCTION_plistlib$$$function_34_end_date(  );



        tmp_res = PyObject_SetItem( locals_plistlib_247, const_str_plain_end_date, tmp_dictset_value );
        Py_DECREF( tmp_dictset_value );
        if ( tmp_res != 0 )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 347;
            type_description_2 = "o";
            goto frame_exception_exit_3;
        }

#if 0
        RESTORE_FRAME_EXCEPTION( frame_e67d9a4f703826ca272037e679cd200c_3 );
#endif

        // Put the previous frame back on top.
        popFrameStack();

        goto frame_no_exception_2;

        frame_exception_exit_3:;

#if 0
        RESTORE_FRAME_EXCEPTION( frame_e67d9a4f703826ca272037e679cd200c_3 );
#endif

        if ( exception_tb == NULL )
        {
            exception_tb = MAKE_TRACEBACK( frame_e67d9a4f703826ca272037e679cd200c_3, exception_lineno );
        }
        else if ( exception_tb->tb_frame != &frame_e67d9a4f703826ca272037e679cd200c_3->m_frame )
        {
            exception_tb = ADD_TRACEBACK( exception_tb, frame_e67d9a4f703826ca272037e679cd200c_3, exception_lineno );
        }

        // Attachs locals to frame if any.
        Nuitka_Frame_AttachLocals(
            (struct Nuitka_FrameObject *)frame_e67d9a4f703826ca272037e679cd200c_3,
            type_description_2,
            outline_1_var___class__
        );


        // Release cached frame.
        if ( frame_e67d9a4f703826ca272037e679cd200c_3 == cache_frame_e67d9a4f703826ca272037e679cd200c_3 )
        {
            Py_DECREF( frame_e67d9a4f703826ca272037e679cd200c_3 );
        }
        cache_frame_e67d9a4f703826ca272037e679cd200c_3 = NULL;

        assertFrameObject( frame_e67d9a4f703826ca272037e679cd200c_3 );

        // Put the previous frame back on top.
        popFrameStack();

        // Return the error.
        goto nested_frame_exit_2;

        frame_no_exception_2:;
        goto skip_nested_handling_2;
        nested_frame_exit_2:;

        goto try_except_handler_6;
        skip_nested_handling_2:;
        {
            PyObject *tmp_assign_source_42;
            PyObject *tmp_called_name_8;
            PyObject *tmp_args_name_5;
            PyObject *tmp_tuple_element_4;
            PyObject *tmp_kw_name_5;
            CHECK_OBJECT( tmp_class_creation_2__metaclass );
            tmp_called_name_8 = tmp_class_creation_2__metaclass;
            tmp_tuple_element_4 = const_str_plain__PlistParser;
            tmp_args_name_5 = PyTuple_New( 3 );
            Py_INCREF( tmp_tuple_element_4 );
            PyTuple_SET_ITEM( tmp_args_name_5, 0, tmp_tuple_element_4 );
            tmp_tuple_element_4 = const_tuple_empty;
            Py_INCREF( tmp_tuple_element_4 );
            PyTuple_SET_ITEM( tmp_args_name_5, 1, tmp_tuple_element_4 );
            tmp_tuple_element_4 = locals_plistlib_247;
            Py_INCREF( tmp_tuple_element_4 );
            PyTuple_SET_ITEM( tmp_args_name_5, 2, tmp_tuple_element_4 );
            CHECK_OBJECT( tmp_class_creation_2__class_decl_dict );
            tmp_kw_name_5 = tmp_class_creation_2__class_decl_dict;
            frame_6a6219654a078aede7e40aaccdae8e56->m_frame.f_lineno = 247;
            tmp_assign_source_42 = CALL_FUNCTION( tmp_called_name_8, tmp_args_name_5, tmp_kw_name_5 );
            Py_DECREF( tmp_args_name_5 );
            if ( tmp_assign_source_42 == NULL )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 247;

                goto try_except_handler_6;
            }
            assert( outline_1_var___class__ == NULL );
            outline_1_var___class__ = tmp_assign_source_42;
        }
        CHECK_OBJECT( outline_1_var___class__ );
        tmp_assign_source_41 = outline_1_var___class__;
        Py_INCREF( tmp_assign_source_41 );
        goto try_return_handler_6;
        // tried codes exits in all cases
        NUITKA_CANNOT_GET_HERE( plistlib );
        return MOD_RETURN_VALUE( NULL );
        // Return handler code:
        try_return_handler_6:;
        Py_DECREF( locals_plistlib_247 );
        locals_plistlib_247 = NULL;
        goto try_return_handler_5;
        // Exception handler code:
        try_except_handler_6:;
        exception_keeper_type_4 = exception_type;
        exception_keeper_value_4 = exception_value;
        exception_keeper_tb_4 = exception_tb;
        exception_keeper_lineno_4 = exception_lineno;
        exception_type = NULL;
        exception_value = NULL;
        exception_tb = NULL;
        exception_lineno = 0;

        Py_DECREF( locals_plistlib_247 );
        locals_plistlib_247 = NULL;
        // Re-raise.
        exception_type = exception_keeper_type_4;
        exception_value = exception_keeper_value_4;
        exception_tb = exception_keeper_tb_4;
        exception_lineno = exception_keeper_lineno_4;

        goto try_except_handler_5;
        // End of try:
        // tried codes exits in all cases
        NUITKA_CANNOT_GET_HERE( plistlib );
        return MOD_RETURN_VALUE( NULL );
        // Return handler code:
        try_return_handler_5:;
        CHECK_OBJECT( (PyObject *)outline_1_var___class__ );
        Py_DECREF( outline_1_var___class__ );
        outline_1_var___class__ = NULL;

        goto outline_result_2;
        // Exception handler code:
        try_except_handler_5:;
        exception_keeper_type_5 = exception_type;
        exception_keeper_value_5 = exception_value;
        exception_keeper_tb_5 = exception_tb;
        exception_keeper_lineno_5 = exception_lineno;
        exception_type = NULL;
        exception_value = NULL;
        exception_tb = NULL;
        exception_lineno = 0;

        // Re-raise.
        exception_type = exception_keeper_type_5;
        exception_value = exception_keeper_value_5;
        exception_tb = exception_keeper_tb_5;
        exception_lineno = exception_keeper_lineno_5;

        goto outline_exception_2;
        // End of try:
        // Return statement must have exited already.
        NUITKA_CANNOT_GET_HERE( plistlib );
        return MOD_RETURN_VALUE( NULL );
        outline_exception_2:;
        exception_lineno = 247;
        goto try_except_handler_4;
        outline_result_2:;
        UPDATE_STRING_DICT1( moduledict_plistlib, (Nuitka_StringObject *)const_str_plain__PlistParser, tmp_assign_source_41 );
    }
    goto try_end_2;
    // Exception handler code:
    try_except_handler_4:;
    exception_keeper_type_6 = exception_type;
    exception_keeper_value_6 = exception_value;
    exception_keeper_tb_6 = exception_tb;
    exception_keeper_lineno_6 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    CHECK_OBJECT( (PyObject *)tmp_class_creation_2__class_decl_dict );
    Py_DECREF( tmp_class_creation_2__class_decl_dict );
    tmp_class_creation_2__class_decl_dict = NULL;

    Py_XDECREF( tmp_class_creation_2__metaclass );
    tmp_class_creation_2__metaclass = NULL;

    Py_XDECREF( tmp_class_creation_2__prepared );
    tmp_class_creation_2__prepared = NULL;

    // Re-raise.
    exception_type = exception_keeper_type_6;
    exception_value = exception_keeper_value_6;
    exception_tb = exception_keeper_tb_6;
    exception_lineno = exception_keeper_lineno_6;

    goto frame_exception_exit_1;
    // End of try:
    try_end_2:;
    CHECK_OBJECT( (PyObject *)tmp_class_creation_2__class_decl_dict );
    Py_DECREF( tmp_class_creation_2__class_decl_dict );
    tmp_class_creation_2__class_decl_dict = NULL;

    CHECK_OBJECT( (PyObject *)tmp_class_creation_2__metaclass );
    Py_DECREF( tmp_class_creation_2__metaclass );
    tmp_class_creation_2__metaclass = NULL;

    CHECK_OBJECT( (PyObject *)tmp_class_creation_2__prepared );
    Py_DECREF( tmp_class_creation_2__prepared );
    tmp_class_creation_2__prepared = NULL;

    {
        PyObject *tmp_assign_source_43;
        tmp_assign_source_43 = PyDict_New();
        assert( tmp_class_creation_3__class_decl_dict == NULL );
        tmp_class_creation_3__class_decl_dict = tmp_assign_source_43;
    }
    // Tried code:
    {
        PyObject *tmp_assign_source_44;
        PyObject *tmp_metaclass_name_3;
        nuitka_bool tmp_condition_result_10;
        PyObject *tmp_key_name_7;
        PyObject *tmp_dict_name_7;
        PyObject *tmp_dict_name_8;
        PyObject *tmp_key_name_8;
        PyObject *tmp_bases_name_3;
        tmp_key_name_7 = const_str_plain_metaclass;
        CHECK_OBJECT( tmp_class_creation_3__class_decl_dict );
        tmp_dict_name_7 = tmp_class_creation_3__class_decl_dict;
        tmp_res = PyDict_Contains( tmp_dict_name_7, tmp_key_name_7 );
        if ( tmp_res == -1 )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 351;

            goto try_except_handler_7;
        }
        tmp_condition_result_10 = ( tmp_res != 0 ) ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
        if ( tmp_condition_result_10 == NUITKA_BOOL_TRUE )
        {
            goto condexpr_true_4;
        }
        else
        {
            goto condexpr_false_4;
        }
        condexpr_true_4:;
        CHECK_OBJECT( tmp_class_creation_3__class_decl_dict );
        tmp_dict_name_8 = tmp_class_creation_3__class_decl_dict;
        tmp_key_name_8 = const_str_plain_metaclass;
        tmp_metaclass_name_3 = DICT_GET_ITEM( tmp_dict_name_8, tmp_key_name_8 );
        if ( tmp_metaclass_name_3 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 351;

            goto try_except_handler_7;
        }
        goto condexpr_end_4;
        condexpr_false_4:;
        tmp_metaclass_name_3 = (PyObject *)&PyType_Type;
        Py_INCREF( tmp_metaclass_name_3 );
        condexpr_end_4:;
        tmp_bases_name_3 = const_tuple_empty;
        tmp_assign_source_44 = SELECT_METACLASS( tmp_metaclass_name_3, tmp_bases_name_3 );
        Py_DECREF( tmp_metaclass_name_3 );
        if ( tmp_assign_source_44 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 351;

            goto try_except_handler_7;
        }
        assert( tmp_class_creation_3__metaclass == NULL );
        tmp_class_creation_3__metaclass = tmp_assign_source_44;
    }
    {
        nuitka_bool tmp_condition_result_11;
        PyObject *tmp_key_name_9;
        PyObject *tmp_dict_name_9;
        tmp_key_name_9 = const_str_plain_metaclass;
        CHECK_OBJECT( tmp_class_creation_3__class_decl_dict );
        tmp_dict_name_9 = tmp_class_creation_3__class_decl_dict;
        tmp_res = PyDict_Contains( tmp_dict_name_9, tmp_key_name_9 );
        if ( tmp_res == -1 )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 351;

            goto try_except_handler_7;
        }
        tmp_condition_result_11 = ( tmp_res != 0 ) ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
        if ( tmp_condition_result_11 == NUITKA_BOOL_TRUE )
        {
            goto branch_yes_7;
        }
        else
        {
            goto branch_no_7;
        }
        branch_yes_7:;
        CHECK_OBJECT( tmp_class_creation_3__class_decl_dict );
        tmp_dictdel_dict = tmp_class_creation_3__class_decl_dict;
        tmp_dictdel_key = const_str_plain_metaclass;
        tmp_result = DICT_REMOVE_ITEM( tmp_dictdel_dict, tmp_dictdel_key );
        if ( tmp_result == false )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 351;

            goto try_except_handler_7;
        }
        branch_no_7:;
    }
    {
        nuitka_bool tmp_condition_result_12;
        PyObject *tmp_source_name_14;
        CHECK_OBJECT( tmp_class_creation_3__metaclass );
        tmp_source_name_14 = tmp_class_creation_3__metaclass;
        tmp_res = PyObject_HasAttr( tmp_source_name_14, const_str_plain___prepare__ );
        tmp_condition_result_12 = ( tmp_res != 0 ) ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
        if ( tmp_condition_result_12 == NUITKA_BOOL_TRUE )
        {
            goto branch_yes_8;
        }
        else
        {
            goto branch_no_8;
        }
        branch_yes_8:;
        {
            PyObject *tmp_assign_source_45;
            PyObject *tmp_called_name_9;
            PyObject *tmp_source_name_15;
            PyObject *tmp_args_name_6;
            PyObject *tmp_kw_name_6;
            CHECK_OBJECT( tmp_class_creation_3__metaclass );
            tmp_source_name_15 = tmp_class_creation_3__metaclass;
            tmp_called_name_9 = LOOKUP_ATTRIBUTE( tmp_source_name_15, const_str_plain___prepare__ );
            if ( tmp_called_name_9 == NULL )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 351;

                goto try_except_handler_7;
            }
            tmp_args_name_6 = const_tuple_str_plain__DumbXMLWriter_tuple_empty_tuple;
            CHECK_OBJECT( tmp_class_creation_3__class_decl_dict );
            tmp_kw_name_6 = tmp_class_creation_3__class_decl_dict;
            frame_6a6219654a078aede7e40aaccdae8e56->m_frame.f_lineno = 351;
            tmp_assign_source_45 = CALL_FUNCTION( tmp_called_name_9, tmp_args_name_6, tmp_kw_name_6 );
            Py_DECREF( tmp_called_name_9 );
            if ( tmp_assign_source_45 == NULL )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 351;

                goto try_except_handler_7;
            }
            assert( tmp_class_creation_3__prepared == NULL );
            tmp_class_creation_3__prepared = tmp_assign_source_45;
        }
        {
            nuitka_bool tmp_condition_result_13;
            PyObject *tmp_operand_name_3;
            PyObject *tmp_source_name_16;
            CHECK_OBJECT( tmp_class_creation_3__prepared );
            tmp_source_name_16 = tmp_class_creation_3__prepared;
            tmp_res = PyObject_HasAttr( tmp_source_name_16, const_str_plain___getitem__ );
            tmp_operand_name_3 = ( tmp_res != 0 ) ? Py_True : Py_False;
            tmp_res = CHECK_IF_TRUE( tmp_operand_name_3 );
            if ( tmp_res == -1 )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 351;

                goto try_except_handler_7;
            }
            tmp_condition_result_13 = ( tmp_res == 0 ) ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
            if ( tmp_condition_result_13 == NUITKA_BOOL_TRUE )
            {
                goto branch_yes_9;
            }
            else
            {
                goto branch_no_9;
            }
            branch_yes_9:;
            {
                PyObject *tmp_raise_type_3;
                PyObject *tmp_raise_value_3;
                PyObject *tmp_left_name_3;
                PyObject *tmp_right_name_3;
                PyObject *tmp_tuple_element_5;
                PyObject *tmp_getattr_target_3;
                PyObject *tmp_getattr_attr_3;
                PyObject *tmp_getattr_default_3;
                PyObject *tmp_source_name_17;
                PyObject *tmp_type_arg_3;
                tmp_raise_type_3 = PyExc_TypeError;
                tmp_left_name_3 = const_str_digest_75fd71b1edada749c2ef7ac810062295;
                CHECK_OBJECT( tmp_class_creation_3__metaclass );
                tmp_getattr_target_3 = tmp_class_creation_3__metaclass;
                tmp_getattr_attr_3 = const_str_plain___name__;
                tmp_getattr_default_3 = const_str_angle_metaclass;
                tmp_tuple_element_5 = BUILTIN_GETATTR( tmp_getattr_target_3, tmp_getattr_attr_3, tmp_getattr_default_3 );
                if ( tmp_tuple_element_5 == NULL )
                {
                    assert( ERROR_OCCURRED() );

                    FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                    exception_lineno = 351;

                    goto try_except_handler_7;
                }
                tmp_right_name_3 = PyTuple_New( 2 );
                PyTuple_SET_ITEM( tmp_right_name_3, 0, tmp_tuple_element_5 );
                CHECK_OBJECT( tmp_class_creation_3__prepared );
                tmp_type_arg_3 = tmp_class_creation_3__prepared;
                tmp_source_name_17 = BUILTIN_TYPE1( tmp_type_arg_3 );
                assert( !(tmp_source_name_17 == NULL) );
                tmp_tuple_element_5 = LOOKUP_ATTRIBUTE( tmp_source_name_17, const_str_plain___name__ );
                Py_DECREF( tmp_source_name_17 );
                if ( tmp_tuple_element_5 == NULL )
                {
                    assert( ERROR_OCCURRED() );

                    FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
                    Py_DECREF( tmp_right_name_3 );

                    exception_lineno = 351;

                    goto try_except_handler_7;
                }
                PyTuple_SET_ITEM( tmp_right_name_3, 1, tmp_tuple_element_5 );
                tmp_raise_value_3 = BINARY_OPERATION_REMAINDER( tmp_left_name_3, tmp_right_name_3 );
                Py_DECREF( tmp_right_name_3 );
                if ( tmp_raise_value_3 == NULL )
                {
                    assert( ERROR_OCCURRED() );

                    FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                    exception_lineno = 351;

                    goto try_except_handler_7;
                }
                exception_type = tmp_raise_type_3;
                Py_INCREF( tmp_raise_type_3 );
                exception_value = tmp_raise_value_3;
                exception_lineno = 351;
                RAISE_EXCEPTION_IMPLICIT( &exception_type, &exception_value, &exception_tb );

                goto try_except_handler_7;
            }
            branch_no_9:;
        }
        goto branch_end_8;
        branch_no_8:;
        {
            PyObject *tmp_assign_source_46;
            tmp_assign_source_46 = PyDict_New();
            assert( tmp_class_creation_3__prepared == NULL );
            tmp_class_creation_3__prepared = tmp_assign_source_46;
        }
        branch_end_8:;
    }
    {
        PyObject *tmp_assign_source_47;
        {
            PyObject *tmp_set_locals_3;
            CHECK_OBJECT( tmp_class_creation_3__prepared );
            tmp_set_locals_3 = tmp_class_creation_3__prepared;
            locals_plistlib_351 = tmp_set_locals_3;
            Py_INCREF( tmp_set_locals_3 );
        }
        // Tried code:
        // Tried code:
        tmp_dictset_value = const_str_plain_plistlib;
        tmp_res = PyObject_SetItem( locals_plistlib_351, const_str_plain___module__, tmp_dictset_value );
        if ( tmp_res != 0 )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 351;

            goto try_except_handler_9;
        }
        tmp_dictset_value = const_str_plain__DumbXMLWriter;
        tmp_res = PyObject_SetItem( locals_plistlib_351, const_str_plain___qualname__, tmp_dictset_value );
        if ( tmp_res != 0 )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 351;

            goto try_except_handler_9;
        }
        MAKE_OR_REUSE_FRAME( cache_frame_d7b3abeaeedf39c2eb398bdd3372b84e_4, codeobj_d7b3abeaeedf39c2eb398bdd3372b84e, module_plistlib, sizeof(void *) );
        frame_d7b3abeaeedf39c2eb398bdd3372b84e_4 = cache_frame_d7b3abeaeedf39c2eb398bdd3372b84e_4;

        // Push the new frame as the currently active one.
        pushFrameStack( frame_d7b3abeaeedf39c2eb398bdd3372b84e_4 );

        // Mark the frame object as in use, ref count 1 will be up for reuse.
        assert( Py_REFCNT( frame_d7b3abeaeedf39c2eb398bdd3372b84e_4 ) == 2 ); // Frame stack

        // Framed code:
        {
            PyObject *tmp_defaults_3;
            tmp_defaults_3 = const_tuple_int_0_str_chr_9_tuple;
            Py_INCREF( tmp_defaults_3 );
            tmp_dictset_value = MAKE_FUNCTION_plistlib$$$function_35___init__( tmp_defaults_3 );



            tmp_res = PyObject_SetItem( locals_plistlib_351, const_str_plain___init__, tmp_dictset_value );
            Py_DECREF( tmp_dictset_value );
            if ( tmp_res != 0 )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 352;
                type_description_2 = "o";
                goto frame_exception_exit_4;
            }
        }
        tmp_dictset_value = MAKE_FUNCTION_plistlib$$$function_36_begin_element(  );



        tmp_res = PyObject_SetItem( locals_plistlib_351, const_str_plain_begin_element, tmp_dictset_value );
        Py_DECREF( tmp_dictset_value );
        if ( tmp_res != 0 )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 358;
            type_description_2 = "o";
            goto frame_exception_exit_4;
        }
        tmp_dictset_value = MAKE_FUNCTION_plistlib$$$function_37_end_element(  );



        tmp_res = PyObject_SetItem( locals_plistlib_351, const_str_plain_end_element, tmp_dictset_value );
        Py_DECREF( tmp_dictset_value );
        if ( tmp_res != 0 )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 363;
            type_description_2 = "o";
            goto frame_exception_exit_4;
        }
        {
            PyObject *tmp_defaults_4;
            tmp_defaults_4 = const_tuple_none_tuple;
            Py_INCREF( tmp_defaults_4 );
            tmp_dictset_value = MAKE_FUNCTION_plistlib$$$function_38_simple_element( tmp_defaults_4 );



            tmp_res = PyObject_SetItem( locals_plistlib_351, const_str_plain_simple_element, tmp_dictset_value );
            Py_DECREF( tmp_dictset_value );
            if ( tmp_res != 0 )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 369;
                type_description_2 = "o";
                goto frame_exception_exit_4;
            }
        }
        tmp_dictset_value = MAKE_FUNCTION_plistlib$$$function_39_writeln(  );



        tmp_res = PyObject_SetItem( locals_plistlib_351, const_str_plain_writeln, tmp_dictset_value );
        Py_DECREF( tmp_dictset_value );
        if ( tmp_res != 0 )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 377;
            type_description_2 = "o";
            goto frame_exception_exit_4;
        }

#if 0
        RESTORE_FRAME_EXCEPTION( frame_d7b3abeaeedf39c2eb398bdd3372b84e_4 );
#endif

        // Put the previous frame back on top.
        popFrameStack();

        goto frame_no_exception_3;

        frame_exception_exit_4:;

#if 0
        RESTORE_FRAME_EXCEPTION( frame_d7b3abeaeedf39c2eb398bdd3372b84e_4 );
#endif

        if ( exception_tb == NULL )
        {
            exception_tb = MAKE_TRACEBACK( frame_d7b3abeaeedf39c2eb398bdd3372b84e_4, exception_lineno );
        }
        else if ( exception_tb->tb_frame != &frame_d7b3abeaeedf39c2eb398bdd3372b84e_4->m_frame )
        {
            exception_tb = ADD_TRACEBACK( exception_tb, frame_d7b3abeaeedf39c2eb398bdd3372b84e_4, exception_lineno );
        }

        // Attachs locals to frame if any.
        Nuitka_Frame_AttachLocals(
            (struct Nuitka_FrameObject *)frame_d7b3abeaeedf39c2eb398bdd3372b84e_4,
            type_description_2,
            outline_2_var___class__
        );


        // Release cached frame.
        if ( frame_d7b3abeaeedf39c2eb398bdd3372b84e_4 == cache_frame_d7b3abeaeedf39c2eb398bdd3372b84e_4 )
        {
            Py_DECREF( frame_d7b3abeaeedf39c2eb398bdd3372b84e_4 );
        }
        cache_frame_d7b3abeaeedf39c2eb398bdd3372b84e_4 = NULL;

        assertFrameObject( frame_d7b3abeaeedf39c2eb398bdd3372b84e_4 );

        // Put the previous frame back on top.
        popFrameStack();

        // Return the error.
        goto nested_frame_exit_3;

        frame_no_exception_3:;
        goto skip_nested_handling_3;
        nested_frame_exit_3:;

        goto try_except_handler_9;
        skip_nested_handling_3:;
        {
            PyObject *tmp_assign_source_48;
            PyObject *tmp_called_name_10;
            PyObject *tmp_args_name_7;
            PyObject *tmp_tuple_element_6;
            PyObject *tmp_kw_name_7;
            CHECK_OBJECT( tmp_class_creation_3__metaclass );
            tmp_called_name_10 = tmp_class_creation_3__metaclass;
            tmp_tuple_element_6 = const_str_plain__DumbXMLWriter;
            tmp_args_name_7 = PyTuple_New( 3 );
            Py_INCREF( tmp_tuple_element_6 );
            PyTuple_SET_ITEM( tmp_args_name_7, 0, tmp_tuple_element_6 );
            tmp_tuple_element_6 = const_tuple_empty;
            Py_INCREF( tmp_tuple_element_6 );
            PyTuple_SET_ITEM( tmp_args_name_7, 1, tmp_tuple_element_6 );
            tmp_tuple_element_6 = locals_plistlib_351;
            Py_INCREF( tmp_tuple_element_6 );
            PyTuple_SET_ITEM( tmp_args_name_7, 2, tmp_tuple_element_6 );
            CHECK_OBJECT( tmp_class_creation_3__class_decl_dict );
            tmp_kw_name_7 = tmp_class_creation_3__class_decl_dict;
            frame_6a6219654a078aede7e40aaccdae8e56->m_frame.f_lineno = 351;
            tmp_assign_source_48 = CALL_FUNCTION( tmp_called_name_10, tmp_args_name_7, tmp_kw_name_7 );
            Py_DECREF( tmp_args_name_7 );
            if ( tmp_assign_source_48 == NULL )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 351;

                goto try_except_handler_9;
            }
            assert( outline_2_var___class__ == NULL );
            outline_2_var___class__ = tmp_assign_source_48;
        }
        CHECK_OBJECT( outline_2_var___class__ );
        tmp_assign_source_47 = outline_2_var___class__;
        Py_INCREF( tmp_assign_source_47 );
        goto try_return_handler_9;
        // tried codes exits in all cases
        NUITKA_CANNOT_GET_HERE( plistlib );
        return MOD_RETURN_VALUE( NULL );
        // Return handler code:
        try_return_handler_9:;
        Py_DECREF( locals_plistlib_351 );
        locals_plistlib_351 = NULL;
        goto try_return_handler_8;
        // Exception handler code:
        try_except_handler_9:;
        exception_keeper_type_7 = exception_type;
        exception_keeper_value_7 = exception_value;
        exception_keeper_tb_7 = exception_tb;
        exception_keeper_lineno_7 = exception_lineno;
        exception_type = NULL;
        exception_value = NULL;
        exception_tb = NULL;
        exception_lineno = 0;

        Py_DECREF( locals_plistlib_351 );
        locals_plistlib_351 = NULL;
        // Re-raise.
        exception_type = exception_keeper_type_7;
        exception_value = exception_keeper_value_7;
        exception_tb = exception_keeper_tb_7;
        exception_lineno = exception_keeper_lineno_7;

        goto try_except_handler_8;
        // End of try:
        // tried codes exits in all cases
        NUITKA_CANNOT_GET_HERE( plistlib );
        return MOD_RETURN_VALUE( NULL );
        // Return handler code:
        try_return_handler_8:;
        CHECK_OBJECT( (PyObject *)outline_2_var___class__ );
        Py_DECREF( outline_2_var___class__ );
        outline_2_var___class__ = NULL;

        goto outline_result_3;
        // Exception handler code:
        try_except_handler_8:;
        exception_keeper_type_8 = exception_type;
        exception_keeper_value_8 = exception_value;
        exception_keeper_tb_8 = exception_tb;
        exception_keeper_lineno_8 = exception_lineno;
        exception_type = NULL;
        exception_value = NULL;
        exception_tb = NULL;
        exception_lineno = 0;

        // Re-raise.
        exception_type = exception_keeper_type_8;
        exception_value = exception_keeper_value_8;
        exception_tb = exception_keeper_tb_8;
        exception_lineno = exception_keeper_lineno_8;

        goto outline_exception_3;
        // End of try:
        // Return statement must have exited already.
        NUITKA_CANNOT_GET_HERE( plistlib );
        return MOD_RETURN_VALUE( NULL );
        outline_exception_3:;
        exception_lineno = 351;
        goto try_except_handler_7;
        outline_result_3:;
        UPDATE_STRING_DICT1( moduledict_plistlib, (Nuitka_StringObject *)const_str_plain__DumbXMLWriter, tmp_assign_source_47 );
    }
    goto try_end_3;
    // Exception handler code:
    try_except_handler_7:;
    exception_keeper_type_9 = exception_type;
    exception_keeper_value_9 = exception_value;
    exception_keeper_tb_9 = exception_tb;
    exception_keeper_lineno_9 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    CHECK_OBJECT( (PyObject *)tmp_class_creation_3__class_decl_dict );
    Py_DECREF( tmp_class_creation_3__class_decl_dict );
    tmp_class_creation_3__class_decl_dict = NULL;

    Py_XDECREF( tmp_class_creation_3__metaclass );
    tmp_class_creation_3__metaclass = NULL;

    Py_XDECREF( tmp_class_creation_3__prepared );
    tmp_class_creation_3__prepared = NULL;

    // Re-raise.
    exception_type = exception_keeper_type_9;
    exception_value = exception_keeper_value_9;
    exception_tb = exception_keeper_tb_9;
    exception_lineno = exception_keeper_lineno_9;

    goto frame_exception_exit_1;
    // End of try:
    try_end_3:;
    CHECK_OBJECT( (PyObject *)tmp_class_creation_3__class_decl_dict );
    Py_DECREF( tmp_class_creation_3__class_decl_dict );
    tmp_class_creation_3__class_decl_dict = NULL;

    CHECK_OBJECT( (PyObject *)tmp_class_creation_3__metaclass );
    Py_DECREF( tmp_class_creation_3__metaclass );
    tmp_class_creation_3__metaclass = NULL;

    CHECK_OBJECT( (PyObject *)tmp_class_creation_3__prepared );
    Py_DECREF( tmp_class_creation_3__prepared );
    tmp_class_creation_3__prepared = NULL;

    // Tried code:
    {
        PyObject *tmp_assign_source_49;
        PyObject *tmp_tuple_element_7;
        PyObject *tmp_mvar_value_9;
        tmp_mvar_value_9 = GET_STRING_DICT_VALUE( moduledict_plistlib, (Nuitka_StringObject *)const_str_plain__DumbXMLWriter );

        if (unlikely( tmp_mvar_value_9 == NULL ))
        {
            tmp_mvar_value_9 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain__DumbXMLWriter );
        }

        if ( tmp_mvar_value_9 == NULL )
        {

            exception_type = PyExc_NameError;
            Py_INCREF( exception_type );
            exception_value = PyUnicode_FromFormat( "name '%s' is not defined", "_DumbXMLWriter" );
            exception_tb = NULL;
            NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
            CHAIN_EXCEPTION( exception_value );

            exception_lineno = 389;

            goto try_except_handler_10;
        }

        tmp_tuple_element_7 = tmp_mvar_value_9;
        tmp_assign_source_49 = PyTuple_New( 1 );
        Py_INCREF( tmp_tuple_element_7 );
        PyTuple_SET_ITEM( tmp_assign_source_49, 0, tmp_tuple_element_7 );
        assert( tmp_class_creation_4__bases_orig == NULL );
        tmp_class_creation_4__bases_orig = tmp_assign_source_49;
    }
    {
        PyObject *tmp_assign_source_50;
        PyObject *tmp_dircall_arg1_1;
        CHECK_OBJECT( tmp_class_creation_4__bases_orig );
        tmp_dircall_arg1_1 = tmp_class_creation_4__bases_orig;
        Py_INCREF( tmp_dircall_arg1_1 );

        {
            PyObject *dir_call_args[] = {tmp_dircall_arg1_1};
            tmp_assign_source_50 = impl___internal__$$$function_1__mro_entries_conversion( dir_call_args );
        }
        if ( tmp_assign_source_50 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 389;

            goto try_except_handler_10;
        }
        assert( tmp_class_creation_4__bases == NULL );
        tmp_class_creation_4__bases = tmp_assign_source_50;
    }
    {
        PyObject *tmp_assign_source_51;
        tmp_assign_source_51 = PyDict_New();
        assert( tmp_class_creation_4__class_decl_dict == NULL );
        tmp_class_creation_4__class_decl_dict = tmp_assign_source_51;
    }
    {
        PyObject *tmp_assign_source_52;
        PyObject *tmp_metaclass_name_4;
        nuitka_bool tmp_condition_result_14;
        PyObject *tmp_key_name_10;
        PyObject *tmp_dict_name_10;
        PyObject *tmp_dict_name_11;
        PyObject *tmp_key_name_11;
        nuitka_bool tmp_condition_result_15;
        int tmp_truth_name_1;
        PyObject *tmp_type_arg_4;
        PyObject *tmp_subscribed_name_1;
        PyObject *tmp_subscript_name_1;
        PyObject *tmp_bases_name_4;
        tmp_key_name_10 = const_str_plain_metaclass;
        CHECK_OBJECT( tmp_class_creation_4__class_decl_dict );
        tmp_dict_name_10 = tmp_class_creation_4__class_decl_dict;
        tmp_res = PyDict_Contains( tmp_dict_name_10, tmp_key_name_10 );
        if ( tmp_res == -1 )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 389;

            goto try_except_handler_10;
        }
        tmp_condition_result_14 = ( tmp_res != 0 ) ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
        if ( tmp_condition_result_14 == NUITKA_BOOL_TRUE )
        {
            goto condexpr_true_5;
        }
        else
        {
            goto condexpr_false_5;
        }
        condexpr_true_5:;
        CHECK_OBJECT( tmp_class_creation_4__class_decl_dict );
        tmp_dict_name_11 = tmp_class_creation_4__class_decl_dict;
        tmp_key_name_11 = const_str_plain_metaclass;
        tmp_metaclass_name_4 = DICT_GET_ITEM( tmp_dict_name_11, tmp_key_name_11 );
        if ( tmp_metaclass_name_4 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 389;

            goto try_except_handler_10;
        }
        goto condexpr_end_5;
        condexpr_false_5:;
        CHECK_OBJECT( tmp_class_creation_4__bases );
        tmp_truth_name_1 = CHECK_IF_TRUE( tmp_class_creation_4__bases );
        if ( tmp_truth_name_1 == -1 )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 389;

            goto try_except_handler_10;
        }
        tmp_condition_result_15 = tmp_truth_name_1 == 1 ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
        if ( tmp_condition_result_15 == NUITKA_BOOL_TRUE )
        {
            goto condexpr_true_6;
        }
        else
        {
            goto condexpr_false_6;
        }
        condexpr_true_6:;
        CHECK_OBJECT( tmp_class_creation_4__bases );
        tmp_subscribed_name_1 = tmp_class_creation_4__bases;
        tmp_subscript_name_1 = const_int_0;
        tmp_type_arg_4 = LOOKUP_SUBSCRIPT_CONST( tmp_subscribed_name_1, tmp_subscript_name_1, 0 );
        if ( tmp_type_arg_4 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 389;

            goto try_except_handler_10;
        }
        tmp_metaclass_name_4 = BUILTIN_TYPE1( tmp_type_arg_4 );
        Py_DECREF( tmp_type_arg_4 );
        if ( tmp_metaclass_name_4 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 389;

            goto try_except_handler_10;
        }
        goto condexpr_end_6;
        condexpr_false_6:;
        tmp_metaclass_name_4 = (PyObject *)&PyType_Type;
        Py_INCREF( tmp_metaclass_name_4 );
        condexpr_end_6:;
        condexpr_end_5:;
        CHECK_OBJECT( tmp_class_creation_4__bases );
        tmp_bases_name_4 = tmp_class_creation_4__bases;
        tmp_assign_source_52 = SELECT_METACLASS( tmp_metaclass_name_4, tmp_bases_name_4 );
        Py_DECREF( tmp_metaclass_name_4 );
        if ( tmp_assign_source_52 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 389;

            goto try_except_handler_10;
        }
        assert( tmp_class_creation_4__metaclass == NULL );
        tmp_class_creation_4__metaclass = tmp_assign_source_52;
    }
    {
        nuitka_bool tmp_condition_result_16;
        PyObject *tmp_key_name_12;
        PyObject *tmp_dict_name_12;
        tmp_key_name_12 = const_str_plain_metaclass;
        CHECK_OBJECT( tmp_class_creation_4__class_decl_dict );
        tmp_dict_name_12 = tmp_class_creation_4__class_decl_dict;
        tmp_res = PyDict_Contains( tmp_dict_name_12, tmp_key_name_12 );
        if ( tmp_res == -1 )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 389;

            goto try_except_handler_10;
        }
        tmp_condition_result_16 = ( tmp_res != 0 ) ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
        if ( tmp_condition_result_16 == NUITKA_BOOL_TRUE )
        {
            goto branch_yes_10;
        }
        else
        {
            goto branch_no_10;
        }
        branch_yes_10:;
        CHECK_OBJECT( tmp_class_creation_4__class_decl_dict );
        tmp_dictdel_dict = tmp_class_creation_4__class_decl_dict;
        tmp_dictdel_key = const_str_plain_metaclass;
        tmp_result = DICT_REMOVE_ITEM( tmp_dictdel_dict, tmp_dictdel_key );
        if ( tmp_result == false )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 389;

            goto try_except_handler_10;
        }
        branch_no_10:;
    }
    {
        nuitka_bool tmp_condition_result_17;
        PyObject *tmp_source_name_18;
        CHECK_OBJECT( tmp_class_creation_4__metaclass );
        tmp_source_name_18 = tmp_class_creation_4__metaclass;
        tmp_res = PyObject_HasAttr( tmp_source_name_18, const_str_plain___prepare__ );
        tmp_condition_result_17 = ( tmp_res != 0 ) ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
        if ( tmp_condition_result_17 == NUITKA_BOOL_TRUE )
        {
            goto branch_yes_11;
        }
        else
        {
            goto branch_no_11;
        }
        branch_yes_11:;
        {
            PyObject *tmp_assign_source_53;
            PyObject *tmp_called_name_11;
            PyObject *tmp_source_name_19;
            PyObject *tmp_args_name_8;
            PyObject *tmp_tuple_element_8;
            PyObject *tmp_kw_name_8;
            CHECK_OBJECT( tmp_class_creation_4__metaclass );
            tmp_source_name_19 = tmp_class_creation_4__metaclass;
            tmp_called_name_11 = LOOKUP_ATTRIBUTE( tmp_source_name_19, const_str_plain___prepare__ );
            if ( tmp_called_name_11 == NULL )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 389;

                goto try_except_handler_10;
            }
            tmp_tuple_element_8 = const_str_plain__PlistWriter;
            tmp_args_name_8 = PyTuple_New( 2 );
            Py_INCREF( tmp_tuple_element_8 );
            PyTuple_SET_ITEM( tmp_args_name_8, 0, tmp_tuple_element_8 );
            CHECK_OBJECT( tmp_class_creation_4__bases );
            tmp_tuple_element_8 = tmp_class_creation_4__bases;
            Py_INCREF( tmp_tuple_element_8 );
            PyTuple_SET_ITEM( tmp_args_name_8, 1, tmp_tuple_element_8 );
            CHECK_OBJECT( tmp_class_creation_4__class_decl_dict );
            tmp_kw_name_8 = tmp_class_creation_4__class_decl_dict;
            frame_6a6219654a078aede7e40aaccdae8e56->m_frame.f_lineno = 389;
            tmp_assign_source_53 = CALL_FUNCTION( tmp_called_name_11, tmp_args_name_8, tmp_kw_name_8 );
            Py_DECREF( tmp_called_name_11 );
            Py_DECREF( tmp_args_name_8 );
            if ( tmp_assign_source_53 == NULL )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 389;

                goto try_except_handler_10;
            }
            assert( tmp_class_creation_4__prepared == NULL );
            tmp_class_creation_4__prepared = tmp_assign_source_53;
        }
        {
            nuitka_bool tmp_condition_result_18;
            PyObject *tmp_operand_name_4;
            PyObject *tmp_source_name_20;
            CHECK_OBJECT( tmp_class_creation_4__prepared );
            tmp_source_name_20 = tmp_class_creation_4__prepared;
            tmp_res = PyObject_HasAttr( tmp_source_name_20, const_str_plain___getitem__ );
            tmp_operand_name_4 = ( tmp_res != 0 ) ? Py_True : Py_False;
            tmp_res = CHECK_IF_TRUE( tmp_operand_name_4 );
            if ( tmp_res == -1 )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 389;

                goto try_except_handler_10;
            }
            tmp_condition_result_18 = ( tmp_res == 0 ) ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
            if ( tmp_condition_result_18 == NUITKA_BOOL_TRUE )
            {
                goto branch_yes_12;
            }
            else
            {
                goto branch_no_12;
            }
            branch_yes_12:;
            {
                PyObject *tmp_raise_type_4;
                PyObject *tmp_raise_value_4;
                PyObject *tmp_left_name_4;
                PyObject *tmp_right_name_4;
                PyObject *tmp_tuple_element_9;
                PyObject *tmp_getattr_target_4;
                PyObject *tmp_getattr_attr_4;
                PyObject *tmp_getattr_default_4;
                PyObject *tmp_source_name_21;
                PyObject *tmp_type_arg_5;
                tmp_raise_type_4 = PyExc_TypeError;
                tmp_left_name_4 = const_str_digest_75fd71b1edada749c2ef7ac810062295;
                CHECK_OBJECT( tmp_class_creation_4__metaclass );
                tmp_getattr_target_4 = tmp_class_creation_4__metaclass;
                tmp_getattr_attr_4 = const_str_plain___name__;
                tmp_getattr_default_4 = const_str_angle_metaclass;
                tmp_tuple_element_9 = BUILTIN_GETATTR( tmp_getattr_target_4, tmp_getattr_attr_4, tmp_getattr_default_4 );
                if ( tmp_tuple_element_9 == NULL )
                {
                    assert( ERROR_OCCURRED() );

                    FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                    exception_lineno = 389;

                    goto try_except_handler_10;
                }
                tmp_right_name_4 = PyTuple_New( 2 );
                PyTuple_SET_ITEM( tmp_right_name_4, 0, tmp_tuple_element_9 );
                CHECK_OBJECT( tmp_class_creation_4__prepared );
                tmp_type_arg_5 = tmp_class_creation_4__prepared;
                tmp_source_name_21 = BUILTIN_TYPE1( tmp_type_arg_5 );
                assert( !(tmp_source_name_21 == NULL) );
                tmp_tuple_element_9 = LOOKUP_ATTRIBUTE( tmp_source_name_21, const_str_plain___name__ );
                Py_DECREF( tmp_source_name_21 );
                if ( tmp_tuple_element_9 == NULL )
                {
                    assert( ERROR_OCCURRED() );

                    FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
                    Py_DECREF( tmp_right_name_4 );

                    exception_lineno = 389;

                    goto try_except_handler_10;
                }
                PyTuple_SET_ITEM( tmp_right_name_4, 1, tmp_tuple_element_9 );
                tmp_raise_value_4 = BINARY_OPERATION_REMAINDER( tmp_left_name_4, tmp_right_name_4 );
                Py_DECREF( tmp_right_name_4 );
                if ( tmp_raise_value_4 == NULL )
                {
                    assert( ERROR_OCCURRED() );

                    FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                    exception_lineno = 389;

                    goto try_except_handler_10;
                }
                exception_type = tmp_raise_type_4;
                Py_INCREF( tmp_raise_type_4 );
                exception_value = tmp_raise_value_4;
                exception_lineno = 389;
                RAISE_EXCEPTION_IMPLICIT( &exception_type, &exception_value, &exception_tb );

                goto try_except_handler_10;
            }
            branch_no_12:;
        }
        goto branch_end_11;
        branch_no_11:;
        {
            PyObject *tmp_assign_source_54;
            tmp_assign_source_54 = PyDict_New();
            assert( tmp_class_creation_4__prepared == NULL );
            tmp_class_creation_4__prepared = tmp_assign_source_54;
        }
        branch_end_11:;
    }
    {
        PyObject *tmp_assign_source_55;
        {
            PyObject *tmp_set_locals_4;
            CHECK_OBJECT( tmp_class_creation_4__prepared );
            tmp_set_locals_4 = tmp_class_creation_4__prepared;
            locals_plistlib_389 = tmp_set_locals_4;
            Py_INCREF( tmp_set_locals_4 );
        }
        // Tried code:
        // Tried code:
        tmp_dictset_value = const_str_plain_plistlib;
        tmp_res = PyObject_SetItem( locals_plistlib_389, const_str_plain___module__, tmp_dictset_value );
        if ( tmp_res != 0 )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 389;

            goto try_except_handler_12;
        }
        tmp_dictset_value = const_str_plain__PlistWriter;
        tmp_res = PyObject_SetItem( locals_plistlib_389, const_str_plain___qualname__, tmp_dictset_value );
        if ( tmp_res != 0 )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 389;

            goto try_except_handler_12;
        }
        MAKE_OR_REUSE_FRAME( cache_frame_cbfca6005e13c074f5180327fa6b5639_5, codeobj_cbfca6005e13c074f5180327fa6b5639, module_plistlib, sizeof(void *) );
        frame_cbfca6005e13c074f5180327fa6b5639_5 = cache_frame_cbfca6005e13c074f5180327fa6b5639_5;

        // Push the new frame as the currently active one.
        pushFrameStack( frame_cbfca6005e13c074f5180327fa6b5639_5 );

        // Mark the frame object as in use, ref count 1 will be up for reuse.
        assert( Py_REFCNT( frame_cbfca6005e13c074f5180327fa6b5639_5 ) == 2 ); // Frame stack

        // Framed code:
        {
            PyObject *tmp_defaults_5;
            tmp_defaults_5 = const_tuple_int_0_bytes_chr_9_int_pos_1_true_false_tuple;
            Py_INCREF( tmp_defaults_5 );
            tmp_dictset_value = MAKE_FUNCTION_plistlib$$$function_40___init__( tmp_defaults_5 );



            tmp_res = PyObject_SetItem( locals_plistlib_389, const_str_plain___init__, tmp_dictset_value );
            Py_DECREF( tmp_dictset_value );
            if ( tmp_res != 0 )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 390;
                type_description_2 = "o";
                goto frame_exception_exit_5;
            }
        }
        tmp_dictset_value = MAKE_FUNCTION_plistlib$$$function_41_write(  );



        tmp_res = PyObject_SetItem( locals_plistlib_389, const_str_plain_write, tmp_dictset_value );
        Py_DECREF( tmp_dictset_value );
        if ( tmp_res != 0 )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 400;
            type_description_2 = "o";
            goto frame_exception_exit_5;
        }
        tmp_dictset_value = MAKE_FUNCTION_plistlib$$$function_42_write_value(  );



        tmp_res = PyObject_SetItem( locals_plistlib_389, const_str_plain_write_value, tmp_dictset_value );
        Py_DECREF( tmp_dictset_value );
        if ( tmp_res != 0 )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 405;
            type_description_2 = "o";
            goto frame_exception_exit_5;
        }
        tmp_dictset_value = MAKE_FUNCTION_plistlib$$$function_43_write_data(  );



        tmp_res = PyObject_SetItem( locals_plistlib_389, const_str_plain_write_data, tmp_dictset_value );
        Py_DECREF( tmp_dictset_value );
        if ( tmp_res != 0 )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 442;
            type_description_2 = "o";
            goto frame_exception_exit_5;
        }
        tmp_dictset_value = MAKE_FUNCTION_plistlib$$$function_44_write_bytes(  );



        tmp_res = PyObject_SetItem( locals_plistlib_389, const_str_plain_write_bytes, tmp_dictset_value );
        Py_DECREF( tmp_dictset_value );
        if ( tmp_res != 0 )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 445;
            type_description_2 = "o";
            goto frame_exception_exit_5;
        }
        tmp_dictset_value = MAKE_FUNCTION_plistlib$$$function_45_write_dict(  );



        tmp_res = PyObject_SetItem( locals_plistlib_389, const_str_plain_write_dict, tmp_dictset_value );
        Py_DECREF( tmp_dictset_value );
        if ( tmp_res != 0 )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 458;
            type_description_2 = "o";
            goto frame_exception_exit_5;
        }
        tmp_dictset_value = MAKE_FUNCTION_plistlib$$$function_46_write_array(  );



        tmp_res = PyObject_SetItem( locals_plistlib_389, const_str_plain_write_array, tmp_dictset_value );
        Py_DECREF( tmp_dictset_value );
        if ( tmp_res != 0 )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 478;
            type_description_2 = "o";
            goto frame_exception_exit_5;
        }

#if 0
        RESTORE_FRAME_EXCEPTION( frame_cbfca6005e13c074f5180327fa6b5639_5 );
#endif

        // Put the previous frame back on top.
        popFrameStack();

        goto frame_no_exception_4;

        frame_exception_exit_5:;

#if 0
        RESTORE_FRAME_EXCEPTION( frame_cbfca6005e13c074f5180327fa6b5639_5 );
#endif

        if ( exception_tb == NULL )
        {
            exception_tb = MAKE_TRACEBACK( frame_cbfca6005e13c074f5180327fa6b5639_5, exception_lineno );
        }
        else if ( exception_tb->tb_frame != &frame_cbfca6005e13c074f5180327fa6b5639_5->m_frame )
        {
            exception_tb = ADD_TRACEBACK( exception_tb, frame_cbfca6005e13c074f5180327fa6b5639_5, exception_lineno );
        }

        // Attachs locals to frame if any.
        Nuitka_Frame_AttachLocals(
            (struct Nuitka_FrameObject *)frame_cbfca6005e13c074f5180327fa6b5639_5,
            type_description_2,
            outline_3_var___class__
        );


        // Release cached frame.
        if ( frame_cbfca6005e13c074f5180327fa6b5639_5 == cache_frame_cbfca6005e13c074f5180327fa6b5639_5 )
        {
            Py_DECREF( frame_cbfca6005e13c074f5180327fa6b5639_5 );
        }
        cache_frame_cbfca6005e13c074f5180327fa6b5639_5 = NULL;

        assertFrameObject( frame_cbfca6005e13c074f5180327fa6b5639_5 );

        // Put the previous frame back on top.
        popFrameStack();

        // Return the error.
        goto nested_frame_exit_4;

        frame_no_exception_4:;
        goto skip_nested_handling_4;
        nested_frame_exit_4:;

        goto try_except_handler_12;
        skip_nested_handling_4:;
        {
            nuitka_bool tmp_condition_result_19;
            PyObject *tmp_compexpr_left_1;
            PyObject *tmp_compexpr_right_1;
            CHECK_OBJECT( tmp_class_creation_4__bases );
            tmp_compexpr_left_1 = tmp_class_creation_4__bases;
            CHECK_OBJECT( tmp_class_creation_4__bases_orig );
            tmp_compexpr_right_1 = tmp_class_creation_4__bases_orig;
            tmp_res = RICH_COMPARE_BOOL_NOTEQ_OBJECT_OBJECT( tmp_compexpr_left_1, tmp_compexpr_right_1 );
            if ( tmp_res == -1 )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 389;

                goto try_except_handler_12;
            }
            tmp_condition_result_19 = ( tmp_res != 0 ) ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
            if ( tmp_condition_result_19 == NUITKA_BOOL_TRUE )
            {
                goto branch_yes_13;
            }
            else
            {
                goto branch_no_13;
            }
            branch_yes_13:;
            CHECK_OBJECT( tmp_class_creation_4__bases_orig );
            tmp_dictset_value = tmp_class_creation_4__bases_orig;
            tmp_res = PyObject_SetItem( locals_plistlib_389, const_str_plain___orig_bases__, tmp_dictset_value );
            if ( tmp_res != 0 )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 389;

                goto try_except_handler_12;
            }
            branch_no_13:;
        }
        {
            PyObject *tmp_assign_source_56;
            PyObject *tmp_called_name_12;
            PyObject *tmp_args_name_9;
            PyObject *tmp_tuple_element_10;
            PyObject *tmp_kw_name_9;
            CHECK_OBJECT( tmp_class_creation_4__metaclass );
            tmp_called_name_12 = tmp_class_creation_4__metaclass;
            tmp_tuple_element_10 = const_str_plain__PlistWriter;
            tmp_args_name_9 = PyTuple_New( 3 );
            Py_INCREF( tmp_tuple_element_10 );
            PyTuple_SET_ITEM( tmp_args_name_9, 0, tmp_tuple_element_10 );
            CHECK_OBJECT( tmp_class_creation_4__bases );
            tmp_tuple_element_10 = tmp_class_creation_4__bases;
            Py_INCREF( tmp_tuple_element_10 );
            PyTuple_SET_ITEM( tmp_args_name_9, 1, tmp_tuple_element_10 );
            tmp_tuple_element_10 = locals_plistlib_389;
            Py_INCREF( tmp_tuple_element_10 );
            PyTuple_SET_ITEM( tmp_args_name_9, 2, tmp_tuple_element_10 );
            CHECK_OBJECT( tmp_class_creation_4__class_decl_dict );
            tmp_kw_name_9 = tmp_class_creation_4__class_decl_dict;
            frame_6a6219654a078aede7e40aaccdae8e56->m_frame.f_lineno = 389;
            tmp_assign_source_56 = CALL_FUNCTION( tmp_called_name_12, tmp_args_name_9, tmp_kw_name_9 );
            Py_DECREF( tmp_args_name_9 );
            if ( tmp_assign_source_56 == NULL )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 389;

                goto try_except_handler_12;
            }
            assert( outline_3_var___class__ == NULL );
            outline_3_var___class__ = tmp_assign_source_56;
        }
        CHECK_OBJECT( outline_3_var___class__ );
        tmp_assign_source_55 = outline_3_var___class__;
        Py_INCREF( tmp_assign_source_55 );
        goto try_return_handler_12;
        // tried codes exits in all cases
        NUITKA_CANNOT_GET_HERE( plistlib );
        return MOD_RETURN_VALUE( NULL );
        // Return handler code:
        try_return_handler_12:;
        Py_DECREF( locals_plistlib_389 );
        locals_plistlib_389 = NULL;
        goto try_return_handler_11;
        // Exception handler code:
        try_except_handler_12:;
        exception_keeper_type_10 = exception_type;
        exception_keeper_value_10 = exception_value;
        exception_keeper_tb_10 = exception_tb;
        exception_keeper_lineno_10 = exception_lineno;
        exception_type = NULL;
        exception_value = NULL;
        exception_tb = NULL;
        exception_lineno = 0;

        Py_DECREF( locals_plistlib_389 );
        locals_plistlib_389 = NULL;
        // Re-raise.
        exception_type = exception_keeper_type_10;
        exception_value = exception_keeper_value_10;
        exception_tb = exception_keeper_tb_10;
        exception_lineno = exception_keeper_lineno_10;

        goto try_except_handler_11;
        // End of try:
        // tried codes exits in all cases
        NUITKA_CANNOT_GET_HERE( plistlib );
        return MOD_RETURN_VALUE( NULL );
        // Return handler code:
        try_return_handler_11:;
        CHECK_OBJECT( (PyObject *)outline_3_var___class__ );
        Py_DECREF( outline_3_var___class__ );
        outline_3_var___class__ = NULL;

        goto outline_result_4;
        // Exception handler code:
        try_except_handler_11:;
        exception_keeper_type_11 = exception_type;
        exception_keeper_value_11 = exception_value;
        exception_keeper_tb_11 = exception_tb;
        exception_keeper_lineno_11 = exception_lineno;
        exception_type = NULL;
        exception_value = NULL;
        exception_tb = NULL;
        exception_lineno = 0;

        // Re-raise.
        exception_type = exception_keeper_type_11;
        exception_value = exception_keeper_value_11;
        exception_tb = exception_keeper_tb_11;
        exception_lineno = exception_keeper_lineno_11;

        goto outline_exception_4;
        // End of try:
        // Return statement must have exited already.
        NUITKA_CANNOT_GET_HERE( plistlib );
        return MOD_RETURN_VALUE( NULL );
        outline_exception_4:;
        exception_lineno = 389;
        goto try_except_handler_10;
        outline_result_4:;
        UPDATE_STRING_DICT1( moduledict_plistlib, (Nuitka_StringObject *)const_str_plain__PlistWriter, tmp_assign_source_55 );
    }
    goto try_end_4;
    // Exception handler code:
    try_except_handler_10:;
    exception_keeper_type_12 = exception_type;
    exception_keeper_value_12 = exception_value;
    exception_keeper_tb_12 = exception_tb;
    exception_keeper_lineno_12 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    Py_XDECREF( tmp_class_creation_4__bases_orig );
    tmp_class_creation_4__bases_orig = NULL;

    Py_XDECREF( tmp_class_creation_4__bases );
    tmp_class_creation_4__bases = NULL;

    Py_XDECREF( tmp_class_creation_4__class_decl_dict );
    tmp_class_creation_4__class_decl_dict = NULL;

    Py_XDECREF( tmp_class_creation_4__metaclass );
    tmp_class_creation_4__metaclass = NULL;

    Py_XDECREF( tmp_class_creation_4__prepared );
    tmp_class_creation_4__prepared = NULL;

    // Re-raise.
    exception_type = exception_keeper_type_12;
    exception_value = exception_keeper_value_12;
    exception_tb = exception_keeper_tb_12;
    exception_lineno = exception_keeper_lineno_12;

    goto frame_exception_exit_1;
    // End of try:
    try_end_4:;
    CHECK_OBJECT( (PyObject *)tmp_class_creation_4__bases_orig );
    Py_DECREF( tmp_class_creation_4__bases_orig );
    tmp_class_creation_4__bases_orig = NULL;

    CHECK_OBJECT( (PyObject *)tmp_class_creation_4__bases );
    Py_DECREF( tmp_class_creation_4__bases );
    tmp_class_creation_4__bases = NULL;

    CHECK_OBJECT( (PyObject *)tmp_class_creation_4__class_decl_dict );
    Py_DECREF( tmp_class_creation_4__class_decl_dict );
    tmp_class_creation_4__class_decl_dict = NULL;

    CHECK_OBJECT( (PyObject *)tmp_class_creation_4__metaclass );
    Py_DECREF( tmp_class_creation_4__metaclass );
    tmp_class_creation_4__metaclass = NULL;

    CHECK_OBJECT( (PyObject *)tmp_class_creation_4__prepared );
    Py_DECREF( tmp_class_creation_4__prepared );
    tmp_class_creation_4__prepared = NULL;

    {
        PyObject *tmp_assign_source_57;
        tmp_assign_source_57 = MAKE_FUNCTION_plistlib$$$function_47__is_fmt_xml(  );



        UPDATE_STRING_DICT1( moduledict_plistlib, (Nuitka_StringObject *)const_str_plain__is_fmt_xml, tmp_assign_source_57 );
    }
    // Tried code:
    {
        PyObject *tmp_assign_source_58;
        PyObject *tmp_dircall_arg1_2;
        tmp_dircall_arg1_2 = const_tuple_type_ValueError_tuple;
        Py_INCREF( tmp_dircall_arg1_2 );

        {
            PyObject *dir_call_args[] = {tmp_dircall_arg1_2};
            tmp_assign_source_58 = impl___internal__$$$function_1__mro_entries_conversion( dir_call_args );
        }
        if ( tmp_assign_source_58 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 522;

            goto try_except_handler_13;
        }
        assert( tmp_class_creation_5__bases == NULL );
        tmp_class_creation_5__bases = tmp_assign_source_58;
    }
    {
        PyObject *tmp_assign_source_59;
        tmp_assign_source_59 = PyDict_New();
        assert( tmp_class_creation_5__class_decl_dict == NULL );
        tmp_class_creation_5__class_decl_dict = tmp_assign_source_59;
    }
    {
        PyObject *tmp_assign_source_60;
        PyObject *tmp_metaclass_name_5;
        nuitka_bool tmp_condition_result_20;
        PyObject *tmp_key_name_13;
        PyObject *tmp_dict_name_13;
        PyObject *tmp_dict_name_14;
        PyObject *tmp_key_name_14;
        nuitka_bool tmp_condition_result_21;
        int tmp_truth_name_2;
        PyObject *tmp_type_arg_6;
        PyObject *tmp_subscribed_name_2;
        PyObject *tmp_subscript_name_2;
        PyObject *tmp_bases_name_5;
        tmp_key_name_13 = const_str_plain_metaclass;
        CHECK_OBJECT( tmp_class_creation_5__class_decl_dict );
        tmp_dict_name_13 = tmp_class_creation_5__class_decl_dict;
        tmp_res = PyDict_Contains( tmp_dict_name_13, tmp_key_name_13 );
        if ( tmp_res == -1 )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 522;

            goto try_except_handler_13;
        }
        tmp_condition_result_20 = ( tmp_res != 0 ) ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
        if ( tmp_condition_result_20 == NUITKA_BOOL_TRUE )
        {
            goto condexpr_true_7;
        }
        else
        {
            goto condexpr_false_7;
        }
        condexpr_true_7:;
        CHECK_OBJECT( tmp_class_creation_5__class_decl_dict );
        tmp_dict_name_14 = tmp_class_creation_5__class_decl_dict;
        tmp_key_name_14 = const_str_plain_metaclass;
        tmp_metaclass_name_5 = DICT_GET_ITEM( tmp_dict_name_14, tmp_key_name_14 );
        if ( tmp_metaclass_name_5 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 522;

            goto try_except_handler_13;
        }
        goto condexpr_end_7;
        condexpr_false_7:;
        CHECK_OBJECT( tmp_class_creation_5__bases );
        tmp_truth_name_2 = CHECK_IF_TRUE( tmp_class_creation_5__bases );
        if ( tmp_truth_name_2 == -1 )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 522;

            goto try_except_handler_13;
        }
        tmp_condition_result_21 = tmp_truth_name_2 == 1 ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
        if ( tmp_condition_result_21 == NUITKA_BOOL_TRUE )
        {
            goto condexpr_true_8;
        }
        else
        {
            goto condexpr_false_8;
        }
        condexpr_true_8:;
        CHECK_OBJECT( tmp_class_creation_5__bases );
        tmp_subscribed_name_2 = tmp_class_creation_5__bases;
        tmp_subscript_name_2 = const_int_0;
        tmp_type_arg_6 = LOOKUP_SUBSCRIPT_CONST( tmp_subscribed_name_2, tmp_subscript_name_2, 0 );
        if ( tmp_type_arg_6 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 522;

            goto try_except_handler_13;
        }
        tmp_metaclass_name_5 = BUILTIN_TYPE1( tmp_type_arg_6 );
        Py_DECREF( tmp_type_arg_6 );
        if ( tmp_metaclass_name_5 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 522;

            goto try_except_handler_13;
        }
        goto condexpr_end_8;
        condexpr_false_8:;
        tmp_metaclass_name_5 = (PyObject *)&PyType_Type;
        Py_INCREF( tmp_metaclass_name_5 );
        condexpr_end_8:;
        condexpr_end_7:;
        CHECK_OBJECT( tmp_class_creation_5__bases );
        tmp_bases_name_5 = tmp_class_creation_5__bases;
        tmp_assign_source_60 = SELECT_METACLASS( tmp_metaclass_name_5, tmp_bases_name_5 );
        Py_DECREF( tmp_metaclass_name_5 );
        if ( tmp_assign_source_60 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 522;

            goto try_except_handler_13;
        }
        assert( tmp_class_creation_5__metaclass == NULL );
        tmp_class_creation_5__metaclass = tmp_assign_source_60;
    }
    {
        nuitka_bool tmp_condition_result_22;
        PyObject *tmp_key_name_15;
        PyObject *tmp_dict_name_15;
        tmp_key_name_15 = const_str_plain_metaclass;
        CHECK_OBJECT( tmp_class_creation_5__class_decl_dict );
        tmp_dict_name_15 = tmp_class_creation_5__class_decl_dict;
        tmp_res = PyDict_Contains( tmp_dict_name_15, tmp_key_name_15 );
        if ( tmp_res == -1 )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 522;

            goto try_except_handler_13;
        }
        tmp_condition_result_22 = ( tmp_res != 0 ) ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
        if ( tmp_condition_result_22 == NUITKA_BOOL_TRUE )
        {
            goto branch_yes_14;
        }
        else
        {
            goto branch_no_14;
        }
        branch_yes_14:;
        CHECK_OBJECT( tmp_class_creation_5__class_decl_dict );
        tmp_dictdel_dict = tmp_class_creation_5__class_decl_dict;
        tmp_dictdel_key = const_str_plain_metaclass;
        tmp_result = DICT_REMOVE_ITEM( tmp_dictdel_dict, tmp_dictdel_key );
        if ( tmp_result == false )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 522;

            goto try_except_handler_13;
        }
        branch_no_14:;
    }
    {
        nuitka_bool tmp_condition_result_23;
        PyObject *tmp_source_name_22;
        CHECK_OBJECT( tmp_class_creation_5__metaclass );
        tmp_source_name_22 = tmp_class_creation_5__metaclass;
        tmp_res = PyObject_HasAttr( tmp_source_name_22, const_str_plain___prepare__ );
        tmp_condition_result_23 = ( tmp_res != 0 ) ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
        if ( tmp_condition_result_23 == NUITKA_BOOL_TRUE )
        {
            goto branch_yes_15;
        }
        else
        {
            goto branch_no_15;
        }
        branch_yes_15:;
        {
            PyObject *tmp_assign_source_61;
            PyObject *tmp_called_name_13;
            PyObject *tmp_source_name_23;
            PyObject *tmp_args_name_10;
            PyObject *tmp_tuple_element_11;
            PyObject *tmp_kw_name_10;
            CHECK_OBJECT( tmp_class_creation_5__metaclass );
            tmp_source_name_23 = tmp_class_creation_5__metaclass;
            tmp_called_name_13 = LOOKUP_ATTRIBUTE( tmp_source_name_23, const_str_plain___prepare__ );
            if ( tmp_called_name_13 == NULL )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 522;

                goto try_except_handler_13;
            }
            tmp_tuple_element_11 = const_str_plain_InvalidFileException;
            tmp_args_name_10 = PyTuple_New( 2 );
            Py_INCREF( tmp_tuple_element_11 );
            PyTuple_SET_ITEM( tmp_args_name_10, 0, tmp_tuple_element_11 );
            CHECK_OBJECT( tmp_class_creation_5__bases );
            tmp_tuple_element_11 = tmp_class_creation_5__bases;
            Py_INCREF( tmp_tuple_element_11 );
            PyTuple_SET_ITEM( tmp_args_name_10, 1, tmp_tuple_element_11 );
            CHECK_OBJECT( tmp_class_creation_5__class_decl_dict );
            tmp_kw_name_10 = tmp_class_creation_5__class_decl_dict;
            frame_6a6219654a078aede7e40aaccdae8e56->m_frame.f_lineno = 522;
            tmp_assign_source_61 = CALL_FUNCTION( tmp_called_name_13, tmp_args_name_10, tmp_kw_name_10 );
            Py_DECREF( tmp_called_name_13 );
            Py_DECREF( tmp_args_name_10 );
            if ( tmp_assign_source_61 == NULL )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 522;

                goto try_except_handler_13;
            }
            assert( tmp_class_creation_5__prepared == NULL );
            tmp_class_creation_5__prepared = tmp_assign_source_61;
        }
        {
            nuitka_bool tmp_condition_result_24;
            PyObject *tmp_operand_name_5;
            PyObject *tmp_source_name_24;
            CHECK_OBJECT( tmp_class_creation_5__prepared );
            tmp_source_name_24 = tmp_class_creation_5__prepared;
            tmp_res = PyObject_HasAttr( tmp_source_name_24, const_str_plain___getitem__ );
            tmp_operand_name_5 = ( tmp_res != 0 ) ? Py_True : Py_False;
            tmp_res = CHECK_IF_TRUE( tmp_operand_name_5 );
            if ( tmp_res == -1 )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 522;

                goto try_except_handler_13;
            }
            tmp_condition_result_24 = ( tmp_res == 0 ) ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
            if ( tmp_condition_result_24 == NUITKA_BOOL_TRUE )
            {
                goto branch_yes_16;
            }
            else
            {
                goto branch_no_16;
            }
            branch_yes_16:;
            {
                PyObject *tmp_raise_type_5;
                PyObject *tmp_raise_value_5;
                PyObject *tmp_left_name_5;
                PyObject *tmp_right_name_5;
                PyObject *tmp_tuple_element_12;
                PyObject *tmp_getattr_target_5;
                PyObject *tmp_getattr_attr_5;
                PyObject *tmp_getattr_default_5;
                PyObject *tmp_source_name_25;
                PyObject *tmp_type_arg_7;
                tmp_raise_type_5 = PyExc_TypeError;
                tmp_left_name_5 = const_str_digest_75fd71b1edada749c2ef7ac810062295;
                CHECK_OBJECT( tmp_class_creation_5__metaclass );
                tmp_getattr_target_5 = tmp_class_creation_5__metaclass;
                tmp_getattr_attr_5 = const_str_plain___name__;
                tmp_getattr_default_5 = const_str_angle_metaclass;
                tmp_tuple_element_12 = BUILTIN_GETATTR( tmp_getattr_target_5, tmp_getattr_attr_5, tmp_getattr_default_5 );
                if ( tmp_tuple_element_12 == NULL )
                {
                    assert( ERROR_OCCURRED() );

                    FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                    exception_lineno = 522;

                    goto try_except_handler_13;
                }
                tmp_right_name_5 = PyTuple_New( 2 );
                PyTuple_SET_ITEM( tmp_right_name_5, 0, tmp_tuple_element_12 );
                CHECK_OBJECT( tmp_class_creation_5__prepared );
                tmp_type_arg_7 = tmp_class_creation_5__prepared;
                tmp_source_name_25 = BUILTIN_TYPE1( tmp_type_arg_7 );
                assert( !(tmp_source_name_25 == NULL) );
                tmp_tuple_element_12 = LOOKUP_ATTRIBUTE( tmp_source_name_25, const_str_plain___name__ );
                Py_DECREF( tmp_source_name_25 );
                if ( tmp_tuple_element_12 == NULL )
                {
                    assert( ERROR_OCCURRED() );

                    FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
                    Py_DECREF( tmp_right_name_5 );

                    exception_lineno = 522;

                    goto try_except_handler_13;
                }
                PyTuple_SET_ITEM( tmp_right_name_5, 1, tmp_tuple_element_12 );
                tmp_raise_value_5 = BINARY_OPERATION_REMAINDER( tmp_left_name_5, tmp_right_name_5 );
                Py_DECREF( tmp_right_name_5 );
                if ( tmp_raise_value_5 == NULL )
                {
                    assert( ERROR_OCCURRED() );

                    FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                    exception_lineno = 522;

                    goto try_except_handler_13;
                }
                exception_type = tmp_raise_type_5;
                Py_INCREF( tmp_raise_type_5 );
                exception_value = tmp_raise_value_5;
                exception_lineno = 522;
                RAISE_EXCEPTION_IMPLICIT( &exception_type, &exception_value, &exception_tb );

                goto try_except_handler_13;
            }
            branch_no_16:;
        }
        goto branch_end_15;
        branch_no_15:;
        {
            PyObject *tmp_assign_source_62;
            tmp_assign_source_62 = PyDict_New();
            assert( tmp_class_creation_5__prepared == NULL );
            tmp_class_creation_5__prepared = tmp_assign_source_62;
        }
        branch_end_15:;
    }
    {
        PyObject *tmp_assign_source_63;
        {
            PyObject *tmp_set_locals_5;
            CHECK_OBJECT( tmp_class_creation_5__prepared );
            tmp_set_locals_5 = tmp_class_creation_5__prepared;
            locals_plistlib_522 = tmp_set_locals_5;
            Py_INCREF( tmp_set_locals_5 );
        }
        // Tried code:
        // Tried code:
        tmp_dictset_value = const_str_plain_plistlib;
        tmp_res = PyObject_SetItem( locals_plistlib_522, const_str_plain___module__, tmp_dictset_value );
        if ( tmp_res != 0 )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 522;

            goto try_except_handler_15;
        }
        tmp_dictset_value = const_str_plain_InvalidFileException;
        tmp_res = PyObject_SetItem( locals_plistlib_522, const_str_plain___qualname__, tmp_dictset_value );
        if ( tmp_res != 0 )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 522;

            goto try_except_handler_15;
        }
        MAKE_OR_REUSE_FRAME( cache_frame_0ee0e62e2cf347fc328cca3af8db7ad8_6, codeobj_0ee0e62e2cf347fc328cca3af8db7ad8, module_plistlib, sizeof(void *) );
        frame_0ee0e62e2cf347fc328cca3af8db7ad8_6 = cache_frame_0ee0e62e2cf347fc328cca3af8db7ad8_6;

        // Push the new frame as the currently active one.
        pushFrameStack( frame_0ee0e62e2cf347fc328cca3af8db7ad8_6 );

        // Mark the frame object as in use, ref count 1 will be up for reuse.
        assert( Py_REFCNT( frame_0ee0e62e2cf347fc328cca3af8db7ad8_6 ) == 2 ); // Frame stack

        // Framed code:
        {
            PyObject *tmp_defaults_6;
            tmp_defaults_6 = const_tuple_str_digest_282449a0c2f79caa66c3a61de5f7b6f9_tuple;
            Py_INCREF( tmp_defaults_6 );
            tmp_dictset_value = MAKE_FUNCTION_plistlib$$$function_48___init__( tmp_defaults_6 );



            tmp_res = PyObject_SetItem( locals_plistlib_522, const_str_plain___init__, tmp_dictset_value );
            Py_DECREF( tmp_dictset_value );
            if ( tmp_res != 0 )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 523;
                type_description_2 = "o";
                goto frame_exception_exit_6;
            }
        }

#if 0
        RESTORE_FRAME_EXCEPTION( frame_0ee0e62e2cf347fc328cca3af8db7ad8_6 );
#endif

        // Put the previous frame back on top.
        popFrameStack();

        goto frame_no_exception_5;

        frame_exception_exit_6:;

#if 0
        RESTORE_FRAME_EXCEPTION( frame_0ee0e62e2cf347fc328cca3af8db7ad8_6 );
#endif

        if ( exception_tb == NULL )
        {
            exception_tb = MAKE_TRACEBACK( frame_0ee0e62e2cf347fc328cca3af8db7ad8_6, exception_lineno );
        }
        else if ( exception_tb->tb_frame != &frame_0ee0e62e2cf347fc328cca3af8db7ad8_6->m_frame )
        {
            exception_tb = ADD_TRACEBACK( exception_tb, frame_0ee0e62e2cf347fc328cca3af8db7ad8_6, exception_lineno );
        }

        // Attachs locals to frame if any.
        Nuitka_Frame_AttachLocals(
            (struct Nuitka_FrameObject *)frame_0ee0e62e2cf347fc328cca3af8db7ad8_6,
            type_description_2,
            outline_4_var___class__
        );


        // Release cached frame.
        if ( frame_0ee0e62e2cf347fc328cca3af8db7ad8_6 == cache_frame_0ee0e62e2cf347fc328cca3af8db7ad8_6 )
        {
            Py_DECREF( frame_0ee0e62e2cf347fc328cca3af8db7ad8_6 );
        }
        cache_frame_0ee0e62e2cf347fc328cca3af8db7ad8_6 = NULL;

        assertFrameObject( frame_0ee0e62e2cf347fc328cca3af8db7ad8_6 );

        // Put the previous frame back on top.
        popFrameStack();

        // Return the error.
        goto nested_frame_exit_5;

        frame_no_exception_5:;
        goto skip_nested_handling_5;
        nested_frame_exit_5:;

        goto try_except_handler_15;
        skip_nested_handling_5:;
        {
            nuitka_bool tmp_condition_result_25;
            PyObject *tmp_compexpr_left_2;
            PyObject *tmp_compexpr_right_2;
            CHECK_OBJECT( tmp_class_creation_5__bases );
            tmp_compexpr_left_2 = tmp_class_creation_5__bases;
            tmp_compexpr_right_2 = const_tuple_type_ValueError_tuple;
            tmp_res = RICH_COMPARE_BOOL_NOTEQ_OBJECT_OBJECT( tmp_compexpr_left_2, tmp_compexpr_right_2 );
            if ( tmp_res == -1 )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 522;

                goto try_except_handler_15;
            }
            tmp_condition_result_25 = ( tmp_res != 0 ) ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
            if ( tmp_condition_result_25 == NUITKA_BOOL_TRUE )
            {
                goto branch_yes_17;
            }
            else
            {
                goto branch_no_17;
            }
            branch_yes_17:;
            tmp_dictset_value = const_tuple_type_ValueError_tuple;
            tmp_res = PyObject_SetItem( locals_plistlib_522, const_str_plain___orig_bases__, tmp_dictset_value );
            if ( tmp_res != 0 )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 522;

                goto try_except_handler_15;
            }
            branch_no_17:;
        }
        {
            PyObject *tmp_assign_source_64;
            PyObject *tmp_called_name_14;
            PyObject *tmp_args_name_11;
            PyObject *tmp_tuple_element_13;
            PyObject *tmp_kw_name_11;
            CHECK_OBJECT( tmp_class_creation_5__metaclass );
            tmp_called_name_14 = tmp_class_creation_5__metaclass;
            tmp_tuple_element_13 = const_str_plain_InvalidFileException;
            tmp_args_name_11 = PyTuple_New( 3 );
            Py_INCREF( tmp_tuple_element_13 );
            PyTuple_SET_ITEM( tmp_args_name_11, 0, tmp_tuple_element_13 );
            CHECK_OBJECT( tmp_class_creation_5__bases );
            tmp_tuple_element_13 = tmp_class_creation_5__bases;
            Py_INCREF( tmp_tuple_element_13 );
            PyTuple_SET_ITEM( tmp_args_name_11, 1, tmp_tuple_element_13 );
            tmp_tuple_element_13 = locals_plistlib_522;
            Py_INCREF( tmp_tuple_element_13 );
            PyTuple_SET_ITEM( tmp_args_name_11, 2, tmp_tuple_element_13 );
            CHECK_OBJECT( tmp_class_creation_5__class_decl_dict );
            tmp_kw_name_11 = tmp_class_creation_5__class_decl_dict;
            frame_6a6219654a078aede7e40aaccdae8e56->m_frame.f_lineno = 522;
            tmp_assign_source_64 = CALL_FUNCTION( tmp_called_name_14, tmp_args_name_11, tmp_kw_name_11 );
            Py_DECREF( tmp_args_name_11 );
            if ( tmp_assign_source_64 == NULL )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 522;

                goto try_except_handler_15;
            }
            assert( outline_4_var___class__ == NULL );
            outline_4_var___class__ = tmp_assign_source_64;
        }
        CHECK_OBJECT( outline_4_var___class__ );
        tmp_assign_source_63 = outline_4_var___class__;
        Py_INCREF( tmp_assign_source_63 );
        goto try_return_handler_15;
        // tried codes exits in all cases
        NUITKA_CANNOT_GET_HERE( plistlib );
        return MOD_RETURN_VALUE( NULL );
        // Return handler code:
        try_return_handler_15:;
        Py_DECREF( locals_plistlib_522 );
        locals_plistlib_522 = NULL;
        goto try_return_handler_14;
        // Exception handler code:
        try_except_handler_15:;
        exception_keeper_type_13 = exception_type;
        exception_keeper_value_13 = exception_value;
        exception_keeper_tb_13 = exception_tb;
        exception_keeper_lineno_13 = exception_lineno;
        exception_type = NULL;
        exception_value = NULL;
        exception_tb = NULL;
        exception_lineno = 0;

        Py_DECREF( locals_plistlib_522 );
        locals_plistlib_522 = NULL;
        // Re-raise.
        exception_type = exception_keeper_type_13;
        exception_value = exception_keeper_value_13;
        exception_tb = exception_keeper_tb_13;
        exception_lineno = exception_keeper_lineno_13;

        goto try_except_handler_14;
        // End of try:
        // tried codes exits in all cases
        NUITKA_CANNOT_GET_HERE( plistlib );
        return MOD_RETURN_VALUE( NULL );
        // Return handler code:
        try_return_handler_14:;
        CHECK_OBJECT( (PyObject *)outline_4_var___class__ );
        Py_DECREF( outline_4_var___class__ );
        outline_4_var___class__ = NULL;

        goto outline_result_5;
        // Exception handler code:
        try_except_handler_14:;
        exception_keeper_type_14 = exception_type;
        exception_keeper_value_14 = exception_value;
        exception_keeper_tb_14 = exception_tb;
        exception_keeper_lineno_14 = exception_lineno;
        exception_type = NULL;
        exception_value = NULL;
        exception_tb = NULL;
        exception_lineno = 0;

        // Re-raise.
        exception_type = exception_keeper_type_14;
        exception_value = exception_keeper_value_14;
        exception_tb = exception_keeper_tb_14;
        exception_lineno = exception_keeper_lineno_14;

        goto outline_exception_5;
        // End of try:
        // Return statement must have exited already.
        NUITKA_CANNOT_GET_HERE( plistlib );
        return MOD_RETURN_VALUE( NULL );
        outline_exception_5:;
        exception_lineno = 522;
        goto try_except_handler_13;
        outline_result_5:;
        UPDATE_STRING_DICT1( moduledict_plistlib, (Nuitka_StringObject *)const_str_plain_InvalidFileException, tmp_assign_source_63 );
    }
    goto try_end_5;
    // Exception handler code:
    try_except_handler_13:;
    exception_keeper_type_15 = exception_type;
    exception_keeper_value_15 = exception_value;
    exception_keeper_tb_15 = exception_tb;
    exception_keeper_lineno_15 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    Py_XDECREF( tmp_class_creation_5__bases );
    tmp_class_creation_5__bases = NULL;

    Py_XDECREF( tmp_class_creation_5__class_decl_dict );
    tmp_class_creation_5__class_decl_dict = NULL;

    Py_XDECREF( tmp_class_creation_5__metaclass );
    tmp_class_creation_5__metaclass = NULL;

    Py_XDECREF( tmp_class_creation_5__prepared );
    tmp_class_creation_5__prepared = NULL;

    // Re-raise.
    exception_type = exception_keeper_type_15;
    exception_value = exception_keeper_value_15;
    exception_tb = exception_keeper_tb_15;
    exception_lineno = exception_keeper_lineno_15;

    goto frame_exception_exit_1;
    // End of try:
    try_end_5:;
    CHECK_OBJECT( (PyObject *)tmp_class_creation_5__bases );
    Py_DECREF( tmp_class_creation_5__bases );
    tmp_class_creation_5__bases = NULL;

    CHECK_OBJECT( (PyObject *)tmp_class_creation_5__class_decl_dict );
    Py_DECREF( tmp_class_creation_5__class_decl_dict );
    tmp_class_creation_5__class_decl_dict = NULL;

    CHECK_OBJECT( (PyObject *)tmp_class_creation_5__metaclass );
    Py_DECREF( tmp_class_creation_5__metaclass );
    tmp_class_creation_5__metaclass = NULL;

    CHECK_OBJECT( (PyObject *)tmp_class_creation_5__prepared );
    Py_DECREF( tmp_class_creation_5__prepared );
    tmp_class_creation_5__prepared = NULL;

    {
        PyObject *tmp_assign_source_65;
        tmp_assign_source_65 = PyDict_Copy( const_dict_1e8b691e3d0182a72f212a61a8dd1482 );
        UPDATE_STRING_DICT1( moduledict_plistlib, (Nuitka_StringObject *)const_str_plain__BINARY_FORMAT, tmp_assign_source_65 );
    }
    {
        PyObject *tmp_assign_source_66;
        PyObject *tmp_called_name_15;
        tmp_called_name_15 = (PyObject *)&PyBaseObject_Type;
        frame_6a6219654a078aede7e40aaccdae8e56->m_frame.f_lineno = 528;
        tmp_assign_source_66 = CALL_FUNCTION_NO_ARGS( tmp_called_name_15 );
        if ( tmp_assign_source_66 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 528;

            goto frame_exception_exit_1;
        }
        UPDATE_STRING_DICT1( moduledict_plistlib, (Nuitka_StringObject *)const_str_plain__undefined, tmp_assign_source_66 );
    }
    {
        PyObject *tmp_assign_source_67;
        tmp_assign_source_67 = PyDict_New();
        assert( tmp_class_creation_6__class_decl_dict == NULL );
        tmp_class_creation_6__class_decl_dict = tmp_assign_source_67;
    }
    // Tried code:
    {
        PyObject *tmp_assign_source_68;
        PyObject *tmp_metaclass_name_6;
        nuitka_bool tmp_condition_result_26;
        PyObject *tmp_key_name_16;
        PyObject *tmp_dict_name_16;
        PyObject *tmp_dict_name_17;
        PyObject *tmp_key_name_17;
        PyObject *tmp_bases_name_6;
        tmp_key_name_16 = const_str_plain_metaclass;
        CHECK_OBJECT( tmp_class_creation_6__class_decl_dict );
        tmp_dict_name_16 = tmp_class_creation_6__class_decl_dict;
        tmp_res = PyDict_Contains( tmp_dict_name_16, tmp_key_name_16 );
        if ( tmp_res == -1 )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 530;

            goto try_except_handler_16;
        }
        tmp_condition_result_26 = ( tmp_res != 0 ) ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
        if ( tmp_condition_result_26 == NUITKA_BOOL_TRUE )
        {
            goto condexpr_true_9;
        }
        else
        {
            goto condexpr_false_9;
        }
        condexpr_true_9:;
        CHECK_OBJECT( tmp_class_creation_6__class_decl_dict );
        tmp_dict_name_17 = tmp_class_creation_6__class_decl_dict;
        tmp_key_name_17 = const_str_plain_metaclass;
        tmp_metaclass_name_6 = DICT_GET_ITEM( tmp_dict_name_17, tmp_key_name_17 );
        if ( tmp_metaclass_name_6 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 530;

            goto try_except_handler_16;
        }
        goto condexpr_end_9;
        condexpr_false_9:;
        tmp_metaclass_name_6 = (PyObject *)&PyType_Type;
        Py_INCREF( tmp_metaclass_name_6 );
        condexpr_end_9:;
        tmp_bases_name_6 = const_tuple_empty;
        tmp_assign_source_68 = SELECT_METACLASS( tmp_metaclass_name_6, tmp_bases_name_6 );
        Py_DECREF( tmp_metaclass_name_6 );
        if ( tmp_assign_source_68 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 530;

            goto try_except_handler_16;
        }
        assert( tmp_class_creation_6__metaclass == NULL );
        tmp_class_creation_6__metaclass = tmp_assign_source_68;
    }
    {
        nuitka_bool tmp_condition_result_27;
        PyObject *tmp_key_name_18;
        PyObject *tmp_dict_name_18;
        tmp_key_name_18 = const_str_plain_metaclass;
        CHECK_OBJECT( tmp_class_creation_6__class_decl_dict );
        tmp_dict_name_18 = tmp_class_creation_6__class_decl_dict;
        tmp_res = PyDict_Contains( tmp_dict_name_18, tmp_key_name_18 );
        if ( tmp_res == -1 )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 530;

            goto try_except_handler_16;
        }
        tmp_condition_result_27 = ( tmp_res != 0 ) ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
        if ( tmp_condition_result_27 == NUITKA_BOOL_TRUE )
        {
            goto branch_yes_18;
        }
        else
        {
            goto branch_no_18;
        }
        branch_yes_18:;
        CHECK_OBJECT( tmp_class_creation_6__class_decl_dict );
        tmp_dictdel_dict = tmp_class_creation_6__class_decl_dict;
        tmp_dictdel_key = const_str_plain_metaclass;
        tmp_result = DICT_REMOVE_ITEM( tmp_dictdel_dict, tmp_dictdel_key );
        if ( tmp_result == false )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 530;

            goto try_except_handler_16;
        }
        branch_no_18:;
    }
    {
        nuitka_bool tmp_condition_result_28;
        PyObject *tmp_source_name_26;
        CHECK_OBJECT( tmp_class_creation_6__metaclass );
        tmp_source_name_26 = tmp_class_creation_6__metaclass;
        tmp_res = PyObject_HasAttr( tmp_source_name_26, const_str_plain___prepare__ );
        tmp_condition_result_28 = ( tmp_res != 0 ) ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
        if ( tmp_condition_result_28 == NUITKA_BOOL_TRUE )
        {
            goto branch_yes_19;
        }
        else
        {
            goto branch_no_19;
        }
        branch_yes_19:;
        {
            PyObject *tmp_assign_source_69;
            PyObject *tmp_called_name_16;
            PyObject *tmp_source_name_27;
            PyObject *tmp_args_name_12;
            PyObject *tmp_kw_name_12;
            CHECK_OBJECT( tmp_class_creation_6__metaclass );
            tmp_source_name_27 = tmp_class_creation_6__metaclass;
            tmp_called_name_16 = LOOKUP_ATTRIBUTE( tmp_source_name_27, const_str_plain___prepare__ );
            if ( tmp_called_name_16 == NULL )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 530;

                goto try_except_handler_16;
            }
            tmp_args_name_12 = const_tuple_str_plain__BinaryPlistParser_tuple_empty_tuple;
            CHECK_OBJECT( tmp_class_creation_6__class_decl_dict );
            tmp_kw_name_12 = tmp_class_creation_6__class_decl_dict;
            frame_6a6219654a078aede7e40aaccdae8e56->m_frame.f_lineno = 530;
            tmp_assign_source_69 = CALL_FUNCTION( tmp_called_name_16, tmp_args_name_12, tmp_kw_name_12 );
            Py_DECREF( tmp_called_name_16 );
            if ( tmp_assign_source_69 == NULL )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 530;

                goto try_except_handler_16;
            }
            assert( tmp_class_creation_6__prepared == NULL );
            tmp_class_creation_6__prepared = tmp_assign_source_69;
        }
        {
            nuitka_bool tmp_condition_result_29;
            PyObject *tmp_operand_name_6;
            PyObject *tmp_source_name_28;
            CHECK_OBJECT( tmp_class_creation_6__prepared );
            tmp_source_name_28 = tmp_class_creation_6__prepared;
            tmp_res = PyObject_HasAttr( tmp_source_name_28, const_str_plain___getitem__ );
            tmp_operand_name_6 = ( tmp_res != 0 ) ? Py_True : Py_False;
            tmp_res = CHECK_IF_TRUE( tmp_operand_name_6 );
            if ( tmp_res == -1 )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 530;

                goto try_except_handler_16;
            }
            tmp_condition_result_29 = ( tmp_res == 0 ) ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
            if ( tmp_condition_result_29 == NUITKA_BOOL_TRUE )
            {
                goto branch_yes_20;
            }
            else
            {
                goto branch_no_20;
            }
            branch_yes_20:;
            {
                PyObject *tmp_raise_type_6;
                PyObject *tmp_raise_value_6;
                PyObject *tmp_left_name_6;
                PyObject *tmp_right_name_6;
                PyObject *tmp_tuple_element_14;
                PyObject *tmp_getattr_target_6;
                PyObject *tmp_getattr_attr_6;
                PyObject *tmp_getattr_default_6;
                PyObject *tmp_source_name_29;
                PyObject *tmp_type_arg_8;
                tmp_raise_type_6 = PyExc_TypeError;
                tmp_left_name_6 = const_str_digest_75fd71b1edada749c2ef7ac810062295;
                CHECK_OBJECT( tmp_class_creation_6__metaclass );
                tmp_getattr_target_6 = tmp_class_creation_6__metaclass;
                tmp_getattr_attr_6 = const_str_plain___name__;
                tmp_getattr_default_6 = const_str_angle_metaclass;
                tmp_tuple_element_14 = BUILTIN_GETATTR( tmp_getattr_target_6, tmp_getattr_attr_6, tmp_getattr_default_6 );
                if ( tmp_tuple_element_14 == NULL )
                {
                    assert( ERROR_OCCURRED() );

                    FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                    exception_lineno = 530;

                    goto try_except_handler_16;
                }
                tmp_right_name_6 = PyTuple_New( 2 );
                PyTuple_SET_ITEM( tmp_right_name_6, 0, tmp_tuple_element_14 );
                CHECK_OBJECT( tmp_class_creation_6__prepared );
                tmp_type_arg_8 = tmp_class_creation_6__prepared;
                tmp_source_name_29 = BUILTIN_TYPE1( tmp_type_arg_8 );
                assert( !(tmp_source_name_29 == NULL) );
                tmp_tuple_element_14 = LOOKUP_ATTRIBUTE( tmp_source_name_29, const_str_plain___name__ );
                Py_DECREF( tmp_source_name_29 );
                if ( tmp_tuple_element_14 == NULL )
                {
                    assert( ERROR_OCCURRED() );

                    FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
                    Py_DECREF( tmp_right_name_6 );

                    exception_lineno = 530;

                    goto try_except_handler_16;
                }
                PyTuple_SET_ITEM( tmp_right_name_6, 1, tmp_tuple_element_14 );
                tmp_raise_value_6 = BINARY_OPERATION_REMAINDER( tmp_left_name_6, tmp_right_name_6 );
                Py_DECREF( tmp_right_name_6 );
                if ( tmp_raise_value_6 == NULL )
                {
                    assert( ERROR_OCCURRED() );

                    FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                    exception_lineno = 530;

                    goto try_except_handler_16;
                }
                exception_type = tmp_raise_type_6;
                Py_INCREF( tmp_raise_type_6 );
                exception_value = tmp_raise_value_6;
                exception_lineno = 530;
                RAISE_EXCEPTION_IMPLICIT( &exception_type, &exception_value, &exception_tb );

                goto try_except_handler_16;
            }
            branch_no_20:;
        }
        goto branch_end_19;
        branch_no_19:;
        {
            PyObject *tmp_assign_source_70;
            tmp_assign_source_70 = PyDict_New();
            assert( tmp_class_creation_6__prepared == NULL );
            tmp_class_creation_6__prepared = tmp_assign_source_70;
        }
        branch_end_19:;
    }
    {
        PyObject *tmp_assign_source_71;
        {
            PyObject *tmp_set_locals_6;
            CHECK_OBJECT( tmp_class_creation_6__prepared );
            tmp_set_locals_6 = tmp_class_creation_6__prepared;
            locals_plistlib_530 = tmp_set_locals_6;
            Py_INCREF( tmp_set_locals_6 );
        }
        // Tried code:
        // Tried code:
        tmp_dictset_value = const_str_plain_plistlib;
        tmp_res = PyObject_SetItem( locals_plistlib_530, const_str_plain___module__, tmp_dictset_value );
        if ( tmp_res != 0 )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 530;

            goto try_except_handler_18;
        }
        tmp_dictset_value = const_str_digest_1c574f569296f7afc2b0ef363b41bf5d;
        tmp_res = PyObject_SetItem( locals_plistlib_530, const_str_plain___doc__, tmp_dictset_value );
        if ( tmp_res != 0 )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 530;

            goto try_except_handler_18;
        }
        tmp_dictset_value = const_str_plain__BinaryPlistParser;
        tmp_res = PyObject_SetItem( locals_plistlib_530, const_str_plain___qualname__, tmp_dictset_value );
        if ( tmp_res != 0 )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 530;

            goto try_except_handler_18;
        }
        MAKE_OR_REUSE_FRAME( cache_frame_b7ec1aac708d028b6f1d124365549dc4_7, codeobj_b7ec1aac708d028b6f1d124365549dc4, module_plistlib, sizeof(void *) );
        frame_b7ec1aac708d028b6f1d124365549dc4_7 = cache_frame_b7ec1aac708d028b6f1d124365549dc4_7;

        // Push the new frame as the currently active one.
        pushFrameStack( frame_b7ec1aac708d028b6f1d124365549dc4_7 );

        // Mark the frame object as in use, ref count 1 will be up for reuse.
        assert( Py_REFCNT( frame_b7ec1aac708d028b6f1d124365549dc4_7 ) == 2 ); // Frame stack

        // Framed code:
        tmp_dictset_value = MAKE_FUNCTION_plistlib$$$function_49___init__(  );



        tmp_res = PyObject_SetItem( locals_plistlib_530, const_str_plain___init__, tmp_dictset_value );
        Py_DECREF( tmp_dictset_value );
        if ( tmp_res != 0 )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 538;
            type_description_2 = "o";
            goto frame_exception_exit_7;
        }
        tmp_dictset_value = MAKE_FUNCTION_plistlib$$$function_50_parse(  );



        tmp_res = PyObject_SetItem( locals_plistlib_530, const_str_plain_parse, tmp_dictset_value );
        Py_DECREF( tmp_dictset_value );
        if ( tmp_res != 0 )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 542;
            type_description_2 = "o";
            goto frame_exception_exit_7;
        }
        tmp_dictset_value = MAKE_FUNCTION_plistlib$$$function_51__get_size(  );



        tmp_res = PyObject_SetItem( locals_plistlib_530, const_str_plain__get_size, tmp_dictset_value );
        Py_DECREF( tmp_dictset_value );
        if ( tmp_res != 0 )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 567;
            type_description_2 = "o";
            goto frame_exception_exit_7;
        }
        tmp_dictset_value = MAKE_FUNCTION_plistlib$$$function_52__read_ints(  );



        tmp_res = PyObject_SetItem( locals_plistlib_530, const_str_plain__read_ints, tmp_dictset_value );
        Py_DECREF( tmp_dictset_value );
        if ( tmp_res != 0 )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 577;
            type_description_2 = "o";
            goto frame_exception_exit_7;
        }
        tmp_dictset_value = MAKE_FUNCTION_plistlib$$$function_53__read_refs(  );



        tmp_res = PyObject_SetItem( locals_plistlib_530, const_str_plain__read_refs, tmp_dictset_value );
        Py_DECREF( tmp_dictset_value );
        if ( tmp_res != 0 )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 587;
            type_description_2 = "o";
            goto frame_exception_exit_7;
        }
        tmp_dictset_value = MAKE_FUNCTION_plistlib$$$function_54__read_object(  );



        tmp_res = PyObject_SetItem( locals_plistlib_530, const_str_plain__read_object, tmp_dictset_value );
        Py_DECREF( tmp_dictset_value );
        if ( tmp_res != 0 )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 590;
            type_description_2 = "o";
            goto frame_exception_exit_7;
        }

#if 0
        RESTORE_FRAME_EXCEPTION( frame_b7ec1aac708d028b6f1d124365549dc4_7 );
#endif

        // Put the previous frame back on top.
        popFrameStack();

        goto frame_no_exception_6;

        frame_exception_exit_7:;

#if 0
        RESTORE_FRAME_EXCEPTION( frame_b7ec1aac708d028b6f1d124365549dc4_7 );
#endif

        if ( exception_tb == NULL )
        {
            exception_tb = MAKE_TRACEBACK( frame_b7ec1aac708d028b6f1d124365549dc4_7, exception_lineno );
        }
        else if ( exception_tb->tb_frame != &frame_b7ec1aac708d028b6f1d124365549dc4_7->m_frame )
        {
            exception_tb = ADD_TRACEBACK( exception_tb, frame_b7ec1aac708d028b6f1d124365549dc4_7, exception_lineno );
        }

        // Attachs locals to frame if any.
        Nuitka_Frame_AttachLocals(
            (struct Nuitka_FrameObject *)frame_b7ec1aac708d028b6f1d124365549dc4_7,
            type_description_2,
            outline_5_var___class__
        );


        // Release cached frame.
        if ( frame_b7ec1aac708d028b6f1d124365549dc4_7 == cache_frame_b7ec1aac708d028b6f1d124365549dc4_7 )
        {
            Py_DECREF( frame_b7ec1aac708d028b6f1d124365549dc4_7 );
        }
        cache_frame_b7ec1aac708d028b6f1d124365549dc4_7 = NULL;

        assertFrameObject( frame_b7ec1aac708d028b6f1d124365549dc4_7 );

        // Put the previous frame back on top.
        popFrameStack();

        // Return the error.
        goto nested_frame_exit_6;

        frame_no_exception_6:;
        goto skip_nested_handling_6;
        nested_frame_exit_6:;

        goto try_except_handler_18;
        skip_nested_handling_6:;
        {
            PyObject *tmp_assign_source_72;
            PyObject *tmp_called_name_17;
            PyObject *tmp_args_name_13;
            PyObject *tmp_tuple_element_15;
            PyObject *tmp_kw_name_13;
            CHECK_OBJECT( tmp_class_creation_6__metaclass );
            tmp_called_name_17 = tmp_class_creation_6__metaclass;
            tmp_tuple_element_15 = const_str_plain__BinaryPlistParser;
            tmp_args_name_13 = PyTuple_New( 3 );
            Py_INCREF( tmp_tuple_element_15 );
            PyTuple_SET_ITEM( tmp_args_name_13, 0, tmp_tuple_element_15 );
            tmp_tuple_element_15 = const_tuple_empty;
            Py_INCREF( tmp_tuple_element_15 );
            PyTuple_SET_ITEM( tmp_args_name_13, 1, tmp_tuple_element_15 );
            tmp_tuple_element_15 = locals_plistlib_530;
            Py_INCREF( tmp_tuple_element_15 );
            PyTuple_SET_ITEM( tmp_args_name_13, 2, tmp_tuple_element_15 );
            CHECK_OBJECT( tmp_class_creation_6__class_decl_dict );
            tmp_kw_name_13 = tmp_class_creation_6__class_decl_dict;
            frame_6a6219654a078aede7e40aaccdae8e56->m_frame.f_lineno = 530;
            tmp_assign_source_72 = CALL_FUNCTION( tmp_called_name_17, tmp_args_name_13, tmp_kw_name_13 );
            Py_DECREF( tmp_args_name_13 );
            if ( tmp_assign_source_72 == NULL )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 530;

                goto try_except_handler_18;
            }
            assert( outline_5_var___class__ == NULL );
            outline_5_var___class__ = tmp_assign_source_72;
        }
        CHECK_OBJECT( outline_5_var___class__ );
        tmp_assign_source_71 = outline_5_var___class__;
        Py_INCREF( tmp_assign_source_71 );
        goto try_return_handler_18;
        // tried codes exits in all cases
        NUITKA_CANNOT_GET_HERE( plistlib );
        return MOD_RETURN_VALUE( NULL );
        // Return handler code:
        try_return_handler_18:;
        Py_DECREF( locals_plistlib_530 );
        locals_plistlib_530 = NULL;
        goto try_return_handler_17;
        // Exception handler code:
        try_except_handler_18:;
        exception_keeper_type_16 = exception_type;
        exception_keeper_value_16 = exception_value;
        exception_keeper_tb_16 = exception_tb;
        exception_keeper_lineno_16 = exception_lineno;
        exception_type = NULL;
        exception_value = NULL;
        exception_tb = NULL;
        exception_lineno = 0;

        Py_DECREF( locals_plistlib_530 );
        locals_plistlib_530 = NULL;
        // Re-raise.
        exception_type = exception_keeper_type_16;
        exception_value = exception_keeper_value_16;
        exception_tb = exception_keeper_tb_16;
        exception_lineno = exception_keeper_lineno_16;

        goto try_except_handler_17;
        // End of try:
        // tried codes exits in all cases
        NUITKA_CANNOT_GET_HERE( plistlib );
        return MOD_RETURN_VALUE( NULL );
        // Return handler code:
        try_return_handler_17:;
        CHECK_OBJECT( (PyObject *)outline_5_var___class__ );
        Py_DECREF( outline_5_var___class__ );
        outline_5_var___class__ = NULL;

        goto outline_result_6;
        // Exception handler code:
        try_except_handler_17:;
        exception_keeper_type_17 = exception_type;
        exception_keeper_value_17 = exception_value;
        exception_keeper_tb_17 = exception_tb;
        exception_keeper_lineno_17 = exception_lineno;
        exception_type = NULL;
        exception_value = NULL;
        exception_tb = NULL;
        exception_lineno = 0;

        // Re-raise.
        exception_type = exception_keeper_type_17;
        exception_value = exception_keeper_value_17;
        exception_tb = exception_keeper_tb_17;
        exception_lineno = exception_keeper_lineno_17;

        goto outline_exception_6;
        // End of try:
        // Return statement must have exited already.
        NUITKA_CANNOT_GET_HERE( plistlib );
        return MOD_RETURN_VALUE( NULL );
        outline_exception_6:;
        exception_lineno = 530;
        goto try_except_handler_16;
        outline_result_6:;
        UPDATE_STRING_DICT1( moduledict_plistlib, (Nuitka_StringObject *)const_str_plain__BinaryPlistParser, tmp_assign_source_71 );
    }
    goto try_end_6;
    // Exception handler code:
    try_except_handler_16:;
    exception_keeper_type_18 = exception_type;
    exception_keeper_value_18 = exception_value;
    exception_keeper_tb_18 = exception_tb;
    exception_keeper_lineno_18 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    CHECK_OBJECT( (PyObject *)tmp_class_creation_6__class_decl_dict );
    Py_DECREF( tmp_class_creation_6__class_decl_dict );
    tmp_class_creation_6__class_decl_dict = NULL;

    Py_XDECREF( tmp_class_creation_6__metaclass );
    tmp_class_creation_6__metaclass = NULL;

    Py_XDECREF( tmp_class_creation_6__prepared );
    tmp_class_creation_6__prepared = NULL;

    // Re-raise.
    exception_type = exception_keeper_type_18;
    exception_value = exception_keeper_value_18;
    exception_tb = exception_keeper_tb_18;
    exception_lineno = exception_keeper_lineno_18;

    goto frame_exception_exit_1;
    // End of try:
    try_end_6:;
    CHECK_OBJECT( (PyObject *)tmp_class_creation_6__class_decl_dict );
    Py_DECREF( tmp_class_creation_6__class_decl_dict );
    tmp_class_creation_6__class_decl_dict = NULL;

    CHECK_OBJECT( (PyObject *)tmp_class_creation_6__metaclass );
    Py_DECREF( tmp_class_creation_6__metaclass );
    tmp_class_creation_6__metaclass = NULL;

    CHECK_OBJECT( (PyObject *)tmp_class_creation_6__prepared );
    Py_DECREF( tmp_class_creation_6__prepared );
    tmp_class_creation_6__prepared = NULL;

    {
        PyObject *tmp_assign_source_73;
        tmp_assign_source_73 = MAKE_FUNCTION_plistlib$$$function_55__count_to_size(  );



        UPDATE_STRING_DICT1( moduledict_plistlib, (Nuitka_StringObject *)const_str_plain__count_to_size, tmp_assign_source_73 );
    }
    {
        PyObject *tmp_assign_source_74;
        PyObject *tmp_tuple_element_16;
        PyObject *tmp_source_name_30;
        PyObject *tmp_mvar_value_10;
        tmp_tuple_element_16 = (PyObject *)&PyUnicode_Type;
        tmp_assign_source_74 = PyTuple_New( 5 );
        Py_INCREF( tmp_tuple_element_16 );
        PyTuple_SET_ITEM( tmp_assign_source_74, 0, tmp_tuple_element_16 );
        tmp_tuple_element_16 = (PyObject *)&PyLong_Type;
        Py_INCREF( tmp_tuple_element_16 );
        PyTuple_SET_ITEM( tmp_assign_source_74, 1, tmp_tuple_element_16 );
        tmp_tuple_element_16 = (PyObject *)&PyFloat_Type;
        Py_INCREF( tmp_tuple_element_16 );
        PyTuple_SET_ITEM( tmp_assign_source_74, 2, tmp_tuple_element_16 );
        tmp_mvar_value_10 = GET_STRING_DICT_VALUE( moduledict_plistlib, (Nuitka_StringObject *)const_str_plain_datetime );

        if (unlikely( tmp_mvar_value_10 == NULL ))
        {
            tmp_mvar_value_10 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_datetime );
        }

        if ( tmp_mvar_value_10 == NULL )
        {
            Py_DECREF( tmp_assign_source_74 );
            exception_type = PyExc_NameError;
            Py_INCREF( exception_type );
            exception_value = PyUnicode_FromFormat( "name '%s' is not defined", "datetime" );
            exception_tb = NULL;
            NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
            CHAIN_EXCEPTION( exception_value );

            exception_lineno = 697;

            goto frame_exception_exit_1;
        }

        tmp_source_name_30 = tmp_mvar_value_10;
        tmp_tuple_element_16 = LOOKUP_ATTRIBUTE( tmp_source_name_30, const_str_plain_datetime );
        if ( tmp_tuple_element_16 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
            Py_DECREF( tmp_assign_source_74 );

            exception_lineno = 697;

            goto frame_exception_exit_1;
        }
        PyTuple_SET_ITEM( tmp_assign_source_74, 3, tmp_tuple_element_16 );
        tmp_tuple_element_16 = (PyObject *)&PyBytes_Type;
        Py_INCREF( tmp_tuple_element_16 );
        PyTuple_SET_ITEM( tmp_assign_source_74, 4, tmp_tuple_element_16 );
        UPDATE_STRING_DICT1( moduledict_plistlib, (Nuitka_StringObject *)const_str_plain__scalars, tmp_assign_source_74 );
    }
    // Tried code:
    {
        PyObject *tmp_assign_source_75;
        PyObject *tmp_dircall_arg1_3;
        tmp_dircall_arg1_3 = const_tuple_type_object_tuple;
        Py_INCREF( tmp_dircall_arg1_3 );

        {
            PyObject *dir_call_args[] = {tmp_dircall_arg1_3};
            tmp_assign_source_75 = impl___internal__$$$function_1__mro_entries_conversion( dir_call_args );
        }
        if ( tmp_assign_source_75 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 699;

            goto try_except_handler_19;
        }
        assert( tmp_class_creation_7__bases == NULL );
        tmp_class_creation_7__bases = tmp_assign_source_75;
    }
    {
        PyObject *tmp_assign_source_76;
        tmp_assign_source_76 = PyDict_New();
        assert( tmp_class_creation_7__class_decl_dict == NULL );
        tmp_class_creation_7__class_decl_dict = tmp_assign_source_76;
    }
    {
        PyObject *tmp_assign_source_77;
        PyObject *tmp_metaclass_name_7;
        nuitka_bool tmp_condition_result_30;
        PyObject *tmp_key_name_19;
        PyObject *tmp_dict_name_19;
        PyObject *tmp_dict_name_20;
        PyObject *tmp_key_name_20;
        nuitka_bool tmp_condition_result_31;
        int tmp_truth_name_3;
        PyObject *tmp_type_arg_9;
        PyObject *tmp_subscribed_name_3;
        PyObject *tmp_subscript_name_3;
        PyObject *tmp_bases_name_7;
        tmp_key_name_19 = const_str_plain_metaclass;
        CHECK_OBJECT( tmp_class_creation_7__class_decl_dict );
        tmp_dict_name_19 = tmp_class_creation_7__class_decl_dict;
        tmp_res = PyDict_Contains( tmp_dict_name_19, tmp_key_name_19 );
        if ( tmp_res == -1 )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 699;

            goto try_except_handler_19;
        }
        tmp_condition_result_30 = ( tmp_res != 0 ) ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
        if ( tmp_condition_result_30 == NUITKA_BOOL_TRUE )
        {
            goto condexpr_true_10;
        }
        else
        {
            goto condexpr_false_10;
        }
        condexpr_true_10:;
        CHECK_OBJECT( tmp_class_creation_7__class_decl_dict );
        tmp_dict_name_20 = tmp_class_creation_7__class_decl_dict;
        tmp_key_name_20 = const_str_plain_metaclass;
        tmp_metaclass_name_7 = DICT_GET_ITEM( tmp_dict_name_20, tmp_key_name_20 );
        if ( tmp_metaclass_name_7 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 699;

            goto try_except_handler_19;
        }
        goto condexpr_end_10;
        condexpr_false_10:;
        CHECK_OBJECT( tmp_class_creation_7__bases );
        tmp_truth_name_3 = CHECK_IF_TRUE( tmp_class_creation_7__bases );
        if ( tmp_truth_name_3 == -1 )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 699;

            goto try_except_handler_19;
        }
        tmp_condition_result_31 = tmp_truth_name_3 == 1 ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
        if ( tmp_condition_result_31 == NUITKA_BOOL_TRUE )
        {
            goto condexpr_true_11;
        }
        else
        {
            goto condexpr_false_11;
        }
        condexpr_true_11:;
        CHECK_OBJECT( tmp_class_creation_7__bases );
        tmp_subscribed_name_3 = tmp_class_creation_7__bases;
        tmp_subscript_name_3 = const_int_0;
        tmp_type_arg_9 = LOOKUP_SUBSCRIPT_CONST( tmp_subscribed_name_3, tmp_subscript_name_3, 0 );
        if ( tmp_type_arg_9 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 699;

            goto try_except_handler_19;
        }
        tmp_metaclass_name_7 = BUILTIN_TYPE1( tmp_type_arg_9 );
        Py_DECREF( tmp_type_arg_9 );
        if ( tmp_metaclass_name_7 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 699;

            goto try_except_handler_19;
        }
        goto condexpr_end_11;
        condexpr_false_11:;
        tmp_metaclass_name_7 = (PyObject *)&PyType_Type;
        Py_INCREF( tmp_metaclass_name_7 );
        condexpr_end_11:;
        condexpr_end_10:;
        CHECK_OBJECT( tmp_class_creation_7__bases );
        tmp_bases_name_7 = tmp_class_creation_7__bases;
        tmp_assign_source_77 = SELECT_METACLASS( tmp_metaclass_name_7, tmp_bases_name_7 );
        Py_DECREF( tmp_metaclass_name_7 );
        if ( tmp_assign_source_77 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 699;

            goto try_except_handler_19;
        }
        assert( tmp_class_creation_7__metaclass == NULL );
        tmp_class_creation_7__metaclass = tmp_assign_source_77;
    }
    {
        nuitka_bool tmp_condition_result_32;
        PyObject *tmp_key_name_21;
        PyObject *tmp_dict_name_21;
        tmp_key_name_21 = const_str_plain_metaclass;
        CHECK_OBJECT( tmp_class_creation_7__class_decl_dict );
        tmp_dict_name_21 = tmp_class_creation_7__class_decl_dict;
        tmp_res = PyDict_Contains( tmp_dict_name_21, tmp_key_name_21 );
        if ( tmp_res == -1 )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 699;

            goto try_except_handler_19;
        }
        tmp_condition_result_32 = ( tmp_res != 0 ) ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
        if ( tmp_condition_result_32 == NUITKA_BOOL_TRUE )
        {
            goto branch_yes_21;
        }
        else
        {
            goto branch_no_21;
        }
        branch_yes_21:;
        CHECK_OBJECT( tmp_class_creation_7__class_decl_dict );
        tmp_dictdel_dict = tmp_class_creation_7__class_decl_dict;
        tmp_dictdel_key = const_str_plain_metaclass;
        tmp_result = DICT_REMOVE_ITEM( tmp_dictdel_dict, tmp_dictdel_key );
        if ( tmp_result == false )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 699;

            goto try_except_handler_19;
        }
        branch_no_21:;
    }
    {
        nuitka_bool tmp_condition_result_33;
        PyObject *tmp_source_name_31;
        CHECK_OBJECT( tmp_class_creation_7__metaclass );
        tmp_source_name_31 = tmp_class_creation_7__metaclass;
        tmp_res = PyObject_HasAttr( tmp_source_name_31, const_str_plain___prepare__ );
        tmp_condition_result_33 = ( tmp_res != 0 ) ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
        if ( tmp_condition_result_33 == NUITKA_BOOL_TRUE )
        {
            goto branch_yes_22;
        }
        else
        {
            goto branch_no_22;
        }
        branch_yes_22:;
        {
            PyObject *tmp_assign_source_78;
            PyObject *tmp_called_name_18;
            PyObject *tmp_source_name_32;
            PyObject *tmp_args_name_14;
            PyObject *tmp_tuple_element_17;
            PyObject *tmp_kw_name_14;
            CHECK_OBJECT( tmp_class_creation_7__metaclass );
            tmp_source_name_32 = tmp_class_creation_7__metaclass;
            tmp_called_name_18 = LOOKUP_ATTRIBUTE( tmp_source_name_32, const_str_plain___prepare__ );
            if ( tmp_called_name_18 == NULL )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 699;

                goto try_except_handler_19;
            }
            tmp_tuple_element_17 = const_str_plain__BinaryPlistWriter;
            tmp_args_name_14 = PyTuple_New( 2 );
            Py_INCREF( tmp_tuple_element_17 );
            PyTuple_SET_ITEM( tmp_args_name_14, 0, tmp_tuple_element_17 );
            CHECK_OBJECT( tmp_class_creation_7__bases );
            tmp_tuple_element_17 = tmp_class_creation_7__bases;
            Py_INCREF( tmp_tuple_element_17 );
            PyTuple_SET_ITEM( tmp_args_name_14, 1, tmp_tuple_element_17 );
            CHECK_OBJECT( tmp_class_creation_7__class_decl_dict );
            tmp_kw_name_14 = tmp_class_creation_7__class_decl_dict;
            frame_6a6219654a078aede7e40aaccdae8e56->m_frame.f_lineno = 699;
            tmp_assign_source_78 = CALL_FUNCTION( tmp_called_name_18, tmp_args_name_14, tmp_kw_name_14 );
            Py_DECREF( tmp_called_name_18 );
            Py_DECREF( tmp_args_name_14 );
            if ( tmp_assign_source_78 == NULL )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 699;

                goto try_except_handler_19;
            }
            assert( tmp_class_creation_7__prepared == NULL );
            tmp_class_creation_7__prepared = tmp_assign_source_78;
        }
        {
            nuitka_bool tmp_condition_result_34;
            PyObject *tmp_operand_name_7;
            PyObject *tmp_source_name_33;
            CHECK_OBJECT( tmp_class_creation_7__prepared );
            tmp_source_name_33 = tmp_class_creation_7__prepared;
            tmp_res = PyObject_HasAttr( tmp_source_name_33, const_str_plain___getitem__ );
            tmp_operand_name_7 = ( tmp_res != 0 ) ? Py_True : Py_False;
            tmp_res = CHECK_IF_TRUE( tmp_operand_name_7 );
            if ( tmp_res == -1 )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 699;

                goto try_except_handler_19;
            }
            tmp_condition_result_34 = ( tmp_res == 0 ) ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
            if ( tmp_condition_result_34 == NUITKA_BOOL_TRUE )
            {
                goto branch_yes_23;
            }
            else
            {
                goto branch_no_23;
            }
            branch_yes_23:;
            {
                PyObject *tmp_raise_type_7;
                PyObject *tmp_raise_value_7;
                PyObject *tmp_left_name_7;
                PyObject *tmp_right_name_7;
                PyObject *tmp_tuple_element_18;
                PyObject *tmp_getattr_target_7;
                PyObject *tmp_getattr_attr_7;
                PyObject *tmp_getattr_default_7;
                PyObject *tmp_source_name_34;
                PyObject *tmp_type_arg_10;
                tmp_raise_type_7 = PyExc_TypeError;
                tmp_left_name_7 = const_str_digest_75fd71b1edada749c2ef7ac810062295;
                CHECK_OBJECT( tmp_class_creation_7__metaclass );
                tmp_getattr_target_7 = tmp_class_creation_7__metaclass;
                tmp_getattr_attr_7 = const_str_plain___name__;
                tmp_getattr_default_7 = const_str_angle_metaclass;
                tmp_tuple_element_18 = BUILTIN_GETATTR( tmp_getattr_target_7, tmp_getattr_attr_7, tmp_getattr_default_7 );
                if ( tmp_tuple_element_18 == NULL )
                {
                    assert( ERROR_OCCURRED() );

                    FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                    exception_lineno = 699;

                    goto try_except_handler_19;
                }
                tmp_right_name_7 = PyTuple_New( 2 );
                PyTuple_SET_ITEM( tmp_right_name_7, 0, tmp_tuple_element_18 );
                CHECK_OBJECT( tmp_class_creation_7__prepared );
                tmp_type_arg_10 = tmp_class_creation_7__prepared;
                tmp_source_name_34 = BUILTIN_TYPE1( tmp_type_arg_10 );
                assert( !(tmp_source_name_34 == NULL) );
                tmp_tuple_element_18 = LOOKUP_ATTRIBUTE( tmp_source_name_34, const_str_plain___name__ );
                Py_DECREF( tmp_source_name_34 );
                if ( tmp_tuple_element_18 == NULL )
                {
                    assert( ERROR_OCCURRED() );

                    FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
                    Py_DECREF( tmp_right_name_7 );

                    exception_lineno = 699;

                    goto try_except_handler_19;
                }
                PyTuple_SET_ITEM( tmp_right_name_7, 1, tmp_tuple_element_18 );
                tmp_raise_value_7 = BINARY_OPERATION_REMAINDER( tmp_left_name_7, tmp_right_name_7 );
                Py_DECREF( tmp_right_name_7 );
                if ( tmp_raise_value_7 == NULL )
                {
                    assert( ERROR_OCCURRED() );

                    FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                    exception_lineno = 699;

                    goto try_except_handler_19;
                }
                exception_type = tmp_raise_type_7;
                Py_INCREF( tmp_raise_type_7 );
                exception_value = tmp_raise_value_7;
                exception_lineno = 699;
                RAISE_EXCEPTION_IMPLICIT( &exception_type, &exception_value, &exception_tb );

                goto try_except_handler_19;
            }
            branch_no_23:;
        }
        goto branch_end_22;
        branch_no_22:;
        {
            PyObject *tmp_assign_source_79;
            tmp_assign_source_79 = PyDict_New();
            assert( tmp_class_creation_7__prepared == NULL );
            tmp_class_creation_7__prepared = tmp_assign_source_79;
        }
        branch_end_22:;
    }
    {
        PyObject *tmp_assign_source_80;
        {
            PyObject *tmp_set_locals_7;
            CHECK_OBJECT( tmp_class_creation_7__prepared );
            tmp_set_locals_7 = tmp_class_creation_7__prepared;
            locals_plistlib_699 = tmp_set_locals_7;
            Py_INCREF( tmp_set_locals_7 );
        }
        // Tried code:
        // Tried code:
        tmp_dictset_value = const_str_plain_plistlib;
        tmp_res = PyObject_SetItem( locals_plistlib_699, const_str_plain___module__, tmp_dictset_value );
        if ( tmp_res != 0 )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 699;

            goto try_except_handler_21;
        }
        tmp_dictset_value = const_str_plain__BinaryPlistWriter;
        tmp_res = PyObject_SetItem( locals_plistlib_699, const_str_plain___qualname__, tmp_dictset_value );
        if ( tmp_res != 0 )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 699;

            goto try_except_handler_21;
        }
        MAKE_OR_REUSE_FRAME( cache_frame_5e97e27e88e3107c75e82e003d130761_8, codeobj_5e97e27e88e3107c75e82e003d130761, module_plistlib, sizeof(void *) );
        frame_5e97e27e88e3107c75e82e003d130761_8 = cache_frame_5e97e27e88e3107c75e82e003d130761_8;

        // Push the new frame as the currently active one.
        pushFrameStack( frame_5e97e27e88e3107c75e82e003d130761_8 );

        // Mark the frame object as in use, ref count 1 will be up for reuse.
        assert( Py_REFCNT( frame_5e97e27e88e3107c75e82e003d130761_8 ) == 2 ); // Frame stack

        // Framed code:
        tmp_dictset_value = MAKE_FUNCTION_plistlib$$$function_56___init__(  );



        tmp_res = PyObject_SetItem( locals_plistlib_699, const_str_plain___init__, tmp_dictset_value );
        Py_DECREF( tmp_dictset_value );
        if ( tmp_res != 0 )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 700;
            type_description_2 = "o";
            goto frame_exception_exit_8;
        }
        tmp_dictset_value = MAKE_FUNCTION_plistlib$$$function_57_write(  );



        tmp_res = PyObject_SetItem( locals_plistlib_699, const_str_plain_write, tmp_dictset_value );
        Py_DECREF( tmp_dictset_value );
        if ( tmp_res != 0 )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 705;
            type_description_2 = "o";
            goto frame_exception_exit_8;
        }
        tmp_dictset_value = MAKE_FUNCTION_plistlib$$$function_58__flatten(  );



        tmp_res = PyObject_SetItem( locals_plistlib_699, const_str_plain__flatten, tmp_dictset_value );
        Py_DECREF( tmp_dictset_value );
        if ( tmp_res != 0 )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 750;
            type_description_2 = "o";
            goto frame_exception_exit_8;
        }
        tmp_dictset_value = MAKE_FUNCTION_plistlib$$$function_59__getrefnum(  );



        tmp_res = PyObject_SetItem( locals_plistlib_699, const_str_plain__getrefnum, tmp_dictset_value );
        Py_DECREF( tmp_dictset_value );
        if ( tmp_res != 0 )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 798;
            type_description_2 = "o";
            goto frame_exception_exit_8;
        }
        tmp_dictset_value = MAKE_FUNCTION_plistlib$$$function_60__write_size(  );



        tmp_res = PyObject_SetItem( locals_plistlib_699, const_str_plain__write_size, tmp_dictset_value );
        Py_DECREF( tmp_dictset_value );
        if ( tmp_res != 0 )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 806;
            type_description_2 = "o";
            goto frame_exception_exit_8;
        }
        tmp_dictset_value = MAKE_FUNCTION_plistlib$$$function_61__write_object(  );



        tmp_res = PyObject_SetItem( locals_plistlib_699, const_str_plain__write_object, tmp_dictset_value );
        Py_DECREF( tmp_dictset_value );
        if ( tmp_res != 0 )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 822;
            type_description_2 = "o";
            goto frame_exception_exit_8;
        }

#if 0
        RESTORE_FRAME_EXCEPTION( frame_5e97e27e88e3107c75e82e003d130761_8 );
#endif

        // Put the previous frame back on top.
        popFrameStack();

        goto frame_no_exception_7;

        frame_exception_exit_8:;

#if 0
        RESTORE_FRAME_EXCEPTION( frame_5e97e27e88e3107c75e82e003d130761_8 );
#endif

        if ( exception_tb == NULL )
        {
            exception_tb = MAKE_TRACEBACK( frame_5e97e27e88e3107c75e82e003d130761_8, exception_lineno );
        }
        else if ( exception_tb->tb_frame != &frame_5e97e27e88e3107c75e82e003d130761_8->m_frame )
        {
            exception_tb = ADD_TRACEBACK( exception_tb, frame_5e97e27e88e3107c75e82e003d130761_8, exception_lineno );
        }

        // Attachs locals to frame if any.
        Nuitka_Frame_AttachLocals(
            (struct Nuitka_FrameObject *)frame_5e97e27e88e3107c75e82e003d130761_8,
            type_description_2,
            outline_6_var___class__
        );


        // Release cached frame.
        if ( frame_5e97e27e88e3107c75e82e003d130761_8 == cache_frame_5e97e27e88e3107c75e82e003d130761_8 )
        {
            Py_DECREF( frame_5e97e27e88e3107c75e82e003d130761_8 );
        }
        cache_frame_5e97e27e88e3107c75e82e003d130761_8 = NULL;

        assertFrameObject( frame_5e97e27e88e3107c75e82e003d130761_8 );

        // Put the previous frame back on top.
        popFrameStack();

        // Return the error.
        goto nested_frame_exit_7;

        frame_no_exception_7:;
        goto skip_nested_handling_7;
        nested_frame_exit_7:;

        goto try_except_handler_21;
        skip_nested_handling_7:;
        {
            nuitka_bool tmp_condition_result_35;
            PyObject *tmp_compexpr_left_3;
            PyObject *tmp_compexpr_right_3;
            CHECK_OBJECT( tmp_class_creation_7__bases );
            tmp_compexpr_left_3 = tmp_class_creation_7__bases;
            tmp_compexpr_right_3 = const_tuple_type_object_tuple;
            tmp_res = RICH_COMPARE_BOOL_NOTEQ_OBJECT_OBJECT( tmp_compexpr_left_3, tmp_compexpr_right_3 );
            if ( tmp_res == -1 )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 699;

                goto try_except_handler_21;
            }
            tmp_condition_result_35 = ( tmp_res != 0 ) ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
            if ( tmp_condition_result_35 == NUITKA_BOOL_TRUE )
            {
                goto branch_yes_24;
            }
            else
            {
                goto branch_no_24;
            }
            branch_yes_24:;
            tmp_dictset_value = const_tuple_type_object_tuple;
            tmp_res = PyObject_SetItem( locals_plistlib_699, const_str_plain___orig_bases__, tmp_dictset_value );
            if ( tmp_res != 0 )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 699;

                goto try_except_handler_21;
            }
            branch_no_24:;
        }
        {
            PyObject *tmp_assign_source_81;
            PyObject *tmp_called_name_19;
            PyObject *tmp_args_name_15;
            PyObject *tmp_tuple_element_19;
            PyObject *tmp_kw_name_15;
            CHECK_OBJECT( tmp_class_creation_7__metaclass );
            tmp_called_name_19 = tmp_class_creation_7__metaclass;
            tmp_tuple_element_19 = const_str_plain__BinaryPlistWriter;
            tmp_args_name_15 = PyTuple_New( 3 );
            Py_INCREF( tmp_tuple_element_19 );
            PyTuple_SET_ITEM( tmp_args_name_15, 0, tmp_tuple_element_19 );
            CHECK_OBJECT( tmp_class_creation_7__bases );
            tmp_tuple_element_19 = tmp_class_creation_7__bases;
            Py_INCREF( tmp_tuple_element_19 );
            PyTuple_SET_ITEM( tmp_args_name_15, 1, tmp_tuple_element_19 );
            tmp_tuple_element_19 = locals_plistlib_699;
            Py_INCREF( tmp_tuple_element_19 );
            PyTuple_SET_ITEM( tmp_args_name_15, 2, tmp_tuple_element_19 );
            CHECK_OBJECT( tmp_class_creation_7__class_decl_dict );
            tmp_kw_name_15 = tmp_class_creation_7__class_decl_dict;
            frame_6a6219654a078aede7e40aaccdae8e56->m_frame.f_lineno = 699;
            tmp_assign_source_81 = CALL_FUNCTION( tmp_called_name_19, tmp_args_name_15, tmp_kw_name_15 );
            Py_DECREF( tmp_args_name_15 );
            if ( tmp_assign_source_81 == NULL )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 699;

                goto try_except_handler_21;
            }
            assert( outline_6_var___class__ == NULL );
            outline_6_var___class__ = tmp_assign_source_81;
        }
        CHECK_OBJECT( outline_6_var___class__ );
        tmp_assign_source_80 = outline_6_var___class__;
        Py_INCREF( tmp_assign_source_80 );
        goto try_return_handler_21;
        // tried codes exits in all cases
        NUITKA_CANNOT_GET_HERE( plistlib );
        return MOD_RETURN_VALUE( NULL );
        // Return handler code:
        try_return_handler_21:;
        Py_DECREF( locals_plistlib_699 );
        locals_plistlib_699 = NULL;
        goto try_return_handler_20;
        // Exception handler code:
        try_except_handler_21:;
        exception_keeper_type_19 = exception_type;
        exception_keeper_value_19 = exception_value;
        exception_keeper_tb_19 = exception_tb;
        exception_keeper_lineno_19 = exception_lineno;
        exception_type = NULL;
        exception_value = NULL;
        exception_tb = NULL;
        exception_lineno = 0;

        Py_DECREF( locals_plistlib_699 );
        locals_plistlib_699 = NULL;
        // Re-raise.
        exception_type = exception_keeper_type_19;
        exception_value = exception_keeper_value_19;
        exception_tb = exception_keeper_tb_19;
        exception_lineno = exception_keeper_lineno_19;

        goto try_except_handler_20;
        // End of try:
        // tried codes exits in all cases
        NUITKA_CANNOT_GET_HERE( plistlib );
        return MOD_RETURN_VALUE( NULL );
        // Return handler code:
        try_return_handler_20:;
        CHECK_OBJECT( (PyObject *)outline_6_var___class__ );
        Py_DECREF( outline_6_var___class__ );
        outline_6_var___class__ = NULL;

        goto outline_result_7;
        // Exception handler code:
        try_except_handler_20:;
        exception_keeper_type_20 = exception_type;
        exception_keeper_value_20 = exception_value;
        exception_keeper_tb_20 = exception_tb;
        exception_keeper_lineno_20 = exception_lineno;
        exception_type = NULL;
        exception_value = NULL;
        exception_tb = NULL;
        exception_lineno = 0;

        // Re-raise.
        exception_type = exception_keeper_type_20;
        exception_value = exception_keeper_value_20;
        exception_tb = exception_keeper_tb_20;
        exception_lineno = exception_keeper_lineno_20;

        goto outline_exception_7;
        // End of try:
        // Return statement must have exited already.
        NUITKA_CANNOT_GET_HERE( plistlib );
        return MOD_RETURN_VALUE( NULL );
        outline_exception_7:;
        exception_lineno = 699;
        goto try_except_handler_19;
        outline_result_7:;
        UPDATE_STRING_DICT1( moduledict_plistlib, (Nuitka_StringObject *)const_str_plain__BinaryPlistWriter, tmp_assign_source_80 );
    }
    goto try_end_7;
    // Exception handler code:
    try_except_handler_19:;
    exception_keeper_type_21 = exception_type;
    exception_keeper_value_21 = exception_value;
    exception_keeper_tb_21 = exception_tb;
    exception_keeper_lineno_21 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    Py_XDECREF( tmp_class_creation_7__bases );
    tmp_class_creation_7__bases = NULL;

    Py_XDECREF( tmp_class_creation_7__class_decl_dict );
    tmp_class_creation_7__class_decl_dict = NULL;

    Py_XDECREF( tmp_class_creation_7__metaclass );
    tmp_class_creation_7__metaclass = NULL;

    Py_XDECREF( tmp_class_creation_7__prepared );
    tmp_class_creation_7__prepared = NULL;

    // Re-raise.
    exception_type = exception_keeper_type_21;
    exception_value = exception_keeper_value_21;
    exception_tb = exception_keeper_tb_21;
    exception_lineno = exception_keeper_lineno_21;

    goto frame_exception_exit_1;
    // End of try:
    try_end_7:;
    CHECK_OBJECT( (PyObject *)tmp_class_creation_7__bases );
    Py_DECREF( tmp_class_creation_7__bases );
    tmp_class_creation_7__bases = NULL;

    CHECK_OBJECT( (PyObject *)tmp_class_creation_7__class_decl_dict );
    Py_DECREF( tmp_class_creation_7__class_decl_dict );
    tmp_class_creation_7__class_decl_dict = NULL;

    CHECK_OBJECT( (PyObject *)tmp_class_creation_7__metaclass );
    Py_DECREF( tmp_class_creation_7__metaclass );
    tmp_class_creation_7__metaclass = NULL;

    CHECK_OBJECT( (PyObject *)tmp_class_creation_7__prepared );
    Py_DECREF( tmp_class_creation_7__prepared );
    tmp_class_creation_7__prepared = NULL;

    {
        PyObject *tmp_assign_source_82;
        tmp_assign_source_82 = MAKE_FUNCTION_plistlib$$$function_62__is_fmt_binary(  );



        UPDATE_STRING_DICT1( moduledict_plistlib, (Nuitka_StringObject *)const_str_plain__is_fmt_binary, tmp_assign_source_82 );
    }
    {
        PyObject *tmp_assign_source_83;
        PyObject *tmp_dict_key_1;
        PyObject *tmp_dict_value_1;
        PyObject *tmp_mvar_value_11;
        PyObject *tmp_dict_key_2;
        PyObject *tmp_dict_value_2;
        PyObject *tmp_mvar_value_12;
        PyObject *tmp_dict_key_3;
        PyObject *tmp_dict_value_3;
        PyObject *tmp_mvar_value_13;
        PyObject *tmp_dict_key_4;
        PyObject *tmp_dict_value_4;
        PyObject *tmp_mvar_value_14;
        PyObject *tmp_dict_key_5;
        PyObject *tmp_dict_value_5;
        PyObject *tmp_mvar_value_15;
        PyObject *tmp_dict_key_6;
        PyObject *tmp_dict_value_6;
        PyObject *tmp_mvar_value_16;
        PyObject *tmp_dict_key_7;
        PyObject *tmp_dict_value_7;
        PyObject *tmp_mvar_value_17;
        PyObject *tmp_dict_key_8;
        PyObject *tmp_dict_value_8;
        PyObject *tmp_mvar_value_18;
        tmp_mvar_value_11 = GET_STRING_DICT_VALUE( moduledict_plistlib, (Nuitka_StringObject *)const_str_plain_FMT_XML );

        if (unlikely( tmp_mvar_value_11 == NULL ))
        {
            tmp_mvar_value_11 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_FMT_XML );
        }

        if ( tmp_mvar_value_11 == NULL )
        {

            exception_type = PyExc_NameError;
            Py_INCREF( exception_type );
            exception_value = PyUnicode_FromFormat( "name '%s' is not defined", "FMT_XML" );
            exception_tb = NULL;
            NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
            CHAIN_EXCEPTION( exception_value );

            exception_lineno = 918;

            goto frame_exception_exit_1;
        }

        tmp_dict_key_1 = tmp_mvar_value_11;
        tmp_dict_key_2 = const_str_plain_detect;
        tmp_mvar_value_12 = GET_STRING_DICT_VALUE( moduledict_plistlib, (Nuitka_StringObject *)const_str_plain__is_fmt_xml );

        if (unlikely( tmp_mvar_value_12 == NULL ))
        {
            tmp_mvar_value_12 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain__is_fmt_xml );
        }

        if ( tmp_mvar_value_12 == NULL )
        {

            exception_type = PyExc_NameError;
            Py_INCREF( exception_type );
            exception_value = PyUnicode_FromFormat( "name '%s' is not defined", "_is_fmt_xml" );
            exception_tb = NULL;
            NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
            CHAIN_EXCEPTION( exception_value );

            exception_lineno = 919;

            goto frame_exception_exit_1;
        }

        tmp_dict_value_2 = tmp_mvar_value_12;
        tmp_dict_value_1 = _PyDict_NewPresized( 3 );
        tmp_res = PyDict_SetItem( tmp_dict_value_1, tmp_dict_key_2, tmp_dict_value_2 );
        assert( !(tmp_res != 0) );
        tmp_dict_key_3 = const_str_plain_parser;
        tmp_mvar_value_13 = GET_STRING_DICT_VALUE( moduledict_plistlib, (Nuitka_StringObject *)const_str_plain__PlistParser );

        if (unlikely( tmp_mvar_value_13 == NULL ))
        {
            tmp_mvar_value_13 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain__PlistParser );
        }

        if ( tmp_mvar_value_13 == NULL )
        {
            Py_DECREF( tmp_dict_value_1 );
            exception_type = PyExc_NameError;
            Py_INCREF( exception_type );
            exception_value = PyUnicode_FromFormat( "name '%s' is not defined", "_PlistParser" );
            exception_tb = NULL;
            NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
            CHAIN_EXCEPTION( exception_value );

            exception_lineno = 920;

            goto frame_exception_exit_1;
        }

        tmp_dict_value_3 = tmp_mvar_value_13;
        tmp_res = PyDict_SetItem( tmp_dict_value_1, tmp_dict_key_3, tmp_dict_value_3 );
        assert( !(tmp_res != 0) );
        tmp_dict_key_4 = const_str_plain_writer;
        tmp_mvar_value_14 = GET_STRING_DICT_VALUE( moduledict_plistlib, (Nuitka_StringObject *)const_str_plain__PlistWriter );

        if (unlikely( tmp_mvar_value_14 == NULL ))
        {
            tmp_mvar_value_14 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain__PlistWriter );
        }

        if ( tmp_mvar_value_14 == NULL )
        {
            Py_DECREF( tmp_dict_value_1 );
            exception_type = PyExc_NameError;
            Py_INCREF( exception_type );
            exception_value = PyUnicode_FromFormat( "name '%s' is not defined", "_PlistWriter" );
            exception_tb = NULL;
            NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
            CHAIN_EXCEPTION( exception_value );

            exception_lineno = 921;

            goto frame_exception_exit_1;
        }

        tmp_dict_value_4 = tmp_mvar_value_14;
        tmp_res = PyDict_SetItem( tmp_dict_value_1, tmp_dict_key_4, tmp_dict_value_4 );
        assert( !(tmp_res != 0) );
        tmp_assign_source_83 = _PyDict_NewPresized( 2 );
        tmp_res = PyDict_SetItem( tmp_assign_source_83, tmp_dict_key_1, tmp_dict_value_1 );
        Py_DECREF( tmp_dict_value_1 );
        if ( tmp_res != 0 )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
            Py_DECREF( tmp_assign_source_83 );

            exception_lineno = 917;

            goto frame_exception_exit_1;
        }
        tmp_mvar_value_15 = GET_STRING_DICT_VALUE( moduledict_plistlib, (Nuitka_StringObject *)const_str_plain_FMT_BINARY );

        if (unlikely( tmp_mvar_value_15 == NULL ))
        {
            tmp_mvar_value_15 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_FMT_BINARY );
        }

        if ( tmp_mvar_value_15 == NULL )
        {
            Py_DECREF( tmp_assign_source_83 );
            exception_type = PyExc_NameError;
            Py_INCREF( exception_type );
            exception_value = PyUnicode_FromFormat( "name '%s' is not defined", "FMT_BINARY" );
            exception_tb = NULL;
            NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
            CHAIN_EXCEPTION( exception_value );

            exception_lineno = 923;

            goto frame_exception_exit_1;
        }

        tmp_dict_key_5 = tmp_mvar_value_15;
        tmp_dict_key_6 = const_str_plain_detect;
        tmp_mvar_value_16 = GET_STRING_DICT_VALUE( moduledict_plistlib, (Nuitka_StringObject *)const_str_plain__is_fmt_binary );

        if (unlikely( tmp_mvar_value_16 == NULL ))
        {
            tmp_mvar_value_16 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain__is_fmt_binary );
        }

        CHECK_OBJECT( tmp_mvar_value_16 );
        tmp_dict_value_6 = tmp_mvar_value_16;
        tmp_dict_value_5 = _PyDict_NewPresized( 3 );
        tmp_res = PyDict_SetItem( tmp_dict_value_5, tmp_dict_key_6, tmp_dict_value_6 );
        assert( !(tmp_res != 0) );
        tmp_dict_key_7 = const_str_plain_parser;
        tmp_mvar_value_17 = GET_STRING_DICT_VALUE( moduledict_plistlib, (Nuitka_StringObject *)const_str_plain__BinaryPlistParser );

        if (unlikely( tmp_mvar_value_17 == NULL ))
        {
            tmp_mvar_value_17 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain__BinaryPlistParser );
        }

        if ( tmp_mvar_value_17 == NULL )
        {
            Py_DECREF( tmp_assign_source_83 );
            Py_DECREF( tmp_dict_value_5 );
            exception_type = PyExc_NameError;
            Py_INCREF( exception_type );
            exception_value = PyUnicode_FromFormat( "name '%s' is not defined", "_BinaryPlistParser" );
            exception_tb = NULL;
            NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
            CHAIN_EXCEPTION( exception_value );

            exception_lineno = 925;

            goto frame_exception_exit_1;
        }

        tmp_dict_value_7 = tmp_mvar_value_17;
        tmp_res = PyDict_SetItem( tmp_dict_value_5, tmp_dict_key_7, tmp_dict_value_7 );
        assert( !(tmp_res != 0) );
        tmp_dict_key_8 = const_str_plain_writer;
        tmp_mvar_value_18 = GET_STRING_DICT_VALUE( moduledict_plistlib, (Nuitka_StringObject *)const_str_plain__BinaryPlistWriter );

        if (unlikely( tmp_mvar_value_18 == NULL ))
        {
            tmp_mvar_value_18 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain__BinaryPlistWriter );
        }

        if ( tmp_mvar_value_18 == NULL )
        {
            Py_DECREF( tmp_assign_source_83 );
            Py_DECREF( tmp_dict_value_5 );
            exception_type = PyExc_NameError;
            Py_INCREF( exception_type );
            exception_value = PyUnicode_FromFormat( "name '%s' is not defined", "_BinaryPlistWriter" );
            exception_tb = NULL;
            NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
            CHAIN_EXCEPTION( exception_value );

            exception_lineno = 926;

            goto frame_exception_exit_1;
        }

        tmp_dict_value_8 = tmp_mvar_value_18;
        tmp_res = PyDict_SetItem( tmp_dict_value_5, tmp_dict_key_8, tmp_dict_value_8 );
        assert( !(tmp_res != 0) );
        tmp_res = PyDict_SetItem( tmp_assign_source_83, tmp_dict_key_5, tmp_dict_value_5 );
        Py_DECREF( tmp_dict_value_5 );
        if ( tmp_res != 0 )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
            Py_DECREF( tmp_assign_source_83 );

            exception_lineno = 917;

            goto frame_exception_exit_1;
        }
        UPDATE_STRING_DICT1( moduledict_plistlib, (Nuitka_StringObject *)const_str_plain__FORMATS, tmp_assign_source_83 );
    }
    {
        PyObject *tmp_assign_source_84;
        PyObject *tmp_kw_defaults_1;
        tmp_kw_defaults_1 = PyDict_Copy( const_dict_c061ef12f02b7b74854c0240ac25e2d7 );
        tmp_assign_source_84 = MAKE_FUNCTION_plistlib$$$function_63_load( tmp_kw_defaults_1 );



        UPDATE_STRING_DICT1( moduledict_plistlib, (Nuitka_StringObject *)const_str_plain_load, tmp_assign_source_84 );
    }
    {
        PyObject *tmp_assign_source_85;
        PyObject *tmp_kw_defaults_2;
        tmp_kw_defaults_2 = PyDict_Copy( const_dict_c061ef12f02b7b74854c0240ac25e2d7 );
        tmp_assign_source_85 = MAKE_FUNCTION_plistlib$$$function_64_loads( tmp_kw_defaults_2 );



        UPDATE_STRING_DICT1( moduledict_plistlib, (Nuitka_StringObject *)const_str_plain_loads, tmp_assign_source_85 );
    }
    {
        PyObject *tmp_assign_source_86;
        PyObject *tmp_kw_defaults_3;
        PyObject *tmp_dict_key_9;
        PyObject *tmp_dict_value_9;
        PyObject *tmp_mvar_value_19;
        PyObject *tmp_dict_key_10;
        PyObject *tmp_dict_value_10;
        PyObject *tmp_dict_key_11;
        PyObject *tmp_dict_value_11;
        tmp_dict_key_9 = const_str_plain_fmt;
        tmp_mvar_value_19 = GET_STRING_DICT_VALUE( moduledict_plistlib, (Nuitka_StringObject *)const_str_plain_FMT_XML );

        if (unlikely( tmp_mvar_value_19 == NULL ))
        {
            tmp_mvar_value_19 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_FMT_XML );
        }

        if ( tmp_mvar_value_19 == NULL )
        {

            exception_type = PyExc_NameError;
            Py_INCREF( exception_type );
            exception_value = PyUnicode_FromFormat( "name '%s' is not defined", "FMT_XML" );
            exception_tb = NULL;
            NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
            CHAIN_EXCEPTION( exception_value );

            exception_lineno = 962;

            goto frame_exception_exit_1;
        }

        tmp_dict_value_9 = tmp_mvar_value_19;
        tmp_kw_defaults_3 = _PyDict_NewPresized( 3 );
        tmp_res = PyDict_SetItem( tmp_kw_defaults_3, tmp_dict_key_9, tmp_dict_value_9 );
        assert( !(tmp_res != 0) );
        tmp_dict_key_10 = const_str_plain_sort_keys;
        tmp_dict_value_10 = Py_True;
        tmp_res = PyDict_SetItem( tmp_kw_defaults_3, tmp_dict_key_10, tmp_dict_value_10 );
        assert( !(tmp_res != 0) );
        tmp_dict_key_11 = const_str_plain_skipkeys;
        tmp_dict_value_11 = Py_False;
        tmp_res = PyDict_SetItem( tmp_kw_defaults_3, tmp_dict_key_11, tmp_dict_value_11 );
        assert( !(tmp_res != 0) );
        tmp_assign_source_86 = MAKE_FUNCTION_plistlib$$$function_65_dump( tmp_kw_defaults_3 );



        UPDATE_STRING_DICT1( moduledict_plistlib, (Nuitka_StringObject *)const_str_plain_dump, tmp_assign_source_86 );
    }
    {
        PyObject *tmp_assign_source_87;
        PyObject *tmp_kw_defaults_4;
        PyObject *tmp_dict_key_12;
        PyObject *tmp_dict_value_12;
        PyObject *tmp_mvar_value_20;
        PyObject *tmp_dict_key_13;
        PyObject *tmp_dict_value_13;
        PyObject *tmp_dict_key_14;
        PyObject *tmp_dict_value_14;
        tmp_dict_key_12 = const_str_plain_fmt;
        tmp_mvar_value_20 = GET_STRING_DICT_VALUE( moduledict_plistlib, (Nuitka_StringObject *)const_str_plain_FMT_XML );

        if (unlikely( tmp_mvar_value_20 == NULL ))
        {
            tmp_mvar_value_20 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_FMT_XML );
        }

        if ( tmp_mvar_value_20 == NULL )
        {

            exception_type = PyExc_NameError;
            Py_INCREF( exception_type );
            exception_value = PyUnicode_FromFormat( "name '%s' is not defined", "FMT_XML" );
            exception_tb = NULL;
            NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
            CHAIN_EXCEPTION( exception_value );

            exception_lineno = 973;

            goto frame_exception_exit_1;
        }

        tmp_dict_value_12 = tmp_mvar_value_20;
        tmp_kw_defaults_4 = _PyDict_NewPresized( 3 );
        tmp_res = PyDict_SetItem( tmp_kw_defaults_4, tmp_dict_key_12, tmp_dict_value_12 );
        assert( !(tmp_res != 0) );
        tmp_dict_key_13 = const_str_plain_skipkeys;
        tmp_dict_value_13 = Py_False;
        tmp_res = PyDict_SetItem( tmp_kw_defaults_4, tmp_dict_key_13, tmp_dict_value_13 );
        assert( !(tmp_res != 0) );
        tmp_dict_key_14 = const_str_plain_sort_keys;
        tmp_dict_value_14 = Py_True;
        tmp_res = PyDict_SetItem( tmp_kw_defaults_4, tmp_dict_key_14, tmp_dict_value_14 );
        assert( !(tmp_res != 0) );
        tmp_assign_source_87 = MAKE_FUNCTION_plistlib$$$function_66_dumps( tmp_kw_defaults_4 );



        UPDATE_STRING_DICT1( moduledict_plistlib, (Nuitka_StringObject *)const_str_plain_dumps, tmp_assign_source_87 );
    }

    // Restore frame exception if necessary.
#if 0
    RESTORE_FRAME_EXCEPTION( frame_6a6219654a078aede7e40aaccdae8e56 );
#endif
    popFrameStack();

    assertFrameObject( frame_6a6219654a078aede7e40aaccdae8e56 );

    goto frame_no_exception_8;

    frame_exception_exit_1:;
#if 0
    RESTORE_FRAME_EXCEPTION( frame_6a6219654a078aede7e40aaccdae8e56 );
#endif

    if ( exception_tb == NULL )
    {
        exception_tb = MAKE_TRACEBACK( frame_6a6219654a078aede7e40aaccdae8e56, exception_lineno );
    }
    else if ( exception_tb->tb_frame != &frame_6a6219654a078aede7e40aaccdae8e56->m_frame )
    {
        exception_tb = ADD_TRACEBACK( exception_tb, frame_6a6219654a078aede7e40aaccdae8e56, exception_lineno );
    }

    // Put the previous frame back on top.
    popFrameStack();

    // Return the error.
    goto module_exception_exit;

    frame_no_exception_8:;

#if _NUITKA_EXPERIMENTAL_PKGUTIL_ITERMODULES
#if 0 && 0
    {
        PyObject *path_value = GET_STRING_DICT_VALUE( moduledict_plistlib, (Nuitka_StringObject *)const_str_plain___path__ );

        if (path_value && PyList_CheckExact(path_value) && PyList_Size(path_value) > 0)
        {
            PyObject *path_element = PyList_GetItem( path_value, 0 );

            PyObject *path_importer_cache = PySys_GetObject((char *)"path_importer_cache");
            CHECK_OBJECT( path_importer_cache );

            int res = PyDict_SetItem( path_importer_cache, path_element, (PyObject *)&Nuitka_Loader_Type );
            assert( res == 0 );
        }
    }
#endif
#endif

    return MOD_RETURN_VALUE( module_plistlib );
    module_exception_exit:
    RESTORE_ERROR_OCCURRED( exception_type, exception_value, exception_tb );
    return MOD_RETURN_VALUE( NULL );
}
