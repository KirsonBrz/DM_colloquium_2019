/* Generated code for Python module 'platform'
 * created by Nuitka version 0.6.2
 *
 * This code is in part copyright 2019 Kay Hayen.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

#include "nuitka/prelude.h"

#include "__helpers.h"

/* The "_module_platform" is a Python object pointer of module type.
 *
 * Note: For full compatibility with CPython, every module variable access
 * needs to go through it except for cases where the module cannot possibly
 * have changed in the mean time.
 */

PyObject *module_platform;
PyDictObject *moduledict_platform;

/* The declarations of module constants used, if any. */
extern PyObject *const_str_plain_isdir;
extern PyObject *const_str_plain___spec__;
static PyObject *const_str_plain_OpenKeyEx;
static PyObject *const_str_digest_e7eb97b447375909548733772db2d0e6;
static PyObject *const_str_digest_affede846270f264becdab424a3bf89f;
static PyObject *const_str_plain_use_syscmd_ver;
extern PyObject *const_str_plain_max;
static PyObject *const_str_plain_branch;
extern PyObject *const_str_plain_default;
static PyObject *const_tuple_str_plain_PROCESSOR_ARCHITECTURE_str_empty_tuple;
static PyObject *const_str_plain_verfiles;
extern PyObject *const_str_plain_mode;
static PyObject *const_str_plain_csid;
static PyObject *const_str_digest_93445454e75717f01046cf48aadea7c4;
static PyObject *const_str_plain_python_branch;
extern PyObject *const_str_plain_m;
extern PyObject *const_str_plain_os;
extern PyObject *const_str_plain_end;
static PyObject *const_str_plain_product_type;
static PyObject *const_str_plain_Windows;
extern PyObject *const_str_plain_None;
static PyObject *const_str_digest_a9c432dbaad1611bb26c6aec50c9d536;
extern PyObject *const_int_pos_5;
static PyObject *const_str_plain_chunksize;
extern PyObject *const_str_plain_stdout;
static PyObject *const_str_plain__git;
static PyObject *const_str_plain_vendor;
extern PyObject *const_tuple_none_none_none_tuple;
static PyObject *const_str_plain_OpenLinux;
static PyObject *const_str_digest_0beef85ad37ed8bd851c7863dbdaabca;
static PyObject *const_str_digest_7e86eb27fe234136a687cb753da10a81;
static PyObject *const_str_plain_PROCESSOR_ARCHITECTURE;
static PyObject *const_str_plain_ptype;
extern PyObject *const_slice_none_int_pos_2_none;
extern PyObject *const_str_plain_Popen;
static PyObject *const_tuple_str_digest_a9c432dbaad1611bb26c6aec50c9d536_tuple;
extern PyObject *const_str_plain___debug__;
static PyObject *const_tuple_6aa827f8f4a1857d2474e286956cd49f_tuple;
static PyObject *const_tuple_str_plain_PROCESSOR_ARCHITEW6432_str_empty_tuple;
static PyObject *const_str_plain_OpenVMS;
static PyObject *const_str_plain_tv;
extern PyObject *const_str_chr_41;
static PyObject *const_str_plain_full_distribution_name;
extern PyObject *const_str_angle_genexpr;
extern PyObject *const_str_plain_str;
static PyObject *const_tuple_96172174f0a81bb68e9d280fa37de39a_tuple;
static PyObject *const_tuple_int_pos_6_int_0_tuple;
static PyObject *const_str_digest_e487b637e1ad77eda7fb0751ba4790d1;
static PyObject *const_tuple_41d228fdb7ed823a0d61b28ea26a162e_tuple;
static PyObject *const_str_plain_getwindowsversion;
extern PyObject *const_str_plain_min;
extern PyObject *const_str_plain_path;
extern PyObject *const_str_chr_45;
static PyObject *const_str_plain_Alpha;
static PyObject *const_tuple_ee7b6c82982232b3ab5d55b6d04ebec0_tuple;
extern PyObject *const_str_plain_calcsize;
extern PyObject *const_str_plain_normpath;
static PyObject *const_str_plain_post2012ServerR2;
extern PyObject *const_int_pos_8;
extern PyObject *const_str_plain_load;
static PyObject *const_str_plain__default_architecture;
extern PyObject *const_str_plain_listdir;
static PyObject *const_str_digest_e7ea514a030f655b80ff45bde200e99c;
extern PyObject *const_tuple_str_dot_tuple;
static PyObject *const_str_digest_b2cf3abbcc35652f5e11bac6fe7339cf;
static PyObject *const_tuple_int_pos_5_int_pos_2_tuple;
static PyObject *const_tuple_str_plain_unknown_str_empty_tuple;
static PyObject *const_str_plain_mac_ver;
static PyObject *const_str_plain_libc_ver;
static PyObject *const_str_plain__libc_search;
static PyObject *const_str_plain_supported_platforms;
static PyObject *const_str_digest_aa4b456c1e004ee4c412a3fc87cde38c;
extern PyObject *const_str_plain_major;
static PyObject *const_str_plain__platform;
extern PyObject *const_str_plain_name;
extern PyObject *const_tuple_type_AttributeError_type_OSError_tuple;
static PyObject *const_str_digest_c75e23dbd7a56cbcbc9155661cdb4df5;
static PyObject *const_str_plain_with;
static PyObject *const_tuple_a51507747dabe2270b8e57d055011a39_tuple;
static PyObject *const_str_digest_4581d34f8d063218f6a5015edff8b01c;
extern PyObject *const_str_plain_realpath;
static PyObject *const_str_plain_dist;
extern PyObject *const_str_plain_map;
extern PyObject *const_str_plain_False;
extern PyObject *const_str_digest_c075052d723d6707083e869a0e3659bb;
static PyObject *const_str_plain_vm_vendor;
extern PyObject *const_int_0;
static PyObject *const_str_plain__UNIXCONFDIR;
static PyObject *const_str_plain__mac_ver_xml;
static PyObject *const_tuple_str_plain_r_int_neg_1_tuple;
static PyObject *const_str_plain_WindowsPE;
extern PyObject *const_str_digest_db35ab94a03c3cbeb13cbe2a1d728b77;
static PyObject *const_str_plain_linux_distribution;
static PyObject *const_tuple_cea0a55d4208bd1fc91bed8c22370d95_tuple;
extern PyObject *const_str_digest_85fe97af08c9a213aa891dc673aeaa3e;
extern PyObject *const_str_plain_6;
extern PyObject *const_str_plain_compiler;
static PyObject *const_str_digest_f23d39de2747d42ab8fd78ab63c45ec4;
static PyObject *const_str_plain__mercurial;
static PyObject *const_str_digest_a90093fc8e8dd37700df165482a3202e;
static PyObject *const_str_plain_architecture;
static PyObject *const_str_digest_9fbf7115c1919f9e6be3d00ddd2a0e01;
extern PyObject *const_int_pos_4;
static PyObject *const_tuple_bdd370d905eebd397ba2a815f35093c0_tuple;
static PyObject *const_str_plain_on;
static PyObject *const_str_plain_os_version;
static PyObject *const_str_digest_7a422a1de8755ae10bd232163b9d1873;
extern PyObject *const_str_plain___cached__;
static PyObject *const_slice_none_int_pos_13_none;
static PyObject *const_str_plain_machine;
static PyObject *const_slice_int_pos_14_none_none;
extern PyObject *const_str_plain_plistlib;
extern PyObject *const_tuple_none_tuple;
static PyObject *const_str_digest_a27c22fd922c3e382053b3d43b7805d9;
static PyObject *const_tuple_int_pos_6_int_pos_1_tuple;
static PyObject *const_slice_int_pos_13_none_none;
static PyObject *const_str_plain_alt_version;
extern PyObject *const_str_plain_winreg;
static PyObject *const_str_digest_b235a38a1eecd0e7f7d0b3188f8326db;
static PyObject *const_str_digest_c5fc1f91c339cdebaf161146ff288b3b;
extern PyObject *const_int_pos_1;
extern PyObject *const_str_plain_replace;
static PyObject *const_bytes_digest_cd27fad322a3c847c9efd23ee3ded150;
static PyObject *const_str_plain_os_arch;
extern PyObject *const_str_digest_62b7e67e29e99420603c12d205222fa5;
static PyObject *const_str_digest_31711a5bc9d56b30765b999acf7ad0c7;
static PyObject *const_str_plain_so;
extern PyObject *const_str_plain_QueryValueEx;
static PyObject *const_str_plain__pypy_sys_version_parser;
extern PyObject *const_str_plain_etc;
static PyObject *const_str_plain_redhat;
extern PyObject *const_str_plain_groups;
static PyObject *const_str_digest_f2ffe551371f3a5b3ab3a3f80e9cbd82;
extern PyObject *const_str_plain_pkg;
extern PyObject *const_str_plain_bufsize;
static PyObject *const_str_plain_CPython;
static PyObject *const_str_plain_2012ServerR2;
static PyObject *const_str_plain_build;
extern PyObject *const_str_plain_format;
static PyObject *const_str_plain_System;
extern PyObject *const_str_plain_startswith;
static PyObject *const_str_plain_ELF;
static PyObject *const_str_plain_python_version_tuple;
static PyObject *const_str_plain_arch;
static PyObject *const_tuple_beb428d3c0a5fe5cde14e10da6ecdd36_tuple;
extern PyObject *const_str_plain_catch_warnings;
static PyObject *const_tuple_str_plain_getwindowsversion_tuple;
static PyObject *const_str_digest_58d96e8cdb3a99d17284e3397e5cca6b;
static PyObject *const_tuple_str_plain_IronPython_tuple;
static PyObject *const_str_plain_DIST_IDENT;
static PyObject *const_tuple_str_digest_8a2ddc463e12981c6acfc7080a3f3b0f_tuple;
extern PyObject *const_str_plain___file__;
extern PyObject *const_str_plain_latin1;
extern PyObject *const_str_plain_struct;
static PyObject *const_tuple_9fffb3a60682292afdab602ec1064353_tuple;
extern PyObject *const_str_plain_proc;
extern PyObject *const_str_plain_abspath;
extern PyObject *const_str_plain_fn;
static PyObject *const_str_plain__release_filename;
static PyObject *const_str_digest_0e00f16ce03b88638fa3350ac141599e;
static PyObject *const_tuple_4313dc38cb7b8653f9b511ee05e778bd_tuple;
static PyObject *const_tuple_str_chr_58_str_chr_45_tuple;
static PyObject *const_str_plain_bit;
static PyObject *const_str_digest_2a97892845181b4de397b7c5260f5eae;
static PyObject *const_str_plain_maj;
static PyObject *const_tuple_str_chr_47_str_chr_45_tuple;
extern PyObject *const_str_plain_NUL;
extern PyObject *const_str_plain_strip;
extern PyObject *const_str_plain_filter;
extern PyObject *const_str_plain_read;
static PyObject *const_str_plain_16bit;
static PyObject *const_tuple_3db9f76853ef639b497917168f0afc69_tuple;
static PyObject *const_str_plain_Linux;
extern PyObject *const_str_plain_platform;
static PyObject *const_str_plain_gentoo;
extern PyObject *const_str_plain_PIPE;
extern PyObject *const_str_plain___copyright__;
extern PyObject *const_tuple_str_plain_l_tuple;
extern PyObject *const_str_plain_close;
static PyObject *const_tuple_str_digest_b4e0d93eaa03503f4f915db42c4229da_tuple;
static PyObject *const_str_digest_88e458ff3be8ccacc83e1b0a8110486d;
static PyObject *const_str_digest_fc3064e2a9426f0ebb30452af9a27131;
static PyObject *const_str_plain_service_pack_major;
static PyObject *const_tuple_3638aa083ca9931951132a42ffd863dd_tuple;
static PyObject *const_str_digest_7ec939bd263e3d63e9fd34d1e63a41dd;
static PyObject *const_str_plain_buildtime;
extern PyObject *const_str_plain_n;
static PyObject *const_tuple_str_plain_filepath_tuple;
static PyObject *const_tuple_879bc0eae82e9822987fa448ee507b55_tuple;
static PyObject *const_str_digest_53043fe1d675776aec2f08acc74fa298;
static PyObject *const_str_digest_89c36d7bb5defe289266c6631215c1f5;
static PyObject *const_str_plain_N32;
extern PyObject *const_str_plain_value;
static PyObject *const_str_plain_UnitedLinux;
static PyObject *const_str_digest_8114cf4f0f1845d12087b0358cacd4c7;
static PyObject *const_str_plain_libcinit;
static PyObject *const_tuple_str_empty_str_empty_str_empty_tuple;
static PyObject *const_tuple_844945a6b719bba0d779c7b7e212c02d_tuple;
static PyObject *const_str_plain_system_alias;
extern PyObject *const_str_plain_collections;
static PyObject *const_tuple_186a147f0b165dbdc3e112e6d8a23760_tuple;
extern PyObject *const_tuple_str_plain_latin1_tuple;
static PyObject *const_str_plain_MacOS;
extern PyObject *const_tuple_str_chr_45_tuple;
extern PyObject *const_str_plain_l;
static PyObject *const_str_plain_Rhapsody;
extern PyObject *const_tuple_str_digest_b9c4baf879ebd882d40843df3a4dead7_str_plain_x_tuple;
static PyObject *const_tuple_str_plain_P_tuple;
static PyObject *const_str_plain_IronPython;
static PyObject *const_str_digest_60e4696c8bda06f0710423d2b6739d5c;
static PyObject *const_str_plain_winver;
static PyObject *const_tuple_int_pos_6_int_pos_2_tuple;
static PyObject *const_str_plain__sys_version_parser;
extern PyObject *const_str_plain_P;
static PyObject *const_str_plain__supported_dists;
extern PyObject *const_str_plain_error;
extern PyObject *const_str_plain_stacklevel;
static PyObject *const_str_digest_b54ae7c64ddfba5a43ec9389092ce978;
extern PyObject *const_str_plain_decode;
extern PyObject *const_str_plain_threads;
extern PyObject *const_tuple_str_empty_tuple;
static PyObject *const_str_digest_a448315180eda5238b56e666fde580a3;
static PyObject *const_str_plain_getProperty;
static PyObject *const_str_plain_versioninfo;
static PyObject *const_str_plain_PE;
extern PyObject *const_str_plain_f;
static PyObject *const_str_digest_7059b76934756507026da48f1ba159b0;
static PyObject *const_tuple_str_plain_version_str_plain_result_str_plain_v_str_plain_t_tuple;
static PyObject *const_tuple_80cf2a37463826881be6eb6a8668c4c4_tuple;
extern PyObject *const_slice_none_int_pos_3_none;
static PyObject *const_str_digest_3d01c170674159e6055a9a063104ceb7;
extern PyObject *const_str_plain_rc;
static PyObject *const_tuple_str_plain_ppc_str_digest_e7ea514a030f655b80ff45bde200e99c_tuple;
static PyObject *const_str_plain_PowerPC;
static PyObject *const_str_plain__ironpython26_sys_version_parser;
static PyObject *const_str_plain__dist_try_harder;
static PyObject *const_tuple_str_empty_str_empty_str_empty_str_empty_tuple;
static PyObject *const_str_plain_win32_ver;
extern PyObject *const_str_plain_origin;
static PyObject *const_tuple_b6253dde28452ee1df38f2c093c68547_tuple;
static PyObject *const_tuple_str_plain_System_tuple;
static PyObject *const_str_plain__lsb_release_version;
static PyObject *const_str_plain__component_re;
static PyObject *const_str_plain_CurrentType;
extern PyObject *const_slice_none_int_pos_4_none;
static PyObject *const_str_digest_d0ff6362996a3c9f2d950c8ca73a812d;
extern PyObject *const_str_plain_namedtuple;
static PyObject *const_str_plain__follow_symlinks;
extern PyObject *const_str_chr_40;
extern PyObject *const_int_pos_16384;
static PyObject *const_str_plain__distname;
extern PyObject *const_str_plain_v;
static PyObject *const_str_plain__norm_version;
static PyObject *const_str_plain_rocks;
extern PyObject *const_str_chr_47;
extern PyObject *const_str_plain_sys;
static PyObject *const_tuple_str_digest_068eb885e4aaedf6bb189a0c4eb85723_str_empty_tuple;
static PyObject *const_str_plain__syscmd_file;
extern PyObject *const_slice_none_int_neg_1_none;
extern PyObject *const_str_plain_socket;
extern PyObject *const_str_plain_dummy;
static PyObject *const_str_plain_ints;
extern PyObject *const_str_plain_key;
static PyObject *const_str_plain_ppc;
extern PyObject *const_str_plain_option;
static PyObject *const_str_plain_vm_name;
static PyObject *const_tuple_int_pos_6_none_tuple;
extern PyObject *const_str_plain_has_location;
extern PyObject *const_str_plain_readlink;
extern PyObject *const_str_plain_version;
static PyObject *const_str_plain_PROCESSOR_IDENTIFIER;
static PyObject *const_str_plain_builddate;
extern PyObject *const_str_plain__id;
extern PyObject *const_str_plain_info;
extern PyObject *const_str_empty;
extern PyObject *const_str_plain_python_version;
static PyObject *const_str_digest_46c476a08b202054d25b54a5edafc033;
extern PyObject *const_int_pos_100;
static PyObject *const_str_digest_2bef6bf41b2e72a3cbc50f9de91800de;
static PyObject *const_str_plain_os_name;
static PyObject *const_tuple_str_empty_str_plain_Windows_tuple;
static PyObject *const_tuple_str_digest_53043fe1d675776aec2f08acc74fa298_tuple;
extern PyObject *const_str_plain_python_build;
extern PyObject *const_int_pos_14;
static PyObject *const_tuple_str_plain_Linux_tuple;
static PyObject *const_str_plain_pl;
static PyObject *const_tuple_50e5809ccd796006f2557fcc8ede18ff_tuple;
static PyObject *const_str_plain__ironpython_sys_version_parser;
static PyObject *const_tuple_int_pos_6_int_pos_3_tuple;
extern PyObject *const_str_plain_result;
static PyObject *const_str_plain_platform_version;
static PyObject *const_str_digest_601d16abc8bc82193e1a2f02797a4810;
static PyObject *const_tuple_4c00129f43ad65b0d5b8ef4f4d57ec83_tuple;
static PyObject *const_str_plain_IRIX64;
extern PyObject *const_str_plain_0;
static PyObject *const_tuple_str_digest_9fbf7115c1919f9e6be3d00ddd2a0e01_tuple;
extern PyObject *const_str_plain_readline;
static PyObject *const_tuple_b019fa3b00f82bb2c3855f6401da6ed4_tuple;
extern PyObject *const_str_plain_sys_version;
extern PyObject *const_int_neg_1;
static PyObject *const_str_plain_turbolinux;
extern PyObject *const_str_plain_ignore;
static PyObject *const_tuple_str_chr_34_str_chr_45_tuple;
extern PyObject *const_str_plain_STDOUT;
static PyObject *const_str_plain__platform_cache;
extern PyObject *const_str_plain_id;
static PyObject *const_str_plain_yellowdog;
static PyObject *const_tuple_str_digest_89c36d7bb5defe289266c6631215c1f5_tuple;
static PyObject *const_str_digest_79a975d21d4348d44f8a8a6ac69a8ecf;
static PyObject *const_str_plain_supported_dists;
static PyObject *const_str_plain__WIN32_CLIENT_RELEASES;
static PyObject *const_str_digest_48d62bee99fc62cc3df95231223fc825;
static PyObject *const_str_plain_osinfo;
static PyObject *const_str_plain_revision;
static PyObject *const_str_plain__java_getprop;
static PyObject *const_str_digest_5d387f2d5c467e35ea9e46040e0a4c2d;
static PyObject *const_str_plain_MSDOS;
static PyObject *const_str_plain_csd;
static PyObject *const_str_plain__syscmd_ver;
extern PyObject *const_str_plain_pos;
extern PyObject *const_str_plain_islink;
extern PyObject *const_str_plain___doc__;
extern PyObject *const_str_plain_re;
static PyObject *const_str_plain_buildno;
extern PyObject *const_str_plain_extend;
static PyObject *const_str_digest_a172fc0fcdc0324bde5cd82d8bf52b7d;
extern PyObject *const_str_plain_s;
extern PyObject *const_str_digest_068eb885e4aaedf6bb189a0c4eb85723;
extern PyObject *const_str_plain_warnings;
static PyObject *const_str_plain_64bit;
static PyObject *const_tuple_8efea55afa47d8f29d8a48c961bc7ac4_tuple;
static PyObject *const_str_digest_1686aa75cea0515b58f7c447ad521e76;
static PyObject *const_str_plain_linkage;
static PyObject *const_str_plain_node;
static PyObject *const_tuple_str_plain_args_str_plain_platform_str_plain_cleaned_tuple;
static PyObject *const_str_plain_glibcversion;
extern PyObject *const_str_digest_b9c4baf879ebd882d40843df3a4dead7;
static PyObject *const_str_digest_7aa3ec2c732a9cfbcf16e3c71d0b60cf;
static PyObject *const_str_plain_vms_lib;
extern PyObject *const_str_plain_wait;
extern PyObject *const_str_plain_subprocess;
static PyObject *const_tuple_6b440bfa5b3121db5117d83bac4a8fdf_tuple;
extern PyObject *const_tuple_empty;
static PyObject *const_str_plain__parse_release_file;
static PyObject *const_str_plain_SP;
extern PyObject *const_str_space;
extern PyObject *const_str_plain_V;
extern PyObject *const_str_plain_append;
static PyObject *const_str_plain_2003Server;
extern PyObject *const_str_plain_popen;
static PyObject *const_str_digest_e4e97622421c13e798ad32d45d55de5e;
extern PyObject *const_int_pos_10;
static PyObject *const_str_plain_vm_release;
extern PyObject *const_str_chr_92;
static PyObject *const_str_digest_80654e2d89d39ed487e956cc00c12981;
static PyObject *const_tuple_str_plain_dos_str_plain_win32_str_plain_win16_tuple;
extern PyObject *const_str_plain_compile;
static PyObject *const_str_plain_glibc;
static PyObject *const_tuple_str_digest_85fe97af08c9a213aa891dc673aeaa3e_str_chr_45_tuple;
extern PyObject *const_str_plain_b;
extern PyObject *const_str_plain_split;
static PyObject *const_str_plain_2008ServerR2;
extern PyObject *const_str_plain_gethostname;
static PyObject *const_str_plain_mageia;
static PyObject *const_str_plain_SunOS;
static PyObject *const_str_digest_f8eade62a18d6d57e9fe13f9384395cd;
static PyObject *const_str_plain_SuSE;
static PyObject *const_str_plain__sys_version_cache;
static PyObject *const_str_plain_ProductVersion;
static PyObject *const_str_digest_8de99c9893b3a85ef93a1337e8aee84f;
static PyObject *const_tuple_b3e088f8a08759017a886e75faa4b24f_tuple;
static PyObject *const_dict_65b9fbe352edd9eb08ffb860ae9637d7;
static PyObject *const_str_digest_ec3bf7dd19dc7ed953e3161036ca6e00;
extern PyObject *const_str_plain_exists;
static PyObject *const_str_digest_2f1d8a4bf4076819a8462e3516cd3c4b;
static PyObject *const_str_plain_DEV_NULL;
extern PyObject *const_int_pos_1000;
static PyObject *const_str_digest_8fa6b8f60d5d56975f73474d37608cfc;
static PyObject *const_str_plain__ver_output;
static PyObject *const_str_plain_IRIX;
static PyObject *const_str_digest_b4411e041e04a06c7be1bd9d9e4bccf2;
static PyObject *const_str_digest_6e70f991e7bbc2bafb75c8aa1f14cfbd;
extern PyObject *const_str_plain_uname;
extern PyObject *const_str_plain_x;
static PyObject *const_tuple_6bf58df76181354eb75bea9cdb34c763_tuple;
static PyObject *const_str_plain_dos;
extern PyObject *const_str_plain_communicate;
static PyObject *const_dict_9668ec65d04d52f8707c28d0bc56a8f5;
static PyObject *const_str_digest_60227585594ae34c5ae46679daff4fa6;
static PyObject *const_str_plain_fedora;
extern PyObject *const_str_plain_dirname;
extern PyObject *const_str_plain_system;
static PyObject *const_str_digest_43d8f87da2b2c6b18435c9fb92d7d50d;
extern PyObject *const_int_pos_13;
static PyObject *const_str_plain_no_os_uname;
static PyObject *const_str_plain__uname_cache;
extern PyObject *const_str_plain_ASCII;
extern PyObject *const_str_plain__;
extern PyObject *const_str_plain_pipe;
extern PyObject *const_str_plain_chunk;
static PyObject *const_str_plain_distname;
extern PyObject *const_str_plain_cmd;
static PyObject *const_str_digest_91ed6263fdf2a019af9e0f2fc59fdaf4;
static PyObject *const_str_plain__sys_version;
static PyObject *const_str_plain_centos;
extern PyObject *const_str_plain_target;
static PyObject *const_str_plain_processor;
extern PyObject *const_str_plain_python_compiler;
static PyObject *const_str_digest_7c43f8e717dadececfad8d5b4940066a;
extern PyObject *const_str_plain_5;
static PyObject *const_str_plain__syscmd_uname;
static PyObject *const_tuple_str_plain_java_tuple;
extern PyObject *const_str_plain_binary;
extern PyObject *const_str_plain_get;
static PyObject *const_str_plain_PyPy;
extern PyObject *const_str_plain_sort;
static PyObject *const_str_plain__linux_distribution;
static PyObject *const_str_plain_32bit;
static PyObject *const_str_plain__comparable_version;
static PyObject *const_tuple_str_plain_win32_str_plain_win16_tuple;
extern PyObject *const_str_plain_executable;
extern PyObject *const_str_plain_win32;
extern PyObject *const_str_plain_warn;
static PyObject *const_tuple_str_plain_win32_str_plain_win16_str_plain_dos_tuple;
extern PyObject *const_str_plain_tag;
static PyObject *const_bytes_digest_42c41b3825c6201ecfaae761fed3d90f;
static PyObject *const_tuple_str_chr_40_str_chr_45_tuple;
static PyObject *const_str_plain_unknown;
static PyObject *const_str_plain_firstline;
static PyObject *const_str_plain_Jython;
static PyObject *const_tuple_str_space_str_plain___tuple;
static PyObject *const_str_plain_VAX;
extern PyObject *const_str_plain___exit__;
static PyObject *const_str_digest_e8e111809a28ddaba2e8e8b614459008;
extern PyObject *const_str_plain_args;
static PyObject *const_str_plain_Java;
extern PyObject *const_str_plain_bits;
static PyObject *const_str_plain_Microsoft;
extern PyObject *const_dict_f154c9a58c9419d7e391901d7b7fe49e;
static PyObject *const_str_digest_3d17135e9932663b6ac6a081ed4b93d5;
extern PyObject *const_tuple_str_plain_s_tuple;
extern PyObject *const_int_pos_128;
extern PyObject *const_str_plain_size;
extern PyObject *const_int_pos_6;
static PyObject *const_str_plain_ver;
static PyObject *const_str_plain_PROCESSOR_ARCHITEW6432;
extern PyObject *const_str_plain___enter__;
static PyObject *const_str_plain_java_ver;
static PyObject *const_dict_920ba897df3ccc986f41bdabeeb05d88;
extern PyObject *const_tuple_int_0_int_0_tuple;
extern PyObject *const_str_plain_join;
static PyObject *const_str_plain_mandriva;
static PyObject *const_str_digest_8f4a53b5cf60a8635bf4ae2f450d7690;
extern PyObject *const_tuple_str_plain_0_tuple;
static PyObject *const_str_digest_69fcdc073bf66ccd55bf9a8a89b7f30c;
static PyObject *const_str_digest_1c769e8d2e15170a2d8cc05571543e9b;
static PyObject *const_str_plain_debian;
extern PyObject *const_str_dot;
static PyObject *const_str_digest_31d63c6dcb12a1b21610d339e5dfe57e;
static PyObject *const_str_digest_54f3cedf4ae4e0fa27d4aa876c1557e5;
extern PyObject *const_str_plain_environ;
extern PyObject *const_str_plain_len;
static PyObject *const_tuple_4d8f6d47b682f58a27abda6ded6cc7f6_tuple;
static PyObject *const_tuple_str_chr_41_str_chr_45_tuple;
static PyObject *const_str_plain_python_implementation;
extern PyObject *const_str_plain_devnull;
static PyObject *const_tuple_str_empty_str_plain_WindowsPE_tuple;
static PyObject *const_str_plain_HKEY_LOCAL_MACHINE;
static PyObject *const_str_digest_44aad6fbd4eafc90a46253301256e922;
static PyObject *const_str_plain__WIN32_SERVER_RELEASES;
static PyObject *const_str_plain_COFF;
extern PyObject *const_str_plain_release;
extern PyObject *const_str_plain_t;
static PyObject *const_str_digest_207644829de0588c1bb0efe2c2f9a840;
extern PyObject *const_str_plain_filterwarnings;
extern PyObject *const_str_plain__version;
static PyObject *const_str_digest_18c19c7f1666f65100a0b668faf8189b;
static PyObject *const_tuple_str_digest_b2cf3abbcc35652f5e11bac6fe7339cf_int_0_tuple;
extern PyObject *const_str_plain_int;
static PyObject *const_str_plain_MIN_DIST_VERSION;
extern PyObject *const_str_plain_DeprecationWarning;
extern PyObject *const_str_plain_surrogateescape;
static PyObject *const_bytes_digest_da015094d65b4f8de525ca75b89cc54f;
static PyObject *const_str_plain_soversion;
extern PyObject *const_str_plain_line;
static PyObject *const_str_plain_fileout;
static PyObject *const_str_digest_7784b431cd5008cb86cccd8e28d3b60d;
extern PyObject *const_str_plain_rb;
static PyObject *const_str_plain_getsyi;
extern PyObject *const_str_plain_stderr;
extern PyObject *const_str_plain_why;
static PyObject *const_str_plain_python_revision;
extern PyObject *const_str_plain_r;
static PyObject *const_tuple_42dde1a64481afca90728eb1732accab_tuple;
static PyObject *const_tuple_str_chr_59_str_chr_45_tuple;
static PyObject *const_str_digest_a7ad85f99ad5a3d569fe3a5dfa6469b5;
static PyObject *const_dict_2dcb717810229b46c02589cbc403e20d;
extern PyObject *const_str_plain_match;
static PyObject *const_str_digest_f6fd6fd323de44f41e22129b71ae0d7b;
static PyObject *const_str_digest_21048b13275a3ae5f5edd327effae430;
extern PyObject *const_str_plain_output;
static PyObject *const_tuple_str_empty_str_plain_MSDOS_tuple;
static PyObject *const_str_plain_slackware;
static PyObject *const_str_digest_3c6ff7feba81d384f2b4e7c2b1df1ed3;
static PyObject *const_str_digest_475f11148051da1368a41fca66edfc32;
static PyObject *const_tuple_str_digest_2a97892845181b4de397b7c5260f5eae_tuple;
static PyObject *const_str_plain__node;
extern PyObject *const_str_plain_lib;
static PyObject *const_str_plain__ver_stages;
static PyObject *const_str_digest_0b162f5c4b79aa3f257f38246a3c944c;
extern PyObject *const_str_plain___version__;
static PyObject *const_str_plain_Solaris;
static PyObject *const_str_plain_uname_result;
static PyObject *const_str_digest_b4e0d93eaa03503f4f915db42c4229da;
static PyObject *const_tuple_str_plain_default_str_plain_socket_tuple;
static PyObject *const_str_digest_53ea3ead692a5b6137ed9eda275bf4a2;
extern PyObject *const_str_plain_search;
extern PyObject *const_str_chr_58;
static PyObject *const_str_digest_450fff63ec945c111983c6e814ea4cfd;
extern PyObject *const_str_angle_listcomp;
static PyObject *const_str_plain_libc;
static PyObject *const_tuple_d8c19777ed3dd140cae3d1d53d0b4398_tuple;
static PyObject *const_slice_none_int_pos_14_none;
extern PyObject *const_str_plain_java;
static PyObject *const_str_digest_efe86cfebd61b9a71b33c81b210741b4;
static PyObject *const_str_digest_5fcd0696fe944ce3e3d212e7fc0c8b51;
static PyObject *const_str_digest_d29a18585fda29d4884e7ff23cd583db;
static PyObject *const_str_digest_e385ea402377268c6888b12d36b96194;
static PyObject *const_slice_int_pos_4_int_pos_6_none;
static PyObject *const_str_digest_23ca34824203c6f381a9e69d7e58fe46;
static PyObject *const_tuple_88ef871040f710b246facc0e8a5fe5a0_tuple;
static PyObject *const_str_digest_406ba29c164f1246386dcf5f110bd3ef;
static PyObject *const_str_plain_mandrake;
extern PyObject *const_str_plain_strings;
extern PyObject *const_str_plain_values;
static PyObject *const_str_plain_CloseKey;
static PyObject *const_str_plain__release_version;
static PyObject *const_str_digest_d62c7468409a9b5dbc1f1e61cdadd7b2;
static PyObject *const_str_digest_8a2ddc463e12981c6acfc7080a3f3b0f;
extern PyObject *const_str_chr_34;
extern PyObject *const_int_pos_3;
static PyObject *const_str_digest_8c48013a0d6a1e698c31a26923791b80;
static PyObject *const_str_plain_win16;
static PyObject *const_tuple_str_digest_2bef6bf41b2e72a3cbc50f9de91800de_tuple;
static PyObject *const_tuple_str_chr_92_str_chr_45_tuple;
static PyObject *const_str_plain_2012Server;
static PyObject *const_str_plain_cpu_number;
static PyObject *const_str_plain_n32bit;
extern PyObject *const_str_chr_59;
static PyObject *const_str_plain_cleaned;
static PyObject *const_str_plain_vminfo;
extern PyObject *const_str_digest_a95935884e50a51dbe5b47044bdbd9e1;
extern PyObject *const_int_pos_2;
static PyObject *const_str_plain_filepath;
static PyObject *const_str_plain_Vista;
static PyObject *const_str_digest_98b03f82804b29f11f09b5147428a957;
extern PyObject *const_str_plain_file;
static PyObject *const_str_plain_2008Server;
extern PyObject *const_tuple_str_digest_62b7e67e29e99420603c12d205222fa5_tuple;
static PyObject *module_filename_obj;

/* Indicator if this modules private constants were created yet. */
static bool constants_created = false;

/* Function to create module private constants. */
static void createModuleConstants( void )
{
    const_str_plain_OpenKeyEx = UNSTREAM_STRING_ASCII( &constant_bin[ 494132 ], 9, 1 );
    const_str_digest_e7eb97b447375909548733772db2d0e6 = UNSTREAM_STRING_ASCII( &constant_bin[ 494141 ], 200, 0 );
    const_str_digest_affede846270f264becdab424a3bf89f = UNSTREAM_STRING_ASCII( &constant_bin[ 494341 ], 11, 0 );
    const_str_plain_use_syscmd_ver = UNSTREAM_STRING_ASCII( &constant_bin[ 494352 ], 14, 1 );
    const_str_plain_branch = UNSTREAM_STRING_ASCII( &constant_bin[ 494366 ], 6, 1 );
    const_tuple_str_plain_PROCESSOR_ARCHITECTURE_str_empty_tuple = PyTuple_New( 2 );
    const_str_plain_PROCESSOR_ARCHITECTURE = UNSTREAM_STRING_ASCII( &constant_bin[ 494372 ], 22, 1 );
    PyTuple_SET_ITEM( const_tuple_str_plain_PROCESSOR_ARCHITECTURE_str_empty_tuple, 0, const_str_plain_PROCESSOR_ARCHITECTURE ); Py_INCREF( const_str_plain_PROCESSOR_ARCHITECTURE );
    PyTuple_SET_ITEM( const_tuple_str_plain_PROCESSOR_ARCHITECTURE_str_empty_tuple, 1, const_str_empty ); Py_INCREF( const_str_empty );
    const_str_plain_verfiles = UNSTREAM_STRING_ASCII( &constant_bin[ 494394 ], 8, 1 );
    const_str_plain_csid = UNSTREAM_STRING_ASCII( &constant_bin[ 494402 ], 4, 1 );
    const_str_digest_93445454e75717f01046cf48aadea7c4 = UNSTREAM_STRING_ASCII( &constant_bin[ 494406 ], 14, 0 );
    const_str_plain_python_branch = UNSTREAM_STRING_ASCII( &constant_bin[ 494420 ], 13, 1 );
    const_str_plain_product_type = UNSTREAM_STRING_ASCII( &constant_bin[ 494433 ], 12, 1 );
    const_str_plain_Windows = UNSTREAM_STRING_ASCII( &constant_bin[ 4944 ], 7, 1 );
    const_str_digest_a9c432dbaad1611bb26c6aec50c9d536 = UNSTREAM_STRING_ASCII( &constant_bin[ 494445 ], 69, 0 );
    const_str_plain_chunksize = UNSTREAM_STRING_ASCII( &constant_bin[ 494514 ], 9, 1 );
    const_str_plain__git = UNSTREAM_STRING_ASCII( &constant_bin[ 494523 ], 4, 1 );
    const_str_plain_vendor = UNSTREAM_STRING_ASCII( &constant_bin[ 494527 ], 6, 1 );
    const_str_plain_OpenLinux = UNSTREAM_STRING_ASCII( &constant_bin[ 494533 ], 9, 1 );
    const_str_digest_0beef85ad37ed8bd851c7863dbdaabca = UNSTREAM_STRING_ASCII( &constant_bin[ 494542 ], 281, 0 );
    const_str_digest_7e86eb27fe234136a687cb753da10a81 = UNSTREAM_STRING_ASCII( &constant_bin[ 494823 ], 36, 0 );
    const_str_plain_ptype = UNSTREAM_STRING_ASCII( &constant_bin[ 494859 ], 5, 1 );
    const_tuple_str_digest_a9c432dbaad1611bb26c6aec50c9d536_tuple = PyTuple_New( 1 );
    PyTuple_SET_ITEM( const_tuple_str_digest_a9c432dbaad1611bb26c6aec50c9d536_tuple, 0, const_str_digest_a9c432dbaad1611bb26c6aec50c9d536 ); Py_INCREF( const_str_digest_a9c432dbaad1611bb26c6aec50c9d536 );
    const_tuple_6aa827f8f4a1857d2474e286956cd49f_tuple = PyTuple_New( 5 );
    PyTuple_SET_ITEM( const_tuple_6aa827f8f4a1857d2474e286956cd49f_tuple, 0, const_str_plain_version ); Py_INCREF( const_str_plain_version );
    const_str_plain_build = UNSTREAM_STRING_ASCII( &constant_bin[ 56325 ], 5, 1 );
    PyTuple_SET_ITEM( const_tuple_6aa827f8f4a1857d2474e286956cd49f_tuple, 1, const_str_plain_build ); Py_INCREF( const_str_plain_build );
    PyTuple_SET_ITEM( const_tuple_6aa827f8f4a1857d2474e286956cd49f_tuple, 2, const_str_plain_l ); Py_INCREF( const_str_plain_l );
    const_str_plain_ints = UNSTREAM_STRING_ASCII( &constant_bin[ 8758 ], 4, 1 );
    PyTuple_SET_ITEM( const_tuple_6aa827f8f4a1857d2474e286956cd49f_tuple, 3, const_str_plain_ints ); Py_INCREF( const_str_plain_ints );
    PyTuple_SET_ITEM( const_tuple_6aa827f8f4a1857d2474e286956cd49f_tuple, 4, const_str_plain_strings ); Py_INCREF( const_str_plain_strings );
    const_tuple_str_plain_PROCESSOR_ARCHITEW6432_str_empty_tuple = PyTuple_New( 2 );
    const_str_plain_PROCESSOR_ARCHITEW6432 = UNSTREAM_STRING_ASCII( &constant_bin[ 494864 ], 22, 1 );
    PyTuple_SET_ITEM( const_tuple_str_plain_PROCESSOR_ARCHITEW6432_str_empty_tuple, 0, const_str_plain_PROCESSOR_ARCHITEW6432 ); Py_INCREF( const_str_plain_PROCESSOR_ARCHITEW6432 );
    PyTuple_SET_ITEM( const_tuple_str_plain_PROCESSOR_ARCHITEW6432_str_empty_tuple, 1, const_str_empty ); Py_INCREF( const_str_empty );
    const_str_plain_OpenVMS = UNSTREAM_STRING_ASCII( &constant_bin[ 494886 ], 7, 1 );
    const_str_plain_tv = UNSTREAM_STRING_ASCII( &constant_bin[ 154862 ], 2, 1 );
    const_str_plain_full_distribution_name = UNSTREAM_STRING_ASCII( &constant_bin[ 494893 ], 22, 1 );
    const_tuple_96172174f0a81bb68e9d280fa37de39a_tuple = PyTuple_New( 2 );
    const_str_plain_uname_result = UNSTREAM_STRING_ASCII( &constant_bin[ 494915 ], 12, 1 );
    PyTuple_SET_ITEM( const_tuple_96172174f0a81bb68e9d280fa37de39a_tuple, 0, const_str_plain_uname_result ); Py_INCREF( const_str_plain_uname_result );
    const_str_digest_60e4696c8bda06f0710423d2b6739d5c = UNSTREAM_STRING_ASCII( &constant_bin[ 494927 ], 45, 0 );
    PyTuple_SET_ITEM( const_tuple_96172174f0a81bb68e9d280fa37de39a_tuple, 1, const_str_digest_60e4696c8bda06f0710423d2b6739d5c ); Py_INCREF( const_str_digest_60e4696c8bda06f0710423d2b6739d5c );
    const_tuple_int_pos_6_int_0_tuple = PyTuple_New( 2 );
    PyTuple_SET_ITEM( const_tuple_int_pos_6_int_0_tuple, 0, const_int_pos_6 ); Py_INCREF( const_int_pos_6 );
    PyTuple_SET_ITEM( const_tuple_int_pos_6_int_0_tuple, 1, const_int_0 ); Py_INCREF( const_int_0 );
    const_str_digest_e487b637e1ad77eda7fb0751ba4790d1 = UNSTREAM_STRING_ASCII( &constant_bin[ 494972 ], 15, 0 );
    const_tuple_41d228fdb7ed823a0d61b28ea26a162e_tuple = PyTuple_New( 5 );
    const_str_plain_distname = UNSTREAM_STRING_ASCII( &constant_bin[ 494987 ], 8, 1 );
    PyTuple_SET_ITEM( const_tuple_41d228fdb7ed823a0d61b28ea26a162e_tuple, 0, const_str_plain_distname ); Py_INCREF( const_str_plain_distname );
    PyTuple_SET_ITEM( const_tuple_41d228fdb7ed823a0d61b28ea26a162e_tuple, 1, const_str_plain_version ); Py_INCREF( const_str_plain_version );
    PyTuple_SET_ITEM( const_tuple_41d228fdb7ed823a0d61b28ea26a162e_tuple, 2, const_str_plain_id ); Py_INCREF( const_str_plain_id );
    const_str_plain_supported_dists = UNSTREAM_STRING_ASCII( &constant_bin[ 494995 ], 15, 1 );
    PyTuple_SET_ITEM( const_tuple_41d228fdb7ed823a0d61b28ea26a162e_tuple, 3, const_str_plain_supported_dists ); Py_INCREF( const_str_plain_supported_dists );
    PyTuple_SET_ITEM( const_tuple_41d228fdb7ed823a0d61b28ea26a162e_tuple, 4, const_str_plain_warnings ); Py_INCREF( const_str_plain_warnings );
    const_str_plain_getwindowsversion = UNSTREAM_STRING_ASCII( &constant_bin[ 495010 ], 17, 1 );
    const_str_plain_Alpha = UNSTREAM_STRING_ASCII( &constant_bin[ 313800 ], 5, 1 );
    const_tuple_ee7b6c82982232b3ab5d55b6d04ebec0_tuple = PyTuple_New( 4 );
    PyTuple_SET_ITEM( const_tuple_ee7b6c82982232b3ab5d55b6d04ebec0_tuple, 0, const_str_empty ); Py_INCREF( const_str_empty );
    PyTuple_SET_ITEM( const_tuple_ee7b6c82982232b3ab5d55b6d04ebec0_tuple, 1, const_str_empty ); Py_INCREF( const_str_empty );
    PyTuple_SET_ITEM( const_tuple_ee7b6c82982232b3ab5d55b6d04ebec0_tuple, 2, const_str_empty ); Py_INCREF( const_str_empty );
    const_tuple_str_plain_win32_str_plain_win16_str_plain_dos_tuple = PyTuple_New( 3 );
    PyTuple_SET_ITEM( const_tuple_str_plain_win32_str_plain_win16_str_plain_dos_tuple, 0, const_str_plain_win32 ); Py_INCREF( const_str_plain_win32 );
    const_str_plain_win16 = UNSTREAM_STRING_ASCII( &constant_bin[ 495027 ], 5, 1 );
    PyTuple_SET_ITEM( const_tuple_str_plain_win32_str_plain_win16_str_plain_dos_tuple, 1, const_str_plain_win16 ); Py_INCREF( const_str_plain_win16 );
    const_str_plain_dos = UNSTREAM_STRING_ASCII( &constant_bin[ 495032 ], 3, 1 );
    PyTuple_SET_ITEM( const_tuple_str_plain_win32_str_plain_win16_str_plain_dos_tuple, 2, const_str_plain_dos ); Py_INCREF( const_str_plain_dos );
    PyTuple_SET_ITEM( const_tuple_ee7b6c82982232b3ab5d55b6d04ebec0_tuple, 3, const_tuple_str_plain_win32_str_plain_win16_str_plain_dos_tuple ); Py_INCREF( const_tuple_str_plain_win32_str_plain_win16_str_plain_dos_tuple );
    const_str_plain_post2012ServerR2 = UNSTREAM_STRING_ASCII( &constant_bin[ 495035 ], 16, 1 );
    const_str_plain__default_architecture = UNSTREAM_STRING_ASCII( &constant_bin[ 495051 ], 21, 1 );
    const_str_digest_e7ea514a030f655b80ff45bde200e99c = UNSTREAM_STRING_ASCII( &constant_bin[ 495072 ], 15, 0 );
    const_str_digest_b2cf3abbcc35652f5e11bac6fe7339cf = UNSTREAM_STRING_ASCII( &constant_bin[ 495087 ], 8, 0 );
    const_tuple_int_pos_5_int_pos_2_tuple = PyTuple_New( 2 );
    PyTuple_SET_ITEM( const_tuple_int_pos_5_int_pos_2_tuple, 0, const_int_pos_5 ); Py_INCREF( const_int_pos_5 );
    PyTuple_SET_ITEM( const_tuple_int_pos_5_int_pos_2_tuple, 1, const_int_pos_2 ); Py_INCREF( const_int_pos_2 );
    const_tuple_str_plain_unknown_str_empty_tuple = PyTuple_New( 2 );
    const_str_plain_unknown = UNSTREAM_STRING_ASCII( &constant_bin[ 19566 ], 7, 1 );
    PyTuple_SET_ITEM( const_tuple_str_plain_unknown_str_empty_tuple, 0, const_str_plain_unknown ); Py_INCREF( const_str_plain_unknown );
    PyTuple_SET_ITEM( const_tuple_str_plain_unknown_str_empty_tuple, 1, const_str_empty ); Py_INCREF( const_str_empty );
    const_str_plain_mac_ver = UNSTREAM_STRING_ASCII( &constant_bin[ 495095 ], 7, 1 );
    const_str_plain_libc_ver = UNSTREAM_STRING_ASCII( &constant_bin[ 495102 ], 8, 1 );
    const_str_plain__libc_search = UNSTREAM_STRING_ASCII( &constant_bin[ 495110 ], 12, 1 );
    const_str_plain_supported_platforms = UNSTREAM_STRING_ASCII( &constant_bin[ 495122 ], 19, 1 );
    const_str_digest_aa4b456c1e004ee4c412a3fc87cde38c = UNSTREAM_STRING_ASCII( &constant_bin[ 495141 ], 14, 0 );
    const_str_plain__platform = UNSTREAM_STRING_ASCII( &constant_bin[ 495131 ], 9, 1 );
    const_str_digest_c75e23dbd7a56cbcbc9155661cdb4df5 = UNSTREAM_STRING_ASCII( &constant_bin[ 495155 ], 129, 0 );
    const_str_plain_with = UNSTREAM_STRING_ASCII( &constant_bin[ 539 ], 4, 1 );
    const_tuple_a51507747dabe2270b8e57d055011a39_tuple = PyTuple_New( 8 );
    PyTuple_SET_ITEM( const_tuple_a51507747dabe2270b8e57d055011a39_tuple, 0, const_str_plain_executable ); Py_INCREF( const_str_plain_executable );
    PyTuple_SET_ITEM( const_tuple_a51507747dabe2270b8e57d055011a39_tuple, 1, const_str_plain_bits ); Py_INCREF( const_str_plain_bits );
    const_str_plain_linkage = UNSTREAM_STRING_ASCII( &constant_bin[ 495284 ], 7, 1 );
    PyTuple_SET_ITEM( const_tuple_a51507747dabe2270b8e57d055011a39_tuple, 2, const_str_plain_linkage ); Py_INCREF( const_str_plain_linkage );
    PyTuple_SET_ITEM( const_tuple_a51507747dabe2270b8e57d055011a39_tuple, 3, const_str_plain_struct ); Py_INCREF( const_str_plain_struct );
    PyTuple_SET_ITEM( const_tuple_a51507747dabe2270b8e57d055011a39_tuple, 4, const_str_plain_size ); Py_INCREF( const_str_plain_size );
    const_str_plain_fileout = UNSTREAM_STRING_ASCII( &constant_bin[ 495291 ], 7, 1 );
    PyTuple_SET_ITEM( const_tuple_a51507747dabe2270b8e57d055011a39_tuple, 5, const_str_plain_fileout ); Py_INCREF( const_str_plain_fileout );
    PyTuple_SET_ITEM( const_tuple_a51507747dabe2270b8e57d055011a39_tuple, 6, const_str_plain_b ); Py_INCREF( const_str_plain_b );
    PyTuple_SET_ITEM( const_tuple_a51507747dabe2270b8e57d055011a39_tuple, 7, const_str_plain_l ); Py_INCREF( const_str_plain_l );
    const_str_digest_4581d34f8d063218f6a5015edff8b01c = UNSTREAM_STRING_ASCII( &constant_bin[ 495298 ], 20, 0 );
    const_str_plain_dist = UNSTREAM_STRING_ASCII( &constant_bin[ 369720 ], 4, 1 );
    const_str_plain_vm_vendor = UNSTREAM_STRING_ASCII( &constant_bin[ 495318 ], 9, 1 );
    const_str_plain__UNIXCONFDIR = UNSTREAM_STRING_ASCII( &constant_bin[ 495327 ], 12, 1 );
    const_str_plain__mac_ver_xml = UNSTREAM_STRING_ASCII( &constant_bin[ 495339 ], 12, 1 );
    const_tuple_str_plain_r_int_neg_1_tuple = PyTuple_New( 2 );
    PyTuple_SET_ITEM( const_tuple_str_plain_r_int_neg_1_tuple, 0, const_str_plain_r ); Py_INCREF( const_str_plain_r );
    PyTuple_SET_ITEM( const_tuple_str_plain_r_int_neg_1_tuple, 1, const_int_neg_1 ); Py_INCREF( const_int_neg_1 );
    const_str_plain_WindowsPE = UNSTREAM_STRING_ASCII( &constant_bin[ 495351 ], 9, 1 );
    const_str_plain_linux_distribution = UNSTREAM_STRING_ASCII( &constant_bin[ 495360 ], 18, 1 );
    const_tuple_cea0a55d4208bd1fc91bed8c22370d95_tuple = PyTuple_New( 4 );
    PyTuple_SET_ITEM( const_tuple_cea0a55d4208bd1fc91bed8c22370d95_tuple, 0, const_str_plain_release ); Py_INCREF( const_str_plain_release );
    const_str_plain_versioninfo = UNSTREAM_STRING_ASCII( &constant_bin[ 495378 ], 11, 1 );
    PyTuple_SET_ITEM( const_tuple_cea0a55d4208bd1fc91bed8c22370d95_tuple, 1, const_str_plain_versioninfo ); Py_INCREF( const_str_plain_versioninfo );
    const_str_plain_machine = UNSTREAM_STRING_ASCII( &constant_bin[ 367555 ], 7, 1 );
    PyTuple_SET_ITEM( const_tuple_cea0a55d4208bd1fc91bed8c22370d95_tuple, 2, const_str_plain_machine ); Py_INCREF( const_str_plain_machine );
    PyTuple_SET_ITEM( const_tuple_cea0a55d4208bd1fc91bed8c22370d95_tuple, 3, const_str_plain_info ); Py_INCREF( const_str_plain_info );
    const_str_digest_f23d39de2747d42ab8fd78ab63c45ec4 = UNSTREAM_STRING_ASCII( &constant_bin[ 495389 ], 28, 0 );
    const_str_plain__mercurial = UNSTREAM_STRING_ASCII( &constant_bin[ 495417 ], 10, 1 );
    const_str_digest_a90093fc8e8dd37700df165482a3202e = UNSTREAM_STRING_ASCII( &constant_bin[ 495427 ], 338, 0 );
    const_str_plain_architecture = UNSTREAM_STRING_ASCII( &constant_bin[ 495060 ], 12, 1 );
    const_str_digest_9fbf7115c1919f9e6be3d00ddd2a0e01 = UNSTREAM_STRING_ASCII( &constant_bin[ 495765 ], 85, 0 );
    const_tuple_bdd370d905eebd397ba2a815f35093c0_tuple = PyTuple_New( 16 );
    PyTuple_SET_ITEM( const_tuple_bdd370d905eebd397ba2a815f35093c0_tuple, 0, const_str_plain_executable ); Py_INCREF( const_str_plain_executable );
    PyTuple_SET_ITEM( const_tuple_bdd370d905eebd397ba2a815f35093c0_tuple, 1, const_str_plain_lib ); Py_INCREF( const_str_plain_lib );
    PyTuple_SET_ITEM( const_tuple_bdd370d905eebd397ba2a815f35093c0_tuple, 2, const_str_plain_version ); Py_INCREF( const_str_plain_version );
    PyTuple_SET_ITEM( const_tuple_bdd370d905eebd397ba2a815f35093c0_tuple, 3, const_str_plain_chunksize ); Py_INCREF( const_str_plain_chunksize );
    PyTuple_SET_ITEM( const_tuple_bdd370d905eebd397ba2a815f35093c0_tuple, 4, const_str_plain_V ); Py_INCREF( const_str_plain_V );
    PyTuple_SET_ITEM( const_tuple_bdd370d905eebd397ba2a815f35093c0_tuple, 5, const_str_plain_f ); Py_INCREF( const_str_plain_f );
    PyTuple_SET_ITEM( const_tuple_bdd370d905eebd397ba2a815f35093c0_tuple, 6, const_str_plain_binary ); Py_INCREF( const_str_plain_binary );
    PyTuple_SET_ITEM( const_tuple_bdd370d905eebd397ba2a815f35093c0_tuple, 7, const_str_plain_pos ); Py_INCREF( const_str_plain_pos );
    PyTuple_SET_ITEM( const_tuple_bdd370d905eebd397ba2a815f35093c0_tuple, 8, const_str_plain_m ); Py_INCREF( const_str_plain_m );
    PyTuple_SET_ITEM( const_tuple_bdd370d905eebd397ba2a815f35093c0_tuple, 9, const_str_plain_chunk ); Py_INCREF( const_str_plain_chunk );
    const_str_plain_libcinit = UNSTREAM_STRING_ASCII( &constant_bin[ 495850 ], 8, 1 );
    PyTuple_SET_ITEM( const_tuple_bdd370d905eebd397ba2a815f35093c0_tuple, 10, const_str_plain_libcinit ); Py_INCREF( const_str_plain_libcinit );
    const_str_plain_glibc = UNSTREAM_STRING_ASCII( &constant_bin[ 495858 ], 5, 1 );
    PyTuple_SET_ITEM( const_tuple_bdd370d905eebd397ba2a815f35093c0_tuple, 11, const_str_plain_glibc ); Py_INCREF( const_str_plain_glibc );
    const_str_plain_glibcversion = UNSTREAM_STRING_ASCII( &constant_bin[ 495863 ], 12, 1 );
    PyTuple_SET_ITEM( const_tuple_bdd370d905eebd397ba2a815f35093c0_tuple, 12, const_str_plain_glibcversion ); Py_INCREF( const_str_plain_glibcversion );
    const_str_plain_so = UNSTREAM_STRING_ASCII( &constant_bin[ 446 ], 2, 1 );
    PyTuple_SET_ITEM( const_tuple_bdd370d905eebd397ba2a815f35093c0_tuple, 13, const_str_plain_so ); Py_INCREF( const_str_plain_so );
    PyTuple_SET_ITEM( const_tuple_bdd370d905eebd397ba2a815f35093c0_tuple, 14, const_str_plain_threads ); Py_INCREF( const_str_plain_threads );
    const_str_plain_soversion = UNSTREAM_STRING_ASCII( &constant_bin[ 495875 ], 9, 1 );
    PyTuple_SET_ITEM( const_tuple_bdd370d905eebd397ba2a815f35093c0_tuple, 15, const_str_plain_soversion ); Py_INCREF( const_str_plain_soversion );
    const_str_plain_on = UNSTREAM_STRING_ASCII( &constant_bin[ 260 ], 2, 1 );
    const_str_plain_os_version = UNSTREAM_STRING_ASCII( &constant_bin[ 495884 ], 10, 1 );
    const_str_digest_7a422a1de8755ae10bd232163b9d1873 = UNSTREAM_STRING_ASCII( &constant_bin[ 495894 ], 76, 0 );
    const_slice_none_int_pos_13_none = PySlice_New( Py_None, const_int_pos_13, Py_None );
    const_slice_int_pos_14_none_none = PySlice_New( const_int_pos_14, Py_None, Py_None );
    const_str_digest_a27c22fd922c3e382053b3d43b7805d9 = UNSTREAM_STRING_ASCII( &constant_bin[ 495970 ], 12, 0 );
    const_tuple_int_pos_6_int_pos_1_tuple = PyTuple_New( 2 );
    PyTuple_SET_ITEM( const_tuple_int_pos_6_int_pos_1_tuple, 0, const_int_pos_6 ); Py_INCREF( const_int_pos_6 );
    PyTuple_SET_ITEM( const_tuple_int_pos_6_int_pos_1_tuple, 1, const_int_pos_1 ); Py_INCREF( const_int_pos_1 );
    const_slice_int_pos_13_none_none = PySlice_New( const_int_pos_13, Py_None, Py_None );
    const_str_plain_alt_version = UNSTREAM_STRING_ASCII( &constant_bin[ 495982 ], 11, 1 );
    const_str_digest_b235a38a1eecd0e7f7d0b3188f8326db = UNSTREAM_STRING_ASCII( &constant_bin[ 495993 ], 14, 0 );
    const_str_digest_c5fc1f91c339cdebaf161146ff288b3b = UNSTREAM_STRING_ASCII( &constant_bin[ 496007 ], 83, 0 );
    const_bytes_digest_cd27fad322a3c847c9efd23ee3ded150 = UNSTREAM_BYTES( &constant_bin[ 496090 ], 5 );
    const_str_plain_os_arch = UNSTREAM_STRING_ASCII( &constant_bin[ 496095 ], 7, 1 );
    const_str_digest_31711a5bc9d56b30765b999acf7ad0c7 = UNSTREAM_STRING_ASCII( &constant_bin[ 496102 ], 715, 0 );
    const_str_plain__pypy_sys_version_parser = UNSTREAM_STRING_ASCII( &constant_bin[ 496817 ], 24, 1 );
    const_str_plain_redhat = UNSTREAM_STRING_ASCII( &constant_bin[ 496841 ], 6, 1 );
    const_str_digest_f2ffe551371f3a5b3ab3a3f80e9cbd82 = UNSTREAM_STRING_ASCII( &constant_bin[ 496847 ], 141, 0 );
    const_str_plain_CPython = UNSTREAM_STRING_ASCII( &constant_bin[ 495561 ], 7, 1 );
    const_str_plain_2012ServerR2 = UNSTREAM_STRING_ASCII( &constant_bin[ 495039 ], 12, 0 );
    const_str_plain_System = UNSTREAM_STRING_ASCII( &constant_bin[ 5454 ], 6, 1 );
    const_str_plain_ELF = UNSTREAM_STRING_ASCII( &constant_bin[ 496988 ], 3, 1 );
    const_str_plain_python_version_tuple = UNSTREAM_STRING_ASCII( &constant_bin[ 496991 ], 20, 1 );
    const_str_plain_arch = UNSTREAM_STRING_ASCII( &constant_bin[ 44047 ], 4, 1 );
    const_tuple_beb428d3c0a5fe5cde14e10da6ecdd36_tuple = PyTuple_New( 5 );
    PyTuple_SET_ITEM( const_tuple_beb428d3c0a5fe5cde14e10da6ecdd36_tuple, 0, const_str_plain_system ); Py_INCREF( const_str_plain_system );
    PyTuple_SET_ITEM( const_tuple_beb428d3c0a5fe5cde14e10da6ecdd36_tuple, 1, const_str_plain_release ); Py_INCREF( const_str_plain_release );
    PyTuple_SET_ITEM( const_tuple_beb428d3c0a5fe5cde14e10da6ecdd36_tuple, 2, const_str_plain_version ); Py_INCREF( const_str_plain_version );
    PyTuple_SET_ITEM( const_tuple_beb428d3c0a5fe5cde14e10da6ecdd36_tuple, 3, const_str_plain_l ); Py_INCREF( const_str_plain_l );
    PyTuple_SET_ITEM( const_tuple_beb428d3c0a5fe5cde14e10da6ecdd36_tuple, 4, const_str_plain_major ); Py_INCREF( const_str_plain_major );
    const_tuple_str_plain_getwindowsversion_tuple = PyTuple_New( 1 );
    PyTuple_SET_ITEM( const_tuple_str_plain_getwindowsversion_tuple, 0, const_str_plain_getwindowsversion ); Py_INCREF( const_str_plain_getwindowsversion );
    const_str_digest_58d96e8cdb3a99d17284e3397e5cca6b = UNSTREAM_STRING_ASCII( &constant_bin[ 497011 ], 4, 0 );
    const_tuple_str_plain_IronPython_tuple = PyTuple_New( 1 );
    const_str_plain_IronPython = UNSTREAM_STRING_ASCII( &constant_bin[ 495611 ], 10, 1 );
    PyTuple_SET_ITEM( const_tuple_str_plain_IronPython_tuple, 0, const_str_plain_IronPython ); Py_INCREF( const_str_plain_IronPython );
    const_str_plain_DIST_IDENT = UNSTREAM_STRING_ASCII( &constant_bin[ 497015 ], 10, 1 );
    const_tuple_str_digest_8a2ddc463e12981c6acfc7080a3f3b0f_tuple = PyTuple_New( 1 );
    const_str_digest_8a2ddc463e12981c6acfc7080a3f3b0f = UNSTREAM_STRING_ASCII( &constant_bin[ 497025 ], 15, 0 );
    PyTuple_SET_ITEM( const_tuple_str_digest_8a2ddc463e12981c6acfc7080a3f3b0f_tuple, 0, const_str_digest_8a2ddc463e12981c6acfc7080a3f3b0f ); Py_INCREF( const_str_digest_8a2ddc463e12981c6acfc7080a3f3b0f );
    const_tuple_9fffb3a60682292afdab602ec1064353_tuple = PyTuple_New( 11 );
    PyTuple_SET_ITEM( const_tuple_9fffb3a60682292afdab602ec1064353_tuple, 0, const_str_plain_release ); Py_INCREF( const_str_plain_release );
    PyTuple_SET_ITEM( const_tuple_9fffb3a60682292afdab602ec1064353_tuple, 1, const_str_plain_vendor ); Py_INCREF( const_str_plain_vendor );
    const_str_plain_vminfo = UNSTREAM_STRING_ASCII( &constant_bin[ 497040 ], 6, 1 );
    PyTuple_SET_ITEM( const_tuple_9fffb3a60682292afdab602ec1064353_tuple, 2, const_str_plain_vminfo ); Py_INCREF( const_str_plain_vminfo );
    const_str_plain_osinfo = UNSTREAM_STRING_ASCII( &constant_bin[ 497046 ], 6, 1 );
    PyTuple_SET_ITEM( const_tuple_9fffb3a60682292afdab602ec1064353_tuple, 3, const_str_plain_osinfo ); Py_INCREF( const_str_plain_osinfo );
    PyTuple_SET_ITEM( const_tuple_9fffb3a60682292afdab602ec1064353_tuple, 4, const_str_plain_java ); Py_INCREF( const_str_plain_java );
    const_str_plain_vm_name = UNSTREAM_STRING_ASCII( &constant_bin[ 497052 ], 7, 1 );
    PyTuple_SET_ITEM( const_tuple_9fffb3a60682292afdab602ec1064353_tuple, 5, const_str_plain_vm_name ); Py_INCREF( const_str_plain_vm_name );
    const_str_plain_vm_release = UNSTREAM_STRING_ASCII( &constant_bin[ 497059 ], 10, 1 );
    PyTuple_SET_ITEM( const_tuple_9fffb3a60682292afdab602ec1064353_tuple, 6, const_str_plain_vm_release ); Py_INCREF( const_str_plain_vm_release );
    PyTuple_SET_ITEM( const_tuple_9fffb3a60682292afdab602ec1064353_tuple, 7, const_str_plain_vm_vendor ); Py_INCREF( const_str_plain_vm_vendor );
    const_str_plain_os_name = UNSTREAM_STRING_ASCII( &constant_bin[ 497069 ], 7, 1 );
    PyTuple_SET_ITEM( const_tuple_9fffb3a60682292afdab602ec1064353_tuple, 8, const_str_plain_os_name ); Py_INCREF( const_str_plain_os_name );
    PyTuple_SET_ITEM( const_tuple_9fffb3a60682292afdab602ec1064353_tuple, 9, const_str_plain_os_version ); Py_INCREF( const_str_plain_os_version );
    PyTuple_SET_ITEM( const_tuple_9fffb3a60682292afdab602ec1064353_tuple, 10, const_str_plain_os_arch ); Py_INCREF( const_str_plain_os_arch );
    const_str_plain__release_filename = UNSTREAM_STRING_ASCII( &constant_bin[ 497076 ], 17, 1 );
    const_str_digest_0e00f16ce03b88638fa3350ac141599e = UNSTREAM_STRING_ASCII( &constant_bin[ 497093 ], 3, 0 );
    const_tuple_4313dc38cb7b8653f9b511ee05e778bd_tuple = PyTuple_New( 14 );
    PyTuple_SET_ITEM( const_tuple_4313dc38cb7b8653f9b511ee05e778bd_tuple, 0, const_str_plain_sys_version ); Py_INCREF( const_str_plain_sys_version );
    PyTuple_SET_ITEM( const_tuple_4313dc38cb7b8653f9b511ee05e778bd_tuple, 1, const_str_plain_result ); Py_INCREF( const_str_plain_result );
    PyTuple_SET_ITEM( const_tuple_4313dc38cb7b8653f9b511ee05e778bd_tuple, 2, const_str_plain_name ); Py_INCREF( const_str_plain_name );
    PyTuple_SET_ITEM( const_tuple_4313dc38cb7b8653f9b511ee05e778bd_tuple, 3, const_str_plain_match ); Py_INCREF( const_str_plain_match );
    PyTuple_SET_ITEM( const_tuple_4313dc38cb7b8653f9b511ee05e778bd_tuple, 4, const_str_plain_version ); Py_INCREF( const_str_plain_version );
    PyTuple_SET_ITEM( const_tuple_4313dc38cb7b8653f9b511ee05e778bd_tuple, 5, const_str_plain_alt_version ); Py_INCREF( const_str_plain_alt_version );
    PyTuple_SET_ITEM( const_tuple_4313dc38cb7b8653f9b511ee05e778bd_tuple, 6, const_str_plain_compiler ); Py_INCREF( const_str_plain_compiler );
    const_str_plain_buildno = UNSTREAM_STRING_ASCII( &constant_bin[ 497096 ], 7, 1 );
    PyTuple_SET_ITEM( const_tuple_4313dc38cb7b8653f9b511ee05e778bd_tuple, 7, const_str_plain_buildno ); Py_INCREF( const_str_plain_buildno );
    const_str_plain_builddate = UNSTREAM_STRING_ASCII( &constant_bin[ 497103 ], 9, 1 );
    PyTuple_SET_ITEM( const_tuple_4313dc38cb7b8653f9b511ee05e778bd_tuple, 8, const_str_plain_builddate ); Py_INCREF( const_str_plain_builddate );
    const_str_plain_buildtime = UNSTREAM_STRING_ASCII( &constant_bin[ 497112 ], 9, 1 );
    PyTuple_SET_ITEM( const_tuple_4313dc38cb7b8653f9b511ee05e778bd_tuple, 9, const_str_plain_buildtime ); Py_INCREF( const_str_plain_buildtime );
    PyTuple_SET_ITEM( const_tuple_4313dc38cb7b8653f9b511ee05e778bd_tuple, 10, const_str_plain__ ); Py_INCREF( const_str_plain__ );
    PyTuple_SET_ITEM( const_tuple_4313dc38cb7b8653f9b511ee05e778bd_tuple, 11, const_str_plain_branch ); Py_INCREF( const_str_plain_branch );
    const_str_plain_revision = UNSTREAM_STRING_ASCII( &constant_bin[ 497121 ], 8, 1 );
    PyTuple_SET_ITEM( const_tuple_4313dc38cb7b8653f9b511ee05e778bd_tuple, 12, const_str_plain_revision ); Py_INCREF( const_str_plain_revision );
    PyTuple_SET_ITEM( const_tuple_4313dc38cb7b8653f9b511ee05e778bd_tuple, 13, const_str_plain_l ); Py_INCREF( const_str_plain_l );
    const_tuple_str_chr_58_str_chr_45_tuple = PyTuple_New( 2 );
    PyTuple_SET_ITEM( const_tuple_str_chr_58_str_chr_45_tuple, 0, const_str_chr_58 ); Py_INCREF( const_str_chr_58 );
    PyTuple_SET_ITEM( const_tuple_str_chr_58_str_chr_45_tuple, 1, const_str_chr_45 ); Py_INCREF( const_str_chr_45 );
    const_str_plain_bit = UNSTREAM_STRING_ASCII( &constant_bin[ 1892 ], 3, 1 );
    const_str_digest_2a97892845181b4de397b7c5260f5eae = UNSTREAM_STRING_ASCII( &constant_bin[ 497129 ], 14, 0 );
    const_str_plain_maj = UNSTREAM_STRING_ASCII( &constant_bin[ 184760 ], 3, 1 );
    const_tuple_str_chr_47_str_chr_45_tuple = PyTuple_New( 2 );
    PyTuple_SET_ITEM( const_tuple_str_chr_47_str_chr_45_tuple, 0, const_str_chr_47 ); Py_INCREF( const_str_chr_47 );
    PyTuple_SET_ITEM( const_tuple_str_chr_47_str_chr_45_tuple, 1, const_str_chr_45 ); Py_INCREF( const_str_chr_45 );
    const_str_plain_16bit = UNSTREAM_STRING_ASCII( &constant_bin[ 497143 ], 5, 0 );
    const_tuple_3db9f76853ef639b497917168f0afc69_tuple = PyMarshal_ReadObjectFromString( (char *)&constant_bin[ 497148 ], 224 );
    const_str_plain_Linux = UNSTREAM_STRING_ASCII( &constant_bin[ 494537 ], 5, 1 );
    const_str_plain_gentoo = UNSTREAM_STRING_ASCII( &constant_bin[ 497372 ], 6, 1 );
    const_tuple_str_digest_b4e0d93eaa03503f4f915db42c4229da_tuple = PyTuple_New( 1 );
    const_str_digest_b4e0d93eaa03503f4f915db42c4229da = UNSTREAM_STRING_ASCII( &constant_bin[ 497378 ], 22, 0 );
    PyTuple_SET_ITEM( const_tuple_str_digest_b4e0d93eaa03503f4f915db42c4229da_tuple, 0, const_str_digest_b4e0d93eaa03503f4f915db42c4229da ); Py_INCREF( const_str_digest_b4e0d93eaa03503f4f915db42c4229da );
    const_str_digest_88e458ff3be8ccacc83e1b0a8110486d = UNSTREAM_STRING_ASCII( &constant_bin[ 497400 ], 349, 0 );
    const_str_digest_fc3064e2a9426f0ebb30452af9a27131 = UNSTREAM_STRING_ASCII( &constant_bin[ 497749 ], 4, 0 );
    const_str_plain_service_pack_major = UNSTREAM_STRING_ASCII( &constant_bin[ 497753 ], 18, 1 );
    const_tuple_3638aa083ca9931951132a42ffd863dd_tuple = PyTuple_New( 4 );
    PyTuple_SET_ITEM( const_tuple_3638aa083ca9931951132a42ffd863dd_tuple, 0, const_str_plain_OpenKeyEx ); Py_INCREF( const_str_plain_OpenKeyEx );
    PyTuple_SET_ITEM( const_tuple_3638aa083ca9931951132a42ffd863dd_tuple, 1, const_str_plain_QueryValueEx ); Py_INCREF( const_str_plain_QueryValueEx );
    const_str_plain_CloseKey = UNSTREAM_STRING_ASCII( &constant_bin[ 497771 ], 8, 1 );
    PyTuple_SET_ITEM( const_tuple_3638aa083ca9931951132a42ffd863dd_tuple, 2, const_str_plain_CloseKey ); Py_INCREF( const_str_plain_CloseKey );
    const_str_plain_HKEY_LOCAL_MACHINE = UNSTREAM_STRING_ASCII( &constant_bin[ 497779 ], 18, 1 );
    PyTuple_SET_ITEM( const_tuple_3638aa083ca9931951132a42ffd863dd_tuple, 3, const_str_plain_HKEY_LOCAL_MACHINE ); Py_INCREF( const_str_plain_HKEY_LOCAL_MACHINE );
    const_str_digest_7ec939bd263e3d63e9fd34d1e63a41dd = UNSTREAM_STRING_ASCII( &constant_bin[ 497797 ], 217, 0 );
    const_tuple_str_plain_filepath_tuple = PyTuple_New( 1 );
    const_str_plain_filepath = UNSTREAM_STRING_ASCII( &constant_bin[ 498014 ], 8, 1 );
    PyTuple_SET_ITEM( const_tuple_str_plain_filepath_tuple, 0, const_str_plain_filepath ); Py_INCREF( const_str_plain_filepath );
    const_tuple_879bc0eae82e9822987fa448ee507b55_tuple = PyTuple_New( 3 );
    PyTuple_SET_ITEM( const_tuple_879bc0eae82e9822987fa448ee507b55_tuple, 0, const_str_empty ); Py_INCREF( const_str_empty );
    const_tuple_str_empty_str_empty_str_empty_tuple = PyTuple_New( 3 );
    PyTuple_SET_ITEM( const_tuple_str_empty_str_empty_str_empty_tuple, 0, const_str_empty ); Py_INCREF( const_str_empty );
    PyTuple_SET_ITEM( const_tuple_str_empty_str_empty_str_empty_tuple, 1, const_str_empty ); Py_INCREF( const_str_empty );
    PyTuple_SET_ITEM( const_tuple_str_empty_str_empty_str_empty_tuple, 2, const_str_empty ); Py_INCREF( const_str_empty );
    PyTuple_SET_ITEM( const_tuple_879bc0eae82e9822987fa448ee507b55_tuple, 1, const_tuple_str_empty_str_empty_str_empty_tuple ); Py_INCREF( const_tuple_str_empty_str_empty_str_empty_tuple );
    PyTuple_SET_ITEM( const_tuple_879bc0eae82e9822987fa448ee507b55_tuple, 2, const_str_empty ); Py_INCREF( const_str_empty );
    const_str_digest_53043fe1d675776aec2f08acc74fa298 = UNSTREAM_STRING_ASCII( &constant_bin[ 498022 ], 39, 0 );
    const_str_digest_89c36d7bb5defe289266c6631215c1f5 = UNSTREAM_STRING_ASCII( &constant_bin[ 498061 ], 15, 0 );
    const_str_plain_N32 = UNSTREAM_STRING_ASCII( &constant_bin[ 498076 ], 3, 1 );
    const_str_plain_UnitedLinux = UNSTREAM_STRING_ASCII( &constant_bin[ 498079 ], 11, 1 );
    const_str_digest_8114cf4f0f1845d12087b0358cacd4c7 = UNSTREAM_STRING_ASCII( &constant_bin[ 498090 ], 225, 0 );
    const_tuple_844945a6b719bba0d779c7b7e212c02d_tuple = PyTuple_New( 5 );
    PyTuple_SET_ITEM( const_tuple_844945a6b719bba0d779c7b7e212c02d_tuple, 0, const_str_plain_option ); Py_INCREF( const_str_plain_option );
    PyTuple_SET_ITEM( const_tuple_844945a6b719bba0d779c7b7e212c02d_tuple, 1, const_str_plain_default ); Py_INCREF( const_str_plain_default );
    PyTuple_SET_ITEM( const_tuple_844945a6b719bba0d779c7b7e212c02d_tuple, 2, const_str_plain_f ); Py_INCREF( const_str_plain_f );
    PyTuple_SET_ITEM( const_tuple_844945a6b719bba0d779c7b7e212c02d_tuple, 3, const_str_plain_output ); Py_INCREF( const_str_plain_output );
    PyTuple_SET_ITEM( const_tuple_844945a6b719bba0d779c7b7e212c02d_tuple, 4, const_str_plain_rc ); Py_INCREF( const_str_plain_rc );
    const_str_plain_system_alias = UNSTREAM_STRING_ASCII( &constant_bin[ 496613 ], 12, 1 );
    const_tuple_186a147f0b165dbdc3e112e6d8a23760_tuple = PyTuple_New( 5 );
    PyTuple_SET_ITEM( const_tuple_186a147f0b165dbdc3e112e6d8a23760_tuple, 0, const_str_plain_target ); Py_INCREF( const_str_plain_target );
    PyTuple_SET_ITEM( const_tuple_186a147f0b165dbdc3e112e6d8a23760_tuple, 1, const_str_plain_default ); Py_INCREF( const_str_plain_default );
    PyTuple_SET_ITEM( const_tuple_186a147f0b165dbdc3e112e6d8a23760_tuple, 2, const_str_plain_proc ); Py_INCREF( const_str_plain_proc );
    PyTuple_SET_ITEM( const_tuple_186a147f0b165dbdc3e112e6d8a23760_tuple, 3, const_str_plain_output ); Py_INCREF( const_str_plain_output );
    PyTuple_SET_ITEM( const_tuple_186a147f0b165dbdc3e112e6d8a23760_tuple, 4, const_str_plain_rc ); Py_INCREF( const_str_plain_rc );
    const_str_plain_MacOS = UNSTREAM_STRING_ASCII( &constant_bin[ 498315 ], 5, 1 );
    const_str_plain_Rhapsody = UNSTREAM_STRING_ASCII( &constant_bin[ 498320 ], 8, 1 );
    const_tuple_str_plain_P_tuple = PyTuple_New( 1 );
    PyTuple_SET_ITEM( const_tuple_str_plain_P_tuple, 0, const_str_plain_P ); Py_INCREF( const_str_plain_P );
    const_str_plain_winver = UNSTREAM_STRING_ASCII( &constant_bin[ 498328 ], 6, 1 );
    const_tuple_int_pos_6_int_pos_2_tuple = PyTuple_New( 2 );
    PyTuple_SET_ITEM( const_tuple_int_pos_6_int_pos_2_tuple, 0, const_int_pos_6 ); Py_INCREF( const_int_pos_6 );
    PyTuple_SET_ITEM( const_tuple_int_pos_6_int_pos_2_tuple, 1, const_int_pos_2 ); Py_INCREF( const_int_pos_2 );
    const_str_plain__sys_version_parser = UNSTREAM_STRING_ASCII( &constant_bin[ 496822 ], 19, 1 );
    const_str_plain__supported_dists = UNSTREAM_STRING_ASCII( &constant_bin[ 498334 ], 16, 1 );
    const_str_digest_b54ae7c64ddfba5a43ec9389092ce978 = UNSTREAM_STRING_ASCII( &constant_bin[ 498350 ], 59, 0 );
    const_str_digest_a448315180eda5238b56e666fde580a3 = UNSTREAM_STRING_ASCII( &constant_bin[ 498409 ], 39, 0 );
    const_str_plain_getProperty = UNSTREAM_STRING_ASCII( &constant_bin[ 498448 ], 11, 1 );
    const_str_plain_PE = UNSTREAM_STRING_ASCII( &constant_bin[ 7835 ], 2, 1 );
    const_str_digest_7059b76934756507026da48f1ba159b0 = UNSTREAM_STRING_ASCII( &constant_bin[ 498459 ], 742, 0 );
    const_tuple_str_plain_version_str_plain_result_str_plain_v_str_plain_t_tuple = PyTuple_New( 4 );
    PyTuple_SET_ITEM( const_tuple_str_plain_version_str_plain_result_str_plain_v_str_plain_t_tuple, 0, const_str_plain_version ); Py_INCREF( const_str_plain_version );
    PyTuple_SET_ITEM( const_tuple_str_plain_version_str_plain_result_str_plain_v_str_plain_t_tuple, 1, const_str_plain_result ); Py_INCREF( const_str_plain_result );
    PyTuple_SET_ITEM( const_tuple_str_plain_version_str_plain_result_str_plain_v_str_plain_t_tuple, 2, const_str_plain_v ); Py_INCREF( const_str_plain_v );
    PyTuple_SET_ITEM( const_tuple_str_plain_version_str_plain_result_str_plain_v_str_plain_t_tuple, 3, const_str_plain_t ); Py_INCREF( const_str_plain_t );
    const_tuple_80cf2a37463826881be6eb6a8668c4c4_tuple = PyTuple_New( 5 );
    const_str_plain_firstline = UNSTREAM_STRING_ASCII( &constant_bin[ 231220 ], 9, 1 );
    PyTuple_SET_ITEM( const_tuple_80cf2a37463826881be6eb6a8668c4c4_tuple, 0, const_str_plain_firstline ); Py_INCREF( const_str_plain_firstline );
    PyTuple_SET_ITEM( const_tuple_80cf2a37463826881be6eb6a8668c4c4_tuple, 1, const_str_plain_version ); Py_INCREF( const_str_plain_version );
    PyTuple_SET_ITEM( const_tuple_80cf2a37463826881be6eb6a8668c4c4_tuple, 2, const_str_plain_id ); Py_INCREF( const_str_plain_id );
    PyTuple_SET_ITEM( const_tuple_80cf2a37463826881be6eb6a8668c4c4_tuple, 3, const_str_plain_m ); Py_INCREF( const_str_plain_m );
    PyTuple_SET_ITEM( const_tuple_80cf2a37463826881be6eb6a8668c4c4_tuple, 4, const_str_plain_l ); Py_INCREF( const_str_plain_l );
    const_str_digest_3d01c170674159e6055a9a063104ceb7 = UNSTREAM_STRING_ASCII( &constant_bin[ 499201 ], 366, 0 );
    const_tuple_str_plain_ppc_str_digest_e7ea514a030f655b80ff45bde200e99c_tuple = PyTuple_New( 2 );
    const_str_plain_ppc = UNSTREAM_STRING_ASCII( &constant_bin[ 464728 ], 3, 1 );
    PyTuple_SET_ITEM( const_tuple_str_plain_ppc_str_digest_e7ea514a030f655b80ff45bde200e99c_tuple, 0, const_str_plain_ppc ); Py_INCREF( const_str_plain_ppc );
    PyTuple_SET_ITEM( const_tuple_str_plain_ppc_str_digest_e7ea514a030f655b80ff45bde200e99c_tuple, 1, const_str_digest_e7ea514a030f655b80ff45bde200e99c ); Py_INCREF( const_str_digest_e7ea514a030f655b80ff45bde200e99c );
    const_str_plain_PowerPC = UNSTREAM_STRING_ASCII( &constant_bin[ 499567 ], 7, 1 );
    const_str_plain__ironpython26_sys_version_parser = UNSTREAM_STRING_ASCII( &constant_bin[ 499574 ], 32, 1 );
    const_str_plain__dist_try_harder = UNSTREAM_STRING_ASCII( &constant_bin[ 498625 ], 16, 1 );
    const_tuple_str_empty_str_empty_str_empty_str_empty_tuple = PyTuple_New( 4 );
    PyTuple_SET_ITEM( const_tuple_str_empty_str_empty_str_empty_str_empty_tuple, 0, const_str_empty ); Py_INCREF( const_str_empty );
    PyTuple_SET_ITEM( const_tuple_str_empty_str_empty_str_empty_str_empty_tuple, 1, const_str_empty ); Py_INCREF( const_str_empty );
    PyTuple_SET_ITEM( const_tuple_str_empty_str_empty_str_empty_str_empty_tuple, 2, const_str_empty ); Py_INCREF( const_str_empty );
    PyTuple_SET_ITEM( const_tuple_str_empty_str_empty_str_empty_str_empty_tuple, 3, const_str_empty ); Py_INCREF( const_str_empty );
    const_str_plain_win32_ver = UNSTREAM_STRING_ASCII( &constant_bin[ 499606 ], 9, 1 );
    const_tuple_b6253dde28452ee1df38f2c093c68547_tuple = PyTuple_New( 14 );
    PyTuple_SET_ITEM( const_tuple_b6253dde28452ee1df38f2c093c68547_tuple, 0, const_str_plain_distname ); Py_INCREF( const_str_plain_distname );
    PyTuple_SET_ITEM( const_tuple_b6253dde28452ee1df38f2c093c68547_tuple, 1, const_str_plain_version ); Py_INCREF( const_str_plain_version );
    PyTuple_SET_ITEM( const_tuple_b6253dde28452ee1df38f2c093c68547_tuple, 2, const_str_plain_id ); Py_INCREF( const_str_plain_id );
    PyTuple_SET_ITEM( const_tuple_b6253dde28452ee1df38f2c093c68547_tuple, 3, const_str_plain_supported_dists ); Py_INCREF( const_str_plain_supported_dists );
    PyTuple_SET_ITEM( const_tuple_b6253dde28452ee1df38f2c093c68547_tuple, 4, const_str_plain_full_distribution_name ); Py_INCREF( const_str_plain_full_distribution_name );
    PyTuple_SET_ITEM( const_tuple_b6253dde28452ee1df38f2c093c68547_tuple, 5, const_str_plain_etc ); Py_INCREF( const_str_plain_etc );
    PyTuple_SET_ITEM( const_tuple_b6253dde28452ee1df38f2c093c68547_tuple, 6, const_str_plain_file ); Py_INCREF( const_str_plain_file );
    PyTuple_SET_ITEM( const_tuple_b6253dde28452ee1df38f2c093c68547_tuple, 7, const_str_plain_m ); Py_INCREF( const_str_plain_m );
    const_str_plain__distname = UNSTREAM_STRING_ASCII( &constant_bin[ 499615 ], 9, 1 );
    PyTuple_SET_ITEM( const_tuple_b6253dde28452ee1df38f2c093c68547_tuple, 8, const_str_plain__distname ); Py_INCREF( const_str_plain__distname );
    PyTuple_SET_ITEM( const_tuple_b6253dde28452ee1df38f2c093c68547_tuple, 9, const_str_plain_dummy ); Py_INCREF( const_str_plain_dummy );
    PyTuple_SET_ITEM( const_tuple_b6253dde28452ee1df38f2c093c68547_tuple, 10, const_str_plain_f ); Py_INCREF( const_str_plain_f );
    PyTuple_SET_ITEM( const_tuple_b6253dde28452ee1df38f2c093c68547_tuple, 11, const_str_plain_firstline ); Py_INCREF( const_str_plain_firstline );
    PyTuple_SET_ITEM( const_tuple_b6253dde28452ee1df38f2c093c68547_tuple, 12, const_str_plain__version ); Py_INCREF( const_str_plain__version );
    PyTuple_SET_ITEM( const_tuple_b6253dde28452ee1df38f2c093c68547_tuple, 13, const_str_plain__id ); Py_INCREF( const_str_plain__id );
    const_tuple_str_plain_System_tuple = PyTuple_New( 1 );
    PyTuple_SET_ITEM( const_tuple_str_plain_System_tuple, 0, const_str_plain_System ); Py_INCREF( const_str_plain_System );
    const_str_plain__lsb_release_version = UNSTREAM_STRING_ASCII( &constant_bin[ 499624 ], 20, 1 );
    const_str_plain__component_re = UNSTREAM_STRING_ASCII( &constant_bin[ 499644 ], 13, 1 );
    const_str_plain_CurrentType = UNSTREAM_STRING_ASCII( &constant_bin[ 499657 ], 11, 1 );
    const_str_digest_d0ff6362996a3c9f2d950c8ca73a812d = UNSTREAM_STRING_ASCII( &constant_bin[ 499668 ], 1029, 0 );
    const_str_plain__follow_symlinks = UNSTREAM_STRING_ASCII( &constant_bin[ 500697 ], 16, 1 );
    const_str_plain__norm_version = UNSTREAM_STRING_ASCII( &constant_bin[ 500713 ], 13, 1 );
    const_str_plain_rocks = UNSTREAM_STRING_ASCII( &constant_bin[ 500726 ], 5, 1 );
    const_tuple_str_digest_068eb885e4aaedf6bb189a0c4eb85723_str_empty_tuple = PyTuple_New( 2 );
    PyTuple_SET_ITEM( const_tuple_str_digest_068eb885e4aaedf6bb189a0c4eb85723_str_empty_tuple, 0, const_str_digest_068eb885e4aaedf6bb189a0c4eb85723 ); Py_INCREF( const_str_digest_068eb885e4aaedf6bb189a0c4eb85723 );
    PyTuple_SET_ITEM( const_tuple_str_digest_068eb885e4aaedf6bb189a0c4eb85723_str_empty_tuple, 1, const_str_empty ); Py_INCREF( const_str_empty );
    const_str_plain__syscmd_file = UNSTREAM_STRING_ASCII( &constant_bin[ 500731 ], 12, 1 );
    const_tuple_int_pos_6_none_tuple = PyTuple_New( 2 );
    PyTuple_SET_ITEM( const_tuple_int_pos_6_none_tuple, 0, const_int_pos_6 ); Py_INCREF( const_int_pos_6 );
    PyTuple_SET_ITEM( const_tuple_int_pos_6_none_tuple, 1, Py_None ); Py_INCREF( Py_None );
    const_str_plain_PROCESSOR_IDENTIFIER = UNSTREAM_STRING_ASCII( &constant_bin[ 500743 ], 20, 1 );
    const_str_digest_46c476a08b202054d25b54a5edafc033 = UNSTREAM_STRING_ASCII( &constant_bin[ 500763 ], 6, 0 );
    const_str_digest_2bef6bf41b2e72a3cbc50f9de91800de = UNSTREAM_STRING_ASCII( &constant_bin[ 500769 ], 48, 0 );
    const_tuple_str_empty_str_plain_Windows_tuple = PyTuple_New( 2 );
    PyTuple_SET_ITEM( const_tuple_str_empty_str_plain_Windows_tuple, 0, const_str_empty ); Py_INCREF( const_str_empty );
    PyTuple_SET_ITEM( const_tuple_str_empty_str_plain_Windows_tuple, 1, const_str_plain_Windows ); Py_INCREF( const_str_plain_Windows );
    const_tuple_str_digest_53043fe1d675776aec2f08acc74fa298_tuple = PyTuple_New( 1 );
    PyTuple_SET_ITEM( const_tuple_str_digest_53043fe1d675776aec2f08acc74fa298_tuple, 0, const_str_digest_53043fe1d675776aec2f08acc74fa298 ); Py_INCREF( const_str_digest_53043fe1d675776aec2f08acc74fa298 );
    const_tuple_str_plain_Linux_tuple = PyTuple_New( 1 );
    PyTuple_SET_ITEM( const_tuple_str_plain_Linux_tuple, 0, const_str_plain_Linux ); Py_INCREF( const_str_plain_Linux );
    const_str_plain_pl = UNSTREAM_STRING_ASCII( &constant_bin[ 112 ], 2, 1 );
    const_tuple_50e5809ccd796006f2557fcc8ede18ff_tuple = PyTuple_New( 12 );
    PyTuple_SET_ITEM( const_tuple_50e5809ccd796006f2557fcc8ede18ff_tuple, 0, const_str_plain_distname ); Py_INCREF( const_str_plain_distname );
    PyTuple_SET_ITEM( const_tuple_50e5809ccd796006f2557fcc8ede18ff_tuple, 1, const_str_plain_version ); Py_INCREF( const_str_plain_version );
    PyTuple_SET_ITEM( const_tuple_50e5809ccd796006f2557fcc8ede18ff_tuple, 2, const_str_plain_id ); Py_INCREF( const_str_plain_id );
    PyTuple_SET_ITEM( const_tuple_50e5809ccd796006f2557fcc8ede18ff_tuple, 3, const_str_plain_f ); Py_INCREF( const_str_plain_f );
    PyTuple_SET_ITEM( const_tuple_50e5809ccd796006f2557fcc8ede18ff_tuple, 4, const_str_plain_line ); Py_INCREF( const_str_plain_line );
    PyTuple_SET_ITEM( const_tuple_50e5809ccd796006f2557fcc8ede18ff_tuple, 5, const_str_plain_tv ); Py_INCREF( const_str_plain_tv );
    PyTuple_SET_ITEM( const_tuple_50e5809ccd796006f2557fcc8ede18ff_tuple, 6, const_str_plain_tag ); Py_INCREF( const_str_plain_tag );
    PyTuple_SET_ITEM( const_tuple_50e5809ccd796006f2557fcc8ede18ff_tuple, 7, const_str_plain_value ); Py_INCREF( const_str_plain_value );
    PyTuple_SET_ITEM( const_tuple_50e5809ccd796006f2557fcc8ede18ff_tuple, 8, const_str_plain_values ); Py_INCREF( const_str_plain_values );
    PyTuple_SET_ITEM( const_tuple_50e5809ccd796006f2557fcc8ede18ff_tuple, 9, const_str_plain_pkg ); Py_INCREF( const_str_plain_pkg );
    PyTuple_SET_ITEM( const_tuple_50e5809ccd796006f2557fcc8ede18ff_tuple, 10, const_str_plain_verfiles ); Py_INCREF( const_str_plain_verfiles );
    PyTuple_SET_ITEM( const_tuple_50e5809ccd796006f2557fcc8ede18ff_tuple, 11, const_str_plain_n ); Py_INCREF( const_str_plain_n );
    const_str_plain__ironpython_sys_version_parser = UNSTREAM_STRING_ASCII( &constant_bin[ 500817 ], 30, 1 );
    const_tuple_int_pos_6_int_pos_3_tuple = PyTuple_New( 2 );
    PyTuple_SET_ITEM( const_tuple_int_pos_6_int_pos_3_tuple, 0, const_int_pos_6 ); Py_INCREF( const_int_pos_6 );
    PyTuple_SET_ITEM( const_tuple_int_pos_6_int_pos_3_tuple, 1, const_int_pos_3 ); Py_INCREF( const_int_pos_3 );
    const_str_plain_platform_version = UNSTREAM_STRING_ASCII( &constant_bin[ 500847 ], 16, 1 );
    const_str_digest_601d16abc8bc82193e1a2f02797a4810 = UNSTREAM_STRING_ASCII( &constant_bin[ 500863 ], 26, 0 );
    const_tuple_4c00129f43ad65b0d5b8ef4f4d57ec83_tuple = PyTuple_New( 9 );
    PyTuple_SET_ITEM( const_tuple_4c00129f43ad65b0d5b8ef4f4d57ec83_tuple, 0, const_str_plain_system ); Py_INCREF( const_str_plain_system );
    PyTuple_SET_ITEM( const_tuple_4c00129f43ad65b0d5b8ef4f4d57ec83_tuple, 1, const_str_plain_release ); Py_INCREF( const_str_plain_release );
    PyTuple_SET_ITEM( const_tuple_4c00129f43ad65b0d5b8ef4f4d57ec83_tuple, 2, const_str_plain_version ); Py_INCREF( const_str_plain_version );
    PyTuple_SET_ITEM( const_tuple_4c00129f43ad65b0d5b8ef4f4d57ec83_tuple, 3, const_str_plain_supported_platforms ); Py_INCREF( const_str_plain_supported_platforms );
    PyTuple_SET_ITEM( const_tuple_4c00129f43ad65b0d5b8ef4f4d57ec83_tuple, 4, const_str_plain_cmd ); Py_INCREF( const_str_plain_cmd );
    PyTuple_SET_ITEM( const_tuple_4c00129f43ad65b0d5b8ef4f4d57ec83_tuple, 5, const_str_plain_pipe ); Py_INCREF( const_str_plain_pipe );
    PyTuple_SET_ITEM( const_tuple_4c00129f43ad65b0d5b8ef4f4d57ec83_tuple, 6, const_str_plain_info ); Py_INCREF( const_str_plain_info );
    PyTuple_SET_ITEM( const_tuple_4c00129f43ad65b0d5b8ef4f4d57ec83_tuple, 7, const_str_plain_why ); Py_INCREF( const_str_plain_why );
    PyTuple_SET_ITEM( const_tuple_4c00129f43ad65b0d5b8ef4f4d57ec83_tuple, 8, const_str_plain_m ); Py_INCREF( const_str_plain_m );
    const_str_plain_IRIX64 = UNSTREAM_STRING_ASCII( &constant_bin[ 500889 ], 6, 1 );
    const_tuple_str_digest_9fbf7115c1919f9e6be3d00ddd2a0e01_tuple = PyTuple_New( 1 );
    PyTuple_SET_ITEM( const_tuple_str_digest_9fbf7115c1919f9e6be3d00ddd2a0e01_tuple, 0, const_str_digest_9fbf7115c1919f9e6be3d00ddd2a0e01 ); Py_INCREF( const_str_digest_9fbf7115c1919f9e6be3d00ddd2a0e01 );
    const_tuple_b019fa3b00f82bb2c3855f6401da6ed4_tuple = PyTuple_New( 14 );
    PyTuple_SET_ITEM( const_tuple_b019fa3b00f82bb2c3855f6401da6ed4_tuple, 0, const_str_plain_release ); Py_INCREF( const_str_plain_release );
    PyTuple_SET_ITEM( const_tuple_b019fa3b00f82bb2c3855f6401da6ed4_tuple, 1, const_str_plain_version ); Py_INCREF( const_str_plain_version );
    const_str_plain_csd = UNSTREAM_STRING_ASCII( &constant_bin[ 497239 ], 3, 1 );
    PyTuple_SET_ITEM( const_tuple_b019fa3b00f82bb2c3855f6401da6ed4_tuple, 2, const_str_plain_csd ); Py_INCREF( const_str_plain_csd );
    PyTuple_SET_ITEM( const_tuple_b019fa3b00f82bb2c3855f6401da6ed4_tuple, 3, const_str_plain_ptype ); Py_INCREF( const_str_plain_ptype );
    PyTuple_SET_ITEM( const_tuple_b019fa3b00f82bb2c3855f6401da6ed4_tuple, 4, const_str_plain_getwindowsversion ); Py_INCREF( const_str_plain_getwindowsversion );
    PyTuple_SET_ITEM( const_tuple_b019fa3b00f82bb2c3855f6401da6ed4_tuple, 5, const_str_plain_OpenKeyEx ); Py_INCREF( const_str_plain_OpenKeyEx );
    PyTuple_SET_ITEM( const_tuple_b019fa3b00f82bb2c3855f6401da6ed4_tuple, 6, const_str_plain_QueryValueEx ); Py_INCREF( const_str_plain_QueryValueEx );
    PyTuple_SET_ITEM( const_tuple_b019fa3b00f82bb2c3855f6401da6ed4_tuple, 7, const_str_plain_CloseKey ); Py_INCREF( const_str_plain_CloseKey );
    PyTuple_SET_ITEM( const_tuple_b019fa3b00f82bb2c3855f6401da6ed4_tuple, 8, const_str_plain_HKEY_LOCAL_MACHINE ); Py_INCREF( const_str_plain_HKEY_LOCAL_MACHINE );
    PyTuple_SET_ITEM( const_tuple_b019fa3b00f82bb2c3855f6401da6ed4_tuple, 9, const_str_plain_winver ); Py_INCREF( const_str_plain_winver );
    PyTuple_SET_ITEM( const_tuple_b019fa3b00f82bb2c3855f6401da6ed4_tuple, 10, const_str_plain_maj ); Py_INCREF( const_str_plain_maj );
    PyTuple_SET_ITEM( const_tuple_b019fa3b00f82bb2c3855f6401da6ed4_tuple, 11, const_str_plain_min ); Py_INCREF( const_str_plain_min );
    PyTuple_SET_ITEM( const_tuple_b019fa3b00f82bb2c3855f6401da6ed4_tuple, 12, const_str_plain_build ); Py_INCREF( const_str_plain_build );
    PyTuple_SET_ITEM( const_tuple_b019fa3b00f82bb2c3855f6401da6ed4_tuple, 13, const_str_plain_key ); Py_INCREF( const_str_plain_key );
    const_str_plain_turbolinux = UNSTREAM_STRING_ASCII( &constant_bin[ 500895 ], 10, 1 );
    const_tuple_str_chr_34_str_chr_45_tuple = PyTuple_New( 2 );
    PyTuple_SET_ITEM( const_tuple_str_chr_34_str_chr_45_tuple, 0, const_str_chr_34 ); Py_INCREF( const_str_chr_34 );
    PyTuple_SET_ITEM( const_tuple_str_chr_34_str_chr_45_tuple, 1, const_str_chr_45 ); Py_INCREF( const_str_chr_45 );
    const_str_plain__platform_cache = UNSTREAM_STRING_ASCII( &constant_bin[ 500905 ], 15, 1 );
    const_str_plain_yellowdog = UNSTREAM_STRING_ASCII( &constant_bin[ 500920 ], 9, 1 );
    const_tuple_str_digest_89c36d7bb5defe289266c6631215c1f5_tuple = PyTuple_New( 1 );
    PyTuple_SET_ITEM( const_tuple_str_digest_89c36d7bb5defe289266c6631215c1f5_tuple, 0, const_str_digest_89c36d7bb5defe289266c6631215c1f5 ); Py_INCREF( const_str_digest_89c36d7bb5defe289266c6631215c1f5 );
    const_str_digest_79a975d21d4348d44f8a8a6ac69a8ecf = UNSTREAM_STRING_ASCII( &constant_bin[ 500929 ], 70, 0 );
    const_str_plain__WIN32_CLIENT_RELEASES = UNSTREAM_STRING_ASCII( &constant_bin[ 500999 ], 22, 1 );
    const_str_digest_48d62bee99fc62cc3df95231223fc825 = UNSTREAM_STRING_ASCII( &constant_bin[ 501021 ], 63, 0 );
    const_str_plain__java_getprop = UNSTREAM_STRING_ASCII( &constant_bin[ 501084 ], 13, 1 );
    const_str_digest_5d387f2d5c467e35ea9e46040e0a4c2d = UNSTREAM_STRING_ASCII( &constant_bin[ 501097 ], 11, 0 );
    const_str_plain_MSDOS = UNSTREAM_STRING_ASCII( &constant_bin[ 501108 ], 5, 1 );
    const_str_plain__syscmd_ver = UNSTREAM_STRING_ASCII( &constant_bin[ 494355 ], 11, 1 );
    const_str_digest_a172fc0fcdc0324bde5cd82d8bf52b7d = UNSTREAM_STRING_ASCII( &constant_bin[ 501113 ], 5, 0 );
    const_str_plain_64bit = UNSTREAM_STRING_ASCII( &constant_bin[ 501118 ], 5, 0 );
    const_tuple_8efea55afa47d8f29d8a48c961bc7ac4_tuple = PyTuple_New( 15 );
    const_str_plain_SuSE = UNSTREAM_STRING_ASCII( &constant_bin[ 497936 ], 4, 1 );
    PyTuple_SET_ITEM( const_tuple_8efea55afa47d8f29d8a48c961bc7ac4_tuple, 0, const_str_plain_SuSE ); Py_INCREF( const_str_plain_SuSE );
    const_str_plain_debian = UNSTREAM_STRING_ASCII( &constant_bin[ 501123 ], 6, 1 );
    PyTuple_SET_ITEM( const_tuple_8efea55afa47d8f29d8a48c961bc7ac4_tuple, 1, const_str_plain_debian ); Py_INCREF( const_str_plain_debian );
    const_str_plain_fedora = UNSTREAM_STRING_ASCII( &constant_bin[ 501129 ], 6, 1 );
    PyTuple_SET_ITEM( const_tuple_8efea55afa47d8f29d8a48c961bc7ac4_tuple, 2, const_str_plain_fedora ); Py_INCREF( const_str_plain_fedora );
    PyTuple_SET_ITEM( const_tuple_8efea55afa47d8f29d8a48c961bc7ac4_tuple, 3, const_str_plain_redhat ); Py_INCREF( const_str_plain_redhat );
    const_str_plain_centos = UNSTREAM_STRING_ASCII( &constant_bin[ 501135 ], 6, 1 );
    PyTuple_SET_ITEM( const_tuple_8efea55afa47d8f29d8a48c961bc7ac4_tuple, 4, const_str_plain_centos ); Py_INCREF( const_str_plain_centos );
    const_str_plain_mandrake = UNSTREAM_STRING_ASCII( &constant_bin[ 501141 ], 8, 1 );
    PyTuple_SET_ITEM( const_tuple_8efea55afa47d8f29d8a48c961bc7ac4_tuple, 5, const_str_plain_mandrake ); Py_INCREF( const_str_plain_mandrake );
    const_str_plain_mandriva = UNSTREAM_STRING_ASCII( &constant_bin[ 501149 ], 8, 1 );
    PyTuple_SET_ITEM( const_tuple_8efea55afa47d8f29d8a48c961bc7ac4_tuple, 6, const_str_plain_mandriva ); Py_INCREF( const_str_plain_mandriva );
    PyTuple_SET_ITEM( const_tuple_8efea55afa47d8f29d8a48c961bc7ac4_tuple, 7, const_str_plain_rocks ); Py_INCREF( const_str_plain_rocks );
    const_str_plain_slackware = UNSTREAM_STRING_ASCII( &constant_bin[ 501157 ], 9, 1 );
    PyTuple_SET_ITEM( const_tuple_8efea55afa47d8f29d8a48c961bc7ac4_tuple, 8, const_str_plain_slackware ); Py_INCREF( const_str_plain_slackware );
    PyTuple_SET_ITEM( const_tuple_8efea55afa47d8f29d8a48c961bc7ac4_tuple, 9, const_str_plain_yellowdog ); Py_INCREF( const_str_plain_yellowdog );
    PyTuple_SET_ITEM( const_tuple_8efea55afa47d8f29d8a48c961bc7ac4_tuple, 10, const_str_plain_gentoo ); Py_INCREF( const_str_plain_gentoo );
    PyTuple_SET_ITEM( const_tuple_8efea55afa47d8f29d8a48c961bc7ac4_tuple, 11, const_str_plain_UnitedLinux ); Py_INCREF( const_str_plain_UnitedLinux );
    PyTuple_SET_ITEM( const_tuple_8efea55afa47d8f29d8a48c961bc7ac4_tuple, 12, const_str_plain_turbolinux ); Py_INCREF( const_str_plain_turbolinux );
    PyTuple_SET_ITEM( const_tuple_8efea55afa47d8f29d8a48c961bc7ac4_tuple, 13, const_str_plain_arch ); Py_INCREF( const_str_plain_arch );
    const_str_plain_mageia = UNSTREAM_STRING_ASCII( &constant_bin[ 501166 ], 6, 1 );
    PyTuple_SET_ITEM( const_tuple_8efea55afa47d8f29d8a48c961bc7ac4_tuple, 14, const_str_plain_mageia ); Py_INCREF( const_str_plain_mageia );
    const_str_digest_1686aa75cea0515b58f7c447ad521e76 = UNSTREAM_STRING_ASCII( &constant_bin[ 501172 ], 14, 0 );
    const_str_plain_node = UNSTREAM_STRING_ASCII( &constant_bin[ 195761 ], 4, 1 );
    const_tuple_str_plain_args_str_plain_platform_str_plain_cleaned_tuple = PyTuple_New( 3 );
    PyTuple_SET_ITEM( const_tuple_str_plain_args_str_plain_platform_str_plain_cleaned_tuple, 0, const_str_plain_args ); Py_INCREF( const_str_plain_args );
    PyTuple_SET_ITEM( const_tuple_str_plain_args_str_plain_platform_str_plain_cleaned_tuple, 1, const_str_plain_platform ); Py_INCREF( const_str_plain_platform );
    const_str_plain_cleaned = UNSTREAM_STRING_ASCII( &constant_bin[ 501186 ], 7, 1 );
    PyTuple_SET_ITEM( const_tuple_str_plain_args_str_plain_platform_str_plain_cleaned_tuple, 2, const_str_plain_cleaned ); Py_INCREF( const_str_plain_cleaned );
    const_str_digest_7aa3ec2c732a9cfbcf16e3c71d0b60cf = UNSTREAM_STRING_ASCII( &constant_bin[ 501193 ], 17, 0 );
    const_str_plain_vms_lib = UNSTREAM_STRING_ASCII( &constant_bin[ 501210 ], 7, 1 );
    const_tuple_6b440bfa5b3121db5117d83bac4a8fdf_tuple = PyTuple_New( 6 );
    PyTuple_SET_ITEM( const_tuple_6b440bfa5b3121db5117d83bac4a8fdf_tuple, 0, const_str_plain_distname ); Py_INCREF( const_str_plain_distname );
    PyTuple_SET_ITEM( const_tuple_6b440bfa5b3121db5117d83bac4a8fdf_tuple, 1, const_str_plain_version ); Py_INCREF( const_str_plain_version );
    PyTuple_SET_ITEM( const_tuple_6b440bfa5b3121db5117d83bac4a8fdf_tuple, 2, const_str_plain_id ); Py_INCREF( const_str_plain_id );
    PyTuple_SET_ITEM( const_tuple_6b440bfa5b3121db5117d83bac4a8fdf_tuple, 3, const_str_plain_supported_dists ); Py_INCREF( const_str_plain_supported_dists );
    PyTuple_SET_ITEM( const_tuple_6b440bfa5b3121db5117d83bac4a8fdf_tuple, 4, const_str_plain_full_distribution_name ); Py_INCREF( const_str_plain_full_distribution_name );
    PyTuple_SET_ITEM( const_tuple_6b440bfa5b3121db5117d83bac4a8fdf_tuple, 5, const_str_plain_warnings ); Py_INCREF( const_str_plain_warnings );
    const_str_plain__parse_release_file = UNSTREAM_STRING_ASCII( &constant_bin[ 501217 ], 19, 1 );
    const_str_plain_SP = UNSTREAM_STRING_ASCII( &constant_bin[ 5773 ], 2, 1 );
    const_str_plain_2003Server = UNSTREAM_STRING_ASCII( &constant_bin[ 501236 ], 10, 0 );
    const_str_digest_e4e97622421c13e798ad32d45d55de5e = UNSTREAM_STRING_ASCII( &constant_bin[ 501246 ], 104, 0 );
    const_str_digest_80654e2d89d39ed487e956cc00c12981 = UNSTREAM_STRING_ASCII( &constant_bin[ 501350 ], 240, 0 );
    const_tuple_str_plain_dos_str_plain_win32_str_plain_win16_tuple = PyTuple_New( 3 );
    PyTuple_SET_ITEM( const_tuple_str_plain_dos_str_plain_win32_str_plain_win16_tuple, 0, const_str_plain_dos ); Py_INCREF( const_str_plain_dos );
    PyTuple_SET_ITEM( const_tuple_str_plain_dos_str_plain_win32_str_plain_win16_tuple, 1, const_str_plain_win32 ); Py_INCREF( const_str_plain_win32 );
    PyTuple_SET_ITEM( const_tuple_str_plain_dos_str_plain_win32_str_plain_win16_tuple, 2, const_str_plain_win16 ); Py_INCREF( const_str_plain_win16 );
    const_tuple_str_digest_85fe97af08c9a213aa891dc673aeaa3e_str_chr_45_tuple = PyTuple_New( 2 );
    PyTuple_SET_ITEM( const_tuple_str_digest_85fe97af08c9a213aa891dc673aeaa3e_str_chr_45_tuple, 0, const_str_digest_85fe97af08c9a213aa891dc673aeaa3e ); Py_INCREF( const_str_digest_85fe97af08c9a213aa891dc673aeaa3e );
    PyTuple_SET_ITEM( const_tuple_str_digest_85fe97af08c9a213aa891dc673aeaa3e_str_chr_45_tuple, 1, const_str_chr_45 ); Py_INCREF( const_str_chr_45 );
    const_str_plain_2008ServerR2 = UNSTREAM_STRING_ASCII( &constant_bin[ 501590 ], 12, 0 );
    const_str_plain_SunOS = UNSTREAM_STRING_ASCII( &constant_bin[ 496566 ], 5, 1 );
    const_str_digest_f8eade62a18d6d57e9fe13f9384395cd = UNSTREAM_STRING_ASCII( &constant_bin[ 501602 ], 529, 0 );
    const_str_plain__sys_version_cache = UNSTREAM_STRING_ASCII( &constant_bin[ 502131 ], 18, 1 );
    const_str_plain_ProductVersion = UNSTREAM_STRING_ASCII( &constant_bin[ 502149 ], 14, 1 );
    const_str_digest_8de99c9893b3a85ef93a1337e8aee84f = UNSTREAM_STRING_ASCII( &constant_bin[ 502163 ], 46, 0 );
    const_tuple_b3e088f8a08759017a886e75faa4b24f_tuple = PyTuple_New( 7 );
    PyTuple_SET_ITEM( const_tuple_b3e088f8a08759017a886e75faa4b24f_tuple, 0, const_str_plain_fn ); Py_INCREF( const_str_plain_fn );
    PyTuple_SET_ITEM( const_tuple_b3e088f8a08759017a886e75faa4b24f_tuple, 1, const_str_plain_plistlib ); Py_INCREF( const_str_plain_plistlib );
    PyTuple_SET_ITEM( const_tuple_b3e088f8a08759017a886e75faa4b24f_tuple, 2, const_str_plain_f ); Py_INCREF( const_str_plain_f );
    PyTuple_SET_ITEM( const_tuple_b3e088f8a08759017a886e75faa4b24f_tuple, 3, const_str_plain_pl ); Py_INCREF( const_str_plain_pl );
    PyTuple_SET_ITEM( const_tuple_b3e088f8a08759017a886e75faa4b24f_tuple, 4, const_str_plain_release ); Py_INCREF( const_str_plain_release );
    PyTuple_SET_ITEM( const_tuple_b3e088f8a08759017a886e75faa4b24f_tuple, 5, const_str_plain_versioninfo ); Py_INCREF( const_str_plain_versioninfo );
    PyTuple_SET_ITEM( const_tuple_b3e088f8a08759017a886e75faa4b24f_tuple, 6, const_str_plain_machine ); Py_INCREF( const_str_plain_machine );
    const_dict_65b9fbe352edd9eb08ffb860ae9637d7 = PyMarshal_ReadObjectFromString( (char *)&constant_bin[ 502209 ], 94 );
    const_str_digest_ec3bf7dd19dc7ed953e3161036ca6e00 = UNSTREAM_STRING_ASCII( &constant_bin[ 502303 ], 12, 0 );
    const_str_digest_2f1d8a4bf4076819a8462e3516cd3c4b = UNSTREAM_STRING_ASCII( &constant_bin[ 502315 ], 38, 0 );
    const_str_plain_DEV_NULL = UNSTREAM_STRING_ASCII( &constant_bin[ 502353 ], 8, 1 );
    const_str_digest_8fa6b8f60d5d56975f73474d37608cfc = UNSTREAM_STRING_ASCII( &constant_bin[ 502361 ], 229, 0 );
    const_str_plain__ver_output = UNSTREAM_STRING_ASCII( &constant_bin[ 502590 ], 11, 1 );
    const_str_plain_IRIX = UNSTREAM_STRING_ASCII( &constant_bin[ 500889 ], 4, 1 );
    const_str_digest_b4411e041e04a06c7be1bd9d9e4bccf2 = UNSTREAM_STRING_ASCII( &constant_bin[ 502601 ], 227, 0 );
    const_str_digest_6e70f991e7bbc2bafb75c8aa1f14cfbd = UNSTREAM_STRING_ASCII( &constant_bin[ 502828 ], 731, 0 );
    const_tuple_6bf58df76181354eb75bea9cdb34c763_tuple = PyTuple_New( 4 );
    PyTuple_SET_ITEM( const_tuple_6bf58df76181354eb75bea9cdb34c763_tuple, 0, const_str_plain_name ); Py_INCREF( const_str_plain_name );
    PyTuple_SET_ITEM( const_tuple_6bf58df76181354eb75bea9cdb34c763_tuple, 1, const_str_plain_default ); Py_INCREF( const_str_plain_default );
    PyTuple_SET_ITEM( const_tuple_6bf58df76181354eb75bea9cdb34c763_tuple, 2, const_str_plain_System ); Py_INCREF( const_str_plain_System );
    PyTuple_SET_ITEM( const_tuple_6bf58df76181354eb75bea9cdb34c763_tuple, 3, const_str_plain_value ); Py_INCREF( const_str_plain_value );
    const_dict_9668ec65d04d52f8707c28d0bc56a8f5 = PyMarshal_ReadObjectFromString( (char *)&constant_bin[ 503559 ], 193 );
    const_str_digest_60227585594ae34c5ae46679daff4fa6 = UNSTREAM_STRING_ASCII( &constant_bin[ 503752 ], 339, 0 );
    const_str_digest_43d8f87da2b2c6b18435c9fb92d7d50d = UNSTREAM_STRING_ASCII( &constant_bin[ 504091 ], 8, 0 );
    const_str_plain_no_os_uname = UNSTREAM_STRING_ASCII( &constant_bin[ 504099 ], 11, 1 );
    const_str_plain__uname_cache = UNSTREAM_STRING_ASCII( &constant_bin[ 504110 ], 12, 1 );
    const_str_digest_91ed6263fdf2a019af9e0f2fc59fdaf4 = UNSTREAM_STRING_ASCII( &constant_bin[ 504122 ], 9, 0 );
    const_str_plain__sys_version = UNSTREAM_STRING_ASCII( &constant_bin[ 496822 ], 12, 1 );
    const_str_plain_processor = UNSTREAM_STRING_ASCII( &constant_bin[ 443613 ], 9, 1 );
    const_str_digest_7c43f8e717dadececfad8d5b4940066a = UNSTREAM_STRING_ASCII( &constant_bin[ 504131 ], 12, 0 );
    const_str_plain__syscmd_uname = UNSTREAM_STRING_ASCII( &constant_bin[ 504143 ], 13, 1 );
    const_tuple_str_plain_java_tuple = PyTuple_New( 1 );
    PyTuple_SET_ITEM( const_tuple_str_plain_java_tuple, 0, const_str_plain_java ); Py_INCREF( const_str_plain_java );
    const_str_plain_PyPy = UNSTREAM_STRING_ASCII( &constant_bin[ 494500 ], 4, 1 );
    const_str_plain__linux_distribution = UNSTREAM_STRING_ASCII( &constant_bin[ 504156 ], 19, 1 );
    const_str_plain_32bit = UNSTREAM_STRING_ASCII( &constant_bin[ 504175 ], 5, 0 );
    const_str_plain__comparable_version = UNSTREAM_STRING_ASCII( &constant_bin[ 504180 ], 19, 1 );
    const_tuple_str_plain_win32_str_plain_win16_tuple = PyTuple_New( 2 );
    PyTuple_SET_ITEM( const_tuple_str_plain_win32_str_plain_win16_tuple, 0, const_str_plain_win32 ); Py_INCREF( const_str_plain_win32 );
    PyTuple_SET_ITEM( const_tuple_str_plain_win32_str_plain_win16_tuple, 1, const_str_plain_win16 ); Py_INCREF( const_str_plain_win16 );
    const_bytes_digest_42c41b3825c6201ecfaae761fed3d90f = UNSTREAM_BYTES( &constant_bin[ 495102 ], 4 );
    const_tuple_str_chr_40_str_chr_45_tuple = PyTuple_New( 2 );
    PyTuple_SET_ITEM( const_tuple_str_chr_40_str_chr_45_tuple, 0, const_str_chr_40 ); Py_INCREF( const_str_chr_40 );
    PyTuple_SET_ITEM( const_tuple_str_chr_40_str_chr_45_tuple, 1, const_str_chr_45 ); Py_INCREF( const_str_chr_45 );
    const_str_plain_Jython = UNSTREAM_STRING_ASCII( &constant_bin[ 495667 ], 6, 1 );
    const_tuple_str_space_str_plain___tuple = PyTuple_New( 2 );
    PyTuple_SET_ITEM( const_tuple_str_space_str_plain___tuple, 0, const_str_space ); Py_INCREF( const_str_space );
    PyTuple_SET_ITEM( const_tuple_str_space_str_plain___tuple, 1, const_str_plain__ ); Py_INCREF( const_str_plain__ );
    const_str_plain_VAX = UNSTREAM_STRING_ASCII( &constant_bin[ 504199 ], 3, 1 );
    const_str_digest_e8e111809a28ddaba2e8e8b614459008 = UNSTREAM_STRING_ASCII( &constant_bin[ 504202 ], 49, 0 );
    const_str_plain_Java = UNSTREAM_STRING_ASCII( &constant_bin[ 412140 ], 4, 1 );
    const_str_plain_Microsoft = UNSTREAM_STRING_ASCII( &constant_bin[ 295989 ], 9, 1 );
    const_str_digest_3d17135e9932663b6ac6a081ed4b93d5 = UNSTREAM_STRING_ASCII( &constant_bin[ 430305 ], 4, 0 );
    const_str_plain_ver = UNSTREAM_STRING_ASCII( &constant_bin[ 255 ], 3, 1 );
    const_str_plain_java_ver = UNSTREAM_STRING_ASCII( &constant_bin[ 504251 ], 8, 1 );
    const_dict_920ba897df3ccc986f41bdabeeb05d88 = _PyDict_NewPresized( 3 );
    const_tuple_str_empty_str_plain_WindowsPE_tuple = PyTuple_New( 2 );
    PyTuple_SET_ITEM( const_tuple_str_empty_str_plain_WindowsPE_tuple, 0, const_str_empty ); Py_INCREF( const_str_empty );
    PyTuple_SET_ITEM( const_tuple_str_empty_str_plain_WindowsPE_tuple, 1, const_str_plain_WindowsPE ); Py_INCREF( const_str_plain_WindowsPE );
    PyDict_SetItem( const_dict_920ba897df3ccc986f41bdabeeb05d88, const_str_plain_win32, const_tuple_str_empty_str_plain_WindowsPE_tuple );
    PyDict_SetItem( const_dict_920ba897df3ccc986f41bdabeeb05d88, const_str_plain_win16, const_tuple_str_empty_str_plain_Windows_tuple );
    const_tuple_str_empty_str_plain_MSDOS_tuple = PyTuple_New( 2 );
    PyTuple_SET_ITEM( const_tuple_str_empty_str_plain_MSDOS_tuple, 0, const_str_empty ); Py_INCREF( const_str_empty );
    PyTuple_SET_ITEM( const_tuple_str_empty_str_plain_MSDOS_tuple, 1, const_str_plain_MSDOS ); Py_INCREF( const_str_plain_MSDOS );
    PyDict_SetItem( const_dict_920ba897df3ccc986f41bdabeeb05d88, const_str_plain_dos, const_tuple_str_empty_str_plain_MSDOS_tuple );
    assert( PyDict_Size( const_dict_920ba897df3ccc986f41bdabeeb05d88 ) == 3 );
    const_str_digest_8f4a53b5cf60a8635bf4ae2f450d7690 = UNSTREAM_STRING_ASCII( &constant_bin[ 504259 ], 135, 0 );
    const_str_digest_69fcdc073bf66ccd55bf9a8a89b7f30c = UNSTREAM_STRING_ASCII( &constant_bin[ 504394 ], 312, 0 );
    const_str_digest_1c769e8d2e15170a2d8cc05571543e9b = UNSTREAM_STRING_ASCII( &constant_bin[ 504706 ], 113, 0 );
    const_str_digest_31d63c6dcb12a1b21610d339e5dfe57e = UNSTREAM_STRING_ASCII( &constant_bin[ 504819 ], 33, 0 );
    const_str_digest_54f3cedf4ae4e0fa27d4aa876c1557e5 = UNSTREAM_STRING_ASCII( &constant_bin[ 504852 ], 42, 0 );
    const_tuple_4d8f6d47b682f58a27abda6ded6cc7f6_tuple = PyTuple_New( 4 );
    PyTuple_SET_ITEM( const_tuple_4d8f6d47b682f58a27abda6ded6cc7f6_tuple, 0, const_str_empty ); Py_INCREF( const_str_empty );
    PyTuple_SET_ITEM( const_tuple_4d8f6d47b682f58a27abda6ded6cc7f6_tuple, 1, const_str_empty ); Py_INCREF( const_str_empty );
    PyTuple_SET_ITEM( const_tuple_4d8f6d47b682f58a27abda6ded6cc7f6_tuple, 2, const_tuple_str_empty_str_empty_str_empty_tuple ); Py_INCREF( const_tuple_str_empty_str_empty_str_empty_tuple );
    PyTuple_SET_ITEM( const_tuple_4d8f6d47b682f58a27abda6ded6cc7f6_tuple, 3, const_tuple_str_empty_str_empty_str_empty_tuple ); Py_INCREF( const_tuple_str_empty_str_empty_str_empty_tuple );
    const_tuple_str_chr_41_str_chr_45_tuple = PyTuple_New( 2 );
    PyTuple_SET_ITEM( const_tuple_str_chr_41_str_chr_45_tuple, 0, const_str_chr_41 ); Py_INCREF( const_str_chr_41 );
    PyTuple_SET_ITEM( const_tuple_str_chr_41_str_chr_45_tuple, 1, const_str_chr_45 ); Py_INCREF( const_str_chr_45 );
    const_str_plain_python_implementation = UNSTREAM_STRING_ASCII( &constant_bin[ 504894 ], 21, 1 );
    const_str_digest_44aad6fbd4eafc90a46253301256e922 = UNSTREAM_STRING_ASCII( &constant_bin[ 504915 ], 44, 0 );
    const_str_plain__WIN32_SERVER_RELEASES = UNSTREAM_STRING_ASCII( &constant_bin[ 504959 ], 22, 1 );
    const_str_plain_COFF = UNSTREAM_STRING_ASCII( &constant_bin[ 504981 ], 4, 1 );
    const_str_digest_207644829de0588c1bb0efe2c2f9a840 = UNSTREAM_STRING_ASCII( &constant_bin[ 504985 ], 12, 0 );
    const_str_digest_18c19c7f1666f65100a0b668faf8189b = UNSTREAM_STRING_ASCII( &constant_bin[ 504997 ], 11, 0 );
    const_tuple_str_digest_b2cf3abbcc35652f5e11bac6fe7339cf_int_0_tuple = PyTuple_New( 2 );
    PyTuple_SET_ITEM( const_tuple_str_digest_b2cf3abbcc35652f5e11bac6fe7339cf_int_0_tuple, 0, const_str_digest_b2cf3abbcc35652f5e11bac6fe7339cf ); Py_INCREF( const_str_digest_b2cf3abbcc35652f5e11bac6fe7339cf );
    PyTuple_SET_ITEM( const_tuple_str_digest_b2cf3abbcc35652f5e11bac6fe7339cf_int_0_tuple, 1, const_int_0 ); Py_INCREF( const_int_0 );
    const_str_plain_MIN_DIST_VERSION = UNSTREAM_STRING_ASCII( &constant_bin[ 505008 ], 16, 1 );
    const_bytes_digest_da015094d65b4f8de525ca75b89cc54f = UNSTREAM_BYTES( &constant_bin[ 505024 ], 67 );
    const_str_digest_7784b431cd5008cb86cccd8e28d3b60d = UNSTREAM_STRING_ASCII( &constant_bin[ 505091 ], 221, 0 );
    const_str_plain_getsyi = UNSTREAM_STRING_ASCII( &constant_bin[ 505312 ], 6, 1 );
    const_str_plain_python_revision = UNSTREAM_STRING_ASCII( &constant_bin[ 505318 ], 15, 1 );
    const_tuple_42dde1a64481afca90728eb1732accab_tuple = PyTuple_New( 3 );
    PyTuple_SET_ITEM( const_tuple_42dde1a64481afca90728eb1732accab_tuple, 0, const_str_plain_ver ); Py_INCREF( const_str_plain_ver );
    const_str_digest_21048b13275a3ae5f5edd327effae430 = UNSTREAM_STRING_ASCII( &constant_bin[ 505333 ], 14, 0 );
    PyTuple_SET_ITEM( const_tuple_42dde1a64481afca90728eb1732accab_tuple, 1, const_str_digest_21048b13275a3ae5f5edd327effae430 ); Py_INCREF( const_str_digest_21048b13275a3ae5f5edd327effae430 );
    const_str_digest_475f11148051da1368a41fca66edfc32 = UNSTREAM_STRING_ASCII( &constant_bin[ 505347 ], 10, 0 );
    PyTuple_SET_ITEM( const_tuple_42dde1a64481afca90728eb1732accab_tuple, 2, const_str_digest_475f11148051da1368a41fca66edfc32 ); Py_INCREF( const_str_digest_475f11148051da1368a41fca66edfc32 );
    const_tuple_str_chr_59_str_chr_45_tuple = PyTuple_New( 2 );
    PyTuple_SET_ITEM( const_tuple_str_chr_59_str_chr_45_tuple, 0, const_str_chr_59 ); Py_INCREF( const_str_chr_59 );
    PyTuple_SET_ITEM( const_tuple_str_chr_59_str_chr_45_tuple, 1, const_str_chr_45 ); Py_INCREF( const_str_chr_45 );
    const_str_digest_a7ad85f99ad5a3d569fe3a5dfa6469b5 = UNSTREAM_STRING_ASCII( &constant_bin[ 505357 ], 84, 0 );
    const_dict_2dcb717810229b46c02589cbc403e20d = _PyDict_NewPresized( 6 );
    PyDict_SetItem( const_dict_2dcb717810229b46c02589cbc403e20d, const_tuple_int_pos_5_int_pos_2_tuple, const_str_plain_2003Server );
    const_str_plain_2008Server = UNSTREAM_STRING_ASCII( &constant_bin[ 501590 ], 10, 0 );
    PyDict_SetItem( const_dict_2dcb717810229b46c02589cbc403e20d, const_tuple_int_pos_6_int_0_tuple, const_str_plain_2008Server );
    PyDict_SetItem( const_dict_2dcb717810229b46c02589cbc403e20d, const_tuple_int_pos_6_int_pos_1_tuple, const_str_plain_2008ServerR2 );
    const_str_plain_2012Server = UNSTREAM_STRING_ASCII( &constant_bin[ 495039 ], 10, 0 );
    PyDict_SetItem( const_dict_2dcb717810229b46c02589cbc403e20d, const_tuple_int_pos_6_int_pos_2_tuple, const_str_plain_2012Server );
    PyDict_SetItem( const_dict_2dcb717810229b46c02589cbc403e20d, const_tuple_int_pos_6_int_pos_3_tuple, const_str_plain_2012ServerR2 );
    PyDict_SetItem( const_dict_2dcb717810229b46c02589cbc403e20d, const_tuple_int_pos_6_none_tuple, const_str_plain_post2012ServerR2 );
    assert( PyDict_Size( const_dict_2dcb717810229b46c02589cbc403e20d ) == 6 );
    const_str_digest_f6fd6fd323de44f41e22129b71ae0d7b = UNSTREAM_STRING_ASCII( &constant_bin[ 505441 ], 140, 0 );
    const_str_digest_3c6ff7feba81d384f2b4e7c2b1df1ed3 = UNSTREAM_STRING_ASCII( &constant_bin[ 505581 ], 6, 0 );
    const_tuple_str_digest_2a97892845181b4de397b7c5260f5eae_tuple = PyTuple_New( 1 );
    PyTuple_SET_ITEM( const_tuple_str_digest_2a97892845181b4de397b7c5260f5eae_tuple, 0, const_str_digest_2a97892845181b4de397b7c5260f5eae ); Py_INCREF( const_str_digest_2a97892845181b4de397b7c5260f5eae );
    const_str_plain__node = UNSTREAM_STRING_ASCII( &constant_bin[ 505587 ], 5, 1 );
    const_str_plain__ver_stages = UNSTREAM_STRING_ASCII( &constant_bin[ 505592 ], 11, 1 );
    const_str_digest_0b162f5c4b79aa3f257f38246a3c944c = UNSTREAM_STRING_ASCII( &constant_bin[ 505603 ], 316, 0 );
    const_str_plain_Solaris = UNSTREAM_STRING_ASCII( &constant_bin[ 496600 ], 7, 1 );
    const_tuple_str_plain_default_str_plain_socket_tuple = PyTuple_New( 2 );
    PyTuple_SET_ITEM( const_tuple_str_plain_default_str_plain_socket_tuple, 0, const_str_plain_default ); Py_INCREF( const_str_plain_default );
    PyTuple_SET_ITEM( const_tuple_str_plain_default_str_plain_socket_tuple, 1, const_str_plain_socket ); Py_INCREF( const_str_plain_socket );
    const_str_digest_53ea3ead692a5b6137ed9eda275bf4a2 = UNSTREAM_STRING_ASCII( &constant_bin[ 505919 ], 13, 0 );
    const_str_digest_450fff63ec945c111983c6e814ea4cfd = UNSTREAM_STRING_ASCII( &constant_bin[ 505932 ], 157, 0 );
    const_str_plain_libc = UNSTREAM_STRING_ASCII( &constant_bin[ 495102 ], 4, 1 );
    const_tuple_d8c19777ed3dd140cae3d1d53d0b4398_tuple = PyTuple_New( 4 );
    PyTuple_SET_ITEM( const_tuple_d8c19777ed3dd140cae3d1d53d0b4398_tuple, 0, const_str_plain_cmd ); Py_INCREF( const_str_plain_cmd );
    PyTuple_SET_ITEM( const_tuple_d8c19777ed3dd140cae3d1d53d0b4398_tuple, 1, const_str_plain_mode ); Py_INCREF( const_str_plain_mode );
    PyTuple_SET_ITEM( const_tuple_d8c19777ed3dd140cae3d1d53d0b4398_tuple, 2, const_str_plain_bufsize ); Py_INCREF( const_str_plain_bufsize );
    PyTuple_SET_ITEM( const_tuple_d8c19777ed3dd140cae3d1d53d0b4398_tuple, 3, const_str_plain_warnings ); Py_INCREF( const_str_plain_warnings );
    const_slice_none_int_pos_14_none = PySlice_New( Py_None, const_int_pos_14, Py_None );
    const_str_digest_efe86cfebd61b9a71b33c81b210741b4 = UNSTREAM_STRING_ASCII( &constant_bin[ 506089 ], 116, 0 );
    const_str_digest_5fcd0696fe944ce3e3d212e7fc0c8b51 = UNSTREAM_STRING_ASCII( &constant_bin[ 506205 ], 56, 0 );
    const_str_digest_d29a18585fda29d4884e7ff23cd583db = UNSTREAM_STRING_ASCII( &constant_bin[ 506261 ], 14, 0 );
    const_str_digest_e385ea402377268c6888b12d36b96194 = UNSTREAM_STRING_ASCII( &constant_bin[ 506275 ], 6, 0 );
    const_slice_int_pos_4_int_pos_6_none = PySlice_New( const_int_pos_4, const_int_pos_6, Py_None );
    const_str_digest_23ca34824203c6f381a9e69d7e58fe46 = UNSTREAM_STRING_ASCII( &constant_bin[ 506281 ], 17, 0 );
    const_tuple_88ef871040f710b246facc0e8a5fe5a0_tuple = PyTuple_New( 16 );
    PyTuple_SET_ITEM( const_tuple_88ef871040f710b246facc0e8a5fe5a0_tuple, 0, const_str_plain_no_os_uname ); Py_INCREF( const_str_plain_no_os_uname );
    PyTuple_SET_ITEM( const_tuple_88ef871040f710b246facc0e8a5fe5a0_tuple, 1, const_str_plain_processor ); Py_INCREF( const_str_plain_processor );
    PyTuple_SET_ITEM( const_tuple_88ef871040f710b246facc0e8a5fe5a0_tuple, 2, const_str_plain_system ); Py_INCREF( const_str_plain_system );
    PyTuple_SET_ITEM( const_tuple_88ef871040f710b246facc0e8a5fe5a0_tuple, 3, const_str_plain_node ); Py_INCREF( const_str_plain_node );
    PyTuple_SET_ITEM( const_tuple_88ef871040f710b246facc0e8a5fe5a0_tuple, 4, const_str_plain_release ); Py_INCREF( const_str_plain_release );
    PyTuple_SET_ITEM( const_tuple_88ef871040f710b246facc0e8a5fe5a0_tuple, 5, const_str_plain_version ); Py_INCREF( const_str_plain_version );
    PyTuple_SET_ITEM( const_tuple_88ef871040f710b246facc0e8a5fe5a0_tuple, 6, const_str_plain_machine ); Py_INCREF( const_str_plain_machine );
    PyTuple_SET_ITEM( const_tuple_88ef871040f710b246facc0e8a5fe5a0_tuple, 7, const_str_plain_use_syscmd_ver ); Py_INCREF( const_str_plain_use_syscmd_ver );
    PyTuple_SET_ITEM( const_tuple_88ef871040f710b246facc0e8a5fe5a0_tuple, 8, const_str_plain_csd ); Py_INCREF( const_str_plain_csd );
    PyTuple_SET_ITEM( const_tuple_88ef871040f710b246facc0e8a5fe5a0_tuple, 9, const_str_plain_ptype ); Py_INCREF( const_str_plain_ptype );
    PyTuple_SET_ITEM( const_tuple_88ef871040f710b246facc0e8a5fe5a0_tuple, 10, const_str_plain_vendor ); Py_INCREF( const_str_plain_vendor );
    PyTuple_SET_ITEM( const_tuple_88ef871040f710b246facc0e8a5fe5a0_tuple, 11, const_str_plain_vminfo ); Py_INCREF( const_str_plain_vminfo );
    PyTuple_SET_ITEM( const_tuple_88ef871040f710b246facc0e8a5fe5a0_tuple, 12, const_str_plain_osinfo ); Py_INCREF( const_str_plain_osinfo );
    PyTuple_SET_ITEM( const_tuple_88ef871040f710b246facc0e8a5fe5a0_tuple, 13, const_str_plain_vms_lib ); Py_INCREF( const_str_plain_vms_lib );
    PyTuple_SET_ITEM( const_tuple_88ef871040f710b246facc0e8a5fe5a0_tuple, 14, const_str_plain_csid ); Py_INCREF( const_str_plain_csid );
    const_str_plain_cpu_number = UNSTREAM_STRING_ASCII( &constant_bin[ 506298 ], 10, 1 );
    PyTuple_SET_ITEM( const_tuple_88ef871040f710b246facc0e8a5fe5a0_tuple, 15, const_str_plain_cpu_number ); Py_INCREF( const_str_plain_cpu_number );
    const_str_digest_406ba29c164f1246386dcf5f110bd3ef = UNSTREAM_STRING_ASCII( &constant_bin[ 506308 ], 39, 0 );
    const_str_plain__release_version = UNSTREAM_STRING_ASCII( &constant_bin[ 499628 ], 16, 1 );
    const_str_digest_d62c7468409a9b5dbc1f1e61cdadd7b2 = UNSTREAM_STRING_ASCII( &constant_bin[ 506347 ], 916, 0 );
    const_str_digest_8c48013a0d6a1e698c31a26923791b80 = UNSTREAM_STRING_ASCII( &constant_bin[ 507263 ], 15, 0 );
    const_tuple_str_digest_2bef6bf41b2e72a3cbc50f9de91800de_tuple = PyTuple_New( 1 );
    PyTuple_SET_ITEM( const_tuple_str_digest_2bef6bf41b2e72a3cbc50f9de91800de_tuple, 0, const_str_digest_2bef6bf41b2e72a3cbc50f9de91800de ); Py_INCREF( const_str_digest_2bef6bf41b2e72a3cbc50f9de91800de );
    const_tuple_str_chr_92_str_chr_45_tuple = PyTuple_New( 2 );
    PyTuple_SET_ITEM( const_tuple_str_chr_92_str_chr_45_tuple, 0, const_str_chr_92 ); Py_INCREF( const_str_chr_92 );
    PyTuple_SET_ITEM( const_tuple_str_chr_92_str_chr_45_tuple, 1, const_str_chr_45 ); Py_INCREF( const_str_chr_45 );
    const_str_plain_n32bit = UNSTREAM_STRING_ASCII( &constant_bin[ 504174 ], 6, 1 );
    const_str_plain_Vista = UNSTREAM_STRING_ASCII( &constant_bin[ 503650 ], 5, 1 );
    const_str_digest_98b03f82804b29f11f09b5147428a957 = UNSTREAM_STRING_ASCII( &constant_bin[ 507278 ], 299, 0 );

    constants_created = true;
}

/* Function to verify module private constants for non-corruption. */
#ifndef __NUITKA_NO_ASSERT__
void checkModuleConstants_platform( void )
{
    // The module may not have been used at all, then ignore this.
    if (constants_created == false) return;


}
#endif

// The module code objects.
static PyCodeObject *codeobj_fb35526eb8b1d6be23403b96f2e0bfd2;
static PyCodeObject *codeobj_05ca363d52dd0fa64390debf8c66097b;
static PyCodeObject *codeobj_247eaa34e4748fb26b64cbbdccd40646;
static PyCodeObject *codeobj_93e626735c7282b7e514dac1bb529073;
static PyCodeObject *codeobj_da69626f2bcb841bef747fa3b9caaded;
static PyCodeObject *codeobj_d6799e85b3b4b4e2540373134d7ad719;
static PyCodeObject *codeobj_85c1cc62a55d538c6401240bccea7c6c;
static PyCodeObject *codeobj_56ef1eabe7851e61c622492a816b4656;
static PyCodeObject *codeobj_fa8ebdcd8d683041704b483165d3e972;
static PyCodeObject *codeobj_dff23205ffbbd3cc016593cc8faec355;
static PyCodeObject *codeobj_ed162ff078a0bfe506c69dd6a6ef6a74;
static PyCodeObject *codeobj_b6f7d54bfd0f79eb0ae58adcb8e364fb;
static PyCodeObject *codeobj_59c2cc43609bae23e7a57f0b2d56bd1c;
static PyCodeObject *codeobj_43a808c2e7d2ad693508adcb974b4533;
static PyCodeObject *codeobj_85168251d2490c4232318962bb330495;
static PyCodeObject *codeobj_52aaa3e364e86ba8721dc4ad0fde4365;
static PyCodeObject *codeobj_109f5500facaab962d851ae8f9c2a4fc;
static PyCodeObject *codeobj_80336ffcec4082d86976166272757e61;
static PyCodeObject *codeobj_0aedce3e67af834a5e5e785c9a43d447;
static PyCodeObject *codeobj_ad79bebff06c0898dc9c56142cd0efd0;
static PyCodeObject *codeobj_41546e987a6804e4e850d6206ee8cd01;
static PyCodeObject *codeobj_e1899258df6552fe9fe3f5925d378487;
static PyCodeObject *codeobj_7d471acc39100affe4f828286b22c09d;
static PyCodeObject *codeobj_34dea52287ae50b1e167d683fa77674f;
static PyCodeObject *codeobj_120c7317512780504150c56bbaf527fd;
static PyCodeObject *codeobj_0d3a22fe3694b8da215ae5e33a50d7cb;
static PyCodeObject *codeobj_d98589cf7a060717383e105fa046f5a9;
static PyCodeObject *codeobj_f0b8d438529f91c513a9a85244666c80;
static PyCodeObject *codeobj_79402a9ecb16097a6e3b6ce2bdaf0398;
static PyCodeObject *codeobj_fef074391b25ff2e4937d3866ed97d3a;
static PyCodeObject *codeobj_3efa31fc82831885992d6ca32e1aa252;
static PyCodeObject *codeobj_bb0039be5259c72d3a4fd21ab831eb77;
static PyCodeObject *codeobj_4ed41bafbaed395db0c4281ae5cc0357;
static PyCodeObject *codeobj_756034e7ad7faf33e5dfc5731b9226c0;
static PyCodeObject *codeobj_a8e6c9dfcb2bfbef2f59b950a2c2d875;
static PyCodeObject *codeobj_88b750f9fd91d97315896380b8c5f62e;
static PyCodeObject *codeobj_3ffae5f34b5209fffec9ea9d7d8c2600;
static PyCodeObject *codeobj_9211ede61843307a8618562589961416;
static PyCodeObject *codeobj_78e45736f492b0dece9b673c7115a31c;
static PyCodeObject *codeobj_4214dd2b9282a50c64702ee940b60f1e;
static PyCodeObject *codeobj_452a413b3bfaa85657a8807ce8e12b14;

static void createModuleCodeObjects(void)
{
    module_filename_obj = MAKE_RELATIVE_PATH( const_str_digest_5d387f2d5c467e35ea9e46040e0a4c2d );
    codeobj_fb35526eb8b1d6be23403b96f2e0bfd2 = MAKE_CODEOBJ( module_filename_obj, const_str_angle_genexpr, 728, const_tuple_str_digest_b9c4baf879ebd882d40843df3a4dead7_str_plain_x_tuple, 1, 0, CO_GENERATOR | CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE );
    codeobj_05ca363d52dd0fa64390debf8c66097b = MAKE_CODEOBJ( module_filename_obj, const_str_angle_listcomp, 214, const_tuple_str_plain_s_tuple, 1, 0, CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE );
    codeobj_247eaa34e4748fb26b64cbbdccd40646 = MAKE_CODEOBJ( module_filename_obj, const_str_digest_7aa3ec2c732a9cfbcf16e3c71d0b60cf, 1, const_tuple_empty, 0, 0, CO_NOFREE );
    codeobj_93e626735c7282b7e514dac1bb529073 = MAKE_CODEOBJ( module_filename_obj, const_str_plain__comparable_version, 156, const_tuple_str_plain_version_str_plain_result_str_plain_v_str_plain_t_tuple, 1, 0, CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE );
    codeobj_da69626f2bcb841bef747fa3b9caaded = MAKE_CODEOBJ( module_filename_obj, const_str_plain__dist_try_harder, 234, const_tuple_50e5809ccd796006f2557fcc8ede18ff_tuple, 3, 0, CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE );
    codeobj_d6799e85b3b4b4e2540373134d7ad719 = MAKE_CODEOBJ( module_filename_obj, const_str_plain__follow_symlinks, 769, const_tuple_str_plain_filepath_tuple, 1, 0, CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE );
    codeobj_85c1cc62a55d538c6401240bccea7c6c = MAKE_CODEOBJ( module_filename_obj, const_str_plain__java_getprop, 622, const_tuple_6bf58df76181354eb75bea9cdb34c763_tuple, 2, 0, CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE );
    codeobj_56ef1eabe7851e61c622492a816b4656 = MAKE_CODEOBJ( module_filename_obj, const_str_plain__linux_distribution, 341, const_tuple_b6253dde28452ee1df38f2c093c68547_tuple, 5, 0, CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE );
    codeobj_fa8ebdcd8d683041704b483165d3e972 = MAKE_CODEOBJ( module_filename_obj, const_str_plain__mac_ver_xml, 581, const_tuple_b3e088f8a08759017a886e75faa4b24f_tuple, 0, 0, CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE );
    codeobj_dff23205ffbbd3cc016593cc8faec355 = MAKE_CODEOBJ( module_filename_obj, const_str_plain__node, 754, const_tuple_str_plain_default_str_plain_socket_tuple, 1, 0, CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE );
    codeobj_ed162ff078a0bfe506c69dd6a6ef6a74 = MAKE_CODEOBJ( module_filename_obj, const_str_plain__norm_version, 425, const_tuple_6aa827f8f4a1857d2474e286956cd49f_tuple, 2, 0, CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE );
    codeobj_b6f7d54bfd0f79eb0ae58adcb8e364fb = MAKE_CODEOBJ( module_filename_obj, const_str_plain__parse_release_file, 304, const_tuple_80cf2a37463826881be6eb6a8668c4c4_tuple, 1, 0, CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE );
    codeobj_59c2cc43609bae23e7a57f0b2d56bd1c = MAKE_CODEOBJ( module_filename_obj, const_str_plain__platform, 722, const_tuple_str_plain_args_str_plain_platform_str_plain_cleaned_tuple, 0, 0, CO_OPTIMIZED | CO_NEWLOCALS | CO_VARARGS | CO_NOFREE );
    codeobj_43a808c2e7d2ad693508adcb974b4533 = MAKE_CODEOBJ( module_filename_obj, const_str_plain__sys_version, 1149, const_tuple_4313dc38cb7b8653f9b511ee05e778bd_tuple, 1, 0, CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE );
    codeobj_85168251d2490c4232318962bb330495 = MAKE_CODEOBJ( module_filename_obj, const_str_plain__syscmd_file, 798, const_tuple_186a147f0b165dbdc3e112e6d8a23760_tuple, 2, 0, CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE );
    codeobj_52aaa3e364e86ba8721dc4ad0fde4365 = MAKE_CODEOBJ( module_filename_obj, const_str_plain__syscmd_uname, 780, const_tuple_844945a6b719bba0d779c7b7e212c02d_tuple, 2, 0, CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE );
    codeobj_109f5500facaab962d851ae8f9c2a4fc = MAKE_CODEOBJ( module_filename_obj, const_str_plain__syscmd_ver, 455, const_tuple_4c00129f43ad65b0d5b8ef4f4d57ec83_tuple, 4, 0, CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE );
    codeobj_80336ffcec4082d86976166272757e61 = MAKE_CODEOBJ( module_filename_obj, const_str_plain_architecture, 834, const_tuple_a51507747dabe2270b8e57d055011a39_tuple, 3, 0, CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE );
    codeobj_0aedce3e67af834a5e5e785c9a43d447 = MAKE_CODEOBJ( module_filename_obj, const_str_plain_dist, 395, const_tuple_41d228fdb7ed823a0d61b28ea26a162e_tuple, 4, 0, CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE );
    codeobj_ad79bebff06c0898dc9c56142cd0efd0 = MAKE_CODEOBJ( module_filename_obj, const_str_plain_java_ver, 633, const_tuple_9fffb3a60682292afdab602ec1064353_tuple, 4, 0, CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE );
    codeobj_41546e987a6804e4e850d6206ee8cd01 = MAKE_CODEOBJ( module_filename_obj, const_str_plain_libc_ver, 176, const_tuple_bdd370d905eebd397ba2a815f35093c0_tuple, 4, 0, CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE );
    codeobj_e1899258df6552fe9fe3f5925d378487 = MAKE_CODEOBJ( module_filename_obj, const_str_plain_linux_distribution, 331, const_tuple_6b440bfa5b3121db5117d83bac4a8fdf_tuple, 5, 0, CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE );
    codeobj_7d471acc39100affe4f828286b22c09d = MAKE_CODEOBJ( module_filename_obj, const_str_plain_mac_ver, 603, const_tuple_cea0a55d4208bd1fc91bed8c22370d95_tuple, 3, 0, CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE );
    codeobj_34dea52287ae50b1e167d683fa77674f = MAKE_CODEOBJ( module_filename_obj, const_str_plain_machine, 1098, const_tuple_empty, 0, 0, CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE );
    codeobj_120c7317512780504150c56bbaf527fd = MAKE_CODEOBJ( module_filename_obj, const_str_plain_node, 1070, const_tuple_empty, 0, 0, CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE );
    codeobj_0d3a22fe3694b8da215ae5e33a50d7cb = MAKE_CODEOBJ( module_filename_obj, const_str_plain_platform, 1334, const_tuple_3db9f76853ef639b497917168f0afc69_tuple, 2, 0, CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE );
    codeobj_d98589cf7a060717383e105fa046f5a9 = MAKE_CODEOBJ( module_filename_obj, const_str_plain_popen, 416, const_tuple_d8c19777ed3dd140cae3d1d53d0b4398_tuple, 3, 0, CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE );
    codeobj_f0b8d438529f91c513a9a85244666c80 = MAKE_CODEOBJ( module_filename_obj, const_str_plain_processor, 1107, const_tuple_empty, 0, 0, CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE );
    codeobj_79402a9ecb16097a6e3b6ce2bdaf0398 = MAKE_CODEOBJ( module_filename_obj, const_str_plain_python_branch, 1287, const_tuple_empty, 0, 0, CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE );
    codeobj_fef074391b25ff2e4937d3866ed97d3a = MAKE_CODEOBJ( module_filename_obj, const_str_plain_python_build, 1314, const_tuple_empty, 0, 0, CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE );
    codeobj_3efa31fc82831885992d6ca32e1aa252 = MAKE_CODEOBJ( module_filename_obj, const_str_plain_python_compiler, 1322, const_tuple_empty, 0, 0, CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE );
    codeobj_bb0039be5259c72d3a4fd21ab831eb77 = MAKE_CODEOBJ( module_filename_obj, const_str_plain_python_implementation, 1253, const_tuple_empty, 0, 0, CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE );
    codeobj_4ed41bafbaed395db0c4281ae5cc0357 = MAKE_CODEOBJ( module_filename_obj, const_str_plain_python_revision, 1301, const_tuple_empty, 0, 0, CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE );
    codeobj_756034e7ad7faf33e5dfc5731b9226c0 = MAKE_CODEOBJ( module_filename_obj, const_str_plain_python_version, 1266, const_tuple_empty, 0, 0, CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE );
    codeobj_a8e6c9dfcb2bfbef2f59b950a2c2d875 = MAKE_CODEOBJ( module_filename_obj, const_str_plain_python_version_tuple, 1276, const_tuple_empty, 0, 0, CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE );
    codeobj_88b750f9fd91d97315896380b8c5f62e = MAKE_CODEOBJ( module_filename_obj, const_str_plain_release, 1080, const_tuple_empty, 0, 0, CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE );
    codeobj_3ffae5f34b5209fffec9ea9d7d8c2600 = MAKE_CODEOBJ( module_filename_obj, const_str_plain_system, 1061, const_tuple_empty, 0, 0, CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE );
    codeobj_9211ede61843307a8618562589961416 = MAKE_CODEOBJ( module_filename_obj, const_str_plain_system_alias, 668, const_tuple_beb428d3c0a5fe5cde14e10da6ecdd36_tuple, 3, 0, CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE );
    codeobj_78e45736f492b0dece9b673c7115a31c = MAKE_CODEOBJ( module_filename_obj, const_str_plain_uname, 923, const_tuple_88ef871040f710b246facc0e8a5fe5a0_tuple, 0, 0, CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE );
    codeobj_4214dd2b9282a50c64702ee940b60f1e = MAKE_CODEOBJ( module_filename_obj, const_str_plain_version, 1089, const_tuple_empty, 0, 0, CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE );
    codeobj_452a413b3bfaa85657a8807ce8e12b14 = MAKE_CODEOBJ( module_filename_obj, const_str_plain_win32_ver, 533, const_tuple_b019fa3b00f82bb2c3855f6401da6ed4_tuple, 4, 0, CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE );
}

// The module function declarations.
static PyObject *platform$$$function_17__platform$$$genexpr_1_genexpr_maker( void );


static PyObject *MAKE_FUNCTION_platform$$$function_10__syscmd_ver( PyObject *defaults );


static PyObject *MAKE_FUNCTION_platform$$$function_11_win32_ver( PyObject *defaults );


static PyObject *MAKE_FUNCTION_platform$$$function_12__mac_ver_xml(  );


static PyObject *MAKE_FUNCTION_platform$$$function_13_mac_ver( PyObject *defaults );


static PyObject *MAKE_FUNCTION_platform$$$function_14__java_getprop(  );


static PyObject *MAKE_FUNCTION_platform$$$function_15_java_ver( PyObject *defaults );


static PyObject *MAKE_FUNCTION_platform$$$function_16_system_alias(  );


static PyObject *MAKE_FUNCTION_platform$$$function_17__platform(  );


static PyObject *MAKE_FUNCTION_platform$$$function_18__node( PyObject *defaults );


static PyObject *MAKE_FUNCTION_platform$$$function_19__follow_symlinks(  );


static PyObject *MAKE_FUNCTION_platform$$$function_1__comparable_version(  );


static PyObject *MAKE_FUNCTION_platform$$$function_20__syscmd_uname( PyObject *defaults );


static PyObject *MAKE_FUNCTION_platform$$$function_21__syscmd_file( PyObject *defaults );


static PyObject *MAKE_FUNCTION_platform$$$function_22_architecture( PyObject *defaults );


static PyObject *MAKE_FUNCTION_platform$$$function_23_uname(  );


static PyObject *MAKE_FUNCTION_platform$$$function_24_system(  );


static PyObject *MAKE_FUNCTION_platform$$$function_25_node(  );


static PyObject *MAKE_FUNCTION_platform$$$function_26_release(  );


static PyObject *MAKE_FUNCTION_platform$$$function_27_version(  );


static PyObject *MAKE_FUNCTION_platform$$$function_28_machine(  );


static PyObject *MAKE_FUNCTION_platform$$$function_29_processor(  );


static PyObject *MAKE_FUNCTION_platform$$$function_2_libc_ver( PyObject *defaults );


static PyObject *MAKE_FUNCTION_platform$$$function_30__sys_version( PyObject *defaults );


static PyObject *MAKE_FUNCTION_platform$$$function_31_python_implementation(  );


static PyObject *MAKE_FUNCTION_platform$$$function_32_python_version(  );


static PyObject *MAKE_FUNCTION_platform$$$function_33_python_version_tuple(  );


static PyObject *MAKE_FUNCTION_platform$$$function_34_python_branch(  );


static PyObject *MAKE_FUNCTION_platform$$$function_35_python_revision(  );


static PyObject *MAKE_FUNCTION_platform$$$function_36_python_build(  );


static PyObject *MAKE_FUNCTION_platform$$$function_37_python_compiler(  );


static PyObject *MAKE_FUNCTION_platform$$$function_38_platform( PyObject *defaults );


static PyObject *MAKE_FUNCTION_platform$$$function_3__dist_try_harder(  );


static PyObject *MAKE_FUNCTION_platform$$$function_4__parse_release_file(  );


static PyObject *MAKE_FUNCTION_platform$$$function_5_linux_distribution( PyObject *defaults );


static PyObject *MAKE_FUNCTION_platform$$$function_6__linux_distribution(  );


static PyObject *MAKE_FUNCTION_platform$$$function_7_dist( PyObject *defaults );


static PyObject *MAKE_FUNCTION_platform$$$function_8_popen( PyObject *defaults );


static PyObject *MAKE_FUNCTION_platform$$$function_9__norm_version( PyObject *defaults );


// The module function definitions.
static PyObject *impl_platform$$$function_1__comparable_version( struct Nuitka_FunctionObject const *self, PyObject **python_pars )
{
    // Preserve error status for checks
#ifndef __NUITKA_NO_ASSERT__
    NUITKA_MAY_BE_UNUSED bool had_error = ERROR_OCCURRED();
#endif

    // Local variable declarations.
    PyObject *par_version = python_pars[ 0 ];
    PyObject *var_result = NULL;
    PyObject *var_v = NULL;
    PyObject *var_t = NULL;
    PyObject *tmp_for_loop_1__for_iterator = NULL;
    PyObject *tmp_for_loop_1__iter_value = NULL;
    struct Nuitka_FrameObject *frame_93e626735c7282b7e514dac1bb529073;
    NUITKA_MAY_BE_UNUSED char const *type_description_1 = NULL;
    PyObject *exception_type = NULL;
    PyObject *exception_value = NULL;
    PyTracebackObject *exception_tb = NULL;
    NUITKA_MAY_BE_UNUSED int exception_lineno = 0;
    int tmp_res;
    PyObject *exception_keeper_type_1;
    PyObject *exception_keeper_value_1;
    PyTracebackObject *exception_keeper_tb_1;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_1;
    PyObject *exception_preserved_type_1;
    PyObject *exception_preserved_value_1;
    PyTracebackObject *exception_preserved_tb_1;
    bool tmp_result;
    PyObject *exception_keeper_type_2;
    PyObject *exception_keeper_value_2;
    PyTracebackObject *exception_keeper_tb_2;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_2;
    PyObject *exception_keeper_type_3;
    PyObject *exception_keeper_value_3;
    PyTracebackObject *exception_keeper_tb_3;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_3;
    static struct Nuitka_FrameObject *cache_frame_93e626735c7282b7e514dac1bb529073 = NULL;
    PyObject *tmp_return_value = NULL;
    PyObject *exception_keeper_type_4;
    PyObject *exception_keeper_value_4;
    PyTracebackObject *exception_keeper_tb_4;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_4;

    // Actual function body.
    {
        PyObject *tmp_assign_source_1;
        tmp_assign_source_1 = PyList_New( 0 );
        assert( var_result == NULL );
        var_result = tmp_assign_source_1;
    }
    // Tried code:
    MAKE_OR_REUSE_FRAME( cache_frame_93e626735c7282b7e514dac1bb529073, codeobj_93e626735c7282b7e514dac1bb529073, module_platform, sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *) );
    frame_93e626735c7282b7e514dac1bb529073 = cache_frame_93e626735c7282b7e514dac1bb529073;

    // Push the new frame as the currently active one.
    pushFrameStack( frame_93e626735c7282b7e514dac1bb529073 );

    // Mark the frame object as in use, ref count 1 will be up for reuse.
    assert( Py_REFCNT( frame_93e626735c7282b7e514dac1bb529073 ) == 2 ); // Frame stack

    // Framed code:
    {
        PyObject *tmp_assign_source_2;
        PyObject *tmp_iter_arg_1;
        PyObject *tmp_called_instance_1;
        PyObject *tmp_mvar_value_1;
        PyObject *tmp_args_element_name_1;
        tmp_mvar_value_1 = GET_STRING_DICT_VALUE( moduledict_platform, (Nuitka_StringObject *)const_str_plain__component_re );

        if (unlikely( tmp_mvar_value_1 == NULL ))
        {
            tmp_mvar_value_1 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain__component_re );
        }

        if ( tmp_mvar_value_1 == NULL )
        {

            exception_type = PyExc_NameError;
            Py_INCREF( exception_type );
            exception_value = PyUnicode_FromFormat( "name '%s' is not defined", "_component_re" );
            exception_tb = NULL;
            NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
            CHAIN_EXCEPTION( exception_value );

            exception_lineno = 158;
            type_description_1 = "oooo";
            goto frame_exception_exit_1;
        }

        tmp_called_instance_1 = tmp_mvar_value_1;
        CHECK_OBJECT( par_version );
        tmp_args_element_name_1 = par_version;
        frame_93e626735c7282b7e514dac1bb529073->m_frame.f_lineno = 158;
        {
            PyObject *call_args[] = { tmp_args_element_name_1 };
            tmp_iter_arg_1 = CALL_METHOD_WITH_ARGS1( tmp_called_instance_1, const_str_plain_split, call_args );
        }

        if ( tmp_iter_arg_1 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 158;
            type_description_1 = "oooo";
            goto frame_exception_exit_1;
        }
        tmp_assign_source_2 = MAKE_ITERATOR( tmp_iter_arg_1 );
        Py_DECREF( tmp_iter_arg_1 );
        if ( tmp_assign_source_2 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 158;
            type_description_1 = "oooo";
            goto frame_exception_exit_1;
        }
        assert( tmp_for_loop_1__for_iterator == NULL );
        tmp_for_loop_1__for_iterator = tmp_assign_source_2;
    }
    // Tried code:
    loop_start_1:;
    {
        PyObject *tmp_next_source_1;
        PyObject *tmp_assign_source_3;
        CHECK_OBJECT( tmp_for_loop_1__for_iterator );
        tmp_next_source_1 = tmp_for_loop_1__for_iterator;
        tmp_assign_source_3 = ITERATOR_NEXT( tmp_next_source_1 );
        if ( tmp_assign_source_3 == NULL )
        {
            if ( CHECK_AND_CLEAR_STOP_ITERATION_OCCURRED() )
            {

                goto loop_end_1;
            }
            else
            {

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
                type_description_1 = "oooo";
                exception_lineno = 158;
                goto try_except_handler_2;
            }
        }

        {
            PyObject *old = tmp_for_loop_1__iter_value;
            tmp_for_loop_1__iter_value = tmp_assign_source_3;
            Py_XDECREF( old );
        }

    }
    {
        PyObject *tmp_assign_source_4;
        CHECK_OBJECT( tmp_for_loop_1__iter_value );
        tmp_assign_source_4 = tmp_for_loop_1__iter_value;
        {
            PyObject *old = var_v;
            var_v = tmp_assign_source_4;
            Py_INCREF( var_v );
            Py_XDECREF( old );
        }

    }
    {
        nuitka_bool tmp_condition_result_1;
        PyObject *tmp_compexpr_left_1;
        PyObject *tmp_compexpr_right_1;
        CHECK_OBJECT( var_v );
        tmp_compexpr_left_1 = var_v;
        tmp_compexpr_right_1 = const_str_digest_58d96e8cdb3a99d17284e3397e5cca6b;
        tmp_res = PySequence_Contains( tmp_compexpr_right_1, tmp_compexpr_left_1 );
        if ( tmp_res == -1 )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 159;
            type_description_1 = "oooo";
            goto try_except_handler_2;
        }
        tmp_condition_result_1 = ( tmp_res == 0 ) ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
        if ( tmp_condition_result_1 == NUITKA_BOOL_TRUE )
        {
            goto branch_yes_1;
        }
        else
        {
            goto branch_no_1;
        }
        branch_yes_1:;
        // Tried code:
        {
            PyObject *tmp_assign_source_5;
            PyObject *tmp_value_name_1;
            PyObject *tmp_base_name_1;
            CHECK_OBJECT( var_v );
            tmp_value_name_1 = var_v;
            tmp_base_name_1 = const_int_pos_10;
            tmp_assign_source_5 = BUILTIN_INT2( tmp_value_name_1, tmp_base_name_1 );
            if ( tmp_assign_source_5 == NULL )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 161;
                type_description_1 = "oooo";
                goto try_except_handler_3;
            }
            {
                PyObject *old = var_v;
                assert( old != NULL );
                var_v = tmp_assign_source_5;
                Py_DECREF( old );
            }

        }
        {
            PyObject *tmp_assign_source_6;
            tmp_assign_source_6 = const_int_pos_100;
            {
                PyObject *old = var_t;
                var_t = tmp_assign_source_6;
                Py_INCREF( var_t );
                Py_XDECREF( old );
            }

        }
        goto try_end_1;
        // Exception handler code:
        try_except_handler_3:;
        exception_keeper_type_1 = exception_type;
        exception_keeper_value_1 = exception_value;
        exception_keeper_tb_1 = exception_tb;
        exception_keeper_lineno_1 = exception_lineno;
        exception_type = NULL;
        exception_value = NULL;
        exception_tb = NULL;
        exception_lineno = 0;

        // Preserve existing published exception.
        exception_preserved_type_1 = EXC_TYPE(PyThreadState_GET());
        Py_XINCREF( exception_preserved_type_1 );
        exception_preserved_value_1 = EXC_VALUE(PyThreadState_GET());
        Py_XINCREF( exception_preserved_value_1 );
        exception_preserved_tb_1 = (PyTracebackObject *)EXC_TRACEBACK(PyThreadState_GET());
        Py_XINCREF( exception_preserved_tb_1 );

        if ( exception_keeper_tb_1 == NULL )
        {
            exception_keeper_tb_1 = MAKE_TRACEBACK( frame_93e626735c7282b7e514dac1bb529073, exception_keeper_lineno_1 );
        }
        else if ( exception_keeper_lineno_1 != 0 )
        {
            exception_keeper_tb_1 = ADD_TRACEBACK( exception_keeper_tb_1, frame_93e626735c7282b7e514dac1bb529073, exception_keeper_lineno_1 );
        }

        NORMALIZE_EXCEPTION( &exception_keeper_type_1, &exception_keeper_value_1, &exception_keeper_tb_1 );
        PyException_SetTraceback( exception_keeper_value_1, (PyObject *)exception_keeper_tb_1 );
        PUBLISH_EXCEPTION( &exception_keeper_type_1, &exception_keeper_value_1, &exception_keeper_tb_1 );
        // Tried code:
        {
            nuitka_bool tmp_condition_result_2;
            PyObject *tmp_compexpr_left_2;
            PyObject *tmp_compexpr_right_2;
            tmp_compexpr_left_2 = EXC_TYPE(PyThreadState_GET());
            tmp_compexpr_right_2 = PyExc_ValueError;
            tmp_res = EXCEPTION_MATCH_BOOL( tmp_compexpr_left_2, tmp_compexpr_right_2 );
            if ( tmp_res == -1 )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 163;
                type_description_1 = "oooo";
                goto try_except_handler_4;
            }
            tmp_condition_result_2 = ( tmp_res != 0 ) ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
            if ( tmp_condition_result_2 == NUITKA_BOOL_TRUE )
            {
                goto branch_yes_2;
            }
            else
            {
                goto branch_no_2;
            }
            branch_yes_2:;
            {
                PyObject *tmp_assign_source_7;
                PyObject *tmp_called_instance_2;
                PyObject *tmp_mvar_value_2;
                PyObject *tmp_args_element_name_2;
                PyObject *tmp_args_element_name_3;
                tmp_mvar_value_2 = GET_STRING_DICT_VALUE( moduledict_platform, (Nuitka_StringObject *)const_str_plain__ver_stages );

                if (unlikely( tmp_mvar_value_2 == NULL ))
                {
                    tmp_mvar_value_2 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain__ver_stages );
                }

                if ( tmp_mvar_value_2 == NULL )
                {

                    exception_type = PyExc_NameError;
                    Py_INCREF( exception_type );
                    exception_value = PyUnicode_FromFormat( "name '%s' is not defined", "_ver_stages" );
                    exception_tb = NULL;
                    NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
                    CHAIN_EXCEPTION( exception_value );

                    exception_lineno = 164;
                    type_description_1 = "oooo";
                    goto try_except_handler_4;
                }

                tmp_called_instance_2 = tmp_mvar_value_2;
                CHECK_OBJECT( var_v );
                tmp_args_element_name_2 = var_v;
                tmp_args_element_name_3 = const_int_0;
                frame_93e626735c7282b7e514dac1bb529073->m_frame.f_lineno = 164;
                {
                    PyObject *call_args[] = { tmp_args_element_name_2, tmp_args_element_name_3 };
                    tmp_assign_source_7 = CALL_METHOD_WITH_ARGS2( tmp_called_instance_2, const_str_plain_get, call_args );
                }

                if ( tmp_assign_source_7 == NULL )
                {
                    assert( ERROR_OCCURRED() );

                    FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                    exception_lineno = 164;
                    type_description_1 = "oooo";
                    goto try_except_handler_4;
                }
                {
                    PyObject *old = var_t;
                    var_t = tmp_assign_source_7;
                    Py_XDECREF( old );
                }

            }
            goto branch_end_2;
            branch_no_2:;
            tmp_result = RERAISE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
            if (unlikely( tmp_result == false ))
            {
                exception_lineno = 160;
            }

            if (exception_tb && exception_tb->tb_frame == &frame_93e626735c7282b7e514dac1bb529073->m_frame) frame_93e626735c7282b7e514dac1bb529073->m_frame.f_lineno = exception_tb->tb_lineno;
            type_description_1 = "oooo";
            goto try_except_handler_4;
            branch_end_2:;
        }
        goto try_end_2;
        // Exception handler code:
        try_except_handler_4:;
        exception_keeper_type_2 = exception_type;
        exception_keeper_value_2 = exception_value;
        exception_keeper_tb_2 = exception_tb;
        exception_keeper_lineno_2 = exception_lineno;
        exception_type = NULL;
        exception_value = NULL;
        exception_tb = NULL;
        exception_lineno = 0;

        // Restore previous exception.
        SET_CURRENT_EXCEPTION( exception_preserved_type_1, exception_preserved_value_1, exception_preserved_tb_1 );
        // Re-raise.
        exception_type = exception_keeper_type_2;
        exception_value = exception_keeper_value_2;
        exception_tb = exception_keeper_tb_2;
        exception_lineno = exception_keeper_lineno_2;

        goto try_except_handler_2;
        // End of try:
        try_end_2:;
        // Restore previous exception.
        SET_CURRENT_EXCEPTION( exception_preserved_type_1, exception_preserved_value_1, exception_preserved_tb_1 );
        goto try_end_1;
        // exception handler codes exits in all cases
        NUITKA_CANNOT_GET_HERE( platform$$$function_1__comparable_version );
        return NULL;
        // End of try:
        try_end_1:;
        {
            PyObject *tmp_called_name_1;
            PyObject *tmp_source_name_1;
            PyObject *tmp_call_result_1;
            PyObject *tmp_args_element_name_4;
            PyObject *tmp_tuple_element_1;
            CHECK_OBJECT( var_result );
            tmp_source_name_1 = var_result;
            tmp_called_name_1 = LOOKUP_ATTRIBUTE( tmp_source_name_1, const_str_plain_extend );
            if ( tmp_called_name_1 == NULL )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 165;
                type_description_1 = "oooo";
                goto try_except_handler_2;
            }
            if ( var_t == NULL )
            {
                Py_DECREF( tmp_called_name_1 );
                exception_type = PyExc_UnboundLocalError;
                Py_INCREF( exception_type );
                exception_value = PyUnicode_FromFormat( "local variable '%s' referenced before assignment", "t" );
                exception_tb = NULL;
                NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
                CHAIN_EXCEPTION( exception_value );

                exception_lineno = 165;
                type_description_1 = "oooo";
                goto try_except_handler_2;
            }

            tmp_tuple_element_1 = var_t;
            tmp_args_element_name_4 = PyTuple_New( 2 );
            Py_INCREF( tmp_tuple_element_1 );
            PyTuple_SET_ITEM( tmp_args_element_name_4, 0, tmp_tuple_element_1 );
            CHECK_OBJECT( var_v );
            tmp_tuple_element_1 = var_v;
            Py_INCREF( tmp_tuple_element_1 );
            PyTuple_SET_ITEM( tmp_args_element_name_4, 1, tmp_tuple_element_1 );
            frame_93e626735c7282b7e514dac1bb529073->m_frame.f_lineno = 165;
            {
                PyObject *call_args[] = { tmp_args_element_name_4 };
                tmp_call_result_1 = CALL_FUNCTION_WITH_ARGS1( tmp_called_name_1, call_args );
            }

            Py_DECREF( tmp_called_name_1 );
            Py_DECREF( tmp_args_element_name_4 );
            if ( tmp_call_result_1 == NULL )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 165;
                type_description_1 = "oooo";
                goto try_except_handler_2;
            }
            Py_DECREF( tmp_call_result_1 );
        }
        branch_no_1:;
    }
    if ( CONSIDER_THREADING() == false )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 158;
        type_description_1 = "oooo";
        goto try_except_handler_2;
    }
    goto loop_start_1;
    loop_end_1:;
    goto try_end_3;
    // Exception handler code:
    try_except_handler_2:;
    exception_keeper_type_3 = exception_type;
    exception_keeper_value_3 = exception_value;
    exception_keeper_tb_3 = exception_tb;
    exception_keeper_lineno_3 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    Py_XDECREF( tmp_for_loop_1__iter_value );
    tmp_for_loop_1__iter_value = NULL;

    CHECK_OBJECT( (PyObject *)tmp_for_loop_1__for_iterator );
    Py_DECREF( tmp_for_loop_1__for_iterator );
    tmp_for_loop_1__for_iterator = NULL;

    // Re-raise.
    exception_type = exception_keeper_type_3;
    exception_value = exception_keeper_value_3;
    exception_tb = exception_keeper_tb_3;
    exception_lineno = exception_keeper_lineno_3;

    goto frame_exception_exit_1;
    // End of try:
    try_end_3:;

#if 0
    RESTORE_FRAME_EXCEPTION( frame_93e626735c7282b7e514dac1bb529073 );
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto frame_no_exception_1;

    frame_exception_exit_1:;

#if 0
    RESTORE_FRAME_EXCEPTION( frame_93e626735c7282b7e514dac1bb529073 );
#endif

    if ( exception_tb == NULL )
    {
        exception_tb = MAKE_TRACEBACK( frame_93e626735c7282b7e514dac1bb529073, exception_lineno );
    }
    else if ( exception_tb->tb_frame != &frame_93e626735c7282b7e514dac1bb529073->m_frame )
    {
        exception_tb = ADD_TRACEBACK( exception_tb, frame_93e626735c7282b7e514dac1bb529073, exception_lineno );
    }

    // Attachs locals to frame if any.
    Nuitka_Frame_AttachLocals(
        (struct Nuitka_FrameObject *)frame_93e626735c7282b7e514dac1bb529073,
        type_description_1,
        par_version,
        var_result,
        var_v,
        var_t
    );


    // Release cached frame.
    if ( frame_93e626735c7282b7e514dac1bb529073 == cache_frame_93e626735c7282b7e514dac1bb529073 )
    {
        Py_DECREF( frame_93e626735c7282b7e514dac1bb529073 );
    }
    cache_frame_93e626735c7282b7e514dac1bb529073 = NULL;

    assertFrameObject( frame_93e626735c7282b7e514dac1bb529073 );

    // Put the previous frame back on top.
    popFrameStack();

    // Return the error.
    goto try_except_handler_1;

    frame_no_exception_1:;
    Py_XDECREF( tmp_for_loop_1__iter_value );
    tmp_for_loop_1__iter_value = NULL;

    CHECK_OBJECT( (PyObject *)tmp_for_loop_1__for_iterator );
    Py_DECREF( tmp_for_loop_1__for_iterator );
    tmp_for_loop_1__for_iterator = NULL;

    CHECK_OBJECT( var_result );
    tmp_return_value = var_result;
    Py_INCREF( tmp_return_value );
    goto try_return_handler_1;
    // tried codes exits in all cases
    NUITKA_CANNOT_GET_HERE( platform$$$function_1__comparable_version );
    return NULL;
    // Return handler code:
    try_return_handler_1:;
    CHECK_OBJECT( (PyObject *)par_version );
    Py_DECREF( par_version );
    par_version = NULL;

    CHECK_OBJECT( (PyObject *)var_result );
    Py_DECREF( var_result );
    var_result = NULL;

    Py_XDECREF( var_v );
    var_v = NULL;

    Py_XDECREF( var_t );
    var_t = NULL;

    goto function_return_exit;
    // Exception handler code:
    try_except_handler_1:;
    exception_keeper_type_4 = exception_type;
    exception_keeper_value_4 = exception_value;
    exception_keeper_tb_4 = exception_tb;
    exception_keeper_lineno_4 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    CHECK_OBJECT( (PyObject *)par_version );
    Py_DECREF( par_version );
    par_version = NULL;

    CHECK_OBJECT( (PyObject *)var_result );
    Py_DECREF( var_result );
    var_result = NULL;

    Py_XDECREF( var_v );
    var_v = NULL;

    Py_XDECREF( var_t );
    var_t = NULL;

    // Re-raise.
    exception_type = exception_keeper_type_4;
    exception_value = exception_keeper_value_4;
    exception_tb = exception_keeper_tb_4;
    exception_lineno = exception_keeper_lineno_4;

    goto function_exception_exit;
    // End of try:

    // Return statement must have exited already.
    NUITKA_CANNOT_GET_HERE( platform$$$function_1__comparable_version );
    return NULL;

function_exception_exit:
    assert( exception_type );
    RESTORE_ERROR_OCCURRED( exception_type, exception_value, exception_tb );

    return NULL;

function_return_exit:
   // Function cleanup code if any.


   // Actual function exit with return value, making sure we did not make
   // the error status worse despite non-NULL return.
   CHECK_OBJECT( tmp_return_value );
   assert( had_error || !ERROR_OCCURRED() );
   return tmp_return_value;
}


static PyObject *impl_platform$$$function_2_libc_ver( struct Nuitka_FunctionObject const *self, PyObject **python_pars )
{
    // Preserve error status for checks
#ifndef __NUITKA_NO_ASSERT__
    NUITKA_MAY_BE_UNUSED bool had_error = ERROR_OCCURRED();
#endif

    // Local variable declarations.
    PyObject *par_executable = python_pars[ 0 ];
    PyObject *par_lib = python_pars[ 1 ];
    PyObject *par_version = python_pars[ 2 ];
    PyObject *par_chunksize = python_pars[ 3 ];
    PyObject *var_V = NULL;
    PyObject *var_f = NULL;
    PyObject *var_binary = NULL;
    PyObject *var_pos = NULL;
    PyObject *var_m = NULL;
    PyObject *var_chunk = NULL;
    PyObject *var_libcinit = NULL;
    PyObject *var_glibc = NULL;
    PyObject *var_glibcversion = NULL;
    PyObject *var_so = NULL;
    PyObject *var_threads = NULL;
    PyObject *var_soversion = NULL;
    PyObject *outline_0_var_s = NULL;
    PyObject *tmp_listcomp_1__$0 = NULL;
    PyObject *tmp_listcomp_1__contraction = NULL;
    PyObject *tmp_listcomp_1__iter_value_0 = NULL;
    PyObject *tmp_tuple_unpack_1__element_1 = NULL;
    PyObject *tmp_tuple_unpack_1__element_2 = NULL;
    PyObject *tmp_tuple_unpack_1__element_3 = NULL;
    PyObject *tmp_tuple_unpack_1__element_4 = NULL;
    PyObject *tmp_tuple_unpack_1__element_5 = NULL;
    PyObject *tmp_tuple_unpack_1__element_6 = NULL;
    PyObject *tmp_tuple_unpack_1__source_iter = NULL;
    PyObject *tmp_with_1__enter = NULL;
    PyObject *tmp_with_1__exit = NULL;
    nuitka_bool tmp_with_1__indicator = NUITKA_BOOL_UNASSIGNED;
    PyObject *tmp_with_1__source = NULL;
    struct Nuitka_FrameObject *frame_41546e987a6804e4e850d6206ee8cd01;
    NUITKA_MAY_BE_UNUSED char const *type_description_1 = NULL;
    PyObject *exception_type = NULL;
    PyObject *exception_value = NULL;
    PyTracebackObject *exception_tb = NULL;
    NUITKA_MAY_BE_UNUSED int exception_lineno = 0;
    int tmp_res;
    struct Nuitka_FrameObject *frame_05ca363d52dd0fa64390debf8c66097b_2;
    NUITKA_MAY_BE_UNUSED char const *type_description_2 = NULL;
    PyObject *exception_keeper_type_1;
    PyObject *exception_keeper_value_1;
    PyTracebackObject *exception_keeper_tb_1;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_1;
    static struct Nuitka_FrameObject *cache_frame_05ca363d52dd0fa64390debf8c66097b_2 = NULL;
    PyObject *exception_keeper_type_2;
    PyObject *exception_keeper_value_2;
    PyTracebackObject *exception_keeper_tb_2;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_2;
    PyObject *tmp_iterator_attempt;
    PyObject *exception_keeper_type_3;
    PyObject *exception_keeper_value_3;
    PyTracebackObject *exception_keeper_tb_3;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_3;
    PyObject *exception_keeper_type_4;
    PyObject *exception_keeper_value_4;
    PyTracebackObject *exception_keeper_tb_4;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_4;
    PyObject *exception_keeper_type_5;
    PyObject *exception_keeper_value_5;
    PyTracebackObject *exception_keeper_tb_5;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_5;
    PyObject *exception_preserved_type_1;
    PyObject *exception_preserved_value_1;
    PyTracebackObject *exception_preserved_tb_1;
    bool tmp_result;
    PyObject *exception_keeper_type_6;
    PyObject *exception_keeper_value_6;
    PyTracebackObject *exception_keeper_tb_6;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_6;
    PyObject *exception_keeper_type_7;
    PyObject *exception_keeper_value_7;
    PyTracebackObject *exception_keeper_tb_7;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_7;
    PyObject *exception_keeper_type_8;
    PyObject *exception_keeper_value_8;
    PyTracebackObject *exception_keeper_tb_8;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_8;
    PyObject *tmp_return_value = NULL;
    static struct Nuitka_FrameObject *cache_frame_41546e987a6804e4e850d6206ee8cd01 = NULL;
    PyObject *exception_keeper_type_9;
    PyObject *exception_keeper_value_9;
    PyTracebackObject *exception_keeper_tb_9;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_9;

    // Actual function body.
    // Tried code:
    MAKE_OR_REUSE_FRAME( cache_frame_41546e987a6804e4e850d6206ee8cd01, codeobj_41546e987a6804e4e850d6206ee8cd01, module_platform, sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *) );
    frame_41546e987a6804e4e850d6206ee8cd01 = cache_frame_41546e987a6804e4e850d6206ee8cd01;

    // Push the new frame as the currently active one.
    pushFrameStack( frame_41546e987a6804e4e850d6206ee8cd01 );

    // Mark the frame object as in use, ref count 1 will be up for reuse.
    assert( Py_REFCNT( frame_41546e987a6804e4e850d6206ee8cd01 ) == 2 ); // Frame stack

    // Framed code:
    {
        PyObject *tmp_assign_source_1;
        PyObject *tmp_mvar_value_1;
        tmp_mvar_value_1 = GET_STRING_DICT_VALUE( moduledict_platform, (Nuitka_StringObject *)const_str_plain__comparable_version );

        if (unlikely( tmp_mvar_value_1 == NULL ))
        {
            tmp_mvar_value_1 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain__comparable_version );
        }

        if ( tmp_mvar_value_1 == NULL )
        {

            exception_type = PyExc_NameError;
            Py_INCREF( exception_type );
            exception_value = PyUnicode_FromFormat( "name '%s' is not defined", "_comparable_version" );
            exception_tb = NULL;
            NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
            CHAIN_EXCEPTION( exception_value );

            exception_lineno = 191;
            type_description_1 = "oooooooooooooooo";
            goto frame_exception_exit_1;
        }

        tmp_assign_source_1 = tmp_mvar_value_1;
        assert( var_V == NULL );
        Py_INCREF( tmp_assign_source_1 );
        var_V = tmp_assign_source_1;
    }
    {
        nuitka_bool tmp_condition_result_1;
        PyObject *tmp_source_name_1;
        PyObject *tmp_source_name_2;
        PyObject *tmp_mvar_value_2;
        PyObject *tmp_attribute_name_1;
        tmp_mvar_value_2 = GET_STRING_DICT_VALUE( moduledict_platform, (Nuitka_StringObject *)const_str_plain_os );

        if (unlikely( tmp_mvar_value_2 == NULL ))
        {
            tmp_mvar_value_2 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_os );
        }

        if ( tmp_mvar_value_2 == NULL )
        {

            exception_type = PyExc_NameError;
            Py_INCREF( exception_type );
            exception_value = PyUnicode_FromFormat( "name '%s' is not defined", "os" );
            exception_tb = NULL;
            NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
            CHAIN_EXCEPTION( exception_value );

            exception_lineno = 192;
            type_description_1 = "oooooooooooooooo";
            goto frame_exception_exit_1;
        }

        tmp_source_name_2 = tmp_mvar_value_2;
        tmp_source_name_1 = LOOKUP_ATTRIBUTE( tmp_source_name_2, const_str_plain_path );
        if ( tmp_source_name_1 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 192;
            type_description_1 = "oooooooooooooooo";
            goto frame_exception_exit_1;
        }
        tmp_attribute_name_1 = const_str_plain_realpath;
        tmp_res = BUILTIN_HASATTR_BOOL( tmp_source_name_1, tmp_attribute_name_1 );
        Py_DECREF( tmp_source_name_1 );
        if ( tmp_res == -1 )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 192;
            type_description_1 = "oooooooooooooooo";
            goto frame_exception_exit_1;
        }
        tmp_condition_result_1 = ( tmp_res != 0 ) ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
        if ( tmp_condition_result_1 == NUITKA_BOOL_TRUE )
        {
            goto branch_yes_1;
        }
        else
        {
            goto branch_no_1;
        }
        branch_yes_1:;
        {
            PyObject *tmp_assign_source_2;
            PyObject *tmp_called_instance_1;
            PyObject *tmp_source_name_3;
            PyObject *tmp_mvar_value_3;
            PyObject *tmp_args_element_name_1;
            tmp_mvar_value_3 = GET_STRING_DICT_VALUE( moduledict_platform, (Nuitka_StringObject *)const_str_plain_os );

            if (unlikely( tmp_mvar_value_3 == NULL ))
            {
                tmp_mvar_value_3 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_os );
            }

            if ( tmp_mvar_value_3 == NULL )
            {

                exception_type = PyExc_NameError;
                Py_INCREF( exception_type );
                exception_value = PyUnicode_FromFormat( "name '%s' is not defined", "os" );
                exception_tb = NULL;
                NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
                CHAIN_EXCEPTION( exception_value );

                exception_lineno = 196;
                type_description_1 = "oooooooooooooooo";
                goto frame_exception_exit_1;
            }

            tmp_source_name_3 = tmp_mvar_value_3;
            tmp_called_instance_1 = LOOKUP_ATTRIBUTE( tmp_source_name_3, const_str_plain_path );
            if ( tmp_called_instance_1 == NULL )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 196;
                type_description_1 = "oooooooooooooooo";
                goto frame_exception_exit_1;
            }
            CHECK_OBJECT( par_executable );
            tmp_args_element_name_1 = par_executable;
            frame_41546e987a6804e4e850d6206ee8cd01->m_frame.f_lineno = 196;
            {
                PyObject *call_args[] = { tmp_args_element_name_1 };
                tmp_assign_source_2 = CALL_METHOD_WITH_ARGS1( tmp_called_instance_1, const_str_plain_realpath, call_args );
            }

            Py_DECREF( tmp_called_instance_1 );
            if ( tmp_assign_source_2 == NULL )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 196;
                type_description_1 = "oooooooooooooooo";
                goto frame_exception_exit_1;
            }
            {
                PyObject *old = par_executable;
                assert( old != NULL );
                par_executable = tmp_assign_source_2;
                Py_DECREF( old );
            }

        }
        branch_no_1:;
    }
    // Tried code:
    {
        PyObject *tmp_assign_source_3;
        PyObject *tmp_open_filename_1;
        PyObject *tmp_open_mode_1;
        CHECK_OBJECT( par_executable );
        tmp_open_filename_1 = par_executable;
        tmp_open_mode_1 = const_str_plain_rb;
        tmp_assign_source_3 = BUILTIN_OPEN( tmp_open_filename_1, tmp_open_mode_1, NULL, NULL, NULL, NULL, NULL, NULL );
        if ( tmp_assign_source_3 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 197;
            type_description_1 = "oooooooooooooooo";
            goto try_except_handler_2;
        }
        assert( tmp_with_1__source == NULL );
        tmp_with_1__source = tmp_assign_source_3;
    }
    {
        PyObject *tmp_assign_source_4;
        PyObject *tmp_called_name_1;
        PyObject *tmp_source_name_4;
        CHECK_OBJECT( tmp_with_1__source );
        tmp_source_name_4 = tmp_with_1__source;
        tmp_called_name_1 = LOOKUP_SPECIAL( tmp_source_name_4, const_str_plain___enter__ );
        if ( tmp_called_name_1 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 197;
            type_description_1 = "oooooooooooooooo";
            goto try_except_handler_2;
        }
        frame_41546e987a6804e4e850d6206ee8cd01->m_frame.f_lineno = 197;
        tmp_assign_source_4 = CALL_FUNCTION_NO_ARGS( tmp_called_name_1 );
        Py_DECREF( tmp_called_name_1 );
        if ( tmp_assign_source_4 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 197;
            type_description_1 = "oooooooooooooooo";
            goto try_except_handler_2;
        }
        assert( tmp_with_1__enter == NULL );
        tmp_with_1__enter = tmp_assign_source_4;
    }
    {
        PyObject *tmp_assign_source_5;
        PyObject *tmp_source_name_5;
        CHECK_OBJECT( tmp_with_1__source );
        tmp_source_name_5 = tmp_with_1__source;
        tmp_assign_source_5 = LOOKUP_SPECIAL( tmp_source_name_5, const_str_plain___exit__ );
        if ( tmp_assign_source_5 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 197;
            type_description_1 = "oooooooooooooooo";
            goto try_except_handler_2;
        }
        assert( tmp_with_1__exit == NULL );
        tmp_with_1__exit = tmp_assign_source_5;
    }
    {
        nuitka_bool tmp_assign_source_6;
        tmp_assign_source_6 = NUITKA_BOOL_TRUE;
        tmp_with_1__indicator = tmp_assign_source_6;
    }
    {
        PyObject *tmp_assign_source_7;
        CHECK_OBJECT( tmp_with_1__enter );
        tmp_assign_source_7 = tmp_with_1__enter;
        assert( var_f == NULL );
        Py_INCREF( tmp_assign_source_7 );
        var_f = tmp_assign_source_7;
    }
    // Tried code:
    // Tried code:
    {
        PyObject *tmp_assign_source_8;
        PyObject *tmp_called_instance_2;
        PyObject *tmp_args_element_name_2;
        CHECK_OBJECT( var_f );
        tmp_called_instance_2 = var_f;
        CHECK_OBJECT( par_chunksize );
        tmp_args_element_name_2 = par_chunksize;
        frame_41546e987a6804e4e850d6206ee8cd01->m_frame.f_lineno = 198;
        {
            PyObject *call_args[] = { tmp_args_element_name_2 };
            tmp_assign_source_8 = CALL_METHOD_WITH_ARGS1( tmp_called_instance_2, const_str_plain_read, call_args );
        }

        if ( tmp_assign_source_8 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 198;
            type_description_1 = "oooooooooooooooo";
            goto try_except_handler_4;
        }
        assert( var_binary == NULL );
        var_binary = tmp_assign_source_8;
    }
    {
        PyObject *tmp_assign_source_9;
        tmp_assign_source_9 = const_int_0;
        assert( var_pos == NULL );
        Py_INCREF( tmp_assign_source_9 );
        var_pos = tmp_assign_source_9;
    }
    loop_start_1:;
    {
        nuitka_bool tmp_condition_result_2;
        PyObject *tmp_operand_name_1;
        PyObject *tmp_compexpr_left_1;
        PyObject *tmp_compexpr_right_1;
        PyObject *tmp_len_arg_1;
        CHECK_OBJECT( var_pos );
        tmp_compexpr_left_1 = var_pos;
        CHECK_OBJECT( var_binary );
        tmp_len_arg_1 = var_binary;
        tmp_compexpr_right_1 = BUILTIN_LEN( tmp_len_arg_1 );
        if ( tmp_compexpr_right_1 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 200;
            type_description_1 = "oooooooooooooooo";
            goto try_except_handler_4;
        }
        tmp_operand_name_1 = RICH_COMPARE_LT_OBJECT_OBJECT( tmp_compexpr_left_1, tmp_compexpr_right_1 );
        Py_DECREF( tmp_compexpr_right_1 );
        if ( tmp_operand_name_1 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 200;
            type_description_1 = "oooooooooooooooo";
            goto try_except_handler_4;
        }
        tmp_res = CHECK_IF_TRUE( tmp_operand_name_1 );
        Py_DECREF( tmp_operand_name_1 );
        if ( tmp_res == -1 )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 200;
            type_description_1 = "oooooooooooooooo";
            goto try_except_handler_4;
        }
        tmp_condition_result_2 = ( tmp_res == 0 ) ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
        if ( tmp_condition_result_2 == NUITKA_BOOL_TRUE )
        {
            goto branch_yes_2;
        }
        else
        {
            goto branch_no_2;
        }
        branch_yes_2:;
        goto loop_end_1;
        branch_no_2:;
    }
    {
        nuitka_bool tmp_condition_result_3;
        int tmp_or_left_truth_1;
        nuitka_bool tmp_or_left_value_1;
        nuitka_bool tmp_or_right_value_1;
        PyObject *tmp_compexpr_left_2;
        PyObject *tmp_compexpr_right_2;
        PyObject *tmp_compexpr_left_3;
        PyObject *tmp_compexpr_right_3;
        tmp_compexpr_left_2 = const_bytes_digest_42c41b3825c6201ecfaae761fed3d90f;
        CHECK_OBJECT( var_binary );
        tmp_compexpr_right_2 = var_binary;
        tmp_res = PySequence_Contains( tmp_compexpr_right_2, tmp_compexpr_left_2 );
        if ( tmp_res == -1 )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 201;
            type_description_1 = "oooooooooooooooo";
            goto try_except_handler_4;
        }
        tmp_or_left_value_1 = ( tmp_res == 1 ) ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
        tmp_or_left_truth_1 = tmp_or_left_value_1 == NUITKA_BOOL_TRUE ? 1 : 0;
        if ( tmp_or_left_truth_1 == 1 )
        {
            goto or_left_1;
        }
        else
        {
            goto or_right_1;
        }
        or_right_1:;
        tmp_compexpr_left_3 = const_bytes_digest_cd27fad322a3c847c9efd23ee3ded150;
        CHECK_OBJECT( var_binary );
        tmp_compexpr_right_3 = var_binary;
        tmp_res = PySequence_Contains( tmp_compexpr_right_3, tmp_compexpr_left_3 );
        if ( tmp_res == -1 )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 201;
            type_description_1 = "oooooooooooooooo";
            goto try_except_handler_4;
        }
        tmp_or_right_value_1 = ( tmp_res == 1 ) ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
        tmp_condition_result_3 = tmp_or_right_value_1;
        goto or_end_1;
        or_left_1:;
        tmp_condition_result_3 = tmp_or_left_value_1;
        or_end_1:;
        if ( tmp_condition_result_3 == NUITKA_BOOL_TRUE )
        {
            goto branch_yes_3;
        }
        else
        {
            goto branch_no_3;
        }
        branch_yes_3:;
        {
            PyObject *tmp_assign_source_10;
            PyObject *tmp_called_instance_3;
            PyObject *tmp_mvar_value_4;
            PyObject *tmp_args_element_name_3;
            PyObject *tmp_args_element_name_4;
            tmp_mvar_value_4 = GET_STRING_DICT_VALUE( moduledict_platform, (Nuitka_StringObject *)const_str_plain__libc_search );

            if (unlikely( tmp_mvar_value_4 == NULL ))
            {
                tmp_mvar_value_4 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain__libc_search );
            }

            if ( tmp_mvar_value_4 == NULL )
            {

                exception_type = PyExc_NameError;
                Py_INCREF( exception_type );
                exception_value = PyUnicode_FromFormat( "name '%s' is not defined", "_libc_search" );
                exception_tb = NULL;
                NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
                CHAIN_EXCEPTION( exception_value );

                exception_lineno = 202;
                type_description_1 = "oooooooooooooooo";
                goto try_except_handler_4;
            }

            tmp_called_instance_3 = tmp_mvar_value_4;
            CHECK_OBJECT( var_binary );
            tmp_args_element_name_3 = var_binary;
            CHECK_OBJECT( var_pos );
            tmp_args_element_name_4 = var_pos;
            frame_41546e987a6804e4e850d6206ee8cd01->m_frame.f_lineno = 202;
            {
                PyObject *call_args[] = { tmp_args_element_name_3, tmp_args_element_name_4 };
                tmp_assign_source_10 = CALL_METHOD_WITH_ARGS2( tmp_called_instance_3, const_str_plain_search, call_args );
            }

            if ( tmp_assign_source_10 == NULL )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 202;
                type_description_1 = "oooooooooooooooo";
                goto try_except_handler_4;
            }
            {
                PyObject *old = var_m;
                var_m = tmp_assign_source_10;
                Py_XDECREF( old );
            }

        }
        goto branch_end_3;
        branch_no_3:;
        {
            PyObject *tmp_assign_source_11;
            tmp_assign_source_11 = Py_None;
            {
                PyObject *old = var_m;
                var_m = tmp_assign_source_11;
                Py_INCREF( var_m );
                Py_XDECREF( old );
            }

        }
        branch_end_3:;
    }
    {
        nuitka_bool tmp_condition_result_4;
        int tmp_or_left_truth_2;
        nuitka_bool tmp_or_left_value_2;
        nuitka_bool tmp_or_right_value_2;
        PyObject *tmp_operand_name_2;
        PyObject *tmp_compexpr_left_4;
        PyObject *tmp_compexpr_right_4;
        PyObject *tmp_called_instance_4;
        PyObject *tmp_len_arg_2;
        CHECK_OBJECT( var_m );
        tmp_operand_name_2 = var_m;
        tmp_res = CHECK_IF_TRUE( tmp_operand_name_2 );
        if ( tmp_res == -1 )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 205;
            type_description_1 = "oooooooooooooooo";
            goto try_except_handler_4;
        }
        tmp_or_left_value_2 = ( tmp_res == 0 ) ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
        tmp_or_left_truth_2 = tmp_or_left_value_2 == NUITKA_BOOL_TRUE ? 1 : 0;
        if ( tmp_or_left_truth_2 == 1 )
        {
            goto or_left_2;
        }
        else
        {
            goto or_right_2;
        }
        or_right_2:;
        CHECK_OBJECT( var_m );
        tmp_called_instance_4 = var_m;
        frame_41546e987a6804e4e850d6206ee8cd01->m_frame.f_lineno = 205;
        tmp_compexpr_left_4 = CALL_METHOD_NO_ARGS( tmp_called_instance_4, const_str_plain_end );
        if ( tmp_compexpr_left_4 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 205;
            type_description_1 = "oooooooooooooooo";
            goto try_except_handler_4;
        }
        CHECK_OBJECT( var_binary );
        tmp_len_arg_2 = var_binary;
        tmp_compexpr_right_4 = BUILTIN_LEN( tmp_len_arg_2 );
        if ( tmp_compexpr_right_4 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
            Py_DECREF( tmp_compexpr_left_4 );

            exception_lineno = 205;
            type_description_1 = "oooooooooooooooo";
            goto try_except_handler_4;
        }
        tmp_res = RICH_COMPARE_BOOL_EQ_OBJECT_OBJECT( tmp_compexpr_left_4, tmp_compexpr_right_4 );
        Py_DECREF( tmp_compexpr_left_4 );
        Py_DECREF( tmp_compexpr_right_4 );
        if ( tmp_res == -1 )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 205;
            type_description_1 = "oooooooooooooooo";
            goto try_except_handler_4;
        }
        tmp_or_right_value_2 = ( tmp_res != 0 ) ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
        tmp_condition_result_4 = tmp_or_right_value_2;
        goto or_end_2;
        or_left_2:;
        tmp_condition_result_4 = tmp_or_left_value_2;
        or_end_2:;
        if ( tmp_condition_result_4 == NUITKA_BOOL_TRUE )
        {
            goto branch_yes_4;
        }
        else
        {
            goto branch_no_4;
        }
        branch_yes_4:;
        {
            PyObject *tmp_assign_source_12;
            PyObject *tmp_called_instance_5;
            PyObject *tmp_args_element_name_5;
            CHECK_OBJECT( var_f );
            tmp_called_instance_5 = var_f;
            CHECK_OBJECT( par_chunksize );
            tmp_args_element_name_5 = par_chunksize;
            frame_41546e987a6804e4e850d6206ee8cd01->m_frame.f_lineno = 206;
            {
                PyObject *call_args[] = { tmp_args_element_name_5 };
                tmp_assign_source_12 = CALL_METHOD_WITH_ARGS1( tmp_called_instance_5, const_str_plain_read, call_args );
            }

            if ( tmp_assign_source_12 == NULL )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 206;
                type_description_1 = "oooooooooooooooo";
                goto try_except_handler_4;
            }
            {
                PyObject *old = var_chunk;
                var_chunk = tmp_assign_source_12;
                Py_XDECREF( old );
            }

        }
        {
            nuitka_bool tmp_condition_result_5;
            int tmp_truth_name_1;
            CHECK_OBJECT( var_chunk );
            tmp_truth_name_1 = CHECK_IF_TRUE( var_chunk );
            if ( tmp_truth_name_1 == -1 )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 207;
                type_description_1 = "oooooooooooooooo";
                goto try_except_handler_4;
            }
            tmp_condition_result_5 = tmp_truth_name_1 == 1 ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
            if ( tmp_condition_result_5 == NUITKA_BOOL_TRUE )
            {
                goto branch_yes_5;
            }
            else
            {
                goto branch_no_5;
            }
            branch_yes_5:;
            {
                PyObject *tmp_assign_source_13;
                PyObject *tmp_left_name_1;
                PyObject *tmp_subscribed_name_1;
                PyObject *tmp_subscript_name_1;
                PyObject *tmp_start_name_1;
                PyObject *tmp_called_name_2;
                PyObject *tmp_args_element_name_6;
                PyObject *tmp_args_element_name_7;
                PyObject *tmp_left_name_2;
                PyObject *tmp_len_arg_3;
                PyObject *tmp_right_name_1;
                PyObject *tmp_stop_name_1;
                PyObject *tmp_step_name_1;
                PyObject *tmp_right_name_2;
                CHECK_OBJECT( var_binary );
                tmp_subscribed_name_1 = var_binary;
                tmp_called_name_2 = LOOKUP_BUILTIN( const_str_plain_max );
                assert( tmp_called_name_2 != NULL );
                CHECK_OBJECT( var_pos );
                tmp_args_element_name_6 = var_pos;
                CHECK_OBJECT( var_binary );
                tmp_len_arg_3 = var_binary;
                tmp_left_name_2 = BUILTIN_LEN( tmp_len_arg_3 );
                if ( tmp_left_name_2 == NULL )
                {
                    assert( ERROR_OCCURRED() );

                    FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                    exception_lineno = 208;
                    type_description_1 = "oooooooooooooooo";
                    goto try_except_handler_4;
                }
                tmp_right_name_1 = const_int_pos_1000;
                tmp_args_element_name_7 = BINARY_OPERATION_SUB( tmp_left_name_2, tmp_right_name_1 );
                Py_DECREF( tmp_left_name_2 );
                if ( tmp_args_element_name_7 == NULL )
                {
                    assert( ERROR_OCCURRED() );

                    FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                    exception_lineno = 208;
                    type_description_1 = "oooooooooooooooo";
                    goto try_except_handler_4;
                }
                frame_41546e987a6804e4e850d6206ee8cd01->m_frame.f_lineno = 208;
                {
                    PyObject *call_args[] = { tmp_args_element_name_6, tmp_args_element_name_7 };
                    tmp_start_name_1 = CALL_FUNCTION_WITH_ARGS2( tmp_called_name_2, call_args );
                }

                Py_DECREF( tmp_args_element_name_7 );
                if ( tmp_start_name_1 == NULL )
                {
                    assert( ERROR_OCCURRED() );

                    FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                    exception_lineno = 208;
                    type_description_1 = "oooooooooooooooo";
                    goto try_except_handler_4;
                }
                tmp_stop_name_1 = Py_None;
                tmp_step_name_1 = Py_None;
                tmp_subscript_name_1 = MAKE_SLICEOBJ3( tmp_start_name_1, tmp_stop_name_1, tmp_step_name_1 );
                Py_DECREF( tmp_start_name_1 );
                assert( !(tmp_subscript_name_1 == NULL) );
                tmp_left_name_1 = LOOKUP_SUBSCRIPT( tmp_subscribed_name_1, tmp_subscript_name_1 );
                Py_DECREF( tmp_subscript_name_1 );
                if ( tmp_left_name_1 == NULL )
                {
                    assert( ERROR_OCCURRED() );

                    FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                    exception_lineno = 208;
                    type_description_1 = "oooooooooooooooo";
                    goto try_except_handler_4;
                }
                CHECK_OBJECT( var_chunk );
                tmp_right_name_2 = var_chunk;
                tmp_assign_source_13 = BINARY_OPERATION_ADD_OBJECT_OBJECT( tmp_left_name_1, tmp_right_name_2 );
                Py_DECREF( tmp_left_name_1 );
                if ( tmp_assign_source_13 == NULL )
                {
                    assert( ERROR_OCCURRED() );

                    FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                    exception_lineno = 208;
                    type_description_1 = "oooooooooooooooo";
                    goto try_except_handler_4;
                }
                {
                    PyObject *old = var_binary;
                    assert( old != NULL );
                    var_binary = tmp_assign_source_13;
                    Py_DECREF( old );
                }

            }
            {
                PyObject *tmp_assign_source_14;
                tmp_assign_source_14 = const_int_0;
                {
                    PyObject *old = var_pos;
                    assert( old != NULL );
                    var_pos = tmp_assign_source_14;
                    Py_INCREF( var_pos );
                    Py_DECREF( old );
                }

            }
            goto loop_start_1;
            branch_no_5:;
        }
        {
            nuitka_bool tmp_condition_result_6;
            PyObject *tmp_operand_name_3;
            CHECK_OBJECT( var_m );
            tmp_operand_name_3 = var_m;
            tmp_res = CHECK_IF_TRUE( tmp_operand_name_3 );
            if ( tmp_res == -1 )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 211;
                type_description_1 = "oooooooooooooooo";
                goto try_except_handler_4;
            }
            tmp_condition_result_6 = ( tmp_res == 0 ) ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
            if ( tmp_condition_result_6 == NUITKA_BOOL_TRUE )
            {
                goto branch_yes_6;
            }
            else
            {
                goto branch_no_6;
            }
            branch_yes_6:;
            goto loop_end_1;
            branch_no_6:;
        }
        branch_no_4:;
    }
    // Tried code:
    {
        PyObject *tmp_assign_source_15;
        PyObject *tmp_iter_arg_1;
        // Tried code:
        {
            PyObject *tmp_assign_source_16;
            PyObject *tmp_iter_arg_2;
            PyObject *tmp_called_instance_6;
            CHECK_OBJECT( var_m );
            tmp_called_instance_6 = var_m;
            frame_41546e987a6804e4e850d6206ee8cd01->m_frame.f_lineno = 215;
            tmp_iter_arg_2 = CALL_METHOD_NO_ARGS( tmp_called_instance_6, const_str_plain_groups );
            if ( tmp_iter_arg_2 == NULL )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 215;
                type_description_1 = "oooooooooooooooo";
                goto try_except_handler_6;
            }
            tmp_assign_source_16 = MAKE_ITERATOR( tmp_iter_arg_2 );
            Py_DECREF( tmp_iter_arg_2 );
            if ( tmp_assign_source_16 == NULL )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 214;
                type_description_1 = "oooooooooooooooo";
                goto try_except_handler_6;
            }
            {
                PyObject *old = tmp_listcomp_1__$0;
                tmp_listcomp_1__$0 = tmp_assign_source_16;
                Py_XDECREF( old );
            }

        }
        {
            PyObject *tmp_assign_source_17;
            tmp_assign_source_17 = PyList_New( 0 );
            {
                PyObject *old = tmp_listcomp_1__contraction;
                tmp_listcomp_1__contraction = tmp_assign_source_17;
                Py_XDECREF( old );
            }

        }
        MAKE_OR_REUSE_FRAME( cache_frame_05ca363d52dd0fa64390debf8c66097b_2, codeobj_05ca363d52dd0fa64390debf8c66097b, module_platform, sizeof(void *) );
        frame_05ca363d52dd0fa64390debf8c66097b_2 = cache_frame_05ca363d52dd0fa64390debf8c66097b_2;

        // Push the new frame as the currently active one.
        pushFrameStack( frame_05ca363d52dd0fa64390debf8c66097b_2 );

        // Mark the frame object as in use, ref count 1 will be up for reuse.
        assert( Py_REFCNT( frame_05ca363d52dd0fa64390debf8c66097b_2 ) == 2 ); // Frame stack

        // Framed code:
        // Tried code:
        loop_start_2:;
        {
            PyObject *tmp_next_source_1;
            PyObject *tmp_assign_source_18;
            CHECK_OBJECT( tmp_listcomp_1__$0 );
            tmp_next_source_1 = tmp_listcomp_1__$0;
            tmp_assign_source_18 = ITERATOR_NEXT( tmp_next_source_1 );
            if ( tmp_assign_source_18 == NULL )
            {
                if ( CHECK_AND_CLEAR_STOP_ITERATION_OCCURRED() )
                {

                    goto loop_end_2;
                }
                else
                {

                    FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
                    type_description_2 = "o";
                    exception_lineno = 214;
                    goto try_except_handler_7;
                }
            }

            {
                PyObject *old = tmp_listcomp_1__iter_value_0;
                tmp_listcomp_1__iter_value_0 = tmp_assign_source_18;
                Py_XDECREF( old );
            }

        }
        {
            PyObject *tmp_assign_source_19;
            CHECK_OBJECT( tmp_listcomp_1__iter_value_0 );
            tmp_assign_source_19 = tmp_listcomp_1__iter_value_0;
            {
                PyObject *old = outline_0_var_s;
                outline_0_var_s = tmp_assign_source_19;
                Py_INCREF( outline_0_var_s );
                Py_XDECREF( old );
            }

        }
        {
            PyObject *tmp_append_list_1;
            PyObject *tmp_append_value_1;
            nuitka_bool tmp_condition_result_7;
            PyObject *tmp_compexpr_left_5;
            PyObject *tmp_compexpr_right_5;
            PyObject *tmp_called_instance_7;
            CHECK_OBJECT( tmp_listcomp_1__contraction );
            tmp_append_list_1 = tmp_listcomp_1__contraction;
            CHECK_OBJECT( outline_0_var_s );
            tmp_compexpr_left_5 = outline_0_var_s;
            tmp_compexpr_right_5 = Py_None;
            tmp_condition_result_7 = ( tmp_compexpr_left_5 != tmp_compexpr_right_5 ) ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
            if ( tmp_condition_result_7 == NUITKA_BOOL_TRUE )
            {
                goto condexpr_true_1;
            }
            else
            {
                goto condexpr_false_1;
            }
            condexpr_true_1:;
            CHECK_OBJECT( outline_0_var_s );
            tmp_called_instance_7 = outline_0_var_s;
            frame_05ca363d52dd0fa64390debf8c66097b_2->m_frame.f_lineno = 214;
            tmp_append_value_1 = CALL_METHOD_WITH_ARGS1( tmp_called_instance_7, const_str_plain_decode, &PyTuple_GET_ITEM( const_tuple_str_plain_latin1_tuple, 0 ) );

            if ( tmp_append_value_1 == NULL )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 214;
                type_description_2 = "o";
                goto try_except_handler_7;
            }
            goto condexpr_end_1;
            condexpr_false_1:;
            CHECK_OBJECT( outline_0_var_s );
            tmp_append_value_1 = outline_0_var_s;
            Py_INCREF( tmp_append_value_1 );
            condexpr_end_1:;
            assert( PyList_Check( tmp_append_list_1 ) );
            tmp_res = PyList_Append( tmp_append_list_1, tmp_append_value_1 );
            Py_DECREF( tmp_append_value_1 );
            if ( tmp_res == -1 )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 214;
                type_description_2 = "o";
                goto try_except_handler_7;
            }
        }
        if ( CONSIDER_THREADING() == false )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 214;
            type_description_2 = "o";
            goto try_except_handler_7;
        }
        goto loop_start_2;
        loop_end_2:;
        CHECK_OBJECT( tmp_listcomp_1__contraction );
        tmp_iter_arg_1 = tmp_listcomp_1__contraction;
        Py_INCREF( tmp_iter_arg_1 );
        goto try_return_handler_7;
        // tried codes exits in all cases
        NUITKA_CANNOT_GET_HERE( platform$$$function_2_libc_ver );
        return NULL;
        // Return handler code:
        try_return_handler_7:;
        CHECK_OBJECT( (PyObject *)tmp_listcomp_1__$0 );
        Py_DECREF( tmp_listcomp_1__$0 );
        tmp_listcomp_1__$0 = NULL;

        CHECK_OBJECT( (PyObject *)tmp_listcomp_1__contraction );
        Py_DECREF( tmp_listcomp_1__contraction );
        tmp_listcomp_1__contraction = NULL;

        Py_XDECREF( tmp_listcomp_1__iter_value_0 );
        tmp_listcomp_1__iter_value_0 = NULL;

        goto frame_return_exit_2;
        // Exception handler code:
        try_except_handler_7:;
        exception_keeper_type_1 = exception_type;
        exception_keeper_value_1 = exception_value;
        exception_keeper_tb_1 = exception_tb;
        exception_keeper_lineno_1 = exception_lineno;
        exception_type = NULL;
        exception_value = NULL;
        exception_tb = NULL;
        exception_lineno = 0;

        CHECK_OBJECT( (PyObject *)tmp_listcomp_1__$0 );
        Py_DECREF( tmp_listcomp_1__$0 );
        tmp_listcomp_1__$0 = NULL;

        CHECK_OBJECT( (PyObject *)tmp_listcomp_1__contraction );
        Py_DECREF( tmp_listcomp_1__contraction );
        tmp_listcomp_1__contraction = NULL;

        Py_XDECREF( tmp_listcomp_1__iter_value_0 );
        tmp_listcomp_1__iter_value_0 = NULL;

        // Re-raise.
        exception_type = exception_keeper_type_1;
        exception_value = exception_keeper_value_1;
        exception_tb = exception_keeper_tb_1;
        exception_lineno = exception_keeper_lineno_1;

        goto frame_exception_exit_2;
        // End of try:

#if 0
        RESTORE_FRAME_EXCEPTION( frame_05ca363d52dd0fa64390debf8c66097b_2 );
#endif

        // Put the previous frame back on top.
        popFrameStack();

        goto frame_no_exception_1;

        frame_return_exit_2:;
#if 0
        RESTORE_FRAME_EXCEPTION( frame_05ca363d52dd0fa64390debf8c66097b_2 );
#endif

        // Put the previous frame back on top.
        popFrameStack();

        goto try_return_handler_6;

        frame_exception_exit_2:;

#if 0
        RESTORE_FRAME_EXCEPTION( frame_05ca363d52dd0fa64390debf8c66097b_2 );
#endif

        if ( exception_tb == NULL )
        {
            exception_tb = MAKE_TRACEBACK( frame_05ca363d52dd0fa64390debf8c66097b_2, exception_lineno );
        }
        else if ( exception_tb->tb_frame != &frame_05ca363d52dd0fa64390debf8c66097b_2->m_frame )
        {
            exception_tb = ADD_TRACEBACK( exception_tb, frame_05ca363d52dd0fa64390debf8c66097b_2, exception_lineno );
        }

        // Attachs locals to frame if any.
        Nuitka_Frame_AttachLocals(
            (struct Nuitka_FrameObject *)frame_05ca363d52dd0fa64390debf8c66097b_2,
            type_description_2,
            outline_0_var_s
        );


        // Release cached frame.
        if ( frame_05ca363d52dd0fa64390debf8c66097b_2 == cache_frame_05ca363d52dd0fa64390debf8c66097b_2 )
        {
            Py_DECREF( frame_05ca363d52dd0fa64390debf8c66097b_2 );
        }
        cache_frame_05ca363d52dd0fa64390debf8c66097b_2 = NULL;

        assertFrameObject( frame_05ca363d52dd0fa64390debf8c66097b_2 );

        // Put the previous frame back on top.
        popFrameStack();

        // Return the error.
        goto nested_frame_exit_1;

        frame_no_exception_1:;
        goto skip_nested_handling_1;
        nested_frame_exit_1:;
        type_description_1 = "oooooooooooooooo";
        goto try_except_handler_6;
        skip_nested_handling_1:;
        // tried codes exits in all cases
        NUITKA_CANNOT_GET_HERE( platform$$$function_2_libc_ver );
        return NULL;
        // Return handler code:
        try_return_handler_6:;
        Py_XDECREF( outline_0_var_s );
        outline_0_var_s = NULL;

        goto outline_result_1;
        // Exception handler code:
        try_except_handler_6:;
        exception_keeper_type_2 = exception_type;
        exception_keeper_value_2 = exception_value;
        exception_keeper_tb_2 = exception_tb;
        exception_keeper_lineno_2 = exception_lineno;
        exception_type = NULL;
        exception_value = NULL;
        exception_tb = NULL;
        exception_lineno = 0;

        Py_XDECREF( outline_0_var_s );
        outline_0_var_s = NULL;

        // Re-raise.
        exception_type = exception_keeper_type_2;
        exception_value = exception_keeper_value_2;
        exception_tb = exception_keeper_tb_2;
        exception_lineno = exception_keeper_lineno_2;

        goto outline_exception_1;
        // End of try:
        // Return statement must have exited already.
        NUITKA_CANNOT_GET_HERE( platform$$$function_2_libc_ver );
        return NULL;
        outline_exception_1:;
        exception_lineno = 214;
        goto try_except_handler_5;
        outline_result_1:;
        tmp_assign_source_15 = MAKE_UNPACK_ITERATOR( tmp_iter_arg_1 );
        Py_DECREF( tmp_iter_arg_1 );
        if ( tmp_assign_source_15 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 213;
            type_description_1 = "oooooooooooooooo";
            goto try_except_handler_5;
        }
        {
            PyObject *old = tmp_tuple_unpack_1__source_iter;
            tmp_tuple_unpack_1__source_iter = tmp_assign_source_15;
            Py_XDECREF( old );
        }

    }
    // Tried code:
    {
        PyObject *tmp_assign_source_20;
        PyObject *tmp_unpack_1;
        CHECK_OBJECT( tmp_tuple_unpack_1__source_iter );
        tmp_unpack_1 = tmp_tuple_unpack_1__source_iter;
        tmp_assign_source_20 = UNPACK_NEXT( tmp_unpack_1, 0, 6 );
        if ( tmp_assign_source_20 == NULL )
        {
            if ( !ERROR_OCCURRED() )
            {
                exception_type = PyExc_StopIteration;
                Py_INCREF( exception_type );
                exception_value = NULL;
                exception_tb = NULL;
            }
            else
            {
                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
            }


            type_description_1 = "oooooooooooooooo";
            exception_lineno = 213;
            goto try_except_handler_8;
        }
        {
            PyObject *old = tmp_tuple_unpack_1__element_1;
            tmp_tuple_unpack_1__element_1 = tmp_assign_source_20;
            Py_XDECREF( old );
        }

    }
    {
        PyObject *tmp_assign_source_21;
        PyObject *tmp_unpack_2;
        CHECK_OBJECT( tmp_tuple_unpack_1__source_iter );
        tmp_unpack_2 = tmp_tuple_unpack_1__source_iter;
        tmp_assign_source_21 = UNPACK_NEXT( tmp_unpack_2, 1, 6 );
        if ( tmp_assign_source_21 == NULL )
        {
            if ( !ERROR_OCCURRED() )
            {
                exception_type = PyExc_StopIteration;
                Py_INCREF( exception_type );
                exception_value = NULL;
                exception_tb = NULL;
            }
            else
            {
                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
            }


            type_description_1 = "oooooooooooooooo";
            exception_lineno = 213;
            goto try_except_handler_8;
        }
        {
            PyObject *old = tmp_tuple_unpack_1__element_2;
            tmp_tuple_unpack_1__element_2 = tmp_assign_source_21;
            Py_XDECREF( old );
        }

    }
    {
        PyObject *tmp_assign_source_22;
        PyObject *tmp_unpack_3;
        CHECK_OBJECT( tmp_tuple_unpack_1__source_iter );
        tmp_unpack_3 = tmp_tuple_unpack_1__source_iter;
        tmp_assign_source_22 = UNPACK_NEXT( tmp_unpack_3, 2, 6 );
        if ( tmp_assign_source_22 == NULL )
        {
            if ( !ERROR_OCCURRED() )
            {
                exception_type = PyExc_StopIteration;
                Py_INCREF( exception_type );
                exception_value = NULL;
                exception_tb = NULL;
            }
            else
            {
                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
            }


            type_description_1 = "oooooooooooooooo";
            exception_lineno = 213;
            goto try_except_handler_8;
        }
        {
            PyObject *old = tmp_tuple_unpack_1__element_3;
            tmp_tuple_unpack_1__element_3 = tmp_assign_source_22;
            Py_XDECREF( old );
        }

    }
    {
        PyObject *tmp_assign_source_23;
        PyObject *tmp_unpack_4;
        CHECK_OBJECT( tmp_tuple_unpack_1__source_iter );
        tmp_unpack_4 = tmp_tuple_unpack_1__source_iter;
        tmp_assign_source_23 = UNPACK_NEXT( tmp_unpack_4, 3, 6 );
        if ( tmp_assign_source_23 == NULL )
        {
            if ( !ERROR_OCCURRED() )
            {
                exception_type = PyExc_StopIteration;
                Py_INCREF( exception_type );
                exception_value = NULL;
                exception_tb = NULL;
            }
            else
            {
                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
            }


            type_description_1 = "oooooooooooooooo";
            exception_lineno = 213;
            goto try_except_handler_8;
        }
        {
            PyObject *old = tmp_tuple_unpack_1__element_4;
            tmp_tuple_unpack_1__element_4 = tmp_assign_source_23;
            Py_XDECREF( old );
        }

    }
    {
        PyObject *tmp_assign_source_24;
        PyObject *tmp_unpack_5;
        CHECK_OBJECT( tmp_tuple_unpack_1__source_iter );
        tmp_unpack_5 = tmp_tuple_unpack_1__source_iter;
        tmp_assign_source_24 = UNPACK_NEXT( tmp_unpack_5, 4, 6 );
        if ( tmp_assign_source_24 == NULL )
        {
            if ( !ERROR_OCCURRED() )
            {
                exception_type = PyExc_StopIteration;
                Py_INCREF( exception_type );
                exception_value = NULL;
                exception_tb = NULL;
            }
            else
            {
                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
            }


            type_description_1 = "oooooooooooooooo";
            exception_lineno = 213;
            goto try_except_handler_8;
        }
        {
            PyObject *old = tmp_tuple_unpack_1__element_5;
            tmp_tuple_unpack_1__element_5 = tmp_assign_source_24;
            Py_XDECREF( old );
        }

    }
    {
        PyObject *tmp_assign_source_25;
        PyObject *tmp_unpack_6;
        CHECK_OBJECT( tmp_tuple_unpack_1__source_iter );
        tmp_unpack_6 = tmp_tuple_unpack_1__source_iter;
        tmp_assign_source_25 = UNPACK_NEXT( tmp_unpack_6, 5, 6 );
        if ( tmp_assign_source_25 == NULL )
        {
            if ( !ERROR_OCCURRED() )
            {
                exception_type = PyExc_StopIteration;
                Py_INCREF( exception_type );
                exception_value = NULL;
                exception_tb = NULL;
            }
            else
            {
                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
            }


            type_description_1 = "oooooooooooooooo";
            exception_lineno = 213;
            goto try_except_handler_8;
        }
        {
            PyObject *old = tmp_tuple_unpack_1__element_6;
            tmp_tuple_unpack_1__element_6 = tmp_assign_source_25;
            Py_XDECREF( old );
        }

    }
    {
        PyObject *tmp_iterator_name_1;
        CHECK_OBJECT( tmp_tuple_unpack_1__source_iter );
        tmp_iterator_name_1 = tmp_tuple_unpack_1__source_iter;
        // Check if iterator has left-over elements.
        CHECK_OBJECT( tmp_iterator_name_1 ); assert( HAS_ITERNEXT( tmp_iterator_name_1 ) );

        tmp_iterator_attempt = (*Py_TYPE( tmp_iterator_name_1 )->tp_iternext)( tmp_iterator_name_1 );

        if (likely( tmp_iterator_attempt == NULL ))
        {
            PyObject *error = GET_ERROR_OCCURRED();

            if ( error != NULL )
            {
                if ( EXCEPTION_MATCH_BOOL_SINGLE( error, PyExc_StopIteration ))
                {
                    CLEAR_ERROR_OCCURRED();
                }
                else
                {
                    FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );

                    type_description_1 = "oooooooooooooooo";
                    exception_lineno = 213;
                    goto try_except_handler_8;
                }
            }
        }
        else
        {
            Py_DECREF( tmp_iterator_attempt );

            // TODO: Could avoid PyErr_Format.
#if PYTHON_VERSION < 300
            PyErr_Format( PyExc_ValueError, "too many values to unpack" );
#else
            PyErr_Format( PyExc_ValueError, "too many values to unpack (expected 6)" );
#endif
            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );

            type_description_1 = "oooooooooooooooo";
            exception_lineno = 213;
            goto try_except_handler_8;
        }
    }
    goto try_end_1;
    // Exception handler code:
    try_except_handler_8:;
    exception_keeper_type_3 = exception_type;
    exception_keeper_value_3 = exception_value;
    exception_keeper_tb_3 = exception_tb;
    exception_keeper_lineno_3 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    CHECK_OBJECT( (PyObject *)tmp_tuple_unpack_1__source_iter );
    Py_DECREF( tmp_tuple_unpack_1__source_iter );
    tmp_tuple_unpack_1__source_iter = NULL;

    // Re-raise.
    exception_type = exception_keeper_type_3;
    exception_value = exception_keeper_value_3;
    exception_tb = exception_keeper_tb_3;
    exception_lineno = exception_keeper_lineno_3;

    goto try_except_handler_5;
    // End of try:
    try_end_1:;
    goto try_end_2;
    // Exception handler code:
    try_except_handler_5:;
    exception_keeper_type_4 = exception_type;
    exception_keeper_value_4 = exception_value;
    exception_keeper_tb_4 = exception_tb;
    exception_keeper_lineno_4 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    Py_XDECREF( tmp_tuple_unpack_1__element_1 );
    tmp_tuple_unpack_1__element_1 = NULL;

    Py_XDECREF( tmp_tuple_unpack_1__element_2 );
    tmp_tuple_unpack_1__element_2 = NULL;

    Py_XDECREF( tmp_tuple_unpack_1__element_3 );
    tmp_tuple_unpack_1__element_3 = NULL;

    Py_XDECREF( tmp_tuple_unpack_1__element_4 );
    tmp_tuple_unpack_1__element_4 = NULL;

    Py_XDECREF( tmp_tuple_unpack_1__element_5 );
    tmp_tuple_unpack_1__element_5 = NULL;

    Py_XDECREF( tmp_tuple_unpack_1__element_6 );
    tmp_tuple_unpack_1__element_6 = NULL;

    // Re-raise.
    exception_type = exception_keeper_type_4;
    exception_value = exception_keeper_value_4;
    exception_tb = exception_keeper_tb_4;
    exception_lineno = exception_keeper_lineno_4;

    goto try_except_handler_4;
    // End of try:
    try_end_2:;
    CHECK_OBJECT( (PyObject *)tmp_tuple_unpack_1__source_iter );
    Py_DECREF( tmp_tuple_unpack_1__source_iter );
    tmp_tuple_unpack_1__source_iter = NULL;

    {
        PyObject *tmp_assign_source_26;
        CHECK_OBJECT( tmp_tuple_unpack_1__element_1 );
        tmp_assign_source_26 = tmp_tuple_unpack_1__element_1;
        {
            PyObject *old = var_libcinit;
            var_libcinit = tmp_assign_source_26;
            Py_INCREF( var_libcinit );
            Py_XDECREF( old );
        }

    }
    Py_XDECREF( tmp_tuple_unpack_1__element_1 );
    tmp_tuple_unpack_1__element_1 = NULL;

    {
        PyObject *tmp_assign_source_27;
        CHECK_OBJECT( tmp_tuple_unpack_1__element_2 );
        tmp_assign_source_27 = tmp_tuple_unpack_1__element_2;
        {
            PyObject *old = var_glibc;
            var_glibc = tmp_assign_source_27;
            Py_INCREF( var_glibc );
            Py_XDECREF( old );
        }

    }
    Py_XDECREF( tmp_tuple_unpack_1__element_2 );
    tmp_tuple_unpack_1__element_2 = NULL;

    {
        PyObject *tmp_assign_source_28;
        CHECK_OBJECT( tmp_tuple_unpack_1__element_3 );
        tmp_assign_source_28 = tmp_tuple_unpack_1__element_3;
        {
            PyObject *old = var_glibcversion;
            var_glibcversion = tmp_assign_source_28;
            Py_INCREF( var_glibcversion );
            Py_XDECREF( old );
        }

    }
    Py_XDECREF( tmp_tuple_unpack_1__element_3 );
    tmp_tuple_unpack_1__element_3 = NULL;

    {
        PyObject *tmp_assign_source_29;
        CHECK_OBJECT( tmp_tuple_unpack_1__element_4 );
        tmp_assign_source_29 = tmp_tuple_unpack_1__element_4;
        {
            PyObject *old = var_so;
            var_so = tmp_assign_source_29;
            Py_INCREF( var_so );
            Py_XDECREF( old );
        }

    }
    Py_XDECREF( tmp_tuple_unpack_1__element_4 );
    tmp_tuple_unpack_1__element_4 = NULL;

    {
        PyObject *tmp_assign_source_30;
        CHECK_OBJECT( tmp_tuple_unpack_1__element_5 );
        tmp_assign_source_30 = tmp_tuple_unpack_1__element_5;
        {
            PyObject *old = var_threads;
            var_threads = tmp_assign_source_30;
            Py_INCREF( var_threads );
            Py_XDECREF( old );
        }

    }
    Py_XDECREF( tmp_tuple_unpack_1__element_5 );
    tmp_tuple_unpack_1__element_5 = NULL;

    {
        PyObject *tmp_assign_source_31;
        CHECK_OBJECT( tmp_tuple_unpack_1__element_6 );
        tmp_assign_source_31 = tmp_tuple_unpack_1__element_6;
        {
            PyObject *old = var_soversion;
            var_soversion = tmp_assign_source_31;
            Py_INCREF( var_soversion );
            Py_XDECREF( old );
        }

    }
    Py_XDECREF( tmp_tuple_unpack_1__element_6 );
    tmp_tuple_unpack_1__element_6 = NULL;

    {
        nuitka_bool tmp_condition_result_8;
        int tmp_and_left_truth_1;
        nuitka_bool tmp_and_left_value_1;
        nuitka_bool tmp_and_right_value_1;
        int tmp_truth_name_2;
        PyObject *tmp_operand_name_4;
        CHECK_OBJECT( var_libcinit );
        tmp_truth_name_2 = CHECK_IF_TRUE( var_libcinit );
        if ( tmp_truth_name_2 == -1 )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 216;
            type_description_1 = "oooooooooooooooo";
            goto try_except_handler_4;
        }
        tmp_and_left_value_1 = tmp_truth_name_2 == 1 ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
        tmp_and_left_truth_1 = tmp_and_left_value_1 == NUITKA_BOOL_TRUE ? 1 : 0;
        if ( tmp_and_left_truth_1 == 1 )
        {
            goto and_right_1;
        }
        else
        {
            goto and_left_1;
        }
        and_right_1:;
        if ( par_lib == NULL )
        {

            exception_type = PyExc_UnboundLocalError;
            Py_INCREF( exception_type );
            exception_value = PyUnicode_FromFormat( "local variable '%s' referenced before assignment", "lib" );
            exception_tb = NULL;
            NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
            CHAIN_EXCEPTION( exception_value );

            exception_lineno = 216;
            type_description_1 = "oooooooooooooooo";
            goto try_except_handler_4;
        }

        tmp_operand_name_4 = par_lib;
        tmp_res = CHECK_IF_TRUE( tmp_operand_name_4 );
        if ( tmp_res == -1 )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 216;
            type_description_1 = "oooooooooooooooo";
            goto try_except_handler_4;
        }
        tmp_and_right_value_1 = ( tmp_res == 0 ) ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
        tmp_condition_result_8 = tmp_and_right_value_1;
        goto and_end_1;
        and_left_1:;
        tmp_condition_result_8 = tmp_and_left_value_1;
        and_end_1:;
        if ( tmp_condition_result_8 == NUITKA_BOOL_TRUE )
        {
            goto branch_yes_7;
        }
        else
        {
            goto branch_no_7;
        }
        branch_yes_7:;
        {
            PyObject *tmp_assign_source_32;
            tmp_assign_source_32 = const_str_plain_libc;
            {
                PyObject *old = par_lib;
                par_lib = tmp_assign_source_32;
                Py_INCREF( par_lib );
                Py_XDECREF( old );
            }

        }
        goto branch_end_7;
        branch_no_7:;
        {
            nuitka_bool tmp_condition_result_9;
            int tmp_truth_name_3;
            CHECK_OBJECT( var_glibc );
            tmp_truth_name_3 = CHECK_IF_TRUE( var_glibc );
            if ( tmp_truth_name_3 == -1 )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 218;
                type_description_1 = "oooooooooooooooo";
                goto try_except_handler_4;
            }
            tmp_condition_result_9 = tmp_truth_name_3 == 1 ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
            if ( tmp_condition_result_9 == NUITKA_BOOL_TRUE )
            {
                goto branch_yes_8;
            }
            else
            {
                goto branch_no_8;
            }
            branch_yes_8:;
            {
                nuitka_bool tmp_condition_result_10;
                PyObject *tmp_compexpr_left_6;
                PyObject *tmp_compexpr_right_6;
                if ( par_lib == NULL )
                {

                    exception_type = PyExc_UnboundLocalError;
                    Py_INCREF( exception_type );
                    exception_value = PyUnicode_FromFormat( "local variable '%s' referenced before assignment", "lib" );
                    exception_tb = NULL;
                    NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
                    CHAIN_EXCEPTION( exception_value );

                    exception_lineno = 219;
                    type_description_1 = "oooooooooooooooo";
                    goto try_except_handler_4;
                }

                tmp_compexpr_left_6 = par_lib;
                tmp_compexpr_right_6 = const_str_plain_glibc;
                tmp_res = RICH_COMPARE_BOOL_NOTEQ_OBJECT_OBJECT( tmp_compexpr_left_6, tmp_compexpr_right_6 );
                if ( tmp_res == -1 )
                {
                    assert( ERROR_OCCURRED() );

                    FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                    exception_lineno = 219;
                    type_description_1 = "oooooooooooooooo";
                    goto try_except_handler_4;
                }
                tmp_condition_result_10 = ( tmp_res != 0 ) ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
                if ( tmp_condition_result_10 == NUITKA_BOOL_TRUE )
                {
                    goto branch_yes_9;
                }
                else
                {
                    goto branch_no_9;
                }
                branch_yes_9:;
                {
                    PyObject *tmp_assign_source_33;
                    tmp_assign_source_33 = const_str_plain_glibc;
                    {
                        PyObject *old = par_lib;
                        par_lib = tmp_assign_source_33;
                        Py_INCREF( par_lib );
                        Py_XDECREF( old );
                    }

                }
                {
                    PyObject *tmp_assign_source_34;
                    CHECK_OBJECT( var_glibcversion );
                    tmp_assign_source_34 = var_glibcversion;
                    {
                        PyObject *old = par_version;
                        par_version = tmp_assign_source_34;
                        Py_INCREF( par_version );
                        Py_XDECREF( old );
                    }

                }
                goto branch_end_9;
                branch_no_9:;
                {
                    nuitka_bool tmp_condition_result_11;
                    PyObject *tmp_compexpr_left_7;
                    PyObject *tmp_compexpr_right_7;
                    PyObject *tmp_called_name_3;
                    PyObject *tmp_args_element_name_8;
                    PyObject *tmp_called_name_4;
                    PyObject *tmp_args_element_name_9;
                    CHECK_OBJECT( var_V );
                    tmp_called_name_3 = var_V;
                    CHECK_OBJECT( var_glibcversion );
                    tmp_args_element_name_8 = var_glibcversion;
                    frame_41546e987a6804e4e850d6206ee8cd01->m_frame.f_lineno = 222;
                    {
                        PyObject *call_args[] = { tmp_args_element_name_8 };
                        tmp_compexpr_left_7 = CALL_FUNCTION_WITH_ARGS1( tmp_called_name_3, call_args );
                    }

                    if ( tmp_compexpr_left_7 == NULL )
                    {
                        assert( ERROR_OCCURRED() );

                        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                        exception_lineno = 222;
                        type_description_1 = "oooooooooooooooo";
                        goto try_except_handler_4;
                    }
                    CHECK_OBJECT( var_V );
                    tmp_called_name_4 = var_V;
                    if ( par_version == NULL )
                    {
                        Py_DECREF( tmp_compexpr_left_7 );
                        exception_type = PyExc_UnboundLocalError;
                        Py_INCREF( exception_type );
                        exception_value = PyUnicode_FromFormat( "local variable '%s' referenced before assignment", "version" );
                        exception_tb = NULL;
                        NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
                        CHAIN_EXCEPTION( exception_value );

                        exception_lineno = 222;
                        type_description_1 = "oooooooooooooooo";
                        goto try_except_handler_4;
                    }

                    tmp_args_element_name_9 = par_version;
                    frame_41546e987a6804e4e850d6206ee8cd01->m_frame.f_lineno = 222;
                    {
                        PyObject *call_args[] = { tmp_args_element_name_9 };
                        tmp_compexpr_right_7 = CALL_FUNCTION_WITH_ARGS1( tmp_called_name_4, call_args );
                    }

                    if ( tmp_compexpr_right_7 == NULL )
                    {
                        assert( ERROR_OCCURRED() );

                        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
                        Py_DECREF( tmp_compexpr_left_7 );

                        exception_lineno = 222;
                        type_description_1 = "oooooooooooooooo";
                        goto try_except_handler_4;
                    }
                    tmp_res = RICH_COMPARE_BOOL_GT_OBJECT_OBJECT( tmp_compexpr_left_7, tmp_compexpr_right_7 );
                    Py_DECREF( tmp_compexpr_left_7 );
                    Py_DECREF( tmp_compexpr_right_7 );
                    if ( tmp_res == -1 )
                    {
                        assert( ERROR_OCCURRED() );

                        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                        exception_lineno = 222;
                        type_description_1 = "oooooooooooooooo";
                        goto try_except_handler_4;
                    }
                    tmp_condition_result_11 = ( tmp_res != 0 ) ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
                    if ( tmp_condition_result_11 == NUITKA_BOOL_TRUE )
                    {
                        goto branch_yes_10;
                    }
                    else
                    {
                        goto branch_no_10;
                    }
                    branch_yes_10:;
                    {
                        PyObject *tmp_assign_source_35;
                        CHECK_OBJECT( var_glibcversion );
                        tmp_assign_source_35 = var_glibcversion;
                        {
                            PyObject *old = par_version;
                            par_version = tmp_assign_source_35;
                            Py_INCREF( par_version );
                            Py_XDECREF( old );
                        }

                    }
                    branch_no_10:;
                }
                branch_end_9:;
            }
            goto branch_end_8;
            branch_no_8:;
            {
                nuitka_bool tmp_condition_result_12;
                int tmp_truth_name_4;
                CHECK_OBJECT( var_so );
                tmp_truth_name_4 = CHECK_IF_TRUE( var_so );
                if ( tmp_truth_name_4 == -1 )
                {
                    assert( ERROR_OCCURRED() );

                    FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                    exception_lineno = 224;
                    type_description_1 = "oooooooooooooooo";
                    goto try_except_handler_4;
                }
                tmp_condition_result_12 = tmp_truth_name_4 == 1 ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
                if ( tmp_condition_result_12 == NUITKA_BOOL_TRUE )
                {
                    goto branch_yes_11;
                }
                else
                {
                    goto branch_no_11;
                }
                branch_yes_11:;
                {
                    nuitka_bool tmp_condition_result_13;
                    PyObject *tmp_compexpr_left_8;
                    PyObject *tmp_compexpr_right_8;
                    if ( par_lib == NULL )
                    {

                        exception_type = PyExc_UnboundLocalError;
                        Py_INCREF( exception_type );
                        exception_value = PyUnicode_FromFormat( "local variable '%s' referenced before assignment", "lib" );
                        exception_tb = NULL;
                        NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
                        CHAIN_EXCEPTION( exception_value );

                        exception_lineno = 225;
                        type_description_1 = "oooooooooooooooo";
                        goto try_except_handler_4;
                    }

                    tmp_compexpr_left_8 = par_lib;
                    tmp_compexpr_right_8 = const_str_plain_glibc;
                    tmp_res = RICH_COMPARE_BOOL_NOTEQ_OBJECT_OBJECT( tmp_compexpr_left_8, tmp_compexpr_right_8 );
                    if ( tmp_res == -1 )
                    {
                        assert( ERROR_OCCURRED() );

                        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                        exception_lineno = 225;
                        type_description_1 = "oooooooooooooooo";
                        goto try_except_handler_4;
                    }
                    tmp_condition_result_13 = ( tmp_res != 0 ) ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
                    if ( tmp_condition_result_13 == NUITKA_BOOL_TRUE )
                    {
                        goto branch_yes_12;
                    }
                    else
                    {
                        goto branch_no_12;
                    }
                    branch_yes_12:;
                    {
                        PyObject *tmp_assign_source_36;
                        tmp_assign_source_36 = const_str_plain_libc;
                        {
                            PyObject *old = par_lib;
                            par_lib = tmp_assign_source_36;
                            Py_INCREF( par_lib );
                            Py_XDECREF( old );
                        }

                    }
                    {
                        nuitka_bool tmp_condition_result_14;
                        int tmp_and_left_truth_2;
                        nuitka_bool tmp_and_left_value_2;
                        nuitka_bool tmp_and_right_value_2;
                        int tmp_truth_name_5;
                        int tmp_or_left_truth_3;
                        nuitka_bool tmp_or_left_value_3;
                        nuitka_bool tmp_or_right_value_3;
                        PyObject *tmp_operand_name_5;
                        PyObject *tmp_compexpr_left_9;
                        PyObject *tmp_compexpr_right_9;
                        PyObject *tmp_called_name_5;
                        PyObject *tmp_args_element_name_10;
                        PyObject *tmp_called_name_6;
                        PyObject *tmp_args_element_name_11;
                        CHECK_OBJECT( var_soversion );
                        tmp_truth_name_5 = CHECK_IF_TRUE( var_soversion );
                        if ( tmp_truth_name_5 == -1 )
                        {
                            assert( ERROR_OCCURRED() );

                            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                            exception_lineno = 227;
                            type_description_1 = "oooooooooooooooo";
                            goto try_except_handler_4;
                        }
                        tmp_and_left_value_2 = tmp_truth_name_5 == 1 ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
                        tmp_and_left_truth_2 = tmp_and_left_value_2 == NUITKA_BOOL_TRUE ? 1 : 0;
                        if ( tmp_and_left_truth_2 == 1 )
                        {
                            goto and_right_2;
                        }
                        else
                        {
                            goto and_left_2;
                        }
                        and_right_2:;
                        if ( par_version == NULL )
                        {

                            exception_type = PyExc_UnboundLocalError;
                            Py_INCREF( exception_type );
                            exception_value = PyUnicode_FromFormat( "local variable '%s' referenced before assignment", "version" );
                            exception_tb = NULL;
                            NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
                            CHAIN_EXCEPTION( exception_value );

                            exception_lineno = 227;
                            type_description_1 = "oooooooooooooooo";
                            goto try_except_handler_4;
                        }

                        tmp_operand_name_5 = par_version;
                        tmp_res = CHECK_IF_TRUE( tmp_operand_name_5 );
                        if ( tmp_res == -1 )
                        {
                            assert( ERROR_OCCURRED() );

                            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                            exception_lineno = 227;
                            type_description_1 = "oooooooooooooooo";
                            goto try_except_handler_4;
                        }
                        tmp_or_left_value_3 = ( tmp_res == 0 ) ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
                        tmp_or_left_truth_3 = tmp_or_left_value_3 == NUITKA_BOOL_TRUE ? 1 : 0;
                        if ( tmp_or_left_truth_3 == 1 )
                        {
                            goto or_left_3;
                        }
                        else
                        {
                            goto or_right_3;
                        }
                        or_right_3:;
                        CHECK_OBJECT( var_V );
                        tmp_called_name_5 = var_V;
                        CHECK_OBJECT( var_soversion );
                        tmp_args_element_name_10 = var_soversion;
                        frame_41546e987a6804e4e850d6206ee8cd01->m_frame.f_lineno = 227;
                        {
                            PyObject *call_args[] = { tmp_args_element_name_10 };
                            tmp_compexpr_left_9 = CALL_FUNCTION_WITH_ARGS1( tmp_called_name_5, call_args );
                        }

                        if ( tmp_compexpr_left_9 == NULL )
                        {
                            assert( ERROR_OCCURRED() );

                            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                            exception_lineno = 227;
                            type_description_1 = "oooooooooooooooo";
                            goto try_except_handler_4;
                        }
                        CHECK_OBJECT( var_V );
                        tmp_called_name_6 = var_V;
                        if ( par_version == NULL )
                        {
                            Py_DECREF( tmp_compexpr_left_9 );
                            exception_type = PyExc_UnboundLocalError;
                            Py_INCREF( exception_type );
                            exception_value = PyUnicode_FromFormat( "local variable '%s' referenced before assignment", "version" );
                            exception_tb = NULL;
                            NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
                            CHAIN_EXCEPTION( exception_value );

                            exception_lineno = 227;
                            type_description_1 = "oooooooooooooooo";
                            goto try_except_handler_4;
                        }

                        tmp_args_element_name_11 = par_version;
                        frame_41546e987a6804e4e850d6206ee8cd01->m_frame.f_lineno = 227;
                        {
                            PyObject *call_args[] = { tmp_args_element_name_11 };
                            tmp_compexpr_right_9 = CALL_FUNCTION_WITH_ARGS1( tmp_called_name_6, call_args );
                        }

                        if ( tmp_compexpr_right_9 == NULL )
                        {
                            assert( ERROR_OCCURRED() );

                            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
                            Py_DECREF( tmp_compexpr_left_9 );

                            exception_lineno = 227;
                            type_description_1 = "oooooooooooooooo";
                            goto try_except_handler_4;
                        }
                        tmp_res = RICH_COMPARE_BOOL_GT_OBJECT_OBJECT( tmp_compexpr_left_9, tmp_compexpr_right_9 );
                        Py_DECREF( tmp_compexpr_left_9 );
                        Py_DECREF( tmp_compexpr_right_9 );
                        if ( tmp_res == -1 )
                        {
                            assert( ERROR_OCCURRED() );

                            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                            exception_lineno = 227;
                            type_description_1 = "oooooooooooooooo";
                            goto try_except_handler_4;
                        }
                        tmp_or_right_value_3 = ( tmp_res != 0 ) ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
                        tmp_and_right_value_2 = tmp_or_right_value_3;
                        goto or_end_3;
                        or_left_3:;
                        tmp_and_right_value_2 = tmp_or_left_value_3;
                        or_end_3:;
                        tmp_condition_result_14 = tmp_and_right_value_2;
                        goto and_end_2;
                        and_left_2:;
                        tmp_condition_result_14 = tmp_and_left_value_2;
                        and_end_2:;
                        if ( tmp_condition_result_14 == NUITKA_BOOL_TRUE )
                        {
                            goto branch_yes_13;
                        }
                        else
                        {
                            goto branch_no_13;
                        }
                        branch_yes_13:;
                        {
                            PyObject *tmp_assign_source_37;
                            CHECK_OBJECT( var_soversion );
                            tmp_assign_source_37 = var_soversion;
                            {
                                PyObject *old = par_version;
                                par_version = tmp_assign_source_37;
                                Py_INCREF( par_version );
                                Py_XDECREF( old );
                            }

                        }
                        branch_no_13:;
                    }
                    {
                        nuitka_bool tmp_condition_result_15;
                        int tmp_and_left_truth_3;
                        nuitka_bool tmp_and_left_value_3;
                        nuitka_bool tmp_and_right_value_3;
                        int tmp_truth_name_6;
                        PyObject *tmp_compexpr_left_10;
                        PyObject *tmp_compexpr_right_10;
                        PyObject *tmp_subscribed_name_2;
                        PyObject *tmp_subscript_name_2;
                        PyObject *tmp_start_name_2;
                        PyObject *tmp_operand_name_6;
                        PyObject *tmp_len_arg_4;
                        PyObject *tmp_stop_name_2;
                        PyObject *tmp_step_name_2;
                        CHECK_OBJECT( var_threads );
                        tmp_truth_name_6 = CHECK_IF_TRUE( var_threads );
                        if ( tmp_truth_name_6 == -1 )
                        {
                            assert( ERROR_OCCURRED() );

                            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                            exception_lineno = 229;
                            type_description_1 = "oooooooooooooooo";
                            goto try_except_handler_4;
                        }
                        tmp_and_left_value_3 = tmp_truth_name_6 == 1 ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
                        tmp_and_left_truth_3 = tmp_and_left_value_3 == NUITKA_BOOL_TRUE ? 1 : 0;
                        if ( tmp_and_left_truth_3 == 1 )
                        {
                            goto and_right_3;
                        }
                        else
                        {
                            goto and_left_3;
                        }
                        and_right_3:;
                        if ( par_version == NULL )
                        {

                            exception_type = PyExc_UnboundLocalError;
                            Py_INCREF( exception_type );
                            exception_value = PyUnicode_FromFormat( "local variable '%s' referenced before assignment", "version" );
                            exception_tb = NULL;
                            NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
                            CHAIN_EXCEPTION( exception_value );

                            exception_lineno = 229;
                            type_description_1 = "oooooooooooooooo";
                            goto try_except_handler_4;
                        }

                        tmp_subscribed_name_2 = par_version;
                        CHECK_OBJECT( var_threads );
                        tmp_len_arg_4 = var_threads;
                        tmp_operand_name_6 = BUILTIN_LEN( tmp_len_arg_4 );
                        if ( tmp_operand_name_6 == NULL )
                        {
                            assert( ERROR_OCCURRED() );

                            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                            exception_lineno = 229;
                            type_description_1 = "oooooooooooooooo";
                            goto try_except_handler_4;
                        }
                        tmp_start_name_2 = UNARY_OPERATION( PyNumber_Negative, tmp_operand_name_6 );
                        Py_DECREF( tmp_operand_name_6 );
                        if ( tmp_start_name_2 == NULL )
                        {
                            assert( ERROR_OCCURRED() );

                            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                            exception_lineno = 229;
                            type_description_1 = "oooooooooooooooo";
                            goto try_except_handler_4;
                        }
                        tmp_stop_name_2 = Py_None;
                        tmp_step_name_2 = Py_None;
                        tmp_subscript_name_2 = MAKE_SLICEOBJ3( tmp_start_name_2, tmp_stop_name_2, tmp_step_name_2 );
                        Py_DECREF( tmp_start_name_2 );
                        assert( !(tmp_subscript_name_2 == NULL) );
                        tmp_compexpr_left_10 = LOOKUP_SUBSCRIPT( tmp_subscribed_name_2, tmp_subscript_name_2 );
                        Py_DECREF( tmp_subscript_name_2 );
                        if ( tmp_compexpr_left_10 == NULL )
                        {
                            assert( ERROR_OCCURRED() );

                            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                            exception_lineno = 229;
                            type_description_1 = "oooooooooooooooo";
                            goto try_except_handler_4;
                        }
                        CHECK_OBJECT( var_threads );
                        tmp_compexpr_right_10 = var_threads;
                        tmp_res = RICH_COMPARE_BOOL_NOTEQ_OBJECT_OBJECT( tmp_compexpr_left_10, tmp_compexpr_right_10 );
                        Py_DECREF( tmp_compexpr_left_10 );
                        if ( tmp_res == -1 )
                        {
                            assert( ERROR_OCCURRED() );

                            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                            exception_lineno = 229;
                            type_description_1 = "oooooooooooooooo";
                            goto try_except_handler_4;
                        }
                        tmp_and_right_value_3 = ( tmp_res != 0 ) ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
                        tmp_condition_result_15 = tmp_and_right_value_3;
                        goto and_end_3;
                        and_left_3:;
                        tmp_condition_result_15 = tmp_and_left_value_3;
                        and_end_3:;
                        if ( tmp_condition_result_15 == NUITKA_BOOL_TRUE )
                        {
                            goto branch_yes_14;
                        }
                        else
                        {
                            goto branch_no_14;
                        }
                        branch_yes_14:;
                        {
                            PyObject *tmp_assign_source_38;
                            PyObject *tmp_left_name_3;
                            PyObject *tmp_right_name_3;
                            if ( par_version == NULL )
                            {

                                exception_type = PyExc_UnboundLocalError;
                                Py_INCREF( exception_type );
                                exception_value = PyUnicode_FromFormat( "local variable '%s' referenced before assignment", "version" );
                                exception_tb = NULL;
                                NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
                                CHAIN_EXCEPTION( exception_value );

                                exception_lineno = 230;
                                type_description_1 = "oooooooooooooooo";
                                goto try_except_handler_4;
                            }

                            tmp_left_name_3 = par_version;
                            CHECK_OBJECT( var_threads );
                            tmp_right_name_3 = var_threads;
                            tmp_assign_source_38 = BINARY_OPERATION_ADD_OBJECT_OBJECT( tmp_left_name_3, tmp_right_name_3 );
                            if ( tmp_assign_source_38 == NULL )
                            {
                                assert( ERROR_OCCURRED() );

                                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                                exception_lineno = 230;
                                type_description_1 = "oooooooooooooooo";
                                goto try_except_handler_4;
                            }
                            {
                                PyObject *old = par_version;
                                par_version = tmp_assign_source_38;
                                Py_XDECREF( old );
                            }

                        }
                        branch_no_14:;
                    }
                    branch_no_12:;
                }
                branch_no_11:;
            }
            branch_end_8:;
        }
        branch_end_7:;
    }
    {
        PyObject *tmp_assign_source_39;
        PyObject *tmp_called_instance_8;
        CHECK_OBJECT( var_m );
        tmp_called_instance_8 = var_m;
        frame_41546e987a6804e4e850d6206ee8cd01->m_frame.f_lineno = 231;
        tmp_assign_source_39 = CALL_METHOD_NO_ARGS( tmp_called_instance_8, const_str_plain_end );
        if ( tmp_assign_source_39 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 231;
            type_description_1 = "oooooooooooooooo";
            goto try_except_handler_4;
        }
        {
            PyObject *old = var_pos;
            assert( old != NULL );
            var_pos = tmp_assign_source_39;
            Py_DECREF( old );
        }

    }
    if ( CONSIDER_THREADING() == false )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 200;
        type_description_1 = "oooooooooooooooo";
        goto try_except_handler_4;
    }
    goto loop_start_1;
    loop_end_1:;
    goto try_end_3;
    // Exception handler code:
    try_except_handler_4:;
    exception_keeper_type_5 = exception_type;
    exception_keeper_value_5 = exception_value;
    exception_keeper_tb_5 = exception_tb;
    exception_keeper_lineno_5 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    // Preserve existing published exception.
    exception_preserved_type_1 = EXC_TYPE(PyThreadState_GET());
    Py_XINCREF( exception_preserved_type_1 );
    exception_preserved_value_1 = EXC_VALUE(PyThreadState_GET());
    Py_XINCREF( exception_preserved_value_1 );
    exception_preserved_tb_1 = (PyTracebackObject *)EXC_TRACEBACK(PyThreadState_GET());
    Py_XINCREF( exception_preserved_tb_1 );

    if ( exception_keeper_tb_5 == NULL )
    {
        exception_keeper_tb_5 = MAKE_TRACEBACK( frame_41546e987a6804e4e850d6206ee8cd01, exception_keeper_lineno_5 );
    }
    else if ( exception_keeper_lineno_5 != 0 )
    {
        exception_keeper_tb_5 = ADD_TRACEBACK( exception_keeper_tb_5, frame_41546e987a6804e4e850d6206ee8cd01, exception_keeper_lineno_5 );
    }

    NORMALIZE_EXCEPTION( &exception_keeper_type_5, &exception_keeper_value_5, &exception_keeper_tb_5 );
    PyException_SetTraceback( exception_keeper_value_5, (PyObject *)exception_keeper_tb_5 );
    PUBLISH_EXCEPTION( &exception_keeper_type_5, &exception_keeper_value_5, &exception_keeper_tb_5 );
    // Tried code:
    {
        nuitka_bool tmp_condition_result_16;
        PyObject *tmp_compexpr_left_11;
        PyObject *tmp_compexpr_right_11;
        tmp_compexpr_left_11 = EXC_TYPE(PyThreadState_GET());
        tmp_compexpr_right_11 = PyExc_BaseException;
        tmp_res = EXCEPTION_MATCH_BOOL( tmp_compexpr_left_11, tmp_compexpr_right_11 );
        if ( tmp_res == -1 )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 197;
            type_description_1 = "oooooooooooooooo";
            goto try_except_handler_9;
        }
        tmp_condition_result_16 = ( tmp_res != 0 ) ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
        if ( tmp_condition_result_16 == NUITKA_BOOL_TRUE )
        {
            goto branch_yes_15;
        }
        else
        {
            goto branch_no_15;
        }
        branch_yes_15:;
        {
            nuitka_bool tmp_assign_source_40;
            tmp_assign_source_40 = NUITKA_BOOL_FALSE;
            tmp_with_1__indicator = tmp_assign_source_40;
        }
        {
            nuitka_bool tmp_condition_result_17;
            PyObject *tmp_operand_name_7;
            PyObject *tmp_called_name_7;
            PyObject *tmp_args_element_name_12;
            PyObject *tmp_args_element_name_13;
            PyObject *tmp_args_element_name_14;
            CHECK_OBJECT( tmp_with_1__exit );
            tmp_called_name_7 = tmp_with_1__exit;
            tmp_args_element_name_12 = EXC_TYPE(PyThreadState_GET());
            tmp_args_element_name_13 = EXC_VALUE(PyThreadState_GET());
            tmp_args_element_name_14 = EXC_TRACEBACK(PyThreadState_GET());
            frame_41546e987a6804e4e850d6206ee8cd01->m_frame.f_lineno = 197;
            {
                PyObject *call_args[] = { tmp_args_element_name_12, tmp_args_element_name_13, tmp_args_element_name_14 };
                tmp_operand_name_7 = CALL_FUNCTION_WITH_ARGS3( tmp_called_name_7, call_args );
            }

            if ( tmp_operand_name_7 == NULL )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 197;
                type_description_1 = "oooooooooooooooo";
                goto try_except_handler_9;
            }
            tmp_res = CHECK_IF_TRUE( tmp_operand_name_7 );
            Py_DECREF( tmp_operand_name_7 );
            if ( tmp_res == -1 )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 197;
                type_description_1 = "oooooooooooooooo";
                goto try_except_handler_9;
            }
            tmp_condition_result_17 = ( tmp_res == 0 ) ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
            if ( tmp_condition_result_17 == NUITKA_BOOL_TRUE )
            {
                goto branch_yes_16;
            }
            else
            {
                goto branch_no_16;
            }
            branch_yes_16:;
            tmp_result = RERAISE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
            if (unlikely( tmp_result == false ))
            {
                exception_lineno = 197;
            }

            if (exception_tb && exception_tb->tb_frame == &frame_41546e987a6804e4e850d6206ee8cd01->m_frame) frame_41546e987a6804e4e850d6206ee8cd01->m_frame.f_lineno = exception_tb->tb_lineno;
            type_description_1 = "oooooooooooooooo";
            goto try_except_handler_9;
            branch_no_16:;
        }
        goto branch_end_15;
        branch_no_15:;
        tmp_result = RERAISE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
        if (unlikely( tmp_result == false ))
        {
            exception_lineno = 197;
        }

        if (exception_tb && exception_tb->tb_frame == &frame_41546e987a6804e4e850d6206ee8cd01->m_frame) frame_41546e987a6804e4e850d6206ee8cd01->m_frame.f_lineno = exception_tb->tb_lineno;
        type_description_1 = "oooooooooooooooo";
        goto try_except_handler_9;
        branch_end_15:;
    }
    goto try_end_4;
    // Exception handler code:
    try_except_handler_9:;
    exception_keeper_type_6 = exception_type;
    exception_keeper_value_6 = exception_value;
    exception_keeper_tb_6 = exception_tb;
    exception_keeper_lineno_6 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    // Restore previous exception.
    SET_CURRENT_EXCEPTION( exception_preserved_type_1, exception_preserved_value_1, exception_preserved_tb_1 );
    // Re-raise.
    exception_type = exception_keeper_type_6;
    exception_value = exception_keeper_value_6;
    exception_tb = exception_keeper_tb_6;
    exception_lineno = exception_keeper_lineno_6;

    goto try_except_handler_3;
    // End of try:
    try_end_4:;
    // Restore previous exception.
    SET_CURRENT_EXCEPTION( exception_preserved_type_1, exception_preserved_value_1, exception_preserved_tb_1 );
    goto try_end_3;
    // exception handler codes exits in all cases
    NUITKA_CANNOT_GET_HERE( platform$$$function_2_libc_ver );
    return NULL;
    // End of try:
    try_end_3:;
    goto try_end_5;
    // Exception handler code:
    try_except_handler_3:;
    exception_keeper_type_7 = exception_type;
    exception_keeper_value_7 = exception_value;
    exception_keeper_tb_7 = exception_tb;
    exception_keeper_lineno_7 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    {
        nuitka_bool tmp_condition_result_18;
        nuitka_bool tmp_compexpr_left_12;
        nuitka_bool tmp_compexpr_right_12;
        assert( tmp_with_1__indicator != NUITKA_BOOL_UNASSIGNED);
        tmp_compexpr_left_12 = tmp_with_1__indicator;
        tmp_compexpr_right_12 = NUITKA_BOOL_TRUE;
        tmp_condition_result_18 = ( tmp_compexpr_left_12 == tmp_compexpr_right_12 ) ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
        if ( tmp_condition_result_18 == NUITKA_BOOL_TRUE )
        {
            goto branch_yes_17;
        }
        else
        {
            goto branch_no_17;
        }
        branch_yes_17:;
        {
            PyObject *tmp_called_name_8;
            PyObject *tmp_call_result_1;
            CHECK_OBJECT( tmp_with_1__exit );
            tmp_called_name_8 = tmp_with_1__exit;
            frame_41546e987a6804e4e850d6206ee8cd01->m_frame.f_lineno = 197;
            tmp_call_result_1 = CALL_FUNCTION_WITH_ARGS3( tmp_called_name_8, &PyTuple_GET_ITEM( const_tuple_none_none_none_tuple, 0 ) );

            if ( tmp_call_result_1 == NULL )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );

                Py_DECREF( exception_keeper_type_7 );
                Py_XDECREF( exception_keeper_value_7 );
                Py_XDECREF( exception_keeper_tb_7 );

                exception_lineno = 197;
                type_description_1 = "oooooooooooooooo";
                goto try_except_handler_2;
            }
            Py_DECREF( tmp_call_result_1 );
        }
        branch_no_17:;
    }
    // Re-raise.
    exception_type = exception_keeper_type_7;
    exception_value = exception_keeper_value_7;
    exception_tb = exception_keeper_tb_7;
    exception_lineno = exception_keeper_lineno_7;

    goto try_except_handler_2;
    // End of try:
    try_end_5:;
    {
        nuitka_bool tmp_condition_result_19;
        nuitka_bool tmp_compexpr_left_13;
        nuitka_bool tmp_compexpr_right_13;
        assert( tmp_with_1__indicator != NUITKA_BOOL_UNASSIGNED);
        tmp_compexpr_left_13 = tmp_with_1__indicator;
        tmp_compexpr_right_13 = NUITKA_BOOL_TRUE;
        tmp_condition_result_19 = ( tmp_compexpr_left_13 == tmp_compexpr_right_13 ) ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
        if ( tmp_condition_result_19 == NUITKA_BOOL_TRUE )
        {
            goto branch_yes_18;
        }
        else
        {
            goto branch_no_18;
        }
        branch_yes_18:;
        {
            PyObject *tmp_called_name_9;
            PyObject *tmp_call_result_2;
            CHECK_OBJECT( tmp_with_1__exit );
            tmp_called_name_9 = tmp_with_1__exit;
            frame_41546e987a6804e4e850d6206ee8cd01->m_frame.f_lineno = 197;
            tmp_call_result_2 = CALL_FUNCTION_WITH_ARGS3( tmp_called_name_9, &PyTuple_GET_ITEM( const_tuple_none_none_none_tuple, 0 ) );

            if ( tmp_call_result_2 == NULL )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 197;
                type_description_1 = "oooooooooooooooo";
                goto try_except_handler_2;
            }
            Py_DECREF( tmp_call_result_2 );
        }
        branch_no_18:;
    }
    goto try_end_6;
    // Exception handler code:
    try_except_handler_2:;
    exception_keeper_type_8 = exception_type;
    exception_keeper_value_8 = exception_value;
    exception_keeper_tb_8 = exception_tb;
    exception_keeper_lineno_8 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    Py_XDECREF( tmp_with_1__source );
    tmp_with_1__source = NULL;

    Py_XDECREF( tmp_with_1__enter );
    tmp_with_1__enter = NULL;

    Py_XDECREF( tmp_with_1__exit );
    tmp_with_1__exit = NULL;

    // Re-raise.
    exception_type = exception_keeper_type_8;
    exception_value = exception_keeper_value_8;
    exception_tb = exception_keeper_tb_8;
    exception_lineno = exception_keeper_lineno_8;

    goto frame_exception_exit_1;
    // End of try:
    try_end_6:;
    CHECK_OBJECT( (PyObject *)tmp_with_1__source );
    Py_DECREF( tmp_with_1__source );
    tmp_with_1__source = NULL;

    CHECK_OBJECT( (PyObject *)tmp_with_1__enter );
    Py_DECREF( tmp_with_1__enter );
    tmp_with_1__enter = NULL;

    CHECK_OBJECT( (PyObject *)tmp_with_1__exit );
    Py_DECREF( tmp_with_1__exit );
    tmp_with_1__exit = NULL;

    {
        PyObject *tmp_tuple_element_1;
        if ( par_lib == NULL )
        {

            exception_type = PyExc_UnboundLocalError;
            Py_INCREF( exception_type );
            exception_value = PyUnicode_FromFormat( "local variable '%s' referenced before assignment", "lib" );
            exception_tb = NULL;
            NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
            CHAIN_EXCEPTION( exception_value );

            exception_lineno = 232;
            type_description_1 = "oooooooooooooooo";
            goto frame_exception_exit_1;
        }

        tmp_tuple_element_1 = par_lib;
        tmp_return_value = PyTuple_New( 2 );
        Py_INCREF( tmp_tuple_element_1 );
        PyTuple_SET_ITEM( tmp_return_value, 0, tmp_tuple_element_1 );
        if ( par_version == NULL )
        {
            Py_DECREF( tmp_return_value );
            exception_type = PyExc_UnboundLocalError;
            Py_INCREF( exception_type );
            exception_value = PyUnicode_FromFormat( "local variable '%s' referenced before assignment", "version" );
            exception_tb = NULL;
            NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
            CHAIN_EXCEPTION( exception_value );

            exception_lineno = 232;
            type_description_1 = "oooooooooooooooo";
            goto frame_exception_exit_1;
        }

        tmp_tuple_element_1 = par_version;
        Py_INCREF( tmp_tuple_element_1 );
        PyTuple_SET_ITEM( tmp_return_value, 1, tmp_tuple_element_1 );
        goto frame_return_exit_1;
    }

#if 0
    RESTORE_FRAME_EXCEPTION( frame_41546e987a6804e4e850d6206ee8cd01 );
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto frame_no_exception_2;

    frame_return_exit_1:;
#if 0
    RESTORE_FRAME_EXCEPTION( frame_41546e987a6804e4e850d6206ee8cd01 );
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto try_return_handler_1;

    frame_exception_exit_1:;

#if 0
    RESTORE_FRAME_EXCEPTION( frame_41546e987a6804e4e850d6206ee8cd01 );
#endif

    if ( exception_tb == NULL )
    {
        exception_tb = MAKE_TRACEBACK( frame_41546e987a6804e4e850d6206ee8cd01, exception_lineno );
    }
    else if ( exception_tb->tb_frame != &frame_41546e987a6804e4e850d6206ee8cd01->m_frame )
    {
        exception_tb = ADD_TRACEBACK( exception_tb, frame_41546e987a6804e4e850d6206ee8cd01, exception_lineno );
    }

    // Attachs locals to frame if any.
    Nuitka_Frame_AttachLocals(
        (struct Nuitka_FrameObject *)frame_41546e987a6804e4e850d6206ee8cd01,
        type_description_1,
        par_executable,
        par_lib,
        par_version,
        par_chunksize,
        var_V,
        var_f,
        var_binary,
        var_pos,
        var_m,
        var_chunk,
        var_libcinit,
        var_glibc,
        var_glibcversion,
        var_so,
        var_threads,
        var_soversion
    );


    // Release cached frame.
    if ( frame_41546e987a6804e4e850d6206ee8cd01 == cache_frame_41546e987a6804e4e850d6206ee8cd01 )
    {
        Py_DECREF( frame_41546e987a6804e4e850d6206ee8cd01 );
    }
    cache_frame_41546e987a6804e4e850d6206ee8cd01 = NULL;

    assertFrameObject( frame_41546e987a6804e4e850d6206ee8cd01 );

    // Put the previous frame back on top.
    popFrameStack();

    // Return the error.
    goto try_except_handler_1;

    frame_no_exception_2:;
    // tried codes exits in all cases
    NUITKA_CANNOT_GET_HERE( platform$$$function_2_libc_ver );
    return NULL;
    // Return handler code:
    try_return_handler_1:;
    CHECK_OBJECT( (PyObject *)par_executable );
    Py_DECREF( par_executable );
    par_executable = NULL;

    Py_XDECREF( par_lib );
    par_lib = NULL;

    Py_XDECREF( par_version );
    par_version = NULL;

    CHECK_OBJECT( (PyObject *)par_chunksize );
    Py_DECREF( par_chunksize );
    par_chunksize = NULL;

    CHECK_OBJECT( (PyObject *)var_V );
    Py_DECREF( var_V );
    var_V = NULL;

    CHECK_OBJECT( (PyObject *)var_f );
    Py_DECREF( var_f );
    var_f = NULL;

    Py_XDECREF( var_binary );
    var_binary = NULL;

    Py_XDECREF( var_pos );
    var_pos = NULL;

    Py_XDECREF( var_m );
    var_m = NULL;

    Py_XDECREF( var_chunk );
    var_chunk = NULL;

    Py_XDECREF( var_libcinit );
    var_libcinit = NULL;

    Py_XDECREF( var_glibc );
    var_glibc = NULL;

    Py_XDECREF( var_glibcversion );
    var_glibcversion = NULL;

    Py_XDECREF( var_so );
    var_so = NULL;

    Py_XDECREF( var_threads );
    var_threads = NULL;

    Py_XDECREF( var_soversion );
    var_soversion = NULL;

    goto function_return_exit;
    // Exception handler code:
    try_except_handler_1:;
    exception_keeper_type_9 = exception_type;
    exception_keeper_value_9 = exception_value;
    exception_keeper_tb_9 = exception_tb;
    exception_keeper_lineno_9 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    Py_XDECREF( par_executable );
    par_executable = NULL;

    Py_XDECREF( par_lib );
    par_lib = NULL;

    Py_XDECREF( par_version );
    par_version = NULL;

    CHECK_OBJECT( (PyObject *)par_chunksize );
    Py_DECREF( par_chunksize );
    par_chunksize = NULL;

    Py_XDECREF( var_V );
    var_V = NULL;

    Py_XDECREF( var_f );
    var_f = NULL;

    Py_XDECREF( var_binary );
    var_binary = NULL;

    Py_XDECREF( var_pos );
    var_pos = NULL;

    Py_XDECREF( var_m );
    var_m = NULL;

    Py_XDECREF( var_chunk );
    var_chunk = NULL;

    Py_XDECREF( var_libcinit );
    var_libcinit = NULL;

    Py_XDECREF( var_glibc );
    var_glibc = NULL;

    Py_XDECREF( var_glibcversion );
    var_glibcversion = NULL;

    Py_XDECREF( var_so );
    var_so = NULL;

    Py_XDECREF( var_threads );
    var_threads = NULL;

    Py_XDECREF( var_soversion );
    var_soversion = NULL;

    // Re-raise.
    exception_type = exception_keeper_type_9;
    exception_value = exception_keeper_value_9;
    exception_tb = exception_keeper_tb_9;
    exception_lineno = exception_keeper_lineno_9;

    goto function_exception_exit;
    // End of try:

    // Return statement must have exited already.
    NUITKA_CANNOT_GET_HERE( platform$$$function_2_libc_ver );
    return NULL;

function_exception_exit:
    assert( exception_type );
    RESTORE_ERROR_OCCURRED( exception_type, exception_value, exception_tb );

    return NULL;

function_return_exit:
   // Function cleanup code if any.


   // Actual function exit with return value, making sure we did not make
   // the error status worse despite non-NULL return.
   CHECK_OBJECT( tmp_return_value );
   assert( had_error || !ERROR_OCCURRED() );
   return tmp_return_value;
}


static PyObject *impl_platform$$$function_3__dist_try_harder( struct Nuitka_FunctionObject const *self, PyObject **python_pars )
{
    // Preserve error status for checks
#ifndef __NUITKA_NO_ASSERT__
    NUITKA_MAY_BE_UNUSED bool had_error = ERROR_OCCURRED();
#endif

    // Local variable declarations.
    PyObject *par_distname = python_pars[ 0 ];
    PyObject *par_version = python_pars[ 1 ];
    PyObject *par_id = python_pars[ 2 ];
    PyObject *var_f = NULL;
    PyObject *var_line = NULL;
    PyObject *var_tv = NULL;
    PyObject *var_tag = NULL;
    PyObject *var_value = NULL;
    PyObject *var_values = NULL;
    PyObject *var_pkg = NULL;
    PyObject *var_verfiles = NULL;
    PyObject *var_n = NULL;
    PyObject *tmp_for_loop_1__for_iterator = NULL;
    PyObject *tmp_for_loop_1__iter_value = NULL;
    PyObject *tmp_for_loop_2__for_iterator = NULL;
    PyObject *tmp_for_loop_2__iter_value = NULL;
    PyObject *tmp_for_loop_3__for_iterator = NULL;
    PyObject *tmp_for_loop_3__iter_value = NULL;
    PyObject *tmp_tuple_unpack_1__element_1 = NULL;
    PyObject *tmp_tuple_unpack_1__element_2 = NULL;
    PyObject *tmp_tuple_unpack_1__source_iter = NULL;
    PyObject *tmp_with_1__enter = NULL;
    PyObject *tmp_with_1__exit = NULL;
    nuitka_bool tmp_with_1__indicator = NUITKA_BOOL_UNASSIGNED;
    PyObject *tmp_with_1__source = NULL;
    PyObject *tmp_with_2__enter = NULL;
    PyObject *tmp_with_2__exit = NULL;
    nuitka_bool tmp_with_2__indicator = NUITKA_BOOL_UNASSIGNED;
    PyObject *tmp_with_2__source = NULL;
    struct Nuitka_FrameObject *frame_da69626f2bcb841bef747fa3b9caaded;
    NUITKA_MAY_BE_UNUSED char const *type_description_1 = NULL;
    PyObject *exception_type = NULL;
    PyObject *exception_value = NULL;
    PyTracebackObject *exception_tb = NULL;
    NUITKA_MAY_BE_UNUSED int exception_lineno = 0;
    int tmp_res;
    PyObject *tmp_iterator_attempt;
    PyObject *exception_keeper_type_1;
    PyObject *exception_keeper_value_1;
    PyTracebackObject *exception_keeper_tb_1;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_1;
    PyObject *exception_keeper_type_2;
    PyObject *exception_keeper_value_2;
    PyTracebackObject *exception_keeper_tb_2;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_2;
    PyObject *exception_keeper_type_3;
    PyObject *exception_keeper_value_3;
    PyTracebackObject *exception_keeper_tb_3;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_3;
    PyObject *exception_keeper_type_4;
    PyObject *exception_keeper_value_4;
    PyTracebackObject *exception_keeper_tb_4;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_4;
    PyObject *exception_preserved_type_1;
    PyObject *exception_preserved_value_1;
    PyTracebackObject *exception_preserved_tb_1;
    bool tmp_result;
    PyObject *exception_keeper_type_5;
    PyObject *exception_keeper_value_5;
    PyTracebackObject *exception_keeper_tb_5;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_5;
    PyObject *exception_keeper_type_6;
    PyObject *exception_keeper_value_6;
    PyTracebackObject *exception_keeper_tb_6;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_6;
    PyObject *exception_keeper_type_7;
    PyObject *exception_keeper_value_7;
    PyTracebackObject *exception_keeper_tb_7;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_7;
    PyObject *tmp_return_value = NULL;
    PyObject *exception_keeper_type_8;
    PyObject *exception_keeper_value_8;
    PyTracebackObject *exception_keeper_tb_8;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_8;
    PyObject *exception_keeper_type_9;
    PyObject *exception_keeper_value_9;
    PyTracebackObject *exception_keeper_tb_9;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_9;
    PyObject *exception_preserved_type_2;
    PyObject *exception_preserved_value_2;
    PyTracebackObject *exception_preserved_tb_2;
    PyObject *exception_keeper_type_10;
    PyObject *exception_keeper_value_10;
    PyTracebackObject *exception_keeper_tb_10;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_10;
    PyObject *exception_keeper_type_11;
    PyObject *exception_keeper_value_11;
    PyTracebackObject *exception_keeper_tb_11;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_11;
    PyObject *exception_keeper_type_12;
    PyObject *exception_keeper_value_12;
    PyTracebackObject *exception_keeper_tb_12;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_12;
    PyObject *exception_keeper_type_13;
    PyObject *exception_keeper_value_13;
    PyTracebackObject *exception_keeper_tb_13;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_13;
    static struct Nuitka_FrameObject *cache_frame_da69626f2bcb841bef747fa3b9caaded = NULL;
    PyObject *exception_keeper_type_14;
    PyObject *exception_keeper_value_14;
    PyTracebackObject *exception_keeper_tb_14;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_14;

    // Actual function body.
    // Tried code:
    MAKE_OR_REUSE_FRAME( cache_frame_da69626f2bcb841bef747fa3b9caaded, codeobj_da69626f2bcb841bef747fa3b9caaded, module_platform, sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *) );
    frame_da69626f2bcb841bef747fa3b9caaded = cache_frame_da69626f2bcb841bef747fa3b9caaded;

    // Push the new frame as the currently active one.
    pushFrameStack( frame_da69626f2bcb841bef747fa3b9caaded );

    // Mark the frame object as in use, ref count 1 will be up for reuse.
    assert( Py_REFCNT( frame_da69626f2bcb841bef747fa3b9caaded ) == 2 ); // Frame stack

    // Framed code:
    {
        nuitka_bool tmp_condition_result_1;
        PyObject *tmp_called_instance_1;
        PyObject *tmp_source_name_1;
        PyObject *tmp_mvar_value_1;
        PyObject *tmp_call_result_1;
        int tmp_truth_name_1;
        tmp_mvar_value_1 = GET_STRING_DICT_VALUE( moduledict_platform, (Nuitka_StringObject *)const_str_plain_os );

        if (unlikely( tmp_mvar_value_1 == NULL ))
        {
            tmp_mvar_value_1 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_os );
        }

        if ( tmp_mvar_value_1 == NULL )
        {

            exception_type = PyExc_NameError;
            Py_INCREF( exception_type );
            exception_value = PyUnicode_FromFormat( "name '%s' is not defined", "os" );
            exception_tb = NULL;
            NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
            CHAIN_EXCEPTION( exception_value );

            exception_lineno = 243;
            type_description_1 = "oooooooooooo";
            goto frame_exception_exit_1;
        }

        tmp_source_name_1 = tmp_mvar_value_1;
        tmp_called_instance_1 = LOOKUP_ATTRIBUTE( tmp_source_name_1, const_str_plain_path );
        if ( tmp_called_instance_1 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 243;
            type_description_1 = "oooooooooooo";
            goto frame_exception_exit_1;
        }
        frame_da69626f2bcb841bef747fa3b9caaded->m_frame.f_lineno = 243;
        tmp_call_result_1 = CALL_METHOD_WITH_ARGS1( tmp_called_instance_1, const_str_plain_exists, &PyTuple_GET_ITEM( const_tuple_str_digest_b4e0d93eaa03503f4f915db42c4229da_tuple, 0 ) );

        Py_DECREF( tmp_called_instance_1 );
        if ( tmp_call_result_1 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 243;
            type_description_1 = "oooooooooooo";
            goto frame_exception_exit_1;
        }
        tmp_truth_name_1 = CHECK_IF_TRUE( tmp_call_result_1 );
        if ( tmp_truth_name_1 == -1 )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
            Py_DECREF( tmp_call_result_1 );

            exception_lineno = 243;
            type_description_1 = "oooooooooooo";
            goto frame_exception_exit_1;
        }
        tmp_condition_result_1 = tmp_truth_name_1 == 1 ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
        Py_DECREF( tmp_call_result_1 );
        if ( tmp_condition_result_1 == NUITKA_BOOL_TRUE )
        {
            goto branch_yes_1;
        }
        else
        {
            goto branch_no_1;
        }
        branch_yes_1:;
        Py_XDECREF( par_distname );
        par_distname = NULL;

        // Tried code:
        {
            PyObject *tmp_assign_source_1;
            PyObject *tmp_open_filename_1;
            tmp_open_filename_1 = const_str_digest_b4e0d93eaa03503f4f915db42c4229da;
            tmp_assign_source_1 = BUILTIN_OPEN( tmp_open_filename_1, NULL, NULL, NULL, NULL, NULL, NULL, NULL );
            if ( tmp_assign_source_1 == NULL )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 246;
                type_description_1 = "oooooooooooo";
                goto try_except_handler_2;
            }
            assert( tmp_with_1__source == NULL );
            tmp_with_1__source = tmp_assign_source_1;
        }
        {
            PyObject *tmp_assign_source_2;
            PyObject *tmp_called_name_1;
            PyObject *tmp_source_name_2;
            CHECK_OBJECT( tmp_with_1__source );
            tmp_source_name_2 = tmp_with_1__source;
            tmp_called_name_1 = LOOKUP_SPECIAL( tmp_source_name_2, const_str_plain___enter__ );
            if ( tmp_called_name_1 == NULL )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 246;
                type_description_1 = "oooooooooooo";
                goto try_except_handler_2;
            }
            frame_da69626f2bcb841bef747fa3b9caaded->m_frame.f_lineno = 246;
            tmp_assign_source_2 = CALL_FUNCTION_NO_ARGS( tmp_called_name_1 );
            Py_DECREF( tmp_called_name_1 );
            if ( tmp_assign_source_2 == NULL )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 246;
                type_description_1 = "oooooooooooo";
                goto try_except_handler_2;
            }
            assert( tmp_with_1__enter == NULL );
            tmp_with_1__enter = tmp_assign_source_2;
        }
        {
            PyObject *tmp_assign_source_3;
            PyObject *tmp_source_name_3;
            CHECK_OBJECT( tmp_with_1__source );
            tmp_source_name_3 = tmp_with_1__source;
            tmp_assign_source_3 = LOOKUP_SPECIAL( tmp_source_name_3, const_str_plain___exit__ );
            if ( tmp_assign_source_3 == NULL )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 246;
                type_description_1 = "oooooooooooo";
                goto try_except_handler_2;
            }
            assert( tmp_with_1__exit == NULL );
            tmp_with_1__exit = tmp_assign_source_3;
        }
        {
            nuitka_bool tmp_assign_source_4;
            tmp_assign_source_4 = NUITKA_BOOL_TRUE;
            tmp_with_1__indicator = tmp_assign_source_4;
        }
        {
            PyObject *tmp_assign_source_5;
            CHECK_OBJECT( tmp_with_1__enter );
            tmp_assign_source_5 = tmp_with_1__enter;
            assert( var_f == NULL );
            Py_INCREF( tmp_assign_source_5 );
            var_f = tmp_assign_source_5;
        }
        // Tried code:
        // Tried code:
        {
            PyObject *tmp_assign_source_6;
            PyObject *tmp_iter_arg_1;
            CHECK_OBJECT( var_f );
            tmp_iter_arg_1 = var_f;
            tmp_assign_source_6 = MAKE_ITERATOR( tmp_iter_arg_1 );
            if ( tmp_assign_source_6 == NULL )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 247;
                type_description_1 = "oooooooooooo";
                goto try_except_handler_4;
            }
            assert( tmp_for_loop_1__for_iterator == NULL );
            tmp_for_loop_1__for_iterator = tmp_assign_source_6;
        }
        // Tried code:
        loop_start_1:;
        {
            PyObject *tmp_next_source_1;
            PyObject *tmp_assign_source_7;
            CHECK_OBJECT( tmp_for_loop_1__for_iterator );
            tmp_next_source_1 = tmp_for_loop_1__for_iterator;
            tmp_assign_source_7 = ITERATOR_NEXT( tmp_next_source_1 );
            if ( tmp_assign_source_7 == NULL )
            {
                if ( CHECK_AND_CLEAR_STOP_ITERATION_OCCURRED() )
                {

                    goto loop_end_1;
                }
                else
                {

                    FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
                    type_description_1 = "oooooooooooo";
                    exception_lineno = 247;
                    goto try_except_handler_5;
                }
            }

            {
                PyObject *old = tmp_for_loop_1__iter_value;
                tmp_for_loop_1__iter_value = tmp_assign_source_7;
                Py_XDECREF( old );
            }

        }
        {
            PyObject *tmp_assign_source_8;
            CHECK_OBJECT( tmp_for_loop_1__iter_value );
            tmp_assign_source_8 = tmp_for_loop_1__iter_value;
            {
                PyObject *old = var_line;
                var_line = tmp_assign_source_8;
                Py_INCREF( var_line );
                Py_XDECREF( old );
            }

        }
        {
            PyObject *tmp_assign_source_9;
            PyObject *tmp_called_instance_2;
            CHECK_OBJECT( var_line );
            tmp_called_instance_2 = var_line;
            frame_da69626f2bcb841bef747fa3b9caaded->m_frame.f_lineno = 248;
            tmp_assign_source_9 = CALL_METHOD_NO_ARGS( tmp_called_instance_2, const_str_plain_split );
            if ( tmp_assign_source_9 == NULL )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 248;
                type_description_1 = "oooooooooooo";
                goto try_except_handler_5;
            }
            {
                PyObject *old = var_tv;
                var_tv = tmp_assign_source_9;
                Py_XDECREF( old );
            }

        }
        {
            nuitka_bool tmp_condition_result_2;
            PyObject *tmp_compexpr_left_1;
            PyObject *tmp_compexpr_right_1;
            PyObject *tmp_len_arg_1;
            CHECK_OBJECT( var_tv );
            tmp_len_arg_1 = var_tv;
            tmp_compexpr_left_1 = BUILTIN_LEN( tmp_len_arg_1 );
            if ( tmp_compexpr_left_1 == NULL )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 249;
                type_description_1 = "oooooooooooo";
                goto try_except_handler_5;
            }
            tmp_compexpr_right_1 = const_int_pos_2;
            tmp_res = RICH_COMPARE_BOOL_EQ_OBJECT_OBJECT( tmp_compexpr_left_1, tmp_compexpr_right_1 );
            Py_DECREF( tmp_compexpr_left_1 );
            assert( !(tmp_res == -1) );
            tmp_condition_result_2 = ( tmp_res != 0 ) ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
            if ( tmp_condition_result_2 == NUITKA_BOOL_TRUE )
            {
                goto branch_yes_2;
            }
            else
            {
                goto branch_no_2;
            }
            branch_yes_2:;
            // Tried code:
            {
                PyObject *tmp_assign_source_10;
                PyObject *tmp_iter_arg_2;
                CHECK_OBJECT( var_tv );
                tmp_iter_arg_2 = var_tv;
                tmp_assign_source_10 = MAKE_UNPACK_ITERATOR( tmp_iter_arg_2 );
                if ( tmp_assign_source_10 == NULL )
                {
                    assert( ERROR_OCCURRED() );

                    FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                    exception_lineno = 250;
                    type_description_1 = "oooooooooooo";
                    goto try_except_handler_6;
                }
                {
                    PyObject *old = tmp_tuple_unpack_1__source_iter;
                    tmp_tuple_unpack_1__source_iter = tmp_assign_source_10;
                    Py_XDECREF( old );
                }

            }
            // Tried code:
            {
                PyObject *tmp_assign_source_11;
                PyObject *tmp_unpack_1;
                CHECK_OBJECT( tmp_tuple_unpack_1__source_iter );
                tmp_unpack_1 = tmp_tuple_unpack_1__source_iter;
                tmp_assign_source_11 = UNPACK_NEXT( tmp_unpack_1, 0, 2 );
                if ( tmp_assign_source_11 == NULL )
                {
                    if ( !ERROR_OCCURRED() )
                    {
                        exception_type = PyExc_StopIteration;
                        Py_INCREF( exception_type );
                        exception_value = NULL;
                        exception_tb = NULL;
                    }
                    else
                    {
                        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
                    }


                    type_description_1 = "oooooooooooo";
                    exception_lineno = 250;
                    goto try_except_handler_7;
                }
                {
                    PyObject *old = tmp_tuple_unpack_1__element_1;
                    tmp_tuple_unpack_1__element_1 = tmp_assign_source_11;
                    Py_XDECREF( old );
                }

            }
            {
                PyObject *tmp_assign_source_12;
                PyObject *tmp_unpack_2;
                CHECK_OBJECT( tmp_tuple_unpack_1__source_iter );
                tmp_unpack_2 = tmp_tuple_unpack_1__source_iter;
                tmp_assign_source_12 = UNPACK_NEXT( tmp_unpack_2, 1, 2 );
                if ( tmp_assign_source_12 == NULL )
                {
                    if ( !ERROR_OCCURRED() )
                    {
                        exception_type = PyExc_StopIteration;
                        Py_INCREF( exception_type );
                        exception_value = NULL;
                        exception_tb = NULL;
                    }
                    else
                    {
                        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
                    }


                    type_description_1 = "oooooooooooo";
                    exception_lineno = 250;
                    goto try_except_handler_7;
                }
                {
                    PyObject *old = tmp_tuple_unpack_1__element_2;
                    tmp_tuple_unpack_1__element_2 = tmp_assign_source_12;
                    Py_XDECREF( old );
                }

            }
            {
                PyObject *tmp_iterator_name_1;
                CHECK_OBJECT( tmp_tuple_unpack_1__source_iter );
                tmp_iterator_name_1 = tmp_tuple_unpack_1__source_iter;
                // Check if iterator has left-over elements.
                CHECK_OBJECT( tmp_iterator_name_1 ); assert( HAS_ITERNEXT( tmp_iterator_name_1 ) );

                tmp_iterator_attempt = (*Py_TYPE( tmp_iterator_name_1 )->tp_iternext)( tmp_iterator_name_1 );

                if (likely( tmp_iterator_attempt == NULL ))
                {
                    PyObject *error = GET_ERROR_OCCURRED();

                    if ( error != NULL )
                    {
                        if ( EXCEPTION_MATCH_BOOL_SINGLE( error, PyExc_StopIteration ))
                        {
                            CLEAR_ERROR_OCCURRED();
                        }
                        else
                        {
                            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );

                            type_description_1 = "oooooooooooo";
                            exception_lineno = 250;
                            goto try_except_handler_7;
                        }
                    }
                }
                else
                {
                    Py_DECREF( tmp_iterator_attempt );

                    // TODO: Could avoid PyErr_Format.
#if PYTHON_VERSION < 300
                    PyErr_Format( PyExc_ValueError, "too many values to unpack" );
#else
                    PyErr_Format( PyExc_ValueError, "too many values to unpack (expected 2)" );
#endif
                    FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );

                    type_description_1 = "oooooooooooo";
                    exception_lineno = 250;
                    goto try_except_handler_7;
                }
            }
            goto try_end_1;
            // Exception handler code:
            try_except_handler_7:;
            exception_keeper_type_1 = exception_type;
            exception_keeper_value_1 = exception_value;
            exception_keeper_tb_1 = exception_tb;
            exception_keeper_lineno_1 = exception_lineno;
            exception_type = NULL;
            exception_value = NULL;
            exception_tb = NULL;
            exception_lineno = 0;

            CHECK_OBJECT( (PyObject *)tmp_tuple_unpack_1__source_iter );
            Py_DECREF( tmp_tuple_unpack_1__source_iter );
            tmp_tuple_unpack_1__source_iter = NULL;

            // Re-raise.
            exception_type = exception_keeper_type_1;
            exception_value = exception_keeper_value_1;
            exception_tb = exception_keeper_tb_1;
            exception_lineno = exception_keeper_lineno_1;

            goto try_except_handler_6;
            // End of try:
            try_end_1:;
            goto try_end_2;
            // Exception handler code:
            try_except_handler_6:;
            exception_keeper_type_2 = exception_type;
            exception_keeper_value_2 = exception_value;
            exception_keeper_tb_2 = exception_tb;
            exception_keeper_lineno_2 = exception_lineno;
            exception_type = NULL;
            exception_value = NULL;
            exception_tb = NULL;
            exception_lineno = 0;

            Py_XDECREF( tmp_tuple_unpack_1__element_1 );
            tmp_tuple_unpack_1__element_1 = NULL;

            Py_XDECREF( tmp_tuple_unpack_1__element_2 );
            tmp_tuple_unpack_1__element_2 = NULL;

            // Re-raise.
            exception_type = exception_keeper_type_2;
            exception_value = exception_keeper_value_2;
            exception_tb = exception_keeper_tb_2;
            exception_lineno = exception_keeper_lineno_2;

            goto try_except_handler_5;
            // End of try:
            try_end_2:;
            CHECK_OBJECT( (PyObject *)tmp_tuple_unpack_1__source_iter );
            Py_DECREF( tmp_tuple_unpack_1__source_iter );
            tmp_tuple_unpack_1__source_iter = NULL;

            {
                PyObject *tmp_assign_source_13;
                CHECK_OBJECT( tmp_tuple_unpack_1__element_1 );
                tmp_assign_source_13 = tmp_tuple_unpack_1__element_1;
                {
                    PyObject *old = var_tag;
                    var_tag = tmp_assign_source_13;
                    Py_INCREF( var_tag );
                    Py_XDECREF( old );
                }

            }
            Py_XDECREF( tmp_tuple_unpack_1__element_1 );
            tmp_tuple_unpack_1__element_1 = NULL;

            {
                PyObject *tmp_assign_source_14;
                CHECK_OBJECT( tmp_tuple_unpack_1__element_2 );
                tmp_assign_source_14 = tmp_tuple_unpack_1__element_2;
                {
                    PyObject *old = var_value;
                    var_value = tmp_assign_source_14;
                    Py_INCREF( var_value );
                    Py_XDECREF( old );
                }

            }
            Py_XDECREF( tmp_tuple_unpack_1__element_2 );
            tmp_tuple_unpack_1__element_2 = NULL;

            goto branch_end_2;
            branch_no_2:;
            goto loop_start_1;
            branch_end_2:;
        }
        {
            nuitka_bool tmp_condition_result_3;
            PyObject *tmp_compexpr_left_2;
            PyObject *tmp_compexpr_right_2;
            if ( var_tag == NULL )
            {

                exception_type = PyExc_UnboundLocalError;
                Py_INCREF( exception_type );
                exception_value = PyUnicode_FromFormat( "local variable '%s' referenced before assignment", "tag" );
                exception_tb = NULL;
                NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
                CHAIN_EXCEPTION( exception_value );

                exception_lineno = 253;
                type_description_1 = "oooooooooooo";
                goto try_except_handler_5;
            }

            tmp_compexpr_left_2 = var_tag;
            tmp_compexpr_right_2 = const_str_plain_MIN_DIST_VERSION;
            tmp_res = RICH_COMPARE_BOOL_EQ_OBJECT_OBJECT( tmp_compexpr_left_2, tmp_compexpr_right_2 );
            if ( tmp_res == -1 )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 253;
                type_description_1 = "oooooooooooo";
                goto try_except_handler_5;
            }
            tmp_condition_result_3 = ( tmp_res != 0 ) ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
            if ( tmp_condition_result_3 == NUITKA_BOOL_TRUE )
            {
                goto branch_yes_3;
            }
            else
            {
                goto branch_no_3;
            }
            branch_yes_3:;
            {
                PyObject *tmp_assign_source_15;
                PyObject *tmp_called_instance_3;
                if ( var_value == NULL )
                {

                    exception_type = PyExc_UnboundLocalError;
                    Py_INCREF( exception_type );
                    exception_value = PyUnicode_FromFormat( "local variable '%s' referenced before assignment", "value" );
                    exception_tb = NULL;
                    NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
                    CHAIN_EXCEPTION( exception_value );

                    exception_lineno = 254;
                    type_description_1 = "oooooooooooo";
                    goto try_except_handler_5;
                }

                tmp_called_instance_3 = var_value;
                frame_da69626f2bcb841bef747fa3b9caaded->m_frame.f_lineno = 254;
                tmp_assign_source_15 = CALL_METHOD_NO_ARGS( tmp_called_instance_3, const_str_plain_strip );
                if ( tmp_assign_source_15 == NULL )
                {
                    assert( ERROR_OCCURRED() );

                    FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                    exception_lineno = 254;
                    type_description_1 = "oooooooooooo";
                    goto try_except_handler_5;
                }
                {
                    PyObject *old = par_version;
                    par_version = tmp_assign_source_15;
                    Py_XDECREF( old );
                }

            }
            goto branch_end_3;
            branch_no_3:;
            {
                nuitka_bool tmp_condition_result_4;
                PyObject *tmp_compexpr_left_3;
                PyObject *tmp_compexpr_right_3;
                if ( var_tag == NULL )
                {

                    exception_type = PyExc_UnboundLocalError;
                    Py_INCREF( exception_type );
                    exception_value = PyUnicode_FromFormat( "local variable '%s' referenced before assignment", "tag" );
                    exception_tb = NULL;
                    NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
                    CHAIN_EXCEPTION( exception_value );

                    exception_lineno = 255;
                    type_description_1 = "oooooooooooo";
                    goto try_except_handler_5;
                }

                tmp_compexpr_left_3 = var_tag;
                tmp_compexpr_right_3 = const_str_plain_DIST_IDENT;
                tmp_res = RICH_COMPARE_BOOL_EQ_OBJECT_OBJECT( tmp_compexpr_left_3, tmp_compexpr_right_3 );
                if ( tmp_res == -1 )
                {
                    assert( ERROR_OCCURRED() );

                    FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                    exception_lineno = 255;
                    type_description_1 = "oooooooooooo";
                    goto try_except_handler_5;
                }
                tmp_condition_result_4 = ( tmp_res != 0 ) ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
                if ( tmp_condition_result_4 == NUITKA_BOOL_TRUE )
                {
                    goto branch_yes_4;
                }
                else
                {
                    goto branch_no_4;
                }
                branch_yes_4:;
                {
                    PyObject *tmp_assign_source_16;
                    PyObject *tmp_called_instance_4;
                    if ( var_value == NULL )
                    {

                        exception_type = PyExc_UnboundLocalError;
                        Py_INCREF( exception_type );
                        exception_value = PyUnicode_FromFormat( "local variable '%s' referenced before assignment", "value" );
                        exception_tb = NULL;
                        NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
                        CHAIN_EXCEPTION( exception_value );

                        exception_lineno = 256;
                        type_description_1 = "oooooooooooo";
                        goto try_except_handler_5;
                    }

                    tmp_called_instance_4 = var_value;
                    frame_da69626f2bcb841bef747fa3b9caaded->m_frame.f_lineno = 256;
                    tmp_assign_source_16 = CALL_METHOD_WITH_ARGS1( tmp_called_instance_4, const_str_plain_split, &PyTuple_GET_ITEM( const_tuple_str_chr_45_tuple, 0 ) );

                    if ( tmp_assign_source_16 == NULL )
                    {
                        assert( ERROR_OCCURRED() );

                        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                        exception_lineno = 256;
                        type_description_1 = "oooooooooooo";
                        goto try_except_handler_5;
                    }
                    {
                        PyObject *old = var_values;
                        var_values = tmp_assign_source_16;
                        Py_XDECREF( old );
                    }

                }
                {
                    PyObject *tmp_assign_source_17;
                    PyObject *tmp_subscribed_name_1;
                    PyObject *tmp_subscript_name_1;
                    CHECK_OBJECT( var_values );
                    tmp_subscribed_name_1 = var_values;
                    tmp_subscript_name_1 = const_int_pos_2;
                    tmp_assign_source_17 = LOOKUP_SUBSCRIPT_CONST( tmp_subscribed_name_1, tmp_subscript_name_1, 2 );
                    if ( tmp_assign_source_17 == NULL )
                    {
                        assert( ERROR_OCCURRED() );

                        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                        exception_lineno = 257;
                        type_description_1 = "oooooooooooo";
                        goto try_except_handler_5;
                    }
                    {
                        PyObject *old = par_id;
                        par_id = tmp_assign_source_17;
                        Py_XDECREF( old );
                    }

                }
                branch_no_4:;
            }
            branch_end_3:;
        }
        if ( CONSIDER_THREADING() == false )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 247;
            type_description_1 = "oooooooooooo";
            goto try_except_handler_5;
        }
        goto loop_start_1;
        loop_end_1:;
        goto try_end_3;
        // Exception handler code:
        try_except_handler_5:;
        exception_keeper_type_3 = exception_type;
        exception_keeper_value_3 = exception_value;
        exception_keeper_tb_3 = exception_tb;
        exception_keeper_lineno_3 = exception_lineno;
        exception_type = NULL;
        exception_value = NULL;
        exception_tb = NULL;
        exception_lineno = 0;

        Py_XDECREF( tmp_for_loop_1__iter_value );
        tmp_for_loop_1__iter_value = NULL;

        CHECK_OBJECT( (PyObject *)tmp_for_loop_1__for_iterator );
        Py_DECREF( tmp_for_loop_1__for_iterator );
        tmp_for_loop_1__for_iterator = NULL;

        // Re-raise.
        exception_type = exception_keeper_type_3;
        exception_value = exception_keeper_value_3;
        exception_tb = exception_keeper_tb_3;
        exception_lineno = exception_keeper_lineno_3;

        goto try_except_handler_4;
        // End of try:
        try_end_3:;
        Py_XDECREF( tmp_for_loop_1__iter_value );
        tmp_for_loop_1__iter_value = NULL;

        CHECK_OBJECT( (PyObject *)tmp_for_loop_1__for_iterator );
        Py_DECREF( tmp_for_loop_1__for_iterator );
        tmp_for_loop_1__for_iterator = NULL;

        goto try_end_4;
        // Exception handler code:
        try_except_handler_4:;
        exception_keeper_type_4 = exception_type;
        exception_keeper_value_4 = exception_value;
        exception_keeper_tb_4 = exception_tb;
        exception_keeper_lineno_4 = exception_lineno;
        exception_type = NULL;
        exception_value = NULL;
        exception_tb = NULL;
        exception_lineno = 0;

        // Preserve existing published exception.
        exception_preserved_type_1 = EXC_TYPE(PyThreadState_GET());
        Py_XINCREF( exception_preserved_type_1 );
        exception_preserved_value_1 = EXC_VALUE(PyThreadState_GET());
        Py_XINCREF( exception_preserved_value_1 );
        exception_preserved_tb_1 = (PyTracebackObject *)EXC_TRACEBACK(PyThreadState_GET());
        Py_XINCREF( exception_preserved_tb_1 );

        if ( exception_keeper_tb_4 == NULL )
        {
            exception_keeper_tb_4 = MAKE_TRACEBACK( frame_da69626f2bcb841bef747fa3b9caaded, exception_keeper_lineno_4 );
        }
        else if ( exception_keeper_lineno_4 != 0 )
        {
            exception_keeper_tb_4 = ADD_TRACEBACK( exception_keeper_tb_4, frame_da69626f2bcb841bef747fa3b9caaded, exception_keeper_lineno_4 );
        }

        NORMALIZE_EXCEPTION( &exception_keeper_type_4, &exception_keeper_value_4, &exception_keeper_tb_4 );
        PyException_SetTraceback( exception_keeper_value_4, (PyObject *)exception_keeper_tb_4 );
        PUBLISH_EXCEPTION( &exception_keeper_type_4, &exception_keeper_value_4, &exception_keeper_tb_4 );
        // Tried code:
        {
            nuitka_bool tmp_condition_result_5;
            PyObject *tmp_compexpr_left_4;
            PyObject *tmp_compexpr_right_4;
            tmp_compexpr_left_4 = EXC_TYPE(PyThreadState_GET());
            tmp_compexpr_right_4 = PyExc_BaseException;
            tmp_res = EXCEPTION_MATCH_BOOL( tmp_compexpr_left_4, tmp_compexpr_right_4 );
            if ( tmp_res == -1 )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 246;
                type_description_1 = "oooooooooooo";
                goto try_except_handler_8;
            }
            tmp_condition_result_5 = ( tmp_res != 0 ) ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
            if ( tmp_condition_result_5 == NUITKA_BOOL_TRUE )
            {
                goto branch_yes_5;
            }
            else
            {
                goto branch_no_5;
            }
            branch_yes_5:;
            {
                nuitka_bool tmp_assign_source_18;
                tmp_assign_source_18 = NUITKA_BOOL_FALSE;
                tmp_with_1__indicator = tmp_assign_source_18;
            }
            {
                nuitka_bool tmp_condition_result_6;
                PyObject *tmp_operand_name_1;
                PyObject *tmp_called_name_2;
                PyObject *tmp_args_element_name_1;
                PyObject *tmp_args_element_name_2;
                PyObject *tmp_args_element_name_3;
                CHECK_OBJECT( tmp_with_1__exit );
                tmp_called_name_2 = tmp_with_1__exit;
                tmp_args_element_name_1 = EXC_TYPE(PyThreadState_GET());
                tmp_args_element_name_2 = EXC_VALUE(PyThreadState_GET());
                tmp_args_element_name_3 = EXC_TRACEBACK(PyThreadState_GET());
                frame_da69626f2bcb841bef747fa3b9caaded->m_frame.f_lineno = 246;
                {
                    PyObject *call_args[] = { tmp_args_element_name_1, tmp_args_element_name_2, tmp_args_element_name_3 };
                    tmp_operand_name_1 = CALL_FUNCTION_WITH_ARGS3( tmp_called_name_2, call_args );
                }

                if ( tmp_operand_name_1 == NULL )
                {
                    assert( ERROR_OCCURRED() );

                    FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                    exception_lineno = 246;
                    type_description_1 = "oooooooooooo";
                    goto try_except_handler_8;
                }
                tmp_res = CHECK_IF_TRUE( tmp_operand_name_1 );
                Py_DECREF( tmp_operand_name_1 );
                if ( tmp_res == -1 )
                {
                    assert( ERROR_OCCURRED() );

                    FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                    exception_lineno = 246;
                    type_description_1 = "oooooooooooo";
                    goto try_except_handler_8;
                }
                tmp_condition_result_6 = ( tmp_res == 0 ) ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
                if ( tmp_condition_result_6 == NUITKA_BOOL_TRUE )
                {
                    goto branch_yes_6;
                }
                else
                {
                    goto branch_no_6;
                }
                branch_yes_6:;
                tmp_result = RERAISE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
                if (unlikely( tmp_result == false ))
                {
                    exception_lineno = 246;
                }

                if (exception_tb && exception_tb->tb_frame == &frame_da69626f2bcb841bef747fa3b9caaded->m_frame) frame_da69626f2bcb841bef747fa3b9caaded->m_frame.f_lineno = exception_tb->tb_lineno;
                type_description_1 = "oooooooooooo";
                goto try_except_handler_8;
                branch_no_6:;
            }
            goto branch_end_5;
            branch_no_5:;
            tmp_result = RERAISE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
            if (unlikely( tmp_result == false ))
            {
                exception_lineno = 246;
            }

            if (exception_tb && exception_tb->tb_frame == &frame_da69626f2bcb841bef747fa3b9caaded->m_frame) frame_da69626f2bcb841bef747fa3b9caaded->m_frame.f_lineno = exception_tb->tb_lineno;
            type_description_1 = "oooooooooooo";
            goto try_except_handler_8;
            branch_end_5:;
        }
        goto try_end_5;
        // Exception handler code:
        try_except_handler_8:;
        exception_keeper_type_5 = exception_type;
        exception_keeper_value_5 = exception_value;
        exception_keeper_tb_5 = exception_tb;
        exception_keeper_lineno_5 = exception_lineno;
        exception_type = NULL;
        exception_value = NULL;
        exception_tb = NULL;
        exception_lineno = 0;

        // Restore previous exception.
        SET_CURRENT_EXCEPTION( exception_preserved_type_1, exception_preserved_value_1, exception_preserved_tb_1 );
        // Re-raise.
        exception_type = exception_keeper_type_5;
        exception_value = exception_keeper_value_5;
        exception_tb = exception_keeper_tb_5;
        exception_lineno = exception_keeper_lineno_5;

        goto try_except_handler_3;
        // End of try:
        try_end_5:;
        // Restore previous exception.
        SET_CURRENT_EXCEPTION( exception_preserved_type_1, exception_preserved_value_1, exception_preserved_tb_1 );
        goto try_end_4;
        // exception handler codes exits in all cases
        NUITKA_CANNOT_GET_HERE( platform$$$function_3__dist_try_harder );
        return NULL;
        // End of try:
        try_end_4:;
        goto try_end_6;
        // Exception handler code:
        try_except_handler_3:;
        exception_keeper_type_6 = exception_type;
        exception_keeper_value_6 = exception_value;
        exception_keeper_tb_6 = exception_tb;
        exception_keeper_lineno_6 = exception_lineno;
        exception_type = NULL;
        exception_value = NULL;
        exception_tb = NULL;
        exception_lineno = 0;

        {
            nuitka_bool tmp_condition_result_7;
            nuitka_bool tmp_compexpr_left_5;
            nuitka_bool tmp_compexpr_right_5;
            assert( tmp_with_1__indicator != NUITKA_BOOL_UNASSIGNED);
            tmp_compexpr_left_5 = tmp_with_1__indicator;
            tmp_compexpr_right_5 = NUITKA_BOOL_TRUE;
            tmp_condition_result_7 = ( tmp_compexpr_left_5 == tmp_compexpr_right_5 ) ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
            if ( tmp_condition_result_7 == NUITKA_BOOL_TRUE )
            {
                goto branch_yes_7;
            }
            else
            {
                goto branch_no_7;
            }
            branch_yes_7:;
            {
                PyObject *tmp_called_name_3;
                PyObject *tmp_call_result_2;
                CHECK_OBJECT( tmp_with_1__exit );
                tmp_called_name_3 = tmp_with_1__exit;
                frame_da69626f2bcb841bef747fa3b9caaded->m_frame.f_lineno = 246;
                tmp_call_result_2 = CALL_FUNCTION_WITH_ARGS3( tmp_called_name_3, &PyTuple_GET_ITEM( const_tuple_none_none_none_tuple, 0 ) );

                if ( tmp_call_result_2 == NULL )
                {
                    assert( ERROR_OCCURRED() );

                    FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );

                    Py_DECREF( exception_keeper_type_6 );
                    Py_XDECREF( exception_keeper_value_6 );
                    Py_XDECREF( exception_keeper_tb_6 );

                    exception_lineno = 246;
                    type_description_1 = "oooooooooooo";
                    goto try_except_handler_2;
                }
                Py_DECREF( tmp_call_result_2 );
            }
            branch_no_7:;
        }
        // Re-raise.
        exception_type = exception_keeper_type_6;
        exception_value = exception_keeper_value_6;
        exception_tb = exception_keeper_tb_6;
        exception_lineno = exception_keeper_lineno_6;

        goto try_except_handler_2;
        // End of try:
        try_end_6:;
        {
            nuitka_bool tmp_condition_result_8;
            nuitka_bool tmp_compexpr_left_6;
            nuitka_bool tmp_compexpr_right_6;
            assert( tmp_with_1__indicator != NUITKA_BOOL_UNASSIGNED);
            tmp_compexpr_left_6 = tmp_with_1__indicator;
            tmp_compexpr_right_6 = NUITKA_BOOL_TRUE;
            tmp_condition_result_8 = ( tmp_compexpr_left_6 == tmp_compexpr_right_6 ) ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
            if ( tmp_condition_result_8 == NUITKA_BOOL_TRUE )
            {
                goto branch_yes_8;
            }
            else
            {
                goto branch_no_8;
            }
            branch_yes_8:;
            {
                PyObject *tmp_called_name_4;
                PyObject *tmp_call_result_3;
                CHECK_OBJECT( tmp_with_1__exit );
                tmp_called_name_4 = tmp_with_1__exit;
                frame_da69626f2bcb841bef747fa3b9caaded->m_frame.f_lineno = 246;
                tmp_call_result_3 = CALL_FUNCTION_WITH_ARGS3( tmp_called_name_4, &PyTuple_GET_ITEM( const_tuple_none_none_none_tuple, 0 ) );

                if ( tmp_call_result_3 == NULL )
                {
                    assert( ERROR_OCCURRED() );

                    FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                    exception_lineno = 246;
                    type_description_1 = "oooooooooooo";
                    goto try_except_handler_2;
                }
                Py_DECREF( tmp_call_result_3 );
            }
            branch_no_8:;
        }
        goto try_end_7;
        // Exception handler code:
        try_except_handler_2:;
        exception_keeper_type_7 = exception_type;
        exception_keeper_value_7 = exception_value;
        exception_keeper_tb_7 = exception_tb;
        exception_keeper_lineno_7 = exception_lineno;
        exception_type = NULL;
        exception_value = NULL;
        exception_tb = NULL;
        exception_lineno = 0;

        Py_XDECREF( tmp_with_1__source );
        tmp_with_1__source = NULL;

        Py_XDECREF( tmp_with_1__enter );
        tmp_with_1__enter = NULL;

        Py_XDECREF( tmp_with_1__exit );
        tmp_with_1__exit = NULL;

        // Re-raise.
        exception_type = exception_keeper_type_7;
        exception_value = exception_keeper_value_7;
        exception_tb = exception_keeper_tb_7;
        exception_lineno = exception_keeper_lineno_7;

        goto frame_exception_exit_1;
        // End of try:
        try_end_7:;
        CHECK_OBJECT( (PyObject *)tmp_with_1__source );
        Py_DECREF( tmp_with_1__source );
        tmp_with_1__source = NULL;

        CHECK_OBJECT( (PyObject *)tmp_with_1__enter );
        Py_DECREF( tmp_with_1__enter );
        tmp_with_1__enter = NULL;

        CHECK_OBJECT( (PyObject *)tmp_with_1__exit );
        Py_DECREF( tmp_with_1__exit );
        tmp_with_1__exit = NULL;

        {
            PyObject *tmp_tuple_element_1;
            tmp_tuple_element_1 = const_str_plain_SuSE;
            tmp_return_value = PyTuple_New( 3 );
            Py_INCREF( tmp_tuple_element_1 );
            PyTuple_SET_ITEM( tmp_return_value, 0, tmp_tuple_element_1 );
            if ( par_version == NULL )
            {
                Py_DECREF( tmp_return_value );
                exception_type = PyExc_UnboundLocalError;
                Py_INCREF( exception_type );
                exception_value = PyUnicode_FromFormat( "local variable '%s' referenced before assignment", "version" );
                exception_tb = NULL;
                NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
                CHAIN_EXCEPTION( exception_value );

                exception_lineno = 258;
                type_description_1 = "oooooooooooo";
                goto frame_exception_exit_1;
            }

            tmp_tuple_element_1 = par_version;
            Py_INCREF( tmp_tuple_element_1 );
            PyTuple_SET_ITEM( tmp_return_value, 1, tmp_tuple_element_1 );
            if ( par_id == NULL )
            {
                Py_DECREF( tmp_return_value );
                exception_type = PyExc_UnboundLocalError;
                Py_INCREF( exception_type );
                exception_value = PyUnicode_FromFormat( "local variable '%s' referenced before assignment", "id" );
                exception_tb = NULL;
                NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
                CHAIN_EXCEPTION( exception_value );

                exception_lineno = 258;
                type_description_1 = "oooooooooooo";
                goto frame_exception_exit_1;
            }

            tmp_tuple_element_1 = par_id;
            Py_INCREF( tmp_tuple_element_1 );
            PyTuple_SET_ITEM( tmp_return_value, 2, tmp_tuple_element_1 );
            goto frame_return_exit_1;
        }
        branch_no_1:;
    }
    {
        nuitka_bool tmp_condition_result_9;
        PyObject *tmp_called_instance_5;
        PyObject *tmp_source_name_4;
        PyObject *tmp_mvar_value_2;
        PyObject *tmp_call_result_4;
        int tmp_truth_name_2;
        tmp_mvar_value_2 = GET_STRING_DICT_VALUE( moduledict_platform, (Nuitka_StringObject *)const_str_plain_os );

        if (unlikely( tmp_mvar_value_2 == NULL ))
        {
            tmp_mvar_value_2 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_os );
        }

        if ( tmp_mvar_value_2 == NULL )
        {

            exception_type = PyExc_NameError;
            Py_INCREF( exception_type );
            exception_value = PyUnicode_FromFormat( "name '%s' is not defined", "os" );
            exception_tb = NULL;
            NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
            CHAIN_EXCEPTION( exception_value );

            exception_lineno = 260;
            type_description_1 = "oooooooooooo";
            goto frame_exception_exit_1;
        }

        tmp_source_name_4 = tmp_mvar_value_2;
        tmp_called_instance_5 = LOOKUP_ATTRIBUTE( tmp_source_name_4, const_str_plain_path );
        if ( tmp_called_instance_5 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 260;
            type_description_1 = "oooooooooooo";
            goto frame_exception_exit_1;
        }
        frame_da69626f2bcb841bef747fa3b9caaded->m_frame.f_lineno = 260;
        tmp_call_result_4 = CALL_METHOD_WITH_ARGS1( tmp_called_instance_5, const_str_plain_exists, &PyTuple_GET_ITEM( const_tuple_str_digest_89c36d7bb5defe289266c6631215c1f5_tuple, 0 ) );

        Py_DECREF( tmp_called_instance_5 );
        if ( tmp_call_result_4 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 260;
            type_description_1 = "oooooooooooo";
            goto frame_exception_exit_1;
        }
        tmp_truth_name_2 = CHECK_IF_TRUE( tmp_call_result_4 );
        if ( tmp_truth_name_2 == -1 )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
            Py_DECREF( tmp_call_result_4 );

            exception_lineno = 260;
            type_description_1 = "oooooooooooo";
            goto frame_exception_exit_1;
        }
        tmp_condition_result_9 = tmp_truth_name_2 == 1 ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
        Py_DECREF( tmp_call_result_4 );
        if ( tmp_condition_result_9 == NUITKA_BOOL_TRUE )
        {
            goto branch_yes_9;
        }
        else
        {
            goto branch_no_9;
        }
        branch_yes_9:;
        // Tried code:
        {
            PyObject *tmp_assign_source_19;
            PyObject *tmp_open_filename_2;
            tmp_open_filename_2 = const_str_digest_89c36d7bb5defe289266c6631215c1f5;
            tmp_assign_source_19 = BUILTIN_OPEN( tmp_open_filename_2, NULL, NULL, NULL, NULL, NULL, NULL, NULL );
            if ( tmp_assign_source_19 == NULL )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 262;
                type_description_1 = "oooooooooooo";
                goto try_except_handler_9;
            }
            assert( tmp_with_2__source == NULL );
            tmp_with_2__source = tmp_assign_source_19;
        }
        {
            PyObject *tmp_assign_source_20;
            PyObject *tmp_called_name_5;
            PyObject *tmp_source_name_5;
            CHECK_OBJECT( tmp_with_2__source );
            tmp_source_name_5 = tmp_with_2__source;
            tmp_called_name_5 = LOOKUP_SPECIAL( tmp_source_name_5, const_str_plain___enter__ );
            if ( tmp_called_name_5 == NULL )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 262;
                type_description_1 = "oooooooooooo";
                goto try_except_handler_9;
            }
            frame_da69626f2bcb841bef747fa3b9caaded->m_frame.f_lineno = 262;
            tmp_assign_source_20 = CALL_FUNCTION_NO_ARGS( tmp_called_name_5 );
            Py_DECREF( tmp_called_name_5 );
            if ( tmp_assign_source_20 == NULL )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 262;
                type_description_1 = "oooooooooooo";
                goto try_except_handler_9;
            }
            assert( tmp_with_2__enter == NULL );
            tmp_with_2__enter = tmp_assign_source_20;
        }
        {
            PyObject *tmp_assign_source_21;
            PyObject *tmp_source_name_6;
            CHECK_OBJECT( tmp_with_2__source );
            tmp_source_name_6 = tmp_with_2__source;
            tmp_assign_source_21 = LOOKUP_SPECIAL( tmp_source_name_6, const_str_plain___exit__ );
            if ( tmp_assign_source_21 == NULL )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 262;
                type_description_1 = "oooooooooooo";
                goto try_except_handler_9;
            }
            assert( tmp_with_2__exit == NULL );
            tmp_with_2__exit = tmp_assign_source_21;
        }
        {
            nuitka_bool tmp_assign_source_22;
            tmp_assign_source_22 = NUITKA_BOOL_TRUE;
            tmp_with_2__indicator = tmp_assign_source_22;
        }
        {
            PyObject *tmp_assign_source_23;
            CHECK_OBJECT( tmp_with_2__enter );
            tmp_assign_source_23 = tmp_with_2__enter;
            assert( var_f == NULL );
            Py_INCREF( tmp_assign_source_23 );
            var_f = tmp_assign_source_23;
        }
        // Tried code:
        // Tried code:
        {
            PyObject *tmp_assign_source_24;
            PyObject *tmp_iter_arg_3;
            CHECK_OBJECT( var_f );
            tmp_iter_arg_3 = var_f;
            tmp_assign_source_24 = MAKE_ITERATOR( tmp_iter_arg_3 );
            if ( tmp_assign_source_24 == NULL )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 263;
                type_description_1 = "oooooooooooo";
                goto try_except_handler_11;
            }
            assert( tmp_for_loop_2__for_iterator == NULL );
            tmp_for_loop_2__for_iterator = tmp_assign_source_24;
        }
        // Tried code:
        loop_start_2:;
        {
            PyObject *tmp_next_source_2;
            PyObject *tmp_assign_source_25;
            CHECK_OBJECT( tmp_for_loop_2__for_iterator );
            tmp_next_source_2 = tmp_for_loop_2__for_iterator;
            tmp_assign_source_25 = ITERATOR_NEXT( tmp_next_source_2 );
            if ( tmp_assign_source_25 == NULL )
            {
                if ( CHECK_AND_CLEAR_STOP_ITERATION_OCCURRED() )
                {

                    goto loop_end_2;
                }
                else
                {

                    FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
                    type_description_1 = "oooooooooooo";
                    exception_lineno = 263;
                    goto try_except_handler_12;
                }
            }

            {
                PyObject *old = tmp_for_loop_2__iter_value;
                tmp_for_loop_2__iter_value = tmp_assign_source_25;
                Py_XDECREF( old );
            }

        }
        {
            PyObject *tmp_assign_source_26;
            CHECK_OBJECT( tmp_for_loop_2__iter_value );
            tmp_assign_source_26 = tmp_for_loop_2__iter_value;
            {
                PyObject *old = var_line;
                var_line = tmp_assign_source_26;
                Py_INCREF( var_line );
                Py_XDECREF( old );
            }

        }
        {
            PyObject *tmp_assign_source_27;
            PyObject *tmp_called_instance_6;
            CHECK_OBJECT( var_line );
            tmp_called_instance_6 = var_line;
            frame_da69626f2bcb841bef747fa3b9caaded->m_frame.f_lineno = 264;
            tmp_assign_source_27 = CALL_METHOD_WITH_ARGS1( tmp_called_instance_6, const_str_plain_split, &PyTuple_GET_ITEM( const_tuple_str_chr_45_tuple, 0 ) );

            if ( tmp_assign_source_27 == NULL )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 264;
                type_description_1 = "oooooooooooo";
                goto try_except_handler_12;
            }
            {
                PyObject *old = var_pkg;
                var_pkg = tmp_assign_source_27;
                Py_XDECREF( old );
            }

        }
        {
            nuitka_bool tmp_condition_result_10;
            int tmp_and_left_truth_1;
            nuitka_bool tmp_and_left_value_1;
            nuitka_bool tmp_and_right_value_1;
            PyObject *tmp_compexpr_left_7;
            PyObject *tmp_compexpr_right_7;
            PyObject *tmp_len_arg_2;
            PyObject *tmp_compexpr_left_8;
            PyObject *tmp_compexpr_right_8;
            PyObject *tmp_subscribed_name_2;
            PyObject *tmp_subscript_name_2;
            CHECK_OBJECT( var_pkg );
            tmp_len_arg_2 = var_pkg;
            tmp_compexpr_left_7 = BUILTIN_LEN( tmp_len_arg_2 );
            if ( tmp_compexpr_left_7 == NULL )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 265;
                type_description_1 = "oooooooooooo";
                goto try_except_handler_12;
            }
            tmp_compexpr_right_7 = const_int_pos_2;
            tmp_res = RICH_COMPARE_BOOL_GTE_OBJECT_OBJECT( tmp_compexpr_left_7, tmp_compexpr_right_7 );
            Py_DECREF( tmp_compexpr_left_7 );
            assert( !(tmp_res == -1) );
            tmp_and_left_value_1 = ( tmp_res != 0 ) ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
            tmp_and_left_truth_1 = tmp_and_left_value_1 == NUITKA_BOOL_TRUE ? 1 : 0;
            if ( tmp_and_left_truth_1 == 1 )
            {
                goto and_right_1;
            }
            else
            {
                goto and_left_1;
            }
            and_right_1:;
            CHECK_OBJECT( var_pkg );
            tmp_subscribed_name_2 = var_pkg;
            tmp_subscript_name_2 = const_int_0;
            tmp_compexpr_left_8 = LOOKUP_SUBSCRIPT_CONST( tmp_subscribed_name_2, tmp_subscript_name_2, 0 );
            if ( tmp_compexpr_left_8 == NULL )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 265;
                type_description_1 = "oooooooooooo";
                goto try_except_handler_12;
            }
            tmp_compexpr_right_8 = const_str_plain_OpenLinux;
            tmp_res = RICH_COMPARE_BOOL_EQ_OBJECT_OBJECT( tmp_compexpr_left_8, tmp_compexpr_right_8 );
            Py_DECREF( tmp_compexpr_left_8 );
            if ( tmp_res == -1 )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 265;
                type_description_1 = "oooooooooooo";
                goto try_except_handler_12;
            }
            tmp_and_right_value_1 = ( tmp_res != 0 ) ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
            tmp_condition_result_10 = tmp_and_right_value_1;
            goto and_end_1;
            and_left_1:;
            tmp_condition_result_10 = tmp_and_left_value_1;
            and_end_1:;
            if ( tmp_condition_result_10 == NUITKA_BOOL_TRUE )
            {
                goto branch_yes_10;
            }
            else
            {
                goto branch_no_10;
            }
            branch_yes_10:;
            {
                PyObject *tmp_tuple_element_2;
                PyObject *tmp_subscribed_name_3;
                PyObject *tmp_subscript_name_3;
                tmp_tuple_element_2 = const_str_plain_OpenLinux;
                tmp_return_value = PyTuple_New( 3 );
                Py_INCREF( tmp_tuple_element_2 );
                PyTuple_SET_ITEM( tmp_return_value, 0, tmp_tuple_element_2 );
                CHECK_OBJECT( var_pkg );
                tmp_subscribed_name_3 = var_pkg;
                tmp_subscript_name_3 = const_int_pos_1;
                tmp_tuple_element_2 = LOOKUP_SUBSCRIPT_CONST( tmp_subscribed_name_3, tmp_subscript_name_3, 1 );
                if ( tmp_tuple_element_2 == NULL )
                {
                    assert( ERROR_OCCURRED() );

                    FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
                    Py_DECREF( tmp_return_value );

                    exception_lineno = 268;
                    type_description_1 = "oooooooooooo";
                    goto try_except_handler_12;
                }
                PyTuple_SET_ITEM( tmp_return_value, 1, tmp_tuple_element_2 );
                CHECK_OBJECT( par_id );
                tmp_tuple_element_2 = par_id;
                Py_INCREF( tmp_tuple_element_2 );
                PyTuple_SET_ITEM( tmp_return_value, 2, tmp_tuple_element_2 );
                goto try_return_handler_12;
            }
            branch_no_10:;
        }
        if ( CONSIDER_THREADING() == false )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 263;
            type_description_1 = "oooooooooooo";
            goto try_except_handler_12;
        }
        goto loop_start_2;
        loop_end_2:;
        goto try_end_8;
        // Return handler code:
        try_return_handler_12:;
        CHECK_OBJECT( (PyObject *)tmp_for_loop_2__iter_value );
        Py_DECREF( tmp_for_loop_2__iter_value );
        tmp_for_loop_2__iter_value = NULL;

        CHECK_OBJECT( (PyObject *)tmp_for_loop_2__for_iterator );
        Py_DECREF( tmp_for_loop_2__for_iterator );
        tmp_for_loop_2__for_iterator = NULL;

        goto try_return_handler_10;
        // Exception handler code:
        try_except_handler_12:;
        exception_keeper_type_8 = exception_type;
        exception_keeper_value_8 = exception_value;
        exception_keeper_tb_8 = exception_tb;
        exception_keeper_lineno_8 = exception_lineno;
        exception_type = NULL;
        exception_value = NULL;
        exception_tb = NULL;
        exception_lineno = 0;

        Py_XDECREF( tmp_for_loop_2__iter_value );
        tmp_for_loop_2__iter_value = NULL;

        CHECK_OBJECT( (PyObject *)tmp_for_loop_2__for_iterator );
        Py_DECREF( tmp_for_loop_2__for_iterator );
        tmp_for_loop_2__for_iterator = NULL;

        // Re-raise.
        exception_type = exception_keeper_type_8;
        exception_value = exception_keeper_value_8;
        exception_tb = exception_keeper_tb_8;
        exception_lineno = exception_keeper_lineno_8;

        goto try_except_handler_11;
        // End of try:
        try_end_8:;
        Py_XDECREF( tmp_for_loop_2__iter_value );
        tmp_for_loop_2__iter_value = NULL;

        CHECK_OBJECT( (PyObject *)tmp_for_loop_2__for_iterator );
        Py_DECREF( tmp_for_loop_2__for_iterator );
        tmp_for_loop_2__for_iterator = NULL;

        goto try_end_9;
        // Exception handler code:
        try_except_handler_11:;
        exception_keeper_type_9 = exception_type;
        exception_keeper_value_9 = exception_value;
        exception_keeper_tb_9 = exception_tb;
        exception_keeper_lineno_9 = exception_lineno;
        exception_type = NULL;
        exception_value = NULL;
        exception_tb = NULL;
        exception_lineno = 0;

        // Preserve existing published exception.
        exception_preserved_type_2 = EXC_TYPE(PyThreadState_GET());
        Py_XINCREF( exception_preserved_type_2 );
        exception_preserved_value_2 = EXC_VALUE(PyThreadState_GET());
        Py_XINCREF( exception_preserved_value_2 );
        exception_preserved_tb_2 = (PyTracebackObject *)EXC_TRACEBACK(PyThreadState_GET());
        Py_XINCREF( exception_preserved_tb_2 );

        if ( exception_keeper_tb_9 == NULL )
        {
            exception_keeper_tb_9 = MAKE_TRACEBACK( frame_da69626f2bcb841bef747fa3b9caaded, exception_keeper_lineno_9 );
        }
        else if ( exception_keeper_lineno_9 != 0 )
        {
            exception_keeper_tb_9 = ADD_TRACEBACK( exception_keeper_tb_9, frame_da69626f2bcb841bef747fa3b9caaded, exception_keeper_lineno_9 );
        }

        NORMALIZE_EXCEPTION( &exception_keeper_type_9, &exception_keeper_value_9, &exception_keeper_tb_9 );
        PyException_SetTraceback( exception_keeper_value_9, (PyObject *)exception_keeper_tb_9 );
        PUBLISH_EXCEPTION( &exception_keeper_type_9, &exception_keeper_value_9, &exception_keeper_tb_9 );
        // Tried code:
        {
            nuitka_bool tmp_condition_result_11;
            PyObject *tmp_compexpr_left_9;
            PyObject *tmp_compexpr_right_9;
            tmp_compexpr_left_9 = EXC_TYPE(PyThreadState_GET());
            tmp_compexpr_right_9 = PyExc_BaseException;
            tmp_res = EXCEPTION_MATCH_BOOL( tmp_compexpr_left_9, tmp_compexpr_right_9 );
            if ( tmp_res == -1 )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 262;
                type_description_1 = "oooooooooooo";
                goto try_except_handler_13;
            }
            tmp_condition_result_11 = ( tmp_res != 0 ) ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
            if ( tmp_condition_result_11 == NUITKA_BOOL_TRUE )
            {
                goto branch_yes_11;
            }
            else
            {
                goto branch_no_11;
            }
            branch_yes_11:;
            {
                nuitka_bool tmp_assign_source_28;
                tmp_assign_source_28 = NUITKA_BOOL_FALSE;
                tmp_with_2__indicator = tmp_assign_source_28;
            }
            {
                nuitka_bool tmp_condition_result_12;
                PyObject *tmp_operand_name_2;
                PyObject *tmp_called_name_6;
                PyObject *tmp_args_element_name_4;
                PyObject *tmp_args_element_name_5;
                PyObject *tmp_args_element_name_6;
                CHECK_OBJECT( tmp_with_2__exit );
                tmp_called_name_6 = tmp_with_2__exit;
                tmp_args_element_name_4 = EXC_TYPE(PyThreadState_GET());
                tmp_args_element_name_5 = EXC_VALUE(PyThreadState_GET());
                tmp_args_element_name_6 = EXC_TRACEBACK(PyThreadState_GET());
                frame_da69626f2bcb841bef747fa3b9caaded->m_frame.f_lineno = 262;
                {
                    PyObject *call_args[] = { tmp_args_element_name_4, tmp_args_element_name_5, tmp_args_element_name_6 };
                    tmp_operand_name_2 = CALL_FUNCTION_WITH_ARGS3( tmp_called_name_6, call_args );
                }

                if ( tmp_operand_name_2 == NULL )
                {
                    assert( ERROR_OCCURRED() );

                    FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                    exception_lineno = 262;
                    type_description_1 = "oooooooooooo";
                    goto try_except_handler_13;
                }
                tmp_res = CHECK_IF_TRUE( tmp_operand_name_2 );
                Py_DECREF( tmp_operand_name_2 );
                if ( tmp_res == -1 )
                {
                    assert( ERROR_OCCURRED() );

                    FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                    exception_lineno = 262;
                    type_description_1 = "oooooooooooo";
                    goto try_except_handler_13;
                }
                tmp_condition_result_12 = ( tmp_res == 0 ) ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
                if ( tmp_condition_result_12 == NUITKA_BOOL_TRUE )
                {
                    goto branch_yes_12;
                }
                else
                {
                    goto branch_no_12;
                }
                branch_yes_12:;
                tmp_result = RERAISE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
                if (unlikely( tmp_result == false ))
                {
                    exception_lineno = 262;
                }

                if (exception_tb && exception_tb->tb_frame == &frame_da69626f2bcb841bef747fa3b9caaded->m_frame) frame_da69626f2bcb841bef747fa3b9caaded->m_frame.f_lineno = exception_tb->tb_lineno;
                type_description_1 = "oooooooooooo";
                goto try_except_handler_13;
                branch_no_12:;
            }
            goto branch_end_11;
            branch_no_11:;
            tmp_result = RERAISE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
            if (unlikely( tmp_result == false ))
            {
                exception_lineno = 262;
            }

            if (exception_tb && exception_tb->tb_frame == &frame_da69626f2bcb841bef747fa3b9caaded->m_frame) frame_da69626f2bcb841bef747fa3b9caaded->m_frame.f_lineno = exception_tb->tb_lineno;
            type_description_1 = "oooooooooooo";
            goto try_except_handler_13;
            branch_end_11:;
        }
        goto try_end_10;
        // Exception handler code:
        try_except_handler_13:;
        exception_keeper_type_10 = exception_type;
        exception_keeper_value_10 = exception_value;
        exception_keeper_tb_10 = exception_tb;
        exception_keeper_lineno_10 = exception_lineno;
        exception_type = NULL;
        exception_value = NULL;
        exception_tb = NULL;
        exception_lineno = 0;

        // Restore previous exception.
        SET_CURRENT_EXCEPTION( exception_preserved_type_2, exception_preserved_value_2, exception_preserved_tb_2 );
        // Re-raise.
        exception_type = exception_keeper_type_10;
        exception_value = exception_keeper_value_10;
        exception_tb = exception_keeper_tb_10;
        exception_lineno = exception_keeper_lineno_10;

        goto try_except_handler_10;
        // End of try:
        try_end_10:;
        // Restore previous exception.
        SET_CURRENT_EXCEPTION( exception_preserved_type_2, exception_preserved_value_2, exception_preserved_tb_2 );
        goto try_end_9;
        // exception handler codes exits in all cases
        NUITKA_CANNOT_GET_HERE( platform$$$function_3__dist_try_harder );
        return NULL;
        // End of try:
        try_end_9:;
        goto try_end_11;
        // Return handler code:
        try_return_handler_10:;
        {
            PyObject *tmp_called_name_7;
            PyObject *tmp_call_result_5;
            CHECK_OBJECT( tmp_with_2__exit );
            tmp_called_name_7 = tmp_with_2__exit;
            frame_da69626f2bcb841bef747fa3b9caaded->m_frame.f_lineno = 262;
            tmp_call_result_5 = CALL_FUNCTION_WITH_ARGS3( tmp_called_name_7, &PyTuple_GET_ITEM( const_tuple_none_none_none_tuple, 0 ) );

            if ( tmp_call_result_5 == NULL )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 262;
                type_description_1 = "oooooooooooo";
                goto try_except_handler_9;
            }
            Py_DECREF( tmp_call_result_5 );
        }
        goto try_return_handler_9;
        // Exception handler code:
        try_except_handler_10:;
        exception_keeper_type_11 = exception_type;
        exception_keeper_value_11 = exception_value;
        exception_keeper_tb_11 = exception_tb;
        exception_keeper_lineno_11 = exception_lineno;
        exception_type = NULL;
        exception_value = NULL;
        exception_tb = NULL;
        exception_lineno = 0;

        {
            nuitka_bool tmp_condition_result_13;
            nuitka_bool tmp_compexpr_left_10;
            nuitka_bool tmp_compexpr_right_10;
            assert( tmp_with_2__indicator != NUITKA_BOOL_UNASSIGNED);
            tmp_compexpr_left_10 = tmp_with_2__indicator;
            tmp_compexpr_right_10 = NUITKA_BOOL_TRUE;
            tmp_condition_result_13 = ( tmp_compexpr_left_10 == tmp_compexpr_right_10 ) ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
            if ( tmp_condition_result_13 == NUITKA_BOOL_TRUE )
            {
                goto branch_yes_13;
            }
            else
            {
                goto branch_no_13;
            }
            branch_yes_13:;
            {
                PyObject *tmp_called_name_8;
                PyObject *tmp_call_result_6;
                CHECK_OBJECT( tmp_with_2__exit );
                tmp_called_name_8 = tmp_with_2__exit;
                frame_da69626f2bcb841bef747fa3b9caaded->m_frame.f_lineno = 262;
                tmp_call_result_6 = CALL_FUNCTION_WITH_ARGS3( tmp_called_name_8, &PyTuple_GET_ITEM( const_tuple_none_none_none_tuple, 0 ) );

                if ( tmp_call_result_6 == NULL )
                {
                    assert( ERROR_OCCURRED() );

                    FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );

                    Py_DECREF( exception_keeper_type_11 );
                    Py_XDECREF( exception_keeper_value_11 );
                    Py_XDECREF( exception_keeper_tb_11 );

                    exception_lineno = 262;
                    type_description_1 = "oooooooooooo";
                    goto try_except_handler_9;
                }
                Py_DECREF( tmp_call_result_6 );
            }
            branch_no_13:;
        }
        // Re-raise.
        exception_type = exception_keeper_type_11;
        exception_value = exception_keeper_value_11;
        exception_tb = exception_keeper_tb_11;
        exception_lineno = exception_keeper_lineno_11;

        goto try_except_handler_9;
        // End of try:
        try_end_11:;
        {
            nuitka_bool tmp_condition_result_14;
            nuitka_bool tmp_compexpr_left_11;
            nuitka_bool tmp_compexpr_right_11;
            assert( tmp_with_2__indicator != NUITKA_BOOL_UNASSIGNED);
            tmp_compexpr_left_11 = tmp_with_2__indicator;
            tmp_compexpr_right_11 = NUITKA_BOOL_TRUE;
            tmp_condition_result_14 = ( tmp_compexpr_left_11 == tmp_compexpr_right_11 ) ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
            if ( tmp_condition_result_14 == NUITKA_BOOL_TRUE )
            {
                goto branch_yes_14;
            }
            else
            {
                goto branch_no_14;
            }
            branch_yes_14:;
            {
                PyObject *tmp_called_name_9;
                PyObject *tmp_call_result_7;
                CHECK_OBJECT( tmp_with_2__exit );
                tmp_called_name_9 = tmp_with_2__exit;
                frame_da69626f2bcb841bef747fa3b9caaded->m_frame.f_lineno = 262;
                tmp_call_result_7 = CALL_FUNCTION_WITH_ARGS3( tmp_called_name_9, &PyTuple_GET_ITEM( const_tuple_none_none_none_tuple, 0 ) );

                if ( tmp_call_result_7 == NULL )
                {
                    assert( ERROR_OCCURRED() );

                    FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                    exception_lineno = 262;
                    type_description_1 = "oooooooooooo";
                    goto try_except_handler_9;
                }
                Py_DECREF( tmp_call_result_7 );
            }
            branch_no_14:;
        }
        goto try_end_12;
        // Return handler code:
        try_return_handler_9:;
        CHECK_OBJECT( (PyObject *)tmp_with_2__source );
        Py_DECREF( tmp_with_2__source );
        tmp_with_2__source = NULL;

        CHECK_OBJECT( (PyObject *)tmp_with_2__enter );
        Py_DECREF( tmp_with_2__enter );
        tmp_with_2__enter = NULL;

        CHECK_OBJECT( (PyObject *)tmp_with_2__exit );
        Py_DECREF( tmp_with_2__exit );
        tmp_with_2__exit = NULL;

        goto frame_return_exit_1;
        // Exception handler code:
        try_except_handler_9:;
        exception_keeper_type_12 = exception_type;
        exception_keeper_value_12 = exception_value;
        exception_keeper_tb_12 = exception_tb;
        exception_keeper_lineno_12 = exception_lineno;
        exception_type = NULL;
        exception_value = NULL;
        exception_tb = NULL;
        exception_lineno = 0;

        Py_XDECREF( tmp_with_2__source );
        tmp_with_2__source = NULL;

        Py_XDECREF( tmp_with_2__enter );
        tmp_with_2__enter = NULL;

        Py_XDECREF( tmp_with_2__exit );
        tmp_with_2__exit = NULL;

        // Re-raise.
        exception_type = exception_keeper_type_12;
        exception_value = exception_keeper_value_12;
        exception_tb = exception_keeper_tb_12;
        exception_lineno = exception_keeper_lineno_12;

        goto frame_exception_exit_1;
        // End of try:
        try_end_12:;
        CHECK_OBJECT( (PyObject *)tmp_with_2__source );
        Py_DECREF( tmp_with_2__source );
        tmp_with_2__source = NULL;

        CHECK_OBJECT( (PyObject *)tmp_with_2__enter );
        Py_DECREF( tmp_with_2__enter );
        tmp_with_2__enter = NULL;

        CHECK_OBJECT( (PyObject *)tmp_with_2__exit );
        Py_DECREF( tmp_with_2__exit );
        tmp_with_2__exit = NULL;

        branch_no_9:;
    }
    {
        nuitka_bool tmp_condition_result_15;
        PyObject *tmp_called_instance_7;
        PyObject *tmp_source_name_7;
        PyObject *tmp_mvar_value_3;
        PyObject *tmp_call_result_8;
        int tmp_truth_name_3;
        tmp_mvar_value_3 = GET_STRING_DICT_VALUE( moduledict_platform, (Nuitka_StringObject *)const_str_plain_os );

        if (unlikely( tmp_mvar_value_3 == NULL ))
        {
            tmp_mvar_value_3 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_os );
        }

        if ( tmp_mvar_value_3 == NULL )
        {

            exception_type = PyExc_NameError;
            Py_INCREF( exception_type );
            exception_value = PyUnicode_FromFormat( "name '%s' is not defined", "os" );
            exception_tb = NULL;
            NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
            CHAIN_EXCEPTION( exception_value );

            exception_lineno = 270;
            type_description_1 = "oooooooooooo";
            goto frame_exception_exit_1;
        }

        tmp_source_name_7 = tmp_mvar_value_3;
        tmp_called_instance_7 = LOOKUP_ATTRIBUTE( tmp_source_name_7, const_str_plain_path );
        if ( tmp_called_instance_7 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 270;
            type_description_1 = "oooooooooooo";
            goto frame_exception_exit_1;
        }
        frame_da69626f2bcb841bef747fa3b9caaded->m_frame.f_lineno = 270;
        tmp_call_result_8 = CALL_METHOD_WITH_ARGS1( tmp_called_instance_7, const_str_plain_isdir, &PyTuple_GET_ITEM( const_tuple_str_digest_2a97892845181b4de397b7c5260f5eae_tuple, 0 ) );

        Py_DECREF( tmp_called_instance_7 );
        if ( tmp_call_result_8 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 270;
            type_description_1 = "oooooooooooo";
            goto frame_exception_exit_1;
        }
        tmp_truth_name_3 = CHECK_IF_TRUE( tmp_call_result_8 );
        if ( tmp_truth_name_3 == -1 )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
            Py_DECREF( tmp_call_result_8 );

            exception_lineno = 270;
            type_description_1 = "oooooooooooo";
            goto frame_exception_exit_1;
        }
        tmp_condition_result_15 = tmp_truth_name_3 == 1 ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
        Py_DECREF( tmp_call_result_8 );
        if ( tmp_condition_result_15 == NUITKA_BOOL_TRUE )
        {
            goto branch_yes_15;
        }
        else
        {
            goto branch_no_15;
        }
        branch_yes_15:;
        {
            PyObject *tmp_assign_source_29;
            PyObject *tmp_called_instance_8;
            PyObject *tmp_mvar_value_4;
            tmp_mvar_value_4 = GET_STRING_DICT_VALUE( moduledict_platform, (Nuitka_StringObject *)const_str_plain_os );

            if (unlikely( tmp_mvar_value_4 == NULL ))
            {
                tmp_mvar_value_4 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_os );
            }

            if ( tmp_mvar_value_4 == NULL )
            {

                exception_type = PyExc_NameError;
                Py_INCREF( exception_type );
                exception_value = PyUnicode_FromFormat( "name '%s' is not defined", "os" );
                exception_tb = NULL;
                NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
                CHAIN_EXCEPTION( exception_value );

                exception_lineno = 272;
                type_description_1 = "oooooooooooo";
                goto frame_exception_exit_1;
            }

            tmp_called_instance_8 = tmp_mvar_value_4;
            frame_da69626f2bcb841bef747fa3b9caaded->m_frame.f_lineno = 272;
            tmp_assign_source_29 = CALL_METHOD_WITH_ARGS1( tmp_called_instance_8, const_str_plain_listdir, &PyTuple_GET_ITEM( const_tuple_str_digest_2a97892845181b4de397b7c5260f5eae_tuple, 0 ) );

            if ( tmp_assign_source_29 == NULL )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 272;
                type_description_1 = "oooooooooooo";
                goto frame_exception_exit_1;
            }
            assert( var_verfiles == NULL );
            var_verfiles = tmp_assign_source_29;
        }
        {
            PyObject *tmp_assign_source_30;
            PyObject *tmp_iter_arg_4;
            PyObject *tmp_xrange_low_1;
            PyObject *tmp_left_name_1;
            PyObject *tmp_len_arg_3;
            PyObject *tmp_right_name_1;
            PyObject *tmp_xrange_high_1;
            PyObject *tmp_xrange_step_1;
            CHECK_OBJECT( var_verfiles );
            tmp_len_arg_3 = var_verfiles;
            tmp_left_name_1 = BUILTIN_LEN( tmp_len_arg_3 );
            if ( tmp_left_name_1 == NULL )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 273;
                type_description_1 = "oooooooooooo";
                goto frame_exception_exit_1;
            }
            tmp_right_name_1 = const_int_pos_1;
            tmp_xrange_low_1 = BINARY_OPERATION_SUB( tmp_left_name_1, tmp_right_name_1 );
            Py_DECREF( tmp_left_name_1 );
            if ( tmp_xrange_low_1 == NULL )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 273;
                type_description_1 = "oooooooooooo";
                goto frame_exception_exit_1;
            }
            tmp_xrange_high_1 = const_int_neg_1;
            tmp_xrange_step_1 = const_int_neg_1;
            tmp_iter_arg_4 = BUILTIN_XRANGE3( tmp_xrange_low_1, tmp_xrange_high_1, tmp_xrange_step_1 );
            Py_DECREF( tmp_xrange_low_1 );
            if ( tmp_iter_arg_4 == NULL )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 273;
                type_description_1 = "oooooooooooo";
                goto frame_exception_exit_1;
            }
            tmp_assign_source_30 = MAKE_ITERATOR( tmp_iter_arg_4 );
            Py_DECREF( tmp_iter_arg_4 );
            if ( tmp_assign_source_30 == NULL )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 273;
                type_description_1 = "oooooooooooo";
                goto frame_exception_exit_1;
            }
            assert( tmp_for_loop_3__for_iterator == NULL );
            tmp_for_loop_3__for_iterator = tmp_assign_source_30;
        }
        // Tried code:
        loop_start_3:;
        {
            PyObject *tmp_next_source_3;
            PyObject *tmp_assign_source_31;
            CHECK_OBJECT( tmp_for_loop_3__for_iterator );
            tmp_next_source_3 = tmp_for_loop_3__for_iterator;
            tmp_assign_source_31 = ITERATOR_NEXT( tmp_next_source_3 );
            if ( tmp_assign_source_31 == NULL )
            {
                if ( CHECK_AND_CLEAR_STOP_ITERATION_OCCURRED() )
                {

                    goto loop_end_3;
                }
                else
                {

                    FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
                    type_description_1 = "oooooooooooo";
                    exception_lineno = 273;
                    goto try_except_handler_14;
                }
            }

            {
                PyObject *old = tmp_for_loop_3__iter_value;
                tmp_for_loop_3__iter_value = tmp_assign_source_31;
                Py_XDECREF( old );
            }

        }
        {
            PyObject *tmp_assign_source_32;
            CHECK_OBJECT( tmp_for_loop_3__iter_value );
            tmp_assign_source_32 = tmp_for_loop_3__iter_value;
            {
                PyObject *old = var_n;
                var_n = tmp_assign_source_32;
                Py_INCREF( var_n );
                Py_XDECREF( old );
            }

        }
        {
            nuitka_bool tmp_condition_result_16;
            PyObject *tmp_compexpr_left_12;
            PyObject *tmp_compexpr_right_12;
            PyObject *tmp_subscribed_name_4;
            PyObject *tmp_subscribed_name_5;
            PyObject *tmp_subscript_name_4;
            PyObject *tmp_subscript_name_5;
            CHECK_OBJECT( var_verfiles );
            tmp_subscribed_name_5 = var_verfiles;
            CHECK_OBJECT( var_n );
            tmp_subscript_name_4 = var_n;
            tmp_subscribed_name_4 = LOOKUP_SUBSCRIPT( tmp_subscribed_name_5, tmp_subscript_name_4 );
            if ( tmp_subscribed_name_4 == NULL )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 274;
                type_description_1 = "oooooooooooo";
                goto try_except_handler_14;
            }
            tmp_subscript_name_5 = const_slice_none_int_pos_14_none;
            tmp_compexpr_left_12 = LOOKUP_SUBSCRIPT( tmp_subscribed_name_4, tmp_subscript_name_5 );
            Py_DECREF( tmp_subscribed_name_4 );
            if ( tmp_compexpr_left_12 == NULL )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 274;
                type_description_1 = "oooooooooooo";
                goto try_except_handler_14;
            }
            tmp_compexpr_right_12 = const_str_digest_d29a18585fda29d4884e7ff23cd583db;
            tmp_res = RICH_COMPARE_BOOL_NOTEQ_OBJECT_OBJECT( tmp_compexpr_left_12, tmp_compexpr_right_12 );
            Py_DECREF( tmp_compexpr_left_12 );
            if ( tmp_res == -1 )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 274;
                type_description_1 = "oooooooooooo";
                goto try_except_handler_14;
            }
            tmp_condition_result_16 = ( tmp_res != 0 ) ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
            if ( tmp_condition_result_16 == NUITKA_BOOL_TRUE )
            {
                goto branch_yes_16;
            }
            else
            {
                goto branch_no_16;
            }
            branch_yes_16:;
            {
                PyObject *tmp_delsubscr_target_1;
                PyObject *tmp_delsubscr_subscript_1;
                CHECK_OBJECT( var_verfiles );
                tmp_delsubscr_target_1 = var_verfiles;
                CHECK_OBJECT( var_n );
                tmp_delsubscr_subscript_1 = var_n;
                tmp_result = DEL_SUBSCRIPT( tmp_delsubscr_target_1, tmp_delsubscr_subscript_1 );
                if ( tmp_result == false )
                {
                    assert( ERROR_OCCURRED() );

                    FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                    exception_lineno = 275;
                    type_description_1 = "oooooooooooo";
                    goto try_except_handler_14;
                }
            }
            branch_no_16:;
        }
        if ( CONSIDER_THREADING() == false )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 273;
            type_description_1 = "oooooooooooo";
            goto try_except_handler_14;
        }
        goto loop_start_3;
        loop_end_3:;
        goto try_end_13;
        // Exception handler code:
        try_except_handler_14:;
        exception_keeper_type_13 = exception_type;
        exception_keeper_value_13 = exception_value;
        exception_keeper_tb_13 = exception_tb;
        exception_keeper_lineno_13 = exception_lineno;
        exception_type = NULL;
        exception_value = NULL;
        exception_tb = NULL;
        exception_lineno = 0;

        Py_XDECREF( tmp_for_loop_3__iter_value );
        tmp_for_loop_3__iter_value = NULL;

        CHECK_OBJECT( (PyObject *)tmp_for_loop_3__for_iterator );
        Py_DECREF( tmp_for_loop_3__for_iterator );
        tmp_for_loop_3__for_iterator = NULL;

        // Re-raise.
        exception_type = exception_keeper_type_13;
        exception_value = exception_keeper_value_13;
        exception_tb = exception_keeper_tb_13;
        exception_lineno = exception_keeper_lineno_13;

        goto frame_exception_exit_1;
        // End of try:
        try_end_13:;
        Py_XDECREF( tmp_for_loop_3__iter_value );
        tmp_for_loop_3__iter_value = NULL;

        CHECK_OBJECT( (PyObject *)tmp_for_loop_3__for_iterator );
        Py_DECREF( tmp_for_loop_3__for_iterator );
        tmp_for_loop_3__for_iterator = NULL;

        {
            nuitka_bool tmp_condition_result_17;
            int tmp_truth_name_4;
            CHECK_OBJECT( var_verfiles );
            tmp_truth_name_4 = CHECK_IF_TRUE( var_verfiles );
            if ( tmp_truth_name_4 == -1 )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 276;
                type_description_1 = "oooooooooooo";
                goto frame_exception_exit_1;
            }
            tmp_condition_result_17 = tmp_truth_name_4 == 1 ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
            if ( tmp_condition_result_17 == NUITKA_BOOL_TRUE )
            {
                goto branch_yes_17;
            }
            else
            {
                goto branch_no_17;
            }
            branch_yes_17:;
            {
                PyObject *tmp_called_instance_9;
                PyObject *tmp_call_result_9;
                CHECK_OBJECT( var_verfiles );
                tmp_called_instance_9 = var_verfiles;
                frame_da69626f2bcb841bef747fa3b9caaded->m_frame.f_lineno = 277;
                tmp_call_result_9 = CALL_METHOD_NO_ARGS( tmp_called_instance_9, const_str_plain_sort );
                if ( tmp_call_result_9 == NULL )
                {
                    assert( ERROR_OCCURRED() );

                    FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                    exception_lineno = 277;
                    type_description_1 = "oooooooooooo";
                    goto frame_exception_exit_1;
                }
                Py_DECREF( tmp_call_result_9 );
            }
            Py_XDECREF( par_distname );
            par_distname = NULL;

            {
                PyObject *tmp_assign_source_33;
                PyObject *tmp_subscribed_name_6;
                PyObject *tmp_subscribed_name_7;
                PyObject *tmp_subscript_name_6;
                PyObject *tmp_subscript_name_7;
                CHECK_OBJECT( var_verfiles );
                tmp_subscribed_name_7 = var_verfiles;
                tmp_subscript_name_6 = const_int_neg_1;
                tmp_subscribed_name_6 = LOOKUP_SUBSCRIPT_CONST( tmp_subscribed_name_7, tmp_subscript_name_6, -1 );
                if ( tmp_subscribed_name_6 == NULL )
                {
                    assert( ERROR_OCCURRED() );

                    FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                    exception_lineno = 279;
                    type_description_1 = "oooooooooooo";
                    goto frame_exception_exit_1;
                }
                tmp_subscript_name_7 = const_slice_int_pos_14_none_none;
                tmp_assign_source_33 = LOOKUP_SUBSCRIPT( tmp_subscribed_name_6, tmp_subscript_name_7 );
                Py_DECREF( tmp_subscribed_name_6 );
                if ( tmp_assign_source_33 == NULL )
                {
                    assert( ERROR_OCCURRED() );

                    FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                    exception_lineno = 279;
                    type_description_1 = "oooooooooooo";
                    goto frame_exception_exit_1;
                }
                {
                    PyObject *old = par_version;
                    assert( old != NULL );
                    par_version = tmp_assign_source_33;
                    Py_DECREF( old );
                }

            }
            {
                PyObject *tmp_tuple_element_3;
                tmp_tuple_element_3 = const_str_plain_slackware;
                tmp_return_value = PyTuple_New( 3 );
                Py_INCREF( tmp_tuple_element_3 );
                PyTuple_SET_ITEM( tmp_return_value, 0, tmp_tuple_element_3 );
                CHECK_OBJECT( par_version );
                tmp_tuple_element_3 = par_version;
                Py_INCREF( tmp_tuple_element_3 );
                PyTuple_SET_ITEM( tmp_return_value, 1, tmp_tuple_element_3 );
                CHECK_OBJECT( par_id );
                tmp_tuple_element_3 = par_id;
                Py_INCREF( tmp_tuple_element_3 );
                PyTuple_SET_ITEM( tmp_return_value, 2, tmp_tuple_element_3 );
                goto frame_return_exit_1;
            }
            branch_no_17:;
        }
        branch_no_15:;
    }

#if 0
    RESTORE_FRAME_EXCEPTION( frame_da69626f2bcb841bef747fa3b9caaded );
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto frame_no_exception_1;

    frame_return_exit_1:;
#if 0
    RESTORE_FRAME_EXCEPTION( frame_da69626f2bcb841bef747fa3b9caaded );
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto try_return_handler_1;

    frame_exception_exit_1:;

#if 0
    RESTORE_FRAME_EXCEPTION( frame_da69626f2bcb841bef747fa3b9caaded );
#endif

    if ( exception_tb == NULL )
    {
        exception_tb = MAKE_TRACEBACK( frame_da69626f2bcb841bef747fa3b9caaded, exception_lineno );
    }
    else if ( exception_tb->tb_frame != &frame_da69626f2bcb841bef747fa3b9caaded->m_frame )
    {
        exception_tb = ADD_TRACEBACK( exception_tb, frame_da69626f2bcb841bef747fa3b9caaded, exception_lineno );
    }

    // Attachs locals to frame if any.
    Nuitka_Frame_AttachLocals(
        (struct Nuitka_FrameObject *)frame_da69626f2bcb841bef747fa3b9caaded,
        type_description_1,
        par_distname,
        par_version,
        par_id,
        var_f,
        var_line,
        var_tv,
        var_tag,
        var_value,
        var_values,
        var_pkg,
        var_verfiles,
        var_n
    );


    // Release cached frame.
    if ( frame_da69626f2bcb841bef747fa3b9caaded == cache_frame_da69626f2bcb841bef747fa3b9caaded )
    {
        Py_DECREF( frame_da69626f2bcb841bef747fa3b9caaded );
    }
    cache_frame_da69626f2bcb841bef747fa3b9caaded = NULL;

    assertFrameObject( frame_da69626f2bcb841bef747fa3b9caaded );

    // Put the previous frame back on top.
    popFrameStack();

    // Return the error.
    goto try_except_handler_1;

    frame_no_exception_1:;
    {
        PyObject *tmp_tuple_element_4;
        CHECK_OBJECT( par_distname );
        tmp_tuple_element_4 = par_distname;
        tmp_return_value = PyTuple_New( 3 );
        Py_INCREF( tmp_tuple_element_4 );
        PyTuple_SET_ITEM( tmp_return_value, 0, tmp_tuple_element_4 );
        CHECK_OBJECT( par_version );
        tmp_tuple_element_4 = par_version;
        Py_INCREF( tmp_tuple_element_4 );
        PyTuple_SET_ITEM( tmp_return_value, 1, tmp_tuple_element_4 );
        CHECK_OBJECT( par_id );
        tmp_tuple_element_4 = par_id;
        Py_INCREF( tmp_tuple_element_4 );
        PyTuple_SET_ITEM( tmp_return_value, 2, tmp_tuple_element_4 );
        goto try_return_handler_1;
    }
    // tried codes exits in all cases
    NUITKA_CANNOT_GET_HERE( platform$$$function_3__dist_try_harder );
    return NULL;
    // Return handler code:
    try_return_handler_1:;
    Py_XDECREF( par_distname );
    par_distname = NULL;

    Py_XDECREF( par_version );
    par_version = NULL;

    Py_XDECREF( par_id );
    par_id = NULL;

    Py_XDECREF( var_f );
    var_f = NULL;

    Py_XDECREF( var_line );
    var_line = NULL;

    Py_XDECREF( var_tv );
    var_tv = NULL;

    Py_XDECREF( var_tag );
    var_tag = NULL;

    Py_XDECREF( var_value );
    var_value = NULL;

    Py_XDECREF( var_values );
    var_values = NULL;

    Py_XDECREF( var_pkg );
    var_pkg = NULL;

    Py_XDECREF( var_verfiles );
    var_verfiles = NULL;

    Py_XDECREF( var_n );
    var_n = NULL;

    goto function_return_exit;
    // Exception handler code:
    try_except_handler_1:;
    exception_keeper_type_14 = exception_type;
    exception_keeper_value_14 = exception_value;
    exception_keeper_tb_14 = exception_tb;
    exception_keeper_lineno_14 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    Py_XDECREF( par_distname );
    par_distname = NULL;

    Py_XDECREF( par_version );
    par_version = NULL;

    Py_XDECREF( par_id );
    par_id = NULL;

    Py_XDECREF( var_f );
    var_f = NULL;

    Py_XDECREF( var_line );
    var_line = NULL;

    Py_XDECREF( var_tv );
    var_tv = NULL;

    Py_XDECREF( var_tag );
    var_tag = NULL;

    Py_XDECREF( var_value );
    var_value = NULL;

    Py_XDECREF( var_values );
    var_values = NULL;

    Py_XDECREF( var_pkg );
    var_pkg = NULL;

    Py_XDECREF( var_verfiles );
    var_verfiles = NULL;

    Py_XDECREF( var_n );
    var_n = NULL;

    // Re-raise.
    exception_type = exception_keeper_type_14;
    exception_value = exception_keeper_value_14;
    exception_tb = exception_keeper_tb_14;
    exception_lineno = exception_keeper_lineno_14;

    goto function_exception_exit;
    // End of try:

    // Return statement must have exited already.
    NUITKA_CANNOT_GET_HERE( platform$$$function_3__dist_try_harder );
    return NULL;

function_exception_exit:
    assert( exception_type );
    RESTORE_ERROR_OCCURRED( exception_type, exception_value, exception_tb );

    return NULL;

function_return_exit:
   // Function cleanup code if any.


   // Actual function exit with return value, making sure we did not make
   // the error status worse despite non-NULL return.
   CHECK_OBJECT( tmp_return_value );
   assert( had_error || !ERROR_OCCURRED() );
   return tmp_return_value;
}


static PyObject *impl_platform$$$function_4__parse_release_file( struct Nuitka_FunctionObject const *self, PyObject **python_pars )
{
    // Preserve error status for checks
#ifndef __NUITKA_NO_ASSERT__
    NUITKA_MAY_BE_UNUSED bool had_error = ERROR_OCCURRED();
#endif

    // Local variable declarations.
    PyObject *par_firstline = python_pars[ 0 ];
    PyObject *var_version = NULL;
    PyObject *var_id = NULL;
    PyObject *var_m = NULL;
    PyObject *var_l = NULL;
    struct Nuitka_FrameObject *frame_b6f7d54bfd0f79eb0ae58adcb8e364fb;
    NUITKA_MAY_BE_UNUSED char const *type_description_1 = NULL;
    PyObject *exception_type = NULL;
    PyObject *exception_value = NULL;
    PyTracebackObject *exception_tb = NULL;
    NUITKA_MAY_BE_UNUSED int exception_lineno = 0;
    PyObject *tmp_return_value = NULL;
    int tmp_res;
    static struct Nuitka_FrameObject *cache_frame_b6f7d54bfd0f79eb0ae58adcb8e364fb = NULL;
    PyObject *exception_keeper_type_1;
    PyObject *exception_keeper_value_1;
    PyTracebackObject *exception_keeper_tb_1;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_1;

    // Actual function body.
    {
        PyObject *tmp_assign_source_1;
        tmp_assign_source_1 = const_str_empty;
        assert( var_version == NULL );
        Py_INCREF( tmp_assign_source_1 );
        var_version = tmp_assign_source_1;
    }
    {
        PyObject *tmp_assign_source_2;
        tmp_assign_source_2 = const_str_empty;
        assert( var_id == NULL );
        Py_INCREF( tmp_assign_source_2 );
        var_id = tmp_assign_source_2;
    }
    // Tried code:
    MAKE_OR_REUSE_FRAME( cache_frame_b6f7d54bfd0f79eb0ae58adcb8e364fb, codeobj_b6f7d54bfd0f79eb0ae58adcb8e364fb, module_platform, sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *) );
    frame_b6f7d54bfd0f79eb0ae58adcb8e364fb = cache_frame_b6f7d54bfd0f79eb0ae58adcb8e364fb;

    // Push the new frame as the currently active one.
    pushFrameStack( frame_b6f7d54bfd0f79eb0ae58adcb8e364fb );

    // Mark the frame object as in use, ref count 1 will be up for reuse.
    assert( Py_REFCNT( frame_b6f7d54bfd0f79eb0ae58adcb8e364fb ) == 2 ); // Frame stack

    // Framed code:
    {
        PyObject *tmp_assign_source_3;
        PyObject *tmp_called_instance_1;
        PyObject *tmp_mvar_value_1;
        PyObject *tmp_args_element_name_1;
        tmp_mvar_value_1 = GET_STRING_DICT_VALUE( moduledict_platform, (Nuitka_StringObject *)const_str_plain__lsb_release_version );

        if (unlikely( tmp_mvar_value_1 == NULL ))
        {
            tmp_mvar_value_1 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain__lsb_release_version );
        }

        if ( tmp_mvar_value_1 == NULL )
        {

            exception_type = PyExc_NameError;
            Py_INCREF( exception_type );
            exception_value = PyUnicode_FromFormat( "name '%s' is not defined", "_lsb_release_version" );
            exception_tb = NULL;
            NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
            CHAIN_EXCEPTION( exception_value );

            exception_lineno = 313;
            type_description_1 = "ooooo";
            goto frame_exception_exit_1;
        }

        tmp_called_instance_1 = tmp_mvar_value_1;
        CHECK_OBJECT( par_firstline );
        tmp_args_element_name_1 = par_firstline;
        frame_b6f7d54bfd0f79eb0ae58adcb8e364fb->m_frame.f_lineno = 313;
        {
            PyObject *call_args[] = { tmp_args_element_name_1 };
            tmp_assign_source_3 = CALL_METHOD_WITH_ARGS1( tmp_called_instance_1, const_str_plain_match, call_args );
        }

        if ( tmp_assign_source_3 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 313;
            type_description_1 = "ooooo";
            goto frame_exception_exit_1;
        }
        assert( var_m == NULL );
        var_m = tmp_assign_source_3;
    }
    {
        nuitka_bool tmp_condition_result_1;
        PyObject *tmp_compexpr_left_1;
        PyObject *tmp_compexpr_right_1;
        CHECK_OBJECT( var_m );
        tmp_compexpr_left_1 = var_m;
        tmp_compexpr_right_1 = Py_None;
        tmp_condition_result_1 = ( tmp_compexpr_left_1 != tmp_compexpr_right_1 ) ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
        if ( tmp_condition_result_1 == NUITKA_BOOL_TRUE )
        {
            goto branch_yes_1;
        }
        else
        {
            goto branch_no_1;
        }
        branch_yes_1:;
        {
            PyObject *tmp_tuple_arg_1;
            PyObject *tmp_called_instance_2;
            CHECK_OBJECT( var_m );
            tmp_called_instance_2 = var_m;
            frame_b6f7d54bfd0f79eb0ae58adcb8e364fb->m_frame.f_lineno = 316;
            tmp_tuple_arg_1 = CALL_METHOD_NO_ARGS( tmp_called_instance_2, const_str_plain_groups );
            if ( tmp_tuple_arg_1 == NULL )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 316;
                type_description_1 = "ooooo";
                goto frame_exception_exit_1;
            }
            tmp_return_value = PySequence_Tuple( tmp_tuple_arg_1 );
            Py_DECREF( tmp_tuple_arg_1 );
            if ( tmp_return_value == NULL )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 316;
                type_description_1 = "ooooo";
                goto frame_exception_exit_1;
            }
            goto frame_return_exit_1;
        }
        branch_no_1:;
    }
    {
        PyObject *tmp_assign_source_4;
        PyObject *tmp_called_instance_3;
        PyObject *tmp_mvar_value_2;
        PyObject *tmp_args_element_name_2;
        tmp_mvar_value_2 = GET_STRING_DICT_VALUE( moduledict_platform, (Nuitka_StringObject *)const_str_plain__release_version );

        if (unlikely( tmp_mvar_value_2 == NULL ))
        {
            tmp_mvar_value_2 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain__release_version );
        }

        if ( tmp_mvar_value_2 == NULL )
        {

            exception_type = PyExc_NameError;
            Py_INCREF( exception_type );
            exception_value = PyUnicode_FromFormat( "name '%s' is not defined", "_release_version" );
            exception_tb = NULL;
            NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
            CHAIN_EXCEPTION( exception_value );

            exception_lineno = 319;
            type_description_1 = "ooooo";
            goto frame_exception_exit_1;
        }

        tmp_called_instance_3 = tmp_mvar_value_2;
        CHECK_OBJECT( par_firstline );
        tmp_args_element_name_2 = par_firstline;
        frame_b6f7d54bfd0f79eb0ae58adcb8e364fb->m_frame.f_lineno = 319;
        {
            PyObject *call_args[] = { tmp_args_element_name_2 };
            tmp_assign_source_4 = CALL_METHOD_WITH_ARGS1( tmp_called_instance_3, const_str_plain_match, call_args );
        }

        if ( tmp_assign_source_4 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 319;
            type_description_1 = "ooooo";
            goto frame_exception_exit_1;
        }
        {
            PyObject *old = var_m;
            assert( old != NULL );
            var_m = tmp_assign_source_4;
            Py_DECREF( old );
        }

    }
    {
        nuitka_bool tmp_condition_result_2;
        PyObject *tmp_compexpr_left_2;
        PyObject *tmp_compexpr_right_2;
        CHECK_OBJECT( var_m );
        tmp_compexpr_left_2 = var_m;
        tmp_compexpr_right_2 = Py_None;
        tmp_condition_result_2 = ( tmp_compexpr_left_2 != tmp_compexpr_right_2 ) ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
        if ( tmp_condition_result_2 == NUITKA_BOOL_TRUE )
        {
            goto branch_yes_2;
        }
        else
        {
            goto branch_no_2;
        }
        branch_yes_2:;
        {
            PyObject *tmp_tuple_arg_2;
            PyObject *tmp_called_instance_4;
            CHECK_OBJECT( var_m );
            tmp_called_instance_4 = var_m;
            frame_b6f7d54bfd0f79eb0ae58adcb8e364fb->m_frame.f_lineno = 321;
            tmp_tuple_arg_2 = CALL_METHOD_NO_ARGS( tmp_called_instance_4, const_str_plain_groups );
            if ( tmp_tuple_arg_2 == NULL )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 321;
                type_description_1 = "ooooo";
                goto frame_exception_exit_1;
            }
            tmp_return_value = PySequence_Tuple( tmp_tuple_arg_2 );
            Py_DECREF( tmp_tuple_arg_2 );
            if ( tmp_return_value == NULL )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 321;
                type_description_1 = "ooooo";
                goto frame_exception_exit_1;
            }
            goto frame_return_exit_1;
        }
        branch_no_2:;
    }
    {
        PyObject *tmp_assign_source_5;
        PyObject *tmp_called_instance_5;
        PyObject *tmp_called_instance_6;
        CHECK_OBJECT( par_firstline );
        tmp_called_instance_6 = par_firstline;
        frame_b6f7d54bfd0f79eb0ae58adcb8e364fb->m_frame.f_lineno = 324;
        tmp_called_instance_5 = CALL_METHOD_NO_ARGS( tmp_called_instance_6, const_str_plain_strip );
        if ( tmp_called_instance_5 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 324;
            type_description_1 = "ooooo";
            goto frame_exception_exit_1;
        }
        frame_b6f7d54bfd0f79eb0ae58adcb8e364fb->m_frame.f_lineno = 324;
        tmp_assign_source_5 = CALL_METHOD_NO_ARGS( tmp_called_instance_5, const_str_plain_split );
        Py_DECREF( tmp_called_instance_5 );
        if ( tmp_assign_source_5 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 324;
            type_description_1 = "ooooo";
            goto frame_exception_exit_1;
        }
        assert( var_l == NULL );
        var_l = tmp_assign_source_5;
    }
    {
        nuitka_bool tmp_condition_result_3;
        int tmp_truth_name_1;
        CHECK_OBJECT( var_l );
        tmp_truth_name_1 = CHECK_IF_TRUE( var_l );
        if ( tmp_truth_name_1 == -1 )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 325;
            type_description_1 = "ooooo";
            goto frame_exception_exit_1;
        }
        tmp_condition_result_3 = tmp_truth_name_1 == 1 ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
        if ( tmp_condition_result_3 == NUITKA_BOOL_TRUE )
        {
            goto branch_yes_3;
        }
        else
        {
            goto branch_no_3;
        }
        branch_yes_3:;
        {
            PyObject *tmp_assign_source_6;
            PyObject *tmp_subscribed_name_1;
            PyObject *tmp_subscript_name_1;
            CHECK_OBJECT( var_l );
            tmp_subscribed_name_1 = var_l;
            tmp_subscript_name_1 = const_int_0;
            tmp_assign_source_6 = LOOKUP_SUBSCRIPT_CONST( tmp_subscribed_name_1, tmp_subscript_name_1, 0 );
            if ( tmp_assign_source_6 == NULL )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 326;
                type_description_1 = "ooooo";
                goto frame_exception_exit_1;
            }
            {
                PyObject *old = var_version;
                assert( old != NULL );
                var_version = tmp_assign_source_6;
                Py_DECREF( old );
            }

        }
        {
            nuitka_bool tmp_condition_result_4;
            PyObject *tmp_compexpr_left_3;
            PyObject *tmp_compexpr_right_3;
            PyObject *tmp_len_arg_1;
            CHECK_OBJECT( var_l );
            tmp_len_arg_1 = var_l;
            tmp_compexpr_left_3 = BUILTIN_LEN( tmp_len_arg_1 );
            if ( tmp_compexpr_left_3 == NULL )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 327;
                type_description_1 = "ooooo";
                goto frame_exception_exit_1;
            }
            tmp_compexpr_right_3 = const_int_pos_1;
            tmp_res = RICH_COMPARE_BOOL_GT_OBJECT_OBJECT( tmp_compexpr_left_3, tmp_compexpr_right_3 );
            Py_DECREF( tmp_compexpr_left_3 );
            assert( !(tmp_res == -1) );
            tmp_condition_result_4 = ( tmp_res != 0 ) ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
            if ( tmp_condition_result_4 == NUITKA_BOOL_TRUE )
            {
                goto branch_yes_4;
            }
            else
            {
                goto branch_no_4;
            }
            branch_yes_4:;
            {
                PyObject *tmp_assign_source_7;
                PyObject *tmp_subscribed_name_2;
                PyObject *tmp_subscript_name_2;
                CHECK_OBJECT( var_l );
                tmp_subscribed_name_2 = var_l;
                tmp_subscript_name_2 = const_int_pos_1;
                tmp_assign_source_7 = LOOKUP_SUBSCRIPT_CONST( tmp_subscribed_name_2, tmp_subscript_name_2, 1 );
                if ( tmp_assign_source_7 == NULL )
                {
                    assert( ERROR_OCCURRED() );

                    FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                    exception_lineno = 328;
                    type_description_1 = "ooooo";
                    goto frame_exception_exit_1;
                }
                {
                    PyObject *old = var_id;
                    assert( old != NULL );
                    var_id = tmp_assign_source_7;
                    Py_DECREF( old );
                }

            }
            branch_no_4:;
        }
        branch_no_3:;
    }
    {
        PyObject *tmp_tuple_element_1;
        tmp_tuple_element_1 = const_str_empty;
        tmp_return_value = PyTuple_New( 3 );
        Py_INCREF( tmp_tuple_element_1 );
        PyTuple_SET_ITEM( tmp_return_value, 0, tmp_tuple_element_1 );
        CHECK_OBJECT( var_version );
        tmp_tuple_element_1 = var_version;
        Py_INCREF( tmp_tuple_element_1 );
        PyTuple_SET_ITEM( tmp_return_value, 1, tmp_tuple_element_1 );
        if ( var_id == NULL )
        {
            Py_DECREF( tmp_return_value );
            exception_type = PyExc_UnboundLocalError;
            Py_INCREF( exception_type );
            exception_value = PyUnicode_FromFormat( "local variable '%s' referenced before assignment", "id" );
            exception_tb = NULL;
            NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
            CHAIN_EXCEPTION( exception_value );

            exception_lineno = 329;
            type_description_1 = "ooooo";
            goto frame_exception_exit_1;
        }

        tmp_tuple_element_1 = var_id;
        Py_INCREF( tmp_tuple_element_1 );
        PyTuple_SET_ITEM( tmp_return_value, 2, tmp_tuple_element_1 );
        goto frame_return_exit_1;
    }

#if 0
    RESTORE_FRAME_EXCEPTION( frame_b6f7d54bfd0f79eb0ae58adcb8e364fb );
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto frame_no_exception_1;

    frame_return_exit_1:;
#if 0
    RESTORE_FRAME_EXCEPTION( frame_b6f7d54bfd0f79eb0ae58adcb8e364fb );
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto try_return_handler_1;

    frame_exception_exit_1:;

#if 0
    RESTORE_FRAME_EXCEPTION( frame_b6f7d54bfd0f79eb0ae58adcb8e364fb );
#endif

    if ( exception_tb == NULL )
    {
        exception_tb = MAKE_TRACEBACK( frame_b6f7d54bfd0f79eb0ae58adcb8e364fb, exception_lineno );
    }
    else if ( exception_tb->tb_frame != &frame_b6f7d54bfd0f79eb0ae58adcb8e364fb->m_frame )
    {
        exception_tb = ADD_TRACEBACK( exception_tb, frame_b6f7d54bfd0f79eb0ae58adcb8e364fb, exception_lineno );
    }

    // Attachs locals to frame if any.
    Nuitka_Frame_AttachLocals(
        (struct Nuitka_FrameObject *)frame_b6f7d54bfd0f79eb0ae58adcb8e364fb,
        type_description_1,
        par_firstline,
        var_version,
        var_id,
        var_m,
        var_l
    );


    // Release cached frame.
    if ( frame_b6f7d54bfd0f79eb0ae58adcb8e364fb == cache_frame_b6f7d54bfd0f79eb0ae58adcb8e364fb )
    {
        Py_DECREF( frame_b6f7d54bfd0f79eb0ae58adcb8e364fb );
    }
    cache_frame_b6f7d54bfd0f79eb0ae58adcb8e364fb = NULL;

    assertFrameObject( frame_b6f7d54bfd0f79eb0ae58adcb8e364fb );

    // Put the previous frame back on top.
    popFrameStack();

    // Return the error.
    goto try_except_handler_1;

    frame_no_exception_1:;
    // tried codes exits in all cases
    NUITKA_CANNOT_GET_HERE( platform$$$function_4__parse_release_file );
    return NULL;
    // Return handler code:
    try_return_handler_1:;
    CHECK_OBJECT( (PyObject *)par_firstline );
    Py_DECREF( par_firstline );
    par_firstline = NULL;

    Py_XDECREF( var_version );
    var_version = NULL;

    Py_XDECREF( var_id );
    var_id = NULL;

    CHECK_OBJECT( (PyObject *)var_m );
    Py_DECREF( var_m );
    var_m = NULL;

    Py_XDECREF( var_l );
    var_l = NULL;

    goto function_return_exit;
    // Exception handler code:
    try_except_handler_1:;
    exception_keeper_type_1 = exception_type;
    exception_keeper_value_1 = exception_value;
    exception_keeper_tb_1 = exception_tb;
    exception_keeper_lineno_1 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    CHECK_OBJECT( (PyObject *)par_firstline );
    Py_DECREF( par_firstline );
    par_firstline = NULL;

    Py_XDECREF( var_version );
    var_version = NULL;

    Py_XDECREF( var_id );
    var_id = NULL;

    Py_XDECREF( var_m );
    var_m = NULL;

    Py_XDECREF( var_l );
    var_l = NULL;

    // Re-raise.
    exception_type = exception_keeper_type_1;
    exception_value = exception_keeper_value_1;
    exception_tb = exception_keeper_tb_1;
    exception_lineno = exception_keeper_lineno_1;

    goto function_exception_exit;
    // End of try:

    // Return statement must have exited already.
    NUITKA_CANNOT_GET_HERE( platform$$$function_4__parse_release_file );
    return NULL;

function_exception_exit:
    assert( exception_type );
    RESTORE_ERROR_OCCURRED( exception_type, exception_value, exception_tb );

    return NULL;

function_return_exit:
   // Function cleanup code if any.


   // Actual function exit with return value, making sure we did not make
   // the error status worse despite non-NULL return.
   CHECK_OBJECT( tmp_return_value );
   assert( had_error || !ERROR_OCCURRED() );
   return tmp_return_value;
}


static PyObject *impl_platform$$$function_5_linux_distribution( struct Nuitka_FunctionObject const *self, PyObject **python_pars )
{
    // Preserve error status for checks
#ifndef __NUITKA_NO_ASSERT__
    NUITKA_MAY_BE_UNUSED bool had_error = ERROR_OCCURRED();
#endif

    // Local variable declarations.
    PyObject *par_distname = python_pars[ 0 ];
    PyObject *par_version = python_pars[ 1 ];
    PyObject *par_id = python_pars[ 2 ];
    PyObject *par_supported_dists = python_pars[ 3 ];
    PyObject *par_full_distribution_name = python_pars[ 4 ];
    PyObject *var_warnings = NULL;
    struct Nuitka_FrameObject *frame_e1899258df6552fe9fe3f5925d378487;
    NUITKA_MAY_BE_UNUSED char const *type_description_1 = NULL;
    PyObject *exception_type = NULL;
    PyObject *exception_value = NULL;
    PyTracebackObject *exception_tb = NULL;
    NUITKA_MAY_BE_UNUSED int exception_lineno = 0;
    PyObject *tmp_return_value = NULL;
    static struct Nuitka_FrameObject *cache_frame_e1899258df6552fe9fe3f5925d378487 = NULL;
    PyObject *exception_keeper_type_1;
    PyObject *exception_keeper_value_1;
    PyTracebackObject *exception_keeper_tb_1;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_1;

    // Actual function body.
    // Tried code:
    MAKE_OR_REUSE_FRAME( cache_frame_e1899258df6552fe9fe3f5925d378487, codeobj_e1899258df6552fe9fe3f5925d378487, module_platform, sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *) );
    frame_e1899258df6552fe9fe3f5925d378487 = cache_frame_e1899258df6552fe9fe3f5925d378487;

    // Push the new frame as the currently active one.
    pushFrameStack( frame_e1899258df6552fe9fe3f5925d378487 );

    // Mark the frame object as in use, ref count 1 will be up for reuse.
    assert( Py_REFCNT( frame_e1899258df6552fe9fe3f5925d378487 ) == 2 ); // Frame stack

    // Framed code:
    {
        PyObject *tmp_assign_source_1;
        PyObject *tmp_name_name_1;
        PyObject *tmp_globals_name_1;
        PyObject *tmp_locals_name_1;
        PyObject *tmp_fromlist_name_1;
        PyObject *tmp_level_name_1;
        tmp_name_name_1 = const_str_plain_warnings;
        tmp_globals_name_1 = (PyObject *)moduledict_platform;
        tmp_locals_name_1 = Py_None;
        tmp_fromlist_name_1 = Py_None;
        tmp_level_name_1 = const_int_0;
        frame_e1899258df6552fe9fe3f5925d378487->m_frame.f_lineno = 335;
        tmp_assign_source_1 = IMPORT_MODULE5( tmp_name_name_1, tmp_globals_name_1, tmp_locals_name_1, tmp_fromlist_name_1, tmp_level_name_1 );
        if ( tmp_assign_source_1 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 335;
            type_description_1 = "oooooo";
            goto frame_exception_exit_1;
        }
        assert( var_warnings == NULL );
        var_warnings = tmp_assign_source_1;
    }
    {
        PyObject *tmp_called_name_1;
        PyObject *tmp_source_name_1;
        PyObject *tmp_call_result_1;
        PyObject *tmp_args_name_1;
        PyObject *tmp_tuple_element_1;
        PyObject *tmp_mvar_value_1;
        PyObject *tmp_kw_name_1;
        CHECK_OBJECT( var_warnings );
        tmp_source_name_1 = var_warnings;
        tmp_called_name_1 = LOOKUP_ATTRIBUTE( tmp_source_name_1, const_str_plain_warn );
        if ( tmp_called_name_1 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 336;
            type_description_1 = "oooooo";
            goto frame_exception_exit_1;
        }
        tmp_tuple_element_1 = const_str_digest_79a975d21d4348d44f8a8a6ac69a8ecf;
        tmp_args_name_1 = PyTuple_New( 2 );
        Py_INCREF( tmp_tuple_element_1 );
        PyTuple_SET_ITEM( tmp_args_name_1, 0, tmp_tuple_element_1 );
        tmp_mvar_value_1 = GET_STRING_DICT_VALUE( moduledict_platform, (Nuitka_StringObject *)const_str_plain_DeprecationWarning );

        if (unlikely( tmp_mvar_value_1 == NULL ))
        {
            tmp_mvar_value_1 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_DeprecationWarning );
        }

        if ( tmp_mvar_value_1 == NULL )
        {
            Py_DECREF( tmp_called_name_1 );
            Py_DECREF( tmp_args_name_1 );
            exception_type = PyExc_NameError;
            Py_INCREF( exception_type );
            exception_value = PyUnicode_FromFormat( "name '%s' is not defined", "DeprecationWarning" );
            exception_tb = NULL;
            NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
            CHAIN_EXCEPTION( exception_value );

            exception_lineno = 337;
            type_description_1 = "oooooo";
            goto frame_exception_exit_1;
        }

        tmp_tuple_element_1 = tmp_mvar_value_1;
        Py_INCREF( tmp_tuple_element_1 );
        PyTuple_SET_ITEM( tmp_args_name_1, 1, tmp_tuple_element_1 );
        tmp_kw_name_1 = PyDict_Copy( const_dict_f154c9a58c9419d7e391901d7b7fe49e );
        frame_e1899258df6552fe9fe3f5925d378487->m_frame.f_lineno = 336;
        tmp_call_result_1 = CALL_FUNCTION( tmp_called_name_1, tmp_args_name_1, tmp_kw_name_1 );
        Py_DECREF( tmp_called_name_1 );
        Py_DECREF( tmp_args_name_1 );
        Py_DECREF( tmp_kw_name_1 );
        if ( tmp_call_result_1 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 336;
            type_description_1 = "oooooo";
            goto frame_exception_exit_1;
        }
        Py_DECREF( tmp_call_result_1 );
    }
    {
        PyObject *tmp_called_name_2;
        PyObject *tmp_mvar_value_2;
        PyObject *tmp_args_element_name_1;
        PyObject *tmp_args_element_name_2;
        PyObject *tmp_args_element_name_3;
        PyObject *tmp_args_element_name_4;
        PyObject *tmp_args_element_name_5;
        tmp_mvar_value_2 = GET_STRING_DICT_VALUE( moduledict_platform, (Nuitka_StringObject *)const_str_plain__linux_distribution );

        if (unlikely( tmp_mvar_value_2 == NULL ))
        {
            tmp_mvar_value_2 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain__linux_distribution );
        }

        if ( tmp_mvar_value_2 == NULL )
        {

            exception_type = PyExc_NameError;
            Py_INCREF( exception_type );
            exception_value = PyUnicode_FromFormat( "name '%s' is not defined", "_linux_distribution" );
            exception_tb = NULL;
            NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
            CHAIN_EXCEPTION( exception_value );

            exception_lineno = 338;
            type_description_1 = "oooooo";
            goto frame_exception_exit_1;
        }

        tmp_called_name_2 = tmp_mvar_value_2;
        CHECK_OBJECT( par_distname );
        tmp_args_element_name_1 = par_distname;
        CHECK_OBJECT( par_version );
        tmp_args_element_name_2 = par_version;
        CHECK_OBJECT( par_id );
        tmp_args_element_name_3 = par_id;
        CHECK_OBJECT( par_supported_dists );
        tmp_args_element_name_4 = par_supported_dists;
        CHECK_OBJECT( par_full_distribution_name );
        tmp_args_element_name_5 = par_full_distribution_name;
        frame_e1899258df6552fe9fe3f5925d378487->m_frame.f_lineno = 338;
        {
            PyObject *call_args[] = { tmp_args_element_name_1, tmp_args_element_name_2, tmp_args_element_name_3, tmp_args_element_name_4, tmp_args_element_name_5 };
            tmp_return_value = CALL_FUNCTION_WITH_ARGS5( tmp_called_name_2, call_args );
        }

        if ( tmp_return_value == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 338;
            type_description_1 = "oooooo";
            goto frame_exception_exit_1;
        }
        goto frame_return_exit_1;
    }

#if 0
    RESTORE_FRAME_EXCEPTION( frame_e1899258df6552fe9fe3f5925d378487 );
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto frame_no_exception_1;

    frame_return_exit_1:;
#if 0
    RESTORE_FRAME_EXCEPTION( frame_e1899258df6552fe9fe3f5925d378487 );
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto try_return_handler_1;

    frame_exception_exit_1:;

#if 0
    RESTORE_FRAME_EXCEPTION( frame_e1899258df6552fe9fe3f5925d378487 );
#endif

    if ( exception_tb == NULL )
    {
        exception_tb = MAKE_TRACEBACK( frame_e1899258df6552fe9fe3f5925d378487, exception_lineno );
    }
    else if ( exception_tb->tb_frame != &frame_e1899258df6552fe9fe3f5925d378487->m_frame )
    {
        exception_tb = ADD_TRACEBACK( exception_tb, frame_e1899258df6552fe9fe3f5925d378487, exception_lineno );
    }

    // Attachs locals to frame if any.
    Nuitka_Frame_AttachLocals(
        (struct Nuitka_FrameObject *)frame_e1899258df6552fe9fe3f5925d378487,
        type_description_1,
        par_distname,
        par_version,
        par_id,
        par_supported_dists,
        par_full_distribution_name,
        var_warnings
    );


    // Release cached frame.
    if ( frame_e1899258df6552fe9fe3f5925d378487 == cache_frame_e1899258df6552fe9fe3f5925d378487 )
    {
        Py_DECREF( frame_e1899258df6552fe9fe3f5925d378487 );
    }
    cache_frame_e1899258df6552fe9fe3f5925d378487 = NULL;

    assertFrameObject( frame_e1899258df6552fe9fe3f5925d378487 );

    // Put the previous frame back on top.
    popFrameStack();

    // Return the error.
    goto try_except_handler_1;

    frame_no_exception_1:;
    // tried codes exits in all cases
    NUITKA_CANNOT_GET_HERE( platform$$$function_5_linux_distribution );
    return NULL;
    // Return handler code:
    try_return_handler_1:;
    CHECK_OBJECT( (PyObject *)par_distname );
    Py_DECREF( par_distname );
    par_distname = NULL;

    CHECK_OBJECT( (PyObject *)par_version );
    Py_DECREF( par_version );
    par_version = NULL;

    CHECK_OBJECT( (PyObject *)par_id );
    Py_DECREF( par_id );
    par_id = NULL;

    CHECK_OBJECT( (PyObject *)par_supported_dists );
    Py_DECREF( par_supported_dists );
    par_supported_dists = NULL;

    CHECK_OBJECT( (PyObject *)par_full_distribution_name );
    Py_DECREF( par_full_distribution_name );
    par_full_distribution_name = NULL;

    CHECK_OBJECT( (PyObject *)var_warnings );
    Py_DECREF( var_warnings );
    var_warnings = NULL;

    goto function_return_exit;
    // Exception handler code:
    try_except_handler_1:;
    exception_keeper_type_1 = exception_type;
    exception_keeper_value_1 = exception_value;
    exception_keeper_tb_1 = exception_tb;
    exception_keeper_lineno_1 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    CHECK_OBJECT( (PyObject *)par_distname );
    Py_DECREF( par_distname );
    par_distname = NULL;

    CHECK_OBJECT( (PyObject *)par_version );
    Py_DECREF( par_version );
    par_version = NULL;

    CHECK_OBJECT( (PyObject *)par_id );
    Py_DECREF( par_id );
    par_id = NULL;

    CHECK_OBJECT( (PyObject *)par_supported_dists );
    Py_DECREF( par_supported_dists );
    par_supported_dists = NULL;

    CHECK_OBJECT( (PyObject *)par_full_distribution_name );
    Py_DECREF( par_full_distribution_name );
    par_full_distribution_name = NULL;

    Py_XDECREF( var_warnings );
    var_warnings = NULL;

    // Re-raise.
    exception_type = exception_keeper_type_1;
    exception_value = exception_keeper_value_1;
    exception_tb = exception_keeper_tb_1;
    exception_lineno = exception_keeper_lineno_1;

    goto function_exception_exit;
    // End of try:

    // Return statement must have exited already.
    NUITKA_CANNOT_GET_HERE( platform$$$function_5_linux_distribution );
    return NULL;

function_exception_exit:
    assert( exception_type );
    RESTORE_ERROR_OCCURRED( exception_type, exception_value, exception_tb );

    return NULL;

function_return_exit:
   // Function cleanup code if any.


   // Actual function exit with return value, making sure we did not make
   // the error status worse despite non-NULL return.
   CHECK_OBJECT( tmp_return_value );
   assert( had_error || !ERROR_OCCURRED() );
   return tmp_return_value;
}


static PyObject *impl_platform$$$function_6__linux_distribution( struct Nuitka_FunctionObject const *self, PyObject **python_pars )
{
    // Preserve error status for checks
#ifndef __NUITKA_NO_ASSERT__
    NUITKA_MAY_BE_UNUSED bool had_error = ERROR_OCCURRED();
#endif

    // Local variable declarations.
    PyObject *par_distname = python_pars[ 0 ];
    PyObject *par_version = python_pars[ 1 ];
    PyObject *par_id = python_pars[ 2 ];
    PyObject *par_supported_dists = python_pars[ 3 ];
    PyObject *par_full_distribution_name = python_pars[ 4 ];
    PyObject *var_etc = NULL;
    PyObject *var_file = NULL;
    PyObject *var_m = NULL;
    PyObject *var__distname = NULL;
    PyObject *var_dummy = NULL;
    PyObject *var_f = NULL;
    PyObject *var_firstline = NULL;
    PyObject *var__version = NULL;
    PyObject *var__id = NULL;
    nuitka_bool tmp_for_loop_1__break_indicator = NUITKA_BOOL_UNASSIGNED;
    PyObject *tmp_for_loop_1__for_iterator = NULL;
    PyObject *tmp_for_loop_1__iter_value = NULL;
    PyObject *tmp_tuple_unpack_1__element_1 = NULL;
    PyObject *tmp_tuple_unpack_1__element_2 = NULL;
    PyObject *tmp_tuple_unpack_1__source_iter = NULL;
    PyObject *tmp_tuple_unpack_2__element_1 = NULL;
    PyObject *tmp_tuple_unpack_2__element_2 = NULL;
    PyObject *tmp_tuple_unpack_2__element_3 = NULL;
    PyObject *tmp_tuple_unpack_2__source_iter = NULL;
    PyObject *tmp_with_1__enter = NULL;
    PyObject *tmp_with_1__exit = NULL;
    nuitka_bool tmp_with_1__indicator = NUITKA_BOOL_UNASSIGNED;
    PyObject *tmp_with_1__source = NULL;
    struct Nuitka_FrameObject *frame_56ef1eabe7851e61c622492a816b4656;
    NUITKA_MAY_BE_UNUSED char const *type_description_1 = NULL;
    PyObject *exception_type = NULL;
    PyObject *exception_value = NULL;
    PyTracebackObject *exception_tb = NULL;
    NUITKA_MAY_BE_UNUSED int exception_lineno = 0;
    PyObject *exception_keeper_type_1;
    PyObject *exception_keeper_value_1;
    PyTracebackObject *exception_keeper_tb_1;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_1;
    PyObject *exception_preserved_type_1;
    PyObject *exception_preserved_value_1;
    PyTracebackObject *exception_preserved_tb_1;
    int tmp_res;
    PyObject *tmp_return_value = NULL;
    bool tmp_result;
    PyObject *exception_keeper_type_2;
    PyObject *exception_keeper_value_2;
    PyTracebackObject *exception_keeper_tb_2;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_2;
    PyObject *exception_keeper_type_3;
    PyObject *exception_keeper_value_3;
    PyTracebackObject *exception_keeper_tb_3;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_3;
    PyObject *tmp_iterator_attempt;
    PyObject *exception_keeper_type_4;
    PyObject *exception_keeper_value_4;
    PyTracebackObject *exception_keeper_tb_4;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_4;
    PyObject *exception_keeper_type_5;
    PyObject *exception_keeper_value_5;
    PyTracebackObject *exception_keeper_tb_5;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_5;
    PyObject *exception_keeper_type_6;
    PyObject *exception_keeper_value_6;
    PyTracebackObject *exception_keeper_tb_6;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_6;
    PyObject *exception_keeper_type_7;
    PyObject *exception_keeper_value_7;
    PyTracebackObject *exception_keeper_tb_7;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_7;
    PyObject *exception_keeper_type_8;
    PyObject *exception_keeper_value_8;
    PyTracebackObject *exception_keeper_tb_8;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_8;
    PyObject *exception_preserved_type_2;
    PyObject *exception_preserved_value_2;
    PyTracebackObject *exception_preserved_tb_2;
    PyObject *exception_keeper_type_9;
    PyObject *exception_keeper_value_9;
    PyTracebackObject *exception_keeper_tb_9;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_9;
    PyObject *exception_keeper_type_10;
    PyObject *exception_keeper_value_10;
    PyTracebackObject *exception_keeper_tb_10;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_10;
    PyObject *exception_keeper_type_11;
    PyObject *exception_keeper_value_11;
    PyTracebackObject *exception_keeper_tb_11;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_11;
    PyObject *exception_keeper_type_12;
    PyObject *exception_keeper_value_12;
    PyTracebackObject *exception_keeper_tb_12;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_12;
    PyObject *exception_keeper_type_13;
    PyObject *exception_keeper_value_13;
    PyTracebackObject *exception_keeper_tb_13;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_13;
    static struct Nuitka_FrameObject *cache_frame_56ef1eabe7851e61c622492a816b4656 = NULL;
    PyObject *exception_keeper_type_14;
    PyObject *exception_keeper_value_14;
    PyTracebackObject *exception_keeper_tb_14;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_14;

    // Actual function body.
    // Tried code:
    MAKE_OR_REUSE_FRAME( cache_frame_56ef1eabe7851e61c622492a816b4656, codeobj_56ef1eabe7851e61c622492a816b4656, module_platform, sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *) );
    frame_56ef1eabe7851e61c622492a816b4656 = cache_frame_56ef1eabe7851e61c622492a816b4656;

    // Push the new frame as the currently active one.
    pushFrameStack( frame_56ef1eabe7851e61c622492a816b4656 );

    // Mark the frame object as in use, ref count 1 will be up for reuse.
    assert( Py_REFCNT( frame_56ef1eabe7851e61c622492a816b4656 ) == 2 ); // Frame stack

    // Framed code:
    // Tried code:
    {
        PyObject *tmp_assign_source_1;
        PyObject *tmp_called_name_1;
        PyObject *tmp_source_name_1;
        PyObject *tmp_mvar_value_1;
        PyObject *tmp_args_element_name_1;
        PyObject *tmp_mvar_value_2;
        tmp_mvar_value_1 = GET_STRING_DICT_VALUE( moduledict_platform, (Nuitka_StringObject *)const_str_plain_os );

        if (unlikely( tmp_mvar_value_1 == NULL ))
        {
            tmp_mvar_value_1 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_os );
        }

        if ( tmp_mvar_value_1 == NULL )
        {

            exception_type = PyExc_NameError;
            Py_INCREF( exception_type );
            exception_value = PyUnicode_FromFormat( "name '%s' is not defined", "os" );
            exception_tb = NULL;
            NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
            CHAIN_EXCEPTION( exception_value );

            exception_lineno = 364;
            type_description_1 = "oooooooooooooo";
            goto try_except_handler_2;
        }

        tmp_source_name_1 = tmp_mvar_value_1;
        tmp_called_name_1 = LOOKUP_ATTRIBUTE( tmp_source_name_1, const_str_plain_listdir );
        if ( tmp_called_name_1 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 364;
            type_description_1 = "oooooooooooooo";
            goto try_except_handler_2;
        }
        tmp_mvar_value_2 = GET_STRING_DICT_VALUE( moduledict_platform, (Nuitka_StringObject *)const_str_plain__UNIXCONFDIR );

        if (unlikely( tmp_mvar_value_2 == NULL ))
        {
            tmp_mvar_value_2 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain__UNIXCONFDIR );
        }

        if ( tmp_mvar_value_2 == NULL )
        {
            Py_DECREF( tmp_called_name_1 );
            exception_type = PyExc_NameError;
            Py_INCREF( exception_type );
            exception_value = PyUnicode_FromFormat( "name '%s' is not defined", "_UNIXCONFDIR" );
            exception_tb = NULL;
            NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
            CHAIN_EXCEPTION( exception_value );

            exception_lineno = 364;
            type_description_1 = "oooooooooooooo";
            goto try_except_handler_2;
        }

        tmp_args_element_name_1 = tmp_mvar_value_2;
        frame_56ef1eabe7851e61c622492a816b4656->m_frame.f_lineno = 364;
        {
            PyObject *call_args[] = { tmp_args_element_name_1 };
            tmp_assign_source_1 = CALL_FUNCTION_WITH_ARGS1( tmp_called_name_1, call_args );
        }

        Py_DECREF( tmp_called_name_1 );
        if ( tmp_assign_source_1 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 364;
            type_description_1 = "oooooooooooooo";
            goto try_except_handler_2;
        }
        assert( var_etc == NULL );
        var_etc = tmp_assign_source_1;
    }
    goto try_end_1;
    // Exception handler code:
    try_except_handler_2:;
    exception_keeper_type_1 = exception_type;
    exception_keeper_value_1 = exception_value;
    exception_keeper_tb_1 = exception_tb;
    exception_keeper_lineno_1 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    // Preserve existing published exception.
    exception_preserved_type_1 = EXC_TYPE(PyThreadState_GET());
    Py_XINCREF( exception_preserved_type_1 );
    exception_preserved_value_1 = EXC_VALUE(PyThreadState_GET());
    Py_XINCREF( exception_preserved_value_1 );
    exception_preserved_tb_1 = (PyTracebackObject *)EXC_TRACEBACK(PyThreadState_GET());
    Py_XINCREF( exception_preserved_tb_1 );

    if ( exception_keeper_tb_1 == NULL )
    {
        exception_keeper_tb_1 = MAKE_TRACEBACK( frame_56ef1eabe7851e61c622492a816b4656, exception_keeper_lineno_1 );
    }
    else if ( exception_keeper_lineno_1 != 0 )
    {
        exception_keeper_tb_1 = ADD_TRACEBACK( exception_keeper_tb_1, frame_56ef1eabe7851e61c622492a816b4656, exception_keeper_lineno_1 );
    }

    NORMALIZE_EXCEPTION( &exception_keeper_type_1, &exception_keeper_value_1, &exception_keeper_tb_1 );
    PyException_SetTraceback( exception_keeper_value_1, (PyObject *)exception_keeper_tb_1 );
    PUBLISH_EXCEPTION( &exception_keeper_type_1, &exception_keeper_value_1, &exception_keeper_tb_1 );
    // Tried code:
    {
        nuitka_bool tmp_condition_result_1;
        PyObject *tmp_compexpr_left_1;
        PyObject *tmp_compexpr_right_1;
        tmp_compexpr_left_1 = EXC_TYPE(PyThreadState_GET());
        tmp_compexpr_right_1 = PyExc_OSError;
        tmp_res = EXCEPTION_MATCH_BOOL( tmp_compexpr_left_1, tmp_compexpr_right_1 );
        if ( tmp_res == -1 )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 365;
            type_description_1 = "oooooooooooooo";
            goto try_except_handler_3;
        }
        tmp_condition_result_1 = ( tmp_res != 0 ) ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
        if ( tmp_condition_result_1 == NUITKA_BOOL_TRUE )
        {
            goto branch_yes_1;
        }
        else
        {
            goto branch_no_1;
        }
        branch_yes_1:;
        {
            PyObject *tmp_tuple_element_1;
            CHECK_OBJECT( par_distname );
            tmp_tuple_element_1 = par_distname;
            tmp_return_value = PyTuple_New( 3 );
            Py_INCREF( tmp_tuple_element_1 );
            PyTuple_SET_ITEM( tmp_return_value, 0, tmp_tuple_element_1 );
            CHECK_OBJECT( par_version );
            tmp_tuple_element_1 = par_version;
            Py_INCREF( tmp_tuple_element_1 );
            PyTuple_SET_ITEM( tmp_return_value, 1, tmp_tuple_element_1 );
            CHECK_OBJECT( par_id );
            tmp_tuple_element_1 = par_id;
            Py_INCREF( tmp_tuple_element_1 );
            PyTuple_SET_ITEM( tmp_return_value, 2, tmp_tuple_element_1 );
            goto try_return_handler_3;
        }
        goto branch_end_1;
        branch_no_1:;
        tmp_result = RERAISE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
        if (unlikely( tmp_result == false ))
        {
            exception_lineno = 363;
        }

        if (exception_tb && exception_tb->tb_frame == &frame_56ef1eabe7851e61c622492a816b4656->m_frame) frame_56ef1eabe7851e61c622492a816b4656->m_frame.f_lineno = exception_tb->tb_lineno;
        type_description_1 = "oooooooooooooo";
        goto try_except_handler_3;
        branch_end_1:;
    }
    // tried codes exits in all cases
    NUITKA_CANNOT_GET_HERE( platform$$$function_6__linux_distribution );
    return NULL;
    // Return handler code:
    try_return_handler_3:;
    // Restore previous exception.
    SET_CURRENT_EXCEPTION( exception_preserved_type_1, exception_preserved_value_1, exception_preserved_tb_1 );
    goto frame_return_exit_1;
    // Exception handler code:
    try_except_handler_3:;
    exception_keeper_type_2 = exception_type;
    exception_keeper_value_2 = exception_value;
    exception_keeper_tb_2 = exception_tb;
    exception_keeper_lineno_2 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    // Restore previous exception.
    SET_CURRENT_EXCEPTION( exception_preserved_type_1, exception_preserved_value_1, exception_preserved_tb_1 );
    // Re-raise.
    exception_type = exception_keeper_type_2;
    exception_value = exception_keeper_value_2;
    exception_tb = exception_keeper_tb_2;
    exception_lineno = exception_keeper_lineno_2;

    goto frame_exception_exit_1;
    // End of try:
    // End of try:
    try_end_1:;
    {
        PyObject *tmp_called_instance_1;
        PyObject *tmp_call_result_1;
        CHECK_OBJECT( var_etc );
        tmp_called_instance_1 = var_etc;
        frame_56ef1eabe7851e61c622492a816b4656->m_frame.f_lineno = 368;
        tmp_call_result_1 = CALL_METHOD_NO_ARGS( tmp_called_instance_1, const_str_plain_sort );
        if ( tmp_call_result_1 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 368;
            type_description_1 = "oooooooooooooo";
            goto frame_exception_exit_1;
        }
        Py_DECREF( tmp_call_result_1 );
    }
    {
        nuitka_bool tmp_assign_source_2;
        tmp_assign_source_2 = NUITKA_BOOL_FALSE;
        tmp_for_loop_1__break_indicator = tmp_assign_source_2;
    }
    // Tried code:
    {
        PyObject *tmp_assign_source_3;
        PyObject *tmp_iter_arg_1;
        CHECK_OBJECT( var_etc );
        tmp_iter_arg_1 = var_etc;
        tmp_assign_source_3 = MAKE_ITERATOR( tmp_iter_arg_1 );
        if ( tmp_assign_source_3 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 369;
            type_description_1 = "oooooooooooooo";
            goto try_except_handler_4;
        }
        assert( tmp_for_loop_1__for_iterator == NULL );
        tmp_for_loop_1__for_iterator = tmp_assign_source_3;
    }
    // Tried code:
    loop_start_1:;
    // Tried code:
    {
        PyObject *tmp_assign_source_4;
        PyObject *tmp_value_name_1;
        CHECK_OBJECT( tmp_for_loop_1__for_iterator );
        tmp_value_name_1 = tmp_for_loop_1__for_iterator;
        tmp_assign_source_4 = ITERATOR_NEXT( tmp_value_name_1 );
        if ( tmp_assign_source_4 == NULL )
        {
            if ( !ERROR_OCCURRED() )
            {
                exception_type = PyExc_StopIteration;
                Py_INCREF( exception_type );
                exception_value = NULL;
                exception_tb = NULL;
            }
            else
            {
                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
            }


            type_description_1 = "oooooooooooooo";
            exception_lineno = 369;
            goto try_except_handler_6;
        }
        {
            PyObject *old = tmp_for_loop_1__iter_value;
            tmp_for_loop_1__iter_value = tmp_assign_source_4;
            Py_XDECREF( old );
        }

    }
    goto try_end_2;
    // Exception handler code:
    try_except_handler_6:;
    exception_keeper_type_3 = exception_type;
    exception_keeper_value_3 = exception_value;
    exception_keeper_tb_3 = exception_tb;
    exception_keeper_lineno_3 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    {
        nuitka_bool tmp_condition_result_2;
        PyObject *tmp_compexpr_left_2;
        PyObject *tmp_compexpr_right_2;
        tmp_compexpr_left_2 = exception_keeper_type_3;
        tmp_compexpr_right_2 = PyExc_StopIteration;
        tmp_res = EXCEPTION_MATCH_BOOL( tmp_compexpr_left_2, tmp_compexpr_right_2 );
        if ( tmp_res == -1 )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );

            Py_DECREF( exception_keeper_type_3 );
            Py_XDECREF( exception_keeper_value_3 );
            Py_XDECREF( exception_keeper_tb_3 );

            exception_lineno = 369;
            type_description_1 = "oooooooooooooo";
            goto try_except_handler_5;
        }
        tmp_condition_result_2 = ( tmp_res != 0 ) ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
        if ( tmp_condition_result_2 == NUITKA_BOOL_TRUE )
        {
            goto branch_yes_2;
        }
        else
        {
            goto branch_no_2;
        }
        branch_yes_2:;
        {
            nuitka_bool tmp_assign_source_5;
            tmp_assign_source_5 = NUITKA_BOOL_TRUE;
            tmp_for_loop_1__break_indicator = tmp_assign_source_5;
        }
        Py_DECREF( exception_keeper_type_3 );
        Py_XDECREF( exception_keeper_value_3 );
        Py_XDECREF( exception_keeper_tb_3 );
        goto loop_end_1;
        goto branch_end_2;
        branch_no_2:;
        // Re-raise.
        exception_type = exception_keeper_type_3;
        exception_value = exception_keeper_value_3;
        exception_tb = exception_keeper_tb_3;
        exception_lineno = exception_keeper_lineno_3;

        goto try_except_handler_5;
        branch_end_2:;
    }
    // End of try:
    try_end_2:;
    {
        PyObject *tmp_assign_source_6;
        CHECK_OBJECT( tmp_for_loop_1__iter_value );
        tmp_assign_source_6 = tmp_for_loop_1__iter_value;
        {
            PyObject *old = var_file;
            var_file = tmp_assign_source_6;
            Py_INCREF( var_file );
            Py_XDECREF( old );
        }

    }
    {
        PyObject *tmp_assign_source_7;
        PyObject *tmp_called_instance_2;
        PyObject *tmp_mvar_value_3;
        PyObject *tmp_args_element_name_2;
        tmp_mvar_value_3 = GET_STRING_DICT_VALUE( moduledict_platform, (Nuitka_StringObject *)const_str_plain__release_filename );

        if (unlikely( tmp_mvar_value_3 == NULL ))
        {
            tmp_mvar_value_3 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain__release_filename );
        }

        if ( tmp_mvar_value_3 == NULL )
        {

            exception_type = PyExc_NameError;
            Py_INCREF( exception_type );
            exception_value = PyUnicode_FromFormat( "name '%s' is not defined", "_release_filename" );
            exception_tb = NULL;
            NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
            CHAIN_EXCEPTION( exception_value );

            exception_lineno = 370;
            type_description_1 = "oooooooooooooo";
            goto try_except_handler_5;
        }

        tmp_called_instance_2 = tmp_mvar_value_3;
        CHECK_OBJECT( var_file );
        tmp_args_element_name_2 = var_file;
        frame_56ef1eabe7851e61c622492a816b4656->m_frame.f_lineno = 370;
        {
            PyObject *call_args[] = { tmp_args_element_name_2 };
            tmp_assign_source_7 = CALL_METHOD_WITH_ARGS1( tmp_called_instance_2, const_str_plain_match, call_args );
        }

        if ( tmp_assign_source_7 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 370;
            type_description_1 = "oooooooooooooo";
            goto try_except_handler_5;
        }
        {
            PyObject *old = var_m;
            var_m = tmp_assign_source_7;
            Py_XDECREF( old );
        }

    }
    {
        nuitka_bool tmp_condition_result_3;
        PyObject *tmp_compexpr_left_3;
        PyObject *tmp_compexpr_right_3;
        CHECK_OBJECT( var_m );
        tmp_compexpr_left_3 = var_m;
        tmp_compexpr_right_3 = Py_None;
        tmp_condition_result_3 = ( tmp_compexpr_left_3 != tmp_compexpr_right_3 ) ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
        if ( tmp_condition_result_3 == NUITKA_BOOL_TRUE )
        {
            goto branch_yes_3;
        }
        else
        {
            goto branch_no_3;
        }
        branch_yes_3:;
        // Tried code:
        {
            PyObject *tmp_assign_source_8;
            PyObject *tmp_iter_arg_2;
            PyObject *tmp_called_instance_3;
            CHECK_OBJECT( var_m );
            tmp_called_instance_3 = var_m;
            frame_56ef1eabe7851e61c622492a816b4656->m_frame.f_lineno = 372;
            tmp_iter_arg_2 = CALL_METHOD_NO_ARGS( tmp_called_instance_3, const_str_plain_groups );
            if ( tmp_iter_arg_2 == NULL )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 372;
                type_description_1 = "oooooooooooooo";
                goto try_except_handler_7;
            }
            tmp_assign_source_8 = MAKE_UNPACK_ITERATOR( tmp_iter_arg_2 );
            Py_DECREF( tmp_iter_arg_2 );
            if ( tmp_assign_source_8 == NULL )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 372;
                type_description_1 = "oooooooooooooo";
                goto try_except_handler_7;
            }
            {
                PyObject *old = tmp_tuple_unpack_1__source_iter;
                tmp_tuple_unpack_1__source_iter = tmp_assign_source_8;
                Py_XDECREF( old );
            }

        }
        // Tried code:
        {
            PyObject *tmp_assign_source_9;
            PyObject *tmp_unpack_1;
            CHECK_OBJECT( tmp_tuple_unpack_1__source_iter );
            tmp_unpack_1 = tmp_tuple_unpack_1__source_iter;
            tmp_assign_source_9 = UNPACK_NEXT( tmp_unpack_1, 0, 2 );
            if ( tmp_assign_source_9 == NULL )
            {
                if ( !ERROR_OCCURRED() )
                {
                    exception_type = PyExc_StopIteration;
                    Py_INCREF( exception_type );
                    exception_value = NULL;
                    exception_tb = NULL;
                }
                else
                {
                    FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
                }


                type_description_1 = "oooooooooooooo";
                exception_lineno = 372;
                goto try_except_handler_8;
            }
            {
                PyObject *old = tmp_tuple_unpack_1__element_1;
                tmp_tuple_unpack_1__element_1 = tmp_assign_source_9;
                Py_XDECREF( old );
            }

        }
        {
            PyObject *tmp_assign_source_10;
            PyObject *tmp_unpack_2;
            CHECK_OBJECT( tmp_tuple_unpack_1__source_iter );
            tmp_unpack_2 = tmp_tuple_unpack_1__source_iter;
            tmp_assign_source_10 = UNPACK_NEXT( tmp_unpack_2, 1, 2 );
            if ( tmp_assign_source_10 == NULL )
            {
                if ( !ERROR_OCCURRED() )
                {
                    exception_type = PyExc_StopIteration;
                    Py_INCREF( exception_type );
                    exception_value = NULL;
                    exception_tb = NULL;
                }
                else
                {
                    FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
                }


                type_description_1 = "oooooooooooooo";
                exception_lineno = 372;
                goto try_except_handler_8;
            }
            {
                PyObject *old = tmp_tuple_unpack_1__element_2;
                tmp_tuple_unpack_1__element_2 = tmp_assign_source_10;
                Py_XDECREF( old );
            }

        }
        {
            PyObject *tmp_iterator_name_1;
            CHECK_OBJECT( tmp_tuple_unpack_1__source_iter );
            tmp_iterator_name_1 = tmp_tuple_unpack_1__source_iter;
            // Check if iterator has left-over elements.
            CHECK_OBJECT( tmp_iterator_name_1 ); assert( HAS_ITERNEXT( tmp_iterator_name_1 ) );

            tmp_iterator_attempt = (*Py_TYPE( tmp_iterator_name_1 )->tp_iternext)( tmp_iterator_name_1 );

            if (likely( tmp_iterator_attempt == NULL ))
            {
                PyObject *error = GET_ERROR_OCCURRED();

                if ( error != NULL )
                {
                    if ( EXCEPTION_MATCH_BOOL_SINGLE( error, PyExc_StopIteration ))
                    {
                        CLEAR_ERROR_OCCURRED();
                    }
                    else
                    {
                        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );

                        type_description_1 = "oooooooooooooo";
                        exception_lineno = 372;
                        goto try_except_handler_8;
                    }
                }
            }
            else
            {
                Py_DECREF( tmp_iterator_attempt );

                // TODO: Could avoid PyErr_Format.
#if PYTHON_VERSION < 300
                PyErr_Format( PyExc_ValueError, "too many values to unpack" );
#else
                PyErr_Format( PyExc_ValueError, "too many values to unpack (expected 2)" );
#endif
                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );

                type_description_1 = "oooooooooooooo";
                exception_lineno = 372;
                goto try_except_handler_8;
            }
        }
        goto try_end_3;
        // Exception handler code:
        try_except_handler_8:;
        exception_keeper_type_4 = exception_type;
        exception_keeper_value_4 = exception_value;
        exception_keeper_tb_4 = exception_tb;
        exception_keeper_lineno_4 = exception_lineno;
        exception_type = NULL;
        exception_value = NULL;
        exception_tb = NULL;
        exception_lineno = 0;

        CHECK_OBJECT( (PyObject *)tmp_tuple_unpack_1__source_iter );
        Py_DECREF( tmp_tuple_unpack_1__source_iter );
        tmp_tuple_unpack_1__source_iter = NULL;

        // Re-raise.
        exception_type = exception_keeper_type_4;
        exception_value = exception_keeper_value_4;
        exception_tb = exception_keeper_tb_4;
        exception_lineno = exception_keeper_lineno_4;

        goto try_except_handler_7;
        // End of try:
        try_end_3:;
        goto try_end_4;
        // Exception handler code:
        try_except_handler_7:;
        exception_keeper_type_5 = exception_type;
        exception_keeper_value_5 = exception_value;
        exception_keeper_tb_5 = exception_tb;
        exception_keeper_lineno_5 = exception_lineno;
        exception_type = NULL;
        exception_value = NULL;
        exception_tb = NULL;
        exception_lineno = 0;

        Py_XDECREF( tmp_tuple_unpack_1__element_1 );
        tmp_tuple_unpack_1__element_1 = NULL;

        Py_XDECREF( tmp_tuple_unpack_1__element_2 );
        tmp_tuple_unpack_1__element_2 = NULL;

        // Re-raise.
        exception_type = exception_keeper_type_5;
        exception_value = exception_keeper_value_5;
        exception_tb = exception_keeper_tb_5;
        exception_lineno = exception_keeper_lineno_5;

        goto try_except_handler_5;
        // End of try:
        try_end_4:;
        CHECK_OBJECT( (PyObject *)tmp_tuple_unpack_1__source_iter );
        Py_DECREF( tmp_tuple_unpack_1__source_iter );
        tmp_tuple_unpack_1__source_iter = NULL;

        {
            PyObject *tmp_assign_source_11;
            CHECK_OBJECT( tmp_tuple_unpack_1__element_1 );
            tmp_assign_source_11 = tmp_tuple_unpack_1__element_1;
            {
                PyObject *old = var__distname;
                var__distname = tmp_assign_source_11;
                Py_INCREF( var__distname );
                Py_XDECREF( old );
            }

        }
        Py_XDECREF( tmp_tuple_unpack_1__element_1 );
        tmp_tuple_unpack_1__element_1 = NULL;

        {
            PyObject *tmp_assign_source_12;
            CHECK_OBJECT( tmp_tuple_unpack_1__element_2 );
            tmp_assign_source_12 = tmp_tuple_unpack_1__element_2;
            {
                PyObject *old = var_dummy;
                var_dummy = tmp_assign_source_12;
                Py_INCREF( var_dummy );
                Py_XDECREF( old );
            }

        }
        Py_XDECREF( tmp_tuple_unpack_1__element_2 );
        tmp_tuple_unpack_1__element_2 = NULL;

        {
            nuitka_bool tmp_condition_result_4;
            PyObject *tmp_compexpr_left_4;
            PyObject *tmp_compexpr_right_4;
            CHECK_OBJECT( var__distname );
            tmp_compexpr_left_4 = var__distname;
            CHECK_OBJECT( par_supported_dists );
            tmp_compexpr_right_4 = par_supported_dists;
            tmp_res = PySequence_Contains( tmp_compexpr_right_4, tmp_compexpr_left_4 );
            if ( tmp_res == -1 )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 373;
                type_description_1 = "oooooooooooooo";
                goto try_except_handler_5;
            }
            tmp_condition_result_4 = ( tmp_res == 1 ) ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
            if ( tmp_condition_result_4 == NUITKA_BOOL_TRUE )
            {
                goto branch_yes_4;
            }
            else
            {
                goto branch_no_4;
            }
            branch_yes_4:;
            {
                PyObject *tmp_assign_source_13;
                CHECK_OBJECT( var__distname );
                tmp_assign_source_13 = var__distname;
                {
                    PyObject *old = par_distname;
                    assert( old != NULL );
                    par_distname = tmp_assign_source_13;
                    Py_INCREF( par_distname );
                    Py_DECREF( old );
                }

            }
            goto loop_end_1;
            branch_no_4:;
        }
        branch_no_3:;
    }
    if ( CONSIDER_THREADING() == false )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 369;
        type_description_1 = "oooooooooooooo";
        goto try_except_handler_5;
    }
    goto loop_start_1;
    loop_end_1:;
    goto try_end_5;
    // Exception handler code:
    try_except_handler_5:;
    exception_keeper_type_6 = exception_type;
    exception_keeper_value_6 = exception_value;
    exception_keeper_tb_6 = exception_tb;
    exception_keeper_lineno_6 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    Py_XDECREF( tmp_for_loop_1__iter_value );
    tmp_for_loop_1__iter_value = NULL;

    CHECK_OBJECT( (PyObject *)tmp_for_loop_1__for_iterator );
    Py_DECREF( tmp_for_loop_1__for_iterator );
    tmp_for_loop_1__for_iterator = NULL;

    // Re-raise.
    exception_type = exception_keeper_type_6;
    exception_value = exception_keeper_value_6;
    exception_tb = exception_keeper_tb_6;
    exception_lineno = exception_keeper_lineno_6;

    goto try_except_handler_4;
    // End of try:
    try_end_5:;
    Py_XDECREF( tmp_for_loop_1__iter_value );
    tmp_for_loop_1__iter_value = NULL;

    CHECK_OBJECT( (PyObject *)tmp_for_loop_1__for_iterator );
    Py_DECREF( tmp_for_loop_1__for_iterator );
    tmp_for_loop_1__for_iterator = NULL;

    {
        nuitka_bool tmp_condition_result_5;
        nuitka_bool tmp_compexpr_left_5;
        nuitka_bool tmp_compexpr_right_5;
        assert( tmp_for_loop_1__break_indicator != NUITKA_BOOL_UNASSIGNED);
        tmp_compexpr_left_5 = tmp_for_loop_1__break_indicator;
        tmp_compexpr_right_5 = NUITKA_BOOL_TRUE;
        tmp_condition_result_5 = ( tmp_compexpr_left_5 == tmp_compexpr_right_5 ) ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
        if ( tmp_condition_result_5 == NUITKA_BOOL_TRUE )
        {
            goto branch_yes_5;
        }
        else
        {
            goto branch_no_5;
        }
        branch_yes_5:;
        {
            PyObject *tmp_called_name_2;
            PyObject *tmp_mvar_value_4;
            PyObject *tmp_args_element_name_3;
            PyObject *tmp_args_element_name_4;
            PyObject *tmp_args_element_name_5;
            tmp_mvar_value_4 = GET_STRING_DICT_VALUE( moduledict_platform, (Nuitka_StringObject *)const_str_plain__dist_try_harder );

            if (unlikely( tmp_mvar_value_4 == NULL ))
            {
                tmp_mvar_value_4 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain__dist_try_harder );
            }

            if ( tmp_mvar_value_4 == NULL )
            {

                exception_type = PyExc_NameError;
                Py_INCREF( exception_type );
                exception_value = PyUnicode_FromFormat( "name '%s' is not defined", "_dist_try_harder" );
                exception_tb = NULL;
                NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
                CHAIN_EXCEPTION( exception_value );

                exception_lineno = 377;
                type_description_1 = "oooooooooooooo";
                goto try_except_handler_4;
            }

            tmp_called_name_2 = tmp_mvar_value_4;
            if ( par_distname == NULL )
            {

                exception_type = PyExc_UnboundLocalError;
                Py_INCREF( exception_type );
                exception_value = PyUnicode_FromFormat( "local variable '%s' referenced before assignment", "distname" );
                exception_tb = NULL;
                NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
                CHAIN_EXCEPTION( exception_value );

                exception_lineno = 377;
                type_description_1 = "oooooooooooooo";
                goto try_except_handler_4;
            }

            tmp_args_element_name_3 = par_distname;
            CHECK_OBJECT( par_version );
            tmp_args_element_name_4 = par_version;
            CHECK_OBJECT( par_id );
            tmp_args_element_name_5 = par_id;
            frame_56ef1eabe7851e61c622492a816b4656->m_frame.f_lineno = 377;
            {
                PyObject *call_args[] = { tmp_args_element_name_3, tmp_args_element_name_4, tmp_args_element_name_5 };
                tmp_return_value = CALL_FUNCTION_WITH_ARGS3( tmp_called_name_2, call_args );
            }

            if ( tmp_return_value == NULL )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 377;
                type_description_1 = "oooooooooooooo";
                goto try_except_handler_4;
            }
            goto try_return_handler_4;
        }
        branch_no_5:;
    }
    goto try_end_6;
    // Return handler code:
    try_return_handler_4:;
    goto frame_return_exit_1;
    // Exception handler code:
    try_except_handler_4:;
    exception_keeper_type_7 = exception_type;
    exception_keeper_value_7 = exception_value;
    exception_keeper_tb_7 = exception_tb;
    exception_keeper_lineno_7 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    // Re-raise.
    exception_type = exception_keeper_type_7;
    exception_value = exception_keeper_value_7;
    exception_tb = exception_keeper_tb_7;
    exception_lineno = exception_keeper_lineno_7;

    goto frame_exception_exit_1;
    // End of try:
    try_end_6:;
    // Tried code:
    {
        PyObject *tmp_assign_source_14;
        PyObject *tmp_open_filename_1;
        PyObject *tmp_called_name_3;
        PyObject *tmp_source_name_2;
        PyObject *tmp_source_name_3;
        PyObject *tmp_mvar_value_5;
        PyObject *tmp_args_element_name_6;
        PyObject *tmp_mvar_value_6;
        PyObject *tmp_args_element_name_7;
        PyObject *tmp_open_mode_1;
        PyObject *tmp_open_encoding_1;
        PyObject *tmp_open_errors_1;
        tmp_mvar_value_5 = GET_STRING_DICT_VALUE( moduledict_platform, (Nuitka_StringObject *)const_str_plain_os );

        if (unlikely( tmp_mvar_value_5 == NULL ))
        {
            tmp_mvar_value_5 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_os );
        }

        if ( tmp_mvar_value_5 == NULL )
        {

            exception_type = PyExc_NameError;
            Py_INCREF( exception_type );
            exception_value = PyUnicode_FromFormat( "name '%s' is not defined", "os" );
            exception_tb = NULL;
            NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
            CHAIN_EXCEPTION( exception_value );

            exception_lineno = 380;
            type_description_1 = "oooooooooooooo";
            goto try_except_handler_9;
        }

        tmp_source_name_3 = tmp_mvar_value_5;
        tmp_source_name_2 = LOOKUP_ATTRIBUTE( tmp_source_name_3, const_str_plain_path );
        if ( tmp_source_name_2 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 380;
            type_description_1 = "oooooooooooooo";
            goto try_except_handler_9;
        }
        tmp_called_name_3 = LOOKUP_ATTRIBUTE( tmp_source_name_2, const_str_plain_join );
        Py_DECREF( tmp_source_name_2 );
        if ( tmp_called_name_3 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 380;
            type_description_1 = "oooooooooooooo";
            goto try_except_handler_9;
        }
        tmp_mvar_value_6 = GET_STRING_DICT_VALUE( moduledict_platform, (Nuitka_StringObject *)const_str_plain__UNIXCONFDIR );

        if (unlikely( tmp_mvar_value_6 == NULL ))
        {
            tmp_mvar_value_6 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain__UNIXCONFDIR );
        }

        if ( tmp_mvar_value_6 == NULL )
        {
            Py_DECREF( tmp_called_name_3 );
            exception_type = PyExc_NameError;
            Py_INCREF( exception_type );
            exception_value = PyUnicode_FromFormat( "name '%s' is not defined", "_UNIXCONFDIR" );
            exception_tb = NULL;
            NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
            CHAIN_EXCEPTION( exception_value );

            exception_lineno = 380;
            type_description_1 = "oooooooooooooo";
            goto try_except_handler_9;
        }

        tmp_args_element_name_6 = tmp_mvar_value_6;
        if ( var_file == NULL )
        {
            Py_DECREF( tmp_called_name_3 );
            exception_type = PyExc_UnboundLocalError;
            Py_INCREF( exception_type );
            exception_value = PyUnicode_FromFormat( "local variable '%s' referenced before assignment", "file" );
            exception_tb = NULL;
            NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
            CHAIN_EXCEPTION( exception_value );

            exception_lineno = 380;
            type_description_1 = "oooooooooooooo";
            goto try_except_handler_9;
        }

        tmp_args_element_name_7 = var_file;
        frame_56ef1eabe7851e61c622492a816b4656->m_frame.f_lineno = 380;
        {
            PyObject *call_args[] = { tmp_args_element_name_6, tmp_args_element_name_7 };
            tmp_open_filename_1 = CALL_FUNCTION_WITH_ARGS2( tmp_called_name_3, call_args );
        }

        Py_DECREF( tmp_called_name_3 );
        if ( tmp_open_filename_1 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 380;
            type_description_1 = "oooooooooooooo";
            goto try_except_handler_9;
        }
        tmp_open_mode_1 = const_str_plain_r;
        tmp_open_encoding_1 = const_str_digest_c075052d723d6707083e869a0e3659bb;
        tmp_open_errors_1 = const_str_plain_surrogateescape;
        tmp_assign_source_14 = BUILTIN_OPEN( tmp_open_filename_1, tmp_open_mode_1, NULL, tmp_open_encoding_1, tmp_open_errors_1, NULL, NULL, NULL );
        Py_DECREF( tmp_open_filename_1 );
        if ( tmp_assign_source_14 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 380;
            type_description_1 = "oooooooooooooo";
            goto try_except_handler_9;
        }
        assert( tmp_with_1__source == NULL );
        tmp_with_1__source = tmp_assign_source_14;
    }
    {
        PyObject *tmp_assign_source_15;
        PyObject *tmp_called_name_4;
        PyObject *tmp_source_name_4;
        CHECK_OBJECT( tmp_with_1__source );
        tmp_source_name_4 = tmp_with_1__source;
        tmp_called_name_4 = LOOKUP_SPECIAL( tmp_source_name_4, const_str_plain___enter__ );
        if ( tmp_called_name_4 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 380;
            type_description_1 = "oooooooooooooo";
            goto try_except_handler_9;
        }
        frame_56ef1eabe7851e61c622492a816b4656->m_frame.f_lineno = 380;
        tmp_assign_source_15 = CALL_FUNCTION_NO_ARGS( tmp_called_name_4 );
        Py_DECREF( tmp_called_name_4 );
        if ( tmp_assign_source_15 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 380;
            type_description_1 = "oooooooooooooo";
            goto try_except_handler_9;
        }
        assert( tmp_with_1__enter == NULL );
        tmp_with_1__enter = tmp_assign_source_15;
    }
    {
        PyObject *tmp_assign_source_16;
        PyObject *tmp_source_name_5;
        CHECK_OBJECT( tmp_with_1__source );
        tmp_source_name_5 = tmp_with_1__source;
        tmp_assign_source_16 = LOOKUP_SPECIAL( tmp_source_name_5, const_str_plain___exit__ );
        if ( tmp_assign_source_16 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 380;
            type_description_1 = "oooooooooooooo";
            goto try_except_handler_9;
        }
        assert( tmp_with_1__exit == NULL );
        tmp_with_1__exit = tmp_assign_source_16;
    }
    {
        nuitka_bool tmp_assign_source_17;
        tmp_assign_source_17 = NUITKA_BOOL_TRUE;
        tmp_with_1__indicator = tmp_assign_source_17;
    }
    {
        PyObject *tmp_assign_source_18;
        CHECK_OBJECT( tmp_with_1__enter );
        tmp_assign_source_18 = tmp_with_1__enter;
        assert( var_f == NULL );
        Py_INCREF( tmp_assign_source_18 );
        var_f = tmp_assign_source_18;
    }
    // Tried code:
    // Tried code:
    {
        PyObject *tmp_assign_source_19;
        PyObject *tmp_called_instance_4;
        CHECK_OBJECT( var_f );
        tmp_called_instance_4 = var_f;
        frame_56ef1eabe7851e61c622492a816b4656->m_frame.f_lineno = 382;
        tmp_assign_source_19 = CALL_METHOD_NO_ARGS( tmp_called_instance_4, const_str_plain_readline );
        if ( tmp_assign_source_19 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 382;
            type_description_1 = "oooooooooooooo";
            goto try_except_handler_11;
        }
        assert( var_firstline == NULL );
        var_firstline = tmp_assign_source_19;
    }
    goto try_end_7;
    // Exception handler code:
    try_except_handler_11:;
    exception_keeper_type_8 = exception_type;
    exception_keeper_value_8 = exception_value;
    exception_keeper_tb_8 = exception_tb;
    exception_keeper_lineno_8 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    // Preserve existing published exception.
    exception_preserved_type_2 = EXC_TYPE(PyThreadState_GET());
    Py_XINCREF( exception_preserved_type_2 );
    exception_preserved_value_2 = EXC_VALUE(PyThreadState_GET());
    Py_XINCREF( exception_preserved_value_2 );
    exception_preserved_tb_2 = (PyTracebackObject *)EXC_TRACEBACK(PyThreadState_GET());
    Py_XINCREF( exception_preserved_tb_2 );

    if ( exception_keeper_tb_8 == NULL )
    {
        exception_keeper_tb_8 = MAKE_TRACEBACK( frame_56ef1eabe7851e61c622492a816b4656, exception_keeper_lineno_8 );
    }
    else if ( exception_keeper_lineno_8 != 0 )
    {
        exception_keeper_tb_8 = ADD_TRACEBACK( exception_keeper_tb_8, frame_56ef1eabe7851e61c622492a816b4656, exception_keeper_lineno_8 );
    }

    NORMALIZE_EXCEPTION( &exception_keeper_type_8, &exception_keeper_value_8, &exception_keeper_tb_8 );
    PyException_SetTraceback( exception_keeper_value_8, (PyObject *)exception_keeper_tb_8 );
    PUBLISH_EXCEPTION( &exception_keeper_type_8, &exception_keeper_value_8, &exception_keeper_tb_8 );
    // Tried code:
    {
        nuitka_bool tmp_condition_result_6;
        PyObject *tmp_compexpr_left_6;
        PyObject *tmp_compexpr_right_6;
        tmp_compexpr_left_6 = EXC_TYPE(PyThreadState_GET());
        tmp_compexpr_right_6 = PyExc_BaseException;
        tmp_res = EXCEPTION_MATCH_BOOL( tmp_compexpr_left_6, tmp_compexpr_right_6 );
        if ( tmp_res == -1 )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 380;
            type_description_1 = "oooooooooooooo";
            goto try_except_handler_12;
        }
        tmp_condition_result_6 = ( tmp_res != 0 ) ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
        if ( tmp_condition_result_6 == NUITKA_BOOL_TRUE )
        {
            goto branch_yes_6;
        }
        else
        {
            goto branch_no_6;
        }
        branch_yes_6:;
        {
            nuitka_bool tmp_assign_source_20;
            tmp_assign_source_20 = NUITKA_BOOL_FALSE;
            tmp_with_1__indicator = tmp_assign_source_20;
        }
        {
            nuitka_bool tmp_condition_result_7;
            PyObject *tmp_operand_name_1;
            PyObject *tmp_called_name_5;
            PyObject *tmp_args_element_name_8;
            PyObject *tmp_args_element_name_9;
            PyObject *tmp_args_element_name_10;
            CHECK_OBJECT( tmp_with_1__exit );
            tmp_called_name_5 = tmp_with_1__exit;
            tmp_args_element_name_8 = EXC_TYPE(PyThreadState_GET());
            tmp_args_element_name_9 = EXC_VALUE(PyThreadState_GET());
            tmp_args_element_name_10 = EXC_TRACEBACK(PyThreadState_GET());
            frame_56ef1eabe7851e61c622492a816b4656->m_frame.f_lineno = 380;
            {
                PyObject *call_args[] = { tmp_args_element_name_8, tmp_args_element_name_9, tmp_args_element_name_10 };
                tmp_operand_name_1 = CALL_FUNCTION_WITH_ARGS3( tmp_called_name_5, call_args );
            }

            if ( tmp_operand_name_1 == NULL )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 380;
                type_description_1 = "oooooooooooooo";
                goto try_except_handler_12;
            }
            tmp_res = CHECK_IF_TRUE( tmp_operand_name_1 );
            Py_DECREF( tmp_operand_name_1 );
            if ( tmp_res == -1 )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 380;
                type_description_1 = "oooooooooooooo";
                goto try_except_handler_12;
            }
            tmp_condition_result_7 = ( tmp_res == 0 ) ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
            if ( tmp_condition_result_7 == NUITKA_BOOL_TRUE )
            {
                goto branch_yes_7;
            }
            else
            {
                goto branch_no_7;
            }
            branch_yes_7:;
            tmp_result = RERAISE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
            if (unlikely( tmp_result == false ))
            {
                exception_lineno = 380;
            }

            if (exception_tb && exception_tb->tb_frame == &frame_56ef1eabe7851e61c622492a816b4656->m_frame) frame_56ef1eabe7851e61c622492a816b4656->m_frame.f_lineno = exception_tb->tb_lineno;
            type_description_1 = "oooooooooooooo";
            goto try_except_handler_12;
            branch_no_7:;
        }
        goto branch_end_6;
        branch_no_6:;
        tmp_result = RERAISE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
        if (unlikely( tmp_result == false ))
        {
            exception_lineno = 380;
        }

        if (exception_tb && exception_tb->tb_frame == &frame_56ef1eabe7851e61c622492a816b4656->m_frame) frame_56ef1eabe7851e61c622492a816b4656->m_frame.f_lineno = exception_tb->tb_lineno;
        type_description_1 = "oooooooooooooo";
        goto try_except_handler_12;
        branch_end_6:;
    }
    goto try_end_8;
    // Exception handler code:
    try_except_handler_12:;
    exception_keeper_type_9 = exception_type;
    exception_keeper_value_9 = exception_value;
    exception_keeper_tb_9 = exception_tb;
    exception_keeper_lineno_9 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    // Restore previous exception.
    SET_CURRENT_EXCEPTION( exception_preserved_type_2, exception_preserved_value_2, exception_preserved_tb_2 );
    // Re-raise.
    exception_type = exception_keeper_type_9;
    exception_value = exception_keeper_value_9;
    exception_tb = exception_keeper_tb_9;
    exception_lineno = exception_keeper_lineno_9;

    goto try_except_handler_10;
    // End of try:
    try_end_8:;
    // Restore previous exception.
    SET_CURRENT_EXCEPTION( exception_preserved_type_2, exception_preserved_value_2, exception_preserved_tb_2 );
    goto try_end_7;
    // exception handler codes exits in all cases
    NUITKA_CANNOT_GET_HERE( platform$$$function_6__linux_distribution );
    return NULL;
    // End of try:
    try_end_7:;
    goto try_end_9;
    // Exception handler code:
    try_except_handler_10:;
    exception_keeper_type_10 = exception_type;
    exception_keeper_value_10 = exception_value;
    exception_keeper_tb_10 = exception_tb;
    exception_keeper_lineno_10 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    {
        nuitka_bool tmp_condition_result_8;
        nuitka_bool tmp_compexpr_left_7;
        nuitka_bool tmp_compexpr_right_7;
        assert( tmp_with_1__indicator != NUITKA_BOOL_UNASSIGNED);
        tmp_compexpr_left_7 = tmp_with_1__indicator;
        tmp_compexpr_right_7 = NUITKA_BOOL_TRUE;
        tmp_condition_result_8 = ( tmp_compexpr_left_7 == tmp_compexpr_right_7 ) ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
        if ( tmp_condition_result_8 == NUITKA_BOOL_TRUE )
        {
            goto branch_yes_8;
        }
        else
        {
            goto branch_no_8;
        }
        branch_yes_8:;
        {
            PyObject *tmp_called_name_6;
            PyObject *tmp_call_result_2;
            CHECK_OBJECT( tmp_with_1__exit );
            tmp_called_name_6 = tmp_with_1__exit;
            frame_56ef1eabe7851e61c622492a816b4656->m_frame.f_lineno = 380;
            tmp_call_result_2 = CALL_FUNCTION_WITH_ARGS3( tmp_called_name_6, &PyTuple_GET_ITEM( const_tuple_none_none_none_tuple, 0 ) );

            if ( tmp_call_result_2 == NULL )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );

                Py_DECREF( exception_keeper_type_10 );
                Py_XDECREF( exception_keeper_value_10 );
                Py_XDECREF( exception_keeper_tb_10 );

                exception_lineno = 380;
                type_description_1 = "oooooooooooooo";
                goto try_except_handler_9;
            }
            Py_DECREF( tmp_call_result_2 );
        }
        branch_no_8:;
    }
    // Re-raise.
    exception_type = exception_keeper_type_10;
    exception_value = exception_keeper_value_10;
    exception_tb = exception_keeper_tb_10;
    exception_lineno = exception_keeper_lineno_10;

    goto try_except_handler_9;
    // End of try:
    try_end_9:;
    {
        nuitka_bool tmp_condition_result_9;
        nuitka_bool tmp_compexpr_left_8;
        nuitka_bool tmp_compexpr_right_8;
        assert( tmp_with_1__indicator != NUITKA_BOOL_UNASSIGNED);
        tmp_compexpr_left_8 = tmp_with_1__indicator;
        tmp_compexpr_right_8 = NUITKA_BOOL_TRUE;
        tmp_condition_result_9 = ( tmp_compexpr_left_8 == tmp_compexpr_right_8 ) ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
        if ( tmp_condition_result_9 == NUITKA_BOOL_TRUE )
        {
            goto branch_yes_9;
        }
        else
        {
            goto branch_no_9;
        }
        branch_yes_9:;
        {
            PyObject *tmp_called_name_7;
            PyObject *tmp_call_result_3;
            CHECK_OBJECT( tmp_with_1__exit );
            tmp_called_name_7 = tmp_with_1__exit;
            frame_56ef1eabe7851e61c622492a816b4656->m_frame.f_lineno = 380;
            tmp_call_result_3 = CALL_FUNCTION_WITH_ARGS3( tmp_called_name_7, &PyTuple_GET_ITEM( const_tuple_none_none_none_tuple, 0 ) );

            if ( tmp_call_result_3 == NULL )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 380;
                type_description_1 = "oooooooooooooo";
                goto try_except_handler_9;
            }
            Py_DECREF( tmp_call_result_3 );
        }
        branch_no_9:;
    }
    goto try_end_10;
    // Exception handler code:
    try_except_handler_9:;
    exception_keeper_type_11 = exception_type;
    exception_keeper_value_11 = exception_value;
    exception_keeper_tb_11 = exception_tb;
    exception_keeper_lineno_11 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    Py_XDECREF( tmp_with_1__source );
    tmp_with_1__source = NULL;

    Py_XDECREF( tmp_with_1__enter );
    tmp_with_1__enter = NULL;

    Py_XDECREF( tmp_with_1__exit );
    tmp_with_1__exit = NULL;

    // Re-raise.
    exception_type = exception_keeper_type_11;
    exception_value = exception_keeper_value_11;
    exception_tb = exception_keeper_tb_11;
    exception_lineno = exception_keeper_lineno_11;

    goto frame_exception_exit_1;
    // End of try:
    try_end_10:;
    CHECK_OBJECT( (PyObject *)tmp_with_1__source );
    Py_DECREF( tmp_with_1__source );
    tmp_with_1__source = NULL;

    CHECK_OBJECT( (PyObject *)tmp_with_1__enter );
    Py_DECREF( tmp_with_1__enter );
    tmp_with_1__enter = NULL;

    CHECK_OBJECT( (PyObject *)tmp_with_1__exit );
    Py_DECREF( tmp_with_1__exit );
    tmp_with_1__exit = NULL;

    // Tried code:
    {
        PyObject *tmp_assign_source_21;
        PyObject *tmp_iter_arg_3;
        PyObject *tmp_called_name_8;
        PyObject *tmp_mvar_value_7;
        PyObject *tmp_args_element_name_11;
        tmp_mvar_value_7 = GET_STRING_DICT_VALUE( moduledict_platform, (Nuitka_StringObject *)const_str_plain__parse_release_file );

        if (unlikely( tmp_mvar_value_7 == NULL ))
        {
            tmp_mvar_value_7 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain__parse_release_file );
        }

        if ( tmp_mvar_value_7 == NULL )
        {

            exception_type = PyExc_NameError;
            Py_INCREF( exception_type );
            exception_value = PyUnicode_FromFormat( "name '%s' is not defined", "_parse_release_file" );
            exception_tb = NULL;
            NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
            CHAIN_EXCEPTION( exception_value );

            exception_lineno = 383;
            type_description_1 = "oooooooooooooo";
            goto try_except_handler_13;
        }

        tmp_called_name_8 = tmp_mvar_value_7;
        if ( var_firstline == NULL )
        {

            exception_type = PyExc_UnboundLocalError;
            Py_INCREF( exception_type );
            exception_value = PyUnicode_FromFormat( "local variable '%s' referenced before assignment", "firstline" );
            exception_tb = NULL;
            NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
            CHAIN_EXCEPTION( exception_value );

            exception_lineno = 383;
            type_description_1 = "oooooooooooooo";
            goto try_except_handler_13;
        }

        tmp_args_element_name_11 = var_firstline;
        frame_56ef1eabe7851e61c622492a816b4656->m_frame.f_lineno = 383;
        {
            PyObject *call_args[] = { tmp_args_element_name_11 };
            tmp_iter_arg_3 = CALL_FUNCTION_WITH_ARGS1( tmp_called_name_8, call_args );
        }

        if ( tmp_iter_arg_3 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 383;
            type_description_1 = "oooooooooooooo";
            goto try_except_handler_13;
        }
        tmp_assign_source_21 = MAKE_UNPACK_ITERATOR( tmp_iter_arg_3 );
        Py_DECREF( tmp_iter_arg_3 );
        if ( tmp_assign_source_21 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 383;
            type_description_1 = "oooooooooooooo";
            goto try_except_handler_13;
        }
        assert( tmp_tuple_unpack_2__source_iter == NULL );
        tmp_tuple_unpack_2__source_iter = tmp_assign_source_21;
    }
    // Tried code:
    {
        PyObject *tmp_assign_source_22;
        PyObject *tmp_unpack_3;
        CHECK_OBJECT( tmp_tuple_unpack_2__source_iter );
        tmp_unpack_3 = tmp_tuple_unpack_2__source_iter;
        tmp_assign_source_22 = UNPACK_NEXT( tmp_unpack_3, 0, 3 );
        if ( tmp_assign_source_22 == NULL )
        {
            if ( !ERROR_OCCURRED() )
            {
                exception_type = PyExc_StopIteration;
                Py_INCREF( exception_type );
                exception_value = NULL;
                exception_tb = NULL;
            }
            else
            {
                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
            }


            type_description_1 = "oooooooooooooo";
            exception_lineno = 383;
            goto try_except_handler_14;
        }
        assert( tmp_tuple_unpack_2__element_1 == NULL );
        tmp_tuple_unpack_2__element_1 = tmp_assign_source_22;
    }
    {
        PyObject *tmp_assign_source_23;
        PyObject *tmp_unpack_4;
        CHECK_OBJECT( tmp_tuple_unpack_2__source_iter );
        tmp_unpack_4 = tmp_tuple_unpack_2__source_iter;
        tmp_assign_source_23 = UNPACK_NEXT( tmp_unpack_4, 1, 3 );
        if ( tmp_assign_source_23 == NULL )
        {
            if ( !ERROR_OCCURRED() )
            {
                exception_type = PyExc_StopIteration;
                Py_INCREF( exception_type );
                exception_value = NULL;
                exception_tb = NULL;
            }
            else
            {
                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
            }


            type_description_1 = "oooooooooooooo";
            exception_lineno = 383;
            goto try_except_handler_14;
        }
        assert( tmp_tuple_unpack_2__element_2 == NULL );
        tmp_tuple_unpack_2__element_2 = tmp_assign_source_23;
    }
    {
        PyObject *tmp_assign_source_24;
        PyObject *tmp_unpack_5;
        CHECK_OBJECT( tmp_tuple_unpack_2__source_iter );
        tmp_unpack_5 = tmp_tuple_unpack_2__source_iter;
        tmp_assign_source_24 = UNPACK_NEXT( tmp_unpack_5, 2, 3 );
        if ( tmp_assign_source_24 == NULL )
        {
            if ( !ERROR_OCCURRED() )
            {
                exception_type = PyExc_StopIteration;
                Py_INCREF( exception_type );
                exception_value = NULL;
                exception_tb = NULL;
            }
            else
            {
                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
            }


            type_description_1 = "oooooooooooooo";
            exception_lineno = 383;
            goto try_except_handler_14;
        }
        assert( tmp_tuple_unpack_2__element_3 == NULL );
        tmp_tuple_unpack_2__element_3 = tmp_assign_source_24;
    }
    {
        PyObject *tmp_iterator_name_2;
        CHECK_OBJECT( tmp_tuple_unpack_2__source_iter );
        tmp_iterator_name_2 = tmp_tuple_unpack_2__source_iter;
        // Check if iterator has left-over elements.
        CHECK_OBJECT( tmp_iterator_name_2 ); assert( HAS_ITERNEXT( tmp_iterator_name_2 ) );

        tmp_iterator_attempt = (*Py_TYPE( tmp_iterator_name_2 )->tp_iternext)( tmp_iterator_name_2 );

        if (likely( tmp_iterator_attempt == NULL ))
        {
            PyObject *error = GET_ERROR_OCCURRED();

            if ( error != NULL )
            {
                if ( EXCEPTION_MATCH_BOOL_SINGLE( error, PyExc_StopIteration ))
                {
                    CLEAR_ERROR_OCCURRED();
                }
                else
                {
                    FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );

                    type_description_1 = "oooooooooooooo";
                    exception_lineno = 383;
                    goto try_except_handler_14;
                }
            }
        }
        else
        {
            Py_DECREF( tmp_iterator_attempt );

            // TODO: Could avoid PyErr_Format.
#if PYTHON_VERSION < 300
            PyErr_Format( PyExc_ValueError, "too many values to unpack" );
#else
            PyErr_Format( PyExc_ValueError, "too many values to unpack (expected 3)" );
#endif
            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );

            type_description_1 = "oooooooooooooo";
            exception_lineno = 383;
            goto try_except_handler_14;
        }
    }
    goto try_end_11;
    // Exception handler code:
    try_except_handler_14:;
    exception_keeper_type_12 = exception_type;
    exception_keeper_value_12 = exception_value;
    exception_keeper_tb_12 = exception_tb;
    exception_keeper_lineno_12 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    CHECK_OBJECT( (PyObject *)tmp_tuple_unpack_2__source_iter );
    Py_DECREF( tmp_tuple_unpack_2__source_iter );
    tmp_tuple_unpack_2__source_iter = NULL;

    // Re-raise.
    exception_type = exception_keeper_type_12;
    exception_value = exception_keeper_value_12;
    exception_tb = exception_keeper_tb_12;
    exception_lineno = exception_keeper_lineno_12;

    goto try_except_handler_13;
    // End of try:
    try_end_11:;
    goto try_end_12;
    // Exception handler code:
    try_except_handler_13:;
    exception_keeper_type_13 = exception_type;
    exception_keeper_value_13 = exception_value;
    exception_keeper_tb_13 = exception_tb;
    exception_keeper_lineno_13 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    Py_XDECREF( tmp_tuple_unpack_2__element_1 );
    tmp_tuple_unpack_2__element_1 = NULL;

    Py_XDECREF( tmp_tuple_unpack_2__element_2 );
    tmp_tuple_unpack_2__element_2 = NULL;

    Py_XDECREF( tmp_tuple_unpack_2__element_3 );
    tmp_tuple_unpack_2__element_3 = NULL;

    // Re-raise.
    exception_type = exception_keeper_type_13;
    exception_value = exception_keeper_value_13;
    exception_tb = exception_keeper_tb_13;
    exception_lineno = exception_keeper_lineno_13;

    goto frame_exception_exit_1;
    // End of try:
    try_end_12:;
    CHECK_OBJECT( (PyObject *)tmp_tuple_unpack_2__source_iter );
    Py_DECREF( tmp_tuple_unpack_2__source_iter );
    tmp_tuple_unpack_2__source_iter = NULL;

    {
        PyObject *tmp_assign_source_25;
        CHECK_OBJECT( tmp_tuple_unpack_2__element_1 );
        tmp_assign_source_25 = tmp_tuple_unpack_2__element_1;
        {
            PyObject *old = var__distname;
            var__distname = tmp_assign_source_25;
            Py_INCREF( var__distname );
            Py_XDECREF( old );
        }

    }
    Py_XDECREF( tmp_tuple_unpack_2__element_1 );
    tmp_tuple_unpack_2__element_1 = NULL;

    {
        PyObject *tmp_assign_source_26;
        CHECK_OBJECT( tmp_tuple_unpack_2__element_2 );
        tmp_assign_source_26 = tmp_tuple_unpack_2__element_2;
        assert( var__version == NULL );
        Py_INCREF( tmp_assign_source_26 );
        var__version = tmp_assign_source_26;
    }
    Py_XDECREF( tmp_tuple_unpack_2__element_2 );
    tmp_tuple_unpack_2__element_2 = NULL;

    {
        PyObject *tmp_assign_source_27;
        CHECK_OBJECT( tmp_tuple_unpack_2__element_3 );
        tmp_assign_source_27 = tmp_tuple_unpack_2__element_3;
        assert( var__id == NULL );
        Py_INCREF( tmp_assign_source_27 );
        var__id = tmp_assign_source_27;
    }
    Py_XDECREF( tmp_tuple_unpack_2__element_3 );
    tmp_tuple_unpack_2__element_3 = NULL;

    {
        nuitka_bool tmp_condition_result_10;
        int tmp_and_left_truth_1;
        nuitka_bool tmp_and_left_value_1;
        nuitka_bool tmp_and_right_value_1;
        int tmp_truth_name_1;
        int tmp_truth_name_2;
        CHECK_OBJECT( var__distname );
        tmp_truth_name_1 = CHECK_IF_TRUE( var__distname );
        if ( tmp_truth_name_1 == -1 )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 385;
            type_description_1 = "oooooooooooooo";
            goto frame_exception_exit_1;
        }
        tmp_and_left_value_1 = tmp_truth_name_1 == 1 ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
        tmp_and_left_truth_1 = tmp_and_left_value_1 == NUITKA_BOOL_TRUE ? 1 : 0;
        if ( tmp_and_left_truth_1 == 1 )
        {
            goto and_right_1;
        }
        else
        {
            goto and_left_1;
        }
        and_right_1:;
        CHECK_OBJECT( par_full_distribution_name );
        tmp_truth_name_2 = CHECK_IF_TRUE( par_full_distribution_name );
        if ( tmp_truth_name_2 == -1 )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 385;
            type_description_1 = "oooooooooooooo";
            goto frame_exception_exit_1;
        }
        tmp_and_right_value_1 = tmp_truth_name_2 == 1 ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
        tmp_condition_result_10 = tmp_and_right_value_1;
        goto and_end_1;
        and_left_1:;
        tmp_condition_result_10 = tmp_and_left_value_1;
        and_end_1:;
        if ( tmp_condition_result_10 == NUITKA_BOOL_TRUE )
        {
            goto branch_yes_10;
        }
        else
        {
            goto branch_no_10;
        }
        branch_yes_10:;
        {
            PyObject *tmp_assign_source_28;
            CHECK_OBJECT( var__distname );
            tmp_assign_source_28 = var__distname;
            {
                PyObject *old = par_distname;
                par_distname = tmp_assign_source_28;
                Py_INCREF( par_distname );
                Py_XDECREF( old );
            }

        }
        branch_no_10:;
    }
    {
        nuitka_bool tmp_condition_result_11;
        int tmp_truth_name_3;
        CHECK_OBJECT( var__version );
        tmp_truth_name_3 = CHECK_IF_TRUE( var__version );
        if ( tmp_truth_name_3 == -1 )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 387;
            type_description_1 = "oooooooooooooo";
            goto frame_exception_exit_1;
        }
        tmp_condition_result_11 = tmp_truth_name_3 == 1 ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
        if ( tmp_condition_result_11 == NUITKA_BOOL_TRUE )
        {
            goto branch_yes_11;
        }
        else
        {
            goto branch_no_11;
        }
        branch_yes_11:;
        {
            PyObject *tmp_assign_source_29;
            CHECK_OBJECT( var__version );
            tmp_assign_source_29 = var__version;
            {
                PyObject *old = par_version;
                assert( old != NULL );
                par_version = tmp_assign_source_29;
                Py_INCREF( par_version );
                Py_DECREF( old );
            }

        }
        branch_no_11:;
    }
    {
        nuitka_bool tmp_condition_result_12;
        int tmp_truth_name_4;
        CHECK_OBJECT( var__id );
        tmp_truth_name_4 = CHECK_IF_TRUE( var__id );
        if ( tmp_truth_name_4 == -1 )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 389;
            type_description_1 = "oooooooooooooo";
            goto frame_exception_exit_1;
        }
        tmp_condition_result_12 = tmp_truth_name_4 == 1 ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
        if ( tmp_condition_result_12 == NUITKA_BOOL_TRUE )
        {
            goto branch_yes_12;
        }
        else
        {
            goto branch_no_12;
        }
        branch_yes_12:;
        {
            PyObject *tmp_assign_source_30;
            CHECK_OBJECT( var__id );
            tmp_assign_source_30 = var__id;
            {
                PyObject *old = par_id;
                assert( old != NULL );
                par_id = tmp_assign_source_30;
                Py_INCREF( par_id );
                Py_DECREF( old );
            }

        }
        branch_no_12:;
    }
    {
        PyObject *tmp_tuple_element_2;
        if ( par_distname == NULL )
        {

            exception_type = PyExc_UnboundLocalError;
            Py_INCREF( exception_type );
            exception_value = PyUnicode_FromFormat( "local variable '%s' referenced before assignment", "distname" );
            exception_tb = NULL;
            NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
            CHAIN_EXCEPTION( exception_value );

            exception_lineno = 391;
            type_description_1 = "oooooooooooooo";
            goto frame_exception_exit_1;
        }

        tmp_tuple_element_2 = par_distname;
        tmp_return_value = PyTuple_New( 3 );
        Py_INCREF( tmp_tuple_element_2 );
        PyTuple_SET_ITEM( tmp_return_value, 0, tmp_tuple_element_2 );
        CHECK_OBJECT( par_version );
        tmp_tuple_element_2 = par_version;
        Py_INCREF( tmp_tuple_element_2 );
        PyTuple_SET_ITEM( tmp_return_value, 1, tmp_tuple_element_2 );
        CHECK_OBJECT( par_id );
        tmp_tuple_element_2 = par_id;
        Py_INCREF( tmp_tuple_element_2 );
        PyTuple_SET_ITEM( tmp_return_value, 2, tmp_tuple_element_2 );
        goto frame_return_exit_1;
    }

#if 0
    RESTORE_FRAME_EXCEPTION( frame_56ef1eabe7851e61c622492a816b4656 );
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto frame_no_exception_1;

    frame_return_exit_1:;
#if 0
    RESTORE_FRAME_EXCEPTION( frame_56ef1eabe7851e61c622492a816b4656 );
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto try_return_handler_1;

    frame_exception_exit_1:;

#if 0
    RESTORE_FRAME_EXCEPTION( frame_56ef1eabe7851e61c622492a816b4656 );
#endif

    if ( exception_tb == NULL )
    {
        exception_tb = MAKE_TRACEBACK( frame_56ef1eabe7851e61c622492a816b4656, exception_lineno );
    }
    else if ( exception_tb->tb_frame != &frame_56ef1eabe7851e61c622492a816b4656->m_frame )
    {
        exception_tb = ADD_TRACEBACK( exception_tb, frame_56ef1eabe7851e61c622492a816b4656, exception_lineno );
    }

    // Attachs locals to frame if any.
    Nuitka_Frame_AttachLocals(
        (struct Nuitka_FrameObject *)frame_56ef1eabe7851e61c622492a816b4656,
        type_description_1,
        par_distname,
        par_version,
        par_id,
        par_supported_dists,
        par_full_distribution_name,
        var_etc,
        var_file,
        var_m,
        var__distname,
        var_dummy,
        var_f,
        var_firstline,
        var__version,
        var__id
    );


    // Release cached frame.
    if ( frame_56ef1eabe7851e61c622492a816b4656 == cache_frame_56ef1eabe7851e61c622492a816b4656 )
    {
        Py_DECREF( frame_56ef1eabe7851e61c622492a816b4656 );
    }
    cache_frame_56ef1eabe7851e61c622492a816b4656 = NULL;

    assertFrameObject( frame_56ef1eabe7851e61c622492a816b4656 );

    // Put the previous frame back on top.
    popFrameStack();

    // Return the error.
    goto try_except_handler_1;

    frame_no_exception_1:;
    // tried codes exits in all cases
    NUITKA_CANNOT_GET_HERE( platform$$$function_6__linux_distribution );
    return NULL;
    // Return handler code:
    try_return_handler_1:;
    Py_XDECREF( par_distname );
    par_distname = NULL;

    Py_XDECREF( par_version );
    par_version = NULL;

    Py_XDECREF( par_id );
    par_id = NULL;

    CHECK_OBJECT( (PyObject *)par_supported_dists );
    Py_DECREF( par_supported_dists );
    par_supported_dists = NULL;

    CHECK_OBJECT( (PyObject *)par_full_distribution_name );
    Py_DECREF( par_full_distribution_name );
    par_full_distribution_name = NULL;

    Py_XDECREF( var_etc );
    var_etc = NULL;

    Py_XDECREF( var_file );
    var_file = NULL;

    Py_XDECREF( var_m );
    var_m = NULL;

    Py_XDECREF( var__distname );
    var__distname = NULL;

    Py_XDECREF( var_dummy );
    var_dummy = NULL;

    Py_XDECREF( var_f );
    var_f = NULL;

    Py_XDECREF( var_firstline );
    var_firstline = NULL;

    Py_XDECREF( var__version );
    var__version = NULL;

    Py_XDECREF( var__id );
    var__id = NULL;

    goto function_return_exit;
    // Exception handler code:
    try_except_handler_1:;
    exception_keeper_type_14 = exception_type;
    exception_keeper_value_14 = exception_value;
    exception_keeper_tb_14 = exception_tb;
    exception_keeper_lineno_14 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    Py_XDECREF( par_distname );
    par_distname = NULL;

    Py_XDECREF( par_version );
    par_version = NULL;

    Py_XDECREF( par_id );
    par_id = NULL;

    CHECK_OBJECT( (PyObject *)par_supported_dists );
    Py_DECREF( par_supported_dists );
    par_supported_dists = NULL;

    CHECK_OBJECT( (PyObject *)par_full_distribution_name );
    Py_DECREF( par_full_distribution_name );
    par_full_distribution_name = NULL;

    Py_XDECREF( var_etc );
    var_etc = NULL;

    Py_XDECREF( var_file );
    var_file = NULL;

    Py_XDECREF( var_m );
    var_m = NULL;

    Py_XDECREF( var__distname );
    var__distname = NULL;

    Py_XDECREF( var_dummy );
    var_dummy = NULL;

    Py_XDECREF( var_f );
    var_f = NULL;

    Py_XDECREF( var_firstline );
    var_firstline = NULL;

    Py_XDECREF( var__version );
    var__version = NULL;

    Py_XDECREF( var__id );
    var__id = NULL;

    // Re-raise.
    exception_type = exception_keeper_type_14;
    exception_value = exception_keeper_value_14;
    exception_tb = exception_keeper_tb_14;
    exception_lineno = exception_keeper_lineno_14;

    goto function_exception_exit;
    // End of try:

    // Return statement must have exited already.
    NUITKA_CANNOT_GET_HERE( platform$$$function_6__linux_distribution );
    return NULL;

function_exception_exit:
    assert( exception_type );
    RESTORE_ERROR_OCCURRED( exception_type, exception_value, exception_tb );

    return NULL;

function_return_exit:
   // Function cleanup code if any.


   // Actual function exit with return value, making sure we did not make
   // the error status worse despite non-NULL return.
   CHECK_OBJECT( tmp_return_value );
   assert( had_error || !ERROR_OCCURRED() );
   return tmp_return_value;
}


static PyObject *impl_platform$$$function_7_dist( struct Nuitka_FunctionObject const *self, PyObject **python_pars )
{
    // Preserve error status for checks
#ifndef __NUITKA_NO_ASSERT__
    NUITKA_MAY_BE_UNUSED bool had_error = ERROR_OCCURRED();
#endif

    // Local variable declarations.
    PyObject *par_distname = python_pars[ 0 ];
    PyObject *par_version = python_pars[ 1 ];
    PyObject *par_id = python_pars[ 2 ];
    PyObject *par_supported_dists = python_pars[ 3 ];
    PyObject *var_warnings = NULL;
    struct Nuitka_FrameObject *frame_0aedce3e67af834a5e5e785c9a43d447;
    NUITKA_MAY_BE_UNUSED char const *type_description_1 = NULL;
    PyObject *exception_type = NULL;
    PyObject *exception_value = NULL;
    PyTracebackObject *exception_tb = NULL;
    NUITKA_MAY_BE_UNUSED int exception_lineno = 0;
    PyObject *tmp_return_value = NULL;
    int tmp_res;
    static struct Nuitka_FrameObject *cache_frame_0aedce3e67af834a5e5e785c9a43d447 = NULL;
    PyObject *exception_keeper_type_1;
    PyObject *exception_keeper_value_1;
    PyTracebackObject *exception_keeper_tb_1;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_1;

    // Actual function body.
    // Tried code:
    MAKE_OR_REUSE_FRAME( cache_frame_0aedce3e67af834a5e5e785c9a43d447, codeobj_0aedce3e67af834a5e5e785c9a43d447, module_platform, sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *) );
    frame_0aedce3e67af834a5e5e785c9a43d447 = cache_frame_0aedce3e67af834a5e5e785c9a43d447;

    // Push the new frame as the currently active one.
    pushFrameStack( frame_0aedce3e67af834a5e5e785c9a43d447 );

    // Mark the frame object as in use, ref count 1 will be up for reuse.
    assert( Py_REFCNT( frame_0aedce3e67af834a5e5e785c9a43d447 ) == 2 ); // Frame stack

    // Framed code:
    {
        PyObject *tmp_assign_source_1;
        PyObject *tmp_name_name_1;
        PyObject *tmp_globals_name_1;
        PyObject *tmp_locals_name_1;
        PyObject *tmp_fromlist_name_1;
        PyObject *tmp_level_name_1;
        tmp_name_name_1 = const_str_plain_warnings;
        tmp_globals_name_1 = (PyObject *)moduledict_platform;
        tmp_locals_name_1 = Py_None;
        tmp_fromlist_name_1 = Py_None;
        tmp_level_name_1 = const_int_0;
        frame_0aedce3e67af834a5e5e785c9a43d447->m_frame.f_lineno = 409;
        tmp_assign_source_1 = IMPORT_MODULE5( tmp_name_name_1, tmp_globals_name_1, tmp_locals_name_1, tmp_fromlist_name_1, tmp_level_name_1 );
        if ( tmp_assign_source_1 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 409;
            type_description_1 = "ooooo";
            goto frame_exception_exit_1;
        }
        assert( var_warnings == NULL );
        var_warnings = tmp_assign_source_1;
    }
    {
        PyObject *tmp_called_name_1;
        PyObject *tmp_source_name_1;
        PyObject *tmp_call_result_1;
        PyObject *tmp_args_name_1;
        PyObject *tmp_tuple_element_1;
        PyObject *tmp_mvar_value_1;
        PyObject *tmp_kw_name_1;
        CHECK_OBJECT( var_warnings );
        tmp_source_name_1 = var_warnings;
        tmp_called_name_1 = LOOKUP_ATTRIBUTE( tmp_source_name_1, const_str_plain_warn );
        if ( tmp_called_name_1 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 410;
            type_description_1 = "ooooo";
            goto frame_exception_exit_1;
        }
        tmp_tuple_element_1 = const_str_digest_79a975d21d4348d44f8a8a6ac69a8ecf;
        tmp_args_name_1 = PyTuple_New( 2 );
        Py_INCREF( tmp_tuple_element_1 );
        PyTuple_SET_ITEM( tmp_args_name_1, 0, tmp_tuple_element_1 );
        tmp_mvar_value_1 = GET_STRING_DICT_VALUE( moduledict_platform, (Nuitka_StringObject *)const_str_plain_DeprecationWarning );

        if (unlikely( tmp_mvar_value_1 == NULL ))
        {
            tmp_mvar_value_1 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_DeprecationWarning );
        }

        if ( tmp_mvar_value_1 == NULL )
        {
            Py_DECREF( tmp_called_name_1 );
            Py_DECREF( tmp_args_name_1 );
            exception_type = PyExc_NameError;
            Py_INCREF( exception_type );
            exception_value = PyUnicode_FromFormat( "name '%s' is not defined", "DeprecationWarning" );
            exception_tb = NULL;
            NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
            CHAIN_EXCEPTION( exception_value );

            exception_lineno = 411;
            type_description_1 = "ooooo";
            goto frame_exception_exit_1;
        }

        tmp_tuple_element_1 = tmp_mvar_value_1;
        Py_INCREF( tmp_tuple_element_1 );
        PyTuple_SET_ITEM( tmp_args_name_1, 1, tmp_tuple_element_1 );
        tmp_kw_name_1 = PyDict_Copy( const_dict_f154c9a58c9419d7e391901d7b7fe49e );
        frame_0aedce3e67af834a5e5e785c9a43d447->m_frame.f_lineno = 410;
        tmp_call_result_1 = CALL_FUNCTION( tmp_called_name_1, tmp_args_name_1, tmp_kw_name_1 );
        Py_DECREF( tmp_called_name_1 );
        Py_DECREF( tmp_args_name_1 );
        Py_DECREF( tmp_kw_name_1 );
        if ( tmp_call_result_1 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 410;
            type_description_1 = "ooooo";
            goto frame_exception_exit_1;
        }
        Py_DECREF( tmp_call_result_1 );
    }
    {
        PyObject *tmp_called_name_2;
        PyObject *tmp_mvar_value_2;
        PyObject *tmp_args_name_2;
        PyObject *tmp_tuple_element_2;
        PyObject *tmp_kw_name_2;
        PyObject *tmp_dict_key_1;
        PyObject *tmp_dict_value_1;
        PyObject *tmp_dict_key_2;
        PyObject *tmp_dict_value_2;
        tmp_mvar_value_2 = GET_STRING_DICT_VALUE( moduledict_platform, (Nuitka_StringObject *)const_str_plain__linux_distribution );

        if (unlikely( tmp_mvar_value_2 == NULL ))
        {
            tmp_mvar_value_2 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain__linux_distribution );
        }

        if ( tmp_mvar_value_2 == NULL )
        {

            exception_type = PyExc_NameError;
            Py_INCREF( exception_type );
            exception_value = PyUnicode_FromFormat( "name '%s' is not defined", "_linux_distribution" );
            exception_tb = NULL;
            NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
            CHAIN_EXCEPTION( exception_value );

            exception_lineno = 412;
            type_description_1 = "ooooo";
            goto frame_exception_exit_1;
        }

        tmp_called_name_2 = tmp_mvar_value_2;
        CHECK_OBJECT( par_distname );
        tmp_tuple_element_2 = par_distname;
        tmp_args_name_2 = PyTuple_New( 3 );
        Py_INCREF( tmp_tuple_element_2 );
        PyTuple_SET_ITEM( tmp_args_name_2, 0, tmp_tuple_element_2 );
        CHECK_OBJECT( par_version );
        tmp_tuple_element_2 = par_version;
        Py_INCREF( tmp_tuple_element_2 );
        PyTuple_SET_ITEM( tmp_args_name_2, 1, tmp_tuple_element_2 );
        CHECK_OBJECT( par_id );
        tmp_tuple_element_2 = par_id;
        Py_INCREF( tmp_tuple_element_2 );
        PyTuple_SET_ITEM( tmp_args_name_2, 2, tmp_tuple_element_2 );
        tmp_dict_key_1 = const_str_plain_supported_dists;
        CHECK_OBJECT( par_supported_dists );
        tmp_dict_value_1 = par_supported_dists;
        tmp_kw_name_2 = _PyDict_NewPresized( 2 );
        tmp_res = PyDict_SetItem( tmp_kw_name_2, tmp_dict_key_1, tmp_dict_value_1 );
        assert( !(tmp_res != 0) );
        tmp_dict_key_2 = const_str_plain_full_distribution_name;
        tmp_dict_value_2 = const_int_0;
        tmp_res = PyDict_SetItem( tmp_kw_name_2, tmp_dict_key_2, tmp_dict_value_2 );
        assert( !(tmp_res != 0) );
        frame_0aedce3e67af834a5e5e785c9a43d447->m_frame.f_lineno = 412;
        tmp_return_value = CALL_FUNCTION( tmp_called_name_2, tmp_args_name_2, tmp_kw_name_2 );
        Py_DECREF( tmp_args_name_2 );
        Py_DECREF( tmp_kw_name_2 );
        if ( tmp_return_value == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 412;
            type_description_1 = "ooooo";
            goto frame_exception_exit_1;
        }
        goto frame_return_exit_1;
    }

#if 0
    RESTORE_FRAME_EXCEPTION( frame_0aedce3e67af834a5e5e785c9a43d447 );
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto frame_no_exception_1;

    frame_return_exit_1:;
#if 0
    RESTORE_FRAME_EXCEPTION( frame_0aedce3e67af834a5e5e785c9a43d447 );
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto try_return_handler_1;

    frame_exception_exit_1:;

#if 0
    RESTORE_FRAME_EXCEPTION( frame_0aedce3e67af834a5e5e785c9a43d447 );
#endif

    if ( exception_tb == NULL )
    {
        exception_tb = MAKE_TRACEBACK( frame_0aedce3e67af834a5e5e785c9a43d447, exception_lineno );
    }
    else if ( exception_tb->tb_frame != &frame_0aedce3e67af834a5e5e785c9a43d447->m_frame )
    {
        exception_tb = ADD_TRACEBACK( exception_tb, frame_0aedce3e67af834a5e5e785c9a43d447, exception_lineno );
    }

    // Attachs locals to frame if any.
    Nuitka_Frame_AttachLocals(
        (struct Nuitka_FrameObject *)frame_0aedce3e67af834a5e5e785c9a43d447,
        type_description_1,
        par_distname,
        par_version,
        par_id,
        par_supported_dists,
        var_warnings
    );


    // Release cached frame.
    if ( frame_0aedce3e67af834a5e5e785c9a43d447 == cache_frame_0aedce3e67af834a5e5e785c9a43d447 )
    {
        Py_DECREF( frame_0aedce3e67af834a5e5e785c9a43d447 );
    }
    cache_frame_0aedce3e67af834a5e5e785c9a43d447 = NULL;

    assertFrameObject( frame_0aedce3e67af834a5e5e785c9a43d447 );

    // Put the previous frame back on top.
    popFrameStack();

    // Return the error.
    goto try_except_handler_1;

    frame_no_exception_1:;
    // tried codes exits in all cases
    NUITKA_CANNOT_GET_HERE( platform$$$function_7_dist );
    return NULL;
    // Return handler code:
    try_return_handler_1:;
    CHECK_OBJECT( (PyObject *)par_distname );
    Py_DECREF( par_distname );
    par_distname = NULL;

    CHECK_OBJECT( (PyObject *)par_version );
    Py_DECREF( par_version );
    par_version = NULL;

    CHECK_OBJECT( (PyObject *)par_id );
    Py_DECREF( par_id );
    par_id = NULL;

    CHECK_OBJECT( (PyObject *)par_supported_dists );
    Py_DECREF( par_supported_dists );
    par_supported_dists = NULL;

    CHECK_OBJECT( (PyObject *)var_warnings );
    Py_DECREF( var_warnings );
    var_warnings = NULL;

    goto function_return_exit;
    // Exception handler code:
    try_except_handler_1:;
    exception_keeper_type_1 = exception_type;
    exception_keeper_value_1 = exception_value;
    exception_keeper_tb_1 = exception_tb;
    exception_keeper_lineno_1 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    CHECK_OBJECT( (PyObject *)par_distname );
    Py_DECREF( par_distname );
    par_distname = NULL;

    CHECK_OBJECT( (PyObject *)par_version );
    Py_DECREF( par_version );
    par_version = NULL;

    CHECK_OBJECT( (PyObject *)par_id );
    Py_DECREF( par_id );
    par_id = NULL;

    CHECK_OBJECT( (PyObject *)par_supported_dists );
    Py_DECREF( par_supported_dists );
    par_supported_dists = NULL;

    Py_XDECREF( var_warnings );
    var_warnings = NULL;

    // Re-raise.
    exception_type = exception_keeper_type_1;
    exception_value = exception_keeper_value_1;
    exception_tb = exception_keeper_tb_1;
    exception_lineno = exception_keeper_lineno_1;

    goto function_exception_exit;
    // End of try:

    // Return statement must have exited already.
    NUITKA_CANNOT_GET_HERE( platform$$$function_7_dist );
    return NULL;

function_exception_exit:
    assert( exception_type );
    RESTORE_ERROR_OCCURRED( exception_type, exception_value, exception_tb );

    return NULL;

function_return_exit:
   // Function cleanup code if any.


   // Actual function exit with return value, making sure we did not make
   // the error status worse despite non-NULL return.
   CHECK_OBJECT( tmp_return_value );
   assert( had_error || !ERROR_OCCURRED() );
   return tmp_return_value;
}


static PyObject *impl_platform$$$function_8_popen( struct Nuitka_FunctionObject const *self, PyObject **python_pars )
{
    // Preserve error status for checks
#ifndef __NUITKA_NO_ASSERT__
    NUITKA_MAY_BE_UNUSED bool had_error = ERROR_OCCURRED();
#endif

    // Local variable declarations.
    PyObject *par_cmd = python_pars[ 0 ];
    PyObject *par_mode = python_pars[ 1 ];
    PyObject *par_bufsize = python_pars[ 2 ];
    PyObject *var_warnings = NULL;
    struct Nuitka_FrameObject *frame_d98589cf7a060717383e105fa046f5a9;
    NUITKA_MAY_BE_UNUSED char const *type_description_1 = NULL;
    PyObject *exception_type = NULL;
    PyObject *exception_value = NULL;
    PyTracebackObject *exception_tb = NULL;
    NUITKA_MAY_BE_UNUSED int exception_lineno = 0;
    PyObject *tmp_return_value = NULL;
    static struct Nuitka_FrameObject *cache_frame_d98589cf7a060717383e105fa046f5a9 = NULL;
    PyObject *exception_keeper_type_1;
    PyObject *exception_keeper_value_1;
    PyTracebackObject *exception_keeper_tb_1;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_1;

    // Actual function body.
    // Tried code:
    MAKE_OR_REUSE_FRAME( cache_frame_d98589cf7a060717383e105fa046f5a9, codeobj_d98589cf7a060717383e105fa046f5a9, module_platform, sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *) );
    frame_d98589cf7a060717383e105fa046f5a9 = cache_frame_d98589cf7a060717383e105fa046f5a9;

    // Push the new frame as the currently active one.
    pushFrameStack( frame_d98589cf7a060717383e105fa046f5a9 );

    // Mark the frame object as in use, ref count 1 will be up for reuse.
    assert( Py_REFCNT( frame_d98589cf7a060717383e105fa046f5a9 ) == 2 ); // Frame stack

    // Framed code:
    {
        PyObject *tmp_assign_source_1;
        PyObject *tmp_name_name_1;
        PyObject *tmp_globals_name_1;
        PyObject *tmp_locals_name_1;
        PyObject *tmp_fromlist_name_1;
        PyObject *tmp_level_name_1;
        tmp_name_name_1 = const_str_plain_warnings;
        tmp_globals_name_1 = (PyObject *)moduledict_platform;
        tmp_locals_name_1 = Py_None;
        tmp_fromlist_name_1 = Py_None;
        tmp_level_name_1 = const_int_0;
        frame_d98589cf7a060717383e105fa046f5a9->m_frame.f_lineno = 420;
        tmp_assign_source_1 = IMPORT_MODULE5( tmp_name_name_1, tmp_globals_name_1, tmp_locals_name_1, tmp_fromlist_name_1, tmp_level_name_1 );
        if ( tmp_assign_source_1 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 420;
            type_description_1 = "oooo";
            goto frame_exception_exit_1;
        }
        assert( var_warnings == NULL );
        var_warnings = tmp_assign_source_1;
    }
    {
        PyObject *tmp_called_name_1;
        PyObject *tmp_source_name_1;
        PyObject *tmp_call_result_1;
        PyObject *tmp_args_name_1;
        PyObject *tmp_tuple_element_1;
        PyObject *tmp_mvar_value_1;
        PyObject *tmp_kw_name_1;
        CHECK_OBJECT( var_warnings );
        tmp_source_name_1 = var_warnings;
        tmp_called_name_1 = LOOKUP_ATTRIBUTE( tmp_source_name_1, const_str_plain_warn );
        if ( tmp_called_name_1 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 421;
            type_description_1 = "oooo";
            goto frame_exception_exit_1;
        }
        tmp_tuple_element_1 = const_str_digest_4581d34f8d063218f6a5015edff8b01c;
        tmp_args_name_1 = PyTuple_New( 2 );
        Py_INCREF( tmp_tuple_element_1 );
        PyTuple_SET_ITEM( tmp_args_name_1, 0, tmp_tuple_element_1 );
        tmp_mvar_value_1 = GET_STRING_DICT_VALUE( moduledict_platform, (Nuitka_StringObject *)const_str_plain_DeprecationWarning );

        if (unlikely( tmp_mvar_value_1 == NULL ))
        {
            tmp_mvar_value_1 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_DeprecationWarning );
        }

        if ( tmp_mvar_value_1 == NULL )
        {
            Py_DECREF( tmp_called_name_1 );
            Py_DECREF( tmp_args_name_1 );
            exception_type = PyExc_NameError;
            Py_INCREF( exception_type );
            exception_value = PyUnicode_FromFormat( "name '%s' is not defined", "DeprecationWarning" );
            exception_tb = NULL;
            NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
            CHAIN_EXCEPTION( exception_value );

            exception_lineno = 421;
            type_description_1 = "oooo";
            goto frame_exception_exit_1;
        }

        tmp_tuple_element_1 = tmp_mvar_value_1;
        Py_INCREF( tmp_tuple_element_1 );
        PyTuple_SET_ITEM( tmp_args_name_1, 1, tmp_tuple_element_1 );
        tmp_kw_name_1 = PyDict_Copy( const_dict_f154c9a58c9419d7e391901d7b7fe49e );
        frame_d98589cf7a060717383e105fa046f5a9->m_frame.f_lineno = 421;
        tmp_call_result_1 = CALL_FUNCTION( tmp_called_name_1, tmp_args_name_1, tmp_kw_name_1 );
        Py_DECREF( tmp_called_name_1 );
        Py_DECREF( tmp_args_name_1 );
        Py_DECREF( tmp_kw_name_1 );
        if ( tmp_call_result_1 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 421;
            type_description_1 = "oooo";
            goto frame_exception_exit_1;
        }
        Py_DECREF( tmp_call_result_1 );
    }
    {
        PyObject *tmp_called_instance_1;
        PyObject *tmp_mvar_value_2;
        PyObject *tmp_args_element_name_1;
        PyObject *tmp_args_element_name_2;
        PyObject *tmp_args_element_name_3;
        tmp_mvar_value_2 = GET_STRING_DICT_VALUE( moduledict_platform, (Nuitka_StringObject *)const_str_plain_os );

        if (unlikely( tmp_mvar_value_2 == NULL ))
        {
            tmp_mvar_value_2 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_os );
        }

        if ( tmp_mvar_value_2 == NULL )
        {

            exception_type = PyExc_NameError;
            Py_INCREF( exception_type );
            exception_value = PyUnicode_FromFormat( "name '%s' is not defined", "os" );
            exception_tb = NULL;
            NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
            CHAIN_EXCEPTION( exception_value );

            exception_lineno = 422;
            type_description_1 = "oooo";
            goto frame_exception_exit_1;
        }

        tmp_called_instance_1 = tmp_mvar_value_2;
        CHECK_OBJECT( par_cmd );
        tmp_args_element_name_1 = par_cmd;
        CHECK_OBJECT( par_mode );
        tmp_args_element_name_2 = par_mode;
        CHECK_OBJECT( par_bufsize );
        tmp_args_element_name_3 = par_bufsize;
        frame_d98589cf7a060717383e105fa046f5a9->m_frame.f_lineno = 422;
        {
            PyObject *call_args[] = { tmp_args_element_name_1, tmp_args_element_name_2, tmp_args_element_name_3 };
            tmp_return_value = CALL_METHOD_WITH_ARGS3( tmp_called_instance_1, const_str_plain_popen, call_args );
        }

        if ( tmp_return_value == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 422;
            type_description_1 = "oooo";
            goto frame_exception_exit_1;
        }
        goto frame_return_exit_1;
    }

#if 0
    RESTORE_FRAME_EXCEPTION( frame_d98589cf7a060717383e105fa046f5a9 );
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto frame_no_exception_1;

    frame_return_exit_1:;
#if 0
    RESTORE_FRAME_EXCEPTION( frame_d98589cf7a060717383e105fa046f5a9 );
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto try_return_handler_1;

    frame_exception_exit_1:;

#if 0
    RESTORE_FRAME_EXCEPTION( frame_d98589cf7a060717383e105fa046f5a9 );
#endif

    if ( exception_tb == NULL )
    {
        exception_tb = MAKE_TRACEBACK( frame_d98589cf7a060717383e105fa046f5a9, exception_lineno );
    }
    else if ( exception_tb->tb_frame != &frame_d98589cf7a060717383e105fa046f5a9->m_frame )
    {
        exception_tb = ADD_TRACEBACK( exception_tb, frame_d98589cf7a060717383e105fa046f5a9, exception_lineno );
    }

    // Attachs locals to frame if any.
    Nuitka_Frame_AttachLocals(
        (struct Nuitka_FrameObject *)frame_d98589cf7a060717383e105fa046f5a9,
        type_description_1,
        par_cmd,
        par_mode,
        par_bufsize,
        var_warnings
    );


    // Release cached frame.
    if ( frame_d98589cf7a060717383e105fa046f5a9 == cache_frame_d98589cf7a060717383e105fa046f5a9 )
    {
        Py_DECREF( frame_d98589cf7a060717383e105fa046f5a9 );
    }
    cache_frame_d98589cf7a060717383e105fa046f5a9 = NULL;

    assertFrameObject( frame_d98589cf7a060717383e105fa046f5a9 );

    // Put the previous frame back on top.
    popFrameStack();

    // Return the error.
    goto try_except_handler_1;

    frame_no_exception_1:;
    // tried codes exits in all cases
    NUITKA_CANNOT_GET_HERE( platform$$$function_8_popen );
    return NULL;
    // Return handler code:
    try_return_handler_1:;
    CHECK_OBJECT( (PyObject *)par_cmd );
    Py_DECREF( par_cmd );
    par_cmd = NULL;

    CHECK_OBJECT( (PyObject *)par_mode );
    Py_DECREF( par_mode );
    par_mode = NULL;

    CHECK_OBJECT( (PyObject *)par_bufsize );
    Py_DECREF( par_bufsize );
    par_bufsize = NULL;

    CHECK_OBJECT( (PyObject *)var_warnings );
    Py_DECREF( var_warnings );
    var_warnings = NULL;

    goto function_return_exit;
    // Exception handler code:
    try_except_handler_1:;
    exception_keeper_type_1 = exception_type;
    exception_keeper_value_1 = exception_value;
    exception_keeper_tb_1 = exception_tb;
    exception_keeper_lineno_1 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    CHECK_OBJECT( (PyObject *)par_cmd );
    Py_DECREF( par_cmd );
    par_cmd = NULL;

    CHECK_OBJECT( (PyObject *)par_mode );
    Py_DECREF( par_mode );
    par_mode = NULL;

    CHECK_OBJECT( (PyObject *)par_bufsize );
    Py_DECREF( par_bufsize );
    par_bufsize = NULL;

    Py_XDECREF( var_warnings );
    var_warnings = NULL;

    // Re-raise.
    exception_type = exception_keeper_type_1;
    exception_value = exception_keeper_value_1;
    exception_tb = exception_keeper_tb_1;
    exception_lineno = exception_keeper_lineno_1;

    goto function_exception_exit;
    // End of try:

    // Return statement must have exited already.
    NUITKA_CANNOT_GET_HERE( platform$$$function_8_popen );
    return NULL;

function_exception_exit:
    assert( exception_type );
    RESTORE_ERROR_OCCURRED( exception_type, exception_value, exception_tb );

    return NULL;

function_return_exit:
   // Function cleanup code if any.


   // Actual function exit with return value, making sure we did not make
   // the error status worse despite non-NULL return.
   CHECK_OBJECT( tmp_return_value );
   assert( had_error || !ERROR_OCCURRED() );
   return tmp_return_value;
}


static PyObject *impl_platform$$$function_9__norm_version( struct Nuitka_FunctionObject const *self, PyObject **python_pars )
{
    // Preserve error status for checks
#ifndef __NUITKA_NO_ASSERT__
    NUITKA_MAY_BE_UNUSED bool had_error = ERROR_OCCURRED();
#endif

    // Local variable declarations.
    PyObject *par_version = python_pars[ 0 ];
    PyObject *par_build = python_pars[ 1 ];
    PyObject *var_l = NULL;
    PyObject *var_ints = NULL;
    PyObject *var_strings = NULL;
    nuitka_bool tmp_try_except_1__unhandled_indicator = NUITKA_BOOL_UNASSIGNED;
    struct Nuitka_FrameObject *frame_ed162ff078a0bfe506c69dd6a6ef6a74;
    NUITKA_MAY_BE_UNUSED char const *type_description_1 = NULL;
    PyObject *exception_type = NULL;
    PyObject *exception_value = NULL;
    PyTracebackObject *exception_tb = NULL;
    NUITKA_MAY_BE_UNUSED int exception_lineno = 0;
    PyObject *exception_keeper_type_1;
    PyObject *exception_keeper_value_1;
    PyTracebackObject *exception_keeper_tb_1;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_1;
    PyObject *exception_preserved_type_1;
    PyObject *exception_preserved_value_1;
    PyTracebackObject *exception_preserved_tb_1;
    int tmp_res;
    bool tmp_result;
    PyObject *exception_keeper_type_2;
    PyObject *exception_keeper_value_2;
    PyTracebackObject *exception_keeper_tb_2;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_2;
    PyObject *exception_keeper_type_3;
    PyObject *exception_keeper_value_3;
    PyTracebackObject *exception_keeper_tb_3;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_3;
    static struct Nuitka_FrameObject *cache_frame_ed162ff078a0bfe506c69dd6a6ef6a74 = NULL;
    PyObject *tmp_return_value = NULL;
    PyObject *exception_keeper_type_4;
    PyObject *exception_keeper_value_4;
    PyTracebackObject *exception_keeper_tb_4;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_4;

    // Actual function body.
    // Tried code:
    MAKE_OR_REUSE_FRAME( cache_frame_ed162ff078a0bfe506c69dd6a6ef6a74, codeobj_ed162ff078a0bfe506c69dd6a6ef6a74, module_platform, sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *) );
    frame_ed162ff078a0bfe506c69dd6a6ef6a74 = cache_frame_ed162ff078a0bfe506c69dd6a6ef6a74;

    // Push the new frame as the currently active one.
    pushFrameStack( frame_ed162ff078a0bfe506c69dd6a6ef6a74 );

    // Mark the frame object as in use, ref count 1 will be up for reuse.
    assert( Py_REFCNT( frame_ed162ff078a0bfe506c69dd6a6ef6a74 ) == 2 ); // Frame stack

    // Framed code:
    {
        PyObject *tmp_assign_source_1;
        PyObject *tmp_called_instance_1;
        CHECK_OBJECT( par_version );
        tmp_called_instance_1 = par_version;
        frame_ed162ff078a0bfe506c69dd6a6ef6a74->m_frame.f_lineno = 430;
        tmp_assign_source_1 = CALL_METHOD_WITH_ARGS1( tmp_called_instance_1, const_str_plain_split, &PyTuple_GET_ITEM( const_tuple_str_dot_tuple, 0 ) );

        if ( tmp_assign_source_1 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 430;
            type_description_1 = "ooooo";
            goto frame_exception_exit_1;
        }
        assert( var_l == NULL );
        var_l = tmp_assign_source_1;
    }
    {
        nuitka_bool tmp_condition_result_1;
        int tmp_truth_name_1;
        CHECK_OBJECT( par_build );
        tmp_truth_name_1 = CHECK_IF_TRUE( par_build );
        if ( tmp_truth_name_1 == -1 )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 431;
            type_description_1 = "ooooo";
            goto frame_exception_exit_1;
        }
        tmp_condition_result_1 = tmp_truth_name_1 == 1 ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
        if ( tmp_condition_result_1 == NUITKA_BOOL_TRUE )
        {
            goto branch_yes_1;
        }
        else
        {
            goto branch_no_1;
        }
        branch_yes_1:;
        {
            PyObject *tmp_called_instance_2;
            PyObject *tmp_call_result_1;
            PyObject *tmp_args_element_name_1;
            CHECK_OBJECT( var_l );
            tmp_called_instance_2 = var_l;
            CHECK_OBJECT( par_build );
            tmp_args_element_name_1 = par_build;
            frame_ed162ff078a0bfe506c69dd6a6ef6a74->m_frame.f_lineno = 432;
            {
                PyObject *call_args[] = { tmp_args_element_name_1 };
                tmp_call_result_1 = CALL_METHOD_WITH_ARGS1( tmp_called_instance_2, const_str_plain_append, call_args );
            }

            if ( tmp_call_result_1 == NULL )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 432;
                type_description_1 = "ooooo";
                goto frame_exception_exit_1;
            }
            Py_DECREF( tmp_call_result_1 );
        }
        branch_no_1:;
    }
    {
        nuitka_bool tmp_assign_source_2;
        tmp_assign_source_2 = NUITKA_BOOL_TRUE;
        tmp_try_except_1__unhandled_indicator = tmp_assign_source_2;
    }
    // Tried code:
    // Tried code:
    {
        PyObject *tmp_assign_source_3;
        PyObject *tmp_called_name_1;
        PyObject *tmp_args_element_name_2;
        PyObject *tmp_args_element_name_3;
        tmp_called_name_1 = (PyObject *)&PyMap_Type;
        tmp_args_element_name_2 = (PyObject *)&PyLong_Type;
        CHECK_OBJECT( var_l );
        tmp_args_element_name_3 = var_l;
        frame_ed162ff078a0bfe506c69dd6a6ef6a74->m_frame.f_lineno = 434;
        {
            PyObject *call_args[] = { tmp_args_element_name_2, tmp_args_element_name_3 };
            tmp_assign_source_3 = CALL_FUNCTION_WITH_ARGS2( tmp_called_name_1, call_args );
        }

        if ( tmp_assign_source_3 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 434;
            type_description_1 = "ooooo";
            goto try_except_handler_3;
        }
        assert( var_ints == NULL );
        var_ints = tmp_assign_source_3;
    }
    goto try_end_1;
    // Exception handler code:
    try_except_handler_3:;
    exception_keeper_type_1 = exception_type;
    exception_keeper_value_1 = exception_value;
    exception_keeper_tb_1 = exception_tb;
    exception_keeper_lineno_1 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    {
        nuitka_bool tmp_assign_source_4;
        tmp_assign_source_4 = NUITKA_BOOL_FALSE;
        tmp_try_except_1__unhandled_indicator = tmp_assign_source_4;
    }
    // Preserve existing published exception.
    exception_preserved_type_1 = EXC_TYPE(PyThreadState_GET());
    Py_XINCREF( exception_preserved_type_1 );
    exception_preserved_value_1 = EXC_VALUE(PyThreadState_GET());
    Py_XINCREF( exception_preserved_value_1 );
    exception_preserved_tb_1 = (PyTracebackObject *)EXC_TRACEBACK(PyThreadState_GET());
    Py_XINCREF( exception_preserved_tb_1 );

    if ( exception_keeper_tb_1 == NULL )
    {
        exception_keeper_tb_1 = MAKE_TRACEBACK( frame_ed162ff078a0bfe506c69dd6a6ef6a74, exception_keeper_lineno_1 );
    }
    else if ( exception_keeper_lineno_1 != 0 )
    {
        exception_keeper_tb_1 = ADD_TRACEBACK( exception_keeper_tb_1, frame_ed162ff078a0bfe506c69dd6a6ef6a74, exception_keeper_lineno_1 );
    }

    NORMALIZE_EXCEPTION( &exception_keeper_type_1, &exception_keeper_value_1, &exception_keeper_tb_1 );
    PyException_SetTraceback( exception_keeper_value_1, (PyObject *)exception_keeper_tb_1 );
    PUBLISH_EXCEPTION( &exception_keeper_type_1, &exception_keeper_value_1, &exception_keeper_tb_1 );
    // Tried code:
    {
        nuitka_bool tmp_condition_result_2;
        PyObject *tmp_compexpr_left_1;
        PyObject *tmp_compexpr_right_1;
        tmp_compexpr_left_1 = EXC_TYPE(PyThreadState_GET());
        tmp_compexpr_right_1 = PyExc_ValueError;
        tmp_res = EXCEPTION_MATCH_BOOL( tmp_compexpr_left_1, tmp_compexpr_right_1 );
        if ( tmp_res == -1 )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 435;
            type_description_1 = "ooooo";
            goto try_except_handler_4;
        }
        tmp_condition_result_2 = ( tmp_res != 0 ) ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
        if ( tmp_condition_result_2 == NUITKA_BOOL_TRUE )
        {
            goto branch_yes_2;
        }
        else
        {
            goto branch_no_2;
        }
        branch_yes_2:;
        {
            PyObject *tmp_assign_source_5;
            CHECK_OBJECT( var_l );
            tmp_assign_source_5 = var_l;
            assert( var_strings == NULL );
            Py_INCREF( tmp_assign_source_5 );
            var_strings = tmp_assign_source_5;
        }
        goto branch_end_2;
        branch_no_2:;
        tmp_result = RERAISE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
        if (unlikely( tmp_result == false ))
        {
            exception_lineno = 433;
        }

        if (exception_tb && exception_tb->tb_frame == &frame_ed162ff078a0bfe506c69dd6a6ef6a74->m_frame) frame_ed162ff078a0bfe506c69dd6a6ef6a74->m_frame.f_lineno = exception_tb->tb_lineno;
        type_description_1 = "ooooo";
        goto try_except_handler_4;
        branch_end_2:;
    }
    goto try_end_2;
    // Exception handler code:
    try_except_handler_4:;
    exception_keeper_type_2 = exception_type;
    exception_keeper_value_2 = exception_value;
    exception_keeper_tb_2 = exception_tb;
    exception_keeper_lineno_2 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    // Restore previous exception.
    SET_CURRENT_EXCEPTION( exception_preserved_type_1, exception_preserved_value_1, exception_preserved_tb_1 );
    // Re-raise.
    exception_type = exception_keeper_type_2;
    exception_value = exception_keeper_value_2;
    exception_tb = exception_keeper_tb_2;
    exception_lineno = exception_keeper_lineno_2;

    goto try_except_handler_2;
    // End of try:
    try_end_2:;
    // Restore previous exception.
    SET_CURRENT_EXCEPTION( exception_preserved_type_1, exception_preserved_value_1, exception_preserved_tb_1 );
    goto try_end_1;
    // exception handler codes exits in all cases
    NUITKA_CANNOT_GET_HERE( platform$$$function_9__norm_version );
    return NULL;
    // End of try:
    try_end_1:;
    {
        nuitka_bool tmp_condition_result_3;
        nuitka_bool tmp_compexpr_left_2;
        nuitka_bool tmp_compexpr_right_2;
        assert( tmp_try_except_1__unhandled_indicator != NUITKA_BOOL_UNASSIGNED);
        tmp_compexpr_left_2 = tmp_try_except_1__unhandled_indicator;
        tmp_compexpr_right_2 = NUITKA_BOOL_TRUE;
        tmp_condition_result_3 = ( tmp_compexpr_left_2 == tmp_compexpr_right_2 ) ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
        if ( tmp_condition_result_3 == NUITKA_BOOL_TRUE )
        {
            goto branch_yes_3;
        }
        else
        {
            goto branch_no_3;
        }
        branch_yes_3:;
        {
            PyObject *tmp_assign_source_6;
            PyObject *tmp_list_arg_1;
            PyObject *tmp_called_name_2;
            PyObject *tmp_args_element_name_4;
            PyObject *tmp_args_element_name_5;
            tmp_called_name_2 = (PyObject *)&PyMap_Type;
            tmp_args_element_name_4 = (PyObject *)&PyUnicode_Type;
            if ( var_ints == NULL )
            {

                exception_type = PyExc_UnboundLocalError;
                Py_INCREF( exception_type );
                exception_value = PyUnicode_FromFormat( "local variable '%s' referenced before assignment", "ints" );
                exception_tb = NULL;
                NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
                CHAIN_EXCEPTION( exception_value );

                exception_lineno = 438;
                type_description_1 = "ooooo";
                goto try_except_handler_2;
            }

            tmp_args_element_name_5 = var_ints;
            frame_ed162ff078a0bfe506c69dd6a6ef6a74->m_frame.f_lineno = 438;
            {
                PyObject *call_args[] = { tmp_args_element_name_4, tmp_args_element_name_5 };
                tmp_list_arg_1 = CALL_FUNCTION_WITH_ARGS2( tmp_called_name_2, call_args );
            }

            if ( tmp_list_arg_1 == NULL )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 438;
                type_description_1 = "ooooo";
                goto try_except_handler_2;
            }
            tmp_assign_source_6 = PySequence_List( tmp_list_arg_1 );
            Py_DECREF( tmp_list_arg_1 );
            if ( tmp_assign_source_6 == NULL )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 438;
                type_description_1 = "ooooo";
                goto try_except_handler_2;
            }
            {
                PyObject *old = var_strings;
                var_strings = tmp_assign_source_6;
                Py_XDECREF( old );
            }

        }
        branch_no_3:;
    }
    goto try_end_3;
    // Exception handler code:
    try_except_handler_2:;
    exception_keeper_type_3 = exception_type;
    exception_keeper_value_3 = exception_value;
    exception_keeper_tb_3 = exception_tb;
    exception_keeper_lineno_3 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    // Re-raise.
    exception_type = exception_keeper_type_3;
    exception_value = exception_keeper_value_3;
    exception_tb = exception_keeper_tb_3;
    exception_lineno = exception_keeper_lineno_3;

    goto frame_exception_exit_1;
    // End of try:
    try_end_3:;
    {
        PyObject *tmp_assign_source_7;
        PyObject *tmp_called_name_3;
        PyObject *tmp_source_name_1;
        PyObject *tmp_args_element_name_6;
        PyObject *tmp_subscribed_name_1;
        PyObject *tmp_subscript_name_1;
        tmp_source_name_1 = const_str_dot;
        tmp_called_name_3 = LOOKUP_ATTRIBUTE( tmp_source_name_1, const_str_plain_join );
        assert( !(tmp_called_name_3 == NULL) );
        if ( var_strings == NULL )
        {
            Py_DECREF( tmp_called_name_3 );
            exception_type = PyExc_UnboundLocalError;
            Py_INCREF( exception_type );
            exception_value = PyUnicode_FromFormat( "local variable '%s' referenced before assignment", "strings" );
            exception_tb = NULL;
            NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
            CHAIN_EXCEPTION( exception_value );

            exception_lineno = 439;
            type_description_1 = "ooooo";
            goto frame_exception_exit_1;
        }

        tmp_subscribed_name_1 = var_strings;
        tmp_subscript_name_1 = const_slice_none_int_pos_3_none;
        tmp_args_element_name_6 = LOOKUP_SUBSCRIPT( tmp_subscribed_name_1, tmp_subscript_name_1 );
        if ( tmp_args_element_name_6 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
            Py_DECREF( tmp_called_name_3 );

            exception_lineno = 439;
            type_description_1 = "ooooo";
            goto frame_exception_exit_1;
        }
        frame_ed162ff078a0bfe506c69dd6a6ef6a74->m_frame.f_lineno = 439;
        {
            PyObject *call_args[] = { tmp_args_element_name_6 };
            tmp_assign_source_7 = CALL_FUNCTION_WITH_ARGS1( tmp_called_name_3, call_args );
        }

        Py_DECREF( tmp_called_name_3 );
        Py_DECREF( tmp_args_element_name_6 );
        if ( tmp_assign_source_7 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 439;
            type_description_1 = "ooooo";
            goto frame_exception_exit_1;
        }
        {
            PyObject *old = par_version;
            assert( old != NULL );
            par_version = tmp_assign_source_7;
            Py_DECREF( old );
        }

    }

#if 0
    RESTORE_FRAME_EXCEPTION( frame_ed162ff078a0bfe506c69dd6a6ef6a74 );
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto frame_no_exception_1;

    frame_exception_exit_1:;

#if 0
    RESTORE_FRAME_EXCEPTION( frame_ed162ff078a0bfe506c69dd6a6ef6a74 );
#endif

    if ( exception_tb == NULL )
    {
        exception_tb = MAKE_TRACEBACK( frame_ed162ff078a0bfe506c69dd6a6ef6a74, exception_lineno );
    }
    else if ( exception_tb->tb_frame != &frame_ed162ff078a0bfe506c69dd6a6ef6a74->m_frame )
    {
        exception_tb = ADD_TRACEBACK( exception_tb, frame_ed162ff078a0bfe506c69dd6a6ef6a74, exception_lineno );
    }

    // Attachs locals to frame if any.
    Nuitka_Frame_AttachLocals(
        (struct Nuitka_FrameObject *)frame_ed162ff078a0bfe506c69dd6a6ef6a74,
        type_description_1,
        par_version,
        par_build,
        var_l,
        var_ints,
        var_strings
    );


    // Release cached frame.
    if ( frame_ed162ff078a0bfe506c69dd6a6ef6a74 == cache_frame_ed162ff078a0bfe506c69dd6a6ef6a74 )
    {
        Py_DECREF( frame_ed162ff078a0bfe506c69dd6a6ef6a74 );
    }
    cache_frame_ed162ff078a0bfe506c69dd6a6ef6a74 = NULL;

    assertFrameObject( frame_ed162ff078a0bfe506c69dd6a6ef6a74 );

    // Put the previous frame back on top.
    popFrameStack();

    // Return the error.
    goto try_except_handler_1;

    frame_no_exception_1:;
    CHECK_OBJECT( par_version );
    tmp_return_value = par_version;
    Py_INCREF( tmp_return_value );
    goto try_return_handler_1;
    // tried codes exits in all cases
    NUITKA_CANNOT_GET_HERE( platform$$$function_9__norm_version );
    return NULL;
    // Return handler code:
    try_return_handler_1:;
    CHECK_OBJECT( (PyObject *)par_version );
    Py_DECREF( par_version );
    par_version = NULL;

    CHECK_OBJECT( (PyObject *)par_build );
    Py_DECREF( par_build );
    par_build = NULL;

    CHECK_OBJECT( (PyObject *)var_l );
    Py_DECREF( var_l );
    var_l = NULL;

    Py_XDECREF( var_ints );
    var_ints = NULL;

    Py_XDECREF( var_strings );
    var_strings = NULL;

    goto function_return_exit;
    // Exception handler code:
    try_except_handler_1:;
    exception_keeper_type_4 = exception_type;
    exception_keeper_value_4 = exception_value;
    exception_keeper_tb_4 = exception_tb;
    exception_keeper_lineno_4 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    CHECK_OBJECT( (PyObject *)par_version );
    Py_DECREF( par_version );
    par_version = NULL;

    CHECK_OBJECT( (PyObject *)par_build );
    Py_DECREF( par_build );
    par_build = NULL;

    Py_XDECREF( var_l );
    var_l = NULL;

    Py_XDECREF( var_ints );
    var_ints = NULL;

    Py_XDECREF( var_strings );
    var_strings = NULL;

    // Re-raise.
    exception_type = exception_keeper_type_4;
    exception_value = exception_keeper_value_4;
    exception_tb = exception_keeper_tb_4;
    exception_lineno = exception_keeper_lineno_4;

    goto function_exception_exit;
    // End of try:

    // Return statement must have exited already.
    NUITKA_CANNOT_GET_HERE( platform$$$function_9__norm_version );
    return NULL;

function_exception_exit:
    assert( exception_type );
    RESTORE_ERROR_OCCURRED( exception_type, exception_value, exception_tb );

    return NULL;

function_return_exit:
   // Function cleanup code if any.


   // Actual function exit with return value, making sure we did not make
   // the error status worse despite non-NULL return.
   CHECK_OBJECT( tmp_return_value );
   assert( had_error || !ERROR_OCCURRED() );
   return tmp_return_value;
}


static PyObject *impl_platform$$$function_10__syscmd_ver( struct Nuitka_FunctionObject const *self, PyObject **python_pars )
{
    // Preserve error status for checks
#ifndef __NUITKA_NO_ASSERT__
    NUITKA_MAY_BE_UNUSED bool had_error = ERROR_OCCURRED();
#endif

    // Local variable declarations.
    PyObject *par_system = python_pars[ 0 ];
    PyObject *par_release = python_pars[ 1 ];
    PyObject *par_version = python_pars[ 2 ];
    PyObject *par_supported_platforms = python_pars[ 3 ];
    PyObject *var_cmd = NULL;
    PyObject *var_pipe = NULL;
    PyObject *var_info = NULL;
    PyObject *var_why = NULL;
    PyObject *var_m = NULL;
    nuitka_bool tmp_for_loop_1__break_indicator = NUITKA_BOOL_UNASSIGNED;
    PyObject *tmp_for_loop_1__for_iterator = NULL;
    PyObject *tmp_for_loop_1__iter_value = NULL;
    PyObject *tmp_try_except_1__unhandled_indicator = NULL;
    PyObject *tmp_tuple_unpack_1__element_1 = NULL;
    PyObject *tmp_tuple_unpack_1__element_2 = NULL;
    PyObject *tmp_tuple_unpack_1__element_3 = NULL;
    PyObject *tmp_tuple_unpack_1__source_iter = NULL;
    struct Nuitka_FrameObject *frame_109f5500facaab962d851ae8f9c2a4fc;
    NUITKA_MAY_BE_UNUSED char const *type_description_1 = NULL;
    PyObject *exception_type = NULL;
    PyObject *exception_value = NULL;
    PyTracebackObject *exception_tb = NULL;
    NUITKA_MAY_BE_UNUSED int exception_lineno = 0;
    int tmp_res;
    PyObject *tmp_return_value = NULL;
    PyObject *exception_keeper_type_1;
    PyObject *exception_keeper_value_1;
    PyTracebackObject *exception_keeper_tb_1;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_1;
    PyObject *exception_keeper_type_2;
    PyObject *exception_keeper_value_2;
    PyTracebackObject *exception_keeper_tb_2;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_2;
    PyObject *exception_preserved_type_1;
    PyObject *exception_preserved_value_1;
    PyTracebackObject *exception_preserved_tb_1;
    bool tmp_result;
    PyObject *exception_keeper_type_3;
    PyObject *exception_keeper_value_3;
    PyTracebackObject *exception_keeper_tb_3;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_3;
    PyObject *exception_keeper_type_4;
    PyObject *exception_keeper_value_4;
    PyTracebackObject *exception_keeper_tb_4;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_4;
    PyObject *exception_keeper_type_5;
    PyObject *exception_keeper_value_5;
    PyTracebackObject *exception_keeper_tb_5;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_5;
    PyObject *exception_keeper_type_6;
    PyObject *exception_keeper_value_6;
    PyTracebackObject *exception_keeper_tb_6;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_6;
    PyObject *tmp_iterator_attempt;
    PyObject *exception_keeper_type_7;
    PyObject *exception_keeper_value_7;
    PyTracebackObject *exception_keeper_tb_7;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_7;
    PyObject *exception_keeper_type_8;
    PyObject *exception_keeper_value_8;
    PyTracebackObject *exception_keeper_tb_8;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_8;
    static struct Nuitka_FrameObject *cache_frame_109f5500facaab962d851ae8f9c2a4fc = NULL;
    PyObject *exception_keeper_type_9;
    PyObject *exception_keeper_value_9;
    PyTracebackObject *exception_keeper_tb_9;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_9;

    // Actual function body.
    // Tried code:
    MAKE_OR_REUSE_FRAME( cache_frame_109f5500facaab962d851ae8f9c2a4fc, codeobj_109f5500facaab962d851ae8f9c2a4fc, module_platform, sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *) );
    frame_109f5500facaab962d851ae8f9c2a4fc = cache_frame_109f5500facaab962d851ae8f9c2a4fc;

    // Push the new frame as the currently active one.
    pushFrameStack( frame_109f5500facaab962d851ae8f9c2a4fc );

    // Mark the frame object as in use, ref count 1 will be up for reuse.
    assert( Py_REFCNT( frame_109f5500facaab962d851ae8f9c2a4fc ) == 2 ); // Frame stack

    // Framed code:
    {
        nuitka_bool tmp_condition_result_1;
        PyObject *tmp_compexpr_left_1;
        PyObject *tmp_compexpr_right_1;
        PyObject *tmp_source_name_1;
        PyObject *tmp_mvar_value_1;
        tmp_mvar_value_1 = GET_STRING_DICT_VALUE( moduledict_platform, (Nuitka_StringObject *)const_str_plain_sys );

        if (unlikely( tmp_mvar_value_1 == NULL ))
        {
            tmp_mvar_value_1 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_sys );
        }

        if ( tmp_mvar_value_1 == NULL )
        {

            exception_type = PyExc_NameError;
            Py_INCREF( exception_type );
            exception_value = PyUnicode_FromFormat( "name '%s' is not defined", "sys" );
            exception_tb = NULL;
            NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
            CHAIN_EXCEPTION( exception_value );

            exception_lineno = 469;
            type_description_1 = "ooooooooo";
            goto frame_exception_exit_1;
        }

        tmp_source_name_1 = tmp_mvar_value_1;
        tmp_compexpr_left_1 = LOOKUP_ATTRIBUTE( tmp_source_name_1, const_str_plain_platform );
        if ( tmp_compexpr_left_1 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 469;
            type_description_1 = "ooooooooo";
            goto frame_exception_exit_1;
        }
        CHECK_OBJECT( par_supported_platforms );
        tmp_compexpr_right_1 = par_supported_platforms;
        tmp_res = PySequence_Contains( tmp_compexpr_right_1, tmp_compexpr_left_1 );
        Py_DECREF( tmp_compexpr_left_1 );
        if ( tmp_res == -1 )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 469;
            type_description_1 = "ooooooooo";
            goto frame_exception_exit_1;
        }
        tmp_condition_result_1 = ( tmp_res == 0 ) ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
        if ( tmp_condition_result_1 == NUITKA_BOOL_TRUE )
        {
            goto branch_yes_1;
        }
        else
        {
            goto branch_no_1;
        }
        branch_yes_1:;
        {
            PyObject *tmp_tuple_element_1;
            CHECK_OBJECT( par_system );
            tmp_tuple_element_1 = par_system;
            tmp_return_value = PyTuple_New( 3 );
            Py_INCREF( tmp_tuple_element_1 );
            PyTuple_SET_ITEM( tmp_return_value, 0, tmp_tuple_element_1 );
            CHECK_OBJECT( par_release );
            tmp_tuple_element_1 = par_release;
            Py_INCREF( tmp_tuple_element_1 );
            PyTuple_SET_ITEM( tmp_return_value, 1, tmp_tuple_element_1 );
            CHECK_OBJECT( par_version );
            tmp_tuple_element_1 = par_version;
            Py_INCREF( tmp_tuple_element_1 );
            PyTuple_SET_ITEM( tmp_return_value, 2, tmp_tuple_element_1 );
            goto frame_return_exit_1;
        }
        branch_no_1:;
    }
    {
        nuitka_bool tmp_assign_source_1;
        tmp_assign_source_1 = NUITKA_BOOL_FALSE;
        tmp_for_loop_1__break_indicator = tmp_assign_source_1;
    }
    {
        PyObject *tmp_assign_source_2;
        PyObject *tmp_iter_arg_1;
        tmp_iter_arg_1 = const_tuple_42dde1a64481afca90728eb1732accab_tuple;
        tmp_assign_source_2 = MAKE_ITERATOR( tmp_iter_arg_1 );
        assert( !(tmp_assign_source_2 == NULL) );
        assert( tmp_for_loop_1__for_iterator == NULL );
        tmp_for_loop_1__for_iterator = tmp_assign_source_2;
    }
    // Tried code:
    // Tried code:
    loop_start_1:;
    // Tried code:
    {
        PyObject *tmp_assign_source_3;
        PyObject *tmp_value_name_1;
        CHECK_OBJECT( tmp_for_loop_1__for_iterator );
        tmp_value_name_1 = tmp_for_loop_1__for_iterator;
        tmp_assign_source_3 = ITERATOR_NEXT( tmp_value_name_1 );
        if ( tmp_assign_source_3 == NULL )
        {
            if ( !ERROR_OCCURRED() )
            {
                exception_type = PyExc_StopIteration;
                Py_INCREF( exception_type );
                exception_value = NULL;
                exception_tb = NULL;
            }
            else
            {
                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
            }


            type_description_1 = "ooooooooo";
            exception_lineno = 473;
            goto try_except_handler_4;
        }
        {
            PyObject *old = tmp_for_loop_1__iter_value;
            tmp_for_loop_1__iter_value = tmp_assign_source_3;
            Py_XDECREF( old );
        }

    }
    goto try_end_1;
    // Exception handler code:
    try_except_handler_4:;
    exception_keeper_type_1 = exception_type;
    exception_keeper_value_1 = exception_value;
    exception_keeper_tb_1 = exception_tb;
    exception_keeper_lineno_1 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    {
        nuitka_bool tmp_condition_result_2;
        PyObject *tmp_compexpr_left_2;
        PyObject *tmp_compexpr_right_2;
        tmp_compexpr_left_2 = exception_keeper_type_1;
        tmp_compexpr_right_2 = PyExc_StopIteration;
        tmp_res = EXCEPTION_MATCH_BOOL( tmp_compexpr_left_2, tmp_compexpr_right_2 );
        if ( tmp_res == -1 )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );

            Py_DECREF( exception_keeper_type_1 );
            Py_XDECREF( exception_keeper_value_1 );
            Py_XDECREF( exception_keeper_tb_1 );

            exception_lineno = 473;
            type_description_1 = "ooooooooo";
            goto try_except_handler_3;
        }
        tmp_condition_result_2 = ( tmp_res != 0 ) ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
        if ( tmp_condition_result_2 == NUITKA_BOOL_TRUE )
        {
            goto branch_yes_2;
        }
        else
        {
            goto branch_no_2;
        }
        branch_yes_2:;
        {
            nuitka_bool tmp_assign_source_4;
            tmp_assign_source_4 = NUITKA_BOOL_TRUE;
            tmp_for_loop_1__break_indicator = tmp_assign_source_4;
        }
        Py_DECREF( exception_keeper_type_1 );
        Py_XDECREF( exception_keeper_value_1 );
        Py_XDECREF( exception_keeper_tb_1 );
        goto loop_end_1;
        goto branch_end_2;
        branch_no_2:;
        // Re-raise.
        exception_type = exception_keeper_type_1;
        exception_value = exception_keeper_value_1;
        exception_tb = exception_keeper_tb_1;
        exception_lineno = exception_keeper_lineno_1;

        goto try_except_handler_3;
        branch_end_2:;
    }
    // End of try:
    try_end_1:;
    {
        PyObject *tmp_assign_source_5;
        CHECK_OBJECT( tmp_for_loop_1__iter_value );
        tmp_assign_source_5 = tmp_for_loop_1__iter_value;
        {
            PyObject *old = var_cmd;
            var_cmd = tmp_assign_source_5;
            Py_INCREF( var_cmd );
            Py_XDECREF( old );
        }

    }
    {
        PyObject *tmp_assign_source_6;
        tmp_assign_source_6 = Py_True;
        {
            PyObject *old = tmp_try_except_1__unhandled_indicator;
            tmp_try_except_1__unhandled_indicator = tmp_assign_source_6;
            Py_INCREF( tmp_try_except_1__unhandled_indicator );
            Py_XDECREF( old );
        }

    }
    // Tried code:
    // Tried code:
    {
        PyObject *tmp_assign_source_7;
        PyObject *tmp_called_instance_1;
        PyObject *tmp_mvar_value_2;
        PyObject *tmp_args_element_name_1;
        tmp_mvar_value_2 = GET_STRING_DICT_VALUE( moduledict_platform, (Nuitka_StringObject *)const_str_plain_os );

        if (unlikely( tmp_mvar_value_2 == NULL ))
        {
            tmp_mvar_value_2 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_os );
        }

        if ( tmp_mvar_value_2 == NULL )
        {

            exception_type = PyExc_NameError;
            Py_INCREF( exception_type );
            exception_value = PyUnicode_FromFormat( "name '%s' is not defined", "os" );
            exception_tb = NULL;
            NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
            CHAIN_EXCEPTION( exception_value );

            exception_lineno = 475;
            type_description_1 = "ooooooooo";
            goto try_except_handler_6;
        }

        tmp_called_instance_1 = tmp_mvar_value_2;
        CHECK_OBJECT( var_cmd );
        tmp_args_element_name_1 = var_cmd;
        frame_109f5500facaab962d851ae8f9c2a4fc->m_frame.f_lineno = 475;
        {
            PyObject *call_args[] = { tmp_args_element_name_1 };
            tmp_assign_source_7 = CALL_METHOD_WITH_ARGS1( tmp_called_instance_1, const_str_plain_popen, call_args );
        }

        if ( tmp_assign_source_7 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 475;
            type_description_1 = "ooooooooo";
            goto try_except_handler_6;
        }
        {
            PyObject *old = var_pipe;
            var_pipe = tmp_assign_source_7;
            Py_XDECREF( old );
        }

    }
    {
        PyObject *tmp_assign_source_8;
        PyObject *tmp_called_instance_2;
        CHECK_OBJECT( var_pipe );
        tmp_called_instance_2 = var_pipe;
        frame_109f5500facaab962d851ae8f9c2a4fc->m_frame.f_lineno = 476;
        tmp_assign_source_8 = CALL_METHOD_NO_ARGS( tmp_called_instance_2, const_str_plain_read );
        if ( tmp_assign_source_8 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 476;
            type_description_1 = "ooooooooo";
            goto try_except_handler_6;
        }
        {
            PyObject *old = var_info;
            var_info = tmp_assign_source_8;
            Py_XDECREF( old );
        }

    }
    {
        nuitka_bool tmp_condition_result_3;
        PyObject *tmp_called_instance_3;
        PyObject *tmp_call_result_1;
        int tmp_truth_name_1;
        CHECK_OBJECT( var_pipe );
        tmp_called_instance_3 = var_pipe;
        frame_109f5500facaab962d851ae8f9c2a4fc->m_frame.f_lineno = 477;
        tmp_call_result_1 = CALL_METHOD_NO_ARGS( tmp_called_instance_3, const_str_plain_close );
        if ( tmp_call_result_1 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 477;
            type_description_1 = "ooooooooo";
            goto try_except_handler_6;
        }
        tmp_truth_name_1 = CHECK_IF_TRUE( tmp_call_result_1 );
        if ( tmp_truth_name_1 == -1 )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
            Py_DECREF( tmp_call_result_1 );

            exception_lineno = 477;
            type_description_1 = "ooooooooo";
            goto try_except_handler_6;
        }
        tmp_condition_result_3 = tmp_truth_name_1 == 1 ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
        Py_DECREF( tmp_call_result_1 );
        if ( tmp_condition_result_3 == NUITKA_BOOL_TRUE )
        {
            goto branch_yes_3;
        }
        else
        {
            goto branch_no_3;
        }
        branch_yes_3:;
        {
            PyObject *tmp_raise_type_1;
            PyObject *tmp_make_exception_arg_1;
            tmp_make_exception_arg_1 = const_str_digest_aa4b456c1e004ee4c412a3fc87cde38c;
            frame_109f5500facaab962d851ae8f9c2a4fc->m_frame.f_lineno = 478;
            {
                PyObject *call_args[] = { tmp_make_exception_arg_1 };
                tmp_raise_type_1 = CALL_FUNCTION_WITH_ARGS1( PyExc_OSError, call_args );
            }

            assert( !(tmp_raise_type_1 == NULL) );
            exception_type = tmp_raise_type_1;
            exception_lineno = 478;
            RAISE_EXCEPTION_WITH_TYPE( &exception_type, &exception_value, &exception_tb );
            type_description_1 = "ooooooooo";
            goto try_except_handler_6;
        }
        branch_no_3:;
    }
    goto try_end_2;
    // Exception handler code:
    try_except_handler_6:;
    exception_keeper_type_2 = exception_type;
    exception_keeper_value_2 = exception_value;
    exception_keeper_tb_2 = exception_tb;
    exception_keeper_lineno_2 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    {
        PyObject *tmp_assign_source_9;
        tmp_assign_source_9 = Py_False;
        {
            PyObject *old = tmp_try_except_1__unhandled_indicator;
            assert( old != NULL );
            tmp_try_except_1__unhandled_indicator = tmp_assign_source_9;
            Py_INCREF( tmp_try_except_1__unhandled_indicator );
            Py_DECREF( old );
        }

    }
    // Preserve existing published exception.
    exception_preserved_type_1 = EXC_TYPE(PyThreadState_GET());
    Py_XINCREF( exception_preserved_type_1 );
    exception_preserved_value_1 = EXC_VALUE(PyThreadState_GET());
    Py_XINCREF( exception_preserved_value_1 );
    exception_preserved_tb_1 = (PyTracebackObject *)EXC_TRACEBACK(PyThreadState_GET());
    Py_XINCREF( exception_preserved_tb_1 );

    if ( exception_keeper_tb_2 == NULL )
    {
        exception_keeper_tb_2 = MAKE_TRACEBACK( frame_109f5500facaab962d851ae8f9c2a4fc, exception_keeper_lineno_2 );
    }
    else if ( exception_keeper_lineno_2 != 0 )
    {
        exception_keeper_tb_2 = ADD_TRACEBACK( exception_keeper_tb_2, frame_109f5500facaab962d851ae8f9c2a4fc, exception_keeper_lineno_2 );
    }

    NORMALIZE_EXCEPTION( &exception_keeper_type_2, &exception_keeper_value_2, &exception_keeper_tb_2 );
    PyException_SetTraceback( exception_keeper_value_2, (PyObject *)exception_keeper_tb_2 );
    PUBLISH_EXCEPTION( &exception_keeper_type_2, &exception_keeper_value_2, &exception_keeper_tb_2 );
    // Tried code:
    {
        nuitka_bool tmp_condition_result_4;
        PyObject *tmp_compexpr_left_3;
        PyObject *tmp_compexpr_right_3;
        tmp_compexpr_left_3 = EXC_TYPE(PyThreadState_GET());
        tmp_compexpr_right_3 = PyExc_OSError;
        tmp_res = EXCEPTION_MATCH_BOOL( tmp_compexpr_left_3, tmp_compexpr_right_3 );
        if ( tmp_res == -1 )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 481;
            type_description_1 = "ooooooooo";
            goto try_except_handler_7;
        }
        tmp_condition_result_4 = ( tmp_res != 0 ) ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
        if ( tmp_condition_result_4 == NUITKA_BOOL_TRUE )
        {
            goto branch_yes_4;
        }
        else
        {
            goto branch_no_4;
        }
        branch_yes_4:;
        {
            PyObject *tmp_assign_source_10;
            tmp_assign_source_10 = EXC_VALUE(PyThreadState_GET());
            {
                PyObject *old = var_why;
                var_why = tmp_assign_source_10;
                Py_INCREF( var_why );
                Py_XDECREF( old );
            }

        }
        // Tried code:
        goto try_continue_handler_8;
        // tried codes exits in all cases
        NUITKA_CANNOT_GET_HERE( platform$$$function_10__syscmd_ver );
        return NULL;
        // try continue handler code:
        try_continue_handler_8:;
        Py_XDECREF( var_why );
        var_why = NULL;

        goto try_continue_handler_7;
        // End of try:
        Py_XDECREF( var_why );
        var_why = NULL;

        goto branch_end_4;
        branch_no_4:;
        tmp_result = RERAISE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
        if (unlikely( tmp_result == false ))
        {
            exception_lineno = 474;
        }

        if (exception_tb && exception_tb->tb_frame == &frame_109f5500facaab962d851ae8f9c2a4fc->m_frame) frame_109f5500facaab962d851ae8f9c2a4fc->m_frame.f_lineno = exception_tb->tb_lineno;
        type_description_1 = "ooooooooo";
        goto try_except_handler_7;
        branch_end_4:;
    }
    goto try_end_3;
    // Exception handler code:
    try_except_handler_7:;
    exception_keeper_type_3 = exception_type;
    exception_keeper_value_3 = exception_value;
    exception_keeper_tb_3 = exception_tb;
    exception_keeper_lineno_3 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    // Restore previous exception.
    SET_CURRENT_EXCEPTION( exception_preserved_type_1, exception_preserved_value_1, exception_preserved_tb_1 );
    // Re-raise.
    exception_type = exception_keeper_type_3;
    exception_value = exception_keeper_value_3;
    exception_tb = exception_keeper_tb_3;
    exception_lineno = exception_keeper_lineno_3;

    goto try_except_handler_5;
    // try continue handler code:
    try_continue_handler_7:;
    // Restore previous exception.
    SET_CURRENT_EXCEPTION( exception_preserved_type_1, exception_preserved_value_1, exception_preserved_tb_1 );
    goto try_continue_handler_5;
    // End of try:
    try_end_3:;
    // Restore previous exception.
    SET_CURRENT_EXCEPTION( exception_preserved_type_1, exception_preserved_value_1, exception_preserved_tb_1 );
    goto try_end_2;
    // exception handler codes exits in all cases
    NUITKA_CANNOT_GET_HERE( platform$$$function_10__syscmd_ver );
    return NULL;
    // End of try:
    try_end_2:;
    {
        nuitka_bool tmp_condition_result_5;
        nuitka_bool tmp_compexpr_left_4;
        nuitka_bool tmp_compexpr_right_4;
        int tmp_truth_name_2;
        CHECK_OBJECT( tmp_try_except_1__unhandled_indicator );
        tmp_truth_name_2 = CHECK_IF_TRUE( tmp_try_except_1__unhandled_indicator );
        if ( tmp_truth_name_2 == -1 )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 474;
            type_description_1 = "ooooooooo";
            goto try_except_handler_5;
        }
        tmp_compexpr_left_4 = tmp_truth_name_2 == 1 ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
        tmp_compexpr_right_4 = NUITKA_BOOL_TRUE;
        tmp_condition_result_5 = ( tmp_compexpr_left_4 == tmp_compexpr_right_4 ) ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
        if ( tmp_condition_result_5 == NUITKA_BOOL_TRUE )
        {
            goto branch_yes_5;
        }
        else
        {
            goto branch_no_5;
        }
        branch_yes_5:;
        goto try_break_handler_5;
        branch_no_5:;
    }
    goto try_end_4;
    // Exception handler code:
    try_except_handler_5:;
    exception_keeper_type_4 = exception_type;
    exception_keeper_value_4 = exception_value;
    exception_keeper_tb_4 = exception_tb;
    exception_keeper_lineno_4 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    Py_XDECREF( tmp_try_except_1__unhandled_indicator );
    tmp_try_except_1__unhandled_indicator = NULL;

    // Re-raise.
    exception_type = exception_keeper_type_4;
    exception_value = exception_keeper_value_4;
    exception_tb = exception_keeper_tb_4;
    exception_lineno = exception_keeper_lineno_4;

    goto try_except_handler_3;
    // try break handler code:
    try_break_handler_5:;
    CHECK_OBJECT( (PyObject *)tmp_try_except_1__unhandled_indicator );
    Py_DECREF( tmp_try_except_1__unhandled_indicator );
    tmp_try_except_1__unhandled_indicator = NULL;

    goto loop_end_1;
    // try continue handler code:
    try_continue_handler_5:;
    CHECK_OBJECT( (PyObject *)tmp_try_except_1__unhandled_indicator );
    Py_DECREF( tmp_try_except_1__unhandled_indicator );
    tmp_try_except_1__unhandled_indicator = NULL;

    goto loop_start_1;
    // End of try:
    try_end_4:;
    CHECK_OBJECT( (PyObject *)tmp_try_except_1__unhandled_indicator );
    Py_DECREF( tmp_try_except_1__unhandled_indicator );
    tmp_try_except_1__unhandled_indicator = NULL;

    if ( CONSIDER_THREADING() == false )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 473;
        type_description_1 = "ooooooooo";
        goto try_except_handler_3;
    }
    goto loop_start_1;
    loop_end_1:;
    goto try_end_5;
    // Exception handler code:
    try_except_handler_3:;
    exception_keeper_type_5 = exception_type;
    exception_keeper_value_5 = exception_value;
    exception_keeper_tb_5 = exception_tb;
    exception_keeper_lineno_5 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    Py_XDECREF( tmp_for_loop_1__iter_value );
    tmp_for_loop_1__iter_value = NULL;

    CHECK_OBJECT( (PyObject *)tmp_for_loop_1__for_iterator );
    Py_DECREF( tmp_for_loop_1__for_iterator );
    tmp_for_loop_1__for_iterator = NULL;

    // Re-raise.
    exception_type = exception_keeper_type_5;
    exception_value = exception_keeper_value_5;
    exception_tb = exception_keeper_tb_5;
    exception_lineno = exception_keeper_lineno_5;

    goto try_except_handler_2;
    // End of try:
    try_end_5:;
    Py_XDECREF( tmp_for_loop_1__iter_value );
    tmp_for_loop_1__iter_value = NULL;

    CHECK_OBJECT( (PyObject *)tmp_for_loop_1__for_iterator );
    Py_DECREF( tmp_for_loop_1__for_iterator );
    tmp_for_loop_1__for_iterator = NULL;

    {
        nuitka_bool tmp_condition_result_6;
        nuitka_bool tmp_compexpr_left_5;
        nuitka_bool tmp_compexpr_right_5;
        assert( tmp_for_loop_1__break_indicator != NUITKA_BOOL_UNASSIGNED);
        tmp_compexpr_left_5 = tmp_for_loop_1__break_indicator;
        tmp_compexpr_right_5 = NUITKA_BOOL_TRUE;
        tmp_condition_result_6 = ( tmp_compexpr_left_5 == tmp_compexpr_right_5 ) ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
        if ( tmp_condition_result_6 == NUITKA_BOOL_TRUE )
        {
            goto branch_yes_6;
        }
        else
        {
            goto branch_no_6;
        }
        branch_yes_6:;
        {
            PyObject *tmp_tuple_element_2;
            CHECK_OBJECT( par_system );
            tmp_tuple_element_2 = par_system;
            tmp_return_value = PyTuple_New( 3 );
            Py_INCREF( tmp_tuple_element_2 );
            PyTuple_SET_ITEM( tmp_return_value, 0, tmp_tuple_element_2 );
            CHECK_OBJECT( par_release );
            tmp_tuple_element_2 = par_release;
            Py_INCREF( tmp_tuple_element_2 );
            PyTuple_SET_ITEM( tmp_return_value, 1, tmp_tuple_element_2 );
            CHECK_OBJECT( par_version );
            tmp_tuple_element_2 = par_version;
            Py_INCREF( tmp_tuple_element_2 );
            PyTuple_SET_ITEM( tmp_return_value, 2, tmp_tuple_element_2 );
            goto try_return_handler_2;
        }
        branch_no_6:;
    }
    goto try_end_6;
    // Return handler code:
    try_return_handler_2:;
    goto frame_return_exit_1;
    // Exception handler code:
    try_except_handler_2:;
    exception_keeper_type_6 = exception_type;
    exception_keeper_value_6 = exception_value;
    exception_keeper_tb_6 = exception_tb;
    exception_keeper_lineno_6 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    // Re-raise.
    exception_type = exception_keeper_type_6;
    exception_value = exception_keeper_value_6;
    exception_tb = exception_keeper_tb_6;
    exception_lineno = exception_keeper_lineno_6;

    goto frame_exception_exit_1;
    // End of try:
    try_end_6:;
    {
        PyObject *tmp_assign_source_11;
        PyObject *tmp_called_instance_4;
        if ( var_info == NULL )
        {

            exception_type = PyExc_UnboundLocalError;
            Py_INCREF( exception_type );
            exception_value = PyUnicode_FromFormat( "local variable '%s' referenced before assignment", "info" );
            exception_tb = NULL;
            NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
            CHAIN_EXCEPTION( exception_value );

            exception_lineno = 490;
            type_description_1 = "ooooooooo";
            goto frame_exception_exit_1;
        }

        tmp_called_instance_4 = var_info;
        frame_109f5500facaab962d851ae8f9c2a4fc->m_frame.f_lineno = 490;
        tmp_assign_source_11 = CALL_METHOD_NO_ARGS( tmp_called_instance_4, const_str_plain_strip );
        if ( tmp_assign_source_11 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 490;
            type_description_1 = "ooooooooo";
            goto frame_exception_exit_1;
        }
        {
            PyObject *old = var_info;
            var_info = tmp_assign_source_11;
            Py_XDECREF( old );
        }

    }
    {
        PyObject *tmp_assign_source_12;
        PyObject *tmp_called_instance_5;
        PyObject *tmp_mvar_value_3;
        PyObject *tmp_args_element_name_2;
        tmp_mvar_value_3 = GET_STRING_DICT_VALUE( moduledict_platform, (Nuitka_StringObject *)const_str_plain__ver_output );

        if (unlikely( tmp_mvar_value_3 == NULL ))
        {
            tmp_mvar_value_3 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain__ver_output );
        }

        if ( tmp_mvar_value_3 == NULL )
        {

            exception_type = PyExc_NameError;
            Py_INCREF( exception_type );
            exception_value = PyUnicode_FromFormat( "name '%s' is not defined", "_ver_output" );
            exception_tb = NULL;
            NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
            CHAIN_EXCEPTION( exception_value );

            exception_lineno = 491;
            type_description_1 = "ooooooooo";
            goto frame_exception_exit_1;
        }

        tmp_called_instance_5 = tmp_mvar_value_3;
        CHECK_OBJECT( var_info );
        tmp_args_element_name_2 = var_info;
        frame_109f5500facaab962d851ae8f9c2a4fc->m_frame.f_lineno = 491;
        {
            PyObject *call_args[] = { tmp_args_element_name_2 };
            tmp_assign_source_12 = CALL_METHOD_WITH_ARGS1( tmp_called_instance_5, const_str_plain_match, call_args );
        }

        if ( tmp_assign_source_12 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 491;
            type_description_1 = "ooooooooo";
            goto frame_exception_exit_1;
        }
        assert( var_m == NULL );
        var_m = tmp_assign_source_12;
    }
    {
        nuitka_bool tmp_condition_result_7;
        PyObject *tmp_compexpr_left_6;
        PyObject *tmp_compexpr_right_6;
        CHECK_OBJECT( var_m );
        tmp_compexpr_left_6 = var_m;
        tmp_compexpr_right_6 = Py_None;
        tmp_condition_result_7 = ( tmp_compexpr_left_6 != tmp_compexpr_right_6 ) ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
        if ( tmp_condition_result_7 == NUITKA_BOOL_TRUE )
        {
            goto branch_yes_7;
        }
        else
        {
            goto branch_no_7;
        }
        branch_yes_7:;
        // Tried code:
        {
            PyObject *tmp_assign_source_13;
            PyObject *tmp_iter_arg_2;
            PyObject *tmp_called_instance_6;
            CHECK_OBJECT( var_m );
            tmp_called_instance_6 = var_m;
            frame_109f5500facaab962d851ae8f9c2a4fc->m_frame.f_lineno = 493;
            tmp_iter_arg_2 = CALL_METHOD_NO_ARGS( tmp_called_instance_6, const_str_plain_groups );
            if ( tmp_iter_arg_2 == NULL )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 493;
                type_description_1 = "ooooooooo";
                goto try_except_handler_9;
            }
            tmp_assign_source_13 = MAKE_UNPACK_ITERATOR( tmp_iter_arg_2 );
            Py_DECREF( tmp_iter_arg_2 );
            if ( tmp_assign_source_13 == NULL )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 493;
                type_description_1 = "ooooooooo";
                goto try_except_handler_9;
            }
            assert( tmp_tuple_unpack_1__source_iter == NULL );
            tmp_tuple_unpack_1__source_iter = tmp_assign_source_13;
        }
        // Tried code:
        {
            PyObject *tmp_assign_source_14;
            PyObject *tmp_unpack_1;
            CHECK_OBJECT( tmp_tuple_unpack_1__source_iter );
            tmp_unpack_1 = tmp_tuple_unpack_1__source_iter;
            tmp_assign_source_14 = UNPACK_NEXT( tmp_unpack_1, 0, 3 );
            if ( tmp_assign_source_14 == NULL )
            {
                if ( !ERROR_OCCURRED() )
                {
                    exception_type = PyExc_StopIteration;
                    Py_INCREF( exception_type );
                    exception_value = NULL;
                    exception_tb = NULL;
                }
                else
                {
                    FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
                }


                type_description_1 = "ooooooooo";
                exception_lineno = 493;
                goto try_except_handler_10;
            }
            assert( tmp_tuple_unpack_1__element_1 == NULL );
            tmp_tuple_unpack_1__element_1 = tmp_assign_source_14;
        }
        {
            PyObject *tmp_assign_source_15;
            PyObject *tmp_unpack_2;
            CHECK_OBJECT( tmp_tuple_unpack_1__source_iter );
            tmp_unpack_2 = tmp_tuple_unpack_1__source_iter;
            tmp_assign_source_15 = UNPACK_NEXT( tmp_unpack_2, 1, 3 );
            if ( tmp_assign_source_15 == NULL )
            {
                if ( !ERROR_OCCURRED() )
                {
                    exception_type = PyExc_StopIteration;
                    Py_INCREF( exception_type );
                    exception_value = NULL;
                    exception_tb = NULL;
                }
                else
                {
                    FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
                }


                type_description_1 = "ooooooooo";
                exception_lineno = 493;
                goto try_except_handler_10;
            }
            assert( tmp_tuple_unpack_1__element_2 == NULL );
            tmp_tuple_unpack_1__element_2 = tmp_assign_source_15;
        }
        {
            PyObject *tmp_assign_source_16;
            PyObject *tmp_unpack_3;
            CHECK_OBJECT( tmp_tuple_unpack_1__source_iter );
            tmp_unpack_3 = tmp_tuple_unpack_1__source_iter;
            tmp_assign_source_16 = UNPACK_NEXT( tmp_unpack_3, 2, 3 );
            if ( tmp_assign_source_16 == NULL )
            {
                if ( !ERROR_OCCURRED() )
                {
                    exception_type = PyExc_StopIteration;
                    Py_INCREF( exception_type );
                    exception_value = NULL;
                    exception_tb = NULL;
                }
                else
                {
                    FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
                }


                type_description_1 = "ooooooooo";
                exception_lineno = 493;
                goto try_except_handler_10;
            }
            assert( tmp_tuple_unpack_1__element_3 == NULL );
            tmp_tuple_unpack_1__element_3 = tmp_assign_source_16;
        }
        {
            PyObject *tmp_iterator_name_1;
            CHECK_OBJECT( tmp_tuple_unpack_1__source_iter );
            tmp_iterator_name_1 = tmp_tuple_unpack_1__source_iter;
            // Check if iterator has left-over elements.
            CHECK_OBJECT( tmp_iterator_name_1 ); assert( HAS_ITERNEXT( tmp_iterator_name_1 ) );

            tmp_iterator_attempt = (*Py_TYPE( tmp_iterator_name_1 )->tp_iternext)( tmp_iterator_name_1 );

            if (likely( tmp_iterator_attempt == NULL ))
            {
                PyObject *error = GET_ERROR_OCCURRED();

                if ( error != NULL )
                {
                    if ( EXCEPTION_MATCH_BOOL_SINGLE( error, PyExc_StopIteration ))
                    {
                        CLEAR_ERROR_OCCURRED();
                    }
                    else
                    {
                        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );

                        type_description_1 = "ooooooooo";
                        exception_lineno = 493;
                        goto try_except_handler_10;
                    }
                }
            }
            else
            {
                Py_DECREF( tmp_iterator_attempt );

                // TODO: Could avoid PyErr_Format.
#if PYTHON_VERSION < 300
                PyErr_Format( PyExc_ValueError, "too many values to unpack" );
#else
                PyErr_Format( PyExc_ValueError, "too many values to unpack (expected 3)" );
#endif
                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );

                type_description_1 = "ooooooooo";
                exception_lineno = 493;
                goto try_except_handler_10;
            }
        }
        goto try_end_7;
        // Exception handler code:
        try_except_handler_10:;
        exception_keeper_type_7 = exception_type;
        exception_keeper_value_7 = exception_value;
        exception_keeper_tb_7 = exception_tb;
        exception_keeper_lineno_7 = exception_lineno;
        exception_type = NULL;
        exception_value = NULL;
        exception_tb = NULL;
        exception_lineno = 0;

        CHECK_OBJECT( (PyObject *)tmp_tuple_unpack_1__source_iter );
        Py_DECREF( tmp_tuple_unpack_1__source_iter );
        tmp_tuple_unpack_1__source_iter = NULL;

        // Re-raise.
        exception_type = exception_keeper_type_7;
        exception_value = exception_keeper_value_7;
        exception_tb = exception_keeper_tb_7;
        exception_lineno = exception_keeper_lineno_7;

        goto try_except_handler_9;
        // End of try:
        try_end_7:;
        goto try_end_8;
        // Exception handler code:
        try_except_handler_9:;
        exception_keeper_type_8 = exception_type;
        exception_keeper_value_8 = exception_value;
        exception_keeper_tb_8 = exception_tb;
        exception_keeper_lineno_8 = exception_lineno;
        exception_type = NULL;
        exception_value = NULL;
        exception_tb = NULL;
        exception_lineno = 0;

        Py_XDECREF( tmp_tuple_unpack_1__element_1 );
        tmp_tuple_unpack_1__element_1 = NULL;

        Py_XDECREF( tmp_tuple_unpack_1__element_2 );
        tmp_tuple_unpack_1__element_2 = NULL;

        Py_XDECREF( tmp_tuple_unpack_1__element_3 );
        tmp_tuple_unpack_1__element_3 = NULL;

        // Re-raise.
        exception_type = exception_keeper_type_8;
        exception_value = exception_keeper_value_8;
        exception_tb = exception_keeper_tb_8;
        exception_lineno = exception_keeper_lineno_8;

        goto frame_exception_exit_1;
        // End of try:
        try_end_8:;
        CHECK_OBJECT( (PyObject *)tmp_tuple_unpack_1__source_iter );
        Py_DECREF( tmp_tuple_unpack_1__source_iter );
        tmp_tuple_unpack_1__source_iter = NULL;

        {
            PyObject *tmp_assign_source_17;
            CHECK_OBJECT( tmp_tuple_unpack_1__element_1 );
            tmp_assign_source_17 = tmp_tuple_unpack_1__element_1;
            {
                PyObject *old = par_system;
                assert( old != NULL );
                par_system = tmp_assign_source_17;
                Py_INCREF( par_system );
                Py_DECREF( old );
            }

        }
        Py_XDECREF( tmp_tuple_unpack_1__element_1 );
        tmp_tuple_unpack_1__element_1 = NULL;

        {
            PyObject *tmp_assign_source_18;
            CHECK_OBJECT( tmp_tuple_unpack_1__element_2 );
            tmp_assign_source_18 = tmp_tuple_unpack_1__element_2;
            {
                PyObject *old = par_release;
                assert( old != NULL );
                par_release = tmp_assign_source_18;
                Py_INCREF( par_release );
                Py_DECREF( old );
            }

        }
        Py_XDECREF( tmp_tuple_unpack_1__element_2 );
        tmp_tuple_unpack_1__element_2 = NULL;

        {
            PyObject *tmp_assign_source_19;
            CHECK_OBJECT( tmp_tuple_unpack_1__element_3 );
            tmp_assign_source_19 = tmp_tuple_unpack_1__element_3;
            {
                PyObject *old = par_version;
                assert( old != NULL );
                par_version = tmp_assign_source_19;
                Py_INCREF( par_version );
                Py_DECREF( old );
            }

        }
        Py_XDECREF( tmp_tuple_unpack_1__element_3 );
        tmp_tuple_unpack_1__element_3 = NULL;

        {
            nuitka_bool tmp_condition_result_8;
            PyObject *tmp_compexpr_left_7;
            PyObject *tmp_compexpr_right_7;
            PyObject *tmp_subscribed_name_1;
            PyObject *tmp_subscript_name_1;
            CHECK_OBJECT( par_release );
            tmp_subscribed_name_1 = par_release;
            tmp_subscript_name_1 = const_int_neg_1;
            tmp_compexpr_left_7 = LOOKUP_SUBSCRIPT_CONST( tmp_subscribed_name_1, tmp_subscript_name_1, -1 );
            if ( tmp_compexpr_left_7 == NULL )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 495;
                type_description_1 = "ooooooooo";
                goto frame_exception_exit_1;
            }
            tmp_compexpr_right_7 = const_str_dot;
            tmp_res = RICH_COMPARE_BOOL_EQ_OBJECT_OBJECT( tmp_compexpr_left_7, tmp_compexpr_right_7 );
            Py_DECREF( tmp_compexpr_left_7 );
            if ( tmp_res == -1 )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 495;
                type_description_1 = "ooooooooo";
                goto frame_exception_exit_1;
            }
            tmp_condition_result_8 = ( tmp_res != 0 ) ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
            if ( tmp_condition_result_8 == NUITKA_BOOL_TRUE )
            {
                goto branch_yes_8;
            }
            else
            {
                goto branch_no_8;
            }
            branch_yes_8:;
            {
                PyObject *tmp_assign_source_20;
                PyObject *tmp_subscribed_name_2;
                PyObject *tmp_subscript_name_2;
                CHECK_OBJECT( par_release );
                tmp_subscribed_name_2 = par_release;
                tmp_subscript_name_2 = const_slice_none_int_neg_1_none;
                tmp_assign_source_20 = LOOKUP_SUBSCRIPT( tmp_subscribed_name_2, tmp_subscript_name_2 );
                if ( tmp_assign_source_20 == NULL )
                {
                    assert( ERROR_OCCURRED() );

                    FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                    exception_lineno = 496;
                    type_description_1 = "ooooooooo";
                    goto frame_exception_exit_1;
                }
                {
                    PyObject *old = par_release;
                    assert( old != NULL );
                    par_release = tmp_assign_source_20;
                    Py_DECREF( old );
                }

            }
            branch_no_8:;
        }
        {
            nuitka_bool tmp_condition_result_9;
            PyObject *tmp_compexpr_left_8;
            PyObject *tmp_compexpr_right_8;
            PyObject *tmp_subscribed_name_3;
            PyObject *tmp_subscript_name_3;
            CHECK_OBJECT( par_version );
            tmp_subscribed_name_3 = par_version;
            tmp_subscript_name_3 = const_int_neg_1;
            tmp_compexpr_left_8 = LOOKUP_SUBSCRIPT_CONST( tmp_subscribed_name_3, tmp_subscript_name_3, -1 );
            if ( tmp_compexpr_left_8 == NULL )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 497;
                type_description_1 = "ooooooooo";
                goto frame_exception_exit_1;
            }
            tmp_compexpr_right_8 = const_str_dot;
            tmp_res = RICH_COMPARE_BOOL_EQ_OBJECT_OBJECT( tmp_compexpr_left_8, tmp_compexpr_right_8 );
            Py_DECREF( tmp_compexpr_left_8 );
            if ( tmp_res == -1 )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 497;
                type_description_1 = "ooooooooo";
                goto frame_exception_exit_1;
            }
            tmp_condition_result_9 = ( tmp_res != 0 ) ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
            if ( tmp_condition_result_9 == NUITKA_BOOL_TRUE )
            {
                goto branch_yes_9;
            }
            else
            {
                goto branch_no_9;
            }
            branch_yes_9:;
            {
                PyObject *tmp_assign_source_21;
                PyObject *tmp_subscribed_name_4;
                PyObject *tmp_subscript_name_4;
                CHECK_OBJECT( par_version );
                tmp_subscribed_name_4 = par_version;
                tmp_subscript_name_4 = const_slice_none_int_neg_1_none;
                tmp_assign_source_21 = LOOKUP_SUBSCRIPT( tmp_subscribed_name_4, tmp_subscript_name_4 );
                if ( tmp_assign_source_21 == NULL )
                {
                    assert( ERROR_OCCURRED() );

                    FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                    exception_lineno = 498;
                    type_description_1 = "ooooooooo";
                    goto frame_exception_exit_1;
                }
                {
                    PyObject *old = par_version;
                    assert( old != NULL );
                    par_version = tmp_assign_source_21;
                    Py_DECREF( old );
                }

            }
            branch_no_9:;
        }
        {
            PyObject *tmp_assign_source_22;
            PyObject *tmp_called_name_1;
            PyObject *tmp_mvar_value_4;
            PyObject *tmp_args_element_name_3;
            tmp_mvar_value_4 = GET_STRING_DICT_VALUE( moduledict_platform, (Nuitka_StringObject *)const_str_plain__norm_version );

            if (unlikely( tmp_mvar_value_4 == NULL ))
            {
                tmp_mvar_value_4 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain__norm_version );
            }

            if ( tmp_mvar_value_4 == NULL )
            {

                exception_type = PyExc_NameError;
                Py_INCREF( exception_type );
                exception_value = PyUnicode_FromFormat( "name '%s' is not defined", "_norm_version" );
                exception_tb = NULL;
                NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
                CHAIN_EXCEPTION( exception_value );

                exception_lineno = 501;
                type_description_1 = "ooooooooo";
                goto frame_exception_exit_1;
            }

            tmp_called_name_1 = tmp_mvar_value_4;
            CHECK_OBJECT( par_version );
            tmp_args_element_name_3 = par_version;
            frame_109f5500facaab962d851ae8f9c2a4fc->m_frame.f_lineno = 501;
            {
                PyObject *call_args[] = { tmp_args_element_name_3 };
                tmp_assign_source_22 = CALL_FUNCTION_WITH_ARGS1( tmp_called_name_1, call_args );
            }

            if ( tmp_assign_source_22 == NULL )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 501;
                type_description_1 = "ooooooooo";
                goto frame_exception_exit_1;
            }
            {
                PyObject *old = par_version;
                assert( old != NULL );
                par_version = tmp_assign_source_22;
                Py_DECREF( old );
            }

        }
        branch_no_7:;
    }
    {
        PyObject *tmp_tuple_element_3;
        CHECK_OBJECT( par_system );
        tmp_tuple_element_3 = par_system;
        tmp_return_value = PyTuple_New( 3 );
        Py_INCREF( tmp_tuple_element_3 );
        PyTuple_SET_ITEM( tmp_return_value, 0, tmp_tuple_element_3 );
        if ( par_release == NULL )
        {
            Py_DECREF( tmp_return_value );
            exception_type = PyExc_UnboundLocalError;
            Py_INCREF( exception_type );
            exception_value = PyUnicode_FromFormat( "local variable '%s' referenced before assignment", "release" );
            exception_tb = NULL;
            NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
            CHAIN_EXCEPTION( exception_value );

            exception_lineno = 502;
            type_description_1 = "ooooooooo";
            goto frame_exception_exit_1;
        }

        tmp_tuple_element_3 = par_release;
        Py_INCREF( tmp_tuple_element_3 );
        PyTuple_SET_ITEM( tmp_return_value, 1, tmp_tuple_element_3 );
        CHECK_OBJECT( par_version );
        tmp_tuple_element_3 = par_version;
        Py_INCREF( tmp_tuple_element_3 );
        PyTuple_SET_ITEM( tmp_return_value, 2, tmp_tuple_element_3 );
        goto frame_return_exit_1;
    }

#if 0
    RESTORE_FRAME_EXCEPTION( frame_109f5500facaab962d851ae8f9c2a4fc );
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto frame_no_exception_1;

    frame_return_exit_1:;
#if 0
    RESTORE_FRAME_EXCEPTION( frame_109f5500facaab962d851ae8f9c2a4fc );
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto try_return_handler_1;

    frame_exception_exit_1:;

#if 0
    RESTORE_FRAME_EXCEPTION( frame_109f5500facaab962d851ae8f9c2a4fc );
#endif

    if ( exception_tb == NULL )
    {
        exception_tb = MAKE_TRACEBACK( frame_109f5500facaab962d851ae8f9c2a4fc, exception_lineno );
    }
    else if ( exception_tb->tb_frame != &frame_109f5500facaab962d851ae8f9c2a4fc->m_frame )
    {
        exception_tb = ADD_TRACEBACK( exception_tb, frame_109f5500facaab962d851ae8f9c2a4fc, exception_lineno );
    }

    // Attachs locals to frame if any.
    Nuitka_Frame_AttachLocals(
        (struct Nuitka_FrameObject *)frame_109f5500facaab962d851ae8f9c2a4fc,
        type_description_1,
        par_system,
        par_release,
        par_version,
        par_supported_platforms,
        var_cmd,
        var_pipe,
        var_info,
        var_why,
        var_m
    );


    // Release cached frame.
    if ( frame_109f5500facaab962d851ae8f9c2a4fc == cache_frame_109f5500facaab962d851ae8f9c2a4fc )
    {
        Py_DECREF( frame_109f5500facaab962d851ae8f9c2a4fc );
    }
    cache_frame_109f5500facaab962d851ae8f9c2a4fc = NULL;

    assertFrameObject( frame_109f5500facaab962d851ae8f9c2a4fc );

    // Put the previous frame back on top.
    popFrameStack();

    // Return the error.
    goto try_except_handler_1;

    frame_no_exception_1:;
    // tried codes exits in all cases
    NUITKA_CANNOT_GET_HERE( platform$$$function_10__syscmd_ver );
    return NULL;
    // Return handler code:
    try_return_handler_1:;
    Py_XDECREF( par_system );
    par_system = NULL;

    Py_XDECREF( par_release );
    par_release = NULL;

    Py_XDECREF( par_version );
    par_version = NULL;

    CHECK_OBJECT( (PyObject *)par_supported_platforms );
    Py_DECREF( par_supported_platforms );
    par_supported_platforms = NULL;

    Py_XDECREF( var_cmd );
    var_cmd = NULL;

    Py_XDECREF( var_pipe );
    var_pipe = NULL;

    Py_XDECREF( var_info );
    var_info = NULL;

    Py_XDECREF( var_why );
    var_why = NULL;

    Py_XDECREF( var_m );
    var_m = NULL;

    goto function_return_exit;
    // Exception handler code:
    try_except_handler_1:;
    exception_keeper_type_9 = exception_type;
    exception_keeper_value_9 = exception_value;
    exception_keeper_tb_9 = exception_tb;
    exception_keeper_lineno_9 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    Py_XDECREF( par_system );
    par_system = NULL;

    Py_XDECREF( par_release );
    par_release = NULL;

    Py_XDECREF( par_version );
    par_version = NULL;

    CHECK_OBJECT( (PyObject *)par_supported_platforms );
    Py_DECREF( par_supported_platforms );
    par_supported_platforms = NULL;

    Py_XDECREF( var_cmd );
    var_cmd = NULL;

    Py_XDECREF( var_pipe );
    var_pipe = NULL;

    Py_XDECREF( var_info );
    var_info = NULL;

    Py_XDECREF( var_why );
    var_why = NULL;

    Py_XDECREF( var_m );
    var_m = NULL;

    // Re-raise.
    exception_type = exception_keeper_type_9;
    exception_value = exception_keeper_value_9;
    exception_tb = exception_keeper_tb_9;
    exception_lineno = exception_keeper_lineno_9;

    goto function_exception_exit;
    // End of try:

    // Return statement must have exited already.
    NUITKA_CANNOT_GET_HERE( platform$$$function_10__syscmd_ver );
    return NULL;

function_exception_exit:
    assert( exception_type );
    RESTORE_ERROR_OCCURRED( exception_type, exception_value, exception_tb );

    return NULL;

function_return_exit:
   // Function cleanup code if any.


   // Actual function exit with return value, making sure we did not make
   // the error status worse despite non-NULL return.
   CHECK_OBJECT( tmp_return_value );
   assert( had_error || !ERROR_OCCURRED() );
   return tmp_return_value;
}


static PyObject *impl_platform$$$function_11_win32_ver( struct Nuitka_FunctionObject const *self, PyObject **python_pars )
{
    // Preserve error status for checks
#ifndef __NUITKA_NO_ASSERT__
    NUITKA_MAY_BE_UNUSED bool had_error = ERROR_OCCURRED();
#endif

    // Local variable declarations.
    PyObject *par_release = python_pars[ 0 ];
    PyObject *par_version = python_pars[ 1 ];
    PyObject *par_csd = python_pars[ 2 ];
    PyObject *par_ptype = python_pars[ 3 ];
    PyObject *var_getwindowsversion = NULL;
    PyObject *var_OpenKeyEx = NULL;
    PyObject *var_QueryValueEx = NULL;
    PyObject *var_CloseKey = NULL;
    PyObject *var_HKEY_LOCAL_MACHINE = NULL;
    PyObject *var_winver = NULL;
    PyObject *var_maj = NULL;
    PyObject *var_min = NULL;
    PyObject *var_build = NULL;
    PyObject *var_key = NULL;
    PyObject *tmp_import_from_1__module = NULL;
    PyObject *tmp_tuple_unpack_1__element_1 = NULL;
    PyObject *tmp_tuple_unpack_1__element_2 = NULL;
    PyObject *tmp_tuple_unpack_1__element_3 = NULL;
    PyObject *tmp_tuple_unpack_1__source_iter = NULL;
    struct Nuitka_FrameObject *frame_452a413b3bfaa85657a8807ce8e12b14;
    NUITKA_MAY_BE_UNUSED char const *type_description_1 = NULL;
    PyObject *exception_type = NULL;
    PyObject *exception_value = NULL;
    PyTracebackObject *exception_tb = NULL;
    NUITKA_MAY_BE_UNUSED int exception_lineno = 0;
    PyObject *tmp_iterator_attempt;
    PyObject *exception_keeper_type_1;
    PyObject *exception_keeper_value_1;
    PyTracebackObject *exception_keeper_tb_1;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_1;
    PyObject *exception_keeper_type_2;
    PyObject *exception_keeper_value_2;
    PyTracebackObject *exception_keeper_tb_2;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_2;
    int tmp_res;
    PyObject *exception_keeper_type_3;
    PyObject *exception_keeper_value_3;
    PyTracebackObject *exception_keeper_tb_3;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_3;
    PyObject *exception_preserved_type_3;
    PyObject *exception_preserved_value_3;
    PyTracebackObject *exception_preserved_tb_3;
    bool tmp_result;
    PyObject *exception_keeper_type_4;
    PyObject *exception_keeper_value_4;
    PyTracebackObject *exception_keeper_tb_4;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_4;
    PyObject *exception_keeper_type_5;
    PyObject *exception_keeper_value_5;
    PyTracebackObject *exception_keeper_tb_5;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_5;
    PyObject *tmp_return_value = NULL;
    static struct Nuitka_FrameObject *cache_frame_452a413b3bfaa85657a8807ce8e12b14 = NULL;
    PyObject *exception_keeper_type_6;
    PyObject *exception_keeper_value_6;
    PyTracebackObject *exception_keeper_tb_6;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_6;

    // Actual function body.
    {
        PyObject *tmp_assign_source_1;
        PyObject *tmp_import_name_from_1;
        PyObject *tmp_name_name_1;
        PyObject *tmp_globals_name_1;
        PyObject *tmp_locals_name_1;
        PyObject *tmp_fromlist_name_1;
        PyObject *tmp_level_name_1;
        tmp_name_name_1 = const_str_plain_sys;
        tmp_globals_name_1 = (PyObject *)moduledict_platform;
        tmp_locals_name_1 = Py_None;
        tmp_fromlist_name_1 = const_tuple_str_plain_getwindowsversion_tuple;
        tmp_level_name_1 = const_int_0;
        tmp_import_name_from_1 = IMPORT_MODULE5( tmp_name_name_1, tmp_globals_name_1, tmp_locals_name_1, tmp_fromlist_name_1, tmp_level_name_1 );
        assert( !(tmp_import_name_from_1 == NULL) );
        tmp_assign_source_1 = IMPORT_NAME( tmp_import_name_from_1, const_str_plain_getwindowsversion );
        Py_DECREF( tmp_import_name_from_1 );
        assert( !(tmp_assign_source_1 == NULL) );
        assert( var_getwindowsversion == NULL );
        var_getwindowsversion = tmp_assign_source_1;
    }
    {
        PyObject *tmp_assign_source_2;
        PyObject *tmp_name_name_2;
        PyObject *tmp_globals_name_2;
        PyObject *tmp_locals_name_2;
        PyObject *tmp_fromlist_name_2;
        PyObject *tmp_level_name_2;
        tmp_name_name_2 = const_str_plain_winreg;
        tmp_globals_name_2 = (PyObject *)moduledict_platform;
        tmp_locals_name_2 = Py_None;
        tmp_fromlist_name_2 = const_tuple_3638aa083ca9931951132a42ffd863dd_tuple;
        tmp_level_name_2 = const_int_0;
        tmp_assign_source_2 = IMPORT_MODULE5( tmp_name_name_2, tmp_globals_name_2, tmp_locals_name_2, tmp_fromlist_name_2, tmp_level_name_2 );
        assert( !(tmp_assign_source_2 == NULL) );
        assert( tmp_import_from_1__module == NULL );
        tmp_import_from_1__module = tmp_assign_source_2;
    }
    {
        PyObject *tmp_assign_source_3;
        PyObject *tmp_import_name_from_2;
        CHECK_OBJECT( tmp_import_from_1__module );
        tmp_import_name_from_2 = tmp_import_from_1__module;
        tmp_assign_source_3 = IMPORT_NAME( tmp_import_name_from_2, const_str_plain_OpenKeyEx );
        assert( !(tmp_assign_source_3 == NULL) );
        assert( var_OpenKeyEx == NULL );
        var_OpenKeyEx = tmp_assign_source_3;
    }
    {
        PyObject *tmp_assign_source_4;
        PyObject *tmp_import_name_from_3;
        CHECK_OBJECT( tmp_import_from_1__module );
        tmp_import_name_from_3 = tmp_import_from_1__module;
        tmp_assign_source_4 = IMPORT_NAME( tmp_import_name_from_3, const_str_plain_QueryValueEx );
        assert( !(tmp_assign_source_4 == NULL) );
        assert( var_QueryValueEx == NULL );
        var_QueryValueEx = tmp_assign_source_4;
    }
    {
        PyObject *tmp_assign_source_5;
        PyObject *tmp_import_name_from_4;
        CHECK_OBJECT( tmp_import_from_1__module );
        tmp_import_name_from_4 = tmp_import_from_1__module;
        tmp_assign_source_5 = IMPORT_NAME( tmp_import_name_from_4, const_str_plain_CloseKey );
        assert( !(tmp_assign_source_5 == NULL) );
        assert( var_CloseKey == NULL );
        var_CloseKey = tmp_assign_source_5;
    }
    {
        PyObject *tmp_assign_source_6;
        PyObject *tmp_import_name_from_5;
        CHECK_OBJECT( tmp_import_from_1__module );
        tmp_import_name_from_5 = tmp_import_from_1__module;
        tmp_assign_source_6 = IMPORT_NAME( tmp_import_name_from_5, const_str_plain_HKEY_LOCAL_MACHINE );
        assert( !(tmp_assign_source_6 == NULL) );
        assert( var_HKEY_LOCAL_MACHINE == NULL );
        var_HKEY_LOCAL_MACHINE = tmp_assign_source_6;
    }
    CHECK_OBJECT( (PyObject *)tmp_import_from_1__module );
    Py_DECREF( tmp_import_from_1__module );
    tmp_import_from_1__module = NULL;

    // Tried code:
    MAKE_OR_REUSE_FRAME( cache_frame_452a413b3bfaa85657a8807ce8e12b14, codeobj_452a413b3bfaa85657a8807ce8e12b14, module_platform, sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *) );
    frame_452a413b3bfaa85657a8807ce8e12b14 = cache_frame_452a413b3bfaa85657a8807ce8e12b14;

    // Push the new frame as the currently active one.
    pushFrameStack( frame_452a413b3bfaa85657a8807ce8e12b14 );

    // Mark the frame object as in use, ref count 1 will be up for reuse.
    assert( Py_REFCNT( frame_452a413b3bfaa85657a8807ce8e12b14 ) == 2 ); // Frame stack

    // Framed code:
    {
        PyObject *tmp_assign_source_7;
        PyObject *tmp_called_name_1;
        CHECK_OBJECT( var_getwindowsversion );
        tmp_called_name_1 = var_getwindowsversion;
        frame_452a413b3bfaa85657a8807ce8e12b14->m_frame.f_lineno = 543;
        tmp_assign_source_7 = CALL_FUNCTION_NO_ARGS( tmp_called_name_1 );
        if ( tmp_assign_source_7 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 543;
            type_description_1 = "oooooooooooooo";
            goto frame_exception_exit_1;
        }
        assert( var_winver == NULL );
        var_winver = tmp_assign_source_7;
    }
    // Tried code:
    {
        PyObject *tmp_assign_source_8;
        PyObject *tmp_iter_arg_1;
        int tmp_or_left_truth_1;
        PyObject *tmp_or_left_value_1;
        PyObject *tmp_or_right_value_1;
        PyObject *tmp_source_name_1;
        PyObject *tmp_subscribed_name_1;
        PyObject *tmp_subscript_name_1;
        CHECK_OBJECT( var_winver );
        tmp_source_name_1 = var_winver;
        tmp_or_left_value_1 = LOOKUP_ATTRIBUTE( tmp_source_name_1, const_str_plain_platform_version );
        if ( tmp_or_left_value_1 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 544;
            type_description_1 = "oooooooooooooo";
            goto try_except_handler_2;
        }
        tmp_or_left_truth_1 = CHECK_IF_TRUE( tmp_or_left_value_1 );
        if ( tmp_or_left_truth_1 == -1 )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
            Py_DECREF( tmp_or_left_value_1 );

            exception_lineno = 544;
            type_description_1 = "oooooooooooooo";
            goto try_except_handler_2;
        }
        if ( tmp_or_left_truth_1 == 1 )
        {
            goto or_left_1;
        }
        else
        {
            goto or_right_1;
        }
        or_right_1:;
        Py_DECREF( tmp_or_left_value_1 );
        CHECK_OBJECT( var_winver );
        tmp_subscribed_name_1 = var_winver;
        tmp_subscript_name_1 = const_slice_none_int_pos_3_none;
        tmp_or_right_value_1 = LOOKUP_SUBSCRIPT( tmp_subscribed_name_1, tmp_subscript_name_1 );
        if ( tmp_or_right_value_1 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 544;
            type_description_1 = "oooooooooooooo";
            goto try_except_handler_2;
        }
        tmp_iter_arg_1 = tmp_or_right_value_1;
        goto or_end_1;
        or_left_1:;
        tmp_iter_arg_1 = tmp_or_left_value_1;
        or_end_1:;
        tmp_assign_source_8 = MAKE_UNPACK_ITERATOR( tmp_iter_arg_1 );
        Py_DECREF( tmp_iter_arg_1 );
        if ( tmp_assign_source_8 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 544;
            type_description_1 = "oooooooooooooo";
            goto try_except_handler_2;
        }
        assert( tmp_tuple_unpack_1__source_iter == NULL );
        tmp_tuple_unpack_1__source_iter = tmp_assign_source_8;
    }
    // Tried code:
    {
        PyObject *tmp_assign_source_9;
        PyObject *tmp_unpack_1;
        CHECK_OBJECT( tmp_tuple_unpack_1__source_iter );
        tmp_unpack_1 = tmp_tuple_unpack_1__source_iter;
        tmp_assign_source_9 = UNPACK_NEXT( tmp_unpack_1, 0, 3 );
        if ( tmp_assign_source_9 == NULL )
        {
            if ( !ERROR_OCCURRED() )
            {
                exception_type = PyExc_StopIteration;
                Py_INCREF( exception_type );
                exception_value = NULL;
                exception_tb = NULL;
            }
            else
            {
                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
            }


            type_description_1 = "oooooooooooooo";
            exception_lineno = 544;
            goto try_except_handler_3;
        }
        assert( tmp_tuple_unpack_1__element_1 == NULL );
        tmp_tuple_unpack_1__element_1 = tmp_assign_source_9;
    }
    {
        PyObject *tmp_assign_source_10;
        PyObject *tmp_unpack_2;
        CHECK_OBJECT( tmp_tuple_unpack_1__source_iter );
        tmp_unpack_2 = tmp_tuple_unpack_1__source_iter;
        tmp_assign_source_10 = UNPACK_NEXT( tmp_unpack_2, 1, 3 );
        if ( tmp_assign_source_10 == NULL )
        {
            if ( !ERROR_OCCURRED() )
            {
                exception_type = PyExc_StopIteration;
                Py_INCREF( exception_type );
                exception_value = NULL;
                exception_tb = NULL;
            }
            else
            {
                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
            }


            type_description_1 = "oooooooooooooo";
            exception_lineno = 544;
            goto try_except_handler_3;
        }
        assert( tmp_tuple_unpack_1__element_2 == NULL );
        tmp_tuple_unpack_1__element_2 = tmp_assign_source_10;
    }
    {
        PyObject *tmp_assign_source_11;
        PyObject *tmp_unpack_3;
        CHECK_OBJECT( tmp_tuple_unpack_1__source_iter );
        tmp_unpack_3 = tmp_tuple_unpack_1__source_iter;
        tmp_assign_source_11 = UNPACK_NEXT( tmp_unpack_3, 2, 3 );
        if ( tmp_assign_source_11 == NULL )
        {
            if ( !ERROR_OCCURRED() )
            {
                exception_type = PyExc_StopIteration;
                Py_INCREF( exception_type );
                exception_value = NULL;
                exception_tb = NULL;
            }
            else
            {
                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
            }


            type_description_1 = "oooooooooooooo";
            exception_lineno = 544;
            goto try_except_handler_3;
        }
        assert( tmp_tuple_unpack_1__element_3 == NULL );
        tmp_tuple_unpack_1__element_3 = tmp_assign_source_11;
    }
    {
        PyObject *tmp_iterator_name_1;
        CHECK_OBJECT( tmp_tuple_unpack_1__source_iter );
        tmp_iterator_name_1 = tmp_tuple_unpack_1__source_iter;
        // Check if iterator has left-over elements.
        CHECK_OBJECT( tmp_iterator_name_1 ); assert( HAS_ITERNEXT( tmp_iterator_name_1 ) );

        tmp_iterator_attempt = (*Py_TYPE( tmp_iterator_name_1 )->tp_iternext)( tmp_iterator_name_1 );

        if (likely( tmp_iterator_attempt == NULL ))
        {
            PyObject *error = GET_ERROR_OCCURRED();

            if ( error != NULL )
            {
                if ( EXCEPTION_MATCH_BOOL_SINGLE( error, PyExc_StopIteration ))
                {
                    CLEAR_ERROR_OCCURRED();
                }
                else
                {
                    FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );

                    type_description_1 = "oooooooooooooo";
                    exception_lineno = 544;
                    goto try_except_handler_3;
                }
            }
        }
        else
        {
            Py_DECREF( tmp_iterator_attempt );

            // TODO: Could avoid PyErr_Format.
#if PYTHON_VERSION < 300
            PyErr_Format( PyExc_ValueError, "too many values to unpack" );
#else
            PyErr_Format( PyExc_ValueError, "too many values to unpack (expected 3)" );
#endif
            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );

            type_description_1 = "oooooooooooooo";
            exception_lineno = 544;
            goto try_except_handler_3;
        }
    }
    goto try_end_1;
    // Exception handler code:
    try_except_handler_3:;
    exception_keeper_type_1 = exception_type;
    exception_keeper_value_1 = exception_value;
    exception_keeper_tb_1 = exception_tb;
    exception_keeper_lineno_1 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    CHECK_OBJECT( (PyObject *)tmp_tuple_unpack_1__source_iter );
    Py_DECREF( tmp_tuple_unpack_1__source_iter );
    tmp_tuple_unpack_1__source_iter = NULL;

    // Re-raise.
    exception_type = exception_keeper_type_1;
    exception_value = exception_keeper_value_1;
    exception_tb = exception_keeper_tb_1;
    exception_lineno = exception_keeper_lineno_1;

    goto try_except_handler_2;
    // End of try:
    try_end_1:;
    goto try_end_2;
    // Exception handler code:
    try_except_handler_2:;
    exception_keeper_type_2 = exception_type;
    exception_keeper_value_2 = exception_value;
    exception_keeper_tb_2 = exception_tb;
    exception_keeper_lineno_2 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    Py_XDECREF( tmp_tuple_unpack_1__element_1 );
    tmp_tuple_unpack_1__element_1 = NULL;

    Py_XDECREF( tmp_tuple_unpack_1__element_2 );
    tmp_tuple_unpack_1__element_2 = NULL;

    Py_XDECREF( tmp_tuple_unpack_1__element_3 );
    tmp_tuple_unpack_1__element_3 = NULL;

    // Re-raise.
    exception_type = exception_keeper_type_2;
    exception_value = exception_keeper_value_2;
    exception_tb = exception_keeper_tb_2;
    exception_lineno = exception_keeper_lineno_2;

    goto frame_exception_exit_1;
    // End of try:
    try_end_2:;
    CHECK_OBJECT( (PyObject *)tmp_tuple_unpack_1__source_iter );
    Py_DECREF( tmp_tuple_unpack_1__source_iter );
    tmp_tuple_unpack_1__source_iter = NULL;

    {
        PyObject *tmp_assign_source_12;
        CHECK_OBJECT( tmp_tuple_unpack_1__element_1 );
        tmp_assign_source_12 = tmp_tuple_unpack_1__element_1;
        assert( var_maj == NULL );
        Py_INCREF( tmp_assign_source_12 );
        var_maj = tmp_assign_source_12;
    }
    Py_XDECREF( tmp_tuple_unpack_1__element_1 );
    tmp_tuple_unpack_1__element_1 = NULL;

    {
        PyObject *tmp_assign_source_13;
        CHECK_OBJECT( tmp_tuple_unpack_1__element_2 );
        tmp_assign_source_13 = tmp_tuple_unpack_1__element_2;
        assert( var_min == NULL );
        Py_INCREF( tmp_assign_source_13 );
        var_min = tmp_assign_source_13;
    }
    Py_XDECREF( tmp_tuple_unpack_1__element_2 );
    tmp_tuple_unpack_1__element_2 = NULL;

    {
        PyObject *tmp_assign_source_14;
        CHECK_OBJECT( tmp_tuple_unpack_1__element_3 );
        tmp_assign_source_14 = tmp_tuple_unpack_1__element_3;
        assert( var_build == NULL );
        Py_INCREF( tmp_assign_source_14 );
        var_build = tmp_assign_source_14;
    }
    Py_XDECREF( tmp_tuple_unpack_1__element_3 );
    tmp_tuple_unpack_1__element_3 = NULL;

    {
        PyObject *tmp_assign_source_15;
        PyObject *tmp_called_instance_1;
        PyObject *tmp_args_element_name_1;
        PyObject *tmp_args_element_name_2;
        PyObject *tmp_args_element_name_3;
        tmp_called_instance_1 = const_str_digest_affede846270f264becdab424a3bf89f;
        CHECK_OBJECT( var_maj );
        tmp_args_element_name_1 = var_maj;
        CHECK_OBJECT( var_min );
        tmp_args_element_name_2 = var_min;
        CHECK_OBJECT( var_build );
        tmp_args_element_name_3 = var_build;
        frame_452a413b3bfaa85657a8807ce8e12b14->m_frame.f_lineno = 545;
        {
            PyObject *call_args[] = { tmp_args_element_name_1, tmp_args_element_name_2, tmp_args_element_name_3 };
            tmp_assign_source_15 = CALL_METHOD_WITH_ARGS3( tmp_called_instance_1, const_str_plain_format, call_args );
        }

        if ( tmp_assign_source_15 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 545;
            type_description_1 = "oooooooooooooo";
            goto frame_exception_exit_1;
        }
        {
            PyObject *old = par_version;
            assert( old != NULL );
            par_version = tmp_assign_source_15;
            Py_DECREF( old );
        }

    }
    {
        PyObject *tmp_assign_source_16;
        int tmp_or_left_truth_2;
        PyObject *tmp_or_left_value_2;
        PyObject *tmp_or_right_value_2;
        PyObject *tmp_called_instance_2;
        PyObject *tmp_mvar_value_1;
        PyObject *tmp_args_element_name_4;
        PyObject *tmp_tuple_element_1;
        int tmp_or_left_truth_3;
        PyObject *tmp_or_left_value_3;
        PyObject *tmp_or_right_value_3;
        PyObject *tmp_called_instance_3;
        PyObject *tmp_mvar_value_2;
        PyObject *tmp_args_element_name_5;
        PyObject *tmp_tuple_element_2;
        tmp_mvar_value_1 = GET_STRING_DICT_VALUE( moduledict_platform, (Nuitka_StringObject *)const_str_plain__WIN32_CLIENT_RELEASES );

        if (unlikely( tmp_mvar_value_1 == NULL ))
        {
            tmp_mvar_value_1 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain__WIN32_CLIENT_RELEASES );
        }

        if ( tmp_mvar_value_1 == NULL )
        {

            exception_type = PyExc_NameError;
            Py_INCREF( exception_type );
            exception_value = PyUnicode_FromFormat( "name '%s' is not defined", "_WIN32_CLIENT_RELEASES" );
            exception_tb = NULL;
            NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
            CHAIN_EXCEPTION( exception_value );

            exception_lineno = 547;
            type_description_1 = "oooooooooooooo";
            goto frame_exception_exit_1;
        }

        tmp_called_instance_2 = tmp_mvar_value_1;
        CHECK_OBJECT( var_maj );
        tmp_tuple_element_1 = var_maj;
        tmp_args_element_name_4 = PyTuple_New( 2 );
        Py_INCREF( tmp_tuple_element_1 );
        PyTuple_SET_ITEM( tmp_args_element_name_4, 0, tmp_tuple_element_1 );
        CHECK_OBJECT( var_min );
        tmp_tuple_element_1 = var_min;
        Py_INCREF( tmp_tuple_element_1 );
        PyTuple_SET_ITEM( tmp_args_element_name_4, 1, tmp_tuple_element_1 );
        frame_452a413b3bfaa85657a8807ce8e12b14->m_frame.f_lineno = 547;
        {
            PyObject *call_args[] = { tmp_args_element_name_4 };
            tmp_or_left_value_2 = CALL_METHOD_WITH_ARGS1( tmp_called_instance_2, const_str_plain_get, call_args );
        }

        Py_DECREF( tmp_args_element_name_4 );
        if ( tmp_or_left_value_2 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 547;
            type_description_1 = "oooooooooooooo";
            goto frame_exception_exit_1;
        }
        tmp_or_left_truth_2 = CHECK_IF_TRUE( tmp_or_left_value_2 );
        if ( tmp_or_left_truth_2 == -1 )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
            Py_DECREF( tmp_or_left_value_2 );

            exception_lineno = 549;
            type_description_1 = "oooooooooooooo";
            goto frame_exception_exit_1;
        }
        if ( tmp_or_left_truth_2 == 1 )
        {
            goto or_left_2;
        }
        else
        {
            goto or_right_2;
        }
        or_right_2:;
        Py_DECREF( tmp_or_left_value_2 );
        tmp_mvar_value_2 = GET_STRING_DICT_VALUE( moduledict_platform, (Nuitka_StringObject *)const_str_plain__WIN32_CLIENT_RELEASES );

        if (unlikely( tmp_mvar_value_2 == NULL ))
        {
            tmp_mvar_value_2 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain__WIN32_CLIENT_RELEASES );
        }

        if ( tmp_mvar_value_2 == NULL )
        {

            exception_type = PyExc_NameError;
            Py_INCREF( exception_type );
            exception_value = PyUnicode_FromFormat( "name '%s' is not defined", "_WIN32_CLIENT_RELEASES" );
            exception_tb = NULL;
            NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
            CHAIN_EXCEPTION( exception_value );

            exception_lineno = 548;
            type_description_1 = "oooooooooooooo";
            goto frame_exception_exit_1;
        }

        tmp_called_instance_3 = tmp_mvar_value_2;
        CHECK_OBJECT( var_maj );
        tmp_tuple_element_2 = var_maj;
        tmp_args_element_name_5 = PyTuple_New( 2 );
        Py_INCREF( tmp_tuple_element_2 );
        PyTuple_SET_ITEM( tmp_args_element_name_5, 0, tmp_tuple_element_2 );
        tmp_tuple_element_2 = Py_None;
        Py_INCREF( tmp_tuple_element_2 );
        PyTuple_SET_ITEM( tmp_args_element_name_5, 1, tmp_tuple_element_2 );
        frame_452a413b3bfaa85657a8807ce8e12b14->m_frame.f_lineno = 548;
        {
            PyObject *call_args[] = { tmp_args_element_name_5 };
            tmp_or_left_value_3 = CALL_METHOD_WITH_ARGS1( tmp_called_instance_3, const_str_plain_get, call_args );
        }

        Py_DECREF( tmp_args_element_name_5 );
        if ( tmp_or_left_value_3 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 548;
            type_description_1 = "oooooooooooooo";
            goto frame_exception_exit_1;
        }
        tmp_or_left_truth_3 = CHECK_IF_TRUE( tmp_or_left_value_3 );
        if ( tmp_or_left_truth_3 == -1 )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
            Py_DECREF( tmp_or_left_value_3 );

            exception_lineno = 549;
            type_description_1 = "oooooooooooooo";
            goto frame_exception_exit_1;
        }
        if ( tmp_or_left_truth_3 == 1 )
        {
            goto or_left_3;
        }
        else
        {
            goto or_right_3;
        }
        or_right_3:;
        Py_DECREF( tmp_or_left_value_3 );
        CHECK_OBJECT( par_release );
        tmp_or_right_value_3 = par_release;
        Py_INCREF( tmp_or_right_value_3 );
        tmp_or_right_value_2 = tmp_or_right_value_3;
        goto or_end_3;
        or_left_3:;
        tmp_or_right_value_2 = tmp_or_left_value_3;
        or_end_3:;
        tmp_assign_source_16 = tmp_or_right_value_2;
        goto or_end_2;
        or_left_2:;
        tmp_assign_source_16 = tmp_or_left_value_2;
        or_end_2:;
        {
            PyObject *old = par_release;
            assert( old != NULL );
            par_release = tmp_assign_source_16;
            Py_DECREF( old );
        }

    }
    {
        nuitka_bool tmp_condition_result_1;
        PyObject *tmp_compexpr_left_1;
        PyObject *tmp_compexpr_right_1;
        PyObject *tmp_subscribed_name_2;
        PyObject *tmp_subscript_name_2;
        PyObject *tmp_tuple_element_3;
        CHECK_OBJECT( var_winver );
        tmp_subscribed_name_2 = var_winver;
        tmp_subscript_name_2 = const_slice_none_int_pos_2_none;
        tmp_compexpr_left_1 = LOOKUP_SUBSCRIPT( tmp_subscribed_name_2, tmp_subscript_name_2 );
        if ( tmp_compexpr_left_1 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 554;
            type_description_1 = "oooooooooooooo";
            goto frame_exception_exit_1;
        }
        CHECK_OBJECT( var_maj );
        tmp_tuple_element_3 = var_maj;
        tmp_compexpr_right_1 = PyTuple_New( 2 );
        Py_INCREF( tmp_tuple_element_3 );
        PyTuple_SET_ITEM( tmp_compexpr_right_1, 0, tmp_tuple_element_3 );
        CHECK_OBJECT( var_min );
        tmp_tuple_element_3 = var_min;
        Py_INCREF( tmp_tuple_element_3 );
        PyTuple_SET_ITEM( tmp_compexpr_right_1, 1, tmp_tuple_element_3 );
        tmp_res = RICH_COMPARE_BOOL_EQ_OBJECT_OBJECT( tmp_compexpr_left_1, tmp_compexpr_right_1 );
        Py_DECREF( tmp_compexpr_left_1 );
        Py_DECREF( tmp_compexpr_right_1 );
        if ( tmp_res == -1 )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 554;
            type_description_1 = "oooooooooooooo";
            goto frame_exception_exit_1;
        }
        tmp_condition_result_1 = ( tmp_res != 0 ) ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
        if ( tmp_condition_result_1 == NUITKA_BOOL_TRUE )
        {
            goto branch_yes_1;
        }
        else
        {
            goto branch_no_1;
        }
        branch_yes_1:;
        // Tried code:
        {
            PyObject *tmp_assign_source_17;
            PyObject *tmp_called_name_2;
            PyObject *tmp_source_name_2;
            PyObject *tmp_args_element_name_6;
            PyObject *tmp_source_name_3;
            tmp_source_name_2 = const_str_digest_fc3064e2a9426f0ebb30452af9a27131;
            tmp_called_name_2 = LOOKUP_ATTRIBUTE( tmp_source_name_2, const_str_plain_format );
            assert( !(tmp_called_name_2 == NULL) );
            CHECK_OBJECT( var_winver );
            tmp_source_name_3 = var_winver;
            tmp_args_element_name_6 = LOOKUP_ATTRIBUTE( tmp_source_name_3, const_str_plain_service_pack_major );
            if ( tmp_args_element_name_6 == NULL )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
                Py_DECREF( tmp_called_name_2 );

                exception_lineno = 556;
                type_description_1 = "oooooooooooooo";
                goto try_except_handler_4;
            }
            frame_452a413b3bfaa85657a8807ce8e12b14->m_frame.f_lineno = 556;
            {
                PyObject *call_args[] = { tmp_args_element_name_6 };
                tmp_assign_source_17 = CALL_FUNCTION_WITH_ARGS1( tmp_called_name_2, call_args );
            }

            Py_DECREF( tmp_called_name_2 );
            Py_DECREF( tmp_args_element_name_6 );
            if ( tmp_assign_source_17 == NULL )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 556;
                type_description_1 = "oooooooooooooo";
                goto try_except_handler_4;
            }
            {
                PyObject *old = par_csd;
                assert( old != NULL );
                par_csd = tmp_assign_source_17;
                Py_DECREF( old );
            }

        }
        goto try_end_3;
        // Exception handler code:
        try_except_handler_4:;
        exception_keeper_type_3 = exception_type;
        exception_keeper_value_3 = exception_value;
        exception_keeper_tb_3 = exception_tb;
        exception_keeper_lineno_3 = exception_lineno;
        exception_type = NULL;
        exception_value = NULL;
        exception_tb = NULL;
        exception_lineno = 0;

        // Preserve existing published exception.
        exception_preserved_type_3 = EXC_TYPE(PyThreadState_GET());
        Py_XINCREF( exception_preserved_type_3 );
        exception_preserved_value_3 = EXC_VALUE(PyThreadState_GET());
        Py_XINCREF( exception_preserved_value_3 );
        exception_preserved_tb_3 = (PyTracebackObject *)EXC_TRACEBACK(PyThreadState_GET());
        Py_XINCREF( exception_preserved_tb_3 );

        if ( exception_keeper_tb_3 == NULL )
        {
            exception_keeper_tb_3 = MAKE_TRACEBACK( frame_452a413b3bfaa85657a8807ce8e12b14, exception_keeper_lineno_3 );
        }
        else if ( exception_keeper_lineno_3 != 0 )
        {
            exception_keeper_tb_3 = ADD_TRACEBACK( exception_keeper_tb_3, frame_452a413b3bfaa85657a8807ce8e12b14, exception_keeper_lineno_3 );
        }

        NORMALIZE_EXCEPTION( &exception_keeper_type_3, &exception_keeper_value_3, &exception_keeper_tb_3 );
        PyException_SetTraceback( exception_keeper_value_3, (PyObject *)exception_keeper_tb_3 );
        PUBLISH_EXCEPTION( &exception_keeper_type_3, &exception_keeper_value_3, &exception_keeper_tb_3 );
        // Tried code:
        {
            nuitka_bool tmp_condition_result_2;
            PyObject *tmp_compexpr_left_2;
            PyObject *tmp_compexpr_right_2;
            tmp_compexpr_left_2 = EXC_TYPE(PyThreadState_GET());
            tmp_compexpr_right_2 = PyExc_AttributeError;
            tmp_res = EXCEPTION_MATCH_BOOL( tmp_compexpr_left_2, tmp_compexpr_right_2 );
            if ( tmp_res == -1 )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 557;
                type_description_1 = "oooooooooooooo";
                goto try_except_handler_5;
            }
            tmp_condition_result_2 = ( tmp_res != 0 ) ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
            if ( tmp_condition_result_2 == NUITKA_BOOL_TRUE )
            {
                goto branch_yes_2;
            }
            else
            {
                goto branch_no_2;
            }
            branch_yes_2:;
            {
                nuitka_bool tmp_condition_result_3;
                PyObject *tmp_compexpr_left_3;
                PyObject *tmp_compexpr_right_3;
                PyObject *tmp_subscribed_name_3;
                PyObject *tmp_subscript_name_3;
                CHECK_OBJECT( par_csd );
                tmp_subscribed_name_3 = par_csd;
                tmp_subscript_name_3 = const_slice_none_int_pos_13_none;
                tmp_compexpr_left_3 = LOOKUP_SUBSCRIPT( tmp_subscribed_name_3, tmp_subscript_name_3 );
                if ( tmp_compexpr_left_3 == NULL )
                {
                    assert( ERROR_OCCURRED() );

                    FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                    exception_lineno = 558;
                    type_description_1 = "oooooooooooooo";
                    goto try_except_handler_5;
                }
                tmp_compexpr_right_3 = const_str_digest_53ea3ead692a5b6137ed9eda275bf4a2;
                tmp_res = RICH_COMPARE_BOOL_EQ_OBJECT_OBJECT( tmp_compexpr_left_3, tmp_compexpr_right_3 );
                Py_DECREF( tmp_compexpr_left_3 );
                if ( tmp_res == -1 )
                {
                    assert( ERROR_OCCURRED() );

                    FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                    exception_lineno = 558;
                    type_description_1 = "oooooooooooooo";
                    goto try_except_handler_5;
                }
                tmp_condition_result_3 = ( tmp_res != 0 ) ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
                if ( tmp_condition_result_3 == NUITKA_BOOL_TRUE )
                {
                    goto branch_yes_3;
                }
                else
                {
                    goto branch_no_3;
                }
                branch_yes_3:;
                {
                    PyObject *tmp_assign_source_18;
                    PyObject *tmp_left_name_1;
                    PyObject *tmp_right_name_1;
                    PyObject *tmp_subscribed_name_4;
                    PyObject *tmp_subscript_name_4;
                    tmp_left_name_1 = const_str_plain_SP;
                    CHECK_OBJECT( par_csd );
                    tmp_subscribed_name_4 = par_csd;
                    tmp_subscript_name_4 = const_slice_int_pos_13_none_none;
                    tmp_right_name_1 = LOOKUP_SUBSCRIPT( tmp_subscribed_name_4, tmp_subscript_name_4 );
                    if ( tmp_right_name_1 == NULL )
                    {
                        assert( ERROR_OCCURRED() );

                        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                        exception_lineno = 559;
                        type_description_1 = "oooooooooooooo";
                        goto try_except_handler_5;
                    }
                    tmp_assign_source_18 = BINARY_OPERATION_ADD_UNICODE_OBJECT( tmp_left_name_1, tmp_right_name_1 );
                    Py_DECREF( tmp_right_name_1 );
                    if ( tmp_assign_source_18 == NULL )
                    {
                        assert( ERROR_OCCURRED() );

                        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                        exception_lineno = 559;
                        type_description_1 = "oooooooooooooo";
                        goto try_except_handler_5;
                    }
                    {
                        PyObject *old = par_csd;
                        assert( old != NULL );
                        par_csd = tmp_assign_source_18;
                        Py_DECREF( old );
                    }

                }
                branch_no_3:;
            }
            goto branch_end_2;
            branch_no_2:;
            tmp_result = RERAISE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
            if (unlikely( tmp_result == false ))
            {
                exception_lineno = 555;
            }

            if (exception_tb && exception_tb->tb_frame == &frame_452a413b3bfaa85657a8807ce8e12b14->m_frame) frame_452a413b3bfaa85657a8807ce8e12b14->m_frame.f_lineno = exception_tb->tb_lineno;
            type_description_1 = "oooooooooooooo";
            goto try_except_handler_5;
            branch_end_2:;
        }
        goto try_end_4;
        // Exception handler code:
        try_except_handler_5:;
        exception_keeper_type_4 = exception_type;
        exception_keeper_value_4 = exception_value;
        exception_keeper_tb_4 = exception_tb;
        exception_keeper_lineno_4 = exception_lineno;
        exception_type = NULL;
        exception_value = NULL;
        exception_tb = NULL;
        exception_lineno = 0;

        // Restore previous exception.
        SET_CURRENT_EXCEPTION( exception_preserved_type_3, exception_preserved_value_3, exception_preserved_tb_3 );
        // Re-raise.
        exception_type = exception_keeper_type_4;
        exception_value = exception_keeper_value_4;
        exception_tb = exception_keeper_tb_4;
        exception_lineno = exception_keeper_lineno_4;

        goto frame_exception_exit_1;
        // End of try:
        try_end_4:;
        // Restore previous exception.
        SET_CURRENT_EXCEPTION( exception_preserved_type_3, exception_preserved_value_3, exception_preserved_tb_3 );
        goto try_end_3;
        // exception handler codes exits in all cases
        NUITKA_CANNOT_GET_HERE( platform$$$function_11_win32_ver );
        return NULL;
        // End of try:
        try_end_3:;
        branch_no_1:;
    }
    {
        nuitka_bool tmp_condition_result_4;
        PyObject *tmp_compexpr_left_4;
        PyObject *tmp_compexpr_right_4;
        PyObject *tmp_getattr_target_1;
        PyObject *tmp_getattr_attr_1;
        PyObject *tmp_getattr_default_1;
        CHECK_OBJECT( var_winver );
        tmp_getattr_target_1 = var_winver;
        tmp_getattr_attr_1 = const_str_plain_product_type;
        tmp_getattr_default_1 = Py_None;
        tmp_compexpr_left_4 = BUILTIN_GETATTR( tmp_getattr_target_1, tmp_getattr_attr_1, tmp_getattr_default_1 );
        if ( tmp_compexpr_left_4 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 562;
            type_description_1 = "oooooooooooooo";
            goto frame_exception_exit_1;
        }
        tmp_compexpr_right_4 = const_int_pos_3;
        tmp_res = RICH_COMPARE_BOOL_EQ_OBJECT_OBJECT( tmp_compexpr_left_4, tmp_compexpr_right_4 );
        Py_DECREF( tmp_compexpr_left_4 );
        if ( tmp_res == -1 )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 562;
            type_description_1 = "oooooooooooooo";
            goto frame_exception_exit_1;
        }
        tmp_condition_result_4 = ( tmp_res != 0 ) ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
        if ( tmp_condition_result_4 == NUITKA_BOOL_TRUE )
        {
            goto branch_yes_4;
        }
        else
        {
            goto branch_no_4;
        }
        branch_yes_4:;
        {
            PyObject *tmp_assign_source_19;
            int tmp_or_left_truth_4;
            PyObject *tmp_or_left_value_4;
            PyObject *tmp_or_right_value_4;
            PyObject *tmp_called_instance_4;
            PyObject *tmp_mvar_value_3;
            PyObject *tmp_args_element_name_7;
            PyObject *tmp_tuple_element_4;
            int tmp_or_left_truth_5;
            PyObject *tmp_or_left_value_5;
            PyObject *tmp_or_right_value_5;
            PyObject *tmp_called_instance_5;
            PyObject *tmp_mvar_value_4;
            PyObject *tmp_args_element_name_8;
            PyObject *tmp_tuple_element_5;
            tmp_mvar_value_3 = GET_STRING_DICT_VALUE( moduledict_platform, (Nuitka_StringObject *)const_str_plain__WIN32_SERVER_RELEASES );

            if (unlikely( tmp_mvar_value_3 == NULL ))
            {
                tmp_mvar_value_3 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain__WIN32_SERVER_RELEASES );
            }

            if ( tmp_mvar_value_3 == NULL )
            {

                exception_type = PyExc_NameError;
                Py_INCREF( exception_type );
                exception_value = PyUnicode_FromFormat( "name '%s' is not defined", "_WIN32_SERVER_RELEASES" );
                exception_tb = NULL;
                NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
                CHAIN_EXCEPTION( exception_value );

                exception_lineno = 563;
                type_description_1 = "oooooooooooooo";
                goto frame_exception_exit_1;
            }

            tmp_called_instance_4 = tmp_mvar_value_3;
            CHECK_OBJECT( var_maj );
            tmp_tuple_element_4 = var_maj;
            tmp_args_element_name_7 = PyTuple_New( 2 );
            Py_INCREF( tmp_tuple_element_4 );
            PyTuple_SET_ITEM( tmp_args_element_name_7, 0, tmp_tuple_element_4 );
            CHECK_OBJECT( var_min );
            tmp_tuple_element_4 = var_min;
            Py_INCREF( tmp_tuple_element_4 );
            PyTuple_SET_ITEM( tmp_args_element_name_7, 1, tmp_tuple_element_4 );
            frame_452a413b3bfaa85657a8807ce8e12b14->m_frame.f_lineno = 563;
            {
                PyObject *call_args[] = { tmp_args_element_name_7 };
                tmp_or_left_value_4 = CALL_METHOD_WITH_ARGS1( tmp_called_instance_4, const_str_plain_get, call_args );
            }

            Py_DECREF( tmp_args_element_name_7 );
            if ( tmp_or_left_value_4 == NULL )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 563;
                type_description_1 = "oooooooooooooo";
                goto frame_exception_exit_1;
            }
            tmp_or_left_truth_4 = CHECK_IF_TRUE( tmp_or_left_value_4 );
            if ( tmp_or_left_truth_4 == -1 )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
                Py_DECREF( tmp_or_left_value_4 );

                exception_lineno = 565;
                type_description_1 = "oooooooooooooo";
                goto frame_exception_exit_1;
            }
            if ( tmp_or_left_truth_4 == 1 )
            {
                goto or_left_4;
            }
            else
            {
                goto or_right_4;
            }
            or_right_4:;
            Py_DECREF( tmp_or_left_value_4 );
            tmp_mvar_value_4 = GET_STRING_DICT_VALUE( moduledict_platform, (Nuitka_StringObject *)const_str_plain__WIN32_SERVER_RELEASES );

            if (unlikely( tmp_mvar_value_4 == NULL ))
            {
                tmp_mvar_value_4 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain__WIN32_SERVER_RELEASES );
            }

            if ( tmp_mvar_value_4 == NULL )
            {

                exception_type = PyExc_NameError;
                Py_INCREF( exception_type );
                exception_value = PyUnicode_FromFormat( "name '%s' is not defined", "_WIN32_SERVER_RELEASES" );
                exception_tb = NULL;
                NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
                CHAIN_EXCEPTION( exception_value );

                exception_lineno = 564;
                type_description_1 = "oooooooooooooo";
                goto frame_exception_exit_1;
            }

            tmp_called_instance_5 = tmp_mvar_value_4;
            CHECK_OBJECT( var_maj );
            tmp_tuple_element_5 = var_maj;
            tmp_args_element_name_8 = PyTuple_New( 2 );
            Py_INCREF( tmp_tuple_element_5 );
            PyTuple_SET_ITEM( tmp_args_element_name_8, 0, tmp_tuple_element_5 );
            tmp_tuple_element_5 = Py_None;
            Py_INCREF( tmp_tuple_element_5 );
            PyTuple_SET_ITEM( tmp_args_element_name_8, 1, tmp_tuple_element_5 );
            frame_452a413b3bfaa85657a8807ce8e12b14->m_frame.f_lineno = 564;
            {
                PyObject *call_args[] = { tmp_args_element_name_8 };
                tmp_or_left_value_5 = CALL_METHOD_WITH_ARGS1( tmp_called_instance_5, const_str_plain_get, call_args );
            }

            Py_DECREF( tmp_args_element_name_8 );
            if ( tmp_or_left_value_5 == NULL )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 564;
                type_description_1 = "oooooooooooooo";
                goto frame_exception_exit_1;
            }
            tmp_or_left_truth_5 = CHECK_IF_TRUE( tmp_or_left_value_5 );
            if ( tmp_or_left_truth_5 == -1 )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
                Py_DECREF( tmp_or_left_value_5 );

                exception_lineno = 565;
                type_description_1 = "oooooooooooooo";
                goto frame_exception_exit_1;
            }
            if ( tmp_or_left_truth_5 == 1 )
            {
                goto or_left_5;
            }
            else
            {
                goto or_right_5;
            }
            or_right_5:;
            Py_DECREF( tmp_or_left_value_5 );
            CHECK_OBJECT( par_release );
            tmp_or_right_value_5 = par_release;
            Py_INCREF( tmp_or_right_value_5 );
            tmp_or_right_value_4 = tmp_or_right_value_5;
            goto or_end_5;
            or_left_5:;
            tmp_or_right_value_4 = tmp_or_left_value_5;
            or_end_5:;
            tmp_assign_source_19 = tmp_or_right_value_4;
            goto or_end_4;
            or_left_4:;
            tmp_assign_source_19 = tmp_or_left_value_4;
            or_end_4:;
            {
                PyObject *old = par_release;
                assert( old != NULL );
                par_release = tmp_assign_source_19;
                Py_DECREF( old );
            }

        }
        branch_no_4:;
    }
    {
        PyObject *tmp_assign_source_20;
        tmp_assign_source_20 = Py_None;
        assert( var_key == NULL );
        Py_INCREF( tmp_assign_source_20 );
        var_key = tmp_assign_source_20;
    }
    // Tried code:
    {
        PyObject *tmp_assign_source_21;
        PyObject *tmp_called_name_3;
        PyObject *tmp_args_element_name_9;
        PyObject *tmp_args_element_name_10;
        CHECK_OBJECT( var_OpenKeyEx );
        tmp_called_name_3 = var_OpenKeyEx;
        CHECK_OBJECT( var_HKEY_LOCAL_MACHINE );
        tmp_args_element_name_9 = var_HKEY_LOCAL_MACHINE;
        tmp_args_element_name_10 = const_str_digest_44aad6fbd4eafc90a46253301256e922;
        frame_452a413b3bfaa85657a8807ce8e12b14->m_frame.f_lineno = 569;
        {
            PyObject *call_args[] = { tmp_args_element_name_9, tmp_args_element_name_10 };
            tmp_assign_source_21 = CALL_FUNCTION_WITH_ARGS2( tmp_called_name_3, call_args );
        }

        if ( tmp_assign_source_21 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 569;
            type_description_1 = "oooooooooooooo";
            goto try_except_handler_6;
        }
        {
            PyObject *old = var_key;
            assert( old != NULL );
            var_key = tmp_assign_source_21;
            Py_DECREF( old );
        }

    }
    {
        PyObject *tmp_assign_source_22;
        PyObject *tmp_subscribed_name_5;
        PyObject *tmp_called_name_4;
        PyObject *tmp_args_element_name_11;
        PyObject *tmp_args_element_name_12;
        PyObject *tmp_subscript_name_5;
        CHECK_OBJECT( var_QueryValueEx );
        tmp_called_name_4 = var_QueryValueEx;
        CHECK_OBJECT( var_key );
        tmp_args_element_name_11 = var_key;
        tmp_args_element_name_12 = const_str_plain_CurrentType;
        frame_452a413b3bfaa85657a8807ce8e12b14->m_frame.f_lineno = 571;
        {
            PyObject *call_args[] = { tmp_args_element_name_11, tmp_args_element_name_12 };
            tmp_subscribed_name_5 = CALL_FUNCTION_WITH_ARGS2( tmp_called_name_4, call_args );
        }

        if ( tmp_subscribed_name_5 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 571;
            type_description_1 = "oooooooooooooo";
            goto try_except_handler_6;
        }
        tmp_subscript_name_5 = const_int_0;
        tmp_assign_source_22 = LOOKUP_SUBSCRIPT_CONST( tmp_subscribed_name_5, tmp_subscript_name_5, 0 );
        Py_DECREF( tmp_subscribed_name_5 );
        if ( tmp_assign_source_22 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 571;
            type_description_1 = "oooooooooooooo";
            goto try_except_handler_6;
        }
        {
            PyObject *old = par_ptype;
            assert( old != NULL );
            par_ptype = tmp_assign_source_22;
            Py_DECREF( old );
        }

    }
    goto try_end_5;
    // Exception handler code:
    try_except_handler_6:;
    exception_keeper_type_5 = exception_type;
    exception_keeper_value_5 = exception_value;
    exception_keeper_tb_5 = exception_tb;
    exception_keeper_lineno_5 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    Py_DECREF( exception_keeper_type_5 );
    Py_XDECREF( exception_keeper_value_5 );
    Py_XDECREF( exception_keeper_tb_5 );
    goto try_end_5;
    // exception handler codes exits in all cases
    NUITKA_CANNOT_GET_HERE( platform$$$function_11_win32_ver );
    return NULL;
    // End of try:
    try_end_5:;
    {
        nuitka_bool tmp_condition_result_5;
        int tmp_truth_name_1;
        if ( var_key == NULL )
        {

            exception_type = PyExc_UnboundLocalError;
            Py_INCREF( exception_type );
            exception_value = PyUnicode_FromFormat( "local variable '%s' referenced before assignment", "key" );
            exception_tb = NULL;
            NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
            CHAIN_EXCEPTION( exception_value );

            exception_lineno = 575;
            type_description_1 = "oooooooooooooo";
            goto frame_exception_exit_1;
        }

        tmp_truth_name_1 = CHECK_IF_TRUE( var_key );
        if ( tmp_truth_name_1 == -1 )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 575;
            type_description_1 = "oooooooooooooo";
            goto frame_exception_exit_1;
        }
        tmp_condition_result_5 = tmp_truth_name_1 == 1 ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
        if ( tmp_condition_result_5 == NUITKA_BOOL_TRUE )
        {
            goto branch_yes_5;
        }
        else
        {
            goto branch_no_5;
        }
        branch_yes_5:;
        {
            PyObject *tmp_called_name_5;
            PyObject *tmp_call_result_1;
            PyObject *tmp_args_element_name_13;
            CHECK_OBJECT( var_CloseKey );
            tmp_called_name_5 = var_CloseKey;
            if ( var_key == NULL )
            {

                exception_type = PyExc_UnboundLocalError;
                Py_INCREF( exception_type );
                exception_value = PyUnicode_FromFormat( "local variable '%s' referenced before assignment", "key" );
                exception_tb = NULL;
                NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
                CHAIN_EXCEPTION( exception_value );

                exception_lineno = 576;
                type_description_1 = "oooooooooooooo";
                goto frame_exception_exit_1;
            }

            tmp_args_element_name_13 = var_key;
            frame_452a413b3bfaa85657a8807ce8e12b14->m_frame.f_lineno = 576;
            {
                PyObject *call_args[] = { tmp_args_element_name_13 };
                tmp_call_result_1 = CALL_FUNCTION_WITH_ARGS1( tmp_called_name_5, call_args );
            }

            if ( tmp_call_result_1 == NULL )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 576;
                type_description_1 = "oooooooooooooo";
                goto frame_exception_exit_1;
            }
            Py_DECREF( tmp_call_result_1 );
        }
        branch_no_5:;
    }
    {
        PyObject *tmp_tuple_element_6;
        CHECK_OBJECT( par_release );
        tmp_tuple_element_6 = par_release;
        tmp_return_value = PyTuple_New( 4 );
        Py_INCREF( tmp_tuple_element_6 );
        PyTuple_SET_ITEM( tmp_return_value, 0, tmp_tuple_element_6 );
        CHECK_OBJECT( par_version );
        tmp_tuple_element_6 = par_version;
        Py_INCREF( tmp_tuple_element_6 );
        PyTuple_SET_ITEM( tmp_return_value, 1, tmp_tuple_element_6 );
        if ( par_csd == NULL )
        {
            Py_DECREF( tmp_return_value );
            exception_type = PyExc_UnboundLocalError;
            Py_INCREF( exception_type );
            exception_value = PyUnicode_FromFormat( "local variable '%s' referenced before assignment", "csd" );
            exception_tb = NULL;
            NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
            CHAIN_EXCEPTION( exception_value );

            exception_lineno = 578;
            type_description_1 = "oooooooooooooo";
            goto frame_exception_exit_1;
        }

        tmp_tuple_element_6 = par_csd;
        Py_INCREF( tmp_tuple_element_6 );
        PyTuple_SET_ITEM( tmp_return_value, 2, tmp_tuple_element_6 );
        CHECK_OBJECT( par_ptype );
        tmp_tuple_element_6 = par_ptype;
        Py_INCREF( tmp_tuple_element_6 );
        PyTuple_SET_ITEM( tmp_return_value, 3, tmp_tuple_element_6 );
        goto frame_return_exit_1;
    }

#if 0
    RESTORE_FRAME_EXCEPTION( frame_452a413b3bfaa85657a8807ce8e12b14 );
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto frame_no_exception_1;

    frame_return_exit_1:;
#if 0
    RESTORE_FRAME_EXCEPTION( frame_452a413b3bfaa85657a8807ce8e12b14 );
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto try_return_handler_1;

    frame_exception_exit_1:;

#if 0
    RESTORE_FRAME_EXCEPTION( frame_452a413b3bfaa85657a8807ce8e12b14 );
#endif

    if ( exception_tb == NULL )
    {
        exception_tb = MAKE_TRACEBACK( frame_452a413b3bfaa85657a8807ce8e12b14, exception_lineno );
    }
    else if ( exception_tb->tb_frame != &frame_452a413b3bfaa85657a8807ce8e12b14->m_frame )
    {
        exception_tb = ADD_TRACEBACK( exception_tb, frame_452a413b3bfaa85657a8807ce8e12b14, exception_lineno );
    }

    // Attachs locals to frame if any.
    Nuitka_Frame_AttachLocals(
        (struct Nuitka_FrameObject *)frame_452a413b3bfaa85657a8807ce8e12b14,
        type_description_1,
        par_release,
        par_version,
        par_csd,
        par_ptype,
        var_getwindowsversion,
        var_OpenKeyEx,
        var_QueryValueEx,
        var_CloseKey,
        var_HKEY_LOCAL_MACHINE,
        var_winver,
        var_maj,
        var_min,
        var_build,
        var_key
    );


    // Release cached frame.
    if ( frame_452a413b3bfaa85657a8807ce8e12b14 == cache_frame_452a413b3bfaa85657a8807ce8e12b14 )
    {
        Py_DECREF( frame_452a413b3bfaa85657a8807ce8e12b14 );
    }
    cache_frame_452a413b3bfaa85657a8807ce8e12b14 = NULL;

    assertFrameObject( frame_452a413b3bfaa85657a8807ce8e12b14 );

    // Put the previous frame back on top.
    popFrameStack();

    // Return the error.
    goto try_except_handler_1;

    frame_no_exception_1:;
    // tried codes exits in all cases
    NUITKA_CANNOT_GET_HERE( platform$$$function_11_win32_ver );
    return NULL;
    // Return handler code:
    try_return_handler_1:;
    CHECK_OBJECT( (PyObject *)par_release );
    Py_DECREF( par_release );
    par_release = NULL;

    CHECK_OBJECT( (PyObject *)par_version );
    Py_DECREF( par_version );
    par_version = NULL;

    Py_XDECREF( par_csd );
    par_csd = NULL;

    CHECK_OBJECT( (PyObject *)par_ptype );
    Py_DECREF( par_ptype );
    par_ptype = NULL;

    CHECK_OBJECT( (PyObject *)var_getwindowsversion );
    Py_DECREF( var_getwindowsversion );
    var_getwindowsversion = NULL;

    CHECK_OBJECT( (PyObject *)var_OpenKeyEx );
    Py_DECREF( var_OpenKeyEx );
    var_OpenKeyEx = NULL;

    CHECK_OBJECT( (PyObject *)var_QueryValueEx );
    Py_DECREF( var_QueryValueEx );
    var_QueryValueEx = NULL;

    CHECK_OBJECT( (PyObject *)var_CloseKey );
    Py_DECREF( var_CloseKey );
    var_CloseKey = NULL;

    CHECK_OBJECT( (PyObject *)var_HKEY_LOCAL_MACHINE );
    Py_DECREF( var_HKEY_LOCAL_MACHINE );
    var_HKEY_LOCAL_MACHINE = NULL;

    CHECK_OBJECT( (PyObject *)var_winver );
    Py_DECREF( var_winver );
    var_winver = NULL;

    CHECK_OBJECT( (PyObject *)var_maj );
    Py_DECREF( var_maj );
    var_maj = NULL;

    CHECK_OBJECT( (PyObject *)var_min );
    Py_DECREF( var_min );
    var_min = NULL;

    CHECK_OBJECT( (PyObject *)var_build );
    Py_DECREF( var_build );
    var_build = NULL;

    Py_XDECREF( var_key );
    var_key = NULL;

    goto function_return_exit;
    // Exception handler code:
    try_except_handler_1:;
    exception_keeper_type_6 = exception_type;
    exception_keeper_value_6 = exception_value;
    exception_keeper_tb_6 = exception_tb;
    exception_keeper_lineno_6 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    Py_XDECREF( par_release );
    par_release = NULL;

    CHECK_OBJECT( (PyObject *)par_version );
    Py_DECREF( par_version );
    par_version = NULL;

    Py_XDECREF( par_csd );
    par_csd = NULL;

    Py_XDECREF( par_ptype );
    par_ptype = NULL;

    CHECK_OBJECT( (PyObject *)var_getwindowsversion );
    Py_DECREF( var_getwindowsversion );
    var_getwindowsversion = NULL;

    CHECK_OBJECT( (PyObject *)var_OpenKeyEx );
    Py_DECREF( var_OpenKeyEx );
    var_OpenKeyEx = NULL;

    CHECK_OBJECT( (PyObject *)var_QueryValueEx );
    Py_DECREF( var_QueryValueEx );
    var_QueryValueEx = NULL;

    CHECK_OBJECT( (PyObject *)var_CloseKey );
    Py_DECREF( var_CloseKey );
    var_CloseKey = NULL;

    CHECK_OBJECT( (PyObject *)var_HKEY_LOCAL_MACHINE );
    Py_DECREF( var_HKEY_LOCAL_MACHINE );
    var_HKEY_LOCAL_MACHINE = NULL;

    Py_XDECREF( var_winver );
    var_winver = NULL;

    Py_XDECREF( var_maj );
    var_maj = NULL;

    Py_XDECREF( var_min );
    var_min = NULL;

    Py_XDECREF( var_build );
    var_build = NULL;

    Py_XDECREF( var_key );
    var_key = NULL;

    // Re-raise.
    exception_type = exception_keeper_type_6;
    exception_value = exception_keeper_value_6;
    exception_tb = exception_keeper_tb_6;
    exception_lineno = exception_keeper_lineno_6;

    goto function_exception_exit;
    // End of try:

    // Return statement must have exited already.
    NUITKA_CANNOT_GET_HERE( platform$$$function_11_win32_ver );
    return NULL;

function_exception_exit:
    assert( exception_type );
    RESTORE_ERROR_OCCURRED( exception_type, exception_value, exception_tb );

    return NULL;

function_return_exit:
   // Function cleanup code if any.


   // Actual function exit with return value, making sure we did not make
   // the error status worse despite non-NULL return.
   CHECK_OBJECT( tmp_return_value );
   assert( had_error || !ERROR_OCCURRED() );
   return tmp_return_value;
}


static PyObject *impl_platform$$$function_12__mac_ver_xml( struct Nuitka_FunctionObject const *self, PyObject **python_pars )
{
    // Preserve error status for checks
#ifndef __NUITKA_NO_ASSERT__
    NUITKA_MAY_BE_UNUSED bool had_error = ERROR_OCCURRED();
#endif

    // Local variable declarations.
    PyObject *var_plistlib = NULL;
    PyObject *var_f = NULL;
    PyObject *var_pl = NULL;
    PyObject *var_release = NULL;
    PyObject *var_machine = NULL;
    PyObject *tmp_with_1__enter = NULL;
    PyObject *tmp_with_1__exit = NULL;
    nuitka_bool tmp_with_1__indicator = NUITKA_BOOL_UNASSIGNED;
    PyObject *tmp_with_1__source = NULL;
    struct Nuitka_FrameObject *frame_fa8ebdcd8d683041704b483165d3e972;
    NUITKA_MAY_BE_UNUSED char const *type_description_1 = NULL;
    PyObject *exception_type = NULL;
    PyObject *exception_value = NULL;
    PyTracebackObject *exception_tb = NULL;
    NUITKA_MAY_BE_UNUSED int exception_lineno = 0;
    int tmp_res;
    PyObject *tmp_return_value = NULL;
    PyObject *exception_keeper_type_1;
    PyObject *exception_keeper_value_1;
    PyTracebackObject *exception_keeper_tb_1;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_1;
    PyObject *exception_preserved_type_1;
    PyObject *exception_preserved_value_1;
    PyTracebackObject *exception_preserved_tb_1;
    bool tmp_result;
    PyObject *exception_keeper_type_2;
    PyObject *exception_keeper_value_2;
    PyTracebackObject *exception_keeper_tb_2;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_2;
    PyObject *exception_keeper_type_3;
    PyObject *exception_keeper_value_3;
    PyTracebackObject *exception_keeper_tb_3;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_3;
    PyObject *exception_preserved_type_2;
    PyObject *exception_preserved_value_2;
    PyTracebackObject *exception_preserved_tb_2;
    PyObject *exception_keeper_type_4;
    PyObject *exception_keeper_value_4;
    PyTracebackObject *exception_keeper_tb_4;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_4;
    PyObject *exception_keeper_type_5;
    PyObject *exception_keeper_value_5;
    PyTracebackObject *exception_keeper_tb_5;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_5;
    PyObject *exception_keeper_type_6;
    PyObject *exception_keeper_value_6;
    PyTracebackObject *exception_keeper_tb_6;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_6;
    static struct Nuitka_FrameObject *cache_frame_fa8ebdcd8d683041704b483165d3e972 = NULL;
    PyObject *exception_keeper_type_7;
    PyObject *exception_keeper_value_7;
    PyTracebackObject *exception_keeper_tb_7;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_7;

    // Actual function body.
    // Tried code:
    MAKE_OR_REUSE_FRAME( cache_frame_fa8ebdcd8d683041704b483165d3e972, codeobj_fa8ebdcd8d683041704b483165d3e972, module_platform, sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *) );
    frame_fa8ebdcd8d683041704b483165d3e972 = cache_frame_fa8ebdcd8d683041704b483165d3e972;

    // Push the new frame as the currently active one.
    pushFrameStack( frame_fa8ebdcd8d683041704b483165d3e972 );

    // Mark the frame object as in use, ref count 1 will be up for reuse.
    assert( Py_REFCNT( frame_fa8ebdcd8d683041704b483165d3e972 ) == 2 ); // Frame stack

    // Framed code:
    {
        nuitka_bool tmp_condition_result_1;
        PyObject *tmp_operand_name_1;
        PyObject *tmp_called_instance_1;
        PyObject *tmp_source_name_1;
        PyObject *tmp_mvar_value_1;
        tmp_mvar_value_1 = GET_STRING_DICT_VALUE( moduledict_platform, (Nuitka_StringObject *)const_str_plain_os );

        if (unlikely( tmp_mvar_value_1 == NULL ))
        {
            tmp_mvar_value_1 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_os );
        }

        if ( tmp_mvar_value_1 == NULL )
        {

            exception_type = PyExc_NameError;
            Py_INCREF( exception_type );
            exception_value = PyUnicode_FromFormat( "name '%s' is not defined", "os" );
            exception_tb = NULL;
            NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
            CHAIN_EXCEPTION( exception_value );

            exception_lineno = 583;
            type_description_1 = "NooooNo";
            goto frame_exception_exit_1;
        }

        tmp_source_name_1 = tmp_mvar_value_1;
        tmp_called_instance_1 = LOOKUP_ATTRIBUTE( tmp_source_name_1, const_str_plain_path );
        if ( tmp_called_instance_1 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 583;
            type_description_1 = "NooooNo";
            goto frame_exception_exit_1;
        }
        frame_fa8ebdcd8d683041704b483165d3e972->m_frame.f_lineno = 583;
        tmp_operand_name_1 = CALL_METHOD_WITH_ARGS1( tmp_called_instance_1, const_str_plain_exists, &PyTuple_GET_ITEM( const_tuple_str_digest_2bef6bf41b2e72a3cbc50f9de91800de_tuple, 0 ) );

        Py_DECREF( tmp_called_instance_1 );
        if ( tmp_operand_name_1 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 583;
            type_description_1 = "NooooNo";
            goto frame_exception_exit_1;
        }
        tmp_res = CHECK_IF_TRUE( tmp_operand_name_1 );
        Py_DECREF( tmp_operand_name_1 );
        if ( tmp_res == -1 )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 583;
            type_description_1 = "NooooNo";
            goto frame_exception_exit_1;
        }
        tmp_condition_result_1 = ( tmp_res == 0 ) ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
        if ( tmp_condition_result_1 == NUITKA_BOOL_TRUE )
        {
            goto branch_yes_1;
        }
        else
        {
            goto branch_no_1;
        }
        branch_yes_1:;
        tmp_return_value = Py_None;
        Py_INCREF( tmp_return_value );
        goto frame_return_exit_1;
        branch_no_1:;
    }
    // Tried code:
    {
        PyObject *tmp_assign_source_1;
        PyObject *tmp_name_name_1;
        PyObject *tmp_globals_name_1;
        PyObject *tmp_locals_name_1;
        PyObject *tmp_fromlist_name_1;
        PyObject *tmp_level_name_1;
        tmp_name_name_1 = const_str_plain_plistlib;
        tmp_globals_name_1 = (PyObject *)moduledict_platform;
        tmp_locals_name_1 = Py_None;
        tmp_fromlist_name_1 = Py_None;
        tmp_level_name_1 = const_int_0;
        frame_fa8ebdcd8d683041704b483165d3e972->m_frame.f_lineno = 587;
        tmp_assign_source_1 = IMPORT_MODULE5( tmp_name_name_1, tmp_globals_name_1, tmp_locals_name_1, tmp_fromlist_name_1, tmp_level_name_1 );
        if ( tmp_assign_source_1 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 587;
            type_description_1 = "NooooNo";
            goto try_except_handler_2;
        }
        assert( var_plistlib == NULL );
        var_plistlib = tmp_assign_source_1;
    }
    goto try_end_1;
    // Exception handler code:
    try_except_handler_2:;
    exception_keeper_type_1 = exception_type;
    exception_keeper_value_1 = exception_value;
    exception_keeper_tb_1 = exception_tb;
    exception_keeper_lineno_1 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    // Preserve existing published exception.
    exception_preserved_type_1 = EXC_TYPE(PyThreadState_GET());
    Py_XINCREF( exception_preserved_type_1 );
    exception_preserved_value_1 = EXC_VALUE(PyThreadState_GET());
    Py_XINCREF( exception_preserved_value_1 );
    exception_preserved_tb_1 = (PyTracebackObject *)EXC_TRACEBACK(PyThreadState_GET());
    Py_XINCREF( exception_preserved_tb_1 );

    if ( exception_keeper_tb_1 == NULL )
    {
        exception_keeper_tb_1 = MAKE_TRACEBACK( frame_fa8ebdcd8d683041704b483165d3e972, exception_keeper_lineno_1 );
    }
    else if ( exception_keeper_lineno_1 != 0 )
    {
        exception_keeper_tb_1 = ADD_TRACEBACK( exception_keeper_tb_1, frame_fa8ebdcd8d683041704b483165d3e972, exception_keeper_lineno_1 );
    }

    NORMALIZE_EXCEPTION( &exception_keeper_type_1, &exception_keeper_value_1, &exception_keeper_tb_1 );
    PyException_SetTraceback( exception_keeper_value_1, (PyObject *)exception_keeper_tb_1 );
    PUBLISH_EXCEPTION( &exception_keeper_type_1, &exception_keeper_value_1, &exception_keeper_tb_1 );
    // Tried code:
    {
        nuitka_bool tmp_condition_result_2;
        PyObject *tmp_compexpr_left_1;
        PyObject *tmp_compexpr_right_1;
        tmp_compexpr_left_1 = EXC_TYPE(PyThreadState_GET());
        tmp_compexpr_right_1 = PyExc_ImportError;
        tmp_res = EXCEPTION_MATCH_BOOL( tmp_compexpr_left_1, tmp_compexpr_right_1 );
        if ( tmp_res == -1 )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 588;
            type_description_1 = "NooooNo";
            goto try_except_handler_3;
        }
        tmp_condition_result_2 = ( tmp_res != 0 ) ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
        if ( tmp_condition_result_2 == NUITKA_BOOL_TRUE )
        {
            goto branch_yes_2;
        }
        else
        {
            goto branch_no_2;
        }
        branch_yes_2:;
        tmp_return_value = Py_None;
        Py_INCREF( tmp_return_value );
        goto try_return_handler_3;
        goto branch_end_2;
        branch_no_2:;
        tmp_result = RERAISE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
        if (unlikely( tmp_result == false ))
        {
            exception_lineno = 586;
        }

        if (exception_tb && exception_tb->tb_frame == &frame_fa8ebdcd8d683041704b483165d3e972->m_frame) frame_fa8ebdcd8d683041704b483165d3e972->m_frame.f_lineno = exception_tb->tb_lineno;
        type_description_1 = "NooooNo";
        goto try_except_handler_3;
        branch_end_2:;
    }
    // tried codes exits in all cases
    NUITKA_CANNOT_GET_HERE( platform$$$function_12__mac_ver_xml );
    return NULL;
    // Return handler code:
    try_return_handler_3:;
    // Restore previous exception.
    SET_CURRENT_EXCEPTION( exception_preserved_type_1, exception_preserved_value_1, exception_preserved_tb_1 );
    goto frame_return_exit_1;
    // Exception handler code:
    try_except_handler_3:;
    exception_keeper_type_2 = exception_type;
    exception_keeper_value_2 = exception_value;
    exception_keeper_tb_2 = exception_tb;
    exception_keeper_lineno_2 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    // Restore previous exception.
    SET_CURRENT_EXCEPTION( exception_preserved_type_1, exception_preserved_value_1, exception_preserved_tb_1 );
    // Re-raise.
    exception_type = exception_keeper_type_2;
    exception_value = exception_keeper_value_2;
    exception_tb = exception_keeper_tb_2;
    exception_lineno = exception_keeper_lineno_2;

    goto frame_exception_exit_1;
    // End of try:
    // End of try:
    try_end_1:;
    // Tried code:
    {
        PyObject *tmp_assign_source_2;
        PyObject *tmp_open_filename_1;
        PyObject *tmp_open_mode_1;
        tmp_open_filename_1 = const_str_digest_2bef6bf41b2e72a3cbc50f9de91800de;
        tmp_open_mode_1 = const_str_plain_rb;
        tmp_assign_source_2 = BUILTIN_OPEN( tmp_open_filename_1, tmp_open_mode_1, NULL, NULL, NULL, NULL, NULL, NULL );
        if ( tmp_assign_source_2 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 591;
            type_description_1 = "NooooNo";
            goto try_except_handler_4;
        }
        assert( tmp_with_1__source == NULL );
        tmp_with_1__source = tmp_assign_source_2;
    }
    {
        PyObject *tmp_assign_source_3;
        PyObject *tmp_called_name_1;
        PyObject *tmp_source_name_2;
        CHECK_OBJECT( tmp_with_1__source );
        tmp_source_name_2 = tmp_with_1__source;
        tmp_called_name_1 = LOOKUP_SPECIAL( tmp_source_name_2, const_str_plain___enter__ );
        if ( tmp_called_name_1 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 591;
            type_description_1 = "NooooNo";
            goto try_except_handler_4;
        }
        frame_fa8ebdcd8d683041704b483165d3e972->m_frame.f_lineno = 591;
        tmp_assign_source_3 = CALL_FUNCTION_NO_ARGS( tmp_called_name_1 );
        Py_DECREF( tmp_called_name_1 );
        if ( tmp_assign_source_3 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 591;
            type_description_1 = "NooooNo";
            goto try_except_handler_4;
        }
        assert( tmp_with_1__enter == NULL );
        tmp_with_1__enter = tmp_assign_source_3;
    }
    {
        PyObject *tmp_assign_source_4;
        PyObject *tmp_source_name_3;
        CHECK_OBJECT( tmp_with_1__source );
        tmp_source_name_3 = tmp_with_1__source;
        tmp_assign_source_4 = LOOKUP_SPECIAL( tmp_source_name_3, const_str_plain___exit__ );
        if ( tmp_assign_source_4 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 591;
            type_description_1 = "NooooNo";
            goto try_except_handler_4;
        }
        assert( tmp_with_1__exit == NULL );
        tmp_with_1__exit = tmp_assign_source_4;
    }
    {
        nuitka_bool tmp_assign_source_5;
        tmp_assign_source_5 = NUITKA_BOOL_TRUE;
        tmp_with_1__indicator = tmp_assign_source_5;
    }
    {
        PyObject *tmp_assign_source_6;
        CHECK_OBJECT( tmp_with_1__enter );
        tmp_assign_source_6 = tmp_with_1__enter;
        assert( var_f == NULL );
        Py_INCREF( tmp_assign_source_6 );
        var_f = tmp_assign_source_6;
    }
    // Tried code:
    // Tried code:
    {
        PyObject *tmp_assign_source_7;
        PyObject *tmp_called_instance_2;
        PyObject *tmp_args_element_name_1;
        CHECK_OBJECT( var_plistlib );
        tmp_called_instance_2 = var_plistlib;
        CHECK_OBJECT( var_f );
        tmp_args_element_name_1 = var_f;
        frame_fa8ebdcd8d683041704b483165d3e972->m_frame.f_lineno = 592;
        {
            PyObject *call_args[] = { tmp_args_element_name_1 };
            tmp_assign_source_7 = CALL_METHOD_WITH_ARGS1( tmp_called_instance_2, const_str_plain_load, call_args );
        }

        if ( tmp_assign_source_7 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 592;
            type_description_1 = "NooooNo";
            goto try_except_handler_6;
        }
        assert( var_pl == NULL );
        var_pl = tmp_assign_source_7;
    }
    goto try_end_2;
    // Exception handler code:
    try_except_handler_6:;
    exception_keeper_type_3 = exception_type;
    exception_keeper_value_3 = exception_value;
    exception_keeper_tb_3 = exception_tb;
    exception_keeper_lineno_3 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    // Preserve existing published exception.
    exception_preserved_type_2 = EXC_TYPE(PyThreadState_GET());
    Py_XINCREF( exception_preserved_type_2 );
    exception_preserved_value_2 = EXC_VALUE(PyThreadState_GET());
    Py_XINCREF( exception_preserved_value_2 );
    exception_preserved_tb_2 = (PyTracebackObject *)EXC_TRACEBACK(PyThreadState_GET());
    Py_XINCREF( exception_preserved_tb_2 );

    if ( exception_keeper_tb_3 == NULL )
    {
        exception_keeper_tb_3 = MAKE_TRACEBACK( frame_fa8ebdcd8d683041704b483165d3e972, exception_keeper_lineno_3 );
    }
    else if ( exception_keeper_lineno_3 != 0 )
    {
        exception_keeper_tb_3 = ADD_TRACEBACK( exception_keeper_tb_3, frame_fa8ebdcd8d683041704b483165d3e972, exception_keeper_lineno_3 );
    }

    NORMALIZE_EXCEPTION( &exception_keeper_type_3, &exception_keeper_value_3, &exception_keeper_tb_3 );
    PyException_SetTraceback( exception_keeper_value_3, (PyObject *)exception_keeper_tb_3 );
    PUBLISH_EXCEPTION( &exception_keeper_type_3, &exception_keeper_value_3, &exception_keeper_tb_3 );
    // Tried code:
    {
        nuitka_bool tmp_condition_result_3;
        PyObject *tmp_compexpr_left_2;
        PyObject *tmp_compexpr_right_2;
        tmp_compexpr_left_2 = EXC_TYPE(PyThreadState_GET());
        tmp_compexpr_right_2 = PyExc_BaseException;
        tmp_res = EXCEPTION_MATCH_BOOL( tmp_compexpr_left_2, tmp_compexpr_right_2 );
        if ( tmp_res == -1 )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 591;
            type_description_1 = "NooooNo";
            goto try_except_handler_7;
        }
        tmp_condition_result_3 = ( tmp_res != 0 ) ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
        if ( tmp_condition_result_3 == NUITKA_BOOL_TRUE )
        {
            goto branch_yes_3;
        }
        else
        {
            goto branch_no_3;
        }
        branch_yes_3:;
        {
            nuitka_bool tmp_assign_source_8;
            tmp_assign_source_8 = NUITKA_BOOL_FALSE;
            tmp_with_1__indicator = tmp_assign_source_8;
        }
        {
            nuitka_bool tmp_condition_result_4;
            PyObject *tmp_operand_name_2;
            PyObject *tmp_called_name_2;
            PyObject *tmp_args_element_name_2;
            PyObject *tmp_args_element_name_3;
            PyObject *tmp_args_element_name_4;
            CHECK_OBJECT( tmp_with_1__exit );
            tmp_called_name_2 = tmp_with_1__exit;
            tmp_args_element_name_2 = EXC_TYPE(PyThreadState_GET());
            tmp_args_element_name_3 = EXC_VALUE(PyThreadState_GET());
            tmp_args_element_name_4 = EXC_TRACEBACK(PyThreadState_GET());
            frame_fa8ebdcd8d683041704b483165d3e972->m_frame.f_lineno = 591;
            {
                PyObject *call_args[] = { tmp_args_element_name_2, tmp_args_element_name_3, tmp_args_element_name_4 };
                tmp_operand_name_2 = CALL_FUNCTION_WITH_ARGS3( tmp_called_name_2, call_args );
            }

            if ( tmp_operand_name_2 == NULL )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 591;
                type_description_1 = "NooooNo";
                goto try_except_handler_7;
            }
            tmp_res = CHECK_IF_TRUE( tmp_operand_name_2 );
            Py_DECREF( tmp_operand_name_2 );
            if ( tmp_res == -1 )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 591;
                type_description_1 = "NooooNo";
                goto try_except_handler_7;
            }
            tmp_condition_result_4 = ( tmp_res == 0 ) ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
            if ( tmp_condition_result_4 == NUITKA_BOOL_TRUE )
            {
                goto branch_yes_4;
            }
            else
            {
                goto branch_no_4;
            }
            branch_yes_4:;
            tmp_result = RERAISE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
            if (unlikely( tmp_result == false ))
            {
                exception_lineno = 591;
            }

            if (exception_tb && exception_tb->tb_frame == &frame_fa8ebdcd8d683041704b483165d3e972->m_frame) frame_fa8ebdcd8d683041704b483165d3e972->m_frame.f_lineno = exception_tb->tb_lineno;
            type_description_1 = "NooooNo";
            goto try_except_handler_7;
            branch_no_4:;
        }
        goto branch_end_3;
        branch_no_3:;
        tmp_result = RERAISE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
        if (unlikely( tmp_result == false ))
        {
            exception_lineno = 591;
        }

        if (exception_tb && exception_tb->tb_frame == &frame_fa8ebdcd8d683041704b483165d3e972->m_frame) frame_fa8ebdcd8d683041704b483165d3e972->m_frame.f_lineno = exception_tb->tb_lineno;
        type_description_1 = "NooooNo";
        goto try_except_handler_7;
        branch_end_3:;
    }
    goto try_end_3;
    // Exception handler code:
    try_except_handler_7:;
    exception_keeper_type_4 = exception_type;
    exception_keeper_value_4 = exception_value;
    exception_keeper_tb_4 = exception_tb;
    exception_keeper_lineno_4 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    // Restore previous exception.
    SET_CURRENT_EXCEPTION( exception_preserved_type_2, exception_preserved_value_2, exception_preserved_tb_2 );
    // Re-raise.
    exception_type = exception_keeper_type_4;
    exception_value = exception_keeper_value_4;
    exception_tb = exception_keeper_tb_4;
    exception_lineno = exception_keeper_lineno_4;

    goto try_except_handler_5;
    // End of try:
    try_end_3:;
    // Restore previous exception.
    SET_CURRENT_EXCEPTION( exception_preserved_type_2, exception_preserved_value_2, exception_preserved_tb_2 );
    goto try_end_2;
    // exception handler codes exits in all cases
    NUITKA_CANNOT_GET_HERE( platform$$$function_12__mac_ver_xml );
    return NULL;
    // End of try:
    try_end_2:;
    goto try_end_4;
    // Exception handler code:
    try_except_handler_5:;
    exception_keeper_type_5 = exception_type;
    exception_keeper_value_5 = exception_value;
    exception_keeper_tb_5 = exception_tb;
    exception_keeper_lineno_5 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    {
        nuitka_bool tmp_condition_result_5;
        nuitka_bool tmp_compexpr_left_3;
        nuitka_bool tmp_compexpr_right_3;
        assert( tmp_with_1__indicator != NUITKA_BOOL_UNASSIGNED);
        tmp_compexpr_left_3 = tmp_with_1__indicator;
        tmp_compexpr_right_3 = NUITKA_BOOL_TRUE;
        tmp_condition_result_5 = ( tmp_compexpr_left_3 == tmp_compexpr_right_3 ) ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
        if ( tmp_condition_result_5 == NUITKA_BOOL_TRUE )
        {
            goto branch_yes_5;
        }
        else
        {
            goto branch_no_5;
        }
        branch_yes_5:;
        {
            PyObject *tmp_called_name_3;
            PyObject *tmp_call_result_1;
            CHECK_OBJECT( tmp_with_1__exit );
            tmp_called_name_3 = tmp_with_1__exit;
            frame_fa8ebdcd8d683041704b483165d3e972->m_frame.f_lineno = 591;
            tmp_call_result_1 = CALL_FUNCTION_WITH_ARGS3( tmp_called_name_3, &PyTuple_GET_ITEM( const_tuple_none_none_none_tuple, 0 ) );

            if ( tmp_call_result_1 == NULL )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );

                Py_DECREF( exception_keeper_type_5 );
                Py_XDECREF( exception_keeper_value_5 );
                Py_XDECREF( exception_keeper_tb_5 );

                exception_lineno = 591;
                type_description_1 = "NooooNo";
                goto try_except_handler_4;
            }
            Py_DECREF( tmp_call_result_1 );
        }
        branch_no_5:;
    }
    // Re-raise.
    exception_type = exception_keeper_type_5;
    exception_value = exception_keeper_value_5;
    exception_tb = exception_keeper_tb_5;
    exception_lineno = exception_keeper_lineno_5;

    goto try_except_handler_4;
    // End of try:
    try_end_4:;
    {
        nuitka_bool tmp_condition_result_6;
        nuitka_bool tmp_compexpr_left_4;
        nuitka_bool tmp_compexpr_right_4;
        assert( tmp_with_1__indicator != NUITKA_BOOL_UNASSIGNED);
        tmp_compexpr_left_4 = tmp_with_1__indicator;
        tmp_compexpr_right_4 = NUITKA_BOOL_TRUE;
        tmp_condition_result_6 = ( tmp_compexpr_left_4 == tmp_compexpr_right_4 ) ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
        if ( tmp_condition_result_6 == NUITKA_BOOL_TRUE )
        {
            goto branch_yes_6;
        }
        else
        {
            goto branch_no_6;
        }
        branch_yes_6:;
        {
            PyObject *tmp_called_name_4;
            PyObject *tmp_call_result_2;
            CHECK_OBJECT( tmp_with_1__exit );
            tmp_called_name_4 = tmp_with_1__exit;
            frame_fa8ebdcd8d683041704b483165d3e972->m_frame.f_lineno = 591;
            tmp_call_result_2 = CALL_FUNCTION_WITH_ARGS3( tmp_called_name_4, &PyTuple_GET_ITEM( const_tuple_none_none_none_tuple, 0 ) );

            if ( tmp_call_result_2 == NULL )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 591;
                type_description_1 = "NooooNo";
                goto try_except_handler_4;
            }
            Py_DECREF( tmp_call_result_2 );
        }
        branch_no_6:;
    }
    goto try_end_5;
    // Exception handler code:
    try_except_handler_4:;
    exception_keeper_type_6 = exception_type;
    exception_keeper_value_6 = exception_value;
    exception_keeper_tb_6 = exception_tb;
    exception_keeper_lineno_6 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    Py_XDECREF( tmp_with_1__source );
    tmp_with_1__source = NULL;

    Py_XDECREF( tmp_with_1__enter );
    tmp_with_1__enter = NULL;

    Py_XDECREF( tmp_with_1__exit );
    tmp_with_1__exit = NULL;

    // Re-raise.
    exception_type = exception_keeper_type_6;
    exception_value = exception_keeper_value_6;
    exception_tb = exception_keeper_tb_6;
    exception_lineno = exception_keeper_lineno_6;

    goto frame_exception_exit_1;
    // End of try:
    try_end_5:;
    CHECK_OBJECT( (PyObject *)tmp_with_1__source );
    Py_DECREF( tmp_with_1__source );
    tmp_with_1__source = NULL;

    CHECK_OBJECT( (PyObject *)tmp_with_1__enter );
    Py_DECREF( tmp_with_1__enter );
    tmp_with_1__enter = NULL;

    CHECK_OBJECT( (PyObject *)tmp_with_1__exit );
    Py_DECREF( tmp_with_1__exit );
    tmp_with_1__exit = NULL;

    {
        PyObject *tmp_assign_source_9;
        PyObject *tmp_subscribed_name_1;
        PyObject *tmp_subscript_name_1;
        if ( var_pl == NULL )
        {

            exception_type = PyExc_UnboundLocalError;
            Py_INCREF( exception_type );
            exception_value = PyUnicode_FromFormat( "local variable '%s' referenced before assignment", "pl" );
            exception_tb = NULL;
            NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
            CHAIN_EXCEPTION( exception_value );

            exception_lineno = 593;
            type_description_1 = "NooooNo";
            goto frame_exception_exit_1;
        }

        tmp_subscribed_name_1 = var_pl;
        tmp_subscript_name_1 = const_str_plain_ProductVersion;
        tmp_assign_source_9 = LOOKUP_SUBSCRIPT( tmp_subscribed_name_1, tmp_subscript_name_1 );
        if ( tmp_assign_source_9 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 593;
            type_description_1 = "NooooNo";
            goto frame_exception_exit_1;
        }
        assert( var_release == NULL );
        var_release = tmp_assign_source_9;
    }
    {
        PyObject *tmp_assign_source_10;
        PyObject *tmp_source_name_4;
        PyObject *tmp_called_instance_3;
        PyObject *tmp_mvar_value_2;
        tmp_mvar_value_2 = GET_STRING_DICT_VALUE( moduledict_platform, (Nuitka_StringObject *)const_str_plain_os );

        if (unlikely( tmp_mvar_value_2 == NULL ))
        {
            tmp_mvar_value_2 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_os );
        }

        if ( tmp_mvar_value_2 == NULL )
        {

            exception_type = PyExc_NameError;
            Py_INCREF( exception_type );
            exception_value = PyUnicode_FromFormat( "name '%s' is not defined", "os" );
            exception_tb = NULL;
            NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
            CHAIN_EXCEPTION( exception_value );

            exception_lineno = 595;
            type_description_1 = "NooooNo";
            goto frame_exception_exit_1;
        }

        tmp_called_instance_3 = tmp_mvar_value_2;
        frame_fa8ebdcd8d683041704b483165d3e972->m_frame.f_lineno = 595;
        tmp_source_name_4 = CALL_METHOD_NO_ARGS( tmp_called_instance_3, const_str_plain_uname );
        if ( tmp_source_name_4 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 595;
            type_description_1 = "NooooNo";
            goto frame_exception_exit_1;
        }
        tmp_assign_source_10 = LOOKUP_ATTRIBUTE( tmp_source_name_4, const_str_plain_machine );
        Py_DECREF( tmp_source_name_4 );
        if ( tmp_assign_source_10 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 595;
            type_description_1 = "NooooNo";
            goto frame_exception_exit_1;
        }
        assert( var_machine == NULL );
        var_machine = tmp_assign_source_10;
    }
    {
        nuitka_bool tmp_condition_result_7;
        PyObject *tmp_compexpr_left_5;
        PyObject *tmp_compexpr_right_5;
        CHECK_OBJECT( var_machine );
        tmp_compexpr_left_5 = var_machine;
        tmp_compexpr_right_5 = const_tuple_str_plain_ppc_str_digest_e7ea514a030f655b80ff45bde200e99c_tuple;
        tmp_res = PySequence_Contains( tmp_compexpr_right_5, tmp_compexpr_left_5 );
        if ( tmp_res == -1 )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 596;
            type_description_1 = "NooooNo";
            goto frame_exception_exit_1;
        }
        tmp_condition_result_7 = ( tmp_res == 1 ) ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
        if ( tmp_condition_result_7 == NUITKA_BOOL_TRUE )
        {
            goto branch_yes_7;
        }
        else
        {
            goto branch_no_7;
        }
        branch_yes_7:;
        {
            PyObject *tmp_assign_source_11;
            tmp_assign_source_11 = const_str_plain_PowerPC;
            {
                PyObject *old = var_machine;
                assert( old != NULL );
                var_machine = tmp_assign_source_11;
                Py_INCREF( var_machine );
                Py_DECREF( old );
            }

        }
        branch_no_7:;
    }

#if 0
    RESTORE_FRAME_EXCEPTION( frame_fa8ebdcd8d683041704b483165d3e972 );
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto frame_no_exception_1;

    frame_return_exit_1:;
#if 0
    RESTORE_FRAME_EXCEPTION( frame_fa8ebdcd8d683041704b483165d3e972 );
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto try_return_handler_1;

    frame_exception_exit_1:;

#if 0
    RESTORE_FRAME_EXCEPTION( frame_fa8ebdcd8d683041704b483165d3e972 );
#endif

    if ( exception_tb == NULL )
    {
        exception_tb = MAKE_TRACEBACK( frame_fa8ebdcd8d683041704b483165d3e972, exception_lineno );
    }
    else if ( exception_tb->tb_frame != &frame_fa8ebdcd8d683041704b483165d3e972->m_frame )
    {
        exception_tb = ADD_TRACEBACK( exception_tb, frame_fa8ebdcd8d683041704b483165d3e972, exception_lineno );
    }

    // Attachs locals to frame if any.
    Nuitka_Frame_AttachLocals(
        (struct Nuitka_FrameObject *)frame_fa8ebdcd8d683041704b483165d3e972,
        type_description_1,
        NULL,
        var_plistlib,
        var_f,
        var_pl,
        var_release,
        NULL,
        var_machine
    );


    // Release cached frame.
    if ( frame_fa8ebdcd8d683041704b483165d3e972 == cache_frame_fa8ebdcd8d683041704b483165d3e972 )
    {
        Py_DECREF( frame_fa8ebdcd8d683041704b483165d3e972 );
    }
    cache_frame_fa8ebdcd8d683041704b483165d3e972 = NULL;

    assertFrameObject( frame_fa8ebdcd8d683041704b483165d3e972 );

    // Put the previous frame back on top.
    popFrameStack();

    // Return the error.
    goto try_except_handler_1;

    frame_no_exception_1:;
    {
        PyObject *tmp_tuple_element_1;
        CHECK_OBJECT( var_release );
        tmp_tuple_element_1 = var_release;
        tmp_return_value = PyTuple_New( 3 );
        Py_INCREF( tmp_tuple_element_1 );
        PyTuple_SET_ITEM( tmp_return_value, 0, tmp_tuple_element_1 );
        tmp_tuple_element_1 = const_tuple_str_empty_str_empty_str_empty_tuple;
        Py_INCREF( tmp_tuple_element_1 );
        PyTuple_SET_ITEM( tmp_return_value, 1, tmp_tuple_element_1 );
        CHECK_OBJECT( var_machine );
        tmp_tuple_element_1 = var_machine;
        Py_INCREF( tmp_tuple_element_1 );
        PyTuple_SET_ITEM( tmp_return_value, 2, tmp_tuple_element_1 );
        goto try_return_handler_1;
    }
    // tried codes exits in all cases
    NUITKA_CANNOT_GET_HERE( platform$$$function_12__mac_ver_xml );
    return NULL;
    // Return handler code:
    try_return_handler_1:;
    Py_XDECREF( var_plistlib );
    var_plistlib = NULL;

    Py_XDECREF( var_f );
    var_f = NULL;

    Py_XDECREF( var_pl );
    var_pl = NULL;

    Py_XDECREF( var_release );
    var_release = NULL;

    Py_XDECREF( var_machine );
    var_machine = NULL;

    goto function_return_exit;
    // Exception handler code:
    try_except_handler_1:;
    exception_keeper_type_7 = exception_type;
    exception_keeper_value_7 = exception_value;
    exception_keeper_tb_7 = exception_tb;
    exception_keeper_lineno_7 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    Py_XDECREF( var_plistlib );
    var_plistlib = NULL;

    Py_XDECREF( var_f );
    var_f = NULL;

    Py_XDECREF( var_pl );
    var_pl = NULL;

    Py_XDECREF( var_release );
    var_release = NULL;

    Py_XDECREF( var_machine );
    var_machine = NULL;

    // Re-raise.
    exception_type = exception_keeper_type_7;
    exception_value = exception_keeper_value_7;
    exception_tb = exception_keeper_tb_7;
    exception_lineno = exception_keeper_lineno_7;

    goto function_exception_exit;
    // End of try:

    // Return statement must have exited already.
    NUITKA_CANNOT_GET_HERE( platform$$$function_12__mac_ver_xml );
    return NULL;

function_exception_exit:
    assert( exception_type );
    RESTORE_ERROR_OCCURRED( exception_type, exception_value, exception_tb );

    return NULL;

function_return_exit:
   // Function cleanup code if any.


   // Actual function exit with return value, making sure we did not make
   // the error status worse despite non-NULL return.
   CHECK_OBJECT( tmp_return_value );
   assert( had_error || !ERROR_OCCURRED() );
   return tmp_return_value;
}


static PyObject *impl_platform$$$function_13_mac_ver( struct Nuitka_FunctionObject const *self, PyObject **python_pars )
{
    // Preserve error status for checks
#ifndef __NUITKA_NO_ASSERT__
    NUITKA_MAY_BE_UNUSED bool had_error = ERROR_OCCURRED();
#endif

    // Local variable declarations.
    PyObject *par_release = python_pars[ 0 ];
    PyObject *par_versioninfo = python_pars[ 1 ];
    PyObject *par_machine = python_pars[ 2 ];
    PyObject *var_info = NULL;
    struct Nuitka_FrameObject *frame_7d471acc39100affe4f828286b22c09d;
    NUITKA_MAY_BE_UNUSED char const *type_description_1 = NULL;
    PyObject *exception_type = NULL;
    PyObject *exception_value = NULL;
    PyTracebackObject *exception_tb = NULL;
    NUITKA_MAY_BE_UNUSED int exception_lineno = 0;
    static struct Nuitka_FrameObject *cache_frame_7d471acc39100affe4f828286b22c09d = NULL;
    PyObject *tmp_return_value = NULL;
    PyObject *exception_keeper_type_1;
    PyObject *exception_keeper_value_1;
    PyTracebackObject *exception_keeper_tb_1;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_1;

    // Actual function body.
    // Tried code:
    MAKE_OR_REUSE_FRAME( cache_frame_7d471acc39100affe4f828286b22c09d, codeobj_7d471acc39100affe4f828286b22c09d, module_platform, sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *) );
    frame_7d471acc39100affe4f828286b22c09d = cache_frame_7d471acc39100affe4f828286b22c09d;

    // Push the new frame as the currently active one.
    pushFrameStack( frame_7d471acc39100affe4f828286b22c09d );

    // Mark the frame object as in use, ref count 1 will be up for reuse.
    assert( Py_REFCNT( frame_7d471acc39100affe4f828286b22c09d ) == 2 ); // Frame stack

    // Framed code:
    {
        PyObject *tmp_assign_source_1;
        PyObject *tmp_called_name_1;
        PyObject *tmp_mvar_value_1;
        tmp_mvar_value_1 = GET_STRING_DICT_VALUE( moduledict_platform, (Nuitka_StringObject *)const_str_plain__mac_ver_xml );

        if (unlikely( tmp_mvar_value_1 == NULL ))
        {
            tmp_mvar_value_1 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain__mac_ver_xml );
        }

        if ( tmp_mvar_value_1 == NULL )
        {

            exception_type = PyExc_NameError;
            Py_INCREF( exception_type );
            exception_value = PyUnicode_FromFormat( "name '%s' is not defined", "_mac_ver_xml" );
            exception_tb = NULL;
            NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
            CHAIN_EXCEPTION( exception_value );

            exception_lineno = 615;
            type_description_1 = "oooo";
            goto frame_exception_exit_1;
        }

        tmp_called_name_1 = tmp_mvar_value_1;
        frame_7d471acc39100affe4f828286b22c09d->m_frame.f_lineno = 615;
        tmp_assign_source_1 = CALL_FUNCTION_NO_ARGS( tmp_called_name_1 );
        if ( tmp_assign_source_1 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 615;
            type_description_1 = "oooo";
            goto frame_exception_exit_1;
        }
        assert( var_info == NULL );
        var_info = tmp_assign_source_1;
    }

#if 0
    RESTORE_FRAME_EXCEPTION( frame_7d471acc39100affe4f828286b22c09d );
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto frame_no_exception_1;

    frame_exception_exit_1:;

#if 0
    RESTORE_FRAME_EXCEPTION( frame_7d471acc39100affe4f828286b22c09d );
#endif

    if ( exception_tb == NULL )
    {
        exception_tb = MAKE_TRACEBACK( frame_7d471acc39100affe4f828286b22c09d, exception_lineno );
    }
    else if ( exception_tb->tb_frame != &frame_7d471acc39100affe4f828286b22c09d->m_frame )
    {
        exception_tb = ADD_TRACEBACK( exception_tb, frame_7d471acc39100affe4f828286b22c09d, exception_lineno );
    }

    // Attachs locals to frame if any.
    Nuitka_Frame_AttachLocals(
        (struct Nuitka_FrameObject *)frame_7d471acc39100affe4f828286b22c09d,
        type_description_1,
        par_release,
        par_versioninfo,
        par_machine,
        var_info
    );


    // Release cached frame.
    if ( frame_7d471acc39100affe4f828286b22c09d == cache_frame_7d471acc39100affe4f828286b22c09d )
    {
        Py_DECREF( frame_7d471acc39100affe4f828286b22c09d );
    }
    cache_frame_7d471acc39100affe4f828286b22c09d = NULL;

    assertFrameObject( frame_7d471acc39100affe4f828286b22c09d );

    // Put the previous frame back on top.
    popFrameStack();

    // Return the error.
    goto try_except_handler_1;

    frame_no_exception_1:;
    {
        nuitka_bool tmp_condition_result_1;
        PyObject *tmp_compexpr_left_1;
        PyObject *tmp_compexpr_right_1;
        CHECK_OBJECT( var_info );
        tmp_compexpr_left_1 = var_info;
        tmp_compexpr_right_1 = Py_None;
        tmp_condition_result_1 = ( tmp_compexpr_left_1 != tmp_compexpr_right_1 ) ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
        if ( tmp_condition_result_1 == NUITKA_BOOL_TRUE )
        {
            goto branch_yes_1;
        }
        else
        {
            goto branch_no_1;
        }
        branch_yes_1:;
        CHECK_OBJECT( var_info );
        tmp_return_value = var_info;
        Py_INCREF( tmp_return_value );
        goto try_return_handler_1;
        branch_no_1:;
    }
    {
        PyObject *tmp_tuple_element_1;
        CHECK_OBJECT( par_release );
        tmp_tuple_element_1 = par_release;
        tmp_return_value = PyTuple_New( 3 );
        Py_INCREF( tmp_tuple_element_1 );
        PyTuple_SET_ITEM( tmp_return_value, 0, tmp_tuple_element_1 );
        CHECK_OBJECT( par_versioninfo );
        tmp_tuple_element_1 = par_versioninfo;
        Py_INCREF( tmp_tuple_element_1 );
        PyTuple_SET_ITEM( tmp_return_value, 1, tmp_tuple_element_1 );
        CHECK_OBJECT( par_machine );
        tmp_tuple_element_1 = par_machine;
        Py_INCREF( tmp_tuple_element_1 );
        PyTuple_SET_ITEM( tmp_return_value, 2, tmp_tuple_element_1 );
        goto try_return_handler_1;
    }
    // tried codes exits in all cases
    NUITKA_CANNOT_GET_HERE( platform$$$function_13_mac_ver );
    return NULL;
    // Return handler code:
    try_return_handler_1:;
    CHECK_OBJECT( (PyObject *)par_release );
    Py_DECREF( par_release );
    par_release = NULL;

    CHECK_OBJECT( (PyObject *)par_versioninfo );
    Py_DECREF( par_versioninfo );
    par_versioninfo = NULL;

    CHECK_OBJECT( (PyObject *)par_machine );
    Py_DECREF( par_machine );
    par_machine = NULL;

    CHECK_OBJECT( (PyObject *)var_info );
    Py_DECREF( var_info );
    var_info = NULL;

    goto function_return_exit;
    // Exception handler code:
    try_except_handler_1:;
    exception_keeper_type_1 = exception_type;
    exception_keeper_value_1 = exception_value;
    exception_keeper_tb_1 = exception_tb;
    exception_keeper_lineno_1 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    CHECK_OBJECT( (PyObject *)par_release );
    Py_DECREF( par_release );
    par_release = NULL;

    CHECK_OBJECT( (PyObject *)par_versioninfo );
    Py_DECREF( par_versioninfo );
    par_versioninfo = NULL;

    CHECK_OBJECT( (PyObject *)par_machine );
    Py_DECREF( par_machine );
    par_machine = NULL;

    Py_XDECREF( var_info );
    var_info = NULL;

    // Re-raise.
    exception_type = exception_keeper_type_1;
    exception_value = exception_keeper_value_1;
    exception_tb = exception_keeper_tb_1;
    exception_lineno = exception_keeper_lineno_1;

    goto function_exception_exit;
    // End of try:

    // Return statement must have exited already.
    NUITKA_CANNOT_GET_HERE( platform$$$function_13_mac_ver );
    return NULL;

function_exception_exit:
    assert( exception_type );
    RESTORE_ERROR_OCCURRED( exception_type, exception_value, exception_tb );

    return NULL;

function_return_exit:
   // Function cleanup code if any.


   // Actual function exit with return value, making sure we did not make
   // the error status worse despite non-NULL return.
   CHECK_OBJECT( tmp_return_value );
   assert( had_error || !ERROR_OCCURRED() );
   return tmp_return_value;
}


static PyObject *impl_platform$$$function_14__java_getprop( struct Nuitka_FunctionObject const *self, PyObject **python_pars )
{
    // Preserve error status for checks
#ifndef __NUITKA_NO_ASSERT__
    NUITKA_MAY_BE_UNUSED bool had_error = ERROR_OCCURRED();
#endif

    // Local variable declarations.
    PyObject *par_name = python_pars[ 0 ];
    PyObject *par_default = python_pars[ 1 ];
    PyObject *var_System = NULL;
    PyObject *var_value = NULL;
    struct Nuitka_FrameObject *frame_85c1cc62a55d538c6401240bccea7c6c;
    NUITKA_MAY_BE_UNUSED char const *type_description_1 = NULL;
    PyObject *exception_type = NULL;
    PyObject *exception_value = NULL;
    PyTracebackObject *exception_tb = NULL;
    NUITKA_MAY_BE_UNUSED int exception_lineno = 0;
    PyObject *exception_keeper_type_1;
    PyObject *exception_keeper_value_1;
    PyTracebackObject *exception_keeper_tb_1;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_1;
    PyObject *exception_preserved_type_1;
    PyObject *exception_preserved_value_1;
    PyTracebackObject *exception_preserved_tb_1;
    int tmp_res;
    PyObject *tmp_return_value = NULL;
    bool tmp_result;
    PyObject *exception_keeper_type_2;
    PyObject *exception_keeper_value_2;
    PyTracebackObject *exception_keeper_tb_2;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_2;
    static struct Nuitka_FrameObject *cache_frame_85c1cc62a55d538c6401240bccea7c6c = NULL;
    PyObject *exception_keeper_type_3;
    PyObject *exception_keeper_value_3;
    PyTracebackObject *exception_keeper_tb_3;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_3;

    // Actual function body.
    // Tried code:
    MAKE_OR_REUSE_FRAME( cache_frame_85c1cc62a55d538c6401240bccea7c6c, codeobj_85c1cc62a55d538c6401240bccea7c6c, module_platform, sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *) );
    frame_85c1cc62a55d538c6401240bccea7c6c = cache_frame_85c1cc62a55d538c6401240bccea7c6c;

    // Push the new frame as the currently active one.
    pushFrameStack( frame_85c1cc62a55d538c6401240bccea7c6c );

    // Mark the frame object as in use, ref count 1 will be up for reuse.
    assert( Py_REFCNT( frame_85c1cc62a55d538c6401240bccea7c6c ) == 2 ); // Frame stack

    // Framed code:
    {
        PyObject *tmp_assign_source_1;
        PyObject *tmp_import_name_from_1;
        PyObject *tmp_name_name_1;
        PyObject *tmp_globals_name_1;
        PyObject *tmp_locals_name_1;
        PyObject *tmp_fromlist_name_1;
        PyObject *tmp_level_name_1;
        tmp_name_name_1 = const_str_digest_91ed6263fdf2a019af9e0f2fc59fdaf4;
        tmp_globals_name_1 = (PyObject *)moduledict_platform;
        tmp_locals_name_1 = Py_None;
        tmp_fromlist_name_1 = const_tuple_str_plain_System_tuple;
        tmp_level_name_1 = const_int_0;
        frame_85c1cc62a55d538c6401240bccea7c6c->m_frame.f_lineno = 624;
        tmp_import_name_from_1 = IMPORT_MODULE5( tmp_name_name_1, tmp_globals_name_1, tmp_locals_name_1, tmp_fromlist_name_1, tmp_level_name_1 );
        if ( tmp_import_name_from_1 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 624;
            type_description_1 = "oooo";
            goto frame_exception_exit_1;
        }
        tmp_assign_source_1 = IMPORT_NAME( tmp_import_name_from_1, const_str_plain_System );
        Py_DECREF( tmp_import_name_from_1 );
        if ( tmp_assign_source_1 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 624;
            type_description_1 = "oooo";
            goto frame_exception_exit_1;
        }
        assert( var_System == NULL );
        var_System = tmp_assign_source_1;
    }
    // Tried code:
    {
        PyObject *tmp_assign_source_2;
        PyObject *tmp_called_instance_1;
        PyObject *tmp_args_element_name_1;
        CHECK_OBJECT( var_System );
        tmp_called_instance_1 = var_System;
        CHECK_OBJECT( par_name );
        tmp_args_element_name_1 = par_name;
        frame_85c1cc62a55d538c6401240bccea7c6c->m_frame.f_lineno = 626;
        {
            PyObject *call_args[] = { tmp_args_element_name_1 };
            tmp_assign_source_2 = CALL_METHOD_WITH_ARGS1( tmp_called_instance_1, const_str_plain_getProperty, call_args );
        }

        if ( tmp_assign_source_2 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 626;
            type_description_1 = "oooo";
            goto try_except_handler_2;
        }
        assert( var_value == NULL );
        var_value = tmp_assign_source_2;
    }
    goto try_end_1;
    // Exception handler code:
    try_except_handler_2:;
    exception_keeper_type_1 = exception_type;
    exception_keeper_value_1 = exception_value;
    exception_keeper_tb_1 = exception_tb;
    exception_keeper_lineno_1 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    // Preserve existing published exception.
    exception_preserved_type_1 = EXC_TYPE(PyThreadState_GET());
    Py_XINCREF( exception_preserved_type_1 );
    exception_preserved_value_1 = EXC_VALUE(PyThreadState_GET());
    Py_XINCREF( exception_preserved_value_1 );
    exception_preserved_tb_1 = (PyTracebackObject *)EXC_TRACEBACK(PyThreadState_GET());
    Py_XINCREF( exception_preserved_tb_1 );

    if ( exception_keeper_tb_1 == NULL )
    {
        exception_keeper_tb_1 = MAKE_TRACEBACK( frame_85c1cc62a55d538c6401240bccea7c6c, exception_keeper_lineno_1 );
    }
    else if ( exception_keeper_lineno_1 != 0 )
    {
        exception_keeper_tb_1 = ADD_TRACEBACK( exception_keeper_tb_1, frame_85c1cc62a55d538c6401240bccea7c6c, exception_keeper_lineno_1 );
    }

    NORMALIZE_EXCEPTION( &exception_keeper_type_1, &exception_keeper_value_1, &exception_keeper_tb_1 );
    PyException_SetTraceback( exception_keeper_value_1, (PyObject *)exception_keeper_tb_1 );
    PUBLISH_EXCEPTION( &exception_keeper_type_1, &exception_keeper_value_1, &exception_keeper_tb_1 );
    // Tried code:
    {
        nuitka_bool tmp_condition_result_1;
        PyObject *tmp_compexpr_left_1;
        PyObject *tmp_compexpr_right_1;
        tmp_compexpr_left_1 = EXC_TYPE(PyThreadState_GET());
        tmp_compexpr_right_1 = PyExc_AttributeError;
        tmp_res = EXCEPTION_MATCH_BOOL( tmp_compexpr_left_1, tmp_compexpr_right_1 );
        if ( tmp_res == -1 )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 630;
            type_description_1 = "oooo";
            goto try_except_handler_3;
        }
        tmp_condition_result_1 = ( tmp_res != 0 ) ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
        if ( tmp_condition_result_1 == NUITKA_BOOL_TRUE )
        {
            goto branch_yes_1;
        }
        else
        {
            goto branch_no_1;
        }
        branch_yes_1:;
        CHECK_OBJECT( par_default );
        tmp_return_value = par_default;
        Py_INCREF( tmp_return_value );
        goto try_return_handler_3;
        goto branch_end_1;
        branch_no_1:;
        tmp_result = RERAISE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
        if (unlikely( tmp_result == false ))
        {
            exception_lineno = 625;
        }

        if (exception_tb && exception_tb->tb_frame == &frame_85c1cc62a55d538c6401240bccea7c6c->m_frame) frame_85c1cc62a55d538c6401240bccea7c6c->m_frame.f_lineno = exception_tb->tb_lineno;
        type_description_1 = "oooo";
        goto try_except_handler_3;
        branch_end_1:;
    }
    // tried codes exits in all cases
    NUITKA_CANNOT_GET_HERE( platform$$$function_14__java_getprop );
    return NULL;
    // Return handler code:
    try_return_handler_3:;
    // Restore previous exception.
    SET_CURRENT_EXCEPTION( exception_preserved_type_1, exception_preserved_value_1, exception_preserved_tb_1 );
    goto frame_return_exit_1;
    // Exception handler code:
    try_except_handler_3:;
    exception_keeper_type_2 = exception_type;
    exception_keeper_value_2 = exception_value;
    exception_keeper_tb_2 = exception_tb;
    exception_keeper_lineno_2 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    // Restore previous exception.
    SET_CURRENT_EXCEPTION( exception_preserved_type_1, exception_preserved_value_1, exception_preserved_tb_1 );
    // Re-raise.
    exception_type = exception_keeper_type_2;
    exception_value = exception_keeper_value_2;
    exception_tb = exception_keeper_tb_2;
    exception_lineno = exception_keeper_lineno_2;

    goto frame_exception_exit_1;
    // End of try:
    // End of try:
    try_end_1:;

#if 0
    RESTORE_FRAME_EXCEPTION( frame_85c1cc62a55d538c6401240bccea7c6c );
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto frame_no_exception_1;

    frame_return_exit_1:;
#if 0
    RESTORE_FRAME_EXCEPTION( frame_85c1cc62a55d538c6401240bccea7c6c );
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto try_return_handler_1;

    frame_exception_exit_1:;

#if 0
    RESTORE_FRAME_EXCEPTION( frame_85c1cc62a55d538c6401240bccea7c6c );
#endif

    if ( exception_tb == NULL )
    {
        exception_tb = MAKE_TRACEBACK( frame_85c1cc62a55d538c6401240bccea7c6c, exception_lineno );
    }
    else if ( exception_tb->tb_frame != &frame_85c1cc62a55d538c6401240bccea7c6c->m_frame )
    {
        exception_tb = ADD_TRACEBACK( exception_tb, frame_85c1cc62a55d538c6401240bccea7c6c, exception_lineno );
    }

    // Attachs locals to frame if any.
    Nuitka_Frame_AttachLocals(
        (struct Nuitka_FrameObject *)frame_85c1cc62a55d538c6401240bccea7c6c,
        type_description_1,
        par_name,
        par_default,
        var_System,
        var_value
    );


    // Release cached frame.
    if ( frame_85c1cc62a55d538c6401240bccea7c6c == cache_frame_85c1cc62a55d538c6401240bccea7c6c )
    {
        Py_DECREF( frame_85c1cc62a55d538c6401240bccea7c6c );
    }
    cache_frame_85c1cc62a55d538c6401240bccea7c6c = NULL;

    assertFrameObject( frame_85c1cc62a55d538c6401240bccea7c6c );

    // Put the previous frame back on top.
    popFrameStack();

    // Return the error.
    goto try_except_handler_1;

    frame_no_exception_1:;
    {
        nuitka_bool tmp_condition_result_2;
        PyObject *tmp_compexpr_left_2;
        PyObject *tmp_compexpr_right_2;
        CHECK_OBJECT( var_value );
        tmp_compexpr_left_2 = var_value;
        tmp_compexpr_right_2 = Py_None;
        tmp_condition_result_2 = ( tmp_compexpr_left_2 == tmp_compexpr_right_2 ) ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
        if ( tmp_condition_result_2 == NUITKA_BOOL_TRUE )
        {
            goto branch_yes_2;
        }
        else
        {
            goto branch_no_2;
        }
        branch_yes_2:;
        CHECK_OBJECT( par_default );
        tmp_return_value = par_default;
        Py_INCREF( tmp_return_value );
        goto try_return_handler_1;
        branch_no_2:;
    }
    CHECK_OBJECT( var_value );
    tmp_return_value = var_value;
    Py_INCREF( tmp_return_value );
    goto try_return_handler_1;
    // tried codes exits in all cases
    NUITKA_CANNOT_GET_HERE( platform$$$function_14__java_getprop );
    return NULL;
    // Return handler code:
    try_return_handler_1:;
    CHECK_OBJECT( (PyObject *)par_name );
    Py_DECREF( par_name );
    par_name = NULL;

    CHECK_OBJECT( (PyObject *)par_default );
    Py_DECREF( par_default );
    par_default = NULL;

    CHECK_OBJECT( (PyObject *)var_System );
    Py_DECREF( var_System );
    var_System = NULL;

    Py_XDECREF( var_value );
    var_value = NULL;

    goto function_return_exit;
    // Exception handler code:
    try_except_handler_1:;
    exception_keeper_type_3 = exception_type;
    exception_keeper_value_3 = exception_value;
    exception_keeper_tb_3 = exception_tb;
    exception_keeper_lineno_3 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    CHECK_OBJECT( (PyObject *)par_name );
    Py_DECREF( par_name );
    par_name = NULL;

    CHECK_OBJECT( (PyObject *)par_default );
    Py_DECREF( par_default );
    par_default = NULL;

    Py_XDECREF( var_System );
    var_System = NULL;

    Py_XDECREF( var_value );
    var_value = NULL;

    // Re-raise.
    exception_type = exception_keeper_type_3;
    exception_value = exception_keeper_value_3;
    exception_tb = exception_keeper_tb_3;
    exception_lineno = exception_keeper_lineno_3;

    goto function_exception_exit;
    // End of try:

    // Return statement must have exited already.
    NUITKA_CANNOT_GET_HERE( platform$$$function_14__java_getprop );
    return NULL;

function_exception_exit:
    assert( exception_type );
    RESTORE_ERROR_OCCURRED( exception_type, exception_value, exception_tb );

    return NULL;

function_return_exit:
   // Function cleanup code if any.


   // Actual function exit with return value, making sure we did not make
   // the error status worse despite non-NULL return.
   CHECK_OBJECT( tmp_return_value );
   assert( had_error || !ERROR_OCCURRED() );
   return tmp_return_value;
}


static PyObject *impl_platform$$$function_15_java_ver( struct Nuitka_FunctionObject const *self, PyObject **python_pars )
{
    // Preserve error status for checks
#ifndef __NUITKA_NO_ASSERT__
    NUITKA_MAY_BE_UNUSED bool had_error = ERROR_OCCURRED();
#endif

    // Local variable declarations.
    PyObject *par_release = python_pars[ 0 ];
    PyObject *par_vendor = python_pars[ 1 ];
    PyObject *par_vminfo = python_pars[ 2 ];
    PyObject *par_osinfo = python_pars[ 3 ];
    PyObject *var_java = NULL;
    PyObject *var_vm_name = NULL;
    PyObject *var_vm_release = NULL;
    PyObject *var_vm_vendor = NULL;
    PyObject *var_os_name = NULL;
    PyObject *var_os_version = NULL;
    PyObject *var_os_arch = NULL;
    PyObject *tmp_tuple_unpack_1__element_1 = NULL;
    PyObject *tmp_tuple_unpack_1__element_2 = NULL;
    PyObject *tmp_tuple_unpack_1__element_3 = NULL;
    PyObject *tmp_tuple_unpack_1__source_iter = NULL;
    PyObject *tmp_tuple_unpack_2__element_1 = NULL;
    PyObject *tmp_tuple_unpack_2__element_2 = NULL;
    PyObject *tmp_tuple_unpack_2__element_3 = NULL;
    PyObject *tmp_tuple_unpack_2__source_iter = NULL;
    struct Nuitka_FrameObject *frame_ad79bebff06c0898dc9c56142cd0efd0;
    NUITKA_MAY_BE_UNUSED char const *type_description_1 = NULL;
    PyObject *exception_type = NULL;
    PyObject *exception_value = NULL;
    PyTracebackObject *exception_tb = NULL;
    NUITKA_MAY_BE_UNUSED int exception_lineno = 0;
    PyObject *exception_keeper_type_1;
    PyObject *exception_keeper_value_1;
    PyTracebackObject *exception_keeper_tb_1;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_1;
    PyObject *exception_preserved_type_1;
    PyObject *exception_preserved_value_1;
    PyTracebackObject *exception_preserved_tb_1;
    int tmp_res;
    PyObject *tmp_return_value = NULL;
    bool tmp_result;
    PyObject *exception_keeper_type_2;
    PyObject *exception_keeper_value_2;
    PyTracebackObject *exception_keeper_tb_2;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_2;
    PyObject *tmp_iterator_attempt;
    PyObject *exception_keeper_type_3;
    PyObject *exception_keeper_value_3;
    PyTracebackObject *exception_keeper_tb_3;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_3;
    PyObject *exception_keeper_type_4;
    PyObject *exception_keeper_value_4;
    PyTracebackObject *exception_keeper_tb_4;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_4;
    PyObject *exception_keeper_type_5;
    PyObject *exception_keeper_value_5;
    PyTracebackObject *exception_keeper_tb_5;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_5;
    PyObject *exception_keeper_type_6;
    PyObject *exception_keeper_value_6;
    PyTracebackObject *exception_keeper_tb_6;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_6;
    static struct Nuitka_FrameObject *cache_frame_ad79bebff06c0898dc9c56142cd0efd0 = NULL;
    PyObject *exception_keeper_type_7;
    PyObject *exception_keeper_value_7;
    PyTracebackObject *exception_keeper_tb_7;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_7;

    // Actual function body.
    // Tried code:
    MAKE_OR_REUSE_FRAME( cache_frame_ad79bebff06c0898dc9c56142cd0efd0, codeobj_ad79bebff06c0898dc9c56142cd0efd0, module_platform, sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *) );
    frame_ad79bebff06c0898dc9c56142cd0efd0 = cache_frame_ad79bebff06c0898dc9c56142cd0efd0;

    // Push the new frame as the currently active one.
    pushFrameStack( frame_ad79bebff06c0898dc9c56142cd0efd0 );

    // Mark the frame object as in use, ref count 1 will be up for reuse.
    assert( Py_REFCNT( frame_ad79bebff06c0898dc9c56142cd0efd0 ) == 2 ); // Frame stack

    // Framed code:
    // Tried code:
    {
        PyObject *tmp_assign_source_1;
        PyObject *tmp_name_name_1;
        PyObject *tmp_globals_name_1;
        PyObject *tmp_locals_name_1;
        PyObject *tmp_fromlist_name_1;
        PyObject *tmp_level_name_1;
        tmp_name_name_1 = const_str_digest_91ed6263fdf2a019af9e0f2fc59fdaf4;
        tmp_globals_name_1 = (PyObject *)moduledict_platform;
        tmp_locals_name_1 = Py_None;
        tmp_fromlist_name_1 = Py_None;
        tmp_level_name_1 = const_int_0;
        frame_ad79bebff06c0898dc9c56142cd0efd0->m_frame.f_lineno = 647;
        tmp_assign_source_1 = IMPORT_MODULE5( tmp_name_name_1, tmp_globals_name_1, tmp_locals_name_1, tmp_fromlist_name_1, tmp_level_name_1 );
        if ( tmp_assign_source_1 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 647;
            type_description_1 = "ooooooooooo";
            goto try_except_handler_2;
        }
        assert( var_java == NULL );
        var_java = tmp_assign_source_1;
    }
    goto try_end_1;
    // Exception handler code:
    try_except_handler_2:;
    exception_keeper_type_1 = exception_type;
    exception_keeper_value_1 = exception_value;
    exception_keeper_tb_1 = exception_tb;
    exception_keeper_lineno_1 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    // Preserve existing published exception.
    exception_preserved_type_1 = EXC_TYPE(PyThreadState_GET());
    Py_XINCREF( exception_preserved_type_1 );
    exception_preserved_value_1 = EXC_VALUE(PyThreadState_GET());
    Py_XINCREF( exception_preserved_value_1 );
    exception_preserved_tb_1 = (PyTracebackObject *)EXC_TRACEBACK(PyThreadState_GET());
    Py_XINCREF( exception_preserved_tb_1 );

    if ( exception_keeper_tb_1 == NULL )
    {
        exception_keeper_tb_1 = MAKE_TRACEBACK( frame_ad79bebff06c0898dc9c56142cd0efd0, exception_keeper_lineno_1 );
    }
    else if ( exception_keeper_lineno_1 != 0 )
    {
        exception_keeper_tb_1 = ADD_TRACEBACK( exception_keeper_tb_1, frame_ad79bebff06c0898dc9c56142cd0efd0, exception_keeper_lineno_1 );
    }

    NORMALIZE_EXCEPTION( &exception_keeper_type_1, &exception_keeper_value_1, &exception_keeper_tb_1 );
    PyException_SetTraceback( exception_keeper_value_1, (PyObject *)exception_keeper_tb_1 );
    PUBLISH_EXCEPTION( &exception_keeper_type_1, &exception_keeper_value_1, &exception_keeper_tb_1 );
    // Tried code:
    {
        nuitka_bool tmp_condition_result_1;
        PyObject *tmp_compexpr_left_1;
        PyObject *tmp_compexpr_right_1;
        tmp_compexpr_left_1 = EXC_TYPE(PyThreadState_GET());
        tmp_compexpr_right_1 = PyExc_ImportError;
        tmp_res = EXCEPTION_MATCH_BOOL( tmp_compexpr_left_1, tmp_compexpr_right_1 );
        if ( tmp_res == -1 )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 648;
            type_description_1 = "ooooooooooo";
            goto try_except_handler_3;
        }
        tmp_condition_result_1 = ( tmp_res != 0 ) ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
        if ( tmp_condition_result_1 == NUITKA_BOOL_TRUE )
        {
            goto branch_yes_1;
        }
        else
        {
            goto branch_no_1;
        }
        branch_yes_1:;
        {
            PyObject *tmp_tuple_element_1;
            CHECK_OBJECT( par_release );
            tmp_tuple_element_1 = par_release;
            tmp_return_value = PyTuple_New( 4 );
            Py_INCREF( tmp_tuple_element_1 );
            PyTuple_SET_ITEM( tmp_return_value, 0, tmp_tuple_element_1 );
            CHECK_OBJECT( par_vendor );
            tmp_tuple_element_1 = par_vendor;
            Py_INCREF( tmp_tuple_element_1 );
            PyTuple_SET_ITEM( tmp_return_value, 1, tmp_tuple_element_1 );
            CHECK_OBJECT( par_vminfo );
            tmp_tuple_element_1 = par_vminfo;
            Py_INCREF( tmp_tuple_element_1 );
            PyTuple_SET_ITEM( tmp_return_value, 2, tmp_tuple_element_1 );
            CHECK_OBJECT( par_osinfo );
            tmp_tuple_element_1 = par_osinfo;
            Py_INCREF( tmp_tuple_element_1 );
            PyTuple_SET_ITEM( tmp_return_value, 3, tmp_tuple_element_1 );
            goto try_return_handler_3;
        }
        goto branch_end_1;
        branch_no_1:;
        tmp_result = RERAISE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
        if (unlikely( tmp_result == false ))
        {
            exception_lineno = 646;
        }

        if (exception_tb && exception_tb->tb_frame == &frame_ad79bebff06c0898dc9c56142cd0efd0->m_frame) frame_ad79bebff06c0898dc9c56142cd0efd0->m_frame.f_lineno = exception_tb->tb_lineno;
        type_description_1 = "ooooooooooo";
        goto try_except_handler_3;
        branch_end_1:;
    }
    // tried codes exits in all cases
    NUITKA_CANNOT_GET_HERE( platform$$$function_15_java_ver );
    return NULL;
    // Return handler code:
    try_return_handler_3:;
    // Restore previous exception.
    SET_CURRENT_EXCEPTION( exception_preserved_type_1, exception_preserved_value_1, exception_preserved_tb_1 );
    goto frame_return_exit_1;
    // Exception handler code:
    try_except_handler_3:;
    exception_keeper_type_2 = exception_type;
    exception_keeper_value_2 = exception_value;
    exception_keeper_tb_2 = exception_tb;
    exception_keeper_lineno_2 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    // Restore previous exception.
    SET_CURRENT_EXCEPTION( exception_preserved_type_1, exception_preserved_value_1, exception_preserved_tb_1 );
    // Re-raise.
    exception_type = exception_keeper_type_2;
    exception_value = exception_keeper_value_2;
    exception_tb = exception_keeper_tb_2;
    exception_lineno = exception_keeper_lineno_2;

    goto frame_exception_exit_1;
    // End of try:
    // End of try:
    try_end_1:;
    {
        PyObject *tmp_assign_source_2;
        PyObject *tmp_called_name_1;
        PyObject *tmp_mvar_value_1;
        PyObject *tmp_args_element_name_1;
        PyObject *tmp_args_element_name_2;
        tmp_mvar_value_1 = GET_STRING_DICT_VALUE( moduledict_platform, (Nuitka_StringObject *)const_str_plain__java_getprop );

        if (unlikely( tmp_mvar_value_1 == NULL ))
        {
            tmp_mvar_value_1 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain__java_getprop );
        }

        if ( tmp_mvar_value_1 == NULL )
        {

            exception_type = PyExc_NameError;
            Py_INCREF( exception_type );
            exception_value = PyUnicode_FromFormat( "name '%s' is not defined", "_java_getprop" );
            exception_tb = NULL;
            NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
            CHAIN_EXCEPTION( exception_value );

            exception_lineno = 651;
            type_description_1 = "ooooooooooo";
            goto frame_exception_exit_1;
        }

        tmp_called_name_1 = tmp_mvar_value_1;
        tmp_args_element_name_1 = const_str_digest_18c19c7f1666f65100a0b668faf8189b;
        CHECK_OBJECT( par_vendor );
        tmp_args_element_name_2 = par_vendor;
        frame_ad79bebff06c0898dc9c56142cd0efd0->m_frame.f_lineno = 651;
        {
            PyObject *call_args[] = { tmp_args_element_name_1, tmp_args_element_name_2 };
            tmp_assign_source_2 = CALL_FUNCTION_WITH_ARGS2( tmp_called_name_1, call_args );
        }

        if ( tmp_assign_source_2 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 651;
            type_description_1 = "ooooooooooo";
            goto frame_exception_exit_1;
        }
        {
            PyObject *old = par_vendor;
            assert( old != NULL );
            par_vendor = tmp_assign_source_2;
            Py_DECREF( old );
        }

    }
    {
        PyObject *tmp_assign_source_3;
        PyObject *tmp_called_name_2;
        PyObject *tmp_mvar_value_2;
        PyObject *tmp_args_element_name_3;
        PyObject *tmp_args_element_name_4;
        tmp_mvar_value_2 = GET_STRING_DICT_VALUE( moduledict_platform, (Nuitka_StringObject *)const_str_plain__java_getprop );

        if (unlikely( tmp_mvar_value_2 == NULL ))
        {
            tmp_mvar_value_2 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain__java_getprop );
        }

        if ( tmp_mvar_value_2 == NULL )
        {

            exception_type = PyExc_NameError;
            Py_INCREF( exception_type );
            exception_value = PyUnicode_FromFormat( "name '%s' is not defined", "_java_getprop" );
            exception_tb = NULL;
            NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
            CHAIN_EXCEPTION( exception_value );

            exception_lineno = 652;
            type_description_1 = "ooooooooooo";
            goto frame_exception_exit_1;
        }

        tmp_called_name_2 = tmp_mvar_value_2;
        tmp_args_element_name_3 = const_str_digest_ec3bf7dd19dc7ed953e3161036ca6e00;
        CHECK_OBJECT( par_release );
        tmp_args_element_name_4 = par_release;
        frame_ad79bebff06c0898dc9c56142cd0efd0->m_frame.f_lineno = 652;
        {
            PyObject *call_args[] = { tmp_args_element_name_3, tmp_args_element_name_4 };
            tmp_assign_source_3 = CALL_FUNCTION_WITH_ARGS2( tmp_called_name_2, call_args );
        }

        if ( tmp_assign_source_3 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 652;
            type_description_1 = "ooooooooooo";
            goto frame_exception_exit_1;
        }
        {
            PyObject *old = par_release;
            assert( old != NULL );
            par_release = tmp_assign_source_3;
            Py_DECREF( old );
        }

    }
    // Tried code:
    {
        PyObject *tmp_assign_source_4;
        PyObject *tmp_iter_arg_1;
        CHECK_OBJECT( par_vminfo );
        tmp_iter_arg_1 = par_vminfo;
        tmp_assign_source_4 = MAKE_UNPACK_ITERATOR( tmp_iter_arg_1 );
        if ( tmp_assign_source_4 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 653;
            type_description_1 = "ooooooooooo";
            goto try_except_handler_4;
        }
        assert( tmp_tuple_unpack_1__source_iter == NULL );
        tmp_tuple_unpack_1__source_iter = tmp_assign_source_4;
    }
    // Tried code:
    {
        PyObject *tmp_assign_source_5;
        PyObject *tmp_unpack_1;
        CHECK_OBJECT( tmp_tuple_unpack_1__source_iter );
        tmp_unpack_1 = tmp_tuple_unpack_1__source_iter;
        tmp_assign_source_5 = UNPACK_NEXT( tmp_unpack_1, 0, 3 );
        if ( tmp_assign_source_5 == NULL )
        {
            if ( !ERROR_OCCURRED() )
            {
                exception_type = PyExc_StopIteration;
                Py_INCREF( exception_type );
                exception_value = NULL;
                exception_tb = NULL;
            }
            else
            {
                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
            }


            type_description_1 = "ooooooooooo";
            exception_lineno = 653;
            goto try_except_handler_5;
        }
        assert( tmp_tuple_unpack_1__element_1 == NULL );
        tmp_tuple_unpack_1__element_1 = tmp_assign_source_5;
    }
    {
        PyObject *tmp_assign_source_6;
        PyObject *tmp_unpack_2;
        CHECK_OBJECT( tmp_tuple_unpack_1__source_iter );
        tmp_unpack_2 = tmp_tuple_unpack_1__source_iter;
        tmp_assign_source_6 = UNPACK_NEXT( tmp_unpack_2, 1, 3 );
        if ( tmp_assign_source_6 == NULL )
        {
            if ( !ERROR_OCCURRED() )
            {
                exception_type = PyExc_StopIteration;
                Py_INCREF( exception_type );
                exception_value = NULL;
                exception_tb = NULL;
            }
            else
            {
                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
            }


            type_description_1 = "ooooooooooo";
            exception_lineno = 653;
            goto try_except_handler_5;
        }
        assert( tmp_tuple_unpack_1__element_2 == NULL );
        tmp_tuple_unpack_1__element_2 = tmp_assign_source_6;
    }
    {
        PyObject *tmp_assign_source_7;
        PyObject *tmp_unpack_3;
        CHECK_OBJECT( tmp_tuple_unpack_1__source_iter );
        tmp_unpack_3 = tmp_tuple_unpack_1__source_iter;
        tmp_assign_source_7 = UNPACK_NEXT( tmp_unpack_3, 2, 3 );
        if ( tmp_assign_source_7 == NULL )
        {
            if ( !ERROR_OCCURRED() )
            {
                exception_type = PyExc_StopIteration;
                Py_INCREF( exception_type );
                exception_value = NULL;
                exception_tb = NULL;
            }
            else
            {
                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
            }


            type_description_1 = "ooooooooooo";
            exception_lineno = 653;
            goto try_except_handler_5;
        }
        assert( tmp_tuple_unpack_1__element_3 == NULL );
        tmp_tuple_unpack_1__element_3 = tmp_assign_source_7;
    }
    {
        PyObject *tmp_iterator_name_1;
        CHECK_OBJECT( tmp_tuple_unpack_1__source_iter );
        tmp_iterator_name_1 = tmp_tuple_unpack_1__source_iter;
        // Check if iterator has left-over elements.
        CHECK_OBJECT( tmp_iterator_name_1 ); assert( HAS_ITERNEXT( tmp_iterator_name_1 ) );

        tmp_iterator_attempt = (*Py_TYPE( tmp_iterator_name_1 )->tp_iternext)( tmp_iterator_name_1 );

        if (likely( tmp_iterator_attempt == NULL ))
        {
            PyObject *error = GET_ERROR_OCCURRED();

            if ( error != NULL )
            {
                if ( EXCEPTION_MATCH_BOOL_SINGLE( error, PyExc_StopIteration ))
                {
                    CLEAR_ERROR_OCCURRED();
                }
                else
                {
                    FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );

                    type_description_1 = "ooooooooooo";
                    exception_lineno = 653;
                    goto try_except_handler_5;
                }
            }
        }
        else
        {
            Py_DECREF( tmp_iterator_attempt );

            // TODO: Could avoid PyErr_Format.
#if PYTHON_VERSION < 300
            PyErr_Format( PyExc_ValueError, "too many values to unpack" );
#else
            PyErr_Format( PyExc_ValueError, "too many values to unpack (expected 3)" );
#endif
            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );

            type_description_1 = "ooooooooooo";
            exception_lineno = 653;
            goto try_except_handler_5;
        }
    }
    goto try_end_2;
    // Exception handler code:
    try_except_handler_5:;
    exception_keeper_type_3 = exception_type;
    exception_keeper_value_3 = exception_value;
    exception_keeper_tb_3 = exception_tb;
    exception_keeper_lineno_3 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    CHECK_OBJECT( (PyObject *)tmp_tuple_unpack_1__source_iter );
    Py_DECREF( tmp_tuple_unpack_1__source_iter );
    tmp_tuple_unpack_1__source_iter = NULL;

    // Re-raise.
    exception_type = exception_keeper_type_3;
    exception_value = exception_keeper_value_3;
    exception_tb = exception_keeper_tb_3;
    exception_lineno = exception_keeper_lineno_3;

    goto try_except_handler_4;
    // End of try:
    try_end_2:;
    goto try_end_3;
    // Exception handler code:
    try_except_handler_4:;
    exception_keeper_type_4 = exception_type;
    exception_keeper_value_4 = exception_value;
    exception_keeper_tb_4 = exception_tb;
    exception_keeper_lineno_4 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    Py_XDECREF( tmp_tuple_unpack_1__element_1 );
    tmp_tuple_unpack_1__element_1 = NULL;

    Py_XDECREF( tmp_tuple_unpack_1__element_2 );
    tmp_tuple_unpack_1__element_2 = NULL;

    Py_XDECREF( tmp_tuple_unpack_1__element_3 );
    tmp_tuple_unpack_1__element_3 = NULL;

    // Re-raise.
    exception_type = exception_keeper_type_4;
    exception_value = exception_keeper_value_4;
    exception_tb = exception_keeper_tb_4;
    exception_lineno = exception_keeper_lineno_4;

    goto frame_exception_exit_1;
    // End of try:
    try_end_3:;
    CHECK_OBJECT( (PyObject *)tmp_tuple_unpack_1__source_iter );
    Py_DECREF( tmp_tuple_unpack_1__source_iter );
    tmp_tuple_unpack_1__source_iter = NULL;

    {
        PyObject *tmp_assign_source_8;
        CHECK_OBJECT( tmp_tuple_unpack_1__element_1 );
        tmp_assign_source_8 = tmp_tuple_unpack_1__element_1;
        assert( var_vm_name == NULL );
        Py_INCREF( tmp_assign_source_8 );
        var_vm_name = tmp_assign_source_8;
    }
    Py_XDECREF( tmp_tuple_unpack_1__element_1 );
    tmp_tuple_unpack_1__element_1 = NULL;

    {
        PyObject *tmp_assign_source_9;
        CHECK_OBJECT( tmp_tuple_unpack_1__element_2 );
        tmp_assign_source_9 = tmp_tuple_unpack_1__element_2;
        assert( var_vm_release == NULL );
        Py_INCREF( tmp_assign_source_9 );
        var_vm_release = tmp_assign_source_9;
    }
    Py_XDECREF( tmp_tuple_unpack_1__element_2 );
    tmp_tuple_unpack_1__element_2 = NULL;

    {
        PyObject *tmp_assign_source_10;
        CHECK_OBJECT( tmp_tuple_unpack_1__element_3 );
        tmp_assign_source_10 = tmp_tuple_unpack_1__element_3;
        assert( var_vm_vendor == NULL );
        Py_INCREF( tmp_assign_source_10 );
        var_vm_vendor = tmp_assign_source_10;
    }
    Py_XDECREF( tmp_tuple_unpack_1__element_3 );
    tmp_tuple_unpack_1__element_3 = NULL;

    {
        PyObject *tmp_assign_source_11;
        PyObject *tmp_called_name_3;
        PyObject *tmp_mvar_value_3;
        PyObject *tmp_args_element_name_5;
        PyObject *tmp_args_element_name_6;
        tmp_mvar_value_3 = GET_STRING_DICT_VALUE( moduledict_platform, (Nuitka_StringObject *)const_str_plain__java_getprop );

        if (unlikely( tmp_mvar_value_3 == NULL ))
        {
            tmp_mvar_value_3 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain__java_getprop );
        }

        if ( tmp_mvar_value_3 == NULL )
        {

            exception_type = PyExc_NameError;
            Py_INCREF( exception_type );
            exception_value = PyUnicode_FromFormat( "name '%s' is not defined", "_java_getprop" );
            exception_tb = NULL;
            NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
            CHAIN_EXCEPTION( exception_value );

            exception_lineno = 654;
            type_description_1 = "ooooooooooo";
            goto frame_exception_exit_1;
        }

        tmp_called_name_3 = tmp_mvar_value_3;
        tmp_args_element_name_5 = const_str_digest_a27c22fd922c3e382053b3d43b7805d9;
        CHECK_OBJECT( var_vm_name );
        tmp_args_element_name_6 = var_vm_name;
        frame_ad79bebff06c0898dc9c56142cd0efd0->m_frame.f_lineno = 654;
        {
            PyObject *call_args[] = { tmp_args_element_name_5, tmp_args_element_name_6 };
            tmp_assign_source_11 = CALL_FUNCTION_WITH_ARGS2( tmp_called_name_3, call_args );
        }

        if ( tmp_assign_source_11 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 654;
            type_description_1 = "ooooooooooo";
            goto frame_exception_exit_1;
        }
        {
            PyObject *old = var_vm_name;
            assert( old != NULL );
            var_vm_name = tmp_assign_source_11;
            Py_DECREF( old );
        }

    }
    {
        PyObject *tmp_assign_source_12;
        PyObject *tmp_called_name_4;
        PyObject *tmp_mvar_value_4;
        PyObject *tmp_args_element_name_7;
        PyObject *tmp_args_element_name_8;
        tmp_mvar_value_4 = GET_STRING_DICT_VALUE( moduledict_platform, (Nuitka_StringObject *)const_str_plain__java_getprop );

        if (unlikely( tmp_mvar_value_4 == NULL ))
        {
            tmp_mvar_value_4 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain__java_getprop );
        }

        if ( tmp_mvar_value_4 == NULL )
        {

            exception_type = PyExc_NameError;
            Py_INCREF( exception_type );
            exception_value = PyUnicode_FromFormat( "name '%s' is not defined", "_java_getprop" );
            exception_tb = NULL;
            NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
            CHAIN_EXCEPTION( exception_value );

            exception_lineno = 655;
            type_description_1 = "ooooooooooo";
            goto frame_exception_exit_1;
        }

        tmp_called_name_4 = tmp_mvar_value_4;
        tmp_args_element_name_7 = const_str_digest_b235a38a1eecd0e7f7d0b3188f8326db;
        CHECK_OBJECT( var_vm_vendor );
        tmp_args_element_name_8 = var_vm_vendor;
        frame_ad79bebff06c0898dc9c56142cd0efd0->m_frame.f_lineno = 655;
        {
            PyObject *call_args[] = { tmp_args_element_name_7, tmp_args_element_name_8 };
            tmp_assign_source_12 = CALL_FUNCTION_WITH_ARGS2( tmp_called_name_4, call_args );
        }

        if ( tmp_assign_source_12 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 655;
            type_description_1 = "ooooooooooo";
            goto frame_exception_exit_1;
        }
        {
            PyObject *old = var_vm_vendor;
            assert( old != NULL );
            var_vm_vendor = tmp_assign_source_12;
            Py_DECREF( old );
        }

    }
    {
        PyObject *tmp_assign_source_13;
        PyObject *tmp_called_name_5;
        PyObject *tmp_mvar_value_5;
        PyObject *tmp_args_element_name_9;
        PyObject *tmp_args_element_name_10;
        tmp_mvar_value_5 = GET_STRING_DICT_VALUE( moduledict_platform, (Nuitka_StringObject *)const_str_plain__java_getprop );

        if (unlikely( tmp_mvar_value_5 == NULL ))
        {
            tmp_mvar_value_5 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain__java_getprop );
        }

        if ( tmp_mvar_value_5 == NULL )
        {

            exception_type = PyExc_NameError;
            Py_INCREF( exception_type );
            exception_value = PyUnicode_FromFormat( "name '%s' is not defined", "_java_getprop" );
            exception_tb = NULL;
            NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
            CHAIN_EXCEPTION( exception_value );

            exception_lineno = 656;
            type_description_1 = "ooooooooooo";
            goto frame_exception_exit_1;
        }

        tmp_called_name_5 = tmp_mvar_value_5;
        tmp_args_element_name_9 = const_str_digest_e487b637e1ad77eda7fb0751ba4790d1;
        CHECK_OBJECT( var_vm_release );
        tmp_args_element_name_10 = var_vm_release;
        frame_ad79bebff06c0898dc9c56142cd0efd0->m_frame.f_lineno = 656;
        {
            PyObject *call_args[] = { tmp_args_element_name_9, tmp_args_element_name_10 };
            tmp_assign_source_13 = CALL_FUNCTION_WITH_ARGS2( tmp_called_name_5, call_args );
        }

        if ( tmp_assign_source_13 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 656;
            type_description_1 = "ooooooooooo";
            goto frame_exception_exit_1;
        }
        {
            PyObject *old = var_vm_release;
            assert( old != NULL );
            var_vm_release = tmp_assign_source_13;
            Py_DECREF( old );
        }

    }
    {
        PyObject *tmp_assign_source_14;
        PyObject *tmp_tuple_element_2;
        CHECK_OBJECT( var_vm_name );
        tmp_tuple_element_2 = var_vm_name;
        tmp_assign_source_14 = PyTuple_New( 3 );
        Py_INCREF( tmp_tuple_element_2 );
        PyTuple_SET_ITEM( tmp_assign_source_14, 0, tmp_tuple_element_2 );
        CHECK_OBJECT( var_vm_release );
        tmp_tuple_element_2 = var_vm_release;
        Py_INCREF( tmp_tuple_element_2 );
        PyTuple_SET_ITEM( tmp_assign_source_14, 1, tmp_tuple_element_2 );
        CHECK_OBJECT( var_vm_vendor );
        tmp_tuple_element_2 = var_vm_vendor;
        Py_INCREF( tmp_tuple_element_2 );
        PyTuple_SET_ITEM( tmp_assign_source_14, 2, tmp_tuple_element_2 );
        {
            PyObject *old = par_vminfo;
            assert( old != NULL );
            par_vminfo = tmp_assign_source_14;
            Py_DECREF( old );
        }

    }
    // Tried code:
    {
        PyObject *tmp_assign_source_15;
        PyObject *tmp_iter_arg_2;
        CHECK_OBJECT( par_osinfo );
        tmp_iter_arg_2 = par_osinfo;
        tmp_assign_source_15 = MAKE_UNPACK_ITERATOR( tmp_iter_arg_2 );
        if ( tmp_assign_source_15 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 658;
            type_description_1 = "ooooooooooo";
            goto try_except_handler_6;
        }
        assert( tmp_tuple_unpack_2__source_iter == NULL );
        tmp_tuple_unpack_2__source_iter = tmp_assign_source_15;
    }
    // Tried code:
    {
        PyObject *tmp_assign_source_16;
        PyObject *tmp_unpack_4;
        CHECK_OBJECT( tmp_tuple_unpack_2__source_iter );
        tmp_unpack_4 = tmp_tuple_unpack_2__source_iter;
        tmp_assign_source_16 = UNPACK_NEXT( tmp_unpack_4, 0, 3 );
        if ( tmp_assign_source_16 == NULL )
        {
            if ( !ERROR_OCCURRED() )
            {
                exception_type = PyExc_StopIteration;
                Py_INCREF( exception_type );
                exception_value = NULL;
                exception_tb = NULL;
            }
            else
            {
                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
            }


            type_description_1 = "ooooooooooo";
            exception_lineno = 658;
            goto try_except_handler_7;
        }
        assert( tmp_tuple_unpack_2__element_1 == NULL );
        tmp_tuple_unpack_2__element_1 = tmp_assign_source_16;
    }
    {
        PyObject *tmp_assign_source_17;
        PyObject *tmp_unpack_5;
        CHECK_OBJECT( tmp_tuple_unpack_2__source_iter );
        tmp_unpack_5 = tmp_tuple_unpack_2__source_iter;
        tmp_assign_source_17 = UNPACK_NEXT( tmp_unpack_5, 1, 3 );
        if ( tmp_assign_source_17 == NULL )
        {
            if ( !ERROR_OCCURRED() )
            {
                exception_type = PyExc_StopIteration;
                Py_INCREF( exception_type );
                exception_value = NULL;
                exception_tb = NULL;
            }
            else
            {
                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
            }


            type_description_1 = "ooooooooooo";
            exception_lineno = 658;
            goto try_except_handler_7;
        }
        assert( tmp_tuple_unpack_2__element_2 == NULL );
        tmp_tuple_unpack_2__element_2 = tmp_assign_source_17;
    }
    {
        PyObject *tmp_assign_source_18;
        PyObject *tmp_unpack_6;
        CHECK_OBJECT( tmp_tuple_unpack_2__source_iter );
        tmp_unpack_6 = tmp_tuple_unpack_2__source_iter;
        tmp_assign_source_18 = UNPACK_NEXT( tmp_unpack_6, 2, 3 );
        if ( tmp_assign_source_18 == NULL )
        {
            if ( !ERROR_OCCURRED() )
            {
                exception_type = PyExc_StopIteration;
                Py_INCREF( exception_type );
                exception_value = NULL;
                exception_tb = NULL;
            }
            else
            {
                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
            }


            type_description_1 = "ooooooooooo";
            exception_lineno = 658;
            goto try_except_handler_7;
        }
        assert( tmp_tuple_unpack_2__element_3 == NULL );
        tmp_tuple_unpack_2__element_3 = tmp_assign_source_18;
    }
    {
        PyObject *tmp_iterator_name_2;
        CHECK_OBJECT( tmp_tuple_unpack_2__source_iter );
        tmp_iterator_name_2 = tmp_tuple_unpack_2__source_iter;
        // Check if iterator has left-over elements.
        CHECK_OBJECT( tmp_iterator_name_2 ); assert( HAS_ITERNEXT( tmp_iterator_name_2 ) );

        tmp_iterator_attempt = (*Py_TYPE( tmp_iterator_name_2 )->tp_iternext)( tmp_iterator_name_2 );

        if (likely( tmp_iterator_attempt == NULL ))
        {
            PyObject *error = GET_ERROR_OCCURRED();

            if ( error != NULL )
            {
                if ( EXCEPTION_MATCH_BOOL_SINGLE( error, PyExc_StopIteration ))
                {
                    CLEAR_ERROR_OCCURRED();
                }
                else
                {
                    FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );

                    type_description_1 = "ooooooooooo";
                    exception_lineno = 658;
                    goto try_except_handler_7;
                }
            }
        }
        else
        {
            Py_DECREF( tmp_iterator_attempt );

            // TODO: Could avoid PyErr_Format.
#if PYTHON_VERSION < 300
            PyErr_Format( PyExc_ValueError, "too many values to unpack" );
#else
            PyErr_Format( PyExc_ValueError, "too many values to unpack (expected 3)" );
#endif
            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );

            type_description_1 = "ooooooooooo";
            exception_lineno = 658;
            goto try_except_handler_7;
        }
    }
    goto try_end_4;
    // Exception handler code:
    try_except_handler_7:;
    exception_keeper_type_5 = exception_type;
    exception_keeper_value_5 = exception_value;
    exception_keeper_tb_5 = exception_tb;
    exception_keeper_lineno_5 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    CHECK_OBJECT( (PyObject *)tmp_tuple_unpack_2__source_iter );
    Py_DECREF( tmp_tuple_unpack_2__source_iter );
    tmp_tuple_unpack_2__source_iter = NULL;

    // Re-raise.
    exception_type = exception_keeper_type_5;
    exception_value = exception_keeper_value_5;
    exception_tb = exception_keeper_tb_5;
    exception_lineno = exception_keeper_lineno_5;

    goto try_except_handler_6;
    // End of try:
    try_end_4:;
    goto try_end_5;
    // Exception handler code:
    try_except_handler_6:;
    exception_keeper_type_6 = exception_type;
    exception_keeper_value_6 = exception_value;
    exception_keeper_tb_6 = exception_tb;
    exception_keeper_lineno_6 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    Py_XDECREF( tmp_tuple_unpack_2__element_1 );
    tmp_tuple_unpack_2__element_1 = NULL;

    Py_XDECREF( tmp_tuple_unpack_2__element_2 );
    tmp_tuple_unpack_2__element_2 = NULL;

    Py_XDECREF( tmp_tuple_unpack_2__element_3 );
    tmp_tuple_unpack_2__element_3 = NULL;

    // Re-raise.
    exception_type = exception_keeper_type_6;
    exception_value = exception_keeper_value_6;
    exception_tb = exception_keeper_tb_6;
    exception_lineno = exception_keeper_lineno_6;

    goto frame_exception_exit_1;
    // End of try:
    try_end_5:;
    CHECK_OBJECT( (PyObject *)tmp_tuple_unpack_2__source_iter );
    Py_DECREF( tmp_tuple_unpack_2__source_iter );
    tmp_tuple_unpack_2__source_iter = NULL;

    {
        PyObject *tmp_assign_source_19;
        CHECK_OBJECT( tmp_tuple_unpack_2__element_1 );
        tmp_assign_source_19 = tmp_tuple_unpack_2__element_1;
        assert( var_os_name == NULL );
        Py_INCREF( tmp_assign_source_19 );
        var_os_name = tmp_assign_source_19;
    }
    Py_XDECREF( tmp_tuple_unpack_2__element_1 );
    tmp_tuple_unpack_2__element_1 = NULL;

    {
        PyObject *tmp_assign_source_20;
        CHECK_OBJECT( tmp_tuple_unpack_2__element_2 );
        tmp_assign_source_20 = tmp_tuple_unpack_2__element_2;
        assert( var_os_version == NULL );
        Py_INCREF( tmp_assign_source_20 );
        var_os_version = tmp_assign_source_20;
    }
    Py_XDECREF( tmp_tuple_unpack_2__element_2 );
    tmp_tuple_unpack_2__element_2 = NULL;

    {
        PyObject *tmp_assign_source_21;
        CHECK_OBJECT( tmp_tuple_unpack_2__element_3 );
        tmp_assign_source_21 = tmp_tuple_unpack_2__element_3;
        assert( var_os_arch == NULL );
        Py_INCREF( tmp_assign_source_21 );
        var_os_arch = tmp_assign_source_21;
    }
    Py_XDECREF( tmp_tuple_unpack_2__element_3 );
    tmp_tuple_unpack_2__element_3 = NULL;

    {
        PyObject *tmp_assign_source_22;
        PyObject *tmp_called_name_6;
        PyObject *tmp_mvar_value_6;
        PyObject *tmp_args_element_name_11;
        PyObject *tmp_args_element_name_12;
        tmp_mvar_value_6 = GET_STRING_DICT_VALUE( moduledict_platform, (Nuitka_StringObject *)const_str_plain__java_getprop );

        if (unlikely( tmp_mvar_value_6 == NULL ))
        {
            tmp_mvar_value_6 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain__java_getprop );
        }

        if ( tmp_mvar_value_6 == NULL )
        {

            exception_type = PyExc_NameError;
            Py_INCREF( exception_type );
            exception_value = PyUnicode_FromFormat( "name '%s' is not defined", "_java_getprop" );
            exception_tb = NULL;
            NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
            CHAIN_EXCEPTION( exception_value );

            exception_lineno = 659;
            type_description_1 = "ooooooooooo";
            goto frame_exception_exit_1;
        }

        tmp_called_name_6 = tmp_mvar_value_6;
        tmp_args_element_name_11 = const_str_digest_7c43f8e717dadececfad8d5b4940066a;
        CHECK_OBJECT( var_os_arch );
        tmp_args_element_name_12 = var_os_arch;
        frame_ad79bebff06c0898dc9c56142cd0efd0->m_frame.f_lineno = 659;
        {
            PyObject *call_args[] = { tmp_args_element_name_11, tmp_args_element_name_12 };
            tmp_assign_source_22 = CALL_FUNCTION_WITH_ARGS2( tmp_called_name_6, call_args );
        }

        if ( tmp_assign_source_22 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 659;
            type_description_1 = "ooooooooooo";
            goto frame_exception_exit_1;
        }
        {
            PyObject *old = var_os_arch;
            assert( old != NULL );
            var_os_arch = tmp_assign_source_22;
            Py_DECREF( old );
        }

    }
    {
        PyObject *tmp_assign_source_23;
        PyObject *tmp_called_name_7;
        PyObject *tmp_mvar_value_7;
        PyObject *tmp_args_element_name_13;
        PyObject *tmp_args_element_name_14;
        tmp_mvar_value_7 = GET_STRING_DICT_VALUE( moduledict_platform, (Nuitka_StringObject *)const_str_plain__java_getprop );

        if (unlikely( tmp_mvar_value_7 == NULL ))
        {
            tmp_mvar_value_7 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain__java_getprop );
        }

        if ( tmp_mvar_value_7 == NULL )
        {

            exception_type = PyExc_NameError;
            Py_INCREF( exception_type );
            exception_value = PyUnicode_FromFormat( "name '%s' is not defined", "_java_getprop" );
            exception_tb = NULL;
            NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
            CHAIN_EXCEPTION( exception_value );

            exception_lineno = 660;
            type_description_1 = "ooooooooooo";
            goto frame_exception_exit_1;
        }

        tmp_called_name_7 = tmp_mvar_value_7;
        tmp_args_element_name_13 = const_str_digest_207644829de0588c1bb0efe2c2f9a840;
        CHECK_OBJECT( var_os_name );
        tmp_args_element_name_14 = var_os_name;
        frame_ad79bebff06c0898dc9c56142cd0efd0->m_frame.f_lineno = 660;
        {
            PyObject *call_args[] = { tmp_args_element_name_13, tmp_args_element_name_14 };
            tmp_assign_source_23 = CALL_FUNCTION_WITH_ARGS2( tmp_called_name_7, call_args );
        }

        if ( tmp_assign_source_23 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 660;
            type_description_1 = "ooooooooooo";
            goto frame_exception_exit_1;
        }
        {
            PyObject *old = var_os_name;
            assert( old != NULL );
            var_os_name = tmp_assign_source_23;
            Py_DECREF( old );
        }

    }
    {
        PyObject *tmp_assign_source_24;
        PyObject *tmp_called_name_8;
        PyObject *tmp_mvar_value_8;
        PyObject *tmp_args_element_name_15;
        PyObject *tmp_args_element_name_16;
        tmp_mvar_value_8 = GET_STRING_DICT_VALUE( moduledict_platform, (Nuitka_StringObject *)const_str_plain__java_getprop );

        if (unlikely( tmp_mvar_value_8 == NULL ))
        {
            tmp_mvar_value_8 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain__java_getprop );
        }

        if ( tmp_mvar_value_8 == NULL )
        {

            exception_type = PyExc_NameError;
            Py_INCREF( exception_type );
            exception_value = PyUnicode_FromFormat( "name '%s' is not defined", "_java_getprop" );
            exception_tb = NULL;
            NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
            CHAIN_EXCEPTION( exception_value );

            exception_lineno = 661;
            type_description_1 = "ooooooooooo";
            goto frame_exception_exit_1;
        }

        tmp_called_name_8 = tmp_mvar_value_8;
        tmp_args_element_name_15 = const_str_digest_8c48013a0d6a1e698c31a26923791b80;
        CHECK_OBJECT( var_os_version );
        tmp_args_element_name_16 = var_os_version;
        frame_ad79bebff06c0898dc9c56142cd0efd0->m_frame.f_lineno = 661;
        {
            PyObject *call_args[] = { tmp_args_element_name_15, tmp_args_element_name_16 };
            tmp_assign_source_24 = CALL_FUNCTION_WITH_ARGS2( tmp_called_name_8, call_args );
        }

        if ( tmp_assign_source_24 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 661;
            type_description_1 = "ooooooooooo";
            goto frame_exception_exit_1;
        }
        {
            PyObject *old = var_os_version;
            assert( old != NULL );
            var_os_version = tmp_assign_source_24;
            Py_DECREF( old );
        }

    }

#if 0
    RESTORE_FRAME_EXCEPTION( frame_ad79bebff06c0898dc9c56142cd0efd0 );
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto frame_no_exception_1;

    frame_return_exit_1:;
#if 0
    RESTORE_FRAME_EXCEPTION( frame_ad79bebff06c0898dc9c56142cd0efd0 );
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto try_return_handler_1;

    frame_exception_exit_1:;

#if 0
    RESTORE_FRAME_EXCEPTION( frame_ad79bebff06c0898dc9c56142cd0efd0 );
#endif

    if ( exception_tb == NULL )
    {
        exception_tb = MAKE_TRACEBACK( frame_ad79bebff06c0898dc9c56142cd0efd0, exception_lineno );
    }
    else if ( exception_tb->tb_frame != &frame_ad79bebff06c0898dc9c56142cd0efd0->m_frame )
    {
        exception_tb = ADD_TRACEBACK( exception_tb, frame_ad79bebff06c0898dc9c56142cd0efd0, exception_lineno );
    }

    // Attachs locals to frame if any.
    Nuitka_Frame_AttachLocals(
        (struct Nuitka_FrameObject *)frame_ad79bebff06c0898dc9c56142cd0efd0,
        type_description_1,
        par_release,
        par_vendor,
        par_vminfo,
        par_osinfo,
        var_java,
        var_vm_name,
        var_vm_release,
        var_vm_vendor,
        var_os_name,
        var_os_version,
        var_os_arch
    );


    // Release cached frame.
    if ( frame_ad79bebff06c0898dc9c56142cd0efd0 == cache_frame_ad79bebff06c0898dc9c56142cd0efd0 )
    {
        Py_DECREF( frame_ad79bebff06c0898dc9c56142cd0efd0 );
    }
    cache_frame_ad79bebff06c0898dc9c56142cd0efd0 = NULL;

    assertFrameObject( frame_ad79bebff06c0898dc9c56142cd0efd0 );

    // Put the previous frame back on top.
    popFrameStack();

    // Return the error.
    goto try_except_handler_1;

    frame_no_exception_1:;
    {
        PyObject *tmp_assign_source_25;
        PyObject *tmp_tuple_element_3;
        CHECK_OBJECT( var_os_name );
        tmp_tuple_element_3 = var_os_name;
        tmp_assign_source_25 = PyTuple_New( 3 );
        Py_INCREF( tmp_tuple_element_3 );
        PyTuple_SET_ITEM( tmp_assign_source_25, 0, tmp_tuple_element_3 );
        CHECK_OBJECT( var_os_version );
        tmp_tuple_element_3 = var_os_version;
        Py_INCREF( tmp_tuple_element_3 );
        PyTuple_SET_ITEM( tmp_assign_source_25, 1, tmp_tuple_element_3 );
        CHECK_OBJECT( var_os_arch );
        tmp_tuple_element_3 = var_os_arch;
        Py_INCREF( tmp_tuple_element_3 );
        PyTuple_SET_ITEM( tmp_assign_source_25, 2, tmp_tuple_element_3 );
        {
            PyObject *old = par_osinfo;
            assert( old != NULL );
            par_osinfo = tmp_assign_source_25;
            Py_DECREF( old );
        }

    }
    {
        PyObject *tmp_tuple_element_4;
        CHECK_OBJECT( par_release );
        tmp_tuple_element_4 = par_release;
        tmp_return_value = PyTuple_New( 4 );
        Py_INCREF( tmp_tuple_element_4 );
        PyTuple_SET_ITEM( tmp_return_value, 0, tmp_tuple_element_4 );
        CHECK_OBJECT( par_vendor );
        tmp_tuple_element_4 = par_vendor;
        Py_INCREF( tmp_tuple_element_4 );
        PyTuple_SET_ITEM( tmp_return_value, 1, tmp_tuple_element_4 );
        CHECK_OBJECT( par_vminfo );
        tmp_tuple_element_4 = par_vminfo;
        Py_INCREF( tmp_tuple_element_4 );
        PyTuple_SET_ITEM( tmp_return_value, 2, tmp_tuple_element_4 );
        CHECK_OBJECT( par_osinfo );
        tmp_tuple_element_4 = par_osinfo;
        Py_INCREF( tmp_tuple_element_4 );
        PyTuple_SET_ITEM( tmp_return_value, 3, tmp_tuple_element_4 );
        goto try_return_handler_1;
    }
    // tried codes exits in all cases
    NUITKA_CANNOT_GET_HERE( platform$$$function_15_java_ver );
    return NULL;
    // Return handler code:
    try_return_handler_1:;
    CHECK_OBJECT( (PyObject *)par_release );
    Py_DECREF( par_release );
    par_release = NULL;

    CHECK_OBJECT( (PyObject *)par_vendor );
    Py_DECREF( par_vendor );
    par_vendor = NULL;

    CHECK_OBJECT( (PyObject *)par_vminfo );
    Py_DECREF( par_vminfo );
    par_vminfo = NULL;

    CHECK_OBJECT( (PyObject *)par_osinfo );
    Py_DECREF( par_osinfo );
    par_osinfo = NULL;

    Py_XDECREF( var_java );
    var_java = NULL;

    Py_XDECREF( var_vm_name );
    var_vm_name = NULL;

    Py_XDECREF( var_vm_release );
    var_vm_release = NULL;

    Py_XDECREF( var_vm_vendor );
    var_vm_vendor = NULL;

    Py_XDECREF( var_os_name );
    var_os_name = NULL;

    Py_XDECREF( var_os_version );
    var_os_version = NULL;

    Py_XDECREF( var_os_arch );
    var_os_arch = NULL;

    goto function_return_exit;
    // Exception handler code:
    try_except_handler_1:;
    exception_keeper_type_7 = exception_type;
    exception_keeper_value_7 = exception_value;
    exception_keeper_tb_7 = exception_tb;
    exception_keeper_lineno_7 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    CHECK_OBJECT( (PyObject *)par_release );
    Py_DECREF( par_release );
    par_release = NULL;

    CHECK_OBJECT( (PyObject *)par_vendor );
    Py_DECREF( par_vendor );
    par_vendor = NULL;

    CHECK_OBJECT( (PyObject *)par_vminfo );
    Py_DECREF( par_vminfo );
    par_vminfo = NULL;

    CHECK_OBJECT( (PyObject *)par_osinfo );
    Py_DECREF( par_osinfo );
    par_osinfo = NULL;

    Py_XDECREF( var_java );
    var_java = NULL;

    Py_XDECREF( var_vm_name );
    var_vm_name = NULL;

    Py_XDECREF( var_vm_release );
    var_vm_release = NULL;

    Py_XDECREF( var_vm_vendor );
    var_vm_vendor = NULL;

    Py_XDECREF( var_os_name );
    var_os_name = NULL;

    Py_XDECREF( var_os_version );
    var_os_version = NULL;

    Py_XDECREF( var_os_arch );
    var_os_arch = NULL;

    // Re-raise.
    exception_type = exception_keeper_type_7;
    exception_value = exception_keeper_value_7;
    exception_tb = exception_keeper_tb_7;
    exception_lineno = exception_keeper_lineno_7;

    goto function_exception_exit;
    // End of try:

    // Return statement must have exited already.
    NUITKA_CANNOT_GET_HERE( platform$$$function_15_java_ver );
    return NULL;

function_exception_exit:
    assert( exception_type );
    RESTORE_ERROR_OCCURRED( exception_type, exception_value, exception_tb );

    return NULL;

function_return_exit:
   // Function cleanup code if any.


   // Actual function exit with return value, making sure we did not make
   // the error status worse despite non-NULL return.
   CHECK_OBJECT( tmp_return_value );
   assert( had_error || !ERROR_OCCURRED() );
   return tmp_return_value;
}


static PyObject *impl_platform$$$function_16_system_alias( struct Nuitka_FunctionObject const *self, PyObject **python_pars )
{
    // Preserve error status for checks
#ifndef __NUITKA_NO_ASSERT__
    NUITKA_MAY_BE_UNUSED bool had_error = ERROR_OCCURRED();
#endif

    // Local variable declarations.
    PyObject *par_system = python_pars[ 0 ];
    PyObject *par_release = python_pars[ 1 ];
    PyObject *par_version = python_pars[ 2 ];
    PyObject *var_l = NULL;
    PyObject *var_major = NULL;
    nuitka_bool tmp_try_except_1__unhandled_indicator = NUITKA_BOOL_UNASSIGNED;
    struct Nuitka_FrameObject *frame_9211ede61843307a8618562589961416;
    NUITKA_MAY_BE_UNUSED char const *type_description_1 = NULL;
    int tmp_res;
    PyObject *exception_type = NULL;
    PyObject *exception_value = NULL;
    PyTracebackObject *exception_tb = NULL;
    NUITKA_MAY_BE_UNUSED int exception_lineno = 0;
    PyObject *tmp_return_value = NULL;
    PyObject *exception_keeper_type_1;
    PyObject *exception_keeper_value_1;
    PyTracebackObject *exception_keeper_tb_1;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_1;
    PyObject *exception_preserved_type_1;
    PyObject *exception_preserved_value_1;
    PyTracebackObject *exception_preserved_tb_1;
    bool tmp_result;
    PyObject *exception_keeper_type_2;
    PyObject *exception_keeper_value_2;
    PyTracebackObject *exception_keeper_tb_2;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_2;
    PyObject *exception_keeper_type_3;
    PyObject *exception_keeper_value_3;
    PyTracebackObject *exception_keeper_tb_3;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_3;
    static struct Nuitka_FrameObject *cache_frame_9211ede61843307a8618562589961416 = NULL;
    PyObject *exception_keeper_type_4;
    PyObject *exception_keeper_value_4;
    PyTracebackObject *exception_keeper_tb_4;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_4;

    // Actual function body.
    // Tried code:
    MAKE_OR_REUSE_FRAME( cache_frame_9211ede61843307a8618562589961416, codeobj_9211ede61843307a8618562589961416, module_platform, sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *) );
    frame_9211ede61843307a8618562589961416 = cache_frame_9211ede61843307a8618562589961416;

    // Push the new frame as the currently active one.
    pushFrameStack( frame_9211ede61843307a8618562589961416 );

    // Mark the frame object as in use, ref count 1 will be up for reuse.
    assert( Py_REFCNT( frame_9211ede61843307a8618562589961416 ) == 2 ); // Frame stack

    // Framed code:
    {
        nuitka_bool tmp_condition_result_1;
        PyObject *tmp_compexpr_left_1;
        PyObject *tmp_compexpr_right_1;
        CHECK_OBJECT( par_system );
        tmp_compexpr_left_1 = par_system;
        tmp_compexpr_right_1 = const_str_plain_Rhapsody;
        tmp_res = RICH_COMPARE_BOOL_EQ_OBJECT_OBJECT( tmp_compexpr_left_1, tmp_compexpr_right_1 );
        if ( tmp_res == -1 )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 677;
            type_description_1 = "ooooo";
            goto frame_exception_exit_1;
        }
        tmp_condition_result_1 = ( tmp_res != 0 ) ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
        if ( tmp_condition_result_1 == NUITKA_BOOL_TRUE )
        {
            goto branch_yes_1;
        }
        else
        {
            goto branch_no_1;
        }
        branch_yes_1:;
        {
            PyObject *tmp_tuple_element_1;
            PyObject *tmp_left_name_1;
            PyObject *tmp_right_name_1;
            tmp_tuple_element_1 = const_str_digest_1686aa75cea0515b58f7c447ad521e76;
            tmp_return_value = PyTuple_New( 3 );
            Py_INCREF( tmp_tuple_element_1 );
            PyTuple_SET_ITEM( tmp_return_value, 0, tmp_tuple_element_1 );
            CHECK_OBJECT( par_system );
            tmp_left_name_1 = par_system;
            CHECK_OBJECT( par_release );
            tmp_right_name_1 = par_release;
            tmp_tuple_element_1 = BINARY_OPERATION_ADD_OBJECT_OBJECT( tmp_left_name_1, tmp_right_name_1 );
            if ( tmp_tuple_element_1 == NULL )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
                Py_DECREF( tmp_return_value );

                exception_lineno = 680;
                type_description_1 = "ooooo";
                goto frame_exception_exit_1;
            }
            PyTuple_SET_ITEM( tmp_return_value, 1, tmp_tuple_element_1 );
            CHECK_OBJECT( par_version );
            tmp_tuple_element_1 = par_version;
            Py_INCREF( tmp_tuple_element_1 );
            PyTuple_SET_ITEM( tmp_return_value, 2, tmp_tuple_element_1 );
            goto frame_return_exit_1;
        }
        goto branch_end_1;
        branch_no_1:;
        {
            nuitka_bool tmp_condition_result_2;
            PyObject *tmp_compexpr_left_2;
            PyObject *tmp_compexpr_right_2;
            CHECK_OBJECT( par_system );
            tmp_compexpr_left_2 = par_system;
            tmp_compexpr_right_2 = const_str_plain_SunOS;
            tmp_res = RICH_COMPARE_BOOL_EQ_OBJECT_OBJECT( tmp_compexpr_left_2, tmp_compexpr_right_2 );
            if ( tmp_res == -1 )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 682;
                type_description_1 = "ooooo";
                goto frame_exception_exit_1;
            }
            tmp_condition_result_2 = ( tmp_res != 0 ) ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
            if ( tmp_condition_result_2 == NUITKA_BOOL_TRUE )
            {
                goto branch_yes_2;
            }
            else
            {
                goto branch_no_2;
            }
            branch_yes_2:;
            {
                nuitka_bool tmp_condition_result_3;
                PyObject *tmp_compexpr_left_3;
                PyObject *tmp_compexpr_right_3;
                CHECK_OBJECT( par_release );
                tmp_compexpr_left_3 = par_release;
                tmp_compexpr_right_3 = const_str_plain_5;
                tmp_res = RICH_COMPARE_BOOL_LT_OBJECT_OBJECT( tmp_compexpr_left_3, tmp_compexpr_right_3 );
                if ( tmp_res == -1 )
                {
                    assert( ERROR_OCCURRED() );

                    FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                    exception_lineno = 684;
                    type_description_1 = "ooooo";
                    goto frame_exception_exit_1;
                }
                tmp_condition_result_3 = ( tmp_res != 0 ) ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
                if ( tmp_condition_result_3 == NUITKA_BOOL_TRUE )
                {
                    goto branch_yes_3;
                }
                else
                {
                    goto branch_no_3;
                }
                branch_yes_3:;
                {
                    PyObject *tmp_tuple_element_2;
                    CHECK_OBJECT( par_system );
                    tmp_tuple_element_2 = par_system;
                    tmp_return_value = PyTuple_New( 3 );
                    Py_INCREF( tmp_tuple_element_2 );
                    PyTuple_SET_ITEM( tmp_return_value, 0, tmp_tuple_element_2 );
                    CHECK_OBJECT( par_release );
                    tmp_tuple_element_2 = par_release;
                    Py_INCREF( tmp_tuple_element_2 );
                    PyTuple_SET_ITEM( tmp_return_value, 1, tmp_tuple_element_2 );
                    CHECK_OBJECT( par_version );
                    tmp_tuple_element_2 = par_version;
                    Py_INCREF( tmp_tuple_element_2 );
                    PyTuple_SET_ITEM( tmp_return_value, 2, tmp_tuple_element_2 );
                    goto frame_return_exit_1;
                }
                branch_no_3:;
            }
            {
                PyObject *tmp_assign_source_1;
                PyObject *tmp_called_instance_1;
                CHECK_OBJECT( par_release );
                tmp_called_instance_1 = par_release;
                frame_9211ede61843307a8618562589961416->m_frame.f_lineno = 688;
                tmp_assign_source_1 = CALL_METHOD_WITH_ARGS1( tmp_called_instance_1, const_str_plain_split, &PyTuple_GET_ITEM( const_tuple_str_dot_tuple, 0 ) );

                if ( tmp_assign_source_1 == NULL )
                {
                    assert( ERROR_OCCURRED() );

                    FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                    exception_lineno = 688;
                    type_description_1 = "ooooo";
                    goto frame_exception_exit_1;
                }
                assert( var_l == NULL );
                var_l = tmp_assign_source_1;
            }
            {
                nuitka_bool tmp_condition_result_4;
                int tmp_truth_name_1;
                CHECK_OBJECT( var_l );
                tmp_truth_name_1 = CHECK_IF_TRUE( var_l );
                if ( tmp_truth_name_1 == -1 )
                {
                    assert( ERROR_OCCURRED() );

                    FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                    exception_lineno = 689;
                    type_description_1 = "ooooo";
                    goto frame_exception_exit_1;
                }
                tmp_condition_result_4 = tmp_truth_name_1 == 1 ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
                if ( tmp_condition_result_4 == NUITKA_BOOL_TRUE )
                {
                    goto branch_yes_4;
                }
                else
                {
                    goto branch_no_4;
                }
                branch_yes_4:;
                {
                    nuitka_bool tmp_assign_source_2;
                    tmp_assign_source_2 = NUITKA_BOOL_TRUE;
                    tmp_try_except_1__unhandled_indicator = tmp_assign_source_2;
                }
                // Tried code:
                // Tried code:
                {
                    PyObject *tmp_assign_source_3;
                    PyObject *tmp_int_arg_1;
                    PyObject *tmp_subscribed_name_1;
                    PyObject *tmp_subscript_name_1;
                    CHECK_OBJECT( var_l );
                    tmp_subscribed_name_1 = var_l;
                    tmp_subscript_name_1 = const_int_0;
                    tmp_int_arg_1 = LOOKUP_SUBSCRIPT_CONST( tmp_subscribed_name_1, tmp_subscript_name_1, 0 );
                    if ( tmp_int_arg_1 == NULL )
                    {
                        assert( ERROR_OCCURRED() );

                        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                        exception_lineno = 691;
                        type_description_1 = "ooooo";
                        goto try_except_handler_3;
                    }
                    tmp_assign_source_3 = PyNumber_Int( tmp_int_arg_1 );
                    Py_DECREF( tmp_int_arg_1 );
                    if ( tmp_assign_source_3 == NULL )
                    {
                        assert( ERROR_OCCURRED() );

                        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                        exception_lineno = 691;
                        type_description_1 = "ooooo";
                        goto try_except_handler_3;
                    }
                    assert( var_major == NULL );
                    var_major = tmp_assign_source_3;
                }
                goto try_end_1;
                // Exception handler code:
                try_except_handler_3:;
                exception_keeper_type_1 = exception_type;
                exception_keeper_value_1 = exception_value;
                exception_keeper_tb_1 = exception_tb;
                exception_keeper_lineno_1 = exception_lineno;
                exception_type = NULL;
                exception_value = NULL;
                exception_tb = NULL;
                exception_lineno = 0;

                {
                    nuitka_bool tmp_assign_source_4;
                    tmp_assign_source_4 = NUITKA_BOOL_FALSE;
                    tmp_try_except_1__unhandled_indicator = tmp_assign_source_4;
                }
                // Preserve existing published exception.
                exception_preserved_type_1 = EXC_TYPE(PyThreadState_GET());
                Py_XINCREF( exception_preserved_type_1 );
                exception_preserved_value_1 = EXC_VALUE(PyThreadState_GET());
                Py_XINCREF( exception_preserved_value_1 );
                exception_preserved_tb_1 = (PyTracebackObject *)EXC_TRACEBACK(PyThreadState_GET());
                Py_XINCREF( exception_preserved_tb_1 );

                if ( exception_keeper_tb_1 == NULL )
                {
                    exception_keeper_tb_1 = MAKE_TRACEBACK( frame_9211ede61843307a8618562589961416, exception_keeper_lineno_1 );
                }
                else if ( exception_keeper_lineno_1 != 0 )
                {
                    exception_keeper_tb_1 = ADD_TRACEBACK( exception_keeper_tb_1, frame_9211ede61843307a8618562589961416, exception_keeper_lineno_1 );
                }

                NORMALIZE_EXCEPTION( &exception_keeper_type_1, &exception_keeper_value_1, &exception_keeper_tb_1 );
                PyException_SetTraceback( exception_keeper_value_1, (PyObject *)exception_keeper_tb_1 );
                PUBLISH_EXCEPTION( &exception_keeper_type_1, &exception_keeper_value_1, &exception_keeper_tb_1 );
                // Tried code:
                {
                    nuitka_bool tmp_condition_result_5;
                    PyObject *tmp_operand_name_1;
                    PyObject *tmp_compexpr_left_4;
                    PyObject *tmp_compexpr_right_4;
                    tmp_compexpr_left_4 = EXC_TYPE(PyThreadState_GET());
                    tmp_compexpr_right_4 = PyExc_ValueError;
                    tmp_res = EXCEPTION_MATCH_BOOL( tmp_compexpr_left_4, tmp_compexpr_right_4 );
                    if ( tmp_res == -1 )
                    {
                        assert( ERROR_OCCURRED() );

                        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                        exception_lineno = 692;
                        type_description_1 = "ooooo";
                        goto try_except_handler_4;
                    }
                    tmp_operand_name_1 = ( tmp_res != 0 ) ? Py_True : Py_False;
                    tmp_res = CHECK_IF_TRUE( tmp_operand_name_1 );
                    if ( tmp_res == -1 )
                    {
                        assert( ERROR_OCCURRED() );

                        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                        exception_lineno = 692;
                        type_description_1 = "ooooo";
                        goto try_except_handler_4;
                    }
                    tmp_condition_result_5 = ( tmp_res == 0 ) ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
                    if ( tmp_condition_result_5 == NUITKA_BOOL_TRUE )
                    {
                        goto branch_yes_5;
                    }
                    else
                    {
                        goto branch_no_5;
                    }
                    branch_yes_5:;
                    tmp_result = RERAISE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
                    if (unlikely( tmp_result == false ))
                    {
                        exception_lineno = 690;
                    }

                    if (exception_tb && exception_tb->tb_frame == &frame_9211ede61843307a8618562589961416->m_frame) frame_9211ede61843307a8618562589961416->m_frame.f_lineno = exception_tb->tb_lineno;
                    type_description_1 = "ooooo";
                    goto try_except_handler_4;
                    branch_no_5:;
                }
                goto try_end_2;
                // Exception handler code:
                try_except_handler_4:;
                exception_keeper_type_2 = exception_type;
                exception_keeper_value_2 = exception_value;
                exception_keeper_tb_2 = exception_tb;
                exception_keeper_lineno_2 = exception_lineno;
                exception_type = NULL;
                exception_value = NULL;
                exception_tb = NULL;
                exception_lineno = 0;

                // Restore previous exception.
                SET_CURRENT_EXCEPTION( exception_preserved_type_1, exception_preserved_value_1, exception_preserved_tb_1 );
                // Re-raise.
                exception_type = exception_keeper_type_2;
                exception_value = exception_keeper_value_2;
                exception_tb = exception_keeper_tb_2;
                exception_lineno = exception_keeper_lineno_2;

                goto try_except_handler_2;
                // End of try:
                try_end_2:;
                // Restore previous exception.
                SET_CURRENT_EXCEPTION( exception_preserved_type_1, exception_preserved_value_1, exception_preserved_tb_1 );
                goto try_end_1;
                // exception handler codes exits in all cases
                NUITKA_CANNOT_GET_HERE( platform$$$function_16_system_alias );
                return NULL;
                // End of try:
                try_end_1:;
                {
                    nuitka_bool tmp_condition_result_6;
                    nuitka_bool tmp_compexpr_left_5;
                    nuitka_bool tmp_compexpr_right_5;
                    assert( tmp_try_except_1__unhandled_indicator != NUITKA_BOOL_UNASSIGNED);
                    tmp_compexpr_left_5 = tmp_try_except_1__unhandled_indicator;
                    tmp_compexpr_right_5 = NUITKA_BOOL_TRUE;
                    tmp_condition_result_6 = ( tmp_compexpr_left_5 == tmp_compexpr_right_5 ) ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
                    if ( tmp_condition_result_6 == NUITKA_BOOL_TRUE )
                    {
                        goto branch_yes_6;
                    }
                    else
                    {
                        goto branch_no_6;
                    }
                    branch_yes_6:;
                    {
                        PyObject *tmp_assign_source_5;
                        PyObject *tmp_left_name_2;
                        PyObject *tmp_right_name_2;
                        if ( var_major == NULL )
                        {

                            exception_type = PyExc_UnboundLocalError;
                            Py_INCREF( exception_type );
                            exception_value = PyUnicode_FromFormat( "local variable '%s' referenced before assignment", "major" );
                            exception_tb = NULL;
                            NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
                            CHAIN_EXCEPTION( exception_value );

                            exception_lineno = 695;
                            type_description_1 = "ooooo";
                            goto try_except_handler_2;
                        }

                        tmp_left_name_2 = var_major;
                        tmp_right_name_2 = const_int_pos_3;
                        tmp_assign_source_5 = BINARY_OPERATION_SUB( tmp_left_name_2, tmp_right_name_2 );
                        if ( tmp_assign_source_5 == NULL )
                        {
                            assert( ERROR_OCCURRED() );

                            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                            exception_lineno = 695;
                            type_description_1 = "ooooo";
                            goto try_except_handler_2;
                        }
                        {
                            PyObject *old = var_major;
                            var_major = tmp_assign_source_5;
                            Py_XDECREF( old );
                        }

                    }
                    {
                        PyObject *tmp_ass_subvalue_1;
                        PyObject *tmp_unicode_arg_1;
                        PyObject *tmp_ass_subscribed_1;
                        PyObject *tmp_ass_subscript_1;
                        int tmp_ass_subscript_res_1;
                        CHECK_OBJECT( var_major );
                        tmp_unicode_arg_1 = var_major;
                        tmp_ass_subvalue_1 = PyObject_Unicode( tmp_unicode_arg_1 );
                        if ( tmp_ass_subvalue_1 == NULL )
                        {
                            assert( ERROR_OCCURRED() );

                            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                            exception_lineno = 696;
                            type_description_1 = "ooooo";
                            goto try_except_handler_2;
                        }
                        CHECK_OBJECT( var_l );
                        tmp_ass_subscribed_1 = var_l;
                        tmp_ass_subscript_1 = const_int_0;
                        tmp_ass_subscript_res_1 = SET_SUBSCRIPT_CONST( tmp_ass_subscribed_1, tmp_ass_subscript_1, 0, tmp_ass_subvalue_1 );
                        Py_DECREF( tmp_ass_subvalue_1 );
                        if ( tmp_ass_subscript_res_1 == false )
                        {
                            assert( ERROR_OCCURRED() );

                            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                            exception_lineno = 696;
                            type_description_1 = "ooooo";
                            goto try_except_handler_2;
                        }
                    }
                    {
                        PyObject *tmp_assign_source_6;
                        PyObject *tmp_called_instance_2;
                        PyObject *tmp_args_element_name_1;
                        tmp_called_instance_2 = const_str_dot;
                        CHECK_OBJECT( var_l );
                        tmp_args_element_name_1 = var_l;
                        frame_9211ede61843307a8618562589961416->m_frame.f_lineno = 697;
                        {
                            PyObject *call_args[] = { tmp_args_element_name_1 };
                            tmp_assign_source_6 = CALL_METHOD_WITH_ARGS1( tmp_called_instance_2, const_str_plain_join, call_args );
                        }

                        if ( tmp_assign_source_6 == NULL )
                        {
                            assert( ERROR_OCCURRED() );

                            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                            exception_lineno = 697;
                            type_description_1 = "ooooo";
                            goto try_except_handler_2;
                        }
                        {
                            PyObject *old = par_release;
                            assert( old != NULL );
                            par_release = tmp_assign_source_6;
                            Py_DECREF( old );
                        }

                    }
                    branch_no_6:;
                }
                goto try_end_3;
                // Exception handler code:
                try_except_handler_2:;
                exception_keeper_type_3 = exception_type;
                exception_keeper_value_3 = exception_value;
                exception_keeper_tb_3 = exception_tb;
                exception_keeper_lineno_3 = exception_lineno;
                exception_type = NULL;
                exception_value = NULL;
                exception_tb = NULL;
                exception_lineno = 0;

                // Re-raise.
                exception_type = exception_keeper_type_3;
                exception_value = exception_keeper_value_3;
                exception_tb = exception_keeper_tb_3;
                exception_lineno = exception_keeper_lineno_3;

                goto frame_exception_exit_1;
                // End of try:
                try_end_3:;
                branch_no_4:;
            }
            {
                nuitka_bool tmp_condition_result_7;
                PyObject *tmp_compexpr_left_6;
                PyObject *tmp_compexpr_right_6;
                if ( par_release == NULL )
                {

                    exception_type = PyExc_UnboundLocalError;
                    Py_INCREF( exception_type );
                    exception_value = PyUnicode_FromFormat( "local variable '%s' referenced before assignment", "release" );
                    exception_tb = NULL;
                    NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
                    CHAIN_EXCEPTION( exception_value );

                    exception_lineno = 698;
                    type_description_1 = "ooooo";
                    goto frame_exception_exit_1;
                }

                tmp_compexpr_left_6 = par_release;
                tmp_compexpr_right_6 = const_str_plain_6;
                tmp_res = RICH_COMPARE_BOOL_LT_OBJECT_OBJECT( tmp_compexpr_left_6, tmp_compexpr_right_6 );
                if ( tmp_res == -1 )
                {
                    assert( ERROR_OCCURRED() );

                    FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                    exception_lineno = 698;
                    type_description_1 = "ooooo";
                    goto frame_exception_exit_1;
                }
                tmp_condition_result_7 = ( tmp_res != 0 ) ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
                if ( tmp_condition_result_7 == NUITKA_BOOL_TRUE )
                {
                    goto branch_yes_7;
                }
                else
                {
                    goto branch_no_7;
                }
                branch_yes_7:;
                {
                    PyObject *tmp_assign_source_7;
                    tmp_assign_source_7 = const_str_plain_Solaris;
                    {
                        PyObject *old = par_system;
                        assert( old != NULL );
                        par_system = tmp_assign_source_7;
                        Py_INCREF( par_system );
                        Py_DECREF( old );
                    }

                }
                goto branch_end_7;
                branch_no_7:;
                {
                    PyObject *tmp_assign_source_8;
                    tmp_assign_source_8 = const_str_plain_Solaris;
                    {
                        PyObject *old = par_system;
                        assert( old != NULL );
                        par_system = tmp_assign_source_8;
                        Py_INCREF( par_system );
                        Py_DECREF( old );
                    }

                }
                branch_end_7:;
            }
            goto branch_end_2;
            branch_no_2:;
            {
                nuitka_bool tmp_condition_result_8;
                PyObject *tmp_compexpr_left_7;
                PyObject *tmp_compexpr_right_7;
                CHECK_OBJECT( par_system );
                tmp_compexpr_left_7 = par_system;
                tmp_compexpr_right_7 = const_str_plain_IRIX64;
                tmp_res = RICH_COMPARE_BOOL_EQ_OBJECT_OBJECT( tmp_compexpr_left_7, tmp_compexpr_right_7 );
                if ( tmp_res == -1 )
                {
                    assert( ERROR_OCCURRED() );

                    FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                    exception_lineno = 704;
                    type_description_1 = "ooooo";
                    goto frame_exception_exit_1;
                }
                tmp_condition_result_8 = ( tmp_res != 0 ) ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
                if ( tmp_condition_result_8 == NUITKA_BOOL_TRUE )
                {
                    goto branch_yes_8;
                }
                else
                {
                    goto branch_no_8;
                }
                branch_yes_8:;
                {
                    PyObject *tmp_assign_source_9;
                    tmp_assign_source_9 = const_str_plain_IRIX;
                    {
                        PyObject *old = par_system;
                        assert( old != NULL );
                        par_system = tmp_assign_source_9;
                        Py_INCREF( par_system );
                        Py_DECREF( old );
                    }

                }
                {
                    nuitka_bool tmp_condition_result_9;
                    int tmp_truth_name_2;
                    CHECK_OBJECT( par_version );
                    tmp_truth_name_2 = CHECK_IF_TRUE( par_version );
                    if ( tmp_truth_name_2 == -1 )
                    {
                        assert( ERROR_OCCURRED() );

                        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                        exception_lineno = 709;
                        type_description_1 = "ooooo";
                        goto frame_exception_exit_1;
                    }
                    tmp_condition_result_9 = tmp_truth_name_2 == 1 ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
                    if ( tmp_condition_result_9 == NUITKA_BOOL_TRUE )
                    {
                        goto branch_yes_9;
                    }
                    else
                    {
                        goto branch_no_9;
                    }
                    branch_yes_9:;
                    {
                        PyObject *tmp_assign_source_10;
                        PyObject *tmp_left_name_3;
                        PyObject *tmp_right_name_3;
                        CHECK_OBJECT( par_version );
                        tmp_left_name_3 = par_version;
                        tmp_right_name_3 = const_str_digest_43d8f87da2b2c6b18435c9fb92d7d50d;
                        tmp_assign_source_10 = BINARY_OPERATION_ADD_OBJECT_UNICODE( tmp_left_name_3, tmp_right_name_3 );
                        if ( tmp_assign_source_10 == NULL )
                        {
                            assert( ERROR_OCCURRED() );

                            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                            exception_lineno = 710;
                            type_description_1 = "ooooo";
                            goto frame_exception_exit_1;
                        }
                        {
                            PyObject *old = par_version;
                            assert( old != NULL );
                            par_version = tmp_assign_source_10;
                            Py_DECREF( old );
                        }

                    }
                    goto branch_end_9;
                    branch_no_9:;
                    {
                        PyObject *tmp_assign_source_11;
                        tmp_assign_source_11 = const_str_plain_64bit;
                        {
                            PyObject *old = par_version;
                            assert( old != NULL );
                            par_version = tmp_assign_source_11;
                            Py_INCREF( par_version );
                            Py_DECREF( old );
                        }

                    }
                    branch_end_9:;
                }
                goto branch_end_8;
                branch_no_8:;
                {
                    nuitka_bool tmp_condition_result_10;
                    PyObject *tmp_compexpr_left_8;
                    PyObject *tmp_compexpr_right_8;
                    CHECK_OBJECT( par_system );
                    tmp_compexpr_left_8 = par_system;
                    tmp_compexpr_right_8 = const_tuple_str_plain_win32_str_plain_win16_tuple;
                    tmp_res = PySequence_Contains( tmp_compexpr_right_8, tmp_compexpr_left_8 );
                    if ( tmp_res == -1 )
                    {
                        assert( ERROR_OCCURRED() );

                        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                        exception_lineno = 714;
                        type_description_1 = "ooooo";
                        goto frame_exception_exit_1;
                    }
                    tmp_condition_result_10 = ( tmp_res == 1 ) ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
                    if ( tmp_condition_result_10 == NUITKA_BOOL_TRUE )
                    {
                        goto branch_yes_10;
                    }
                    else
                    {
                        goto branch_no_10;
                    }
                    branch_yes_10:;
                    {
                        PyObject *tmp_assign_source_12;
                        tmp_assign_source_12 = const_str_plain_Windows;
                        {
                            PyObject *old = par_system;
                            assert( old != NULL );
                            par_system = tmp_assign_source_12;
                            Py_INCREF( par_system );
                            Py_DECREF( old );
                        }

                    }
                    branch_no_10:;
                }
                branch_end_8:;
            }
            branch_end_2:;
        }
        branch_end_1:;
    }
    {
        PyObject *tmp_tuple_element_3;
        if ( par_system == NULL )
        {

            exception_type = PyExc_UnboundLocalError;
            Py_INCREF( exception_type );
            exception_value = PyUnicode_FromFormat( "local variable '%s' referenced before assignment", "system" );
            exception_tb = NULL;
            NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
            CHAIN_EXCEPTION( exception_value );

            exception_lineno = 718;
            type_description_1 = "ooooo";
            goto frame_exception_exit_1;
        }

        tmp_tuple_element_3 = par_system;
        tmp_return_value = PyTuple_New( 3 );
        Py_INCREF( tmp_tuple_element_3 );
        PyTuple_SET_ITEM( tmp_return_value, 0, tmp_tuple_element_3 );
        if ( par_release == NULL )
        {
            Py_DECREF( tmp_return_value );
            exception_type = PyExc_UnboundLocalError;
            Py_INCREF( exception_type );
            exception_value = PyUnicode_FromFormat( "local variable '%s' referenced before assignment", "release" );
            exception_tb = NULL;
            NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
            CHAIN_EXCEPTION( exception_value );

            exception_lineno = 718;
            type_description_1 = "ooooo";
            goto frame_exception_exit_1;
        }

        tmp_tuple_element_3 = par_release;
        Py_INCREF( tmp_tuple_element_3 );
        PyTuple_SET_ITEM( tmp_return_value, 1, tmp_tuple_element_3 );
        if ( par_version == NULL )
        {
            Py_DECREF( tmp_return_value );
            exception_type = PyExc_UnboundLocalError;
            Py_INCREF( exception_type );
            exception_value = PyUnicode_FromFormat( "local variable '%s' referenced before assignment", "version" );
            exception_tb = NULL;
            NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
            CHAIN_EXCEPTION( exception_value );

            exception_lineno = 718;
            type_description_1 = "ooooo";
            goto frame_exception_exit_1;
        }

        tmp_tuple_element_3 = par_version;
        Py_INCREF( tmp_tuple_element_3 );
        PyTuple_SET_ITEM( tmp_return_value, 2, tmp_tuple_element_3 );
        goto frame_return_exit_1;
    }

#if 0
    RESTORE_FRAME_EXCEPTION( frame_9211ede61843307a8618562589961416 );
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto frame_no_exception_1;

    frame_return_exit_1:;
#if 0
    RESTORE_FRAME_EXCEPTION( frame_9211ede61843307a8618562589961416 );
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto try_return_handler_1;

    frame_exception_exit_1:;

#if 0
    RESTORE_FRAME_EXCEPTION( frame_9211ede61843307a8618562589961416 );
#endif

    if ( exception_tb == NULL )
    {
        exception_tb = MAKE_TRACEBACK( frame_9211ede61843307a8618562589961416, exception_lineno );
    }
    else if ( exception_tb->tb_frame != &frame_9211ede61843307a8618562589961416->m_frame )
    {
        exception_tb = ADD_TRACEBACK( exception_tb, frame_9211ede61843307a8618562589961416, exception_lineno );
    }

    // Attachs locals to frame if any.
    Nuitka_Frame_AttachLocals(
        (struct Nuitka_FrameObject *)frame_9211ede61843307a8618562589961416,
        type_description_1,
        par_system,
        par_release,
        par_version,
        var_l,
        var_major
    );


    // Release cached frame.
    if ( frame_9211ede61843307a8618562589961416 == cache_frame_9211ede61843307a8618562589961416 )
    {
        Py_DECREF( frame_9211ede61843307a8618562589961416 );
    }
    cache_frame_9211ede61843307a8618562589961416 = NULL;

    assertFrameObject( frame_9211ede61843307a8618562589961416 );

    // Put the previous frame back on top.
    popFrameStack();

    // Return the error.
    goto try_except_handler_1;

    frame_no_exception_1:;
    // tried codes exits in all cases
    NUITKA_CANNOT_GET_HERE( platform$$$function_16_system_alias );
    return NULL;
    // Return handler code:
    try_return_handler_1:;
    Py_XDECREF( par_system );
    par_system = NULL;

    Py_XDECREF( par_release );
    par_release = NULL;

    Py_XDECREF( par_version );
    par_version = NULL;

    Py_XDECREF( var_l );
    var_l = NULL;

    Py_XDECREF( var_major );
    var_major = NULL;

    goto function_return_exit;
    // Exception handler code:
    try_except_handler_1:;
    exception_keeper_type_4 = exception_type;
    exception_keeper_value_4 = exception_value;
    exception_keeper_tb_4 = exception_tb;
    exception_keeper_lineno_4 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    Py_XDECREF( par_system );
    par_system = NULL;

    Py_XDECREF( par_release );
    par_release = NULL;

    Py_XDECREF( par_version );
    par_version = NULL;

    Py_XDECREF( var_l );
    var_l = NULL;

    Py_XDECREF( var_major );
    var_major = NULL;

    // Re-raise.
    exception_type = exception_keeper_type_4;
    exception_value = exception_keeper_value_4;
    exception_tb = exception_keeper_tb_4;
    exception_lineno = exception_keeper_lineno_4;

    goto function_exception_exit;
    // End of try:

    // Return statement must have exited already.
    NUITKA_CANNOT_GET_HERE( platform$$$function_16_system_alias );
    return NULL;

function_exception_exit:
    assert( exception_type );
    RESTORE_ERROR_OCCURRED( exception_type, exception_value, exception_tb );

    return NULL;

function_return_exit:
   // Function cleanup code if any.


   // Actual function exit with return value, making sure we did not make
   // the error status worse despite non-NULL return.
   CHECK_OBJECT( tmp_return_value );
   assert( had_error || !ERROR_OCCURRED() );
   return tmp_return_value;
}


static PyObject *impl_platform$$$function_17__platform( struct Nuitka_FunctionObject const *self, PyObject **python_pars )
{
    // Preserve error status for checks
#ifndef __NUITKA_NO_ASSERT__
    NUITKA_MAY_BE_UNUSED bool had_error = ERROR_OCCURRED();
#endif

    // Local variable declarations.
    PyObject *par_args = python_pars[ 0 ];
    PyObject *var_platform = NULL;
    PyObject *var_cleaned = NULL;
    PyObject *tmp_genexpr_1__$0 = NULL;
    struct Nuitka_FrameObject *frame_59c2cc43609bae23e7a57f0b2d56bd1c;
    NUITKA_MAY_BE_UNUSED char const *type_description_1 = NULL;
    PyObject *exception_type = NULL;
    PyObject *exception_value = NULL;
    PyTracebackObject *exception_tb = NULL;
    NUITKA_MAY_BE_UNUSED int exception_lineno = 0;
    int tmp_res;
    static struct Nuitka_FrameObject *cache_frame_59c2cc43609bae23e7a57f0b2d56bd1c = NULL;
    PyObject *tmp_return_value = NULL;
    PyObject *exception_keeper_type_1;
    PyObject *exception_keeper_value_1;
    PyTracebackObject *exception_keeper_tb_1;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_1;

    // Actual function body.
    // Tried code:
    MAKE_OR_REUSE_FRAME( cache_frame_59c2cc43609bae23e7a57f0b2d56bd1c, codeobj_59c2cc43609bae23e7a57f0b2d56bd1c, module_platform, sizeof(void *)+sizeof(void *)+sizeof(void *) );
    frame_59c2cc43609bae23e7a57f0b2d56bd1c = cache_frame_59c2cc43609bae23e7a57f0b2d56bd1c;

    // Push the new frame as the currently active one.
    pushFrameStack( frame_59c2cc43609bae23e7a57f0b2d56bd1c );

    // Mark the frame object as in use, ref count 1 will be up for reuse.
    assert( Py_REFCNT( frame_59c2cc43609bae23e7a57f0b2d56bd1c ) == 2 ); // Frame stack

    // Framed code:
    {
        PyObject *tmp_assign_source_1;
        PyObject *tmp_called_name_1;
        PyObject *tmp_source_name_1;
        PyObject *tmp_args_element_name_1;
        tmp_source_name_1 = const_str_chr_45;
        tmp_called_name_1 = LOOKUP_ATTRIBUTE( tmp_source_name_1, const_str_plain_join );
        assert( !(tmp_called_name_1 == NULL) );
        {
            PyObject *tmp_assign_source_2;
            PyObject *tmp_iter_arg_1;
            PyObject *tmp_called_name_2;
            PyObject *tmp_args_element_name_2;
            PyObject *tmp_args_element_name_3;
            tmp_called_name_2 = (PyObject *)&PyFilter_Type;
            tmp_args_element_name_2 = LOOKUP_BUILTIN( const_str_plain_len );
            assert( tmp_args_element_name_2 != NULL );
            CHECK_OBJECT( par_args );
            tmp_args_element_name_3 = par_args;
            frame_59c2cc43609bae23e7a57f0b2d56bd1c->m_frame.f_lineno = 728;
            {
                PyObject *call_args[] = { tmp_args_element_name_2, tmp_args_element_name_3 };
                tmp_iter_arg_1 = CALL_FUNCTION_WITH_ARGS2( tmp_called_name_2, call_args );
            }

            if ( tmp_iter_arg_1 == NULL )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 728;
                type_description_1 = "ooo";
                goto frame_exception_exit_1;
            }
            tmp_assign_source_2 = MAKE_ITERATOR( tmp_iter_arg_1 );
            Py_DECREF( tmp_iter_arg_1 );
            if ( tmp_assign_source_2 == NULL )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 728;
                type_description_1 = "ooo";
                goto frame_exception_exit_1;
            }
            assert( tmp_genexpr_1__$0 == NULL );
            tmp_genexpr_1__$0 = tmp_assign_source_2;
        }
        // Tried code:
        tmp_args_element_name_1 = platform$$$function_17__platform$$$genexpr_1_genexpr_maker();

        ((struct Nuitka_GeneratorObject *)tmp_args_element_name_1)->m_closure[0] = PyCell_NEW0( tmp_genexpr_1__$0 );


        goto try_return_handler_2;
        // tried codes exits in all cases
        NUITKA_CANNOT_GET_HERE( platform$$$function_17__platform );
        return NULL;
        // Return handler code:
        try_return_handler_2:;
        CHECK_OBJECT( (PyObject *)tmp_genexpr_1__$0 );
        Py_DECREF( tmp_genexpr_1__$0 );
        tmp_genexpr_1__$0 = NULL;

        goto outline_result_1;
        // End of try:
        CHECK_OBJECT( (PyObject *)tmp_genexpr_1__$0 );
        Py_DECREF( tmp_genexpr_1__$0 );
        tmp_genexpr_1__$0 = NULL;

        // Return statement must have exited already.
        NUITKA_CANNOT_GET_HERE( platform$$$function_17__platform );
        return NULL;
        outline_result_1:;
        frame_59c2cc43609bae23e7a57f0b2d56bd1c->m_frame.f_lineno = 728;
        {
            PyObject *call_args[] = { tmp_args_element_name_1 };
            tmp_assign_source_1 = CALL_FUNCTION_WITH_ARGS1( tmp_called_name_1, call_args );
        }

        Py_DECREF( tmp_called_name_1 );
        Py_DECREF( tmp_args_element_name_1 );
        if ( tmp_assign_source_1 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 728;
            type_description_1 = "ooo";
            goto frame_exception_exit_1;
        }
        assert( var_platform == NULL );
        var_platform = tmp_assign_source_1;
    }
    {
        PyObject *tmp_assign_source_3;
        PyObject *tmp_called_instance_1;
        CHECK_OBJECT( var_platform );
        tmp_called_instance_1 = var_platform;
        frame_59c2cc43609bae23e7a57f0b2d56bd1c->m_frame.f_lineno = 731;
        tmp_assign_source_3 = CALL_METHOD_WITH_ARGS2( tmp_called_instance_1, const_str_plain_replace, &PyTuple_GET_ITEM( const_tuple_str_space_str_plain___tuple, 0 ) );

        if ( tmp_assign_source_3 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 731;
            type_description_1 = "ooo";
            goto frame_exception_exit_1;
        }
        {
            PyObject *old = var_platform;
            assert( old != NULL );
            var_platform = tmp_assign_source_3;
            Py_DECREF( old );
        }

    }
    {
        PyObject *tmp_assign_source_4;
        PyObject *tmp_called_instance_2;
        CHECK_OBJECT( var_platform );
        tmp_called_instance_2 = var_platform;
        frame_59c2cc43609bae23e7a57f0b2d56bd1c->m_frame.f_lineno = 732;
        tmp_assign_source_4 = CALL_METHOD_WITH_ARGS2( tmp_called_instance_2, const_str_plain_replace, &PyTuple_GET_ITEM( const_tuple_str_chr_47_str_chr_45_tuple, 0 ) );

        if ( tmp_assign_source_4 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 732;
            type_description_1 = "ooo";
            goto frame_exception_exit_1;
        }
        {
            PyObject *old = var_platform;
            assert( old != NULL );
            var_platform = tmp_assign_source_4;
            Py_DECREF( old );
        }

    }
    {
        PyObject *tmp_assign_source_5;
        PyObject *tmp_called_instance_3;
        CHECK_OBJECT( var_platform );
        tmp_called_instance_3 = var_platform;
        frame_59c2cc43609bae23e7a57f0b2d56bd1c->m_frame.f_lineno = 733;
        tmp_assign_source_5 = CALL_METHOD_WITH_ARGS2( tmp_called_instance_3, const_str_plain_replace, &PyTuple_GET_ITEM( const_tuple_str_chr_92_str_chr_45_tuple, 0 ) );

        if ( tmp_assign_source_5 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 733;
            type_description_1 = "ooo";
            goto frame_exception_exit_1;
        }
        {
            PyObject *old = var_platform;
            assert( old != NULL );
            var_platform = tmp_assign_source_5;
            Py_DECREF( old );
        }

    }
    {
        PyObject *tmp_assign_source_6;
        PyObject *tmp_called_instance_4;
        CHECK_OBJECT( var_platform );
        tmp_called_instance_4 = var_platform;
        frame_59c2cc43609bae23e7a57f0b2d56bd1c->m_frame.f_lineno = 734;
        tmp_assign_source_6 = CALL_METHOD_WITH_ARGS2( tmp_called_instance_4, const_str_plain_replace, &PyTuple_GET_ITEM( const_tuple_str_chr_58_str_chr_45_tuple, 0 ) );

        if ( tmp_assign_source_6 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 734;
            type_description_1 = "ooo";
            goto frame_exception_exit_1;
        }
        {
            PyObject *old = var_platform;
            assert( old != NULL );
            var_platform = tmp_assign_source_6;
            Py_DECREF( old );
        }

    }
    {
        PyObject *tmp_assign_source_7;
        PyObject *tmp_called_instance_5;
        CHECK_OBJECT( var_platform );
        tmp_called_instance_5 = var_platform;
        frame_59c2cc43609bae23e7a57f0b2d56bd1c->m_frame.f_lineno = 735;
        tmp_assign_source_7 = CALL_METHOD_WITH_ARGS2( tmp_called_instance_5, const_str_plain_replace, &PyTuple_GET_ITEM( const_tuple_str_chr_59_str_chr_45_tuple, 0 ) );

        if ( tmp_assign_source_7 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 735;
            type_description_1 = "ooo";
            goto frame_exception_exit_1;
        }
        {
            PyObject *old = var_platform;
            assert( old != NULL );
            var_platform = tmp_assign_source_7;
            Py_DECREF( old );
        }

    }
    {
        PyObject *tmp_assign_source_8;
        PyObject *tmp_called_instance_6;
        CHECK_OBJECT( var_platform );
        tmp_called_instance_6 = var_platform;
        frame_59c2cc43609bae23e7a57f0b2d56bd1c->m_frame.f_lineno = 736;
        tmp_assign_source_8 = CALL_METHOD_WITH_ARGS2( tmp_called_instance_6, const_str_plain_replace, &PyTuple_GET_ITEM( const_tuple_str_chr_34_str_chr_45_tuple, 0 ) );

        if ( tmp_assign_source_8 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 736;
            type_description_1 = "ooo";
            goto frame_exception_exit_1;
        }
        {
            PyObject *old = var_platform;
            assert( old != NULL );
            var_platform = tmp_assign_source_8;
            Py_DECREF( old );
        }

    }
    {
        PyObject *tmp_assign_source_9;
        PyObject *tmp_called_instance_7;
        CHECK_OBJECT( var_platform );
        tmp_called_instance_7 = var_platform;
        frame_59c2cc43609bae23e7a57f0b2d56bd1c->m_frame.f_lineno = 737;
        tmp_assign_source_9 = CALL_METHOD_WITH_ARGS2( tmp_called_instance_7, const_str_plain_replace, &PyTuple_GET_ITEM( const_tuple_str_chr_40_str_chr_45_tuple, 0 ) );

        if ( tmp_assign_source_9 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 737;
            type_description_1 = "ooo";
            goto frame_exception_exit_1;
        }
        {
            PyObject *old = var_platform;
            assert( old != NULL );
            var_platform = tmp_assign_source_9;
            Py_DECREF( old );
        }

    }
    {
        PyObject *tmp_assign_source_10;
        PyObject *tmp_called_instance_8;
        CHECK_OBJECT( var_platform );
        tmp_called_instance_8 = var_platform;
        frame_59c2cc43609bae23e7a57f0b2d56bd1c->m_frame.f_lineno = 738;
        tmp_assign_source_10 = CALL_METHOD_WITH_ARGS2( tmp_called_instance_8, const_str_plain_replace, &PyTuple_GET_ITEM( const_tuple_str_chr_41_str_chr_45_tuple, 0 ) );

        if ( tmp_assign_source_10 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 738;
            type_description_1 = "ooo";
            goto frame_exception_exit_1;
        }
        {
            PyObject *old = var_platform;
            assert( old != NULL );
            var_platform = tmp_assign_source_10;
            Py_DECREF( old );
        }

    }
    {
        PyObject *tmp_assign_source_11;
        PyObject *tmp_called_instance_9;
        CHECK_OBJECT( var_platform );
        tmp_called_instance_9 = var_platform;
        frame_59c2cc43609bae23e7a57f0b2d56bd1c->m_frame.f_lineno = 741;
        tmp_assign_source_11 = CALL_METHOD_WITH_ARGS2( tmp_called_instance_9, const_str_plain_replace, &PyTuple_GET_ITEM( const_tuple_str_plain_unknown_str_empty_tuple, 0 ) );

        if ( tmp_assign_source_11 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 741;
            type_description_1 = "ooo";
            goto frame_exception_exit_1;
        }
        {
            PyObject *old = var_platform;
            assert( old != NULL );
            var_platform = tmp_assign_source_11;
            Py_DECREF( old );
        }

    }
    loop_start_1:;
    {
        PyObject *tmp_assign_source_12;
        PyObject *tmp_called_instance_10;
        CHECK_OBJECT( var_platform );
        tmp_called_instance_10 = var_platform;
        frame_59c2cc43609bae23e7a57f0b2d56bd1c->m_frame.f_lineno = 745;
        tmp_assign_source_12 = CALL_METHOD_WITH_ARGS2( tmp_called_instance_10, const_str_plain_replace, &PyTuple_GET_ITEM( const_tuple_str_digest_85fe97af08c9a213aa891dc673aeaa3e_str_chr_45_tuple, 0 ) );

        if ( tmp_assign_source_12 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 745;
            type_description_1 = "ooo";
            goto frame_exception_exit_1;
        }
        {
            PyObject *old = var_cleaned;
            var_cleaned = tmp_assign_source_12;
            Py_XDECREF( old );
        }

    }
    {
        nuitka_bool tmp_condition_result_1;
        PyObject *tmp_compexpr_left_1;
        PyObject *tmp_compexpr_right_1;
        CHECK_OBJECT( var_cleaned );
        tmp_compexpr_left_1 = var_cleaned;
        CHECK_OBJECT( var_platform );
        tmp_compexpr_right_1 = var_platform;
        tmp_res = RICH_COMPARE_BOOL_EQ_OBJECT_OBJECT( tmp_compexpr_left_1, tmp_compexpr_right_1 );
        if ( tmp_res == -1 )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 746;
            type_description_1 = "ooo";
            goto frame_exception_exit_1;
        }
        tmp_condition_result_1 = ( tmp_res != 0 ) ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
        if ( tmp_condition_result_1 == NUITKA_BOOL_TRUE )
        {
            goto branch_yes_1;
        }
        else
        {
            goto branch_no_1;
        }
        branch_yes_1:;
        goto loop_end_1;
        branch_no_1:;
    }
    {
        PyObject *tmp_assign_source_13;
        CHECK_OBJECT( var_cleaned );
        tmp_assign_source_13 = var_cleaned;
        {
            PyObject *old = var_platform;
            assert( old != NULL );
            var_platform = tmp_assign_source_13;
            Py_INCREF( var_platform );
            Py_DECREF( old );
        }

    }
    if ( CONSIDER_THREADING() == false )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 744;
        type_description_1 = "ooo";
        goto frame_exception_exit_1;
    }
    goto loop_start_1;
    loop_end_1:;
    loop_start_2:;
    {
        nuitka_bool tmp_condition_result_2;
        PyObject *tmp_operand_name_1;
        PyObject *tmp_compexpr_left_2;
        PyObject *tmp_compexpr_right_2;
        PyObject *tmp_subscribed_name_1;
        PyObject *tmp_subscript_name_1;
        CHECK_OBJECT( var_platform );
        tmp_subscribed_name_1 = var_platform;
        tmp_subscript_name_1 = const_int_neg_1;
        tmp_compexpr_left_2 = LOOKUP_SUBSCRIPT_CONST( tmp_subscribed_name_1, tmp_subscript_name_1, -1 );
        if ( tmp_compexpr_left_2 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 749;
            type_description_1 = "ooo";
            goto frame_exception_exit_1;
        }
        tmp_compexpr_right_2 = const_str_chr_45;
        tmp_operand_name_1 = RICH_COMPARE_EQ_OBJECT_OBJECT( tmp_compexpr_left_2, tmp_compexpr_right_2 );
        Py_DECREF( tmp_compexpr_left_2 );
        if ( tmp_operand_name_1 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 749;
            type_description_1 = "ooo";
            goto frame_exception_exit_1;
        }
        tmp_res = CHECK_IF_TRUE( tmp_operand_name_1 );
        Py_DECREF( tmp_operand_name_1 );
        if ( tmp_res == -1 )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 749;
            type_description_1 = "ooo";
            goto frame_exception_exit_1;
        }
        tmp_condition_result_2 = ( tmp_res == 0 ) ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
        if ( tmp_condition_result_2 == NUITKA_BOOL_TRUE )
        {
            goto branch_yes_2;
        }
        else
        {
            goto branch_no_2;
        }
        branch_yes_2:;
        goto loop_end_2;
        branch_no_2:;
    }
    {
        PyObject *tmp_assign_source_14;
        PyObject *tmp_subscribed_name_2;
        PyObject *tmp_subscript_name_2;
        CHECK_OBJECT( var_platform );
        tmp_subscribed_name_2 = var_platform;
        tmp_subscript_name_2 = const_slice_none_int_neg_1_none;
        tmp_assign_source_14 = LOOKUP_SUBSCRIPT( tmp_subscribed_name_2, tmp_subscript_name_2 );
        if ( tmp_assign_source_14 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 750;
            type_description_1 = "ooo";
            goto frame_exception_exit_1;
        }
        {
            PyObject *old = var_platform;
            assert( old != NULL );
            var_platform = tmp_assign_source_14;
            Py_DECREF( old );
        }

    }
    if ( CONSIDER_THREADING() == false )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 749;
        type_description_1 = "ooo";
        goto frame_exception_exit_1;
    }
    goto loop_start_2;
    loop_end_2:;

#if 0
    RESTORE_FRAME_EXCEPTION( frame_59c2cc43609bae23e7a57f0b2d56bd1c );
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto frame_no_exception_1;

    frame_exception_exit_1:;

#if 0
    RESTORE_FRAME_EXCEPTION( frame_59c2cc43609bae23e7a57f0b2d56bd1c );
#endif

    if ( exception_tb == NULL )
    {
        exception_tb = MAKE_TRACEBACK( frame_59c2cc43609bae23e7a57f0b2d56bd1c, exception_lineno );
    }
    else if ( exception_tb->tb_frame != &frame_59c2cc43609bae23e7a57f0b2d56bd1c->m_frame )
    {
        exception_tb = ADD_TRACEBACK( exception_tb, frame_59c2cc43609bae23e7a57f0b2d56bd1c, exception_lineno );
    }

    // Attachs locals to frame if any.
    Nuitka_Frame_AttachLocals(
        (struct Nuitka_FrameObject *)frame_59c2cc43609bae23e7a57f0b2d56bd1c,
        type_description_1,
        par_args,
        var_platform,
        var_cleaned
    );


    // Release cached frame.
    if ( frame_59c2cc43609bae23e7a57f0b2d56bd1c == cache_frame_59c2cc43609bae23e7a57f0b2d56bd1c )
    {
        Py_DECREF( frame_59c2cc43609bae23e7a57f0b2d56bd1c );
    }
    cache_frame_59c2cc43609bae23e7a57f0b2d56bd1c = NULL;

    assertFrameObject( frame_59c2cc43609bae23e7a57f0b2d56bd1c );

    // Put the previous frame back on top.
    popFrameStack();

    // Return the error.
    goto try_except_handler_1;

    frame_no_exception_1:;
    CHECK_OBJECT( var_platform );
    tmp_return_value = var_platform;
    Py_INCREF( tmp_return_value );
    goto try_return_handler_1;
    // tried codes exits in all cases
    NUITKA_CANNOT_GET_HERE( platform$$$function_17__platform );
    return NULL;
    // Return handler code:
    try_return_handler_1:;
    CHECK_OBJECT( (PyObject *)par_args );
    Py_DECREF( par_args );
    par_args = NULL;

    CHECK_OBJECT( (PyObject *)var_platform );
    Py_DECREF( var_platform );
    var_platform = NULL;

    CHECK_OBJECT( (PyObject *)var_cleaned );
    Py_DECREF( var_cleaned );
    var_cleaned = NULL;

    goto function_return_exit;
    // Exception handler code:
    try_except_handler_1:;
    exception_keeper_type_1 = exception_type;
    exception_keeper_value_1 = exception_value;
    exception_keeper_tb_1 = exception_tb;
    exception_keeper_lineno_1 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    CHECK_OBJECT( (PyObject *)par_args );
    Py_DECREF( par_args );
    par_args = NULL;

    Py_XDECREF( var_platform );
    var_platform = NULL;

    Py_XDECREF( var_cleaned );
    var_cleaned = NULL;

    // Re-raise.
    exception_type = exception_keeper_type_1;
    exception_value = exception_keeper_value_1;
    exception_tb = exception_keeper_tb_1;
    exception_lineno = exception_keeper_lineno_1;

    goto function_exception_exit;
    // End of try:

    // Return statement must have exited already.
    NUITKA_CANNOT_GET_HERE( platform$$$function_17__platform );
    return NULL;

function_exception_exit:
    assert( exception_type );
    RESTORE_ERROR_OCCURRED( exception_type, exception_value, exception_tb );

    return NULL;

function_return_exit:
   // Function cleanup code if any.


   // Actual function exit with return value, making sure we did not make
   // the error status worse despite non-NULL return.
   CHECK_OBJECT( tmp_return_value );
   assert( had_error || !ERROR_OCCURRED() );
   return tmp_return_value;
}



struct platform$$$function_17__platform$$$genexpr_1_genexpr_locals {
    PyObject *var_x;
    PyObject *tmp_iter_value_0;
    char const *type_description_1;
    PyObject *exception_type;
    PyObject *exception_value;
    PyTracebackObject *exception_tb;
    int exception_lineno;
    char yield_tmps[1024];
    PyObject *exception_keeper_type_1;
    PyObject *exception_keeper_value_1;
    PyTracebackObject *exception_keeper_tb_1;
    int exception_keeper_lineno_1;
    PyObject *exception_keeper_type_2;
    PyObject *exception_keeper_value_2;
    PyTracebackObject *exception_keeper_tb_2;
    int exception_keeper_lineno_2;
};

static PyObject *platform$$$function_17__platform$$$genexpr_1_genexpr_context( struct Nuitka_GeneratorObject *generator, PyObject *yield_return_value )
{
    CHECK_OBJECT( (PyObject *)generator );
    assert( Nuitka_Generator_Check( (PyObject *)generator ) );

    // Heap access if used.
    struct platform$$$function_17__platform$$$genexpr_1_genexpr_locals *generator_heap = (struct platform$$$function_17__platform$$$genexpr_1_genexpr_locals *)generator->m_heap_storage;

    // Dispatch to yield based on return label index:
    switch(generator->m_yield_return_index) {
    case 1: goto yield_return_1;
    }

    // Local variable initialization
    static struct Nuitka_FrameObject *cache_m_frame = NULL;
    generator_heap->var_x = NULL;
    generator_heap->tmp_iter_value_0 = NULL;
    generator_heap->type_description_1 = NULL;
    generator_heap->exception_type = NULL;
    generator_heap->exception_value = NULL;
    generator_heap->exception_tb = NULL;
    generator_heap->exception_lineno = 0;

    // Actual generator function body.
    // Tried code:
    MAKE_OR_REUSE_FRAME( cache_m_frame, codeobj_fb35526eb8b1d6be23403b96f2e0bfd2, module_platform, sizeof(void *)+sizeof(void *) );
    generator->m_frame = cache_m_frame;

    // Mark the frame object as in use, ref count 1 will be up for reuse.
    Py_INCREF( generator->m_frame );
    assert( Py_REFCNT( generator->m_frame ) == 2 ); // Frame stack

#if PYTHON_VERSION >= 340
    generator->m_frame->m_frame.f_gen = (PyObject *)generator;
#endif

    Py_CLEAR( generator->m_frame->m_frame.f_back );

    generator->m_frame->m_frame.f_back = PyThreadState_GET()->frame;
    Py_INCREF( generator->m_frame->m_frame.f_back );

    PyThreadState_GET()->frame = &generator->m_frame->m_frame;
    Py_INCREF( generator->m_frame );

    Nuitka_Frame_MarkAsExecuting( generator->m_frame );

#if PYTHON_VERSION >= 300
    // Accept currently existing exception as the one to publish again when we
    // yield or yield from.
    {
        PyThreadState *thread_state = PyThreadState_GET();

#if PYTHON_VERSION < 370
        generator->m_frame->m_frame.f_exc_type = EXC_TYPE( thread_state );
    if ( generator->m_frame->m_frame.f_exc_type == Py_None ) generator->m_frame->m_frame.f_exc_type = NULL;
        Py_XINCREF( generator->m_frame->m_frame.f_exc_type );
    generator->m_frame->m_frame.f_exc_value = EXC_VALUE( thread_state );
        Py_XINCREF( generator->m_frame->m_frame.f_exc_value );
    generator->m_frame->m_frame.f_exc_traceback = EXC_TRACEBACK( thread_state );
        Py_XINCREF( generator->m_frame->m_frame.f_exc_traceback );
#else
        generator->m_exc_state.exc_type = EXC_TYPE( thread_state );
        if ( generator->m_exc_state.exc_type == Py_None ) generator->m_exc_state.exc_type = NULL;
        Py_XINCREF( generator->m_exc_state.exc_type );
        generator->m_exc_state.exc_value = EXC_VALUE( thread_state );
        Py_XINCREF( generator->m_exc_state.exc_value );
        generator->m_exc_state.exc_traceback = EXC_TRACEBACK( thread_state );
        Py_XINCREF( generator->m_exc_state.exc_traceback );
#endif
    }

#endif

    // Framed code:
    // Tried code:
    loop_start_1:;
    {
        PyObject *tmp_next_source_1;
        PyObject *tmp_assign_source_1;
        CHECK_OBJECT( PyCell_GET( generator->m_closure[0] ) );
        tmp_next_source_1 = PyCell_GET( generator->m_closure[0] );
        tmp_assign_source_1 = ITERATOR_NEXT( tmp_next_source_1 );
        if ( tmp_assign_source_1 == NULL )
        {
            if ( CHECK_AND_CLEAR_STOP_ITERATION_OCCURRED() )
            {

                goto loop_end_1;
            }
            else
            {

                FETCH_ERROR_OCCURRED( &generator_heap->exception_type, &generator_heap->exception_value, &generator_heap->exception_tb );
                generator_heap->type_description_1 = "No";
                generator_heap->exception_lineno = 728;
                goto try_except_handler_2;
            }
        }

        {
            PyObject *old = generator_heap->tmp_iter_value_0;
            generator_heap->tmp_iter_value_0 = tmp_assign_source_1;
            Py_XDECREF( old );
        }

    }
    {
        PyObject *tmp_assign_source_2;
        CHECK_OBJECT( generator_heap->tmp_iter_value_0 );
        tmp_assign_source_2 = generator_heap->tmp_iter_value_0;
        {
            PyObject *old = generator_heap->var_x;
            generator_heap->var_x = tmp_assign_source_2;
            Py_INCREF( generator_heap->var_x );
            Py_XDECREF( old );
        }

    }
    {
        PyObject *tmp_expression_name_1;
        PyObject *tmp_called_instance_1;
        NUITKA_MAY_BE_UNUSED PyObject *tmp_yield_result_1;
        CHECK_OBJECT( generator_heap->var_x );
        tmp_called_instance_1 = generator_heap->var_x;
        generator->m_frame->m_frame.f_lineno = 728;
        tmp_expression_name_1 = CALL_METHOD_NO_ARGS( tmp_called_instance_1, const_str_plain_strip );
        if ( tmp_expression_name_1 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &generator_heap->exception_type, &generator_heap->exception_value, &generator_heap->exception_tb );


            generator_heap->exception_lineno = 728;
            generator_heap->type_description_1 = "No";
            goto try_except_handler_2;
        }
        Nuitka_PreserveHeap( generator_heap->yield_tmps, &tmp_called_instance_1, sizeof(PyObject *), NULL );
        generator->m_yield_return_index = 1;
        return tmp_expression_name_1;
        yield_return_1:
        Nuitka_RestoreHeap( generator_heap->yield_tmps, &tmp_called_instance_1, sizeof(PyObject *), NULL );
        if ( yield_return_value == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &generator_heap->exception_type, &generator_heap->exception_value, &generator_heap->exception_tb );


            generator_heap->exception_lineno = 728;
            generator_heap->type_description_1 = "No";
            goto try_except_handler_2;
        }
        tmp_yield_result_1 = yield_return_value;
    }
    if ( CONSIDER_THREADING() == false )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &generator_heap->exception_type, &generator_heap->exception_value, &generator_heap->exception_tb );


        generator_heap->exception_lineno = 728;
        generator_heap->type_description_1 = "No";
        goto try_except_handler_2;
    }
    goto loop_start_1;
    loop_end_1:;
    goto try_end_1;
    // Exception handler code:
    try_except_handler_2:;
    generator_heap->exception_keeper_type_1 = generator_heap->exception_type;
    generator_heap->exception_keeper_value_1 = generator_heap->exception_value;
    generator_heap->exception_keeper_tb_1 = generator_heap->exception_tb;
    generator_heap->exception_keeper_lineno_1 = generator_heap->exception_lineno;
    generator_heap->exception_type = NULL;
    generator_heap->exception_value = NULL;
    generator_heap->exception_tb = NULL;
    generator_heap->exception_lineno = 0;

    Py_XDECREF( generator_heap->tmp_iter_value_0 );
    generator_heap->tmp_iter_value_0 = NULL;

    // Re-raise.
    generator_heap->exception_type = generator_heap->exception_keeper_type_1;
    generator_heap->exception_value = generator_heap->exception_keeper_value_1;
    generator_heap->exception_tb = generator_heap->exception_keeper_tb_1;
    generator_heap->exception_lineno = generator_heap->exception_keeper_lineno_1;

    goto frame_exception_exit_1;
    // End of try:
    try_end_1:;

    Nuitka_Frame_MarkAsNotExecuting( generator->m_frame );

#if PYTHON_VERSION >= 370
    Py_CLEAR( generator->m_exc_state.exc_type );
    Py_CLEAR( generator->m_exc_state.exc_value );
    Py_CLEAR( generator->m_exc_state.exc_traceback );
#elif PYTHON_VERSION >= 300
    Py_CLEAR( generator->m_frame->m_frame.f_exc_type );
    Py_CLEAR( generator->m_frame->m_frame.f_exc_value );
    Py_CLEAR( generator->m_frame->m_frame.f_exc_traceback );
#endif

    // Allow re-use of the frame again.
    Py_DECREF( generator->m_frame );
    goto frame_no_exception_1;

    frame_exception_exit_1:;

    // If it's not an exit exception, consider and create a traceback for it.
    if ( !EXCEPTION_MATCH_GENERATOR( generator_heap->exception_type ) )
    {
        if ( generator_heap->exception_tb == NULL )
        {
            generator_heap->exception_tb = MAKE_TRACEBACK( generator->m_frame, generator_heap->exception_lineno );
        }
        else if ( generator_heap->exception_tb->tb_frame != &generator->m_frame->m_frame )
        {
            generator_heap->exception_tb = ADD_TRACEBACK( generator_heap->exception_tb, generator->m_frame, generator_heap->exception_lineno );
        }

        Nuitka_Frame_AttachLocals(
            (struct Nuitka_FrameObject *)generator->m_frame,
            generator_heap->type_description_1,
            NULL,
            generator_heap->var_x
        );


        // Release cached frame.
        if ( generator->m_frame == cache_m_frame )
        {
            Py_DECREF( generator->m_frame );
        }
        cache_m_frame = NULL;

        assertFrameObject( generator->m_frame );
    }

#if PYTHON_VERSION >= 370
    Py_CLEAR( generator->m_exc_state.exc_type );
    Py_CLEAR( generator->m_exc_state.exc_value );
    Py_CLEAR( generator->m_exc_state.exc_traceback );
#elif PYTHON_VERSION >= 300
    Py_CLEAR( generator->m_frame->m_frame.f_exc_type );
    Py_CLEAR( generator->m_frame->m_frame.f_exc_value );
    Py_CLEAR( generator->m_frame->m_frame.f_exc_traceback );
#endif

    Py_DECREF( generator->m_frame );

    // Return the error.
    goto try_except_handler_1;

    frame_no_exception_1:;
    goto try_end_2;
    // Exception handler code:
    try_except_handler_1:;
    generator_heap->exception_keeper_type_2 = generator_heap->exception_type;
    generator_heap->exception_keeper_value_2 = generator_heap->exception_value;
    generator_heap->exception_keeper_tb_2 = generator_heap->exception_tb;
    generator_heap->exception_keeper_lineno_2 = generator_heap->exception_lineno;
    generator_heap->exception_type = NULL;
    generator_heap->exception_value = NULL;
    generator_heap->exception_tb = NULL;
    generator_heap->exception_lineno = 0;

    Py_XDECREF( generator_heap->var_x );
    generator_heap->var_x = NULL;

    // Re-raise.
    generator_heap->exception_type = generator_heap->exception_keeper_type_2;
    generator_heap->exception_value = generator_heap->exception_keeper_value_2;
    generator_heap->exception_tb = generator_heap->exception_keeper_tb_2;
    generator_heap->exception_lineno = generator_heap->exception_keeper_lineno_2;

    goto function_exception_exit;
    // End of try:
    try_end_2:;
    Py_XDECREF( generator_heap->tmp_iter_value_0 );
    generator_heap->tmp_iter_value_0 = NULL;

    Py_XDECREF( generator_heap->var_x );
    generator_heap->var_x = NULL;



    return NULL;

    function_exception_exit:
    assert( generator_heap->exception_type );
    RESTORE_ERROR_OCCURRED( generator_heap->exception_type, generator_heap->exception_value, generator_heap->exception_tb );

    return NULL;

}

static PyObject *platform$$$function_17__platform$$$genexpr_1_genexpr_maker( void )
{
    return Nuitka_Generator_New(
        platform$$$function_17__platform$$$genexpr_1_genexpr_context,
        module_platform,
        const_str_angle_genexpr,
#if PYTHON_VERSION >= 350
        const_str_digest_f23d39de2747d42ab8fd78ab63c45ec4,
#endif
        codeobj_fb35526eb8b1d6be23403b96f2e0bfd2,
        1,
        sizeof(struct platform$$$function_17__platform$$$genexpr_1_genexpr_locals)
    );
}


static PyObject *impl_platform$$$function_18__node( struct Nuitka_FunctionObject const *self, PyObject **python_pars )
{
    // Preserve error status for checks
#ifndef __NUITKA_NO_ASSERT__
    NUITKA_MAY_BE_UNUSED bool had_error = ERROR_OCCURRED();
#endif

    // Local variable declarations.
    PyObject *par_default = python_pars[ 0 ];
    PyObject *var_socket = NULL;
    struct Nuitka_FrameObject *frame_dff23205ffbbd3cc016593cc8faec355;
    NUITKA_MAY_BE_UNUSED char const *type_description_1 = NULL;
    PyObject *exception_type = NULL;
    PyObject *exception_value = NULL;
    PyTracebackObject *exception_tb = NULL;
    NUITKA_MAY_BE_UNUSED int exception_lineno = 0;
    PyObject *exception_keeper_type_1;
    PyObject *exception_keeper_value_1;
    PyTracebackObject *exception_keeper_tb_1;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_1;
    PyObject *exception_preserved_type_1;
    PyObject *exception_preserved_value_1;
    PyTracebackObject *exception_preserved_tb_1;
    int tmp_res;
    PyObject *tmp_return_value = NULL;
    bool tmp_result;
    PyObject *exception_keeper_type_2;
    PyObject *exception_keeper_value_2;
    PyTracebackObject *exception_keeper_tb_2;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_2;
    PyObject *exception_keeper_type_3;
    PyObject *exception_keeper_value_3;
    PyTracebackObject *exception_keeper_tb_3;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_3;
    PyObject *exception_preserved_type_2;
    PyObject *exception_preserved_value_2;
    PyTracebackObject *exception_preserved_tb_2;
    PyObject *exception_keeper_type_4;
    PyObject *exception_keeper_value_4;
    PyTracebackObject *exception_keeper_tb_4;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_4;
    static struct Nuitka_FrameObject *cache_frame_dff23205ffbbd3cc016593cc8faec355 = NULL;
    PyObject *exception_keeper_type_5;
    PyObject *exception_keeper_value_5;
    PyTracebackObject *exception_keeper_tb_5;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_5;

    // Actual function body.
    // Tried code:
    MAKE_OR_REUSE_FRAME( cache_frame_dff23205ffbbd3cc016593cc8faec355, codeobj_dff23205ffbbd3cc016593cc8faec355, module_platform, sizeof(void *)+sizeof(void *) );
    frame_dff23205ffbbd3cc016593cc8faec355 = cache_frame_dff23205ffbbd3cc016593cc8faec355;

    // Push the new frame as the currently active one.
    pushFrameStack( frame_dff23205ffbbd3cc016593cc8faec355 );

    // Mark the frame object as in use, ref count 1 will be up for reuse.
    assert( Py_REFCNT( frame_dff23205ffbbd3cc016593cc8faec355 ) == 2 ); // Frame stack

    // Framed code:
    // Tried code:
    {
        PyObject *tmp_assign_source_1;
        PyObject *tmp_name_name_1;
        PyObject *tmp_globals_name_1;
        PyObject *tmp_locals_name_1;
        PyObject *tmp_fromlist_name_1;
        PyObject *tmp_level_name_1;
        tmp_name_name_1 = const_str_plain_socket;
        tmp_globals_name_1 = (PyObject *)moduledict_platform;
        tmp_locals_name_1 = Py_None;
        tmp_fromlist_name_1 = Py_None;
        tmp_level_name_1 = const_int_0;
        frame_dff23205ffbbd3cc016593cc8faec355->m_frame.f_lineno = 759;
        tmp_assign_source_1 = IMPORT_MODULE5( tmp_name_name_1, tmp_globals_name_1, tmp_locals_name_1, tmp_fromlist_name_1, tmp_level_name_1 );
        if ( tmp_assign_source_1 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 759;
            type_description_1 = "oo";
            goto try_except_handler_2;
        }
        assert( var_socket == NULL );
        var_socket = tmp_assign_source_1;
    }
    goto try_end_1;
    // Exception handler code:
    try_except_handler_2:;
    exception_keeper_type_1 = exception_type;
    exception_keeper_value_1 = exception_value;
    exception_keeper_tb_1 = exception_tb;
    exception_keeper_lineno_1 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    // Preserve existing published exception.
    exception_preserved_type_1 = EXC_TYPE(PyThreadState_GET());
    Py_XINCREF( exception_preserved_type_1 );
    exception_preserved_value_1 = EXC_VALUE(PyThreadState_GET());
    Py_XINCREF( exception_preserved_value_1 );
    exception_preserved_tb_1 = (PyTracebackObject *)EXC_TRACEBACK(PyThreadState_GET());
    Py_XINCREF( exception_preserved_tb_1 );

    if ( exception_keeper_tb_1 == NULL )
    {
        exception_keeper_tb_1 = MAKE_TRACEBACK( frame_dff23205ffbbd3cc016593cc8faec355, exception_keeper_lineno_1 );
    }
    else if ( exception_keeper_lineno_1 != 0 )
    {
        exception_keeper_tb_1 = ADD_TRACEBACK( exception_keeper_tb_1, frame_dff23205ffbbd3cc016593cc8faec355, exception_keeper_lineno_1 );
    }

    NORMALIZE_EXCEPTION( &exception_keeper_type_1, &exception_keeper_value_1, &exception_keeper_tb_1 );
    PyException_SetTraceback( exception_keeper_value_1, (PyObject *)exception_keeper_tb_1 );
    PUBLISH_EXCEPTION( &exception_keeper_type_1, &exception_keeper_value_1, &exception_keeper_tb_1 );
    // Tried code:
    {
        nuitka_bool tmp_condition_result_1;
        PyObject *tmp_compexpr_left_1;
        PyObject *tmp_compexpr_right_1;
        tmp_compexpr_left_1 = EXC_TYPE(PyThreadState_GET());
        tmp_compexpr_right_1 = PyExc_ImportError;
        tmp_res = EXCEPTION_MATCH_BOOL( tmp_compexpr_left_1, tmp_compexpr_right_1 );
        if ( tmp_res == -1 )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 760;
            type_description_1 = "oo";
            goto try_except_handler_3;
        }
        tmp_condition_result_1 = ( tmp_res != 0 ) ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
        if ( tmp_condition_result_1 == NUITKA_BOOL_TRUE )
        {
            goto branch_yes_1;
        }
        else
        {
            goto branch_no_1;
        }
        branch_yes_1:;
        CHECK_OBJECT( par_default );
        tmp_return_value = par_default;
        Py_INCREF( tmp_return_value );
        goto try_return_handler_3;
        goto branch_end_1;
        branch_no_1:;
        tmp_result = RERAISE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
        if (unlikely( tmp_result == false ))
        {
            exception_lineno = 758;
        }

        if (exception_tb && exception_tb->tb_frame == &frame_dff23205ffbbd3cc016593cc8faec355->m_frame) frame_dff23205ffbbd3cc016593cc8faec355->m_frame.f_lineno = exception_tb->tb_lineno;
        type_description_1 = "oo";
        goto try_except_handler_3;
        branch_end_1:;
    }
    // tried codes exits in all cases
    NUITKA_CANNOT_GET_HERE( platform$$$function_18__node );
    return NULL;
    // Return handler code:
    try_return_handler_3:;
    // Restore previous exception.
    SET_CURRENT_EXCEPTION( exception_preserved_type_1, exception_preserved_value_1, exception_preserved_tb_1 );
    goto frame_return_exit_1;
    // Exception handler code:
    try_except_handler_3:;
    exception_keeper_type_2 = exception_type;
    exception_keeper_value_2 = exception_value;
    exception_keeper_tb_2 = exception_tb;
    exception_keeper_lineno_2 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    // Restore previous exception.
    SET_CURRENT_EXCEPTION( exception_preserved_type_1, exception_preserved_value_1, exception_preserved_tb_1 );
    // Re-raise.
    exception_type = exception_keeper_type_2;
    exception_value = exception_keeper_value_2;
    exception_tb = exception_keeper_tb_2;
    exception_lineno = exception_keeper_lineno_2;

    goto frame_exception_exit_1;
    // End of try:
    // End of try:
    try_end_1:;
    // Tried code:
    {
        PyObject *tmp_called_instance_1;
        CHECK_OBJECT( var_socket );
        tmp_called_instance_1 = var_socket;
        frame_dff23205ffbbd3cc016593cc8faec355->m_frame.f_lineno = 764;
        tmp_return_value = CALL_METHOD_NO_ARGS( tmp_called_instance_1, const_str_plain_gethostname );
        if ( tmp_return_value == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 764;
            type_description_1 = "oo";
            goto try_except_handler_4;
        }
        goto frame_return_exit_1;
    }
    // tried codes exits in all cases
    NUITKA_CANNOT_GET_HERE( platform$$$function_18__node );
    return NULL;
    // Exception handler code:
    try_except_handler_4:;
    exception_keeper_type_3 = exception_type;
    exception_keeper_value_3 = exception_value;
    exception_keeper_tb_3 = exception_tb;
    exception_keeper_lineno_3 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    // Preserve existing published exception.
    exception_preserved_type_2 = EXC_TYPE(PyThreadState_GET());
    Py_XINCREF( exception_preserved_type_2 );
    exception_preserved_value_2 = EXC_VALUE(PyThreadState_GET());
    Py_XINCREF( exception_preserved_value_2 );
    exception_preserved_tb_2 = (PyTracebackObject *)EXC_TRACEBACK(PyThreadState_GET());
    Py_XINCREF( exception_preserved_tb_2 );

    if ( exception_keeper_tb_3 == NULL )
    {
        exception_keeper_tb_3 = MAKE_TRACEBACK( frame_dff23205ffbbd3cc016593cc8faec355, exception_keeper_lineno_3 );
    }
    else if ( exception_keeper_lineno_3 != 0 )
    {
        exception_keeper_tb_3 = ADD_TRACEBACK( exception_keeper_tb_3, frame_dff23205ffbbd3cc016593cc8faec355, exception_keeper_lineno_3 );
    }

    NORMALIZE_EXCEPTION( &exception_keeper_type_3, &exception_keeper_value_3, &exception_keeper_tb_3 );
    PyException_SetTraceback( exception_keeper_value_3, (PyObject *)exception_keeper_tb_3 );
    PUBLISH_EXCEPTION( &exception_keeper_type_3, &exception_keeper_value_3, &exception_keeper_tb_3 );
    // Tried code:
    {
        nuitka_bool tmp_condition_result_2;
        PyObject *tmp_compexpr_left_2;
        PyObject *tmp_compexpr_right_2;
        tmp_compexpr_left_2 = EXC_TYPE(PyThreadState_GET());
        tmp_compexpr_right_2 = PyExc_OSError;
        tmp_res = EXCEPTION_MATCH_BOOL( tmp_compexpr_left_2, tmp_compexpr_right_2 );
        if ( tmp_res == -1 )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 765;
            type_description_1 = "oo";
            goto try_except_handler_5;
        }
        tmp_condition_result_2 = ( tmp_res != 0 ) ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
        if ( tmp_condition_result_2 == NUITKA_BOOL_TRUE )
        {
            goto branch_yes_2;
        }
        else
        {
            goto branch_no_2;
        }
        branch_yes_2:;
        CHECK_OBJECT( par_default );
        tmp_return_value = par_default;
        Py_INCREF( tmp_return_value );
        goto try_return_handler_5;
        goto branch_end_2;
        branch_no_2:;
        tmp_result = RERAISE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
        if (unlikely( tmp_result == false ))
        {
            exception_lineno = 763;
        }

        if (exception_tb && exception_tb->tb_frame == &frame_dff23205ffbbd3cc016593cc8faec355->m_frame) frame_dff23205ffbbd3cc016593cc8faec355->m_frame.f_lineno = exception_tb->tb_lineno;
        type_description_1 = "oo";
        goto try_except_handler_5;
        branch_end_2:;
    }
    // tried codes exits in all cases
    NUITKA_CANNOT_GET_HERE( platform$$$function_18__node );
    return NULL;
    // Return handler code:
    try_return_handler_5:;
    // Restore previous exception.
    SET_CURRENT_EXCEPTION( exception_preserved_type_2, exception_preserved_value_2, exception_preserved_tb_2 );
    goto frame_return_exit_1;
    // Exception handler code:
    try_except_handler_5:;
    exception_keeper_type_4 = exception_type;
    exception_keeper_value_4 = exception_value;
    exception_keeper_tb_4 = exception_tb;
    exception_keeper_lineno_4 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    // Restore previous exception.
    SET_CURRENT_EXCEPTION( exception_preserved_type_2, exception_preserved_value_2, exception_preserved_tb_2 );
    // Re-raise.
    exception_type = exception_keeper_type_4;
    exception_value = exception_keeper_value_4;
    exception_tb = exception_keeper_tb_4;
    exception_lineno = exception_keeper_lineno_4;

    goto frame_exception_exit_1;
    // End of try:
    // End of try:

#if 0
    RESTORE_FRAME_EXCEPTION( frame_dff23205ffbbd3cc016593cc8faec355 );
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto frame_no_exception_1;

    frame_return_exit_1:;
#if 0
    RESTORE_FRAME_EXCEPTION( frame_dff23205ffbbd3cc016593cc8faec355 );
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto try_return_handler_1;

    frame_exception_exit_1:;

#if 0
    RESTORE_FRAME_EXCEPTION( frame_dff23205ffbbd3cc016593cc8faec355 );
#endif

    if ( exception_tb == NULL )
    {
        exception_tb = MAKE_TRACEBACK( frame_dff23205ffbbd3cc016593cc8faec355, exception_lineno );
    }
    else if ( exception_tb->tb_frame != &frame_dff23205ffbbd3cc016593cc8faec355->m_frame )
    {
        exception_tb = ADD_TRACEBACK( exception_tb, frame_dff23205ffbbd3cc016593cc8faec355, exception_lineno );
    }

    // Attachs locals to frame if any.
    Nuitka_Frame_AttachLocals(
        (struct Nuitka_FrameObject *)frame_dff23205ffbbd3cc016593cc8faec355,
        type_description_1,
        par_default,
        var_socket
    );


    // Release cached frame.
    if ( frame_dff23205ffbbd3cc016593cc8faec355 == cache_frame_dff23205ffbbd3cc016593cc8faec355 )
    {
        Py_DECREF( frame_dff23205ffbbd3cc016593cc8faec355 );
    }
    cache_frame_dff23205ffbbd3cc016593cc8faec355 = NULL;

    assertFrameObject( frame_dff23205ffbbd3cc016593cc8faec355 );

    // Put the previous frame back on top.
    popFrameStack();

    // Return the error.
    goto try_except_handler_1;

    frame_no_exception_1:;
    // tried codes exits in all cases
    NUITKA_CANNOT_GET_HERE( platform$$$function_18__node );
    return NULL;
    // Return handler code:
    try_return_handler_1:;
    CHECK_OBJECT( (PyObject *)par_default );
    Py_DECREF( par_default );
    par_default = NULL;

    Py_XDECREF( var_socket );
    var_socket = NULL;

    goto function_return_exit;
    // Exception handler code:
    try_except_handler_1:;
    exception_keeper_type_5 = exception_type;
    exception_keeper_value_5 = exception_value;
    exception_keeper_tb_5 = exception_tb;
    exception_keeper_lineno_5 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    CHECK_OBJECT( (PyObject *)par_default );
    Py_DECREF( par_default );
    par_default = NULL;

    Py_XDECREF( var_socket );
    var_socket = NULL;

    // Re-raise.
    exception_type = exception_keeper_type_5;
    exception_value = exception_keeper_value_5;
    exception_tb = exception_keeper_tb_5;
    exception_lineno = exception_keeper_lineno_5;

    goto function_exception_exit;
    // End of try:

    // Return statement must have exited already.
    NUITKA_CANNOT_GET_HERE( platform$$$function_18__node );
    return NULL;

function_exception_exit:
    assert( exception_type );
    RESTORE_ERROR_OCCURRED( exception_type, exception_value, exception_tb );

    return NULL;

function_return_exit:
   // Function cleanup code if any.


   // Actual function exit with return value, making sure we did not make
   // the error status worse despite non-NULL return.
   CHECK_OBJECT( tmp_return_value );
   assert( had_error || !ERROR_OCCURRED() );
   return tmp_return_value;
}


static PyObject *impl_platform$$$function_19__follow_symlinks( struct Nuitka_FunctionObject const *self, PyObject **python_pars )
{
    // Preserve error status for checks
#ifndef __NUITKA_NO_ASSERT__
    NUITKA_MAY_BE_UNUSED bool had_error = ERROR_OCCURRED();
#endif

    // Local variable declarations.
    PyObject *par_filepath = python_pars[ 0 ];
    struct Nuitka_FrameObject *frame_d6799e85b3b4b4e2540373134d7ad719;
    NUITKA_MAY_BE_UNUSED char const *type_description_1 = NULL;
    PyObject *exception_type = NULL;
    PyObject *exception_value = NULL;
    PyTracebackObject *exception_tb = NULL;
    NUITKA_MAY_BE_UNUSED int exception_lineno = 0;
    int tmp_res;
    static struct Nuitka_FrameObject *cache_frame_d6799e85b3b4b4e2540373134d7ad719 = NULL;
    PyObject *tmp_return_value = NULL;
    PyObject *exception_keeper_type_1;
    PyObject *exception_keeper_value_1;
    PyTracebackObject *exception_keeper_tb_1;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_1;

    // Actual function body.
    // Tried code:
    MAKE_OR_REUSE_FRAME( cache_frame_d6799e85b3b4b4e2540373134d7ad719, codeobj_d6799e85b3b4b4e2540373134d7ad719, module_platform, sizeof(void *) );
    frame_d6799e85b3b4b4e2540373134d7ad719 = cache_frame_d6799e85b3b4b4e2540373134d7ad719;

    // Push the new frame as the currently active one.
    pushFrameStack( frame_d6799e85b3b4b4e2540373134d7ad719 );

    // Mark the frame object as in use, ref count 1 will be up for reuse.
    assert( Py_REFCNT( frame_d6799e85b3b4b4e2540373134d7ad719 ) == 2 ); // Frame stack

    // Framed code:
    {
        PyObject *tmp_assign_source_1;
        PyObject *tmp_called_instance_1;
        PyObject *tmp_source_name_1;
        PyObject *tmp_mvar_value_1;
        PyObject *tmp_args_element_name_1;
        tmp_mvar_value_1 = GET_STRING_DICT_VALUE( moduledict_platform, (Nuitka_StringObject *)const_str_plain_os );

        if (unlikely( tmp_mvar_value_1 == NULL ))
        {
            tmp_mvar_value_1 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_os );
        }

        if ( tmp_mvar_value_1 == NULL )
        {

            exception_type = PyExc_NameError;
            Py_INCREF( exception_type );
            exception_value = PyUnicode_FromFormat( "name '%s' is not defined", "os" );
            exception_tb = NULL;
            NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
            CHAIN_EXCEPTION( exception_value );

            exception_lineno = 774;
            type_description_1 = "o";
            goto frame_exception_exit_1;
        }

        tmp_source_name_1 = tmp_mvar_value_1;
        tmp_called_instance_1 = LOOKUP_ATTRIBUTE( tmp_source_name_1, const_str_plain_path );
        if ( tmp_called_instance_1 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 774;
            type_description_1 = "o";
            goto frame_exception_exit_1;
        }
        CHECK_OBJECT( par_filepath );
        tmp_args_element_name_1 = par_filepath;
        frame_d6799e85b3b4b4e2540373134d7ad719->m_frame.f_lineno = 774;
        {
            PyObject *call_args[] = { tmp_args_element_name_1 };
            tmp_assign_source_1 = CALL_METHOD_WITH_ARGS1( tmp_called_instance_1, const_str_plain_abspath, call_args );
        }

        Py_DECREF( tmp_called_instance_1 );
        if ( tmp_assign_source_1 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 774;
            type_description_1 = "o";
            goto frame_exception_exit_1;
        }
        {
            PyObject *old = par_filepath;
            assert( old != NULL );
            par_filepath = tmp_assign_source_1;
            Py_DECREF( old );
        }

    }
    loop_start_1:;
    {
        nuitka_bool tmp_condition_result_1;
        PyObject *tmp_operand_name_1;
        PyObject *tmp_called_instance_2;
        PyObject *tmp_source_name_2;
        PyObject *tmp_mvar_value_2;
        PyObject *tmp_args_element_name_2;
        tmp_mvar_value_2 = GET_STRING_DICT_VALUE( moduledict_platform, (Nuitka_StringObject *)const_str_plain_os );

        if (unlikely( tmp_mvar_value_2 == NULL ))
        {
            tmp_mvar_value_2 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_os );
        }

        if ( tmp_mvar_value_2 == NULL )
        {

            exception_type = PyExc_NameError;
            Py_INCREF( exception_type );
            exception_value = PyUnicode_FromFormat( "name '%s' is not defined", "os" );
            exception_tb = NULL;
            NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
            CHAIN_EXCEPTION( exception_value );

            exception_lineno = 775;
            type_description_1 = "o";
            goto frame_exception_exit_1;
        }

        tmp_source_name_2 = tmp_mvar_value_2;
        tmp_called_instance_2 = LOOKUP_ATTRIBUTE( tmp_source_name_2, const_str_plain_path );
        if ( tmp_called_instance_2 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 775;
            type_description_1 = "o";
            goto frame_exception_exit_1;
        }
        CHECK_OBJECT( par_filepath );
        tmp_args_element_name_2 = par_filepath;
        frame_d6799e85b3b4b4e2540373134d7ad719->m_frame.f_lineno = 775;
        {
            PyObject *call_args[] = { tmp_args_element_name_2 };
            tmp_operand_name_1 = CALL_METHOD_WITH_ARGS1( tmp_called_instance_2, const_str_plain_islink, call_args );
        }

        Py_DECREF( tmp_called_instance_2 );
        if ( tmp_operand_name_1 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 775;
            type_description_1 = "o";
            goto frame_exception_exit_1;
        }
        tmp_res = CHECK_IF_TRUE( tmp_operand_name_1 );
        Py_DECREF( tmp_operand_name_1 );
        if ( tmp_res == -1 )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 775;
            type_description_1 = "o";
            goto frame_exception_exit_1;
        }
        tmp_condition_result_1 = ( tmp_res == 0 ) ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
        if ( tmp_condition_result_1 == NUITKA_BOOL_TRUE )
        {
            goto branch_yes_1;
        }
        else
        {
            goto branch_no_1;
        }
        branch_yes_1:;
        goto loop_end_1;
        branch_no_1:;
    }
    {
        PyObject *tmp_assign_source_2;
        PyObject *tmp_called_name_1;
        PyObject *tmp_source_name_3;
        PyObject *tmp_source_name_4;
        PyObject *tmp_mvar_value_3;
        PyObject *tmp_args_element_name_3;
        PyObject *tmp_called_name_2;
        PyObject *tmp_source_name_5;
        PyObject *tmp_source_name_6;
        PyObject *tmp_mvar_value_4;
        PyObject *tmp_args_element_name_4;
        PyObject *tmp_called_instance_3;
        PyObject *tmp_source_name_7;
        PyObject *tmp_mvar_value_5;
        PyObject *tmp_args_element_name_5;
        PyObject *tmp_args_element_name_6;
        PyObject *tmp_called_instance_4;
        PyObject *tmp_mvar_value_6;
        PyObject *tmp_args_element_name_7;
        tmp_mvar_value_3 = GET_STRING_DICT_VALUE( moduledict_platform, (Nuitka_StringObject *)const_str_plain_os );

        if (unlikely( tmp_mvar_value_3 == NULL ))
        {
            tmp_mvar_value_3 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_os );
        }

        if ( tmp_mvar_value_3 == NULL )
        {

            exception_type = PyExc_NameError;
            Py_INCREF( exception_type );
            exception_value = PyUnicode_FromFormat( "name '%s' is not defined", "os" );
            exception_tb = NULL;
            NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
            CHAIN_EXCEPTION( exception_value );

            exception_lineno = 776;
            type_description_1 = "o";
            goto frame_exception_exit_1;
        }

        tmp_source_name_4 = tmp_mvar_value_3;
        tmp_source_name_3 = LOOKUP_ATTRIBUTE( tmp_source_name_4, const_str_plain_path );
        if ( tmp_source_name_3 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 776;
            type_description_1 = "o";
            goto frame_exception_exit_1;
        }
        tmp_called_name_1 = LOOKUP_ATTRIBUTE( tmp_source_name_3, const_str_plain_normpath );
        Py_DECREF( tmp_source_name_3 );
        if ( tmp_called_name_1 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 776;
            type_description_1 = "o";
            goto frame_exception_exit_1;
        }
        tmp_mvar_value_4 = GET_STRING_DICT_VALUE( moduledict_platform, (Nuitka_StringObject *)const_str_plain_os );

        if (unlikely( tmp_mvar_value_4 == NULL ))
        {
            tmp_mvar_value_4 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_os );
        }

        if ( tmp_mvar_value_4 == NULL )
        {
            Py_DECREF( tmp_called_name_1 );
            exception_type = PyExc_NameError;
            Py_INCREF( exception_type );
            exception_value = PyUnicode_FromFormat( "name '%s' is not defined", "os" );
            exception_tb = NULL;
            NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
            CHAIN_EXCEPTION( exception_value );

            exception_lineno = 777;
            type_description_1 = "o";
            goto frame_exception_exit_1;
        }

        tmp_source_name_6 = tmp_mvar_value_4;
        tmp_source_name_5 = LOOKUP_ATTRIBUTE( tmp_source_name_6, const_str_plain_path );
        if ( tmp_source_name_5 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
            Py_DECREF( tmp_called_name_1 );

            exception_lineno = 777;
            type_description_1 = "o";
            goto frame_exception_exit_1;
        }
        tmp_called_name_2 = LOOKUP_ATTRIBUTE( tmp_source_name_5, const_str_plain_join );
        Py_DECREF( tmp_source_name_5 );
        if ( tmp_called_name_2 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
            Py_DECREF( tmp_called_name_1 );

            exception_lineno = 777;
            type_description_1 = "o";
            goto frame_exception_exit_1;
        }
        tmp_mvar_value_5 = GET_STRING_DICT_VALUE( moduledict_platform, (Nuitka_StringObject *)const_str_plain_os );

        if (unlikely( tmp_mvar_value_5 == NULL ))
        {
            tmp_mvar_value_5 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_os );
        }

        if ( tmp_mvar_value_5 == NULL )
        {
            Py_DECREF( tmp_called_name_1 );
            Py_DECREF( tmp_called_name_2 );
            exception_type = PyExc_NameError;
            Py_INCREF( exception_type );
            exception_value = PyUnicode_FromFormat( "name '%s' is not defined", "os" );
            exception_tb = NULL;
            NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
            CHAIN_EXCEPTION( exception_value );

            exception_lineno = 777;
            type_description_1 = "o";
            goto frame_exception_exit_1;
        }

        tmp_source_name_7 = tmp_mvar_value_5;
        tmp_called_instance_3 = LOOKUP_ATTRIBUTE( tmp_source_name_7, const_str_plain_path );
        if ( tmp_called_instance_3 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
            Py_DECREF( tmp_called_name_1 );
            Py_DECREF( tmp_called_name_2 );

            exception_lineno = 777;
            type_description_1 = "o";
            goto frame_exception_exit_1;
        }
        CHECK_OBJECT( par_filepath );
        tmp_args_element_name_5 = par_filepath;
        frame_d6799e85b3b4b4e2540373134d7ad719->m_frame.f_lineno = 777;
        {
            PyObject *call_args[] = { tmp_args_element_name_5 };
            tmp_args_element_name_4 = CALL_METHOD_WITH_ARGS1( tmp_called_instance_3, const_str_plain_dirname, call_args );
        }

        Py_DECREF( tmp_called_instance_3 );
        if ( tmp_args_element_name_4 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
            Py_DECREF( tmp_called_name_1 );
            Py_DECREF( tmp_called_name_2 );

            exception_lineno = 777;
            type_description_1 = "o";
            goto frame_exception_exit_1;
        }
        tmp_mvar_value_6 = GET_STRING_DICT_VALUE( moduledict_platform, (Nuitka_StringObject *)const_str_plain_os );

        if (unlikely( tmp_mvar_value_6 == NULL ))
        {
            tmp_mvar_value_6 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_os );
        }

        if ( tmp_mvar_value_6 == NULL )
        {
            Py_DECREF( tmp_called_name_1 );
            Py_DECREF( tmp_called_name_2 );
            Py_DECREF( tmp_args_element_name_4 );
            exception_type = PyExc_NameError;
            Py_INCREF( exception_type );
            exception_value = PyUnicode_FromFormat( "name '%s' is not defined", "os" );
            exception_tb = NULL;
            NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
            CHAIN_EXCEPTION( exception_value );

            exception_lineno = 777;
            type_description_1 = "o";
            goto frame_exception_exit_1;
        }

        tmp_called_instance_4 = tmp_mvar_value_6;
        CHECK_OBJECT( par_filepath );
        tmp_args_element_name_7 = par_filepath;
        frame_d6799e85b3b4b4e2540373134d7ad719->m_frame.f_lineno = 777;
        {
            PyObject *call_args[] = { tmp_args_element_name_7 };
            tmp_args_element_name_6 = CALL_METHOD_WITH_ARGS1( tmp_called_instance_4, const_str_plain_readlink, call_args );
        }

        if ( tmp_args_element_name_6 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
            Py_DECREF( tmp_called_name_1 );
            Py_DECREF( tmp_called_name_2 );
            Py_DECREF( tmp_args_element_name_4 );

            exception_lineno = 777;
            type_description_1 = "o";
            goto frame_exception_exit_1;
        }
        frame_d6799e85b3b4b4e2540373134d7ad719->m_frame.f_lineno = 777;
        {
            PyObject *call_args[] = { tmp_args_element_name_4, tmp_args_element_name_6 };
            tmp_args_element_name_3 = CALL_FUNCTION_WITH_ARGS2( tmp_called_name_2, call_args );
        }

        Py_DECREF( tmp_called_name_2 );
        Py_DECREF( tmp_args_element_name_4 );
        Py_DECREF( tmp_args_element_name_6 );
        if ( tmp_args_element_name_3 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
            Py_DECREF( tmp_called_name_1 );

            exception_lineno = 777;
            type_description_1 = "o";
            goto frame_exception_exit_1;
        }
        frame_d6799e85b3b4b4e2540373134d7ad719->m_frame.f_lineno = 776;
        {
            PyObject *call_args[] = { tmp_args_element_name_3 };
            tmp_assign_source_2 = CALL_FUNCTION_WITH_ARGS1( tmp_called_name_1, call_args );
        }

        Py_DECREF( tmp_called_name_1 );
        Py_DECREF( tmp_args_element_name_3 );
        if ( tmp_assign_source_2 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 776;
            type_description_1 = "o";
            goto frame_exception_exit_1;
        }
        {
            PyObject *old = par_filepath;
            assert( old != NULL );
            par_filepath = tmp_assign_source_2;
            Py_DECREF( old );
        }

    }
    if ( CONSIDER_THREADING() == false )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 775;
        type_description_1 = "o";
        goto frame_exception_exit_1;
    }
    goto loop_start_1;
    loop_end_1:;

#if 0
    RESTORE_FRAME_EXCEPTION( frame_d6799e85b3b4b4e2540373134d7ad719 );
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto frame_no_exception_1;

    frame_exception_exit_1:;

#if 0
    RESTORE_FRAME_EXCEPTION( frame_d6799e85b3b4b4e2540373134d7ad719 );
#endif

    if ( exception_tb == NULL )
    {
        exception_tb = MAKE_TRACEBACK( frame_d6799e85b3b4b4e2540373134d7ad719, exception_lineno );
    }
    else if ( exception_tb->tb_frame != &frame_d6799e85b3b4b4e2540373134d7ad719->m_frame )
    {
        exception_tb = ADD_TRACEBACK( exception_tb, frame_d6799e85b3b4b4e2540373134d7ad719, exception_lineno );
    }

    // Attachs locals to frame if any.
    Nuitka_Frame_AttachLocals(
        (struct Nuitka_FrameObject *)frame_d6799e85b3b4b4e2540373134d7ad719,
        type_description_1,
        par_filepath
    );


    // Release cached frame.
    if ( frame_d6799e85b3b4b4e2540373134d7ad719 == cache_frame_d6799e85b3b4b4e2540373134d7ad719 )
    {
        Py_DECREF( frame_d6799e85b3b4b4e2540373134d7ad719 );
    }
    cache_frame_d6799e85b3b4b4e2540373134d7ad719 = NULL;

    assertFrameObject( frame_d6799e85b3b4b4e2540373134d7ad719 );

    // Put the previous frame back on top.
    popFrameStack();

    // Return the error.
    goto try_except_handler_1;

    frame_no_exception_1:;
    CHECK_OBJECT( par_filepath );
    tmp_return_value = par_filepath;
    Py_INCREF( tmp_return_value );
    goto try_return_handler_1;
    // tried codes exits in all cases
    NUITKA_CANNOT_GET_HERE( platform$$$function_19__follow_symlinks );
    return NULL;
    // Return handler code:
    try_return_handler_1:;
    CHECK_OBJECT( (PyObject *)par_filepath );
    Py_DECREF( par_filepath );
    par_filepath = NULL;

    goto function_return_exit;
    // Exception handler code:
    try_except_handler_1:;
    exception_keeper_type_1 = exception_type;
    exception_keeper_value_1 = exception_value;
    exception_keeper_tb_1 = exception_tb;
    exception_keeper_lineno_1 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    Py_XDECREF( par_filepath );
    par_filepath = NULL;

    // Re-raise.
    exception_type = exception_keeper_type_1;
    exception_value = exception_keeper_value_1;
    exception_tb = exception_keeper_tb_1;
    exception_lineno = exception_keeper_lineno_1;

    goto function_exception_exit;
    // End of try:

    // Return statement must have exited already.
    NUITKA_CANNOT_GET_HERE( platform$$$function_19__follow_symlinks );
    return NULL;

function_exception_exit:
    assert( exception_type );
    RESTORE_ERROR_OCCURRED( exception_type, exception_value, exception_tb );

    return NULL;

function_return_exit:
   // Function cleanup code if any.


   // Actual function exit with return value, making sure we did not make
   // the error status worse despite non-NULL return.
   CHECK_OBJECT( tmp_return_value );
   assert( had_error || !ERROR_OCCURRED() );
   return tmp_return_value;
}


static PyObject *impl_platform$$$function_20__syscmd_uname( struct Nuitka_FunctionObject const *self, PyObject **python_pars )
{
    // Preserve error status for checks
#ifndef __NUITKA_NO_ASSERT__
    NUITKA_MAY_BE_UNUSED bool had_error = ERROR_OCCURRED();
#endif

    // Local variable declarations.
    PyObject *par_option = python_pars[ 0 ];
    PyObject *par_default = python_pars[ 1 ];
    PyObject *var_f = NULL;
    PyObject *var_output = NULL;
    PyObject *var_rc = NULL;
    struct Nuitka_FrameObject *frame_52aaa3e364e86ba8721dc4ad0fde4365;
    NUITKA_MAY_BE_UNUSED char const *type_description_1 = NULL;
    PyObject *exception_type = NULL;
    PyObject *exception_value = NULL;
    PyTracebackObject *exception_tb = NULL;
    NUITKA_MAY_BE_UNUSED int exception_lineno = 0;
    int tmp_res;
    PyObject *tmp_return_value = NULL;
    PyObject *exception_keeper_type_1;
    PyObject *exception_keeper_value_1;
    PyTracebackObject *exception_keeper_tb_1;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_1;
    PyObject *exception_preserved_type_1;
    PyObject *exception_preserved_value_1;
    PyTracebackObject *exception_preserved_tb_1;
    bool tmp_result;
    PyObject *exception_keeper_type_2;
    PyObject *exception_keeper_value_2;
    PyTracebackObject *exception_keeper_tb_2;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_2;
    static struct Nuitka_FrameObject *cache_frame_52aaa3e364e86ba8721dc4ad0fde4365 = NULL;
    PyObject *exception_keeper_type_3;
    PyObject *exception_keeper_value_3;
    PyTracebackObject *exception_keeper_tb_3;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_3;

    // Actual function body.
    // Tried code:
    MAKE_OR_REUSE_FRAME( cache_frame_52aaa3e364e86ba8721dc4ad0fde4365, codeobj_52aaa3e364e86ba8721dc4ad0fde4365, module_platform, sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *) );
    frame_52aaa3e364e86ba8721dc4ad0fde4365 = cache_frame_52aaa3e364e86ba8721dc4ad0fde4365;

    // Push the new frame as the currently active one.
    pushFrameStack( frame_52aaa3e364e86ba8721dc4ad0fde4365 );

    // Mark the frame object as in use, ref count 1 will be up for reuse.
    assert( Py_REFCNT( frame_52aaa3e364e86ba8721dc4ad0fde4365 ) == 2 ); // Frame stack

    // Framed code:
    {
        nuitka_bool tmp_condition_result_1;
        PyObject *tmp_compexpr_left_1;
        PyObject *tmp_compexpr_right_1;
        PyObject *tmp_source_name_1;
        PyObject *tmp_mvar_value_1;
        tmp_mvar_value_1 = GET_STRING_DICT_VALUE( moduledict_platform, (Nuitka_StringObject *)const_str_plain_sys );

        if (unlikely( tmp_mvar_value_1 == NULL ))
        {
            tmp_mvar_value_1 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_sys );
        }

        if ( tmp_mvar_value_1 == NULL )
        {

            exception_type = PyExc_NameError;
            Py_INCREF( exception_type );
            exception_value = PyUnicode_FromFormat( "name '%s' is not defined", "sys" );
            exception_tb = NULL;
            NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
            CHAIN_EXCEPTION( exception_value );

            exception_lineno = 784;
            type_description_1 = "ooooo";
            goto frame_exception_exit_1;
        }

        tmp_source_name_1 = tmp_mvar_value_1;
        tmp_compexpr_left_1 = LOOKUP_ATTRIBUTE( tmp_source_name_1, const_str_plain_platform );
        if ( tmp_compexpr_left_1 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 784;
            type_description_1 = "ooooo";
            goto frame_exception_exit_1;
        }
        tmp_compexpr_right_1 = const_tuple_str_plain_dos_str_plain_win32_str_plain_win16_tuple;
        tmp_res = PySequence_Contains( tmp_compexpr_right_1, tmp_compexpr_left_1 );
        Py_DECREF( tmp_compexpr_left_1 );
        if ( tmp_res == -1 )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 784;
            type_description_1 = "ooooo";
            goto frame_exception_exit_1;
        }
        tmp_condition_result_1 = ( tmp_res == 1 ) ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
        if ( tmp_condition_result_1 == NUITKA_BOOL_TRUE )
        {
            goto branch_yes_1;
        }
        else
        {
            goto branch_no_1;
        }
        branch_yes_1:;
        CHECK_OBJECT( par_default );
        tmp_return_value = par_default;
        Py_INCREF( tmp_return_value );
        goto frame_return_exit_1;
        branch_no_1:;
    }
    // Tried code:
    {
        PyObject *tmp_assign_source_1;
        PyObject *tmp_called_name_1;
        PyObject *tmp_source_name_2;
        PyObject *tmp_mvar_value_2;
        PyObject *tmp_args_element_name_1;
        PyObject *tmp_left_name_1;
        PyObject *tmp_right_name_1;
        PyObject *tmp_tuple_element_1;
        PyObject *tmp_mvar_value_3;
        tmp_mvar_value_2 = GET_STRING_DICT_VALUE( moduledict_platform, (Nuitka_StringObject *)const_str_plain_os );

        if (unlikely( tmp_mvar_value_2 == NULL ))
        {
            tmp_mvar_value_2 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_os );
        }

        if ( tmp_mvar_value_2 == NULL )
        {

            exception_type = PyExc_NameError;
            Py_INCREF( exception_type );
            exception_value = PyUnicode_FromFormat( "name '%s' is not defined", "os" );
            exception_tb = NULL;
            NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
            CHAIN_EXCEPTION( exception_value );

            exception_lineno = 788;
            type_description_1 = "ooooo";
            goto try_except_handler_2;
        }

        tmp_source_name_2 = tmp_mvar_value_2;
        tmp_called_name_1 = LOOKUP_ATTRIBUTE( tmp_source_name_2, const_str_plain_popen );
        if ( tmp_called_name_1 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 788;
            type_description_1 = "ooooo";
            goto try_except_handler_2;
        }
        tmp_left_name_1 = const_str_digest_93445454e75717f01046cf48aadea7c4;
        CHECK_OBJECT( par_option );
        tmp_tuple_element_1 = par_option;
        tmp_right_name_1 = PyTuple_New( 2 );
        Py_INCREF( tmp_tuple_element_1 );
        PyTuple_SET_ITEM( tmp_right_name_1, 0, tmp_tuple_element_1 );
        tmp_mvar_value_3 = GET_STRING_DICT_VALUE( moduledict_platform, (Nuitka_StringObject *)const_str_plain_DEV_NULL );

        if (unlikely( tmp_mvar_value_3 == NULL ))
        {
            tmp_mvar_value_3 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_DEV_NULL );
        }

        if ( tmp_mvar_value_3 == NULL )
        {
            Py_DECREF( tmp_called_name_1 );
            Py_DECREF( tmp_right_name_1 );
            exception_type = PyExc_NameError;
            Py_INCREF( exception_type );
            exception_value = PyUnicode_FromFormat( "name '%s' is not defined", "DEV_NULL" );
            exception_tb = NULL;
            NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
            CHAIN_EXCEPTION( exception_value );

            exception_lineno = 788;
            type_description_1 = "ooooo";
            goto try_except_handler_2;
        }

        tmp_tuple_element_1 = tmp_mvar_value_3;
        Py_INCREF( tmp_tuple_element_1 );
        PyTuple_SET_ITEM( tmp_right_name_1, 1, tmp_tuple_element_1 );
        tmp_args_element_name_1 = BINARY_OPERATION_REMAINDER( tmp_left_name_1, tmp_right_name_1 );
        Py_DECREF( tmp_right_name_1 );
        if ( tmp_args_element_name_1 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
            Py_DECREF( tmp_called_name_1 );

            exception_lineno = 788;
            type_description_1 = "ooooo";
            goto try_except_handler_2;
        }
        frame_52aaa3e364e86ba8721dc4ad0fde4365->m_frame.f_lineno = 788;
        {
            PyObject *call_args[] = { tmp_args_element_name_1 };
            tmp_assign_source_1 = CALL_FUNCTION_WITH_ARGS1( tmp_called_name_1, call_args );
        }

        Py_DECREF( tmp_called_name_1 );
        Py_DECREF( tmp_args_element_name_1 );
        if ( tmp_assign_source_1 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 788;
            type_description_1 = "ooooo";
            goto try_except_handler_2;
        }
        assert( var_f == NULL );
        var_f = tmp_assign_source_1;
    }
    goto try_end_1;
    // Exception handler code:
    try_except_handler_2:;
    exception_keeper_type_1 = exception_type;
    exception_keeper_value_1 = exception_value;
    exception_keeper_tb_1 = exception_tb;
    exception_keeper_lineno_1 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    // Preserve existing published exception.
    exception_preserved_type_1 = EXC_TYPE(PyThreadState_GET());
    Py_XINCREF( exception_preserved_type_1 );
    exception_preserved_value_1 = EXC_VALUE(PyThreadState_GET());
    Py_XINCREF( exception_preserved_value_1 );
    exception_preserved_tb_1 = (PyTracebackObject *)EXC_TRACEBACK(PyThreadState_GET());
    Py_XINCREF( exception_preserved_tb_1 );

    if ( exception_keeper_tb_1 == NULL )
    {
        exception_keeper_tb_1 = MAKE_TRACEBACK( frame_52aaa3e364e86ba8721dc4ad0fde4365, exception_keeper_lineno_1 );
    }
    else if ( exception_keeper_lineno_1 != 0 )
    {
        exception_keeper_tb_1 = ADD_TRACEBACK( exception_keeper_tb_1, frame_52aaa3e364e86ba8721dc4ad0fde4365, exception_keeper_lineno_1 );
    }

    NORMALIZE_EXCEPTION( &exception_keeper_type_1, &exception_keeper_value_1, &exception_keeper_tb_1 );
    PyException_SetTraceback( exception_keeper_value_1, (PyObject *)exception_keeper_tb_1 );
    PUBLISH_EXCEPTION( &exception_keeper_type_1, &exception_keeper_value_1, &exception_keeper_tb_1 );
    // Tried code:
    {
        nuitka_bool tmp_condition_result_2;
        PyObject *tmp_compexpr_left_2;
        PyObject *tmp_compexpr_right_2;
        tmp_compexpr_left_2 = EXC_TYPE(PyThreadState_GET());
        tmp_compexpr_right_2 = const_tuple_type_AttributeError_type_OSError_tuple;
        tmp_res = EXCEPTION_MATCH_BOOL( tmp_compexpr_left_2, tmp_compexpr_right_2 );
        if ( tmp_res == -1 )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 789;
            type_description_1 = "ooooo";
            goto try_except_handler_3;
        }
        tmp_condition_result_2 = ( tmp_res != 0 ) ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
        if ( tmp_condition_result_2 == NUITKA_BOOL_TRUE )
        {
            goto branch_yes_2;
        }
        else
        {
            goto branch_no_2;
        }
        branch_yes_2:;
        CHECK_OBJECT( par_default );
        tmp_return_value = par_default;
        Py_INCREF( tmp_return_value );
        goto try_return_handler_3;
        goto branch_end_2;
        branch_no_2:;
        tmp_result = RERAISE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
        if (unlikely( tmp_result == false ))
        {
            exception_lineno = 787;
        }

        if (exception_tb && exception_tb->tb_frame == &frame_52aaa3e364e86ba8721dc4ad0fde4365->m_frame) frame_52aaa3e364e86ba8721dc4ad0fde4365->m_frame.f_lineno = exception_tb->tb_lineno;
        type_description_1 = "ooooo";
        goto try_except_handler_3;
        branch_end_2:;
    }
    // tried codes exits in all cases
    NUITKA_CANNOT_GET_HERE( platform$$$function_20__syscmd_uname );
    return NULL;
    // Return handler code:
    try_return_handler_3:;
    // Restore previous exception.
    SET_CURRENT_EXCEPTION( exception_preserved_type_1, exception_preserved_value_1, exception_preserved_tb_1 );
    goto frame_return_exit_1;
    // Exception handler code:
    try_except_handler_3:;
    exception_keeper_type_2 = exception_type;
    exception_keeper_value_2 = exception_value;
    exception_keeper_tb_2 = exception_tb;
    exception_keeper_lineno_2 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    // Restore previous exception.
    SET_CURRENT_EXCEPTION( exception_preserved_type_1, exception_preserved_value_1, exception_preserved_tb_1 );
    // Re-raise.
    exception_type = exception_keeper_type_2;
    exception_value = exception_keeper_value_2;
    exception_tb = exception_keeper_tb_2;
    exception_lineno = exception_keeper_lineno_2;

    goto frame_exception_exit_1;
    // End of try:
    // End of try:
    try_end_1:;
    {
        PyObject *tmp_assign_source_2;
        PyObject *tmp_called_instance_1;
        PyObject *tmp_called_instance_2;
        CHECK_OBJECT( var_f );
        tmp_called_instance_2 = var_f;
        frame_52aaa3e364e86ba8721dc4ad0fde4365->m_frame.f_lineno = 791;
        tmp_called_instance_1 = CALL_METHOD_NO_ARGS( tmp_called_instance_2, const_str_plain_read );
        if ( tmp_called_instance_1 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 791;
            type_description_1 = "ooooo";
            goto frame_exception_exit_1;
        }
        frame_52aaa3e364e86ba8721dc4ad0fde4365->m_frame.f_lineno = 791;
        tmp_assign_source_2 = CALL_METHOD_NO_ARGS( tmp_called_instance_1, const_str_plain_strip );
        Py_DECREF( tmp_called_instance_1 );
        if ( tmp_assign_source_2 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 791;
            type_description_1 = "ooooo";
            goto frame_exception_exit_1;
        }
        assert( var_output == NULL );
        var_output = tmp_assign_source_2;
    }
    {
        PyObject *tmp_assign_source_3;
        PyObject *tmp_called_instance_3;
        CHECK_OBJECT( var_f );
        tmp_called_instance_3 = var_f;
        frame_52aaa3e364e86ba8721dc4ad0fde4365->m_frame.f_lineno = 792;
        tmp_assign_source_3 = CALL_METHOD_NO_ARGS( tmp_called_instance_3, const_str_plain_close );
        if ( tmp_assign_source_3 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 792;
            type_description_1 = "ooooo";
            goto frame_exception_exit_1;
        }
        assert( var_rc == NULL );
        var_rc = tmp_assign_source_3;
    }
    {
        nuitka_bool tmp_condition_result_3;
        int tmp_or_left_truth_1;
        nuitka_bool tmp_or_left_value_1;
        nuitka_bool tmp_or_right_value_1;
        PyObject *tmp_operand_name_1;
        int tmp_truth_name_1;
        CHECK_OBJECT( var_output );
        tmp_operand_name_1 = var_output;
        tmp_res = CHECK_IF_TRUE( tmp_operand_name_1 );
        if ( tmp_res == -1 )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 793;
            type_description_1 = "ooooo";
            goto frame_exception_exit_1;
        }
        tmp_or_left_value_1 = ( tmp_res == 0 ) ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
        tmp_or_left_truth_1 = tmp_or_left_value_1 == NUITKA_BOOL_TRUE ? 1 : 0;
        if ( tmp_or_left_truth_1 == 1 )
        {
            goto or_left_1;
        }
        else
        {
            goto or_right_1;
        }
        or_right_1:;
        CHECK_OBJECT( var_rc );
        tmp_truth_name_1 = CHECK_IF_TRUE( var_rc );
        if ( tmp_truth_name_1 == -1 )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 793;
            type_description_1 = "ooooo";
            goto frame_exception_exit_1;
        }
        tmp_or_right_value_1 = tmp_truth_name_1 == 1 ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
        tmp_condition_result_3 = tmp_or_right_value_1;
        goto or_end_1;
        or_left_1:;
        tmp_condition_result_3 = tmp_or_left_value_1;
        or_end_1:;
        if ( tmp_condition_result_3 == NUITKA_BOOL_TRUE )
        {
            goto branch_yes_3;
        }
        else
        {
            goto branch_no_3;
        }
        branch_yes_3:;
        CHECK_OBJECT( par_default );
        tmp_return_value = par_default;
        Py_INCREF( tmp_return_value );
        goto frame_return_exit_1;
        goto branch_end_3;
        branch_no_3:;
        CHECK_OBJECT( var_output );
        tmp_return_value = var_output;
        Py_INCREF( tmp_return_value );
        goto frame_return_exit_1;
        branch_end_3:;
    }

#if 0
    RESTORE_FRAME_EXCEPTION( frame_52aaa3e364e86ba8721dc4ad0fde4365 );
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto frame_no_exception_1;

    frame_return_exit_1:;
#if 0
    RESTORE_FRAME_EXCEPTION( frame_52aaa3e364e86ba8721dc4ad0fde4365 );
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto try_return_handler_1;

    frame_exception_exit_1:;

#if 0
    RESTORE_FRAME_EXCEPTION( frame_52aaa3e364e86ba8721dc4ad0fde4365 );
#endif

    if ( exception_tb == NULL )
    {
        exception_tb = MAKE_TRACEBACK( frame_52aaa3e364e86ba8721dc4ad0fde4365, exception_lineno );
    }
    else if ( exception_tb->tb_frame != &frame_52aaa3e364e86ba8721dc4ad0fde4365->m_frame )
    {
        exception_tb = ADD_TRACEBACK( exception_tb, frame_52aaa3e364e86ba8721dc4ad0fde4365, exception_lineno );
    }

    // Attachs locals to frame if any.
    Nuitka_Frame_AttachLocals(
        (struct Nuitka_FrameObject *)frame_52aaa3e364e86ba8721dc4ad0fde4365,
        type_description_1,
        par_option,
        par_default,
        var_f,
        var_output,
        var_rc
    );


    // Release cached frame.
    if ( frame_52aaa3e364e86ba8721dc4ad0fde4365 == cache_frame_52aaa3e364e86ba8721dc4ad0fde4365 )
    {
        Py_DECREF( frame_52aaa3e364e86ba8721dc4ad0fde4365 );
    }
    cache_frame_52aaa3e364e86ba8721dc4ad0fde4365 = NULL;

    assertFrameObject( frame_52aaa3e364e86ba8721dc4ad0fde4365 );

    // Put the previous frame back on top.
    popFrameStack();

    // Return the error.
    goto try_except_handler_1;

    frame_no_exception_1:;
    // tried codes exits in all cases
    NUITKA_CANNOT_GET_HERE( platform$$$function_20__syscmd_uname );
    return NULL;
    // Return handler code:
    try_return_handler_1:;
    CHECK_OBJECT( (PyObject *)par_option );
    Py_DECREF( par_option );
    par_option = NULL;

    CHECK_OBJECT( (PyObject *)par_default );
    Py_DECREF( par_default );
    par_default = NULL;

    Py_XDECREF( var_f );
    var_f = NULL;

    Py_XDECREF( var_output );
    var_output = NULL;

    Py_XDECREF( var_rc );
    var_rc = NULL;

    goto function_return_exit;
    // Exception handler code:
    try_except_handler_1:;
    exception_keeper_type_3 = exception_type;
    exception_keeper_value_3 = exception_value;
    exception_keeper_tb_3 = exception_tb;
    exception_keeper_lineno_3 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    CHECK_OBJECT( (PyObject *)par_option );
    Py_DECREF( par_option );
    par_option = NULL;

    CHECK_OBJECT( (PyObject *)par_default );
    Py_DECREF( par_default );
    par_default = NULL;

    Py_XDECREF( var_f );
    var_f = NULL;

    Py_XDECREF( var_output );
    var_output = NULL;

    Py_XDECREF( var_rc );
    var_rc = NULL;

    // Re-raise.
    exception_type = exception_keeper_type_3;
    exception_value = exception_keeper_value_3;
    exception_tb = exception_keeper_tb_3;
    exception_lineno = exception_keeper_lineno_3;

    goto function_exception_exit;
    // End of try:

    // Return statement must have exited already.
    NUITKA_CANNOT_GET_HERE( platform$$$function_20__syscmd_uname );
    return NULL;

function_exception_exit:
    assert( exception_type );
    RESTORE_ERROR_OCCURRED( exception_type, exception_value, exception_tb );

    return NULL;

function_return_exit:
   // Function cleanup code if any.


   // Actual function exit with return value, making sure we did not make
   // the error status worse despite non-NULL return.
   CHECK_OBJECT( tmp_return_value );
   assert( had_error || !ERROR_OCCURRED() );
   return tmp_return_value;
}


static PyObject *impl_platform$$$function_21__syscmd_file( struct Nuitka_FunctionObject const *self, PyObject **python_pars )
{
    // Preserve error status for checks
#ifndef __NUITKA_NO_ASSERT__
    NUITKA_MAY_BE_UNUSED bool had_error = ERROR_OCCURRED();
#endif

    // Local variable declarations.
    PyObject *par_target = python_pars[ 0 ];
    PyObject *par_default = python_pars[ 1 ];
    PyObject *var_proc = NULL;
    PyObject *var_output = NULL;
    PyObject *var_rc = NULL;
    struct Nuitka_FrameObject *frame_85168251d2490c4232318962bb330495;
    NUITKA_MAY_BE_UNUSED char const *type_description_1 = NULL;
    PyObject *exception_type = NULL;
    PyObject *exception_value = NULL;
    PyTracebackObject *exception_tb = NULL;
    NUITKA_MAY_BE_UNUSED int exception_lineno = 0;
    int tmp_res;
    PyObject *tmp_return_value = NULL;
    PyObject *exception_keeper_type_1;
    PyObject *exception_keeper_value_1;
    PyTracebackObject *exception_keeper_tb_1;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_1;
    PyObject *exception_preserved_type_1;
    PyObject *exception_preserved_value_1;
    PyTracebackObject *exception_preserved_tb_1;
    bool tmp_result;
    PyObject *exception_keeper_type_2;
    PyObject *exception_keeper_value_2;
    PyTracebackObject *exception_keeper_tb_2;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_2;
    static struct Nuitka_FrameObject *cache_frame_85168251d2490c4232318962bb330495 = NULL;
    PyObject *exception_keeper_type_3;
    PyObject *exception_keeper_value_3;
    PyTracebackObject *exception_keeper_tb_3;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_3;

    // Actual function body.
    // Tried code:
    MAKE_OR_REUSE_FRAME( cache_frame_85168251d2490c4232318962bb330495, codeobj_85168251d2490c4232318962bb330495, module_platform, sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *) );
    frame_85168251d2490c4232318962bb330495 = cache_frame_85168251d2490c4232318962bb330495;

    // Push the new frame as the currently active one.
    pushFrameStack( frame_85168251d2490c4232318962bb330495 );

    // Mark the frame object as in use, ref count 1 will be up for reuse.
    assert( Py_REFCNT( frame_85168251d2490c4232318962bb330495 ) == 2 ); // Frame stack

    // Framed code:
    {
        nuitka_bool tmp_condition_result_1;
        PyObject *tmp_compexpr_left_1;
        PyObject *tmp_compexpr_right_1;
        PyObject *tmp_source_name_1;
        PyObject *tmp_mvar_value_1;
        tmp_mvar_value_1 = GET_STRING_DICT_VALUE( moduledict_platform, (Nuitka_StringObject *)const_str_plain_sys );

        if (unlikely( tmp_mvar_value_1 == NULL ))
        {
            tmp_mvar_value_1 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_sys );
        }

        if ( tmp_mvar_value_1 == NULL )
        {

            exception_type = PyExc_NameError;
            Py_INCREF( exception_type );
            exception_value = PyUnicode_FromFormat( "name '%s' is not defined", "sys" );
            exception_tb = NULL;
            NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
            CHAIN_EXCEPTION( exception_value );

            exception_lineno = 807;
            type_description_1 = "ooooo";
            goto frame_exception_exit_1;
        }

        tmp_source_name_1 = tmp_mvar_value_1;
        tmp_compexpr_left_1 = LOOKUP_ATTRIBUTE( tmp_source_name_1, const_str_plain_platform );
        if ( tmp_compexpr_left_1 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 807;
            type_description_1 = "ooooo";
            goto frame_exception_exit_1;
        }
        tmp_compexpr_right_1 = const_tuple_str_plain_dos_str_plain_win32_str_plain_win16_tuple;
        tmp_res = PySequence_Contains( tmp_compexpr_right_1, tmp_compexpr_left_1 );
        Py_DECREF( tmp_compexpr_left_1 );
        if ( tmp_res == -1 )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 807;
            type_description_1 = "ooooo";
            goto frame_exception_exit_1;
        }
        tmp_condition_result_1 = ( tmp_res == 1 ) ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
        if ( tmp_condition_result_1 == NUITKA_BOOL_TRUE )
        {
            goto branch_yes_1;
        }
        else
        {
            goto branch_no_1;
        }
        branch_yes_1:;
        CHECK_OBJECT( par_default );
        tmp_return_value = par_default;
        Py_INCREF( tmp_return_value );
        goto frame_return_exit_1;
        branch_no_1:;
    }
    {
        PyObject *tmp_assign_source_1;
        PyObject *tmp_called_name_1;
        PyObject *tmp_mvar_value_2;
        PyObject *tmp_args_element_name_1;
        tmp_mvar_value_2 = GET_STRING_DICT_VALUE( moduledict_platform, (Nuitka_StringObject *)const_str_plain__follow_symlinks );

        if (unlikely( tmp_mvar_value_2 == NULL ))
        {
            tmp_mvar_value_2 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain__follow_symlinks );
        }

        if ( tmp_mvar_value_2 == NULL )
        {

            exception_type = PyExc_NameError;
            Py_INCREF( exception_type );
            exception_value = PyUnicode_FromFormat( "name '%s' is not defined", "_follow_symlinks" );
            exception_tb = NULL;
            NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
            CHAIN_EXCEPTION( exception_value );

            exception_lineno = 810;
            type_description_1 = "ooooo";
            goto frame_exception_exit_1;
        }

        tmp_called_name_1 = tmp_mvar_value_2;
        CHECK_OBJECT( par_target );
        tmp_args_element_name_1 = par_target;
        frame_85168251d2490c4232318962bb330495->m_frame.f_lineno = 810;
        {
            PyObject *call_args[] = { tmp_args_element_name_1 };
            tmp_assign_source_1 = CALL_FUNCTION_WITH_ARGS1( tmp_called_name_1, call_args );
        }

        if ( tmp_assign_source_1 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 810;
            type_description_1 = "ooooo";
            goto frame_exception_exit_1;
        }
        {
            PyObject *old = par_target;
            assert( old != NULL );
            par_target = tmp_assign_source_1;
            Py_DECREF( old );
        }

    }
    // Tried code:
    {
        PyObject *tmp_assign_source_2;
        PyObject *tmp_called_name_2;
        PyObject *tmp_source_name_2;
        PyObject *tmp_mvar_value_3;
        PyObject *tmp_args_name_1;
        PyObject *tmp_tuple_element_1;
        PyObject *tmp_list_element_1;
        PyObject *tmp_kw_name_1;
        PyObject *tmp_dict_key_1;
        PyObject *tmp_dict_value_1;
        PyObject *tmp_source_name_3;
        PyObject *tmp_mvar_value_4;
        PyObject *tmp_dict_key_2;
        PyObject *tmp_dict_value_2;
        PyObject *tmp_source_name_4;
        PyObject *tmp_mvar_value_5;
        tmp_mvar_value_3 = GET_STRING_DICT_VALUE( moduledict_platform, (Nuitka_StringObject *)const_str_plain_subprocess );

        if (unlikely( tmp_mvar_value_3 == NULL ))
        {
            tmp_mvar_value_3 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_subprocess );
        }

        if ( tmp_mvar_value_3 == NULL )
        {

            exception_type = PyExc_NameError;
            Py_INCREF( exception_type );
            exception_value = PyUnicode_FromFormat( "name '%s' is not defined", "subprocess" );
            exception_tb = NULL;
            NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
            CHAIN_EXCEPTION( exception_value );

            exception_lineno = 812;
            type_description_1 = "ooooo";
            goto try_except_handler_2;
        }

        tmp_source_name_2 = tmp_mvar_value_3;
        tmp_called_name_2 = LOOKUP_ATTRIBUTE( tmp_source_name_2, const_str_plain_Popen );
        if ( tmp_called_name_2 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 812;
            type_description_1 = "ooooo";
            goto try_except_handler_2;
        }
        tmp_list_element_1 = const_str_plain_file;
        tmp_tuple_element_1 = PyList_New( 2 );
        Py_INCREF( tmp_list_element_1 );
        PyList_SET_ITEM( tmp_tuple_element_1, 0, tmp_list_element_1 );
        CHECK_OBJECT( par_target );
        tmp_list_element_1 = par_target;
        Py_INCREF( tmp_list_element_1 );
        PyList_SET_ITEM( tmp_tuple_element_1, 1, tmp_list_element_1 );
        tmp_args_name_1 = PyTuple_New( 1 );
        PyTuple_SET_ITEM( tmp_args_name_1, 0, tmp_tuple_element_1 );
        tmp_dict_key_1 = const_str_plain_stdout;
        tmp_mvar_value_4 = GET_STRING_DICT_VALUE( moduledict_platform, (Nuitka_StringObject *)const_str_plain_subprocess );

        if (unlikely( tmp_mvar_value_4 == NULL ))
        {
            tmp_mvar_value_4 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_subprocess );
        }

        if ( tmp_mvar_value_4 == NULL )
        {
            Py_DECREF( tmp_called_name_2 );
            Py_DECREF( tmp_args_name_1 );
            exception_type = PyExc_NameError;
            Py_INCREF( exception_type );
            exception_value = PyUnicode_FromFormat( "name '%s' is not defined", "subprocess" );
            exception_tb = NULL;
            NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
            CHAIN_EXCEPTION( exception_value );

            exception_lineno = 813;
            type_description_1 = "ooooo";
            goto try_except_handler_2;
        }

        tmp_source_name_3 = tmp_mvar_value_4;
        tmp_dict_value_1 = LOOKUP_ATTRIBUTE( tmp_source_name_3, const_str_plain_PIPE );
        if ( tmp_dict_value_1 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
            Py_DECREF( tmp_called_name_2 );
            Py_DECREF( tmp_args_name_1 );

            exception_lineno = 813;
            type_description_1 = "ooooo";
            goto try_except_handler_2;
        }
        tmp_kw_name_1 = _PyDict_NewPresized( 2 );
        tmp_res = PyDict_SetItem( tmp_kw_name_1, tmp_dict_key_1, tmp_dict_value_1 );
        Py_DECREF( tmp_dict_value_1 );
        assert( !(tmp_res != 0) );
        tmp_dict_key_2 = const_str_plain_stderr;
        tmp_mvar_value_5 = GET_STRING_DICT_VALUE( moduledict_platform, (Nuitka_StringObject *)const_str_plain_subprocess );

        if (unlikely( tmp_mvar_value_5 == NULL ))
        {
            tmp_mvar_value_5 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_subprocess );
        }

        if ( tmp_mvar_value_5 == NULL )
        {
            Py_DECREF( tmp_called_name_2 );
            Py_DECREF( tmp_args_name_1 );
            Py_DECREF( tmp_kw_name_1 );
            exception_type = PyExc_NameError;
            Py_INCREF( exception_type );
            exception_value = PyUnicode_FromFormat( "name '%s' is not defined", "subprocess" );
            exception_tb = NULL;
            NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
            CHAIN_EXCEPTION( exception_value );

            exception_lineno = 813;
            type_description_1 = "ooooo";
            goto try_except_handler_2;
        }

        tmp_source_name_4 = tmp_mvar_value_5;
        tmp_dict_value_2 = LOOKUP_ATTRIBUTE( tmp_source_name_4, const_str_plain_STDOUT );
        if ( tmp_dict_value_2 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
            Py_DECREF( tmp_called_name_2 );
            Py_DECREF( tmp_args_name_1 );
            Py_DECREF( tmp_kw_name_1 );

            exception_lineno = 813;
            type_description_1 = "ooooo";
            goto try_except_handler_2;
        }
        tmp_res = PyDict_SetItem( tmp_kw_name_1, tmp_dict_key_2, tmp_dict_value_2 );
        Py_DECREF( tmp_dict_value_2 );
        assert( !(tmp_res != 0) );
        frame_85168251d2490c4232318962bb330495->m_frame.f_lineno = 812;
        tmp_assign_source_2 = CALL_FUNCTION( tmp_called_name_2, tmp_args_name_1, tmp_kw_name_1 );
        Py_DECREF( tmp_called_name_2 );
        Py_DECREF( tmp_args_name_1 );
        Py_DECREF( tmp_kw_name_1 );
        if ( tmp_assign_source_2 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 812;
            type_description_1 = "ooooo";
            goto try_except_handler_2;
        }
        assert( var_proc == NULL );
        var_proc = tmp_assign_source_2;
    }
    goto try_end_1;
    // Exception handler code:
    try_except_handler_2:;
    exception_keeper_type_1 = exception_type;
    exception_keeper_value_1 = exception_value;
    exception_keeper_tb_1 = exception_tb;
    exception_keeper_lineno_1 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    // Preserve existing published exception.
    exception_preserved_type_1 = EXC_TYPE(PyThreadState_GET());
    Py_XINCREF( exception_preserved_type_1 );
    exception_preserved_value_1 = EXC_VALUE(PyThreadState_GET());
    Py_XINCREF( exception_preserved_value_1 );
    exception_preserved_tb_1 = (PyTracebackObject *)EXC_TRACEBACK(PyThreadState_GET());
    Py_XINCREF( exception_preserved_tb_1 );

    if ( exception_keeper_tb_1 == NULL )
    {
        exception_keeper_tb_1 = MAKE_TRACEBACK( frame_85168251d2490c4232318962bb330495, exception_keeper_lineno_1 );
    }
    else if ( exception_keeper_lineno_1 != 0 )
    {
        exception_keeper_tb_1 = ADD_TRACEBACK( exception_keeper_tb_1, frame_85168251d2490c4232318962bb330495, exception_keeper_lineno_1 );
    }

    NORMALIZE_EXCEPTION( &exception_keeper_type_1, &exception_keeper_value_1, &exception_keeper_tb_1 );
    PyException_SetTraceback( exception_keeper_value_1, (PyObject *)exception_keeper_tb_1 );
    PUBLISH_EXCEPTION( &exception_keeper_type_1, &exception_keeper_value_1, &exception_keeper_tb_1 );
    // Tried code:
    {
        nuitka_bool tmp_condition_result_2;
        PyObject *tmp_compexpr_left_2;
        PyObject *tmp_compexpr_right_2;
        tmp_compexpr_left_2 = EXC_TYPE(PyThreadState_GET());
        tmp_compexpr_right_2 = const_tuple_type_AttributeError_type_OSError_tuple;
        tmp_res = EXCEPTION_MATCH_BOOL( tmp_compexpr_left_2, tmp_compexpr_right_2 );
        if ( tmp_res == -1 )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 815;
            type_description_1 = "ooooo";
            goto try_except_handler_3;
        }
        tmp_condition_result_2 = ( tmp_res != 0 ) ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
        if ( tmp_condition_result_2 == NUITKA_BOOL_TRUE )
        {
            goto branch_yes_2;
        }
        else
        {
            goto branch_no_2;
        }
        branch_yes_2:;
        CHECK_OBJECT( par_default );
        tmp_return_value = par_default;
        Py_INCREF( tmp_return_value );
        goto try_return_handler_3;
        goto branch_end_2;
        branch_no_2:;
        tmp_result = RERAISE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
        if (unlikely( tmp_result == false ))
        {
            exception_lineno = 811;
        }

        if (exception_tb && exception_tb->tb_frame == &frame_85168251d2490c4232318962bb330495->m_frame) frame_85168251d2490c4232318962bb330495->m_frame.f_lineno = exception_tb->tb_lineno;
        type_description_1 = "ooooo";
        goto try_except_handler_3;
        branch_end_2:;
    }
    // tried codes exits in all cases
    NUITKA_CANNOT_GET_HERE( platform$$$function_21__syscmd_file );
    return NULL;
    // Return handler code:
    try_return_handler_3:;
    // Restore previous exception.
    SET_CURRENT_EXCEPTION( exception_preserved_type_1, exception_preserved_value_1, exception_preserved_tb_1 );
    goto frame_return_exit_1;
    // Exception handler code:
    try_except_handler_3:;
    exception_keeper_type_2 = exception_type;
    exception_keeper_value_2 = exception_value;
    exception_keeper_tb_2 = exception_tb;
    exception_keeper_lineno_2 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    // Restore previous exception.
    SET_CURRENT_EXCEPTION( exception_preserved_type_1, exception_preserved_value_1, exception_preserved_tb_1 );
    // Re-raise.
    exception_type = exception_keeper_type_2;
    exception_value = exception_keeper_value_2;
    exception_tb = exception_keeper_tb_2;
    exception_lineno = exception_keeper_lineno_2;

    goto frame_exception_exit_1;
    // End of try:
    // End of try:
    try_end_1:;
    {
        PyObject *tmp_assign_source_3;
        PyObject *tmp_called_instance_1;
        PyObject *tmp_subscribed_name_1;
        PyObject *tmp_called_instance_2;
        PyObject *tmp_subscript_name_1;
        CHECK_OBJECT( var_proc );
        tmp_called_instance_2 = var_proc;
        frame_85168251d2490c4232318962bb330495->m_frame.f_lineno = 817;
        tmp_subscribed_name_1 = CALL_METHOD_NO_ARGS( tmp_called_instance_2, const_str_plain_communicate );
        if ( tmp_subscribed_name_1 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 817;
            type_description_1 = "ooooo";
            goto frame_exception_exit_1;
        }
        tmp_subscript_name_1 = const_int_0;
        tmp_called_instance_1 = LOOKUP_SUBSCRIPT_CONST( tmp_subscribed_name_1, tmp_subscript_name_1, 0 );
        Py_DECREF( tmp_subscribed_name_1 );
        if ( tmp_called_instance_1 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 817;
            type_description_1 = "ooooo";
            goto frame_exception_exit_1;
        }
        frame_85168251d2490c4232318962bb330495->m_frame.f_lineno = 817;
        tmp_assign_source_3 = CALL_METHOD_WITH_ARGS1( tmp_called_instance_1, const_str_plain_decode, &PyTuple_GET_ITEM( const_tuple_str_digest_62b7e67e29e99420603c12d205222fa5_tuple, 0 ) );

        Py_DECREF( tmp_called_instance_1 );
        if ( tmp_assign_source_3 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 817;
            type_description_1 = "ooooo";
            goto frame_exception_exit_1;
        }
        assert( var_output == NULL );
        var_output = tmp_assign_source_3;
    }
    {
        PyObject *tmp_assign_source_4;
        PyObject *tmp_called_instance_3;
        CHECK_OBJECT( var_proc );
        tmp_called_instance_3 = var_proc;
        frame_85168251d2490c4232318962bb330495->m_frame.f_lineno = 818;
        tmp_assign_source_4 = CALL_METHOD_NO_ARGS( tmp_called_instance_3, const_str_plain_wait );
        if ( tmp_assign_source_4 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 818;
            type_description_1 = "ooooo";
            goto frame_exception_exit_1;
        }
        assert( var_rc == NULL );
        var_rc = tmp_assign_source_4;
    }
    {
        nuitka_bool tmp_condition_result_3;
        int tmp_or_left_truth_1;
        nuitka_bool tmp_or_left_value_1;
        nuitka_bool tmp_or_right_value_1;
        PyObject *tmp_operand_name_1;
        int tmp_truth_name_1;
        CHECK_OBJECT( var_output );
        tmp_operand_name_1 = var_output;
        tmp_res = CHECK_IF_TRUE( tmp_operand_name_1 );
        if ( tmp_res == -1 )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 819;
            type_description_1 = "ooooo";
            goto frame_exception_exit_1;
        }
        tmp_or_left_value_1 = ( tmp_res == 0 ) ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
        tmp_or_left_truth_1 = tmp_or_left_value_1 == NUITKA_BOOL_TRUE ? 1 : 0;
        if ( tmp_or_left_truth_1 == 1 )
        {
            goto or_left_1;
        }
        else
        {
            goto or_right_1;
        }
        or_right_1:;
        CHECK_OBJECT( var_rc );
        tmp_truth_name_1 = CHECK_IF_TRUE( var_rc );
        if ( tmp_truth_name_1 == -1 )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 819;
            type_description_1 = "ooooo";
            goto frame_exception_exit_1;
        }
        tmp_or_right_value_1 = tmp_truth_name_1 == 1 ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
        tmp_condition_result_3 = tmp_or_right_value_1;
        goto or_end_1;
        or_left_1:;
        tmp_condition_result_3 = tmp_or_left_value_1;
        or_end_1:;
        if ( tmp_condition_result_3 == NUITKA_BOOL_TRUE )
        {
            goto branch_yes_3;
        }
        else
        {
            goto branch_no_3;
        }
        branch_yes_3:;
        CHECK_OBJECT( par_default );
        tmp_return_value = par_default;
        Py_INCREF( tmp_return_value );
        goto frame_return_exit_1;
        goto branch_end_3;
        branch_no_3:;
        CHECK_OBJECT( var_output );
        tmp_return_value = var_output;
        Py_INCREF( tmp_return_value );
        goto frame_return_exit_1;
        branch_end_3:;
    }

#if 0
    RESTORE_FRAME_EXCEPTION( frame_85168251d2490c4232318962bb330495 );
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto frame_no_exception_1;

    frame_return_exit_1:;
#if 0
    RESTORE_FRAME_EXCEPTION( frame_85168251d2490c4232318962bb330495 );
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto try_return_handler_1;

    frame_exception_exit_1:;

#if 0
    RESTORE_FRAME_EXCEPTION( frame_85168251d2490c4232318962bb330495 );
#endif

    if ( exception_tb == NULL )
    {
        exception_tb = MAKE_TRACEBACK( frame_85168251d2490c4232318962bb330495, exception_lineno );
    }
    else if ( exception_tb->tb_frame != &frame_85168251d2490c4232318962bb330495->m_frame )
    {
        exception_tb = ADD_TRACEBACK( exception_tb, frame_85168251d2490c4232318962bb330495, exception_lineno );
    }

    // Attachs locals to frame if any.
    Nuitka_Frame_AttachLocals(
        (struct Nuitka_FrameObject *)frame_85168251d2490c4232318962bb330495,
        type_description_1,
        par_target,
        par_default,
        var_proc,
        var_output,
        var_rc
    );


    // Release cached frame.
    if ( frame_85168251d2490c4232318962bb330495 == cache_frame_85168251d2490c4232318962bb330495 )
    {
        Py_DECREF( frame_85168251d2490c4232318962bb330495 );
    }
    cache_frame_85168251d2490c4232318962bb330495 = NULL;

    assertFrameObject( frame_85168251d2490c4232318962bb330495 );

    // Put the previous frame back on top.
    popFrameStack();

    // Return the error.
    goto try_except_handler_1;

    frame_no_exception_1:;
    // tried codes exits in all cases
    NUITKA_CANNOT_GET_HERE( platform$$$function_21__syscmd_file );
    return NULL;
    // Return handler code:
    try_return_handler_1:;
    CHECK_OBJECT( (PyObject *)par_target );
    Py_DECREF( par_target );
    par_target = NULL;

    CHECK_OBJECT( (PyObject *)par_default );
    Py_DECREF( par_default );
    par_default = NULL;

    Py_XDECREF( var_proc );
    var_proc = NULL;

    Py_XDECREF( var_output );
    var_output = NULL;

    Py_XDECREF( var_rc );
    var_rc = NULL;

    goto function_return_exit;
    // Exception handler code:
    try_except_handler_1:;
    exception_keeper_type_3 = exception_type;
    exception_keeper_value_3 = exception_value;
    exception_keeper_tb_3 = exception_tb;
    exception_keeper_lineno_3 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    CHECK_OBJECT( (PyObject *)par_target );
    Py_DECREF( par_target );
    par_target = NULL;

    CHECK_OBJECT( (PyObject *)par_default );
    Py_DECREF( par_default );
    par_default = NULL;

    Py_XDECREF( var_proc );
    var_proc = NULL;

    Py_XDECREF( var_output );
    var_output = NULL;

    Py_XDECREF( var_rc );
    var_rc = NULL;

    // Re-raise.
    exception_type = exception_keeper_type_3;
    exception_value = exception_keeper_value_3;
    exception_tb = exception_keeper_tb_3;
    exception_lineno = exception_keeper_lineno_3;

    goto function_exception_exit;
    // End of try:

    // Return statement must have exited already.
    NUITKA_CANNOT_GET_HERE( platform$$$function_21__syscmd_file );
    return NULL;

function_exception_exit:
    assert( exception_type );
    RESTORE_ERROR_OCCURRED( exception_type, exception_value, exception_tb );

    return NULL;

function_return_exit:
   // Function cleanup code if any.


   // Actual function exit with return value, making sure we did not make
   // the error status worse despite non-NULL return.
   CHECK_OBJECT( tmp_return_value );
   assert( had_error || !ERROR_OCCURRED() );
   return tmp_return_value;
}


static PyObject *impl_platform$$$function_22_architecture( struct Nuitka_FunctionObject const *self, PyObject **python_pars )
{
    // Preserve error status for checks
#ifndef __NUITKA_NO_ASSERT__
    NUITKA_MAY_BE_UNUSED bool had_error = ERROR_OCCURRED();
#endif

    // Local variable declarations.
    PyObject *par_executable = python_pars[ 0 ];
    PyObject *par_bits = python_pars[ 1 ];
    PyObject *par_linkage = python_pars[ 2 ];
    PyObject *var_struct = NULL;
    PyObject *var_size = NULL;
    PyObject *var_fileout = NULL;
    PyObject *var_b = NULL;
    PyObject *var_l = NULL;
    PyObject *tmp_tuple_unpack_1__element_1 = NULL;
    PyObject *tmp_tuple_unpack_1__element_2 = NULL;
    PyObject *tmp_tuple_unpack_1__source_iter = NULL;
    struct Nuitka_FrameObject *frame_80336ffcec4082d86976166272757e61;
    NUITKA_MAY_BE_UNUSED char const *type_description_1 = NULL;
    int tmp_res;
    PyObject *exception_type = NULL;
    PyObject *exception_value = NULL;
    PyTracebackObject *exception_tb = NULL;
    NUITKA_MAY_BE_UNUSED int exception_lineno = 0;
    PyObject *exception_keeper_type_1;
    PyObject *exception_keeper_value_1;
    PyTracebackObject *exception_keeper_tb_1;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_1;
    PyObject *exception_preserved_type_1;
    PyObject *exception_preserved_value_1;
    PyTracebackObject *exception_preserved_tb_1;
    bool tmp_result;
    PyObject *exception_keeper_type_2;
    PyObject *exception_keeper_value_2;
    PyTracebackObject *exception_keeper_tb_2;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_2;
    PyObject *tmp_iterator_attempt;
    PyObject *exception_keeper_type_3;
    PyObject *exception_keeper_value_3;
    PyTracebackObject *exception_keeper_tb_3;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_3;
    PyObject *exception_keeper_type_4;
    PyObject *exception_keeper_value_4;
    PyTracebackObject *exception_keeper_tb_4;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_4;
    PyObject *tmp_return_value = NULL;
    static struct Nuitka_FrameObject *cache_frame_80336ffcec4082d86976166272757e61 = NULL;
    PyObject *exception_keeper_type_5;
    PyObject *exception_keeper_value_5;
    PyTracebackObject *exception_keeper_tb_5;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_5;

    // Actual function body.
    // Tried code:
    MAKE_OR_REUSE_FRAME( cache_frame_80336ffcec4082d86976166272757e61, codeobj_80336ffcec4082d86976166272757e61, module_platform, sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *) );
    frame_80336ffcec4082d86976166272757e61 = cache_frame_80336ffcec4082d86976166272757e61;

    // Push the new frame as the currently active one.
    pushFrameStack( frame_80336ffcec4082d86976166272757e61 );

    // Mark the frame object as in use, ref count 1 will be up for reuse.
    assert( Py_REFCNT( frame_80336ffcec4082d86976166272757e61 ) == 2 ); // Frame stack

    // Framed code:
    {
        nuitka_bool tmp_condition_result_1;
        PyObject *tmp_operand_name_1;
        CHECK_OBJECT( par_bits );
        tmp_operand_name_1 = par_bits;
        tmp_res = CHECK_IF_TRUE( tmp_operand_name_1 );
        if ( tmp_res == -1 )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 857;
            type_description_1 = "oooooooo";
            goto frame_exception_exit_1;
        }
        tmp_condition_result_1 = ( tmp_res == 0 ) ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
        if ( tmp_condition_result_1 == NUITKA_BOOL_TRUE )
        {
            goto branch_yes_1;
        }
        else
        {
            goto branch_no_1;
        }
        branch_yes_1:;
        {
            PyObject *tmp_assign_source_1;
            PyObject *tmp_name_name_1;
            PyObject *tmp_globals_name_1;
            PyObject *tmp_locals_name_1;
            PyObject *tmp_fromlist_name_1;
            PyObject *tmp_level_name_1;
            tmp_name_name_1 = const_str_plain_struct;
            tmp_globals_name_1 = (PyObject *)moduledict_platform;
            tmp_locals_name_1 = Py_None;
            tmp_fromlist_name_1 = Py_None;
            tmp_level_name_1 = const_int_0;
            frame_80336ffcec4082d86976166272757e61->m_frame.f_lineno = 858;
            tmp_assign_source_1 = IMPORT_MODULE5( tmp_name_name_1, tmp_globals_name_1, tmp_locals_name_1, tmp_fromlist_name_1, tmp_level_name_1 );
            if ( tmp_assign_source_1 == NULL )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 858;
                type_description_1 = "oooooooo";
                goto frame_exception_exit_1;
            }
            assert( var_struct == NULL );
            var_struct = tmp_assign_source_1;
        }
        // Tried code:
        {
            PyObject *tmp_assign_source_2;
            PyObject *tmp_called_instance_1;
            CHECK_OBJECT( var_struct );
            tmp_called_instance_1 = var_struct;
            frame_80336ffcec4082d86976166272757e61->m_frame.f_lineno = 860;
            tmp_assign_source_2 = CALL_METHOD_WITH_ARGS1( tmp_called_instance_1, const_str_plain_calcsize, &PyTuple_GET_ITEM( const_tuple_str_plain_P_tuple, 0 ) );

            if ( tmp_assign_source_2 == NULL )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 860;
                type_description_1 = "oooooooo";
                goto try_except_handler_2;
            }
            assert( var_size == NULL );
            var_size = tmp_assign_source_2;
        }
        goto try_end_1;
        // Exception handler code:
        try_except_handler_2:;
        exception_keeper_type_1 = exception_type;
        exception_keeper_value_1 = exception_value;
        exception_keeper_tb_1 = exception_tb;
        exception_keeper_lineno_1 = exception_lineno;
        exception_type = NULL;
        exception_value = NULL;
        exception_tb = NULL;
        exception_lineno = 0;

        // Preserve existing published exception.
        exception_preserved_type_1 = EXC_TYPE(PyThreadState_GET());
        Py_XINCREF( exception_preserved_type_1 );
        exception_preserved_value_1 = EXC_VALUE(PyThreadState_GET());
        Py_XINCREF( exception_preserved_value_1 );
        exception_preserved_tb_1 = (PyTracebackObject *)EXC_TRACEBACK(PyThreadState_GET());
        Py_XINCREF( exception_preserved_tb_1 );

        if ( exception_keeper_tb_1 == NULL )
        {
            exception_keeper_tb_1 = MAKE_TRACEBACK( frame_80336ffcec4082d86976166272757e61, exception_keeper_lineno_1 );
        }
        else if ( exception_keeper_lineno_1 != 0 )
        {
            exception_keeper_tb_1 = ADD_TRACEBACK( exception_keeper_tb_1, frame_80336ffcec4082d86976166272757e61, exception_keeper_lineno_1 );
        }

        NORMALIZE_EXCEPTION( &exception_keeper_type_1, &exception_keeper_value_1, &exception_keeper_tb_1 );
        PyException_SetTraceback( exception_keeper_value_1, (PyObject *)exception_keeper_tb_1 );
        PUBLISH_EXCEPTION( &exception_keeper_type_1, &exception_keeper_value_1, &exception_keeper_tb_1 );
        // Tried code:
        {
            nuitka_bool tmp_condition_result_2;
            PyObject *tmp_compexpr_left_1;
            PyObject *tmp_compexpr_right_1;
            PyObject *tmp_source_name_1;
            tmp_compexpr_left_1 = EXC_TYPE(PyThreadState_GET());
            CHECK_OBJECT( var_struct );
            tmp_source_name_1 = var_struct;
            tmp_compexpr_right_1 = LOOKUP_ATTRIBUTE( tmp_source_name_1, const_str_plain_error );
            if ( tmp_compexpr_right_1 == NULL )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 861;
                type_description_1 = "oooooooo";
                goto try_except_handler_3;
            }
            tmp_res = EXCEPTION_MATCH_BOOL( tmp_compexpr_left_1, tmp_compexpr_right_1 );
            Py_DECREF( tmp_compexpr_right_1 );
            if ( tmp_res == -1 )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 861;
                type_description_1 = "oooooooo";
                goto try_except_handler_3;
            }
            tmp_condition_result_2 = ( tmp_res != 0 ) ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
            if ( tmp_condition_result_2 == NUITKA_BOOL_TRUE )
            {
                goto branch_yes_2;
            }
            else
            {
                goto branch_no_2;
            }
            branch_yes_2:;
            {
                PyObject *tmp_assign_source_3;
                PyObject *tmp_called_instance_2;
                CHECK_OBJECT( var_struct );
                tmp_called_instance_2 = var_struct;
                frame_80336ffcec4082d86976166272757e61->m_frame.f_lineno = 863;
                tmp_assign_source_3 = CALL_METHOD_WITH_ARGS1( tmp_called_instance_2, const_str_plain_calcsize, &PyTuple_GET_ITEM( const_tuple_str_plain_l_tuple, 0 ) );

                if ( tmp_assign_source_3 == NULL )
                {
                    assert( ERROR_OCCURRED() );

                    FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                    exception_lineno = 863;
                    type_description_1 = "oooooooo";
                    goto try_except_handler_3;
                }
                assert( var_size == NULL );
                var_size = tmp_assign_source_3;
            }
            goto branch_end_2;
            branch_no_2:;
            tmp_result = RERAISE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
            if (unlikely( tmp_result == false ))
            {
                exception_lineno = 859;
            }

            if (exception_tb && exception_tb->tb_frame == &frame_80336ffcec4082d86976166272757e61->m_frame) frame_80336ffcec4082d86976166272757e61->m_frame.f_lineno = exception_tb->tb_lineno;
            type_description_1 = "oooooooo";
            goto try_except_handler_3;
            branch_end_2:;
        }
        goto try_end_2;
        // Exception handler code:
        try_except_handler_3:;
        exception_keeper_type_2 = exception_type;
        exception_keeper_value_2 = exception_value;
        exception_keeper_tb_2 = exception_tb;
        exception_keeper_lineno_2 = exception_lineno;
        exception_type = NULL;
        exception_value = NULL;
        exception_tb = NULL;
        exception_lineno = 0;

        // Restore previous exception.
        SET_CURRENT_EXCEPTION( exception_preserved_type_1, exception_preserved_value_1, exception_preserved_tb_1 );
        // Re-raise.
        exception_type = exception_keeper_type_2;
        exception_value = exception_keeper_value_2;
        exception_tb = exception_keeper_tb_2;
        exception_lineno = exception_keeper_lineno_2;

        goto frame_exception_exit_1;
        // End of try:
        try_end_2:;
        // Restore previous exception.
        SET_CURRENT_EXCEPTION( exception_preserved_type_1, exception_preserved_value_1, exception_preserved_tb_1 );
        goto try_end_1;
        // exception handler codes exits in all cases
        NUITKA_CANNOT_GET_HERE( platform$$$function_22_architecture );
        return NULL;
        // End of try:
        try_end_1:;
        {
            PyObject *tmp_assign_source_4;
            PyObject *tmp_left_name_1;
            PyObject *tmp_unicode_arg_1;
            PyObject *tmp_left_name_2;
            PyObject *tmp_right_name_1;
            PyObject *tmp_right_name_2;
            if ( var_size == NULL )
            {

                exception_type = PyExc_UnboundLocalError;
                Py_INCREF( exception_type );
                exception_value = PyUnicode_FromFormat( "local variable '%s' referenced before assignment", "size" );
                exception_tb = NULL;
                NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
                CHAIN_EXCEPTION( exception_value );

                exception_lineno = 864;
                type_description_1 = "oooooooo";
                goto frame_exception_exit_1;
            }

            tmp_left_name_2 = var_size;
            tmp_right_name_1 = const_int_pos_8;
            tmp_unicode_arg_1 = BINARY_OPERATION_MUL( tmp_left_name_2, tmp_right_name_1 );
            if ( tmp_unicode_arg_1 == NULL )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 864;
                type_description_1 = "oooooooo";
                goto frame_exception_exit_1;
            }
            tmp_left_name_1 = PyObject_Unicode( tmp_unicode_arg_1 );
            Py_DECREF( tmp_unicode_arg_1 );
            if ( tmp_left_name_1 == NULL )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 864;
                type_description_1 = "oooooooo";
                goto frame_exception_exit_1;
            }
            tmp_right_name_2 = const_str_plain_bit;
            tmp_assign_source_4 = BINARY_OPERATION_ADD_OBJECT_UNICODE( tmp_left_name_1, tmp_right_name_2 );
            Py_DECREF( tmp_left_name_1 );
            if ( tmp_assign_source_4 == NULL )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 864;
                type_description_1 = "oooooooo";
                goto frame_exception_exit_1;
            }
            {
                PyObject *old = par_bits;
                assert( old != NULL );
                par_bits = tmp_assign_source_4;
                Py_DECREF( old );
            }

        }
        branch_no_1:;
    }
    {
        nuitka_bool tmp_condition_result_3;
        int tmp_truth_name_1;
        CHECK_OBJECT( par_executable );
        tmp_truth_name_1 = CHECK_IF_TRUE( par_executable );
        if ( tmp_truth_name_1 == -1 )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 867;
            type_description_1 = "oooooooo";
            goto frame_exception_exit_1;
        }
        tmp_condition_result_3 = tmp_truth_name_1 == 1 ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
        if ( tmp_condition_result_3 == NUITKA_BOOL_TRUE )
        {
            goto branch_yes_3;
        }
        else
        {
            goto branch_no_3;
        }
        branch_yes_3:;
        {
            PyObject *tmp_assign_source_5;
            PyObject *tmp_called_name_1;
            PyObject *tmp_mvar_value_1;
            PyObject *tmp_args_element_name_1;
            PyObject *tmp_args_element_name_2;
            tmp_mvar_value_1 = GET_STRING_DICT_VALUE( moduledict_platform, (Nuitka_StringObject *)const_str_plain__syscmd_file );

            if (unlikely( tmp_mvar_value_1 == NULL ))
            {
                tmp_mvar_value_1 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain__syscmd_file );
            }

            if ( tmp_mvar_value_1 == NULL )
            {

                exception_type = PyExc_NameError;
                Py_INCREF( exception_type );
                exception_value = PyUnicode_FromFormat( "name '%s' is not defined", "_syscmd_file" );
                exception_tb = NULL;
                NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
                CHAIN_EXCEPTION( exception_value );

                exception_lineno = 868;
                type_description_1 = "oooooooo";
                goto frame_exception_exit_1;
            }

            tmp_called_name_1 = tmp_mvar_value_1;
            CHECK_OBJECT( par_executable );
            tmp_args_element_name_1 = par_executable;
            tmp_args_element_name_2 = const_str_empty;
            frame_80336ffcec4082d86976166272757e61->m_frame.f_lineno = 868;
            {
                PyObject *call_args[] = { tmp_args_element_name_1, tmp_args_element_name_2 };
                tmp_assign_source_5 = CALL_FUNCTION_WITH_ARGS2( tmp_called_name_1, call_args );
            }

            if ( tmp_assign_source_5 == NULL )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 868;
                type_description_1 = "oooooooo";
                goto frame_exception_exit_1;
            }
            assert( var_fileout == NULL );
            var_fileout = tmp_assign_source_5;
        }
        goto branch_end_3;
        branch_no_3:;
        {
            PyObject *tmp_assign_source_6;
            tmp_assign_source_6 = const_str_empty;
            assert( var_fileout == NULL );
            Py_INCREF( tmp_assign_source_6 );
            var_fileout = tmp_assign_source_6;
        }
        branch_end_3:;
    }
    {
        nuitka_bool tmp_condition_result_4;
        int tmp_and_left_truth_1;
        nuitka_bool tmp_and_left_value_1;
        nuitka_bool tmp_and_right_value_1;
        PyObject *tmp_operand_name_2;
        PyObject *tmp_compexpr_left_2;
        PyObject *tmp_compexpr_right_2;
        PyObject *tmp_source_name_2;
        PyObject *tmp_mvar_value_2;
        CHECK_OBJECT( var_fileout );
        tmp_operand_name_2 = var_fileout;
        tmp_res = CHECK_IF_TRUE( tmp_operand_name_2 );
        if ( tmp_res == -1 )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 872;
            type_description_1 = "oooooooo";
            goto frame_exception_exit_1;
        }
        tmp_and_left_value_1 = ( tmp_res == 0 ) ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
        tmp_and_left_truth_1 = tmp_and_left_value_1 == NUITKA_BOOL_TRUE ? 1 : 0;
        if ( tmp_and_left_truth_1 == 1 )
        {
            goto and_right_1;
        }
        else
        {
            goto and_left_1;
        }
        and_right_1:;
        CHECK_OBJECT( par_executable );
        tmp_compexpr_left_2 = par_executable;
        tmp_mvar_value_2 = GET_STRING_DICT_VALUE( moduledict_platform, (Nuitka_StringObject *)const_str_plain_sys );

        if (unlikely( tmp_mvar_value_2 == NULL ))
        {
            tmp_mvar_value_2 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_sys );
        }

        if ( tmp_mvar_value_2 == NULL )
        {

            exception_type = PyExc_NameError;
            Py_INCREF( exception_type );
            exception_value = PyUnicode_FromFormat( "name '%s' is not defined", "sys" );
            exception_tb = NULL;
            NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
            CHAIN_EXCEPTION( exception_value );

            exception_lineno = 873;
            type_description_1 = "oooooooo";
            goto frame_exception_exit_1;
        }

        tmp_source_name_2 = tmp_mvar_value_2;
        tmp_compexpr_right_2 = LOOKUP_ATTRIBUTE( tmp_source_name_2, const_str_plain_executable );
        if ( tmp_compexpr_right_2 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 873;
            type_description_1 = "oooooooo";
            goto frame_exception_exit_1;
        }
        tmp_res = RICH_COMPARE_BOOL_EQ_OBJECT_OBJECT( tmp_compexpr_left_2, tmp_compexpr_right_2 );
        Py_DECREF( tmp_compexpr_right_2 );
        if ( tmp_res == -1 )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 873;
            type_description_1 = "oooooooo";
            goto frame_exception_exit_1;
        }
        tmp_and_right_value_1 = ( tmp_res != 0 ) ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
        tmp_condition_result_4 = tmp_and_right_value_1;
        goto and_end_1;
        and_left_1:;
        tmp_condition_result_4 = tmp_and_left_value_1;
        and_end_1:;
        if ( tmp_condition_result_4 == NUITKA_BOOL_TRUE )
        {
            goto branch_yes_4;
        }
        else
        {
            goto branch_no_4;
        }
        branch_yes_4:;
        {
            nuitka_bool tmp_condition_result_5;
            PyObject *tmp_compexpr_left_3;
            PyObject *tmp_compexpr_right_3;
            PyObject *tmp_source_name_3;
            PyObject *tmp_mvar_value_3;
            PyObject *tmp_mvar_value_4;
            tmp_mvar_value_3 = GET_STRING_DICT_VALUE( moduledict_platform, (Nuitka_StringObject *)const_str_plain_sys );

            if (unlikely( tmp_mvar_value_3 == NULL ))
            {
                tmp_mvar_value_3 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_sys );
            }

            if ( tmp_mvar_value_3 == NULL )
            {

                exception_type = PyExc_NameError;
                Py_INCREF( exception_type );
                exception_value = PyUnicode_FromFormat( "name '%s' is not defined", "sys" );
                exception_tb = NULL;
                NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
                CHAIN_EXCEPTION( exception_value );

                exception_lineno = 876;
                type_description_1 = "oooooooo";
                goto frame_exception_exit_1;
            }

            tmp_source_name_3 = tmp_mvar_value_3;
            tmp_compexpr_left_3 = LOOKUP_ATTRIBUTE( tmp_source_name_3, const_str_plain_platform );
            if ( tmp_compexpr_left_3 == NULL )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 876;
                type_description_1 = "oooooooo";
                goto frame_exception_exit_1;
            }
            tmp_mvar_value_4 = GET_STRING_DICT_VALUE( moduledict_platform, (Nuitka_StringObject *)const_str_plain__default_architecture );

            if (unlikely( tmp_mvar_value_4 == NULL ))
            {
                tmp_mvar_value_4 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain__default_architecture );
            }

            if ( tmp_mvar_value_4 == NULL )
            {
                Py_DECREF( tmp_compexpr_left_3 );
                exception_type = PyExc_NameError;
                Py_INCREF( exception_type );
                exception_value = PyUnicode_FromFormat( "name '%s' is not defined", "_default_architecture" );
                exception_tb = NULL;
                NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
                CHAIN_EXCEPTION( exception_value );

                exception_lineno = 876;
                type_description_1 = "oooooooo";
                goto frame_exception_exit_1;
            }

            tmp_compexpr_right_3 = tmp_mvar_value_4;
            tmp_res = PySequence_Contains( tmp_compexpr_right_3, tmp_compexpr_left_3 );
            Py_DECREF( tmp_compexpr_left_3 );
            if ( tmp_res == -1 )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 876;
                type_description_1 = "oooooooo";
                goto frame_exception_exit_1;
            }
            tmp_condition_result_5 = ( tmp_res == 1 ) ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
            if ( tmp_condition_result_5 == NUITKA_BOOL_TRUE )
            {
                goto branch_yes_5;
            }
            else
            {
                goto branch_no_5;
            }
            branch_yes_5:;
            // Tried code:
            {
                PyObject *tmp_assign_source_7;
                PyObject *tmp_iter_arg_1;
                PyObject *tmp_subscribed_name_1;
                PyObject *tmp_mvar_value_5;
                PyObject *tmp_subscript_name_1;
                PyObject *tmp_source_name_4;
                PyObject *tmp_mvar_value_6;
                tmp_mvar_value_5 = GET_STRING_DICT_VALUE( moduledict_platform, (Nuitka_StringObject *)const_str_plain__default_architecture );

                if (unlikely( tmp_mvar_value_5 == NULL ))
                {
                    tmp_mvar_value_5 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain__default_architecture );
                }

                if ( tmp_mvar_value_5 == NULL )
                {

                    exception_type = PyExc_NameError;
                    Py_INCREF( exception_type );
                    exception_value = PyUnicode_FromFormat( "name '%s' is not defined", "_default_architecture" );
                    exception_tb = NULL;
                    NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
                    CHAIN_EXCEPTION( exception_value );

                    exception_lineno = 877;
                    type_description_1 = "oooooooo";
                    goto try_except_handler_4;
                }

                tmp_subscribed_name_1 = tmp_mvar_value_5;
                tmp_mvar_value_6 = GET_STRING_DICT_VALUE( moduledict_platform, (Nuitka_StringObject *)const_str_plain_sys );

                if (unlikely( tmp_mvar_value_6 == NULL ))
                {
                    tmp_mvar_value_6 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_sys );
                }

                if ( tmp_mvar_value_6 == NULL )
                {

                    exception_type = PyExc_NameError;
                    Py_INCREF( exception_type );
                    exception_value = PyUnicode_FromFormat( "name '%s' is not defined", "sys" );
                    exception_tb = NULL;
                    NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
                    CHAIN_EXCEPTION( exception_value );

                    exception_lineno = 877;
                    type_description_1 = "oooooooo";
                    goto try_except_handler_4;
                }

                tmp_source_name_4 = tmp_mvar_value_6;
                tmp_subscript_name_1 = LOOKUP_ATTRIBUTE( tmp_source_name_4, const_str_plain_platform );
                if ( tmp_subscript_name_1 == NULL )
                {
                    assert( ERROR_OCCURRED() );

                    FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                    exception_lineno = 877;
                    type_description_1 = "oooooooo";
                    goto try_except_handler_4;
                }
                tmp_iter_arg_1 = LOOKUP_SUBSCRIPT( tmp_subscribed_name_1, tmp_subscript_name_1 );
                Py_DECREF( tmp_subscript_name_1 );
                if ( tmp_iter_arg_1 == NULL )
                {
                    assert( ERROR_OCCURRED() );

                    FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                    exception_lineno = 877;
                    type_description_1 = "oooooooo";
                    goto try_except_handler_4;
                }
                tmp_assign_source_7 = MAKE_UNPACK_ITERATOR( tmp_iter_arg_1 );
                Py_DECREF( tmp_iter_arg_1 );
                if ( tmp_assign_source_7 == NULL )
                {
                    assert( ERROR_OCCURRED() );

                    FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                    exception_lineno = 877;
                    type_description_1 = "oooooooo";
                    goto try_except_handler_4;
                }
                assert( tmp_tuple_unpack_1__source_iter == NULL );
                tmp_tuple_unpack_1__source_iter = tmp_assign_source_7;
            }
            // Tried code:
            {
                PyObject *tmp_assign_source_8;
                PyObject *tmp_unpack_1;
                CHECK_OBJECT( tmp_tuple_unpack_1__source_iter );
                tmp_unpack_1 = tmp_tuple_unpack_1__source_iter;
                tmp_assign_source_8 = UNPACK_NEXT( tmp_unpack_1, 0, 2 );
                if ( tmp_assign_source_8 == NULL )
                {
                    if ( !ERROR_OCCURRED() )
                    {
                        exception_type = PyExc_StopIteration;
                        Py_INCREF( exception_type );
                        exception_value = NULL;
                        exception_tb = NULL;
                    }
                    else
                    {
                        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
                    }


                    type_description_1 = "oooooooo";
                    exception_lineno = 877;
                    goto try_except_handler_5;
                }
                assert( tmp_tuple_unpack_1__element_1 == NULL );
                tmp_tuple_unpack_1__element_1 = tmp_assign_source_8;
            }
            {
                PyObject *tmp_assign_source_9;
                PyObject *tmp_unpack_2;
                CHECK_OBJECT( tmp_tuple_unpack_1__source_iter );
                tmp_unpack_2 = tmp_tuple_unpack_1__source_iter;
                tmp_assign_source_9 = UNPACK_NEXT( tmp_unpack_2, 1, 2 );
                if ( tmp_assign_source_9 == NULL )
                {
                    if ( !ERROR_OCCURRED() )
                    {
                        exception_type = PyExc_StopIteration;
                        Py_INCREF( exception_type );
                        exception_value = NULL;
                        exception_tb = NULL;
                    }
                    else
                    {
                        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
                    }


                    type_description_1 = "oooooooo";
                    exception_lineno = 877;
                    goto try_except_handler_5;
                }
                assert( tmp_tuple_unpack_1__element_2 == NULL );
                tmp_tuple_unpack_1__element_2 = tmp_assign_source_9;
            }
            {
                PyObject *tmp_iterator_name_1;
                CHECK_OBJECT( tmp_tuple_unpack_1__source_iter );
                tmp_iterator_name_1 = tmp_tuple_unpack_1__source_iter;
                // Check if iterator has left-over elements.
                CHECK_OBJECT( tmp_iterator_name_1 ); assert( HAS_ITERNEXT( tmp_iterator_name_1 ) );

                tmp_iterator_attempt = (*Py_TYPE( tmp_iterator_name_1 )->tp_iternext)( tmp_iterator_name_1 );

                if (likely( tmp_iterator_attempt == NULL ))
                {
                    PyObject *error = GET_ERROR_OCCURRED();

                    if ( error != NULL )
                    {
                        if ( EXCEPTION_MATCH_BOOL_SINGLE( error, PyExc_StopIteration ))
                        {
                            CLEAR_ERROR_OCCURRED();
                        }
                        else
                        {
                            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );

                            type_description_1 = "oooooooo";
                            exception_lineno = 877;
                            goto try_except_handler_5;
                        }
                    }
                }
                else
                {
                    Py_DECREF( tmp_iterator_attempt );

                    // TODO: Could avoid PyErr_Format.
#if PYTHON_VERSION < 300
                    PyErr_Format( PyExc_ValueError, "too many values to unpack" );
#else
                    PyErr_Format( PyExc_ValueError, "too many values to unpack (expected 2)" );
#endif
                    FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );

                    type_description_1 = "oooooooo";
                    exception_lineno = 877;
                    goto try_except_handler_5;
                }
            }
            goto try_end_3;
            // Exception handler code:
            try_except_handler_5:;
            exception_keeper_type_3 = exception_type;
            exception_keeper_value_3 = exception_value;
            exception_keeper_tb_3 = exception_tb;
            exception_keeper_lineno_3 = exception_lineno;
            exception_type = NULL;
            exception_value = NULL;
            exception_tb = NULL;
            exception_lineno = 0;

            CHECK_OBJECT( (PyObject *)tmp_tuple_unpack_1__source_iter );
            Py_DECREF( tmp_tuple_unpack_1__source_iter );
            tmp_tuple_unpack_1__source_iter = NULL;

            // Re-raise.
            exception_type = exception_keeper_type_3;
            exception_value = exception_keeper_value_3;
            exception_tb = exception_keeper_tb_3;
            exception_lineno = exception_keeper_lineno_3;

            goto try_except_handler_4;
            // End of try:
            try_end_3:;
            goto try_end_4;
            // Exception handler code:
            try_except_handler_4:;
            exception_keeper_type_4 = exception_type;
            exception_keeper_value_4 = exception_value;
            exception_keeper_tb_4 = exception_tb;
            exception_keeper_lineno_4 = exception_lineno;
            exception_type = NULL;
            exception_value = NULL;
            exception_tb = NULL;
            exception_lineno = 0;

            Py_XDECREF( tmp_tuple_unpack_1__element_1 );
            tmp_tuple_unpack_1__element_1 = NULL;

            Py_XDECREF( tmp_tuple_unpack_1__element_2 );
            tmp_tuple_unpack_1__element_2 = NULL;

            // Re-raise.
            exception_type = exception_keeper_type_4;
            exception_value = exception_keeper_value_4;
            exception_tb = exception_keeper_tb_4;
            exception_lineno = exception_keeper_lineno_4;

            goto frame_exception_exit_1;
            // End of try:
            try_end_4:;
            CHECK_OBJECT( (PyObject *)tmp_tuple_unpack_1__source_iter );
            Py_DECREF( tmp_tuple_unpack_1__source_iter );
            tmp_tuple_unpack_1__source_iter = NULL;

            {
                PyObject *tmp_assign_source_10;
                CHECK_OBJECT( tmp_tuple_unpack_1__element_1 );
                tmp_assign_source_10 = tmp_tuple_unpack_1__element_1;
                assert( var_b == NULL );
                Py_INCREF( tmp_assign_source_10 );
                var_b = tmp_assign_source_10;
            }
            Py_XDECREF( tmp_tuple_unpack_1__element_1 );
            tmp_tuple_unpack_1__element_1 = NULL;

            {
                PyObject *tmp_assign_source_11;
                CHECK_OBJECT( tmp_tuple_unpack_1__element_2 );
                tmp_assign_source_11 = tmp_tuple_unpack_1__element_2;
                assert( var_l == NULL );
                Py_INCREF( tmp_assign_source_11 );
                var_l = tmp_assign_source_11;
            }
            Py_XDECREF( tmp_tuple_unpack_1__element_2 );
            tmp_tuple_unpack_1__element_2 = NULL;

            {
                nuitka_bool tmp_condition_result_6;
                int tmp_truth_name_2;
                CHECK_OBJECT( var_b );
                tmp_truth_name_2 = CHECK_IF_TRUE( var_b );
                if ( tmp_truth_name_2 == -1 )
                {
                    assert( ERROR_OCCURRED() );

                    FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                    exception_lineno = 878;
                    type_description_1 = "oooooooo";
                    goto frame_exception_exit_1;
                }
                tmp_condition_result_6 = tmp_truth_name_2 == 1 ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
                if ( tmp_condition_result_6 == NUITKA_BOOL_TRUE )
                {
                    goto branch_yes_6;
                }
                else
                {
                    goto branch_no_6;
                }
                branch_yes_6:;
                {
                    PyObject *tmp_assign_source_12;
                    CHECK_OBJECT( var_b );
                    tmp_assign_source_12 = var_b;
                    {
                        PyObject *old = par_bits;
                        assert( old != NULL );
                        par_bits = tmp_assign_source_12;
                        Py_INCREF( par_bits );
                        Py_DECREF( old );
                    }

                }
                branch_no_6:;
            }
            {
                nuitka_bool tmp_condition_result_7;
                int tmp_truth_name_3;
                CHECK_OBJECT( var_l );
                tmp_truth_name_3 = CHECK_IF_TRUE( var_l );
                if ( tmp_truth_name_3 == -1 )
                {
                    assert( ERROR_OCCURRED() );

                    FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                    exception_lineno = 880;
                    type_description_1 = "oooooooo";
                    goto frame_exception_exit_1;
                }
                tmp_condition_result_7 = tmp_truth_name_3 == 1 ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
                if ( tmp_condition_result_7 == NUITKA_BOOL_TRUE )
                {
                    goto branch_yes_7;
                }
                else
                {
                    goto branch_no_7;
                }
                branch_yes_7:;
                {
                    PyObject *tmp_assign_source_13;
                    CHECK_OBJECT( var_l );
                    tmp_assign_source_13 = var_l;
                    {
                        PyObject *old = par_linkage;
                        assert( old != NULL );
                        par_linkage = tmp_assign_source_13;
                        Py_INCREF( par_linkage );
                        Py_DECREF( old );
                    }

                }
                branch_no_7:;
            }
            branch_no_5:;
        }
        {
            PyObject *tmp_tuple_element_1;
            if ( par_bits == NULL )
            {

                exception_type = PyExc_UnboundLocalError;
                Py_INCREF( exception_type );
                exception_value = PyUnicode_FromFormat( "local variable '%s' referenced before assignment", "bits" );
                exception_tb = NULL;
                NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
                CHAIN_EXCEPTION( exception_value );

                exception_lineno = 882;
                type_description_1 = "oooooooo";
                goto frame_exception_exit_1;
            }

            tmp_tuple_element_1 = par_bits;
            tmp_return_value = PyTuple_New( 2 );
            Py_INCREF( tmp_tuple_element_1 );
            PyTuple_SET_ITEM( tmp_return_value, 0, tmp_tuple_element_1 );
            if ( par_linkage == NULL )
            {
                Py_DECREF( tmp_return_value );
                exception_type = PyExc_UnboundLocalError;
                Py_INCREF( exception_type );
                exception_value = PyUnicode_FromFormat( "local variable '%s' referenced before assignment", "linkage" );
                exception_tb = NULL;
                NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
                CHAIN_EXCEPTION( exception_value );

                exception_lineno = 882;
                type_description_1 = "oooooooo";
                goto frame_exception_exit_1;
            }

            tmp_tuple_element_1 = par_linkage;
            Py_INCREF( tmp_tuple_element_1 );
            PyTuple_SET_ITEM( tmp_return_value, 1, tmp_tuple_element_1 );
            goto frame_return_exit_1;
        }
        branch_no_4:;
    }
    {
        nuitka_bool tmp_condition_result_8;
        PyObject *tmp_compexpr_left_4;
        PyObject *tmp_compexpr_right_4;
        tmp_compexpr_left_4 = const_str_plain_executable;
        CHECK_OBJECT( var_fileout );
        tmp_compexpr_right_4 = var_fileout;
        tmp_res = PySequence_Contains( tmp_compexpr_right_4, tmp_compexpr_left_4 );
        if ( tmp_res == -1 )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 884;
            type_description_1 = "oooooooo";
            goto frame_exception_exit_1;
        }
        tmp_condition_result_8 = ( tmp_res == 0 ) ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
        if ( tmp_condition_result_8 == NUITKA_BOOL_TRUE )
        {
            goto branch_yes_8;
        }
        else
        {
            goto branch_no_8;
        }
        branch_yes_8:;
        {
            PyObject *tmp_tuple_element_2;
            CHECK_OBJECT( par_bits );
            tmp_tuple_element_2 = par_bits;
            tmp_return_value = PyTuple_New( 2 );
            Py_INCREF( tmp_tuple_element_2 );
            PyTuple_SET_ITEM( tmp_return_value, 0, tmp_tuple_element_2 );
            CHECK_OBJECT( par_linkage );
            tmp_tuple_element_2 = par_linkage;
            Py_INCREF( tmp_tuple_element_2 );
            PyTuple_SET_ITEM( tmp_return_value, 1, tmp_tuple_element_2 );
            goto frame_return_exit_1;
        }
        branch_no_8:;
    }
    {
        nuitka_bool tmp_condition_result_9;
        PyObject *tmp_compexpr_left_5;
        PyObject *tmp_compexpr_right_5;
        tmp_compexpr_left_5 = const_str_digest_3c6ff7feba81d384f2b4e7c2b1df1ed3;
        CHECK_OBJECT( var_fileout );
        tmp_compexpr_right_5 = var_fileout;
        tmp_res = PySequence_Contains( tmp_compexpr_right_5, tmp_compexpr_left_5 );
        if ( tmp_res == -1 )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 889;
            type_description_1 = "oooooooo";
            goto frame_exception_exit_1;
        }
        tmp_condition_result_9 = ( tmp_res == 1 ) ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
        if ( tmp_condition_result_9 == NUITKA_BOOL_TRUE )
        {
            goto branch_yes_9;
        }
        else
        {
            goto branch_no_9;
        }
        branch_yes_9:;
        {
            PyObject *tmp_assign_source_14;
            tmp_assign_source_14 = const_str_plain_32bit;
            {
                PyObject *old = par_bits;
                assert( old != NULL );
                par_bits = tmp_assign_source_14;
                Py_INCREF( par_bits );
                Py_DECREF( old );
            }

        }
        goto branch_end_9;
        branch_no_9:;
        {
            nuitka_bool tmp_condition_result_10;
            PyObject *tmp_compexpr_left_6;
            PyObject *tmp_compexpr_right_6;
            tmp_compexpr_left_6 = const_str_plain_N32;
            CHECK_OBJECT( var_fileout );
            tmp_compexpr_right_6 = var_fileout;
            tmp_res = PySequence_Contains( tmp_compexpr_right_6, tmp_compexpr_left_6 );
            if ( tmp_res == -1 )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 891;
                type_description_1 = "oooooooo";
                goto frame_exception_exit_1;
            }
            tmp_condition_result_10 = ( tmp_res == 1 ) ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
            if ( tmp_condition_result_10 == NUITKA_BOOL_TRUE )
            {
                goto branch_yes_10;
            }
            else
            {
                goto branch_no_10;
            }
            branch_yes_10:;
            {
                PyObject *tmp_assign_source_15;
                tmp_assign_source_15 = const_str_plain_n32bit;
                {
                    PyObject *old = par_bits;
                    assert( old != NULL );
                    par_bits = tmp_assign_source_15;
                    Py_INCREF( par_bits );
                    Py_DECREF( old );
                }

            }
            goto branch_end_10;
            branch_no_10:;
            {
                nuitka_bool tmp_condition_result_11;
                PyObject *tmp_compexpr_left_7;
                PyObject *tmp_compexpr_right_7;
                tmp_compexpr_left_7 = const_str_digest_e385ea402377268c6888b12d36b96194;
                CHECK_OBJECT( var_fileout );
                tmp_compexpr_right_7 = var_fileout;
                tmp_res = PySequence_Contains( tmp_compexpr_right_7, tmp_compexpr_left_7 );
                if ( tmp_res == -1 )
                {
                    assert( ERROR_OCCURRED() );

                    FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                    exception_lineno = 894;
                    type_description_1 = "oooooooo";
                    goto frame_exception_exit_1;
                }
                tmp_condition_result_11 = ( tmp_res == 1 ) ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
                if ( tmp_condition_result_11 == NUITKA_BOOL_TRUE )
                {
                    goto branch_yes_11;
                }
                else
                {
                    goto branch_no_11;
                }
                branch_yes_11:;
                {
                    PyObject *tmp_assign_source_16;
                    tmp_assign_source_16 = const_str_plain_64bit;
                    {
                        PyObject *old = par_bits;
                        assert( old != NULL );
                        par_bits = tmp_assign_source_16;
                        Py_INCREF( par_bits );
                        Py_DECREF( old );
                    }

                }
                branch_no_11:;
            }
            branch_end_10:;
        }
        branch_end_9:;
    }
    {
        nuitka_bool tmp_condition_result_12;
        PyObject *tmp_compexpr_left_8;
        PyObject *tmp_compexpr_right_8;
        tmp_compexpr_left_8 = const_str_plain_ELF;
        CHECK_OBJECT( var_fileout );
        tmp_compexpr_right_8 = var_fileout;
        tmp_res = PySequence_Contains( tmp_compexpr_right_8, tmp_compexpr_left_8 );
        if ( tmp_res == -1 )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 898;
            type_description_1 = "oooooooo";
            goto frame_exception_exit_1;
        }
        tmp_condition_result_12 = ( tmp_res == 1 ) ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
        if ( tmp_condition_result_12 == NUITKA_BOOL_TRUE )
        {
            goto branch_yes_12;
        }
        else
        {
            goto branch_no_12;
        }
        branch_yes_12:;
        {
            PyObject *tmp_assign_source_17;
            tmp_assign_source_17 = const_str_plain_ELF;
            {
                PyObject *old = par_linkage;
                assert( old != NULL );
                par_linkage = tmp_assign_source_17;
                Py_INCREF( par_linkage );
                Py_DECREF( old );
            }

        }
        goto branch_end_12;
        branch_no_12:;
        {
            nuitka_bool tmp_condition_result_13;
            PyObject *tmp_compexpr_left_9;
            PyObject *tmp_compexpr_right_9;
            tmp_compexpr_left_9 = const_str_plain_PE;
            CHECK_OBJECT( var_fileout );
            tmp_compexpr_right_9 = var_fileout;
            tmp_res = PySequence_Contains( tmp_compexpr_right_9, tmp_compexpr_left_9 );
            if ( tmp_res == -1 )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 900;
                type_description_1 = "oooooooo";
                goto frame_exception_exit_1;
            }
            tmp_condition_result_13 = ( tmp_res == 1 ) ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
            if ( tmp_condition_result_13 == NUITKA_BOOL_TRUE )
            {
                goto branch_yes_13;
            }
            else
            {
                goto branch_no_13;
            }
            branch_yes_13:;
            {
                nuitka_bool tmp_condition_result_14;
                PyObject *tmp_compexpr_left_10;
                PyObject *tmp_compexpr_right_10;
                tmp_compexpr_left_10 = const_str_plain_Windows;
                CHECK_OBJECT( var_fileout );
                tmp_compexpr_right_10 = var_fileout;
                tmp_res = PySequence_Contains( tmp_compexpr_right_10, tmp_compexpr_left_10 );
                if ( tmp_res == -1 )
                {
                    assert( ERROR_OCCURRED() );

                    FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                    exception_lineno = 902;
                    type_description_1 = "oooooooo";
                    goto frame_exception_exit_1;
                }
                tmp_condition_result_14 = ( tmp_res == 1 ) ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
                if ( tmp_condition_result_14 == NUITKA_BOOL_TRUE )
                {
                    goto branch_yes_14;
                }
                else
                {
                    goto branch_no_14;
                }
                branch_yes_14:;
                {
                    PyObject *tmp_assign_source_18;
                    tmp_assign_source_18 = const_str_plain_WindowsPE;
                    {
                        PyObject *old = par_linkage;
                        assert( old != NULL );
                        par_linkage = tmp_assign_source_18;
                        Py_INCREF( par_linkage );
                        Py_DECREF( old );
                    }

                }
                goto branch_end_14;
                branch_no_14:;
                {
                    PyObject *tmp_assign_source_19;
                    tmp_assign_source_19 = const_str_plain_PE;
                    {
                        PyObject *old = par_linkage;
                        assert( old != NULL );
                        par_linkage = tmp_assign_source_19;
                        Py_INCREF( par_linkage );
                        Py_DECREF( old );
                    }

                }
                branch_end_14:;
            }
            goto branch_end_13;
            branch_no_13:;
            {
                nuitka_bool tmp_condition_result_15;
                PyObject *tmp_compexpr_left_11;
                PyObject *tmp_compexpr_right_11;
                tmp_compexpr_left_11 = const_str_plain_COFF;
                CHECK_OBJECT( var_fileout );
                tmp_compexpr_right_11 = var_fileout;
                tmp_res = PySequence_Contains( tmp_compexpr_right_11, tmp_compexpr_left_11 );
                if ( tmp_res == -1 )
                {
                    assert( ERROR_OCCURRED() );

                    FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                    exception_lineno = 906;
                    type_description_1 = "oooooooo";
                    goto frame_exception_exit_1;
                }
                tmp_condition_result_15 = ( tmp_res == 1 ) ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
                if ( tmp_condition_result_15 == NUITKA_BOOL_TRUE )
                {
                    goto branch_yes_15;
                }
                else
                {
                    goto branch_no_15;
                }
                branch_yes_15:;
                {
                    PyObject *tmp_assign_source_20;
                    tmp_assign_source_20 = const_str_plain_COFF;
                    {
                        PyObject *old = par_linkage;
                        assert( old != NULL );
                        par_linkage = tmp_assign_source_20;
                        Py_INCREF( par_linkage );
                        Py_DECREF( old );
                    }

                }
                goto branch_end_15;
                branch_no_15:;
                {
                    nuitka_bool tmp_condition_result_16;
                    PyObject *tmp_compexpr_left_12;
                    PyObject *tmp_compexpr_right_12;
                    tmp_compexpr_left_12 = const_str_digest_46c476a08b202054d25b54a5edafc033;
                    CHECK_OBJECT( var_fileout );
                    tmp_compexpr_right_12 = var_fileout;
                    tmp_res = PySequence_Contains( tmp_compexpr_right_12, tmp_compexpr_left_12 );
                    if ( tmp_res == -1 )
                    {
                        assert( ERROR_OCCURRED() );

                        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                        exception_lineno = 908;
                        type_description_1 = "oooooooo";
                        goto frame_exception_exit_1;
                    }
                    tmp_condition_result_16 = ( tmp_res == 1 ) ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
                    if ( tmp_condition_result_16 == NUITKA_BOOL_TRUE )
                    {
                        goto branch_yes_16;
                    }
                    else
                    {
                        goto branch_no_16;
                    }
                    branch_yes_16:;
                    {
                        PyObject *tmp_assign_source_21;
                        tmp_assign_source_21 = const_str_plain_MSDOS;
                        {
                            PyObject *old = par_linkage;
                            assert( old != NULL );
                            par_linkage = tmp_assign_source_21;
                            Py_INCREF( par_linkage );
                            Py_DECREF( old );
                        }

                    }
                    branch_no_16:;
                }
                branch_end_15:;
            }
            branch_end_13:;
        }
        branch_end_12:;
    }
    {
        PyObject *tmp_tuple_element_3;
        if ( par_bits == NULL )
        {

            exception_type = PyExc_UnboundLocalError;
            Py_INCREF( exception_type );
            exception_value = PyUnicode_FromFormat( "local variable '%s' referenced before assignment", "bits" );
            exception_tb = NULL;
            NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
            CHAIN_EXCEPTION( exception_value );

            exception_lineno = 914;
            type_description_1 = "oooooooo";
            goto frame_exception_exit_1;
        }

        tmp_tuple_element_3 = par_bits;
        tmp_return_value = PyTuple_New( 2 );
        Py_INCREF( tmp_tuple_element_3 );
        PyTuple_SET_ITEM( tmp_return_value, 0, tmp_tuple_element_3 );
        if ( par_linkage == NULL )
        {
            Py_DECREF( tmp_return_value );
            exception_type = PyExc_UnboundLocalError;
            Py_INCREF( exception_type );
            exception_value = PyUnicode_FromFormat( "local variable '%s' referenced before assignment", "linkage" );
            exception_tb = NULL;
            NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
            CHAIN_EXCEPTION( exception_value );

            exception_lineno = 914;
            type_description_1 = "oooooooo";
            goto frame_exception_exit_1;
        }

        tmp_tuple_element_3 = par_linkage;
        Py_INCREF( tmp_tuple_element_3 );
        PyTuple_SET_ITEM( tmp_return_value, 1, tmp_tuple_element_3 );
        goto frame_return_exit_1;
    }

#if 0
    RESTORE_FRAME_EXCEPTION( frame_80336ffcec4082d86976166272757e61 );
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto frame_no_exception_1;

    frame_return_exit_1:;
#if 0
    RESTORE_FRAME_EXCEPTION( frame_80336ffcec4082d86976166272757e61 );
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto try_return_handler_1;

    frame_exception_exit_1:;

#if 0
    RESTORE_FRAME_EXCEPTION( frame_80336ffcec4082d86976166272757e61 );
#endif

    if ( exception_tb == NULL )
    {
        exception_tb = MAKE_TRACEBACK( frame_80336ffcec4082d86976166272757e61, exception_lineno );
    }
    else if ( exception_tb->tb_frame != &frame_80336ffcec4082d86976166272757e61->m_frame )
    {
        exception_tb = ADD_TRACEBACK( exception_tb, frame_80336ffcec4082d86976166272757e61, exception_lineno );
    }

    // Attachs locals to frame if any.
    Nuitka_Frame_AttachLocals(
        (struct Nuitka_FrameObject *)frame_80336ffcec4082d86976166272757e61,
        type_description_1,
        par_executable,
        par_bits,
        par_linkage,
        var_struct,
        var_size,
        var_fileout,
        var_b,
        var_l
    );


    // Release cached frame.
    if ( frame_80336ffcec4082d86976166272757e61 == cache_frame_80336ffcec4082d86976166272757e61 )
    {
        Py_DECREF( frame_80336ffcec4082d86976166272757e61 );
    }
    cache_frame_80336ffcec4082d86976166272757e61 = NULL;

    assertFrameObject( frame_80336ffcec4082d86976166272757e61 );

    // Put the previous frame back on top.
    popFrameStack();

    // Return the error.
    goto try_except_handler_1;

    frame_no_exception_1:;
    // tried codes exits in all cases
    NUITKA_CANNOT_GET_HERE( platform$$$function_22_architecture );
    return NULL;
    // Return handler code:
    try_return_handler_1:;
    CHECK_OBJECT( (PyObject *)par_executable );
    Py_DECREF( par_executable );
    par_executable = NULL;

    Py_XDECREF( par_bits );
    par_bits = NULL;

    Py_XDECREF( par_linkage );
    par_linkage = NULL;

    Py_XDECREF( var_struct );
    var_struct = NULL;

    Py_XDECREF( var_size );
    var_size = NULL;

    CHECK_OBJECT( (PyObject *)var_fileout );
    Py_DECREF( var_fileout );
    var_fileout = NULL;

    Py_XDECREF( var_b );
    var_b = NULL;

    Py_XDECREF( var_l );
    var_l = NULL;

    goto function_return_exit;
    // Exception handler code:
    try_except_handler_1:;
    exception_keeper_type_5 = exception_type;
    exception_keeper_value_5 = exception_value;
    exception_keeper_tb_5 = exception_tb;
    exception_keeper_lineno_5 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    CHECK_OBJECT( (PyObject *)par_executable );
    Py_DECREF( par_executable );
    par_executable = NULL;

    Py_XDECREF( par_bits );
    par_bits = NULL;

    Py_XDECREF( par_linkage );
    par_linkage = NULL;

    Py_XDECREF( var_struct );
    var_struct = NULL;

    Py_XDECREF( var_size );
    var_size = NULL;

    Py_XDECREF( var_fileout );
    var_fileout = NULL;

    Py_XDECREF( var_b );
    var_b = NULL;

    Py_XDECREF( var_l );
    var_l = NULL;

    // Re-raise.
    exception_type = exception_keeper_type_5;
    exception_value = exception_keeper_value_5;
    exception_tb = exception_keeper_tb_5;
    exception_lineno = exception_keeper_lineno_5;

    goto function_exception_exit;
    // End of try:

    // Return statement must have exited already.
    NUITKA_CANNOT_GET_HERE( platform$$$function_22_architecture );
    return NULL;

function_exception_exit:
    assert( exception_type );
    RESTORE_ERROR_OCCURRED( exception_type, exception_value, exception_tb );

    return NULL;

function_return_exit:
   // Function cleanup code if any.


   // Actual function exit with return value, making sure we did not make
   // the error status worse despite non-NULL return.
   CHECK_OBJECT( tmp_return_value );
   assert( had_error || !ERROR_OCCURRED() );
   return tmp_return_value;
}


static PyObject *impl_platform$$$function_23_uname( struct Nuitka_FunctionObject const *self, PyObject **python_pars )
{
    // Preserve error status for checks
#ifndef __NUITKA_NO_ASSERT__
    NUITKA_MAY_BE_UNUSED bool had_error = ERROR_OCCURRED();
#endif

    // Local variable declarations.
    PyObject *var_no_os_uname = NULL;
    PyObject *var_processor = NULL;
    PyObject *var_system = NULL;
    PyObject *var_node = NULL;
    PyObject *var_release = NULL;
    PyObject *var_version = NULL;
    PyObject *var_machine = NULL;
    PyObject *var_use_syscmd_ver = NULL;
    PyObject *var_csd = NULL;
    PyObject *var_ptype = NULL;
    PyObject *var_vendor = NULL;
    PyObject *var_vminfo = NULL;
    PyObject *var_osinfo = NULL;
    PyObject *var_vms_lib = NULL;
    PyObject *var_csid = NULL;
    PyObject *var_cpu_number = NULL;
    nuitka_bool tmp_try_except_1__unhandled_indicator = NUITKA_BOOL_UNASSIGNED;
    PyObject *tmp_tuple_unpack_1__element_1 = NULL;
    PyObject *tmp_tuple_unpack_1__element_2 = NULL;
    PyObject *tmp_tuple_unpack_1__element_3 = NULL;
    PyObject *tmp_tuple_unpack_1__element_4 = NULL;
    PyObject *tmp_tuple_unpack_1__element_5 = NULL;
    PyObject *tmp_tuple_unpack_1__source_iter = NULL;
    PyObject *tmp_tuple_unpack_2__element_1 = NULL;
    PyObject *tmp_tuple_unpack_2__element_2 = NULL;
    PyObject *tmp_tuple_unpack_2__element_3 = NULL;
    PyObject *tmp_tuple_unpack_2__element_4 = NULL;
    PyObject *tmp_tuple_unpack_2__source_iter = NULL;
    PyObject *tmp_tuple_unpack_3__element_1 = NULL;
    PyObject *tmp_tuple_unpack_3__element_2 = NULL;
    PyObject *tmp_tuple_unpack_3__element_3 = NULL;
    PyObject *tmp_tuple_unpack_3__source_iter = NULL;
    PyObject *tmp_tuple_unpack_4__element_1 = NULL;
    PyObject *tmp_tuple_unpack_4__element_2 = NULL;
    PyObject *tmp_tuple_unpack_4__element_3 = NULL;
    PyObject *tmp_tuple_unpack_4__element_4 = NULL;
    PyObject *tmp_tuple_unpack_4__source_iter = NULL;
    PyObject *tmp_tuple_unpack_5__element_1 = NULL;
    PyObject *tmp_tuple_unpack_5__element_2 = NULL;
    PyObject *tmp_tuple_unpack_5__source_iter = NULL;
    struct Nuitka_FrameObject *frame_78e45736f492b0dece9b673c7115a31c;
    NUITKA_MAY_BE_UNUSED char const *type_description_1 = NULL;
    PyObject *exception_type = NULL;
    PyObject *exception_value = NULL;
    PyTracebackObject *exception_tb = NULL;
    NUITKA_MAY_BE_UNUSED int exception_lineno = 0;
    PyObject *tmp_return_value = NULL;
    PyObject *tmp_iterator_attempt;
    PyObject *exception_keeper_type_1;
    PyObject *exception_keeper_value_1;
    PyTracebackObject *exception_keeper_tb_1;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_1;
    PyObject *exception_keeper_type_2;
    PyObject *exception_keeper_value_2;
    PyTracebackObject *exception_keeper_tb_2;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_2;
    PyObject *exception_keeper_type_3;
    PyObject *exception_keeper_value_3;
    PyTracebackObject *exception_keeper_tb_3;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_3;
    PyObject *exception_preserved_type_1;
    PyObject *exception_preserved_value_1;
    PyTracebackObject *exception_preserved_tb_1;
    int tmp_res;
    bool tmp_result;
    PyObject *exception_keeper_type_4;
    PyObject *exception_keeper_value_4;
    PyTracebackObject *exception_keeper_tb_4;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_4;
    PyObject *exception_keeper_type_5;
    PyObject *exception_keeper_value_5;
    PyTracebackObject *exception_keeper_tb_5;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_5;
    PyObject *exception_keeper_type_6;
    PyObject *exception_keeper_value_6;
    PyTracebackObject *exception_keeper_tb_6;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_6;
    PyObject *exception_keeper_type_7;
    PyObject *exception_keeper_value_7;
    PyTracebackObject *exception_keeper_tb_7;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_7;
    PyObject *exception_keeper_type_8;
    PyObject *exception_keeper_value_8;
    PyTracebackObject *exception_keeper_tb_8;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_8;
    PyObject *exception_keeper_type_9;
    PyObject *exception_keeper_value_9;
    PyTracebackObject *exception_keeper_tb_9;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_9;
    PyObject *exception_keeper_type_10;
    PyObject *exception_keeper_value_10;
    PyTracebackObject *exception_keeper_tb_10;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_10;
    PyObject *exception_keeper_type_11;
    PyObject *exception_keeper_value_11;
    PyTracebackObject *exception_keeper_tb_11;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_11;
    PyObject *exception_preserved_type_2;
    PyObject *exception_preserved_value_2;
    PyTracebackObject *exception_preserved_tb_2;
    PyObject *exception_keeper_type_12;
    PyObject *exception_keeper_value_12;
    PyTracebackObject *exception_keeper_tb_12;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_12;
    PyObject *exception_keeper_type_13;
    PyObject *exception_keeper_value_13;
    PyTracebackObject *exception_keeper_tb_13;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_13;
    PyObject *exception_keeper_type_14;
    PyObject *exception_keeper_value_14;
    PyTracebackObject *exception_keeper_tb_14;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_14;
    PyObject *exception_keeper_type_15;
    PyObject *exception_keeper_value_15;
    PyTracebackObject *exception_keeper_tb_15;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_15;
    static struct Nuitka_FrameObject *cache_frame_78e45736f492b0dece9b673c7115a31c = NULL;
    PyObject *exception_keeper_type_16;
    PyObject *exception_keeper_value_16;
    PyTracebackObject *exception_keeper_tb_16;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_16;

    // Actual function body.
    {
        PyObject *tmp_assign_source_1;
        tmp_assign_source_1 = const_int_0;
        assert( var_no_os_uname == NULL );
        Py_INCREF( tmp_assign_source_1 );
        var_no_os_uname = tmp_assign_source_1;
    }
    // Tried code:
    MAKE_OR_REUSE_FRAME( cache_frame_78e45736f492b0dece9b673c7115a31c, codeobj_78e45736f492b0dece9b673c7115a31c, module_platform, sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *) );
    frame_78e45736f492b0dece9b673c7115a31c = cache_frame_78e45736f492b0dece9b673c7115a31c;

    // Push the new frame as the currently active one.
    pushFrameStack( frame_78e45736f492b0dece9b673c7115a31c );

    // Mark the frame object as in use, ref count 1 will be up for reuse.
    assert( Py_REFCNT( frame_78e45736f492b0dece9b673c7115a31c ) == 2 ); // Frame stack

    // Framed code:
    {
        nuitka_bool tmp_condition_result_1;
        PyObject *tmp_compexpr_left_1;
        PyObject *tmp_compexpr_right_1;
        PyObject *tmp_mvar_value_1;
        tmp_mvar_value_1 = GET_STRING_DICT_VALUE( moduledict_platform, (Nuitka_StringObject *)const_str_plain__uname_cache );

        if (unlikely( tmp_mvar_value_1 == NULL ))
        {
            tmp_mvar_value_1 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain__uname_cache );
        }

        if ( tmp_mvar_value_1 == NULL )
        {

            exception_type = PyExc_NameError;
            Py_INCREF( exception_type );
            exception_value = PyUnicode_FromFormat( "name '%s' is not defined", "_uname_cache" );
            exception_tb = NULL;
            NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
            CHAIN_EXCEPTION( exception_value );

            exception_lineno = 938;
            type_description_1 = "oooooooooooooooo";
            goto frame_exception_exit_1;
        }

        tmp_compexpr_left_1 = tmp_mvar_value_1;
        tmp_compexpr_right_1 = Py_None;
        tmp_condition_result_1 = ( tmp_compexpr_left_1 != tmp_compexpr_right_1 ) ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
        if ( tmp_condition_result_1 == NUITKA_BOOL_TRUE )
        {
            goto branch_yes_1;
        }
        else
        {
            goto branch_no_1;
        }
        branch_yes_1:;
        {
            PyObject *tmp_mvar_value_2;
            tmp_mvar_value_2 = GET_STRING_DICT_VALUE( moduledict_platform, (Nuitka_StringObject *)const_str_plain__uname_cache );

            if (unlikely( tmp_mvar_value_2 == NULL ))
            {
                tmp_mvar_value_2 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain__uname_cache );
            }

            if ( tmp_mvar_value_2 == NULL )
            {

                exception_type = PyExc_NameError;
                Py_INCREF( exception_type );
                exception_value = PyUnicode_FromFormat( "name '%s' is not defined", "_uname_cache" );
                exception_tb = NULL;
                NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
                CHAIN_EXCEPTION( exception_value );

                exception_lineno = 939;
                type_description_1 = "oooooooooooooooo";
                goto frame_exception_exit_1;
            }

            tmp_return_value = tmp_mvar_value_2;
            Py_INCREF( tmp_return_value );
            goto frame_return_exit_1;
        }
        branch_no_1:;
    }
    {
        PyObject *tmp_assign_source_2;
        tmp_assign_source_2 = const_str_empty;
        assert( var_processor == NULL );
        Py_INCREF( tmp_assign_source_2 );
        var_processor = tmp_assign_source_2;
    }
    // Tried code:
    // Tried code:
    {
        PyObject *tmp_assign_source_3;
        PyObject *tmp_iter_arg_1;
        PyObject *tmp_called_instance_1;
        PyObject *tmp_mvar_value_3;
        tmp_mvar_value_3 = GET_STRING_DICT_VALUE( moduledict_platform, (Nuitka_StringObject *)const_str_plain_os );

        if (unlikely( tmp_mvar_value_3 == NULL ))
        {
            tmp_mvar_value_3 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_os );
        }

        if ( tmp_mvar_value_3 == NULL )
        {

            exception_type = PyExc_NameError;
            Py_INCREF( exception_type );
            exception_value = PyUnicode_FromFormat( "name '%s' is not defined", "os" );
            exception_tb = NULL;
            NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
            CHAIN_EXCEPTION( exception_value );

            exception_lineno = 945;
            type_description_1 = "oooooooooooooooo";
            goto try_except_handler_3;
        }

        tmp_called_instance_1 = tmp_mvar_value_3;
        frame_78e45736f492b0dece9b673c7115a31c->m_frame.f_lineno = 945;
        tmp_iter_arg_1 = CALL_METHOD_NO_ARGS( tmp_called_instance_1, const_str_plain_uname );
        if ( tmp_iter_arg_1 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 945;
            type_description_1 = "oooooooooooooooo";
            goto try_except_handler_3;
        }
        tmp_assign_source_3 = MAKE_UNPACK_ITERATOR( tmp_iter_arg_1 );
        Py_DECREF( tmp_iter_arg_1 );
        if ( tmp_assign_source_3 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 945;
            type_description_1 = "oooooooooooooooo";
            goto try_except_handler_3;
        }
        assert( tmp_tuple_unpack_1__source_iter == NULL );
        tmp_tuple_unpack_1__source_iter = tmp_assign_source_3;
    }
    // Tried code:
    {
        PyObject *tmp_assign_source_4;
        PyObject *tmp_unpack_1;
        CHECK_OBJECT( tmp_tuple_unpack_1__source_iter );
        tmp_unpack_1 = tmp_tuple_unpack_1__source_iter;
        tmp_assign_source_4 = UNPACK_NEXT( tmp_unpack_1, 0, 5 );
        if ( tmp_assign_source_4 == NULL )
        {
            if ( !ERROR_OCCURRED() )
            {
                exception_type = PyExc_StopIteration;
                Py_INCREF( exception_type );
                exception_value = NULL;
                exception_tb = NULL;
            }
            else
            {
                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
            }


            type_description_1 = "oooooooooooooooo";
            exception_lineno = 945;
            goto try_except_handler_4;
        }
        assert( tmp_tuple_unpack_1__element_1 == NULL );
        tmp_tuple_unpack_1__element_1 = tmp_assign_source_4;
    }
    {
        PyObject *tmp_assign_source_5;
        PyObject *tmp_unpack_2;
        CHECK_OBJECT( tmp_tuple_unpack_1__source_iter );
        tmp_unpack_2 = tmp_tuple_unpack_1__source_iter;
        tmp_assign_source_5 = UNPACK_NEXT( tmp_unpack_2, 1, 5 );
        if ( tmp_assign_source_5 == NULL )
        {
            if ( !ERROR_OCCURRED() )
            {
                exception_type = PyExc_StopIteration;
                Py_INCREF( exception_type );
                exception_value = NULL;
                exception_tb = NULL;
            }
            else
            {
                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
            }


            type_description_1 = "oooooooooooooooo";
            exception_lineno = 945;
            goto try_except_handler_4;
        }
        assert( tmp_tuple_unpack_1__element_2 == NULL );
        tmp_tuple_unpack_1__element_2 = tmp_assign_source_5;
    }
    {
        PyObject *tmp_assign_source_6;
        PyObject *tmp_unpack_3;
        CHECK_OBJECT( tmp_tuple_unpack_1__source_iter );
        tmp_unpack_3 = tmp_tuple_unpack_1__source_iter;
        tmp_assign_source_6 = UNPACK_NEXT( tmp_unpack_3, 2, 5 );
        if ( tmp_assign_source_6 == NULL )
        {
            if ( !ERROR_OCCURRED() )
            {
                exception_type = PyExc_StopIteration;
                Py_INCREF( exception_type );
                exception_value = NULL;
                exception_tb = NULL;
            }
            else
            {
                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
            }


            type_description_1 = "oooooooooooooooo";
            exception_lineno = 945;
            goto try_except_handler_4;
        }
        assert( tmp_tuple_unpack_1__element_3 == NULL );
        tmp_tuple_unpack_1__element_3 = tmp_assign_source_6;
    }
    {
        PyObject *tmp_assign_source_7;
        PyObject *tmp_unpack_4;
        CHECK_OBJECT( tmp_tuple_unpack_1__source_iter );
        tmp_unpack_4 = tmp_tuple_unpack_1__source_iter;
        tmp_assign_source_7 = UNPACK_NEXT( tmp_unpack_4, 3, 5 );
        if ( tmp_assign_source_7 == NULL )
        {
            if ( !ERROR_OCCURRED() )
            {
                exception_type = PyExc_StopIteration;
                Py_INCREF( exception_type );
                exception_value = NULL;
                exception_tb = NULL;
            }
            else
            {
                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
            }


            type_description_1 = "oooooooooooooooo";
            exception_lineno = 945;
            goto try_except_handler_4;
        }
        assert( tmp_tuple_unpack_1__element_4 == NULL );
        tmp_tuple_unpack_1__element_4 = tmp_assign_source_7;
    }
    {
        PyObject *tmp_assign_source_8;
        PyObject *tmp_unpack_5;
        CHECK_OBJECT( tmp_tuple_unpack_1__source_iter );
        tmp_unpack_5 = tmp_tuple_unpack_1__source_iter;
        tmp_assign_source_8 = UNPACK_NEXT( tmp_unpack_5, 4, 5 );
        if ( tmp_assign_source_8 == NULL )
        {
            if ( !ERROR_OCCURRED() )
            {
                exception_type = PyExc_StopIteration;
                Py_INCREF( exception_type );
                exception_value = NULL;
                exception_tb = NULL;
            }
            else
            {
                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
            }


            type_description_1 = "oooooooooooooooo";
            exception_lineno = 945;
            goto try_except_handler_4;
        }
        assert( tmp_tuple_unpack_1__element_5 == NULL );
        tmp_tuple_unpack_1__element_5 = tmp_assign_source_8;
    }
    {
        PyObject *tmp_iterator_name_1;
        CHECK_OBJECT( tmp_tuple_unpack_1__source_iter );
        tmp_iterator_name_1 = tmp_tuple_unpack_1__source_iter;
        // Check if iterator has left-over elements.
        CHECK_OBJECT( tmp_iterator_name_1 ); assert( HAS_ITERNEXT( tmp_iterator_name_1 ) );

        tmp_iterator_attempt = (*Py_TYPE( tmp_iterator_name_1 )->tp_iternext)( tmp_iterator_name_1 );

        if (likely( tmp_iterator_attempt == NULL ))
        {
            PyObject *error = GET_ERROR_OCCURRED();

            if ( error != NULL )
            {
                if ( EXCEPTION_MATCH_BOOL_SINGLE( error, PyExc_StopIteration ))
                {
                    CLEAR_ERROR_OCCURRED();
                }
                else
                {
                    FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );

                    type_description_1 = "oooooooooooooooo";
                    exception_lineno = 945;
                    goto try_except_handler_4;
                }
            }
        }
        else
        {
            Py_DECREF( tmp_iterator_attempt );

            // TODO: Could avoid PyErr_Format.
#if PYTHON_VERSION < 300
            PyErr_Format( PyExc_ValueError, "too many values to unpack" );
#else
            PyErr_Format( PyExc_ValueError, "too many values to unpack (expected 5)" );
#endif
            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );

            type_description_1 = "oooooooooooooooo";
            exception_lineno = 945;
            goto try_except_handler_4;
        }
    }
    goto try_end_1;
    // Exception handler code:
    try_except_handler_4:;
    exception_keeper_type_1 = exception_type;
    exception_keeper_value_1 = exception_value;
    exception_keeper_tb_1 = exception_tb;
    exception_keeper_lineno_1 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    CHECK_OBJECT( (PyObject *)tmp_tuple_unpack_1__source_iter );
    Py_DECREF( tmp_tuple_unpack_1__source_iter );
    tmp_tuple_unpack_1__source_iter = NULL;

    // Re-raise.
    exception_type = exception_keeper_type_1;
    exception_value = exception_keeper_value_1;
    exception_tb = exception_keeper_tb_1;
    exception_lineno = exception_keeper_lineno_1;

    goto try_except_handler_3;
    // End of try:
    try_end_1:;
    goto try_end_2;
    // Exception handler code:
    try_except_handler_3:;
    exception_keeper_type_2 = exception_type;
    exception_keeper_value_2 = exception_value;
    exception_keeper_tb_2 = exception_tb;
    exception_keeper_lineno_2 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    Py_XDECREF( tmp_tuple_unpack_1__element_1 );
    tmp_tuple_unpack_1__element_1 = NULL;

    Py_XDECREF( tmp_tuple_unpack_1__element_2 );
    tmp_tuple_unpack_1__element_2 = NULL;

    Py_XDECREF( tmp_tuple_unpack_1__element_3 );
    tmp_tuple_unpack_1__element_3 = NULL;

    Py_XDECREF( tmp_tuple_unpack_1__element_4 );
    tmp_tuple_unpack_1__element_4 = NULL;

    Py_XDECREF( tmp_tuple_unpack_1__element_5 );
    tmp_tuple_unpack_1__element_5 = NULL;

    // Re-raise.
    exception_type = exception_keeper_type_2;
    exception_value = exception_keeper_value_2;
    exception_tb = exception_keeper_tb_2;
    exception_lineno = exception_keeper_lineno_2;

    goto try_except_handler_2;
    // End of try:
    try_end_2:;
    CHECK_OBJECT( (PyObject *)tmp_tuple_unpack_1__source_iter );
    Py_DECREF( tmp_tuple_unpack_1__source_iter );
    tmp_tuple_unpack_1__source_iter = NULL;

    {
        PyObject *tmp_assign_source_9;
        CHECK_OBJECT( tmp_tuple_unpack_1__element_1 );
        tmp_assign_source_9 = tmp_tuple_unpack_1__element_1;
        assert( var_system == NULL );
        Py_INCREF( tmp_assign_source_9 );
        var_system = tmp_assign_source_9;
    }
    Py_XDECREF( tmp_tuple_unpack_1__element_1 );
    tmp_tuple_unpack_1__element_1 = NULL;

    {
        PyObject *tmp_assign_source_10;
        CHECK_OBJECT( tmp_tuple_unpack_1__element_2 );
        tmp_assign_source_10 = tmp_tuple_unpack_1__element_2;
        assert( var_node == NULL );
        Py_INCREF( tmp_assign_source_10 );
        var_node = tmp_assign_source_10;
    }
    Py_XDECREF( tmp_tuple_unpack_1__element_2 );
    tmp_tuple_unpack_1__element_2 = NULL;

    {
        PyObject *tmp_assign_source_11;
        CHECK_OBJECT( tmp_tuple_unpack_1__element_3 );
        tmp_assign_source_11 = tmp_tuple_unpack_1__element_3;
        assert( var_release == NULL );
        Py_INCREF( tmp_assign_source_11 );
        var_release = tmp_assign_source_11;
    }
    Py_XDECREF( tmp_tuple_unpack_1__element_3 );
    tmp_tuple_unpack_1__element_3 = NULL;

    {
        PyObject *tmp_assign_source_12;
        CHECK_OBJECT( tmp_tuple_unpack_1__element_4 );
        tmp_assign_source_12 = tmp_tuple_unpack_1__element_4;
        assert( var_version == NULL );
        Py_INCREF( tmp_assign_source_12 );
        var_version = tmp_assign_source_12;
    }
    Py_XDECREF( tmp_tuple_unpack_1__element_4 );
    tmp_tuple_unpack_1__element_4 = NULL;

    {
        PyObject *tmp_assign_source_13;
        CHECK_OBJECT( tmp_tuple_unpack_1__element_5 );
        tmp_assign_source_13 = tmp_tuple_unpack_1__element_5;
        assert( var_machine == NULL );
        Py_INCREF( tmp_assign_source_13 );
        var_machine = tmp_assign_source_13;
    }
    Py_XDECREF( tmp_tuple_unpack_1__element_5 );
    tmp_tuple_unpack_1__element_5 = NULL;

    goto try_end_3;
    // Exception handler code:
    try_except_handler_2:;
    exception_keeper_type_3 = exception_type;
    exception_keeper_value_3 = exception_value;
    exception_keeper_tb_3 = exception_tb;
    exception_keeper_lineno_3 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    // Preserve existing published exception.
    exception_preserved_type_1 = EXC_TYPE(PyThreadState_GET());
    Py_XINCREF( exception_preserved_type_1 );
    exception_preserved_value_1 = EXC_VALUE(PyThreadState_GET());
    Py_XINCREF( exception_preserved_value_1 );
    exception_preserved_tb_1 = (PyTracebackObject *)EXC_TRACEBACK(PyThreadState_GET());
    Py_XINCREF( exception_preserved_tb_1 );

    if ( exception_keeper_tb_3 == NULL )
    {
        exception_keeper_tb_3 = MAKE_TRACEBACK( frame_78e45736f492b0dece9b673c7115a31c, exception_keeper_lineno_3 );
    }
    else if ( exception_keeper_lineno_3 != 0 )
    {
        exception_keeper_tb_3 = ADD_TRACEBACK( exception_keeper_tb_3, frame_78e45736f492b0dece9b673c7115a31c, exception_keeper_lineno_3 );
    }

    NORMALIZE_EXCEPTION( &exception_keeper_type_3, &exception_keeper_value_3, &exception_keeper_tb_3 );
    PyException_SetTraceback( exception_keeper_value_3, (PyObject *)exception_keeper_tb_3 );
    PUBLISH_EXCEPTION( &exception_keeper_type_3, &exception_keeper_value_3, &exception_keeper_tb_3 );
    // Tried code:
    {
        nuitka_bool tmp_condition_result_2;
        PyObject *tmp_compexpr_left_2;
        PyObject *tmp_compexpr_right_2;
        tmp_compexpr_left_2 = EXC_TYPE(PyThreadState_GET());
        tmp_compexpr_right_2 = PyExc_AttributeError;
        tmp_res = EXCEPTION_MATCH_BOOL( tmp_compexpr_left_2, tmp_compexpr_right_2 );
        if ( tmp_res == -1 )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 946;
            type_description_1 = "oooooooooooooooo";
            goto try_except_handler_5;
        }
        tmp_condition_result_2 = ( tmp_res != 0 ) ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
        if ( tmp_condition_result_2 == NUITKA_BOOL_TRUE )
        {
            goto branch_yes_2;
        }
        else
        {
            goto branch_no_2;
        }
        branch_yes_2:;
        {
            PyObject *tmp_assign_source_14;
            tmp_assign_source_14 = const_int_pos_1;
            {
                PyObject *old = var_no_os_uname;
                assert( old != NULL );
                var_no_os_uname = tmp_assign_source_14;
                Py_INCREF( var_no_os_uname );
                Py_DECREF( old );
            }

        }
        goto branch_end_2;
        branch_no_2:;
        tmp_result = RERAISE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
        if (unlikely( tmp_result == false ))
        {
            exception_lineno = 944;
        }

        if (exception_tb && exception_tb->tb_frame == &frame_78e45736f492b0dece9b673c7115a31c->m_frame) frame_78e45736f492b0dece9b673c7115a31c->m_frame.f_lineno = exception_tb->tb_lineno;
        type_description_1 = "oooooooooooooooo";
        goto try_except_handler_5;
        branch_end_2:;
    }
    goto try_end_4;
    // Exception handler code:
    try_except_handler_5:;
    exception_keeper_type_4 = exception_type;
    exception_keeper_value_4 = exception_value;
    exception_keeper_tb_4 = exception_tb;
    exception_keeper_lineno_4 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    // Restore previous exception.
    SET_CURRENT_EXCEPTION( exception_preserved_type_1, exception_preserved_value_1, exception_preserved_tb_1 );
    // Re-raise.
    exception_type = exception_keeper_type_4;
    exception_value = exception_keeper_value_4;
    exception_tb = exception_keeper_tb_4;
    exception_lineno = exception_keeper_lineno_4;

    goto frame_exception_exit_1;
    // End of try:
    try_end_4:;
    // Restore previous exception.
    SET_CURRENT_EXCEPTION( exception_preserved_type_1, exception_preserved_value_1, exception_preserved_tb_1 );
    goto try_end_3;
    // exception handler codes exits in all cases
    NUITKA_CANNOT_GET_HERE( platform$$$function_23_uname );
    return NULL;
    // End of try:
    try_end_3:;
    {
        nuitka_bool tmp_condition_result_3;
        int tmp_or_left_truth_1;
        nuitka_bool tmp_or_left_value_1;
        nuitka_bool tmp_or_right_value_1;
        int tmp_truth_name_1;
        PyObject *tmp_operand_name_1;
        PyObject *tmp_list_arg_1;
        PyObject *tmp_called_name_1;
        PyObject *tmp_args_element_name_1;
        PyObject *tmp_args_element_name_2;
        PyObject *tmp_tuple_element_1;
        if ( var_no_os_uname == NULL )
        {

            exception_type = PyExc_UnboundLocalError;
            Py_INCREF( exception_type );
            exception_value = PyUnicode_FromFormat( "local variable '%s' referenced before assignment", "no_os_uname" );
            exception_tb = NULL;
            NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
            CHAIN_EXCEPTION( exception_value );

            exception_lineno = 949;
            type_description_1 = "oooooooooooooooo";
            goto frame_exception_exit_1;
        }

        tmp_truth_name_1 = CHECK_IF_TRUE( var_no_os_uname );
        if ( tmp_truth_name_1 == -1 )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 949;
            type_description_1 = "oooooooooooooooo";
            goto frame_exception_exit_1;
        }
        tmp_or_left_value_1 = tmp_truth_name_1 == 1 ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
        tmp_or_left_truth_1 = tmp_or_left_value_1 == NUITKA_BOOL_TRUE ? 1 : 0;
        if ( tmp_or_left_truth_1 == 1 )
        {
            goto or_left_1;
        }
        else
        {
            goto or_right_1;
        }
        or_right_1:;
        tmp_called_name_1 = (PyObject *)&PyFilter_Type;
        tmp_args_element_name_1 = Py_None;
        if ( var_system == NULL )
        {

            exception_type = PyExc_UnboundLocalError;
            Py_INCREF( exception_type );
            exception_value = PyUnicode_FromFormat( "local variable '%s' referenced before assignment", "system" );
            exception_tb = NULL;
            NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
            CHAIN_EXCEPTION( exception_value );

            exception_lineno = 949;
            type_description_1 = "oooooooooooooooo";
            goto frame_exception_exit_1;
        }

        tmp_tuple_element_1 = var_system;
        tmp_args_element_name_2 = PyTuple_New( 5 );
        Py_INCREF( tmp_tuple_element_1 );
        PyTuple_SET_ITEM( tmp_args_element_name_2, 0, tmp_tuple_element_1 );
        if ( var_node == NULL )
        {
            Py_DECREF( tmp_args_element_name_2 );
            exception_type = PyExc_UnboundLocalError;
            Py_INCREF( exception_type );
            exception_value = PyUnicode_FromFormat( "local variable '%s' referenced before assignment", "node" );
            exception_tb = NULL;
            NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
            CHAIN_EXCEPTION( exception_value );

            exception_lineno = 949;
            type_description_1 = "oooooooooooooooo";
            goto frame_exception_exit_1;
        }

        tmp_tuple_element_1 = var_node;
        Py_INCREF( tmp_tuple_element_1 );
        PyTuple_SET_ITEM( tmp_args_element_name_2, 1, tmp_tuple_element_1 );
        if ( var_release == NULL )
        {
            Py_DECREF( tmp_args_element_name_2 );
            exception_type = PyExc_UnboundLocalError;
            Py_INCREF( exception_type );
            exception_value = PyUnicode_FromFormat( "local variable '%s' referenced before assignment", "release" );
            exception_tb = NULL;
            NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
            CHAIN_EXCEPTION( exception_value );

            exception_lineno = 949;
            type_description_1 = "oooooooooooooooo";
            goto frame_exception_exit_1;
        }

        tmp_tuple_element_1 = var_release;
        Py_INCREF( tmp_tuple_element_1 );
        PyTuple_SET_ITEM( tmp_args_element_name_2, 2, tmp_tuple_element_1 );
        if ( var_version == NULL )
        {
            Py_DECREF( tmp_args_element_name_2 );
            exception_type = PyExc_UnboundLocalError;
            Py_INCREF( exception_type );
            exception_value = PyUnicode_FromFormat( "local variable '%s' referenced before assignment", "version" );
            exception_tb = NULL;
            NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
            CHAIN_EXCEPTION( exception_value );

            exception_lineno = 949;
            type_description_1 = "oooooooooooooooo";
            goto frame_exception_exit_1;
        }

        tmp_tuple_element_1 = var_version;
        Py_INCREF( tmp_tuple_element_1 );
        PyTuple_SET_ITEM( tmp_args_element_name_2, 3, tmp_tuple_element_1 );
        if ( var_machine == NULL )
        {
            Py_DECREF( tmp_args_element_name_2 );
            exception_type = PyExc_UnboundLocalError;
            Py_INCREF( exception_type );
            exception_value = PyUnicode_FromFormat( "local variable '%s' referenced before assignment", "machine" );
            exception_tb = NULL;
            NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
            CHAIN_EXCEPTION( exception_value );

            exception_lineno = 949;
            type_description_1 = "oooooooooooooooo";
            goto frame_exception_exit_1;
        }

        tmp_tuple_element_1 = var_machine;
        Py_INCREF( tmp_tuple_element_1 );
        PyTuple_SET_ITEM( tmp_args_element_name_2, 4, tmp_tuple_element_1 );
        frame_78e45736f492b0dece9b673c7115a31c->m_frame.f_lineno = 949;
        {
            PyObject *call_args[] = { tmp_args_element_name_1, tmp_args_element_name_2 };
            tmp_list_arg_1 = CALL_FUNCTION_WITH_ARGS2( tmp_called_name_1, call_args );
        }

        Py_DECREF( tmp_args_element_name_2 );
        if ( tmp_list_arg_1 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 949;
            type_description_1 = "oooooooooooooooo";
            goto frame_exception_exit_1;
        }
        tmp_operand_name_1 = PySequence_List( tmp_list_arg_1 );
        Py_DECREF( tmp_list_arg_1 );
        if ( tmp_operand_name_1 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 949;
            type_description_1 = "oooooooooooooooo";
            goto frame_exception_exit_1;
        }
        tmp_res = CHECK_IF_TRUE( tmp_operand_name_1 );
        Py_DECREF( tmp_operand_name_1 );
        if ( tmp_res == -1 )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 949;
            type_description_1 = "oooooooooooooooo";
            goto frame_exception_exit_1;
        }
        tmp_or_right_value_1 = ( tmp_res == 0 ) ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
        tmp_condition_result_3 = tmp_or_right_value_1;
        goto or_end_1;
        or_left_1:;
        tmp_condition_result_3 = tmp_or_left_value_1;
        or_end_1:;
        if ( tmp_condition_result_3 == NUITKA_BOOL_TRUE )
        {
            goto branch_yes_3;
        }
        else
        {
            goto branch_no_3;
        }
        branch_yes_3:;
        {
            nuitka_bool tmp_condition_result_4;
            int tmp_truth_name_2;
            if ( var_no_os_uname == NULL )
            {

                exception_type = PyExc_UnboundLocalError;
                Py_INCREF( exception_type );
                exception_value = PyUnicode_FromFormat( "local variable '%s' referenced before assignment", "no_os_uname" );
                exception_tb = NULL;
                NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
                CHAIN_EXCEPTION( exception_value );

                exception_lineno = 952;
                type_description_1 = "oooooooooooooooo";
                goto frame_exception_exit_1;
            }

            tmp_truth_name_2 = CHECK_IF_TRUE( var_no_os_uname );
            if ( tmp_truth_name_2 == -1 )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 952;
                type_description_1 = "oooooooooooooooo";
                goto frame_exception_exit_1;
            }
            tmp_condition_result_4 = tmp_truth_name_2 == 1 ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
            if ( tmp_condition_result_4 == NUITKA_BOOL_TRUE )
            {
                goto branch_yes_4;
            }
            else
            {
                goto branch_no_4;
            }
            branch_yes_4:;
            {
                PyObject *tmp_assign_source_15;
                PyObject *tmp_source_name_1;
                PyObject *tmp_mvar_value_4;
                tmp_mvar_value_4 = GET_STRING_DICT_VALUE( moduledict_platform, (Nuitka_StringObject *)const_str_plain_sys );

                if (unlikely( tmp_mvar_value_4 == NULL ))
                {
                    tmp_mvar_value_4 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_sys );
                }

                if ( tmp_mvar_value_4 == NULL )
                {

                    exception_type = PyExc_NameError;
                    Py_INCREF( exception_type );
                    exception_value = PyUnicode_FromFormat( "name '%s' is not defined", "sys" );
                    exception_tb = NULL;
                    NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
                    CHAIN_EXCEPTION( exception_value );

                    exception_lineno = 953;
                    type_description_1 = "oooooooooooooooo";
                    goto frame_exception_exit_1;
                }

                tmp_source_name_1 = tmp_mvar_value_4;
                tmp_assign_source_15 = LOOKUP_ATTRIBUTE( tmp_source_name_1, const_str_plain_platform );
                if ( tmp_assign_source_15 == NULL )
                {
                    assert( ERROR_OCCURRED() );

                    FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                    exception_lineno = 953;
                    type_description_1 = "oooooooooooooooo";
                    goto frame_exception_exit_1;
                }
                {
                    PyObject *old = var_system;
                    var_system = tmp_assign_source_15;
                    Py_XDECREF( old );
                }

            }
            {
                PyObject *tmp_assign_source_16;
                tmp_assign_source_16 = const_str_empty;
                {
                    PyObject *old = var_release;
                    var_release = tmp_assign_source_16;
                    Py_INCREF( var_release );
                    Py_XDECREF( old );
                }

            }
            {
                PyObject *tmp_assign_source_17;
                tmp_assign_source_17 = const_str_empty;
                {
                    PyObject *old = var_version;
                    var_version = tmp_assign_source_17;
                    Py_INCREF( var_version );
                    Py_XDECREF( old );
                }

            }
            {
                PyObject *tmp_assign_source_18;
                PyObject *tmp_called_name_2;
                PyObject *tmp_mvar_value_5;
                tmp_mvar_value_5 = GET_STRING_DICT_VALUE( moduledict_platform, (Nuitka_StringObject *)const_str_plain__node );

                if (unlikely( tmp_mvar_value_5 == NULL ))
                {
                    tmp_mvar_value_5 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain__node );
                }

                if ( tmp_mvar_value_5 == NULL )
                {

                    exception_type = PyExc_NameError;
                    Py_INCREF( exception_type );
                    exception_value = PyUnicode_FromFormat( "name '%s' is not defined", "_node" );
                    exception_tb = NULL;
                    NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
                    CHAIN_EXCEPTION( exception_value );

                    exception_lineno = 956;
                    type_description_1 = "oooooooooooooooo";
                    goto frame_exception_exit_1;
                }

                tmp_called_name_2 = tmp_mvar_value_5;
                frame_78e45736f492b0dece9b673c7115a31c->m_frame.f_lineno = 956;
                tmp_assign_source_18 = CALL_FUNCTION_NO_ARGS( tmp_called_name_2 );
                if ( tmp_assign_source_18 == NULL )
                {
                    assert( ERROR_OCCURRED() );

                    FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                    exception_lineno = 956;
                    type_description_1 = "oooooooooooooooo";
                    goto frame_exception_exit_1;
                }
                {
                    PyObject *old = var_node;
                    var_node = tmp_assign_source_18;
                    Py_XDECREF( old );
                }

            }
            {
                PyObject *tmp_assign_source_19;
                tmp_assign_source_19 = const_str_empty;
                {
                    PyObject *old = var_machine;
                    var_machine = tmp_assign_source_19;
                    Py_INCREF( var_machine );
                    Py_XDECREF( old );
                }

            }
            branch_no_4:;
        }
        {
            PyObject *tmp_assign_source_20;
            tmp_assign_source_20 = const_int_pos_1;
            assert( var_use_syscmd_ver == NULL );
            Py_INCREF( tmp_assign_source_20 );
            var_use_syscmd_ver = tmp_assign_source_20;
        }
        {
            nuitka_bool tmp_condition_result_5;
            PyObject *tmp_compexpr_left_3;
            PyObject *tmp_compexpr_right_3;
            if ( var_system == NULL )
            {

                exception_type = PyExc_UnboundLocalError;
                Py_INCREF( exception_type );
                exception_value = PyUnicode_FromFormat( "local variable '%s' referenced before assignment", "system" );
                exception_tb = NULL;
                NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
                CHAIN_EXCEPTION( exception_value );

                exception_lineno = 962;
                type_description_1 = "oooooooooooooooo";
                goto frame_exception_exit_1;
            }

            tmp_compexpr_left_3 = var_system;
            tmp_compexpr_right_3 = const_str_plain_win32;
            tmp_res = RICH_COMPARE_BOOL_EQ_OBJECT_OBJECT( tmp_compexpr_left_3, tmp_compexpr_right_3 );
            if ( tmp_res == -1 )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 962;
                type_description_1 = "oooooooooooooooo";
                goto frame_exception_exit_1;
            }
            tmp_condition_result_5 = ( tmp_res != 0 ) ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
            if ( tmp_condition_result_5 == NUITKA_BOOL_TRUE )
            {
                goto branch_yes_5;
            }
            else
            {
                goto branch_no_5;
            }
            branch_yes_5:;
            // Tried code:
            {
                PyObject *tmp_assign_source_21;
                PyObject *tmp_iter_arg_2;
                PyObject *tmp_called_name_3;
                PyObject *tmp_mvar_value_6;
                tmp_mvar_value_6 = GET_STRING_DICT_VALUE( moduledict_platform, (Nuitka_StringObject *)const_str_plain_win32_ver );

                if (unlikely( tmp_mvar_value_6 == NULL ))
                {
                    tmp_mvar_value_6 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_win32_ver );
                }

                if ( tmp_mvar_value_6 == NULL )
                {

                    exception_type = PyExc_NameError;
                    Py_INCREF( exception_type );
                    exception_value = PyUnicode_FromFormat( "name '%s' is not defined", "win32_ver" );
                    exception_tb = NULL;
                    NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
                    CHAIN_EXCEPTION( exception_value );

                    exception_lineno = 963;
                    type_description_1 = "oooooooooooooooo";
                    goto try_except_handler_6;
                }

                tmp_called_name_3 = tmp_mvar_value_6;
                frame_78e45736f492b0dece9b673c7115a31c->m_frame.f_lineno = 963;
                tmp_iter_arg_2 = CALL_FUNCTION_NO_ARGS( tmp_called_name_3 );
                if ( tmp_iter_arg_2 == NULL )
                {
                    assert( ERROR_OCCURRED() );

                    FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                    exception_lineno = 963;
                    type_description_1 = "oooooooooooooooo";
                    goto try_except_handler_6;
                }
                tmp_assign_source_21 = MAKE_UNPACK_ITERATOR( tmp_iter_arg_2 );
                Py_DECREF( tmp_iter_arg_2 );
                if ( tmp_assign_source_21 == NULL )
                {
                    assert( ERROR_OCCURRED() );

                    FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                    exception_lineno = 963;
                    type_description_1 = "oooooooooooooooo";
                    goto try_except_handler_6;
                }
                assert( tmp_tuple_unpack_2__source_iter == NULL );
                tmp_tuple_unpack_2__source_iter = tmp_assign_source_21;
            }
            // Tried code:
            {
                PyObject *tmp_assign_source_22;
                PyObject *tmp_unpack_6;
                CHECK_OBJECT( tmp_tuple_unpack_2__source_iter );
                tmp_unpack_6 = tmp_tuple_unpack_2__source_iter;
                tmp_assign_source_22 = UNPACK_NEXT( tmp_unpack_6, 0, 4 );
                if ( tmp_assign_source_22 == NULL )
                {
                    if ( !ERROR_OCCURRED() )
                    {
                        exception_type = PyExc_StopIteration;
                        Py_INCREF( exception_type );
                        exception_value = NULL;
                        exception_tb = NULL;
                    }
                    else
                    {
                        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
                    }


                    type_description_1 = "oooooooooooooooo";
                    exception_lineno = 963;
                    goto try_except_handler_7;
                }
                assert( tmp_tuple_unpack_2__element_1 == NULL );
                tmp_tuple_unpack_2__element_1 = tmp_assign_source_22;
            }
            {
                PyObject *tmp_assign_source_23;
                PyObject *tmp_unpack_7;
                CHECK_OBJECT( tmp_tuple_unpack_2__source_iter );
                tmp_unpack_7 = tmp_tuple_unpack_2__source_iter;
                tmp_assign_source_23 = UNPACK_NEXT( tmp_unpack_7, 1, 4 );
                if ( tmp_assign_source_23 == NULL )
                {
                    if ( !ERROR_OCCURRED() )
                    {
                        exception_type = PyExc_StopIteration;
                        Py_INCREF( exception_type );
                        exception_value = NULL;
                        exception_tb = NULL;
                    }
                    else
                    {
                        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
                    }


                    type_description_1 = "oooooooooooooooo";
                    exception_lineno = 963;
                    goto try_except_handler_7;
                }
                assert( tmp_tuple_unpack_2__element_2 == NULL );
                tmp_tuple_unpack_2__element_2 = tmp_assign_source_23;
            }
            {
                PyObject *tmp_assign_source_24;
                PyObject *tmp_unpack_8;
                CHECK_OBJECT( tmp_tuple_unpack_2__source_iter );
                tmp_unpack_8 = tmp_tuple_unpack_2__source_iter;
                tmp_assign_source_24 = UNPACK_NEXT( tmp_unpack_8, 2, 4 );
                if ( tmp_assign_source_24 == NULL )
                {
                    if ( !ERROR_OCCURRED() )
                    {
                        exception_type = PyExc_StopIteration;
                        Py_INCREF( exception_type );
                        exception_value = NULL;
                        exception_tb = NULL;
                    }
                    else
                    {
                        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
                    }


                    type_description_1 = "oooooooooooooooo";
                    exception_lineno = 963;
                    goto try_except_handler_7;
                }
                assert( tmp_tuple_unpack_2__element_3 == NULL );
                tmp_tuple_unpack_2__element_3 = tmp_assign_source_24;
            }
            {
                PyObject *tmp_assign_source_25;
                PyObject *tmp_unpack_9;
                CHECK_OBJECT( tmp_tuple_unpack_2__source_iter );
                tmp_unpack_9 = tmp_tuple_unpack_2__source_iter;
                tmp_assign_source_25 = UNPACK_NEXT( tmp_unpack_9, 3, 4 );
                if ( tmp_assign_source_25 == NULL )
                {
                    if ( !ERROR_OCCURRED() )
                    {
                        exception_type = PyExc_StopIteration;
                        Py_INCREF( exception_type );
                        exception_value = NULL;
                        exception_tb = NULL;
                    }
                    else
                    {
                        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
                    }


                    type_description_1 = "oooooooooooooooo";
                    exception_lineno = 963;
                    goto try_except_handler_7;
                }
                assert( tmp_tuple_unpack_2__element_4 == NULL );
                tmp_tuple_unpack_2__element_4 = tmp_assign_source_25;
            }
            {
                PyObject *tmp_iterator_name_2;
                CHECK_OBJECT( tmp_tuple_unpack_2__source_iter );
                tmp_iterator_name_2 = tmp_tuple_unpack_2__source_iter;
                // Check if iterator has left-over elements.
                CHECK_OBJECT( tmp_iterator_name_2 ); assert( HAS_ITERNEXT( tmp_iterator_name_2 ) );

                tmp_iterator_attempt = (*Py_TYPE( tmp_iterator_name_2 )->tp_iternext)( tmp_iterator_name_2 );

                if (likely( tmp_iterator_attempt == NULL ))
                {
                    PyObject *error = GET_ERROR_OCCURRED();

                    if ( error != NULL )
                    {
                        if ( EXCEPTION_MATCH_BOOL_SINGLE( error, PyExc_StopIteration ))
                        {
                            CLEAR_ERROR_OCCURRED();
                        }
                        else
                        {
                            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );

                            type_description_1 = "oooooooooooooooo";
                            exception_lineno = 963;
                            goto try_except_handler_7;
                        }
                    }
                }
                else
                {
                    Py_DECREF( tmp_iterator_attempt );

                    // TODO: Could avoid PyErr_Format.
#if PYTHON_VERSION < 300
                    PyErr_Format( PyExc_ValueError, "too many values to unpack" );
#else
                    PyErr_Format( PyExc_ValueError, "too many values to unpack (expected 4)" );
#endif
                    FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );

                    type_description_1 = "oooooooooooooooo";
                    exception_lineno = 963;
                    goto try_except_handler_7;
                }
            }
            goto try_end_5;
            // Exception handler code:
            try_except_handler_7:;
            exception_keeper_type_5 = exception_type;
            exception_keeper_value_5 = exception_value;
            exception_keeper_tb_5 = exception_tb;
            exception_keeper_lineno_5 = exception_lineno;
            exception_type = NULL;
            exception_value = NULL;
            exception_tb = NULL;
            exception_lineno = 0;

            CHECK_OBJECT( (PyObject *)tmp_tuple_unpack_2__source_iter );
            Py_DECREF( tmp_tuple_unpack_2__source_iter );
            tmp_tuple_unpack_2__source_iter = NULL;

            // Re-raise.
            exception_type = exception_keeper_type_5;
            exception_value = exception_keeper_value_5;
            exception_tb = exception_keeper_tb_5;
            exception_lineno = exception_keeper_lineno_5;

            goto try_except_handler_6;
            // End of try:
            try_end_5:;
            goto try_end_6;
            // Exception handler code:
            try_except_handler_6:;
            exception_keeper_type_6 = exception_type;
            exception_keeper_value_6 = exception_value;
            exception_keeper_tb_6 = exception_tb;
            exception_keeper_lineno_6 = exception_lineno;
            exception_type = NULL;
            exception_value = NULL;
            exception_tb = NULL;
            exception_lineno = 0;

            Py_XDECREF( tmp_tuple_unpack_2__element_1 );
            tmp_tuple_unpack_2__element_1 = NULL;

            Py_XDECREF( tmp_tuple_unpack_2__element_2 );
            tmp_tuple_unpack_2__element_2 = NULL;

            Py_XDECREF( tmp_tuple_unpack_2__element_3 );
            tmp_tuple_unpack_2__element_3 = NULL;

            Py_XDECREF( tmp_tuple_unpack_2__element_4 );
            tmp_tuple_unpack_2__element_4 = NULL;

            // Re-raise.
            exception_type = exception_keeper_type_6;
            exception_value = exception_keeper_value_6;
            exception_tb = exception_keeper_tb_6;
            exception_lineno = exception_keeper_lineno_6;

            goto frame_exception_exit_1;
            // End of try:
            try_end_6:;
            CHECK_OBJECT( (PyObject *)tmp_tuple_unpack_2__source_iter );
            Py_DECREF( tmp_tuple_unpack_2__source_iter );
            tmp_tuple_unpack_2__source_iter = NULL;

            {
                PyObject *tmp_assign_source_26;
                CHECK_OBJECT( tmp_tuple_unpack_2__element_1 );
                tmp_assign_source_26 = tmp_tuple_unpack_2__element_1;
                {
                    PyObject *old = var_release;
                    var_release = tmp_assign_source_26;
                    Py_INCREF( var_release );
                    Py_XDECREF( old );
                }

            }
            Py_XDECREF( tmp_tuple_unpack_2__element_1 );
            tmp_tuple_unpack_2__element_1 = NULL;

            {
                PyObject *tmp_assign_source_27;
                CHECK_OBJECT( tmp_tuple_unpack_2__element_2 );
                tmp_assign_source_27 = tmp_tuple_unpack_2__element_2;
                {
                    PyObject *old = var_version;
                    var_version = tmp_assign_source_27;
                    Py_INCREF( var_version );
                    Py_XDECREF( old );
                }

            }
            Py_XDECREF( tmp_tuple_unpack_2__element_2 );
            tmp_tuple_unpack_2__element_2 = NULL;

            {
                PyObject *tmp_assign_source_28;
                CHECK_OBJECT( tmp_tuple_unpack_2__element_3 );
                tmp_assign_source_28 = tmp_tuple_unpack_2__element_3;
                assert( var_csd == NULL );
                Py_INCREF( tmp_assign_source_28 );
                var_csd = tmp_assign_source_28;
            }
            Py_XDECREF( tmp_tuple_unpack_2__element_3 );
            tmp_tuple_unpack_2__element_3 = NULL;

            {
                PyObject *tmp_assign_source_29;
                CHECK_OBJECT( tmp_tuple_unpack_2__element_4 );
                tmp_assign_source_29 = tmp_tuple_unpack_2__element_4;
                assert( var_ptype == NULL );
                Py_INCREF( tmp_assign_source_29 );
                var_ptype = tmp_assign_source_29;
            }
            Py_XDECREF( tmp_tuple_unpack_2__element_4 );
            tmp_tuple_unpack_2__element_4 = NULL;

            {
                nuitka_bool tmp_condition_result_6;
                int tmp_and_left_truth_1;
                nuitka_bool tmp_and_left_value_1;
                nuitka_bool tmp_and_right_value_1;
                int tmp_truth_name_3;
                int tmp_truth_name_4;
                CHECK_OBJECT( var_release );
                tmp_truth_name_3 = CHECK_IF_TRUE( var_release );
                if ( tmp_truth_name_3 == -1 )
                {
                    assert( ERROR_OCCURRED() );

                    FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                    exception_lineno = 964;
                    type_description_1 = "oooooooooooooooo";
                    goto frame_exception_exit_1;
                }
                tmp_and_left_value_1 = tmp_truth_name_3 == 1 ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
                tmp_and_left_truth_1 = tmp_and_left_value_1 == NUITKA_BOOL_TRUE ? 1 : 0;
                if ( tmp_and_left_truth_1 == 1 )
                {
                    goto and_right_1;
                }
                else
                {
                    goto and_left_1;
                }
                and_right_1:;
                CHECK_OBJECT( var_version );
                tmp_truth_name_4 = CHECK_IF_TRUE( var_version );
                if ( tmp_truth_name_4 == -1 )
                {
                    assert( ERROR_OCCURRED() );

                    FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                    exception_lineno = 964;
                    type_description_1 = "oooooooooooooooo";
                    goto frame_exception_exit_1;
                }
                tmp_and_right_value_1 = tmp_truth_name_4 == 1 ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
                tmp_condition_result_6 = tmp_and_right_value_1;
                goto and_end_1;
                and_left_1:;
                tmp_condition_result_6 = tmp_and_left_value_1;
                and_end_1:;
                if ( tmp_condition_result_6 == NUITKA_BOOL_TRUE )
                {
                    goto branch_yes_6;
                }
                else
                {
                    goto branch_no_6;
                }
                branch_yes_6:;
                {
                    PyObject *tmp_assign_source_30;
                    tmp_assign_source_30 = const_int_0;
                    {
                        PyObject *old = var_use_syscmd_ver;
                        assert( old != NULL );
                        var_use_syscmd_ver = tmp_assign_source_30;
                        Py_INCREF( var_use_syscmd_ver );
                        Py_DECREF( old );
                    }

                }
                branch_no_6:;
            }
            {
                nuitka_bool tmp_condition_result_7;
                PyObject *tmp_operand_name_2;
                if ( var_machine == NULL )
                {

                    exception_type = PyExc_UnboundLocalError;
                    Py_INCREF( exception_type );
                    exception_value = PyUnicode_FromFormat( "local variable '%s' referenced before assignment", "machine" );
                    exception_tb = NULL;
                    NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
                    CHAIN_EXCEPTION( exception_value );

                    exception_lineno = 970;
                    type_description_1 = "oooooooooooooooo";
                    goto frame_exception_exit_1;
                }

                tmp_operand_name_2 = var_machine;
                tmp_res = CHECK_IF_TRUE( tmp_operand_name_2 );
                if ( tmp_res == -1 )
                {
                    assert( ERROR_OCCURRED() );

                    FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                    exception_lineno = 970;
                    type_description_1 = "oooooooooooooooo";
                    goto frame_exception_exit_1;
                }
                tmp_condition_result_7 = ( tmp_res == 0 ) ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
                if ( tmp_condition_result_7 == NUITKA_BOOL_TRUE )
                {
                    goto branch_yes_7;
                }
                else
                {
                    goto branch_no_7;
                }
                branch_yes_7:;
                {
                    nuitka_bool tmp_condition_result_8;
                    PyObject *tmp_compexpr_left_4;
                    PyObject *tmp_compexpr_right_4;
                    PyObject *tmp_source_name_2;
                    PyObject *tmp_mvar_value_7;
                    tmp_compexpr_left_4 = const_str_plain_PROCESSOR_ARCHITEW6432;
                    tmp_mvar_value_7 = GET_STRING_DICT_VALUE( moduledict_platform, (Nuitka_StringObject *)const_str_plain_os );

                    if (unlikely( tmp_mvar_value_7 == NULL ))
                    {
                        tmp_mvar_value_7 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_os );
                    }

                    if ( tmp_mvar_value_7 == NULL )
                    {

                        exception_type = PyExc_NameError;
                        Py_INCREF( exception_type );
                        exception_value = PyUnicode_FromFormat( "name '%s' is not defined", "os" );
                        exception_tb = NULL;
                        NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
                        CHAIN_EXCEPTION( exception_value );

                        exception_lineno = 972;
                        type_description_1 = "oooooooooooooooo";
                        goto frame_exception_exit_1;
                    }

                    tmp_source_name_2 = tmp_mvar_value_7;
                    tmp_compexpr_right_4 = LOOKUP_ATTRIBUTE( tmp_source_name_2, const_str_plain_environ );
                    if ( tmp_compexpr_right_4 == NULL )
                    {
                        assert( ERROR_OCCURRED() );

                        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                        exception_lineno = 972;
                        type_description_1 = "oooooooooooooooo";
                        goto frame_exception_exit_1;
                    }
                    tmp_res = PySequence_Contains( tmp_compexpr_right_4, tmp_compexpr_left_4 );
                    Py_DECREF( tmp_compexpr_right_4 );
                    if ( tmp_res == -1 )
                    {
                        assert( ERROR_OCCURRED() );

                        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                        exception_lineno = 972;
                        type_description_1 = "oooooooooooooooo";
                        goto frame_exception_exit_1;
                    }
                    tmp_condition_result_8 = ( tmp_res == 1 ) ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
                    if ( tmp_condition_result_8 == NUITKA_BOOL_TRUE )
                    {
                        goto branch_yes_8;
                    }
                    else
                    {
                        goto branch_no_8;
                    }
                    branch_yes_8:;
                    {
                        PyObject *tmp_assign_source_31;
                        PyObject *tmp_called_instance_2;
                        PyObject *tmp_source_name_3;
                        PyObject *tmp_mvar_value_8;
                        tmp_mvar_value_8 = GET_STRING_DICT_VALUE( moduledict_platform, (Nuitka_StringObject *)const_str_plain_os );

                        if (unlikely( tmp_mvar_value_8 == NULL ))
                        {
                            tmp_mvar_value_8 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_os );
                        }

                        if ( tmp_mvar_value_8 == NULL )
                        {

                            exception_type = PyExc_NameError;
                            Py_INCREF( exception_type );
                            exception_value = PyUnicode_FromFormat( "name '%s' is not defined", "os" );
                            exception_tb = NULL;
                            NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
                            CHAIN_EXCEPTION( exception_value );

                            exception_lineno = 973;
                            type_description_1 = "oooooooooooooooo";
                            goto frame_exception_exit_1;
                        }

                        tmp_source_name_3 = tmp_mvar_value_8;
                        tmp_called_instance_2 = LOOKUP_ATTRIBUTE( tmp_source_name_3, const_str_plain_environ );
                        if ( tmp_called_instance_2 == NULL )
                        {
                            assert( ERROR_OCCURRED() );

                            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                            exception_lineno = 973;
                            type_description_1 = "oooooooooooooooo";
                            goto frame_exception_exit_1;
                        }
                        frame_78e45736f492b0dece9b673c7115a31c->m_frame.f_lineno = 973;
                        tmp_assign_source_31 = CALL_METHOD_WITH_ARGS2( tmp_called_instance_2, const_str_plain_get, &PyTuple_GET_ITEM( const_tuple_str_plain_PROCESSOR_ARCHITEW6432_str_empty_tuple, 0 ) );

                        Py_DECREF( tmp_called_instance_2 );
                        if ( tmp_assign_source_31 == NULL )
                        {
                            assert( ERROR_OCCURRED() );

                            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                            exception_lineno = 973;
                            type_description_1 = "oooooooooooooooo";
                            goto frame_exception_exit_1;
                        }
                        {
                            PyObject *old = var_machine;
                            var_machine = tmp_assign_source_31;
                            Py_XDECREF( old );
                        }

                    }
                    goto branch_end_8;
                    branch_no_8:;
                    {
                        PyObject *tmp_assign_source_32;
                        PyObject *tmp_called_instance_3;
                        PyObject *tmp_source_name_4;
                        PyObject *tmp_mvar_value_9;
                        tmp_mvar_value_9 = GET_STRING_DICT_VALUE( moduledict_platform, (Nuitka_StringObject *)const_str_plain_os );

                        if (unlikely( tmp_mvar_value_9 == NULL ))
                        {
                            tmp_mvar_value_9 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_os );
                        }

                        if ( tmp_mvar_value_9 == NULL )
                        {

                            exception_type = PyExc_NameError;
                            Py_INCREF( exception_type );
                            exception_value = PyUnicode_FromFormat( "name '%s' is not defined", "os" );
                            exception_tb = NULL;
                            NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
                            CHAIN_EXCEPTION( exception_value );

                            exception_lineno = 975;
                            type_description_1 = "oooooooooooooooo";
                            goto frame_exception_exit_1;
                        }

                        tmp_source_name_4 = tmp_mvar_value_9;
                        tmp_called_instance_3 = LOOKUP_ATTRIBUTE( tmp_source_name_4, const_str_plain_environ );
                        if ( tmp_called_instance_3 == NULL )
                        {
                            assert( ERROR_OCCURRED() );

                            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                            exception_lineno = 975;
                            type_description_1 = "oooooooooooooooo";
                            goto frame_exception_exit_1;
                        }
                        frame_78e45736f492b0dece9b673c7115a31c->m_frame.f_lineno = 975;
                        tmp_assign_source_32 = CALL_METHOD_WITH_ARGS2( tmp_called_instance_3, const_str_plain_get, &PyTuple_GET_ITEM( const_tuple_str_plain_PROCESSOR_ARCHITECTURE_str_empty_tuple, 0 ) );

                        Py_DECREF( tmp_called_instance_3 );
                        if ( tmp_assign_source_32 == NULL )
                        {
                            assert( ERROR_OCCURRED() );

                            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                            exception_lineno = 975;
                            type_description_1 = "oooooooooooooooo";
                            goto frame_exception_exit_1;
                        }
                        {
                            PyObject *old = var_machine;
                            var_machine = tmp_assign_source_32;
                            Py_XDECREF( old );
                        }

                    }
                    branch_end_8:;
                }
                branch_no_7:;
            }
            {
                PyObject *tmp_assign_source_33;
                PyObject *tmp_called_name_4;
                PyObject *tmp_source_name_5;
                PyObject *tmp_source_name_6;
                PyObject *tmp_mvar_value_10;
                PyObject *tmp_args_element_name_3;
                PyObject *tmp_args_element_name_4;
                tmp_mvar_value_10 = GET_STRING_DICT_VALUE( moduledict_platform, (Nuitka_StringObject *)const_str_plain_os );

                if (unlikely( tmp_mvar_value_10 == NULL ))
                {
                    tmp_mvar_value_10 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_os );
                }

                if ( tmp_mvar_value_10 == NULL )
                {

                    exception_type = PyExc_NameError;
                    Py_INCREF( exception_type );
                    exception_value = PyUnicode_FromFormat( "name '%s' is not defined", "os" );
                    exception_tb = NULL;
                    NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
                    CHAIN_EXCEPTION( exception_value );

                    exception_lineno = 977;
                    type_description_1 = "oooooooooooooooo";
                    goto frame_exception_exit_1;
                }

                tmp_source_name_6 = tmp_mvar_value_10;
                tmp_source_name_5 = LOOKUP_ATTRIBUTE( tmp_source_name_6, const_str_plain_environ );
                if ( tmp_source_name_5 == NULL )
                {
                    assert( ERROR_OCCURRED() );

                    FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                    exception_lineno = 977;
                    type_description_1 = "oooooooooooooooo";
                    goto frame_exception_exit_1;
                }
                tmp_called_name_4 = LOOKUP_ATTRIBUTE( tmp_source_name_5, const_str_plain_get );
                Py_DECREF( tmp_source_name_5 );
                if ( tmp_called_name_4 == NULL )
                {
                    assert( ERROR_OCCURRED() );

                    FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                    exception_lineno = 977;
                    type_description_1 = "oooooooooooooooo";
                    goto frame_exception_exit_1;
                }
                tmp_args_element_name_3 = const_str_plain_PROCESSOR_IDENTIFIER;
                if ( var_machine == NULL )
                {
                    Py_DECREF( tmp_called_name_4 );
                    exception_type = PyExc_UnboundLocalError;
                    Py_INCREF( exception_type );
                    exception_value = PyUnicode_FromFormat( "local variable '%s' referenced before assignment", "machine" );
                    exception_tb = NULL;
                    NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
                    CHAIN_EXCEPTION( exception_value );

                    exception_lineno = 977;
                    type_description_1 = "oooooooooooooooo";
                    goto frame_exception_exit_1;
                }

                tmp_args_element_name_4 = var_machine;
                frame_78e45736f492b0dece9b673c7115a31c->m_frame.f_lineno = 977;
                {
                    PyObject *call_args[] = { tmp_args_element_name_3, tmp_args_element_name_4 };
                    tmp_assign_source_33 = CALL_FUNCTION_WITH_ARGS2( tmp_called_name_4, call_args );
                }

                Py_DECREF( tmp_called_name_4 );
                if ( tmp_assign_source_33 == NULL )
                {
                    assert( ERROR_OCCURRED() );

                    FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                    exception_lineno = 977;
                    type_description_1 = "oooooooooooooooo";
                    goto frame_exception_exit_1;
                }
                {
                    PyObject *old = var_processor;
                    assert( old != NULL );
                    var_processor = tmp_assign_source_33;
                    Py_DECREF( old );
                }

            }
            branch_no_5:;
        }
        {
            nuitka_bool tmp_condition_result_9;
            int tmp_truth_name_5;
            if ( var_use_syscmd_ver == NULL )
            {

                exception_type = PyExc_UnboundLocalError;
                Py_INCREF( exception_type );
                exception_value = PyUnicode_FromFormat( "local variable '%s' referenced before assignment", "use_syscmd_ver" );
                exception_tb = NULL;
                NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
                CHAIN_EXCEPTION( exception_value );

                exception_lineno = 981;
                type_description_1 = "oooooooooooooooo";
                goto frame_exception_exit_1;
            }

            tmp_truth_name_5 = CHECK_IF_TRUE( var_use_syscmd_ver );
            if ( tmp_truth_name_5 == -1 )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 981;
                type_description_1 = "oooooooooooooooo";
                goto frame_exception_exit_1;
            }
            tmp_condition_result_9 = tmp_truth_name_5 == 1 ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
            if ( tmp_condition_result_9 == NUITKA_BOOL_TRUE )
            {
                goto branch_yes_9;
            }
            else
            {
                goto branch_no_9;
            }
            branch_yes_9:;
            // Tried code:
            {
                PyObject *tmp_assign_source_34;
                PyObject *tmp_iter_arg_3;
                PyObject *tmp_called_name_5;
                PyObject *tmp_mvar_value_11;
                PyObject *tmp_args_element_name_5;
                tmp_mvar_value_11 = GET_STRING_DICT_VALUE( moduledict_platform, (Nuitka_StringObject *)const_str_plain__syscmd_ver );

                if (unlikely( tmp_mvar_value_11 == NULL ))
                {
                    tmp_mvar_value_11 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain__syscmd_ver );
                }

                if ( tmp_mvar_value_11 == NULL )
                {

                    exception_type = PyExc_NameError;
                    Py_INCREF( exception_type );
                    exception_value = PyUnicode_FromFormat( "name '%s' is not defined", "_syscmd_ver" );
                    exception_tb = NULL;
                    NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
                    CHAIN_EXCEPTION( exception_value );

                    exception_lineno = 982;
                    type_description_1 = "oooooooooooooooo";
                    goto try_except_handler_8;
                }

                tmp_called_name_5 = tmp_mvar_value_11;
                if ( var_system == NULL )
                {

                    exception_type = PyExc_UnboundLocalError;
                    Py_INCREF( exception_type );
                    exception_value = PyUnicode_FromFormat( "local variable '%s' referenced before assignment", "system" );
                    exception_tb = NULL;
                    NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
                    CHAIN_EXCEPTION( exception_value );

                    exception_lineno = 982;
                    type_description_1 = "oooooooooooooooo";
                    goto try_except_handler_8;
                }

                tmp_args_element_name_5 = var_system;
                frame_78e45736f492b0dece9b673c7115a31c->m_frame.f_lineno = 982;
                {
                    PyObject *call_args[] = { tmp_args_element_name_5 };
                    tmp_iter_arg_3 = CALL_FUNCTION_WITH_ARGS1( tmp_called_name_5, call_args );
                }

                if ( tmp_iter_arg_3 == NULL )
                {
                    assert( ERROR_OCCURRED() );

                    FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                    exception_lineno = 982;
                    type_description_1 = "oooooooooooooooo";
                    goto try_except_handler_8;
                }
                tmp_assign_source_34 = MAKE_UNPACK_ITERATOR( tmp_iter_arg_3 );
                Py_DECREF( tmp_iter_arg_3 );
                if ( tmp_assign_source_34 == NULL )
                {
                    assert( ERROR_OCCURRED() );

                    FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                    exception_lineno = 982;
                    type_description_1 = "oooooooooooooooo";
                    goto try_except_handler_8;
                }
                assert( tmp_tuple_unpack_3__source_iter == NULL );
                tmp_tuple_unpack_3__source_iter = tmp_assign_source_34;
            }
            // Tried code:
            {
                PyObject *tmp_assign_source_35;
                PyObject *tmp_unpack_10;
                CHECK_OBJECT( tmp_tuple_unpack_3__source_iter );
                tmp_unpack_10 = tmp_tuple_unpack_3__source_iter;
                tmp_assign_source_35 = UNPACK_NEXT( tmp_unpack_10, 0, 3 );
                if ( tmp_assign_source_35 == NULL )
                {
                    if ( !ERROR_OCCURRED() )
                    {
                        exception_type = PyExc_StopIteration;
                        Py_INCREF( exception_type );
                        exception_value = NULL;
                        exception_tb = NULL;
                    }
                    else
                    {
                        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
                    }


                    type_description_1 = "oooooooooooooooo";
                    exception_lineno = 982;
                    goto try_except_handler_9;
                }
                assert( tmp_tuple_unpack_3__element_1 == NULL );
                tmp_tuple_unpack_3__element_1 = tmp_assign_source_35;
            }
            {
                PyObject *tmp_assign_source_36;
                PyObject *tmp_unpack_11;
                CHECK_OBJECT( tmp_tuple_unpack_3__source_iter );
                tmp_unpack_11 = tmp_tuple_unpack_3__source_iter;
                tmp_assign_source_36 = UNPACK_NEXT( tmp_unpack_11, 1, 3 );
                if ( tmp_assign_source_36 == NULL )
                {
                    if ( !ERROR_OCCURRED() )
                    {
                        exception_type = PyExc_StopIteration;
                        Py_INCREF( exception_type );
                        exception_value = NULL;
                        exception_tb = NULL;
                    }
                    else
                    {
                        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
                    }


                    type_description_1 = "oooooooooooooooo";
                    exception_lineno = 982;
                    goto try_except_handler_9;
                }
                assert( tmp_tuple_unpack_3__element_2 == NULL );
                tmp_tuple_unpack_3__element_2 = tmp_assign_source_36;
            }
            {
                PyObject *tmp_assign_source_37;
                PyObject *tmp_unpack_12;
                CHECK_OBJECT( tmp_tuple_unpack_3__source_iter );
                tmp_unpack_12 = tmp_tuple_unpack_3__source_iter;
                tmp_assign_source_37 = UNPACK_NEXT( tmp_unpack_12, 2, 3 );
                if ( tmp_assign_source_37 == NULL )
                {
                    if ( !ERROR_OCCURRED() )
                    {
                        exception_type = PyExc_StopIteration;
                        Py_INCREF( exception_type );
                        exception_value = NULL;
                        exception_tb = NULL;
                    }
                    else
                    {
                        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
                    }


                    type_description_1 = "oooooooooooooooo";
                    exception_lineno = 982;
                    goto try_except_handler_9;
                }
                assert( tmp_tuple_unpack_3__element_3 == NULL );
                tmp_tuple_unpack_3__element_3 = tmp_assign_source_37;
            }
            {
                PyObject *tmp_iterator_name_3;
                CHECK_OBJECT( tmp_tuple_unpack_3__source_iter );
                tmp_iterator_name_3 = tmp_tuple_unpack_3__source_iter;
                // Check if iterator has left-over elements.
                CHECK_OBJECT( tmp_iterator_name_3 ); assert( HAS_ITERNEXT( tmp_iterator_name_3 ) );

                tmp_iterator_attempt = (*Py_TYPE( tmp_iterator_name_3 )->tp_iternext)( tmp_iterator_name_3 );

                if (likely( tmp_iterator_attempt == NULL ))
                {
                    PyObject *error = GET_ERROR_OCCURRED();

                    if ( error != NULL )
                    {
                        if ( EXCEPTION_MATCH_BOOL_SINGLE( error, PyExc_StopIteration ))
                        {
                            CLEAR_ERROR_OCCURRED();
                        }
                        else
                        {
                            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );

                            type_description_1 = "oooooooooooooooo";
                            exception_lineno = 982;
                            goto try_except_handler_9;
                        }
                    }
                }
                else
                {
                    Py_DECREF( tmp_iterator_attempt );

                    // TODO: Could avoid PyErr_Format.
#if PYTHON_VERSION < 300
                    PyErr_Format( PyExc_ValueError, "too many values to unpack" );
#else
                    PyErr_Format( PyExc_ValueError, "too many values to unpack (expected 3)" );
#endif
                    FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );

                    type_description_1 = "oooooooooooooooo";
                    exception_lineno = 982;
                    goto try_except_handler_9;
                }
            }
            goto try_end_7;
            // Exception handler code:
            try_except_handler_9:;
            exception_keeper_type_7 = exception_type;
            exception_keeper_value_7 = exception_value;
            exception_keeper_tb_7 = exception_tb;
            exception_keeper_lineno_7 = exception_lineno;
            exception_type = NULL;
            exception_value = NULL;
            exception_tb = NULL;
            exception_lineno = 0;

            CHECK_OBJECT( (PyObject *)tmp_tuple_unpack_3__source_iter );
            Py_DECREF( tmp_tuple_unpack_3__source_iter );
            tmp_tuple_unpack_3__source_iter = NULL;

            // Re-raise.
            exception_type = exception_keeper_type_7;
            exception_value = exception_keeper_value_7;
            exception_tb = exception_keeper_tb_7;
            exception_lineno = exception_keeper_lineno_7;

            goto try_except_handler_8;
            // End of try:
            try_end_7:;
            goto try_end_8;
            // Exception handler code:
            try_except_handler_8:;
            exception_keeper_type_8 = exception_type;
            exception_keeper_value_8 = exception_value;
            exception_keeper_tb_8 = exception_tb;
            exception_keeper_lineno_8 = exception_lineno;
            exception_type = NULL;
            exception_value = NULL;
            exception_tb = NULL;
            exception_lineno = 0;

            Py_XDECREF( tmp_tuple_unpack_3__element_1 );
            tmp_tuple_unpack_3__element_1 = NULL;

            Py_XDECREF( tmp_tuple_unpack_3__element_2 );
            tmp_tuple_unpack_3__element_2 = NULL;

            Py_XDECREF( tmp_tuple_unpack_3__element_3 );
            tmp_tuple_unpack_3__element_3 = NULL;

            // Re-raise.
            exception_type = exception_keeper_type_8;
            exception_value = exception_keeper_value_8;
            exception_tb = exception_keeper_tb_8;
            exception_lineno = exception_keeper_lineno_8;

            goto frame_exception_exit_1;
            // End of try:
            try_end_8:;
            CHECK_OBJECT( (PyObject *)tmp_tuple_unpack_3__source_iter );
            Py_DECREF( tmp_tuple_unpack_3__source_iter );
            tmp_tuple_unpack_3__source_iter = NULL;

            {
                PyObject *tmp_assign_source_38;
                CHECK_OBJECT( tmp_tuple_unpack_3__element_1 );
                tmp_assign_source_38 = tmp_tuple_unpack_3__element_1;
                {
                    PyObject *old = var_system;
                    var_system = tmp_assign_source_38;
                    Py_INCREF( var_system );
                    Py_XDECREF( old );
                }

            }
            Py_XDECREF( tmp_tuple_unpack_3__element_1 );
            tmp_tuple_unpack_3__element_1 = NULL;

            {
                PyObject *tmp_assign_source_39;
                CHECK_OBJECT( tmp_tuple_unpack_3__element_2 );
                tmp_assign_source_39 = tmp_tuple_unpack_3__element_2;
                {
                    PyObject *old = var_release;
                    var_release = tmp_assign_source_39;
                    Py_INCREF( var_release );
                    Py_XDECREF( old );
                }

            }
            Py_XDECREF( tmp_tuple_unpack_3__element_2 );
            tmp_tuple_unpack_3__element_2 = NULL;

            {
                PyObject *tmp_assign_source_40;
                CHECK_OBJECT( tmp_tuple_unpack_3__element_3 );
                tmp_assign_source_40 = tmp_tuple_unpack_3__element_3;
                {
                    PyObject *old = var_version;
                    var_version = tmp_assign_source_40;
                    Py_INCREF( var_version );
                    Py_XDECREF( old );
                }

            }
            Py_XDECREF( tmp_tuple_unpack_3__element_3 );
            tmp_tuple_unpack_3__element_3 = NULL;

            {
                nuitka_bool tmp_condition_result_10;
                PyObject *tmp_compexpr_left_5;
                PyObject *tmp_compexpr_right_5;
                CHECK_OBJECT( var_system );
                tmp_compexpr_left_5 = var_system;
                tmp_compexpr_right_5 = const_str_digest_23ca34824203c6f381a9e69d7e58fe46;
                tmp_res = RICH_COMPARE_BOOL_EQ_OBJECT_OBJECT( tmp_compexpr_left_5, tmp_compexpr_right_5 );
                if ( tmp_res == -1 )
                {
                    assert( ERROR_OCCURRED() );

                    FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                    exception_lineno = 985;
                    type_description_1 = "oooooooooooooooo";
                    goto frame_exception_exit_1;
                }
                tmp_condition_result_10 = ( tmp_res != 0 ) ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
                if ( tmp_condition_result_10 == NUITKA_BOOL_TRUE )
                {
                    goto branch_yes_10;
                }
                else
                {
                    goto branch_no_10;
                }
                branch_yes_10:;
                {
                    PyObject *tmp_assign_source_41;
                    tmp_assign_source_41 = const_str_plain_Windows;
                    {
                        PyObject *old = var_system;
                        assert( old != NULL );
                        var_system = tmp_assign_source_41;
                        Py_INCREF( var_system );
                        Py_DECREF( old );
                    }

                }
                goto branch_end_10;
                branch_no_10:;
                {
                    nuitka_bool tmp_condition_result_11;
                    int tmp_and_left_truth_2;
                    nuitka_bool tmp_and_left_value_2;
                    nuitka_bool tmp_and_right_value_2;
                    PyObject *tmp_compexpr_left_6;
                    PyObject *tmp_compexpr_right_6;
                    PyObject *tmp_compexpr_left_7;
                    PyObject *tmp_compexpr_right_7;
                    CHECK_OBJECT( var_system );
                    tmp_compexpr_left_6 = var_system;
                    tmp_compexpr_right_6 = const_str_plain_Microsoft;
                    tmp_res = RICH_COMPARE_BOOL_EQ_OBJECT_OBJECT( tmp_compexpr_left_6, tmp_compexpr_right_6 );
                    if ( tmp_res == -1 )
                    {
                        assert( ERROR_OCCURRED() );

                        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                        exception_lineno = 987;
                        type_description_1 = "oooooooooooooooo";
                        goto frame_exception_exit_1;
                    }
                    tmp_and_left_value_2 = ( tmp_res != 0 ) ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
                    tmp_and_left_truth_2 = tmp_and_left_value_2 == NUITKA_BOOL_TRUE ? 1 : 0;
                    if ( tmp_and_left_truth_2 == 1 )
                    {
                        goto and_right_2;
                    }
                    else
                    {
                        goto and_left_2;
                    }
                    and_right_2:;
                    CHECK_OBJECT( var_release );
                    tmp_compexpr_left_7 = var_release;
                    tmp_compexpr_right_7 = const_str_plain_Windows;
                    tmp_res = RICH_COMPARE_BOOL_EQ_OBJECT_OBJECT( tmp_compexpr_left_7, tmp_compexpr_right_7 );
                    if ( tmp_res == -1 )
                    {
                        assert( ERROR_OCCURRED() );

                        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                        exception_lineno = 987;
                        type_description_1 = "oooooooooooooooo";
                        goto frame_exception_exit_1;
                    }
                    tmp_and_right_value_2 = ( tmp_res != 0 ) ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
                    tmp_condition_result_11 = tmp_and_right_value_2;
                    goto and_end_2;
                    and_left_2:;
                    tmp_condition_result_11 = tmp_and_left_value_2;
                    and_end_2:;
                    if ( tmp_condition_result_11 == NUITKA_BOOL_TRUE )
                    {
                        goto branch_yes_11;
                    }
                    else
                    {
                        goto branch_no_11;
                    }
                    branch_yes_11:;
                    {
                        PyObject *tmp_assign_source_42;
                        tmp_assign_source_42 = const_str_plain_Windows;
                        {
                            PyObject *old = var_system;
                            assert( old != NULL );
                            var_system = tmp_assign_source_42;
                            Py_INCREF( var_system );
                            Py_DECREF( old );
                        }

                    }
                    {
                        nuitka_bool tmp_condition_result_12;
                        PyObject *tmp_compexpr_left_8;
                        PyObject *tmp_compexpr_right_8;
                        PyObject *tmp_subscribed_name_1;
                        PyObject *tmp_subscript_name_1;
                        tmp_compexpr_left_8 = const_str_digest_0e00f16ce03b88638fa3350ac141599e;
                        CHECK_OBJECT( var_version );
                        tmp_subscribed_name_1 = var_version;
                        tmp_subscript_name_1 = const_slice_none_int_pos_3_none;
                        tmp_compexpr_right_8 = LOOKUP_SUBSCRIPT( tmp_subscribed_name_1, tmp_subscript_name_1 );
                        if ( tmp_compexpr_right_8 == NULL )
                        {
                            assert( ERROR_OCCURRED() );

                            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                            exception_lineno = 993;
                            type_description_1 = "oooooooooooooooo";
                            goto frame_exception_exit_1;
                        }
                        tmp_res = RICH_COMPARE_BOOL_EQ_OBJECT_OBJECT( tmp_compexpr_left_8, tmp_compexpr_right_8 );
                        Py_DECREF( tmp_compexpr_right_8 );
                        if ( tmp_res == -1 )
                        {
                            assert( ERROR_OCCURRED() );

                            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                            exception_lineno = 993;
                            type_description_1 = "oooooooooooooooo";
                            goto frame_exception_exit_1;
                        }
                        tmp_condition_result_12 = ( tmp_res != 0 ) ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
                        if ( tmp_condition_result_12 == NUITKA_BOOL_TRUE )
                        {
                            goto branch_yes_12;
                        }
                        else
                        {
                            goto branch_no_12;
                        }
                        branch_yes_12:;
                        {
                            PyObject *tmp_assign_source_43;
                            tmp_assign_source_43 = const_str_plain_Vista;
                            {
                                PyObject *old = var_release;
                                assert( old != NULL );
                                var_release = tmp_assign_source_43;
                                Py_INCREF( var_release );
                                Py_DECREF( old );
                            }

                        }
                        goto branch_end_12;
                        branch_no_12:;
                        {
                            PyObject *tmp_assign_source_44;
                            tmp_assign_source_44 = const_str_empty;
                            {
                                PyObject *old = var_release;
                                assert( old != NULL );
                                var_release = tmp_assign_source_44;
                                Py_INCREF( var_release );
                                Py_DECREF( old );
                            }

                        }
                        branch_end_12:;
                    }
                    branch_no_11:;
                }
                branch_end_10:;
            }
            branch_no_9:;
        }
        {
            nuitka_bool tmp_condition_result_13;
            PyObject *tmp_compexpr_left_9;
            PyObject *tmp_compexpr_right_9;
            if ( var_system == NULL )
            {

                exception_type = PyExc_UnboundLocalError;
                Py_INCREF( exception_type );
                exception_value = PyUnicode_FromFormat( "local variable '%s' referenced before assignment", "system" );
                exception_tb = NULL;
                NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
                CHAIN_EXCEPTION( exception_value );

                exception_lineno = 1000;
                type_description_1 = "oooooooooooooooo";
                goto frame_exception_exit_1;
            }

            tmp_compexpr_left_9 = var_system;
            tmp_compexpr_right_9 = const_tuple_str_plain_win32_str_plain_win16_tuple;
            tmp_res = PySequence_Contains( tmp_compexpr_right_9, tmp_compexpr_left_9 );
            if ( tmp_res == -1 )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 1000;
                type_description_1 = "oooooooooooooooo";
                goto frame_exception_exit_1;
            }
            tmp_condition_result_13 = ( tmp_res == 1 ) ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
            if ( tmp_condition_result_13 == NUITKA_BOOL_TRUE )
            {
                goto branch_yes_13;
            }
            else
            {
                goto branch_no_13;
            }
            branch_yes_13:;
            {
                nuitka_bool tmp_condition_result_14;
                PyObject *tmp_operand_name_3;
                if ( var_version == NULL )
                {

                    exception_type = PyExc_UnboundLocalError;
                    Py_INCREF( exception_type );
                    exception_value = PyUnicode_FromFormat( "local variable '%s' referenced before assignment", "version" );
                    exception_tb = NULL;
                    NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
                    CHAIN_EXCEPTION( exception_value );

                    exception_lineno = 1001;
                    type_description_1 = "oooooooooooooooo";
                    goto frame_exception_exit_1;
                }

                tmp_operand_name_3 = var_version;
                tmp_res = CHECK_IF_TRUE( tmp_operand_name_3 );
                if ( tmp_res == -1 )
                {
                    assert( ERROR_OCCURRED() );

                    FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                    exception_lineno = 1001;
                    type_description_1 = "oooooooooooooooo";
                    goto frame_exception_exit_1;
                }
                tmp_condition_result_14 = ( tmp_res == 0 ) ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
                if ( tmp_condition_result_14 == NUITKA_BOOL_TRUE )
                {
                    goto branch_yes_14;
                }
                else
                {
                    goto branch_no_14;
                }
                branch_yes_14:;
                {
                    nuitka_bool tmp_condition_result_15;
                    PyObject *tmp_compexpr_left_10;
                    PyObject *tmp_compexpr_right_10;
                    if ( var_system == NULL )
                    {

                        exception_type = PyExc_UnboundLocalError;
                        Py_INCREF( exception_type );
                        exception_value = PyUnicode_FromFormat( "local variable '%s' referenced before assignment", "system" );
                        exception_tb = NULL;
                        NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
                        CHAIN_EXCEPTION( exception_value );

                        exception_lineno = 1002;
                        type_description_1 = "oooooooooooooooo";
                        goto frame_exception_exit_1;
                    }

                    tmp_compexpr_left_10 = var_system;
                    tmp_compexpr_right_10 = const_str_plain_win32;
                    tmp_res = RICH_COMPARE_BOOL_EQ_OBJECT_OBJECT( tmp_compexpr_left_10, tmp_compexpr_right_10 );
                    if ( tmp_res == -1 )
                    {
                        assert( ERROR_OCCURRED() );

                        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                        exception_lineno = 1002;
                        type_description_1 = "oooooooooooooooo";
                        goto frame_exception_exit_1;
                    }
                    tmp_condition_result_15 = ( tmp_res != 0 ) ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
                    if ( tmp_condition_result_15 == NUITKA_BOOL_TRUE )
                    {
                        goto branch_yes_15;
                    }
                    else
                    {
                        goto branch_no_15;
                    }
                    branch_yes_15:;
                    {
                        PyObject *tmp_assign_source_45;
                        tmp_assign_source_45 = const_str_plain_32bit;
                        {
                            PyObject *old = var_version;
                            var_version = tmp_assign_source_45;
                            Py_INCREF( var_version );
                            Py_XDECREF( old );
                        }

                    }
                    goto branch_end_15;
                    branch_no_15:;
                    {
                        PyObject *tmp_assign_source_46;
                        tmp_assign_source_46 = const_str_plain_16bit;
                        {
                            PyObject *old = var_version;
                            var_version = tmp_assign_source_46;
                            Py_INCREF( var_version );
                            Py_XDECREF( old );
                        }

                    }
                    branch_end_15:;
                }
                branch_no_14:;
            }
            {
                PyObject *tmp_assign_source_47;
                tmp_assign_source_47 = const_str_plain_Windows;
                {
                    PyObject *old = var_system;
                    var_system = tmp_assign_source_47;
                    Py_INCREF( var_system );
                    Py_XDECREF( old );
                }

            }
            goto branch_end_13;
            branch_no_13:;
            {
                nuitka_bool tmp_condition_result_16;
                PyObject *tmp_compexpr_left_11;
                PyObject *tmp_compexpr_right_11;
                PyObject *tmp_subscribed_name_2;
                PyObject *tmp_subscript_name_2;
                if ( var_system == NULL )
                {

                    exception_type = PyExc_UnboundLocalError;
                    Py_INCREF( exception_type );
                    exception_value = PyUnicode_FromFormat( "local variable '%s' referenced before assignment", "system" );
                    exception_tb = NULL;
                    NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
                    CHAIN_EXCEPTION( exception_value );

                    exception_lineno = 1008;
                    type_description_1 = "oooooooooooooooo";
                    goto frame_exception_exit_1;
                }

                tmp_subscribed_name_2 = var_system;
                tmp_subscript_name_2 = const_slice_none_int_pos_4_none;
                tmp_compexpr_left_11 = LOOKUP_SUBSCRIPT( tmp_subscribed_name_2, tmp_subscript_name_2 );
                if ( tmp_compexpr_left_11 == NULL )
                {
                    assert( ERROR_OCCURRED() );

                    FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                    exception_lineno = 1008;
                    type_description_1 = "oooooooooooooooo";
                    goto frame_exception_exit_1;
                }
                tmp_compexpr_right_11 = const_str_plain_java;
                tmp_res = RICH_COMPARE_BOOL_EQ_OBJECT_OBJECT( tmp_compexpr_left_11, tmp_compexpr_right_11 );
                Py_DECREF( tmp_compexpr_left_11 );
                if ( tmp_res == -1 )
                {
                    assert( ERROR_OCCURRED() );

                    FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                    exception_lineno = 1008;
                    type_description_1 = "oooooooooooooooo";
                    goto frame_exception_exit_1;
                }
                tmp_condition_result_16 = ( tmp_res != 0 ) ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
                if ( tmp_condition_result_16 == NUITKA_BOOL_TRUE )
                {
                    goto branch_yes_16;
                }
                else
                {
                    goto branch_no_16;
                }
                branch_yes_16:;
                // Tried code:
                {
                    PyObject *tmp_assign_source_48;
                    PyObject *tmp_iter_arg_4;
                    PyObject *tmp_called_name_6;
                    PyObject *tmp_mvar_value_12;
                    tmp_mvar_value_12 = GET_STRING_DICT_VALUE( moduledict_platform, (Nuitka_StringObject *)const_str_plain_java_ver );

                    if (unlikely( tmp_mvar_value_12 == NULL ))
                    {
                        tmp_mvar_value_12 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_java_ver );
                    }

                    if ( tmp_mvar_value_12 == NULL )
                    {

                        exception_type = PyExc_NameError;
                        Py_INCREF( exception_type );
                        exception_value = PyUnicode_FromFormat( "name '%s' is not defined", "java_ver" );
                        exception_tb = NULL;
                        NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
                        CHAIN_EXCEPTION( exception_value );

                        exception_lineno = 1009;
                        type_description_1 = "oooooooooooooooo";
                        goto try_except_handler_10;
                    }

                    tmp_called_name_6 = tmp_mvar_value_12;
                    frame_78e45736f492b0dece9b673c7115a31c->m_frame.f_lineno = 1009;
                    tmp_iter_arg_4 = CALL_FUNCTION_NO_ARGS( tmp_called_name_6 );
                    if ( tmp_iter_arg_4 == NULL )
                    {
                        assert( ERROR_OCCURRED() );

                        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                        exception_lineno = 1009;
                        type_description_1 = "oooooooooooooooo";
                        goto try_except_handler_10;
                    }
                    tmp_assign_source_48 = MAKE_UNPACK_ITERATOR( tmp_iter_arg_4 );
                    Py_DECREF( tmp_iter_arg_4 );
                    if ( tmp_assign_source_48 == NULL )
                    {
                        assert( ERROR_OCCURRED() );

                        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                        exception_lineno = 1009;
                        type_description_1 = "oooooooooooooooo";
                        goto try_except_handler_10;
                    }
                    assert( tmp_tuple_unpack_4__source_iter == NULL );
                    tmp_tuple_unpack_4__source_iter = tmp_assign_source_48;
                }
                // Tried code:
                {
                    PyObject *tmp_assign_source_49;
                    PyObject *tmp_unpack_13;
                    CHECK_OBJECT( tmp_tuple_unpack_4__source_iter );
                    tmp_unpack_13 = tmp_tuple_unpack_4__source_iter;
                    tmp_assign_source_49 = UNPACK_NEXT( tmp_unpack_13, 0, 4 );
                    if ( tmp_assign_source_49 == NULL )
                    {
                        if ( !ERROR_OCCURRED() )
                        {
                            exception_type = PyExc_StopIteration;
                            Py_INCREF( exception_type );
                            exception_value = NULL;
                            exception_tb = NULL;
                        }
                        else
                        {
                            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
                        }


                        type_description_1 = "oooooooooooooooo";
                        exception_lineno = 1009;
                        goto try_except_handler_11;
                    }
                    assert( tmp_tuple_unpack_4__element_1 == NULL );
                    tmp_tuple_unpack_4__element_1 = tmp_assign_source_49;
                }
                {
                    PyObject *tmp_assign_source_50;
                    PyObject *tmp_unpack_14;
                    CHECK_OBJECT( tmp_tuple_unpack_4__source_iter );
                    tmp_unpack_14 = tmp_tuple_unpack_4__source_iter;
                    tmp_assign_source_50 = UNPACK_NEXT( tmp_unpack_14, 1, 4 );
                    if ( tmp_assign_source_50 == NULL )
                    {
                        if ( !ERROR_OCCURRED() )
                        {
                            exception_type = PyExc_StopIteration;
                            Py_INCREF( exception_type );
                            exception_value = NULL;
                            exception_tb = NULL;
                        }
                        else
                        {
                            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
                        }


                        type_description_1 = "oooooooooooooooo";
                        exception_lineno = 1009;
                        goto try_except_handler_11;
                    }
                    assert( tmp_tuple_unpack_4__element_2 == NULL );
                    tmp_tuple_unpack_4__element_2 = tmp_assign_source_50;
                }
                {
                    PyObject *tmp_assign_source_51;
                    PyObject *tmp_unpack_15;
                    CHECK_OBJECT( tmp_tuple_unpack_4__source_iter );
                    tmp_unpack_15 = tmp_tuple_unpack_4__source_iter;
                    tmp_assign_source_51 = UNPACK_NEXT( tmp_unpack_15, 2, 4 );
                    if ( tmp_assign_source_51 == NULL )
                    {
                        if ( !ERROR_OCCURRED() )
                        {
                            exception_type = PyExc_StopIteration;
                            Py_INCREF( exception_type );
                            exception_value = NULL;
                            exception_tb = NULL;
                        }
                        else
                        {
                            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
                        }


                        type_description_1 = "oooooooooooooooo";
                        exception_lineno = 1009;
                        goto try_except_handler_11;
                    }
                    assert( tmp_tuple_unpack_4__element_3 == NULL );
                    tmp_tuple_unpack_4__element_3 = tmp_assign_source_51;
                }
                {
                    PyObject *tmp_assign_source_52;
                    PyObject *tmp_unpack_16;
                    CHECK_OBJECT( tmp_tuple_unpack_4__source_iter );
                    tmp_unpack_16 = tmp_tuple_unpack_4__source_iter;
                    tmp_assign_source_52 = UNPACK_NEXT( tmp_unpack_16, 3, 4 );
                    if ( tmp_assign_source_52 == NULL )
                    {
                        if ( !ERROR_OCCURRED() )
                        {
                            exception_type = PyExc_StopIteration;
                            Py_INCREF( exception_type );
                            exception_value = NULL;
                            exception_tb = NULL;
                        }
                        else
                        {
                            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
                        }


                        type_description_1 = "oooooooooooooooo";
                        exception_lineno = 1009;
                        goto try_except_handler_11;
                    }
                    assert( tmp_tuple_unpack_4__element_4 == NULL );
                    tmp_tuple_unpack_4__element_4 = tmp_assign_source_52;
                }
                {
                    PyObject *tmp_iterator_name_4;
                    CHECK_OBJECT( tmp_tuple_unpack_4__source_iter );
                    tmp_iterator_name_4 = tmp_tuple_unpack_4__source_iter;
                    // Check if iterator has left-over elements.
                    CHECK_OBJECT( tmp_iterator_name_4 ); assert( HAS_ITERNEXT( tmp_iterator_name_4 ) );

                    tmp_iterator_attempt = (*Py_TYPE( tmp_iterator_name_4 )->tp_iternext)( tmp_iterator_name_4 );

                    if (likely( tmp_iterator_attempt == NULL ))
                    {
                        PyObject *error = GET_ERROR_OCCURRED();

                        if ( error != NULL )
                        {
                            if ( EXCEPTION_MATCH_BOOL_SINGLE( error, PyExc_StopIteration ))
                            {
                                CLEAR_ERROR_OCCURRED();
                            }
                            else
                            {
                                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );

                                type_description_1 = "oooooooooooooooo";
                                exception_lineno = 1009;
                                goto try_except_handler_11;
                            }
                        }
                    }
                    else
                    {
                        Py_DECREF( tmp_iterator_attempt );

                        // TODO: Could avoid PyErr_Format.
#if PYTHON_VERSION < 300
                        PyErr_Format( PyExc_ValueError, "too many values to unpack" );
#else
                        PyErr_Format( PyExc_ValueError, "too many values to unpack (expected 4)" );
#endif
                        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );

                        type_description_1 = "oooooooooooooooo";
                        exception_lineno = 1009;
                        goto try_except_handler_11;
                    }
                }
                goto try_end_9;
                // Exception handler code:
                try_except_handler_11:;
                exception_keeper_type_9 = exception_type;
                exception_keeper_value_9 = exception_value;
                exception_keeper_tb_9 = exception_tb;
                exception_keeper_lineno_9 = exception_lineno;
                exception_type = NULL;
                exception_value = NULL;
                exception_tb = NULL;
                exception_lineno = 0;

                CHECK_OBJECT( (PyObject *)tmp_tuple_unpack_4__source_iter );
                Py_DECREF( tmp_tuple_unpack_4__source_iter );
                tmp_tuple_unpack_4__source_iter = NULL;

                // Re-raise.
                exception_type = exception_keeper_type_9;
                exception_value = exception_keeper_value_9;
                exception_tb = exception_keeper_tb_9;
                exception_lineno = exception_keeper_lineno_9;

                goto try_except_handler_10;
                // End of try:
                try_end_9:;
                goto try_end_10;
                // Exception handler code:
                try_except_handler_10:;
                exception_keeper_type_10 = exception_type;
                exception_keeper_value_10 = exception_value;
                exception_keeper_tb_10 = exception_tb;
                exception_keeper_lineno_10 = exception_lineno;
                exception_type = NULL;
                exception_value = NULL;
                exception_tb = NULL;
                exception_lineno = 0;

                Py_XDECREF( tmp_tuple_unpack_4__element_1 );
                tmp_tuple_unpack_4__element_1 = NULL;

                Py_XDECREF( tmp_tuple_unpack_4__element_2 );
                tmp_tuple_unpack_4__element_2 = NULL;

                Py_XDECREF( tmp_tuple_unpack_4__element_3 );
                tmp_tuple_unpack_4__element_3 = NULL;

                Py_XDECREF( tmp_tuple_unpack_4__element_4 );
                tmp_tuple_unpack_4__element_4 = NULL;

                // Re-raise.
                exception_type = exception_keeper_type_10;
                exception_value = exception_keeper_value_10;
                exception_tb = exception_keeper_tb_10;
                exception_lineno = exception_keeper_lineno_10;

                goto frame_exception_exit_1;
                // End of try:
                try_end_10:;
                CHECK_OBJECT( (PyObject *)tmp_tuple_unpack_4__source_iter );
                Py_DECREF( tmp_tuple_unpack_4__source_iter );
                tmp_tuple_unpack_4__source_iter = NULL;

                {
                    PyObject *tmp_assign_source_53;
                    CHECK_OBJECT( tmp_tuple_unpack_4__element_1 );
                    tmp_assign_source_53 = tmp_tuple_unpack_4__element_1;
                    {
                        PyObject *old = var_release;
                        var_release = tmp_assign_source_53;
                        Py_INCREF( var_release );
                        Py_XDECREF( old );
                    }

                }
                Py_XDECREF( tmp_tuple_unpack_4__element_1 );
                tmp_tuple_unpack_4__element_1 = NULL;

                {
                    PyObject *tmp_assign_source_54;
                    CHECK_OBJECT( tmp_tuple_unpack_4__element_2 );
                    tmp_assign_source_54 = tmp_tuple_unpack_4__element_2;
                    assert( var_vendor == NULL );
                    Py_INCREF( tmp_assign_source_54 );
                    var_vendor = tmp_assign_source_54;
                }
                Py_XDECREF( tmp_tuple_unpack_4__element_2 );
                tmp_tuple_unpack_4__element_2 = NULL;

                {
                    PyObject *tmp_assign_source_55;
                    CHECK_OBJECT( tmp_tuple_unpack_4__element_3 );
                    tmp_assign_source_55 = tmp_tuple_unpack_4__element_3;
                    assert( var_vminfo == NULL );
                    Py_INCREF( tmp_assign_source_55 );
                    var_vminfo = tmp_assign_source_55;
                }
                Py_XDECREF( tmp_tuple_unpack_4__element_3 );
                tmp_tuple_unpack_4__element_3 = NULL;

                {
                    PyObject *tmp_assign_source_56;
                    CHECK_OBJECT( tmp_tuple_unpack_4__element_4 );
                    tmp_assign_source_56 = tmp_tuple_unpack_4__element_4;
                    assert( var_osinfo == NULL );
                    Py_INCREF( tmp_assign_source_56 );
                    var_osinfo = tmp_assign_source_56;
                }
                Py_XDECREF( tmp_tuple_unpack_4__element_4 );
                tmp_tuple_unpack_4__element_4 = NULL;

                {
                    PyObject *tmp_assign_source_57;
                    tmp_assign_source_57 = const_str_plain_Java;
                    {
                        PyObject *old = var_system;
                        var_system = tmp_assign_source_57;
                        Py_INCREF( var_system );
                        Py_XDECREF( old );
                    }

                }
                {
                    PyObject *tmp_assign_source_58;
                    PyObject *tmp_called_instance_4;
                    PyObject *tmp_args_element_name_6;
                    tmp_called_instance_4 = const_str_digest_db35ab94a03c3cbeb13cbe2a1d728b77;
                    CHECK_OBJECT( var_vminfo );
                    tmp_args_element_name_6 = var_vminfo;
                    frame_78e45736f492b0dece9b673c7115a31c->m_frame.f_lineno = 1011;
                    {
                        PyObject *call_args[] = { tmp_args_element_name_6 };
                        tmp_assign_source_58 = CALL_METHOD_WITH_ARGS1( tmp_called_instance_4, const_str_plain_join, call_args );
                    }

                    if ( tmp_assign_source_58 == NULL )
                    {
                        assert( ERROR_OCCURRED() );

                        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                        exception_lineno = 1011;
                        type_description_1 = "oooooooooooooooo";
                        goto frame_exception_exit_1;
                    }
                    {
                        PyObject *old = var_version;
                        var_version = tmp_assign_source_58;
                        Py_XDECREF( old );
                    }

                }
                {
                    nuitka_bool tmp_condition_result_17;
                    PyObject *tmp_operand_name_4;
                    CHECK_OBJECT( var_version );
                    tmp_operand_name_4 = var_version;
                    tmp_res = CHECK_IF_TRUE( tmp_operand_name_4 );
                    if ( tmp_res == -1 )
                    {
                        assert( ERROR_OCCURRED() );

                        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                        exception_lineno = 1012;
                        type_description_1 = "oooooooooooooooo";
                        goto frame_exception_exit_1;
                    }
                    tmp_condition_result_17 = ( tmp_res == 0 ) ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
                    if ( tmp_condition_result_17 == NUITKA_BOOL_TRUE )
                    {
                        goto branch_yes_17;
                    }
                    else
                    {
                        goto branch_no_17;
                    }
                    branch_yes_17:;
                    {
                        PyObject *tmp_assign_source_59;
                        CHECK_OBJECT( var_vendor );
                        tmp_assign_source_59 = var_vendor;
                        {
                            PyObject *old = var_version;
                            assert( old != NULL );
                            var_version = tmp_assign_source_59;
                            Py_INCREF( var_version );
                            Py_DECREF( old );
                        }

                    }
                    branch_no_17:;
                }
                branch_no_16:;
            }
            branch_end_13:;
        }
        branch_no_3:;
    }
    {
        nuitka_bool tmp_condition_result_18;
        PyObject *tmp_compexpr_left_12;
        PyObject *tmp_compexpr_right_12;
        if ( var_system == NULL )
        {

            exception_type = PyExc_UnboundLocalError;
            Py_INCREF( exception_type );
            exception_value = PyUnicode_FromFormat( "local variable '%s' referenced before assignment", "system" );
            exception_tb = NULL;
            NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
            CHAIN_EXCEPTION( exception_value );

            exception_lineno = 1016;
            type_description_1 = "oooooooooooooooo";
            goto frame_exception_exit_1;
        }

        tmp_compexpr_left_12 = var_system;
        tmp_compexpr_right_12 = const_str_plain_OpenVMS;
        tmp_res = RICH_COMPARE_BOOL_EQ_OBJECT_OBJECT( tmp_compexpr_left_12, tmp_compexpr_right_12 );
        if ( tmp_res == -1 )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 1016;
            type_description_1 = "oooooooooooooooo";
            goto frame_exception_exit_1;
        }
        tmp_condition_result_18 = ( tmp_res != 0 ) ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
        if ( tmp_condition_result_18 == NUITKA_BOOL_TRUE )
        {
            goto branch_yes_18;
        }
        else
        {
            goto branch_no_18;
        }
        branch_yes_18:;
        {
            nuitka_bool tmp_condition_result_19;
            int tmp_or_left_truth_2;
            nuitka_bool tmp_or_left_value_2;
            nuitka_bool tmp_or_right_value_2;
            PyObject *tmp_operand_name_5;
            PyObject *tmp_compexpr_left_13;
            PyObject *tmp_compexpr_right_13;
            if ( var_release == NULL )
            {

                exception_type = PyExc_UnboundLocalError;
                Py_INCREF( exception_type );
                exception_value = PyUnicode_FromFormat( "local variable '%s' referenced before assignment", "release" );
                exception_tb = NULL;
                NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
                CHAIN_EXCEPTION( exception_value );

                exception_lineno = 1018;
                type_description_1 = "oooooooooooooooo";
                goto frame_exception_exit_1;
            }

            tmp_operand_name_5 = var_release;
            tmp_res = CHECK_IF_TRUE( tmp_operand_name_5 );
            if ( tmp_res == -1 )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 1018;
                type_description_1 = "oooooooooooooooo";
                goto frame_exception_exit_1;
            }
            tmp_or_left_value_2 = ( tmp_res == 0 ) ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
            tmp_or_left_truth_2 = tmp_or_left_value_2 == NUITKA_BOOL_TRUE ? 1 : 0;
            if ( tmp_or_left_truth_2 == 1 )
            {
                goto or_left_2;
            }
            else
            {
                goto or_right_2;
            }
            or_right_2:;
            if ( var_release == NULL )
            {

                exception_type = PyExc_UnboundLocalError;
                Py_INCREF( exception_type );
                exception_value = PyUnicode_FromFormat( "local variable '%s' referenced before assignment", "release" );
                exception_tb = NULL;
                NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
                CHAIN_EXCEPTION( exception_value );

                exception_lineno = 1018;
                type_description_1 = "oooooooooooooooo";
                goto frame_exception_exit_1;
            }

            tmp_compexpr_left_13 = var_release;
            tmp_compexpr_right_13 = const_str_plain_0;
            tmp_res = RICH_COMPARE_BOOL_EQ_OBJECT_OBJECT( tmp_compexpr_left_13, tmp_compexpr_right_13 );
            if ( tmp_res == -1 )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 1018;
                type_description_1 = "oooooooooooooooo";
                goto frame_exception_exit_1;
            }
            tmp_or_right_value_2 = ( tmp_res != 0 ) ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
            tmp_condition_result_19 = tmp_or_right_value_2;
            goto or_end_2;
            or_left_2:;
            tmp_condition_result_19 = tmp_or_left_value_2;
            or_end_2:;
            if ( tmp_condition_result_19 == NUITKA_BOOL_TRUE )
            {
                goto branch_yes_19;
            }
            else
            {
                goto branch_no_19;
            }
            branch_yes_19:;
            {
                PyObject *tmp_assign_source_60;
                if ( var_version == NULL )
                {

                    exception_type = PyExc_UnboundLocalError;
                    Py_INCREF( exception_type );
                    exception_value = PyUnicode_FromFormat( "local variable '%s' referenced before assignment", "version" );
                    exception_tb = NULL;
                    NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
                    CHAIN_EXCEPTION( exception_value );

                    exception_lineno = 1019;
                    type_description_1 = "oooooooooooooooo";
                    goto frame_exception_exit_1;
                }

                tmp_assign_source_60 = var_version;
                {
                    PyObject *old = var_release;
                    var_release = tmp_assign_source_60;
                    Py_INCREF( var_release );
                    Py_XDECREF( old );
                }

            }
            {
                PyObject *tmp_assign_source_61;
                tmp_assign_source_61 = const_str_empty;
                {
                    PyObject *old = var_version;
                    var_version = tmp_assign_source_61;
                    Py_INCREF( var_version );
                    Py_XDECREF( old );
                }

            }
            branch_no_19:;
        }
        {
            nuitka_bool tmp_assign_source_62;
            tmp_assign_source_62 = NUITKA_BOOL_TRUE;
            tmp_try_except_1__unhandled_indicator = tmp_assign_source_62;
        }
        // Tried code:
        // Tried code:
        {
            PyObject *tmp_assign_source_63;
            PyObject *tmp_name_name_1;
            PyObject *tmp_globals_name_1;
            PyObject *tmp_locals_name_1;
            PyObject *tmp_fromlist_name_1;
            PyObject *tmp_level_name_1;
            tmp_name_name_1 = const_str_plain_vms_lib;
            tmp_globals_name_1 = (PyObject *)moduledict_platform;
            tmp_locals_name_1 = Py_None;
            tmp_fromlist_name_1 = Py_None;
            tmp_level_name_1 = const_int_0;
            frame_78e45736f492b0dece9b673c7115a31c->m_frame.f_lineno = 1023;
            tmp_assign_source_63 = IMPORT_MODULE5( tmp_name_name_1, tmp_globals_name_1, tmp_locals_name_1, tmp_fromlist_name_1, tmp_level_name_1 );
            if ( tmp_assign_source_63 == NULL )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 1023;
                type_description_1 = "oooooooooooooooo";
                goto try_except_handler_13;
            }
            assert( var_vms_lib == NULL );
            var_vms_lib = tmp_assign_source_63;
        }
        goto try_end_11;
        // Exception handler code:
        try_except_handler_13:;
        exception_keeper_type_11 = exception_type;
        exception_keeper_value_11 = exception_value;
        exception_keeper_tb_11 = exception_tb;
        exception_keeper_lineno_11 = exception_lineno;
        exception_type = NULL;
        exception_value = NULL;
        exception_tb = NULL;
        exception_lineno = 0;

        {
            nuitka_bool tmp_assign_source_64;
            tmp_assign_source_64 = NUITKA_BOOL_FALSE;
            tmp_try_except_1__unhandled_indicator = tmp_assign_source_64;
        }
        // Preserve existing published exception.
        exception_preserved_type_2 = EXC_TYPE(PyThreadState_GET());
        Py_XINCREF( exception_preserved_type_2 );
        exception_preserved_value_2 = EXC_VALUE(PyThreadState_GET());
        Py_XINCREF( exception_preserved_value_2 );
        exception_preserved_tb_2 = (PyTracebackObject *)EXC_TRACEBACK(PyThreadState_GET());
        Py_XINCREF( exception_preserved_tb_2 );

        if ( exception_keeper_tb_11 == NULL )
        {
            exception_keeper_tb_11 = MAKE_TRACEBACK( frame_78e45736f492b0dece9b673c7115a31c, exception_keeper_lineno_11 );
        }
        else if ( exception_keeper_lineno_11 != 0 )
        {
            exception_keeper_tb_11 = ADD_TRACEBACK( exception_keeper_tb_11, frame_78e45736f492b0dece9b673c7115a31c, exception_keeper_lineno_11 );
        }

        NORMALIZE_EXCEPTION( &exception_keeper_type_11, &exception_keeper_value_11, &exception_keeper_tb_11 );
        PyException_SetTraceback( exception_keeper_value_11, (PyObject *)exception_keeper_tb_11 );
        PUBLISH_EXCEPTION( &exception_keeper_type_11, &exception_keeper_value_11, &exception_keeper_tb_11 );
        // Tried code:
        {
            nuitka_bool tmp_condition_result_20;
            PyObject *tmp_operand_name_6;
            PyObject *tmp_compexpr_left_14;
            PyObject *tmp_compexpr_right_14;
            tmp_compexpr_left_14 = EXC_TYPE(PyThreadState_GET());
            tmp_compexpr_right_14 = PyExc_ImportError;
            tmp_res = EXCEPTION_MATCH_BOOL( tmp_compexpr_left_14, tmp_compexpr_right_14 );
            if ( tmp_res == -1 )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 1024;
                type_description_1 = "oooooooooooooooo";
                goto try_except_handler_14;
            }
            tmp_operand_name_6 = ( tmp_res != 0 ) ? Py_True : Py_False;
            tmp_res = CHECK_IF_TRUE( tmp_operand_name_6 );
            if ( tmp_res == -1 )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 1024;
                type_description_1 = "oooooooooooooooo";
                goto try_except_handler_14;
            }
            tmp_condition_result_20 = ( tmp_res == 0 ) ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
            if ( tmp_condition_result_20 == NUITKA_BOOL_TRUE )
            {
                goto branch_yes_20;
            }
            else
            {
                goto branch_no_20;
            }
            branch_yes_20:;
            tmp_result = RERAISE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
            if (unlikely( tmp_result == false ))
            {
                exception_lineno = 1022;
            }

            if (exception_tb && exception_tb->tb_frame == &frame_78e45736f492b0dece9b673c7115a31c->m_frame) frame_78e45736f492b0dece9b673c7115a31c->m_frame.f_lineno = exception_tb->tb_lineno;
            type_description_1 = "oooooooooooooooo";
            goto try_except_handler_14;
            branch_no_20:;
        }
        goto try_end_12;
        // Exception handler code:
        try_except_handler_14:;
        exception_keeper_type_12 = exception_type;
        exception_keeper_value_12 = exception_value;
        exception_keeper_tb_12 = exception_tb;
        exception_keeper_lineno_12 = exception_lineno;
        exception_type = NULL;
        exception_value = NULL;
        exception_tb = NULL;
        exception_lineno = 0;

        // Restore previous exception.
        SET_CURRENT_EXCEPTION( exception_preserved_type_2, exception_preserved_value_2, exception_preserved_tb_2 );
        // Re-raise.
        exception_type = exception_keeper_type_12;
        exception_value = exception_keeper_value_12;
        exception_tb = exception_keeper_tb_12;
        exception_lineno = exception_keeper_lineno_12;

        goto try_except_handler_12;
        // End of try:
        try_end_12:;
        // Restore previous exception.
        SET_CURRENT_EXCEPTION( exception_preserved_type_2, exception_preserved_value_2, exception_preserved_tb_2 );
        goto try_end_11;
        // exception handler codes exits in all cases
        NUITKA_CANNOT_GET_HERE( platform$$$function_23_uname );
        return NULL;
        // End of try:
        try_end_11:;
        {
            nuitka_bool tmp_condition_result_21;
            nuitka_bool tmp_compexpr_left_15;
            nuitka_bool tmp_compexpr_right_15;
            assert( tmp_try_except_1__unhandled_indicator != NUITKA_BOOL_UNASSIGNED);
            tmp_compexpr_left_15 = tmp_try_except_1__unhandled_indicator;
            tmp_compexpr_right_15 = NUITKA_BOOL_TRUE;
            tmp_condition_result_21 = ( tmp_compexpr_left_15 == tmp_compexpr_right_15 ) ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
            if ( tmp_condition_result_21 == NUITKA_BOOL_TRUE )
            {
                goto branch_yes_21;
            }
            else
            {
                goto branch_no_21;
            }
            branch_yes_21:;
            // Tried code:
            {
                PyObject *tmp_assign_source_65;
                PyObject *tmp_iter_arg_5;
                PyObject *tmp_called_instance_5;
                if ( var_vms_lib == NULL )
                {

                    exception_type = PyExc_UnboundLocalError;
                    Py_INCREF( exception_type );
                    exception_value = PyUnicode_FromFormat( "local variable '%s' referenced before assignment", "vms_lib" );
                    exception_tb = NULL;
                    NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
                    CHAIN_EXCEPTION( exception_value );

                    exception_lineno = 1027;
                    type_description_1 = "oooooooooooooooo";
                    goto try_except_handler_15;
                }

                tmp_called_instance_5 = var_vms_lib;
                frame_78e45736f492b0dece9b673c7115a31c->m_frame.f_lineno = 1027;
                tmp_iter_arg_5 = CALL_METHOD_WITH_ARGS2( tmp_called_instance_5, const_str_plain_getsyi, &PyTuple_GET_ITEM( const_tuple_str_digest_b2cf3abbcc35652f5e11bac6fe7339cf_int_0_tuple, 0 ) );

                if ( tmp_iter_arg_5 == NULL )
                {
                    assert( ERROR_OCCURRED() );

                    FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                    exception_lineno = 1027;
                    type_description_1 = "oooooooooooooooo";
                    goto try_except_handler_15;
                }
                tmp_assign_source_65 = MAKE_UNPACK_ITERATOR( tmp_iter_arg_5 );
                Py_DECREF( tmp_iter_arg_5 );
                if ( tmp_assign_source_65 == NULL )
                {
                    assert( ERROR_OCCURRED() );

                    FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                    exception_lineno = 1027;
                    type_description_1 = "oooooooooooooooo";
                    goto try_except_handler_15;
                }
                assert( tmp_tuple_unpack_5__source_iter == NULL );
                tmp_tuple_unpack_5__source_iter = tmp_assign_source_65;
            }
            // Tried code:
            {
                PyObject *tmp_assign_source_66;
                PyObject *tmp_unpack_17;
                CHECK_OBJECT( tmp_tuple_unpack_5__source_iter );
                tmp_unpack_17 = tmp_tuple_unpack_5__source_iter;
                tmp_assign_source_66 = UNPACK_NEXT( tmp_unpack_17, 0, 2 );
                if ( tmp_assign_source_66 == NULL )
                {
                    if ( !ERROR_OCCURRED() )
                    {
                        exception_type = PyExc_StopIteration;
                        Py_INCREF( exception_type );
                        exception_value = NULL;
                        exception_tb = NULL;
                    }
                    else
                    {
                        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
                    }


                    type_description_1 = "oooooooooooooooo";
                    exception_lineno = 1027;
                    goto try_except_handler_16;
                }
                assert( tmp_tuple_unpack_5__element_1 == NULL );
                tmp_tuple_unpack_5__element_1 = tmp_assign_source_66;
            }
            {
                PyObject *tmp_assign_source_67;
                PyObject *tmp_unpack_18;
                CHECK_OBJECT( tmp_tuple_unpack_5__source_iter );
                tmp_unpack_18 = tmp_tuple_unpack_5__source_iter;
                tmp_assign_source_67 = UNPACK_NEXT( tmp_unpack_18, 1, 2 );
                if ( tmp_assign_source_67 == NULL )
                {
                    if ( !ERROR_OCCURRED() )
                    {
                        exception_type = PyExc_StopIteration;
                        Py_INCREF( exception_type );
                        exception_value = NULL;
                        exception_tb = NULL;
                    }
                    else
                    {
                        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
                    }


                    type_description_1 = "oooooooooooooooo";
                    exception_lineno = 1027;
                    goto try_except_handler_16;
                }
                assert( tmp_tuple_unpack_5__element_2 == NULL );
                tmp_tuple_unpack_5__element_2 = tmp_assign_source_67;
            }
            {
                PyObject *tmp_iterator_name_5;
                CHECK_OBJECT( tmp_tuple_unpack_5__source_iter );
                tmp_iterator_name_5 = tmp_tuple_unpack_5__source_iter;
                // Check if iterator has left-over elements.
                CHECK_OBJECT( tmp_iterator_name_5 ); assert( HAS_ITERNEXT( tmp_iterator_name_5 ) );

                tmp_iterator_attempt = (*Py_TYPE( tmp_iterator_name_5 )->tp_iternext)( tmp_iterator_name_5 );

                if (likely( tmp_iterator_attempt == NULL ))
                {
                    PyObject *error = GET_ERROR_OCCURRED();

                    if ( error != NULL )
                    {
                        if ( EXCEPTION_MATCH_BOOL_SINGLE( error, PyExc_StopIteration ))
                        {
                            CLEAR_ERROR_OCCURRED();
                        }
                        else
                        {
                            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );

                            type_description_1 = "oooooooooooooooo";
                            exception_lineno = 1027;
                            goto try_except_handler_16;
                        }
                    }
                }
                else
                {
                    Py_DECREF( tmp_iterator_attempt );

                    // TODO: Could avoid PyErr_Format.
#if PYTHON_VERSION < 300
                    PyErr_Format( PyExc_ValueError, "too many values to unpack" );
#else
                    PyErr_Format( PyExc_ValueError, "too many values to unpack (expected 2)" );
#endif
                    FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );

                    type_description_1 = "oooooooooooooooo";
                    exception_lineno = 1027;
                    goto try_except_handler_16;
                }
            }
            goto try_end_13;
            // Exception handler code:
            try_except_handler_16:;
            exception_keeper_type_13 = exception_type;
            exception_keeper_value_13 = exception_value;
            exception_keeper_tb_13 = exception_tb;
            exception_keeper_lineno_13 = exception_lineno;
            exception_type = NULL;
            exception_value = NULL;
            exception_tb = NULL;
            exception_lineno = 0;

            CHECK_OBJECT( (PyObject *)tmp_tuple_unpack_5__source_iter );
            Py_DECREF( tmp_tuple_unpack_5__source_iter );
            tmp_tuple_unpack_5__source_iter = NULL;

            // Re-raise.
            exception_type = exception_keeper_type_13;
            exception_value = exception_keeper_value_13;
            exception_tb = exception_keeper_tb_13;
            exception_lineno = exception_keeper_lineno_13;

            goto try_except_handler_15;
            // End of try:
            try_end_13:;
            goto try_end_14;
            // Exception handler code:
            try_except_handler_15:;
            exception_keeper_type_14 = exception_type;
            exception_keeper_value_14 = exception_value;
            exception_keeper_tb_14 = exception_tb;
            exception_keeper_lineno_14 = exception_lineno;
            exception_type = NULL;
            exception_value = NULL;
            exception_tb = NULL;
            exception_lineno = 0;

            Py_XDECREF( tmp_tuple_unpack_5__element_1 );
            tmp_tuple_unpack_5__element_1 = NULL;

            Py_XDECREF( tmp_tuple_unpack_5__element_2 );
            tmp_tuple_unpack_5__element_2 = NULL;

            // Re-raise.
            exception_type = exception_keeper_type_14;
            exception_value = exception_keeper_value_14;
            exception_tb = exception_keeper_tb_14;
            exception_lineno = exception_keeper_lineno_14;

            goto try_except_handler_12;
            // End of try:
            try_end_14:;
            CHECK_OBJECT( (PyObject *)tmp_tuple_unpack_5__source_iter );
            Py_DECREF( tmp_tuple_unpack_5__source_iter );
            tmp_tuple_unpack_5__source_iter = NULL;

            {
                PyObject *tmp_assign_source_68;
                CHECK_OBJECT( tmp_tuple_unpack_5__element_1 );
                tmp_assign_source_68 = tmp_tuple_unpack_5__element_1;
                assert( var_csid == NULL );
                Py_INCREF( tmp_assign_source_68 );
                var_csid = tmp_assign_source_68;
            }
            Py_XDECREF( tmp_tuple_unpack_5__element_1 );
            tmp_tuple_unpack_5__element_1 = NULL;

            {
                PyObject *tmp_assign_source_69;
                CHECK_OBJECT( tmp_tuple_unpack_5__element_2 );
                tmp_assign_source_69 = tmp_tuple_unpack_5__element_2;
                assert( var_cpu_number == NULL );
                Py_INCREF( tmp_assign_source_69 );
                var_cpu_number = tmp_assign_source_69;
            }
            Py_XDECREF( tmp_tuple_unpack_5__element_2 );
            tmp_tuple_unpack_5__element_2 = NULL;

            {
                nuitka_bool tmp_condition_result_22;
                PyObject *tmp_compexpr_left_16;
                PyObject *tmp_compexpr_right_16;
                CHECK_OBJECT( var_cpu_number );
                tmp_compexpr_left_16 = var_cpu_number;
                tmp_compexpr_right_16 = const_int_pos_128;
                tmp_res = RICH_COMPARE_BOOL_GTE_OBJECT_OBJECT( tmp_compexpr_left_16, tmp_compexpr_right_16 );
                if ( tmp_res == -1 )
                {
                    assert( ERROR_OCCURRED() );

                    FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                    exception_lineno = 1028;
                    type_description_1 = "oooooooooooooooo";
                    goto try_except_handler_12;
                }
                tmp_condition_result_22 = ( tmp_res != 0 ) ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
                if ( tmp_condition_result_22 == NUITKA_BOOL_TRUE )
                {
                    goto branch_yes_22;
                }
                else
                {
                    goto branch_no_22;
                }
                branch_yes_22:;
                {
                    PyObject *tmp_assign_source_70;
                    tmp_assign_source_70 = const_str_plain_Alpha;
                    {
                        PyObject *old = var_processor;
                        var_processor = tmp_assign_source_70;
                        Py_INCREF( var_processor );
                        Py_XDECREF( old );
                    }

                }
                goto branch_end_22;
                branch_no_22:;
                {
                    PyObject *tmp_assign_source_71;
                    tmp_assign_source_71 = const_str_plain_VAX;
                    {
                        PyObject *old = var_processor;
                        var_processor = tmp_assign_source_71;
                        Py_INCREF( var_processor );
                        Py_XDECREF( old );
                    }

                }
                branch_end_22:;
            }
            branch_no_21:;
        }
        goto try_end_15;
        // Exception handler code:
        try_except_handler_12:;
        exception_keeper_type_15 = exception_type;
        exception_keeper_value_15 = exception_value;
        exception_keeper_tb_15 = exception_tb;
        exception_keeper_lineno_15 = exception_lineno;
        exception_type = NULL;
        exception_value = NULL;
        exception_tb = NULL;
        exception_lineno = 0;

        // Re-raise.
        exception_type = exception_keeper_type_15;
        exception_value = exception_keeper_value_15;
        exception_tb = exception_keeper_tb_15;
        exception_lineno = exception_keeper_lineno_15;

        goto frame_exception_exit_1;
        // End of try:
        try_end_15:;
        branch_no_18:;
    }
    {
        nuitka_bool tmp_condition_result_23;
        PyObject *tmp_operand_name_7;
        if ( var_processor == NULL )
        {

            exception_type = PyExc_UnboundLocalError;
            Py_INCREF( exception_type );
            exception_value = PyUnicode_FromFormat( "local variable '%s' referenced before assignment", "processor" );
            exception_tb = NULL;
            NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
            CHAIN_EXCEPTION( exception_value );

            exception_lineno = 1032;
            type_description_1 = "oooooooooooooooo";
            goto frame_exception_exit_1;
        }

        tmp_operand_name_7 = var_processor;
        tmp_res = CHECK_IF_TRUE( tmp_operand_name_7 );
        if ( tmp_res == -1 )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 1032;
            type_description_1 = "oooooooooooooooo";
            goto frame_exception_exit_1;
        }
        tmp_condition_result_23 = ( tmp_res == 0 ) ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
        if ( tmp_condition_result_23 == NUITKA_BOOL_TRUE )
        {
            goto branch_yes_23;
        }
        else
        {
            goto branch_no_23;
        }
        branch_yes_23:;
        {
            PyObject *tmp_assign_source_72;
            PyObject *tmp_called_name_7;
            PyObject *tmp_mvar_value_13;
            tmp_mvar_value_13 = GET_STRING_DICT_VALUE( moduledict_platform, (Nuitka_StringObject *)const_str_plain__syscmd_uname );

            if (unlikely( tmp_mvar_value_13 == NULL ))
            {
                tmp_mvar_value_13 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain__syscmd_uname );
            }

            if ( tmp_mvar_value_13 == NULL )
            {

                exception_type = PyExc_NameError;
                Py_INCREF( exception_type );
                exception_value = PyUnicode_FromFormat( "name '%s' is not defined", "_syscmd_uname" );
                exception_tb = NULL;
                NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
                CHAIN_EXCEPTION( exception_value );

                exception_lineno = 1034;
                type_description_1 = "oooooooooooooooo";
                goto frame_exception_exit_1;
            }

            tmp_called_name_7 = tmp_mvar_value_13;
            frame_78e45736f492b0dece9b673c7115a31c->m_frame.f_lineno = 1034;
            tmp_assign_source_72 = CALL_FUNCTION_WITH_ARGS2( tmp_called_name_7, &PyTuple_GET_ITEM( const_tuple_str_digest_068eb885e4aaedf6bb189a0c4eb85723_str_empty_tuple, 0 ) );

            if ( tmp_assign_source_72 == NULL )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 1034;
                type_description_1 = "oooooooooooooooo";
                goto frame_exception_exit_1;
            }
            {
                PyObject *old = var_processor;
                var_processor = tmp_assign_source_72;
                Py_XDECREF( old );
            }

        }
        branch_no_23:;
    }
    {
        nuitka_bool tmp_condition_result_24;
        PyObject *tmp_compexpr_left_17;
        PyObject *tmp_compexpr_right_17;
        if ( var_system == NULL )
        {

            exception_type = PyExc_UnboundLocalError;
            Py_INCREF( exception_type );
            exception_value = PyUnicode_FromFormat( "local variable '%s' referenced before assignment", "system" );
            exception_tb = NULL;
            NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
            CHAIN_EXCEPTION( exception_value );

            exception_lineno = 1037;
            type_description_1 = "oooooooooooooooo";
            goto frame_exception_exit_1;
        }

        tmp_compexpr_left_17 = var_system;
        tmp_compexpr_right_17 = const_str_plain_unknown;
        tmp_res = RICH_COMPARE_BOOL_EQ_OBJECT_OBJECT( tmp_compexpr_left_17, tmp_compexpr_right_17 );
        if ( tmp_res == -1 )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 1037;
            type_description_1 = "oooooooooooooooo";
            goto frame_exception_exit_1;
        }
        tmp_condition_result_24 = ( tmp_res != 0 ) ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
        if ( tmp_condition_result_24 == NUITKA_BOOL_TRUE )
        {
            goto branch_yes_24;
        }
        else
        {
            goto branch_no_24;
        }
        branch_yes_24:;
        {
            PyObject *tmp_assign_source_73;
            tmp_assign_source_73 = const_str_empty;
            {
                PyObject *old = var_system;
                var_system = tmp_assign_source_73;
                Py_INCREF( var_system );
                Py_XDECREF( old );
            }

        }
        branch_no_24:;
    }
    {
        nuitka_bool tmp_condition_result_25;
        PyObject *tmp_compexpr_left_18;
        PyObject *tmp_compexpr_right_18;
        if ( var_node == NULL )
        {

            exception_type = PyExc_UnboundLocalError;
            Py_INCREF( exception_type );
            exception_value = PyUnicode_FromFormat( "local variable '%s' referenced before assignment", "node" );
            exception_tb = NULL;
            NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
            CHAIN_EXCEPTION( exception_value );

            exception_lineno = 1039;
            type_description_1 = "oooooooooooooooo";
            goto frame_exception_exit_1;
        }

        tmp_compexpr_left_18 = var_node;
        tmp_compexpr_right_18 = const_str_plain_unknown;
        tmp_res = RICH_COMPARE_BOOL_EQ_OBJECT_OBJECT( tmp_compexpr_left_18, tmp_compexpr_right_18 );
        if ( tmp_res == -1 )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 1039;
            type_description_1 = "oooooooooooooooo";
            goto frame_exception_exit_1;
        }
        tmp_condition_result_25 = ( tmp_res != 0 ) ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
        if ( tmp_condition_result_25 == NUITKA_BOOL_TRUE )
        {
            goto branch_yes_25;
        }
        else
        {
            goto branch_no_25;
        }
        branch_yes_25:;
        {
            PyObject *tmp_assign_source_74;
            tmp_assign_source_74 = const_str_empty;
            {
                PyObject *old = var_node;
                var_node = tmp_assign_source_74;
                Py_INCREF( var_node );
                Py_XDECREF( old );
            }

        }
        branch_no_25:;
    }
    {
        nuitka_bool tmp_condition_result_26;
        PyObject *tmp_compexpr_left_19;
        PyObject *tmp_compexpr_right_19;
        if ( var_release == NULL )
        {

            exception_type = PyExc_UnboundLocalError;
            Py_INCREF( exception_type );
            exception_value = PyUnicode_FromFormat( "local variable '%s' referenced before assignment", "release" );
            exception_tb = NULL;
            NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
            CHAIN_EXCEPTION( exception_value );

            exception_lineno = 1041;
            type_description_1 = "oooooooooooooooo";
            goto frame_exception_exit_1;
        }

        tmp_compexpr_left_19 = var_release;
        tmp_compexpr_right_19 = const_str_plain_unknown;
        tmp_res = RICH_COMPARE_BOOL_EQ_OBJECT_OBJECT( tmp_compexpr_left_19, tmp_compexpr_right_19 );
        if ( tmp_res == -1 )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 1041;
            type_description_1 = "oooooooooooooooo";
            goto frame_exception_exit_1;
        }
        tmp_condition_result_26 = ( tmp_res != 0 ) ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
        if ( tmp_condition_result_26 == NUITKA_BOOL_TRUE )
        {
            goto branch_yes_26;
        }
        else
        {
            goto branch_no_26;
        }
        branch_yes_26:;
        {
            PyObject *tmp_assign_source_75;
            tmp_assign_source_75 = const_str_empty;
            {
                PyObject *old = var_release;
                var_release = tmp_assign_source_75;
                Py_INCREF( var_release );
                Py_XDECREF( old );
            }

        }
        branch_no_26:;
    }
    {
        nuitka_bool tmp_condition_result_27;
        PyObject *tmp_compexpr_left_20;
        PyObject *tmp_compexpr_right_20;
        if ( var_version == NULL )
        {

            exception_type = PyExc_UnboundLocalError;
            Py_INCREF( exception_type );
            exception_value = PyUnicode_FromFormat( "local variable '%s' referenced before assignment", "version" );
            exception_tb = NULL;
            NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
            CHAIN_EXCEPTION( exception_value );

            exception_lineno = 1043;
            type_description_1 = "oooooooooooooooo";
            goto frame_exception_exit_1;
        }

        tmp_compexpr_left_20 = var_version;
        tmp_compexpr_right_20 = const_str_plain_unknown;
        tmp_res = RICH_COMPARE_BOOL_EQ_OBJECT_OBJECT( tmp_compexpr_left_20, tmp_compexpr_right_20 );
        if ( tmp_res == -1 )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 1043;
            type_description_1 = "oooooooooooooooo";
            goto frame_exception_exit_1;
        }
        tmp_condition_result_27 = ( tmp_res != 0 ) ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
        if ( tmp_condition_result_27 == NUITKA_BOOL_TRUE )
        {
            goto branch_yes_27;
        }
        else
        {
            goto branch_no_27;
        }
        branch_yes_27:;
        {
            PyObject *tmp_assign_source_76;
            tmp_assign_source_76 = const_str_empty;
            {
                PyObject *old = var_version;
                var_version = tmp_assign_source_76;
                Py_INCREF( var_version );
                Py_XDECREF( old );
            }

        }
        branch_no_27:;
    }
    {
        nuitka_bool tmp_condition_result_28;
        PyObject *tmp_compexpr_left_21;
        PyObject *tmp_compexpr_right_21;
        if ( var_machine == NULL )
        {

            exception_type = PyExc_UnboundLocalError;
            Py_INCREF( exception_type );
            exception_value = PyUnicode_FromFormat( "local variable '%s' referenced before assignment", "machine" );
            exception_tb = NULL;
            NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
            CHAIN_EXCEPTION( exception_value );

            exception_lineno = 1045;
            type_description_1 = "oooooooooooooooo";
            goto frame_exception_exit_1;
        }

        tmp_compexpr_left_21 = var_machine;
        tmp_compexpr_right_21 = const_str_plain_unknown;
        tmp_res = RICH_COMPARE_BOOL_EQ_OBJECT_OBJECT( tmp_compexpr_left_21, tmp_compexpr_right_21 );
        if ( tmp_res == -1 )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 1045;
            type_description_1 = "oooooooooooooooo";
            goto frame_exception_exit_1;
        }
        tmp_condition_result_28 = ( tmp_res != 0 ) ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
        if ( tmp_condition_result_28 == NUITKA_BOOL_TRUE )
        {
            goto branch_yes_28;
        }
        else
        {
            goto branch_no_28;
        }
        branch_yes_28:;
        {
            PyObject *tmp_assign_source_77;
            tmp_assign_source_77 = const_str_empty;
            {
                PyObject *old = var_machine;
                var_machine = tmp_assign_source_77;
                Py_INCREF( var_machine );
                Py_XDECREF( old );
            }

        }
        branch_no_28:;
    }
    {
        nuitka_bool tmp_condition_result_29;
        PyObject *tmp_compexpr_left_22;
        PyObject *tmp_compexpr_right_22;
        if ( var_processor == NULL )
        {

            exception_type = PyExc_UnboundLocalError;
            Py_INCREF( exception_type );
            exception_value = PyUnicode_FromFormat( "local variable '%s' referenced before assignment", "processor" );
            exception_tb = NULL;
            NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
            CHAIN_EXCEPTION( exception_value );

            exception_lineno = 1047;
            type_description_1 = "oooooooooooooooo";
            goto frame_exception_exit_1;
        }

        tmp_compexpr_left_22 = var_processor;
        tmp_compexpr_right_22 = const_str_plain_unknown;
        tmp_res = RICH_COMPARE_BOOL_EQ_OBJECT_OBJECT( tmp_compexpr_left_22, tmp_compexpr_right_22 );
        if ( tmp_res == -1 )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 1047;
            type_description_1 = "oooooooooooooooo";
            goto frame_exception_exit_1;
        }
        tmp_condition_result_29 = ( tmp_res != 0 ) ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
        if ( tmp_condition_result_29 == NUITKA_BOOL_TRUE )
        {
            goto branch_yes_29;
        }
        else
        {
            goto branch_no_29;
        }
        branch_yes_29:;
        {
            PyObject *tmp_assign_source_78;
            tmp_assign_source_78 = const_str_empty;
            {
                PyObject *old = var_processor;
                var_processor = tmp_assign_source_78;
                Py_INCREF( var_processor );
                Py_XDECREF( old );
            }

        }
        branch_no_29:;
    }
    {
        nuitka_bool tmp_condition_result_30;
        int tmp_and_left_truth_3;
        nuitka_bool tmp_and_left_value_3;
        nuitka_bool tmp_and_right_value_3;
        PyObject *tmp_compexpr_left_23;
        PyObject *tmp_compexpr_right_23;
        PyObject *tmp_compexpr_left_24;
        PyObject *tmp_compexpr_right_24;
        if ( var_system == NULL )
        {

            exception_type = PyExc_UnboundLocalError;
            Py_INCREF( exception_type );
            exception_value = PyUnicode_FromFormat( "local variable '%s' referenced before assignment", "system" );
            exception_tb = NULL;
            NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
            CHAIN_EXCEPTION( exception_value );

            exception_lineno = 1051;
            type_description_1 = "oooooooooooooooo";
            goto frame_exception_exit_1;
        }

        tmp_compexpr_left_23 = var_system;
        tmp_compexpr_right_23 = const_str_plain_Microsoft;
        tmp_res = RICH_COMPARE_BOOL_EQ_OBJECT_OBJECT( tmp_compexpr_left_23, tmp_compexpr_right_23 );
        if ( tmp_res == -1 )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 1051;
            type_description_1 = "oooooooooooooooo";
            goto frame_exception_exit_1;
        }
        tmp_and_left_value_3 = ( tmp_res != 0 ) ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
        tmp_and_left_truth_3 = tmp_and_left_value_3 == NUITKA_BOOL_TRUE ? 1 : 0;
        if ( tmp_and_left_truth_3 == 1 )
        {
            goto and_right_3;
        }
        else
        {
            goto and_left_3;
        }
        and_right_3:;
        if ( var_release == NULL )
        {

            exception_type = PyExc_UnboundLocalError;
            Py_INCREF( exception_type );
            exception_value = PyUnicode_FromFormat( "local variable '%s' referenced before assignment", "release" );
            exception_tb = NULL;
            NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
            CHAIN_EXCEPTION( exception_value );

            exception_lineno = 1051;
            type_description_1 = "oooooooooooooooo";
            goto frame_exception_exit_1;
        }

        tmp_compexpr_left_24 = var_release;
        tmp_compexpr_right_24 = const_str_plain_Windows;
        tmp_res = RICH_COMPARE_BOOL_EQ_OBJECT_OBJECT( tmp_compexpr_left_24, tmp_compexpr_right_24 );
        if ( tmp_res == -1 )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 1051;
            type_description_1 = "oooooooooooooooo";
            goto frame_exception_exit_1;
        }
        tmp_and_right_value_3 = ( tmp_res != 0 ) ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
        tmp_condition_result_30 = tmp_and_right_value_3;
        goto and_end_3;
        and_left_3:;
        tmp_condition_result_30 = tmp_and_left_value_3;
        and_end_3:;
        if ( tmp_condition_result_30 == NUITKA_BOOL_TRUE )
        {
            goto branch_yes_30;
        }
        else
        {
            goto branch_no_30;
        }
        branch_yes_30:;
        {
            PyObject *tmp_assign_source_79;
            tmp_assign_source_79 = const_str_plain_Windows;
            {
                PyObject *old = var_system;
                var_system = tmp_assign_source_79;
                Py_INCREF( var_system );
                Py_XDECREF( old );
            }

        }
        {
            PyObject *tmp_assign_source_80;
            tmp_assign_source_80 = const_str_plain_Vista;
            {
                PyObject *old = var_release;
                var_release = tmp_assign_source_80;
                Py_INCREF( var_release );
                Py_XDECREF( old );
            }

        }
        branch_no_30:;
    }
    {
        PyObject *tmp_assign_source_81;
        PyObject *tmp_called_name_8;
        PyObject *tmp_mvar_value_14;
        PyObject *tmp_args_element_name_7;
        PyObject *tmp_args_element_name_8;
        PyObject *tmp_args_element_name_9;
        PyObject *tmp_args_element_name_10;
        PyObject *tmp_args_element_name_11;
        PyObject *tmp_args_element_name_12;
        tmp_mvar_value_14 = GET_STRING_DICT_VALUE( moduledict_platform, (Nuitka_StringObject *)const_str_plain_uname_result );

        if (unlikely( tmp_mvar_value_14 == NULL ))
        {
            tmp_mvar_value_14 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_uname_result );
        }

        if ( tmp_mvar_value_14 == NULL )
        {

            exception_type = PyExc_NameError;
            Py_INCREF( exception_type );
            exception_value = PyUnicode_FromFormat( "name '%s' is not defined", "uname_result" );
            exception_tb = NULL;
            NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
            CHAIN_EXCEPTION( exception_value );

            exception_lineno = 1055;
            type_description_1 = "oooooooooooooooo";
            goto frame_exception_exit_1;
        }

        tmp_called_name_8 = tmp_mvar_value_14;
        if ( var_system == NULL )
        {

            exception_type = PyExc_UnboundLocalError;
            Py_INCREF( exception_type );
            exception_value = PyUnicode_FromFormat( "local variable '%s' referenced before assignment", "system" );
            exception_tb = NULL;
            NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
            CHAIN_EXCEPTION( exception_value );

            exception_lineno = 1055;
            type_description_1 = "oooooooooooooooo";
            goto frame_exception_exit_1;
        }

        tmp_args_element_name_7 = var_system;
        if ( var_node == NULL )
        {

            exception_type = PyExc_UnboundLocalError;
            Py_INCREF( exception_type );
            exception_value = PyUnicode_FromFormat( "local variable '%s' referenced before assignment", "node" );
            exception_tb = NULL;
            NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
            CHAIN_EXCEPTION( exception_value );

            exception_lineno = 1055;
            type_description_1 = "oooooooooooooooo";
            goto frame_exception_exit_1;
        }

        tmp_args_element_name_8 = var_node;
        if ( var_release == NULL )
        {

            exception_type = PyExc_UnboundLocalError;
            Py_INCREF( exception_type );
            exception_value = PyUnicode_FromFormat( "local variable '%s' referenced before assignment", "release" );
            exception_tb = NULL;
            NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
            CHAIN_EXCEPTION( exception_value );

            exception_lineno = 1055;
            type_description_1 = "oooooooooooooooo";
            goto frame_exception_exit_1;
        }

        tmp_args_element_name_9 = var_release;
        if ( var_version == NULL )
        {

            exception_type = PyExc_UnboundLocalError;
            Py_INCREF( exception_type );
            exception_value = PyUnicode_FromFormat( "local variable '%s' referenced before assignment", "version" );
            exception_tb = NULL;
            NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
            CHAIN_EXCEPTION( exception_value );

            exception_lineno = 1055;
            type_description_1 = "oooooooooooooooo";
            goto frame_exception_exit_1;
        }

        tmp_args_element_name_10 = var_version;
        if ( var_machine == NULL )
        {

            exception_type = PyExc_UnboundLocalError;
            Py_INCREF( exception_type );
            exception_value = PyUnicode_FromFormat( "local variable '%s' referenced before assignment", "machine" );
            exception_tb = NULL;
            NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
            CHAIN_EXCEPTION( exception_value );

            exception_lineno = 1056;
            type_description_1 = "oooooooooooooooo";
            goto frame_exception_exit_1;
        }

        tmp_args_element_name_11 = var_machine;
        if ( var_processor == NULL )
        {

            exception_type = PyExc_UnboundLocalError;
            Py_INCREF( exception_type );
            exception_value = PyUnicode_FromFormat( "local variable '%s' referenced before assignment", "processor" );
            exception_tb = NULL;
            NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
            CHAIN_EXCEPTION( exception_value );

            exception_lineno = 1056;
            type_description_1 = "oooooooooooooooo";
            goto frame_exception_exit_1;
        }

        tmp_args_element_name_12 = var_processor;
        frame_78e45736f492b0dece9b673c7115a31c->m_frame.f_lineno = 1055;
        {
            PyObject *call_args[] = { tmp_args_element_name_7, tmp_args_element_name_8, tmp_args_element_name_9, tmp_args_element_name_10, tmp_args_element_name_11, tmp_args_element_name_12 };
            tmp_assign_source_81 = CALL_FUNCTION_WITH_ARGS6( tmp_called_name_8, call_args );
        }

        if ( tmp_assign_source_81 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 1055;
            type_description_1 = "oooooooooooooooo";
            goto frame_exception_exit_1;
        }
        UPDATE_STRING_DICT1( moduledict_platform, (Nuitka_StringObject *)const_str_plain__uname_cache, tmp_assign_source_81 );
    }

#if 0
    RESTORE_FRAME_EXCEPTION( frame_78e45736f492b0dece9b673c7115a31c );
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto frame_no_exception_1;

    frame_return_exit_1:;
#if 0
    RESTORE_FRAME_EXCEPTION( frame_78e45736f492b0dece9b673c7115a31c );
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto try_return_handler_1;

    frame_exception_exit_1:;

#if 0
    RESTORE_FRAME_EXCEPTION( frame_78e45736f492b0dece9b673c7115a31c );
#endif

    if ( exception_tb == NULL )
    {
        exception_tb = MAKE_TRACEBACK( frame_78e45736f492b0dece9b673c7115a31c, exception_lineno );
    }
    else if ( exception_tb->tb_frame != &frame_78e45736f492b0dece9b673c7115a31c->m_frame )
    {
        exception_tb = ADD_TRACEBACK( exception_tb, frame_78e45736f492b0dece9b673c7115a31c, exception_lineno );
    }

    // Attachs locals to frame if any.
    Nuitka_Frame_AttachLocals(
        (struct Nuitka_FrameObject *)frame_78e45736f492b0dece9b673c7115a31c,
        type_description_1,
        var_no_os_uname,
        var_processor,
        var_system,
        var_node,
        var_release,
        var_version,
        var_machine,
        var_use_syscmd_ver,
        var_csd,
        var_ptype,
        var_vendor,
        var_vminfo,
        var_osinfo,
        var_vms_lib,
        var_csid,
        var_cpu_number
    );


    // Release cached frame.
    if ( frame_78e45736f492b0dece9b673c7115a31c == cache_frame_78e45736f492b0dece9b673c7115a31c )
    {
        Py_DECREF( frame_78e45736f492b0dece9b673c7115a31c );
    }
    cache_frame_78e45736f492b0dece9b673c7115a31c = NULL;

    assertFrameObject( frame_78e45736f492b0dece9b673c7115a31c );

    // Put the previous frame back on top.
    popFrameStack();

    // Return the error.
    goto try_except_handler_1;

    frame_no_exception_1:;
    {
        PyObject *tmp_mvar_value_15;
        tmp_mvar_value_15 = GET_STRING_DICT_VALUE( moduledict_platform, (Nuitka_StringObject *)const_str_plain__uname_cache );

        if (unlikely( tmp_mvar_value_15 == NULL ))
        {
            tmp_mvar_value_15 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain__uname_cache );
        }

        CHECK_OBJECT( tmp_mvar_value_15 );
        tmp_return_value = tmp_mvar_value_15;
        Py_INCREF( tmp_return_value );
        goto try_return_handler_1;
    }
    // tried codes exits in all cases
    NUITKA_CANNOT_GET_HERE( platform$$$function_23_uname );
    return NULL;
    // Return handler code:
    try_return_handler_1:;
    Py_XDECREF( var_no_os_uname );
    var_no_os_uname = NULL;

    Py_XDECREF( var_processor );
    var_processor = NULL;

    Py_XDECREF( var_system );
    var_system = NULL;

    Py_XDECREF( var_node );
    var_node = NULL;

    Py_XDECREF( var_release );
    var_release = NULL;

    Py_XDECREF( var_version );
    var_version = NULL;

    Py_XDECREF( var_machine );
    var_machine = NULL;

    Py_XDECREF( var_use_syscmd_ver );
    var_use_syscmd_ver = NULL;

    Py_XDECREF( var_csd );
    var_csd = NULL;

    Py_XDECREF( var_ptype );
    var_ptype = NULL;

    Py_XDECREF( var_vendor );
    var_vendor = NULL;

    Py_XDECREF( var_vminfo );
    var_vminfo = NULL;

    Py_XDECREF( var_osinfo );
    var_osinfo = NULL;

    Py_XDECREF( var_vms_lib );
    var_vms_lib = NULL;

    Py_XDECREF( var_csid );
    var_csid = NULL;

    Py_XDECREF( var_cpu_number );
    var_cpu_number = NULL;

    goto function_return_exit;
    // Exception handler code:
    try_except_handler_1:;
    exception_keeper_type_16 = exception_type;
    exception_keeper_value_16 = exception_value;
    exception_keeper_tb_16 = exception_tb;
    exception_keeper_lineno_16 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    Py_XDECREF( var_no_os_uname );
    var_no_os_uname = NULL;

    Py_XDECREF( var_processor );
    var_processor = NULL;

    Py_XDECREF( var_system );
    var_system = NULL;

    Py_XDECREF( var_node );
    var_node = NULL;

    Py_XDECREF( var_release );
    var_release = NULL;

    Py_XDECREF( var_version );
    var_version = NULL;

    Py_XDECREF( var_machine );
    var_machine = NULL;

    Py_XDECREF( var_use_syscmd_ver );
    var_use_syscmd_ver = NULL;

    Py_XDECREF( var_csd );
    var_csd = NULL;

    Py_XDECREF( var_ptype );
    var_ptype = NULL;

    Py_XDECREF( var_vendor );
    var_vendor = NULL;

    Py_XDECREF( var_vminfo );
    var_vminfo = NULL;

    Py_XDECREF( var_osinfo );
    var_osinfo = NULL;

    Py_XDECREF( var_vms_lib );
    var_vms_lib = NULL;

    Py_XDECREF( var_csid );
    var_csid = NULL;

    Py_XDECREF( var_cpu_number );
    var_cpu_number = NULL;

    // Re-raise.
    exception_type = exception_keeper_type_16;
    exception_value = exception_keeper_value_16;
    exception_tb = exception_keeper_tb_16;
    exception_lineno = exception_keeper_lineno_16;

    goto function_exception_exit;
    // End of try:

    // Return statement must have exited already.
    NUITKA_CANNOT_GET_HERE( platform$$$function_23_uname );
    return NULL;

function_exception_exit:
    assert( exception_type );
    RESTORE_ERROR_OCCURRED( exception_type, exception_value, exception_tb );

    return NULL;

function_return_exit:
   // Function cleanup code if any.


   // Actual function exit with return value, making sure we did not make
   // the error status worse despite non-NULL return.
   CHECK_OBJECT( tmp_return_value );
   assert( had_error || !ERROR_OCCURRED() );
   return tmp_return_value;
}


static PyObject *impl_platform$$$function_24_system( struct Nuitka_FunctionObject const *self, PyObject **python_pars )
{
    // Preserve error status for checks
#ifndef __NUITKA_NO_ASSERT__
    NUITKA_MAY_BE_UNUSED bool had_error = ERROR_OCCURRED();
#endif

    // Local variable declarations.
    struct Nuitka_FrameObject *frame_3ffae5f34b5209fffec9ea9d7d8c2600;
    NUITKA_MAY_BE_UNUSED char const *type_description_1 = NULL;
    PyObject *tmp_return_value = NULL;
    PyObject *exception_type = NULL;
    PyObject *exception_value = NULL;
    PyTracebackObject *exception_tb = NULL;
    NUITKA_MAY_BE_UNUSED int exception_lineno = 0;
    static struct Nuitka_FrameObject *cache_frame_3ffae5f34b5209fffec9ea9d7d8c2600 = NULL;

    // Actual function body.
    MAKE_OR_REUSE_FRAME( cache_frame_3ffae5f34b5209fffec9ea9d7d8c2600, codeobj_3ffae5f34b5209fffec9ea9d7d8c2600, module_platform, 0 );
    frame_3ffae5f34b5209fffec9ea9d7d8c2600 = cache_frame_3ffae5f34b5209fffec9ea9d7d8c2600;

    // Push the new frame as the currently active one.
    pushFrameStack( frame_3ffae5f34b5209fffec9ea9d7d8c2600 );

    // Mark the frame object as in use, ref count 1 will be up for reuse.
    assert( Py_REFCNT( frame_3ffae5f34b5209fffec9ea9d7d8c2600 ) == 2 ); // Frame stack

    // Framed code:
    {
        PyObject *tmp_source_name_1;
        PyObject *tmp_called_name_1;
        PyObject *tmp_mvar_value_1;
        tmp_mvar_value_1 = GET_STRING_DICT_VALUE( moduledict_platform, (Nuitka_StringObject *)const_str_plain_uname );

        if (unlikely( tmp_mvar_value_1 == NULL ))
        {
            tmp_mvar_value_1 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_uname );
        }

        if ( tmp_mvar_value_1 == NULL )
        {

            exception_type = PyExc_NameError;
            Py_INCREF( exception_type );
            exception_value = PyUnicode_FromFormat( "name '%s' is not defined", "uname" );
            exception_tb = NULL;
            NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
            CHAIN_EXCEPTION( exception_value );

            exception_lineno = 1068;

            goto frame_exception_exit_1;
        }

        tmp_called_name_1 = tmp_mvar_value_1;
        frame_3ffae5f34b5209fffec9ea9d7d8c2600->m_frame.f_lineno = 1068;
        tmp_source_name_1 = CALL_FUNCTION_NO_ARGS( tmp_called_name_1 );
        if ( tmp_source_name_1 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 1068;

            goto frame_exception_exit_1;
        }
        tmp_return_value = LOOKUP_ATTRIBUTE( tmp_source_name_1, const_str_plain_system );
        Py_DECREF( tmp_source_name_1 );
        if ( tmp_return_value == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 1068;

            goto frame_exception_exit_1;
        }
        goto frame_return_exit_1;
    }

#if 0
    RESTORE_FRAME_EXCEPTION( frame_3ffae5f34b5209fffec9ea9d7d8c2600 );
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto frame_no_exception_1;

    frame_return_exit_1:;
#if 0
    RESTORE_FRAME_EXCEPTION( frame_3ffae5f34b5209fffec9ea9d7d8c2600 );
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto function_return_exit;

    frame_exception_exit_1:;

#if 0
    RESTORE_FRAME_EXCEPTION( frame_3ffae5f34b5209fffec9ea9d7d8c2600 );
#endif

    if ( exception_tb == NULL )
    {
        exception_tb = MAKE_TRACEBACK( frame_3ffae5f34b5209fffec9ea9d7d8c2600, exception_lineno );
    }
    else if ( exception_tb->tb_frame != &frame_3ffae5f34b5209fffec9ea9d7d8c2600->m_frame )
    {
        exception_tb = ADD_TRACEBACK( exception_tb, frame_3ffae5f34b5209fffec9ea9d7d8c2600, exception_lineno );
    }

    // Attachs locals to frame if any.
    Nuitka_Frame_AttachLocals(
        (struct Nuitka_FrameObject *)frame_3ffae5f34b5209fffec9ea9d7d8c2600,
        type_description_1
    );


    // Release cached frame.
    if ( frame_3ffae5f34b5209fffec9ea9d7d8c2600 == cache_frame_3ffae5f34b5209fffec9ea9d7d8c2600 )
    {
        Py_DECREF( frame_3ffae5f34b5209fffec9ea9d7d8c2600 );
    }
    cache_frame_3ffae5f34b5209fffec9ea9d7d8c2600 = NULL;

    assertFrameObject( frame_3ffae5f34b5209fffec9ea9d7d8c2600 );

    // Put the previous frame back on top.
    popFrameStack();

    // Return the error.
    goto function_exception_exit;

    frame_no_exception_1:;

    // Return statement must have exited already.
    NUITKA_CANNOT_GET_HERE( platform$$$function_24_system );
    return NULL;

function_exception_exit:
    assert( exception_type );
    RESTORE_ERROR_OCCURRED( exception_type, exception_value, exception_tb );

    return NULL;

function_return_exit:
   // Function cleanup code if any.


   // Actual function exit with return value, making sure we did not make
   // the error status worse despite non-NULL return.
   CHECK_OBJECT( tmp_return_value );
   assert( had_error || !ERROR_OCCURRED() );
   return tmp_return_value;
}


static PyObject *impl_platform$$$function_25_node( struct Nuitka_FunctionObject const *self, PyObject **python_pars )
{
    // Preserve error status for checks
#ifndef __NUITKA_NO_ASSERT__
    NUITKA_MAY_BE_UNUSED bool had_error = ERROR_OCCURRED();
#endif

    // Local variable declarations.
    struct Nuitka_FrameObject *frame_120c7317512780504150c56bbaf527fd;
    NUITKA_MAY_BE_UNUSED char const *type_description_1 = NULL;
    PyObject *tmp_return_value = NULL;
    PyObject *exception_type = NULL;
    PyObject *exception_value = NULL;
    PyTracebackObject *exception_tb = NULL;
    NUITKA_MAY_BE_UNUSED int exception_lineno = 0;
    static struct Nuitka_FrameObject *cache_frame_120c7317512780504150c56bbaf527fd = NULL;

    // Actual function body.
    MAKE_OR_REUSE_FRAME( cache_frame_120c7317512780504150c56bbaf527fd, codeobj_120c7317512780504150c56bbaf527fd, module_platform, 0 );
    frame_120c7317512780504150c56bbaf527fd = cache_frame_120c7317512780504150c56bbaf527fd;

    // Push the new frame as the currently active one.
    pushFrameStack( frame_120c7317512780504150c56bbaf527fd );

    // Mark the frame object as in use, ref count 1 will be up for reuse.
    assert( Py_REFCNT( frame_120c7317512780504150c56bbaf527fd ) == 2 ); // Frame stack

    // Framed code:
    {
        PyObject *tmp_source_name_1;
        PyObject *tmp_called_name_1;
        PyObject *tmp_mvar_value_1;
        tmp_mvar_value_1 = GET_STRING_DICT_VALUE( moduledict_platform, (Nuitka_StringObject *)const_str_plain_uname );

        if (unlikely( tmp_mvar_value_1 == NULL ))
        {
            tmp_mvar_value_1 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_uname );
        }

        if ( tmp_mvar_value_1 == NULL )
        {

            exception_type = PyExc_NameError;
            Py_INCREF( exception_type );
            exception_value = PyUnicode_FromFormat( "name '%s' is not defined", "uname" );
            exception_tb = NULL;
            NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
            CHAIN_EXCEPTION( exception_value );

            exception_lineno = 1078;

            goto frame_exception_exit_1;
        }

        tmp_called_name_1 = tmp_mvar_value_1;
        frame_120c7317512780504150c56bbaf527fd->m_frame.f_lineno = 1078;
        tmp_source_name_1 = CALL_FUNCTION_NO_ARGS( tmp_called_name_1 );
        if ( tmp_source_name_1 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 1078;

            goto frame_exception_exit_1;
        }
        tmp_return_value = LOOKUP_ATTRIBUTE( tmp_source_name_1, const_str_plain_node );
        Py_DECREF( tmp_source_name_1 );
        if ( tmp_return_value == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 1078;

            goto frame_exception_exit_1;
        }
        goto frame_return_exit_1;
    }

#if 0
    RESTORE_FRAME_EXCEPTION( frame_120c7317512780504150c56bbaf527fd );
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto frame_no_exception_1;

    frame_return_exit_1:;
#if 0
    RESTORE_FRAME_EXCEPTION( frame_120c7317512780504150c56bbaf527fd );
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto function_return_exit;

    frame_exception_exit_1:;

#if 0
    RESTORE_FRAME_EXCEPTION( frame_120c7317512780504150c56bbaf527fd );
#endif

    if ( exception_tb == NULL )
    {
        exception_tb = MAKE_TRACEBACK( frame_120c7317512780504150c56bbaf527fd, exception_lineno );
    }
    else if ( exception_tb->tb_frame != &frame_120c7317512780504150c56bbaf527fd->m_frame )
    {
        exception_tb = ADD_TRACEBACK( exception_tb, frame_120c7317512780504150c56bbaf527fd, exception_lineno );
    }

    // Attachs locals to frame if any.
    Nuitka_Frame_AttachLocals(
        (struct Nuitka_FrameObject *)frame_120c7317512780504150c56bbaf527fd,
        type_description_1
    );


    // Release cached frame.
    if ( frame_120c7317512780504150c56bbaf527fd == cache_frame_120c7317512780504150c56bbaf527fd )
    {
        Py_DECREF( frame_120c7317512780504150c56bbaf527fd );
    }
    cache_frame_120c7317512780504150c56bbaf527fd = NULL;

    assertFrameObject( frame_120c7317512780504150c56bbaf527fd );

    // Put the previous frame back on top.
    popFrameStack();

    // Return the error.
    goto function_exception_exit;

    frame_no_exception_1:;

    // Return statement must have exited already.
    NUITKA_CANNOT_GET_HERE( platform$$$function_25_node );
    return NULL;

function_exception_exit:
    assert( exception_type );
    RESTORE_ERROR_OCCURRED( exception_type, exception_value, exception_tb );

    return NULL;

function_return_exit:
   // Function cleanup code if any.


   // Actual function exit with return value, making sure we did not make
   // the error status worse despite non-NULL return.
   CHECK_OBJECT( tmp_return_value );
   assert( had_error || !ERROR_OCCURRED() );
   return tmp_return_value;
}


static PyObject *impl_platform$$$function_26_release( struct Nuitka_FunctionObject const *self, PyObject **python_pars )
{
    // Preserve error status for checks
#ifndef __NUITKA_NO_ASSERT__
    NUITKA_MAY_BE_UNUSED bool had_error = ERROR_OCCURRED();
#endif

    // Local variable declarations.
    struct Nuitka_FrameObject *frame_88b750f9fd91d97315896380b8c5f62e;
    NUITKA_MAY_BE_UNUSED char const *type_description_1 = NULL;
    PyObject *tmp_return_value = NULL;
    PyObject *exception_type = NULL;
    PyObject *exception_value = NULL;
    PyTracebackObject *exception_tb = NULL;
    NUITKA_MAY_BE_UNUSED int exception_lineno = 0;
    static struct Nuitka_FrameObject *cache_frame_88b750f9fd91d97315896380b8c5f62e = NULL;

    // Actual function body.
    MAKE_OR_REUSE_FRAME( cache_frame_88b750f9fd91d97315896380b8c5f62e, codeobj_88b750f9fd91d97315896380b8c5f62e, module_platform, 0 );
    frame_88b750f9fd91d97315896380b8c5f62e = cache_frame_88b750f9fd91d97315896380b8c5f62e;

    // Push the new frame as the currently active one.
    pushFrameStack( frame_88b750f9fd91d97315896380b8c5f62e );

    // Mark the frame object as in use, ref count 1 will be up for reuse.
    assert( Py_REFCNT( frame_88b750f9fd91d97315896380b8c5f62e ) == 2 ); // Frame stack

    // Framed code:
    {
        PyObject *tmp_source_name_1;
        PyObject *tmp_called_name_1;
        PyObject *tmp_mvar_value_1;
        tmp_mvar_value_1 = GET_STRING_DICT_VALUE( moduledict_platform, (Nuitka_StringObject *)const_str_plain_uname );

        if (unlikely( tmp_mvar_value_1 == NULL ))
        {
            tmp_mvar_value_1 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_uname );
        }

        if ( tmp_mvar_value_1 == NULL )
        {

            exception_type = PyExc_NameError;
            Py_INCREF( exception_type );
            exception_value = PyUnicode_FromFormat( "name '%s' is not defined", "uname" );
            exception_tb = NULL;
            NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
            CHAIN_EXCEPTION( exception_value );

            exception_lineno = 1087;

            goto frame_exception_exit_1;
        }

        tmp_called_name_1 = tmp_mvar_value_1;
        frame_88b750f9fd91d97315896380b8c5f62e->m_frame.f_lineno = 1087;
        tmp_source_name_1 = CALL_FUNCTION_NO_ARGS( tmp_called_name_1 );
        if ( tmp_source_name_1 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 1087;

            goto frame_exception_exit_1;
        }
        tmp_return_value = LOOKUP_ATTRIBUTE( tmp_source_name_1, const_str_plain_release );
        Py_DECREF( tmp_source_name_1 );
        if ( tmp_return_value == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 1087;

            goto frame_exception_exit_1;
        }
        goto frame_return_exit_1;
    }

#if 0
    RESTORE_FRAME_EXCEPTION( frame_88b750f9fd91d97315896380b8c5f62e );
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto frame_no_exception_1;

    frame_return_exit_1:;
#if 0
    RESTORE_FRAME_EXCEPTION( frame_88b750f9fd91d97315896380b8c5f62e );
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto function_return_exit;

    frame_exception_exit_1:;

#if 0
    RESTORE_FRAME_EXCEPTION( frame_88b750f9fd91d97315896380b8c5f62e );
#endif

    if ( exception_tb == NULL )
    {
        exception_tb = MAKE_TRACEBACK( frame_88b750f9fd91d97315896380b8c5f62e, exception_lineno );
    }
    else if ( exception_tb->tb_frame != &frame_88b750f9fd91d97315896380b8c5f62e->m_frame )
    {
        exception_tb = ADD_TRACEBACK( exception_tb, frame_88b750f9fd91d97315896380b8c5f62e, exception_lineno );
    }

    // Attachs locals to frame if any.
    Nuitka_Frame_AttachLocals(
        (struct Nuitka_FrameObject *)frame_88b750f9fd91d97315896380b8c5f62e,
        type_description_1
    );


    // Release cached frame.
    if ( frame_88b750f9fd91d97315896380b8c5f62e == cache_frame_88b750f9fd91d97315896380b8c5f62e )
    {
        Py_DECREF( frame_88b750f9fd91d97315896380b8c5f62e );
    }
    cache_frame_88b750f9fd91d97315896380b8c5f62e = NULL;

    assertFrameObject( frame_88b750f9fd91d97315896380b8c5f62e );

    // Put the previous frame back on top.
    popFrameStack();

    // Return the error.
    goto function_exception_exit;

    frame_no_exception_1:;

    // Return statement must have exited already.
    NUITKA_CANNOT_GET_HERE( platform$$$function_26_release );
    return NULL;

function_exception_exit:
    assert( exception_type );
    RESTORE_ERROR_OCCURRED( exception_type, exception_value, exception_tb );

    return NULL;

function_return_exit:
   // Function cleanup code if any.


   // Actual function exit with return value, making sure we did not make
   // the error status worse despite non-NULL return.
   CHECK_OBJECT( tmp_return_value );
   assert( had_error || !ERROR_OCCURRED() );
   return tmp_return_value;
}


static PyObject *impl_platform$$$function_27_version( struct Nuitka_FunctionObject const *self, PyObject **python_pars )
{
    // Preserve error status for checks
#ifndef __NUITKA_NO_ASSERT__
    NUITKA_MAY_BE_UNUSED bool had_error = ERROR_OCCURRED();
#endif

    // Local variable declarations.
    struct Nuitka_FrameObject *frame_4214dd2b9282a50c64702ee940b60f1e;
    NUITKA_MAY_BE_UNUSED char const *type_description_1 = NULL;
    PyObject *tmp_return_value = NULL;
    PyObject *exception_type = NULL;
    PyObject *exception_value = NULL;
    PyTracebackObject *exception_tb = NULL;
    NUITKA_MAY_BE_UNUSED int exception_lineno = 0;
    static struct Nuitka_FrameObject *cache_frame_4214dd2b9282a50c64702ee940b60f1e = NULL;

    // Actual function body.
    MAKE_OR_REUSE_FRAME( cache_frame_4214dd2b9282a50c64702ee940b60f1e, codeobj_4214dd2b9282a50c64702ee940b60f1e, module_platform, 0 );
    frame_4214dd2b9282a50c64702ee940b60f1e = cache_frame_4214dd2b9282a50c64702ee940b60f1e;

    // Push the new frame as the currently active one.
    pushFrameStack( frame_4214dd2b9282a50c64702ee940b60f1e );

    // Mark the frame object as in use, ref count 1 will be up for reuse.
    assert( Py_REFCNT( frame_4214dd2b9282a50c64702ee940b60f1e ) == 2 ); // Frame stack

    // Framed code:
    {
        PyObject *tmp_source_name_1;
        PyObject *tmp_called_name_1;
        PyObject *tmp_mvar_value_1;
        tmp_mvar_value_1 = GET_STRING_DICT_VALUE( moduledict_platform, (Nuitka_StringObject *)const_str_plain_uname );

        if (unlikely( tmp_mvar_value_1 == NULL ))
        {
            tmp_mvar_value_1 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_uname );
        }

        if ( tmp_mvar_value_1 == NULL )
        {

            exception_type = PyExc_NameError;
            Py_INCREF( exception_type );
            exception_value = PyUnicode_FromFormat( "name '%s' is not defined", "uname" );
            exception_tb = NULL;
            NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
            CHAIN_EXCEPTION( exception_value );

            exception_lineno = 1096;

            goto frame_exception_exit_1;
        }

        tmp_called_name_1 = tmp_mvar_value_1;
        frame_4214dd2b9282a50c64702ee940b60f1e->m_frame.f_lineno = 1096;
        tmp_source_name_1 = CALL_FUNCTION_NO_ARGS( tmp_called_name_1 );
        if ( tmp_source_name_1 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 1096;

            goto frame_exception_exit_1;
        }
        tmp_return_value = LOOKUP_ATTRIBUTE( tmp_source_name_1, const_str_plain_version );
        Py_DECREF( tmp_source_name_1 );
        if ( tmp_return_value == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 1096;

            goto frame_exception_exit_1;
        }
        goto frame_return_exit_1;
    }

#if 0
    RESTORE_FRAME_EXCEPTION( frame_4214dd2b9282a50c64702ee940b60f1e );
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto frame_no_exception_1;

    frame_return_exit_1:;
#if 0
    RESTORE_FRAME_EXCEPTION( frame_4214dd2b9282a50c64702ee940b60f1e );
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto function_return_exit;

    frame_exception_exit_1:;

#if 0
    RESTORE_FRAME_EXCEPTION( frame_4214dd2b9282a50c64702ee940b60f1e );
#endif

    if ( exception_tb == NULL )
    {
        exception_tb = MAKE_TRACEBACK( frame_4214dd2b9282a50c64702ee940b60f1e, exception_lineno );
    }
    else if ( exception_tb->tb_frame != &frame_4214dd2b9282a50c64702ee940b60f1e->m_frame )
    {
        exception_tb = ADD_TRACEBACK( exception_tb, frame_4214dd2b9282a50c64702ee940b60f1e, exception_lineno );
    }

    // Attachs locals to frame if any.
    Nuitka_Frame_AttachLocals(
        (struct Nuitka_FrameObject *)frame_4214dd2b9282a50c64702ee940b60f1e,
        type_description_1
    );


    // Release cached frame.
    if ( frame_4214dd2b9282a50c64702ee940b60f1e == cache_frame_4214dd2b9282a50c64702ee940b60f1e )
    {
        Py_DECREF( frame_4214dd2b9282a50c64702ee940b60f1e );
    }
    cache_frame_4214dd2b9282a50c64702ee940b60f1e = NULL;

    assertFrameObject( frame_4214dd2b9282a50c64702ee940b60f1e );

    // Put the previous frame back on top.
    popFrameStack();

    // Return the error.
    goto function_exception_exit;

    frame_no_exception_1:;

    // Return statement must have exited already.
    NUITKA_CANNOT_GET_HERE( platform$$$function_27_version );
    return NULL;

function_exception_exit:
    assert( exception_type );
    RESTORE_ERROR_OCCURRED( exception_type, exception_value, exception_tb );

    return NULL;

function_return_exit:
   // Function cleanup code if any.


   // Actual function exit with return value, making sure we did not make
   // the error status worse despite non-NULL return.
   CHECK_OBJECT( tmp_return_value );
   assert( had_error || !ERROR_OCCURRED() );
   return tmp_return_value;
}


static PyObject *impl_platform$$$function_28_machine( struct Nuitka_FunctionObject const *self, PyObject **python_pars )
{
    // Preserve error status for checks
#ifndef __NUITKA_NO_ASSERT__
    NUITKA_MAY_BE_UNUSED bool had_error = ERROR_OCCURRED();
#endif

    // Local variable declarations.
    struct Nuitka_FrameObject *frame_34dea52287ae50b1e167d683fa77674f;
    NUITKA_MAY_BE_UNUSED char const *type_description_1 = NULL;
    PyObject *tmp_return_value = NULL;
    PyObject *exception_type = NULL;
    PyObject *exception_value = NULL;
    PyTracebackObject *exception_tb = NULL;
    NUITKA_MAY_BE_UNUSED int exception_lineno = 0;
    static struct Nuitka_FrameObject *cache_frame_34dea52287ae50b1e167d683fa77674f = NULL;

    // Actual function body.
    MAKE_OR_REUSE_FRAME( cache_frame_34dea52287ae50b1e167d683fa77674f, codeobj_34dea52287ae50b1e167d683fa77674f, module_platform, 0 );
    frame_34dea52287ae50b1e167d683fa77674f = cache_frame_34dea52287ae50b1e167d683fa77674f;

    // Push the new frame as the currently active one.
    pushFrameStack( frame_34dea52287ae50b1e167d683fa77674f );

    // Mark the frame object as in use, ref count 1 will be up for reuse.
    assert( Py_REFCNT( frame_34dea52287ae50b1e167d683fa77674f ) == 2 ); // Frame stack

    // Framed code:
    {
        PyObject *tmp_source_name_1;
        PyObject *tmp_called_name_1;
        PyObject *tmp_mvar_value_1;
        tmp_mvar_value_1 = GET_STRING_DICT_VALUE( moduledict_platform, (Nuitka_StringObject *)const_str_plain_uname );

        if (unlikely( tmp_mvar_value_1 == NULL ))
        {
            tmp_mvar_value_1 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_uname );
        }

        if ( tmp_mvar_value_1 == NULL )
        {

            exception_type = PyExc_NameError;
            Py_INCREF( exception_type );
            exception_value = PyUnicode_FromFormat( "name '%s' is not defined", "uname" );
            exception_tb = NULL;
            NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
            CHAIN_EXCEPTION( exception_value );

            exception_lineno = 1105;

            goto frame_exception_exit_1;
        }

        tmp_called_name_1 = tmp_mvar_value_1;
        frame_34dea52287ae50b1e167d683fa77674f->m_frame.f_lineno = 1105;
        tmp_source_name_1 = CALL_FUNCTION_NO_ARGS( tmp_called_name_1 );
        if ( tmp_source_name_1 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 1105;

            goto frame_exception_exit_1;
        }
        tmp_return_value = LOOKUP_ATTRIBUTE( tmp_source_name_1, const_str_plain_machine );
        Py_DECREF( tmp_source_name_1 );
        if ( tmp_return_value == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 1105;

            goto frame_exception_exit_1;
        }
        goto frame_return_exit_1;
    }

#if 0
    RESTORE_FRAME_EXCEPTION( frame_34dea52287ae50b1e167d683fa77674f );
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto frame_no_exception_1;

    frame_return_exit_1:;
#if 0
    RESTORE_FRAME_EXCEPTION( frame_34dea52287ae50b1e167d683fa77674f );
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto function_return_exit;

    frame_exception_exit_1:;

#if 0
    RESTORE_FRAME_EXCEPTION( frame_34dea52287ae50b1e167d683fa77674f );
#endif

    if ( exception_tb == NULL )
    {
        exception_tb = MAKE_TRACEBACK( frame_34dea52287ae50b1e167d683fa77674f, exception_lineno );
    }
    else if ( exception_tb->tb_frame != &frame_34dea52287ae50b1e167d683fa77674f->m_frame )
    {
        exception_tb = ADD_TRACEBACK( exception_tb, frame_34dea52287ae50b1e167d683fa77674f, exception_lineno );
    }

    // Attachs locals to frame if any.
    Nuitka_Frame_AttachLocals(
        (struct Nuitka_FrameObject *)frame_34dea52287ae50b1e167d683fa77674f,
        type_description_1
    );


    // Release cached frame.
    if ( frame_34dea52287ae50b1e167d683fa77674f == cache_frame_34dea52287ae50b1e167d683fa77674f )
    {
        Py_DECREF( frame_34dea52287ae50b1e167d683fa77674f );
    }
    cache_frame_34dea52287ae50b1e167d683fa77674f = NULL;

    assertFrameObject( frame_34dea52287ae50b1e167d683fa77674f );

    // Put the previous frame back on top.
    popFrameStack();

    // Return the error.
    goto function_exception_exit;

    frame_no_exception_1:;

    // Return statement must have exited already.
    NUITKA_CANNOT_GET_HERE( platform$$$function_28_machine );
    return NULL;

function_exception_exit:
    assert( exception_type );
    RESTORE_ERROR_OCCURRED( exception_type, exception_value, exception_tb );

    return NULL;

function_return_exit:
   // Function cleanup code if any.


   // Actual function exit with return value, making sure we did not make
   // the error status worse despite non-NULL return.
   CHECK_OBJECT( tmp_return_value );
   assert( had_error || !ERROR_OCCURRED() );
   return tmp_return_value;
}


static PyObject *impl_platform$$$function_29_processor( struct Nuitka_FunctionObject const *self, PyObject **python_pars )
{
    // Preserve error status for checks
#ifndef __NUITKA_NO_ASSERT__
    NUITKA_MAY_BE_UNUSED bool had_error = ERROR_OCCURRED();
#endif

    // Local variable declarations.
    struct Nuitka_FrameObject *frame_f0b8d438529f91c513a9a85244666c80;
    NUITKA_MAY_BE_UNUSED char const *type_description_1 = NULL;
    PyObject *tmp_return_value = NULL;
    PyObject *exception_type = NULL;
    PyObject *exception_value = NULL;
    PyTracebackObject *exception_tb = NULL;
    NUITKA_MAY_BE_UNUSED int exception_lineno = 0;
    static struct Nuitka_FrameObject *cache_frame_f0b8d438529f91c513a9a85244666c80 = NULL;

    // Actual function body.
    MAKE_OR_REUSE_FRAME( cache_frame_f0b8d438529f91c513a9a85244666c80, codeobj_f0b8d438529f91c513a9a85244666c80, module_platform, 0 );
    frame_f0b8d438529f91c513a9a85244666c80 = cache_frame_f0b8d438529f91c513a9a85244666c80;

    // Push the new frame as the currently active one.
    pushFrameStack( frame_f0b8d438529f91c513a9a85244666c80 );

    // Mark the frame object as in use, ref count 1 will be up for reuse.
    assert( Py_REFCNT( frame_f0b8d438529f91c513a9a85244666c80 ) == 2 ); // Frame stack

    // Framed code:
    {
        PyObject *tmp_source_name_1;
        PyObject *tmp_called_name_1;
        PyObject *tmp_mvar_value_1;
        tmp_mvar_value_1 = GET_STRING_DICT_VALUE( moduledict_platform, (Nuitka_StringObject *)const_str_plain_uname );

        if (unlikely( tmp_mvar_value_1 == NULL ))
        {
            tmp_mvar_value_1 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_uname );
        }

        if ( tmp_mvar_value_1 == NULL )
        {

            exception_type = PyExc_NameError;
            Py_INCREF( exception_type );
            exception_value = PyUnicode_FromFormat( "name '%s' is not defined", "uname" );
            exception_tb = NULL;
            NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
            CHAIN_EXCEPTION( exception_value );

            exception_lineno = 1117;

            goto frame_exception_exit_1;
        }

        tmp_called_name_1 = tmp_mvar_value_1;
        frame_f0b8d438529f91c513a9a85244666c80->m_frame.f_lineno = 1117;
        tmp_source_name_1 = CALL_FUNCTION_NO_ARGS( tmp_called_name_1 );
        if ( tmp_source_name_1 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 1117;

            goto frame_exception_exit_1;
        }
        tmp_return_value = LOOKUP_ATTRIBUTE( tmp_source_name_1, const_str_plain_processor );
        Py_DECREF( tmp_source_name_1 );
        if ( tmp_return_value == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 1117;

            goto frame_exception_exit_1;
        }
        goto frame_return_exit_1;
    }

#if 0
    RESTORE_FRAME_EXCEPTION( frame_f0b8d438529f91c513a9a85244666c80 );
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto frame_no_exception_1;

    frame_return_exit_1:;
#if 0
    RESTORE_FRAME_EXCEPTION( frame_f0b8d438529f91c513a9a85244666c80 );
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto function_return_exit;

    frame_exception_exit_1:;

#if 0
    RESTORE_FRAME_EXCEPTION( frame_f0b8d438529f91c513a9a85244666c80 );
#endif

    if ( exception_tb == NULL )
    {
        exception_tb = MAKE_TRACEBACK( frame_f0b8d438529f91c513a9a85244666c80, exception_lineno );
    }
    else if ( exception_tb->tb_frame != &frame_f0b8d438529f91c513a9a85244666c80->m_frame )
    {
        exception_tb = ADD_TRACEBACK( exception_tb, frame_f0b8d438529f91c513a9a85244666c80, exception_lineno );
    }

    // Attachs locals to frame if any.
    Nuitka_Frame_AttachLocals(
        (struct Nuitka_FrameObject *)frame_f0b8d438529f91c513a9a85244666c80,
        type_description_1
    );


    // Release cached frame.
    if ( frame_f0b8d438529f91c513a9a85244666c80 == cache_frame_f0b8d438529f91c513a9a85244666c80 )
    {
        Py_DECREF( frame_f0b8d438529f91c513a9a85244666c80 );
    }
    cache_frame_f0b8d438529f91c513a9a85244666c80 = NULL;

    assertFrameObject( frame_f0b8d438529f91c513a9a85244666c80 );

    // Put the previous frame back on top.
    popFrameStack();

    // Return the error.
    goto function_exception_exit;

    frame_no_exception_1:;

    // Return statement must have exited already.
    NUITKA_CANNOT_GET_HERE( platform$$$function_29_processor );
    return NULL;

function_exception_exit:
    assert( exception_type );
    RESTORE_ERROR_OCCURRED( exception_type, exception_value, exception_tb );

    return NULL;

function_return_exit:
   // Function cleanup code if any.


   // Actual function exit with return value, making sure we did not make
   // the error status worse despite non-NULL return.
   CHECK_OBJECT( tmp_return_value );
   assert( had_error || !ERROR_OCCURRED() );
   return tmp_return_value;
}


static PyObject *impl_platform$$$function_30__sys_version( struct Nuitka_FunctionObject const *self, PyObject **python_pars )
{
    // Preserve error status for checks
#ifndef __NUITKA_NO_ASSERT__
    NUITKA_MAY_BE_UNUSED bool had_error = ERROR_OCCURRED();
#endif

    // Local variable declarations.
    PyObject *par_sys_version = python_pars[ 0 ];
    PyObject *var_result = NULL;
    PyObject *var_name = NULL;
    PyObject *var_match = NULL;
    PyObject *var_version = NULL;
    PyObject *var_alt_version = NULL;
    PyObject *var_compiler = NULL;
    PyObject *var_buildno = NULL;
    PyObject *var_builddate = NULL;
    PyObject *var_buildtime = NULL;
    PyObject *var__ = NULL;
    PyObject *var_branch = NULL;
    PyObject *var_revision = NULL;
    PyObject *var_l = NULL;
    PyObject *tmp_tuple_unpack_1__element_1 = NULL;
    PyObject *tmp_tuple_unpack_1__element_2 = NULL;
    PyObject *tmp_tuple_unpack_1__element_3 = NULL;
    PyObject *tmp_tuple_unpack_1__source_iter = NULL;
    PyObject *tmp_tuple_unpack_2__element_1 = NULL;
    PyObject *tmp_tuple_unpack_2__element_2 = NULL;
    PyObject *tmp_tuple_unpack_2__element_3 = NULL;
    PyObject *tmp_tuple_unpack_2__element_4 = NULL;
    PyObject *tmp_tuple_unpack_2__element_5 = NULL;
    PyObject *tmp_tuple_unpack_2__source_iter = NULL;
    PyObject *tmp_tuple_unpack_3__element_1 = NULL;
    PyObject *tmp_tuple_unpack_3__element_2 = NULL;
    PyObject *tmp_tuple_unpack_3__element_3 = NULL;
    PyObject *tmp_tuple_unpack_3__element_4 = NULL;
    PyObject *tmp_tuple_unpack_3__source_iter = NULL;
    PyObject *tmp_tuple_unpack_4__element_1 = NULL;
    PyObject *tmp_tuple_unpack_4__element_2 = NULL;
    PyObject *tmp_tuple_unpack_4__element_3 = NULL;
    PyObject *tmp_tuple_unpack_4__element_4 = NULL;
    PyObject *tmp_tuple_unpack_4__element_5 = NULL;
    PyObject *tmp_tuple_unpack_4__source_iter = NULL;
    PyObject *tmp_tuple_unpack_5__element_1 = NULL;
    PyObject *tmp_tuple_unpack_5__element_2 = NULL;
    PyObject *tmp_tuple_unpack_5__element_3 = NULL;
    PyObject *tmp_tuple_unpack_5__source_iter = NULL;
    PyObject *tmp_tuple_unpack_6__element_1 = NULL;
    PyObject *tmp_tuple_unpack_6__element_2 = NULL;
    PyObject *tmp_tuple_unpack_6__element_3 = NULL;
    PyObject *tmp_tuple_unpack_6__source_iter = NULL;
    struct Nuitka_FrameObject *frame_43a808c2e7d2ad693508adcb974b4533;
    NUITKA_MAY_BE_UNUSED char const *type_description_1 = NULL;
    PyObject *exception_type = NULL;
    PyObject *exception_value = NULL;
    PyTracebackObject *exception_tb = NULL;
    NUITKA_MAY_BE_UNUSED int exception_lineno = 0;
    PyObject *tmp_return_value = NULL;
    int tmp_res;
    PyObject *tmp_iterator_attempt;
    PyObject *exception_keeper_type_1;
    PyObject *exception_keeper_value_1;
    PyTracebackObject *exception_keeper_tb_1;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_1;
    PyObject *exception_keeper_type_2;
    PyObject *exception_keeper_value_2;
    PyTracebackObject *exception_keeper_tb_2;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_2;
    PyObject *exception_keeper_type_3;
    PyObject *exception_keeper_value_3;
    PyTracebackObject *exception_keeper_tb_3;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_3;
    PyObject *exception_keeper_type_4;
    PyObject *exception_keeper_value_4;
    PyTracebackObject *exception_keeper_tb_4;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_4;
    PyObject *exception_keeper_type_5;
    PyObject *exception_keeper_value_5;
    PyTracebackObject *exception_keeper_tb_5;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_5;
    PyObject *exception_keeper_type_6;
    PyObject *exception_keeper_value_6;
    PyTracebackObject *exception_keeper_tb_6;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_6;
    PyObject *exception_keeper_type_7;
    PyObject *exception_keeper_value_7;
    PyTracebackObject *exception_keeper_tb_7;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_7;
    PyObject *exception_keeper_type_8;
    PyObject *exception_keeper_value_8;
    PyTracebackObject *exception_keeper_tb_8;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_8;
    PyObject *exception_keeper_type_9;
    PyObject *exception_keeper_value_9;
    PyTracebackObject *exception_keeper_tb_9;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_9;
    PyObject *exception_keeper_type_10;
    PyObject *exception_keeper_value_10;
    PyTracebackObject *exception_keeper_tb_10;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_10;
    PyObject *exception_keeper_type_11;
    PyObject *exception_keeper_value_11;
    PyTracebackObject *exception_keeper_tb_11;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_11;
    PyObject *exception_keeper_type_12;
    PyObject *exception_keeper_value_12;
    PyTracebackObject *exception_keeper_tb_12;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_12;
    bool tmp_result;
    static struct Nuitka_FrameObject *cache_frame_43a808c2e7d2ad693508adcb974b4533 = NULL;
    PyObject *exception_keeper_type_13;
    PyObject *exception_keeper_value_13;
    PyTracebackObject *exception_keeper_tb_13;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_13;

    // Actual function body.
    // Tried code:
    MAKE_OR_REUSE_FRAME( cache_frame_43a808c2e7d2ad693508adcb974b4533, codeobj_43a808c2e7d2ad693508adcb974b4533, module_platform, sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *) );
    frame_43a808c2e7d2ad693508adcb974b4533 = cache_frame_43a808c2e7d2ad693508adcb974b4533;

    // Push the new frame as the currently active one.
    pushFrameStack( frame_43a808c2e7d2ad693508adcb974b4533 );

    // Mark the frame object as in use, ref count 1 will be up for reuse.
    assert( Py_REFCNT( frame_43a808c2e7d2ad693508adcb974b4533 ) == 2 ); // Frame stack

    // Framed code:
    {
        nuitka_bool tmp_condition_result_1;
        PyObject *tmp_compexpr_left_1;
        PyObject *tmp_compexpr_right_1;
        CHECK_OBJECT( par_sys_version );
        tmp_compexpr_left_1 = par_sys_version;
        tmp_compexpr_right_1 = Py_None;
        tmp_condition_result_1 = ( tmp_compexpr_left_1 == tmp_compexpr_right_1 ) ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
        if ( tmp_condition_result_1 == NUITKA_BOOL_TRUE )
        {
            goto branch_yes_1;
        }
        else
        {
            goto branch_no_1;
        }
        branch_yes_1:;
        {
            PyObject *tmp_assign_source_1;
            PyObject *tmp_source_name_1;
            PyObject *tmp_mvar_value_1;
            tmp_mvar_value_1 = GET_STRING_DICT_VALUE( moduledict_platform, (Nuitka_StringObject *)const_str_plain_sys );

            if (unlikely( tmp_mvar_value_1 == NULL ))
            {
                tmp_mvar_value_1 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_sys );
            }

            if ( tmp_mvar_value_1 == NULL )
            {

                exception_type = PyExc_NameError;
                Py_INCREF( exception_type );
                exception_value = PyUnicode_FromFormat( "name '%s' is not defined", "sys" );
                exception_tb = NULL;
                NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
                CHAIN_EXCEPTION( exception_value );

                exception_lineno = 1171;
                type_description_1 = "oooooooooooooo";
                goto frame_exception_exit_1;
            }

            tmp_source_name_1 = tmp_mvar_value_1;
            tmp_assign_source_1 = LOOKUP_ATTRIBUTE( tmp_source_name_1, const_str_plain_version );
            if ( tmp_assign_source_1 == NULL )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 1171;
                type_description_1 = "oooooooooooooo";
                goto frame_exception_exit_1;
            }
            {
                PyObject *old = par_sys_version;
                assert( old != NULL );
                par_sys_version = tmp_assign_source_1;
                Py_DECREF( old );
            }

        }
        branch_no_1:;
    }
    {
        PyObject *tmp_assign_source_2;
        PyObject *tmp_called_instance_1;
        PyObject *tmp_mvar_value_2;
        PyObject *tmp_args_element_name_1;
        PyObject *tmp_args_element_name_2;
        tmp_mvar_value_2 = GET_STRING_DICT_VALUE( moduledict_platform, (Nuitka_StringObject *)const_str_plain__sys_version_cache );

        if (unlikely( tmp_mvar_value_2 == NULL ))
        {
            tmp_mvar_value_2 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain__sys_version_cache );
        }

        if ( tmp_mvar_value_2 == NULL )
        {

            exception_type = PyExc_NameError;
            Py_INCREF( exception_type );
            exception_value = PyUnicode_FromFormat( "name '%s' is not defined", "_sys_version_cache" );
            exception_tb = NULL;
            NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
            CHAIN_EXCEPTION( exception_value );

            exception_lineno = 1174;
            type_description_1 = "oooooooooooooo";
            goto frame_exception_exit_1;
        }

        tmp_called_instance_1 = tmp_mvar_value_2;
        CHECK_OBJECT( par_sys_version );
        tmp_args_element_name_1 = par_sys_version;
        tmp_args_element_name_2 = Py_None;
        frame_43a808c2e7d2ad693508adcb974b4533->m_frame.f_lineno = 1174;
        {
            PyObject *call_args[] = { tmp_args_element_name_1, tmp_args_element_name_2 };
            tmp_assign_source_2 = CALL_METHOD_WITH_ARGS2( tmp_called_instance_1, const_str_plain_get, call_args );
        }

        if ( tmp_assign_source_2 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 1174;
            type_description_1 = "oooooooooooooo";
            goto frame_exception_exit_1;
        }
        assert( var_result == NULL );
        var_result = tmp_assign_source_2;
    }
    {
        nuitka_bool tmp_condition_result_2;
        PyObject *tmp_compexpr_left_2;
        PyObject *tmp_compexpr_right_2;
        CHECK_OBJECT( var_result );
        tmp_compexpr_left_2 = var_result;
        tmp_compexpr_right_2 = Py_None;
        tmp_condition_result_2 = ( tmp_compexpr_left_2 != tmp_compexpr_right_2 ) ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
        if ( tmp_condition_result_2 == NUITKA_BOOL_TRUE )
        {
            goto branch_yes_2;
        }
        else
        {
            goto branch_no_2;
        }
        branch_yes_2:;
        CHECK_OBJECT( var_result );
        tmp_return_value = var_result;
        Py_INCREF( tmp_return_value );
        goto frame_return_exit_1;
        branch_no_2:;
    }
    {
        nuitka_bool tmp_condition_result_3;
        PyObject *tmp_compexpr_left_3;
        PyObject *tmp_compexpr_right_3;
        tmp_compexpr_left_3 = const_str_plain_IronPython;
        CHECK_OBJECT( par_sys_version );
        tmp_compexpr_right_3 = par_sys_version;
        tmp_res = PySequence_Contains( tmp_compexpr_right_3, tmp_compexpr_left_3 );
        if ( tmp_res == -1 )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 1179;
            type_description_1 = "oooooooooooooo";
            goto frame_exception_exit_1;
        }
        tmp_condition_result_3 = ( tmp_res == 1 ) ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
        if ( tmp_condition_result_3 == NUITKA_BOOL_TRUE )
        {
            goto branch_yes_3;
        }
        else
        {
            goto branch_no_3;
        }
        branch_yes_3:;
        {
            PyObject *tmp_assign_source_3;
            tmp_assign_source_3 = const_str_plain_IronPython;
            assert( var_name == NULL );
            Py_INCREF( tmp_assign_source_3 );
            var_name = tmp_assign_source_3;
        }
        {
            nuitka_bool tmp_condition_result_4;
            PyObject *tmp_called_instance_2;
            PyObject *tmp_call_result_1;
            int tmp_truth_name_1;
            CHECK_OBJECT( par_sys_version );
            tmp_called_instance_2 = par_sys_version;
            frame_43a808c2e7d2ad693508adcb974b4533->m_frame.f_lineno = 1182;
            tmp_call_result_1 = CALL_METHOD_WITH_ARGS1( tmp_called_instance_2, const_str_plain_startswith, &PyTuple_GET_ITEM( const_tuple_str_plain_IronPython_tuple, 0 ) );

            if ( tmp_call_result_1 == NULL )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 1182;
                type_description_1 = "oooooooooooooo";
                goto frame_exception_exit_1;
            }
            tmp_truth_name_1 = CHECK_IF_TRUE( tmp_call_result_1 );
            if ( tmp_truth_name_1 == -1 )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
                Py_DECREF( tmp_call_result_1 );

                exception_lineno = 1182;
                type_description_1 = "oooooooooooooo";
                goto frame_exception_exit_1;
            }
            tmp_condition_result_4 = tmp_truth_name_1 == 1 ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
            Py_DECREF( tmp_call_result_1 );
            if ( tmp_condition_result_4 == NUITKA_BOOL_TRUE )
            {
                goto branch_yes_4;
            }
            else
            {
                goto branch_no_4;
            }
            branch_yes_4:;
            {
                PyObject *tmp_assign_source_4;
                PyObject *tmp_called_instance_3;
                PyObject *tmp_mvar_value_3;
                PyObject *tmp_args_element_name_3;
                tmp_mvar_value_3 = GET_STRING_DICT_VALUE( moduledict_platform, (Nuitka_StringObject *)const_str_plain__ironpython_sys_version_parser );

                if (unlikely( tmp_mvar_value_3 == NULL ))
                {
                    tmp_mvar_value_3 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain__ironpython_sys_version_parser );
                }

                if ( tmp_mvar_value_3 == NULL )
                {

                    exception_type = PyExc_NameError;
                    Py_INCREF( exception_type );
                    exception_value = PyUnicode_FromFormat( "name '%s' is not defined", "_ironpython_sys_version_parser" );
                    exception_tb = NULL;
                    NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
                    CHAIN_EXCEPTION( exception_value );

                    exception_lineno = 1183;
                    type_description_1 = "oooooooooooooo";
                    goto frame_exception_exit_1;
                }

                tmp_called_instance_3 = tmp_mvar_value_3;
                CHECK_OBJECT( par_sys_version );
                tmp_args_element_name_3 = par_sys_version;
                frame_43a808c2e7d2ad693508adcb974b4533->m_frame.f_lineno = 1183;
                {
                    PyObject *call_args[] = { tmp_args_element_name_3 };
                    tmp_assign_source_4 = CALL_METHOD_WITH_ARGS1( tmp_called_instance_3, const_str_plain_match, call_args );
                }

                if ( tmp_assign_source_4 == NULL )
                {
                    assert( ERROR_OCCURRED() );

                    FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                    exception_lineno = 1183;
                    type_description_1 = "oooooooooooooo";
                    goto frame_exception_exit_1;
                }
                assert( var_match == NULL );
                var_match = tmp_assign_source_4;
            }
            goto branch_end_4;
            branch_no_4:;
            {
                PyObject *tmp_assign_source_5;
                PyObject *tmp_called_instance_4;
                PyObject *tmp_mvar_value_4;
                PyObject *tmp_args_element_name_4;
                tmp_mvar_value_4 = GET_STRING_DICT_VALUE( moduledict_platform, (Nuitka_StringObject *)const_str_plain__ironpython26_sys_version_parser );

                if (unlikely( tmp_mvar_value_4 == NULL ))
                {
                    tmp_mvar_value_4 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain__ironpython26_sys_version_parser );
                }

                if ( tmp_mvar_value_4 == NULL )
                {

                    exception_type = PyExc_NameError;
                    Py_INCREF( exception_type );
                    exception_value = PyUnicode_FromFormat( "name '%s' is not defined", "_ironpython26_sys_version_parser" );
                    exception_tb = NULL;
                    NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
                    CHAIN_EXCEPTION( exception_value );

                    exception_lineno = 1185;
                    type_description_1 = "oooooooooooooo";
                    goto frame_exception_exit_1;
                }

                tmp_called_instance_4 = tmp_mvar_value_4;
                CHECK_OBJECT( par_sys_version );
                tmp_args_element_name_4 = par_sys_version;
                frame_43a808c2e7d2ad693508adcb974b4533->m_frame.f_lineno = 1185;
                {
                    PyObject *call_args[] = { tmp_args_element_name_4 };
                    tmp_assign_source_5 = CALL_METHOD_WITH_ARGS1( tmp_called_instance_4, const_str_plain_match, call_args );
                }

                if ( tmp_assign_source_5 == NULL )
                {
                    assert( ERROR_OCCURRED() );

                    FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                    exception_lineno = 1185;
                    type_description_1 = "oooooooooooooo";
                    goto frame_exception_exit_1;
                }
                assert( var_match == NULL );
                var_match = tmp_assign_source_5;
            }
            branch_end_4:;
        }
        {
            nuitka_bool tmp_condition_result_5;
            PyObject *tmp_compexpr_left_4;
            PyObject *tmp_compexpr_right_4;
            CHECK_OBJECT( var_match );
            tmp_compexpr_left_4 = var_match;
            tmp_compexpr_right_4 = Py_None;
            tmp_condition_result_5 = ( tmp_compexpr_left_4 == tmp_compexpr_right_4 ) ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
            if ( tmp_condition_result_5 == NUITKA_BOOL_TRUE )
            {
                goto branch_yes_5;
            }
            else
            {
                goto branch_no_5;
            }
            branch_yes_5:;
            {
                PyObject *tmp_raise_type_1;
                PyObject *tmp_make_exception_arg_1;
                PyObject *tmp_left_name_1;
                PyObject *tmp_right_name_1;
                PyObject *tmp_operand_name_1;
                tmp_left_name_1 = const_str_digest_54f3cedf4ae4e0fa27d4aa876c1557e5;
                CHECK_OBJECT( par_sys_version );
                tmp_operand_name_1 = par_sys_version;
                tmp_right_name_1 = UNARY_OPERATION( PyObject_Repr, tmp_operand_name_1 );
                if ( tmp_right_name_1 == NULL )
                {
                    assert( ERROR_OCCURRED() );

                    FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                    exception_lineno = 1190;
                    type_description_1 = "oooooooooooooo";
                    goto frame_exception_exit_1;
                }
                tmp_make_exception_arg_1 = BINARY_OPERATION_REMAINDER( tmp_left_name_1, tmp_right_name_1 );
                Py_DECREF( tmp_right_name_1 );
                if ( tmp_make_exception_arg_1 == NULL )
                {
                    assert( ERROR_OCCURRED() );

                    FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                    exception_lineno = 1189;
                    type_description_1 = "oooooooooooooo";
                    goto frame_exception_exit_1;
                }
                frame_43a808c2e7d2ad693508adcb974b4533->m_frame.f_lineno = 1188;
                {
                    PyObject *call_args[] = { tmp_make_exception_arg_1 };
                    tmp_raise_type_1 = CALL_FUNCTION_WITH_ARGS1( PyExc_ValueError, call_args );
                }

                Py_DECREF( tmp_make_exception_arg_1 );
                assert( !(tmp_raise_type_1 == NULL) );
                exception_type = tmp_raise_type_1;
                exception_lineno = 1188;
                RAISE_EXCEPTION_WITH_TYPE( &exception_type, &exception_value, &exception_tb );
                type_description_1 = "oooooooooooooo";
                goto frame_exception_exit_1;
            }
            branch_no_5:;
        }
        // Tried code:
        {
            PyObject *tmp_assign_source_6;
            PyObject *tmp_iter_arg_1;
            PyObject *tmp_called_instance_5;
            CHECK_OBJECT( var_match );
            tmp_called_instance_5 = var_match;
            frame_43a808c2e7d2ad693508adcb974b4533->m_frame.f_lineno = 1192;
            tmp_iter_arg_1 = CALL_METHOD_NO_ARGS( tmp_called_instance_5, const_str_plain_groups );
            if ( tmp_iter_arg_1 == NULL )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 1192;
                type_description_1 = "oooooooooooooo";
                goto try_except_handler_2;
            }
            tmp_assign_source_6 = MAKE_UNPACK_ITERATOR( tmp_iter_arg_1 );
            Py_DECREF( tmp_iter_arg_1 );
            if ( tmp_assign_source_6 == NULL )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 1192;
                type_description_1 = "oooooooooooooo";
                goto try_except_handler_2;
            }
            assert( tmp_tuple_unpack_1__source_iter == NULL );
            tmp_tuple_unpack_1__source_iter = tmp_assign_source_6;
        }
        // Tried code:
        {
            PyObject *tmp_assign_source_7;
            PyObject *tmp_unpack_1;
            CHECK_OBJECT( tmp_tuple_unpack_1__source_iter );
            tmp_unpack_1 = tmp_tuple_unpack_1__source_iter;
            tmp_assign_source_7 = UNPACK_NEXT( tmp_unpack_1, 0, 3 );
            if ( tmp_assign_source_7 == NULL )
            {
                if ( !ERROR_OCCURRED() )
                {
                    exception_type = PyExc_StopIteration;
                    Py_INCREF( exception_type );
                    exception_value = NULL;
                    exception_tb = NULL;
                }
                else
                {
                    FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
                }


                type_description_1 = "oooooooooooooo";
                exception_lineno = 1192;
                goto try_except_handler_3;
            }
            assert( tmp_tuple_unpack_1__element_1 == NULL );
            tmp_tuple_unpack_1__element_1 = tmp_assign_source_7;
        }
        {
            PyObject *tmp_assign_source_8;
            PyObject *tmp_unpack_2;
            CHECK_OBJECT( tmp_tuple_unpack_1__source_iter );
            tmp_unpack_2 = tmp_tuple_unpack_1__source_iter;
            tmp_assign_source_8 = UNPACK_NEXT( tmp_unpack_2, 1, 3 );
            if ( tmp_assign_source_8 == NULL )
            {
                if ( !ERROR_OCCURRED() )
                {
                    exception_type = PyExc_StopIteration;
                    Py_INCREF( exception_type );
                    exception_value = NULL;
                    exception_tb = NULL;
                }
                else
                {
                    FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
                }


                type_description_1 = "oooooooooooooo";
                exception_lineno = 1192;
                goto try_except_handler_3;
            }
            assert( tmp_tuple_unpack_1__element_2 == NULL );
            tmp_tuple_unpack_1__element_2 = tmp_assign_source_8;
        }
        {
            PyObject *tmp_assign_source_9;
            PyObject *tmp_unpack_3;
            CHECK_OBJECT( tmp_tuple_unpack_1__source_iter );
            tmp_unpack_3 = tmp_tuple_unpack_1__source_iter;
            tmp_assign_source_9 = UNPACK_NEXT( tmp_unpack_3, 2, 3 );
            if ( tmp_assign_source_9 == NULL )
            {
                if ( !ERROR_OCCURRED() )
                {
                    exception_type = PyExc_StopIteration;
                    Py_INCREF( exception_type );
                    exception_value = NULL;
                    exception_tb = NULL;
                }
                else
                {
                    FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
                }


                type_description_1 = "oooooooooooooo";
                exception_lineno = 1192;
                goto try_except_handler_3;
            }
            assert( tmp_tuple_unpack_1__element_3 == NULL );
            tmp_tuple_unpack_1__element_3 = tmp_assign_source_9;
        }
        {
            PyObject *tmp_iterator_name_1;
            CHECK_OBJECT( tmp_tuple_unpack_1__source_iter );
            tmp_iterator_name_1 = tmp_tuple_unpack_1__source_iter;
            // Check if iterator has left-over elements.
            CHECK_OBJECT( tmp_iterator_name_1 ); assert( HAS_ITERNEXT( tmp_iterator_name_1 ) );

            tmp_iterator_attempt = (*Py_TYPE( tmp_iterator_name_1 )->tp_iternext)( tmp_iterator_name_1 );

            if (likely( tmp_iterator_attempt == NULL ))
            {
                PyObject *error = GET_ERROR_OCCURRED();

                if ( error != NULL )
                {
                    if ( EXCEPTION_MATCH_BOOL_SINGLE( error, PyExc_StopIteration ))
                    {
                        CLEAR_ERROR_OCCURRED();
                    }
                    else
                    {
                        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );

                        type_description_1 = "oooooooooooooo";
                        exception_lineno = 1192;
                        goto try_except_handler_3;
                    }
                }
            }
            else
            {
                Py_DECREF( tmp_iterator_attempt );

                // TODO: Could avoid PyErr_Format.
#if PYTHON_VERSION < 300
                PyErr_Format( PyExc_ValueError, "too many values to unpack" );
#else
                PyErr_Format( PyExc_ValueError, "too many values to unpack (expected 3)" );
#endif
                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );

                type_description_1 = "oooooooooooooo";
                exception_lineno = 1192;
                goto try_except_handler_3;
            }
        }
        goto try_end_1;
        // Exception handler code:
        try_except_handler_3:;
        exception_keeper_type_1 = exception_type;
        exception_keeper_value_1 = exception_value;
        exception_keeper_tb_1 = exception_tb;
        exception_keeper_lineno_1 = exception_lineno;
        exception_type = NULL;
        exception_value = NULL;
        exception_tb = NULL;
        exception_lineno = 0;

        CHECK_OBJECT( (PyObject *)tmp_tuple_unpack_1__source_iter );
        Py_DECREF( tmp_tuple_unpack_1__source_iter );
        tmp_tuple_unpack_1__source_iter = NULL;

        // Re-raise.
        exception_type = exception_keeper_type_1;
        exception_value = exception_keeper_value_1;
        exception_tb = exception_keeper_tb_1;
        exception_lineno = exception_keeper_lineno_1;

        goto try_except_handler_2;
        // End of try:
        try_end_1:;
        goto try_end_2;
        // Exception handler code:
        try_except_handler_2:;
        exception_keeper_type_2 = exception_type;
        exception_keeper_value_2 = exception_value;
        exception_keeper_tb_2 = exception_tb;
        exception_keeper_lineno_2 = exception_lineno;
        exception_type = NULL;
        exception_value = NULL;
        exception_tb = NULL;
        exception_lineno = 0;

        Py_XDECREF( tmp_tuple_unpack_1__element_1 );
        tmp_tuple_unpack_1__element_1 = NULL;

        Py_XDECREF( tmp_tuple_unpack_1__element_2 );
        tmp_tuple_unpack_1__element_2 = NULL;

        Py_XDECREF( tmp_tuple_unpack_1__element_3 );
        tmp_tuple_unpack_1__element_3 = NULL;

        // Re-raise.
        exception_type = exception_keeper_type_2;
        exception_value = exception_keeper_value_2;
        exception_tb = exception_keeper_tb_2;
        exception_lineno = exception_keeper_lineno_2;

        goto frame_exception_exit_1;
        // End of try:
        try_end_2:;
        CHECK_OBJECT( (PyObject *)tmp_tuple_unpack_1__source_iter );
        Py_DECREF( tmp_tuple_unpack_1__source_iter );
        tmp_tuple_unpack_1__source_iter = NULL;

        {
            PyObject *tmp_assign_source_10;
            CHECK_OBJECT( tmp_tuple_unpack_1__element_1 );
            tmp_assign_source_10 = tmp_tuple_unpack_1__element_1;
            assert( var_version == NULL );
            Py_INCREF( tmp_assign_source_10 );
            var_version = tmp_assign_source_10;
        }
        Py_XDECREF( tmp_tuple_unpack_1__element_1 );
        tmp_tuple_unpack_1__element_1 = NULL;

        {
            PyObject *tmp_assign_source_11;
            CHECK_OBJECT( tmp_tuple_unpack_1__element_2 );
            tmp_assign_source_11 = tmp_tuple_unpack_1__element_2;
            assert( var_alt_version == NULL );
            Py_INCREF( tmp_assign_source_11 );
            var_alt_version = tmp_assign_source_11;
        }
        Py_XDECREF( tmp_tuple_unpack_1__element_2 );
        tmp_tuple_unpack_1__element_2 = NULL;

        {
            PyObject *tmp_assign_source_12;
            CHECK_OBJECT( tmp_tuple_unpack_1__element_3 );
            tmp_assign_source_12 = tmp_tuple_unpack_1__element_3;
            assert( var_compiler == NULL );
            Py_INCREF( tmp_assign_source_12 );
            var_compiler = tmp_assign_source_12;
        }
        Py_XDECREF( tmp_tuple_unpack_1__element_3 );
        tmp_tuple_unpack_1__element_3 = NULL;

        {
            PyObject *tmp_assign_source_13;
            tmp_assign_source_13 = const_str_empty;
            assert( var_buildno == NULL );
            Py_INCREF( tmp_assign_source_13 );
            var_buildno = tmp_assign_source_13;
        }
        {
            PyObject *tmp_assign_source_14;
            tmp_assign_source_14 = const_str_empty;
            assert( var_builddate == NULL );
            Py_INCREF( tmp_assign_source_14 );
            var_builddate = tmp_assign_source_14;
        }
        goto branch_end_3;
        branch_no_3:;
        {
            nuitka_bool tmp_condition_result_6;
            PyObject *tmp_called_instance_6;
            PyObject *tmp_source_name_2;
            PyObject *tmp_mvar_value_5;
            PyObject *tmp_call_result_2;
            int tmp_truth_name_2;
            tmp_mvar_value_5 = GET_STRING_DICT_VALUE( moduledict_platform, (Nuitka_StringObject *)const_str_plain_sys );

            if (unlikely( tmp_mvar_value_5 == NULL ))
            {
                tmp_mvar_value_5 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_sys );
            }

            if ( tmp_mvar_value_5 == NULL )
            {

                exception_type = PyExc_NameError;
                Py_INCREF( exception_type );
                exception_value = PyUnicode_FromFormat( "name '%s' is not defined", "sys" );
                exception_tb = NULL;
                NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
                CHAIN_EXCEPTION( exception_value );

                exception_lineno = 1196;
                type_description_1 = "oooooooooooooo";
                goto frame_exception_exit_1;
            }

            tmp_source_name_2 = tmp_mvar_value_5;
            tmp_called_instance_6 = LOOKUP_ATTRIBUTE( tmp_source_name_2, const_str_plain_platform );
            if ( tmp_called_instance_6 == NULL )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 1196;
                type_description_1 = "oooooooooooooo";
                goto frame_exception_exit_1;
            }
            frame_43a808c2e7d2ad693508adcb974b4533->m_frame.f_lineno = 1196;
            tmp_call_result_2 = CALL_METHOD_WITH_ARGS1( tmp_called_instance_6, const_str_plain_startswith, &PyTuple_GET_ITEM( const_tuple_str_plain_java_tuple, 0 ) );

            Py_DECREF( tmp_called_instance_6 );
            if ( tmp_call_result_2 == NULL )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 1196;
                type_description_1 = "oooooooooooooo";
                goto frame_exception_exit_1;
            }
            tmp_truth_name_2 = CHECK_IF_TRUE( tmp_call_result_2 );
            if ( tmp_truth_name_2 == -1 )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
                Py_DECREF( tmp_call_result_2 );

                exception_lineno = 1196;
                type_description_1 = "oooooooooooooo";
                goto frame_exception_exit_1;
            }
            tmp_condition_result_6 = tmp_truth_name_2 == 1 ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
            Py_DECREF( tmp_call_result_2 );
            if ( tmp_condition_result_6 == NUITKA_BOOL_TRUE )
            {
                goto branch_yes_6;
            }
            else
            {
                goto branch_no_6;
            }
            branch_yes_6:;
            {
                PyObject *tmp_assign_source_15;
                tmp_assign_source_15 = const_str_plain_Jython;
                assert( var_name == NULL );
                Py_INCREF( tmp_assign_source_15 );
                var_name = tmp_assign_source_15;
            }
            {
                PyObject *tmp_assign_source_16;
                PyObject *tmp_called_instance_7;
                PyObject *tmp_mvar_value_6;
                PyObject *tmp_args_element_name_5;
                tmp_mvar_value_6 = GET_STRING_DICT_VALUE( moduledict_platform, (Nuitka_StringObject *)const_str_plain__sys_version_parser );

                if (unlikely( tmp_mvar_value_6 == NULL ))
                {
                    tmp_mvar_value_6 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain__sys_version_parser );
                }

                if ( tmp_mvar_value_6 == NULL )
                {

                    exception_type = PyExc_NameError;
                    Py_INCREF( exception_type );
                    exception_value = PyUnicode_FromFormat( "name '%s' is not defined", "_sys_version_parser" );
                    exception_tb = NULL;
                    NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
                    CHAIN_EXCEPTION( exception_value );

                    exception_lineno = 1199;
                    type_description_1 = "oooooooooooooo";
                    goto frame_exception_exit_1;
                }

                tmp_called_instance_7 = tmp_mvar_value_6;
                CHECK_OBJECT( par_sys_version );
                tmp_args_element_name_5 = par_sys_version;
                frame_43a808c2e7d2ad693508adcb974b4533->m_frame.f_lineno = 1199;
                {
                    PyObject *call_args[] = { tmp_args_element_name_5 };
                    tmp_assign_source_16 = CALL_METHOD_WITH_ARGS1( tmp_called_instance_7, const_str_plain_match, call_args );
                }

                if ( tmp_assign_source_16 == NULL )
                {
                    assert( ERROR_OCCURRED() );

                    FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                    exception_lineno = 1199;
                    type_description_1 = "oooooooooooooo";
                    goto frame_exception_exit_1;
                }
                assert( var_match == NULL );
                var_match = tmp_assign_source_16;
            }
            {
                nuitka_bool tmp_condition_result_7;
                PyObject *tmp_compexpr_left_5;
                PyObject *tmp_compexpr_right_5;
                CHECK_OBJECT( var_match );
                tmp_compexpr_left_5 = var_match;
                tmp_compexpr_right_5 = Py_None;
                tmp_condition_result_7 = ( tmp_compexpr_left_5 == tmp_compexpr_right_5 ) ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
                if ( tmp_condition_result_7 == NUITKA_BOOL_TRUE )
                {
                    goto branch_yes_7;
                }
                else
                {
                    goto branch_no_7;
                }
                branch_yes_7:;
                {
                    PyObject *tmp_raise_type_2;
                    PyObject *tmp_make_exception_arg_2;
                    PyObject *tmp_left_name_2;
                    PyObject *tmp_right_name_2;
                    PyObject *tmp_operand_name_2;
                    tmp_left_name_2 = const_str_digest_2f1d8a4bf4076819a8462e3516cd3c4b;
                    CHECK_OBJECT( par_sys_version );
                    tmp_operand_name_2 = par_sys_version;
                    tmp_right_name_2 = UNARY_OPERATION( PyObject_Repr, tmp_operand_name_2 );
                    if ( tmp_right_name_2 == NULL )
                    {
                        assert( ERROR_OCCURRED() );

                        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                        exception_lineno = 1203;
                        type_description_1 = "oooooooooooooo";
                        goto frame_exception_exit_1;
                    }
                    tmp_make_exception_arg_2 = BINARY_OPERATION_REMAINDER( tmp_left_name_2, tmp_right_name_2 );
                    Py_DECREF( tmp_right_name_2 );
                    if ( tmp_make_exception_arg_2 == NULL )
                    {
                        assert( ERROR_OCCURRED() );

                        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                        exception_lineno = 1202;
                        type_description_1 = "oooooooooooooo";
                        goto frame_exception_exit_1;
                    }
                    frame_43a808c2e7d2ad693508adcb974b4533->m_frame.f_lineno = 1201;
                    {
                        PyObject *call_args[] = { tmp_make_exception_arg_2 };
                        tmp_raise_type_2 = CALL_FUNCTION_WITH_ARGS1( PyExc_ValueError, call_args );
                    }

                    Py_DECREF( tmp_make_exception_arg_2 );
                    assert( !(tmp_raise_type_2 == NULL) );
                    exception_type = tmp_raise_type_2;
                    exception_lineno = 1201;
                    RAISE_EXCEPTION_WITH_TYPE( &exception_type, &exception_value, &exception_tb );
                    type_description_1 = "oooooooooooooo";
                    goto frame_exception_exit_1;
                }
                branch_no_7:;
            }
            // Tried code:
            {
                PyObject *tmp_assign_source_17;
                PyObject *tmp_iter_arg_2;
                PyObject *tmp_called_instance_8;
                CHECK_OBJECT( var_match );
                tmp_called_instance_8 = var_match;
                frame_43a808c2e7d2ad693508adcb974b4533->m_frame.f_lineno = 1204;
                tmp_iter_arg_2 = CALL_METHOD_NO_ARGS( tmp_called_instance_8, const_str_plain_groups );
                if ( tmp_iter_arg_2 == NULL )
                {
                    assert( ERROR_OCCURRED() );

                    FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                    exception_lineno = 1204;
                    type_description_1 = "oooooooooooooo";
                    goto try_except_handler_4;
                }
                tmp_assign_source_17 = MAKE_UNPACK_ITERATOR( tmp_iter_arg_2 );
                Py_DECREF( tmp_iter_arg_2 );
                if ( tmp_assign_source_17 == NULL )
                {
                    assert( ERROR_OCCURRED() );

                    FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                    exception_lineno = 1204;
                    type_description_1 = "oooooooooooooo";
                    goto try_except_handler_4;
                }
                assert( tmp_tuple_unpack_2__source_iter == NULL );
                tmp_tuple_unpack_2__source_iter = tmp_assign_source_17;
            }
            // Tried code:
            {
                PyObject *tmp_assign_source_18;
                PyObject *tmp_unpack_4;
                CHECK_OBJECT( tmp_tuple_unpack_2__source_iter );
                tmp_unpack_4 = tmp_tuple_unpack_2__source_iter;
                tmp_assign_source_18 = UNPACK_NEXT( tmp_unpack_4, 0, 5 );
                if ( tmp_assign_source_18 == NULL )
                {
                    if ( !ERROR_OCCURRED() )
                    {
                        exception_type = PyExc_StopIteration;
                        Py_INCREF( exception_type );
                        exception_value = NULL;
                        exception_tb = NULL;
                    }
                    else
                    {
                        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
                    }


                    type_description_1 = "oooooooooooooo";
                    exception_lineno = 1204;
                    goto try_except_handler_5;
                }
                assert( tmp_tuple_unpack_2__element_1 == NULL );
                tmp_tuple_unpack_2__element_1 = tmp_assign_source_18;
            }
            {
                PyObject *tmp_assign_source_19;
                PyObject *tmp_unpack_5;
                CHECK_OBJECT( tmp_tuple_unpack_2__source_iter );
                tmp_unpack_5 = tmp_tuple_unpack_2__source_iter;
                tmp_assign_source_19 = UNPACK_NEXT( tmp_unpack_5, 1, 5 );
                if ( tmp_assign_source_19 == NULL )
                {
                    if ( !ERROR_OCCURRED() )
                    {
                        exception_type = PyExc_StopIteration;
                        Py_INCREF( exception_type );
                        exception_value = NULL;
                        exception_tb = NULL;
                    }
                    else
                    {
                        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
                    }


                    type_description_1 = "oooooooooooooo";
                    exception_lineno = 1204;
                    goto try_except_handler_5;
                }
                assert( tmp_tuple_unpack_2__element_2 == NULL );
                tmp_tuple_unpack_2__element_2 = tmp_assign_source_19;
            }
            {
                PyObject *tmp_assign_source_20;
                PyObject *tmp_unpack_6;
                CHECK_OBJECT( tmp_tuple_unpack_2__source_iter );
                tmp_unpack_6 = tmp_tuple_unpack_2__source_iter;
                tmp_assign_source_20 = UNPACK_NEXT( tmp_unpack_6, 2, 5 );
                if ( tmp_assign_source_20 == NULL )
                {
                    if ( !ERROR_OCCURRED() )
                    {
                        exception_type = PyExc_StopIteration;
                        Py_INCREF( exception_type );
                        exception_value = NULL;
                        exception_tb = NULL;
                    }
                    else
                    {
                        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
                    }


                    type_description_1 = "oooooooooooooo";
                    exception_lineno = 1204;
                    goto try_except_handler_5;
                }
                assert( tmp_tuple_unpack_2__element_3 == NULL );
                tmp_tuple_unpack_2__element_3 = tmp_assign_source_20;
            }
            {
                PyObject *tmp_assign_source_21;
                PyObject *tmp_unpack_7;
                CHECK_OBJECT( tmp_tuple_unpack_2__source_iter );
                tmp_unpack_7 = tmp_tuple_unpack_2__source_iter;
                tmp_assign_source_21 = UNPACK_NEXT( tmp_unpack_7, 3, 5 );
                if ( tmp_assign_source_21 == NULL )
                {
                    if ( !ERROR_OCCURRED() )
                    {
                        exception_type = PyExc_StopIteration;
                        Py_INCREF( exception_type );
                        exception_value = NULL;
                        exception_tb = NULL;
                    }
                    else
                    {
                        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
                    }


                    type_description_1 = "oooooooooooooo";
                    exception_lineno = 1204;
                    goto try_except_handler_5;
                }
                assert( tmp_tuple_unpack_2__element_4 == NULL );
                tmp_tuple_unpack_2__element_4 = tmp_assign_source_21;
            }
            {
                PyObject *tmp_assign_source_22;
                PyObject *tmp_unpack_8;
                CHECK_OBJECT( tmp_tuple_unpack_2__source_iter );
                tmp_unpack_8 = tmp_tuple_unpack_2__source_iter;
                tmp_assign_source_22 = UNPACK_NEXT( tmp_unpack_8, 4, 5 );
                if ( tmp_assign_source_22 == NULL )
                {
                    if ( !ERROR_OCCURRED() )
                    {
                        exception_type = PyExc_StopIteration;
                        Py_INCREF( exception_type );
                        exception_value = NULL;
                        exception_tb = NULL;
                    }
                    else
                    {
                        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
                    }


                    type_description_1 = "oooooooooooooo";
                    exception_lineno = 1204;
                    goto try_except_handler_5;
                }
                assert( tmp_tuple_unpack_2__element_5 == NULL );
                tmp_tuple_unpack_2__element_5 = tmp_assign_source_22;
            }
            {
                PyObject *tmp_iterator_name_2;
                CHECK_OBJECT( tmp_tuple_unpack_2__source_iter );
                tmp_iterator_name_2 = tmp_tuple_unpack_2__source_iter;
                // Check if iterator has left-over elements.
                CHECK_OBJECT( tmp_iterator_name_2 ); assert( HAS_ITERNEXT( tmp_iterator_name_2 ) );

                tmp_iterator_attempt = (*Py_TYPE( tmp_iterator_name_2 )->tp_iternext)( tmp_iterator_name_2 );

                if (likely( tmp_iterator_attempt == NULL ))
                {
                    PyObject *error = GET_ERROR_OCCURRED();

                    if ( error != NULL )
                    {
                        if ( EXCEPTION_MATCH_BOOL_SINGLE( error, PyExc_StopIteration ))
                        {
                            CLEAR_ERROR_OCCURRED();
                        }
                        else
                        {
                            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );

                            type_description_1 = "oooooooooooooo";
                            exception_lineno = 1204;
                            goto try_except_handler_5;
                        }
                    }
                }
                else
                {
                    Py_DECREF( tmp_iterator_attempt );

                    // TODO: Could avoid PyErr_Format.
#if PYTHON_VERSION < 300
                    PyErr_Format( PyExc_ValueError, "too many values to unpack" );
#else
                    PyErr_Format( PyExc_ValueError, "too many values to unpack (expected 5)" );
#endif
                    FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );

                    type_description_1 = "oooooooooooooo";
                    exception_lineno = 1204;
                    goto try_except_handler_5;
                }
            }
            goto try_end_3;
            // Exception handler code:
            try_except_handler_5:;
            exception_keeper_type_3 = exception_type;
            exception_keeper_value_3 = exception_value;
            exception_keeper_tb_3 = exception_tb;
            exception_keeper_lineno_3 = exception_lineno;
            exception_type = NULL;
            exception_value = NULL;
            exception_tb = NULL;
            exception_lineno = 0;

            CHECK_OBJECT( (PyObject *)tmp_tuple_unpack_2__source_iter );
            Py_DECREF( tmp_tuple_unpack_2__source_iter );
            tmp_tuple_unpack_2__source_iter = NULL;

            // Re-raise.
            exception_type = exception_keeper_type_3;
            exception_value = exception_keeper_value_3;
            exception_tb = exception_keeper_tb_3;
            exception_lineno = exception_keeper_lineno_3;

            goto try_except_handler_4;
            // End of try:
            try_end_3:;
            goto try_end_4;
            // Exception handler code:
            try_except_handler_4:;
            exception_keeper_type_4 = exception_type;
            exception_keeper_value_4 = exception_value;
            exception_keeper_tb_4 = exception_tb;
            exception_keeper_lineno_4 = exception_lineno;
            exception_type = NULL;
            exception_value = NULL;
            exception_tb = NULL;
            exception_lineno = 0;

            Py_XDECREF( tmp_tuple_unpack_2__element_1 );
            tmp_tuple_unpack_2__element_1 = NULL;

            Py_XDECREF( tmp_tuple_unpack_2__element_2 );
            tmp_tuple_unpack_2__element_2 = NULL;

            Py_XDECREF( tmp_tuple_unpack_2__element_3 );
            tmp_tuple_unpack_2__element_3 = NULL;

            Py_XDECREF( tmp_tuple_unpack_2__element_4 );
            tmp_tuple_unpack_2__element_4 = NULL;

            Py_XDECREF( tmp_tuple_unpack_2__element_5 );
            tmp_tuple_unpack_2__element_5 = NULL;

            // Re-raise.
            exception_type = exception_keeper_type_4;
            exception_value = exception_keeper_value_4;
            exception_tb = exception_keeper_tb_4;
            exception_lineno = exception_keeper_lineno_4;

            goto frame_exception_exit_1;
            // End of try:
            try_end_4:;
            CHECK_OBJECT( (PyObject *)tmp_tuple_unpack_2__source_iter );
            Py_DECREF( tmp_tuple_unpack_2__source_iter );
            tmp_tuple_unpack_2__source_iter = NULL;

            {
                PyObject *tmp_assign_source_23;
                CHECK_OBJECT( tmp_tuple_unpack_2__element_1 );
                tmp_assign_source_23 = tmp_tuple_unpack_2__element_1;
                assert( var_version == NULL );
                Py_INCREF( tmp_assign_source_23 );
                var_version = tmp_assign_source_23;
            }
            Py_XDECREF( tmp_tuple_unpack_2__element_1 );
            tmp_tuple_unpack_2__element_1 = NULL;

            {
                PyObject *tmp_assign_source_24;
                CHECK_OBJECT( tmp_tuple_unpack_2__element_2 );
                tmp_assign_source_24 = tmp_tuple_unpack_2__element_2;
                assert( var_buildno == NULL );
                Py_INCREF( tmp_assign_source_24 );
                var_buildno = tmp_assign_source_24;
            }
            Py_XDECREF( tmp_tuple_unpack_2__element_2 );
            tmp_tuple_unpack_2__element_2 = NULL;

            {
                PyObject *tmp_assign_source_25;
                CHECK_OBJECT( tmp_tuple_unpack_2__element_3 );
                tmp_assign_source_25 = tmp_tuple_unpack_2__element_3;
                assert( var_builddate == NULL );
                Py_INCREF( tmp_assign_source_25 );
                var_builddate = tmp_assign_source_25;
            }
            Py_XDECREF( tmp_tuple_unpack_2__element_3 );
            tmp_tuple_unpack_2__element_3 = NULL;

            {
                PyObject *tmp_assign_source_26;
                CHECK_OBJECT( tmp_tuple_unpack_2__element_4 );
                tmp_assign_source_26 = tmp_tuple_unpack_2__element_4;
                assert( var_buildtime == NULL );
                Py_INCREF( tmp_assign_source_26 );
                var_buildtime = tmp_assign_source_26;
            }
            Py_XDECREF( tmp_tuple_unpack_2__element_4 );
            tmp_tuple_unpack_2__element_4 = NULL;

            {
                PyObject *tmp_assign_source_27;
                CHECK_OBJECT( tmp_tuple_unpack_2__element_5 );
                tmp_assign_source_27 = tmp_tuple_unpack_2__element_5;
                assert( var__ == NULL );
                Py_INCREF( tmp_assign_source_27 );
                var__ = tmp_assign_source_27;
            }
            Py_XDECREF( tmp_tuple_unpack_2__element_5 );
            tmp_tuple_unpack_2__element_5 = NULL;

            {
                nuitka_bool tmp_condition_result_8;
                PyObject *tmp_compexpr_left_6;
                PyObject *tmp_compexpr_right_6;
                CHECK_OBJECT( var_builddate );
                tmp_compexpr_left_6 = var_builddate;
                tmp_compexpr_right_6 = Py_None;
                tmp_condition_result_8 = ( tmp_compexpr_left_6 == tmp_compexpr_right_6 ) ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
                if ( tmp_condition_result_8 == NUITKA_BOOL_TRUE )
                {
                    goto branch_yes_8;
                }
                else
                {
                    goto branch_no_8;
                }
                branch_yes_8:;
                {
                    PyObject *tmp_assign_source_28;
                    tmp_assign_source_28 = const_str_empty;
                    {
                        PyObject *old = var_builddate;
                        assert( old != NULL );
                        var_builddate = tmp_assign_source_28;
                        Py_INCREF( var_builddate );
                        Py_DECREF( old );
                    }

                }
                branch_no_8:;
            }
            {
                PyObject *tmp_assign_source_29;
                PyObject *tmp_source_name_3;
                PyObject *tmp_mvar_value_7;
                tmp_mvar_value_7 = GET_STRING_DICT_VALUE( moduledict_platform, (Nuitka_StringObject *)const_str_plain_sys );

                if (unlikely( tmp_mvar_value_7 == NULL ))
                {
                    tmp_mvar_value_7 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_sys );
                }

                if ( tmp_mvar_value_7 == NULL )
                {

                    exception_type = PyExc_NameError;
                    Py_INCREF( exception_type );
                    exception_value = PyUnicode_FromFormat( "name '%s' is not defined", "sys" );
                    exception_tb = NULL;
                    NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
                    CHAIN_EXCEPTION( exception_value );

                    exception_lineno = 1207;
                    type_description_1 = "oooooooooooooo";
                    goto frame_exception_exit_1;
                }

                tmp_source_name_3 = tmp_mvar_value_7;
                tmp_assign_source_29 = LOOKUP_ATTRIBUTE( tmp_source_name_3, const_str_plain_platform );
                if ( tmp_assign_source_29 == NULL )
                {
                    assert( ERROR_OCCURRED() );

                    FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                    exception_lineno = 1207;
                    type_description_1 = "oooooooooooooo";
                    goto frame_exception_exit_1;
                }
                assert( var_compiler == NULL );
                var_compiler = tmp_assign_source_29;
            }
            goto branch_end_6;
            branch_no_6:;
            {
                nuitka_bool tmp_condition_result_9;
                PyObject *tmp_compexpr_left_7;
                PyObject *tmp_compexpr_right_7;
                tmp_compexpr_left_7 = const_str_plain_PyPy;
                CHECK_OBJECT( par_sys_version );
                tmp_compexpr_right_7 = par_sys_version;
                tmp_res = PySequence_Contains( tmp_compexpr_right_7, tmp_compexpr_left_7 );
                if ( tmp_res == -1 )
                {
                    assert( ERROR_OCCURRED() );

                    FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                    exception_lineno = 1209;
                    type_description_1 = "oooooooooooooo";
                    goto frame_exception_exit_1;
                }
                tmp_condition_result_9 = ( tmp_res == 1 ) ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
                if ( tmp_condition_result_9 == NUITKA_BOOL_TRUE )
                {
                    goto branch_yes_9;
                }
                else
                {
                    goto branch_no_9;
                }
                branch_yes_9:;
                {
                    PyObject *tmp_assign_source_30;
                    tmp_assign_source_30 = const_str_plain_PyPy;
                    assert( var_name == NULL );
                    Py_INCREF( tmp_assign_source_30 );
                    var_name = tmp_assign_source_30;
                }
                {
                    PyObject *tmp_assign_source_31;
                    PyObject *tmp_called_instance_9;
                    PyObject *tmp_mvar_value_8;
                    PyObject *tmp_args_element_name_6;
                    tmp_mvar_value_8 = GET_STRING_DICT_VALUE( moduledict_platform, (Nuitka_StringObject *)const_str_plain__pypy_sys_version_parser );

                    if (unlikely( tmp_mvar_value_8 == NULL ))
                    {
                        tmp_mvar_value_8 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain__pypy_sys_version_parser );
                    }

                    if ( tmp_mvar_value_8 == NULL )
                    {

                        exception_type = PyExc_NameError;
                        Py_INCREF( exception_type );
                        exception_value = PyUnicode_FromFormat( "name '%s' is not defined", "_pypy_sys_version_parser" );
                        exception_tb = NULL;
                        NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
                        CHAIN_EXCEPTION( exception_value );

                        exception_lineno = 1212;
                        type_description_1 = "oooooooooooooo";
                        goto frame_exception_exit_1;
                    }

                    tmp_called_instance_9 = tmp_mvar_value_8;
                    CHECK_OBJECT( par_sys_version );
                    tmp_args_element_name_6 = par_sys_version;
                    frame_43a808c2e7d2ad693508adcb974b4533->m_frame.f_lineno = 1212;
                    {
                        PyObject *call_args[] = { tmp_args_element_name_6 };
                        tmp_assign_source_31 = CALL_METHOD_WITH_ARGS1( tmp_called_instance_9, const_str_plain_match, call_args );
                    }

                    if ( tmp_assign_source_31 == NULL )
                    {
                        assert( ERROR_OCCURRED() );

                        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                        exception_lineno = 1212;
                        type_description_1 = "oooooooooooooo";
                        goto frame_exception_exit_1;
                    }
                    assert( var_match == NULL );
                    var_match = tmp_assign_source_31;
                }
                {
                    nuitka_bool tmp_condition_result_10;
                    PyObject *tmp_compexpr_left_8;
                    PyObject *tmp_compexpr_right_8;
                    CHECK_OBJECT( var_match );
                    tmp_compexpr_left_8 = var_match;
                    tmp_compexpr_right_8 = Py_None;
                    tmp_condition_result_10 = ( tmp_compexpr_left_8 == tmp_compexpr_right_8 ) ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
                    if ( tmp_condition_result_10 == NUITKA_BOOL_TRUE )
                    {
                        goto branch_yes_10;
                    }
                    else
                    {
                        goto branch_no_10;
                    }
                    branch_yes_10:;
                    {
                        PyObject *tmp_raise_type_3;
                        PyObject *tmp_make_exception_arg_3;
                        PyObject *tmp_left_name_3;
                        PyObject *tmp_right_name_3;
                        PyObject *tmp_operand_name_3;
                        tmp_left_name_3 = const_str_digest_7e86eb27fe234136a687cb753da10a81;
                        CHECK_OBJECT( par_sys_version );
                        tmp_operand_name_3 = par_sys_version;
                        tmp_right_name_3 = UNARY_OPERATION( PyObject_Repr, tmp_operand_name_3 );
                        if ( tmp_right_name_3 == NULL )
                        {
                            assert( ERROR_OCCURRED() );

                            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                            exception_lineno = 1215;
                            type_description_1 = "oooooooooooooo";
                            goto frame_exception_exit_1;
                        }
                        tmp_make_exception_arg_3 = BINARY_OPERATION_REMAINDER( tmp_left_name_3, tmp_right_name_3 );
                        Py_DECREF( tmp_right_name_3 );
                        if ( tmp_make_exception_arg_3 == NULL )
                        {
                            assert( ERROR_OCCURRED() );

                            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                            exception_lineno = 1214;
                            type_description_1 = "oooooooooooooo";
                            goto frame_exception_exit_1;
                        }
                        frame_43a808c2e7d2ad693508adcb974b4533->m_frame.f_lineno = 1214;
                        {
                            PyObject *call_args[] = { tmp_make_exception_arg_3 };
                            tmp_raise_type_3 = CALL_FUNCTION_WITH_ARGS1( PyExc_ValueError, call_args );
                        }

                        Py_DECREF( tmp_make_exception_arg_3 );
                        assert( !(tmp_raise_type_3 == NULL) );
                        exception_type = tmp_raise_type_3;
                        exception_lineno = 1214;
                        RAISE_EXCEPTION_WITH_TYPE( &exception_type, &exception_value, &exception_tb );
                        type_description_1 = "oooooooooooooo";
                        goto frame_exception_exit_1;
                    }
                    branch_no_10:;
                }
                // Tried code:
                {
                    PyObject *tmp_assign_source_32;
                    PyObject *tmp_iter_arg_3;
                    PyObject *tmp_called_instance_10;
                    CHECK_OBJECT( var_match );
                    tmp_called_instance_10 = var_match;
                    frame_43a808c2e7d2ad693508adcb974b4533->m_frame.f_lineno = 1216;
                    tmp_iter_arg_3 = CALL_METHOD_NO_ARGS( tmp_called_instance_10, const_str_plain_groups );
                    if ( tmp_iter_arg_3 == NULL )
                    {
                        assert( ERROR_OCCURRED() );

                        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                        exception_lineno = 1216;
                        type_description_1 = "oooooooooooooo";
                        goto try_except_handler_6;
                    }
                    tmp_assign_source_32 = MAKE_UNPACK_ITERATOR( tmp_iter_arg_3 );
                    Py_DECREF( tmp_iter_arg_3 );
                    if ( tmp_assign_source_32 == NULL )
                    {
                        assert( ERROR_OCCURRED() );

                        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                        exception_lineno = 1216;
                        type_description_1 = "oooooooooooooo";
                        goto try_except_handler_6;
                    }
                    assert( tmp_tuple_unpack_3__source_iter == NULL );
                    tmp_tuple_unpack_3__source_iter = tmp_assign_source_32;
                }
                // Tried code:
                {
                    PyObject *tmp_assign_source_33;
                    PyObject *tmp_unpack_9;
                    CHECK_OBJECT( tmp_tuple_unpack_3__source_iter );
                    tmp_unpack_9 = tmp_tuple_unpack_3__source_iter;
                    tmp_assign_source_33 = UNPACK_NEXT( tmp_unpack_9, 0, 4 );
                    if ( tmp_assign_source_33 == NULL )
                    {
                        if ( !ERROR_OCCURRED() )
                        {
                            exception_type = PyExc_StopIteration;
                            Py_INCREF( exception_type );
                            exception_value = NULL;
                            exception_tb = NULL;
                        }
                        else
                        {
                            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
                        }


                        type_description_1 = "oooooooooooooo";
                        exception_lineno = 1216;
                        goto try_except_handler_7;
                    }
                    assert( tmp_tuple_unpack_3__element_1 == NULL );
                    tmp_tuple_unpack_3__element_1 = tmp_assign_source_33;
                }
                {
                    PyObject *tmp_assign_source_34;
                    PyObject *tmp_unpack_10;
                    CHECK_OBJECT( tmp_tuple_unpack_3__source_iter );
                    tmp_unpack_10 = tmp_tuple_unpack_3__source_iter;
                    tmp_assign_source_34 = UNPACK_NEXT( tmp_unpack_10, 1, 4 );
                    if ( tmp_assign_source_34 == NULL )
                    {
                        if ( !ERROR_OCCURRED() )
                        {
                            exception_type = PyExc_StopIteration;
                            Py_INCREF( exception_type );
                            exception_value = NULL;
                            exception_tb = NULL;
                        }
                        else
                        {
                            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
                        }


                        type_description_1 = "oooooooooooooo";
                        exception_lineno = 1216;
                        goto try_except_handler_7;
                    }
                    assert( tmp_tuple_unpack_3__element_2 == NULL );
                    tmp_tuple_unpack_3__element_2 = tmp_assign_source_34;
                }
                {
                    PyObject *tmp_assign_source_35;
                    PyObject *tmp_unpack_11;
                    CHECK_OBJECT( tmp_tuple_unpack_3__source_iter );
                    tmp_unpack_11 = tmp_tuple_unpack_3__source_iter;
                    tmp_assign_source_35 = UNPACK_NEXT( tmp_unpack_11, 2, 4 );
                    if ( tmp_assign_source_35 == NULL )
                    {
                        if ( !ERROR_OCCURRED() )
                        {
                            exception_type = PyExc_StopIteration;
                            Py_INCREF( exception_type );
                            exception_value = NULL;
                            exception_tb = NULL;
                        }
                        else
                        {
                            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
                        }


                        type_description_1 = "oooooooooooooo";
                        exception_lineno = 1216;
                        goto try_except_handler_7;
                    }
                    assert( tmp_tuple_unpack_3__element_3 == NULL );
                    tmp_tuple_unpack_3__element_3 = tmp_assign_source_35;
                }
                {
                    PyObject *tmp_assign_source_36;
                    PyObject *tmp_unpack_12;
                    CHECK_OBJECT( tmp_tuple_unpack_3__source_iter );
                    tmp_unpack_12 = tmp_tuple_unpack_3__source_iter;
                    tmp_assign_source_36 = UNPACK_NEXT( tmp_unpack_12, 3, 4 );
                    if ( tmp_assign_source_36 == NULL )
                    {
                        if ( !ERROR_OCCURRED() )
                        {
                            exception_type = PyExc_StopIteration;
                            Py_INCREF( exception_type );
                            exception_value = NULL;
                            exception_tb = NULL;
                        }
                        else
                        {
                            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
                        }


                        type_description_1 = "oooooooooooooo";
                        exception_lineno = 1216;
                        goto try_except_handler_7;
                    }
                    assert( tmp_tuple_unpack_3__element_4 == NULL );
                    tmp_tuple_unpack_3__element_4 = tmp_assign_source_36;
                }
                {
                    PyObject *tmp_iterator_name_3;
                    CHECK_OBJECT( tmp_tuple_unpack_3__source_iter );
                    tmp_iterator_name_3 = tmp_tuple_unpack_3__source_iter;
                    // Check if iterator has left-over elements.
                    CHECK_OBJECT( tmp_iterator_name_3 ); assert( HAS_ITERNEXT( tmp_iterator_name_3 ) );

                    tmp_iterator_attempt = (*Py_TYPE( tmp_iterator_name_3 )->tp_iternext)( tmp_iterator_name_3 );

                    if (likely( tmp_iterator_attempt == NULL ))
                    {
                        PyObject *error = GET_ERROR_OCCURRED();

                        if ( error != NULL )
                        {
                            if ( EXCEPTION_MATCH_BOOL_SINGLE( error, PyExc_StopIteration ))
                            {
                                CLEAR_ERROR_OCCURRED();
                            }
                            else
                            {
                                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );

                                type_description_1 = "oooooooooooooo";
                                exception_lineno = 1216;
                                goto try_except_handler_7;
                            }
                        }
                    }
                    else
                    {
                        Py_DECREF( tmp_iterator_attempt );

                        // TODO: Could avoid PyErr_Format.
#if PYTHON_VERSION < 300
                        PyErr_Format( PyExc_ValueError, "too many values to unpack" );
#else
                        PyErr_Format( PyExc_ValueError, "too many values to unpack (expected 4)" );
#endif
                        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );

                        type_description_1 = "oooooooooooooo";
                        exception_lineno = 1216;
                        goto try_except_handler_7;
                    }
                }
                goto try_end_5;
                // Exception handler code:
                try_except_handler_7:;
                exception_keeper_type_5 = exception_type;
                exception_keeper_value_5 = exception_value;
                exception_keeper_tb_5 = exception_tb;
                exception_keeper_lineno_5 = exception_lineno;
                exception_type = NULL;
                exception_value = NULL;
                exception_tb = NULL;
                exception_lineno = 0;

                CHECK_OBJECT( (PyObject *)tmp_tuple_unpack_3__source_iter );
                Py_DECREF( tmp_tuple_unpack_3__source_iter );
                tmp_tuple_unpack_3__source_iter = NULL;

                // Re-raise.
                exception_type = exception_keeper_type_5;
                exception_value = exception_keeper_value_5;
                exception_tb = exception_keeper_tb_5;
                exception_lineno = exception_keeper_lineno_5;

                goto try_except_handler_6;
                // End of try:
                try_end_5:;
                goto try_end_6;
                // Exception handler code:
                try_except_handler_6:;
                exception_keeper_type_6 = exception_type;
                exception_keeper_value_6 = exception_value;
                exception_keeper_tb_6 = exception_tb;
                exception_keeper_lineno_6 = exception_lineno;
                exception_type = NULL;
                exception_value = NULL;
                exception_tb = NULL;
                exception_lineno = 0;

                Py_XDECREF( tmp_tuple_unpack_3__element_1 );
                tmp_tuple_unpack_3__element_1 = NULL;

                Py_XDECREF( tmp_tuple_unpack_3__element_2 );
                tmp_tuple_unpack_3__element_2 = NULL;

                Py_XDECREF( tmp_tuple_unpack_3__element_3 );
                tmp_tuple_unpack_3__element_3 = NULL;

                Py_XDECREF( tmp_tuple_unpack_3__element_4 );
                tmp_tuple_unpack_3__element_4 = NULL;

                // Re-raise.
                exception_type = exception_keeper_type_6;
                exception_value = exception_keeper_value_6;
                exception_tb = exception_keeper_tb_6;
                exception_lineno = exception_keeper_lineno_6;

                goto frame_exception_exit_1;
                // End of try:
                try_end_6:;
                CHECK_OBJECT( (PyObject *)tmp_tuple_unpack_3__source_iter );
                Py_DECREF( tmp_tuple_unpack_3__source_iter );
                tmp_tuple_unpack_3__source_iter = NULL;

                {
                    PyObject *tmp_assign_source_37;
                    CHECK_OBJECT( tmp_tuple_unpack_3__element_1 );
                    tmp_assign_source_37 = tmp_tuple_unpack_3__element_1;
                    assert( var_version == NULL );
                    Py_INCREF( tmp_assign_source_37 );
                    var_version = tmp_assign_source_37;
                }
                Py_XDECREF( tmp_tuple_unpack_3__element_1 );
                tmp_tuple_unpack_3__element_1 = NULL;

                {
                    PyObject *tmp_assign_source_38;
                    CHECK_OBJECT( tmp_tuple_unpack_3__element_2 );
                    tmp_assign_source_38 = tmp_tuple_unpack_3__element_2;
                    assert( var_buildno == NULL );
                    Py_INCREF( tmp_assign_source_38 );
                    var_buildno = tmp_assign_source_38;
                }
                Py_XDECREF( tmp_tuple_unpack_3__element_2 );
                tmp_tuple_unpack_3__element_2 = NULL;

                {
                    PyObject *tmp_assign_source_39;
                    CHECK_OBJECT( tmp_tuple_unpack_3__element_3 );
                    tmp_assign_source_39 = tmp_tuple_unpack_3__element_3;
                    assert( var_builddate == NULL );
                    Py_INCREF( tmp_assign_source_39 );
                    var_builddate = tmp_assign_source_39;
                }
                Py_XDECREF( tmp_tuple_unpack_3__element_3 );
                tmp_tuple_unpack_3__element_3 = NULL;

                {
                    PyObject *tmp_assign_source_40;
                    CHECK_OBJECT( tmp_tuple_unpack_3__element_4 );
                    tmp_assign_source_40 = tmp_tuple_unpack_3__element_4;
                    assert( var_buildtime == NULL );
                    Py_INCREF( tmp_assign_source_40 );
                    var_buildtime = tmp_assign_source_40;
                }
                Py_XDECREF( tmp_tuple_unpack_3__element_4 );
                tmp_tuple_unpack_3__element_4 = NULL;

                {
                    PyObject *tmp_assign_source_41;
                    tmp_assign_source_41 = const_str_empty;
                    assert( var_compiler == NULL );
                    Py_INCREF( tmp_assign_source_41 );
                    var_compiler = tmp_assign_source_41;
                }
                goto branch_end_9;
                branch_no_9:;
                {
                    PyObject *tmp_assign_source_42;
                    PyObject *tmp_called_instance_11;
                    PyObject *tmp_mvar_value_9;
                    PyObject *tmp_args_element_name_7;
                    tmp_mvar_value_9 = GET_STRING_DICT_VALUE( moduledict_platform, (Nuitka_StringObject *)const_str_plain__sys_version_parser );

                    if (unlikely( tmp_mvar_value_9 == NULL ))
                    {
                        tmp_mvar_value_9 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain__sys_version_parser );
                    }

                    if ( tmp_mvar_value_9 == NULL )
                    {

                        exception_type = PyExc_NameError;
                        Py_INCREF( exception_type );
                        exception_value = PyUnicode_FromFormat( "name '%s' is not defined", "_sys_version_parser" );
                        exception_tb = NULL;
                        NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
                        CHAIN_EXCEPTION( exception_value );

                        exception_lineno = 1221;
                        type_description_1 = "oooooooooooooo";
                        goto frame_exception_exit_1;
                    }

                    tmp_called_instance_11 = tmp_mvar_value_9;
                    CHECK_OBJECT( par_sys_version );
                    tmp_args_element_name_7 = par_sys_version;
                    frame_43a808c2e7d2ad693508adcb974b4533->m_frame.f_lineno = 1221;
                    {
                        PyObject *call_args[] = { tmp_args_element_name_7 };
                        tmp_assign_source_42 = CALL_METHOD_WITH_ARGS1( tmp_called_instance_11, const_str_plain_match, call_args );
                    }

                    if ( tmp_assign_source_42 == NULL )
                    {
                        assert( ERROR_OCCURRED() );

                        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                        exception_lineno = 1221;
                        type_description_1 = "oooooooooooooo";
                        goto frame_exception_exit_1;
                    }
                    assert( var_match == NULL );
                    var_match = tmp_assign_source_42;
                }
                {
                    nuitka_bool tmp_condition_result_11;
                    PyObject *tmp_compexpr_left_9;
                    PyObject *tmp_compexpr_right_9;
                    CHECK_OBJECT( var_match );
                    tmp_compexpr_left_9 = var_match;
                    tmp_compexpr_right_9 = Py_None;
                    tmp_condition_result_11 = ( tmp_compexpr_left_9 == tmp_compexpr_right_9 ) ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
                    if ( tmp_condition_result_11 == NUITKA_BOOL_TRUE )
                    {
                        goto branch_yes_11;
                    }
                    else
                    {
                        goto branch_no_11;
                    }
                    branch_yes_11:;
                    {
                        PyObject *tmp_raise_type_4;
                        PyObject *tmp_make_exception_arg_4;
                        PyObject *tmp_left_name_4;
                        PyObject *tmp_right_name_4;
                        PyObject *tmp_operand_name_4;
                        tmp_left_name_4 = const_str_digest_a448315180eda5238b56e666fde580a3;
                        CHECK_OBJECT( par_sys_version );
                        tmp_operand_name_4 = par_sys_version;
                        tmp_right_name_4 = UNARY_OPERATION( PyObject_Repr, tmp_operand_name_4 );
                        if ( tmp_right_name_4 == NULL )
                        {
                            assert( ERROR_OCCURRED() );

                            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                            exception_lineno = 1225;
                            type_description_1 = "oooooooooooooo";
                            goto frame_exception_exit_1;
                        }
                        tmp_make_exception_arg_4 = BINARY_OPERATION_REMAINDER( tmp_left_name_4, tmp_right_name_4 );
                        Py_DECREF( tmp_right_name_4 );
                        if ( tmp_make_exception_arg_4 == NULL )
                        {
                            assert( ERROR_OCCURRED() );

                            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                            exception_lineno = 1224;
                            type_description_1 = "oooooooooooooo";
                            goto frame_exception_exit_1;
                        }
                        frame_43a808c2e7d2ad693508adcb974b4533->m_frame.f_lineno = 1223;
                        {
                            PyObject *call_args[] = { tmp_make_exception_arg_4 };
                            tmp_raise_type_4 = CALL_FUNCTION_WITH_ARGS1( PyExc_ValueError, call_args );
                        }

                        Py_DECREF( tmp_make_exception_arg_4 );
                        assert( !(tmp_raise_type_4 == NULL) );
                        exception_type = tmp_raise_type_4;
                        exception_lineno = 1223;
                        RAISE_EXCEPTION_WITH_TYPE( &exception_type, &exception_value, &exception_tb );
                        type_description_1 = "oooooooooooooo";
                        goto frame_exception_exit_1;
                    }
                    branch_no_11:;
                }
                // Tried code:
                {
                    PyObject *tmp_assign_source_43;
                    PyObject *tmp_iter_arg_4;
                    PyObject *tmp_called_instance_12;
                    CHECK_OBJECT( var_match );
                    tmp_called_instance_12 = var_match;
                    frame_43a808c2e7d2ad693508adcb974b4533->m_frame.f_lineno = 1227;
                    tmp_iter_arg_4 = CALL_METHOD_NO_ARGS( tmp_called_instance_12, const_str_plain_groups );
                    if ( tmp_iter_arg_4 == NULL )
                    {
                        assert( ERROR_OCCURRED() );

                        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                        exception_lineno = 1227;
                        type_description_1 = "oooooooooooooo";
                        goto try_except_handler_8;
                    }
                    tmp_assign_source_43 = MAKE_UNPACK_ITERATOR( tmp_iter_arg_4 );
                    Py_DECREF( tmp_iter_arg_4 );
                    if ( tmp_assign_source_43 == NULL )
                    {
                        assert( ERROR_OCCURRED() );

                        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                        exception_lineno = 1226;
                        type_description_1 = "oooooooooooooo";
                        goto try_except_handler_8;
                    }
                    assert( tmp_tuple_unpack_4__source_iter == NULL );
                    tmp_tuple_unpack_4__source_iter = tmp_assign_source_43;
                }
                // Tried code:
                {
                    PyObject *tmp_assign_source_44;
                    PyObject *tmp_unpack_13;
                    CHECK_OBJECT( tmp_tuple_unpack_4__source_iter );
                    tmp_unpack_13 = tmp_tuple_unpack_4__source_iter;
                    tmp_assign_source_44 = UNPACK_NEXT( tmp_unpack_13, 0, 5 );
                    if ( tmp_assign_source_44 == NULL )
                    {
                        if ( !ERROR_OCCURRED() )
                        {
                            exception_type = PyExc_StopIteration;
                            Py_INCREF( exception_type );
                            exception_value = NULL;
                            exception_tb = NULL;
                        }
                        else
                        {
                            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
                        }


                        type_description_1 = "oooooooooooooo";
                        exception_lineno = 1226;
                        goto try_except_handler_9;
                    }
                    assert( tmp_tuple_unpack_4__element_1 == NULL );
                    tmp_tuple_unpack_4__element_1 = tmp_assign_source_44;
                }
                {
                    PyObject *tmp_assign_source_45;
                    PyObject *tmp_unpack_14;
                    CHECK_OBJECT( tmp_tuple_unpack_4__source_iter );
                    tmp_unpack_14 = tmp_tuple_unpack_4__source_iter;
                    tmp_assign_source_45 = UNPACK_NEXT( tmp_unpack_14, 1, 5 );
                    if ( tmp_assign_source_45 == NULL )
                    {
                        if ( !ERROR_OCCURRED() )
                        {
                            exception_type = PyExc_StopIteration;
                            Py_INCREF( exception_type );
                            exception_value = NULL;
                            exception_tb = NULL;
                        }
                        else
                        {
                            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
                        }


                        type_description_1 = "oooooooooooooo";
                        exception_lineno = 1226;
                        goto try_except_handler_9;
                    }
                    assert( tmp_tuple_unpack_4__element_2 == NULL );
                    tmp_tuple_unpack_4__element_2 = tmp_assign_source_45;
                }
                {
                    PyObject *tmp_assign_source_46;
                    PyObject *tmp_unpack_15;
                    CHECK_OBJECT( tmp_tuple_unpack_4__source_iter );
                    tmp_unpack_15 = tmp_tuple_unpack_4__source_iter;
                    tmp_assign_source_46 = UNPACK_NEXT( tmp_unpack_15, 2, 5 );
                    if ( tmp_assign_source_46 == NULL )
                    {
                        if ( !ERROR_OCCURRED() )
                        {
                            exception_type = PyExc_StopIteration;
                            Py_INCREF( exception_type );
                            exception_value = NULL;
                            exception_tb = NULL;
                        }
                        else
                        {
                            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
                        }


                        type_description_1 = "oooooooooooooo";
                        exception_lineno = 1226;
                        goto try_except_handler_9;
                    }
                    assert( tmp_tuple_unpack_4__element_3 == NULL );
                    tmp_tuple_unpack_4__element_3 = tmp_assign_source_46;
                }
                {
                    PyObject *tmp_assign_source_47;
                    PyObject *tmp_unpack_16;
                    CHECK_OBJECT( tmp_tuple_unpack_4__source_iter );
                    tmp_unpack_16 = tmp_tuple_unpack_4__source_iter;
                    tmp_assign_source_47 = UNPACK_NEXT( tmp_unpack_16, 3, 5 );
                    if ( tmp_assign_source_47 == NULL )
                    {
                        if ( !ERROR_OCCURRED() )
                        {
                            exception_type = PyExc_StopIteration;
                            Py_INCREF( exception_type );
                            exception_value = NULL;
                            exception_tb = NULL;
                        }
                        else
                        {
                            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
                        }


                        type_description_1 = "oooooooooooooo";
                        exception_lineno = 1226;
                        goto try_except_handler_9;
                    }
                    assert( tmp_tuple_unpack_4__element_4 == NULL );
                    tmp_tuple_unpack_4__element_4 = tmp_assign_source_47;
                }
                {
                    PyObject *tmp_assign_source_48;
                    PyObject *tmp_unpack_17;
                    CHECK_OBJECT( tmp_tuple_unpack_4__source_iter );
                    tmp_unpack_17 = tmp_tuple_unpack_4__source_iter;
                    tmp_assign_source_48 = UNPACK_NEXT( tmp_unpack_17, 4, 5 );
                    if ( tmp_assign_source_48 == NULL )
                    {
                        if ( !ERROR_OCCURRED() )
                        {
                            exception_type = PyExc_StopIteration;
                            Py_INCREF( exception_type );
                            exception_value = NULL;
                            exception_tb = NULL;
                        }
                        else
                        {
                            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
                        }


                        type_description_1 = "oooooooooooooo";
                        exception_lineno = 1226;
                        goto try_except_handler_9;
                    }
                    assert( tmp_tuple_unpack_4__element_5 == NULL );
                    tmp_tuple_unpack_4__element_5 = tmp_assign_source_48;
                }
                {
                    PyObject *tmp_iterator_name_4;
                    CHECK_OBJECT( tmp_tuple_unpack_4__source_iter );
                    tmp_iterator_name_4 = tmp_tuple_unpack_4__source_iter;
                    // Check if iterator has left-over elements.
                    CHECK_OBJECT( tmp_iterator_name_4 ); assert( HAS_ITERNEXT( tmp_iterator_name_4 ) );

                    tmp_iterator_attempt = (*Py_TYPE( tmp_iterator_name_4 )->tp_iternext)( tmp_iterator_name_4 );

                    if (likely( tmp_iterator_attempt == NULL ))
                    {
                        PyObject *error = GET_ERROR_OCCURRED();

                        if ( error != NULL )
                        {
                            if ( EXCEPTION_MATCH_BOOL_SINGLE( error, PyExc_StopIteration ))
                            {
                                CLEAR_ERROR_OCCURRED();
                            }
                            else
                            {
                                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );

                                type_description_1 = "oooooooooooooo";
                                exception_lineno = 1226;
                                goto try_except_handler_9;
                            }
                        }
                    }
                    else
                    {
                        Py_DECREF( tmp_iterator_attempt );

                        // TODO: Could avoid PyErr_Format.
#if PYTHON_VERSION < 300
                        PyErr_Format( PyExc_ValueError, "too many values to unpack" );
#else
                        PyErr_Format( PyExc_ValueError, "too many values to unpack (expected 5)" );
#endif
                        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );

                        type_description_1 = "oooooooooooooo";
                        exception_lineno = 1226;
                        goto try_except_handler_9;
                    }
                }
                goto try_end_7;
                // Exception handler code:
                try_except_handler_9:;
                exception_keeper_type_7 = exception_type;
                exception_keeper_value_7 = exception_value;
                exception_keeper_tb_7 = exception_tb;
                exception_keeper_lineno_7 = exception_lineno;
                exception_type = NULL;
                exception_value = NULL;
                exception_tb = NULL;
                exception_lineno = 0;

                CHECK_OBJECT( (PyObject *)tmp_tuple_unpack_4__source_iter );
                Py_DECREF( tmp_tuple_unpack_4__source_iter );
                tmp_tuple_unpack_4__source_iter = NULL;

                // Re-raise.
                exception_type = exception_keeper_type_7;
                exception_value = exception_keeper_value_7;
                exception_tb = exception_keeper_tb_7;
                exception_lineno = exception_keeper_lineno_7;

                goto try_except_handler_8;
                // End of try:
                try_end_7:;
                goto try_end_8;
                // Exception handler code:
                try_except_handler_8:;
                exception_keeper_type_8 = exception_type;
                exception_keeper_value_8 = exception_value;
                exception_keeper_tb_8 = exception_tb;
                exception_keeper_lineno_8 = exception_lineno;
                exception_type = NULL;
                exception_value = NULL;
                exception_tb = NULL;
                exception_lineno = 0;

                Py_XDECREF( tmp_tuple_unpack_4__element_1 );
                tmp_tuple_unpack_4__element_1 = NULL;

                Py_XDECREF( tmp_tuple_unpack_4__element_2 );
                tmp_tuple_unpack_4__element_2 = NULL;

                Py_XDECREF( tmp_tuple_unpack_4__element_3 );
                tmp_tuple_unpack_4__element_3 = NULL;

                Py_XDECREF( tmp_tuple_unpack_4__element_4 );
                tmp_tuple_unpack_4__element_4 = NULL;

                Py_XDECREF( tmp_tuple_unpack_4__element_5 );
                tmp_tuple_unpack_4__element_5 = NULL;

                // Re-raise.
                exception_type = exception_keeper_type_8;
                exception_value = exception_keeper_value_8;
                exception_tb = exception_keeper_tb_8;
                exception_lineno = exception_keeper_lineno_8;

                goto frame_exception_exit_1;
                // End of try:
                try_end_8:;
                CHECK_OBJECT( (PyObject *)tmp_tuple_unpack_4__source_iter );
                Py_DECREF( tmp_tuple_unpack_4__source_iter );
                tmp_tuple_unpack_4__source_iter = NULL;

                {
                    PyObject *tmp_assign_source_49;
                    CHECK_OBJECT( tmp_tuple_unpack_4__element_1 );
                    tmp_assign_source_49 = tmp_tuple_unpack_4__element_1;
                    assert( var_version == NULL );
                    Py_INCREF( tmp_assign_source_49 );
                    var_version = tmp_assign_source_49;
                }
                Py_XDECREF( tmp_tuple_unpack_4__element_1 );
                tmp_tuple_unpack_4__element_1 = NULL;

                {
                    PyObject *tmp_assign_source_50;
                    CHECK_OBJECT( tmp_tuple_unpack_4__element_2 );
                    tmp_assign_source_50 = tmp_tuple_unpack_4__element_2;
                    assert( var_buildno == NULL );
                    Py_INCREF( tmp_assign_source_50 );
                    var_buildno = tmp_assign_source_50;
                }
                Py_XDECREF( tmp_tuple_unpack_4__element_2 );
                tmp_tuple_unpack_4__element_2 = NULL;

                {
                    PyObject *tmp_assign_source_51;
                    CHECK_OBJECT( tmp_tuple_unpack_4__element_3 );
                    tmp_assign_source_51 = tmp_tuple_unpack_4__element_3;
                    assert( var_builddate == NULL );
                    Py_INCREF( tmp_assign_source_51 );
                    var_builddate = tmp_assign_source_51;
                }
                Py_XDECREF( tmp_tuple_unpack_4__element_3 );
                tmp_tuple_unpack_4__element_3 = NULL;

                {
                    PyObject *tmp_assign_source_52;
                    CHECK_OBJECT( tmp_tuple_unpack_4__element_4 );
                    tmp_assign_source_52 = tmp_tuple_unpack_4__element_4;
                    assert( var_buildtime == NULL );
                    Py_INCREF( tmp_assign_source_52 );
                    var_buildtime = tmp_assign_source_52;
                }
                Py_XDECREF( tmp_tuple_unpack_4__element_4 );
                tmp_tuple_unpack_4__element_4 = NULL;

                {
                    PyObject *tmp_assign_source_53;
                    CHECK_OBJECT( tmp_tuple_unpack_4__element_5 );
                    tmp_assign_source_53 = tmp_tuple_unpack_4__element_5;
                    assert( var_compiler == NULL );
                    Py_INCREF( tmp_assign_source_53 );
                    var_compiler = tmp_assign_source_53;
                }
                Py_XDECREF( tmp_tuple_unpack_4__element_5 );
                tmp_tuple_unpack_4__element_5 = NULL;

                {
                    PyObject *tmp_assign_source_54;
                    tmp_assign_source_54 = const_str_plain_CPython;
                    assert( var_name == NULL );
                    Py_INCREF( tmp_assign_source_54 );
                    var_name = tmp_assign_source_54;
                }
                {
                    nuitka_bool tmp_condition_result_12;
                    PyObject *tmp_compexpr_left_10;
                    PyObject *tmp_compexpr_right_10;
                    CHECK_OBJECT( var_builddate );
                    tmp_compexpr_left_10 = var_builddate;
                    tmp_compexpr_right_10 = Py_None;
                    tmp_condition_result_12 = ( tmp_compexpr_left_10 == tmp_compexpr_right_10 ) ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
                    if ( tmp_condition_result_12 == NUITKA_BOOL_TRUE )
                    {
                        goto branch_yes_12;
                    }
                    else
                    {
                        goto branch_no_12;
                    }
                    branch_yes_12:;
                    {
                        PyObject *tmp_assign_source_55;
                        tmp_assign_source_55 = const_str_empty;
                        {
                            PyObject *old = var_builddate;
                            assert( old != NULL );
                            var_builddate = tmp_assign_source_55;
                            Py_INCREF( var_builddate );
                            Py_DECREF( old );
                        }

                    }
                    goto branch_end_12;
                    branch_no_12:;
                    {
                        nuitka_bool tmp_condition_result_13;
                        int tmp_truth_name_3;
                        CHECK_OBJECT( var_buildtime );
                        tmp_truth_name_3 = CHECK_IF_TRUE( var_buildtime );
                        if ( tmp_truth_name_3 == -1 )
                        {
                            assert( ERROR_OCCURRED() );

                            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                            exception_lineno = 1231;
                            type_description_1 = "oooooooooooooo";
                            goto frame_exception_exit_1;
                        }
                        tmp_condition_result_13 = tmp_truth_name_3 == 1 ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
                        if ( tmp_condition_result_13 == NUITKA_BOOL_TRUE )
                        {
                            goto branch_yes_13;
                        }
                        else
                        {
                            goto branch_no_13;
                        }
                        branch_yes_13:;
                        {
                            PyObject *tmp_assign_source_56;
                            PyObject *tmp_left_name_5;
                            PyObject *tmp_left_name_6;
                            PyObject *tmp_right_name_5;
                            PyObject *tmp_right_name_6;
                            CHECK_OBJECT( var_builddate );
                            tmp_left_name_6 = var_builddate;
                            tmp_right_name_5 = const_str_space;
                            tmp_left_name_5 = BINARY_OPERATION_ADD_OBJECT_UNICODE( tmp_left_name_6, tmp_right_name_5 );
                            if ( tmp_left_name_5 == NULL )
                            {
                                assert( ERROR_OCCURRED() );

                                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                                exception_lineno = 1232;
                                type_description_1 = "oooooooooooooo";
                                goto frame_exception_exit_1;
                            }
                            CHECK_OBJECT( var_buildtime );
                            tmp_right_name_6 = var_buildtime;
                            tmp_assign_source_56 = BINARY_OPERATION_ADD_OBJECT_OBJECT( tmp_left_name_5, tmp_right_name_6 );
                            Py_DECREF( tmp_left_name_5 );
                            if ( tmp_assign_source_56 == NULL )
                            {
                                assert( ERROR_OCCURRED() );

                                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                                exception_lineno = 1232;
                                type_description_1 = "oooooooooooooo";
                                goto frame_exception_exit_1;
                            }
                            {
                                PyObject *old = var_builddate;
                                assert( old != NULL );
                                var_builddate = tmp_assign_source_56;
                                Py_DECREF( old );
                            }

                        }
                        branch_no_13:;
                    }
                    branch_end_12:;
                }
                branch_end_9:;
            }
            branch_end_6:;
        }
        branch_end_3:;
    }
    {
        nuitka_bool tmp_condition_result_14;
        PyObject *tmp_source_name_4;
        PyObject *tmp_mvar_value_10;
        PyObject *tmp_attribute_name_1;
        tmp_mvar_value_10 = GET_STRING_DICT_VALUE( moduledict_platform, (Nuitka_StringObject *)const_str_plain_sys );

        if (unlikely( tmp_mvar_value_10 == NULL ))
        {
            tmp_mvar_value_10 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_sys );
        }

        if ( tmp_mvar_value_10 == NULL )
        {

            exception_type = PyExc_NameError;
            Py_INCREF( exception_type );
            exception_value = PyUnicode_FromFormat( "name '%s' is not defined", "sys" );
            exception_tb = NULL;
            NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
            CHAIN_EXCEPTION( exception_value );

            exception_lineno = 1234;
            type_description_1 = "oooooooooooooo";
            goto frame_exception_exit_1;
        }

        tmp_source_name_4 = tmp_mvar_value_10;
        tmp_attribute_name_1 = const_str_plain__git;
        tmp_res = BUILTIN_HASATTR_BOOL( tmp_source_name_4, tmp_attribute_name_1 );
        if ( tmp_res == -1 )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 1234;
            type_description_1 = "oooooooooooooo";
            goto frame_exception_exit_1;
        }
        tmp_condition_result_14 = ( tmp_res != 0 ) ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
        if ( tmp_condition_result_14 == NUITKA_BOOL_TRUE )
        {
            goto branch_yes_14;
        }
        else
        {
            goto branch_no_14;
        }
        branch_yes_14:;
        // Tried code:
        {
            PyObject *tmp_assign_source_57;
            PyObject *tmp_iter_arg_5;
            PyObject *tmp_source_name_5;
            PyObject *tmp_mvar_value_11;
            tmp_mvar_value_11 = GET_STRING_DICT_VALUE( moduledict_platform, (Nuitka_StringObject *)const_str_plain_sys );

            if (unlikely( tmp_mvar_value_11 == NULL ))
            {
                tmp_mvar_value_11 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_sys );
            }

            if ( tmp_mvar_value_11 == NULL )
            {

                exception_type = PyExc_NameError;
                Py_INCREF( exception_type );
                exception_value = PyUnicode_FromFormat( "name '%s' is not defined", "sys" );
                exception_tb = NULL;
                NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
                CHAIN_EXCEPTION( exception_value );

                exception_lineno = 1235;
                type_description_1 = "oooooooooooooo";
                goto try_except_handler_10;
            }

            tmp_source_name_5 = tmp_mvar_value_11;
            tmp_iter_arg_5 = LOOKUP_ATTRIBUTE( tmp_source_name_5, const_str_plain__git );
            if ( tmp_iter_arg_5 == NULL )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 1235;
                type_description_1 = "oooooooooooooo";
                goto try_except_handler_10;
            }
            tmp_assign_source_57 = MAKE_UNPACK_ITERATOR( tmp_iter_arg_5 );
            Py_DECREF( tmp_iter_arg_5 );
            if ( tmp_assign_source_57 == NULL )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 1235;
                type_description_1 = "oooooooooooooo";
                goto try_except_handler_10;
            }
            assert( tmp_tuple_unpack_5__source_iter == NULL );
            tmp_tuple_unpack_5__source_iter = tmp_assign_source_57;
        }
        // Tried code:
        {
            PyObject *tmp_assign_source_58;
            PyObject *tmp_unpack_18;
            CHECK_OBJECT( tmp_tuple_unpack_5__source_iter );
            tmp_unpack_18 = tmp_tuple_unpack_5__source_iter;
            tmp_assign_source_58 = UNPACK_NEXT( tmp_unpack_18, 0, 3 );
            if ( tmp_assign_source_58 == NULL )
            {
                if ( !ERROR_OCCURRED() )
                {
                    exception_type = PyExc_StopIteration;
                    Py_INCREF( exception_type );
                    exception_value = NULL;
                    exception_tb = NULL;
                }
                else
                {
                    FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
                }


                type_description_1 = "oooooooooooooo";
                exception_lineno = 1235;
                goto try_except_handler_11;
            }
            assert( tmp_tuple_unpack_5__element_1 == NULL );
            tmp_tuple_unpack_5__element_1 = tmp_assign_source_58;
        }
        {
            PyObject *tmp_assign_source_59;
            PyObject *tmp_unpack_19;
            CHECK_OBJECT( tmp_tuple_unpack_5__source_iter );
            tmp_unpack_19 = tmp_tuple_unpack_5__source_iter;
            tmp_assign_source_59 = UNPACK_NEXT( tmp_unpack_19, 1, 3 );
            if ( tmp_assign_source_59 == NULL )
            {
                if ( !ERROR_OCCURRED() )
                {
                    exception_type = PyExc_StopIteration;
                    Py_INCREF( exception_type );
                    exception_value = NULL;
                    exception_tb = NULL;
                }
                else
                {
                    FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
                }


                type_description_1 = "oooooooooooooo";
                exception_lineno = 1235;
                goto try_except_handler_11;
            }
            assert( tmp_tuple_unpack_5__element_2 == NULL );
            tmp_tuple_unpack_5__element_2 = tmp_assign_source_59;
        }
        {
            PyObject *tmp_assign_source_60;
            PyObject *tmp_unpack_20;
            CHECK_OBJECT( tmp_tuple_unpack_5__source_iter );
            tmp_unpack_20 = tmp_tuple_unpack_5__source_iter;
            tmp_assign_source_60 = UNPACK_NEXT( tmp_unpack_20, 2, 3 );
            if ( tmp_assign_source_60 == NULL )
            {
                if ( !ERROR_OCCURRED() )
                {
                    exception_type = PyExc_StopIteration;
                    Py_INCREF( exception_type );
                    exception_value = NULL;
                    exception_tb = NULL;
                }
                else
                {
                    FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
                }


                type_description_1 = "oooooooooooooo";
                exception_lineno = 1235;
                goto try_except_handler_11;
            }
            assert( tmp_tuple_unpack_5__element_3 == NULL );
            tmp_tuple_unpack_5__element_3 = tmp_assign_source_60;
        }
        {
            PyObject *tmp_iterator_name_5;
            CHECK_OBJECT( tmp_tuple_unpack_5__source_iter );
            tmp_iterator_name_5 = tmp_tuple_unpack_5__source_iter;
            // Check if iterator has left-over elements.
            CHECK_OBJECT( tmp_iterator_name_5 ); assert( HAS_ITERNEXT( tmp_iterator_name_5 ) );

            tmp_iterator_attempt = (*Py_TYPE( tmp_iterator_name_5 )->tp_iternext)( tmp_iterator_name_5 );

            if (likely( tmp_iterator_attempt == NULL ))
            {
                PyObject *error = GET_ERROR_OCCURRED();

                if ( error != NULL )
                {
                    if ( EXCEPTION_MATCH_BOOL_SINGLE( error, PyExc_StopIteration ))
                    {
                        CLEAR_ERROR_OCCURRED();
                    }
                    else
                    {
                        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );

                        type_description_1 = "oooooooooooooo";
                        exception_lineno = 1235;
                        goto try_except_handler_11;
                    }
                }
            }
            else
            {
                Py_DECREF( tmp_iterator_attempt );

                // TODO: Could avoid PyErr_Format.
#if PYTHON_VERSION < 300
                PyErr_Format( PyExc_ValueError, "too many values to unpack" );
#else
                PyErr_Format( PyExc_ValueError, "too many values to unpack (expected 3)" );
#endif
                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );

                type_description_1 = "oooooooooooooo";
                exception_lineno = 1235;
                goto try_except_handler_11;
            }
        }
        goto try_end_9;
        // Exception handler code:
        try_except_handler_11:;
        exception_keeper_type_9 = exception_type;
        exception_keeper_value_9 = exception_value;
        exception_keeper_tb_9 = exception_tb;
        exception_keeper_lineno_9 = exception_lineno;
        exception_type = NULL;
        exception_value = NULL;
        exception_tb = NULL;
        exception_lineno = 0;

        CHECK_OBJECT( (PyObject *)tmp_tuple_unpack_5__source_iter );
        Py_DECREF( tmp_tuple_unpack_5__source_iter );
        tmp_tuple_unpack_5__source_iter = NULL;

        // Re-raise.
        exception_type = exception_keeper_type_9;
        exception_value = exception_keeper_value_9;
        exception_tb = exception_keeper_tb_9;
        exception_lineno = exception_keeper_lineno_9;

        goto try_except_handler_10;
        // End of try:
        try_end_9:;
        goto try_end_10;
        // Exception handler code:
        try_except_handler_10:;
        exception_keeper_type_10 = exception_type;
        exception_keeper_value_10 = exception_value;
        exception_keeper_tb_10 = exception_tb;
        exception_keeper_lineno_10 = exception_lineno;
        exception_type = NULL;
        exception_value = NULL;
        exception_tb = NULL;
        exception_lineno = 0;

        Py_XDECREF( tmp_tuple_unpack_5__element_1 );
        tmp_tuple_unpack_5__element_1 = NULL;

        Py_XDECREF( tmp_tuple_unpack_5__element_2 );
        tmp_tuple_unpack_5__element_2 = NULL;

        Py_XDECREF( tmp_tuple_unpack_5__element_3 );
        tmp_tuple_unpack_5__element_3 = NULL;

        // Re-raise.
        exception_type = exception_keeper_type_10;
        exception_value = exception_keeper_value_10;
        exception_tb = exception_keeper_tb_10;
        exception_lineno = exception_keeper_lineno_10;

        goto frame_exception_exit_1;
        // End of try:
        try_end_10:;
        CHECK_OBJECT( (PyObject *)tmp_tuple_unpack_5__source_iter );
        Py_DECREF( tmp_tuple_unpack_5__source_iter );
        tmp_tuple_unpack_5__source_iter = NULL;

        {
            PyObject *tmp_assign_source_61;
            CHECK_OBJECT( tmp_tuple_unpack_5__element_1 );
            tmp_assign_source_61 = tmp_tuple_unpack_5__element_1;
            {
                PyObject *old = var__;
                var__ = tmp_assign_source_61;
                Py_INCREF( var__ );
                Py_XDECREF( old );
            }

        }
        Py_XDECREF( tmp_tuple_unpack_5__element_1 );
        tmp_tuple_unpack_5__element_1 = NULL;

        {
            PyObject *tmp_assign_source_62;
            CHECK_OBJECT( tmp_tuple_unpack_5__element_2 );
            tmp_assign_source_62 = tmp_tuple_unpack_5__element_2;
            assert( var_branch == NULL );
            Py_INCREF( tmp_assign_source_62 );
            var_branch = tmp_assign_source_62;
        }
        Py_XDECREF( tmp_tuple_unpack_5__element_2 );
        tmp_tuple_unpack_5__element_2 = NULL;

        {
            PyObject *tmp_assign_source_63;
            CHECK_OBJECT( tmp_tuple_unpack_5__element_3 );
            tmp_assign_source_63 = tmp_tuple_unpack_5__element_3;
            assert( var_revision == NULL );
            Py_INCREF( tmp_assign_source_63 );
            var_revision = tmp_assign_source_63;
        }
        Py_XDECREF( tmp_tuple_unpack_5__element_3 );
        tmp_tuple_unpack_5__element_3 = NULL;

        goto branch_end_14;
        branch_no_14:;
        {
            nuitka_bool tmp_condition_result_15;
            PyObject *tmp_source_name_6;
            PyObject *tmp_mvar_value_12;
            PyObject *tmp_attribute_name_2;
            tmp_mvar_value_12 = GET_STRING_DICT_VALUE( moduledict_platform, (Nuitka_StringObject *)const_str_plain_sys );

            if (unlikely( tmp_mvar_value_12 == NULL ))
            {
                tmp_mvar_value_12 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_sys );
            }

            if ( tmp_mvar_value_12 == NULL )
            {

                exception_type = PyExc_NameError;
                Py_INCREF( exception_type );
                exception_value = PyUnicode_FromFormat( "name '%s' is not defined", "sys" );
                exception_tb = NULL;
                NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
                CHAIN_EXCEPTION( exception_value );

                exception_lineno = 1236;
                type_description_1 = "oooooooooooooo";
                goto frame_exception_exit_1;
            }

            tmp_source_name_6 = tmp_mvar_value_12;
            tmp_attribute_name_2 = const_str_plain__mercurial;
            tmp_res = BUILTIN_HASATTR_BOOL( tmp_source_name_6, tmp_attribute_name_2 );
            if ( tmp_res == -1 )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 1236;
                type_description_1 = "oooooooooooooo";
                goto frame_exception_exit_1;
            }
            tmp_condition_result_15 = ( tmp_res != 0 ) ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
            if ( tmp_condition_result_15 == NUITKA_BOOL_TRUE )
            {
                goto branch_yes_15;
            }
            else
            {
                goto branch_no_15;
            }
            branch_yes_15:;
            // Tried code:
            {
                PyObject *tmp_assign_source_64;
                PyObject *tmp_iter_arg_6;
                PyObject *tmp_source_name_7;
                PyObject *tmp_mvar_value_13;
                tmp_mvar_value_13 = GET_STRING_DICT_VALUE( moduledict_platform, (Nuitka_StringObject *)const_str_plain_sys );

                if (unlikely( tmp_mvar_value_13 == NULL ))
                {
                    tmp_mvar_value_13 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_sys );
                }

                if ( tmp_mvar_value_13 == NULL )
                {

                    exception_type = PyExc_NameError;
                    Py_INCREF( exception_type );
                    exception_value = PyUnicode_FromFormat( "name '%s' is not defined", "sys" );
                    exception_tb = NULL;
                    NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
                    CHAIN_EXCEPTION( exception_value );

                    exception_lineno = 1237;
                    type_description_1 = "oooooooooooooo";
                    goto try_except_handler_12;
                }

                tmp_source_name_7 = tmp_mvar_value_13;
                tmp_iter_arg_6 = LOOKUP_ATTRIBUTE( tmp_source_name_7, const_str_plain__mercurial );
                if ( tmp_iter_arg_6 == NULL )
                {
                    assert( ERROR_OCCURRED() );

                    FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                    exception_lineno = 1237;
                    type_description_1 = "oooooooooooooo";
                    goto try_except_handler_12;
                }
                tmp_assign_source_64 = MAKE_UNPACK_ITERATOR( tmp_iter_arg_6 );
                Py_DECREF( tmp_iter_arg_6 );
                if ( tmp_assign_source_64 == NULL )
                {
                    assert( ERROR_OCCURRED() );

                    FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                    exception_lineno = 1237;
                    type_description_1 = "oooooooooooooo";
                    goto try_except_handler_12;
                }
                assert( tmp_tuple_unpack_6__source_iter == NULL );
                tmp_tuple_unpack_6__source_iter = tmp_assign_source_64;
            }
            // Tried code:
            {
                PyObject *tmp_assign_source_65;
                PyObject *tmp_unpack_21;
                CHECK_OBJECT( tmp_tuple_unpack_6__source_iter );
                tmp_unpack_21 = tmp_tuple_unpack_6__source_iter;
                tmp_assign_source_65 = UNPACK_NEXT( tmp_unpack_21, 0, 3 );
                if ( tmp_assign_source_65 == NULL )
                {
                    if ( !ERROR_OCCURRED() )
                    {
                        exception_type = PyExc_StopIteration;
                        Py_INCREF( exception_type );
                        exception_value = NULL;
                        exception_tb = NULL;
                    }
                    else
                    {
                        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
                    }


                    type_description_1 = "oooooooooooooo";
                    exception_lineno = 1237;
                    goto try_except_handler_13;
                }
                assert( tmp_tuple_unpack_6__element_1 == NULL );
                tmp_tuple_unpack_6__element_1 = tmp_assign_source_65;
            }
            {
                PyObject *tmp_assign_source_66;
                PyObject *tmp_unpack_22;
                CHECK_OBJECT( tmp_tuple_unpack_6__source_iter );
                tmp_unpack_22 = tmp_tuple_unpack_6__source_iter;
                tmp_assign_source_66 = UNPACK_NEXT( tmp_unpack_22, 1, 3 );
                if ( tmp_assign_source_66 == NULL )
                {
                    if ( !ERROR_OCCURRED() )
                    {
                        exception_type = PyExc_StopIteration;
                        Py_INCREF( exception_type );
                        exception_value = NULL;
                        exception_tb = NULL;
                    }
                    else
                    {
                        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
                    }


                    type_description_1 = "oooooooooooooo";
                    exception_lineno = 1237;
                    goto try_except_handler_13;
                }
                assert( tmp_tuple_unpack_6__element_2 == NULL );
                tmp_tuple_unpack_6__element_2 = tmp_assign_source_66;
            }
            {
                PyObject *tmp_assign_source_67;
                PyObject *tmp_unpack_23;
                CHECK_OBJECT( tmp_tuple_unpack_6__source_iter );
                tmp_unpack_23 = tmp_tuple_unpack_6__source_iter;
                tmp_assign_source_67 = UNPACK_NEXT( tmp_unpack_23, 2, 3 );
                if ( tmp_assign_source_67 == NULL )
                {
                    if ( !ERROR_OCCURRED() )
                    {
                        exception_type = PyExc_StopIteration;
                        Py_INCREF( exception_type );
                        exception_value = NULL;
                        exception_tb = NULL;
                    }
                    else
                    {
                        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
                    }


                    type_description_1 = "oooooooooooooo";
                    exception_lineno = 1237;
                    goto try_except_handler_13;
                }
                assert( tmp_tuple_unpack_6__element_3 == NULL );
                tmp_tuple_unpack_6__element_3 = tmp_assign_source_67;
            }
            {
                PyObject *tmp_iterator_name_6;
                CHECK_OBJECT( tmp_tuple_unpack_6__source_iter );
                tmp_iterator_name_6 = tmp_tuple_unpack_6__source_iter;
                // Check if iterator has left-over elements.
                CHECK_OBJECT( tmp_iterator_name_6 ); assert( HAS_ITERNEXT( tmp_iterator_name_6 ) );

                tmp_iterator_attempt = (*Py_TYPE( tmp_iterator_name_6 )->tp_iternext)( tmp_iterator_name_6 );

                if (likely( tmp_iterator_attempt == NULL ))
                {
                    PyObject *error = GET_ERROR_OCCURRED();

                    if ( error != NULL )
                    {
                        if ( EXCEPTION_MATCH_BOOL_SINGLE( error, PyExc_StopIteration ))
                        {
                            CLEAR_ERROR_OCCURRED();
                        }
                        else
                        {
                            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );

                            type_description_1 = "oooooooooooooo";
                            exception_lineno = 1237;
                            goto try_except_handler_13;
                        }
                    }
                }
                else
                {
                    Py_DECREF( tmp_iterator_attempt );

                    // TODO: Could avoid PyErr_Format.
#if PYTHON_VERSION < 300
                    PyErr_Format( PyExc_ValueError, "too many values to unpack" );
#else
                    PyErr_Format( PyExc_ValueError, "too many values to unpack (expected 3)" );
#endif
                    FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );

                    type_description_1 = "oooooooooooooo";
                    exception_lineno = 1237;
                    goto try_except_handler_13;
                }
            }
            goto try_end_11;
            // Exception handler code:
            try_except_handler_13:;
            exception_keeper_type_11 = exception_type;
            exception_keeper_value_11 = exception_value;
            exception_keeper_tb_11 = exception_tb;
            exception_keeper_lineno_11 = exception_lineno;
            exception_type = NULL;
            exception_value = NULL;
            exception_tb = NULL;
            exception_lineno = 0;

            CHECK_OBJECT( (PyObject *)tmp_tuple_unpack_6__source_iter );
            Py_DECREF( tmp_tuple_unpack_6__source_iter );
            tmp_tuple_unpack_6__source_iter = NULL;

            // Re-raise.
            exception_type = exception_keeper_type_11;
            exception_value = exception_keeper_value_11;
            exception_tb = exception_keeper_tb_11;
            exception_lineno = exception_keeper_lineno_11;

            goto try_except_handler_12;
            // End of try:
            try_end_11:;
            goto try_end_12;
            // Exception handler code:
            try_except_handler_12:;
            exception_keeper_type_12 = exception_type;
            exception_keeper_value_12 = exception_value;
            exception_keeper_tb_12 = exception_tb;
            exception_keeper_lineno_12 = exception_lineno;
            exception_type = NULL;
            exception_value = NULL;
            exception_tb = NULL;
            exception_lineno = 0;

            Py_XDECREF( tmp_tuple_unpack_6__element_1 );
            tmp_tuple_unpack_6__element_1 = NULL;

            Py_XDECREF( tmp_tuple_unpack_6__element_2 );
            tmp_tuple_unpack_6__element_2 = NULL;

            Py_XDECREF( tmp_tuple_unpack_6__element_3 );
            tmp_tuple_unpack_6__element_3 = NULL;

            // Re-raise.
            exception_type = exception_keeper_type_12;
            exception_value = exception_keeper_value_12;
            exception_tb = exception_keeper_tb_12;
            exception_lineno = exception_keeper_lineno_12;

            goto frame_exception_exit_1;
            // End of try:
            try_end_12:;
            CHECK_OBJECT( (PyObject *)tmp_tuple_unpack_6__source_iter );
            Py_DECREF( tmp_tuple_unpack_6__source_iter );
            tmp_tuple_unpack_6__source_iter = NULL;

            {
                PyObject *tmp_assign_source_68;
                CHECK_OBJECT( tmp_tuple_unpack_6__element_1 );
                tmp_assign_source_68 = tmp_tuple_unpack_6__element_1;
                {
                    PyObject *old = var__;
                    var__ = tmp_assign_source_68;
                    Py_INCREF( var__ );
                    Py_XDECREF( old );
                }

            }
            Py_XDECREF( tmp_tuple_unpack_6__element_1 );
            tmp_tuple_unpack_6__element_1 = NULL;

            {
                PyObject *tmp_assign_source_69;
                CHECK_OBJECT( tmp_tuple_unpack_6__element_2 );
                tmp_assign_source_69 = tmp_tuple_unpack_6__element_2;
                assert( var_branch == NULL );
                Py_INCREF( tmp_assign_source_69 );
                var_branch = tmp_assign_source_69;
            }
            Py_XDECREF( tmp_tuple_unpack_6__element_2 );
            tmp_tuple_unpack_6__element_2 = NULL;

            {
                PyObject *tmp_assign_source_70;
                CHECK_OBJECT( tmp_tuple_unpack_6__element_3 );
                tmp_assign_source_70 = tmp_tuple_unpack_6__element_3;
                assert( var_revision == NULL );
                Py_INCREF( tmp_assign_source_70 );
                var_revision = tmp_assign_source_70;
            }
            Py_XDECREF( tmp_tuple_unpack_6__element_3 );
            tmp_tuple_unpack_6__element_3 = NULL;

            goto branch_end_15;
            branch_no_15:;
            {
                PyObject *tmp_assign_source_71;
                tmp_assign_source_71 = const_str_empty;
                assert( var_branch == NULL );
                Py_INCREF( tmp_assign_source_71 );
                var_branch = tmp_assign_source_71;
            }
            {
                PyObject *tmp_assign_source_72;
                tmp_assign_source_72 = const_str_empty;
                assert( var_revision == NULL );
                Py_INCREF( tmp_assign_source_72 );
                var_revision = tmp_assign_source_72;
            }
            branch_end_15:;
        }
        branch_end_14:;
    }
    {
        PyObject *tmp_assign_source_73;
        PyObject *tmp_called_instance_13;
        if ( var_version == NULL )
        {

            exception_type = PyExc_UnboundLocalError;
            Py_INCREF( exception_type );
            exception_value = PyUnicode_FromFormat( "local variable '%s' referenced before assignment", "version" );
            exception_tb = NULL;
            NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
            CHAIN_EXCEPTION( exception_value );

            exception_lineno = 1243;
            type_description_1 = "oooooooooooooo";
            goto frame_exception_exit_1;
        }

        tmp_called_instance_13 = var_version;
        frame_43a808c2e7d2ad693508adcb974b4533->m_frame.f_lineno = 1243;
        tmp_assign_source_73 = CALL_METHOD_WITH_ARGS1( tmp_called_instance_13, const_str_plain_split, &PyTuple_GET_ITEM( const_tuple_str_dot_tuple, 0 ) );

        if ( tmp_assign_source_73 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 1243;
            type_description_1 = "oooooooooooooo";
            goto frame_exception_exit_1;
        }
        assert( var_l == NULL );
        var_l = tmp_assign_source_73;
    }
    {
        nuitka_bool tmp_condition_result_16;
        PyObject *tmp_compexpr_left_11;
        PyObject *tmp_compexpr_right_11;
        PyObject *tmp_len_arg_1;
        CHECK_OBJECT( var_l );
        tmp_len_arg_1 = var_l;
        tmp_compexpr_left_11 = BUILTIN_LEN( tmp_len_arg_1 );
        if ( tmp_compexpr_left_11 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 1244;
            type_description_1 = "oooooooooooooo";
            goto frame_exception_exit_1;
        }
        tmp_compexpr_right_11 = const_int_pos_2;
        tmp_res = RICH_COMPARE_BOOL_EQ_OBJECT_OBJECT( tmp_compexpr_left_11, tmp_compexpr_right_11 );
        Py_DECREF( tmp_compexpr_left_11 );
        assert( !(tmp_res == -1) );
        tmp_condition_result_16 = ( tmp_res != 0 ) ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
        if ( tmp_condition_result_16 == NUITKA_BOOL_TRUE )
        {
            goto branch_yes_16;
        }
        else
        {
            goto branch_no_16;
        }
        branch_yes_16:;
        {
            PyObject *tmp_called_instance_14;
            PyObject *tmp_call_result_3;
            CHECK_OBJECT( var_l );
            tmp_called_instance_14 = var_l;
            frame_43a808c2e7d2ad693508adcb974b4533->m_frame.f_lineno = 1245;
            tmp_call_result_3 = CALL_METHOD_WITH_ARGS1( tmp_called_instance_14, const_str_plain_append, &PyTuple_GET_ITEM( const_tuple_str_plain_0_tuple, 0 ) );

            if ( tmp_call_result_3 == NULL )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 1245;
                type_description_1 = "oooooooooooooo";
                goto frame_exception_exit_1;
            }
            Py_DECREF( tmp_call_result_3 );
        }
        {
            PyObject *tmp_assign_source_74;
            PyObject *tmp_called_instance_15;
            PyObject *tmp_args_element_name_8;
            tmp_called_instance_15 = const_str_dot;
            CHECK_OBJECT( var_l );
            tmp_args_element_name_8 = var_l;
            frame_43a808c2e7d2ad693508adcb974b4533->m_frame.f_lineno = 1246;
            {
                PyObject *call_args[] = { tmp_args_element_name_8 };
                tmp_assign_source_74 = CALL_METHOD_WITH_ARGS1( tmp_called_instance_15, const_str_plain_join, call_args );
            }

            if ( tmp_assign_source_74 == NULL )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 1246;
                type_description_1 = "oooooooooooooo";
                goto frame_exception_exit_1;
            }
            {
                PyObject *old = var_version;
                var_version = tmp_assign_source_74;
                Py_XDECREF( old );
            }

        }
        branch_no_16:;
    }
    {
        PyObject *tmp_assign_source_75;
        PyObject *tmp_tuple_element_1;
        if ( var_name == NULL )
        {

            exception_type = PyExc_UnboundLocalError;
            Py_INCREF( exception_type );
            exception_value = PyUnicode_FromFormat( "local variable '%s' referenced before assignment", "name" );
            exception_tb = NULL;
            NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
            CHAIN_EXCEPTION( exception_value );

            exception_lineno = 1249;
            type_description_1 = "oooooooooooooo";
            goto frame_exception_exit_1;
        }

        tmp_tuple_element_1 = var_name;
        tmp_assign_source_75 = PyTuple_New( 7 );
        Py_INCREF( tmp_tuple_element_1 );
        PyTuple_SET_ITEM( tmp_assign_source_75, 0, tmp_tuple_element_1 );
        if ( var_version == NULL )
        {
            Py_DECREF( tmp_assign_source_75 );
            exception_type = PyExc_UnboundLocalError;
            Py_INCREF( exception_type );
            exception_value = PyUnicode_FromFormat( "local variable '%s' referenced before assignment", "version" );
            exception_tb = NULL;
            NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
            CHAIN_EXCEPTION( exception_value );

            exception_lineno = 1249;
            type_description_1 = "oooooooooooooo";
            goto frame_exception_exit_1;
        }

        tmp_tuple_element_1 = var_version;
        Py_INCREF( tmp_tuple_element_1 );
        PyTuple_SET_ITEM( tmp_assign_source_75, 1, tmp_tuple_element_1 );
        if ( var_branch == NULL )
        {
            Py_DECREF( tmp_assign_source_75 );
            exception_type = PyExc_UnboundLocalError;
            Py_INCREF( exception_type );
            exception_value = PyUnicode_FromFormat( "local variable '%s' referenced before assignment", "branch" );
            exception_tb = NULL;
            NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
            CHAIN_EXCEPTION( exception_value );

            exception_lineno = 1249;
            type_description_1 = "oooooooooooooo";
            goto frame_exception_exit_1;
        }

        tmp_tuple_element_1 = var_branch;
        Py_INCREF( tmp_tuple_element_1 );
        PyTuple_SET_ITEM( tmp_assign_source_75, 2, tmp_tuple_element_1 );
        if ( var_revision == NULL )
        {
            Py_DECREF( tmp_assign_source_75 );
            exception_type = PyExc_UnboundLocalError;
            Py_INCREF( exception_type );
            exception_value = PyUnicode_FromFormat( "local variable '%s' referenced before assignment", "revision" );
            exception_tb = NULL;
            NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
            CHAIN_EXCEPTION( exception_value );

            exception_lineno = 1249;
            type_description_1 = "oooooooooooooo";
            goto frame_exception_exit_1;
        }

        tmp_tuple_element_1 = var_revision;
        Py_INCREF( tmp_tuple_element_1 );
        PyTuple_SET_ITEM( tmp_assign_source_75, 3, tmp_tuple_element_1 );
        if ( var_buildno == NULL )
        {
            Py_DECREF( tmp_assign_source_75 );
            exception_type = PyExc_UnboundLocalError;
            Py_INCREF( exception_type );
            exception_value = PyUnicode_FromFormat( "local variable '%s' referenced before assignment", "buildno" );
            exception_tb = NULL;
            NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
            CHAIN_EXCEPTION( exception_value );

            exception_lineno = 1249;
            type_description_1 = "oooooooooooooo";
            goto frame_exception_exit_1;
        }

        tmp_tuple_element_1 = var_buildno;
        Py_INCREF( tmp_tuple_element_1 );
        PyTuple_SET_ITEM( tmp_assign_source_75, 4, tmp_tuple_element_1 );
        if ( var_builddate == NULL )
        {
            Py_DECREF( tmp_assign_source_75 );
            exception_type = PyExc_UnboundLocalError;
            Py_INCREF( exception_type );
            exception_value = PyUnicode_FromFormat( "local variable '%s' referenced before assignment", "builddate" );
            exception_tb = NULL;
            NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
            CHAIN_EXCEPTION( exception_value );

            exception_lineno = 1249;
            type_description_1 = "oooooooooooooo";
            goto frame_exception_exit_1;
        }

        tmp_tuple_element_1 = var_builddate;
        Py_INCREF( tmp_tuple_element_1 );
        PyTuple_SET_ITEM( tmp_assign_source_75, 5, tmp_tuple_element_1 );
        if ( var_compiler == NULL )
        {
            Py_DECREF( tmp_assign_source_75 );
            exception_type = PyExc_UnboundLocalError;
            Py_INCREF( exception_type );
            exception_value = PyUnicode_FromFormat( "local variable '%s' referenced before assignment", "compiler" );
            exception_tb = NULL;
            NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
            CHAIN_EXCEPTION( exception_value );

            exception_lineno = 1249;
            type_description_1 = "oooooooooooooo";
            goto frame_exception_exit_1;
        }

        tmp_tuple_element_1 = var_compiler;
        Py_INCREF( tmp_tuple_element_1 );
        PyTuple_SET_ITEM( tmp_assign_source_75, 6, tmp_tuple_element_1 );
        {
            PyObject *old = var_result;
            assert( old != NULL );
            var_result = tmp_assign_source_75;
            Py_DECREF( old );
        }

    }
    {
        PyObject *tmp_ass_subvalue_1;
        PyObject *tmp_ass_subscribed_1;
        PyObject *tmp_mvar_value_14;
        PyObject *tmp_ass_subscript_1;
        CHECK_OBJECT( var_result );
        tmp_ass_subvalue_1 = var_result;
        tmp_mvar_value_14 = GET_STRING_DICT_VALUE( moduledict_platform, (Nuitka_StringObject *)const_str_plain__sys_version_cache );

        if (unlikely( tmp_mvar_value_14 == NULL ))
        {
            tmp_mvar_value_14 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain__sys_version_cache );
        }

        if ( tmp_mvar_value_14 == NULL )
        {

            exception_type = PyExc_NameError;
            Py_INCREF( exception_type );
            exception_value = PyUnicode_FromFormat( "name '%s' is not defined", "_sys_version_cache" );
            exception_tb = NULL;
            NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
            CHAIN_EXCEPTION( exception_value );

            exception_lineno = 1250;
            type_description_1 = "oooooooooooooo";
            goto frame_exception_exit_1;
        }

        tmp_ass_subscribed_1 = tmp_mvar_value_14;
        CHECK_OBJECT( par_sys_version );
        tmp_ass_subscript_1 = par_sys_version;
        tmp_result = SET_SUBSCRIPT( tmp_ass_subscribed_1, tmp_ass_subscript_1, tmp_ass_subvalue_1 );
        if ( tmp_result == false )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 1250;
            type_description_1 = "oooooooooooooo";
            goto frame_exception_exit_1;
        }
    }

#if 0
    RESTORE_FRAME_EXCEPTION( frame_43a808c2e7d2ad693508adcb974b4533 );
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto frame_no_exception_1;

    frame_return_exit_1:;
#if 0
    RESTORE_FRAME_EXCEPTION( frame_43a808c2e7d2ad693508adcb974b4533 );
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto try_return_handler_1;

    frame_exception_exit_1:;

#if 0
    RESTORE_FRAME_EXCEPTION( frame_43a808c2e7d2ad693508adcb974b4533 );
#endif

    if ( exception_tb == NULL )
    {
        exception_tb = MAKE_TRACEBACK( frame_43a808c2e7d2ad693508adcb974b4533, exception_lineno );
    }
    else if ( exception_tb->tb_frame != &frame_43a808c2e7d2ad693508adcb974b4533->m_frame )
    {
        exception_tb = ADD_TRACEBACK( exception_tb, frame_43a808c2e7d2ad693508adcb974b4533, exception_lineno );
    }

    // Attachs locals to frame if any.
    Nuitka_Frame_AttachLocals(
        (struct Nuitka_FrameObject *)frame_43a808c2e7d2ad693508adcb974b4533,
        type_description_1,
        par_sys_version,
        var_result,
        var_name,
        var_match,
        var_version,
        var_alt_version,
        var_compiler,
        var_buildno,
        var_builddate,
        var_buildtime,
        var__,
        var_branch,
        var_revision,
        var_l
    );


    // Release cached frame.
    if ( frame_43a808c2e7d2ad693508adcb974b4533 == cache_frame_43a808c2e7d2ad693508adcb974b4533 )
    {
        Py_DECREF( frame_43a808c2e7d2ad693508adcb974b4533 );
    }
    cache_frame_43a808c2e7d2ad693508adcb974b4533 = NULL;

    assertFrameObject( frame_43a808c2e7d2ad693508adcb974b4533 );

    // Put the previous frame back on top.
    popFrameStack();

    // Return the error.
    goto try_except_handler_1;

    frame_no_exception_1:;
    CHECK_OBJECT( var_result );
    tmp_return_value = var_result;
    Py_INCREF( tmp_return_value );
    goto try_return_handler_1;
    // tried codes exits in all cases
    NUITKA_CANNOT_GET_HERE( platform$$$function_30__sys_version );
    return NULL;
    // Return handler code:
    try_return_handler_1:;
    CHECK_OBJECT( (PyObject *)par_sys_version );
    Py_DECREF( par_sys_version );
    par_sys_version = NULL;

    CHECK_OBJECT( (PyObject *)var_result );
    Py_DECREF( var_result );
    var_result = NULL;

    Py_XDECREF( var_name );
    var_name = NULL;

    Py_XDECREF( var_match );
    var_match = NULL;

    Py_XDECREF( var_version );
    var_version = NULL;

    Py_XDECREF( var_alt_version );
    var_alt_version = NULL;

    Py_XDECREF( var_compiler );
    var_compiler = NULL;

    Py_XDECREF( var_buildno );
    var_buildno = NULL;

    Py_XDECREF( var_builddate );
    var_builddate = NULL;

    Py_XDECREF( var_buildtime );
    var_buildtime = NULL;

    Py_XDECREF( var__ );
    var__ = NULL;

    Py_XDECREF( var_branch );
    var_branch = NULL;

    Py_XDECREF( var_revision );
    var_revision = NULL;

    Py_XDECREF( var_l );
    var_l = NULL;

    goto function_return_exit;
    // Exception handler code:
    try_except_handler_1:;
    exception_keeper_type_13 = exception_type;
    exception_keeper_value_13 = exception_value;
    exception_keeper_tb_13 = exception_tb;
    exception_keeper_lineno_13 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    Py_XDECREF( par_sys_version );
    par_sys_version = NULL;

    Py_XDECREF( var_result );
    var_result = NULL;

    Py_XDECREF( var_name );
    var_name = NULL;

    Py_XDECREF( var_match );
    var_match = NULL;

    Py_XDECREF( var_version );
    var_version = NULL;

    Py_XDECREF( var_alt_version );
    var_alt_version = NULL;

    Py_XDECREF( var_compiler );
    var_compiler = NULL;

    Py_XDECREF( var_buildno );
    var_buildno = NULL;

    Py_XDECREF( var_builddate );
    var_builddate = NULL;

    Py_XDECREF( var_buildtime );
    var_buildtime = NULL;

    Py_XDECREF( var__ );
    var__ = NULL;

    Py_XDECREF( var_branch );
    var_branch = NULL;

    Py_XDECREF( var_revision );
    var_revision = NULL;

    Py_XDECREF( var_l );
    var_l = NULL;

    // Re-raise.
    exception_type = exception_keeper_type_13;
    exception_value = exception_keeper_value_13;
    exception_tb = exception_keeper_tb_13;
    exception_lineno = exception_keeper_lineno_13;

    goto function_exception_exit;
    // End of try:

    // Return statement must have exited already.
    NUITKA_CANNOT_GET_HERE( platform$$$function_30__sys_version );
    return NULL;

function_exception_exit:
    assert( exception_type );
    RESTORE_ERROR_OCCURRED( exception_type, exception_value, exception_tb );

    return NULL;

function_return_exit:
   // Function cleanup code if any.


   // Actual function exit with return value, making sure we did not make
   // the error status worse despite non-NULL return.
   CHECK_OBJECT( tmp_return_value );
   assert( had_error || !ERROR_OCCURRED() );
   return tmp_return_value;
}


static PyObject *impl_platform$$$function_31_python_implementation( struct Nuitka_FunctionObject const *self, PyObject **python_pars )
{
    // Preserve error status for checks
#ifndef __NUITKA_NO_ASSERT__
    NUITKA_MAY_BE_UNUSED bool had_error = ERROR_OCCURRED();
#endif

    // Local variable declarations.
    struct Nuitka_FrameObject *frame_bb0039be5259c72d3a4fd21ab831eb77;
    NUITKA_MAY_BE_UNUSED char const *type_description_1 = NULL;
    PyObject *tmp_return_value = NULL;
    PyObject *exception_type = NULL;
    PyObject *exception_value = NULL;
    PyTracebackObject *exception_tb = NULL;
    NUITKA_MAY_BE_UNUSED int exception_lineno = 0;
    static struct Nuitka_FrameObject *cache_frame_bb0039be5259c72d3a4fd21ab831eb77 = NULL;

    // Actual function body.
    MAKE_OR_REUSE_FRAME( cache_frame_bb0039be5259c72d3a4fd21ab831eb77, codeobj_bb0039be5259c72d3a4fd21ab831eb77, module_platform, 0 );
    frame_bb0039be5259c72d3a4fd21ab831eb77 = cache_frame_bb0039be5259c72d3a4fd21ab831eb77;

    // Push the new frame as the currently active one.
    pushFrameStack( frame_bb0039be5259c72d3a4fd21ab831eb77 );

    // Mark the frame object as in use, ref count 1 will be up for reuse.
    assert( Py_REFCNT( frame_bb0039be5259c72d3a4fd21ab831eb77 ) == 2 ); // Frame stack

    // Framed code:
    {
        PyObject *tmp_subscribed_name_1;
        PyObject *tmp_called_name_1;
        PyObject *tmp_mvar_value_1;
        PyObject *tmp_subscript_name_1;
        tmp_mvar_value_1 = GET_STRING_DICT_VALUE( moduledict_platform, (Nuitka_StringObject *)const_str_plain__sys_version );

        if (unlikely( tmp_mvar_value_1 == NULL ))
        {
            tmp_mvar_value_1 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain__sys_version );
        }

        if ( tmp_mvar_value_1 == NULL )
        {

            exception_type = PyExc_NameError;
            Py_INCREF( exception_type );
            exception_value = PyUnicode_FromFormat( "name '%s' is not defined", "_sys_version" );
            exception_tb = NULL;
            NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
            CHAIN_EXCEPTION( exception_value );

            exception_lineno = 1264;

            goto frame_exception_exit_1;
        }

        tmp_called_name_1 = tmp_mvar_value_1;
        frame_bb0039be5259c72d3a4fd21ab831eb77->m_frame.f_lineno = 1264;
        tmp_subscribed_name_1 = CALL_FUNCTION_NO_ARGS( tmp_called_name_1 );
        if ( tmp_subscribed_name_1 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 1264;

            goto frame_exception_exit_1;
        }
        tmp_subscript_name_1 = const_int_0;
        tmp_return_value = LOOKUP_SUBSCRIPT_CONST( tmp_subscribed_name_1, tmp_subscript_name_1, 0 );
        Py_DECREF( tmp_subscribed_name_1 );
        if ( tmp_return_value == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 1264;

            goto frame_exception_exit_1;
        }
        goto frame_return_exit_1;
    }

#if 0
    RESTORE_FRAME_EXCEPTION( frame_bb0039be5259c72d3a4fd21ab831eb77 );
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto frame_no_exception_1;

    frame_return_exit_1:;
#if 0
    RESTORE_FRAME_EXCEPTION( frame_bb0039be5259c72d3a4fd21ab831eb77 );
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto function_return_exit;

    frame_exception_exit_1:;

#if 0
    RESTORE_FRAME_EXCEPTION( frame_bb0039be5259c72d3a4fd21ab831eb77 );
#endif

    if ( exception_tb == NULL )
    {
        exception_tb = MAKE_TRACEBACK( frame_bb0039be5259c72d3a4fd21ab831eb77, exception_lineno );
    }
    else if ( exception_tb->tb_frame != &frame_bb0039be5259c72d3a4fd21ab831eb77->m_frame )
    {
        exception_tb = ADD_TRACEBACK( exception_tb, frame_bb0039be5259c72d3a4fd21ab831eb77, exception_lineno );
    }

    // Attachs locals to frame if any.
    Nuitka_Frame_AttachLocals(
        (struct Nuitka_FrameObject *)frame_bb0039be5259c72d3a4fd21ab831eb77,
        type_description_1
    );


    // Release cached frame.
    if ( frame_bb0039be5259c72d3a4fd21ab831eb77 == cache_frame_bb0039be5259c72d3a4fd21ab831eb77 )
    {
        Py_DECREF( frame_bb0039be5259c72d3a4fd21ab831eb77 );
    }
    cache_frame_bb0039be5259c72d3a4fd21ab831eb77 = NULL;

    assertFrameObject( frame_bb0039be5259c72d3a4fd21ab831eb77 );

    // Put the previous frame back on top.
    popFrameStack();

    // Return the error.
    goto function_exception_exit;

    frame_no_exception_1:;

    // Return statement must have exited already.
    NUITKA_CANNOT_GET_HERE( platform$$$function_31_python_implementation );
    return NULL;

function_exception_exit:
    assert( exception_type );
    RESTORE_ERROR_OCCURRED( exception_type, exception_value, exception_tb );

    return NULL;

function_return_exit:
   // Function cleanup code if any.


   // Actual function exit with return value, making sure we did not make
   // the error status worse despite non-NULL return.
   CHECK_OBJECT( tmp_return_value );
   assert( had_error || !ERROR_OCCURRED() );
   return tmp_return_value;
}


static PyObject *impl_platform$$$function_32_python_version( struct Nuitka_FunctionObject const *self, PyObject **python_pars )
{
    // Preserve error status for checks
#ifndef __NUITKA_NO_ASSERT__
    NUITKA_MAY_BE_UNUSED bool had_error = ERROR_OCCURRED();
#endif

    // Local variable declarations.
    struct Nuitka_FrameObject *frame_756034e7ad7faf33e5dfc5731b9226c0;
    NUITKA_MAY_BE_UNUSED char const *type_description_1 = NULL;
    PyObject *tmp_return_value = NULL;
    PyObject *exception_type = NULL;
    PyObject *exception_value = NULL;
    PyTracebackObject *exception_tb = NULL;
    NUITKA_MAY_BE_UNUSED int exception_lineno = 0;
    static struct Nuitka_FrameObject *cache_frame_756034e7ad7faf33e5dfc5731b9226c0 = NULL;

    // Actual function body.
    MAKE_OR_REUSE_FRAME( cache_frame_756034e7ad7faf33e5dfc5731b9226c0, codeobj_756034e7ad7faf33e5dfc5731b9226c0, module_platform, 0 );
    frame_756034e7ad7faf33e5dfc5731b9226c0 = cache_frame_756034e7ad7faf33e5dfc5731b9226c0;

    // Push the new frame as the currently active one.
    pushFrameStack( frame_756034e7ad7faf33e5dfc5731b9226c0 );

    // Mark the frame object as in use, ref count 1 will be up for reuse.
    assert( Py_REFCNT( frame_756034e7ad7faf33e5dfc5731b9226c0 ) == 2 ); // Frame stack

    // Framed code:
    {
        PyObject *tmp_subscribed_name_1;
        PyObject *tmp_called_name_1;
        PyObject *tmp_mvar_value_1;
        PyObject *tmp_subscript_name_1;
        tmp_mvar_value_1 = GET_STRING_DICT_VALUE( moduledict_platform, (Nuitka_StringObject *)const_str_plain__sys_version );

        if (unlikely( tmp_mvar_value_1 == NULL ))
        {
            tmp_mvar_value_1 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain__sys_version );
        }

        if ( tmp_mvar_value_1 == NULL )
        {

            exception_type = PyExc_NameError;
            Py_INCREF( exception_type );
            exception_value = PyUnicode_FromFormat( "name '%s' is not defined", "_sys_version" );
            exception_tb = NULL;
            NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
            CHAIN_EXCEPTION( exception_value );

            exception_lineno = 1274;

            goto frame_exception_exit_1;
        }

        tmp_called_name_1 = tmp_mvar_value_1;
        frame_756034e7ad7faf33e5dfc5731b9226c0->m_frame.f_lineno = 1274;
        tmp_subscribed_name_1 = CALL_FUNCTION_NO_ARGS( tmp_called_name_1 );
        if ( tmp_subscribed_name_1 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 1274;

            goto frame_exception_exit_1;
        }
        tmp_subscript_name_1 = const_int_pos_1;
        tmp_return_value = LOOKUP_SUBSCRIPT_CONST( tmp_subscribed_name_1, tmp_subscript_name_1, 1 );
        Py_DECREF( tmp_subscribed_name_1 );
        if ( tmp_return_value == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 1274;

            goto frame_exception_exit_1;
        }
        goto frame_return_exit_1;
    }

#if 0
    RESTORE_FRAME_EXCEPTION( frame_756034e7ad7faf33e5dfc5731b9226c0 );
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto frame_no_exception_1;

    frame_return_exit_1:;
#if 0
    RESTORE_FRAME_EXCEPTION( frame_756034e7ad7faf33e5dfc5731b9226c0 );
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto function_return_exit;

    frame_exception_exit_1:;

#if 0
    RESTORE_FRAME_EXCEPTION( frame_756034e7ad7faf33e5dfc5731b9226c0 );
#endif

    if ( exception_tb == NULL )
    {
        exception_tb = MAKE_TRACEBACK( frame_756034e7ad7faf33e5dfc5731b9226c0, exception_lineno );
    }
    else if ( exception_tb->tb_frame != &frame_756034e7ad7faf33e5dfc5731b9226c0->m_frame )
    {
        exception_tb = ADD_TRACEBACK( exception_tb, frame_756034e7ad7faf33e5dfc5731b9226c0, exception_lineno );
    }

    // Attachs locals to frame if any.
    Nuitka_Frame_AttachLocals(
        (struct Nuitka_FrameObject *)frame_756034e7ad7faf33e5dfc5731b9226c0,
        type_description_1
    );


    // Release cached frame.
    if ( frame_756034e7ad7faf33e5dfc5731b9226c0 == cache_frame_756034e7ad7faf33e5dfc5731b9226c0 )
    {
        Py_DECREF( frame_756034e7ad7faf33e5dfc5731b9226c0 );
    }
    cache_frame_756034e7ad7faf33e5dfc5731b9226c0 = NULL;

    assertFrameObject( frame_756034e7ad7faf33e5dfc5731b9226c0 );

    // Put the previous frame back on top.
    popFrameStack();

    // Return the error.
    goto function_exception_exit;

    frame_no_exception_1:;

    // Return statement must have exited already.
    NUITKA_CANNOT_GET_HERE( platform$$$function_32_python_version );
    return NULL;

function_exception_exit:
    assert( exception_type );
    RESTORE_ERROR_OCCURRED( exception_type, exception_value, exception_tb );

    return NULL;

function_return_exit:
   // Function cleanup code if any.


   // Actual function exit with return value, making sure we did not make
   // the error status worse despite non-NULL return.
   CHECK_OBJECT( tmp_return_value );
   assert( had_error || !ERROR_OCCURRED() );
   return tmp_return_value;
}


static PyObject *impl_platform$$$function_33_python_version_tuple( struct Nuitka_FunctionObject const *self, PyObject **python_pars )
{
    // Preserve error status for checks
#ifndef __NUITKA_NO_ASSERT__
    NUITKA_MAY_BE_UNUSED bool had_error = ERROR_OCCURRED();
#endif

    // Local variable declarations.
    struct Nuitka_FrameObject *frame_a8e6c9dfcb2bfbef2f59b950a2c2d875;
    NUITKA_MAY_BE_UNUSED char const *type_description_1 = NULL;
    PyObject *tmp_return_value = NULL;
    PyObject *exception_type = NULL;
    PyObject *exception_value = NULL;
    PyTracebackObject *exception_tb = NULL;
    NUITKA_MAY_BE_UNUSED int exception_lineno = 0;
    static struct Nuitka_FrameObject *cache_frame_a8e6c9dfcb2bfbef2f59b950a2c2d875 = NULL;

    // Actual function body.
    MAKE_OR_REUSE_FRAME( cache_frame_a8e6c9dfcb2bfbef2f59b950a2c2d875, codeobj_a8e6c9dfcb2bfbef2f59b950a2c2d875, module_platform, 0 );
    frame_a8e6c9dfcb2bfbef2f59b950a2c2d875 = cache_frame_a8e6c9dfcb2bfbef2f59b950a2c2d875;

    // Push the new frame as the currently active one.
    pushFrameStack( frame_a8e6c9dfcb2bfbef2f59b950a2c2d875 );

    // Mark the frame object as in use, ref count 1 will be up for reuse.
    assert( Py_REFCNT( frame_a8e6c9dfcb2bfbef2f59b950a2c2d875 ) == 2 ); // Frame stack

    // Framed code:
    {
        PyObject *tmp_tuple_arg_1;
        PyObject *tmp_called_instance_1;
        PyObject *tmp_subscribed_name_1;
        PyObject *tmp_called_name_1;
        PyObject *tmp_mvar_value_1;
        PyObject *tmp_subscript_name_1;
        tmp_mvar_value_1 = GET_STRING_DICT_VALUE( moduledict_platform, (Nuitka_StringObject *)const_str_plain__sys_version );

        if (unlikely( tmp_mvar_value_1 == NULL ))
        {
            tmp_mvar_value_1 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain__sys_version );
        }

        if ( tmp_mvar_value_1 == NULL )
        {

            exception_type = PyExc_NameError;
            Py_INCREF( exception_type );
            exception_value = PyUnicode_FromFormat( "name '%s' is not defined", "_sys_version" );
            exception_tb = NULL;
            NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
            CHAIN_EXCEPTION( exception_value );

            exception_lineno = 1285;

            goto frame_exception_exit_1;
        }

        tmp_called_name_1 = tmp_mvar_value_1;
        frame_a8e6c9dfcb2bfbef2f59b950a2c2d875->m_frame.f_lineno = 1285;
        tmp_subscribed_name_1 = CALL_FUNCTION_NO_ARGS( tmp_called_name_1 );
        if ( tmp_subscribed_name_1 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 1285;

            goto frame_exception_exit_1;
        }
        tmp_subscript_name_1 = const_int_pos_1;
        tmp_called_instance_1 = LOOKUP_SUBSCRIPT_CONST( tmp_subscribed_name_1, tmp_subscript_name_1, 1 );
        Py_DECREF( tmp_subscribed_name_1 );
        if ( tmp_called_instance_1 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 1285;

            goto frame_exception_exit_1;
        }
        frame_a8e6c9dfcb2bfbef2f59b950a2c2d875->m_frame.f_lineno = 1285;
        tmp_tuple_arg_1 = CALL_METHOD_WITH_ARGS1( tmp_called_instance_1, const_str_plain_split, &PyTuple_GET_ITEM( const_tuple_str_dot_tuple, 0 ) );

        Py_DECREF( tmp_called_instance_1 );
        if ( tmp_tuple_arg_1 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 1285;

            goto frame_exception_exit_1;
        }
        tmp_return_value = PySequence_Tuple( tmp_tuple_arg_1 );
        Py_DECREF( tmp_tuple_arg_1 );
        if ( tmp_return_value == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 1285;

            goto frame_exception_exit_1;
        }
        goto frame_return_exit_1;
    }

#if 0
    RESTORE_FRAME_EXCEPTION( frame_a8e6c9dfcb2bfbef2f59b950a2c2d875 );
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto frame_no_exception_1;

    frame_return_exit_1:;
#if 0
    RESTORE_FRAME_EXCEPTION( frame_a8e6c9dfcb2bfbef2f59b950a2c2d875 );
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto function_return_exit;

    frame_exception_exit_1:;

#if 0
    RESTORE_FRAME_EXCEPTION( frame_a8e6c9dfcb2bfbef2f59b950a2c2d875 );
#endif

    if ( exception_tb == NULL )
    {
        exception_tb = MAKE_TRACEBACK( frame_a8e6c9dfcb2bfbef2f59b950a2c2d875, exception_lineno );
    }
    else if ( exception_tb->tb_frame != &frame_a8e6c9dfcb2bfbef2f59b950a2c2d875->m_frame )
    {
        exception_tb = ADD_TRACEBACK( exception_tb, frame_a8e6c9dfcb2bfbef2f59b950a2c2d875, exception_lineno );
    }

    // Attachs locals to frame if any.
    Nuitka_Frame_AttachLocals(
        (struct Nuitka_FrameObject *)frame_a8e6c9dfcb2bfbef2f59b950a2c2d875,
        type_description_1
    );


    // Release cached frame.
    if ( frame_a8e6c9dfcb2bfbef2f59b950a2c2d875 == cache_frame_a8e6c9dfcb2bfbef2f59b950a2c2d875 )
    {
        Py_DECREF( frame_a8e6c9dfcb2bfbef2f59b950a2c2d875 );
    }
    cache_frame_a8e6c9dfcb2bfbef2f59b950a2c2d875 = NULL;

    assertFrameObject( frame_a8e6c9dfcb2bfbef2f59b950a2c2d875 );

    // Put the previous frame back on top.
    popFrameStack();

    // Return the error.
    goto function_exception_exit;

    frame_no_exception_1:;

    // Return statement must have exited already.
    NUITKA_CANNOT_GET_HERE( platform$$$function_33_python_version_tuple );
    return NULL;

function_exception_exit:
    assert( exception_type );
    RESTORE_ERROR_OCCURRED( exception_type, exception_value, exception_tb );

    return NULL;

function_return_exit:
   // Function cleanup code if any.


   // Actual function exit with return value, making sure we did not make
   // the error status worse despite non-NULL return.
   CHECK_OBJECT( tmp_return_value );
   assert( had_error || !ERROR_OCCURRED() );
   return tmp_return_value;
}


static PyObject *impl_platform$$$function_34_python_branch( struct Nuitka_FunctionObject const *self, PyObject **python_pars )
{
    // Preserve error status for checks
#ifndef __NUITKA_NO_ASSERT__
    NUITKA_MAY_BE_UNUSED bool had_error = ERROR_OCCURRED();
#endif

    // Local variable declarations.
    struct Nuitka_FrameObject *frame_79402a9ecb16097a6e3b6ce2bdaf0398;
    NUITKA_MAY_BE_UNUSED char const *type_description_1 = NULL;
    PyObject *tmp_return_value = NULL;
    PyObject *exception_type = NULL;
    PyObject *exception_value = NULL;
    PyTracebackObject *exception_tb = NULL;
    NUITKA_MAY_BE_UNUSED int exception_lineno = 0;
    static struct Nuitka_FrameObject *cache_frame_79402a9ecb16097a6e3b6ce2bdaf0398 = NULL;

    // Actual function body.
    MAKE_OR_REUSE_FRAME( cache_frame_79402a9ecb16097a6e3b6ce2bdaf0398, codeobj_79402a9ecb16097a6e3b6ce2bdaf0398, module_platform, 0 );
    frame_79402a9ecb16097a6e3b6ce2bdaf0398 = cache_frame_79402a9ecb16097a6e3b6ce2bdaf0398;

    // Push the new frame as the currently active one.
    pushFrameStack( frame_79402a9ecb16097a6e3b6ce2bdaf0398 );

    // Mark the frame object as in use, ref count 1 will be up for reuse.
    assert( Py_REFCNT( frame_79402a9ecb16097a6e3b6ce2bdaf0398 ) == 2 ); // Frame stack

    // Framed code:
    {
        PyObject *tmp_subscribed_name_1;
        PyObject *tmp_called_name_1;
        PyObject *tmp_mvar_value_1;
        PyObject *tmp_subscript_name_1;
        tmp_mvar_value_1 = GET_STRING_DICT_VALUE( moduledict_platform, (Nuitka_StringObject *)const_str_plain__sys_version );

        if (unlikely( tmp_mvar_value_1 == NULL ))
        {
            tmp_mvar_value_1 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain__sys_version );
        }

        if ( tmp_mvar_value_1 == NULL )
        {

            exception_type = PyExc_NameError;
            Py_INCREF( exception_type );
            exception_value = PyUnicode_FromFormat( "name '%s' is not defined", "_sys_version" );
            exception_tb = NULL;
            NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
            CHAIN_EXCEPTION( exception_value );

            exception_lineno = 1299;

            goto frame_exception_exit_1;
        }

        tmp_called_name_1 = tmp_mvar_value_1;
        frame_79402a9ecb16097a6e3b6ce2bdaf0398->m_frame.f_lineno = 1299;
        tmp_subscribed_name_1 = CALL_FUNCTION_NO_ARGS( tmp_called_name_1 );
        if ( tmp_subscribed_name_1 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 1299;

            goto frame_exception_exit_1;
        }
        tmp_subscript_name_1 = const_int_pos_2;
        tmp_return_value = LOOKUP_SUBSCRIPT_CONST( tmp_subscribed_name_1, tmp_subscript_name_1, 2 );
        Py_DECREF( tmp_subscribed_name_1 );
        if ( tmp_return_value == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 1299;

            goto frame_exception_exit_1;
        }
        goto frame_return_exit_1;
    }

#if 0
    RESTORE_FRAME_EXCEPTION( frame_79402a9ecb16097a6e3b6ce2bdaf0398 );
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto frame_no_exception_1;

    frame_return_exit_1:;
#if 0
    RESTORE_FRAME_EXCEPTION( frame_79402a9ecb16097a6e3b6ce2bdaf0398 );
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto function_return_exit;

    frame_exception_exit_1:;

#if 0
    RESTORE_FRAME_EXCEPTION( frame_79402a9ecb16097a6e3b6ce2bdaf0398 );
#endif

    if ( exception_tb == NULL )
    {
        exception_tb = MAKE_TRACEBACK( frame_79402a9ecb16097a6e3b6ce2bdaf0398, exception_lineno );
    }
    else if ( exception_tb->tb_frame != &frame_79402a9ecb16097a6e3b6ce2bdaf0398->m_frame )
    {
        exception_tb = ADD_TRACEBACK( exception_tb, frame_79402a9ecb16097a6e3b6ce2bdaf0398, exception_lineno );
    }

    // Attachs locals to frame if any.
    Nuitka_Frame_AttachLocals(
        (struct Nuitka_FrameObject *)frame_79402a9ecb16097a6e3b6ce2bdaf0398,
        type_description_1
    );


    // Release cached frame.
    if ( frame_79402a9ecb16097a6e3b6ce2bdaf0398 == cache_frame_79402a9ecb16097a6e3b6ce2bdaf0398 )
    {
        Py_DECREF( frame_79402a9ecb16097a6e3b6ce2bdaf0398 );
    }
    cache_frame_79402a9ecb16097a6e3b6ce2bdaf0398 = NULL;

    assertFrameObject( frame_79402a9ecb16097a6e3b6ce2bdaf0398 );

    // Put the previous frame back on top.
    popFrameStack();

    // Return the error.
    goto function_exception_exit;

    frame_no_exception_1:;

    // Return statement must have exited already.
    NUITKA_CANNOT_GET_HERE( platform$$$function_34_python_branch );
    return NULL;

function_exception_exit:
    assert( exception_type );
    RESTORE_ERROR_OCCURRED( exception_type, exception_value, exception_tb );

    return NULL;

function_return_exit:
   // Function cleanup code if any.


   // Actual function exit with return value, making sure we did not make
   // the error status worse despite non-NULL return.
   CHECK_OBJECT( tmp_return_value );
   assert( had_error || !ERROR_OCCURRED() );
   return tmp_return_value;
}


static PyObject *impl_platform$$$function_35_python_revision( struct Nuitka_FunctionObject const *self, PyObject **python_pars )
{
    // Preserve error status for checks
#ifndef __NUITKA_NO_ASSERT__
    NUITKA_MAY_BE_UNUSED bool had_error = ERROR_OCCURRED();
#endif

    // Local variable declarations.
    struct Nuitka_FrameObject *frame_4ed41bafbaed395db0c4281ae5cc0357;
    NUITKA_MAY_BE_UNUSED char const *type_description_1 = NULL;
    PyObject *tmp_return_value = NULL;
    PyObject *exception_type = NULL;
    PyObject *exception_value = NULL;
    PyTracebackObject *exception_tb = NULL;
    NUITKA_MAY_BE_UNUSED int exception_lineno = 0;
    static struct Nuitka_FrameObject *cache_frame_4ed41bafbaed395db0c4281ae5cc0357 = NULL;

    // Actual function body.
    MAKE_OR_REUSE_FRAME( cache_frame_4ed41bafbaed395db0c4281ae5cc0357, codeobj_4ed41bafbaed395db0c4281ae5cc0357, module_platform, 0 );
    frame_4ed41bafbaed395db0c4281ae5cc0357 = cache_frame_4ed41bafbaed395db0c4281ae5cc0357;

    // Push the new frame as the currently active one.
    pushFrameStack( frame_4ed41bafbaed395db0c4281ae5cc0357 );

    // Mark the frame object as in use, ref count 1 will be up for reuse.
    assert( Py_REFCNT( frame_4ed41bafbaed395db0c4281ae5cc0357 ) == 2 ); // Frame stack

    // Framed code:
    {
        PyObject *tmp_subscribed_name_1;
        PyObject *tmp_called_name_1;
        PyObject *tmp_mvar_value_1;
        PyObject *tmp_subscript_name_1;
        tmp_mvar_value_1 = GET_STRING_DICT_VALUE( moduledict_platform, (Nuitka_StringObject *)const_str_plain__sys_version );

        if (unlikely( tmp_mvar_value_1 == NULL ))
        {
            tmp_mvar_value_1 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain__sys_version );
        }

        if ( tmp_mvar_value_1 == NULL )
        {

            exception_type = PyExc_NameError;
            Py_INCREF( exception_type );
            exception_value = PyUnicode_FromFormat( "name '%s' is not defined", "_sys_version" );
            exception_tb = NULL;
            NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
            CHAIN_EXCEPTION( exception_value );

            exception_lineno = 1312;

            goto frame_exception_exit_1;
        }

        tmp_called_name_1 = tmp_mvar_value_1;
        frame_4ed41bafbaed395db0c4281ae5cc0357->m_frame.f_lineno = 1312;
        tmp_subscribed_name_1 = CALL_FUNCTION_NO_ARGS( tmp_called_name_1 );
        if ( tmp_subscribed_name_1 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 1312;

            goto frame_exception_exit_1;
        }
        tmp_subscript_name_1 = const_int_pos_3;
        tmp_return_value = LOOKUP_SUBSCRIPT_CONST( tmp_subscribed_name_1, tmp_subscript_name_1, 3 );
        Py_DECREF( tmp_subscribed_name_1 );
        if ( tmp_return_value == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 1312;

            goto frame_exception_exit_1;
        }
        goto frame_return_exit_1;
    }

#if 0
    RESTORE_FRAME_EXCEPTION( frame_4ed41bafbaed395db0c4281ae5cc0357 );
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto frame_no_exception_1;

    frame_return_exit_1:;
#if 0
    RESTORE_FRAME_EXCEPTION( frame_4ed41bafbaed395db0c4281ae5cc0357 );
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto function_return_exit;

    frame_exception_exit_1:;

#if 0
    RESTORE_FRAME_EXCEPTION( frame_4ed41bafbaed395db0c4281ae5cc0357 );
#endif

    if ( exception_tb == NULL )
    {
        exception_tb = MAKE_TRACEBACK( frame_4ed41bafbaed395db0c4281ae5cc0357, exception_lineno );
    }
    else if ( exception_tb->tb_frame != &frame_4ed41bafbaed395db0c4281ae5cc0357->m_frame )
    {
        exception_tb = ADD_TRACEBACK( exception_tb, frame_4ed41bafbaed395db0c4281ae5cc0357, exception_lineno );
    }

    // Attachs locals to frame if any.
    Nuitka_Frame_AttachLocals(
        (struct Nuitka_FrameObject *)frame_4ed41bafbaed395db0c4281ae5cc0357,
        type_description_1
    );


    // Release cached frame.
    if ( frame_4ed41bafbaed395db0c4281ae5cc0357 == cache_frame_4ed41bafbaed395db0c4281ae5cc0357 )
    {
        Py_DECREF( frame_4ed41bafbaed395db0c4281ae5cc0357 );
    }
    cache_frame_4ed41bafbaed395db0c4281ae5cc0357 = NULL;

    assertFrameObject( frame_4ed41bafbaed395db0c4281ae5cc0357 );

    // Put the previous frame back on top.
    popFrameStack();

    // Return the error.
    goto function_exception_exit;

    frame_no_exception_1:;

    // Return statement must have exited already.
    NUITKA_CANNOT_GET_HERE( platform$$$function_35_python_revision );
    return NULL;

function_exception_exit:
    assert( exception_type );
    RESTORE_ERROR_OCCURRED( exception_type, exception_value, exception_tb );

    return NULL;

function_return_exit:
   // Function cleanup code if any.


   // Actual function exit with return value, making sure we did not make
   // the error status worse despite non-NULL return.
   CHECK_OBJECT( tmp_return_value );
   assert( had_error || !ERROR_OCCURRED() );
   return tmp_return_value;
}


static PyObject *impl_platform$$$function_36_python_build( struct Nuitka_FunctionObject const *self, PyObject **python_pars )
{
    // Preserve error status for checks
#ifndef __NUITKA_NO_ASSERT__
    NUITKA_MAY_BE_UNUSED bool had_error = ERROR_OCCURRED();
#endif

    // Local variable declarations.
    struct Nuitka_FrameObject *frame_fef074391b25ff2e4937d3866ed97d3a;
    NUITKA_MAY_BE_UNUSED char const *type_description_1 = NULL;
    PyObject *tmp_return_value = NULL;
    PyObject *exception_type = NULL;
    PyObject *exception_value = NULL;
    PyTracebackObject *exception_tb = NULL;
    NUITKA_MAY_BE_UNUSED int exception_lineno = 0;
    static struct Nuitka_FrameObject *cache_frame_fef074391b25ff2e4937d3866ed97d3a = NULL;

    // Actual function body.
    MAKE_OR_REUSE_FRAME( cache_frame_fef074391b25ff2e4937d3866ed97d3a, codeobj_fef074391b25ff2e4937d3866ed97d3a, module_platform, 0 );
    frame_fef074391b25ff2e4937d3866ed97d3a = cache_frame_fef074391b25ff2e4937d3866ed97d3a;

    // Push the new frame as the currently active one.
    pushFrameStack( frame_fef074391b25ff2e4937d3866ed97d3a );

    // Mark the frame object as in use, ref count 1 will be up for reuse.
    assert( Py_REFCNT( frame_fef074391b25ff2e4937d3866ed97d3a ) == 2 ); // Frame stack

    // Framed code:
    {
        PyObject *tmp_subscribed_name_1;
        PyObject *tmp_called_name_1;
        PyObject *tmp_mvar_value_1;
        PyObject *tmp_subscript_name_1;
        tmp_mvar_value_1 = GET_STRING_DICT_VALUE( moduledict_platform, (Nuitka_StringObject *)const_str_plain__sys_version );

        if (unlikely( tmp_mvar_value_1 == NULL ))
        {
            tmp_mvar_value_1 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain__sys_version );
        }

        if ( tmp_mvar_value_1 == NULL )
        {

            exception_type = PyExc_NameError;
            Py_INCREF( exception_type );
            exception_value = PyUnicode_FromFormat( "name '%s' is not defined", "_sys_version" );
            exception_tb = NULL;
            NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
            CHAIN_EXCEPTION( exception_value );

            exception_lineno = 1320;

            goto frame_exception_exit_1;
        }

        tmp_called_name_1 = tmp_mvar_value_1;
        frame_fef074391b25ff2e4937d3866ed97d3a->m_frame.f_lineno = 1320;
        tmp_subscribed_name_1 = CALL_FUNCTION_NO_ARGS( tmp_called_name_1 );
        if ( tmp_subscribed_name_1 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 1320;

            goto frame_exception_exit_1;
        }
        tmp_subscript_name_1 = const_slice_int_pos_4_int_pos_6_none;
        tmp_return_value = LOOKUP_SUBSCRIPT( tmp_subscribed_name_1, tmp_subscript_name_1 );
        Py_DECREF( tmp_subscribed_name_1 );
        if ( tmp_return_value == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 1320;

            goto frame_exception_exit_1;
        }
        goto frame_return_exit_1;
    }

#if 0
    RESTORE_FRAME_EXCEPTION( frame_fef074391b25ff2e4937d3866ed97d3a );
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto frame_no_exception_1;

    frame_return_exit_1:;
#if 0
    RESTORE_FRAME_EXCEPTION( frame_fef074391b25ff2e4937d3866ed97d3a );
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto function_return_exit;

    frame_exception_exit_1:;

#if 0
    RESTORE_FRAME_EXCEPTION( frame_fef074391b25ff2e4937d3866ed97d3a );
#endif

    if ( exception_tb == NULL )
    {
        exception_tb = MAKE_TRACEBACK( frame_fef074391b25ff2e4937d3866ed97d3a, exception_lineno );
    }
    else if ( exception_tb->tb_frame != &frame_fef074391b25ff2e4937d3866ed97d3a->m_frame )
    {
        exception_tb = ADD_TRACEBACK( exception_tb, frame_fef074391b25ff2e4937d3866ed97d3a, exception_lineno );
    }

    // Attachs locals to frame if any.
    Nuitka_Frame_AttachLocals(
        (struct Nuitka_FrameObject *)frame_fef074391b25ff2e4937d3866ed97d3a,
        type_description_1
    );


    // Release cached frame.
    if ( frame_fef074391b25ff2e4937d3866ed97d3a == cache_frame_fef074391b25ff2e4937d3866ed97d3a )
    {
        Py_DECREF( frame_fef074391b25ff2e4937d3866ed97d3a );
    }
    cache_frame_fef074391b25ff2e4937d3866ed97d3a = NULL;

    assertFrameObject( frame_fef074391b25ff2e4937d3866ed97d3a );

    // Put the previous frame back on top.
    popFrameStack();

    // Return the error.
    goto function_exception_exit;

    frame_no_exception_1:;

    // Return statement must have exited already.
    NUITKA_CANNOT_GET_HERE( platform$$$function_36_python_build );
    return NULL;

function_exception_exit:
    assert( exception_type );
    RESTORE_ERROR_OCCURRED( exception_type, exception_value, exception_tb );

    return NULL;

function_return_exit:
   // Function cleanup code if any.


   // Actual function exit with return value, making sure we did not make
   // the error status worse despite non-NULL return.
   CHECK_OBJECT( tmp_return_value );
   assert( had_error || !ERROR_OCCURRED() );
   return tmp_return_value;
}


static PyObject *impl_platform$$$function_37_python_compiler( struct Nuitka_FunctionObject const *self, PyObject **python_pars )
{
    // Preserve error status for checks
#ifndef __NUITKA_NO_ASSERT__
    NUITKA_MAY_BE_UNUSED bool had_error = ERROR_OCCURRED();
#endif

    // Local variable declarations.
    struct Nuitka_FrameObject *frame_3efa31fc82831885992d6ca32e1aa252;
    NUITKA_MAY_BE_UNUSED char const *type_description_1 = NULL;
    PyObject *tmp_return_value = NULL;
    PyObject *exception_type = NULL;
    PyObject *exception_value = NULL;
    PyTracebackObject *exception_tb = NULL;
    NUITKA_MAY_BE_UNUSED int exception_lineno = 0;
    static struct Nuitka_FrameObject *cache_frame_3efa31fc82831885992d6ca32e1aa252 = NULL;

    // Actual function body.
    MAKE_OR_REUSE_FRAME( cache_frame_3efa31fc82831885992d6ca32e1aa252, codeobj_3efa31fc82831885992d6ca32e1aa252, module_platform, 0 );
    frame_3efa31fc82831885992d6ca32e1aa252 = cache_frame_3efa31fc82831885992d6ca32e1aa252;

    // Push the new frame as the currently active one.
    pushFrameStack( frame_3efa31fc82831885992d6ca32e1aa252 );

    // Mark the frame object as in use, ref count 1 will be up for reuse.
    assert( Py_REFCNT( frame_3efa31fc82831885992d6ca32e1aa252 ) == 2 ); // Frame stack

    // Framed code:
    {
        PyObject *tmp_subscribed_name_1;
        PyObject *tmp_called_name_1;
        PyObject *tmp_mvar_value_1;
        PyObject *tmp_subscript_name_1;
        tmp_mvar_value_1 = GET_STRING_DICT_VALUE( moduledict_platform, (Nuitka_StringObject *)const_str_plain__sys_version );

        if (unlikely( tmp_mvar_value_1 == NULL ))
        {
            tmp_mvar_value_1 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain__sys_version );
        }

        if ( tmp_mvar_value_1 == NULL )
        {

            exception_type = PyExc_NameError;
            Py_INCREF( exception_type );
            exception_value = PyUnicode_FromFormat( "name '%s' is not defined", "_sys_version" );
            exception_tb = NULL;
            NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
            CHAIN_EXCEPTION( exception_value );

            exception_lineno = 1328;

            goto frame_exception_exit_1;
        }

        tmp_called_name_1 = tmp_mvar_value_1;
        frame_3efa31fc82831885992d6ca32e1aa252->m_frame.f_lineno = 1328;
        tmp_subscribed_name_1 = CALL_FUNCTION_NO_ARGS( tmp_called_name_1 );
        if ( tmp_subscribed_name_1 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 1328;

            goto frame_exception_exit_1;
        }
        tmp_subscript_name_1 = const_int_pos_6;
        tmp_return_value = LOOKUP_SUBSCRIPT_CONST( tmp_subscribed_name_1, tmp_subscript_name_1, 6 );
        Py_DECREF( tmp_subscribed_name_1 );
        if ( tmp_return_value == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 1328;

            goto frame_exception_exit_1;
        }
        goto frame_return_exit_1;
    }

#if 0
    RESTORE_FRAME_EXCEPTION( frame_3efa31fc82831885992d6ca32e1aa252 );
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto frame_no_exception_1;

    frame_return_exit_1:;
#if 0
    RESTORE_FRAME_EXCEPTION( frame_3efa31fc82831885992d6ca32e1aa252 );
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto function_return_exit;

    frame_exception_exit_1:;

#if 0
    RESTORE_FRAME_EXCEPTION( frame_3efa31fc82831885992d6ca32e1aa252 );
#endif

    if ( exception_tb == NULL )
    {
        exception_tb = MAKE_TRACEBACK( frame_3efa31fc82831885992d6ca32e1aa252, exception_lineno );
    }
    else if ( exception_tb->tb_frame != &frame_3efa31fc82831885992d6ca32e1aa252->m_frame )
    {
        exception_tb = ADD_TRACEBACK( exception_tb, frame_3efa31fc82831885992d6ca32e1aa252, exception_lineno );
    }

    // Attachs locals to frame if any.
    Nuitka_Frame_AttachLocals(
        (struct Nuitka_FrameObject *)frame_3efa31fc82831885992d6ca32e1aa252,
        type_description_1
    );


    // Release cached frame.
    if ( frame_3efa31fc82831885992d6ca32e1aa252 == cache_frame_3efa31fc82831885992d6ca32e1aa252 )
    {
        Py_DECREF( frame_3efa31fc82831885992d6ca32e1aa252 );
    }
    cache_frame_3efa31fc82831885992d6ca32e1aa252 = NULL;

    assertFrameObject( frame_3efa31fc82831885992d6ca32e1aa252 );

    // Put the previous frame back on top.
    popFrameStack();

    // Return the error.
    goto function_exception_exit;

    frame_no_exception_1:;

    // Return statement must have exited already.
    NUITKA_CANNOT_GET_HERE( platform$$$function_37_python_compiler );
    return NULL;

function_exception_exit:
    assert( exception_type );
    RESTORE_ERROR_OCCURRED( exception_type, exception_value, exception_tb );

    return NULL;

function_return_exit:
   // Function cleanup code if any.


   // Actual function exit with return value, making sure we did not make
   // the error status worse despite non-NULL return.
   CHECK_OBJECT( tmp_return_value );
   assert( had_error || !ERROR_OCCURRED() );
   return tmp_return_value;
}


static PyObject *impl_platform$$$function_38_platform( struct Nuitka_FunctionObject const *self, PyObject **python_pars )
{
    // Preserve error status for checks
#ifndef __NUITKA_NO_ASSERT__
    NUITKA_MAY_BE_UNUSED bool had_error = ERROR_OCCURRED();
#endif

    // Local variable declarations.
    PyObject *par_aliased = python_pars[ 0 ];
    PyObject *par_terse = python_pars[ 1 ];
    PyObject *var_result = NULL;
    PyObject *var_system = NULL;
    PyObject *var_node = NULL;
    PyObject *var_release = NULL;
    PyObject *var_version = NULL;
    PyObject *var_machine = NULL;
    PyObject *var_processor = NULL;
    PyObject *var_rel = NULL;
    PyObject *var_vers = NULL;
    PyObject *var_csd = NULL;
    PyObject *var_ptype = NULL;
    PyObject *var_platform = NULL;
    PyObject *var_distname = NULL;
    PyObject *var_distversion = NULL;
    PyObject *var_distid = NULL;
    PyObject *var_libcname = NULL;
    PyObject *var_libcversion = NULL;
    PyObject *var_r = NULL;
    PyObject *var_v = NULL;
    PyObject *var_vminfo = NULL;
    PyObject *var_os_name = NULL;
    PyObject *var_os_version = NULL;
    PyObject *var_os_arch = NULL;
    PyObject *var_bits = NULL;
    PyObject *var_linkage = NULL;
    PyObject *tmp_tuple_unpack_1__element_1 = NULL;
    PyObject *tmp_tuple_unpack_1__element_2 = NULL;
    PyObject *tmp_tuple_unpack_1__element_3 = NULL;
    PyObject *tmp_tuple_unpack_1__element_4 = NULL;
    PyObject *tmp_tuple_unpack_1__element_5 = NULL;
    PyObject *tmp_tuple_unpack_1__element_6 = NULL;
    PyObject *tmp_tuple_unpack_1__source_iter = NULL;
    PyObject *tmp_tuple_unpack_2__element_1 = NULL;
    PyObject *tmp_tuple_unpack_2__element_2 = NULL;
    PyObject *tmp_tuple_unpack_2__element_3 = NULL;
    PyObject *tmp_tuple_unpack_2__source_iter = NULL;
    PyObject *tmp_tuple_unpack_3__element_1 = NULL;
    PyObject *tmp_tuple_unpack_3__element_2 = NULL;
    PyObject *tmp_tuple_unpack_3__element_3 = NULL;
    PyObject *tmp_tuple_unpack_3__element_4 = NULL;
    PyObject *tmp_tuple_unpack_3__source_iter = NULL;
    PyObject *tmp_tuple_unpack_4__element_1 = NULL;
    PyObject *tmp_tuple_unpack_4__element_2 = NULL;
    PyObject *tmp_tuple_unpack_4__element_3 = NULL;
    PyObject *tmp_tuple_unpack_4__source_iter = NULL;
    PyObject *tmp_tuple_unpack_5__element_1 = NULL;
    PyObject *tmp_tuple_unpack_5__element_2 = NULL;
    PyObject *tmp_tuple_unpack_5__source_iter = NULL;
    PyObject *tmp_tuple_unpack_6__element_1 = NULL;
    PyObject *tmp_tuple_unpack_6__element_2 = NULL;
    PyObject *tmp_tuple_unpack_6__element_3 = NULL;
    PyObject *tmp_tuple_unpack_6__element_4 = NULL;
    PyObject *tmp_tuple_unpack_6__source_iter = NULL;
    PyObject *tmp_tuple_unpack_7__element_1 = NULL;
    PyObject *tmp_tuple_unpack_7__element_2 = NULL;
    PyObject *tmp_tuple_unpack_7__element_3 = NULL;
    PyObject *tmp_tuple_unpack_7__source_iter = NULL;
    PyObject *tmp_tuple_unpack_8__element_1 = NULL;
    PyObject *tmp_tuple_unpack_8__element_2 = NULL;
    PyObject *tmp_tuple_unpack_8__source_iter = NULL;
    PyObject *tmp_with_1__enter = NULL;
    PyObject *tmp_with_1__exit = NULL;
    nuitka_bool tmp_with_1__indicator = NUITKA_BOOL_UNASSIGNED;
    PyObject *tmp_with_1__source = NULL;
    struct Nuitka_FrameObject *frame_0d3a22fe3694b8da215ae5e33a50d7cb;
    NUITKA_MAY_BE_UNUSED char const *type_description_1 = NULL;
    PyObject *exception_type = NULL;
    PyObject *exception_value = NULL;
    PyTracebackObject *exception_tb = NULL;
    NUITKA_MAY_BE_UNUSED int exception_lineno = 0;
    PyObject *tmp_return_value = NULL;
    PyObject *tmp_iterator_attempt;
    PyObject *exception_keeper_type_1;
    PyObject *exception_keeper_value_1;
    PyTracebackObject *exception_keeper_tb_1;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_1;
    PyObject *exception_keeper_type_2;
    PyObject *exception_keeper_value_2;
    PyTracebackObject *exception_keeper_tb_2;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_2;
    int tmp_res;
    PyObject *exception_keeper_type_3;
    PyObject *exception_keeper_value_3;
    PyTracebackObject *exception_keeper_tb_3;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_3;
    PyObject *exception_keeper_type_4;
    PyObject *exception_keeper_value_4;
    PyTracebackObject *exception_keeper_tb_4;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_4;
    PyObject *exception_keeper_type_5;
    PyObject *exception_keeper_value_5;
    PyTracebackObject *exception_keeper_tb_5;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_5;
    PyObject *exception_keeper_type_6;
    PyObject *exception_keeper_value_6;
    PyTracebackObject *exception_keeper_tb_6;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_6;
    PyObject *exception_keeper_type_7;
    PyObject *exception_keeper_value_7;
    PyTracebackObject *exception_keeper_tb_7;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_7;
    PyObject *exception_keeper_type_8;
    PyObject *exception_keeper_value_8;
    PyTracebackObject *exception_keeper_tb_8;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_8;
    PyObject *exception_keeper_type_9;
    PyObject *exception_keeper_value_9;
    PyTracebackObject *exception_keeper_tb_9;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_9;
    PyObject *exception_preserved_type_1;
    PyObject *exception_preserved_value_1;
    PyTracebackObject *exception_preserved_tb_1;
    bool tmp_result;
    PyObject *exception_keeper_type_10;
    PyObject *exception_keeper_value_10;
    PyTracebackObject *exception_keeper_tb_10;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_10;
    PyObject *exception_keeper_type_11;
    PyObject *exception_keeper_value_11;
    PyTracebackObject *exception_keeper_tb_11;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_11;
    PyObject *exception_keeper_type_12;
    PyObject *exception_keeper_value_12;
    PyTracebackObject *exception_keeper_tb_12;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_12;
    PyObject *exception_keeper_type_13;
    PyObject *exception_keeper_value_13;
    PyTracebackObject *exception_keeper_tb_13;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_13;
    PyObject *exception_keeper_type_14;
    PyObject *exception_keeper_value_14;
    PyTracebackObject *exception_keeper_tb_14;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_14;
    PyObject *exception_keeper_type_15;
    PyObject *exception_keeper_value_15;
    PyTracebackObject *exception_keeper_tb_15;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_15;
    PyObject *exception_keeper_type_16;
    PyObject *exception_keeper_value_16;
    PyTracebackObject *exception_keeper_tb_16;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_16;
    PyObject *exception_keeper_type_17;
    PyObject *exception_keeper_value_17;
    PyTracebackObject *exception_keeper_tb_17;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_17;
    PyObject *exception_keeper_type_18;
    PyObject *exception_keeper_value_18;
    PyTracebackObject *exception_keeper_tb_18;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_18;
    PyObject *exception_keeper_type_19;
    PyObject *exception_keeper_value_19;
    PyTracebackObject *exception_keeper_tb_19;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_19;
    PyObject *exception_keeper_type_20;
    PyObject *exception_keeper_value_20;
    PyTracebackObject *exception_keeper_tb_20;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_20;
    static struct Nuitka_FrameObject *cache_frame_0d3a22fe3694b8da215ae5e33a50d7cb = NULL;
    PyObject *exception_keeper_type_21;
    PyObject *exception_keeper_value_21;
    PyTracebackObject *exception_keeper_tb_21;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_21;

    // Actual function body.
    // Tried code:
    MAKE_OR_REUSE_FRAME( cache_frame_0d3a22fe3694b8da215ae5e33a50d7cb, codeobj_0d3a22fe3694b8da215ae5e33a50d7cb, module_platform, sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *) );
    frame_0d3a22fe3694b8da215ae5e33a50d7cb = cache_frame_0d3a22fe3694b8da215ae5e33a50d7cb;

    // Push the new frame as the currently active one.
    pushFrameStack( frame_0d3a22fe3694b8da215ae5e33a50d7cb );

    // Mark the frame object as in use, ref count 1 will be up for reuse.
    assert( Py_REFCNT( frame_0d3a22fe3694b8da215ae5e33a50d7cb ) == 2 ); // Frame stack

    // Framed code:
    {
        PyObject *tmp_assign_source_1;
        PyObject *tmp_called_instance_1;
        PyObject *tmp_mvar_value_1;
        PyObject *tmp_args_element_name_1;
        PyObject *tmp_tuple_element_1;
        PyObject *tmp_args_element_name_2;
        tmp_mvar_value_1 = GET_STRING_DICT_VALUE( moduledict_platform, (Nuitka_StringObject *)const_str_plain__platform_cache );

        if (unlikely( tmp_mvar_value_1 == NULL ))
        {
            tmp_mvar_value_1 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain__platform_cache );
        }

        if ( tmp_mvar_value_1 == NULL )
        {

            exception_type = PyExc_NameError;
            Py_INCREF( exception_type );
            exception_value = PyUnicode_FromFormat( "name '%s' is not defined", "_platform_cache" );
            exception_tb = NULL;
            NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
            CHAIN_EXCEPTION( exception_value );

            exception_lineno = 1353;
            type_description_1 = "ooooooooooooooooooooooooooo";
            goto frame_exception_exit_1;
        }

        tmp_called_instance_1 = tmp_mvar_value_1;
        CHECK_OBJECT( par_aliased );
        tmp_tuple_element_1 = par_aliased;
        tmp_args_element_name_1 = PyTuple_New( 2 );
        Py_INCREF( tmp_tuple_element_1 );
        PyTuple_SET_ITEM( tmp_args_element_name_1, 0, tmp_tuple_element_1 );
        CHECK_OBJECT( par_terse );
        tmp_tuple_element_1 = par_terse;
        Py_INCREF( tmp_tuple_element_1 );
        PyTuple_SET_ITEM( tmp_args_element_name_1, 1, tmp_tuple_element_1 );
        tmp_args_element_name_2 = Py_None;
        frame_0d3a22fe3694b8da215ae5e33a50d7cb->m_frame.f_lineno = 1353;
        {
            PyObject *call_args[] = { tmp_args_element_name_1, tmp_args_element_name_2 };
            tmp_assign_source_1 = CALL_METHOD_WITH_ARGS2( tmp_called_instance_1, const_str_plain_get, call_args );
        }

        Py_DECREF( tmp_args_element_name_1 );
        if ( tmp_assign_source_1 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 1353;
            type_description_1 = "ooooooooooooooooooooooooooo";
            goto frame_exception_exit_1;
        }
        assert( var_result == NULL );
        var_result = tmp_assign_source_1;
    }
    {
        nuitka_bool tmp_condition_result_1;
        PyObject *tmp_compexpr_left_1;
        PyObject *tmp_compexpr_right_1;
        CHECK_OBJECT( var_result );
        tmp_compexpr_left_1 = var_result;
        tmp_compexpr_right_1 = Py_None;
        tmp_condition_result_1 = ( tmp_compexpr_left_1 != tmp_compexpr_right_1 ) ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
        if ( tmp_condition_result_1 == NUITKA_BOOL_TRUE )
        {
            goto branch_yes_1;
        }
        else
        {
            goto branch_no_1;
        }
        branch_yes_1:;
        CHECK_OBJECT( var_result );
        tmp_return_value = var_result;
        Py_INCREF( tmp_return_value );
        goto frame_return_exit_1;
        branch_no_1:;
    }
    // Tried code:
    {
        PyObject *tmp_assign_source_2;
        PyObject *tmp_iter_arg_1;
        PyObject *tmp_called_name_1;
        PyObject *tmp_mvar_value_2;
        tmp_mvar_value_2 = GET_STRING_DICT_VALUE( moduledict_platform, (Nuitka_StringObject *)const_str_plain_uname );

        if (unlikely( tmp_mvar_value_2 == NULL ))
        {
            tmp_mvar_value_2 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_uname );
        }

        if ( tmp_mvar_value_2 == NULL )
        {

            exception_type = PyExc_NameError;
            Py_INCREF( exception_type );
            exception_value = PyUnicode_FromFormat( "name '%s' is not defined", "uname" );
            exception_tb = NULL;
            NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
            CHAIN_EXCEPTION( exception_value );

            exception_lineno = 1359;
            type_description_1 = "ooooooooooooooooooooooooooo";
            goto try_except_handler_2;
        }

        tmp_called_name_1 = tmp_mvar_value_2;
        frame_0d3a22fe3694b8da215ae5e33a50d7cb->m_frame.f_lineno = 1359;
        tmp_iter_arg_1 = CALL_FUNCTION_NO_ARGS( tmp_called_name_1 );
        if ( tmp_iter_arg_1 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 1359;
            type_description_1 = "ooooooooooooooooooooooooooo";
            goto try_except_handler_2;
        }
        tmp_assign_source_2 = MAKE_UNPACK_ITERATOR( tmp_iter_arg_1 );
        Py_DECREF( tmp_iter_arg_1 );
        if ( tmp_assign_source_2 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 1359;
            type_description_1 = "ooooooooooooooooooooooooooo";
            goto try_except_handler_2;
        }
        assert( tmp_tuple_unpack_1__source_iter == NULL );
        tmp_tuple_unpack_1__source_iter = tmp_assign_source_2;
    }
    // Tried code:
    {
        PyObject *tmp_assign_source_3;
        PyObject *tmp_unpack_1;
        CHECK_OBJECT( tmp_tuple_unpack_1__source_iter );
        tmp_unpack_1 = tmp_tuple_unpack_1__source_iter;
        tmp_assign_source_3 = UNPACK_NEXT( tmp_unpack_1, 0, 6 );
        if ( tmp_assign_source_3 == NULL )
        {
            if ( !ERROR_OCCURRED() )
            {
                exception_type = PyExc_StopIteration;
                Py_INCREF( exception_type );
                exception_value = NULL;
                exception_tb = NULL;
            }
            else
            {
                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
            }


            type_description_1 = "ooooooooooooooooooooooooooo";
            exception_lineno = 1359;
            goto try_except_handler_3;
        }
        assert( tmp_tuple_unpack_1__element_1 == NULL );
        tmp_tuple_unpack_1__element_1 = tmp_assign_source_3;
    }
    {
        PyObject *tmp_assign_source_4;
        PyObject *tmp_unpack_2;
        CHECK_OBJECT( tmp_tuple_unpack_1__source_iter );
        tmp_unpack_2 = tmp_tuple_unpack_1__source_iter;
        tmp_assign_source_4 = UNPACK_NEXT( tmp_unpack_2, 1, 6 );
        if ( tmp_assign_source_4 == NULL )
        {
            if ( !ERROR_OCCURRED() )
            {
                exception_type = PyExc_StopIteration;
                Py_INCREF( exception_type );
                exception_value = NULL;
                exception_tb = NULL;
            }
            else
            {
                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
            }


            type_description_1 = "ooooooooooooooooooooooooooo";
            exception_lineno = 1359;
            goto try_except_handler_3;
        }
        assert( tmp_tuple_unpack_1__element_2 == NULL );
        tmp_tuple_unpack_1__element_2 = tmp_assign_source_4;
    }
    {
        PyObject *tmp_assign_source_5;
        PyObject *tmp_unpack_3;
        CHECK_OBJECT( tmp_tuple_unpack_1__source_iter );
        tmp_unpack_3 = tmp_tuple_unpack_1__source_iter;
        tmp_assign_source_5 = UNPACK_NEXT( tmp_unpack_3, 2, 6 );
        if ( tmp_assign_source_5 == NULL )
        {
            if ( !ERROR_OCCURRED() )
            {
                exception_type = PyExc_StopIteration;
                Py_INCREF( exception_type );
                exception_value = NULL;
                exception_tb = NULL;
            }
            else
            {
                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
            }


            type_description_1 = "ooooooooooooooooooooooooooo";
            exception_lineno = 1359;
            goto try_except_handler_3;
        }
        assert( tmp_tuple_unpack_1__element_3 == NULL );
        tmp_tuple_unpack_1__element_3 = tmp_assign_source_5;
    }
    {
        PyObject *tmp_assign_source_6;
        PyObject *tmp_unpack_4;
        CHECK_OBJECT( tmp_tuple_unpack_1__source_iter );
        tmp_unpack_4 = tmp_tuple_unpack_1__source_iter;
        tmp_assign_source_6 = UNPACK_NEXT( tmp_unpack_4, 3, 6 );
        if ( tmp_assign_source_6 == NULL )
        {
            if ( !ERROR_OCCURRED() )
            {
                exception_type = PyExc_StopIteration;
                Py_INCREF( exception_type );
                exception_value = NULL;
                exception_tb = NULL;
            }
            else
            {
                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
            }


            type_description_1 = "ooooooooooooooooooooooooooo";
            exception_lineno = 1359;
            goto try_except_handler_3;
        }
        assert( tmp_tuple_unpack_1__element_4 == NULL );
        tmp_tuple_unpack_1__element_4 = tmp_assign_source_6;
    }
    {
        PyObject *tmp_assign_source_7;
        PyObject *tmp_unpack_5;
        CHECK_OBJECT( tmp_tuple_unpack_1__source_iter );
        tmp_unpack_5 = tmp_tuple_unpack_1__source_iter;
        tmp_assign_source_7 = UNPACK_NEXT( tmp_unpack_5, 4, 6 );
        if ( tmp_assign_source_7 == NULL )
        {
            if ( !ERROR_OCCURRED() )
            {
                exception_type = PyExc_StopIteration;
                Py_INCREF( exception_type );
                exception_value = NULL;
                exception_tb = NULL;
            }
            else
            {
                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
            }


            type_description_1 = "ooooooooooooooooooooooooooo";
            exception_lineno = 1359;
            goto try_except_handler_3;
        }
        assert( tmp_tuple_unpack_1__element_5 == NULL );
        tmp_tuple_unpack_1__element_5 = tmp_assign_source_7;
    }
    {
        PyObject *tmp_assign_source_8;
        PyObject *tmp_unpack_6;
        CHECK_OBJECT( tmp_tuple_unpack_1__source_iter );
        tmp_unpack_6 = tmp_tuple_unpack_1__source_iter;
        tmp_assign_source_8 = UNPACK_NEXT( tmp_unpack_6, 5, 6 );
        if ( tmp_assign_source_8 == NULL )
        {
            if ( !ERROR_OCCURRED() )
            {
                exception_type = PyExc_StopIteration;
                Py_INCREF( exception_type );
                exception_value = NULL;
                exception_tb = NULL;
            }
            else
            {
                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
            }


            type_description_1 = "ooooooooooooooooooooooooooo";
            exception_lineno = 1359;
            goto try_except_handler_3;
        }
        assert( tmp_tuple_unpack_1__element_6 == NULL );
        tmp_tuple_unpack_1__element_6 = tmp_assign_source_8;
    }
    {
        PyObject *tmp_iterator_name_1;
        CHECK_OBJECT( tmp_tuple_unpack_1__source_iter );
        tmp_iterator_name_1 = tmp_tuple_unpack_1__source_iter;
        // Check if iterator has left-over elements.
        CHECK_OBJECT( tmp_iterator_name_1 ); assert( HAS_ITERNEXT( tmp_iterator_name_1 ) );

        tmp_iterator_attempt = (*Py_TYPE( tmp_iterator_name_1 )->tp_iternext)( tmp_iterator_name_1 );

        if (likely( tmp_iterator_attempt == NULL ))
        {
            PyObject *error = GET_ERROR_OCCURRED();

            if ( error != NULL )
            {
                if ( EXCEPTION_MATCH_BOOL_SINGLE( error, PyExc_StopIteration ))
                {
                    CLEAR_ERROR_OCCURRED();
                }
                else
                {
                    FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );

                    type_description_1 = "ooooooooooooooooooooooooooo";
                    exception_lineno = 1359;
                    goto try_except_handler_3;
                }
            }
        }
        else
        {
            Py_DECREF( tmp_iterator_attempt );

            // TODO: Could avoid PyErr_Format.
#if PYTHON_VERSION < 300
            PyErr_Format( PyExc_ValueError, "too many values to unpack" );
#else
            PyErr_Format( PyExc_ValueError, "too many values to unpack (expected 6)" );
#endif
            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );

            type_description_1 = "ooooooooooooooooooooooooooo";
            exception_lineno = 1359;
            goto try_except_handler_3;
        }
    }
    goto try_end_1;
    // Exception handler code:
    try_except_handler_3:;
    exception_keeper_type_1 = exception_type;
    exception_keeper_value_1 = exception_value;
    exception_keeper_tb_1 = exception_tb;
    exception_keeper_lineno_1 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    CHECK_OBJECT( (PyObject *)tmp_tuple_unpack_1__source_iter );
    Py_DECREF( tmp_tuple_unpack_1__source_iter );
    tmp_tuple_unpack_1__source_iter = NULL;

    // Re-raise.
    exception_type = exception_keeper_type_1;
    exception_value = exception_keeper_value_1;
    exception_tb = exception_keeper_tb_1;
    exception_lineno = exception_keeper_lineno_1;

    goto try_except_handler_2;
    // End of try:
    try_end_1:;
    goto try_end_2;
    // Exception handler code:
    try_except_handler_2:;
    exception_keeper_type_2 = exception_type;
    exception_keeper_value_2 = exception_value;
    exception_keeper_tb_2 = exception_tb;
    exception_keeper_lineno_2 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    Py_XDECREF( tmp_tuple_unpack_1__element_1 );
    tmp_tuple_unpack_1__element_1 = NULL;

    Py_XDECREF( tmp_tuple_unpack_1__element_2 );
    tmp_tuple_unpack_1__element_2 = NULL;

    Py_XDECREF( tmp_tuple_unpack_1__element_3 );
    tmp_tuple_unpack_1__element_3 = NULL;

    Py_XDECREF( tmp_tuple_unpack_1__element_4 );
    tmp_tuple_unpack_1__element_4 = NULL;

    Py_XDECREF( tmp_tuple_unpack_1__element_5 );
    tmp_tuple_unpack_1__element_5 = NULL;

    Py_XDECREF( tmp_tuple_unpack_1__element_6 );
    tmp_tuple_unpack_1__element_6 = NULL;

    // Re-raise.
    exception_type = exception_keeper_type_2;
    exception_value = exception_keeper_value_2;
    exception_tb = exception_keeper_tb_2;
    exception_lineno = exception_keeper_lineno_2;

    goto frame_exception_exit_1;
    // End of try:
    try_end_2:;
    CHECK_OBJECT( (PyObject *)tmp_tuple_unpack_1__source_iter );
    Py_DECREF( tmp_tuple_unpack_1__source_iter );
    tmp_tuple_unpack_1__source_iter = NULL;

    {
        PyObject *tmp_assign_source_9;
        CHECK_OBJECT( tmp_tuple_unpack_1__element_1 );
        tmp_assign_source_9 = tmp_tuple_unpack_1__element_1;
        assert( var_system == NULL );
        Py_INCREF( tmp_assign_source_9 );
        var_system = tmp_assign_source_9;
    }
    Py_XDECREF( tmp_tuple_unpack_1__element_1 );
    tmp_tuple_unpack_1__element_1 = NULL;

    {
        PyObject *tmp_assign_source_10;
        CHECK_OBJECT( tmp_tuple_unpack_1__element_2 );
        tmp_assign_source_10 = tmp_tuple_unpack_1__element_2;
        assert( var_node == NULL );
        Py_INCREF( tmp_assign_source_10 );
        var_node = tmp_assign_source_10;
    }
    Py_XDECREF( tmp_tuple_unpack_1__element_2 );
    tmp_tuple_unpack_1__element_2 = NULL;

    {
        PyObject *tmp_assign_source_11;
        CHECK_OBJECT( tmp_tuple_unpack_1__element_3 );
        tmp_assign_source_11 = tmp_tuple_unpack_1__element_3;
        assert( var_release == NULL );
        Py_INCREF( tmp_assign_source_11 );
        var_release = tmp_assign_source_11;
    }
    Py_XDECREF( tmp_tuple_unpack_1__element_3 );
    tmp_tuple_unpack_1__element_3 = NULL;

    {
        PyObject *tmp_assign_source_12;
        CHECK_OBJECT( tmp_tuple_unpack_1__element_4 );
        tmp_assign_source_12 = tmp_tuple_unpack_1__element_4;
        assert( var_version == NULL );
        Py_INCREF( tmp_assign_source_12 );
        var_version = tmp_assign_source_12;
    }
    Py_XDECREF( tmp_tuple_unpack_1__element_4 );
    tmp_tuple_unpack_1__element_4 = NULL;

    {
        PyObject *tmp_assign_source_13;
        CHECK_OBJECT( tmp_tuple_unpack_1__element_5 );
        tmp_assign_source_13 = tmp_tuple_unpack_1__element_5;
        assert( var_machine == NULL );
        Py_INCREF( tmp_assign_source_13 );
        var_machine = tmp_assign_source_13;
    }
    Py_XDECREF( tmp_tuple_unpack_1__element_5 );
    tmp_tuple_unpack_1__element_5 = NULL;

    {
        PyObject *tmp_assign_source_14;
        CHECK_OBJECT( tmp_tuple_unpack_1__element_6 );
        tmp_assign_source_14 = tmp_tuple_unpack_1__element_6;
        assert( var_processor == NULL );
        Py_INCREF( tmp_assign_source_14 );
        var_processor = tmp_assign_source_14;
    }
    Py_XDECREF( tmp_tuple_unpack_1__element_6 );
    tmp_tuple_unpack_1__element_6 = NULL;

    {
        nuitka_bool tmp_condition_result_2;
        PyObject *tmp_compexpr_left_2;
        PyObject *tmp_compexpr_right_2;
        CHECK_OBJECT( var_machine );
        tmp_compexpr_left_2 = var_machine;
        CHECK_OBJECT( var_processor );
        tmp_compexpr_right_2 = var_processor;
        tmp_res = RICH_COMPARE_BOOL_EQ_OBJECT_OBJECT( tmp_compexpr_left_2, tmp_compexpr_right_2 );
        if ( tmp_res == -1 )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 1360;
            type_description_1 = "ooooooooooooooooooooooooooo";
            goto frame_exception_exit_1;
        }
        tmp_condition_result_2 = ( tmp_res != 0 ) ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
        if ( tmp_condition_result_2 == NUITKA_BOOL_TRUE )
        {
            goto branch_yes_2;
        }
        else
        {
            goto branch_no_2;
        }
        branch_yes_2:;
        {
            PyObject *tmp_assign_source_15;
            tmp_assign_source_15 = const_str_empty;
            {
                PyObject *old = var_processor;
                assert( old != NULL );
                var_processor = tmp_assign_source_15;
                Py_INCREF( var_processor );
                Py_DECREF( old );
            }

        }
        branch_no_2:;
    }
    {
        nuitka_bool tmp_condition_result_3;
        int tmp_truth_name_1;
        CHECK_OBJECT( par_aliased );
        tmp_truth_name_1 = CHECK_IF_TRUE( par_aliased );
        if ( tmp_truth_name_1 == -1 )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 1362;
            type_description_1 = "ooooooooooooooooooooooooooo";
            goto frame_exception_exit_1;
        }
        tmp_condition_result_3 = tmp_truth_name_1 == 1 ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
        if ( tmp_condition_result_3 == NUITKA_BOOL_TRUE )
        {
            goto branch_yes_3;
        }
        else
        {
            goto branch_no_3;
        }
        branch_yes_3:;
        // Tried code:
        {
            PyObject *tmp_assign_source_16;
            PyObject *tmp_iter_arg_2;
            PyObject *tmp_called_name_2;
            PyObject *tmp_mvar_value_3;
            PyObject *tmp_args_element_name_3;
            PyObject *tmp_args_element_name_4;
            PyObject *tmp_args_element_name_5;
            tmp_mvar_value_3 = GET_STRING_DICT_VALUE( moduledict_platform, (Nuitka_StringObject *)const_str_plain_system_alias );

            if (unlikely( tmp_mvar_value_3 == NULL ))
            {
                tmp_mvar_value_3 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_system_alias );
            }

            if ( tmp_mvar_value_3 == NULL )
            {

                exception_type = PyExc_NameError;
                Py_INCREF( exception_type );
                exception_value = PyUnicode_FromFormat( "name '%s' is not defined", "system_alias" );
                exception_tb = NULL;
                NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
                CHAIN_EXCEPTION( exception_value );

                exception_lineno = 1363;
                type_description_1 = "ooooooooooooooooooooooooooo";
                goto try_except_handler_4;
            }

            tmp_called_name_2 = tmp_mvar_value_3;
            CHECK_OBJECT( var_system );
            tmp_args_element_name_3 = var_system;
            CHECK_OBJECT( var_release );
            tmp_args_element_name_4 = var_release;
            CHECK_OBJECT( var_version );
            tmp_args_element_name_5 = var_version;
            frame_0d3a22fe3694b8da215ae5e33a50d7cb->m_frame.f_lineno = 1363;
            {
                PyObject *call_args[] = { tmp_args_element_name_3, tmp_args_element_name_4, tmp_args_element_name_5 };
                tmp_iter_arg_2 = CALL_FUNCTION_WITH_ARGS3( tmp_called_name_2, call_args );
            }

            if ( tmp_iter_arg_2 == NULL )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 1363;
                type_description_1 = "ooooooooooooooooooooooooooo";
                goto try_except_handler_4;
            }
            tmp_assign_source_16 = MAKE_UNPACK_ITERATOR( tmp_iter_arg_2 );
            Py_DECREF( tmp_iter_arg_2 );
            if ( tmp_assign_source_16 == NULL )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 1363;
                type_description_1 = "ooooooooooooooooooooooooooo";
                goto try_except_handler_4;
            }
            assert( tmp_tuple_unpack_2__source_iter == NULL );
            tmp_tuple_unpack_2__source_iter = tmp_assign_source_16;
        }
        // Tried code:
        {
            PyObject *tmp_assign_source_17;
            PyObject *tmp_unpack_7;
            CHECK_OBJECT( tmp_tuple_unpack_2__source_iter );
            tmp_unpack_7 = tmp_tuple_unpack_2__source_iter;
            tmp_assign_source_17 = UNPACK_NEXT( tmp_unpack_7, 0, 3 );
            if ( tmp_assign_source_17 == NULL )
            {
                if ( !ERROR_OCCURRED() )
                {
                    exception_type = PyExc_StopIteration;
                    Py_INCREF( exception_type );
                    exception_value = NULL;
                    exception_tb = NULL;
                }
                else
                {
                    FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
                }


                type_description_1 = "ooooooooooooooooooooooooooo";
                exception_lineno = 1363;
                goto try_except_handler_5;
            }
            assert( tmp_tuple_unpack_2__element_1 == NULL );
            tmp_tuple_unpack_2__element_1 = tmp_assign_source_17;
        }
        {
            PyObject *tmp_assign_source_18;
            PyObject *tmp_unpack_8;
            CHECK_OBJECT( tmp_tuple_unpack_2__source_iter );
            tmp_unpack_8 = tmp_tuple_unpack_2__source_iter;
            tmp_assign_source_18 = UNPACK_NEXT( tmp_unpack_8, 1, 3 );
            if ( tmp_assign_source_18 == NULL )
            {
                if ( !ERROR_OCCURRED() )
                {
                    exception_type = PyExc_StopIteration;
                    Py_INCREF( exception_type );
                    exception_value = NULL;
                    exception_tb = NULL;
                }
                else
                {
                    FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
                }


                type_description_1 = "ooooooooooooooooooooooooooo";
                exception_lineno = 1363;
                goto try_except_handler_5;
            }
            assert( tmp_tuple_unpack_2__element_2 == NULL );
            tmp_tuple_unpack_2__element_2 = tmp_assign_source_18;
        }
        {
            PyObject *tmp_assign_source_19;
            PyObject *tmp_unpack_9;
            CHECK_OBJECT( tmp_tuple_unpack_2__source_iter );
            tmp_unpack_9 = tmp_tuple_unpack_2__source_iter;
            tmp_assign_source_19 = UNPACK_NEXT( tmp_unpack_9, 2, 3 );
            if ( tmp_assign_source_19 == NULL )
            {
                if ( !ERROR_OCCURRED() )
                {
                    exception_type = PyExc_StopIteration;
                    Py_INCREF( exception_type );
                    exception_value = NULL;
                    exception_tb = NULL;
                }
                else
                {
                    FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
                }


                type_description_1 = "ooooooooooooooooooooooooooo";
                exception_lineno = 1363;
                goto try_except_handler_5;
            }
            assert( tmp_tuple_unpack_2__element_3 == NULL );
            tmp_tuple_unpack_2__element_3 = tmp_assign_source_19;
        }
        {
            PyObject *tmp_iterator_name_2;
            CHECK_OBJECT( tmp_tuple_unpack_2__source_iter );
            tmp_iterator_name_2 = tmp_tuple_unpack_2__source_iter;
            // Check if iterator has left-over elements.
            CHECK_OBJECT( tmp_iterator_name_2 ); assert( HAS_ITERNEXT( tmp_iterator_name_2 ) );

            tmp_iterator_attempt = (*Py_TYPE( tmp_iterator_name_2 )->tp_iternext)( tmp_iterator_name_2 );

            if (likely( tmp_iterator_attempt == NULL ))
            {
                PyObject *error = GET_ERROR_OCCURRED();

                if ( error != NULL )
                {
                    if ( EXCEPTION_MATCH_BOOL_SINGLE( error, PyExc_StopIteration ))
                    {
                        CLEAR_ERROR_OCCURRED();
                    }
                    else
                    {
                        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );

                        type_description_1 = "ooooooooooooooooooooooooooo";
                        exception_lineno = 1363;
                        goto try_except_handler_5;
                    }
                }
            }
            else
            {
                Py_DECREF( tmp_iterator_attempt );

                // TODO: Could avoid PyErr_Format.
#if PYTHON_VERSION < 300
                PyErr_Format( PyExc_ValueError, "too many values to unpack" );
#else
                PyErr_Format( PyExc_ValueError, "too many values to unpack (expected 3)" );
#endif
                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );

                type_description_1 = "ooooooooooooooooooooooooooo";
                exception_lineno = 1363;
                goto try_except_handler_5;
            }
        }
        goto try_end_3;
        // Exception handler code:
        try_except_handler_5:;
        exception_keeper_type_3 = exception_type;
        exception_keeper_value_3 = exception_value;
        exception_keeper_tb_3 = exception_tb;
        exception_keeper_lineno_3 = exception_lineno;
        exception_type = NULL;
        exception_value = NULL;
        exception_tb = NULL;
        exception_lineno = 0;

        CHECK_OBJECT( (PyObject *)tmp_tuple_unpack_2__source_iter );
        Py_DECREF( tmp_tuple_unpack_2__source_iter );
        tmp_tuple_unpack_2__source_iter = NULL;

        // Re-raise.
        exception_type = exception_keeper_type_3;
        exception_value = exception_keeper_value_3;
        exception_tb = exception_keeper_tb_3;
        exception_lineno = exception_keeper_lineno_3;

        goto try_except_handler_4;
        // End of try:
        try_end_3:;
        goto try_end_4;
        // Exception handler code:
        try_except_handler_4:;
        exception_keeper_type_4 = exception_type;
        exception_keeper_value_4 = exception_value;
        exception_keeper_tb_4 = exception_tb;
        exception_keeper_lineno_4 = exception_lineno;
        exception_type = NULL;
        exception_value = NULL;
        exception_tb = NULL;
        exception_lineno = 0;

        Py_XDECREF( tmp_tuple_unpack_2__element_1 );
        tmp_tuple_unpack_2__element_1 = NULL;

        Py_XDECREF( tmp_tuple_unpack_2__element_2 );
        tmp_tuple_unpack_2__element_2 = NULL;

        Py_XDECREF( tmp_tuple_unpack_2__element_3 );
        tmp_tuple_unpack_2__element_3 = NULL;

        // Re-raise.
        exception_type = exception_keeper_type_4;
        exception_value = exception_keeper_value_4;
        exception_tb = exception_keeper_tb_4;
        exception_lineno = exception_keeper_lineno_4;

        goto frame_exception_exit_1;
        // End of try:
        try_end_4:;
        CHECK_OBJECT( (PyObject *)tmp_tuple_unpack_2__source_iter );
        Py_DECREF( tmp_tuple_unpack_2__source_iter );
        tmp_tuple_unpack_2__source_iter = NULL;

        {
            PyObject *tmp_assign_source_20;
            CHECK_OBJECT( tmp_tuple_unpack_2__element_1 );
            tmp_assign_source_20 = tmp_tuple_unpack_2__element_1;
            {
                PyObject *old = var_system;
                assert( old != NULL );
                var_system = tmp_assign_source_20;
                Py_INCREF( var_system );
                Py_DECREF( old );
            }

        }
        Py_XDECREF( tmp_tuple_unpack_2__element_1 );
        tmp_tuple_unpack_2__element_1 = NULL;

        {
            PyObject *tmp_assign_source_21;
            CHECK_OBJECT( tmp_tuple_unpack_2__element_2 );
            tmp_assign_source_21 = tmp_tuple_unpack_2__element_2;
            {
                PyObject *old = var_release;
                assert( old != NULL );
                var_release = tmp_assign_source_21;
                Py_INCREF( var_release );
                Py_DECREF( old );
            }

        }
        Py_XDECREF( tmp_tuple_unpack_2__element_2 );
        tmp_tuple_unpack_2__element_2 = NULL;

        {
            PyObject *tmp_assign_source_22;
            CHECK_OBJECT( tmp_tuple_unpack_2__element_3 );
            tmp_assign_source_22 = tmp_tuple_unpack_2__element_3;
            {
                PyObject *old = var_version;
                assert( old != NULL );
                var_version = tmp_assign_source_22;
                Py_INCREF( var_version );
                Py_DECREF( old );
            }

        }
        Py_XDECREF( tmp_tuple_unpack_2__element_3 );
        tmp_tuple_unpack_2__element_3 = NULL;

        branch_no_3:;
    }
    {
        nuitka_bool tmp_condition_result_4;
        PyObject *tmp_compexpr_left_3;
        PyObject *tmp_compexpr_right_3;
        CHECK_OBJECT( var_system );
        tmp_compexpr_left_3 = var_system;
        tmp_compexpr_right_3 = const_str_plain_Windows;
        tmp_res = RICH_COMPARE_BOOL_EQ_OBJECT_OBJECT( tmp_compexpr_left_3, tmp_compexpr_right_3 );
        if ( tmp_res == -1 )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 1365;
            type_description_1 = "ooooooooooooooooooooooooooo";
            goto frame_exception_exit_1;
        }
        tmp_condition_result_4 = ( tmp_res != 0 ) ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
        if ( tmp_condition_result_4 == NUITKA_BOOL_TRUE )
        {
            goto branch_yes_4;
        }
        else
        {
            goto branch_no_4;
        }
        branch_yes_4:;
        // Tried code:
        {
            PyObject *tmp_assign_source_23;
            PyObject *tmp_iter_arg_3;
            PyObject *tmp_called_name_3;
            PyObject *tmp_mvar_value_4;
            PyObject *tmp_args_element_name_6;
            tmp_mvar_value_4 = GET_STRING_DICT_VALUE( moduledict_platform, (Nuitka_StringObject *)const_str_plain_win32_ver );

            if (unlikely( tmp_mvar_value_4 == NULL ))
            {
                tmp_mvar_value_4 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_win32_ver );
            }

            if ( tmp_mvar_value_4 == NULL )
            {

                exception_type = PyExc_NameError;
                Py_INCREF( exception_type );
                exception_value = PyUnicode_FromFormat( "name '%s' is not defined", "win32_ver" );
                exception_tb = NULL;
                NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
                CHAIN_EXCEPTION( exception_value );

                exception_lineno = 1367;
                type_description_1 = "ooooooooooooooooooooooooooo";
                goto try_except_handler_6;
            }

            tmp_called_name_3 = tmp_mvar_value_4;
            CHECK_OBJECT( var_version );
            tmp_args_element_name_6 = var_version;
            frame_0d3a22fe3694b8da215ae5e33a50d7cb->m_frame.f_lineno = 1367;
            {
                PyObject *call_args[] = { tmp_args_element_name_6 };
                tmp_iter_arg_3 = CALL_FUNCTION_WITH_ARGS1( tmp_called_name_3, call_args );
            }

            if ( tmp_iter_arg_3 == NULL )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 1367;
                type_description_1 = "ooooooooooooooooooooooooooo";
                goto try_except_handler_6;
            }
            tmp_assign_source_23 = MAKE_UNPACK_ITERATOR( tmp_iter_arg_3 );
            Py_DECREF( tmp_iter_arg_3 );
            if ( tmp_assign_source_23 == NULL )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 1367;
                type_description_1 = "ooooooooooooooooooooooooooo";
                goto try_except_handler_6;
            }
            assert( tmp_tuple_unpack_3__source_iter == NULL );
            tmp_tuple_unpack_3__source_iter = tmp_assign_source_23;
        }
        // Tried code:
        {
            PyObject *tmp_assign_source_24;
            PyObject *tmp_unpack_10;
            CHECK_OBJECT( tmp_tuple_unpack_3__source_iter );
            tmp_unpack_10 = tmp_tuple_unpack_3__source_iter;
            tmp_assign_source_24 = UNPACK_NEXT( tmp_unpack_10, 0, 4 );
            if ( tmp_assign_source_24 == NULL )
            {
                if ( !ERROR_OCCURRED() )
                {
                    exception_type = PyExc_StopIteration;
                    Py_INCREF( exception_type );
                    exception_value = NULL;
                    exception_tb = NULL;
                }
                else
                {
                    FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
                }


                type_description_1 = "ooooooooooooooooooooooooooo";
                exception_lineno = 1367;
                goto try_except_handler_7;
            }
            assert( tmp_tuple_unpack_3__element_1 == NULL );
            tmp_tuple_unpack_3__element_1 = tmp_assign_source_24;
        }
        {
            PyObject *tmp_assign_source_25;
            PyObject *tmp_unpack_11;
            CHECK_OBJECT( tmp_tuple_unpack_3__source_iter );
            tmp_unpack_11 = tmp_tuple_unpack_3__source_iter;
            tmp_assign_source_25 = UNPACK_NEXT( tmp_unpack_11, 1, 4 );
            if ( tmp_assign_source_25 == NULL )
            {
                if ( !ERROR_OCCURRED() )
                {
                    exception_type = PyExc_StopIteration;
                    Py_INCREF( exception_type );
                    exception_value = NULL;
                    exception_tb = NULL;
                }
                else
                {
                    FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
                }


                type_description_1 = "ooooooooooooooooooooooooooo";
                exception_lineno = 1367;
                goto try_except_handler_7;
            }
            assert( tmp_tuple_unpack_3__element_2 == NULL );
            tmp_tuple_unpack_3__element_2 = tmp_assign_source_25;
        }
        {
            PyObject *tmp_assign_source_26;
            PyObject *tmp_unpack_12;
            CHECK_OBJECT( tmp_tuple_unpack_3__source_iter );
            tmp_unpack_12 = tmp_tuple_unpack_3__source_iter;
            tmp_assign_source_26 = UNPACK_NEXT( tmp_unpack_12, 2, 4 );
            if ( tmp_assign_source_26 == NULL )
            {
                if ( !ERROR_OCCURRED() )
                {
                    exception_type = PyExc_StopIteration;
                    Py_INCREF( exception_type );
                    exception_value = NULL;
                    exception_tb = NULL;
                }
                else
                {
                    FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
                }


                type_description_1 = "ooooooooooooooooooooooooooo";
                exception_lineno = 1367;
                goto try_except_handler_7;
            }
            assert( tmp_tuple_unpack_3__element_3 == NULL );
            tmp_tuple_unpack_3__element_3 = tmp_assign_source_26;
        }
        {
            PyObject *tmp_assign_source_27;
            PyObject *tmp_unpack_13;
            CHECK_OBJECT( tmp_tuple_unpack_3__source_iter );
            tmp_unpack_13 = tmp_tuple_unpack_3__source_iter;
            tmp_assign_source_27 = UNPACK_NEXT( tmp_unpack_13, 3, 4 );
            if ( tmp_assign_source_27 == NULL )
            {
                if ( !ERROR_OCCURRED() )
                {
                    exception_type = PyExc_StopIteration;
                    Py_INCREF( exception_type );
                    exception_value = NULL;
                    exception_tb = NULL;
                }
                else
                {
                    FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
                }


                type_description_1 = "ooooooooooooooooooooooooooo";
                exception_lineno = 1367;
                goto try_except_handler_7;
            }
            assert( tmp_tuple_unpack_3__element_4 == NULL );
            tmp_tuple_unpack_3__element_4 = tmp_assign_source_27;
        }
        {
            PyObject *tmp_iterator_name_3;
            CHECK_OBJECT( tmp_tuple_unpack_3__source_iter );
            tmp_iterator_name_3 = tmp_tuple_unpack_3__source_iter;
            // Check if iterator has left-over elements.
            CHECK_OBJECT( tmp_iterator_name_3 ); assert( HAS_ITERNEXT( tmp_iterator_name_3 ) );

            tmp_iterator_attempt = (*Py_TYPE( tmp_iterator_name_3 )->tp_iternext)( tmp_iterator_name_3 );

            if (likely( tmp_iterator_attempt == NULL ))
            {
                PyObject *error = GET_ERROR_OCCURRED();

                if ( error != NULL )
                {
                    if ( EXCEPTION_MATCH_BOOL_SINGLE( error, PyExc_StopIteration ))
                    {
                        CLEAR_ERROR_OCCURRED();
                    }
                    else
                    {
                        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );

                        type_description_1 = "ooooooooooooooooooooooooooo";
                        exception_lineno = 1367;
                        goto try_except_handler_7;
                    }
                }
            }
            else
            {
                Py_DECREF( tmp_iterator_attempt );

                // TODO: Could avoid PyErr_Format.
#if PYTHON_VERSION < 300
                PyErr_Format( PyExc_ValueError, "too many values to unpack" );
#else
                PyErr_Format( PyExc_ValueError, "too many values to unpack (expected 4)" );
#endif
                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );

                type_description_1 = "ooooooooooooooooooooooooooo";
                exception_lineno = 1367;
                goto try_except_handler_7;
            }
        }
        goto try_end_5;
        // Exception handler code:
        try_except_handler_7:;
        exception_keeper_type_5 = exception_type;
        exception_keeper_value_5 = exception_value;
        exception_keeper_tb_5 = exception_tb;
        exception_keeper_lineno_5 = exception_lineno;
        exception_type = NULL;
        exception_value = NULL;
        exception_tb = NULL;
        exception_lineno = 0;

        CHECK_OBJECT( (PyObject *)tmp_tuple_unpack_3__source_iter );
        Py_DECREF( tmp_tuple_unpack_3__source_iter );
        tmp_tuple_unpack_3__source_iter = NULL;

        // Re-raise.
        exception_type = exception_keeper_type_5;
        exception_value = exception_keeper_value_5;
        exception_tb = exception_keeper_tb_5;
        exception_lineno = exception_keeper_lineno_5;

        goto try_except_handler_6;
        // End of try:
        try_end_5:;
        goto try_end_6;
        // Exception handler code:
        try_except_handler_6:;
        exception_keeper_type_6 = exception_type;
        exception_keeper_value_6 = exception_value;
        exception_keeper_tb_6 = exception_tb;
        exception_keeper_lineno_6 = exception_lineno;
        exception_type = NULL;
        exception_value = NULL;
        exception_tb = NULL;
        exception_lineno = 0;

        Py_XDECREF( tmp_tuple_unpack_3__element_1 );
        tmp_tuple_unpack_3__element_1 = NULL;

        Py_XDECREF( tmp_tuple_unpack_3__element_2 );
        tmp_tuple_unpack_3__element_2 = NULL;

        Py_XDECREF( tmp_tuple_unpack_3__element_3 );
        tmp_tuple_unpack_3__element_3 = NULL;

        Py_XDECREF( tmp_tuple_unpack_3__element_4 );
        tmp_tuple_unpack_3__element_4 = NULL;

        // Re-raise.
        exception_type = exception_keeper_type_6;
        exception_value = exception_keeper_value_6;
        exception_tb = exception_keeper_tb_6;
        exception_lineno = exception_keeper_lineno_6;

        goto frame_exception_exit_1;
        // End of try:
        try_end_6:;
        CHECK_OBJECT( (PyObject *)tmp_tuple_unpack_3__source_iter );
        Py_DECREF( tmp_tuple_unpack_3__source_iter );
        tmp_tuple_unpack_3__source_iter = NULL;

        {
            PyObject *tmp_assign_source_28;
            CHECK_OBJECT( tmp_tuple_unpack_3__element_1 );
            tmp_assign_source_28 = tmp_tuple_unpack_3__element_1;
            assert( var_rel == NULL );
            Py_INCREF( tmp_assign_source_28 );
            var_rel = tmp_assign_source_28;
        }
        Py_XDECREF( tmp_tuple_unpack_3__element_1 );
        tmp_tuple_unpack_3__element_1 = NULL;

        {
            PyObject *tmp_assign_source_29;
            CHECK_OBJECT( tmp_tuple_unpack_3__element_2 );
            tmp_assign_source_29 = tmp_tuple_unpack_3__element_2;
            assert( var_vers == NULL );
            Py_INCREF( tmp_assign_source_29 );
            var_vers = tmp_assign_source_29;
        }
        Py_XDECREF( tmp_tuple_unpack_3__element_2 );
        tmp_tuple_unpack_3__element_2 = NULL;

        {
            PyObject *tmp_assign_source_30;
            CHECK_OBJECT( tmp_tuple_unpack_3__element_3 );
            tmp_assign_source_30 = tmp_tuple_unpack_3__element_3;
            assert( var_csd == NULL );
            Py_INCREF( tmp_assign_source_30 );
            var_csd = tmp_assign_source_30;
        }
        Py_XDECREF( tmp_tuple_unpack_3__element_3 );
        tmp_tuple_unpack_3__element_3 = NULL;

        {
            PyObject *tmp_assign_source_31;
            CHECK_OBJECT( tmp_tuple_unpack_3__element_4 );
            tmp_assign_source_31 = tmp_tuple_unpack_3__element_4;
            assert( var_ptype == NULL );
            Py_INCREF( tmp_assign_source_31 );
            var_ptype = tmp_assign_source_31;
        }
        Py_XDECREF( tmp_tuple_unpack_3__element_4 );
        tmp_tuple_unpack_3__element_4 = NULL;

        {
            nuitka_bool tmp_condition_result_5;
            int tmp_truth_name_2;
            CHECK_OBJECT( par_terse );
            tmp_truth_name_2 = CHECK_IF_TRUE( par_terse );
            if ( tmp_truth_name_2 == -1 )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 1368;
                type_description_1 = "ooooooooooooooooooooooooooo";
                goto frame_exception_exit_1;
            }
            tmp_condition_result_5 = tmp_truth_name_2 == 1 ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
            if ( tmp_condition_result_5 == NUITKA_BOOL_TRUE )
            {
                goto branch_yes_5;
            }
            else
            {
                goto branch_no_5;
            }
            branch_yes_5:;
            {
                PyObject *tmp_assign_source_32;
                PyObject *tmp_called_name_4;
                PyObject *tmp_mvar_value_5;
                PyObject *tmp_args_element_name_7;
                PyObject *tmp_args_element_name_8;
                tmp_mvar_value_5 = GET_STRING_DICT_VALUE( moduledict_platform, (Nuitka_StringObject *)const_str_plain__platform );

                if (unlikely( tmp_mvar_value_5 == NULL ))
                {
                    tmp_mvar_value_5 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain__platform );
                }

                if ( tmp_mvar_value_5 == NULL )
                {

                    exception_type = PyExc_NameError;
                    Py_INCREF( exception_type );
                    exception_value = PyUnicode_FromFormat( "name '%s' is not defined", "_platform" );
                    exception_tb = NULL;
                    NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
                    CHAIN_EXCEPTION( exception_value );

                    exception_lineno = 1369;
                    type_description_1 = "ooooooooooooooooooooooooooo";
                    goto frame_exception_exit_1;
                }

                tmp_called_name_4 = tmp_mvar_value_5;
                CHECK_OBJECT( var_system );
                tmp_args_element_name_7 = var_system;
                CHECK_OBJECT( var_release );
                tmp_args_element_name_8 = var_release;
                frame_0d3a22fe3694b8da215ae5e33a50d7cb->m_frame.f_lineno = 1369;
                {
                    PyObject *call_args[] = { tmp_args_element_name_7, tmp_args_element_name_8 };
                    tmp_assign_source_32 = CALL_FUNCTION_WITH_ARGS2( tmp_called_name_4, call_args );
                }

                if ( tmp_assign_source_32 == NULL )
                {
                    assert( ERROR_OCCURRED() );

                    FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                    exception_lineno = 1369;
                    type_description_1 = "ooooooooooooooooooooooooooo";
                    goto frame_exception_exit_1;
                }
                assert( var_platform == NULL );
                var_platform = tmp_assign_source_32;
            }
            goto branch_end_5;
            branch_no_5:;
            {
                PyObject *tmp_assign_source_33;
                PyObject *tmp_called_name_5;
                PyObject *tmp_mvar_value_6;
                PyObject *tmp_args_element_name_9;
                PyObject *tmp_args_element_name_10;
                PyObject *tmp_args_element_name_11;
                PyObject *tmp_args_element_name_12;
                tmp_mvar_value_6 = GET_STRING_DICT_VALUE( moduledict_platform, (Nuitka_StringObject *)const_str_plain__platform );

                if (unlikely( tmp_mvar_value_6 == NULL ))
                {
                    tmp_mvar_value_6 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain__platform );
                }

                if ( tmp_mvar_value_6 == NULL )
                {

                    exception_type = PyExc_NameError;
                    Py_INCREF( exception_type );
                    exception_value = PyUnicode_FromFormat( "name '%s' is not defined", "_platform" );
                    exception_tb = NULL;
                    NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
                    CHAIN_EXCEPTION( exception_value );

                    exception_lineno = 1371;
                    type_description_1 = "ooooooooooooooooooooooooooo";
                    goto frame_exception_exit_1;
                }

                tmp_called_name_5 = tmp_mvar_value_6;
                CHECK_OBJECT( var_system );
                tmp_args_element_name_9 = var_system;
                CHECK_OBJECT( var_release );
                tmp_args_element_name_10 = var_release;
                CHECK_OBJECT( var_version );
                tmp_args_element_name_11 = var_version;
                CHECK_OBJECT( var_csd );
                tmp_args_element_name_12 = var_csd;
                frame_0d3a22fe3694b8da215ae5e33a50d7cb->m_frame.f_lineno = 1371;
                {
                    PyObject *call_args[] = { tmp_args_element_name_9, tmp_args_element_name_10, tmp_args_element_name_11, tmp_args_element_name_12 };
                    tmp_assign_source_33 = CALL_FUNCTION_WITH_ARGS4( tmp_called_name_5, call_args );
                }

                if ( tmp_assign_source_33 == NULL )
                {
                    assert( ERROR_OCCURRED() );

                    FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                    exception_lineno = 1371;
                    type_description_1 = "ooooooooooooooooooooooooooo";
                    goto frame_exception_exit_1;
                }
                assert( var_platform == NULL );
                var_platform = tmp_assign_source_33;
            }
            branch_end_5:;
        }
        goto branch_end_4;
        branch_no_4:;
        {
            nuitka_bool tmp_condition_result_6;
            PyObject *tmp_compexpr_left_4;
            PyObject *tmp_compexpr_right_4;
            CHECK_OBJECT( var_system );
            tmp_compexpr_left_4 = var_system;
            tmp_compexpr_right_4 = const_tuple_str_plain_Linux_tuple;
            tmp_res = PySequence_Contains( tmp_compexpr_right_4, tmp_compexpr_left_4 );
            if ( tmp_res == -1 )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 1373;
                type_description_1 = "ooooooooooooooooooooooooooo";
                goto frame_exception_exit_1;
            }
            tmp_condition_result_6 = ( tmp_res == 1 ) ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
            if ( tmp_condition_result_6 == NUITKA_BOOL_TRUE )
            {
                goto branch_yes_6;
            }
            else
            {
                goto branch_no_6;
            }
            branch_yes_6:;
            // Tried code:
            {
                PyObject *tmp_assign_source_34;
                PyObject *tmp_called_instance_2;
                PyObject *tmp_mvar_value_7;
                tmp_mvar_value_7 = GET_STRING_DICT_VALUE( moduledict_platform, (Nuitka_StringObject *)const_str_plain_warnings );

                if (unlikely( tmp_mvar_value_7 == NULL ))
                {
                    tmp_mvar_value_7 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_warnings );
                }

                if ( tmp_mvar_value_7 == NULL )
                {

                    exception_type = PyExc_NameError;
                    Py_INCREF( exception_type );
                    exception_value = PyUnicode_FromFormat( "name '%s' is not defined", "warnings" );
                    exception_tb = NULL;
                    NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
                    CHAIN_EXCEPTION( exception_value );

                    exception_lineno = 1375;
                    type_description_1 = "ooooooooooooooooooooooooooo";
                    goto try_except_handler_8;
                }

                tmp_called_instance_2 = tmp_mvar_value_7;
                frame_0d3a22fe3694b8da215ae5e33a50d7cb->m_frame.f_lineno = 1375;
                tmp_assign_source_34 = CALL_METHOD_NO_ARGS( tmp_called_instance_2, const_str_plain_catch_warnings );
                if ( tmp_assign_source_34 == NULL )
                {
                    assert( ERROR_OCCURRED() );

                    FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                    exception_lineno = 1375;
                    type_description_1 = "ooooooooooooooooooooooooooo";
                    goto try_except_handler_8;
                }
                assert( tmp_with_1__source == NULL );
                tmp_with_1__source = tmp_assign_source_34;
            }
            {
                PyObject *tmp_assign_source_35;
                PyObject *tmp_called_name_6;
                PyObject *tmp_source_name_1;
                CHECK_OBJECT( tmp_with_1__source );
                tmp_source_name_1 = tmp_with_1__source;
                tmp_called_name_6 = LOOKUP_SPECIAL( tmp_source_name_1, const_str_plain___enter__ );
                if ( tmp_called_name_6 == NULL )
                {
                    assert( ERROR_OCCURRED() );

                    FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                    exception_lineno = 1375;
                    type_description_1 = "ooooooooooooooooooooooooooo";
                    goto try_except_handler_8;
                }
                frame_0d3a22fe3694b8da215ae5e33a50d7cb->m_frame.f_lineno = 1375;
                tmp_assign_source_35 = CALL_FUNCTION_NO_ARGS( tmp_called_name_6 );
                Py_DECREF( tmp_called_name_6 );
                if ( tmp_assign_source_35 == NULL )
                {
                    assert( ERROR_OCCURRED() );

                    FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                    exception_lineno = 1375;
                    type_description_1 = "ooooooooooooooooooooooooooo";
                    goto try_except_handler_8;
                }
                assert( tmp_with_1__enter == NULL );
                tmp_with_1__enter = tmp_assign_source_35;
            }
            {
                PyObject *tmp_assign_source_36;
                PyObject *tmp_source_name_2;
                CHECK_OBJECT( tmp_with_1__source );
                tmp_source_name_2 = tmp_with_1__source;
                tmp_assign_source_36 = LOOKUP_SPECIAL( tmp_source_name_2, const_str_plain___exit__ );
                if ( tmp_assign_source_36 == NULL )
                {
                    assert( ERROR_OCCURRED() );

                    FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                    exception_lineno = 1375;
                    type_description_1 = "ooooooooooooooooooooooooooo";
                    goto try_except_handler_8;
                }
                assert( tmp_with_1__exit == NULL );
                tmp_with_1__exit = tmp_assign_source_36;
            }
            {
                nuitka_bool tmp_assign_source_37;
                tmp_assign_source_37 = NUITKA_BOOL_TRUE;
                tmp_with_1__indicator = tmp_assign_source_37;
            }
            // Tried code:
            // Tried code:
            {
                PyObject *tmp_called_name_7;
                PyObject *tmp_source_name_3;
                PyObject *tmp_mvar_value_8;
                PyObject *tmp_call_result_1;
                PyObject *tmp_args_element_name_13;
                PyObject *tmp_args_element_name_14;
                PyObject *tmp_args_element_name_15;
                PyObject *tmp_mvar_value_9;
                tmp_mvar_value_8 = GET_STRING_DICT_VALUE( moduledict_platform, (Nuitka_StringObject *)const_str_plain_warnings );

                if (unlikely( tmp_mvar_value_8 == NULL ))
                {
                    tmp_mvar_value_8 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_warnings );
                }

                if ( tmp_mvar_value_8 == NULL )
                {

                    exception_type = PyExc_NameError;
                    Py_INCREF( exception_type );
                    exception_value = PyUnicode_FromFormat( "name '%s' is not defined", "warnings" );
                    exception_tb = NULL;
                    NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
                    CHAIN_EXCEPTION( exception_value );

                    exception_lineno = 1377;
                    type_description_1 = "ooooooooooooooooooooooooooo";
                    goto try_except_handler_10;
                }

                tmp_source_name_3 = tmp_mvar_value_8;
                tmp_called_name_7 = LOOKUP_ATTRIBUTE( tmp_source_name_3, const_str_plain_filterwarnings );
                if ( tmp_called_name_7 == NULL )
                {
                    assert( ERROR_OCCURRED() );

                    FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                    exception_lineno = 1377;
                    type_description_1 = "ooooooooooooooooooooooooooo";
                    goto try_except_handler_10;
                }
                tmp_args_element_name_13 = const_str_plain_ignore;
                tmp_args_element_name_14 = const_str_digest_48d62bee99fc62cc3df95231223fc825;
                tmp_mvar_value_9 = GET_STRING_DICT_VALUE( moduledict_platform, (Nuitka_StringObject *)const_str_plain_DeprecationWarning );

                if (unlikely( tmp_mvar_value_9 == NULL ))
                {
                    tmp_mvar_value_9 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_DeprecationWarning );
                }

                if ( tmp_mvar_value_9 == NULL )
                {
                    Py_DECREF( tmp_called_name_7 );
                    exception_type = PyExc_NameError;
                    Py_INCREF( exception_type );
                    exception_value = PyUnicode_FromFormat( "name '%s' is not defined", "DeprecationWarning" );
                    exception_tb = NULL;
                    NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
                    CHAIN_EXCEPTION( exception_value );

                    exception_lineno = 1381;
                    type_description_1 = "ooooooooooooooooooooooooooo";
                    goto try_except_handler_10;
                }

                tmp_args_element_name_15 = tmp_mvar_value_9;
                frame_0d3a22fe3694b8da215ae5e33a50d7cb->m_frame.f_lineno = 1377;
                {
                    PyObject *call_args[] = { tmp_args_element_name_13, tmp_args_element_name_14, tmp_args_element_name_15 };
                    tmp_call_result_1 = CALL_FUNCTION_WITH_ARGS3( tmp_called_name_7, call_args );
                }

                Py_DECREF( tmp_called_name_7 );
                if ( tmp_call_result_1 == NULL )
                {
                    assert( ERROR_OCCURRED() );

                    FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                    exception_lineno = 1377;
                    type_description_1 = "ooooooooooooooooooooooooooo";
                    goto try_except_handler_10;
                }
                Py_DECREF( tmp_call_result_1 );
            }
            // Tried code:
            {
                PyObject *tmp_assign_source_38;
                PyObject *tmp_iter_arg_4;
                PyObject *tmp_called_name_8;
                PyObject *tmp_mvar_value_10;
                tmp_mvar_value_10 = GET_STRING_DICT_VALUE( moduledict_platform, (Nuitka_StringObject *)const_str_plain_dist );

                if (unlikely( tmp_mvar_value_10 == NULL ))
                {
                    tmp_mvar_value_10 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_dist );
                }

                if ( tmp_mvar_value_10 == NULL )
                {

                    exception_type = PyExc_NameError;
                    Py_INCREF( exception_type );
                    exception_value = PyUnicode_FromFormat( "name '%s' is not defined", "dist" );
                    exception_tb = NULL;
                    NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
                    CHAIN_EXCEPTION( exception_value );

                    exception_lineno = 1383;
                    type_description_1 = "ooooooooooooooooooooooooooo";
                    goto try_except_handler_11;
                }

                tmp_called_name_8 = tmp_mvar_value_10;
                frame_0d3a22fe3694b8da215ae5e33a50d7cb->m_frame.f_lineno = 1383;
                tmp_iter_arg_4 = CALL_FUNCTION_WITH_ARGS1( tmp_called_name_8, &PyTuple_GET_ITEM( const_tuple_str_empty_tuple, 0 ) );

                if ( tmp_iter_arg_4 == NULL )
                {
                    assert( ERROR_OCCURRED() );

                    FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                    exception_lineno = 1383;
                    type_description_1 = "ooooooooooooooooooooooooooo";
                    goto try_except_handler_11;
                }
                tmp_assign_source_38 = MAKE_UNPACK_ITERATOR( tmp_iter_arg_4 );
                Py_DECREF( tmp_iter_arg_4 );
                if ( tmp_assign_source_38 == NULL )
                {
                    assert( ERROR_OCCURRED() );

                    FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                    exception_lineno = 1383;
                    type_description_1 = "ooooooooooooooooooooooooooo";
                    goto try_except_handler_11;
                }
                assert( tmp_tuple_unpack_4__source_iter == NULL );
                tmp_tuple_unpack_4__source_iter = tmp_assign_source_38;
            }
            // Tried code:
            {
                PyObject *tmp_assign_source_39;
                PyObject *tmp_unpack_14;
                CHECK_OBJECT( tmp_tuple_unpack_4__source_iter );
                tmp_unpack_14 = tmp_tuple_unpack_4__source_iter;
                tmp_assign_source_39 = UNPACK_NEXT( tmp_unpack_14, 0, 3 );
                if ( tmp_assign_source_39 == NULL )
                {
                    if ( !ERROR_OCCURRED() )
                    {
                        exception_type = PyExc_StopIteration;
                        Py_INCREF( exception_type );
                        exception_value = NULL;
                        exception_tb = NULL;
                    }
                    else
                    {
                        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
                    }


                    type_description_1 = "ooooooooooooooooooooooooooo";
                    exception_lineno = 1383;
                    goto try_except_handler_12;
                }
                assert( tmp_tuple_unpack_4__element_1 == NULL );
                tmp_tuple_unpack_4__element_1 = tmp_assign_source_39;
            }
            {
                PyObject *tmp_assign_source_40;
                PyObject *tmp_unpack_15;
                CHECK_OBJECT( tmp_tuple_unpack_4__source_iter );
                tmp_unpack_15 = tmp_tuple_unpack_4__source_iter;
                tmp_assign_source_40 = UNPACK_NEXT( tmp_unpack_15, 1, 3 );
                if ( tmp_assign_source_40 == NULL )
                {
                    if ( !ERROR_OCCURRED() )
                    {
                        exception_type = PyExc_StopIteration;
                        Py_INCREF( exception_type );
                        exception_value = NULL;
                        exception_tb = NULL;
                    }
                    else
                    {
                        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
                    }


                    type_description_1 = "ooooooooooooooooooooooooooo";
                    exception_lineno = 1383;
                    goto try_except_handler_12;
                }
                assert( tmp_tuple_unpack_4__element_2 == NULL );
                tmp_tuple_unpack_4__element_2 = tmp_assign_source_40;
            }
            {
                PyObject *tmp_assign_source_41;
                PyObject *tmp_unpack_16;
                CHECK_OBJECT( tmp_tuple_unpack_4__source_iter );
                tmp_unpack_16 = tmp_tuple_unpack_4__source_iter;
                tmp_assign_source_41 = UNPACK_NEXT( tmp_unpack_16, 2, 3 );
                if ( tmp_assign_source_41 == NULL )
                {
                    if ( !ERROR_OCCURRED() )
                    {
                        exception_type = PyExc_StopIteration;
                        Py_INCREF( exception_type );
                        exception_value = NULL;
                        exception_tb = NULL;
                    }
                    else
                    {
                        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
                    }


                    type_description_1 = "ooooooooooooooooooooooooooo";
                    exception_lineno = 1383;
                    goto try_except_handler_12;
                }
                assert( tmp_tuple_unpack_4__element_3 == NULL );
                tmp_tuple_unpack_4__element_3 = tmp_assign_source_41;
            }
            {
                PyObject *tmp_iterator_name_4;
                CHECK_OBJECT( tmp_tuple_unpack_4__source_iter );
                tmp_iterator_name_4 = tmp_tuple_unpack_4__source_iter;
                // Check if iterator has left-over elements.
                CHECK_OBJECT( tmp_iterator_name_4 ); assert( HAS_ITERNEXT( tmp_iterator_name_4 ) );

                tmp_iterator_attempt = (*Py_TYPE( tmp_iterator_name_4 )->tp_iternext)( tmp_iterator_name_4 );

                if (likely( tmp_iterator_attempt == NULL ))
                {
                    PyObject *error = GET_ERROR_OCCURRED();

                    if ( error != NULL )
                    {
                        if ( EXCEPTION_MATCH_BOOL_SINGLE( error, PyExc_StopIteration ))
                        {
                            CLEAR_ERROR_OCCURRED();
                        }
                        else
                        {
                            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );

                            type_description_1 = "ooooooooooooooooooooooooooo";
                            exception_lineno = 1383;
                            goto try_except_handler_12;
                        }
                    }
                }
                else
                {
                    Py_DECREF( tmp_iterator_attempt );

                    // TODO: Could avoid PyErr_Format.
#if PYTHON_VERSION < 300
                    PyErr_Format( PyExc_ValueError, "too many values to unpack" );
#else
                    PyErr_Format( PyExc_ValueError, "too many values to unpack (expected 3)" );
#endif
                    FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );

                    type_description_1 = "ooooooooooooooooooooooooooo";
                    exception_lineno = 1383;
                    goto try_except_handler_12;
                }
            }
            goto try_end_7;
            // Exception handler code:
            try_except_handler_12:;
            exception_keeper_type_7 = exception_type;
            exception_keeper_value_7 = exception_value;
            exception_keeper_tb_7 = exception_tb;
            exception_keeper_lineno_7 = exception_lineno;
            exception_type = NULL;
            exception_value = NULL;
            exception_tb = NULL;
            exception_lineno = 0;

            CHECK_OBJECT( (PyObject *)tmp_tuple_unpack_4__source_iter );
            Py_DECREF( tmp_tuple_unpack_4__source_iter );
            tmp_tuple_unpack_4__source_iter = NULL;

            // Re-raise.
            exception_type = exception_keeper_type_7;
            exception_value = exception_keeper_value_7;
            exception_tb = exception_keeper_tb_7;
            exception_lineno = exception_keeper_lineno_7;

            goto try_except_handler_11;
            // End of try:
            try_end_7:;
            goto try_end_8;
            // Exception handler code:
            try_except_handler_11:;
            exception_keeper_type_8 = exception_type;
            exception_keeper_value_8 = exception_value;
            exception_keeper_tb_8 = exception_tb;
            exception_keeper_lineno_8 = exception_lineno;
            exception_type = NULL;
            exception_value = NULL;
            exception_tb = NULL;
            exception_lineno = 0;

            Py_XDECREF( tmp_tuple_unpack_4__element_1 );
            tmp_tuple_unpack_4__element_1 = NULL;

            Py_XDECREF( tmp_tuple_unpack_4__element_2 );
            tmp_tuple_unpack_4__element_2 = NULL;

            Py_XDECREF( tmp_tuple_unpack_4__element_3 );
            tmp_tuple_unpack_4__element_3 = NULL;

            // Re-raise.
            exception_type = exception_keeper_type_8;
            exception_value = exception_keeper_value_8;
            exception_tb = exception_keeper_tb_8;
            exception_lineno = exception_keeper_lineno_8;

            goto try_except_handler_10;
            // End of try:
            try_end_8:;
            CHECK_OBJECT( (PyObject *)tmp_tuple_unpack_4__source_iter );
            Py_DECREF( tmp_tuple_unpack_4__source_iter );
            tmp_tuple_unpack_4__source_iter = NULL;

            {
                PyObject *tmp_assign_source_42;
                CHECK_OBJECT( tmp_tuple_unpack_4__element_1 );
                tmp_assign_source_42 = tmp_tuple_unpack_4__element_1;
                assert( var_distname == NULL );
                Py_INCREF( tmp_assign_source_42 );
                var_distname = tmp_assign_source_42;
            }
            Py_XDECREF( tmp_tuple_unpack_4__element_1 );
            tmp_tuple_unpack_4__element_1 = NULL;

            {
                PyObject *tmp_assign_source_43;
                CHECK_OBJECT( tmp_tuple_unpack_4__element_2 );
                tmp_assign_source_43 = tmp_tuple_unpack_4__element_2;
                assert( var_distversion == NULL );
                Py_INCREF( tmp_assign_source_43 );
                var_distversion = tmp_assign_source_43;
            }
            Py_XDECREF( tmp_tuple_unpack_4__element_2 );
            tmp_tuple_unpack_4__element_2 = NULL;

            {
                PyObject *tmp_assign_source_44;
                CHECK_OBJECT( tmp_tuple_unpack_4__element_3 );
                tmp_assign_source_44 = tmp_tuple_unpack_4__element_3;
                assert( var_distid == NULL );
                Py_INCREF( tmp_assign_source_44 );
                var_distid = tmp_assign_source_44;
            }
            Py_XDECREF( tmp_tuple_unpack_4__element_3 );
            tmp_tuple_unpack_4__element_3 = NULL;

            goto try_end_9;
            // Exception handler code:
            try_except_handler_10:;
            exception_keeper_type_9 = exception_type;
            exception_keeper_value_9 = exception_value;
            exception_keeper_tb_9 = exception_tb;
            exception_keeper_lineno_9 = exception_lineno;
            exception_type = NULL;
            exception_value = NULL;
            exception_tb = NULL;
            exception_lineno = 0;

            // Preserve existing published exception.
            exception_preserved_type_1 = EXC_TYPE(PyThreadState_GET());
            Py_XINCREF( exception_preserved_type_1 );
            exception_preserved_value_1 = EXC_VALUE(PyThreadState_GET());
            Py_XINCREF( exception_preserved_value_1 );
            exception_preserved_tb_1 = (PyTracebackObject *)EXC_TRACEBACK(PyThreadState_GET());
            Py_XINCREF( exception_preserved_tb_1 );

            if ( exception_keeper_tb_9 == NULL )
            {
                exception_keeper_tb_9 = MAKE_TRACEBACK( frame_0d3a22fe3694b8da215ae5e33a50d7cb, exception_keeper_lineno_9 );
            }
            else if ( exception_keeper_lineno_9 != 0 )
            {
                exception_keeper_tb_9 = ADD_TRACEBACK( exception_keeper_tb_9, frame_0d3a22fe3694b8da215ae5e33a50d7cb, exception_keeper_lineno_9 );
            }

            NORMALIZE_EXCEPTION( &exception_keeper_type_9, &exception_keeper_value_9, &exception_keeper_tb_9 );
            PyException_SetTraceback( exception_keeper_value_9, (PyObject *)exception_keeper_tb_9 );
            PUBLISH_EXCEPTION( &exception_keeper_type_9, &exception_keeper_value_9, &exception_keeper_tb_9 );
            // Tried code:
            {
                nuitka_bool tmp_condition_result_7;
                PyObject *tmp_compexpr_left_5;
                PyObject *tmp_compexpr_right_5;
                tmp_compexpr_left_5 = EXC_TYPE(PyThreadState_GET());
                tmp_compexpr_right_5 = PyExc_BaseException;
                tmp_res = EXCEPTION_MATCH_BOOL( tmp_compexpr_left_5, tmp_compexpr_right_5 );
                if ( tmp_res == -1 )
                {
                    assert( ERROR_OCCURRED() );

                    FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                    exception_lineno = 1375;
                    type_description_1 = "ooooooooooooooooooooooooooo";
                    goto try_except_handler_13;
                }
                tmp_condition_result_7 = ( tmp_res != 0 ) ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
                if ( tmp_condition_result_7 == NUITKA_BOOL_TRUE )
                {
                    goto branch_yes_7;
                }
                else
                {
                    goto branch_no_7;
                }
                branch_yes_7:;
                {
                    nuitka_bool tmp_assign_source_45;
                    tmp_assign_source_45 = NUITKA_BOOL_FALSE;
                    tmp_with_1__indicator = tmp_assign_source_45;
                }
                {
                    nuitka_bool tmp_condition_result_8;
                    PyObject *tmp_operand_name_1;
                    PyObject *tmp_called_name_9;
                    PyObject *tmp_args_element_name_16;
                    PyObject *tmp_args_element_name_17;
                    PyObject *tmp_args_element_name_18;
                    CHECK_OBJECT( tmp_with_1__exit );
                    tmp_called_name_9 = tmp_with_1__exit;
                    tmp_args_element_name_16 = EXC_TYPE(PyThreadState_GET());
                    tmp_args_element_name_17 = EXC_VALUE(PyThreadState_GET());
                    tmp_args_element_name_18 = EXC_TRACEBACK(PyThreadState_GET());
                    frame_0d3a22fe3694b8da215ae5e33a50d7cb->m_frame.f_lineno = 1375;
                    {
                        PyObject *call_args[] = { tmp_args_element_name_16, tmp_args_element_name_17, tmp_args_element_name_18 };
                        tmp_operand_name_1 = CALL_FUNCTION_WITH_ARGS3( tmp_called_name_9, call_args );
                    }

                    if ( tmp_operand_name_1 == NULL )
                    {
                        assert( ERROR_OCCURRED() );

                        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                        exception_lineno = 1375;
                        type_description_1 = "ooooooooooooooooooooooooooo";
                        goto try_except_handler_13;
                    }
                    tmp_res = CHECK_IF_TRUE( tmp_operand_name_1 );
                    Py_DECREF( tmp_operand_name_1 );
                    if ( tmp_res == -1 )
                    {
                        assert( ERROR_OCCURRED() );

                        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                        exception_lineno = 1375;
                        type_description_1 = "ooooooooooooooooooooooooooo";
                        goto try_except_handler_13;
                    }
                    tmp_condition_result_8 = ( tmp_res == 0 ) ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
                    if ( tmp_condition_result_8 == NUITKA_BOOL_TRUE )
                    {
                        goto branch_yes_8;
                    }
                    else
                    {
                        goto branch_no_8;
                    }
                    branch_yes_8:;
                    tmp_result = RERAISE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
                    if (unlikely( tmp_result == false ))
                    {
                        exception_lineno = 1375;
                    }

                    if (exception_tb && exception_tb->tb_frame == &frame_0d3a22fe3694b8da215ae5e33a50d7cb->m_frame) frame_0d3a22fe3694b8da215ae5e33a50d7cb->m_frame.f_lineno = exception_tb->tb_lineno;
                    type_description_1 = "ooooooooooooooooooooooooooo";
                    goto try_except_handler_13;
                    branch_no_8:;
                }
                goto branch_end_7;
                branch_no_7:;
                tmp_result = RERAISE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
                if (unlikely( tmp_result == false ))
                {
                    exception_lineno = 1375;
                }

                if (exception_tb && exception_tb->tb_frame == &frame_0d3a22fe3694b8da215ae5e33a50d7cb->m_frame) frame_0d3a22fe3694b8da215ae5e33a50d7cb->m_frame.f_lineno = exception_tb->tb_lineno;
                type_description_1 = "ooooooooooooooooooooooooooo";
                goto try_except_handler_13;
                branch_end_7:;
            }
            goto try_end_10;
            // Exception handler code:
            try_except_handler_13:;
            exception_keeper_type_10 = exception_type;
            exception_keeper_value_10 = exception_value;
            exception_keeper_tb_10 = exception_tb;
            exception_keeper_lineno_10 = exception_lineno;
            exception_type = NULL;
            exception_value = NULL;
            exception_tb = NULL;
            exception_lineno = 0;

            // Restore previous exception.
            SET_CURRENT_EXCEPTION( exception_preserved_type_1, exception_preserved_value_1, exception_preserved_tb_1 );
            // Re-raise.
            exception_type = exception_keeper_type_10;
            exception_value = exception_keeper_value_10;
            exception_tb = exception_keeper_tb_10;
            exception_lineno = exception_keeper_lineno_10;

            goto try_except_handler_9;
            // End of try:
            try_end_10:;
            // Restore previous exception.
            SET_CURRENT_EXCEPTION( exception_preserved_type_1, exception_preserved_value_1, exception_preserved_tb_1 );
            goto try_end_9;
            // exception handler codes exits in all cases
            NUITKA_CANNOT_GET_HERE( platform$$$function_38_platform );
            return NULL;
            // End of try:
            try_end_9:;
            goto try_end_11;
            // Exception handler code:
            try_except_handler_9:;
            exception_keeper_type_11 = exception_type;
            exception_keeper_value_11 = exception_value;
            exception_keeper_tb_11 = exception_tb;
            exception_keeper_lineno_11 = exception_lineno;
            exception_type = NULL;
            exception_value = NULL;
            exception_tb = NULL;
            exception_lineno = 0;

            {
                nuitka_bool tmp_condition_result_9;
                nuitka_bool tmp_compexpr_left_6;
                nuitka_bool tmp_compexpr_right_6;
                assert( tmp_with_1__indicator != NUITKA_BOOL_UNASSIGNED);
                tmp_compexpr_left_6 = tmp_with_1__indicator;
                tmp_compexpr_right_6 = NUITKA_BOOL_TRUE;
                tmp_condition_result_9 = ( tmp_compexpr_left_6 == tmp_compexpr_right_6 ) ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
                if ( tmp_condition_result_9 == NUITKA_BOOL_TRUE )
                {
                    goto branch_yes_9;
                }
                else
                {
                    goto branch_no_9;
                }
                branch_yes_9:;
                {
                    PyObject *tmp_called_name_10;
                    PyObject *tmp_call_result_2;
                    CHECK_OBJECT( tmp_with_1__exit );
                    tmp_called_name_10 = tmp_with_1__exit;
                    frame_0d3a22fe3694b8da215ae5e33a50d7cb->m_frame.f_lineno = 1375;
                    tmp_call_result_2 = CALL_FUNCTION_WITH_ARGS3( tmp_called_name_10, &PyTuple_GET_ITEM( const_tuple_none_none_none_tuple, 0 ) );

                    if ( tmp_call_result_2 == NULL )
                    {
                        assert( ERROR_OCCURRED() );

                        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );

                        Py_DECREF( exception_keeper_type_11 );
                        Py_XDECREF( exception_keeper_value_11 );
                        Py_XDECREF( exception_keeper_tb_11 );

                        exception_lineno = 1375;
                        type_description_1 = "ooooooooooooooooooooooooooo";
                        goto try_except_handler_8;
                    }
                    Py_DECREF( tmp_call_result_2 );
                }
                branch_no_9:;
            }
            // Re-raise.
            exception_type = exception_keeper_type_11;
            exception_value = exception_keeper_value_11;
            exception_tb = exception_keeper_tb_11;
            exception_lineno = exception_keeper_lineno_11;

            goto try_except_handler_8;
            // End of try:
            try_end_11:;
            {
                nuitka_bool tmp_condition_result_10;
                nuitka_bool tmp_compexpr_left_7;
                nuitka_bool tmp_compexpr_right_7;
                assert( tmp_with_1__indicator != NUITKA_BOOL_UNASSIGNED);
                tmp_compexpr_left_7 = tmp_with_1__indicator;
                tmp_compexpr_right_7 = NUITKA_BOOL_TRUE;
                tmp_condition_result_10 = ( tmp_compexpr_left_7 == tmp_compexpr_right_7 ) ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
                if ( tmp_condition_result_10 == NUITKA_BOOL_TRUE )
                {
                    goto branch_yes_10;
                }
                else
                {
                    goto branch_no_10;
                }
                branch_yes_10:;
                {
                    PyObject *tmp_called_name_11;
                    PyObject *tmp_call_result_3;
                    CHECK_OBJECT( tmp_with_1__exit );
                    tmp_called_name_11 = tmp_with_1__exit;
                    frame_0d3a22fe3694b8da215ae5e33a50d7cb->m_frame.f_lineno = 1375;
                    tmp_call_result_3 = CALL_FUNCTION_WITH_ARGS3( tmp_called_name_11, &PyTuple_GET_ITEM( const_tuple_none_none_none_tuple, 0 ) );

                    if ( tmp_call_result_3 == NULL )
                    {
                        assert( ERROR_OCCURRED() );

                        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                        exception_lineno = 1375;
                        type_description_1 = "ooooooooooooooooooooooooooo";
                        goto try_except_handler_8;
                    }
                    Py_DECREF( tmp_call_result_3 );
                }
                branch_no_10:;
            }
            goto try_end_12;
            // Exception handler code:
            try_except_handler_8:;
            exception_keeper_type_12 = exception_type;
            exception_keeper_value_12 = exception_value;
            exception_keeper_tb_12 = exception_tb;
            exception_keeper_lineno_12 = exception_lineno;
            exception_type = NULL;
            exception_value = NULL;
            exception_tb = NULL;
            exception_lineno = 0;

            Py_XDECREF( tmp_with_1__source );
            tmp_with_1__source = NULL;

            Py_XDECREF( tmp_with_1__enter );
            tmp_with_1__enter = NULL;

            Py_XDECREF( tmp_with_1__exit );
            tmp_with_1__exit = NULL;

            // Re-raise.
            exception_type = exception_keeper_type_12;
            exception_value = exception_keeper_value_12;
            exception_tb = exception_keeper_tb_12;
            exception_lineno = exception_keeper_lineno_12;

            goto frame_exception_exit_1;
            // End of try:
            try_end_12:;
            CHECK_OBJECT( (PyObject *)tmp_with_1__source );
            Py_DECREF( tmp_with_1__source );
            tmp_with_1__source = NULL;

            CHECK_OBJECT( (PyObject *)tmp_with_1__enter );
            Py_DECREF( tmp_with_1__enter );
            tmp_with_1__enter = NULL;

            CHECK_OBJECT( (PyObject *)tmp_with_1__exit );
            Py_DECREF( tmp_with_1__exit );
            tmp_with_1__exit = NULL;

            {
                nuitka_bool tmp_condition_result_11;
                int tmp_and_left_truth_1;
                nuitka_bool tmp_and_left_value_1;
                nuitka_bool tmp_and_right_value_1;
                int tmp_truth_name_3;
                PyObject *tmp_operand_name_2;
                if ( var_distname == NULL )
                {

                    exception_type = PyExc_UnboundLocalError;
                    Py_INCREF( exception_type );
                    exception_value = PyUnicode_FromFormat( "local variable '%s' referenced before assignment", "distname" );
                    exception_tb = NULL;
                    NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
                    CHAIN_EXCEPTION( exception_value );

                    exception_lineno = 1384;
                    type_description_1 = "ooooooooooooooooooooooooooo";
                    goto frame_exception_exit_1;
                }

                tmp_truth_name_3 = CHECK_IF_TRUE( var_distname );
                if ( tmp_truth_name_3 == -1 )
                {
                    assert( ERROR_OCCURRED() );

                    FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                    exception_lineno = 1384;
                    type_description_1 = "ooooooooooooooooooooooooooo";
                    goto frame_exception_exit_1;
                }
                tmp_and_left_value_1 = tmp_truth_name_3 == 1 ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
                tmp_and_left_truth_1 = tmp_and_left_value_1 == NUITKA_BOOL_TRUE ? 1 : 0;
                if ( tmp_and_left_truth_1 == 1 )
                {
                    goto and_right_1;
                }
                else
                {
                    goto and_left_1;
                }
                and_right_1:;
                CHECK_OBJECT( par_terse );
                tmp_operand_name_2 = par_terse;
                tmp_res = CHECK_IF_TRUE( tmp_operand_name_2 );
                if ( tmp_res == -1 )
                {
                    assert( ERROR_OCCURRED() );

                    FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                    exception_lineno = 1384;
                    type_description_1 = "ooooooooooooooooooooooooooo";
                    goto frame_exception_exit_1;
                }
                tmp_and_right_value_1 = ( tmp_res == 0 ) ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
                tmp_condition_result_11 = tmp_and_right_value_1;
                goto and_end_1;
                and_left_1:;
                tmp_condition_result_11 = tmp_and_left_value_1;
                and_end_1:;
                if ( tmp_condition_result_11 == NUITKA_BOOL_TRUE )
                {
                    goto branch_yes_11;
                }
                else
                {
                    goto branch_no_11;
                }
                branch_yes_11:;
                {
                    PyObject *tmp_assign_source_46;
                    PyObject *tmp_called_name_12;
                    PyObject *tmp_mvar_value_11;
                    PyObject *tmp_args_element_name_19;
                    PyObject *tmp_args_element_name_20;
                    PyObject *tmp_args_element_name_21;
                    PyObject *tmp_args_element_name_22;
                    PyObject *tmp_args_element_name_23;
                    PyObject *tmp_args_element_name_24;
                    PyObject *tmp_args_element_name_25;
                    PyObject *tmp_args_element_name_26;
                    tmp_mvar_value_11 = GET_STRING_DICT_VALUE( moduledict_platform, (Nuitka_StringObject *)const_str_plain__platform );

                    if (unlikely( tmp_mvar_value_11 == NULL ))
                    {
                        tmp_mvar_value_11 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain__platform );
                    }

                    if ( tmp_mvar_value_11 == NULL )
                    {

                        exception_type = PyExc_NameError;
                        Py_INCREF( exception_type );
                        exception_value = PyUnicode_FromFormat( "name '%s' is not defined", "_platform" );
                        exception_tb = NULL;
                        NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
                        CHAIN_EXCEPTION( exception_value );

                        exception_lineno = 1385;
                        type_description_1 = "ooooooooooooooooooooooooooo";
                        goto frame_exception_exit_1;
                    }

                    tmp_called_name_12 = tmp_mvar_value_11;
                    CHECK_OBJECT( var_system );
                    tmp_args_element_name_19 = var_system;
                    CHECK_OBJECT( var_release );
                    tmp_args_element_name_20 = var_release;
                    CHECK_OBJECT( var_machine );
                    tmp_args_element_name_21 = var_machine;
                    CHECK_OBJECT( var_processor );
                    tmp_args_element_name_22 = var_processor;
                    tmp_args_element_name_23 = const_str_plain_with;
                    if ( var_distname == NULL )
                    {

                        exception_type = PyExc_UnboundLocalError;
                        Py_INCREF( exception_type );
                        exception_value = PyUnicode_FromFormat( "local variable '%s' referenced before assignment", "distname" );
                        exception_tb = NULL;
                        NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
                        CHAIN_EXCEPTION( exception_value );

                        exception_lineno = 1387;
                        type_description_1 = "ooooooooooooooooooooooooooo";
                        goto frame_exception_exit_1;
                    }

                    tmp_args_element_name_24 = var_distname;
                    if ( var_distversion == NULL )
                    {

                        exception_type = PyExc_UnboundLocalError;
                        Py_INCREF( exception_type );
                        exception_value = PyUnicode_FromFormat( "local variable '%s' referenced before assignment", "distversion" );
                        exception_tb = NULL;
                        NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
                        CHAIN_EXCEPTION( exception_value );

                        exception_lineno = 1387;
                        type_description_1 = "ooooooooooooooooooooooooooo";
                        goto frame_exception_exit_1;
                    }

                    tmp_args_element_name_25 = var_distversion;
                    if ( var_distid == NULL )
                    {

                        exception_type = PyExc_UnboundLocalError;
                        Py_INCREF( exception_type );
                        exception_value = PyUnicode_FromFormat( "local variable '%s' referenced before assignment", "distid" );
                        exception_tb = NULL;
                        NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
                        CHAIN_EXCEPTION( exception_value );

                        exception_lineno = 1387;
                        type_description_1 = "ooooooooooooooooooooooooooo";
                        goto frame_exception_exit_1;
                    }

                    tmp_args_element_name_26 = var_distid;
                    frame_0d3a22fe3694b8da215ae5e33a50d7cb->m_frame.f_lineno = 1385;
                    {
                        PyObject *call_args[] = { tmp_args_element_name_19, tmp_args_element_name_20, tmp_args_element_name_21, tmp_args_element_name_22, tmp_args_element_name_23, tmp_args_element_name_24, tmp_args_element_name_25, tmp_args_element_name_26 };
                        tmp_assign_source_46 = CALL_FUNCTION_WITH_ARGS8( tmp_called_name_12, call_args );
                    }

                    if ( tmp_assign_source_46 == NULL )
                    {
                        assert( ERROR_OCCURRED() );

                        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                        exception_lineno = 1385;
                        type_description_1 = "ooooooooooooooooooooooooooo";
                        goto frame_exception_exit_1;
                    }
                    assert( var_platform == NULL );
                    var_platform = tmp_assign_source_46;
                }
                goto branch_end_11;
                branch_no_11:;
                // Tried code:
                {
                    PyObject *tmp_assign_source_47;
                    PyObject *tmp_iter_arg_5;
                    PyObject *tmp_called_name_13;
                    PyObject *tmp_mvar_value_12;
                    PyObject *tmp_args_element_name_27;
                    PyObject *tmp_source_name_4;
                    PyObject *tmp_mvar_value_13;
                    tmp_mvar_value_12 = GET_STRING_DICT_VALUE( moduledict_platform, (Nuitka_StringObject *)const_str_plain_libc_ver );

                    if (unlikely( tmp_mvar_value_12 == NULL ))
                    {
                        tmp_mvar_value_12 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_libc_ver );
                    }

                    if ( tmp_mvar_value_12 == NULL )
                    {

                        exception_type = PyExc_NameError;
                        Py_INCREF( exception_type );
                        exception_value = PyUnicode_FromFormat( "name '%s' is not defined", "libc_ver" );
                        exception_tb = NULL;
                        NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
                        CHAIN_EXCEPTION( exception_value );

                        exception_lineno = 1390;
                        type_description_1 = "ooooooooooooooooooooooooooo";
                        goto try_except_handler_14;
                    }

                    tmp_called_name_13 = tmp_mvar_value_12;
                    tmp_mvar_value_13 = GET_STRING_DICT_VALUE( moduledict_platform, (Nuitka_StringObject *)const_str_plain_sys );

                    if (unlikely( tmp_mvar_value_13 == NULL ))
                    {
                        tmp_mvar_value_13 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_sys );
                    }

                    if ( tmp_mvar_value_13 == NULL )
                    {

                        exception_type = PyExc_NameError;
                        Py_INCREF( exception_type );
                        exception_value = PyUnicode_FromFormat( "name '%s' is not defined", "sys" );
                        exception_tb = NULL;
                        NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
                        CHAIN_EXCEPTION( exception_value );

                        exception_lineno = 1390;
                        type_description_1 = "ooooooooooooooooooooooooooo";
                        goto try_except_handler_14;
                    }

                    tmp_source_name_4 = tmp_mvar_value_13;
                    tmp_args_element_name_27 = LOOKUP_ATTRIBUTE( tmp_source_name_4, const_str_plain_executable );
                    if ( tmp_args_element_name_27 == NULL )
                    {
                        assert( ERROR_OCCURRED() );

                        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                        exception_lineno = 1390;
                        type_description_1 = "ooooooooooooooooooooooooooo";
                        goto try_except_handler_14;
                    }
                    frame_0d3a22fe3694b8da215ae5e33a50d7cb->m_frame.f_lineno = 1390;
                    {
                        PyObject *call_args[] = { tmp_args_element_name_27 };
                        tmp_iter_arg_5 = CALL_FUNCTION_WITH_ARGS1( tmp_called_name_13, call_args );
                    }

                    Py_DECREF( tmp_args_element_name_27 );
                    if ( tmp_iter_arg_5 == NULL )
                    {
                        assert( ERROR_OCCURRED() );

                        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                        exception_lineno = 1390;
                        type_description_1 = "ooooooooooooooooooooooooooo";
                        goto try_except_handler_14;
                    }
                    tmp_assign_source_47 = MAKE_UNPACK_ITERATOR( tmp_iter_arg_5 );
                    Py_DECREF( tmp_iter_arg_5 );
                    if ( tmp_assign_source_47 == NULL )
                    {
                        assert( ERROR_OCCURRED() );

                        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                        exception_lineno = 1390;
                        type_description_1 = "ooooooooooooooooooooooooooo";
                        goto try_except_handler_14;
                    }
                    assert( tmp_tuple_unpack_5__source_iter == NULL );
                    tmp_tuple_unpack_5__source_iter = tmp_assign_source_47;
                }
                // Tried code:
                {
                    PyObject *tmp_assign_source_48;
                    PyObject *tmp_unpack_17;
                    CHECK_OBJECT( tmp_tuple_unpack_5__source_iter );
                    tmp_unpack_17 = tmp_tuple_unpack_5__source_iter;
                    tmp_assign_source_48 = UNPACK_NEXT( tmp_unpack_17, 0, 2 );
                    if ( tmp_assign_source_48 == NULL )
                    {
                        if ( !ERROR_OCCURRED() )
                        {
                            exception_type = PyExc_StopIteration;
                            Py_INCREF( exception_type );
                            exception_value = NULL;
                            exception_tb = NULL;
                        }
                        else
                        {
                            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
                        }


                        type_description_1 = "ooooooooooooooooooooooooooo";
                        exception_lineno = 1390;
                        goto try_except_handler_15;
                    }
                    assert( tmp_tuple_unpack_5__element_1 == NULL );
                    tmp_tuple_unpack_5__element_1 = tmp_assign_source_48;
                }
                {
                    PyObject *tmp_assign_source_49;
                    PyObject *tmp_unpack_18;
                    CHECK_OBJECT( tmp_tuple_unpack_5__source_iter );
                    tmp_unpack_18 = tmp_tuple_unpack_5__source_iter;
                    tmp_assign_source_49 = UNPACK_NEXT( tmp_unpack_18, 1, 2 );
                    if ( tmp_assign_source_49 == NULL )
                    {
                        if ( !ERROR_OCCURRED() )
                        {
                            exception_type = PyExc_StopIteration;
                            Py_INCREF( exception_type );
                            exception_value = NULL;
                            exception_tb = NULL;
                        }
                        else
                        {
                            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
                        }


                        type_description_1 = "ooooooooooooooooooooooooooo";
                        exception_lineno = 1390;
                        goto try_except_handler_15;
                    }
                    assert( tmp_tuple_unpack_5__element_2 == NULL );
                    tmp_tuple_unpack_5__element_2 = tmp_assign_source_49;
                }
                {
                    PyObject *tmp_iterator_name_5;
                    CHECK_OBJECT( tmp_tuple_unpack_5__source_iter );
                    tmp_iterator_name_5 = tmp_tuple_unpack_5__source_iter;
                    // Check if iterator has left-over elements.
                    CHECK_OBJECT( tmp_iterator_name_5 ); assert( HAS_ITERNEXT( tmp_iterator_name_5 ) );

                    tmp_iterator_attempt = (*Py_TYPE( tmp_iterator_name_5 )->tp_iternext)( tmp_iterator_name_5 );

                    if (likely( tmp_iterator_attempt == NULL ))
                    {
                        PyObject *error = GET_ERROR_OCCURRED();

                        if ( error != NULL )
                        {
                            if ( EXCEPTION_MATCH_BOOL_SINGLE( error, PyExc_StopIteration ))
                            {
                                CLEAR_ERROR_OCCURRED();
                            }
                            else
                            {
                                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );

                                type_description_1 = "ooooooooooooooooooooooooooo";
                                exception_lineno = 1390;
                                goto try_except_handler_15;
                            }
                        }
                    }
                    else
                    {
                        Py_DECREF( tmp_iterator_attempt );

                        // TODO: Could avoid PyErr_Format.
#if PYTHON_VERSION < 300
                        PyErr_Format( PyExc_ValueError, "too many values to unpack" );
#else
                        PyErr_Format( PyExc_ValueError, "too many values to unpack (expected 2)" );
#endif
                        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );

                        type_description_1 = "ooooooooooooooooooooooooooo";
                        exception_lineno = 1390;
                        goto try_except_handler_15;
                    }
                }
                goto try_end_13;
                // Exception handler code:
                try_except_handler_15:;
                exception_keeper_type_13 = exception_type;
                exception_keeper_value_13 = exception_value;
                exception_keeper_tb_13 = exception_tb;
                exception_keeper_lineno_13 = exception_lineno;
                exception_type = NULL;
                exception_value = NULL;
                exception_tb = NULL;
                exception_lineno = 0;

                CHECK_OBJECT( (PyObject *)tmp_tuple_unpack_5__source_iter );
                Py_DECREF( tmp_tuple_unpack_5__source_iter );
                tmp_tuple_unpack_5__source_iter = NULL;

                // Re-raise.
                exception_type = exception_keeper_type_13;
                exception_value = exception_keeper_value_13;
                exception_tb = exception_keeper_tb_13;
                exception_lineno = exception_keeper_lineno_13;

                goto try_except_handler_14;
                // End of try:
                try_end_13:;
                goto try_end_14;
                // Exception handler code:
                try_except_handler_14:;
                exception_keeper_type_14 = exception_type;
                exception_keeper_value_14 = exception_value;
                exception_keeper_tb_14 = exception_tb;
                exception_keeper_lineno_14 = exception_lineno;
                exception_type = NULL;
                exception_value = NULL;
                exception_tb = NULL;
                exception_lineno = 0;

                Py_XDECREF( tmp_tuple_unpack_5__element_1 );
                tmp_tuple_unpack_5__element_1 = NULL;

                Py_XDECREF( tmp_tuple_unpack_5__element_2 );
                tmp_tuple_unpack_5__element_2 = NULL;

                // Re-raise.
                exception_type = exception_keeper_type_14;
                exception_value = exception_keeper_value_14;
                exception_tb = exception_keeper_tb_14;
                exception_lineno = exception_keeper_lineno_14;

                goto frame_exception_exit_1;
                // End of try:
                try_end_14:;
                CHECK_OBJECT( (PyObject *)tmp_tuple_unpack_5__source_iter );
                Py_DECREF( tmp_tuple_unpack_5__source_iter );
                tmp_tuple_unpack_5__source_iter = NULL;

                {
                    PyObject *tmp_assign_source_50;
                    CHECK_OBJECT( tmp_tuple_unpack_5__element_1 );
                    tmp_assign_source_50 = tmp_tuple_unpack_5__element_1;
                    assert( var_libcname == NULL );
                    Py_INCREF( tmp_assign_source_50 );
                    var_libcname = tmp_assign_source_50;
                }
                Py_XDECREF( tmp_tuple_unpack_5__element_1 );
                tmp_tuple_unpack_5__element_1 = NULL;

                {
                    PyObject *tmp_assign_source_51;
                    CHECK_OBJECT( tmp_tuple_unpack_5__element_2 );
                    tmp_assign_source_51 = tmp_tuple_unpack_5__element_2;
                    assert( var_libcversion == NULL );
                    Py_INCREF( tmp_assign_source_51 );
                    var_libcversion = tmp_assign_source_51;
                }
                Py_XDECREF( tmp_tuple_unpack_5__element_2 );
                tmp_tuple_unpack_5__element_2 = NULL;

                {
                    PyObject *tmp_assign_source_52;
                    PyObject *tmp_called_name_14;
                    PyObject *tmp_mvar_value_14;
                    PyObject *tmp_args_element_name_28;
                    PyObject *tmp_args_element_name_29;
                    PyObject *tmp_args_element_name_30;
                    PyObject *tmp_args_element_name_31;
                    PyObject *tmp_args_element_name_32;
                    PyObject *tmp_args_element_name_33;
                    PyObject *tmp_left_name_1;
                    PyObject *tmp_right_name_1;
                    tmp_mvar_value_14 = GET_STRING_DICT_VALUE( moduledict_platform, (Nuitka_StringObject *)const_str_plain__platform );

                    if (unlikely( tmp_mvar_value_14 == NULL ))
                    {
                        tmp_mvar_value_14 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain__platform );
                    }

                    if ( tmp_mvar_value_14 == NULL )
                    {

                        exception_type = PyExc_NameError;
                        Py_INCREF( exception_type );
                        exception_value = PyUnicode_FromFormat( "name '%s' is not defined", "_platform" );
                        exception_tb = NULL;
                        NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
                        CHAIN_EXCEPTION( exception_value );

                        exception_lineno = 1391;
                        type_description_1 = "ooooooooooooooooooooooooooo";
                        goto frame_exception_exit_1;
                    }

                    tmp_called_name_14 = tmp_mvar_value_14;
                    CHECK_OBJECT( var_system );
                    tmp_args_element_name_28 = var_system;
                    CHECK_OBJECT( var_release );
                    tmp_args_element_name_29 = var_release;
                    CHECK_OBJECT( var_machine );
                    tmp_args_element_name_30 = var_machine;
                    CHECK_OBJECT( var_processor );
                    tmp_args_element_name_31 = var_processor;
                    tmp_args_element_name_32 = const_str_plain_with;
                    CHECK_OBJECT( var_libcname );
                    tmp_left_name_1 = var_libcname;
                    CHECK_OBJECT( var_libcversion );
                    tmp_right_name_1 = var_libcversion;
                    tmp_args_element_name_33 = BINARY_OPERATION_ADD_OBJECT_OBJECT( tmp_left_name_1, tmp_right_name_1 );
                    if ( tmp_args_element_name_33 == NULL )
                    {
                        assert( ERROR_OCCURRED() );

                        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                        exception_lineno = 1393;
                        type_description_1 = "ooooooooooooooooooooooooooo";
                        goto frame_exception_exit_1;
                    }
                    frame_0d3a22fe3694b8da215ae5e33a50d7cb->m_frame.f_lineno = 1391;
                    {
                        PyObject *call_args[] = { tmp_args_element_name_28, tmp_args_element_name_29, tmp_args_element_name_30, tmp_args_element_name_31, tmp_args_element_name_32, tmp_args_element_name_33 };
                        tmp_assign_source_52 = CALL_FUNCTION_WITH_ARGS6( tmp_called_name_14, call_args );
                    }

                    Py_DECREF( tmp_args_element_name_33 );
                    if ( tmp_assign_source_52 == NULL )
                    {
                        assert( ERROR_OCCURRED() );

                        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                        exception_lineno = 1391;
                        type_description_1 = "ooooooooooooooooooooooooooo";
                        goto frame_exception_exit_1;
                    }
                    assert( var_platform == NULL );
                    var_platform = tmp_assign_source_52;
                }
                branch_end_11:;
            }
            goto branch_end_6;
            branch_no_6:;
            {
                nuitka_bool tmp_condition_result_12;
                PyObject *tmp_compexpr_left_8;
                PyObject *tmp_compexpr_right_8;
                CHECK_OBJECT( var_system );
                tmp_compexpr_left_8 = var_system;
                tmp_compexpr_right_8 = const_str_plain_Java;
                tmp_res = RICH_COMPARE_BOOL_EQ_OBJECT_OBJECT( tmp_compexpr_left_8, tmp_compexpr_right_8 );
                if ( tmp_res == -1 )
                {
                    assert( ERROR_OCCURRED() );

                    FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                    exception_lineno = 1394;
                    type_description_1 = "ooooooooooooooooooooooooooo";
                    goto frame_exception_exit_1;
                }
                tmp_condition_result_12 = ( tmp_res != 0 ) ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
                if ( tmp_condition_result_12 == NUITKA_BOOL_TRUE )
                {
                    goto branch_yes_12;
                }
                else
                {
                    goto branch_no_12;
                }
                branch_yes_12:;
                // Tried code:
                {
                    PyObject *tmp_assign_source_53;
                    PyObject *tmp_iter_arg_6;
                    PyObject *tmp_called_name_15;
                    PyObject *tmp_mvar_value_15;
                    tmp_mvar_value_15 = GET_STRING_DICT_VALUE( moduledict_platform, (Nuitka_StringObject *)const_str_plain_java_ver );

                    if (unlikely( tmp_mvar_value_15 == NULL ))
                    {
                        tmp_mvar_value_15 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_java_ver );
                    }

                    if ( tmp_mvar_value_15 == NULL )
                    {

                        exception_type = PyExc_NameError;
                        Py_INCREF( exception_type );
                        exception_value = PyUnicode_FromFormat( "name '%s' is not defined", "java_ver" );
                        exception_tb = NULL;
                        NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
                        CHAIN_EXCEPTION( exception_value );

                        exception_lineno = 1396;
                        type_description_1 = "ooooooooooooooooooooooooooo";
                        goto try_except_handler_16;
                    }

                    tmp_called_name_15 = tmp_mvar_value_15;
                    frame_0d3a22fe3694b8da215ae5e33a50d7cb->m_frame.f_lineno = 1396;
                    tmp_iter_arg_6 = CALL_FUNCTION_NO_ARGS( tmp_called_name_15 );
                    if ( tmp_iter_arg_6 == NULL )
                    {
                        assert( ERROR_OCCURRED() );

                        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                        exception_lineno = 1396;
                        type_description_1 = "ooooooooooooooooooooooooooo";
                        goto try_except_handler_16;
                    }
                    tmp_assign_source_53 = MAKE_UNPACK_ITERATOR( tmp_iter_arg_6 );
                    Py_DECREF( tmp_iter_arg_6 );
                    if ( tmp_assign_source_53 == NULL )
                    {
                        assert( ERROR_OCCURRED() );

                        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                        exception_lineno = 1396;
                        type_description_1 = "ooooooooooooooooooooooooooo";
                        goto try_except_handler_16;
                    }
                    assert( tmp_tuple_unpack_6__source_iter == NULL );
                    tmp_tuple_unpack_6__source_iter = tmp_assign_source_53;
                }
                // Tried code:
                {
                    PyObject *tmp_assign_source_54;
                    PyObject *tmp_unpack_19;
                    CHECK_OBJECT( tmp_tuple_unpack_6__source_iter );
                    tmp_unpack_19 = tmp_tuple_unpack_6__source_iter;
                    tmp_assign_source_54 = UNPACK_NEXT( tmp_unpack_19, 0, 4 );
                    if ( tmp_assign_source_54 == NULL )
                    {
                        if ( !ERROR_OCCURRED() )
                        {
                            exception_type = PyExc_StopIteration;
                            Py_INCREF( exception_type );
                            exception_value = NULL;
                            exception_tb = NULL;
                        }
                        else
                        {
                            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
                        }


                        type_description_1 = "ooooooooooooooooooooooooooo";
                        exception_lineno = 1396;
                        goto try_except_handler_17;
                    }
                    assert( tmp_tuple_unpack_6__element_1 == NULL );
                    tmp_tuple_unpack_6__element_1 = tmp_assign_source_54;
                }
                {
                    PyObject *tmp_assign_source_55;
                    PyObject *tmp_unpack_20;
                    CHECK_OBJECT( tmp_tuple_unpack_6__source_iter );
                    tmp_unpack_20 = tmp_tuple_unpack_6__source_iter;
                    tmp_assign_source_55 = UNPACK_NEXT( tmp_unpack_20, 1, 4 );
                    if ( tmp_assign_source_55 == NULL )
                    {
                        if ( !ERROR_OCCURRED() )
                        {
                            exception_type = PyExc_StopIteration;
                            Py_INCREF( exception_type );
                            exception_value = NULL;
                            exception_tb = NULL;
                        }
                        else
                        {
                            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
                        }


                        type_description_1 = "ooooooooooooooooooooooooooo";
                        exception_lineno = 1396;
                        goto try_except_handler_17;
                    }
                    assert( tmp_tuple_unpack_6__element_2 == NULL );
                    tmp_tuple_unpack_6__element_2 = tmp_assign_source_55;
                }
                {
                    PyObject *tmp_assign_source_56;
                    PyObject *tmp_unpack_21;
                    CHECK_OBJECT( tmp_tuple_unpack_6__source_iter );
                    tmp_unpack_21 = tmp_tuple_unpack_6__source_iter;
                    tmp_assign_source_56 = UNPACK_NEXT( tmp_unpack_21, 2, 4 );
                    if ( tmp_assign_source_56 == NULL )
                    {
                        if ( !ERROR_OCCURRED() )
                        {
                            exception_type = PyExc_StopIteration;
                            Py_INCREF( exception_type );
                            exception_value = NULL;
                            exception_tb = NULL;
                        }
                        else
                        {
                            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
                        }


                        type_description_1 = "ooooooooooooooooooooooooooo";
                        exception_lineno = 1396;
                        goto try_except_handler_17;
                    }
                    assert( tmp_tuple_unpack_6__element_3 == NULL );
                    tmp_tuple_unpack_6__element_3 = tmp_assign_source_56;
                }
                {
                    PyObject *tmp_assign_source_57;
                    PyObject *tmp_unpack_22;
                    CHECK_OBJECT( tmp_tuple_unpack_6__source_iter );
                    tmp_unpack_22 = tmp_tuple_unpack_6__source_iter;
                    tmp_assign_source_57 = UNPACK_NEXT( tmp_unpack_22, 3, 4 );
                    if ( tmp_assign_source_57 == NULL )
                    {
                        if ( !ERROR_OCCURRED() )
                        {
                            exception_type = PyExc_StopIteration;
                            Py_INCREF( exception_type );
                            exception_value = NULL;
                            exception_tb = NULL;
                        }
                        else
                        {
                            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
                        }


                        type_description_1 = "ooooooooooooooooooooooooooo";
                        exception_lineno = 1396;
                        goto try_except_handler_17;
                    }
                    assert( tmp_tuple_unpack_6__element_4 == NULL );
                    tmp_tuple_unpack_6__element_4 = tmp_assign_source_57;
                }
                {
                    PyObject *tmp_iterator_name_6;
                    CHECK_OBJECT( tmp_tuple_unpack_6__source_iter );
                    tmp_iterator_name_6 = tmp_tuple_unpack_6__source_iter;
                    // Check if iterator has left-over elements.
                    CHECK_OBJECT( tmp_iterator_name_6 ); assert( HAS_ITERNEXT( tmp_iterator_name_6 ) );

                    tmp_iterator_attempt = (*Py_TYPE( tmp_iterator_name_6 )->tp_iternext)( tmp_iterator_name_6 );

                    if (likely( tmp_iterator_attempt == NULL ))
                    {
                        PyObject *error = GET_ERROR_OCCURRED();

                        if ( error != NULL )
                        {
                            if ( EXCEPTION_MATCH_BOOL_SINGLE( error, PyExc_StopIteration ))
                            {
                                CLEAR_ERROR_OCCURRED();
                            }
                            else
                            {
                                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );

                                type_description_1 = "ooooooooooooooooooooooooooo";
                                exception_lineno = 1396;
                                goto try_except_handler_17;
                            }
                        }
                    }
                    else
                    {
                        Py_DECREF( tmp_iterator_attempt );

                        // TODO: Could avoid PyErr_Format.
#if PYTHON_VERSION < 300
                        PyErr_Format( PyExc_ValueError, "too many values to unpack" );
#else
                        PyErr_Format( PyExc_ValueError, "too many values to unpack (expected 4)" );
#endif
                        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );

                        type_description_1 = "ooooooooooooooooooooooooooo";
                        exception_lineno = 1396;
                        goto try_except_handler_17;
                    }
                }
                goto try_end_15;
                // Exception handler code:
                try_except_handler_17:;
                exception_keeper_type_15 = exception_type;
                exception_keeper_value_15 = exception_value;
                exception_keeper_tb_15 = exception_tb;
                exception_keeper_lineno_15 = exception_lineno;
                exception_type = NULL;
                exception_value = NULL;
                exception_tb = NULL;
                exception_lineno = 0;

                CHECK_OBJECT( (PyObject *)tmp_tuple_unpack_6__source_iter );
                Py_DECREF( tmp_tuple_unpack_6__source_iter );
                tmp_tuple_unpack_6__source_iter = NULL;

                // Re-raise.
                exception_type = exception_keeper_type_15;
                exception_value = exception_keeper_value_15;
                exception_tb = exception_keeper_tb_15;
                exception_lineno = exception_keeper_lineno_15;

                goto try_except_handler_16;
                // End of try:
                try_end_15:;
                CHECK_OBJECT( (PyObject *)tmp_tuple_unpack_6__source_iter );
                Py_DECREF( tmp_tuple_unpack_6__source_iter );
                tmp_tuple_unpack_6__source_iter = NULL;

                {
                    PyObject *tmp_assign_source_58;
                    CHECK_OBJECT( tmp_tuple_unpack_6__element_1 );
                    tmp_assign_source_58 = tmp_tuple_unpack_6__element_1;
                    assert( var_r == NULL );
                    Py_INCREF( tmp_assign_source_58 );
                    var_r = tmp_assign_source_58;
                }
                Py_XDECREF( tmp_tuple_unpack_6__element_1 );
                tmp_tuple_unpack_6__element_1 = NULL;

                {
                    PyObject *tmp_assign_source_59;
                    CHECK_OBJECT( tmp_tuple_unpack_6__element_2 );
                    tmp_assign_source_59 = tmp_tuple_unpack_6__element_2;
                    assert( var_v == NULL );
                    Py_INCREF( tmp_assign_source_59 );
                    var_v = tmp_assign_source_59;
                }
                Py_XDECREF( tmp_tuple_unpack_6__element_2 );
                tmp_tuple_unpack_6__element_2 = NULL;

                {
                    PyObject *tmp_assign_source_60;
                    CHECK_OBJECT( tmp_tuple_unpack_6__element_3 );
                    tmp_assign_source_60 = tmp_tuple_unpack_6__element_3;
                    assert( var_vminfo == NULL );
                    Py_INCREF( tmp_assign_source_60 );
                    var_vminfo = tmp_assign_source_60;
                }
                Py_XDECREF( tmp_tuple_unpack_6__element_3 );
                tmp_tuple_unpack_6__element_3 = NULL;

                // Tried code:
                {
                    PyObject *tmp_assign_source_61;
                    PyObject *tmp_iter_arg_7;
                    CHECK_OBJECT( tmp_tuple_unpack_6__element_4 );
                    tmp_iter_arg_7 = tmp_tuple_unpack_6__element_4;
                    tmp_assign_source_61 = MAKE_UNPACK_ITERATOR( tmp_iter_arg_7 );
                    if ( tmp_assign_source_61 == NULL )
                    {
                        assert( ERROR_OCCURRED() );

                        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                        exception_lineno = 1396;
                        type_description_1 = "ooooooooooooooooooooooooooo";
                        goto try_except_handler_18;
                    }
                    assert( tmp_tuple_unpack_7__source_iter == NULL );
                    tmp_tuple_unpack_7__source_iter = tmp_assign_source_61;
                }
                // Tried code:
                {
                    PyObject *tmp_assign_source_62;
                    PyObject *tmp_unpack_23;
                    CHECK_OBJECT( tmp_tuple_unpack_7__source_iter );
                    tmp_unpack_23 = tmp_tuple_unpack_7__source_iter;
                    tmp_assign_source_62 = UNPACK_NEXT( tmp_unpack_23, 0, 3 );
                    if ( tmp_assign_source_62 == NULL )
                    {
                        if ( !ERROR_OCCURRED() )
                        {
                            exception_type = PyExc_StopIteration;
                            Py_INCREF( exception_type );
                            exception_value = NULL;
                            exception_tb = NULL;
                        }
                        else
                        {
                            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
                        }


                        type_description_1 = "ooooooooooooooooooooooooooo";
                        exception_lineno = 1396;
                        goto try_except_handler_19;
                    }
                    assert( tmp_tuple_unpack_7__element_1 == NULL );
                    tmp_tuple_unpack_7__element_1 = tmp_assign_source_62;
                }
                {
                    PyObject *tmp_assign_source_63;
                    PyObject *tmp_unpack_24;
                    CHECK_OBJECT( tmp_tuple_unpack_7__source_iter );
                    tmp_unpack_24 = tmp_tuple_unpack_7__source_iter;
                    tmp_assign_source_63 = UNPACK_NEXT( tmp_unpack_24, 1, 3 );
                    if ( tmp_assign_source_63 == NULL )
                    {
                        if ( !ERROR_OCCURRED() )
                        {
                            exception_type = PyExc_StopIteration;
                            Py_INCREF( exception_type );
                            exception_value = NULL;
                            exception_tb = NULL;
                        }
                        else
                        {
                            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
                        }


                        type_description_1 = "ooooooooooooooooooooooooooo";
                        exception_lineno = 1396;
                        goto try_except_handler_19;
                    }
                    assert( tmp_tuple_unpack_7__element_2 == NULL );
                    tmp_tuple_unpack_7__element_2 = tmp_assign_source_63;
                }
                {
                    PyObject *tmp_assign_source_64;
                    PyObject *tmp_unpack_25;
                    CHECK_OBJECT( tmp_tuple_unpack_7__source_iter );
                    tmp_unpack_25 = tmp_tuple_unpack_7__source_iter;
                    tmp_assign_source_64 = UNPACK_NEXT( tmp_unpack_25, 2, 3 );
                    if ( tmp_assign_source_64 == NULL )
                    {
                        if ( !ERROR_OCCURRED() )
                        {
                            exception_type = PyExc_StopIteration;
                            Py_INCREF( exception_type );
                            exception_value = NULL;
                            exception_tb = NULL;
                        }
                        else
                        {
                            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
                        }


                        type_description_1 = "ooooooooooooooooooooooooooo";
                        exception_lineno = 1396;
                        goto try_except_handler_19;
                    }
                    assert( tmp_tuple_unpack_7__element_3 == NULL );
                    tmp_tuple_unpack_7__element_3 = tmp_assign_source_64;
                }
                {
                    PyObject *tmp_iterator_name_7;
                    CHECK_OBJECT( tmp_tuple_unpack_7__source_iter );
                    tmp_iterator_name_7 = tmp_tuple_unpack_7__source_iter;
                    // Check if iterator has left-over elements.
                    CHECK_OBJECT( tmp_iterator_name_7 ); assert( HAS_ITERNEXT( tmp_iterator_name_7 ) );

                    tmp_iterator_attempt = (*Py_TYPE( tmp_iterator_name_7 )->tp_iternext)( tmp_iterator_name_7 );

                    if (likely( tmp_iterator_attempt == NULL ))
                    {
                        PyObject *error = GET_ERROR_OCCURRED();

                        if ( error != NULL )
                        {
                            if ( EXCEPTION_MATCH_BOOL_SINGLE( error, PyExc_StopIteration ))
                            {
                                CLEAR_ERROR_OCCURRED();
                            }
                            else
                            {
                                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );

                                type_description_1 = "ooooooooooooooooooooooooooo";
                                exception_lineno = 1396;
                                goto try_except_handler_19;
                            }
                        }
                    }
                    else
                    {
                        Py_DECREF( tmp_iterator_attempt );

                        // TODO: Could avoid PyErr_Format.
#if PYTHON_VERSION < 300
                        PyErr_Format( PyExc_ValueError, "too many values to unpack" );
#else
                        PyErr_Format( PyExc_ValueError, "too many values to unpack (expected 3)" );
#endif
                        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );

                        type_description_1 = "ooooooooooooooooooooooooooo";
                        exception_lineno = 1396;
                        goto try_except_handler_19;
                    }
                }
                goto try_end_16;
                // Exception handler code:
                try_except_handler_19:;
                exception_keeper_type_16 = exception_type;
                exception_keeper_value_16 = exception_value;
                exception_keeper_tb_16 = exception_tb;
                exception_keeper_lineno_16 = exception_lineno;
                exception_type = NULL;
                exception_value = NULL;
                exception_tb = NULL;
                exception_lineno = 0;

                CHECK_OBJECT( (PyObject *)tmp_tuple_unpack_7__source_iter );
                Py_DECREF( tmp_tuple_unpack_7__source_iter );
                tmp_tuple_unpack_7__source_iter = NULL;

                // Re-raise.
                exception_type = exception_keeper_type_16;
                exception_value = exception_keeper_value_16;
                exception_tb = exception_keeper_tb_16;
                exception_lineno = exception_keeper_lineno_16;

                goto try_except_handler_18;
                // End of try:
                try_end_16:;
                goto try_end_17;
                // Exception handler code:
                try_except_handler_18:;
                exception_keeper_type_17 = exception_type;
                exception_keeper_value_17 = exception_value;
                exception_keeper_tb_17 = exception_tb;
                exception_keeper_lineno_17 = exception_lineno;
                exception_type = NULL;
                exception_value = NULL;
                exception_tb = NULL;
                exception_lineno = 0;

                Py_XDECREF( tmp_tuple_unpack_7__element_1 );
                tmp_tuple_unpack_7__element_1 = NULL;

                Py_XDECREF( tmp_tuple_unpack_7__element_2 );
                tmp_tuple_unpack_7__element_2 = NULL;

                Py_XDECREF( tmp_tuple_unpack_7__element_3 );
                tmp_tuple_unpack_7__element_3 = NULL;

                // Re-raise.
                exception_type = exception_keeper_type_17;
                exception_value = exception_keeper_value_17;
                exception_tb = exception_keeper_tb_17;
                exception_lineno = exception_keeper_lineno_17;

                goto try_except_handler_16;
                // End of try:
                try_end_17:;
                goto try_end_18;
                // Exception handler code:
                try_except_handler_16:;
                exception_keeper_type_18 = exception_type;
                exception_keeper_value_18 = exception_value;
                exception_keeper_tb_18 = exception_tb;
                exception_keeper_lineno_18 = exception_lineno;
                exception_type = NULL;
                exception_value = NULL;
                exception_tb = NULL;
                exception_lineno = 0;

                Py_XDECREF( tmp_tuple_unpack_6__element_1 );
                tmp_tuple_unpack_6__element_1 = NULL;

                Py_XDECREF( tmp_tuple_unpack_6__element_2 );
                tmp_tuple_unpack_6__element_2 = NULL;

                Py_XDECREF( tmp_tuple_unpack_6__element_3 );
                tmp_tuple_unpack_6__element_3 = NULL;

                Py_XDECREF( tmp_tuple_unpack_6__element_4 );
                tmp_tuple_unpack_6__element_4 = NULL;

                // Re-raise.
                exception_type = exception_keeper_type_18;
                exception_value = exception_keeper_value_18;
                exception_tb = exception_keeper_tb_18;
                exception_lineno = exception_keeper_lineno_18;

                goto frame_exception_exit_1;
                // End of try:
                try_end_18:;
                CHECK_OBJECT( (PyObject *)tmp_tuple_unpack_7__source_iter );
                Py_DECREF( tmp_tuple_unpack_7__source_iter );
                tmp_tuple_unpack_7__source_iter = NULL;

                {
                    PyObject *tmp_assign_source_65;
                    CHECK_OBJECT( tmp_tuple_unpack_7__element_1 );
                    tmp_assign_source_65 = tmp_tuple_unpack_7__element_1;
                    assert( var_os_name == NULL );
                    Py_INCREF( tmp_assign_source_65 );
                    var_os_name = tmp_assign_source_65;
                }
                Py_XDECREF( tmp_tuple_unpack_7__element_1 );
                tmp_tuple_unpack_7__element_1 = NULL;

                {
                    PyObject *tmp_assign_source_66;
                    CHECK_OBJECT( tmp_tuple_unpack_7__element_2 );
                    tmp_assign_source_66 = tmp_tuple_unpack_7__element_2;
                    assert( var_os_version == NULL );
                    Py_INCREF( tmp_assign_source_66 );
                    var_os_version = tmp_assign_source_66;
                }
                Py_XDECREF( tmp_tuple_unpack_7__element_2 );
                tmp_tuple_unpack_7__element_2 = NULL;

                {
                    PyObject *tmp_assign_source_67;
                    CHECK_OBJECT( tmp_tuple_unpack_7__element_3 );
                    tmp_assign_source_67 = tmp_tuple_unpack_7__element_3;
                    assert( var_os_arch == NULL );
                    Py_INCREF( tmp_assign_source_67 );
                    var_os_arch = tmp_assign_source_67;
                }
                Py_XDECREF( tmp_tuple_unpack_7__element_3 );
                tmp_tuple_unpack_7__element_3 = NULL;

                Py_XDECREF( tmp_tuple_unpack_6__element_4 );
                tmp_tuple_unpack_6__element_4 = NULL;

                {
                    nuitka_bool tmp_condition_result_13;
                    int tmp_or_left_truth_1;
                    nuitka_bool tmp_or_left_value_1;
                    nuitka_bool tmp_or_right_value_1;
                    int tmp_truth_name_4;
                    PyObject *tmp_operand_name_3;
                    CHECK_OBJECT( par_terse );
                    tmp_truth_name_4 = CHECK_IF_TRUE( par_terse );
                    if ( tmp_truth_name_4 == -1 )
                    {
                        assert( ERROR_OCCURRED() );

                        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                        exception_lineno = 1397;
                        type_description_1 = "ooooooooooooooooooooooooooo";
                        goto frame_exception_exit_1;
                    }
                    tmp_or_left_value_1 = tmp_truth_name_4 == 1 ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
                    tmp_or_left_truth_1 = tmp_or_left_value_1 == NUITKA_BOOL_TRUE ? 1 : 0;
                    if ( tmp_or_left_truth_1 == 1 )
                    {
                        goto or_left_1;
                    }
                    else
                    {
                        goto or_right_1;
                    }
                    or_right_1:;
                    CHECK_OBJECT( var_os_name );
                    tmp_operand_name_3 = var_os_name;
                    tmp_res = CHECK_IF_TRUE( tmp_operand_name_3 );
                    if ( tmp_res == -1 )
                    {
                        assert( ERROR_OCCURRED() );

                        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                        exception_lineno = 1397;
                        type_description_1 = "ooooooooooooooooooooooooooo";
                        goto frame_exception_exit_1;
                    }
                    tmp_or_right_value_1 = ( tmp_res == 0 ) ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
                    tmp_condition_result_13 = tmp_or_right_value_1;
                    goto or_end_1;
                    or_left_1:;
                    tmp_condition_result_13 = tmp_or_left_value_1;
                    or_end_1:;
                    if ( tmp_condition_result_13 == NUITKA_BOOL_TRUE )
                    {
                        goto branch_yes_13;
                    }
                    else
                    {
                        goto branch_no_13;
                    }
                    branch_yes_13:;
                    {
                        PyObject *tmp_assign_source_68;
                        PyObject *tmp_called_name_16;
                        PyObject *tmp_mvar_value_16;
                        PyObject *tmp_args_element_name_34;
                        PyObject *tmp_args_element_name_35;
                        PyObject *tmp_args_element_name_36;
                        tmp_mvar_value_16 = GET_STRING_DICT_VALUE( moduledict_platform, (Nuitka_StringObject *)const_str_plain__platform );

                        if (unlikely( tmp_mvar_value_16 == NULL ))
                        {
                            tmp_mvar_value_16 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain__platform );
                        }

                        if ( tmp_mvar_value_16 == NULL )
                        {

                            exception_type = PyExc_NameError;
                            Py_INCREF( exception_type );
                            exception_value = PyUnicode_FromFormat( "name '%s' is not defined", "_platform" );
                            exception_tb = NULL;
                            NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
                            CHAIN_EXCEPTION( exception_value );

                            exception_lineno = 1398;
                            type_description_1 = "ooooooooooooooooooooooooooo";
                            goto frame_exception_exit_1;
                        }

                        tmp_called_name_16 = tmp_mvar_value_16;
                        CHECK_OBJECT( var_system );
                        tmp_args_element_name_34 = var_system;
                        CHECK_OBJECT( var_release );
                        tmp_args_element_name_35 = var_release;
                        CHECK_OBJECT( var_version );
                        tmp_args_element_name_36 = var_version;
                        frame_0d3a22fe3694b8da215ae5e33a50d7cb->m_frame.f_lineno = 1398;
                        {
                            PyObject *call_args[] = { tmp_args_element_name_34, tmp_args_element_name_35, tmp_args_element_name_36 };
                            tmp_assign_source_68 = CALL_FUNCTION_WITH_ARGS3( tmp_called_name_16, call_args );
                        }

                        if ( tmp_assign_source_68 == NULL )
                        {
                            assert( ERROR_OCCURRED() );

                            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                            exception_lineno = 1398;
                            type_description_1 = "ooooooooooooooooooooooooooo";
                            goto frame_exception_exit_1;
                        }
                        assert( var_platform == NULL );
                        var_platform = tmp_assign_source_68;
                    }
                    goto branch_end_13;
                    branch_no_13:;
                    {
                        PyObject *tmp_assign_source_69;
                        PyObject *tmp_called_name_17;
                        PyObject *tmp_mvar_value_17;
                        PyObject *tmp_args_element_name_37;
                        PyObject *tmp_args_element_name_38;
                        PyObject *tmp_args_element_name_39;
                        PyObject *tmp_args_element_name_40;
                        PyObject *tmp_args_element_name_41;
                        PyObject *tmp_args_element_name_42;
                        PyObject *tmp_args_element_name_43;
                        tmp_mvar_value_17 = GET_STRING_DICT_VALUE( moduledict_platform, (Nuitka_StringObject *)const_str_plain__platform );

                        if (unlikely( tmp_mvar_value_17 == NULL ))
                        {
                            tmp_mvar_value_17 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain__platform );
                        }

                        if ( tmp_mvar_value_17 == NULL )
                        {

                            exception_type = PyExc_NameError;
                            Py_INCREF( exception_type );
                            exception_value = PyUnicode_FromFormat( "name '%s' is not defined", "_platform" );
                            exception_tb = NULL;
                            NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
                            CHAIN_EXCEPTION( exception_value );

                            exception_lineno = 1400;
                            type_description_1 = "ooooooooooooooooooooooooooo";
                            goto frame_exception_exit_1;
                        }

                        tmp_called_name_17 = tmp_mvar_value_17;
                        CHECK_OBJECT( var_system );
                        tmp_args_element_name_37 = var_system;
                        CHECK_OBJECT( var_release );
                        tmp_args_element_name_38 = var_release;
                        CHECK_OBJECT( var_version );
                        tmp_args_element_name_39 = var_version;
                        tmp_args_element_name_40 = const_str_plain_on;
                        CHECK_OBJECT( var_os_name );
                        tmp_args_element_name_41 = var_os_name;
                        CHECK_OBJECT( var_os_version );
                        tmp_args_element_name_42 = var_os_version;
                        CHECK_OBJECT( var_os_arch );
                        tmp_args_element_name_43 = var_os_arch;
                        frame_0d3a22fe3694b8da215ae5e33a50d7cb->m_frame.f_lineno = 1400;
                        {
                            PyObject *call_args[] = { tmp_args_element_name_37, tmp_args_element_name_38, tmp_args_element_name_39, tmp_args_element_name_40, tmp_args_element_name_41, tmp_args_element_name_42, tmp_args_element_name_43 };
                            tmp_assign_source_69 = CALL_FUNCTION_WITH_ARGS7( tmp_called_name_17, call_args );
                        }

                        if ( tmp_assign_source_69 == NULL )
                        {
                            assert( ERROR_OCCURRED() );

                            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                            exception_lineno = 1400;
                            type_description_1 = "ooooooooooooooooooooooooooo";
                            goto frame_exception_exit_1;
                        }
                        assert( var_platform == NULL );
                        var_platform = tmp_assign_source_69;
                    }
                    branch_end_13:;
                }
                goto branch_end_12;
                branch_no_12:;
                {
                    nuitka_bool tmp_condition_result_14;
                    PyObject *tmp_compexpr_left_9;
                    PyObject *tmp_compexpr_right_9;
                    CHECK_OBJECT( var_system );
                    tmp_compexpr_left_9 = var_system;
                    tmp_compexpr_right_9 = const_str_plain_MacOS;
                    tmp_res = RICH_COMPARE_BOOL_EQ_OBJECT_OBJECT( tmp_compexpr_left_9, tmp_compexpr_right_9 );
                    if ( tmp_res == -1 )
                    {
                        assert( ERROR_OCCURRED() );

                        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                        exception_lineno = 1404;
                        type_description_1 = "ooooooooooooooooooooooooooo";
                        goto frame_exception_exit_1;
                    }
                    tmp_condition_result_14 = ( tmp_res != 0 ) ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
                    if ( tmp_condition_result_14 == NUITKA_BOOL_TRUE )
                    {
                        goto branch_yes_14;
                    }
                    else
                    {
                        goto branch_no_14;
                    }
                    branch_yes_14:;
                    {
                        nuitka_bool tmp_condition_result_15;
                        int tmp_truth_name_5;
                        CHECK_OBJECT( par_terse );
                        tmp_truth_name_5 = CHECK_IF_TRUE( par_terse );
                        if ( tmp_truth_name_5 == -1 )
                        {
                            assert( ERROR_OCCURRED() );

                            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                            exception_lineno = 1406;
                            type_description_1 = "ooooooooooooooooooooooooooo";
                            goto frame_exception_exit_1;
                        }
                        tmp_condition_result_15 = tmp_truth_name_5 == 1 ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
                        if ( tmp_condition_result_15 == NUITKA_BOOL_TRUE )
                        {
                            goto branch_yes_15;
                        }
                        else
                        {
                            goto branch_no_15;
                        }
                        branch_yes_15:;
                        {
                            PyObject *tmp_assign_source_70;
                            PyObject *tmp_called_name_18;
                            PyObject *tmp_mvar_value_18;
                            PyObject *tmp_args_element_name_44;
                            PyObject *tmp_args_element_name_45;
                            tmp_mvar_value_18 = GET_STRING_DICT_VALUE( moduledict_platform, (Nuitka_StringObject *)const_str_plain__platform );

                            if (unlikely( tmp_mvar_value_18 == NULL ))
                            {
                                tmp_mvar_value_18 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain__platform );
                            }

                            if ( tmp_mvar_value_18 == NULL )
                            {

                                exception_type = PyExc_NameError;
                                Py_INCREF( exception_type );
                                exception_value = PyUnicode_FromFormat( "name '%s' is not defined", "_platform" );
                                exception_tb = NULL;
                                NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
                                CHAIN_EXCEPTION( exception_value );

                                exception_lineno = 1407;
                                type_description_1 = "ooooooooooooooooooooooooooo";
                                goto frame_exception_exit_1;
                            }

                            tmp_called_name_18 = tmp_mvar_value_18;
                            CHECK_OBJECT( var_system );
                            tmp_args_element_name_44 = var_system;
                            CHECK_OBJECT( var_release );
                            tmp_args_element_name_45 = var_release;
                            frame_0d3a22fe3694b8da215ae5e33a50d7cb->m_frame.f_lineno = 1407;
                            {
                                PyObject *call_args[] = { tmp_args_element_name_44, tmp_args_element_name_45 };
                                tmp_assign_source_70 = CALL_FUNCTION_WITH_ARGS2( tmp_called_name_18, call_args );
                            }

                            if ( tmp_assign_source_70 == NULL )
                            {
                                assert( ERROR_OCCURRED() );

                                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                                exception_lineno = 1407;
                                type_description_1 = "ooooooooooooooooooooooooooo";
                                goto frame_exception_exit_1;
                            }
                            assert( var_platform == NULL );
                            var_platform = tmp_assign_source_70;
                        }
                        goto branch_end_15;
                        branch_no_15:;
                        {
                            PyObject *tmp_assign_source_71;
                            PyObject *tmp_called_name_19;
                            PyObject *tmp_mvar_value_19;
                            PyObject *tmp_args_element_name_46;
                            PyObject *tmp_args_element_name_47;
                            PyObject *tmp_args_element_name_48;
                            tmp_mvar_value_19 = GET_STRING_DICT_VALUE( moduledict_platform, (Nuitka_StringObject *)const_str_plain__platform );

                            if (unlikely( tmp_mvar_value_19 == NULL ))
                            {
                                tmp_mvar_value_19 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain__platform );
                            }

                            if ( tmp_mvar_value_19 == NULL )
                            {

                                exception_type = PyExc_NameError;
                                Py_INCREF( exception_type );
                                exception_value = PyUnicode_FromFormat( "name '%s' is not defined", "_platform" );
                                exception_tb = NULL;
                                NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
                                CHAIN_EXCEPTION( exception_value );

                                exception_lineno = 1409;
                                type_description_1 = "ooooooooooooooooooooooooooo";
                                goto frame_exception_exit_1;
                            }

                            tmp_called_name_19 = tmp_mvar_value_19;
                            CHECK_OBJECT( var_system );
                            tmp_args_element_name_46 = var_system;
                            CHECK_OBJECT( var_release );
                            tmp_args_element_name_47 = var_release;
                            CHECK_OBJECT( var_machine );
                            tmp_args_element_name_48 = var_machine;
                            frame_0d3a22fe3694b8da215ae5e33a50d7cb->m_frame.f_lineno = 1409;
                            {
                                PyObject *call_args[] = { tmp_args_element_name_46, tmp_args_element_name_47, tmp_args_element_name_48 };
                                tmp_assign_source_71 = CALL_FUNCTION_WITH_ARGS3( tmp_called_name_19, call_args );
                            }

                            if ( tmp_assign_source_71 == NULL )
                            {
                                assert( ERROR_OCCURRED() );

                                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                                exception_lineno = 1409;
                                type_description_1 = "ooooooooooooooooooooooooooo";
                                goto frame_exception_exit_1;
                            }
                            assert( var_platform == NULL );
                            var_platform = tmp_assign_source_71;
                        }
                        branch_end_15:;
                    }
                    goto branch_end_14;
                    branch_no_14:;
                    {
                        nuitka_bool tmp_condition_result_16;
                        int tmp_truth_name_6;
                        CHECK_OBJECT( par_terse );
                        tmp_truth_name_6 = CHECK_IF_TRUE( par_terse );
                        if ( tmp_truth_name_6 == -1 )
                        {
                            assert( ERROR_OCCURRED() );

                            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                            exception_lineno = 1413;
                            type_description_1 = "ooooooooooooooooooooooooooo";
                            goto frame_exception_exit_1;
                        }
                        tmp_condition_result_16 = tmp_truth_name_6 == 1 ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
                        if ( tmp_condition_result_16 == NUITKA_BOOL_TRUE )
                        {
                            goto branch_yes_16;
                        }
                        else
                        {
                            goto branch_no_16;
                        }
                        branch_yes_16:;
                        {
                            PyObject *tmp_assign_source_72;
                            PyObject *tmp_called_name_20;
                            PyObject *tmp_mvar_value_20;
                            PyObject *tmp_args_element_name_49;
                            PyObject *tmp_args_element_name_50;
                            tmp_mvar_value_20 = GET_STRING_DICT_VALUE( moduledict_platform, (Nuitka_StringObject *)const_str_plain__platform );

                            if (unlikely( tmp_mvar_value_20 == NULL ))
                            {
                                tmp_mvar_value_20 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain__platform );
                            }

                            if ( tmp_mvar_value_20 == NULL )
                            {

                                exception_type = PyExc_NameError;
                                Py_INCREF( exception_type );
                                exception_value = PyUnicode_FromFormat( "name '%s' is not defined", "_platform" );
                                exception_tb = NULL;
                                NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
                                CHAIN_EXCEPTION( exception_value );

                                exception_lineno = 1414;
                                type_description_1 = "ooooooooooooooooooooooooooo";
                                goto frame_exception_exit_1;
                            }

                            tmp_called_name_20 = tmp_mvar_value_20;
                            CHECK_OBJECT( var_system );
                            tmp_args_element_name_49 = var_system;
                            CHECK_OBJECT( var_release );
                            tmp_args_element_name_50 = var_release;
                            frame_0d3a22fe3694b8da215ae5e33a50d7cb->m_frame.f_lineno = 1414;
                            {
                                PyObject *call_args[] = { tmp_args_element_name_49, tmp_args_element_name_50 };
                                tmp_assign_source_72 = CALL_FUNCTION_WITH_ARGS2( tmp_called_name_20, call_args );
                            }

                            if ( tmp_assign_source_72 == NULL )
                            {
                                assert( ERROR_OCCURRED() );

                                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                                exception_lineno = 1414;
                                type_description_1 = "ooooooooooooooooooooooooooo";
                                goto frame_exception_exit_1;
                            }
                            assert( var_platform == NULL );
                            var_platform = tmp_assign_source_72;
                        }
                        goto branch_end_16;
                        branch_no_16:;
                        // Tried code:
                        {
                            PyObject *tmp_assign_source_73;
                            PyObject *tmp_iter_arg_8;
                            PyObject *tmp_called_name_21;
                            PyObject *tmp_mvar_value_21;
                            PyObject *tmp_args_element_name_51;
                            PyObject *tmp_source_name_5;
                            PyObject *tmp_mvar_value_22;
                            tmp_mvar_value_21 = GET_STRING_DICT_VALUE( moduledict_platform, (Nuitka_StringObject *)const_str_plain_architecture );

                            if (unlikely( tmp_mvar_value_21 == NULL ))
                            {
                                tmp_mvar_value_21 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_architecture );
                            }

                            if ( tmp_mvar_value_21 == NULL )
                            {

                                exception_type = PyExc_NameError;
                                Py_INCREF( exception_type );
                                exception_value = PyUnicode_FromFormat( "name '%s' is not defined", "architecture" );
                                exception_tb = NULL;
                                NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
                                CHAIN_EXCEPTION( exception_value );

                                exception_lineno = 1416;
                                type_description_1 = "ooooooooooooooooooooooooooo";
                                goto try_except_handler_20;
                            }

                            tmp_called_name_21 = tmp_mvar_value_21;
                            tmp_mvar_value_22 = GET_STRING_DICT_VALUE( moduledict_platform, (Nuitka_StringObject *)const_str_plain_sys );

                            if (unlikely( tmp_mvar_value_22 == NULL ))
                            {
                                tmp_mvar_value_22 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_sys );
                            }

                            if ( tmp_mvar_value_22 == NULL )
                            {

                                exception_type = PyExc_NameError;
                                Py_INCREF( exception_type );
                                exception_value = PyUnicode_FromFormat( "name '%s' is not defined", "sys" );
                                exception_tb = NULL;
                                NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
                                CHAIN_EXCEPTION( exception_value );

                                exception_lineno = 1416;
                                type_description_1 = "ooooooooooooooooooooooooooo";
                                goto try_except_handler_20;
                            }

                            tmp_source_name_5 = tmp_mvar_value_22;
                            tmp_args_element_name_51 = LOOKUP_ATTRIBUTE( tmp_source_name_5, const_str_plain_executable );
                            if ( tmp_args_element_name_51 == NULL )
                            {
                                assert( ERROR_OCCURRED() );

                                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                                exception_lineno = 1416;
                                type_description_1 = "ooooooooooooooooooooooooooo";
                                goto try_except_handler_20;
                            }
                            frame_0d3a22fe3694b8da215ae5e33a50d7cb->m_frame.f_lineno = 1416;
                            {
                                PyObject *call_args[] = { tmp_args_element_name_51 };
                                tmp_iter_arg_8 = CALL_FUNCTION_WITH_ARGS1( tmp_called_name_21, call_args );
                            }

                            Py_DECREF( tmp_args_element_name_51 );
                            if ( tmp_iter_arg_8 == NULL )
                            {
                                assert( ERROR_OCCURRED() );

                                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                                exception_lineno = 1416;
                                type_description_1 = "ooooooooooooooooooooooooooo";
                                goto try_except_handler_20;
                            }
                            tmp_assign_source_73 = MAKE_UNPACK_ITERATOR( tmp_iter_arg_8 );
                            Py_DECREF( tmp_iter_arg_8 );
                            if ( tmp_assign_source_73 == NULL )
                            {
                                assert( ERROR_OCCURRED() );

                                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                                exception_lineno = 1416;
                                type_description_1 = "ooooooooooooooooooooooooooo";
                                goto try_except_handler_20;
                            }
                            assert( tmp_tuple_unpack_8__source_iter == NULL );
                            tmp_tuple_unpack_8__source_iter = tmp_assign_source_73;
                        }
                        // Tried code:
                        {
                            PyObject *tmp_assign_source_74;
                            PyObject *tmp_unpack_26;
                            CHECK_OBJECT( tmp_tuple_unpack_8__source_iter );
                            tmp_unpack_26 = tmp_tuple_unpack_8__source_iter;
                            tmp_assign_source_74 = UNPACK_NEXT( tmp_unpack_26, 0, 2 );
                            if ( tmp_assign_source_74 == NULL )
                            {
                                if ( !ERROR_OCCURRED() )
                                {
                                    exception_type = PyExc_StopIteration;
                                    Py_INCREF( exception_type );
                                    exception_value = NULL;
                                    exception_tb = NULL;
                                }
                                else
                                {
                                    FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
                                }


                                type_description_1 = "ooooooooooooooooooooooooooo";
                                exception_lineno = 1416;
                                goto try_except_handler_21;
                            }
                            assert( tmp_tuple_unpack_8__element_1 == NULL );
                            tmp_tuple_unpack_8__element_1 = tmp_assign_source_74;
                        }
                        {
                            PyObject *tmp_assign_source_75;
                            PyObject *tmp_unpack_27;
                            CHECK_OBJECT( tmp_tuple_unpack_8__source_iter );
                            tmp_unpack_27 = tmp_tuple_unpack_8__source_iter;
                            tmp_assign_source_75 = UNPACK_NEXT( tmp_unpack_27, 1, 2 );
                            if ( tmp_assign_source_75 == NULL )
                            {
                                if ( !ERROR_OCCURRED() )
                                {
                                    exception_type = PyExc_StopIteration;
                                    Py_INCREF( exception_type );
                                    exception_value = NULL;
                                    exception_tb = NULL;
                                }
                                else
                                {
                                    FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
                                }


                                type_description_1 = "ooooooooooooooooooooooooooo";
                                exception_lineno = 1416;
                                goto try_except_handler_21;
                            }
                            assert( tmp_tuple_unpack_8__element_2 == NULL );
                            tmp_tuple_unpack_8__element_2 = tmp_assign_source_75;
                        }
                        {
                            PyObject *tmp_iterator_name_8;
                            CHECK_OBJECT( tmp_tuple_unpack_8__source_iter );
                            tmp_iterator_name_8 = tmp_tuple_unpack_8__source_iter;
                            // Check if iterator has left-over elements.
                            CHECK_OBJECT( tmp_iterator_name_8 ); assert( HAS_ITERNEXT( tmp_iterator_name_8 ) );

                            tmp_iterator_attempt = (*Py_TYPE( tmp_iterator_name_8 )->tp_iternext)( tmp_iterator_name_8 );

                            if (likely( tmp_iterator_attempt == NULL ))
                            {
                                PyObject *error = GET_ERROR_OCCURRED();

                                if ( error != NULL )
                                {
                                    if ( EXCEPTION_MATCH_BOOL_SINGLE( error, PyExc_StopIteration ))
                                    {
                                        CLEAR_ERROR_OCCURRED();
                                    }
                                    else
                                    {
                                        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );

                                        type_description_1 = "ooooooooooooooooooooooooooo";
                                        exception_lineno = 1416;
                                        goto try_except_handler_21;
                                    }
                                }
                            }
                            else
                            {
                                Py_DECREF( tmp_iterator_attempt );

                                // TODO: Could avoid PyErr_Format.
#if PYTHON_VERSION < 300
                                PyErr_Format( PyExc_ValueError, "too many values to unpack" );
#else
                                PyErr_Format( PyExc_ValueError, "too many values to unpack (expected 2)" );
#endif
                                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );

                                type_description_1 = "ooooooooooooooooooooooooooo";
                                exception_lineno = 1416;
                                goto try_except_handler_21;
                            }
                        }
                        goto try_end_19;
                        // Exception handler code:
                        try_except_handler_21:;
                        exception_keeper_type_19 = exception_type;
                        exception_keeper_value_19 = exception_value;
                        exception_keeper_tb_19 = exception_tb;
                        exception_keeper_lineno_19 = exception_lineno;
                        exception_type = NULL;
                        exception_value = NULL;
                        exception_tb = NULL;
                        exception_lineno = 0;

                        CHECK_OBJECT( (PyObject *)tmp_tuple_unpack_8__source_iter );
                        Py_DECREF( tmp_tuple_unpack_8__source_iter );
                        tmp_tuple_unpack_8__source_iter = NULL;

                        // Re-raise.
                        exception_type = exception_keeper_type_19;
                        exception_value = exception_keeper_value_19;
                        exception_tb = exception_keeper_tb_19;
                        exception_lineno = exception_keeper_lineno_19;

                        goto try_except_handler_20;
                        // End of try:
                        try_end_19:;
                        goto try_end_20;
                        // Exception handler code:
                        try_except_handler_20:;
                        exception_keeper_type_20 = exception_type;
                        exception_keeper_value_20 = exception_value;
                        exception_keeper_tb_20 = exception_tb;
                        exception_keeper_lineno_20 = exception_lineno;
                        exception_type = NULL;
                        exception_value = NULL;
                        exception_tb = NULL;
                        exception_lineno = 0;

                        Py_XDECREF( tmp_tuple_unpack_8__element_1 );
                        tmp_tuple_unpack_8__element_1 = NULL;

                        Py_XDECREF( tmp_tuple_unpack_8__element_2 );
                        tmp_tuple_unpack_8__element_2 = NULL;

                        // Re-raise.
                        exception_type = exception_keeper_type_20;
                        exception_value = exception_keeper_value_20;
                        exception_tb = exception_keeper_tb_20;
                        exception_lineno = exception_keeper_lineno_20;

                        goto frame_exception_exit_1;
                        // End of try:
                        try_end_20:;
                        CHECK_OBJECT( (PyObject *)tmp_tuple_unpack_8__source_iter );
                        Py_DECREF( tmp_tuple_unpack_8__source_iter );
                        tmp_tuple_unpack_8__source_iter = NULL;

                        {
                            PyObject *tmp_assign_source_76;
                            CHECK_OBJECT( tmp_tuple_unpack_8__element_1 );
                            tmp_assign_source_76 = tmp_tuple_unpack_8__element_1;
                            assert( var_bits == NULL );
                            Py_INCREF( tmp_assign_source_76 );
                            var_bits = tmp_assign_source_76;
                        }
                        Py_XDECREF( tmp_tuple_unpack_8__element_1 );
                        tmp_tuple_unpack_8__element_1 = NULL;

                        {
                            PyObject *tmp_assign_source_77;
                            CHECK_OBJECT( tmp_tuple_unpack_8__element_2 );
                            tmp_assign_source_77 = tmp_tuple_unpack_8__element_2;
                            assert( var_linkage == NULL );
                            Py_INCREF( tmp_assign_source_77 );
                            var_linkage = tmp_assign_source_77;
                        }
                        Py_XDECREF( tmp_tuple_unpack_8__element_2 );
                        tmp_tuple_unpack_8__element_2 = NULL;

                        {
                            PyObject *tmp_assign_source_78;
                            PyObject *tmp_called_name_22;
                            PyObject *tmp_mvar_value_23;
                            PyObject *tmp_args_element_name_52;
                            PyObject *tmp_args_element_name_53;
                            PyObject *tmp_args_element_name_54;
                            PyObject *tmp_args_element_name_55;
                            PyObject *tmp_args_element_name_56;
                            PyObject *tmp_args_element_name_57;
                            tmp_mvar_value_23 = GET_STRING_DICT_VALUE( moduledict_platform, (Nuitka_StringObject *)const_str_plain__platform );

                            if (unlikely( tmp_mvar_value_23 == NULL ))
                            {
                                tmp_mvar_value_23 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain__platform );
                            }

                            if ( tmp_mvar_value_23 == NULL )
                            {

                                exception_type = PyExc_NameError;
                                Py_INCREF( exception_type );
                                exception_value = PyUnicode_FromFormat( "name '%s' is not defined", "_platform" );
                                exception_tb = NULL;
                                NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
                                CHAIN_EXCEPTION( exception_value );

                                exception_lineno = 1417;
                                type_description_1 = "ooooooooooooooooooooooooooo";
                                goto frame_exception_exit_1;
                            }

                            tmp_called_name_22 = tmp_mvar_value_23;
                            CHECK_OBJECT( var_system );
                            tmp_args_element_name_52 = var_system;
                            CHECK_OBJECT( var_release );
                            tmp_args_element_name_53 = var_release;
                            CHECK_OBJECT( var_machine );
                            tmp_args_element_name_54 = var_machine;
                            CHECK_OBJECT( var_processor );
                            tmp_args_element_name_55 = var_processor;
                            CHECK_OBJECT( var_bits );
                            tmp_args_element_name_56 = var_bits;
                            CHECK_OBJECT( var_linkage );
                            tmp_args_element_name_57 = var_linkage;
                            frame_0d3a22fe3694b8da215ae5e33a50d7cb->m_frame.f_lineno = 1417;
                            {
                                PyObject *call_args[] = { tmp_args_element_name_52, tmp_args_element_name_53, tmp_args_element_name_54, tmp_args_element_name_55, tmp_args_element_name_56, tmp_args_element_name_57 };
                                tmp_assign_source_78 = CALL_FUNCTION_WITH_ARGS6( tmp_called_name_22, call_args );
                            }

                            if ( tmp_assign_source_78 == NULL )
                            {
                                assert( ERROR_OCCURRED() );

                                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                                exception_lineno = 1417;
                                type_description_1 = "ooooooooooooooooooooooooooo";
                                goto frame_exception_exit_1;
                            }
                            assert( var_platform == NULL );
                            var_platform = tmp_assign_source_78;
                        }
                        branch_end_16:;
                    }
                    branch_end_14:;
                }
                branch_end_12:;
            }
            branch_end_6:;
        }
        branch_end_4:;
    }
    {
        PyObject *tmp_ass_subvalue_1;
        PyObject *tmp_ass_subscribed_1;
        PyObject *tmp_mvar_value_24;
        PyObject *tmp_ass_subscript_1;
        PyObject *tmp_tuple_element_2;
        if ( var_platform == NULL )
        {

            exception_type = PyExc_UnboundLocalError;
            Py_INCREF( exception_type );
            exception_value = PyUnicode_FromFormat( "local variable '%s' referenced before assignment", "platform" );
            exception_tb = NULL;
            NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
            CHAIN_EXCEPTION( exception_value );

            exception_lineno = 1420;
            type_description_1 = "ooooooooooooooooooooooooooo";
            goto frame_exception_exit_1;
        }

        tmp_ass_subvalue_1 = var_platform;
        tmp_mvar_value_24 = GET_STRING_DICT_VALUE( moduledict_platform, (Nuitka_StringObject *)const_str_plain__platform_cache );

        if (unlikely( tmp_mvar_value_24 == NULL ))
        {
            tmp_mvar_value_24 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain__platform_cache );
        }

        if ( tmp_mvar_value_24 == NULL )
        {

            exception_type = PyExc_NameError;
            Py_INCREF( exception_type );
            exception_value = PyUnicode_FromFormat( "name '%s' is not defined", "_platform_cache" );
            exception_tb = NULL;
            NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
            CHAIN_EXCEPTION( exception_value );

            exception_lineno = 1420;
            type_description_1 = "ooooooooooooooooooooooooooo";
            goto frame_exception_exit_1;
        }

        tmp_ass_subscribed_1 = tmp_mvar_value_24;
        CHECK_OBJECT( par_aliased );
        tmp_tuple_element_2 = par_aliased;
        tmp_ass_subscript_1 = PyTuple_New( 2 );
        Py_INCREF( tmp_tuple_element_2 );
        PyTuple_SET_ITEM( tmp_ass_subscript_1, 0, tmp_tuple_element_2 );
        CHECK_OBJECT( par_terse );
        tmp_tuple_element_2 = par_terse;
        Py_INCREF( tmp_tuple_element_2 );
        PyTuple_SET_ITEM( tmp_ass_subscript_1, 1, tmp_tuple_element_2 );
        tmp_result = SET_SUBSCRIPT( tmp_ass_subscribed_1, tmp_ass_subscript_1, tmp_ass_subvalue_1 );
        Py_DECREF( tmp_ass_subscript_1 );
        if ( tmp_result == false )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 1420;
            type_description_1 = "ooooooooooooooooooooooooooo";
            goto frame_exception_exit_1;
        }
    }
    if ( var_platform == NULL )
    {

        exception_type = PyExc_UnboundLocalError;
        Py_INCREF( exception_type );
        exception_value = PyUnicode_FromFormat( "local variable '%s' referenced before assignment", "platform" );
        exception_tb = NULL;
        NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
        CHAIN_EXCEPTION( exception_value );

        exception_lineno = 1421;
        type_description_1 = "ooooooooooooooooooooooooooo";
        goto frame_exception_exit_1;
    }

    tmp_return_value = var_platform;
    Py_INCREF( tmp_return_value );
    goto frame_return_exit_1;

#if 0
    RESTORE_FRAME_EXCEPTION( frame_0d3a22fe3694b8da215ae5e33a50d7cb );
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto frame_no_exception_1;

    frame_return_exit_1:;
#if 0
    RESTORE_FRAME_EXCEPTION( frame_0d3a22fe3694b8da215ae5e33a50d7cb );
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto try_return_handler_1;

    frame_exception_exit_1:;

#if 0
    RESTORE_FRAME_EXCEPTION( frame_0d3a22fe3694b8da215ae5e33a50d7cb );
#endif

    if ( exception_tb == NULL )
    {
        exception_tb = MAKE_TRACEBACK( frame_0d3a22fe3694b8da215ae5e33a50d7cb, exception_lineno );
    }
    else if ( exception_tb->tb_frame != &frame_0d3a22fe3694b8da215ae5e33a50d7cb->m_frame )
    {
        exception_tb = ADD_TRACEBACK( exception_tb, frame_0d3a22fe3694b8da215ae5e33a50d7cb, exception_lineno );
    }

    // Attachs locals to frame if any.
    Nuitka_Frame_AttachLocals(
        (struct Nuitka_FrameObject *)frame_0d3a22fe3694b8da215ae5e33a50d7cb,
        type_description_1,
        par_aliased,
        par_terse,
        var_result,
        var_system,
        var_node,
        var_release,
        var_version,
        var_machine,
        var_processor,
        var_rel,
        var_vers,
        var_csd,
        var_ptype,
        var_platform,
        var_distname,
        var_distversion,
        var_distid,
        var_libcname,
        var_libcversion,
        var_r,
        var_v,
        var_vminfo,
        var_os_name,
        var_os_version,
        var_os_arch,
        var_bits,
        var_linkage
    );


    // Release cached frame.
    if ( frame_0d3a22fe3694b8da215ae5e33a50d7cb == cache_frame_0d3a22fe3694b8da215ae5e33a50d7cb )
    {
        Py_DECREF( frame_0d3a22fe3694b8da215ae5e33a50d7cb );
    }
    cache_frame_0d3a22fe3694b8da215ae5e33a50d7cb = NULL;

    assertFrameObject( frame_0d3a22fe3694b8da215ae5e33a50d7cb );

    // Put the previous frame back on top.
    popFrameStack();

    // Return the error.
    goto try_except_handler_1;

    frame_no_exception_1:;
    // tried codes exits in all cases
    NUITKA_CANNOT_GET_HERE( platform$$$function_38_platform );
    return NULL;
    // Return handler code:
    try_return_handler_1:;
    CHECK_OBJECT( (PyObject *)par_aliased );
    Py_DECREF( par_aliased );
    par_aliased = NULL;

    CHECK_OBJECT( (PyObject *)par_terse );
    Py_DECREF( par_terse );
    par_terse = NULL;

    CHECK_OBJECT( (PyObject *)var_result );
    Py_DECREF( var_result );
    var_result = NULL;

    Py_XDECREF( var_system );
    var_system = NULL;

    Py_XDECREF( var_node );
    var_node = NULL;

    Py_XDECREF( var_release );
    var_release = NULL;

    Py_XDECREF( var_version );
    var_version = NULL;

    Py_XDECREF( var_machine );
    var_machine = NULL;

    Py_XDECREF( var_processor );
    var_processor = NULL;

    Py_XDECREF( var_rel );
    var_rel = NULL;

    Py_XDECREF( var_vers );
    var_vers = NULL;

    Py_XDECREF( var_csd );
    var_csd = NULL;

    Py_XDECREF( var_ptype );
    var_ptype = NULL;

    Py_XDECREF( var_platform );
    var_platform = NULL;

    Py_XDECREF( var_distname );
    var_distname = NULL;

    Py_XDECREF( var_distversion );
    var_distversion = NULL;

    Py_XDECREF( var_distid );
    var_distid = NULL;

    Py_XDECREF( var_libcname );
    var_libcname = NULL;

    Py_XDECREF( var_libcversion );
    var_libcversion = NULL;

    Py_XDECREF( var_r );
    var_r = NULL;

    Py_XDECREF( var_v );
    var_v = NULL;

    Py_XDECREF( var_vminfo );
    var_vminfo = NULL;

    Py_XDECREF( var_os_name );
    var_os_name = NULL;

    Py_XDECREF( var_os_version );
    var_os_version = NULL;

    Py_XDECREF( var_os_arch );
    var_os_arch = NULL;

    Py_XDECREF( var_bits );
    var_bits = NULL;

    Py_XDECREF( var_linkage );
    var_linkage = NULL;

    goto function_return_exit;
    // Exception handler code:
    try_except_handler_1:;
    exception_keeper_type_21 = exception_type;
    exception_keeper_value_21 = exception_value;
    exception_keeper_tb_21 = exception_tb;
    exception_keeper_lineno_21 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    CHECK_OBJECT( (PyObject *)par_aliased );
    Py_DECREF( par_aliased );
    par_aliased = NULL;

    CHECK_OBJECT( (PyObject *)par_terse );
    Py_DECREF( par_terse );
    par_terse = NULL;

    Py_XDECREF( var_result );
    var_result = NULL;

    Py_XDECREF( var_system );
    var_system = NULL;

    Py_XDECREF( var_node );
    var_node = NULL;

    Py_XDECREF( var_release );
    var_release = NULL;

    Py_XDECREF( var_version );
    var_version = NULL;

    Py_XDECREF( var_machine );
    var_machine = NULL;

    Py_XDECREF( var_processor );
    var_processor = NULL;

    Py_XDECREF( var_rel );
    var_rel = NULL;

    Py_XDECREF( var_vers );
    var_vers = NULL;

    Py_XDECREF( var_csd );
    var_csd = NULL;

    Py_XDECREF( var_ptype );
    var_ptype = NULL;

    Py_XDECREF( var_platform );
    var_platform = NULL;

    Py_XDECREF( var_distname );
    var_distname = NULL;

    Py_XDECREF( var_distversion );
    var_distversion = NULL;

    Py_XDECREF( var_distid );
    var_distid = NULL;

    Py_XDECREF( var_libcname );
    var_libcname = NULL;

    Py_XDECREF( var_libcversion );
    var_libcversion = NULL;

    Py_XDECREF( var_r );
    var_r = NULL;

    Py_XDECREF( var_v );
    var_v = NULL;

    Py_XDECREF( var_vminfo );
    var_vminfo = NULL;

    Py_XDECREF( var_os_name );
    var_os_name = NULL;

    Py_XDECREF( var_os_version );
    var_os_version = NULL;

    Py_XDECREF( var_os_arch );
    var_os_arch = NULL;

    Py_XDECREF( var_bits );
    var_bits = NULL;

    Py_XDECREF( var_linkage );
    var_linkage = NULL;

    // Re-raise.
    exception_type = exception_keeper_type_21;
    exception_value = exception_keeper_value_21;
    exception_tb = exception_keeper_tb_21;
    exception_lineno = exception_keeper_lineno_21;

    goto function_exception_exit;
    // End of try:

    // Return statement must have exited already.
    NUITKA_CANNOT_GET_HERE( platform$$$function_38_platform );
    return NULL;

function_exception_exit:
    assert( exception_type );
    RESTORE_ERROR_OCCURRED( exception_type, exception_value, exception_tb );

    return NULL;

function_return_exit:
   // Function cleanup code if any.


   // Actual function exit with return value, making sure we did not make
   // the error status worse despite non-NULL return.
   CHECK_OBJECT( tmp_return_value );
   assert( had_error || !ERROR_OCCURRED() );
   return tmp_return_value;
}



static PyObject *MAKE_FUNCTION_platform$$$function_10__syscmd_ver( PyObject *defaults )
{
    struct Nuitka_FunctionObject *result = Nuitka_Function_New(
        impl_platform$$$function_10__syscmd_ver,
        const_str_plain__syscmd_ver,
#if PYTHON_VERSION >= 300
        NULL,
#endif
        codeobj_109f5500facaab962d851ae8f9c2a4fc,
        defaults,
#if PYTHON_VERSION >= 300
        NULL,
        NULL,
#endif
        module_platform,
        const_str_digest_98b03f82804b29f11f09b5147428a957,
        0
    );

    return (PyObject *)result;
}



static PyObject *MAKE_FUNCTION_platform$$$function_11_win32_ver( PyObject *defaults )
{
    struct Nuitka_FunctionObject *result = Nuitka_Function_New(
        impl_platform$$$function_11_win32_ver,
        const_str_plain_win32_ver,
#if PYTHON_VERSION >= 300
        NULL,
#endif
        codeobj_452a413b3bfaa85657a8807ce8e12b14,
        defaults,
#if PYTHON_VERSION >= 300
        NULL,
        NULL,
#endif
        module_platform,
        NULL,
        0
    );

    return (PyObject *)result;
}



static PyObject *MAKE_FUNCTION_platform$$$function_12__mac_ver_xml(  )
{
    struct Nuitka_FunctionObject *result = Nuitka_Function_New(
        impl_platform$$$function_12__mac_ver_xml,
        const_str_plain__mac_ver_xml,
#if PYTHON_VERSION >= 300
        NULL,
#endif
        codeobj_fa8ebdcd8d683041704b483165d3e972,
        NULL,
#if PYTHON_VERSION >= 300
        NULL,
        NULL,
#endif
        module_platform,
        NULL,
        0
    );

    return (PyObject *)result;
}



static PyObject *MAKE_FUNCTION_platform$$$function_13_mac_ver( PyObject *defaults )
{
    struct Nuitka_FunctionObject *result = Nuitka_Function_New(
        impl_platform$$$function_13_mac_ver,
        const_str_plain_mac_ver,
#if PYTHON_VERSION >= 300
        NULL,
#endif
        codeobj_7d471acc39100affe4f828286b22c09d,
        defaults,
#if PYTHON_VERSION >= 300
        NULL,
        NULL,
#endif
        module_platform,
        const_str_digest_0b162f5c4b79aa3f257f38246a3c944c,
        0
    );

    return (PyObject *)result;
}



static PyObject *MAKE_FUNCTION_platform$$$function_14__java_getprop(  )
{
    struct Nuitka_FunctionObject *result = Nuitka_Function_New(
        impl_platform$$$function_14__java_getprop,
        const_str_plain__java_getprop,
#if PYTHON_VERSION >= 300
        NULL,
#endif
        codeobj_85c1cc62a55d538c6401240bccea7c6c,
        NULL,
#if PYTHON_VERSION >= 300
        NULL,
        NULL,
#endif
        module_platform,
        NULL,
        0
    );

    return (PyObject *)result;
}



static PyObject *MAKE_FUNCTION_platform$$$function_15_java_ver( PyObject *defaults )
{
    struct Nuitka_FunctionObject *result = Nuitka_Function_New(
        impl_platform$$$function_15_java_ver,
        const_str_plain_java_ver,
#if PYTHON_VERSION >= 300
        NULL,
#endif
        codeobj_ad79bebff06c0898dc9c56142cd0efd0,
        defaults,
#if PYTHON_VERSION >= 300
        NULL,
        NULL,
#endif
        module_platform,
        const_str_digest_88e458ff3be8ccacc83e1b0a8110486d,
        0
    );

    return (PyObject *)result;
}



static PyObject *MAKE_FUNCTION_platform$$$function_16_system_alias(  )
{
    struct Nuitka_FunctionObject *result = Nuitka_Function_New(
        impl_platform$$$function_16_system_alias,
        const_str_plain_system_alias,
#if PYTHON_VERSION >= 300
        NULL,
#endif
        codeobj_9211ede61843307a8618562589961416,
        NULL,
#if PYTHON_VERSION >= 300
        NULL,
        NULL,
#endif
        module_platform,
        const_str_digest_b4411e041e04a06c7be1bd9d9e4bccf2,
        0
    );

    return (PyObject *)result;
}



static PyObject *MAKE_FUNCTION_platform$$$function_17__platform(  )
{
    struct Nuitka_FunctionObject *result = Nuitka_Function_New(
        impl_platform$$$function_17__platform,
        const_str_plain__platform,
#if PYTHON_VERSION >= 300
        NULL,
#endif
        codeobj_59c2cc43609bae23e7a57f0b2d56bd1c,
        NULL,
#if PYTHON_VERSION >= 300
        NULL,
        NULL,
#endif
        module_platform,
        const_str_digest_1c769e8d2e15170a2d8cc05571543e9b,
        0
    );

    return (PyObject *)result;
}



static PyObject *MAKE_FUNCTION_platform$$$function_18__node( PyObject *defaults )
{
    struct Nuitka_FunctionObject *result = Nuitka_Function_New(
        impl_platform$$$function_18__node,
        const_str_plain__node,
#if PYTHON_VERSION >= 300
        NULL,
#endif
        codeobj_dff23205ffbbd3cc016593cc8faec355,
        defaults,
#if PYTHON_VERSION >= 300
        NULL,
        NULL,
#endif
        module_platform,
        const_str_digest_5fcd0696fe944ce3e3d212e7fc0c8b51,
        0
    );

    return (PyObject *)result;
}



static PyObject *MAKE_FUNCTION_platform$$$function_19__follow_symlinks(  )
{
    struct Nuitka_FunctionObject *result = Nuitka_Function_New(
        impl_platform$$$function_19__follow_symlinks,
        const_str_plain__follow_symlinks,
#if PYTHON_VERSION >= 300
        NULL,
#endif
        codeobj_d6799e85b3b4b4e2540373134d7ad719,
        NULL,
#if PYTHON_VERSION >= 300
        NULL,
        NULL,
#endif
        module_platform,
        const_str_digest_a7ad85f99ad5a3d569fe3a5dfa6469b5,
        0
    );

    return (PyObject *)result;
}



static PyObject *MAKE_FUNCTION_platform$$$function_1__comparable_version(  )
{
    struct Nuitka_FunctionObject *result = Nuitka_Function_New(
        impl_platform$$$function_1__comparable_version,
        const_str_plain__comparable_version,
#if PYTHON_VERSION >= 300
        NULL,
#endif
        codeobj_93e626735c7282b7e514dac1bb529073,
        NULL,
#if PYTHON_VERSION >= 300
        NULL,
        NULL,
#endif
        module_platform,
        NULL,
        0
    );

    return (PyObject *)result;
}



static PyObject *MAKE_FUNCTION_platform$$$function_20__syscmd_uname( PyObject *defaults )
{
    struct Nuitka_FunctionObject *result = Nuitka_Function_New(
        impl_platform$$$function_20__syscmd_uname,
        const_str_plain__syscmd_uname,
#if PYTHON_VERSION >= 300
        NULL,
#endif
        codeobj_52aaa3e364e86ba8721dc4ad0fde4365,
        defaults,
#if PYTHON_VERSION >= 300
        NULL,
        NULL,
#endif
        module_platform,
        const_str_digest_8de99c9893b3a85ef93a1337e8aee84f,
        0
    );

    return (PyObject *)result;
}



static PyObject *MAKE_FUNCTION_platform$$$function_21__syscmd_file( PyObject *defaults )
{
    struct Nuitka_FunctionObject *result = Nuitka_Function_New(
        impl_platform$$$function_21__syscmd_file,
        const_str_plain__syscmd_file,
#if PYTHON_VERSION >= 300
        NULL,
#endif
        codeobj_85168251d2490c4232318962bb330495,
        defaults,
#if PYTHON_VERSION >= 300
        NULL,
        NULL,
#endif
        module_platform,
        const_str_digest_80654e2d89d39ed487e956cc00c12981,
        0
    );

    return (PyObject *)result;
}



static PyObject *MAKE_FUNCTION_platform$$$function_22_architecture( PyObject *defaults )
{
    struct Nuitka_FunctionObject *result = Nuitka_Function_New(
        impl_platform$$$function_22_architecture,
        const_str_plain_architecture,
#if PYTHON_VERSION >= 300
        NULL,
#endif
        codeobj_80336ffcec4082d86976166272757e61,
        defaults,
#if PYTHON_VERSION >= 300
        NULL,
        NULL,
#endif
        module_platform,
        const_str_digest_d62c7468409a9b5dbc1f1e61cdadd7b2,
        0
    );

    return (PyObject *)result;
}



static PyObject *MAKE_FUNCTION_platform$$$function_23_uname(  )
{
    struct Nuitka_FunctionObject *result = Nuitka_Function_New(
        impl_platform$$$function_23_uname,
        const_str_plain_uname,
#if PYTHON_VERSION >= 300
        NULL,
#endif
        codeobj_78e45736f492b0dece9b673c7115a31c,
        NULL,
#if PYTHON_VERSION >= 300
        NULL,
        NULL,
#endif
        module_platform,
        const_str_digest_3d01c170674159e6055a9a063104ceb7,
        0
    );

    return (PyObject *)result;
}



static PyObject *MAKE_FUNCTION_platform$$$function_24_system(  )
{
    struct Nuitka_FunctionObject *result = Nuitka_Function_New(
        impl_platform$$$function_24_system,
        const_str_plain_system,
#if PYTHON_VERSION >= 300
        NULL,
#endif
        codeobj_3ffae5f34b5209fffec9ea9d7d8c2600,
        NULL,
#if PYTHON_VERSION >= 300
        NULL,
        NULL,
#endif
        module_platform,
        const_str_digest_f2ffe551371f3a5b3ab3a3f80e9cbd82,
        0
    );

    return (PyObject *)result;
}



static PyObject *MAKE_FUNCTION_platform$$$function_25_node(  )
{
    struct Nuitka_FunctionObject *result = Nuitka_Function_New(
        impl_platform$$$function_25_node,
        const_str_plain_node,
#if PYTHON_VERSION >= 300
        NULL,
#endif
        codeobj_120c7317512780504150c56bbaf527fd,
        NULL,
#if PYTHON_VERSION >= 300
        NULL,
        NULL,
#endif
        module_platform,
        const_str_digest_450fff63ec945c111983c6e814ea4cfd,
        0
    );

    return (PyObject *)result;
}



static PyObject *MAKE_FUNCTION_platform$$$function_26_release(  )
{
    struct Nuitka_FunctionObject *result = Nuitka_Function_New(
        impl_platform$$$function_26_release,
        const_str_plain_release,
#if PYTHON_VERSION >= 300
        NULL,
#endif
        codeobj_88b750f9fd91d97315896380b8c5f62e,
        NULL,
#if PYTHON_VERSION >= 300
        NULL,
        NULL,
#endif
        module_platform,
        const_str_digest_c75e23dbd7a56cbcbc9155661cdb4df5,
        0
    );

    return (PyObject *)result;
}



static PyObject *MAKE_FUNCTION_platform$$$function_27_version(  )
{
    struct Nuitka_FunctionObject *result = Nuitka_Function_New(
        impl_platform$$$function_27_version,
        const_str_plain_version,
#if PYTHON_VERSION >= 300
        NULL,
#endif
        codeobj_4214dd2b9282a50c64702ee940b60f1e,
        NULL,
#if PYTHON_VERSION >= 300
        NULL,
        NULL,
#endif
        module_platform,
        const_str_digest_8f4a53b5cf60a8635bf4ae2f450d7690,
        0
    );

    return (PyObject *)result;
}



static PyObject *MAKE_FUNCTION_platform$$$function_28_machine(  )
{
    struct Nuitka_FunctionObject *result = Nuitka_Function_New(
        impl_platform$$$function_28_machine,
        const_str_plain_machine,
#if PYTHON_VERSION >= 300
        NULL,
#endif
        codeobj_34dea52287ae50b1e167d683fa77674f,
        NULL,
#if PYTHON_VERSION >= 300
        NULL,
        NULL,
#endif
        module_platform,
        const_str_digest_efe86cfebd61b9a71b33c81b210741b4,
        0
    );

    return (PyObject *)result;
}



static PyObject *MAKE_FUNCTION_platform$$$function_29_processor(  )
{
    struct Nuitka_FunctionObject *result = Nuitka_Function_New(
        impl_platform$$$function_29_processor,
        const_str_plain_processor,
#if PYTHON_VERSION >= 300
        NULL,
#endif
        codeobj_f0b8d438529f91c513a9a85244666c80,
        NULL,
#if PYTHON_VERSION >= 300
        NULL,
        NULL,
#endif
        module_platform,
        const_str_digest_0beef85ad37ed8bd851c7863dbdaabca,
        0
    );

    return (PyObject *)result;
}



static PyObject *MAKE_FUNCTION_platform$$$function_2_libc_ver( PyObject *defaults )
{
    struct Nuitka_FunctionObject *result = Nuitka_Function_New(
        impl_platform$$$function_2_libc_ver,
        const_str_plain_libc_ver,
#if PYTHON_VERSION >= 300
        NULL,
#endif
        codeobj_41546e987a6804e4e850d6206ee8cd01,
        defaults,
#if PYTHON_VERSION >= 300
        NULL,
        NULL,
#endif
        module_platform,
        const_str_digest_f8eade62a18d6d57e9fe13f9384395cd,
        0
    );

    return (PyObject *)result;
}



static PyObject *MAKE_FUNCTION_platform$$$function_30__sys_version( PyObject *defaults )
{
    struct Nuitka_FunctionObject *result = Nuitka_Function_New(
        impl_platform$$$function_30__sys_version,
        const_str_plain__sys_version,
#if PYTHON_VERSION >= 300
        NULL,
#endif
        codeobj_43a808c2e7d2ad693508adcb974b4533,
        defaults,
#if PYTHON_VERSION >= 300
        NULL,
        NULL,
#endif
        module_platform,
        const_str_digest_6e70f991e7bbc2bafb75c8aa1f14cfbd,
        0
    );

    return (PyObject *)result;
}



static PyObject *MAKE_FUNCTION_platform$$$function_31_python_implementation(  )
{
    struct Nuitka_FunctionObject *result = Nuitka_Function_New(
        impl_platform$$$function_31_python_implementation,
        const_str_plain_python_implementation,
#if PYTHON_VERSION >= 300
        NULL,
#endif
        codeobj_bb0039be5259c72d3a4fd21ab831eb77,
        NULL,
#if PYTHON_VERSION >= 300
        NULL,
        NULL,
#endif
        module_platform,
        const_str_digest_a90093fc8e8dd37700df165482a3202e,
        0
    );

    return (PyObject *)result;
}



static PyObject *MAKE_FUNCTION_platform$$$function_32_python_version(  )
{
    struct Nuitka_FunctionObject *result = Nuitka_Function_New(
        impl_platform$$$function_32_python_version,
        const_str_plain_python_version,
#if PYTHON_VERSION >= 300
        NULL,
#endif
        codeobj_756034e7ad7faf33e5dfc5731b9226c0,
        NULL,
#if PYTHON_VERSION >= 300
        NULL,
        NULL,
#endif
        module_platform,
        const_str_digest_e7eb97b447375909548733772db2d0e6,
        0
    );

    return (PyObject *)result;
}



static PyObject *MAKE_FUNCTION_platform$$$function_33_python_version_tuple(  )
{
    struct Nuitka_FunctionObject *result = Nuitka_Function_New(
        impl_platform$$$function_33_python_version_tuple,
        const_str_plain_python_version_tuple,
#if PYTHON_VERSION >= 300
        NULL,
#endif
        codeobj_a8e6c9dfcb2bfbef2f59b950a2c2d875,
        NULL,
#if PYTHON_VERSION >= 300
        NULL,
        NULL,
#endif
        module_platform,
        const_str_digest_7784b431cd5008cb86cccd8e28d3b60d,
        0
    );

    return (PyObject *)result;
}



static PyObject *MAKE_FUNCTION_platform$$$function_34_python_branch(  )
{
    struct Nuitka_FunctionObject *result = Nuitka_Function_New(
        impl_platform$$$function_34_python_branch,
        const_str_plain_python_branch,
#if PYTHON_VERSION >= 300
        NULL,
#endif
        codeobj_79402a9ecb16097a6e3b6ce2bdaf0398,
        NULL,
#if PYTHON_VERSION >= 300
        NULL,
        NULL,
#endif
        module_platform,
        const_str_digest_8114cf4f0f1845d12087b0358cacd4c7,
        0
    );

    return (PyObject *)result;
}



static PyObject *MAKE_FUNCTION_platform$$$function_35_python_revision(  )
{
    struct Nuitka_FunctionObject *result = Nuitka_Function_New(
        impl_platform$$$function_35_python_revision,
        const_str_plain_python_revision,
#if PYTHON_VERSION >= 300
        NULL,
#endif
        codeobj_4ed41bafbaed395db0c4281ae5cc0357,
        NULL,
#if PYTHON_VERSION >= 300
        NULL,
        NULL,
#endif
        module_platform,
        const_str_digest_8fa6b8f60d5d56975f73474d37608cfc,
        0
    );

    return (PyObject *)result;
}



static PyObject *MAKE_FUNCTION_platform$$$function_36_python_build(  )
{
    struct Nuitka_FunctionObject *result = Nuitka_Function_New(
        impl_platform$$$function_36_python_build,
        const_str_plain_python_build,
#if PYTHON_VERSION >= 300
        NULL,
#endif
        codeobj_fef074391b25ff2e4937d3866ed97d3a,
        NULL,
#if PYTHON_VERSION >= 300
        NULL,
        NULL,
#endif
        module_platform,
        const_str_digest_e4e97622421c13e798ad32d45d55de5e,
        0
    );

    return (PyObject *)result;
}



static PyObject *MAKE_FUNCTION_platform$$$function_37_python_compiler(  )
{
    struct Nuitka_FunctionObject *result = Nuitka_Function_New(
        impl_platform$$$function_37_python_compiler,
        const_str_plain_python_compiler,
#if PYTHON_VERSION >= 300
        NULL,
#endif
        codeobj_3efa31fc82831885992d6ca32e1aa252,
        NULL,
#if PYTHON_VERSION >= 300
        NULL,
        NULL,
#endif
        module_platform,
        const_str_digest_c5fc1f91c339cdebaf161146ff288b3b,
        0
    );

    return (PyObject *)result;
}



static PyObject *MAKE_FUNCTION_platform$$$function_38_platform( PyObject *defaults )
{
    struct Nuitka_FunctionObject *result = Nuitka_Function_New(
        impl_platform$$$function_38_platform,
        const_str_plain_platform,
#if PYTHON_VERSION >= 300
        NULL,
#endif
        codeobj_0d3a22fe3694b8da215ae5e33a50d7cb,
        defaults,
#if PYTHON_VERSION >= 300
        NULL,
        NULL,
#endif
        module_platform,
        const_str_digest_31711a5bc9d56b30765b999acf7ad0c7,
        0
    );

    return (PyObject *)result;
}



static PyObject *MAKE_FUNCTION_platform$$$function_3__dist_try_harder(  )
{
    struct Nuitka_FunctionObject *result = Nuitka_Function_New(
        impl_platform$$$function_3__dist_try_harder,
        const_str_plain__dist_try_harder,
#if PYTHON_VERSION >= 300
        NULL,
#endif
        codeobj_da69626f2bcb841bef747fa3b9caaded,
        NULL,
#if PYTHON_VERSION >= 300
        NULL,
        NULL,
#endif
        module_platform,
        const_str_digest_7ec939bd263e3d63e9fd34d1e63a41dd,
        0
    );

    return (PyObject *)result;
}



static PyObject *MAKE_FUNCTION_platform$$$function_4__parse_release_file(  )
{
    struct Nuitka_FunctionObject *result = Nuitka_Function_New(
        impl_platform$$$function_4__parse_release_file,
        const_str_plain__parse_release_file,
#if PYTHON_VERSION >= 300
        NULL,
#endif
        codeobj_b6f7d54bfd0f79eb0ae58adcb8e364fb,
        NULL,
#if PYTHON_VERSION >= 300
        NULL,
        NULL,
#endif
        module_platform,
        NULL,
        0
    );

    return (PyObject *)result;
}



static PyObject *MAKE_FUNCTION_platform$$$function_5_linux_distribution( PyObject *defaults )
{
    struct Nuitka_FunctionObject *result = Nuitka_Function_New(
        impl_platform$$$function_5_linux_distribution,
        const_str_plain_linux_distribution,
#if PYTHON_VERSION >= 300
        NULL,
#endif
        codeobj_e1899258df6552fe9fe3f5925d378487,
        defaults,
#if PYTHON_VERSION >= 300
        NULL,
        NULL,
#endif
        module_platform,
        NULL,
        0
    );

    return (PyObject *)result;
}



static PyObject *MAKE_FUNCTION_platform$$$function_6__linux_distribution(  )
{
    struct Nuitka_FunctionObject *result = Nuitka_Function_New(
        impl_platform$$$function_6__linux_distribution,
        const_str_plain__linux_distribution,
#if PYTHON_VERSION >= 300
        NULL,
#endif
        codeobj_56ef1eabe7851e61c622492a816b4656,
        NULL,
#if PYTHON_VERSION >= 300
        NULL,
        NULL,
#endif
        module_platform,
        const_str_digest_7059b76934756507026da48f1ba159b0,
        0
    );

    return (PyObject *)result;
}



static PyObject *MAKE_FUNCTION_platform$$$function_7_dist( PyObject *defaults )
{
    struct Nuitka_FunctionObject *result = Nuitka_Function_New(
        impl_platform$$$function_7_dist,
        const_str_plain_dist,
#if PYTHON_VERSION >= 300
        NULL,
#endif
        codeobj_0aedce3e67af834a5e5e785c9a43d447,
        defaults,
#if PYTHON_VERSION >= 300
        NULL,
        NULL,
#endif
        module_platform,
        const_str_digest_60227585594ae34c5ae46679daff4fa6,
        0
    );

    return (PyObject *)result;
}



static PyObject *MAKE_FUNCTION_platform$$$function_8_popen( PyObject *defaults )
{
    struct Nuitka_FunctionObject *result = Nuitka_Function_New(
        impl_platform$$$function_8_popen,
        const_str_plain_popen,
#if PYTHON_VERSION >= 300
        NULL,
#endif
        codeobj_d98589cf7a060717383e105fa046f5a9,
        defaults,
#if PYTHON_VERSION >= 300
        NULL,
        NULL,
#endif
        module_platform,
        const_str_digest_31d63c6dcb12a1b21610d339e5dfe57e,
        0
    );

    return (PyObject *)result;
}



static PyObject *MAKE_FUNCTION_platform$$$function_9__norm_version( PyObject *defaults )
{
    struct Nuitka_FunctionObject *result = Nuitka_Function_New(
        impl_platform$$$function_9__norm_version,
        const_str_plain__norm_version,
#if PYTHON_VERSION >= 300
        NULL,
#endif
        codeobj_ed162ff078a0bfe506c69dd6a6ef6a74,
        defaults,
#if PYTHON_VERSION >= 300
        NULL,
        NULL,
#endif
        module_platform,
        const_str_digest_f6fd6fd323de44f41e22129b71ae0d7b,
        0
    );

    return (PyObject *)result;
}



#if PYTHON_VERSION >= 300
static struct PyModuleDef mdef_platform =
{
    PyModuleDef_HEAD_INIT,
    "platform",
    NULL,                /* m_doc */
    -1,                  /* m_size */
    NULL,                /* m_methods */
    NULL,                /* m_reload */
    NULL,                /* m_traverse */
    NULL,                /* m_clear */
    NULL,                /* m_free */
  };
#endif

extern PyObject *const_str_plain___compiled__;

extern PyObject *const_str_plain___package__;

#if PYTHON_VERSION >= 300
extern PyObject *const_str_dot;
extern PyObject *const_str_plain___loader__;
#endif

#if PYTHON_VERSION >= 340
extern PyObject *const_str_plain___spec__;
extern PyObject *const_str_plain__initializing;
extern PyObject *const_str_plain_submodule_search_locations;
#endif

extern void _initCompiledCellType();
extern void _initCompiledGeneratorType();
extern void _initCompiledFunctionType();
extern void _initCompiledMethodType();
extern void _initCompiledFrameType();
#if PYTHON_VERSION >= 350
extern void _initCompiledCoroutineTypes();
#endif
#if PYTHON_VERSION >= 360
extern void _initCompiledAsyncgenTypes();
#endif

extern PyTypeObject Nuitka_Loader_Type;

// The exported interface to CPython. On import of the module, this function
// gets called. It has to have an exact function name, in cases it's a shared
// library export. This is hidden behind the MOD_INIT_DECL.

MOD_INIT_DECL( platform )
{
#if defined(_NUITKA_EXE) || PYTHON_VERSION >= 300
    static bool _init_done = false;

    // Modules might be imported repeatedly, which is to be ignored.
    if ( _init_done )
    {
        return MOD_RETURN_VALUE( module_platform );
    }
    else
    {
        _init_done = true;
    }
#endif

#ifdef _NUITKA_MODULE
    // In case of a stand alone extension module, need to call initialization
    // the init here because that's the first and only time we are going to get
    // called here.

    // Initialize the constant values used.
    _initBuiltinModule();
    createGlobalConstants();

    /* Initialize the compiled types of Nuitka. */
    _initCompiledCellType();
    _initCompiledGeneratorType();
    _initCompiledFunctionType();
    _initCompiledMethodType();
    _initCompiledFrameType();
#if PYTHON_VERSION >= 350
    _initCompiledCoroutineTypes();
#endif
#if PYTHON_VERSION >= 360
    _initCompiledAsyncgenTypes();
#endif

#if PYTHON_VERSION < 300
    _initSlotCompare();
#endif
#if PYTHON_VERSION >= 270
    _initSlotIternext();
#endif

    patchBuiltinModule();
    patchTypeComparison();

    // Enable meta path based loader if not already done.
#ifdef _NUITKA_TRACE
    puts("platform: Calling setupMetaPathBasedLoader().");
#endif
    setupMetaPathBasedLoader();

#if PYTHON_VERSION >= 300
    patchInspectModule();
#endif

#endif

    /* The constants only used by this module are created now. */
#ifdef _NUITKA_TRACE
    puts("platform: Calling createModuleConstants().");
#endif
    createModuleConstants();

    /* The code objects used by this module are created now. */
#ifdef _NUITKA_TRACE
    puts("platform: Calling createModuleCodeObjects().");
#endif
    createModuleCodeObjects();

    // puts( "in initplatform" );

    // Create the module object first. There are no methods initially, all are
    // added dynamically in actual code only.  Also no "__doc__" is initially
    // set at this time, as it could not contain NUL characters this way, they
    // are instead set in early module code.  No "self" for modules, we have no
    // use for it.
#if PYTHON_VERSION < 300
    module_platform = Py_InitModule4(
        "platform",       // Module Name
        NULL,                    // No methods initially, all are added
                                 // dynamically in actual module code only.
        NULL,                    // No "__doc__" is initially set, as it could
                                 // not contain NUL this way, added early in
                                 // actual code.
        NULL,                    // No self for modules, we don't use it.
        PYTHON_API_VERSION
    );
#else

    module_platform = PyModule_Create( &mdef_platform );
#endif

    moduledict_platform = MODULE_DICT( module_platform );

    // Set __compiled__ to what it we know.
    UPDATE_STRING_DICT1(
        moduledict_platform,
        (Nuitka_StringObject *)const_str_plain___compiled__,
        Nuitka_dunder_compiled_value
    );

    // Update "__package__" value to what it ought to be.
    {
#if 0
        PyObject *module_name = GET_STRING_DICT_VALUE( moduledict_platform, (Nuitka_StringObject *)const_str_plain___name__ );

        UPDATE_STRING_DICT1(
            moduledict_platform,
            (Nuitka_StringObject *)const_str_plain___package__,
            module_name
        );
#else

#if PYTHON_VERSION < 300
        PyObject *module_name = GET_STRING_DICT_VALUE( moduledict_platform, (Nuitka_StringObject *)const_str_plain___name__ );
        char const *module_name_cstr = PyString_AS_STRING( module_name );

        char const *last_dot = strrchr( module_name_cstr, '.' );

        if ( last_dot != NULL )
        {
            UPDATE_STRING_DICT1(
                moduledict_platform,
                (Nuitka_StringObject *)const_str_plain___package__,
                PyString_FromStringAndSize( module_name_cstr, last_dot - module_name_cstr )
            );
        }
#else
        PyObject *module_name = GET_STRING_DICT_VALUE( moduledict_platform, (Nuitka_StringObject *)const_str_plain___name__ );
        Py_ssize_t dot_index = PyUnicode_Find( module_name, const_str_dot, 0, PyUnicode_GetLength( module_name ), -1 );

        if ( dot_index != -1 )
        {
            UPDATE_STRING_DICT1(
                moduledict_platform,
                (Nuitka_StringObject *)const_str_plain___package__,
                PyUnicode_Substring( module_name, 0, dot_index )
            );
        }
#endif
#endif
    }

    CHECK_OBJECT( module_platform );

// Seems to work for Python2.7 out of the box, but for Python3, the module
// doesn't automatically enter "sys.modules", so do it manually.
#if PYTHON_VERSION >= 300
    {
        int r = PyObject_SetItem( PyImport_GetModuleDict(), const_str_plain_platform, module_platform );

        assert( r != -1 );
    }
#endif

    // For deep importing of a module we need to have "__builtins__", so we set
    // it ourselves in the same way than CPython does. Note: This must be done
    // before the frame object is allocated, or else it may fail.

    if ( GET_STRING_DICT_VALUE( moduledict_platform, (Nuitka_StringObject *)const_str_plain___builtins__ ) == NULL )
    {
        PyObject *value = (PyObject *)builtin_module;

        // Check if main module, not a dict then but the module itself.
#if !defined(_NUITKA_EXE) || !0
        value = PyModule_GetDict( value );
#endif

        UPDATE_STRING_DICT0( moduledict_platform, (Nuitka_StringObject *)const_str_plain___builtins__, value );
    }

#if PYTHON_VERSION >= 300
    UPDATE_STRING_DICT0( moduledict_platform, (Nuitka_StringObject *)const_str_plain___loader__, (PyObject *)&Nuitka_Loader_Type );
#endif

#if PYTHON_VERSION >= 340
// Set the "__spec__" value

#if 0
    // Main modules just get "None" as spec.
    UPDATE_STRING_DICT0( moduledict_platform, (Nuitka_StringObject *)const_str_plain___spec__, Py_None );
#else
    // Other modules get a "ModuleSpec" from the standard mechanism.
    {
        PyObject *bootstrap_module = PyImport_ImportModule("importlib._bootstrap");
        CHECK_OBJECT( bootstrap_module );
        PyObject *module_spec_class = PyObject_GetAttrString( bootstrap_module, "ModuleSpec" );
        Py_DECREF( bootstrap_module );

        PyObject *args[] = {
            GET_STRING_DICT_VALUE( moduledict_platform, (Nuitka_StringObject *)const_str_plain___name__ ),
            (PyObject *)&Nuitka_Loader_Type
        };

        PyObject *spec_value = CALL_FUNCTION_WITH_ARGS2(
            module_spec_class,
            args
        );
        Py_DECREF( module_spec_class );

        // We can assume this to never fail, or else we are in trouble anyway.
        CHECK_OBJECT( spec_value );

// For packages set the submodule search locations as well, even if to empty
// list, so investigating code will consider it a package.
#if 0
        SET_ATTRIBUTE( spec_value, const_str_plain_submodule_search_locations, PyList_New(0) );
#endif

// Mark the execution in the "__spec__" value.
        SET_ATTRIBUTE( spec_value, const_str_plain__initializing, Py_True );

        UPDATE_STRING_DICT1( moduledict_platform, (Nuitka_StringObject *)const_str_plain___spec__, spec_value );
    }
#endif
#endif

    // Temp variables if any
    struct Nuitka_FrameObject *frame_247eaa34e4748fb26b64cbbdccd40646;
    NUITKA_MAY_BE_UNUSED char const *type_description_1 = NULL;
    bool tmp_result;
    PyObject *exception_type = NULL;
    PyObject *exception_value = NULL;
    PyTracebackObject *exception_tb = NULL;
    NUITKA_MAY_BE_UNUSED int exception_lineno = 0;
    PyObject *exception_keeper_type_1;
    PyObject *exception_keeper_value_1;
    PyTracebackObject *exception_keeper_tb_1;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_1;
    PyObject *exception_preserved_type_1;
    PyObject *exception_preserved_value_1;
    PyTracebackObject *exception_preserved_tb_1;
    int tmp_res;
    PyObject *exception_keeper_type_2;
    PyObject *exception_keeper_value_2;
    PyTracebackObject *exception_keeper_tb_2;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_2;

    // Module code.
    {
        PyObject *tmp_assign_source_1;
        tmp_assign_source_1 = const_str_digest_69fcdc073bf66ccd55bf9a8a89b7f30c;
        UPDATE_STRING_DICT0( moduledict_platform, (Nuitka_StringObject *)const_str_plain___doc__, tmp_assign_source_1 );
    }
    {
        PyObject *tmp_assign_source_2;
        tmp_assign_source_2 = module_filename_obj;
        UPDATE_STRING_DICT0( moduledict_platform, (Nuitka_StringObject *)const_str_plain___file__, tmp_assign_source_2 );
    }
    // Frame without reuse.
    frame_247eaa34e4748fb26b64cbbdccd40646 = MAKE_MODULE_FRAME( codeobj_247eaa34e4748fb26b64cbbdccd40646, module_platform );

    // Push the new frame as the currently active one, and we should be exclusively
    // owning it.
    pushFrameStack( frame_247eaa34e4748fb26b64cbbdccd40646 );
    assert( Py_REFCNT( frame_247eaa34e4748fb26b64cbbdccd40646 ) == 2 );

    // Framed code:
    {
        PyObject *tmp_assattr_name_1;
        PyObject *tmp_assattr_target_1;
        PyObject *tmp_mvar_value_1;
        tmp_assattr_name_1 = module_filename_obj;
        tmp_mvar_value_1 = GET_STRING_DICT_VALUE( moduledict_platform, (Nuitka_StringObject *)const_str_plain___spec__ );

        if (unlikely( tmp_mvar_value_1 == NULL ))
        {
            tmp_mvar_value_1 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain___spec__ );
        }

        CHECK_OBJECT( tmp_mvar_value_1 );
        tmp_assattr_target_1 = tmp_mvar_value_1;
        tmp_result = SET_ATTRIBUTE( tmp_assattr_target_1, const_str_plain_origin, tmp_assattr_name_1 );
        if ( tmp_result == false )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 1;

            goto frame_exception_exit_1;
        }
    }
    {
        PyObject *tmp_assattr_name_2;
        PyObject *tmp_assattr_target_2;
        PyObject *tmp_mvar_value_2;
        tmp_assattr_name_2 = Py_True;
        tmp_mvar_value_2 = GET_STRING_DICT_VALUE( moduledict_platform, (Nuitka_StringObject *)const_str_plain___spec__ );

        if (unlikely( tmp_mvar_value_2 == NULL ))
        {
            tmp_mvar_value_2 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain___spec__ );
        }

        CHECK_OBJECT( tmp_mvar_value_2 );
        tmp_assattr_target_2 = tmp_mvar_value_2;
        tmp_result = SET_ATTRIBUTE( tmp_assattr_target_2, const_str_plain_has_location, tmp_assattr_name_2 );
        if ( tmp_result == false )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 1;

            goto frame_exception_exit_1;
        }
    }
    {
        PyObject *tmp_assign_source_3;
        tmp_assign_source_3 = Py_None;
        UPDATE_STRING_DICT0( moduledict_platform, (Nuitka_StringObject *)const_str_plain___cached__, tmp_assign_source_3 );
    }
    {
        PyObject *tmp_assign_source_4;
        tmp_assign_source_4 = const_str_digest_d0ff6362996a3c9f2d950c8ca73a812d;
        UPDATE_STRING_DICT0( moduledict_platform, (Nuitka_StringObject *)const_str_plain___copyright__, tmp_assign_source_4 );
    }
    {
        PyObject *tmp_assign_source_5;
        tmp_assign_source_5 = const_str_digest_a172fc0fcdc0324bde5cd82d8bf52b7d;
        UPDATE_STRING_DICT0( moduledict_platform, (Nuitka_StringObject *)const_str_plain___version__, tmp_assign_source_5 );
    }
    {
        PyObject *tmp_assign_source_6;
        PyObject *tmp_name_name_1;
        PyObject *tmp_globals_name_1;
        PyObject *tmp_locals_name_1;
        PyObject *tmp_fromlist_name_1;
        PyObject *tmp_level_name_1;
        tmp_name_name_1 = const_str_plain_collections;
        tmp_globals_name_1 = (PyObject *)moduledict_platform;
        tmp_locals_name_1 = Py_None;
        tmp_fromlist_name_1 = Py_None;
        tmp_level_name_1 = const_int_0;
        frame_247eaa34e4748fb26b64cbbdccd40646->m_frame.f_lineno = 115;
        tmp_assign_source_6 = IMPORT_MODULE5( tmp_name_name_1, tmp_globals_name_1, tmp_locals_name_1, tmp_fromlist_name_1, tmp_level_name_1 );
        if ( tmp_assign_source_6 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 115;

            goto frame_exception_exit_1;
        }
        UPDATE_STRING_DICT1( moduledict_platform, (Nuitka_StringObject *)const_str_plain_collections, tmp_assign_source_6 );
    }
    {
        PyObject *tmp_assign_source_7;
        PyObject *tmp_name_name_2;
        PyObject *tmp_globals_name_2;
        PyObject *tmp_locals_name_2;
        PyObject *tmp_fromlist_name_2;
        PyObject *tmp_level_name_2;
        tmp_name_name_2 = const_str_plain_sys;
        tmp_globals_name_2 = (PyObject *)moduledict_platform;
        tmp_locals_name_2 = Py_None;
        tmp_fromlist_name_2 = Py_None;
        tmp_level_name_2 = const_int_0;
        frame_247eaa34e4748fb26b64cbbdccd40646->m_frame.f_lineno = 116;
        tmp_assign_source_7 = IMPORT_MODULE5( tmp_name_name_2, tmp_globals_name_2, tmp_locals_name_2, tmp_fromlist_name_2, tmp_level_name_2 );
        assert( !(tmp_assign_source_7 == NULL) );
        UPDATE_STRING_DICT1( moduledict_platform, (Nuitka_StringObject *)const_str_plain_sys, tmp_assign_source_7 );
    }
    {
        PyObject *tmp_assign_source_8;
        PyObject *tmp_name_name_3;
        PyObject *tmp_globals_name_3;
        PyObject *tmp_locals_name_3;
        PyObject *tmp_fromlist_name_3;
        PyObject *tmp_level_name_3;
        tmp_name_name_3 = const_str_plain_os;
        tmp_globals_name_3 = (PyObject *)moduledict_platform;
        tmp_locals_name_3 = Py_None;
        tmp_fromlist_name_3 = Py_None;
        tmp_level_name_3 = const_int_0;
        frame_247eaa34e4748fb26b64cbbdccd40646->m_frame.f_lineno = 116;
        tmp_assign_source_8 = IMPORT_MODULE5( tmp_name_name_3, tmp_globals_name_3, tmp_locals_name_3, tmp_fromlist_name_3, tmp_level_name_3 );
        if ( tmp_assign_source_8 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 116;

            goto frame_exception_exit_1;
        }
        UPDATE_STRING_DICT1( moduledict_platform, (Nuitka_StringObject *)const_str_plain_os, tmp_assign_source_8 );
    }
    {
        PyObject *tmp_assign_source_9;
        PyObject *tmp_name_name_4;
        PyObject *tmp_globals_name_4;
        PyObject *tmp_locals_name_4;
        PyObject *tmp_fromlist_name_4;
        PyObject *tmp_level_name_4;
        tmp_name_name_4 = const_str_plain_re;
        tmp_globals_name_4 = (PyObject *)moduledict_platform;
        tmp_locals_name_4 = Py_None;
        tmp_fromlist_name_4 = Py_None;
        tmp_level_name_4 = const_int_0;
        frame_247eaa34e4748fb26b64cbbdccd40646->m_frame.f_lineno = 116;
        tmp_assign_source_9 = IMPORT_MODULE5( tmp_name_name_4, tmp_globals_name_4, tmp_locals_name_4, tmp_fromlist_name_4, tmp_level_name_4 );
        if ( tmp_assign_source_9 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 116;

            goto frame_exception_exit_1;
        }
        UPDATE_STRING_DICT1( moduledict_platform, (Nuitka_StringObject *)const_str_plain_re, tmp_assign_source_9 );
    }
    {
        PyObject *tmp_assign_source_10;
        PyObject *tmp_name_name_5;
        PyObject *tmp_globals_name_5;
        PyObject *tmp_locals_name_5;
        PyObject *tmp_fromlist_name_5;
        PyObject *tmp_level_name_5;
        tmp_name_name_5 = const_str_plain_subprocess;
        tmp_globals_name_5 = (PyObject *)moduledict_platform;
        tmp_locals_name_5 = Py_None;
        tmp_fromlist_name_5 = Py_None;
        tmp_level_name_5 = const_int_0;
        frame_247eaa34e4748fb26b64cbbdccd40646->m_frame.f_lineno = 116;
        tmp_assign_source_10 = IMPORT_MODULE5( tmp_name_name_5, tmp_globals_name_5, tmp_locals_name_5, tmp_fromlist_name_5, tmp_level_name_5 );
        if ( tmp_assign_source_10 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 116;

            goto frame_exception_exit_1;
        }
        UPDATE_STRING_DICT1( moduledict_platform, (Nuitka_StringObject *)const_str_plain_subprocess, tmp_assign_source_10 );
    }
    {
        PyObject *tmp_assign_source_11;
        PyObject *tmp_name_name_6;
        PyObject *tmp_globals_name_6;
        PyObject *tmp_locals_name_6;
        PyObject *tmp_fromlist_name_6;
        PyObject *tmp_level_name_6;
        tmp_name_name_6 = const_str_plain_warnings;
        tmp_globals_name_6 = (PyObject *)moduledict_platform;
        tmp_locals_name_6 = Py_None;
        tmp_fromlist_name_6 = Py_None;
        tmp_level_name_6 = const_int_0;
        frame_247eaa34e4748fb26b64cbbdccd40646->m_frame.f_lineno = 118;
        tmp_assign_source_11 = IMPORT_MODULE5( tmp_name_name_6, tmp_globals_name_6, tmp_locals_name_6, tmp_fromlist_name_6, tmp_level_name_6 );
        if ( tmp_assign_source_11 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 118;

            goto frame_exception_exit_1;
        }
        UPDATE_STRING_DICT1( moduledict_platform, (Nuitka_StringObject *)const_str_plain_warnings, tmp_assign_source_11 );
    }
    // Tried code:
    {
        PyObject *tmp_assign_source_12;
        PyObject *tmp_source_name_1;
        PyObject *tmp_mvar_value_3;
        tmp_mvar_value_3 = GET_STRING_DICT_VALUE( moduledict_platform, (Nuitka_StringObject *)const_str_plain_os );

        if (unlikely( tmp_mvar_value_3 == NULL ))
        {
            tmp_mvar_value_3 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_os );
        }

        CHECK_OBJECT( tmp_mvar_value_3 );
        tmp_source_name_1 = tmp_mvar_value_3;
        tmp_assign_source_12 = LOOKUP_ATTRIBUTE( tmp_source_name_1, const_str_plain_devnull );
        if ( tmp_assign_source_12 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 124;

            goto try_except_handler_1;
        }
        UPDATE_STRING_DICT1( moduledict_platform, (Nuitka_StringObject *)const_str_plain_DEV_NULL, tmp_assign_source_12 );
    }
    goto try_end_1;
    // Exception handler code:
    try_except_handler_1:;
    exception_keeper_type_1 = exception_type;
    exception_keeper_value_1 = exception_value;
    exception_keeper_tb_1 = exception_tb;
    exception_keeper_lineno_1 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    // Preserve existing published exception.
    exception_preserved_type_1 = EXC_TYPE(PyThreadState_GET());
    Py_XINCREF( exception_preserved_type_1 );
    exception_preserved_value_1 = EXC_VALUE(PyThreadState_GET());
    Py_XINCREF( exception_preserved_value_1 );
    exception_preserved_tb_1 = (PyTracebackObject *)EXC_TRACEBACK(PyThreadState_GET());
    Py_XINCREF( exception_preserved_tb_1 );

    if ( exception_keeper_tb_1 == NULL )
    {
        exception_keeper_tb_1 = MAKE_TRACEBACK( frame_247eaa34e4748fb26b64cbbdccd40646, exception_keeper_lineno_1 );
    }
    else if ( exception_keeper_lineno_1 != 0 )
    {
        exception_keeper_tb_1 = ADD_TRACEBACK( exception_keeper_tb_1, frame_247eaa34e4748fb26b64cbbdccd40646, exception_keeper_lineno_1 );
    }

    NORMALIZE_EXCEPTION( &exception_keeper_type_1, &exception_keeper_value_1, &exception_keeper_tb_1 );
    PyException_SetTraceback( exception_keeper_value_1, (PyObject *)exception_keeper_tb_1 );
    PUBLISH_EXCEPTION( &exception_keeper_type_1, &exception_keeper_value_1, &exception_keeper_tb_1 );
    // Tried code:
    {
        nuitka_bool tmp_condition_result_1;
        PyObject *tmp_compexpr_left_1;
        PyObject *tmp_compexpr_right_1;
        tmp_compexpr_left_1 = EXC_TYPE(PyThreadState_GET());
        tmp_compexpr_right_1 = PyExc_AttributeError;
        tmp_res = EXCEPTION_MATCH_BOOL( tmp_compexpr_left_1, tmp_compexpr_right_1 );
        if ( tmp_res == -1 )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 125;

            goto try_except_handler_2;
        }
        tmp_condition_result_1 = ( tmp_res != 0 ) ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
        if ( tmp_condition_result_1 == NUITKA_BOOL_TRUE )
        {
            goto branch_yes_1;
        }
        else
        {
            goto branch_no_1;
        }
        branch_yes_1:;
        {
            nuitka_bool tmp_condition_result_2;
            PyObject *tmp_compexpr_left_2;
            PyObject *tmp_compexpr_right_2;
            PyObject *tmp_source_name_2;
            PyObject *tmp_mvar_value_4;
            tmp_mvar_value_4 = GET_STRING_DICT_VALUE( moduledict_platform, (Nuitka_StringObject *)const_str_plain_sys );

            if (unlikely( tmp_mvar_value_4 == NULL ))
            {
                tmp_mvar_value_4 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_sys );
            }

            if ( tmp_mvar_value_4 == NULL )
            {

                exception_type = PyExc_NameError;
                Py_INCREF( exception_type );
                exception_value = PyUnicode_FromFormat( "name '%s' is not defined", "sys" );
                exception_tb = NULL;
                NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
                CHAIN_EXCEPTION( exception_value );

                exception_lineno = 128;

                goto try_except_handler_2;
            }

            tmp_source_name_2 = tmp_mvar_value_4;
            tmp_compexpr_left_2 = LOOKUP_ATTRIBUTE( tmp_source_name_2, const_str_plain_platform );
            if ( tmp_compexpr_left_2 == NULL )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 128;

                goto try_except_handler_2;
            }
            tmp_compexpr_right_2 = const_tuple_str_plain_dos_str_plain_win32_str_plain_win16_tuple;
            tmp_res = PySequence_Contains( tmp_compexpr_right_2, tmp_compexpr_left_2 );
            Py_DECREF( tmp_compexpr_left_2 );
            if ( tmp_res == -1 )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 128;

                goto try_except_handler_2;
            }
            tmp_condition_result_2 = ( tmp_res == 1 ) ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
            if ( tmp_condition_result_2 == NUITKA_BOOL_TRUE )
            {
                goto branch_yes_2;
            }
            else
            {
                goto branch_no_2;
            }
            branch_yes_2:;
            {
                PyObject *tmp_assign_source_13;
                tmp_assign_source_13 = const_str_plain_NUL;
                UPDATE_STRING_DICT0( moduledict_platform, (Nuitka_StringObject *)const_str_plain_DEV_NULL, tmp_assign_source_13 );
            }
            goto branch_end_2;
            branch_no_2:;
            {
                PyObject *tmp_assign_source_14;
                tmp_assign_source_14 = const_str_digest_a95935884e50a51dbe5b47044bdbd9e1;
                UPDATE_STRING_DICT0( moduledict_platform, (Nuitka_StringObject *)const_str_plain_DEV_NULL, tmp_assign_source_14 );
            }
            branch_end_2:;
        }
        goto branch_end_1;
        branch_no_1:;
        tmp_result = RERAISE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
        if (unlikely( tmp_result == false ))
        {
            exception_lineno = 123;
        }

        if (exception_tb && exception_tb->tb_frame == &frame_247eaa34e4748fb26b64cbbdccd40646->m_frame) frame_247eaa34e4748fb26b64cbbdccd40646->m_frame.f_lineno = exception_tb->tb_lineno;

        goto try_except_handler_2;
        branch_end_1:;
    }
    goto try_end_2;
    // Exception handler code:
    try_except_handler_2:;
    exception_keeper_type_2 = exception_type;
    exception_keeper_value_2 = exception_value;
    exception_keeper_tb_2 = exception_tb;
    exception_keeper_lineno_2 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    // Restore previous exception.
    SET_CURRENT_EXCEPTION( exception_preserved_type_1, exception_preserved_value_1, exception_preserved_tb_1 );
    // Re-raise.
    exception_type = exception_keeper_type_2;
    exception_value = exception_keeper_value_2;
    exception_tb = exception_keeper_tb_2;
    exception_lineno = exception_keeper_lineno_2;

    goto frame_exception_exit_1;
    // End of try:
    try_end_2:;
    // Restore previous exception.
    SET_CURRENT_EXCEPTION( exception_preserved_type_1, exception_preserved_value_1, exception_preserved_tb_1 );
    goto try_end_1;
    // exception handler codes exits in all cases
    NUITKA_CANNOT_GET_HERE( platform );
    return MOD_RETURN_VALUE( NULL );
    // End of try:
    try_end_1:;
    {
        PyObject *tmp_assign_source_15;
        tmp_assign_source_15 = const_str_digest_3d17135e9932663b6ac6a081ed4b93d5;
        UPDATE_STRING_DICT0( moduledict_platform, (Nuitka_StringObject *)const_str_plain__UNIXCONFDIR, tmp_assign_source_15 );
    }
    {
        PyObject *tmp_assign_source_16;
        tmp_assign_source_16 = PyDict_Copy( const_dict_65b9fbe352edd9eb08ffb860ae9637d7 );
        UPDATE_STRING_DICT1( moduledict_platform, (Nuitka_StringObject *)const_str_plain__ver_stages, tmp_assign_source_16 );
    }
    {
        PyObject *tmp_assign_source_17;
        PyObject *tmp_called_instance_1;
        PyObject *tmp_mvar_value_5;
        tmp_mvar_value_5 = GET_STRING_DICT_VALUE( moduledict_platform, (Nuitka_StringObject *)const_str_plain_re );

        if (unlikely( tmp_mvar_value_5 == NULL ))
        {
            tmp_mvar_value_5 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_re );
        }

        if ( tmp_mvar_value_5 == NULL )
        {

            exception_type = PyExc_NameError;
            Py_INCREF( exception_type );
            exception_value = PyUnicode_FromFormat( "name '%s' is not defined", "re" );
            exception_tb = NULL;
            NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
            CHAIN_EXCEPTION( exception_value );

            exception_lineno = 154;

            goto frame_exception_exit_1;
        }

        tmp_called_instance_1 = tmp_mvar_value_5;
        frame_247eaa34e4748fb26b64cbbdccd40646->m_frame.f_lineno = 154;
        tmp_assign_source_17 = CALL_METHOD_WITH_ARGS1( tmp_called_instance_1, const_str_plain_compile, &PyTuple_GET_ITEM( const_tuple_str_digest_8a2ddc463e12981c6acfc7080a3f3b0f_tuple, 0 ) );

        if ( tmp_assign_source_17 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 154;

            goto frame_exception_exit_1;
        }
        UPDATE_STRING_DICT1( moduledict_platform, (Nuitka_StringObject *)const_str_plain__component_re, tmp_assign_source_17 );
    }
    {
        PyObject *tmp_assign_source_18;
        tmp_assign_source_18 = MAKE_FUNCTION_platform$$$function_1__comparable_version(  );



        UPDATE_STRING_DICT1( moduledict_platform, (Nuitka_StringObject *)const_str_plain__comparable_version, tmp_assign_source_18 );
    }
    {
        PyObject *tmp_assign_source_19;
        PyObject *tmp_called_name_1;
        PyObject *tmp_source_name_3;
        PyObject *tmp_mvar_value_6;
        PyObject *tmp_args_element_name_1;
        PyObject *tmp_args_element_name_2;
        PyObject *tmp_source_name_4;
        PyObject *tmp_mvar_value_7;
        tmp_mvar_value_6 = GET_STRING_DICT_VALUE( moduledict_platform, (Nuitka_StringObject *)const_str_plain_re );

        if (unlikely( tmp_mvar_value_6 == NULL ))
        {
            tmp_mvar_value_6 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_re );
        }

        if ( tmp_mvar_value_6 == NULL )
        {

            exception_type = PyExc_NameError;
            Py_INCREF( exception_type );
            exception_value = PyUnicode_FromFormat( "name '%s' is not defined", "re" );
            exception_tb = NULL;
            NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
            CHAIN_EXCEPTION( exception_value );

            exception_lineno = 170;

            goto frame_exception_exit_1;
        }

        tmp_source_name_3 = tmp_mvar_value_6;
        tmp_called_name_1 = LOOKUP_ATTRIBUTE( tmp_source_name_3, const_str_plain_compile );
        if ( tmp_called_name_1 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 170;

            goto frame_exception_exit_1;
        }
        tmp_args_element_name_1 = const_bytes_digest_da015094d65b4f8de525ca75b89cc54f;
        tmp_mvar_value_7 = GET_STRING_DICT_VALUE( moduledict_platform, (Nuitka_StringObject *)const_str_plain_re );

        if (unlikely( tmp_mvar_value_7 == NULL ))
        {
            tmp_mvar_value_7 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_re );
        }

        if ( tmp_mvar_value_7 == NULL )
        {
            Py_DECREF( tmp_called_name_1 );
            exception_type = PyExc_NameError;
            Py_INCREF( exception_type );
            exception_value = PyUnicode_FromFormat( "name '%s' is not defined", "re" );
            exception_tb = NULL;
            NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
            CHAIN_EXCEPTION( exception_value );

            exception_lineno = 174;

            goto frame_exception_exit_1;
        }

        tmp_source_name_4 = tmp_mvar_value_7;
        tmp_args_element_name_2 = LOOKUP_ATTRIBUTE( tmp_source_name_4, const_str_plain_ASCII );
        if ( tmp_args_element_name_2 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
            Py_DECREF( tmp_called_name_1 );

            exception_lineno = 174;

            goto frame_exception_exit_1;
        }
        frame_247eaa34e4748fb26b64cbbdccd40646->m_frame.f_lineno = 170;
        {
            PyObject *call_args[] = { tmp_args_element_name_1, tmp_args_element_name_2 };
            tmp_assign_source_19 = CALL_FUNCTION_WITH_ARGS2( tmp_called_name_1, call_args );
        }

        Py_DECREF( tmp_called_name_1 );
        Py_DECREF( tmp_args_element_name_2 );
        if ( tmp_assign_source_19 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 170;

            goto frame_exception_exit_1;
        }
        UPDATE_STRING_DICT1( moduledict_platform, (Nuitka_StringObject *)const_str_plain__libc_search, tmp_assign_source_19 );
    }
    {
        PyObject *tmp_assign_source_20;
        PyObject *tmp_defaults_1;
        PyObject *tmp_tuple_element_1;
        PyObject *tmp_source_name_5;
        PyObject *tmp_mvar_value_8;
        tmp_mvar_value_8 = GET_STRING_DICT_VALUE( moduledict_platform, (Nuitka_StringObject *)const_str_plain_sys );

        if (unlikely( tmp_mvar_value_8 == NULL ))
        {
            tmp_mvar_value_8 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_sys );
        }

        if ( tmp_mvar_value_8 == NULL )
        {

            exception_type = PyExc_NameError;
            Py_INCREF( exception_type );
            exception_value = PyUnicode_FromFormat( "name '%s' is not defined", "sys" );
            exception_tb = NULL;
            NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
            CHAIN_EXCEPTION( exception_value );

            exception_lineno = 176;

            goto frame_exception_exit_1;
        }

        tmp_source_name_5 = tmp_mvar_value_8;
        tmp_tuple_element_1 = LOOKUP_ATTRIBUTE( tmp_source_name_5, const_str_plain_executable );
        if ( tmp_tuple_element_1 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 176;

            goto frame_exception_exit_1;
        }
        tmp_defaults_1 = PyTuple_New( 4 );
        PyTuple_SET_ITEM( tmp_defaults_1, 0, tmp_tuple_element_1 );
        tmp_tuple_element_1 = const_str_empty;
        Py_INCREF( tmp_tuple_element_1 );
        PyTuple_SET_ITEM( tmp_defaults_1, 1, tmp_tuple_element_1 );
        tmp_tuple_element_1 = const_str_empty;
        Py_INCREF( tmp_tuple_element_1 );
        PyTuple_SET_ITEM( tmp_defaults_1, 2, tmp_tuple_element_1 );
        tmp_tuple_element_1 = const_int_pos_16384;
        Py_INCREF( tmp_tuple_element_1 );
        PyTuple_SET_ITEM( tmp_defaults_1, 3, tmp_tuple_element_1 );
        tmp_assign_source_20 = MAKE_FUNCTION_platform$$$function_2_libc_ver( tmp_defaults_1 );



        UPDATE_STRING_DICT1( moduledict_platform, (Nuitka_StringObject *)const_str_plain_libc_ver, tmp_assign_source_20 );
    }
    {
        PyObject *tmp_assign_source_21;
        tmp_assign_source_21 = MAKE_FUNCTION_platform$$$function_3__dist_try_harder(  );



        UPDATE_STRING_DICT1( moduledict_platform, (Nuitka_StringObject *)const_str_plain__dist_try_harder, tmp_assign_source_21 );
    }
    {
        PyObject *tmp_assign_source_22;
        PyObject *tmp_called_name_2;
        PyObject *tmp_source_name_6;
        PyObject *tmp_mvar_value_9;
        PyObject *tmp_args_element_name_3;
        PyObject *tmp_args_element_name_4;
        PyObject *tmp_source_name_7;
        PyObject *tmp_mvar_value_10;
        tmp_mvar_value_9 = GET_STRING_DICT_VALUE( moduledict_platform, (Nuitka_StringObject *)const_str_plain_re );

        if (unlikely( tmp_mvar_value_9 == NULL ))
        {
            tmp_mvar_value_9 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_re );
        }

        if ( tmp_mvar_value_9 == NULL )
        {

            exception_type = PyExc_NameError;
            Py_INCREF( exception_type );
            exception_value = PyUnicode_FromFormat( "name '%s' is not defined", "re" );
            exception_tb = NULL;
            NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
            CHAIN_EXCEPTION( exception_value );

            exception_lineno = 284;

            goto frame_exception_exit_1;
        }

        tmp_source_name_6 = tmp_mvar_value_9;
        tmp_called_name_2 = LOOKUP_ATTRIBUTE( tmp_source_name_6, const_str_plain_compile );
        if ( tmp_called_name_2 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 284;

            goto frame_exception_exit_1;
        }
        tmp_args_element_name_3 = const_str_digest_601d16abc8bc82193e1a2f02797a4810;
        tmp_mvar_value_10 = GET_STRING_DICT_VALUE( moduledict_platform, (Nuitka_StringObject *)const_str_plain_re );

        if (unlikely( tmp_mvar_value_10 == NULL ))
        {
            tmp_mvar_value_10 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_re );
        }

        if ( tmp_mvar_value_10 == NULL )
        {
            Py_DECREF( tmp_called_name_2 );
            exception_type = PyExc_NameError;
            Py_INCREF( exception_type );
            exception_value = PyUnicode_FromFormat( "name '%s' is not defined", "re" );
            exception_tb = NULL;
            NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
            CHAIN_EXCEPTION( exception_value );

            exception_lineno = 284;

            goto frame_exception_exit_1;
        }

        tmp_source_name_7 = tmp_mvar_value_10;
        tmp_args_element_name_4 = LOOKUP_ATTRIBUTE( tmp_source_name_7, const_str_plain_ASCII );
        if ( tmp_args_element_name_4 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
            Py_DECREF( tmp_called_name_2 );

            exception_lineno = 284;

            goto frame_exception_exit_1;
        }
        frame_247eaa34e4748fb26b64cbbdccd40646->m_frame.f_lineno = 284;
        {
            PyObject *call_args[] = { tmp_args_element_name_3, tmp_args_element_name_4 };
            tmp_assign_source_22 = CALL_FUNCTION_WITH_ARGS2( tmp_called_name_2, call_args );
        }

        Py_DECREF( tmp_called_name_2 );
        Py_DECREF( tmp_args_element_name_4 );
        if ( tmp_assign_source_22 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 284;

            goto frame_exception_exit_1;
        }
        UPDATE_STRING_DICT1( moduledict_platform, (Nuitka_StringObject *)const_str_plain__release_filename, tmp_assign_source_22 );
    }
    {
        PyObject *tmp_assign_source_23;
        PyObject *tmp_called_name_3;
        PyObject *tmp_source_name_8;
        PyObject *tmp_mvar_value_11;
        PyObject *tmp_args_element_name_5;
        PyObject *tmp_args_element_name_6;
        PyObject *tmp_source_name_9;
        PyObject *tmp_mvar_value_12;
        tmp_mvar_value_11 = GET_STRING_DICT_VALUE( moduledict_platform, (Nuitka_StringObject *)const_str_plain_re );

        if (unlikely( tmp_mvar_value_11 == NULL ))
        {
            tmp_mvar_value_11 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_re );
        }

        if ( tmp_mvar_value_11 == NULL )
        {

            exception_type = PyExc_NameError;
            Py_INCREF( exception_type );
            exception_value = PyUnicode_FromFormat( "name '%s' is not defined", "re" );
            exception_tb = NULL;
            NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
            CHAIN_EXCEPTION( exception_value );

            exception_lineno = 285;

            goto frame_exception_exit_1;
        }

        tmp_source_name_8 = tmp_mvar_value_11;
        tmp_called_name_3 = LOOKUP_ATTRIBUTE( tmp_source_name_8, const_str_plain_compile );
        if ( tmp_called_name_3 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 285;

            goto frame_exception_exit_1;
        }
        tmp_args_element_name_5 = const_str_digest_406ba29c164f1246386dcf5f110bd3ef;
        tmp_mvar_value_12 = GET_STRING_DICT_VALUE( moduledict_platform, (Nuitka_StringObject *)const_str_plain_re );

        if (unlikely( tmp_mvar_value_12 == NULL ))
        {
            tmp_mvar_value_12 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_re );
        }

        if ( tmp_mvar_value_12 == NULL )
        {
            Py_DECREF( tmp_called_name_3 );
            exception_type = PyExc_NameError;
            Py_INCREF( exception_type );
            exception_value = PyUnicode_FromFormat( "name '%s' is not defined", "re" );
            exception_tb = NULL;
            NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
            CHAIN_EXCEPTION( exception_value );

            exception_lineno = 288;

            goto frame_exception_exit_1;
        }

        tmp_source_name_9 = tmp_mvar_value_12;
        tmp_args_element_name_6 = LOOKUP_ATTRIBUTE( tmp_source_name_9, const_str_plain_ASCII );
        if ( tmp_args_element_name_6 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
            Py_DECREF( tmp_called_name_3 );

            exception_lineno = 288;

            goto frame_exception_exit_1;
        }
        frame_247eaa34e4748fb26b64cbbdccd40646->m_frame.f_lineno = 285;
        {
            PyObject *call_args[] = { tmp_args_element_name_5, tmp_args_element_name_6 };
            tmp_assign_source_23 = CALL_FUNCTION_WITH_ARGS2( tmp_called_name_3, call_args );
        }

        Py_DECREF( tmp_called_name_3 );
        Py_DECREF( tmp_args_element_name_6 );
        if ( tmp_assign_source_23 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 285;

            goto frame_exception_exit_1;
        }
        UPDATE_STRING_DICT1( moduledict_platform, (Nuitka_StringObject *)const_str_plain__lsb_release_version, tmp_assign_source_23 );
    }
    {
        PyObject *tmp_assign_source_24;
        PyObject *tmp_called_name_4;
        PyObject *tmp_source_name_10;
        PyObject *tmp_mvar_value_13;
        PyObject *tmp_args_element_name_7;
        PyObject *tmp_args_element_name_8;
        PyObject *tmp_source_name_11;
        PyObject *tmp_mvar_value_14;
        tmp_mvar_value_13 = GET_STRING_DICT_VALUE( moduledict_platform, (Nuitka_StringObject *)const_str_plain_re );

        if (unlikely( tmp_mvar_value_13 == NULL ))
        {
            tmp_mvar_value_13 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_re );
        }

        if ( tmp_mvar_value_13 == NULL )
        {

            exception_type = PyExc_NameError;
            Py_INCREF( exception_type );
            exception_value = PyUnicode_FromFormat( "name '%s' is not defined", "re" );
            exception_tb = NULL;
            NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
            CHAIN_EXCEPTION( exception_value );

            exception_lineno = 289;

            goto frame_exception_exit_1;
        }

        tmp_source_name_10 = tmp_mvar_value_13;
        tmp_called_name_4 = LOOKUP_ATTRIBUTE( tmp_source_name_10, const_str_plain_compile );
        if ( tmp_called_name_4 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 289;

            goto frame_exception_exit_1;
        }
        tmp_args_element_name_7 = const_str_digest_e8e111809a28ddaba2e8e8b614459008;
        tmp_mvar_value_14 = GET_STRING_DICT_VALUE( moduledict_platform, (Nuitka_StringObject *)const_str_plain_re );

        if (unlikely( tmp_mvar_value_14 == NULL ))
        {
            tmp_mvar_value_14 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_re );
        }

        if ( tmp_mvar_value_14 == NULL )
        {
            Py_DECREF( tmp_called_name_4 );
            exception_type = PyExc_NameError;
            Py_INCREF( exception_type );
            exception_value = PyUnicode_FromFormat( "name '%s' is not defined", "re" );
            exception_tb = NULL;
            NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
            CHAIN_EXCEPTION( exception_value );

            exception_lineno = 292;

            goto frame_exception_exit_1;
        }

        tmp_source_name_11 = tmp_mvar_value_14;
        tmp_args_element_name_8 = LOOKUP_ATTRIBUTE( tmp_source_name_11, const_str_plain_ASCII );
        if ( tmp_args_element_name_8 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
            Py_DECREF( tmp_called_name_4 );

            exception_lineno = 292;

            goto frame_exception_exit_1;
        }
        frame_247eaa34e4748fb26b64cbbdccd40646->m_frame.f_lineno = 289;
        {
            PyObject *call_args[] = { tmp_args_element_name_7, tmp_args_element_name_8 };
            tmp_assign_source_24 = CALL_FUNCTION_WITH_ARGS2( tmp_called_name_4, call_args );
        }

        Py_DECREF( tmp_called_name_4 );
        Py_DECREF( tmp_args_element_name_8 );
        if ( tmp_assign_source_24 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 289;

            goto frame_exception_exit_1;
        }
        UPDATE_STRING_DICT1( moduledict_platform, (Nuitka_StringObject *)const_str_plain__release_version, tmp_assign_source_24 );
    }
    {
        PyObject *tmp_assign_source_25;
        tmp_assign_source_25 = const_tuple_8efea55afa47d8f29d8a48c961bc7ac4_tuple;
        UPDATE_STRING_DICT0( moduledict_platform, (Nuitka_StringObject *)const_str_plain__supported_dists, tmp_assign_source_25 );
    }
    {
        PyObject *tmp_assign_source_26;
        tmp_assign_source_26 = MAKE_FUNCTION_platform$$$function_4__parse_release_file(  );



        UPDATE_STRING_DICT1( moduledict_platform, (Nuitka_StringObject *)const_str_plain__parse_release_file, tmp_assign_source_26 );
    }
    {
        PyObject *tmp_assign_source_27;
        PyObject *tmp_defaults_2;
        PyObject *tmp_tuple_element_2;
        PyObject *tmp_mvar_value_15;
        tmp_tuple_element_2 = const_str_empty;
        tmp_defaults_2 = PyTuple_New( 5 );
        Py_INCREF( tmp_tuple_element_2 );
        PyTuple_SET_ITEM( tmp_defaults_2, 0, tmp_tuple_element_2 );
        tmp_tuple_element_2 = const_str_empty;
        Py_INCREF( tmp_tuple_element_2 );
        PyTuple_SET_ITEM( tmp_defaults_2, 1, tmp_tuple_element_2 );
        tmp_tuple_element_2 = const_str_empty;
        Py_INCREF( tmp_tuple_element_2 );
        PyTuple_SET_ITEM( tmp_defaults_2, 2, tmp_tuple_element_2 );
        tmp_mvar_value_15 = GET_STRING_DICT_VALUE( moduledict_platform, (Nuitka_StringObject *)const_str_plain__supported_dists );

        if (unlikely( tmp_mvar_value_15 == NULL ))
        {
            tmp_mvar_value_15 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain__supported_dists );
        }

        CHECK_OBJECT( tmp_mvar_value_15 );
        tmp_tuple_element_2 = tmp_mvar_value_15;
        Py_INCREF( tmp_tuple_element_2 );
        PyTuple_SET_ITEM( tmp_defaults_2, 3, tmp_tuple_element_2 );
        tmp_tuple_element_2 = const_int_pos_1;
        Py_INCREF( tmp_tuple_element_2 );
        PyTuple_SET_ITEM( tmp_defaults_2, 4, tmp_tuple_element_2 );
        tmp_assign_source_27 = MAKE_FUNCTION_platform$$$function_5_linux_distribution( tmp_defaults_2 );



        UPDATE_STRING_DICT1( moduledict_platform, (Nuitka_StringObject *)const_str_plain_linux_distribution, tmp_assign_source_27 );
    }
    {
        PyObject *tmp_assign_source_28;
        tmp_assign_source_28 = MAKE_FUNCTION_platform$$$function_6__linux_distribution(  );



        UPDATE_STRING_DICT1( moduledict_platform, (Nuitka_StringObject *)const_str_plain__linux_distribution, tmp_assign_source_28 );
    }
    {
        PyObject *tmp_assign_source_29;
        PyObject *tmp_defaults_3;
        PyObject *tmp_tuple_element_3;
        PyObject *tmp_mvar_value_16;
        tmp_tuple_element_3 = const_str_empty;
        tmp_defaults_3 = PyTuple_New( 4 );
        Py_INCREF( tmp_tuple_element_3 );
        PyTuple_SET_ITEM( tmp_defaults_3, 0, tmp_tuple_element_3 );
        tmp_tuple_element_3 = const_str_empty;
        Py_INCREF( tmp_tuple_element_3 );
        PyTuple_SET_ITEM( tmp_defaults_3, 1, tmp_tuple_element_3 );
        tmp_tuple_element_3 = const_str_empty;
        Py_INCREF( tmp_tuple_element_3 );
        PyTuple_SET_ITEM( tmp_defaults_3, 2, tmp_tuple_element_3 );
        tmp_mvar_value_16 = GET_STRING_DICT_VALUE( moduledict_platform, (Nuitka_StringObject *)const_str_plain__supported_dists );

        if (unlikely( tmp_mvar_value_16 == NULL ))
        {
            tmp_mvar_value_16 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain__supported_dists );
        }

        CHECK_OBJECT( tmp_mvar_value_16 );
        tmp_tuple_element_3 = tmp_mvar_value_16;
        Py_INCREF( tmp_tuple_element_3 );
        PyTuple_SET_ITEM( tmp_defaults_3, 3, tmp_tuple_element_3 );
        tmp_assign_source_29 = MAKE_FUNCTION_platform$$$function_7_dist( tmp_defaults_3 );



        UPDATE_STRING_DICT1( moduledict_platform, (Nuitka_StringObject *)const_str_plain_dist, tmp_assign_source_29 );
    }
    {
        PyObject *tmp_assign_source_30;
        PyObject *tmp_defaults_4;
        tmp_defaults_4 = const_tuple_str_plain_r_int_neg_1_tuple;
        Py_INCREF( tmp_defaults_4 );
        tmp_assign_source_30 = MAKE_FUNCTION_platform$$$function_8_popen( tmp_defaults_4 );



        UPDATE_STRING_DICT1( moduledict_platform, (Nuitka_StringObject *)const_str_plain_popen, tmp_assign_source_30 );
    }
    {
        PyObject *tmp_assign_source_31;
        PyObject *tmp_defaults_5;
        tmp_defaults_5 = const_tuple_str_empty_tuple;
        Py_INCREF( tmp_defaults_5 );
        tmp_assign_source_31 = MAKE_FUNCTION_platform$$$function_9__norm_version( tmp_defaults_5 );



        UPDATE_STRING_DICT1( moduledict_platform, (Nuitka_StringObject *)const_str_plain__norm_version, tmp_assign_source_31 );
    }
    {
        PyObject *tmp_assign_source_32;
        PyObject *tmp_called_instance_2;
        PyObject *tmp_mvar_value_17;
        tmp_mvar_value_17 = GET_STRING_DICT_VALUE( moduledict_platform, (Nuitka_StringObject *)const_str_plain_re );

        if (unlikely( tmp_mvar_value_17 == NULL ))
        {
            tmp_mvar_value_17 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_re );
        }

        if ( tmp_mvar_value_17 == NULL )
        {

            exception_type = PyExc_NameError;
            Py_INCREF( exception_type );
            exception_value = PyUnicode_FromFormat( "name '%s' is not defined", "re" );
            exception_tb = NULL;
            NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
            CHAIN_EXCEPTION( exception_value );

            exception_lineno = 442;

            goto frame_exception_exit_1;
        }

        tmp_called_instance_2 = tmp_mvar_value_17;
        frame_247eaa34e4748fb26b64cbbdccd40646->m_frame.f_lineno = 442;
        tmp_assign_source_32 = CALL_METHOD_WITH_ARGS1( tmp_called_instance_2, const_str_plain_compile, &PyTuple_GET_ITEM( const_tuple_str_digest_53043fe1d675776aec2f08acc74fa298_tuple, 0 ) );

        if ( tmp_assign_source_32 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 442;

            goto frame_exception_exit_1;
        }
        UPDATE_STRING_DICT1( moduledict_platform, (Nuitka_StringObject *)const_str_plain__ver_output, tmp_assign_source_32 );
    }
    {
        PyObject *tmp_assign_source_33;
        PyObject *tmp_defaults_6;
        tmp_defaults_6 = const_tuple_ee7b6c82982232b3ab5d55b6d04ebec0_tuple;
        Py_INCREF( tmp_defaults_6 );
        tmp_assign_source_33 = MAKE_FUNCTION_platform$$$function_10__syscmd_ver( tmp_defaults_6 );



        UPDATE_STRING_DICT1( moduledict_platform, (Nuitka_StringObject *)const_str_plain__syscmd_ver, tmp_assign_source_33 );
    }
    {
        PyObject *tmp_assign_source_34;
        tmp_assign_source_34 = PyDict_Copy( const_dict_9668ec65d04d52f8707c28d0bc56a8f5 );
        UPDATE_STRING_DICT1( moduledict_platform, (Nuitka_StringObject *)const_str_plain__WIN32_CLIENT_RELEASES, tmp_assign_source_34 );
    }
    {
        PyObject *tmp_assign_source_35;
        tmp_assign_source_35 = PyDict_Copy( const_dict_2dcb717810229b46c02589cbc403e20d );
        UPDATE_STRING_DICT1( moduledict_platform, (Nuitka_StringObject *)const_str_plain__WIN32_SERVER_RELEASES, tmp_assign_source_35 );
    }
    {
        PyObject *tmp_assign_source_36;
        PyObject *tmp_defaults_7;
        tmp_defaults_7 = const_tuple_str_empty_str_empty_str_empty_str_empty_tuple;
        Py_INCREF( tmp_defaults_7 );
        tmp_assign_source_36 = MAKE_FUNCTION_platform$$$function_11_win32_ver( tmp_defaults_7 );



        UPDATE_STRING_DICT1( moduledict_platform, (Nuitka_StringObject *)const_str_plain_win32_ver, tmp_assign_source_36 );
    }
    {
        PyObject *tmp_assign_source_37;
        tmp_assign_source_37 = MAKE_FUNCTION_platform$$$function_12__mac_ver_xml(  );



        UPDATE_STRING_DICT1( moduledict_platform, (Nuitka_StringObject *)const_str_plain__mac_ver_xml, tmp_assign_source_37 );
    }
    {
        PyObject *tmp_assign_source_38;
        PyObject *tmp_defaults_8;
        tmp_defaults_8 = const_tuple_879bc0eae82e9822987fa448ee507b55_tuple;
        Py_INCREF( tmp_defaults_8 );
        tmp_assign_source_38 = MAKE_FUNCTION_platform$$$function_13_mac_ver( tmp_defaults_8 );



        UPDATE_STRING_DICT1( moduledict_platform, (Nuitka_StringObject *)const_str_plain_mac_ver, tmp_assign_source_38 );
    }
    {
        PyObject *tmp_assign_source_39;
        tmp_assign_source_39 = MAKE_FUNCTION_platform$$$function_14__java_getprop(  );



        UPDATE_STRING_DICT1( moduledict_platform, (Nuitka_StringObject *)const_str_plain__java_getprop, tmp_assign_source_39 );
    }
    {
        PyObject *tmp_assign_source_40;
        PyObject *tmp_defaults_9;
        tmp_defaults_9 = const_tuple_4d8f6d47b682f58a27abda6ded6cc7f6_tuple;
        Py_INCREF( tmp_defaults_9 );
        tmp_assign_source_40 = MAKE_FUNCTION_platform$$$function_15_java_ver( tmp_defaults_9 );



        UPDATE_STRING_DICT1( moduledict_platform, (Nuitka_StringObject *)const_str_plain_java_ver, tmp_assign_source_40 );
    }
    {
        PyObject *tmp_assign_source_41;
        tmp_assign_source_41 = MAKE_FUNCTION_platform$$$function_16_system_alias(  );



        UPDATE_STRING_DICT1( moduledict_platform, (Nuitka_StringObject *)const_str_plain_system_alias, tmp_assign_source_41 );
    }
    {
        PyObject *tmp_assign_source_42;
        tmp_assign_source_42 = MAKE_FUNCTION_platform$$$function_17__platform(  );



        UPDATE_STRING_DICT1( moduledict_platform, (Nuitka_StringObject *)const_str_plain__platform, tmp_assign_source_42 );
    }
    {
        PyObject *tmp_assign_source_43;
        PyObject *tmp_defaults_10;
        tmp_defaults_10 = const_tuple_str_empty_tuple;
        Py_INCREF( tmp_defaults_10 );
        tmp_assign_source_43 = MAKE_FUNCTION_platform$$$function_18__node( tmp_defaults_10 );



        UPDATE_STRING_DICT1( moduledict_platform, (Nuitka_StringObject *)const_str_plain__node, tmp_assign_source_43 );
    }
    {
        PyObject *tmp_assign_source_44;
        tmp_assign_source_44 = MAKE_FUNCTION_platform$$$function_19__follow_symlinks(  );



        UPDATE_STRING_DICT1( moduledict_platform, (Nuitka_StringObject *)const_str_plain__follow_symlinks, tmp_assign_source_44 );
    }
    {
        PyObject *tmp_assign_source_45;
        PyObject *tmp_defaults_11;
        tmp_defaults_11 = const_tuple_str_empty_tuple;
        Py_INCREF( tmp_defaults_11 );
        tmp_assign_source_45 = MAKE_FUNCTION_platform$$$function_20__syscmd_uname( tmp_defaults_11 );



        UPDATE_STRING_DICT1( moduledict_platform, (Nuitka_StringObject *)const_str_plain__syscmd_uname, tmp_assign_source_45 );
    }
    {
        PyObject *tmp_assign_source_46;
        PyObject *tmp_defaults_12;
        tmp_defaults_12 = const_tuple_str_empty_tuple;
        Py_INCREF( tmp_defaults_12 );
        tmp_assign_source_46 = MAKE_FUNCTION_platform$$$function_21__syscmd_file( tmp_defaults_12 );



        UPDATE_STRING_DICT1( moduledict_platform, (Nuitka_StringObject *)const_str_plain__syscmd_file, tmp_assign_source_46 );
    }
    {
        PyObject *tmp_assign_source_47;
        tmp_assign_source_47 = PyDict_Copy( const_dict_920ba897df3ccc986f41bdabeeb05d88 );
        UPDATE_STRING_DICT1( moduledict_platform, (Nuitka_StringObject *)const_str_plain__default_architecture, tmp_assign_source_47 );
    }
    {
        PyObject *tmp_assign_source_48;
        PyObject *tmp_defaults_13;
        PyObject *tmp_tuple_element_4;
        PyObject *tmp_source_name_12;
        PyObject *tmp_mvar_value_18;
        tmp_mvar_value_18 = GET_STRING_DICT_VALUE( moduledict_platform, (Nuitka_StringObject *)const_str_plain_sys );

        if (unlikely( tmp_mvar_value_18 == NULL ))
        {
            tmp_mvar_value_18 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_sys );
        }

        if ( tmp_mvar_value_18 == NULL )
        {

            exception_type = PyExc_NameError;
            Py_INCREF( exception_type );
            exception_value = PyUnicode_FromFormat( "name '%s' is not defined", "sys" );
            exception_tb = NULL;
            NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
            CHAIN_EXCEPTION( exception_value );

            exception_lineno = 834;

            goto frame_exception_exit_1;
        }

        tmp_source_name_12 = tmp_mvar_value_18;
        tmp_tuple_element_4 = LOOKUP_ATTRIBUTE( tmp_source_name_12, const_str_plain_executable );
        if ( tmp_tuple_element_4 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 834;

            goto frame_exception_exit_1;
        }
        tmp_defaults_13 = PyTuple_New( 3 );
        PyTuple_SET_ITEM( tmp_defaults_13, 0, tmp_tuple_element_4 );
        tmp_tuple_element_4 = const_str_empty;
        Py_INCREF( tmp_tuple_element_4 );
        PyTuple_SET_ITEM( tmp_defaults_13, 1, tmp_tuple_element_4 );
        tmp_tuple_element_4 = const_str_empty;
        Py_INCREF( tmp_tuple_element_4 );
        PyTuple_SET_ITEM( tmp_defaults_13, 2, tmp_tuple_element_4 );
        tmp_assign_source_48 = MAKE_FUNCTION_platform$$$function_22_architecture( tmp_defaults_13 );



        UPDATE_STRING_DICT1( moduledict_platform, (Nuitka_StringObject *)const_str_plain_architecture, tmp_assign_source_48 );
    }
    {
        PyObject *tmp_assign_source_49;
        PyObject *tmp_called_instance_3;
        PyObject *tmp_mvar_value_19;
        tmp_mvar_value_19 = GET_STRING_DICT_VALUE( moduledict_platform, (Nuitka_StringObject *)const_str_plain_collections );

        if (unlikely( tmp_mvar_value_19 == NULL ))
        {
            tmp_mvar_value_19 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_collections );
        }

        if ( tmp_mvar_value_19 == NULL )
        {

            exception_type = PyExc_NameError;
            Py_INCREF( exception_type );
            exception_value = PyUnicode_FromFormat( "name '%s' is not defined", "collections" );
            exception_tb = NULL;
            NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
            CHAIN_EXCEPTION( exception_value );

            exception_lineno = 918;

            goto frame_exception_exit_1;
        }

        tmp_called_instance_3 = tmp_mvar_value_19;
        frame_247eaa34e4748fb26b64cbbdccd40646->m_frame.f_lineno = 918;
        tmp_assign_source_49 = CALL_METHOD_WITH_ARGS2( tmp_called_instance_3, const_str_plain_namedtuple, &PyTuple_GET_ITEM( const_tuple_96172174f0a81bb68e9d280fa37de39a_tuple, 0 ) );

        if ( tmp_assign_source_49 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 918;

            goto frame_exception_exit_1;
        }
        UPDATE_STRING_DICT1( moduledict_platform, (Nuitka_StringObject *)const_str_plain_uname_result, tmp_assign_source_49 );
    }
    {
        PyObject *tmp_assign_source_50;
        tmp_assign_source_50 = Py_None;
        UPDATE_STRING_DICT0( moduledict_platform, (Nuitka_StringObject *)const_str_plain__uname_cache, tmp_assign_source_50 );
    }
    {
        PyObject *tmp_assign_source_51;
        tmp_assign_source_51 = MAKE_FUNCTION_platform$$$function_23_uname(  );



        UPDATE_STRING_DICT1( moduledict_platform, (Nuitka_StringObject *)const_str_plain_uname, tmp_assign_source_51 );
    }
    {
        PyObject *tmp_assign_source_52;
        tmp_assign_source_52 = MAKE_FUNCTION_platform$$$function_24_system(  );



        UPDATE_STRING_DICT1( moduledict_platform, (Nuitka_StringObject *)const_str_plain_system, tmp_assign_source_52 );
    }
    {
        PyObject *tmp_assign_source_53;
        tmp_assign_source_53 = MAKE_FUNCTION_platform$$$function_25_node(  );



        UPDATE_STRING_DICT1( moduledict_platform, (Nuitka_StringObject *)const_str_plain_node, tmp_assign_source_53 );
    }
    {
        PyObject *tmp_assign_source_54;
        tmp_assign_source_54 = MAKE_FUNCTION_platform$$$function_26_release(  );



        UPDATE_STRING_DICT1( moduledict_platform, (Nuitka_StringObject *)const_str_plain_release, tmp_assign_source_54 );
    }
    {
        PyObject *tmp_assign_source_55;
        tmp_assign_source_55 = MAKE_FUNCTION_platform$$$function_27_version(  );



        UPDATE_STRING_DICT1( moduledict_platform, (Nuitka_StringObject *)const_str_plain_version, tmp_assign_source_55 );
    }
    {
        PyObject *tmp_assign_source_56;
        tmp_assign_source_56 = MAKE_FUNCTION_platform$$$function_28_machine(  );



        UPDATE_STRING_DICT1( moduledict_platform, (Nuitka_StringObject *)const_str_plain_machine, tmp_assign_source_56 );
    }
    {
        PyObject *tmp_assign_source_57;
        tmp_assign_source_57 = MAKE_FUNCTION_platform$$$function_29_processor(  );



        UPDATE_STRING_DICT1( moduledict_platform, (Nuitka_StringObject *)const_str_plain_processor, tmp_assign_source_57 );
    }
    {
        PyObject *tmp_assign_source_58;
        PyObject *tmp_called_name_5;
        PyObject *tmp_source_name_13;
        PyObject *tmp_mvar_value_20;
        PyObject *tmp_args_element_name_9;
        PyObject *tmp_args_element_name_10;
        PyObject *tmp_source_name_14;
        PyObject *tmp_mvar_value_21;
        tmp_mvar_value_20 = GET_STRING_DICT_VALUE( moduledict_platform, (Nuitka_StringObject *)const_str_plain_re );

        if (unlikely( tmp_mvar_value_20 == NULL ))
        {
            tmp_mvar_value_20 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_re );
        }

        if ( tmp_mvar_value_20 == NULL )
        {

            exception_type = PyExc_NameError;
            Py_INCREF( exception_type );
            exception_value = PyUnicode_FromFormat( "name '%s' is not defined", "re" );
            exception_tb = NULL;
            NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
            CHAIN_EXCEPTION( exception_value );

            exception_lineno = 1121;

            goto frame_exception_exit_1;
        }

        tmp_source_name_13 = tmp_mvar_value_20;
        tmp_called_name_5 = LOOKUP_ATTRIBUTE( tmp_source_name_13, const_str_plain_compile );
        if ( tmp_called_name_5 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 1121;

            goto frame_exception_exit_1;
        }
        tmp_args_element_name_9 = const_str_digest_7a422a1de8755ae10bd232163b9d1873;
        tmp_mvar_value_21 = GET_STRING_DICT_VALUE( moduledict_platform, (Nuitka_StringObject *)const_str_plain_re );

        if (unlikely( tmp_mvar_value_21 == NULL ))
        {
            tmp_mvar_value_21 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_re );
        }

        if ( tmp_mvar_value_21 == NULL )
        {
            Py_DECREF( tmp_called_name_5 );
            exception_type = PyExc_NameError;
            Py_INCREF( exception_type );
            exception_value = PyUnicode_FromFormat( "name '%s' is not defined", "re" );
            exception_tb = NULL;
            NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
            CHAIN_EXCEPTION( exception_value );

            exception_lineno = 1126;

            goto frame_exception_exit_1;
        }

        tmp_source_name_14 = tmp_mvar_value_21;
        tmp_args_element_name_10 = LOOKUP_ATTRIBUTE( tmp_source_name_14, const_str_plain_ASCII );
        if ( tmp_args_element_name_10 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
            Py_DECREF( tmp_called_name_5 );

            exception_lineno = 1126;

            goto frame_exception_exit_1;
        }
        frame_247eaa34e4748fb26b64cbbdccd40646->m_frame.f_lineno = 1121;
        {
            PyObject *call_args[] = { tmp_args_element_name_9, tmp_args_element_name_10 };
            tmp_assign_source_58 = CALL_FUNCTION_WITH_ARGS2( tmp_called_name_5, call_args );
        }

        Py_DECREF( tmp_called_name_5 );
        Py_DECREF( tmp_args_element_name_10 );
        if ( tmp_assign_source_58 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 1121;

            goto frame_exception_exit_1;
        }
        UPDATE_STRING_DICT1( moduledict_platform, (Nuitka_StringObject *)const_str_plain__sys_version_parser, tmp_assign_source_58 );
    }
    {
        PyObject *tmp_assign_source_59;
        PyObject *tmp_called_name_6;
        PyObject *tmp_source_name_15;
        PyObject *tmp_mvar_value_22;
        PyObject *tmp_args_element_name_11;
        PyObject *tmp_args_element_name_12;
        PyObject *tmp_source_name_16;
        PyObject *tmp_mvar_value_23;
        tmp_mvar_value_22 = GET_STRING_DICT_VALUE( moduledict_platform, (Nuitka_StringObject *)const_str_plain_re );

        if (unlikely( tmp_mvar_value_22 == NULL ))
        {
            tmp_mvar_value_22 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_re );
        }

        if ( tmp_mvar_value_22 == NULL )
        {

            exception_type = PyExc_NameError;
            Py_INCREF( exception_type );
            exception_value = PyUnicode_FromFormat( "name '%s' is not defined", "re" );
            exception_tb = NULL;
            NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
            CHAIN_EXCEPTION( exception_value );

            exception_lineno = 1128;

            goto frame_exception_exit_1;
        }

        tmp_source_name_15 = tmp_mvar_value_22;
        tmp_called_name_6 = LOOKUP_ATTRIBUTE( tmp_source_name_15, const_str_plain_compile );
        if ( tmp_called_name_6 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 1128;

            goto frame_exception_exit_1;
        }
        tmp_args_element_name_11 = const_str_digest_b54ae7c64ddfba5a43ec9389092ce978;
        tmp_mvar_value_23 = GET_STRING_DICT_VALUE( moduledict_platform, (Nuitka_StringObject *)const_str_plain_re );

        if (unlikely( tmp_mvar_value_23 == NULL ))
        {
            tmp_mvar_value_23 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_re );
        }

        if ( tmp_mvar_value_23 == NULL )
        {
            Py_DECREF( tmp_called_name_6 );
            exception_type = PyExc_NameError;
            Py_INCREF( exception_type );
            exception_value = PyUnicode_FromFormat( "name '%s' is not defined", "re" );
            exception_tb = NULL;
            NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
            CHAIN_EXCEPTION( exception_value );

            exception_lineno = 1132;

            goto frame_exception_exit_1;
        }

        tmp_source_name_16 = tmp_mvar_value_23;
        tmp_args_element_name_12 = LOOKUP_ATTRIBUTE( tmp_source_name_16, const_str_plain_ASCII );
        if ( tmp_args_element_name_12 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
            Py_DECREF( tmp_called_name_6 );

            exception_lineno = 1132;

            goto frame_exception_exit_1;
        }
        frame_247eaa34e4748fb26b64cbbdccd40646->m_frame.f_lineno = 1128;
        {
            PyObject *call_args[] = { tmp_args_element_name_11, tmp_args_element_name_12 };
            tmp_assign_source_59 = CALL_FUNCTION_WITH_ARGS2( tmp_called_name_6, call_args );
        }

        Py_DECREF( tmp_called_name_6 );
        Py_DECREF( tmp_args_element_name_12 );
        if ( tmp_assign_source_59 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 1128;

            goto frame_exception_exit_1;
        }
        UPDATE_STRING_DICT1( moduledict_platform, (Nuitka_StringObject *)const_str_plain__ironpython_sys_version_parser, tmp_assign_source_59 );
    }
    {
        PyObject *tmp_assign_source_60;
        PyObject *tmp_called_instance_4;
        PyObject *tmp_mvar_value_24;
        tmp_mvar_value_24 = GET_STRING_DICT_VALUE( moduledict_platform, (Nuitka_StringObject *)const_str_plain_re );

        if (unlikely( tmp_mvar_value_24 == NULL ))
        {
            tmp_mvar_value_24 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_re );
        }

        if ( tmp_mvar_value_24 == NULL )
        {

            exception_type = PyExc_NameError;
            Py_INCREF( exception_type );
            exception_value = PyUnicode_FromFormat( "name '%s' is not defined", "re" );
            exception_tb = NULL;
            NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
            CHAIN_EXCEPTION( exception_value );

            exception_lineno = 1135;

            goto frame_exception_exit_1;
        }

        tmp_called_instance_4 = tmp_mvar_value_24;
        frame_247eaa34e4748fb26b64cbbdccd40646->m_frame.f_lineno = 1135;
        tmp_assign_source_60 = CALL_METHOD_WITH_ARGS1( tmp_called_instance_4, const_str_plain_compile, &PyTuple_GET_ITEM( const_tuple_str_digest_9fbf7115c1919f9e6be3d00ddd2a0e01_tuple, 0 ) );

        if ( tmp_assign_source_60 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 1135;

            goto frame_exception_exit_1;
        }
        UPDATE_STRING_DICT1( moduledict_platform, (Nuitka_StringObject *)const_str_plain__ironpython26_sys_version_parser, tmp_assign_source_60 );
    }
    {
        PyObject *tmp_assign_source_61;
        PyObject *tmp_called_instance_5;
        PyObject *tmp_mvar_value_25;
        tmp_mvar_value_25 = GET_STRING_DICT_VALUE( moduledict_platform, (Nuitka_StringObject *)const_str_plain_re );

        if (unlikely( tmp_mvar_value_25 == NULL ))
        {
            tmp_mvar_value_25 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_re );
        }

        if ( tmp_mvar_value_25 == NULL )
        {

            exception_type = PyExc_NameError;
            Py_INCREF( exception_type );
            exception_value = PyUnicode_FromFormat( "name '%s' is not defined", "re" );
            exception_tb = NULL;
            NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
            CHAIN_EXCEPTION( exception_value );

            exception_lineno = 1142;

            goto frame_exception_exit_1;
        }

        tmp_called_instance_5 = tmp_mvar_value_25;
        frame_247eaa34e4748fb26b64cbbdccd40646->m_frame.f_lineno = 1142;
        tmp_assign_source_61 = CALL_METHOD_WITH_ARGS1( tmp_called_instance_5, const_str_plain_compile, &PyTuple_GET_ITEM( const_tuple_str_digest_a9c432dbaad1611bb26c6aec50c9d536_tuple, 0 ) );

        if ( tmp_assign_source_61 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 1142;

            goto frame_exception_exit_1;
        }
        UPDATE_STRING_DICT1( moduledict_platform, (Nuitka_StringObject *)const_str_plain__pypy_sys_version_parser, tmp_assign_source_61 );
    }

    // Restore frame exception if necessary.
#if 0
    RESTORE_FRAME_EXCEPTION( frame_247eaa34e4748fb26b64cbbdccd40646 );
#endif
    popFrameStack();

    assertFrameObject( frame_247eaa34e4748fb26b64cbbdccd40646 );

    goto frame_no_exception_1;

    frame_exception_exit_1:;
#if 0
    RESTORE_FRAME_EXCEPTION( frame_247eaa34e4748fb26b64cbbdccd40646 );
#endif

    if ( exception_tb == NULL )
    {
        exception_tb = MAKE_TRACEBACK( frame_247eaa34e4748fb26b64cbbdccd40646, exception_lineno );
    }
    else if ( exception_tb->tb_frame != &frame_247eaa34e4748fb26b64cbbdccd40646->m_frame )
    {
        exception_tb = ADD_TRACEBACK( exception_tb, frame_247eaa34e4748fb26b64cbbdccd40646, exception_lineno );
    }

    // Put the previous frame back on top.
    popFrameStack();

    // Return the error.
    goto module_exception_exit;

    frame_no_exception_1:;
    {
        PyObject *tmp_assign_source_62;
        tmp_assign_source_62 = PyDict_New();
        UPDATE_STRING_DICT1( moduledict_platform, (Nuitka_StringObject *)const_str_plain__sys_version_cache, tmp_assign_source_62 );
    }
    {
        PyObject *tmp_assign_source_63;
        PyObject *tmp_defaults_14;
        tmp_defaults_14 = const_tuple_none_tuple;
        Py_INCREF( tmp_defaults_14 );
        tmp_assign_source_63 = MAKE_FUNCTION_platform$$$function_30__sys_version( tmp_defaults_14 );



        UPDATE_STRING_DICT1( moduledict_platform, (Nuitka_StringObject *)const_str_plain__sys_version, tmp_assign_source_63 );
    }
    {
        PyObject *tmp_assign_source_64;
        tmp_assign_source_64 = MAKE_FUNCTION_platform$$$function_31_python_implementation(  );



        UPDATE_STRING_DICT1( moduledict_platform, (Nuitka_StringObject *)const_str_plain_python_implementation, tmp_assign_source_64 );
    }
    {
        PyObject *tmp_assign_source_65;
        tmp_assign_source_65 = MAKE_FUNCTION_platform$$$function_32_python_version(  );



        UPDATE_STRING_DICT1( moduledict_platform, (Nuitka_StringObject *)const_str_plain_python_version, tmp_assign_source_65 );
    }
    {
        PyObject *tmp_assign_source_66;
        tmp_assign_source_66 = MAKE_FUNCTION_platform$$$function_33_python_version_tuple(  );



        UPDATE_STRING_DICT1( moduledict_platform, (Nuitka_StringObject *)const_str_plain_python_version_tuple, tmp_assign_source_66 );
    }
    {
        PyObject *tmp_assign_source_67;
        tmp_assign_source_67 = MAKE_FUNCTION_platform$$$function_34_python_branch(  );



        UPDATE_STRING_DICT1( moduledict_platform, (Nuitka_StringObject *)const_str_plain_python_branch, tmp_assign_source_67 );
    }
    {
        PyObject *tmp_assign_source_68;
        tmp_assign_source_68 = MAKE_FUNCTION_platform$$$function_35_python_revision(  );



        UPDATE_STRING_DICT1( moduledict_platform, (Nuitka_StringObject *)const_str_plain_python_revision, tmp_assign_source_68 );
    }
    {
        PyObject *tmp_assign_source_69;
        tmp_assign_source_69 = MAKE_FUNCTION_platform$$$function_36_python_build(  );



        UPDATE_STRING_DICT1( moduledict_platform, (Nuitka_StringObject *)const_str_plain_python_build, tmp_assign_source_69 );
    }
    {
        PyObject *tmp_assign_source_70;
        tmp_assign_source_70 = MAKE_FUNCTION_platform$$$function_37_python_compiler(  );



        UPDATE_STRING_DICT1( moduledict_platform, (Nuitka_StringObject *)const_str_plain_python_compiler, tmp_assign_source_70 );
    }
    {
        PyObject *tmp_assign_source_71;
        tmp_assign_source_71 = PyDict_New();
        UPDATE_STRING_DICT1( moduledict_platform, (Nuitka_StringObject *)const_str_plain__platform_cache, tmp_assign_source_71 );
    }
    {
        PyObject *tmp_assign_source_72;
        PyObject *tmp_defaults_15;
        tmp_defaults_15 = const_tuple_int_0_int_0_tuple;
        Py_INCREF( tmp_defaults_15 );
        tmp_assign_source_72 = MAKE_FUNCTION_platform$$$function_38_platform( tmp_defaults_15 );



        UPDATE_STRING_DICT1( moduledict_platform, (Nuitka_StringObject *)const_str_plain_platform, tmp_assign_source_72 );
    }

#if _NUITKA_EXPERIMENTAL_PKGUTIL_ITERMODULES
#if 0 && 0
    {
        PyObject *path_value = GET_STRING_DICT_VALUE( moduledict_platform, (Nuitka_StringObject *)const_str_plain___path__ );

        if (path_value && PyList_CheckExact(path_value) && PyList_Size(path_value) > 0)
        {
            PyObject *path_element = PyList_GetItem( path_value, 0 );

            PyObject *path_importer_cache = PySys_GetObject((char *)"path_importer_cache");
            CHECK_OBJECT( path_importer_cache );

            int res = PyDict_SetItem( path_importer_cache, path_element, (PyObject *)&Nuitka_Loader_Type );
            assert( res == 0 );
        }
    }
#endif
#endif

    return MOD_RETURN_VALUE( module_platform );
    module_exception_exit:
    RESTORE_ERROR_OCCURRED( exception_type, exception_value, exception_tb );
    return MOD_RETURN_VALUE( NULL );
}
