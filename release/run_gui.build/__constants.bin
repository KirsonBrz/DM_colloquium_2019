NUITKA_PACKAGE_PyQt5_path<module PyQt5>\Qt\bin;PyQt5\__init__.pysetLibraryPaths<module PyQt5.QtCore-postLoad>qt-pluginsPyQt5\QtCore.pyd-postLoadReturn first release in which this feature was recognized.

        This is a 5-tuple, of the same form as sys.version_info.
        _FeaturegetOptionalReleaseCO_FUTURE_UNICODE_LITERALSmandatoryReleaseCO_FUTURE_GENERATOR_STOPdivisionbarry_as_FLUFLCO_FUTURE_DIVISIONgenerator_stopCO_FUTURE_ANNOTATIONSabsolute_importCO_FUTURE_BARRY_AS_BDFL<module __future__>optionalReleasenested_scopesgeneratorswith_statementprint_functionunicode_literalsannotationsCO_FUTURE_WITH_STATEMENTRecord of phased-in incompatible language changes.

Each line is of the form:

    FeatureName = "_Feature(" OptionalRelease "," MandatoryRelease ","
                              CompilerFlag ")"

where, normally, OptionalRelease < MandatoryRelease, and both are 5-tuples
of the same form as sys.version_info:

    (PY_MAJOR_VERSION, # the 2 in 2.1.0a3; an int
     PY_MINOR_VERSION, # the 1; an int
     PY_MICRO_VERSION, # the 0; an int
     PY_RELEASE_LEVEL, # "alpha", "beta", "candidate" or "final"; string
     PY_RELEASE_SERIAL # the 3; an int
    )

OptionalRelease records the first release in which

    from __future__ import FeatureName

was accepted.

In the case of MandatoryReleases that have not yet occurred,
MandatoryRelease predicts the release in which the feature will become part
of the language.

Else MandatoryRelease records when the feature became part of the language;
in releases at or after that, modules no longer need

    from __future__ import FeatureName

to use the feature in question, but may continue to use such imports.

MandatoryRelease may also be None, meaning that a planned feature got
dropped.

Instances of class _Feature have two corresponding methods,
.getOptionalRelease() and .getMandatoryRelease().

CompilerFlag is the (bitfield) flag that should be passed in the fourth
argument to the builtin function compile() to enable the feature in
dynamically compiled code.  This flag is stored in the .compiler_flag
attribute on _Future instances.  These values must match the appropriate
#defines of CO_xxx flags in Include/compile.h.

No feature line is ever to be deleted from this file.
_Feature.__init___Feature.getMandatoryReleaseReturn release in which this feature will become mandatory.

        This is a 5-tuple, of the same form as sys.version_info, or, if
        the feature was dropped, is None.
        _Feature.__repr__CO_FUTURE_ABSOLUTE_IMPORT_Feature.getOptionalReleaseCO_NESTED__future__.pyCO_FUTURE_PRINT_FUNCTIONCO_GENERATOR_ALLOWEDMainWindow.button_Z_clickedzappqappbutton_P_clickedMainWindow.button_N_clickedbutton_Q_clickedpappMainWindow.__init__exec_run_gui.pymyappnappMainWindow.button_P_clicked<module>QApplicationMainWindow.button_Q_clicked__annotations____builtin__basestringStandardError_socketobjectSocketTypeConnectionResetErrorTimeoutErrorConnectionAbortedErrorû)z
_functoolszreduce)z__builtin__zreduce)ztkinter.filedialogz
FileDialog)z
FileDialogz
FileDialog)ztkinter.filedialogzLoadFileDialog)z
FileDialogzLoadFileDialog)ztkinter.filedialogzSaveFileDialog)z
FileDialogzSaveFileDialog)ztkinter.simpledialogzSimpleDialog)zSimpleDialogzSimpleDialog)zxmlrpc.serverzServerHTMLDoc)zDocXMLRPCServerzServerHTMLDoc)zxmlrpc.serverzXMLRPCDocGenerator)zDocXMLRPCServerzXMLRPCDocGenerator)zxmlrpc.serverzDocXMLRPCRequestHandler)zDocXMLRPCServerzDocXMLRPCRequestHandler)zxmlrpc.serverzDocXMLRPCServer)zDocXMLRPCServerzDocXMLRPCServer)zxmlrpc.serverzDocCGIXMLRPCRequestHandler)zDocXMLRPCServerzDocCGIXMLRPCRequestHandler)zhttp.serverzSimpleHTTPRequestHandler)zSimpleHTTPServerzSimpleHTTPRequestHandler)zhttp.serverzCGIHTTPRequestHandler)zCGIHTTPServerzCGIHTTPRequestHandler)z_socketzsocket)zsocketz_socketobject0ûz__builtin__zbuiltinszcopy_regzcopyregzQueuezqueuezSocketServerzsocketserverzConfigParserzconfigparserzreprzreprlibztkFileDialogztkinter.filedialogztkSimpleDialogztkinter.simpledialogztkColorChooserztkinter.colorchooserztkCommonDialogztkinter.commondialogzDialogztkinter.dialogzTkdndztkinter.dndztkFontztkinter.fontztkMessageBoxztkinter.messageboxzScrolledTextztkinter.scrolledtextzTkconstantsztkinter.constantszTixztkinter.tixzttkztkinter.ttkzTkinterztkinterz
markupbasez_markupbasez_winregzwinregzthreadz_threadzdummy_threadz_dummy_threadzdbhashzdbm.bsdzdumbdbmzdbm.dumbzdbmzdbm.ndbmzgdbmzdbm.gnuz	xmlrpclibzxmlrpc.clientzSimpleXMLRPCServerzxmlrpc.serverzhttplibzhttp.clientzhtmlentitydefszhtml.entitiesz
HTMLParserzhtml.parserzCookiezhttp.cookiesz	cookielibzhttp.cookiejarzBaseHTTPServerzhttp.serverztest.test_supportztest.supportzcommandsz
subprocesszurlparsezurllib.parsezrobotparserzurllib.robotparserzurllib2zurllib.requestzanydbmzdbmz_abcollzcollections.abc0_bz2_dbm_gdbmPermissionErrorWindowsError©/zArithmeticErrorzAssertionErrorzAttributeErrorzBaseExceptionzBufferErrorzBytesWarningzDeprecationWarningzEOFErrorzEnvironmentErrorz	ExceptionzFloatingPointErrorzFutureWarningzGeneratorExitzIOErrorzImportErrorzImportWarningzIndentationErrorz
IndexErrorzKeyErrorzKeyboardInterruptzLookupErrorzMemoryErrorz	NameErrorzNotImplementedErrorzOSErrorzOverflowErrorzPendingDeprecationWarningzReferenceErrorzRuntimeErrorzRuntimeWarningzStopIterationzSyntaxErrorzSyntaxWarningzSystemErrorz
SystemExitzTabErrorz	TypeErrorzUnboundLocalErrorzUnicodeDecodeErrorzUnicodeEncodeErrorzUnicodeErrorzUnicodeTranslateErrorzUnicodeWarningzUserWarningz
ValueErrorzWarningzZeroDivisionErrorNotADirectoryErrorBufferTooShortexcnamemultiprocessing.contextModuleNotFoundErrorPYTHON3_IMPORTERROR_EXCEPTIONSProcessErrorBrokenPipeErrorChildProcessErrorConnectionErrorConnectionRefusedErrorFileExistsErrorFileNotFoundErrorIsADirectoryErrorProcessLookupErrorûzcPicklezpicklez_elementtreezxml.etree.ElementTreez
FileDialogztkinter.filedialogzSimpleDialogztkinter.simpledialogzDocXMLRPCServerzxmlrpc.serverzSimpleHTTPServerzhttp.serverzCGIHTTPServerzhttp.serverzUserDictzcollectionszUserListzcollectionsz
UserStringzcollectionszwhichdbzdbmzStringIOzioz	cStringIOzio0PYTHON2_EXCEPTIONSAuthenticationErrorû)z__builtin__zxrange)zbuiltinszrange)z__builtin__zreduce)z	functoolszreduce)z__builtin__zintern)zsyszintern)z__builtin__zunichr)zbuiltinszchr)z__builtin__zunicode)zbuiltinszstr)z__builtin__zlong)zbuiltinszint)z	itertoolszizip)zbuiltinszzip)z	itertoolszimap)zbuiltinszmap)z	itertoolszifilter)zbuiltinszfilter)z	itertoolszifilterfalse)z	itertoolszfilterfalse)z	itertoolszizip_longest)z	itertoolszzip_longest)zUserDictzIterableUserDict)zcollectionszUserDict)zUserListzUserList)zcollectionszUserList)z
UserStringz
UserString)zcollectionsz
UserString)zwhichdbzwhichdb)zdbmzwhichdb)z_socketzfromfd)zsocketzfromfd)z_multiprocessingz
Connection)zmultiprocessing.connectionz
Connection)zmultiprocessing.processzProcess)zmultiprocessing.contextzProcess)zmultiprocessing.forkingzPopen)zmultiprocessing.popen_forkzPopen)zurllibzContentTooShortError)zurllib.errorzContentTooShortError)zurllibz
getproxies)zurllib.requestz
getproxies)zurllibzpathname2url)zurllib.requestzpathname2url)zurllibz
quote_plus)zurllib.parsez
quote_plus)zurllibzquote)zurllib.parsezquote)zurllibzunquote_plus)zurllib.parsezunquote_plus)zurllibzunquote)zurllib.parsezunquote)zurllibzurl2pathname)zurllib.requestzurl2pathname)zurllibz
urlcleanup)zurllib.requestz
urlcleanup)zurllibz	urlencode)zurllib.parsez	urlencode)zurllibzurlopen)zurllib.requestzurlopen)zurllibzurlretrieve)zurllib.requestzurlretrieve)zurllib2z	HTTPError)zurllib.errorz	HTTPError)zurllib2zURLError)zurllib.errorzURLError0<module _compat_pickle>_compat_pickle.pyPYTHON3_OSERROR_EXCEPTIONSMULTIPROCESSING_EXCEPTIONS<module _sitebuiltins>_Printer__linesinteractive prompt objects for printing the license text, a list of
    contributors and the copyright notice._sitebuiltins.pyQuitter.__init___Printer.__repr___Printer__filenames_Helper.__repr__Quitter.__repr__Hit Return for more, or q (and Return) to quit: Type %s() to see the full %s text_Helper.__call__Type help() for interactive help, or help(object) for help about object._Printer.__call___Printer.__init___Printer.__setup_Printer__nameMAXLINESDefine the builtin 'help'.

    This is a wrapper around pydoc.help that provides a helpful message
    when 'help' is typed at the Python interactive prompt.

    Calling help() at the Python prompt starts an interactive help session.
    Calling help(thing) prints help for the python object 'thing'.
    Use %s() or %s to exit_Printer__setup
The objects used by the site module to add custom builtins.
_Printer__dataQuitter.__call___Printer__linecnt_LocaleTime__pad([\\.^$*+?\(\){}\[\]|])whitespace_replacement%s)%w__calc_timezone_LocaleTime__calc_weekday76Return a class cls instance based on the input string and the
    format string.LocaleTime.__calc_am_pmdays_to_weekLC_date_time(?P<I>1[0-2]|0[1-9]|[1-9])locale_time%XTimeRE.__init__.<locals>.<genexpr>iso_weekCalculate the Julian day based on the ISO 8601 year, week, and weekday.
    ISO weeks start on Mondays, with week 01 being the week containing 4 Jan.
    ISO week days range from 1 (Monday) to 7 (Sunday).
    regex_charsweek_of_yearday_of_weekweek_starts_Monfirst_weekdayweek_0_lengthdata_stringfractiongmtoff_fractiontzdeltaiso_year(?P<U>5[0-3]|[0-4]\d|\d)re_compileISO week directive '%V' is incompatible with the year directive '%Y'. Use the ISO year '%G' instead.LocaleTime.__calc_timezone_LocaleTime__calc_timezone__calc_monthHandle conversion from format directives to regexes.unconverted data remains: %s_TimeRE_cacheConvert a list to a regex string for matching a directive.

        Want possible matching values to be from longest to shortest.  This
        prevents the possibility of a match occurring for a value that also
        a substring of a larger value that should have matched (e.g., 'abc'
        matching when 'abcdef' should have been the match).

        correction\\s+Set all attributes.

        Order of methods called matters for dependency reasons.

        The locale language is set at the offset and then checked again before
        exiting.  This is to make sure that the attributes were not set with a
        mix of information from more than one locale.  This would most likely
        happen when using threads where one thread calls a locale-dependent
        function while another thread changes the locale while the function in
        the other thread is still running.  Proper coding would call for
        locks to prevent changing the locale while locale-dependent code is
        running.  The check here is done in case someone does not think about
        doing this.

        Only other possible issue is if someone changed the timezone and did
        not call tz.tzset .  That is an issue for the programmer, though,
        since changing the timezone is worthless without that call.

        to_convertf_weekdayLocaleTime.__calc_month10%I(?P<G>\d\d\d\d)TimeRE.compiledatetime_datereplacement_pairs%W_regex_cache44%c%xCreate keys/values.

        Order of execution is important for dependency reasons.

        %H_calc_julian_from_U_or_W%M00%jfront(?P<S>6[0-1]|[0-5]\d|\d)199955%Stz_namesprocessed_formatISO week directive '%V' must be used with the ISO year directive '%G' and a weekday directive ('%A', '%a', '%w', or '%u')._strptime_timetz_valuesLocaleTime.__pad_LocaleTime__calc_montha_monthReturn a time struct based on the input string and the
    format string.Day of the year directive '%j' is not compatible with ISO year directive '%G'. Use '%Y' instead.17_calc_julian_from_V_TimeRE__seqToREa_weekdayTimeRE.__seqToREhas_savingiso_weekdayre_escape22%mdirective_index(?P<H>2[0-3]|[0-1]\d|\d)(?P<w>[0-6])LC_time03(?P<f>[0-9]{1,6})'%s' is a bad directive in format '%s'strptime() argument {} must be str, not {}_STRUCT_TM_ITEMS(?P<Y>\d\d\d\d)f_monthInconsistent use of : in %a %b %d %H:%M:%S %Yordinal%ptime_tuplecurrent_formatU_W<module _strptime>TimeRE.__seqToRE.<locals>.<genexpr>(?P<m>1[0-2]|0[1-9]|[1-9])no_savinglocale changed during initializationLocaleTime.__calc_date_time_getlang(?P<d>3[0-1]|[1-2]\d|0[1-9]|[1-9]| [1-9])(?P<y>\d\d)%y(?P<%s>%s%UReturn a compiled re object for the format string.timezone changed during initialization(?P<V>5[0-3]|0[1-9]|[1-4]\d|\d)_strptime.pyCalculate the Julian day based on the year, week of the year, and day of
    the week, with week_start_day representing whether the week of the year
    assumes the week starts on Sunday or Monday (6 or 0).Return a 2-tuple consisting of a time struct and an int containing
    the number of microseconds based on the input string and the
    format string.Stores and handles locale-specific information related to time.

    ATTRIBUTES:
        f_weekday -- full weekday names (7-item list)
        a_weekday -- abbreviated weekday names (7-item list)
        f_month -- full month names (13-item list; dummy value in [0], which
                    is added by code)
        a_month -- abbreviated month names (13-item list, dummy value in
                    [0], which is added by code)
        am_pm -- AM/PM representation (2-item list)
        LC_date_time -- format string for date/time representation (string)
        LC_date -- format string for date representation (string)
        LC_time -- format string for time representation (string)
        timezone -- daylight- and non-daylight-savings timezone representation
                    (2-item list of sets)
        lang -- Language used by instance (2-item tuple)
    ISO year directive '%G' must be used with the ISO week directive '%V' and a weekday directive ('%A', '%a', '%w', or '%u').Return regex pattern for the format string.

        Need to make sure that any characters that might be interpreted as
        regex syntax are escaped.

        LocaleTime.__init__datetime_timedelta(?P<j>36[0-6]|3[0-5]\d|[1-2]\d\d|0[1-9]\d|00[1-9]|[1-9]\d|0[1-9]|[1-9])LocaleTime.__calc_weekdayStrptime-related classes and functions.

CLASSES:
    LocaleTime -- Discovers and stores locale-specific time information
    TimeRE -- Creates regexes for pattern matching a string of text containing
                time information

FUNCTIONS:
    _getlang -- Figure out what language is being used for the locale
    strptime -- Calculates the time struct represented by the passed-in string

_CACHE_MAX_SIZEstray %% in format '%s'_LocaleTime__calc_am_pm(?P<u>[1-7])11datetime_timezone(?P<M>[0-5]\d|\d)©,Údata_stringÚformatÚindexÚargÚmsgÚlocale_timeÚformat_regexÚerrÚbad_directiveÚfoundÚiso_yearÚyearÚmonthÚdayÚhourÚminuteÚsecondÚfractionÚtzÚgmtoffÚgmtoff_fractionÚiso_weekÚweek_of_yearÚweek_of_year_startÚweekdayÚjulianÚ
found_dictÚ	group_keyÚampmÚsÚzÚhoursÚminutesÚsecondsÚgmtoff_remainderÚgmtoff_remainder_paddingÚ
found_zoneÚvalueÚ	tz_valuesÚleap_year_fixÚweek_starts_MonÚydayÚdatetime_resultÚtznameTimeRE.pattern%s%s%s_LocaleTime__calc_date_time(?P<z>[+-]\d\d:?[0-5]\d(:?[0-5]\d(\.\d{1,6})?)?|Z)_thread_allocate_locktime data %r does not match format %r_cache_lock_expand_help%r is not callablemutually exclusive arguments must be optional_optionalsinvalid conflict_resolution value: %rinvocation_lengthactionsarg_strings_pattern_ActionsContainer._get_optional_kwargsoption_string(-*A[A-]*)arg_countsArgumentParser.add_subparsersHelpFormatter._format_usageHelp message formatter which retains formatting of all help text.

    Only the name of this class is considered a public API. All the methods
    provided by the class are considered an implementation detail.
    _metavar_formatterremaining_argsnargs for append actions must be > 0; if arg strings are not supplying the value to append, the append const action may be more appropriatenew_arg_stringsHelpFormatter._metavar_formatterinvocations^-\d+$|^-\d*\.\d+$HelpFormatter.add_text_AppendAction.__init__default_metavar[%s [%s ...]]get_subactionsconflict_actioninvalid %(type)s value: %(value)rcan't open '%s': %ssuper_initFileType.__init__isidentifieradd_parserHelpFormatter._split_linesdefaulting_nargsregistry_nameargument %(argument_name)s: %(message)s©ÚselfÚprogÚusageÚdescriptionÚepilogÚparentsÚformatter_classÚprefix_charsÚfromfile_prefix_charsÚargument_defaultÚconflict_handlerÚadd_helpÚallow_abbrevÚ	superinitÚ	add_groupÚidentityÚdefault_prefixÚparentÚdefaultsÚ	__class___ActionsContainer.registerArgumentParser.parse_argspositional argumentsconflicting option strings: %sdest_option_string_get_subactions_get_kwargsseen_non_default_actionsnot allowed with argument %s_HelpActionget_invocationaction_length_progMetavarTypeHelpFormatter._get_default_metavar_for_positional%(prog)s_SubParsersAction.__init__**%s_AppendConstAction.__call___AttributeHolder.__repr__%(default)ArgumentParser._parse_known_argstuple_size_ActionsContainer._remove_actionitem_helpexpected at most one argumentArgumentParser._match_arguments_partial_ActionsContainer._check_conflictRawTextHelpFormatter._split_linesFormatter for generating usage messages and argument help strings.

    Only the name of this class is considered a public API. All the methods
    provided by the class are considered an implementation detail.
    match_partial_ChoicesPseudoActionHelpFormatter._get_default_metavar_for_optionalArgumentParser.print_usageHelpFormatter._expand_helpget_metavar_AppendConstAction.__init__action_widthnargs must be %r to supply constarg_lineArgumentParser.__init__.<locals>.identityone of the arguments %s is required_add_actionHelpFormatter._fill_textlong_option_stringsnargs_patternstart_indexsubnamespace%s=%r_MutuallyExclusiveGroup._remove_actionunrecognized arguments: %s_pop_action_classpositionalsNamespace.__init__\(.*?\)+(?=\s|$)|\[.*?\]+(?=\s|$)|\S+_CountAction.__call___get_valueshort_explicit_argArgumentErrorArgumentTypeErrorArgumentDefaultsHelpFormatterRawDescriptionHelpFormatterONE_OR_MOREOPTIONALPARSERREMAINDERZERO_OR_MOREconflicting_actionsconflict_string(-*[A-]*)_dedentunexpected option string: %s
        add_argument(dest, ..., name=value, ...)
        add_argument(option_string, option_string, ..., name=value, ...)
        _StoreAction'required' is an invalid argument for positionalsparse_intermixed_args: positional in mutuallyExclusiveGroupHelpFormatter._format_actions_usagecannot merge actions - two groups are named %r_get_help_string_ArgumentGroupargs_stringconsume_optionalArgumentParser._read_args_from_files©Ústart_indexÚoption_tupleÚactionÚoption_stringÚexplicit_argÚmatch_argumentÚaction_tuplesÚ	arg_countÚcharsÚcharÚnew_explicit_argÚoptionals_mapÚmsgÚstopÚargsÚstartÚselected_patternsÚoption_string_indicesÚselfÚextrasÚarg_stringsÚarg_strings_patternÚtake_action_containerconsume_positionalsend_sectionoption_tuples\(([^|]*)\)part_strings_SubParsersAction.add_parserFileType.__repr__group_map_registries_bufsize_add_item_iter_indented_subactionsArgumentParser.parse_intermixed_argsargument_valuesexpected one argument_SubParsersAction._get_subactions_StoreTrueActioninvalid option string %(option)r: must start with a character %(prefix_chars)r_get_positional_kwargs==SUPPRESS==ArgumentParser._get_valuehandler_func_name_ActionsContainer.add_mutually_exclusive_group_parse_optionalgroup_actions_root_sectionHelpFormatter._dedentunknown parser %(parser_name)r (choices: %(choices)s)ambiguous option: %(option)s could match %(matches)s_get_optional_actionscannot have multiple subparser argumentsoptional arguments_AppendAction.__call___option_string_actions_handle_conflict_resolve_ActionsContainer._registry_gettype_funcHelpFormatter._Section_add_container_actions_ActionsContainer._get_positional_kwargsHelpFormatter._Section.format_helpparser_class_action_max_lengthArgumentParser._parse_optionalArgumentParser._check_valueFileType.__call__HelpFormatter._Section.__init__HelpFormatter.format_helpdest= is required for options like %rthe following arguments are required: %s_ActionsContainer._add_actionnargs for store actions must be > 0; if you have nothing to store, actions such as store true or store const may be more appropriate_parser_classtitle_group_mapSimple object for storing attributes.

    Implements equality by attribute names and values, and provides a simple
    string representation.
    _join_partsArgumentParser._get_optional_actionschoice_strs©"ÚselfÚarg_stringsÚ	namespaceÚaction_conflictsÚmutex_groupÚgroup_actionsÚiÚmutex_actionÚ	conflictsÚoption_string_indicesÚarg_string_pattern_partsÚarg_strings_iterÚ
arg_stringÚoption_tupleÚpatternÚarg_strings_patternÚseen_actionsÚseen_non_default_actionsÚtake_actionÚconsume_optionalÚpositionalsÚconsume_positionalsÚextrasÚstart_indexÚmax_option_string_indexÚnext_option_string_indexÚpositionals_end_indexÚstringsÚ
stop_indexÚrequired_actionsÚactionÚgroupÚnamesÚmsgAn error from trying to convert a command line string to a type._indent_incrementaction_groupargparse.py_SubParsersAction.__call__choice_action%(prog)s: error: %(message)s
(-*A-*)Information about how to convert command line strings to Python objects.

    Action objects are used by an ArgumentParser to represent the information
    needed to parse a single argument from one or more strings from the
    command line. The keyword arguments to the Action constructor are also
    all attributes of Action instances.

    Keyword Arguments:

        - option_strings -- A list of command-line option strings which
            should be associated with this action.

        - dest -- The name of the attribute to hold the created object(s)

        - nargs -- The number of command-line arguments that should be
            consumed. By default, one argument will be consumed and a single
            value will be produced.  Other values include:
                - N (an integer) consumes N arguments (and produces a list)
                - '?' consumes zero or one arguments
                - '*' consumes zero or more arguments (and produces a list)
                - '+' consumes one or more arguments (and produces a list)
            Note that the difference between the default and nargs=1 is that
            with the default, a single value will be produced, while with
            nargs=1, a list containing a single value will be produced.

        - const -- The value to be produced if the option is specified and the
            option uses an action that takes no values.

        - default -- The value to be produced if the option is not specified.

        - type -- A callable that accepts a single string argument, and
            returns the converted value.  The standard Python types str, int,
            float, and complex are useful examples of such callables.  If None,
            str is used.

        - choices -- A container of values that should be allowed. If not None,
            after a command-line argument has been converted to the appropriate
            type, an exception will be raised if it is not a member of this
            collection.

        - required -- True if the action must always be specified at the
            command line. This is only meaningful for optional command-line
            arguments.

        - help -- The help string describing the argument.

        - metavar -- The name to be used for the option's argument with the
            help string. If None, the 'dest' value will be used as the name.
    HelpFormatter.add_arguments_print_messageArgumentParser.error_current_sectionunknown action "%s" ([\])])\n\n\n+conflicting option string: %sAn error from creating or using an argument (optional or positional).

    The string value of this exception is the message, augmented with
    information about the argument that caused it.
    Help message formatter which uses the argument 'type' as the default
    metavar value (instead of the argument 'dest')

    Only the name of this class is considered a public API. All the methods
    provided by the class are considered an implementation detail.
    _MutuallyExclusiveGroup.__init__subcommandsDo not expect %s in %s_get_action_name_get_positional_actionsHelpFormatter._format_action_invocation_ActionsContainer.add_argument_ActionsContainer.__init__ArgumentParser._get_kwargs_CountAction.__init__Help message formatter which retains any formatting in descriptions.

    Only the name of this class is considered a public API. All the methods
    provided by the class are considered an implementation detail.
    (-*%s-*)HelpFormatter._join_partsexpected at least one argument_has_negative_number_optionals©ÚselfÚusageÚactionsÚgroupsÚprefixÚprogÚ	optionalsÚpositionalsÚactionÚformatÚaction_usageÚ
text_widthÚpart_regexpÚ	opt_usageÚ	pos_usageÚ	opt_partsÚ	pos_partsÚ	get_linesÚindentÚlinesÚparts_whitespace_matcherargument "-" with mode %r_action_groupsactions_slice_ActionsContainer.get_defaultArgumentError.__init___handle_conflict_%s_choices_actionsaction_headerArgumentParser._get_positional_actionsoption_prefixshort_option_prefixstar_argssave_nargs_get_option_tuples_format_argsArgumentParser._get_option_tupleschoices_strArgumentParser._parse_known_args.<locals>.consume_optionalRawDescriptionHelpFormatter._fill_textadd_usage_negative_number_matcher_AttributeHolder._get_kwargs (default: %(default)s)expected %s arguments_SubParsersAction._ChoicesPseudoAction.__init___prog_prefix_MutuallyExclusiveGroup._add_action_StoreFalseActionNamespace.__eq__<module argparse>_StoreFalseAction.__init__.__call__() not definedHelpFormatter._get_help_string_get_handler_get_nargs_patternRawDescriptionHelpFormatter._fill_text.<locals>.<genexpr>_StoreAction.__init__length of metavar tuple does not match nargsNamespace.__contains___StoreConstAction.__call__HelpFormatter._iter_indented_subactionsArgumentParser.format_usageline_len_VersionAction.__init___levelHelpFormatter.end_sectionsave_requiredMetavarTypeHelpFormatter._get_default_metavar_for_optionalinvalid choice: %(value)r (choose from %(choices)s)error(message: string)

        Prints a usage message incorporating the message to stderr and
        exits.

        If you override this in a subclass, it should not return -- it
        should either exit or raise an exception.
        insertsArgumentParser._parse_known_args.<locals>.consume_positionals_unrecognized_argsA..._get_formatter_defaults_ActionsContainer.add_argument_groupObject for parsing command line strings into Python objects.

    Keyword Arguments:
        - prog -- The name of the program (default: sys.argv[0])
        - usage -- A usage message (default: auto-generated from arguments)
        - description -- A description of what the program does
        - epilog -- Text following the argument descriptions
        - parents -- Parsers whose arguments should be copied into this one
        - formatter_class -- HelpFormatter class for printing help messages
        - prefix_chars -- Characters that prefix optional arguments
        - fromfile_prefix_chars -- Characters that prefix files containing
            additional arguments
        - argument_default -- The default value for all arguments
        - conflict_handler -- String indicating how to handle conflicts
        - add_help -- Add a -h/-help option
        - allow_abbrev -- Allow long options to be abbreviated unambiguously
    _HelpAction.__init__save_default_ActionsContainer._handle_conflict_error_ArgumentGroup.__init___group_actionsargument_stringsparse_intermixed_args: positional arg with nargs=%s_ActionsContainer.set_defaultsArgumentParser.format_helpHelpFormatter._add_itemHelpFormatter.add_usageconfl_optionalsargs_filestart_section_StoreConstAction.__init__HelpFormatter._format_usage.<locals>.get_lines_encodingconvert_arg_line_to_argsArgumentParser._get_valuesparsers_class_StoreTrueAction.__init___max_help_positionFactory for creating file object types

    Instances of FileType are typically passed as type= arguments to the
    ArgumentParser add_argument() method.

    Keyword Arguments:
        - mode -- A string indicating how the file is to be opened. Accepts the
            same values as the builtin open() function.
        - bufsize -- The file's desired buffer size. Accepts the same values as
            the builtin open() function.
        - encoding -- The file's encoding. Accepts the same values as the
            builtin open() function.
        - errors -- A string indicating how encoding and decoding errors are to
            be handled. Accepts the same value as the builtin open() function.
    (-*A?-*)_long_break_matcherignored explicit argument %r([\[(]) parse_known_intermixed_args_AttributeHolder._get_argsnargs_errorsArgumentDefaultsHelpFormatter._get_help_stringArgumentParser.print_helpHelpFormatter.start_section_UNRECOGNIZED_ARGS_ATTRtype_nameArgumentParser._get_formattersave_usage[\[(] *[\])]([-AO]*)Abstract base class that provides __repr__.

    The __repr__ method returns a string in the format::
        ClassName(attr=name, attr=name, ...)
    The attributes are determined either by a class-level attribute,
    '_kwarg_names', or by inspecting the instance __dict__.
    Command-line parsing library

This module is an optparse-inspired command-line parsing library that:

    - handles both optional and positional arguments
    - produces highly informative usage messages
    - supports parsers that dispatch to sub-parsers

The following is a simple usage example that sums integers from the
command-line and writes the result to a file::

    parser = argparse.ArgumentParser(
        description='sum the integers at the command line')
    parser.add_argument(
        'integers', metavar='int', nargs='+', type=int,
        help='an integer to be summed')
    parser.add_argument(
        '--log', default=sys.stdout, type=argparse.FileType('w'),
        help='the file where the sum should be written')
    args = parser.parse_args()
    args.log.write('%s' % sum(args.integers))
    args.log.close()

The module contains the following public classes:

    - ArgumentParser -- The main entry point for command-line parsing. As the
        example above shows, the add_argument() method is used to populate
        the parser with actions for optional and positional arguments. Then
        the parse_args() method is invoked to convert the args at the
        command-line into an object with attributes.

    - ArgumentError -- The exception raised by ArgumentParser objects when
        there are errors with the parser's actions. Errors raised while
        parsing the command-line are caught by ArgumentParser and emitted
        as command-line messages.

    - FileType -- A factory for defining types of files to be created. As the
        example above shows, instances of FileType are typically passed as
        the type= argument of add_argument() calls.

    - Action -- The base class for parser actions. Typically actions are
        selected by passing strings like 'store_true' or 'append_const' to
        the action= argument of add_argument(). However, for greater
        customization of ArgumentParser actions, subclasses of Action may
        be defined and passed as the action= argument.

    - HelpFormatter, RawDescriptionHelpFormatter, RawTextHelpFormatter,
        ArgumentDefaultsHelpFormatter -- Formatter classes which
        may be passed as the formatter_class= argument to the
        ArgumentParser constructor. HelpFormatter is the default,
        RawDescriptionHelpFormatter and RawTextHelpFormatter tell the parser
        not to change the formatting for help text, and
        ArgumentDefaultsHelpFormatter adds information about argument defaults
        to the help.

All other classes in this module are considered implementation details.
(Also note that HelpFormatter and RawDescriptionHelpFormatter are only
considered public as object names -- the API of the formatter objects is
still considered an implementation detail.)
ArgumentParser._get_nargs_patternHelp message formatter which adds default values to argument help.

    Only the name of this class is considered a public API. All the methods
    provided by the class are considered an implementation detail.
    ArgumentParser.exit_HelpAction.__call___ArgumentGroup._remove_action_ActionsContainer._get_handlerAction._get_kwargs_copy_items_ArgumentGroup._add_action%s%s

ArgumentParser._add_action_mutually_exclusive_groups_current_indent_ActionsContainer._handle_conflict_resolveArgumentParser.parse_known_argsdest supplied twice for positional argumentArgumentParser.convert_arg_line_to_args_ActionsContainer._pop_action_class_VersionAction.__call___ActionsContainer._add_container_actionsArgumentParser.parse_known_intermixed_args_StoreAction.__call__HelpFormatter._format_argsHelpFormatter._indentArgumentParser._print_messageArgumentError.__str___name_parser_mapHelpFormatter._metavar_formatter.<locals>.format(-*-*)ArgumentParser._parse_known_args.<locals>.take_action(-*A[-AO]*)Return a condensed description of the breakpoint.dispatch_lineBdbQuitLine %s:%d does not existBreakpoint.deleteMestopframereturnframestoplinenoReturn True if there is any breakpoint for frame's filename.
        Return a list of (frame, lineno) in a stack trace and a size.

        List starts with original calling frame, if there is one.
        Size may be number of frames above or below f.
        caller_frameStop on the next line in or below the given frame.Delete the breakpoint from the list associated to a file:line.

        If it is the last breakpoint in that position, it also deletes
        the entry for the file:line.
        import bdb; bdb.foo(10)Bdb.runctxBdb.stop_here%-4dbreakpoint   %s at %s:%dInvoke user function and return trace function for call event.

        If the debugger stops on this function call, invoke
        self.user_call(). Raise BbdQuit if self.quitting is set.
        Return self.trace_dispatch to continue tracing in this scope.
        Bdb.user_exceptionbdb.Bdb.dispatch: unknown debugging event:no   dispatch_returnBreakpoint.bpprintpossiblesTdb.user_returnbreakpoint %s at %s:%sc_exceptionfunc_first_executable_linec_returnBreakpoint.__str__Bdb.set_until
	breakpoint already hit %d time%sBdb.do_clearDelete a breakpoint by its index in Breakpoint.bpbynumber.

        If arg is invalid, return an error message.
        exc_stuffCalled when we stop on an exception.+++ returnf_traceReturn a string with information about a stack entry.

        The stack entry frame_lineno is a (frame, lineno) tuple.  The
        return string contains the canonical filename, the function name
        or '<lambda>', the input arguments, the return value, and the
        line of code (if it exists).

        Return all breakpoints that are set.Prune breakpoints for filname:lineno.

        A list of breakpoints is maintained in the Bdb instance and in
        the Breakpoint class.  If a breakpoint in the Bdb instance no
        longer exists in the Breakpoint class, then it's removed from the
        Bdb instance.
        %s(%r)<module bdb>Bdb.runevalis_skipped_moduleCalled if we might stop in a function.Exception to give up completely.Bdb.get_breakBdb.user_callBdb.user_returnblistbreak_anywhereSet a new breakpoint for filename:lineno.

        If lineno doesn't exist for the filename, return an error message.
        The filename should be in canonical form.
        Called when we stop or break at a line.Stop when the line with the lineno greater than the current one is
        reached or when returning from current frame.There are no breakpointsBdb.clear_all_breakseffectiveBreakpoint.bpformatThere are no breakpoints in %sDelete breakpoints for filename:lineno.

        If no breakpoints were set, return an error message.
        Bdb._prune_breaksbar returnedStart debugging with a Bdb instance from the caller's frame.
	ignore next %d hitsBdb.break_hereTdb.user_line+++ callDebug a single function call.

        Return the result of the function call.
        clear_all_file_breaksSet quitting attribute to True.

        Raises BdbQuit exception in the next call to a dispatch_*() method.
        Invoke user function and return trace function for return event.

        If the debugger stops on this function return, invoke
        self.user_return(). Raise BdbQuit if self.quitting is set.
        Return self.trace_dispatch to continue tracing in this scope.
        dispatch_callReturn True if there is an effective breakpoint for this line.

        Check for line or function breakpoint and if in effect.
        Delete temporary breakpoints if effective() says to.
        Bdb.clear_breakBdb.trace_dispatchReturn True if module_name matches any skip pattern.lprefixStop when returning from the given frame.Bdb.clear_bpbynumberBdb.set_returnBdb.set_breakBreakpoint.disableCO_COROUTINECO_ASYNC_GENERATORReturn canonical form of filename.

        For real filenames, the canonical form is a case-normalized (on
        case insenstive filesystems) absolute path.  'Filenames' with
        angle brackets, such as "<stdin>", generated in interactive
        mode, are returned unchanged.
        c_callBdb.clear_all_file_breaksBdb.resetSet values of attributes as ready to start debugging.yes  Bdb.get_stackBdb.dispatch_exceptionReturn True if break should happen here.

    Whether a break should happen depends on the way that b (the breakpoint)
    was set.  If it was set via line number, check if b.line is the same as
    the one in the frame.  If it was set via function name, check if this is
    the right function and if it is on the first executable line.
    Bdb.get_file_breaksBdb.set_traceDetermine which breakpoint for this file:line is to be acted upon.

    Called only if we know there is a breakpoint at this location.  Return
    the breakpoint that was triggered and a boolean that indicates if it is
    ok to delete a temporary breakpoint.  Return (None, None) if there is no
    matching breakpoint.
    bdb.pysubclass of bdb must implement do_clear()Bdb.__init__del  Tdb.user_callbotframeRemove temporary breakpoint.

        Must implement in derived classes or get NotImplementedError.
        Set the attributes for stopping.

        If stoplineno is greater than or equal to 0, then stop at line
        greater than or equal to the stopline.  If stoplineno is -1, then
        don't stop at all.
        Bdb.runcallBdb.set_stepThere is no breakpoint at %s:%dReturn a breakpoint by its index in Breakpoint.bybpnumber.

        For invalid arg values or if the breakpoint doesn't exist,
        raise a ValueError.
        Bdb.set_nextDispatch a trace function for debugged frames based on the event.

        This function is installed as the trace function for debugged
        frames. Its return value is the new trace function, which is
        usually itself. The default implementation decides how to
        dispatch a frame, depending on the type of event (passed in as a
        string) that is about to be executed.

        The event can be one of the following:
            line: A new line of code is going to be executed.
            call: A function is about to be called or another code block
                  is entered.
            return: A function or other code block is about to return.
            exception: An exception has occurred.
            c_call: A C function is about to be called.
            c_return: A C function has returned.
            c_exception: A C function has raised an exception.

        For the Python events, specialized functions (see the dispatch_*()
        methods) are called.  For the C events, no action is taken.

        The arg parameter depends on the previous event.
        Mark the breakpoint as disabled.Return True if there is a breakpoint for filename:lineno.Breakpoint %d already deletedMark the breakpoint as enabled.Return True if frame is below the starting frame in the stack.Bdb.dispatch_callBdb.user_lineDebug an expression executed via the eval() function.

        globals defaults to __main__.dict; locals defaults to globals.
        bar(Print the output of bpformat().

        The optional out argument directs where the output is sent
        and defaults to standard output.
        Called when a return trap is set here.Bdb.dispatch_returnBdb.format_stack_entryBreakpoint number %d out of rangeDebug a statement executed via the exec() function.

        globals defaults to __main__.dict; locals defaults to globals.
        Generic Python debugger base class.

    This class takes care of details of the trace facility;
    a derived class should implement user interaction.
    The standard debugger class (pdb.Pdb) is an example.

    The optional skip argument must be an iterable of glob-style
    module name patterns.  The debugger will not step into frames
    that originate in a module that matches one of these patterns.
    Whether a frame is considered to originate in a certain module
    is determined by the __name__ in the frame globals.
    Invoke user function and return trace function for line event.

        If the debugger stops on the current line, invoke
        self.user_line(). Raise BdbQuit if self.quitting is set.
        Return self.trace_dispatch to continue tracing in this scope.
        Bdb.set_quitframe_returningBreakpoint.enable
	stop only if %sReturn all breakpoints for filename:lineno.

        If no breakpoints are set, return an empty list.
        Return all lines with breakpoints for filename.

        If no breakpoints are set, return an empty list.
        For backwards-compatibility.  Defers to run().Stop only at breakpoints or when finished.

        If there are no breakpoints, set the system trace function to None.
        Invoke user function and return trace function for exception event.

        If the debugger stops on this exception, invoke
        self.user_exception(). Raise BdbQuit if self.quitting is set.
        Return self.trace_dispatch to continue tracing in this scope.
        fncache__args__Bdb.get_bpbynumbercheckfuncnameDelete all existing breakpoints.

        If none were set, return an error message.
        Bdb._set_stopinfoReturn a string with information about the breakpoint.

        The information includes the breakpoint number, temporary
        status, file:line position, break condition, number of times to
        ignore, and number of times hit.

        GENERATOR_AND_COROUTINE_FLAGScheckcache+++ exceptionBdb.get_breaksget_all_breaksBdb.get_all_breaksStart debugging from frame.

        If frame is not specified, debugging starts from caller's frame.
        Bdb.dispatch_lineBreakpoint class.

    Implements temporary breakpoints, ignore counts, disabling and
    (re)-enabling, and conditionals.

    Breakpoints are indexed by number through bpbynumber and by
    the (file, line) tuple using bplist.  The former points to a
    single instance of class Breakpoint.  The latter points to a
    list of such instances since there may be more than one
    breakpoint per line.

    When creating a breakpoint, its associated filename should be
    in canonical form.  If funcname is defined, a breakpoint hit will be
    counted when the first line of that function is executed.  A
    conditional breakpoint always counts a hit.
    Bdb.break_anywhereDelete all breakpoints in filename.

        If none were set, return an error message.
        Bdb.canonicNon-numeric breakpoint number %sDebugger basicsBdb.set_continuekeep Bdb.is_skipped_moduleTdb.user_exceptionBreakpoint.__init__Stop after one line of code.Insert item x in list a, and keep it sorted assuming a is sorted.

    If x is already in a, insert it to the left of the leftmost x.

    Optional args lo (default 0) and hi (default len(a)) bound the
    slice of a to be searched.
    insort_rightlo must be non-negativeReturn the index where to insert item x in list a, assuming a is sorted.

    The return value i is such that all e in a[:i] have e < x, and all e in
    a[i:] have e >= x.  So if x already appears in the list, a.insert(x) will
    insert just before the leftmost x already there.

    Optional args lo (default 0) and hi (default len(a)) bound the
    slice of a to be searched.
    bisect_leftbisect_rightReturn the index where to insert item x in list a, assuming a is sorted.

    The return value i is such that all e in a[:i] have e <= x, and all e in
    a[i:] have e > x.  So if x already appears in the list, a.insert(x) will
    insert just after the rightmost x already there.

    Optional args lo (default 0) and hi (default len(a)) bound the
    slice of a to be searched.
    insort_leftBisection algorithms.mid<module bisect>bisect.pyInsert item x in list a, and keep it sorted assuming a is sorted.

    If x is already in a, insert it to the right of the rightmost x.

    Optional args lo (default 0) and hi (default len(a)) bound the
    slice of a to be searched.
    
        Return an iterator for one month. The iterator will yield datetime.date
        values and will always iterate through complete weeks, so it will yield
        dates outside the specified month.
        <tr><th colspan="7" class="%s">%s</th></tr>--cssoptdictformatstring<link rel="stylesheet" type="text/css" href="%s" />
LocaleHTMLCalendar.formatweekdayday1days_beforedays_afterdifferent_locale.__enter__spacing between months (default 6)Calendar.__init__calendar.pytheyearheightweekheader_localized_daythemonth<td>_localized_month.__len__calendar.cssbad month number %r; must be 1-12</head>

    Subclass of Calendar that outputs a calendar as a simple plain text
    similar to the UNIX program cal.
    setfirstweekdayHTMLCalendar.formatmonthcssclass_year_localized_day.__len__getdefaultlocale_firstweekdayyeardayscalendar--linesLocaleHTMLCalendar.formatmonthnameyear number (1-9999)
        Return a formatted year as a complete HTML page.
        LocaleTextCalendar.formatweekdayCalendar.itermonthdays3Calendar.monthdayscalendartheweekCalendar.iterweekdaysTextCalendar.formatweekheader
        Return a formatted year as a table of tables.
        <table border="0" cellpadding="0" cellspacing="0" class="%s">different_locale.__init__TUESDAYleapdaysTextCalendar.formatmonthwidth of date column (default 2)<head>
SUNDAYTextCalendar.formatmonthname<td class="%s">%d</td>month number (1-12, text only)itermonthdays2
        Returns a year's calendar as a multi-line string.
        cssclasses_weekday_headHTMLCalendar.formatdaynumber of lines for each week (default 1)wdwithyearIllegalMonthError
        Return a complete week as a table row.
        Return number of leap years in range [y1, y2).
       Assume y1 <= y2.cssclass_monthPrint a year's calendar.FRIDAYTextCalendar.prmonth</table>Calendar.itermonthdays4formatyearpagebad weekday number %r; must be 0 (Monday) to 6 (Sunday)HTMLCalendar.formatweekheader.<locals>.<genexpr>monthdays2calendarcssclass_year_headencoding to use for outputIllegalWeekdayError.__str__--spacinghtmlgroupoldlocale_colwidthCSS to use for pageJanuaryCalendar.itermonthdays2
        Like itermonthdates(), but will yield day numbers. For days outside
        the specified month the day number is 0.
        _localized_month.__init__TextCalendar.prweekyeardays2calendarCalendar.getfirstweekday_localized_month.__getitem__<td class="%s">&nbsp;</td>
        Return a month name as a table row.
        <?xml version="1.0" encoding="%s"?>
Calendar.yeardatescalendar--localeformatstring.<locals>.<genexpr>TextCalendar.formatweek.<locals>.<genexpr><!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
text only argumentsif --locale is specified --encoding is required<tr>%s</tr>
    This calendar returns complete HTML pages.
    
        Like itermonthdates(), but will yield (day number, weekday number)
        tuples. For days outside the specified month the day number is 0.
        months per row (default 3)
        Return a matrix representing a month's calendar.
        Each row represents a week; week entries are
        (day number, weekday number) tuples. Day numbers outside this month
        are zero.
        <body>

        Return a matrix representing a month's calendar.
        Each row represents a week; days outside this month are zero.
        Returns a string formatted from n strings, centered within n columns.<meta http-equiv="Content-Type" content="text/html; charset=%s" />
monthdatescalendarprevmonth
        Return a formatted month name.
        Prints multi-column formatting for year calendars
        Returns a formatted day.
        Calendar.setfirstweekdayHTMLCalendar.formatyearpageIllegalWeekdayError.__init__locale to be used from month and weekday names%2i--type
        Return a month's calendar string (multi-line).
        cssclass_nodayReturn weekday (0-6 ~ Mon-Sun) and number of days (28-31) for
       year, month.<tr><th colspan="%d" class="%s">%s</th></tr>pryear<html>

        Return a header for a week as a table row.
        EPOCH
        Like itermonthdates(), but will yield (year, month, day) tuples.  Can be
        used for dates outside of datetime.date range.
        
        Return an iterator for one week of weekday numbers starting with the
        configured first one.
        
        Return a formatted month as a table.
        </html>
-LIllegalMonthError.__init__
        Like itermonthdates(), but will yield (year, month, day, day_of_week) tuples.
        Can be used for dates outside of datetime.date range.
        
        Return the data for the specified year ready for formatting (similar to
        yeardatescalendar()). Entries in the week lists are
        (day number, weekday number) tuples. Day numbers outside this month are
        zero.
        html only arguments
        Print a single week (no newline).
        TextCalendar.formatday
    Base calendar class. This class doesn't do any formatting. It simply
    provides data to subclasses.
    LocaleTextCalendar.__init__TextCalendar.formatweekheader.<locals>.<genexpr>MONDAYSATURDAY
        Return a matrix (list of lists) representing a month's calendar.
        Each row represents a week; week entries are datetime.date values.
        TextCalendar.formatyearÛ   zIllegalMonthErrorzIllegalWeekdayErrorzsetfirstweekdayzfirstweekdayzisleapzleapdayszweekdayz
monthrangezmonthcalendarzprmonthzmonthzprcalzcalendarztimegmz
month_namez
month_abbrzday_namezday_abbrzCalendarzTextCalendarzHTMLCalendarzLocaleTextCalendarzLocaleHTMLCalendarz
weekheader
        Return a weekday name as a table header.
        --months</body>

        Return a header for a week.
        cssclass_month_head
        Print a month's calendar.
        --width<module calendar>
        Return the data for the specified year ready for formatting (similar to
        yeardatescalendar()). Entries in the week lists are day numbers.
        Day numbers outside this month are zero.
        Return True for leap years, False for non-leap years.IllegalMonthError.__str__FebruaryCalendar.monthdatescalendar_localized_day.__getitem__Calendar.itermonthdatesdifferent_locale.__exit__Calendar.monthdays2calendargetdefaultencodingReturn weekday (0-6 ~ Mon-Sun) for year, month (1-12), day (1-31).LocaleTextCalendar.formatmonthname_localized_day.__init__%s %rsetlocaletextgroup
        Return a day as a table cell.
        LocaleHTMLCalendar.__init__Calendar printing functions

Note when comparing these calendars to the ones printed by cal(1): By
default, these calendars have Monday as the first day of the week, and
Sunday as the last (the European convention). Use setfirstweekday() to
set the first day of the week (0=Monday, 6=Sunday).<title>Calendar for %d</title>
Unrelated but handy function to calculate Unix timestamp from GMT.
        Returns a formatted week day name.
        repeatTextCalendar.formatyear.<locals>.<genexpr>
    This class can be passed a locale name in the constructor and will return
    month and weekday names in the specified locale. If this locale includes
    an encoding all strings containing month and weekday names will be returned
    as unicode.
    nextmonthHTMLCalendar.formatweek.<locals>.<genexpr>_months<tr><th colspan="7" class="month">%s</th></tr>
        Return the data for the specified year ready for formatting. The return
        value is a list of month rows. Each month row contains up to width months.
        Each month contains between 4 and 6 weeks and each week contains 1-7
        days. Days are datetime.date objects.
        monthlenTextCalendar.pryearoutput type (text or html)
        Returns a single week in a string (no newline).
        _EPOCH_ORD<th class="%s">%s</th>WEDNESDAYCalendar.yeardayscalendarCalendar.yeardays2calendar_localized_month.<lambda>get_endidxoriglineshell List available commands with "help" or detailed help with "help cmd".Cmd.parselineCmd.cmdloop: completeCmd.complete_help.<locals>.<genexpr>old_completer<empty>
maxcolcolwidthstextsCmd.do_helpnonstringsget_namesundoc_headerstrippedPROMPTcompfuncrulerCmd.print_topicscmds_undocHook method executed once when the cmdloop() method is called.postloop(Cmd) Undocumented commands:columnizeljustdotextcmdlenCmd.postloopCalled on an input line when the command prefix is not recognized.

        If this method is not overridden, it prints an error message and
        returns.

        Display a list of strings as a compact set of columns.

        Each column is only as wide as necessary.
        Columns are separated by two spaces (one was not legible enough).
        list[i] not a string for i in %sdisplaywidthCmd.defaultMiscellaneous help topics:Called when an empty line is entered in response to the prompt.

        If this method is not overridden, it repeats the last nonempty
        command entered.

        A simple framework for writing line-oriented command interpreters.

    These are often useful for test harnesses, administrative tools, and
    prototypes that will later be wrapped in a more sophisticated interface.

    A Cmd instance or subclass instance is a line-oriented interpreter
    framework.  There is no good reason to instantiate Cmd itself; rather,
    it's useful as a superclass of an interpreter class you define yourself
    in order to inherit Cmd's methods and encapsulate action methods.

    Parse the line into a command name and a string containing
        the arguments.  Returns a tuple containing (command, args, line).
        'command' and 'args' may be None if the line couldn't be parsed.
        Hook method executed once when the cmdloop() method is about to
        return.

        prevnameidentcharsRepeatedly issue a prompt, accept input, parse an initial prefix
        off the received input, and dispatch to action methods, passing them
        the remainder of the line as argument.

        emptylineInstantiate a line-oriented interpreter framework.

        The optional argument 'completekey' is the readline name of a
        completion key; it defaults to the Tab key. If completekey is
        not None and the readline module is available, command completion
        is done automatically. The optional arguments stdin and stdout
        specify alternate input and output file objects; if not specified,
        sys.stdin and sys.stdout are used.

        Cmd.precmdReturn the next possible completion for 'text'.

        If a command has not been entered, then complete against command list.
        Otherwise try to call complete_<command> to get list of completions.
        Cmd.columnizecmd.py*** No help on %sget_begidxCmd.completedefaultcmds_docInterpret the argument as though it had been typed in response
        to the prompt.

        This may be overridden, but should not normally need to be;
        see the precmd() and postcmd() methods for useful execution hooks.
        The return value is a flag indicating whether interpretation of
        commands by the interpreter should stop.

        Cmd.preloopCmd.postcmdncolstotwidthmisc_headerCmd.emptylineA generic class to build line-oriented command interpreters.

Interpreters constructed with this class obey the following conventions:

1. End of file on input is processed as the command 'EOF'.
2. A command is parsed out of each line by collecting the prefix composed
   of characters in the identchars member.
3. A command `foo' is dispatched to a method 'do_foo()'; the do_ method
   is passed a single argument consisting of the remainder of the line.
4. Typing an empty line repeats the last command.  (Actually, it calls the
   method `emptyline', which may be overridden in a subclass.)
5. There is a predefined `help' method.  Given an argument `topic', it
   calls the command `help_topic'.  With no arguments, it lists all topics
   with defined help_ functions, broken into up to three topics; documented
   commands, miscellaneous help topics, and undocumented commands.
6. The command '?' is a synonym for `help'.  The command '!' is a synonym
   for `shell', if a do_shell method exists.
7. If completion is enabled, completing commands will be done automatically,
   and completing of commands args is done by calling complete_foo() with
   arguments text, line, begidx, endidx.  text is string we are matching
   against, all returned matches must begin with it.  line is the current
   input line (lstripped), begidx and endidx are the beginning and end
   indexes of the text being matched, which could be used to provide
   different completion depending upon which position the argument is in.

The `default' method may be overridden to intercept commands for which there
is no do_ method.

The `completedefault' method may be overridden to intercept completions for
commands that have no complete_ method.

The data member `self.ruler' sets the character used to draw separator lines
in the help messages.  If empty, no ruler line is drawn.  It defaults to "=".

If the value of `self.intro' is nonempty when the cmdloop method is called,
it is printed out on interpreter startup.  This value may be overridden
via an optional argument to the cmdloop() method.

The data members `self.doc_header', `self.misc_header', and
`self.undoc_header' set the headers used for the help function's
listings of documented functions, miscellaneous topics, and undocumented
functions respectively.
get_completernrows<module cmd>Cmd.__init__completenamesHook method executed just after a command dispatch is finished.doc_leaderCmd.get_namesHook method executed just before the command line is
        interpreted, but after the input prompt is generated and issued.

        Method called to complete an input line when no command-specific
        complete_*() method is available.

        By default, it returns an empty list.

        nohelp*** Unknown syntax: %s
Documented commands (type help <topic>):completion_matchesIDENTCHARSget_line_bufferCmd.completenamesCmd.onecmd<console>raw_inputInteractiveConsole.resetbufferPython %s on %s
%s
(%s)
InteractiveInterpretercprtBase class for InteractiveConsole.

    This class deals with parsing and interpreter state (the user's
    namespace); it doesn't deal with input buffering or prompting or
    input file naming (the filename is always passed in explicitly).

    InteractiveConsole.__init__dummy_filename... 
KeyboardInterrupt
Push a line to the interpreter.

        The line should not have a trailing newline; it may have
        internal newlines.  The line is appended to a buffer and the
        interpreter's runsource() method is called with the
        concatenated contents of the buffer as source.  If this
        indicates that the command was executed or invalid, the buffer
        is reset; otherwise, the command is incomplete, and the buffer
        is left as it was after the line was appended.  The return
        value is 1 if more input is required, 0 if the line was dealt
        with in some way (this is the same as runsource()).

        last_valueInteractiveConsole.interactClosely emulate the interactive Python console.

        The optional banner argument specifies the banner to print
        before the first interaction; by default it prints a banner
        similar to the one printed by the real Python interpreter,
        followed by the current class name in parentheses (so as not
        to confuse this with the real interpreter -- since it's so
        close!).

        The optional exitmsg argument specifies the exit message
        printed when exiting. Pass the empty string to suppress
        printing an exit message. If exitmsg is not given or None,
        a default message is printed.

        InteractiveInterpreter.showtracebackreadfunc>>> Compile and run some source in the interpreter.

        Arguments are as for compile_command().

        One several things can happen:

        1) The input is incorrect; compile_command() raised an
        exception (SyntaxError or OverflowError).  A syntax traceback
        will be printed by calling the showsyntaxerror() method.

        2) The input is incomplete, and more input is required;
        compile_command() returned None.  Nothing happens.

        3) The input is complete; compile_command() returned a code
        object.  The code is executed by calling self.runcode() (which
        also handles run-time exceptions, except for SystemExit).

        The return value is True in case 2, False in the other cases (unless
        an exception is raised).  The return value can be used to
        decide whether to use sys.ps1 or sys.ps2 to prompt the next
        line.

        Execute a code object.

        When an exception occurs, self.showtraceback() is called to
        display a traceback.  All exceptions are caught except
        SystemExit, which is reraised.

        A note about KeyboardInterrupt: this exception may occur
        elsewhere in this code, and may not always be caught.  The
        caller should be prepared to deal with it.

        InteractiveInterpreter.runcodeType "help", "copyright", "credits" or "license" for more information.InteractiveConsole.raw_inputUtilities needed to emulate Python's interactive interpreter.

Display the syntax error that just occurred.

        This doesn't display a stack trace because there isn't one.

        If a filename is given, it is stuffed in the exception instead
        of what was there before (because Python's parser always uses
        "<string>" when reading from a string).

        The output is written by self.write(), below.

        InteractiveConsole.pushReset the input buffer.__console__InteractiveInterpreter.runsourceConstructor.

        The optional locals argument will be passed to the
        InteractiveInterpreter base class.

        The optional filename argument should specify the (file)name
        of the input stream; it will show up in tracebacks.

        InteractiveInterpreter.writeWrite a prompt and read a line.

        The returned line does not include the trailing newline.
        When the user enters the EOF key sequence, EOFError is raised.

        The base implementation uses the built-in function
        input(); a subclass may replace this with a different
        implementation.

        last_tbClosely emulate the behavior of the interactive Python interpreter.

    This class builds on InteractiveInterpreter and adds prompting
    using the familiar sys.ps1 and sys.ps2, and input buffering.

    Display the exception that just occurred.

        We remove the first stack item because it is our own code.

        The output is written by self.write(), below.

        Constructor.

        The optional 'locals' argument specifies the dictionary in
        which code will be executed; it defaults to a newly created
        dictionary with key "__name__" set to "__console__" and key
        "__doc__" set to None.

        code.pyInteractiveInterpreter.showsyntaxerrorClosely emulate the interactive Python interpreter.

    This is a backwards compatible interface to the InteractiveConsole
    class.  When readfunc is not specified, it attempts to import the
    readline module to enable GNU readline if it is available.

    Arguments (all optional, all default to None):

    banner -- passed to InteractiveConsole.interact()
    readfunc -- if not None, replaces InteractiveConsole.raw_input()
    local -- passed to InteractiveInterpreter.__init__()
    exitmsg -- passed to InteractiveConsole.interact()

    Write a string.

        The base implementation writes to sys.stderr; a subclass may
        replace this with a different implementation.

        <module code>last_type__excepthook__now exiting %s...
Instances of this class have __call__ methods identical in
    signature to compile_command; the difference is that if the
    instance compiles program text containing a __future__ statement,
    the instance 'remembers' and compiles all subsequent program texts
    with the statement in force.codeop.pyCompile.__init__code2Utilities to compile possibly incomplete Python source code.

This module provides two interfaces, broadly similar to the builtin
function compile(), which take program text, a filename and a 'mode'
and:

- Return code object if the command is complete and valid
- Return None if the command is incomplete
- Raise SyntaxError, ValueError or OverflowError if the command is a
  syntax error (OverflowError and ValueError can be produced by
  malformed literals).

Approach:

First, check if the source consists entirely of blank lines and
comments; if so, replace it with 'pass', because the built-in
parser doesn't always do the right thing for these.

Compile three times: as is, with \n, and with \n\n appended.  If it
compiles as is, it's complete.  If it compiles with one \n appended,
we expect more.  If it doesn't compile either way, we compare the
error we get when compiling with \n or \n\n appended.  If the errors
are the same, the code is broken.  But if the errors are different, we
expect more.  Not intuitive; not even guaranteed to hold in future
releases; but this matches the compiler's behavior from Python 1.4
through 2.2, at least.

Caveat:

It is possible (but not likely) that the parser stops parsing with a
successful outcome before reaching the end of the source; in this
case, trailing symbols may be ignored instead of causing an error.
For example, a backslash followed by two newlines may be followed by
arbitrary garbage.  This will be fixed once the API for the parser is
better.

The two interfaces are:

compile_command(source, filename, symbol):

    Compiles a single command in the manner described above.

CommandCompiler():

    Instances of this class have __call__ methods identical in
    signature to compile_command; the difference is that if the
    instance compiles program text containing a __future__ statement,
    the instance 'remembers' and compiles all subsequent program texts
    with the statement in force.

The module also provides another class:

Compile():

    Instances of this class act like the built-in function compile,
    but with 'memory' in the sense described above.
codeob_maybe_compileCommandCompiler.__call__err1err2code1Instances of this class behave much like the built-in compile
    function, but if one is used to compile text containing a future
    statement, it "remembers" and compiles all subsequent program texts
    with the statement in force.Compile a command and determine whether it is incomplete.

    Arguments:

    source -- the source string; may contain \n characters
    filename -- optional filename from which source was read; default
                "<input>"
    symbol -- optional grammar start symbol; "single" (default) or "eval"

    Return value / exceptions raised:

    - Return a code object if the command is complete and valid
    - Return None if the command is incomplete
    - Raise SyntaxError, ValueError or OverflowError if the command is a
      syntax error (OverflowError and ValueError can be produced by
      malformed literals).
    Compile a command and determine whether it is incomplete.

        Arguments:

        source -- the source string; may contain \n characters
        filename -- optional filename from which source was read;
                    default "<input>"
        symbol -- optional grammar start symbol; "single" (default) or
                  "eval"

        Return value / exceptions raised:

        - Return a code object if the command is complete and valid
        - Return None if the command is incomplete
        - Raise SyntaxError, ValueError or OverflowError if the command is a
          syntax error (OverflowError and ValueError can be produced by
          malformed literals).
        _features<module codeop>Compile.__call__CommandCompiler.__init__PyCF_DONT_IMPLY_DEDENTcollections\abc.py<module collections.abc>cb_GeneratorContextManager.__enter__AsyncExitStack.__aexit__Enters the supplied async context manager.

        If successful, also pushes its __aexit__ method as a callback and
        returns the result of the __aenter__ method.
        cm_exit_exit_wrapperexcinfo__cause___AsyncGeneratorContextManager_GeneratorContextManagerBase.__init__pending_raisesuppress.__enter__Helper to correctly register coroutine function to __aexit__
        method._BaseExitStack._create_cb_wrappernullcontextAsyncExitStack._create_async_cb_wrapper.<locals>._exit_wrapperexctbexc_detailsreceived_excframe_exc_fix_exception_contextsuppressed_excis_syncnew_exc_detailsfixed_ctxExitStack.__exit__AsyncExitStack._push_async_cm_exitasynccontextmanagerclosingAbstractContextManagerAbstractAsyncContextManagerContextDecoratorredirect_stderrAsyncExitStack.push_async_exitgenerator didn't stop after throw()AsyncExitStack._create_async_exit_wrapper.<locals>._exit_wrapperhelper_cm_typeAsyncExitStack.enter_async_context_BaseExitStack.enter_contextAbstractContextManager.__enter__A base class for ExitStack and AsyncExitStack.new_targetAn abstract base class for asynchronous context managers._BaseExitStack._create_cb_wrapper.<locals>._exit_wrapperEnters the supplied context manager.

        If successful, also pushes its __exit__ method as a callback and
        returns the result of the __enter__ method.
        new_stack__wrapped__AbstractContextManager.__subclasshook__AsyncExitStack.acloseContextDecorator._recreate_cmenter_resultnullcontext.__exit___RedirectStream.__exit__Context manager to suppress specified exceptions

    After the exception is suppressed, execution proceeds with the next
    statement following the with statement.

         with suppress(FileNotFoundError):
             os.remove(somefile)
         # Execution still resumes here if the file was already removed
    @contextmanager decorator.

    Typical usage:

        @contextmanager
        def some_generator(<arguments>):
            <setup>
            try:
                yield <value>
            finally:
                <cleanup>

    This makes this:

        with some_generator(<arguments>) as <variable>:
            <body>

    equivalent to this:

        <setup>
        try:
            <variable> = <value>
            <body>
        finally:
            <cleanup>
    ContextDecorator.__call__AbstractContextManager.__exit__Helper for @asynccontextmanager.nullcontext.__enter__cb_suppressReturn a recreated instance of self.

        Allows an otherwise one-shot context manager like
        _GeneratorContextManager to support use as
        a decorator via implicit recreation.

        This is a private interface just for _GeneratorContextManager.
        See issue #11647 for details.
        _GeneratorContextManager.__exit__ExitStack.__exit__.<locals>._fix_exception_context_RedirectStream.__enter__Shared functionality for @contextmanager and @asynccontextmanager.nullcontext.__init___BaseExitStack._push_exit_callbackpop_allRaise any exception triggered within the runtime context.Context manager that does no additional processing.

    Used as a stand-in for a normal context manager, when a particular
    block of code is only sometimes used with a normal context manager:

    cm = optional_cm if condition else nullcontext()
    with cm:
        # Perform operation, using optional_cm if condition is True
    _RedirectStream.__init__exit_methodathrowImmediately unwind the context stack._create_exit_wrapper_BaseExitStack._create_exit_wrapper.<locals>._exit_wrapperAsyncExitStack.__aenter___old_targetsRegisters a callback with the standard __exit__ method signature.

        Can suppress exceptions the same way __exit__ method can.
        Also accepts any object with an __exit__ method (registering a call
        to the method instead of the object itself).
        _BaseExitStack.pop_allContext manager for temporarily redirecting stderr to another file.generator didn't yield_BaseExitStack.push_BaseExitStack._push_cm_exit_exit_callbacksReturn `self` upon entering the runtime context.@asynccontextmanager decorator.

    Typical usage:

        @asynccontextmanager
        async def some_async_generator(<arguments>):
            <setup>
            try:
                yield <value>
            finally:
                <cleanup>

    This makes this:

        async with some_async_generator(<arguments>) as <variable>:
            <body>

    equivalent to this:

        <setup>
        try:
            <variable> = <value>
            <body>
        finally:
            <cleanup>
    Registers an arbitrary callback and arguments.

        Cannot suppress exceptions.
        ContextDecorator.__call__.<locals>.innerHelper to correctly register callbacks to __exit__ methods.An abstract base class for context managers.contextlib.py_new_targetsuppress.__exit__AbstractAsyncContextManager.__aenter___AsyncGeneratorContextManager.__aexit__AbstractAsyncContextManager.__subclasshook__old_excexcinst__anext__AsyncExitStack.push_async_callbackAsync context manager for dynamic management of a stack of exit
    callbacks.

    For example:
        async with AsyncExitStack() as stack:
            connections = [await stack.enter_async_context(get_connection())
                for i in range(5)]
            # All opened connections will automatically be released at the
            # end of the async with statement, even if attempts to open a
            # connection later in the list raise an exception.
    exc_contextUtilities for with-statement contexts.  See PEP 343.suppress.__init__Context manager for dynamic management of a stack of exit callbacks.

    For example:
        with ExitStack() as stack:
            files = [stack.enter_context(open(fname)) for fname in filenames]
            # All opened files will automatically be closed at the end of
            # the with statement, even if attempts to open files later
            # in the list raise an exception.
    closing.__exit___BaseExitStack.__init__ExitStack.__enter__Registers a coroutine function with the standard __aexit__ method
        signature.

        Can suppress exceptions the same way __aexit__ method can.
        Also accepts any object with an __aexit__ method (registering a call
        to the method instead of the object itself).
        AsyncExitStack.__aexit__.<locals>._fix_exception_context_BaseExitStack.callback_check_methodsContext to automatically close something at the end of a block.

    Code like this:

        with closing(<module>.open(<arguments>)) as f:
            <block>

    is equivalent to this:

        f = <module>.open(<arguments>)
        try:
            <block>
        finally:
            f.close()

    contextmanager.<locals>.helperclosing.__enter___exceptions_cb_type_AsyncGeneratorContextManager.__aenter____context__Helper for @contextmanager decorator.A base class or mixin that enables context managers to work as decorators.AbstractAsyncContextManager.__aexit__Preserve the context stack by transferring it to a new instance.Registers an arbitrary coroutine function and arguments.

        Cannot suppress exceptions.
        <module contextlib>asynccontextmanager.<locals>.helperclosing.__init___GeneratorContextManager._recreate_cmABCExitStack.closeContext manager for temporarily redirecting stdout to another file.

        # How to send help() to stderr
        with redirect_stdout(sys.stderr):
            help(dir)

        # How to write help() to a file
        with open('help.txt', 'w') as f:
            with redirect_stdout(f):
                help(pow)
    Keeps a reference to the object x in the memo.

    Because we remember objects by their id, we have
    to assure that possibly temporary objects are kept
    alive by referencing them.
    We store a reference at the id of the memo, which should
    normally not be used unless someone tries to deepcopy
    the memo itself...
    _keep_alive_copy_immutableun(shallow)copyable object of type %scopy.py_nilcopierlistiterdictiterreductor_copy_dispatchDeep copy operation on arbitrary Python objects.

    See the module's __doc__ string for more info.
    _deepcopy_method_reconstruct.<locals>.<genexpr><module copy>BuiltinFunctionType_deepcopy_listun(deep)copyable object of type %s_deepcopy_atomicShallow copy operation on arbitrary Python objects.

    See the module's __doc__ string for more info.
    _deepcopy_tupleCodeType_deepcopy_dispatch_deepcopy_dictGeneric (shallow and deep) copying operations.

Interface summary:

        import copy

        x = copy.copy(y)        # make a shallow copy of y
        x = copy.deepcopy(y)    # make a deep copy of y

For module specific errors, copy.Error is raised.

The difference between shallow and deep copying is only relevant for
compound objects (objects that contain other objects, like lists or
class instances).

- A shallow copy constructs a new compound object and then (to the
  extent possible) inserts *the same objects* into it that the
  original contains.

- A deep copy constructs a new compound object and then, recursively,
  inserts *copies* into it of the objects found in the original.

Two problems often exist with deep copy operations that don't exist
with shallow copy operations:

 a) recursive objects (compound objects that, directly or indirectly,
    contain a reference to themselves) may cause a recursive loop

 b) because deep copy copies *everything* it may copy too much, e.g.
    administrative data structures that should be shared even between
    copies

Python's deep copy operation avoids these problems by:

 a) keeping a table of objects already copied during the current
    copying pass

 b) letting user-defined classes override the copying operation or the
    set of components copied

This version does not copy types like module, class, function, method,
nor stack trace, stack frame, nor file, socket, window, nor array, nor
any similar types.

Classes can use the same interfaces to control copying that they use
to control pickling: they can define methods called __getinitargs__(),
__getstate__() and __setstate__().  See the documentation for module
"pickle" for information on these methods.
datetime.tzinfofromutc() requires a non-None utcoffset() result_check_date_fieldsmillisecondsdatetime.astimezonedatetime.__hash__firstdayConvert to formal string, for repr().

        >>> dt = datetime(2010, 1, 1)
        >>> repr(dt)
        'datetime.datetime(2010, 1, 1, 0, 0)'

        >>> dt = datetime(2010, 1, 1, tzinfo=timezone.utc)
        >>> repr(dt)
        'datetime.datetime(2010, 1, 1, 0, 0, tzinfo=datetime.timezone.utc)'
        timezone.__hash__time.__le__tzoffhour (0-23)Isoformat time too shortConstruct a datetime from a POSIX timestamp (like time.time()).

        A timezone info object may be passed in as well.
        datetime.folddate_stringdstrdate_componentstime_componentsdatetime.tznameInvalid isoformat string: %06dFailed to encode latin1 string when unpickling a datetime object. pickle.load(data, encoding='latin1') is assumed.timedelta.__pos__fromutc() argument must be a datetime instance or Nonetime argument must be a time instance{:02d}_microseconddatetime.pyFailed to encode latin1 string when unpickling a date object. pickle.load(data, encoding='latin1') is assumed.Malformed time zone stringHash._DI4Y__mul__datetime.strptimebad tzinfo state arg_Omitteddate.isoformat_format_timetime.replace__abs__microsecond must be in 0..999999_datetime__setstatedate.__gt__Construct a date from the output of date.isoformat().whole minutetimezone.utcoffset__bool___check_int_fieldtimedelta.__floordiv__timezone.__eq__Return a new time with new values for the specified fields.timedelta.__divmod__dimdaysecondsfracfromisoformattimedelta.__gt__datetime.utcnowUTCAdd a date to a timedelta.Construct a datetime from the output of datetime.isoformat().mytzmyoffsetdnumoffset must be a timedelta_secondtimezone.__new__date.__lt__Construct a datetime from a given date and a given time.tzinfo argument must be None or of a tzinfo subclass__int__ returned non-int (type %s)_seconds_microseconds_hashcodetzinfo subclass must override utcoffset()timedelta.__le__Return proleptic Gregorian ordinal for the year, month and day.

        January 1 of year 1 is day 1.  Only the year, month and day values
        contribute to the result.
        base_compare, %dtimezone.dstInvalid date separator_time__setstate%s.%s(%d, %d%s)newformatinteger argument expected, got floatConstruct a time from the output of isoformat()._mktimeutcoffset() argument must be a datetime instance or Nonetime.__gt__tzstrtzinfo.tznameFormat using strftime().  The date part of the timestamp passed
        to underlying strftime should not be used.
        cannot mix naive and timezone-aware timeyhiylous2us3us1basestatedate._cmp__mod__days1secs1secs2otoffInvalid time separator: %ctimezone.__str__hour must be in 0..23date.monthlen_remainderzreplacetzinfo.dsttime.minutetzinfo.__reduce__othhmm%c%02d%02dReturn integer POSIX timestamp.datetime.seconddatetime.__sub__datetime.utcfromtimestampepochgreater_than_halfdatetime.timetz_ord2ymdReturn the timezone offset as timedelta positive east of UTC (negative west of
        UTC).    °¦GA_to_microsecondstime.fromisoformattime_stringdatetime -> DST offset as timedelta, positive for east of UTC.

        Return 0 if DST not in effect.  utcoffset() must include the DST
        offset.
        next_char{:02d}:{:02d}:{:02d}.{:03d}date.__reduce__allow_mixedottzmyhhmmReturn the time part, with same tzinfo.time.dstdatetime.__ge__datetime.__lt__year (1-9999)cannot compare naive and aware times:%02dReturn the timezone name.

        Note that the name is 100% informational -- there's no requirement that
        it mean anything in particular. For example, "GMT", "UTC", "-500",
        "-5:00", "EDT", "US/Eastern", "America/New York" are all valid replies.
        Unknown timespec valueisocalendardatetime._mktime.<locals>.local_DI400Ydatetime.replace_check_time_fieldsConstruct a naive UTC datetime from a POSIX timestamp.divide a by b and round result to the nearest integer

    When the ratio is exactly half-way between two integers,
    the even integer is returned.
    must be str, not %s%04d-%02d-%02dtimedelta.__repr__%s.%s(%d, %d, %d)    @AdstflagwdayIncomplete time componentcombine_maxoffsetsecond (0-59).%06d_fromtimestamp%s.%s(%r)date.todaydate argument must be a date instancedate.fromtimestamp__radd__timedelta.__eq__Invalid microsecond componentdst() argument must be a datetime instance or None%04d-%02d-%02d%cdate.isoweekdaytimedelta.__ge__tzinfo.%s() must return None or timedelta, not '%s'timedelta.__truediv__, tzinfo=%rdayfracdaysecondswholeusdoublefromutc() requires a non-None dst() resultfromutc(): dt.dst gave inconsistent results; cannot converttime._getstate_tzinfo_classConcrete date/time and related types.

See http://www.iana.org/time-zones/repository/tz-link.html for
time zone and DST data sources.
len_strmax_fold_secondsConstruct a date from time.time().Return POSIX timestamp as floatdate.__sub___days_in_monthdatetime.dsttimedelta.__str__%s.%s(%s)tzinfo subclass must override dst()datetime.__gt__datetime.__add__microsecond (0-999999)cannot compare naive and aware datetimesdatetime.__repr___check_utc_offsetdatetime.__str___time_classReturn the time formatted according to ISO.

        The full format looks like 'YYYY-MM-DD HH:MM:SS.mmmmmm'.
        By default, the fractional part is omitted if self.microsecond == 0.

        If self.tzinfo is not None, the UTC offset is also attached, giving
        giving a full format of 'YYYY-MM-DD HH:MM:SS.mmmmmm+HH:MM'.

        Optional argument sep specifies the separator between date and
        time, default 'T'.

        The optional argument timespec specifies the number of additional
        terms of the time to include.
        timedelta._cmptimezone._createtimedelta.__mul__tzinfo subclass must override tzname()tzinfo.fromutcReturn a new datetime with new values for the specified fields.dtstrReturn the time formatted according to ISO.

        The full format is 'HH:MM:SS.mmmmmm+zz:zz'. By default, the fractional
        part is omitted if self.microsecond == 0.

        The optional argument timespec specifies the number of additional
        terms of the time to include.
        _date__setstateresult out of rangetimedelta.daysoffset must be a timedelta strictly between -timedelta(hours=24) and timedelta(hours=24).datetime.__eq__date.strftimetimezone.fromutc_cmperrortime.__new__date.daydate.__add___days_before_month_parse_isoformat_datefreplaceZreplacetimedelta.__new___MAXORDINALdate.toordinaldate.ctimedate.__setstatetimedelta.__lt___isoweek1monday<module datetime>time._cmp%s%02d:%02ddatetime.__setstatestring, format -> new datetime parsed from a string (like time.strptime()).n400time.utcoffset%d day%s, date.fromisoformattimezone.tznametimedelta.__neg__days=%dReturn 0 if DST is not in effect, or the DST offset (as timedelta
        positive eastward) if DST is in effect.

        This is purely informational; the DST offset has already been added to
        the UTC offset returned by utcoffset() if applicable, so there's no
        need to consult dst() unless you're interested in displaying the DST
        info.
        datetime -> string name of time zone.usectimestrfromutc: dt.tzinfo is not selfdtdst%d:%02d:%02dTotal seconds in the duration.datetime._cmpordinal -> (year, month, day), considering 01-Jan-0001 as day 1.utctimetuplemicroseconds=%d_date_classReturn local time tuple compatible with time.localtime().Return the date formatted according to ISO.

        This is 'YYYY-MM-DD'.

        References:
        - http://www.w3.org/TR/NOTE-datetime
        - http://www.cl.cam.ac.uk/~mgk25/iso-time.html
        date.replacedatetime._local_timezoneReturn the timezone offset as timedelta, positive east of UTC
         (negative west of UTC).Return the date part.date.timetupletimedelta._getstateRepresent the difference between two datetime objects.

    Supported operators:

    - add, subtract timedelta
    - unary plus, minus, abs
    - compare to timedelta
    - multiply, divide by int

    In addition, datetime supports subtraction of two datetime objects
    returning a timedelta, and addition or subtraction of a datetime
    and a timedelta giving a datetime.

    Representation: (days, seconds, microseconds).  Why?  Because I
    felt like it.
    time.__format__datetime -> timedelta, positive for east of UTC, negative for west of UTC{:02d}:{:02d}:{:02d}.{:06d}datetime.nowReturn a new date with new values for the specified fields._format_offsettime_compsyear must be in %d..%ddate.__eq___minutedate.__new___name_from_offset_check_tznameday must be in 1..%dfromutc() requires a datetime argumenttzinfo.tzname() must return None or string, not '%s'_minoffsetjdayyear, month -> number of days in that month in that year.year, month -> number of days in year preceding first day of month.year -> number of days before January 1st of year.Return a 3-tuple containing ISO year, week number, and weekday.

        The first ISO week of the year is the (Mon-Sun) week
        containing the year's first Thursday; everything else derives
        from that.

        The first week is 1; Monday is 1 ... Sunday is 7.

        ISO calendar algorithm taken from
        http://www.phys.uu.nl/~vgent/calendar/isocalendar.htm
        (used with permission)
        tz argument must be an instance of tzinfoAdd a datetime and a timedelta.time.hourdatetime.fromisoformat_DAYNAMESleapyearFailed to encode latin1 string when unpickling a time object. pickle.load(data, encoding='latin1') is assumed.%s()=%s, must be strictly between -timedelta(hours=24) and timedelta(hours=24)time.strftimeReturn day of the week, where Monday == 1 ... Sunday == 7._divide_and_round_DAYS_IN_MONTH_is_leapminute must be in 0..59datetime._fromtimestampan integer is required (got type %s)Return the time part, with tzinfo None.©ÚclsÚtÚutcÚtzÚfracÚusÚ	converterÚyÚmÚdÚhhÚmmÚssÚweekdayÚjdayÚdstÚresultÚmax_fold_secondsÚprobe1ÚtransÚprobe2    .Atzinfo.utcoffset_wrap_strftimeReturn day of the week, where Monday == 0 ... Sunday == 6.%s %s %2d %02d:%02d:%02d %04dSubtract two datetimes, or a datetime and a timedelta.tz_posdate.__hash__month must be in 1..12date.__ge___parse_isoformat_timedatetime.microsecondspecsname must be a string_DI100YConvert to formal string, for repr().

        >>> tz = timezone.utc
        >>> repr(tz)
        'datetime.timezone.utc'
        >>> tz = timezone(timedelta(hours=-5), 'EST')
        >>> repr(tz)
        "datetime.timezone(datetime.timedelta(-1, 68400), 'EST')"
        %s %s %2d 00:00:00 %04d_build_struct_timedatetime(year, month, day[, hour[, minute[, second[, microsecond[,tzinfo]]]]])

    The year, month and day arguments are required. tzinfo may be None, or an
    instance of a tzinfo subclass. The remaining arguments may be ints.
    modfReturn formatted timezone offset (+xx:xx) or an empty string.datetime.__new__Constructor.

        Arguments:

        hour, minute (required)
        second, microsecond (default to zero)
        tzinfo (default to None)
        fold (keyword only, default to zero)
        __rsub__tzname() argument must be a datetime instance or Nonefromisoformat: argument must be strdatetime.hourdatetime._getstatedate.isocalendartimedelta.__str__.<locals>.pluraldate._getstate_mathdatetime.combinesecond must be in 0..59time.__reduce__timedelta.total_secondsdatetime.minutedate.fromordinalyear -> 1 if leap year, else 0.datetime.fromtimestampConstructor.

        Arguments:

        year, month, day (required, base 1)
        timedelta.microsecondstimezone.__repr___ymd2orddatetime.__reduce_ex__timedelta.__sub__Concrete date type.

    Constructors:

    __new__()
    fromtimestamp()
    today()
    fromordinal()

    Operators:

    __repr__, __str__
    __eq__, __le__, __lt__, __ge__, __gt__, __hash__
    __add__, __radd__, __sub__ (add/radd only with timedelta arg)

    Methods:

    timetuple()
    toordinal()
    weekday()
    isoweekday(), isocalendar(), isoformat()
    ctime()
    strftime()

    Properties (readonly):
    year, month, day
    datetime.utctimetupletimedelta # of days is too large: %d%c%02d%02d%02d.%06d_check_tzinfo_argdate.weekdayConstruct a datetime from time.time() and optional time zone info.dtoff, fold=1)timezone.__getinitargs__timedelta.__rsub__%s.%s(%r, %r)_DAYS_BEFORE_MONTHtimedelta.__add__time._tzstrTime with time zone.

    Constructors:

    __new__()

    Operators:

    __repr__, __str__
    __eq__, __le__, __lt__, __ge__, __gt__, __hash__

    Methods:

    strftime()
    isoformat()
    utcoffset()
    tzname()
    dst()

    Properties (readonly):
    hour, minute, second, microsecond, tzinfo, fold
    Subtract two dates, or a date and a timedelta.__rmul__datetime.timetupleConstruct a date from a proleptic Gregorian ordinal.

        January 1 of year 1 is day 1.  Only the year, month and day are
        non-zero in the result.
        Construct a UTC datetime from time.time().Convert to string, for str().tz_compsdate.__le__Return UTC time tuple compatible with time.gmtime().timedelta._to_microsecondsdatetime.utcoffsetpickle supportInvalid date separator: %sConstruct a date from a POSIX timestamp (like time.time()).as_integer_ratiocan't compare '%s' to '%s'Abstract base class for time zone info classes.

    Subclasses must override the name(), utcoffset() and dst() methods.
    date.__repr__fold must be either 0 or 1timedelta.__abs__n100timedelta.secondstimedelta.__hash__minute (0-59)_parse_isoformat_time.<locals>.<genexpr>datetime.ctimedatetime.__reduce__timedelta.__bool__datetime.timestampdatetime in UTC -> datetime in local time.year, month, day -> ordinal, considering 01-Jan-0001 as day 1._parse_hh_mm_ss_ffdate.__format__timedelta.__mod__Return ctime() style string._MONTHNAMEStimedelta.__reduce___days_before_year     õ@datetime.__le__date.yeartimezone._name_from_offsetHtmlDiff._line_wrapperIS_LINE_JUNKfromline<td class="diff_header"%s>%s</td><td nowrap="nowrap">%s</td>
Module difflib -- helpers for computing deltas between objects.

Function get_close_matches(word, possibilities, n=3, cutoff=0.6):
    Use SequenceMatcher to return list of the best "good enough" matches.

Function context_diff(a, b):
    For two lists of strings, return a delta in context diff format.

Function ndiff(a, b):
    Return a delta: the difference between `a` and `b` (lists of strings).

Function restore(delta, which):
    Return one of the two sequences that generated an ndiff delta.

Function unified_diff(a, b):
    For two lists of strings, return a delta in unified diff format.

Class SequenceMatcher:
    A flexible class for comparing pairs of sequences of any type.

Class Differ:
    For producing human-readable deltas from sequences of lines of text.

Class HtmlDiff:
    For producing HTML side by side comparison with change highlights.
next_idnewj2lenConstruct a SequenceMatcher.

        Optional arg isjunk is None (the default), or a one-argument
        function that takes a sequence element and returns true iff the
        element is junk.  None is equivalent to passing "lambda x: 0", i.e.
        no elements are considered to be junk.  For example, pass
            lambda x: x in " \t"
        if you're comparing lines as sequences of characters, and don't
        want to synch up on blanks or hard tabs.

        Optional arg a is the first of two sequences to be compared.  By
        default, an empty string.  The elements of a must be hashable.  See
        also .set_seqs() and .set_seq1().

        Optional arg b is the second of two sequences to be compared.  By
        default, an empty string.  The elements of b must be hashable. See
        also .set_seqs() and .set_seq2().

        Optional arg autojunk should be set to False to disable the
        "automatic junk heuristic" that treats popular elements as junk
        (see module documentation for more information).
        _charjunk©ÚaÚbÚfromfileÚtofileÚfromfiledateÚ
tofiledateÚnÚlinetermÚprefixÚstartedÚgroupÚfromdateÚtodateÚfirstÚlastÚfile1_rangeÚtagÚi1Úi2Ú_ÚlineÚfile2_rangeÚj1Új2
    Compare `a` and `b` (lists of strings); return a `Differ`-style delta.

    Optional keyword parameters `linejunk` and `charjunk` are for filter
    functions, or can be None:

    - linejunk: A function that should accept a single string argument and
      return true iff the string is junk.  The default is None, and is
      recommended; the underlying SequenceMatcher class has an adaptive
      notion of "noise" lines.

    - charjunk: A function that accepts a character (string of length
      1), and returns true iff the character is junk. The default is
      the module-level function IS_CHARACTER_JUNK, which filters out
      whitespace characters (a blank or tab; note: it's a bad idea to
      include newline in this!).

    Tools/scripts/ndiff.py is a command-line front-end to this function.

    Example:

    >>> diff = ndiff('one\ntwo\nthree\n'.splitlines(keepends=True),
    ...              'ore\ntree\nemu\n'.splitlines(keepends=True))
    >>> print(''.join(diff), end="")
    - one
    ?  ^
    + ore
    ?  ^
    - two
    - three
    ?  -
    + tree
    + emu
    _tab_newline_replace_qformat_line_iterator
    Generate one of the two sequences that generated a delta.

    Given a `delta` produced by `Differ.compare()` or `ndiff()`, extract
    lines originating from file 1 or 2 (parameter `which`), stripping off line
    prefixes.

    Examples:

    >>> diff = ndiff('one\ntwo\nthree\n'.splitlines(keepends=True),
    ...              'ore\ntree\nemu\n'.splitlines(keepends=True))
    >>> diff = list(diff)
    >>> print(''.join(restore(diff, 1)), end="")
    one
    two
    three
    >>> print(''.join(restore(diff, 2)), end="")
    ore
    tree
    emu
    j2lenget_default_prefixdata_listfromlinestolinesfrom_lineto_linefound_difffromDiffto_diff@@ -{} +{} @@{}? %s%s
_mdiff.<locals>._make_line.<locals>.record_sub_info	{}
    Compare two sequences of lines; generate the delta as a context diff.

    Context diffs are a compact way of showing line changes and a few
    lines of context.  The number of context lines is set by 'n' which
    defaults to three.

    By default, the diff control lines (those with *** or ---) are
    created with a trailing newline.  This is helpful so that inputs
    created from file.readlines() result in diffs that are suitable for
    file.writelines() since both the inputs and outputs have trailing
    newlines.

    For inputs that do not have trailing newlines, set the lineterm
    argument to "" so that the output will be uniformly newline free.

    The context diff format normally has a header for filenames and
    modification times.  Any or all of these may be specified using
    strings for 'fromfile', 'tofile', 'fromfiledate', and 'tofiledate'.
    The modification times are normally expressed in the ISO 8601 format.
    If not specified, the strings default to blanks.

    Example:

    >>> print(''.join(context_diff('one\ntwo\nthree\nfour\n'.splitlines(True),
    ...       'zero\none\ntree\nfour\n'.splitlines(True), 'Original', 'Current')),
    ...       end="")
    *** Original
    --- Current
    ***************
    *** 1,4 ****
      one
    ! two
    ! three
      four
    --- 1,4 ----
    + zero
      one
    ! tree
      four
    _collect_lines<a href="#difflib_chg_%s_%d">n</a> -HtmlDiff instance initializer

        Arguments:
        tabsize -- tab stop spacing, defaults to 8.
        wrapcolumn -- column number where lines are broken and wrapped,
            defaults to None where lines are not wrapped.
        linejunk,charjunk -- keyword arguments passed into ndiff() (used by
            HtmlDiff() to generate the side by side HTML differences).  See
            ndiff() documentation for argument default values and descriptions.
        fromprefixto%d_<td></td><td>&nbsp;No Differences Found&nbsp;</td>_mdiff.<locals>._line_iteratorHtmlDiff._format_linechange_reSequenceMatcher.quick_ratiofromdatatodatafromtexttotexttolistunknown tag %rReturns HTML markup of "from" / "to" text lines

        side -- 0 or 1 indicating "from" or "to" text
        flag -- indicates if difference on line
        linenum -- line number (used for line number column)
        text -- line text to be marked up
        HtmlDiff._make_prefixbestsizeReturns HTML file of side by side comparison with change highlights

        Arguments:
        fromlines -- list of "from" lines
        tolines -- list of "to" lines
        fromdesc -- "from" file column header string
        todesc -- "to" file column header string
        context -- set to True for contextual differences (defaults to False
            which shows full differences).
        numlines -- number of context lines.  When context is set True,
            controls number of lines displayed before and after the change.
            When context is False, controls the number of lines to place
            the "next" link anchors before the next change (so click of
            "next" link jumps to just before the change).
        charset -- charset of the HTML document
        bestiYields from/to lines of text with a change indication.

        This function is an iterator.  It itself pulls lines from the line
        iterator.  Its difference from that iterator is that this function
        always yields a pair of from/to text lines (with the change
        indication).  If necessary it will collect single from/to lines
        until it has a matching pair from/to pair to yield.

        Note, this function is purposefully not defined at the module scope so
        that data it needs from its parent function (within whose context it
        is defined) does not need to be of module scope.
        unknown delta choice (must be 1 or 2): %rb2jahinum_chgSequenceMatcher.ratioflaglistReturn list of triples describing matching subsequences.

        Each triple is of the form (i, j, n), and means that
        a[i:i+n] == b[j:j+n].  The triples are monotonically increasing in
        i and in j.  New in Python 2.5, it's also guaranteed that if
        (i, j, n) and (i', j', n') are adjacent triples in the list, and
        the second is not the last triple in the list, then i+n != i' or
        j+n != j'.  IOW, adjacent triples never describe adjacent equal
        blocks.

        The last triple is a dummy, (len(a), len(b), 0), and is the only
        triple with n==0.

        >>> s = SequenceMatcher(None, "abxcd", "abcd")
        >>> list(s.get_matching_blocks())
        [Match(a=0, b=0, size=2), Match(a=3, b=2, size=2), Match(a=5, b=4, size=0)]
        find_longest_matchbhiisbjunkbestj(\++|\-+|\^+)context_linesHtmlDiff._tab_newline_replace.<locals>.expand_tabs id="%s%s"</span>SequenceMatcher.real_quick_ratio<span class="diff_sub">Convert range to the "ed" formatdiff_lines_iteratorHtmlDiff._convert_flagsmake_tableatags--+*** {} ****{}Generate comparison results for a same-tagged range.header_rowdifflib.pySet the two sequences to be compared.

        >>> s = SequenceMatcher()
        >>> s.set_seqs("abcd", "bcde")
        >>> s.ratio()
        0.75
         ^<span class="diff_chg"> Isolate change clusters by eliminating ranges with no changes.

        Return a generator of groups with up to n lines of context.
        Each group is in the same format as returned by get_opcodes().

        >>> from pprint import pprint
        >>> a = list(map(str, range(1,40)))
        >>> b = a[:]
        >>> b[8:8] = ['i']     # Make an insertion
        >>> b[20] += 'x'       # Make a replacement
        >>> b[23:28] = []      # Make a deletion
        >>> b[30] += 'y'       # Make another replacement
        >>> pprint(list(SequenceMatcher(None,a,b).get_grouped_opcodes()))
        [[('equal', 5, 8, 5, 8), ('insert', 8, 8, 8, 9), ('equal', 8, 11, 9, 12)],
         [('equal', 16, 19, 17, 20),
          ('replace', 19, 20, 20, 21),
          ('equal', 20, 22, 21, 23),
          ('delete', 22, 27, 23, 23),
          ('equal', 27, 30, 23, 26)],
         [('equal', 31, 34, 27, 30),
          ('replace', 34, 35, 30, 31),
          ('equal', 35, 38, 31, 34)]]
        line1Return list of 5-tuples describing how to turn a into b.

        Each tuple is of the form (tag, i1, i2, j1, j2).  The first tuple
        has i1 == j1 == 0, and remaining tuples have i1 == the i2 from the
        tuple preceding it, and likewise for j1 == the previous j2.

        The tags are strings, with these meanings:

        'replace':  a[i1:i2] should be replaced by b[j1:j2]
        'delete':   a[i1:i2] should be deleted.
                    Note that j1==j2 in this case.
        'insert':   b[j1:j2] should be inserted at a[i1:i1].
                    Note that i1==i2 in this case.
        'equal':    a[i1:i2] == b[j1:j2]

        >>> a = "qabxcd"
        >>> b = "abycdf"
        >>> s = SequenceMatcher(None, a, b)
        >>> for tag, i1, i2, j1, j2 in s.get_opcodes():
        ...    print(("%7s a[%d:%d] (%s) b[%d:%d] (%s)" %
        ...           (tag, i1, i2, a[i1:i2], j1, j2, b[j1:j2])))
         delete a[0:1] (q) b[0:0] ()
          equal a[1:3] (ab) b[0:2] (ab)
        replace a[3:4] (x) b[2:3] (y)
          equal a[4:6] (cd) b[3:5] (cd)
         insert a[6:6] () b[5:6] (f)
        Differ.__init__lines to compare must be str, not %s (%r)SequenceMatcher.set_seq1--?+HtmlDiff.make_tableUse SequenceMatcher to return list of the best "good enough" matches.

    word is a sequence for which close matches are desired (typically a
    string).

    possibilities is a list of sequences against which to match word
    (typically a list of strings).

    Optional arg n (default 3) is the maximum number of close matches to
    return.  n must be > 0.

    Optional arg cutoff (default 0.6) is a float in [0, 1].  Possibilities
    that don't score at least that similar to word are ignored.

    The best (no more than n) matches among the possibilities are returned
    in a list, sorted by similarity score, most similar first.

    >>> get_close_matches("appel", ["ape", "apple", "peach", "puppy"])
    ['apple', 'ape']
    >>> import keyword as _keyword
    >>> get_close_matches("wheel", _keyword.kwlist)
    ['while']
    >>> get_close_matches("Apple", _keyword.kwlist)
    []
    >>> get_close_matches("accept", _keyword.kwlist)
    ['except']
    _wrapcolumn\s*(?:#\s*)?$<module difflib>
    <table class="diff" id="difflib_chg_%(prefix)s_top"
           cellspacing="0" cellpadding="0" rules="groups" >
        <colgroup></colgroup> <colgroup></colgroup> <colgroup></colgroup>
        <colgroup></colgroup> <colgroup></colgroup> <colgroup></colgroup>
        %(header_row)s
        <tbody>
%(data_rows)s        </tbody>
    </table>ntestidxs<th colspan="2" class="diff_header">%s</th>_legend©ÚselfÚlaÚlbÚqueueÚmatching_blocksÚaloÚahiÚbloÚbhiÚiÚjÚkÚxÚi1Új1Úk1Únon_adjacentÚi2Új2Úk2+++ {}{}{}fullbcountavailhas        </tbody>        
        <tbody>
_count_leading-?+?toprefix
    Return number of `ch` characters at the start of `line`.

    Example:

    >>> _count_leading('   abc', ' ')
    3
    _styles
        Format "?" output and deal with leading tabs.

        Example:

        >>> d = Differ()
        >>> results = d._qformat('\tabcDefghiJkl\n', '\tabcdefGhijkl\n',
        ...                      '  ^ ^  ^      ', '  ^ ^  ^      ')
        >>> for line in results: print(repr(line))
        ...
        '- \tabcDefghiJkl\n'
        '? \t ^ ^  ^\n'
        '+ \tabcdefGhijkl\n'
        '? \t ^ ^  ^\n'
        -+?_fancy_replaceCollects mdiff output into separate lists

        Before storing the mdiff from/to data into a list, it is converted
        into a single line of text with HTML markup.
        For producing HTML side by side comparison with change highlights.

    This class can be used to create an HTML table (or a complete HTML file
    containing the table) showing a side by side, line by line comparison
    of text with inter-line and intra-line change highlights.  The table can
    be generated in either full or contextual difference mode.

    The following methods are provided for HTML generation:

    make_table -- generates HTML for a single side by side table
    make_file -- generates complete HTML file with a single side by side table

    See tools/scripts/diff.py for an example usage of this class.
    num_blanks_pendingnum_blanks_to_yieldcutoff must be in [0.0, 1.0]: %rcontext_diff.<locals>.<genexpr>format_keynum_linesmarkers+--alineblinebtagsfrom%d_in_change
    Return 1 for ignorable line: iff `line` is blank or contains a single '#'.

    Examples:

    >>> IS_LINE_JUNK('\n')
    True
    >>> IS_LINE_JUNK('  #   \n')
    True
    >>> IS_LINE_JUNK('hello\n')
    False
    <span class="diff_add">*** {}{}{}_check_typesDiffer._plain_replacea b sizeSequenceMatcher.__chain_b_line_pair_iterator_tabsizeMakes list of "next" linksSet the first sequence to be compared.

        The second sequence to be compared is not changed.

        >>> s = SequenceMatcher(None, "abcd", "bcde")
        >>> s.ratio()
        0.75
        >>> s.set_seq1("bcde")
        >>> s.ratio()
        1.0
        >>>

        SequenceMatcher computes and caches detailed information about the
        second sequence, so if you want to compare one sequence S against
        many sequences, use .set_seq2(S) once and call .set_seq1(x)
        repeatedly for each of the other sequences.

        See also set_seqs() and set_seq2().
        crunchernext_href
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN"
          "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">

<html>

<head>
    <meta http-equiv="Content-Type"
          content="text/html; charset=%(charset)s" />
    <title></title>
    <style type="text/css">%(styles)s
    </style>
</head>

<body>
    %(table)s%(legend)s
</body>

</html>Return an upper bound on ratio() very quickly.

        This isn't defined beyond that it is an upper bound on .ratio(), and
        is faster to compute than either .ratio() or .quick_ratio().
        _linejunk333333ã?
    Differ is a class for comparing sequences of lines of text, and
    producing human-readable differences or deltas.  Differ uses
    SequenceMatcher both to compare sequences of lines, and to compare
    sequences of characters within similar (near-matching) lines.

    Each line of a Differ delta begins with a two-letter code:

        '- '    line unique to sequence 1
        '+ '    line unique to sequence 2
        '  '    line common to both sequences
        '? '    line not present in either input sequence

    Lines beginning with '? ' attempt to guide the eye to intraline
    differences, and were not present in either input sequence.  These lines
    can be confusing if the sequences contain tab characters.

    Note that Differ makes no claim to produce a *minimal* diff.  To the
    contrary, minimal diffs are often counter-intuitive, because they synch
    up anywhere possible, sometimes accidental matches 100 pages apart.
    Restricting synch points to contiguous matches preserves some notion of
    locality, at the occasional cost of producing a longer diff.

    Example: Comparing two texts.

    First we set up the texts, sequences of individual single-line strings
    ending with newlines (such sequences can also be obtained from the
    `readlines()` method of file-like objects):

    >>> text1 = '''  1. Beautiful is better than ugly.
    ...   2. Explicit is better than implicit.
    ...   3. Simple is better than complex.
    ...   4. Complex is better than complicated.
    ... '''.splitlines(keepends=True)
    >>> len(text1)
    4
    >>> text1[0][-1]
    '\n'
    >>> text2 = '''  1. Beautiful is better than ugly.
    ...   3.   Simple is better than complex.
    ...   4. Complicated is better than complex.
    ...   5. Flat is better than nested.
    ... '''.splitlines(keepends=True)

    Next we instantiate a Differ object:

    >>> d = Differ()

    Note that when instantiating a Differ object we may pass functions to
    filter out line and character 'junk'.  See Differ.__init__ for details.

    Finally, we compare the two:

    >>> result = list(d.compare(text1, text2))

    'result' is a list of strings, so let's pretty-print it:

    >>> from pprint import pprint as _pprint
    >>> _pprint(result)
    ['    1. Beautiful is better than ugly.\n',
     '-   2. Explicit is better than implicit.\n',
     '-   3. Simple is better than complex.\n',
     '+   3.   Simple is better than complex.\n',
     '?     ++\n',
     '-   4. Complex is better than complicated.\n',
     '?            ^                     ---- ^\n',
     '+   4. Complicated is better than complex.\n',
     '?           ++++ ^                      ^\n',
     '+   5. Flat is better than nested.\n']

    As a single multi-line string it looks like this:

    >>> print(''.join(result), end="")
        1. Beautiful is better than ugly.
    -   2. Explicit is better than implicit.
    -   3. Simple is better than complex.
    +   3.   Simple is better than complex.
    ?     ++
    -   4. Complex is better than complicated.
    ?            ^                     ---- ^
    +   4. Complicated is better than complex.
    ?           ++++ ^                      ^
    +   5. Flat is better than nested.

    Methods:

    __init__(linejunk=None, charjunk=None)
        Construct a text differencer, with optional filters.

    compare(a, b)
        Compare two sequences of lines; generate the resulting delta.
    line_num©ÚaÚbÚfromfileÚtofileÚfromfiledateÚ
tofiledateÚnÚlinetermÚstartedÚgroupÚfromdateÚtodateÚfirstÚlastÚfile1_rangeÚfile2_rangeÚtagÚi1Úi2Új1Új2Úline_format_range_contextdiff_bytesSequenceMatcher.set_seq2Differ._dump_format_range_unifiedSequenceMatcher.set_seqs
    Return 1 for ignorable character: iff `ch` is a space or tab.

    Examples:

    >>> IS_CHARACTER_JUNK(' ')
    True
    >>> IS_CHARACTER_JUNK('\t')
    True
    >>> IS_CHARACTER_JUNK('\n')
    False
    >>> IS_CHARACTER_JUNK('x')
    False
    _table_templateReturn a measure of the sequences' similarity (float in [0,1]).

        Where T is the total number of elements in both sequences, and
        M is the number of matches, this is 2.0*M / T.
        Note that this is 1 if the sequences are identical, and 0 if
        they have nothing in common.

        .ratio() is expensive to compute if you haven't already computed
        .get_matching_blocks() or .get_opcodes(), in which case you may
        want to try .quick_ratio() or .real_quick_ratio() first to get an
        upper bound.

        >>> s = SequenceMatcher(None, "abcd", "bcde")
        >>> s.ratio()
        0.75
        >>> s.quick_ratio()
        0.75
        >>> s.real_quick_ratio()
        1.0
        _namedtupleReturns line of text with user's change markup and line formatting.

        lines -- list of lines from the ndiff generator to produce a line of
                 text from.  When producing the line of text to return, the
                 lines used are removed from this list.
        format_key -- '+' return first line in list with "add" markup around
                          the entire line.
                      '-' return first line in list with "delete" markup around
                          the entire line.
                      '?' return first line in list with add/delete/change
                          intraline markup (indices obtained from second line)
                      None return first line in list with no markup
        side -- indice into the num_lines list (0=from,1=to)
        num_lines -- from/to current line number.  This is NOT intended to be a
                     passed parameter.  It is present as a keyword argument to
                     maintain memory of the current line numbers between calls
                     of this function.

        Note, this function is purposefully not defined at the module scope so
        that data it needs from its parent function (within whose context it
        is defined) does not need to be of module scope.
        ®Gáz®ç?bpopular<a href="#difflib_chg_%s_top">t</a>all arguments must be bytes, not %s (%r)Returns generator yielding marked up from/to side by side differences.

    Arguments:
    fromlines -- list of text lines to compared to tolines
    tolines -- list of text lines to be compared to fromlines
    context -- number of context lines to display on each side of difference,
               if None, all from/to text lines will be generated.
    linejunk -- passed on to ndiff (see ndiff documentation)
    charjunk -- passed on to ndiff (see ndiff documentation)

    This function returns an iterator which returns a tuple:
    (from line tuple, to line tuple, boolean flag)

    from/to line tuple -- (line num, line text)
        line num -- integer or None (to indicate a context separation)
        line text -- original line text with following markers inserted:
            '\0+' -- marks start of added text
            '\0-' -- marks start of deleted text
            '\0^' -- marks start of changed text
            '\1' -- marks end of added/deleted/changed text

    boolean flag -- None indicates context separation, True indicates
        either "from" or "to" line contains a change, otherwise False.

    This function/iterator was originally developed to generate side by side
    file difference for making HTML pages (see HtmlDiff class for example
    usage).

    Note, this function utilizes the ndiff function to generate the side by
    side difference markup.  Optional ndiff arguments may be passed to this
    function and they in turn will be passed to ndiff.
    all arguments must be str, not: %rSequenceMatcher.ratio.<locals>.<genexpr>nlargestline2_mdiff.<locals>._line_pair_iteratorDiffer._qformatHtmlDiff._collect_lines
    Compare `a` and `b`, two sequences of lines represented as bytes rather
    than str. This is a wrapper for `dfunc`, which is typically either
    unified_diff() or context_diff(). Inputs are losslessly converted to
    strings so that `dfunc` only has to worry about strings, and encoded
    back to bytes on return. This is necessary to compare files with
    unknown or inconsistent encoding. All other inputs (except `n`) must be
    bytes rather than str.
    <th class="diff_next"><br /></th>n must be > 0: %r            <tr><td class="diff_next"%s>%s</td>%s<td class="diff_next">%s</td>%s</tr>
SequenceMatcher.get_opcodes +<td></td><td>&nbsp;Empty File&nbsp;</td>diff_bytes.<locals>.decodeYields from/to lines of text with a change indication.

        This function is an iterator.  It itself pulls lines from a
        differencing iterator, processes them and yields them.  When it can
        it yields both a "from" and a "to" line, otherwise it will yield one
        or the other.  In addition to yielding the lines of from/to text, a
        boolean flag is yielded to indicate if the text line(s) have
        differences in them.

        Note, this function is purposefully not defined at the module scope so
        that data it needs from its parent function (within whose context it
        is defined) does not need to be of module scope.
        contextLinesmatch_objectSequenceMatcher.get_grouped_opcodes--- {}{}{}_nlargestBuilds list of text lines by splitting text lines at wrap point

        This function will determine if the input text line needs to be
        wrapped (split) into separate lines.  If so, the first wrap point
        will be determined and the first line appended to the output
        text line list.  This function is used recursively to handle
        the second part of the split line to further split it.
        
        Construct a text differencer, with optional filters.

        The two optional keyword parameters are for filter functions:

        - `linejunk`: A function that should accept a single string argument,
          and return true iff the string is junk. The module-level function
          `IS_LINE_JUNK` may be used to filter out lines without visible
          characters, except for at most one splat ('#').  It is recommended
          to leave linejunk None; the underlying SequenceMatcher class has
          an adaptive notion of "noise" lines that's better than any static
          definition the author has ever been able to craft.

        - `charjunk`: A function that should accept a string of length 1. The
          module-level function `IS_CHARACTER_JUNK` may be used to filter out
          whitespace characters (a blank or tab; **note**: bad idea to include
          newline in this!).  Use of IS_CHARACTER_JUNK is recommended.
        Differ._fancy_helper
        table.diff {font-family:Courier; border:medium;}
        .diff_header {background-color:#e0e0e0}
        td.diff_header {text-align:right}
        .diff_next {background-color:#c0c0c0}
        .diff_add {background-color:#aaffaa}
        .diff_chg {background-color:#ffff77}
        .diff_sub {background-color:#ffaaaa}--- {} ----{}Returns iterator that splits (wraps) mdiff text lineslines_to_writeSet the second sequence to be compared.

        The first sequence to be compared is not changed.

        >>> s = SequenceMatcher(None, "abcd", "bcde")
        >>> s.ratio()
        0.75
        >>> s.set_seq2("abcd")
        >>> s.ratio()
        1.0
        >>>

        SequenceMatcher computes and caches detailed information about the
        second sequence, so if you want to compare one sequence S against
        many sequences, use .set_seq2(S) once and call .set_seq1(x)
        repeatedly for each of the other sequences.

        See also set_seqs() and set_seq1().
        
        Compare two sequences of lines; generate the resulting delta.

        Each sequence must contain individual single-line strings ending with
        newlines. Such sequences can be obtained from the `readlines()` method
        of file-like objects.  The delta generated also consists of newline-
        terminated strings, ready to be printed as-is via the writeline()
        method of a file-like object.

        Example:

        >>> print(''.join(Differ().compare('one\ntwo\nthree\n'.splitlines(True),
        ...                                'ore\ntree\nemu\n'.splitlines(True))),
        ...       end="")
        - one
        ?  ^
        + ore
        ?  ^
        - two
        - three
        ?  -
        + tree
        + emu
        SequenceMatcher.get_matching_blocksSequenceMatcher.__init__HtmlDiff._split_line
        When replacing one block of lines with another, search the blocks
        for *similar* lines; the best-matching pair (if any) is used as a
        synch point, and intraline difference marking is done on the
        similar pair. Lots of work, but often worth it.

        Example:

        >>> d = Differ()
        >>> results = d._fancy_replace(['abcDefghiJkl\n'], 0, 1,
        ...                            ['abcdefGhijkl\n'], 0, 1)
        >>> print(''.join(results), end="")
        - abcDefghiJkl
        ?    ^  ^  ^
        + abcdefGhijkl
        ?    ^  ^  ^
        Returns HTML table of side by side comparison with change highlights

        Arguments:
        fromlines -- list of "from" lines
        tolines -- list of "to" lines
        fromdesc -- "from" file column header string
        todesc -- "to" file column header string
        context -- set to True for contextual differences (defaults to False
            which shows full differences).
        numlines -- number of context lines.  When context is set True,
            controls number of lines displayed before and after the change.
            When context is False, controls the number of lines to place
            the "next" link anchors before the next change (so click of
            "next" link jumps to just before the change).
        <thead><tr>%s%s%s%s</tr></thead>{},{}HtmlDiff.__init__HtmlDiff.make_file--++©ÚselfÚaÚaloÚahiÚbÚbloÚbhiÚ
best_ratioÚcutoffÚcruncherÚeqiÚeqjÚjÚbjÚiÚaiÚbest_iÚbest_jÚaeltÚbeltÚatagsÚbtagsÚtagÚai1Úai2Úbj1Úbj2ÚlaÚlbReturns from/to line lists with tabs expanded and newlines removed.

        Instead of tab characters being replaced by the number of spaces
        needed to fill in to the next tab stop, this function will fill
        the space with tab characters.  This is done so that the difference
        algorithms can identify changes in a file when tabs are replaced by
        spaces and vice versa.  At the end of the HTML generation, the tab
        characters will be replaced with a nonbreakable space.
        
    <table class="diff" summary="Legends">
        <tr> <th colspan="2"> Legends </th> </tr>
        <tr> <td> <table border="" summary="Colors">
                      <tr><th> Colors </th> </tr>
                      <tr><td class="diff_add">&nbsp;Added&nbsp;</td></tr>
                      <tr><td class="diff_chg">Changed</td> </tr>
                      <tr><td class="diff_sub">Deleted</td> </tr>
                  </table></td>
             <td> <table border="" summary="Links">
                      <tr><th colspan="2"> Links </th> </tr>
                      <tr><td>(f)irst change</td> </tr>
                      <tr><td>(n)ext change</td> </tr>
                      <tr><td>(t)op</td> </tr>
                  </table></td> </tr>
    </table>Find longest matching block in a[alo:ahi] and b[blo:bhi].

        If isjunk is not defined:

        Return (i,j,k) such that a[i:i+k] is equal to b[j:j+k], where
            alo <= i <= i+k <= ahi
            blo <= j <= j+k <= bhi
        and for all (i',j',k') meeting those conditions,
            k >= k'
            i <= i'
            and if i == i', j <= j'

        In other words, of all maximal matching blocks, return one that
        starts earliest in a, and of all those maximal matching blocks that
        start earliest in a, return the one that starts earliest in b.

        >>> s = SequenceMatcher(None, " abcd", "abcd abcd")
        >>> s.find_longest_match(0, 5, 0, 9)
        Match(a=0, b=4, size=5)

        If isjunk is defined, first the longest matching block is
        determined as above, but with the additional restriction that no
        junk element appears in the block.  Then that block is extended as
        far as possible by matching (only) junk elements on both sides.  So
        the resulting block never matches on junk except as identical junk
        happens to be adjacent to an "interesting" match.

        Here's the same example as before, but considering blanks to be
        junk.  That prevents " abcd" from matching the " abcd" at the tail
        end of the second sequence directly.  Instead only the "abcd" can
        match, and matches the leftmost "abcd" in the second sequence:

        >>> s = SequenceMatcher(lambda x: x==" ", " abcd", "abcd abcd")
        >>> s.find_longest_match(0, 5, 0, 9)
        Match(a=1, b=0, size=4)

        If no blocks match, return (alo, blo, 0).

        >>> s = SequenceMatcher(None, "ab", "c")
        >>> s.find_longest_match(0, 2, 0, 1)
        Match(a=0, b=0, size=0)
        Differ._fancy_replace<a href="#difflib_chg_%s_0">f</a> id="difflib_chg_%s_%d"Return an upper bound on ratio() relatively quickly.

        This isn't defined beyond that it is an upper bound on .ratio(), and
        is faster to compute.
        _calculate_ratio_file_templateCreate unique anchor prefixes
    SequenceMatcher is a flexible class for comparing pairs of sequences of
    any type, so long as the sequence elements are hashable.  The basic
    algorithm predates, and is a little fancier than, an algorithm
    published in the late 1980's by Ratcliff and Obershelp under the
    hyperbolic name "gestalt pattern matching".  The basic idea is to find
    the longest contiguous matching subsequence that contains no "junk"
    elements (R-O doesn't address junk).  The same idea is then applied
    recursively to the pieces of the sequences to the left and to the right
    of the matching subsequence.  This does not yield minimal edit
    sequences, but does tend to yield matches that "look right" to people.

    SequenceMatcher tries to compute a "human-friendly diff" between two
    sequences.  Unlike e.g. UNIX(tm) diff, the fundamental notion is the
    longest *contiguous* & junk-free matching subsequence.  That's what
    catches peoples' eyes.  The Windows(tm) windiff has another interesting
    notion, pairing up elements that appear uniquely in each sequence.
    That, and the method here, appear to yield more intuitive difference
    reports than does diff.  This method appears to be the least vulnerable
    to synching up on blocks of "junk lines", though (like blank lines in
    ordinary text files, or maybe "<P>" lines in HTML files).  That may be
    because this is the only method of the 3 that has a *concept* of
    "junk" <wink>.

    Example, comparing two strings, and considering blanks to be "junk":

    >>> s = SequenceMatcher(lambda x: x == " ",
    ...                     "private Thread currentThread;",
    ...                     "private volatile Thread currentThread;")
    >>>

    .ratio() returns a float in [0, 1], measuring the "similarity" of the
    sequences.  As a rule of thumb, a .ratio() value over 0.6 means the
    sequences are close matches:

    >>> print(round(s.ratio(), 3))
    0.866
    >>>

    If you're only interested in where the sequences match,
    .get_matching_blocks() is handy:

    >>> for block in s.get_matching_blocks():
    ...     print("a[%d] and b[%d] match for %d elements" % block)
    a[0] and b[0] match for 8 elements
    a[8] and b[17] match for 21 elements
    a[29] and b[38] match for 0 elements

    Note that the last tuple returned by .get_matching_blocks() is always a
    dummy, (len(a), len(b), 0), and this is the only case in which the last
    tuple element (number of elements matched) is 0.

    If you want to know how to change the first sequence into the second,
    use .get_opcodes():

    >>> for opcode in s.get_opcodes():
    ...     print("%6s a[%d:%d] b[%d:%d]" % opcode)
     equal a[0:8] b[0:8]
    insert a[8:8] b[8:17]
     equal a[8:29] b[17:38]

    See the Differ class for a fancy human-friendly file differencer, which
    uses SequenceMatcher both to compare sequences of lines, and to compare
    sequences of characters within similar (near-matching) lines.

    See also function get_close_matches() in this module, which shows how
    simple code building on SequenceMatcher can be used to do useful work.

    Timing:  Basic R-O is cubic time worst case and quadratic time expected
    case.  SequenceMatcher is quadratic time for the worst case and has
    expected-case behavior dependent in a complicated way on how many
    elements the sequences have in common; best case time is linear.

    Methods:

    __init__(isjunk=None, a='', b='')
        Construct a SequenceMatcher.

    set_seqs(a, b)
        Set the two sequences to be compared.

    set_seq1(a)
        Set the first sequence to be compared.

    set_seq2(b)
        Set the second sequence to be compared.

    find_longest_match(alo, ahi, blo, bhi)
        Find longest matching block in a[alo:ahi] and b[blo:bhi].

    get_matching_blocks()
        Return list of triples describing matching subsequences.

    get_opcodes()
        Return list of 5-tuples describing how to turn a into b.

    ratio()
        Return a measure of the sequences' similarity (float in [0,1]).

    quick_ratio()
        Return an upper bound on .ratio() relatively quickly.

    real_quick_ratio()
        Return an upper bound on ratio() very quickly.
    
    Compare two sequences of lines; generate the delta as a unified diff.

    Unified diffs are a compact way of showing line changes and a few
    lines of context.  The number of context lines is set by 'n' which
    defaults to three.

    By default, the diff control lines (those with ---, +++, or @@) are
    created with a trailing newline.  This is helpful so that inputs
    created from file.readlines() result in diffs that are suitable for
    file.writelines() since both the inputs and outputs have trailing
    newlines.

    For inputs that do not have trailing newlines, set the lineterm
    argument to "" so that the output will be uniformly newline free.

    The unidiff format normally has a header for filenames and modification
    times.  Any or all of these may be specified using strings for
    'fromfile', 'tofile', 'fromfiledate', and 'tofiledate'.
    The modification times are normally expressed in the ISO 8601 format.

    Example:

    >>> for line in unified_diff('one two three four'.split(),
    ...             'zero one tree four'.split(), 'Original', 'Current',
    ...             '2005-01-26 23:30:50', '2010-04-02 10:20:52',
    ...             lineterm=''):
    ...     print(line)                 # doctest: +NORMALIZE_WHITESPACE
    --- Original        2005-01-26 23:30:50
    +++ Current         2010-04-02 10:20:52
    @@ -1,4 +1,4 @@
    +zero
     one
    -two
    -three
    +tree
     four
    _SequenceMatcher__chain_bheapqSequenceMatcher.find_longest_matchget_doctestexamplenumDocTestCase.__eq__^([ ]*)(?=\S)optionflags--fail-fastcompileflagsclear_globssave_tracesave_set_traceDocTestFinder.find: __test__ values must be strings, functions, methods, classes, or modules: %rOutputChecker.check_outputline %r of the doctest for %s has an option directive on a line with no example: %rDocTestFinder._findset_unittest_reportflagssource_lineswant_linesexc_msgexc_tb_DocTestRunner__patched_linecache_getlinesModule doctest -- a framework for running examples in docstrings.

In simplest use, end each module M to be tested with:

def _test():
    import doctest
    doctest.testmod()

if __name__ == "__main__":
    _test()

Then running the module as a script will cause the examples in the
docstrings to get executed and verified:

python M.py

This won't display anything unless an example fails, in which case the
failing example(s) and the cause(s) of the failure(s) are printed to stdout
(why not stderr? because stderr is a lame hack <0.2 wink>), and the final
line of output is "Test failed.".

Run it with the -v switch instead:

python M.py -v

and a detailed report of all examples tried is printed to stdout, along
with assorted summaries at the end.

You can force verbose mode by passing "verbose=True" to testmod, or prohibit
it by passing "verbose=False".  In either of those cases, sys.argv is not
examined by testmod.

There are a variety of other ways to run doctests, including integration
with the unittest framework, and support for running non-Python text
files containing doctests.  There are also many ways to override parts
of doctest's default behaviors.  See the Library Reference Manual for
details.
TestResultsA DocTest example has failed in debugging mode.

    The exception instance has variables:

    - test: the DocTest object being run

    - example: the Example object that failed

    - got: the actual output
    _ellipsis_match_INDENT_RE *$SkipDocTestCase.setUpDocTestParserDocTestCase.tearDownDocTestRunner.summarize_exclude_emptyDifferences (%s):
__globals__DocTestFinder._get_test(^|.*:)\s*\w*("|\')
        Return a dictionary containing option overrides extracted from
        option directives in the given source string.

        `name` is the string's name, and `lineno` is the line number
        where the example starts; both are used for error messages.
        _toAsciiDocTestRunner.__runDocTestCase.format_failureTrying:
DocTestFinder.find: name must be given when obj.__name__ doesn't exist: %r_dt_testExtract script from text with examples.

       Converts text with examples to a Python script.  Example input is
       converted to regular code.  Example output and all other words
       are converted to comments:

       >>> text = '''
       ...       Here are examples of simple math.
       ...
       ...           Python has super accurate integer addition
       ...
       ...           >>> 2 + 2
       ...           5
       ...
       ...           And very friendly error messages:
       ...
       ...           >>> 1/0
       ...           To Infinity
       ...           And
       ...           Beyond
       ...
       ...           You can use logic if you want:
       ...
       ...           >>> if 0:
       ...           ...    blah
       ...           ...    blah
       ...           ...
       ...
       ...           Ho hum
       ...           '''

       >>> print(script_from_examples(text))
       # Here are examples of simple math.
       #
       #     Python has super accurate integer addition
       #
       2 + 2
       # Expected:
       ## 5
       #
       #     And very friendly error messages:
       #
       1/0
       # Expected:
       ## To Infinity
       ## And
       ## Beyond
       #
       #     You can use logic if you want:
       #
       if 0:
          blah
          blah
       #
       #     Ho hum
       <BLANKLINE>
       SKIP_TestClass.__init__DocTest.__hash__
    A specialized version of the python debugger that redirects stdout
    to a given stream when interacting with the user.  Stdout is *not*
    redirected when traced code is executed.
    reStructuredText en<doctest %s[%d]>Debug a single doctest docstring, in argument `src`'
                Blank lines can be marked with <BLANKLINE>:
                    >>> print('foo\n\nbar\n')
                    foo
                    <BLANKLINE>
                    bar
                    <BLANKLINE>
            (?m)^[^\S\n]+$testfilesDebugRunnerSkipDocTestCase.shortDescriptionSets the unittest option flags.

    The old flag is returned so that a runner could restore the old
    value if it wished to:

      >>> import doctest
      >>> old = doctest._unittest_reportflags
      >>> doctest.set_unittest_reportflags(REPORT_NDIFF |
      ...                          REPORT_ONLY_FIRST_FAILURE) == old
      True

      >>> doctest._unittest_reportflags == (REPORT_NDIFF |
      ...                                   REPORT_ONLY_FIRST_FAILURE)
      True

    Only reporting flags can be set:

      >>> doctest.set_unittest_reportflags(ELLIPSIS)
      Traceback (most recent call last):
      ...
      ValueError: ('Only reporting flags allowed', 8)

      >>> doctest.set_unittest_reportflags(old) == (REPORT_NDIFF |
      ...                                   REPORT_ONLY_FIRST_FAILURE)
      True
    BOOM_DocTestRunner__runf2DONT_ACCEPT_TRUE_FOR_1exc_valvalnameDocTestFailure
    Add the given number of space characters to the beginning of
    every non-blank line in `s`, and return the result.
    _from_modulereport_unexpected_exception_OutputRedirectingPdb__debugger_usedunified diff with -expected +actual_OPTION_DIRECTIVE_RE_recurse
        Extract all doctest examples from the given string, and
        collect them into a `DocTest` object.

        `globs`, `name`, `filename`, and `lineno` are attributes for
        the new `DocTest` object.  See the documentation for `DocTest`
        for more information.
        Expected a module: %r_IS_BLANK_OR_COMMENTmasterDocTestFailure.__str__
    A single doctest example, consisting of source code and expected
    output.  `Example` defines the following attributes:

      - source: A single Python statement, always ending with a newline.
        The constructor adds a newline if needed.

      - want: The expected output from running the source code (either
        from stdout, or a traceback in case of exception).  `want` ends
        with a newline unless it's empty, in which case it's an empty
        string.  The constructor adds a newline if needed.

      - exc_msg: The exception message generated by the example, if
        the example is expected to generate an exception; or `None` if
        it is not expected to generate an exception.  This exception
        message is compared against the return value of
        `traceback.format_exception_only()`.  `exc_msg` ends with a
        newline unless it's `None`.  The constructor adds a newline
        if needed.

      - lineno: The line number within the DocTest string containing
        this Example where the Example begins.  This line number is
        zero-based, with respect to the beginning of the DocTest.

      - indent: The example's indentation in the DocTest string.
        I.e., the number of space characters that precede the
        example's first prompt.

      - options: A dictionary mapping from option flags to True or
        False, which is used to override default options for this
        example.  Any option flags not contained in this dictionary
        are left at their default value (as specified by the
        DocTestRunner's optionflags).  By default, no options are set.
    passed andUnexpectedException.__str__file containing the tests to runREPORTING_FLAGSDocFileCase.format_failuretest_finderLine %s, in %sExpected a module, string, or None
        Find tests for the given object and any contained objects, and
        add them to `tests`.
        stop running tests after first failure (this is a shorthand for -o FAIL_FAST, and is in addition to any other -o options)test_skip
    Return a string containing a traceback message for the given
    exc_info tuple (as returned by sys.exc_info()).
    print very verbose output for all testsDebug a single doctest docstring.

    Provide the module (or dotted name of the module) containing the
    test to be debugged and the name (within the module) of the object
    with the docstring with tests to be debugged.
    ok
^[ ]*(#.*)?$whitespace normalizationException raised:
run_docstring_examplesDocFileTestDocTestRunner.report_success
                If the ellipsis flag is used, then '...' can be used to
                elide substrings in the desired output:
                    >>> print(list(range(1000))) #doctest: +ELLIPSIS
                    [0, 1, 2, ..., 999]
            
        Report that the test runner is about to process the given
        example.  (Only displays a message if verbose=True)
        Doctest: Run doc tests but raise an exception as soon as there is a failure.

       If an unexpected exception occurs, an UnexpectedException is raised.
       It contains the test, the example, and the original exception:

         >>> runner = DebugRunner(verbose=False)
         >>> test = DocTestParser().get_doctest('>>> raise KeyError\n42',
         ...                                    {}, 'foo', 'foo.py', 0)
         >>> try:
         ...     runner.run(test)
         ... except UnexpectedException as f:
         ...     failure = f

         >>> failure.test is test
         True

         >>> failure.example.want
         '42\n'

         >>> exc_info = failure.exc_info
         >>> raise exc_info[1] # Already has the traceback
         Traceback (most recent call last):
         ...
         KeyError

       We wrap the original exception to give the calling application
       access to the test and example information.

       If the output doesn't match, then a DocTestFailure is raised:

         >>> test = DocTestParser().get_doctest('''
         ...      >>> x = 1
         ...      >>> x
         ...      2
         ...      ''', {}, 'foo', 'foo.py', 0)

         >>> try:
         ...    runner.run(test)
         ... except DocTestFailure as f:
         ...    failure = f

       DocTestFailure objects provide access to the test:

         >>> failure.test is test
         True

       As well as to the example:

         >>> failure.example.want
         '2\n'

       and the actual output:

         >>> failure.got
         '1\n'

       If a failure or error occurs, the globals are left intact:

         >>> del test.globs['__builtins__']
         >>> test.globs
         {'x': 1}

         >>> test = DocTestParser().get_doctest('''
         ...      >>> x = 2
         ...      >>> raise KeyError
         ...      ''', {}, 'foo', 'foo.py', 0)

         >>> runner.run(test)
         Traceback (most recent call last):
         ...
         doctest.UnexpectedException: <DocTest foo from foo.py:0 (2 examples)>

         >>> del test.globs['__builtins__']
         >>> test.globs
         {'x': 2}

       But the globals are cleared if there is no error:

         >>> test = DocTestParser().get_doctest('''
         ...      >>> x = 2
         ...      ''', {}, 'foo', 'foo.py', 0)

         >>> runner.run(test)
         TestResults(failed=0, attempted=1)

         >>> test.globs
         {}

       
        Create a new test runner.

        Optional keyword arg `checker` is the `OutputChecker` that
        should be used to compare the expected outputs and actual
        outputs of doctest examples.

        Optional keyword arg 'verbose' prints lots of stuff if true,
        only failures if false; by default, it's true iff '-v' is in
        sys.argv.

        Optional argument `optionflags` can be used to control how the
        test runner compares expected output to actual output, and how
        it displays failures.  See the documentation for `testmod` for
        more information.
        val -> _TestClass object with associated value val.

        >>> t = _TestClass(123)
        >>> print(t.get())
        123
        __displayhook__DIVIDER
        Record the fact that the given DocTest (`test`) generated `f`
        failures out of `t` tried examples.
        test_pathExpected:
%sGot:
%sTest passed.DocTest no longer accepts str; use DocTestParser insteadDocTestParser.get_doctesttestsourceDocTestRunner.report_startitems._name2ftDocFileCase.idmin_indentcharnondiff with -expected +actualDocTestRunner.run.<locals>.outstartposendpos
    Return the compiler-flags associated with the future features that
    have been imported into the given namespace (globs).
    noteststotalttotalf_normalize_moduleexcoutreport_failureDocTestParser._min_indentREPORT_CDIFF
                      Example of a string object, searched as-is.
                      >>> x = 1; y = 2
                      >>> x + y, x * y
                      (3, 2)
                      OutputChecker._do_a_fancy_diffDocTestParser.get_examples__docformat__Can't resolve paths relative to the module %r (it has no __file__)DocTestFinder._from_moduleSkipDocTestCase.__init__module_relativetestsrcline %r of the doctest for %s has an invalid option: %r<]>^\s*class\s*%s\b
        Return a DocTest for the given object, if it defines a docstring;
        otherwise, return None.
        _dt_checkerfile_contents_extract_future_flagsextraglobsraise_on_error
        Given the lines of a source string (including prompts and
        leading indentation), check to make sure that every prompt is
        followed by a space character.  If any line is not followed by
        a space character, then raise ValueError.
        
        # Grab the traceback header.  Different versions of Python have
        # said different things on the first traceback line.
        ^(?P<hdr> Traceback\ \(
            (?: most\ recent\ call\ last
            |   innermost\ last
            ) \) :
        )
        \s* $                # toss trailing whitespace on the header.
        (?P<stack> .*?)      # don't blink: absorb stuff until...
        ^ (?P<msg> \w+ .*)   #     a line *starts* with alphanum.
        DocTest.__repr___exception_tracebackDocTestRunner.report_unexpected_exceptionDocTestParser._find_optionsUnexpectedException.__init__DocTestCase.idDONT_ACCEPT_BLANKLINE
    A class used to run DocTest test cases, and accumulate statistics.
    The `run` method is used to process a single DocTest case.  It
    returns a tuple `(f, t)`, where `t` is the number of test cases
    tried, and `f` is the number of test cases that failed.

        >>> tests = DocTestFinder().find(_TestClass)
        >>> runner = DocTestRunner(verbose=False)
        >>> tests.sort(key = lambda test: test.name)
        >>> for test in tests:
        ...     print(test.name, '->', runner.run(test))
        _TestClass -> TestResults(failed=0, attempted=2)
        _TestClass.__init__ -> TestResults(failed=0, attempted=2)
        _TestClass.get -> TestResults(failed=0, attempted=2)
        _TestClass.square -> TestResults(failed=0, attempted=1)

    The `summarize` method prints a summary of all the test cases that
    have been run by the runner, and returns an aggregated `(f, t)`
    tuple:

        >>> runner.summarize(verbose=1)
        4 items passed all tests:
           2 tests in _TestClass
           2 tests in _TestClass.__init__
           2 tests in _TestClass.get
           1 tests in _TestClass.square
        7 tests in 4 items.
        7 passed and 0 failed.
        Test passed.
        TestResults(failed=0, attempted=7)

    The aggregated number of tried examples and failed examples is
    also available via the `tries` and `failures` attributes:

        >>> runner.tries
        7
        >>> runner.failures
        0

    The comparison between expected outputs and actual outputs is done
    by an `OutputChecker`.  This comparison may be customized with a
    number of option flags; see the documentation for `testmod` for
    more information.  If the option flags are insufficient, then the
    comparison may also be customized by passing a subclass of
    `OutputChecker` to the constructor.

    The test runner's display output can be controlled in two ways.
    First, an output function (`out) can be passed to
    `TestRunner.run`; this function will be called with strings that
    should be displayed.  It defaults to `sys.stdout.write`.  If
    capturing the output is not sufficient, then the display output
    can be also customized by subclassing DocTestRunner, and
    overriding the methods `report_start`, `report_success`,
    `report_unexpected_exception`, and `report_failure`.
     %3d tests in %s_module_relative_path_OutputRedirectingPdb.set_continue***Test Failed***items had no tests:DocTestParser._parse_exampleobj_mod_EXCEPTION_RE_OutputRedirectingPdb.__init__DocFileCase.__repr__
                If the whitespace normalization flag is used, then
                differences in whitespace are ignored.
                    >>> print(list(range(30))) #doctest: +NORMALIZE_WHITESPACE
                    [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14,
                     15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26,
                     27, 28, 29]
            
    Return the module specified by `module`.  In particular:
      - If `module` is a module, then return module.
      - If `module` is a string, then import and return the
        module with that name.
      - If `module` is None, then return the calling module.
        The calling module is assumed to be the module of
        the stack frame at the given depth in the call stack.
    Run the test case without results and without catching exceptions

           The unit test framework includes a debug method on test cases
           and test suites to support post-mortem debugging.  The test code
           is run in such a way that errors are not caught.  This way a
           caller can catch the errors and initiate post-mortem debugging.

           The DocTestCase provides a debug method that raises
           UnexpectedException errors if there is an unexpected
           exception:

             >>> test = DocTestParser().get_doctest('>>> raise KeyError\n42',
             ...                {}, 'foo', 'foo.py', 0)
             >>> case = DocTestCase(test)
             >>> try:
             ...     case.debug()
             ... except UnexpectedException as f:
             ...     failure = f

           The UnexpectedException contains the test, the example, and
           the original exception:

             >>> failure.test is test
             True

             >>> failure.example.want
             '42\n'

             >>> exc_info = failure.exc_info
             >>> raise exc_info[1] # Already has the traceback
             Traceback (most recent call last):
             ...
             KeyError

           If the output doesn't match, then a DocTestFailure is raised:

             >>> test = DocTestParser().get_doctest('''
             ...      >>> x = 1
             ...      >>> x
             ...      2
             ...      ''', {}, 'foo', 'foo.py', 0)
             >>> case = DocTestCase(test)

             >>> try:
             ...    case.debug()
             ... except DocTestFailure as f:
             ...    failure = f

           DocTestFailure objects provide access to the test:

             >>> failure.test is test
             True

           As well as to the example:

             >>> failure.example.want
             '2\n'

           and the actual output:

             >>> failure.got
             '1\n'

           
        Report that the given example ran successfully.  (Only
        displays a message if verbose=True)
        --option
    A pointless class, for sanity-checking of docstring testing.

    Methods:
        square()
        get()

    >>> _TestClass(13).get() + _TestClass(-12).get()
    1
    >>> hex(_TestClass(13).square().get())
    '0xa9'
    (?m)^%s\s*?$
        Run the examples in `test`, and display the results using the
        writer function `out`.

        The examples are run in the namespace `test.globs`.  If
        `clear_globs` is true (the default), then this namespace will
        be cleared after the test runs, to help with garbage
        collection.  If you would like to examine the namespace after
        the test completes, then use `clear_globs=False`.

        `compileflags` gives the set of flags that should be used by
        the Python compiler when running the examples.  If not
        specified, then it will default to the set of future-import
        flags that apply to `globs`.

        The output of each example is checked using
        `DocTestRunner.check_output`, and the results are formatted by
        the `DocTestRunner.report_*` methods.
        get() -> return TestClass's associated value.

        >>> x = _TestClass(-42)
        >>> print(x.get())
        -42
        DocTestRunner.mergegot_linesengineDocFileSuitedebug_src_comment_line
        Run the examples in `test`.  Write the outcome of each example
        with one of the `DocTestRunner.report_*` methods, using the
        writer function `out`.  `compileflags` is the set of compiler
        flags that should be used to execute examples.  Return a tuple
        `(f, t)`, where `t` is the number of examples tried, and `f`
        is the number of examples that failed.  The examples are run
        in the namespace `test.globs`.
        _dt_tearDownDocTestSuite<doctest (?P<name>.+)\[(?P<examplenum>\d+)\]>$no examples
        Convert string to hex-escaped ASCII string.
         %3d of %3d in %s<%s %s from %s:%s (%s)>object must be a class or functiondoctest.pyExtract the test sources from a doctest docstring as a script.

    Provide the module (or dotted name of the module) containing the
    test to be debugged and the name (within the module) of the object
    with the doc string with tests to be debugged.
    context diff with expected followed by actualExpecting:
DocTestRunner.report_failure_SpoofOut.getvalueOPTIONFLAGS_BY_NAMEgettrace_DocTestRunner__record_outcomespecify a doctest option flag to apply to the test run; may be specified more than once to apply multiple options_verboseOutputChecker.output_differenceDocTestFinder.find: __test__ keys must be strings: %rDocTestSuite will not work with -O2 and aboveDocTest.__lt__Expected nothing
Got nothing
Failed example:
        Given a regular expression match from `_EXAMPLE_RE` (`m`),
        return a pair `(source, want)`, where `source` is the matched
        example's source code (with prompts and indentation stripped);
        and `want` is the example's expected output (with indentation
        stripped).

        `name` is the string's name, and `lineno` is the line number
        where the example starts; both are used for error messages.
        Return a commented form of the given lineCOMPARISON_FLAGSbool-int equivalence_strip_exception_detailsfullpathReturn the minimum indentation of any non-blank line in `s`DocTestCase.runTest1 exampleExample.__hash___dt_setUpPackage may only be specified for module-relative paths.**********************************************************************Expecting nothing

        Check that every line in the given list starts with the given
        prefix; if any line does not, then raise a ValueError.
        
    A class used to parse strings containing doctest examples.
    DocTestRunner.__patched_linecache_getlines(?m)^(?!$)DocTestFailure.__init__failed attempted
        Return True iff the actual output from an example (`got`)
        matches the expected output (`want`).  These strings are
        always considered to match if they are identical; but
        depending on what option flags the test runner is using,
        several non-exact match types are also possible.  See the
        documentation for `TestRunner` for more information about
        option flags.
        DocTest.__eq__#\s*doctest:\s*([^\n\'"]*)$_OutputRedirectingPdb__outoriginal_optionflags
        Divide the given string into examples and intervening text,
        and return them as a list of alternating Examples and strings.
        Line numbers for the Examples are 0-based.  The optional
        argument `name` is a name identifying this string, and is only
        used for error messages.
        Bad diff option%s.__test__.%sIGNORE_EXCEPTION_DETAIL©ÚselfÚtestÚcompileflagsÚoutÚfailuresÚtriesÚoriginal_optionflagsÚSUCCESSÚFAILUREÚBOOMÚcheckÚ
examplenumÚexampleÚquietÚ
optionflagÚvalÚfilenameÚ	exceptionÚgotÚoutcomeÚexc_msg
        Return a list of the DocTests that are defined by the given
        object's docstring, or by any of its contained objects'
        docstrings.

        The optional parameter `module` is the module that contains
        the given object.  If the module is not specified or is None, then
        the test finder will attempt to automatically determine the
        correct module.  The object's module is used:

            - As a default namespace, if `globs` is not specified.
            - To prevent the DocTestFinder from extracting DocTests
              from objects that are imported from other modules.
            - To find the name of the file containing the object.
            - To help find the line number of the object within its
              file.

        Contained objects whose module does not match `module` are ignored.

        If `module` is False, no attempt to find the module will be made.
        This is obscure, of use mostly in tests:  if `module` is False, or
        is None but cannot be found automatically, then all objects are
        considered to belong to the (non-existent) module, so all contained
        objects will (recursively) be searched for doctests.

        The globals for each DocTest is formed by combining `globs`
        and `extraglobs` (bindings in `extraglobs` override bindings
        in `globs`).  A new copy of the globals dictionary is created
        for each DocTest.  If `globs` is not specified, then it
        defaults to the module's `__dict__`, if specified, or {}
        otherwise.  If `extraglobs` is not specified, then it defaults
        to {}.

        DocTestFinder._find_linenoA unittest suite for one or more doctest files.

    The path to each doctest file is given as a string; the
    interpretation of that string depends on the keyword argument
    "module_relative".

    A number of options may be provided as keyword arguments:

    module_relative
      If "module_relative" is True, then the given file paths are
      interpreted as os-independent module-relative paths.  By
      default, these paths are relative to the calling module's
      directory; but if the "package" argument is specified, then
      they are relative to that package.  To ensure os-independence,
      "filename" should use "/" characters to separate path
      segments, and may not be an absolute path (i.e., it may not
      begin with "/").

      If "module_relative" is False, then the given file paths are
      interpreted as os-specific paths.  These paths may be absolute
      or relative (to the current working directory).

    package
      A Python package or the name of a Python package whose directory
      should be used as the base directory for module relative paths.
      If "package" is not specified, then the calling module's
      directory is used as the base directory for module relative
      filenames.  It is an error to specify "package" if
      "module_relative" is False.

    setUp
      A set-up function.  This is called before running the
      tests in each file. The setUp function will be passed a DocTest
      object.  The setUp function can access the test globals as the
      globs attribute of the test passed.

    tearDown
      A tear-down function.  This is called after running the
      tests in each file.  The tearDown function will be passed a DocTest
      object.  The tearDown function can access the test globals as the
      globs attribute of the test passed.

    globs
      A dictionary containing initial global variables for the tests.

    optionflags
      A set of doctest option flags expressed as an integer.

    parser
      A DocTestParser (or subclass) that should be used to extract
      tests from the files.

    encoding
      An encoding that will be used to convert the files to unicode.
    DocTestParser._check_prefixExample.__eq__DocTestRunner.__init___failure_headerdebug_scriptitems had failures:_DocTestRunner__LINECACHE_FILENAME_REunknown outcome_fakeout_load_testfileExample.__init__DebugRunner.runDocTest.__init__REPORT_UDIFFOutputChecker._toAsciiline %r of the docstring for %s has inconsistent leading whitespace: %rDebugRunner.report_failure_check_prompt_blankunknown line numberFailed doctest test for %s
  File "%s", line %s, in %s

%sDocTestRunner.__record_outcome
    A class used to extract the DocTests that are relevant to a given
    object, from its docstring and the docstrings of its contained
    objects.  Doctests can currently be extracted from the following
    object types: modules, functions, classes, methods, staticmethods,
    classmethods, and properties.
    BLANKLINE_MARKER
        Return a string describing the differences between the
        expected output for a given example (`example`) and the actual
        output (`got`).  `optionflags` is the set of option flags used
        to compare `want` and `got`.
        m=None, name=None, globs=None, verbose=None, report=True,
       optionflags=0, extraglobs=None, raise_on_error=False,
       exclude_empty=False

    Test examples in docstrings in functions and classes reachable
    from module m (or the current module if m is not supplied), starting
    with m.__doc__.

    Also test examples reachable from dict m.__test__ if it exists and is
    not None.  m.__test__ maps names to functions, classes and strings;
    function and class docstrings are tested even if the name is private;
    strings are tested directly, as if they were docstrings.

    Return (#failures, #tests).

    See help(doctest) for an overview.

    Optional keyword arg "name" gives the name of the module; by default
    use m.__name__.

    Optional keyword arg "globs" gives a dict to be used as the globals
    when executing examples; by default, use m.__dict__.  A copy of this
    dict is actually used for each docstring, so that each docstring's
    examples start with a clean slate.

    Optional keyword arg "extraglobs" gives a dictionary that should be
    merged into the globals that are used to execute examples.  By
    default, no extra globals are used.  This is new in 2.4.

    Optional keyword arg "verbose" prints lots of stuff if true, prints
    only failures if false; by default, it's true iff "-v" is in sys.argv.

    Optional keyword arg "report" prints a summary at the end when true,
    else prints nothing at the end.  In verbose mode, the summary is
    detailed, else very brief (in fact, empty if all tests passed).

    Optional keyword arg "optionflags" or's together module constants,
    and defaults to 0.  This is new in 2.3.  Possible values (see the
    docs for details):

        DONT_ACCEPT_TRUE_FOR_1
        DONT_ACCEPT_BLANKLINE
        NORMALIZE_WHITESPACE
        ELLIPSIS
        SKIP
        IGNORE_EXCEPTION_DETAIL
        REPORT_UDIFF
        REPORT_CDIFF
        REPORT_NDIFF
        REPORT_ONLY_FIRST_FAILURE

    Optional keyword arg "raise_on_error" raises an exception on the
    first unexpected exception or failure. This allows failures to be
    post-mortem debugged.

    Advanced tomfoolery:  testmod runs methods of a local instance of
    class doctest.Tester, then merges the results into (or creates)
    global Tester instance doctest.master.  Methods of doctest.master
    can be called directly too, if you want to do something unusual.
    Passing report=0 to testmod is especially useful then, to delay
    displaying a summary.  Invoke doctest.master.summarize(verbose)
    when you're done fiddling.
    
        Return a line number of the given object's docstring.  Note:
        this method assumes that the object has a docstring.
        
    A collection of doctest examples that should be run in a single
    namespace.  Each `DocTest` defines the following attributes:

      - examples: the list of examples.

      - globs: The namespace (aka globals) that the examples should
        be run in.

      - name: A name identifying the DocTest (typically, the name of
        the object whose docstring this DocTest was extracted from).

      - filename: The name of the file that this DocTest was extracted
        from, or `None` if the filename is unknown.

      - lineno: The line number within filename where this DocTest
        begins, or `None` if the line number is unavailable.  This
        line number is zero-based, with respect to the beginning of
        the file.

      - docstring: The string that the examples were extracted from,
        or `None` if the string is unavailable.
    
        Report that the given example raised an unexpected exception.
        A DocTest example has encountered an unexpected exception

    The exception instance has variables:

    - test: the DocTest object being run

    - example: the Example object that failed

    - exc_info: the exception info
    fail_fast_OutputRedirectingPdb.set_traceDocTestCase.__hash__testmod: module required; %r<module doctest>
    Essentially the only subtle case:
    >>> _ellipsis_match('aa...aa', 'aaa')
    False
    module_globals_OutputRedirectingPdb.trace_dispatchFinding tests in %sExpected:
%sGot nothing

    Test examples in the given file.  Return (#failures, #tests).

    Optional keyword arg "module_relative" specifies how filenames
    should be interpreted:

      - If "module_relative" is True (the default), then "filename"
         specifies a module-relative path.  By default, this path is
         relative to the calling module's directory; but if the
         "package" argument is specified, then it is relative to that
         package.  To ensure os-independence, "filename" should use
         "/" characters to separate path segments, and should not
         be an absolute path (i.e., it may not begin with "/").

      - If "module_relative" is False, then "filename" specifies an
        os-specific path.  The path may be absolute or relative (to
        the current working directory).

    Optional keyword arg "name" gives the name of the test; by default
    use the file's basename.

    Optional keyword argument "package" is a Python package or the
    name of a Python package whose directory should be used as the
    base directory for a module relative filename.  If no package is
    specified, then the calling module's directory is used as the base
    directory for module relative filenames.  It is an error to
    specify "package" if "module_relative" is False.

    Optional keyword arg "globs" gives a dict to be used as the globals
    when executing examples; by default, use {}.  A copy of this dict
    is actually used for each docstring, so that each docstring's
    examples start with a clean slate.

    Optional keyword arg "extraglobs" gives a dictionary that should be
    merged into the globals that are used to execute examples.  By
    default, no extra globals are used.

    Optional keyword arg "verbose" prints lots of stuff if true, prints
    only failures if false; by default, it's true iff "-v" is in sys.argv.

    Optional keyword arg "report" prints a summary at the end when true,
    else prints nothing at the end.  In verbose mode, the summary is
    detailed, else very brief (in fact, empty if all tests passed).

    Optional keyword arg "optionflags" or's together module constants,
    and defaults to 0.  Possible values (see the docs for details):

        DONT_ACCEPT_TRUE_FOR_1
        DONT_ACCEPT_BLANKLINE
        NORMALIZE_WHITESPACE
        ELLIPSIS
        SKIP
        IGNORE_EXCEPTION_DETAIL
        REPORT_UDIFF
        REPORT_CDIFF
        REPORT_NDIFF
        REPORT_ONLY_FIRST_FAILURE

    Optional keyword arg "raise_on_error" raises an exception on the
    first unexpected exception or failure. This allows failures to be
    post-mortem debugged.

    Optional keyword arg "parser" specifies a DocTestParser (or
    subclass) that should be used to extract tests from the files.

    Optional keyword arg "encoding" specifies an encoding that should
    be used to convert the file to unicode.

    Advanced tomfoolery:  testmod runs methods of a local instance of
    class doctest.Tester, then merges the results into (or creates)
    global Tester instance doctest.master.  Methods of doctest.master
    can be called directly too, if you want to do something unusual.
    Passing report=0 to testmod is especially useful then, to delay
    displaying a summary.  Invoke doctest.master.summarize(verbose)
    when you're done fiddling.
    DocTestCase.__repr__doctest runner
        Return true if the given object is defined in the given
        module.
        %d examples
                                    In 2.2, boolean expressions displayed
                                    0 or 1.  By default, we still accept
                                    them.  This can be disabled by passing
                                    DONT_ACCEPT_TRUE_FOR_1 to the new
                                    optionflags argument.
                                    >>> 4 == 4
                                    1
                                    >>> 4 == 4
                                    True
                                    >>> 4 > 4
                                    0
                                    >>> 4 > 4
                                    False
                                    
        Print a summary of all the test cases that have been run by
        this DocTestRunner, and return a tuple `(f, t)`, where `f` is
        the total number of failed examples, and `t` is the total
        number of tried examples.

        The optional `verbose` argument controls how detailed the
        summary is.  If the verbosity is not specified, then the
        DocTestRunner's verbosity is used.
        exec(%r)Module-relative files may not have absolute pathsgetfileDocTestParser._check_prompt_blank_dt_optionflagsSkipDocTestCase.test_skipSkipping tests from %sDebug a test script.  `src` is the script, as a string.DocTestFinder.__init__
    Convert doctest tests for a module to a unittest test suite.

    This converts each documentation string in a module that
    contains doctest tests to a unittest test case.  If any of the
    tests in a doc string fail, then the test case fails.  An exception
    is raised showing the name of the file containing the test and a
    (sometimes approximate) line number.

    The `module` argument provides the module to be tested.  The argument
    can be either a module or a module name.

    If no argument is given, the calling module is used.

    A number of options may be provided as keyword arguments:

    setUp
      A set-up function.  This is called before running the
      tests in each file. The setUp function will be passed a DocTest
      object.  The setUp function can access the test globals as the
      globs attribute of the test passed.

    tearDown
      A tear-down function.  This is called after running the
      tests in each file.  The tearDown function will be passed a DocTest
      object.  The tearDown function can access the test globals as the
      globs attribute of the test passed.

    globs
      A dictionary containing initial global variables for the tests.

    optionflags
       A set of doctest option flags expressed as an integer.
    
        # Source consists of a PS1 line followed by zero or more PS2 lines.
        (?P<source>
            (?:^(?P<indent> [ ]*) >>>    .*)    # PS1 line
            (?:\n           [ ]*  \.\.\. .*)*)  # PS2 lines
        \n?
        # Want consists of any non-blank lines that do not start with PS1.
        (?P<want> (?:(?![ ]*$)    # Not a blank line
                     (?![ ]*>>>)  # Not a line starting with PS1
                     .+$\n?       # But any other line
                  )*)
        save_linecache_getlinesDocTestCase.debugnot found in testsÛ!   zregister_optionflagzDONT_ACCEPT_TRUE_FOR_1zDONT_ACCEPT_BLANKLINEzNORMALIZE_WHITESPACEzELLIPSISzSKIPzIGNORE_EXCEPTION_DETAILzCOMPARISON_FLAGSzREPORT_UDIFFzREPORT_CDIFFzREPORT_NDIFFzREPORT_ONLY_FIRST_FAILUREzREPORTING_FLAGSz	FAIL_FASTzExamplezDocTestzDocTestParserzDocTestFinderzDocTestRunnerzOutputCheckerzDocTestFailurezUnexpectedExceptionzDebugRunnerztestmodztestfilezrun_docstring_exampleszDocTestSuitezDocFileSuitezset_unittest_reportflagszscript_from_examplesz
testsourcez	debug_srczdebugDebugRunner.report_unexpected_exceptiongetsourcefile_SpoofOut.truncate
    A class used to check the whether the actual output from a doctest
    example matches the expected output.  `OutputChecker` defines two
    methods: `check_output`, which compares a given pair of outputs,
    and returns true if they match; and `output_difference`, which
    returns a string describing the differences between two outputs.
    _DocTestSuite._removeTestAtIndex
    Test examples in the given object's docstring (`f`), using `globs`
    as globals.  Optional argument `name` is used in failure messages.
    If the optional argument `verbose` is true, then generate output
    even if there are no failures.

    `compileflags` gives the set of flags that should be used by the
    Python compiler when running the examples.  If not specified, then
    it will default to the set of future-import flags that apply to
    `globs`.

    Optional keyword arg `optionflags` specifies options for the
    testing and output.  See the documentation for `testmod` for more
    information.
    Failed doctest test for %s
  File "%s", line 0

%s
        Create a new DocTest containing the given examples.  The
        DocTest's globals are initialized with a copy of `globs`.
        
        Extract all doctest examples from the given string, and return
        them as a list of `Example` objects.  Line numbers are
        0-based, because it's most common in doctests that nothing
        interesting appears on the same line as opening triple-quote,
        and so the first interesting line is called "line 1" then.

        The optional argument `name` is a name identifying this
        string, and is only used for error messages.
        ELLIPSIS_MARKER(?m)^[ ]*(?=
)square() -> square TestClass's associated value

        >>> _TestClass(13).square().get()
        169
        
        Create a new doctest finder.

        The optional argument `parser` specifies a class or
        function that should be used to create new DocTest objects (or
        objects that implement the same interface as DocTest).  The
        signature for this factory function should match the signature
        of the DocTest constructor.

        If the optional argument `recurse` is false, then `find` will
        only examine the given object, and not any contained objects.

        If the optional argument `exclude_empty` is false, then `find`
        will include tests for objects with empty docstrings.
        
        Report that the given example failed.
        DocTestRunner._failure_headerExpected nothing
Got:
%sline %r of the docstring for %s lacks blank after %s: %rDocTestParser.parsemessage_from_stringmessage_from_fileemail\__init__.pymimemessage_from_binary_fileRead a file and parse its contents into a Message object model.

    Optional _class and strict are passed to the Parser constructor.
    A package for parsing, handling, and generating email messages.message_from_bytesParse a bytes string into a Message object model.

    Optional _class and strict are passed to the Parser constructor.
    NUITKA_PACKAGE_emailiteratorsParse a string into a Message object model.

    Optional _class and strict are passed to the Parser constructor.
    encoders<module email>Read a binary file and parse its contents into a Message object model.

    Optional _class and strict are passed to the Parser constructor.
    _q_byte_subber=([a-fA-F0-9]{2})encode_qdecode_qencode_blen_qlen_bencode_q.<locals>.<genexpr> Routines for manipulating RFC2047 encoded words.

This is currently a package-private API, but will be considered for promotion
to a public API if there is demand.

_QByteMapUnknown charset {} in encoded word; decoded as unknown bytesmissing_paddingvalidate_cte_encode_lengthcte_stringlen_q.<locals>.<genexpr>_q_byte_mapEncode string using the CTE encoding that produces the shorter result.

    Produces an RFC 2047/2243 encoded word of the form:

        =?charset*lang?cte?encoded_string?=

    where '*lang' is omitted unless the 'lang' parameter is given a value.
    Optional argument charset (defaults to utf-8) specifies the charset to use
    to encode the string to binary before CTE encoding it.  Optional argument
    'encoding' is the cte specifier for the encoding that should be used ('q'
    or 'b'); if it is None (the default) the encoding which produces the
    shortest encoded sequence is used, except that 'q' is preferred if it is up
    to five characters longer.  Optional argument 'lang' (default '') gives the
    RFC 2243 language string to specify in the encoded word.

    Decode encoded word and return (string, charset, lang, defects) tuple.

    An RFC 2047/2243 encoded word has the form:

        =?charset*lang?cte?encoded_string?=

    where '*lang' may be omitted but the other parts may not be.

    This function expects exactly such a string (that is, it does not check the
    syntax and may raise errors if the string is not well formed), and returns
    the encoded_string decoded first from its Content Transfer Encoding and
    then from the resulting bytes into unicode using the specified charset.  If
    the cte-decoded string does not successfully decode using the specified
    character set, a defect is added to the defects list and the unknown octets
    are replaced by the unicode 'unknown' character \uFDFF.

    The specified charset and language are returned.  The default for language,
    which is rarely if ever encountered, is the empty string.

    email\_encoded_words.py===={:02X}_QByteMap.__missing__pad_err_cte_decodersEncoded word contains bytes not decodable using {} charset=?{}{}?{}?{}?=<module email._encoded_words>b64decode_cte_encodersattrtextget_mailbox.<locals>.<genexpr>TokenList.__repr__ group = display-name ":" [group-list] ";" [CFWS]

     mailbox = name-addr / addr-spec

    group_listangle-addrvcharshad_qpAngleAddr.routeencoded word format invalid: '{}'_steal_trailing_WSP_if_existsExpected RFC2231 char/lang encoding delimiter, but found {}get_addressExtra text after content transfer encodingbare_quoted_stringis_tlexcess_get_ptext_to_endchars_refold_parse_treePHRASE_ENDSGroupListTrue if all top level tokens of this part may be RFC2047 encoded.AddressList.addressesttextWhiteSpaceTerminal.valueencoded_part_non_attribute_end_matcherend of input inside domain-literalcfwsParameter marked as extended but appears to have a quoted string value that is non-encodedInvalid leading '.' in local partduplicate parameter name; duplicate(s) ignored__getnewargs__TokenList.valueObsRoute.domainsBareQuotedString.__str__.<locals>.<genexpr>mailboxesend of header in groupLocalPartTokenList.__init__ mechanism

    address-list entry with no contentto_encode_validate_xtextlocal-part is not dot-atom, quoted-string, or obs-local-partMissing content type specificationParameterizedHeaderValue.paramsgroup-list with empty entriesppstrtext_spaceApparent initial-extended-value but attribute was not marked as extended or was not initial sectionExpected MIME version number but found only CFWS local-part = dot-atom / quoted-string / obs-local-part

    FWS = 1*WSP

    This isn't the RFC definition.  We're using fws to represent tokens where
    folding can be done, but when we are parsing the *un*folding has already
    been done so we don't need to watch out for CRLF.

    end-of-obs-route-marker addr-spec = local-part "@" domain

     dot-text = 1*atext *("." 1*atext)

    email\_header_value_parser.pyQuotedString.stripped_value{}*={}''{} Defects: {}[\x00-\x20\x7F]get_extended_attrtextInvalidMailbox.display_namefirst_partIf input token contains ASCII non-printables, register a defect.get_cfwsget_group_listquoted-string = [CFWS] <bare-quoted-string> [CFWS]

    'bare-quoted-string' is an intermediate class defined by this
    parser and not by the RFC grammar.  It is the quoted string
    without any attached CFWS.
    Return string of contents of parse_tree folded according to RFC rules.

    mtokenParameter not followed by '='Mailbox.domainmaxcharsIncomplete parameterget_commentobsolete route specification in angle-addrUnstructuredTokenListget_qcontentexpected atom but found '{}'Excess non-CFWS text after MIME versionget_attrtextencode_as_ewexpected name-addr but found '{}'invalid parameter {!r}Terminal._pp '*' digits

    The formal BNF is more complicated because leading 0s are not allowed.  We
    check for that and add a defect.  We also assume no CFWS is allowed between
    the '*' and the digits, though the RFC is not crystal clear on that.
    The caller should already have dealt with leading CFWS.

    TSPECIALS'\' character outside of quoted-string/ccontentnull addr-spec in angle-addrstartswith_fwshave_wsget_encoded_wordexpected extended attrtext but found {!r}domain_literalNameAddrParameter contains name ({}) but no valueinvalid-mailboxend of header inside comment_check_for_early_dl_end dtext = <printable ascii except \ [ ]> / obs-dtext
        obs-dtext = obs-NO-WS-CTL / quoted-pair

    We allow anything except the excluded characters, but if we find any
    ASCII other than the RFC defined printable ASCII, a NonPrintableDefect is
    added to the token's defects list.  Quoted pairs are converted to their
    unquoted values, so what is returned is a ptext token, in this case a
    ValueTerminal.  If there were quoted-printables, an ObsoleteHeaderDefect is
    added to the returned token's defect list.

    end of header in group-listdot_atominner_valueaddress-at-symbolEncodedWordComment.content.<locals>.<genexpr>DomainLiteral.domainCFWS_LEADERget_parameterNon-ASCII characters found in header tokenlocal-part contains non-ASCII characters)appendtoqstringsemi_validget_dtextpop_trailing_wsdisp_headerend_ew_not_allowedcontent-type-separatorget_domain_literalget_bare_quoted_string address_list = (address *("," address)) / obs-addr-list
        obs-addr-list = *([CFWS] ",") address *("," [address / CFWS])

    We depart from the formal grammar here by continuing to parse until the end
    of the input, assuming the input to be entirely composed of an
    address-list.  This is always true in email parsing, and allows us
    to skip invalid addresses to parse additional valid ones.

    encoded word inside quoted string{}{}/{}(EWWhiteSpaceTerminalparameter entry with no content_non_token_end_matcherheader-labelexpected angle-addr but found '{}'DisplayNameWhiteSpaceTerminal.startswith_fwsmailbox_listsection number has an invalid leading 0Quoted string value for extended parameter is invalidMimeParameters.__str__ObsLocalPartobs_local_partTokenList.foldlast_non_ws_was_dotValueTerminal.value dot-atom = [CFWS] dot-atom-text [CFWS]

    Any place we can have a dot atom, we could instead have an rfc2047 encoded
    word.
    last_ewew_combine_allowedleading_wsptrailing_wspnew_last_ewremaining_spaceexpected atom at end of dot-atom-text but found '{}'Incomplete MIME version; found only major number mime-version = [CFWS] 1*digit [CFWS] "." [CFWS] 1*digit [CFWS]

    _wsp_splittertoken = [CFWS] 1*ttext [CFWS]

    The RFC equivalent of ttext is any US-ASCII chars except space, ctls, or
    tspecials.  We also exclude tabs even though the RFC doesn't.

    The RFC implies the CFWS but is not explicit about it in the BNF.

    Group.mailboxesMissing content disposition{}={}DotAtom domain = dot-atom / domain-literal / obs-domain
        obs-domain = atom *("." atom))

     maintype "/" subtype *( ";" parameter )

    The maintype and substype are tokens.  Theoretically they could
    be checked against the official IANA list + x-token, but we
    don't do that.
    get_obs_local_partTokenList._ppobs_routegroup-terminatorcomment = "(" *([FWS] ccontent) [FWS] ")"
       ccontent = ctext / quoted-pair / comment

    We handle nested comments here, and quoted-pair in our qp-ctext routine.
    quoted_value encoded-word = "=?" charset "?" encoding "?" encoded-text "?="

    get_qp_ctextDo our best to find the parameters in an invalid MIME header

    whitespace inside encoded wordExpected section but found {}missing '.' between wordsTerminal.all_defectsexpected ':' marking end of obs-route but found '{}'parameter-separatorwrap_as_ew_blockedComment.quote([{}]+)invalid_mailbox display-name = phrase

    Because this is simply a name-rule, we don't return a display-name
    token containing a phrase, but rather a display-name token with
    the content of the phrase.

    get_obs_routeparse_mime_parametersroute-component-markerASPECIALSTOKEN_ENDSlist-separatorqcontent = qtext / quoted-pair

    We allow anything except the DQUOTE character, but if we find any ASCII
    other than the RFC defined printable ASCII, a NonPrintableDefect is
    added to the token's defects list.  Any quoted pairs are converted to their
    unquoted values, so what is returned is a 'ptext' token.  In this case it
    is a ValueTerminal.

    GroupList.all_mailboxesmailbox-listMissing required charset/lang delimitersphrase does not start with wordextended-attributedomain-literal-endmime_versionAddressList.all_mailboxes.<locals>.<genexpr>Expected content transfer encoding but found {!r}expected attrtext but found {!r}_fold_as_ewadd-spec local part with no domainget_attributeperiod in 'phrase'invalid_parameterExpected 'atom' or 'quoted-string' but found '{}'word = atom / quoted-string

    Either atom or quoted-string may start with CFWS.  We have to peel off this
    CFWS first to determine which type of word to parse.  Afterward we splice
    the leading CFWS, if any, into the parsed sub-token.

    If neither an atom or a quoted-string is found before the next special, a
    HeaderParseError is raised.

    The token returned is either an Atom or a QuotedString, as appropriate.
    This means the 'word' level of the formal grammar is not represented in the
    parse tree; this is because having that extra layer when manipulating the
    parse tree is more confusing than it is helpful.

    QuotedString.contentexpected '"' but found '{}'CFWS = (1*([FWS] comment) [FWS]) / FWS

    ctext = <printable ascii except \ ( )>

    This is not the RFC ctext, since we are handling nested comments in comment
    and unquoting quoted-pairs here.  We allow anything except the '()'
    characters, but if we find any ASCII other than the RFC defined printable
    ASCII, a NonPrintableDefect is added to the token's defects list.  Since
    quoted pairs are converted to their unquoted values, what is returned is
    a 'ptext' token.  In this case it is a WhiteSpaceTerminal, so it's value
    is ' '.

    get_display_nameInvalid content typeTerminal.pop_trailing_wsAngleAddr.domaintoken_typeMissing content transfer encodinginvalid mailbox in mailbox-listDOTget_mailbox_listgroup-display-name-terminatorempty element in address-list domain-literal = [CFWS] "[" *([FWS] dtext) [FWS] "]" [CFWS]

    Mailbox.addr_specContentDispositionrecoverexpected mailbox but found '{}'expected local-part but found '{}'MailboxListLocalPart.valueAddress.all_mailboxesTerminal.__getnewargs__get_atextcomment found without atomTokenList.as_ew_allowedATTRIBUTE_ENDSExpected RFC2231 char/lang encoding delimiter, but found {!r}splitpointTokenList.startswith_fwsextended-parameter-markerRouteComponentMarkerTerminal.__new__TokenList.pprintinvalid-obs-local-partmissing whitespace before encoded wordget_name_addrExpected content subtype but found {!r}want_encodingnewpartsexpected domain but found '{}'quoted printable found in domain-literalDotAtomTextExpected value but found only {}NameAddr.local_partAddrSpec.domainmime-parametersattrtext = 1*(any non-ATTRIBUTE_ENDS character)

    We allow any non-ATTRIBUTE_ENDS in attrtext, but add defects to the
    token's defects list if we find non-attrtext characters.  We also register
    defects for *any* non-printables even though the RFC doesn't exclude all of
    them, because we follow the spirit of RFC 5322.

    {}{}/{}({}){}get_extended_attributeComment.commentsNameAddr.display_nameAddressList.mailboxes_non_extended_attribute_end_matcher address = mailbox / group

    Note that counter-intuitively, an address can be either a single address or
    a list of addresses (a group).  This is why the returned Address object has
    a 'mailboxes' attribute which treats a single address as a list of length
    one.  When you need to differentiate between to two cases, extract the single
    element, which is either a mailbox or a group token.

    Value.stripped_valueListSeparatorAddress.mailboxestokenlistchrome_lenNameAddr.domainLocalPart.local_partremstrvtextget_sectionbare-quoted-string = DQUOTE *([FWS] qcontent) [FWS] DQUOTE

    A quoted-string without the leading or trailing white space.  Its
    value is the text between the quote marks, with whitespace
    preserved and quoted pairs decoded.
    Missing MIME version number (eg: 1.0)inconsistent RFC2231 parameter numberingMIMEVersionMailbox.local_partMailbox.routeangle_addrdot_atom_textlocal-part is not a dot-atom (contains CFWS)Invalid trailing '.' in local partinvalid address in address-listget_dot_atommissing trailing '>' on angle-addrangle-addr-startExpected content maintype but found {!r}Group.all_mailboxesTokenList.__str__ group-list = mailbox-list / CFWS / obs-group-list
        obs-group-list = 1*([CFWS] ",") [CFWS]

    ,;Expected MIME major version number but found {!r}domain is not a dot-atom (contains CFWS)expected domain-literalExpected value but found end of stringend of header while parsing obs-routeMimeParameters.paramsunstructured = (*([FWS] vchar) *WSP) / obs-unstruct
       obs-unstruct = *((*LF *CR *(obs-utext) *LF *CR)) / FWS)
       obs-utext = %d0 / obs-NO-WS-CTL / LF / CR

       obs-NO-WS-CTL is control characters except WSP/CR/LF.

    So, basically, we have printable runs, plus control characters or nulls in
    the obsolete syntax, separated by whitespace.  Since RFC 2047 uses the
    obsolete syntax in its specification, but requires whitespace on either
    side of the encoded words, I can see no reason to need to separate the
    non-printable-non-whitespace from the printable runs if they occur, so we
    parse this into xtext tokens separated by WSP tokens.

    Because an 'unstructured' value must by definition constitute the entire
    value, this 'get' routine does not return a remaining value, only the
    parsed TokenList.

    Fold string to_encode into lines as encoded word, combining if allowed.
    Return the new value for last_ew, or None if ew_combine_allowed is False.

    If there is already an encoded word in the last line of lines (indicated by
    a non-None value for last_ew) and ew_combine_allowed is true, decode the
    existing ew, combine it with to_encode, and re-encode.  Otherwise, encode
    to_encode.  In either case, split to_encode as necessary so that the
    encoded segments fit within maxlen.

    expected ']' at end of domain-literal but found '{}'expected atext but found '{}'expected atom at a start of dot-atom-text but found '{}' phrase = 1*word / obs-phrase
        obs-phrase = word *(word / "." / CFWS)

    This means a phrase can be a sequence of words, periods, and CFWS in any
    order as long as it starts with at least one word.  If anything other than
    words is detected, an ObsoleteHeaderDefect is added to the token's defect
    list.  We also accept a phrase that starts with CFWS followed by a dot;
    this is registered as an InvalidHeaderDefect, since it is not supported by
    even the obsolete grammar.

    end of header inside quoted stringNameAddr.routeend of header before group-list    !! invalid element in token list: {!r}expected ttext but found '{}'parameter with invalid trailing text {!r}TokenList.ppstrExpected content disposition but found {!r}Fold TokenList 'part' into the 'lines' list as mime parameters.

    Using the decoded list of parameters and values, format them according to
    the RFC rules, including using RFC2231 encoding if the value cannot be
    expressed in 'encoding' and/or the parameter+value is too long to fit
    within 'maxlen'.

    Domain.domainBareQuotedString.value.<locals>.<genexpr>section-markerWhiteSpaceTokenList.valueHeader value parser implementing various email-related RFC parsing rules.

The parsing methods defined in this module implement various email related
parsing rules.  Principal among them is RFC 5322, which is the followon
to RFC 2822 and primarily a clarification of the former.  It also implements
RFC 2047 encoded word decoding.

RFC 5322 goes to considerable trouble to maintain backward compatibility with
RFC 822 in the parse phase, while cleaning up the structure on the generation
phase.  This parser supports correct RFC 5322 generation by tagging white space
as folding white space only when folding is allowed in the non-obsolete rule
sets.  Actually, the parser is even more generous when accepting input than RFC
5322 mandates, following the spirit of Postel's Law, which RFC 5322 encourages.
Where possible deviations from the standard are annotated on the 'defects'
attribute of tokens that deviate.

The general structure of the parser follows RFC 5322, and uses its terminology
where there is a direct correspondence.  Where the implementation requires a
somewhat different structure than that used by the formal grammar, new terms
that mimic the closest existing terms are used.  Thus, it really helps to have
a copy of RFC 5322 handy when studying this code.

Input to the parser is a string that has already been unfolded according to
RFC 5322 rules.  According to the RFC this unfolding is the very first step, and
this parser leaves the unfolding step to a higher level message parser, which
will have already detected the line breaks that need unfolding while
determining the beginning and end of each header.

The output of the parser is a TokenList object, which is a list subclass.  A
TokenList is a recursive data structure.  The terminal nodes of the structure
are Terminal objects, which are subclasses of str.  These do not correspond
directly to terminal objects in the formal grammar, but are instead more
practical higher level combinations of true terminals.

All TokenList and Terminal objects have a 'value' attribute, which produces the
semantically meaningful value of that part of the parse subtree.  The value of
all whitespace tokens (no matter how many sub-tokens they may contain) is a
single space, as per the RFC rules.  This includes 'CFWS', which is herein
included in the general class of whitespace tokens.  There is one exception to
the rule that whitespace tokens are collapsed into single spaces in values: in
the value of a 'bare-quoted-string' (a quoted-string with no leading or
trailing whitespace), any whitespace that appeared between the quotation marks
is preserved in the returned value.  Note that in all Terminal strings quoted
pairs are turned into their unquoted values.

All TokenList and Terminal objects also have a string value, which attempts to
be a "canonical" representation of the RFC-compliant form of the substring that
produced the parsed subtree, including minimal use of quoted pair quoting.
Whitespace runs are not collapsed.

Comment tokens also have a 'content' attribute providing the string found
between the parens (including any nested comments) with whitespace preserved.

All TokenList and Terminal objects have a 'defects' attribute which is a
possibly empty list all of the defects found while creating the token.  Defects
may appear on any token in the tree, and a composite list of all defects in the
subtree is available through the 'all_defects' attribute of any node.  (For
Terminal notes x.defects == x.all_defects.)

Each object in a parse tree is called a 'token', and each has a 'token_type'
attribute that gives the name from the RFC 5322 grammar that it represents.
Not all RFC 5322 nodes are produced, and there is one non-RFC 5322 node that
may be produced: 'ptext'.  A 'ptext' is a string of printable ascii characters.
It is returned in place of lists of (ctext/quoted-pair) and
(qtext/quoted-pair).

XXX: provide complete list of token types.
MailboxList.mailboxesdomain-literal-startexpected '(' but found '{}' name-addr = [display-name] angle-addr

    empty element in mailbox-listTokenList.value.<locals>.<genexpr>Expected MIME minor version number but found {!r} [CFWS] 1*attrtext [CFWS]

    This version of the BNF makes the CFWS explicit, and as usual we use a
    value terminal for the actual run of characters.  The RFC equivalent of
    attrtext is the token characters, with the subtraction of '*', "'", and '%'.
    We include tab in the excluded set just as we do for token.

    extended-attrtextvalue_partsexpected address but found '{}'DisplayName.display_name_refold_parse_tree.<locals>.<genexpr>invalid repeated '.'Parameter.param_valueAddrSpec.local_partget_wordAngleAddr.addr_specexpected addr-spec or obs-route but found '{}'invalid-parameterTokenList.all_defectsexpected ':' at end of group display name but found '{}'AddrSpec.valueexpected token but found '{}'first_paramget_angle_addrEWWhiteSpaceTerminal.valueerror_handlerencoding_requiredencoded_valueextra_chrome Read everything up to one of the chars in endchars.

    This is outside the formal grammar.  The InvalidMailbox TokenList that is
    returned acts like a Mailbox, but the data attributes are None.

    GroupList.mailboxesQuotedString.quoted_value mailbox-list = (mailbox *("," mailbox)) / obs-mbox-list
        obs-mbox-list = *([CFWS] ",") mailbox *("," [mailbox / CFWS])

    For this routine we go outside the formal grammar in order to improve error
    handling.  We recognize the end of the mailbox list only at the end of the
    value or at a ';' (the group terminator).  This is so that we can turn
    invalid mailboxes into InvalidMailbox tokens and continue parsing any
    remaining valid mailboxes.  We also allow all mailbox entries to be null,
    and this condition is handled appropriately at a higher level.

    angle-addr-endWhiteSpaceTokenList.commentsAddressList.mailboxes.<locals>.<genexpr>duplicate parameter name; duplicate ignoredInvalidParameterATOM_ENDSmisplaced-special quoted-string / attribute

    AddrSpec.addr_spec Read everything up to the next ';'.

    This is outside the formal grammar.  The InvalidParameter TokenList that is
    returned acts like a Parameter, but the data attributes are None.

    _fold_mime_parameters_find_mime_parametersget_phrase [CFWS] 1*extended_attrtext [CFWS]

    This is like the non-extended version except we allow % characters, so that
    we can pick up an encoded value as a single string.

    _non_atom_end_matcher obs-local-part = word *("." word)
    section_numbersyntactic_breakDomainLiteral.ipexpected '[' at start of domain-literal but found '{}'version-separatoremail._header_value_parserEXTENDED_ATTRIBUTE_ENDScte_headerget_dot_atom_textexpected ';' at end of group but found {}ValueTerminal.startswith_fwsMailboxList.all_mailboxesatom = [CFWS] 1*atext [CFWS]

    An atom could be an rfc2047 encoded word.
    expected encoded word but found {}get_local_part obs-route = obs-domain-list ":"
        obs-domain-list = *(CFWS / ",") "@" domain *("," [CFWS] ["@" domain])

        Returns an obs-route token with the appropriate sub-tokens (that is,
        there is no obs-domain-list in the parse tree).
    ContentTypeget_invalid_parameterAngleAddr.local_partOnly parameters are valid after content type, but found {!r}PhraseTerminal.commentsRFC2231-delimiterget_ttextDisplayName.valueContentTransferEncoding {}*{}*={}{}TokenList.as_ew_allowed.<locals>.<genexpr> disposition-type *( ";" parameter )

    NameAddr.addr_spec<module email._header_value_parser>get_fwsTokenList.all_defects.<locals>.<genexpr>Comment.__str__last_is_tlattrtext = 1*(any non-ATTRIBUTE_ENDS character plus '%')

    This is a special parsing routine so that we get a value that
    includes % escapes as a single string (which we decode as a single
    string later).

    get_invalid_mailboxOnly parameters are valid after content disposition, but found {!r}Terminal.__repr__ttext = <matches _ttext_matcher>

    We allow any non-TOKEN_ENDS in ttext, but add defects to the token's
    defects list if we find non-ttext characters.  We also register defects for
    *any* non-printables even though the RFC doesn't exclude all of them,
    because we follow the spirit of RFC 5322.

    EWWhiteSpaceTerminal.__str__Attribute.stripped_value[^{}]+_non_printable_finder attribute [section] ["*"] [CFWS] "=" value

    The CFWS is implied by the RFC but not made explicit in the BNF.  This
    simplified form of the BNF from the RFC is made to conform with the RFC BNF
    through some extra checks.  We do it this way because it makes both error
    recovery and working with the resulting parse tree easier.
    sectionedParameter.section_number parameter *( ";" parameter )

    That BNF is meant to indicate this routine should only be called after
    finding and handling the leading ';'.  There is no corresponding rule in
    the formal RFC grammar, but it is more convenient for us for the set of
    parameters to be treated as its own TokenList.

    This is 'parse' routine because it consumes the reminaing value, but it
    would never be called to parse a full header.  Instead it is called to
    parse everything after the non-parameter value of a specific MIME header.

    Expected section number but found {}TokenList.__str__.<locals>.<genexpr>itemgetter angle-addr = [CFWS] "<" addr-spec ">" [CFWS] / obs-angle-addr
        obs-angle-addr = [CFWS] "<" obs-route addr-spec ">" [CFWS]

    get_quoted_stringTerminal.pprintatext = <matches _atext_matcher>

    We allow any non-ATOM_ENDS in atext, but add an InvalidATextDefect to
    the token's defects list if we find non-atext characters.
    expected obs-route domain but found '{}'Scan printables/quoted-pairs until endchars and return unquoted ptext.

    This function turns a run of qcontent, ccontent-without-comments, or
    dtext-with-quoted-printables into a single string by unquoting any
    quoted printables.  It returns the string, the remaining value, and
    a flag that is True iff there were any quoted printables decoded.

    get_atomreturnlistgetdomaingetaddrspecAddrlistClass.getquoteallowcommentsadlistGet a parenthesis-delimited fragment from self's field.preserve_wsAddrlistClass.__init__Parse an RFC 2822 atom.

        Optional atomends specifies a different set of end token delimiters
        (the default is to use self.atomends).  This is used e.g. in
        getphraselist() since phrase endings must not include the `.' (which
        is legal in phrases).
tmmtsstzoffsetatomlistPrepare string to be used in a quoted string.

    Turns backslash and double quote characters into quoted pairs.  These
    are the only characters that need to be quoted inside a quoted string.
    Does not add the surrounding double quotes.
    Skip white space and extract comments.AddrlistClass.gotonextfieldlen"sdlistParse a header fragment delimited by special characters.

        `beginchar' is the start character for the fragment.
        If self is not looking at an instance of `beginchar' then
        getdelimited returns the empty string.

        `endchars' is a sequence of allowable end-delimiting characters.
        Parsing stops when one of these is encountered.

        If `allowcomments' is non-zero, embedded RFC 2822 comments are allowed
        within the parsed fragment.
        __iadd__getaddressParse the next address.AddressList.__isub__getdomainliteralAddrlistClass.getaddrlistgetcommentParse an RFC 2822 domain-literal.expectrouteAddrlistClass.getphraselistParse all addresses.

        Returns a list containing all of the addresses.
        commentlistphraseendsAddrlistClass.getcommentAddressList.__sub__<module email._parseaddr>Get the complete domain name from an address.Address parser class by Ben Escoto.

    To understand what this class does, it helps to have a copy of RFC 2822 in
    front of you.

    Note: this class interface is deprecated and may be removed in the future.
    Use email.utils.AddressList instead.
    An AddressList encapsulates a list of parsed RFC 2822 addresses.Parse a sequence of RFC 2822 phrases.

        A phrase is a sequence of words, which are in turn either RFC 2822
        atoms or quoted-strings.  Phrases are canonicalized by squeezing all
        runs of continuous whitespace into one space.
        ]AddressList.__len__)Convert a date string to a time tuple.

    Accounts for military timezones.
    newaddroldclaslistÛ   zjanzfebzmarzaprzmayzjunzjulzaugzsepzoctznovzdeczjanuaryzfebruaryzmarchzaprilzmayzjunezjulyzaugustz	septemberzoctoberznovemberzdecembergetatomoldposParse a route address (Return-path value).

        This method just skips all the route stuff and returns the addrspec.
        AddrlistClass.getdomainAddressList.__add__Convert date to extended time tuple.

    The last (additional) element is the time zone offset in seconds, except if
    the timezone was specified as -0000.  In that case the last element is
    None.  This indicates a UTC timestamp that explicitly declaims knowledge of
    the source timezone, as opposed to a +0000 timestamp that indicates the
    source timezone really was UTC.

    ()<>@,:;."[]AddressList.__init___daynamesParse an RFC 2822 addr-spec.AddrlistClass.getatomConvert a time string to a time tuple.AddressList.__iadd__Get a quote-delimited fragment from self's field.getrouteaddrAddrlistClass.getaddrspecAddrlistClass.getdomainliteral_timezonesAddrlistClass.getrouteaddrwslistemail\_parseaddr.py_monthnamesInitialize a new instance.

        `field' is an unparsed address header field, containing
        one or more addresses.
        LWSEmail address parsing code.

Lifted directly from rfc822.py.  This should eventually be rewritten.
AddrlistClass.getaddressAddressList.__getitem__Turn a 10-tuple as returned by parsedate_tz() into a POSIX timestamp.AddrlistClass.getdelimitedûzUTé    zUTCr   zGMTr   ÚZr   zASTipþÿÿzADTiÔþÿÿzESTiþÿÿzEDTipþÿÿzCSTi¨ýÿÿzCDTiþÿÿzMSTiDýÿÿzMDTi¨ýÿÿzPSTiàüÿÿzPDTiDýÿÿ0Compat32.header_fetch_parseReturn the maximum allowed number of headers named 'name'.

        Called when a header is added to a Message object.  If the returned
        value is not 0 or None, and there are already a number of headers with
        the name 'name' equal to the value returned, a ValueError is raised.

        Because the default behavior of Message's __setitem__ is to append the
        value to the list of headers, it is easy to create duplicate headers
        without realizing it.  This method allows certain headers to be limited
        in the number of instances of that header that may be added to a
        Message programmatically.  (The limit is not observed by the parser,
        which will faithfully produce as many headers as exist in the message
        being parsed.)

        The default implementation returns None for all header names.
        Given the header name and the value from the model, return a string
        containing linesep characters that implement the folding of the header
        according to the policy controls.  The value passed in by the email
        package may contain surrogateescaped binary data if the lines were
        parsed by a BytesParser.  The returned value should not contain any
        surrogateescaped data.

        Compat32.fold_binaryPolicy.header_store_parse+
        Headers are folded using the Header folding algorithm, which preserves
        existing line breaks in the value, and wraps each resulting line to the
        max_line_length.  Non-ASCII binary data are CTE encoded using the
        unknown-8bit charset.

        sanitizeBased on policy, either raise defect or call register_defect.

            handle_defect(obj, defect)

        defect should be a Defect subclass, but in any case must be an
        Exception subclass.  obj is the object on which the defect should be
        registered if it is not raised.  If the raise_on_defect is True, the
        defect is raised as an error, otherwise the object and the defect are
        passed to register_defect.

        This method is intended to be called by parsers that discover defects.
        The email package parsers always call it with Defect instances.

        Given the header name and the value from the model, return binary
        data containing linesep characters that implement the folding of the
        header according to the policy controls.  The value passed in by the
        email package may contain surrogateescaped binary data.

        _append_docGiven a list of linesep terminated strings constituting the lines of
        a single header, return the (name, value) tuple that should be stored
        in the model.  The input lines should retain their terminating linesep
        characters.  The lines passed in by the email package may contain
        surrogateescaped binary data.
        _PolicyBase.__setattr__Compat32._sanitize_headerPolicy Object basic framework.

    This class is useless unless subclassed.  A subclass should define
    class attributes with defaults for any values that are to be
    managed by the Policy object.  The constructor will then allow
    non-default values to be set for these attributes at instance
    creation time.  The instance will be callable, taking these same
    attributes keyword arguments, and returning a new instance
    identical to the called instance except for those values changed
    by the keyword arguments.  Instances may be added, yielding new
    instances with any non-default values from the right hand
    operand overriding those in the left hand operand.  That is,

        A + B == A(<non-default values of B>)

    The repr of an instance can be used to reconstruct the object
    if and only if the repr of the values can be used to reconstruct
    those values.

    _extend_docstrings.<locals>.<genexpr>Compat32.header_store_parse_PolicyBase.clonePolicy.handle_defectemail\_policybase.pyPolicy framework for the email package.

Allows fine grained feature control of how the package parses and emits data.
_PolicyBase.__add__added_docNon-default values from right operand override those from left.

        The object returned is a new instance of the subclass.

        +
        The name is parsed as everything up to the ':' and returned unmodified.
        The value is determined by stripping leading whitespace off the
        remainder of the first line, joining all subsequent lines together, and
        stripping any trailing carriage return or linefeed characters.

        Policy.register_defectmroCompat32._foldnewpolicy+
        If the value contains binary data, it is converted into a Header object
        using the unknown-8bit charset.  Otherwise it is returned unmodified.
        Return a new instance with specified attributes changed.

        The new instance has the same attribute values as the current object,
        except for the changes passed in as keyword arguments.

        +
        The name and value are returned unmodified.
        {!r} is an invalid keyword argument for {}Create new Policy, possibly overriding some defaults.

        See class docstring for a list of overridable attributes.

        +
    This particular policy is the backward compatibility Policy.  It
    replicates the behavior of the email package version 5.1.
    Policy.fold_binary{!r} object attribute {!r} is read-onlyCompat32.header_source_parsePolicy.header_source_parsePolicy.header_max_countControls for how messages are interpreted and formatted.

    Most of the classes and many of the methods in the email package accept
    Policy objects as parameters.  A Policy object contains a set of values and
    functions that control how input is interpreted and how output is rendered.
    For example, the parameter 'raise_on_defect' controls whether or not an RFC
    violation results in an error being raised or not, while 'max_line_length'
    controls the maximum length of output lines when a Message is serialized.

    Any valid attribute may be overridden when a Policy is created by passing
    it as a keyword argument to the constructor.  Policy objects are immutable,
    but a new Policy object can be created with only certain values changed by
    calling the Policy instance with keyword arguments.  Policy objects can
    also be added, producing a new Policy object in which the non-default
    attributes set in the right hand operand overwrite those specified in the
    left operand.

    Settable attributes:

    raise_on_defect     -- If true, then defects should be raised as errors.
                           Default: False.

    linesep             -- string containing the value to use as separation
                           between output lines.  Default '\n'.

    cte_type            -- Type of allowed content transfer encodings

                           7bit  -- ASCII only
                           8bit  -- Content-Transfer-Encoding: 8bit is allowed

                           Default: 8bit.  Also controls the disposition of
                           (RFC invalid) binary data in headers; see the
                           documentation of the binary_fold method.

    max_line_length     -- maximum length of lines, excluding 'linesep',
                           during serialization.  None or 0 means no line
                           wrapping is done.  Default is 78.

    mangle_from_        -- a flag that, when True escapes From_ lines in the
                           body of the message by putting a `>' in front of
                           them. This is used when the message is being
                           serialized by a generator. Default: True.

    message_factory     -- the class to use to create new message objects.
                           If the value is None, the default is Message.

    {!r} object has no attribute {!r}<module email._policybase>Policy.header_fetch_parse_PolicyBase.__init__rsplit+
        Headers are folded using the Header folding algorithm, which preserves
        existing line breaks in the value, and wraps each resulting line to the
        max_line_length.  If cte_type is 7bit, non-ascii binary data is CTE
        encoded using the unknown-8bit charset.  Otherwise the original source
        header is used, with its existing line breaks and/or binary data.

        Given the header name and the value from the model, return the value
        to be returned to the application program that is requesting that
        header.  The value passed in by the email package may contain
        surrogateescaped binary data if the lines were parsed by a BytesParser.
        The returned value should not contain any surrogateescaped data.

        _PolicyBase.__repr__Given the header name and the value provided by the application
        program, return the (name, value) that should be stored in the model.
        Record 'defect' on 'obj'.

        Called by handle_defect if raise_on_defect is False.  This method is
        part of the Policy API so that Policy subclasses can implement custom
        defect handling.  The default implementation calls the append method of
        the defects attribute of obj.  The objects used by the email package by
        default that get passed to this method will always have a defects
        attribute with an append method.

        MISC_LENDecode a raw base64 string, returning a bytes object.

    This function does not parse a full MIME header value encoded with
    base64 (like =?iso-8859-1?b?bmloISBuaWgh?=) -- please use the high
    level email.header class for that functionality.
    max_unencodedemail\base64mime.pyReturn the length of s when it is encoded with base64.Encode a string with base64.

    Each line will be wrapped at, at most, maxlinelen characters (defaults to
    76 characters).

    Each line of encoded text will end with eol, which defaults to "\n".  Set
    this to "\r\n" if you will be using the result of this function directly
    in an email.
    Base64 content transfer encoding per RFCs 2045-2047.

This module handles the content transfer encoding method defined in RFC 2045
to encode arbitrary 8-bit data using the three 8-bit bytes in four 7-bit
characters encoding known as Base64.

It is used in the MIME standards for email to attach images, audio, and text
using some 8-bit character sets to messages.

This module provides an interface to encode and decode both headers and bodies
with Base64 encoding.

RFC 2045 defines a method for including character set information in an
`encoded-word' in a header.  This method is commonly used for 8-bit real names
in To:, From:, Cc:, etc. fields, as well as Subject: lines.

This module does not do the line wrapping or end-of-line character conversion
necessary for proper internationalized headers; it only does dumb encoding and
decoding.  To deal with the various line wrapping issues, use the email.header
module.
=?%s?b?%s?=encvecEncode a single header line with Base64 encoding in a given charset.

    charset names the character set to use to encode the header.  It defaults
    to iso-8859-1.  Base64 encoding is defined in RFC 2045.
    <module email.base64mime>Return the content-transfer-encoding used for body encoding.

        This is either the string `quoted-printable' or `base64' depending on
        the encoding used, or it is a function in which case you should call
        the function with a single argument, the Message object being
        encoded.  The function should then set the Content-Transfer-Encoding
        header itself to whatever is appropriate.

        Returns "quoted-printable" if self.body_encoding is QP.
        Returns "base64" if self.body_encoding is BASE64.
        Returns conversion function otherwise.
        SHORTESTemail\charset.pyCharset.header_encode_linesRFC2047_CHROME_LENAdd a codec that map characters in the given charset to/from Unicode.

    charset is the canonical name of a character set.  codecname is the name
    of a Python codec, as appropriate for the second argument to the unicode()
    built-in, or to the encode() method of a Unicode string.
    Charset.__init__iso-8859-9add_codeciso-8859-15euc-jpCharset._get_encoderthis_lineiso-8859-10Map character sets to their email properties.

    This class provides information about the requirements imposed on email
    for a specific character set.  It also provides convenience routines for
    converting between character sets, given the availability of the
    applicable codecs.  Given a character set, it will do its best to provide
    information on how to use that character set in an email in an
    RFC-compliant way.

    Certain character sets must be encoded with quoted-printable or base64
    when used in email headers or bodies.  Certain character sets must be
    converted outright, and are not allowed in email.  Instances of this
    module expose the following information about a character set:

    input_charset: The initial character set specified.  Common aliases
                   are converted to their `official' email names (e.g. latin_1
                   is converted to iso-8859-1).  Defaults to 7-bit us-ascii.

    header_encoding: If the character set must be encoded before it can be
                     used in an email header, this attribute will be set to
                     Charset.QP (for quoted-printable), Charset.BASE64 (for
                     base64 encoding), or Charset.SHORTEST for the shortest of
                     QP or BASE64 encoding.  Otherwise, it will be None.

    body_encoding: Same as header_encoding, but describes the encoding for the
                   mail message's body, which indeed may be different than the
                   header encoding.  Charset.SHORTEST is not allowed for
                   body_encoding.

    output_charset: Some character sets must be converted before they can be
                    used in email headers or bodies.  If the input_charset is
                    one of them, this attribute will contain the name of the
                    charset output will be converted to.  Otherwise, it will
                    be None.

    input_codec: The name of the Python codec used to convert the
                 input_charset to Unicode.  If no conversion codec is
                 necessary, this attribute will be None.

    output_codec: The name of the Python codec used to convert Unicode
                  to the output_charset.  If no conversion codec is necessary,
                  this attribute will have the same value as the input_codec.
    iso-8859-14SHORTEST not allowed for body_encCODEC_MAPBody-encode a string by converting it first to bytes.

        The type of encoding (base64 or quoted-printable) will be based on
        self.body_encoding.  If body_encoding is None, we assume the
        output charset is a 7bit encoding, so re-encoding the decoded
        string using the ascii codec produces the correct string version
        of the content.
        gb2312eucgb2312_cnbig5big5_twDEFAULT_CHARSETjoined_lineadd_charsetlen64Add character set properties to the global registry.

    charset is the input character set, and must be the canonical name of a
    character set.

    Optional header_enc and body_enc is either Charset.QP for
    quoted-printable, Charset.BASE64 for base64 encoding, Charset.SHORTEST for
    the shortest of qp or base64 encoding, or None for no encoding.  SHORTEST
    is only valid for header_enc.  It describes how message headers and
    message bodies in the input charset are to be encoded.  Default is no
    encoding.

    Optional output_charset is the character set that the output should be
    in.  Conversions will proceed from input charset, to Unicode, to the
    output charset when the method Charset.convert() is called.  The default
    is to output in the same character set as the input.

    Both input_charset and output_charset must have Unicode codec entries in
    the module's charset-to-codec mapping; use add_codec(charset, codecname)
    to add codecs the module does not know about.  See the codecs module's
    documentation for more information.
    Add a character set alias.

    alias is the alias name, e.g. latin-1
    canonical is the character set's canonical name, e.g. iso-8859-1
    iso-8859-3add_aliasencoder_moduleûzlatin_1z
iso-8859-1zlatin-1z
iso-8859-1zlatin_2z
iso-8859-2zlatin-2z
iso-8859-2zlatin_3z
iso-8859-3zlatin-3z
iso-8859-3zlatin_4z
iso-8859-4zlatin-4z
iso-8859-4zlatin_5z
iso-8859-9zlatin-5z
iso-8859-9zlatin_6ziso-8859-10zlatin-6ziso-8859-10zlatin_7ziso-8859-13zlatin-7ziso-8859-13zlatin_8ziso-8859-14zlatin-8ziso-8859-14zlatin_9ziso-8859-15zlatin-9ziso-8859-15zlatin_10ziso-8859-16zlatin-10ziso-8859-16zcp949zks_c_5601-1987zeuc_jpzeuc-jpzeuc_krzeuc-krzasciizus-ascii0<module email.charset>lenqphencCHARSETSCharset.__eq__Header-encode a string by converting it first to bytes.

        This is similar to `header_encode()` except that the string is fit
        into maximum line lengths as given by the argument.

        :param string: A unicode string for the header.  It must be possible
            to encode this string to bytes using the character set's
            output codec.
        :param maxlengths: Maximum line length iterator.  Each element
            returned from this iterator will provide the next maximum line
            length.  This parameter is used as an argument to built-in next()
            and should never be exhausted.  The maximum line lengths should
            not count the RFC 2047 chrome.  These line lengths are only a
            hint; the splitter does the best it can.
        :return: Lines of encoded strings, each with RFC 2047 chrome.
        current_lineshift_jisHeader-encode a string by converting it first to bytes.

        The type of encoding (base64 or quoted-printable) will be based on
        this charset's `header_encoding`.

        :param string: A unicode string for the header.  It must be possible
            to encode this string to bytes using the character set's
            output codec.
        :return: The encoded string, with RFC 2047 chrome.
        Charset.body_encodekoi8-rCharset.__str__Charset.get_body_encodingiso-2022-jpvisciiCharset.get_output_charsetwindows-1252Return the output character set.

        This is self.output_charset if that is not None, otherwise it is
        self.input_charset.
        _encode_text.<locals>.<genexpr>ContentManager.add_get_handlerget_text_contentmessage/b2a_qpInvalid header: {}typekeyget_non_text_contentUnknown content transfer encoding {}full_path_for_error_encode_text.<locals>.embedded_bodyset_text_contentset_handlersset_message_contentnormal_bodysniffsniff_qpsniff_base64unencoded_bytes_per_linethislineadd_set_handlerqnamemessage/rfc822 parts do not support cte={}_finalize_setget_and_fixup_unknown_message_content_prepare_setContentManager.add_set_handlerset_bytes_contentaudio image video application_find_set_handlerexternal-bodyrfc822 external-bodyget_message_contentistextContent-IDset_content not valid on multipart_encode_text.<locals>.normal_body<module email.contentmanager>message/partial is not supported for Message objectsmessage/external-body parts do not support cte={}ContentManager.__init__ContentManager._find_set_handlerContentManager.set_contentget_handlers__mro__email\contentmanager.pyContentManager.get_contentencdataEncode the message's payload in quoted-printable.

    Also, add an appropriate Content-Transfer-Encoding header.
    Encode the message's payload in Base64.

    Also, add an appropriate Content-Transfer-Encoding header.
    encodestring_encodestringencode_noopemail\encoders.pyencode_quopri=20encodebytesencode_base64Do nothing.<module email.encoders>Set the Content-Transfer-Encoding header to 7bit or 8bit.Encodings and related functions.HeaderDefect.__init__A message claimed to be a multipart but had no boundary parameter.email package exception classes.<module email.errors>base64 encoded sequence had characters not in base64 alphabetAn illegal charset was given.Error while parsing headers.An invalid content transfer encoding was set on the multipart itself.base64 encoded sequence had invalid length (1 mod 4)MessageErrorA 'Unix-from' header was found in the middle of a header block.MalformedHeaderDefectBase class for message parsing errors.the following ASCII non-printables found in header: {}base64 encoded sequence had an incorrect lengthNonPrintableDefect.__str__A message claimed to be a multipart but no subparts were found.MessageParseErrorlocal_part contains non-ASCII charactersBase class for errors in the email package.Conversion to a multipart is prohibited.Header uses syntax declared obsolete by RFC 5322ASCII characters outside the ascii-printable range foundA start boundary was found, but not the corresponding close boundary.The claimed start boundary was never found.BoundaryErroremail\errors.pyCouldn't find terminating boundary.A message had a continuation line as its first header line.A header that must have a value had noneHeader contained bytes that could not be decodedMessageDefect.__init__Base class for a message defect.Found line with no leading whitespace and no colon before blank line.NonPrintableDefect.__init__MultipartConversionErrorHeader is not valid, message gives details.Base class for a header defect.BufferedSubFile.__iter__^(From |[\041-\071\073-\176]*:|[\t ])Parse all remaining data and return the root message object._new_message_parse_headersFeedParser._new_message_headersonly_msgstackmessage/delivery-statusBufferedSubFile.pushlinesLike FeedParser, but feed accepts bytes.ateofFeedParser - An email feed parser.

The feed parser implements an interface for incrementally parsing an email
message, line by line.  This has advantages for certain applications, such as
those reading email messages off a socket.

FeedParser.feed() is the primary interface for pushing new data into the
parser.  It returns when there's nothing more it can do with the available
data.  When you have no more data to push into the parser, call .close().
This completes the parsing and returns the root message object.

The other advantage of this parser is that it will never raise a parsing
exception.  Instead, when it finds something unexpected, it adds a 'defect' to
the current message.  Defects are just instances that live on the message
object's .defects attribute.
FeedParser._call_parseBufferedSubFile.__init__(\r\n|\r|\n)\ZA feed-style parser of email._eofstackFeedParser._set_headersonly<module email.feedparser>_factory is called with no arguments to create a new message obj

        The policy keyword specifies a policy object that controls a number of
        aspects of the parser's operation.  The default policy maintains
        backward compatibility.

        multipart/digestBufferedSubFile.closeemail\feedparser.pyBufferedSubFile.__next__©ÚselfÚheadersÚlineÚdefectÚlinesÚretvalÚmsgÚboundaryÚ	separatorÚ
boundaryreÚcapturing_preambleÚpreambleÚlinesepÚclose_boundary_seenÚmoÚlastlineÚeolmoÚepilogueÚendÚpayloadÚ	firstlineÚbolmoBufferedSubFile.push_eof_matcherBufferedSubFile.unreadlineFeedParser._parse_headers_parsegenlastheaderNeedMoreDataPush some new data into this object.Push more data into the parser.NLCRE_eolMissing header name._parse_headers fed line with no : and no leading WSBufferedSubFile.readlineFeedParser.__init__A file-ish object that can have new data loaded into it.

    You can also push and pop line-matching predicates onto a stack.  When the
    current predicate matches the current line, a false EOF response
    (i.e. empty string) is returned instead.  This lets the parser adhere to a
    simple abstraction -- it parses until EOF closes the current message.
    headerREFeedParser._pop_messageFeedParser._parsegenBufferedSubFile.pop_eof_matcherNLCRE_crackFeedParser.closelastvalueNLCRE_bol(?P<sep>BytesFeedParser.feed)(?P<end>--)?(?P<ws>[ \t]*)(?P<linesep>\r\n|\r|\n)?$_old_style_factory[no encoding]_handle_message_delivery_statusContent-Description[no description]BytesGenerator.write_encoded_NLGenerator._handle_message_delivery_status_encoded_EMPTYBytesGenerator._write_headersGenerator._handle_textDecodedGenerator._dispatchsfpGenerator.flattenoldfpmunge_cte^From _mangle_from_Like Generator.__init__() except that an additional optional
        argument is allowed.

        Walks through all subparts of a message.  If the subpart is of main
        type `text', then it prints the decoded payload of the subpart.

        Otherwise, fmt is a format string that is used instead of the message
        payload.  fmt is expanded with the following keywords (in
        %(keyword)s format):

        type       : Full MIME type of the non-text part
        maintype   : Main MIME type of the non-text part
        subtype    : Sub-MIME type of the non-text part
        filename   : Filename of the non-text part
        description: Description associated with the non-text part
        encoding   : Content transfer encoding of the non-text part

        The default value for fmt is None, meaning

        [Non-text (%(type)s) part of message omitted, filename %(filename)s]
        BytesGenerator._handle_text(--)?$Generates output from a Message object tree.

    This basic generator writes the message to the given file object as plain
    text.
    Clone this generator with the exact same options.Generator._handle_multipart_signedstring payload expected: %sCreate the generator for message flattening.

        outfp is the output file-like object for writing the message to.  It
        must have a write() method.

        Optional mangle_from_ is a flag that, when True (the default if policy
        is not set), escapes From_ lines in the body of the message by putting
        a `>' in front of them.

        Optional maxheaderlen specifies the longest length for a non-continued
        header.  When a header line is longer (in characters, with tabs
        expanded to 8 spaces) than maxheaderlen, the header will split as
        defined in the Header class.  Set maxheaderlen to zero to disable
        header wrapping.  The default is 78, as recommended (but not required)
        by RFC 2822.

        The policy keyword specifies a policy object that controls a number of
        aspects of the generator's operation.  If no policy is specified,
        the policy associated with the Message object passed to the
        flatten method is used.

        old_msg_policy>From old_gen_policyufromUNDERSCOREbody_partGenerates a text representation of a message.

    Like the Generator base class, except that non-text parts are substituted
    with a format string representing the part.
    [no filename]_munge_cte%%0%ddPrint the message object tree rooted at msg to the output file
        specified when the Generator instance was created.

        unixfrom is a flag that forces the printing of a Unix From_ delimiter
        before the first object in the message tree.  If the original message
        has no From_ delimiter, a `standard' one is crafted.  By default, this
        is False to inhibit the printing of any From_ delimiter.

        Note that for subobjects, no From_ line is printed.

        linesep specifies the characters used to indicate a new line in
        the output.  The default value is determined by the policy specified
        when the Generator instance was created or, if none was specified,
        from the policy associated with the msg.

        BytesGenerator._new_buffer_FMTBytesGenerator._encodemsgtextsalltextGenerator._make_boundaryGenerator.cloneFrom nobody _compile_reemail\generator.py===============DecodedGenerator.__init__Classes to generate plain text from a message object tree.Generator._write_linesBytesGenerator._compile_re^--Generates a bytes version of a Message object tree.

    Functionally identical to the base Generator except that the output is
    bytes and not string.  When surrogates were used in the input to encode
    bytes, these are decoded back to bytes for output.  If the policy has
    cte_type set to 7bit, then the message is transformed such that the
    non-ASCII bytes are properly content transfer encoded, using the charset
    unknown-8bit.

    The outfp object must accept bytes in its write method.
    <module email.generator>_writeBodydecode_headerHeader._nonctextemail\header.pydecoded_seq_current_linecontinuation_wslastcsend_of_line_chunks
  =\?                   # literal =?
  (?P<charset>[^?]*?)   # non-greedy up to the next ? is the charset
  \?                    # literal ?
  (?P<encoding>[qQbB])  # either a "q" or a "b", case insensitive
  \?                    # literal ?
  (?P<encoded>.*?)      # non-greedy up to the next ?= is the encoded string
  \?=                   # literal ?=
  _continuation_ws_lensplitcharsprevpartpop_fromCreate a MIME-compliant header that can contain many character sets.

        Optional s is the initial header value.  If None, the initial header
        value is not set.  You can later append to the header with .append()
        method calls.  s may be a byte string or a Unicode string, but see the
        .append() documentation for semantics.

        Optional charset serves two purposes: it has the same meaning as the
        charset argument to the .append() method.  It also sets the default
        character set for all subsequent .append() calls that omit the charset
        argument.  If charset is not provided in the constructor, the us-ascii
        charset is used both as s's initial charset and as the default for
        subsequent .append() calls.

        The maximum line length can be specified explicitly via maxlinelen. For
        splitting the first line to a shorter value (to account for the field
        header which isn't included in s, e.g. `Subject') pass in the name of
        the field in header_name.  The default maxlinelen is 78 as recommended
        by RFC 2822.

        continuation_ws must be RFC 2822 compliant folding whitespace (usually
        either a space or a hard tab) which will be prepended to continuation
        lines.

        errors is passed through to the .append() call.
        make_header_ValueFormatter._ascii_splitinitial_sizeHeader.__str___Accumulator.__len___splitcharsReturn the string value of the header._ValueFormatter._strpopped[\041-\176]+:$_ValueFormatter.add_transitionCreate a Header from a sequence of pairs as returned by decode_header()

    decode_header() takes a header value string and returns a sequence of
    pairs of the format (decoded_string, charset) where charset is the string
    name of the character set.

    This function takes one of those sequence of pairs and returns a Header
    instance.  Optional maxlinelen, header_name, and continuation_ws are as in
    the Header constructor.
    last_charset_ValueFormatter._maxlengths_ValueFormatter.newline<module email.header>©ÚheaderÚwordsÚlineÚpartsÚfirstÚ	unencodedÚcharsetÚencodingÚencodedÚdroplistÚnÚwÚdÚdecoded_wordsÚencoded_stringÚwordÚpaderrÚ	collapsedÚ	last_wordÚlast_charset_append_chunk_ValueFormatter.__str___ValueFormatter._append_chunk_Accumulator.popis_onlywsHeader._normalize_Accumulator.__len__.<locals>.<genexpr>Header.encodeUnexpected encoding: Header.__eq__uchunkslastspacenextcshasspaceDecode a message header value without converting charset.

    Returns a list of (string, charset) pairs containing each of the decoded
    parts of the header.  Charset is None for non-encoded parts of the header,
    otherwise a lower-case string containing the name of the character set
    specified in the encoded string.

    header may be a string that may or may not contain RFC2047 encoded words,
    or it may be a Header object.

    An email.errors.HeaderParseError may be raised when certain decoding error
    occurs (e.g. a base64 decoding exception).
    _embedded_header_Accumulator.__str__Header encoding and decoding functionality.UTF8first_linelast_line_Accumulator.reset_Accumulator.part_countlast_chunk_Accumulator.__init___Accumulator.pushTrue if string s is not a ctext character of RFC822.
        \n[^ \t]+:_maxlinelenHeader.__init___ValueFormatter.__init__Header.append_initial_size_ValueFormatter.feed_Accumulator.pop_from_Accumulator.is_onlyws;, 	_headerlenAppend a string to the MIME header.

        Optional charset, if given, should be a Charset instance or the name
        of a character set (which will be converted to a Charset instance).  A
        value of None (the default) means that the charset given in the
        constructor is used.

        s may be a byte string or a Unicode string.  If it is a byte string
        (i.e. isinstance(s, str) is false), then charset is the encoding of
        that byte string, and a UnicodeError will be raised if the string
        cannot be decoded with that charset.  If s is a Unicode string, then
        charset is a hint specifying the character set of the characters in
        the string.  In either case, when producing an RFC 2822 compliant
        header using RFC 2047 rules, the string will be encoded using the
        output codec of the charset.  If the string cannot be encoded to the
        output codec, a UnicodeError will be raised.

        Optional `errors' is passed as the errors argument to the decode
        call if s is a byte string.
        SPACE8MAXLINELENheader value appears to contain an embedded header: {!r}Base64 decoding errorstartvalEncode a message header into an RFC-compliant format.

        There are many issues involved in converting a given string for use in
        an email header.  Only certain character sets are readable in most
        email clients, and as header strings can only contain a subset of
        7-bit ASCII, care must be taken to properly convert and encode (with
        Base64 or quoted-printable) header strings.  In addition, there is a
        75-character length limit on any given encoded header field, so
        line-wrapping must be performed, even with double-byte character sets.

        Optional maxlinelen specifies the maximum length of each generated
        line, exclusive of the linesep string.  Individual lines may be longer
        than maxlinelen if a folding point cannot be found.  The first line
        will be shorter by the length of the header name plus ": " if a header
        name was specified at Header construction time.  The default value for
        maxlinelen is determined at header construction time.

        Optional splitchars is a string containing characters which should be
        given extra weight by the splitting algorithm during normal header
        wrapping.  This is in very rough support of RFC 2822's `higher level
        syntactic breaks':  split points preceded by a splitchar are preferred
        during line splitting, with the characters preferred in the order in
        which they appear in the string.  Space and tab may be included in the
        string to indicate whether preference should be given to one over the
        other as a split point when other split chars do not appear in the line
        being split.  Splitchars does not affect RFC 2047 encoded lines.

        Optional linesep is a string to be used to separate the lines of
        the value.  The default value is the most useful for typical
        Python applications, but it can be set to \r\n to produce RFC-compliant
        line separators when needed.
        _Accumulator.__str__.<locals>.<genexpr>BSPACEUSASCIIBaseHeader.defectsAddressHeader.initUnstructuredHeaderheader-nameAddressHeader.parseadrstrBaseHeader.nameMIMEVersionHeader.versionBaseHeader.init{}:{};HeaderRegistry.__call__ContentTypeHeader.initGroup.__eq___minorAddressHeader.groupsMIMEVersionHeader.minorDateHeader.initbccMIMEVersionHeader.majorBaseHeader.foldUnstructuredHeader.parseParameterizedMIMEHeader.initContentTypeHeader.subtypeBaseHeader._reconstructCreate a header_factory that works with the Policy API.

        base_class is the class that will be the last class in the created
        header class's __bases__ list.  default_class is the class that will be
        used if "name" (see __call__) does not appear in the registry.
        use_default_map controls whether or not the default mapping of names to
        specialized classes is copied in to the registry when the factory is
        created.  The default is True.

        _usernamecls_nameContentDispositionHeaderUniqueSingleAddressHeader<module email.headerregistry>resent-dateCreate an object representing an address group.

        An address group consists of a display_name followed by colon and a
        list of addresses (see Address) terminated by a semi-colon.  The Group
        is created by specifying a display_name and a possibly empty list of
        Address objects.  A Group can also be used to represent a single
        address that is not in a group, which is convenient when manipulating
        lists that are a combination of Groups and individual Addresses.  In
        this case the display_name should be set to None.  In particular, the
        string representation of a Group whose display_name is None is the same
        as the Address object, if there is one and only one Address object in
        the addresses list.

        {}(display_name={!r}, addresses={!r}HeaderRegistry.__init__The addr_spec (username@domain) portion of the address, quoted
        according to RFC 5322 rules, but with no Content Transfer Encoding.
        Base class for message headers.

    Implements generic behavior and provides tools for subclasses.

    A subclass must define a classmethod named 'parse' that takes an unfolded
    value string and a dictionary as its arguments.  The dictionary will
    contain one key, 'defects', initialized to an empty list.  After the call
    the dictionary must contain two additional keys: parse_tree, set to the
    parse tree obtained from parsing the header, and 'decoded', set to the
    string value of the idealized representation of the data from the value.
    (That is, encoded words are decoded, and values that have canonical
    representations are so represented.)

    The defects key is intended to collect parsing defects, which the message
    parser will subsequently dispose of as appropriate.  The parser should not,
    insofar as practical, raise any errors.  Defects should be added to the
    list instead.  The standard header parsers register defects for RFC
    compliance issues, for obsolete RFC syntax, and for unrecoverable parsing
    errors.

    The parse method may add additional keys to the dictionary.  In this case
    the subclass must define an 'init' method, which will be passed the
    dictionary as its keyword arguments.  The method should use (usually by
    setting them as the value of similarly named attributes) and remove all the
    extra keys added by its parse method, and then use super to call its parent
    class with the remaining arguments and keywords.

    The subclass should also make sure that a 'max_count' attribute is defined
    that is either None or 1. XXX: need to better define this API.

    senderRepresenting and manipulating email headers via custom objects.

This module provides an implementation of the HeaderRegistry API.
The implementation is designed to flexibly follow RFC5322 rules.

Eventually HeaderRegistry will be a public API, but it isn't yet,
and will probably change some before that happens.

HeaderRegistry.__getitem__DateHeader.parse_default_header_mapresent-ccUniqueUnstructuredHeaderthis should not happen_content_dispositionFold header according to policy.

        The parsed representation of the header is folded according to
        RFC5322 rules, as modified by the policy.  If the parse tree
        contains surrogateescaped bytes, the bytes are CTE encoded using
        the charset 'unknown-8bit".

        Any non-ASCII characters in the parse tree are CTE encoded using
        charset utf-8. XXX: make this a policy setting.

        The returned value is an ASCII-only string possibly containing linesep
        characters, and ending with a linesep character.  The string includes
        the header name and the ': ' separator.

        Group.addressesBaseHeader.__reduce__header-sepAddress.__init__ParameterizedMIMEHeader.parseresent-fromBaseHeader.__new__reply-toGroup.__str__Address.addr_specContentTransferEncodingHeader.parseA header_factory and header registry.ContentDispositionHeader.initAddress.__eq__Invalid addr_spec; only '{}' could be parsed from '{}'_maintypeAddressHeader.addressesresent-tomap_to_typeAddress.domainresent-senderContentTypeHeader.maintypeDateHeader.datetimeContentTypeHeader.content_typeMIMEVersionHeader.parseSingleAddressHeader.address_reconstruct_headerContentTransferEncodingHeader.cteAddress.usernamevalue of single address header {} is not a single addressRegister cls as the specialized class for handling "name" headers.

        ContentDispositionHeader.content_disposition{}(display_name={!r}, username={!r}, domain={!r})ContentTransferEncodingHeader.initUniqueAddressHeaderGroup.__repr__{} <{}>AddressHeader.addresses.<locals>.<genexpr>_addressesemail\headerregistry.pyCreate a header instance for header 'name' from 'value'.

        Creates a header instance by creating a specialized class for parsing
        and representing the specified header by combining the factory
        base_class with a specialized class from the registry or the
        default_class, and passing the name and value to the constructed
        class's constructor.

        {}.{}HeaderRegistry.map_to_typeCreate an object representing a full email address.

        An address can have a 'display_name', a 'username', and a 'domain'.  In
        addition to specifying the username and domain separately, they may be
        specified together by using the addr_spec keyword *instead of* the
        username and domain keywords.  If an addr_spec string is specified it
        must be properly quoted according to RFC 5322 rules; an error will be
        raised if it is not.

        An Address object has display_name, username, domain, and addr_spec
        attributes, all of which are read-only.  The addr_spec and the string
        value of the object are both quoted according to RFC5322 rules, but
        without any Content Transfer Encoding.

        orig-dateHeader whose value consists of a single timestamp.

    Provides an additional attribute, datetime, which is either an aware
    datetime using a timezone, or a naive datetime if the timezone
    in the input string is -0000.  Also accepts a datetime as input.
    The 'value' attribute is the normalized form of the timestamp,
    which means it is the output of format_datetime on the datetime.
    _majorAddress.__repr__AddressHeader.value_parserresent-bccUniqueDateHeaderMIMEVersionHeader.initAddress.__str__ParameterizedMIMEHeader.paramsaddrspec specified when username and/or domain also specifiedGroup.__str__.<locals>.<genexpr>email\iterators.pybody_line_iteratortyped_subpart_iteratorinclude_defaultA handy debugging aidVarious types of useful iterators and generators. [%s]Iterate over the parts, returning string payloads line-by-line.

    Optional decode (default False) is passed through to .get_payload().
    _structureWalk over the message tree, yielding each subpart.

    The walk is performed in depth-first order.  This method is a
    generator.
    Iterate over the subparts with a given MIME type.

    Use `maintype' as the main MIME type to match against; this defaults to
    "text".  Optional `subtype' is the MIME subtype to match against; if
    omitted, only the main type is matched.
    <module email.iterators>failobjdisallowed_subtypesMIMEPart.as_stringReturn the parameter value if found in the Content-Type header.

        Optional failobj is the object to return if there is no Content-Type
        header, or the Content-Type header has no such parameter.  Optional
        header is the header to search instead of Content-Type.

        Parameter keys are always compared case insensitively.  The return
        value can either be a string, or a 3-tuple if the parameter was RFC
        2231 encoded.  When it's a 3-tuple, the elements of the value are of
        the form (CHARSET, LANGUAGE, VALUE).  Note that both CHARSET and
        LANGUAGE can be None, in which case you should consider VALUE to be
        encoded in the us-ascii charset.  You can usually ignore LANGUAGE.
        The parameter value (either the returned string, or the VALUE item in
        the 3-tuple) is always unquoted, unless unquote is set to False.

        If your application doesn't care whether the parameter was RFC 2231
        encoded, it can turn the return value into a string as follows:

            rawparam = msg.get_param('foo')
            param = email.utils.collapse_rfc2231_value(rawparam)

        _find_bodymake_mixedMessage.get_unixfrom<module email.message>_body_typesMessage.set_charsetMessage.__init__Message.__contains__Return a reference to the payload.

        The payload will either be a list object or a string.  If you mutate
        the list object, you modify the message's payload in place.  Optional
        i returns that index into the payload.

        Optional decode is a flag indicating whether the payload should be
        decoded or not, according to the Content-Transfer-Encoding header
        (default is False).

        When True and the message is not a multipart, the payload will be
        decoded if this header's value is `quoted-printable' or `base64'.  If
        some other encoding is used, or the header is missing, or if the
        payload has bogus data (i.e. bogus base64 or uuencoded data), the
        payload is returned as-is.

        If the message is a multipart and the decode flag is True, then None
        is returned.
        Message.get_charsetMessage.valuesrequotenew_ctypeMessage.as_bytesGet a header value.

        Like __getitem__() but return failobj instead of None when the field
        is missing.
        Set the value of a header.

        Note: this does not overwrite an existing header with the same field
        name.  Use __delitem__() first to delete any existing headers.
        Message.get_filenameReturn an iterator over the non-main parts of a multipart.

        Skip the first of each occurrence of text/plain, text/html,
        multipart/related, or multipart/alternative in the multipart (unless
        they have a 'Content-Disposition: attachment' header) and include all
        remaining subparts in the returned iterator.  When applied to a
        multipart/related, return all parts except the root part.  Return an
        empty iterator when applied to a multipart/alternative or a
        non-multipart.
        del_paramMIMEPart.clearReturn a list of all the values for the named field.

        These will be sorted in the order they appeared in the original
        message, and may contain duplicates.  Any fields deleted and
        re-inserted are always appended to the header list.

        If no such fields exist, failobj is returned (defaults to None).
        Return the entire formatted message as a bytes object.
        Message.set_boundaryMessage.get_paramGet all the message's header fields and values.

        These will be sorted in the order they appeared in the original
        message, or were added to the message, and may contain duplicates.
        Any fields deleted and re-inserted are always appended to the header
        list.
        MIMEPart._add_multipartget_content_charsetappend_paramMessage.del_paramMessage.get_content_subtypeStore name and value in the model without modification.

        This is an "internal" API, intended only for use by a parser.
        Return the (name, value) header pairs without modification.

        This is an "internal" API, intended only for use by a generator.
        Message.get_boundarySEMISPACEReturn the message's Content-Type parameters, as a list.

        The elements of the returned list are 2-tuples of key/value pairs, as
        split on the `=' sign.  The left hand side of the `=' is the key,
        while the right hand side is the value.  If there is no `=' sign in
        the parameter the value is the empty string.  The value is as
        described in the get_param() method.

        Optional failobj is the object to return if there is no Content-Type
        header.  Optional header is the header to search instead of
        Content-Type.  If unquote is True, the value is unquoted.
        best_prioReturn the entire formatted message as a string.
        iter_partsnewheadersSet a parameter in the Content-Type header.

        If the parameter already exists in the header, its value will be
        replaced with the new value.

        If header is Content-Type and has not yet been defined for this
        message, it will be set to "text/plain" and the new parameter and
        value will be appended as per RFC 2045.

        An alternate header can be specified in the header argument, and all
        parameters will be quoted as necessary unless requote is False.

        If charset is specified, the parameter will be encoded according to RFC
        2231.  Optional language specifies the RFC 2231 language, defaulting
        to the empty string.  Both charset and language should be strings.
        Delete all occurrences of a header, if present.

        Does not raise an exception if the header is missing.
        Message.get_paramsGet a header value.

        Return None if the header is missing instead of raising an exception.

        Note that if the header appeared multiple times, exactly which
        occurrence gets returned is undefined.  Use get_all() to get all
        the values matching a header field name.
        pcharsetReturn a list of all the message's header values.

        These will be sorted in the order they appeared in the original
        message, or were added to the message, and may contain duplicates.
        Any fields deleted and re-inserted are always appended to the header
        list.
        MIMEPart.get_contentReturn the entire formatted message as a bytes object.

        Optional 'unixfrom', when true, means include the Unix From_ envelope
        header.  'policy' is passed to the BytesGenerator instance used to
        serialize the message; if not specified the policy associated with
        the message instance is used.
        Message.get_content_charsetSet the main type and subtype for the Content-Type header.

        type must be a string in the form "maintype/subtype", otherwise a
        ValueError is raised.

        This method replaces the Content-Type header, keeping all the
        parameters in place.  If requote is False, this leaves the existing
        header's quoting as is.  Otherwise, the parameters will be quoted (the
        default).

        An alternative header can be specified in the header argument.  When
        the Content-Type header is set, we'll always also add a MIME-Version
        header.
        MIMEPart._make_multipartMessage.set_payloadkeep_headersexisting_subtypepart_headersSet the boundary parameter in Content-Type to 'boundary'.

        This is subtly different than deleting the Content-Type header and
        adding a new one with a new boundary parameter via add_header().  The
        main difference is that using the set_boundary() method preserves the
        order of the Content-Type header in the original message.

        HeaderParseError is raised if the message has no Content-Type header.
        Return the message's content type.

        The returned string is coerced to lower case of the form
        `maintype/subtype'.  If there was no Content-Type header in the
        message, the default type as given by get_default_type() will be
        returned.  Since according to RFC 2045, messages always have a default
        type this will always return a value.

        RFC 2045 defines a message's default type to be text/plain unless it
        appears inside a multipart/digest container, in which case it would be
        message/rfc822.
        MIMEPart.iter_attachmentsbpayloadSet the charset of the payload to a given character set.

        charset can be a Charset instance, a string naming a character set, or
        None.  If it is a string it will be converted to a Charset instance.
        If charset is None, the charset parameter will be removed from the
        Content-Type field.  Anything else will generate a TypeError.

        The message will be assumed to be of type text/* encoded with
        charset.input_charset.  It will be converted to charset.output_charset
        and encoded properly, if needed, when generating the plain text
        representation of the message.  MIME headers (MIME-Version,
        Content-Type, Content-Transfer-Encoding) will be added as needed.
        x-uuencodeMessage.add_headeremail\message.pyMessage.keysReturns the message's sub-content type.

        This is the `subtype' part of the string returned by
        get_content_type().
        MIMEPart.__init__Message.attachpreferencelistold_paramMessage.get_charsetsReturn the entire formatted message as a string.

        Optional 'unixfrom', when true, means include the Unix From_ envelope
        header.  For backward compatibility reasons, if maxheaderlen is
        not specified it defaults to 0, so you must override it explicitly
        if you want a different maxheaderlen.  'policy' is passed to the
        Generator instance used to serialize the mesasge; if it is not
        specified the policy associated with the message instance is used.

        If the message object contains binary data that is not encoded
        according to RFC standards, the non-compliant data will be replaced by
        unicode "unknown character" code points.
        Expected list, got %scontent-idMessage.__bytes__Message.replace_headerMessage.get_content_dispositionnewparamsfoundppkMIMEPart.iter_partsMessage.__getitem__Message.get_content_maintypeMIMEPart.add_relatedReturn the entire formatted message as a string.

        Optional 'unixfrom', when true, means include the Unix From_ envelope
        header.  maxheaderlen is retained for backward compatibility with the
        base Message class, but defaults to None, meaning that the policy value
        for max_line_length controls the header maximum length.  'policy' is
        passed to the Generator instance used to serialize the mesasge; if it
        is not specified the policy associated with the message instance is
        used.
        MIMEPart.make_mixedNo Content-Type header foundMIMEPart.clear_contentReturn the message's main content type.

        This is the `maintype' part of the string returned by
        get_content_type().
        Message.__str__Return a list containing the charset(s) used in this message.

        The returned list of items describes the Content-Type headers'
        charset parameter for this message and all the subparts in its
        payload.

        Each item will either be a string (the value of the charset parameter
        in the Content-Type header of that part) or the value of the
        'failobj' parameter (defaults to None), if the part does not have a
        main MIME type of "text", or the charset is not defined.

        The list will contain one string for each part of the message, plus
        one for the container message (i.e. self), so that a non-multipart
        message will still return a list of length 1.
        Message.as_stringold_valueReturn best candidate mime part for display as 'body' of message.

        Do a depth first search, starting with self, looking for the first part
        matching each of the items in preferencelist, and return the part
        corresponding to the first item that has a match, or None if no items
        have a match.  If 'related' is not included in preferencelist, consider
        the root part of any multipart/related encountered as a candidate
        match.  Ignore parts with 'Content-Disposition: attachment'.
        Return True if the message consists of multiple parts.MIMEPart.is_attachmentMessage.__iter__Message.get_default_typeRemove the given parameter completely from the Content-Type header.

        The header will be re-written in place without the parameter or its
        value. All values will be quoted as necessary unless requote is
        False.  Optional header specifies an alternative to the Content-Type
        header.
        Set the payload to the given value.

        Optional charset sets the message's default character set.  See
        set_charset() for details.
        Message.itemsset_type_parseparamReturn the message's content-disposition if it exists, or None.

        The return values can be either 'inline', 'attachment' or None
        according to the rfc2183.
        MIMEPart.get_body%s="%s"EmailMessage.set_content[ \(\)<>@,;:\\"/\[\]\?=]Message._get_params_preserveMIMEPart.set_contentMessage.__delitem__Message.set_default_typeConvenience function to format and return a key=value pair.

    This will quote the value if needed or if quote is true.  If value is a
    three tuple (charset, language, value), it will be encoded according
    to RFC2231 rules.  If it contains non-ascii characters it will likewise
    be encoded according to RFC2231 rules, using the utf-8 charset and
    a null language.
    Replace a header.

        Replace the first matching header found in the message, retaining
        header order and case.  If no matching header was found, a KeyError is
        raised.
        Cannot convert {} to {}Basic message object for the email package object model.MIMEPart.make_relatedMessage.set_typeBasic message object.

    A message object is defined as something that has a bunch of RFC 2822
    headers and a payload.  It may optionally have an envelope header
    (a.k.a. Unix-From or From_ header).  If the message is a container (i.e. a
    multipart or a message/rfc822), then the payload is a list of Message
    objects, otherwise it is a string.

    Message objects implement part of the `mapping' interface, which assumes
    there is exactly one occurrence of the header per message.  Some headers
    do in fact appear multiple times (e.g. Received) and for those headers,
    you must use the explicit API to set or get all the headers.  Not all of
    the mapping methods are implemented.
    Set the `default' content type.

        ctype should be either "text/plain" or "message/rfc822", although this
        is not enforced.  The default content type is not stored in the
        Content-Type header.
        Message.get_allThere may be at most {} {} headers in a messageReturn the boundary associated with the payload if present.

        The boundary is extracted from the Content-Type header's `boundary'
        parameter, and it is unquoted.
        Return the filename associated with the payload if present.

        The filename is extracted from the Content-Disposition header's
        `filename' parameter, and it is unquoted.  If that header is missing
        the `filename' parameter, this method falls back to looking for the
        `name' parameter.
        Return an iterator over all immediate subparts of a multipart.

        Return an empty iterator for a non-multipart.
        add_attachment_splitparamMessage.__len__Message.get_content_typeMIMEPart.make_alternative_unquotevalueAdd the given payload to the current payload.

        The current payload will always be a list of objects after this method
        is called.  If you want to set the payload to a scalar object, use
        set_payload() instead.
        Return a list of all the message's header field names.

        These will be sorted in the order they appeared in the original
        message, or were added to the message, and may contain duplicates.
        Any fields deleted and re-inserted are always appended to the header
        list.
        MIMEPart._find_bodyReturn the `default' content type.

        Most messages have a default content type of text/plain, except for
        messages that are subparts of multipart/digest containers.  Such
        subparts have a default content type of message/rfc822.
        _formatparamMessage.set_unixfromMIMEPart.add_alternativeAttach is not valid on a message with a non-multipart payloadExtended header setting.

        name is the header field to add.  keyword arguments can be used to set
        additional parameters for the header field, with underscores converted
        to dashes.  Normally the parameter will be added as key="value" unless
        value is None, in which case only the key will be added.  If a
        parameter value contains non-ASCII characters it can be specified as a
        three-tuple of (charset, language, value), in which case it will be
        encoded according to RFC2231 rules.  Otherwise it will be encoded using
        the utf-8 charset and a language of ''.

        Examples:

        msg.add_header('content-disposition', 'attachment', filename='bud.gif')
        msg.add_header('content-disposition', 'attachment',
                       filename=('utf-8', '', FuÃballer.ppt'))
        msg.add_header('content-disposition', 'attachment',
                       filename='FuÃballer.ppt'))
        Message.is_multipartMessage.set_rawMessage.get_payloadMessage.raw_itemsMessage.__setitem__Return the total number of headers, including duplicates.Return the Charset instance associated with the message's payload.
        MIMEPart.add_attachmentReturn the charset parameter of the Content-Type header.

        The returned string is always coerced to lower case.  If there is no
        Content-Type header, or if that header has no charset parameter,
        failobj is returned.
        Message.set_paramMIMEPart.__str__Create a message structure from a string.

        Returns the root of the message structure.  Optional headersonly is a
        flag specifying whether to stop parsing after reading the headers or
        not.  The default is False, meaning it parses the entire contents of
        the file.
        Parser of binary RFC 2822 and MIME email messages.

        Creates an in-memory object tree representing the email message, which
        can then be manipulated and turned over to a Generator to return the
        textual representation of the message.

        The input must be formatted as a block of RFC 2822 headers and header
        continuation lines, optionally preceded by a `Unix-from' header.  The
        header block is terminated either by the end of the input or by a
        blank line.

        _class is the class to instantiate for new message objects when they
        must be created.  This class must have a constructor that can take
        zero arguments.  Default is Message.Message.
        <module email.parser>BytesHeaderParser.parsebytesBytesParser.parsebytesParser of RFC 2822 and MIME email messages.

        Creates an in-memory object tree representing the email message, which
        can then be manipulated and turned over to a Generator to return the
        textual representation of the message.

        The string must be formatted as a block of RFC 2822 headers and header
        continuation lines, optionally preceded by a `Unix-from' header.  The
        header block is terminated either by the end of the string or by a
        blank line.

        _class is the class to instantiate for new message objects when they
        must be created.  This class must have a constructor that can take
        zero arguments.  Default is Message.Message.

        The policy keyword specifies a policy object that controls a number of
        aspects of the parser's operation.  The default policy maintains
        backward compatibility.

        Create a message structure from the data in a binary file.

        Reads all the data from the file and returns the root of the message
        structure.  Optional headersonly is a flag specifying whether to stop
        parsing after reading the headers or not.  The default is False,
        meaning it parses the entire contents of the file.
        BytesParser.__init__Parser.parsestrHeaderParser.parsestremail\parser.pyCreate a message structure from a byte string.

        Returns the root of the message structure.  Optional headersonly is a
        flag specifying whether to stop parsing after reading the headers or
        not.  The default is False, meaning it parses the entire contents of
        the file.
        A parser of RFC 2822 and MIME email messages.Create a message structure from the data in a file.

        Reads all the data from the file and returns the root of the message
        structure.  Optional headersonly is a flag specifying whether to stop
        parsing after reading the headers or not.  The default is False,
        meaning it parses the entire contents of the file.
        This will be the home for the policy that hooks in the new
code that adds all the email6 features.
refold_binary+
        If the value has a 'name' attribute, it is returned to unmodified.
        Otherwise the name and the value with any linesep characters removed
        are passed to the header_factory method, and the resulting custom
        header object is returned.  Any surrogateescaped bytes get turned
        into the unicode unknown-character glyph.

        +
    PROVISIONAL

    The API extensions enabled by this policy are currently provisional.
    Refer to the documentation for details.

    This policy adds new header parsing and folding algorithms.  Instead of
    simple strings, headers are custom objects with custom attributes
    depending on the type of the field.  The folding algorithm fully
    implements RFCs 2047 and 5322.

    In addition to the settable attributes listed above that apply to
    all Policies, this policy adds the following additional attributes:

    utf8                -- if False (the default) message headers will be
                           serialized as ASCII, using encoded words to encode
                           any non-ASCII characters in the source strings.  If
                           True, the message headers will be serialized using
                           utf8 and will not contain encoded words (see RFC
                           6532 for more on this serialization format).

    refold_source       -- if the value for a header in the Message object
                           came from the parsing of some source, this attribute
                           indicates whether or not a generator should refold
                           that value when transforming the message back into
                           stream form.  The possible values are:

                           none  -- all source values use original folding
                           long  -- source values that have any line that is
                                    longer than max_line_length will be
                                    refolded
                           all  -- all values are refolded.

                           The default is 'long'.

    header_factory      -- a callable that takes two arguments, 'name' and
                           'value', where 'name' is a header field name and
                           'value' is an unfolded header field value, and
                           returns a string-like object that represents that
                           header.  A default header_factory is provided that
                           understands some of the RFC5322 header field types.
                           (Currently address fields and date fields have
                           special treatment, while all other fields are
                           treated as unstructured.  This list will be
                           completed before the extension is marked stable.)

    content_manager     -- an object with at least two methods: get_content
                           and set_content.  When the get_content or
                           set_content method of a Message object is called,
                           it calls the corresponding method of this object,
                           passing it the message object as its first argument,
                           and any arguments or keywords that were passed to
                           it as additional arguments.  The default
                           content_manager is
                           :data:`~email.contentmanager.raw_data_manager`.

    EmailPolicy._foldSMTPUTF8EmailPolicy.header_source_parseEmailPolicy.__init__EmailPolicy.header_store_parseEmailPolicy.foldemail\policy.py+
        The name is parsed as everything up to the ':' and returned unmodified.
        The value is determined by stripping leading whitespace off the
        remainder of the first line, joining all subsequent lines together, and
        stripping any trailing carriage return or linefeed characters.  (This
        is the same as Compat32).

        Header values may not contain linefeed or carriage return charactersEmailPolicy.fold_binary+
        The same as fold if cte_type is 7bit, except that the returned value is
        bytes.

        If cte_type is 8bit, non-ASCII binary data is converted back into
        bytes.  Headers with binary data are not refolded, regardless of the
        refold_header setting, since there is no way to know whether the binary
        data consists of single byte characters or multibyte characters.

        If utf8 is true, headers are encoded to utf8, otherwise to ascii with
        non-ASCII unicode rendered as encoded words.

        EmailPolicy._fold.<locals>.<genexpr>+
        The implementation for this class returns the max_count attribute from
        the specialized header class that would be used to construct a header
        of type 'name'.
        EmailPolicy.header_max_countlinesep_splitter+
        Header folding is controlled by the refold_source policy setting.  A
        value is considered to be a 'source value' if and only if it does not
        have a 'name' attribute (having a 'name' attribute means it is a header
        object of some sort).  If a source value needs to be refolded according
        to the policy, it is converted into a custom header object by passing
        the name and the value with any linesep characters removed to the
        header_factory method.  Folding of a custom header object is done by
        calling its fold method with the current policy.

        Source values are split into lines using splitlines.  If the value is
        not to be refolded, the lines are rejoined using the linesep from the
        policy and returned.  The exception is lines containing non-ascii
        binary data.  In that case the value is refolded regardless of the
        refold_source setting, which causes the binary data to be CTE encoded
        using the unknown-8bit charset.

        EmailPolicy.header_fetch_parse+
        The name is returned unchanged.  If the input value has a 'name'
        attribute and it matches the name ignoring case, the value is returned
        unchanged.  Otherwise the name and value are passed to header_factory
        method, and the resulting custom header object is returned as the
        value.  In this case a ValueError is raised if the input value contains
        CR or LF characters.

        <module email.policy>soft_breakmaxlinelen1encoded_bodylaststartroomEncode with quoted-printable, wrapping at maxlinelen characters.

    Each line of encoded text will end with eol, which defaults to "\n".  Set
    this to "\r\n" if you will be using the result of this function directly
    in an email.

    Each line will be wrapped at, at most, maxlinelen characters before the
    eol string (maxlinelen defaults to 76 characters, the maximum value
    permitted by RFC 2045).  Long lines will have the 'soft line break'
    quoted-printable character "=" appended to them, so the decoded text will
    be identical to the original text.

    The minimum maxlinelen is 4 to have room for a quoted character ("=XX")
    followed by a soft line break.  Smaller values will generate a
    ValueError.

    _QUOPRI_HEADER_MAPbody_checkEncode a single header line with quoted-printable (like) encoding.

    Defined in RFC 2045, this `Q' encoding is similar to quoted-printable, but
    used specifically for email header fields to allow charsets with mostly 7
    bit characters (and some 8 bit) to remain more or less readable in non-RFC
    2045 aware mail clients.

    charset names the character set to use in the RFC 2046 header.  It
    defaults to iso-8859-1.
     !"#$%&'()*+,-./0123456789:;<>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\]^_`abcdefghijklmnopqrstuvwxyz{|}~	=%02XReturn True if the octet should be escaped with body quopri.Return True if the octet should be escaped with header quopri.Quoted-printable content transfer encoding per RFCs 2045-2047.

This module handles the content transfer encoding method defined in RFC 2045
to encode US ASCII-like 8-bit data called `quoted-printable'.  It is used to
safely encode text that is in a character set similar to the 7-bit US ASCII
character set, but that includes some 8-bit characters that are normally not
allowed in email bodies or headers.

Quoted-printable is very space-inefficient for encoding binary files; use the
email.base64mime module for that instead.

This module provides an interface to encode and decode both headers and bodies
with quoted-printable encoding.

RFC 2045 defines a method for including character set information in an
`encoded-word' in a header.  This method is commonly used for 8-bit real names
in To:/From:/Cc: etc. fields, as well as Subject: lines.

This module does not do the line wrapping or end-of-line character
conversion necessary for proper internationalized headers; it only
does dumb encoding and decoding.  To deal with the various line
wrapping issues, use the email.header module.
=?%s?q?%s?=Turn a match in the form =AB to the ASCII character with value 0xab_unquote_matchbody_length.<locals>.<genexpr>email\quoprimime.pyDecode a quoted-printable string.

    Lines are separated with eol, which defaults to \n.
    _QUOPRI_BODY_ENCODE_MAP=[a-fA-F0-9]{2}header_length.<locals>.<genexpr>_QUOPRI_BODY_MAPheader_checkReturn a header quoted-printable encoding length.

    Note that this does not include any RFC 2047 chrome added by
    `header_encode()`.

    :param bytearray: An array of bytes (a.k.a. octets).
    :return: The length in bytes of the byte array when it is encoded with
        quoted-printable for headers.
    _QUOPRI_MAPDecode a string encoded with RFC 2045 MIME header `Q' encoding.

    This function does not parse a full MIME header value encoded with
    quoted-printable (like =?iso-8859-1?q?Hello_World?=) -- please use
    the high level email.header class for that functionality.
    <module email.quoprimime>Turn a string in the form =AB to the ASCII character with value 0xabReturn a body quoted-printable encoding length.

    :param bytearray: An array of bytes (a.k.a. octets).
    :return: The length in bytes of the byte array when it is encoded with
        quoted-printable for bodies.
    maxlinelen must be at least 4UEMPTYSTRINGrfc2231_params%z%s'%s'%sRemove quotes from a string.new_paramsspecialsremsgidDecode parameters list according to RFC 2231.

    params is a sequence of 2-tuples containing (param name, string value).
    Returns a date string as specified by RFC 2822, e.g.:

    Fri, 09 Nov 2001 01:08:47 -0000

    Optional timeval if given is a floating point time value as accepted by
    gmtime() and localtime(), otherwise the current time is used.

    Optional localtime is a flag that when True, interprets timeval, and
    returns a date relative to the local timezone instead of UTC, properly
    taking daylight savings time into account.

    Optional argument usegmt means that the timezone is written out as
    an ascii string, not numeric one (so "GMT" instead of "+0000"). This
    is needed for HTTP, and is only used when localtime==False.
    encoded_nameReturn True if s contains surrogate-escaped binary data.fallback_charsetrawbytesTICK[\\"]Turn a datetime into a date string as specified in RFC 2822.

    If usegmt is True, dt must be an aware datetime with an offset of zero.  In
    this case 'GMT' will be rendered instead of the normal +0000 required by
    RFC2822.  This is to support HTTP headers involving date stamps.
    formataddr^(?P<name>\w+)\*((?P<num>[0-9]+)\*?)?$%s%s%s <%s>escapesreReturns a string suitable for RFC 2822 compliant Message-ID, e.g:

    <142480216486.20800.16526388040877946887@nightshade.la.mastaler.com>

    Optional idstring if given is a string used to strengthen the
    uniqueness of the message id.  Optional domain if given provides the
    portion of the message id after the '@'.  It defaults to the locally
    defined hostname.
    altzoneDecode string according to RFC 2231make_msgidReturn a list of (REALNAME, EMAIL) for each fieldvalue.isdst%s, %02d %s %04d %02d:%02d:%02d %sEncode string according to RFC 2231.

    If neither charset nor language is given, then s is returned as-is.  If
    charset is given but not language, the string is encoded using the empty
    string for language.
    <module email.utils><%d.%d.%d%s@%s>tm_isdst[][\\()<>@,:;".]Miscellaneous utilities._format_timetuple_and_zonefieldvaluesThe inverse of parseaddr(), this takes a 2-tuple of the form
    (realname, email_address) and returns the string value suitable
    for an RFC 2822 From, To or Cc header.

    If the first element of pair is false, then the second element is
    returned unmodified.

    Optional charset if given is the character set that is used to encode
    realname in case realname is not ASCII safe.  Can be an instance of str or
    a Charset-like object which has a header_encode method.  Default is
    'utf-8'.
    getaddressesrfc2231_continuation_AddressListusegmt option requires a UTC datetime
    Parse addr into its constituent realname and email address parts.

    Return a tuple of realname and email address, unless the parse fails, in
    which case return a 2-tuple of ('', '').
    decode_rfc2231Return local time as an aware datetime object.

    If called without arguments, return current time.  Otherwise *dt*
    argument should be a datetime instance, and it is converted to the
    local time zone according to the system time zone database.  If *dt* is
    naive (that is, dt.tzinfo is None), it is assumed to be in local time.
    In this case, a positive or zero value for *isdst* causes localtime to
    presume initially that summer time (for example, Daylight Saving Time)
    is or is not (respectively) in effect for the specified time.  A
    negative value for *isdst* causes the localtime() function to attempt
    to divine whether summer time is in effect for the specified time.

    continuationsemail\utils.py\\\g<0>res_strtranslate.<locals>.<genexpr>lru_cacheReturn the subset of the list NAMES that match PAT.pat_strfnmatch.pyTranslate a shell PATTERN to a regular expression.

    There is no way to quote meta-characters.
    Filename matching with shell patterns.

fnmatch(FILENAME, PATTERN) matches according to the local convention.
fnmatchcase(FILENAME, PATTERN) always takes case in account.

The functions operate by translating the pattern into a regular
expression.  They cache the compiled regular expressions for speed.

The function translate(PATTERN) returns a regular expression
corresponding to PATTERN.  (It does not compile it.)
_compile_patternTest whether FILENAME matches PATTERN.

    Patterns are Unix shell style:

    *       matches everything
    ?       matches any single character
    [seq]   matches any character in seq
    [!seq]  matches any char not in seq

    An initial period in FILENAME is not special.
    Both FILENAME and PATTERN are first case-normalized
    if the operating system requires it.
    If you don't want this, use fnmatchcase(FILENAME, PATTERN).
    ([&~|])ISO-8859-1(?s:%s)\Z%s[%s]Test whether FILENAME matches PATTERN, including case.

    This is a version of fnmatch() which doesn't case-normalize
    its arguments.
    <module fnmatch>longoptsunique_matchhas_arggetopt(args, options[, long_options]) -> opts, args

    This function works like getopt(), except that GNU style scanning
    mode is used by default. This means that option and non-option
    arguments may be intermixed. The getopt() function stops
    processing options as soon as a non-option argument is
    encountered.

    If the first character of the option string is `+', or if the
    environment variable POSIXLY_CORRECT is set, then option
    processing stops as soon as a non-option argument is encountered.

    Parser for command line options.

This module helps scripts to parse the command line arguments in
sys.argv.  It supports the same conventions as the Unix getopt()
function (including the special meanings of arguments of the form `-'
and `--').  Long options similar to those supported by GNU software
may be used as well via an optional third argument.  This module
provides two functions and an exception:

getopt() -- Parse command line options
gnu_getopt() -- Like getopt(), but allow option and non-option arguments
to be intermixed.
GetoptError -- exception (class) raised with 'opt' attribute, which is the
option involved with the exception.
getopt.pyoption --%s not a unique prefixoptstringshortoptsoption -%s requires argumentoption -%s not recognized<module getopt>option --%s must not have an argumentdo_shortsoption --%s requires argumentoption --%s not recognizedlong_has_argsshort_has_argGetoptError.__init__prog_argsall_options_firstgetopt(args, options[, long_options]) -> opts, args

    Parses command line options and parameter list.  args is the
    argument list to be parsed, without the leading reference to the
    running program.  Typically, this means "sys.argv[1:]".  shortopts
    is the string of option letters that the script wants to
    recognize, with options that require an argument followed by a
    colon (i.e., the same format that Unix getopt() uses).  If
    specified, longopts is a list of strings with the names of the
    long options which should be supported.  The leading '--'
    characters should not be included in the option name.  Options
    which require an argument should be followed by an equal sign
    ('=').

    The return value consists of two elements: the first is a list of
    (option, value) pairs; the second is the list of program arguments
    left after the option list was stripped (this is a trailing slice
    of the first argument).  Each option-and-value pair returned has
    the option as its first element, prefixed with a hyphen (e.g.,
    '-x'), and the option argument as its second element, or an empty
    string if the option has no argument.  The options occur in the
    list in the same order in which they were found, thus allowing
    multiple occurrences.  Long and short options may be mixed.

    GetoptError.__str__do_longs_c2py_opsbase_prefixlocaledirlanguagesenvarnelangsmofileterritory_tokenizeLC_MESSAGEScodeset>4ICOMPONENT_TERRITORYdgettextGNUTranslations._get_versionsNullTranslationsLC_ALL&&lngettextunexpected token in plural form: %sNullTranslations.set_output_charsetNullTranslations.charset<module gettext>plural=plural form expression is too complex_binary_opsNullTranslations.lgettextWHITESPACESmsgid1msgid2_default_localedirNullTranslations.gettextNo translation file found for domain||_fallbackprioritynexttokif_trueif_falseldgettextNullTranslations.installmofilesgetpreferredencoding%s if %s else %smodifierVERSIONSldngettextlastgroupFile is corruptOverride this method to support alternative .mo formats._translationsbind_textdomain_codesetGNUTranslations.ngettextadd_fallback%s%d_catalogGNUTranslations._parse.<locals>.<lambda>plural-forms_localecodesets_token_patternCOMPONENT_CODESET%s.moINVALIDCatalogNullTranslations.__init__if True:
            def func(n):
                if not isinstance(n, int):
                    n = _as_int(n)
                return int(%s)
            bindtextdomainPlural value must be an integer, got %sunbalanced parenthesis in plural form_expand_langNullTranslations.lngettextNullTranslations._parseReturns a tuple of major version, minor version>IIGNUTranslations.gettextunexpected end of plural formBE_MAGIC
        (?P<WHITESPACES>[ \t]+)                    | # spaces and horizontal tabs
        (?P<NUMBER>[0-9]+\b)                       | # decimal integer
        (?P<NAME>n\b)                              | # only n is allowed
        (?P<PARENTHESIS>[()])                      |
        (?P<OPERATOR>[-*/%+?:]|[><!]=?|==|&&|\|\|) | # !, *, /, %, +, -, <, >,
                                                     # <=, >=, ==, !=, &&, ||,
                                                     # ? :
                                                     # unary and bitwise ops
                                                     # not allowed
        (?P<INVALID>\w+|.)                           # invalid token
    NullTranslations.add_fallbackNullTranslations.ngettextplural form expression is too longBad magic numberBad version number GNUTranslations.lngettextNullTranslations.output_charset©"ÚselfÚfpÚunpackÚfilenameÚcatalogÚbufÚbuflenÚmagicÚversionÚmsgcountÚ	masteridxÚtransidxÚiiÚmajor_versionÚminor_versionÚiÚmlenÚmoffÚmendÚtlenÚtoffÚtendÚmsgÚtmsgÚlastkÚb_itemÚitemÚkÚvÚpluralÚcharsetÚmsgid1Úmsgid2ÚxGets a C expression as used in PO files for plural forms and returns a
    Python function that implements an equivalent expression.
    NullTranslations.infoLE_MAGICinvalid token in plural form: %sGNUTranslations.lgettextCOMPONENT_MODIFIERgettext.py_localedirsInternationalization and localization support.

This module provides internationalization (I18N) and localization (L10N)
support for your Python programs by providing an interface to the GNU gettext
message catalog library.

I18N refers to the operation by which a program is made aware of multiple
languages.  L10N refers to the adaptation of your program, once
internationalized, to the local language and cultural habits.

<4I_current_domainglob.py_glob1Return an iterator which yields the paths matching a pathname pattern.

    The pattern may contain simple shell-style wildcards a la
    fnmatch. However, unlike fnmatch, filenames starting with a
    dot are special cases that are not matched by '*' and '?'
    patterns.

    If recursive is true, the pattern '**' will match any files and
    zero or more directories and subdirectories.
    ([*?[])Filename globbing utility.dironlydrive_rlistdir[\1]_glob0Escape all special characters.
    _glob1.<locals>.<genexpr>glob_in_dirmagic_check_iterdiriglob<module glob>_glob2Return a list of paths matching a pathname pattern.

    The pattern may contain simple shell-style wildcards a la
    fnmatch. However, unlike fnmatch, filenames starting with a
    dot are special cases that are not matched by '*' and '?'
    patterns.

    If recursive is true, the pattern '**' will match any files and
    zero or more directories and subdirectories.
    _iglob_isrecursivemagic_check_byteshas_magic_ishiddenD:\GitHub\DM_colloquium_2019\guisetItalicDefaultContextMenusetAcceptDropsaddPixmapUi_MainWindow.retranslateUisetContextMenuPolicyÐ Ð°ÑÐ¸Ð¾Ð½Ð°Ð»ÑÐ½ÑÐµ Ð´ÑÐ¾Ð±Ð¸Microsoft UighursetWindowIconUi_MainWindow.setupUigui\MainWindow.pysetUnderlinestatusbarsetFamilyÐÐ¾Ð´ÑÐ»Ð¸<module gui.MainWindow>setCentralWidgetbackground-color: #FFB037; color: whitesetStatusBarOffQIconsetToolTipcentralwidget../icon.icoQPixmapsetKerningQStatusBarNModulesWindow2.pushButton_return_clickedNModulesWindow1.n1_changedNModulesWindow1.n2_changedNModulesWindow.buttonBin_clickedÐÐ²ÐµÐ´Ð¸ÑÐµ Ð½Ð°ÑÑÑÐ°Ð»ÑÐ½Ð¾Ðµ ÑÐ¸ÑÐ»Ð¾ Ð¸ ÑÐ¸ÑÑÑ:NModulesWindow2.countNModulesWindow2.operation_changed (Ð±Ð¾Ð»ÑÑÐµ)NModulesWindow1.__clear_textNModulesWindow1.pushButton_return_clickedNModulesWindow1.operation_changedÐÐ²ÐµÐ´Ð¸ÑÐµ 2 Ð½Ð°ÑÑÑÐ°Ð»ÑÐ½ÑÑ ÑÐ¸ÑÐ»Ð° Ð¸ ÑÐ¸ÑÑÑ:NModulesWindow2.__init__NModulesWindow1.countNModulesWindow2.d_changed (ÑÐ°Ð²Ð½Ð¾)NModulesWindow2.__clear_text (Ð¼ÐµÐ½ÑÑÐµ)NModulesWindow2.n2_changed_NModulesWindow2__clear_text_NModulesWindow1__clear_textgui\NWindows.pyNModulesWindow1.__init__<module gui.NWindows>NModulesWindow.button_main_clickedNModulesWindow.__init__NModulesWindow.ButtonOther_clickedNModulesWindow2.n1_changedNModulesWindowMainUi_NModulesWindowMain.setupUi<module gui.N_modules_Window>Ui_NModulesWindowMain.retranslateUiÐÐ¾Ð´ÑÐ»Ð¸ Ngui\N_modules_Window.pyÐÐµÑÐ²Ð°Ñ ÑÐ¸ÑÑÐ° ÑÐ°ÑÑÐ½Ð¾Ð³Ð¾Ð¡ÑÐ°Ð²Ð½ÐµÐ½Ð¸ÐµÐÐÐÐÐ²ÐµÐ´Ð¸ÑÐµ 2 Ð½Ð°ÑÑÑÐ°Ð»ÑÐ½ÑÑ ÑÐ¸ÑÐ»Ð°:Ui_NModulesWindow1.retranslateUiUi_NModulesWindow1.setupUigui\N_modules_Window_1.py<module gui.N_modules_Window_1>ÐÐ¾Ð±Ð°Ð²Ð»ÐµÐ½Ð¸Ðµ 1gui\N_modules_Window_2.pyÐÑÑÐ¸ÑÐ°Ð½Ð¸Ðµ Ð¸Ð· Ð¾Ð´Ð½Ð¾Ð³Ð¾ ÑÐ¸ÑÐ»Ð° k Ð´ÑÑÐ³Ð¸Ñ ÑÐ¸ÑÐµÐ» (n1 - k*n2) Ð£Ð¼Ð½Ð¾Ð¶ÐµÐ½Ð¸Ðµ ÑÐ¸ÑÐ»Ð° Ð½Ð° ÑÐ¸ÑÑÑUi_NModulesWindow2.setupUiÐ£Ð¼Ð½Ð¾Ð¶ÐµÐ½Ð¸Ðµ Ð½Ð° 10^k<module gui.N_modules_Window_2>Ui_NModulesWindow2.retranslateUiÐÑÐ¾Ð²ÐµÑÐºÐ° Ð½Ð° 0PModulesWindow.button_main_clickedp3PModulesWindow.buttonUn_clickedPModulesWindow2.__clear_text_intforwardPModulesWindowInput.finish_clickedback_clickedPModulesWindow1.input_p2_clickednump_PModulesWindow1__clear_text_int_PModulesWindow3__clear_textPModulesWindow1.input_p1_clickedÐÐ²ÐµÐ´Ð¸ÑÐµ ÐºÐ¾ÑÑÑÐ¸ÑÐ¸ÐµÐ½Ñ PModulesWindowInput.back_clickednumqPModulesWindowInput.qn_changednump1input_p_winPModulesWindow1.p_inputedPModulesWindow1.operation_changedPModulesWindow2.pushButton_return_clickedPModulesWindow2.p_inputedPModulesWindow1.pushButton_return_clickedPModulesWindow3.pushButton_return_clickedPModulesWindow3.operation_changed_PModulesWindowInput__clear_text_PModulesWindow2__clear_text_intPModulesWindowInput.forward_clickedPModulesWindow3.input_p_clickedPModulesWindow2.input_p_clickedPModulesWindowInput.__clear_textPModulesWindow2.operation_changedPModulesWindow3.qn_changedPModulesWindow3.countPModulesWindow.ButtonOther_clickedPModulesWindow3.qm_changedgui\PWindows.pyPModulesWindow3.p_inputedPModulesWindow1.__clear_text_intPModulesWindow2.countPModulesWindow1.countPModulesWindowInput.__init__PModulesWindow3.__clear_text_intPModulesWindowInput.__clear_text_int_PModulesWindowInput__clear_text_intPModulesWindow3.d_changedPModulesWindowInput.clearPModulesWindow2.__init__PModulesWindowInput.qm_changednump2PModulesWindow.buttonBin_clickedPModulesWindow.__init___PModulesWindow3__clear_text_intPModulesWindow3.__init__PModulesWindow1.__init__<module gui.PWindows>Ui_PModulesWindowMain.setupUigui\P_modules_Window.pycolor: #0D66FF;Ui_PModulesWindowMain.retranslateUi<module gui.P_modules_Window>ÐÐ¾Ð´ÑÐ»Ð¸ Pgui\P_modules_Window_1.py<module gui.P_modules_Window_1>Ui_PModulesWindow1.retranslateUiUi_PModulesWindow1.setupUiÐÐ²ÐµÐ´Ð¸ÑÐµ 2 Ð¼Ð½Ð¾Ð³Ð¾ÑÐ»ÐµÐ½Ð°:color: #0D66FF; background-color: white;scrollAreaScrollBarAsNeededÐ¡ÑÐµÐ¿ÐµÐ½Ñ Ð¼Ð½Ð¾Ð³Ð¾ÑÐ»ÐµÐ½Ð°scrollAreaWidgetContentsÐ¡ÑÐ°ÑÑÐ¸Ð¹ ÐºÐ¾ÑÑÑÐ¸ÑÐ¸ÐµÐ½Ñ Ð¼Ð½Ð¾Ð³Ð¾ÑÐ»ÐµÐ½Ð°setMinimumSizeÐÐ²ÐµÐ´Ð¸ÑÐµ Ð¼Ð½Ð¾Ð³Ð¾ÑÐ»ÐµÐ½:setVerticalScrollBarPolicyÐÑÐµÐ¾Ð±ÑÐ°Ð·Ð¾Ð²Ð°Ð½Ð¸Ðµ Ð¼Ð½Ð¾Ð³Ð¾ÑÐ»ÐµÐ½Ð° â ÐºÑÐ°ÑÐ½ÑÐµ ÐºÐ¾ÑÐ½Ð¸ Ð² Ð¿ÑÐ¾ÑÑÑÐµaddWidgetÐÐÐ Ð·Ð½Ð°Ð¼ÐµÐ½Ð°ÑÐµÐ»ÐµÐ¹ ÐºÐ¾ÑÑÑÐ¸ÑÐ¸ÐµÐ½ÑÐ¾Ð² Ð¸ ÐÐÐ ÑÐ¸ÑÐ»Ð¸ÑÐµÐ»ÐµÐ¹setWidgetsetWidgetResizablesetMaximumSizePreferredQScrollAreaSunken<module gui.P_modules_Window_2>Ui_PModulesWindow2.retranslateUigui\P_modules_Window_2.pyScrollBarAlwaysOffÐÑÐ¾Ð¸Ð·Ð²Ð¾Ð´Ð½Ð°Ñ Ð¼Ð½Ð¾Ð³Ð¾ÑÐ»ÐµÐ½Ð°Ui_PModulesWindow2.setupUiQHBoxLayouthorizontalLayoutQSizesetHorizontalScrollBarPolicyÐÐ²ÐµÐ´Ð¸ÑÐµ Ð¼Ð½Ð¾Ð³Ð¾ÑÐ»ÐµÐ½ Ð¸ ÑÐ¸ÑÐ»Ð¾:Ð£Ð¼Ð½Ð¾Ð¶ÐµÐ½Ð¸Ðµ Ð½Ð° x^kÐ£Ð¼Ð½Ð¾Ð¶ÐµÐ½Ð¸Ðµ Ð½Ð° ÑÐ¸ÑÐ»Ð¾gui\P_modules_Window_3.pyUi_PModulesWindow3.retranslateUiUi_PModulesWindow3.setupUi<module gui.P_modules_Window_3>ÐÐ°Ð»ÐµÐµPolinomial_InputUi_Polinomial_Input.setupUiÐÐ°Ð·Ð°Ð´ÐÐ°ÐºÐ¾Ð½ÑÐ¸ÑÑÐÐ²Ð¾Ð´ Ð¼Ð½Ð¾Ð³Ð¾ÑÐ»ÐµÐ½Ð°Ð¢ÐµÐºÑÑÐ¸Ð¹ Ð¼Ð½Ð¾Ð³Ð¾ÑÐ»ÐµÐ½:<module gui.P_modules_Window_input>gui\P_modules_Window_input.pyUi_Polinomial_Input.retranslateUiq2n_changedQModulesWindow2.countq1mQModulesWindow1.__clear_textq2mQModulesWindow2.__clear_textQModulesWindow.buttonBin_clickedQModulesWindow1.q1n_changed_QModulesWindow1__clear_textQModulesWindow1.__init__QModulesWindow2.pushButton_return_clickedQModulesWindow2.__init__QModulesWindow1.operation_changedQModulesWindow1.__clear_text_intQModulesWindow1.q2n_changedQModulesWindow.__init__QModulesWindow.ButtonOther_clickedQModulesWindow1.q1m_changed<module gui.QWindows>_QModulesWindow2__clear_textQModulesWindow2.operation_changed_QModulesWindow2__clear_text_intQModulesWindow2.qm_changedQModulesWindow2.qn_changedq2m_changedQModulesWindow1.q2m_changedQModulesWindow1.pushButton_return_clicked_QModulesWindow1__clear_text_intQModulesWindow1.countgui\QWindows.pyQModulesWindow2.__clear_text_intQModulesWindow.button_main_clickedQModulesWindowMainbackground-color: #E80C94; color: whitegui\Q_modules_Window.pyUi_QModulesWindowMain.setupUiÐ Ð°ÑÐ¸Ð¾Ð½Ð°Ð»ÑÐ½ÑÐµ ÑÐ¸ÑÐ»Ð°ÐÐ¾Ð´ÑÐ»Ð¸ QUi_QModulesWindowMain.retranslateUi<module gui.Q_modules_Window><module gui.Q_modules_Window_1>ÐÐ²ÐµÐ´Ð¸ÑÐµ 2 ÑÐ°ÑÐ¸Ð¾Ð½Ð°Ð»ÑÐ½ÑÑ ÑÐ¸ÑÐ»Ð°:gui\Q_modules_Window_1.pyUi_QModulesWindow1.setupUiÐÐµÐ»ÐµÐ½Ð¸ÐµUi_QModulesWindow1.retranslateUiÐ¡Ð¾ÐºÑÐ°ÑÐµÐ½Ð¸ÐµÐÐ²ÐµÐ´Ð¸ÑÐµ ÑÐ°ÑÐ¸Ð¾Ð½Ð°Ð»ÑÐ½Ð¾Ðµ ÑÐ¸ÑÐ»Ð¾:Ui_QModulesWindow2.retranslateUiÐÑÐ¾Ð²ÐµÑÐºÐ° Ð½Ð° ÑÐµÐ»Ð¾Ðµ<module gui.Q_modules_Window_2>ÐÑÐµÐ¾Ð±ÑÐ°Ð·Ð¾Ð²Ð°Ð½Ð¸Ðµ Ð² ÑÐµÐ»Ð¾ÐµUi_QModulesWindow2.setupUigui\Q_modules_Window_2.pyZModulesWindow2.__init__ZModulesWindow1.countZModulesWindow2.__clear_textZModulesWindow1.n1_changed_ZModulesWindow2__clear_textZModulesWindow1.pushButton_return_clicked (Ð±Ð¾Ð»ÑÑÐµ Ð½ÑÐ»Ñ)ZModulesWindow1.operation_changed<module gui.ZWindows>ZModulesWindow2.pushButton_return_clickedZModulesWindow.__init__ZModulesWindow2.countZModulesWindow1.__clear_textZModulesWindow.button_main_clickedZModulesWindow2.operation_changedZModulesWindow1.n2_changedgui\ZWindows.pyZModulesWindow1.__init__ (Ð¼ÐµÐ½ÑÑÐµ Ð½ÑÐ»Ñ)ZModulesWindow2.n_changedZModulesWindow.ButtonOther_clicked (ÑÐ°Ð²Ð½Ð¾Ðµ Ð½ÑÐ»Ñ)ZModulesWindow.buttonBin_clicked_ZModulesWindow1__clear_textZModulesWindowMainUi_ZModulesWindowMain.retranslateUicolor: #2EE800<module gui.Z_modules_Window>gui\Z_modules_Window.pyÐÐ¾Ð´ÑÐ»Ð¸ ZUi_ZModulesWindowMain.setupUiUi_ZModulesWindow1.setupUigui\Z_modules_Window_1.pyUi_ZModulesWindow1.retranslateUiÐÑÐ½Ð¾Ð²Ð½ÑÐµ Ð±Ð¸Ð½Ð°ÑÐ½ÑÐ¹ Ð¾Ð¿ÐµÑÐ°ÑÐ¸Ð¸<module gui.Z_modules_Window_1>ÐÐ²ÐµÐ´Ð¸ÑÐµ 2 ÑÐµÐ»ÑÑ ÑÐ¸ÑÐ»Ð°:Ð¡ÑÐ°Ð²Ð½ÐµÐ½Ð¸Ðµ Ñ Ð½ÑÐ»ÐµÐ¼Ui_ZModulesWindow2.setupUi<module gui.Z_modules_Window_2>ÐÐ±ÑÐ¾Ð»ÑÑÐ½Ð°Ñ Ð²ÐµÐ»Ð¸ÑÐ¸Ð½Ð°Ð£Ð¼Ð½Ð¾Ð¶ÐµÐ½Ð¸Ðµ Ð½Ð° (-1)ÐÐ²ÐµÐ´Ð¸ÑÐµ ÑÐµÐ»Ð¾Ðµ ÑÐ¸ÑÐ»Ð¾:gui\Z_modules_Window_2.pyUi_ZModulesWindow2.retranslateUisetInputMask_PaddedFile.__init___GzipReader._add_read_dataNot a gzipped file (%r)wbitsGzipFile.peek_GzipReader.__init___GzipReader.read_write_gzip_header_rewindgzip.pyGzipFile.writableREADFTEXTOpen a gzip-compressed file in binary or text mode.

    The filename argument can be an actual filename (a str or bytes object), or
    an existing file object to read from or write to.

    The mode argument can be "r", "rb", "w", "wb", "x", "xb", "a" or "ab" for
    binary mode, or "rt", "wt", "xt" or "at" for text mode. The default mode is
    "rb", and the default compresslevel is 9.

    For binary mode, this function is equivalent to the GzipFile constructor:
    GzipFile(filename, mode, compresslevel). In this case, the encoding, errors
    and newline arguments must not be provided.

    For text mode, a GzipFile object is created, and wrapped in an
    io.TextIOWrapper instance with the specified encoding, error handling
    behavior, and line ending(s).

    .gzgz_modewrite() on read-only GzipFile object_read_gzip_headerIncorrect length of data produced_init_readInvoke the underlying file object's fileno() method.

        This will raise AttributeError if the underlying file object
        doesn't support fileno().
        zlib_mode_read_exact_PaddedFile.prependGzipFile.close_GzipReader._init_readFHCRC_init_writeWRITEReturn the uncompressed stream file position indicator to the
        beginning of the fileZ_SYNC_FLUSHfilename doesn't end in .gz:Unknown compression methodGzipFile.flushuse the name attributeDecompress a gzip compressed string in one shot.
    Return the decompressed string.
    <module gzip>Last modification time read from stream, or NoneGzipFile.write_decomp_factoryGzipFile.seekGzipFile.__init__filename must be a str or bytes object, or a fileGzipFile.read1<BBIxxMinimal read-only file object that prepends a string to the contents
    of an actual file. Shouldn't be used outside of gzip.py, as it lacks
    essential functionality.Constructor for the GzipFile class.

        At least one of fileobj and filename must be given a
        non-trivial value.

        The new class instance is based on fileobj, which can be a regular
        file, an io.BytesIO object, or any other object which simulates a file.
        It defaults to None, in which case filename is opened to provide
        a file object.

        When fileobj is not None, the filename argument is only used to be
        included in the gzip file header, which may include the original
        filename of the uncompressed file.  It defaults to the filename of
        fileobj, if discernible; otherwise, it defaults to the empty string,
        and in this case the original filename is not included in the header.

        The mode argument can be any of 'r', 'rb', 'a', 'ab', 'w', 'wb', 'x', or
        'xb' depending on whether the file will be read or written.  The default
        is the mode of fileobj if discernible; otherwise, the default is 'rb'.
        A mode of 'r' is equivalent to one of 'rb', and similarly for 'w' and
        'wb', 'a' and 'ab', and 'x' and 'xb'.

        The compresslevel argument is an integer from 0 to 9 controlling the
        level of compression; 1 is fastest and produces the least compression,
        and 9 is slowest and produces the most compression. 0 is no compression
        at all. The default is 9.

        The mtime argument is an optional numeric timestamp to be written
        to the last modification time field in the stream when compressing.
        If omitted or None, the current time is used.

        GzipFile.fileno<gzip isizemyfileobjFCOMMENTRead exactly *n* bytes from `self._fp`

        This method is required because self._fp may be unbuffered,
        i.e. return short reads.
        GzipFile.mtimeImplements BufferedIOBase.read1()

        Reads up to a buffer's worth of data is size is negative.GzipFile.readlineThe GzipFile class simulates most of the methods of a file object with
    the exception of the truncate() method.

    This class only supports opening files in binary mode. If you need to open a
    compressed file in text mode, use the gzip.open() function.

    writebufCompressed file ended before the end-of-stream marker was reachedCRC check failed %s != %sextra_len_write_mtimeGzipFile.rewindFNAME_GzipReader._rewindpeek() on write-only GzipFile objectwrite() on closed GzipFile objectSeek from end not supportedGzipFile.readable_PaddedFile.seek_decomp_argsFunctions that read and write gzipped files.

The user of the file doesn't have to worry about the compression,
but random access is not allowed._GzipReader._read_exact_GzipReader._read_eofread() on write-only GzipFile object_PaddedFile.readreadall_PaddedFile.seekableGzipFile._write_gzip_headerCompress data in one shot and return the compressed string.
    Optional argument is the compression level, in range of 0-9.
    _stream_sizeGzipFile.__repr__write32u_GzipReader._read_gzip_headerGzipFile.closedGzipFile.seekable_last_mtimeGzipFile.filename_new_memberCan't rewind in write moderead1() on write-only GzipFile objectFEXTRAGzipFile._init_writeNegative seek in write modeSHA512SHA384sha384sha3_224outer__always_supportedSHA256sha256SHA224sha224digest_size_sha256__get_hash__hash_newsha3_512pbkdf2_hmachashlib.pyscryptnew(name, data=b'', **kwargs) - Return a new hashing object using the
    named algorithm; optionally initialized with data (which must be
    a bytes-like object).
    md5sha1blake2bblake2ssha3_256sha3_384shake_128shake_256MD5__get_builtin_constructordkey__builtin_constructor_cache<module hashlib>new(name, data=b'') - Return a new hashing object using the named algorithm;
    optionally initialized with data (which must be a bytes-like object).
    code for hash %s was not found.algorithms_availableblock_size_blake2hash_name_sha1_md5_sha3__py_newsaltSHA1hashlib module - A common interface to many hash functions.

new(name, data=b'', **kwargs) - returns a new hash object implementing the
                                given hash function; initializing the hash
                                using the given binary data.

Named constructor functions are also available, these are faster
than using new(name):

md5(), sha1(), sha224(), sha256(), sha384(), sha512(), blake2b(), blake2s(),
sha3_224, sha3_256, sha3_384, sha3_512, shake_128, and shake_256.

More algorithms may be available on your platform but the above are guaranteed
to exist.  See the algorithms_guaranteed and algorithms_available attributes
to find out what algorithm names can be passed to new().

NOTE: If you want the adler32 or crc32 hash functions they are available in
the zlib module.

Choose your hash function wisely.  Some have known collision weaknesses.
sha384 and sha512 will be slow on 32 bit platforms.

Hash objects have these methods:
 - update(data): Update the hash object with the bytes in data. Repeated calls
                 are equivalent to a single call with the concatenation of all
                 the arguments.
 - digest():     Return the digest of the bytes passed to the update() method
                 so far as a bytes object.
 - hexdigest():  Like digest() except the digest is returned as a string
                 of double length, containing only hexadecimal digits.
 - copy():       Return a copy (clone) of the hash object. This can be used to
                 efficiently compute the digests of datas that share a common
                 initial substring.

For example, to obtain the digest of the byte string 'Nobody inspects the
spammish repetition':

    >>> import hashlib
    >>> m = hashlib.md5()
    >>> m.update(b"Nobody inspects")
    >>> m.update(b" the spammish repetition")
    >>> m.digest()
    b'\xbbd\x9c\x83\xdd\x1e\xa5\xc9\xd9\xde\xc9\xa1\x8d\xf0\xff\xe9'

More condensed:

    >>> hashlib.sha224(b"Nobody inspects the spammish repetition").hexdigest()
    'a4337bc45a8fc544c03f52dc550cd6e1e87021bc896588bd79e901e2'

unsupported hash type __get_openssl_constructor_trans_5Citerations__func_namedklenpbkdf2_hmac.<locals>.prfrkeyocpy_hashlibopenssl_md_meth_namesPassword based key derivation function 2 (PKCS #5 v2.0)

        This Python implementations based on the hmac module about as fast
        as OpenSSL's PKCS5_PBKDF2_HMAC for short passwords and much faster
        for long passwords.
        icpy_trans_36_invalid_codepoints_replace_charref&#x27;&(#[0-9]+;?|#[xX][0-9a-fA-F]+;?|[^\t\n\f <&#;]{1,32};?)
    Convert all named and numeric character references (e.g. &gt;, &#62;,
    &x3e;) in the string s to the corresponding unicode characters.
    This function uses the rules defined by the HTML 5 standard
    for both valid and invalid character references, and the list of
    HTML 5 named character references defined in html.entities.html5.
    ûé    u   ï¿½é   úé   u   â¬é   õ   Âé   u   âé   u   Æé   u   âé   u   â¦é   u   â é   u   â¡é   u   Ëé   u   â°é   u   Å é   u   â¹é   u   Åé   õ   Âé   u   Å½é   õ   Âé   õ   Âé   u   âé   u   âé   u   âé   u   âé   u   â¢é   u   âé   u   âé   u   Ëé   u   â¢é   u   Å¡é   u   âºé   u   Åé   õ   Âé   u   Å¾é   u   Å¸0_html5_invalid_charrefs
General functions for HTML manipulation.
NUITKA_PACKAGE_htmlunescape
    Replace special characters "&", "<" and ">" to HTML-safe sequences.
    If the optional flag quote is true (the default), the quotation mark
    characters, both double quote (") and single quote (') characters are also
    translated.
    <module html>html\__init__.py¼~   é   é   é   é   é   é   é   é   é   é   é   é   é   é   é   é   é   é   é   é   é   é   é   é   é   é   é   éÿÿ éÿÿ éþÿ	 éþÿ éÿÿ	 éþÿ é   é   é   é   é   é   é   é   é   é   é   é   é   é   é   é   é   é   é   é   é   é   é   é   é   é   é   é   é   é   é   é   é   éÿÿ éÿÿ
 éþÿ éþÿ
 éÿÿ éÿÿ éþÿ éÿÿ éÿÿ éþÿ éÿÿ éÿÿ éþÿ éÿÿ éÿÿ éÿÿ éþÿ éÐý  éÑý  éÒý  éÓý  éÔý  éÕý  éÖý  é×ý  éØý  éÙý  éÚý  éÛý  éÜý  éÝý  éÞý  éßý  éàý  éáý  éâý  éãý  éäý  éåý  éæý  éçý  éèý  ééý  éêý  éëý  éìý  éíý  éîý  éïý  éÿÿ éþÿ éþÿ éþÿ éþÿ éþÿ éÿÿ éþÿ éþÿ éþÿ  éÿÿ  ûzAEligéÆ   zAacuteéÁ   zAcircéÂ   zAgraveéÀ   zAlphai  zAringéÅ   zAtildeéÃ   zAumléÄ   zBetai  zCcediléÇ   zChii§  zDaggeri!   zDeltai  zETHéÐ   zEacuteéÉ   zEcircéÊ   zEgraveéÈ   zEpsiloni  zEtai  zEumléË   zGammai  zIacuteéÍ   zIcircéÎ   zIgraveéÌ   zIotai  zIumléÏ   zKappai  zLambdai  zMui  zNtildeéÑ   zNui  zOEligiR  zOacuteéÓ   zOcircéÔ   zOgraveéÒ   zOmegai©  zOmicroni  zOslashéØ   zOtildeéÕ   zOumléÖ   zPhii¦  zPii   zPrimei3   zPsii¨  zRhoi¡  zScaroni`  zSigmai£  zTHORNéÞ   zTaui¤  zThetai  zUacuteéÚ   zUcircéÛ   zUgraveéÙ   zUpsiloni¥  zUumléÜ   zXii  zYacuteéÝ   zYumlix  zZetai  zaacuteéá   zacircéâ   zacuteé´   zaeligéæ   zagraveéà   zalefsymi5!  zalphai±  zampé&   zandi'"  zangi "  zaringéå   zasympiH"  zatildeéã   zaumléä   zbdquoi   zbetai²  zbrvbaré¦   zbulli"   zcapi)"  zccediléç   zcedilé¸   zcenté¢   zchiiÇ  zcirciÆ  zclubsic&  zcongiE"  zcopyé©   zcrarriµ!  zcupi*"  zcurrené¤   zdArriÓ!  zdaggeri    zdarri!  zdegé°   zdeltai´  zdiamsif&  zdivideé÷   zeacuteéé   zecircéê   zegraveéè   zemptyi"  zemspi   zenspi   zepsiloniµ  zequivia"  zetai·  zethéð   zeumléë   zeuroi¬   zexisti"  zfnofi  zforalli "  zfrac12é½   zfrac14é¼   zfrac34é¾   zfrasliD   zgammai³  zgeie"  zgté>   zhArriÔ!  zharri!  zheartsie&  zhellipi&   ziacuteéí   zicircéî   ziexclé¡   zigraveéì   zimagei!  zinfini"  zinti+"  ziotai¹  ziquesté¿   zisini"  ziumléï   zkappaiº  zlArriÐ!  zlambdai»  zlangi)#  zlaquoé«   zlarri!  zlceili#  zldquoi   zleid"  zlfloori
#  zlowasti"  zloziÊ%  zlrmi   zlsaquoi9   zlsquoi   zlté<   zmacré¯   zmdashi   zmicroéµ   zmiddoté·   zminusi"  zmui¼  znablai"  znbspé    zndashi   znei`"  znii"  znoté¬   znotini	"  znsubi"  zntildeéñ   znui½  zoacuteéó   zocircéô   zoeligiS  zograveéò   zolinei>   zomegaiÉ  zomicroni¿  zoplusi"  zori("  zordféª   zordméº   zoslashéø   zotildeéõ   zotimesi"  zoumléö   zparaé¶   zparti"  zpermili0   zperpi¥"  zphiiÆ  zpiiÀ  zpiviÖ  zplusmné±   zpoundé£   zprimei2   zprodi"  zpropi"  zpsiiÈ  zquoté"   zrArriÒ!  zradici"  zrangi*#  zraquoé»   zrarri!  zrceili	#  zrdquoi   zreali!  zregé®   zrfloori#  zrhoiÁ  zrlmi   zrsaquoi:   zrsquoi   zsbquoi   zscaronia  zsdotiÅ"  zsecté§   zshyé­   zsigmaiÃ  zsigmafiÂ  zsimi<"  zspadesi`&  zsubi"  zsubei"  zsumi"  zsupi"  zsup1é¹   zsup2é²   zsup3é³   zsupei"  zszligéß   ztauiÄ  zthere4i4"  zthetai¸  zthetasymiÑ  zthinspi	   zthornéþ   ztildeiÜ  ztimesé×   ztradei"!  zuArriÑ!  zuacuteéú   zuarri!  zucircéû   zugraveéù   zumlé¨   zupsihiÒ  zupsiloniÅ  zuumléü   zweierpi!  zxii¾  zyacuteéý   zyené¥   zyumléÿ   zzetai¶  zzwji   zzwnji   0HTML character entity references.codepoint2nameûzAacuteõ   Ãzaacuteõ   Ã¡zAacute;r   zaacute;r   zAbreve;u   Äzabreve;u   Äzac;u   â¾zacd;u   â¿zacE;u   â¾Ì³zAcircõ   Ãzacircõ   Ã¢zAcirc;r   zacirc;r   zacuteõ   Â´zacute;r   zAcy;u   Ðzacy;u   Ð°zAEligõ   Ãzaeligõ   Ã¦zAElig;r   zaelig;r   zaf;u   â¡zAfr;u   ðzafr;u   ðzAgraveõ   Ãzagraveõ   Ã zAgrave;r   zagrave;r	   zalefsym;u   âµzaleph;u   âµzAlpha;u   Îzalpha;u   Î±zAmacr;u   Äzamacr;u   Äzamalg;u   â¨¿zAMPú&zampr
   zAMP;r
   zamp;r
   zAnd;u   â©zand;u   â§zandand;u   â©zandd;u   â©z	andslope;u   â©zandv;u   â©zang;u   â zange;u   â¦¤zangle;u   â zangmsd;u   â¡z	angmsdaa;u   â¦¨z	angmsdab;u   â¦©z	angmsdac;u   â¦ªz	angmsdad;u   â¦«z	angmsdae;u   â¦¬z	angmsdaf;u   â¦­z	angmsdag;u   â¦®z	angmsdah;u   â¦¯zangrt;u   âzangrtvb;u   â¾z	angrtvbd;u   â¦zangsph;u   â¢zangst;õ   Ãzangzarr;u   â¼zAogon;u   Äzaogon;u   ÄzAopf;u   ð¸zaopf;u   ðzap;u   âzapacir;u   â©¯zapE;u   â©°zape;u   âzapid;u   âzapos;ú'zApplyFunction;u   â¡zapprox;u   âz	approxeq;u   âzAringr   zaringõ   Ã¥zAring;r   zaring;r   zAscr;u   ðzascr;u   ð¶zAssign;u   âzast;Ú*zasymp;u   âzasympeq;u   âzAtildeõ   Ãzatildeõ   Ã£zAtilde;r   zatilde;r   zAumlõ   Ãzaumlõ   Ã¤zAuml;r   zauml;r   z	awconint;u   â³zawint;u   â¨z	backcong;u   âzbackepsilon;u   Ï¶z
backprime;u   âµzbacksim;u   â½z
backsimeq;u   âz
Backslash;u   âzBarv;u   â«§zbarvee;u   â½zBarwed;u   âzbarwed;u   âz	barwedge;u   âzbbrk;u   âµz	bbrktbrk;u   â¶zbcong;u   âzBcy;u   Ðzbcy;u   Ð±zbdquo;u   âzbecaus;u   âµzBecause;u   âµzbecause;u   âµzbemptyv;u   â¦°zbepsi;u   Ï¶zbernou;u   â¬zBernoullis;u   â¬zBeta;u   Îzbeta;u   Î²zbeth;u   â¶zbetween;u   â¬zBfr;u   ðzbfr;u   ðzbigcap;u   âzbigcirc;u   â¯zbigcup;u   âzbigodot;u   â¨z	bigoplus;u   â¨z
bigotimes;u   â¨z	bigsqcup;u   â¨zbigstar;u   âzbigtriangledown;u   â½zbigtriangleup;u   â³z	biguplus;u   â¨zbigvee;u   âz	bigwedge;u   âzbkarow;u   â¤zblacklozenge;u   â§«zblacksquare;u   âªzblacktriangle;u   â´zblacktriangledown;u   â¾zblacktriangleleft;u   âzblacktriangleright;u   â¸zblank;u   â£zblk12;u   âzblk14;u   âzblk34;u   âzblock;u   âzbne;u   =â¥zbnequiv;u   â¡â¥zbNot;u   â«­zbnot;u   âzBopf;u   ð¹zbopf;u   ðzbot;u   â¥zbottom;u   â¥zbowtie;u   âzboxbox;u   â§zboxDL;u   âzboxDl;u   âzboxdL;u   âzboxdl;u   âzboxDR;u   âzboxDr;u   âzboxdR;u   âzboxdr;u   âzboxH;u   âzboxh;u   âzboxHD;u   â¦zboxHd;u   â¤zboxhD;u   â¥zboxhd;u   â¬zboxHU;u   â©zboxHu;u   â§zboxhU;u   â¨zboxhu;u   â´z	boxminus;u   âzboxplus;u   âz	boxtimes;u   â zboxUL;u   âzboxUl;u   âzboxuL;u   âzboxul;u   âzboxUR;u   âzboxUr;u   âzboxuR;u   âzboxur;u   âzboxV;u   âzboxv;u   âzboxVH;u   â¬zboxVh;u   â«zboxvH;u   âªzboxvh;u   â¼zboxVL;u   â£zboxVl;u   â¢zboxvL;u   â¡zboxvl;u   â¤zboxVR;u   â zboxVr;u   âzboxvR;u   âzboxvr;u   âzbprime;u   âµzBreve;u   Ëzbreve;u   Ëzbrvbarõ   Â¦zbrvbar;r   zBscr;u   â¬zbscr;u   ð·zbsemi;u   âzbsim;u   â½zbsime;u   âzbsol;ú\zbsolb;u   â§z	bsolhsub;u   âzbull;u   â¢zbullet;u   â¢zbump;u   âzbumpE;u   âª®zbumpe;u   âzBumpeq;u   âzbumpeq;u   âzCacute;u   Äzcacute;u   ÄzCap;u   âzcap;u   â©zcapand;u   â©z	capbrcup;u   â©zcapcap;u   â©zcapcup;u   â©zcapdot;u   â©zCapitalDifferentialD;u   âzcaps;u   â©ï¸zcaret;u   âzcaron;u   ËzCayleys;u   â­zccaps;u   â©zCcaron;u   Äzccaron;u   ÄzCcedilõ   Ãzccedilõ   Ã§zCcedil;r   zccedil;r   zCcirc;u   Äzccirc;u   ÄzCconint;u   â°zccups;u   â©zccupssm;u   â©zCdot;u   Äzcdot;u   Äzcedilõ   Â¸zcedil;r   zCedilla;r   zcemptyv;u   â¦²zcentõ   Â¢zcent;r   z
CenterDot;õ   Â·z
centerdot;r   zCfr;u   â­zcfr;u   ð zCHcy;u   Ð§zchcy;u   Ñzcheck;u   âz
checkmark;u   âzChi;u   Î§zchi;u   Ïzcir;u   âzcirc;u   Ëzcirceq;u   âzcirclearrowleft;u   âºzcirclearrowright;u   â»zcircledast;u   âzcircledcirc;u   âzcircleddash;u   âz
CircleDot;u   âz	circledR;õ   Â®z	circledS;u   âzCircleMinus;u   âzCirclePlus;u   âzCircleTimes;u   âzcirE;u   â§zcire;u   âz	cirfnint;u   â¨zcirmid;u   â«¯zcirscir;u   â§zClockwiseContourIntegral;u   â²zCloseCurlyDoubleQuote;u   âzCloseCurlyQuote;u   âzclubs;u   â£z	clubsuit;u   â£zColon;u   â·zcolon;ú:zColone;u   â©´zcolone;u   âzcoloneq;u   âzcomma;ú,zcommat;ú@zcomp;u   âzcompfn;u   âzcomplement;u   âz
complexes;u   âzcong;u   âzcongdot;u   â©­z
Congruent;u   â¡zConint;u   â¯zconint;u   â®zContourIntegral;u   â®zCopf;u   âzcopf;u   ðzcoprod;u   âz
Coproduct;u   âzCOPYõ   Â©zcopyr   zCOPY;r   zcopy;r   zcopysr;u   âz CounterClockwiseContourIntegral;u   â³zcrarr;u   âµzCross;u   â¨¯zcross;u   âzCscr;u   ðzcscr;u   ð¸zcsub;u   â«zcsube;u   â«zcsup;u   â«zcsupe;u   â«zctdot;u   â¯zcudarrl;u   â¤¸zcudarrr;u   â¤µzcuepr;u   âzcuesc;u   âzcularr;u   â¶zcularrp;u   â¤½zCup;u   âzcup;u   âªz	cupbrcap;u   â©zCupCap;u   âzcupcap;u   â©zcupcup;u   â©zcupdot;u   âzcupor;u   â©zcups;u   âªï¸zcurarr;u   â·zcurarrm;u   â¤¼zcurlyeqprec;u   âzcurlyeqsucc;u   âz	curlyvee;u   âzcurlywedge;u   âzcurrenõ   Â¤zcurren;r   zcurvearrowleft;u   â¶zcurvearrowright;u   â·zcuvee;u   âzcuwed;u   âz	cwconint;u   â²zcwint;u   â±zcylcty;u   â­zDagger;u   â¡zdagger;u   â zdaleth;u   â¸zDarr;u   â¡zdArr;u   âzdarr;u   âzdash;u   âzDashv;u   â«¤zdashv;u   â£zdbkarow;u   â¤zdblac;u   ËzDcaron;u   Äzdcaron;u   ÄzDcy;u   Ðzdcy;u   Ð´zDD;u   âzdd;u   âzddagger;u   â¡zddarr;u   âz	DDotrahd;u   â¤zddotseq;u   â©·zdegõ   Â°zdeg;r    zDel;u   âzDelta;u   Îzdelta;u   Î´zdemptyv;u   â¦±zdfisht;u   â¥¿zDfr;u   ðzdfr;u   ð¡zdHar;u   â¥¥zdharl;u   âzdharr;u   âzDiacriticalAcute;r   zDiacriticalDot;u   ËzDiacriticalDoubleAcute;u   ËzDiacriticalGrave;ú`zDiacriticalTilde;u   Ëzdiam;u   âzDiamond;u   âzdiamond;u   âzdiamondsuit;u   â¦zdiams;u   â¦zdie;õ   Â¨zDifferentialD;u   âzdigamma;u   Ïzdisin;u   â²zdiv;õ   Ã·zdivider#   zdivide;r#   zdivideontimes;u   âzdivonx;u   âzDJcy;u   Ðzdjcy;u   Ñzdlcorn;u   âzdlcrop;u   âzdollar;ú$zDopf;u   ð»zdopf;u   ðzDot;r"   zdot;u   ËzDotDot;u   âzdoteq;u   âz	doteqdot;u   âz	DotEqual;u   âz	dotminus;u   â¸zdotplus;u   âz
dotsquare;u   â¡zdoublebarwedge;u   âzDoubleContourIntegral;u   â¯z
DoubleDot;r"   zDoubleDownArrow;u   âzDoubleLeftArrow;u   âzDoubleLeftRightArrow;u   âzDoubleLeftTee;u   â«¤zDoubleLongLeftArrow;u   â¸zDoubleLongLeftRightArrow;u   âºzDoubleLongRightArrow;u   â¹zDoubleRightArrow;u   âzDoubleRightTee;u   â¨zDoubleUpArrow;u   âzDoubleUpDownArrow;u   âzDoubleVerticalBar;u   â¥z
DownArrow;u   âz
Downarrow;u   âz
downarrow;u   âzDownArrowBar;u   â¤zDownArrowUpArrow;u   âµz
DownBreve;u   Ìzdowndownarrows;u   âzdownharpoonleft;u   âzdownharpoonright;u   âzDownLeftRightVector;u   â¥zDownLeftTeeVector;u   â¥zDownLeftVector;u   â½zDownLeftVectorBar;u   â¥zDownRightTeeVector;u   â¥zDownRightVector;u   âzDownRightVectorBar;u   â¥zDownTee;u   â¤zDownTeeArrow;u   â§z	drbkarow;u   â¤zdrcorn;u   âzdrcrop;u   âzDscr;u   ðzdscr;u   ð¹zDScy;u   Ðzdscy;u   Ñzdsol;u   â§¶zDstrok;u   Äzdstrok;u   Äzdtdot;u   â±zdtri;u   â¿zdtrif;u   â¾zduarr;u   âµzduhar;u   â¥¯zdwangle;u   â¦¦zDZcy;u   Ðzdzcy;u   Ñz	dzigrarr;u   â¿zEacuteõ   Ãzeacuteõ   Ã©zEacute;r%   zeacute;r&   zeaster;u   â©®zEcaron;u   Äzecaron;u   Äzecir;u   âzEcircõ   Ãzecircõ   ÃªzEcirc;r'   zecirc;r(   zecolon;u   âzEcy;u   Ð­zecy;u   ÑzeDDot;u   â©·zEdot;u   ÄzeDot;u   âzedot;u   Äzee;u   âzefDot;u   âzEfr;u   ðzefr;u   ð¢zeg;u   âªzEgraveõ   Ãzegraveõ   Ã¨zEgrave;r)   zegrave;r*   zegs;u   âªzegsdot;u   âªzel;u   âªzElement;u   âz	elinters;u   â§zell;u   âzels;u   âªzelsdot;u   âªzEmacr;u   Äzemacr;u   Äzempty;u   âz	emptyset;u   âzEmptySmallSquare;u   â»zemptyv;u   âzEmptyVerySmallSquare;u   â«zemsp13;u   âzemsp14;u   âzemsp;u   âzENG;u   Åzeng;u   Åzensp;u   âzEogon;u   Äzeogon;u   ÄzEopf;u   ð¼zeopf;u   ðzepar;u   âzeparsl;u   â§£zeplus;u   â©±zepsi;u   ÎµzEpsilon;u   Îzepsilon;u   Îµzepsiv;u   Ïµzeqcirc;u   âzeqcolon;u   âzeqsim;u   âzeqslantgtr;u   âªzeqslantless;u   âªzEqual;u   â©µzequals;ú=zEqualTilde;u   âzequest;u   âzEquilibrium;u   âzequiv;u   â¡zequivDD;u   â©¸z	eqvparsl;u   â§¥zerarr;u   â¥±zerDot;u   âzEscr;u   â°zescr;u   â¯zesdot;u   âzEsim;u   â©³zesim;u   âzEta;u   Îzeta;u   Î·zETHõ   Ãzethõ   Ã°zETH;r,   zeth;r-   zEumlõ   Ãzeumlõ   Ã«zEuml;r.   zeuml;r/   zeuro;u   â¬zexcl;ú!zexist;u   âzExists;u   âzexpectation;u   â°zExponentialE;u   âzexponentiale;u   âzfallingdotseq;u   âzFcy;u   Ð¤zfcy;u   Ñzfemale;u   âzffilig;u   ï¬zfflig;u   ï¬zffllig;u   ï¬zFfr;u   ðzffr;u   ð£zfilig;u   ï¬zFilledSmallSquare;u   â¼zFilledVerySmallSquare;u   âªzfjlig;zfjzflat;u   â­zfllig;u   ï¬zfltns;u   â±zfnof;u   ÆzFopf;u   ð½zfopf;u   ðzForAll;u   âzforall;u   âzfork;u   âzforkv;u   â«zFouriertrf;u   â±z	fpartint;u   â¨zfrac12õ   Â½zfrac12;r1   zfrac13;u   âzfrac14õ   Â¼zfrac14;r2   zfrac15;u   âzfrac16;u   âzfrac18;u   âzfrac23;u   âzfrac25;u   âzfrac34õ   Â¾zfrac34;r3   zfrac35;u   âzfrac38;u   âzfrac45;u   âzfrac56;u   âzfrac58;u   âzfrac78;u   âzfrasl;u   âzfrown;u   â¢zFscr;u   â±zfscr;u   ð»zgacute;u   ÇµzGamma;u   Îzgamma;u   Î³zGammad;u   Ïzgammad;u   Ïzgap;u   âªzGbreve;u   Äzgbreve;u   ÄzGcedil;u   Ä¢zGcirc;u   Äzgcirc;u   ÄzGcy;u   Ðzgcy;u   Ð³zGdot;u   Ä zgdot;u   Ä¡zgE;u   â§zge;u   â¥zgEl;u   âªzgel;u   âzgeq;u   â¥zgeqq;u   â§z	geqslant;u   â©¾zges;u   â©¾zgescc;u   âª©zgesdot;u   âªzgesdoto;u   âªz	gesdotol;u   âªzgesl;u   âï¸zgesles;u   âªzGfr;u   ðzgfr;u   ð¤zGg;u   âzgg;u   â«zggg;u   âzgimel;u   â·zGJcy;u   Ðzgjcy;u   Ñzgl;u   â·zgla;u   âª¥zglE;u   âªzglj;u   âª¤zgnap;u   âªz	gnapprox;u   âªzgnE;u   â©zgne;u   âªzgneq;u   âªzgneqq;u   â©zgnsim;u   â§zGopf;u   ð¾zgopf;u   ðzgrave;r!   zGreaterEqual;u   â¥zGreaterEqualLess;u   âzGreaterFullEqual;u   â§zGreaterGreater;u   âª¢zGreaterLess;u   â·zGreaterSlantEqual;u   â©¾zGreaterTilde;u   â³zGscr;u   ð¢zgscr;u   âzgsim;u   â³zgsime;u   âªzgsiml;u   âªzGTú>zgtr4   zGT;r4   zGt;u   â«zgt;r4   zgtcc;u   âª§zgtcir;u   â©ºzgtdot;u   âzgtlPar;u   â¦zgtquest;u   â©¼z
gtrapprox;u   âªzgtrarr;u   â¥¸zgtrdot;u   âz
gtreqless;u   âzgtreqqless;u   âªzgtrless;u   â·zgtrsim;u   â³z
gvertneqq;u   â©ï¸zgvnE;u   â©ï¸zHacek;u   Ëzhairsp;u   âzhalf;r1   zhamilt;u   âzHARDcy;u   Ðªzhardcy;u   ÑzhArr;u   âzharr;u   âzharrcir;u   â¥zharrw;u   â­zHat;ú^zhbar;u   âzHcirc;u   Ä¤zhcirc;u   Ä¥zhearts;u   â¥z
heartsuit;u   â¥zhellip;u   â¦zhercon;u   â¹zHfr;u   âzhfr;u   ð¥zHilbertSpace;u   âz	hksearow;u   â¤¥z	hkswarow;u   â¤¦zhoarr;u   â¿zhomtht;u   â»zhookleftarrow;u   â©zhookrightarrow;u   âªzHopf;u   âzhopf;u   ðzhorbar;u   âzHorizontalLine;u   âzHscr;u   âzhscr;u   ð½zhslash;u   âzHstrok;u   Ä¦zhstrok;u   Ä§zHumpDownHump;u   âz
HumpEqual;u   âzhybull;u   âzhyphen;u   âzIacuteõ   Ãziacuteõ   Ã­zIacute;r6   ziacute;r7   zic;u   â£zIcircõ   Ãzicircõ   Ã®zIcirc;r8   zicirc;r9   zIcy;u   Ðzicy;u   Ð¸zIdot;u   Ä°zIEcy;u   Ðziecy;u   Ðµziexclõ   Â¡ziexcl;r:   ziff;u   âzIfr;u   âzifr;u   ð¦zIgraveõ   Ãzigraveõ   Ã¬zIgrave;r;   zigrave;r<   zii;u   âziiiint;u   â¨ziiint;u   â­ziinfin;u   â§ziiota;u   â©zIJlig;u   Ä²zijlig;u   Ä³zIm;u   âzImacr;u   Äªzimacr;u   Ä«zimage;u   âzImaginaryI;u   âz	imagline;u   âz	imagpart;u   âzimath;u   Ä±zimof;u   â·zimped;u   ÆµzImplies;u   âzin;u   âzincare;u   âzinfin;u   âz	infintie;u   â§zinodot;u   Ä±zInt;u   â¬zint;u   â«zintcal;u   âºz	integers;u   â¤z	Integral;u   â«z	intercal;u   âºzIntersection;u   âz	intlarhk;u   â¨zintprod;u   â¨¼zInvisibleComma;u   â£zInvisibleTimes;u   â¢zIOcy;u   Ðziocy;u   ÑzIogon;u   Ä®ziogon;u   Ä¯zIopf;u   ðziopf;u   ðzIota;u   Îziota;u   Î¹ziprod;u   â¨¼ziquestõ   Â¿ziquest;r=   zIscr;u   âziscr;u   ð¾zisin;u   âzisindot;u   âµzisinE;u   â¹zisins;u   â´zisinsv;u   â³zisinv;u   âzit;u   â¢zItilde;u   Ä¨zitilde;u   Ä©zIukcy;u   Ðziukcy;u   ÑzIumlõ   Ãziumlõ   Ã¯zIuml;r>   ziuml;r?   zJcirc;u   Ä´zjcirc;u   ÄµzJcy;u   Ðzjcy;u   Ð¹zJfr;u   ðzjfr;u   ð§zjmath;u   È·zJopf;u   ðzjopf;u   ðzJscr;u   ð¥zjscr;u   ð¿zJsercy;u   Ðzjsercy;u   ÑzJukcy;u   Ðzjukcy;u   ÑzKappa;u   Îzkappa;u   Îºzkappav;u   Ï°zKcedil;u   Ä¶zkcedil;u   Ä·zKcy;u   Ðzkcy;u   ÐºzKfr;u   ðzkfr;u   ð¨zkgreen;u   Ä¸zKHcy;u   Ð¥zkhcy;u   ÑzKJcy;u   Ðzkjcy;u   ÑzKopf;u   ðzkopf;u   ðzKscr;u   ð¦zkscr;u   ðzlAarr;u   âzLacute;u   Ä¹zlacute;u   Äºz	laemptyv;u   â¦´zlagran;u   âzLambda;u   Îzlambda;u   Î»zLang;u   âªzlang;u   â¨zlangd;u   â¦zlangle;u   â¨zlap;u   âªzLaplacetrf;u   âzlaquoõ   Â«zlaquo;r@   zLarr;u   âzlArr;u   âzlarr;u   âzlarrb;u   â¤zlarrbfs;u   â¤zlarrfs;u   â¤zlarrhk;u   â©zlarrlp;u   â«zlarrpl;u   â¤¹zlarrsim;u   â¥³zlarrtl;u   â¢zlat;u   âª«zlAtail;u   â¤zlatail;u   â¤zlate;u   âª­zlates;u   âª­ï¸zlBarr;u   â¤zlbarr;u   â¤zlbbrk;u   â²zlbrace;Ú{zlbrack;ú[zlbrke;u   â¦zlbrksld;u   â¦zlbrkslu;u   â¦zLcaron;u   Ä½zlcaron;u   Ä¾zLcedil;u   Ä»zlcedil;u   Ä¼zlceil;u   âzlcub;rA   zLcy;u   Ðzlcy;u   Ð»zldca;u   â¤¶zldquo;u   âzldquor;u   âzldrdhar;u   â¥§z	ldrushar;u   â¥zldsh;u   â²zlE;u   â¦zle;u   â¤zLeftAngleBracket;u   â¨z
LeftArrow;u   âz
Leftarrow;u   âz
leftarrow;u   âzLeftArrowBar;u   â¤zLeftArrowRightArrow;u   âzleftarrowtail;u   â¢zLeftCeiling;u   âzLeftDoubleBracket;u   â¦zLeftDownTeeVector;u   â¥¡zLeftDownVector;u   âzLeftDownVectorBar;u   â¥z
LeftFloor;u   âzleftharpoondown;u   â½zleftharpoonup;u   â¼zleftleftarrows;u   âzLeftRightArrow;u   âzLeftrightarrow;u   âzleftrightarrow;u   âzleftrightarrows;u   âzleftrightharpoons;u   âzleftrightsquigarrow;u   â­zLeftRightVector;u   â¥zLeftTee;u   â£zLeftTeeArrow;u   â¤zLeftTeeVector;u   â¥zleftthreetimes;u   âzLeftTriangle;u   â²zLeftTriangleBar;u   â§zLeftTriangleEqual;u   â´zLeftUpDownVector;u   â¥zLeftUpTeeVector;u   â¥ zLeftUpVector;u   â¿zLeftUpVectorBar;u   â¥zLeftVector;u   â¼zLeftVectorBar;u   â¥zlEg;u   âªzleg;u   âzleq;u   â¤zleqq;u   â¦z	leqslant;u   â©½zles;u   â©½zlescc;u   âª¨zlesdot;u   â©¿zlesdoto;u   âªz	lesdotor;u   âªzlesg;u   âï¸zlesges;u   âªzlessapprox;u   âªzlessdot;u   âz
lesseqgtr;u   âzlesseqqgtr;u   âªzLessEqualGreater;u   âzLessFullEqual;u   â¦zLessGreater;u   â¶zlessgtr;u   â¶z	LessLess;u   âª¡zlesssim;u   â²zLessSlantEqual;u   â©½z
LessTilde;u   â²zlfisht;u   â¥¼zlfloor;u   âzLfr;u   ðzlfr;u   ð©zlg;u   â¶zlgE;u   âªzlHar;u   â¥¢zlhard;u   â½zlharu;u   â¼zlharul;u   â¥ªzlhblk;u   âzLJcy;u   Ðzljcy;u   ÑzLl;u   âzll;u   âªzllarr;u   âz	llcorner;u   âzLleftarrow;u   âzllhard;u   â¥«zlltri;u   âºzLmidot;u   Ä¿zlmidot;u   Åzlmoust;u   â°zlmoustache;u   â°zlnap;u   âªz	lnapprox;u   âªzlnE;u   â¨zlne;u   âªzlneq;u   âªzlneqq;u   â¨zlnsim;u   â¦zloang;u   â¬zloarr;u   â½zlobrk;u   â¦zLongLeftArrow;u   âµzLongleftarrow;u   â¸zlongleftarrow;u   âµzLongLeftRightArrow;u   â·zLongleftrightarrow;u   âºzlongleftrightarrow;u   â·zlongmapsto;u   â¼zLongRightArrow;u   â¶zLongrightarrow;u   â¹zlongrightarrow;u   â¶zlooparrowleft;u   â«zlooparrowright;u   â¬zlopar;u   â¦zLopf;u   ðzlopf;u   ðzloplus;u   â¨­zlotimes;u   â¨´zlowast;u   âzlowbar;Ú_zLowerLeftArrow;u   âzLowerRightArrow;u   âzloz;u   âzlozenge;u   âzlozf;u   â§«zlpar;ú(zlparlt;u   â¦zlrarr;u   âz	lrcorner;u   âzlrhar;u   âzlrhard;u   â¥­zlrm;u   âzlrtri;u   â¿zlsaquo;u   â¹zLscr;u   âzlscr;u   ðzLsh;u   â°zlsh;u   â°zlsim;u   â²zlsime;u   âªzlsimg;u   âªzlsqb;rB   zlsquo;u   âzlsquor;u   âzLstrok;u   Åzlstrok;u   ÅzLTú<zltrE   zLT;rE   zLt;u   âªzlt;rE   zltcc;u   âª¦zltcir;u   â©¹zltdot;u   âzlthree;u   âzltimes;u   âzltlarr;u   â¥¶zltquest;u   â©»zltri;u   âzltrie;u   â´zltrif;u   âzltrPar;u   â¦z	lurdshar;u   â¥zluruhar;u   â¥¦z
lvertneqq;u   â¨ï¸zlvnE;u   â¨ï¸zmacrõ   Â¯zmacr;rF   zmale;u   âzmalt;u   â zmaltese;u   â zMap;u   â¤zmap;u   â¦zmapsto;u   â¦zmapstodown;u   â§zmapstoleft;u   â¤z	mapstoup;u   â¥zmarker;u   â®zmcomma;u   â¨©zMcy;u   Ðzmcy;u   Ð¼zmdash;u   âzmDDot;u   âºzmeasuredangle;u   â¡zMediumSpace;u   âz
Mellintrf;u   â³zMfr;u   ðzmfr;u   ðªzmho;u   â§zmicroõ   Âµzmicro;rG   zmid;u   â£zmidast;r   zmidcir;u   â«°zmiddotr   zmiddot;r   zminus;u   âzminusb;u   âzminusd;u   â¸zminusdu;u   â¨ªz
MinusPlus;u   âzmlcp;u   â«zmldr;u   â¦zmnplus;u   âzmodels;u   â§zMopf;u   ðzmopf;u   ðzmp;u   âzMscr;u   â³zmscr;u   ðzmstpos;u   â¾zMu;u   Îzmu;u   Î¼z	multimap;u   â¸zmumap;u   â¸znabla;u   âzNacute;u   Åznacute;u   Åznang;u   â âznap;u   âznapE;u   â©°Ì¸znapid;u   âÌ¸znapos;u   Åznapprox;u   âznatur;u   â®znatural;u   â®z	naturals;u   âznbspõ   Â znbsp;rH   znbump;u   âÌ¸znbumpe;u   âÌ¸zncap;u   â©zNcaron;u   Åzncaron;u   ÅzNcedil;u   Åzncedil;u   Åzncong;u   âz	ncongdot;u   â©­Ì¸zncup;u   â©zNcy;u   Ðzncy;u   Ð½zndash;u   âzne;u   â znearhk;u   â¤¤zneArr;u   âznearr;u   âznearrow;u   âznedot;u   âÌ¸zNegativeMediumSpace;u   âzNegativeThickSpace;u   âzNegativeThinSpace;u   âzNegativeVeryThinSpace;u   âznequiv;u   â¢znesear;u   â¤¨znesim;u   âÌ¸zNestedGreaterGreater;u   â«zNestedLessLess;u   âªzNewLine;Ú
znexist;u   âznexists;u   âzNfr;u   ðznfr;u   ð«zngE;u   â§Ì¸znge;u   â±zngeq;u   â±zngeqq;u   â§Ì¸z
ngeqslant;u   â©¾Ì¸znges;u   â©¾Ì¸znGg;u   âÌ¸zngsim;u   âµznGt;u   â«âzngt;u   â¯zngtr;u   â¯znGtv;u   â«Ì¸znhArr;u   âznharr;u   â®znhpar;u   â«²zni;u   âznis;u   â¼znisd;u   âºzniv;u   âzNJcy;u   Ðznjcy;u   ÑznlArr;u   âznlarr;u   âznldr;u   â¥znlE;u   â¦Ì¸znle;u   â°znLeftarrow;u   âznleftarrow;u   âznLeftrightarrow;u   âznleftrightarrow;u   â®znleq;u   â°znleqq;u   â¦Ì¸z
nleqslant;u   â©½Ì¸znles;u   â©½Ì¸znless;u   â®znLl;u   âÌ¸znlsim;u   â´znLt;u   âªâznlt;u   â®znltri;u   âªznltrie;u   â¬znLtv;u   âªÌ¸znmid;u   â¤zNoBreak;u   â zNonBreakingSpace;rH   zNopf;u   âznopf;u   ðznotõ   Â¬zNot;u   â«¬znot;rJ   zNotCongruent;u   â¢z
NotCupCap;u   â­zNotDoubleVerticalBar;u   â¦zNotElement;u   âz	NotEqual;u   â zNotEqualTilde;u   âÌ¸z
NotExists;u   âzNotGreater;u   â¯zNotGreaterEqual;u   â±zNotGreaterFullEqual;u   â§Ì¸zNotGreaterGreater;u   â«Ì¸zNotGreaterLess;u   â¹zNotGreaterSlantEqual;u   â©¾Ì¸zNotGreaterTilde;u   âµzNotHumpDownHump;u   âÌ¸zNotHumpEqual;u   âÌ¸znotin;u   âz	notindot;u   âµÌ¸znotinE;u   â¹Ì¸znotinva;u   âznotinvb;u   â·znotinvc;u   â¶zNotLeftTriangle;u   âªzNotLeftTriangleBar;u   â§Ì¸zNotLeftTriangleEqual;u   â¬zNotLess;u   â®zNotLessEqual;u   â°zNotLessGreater;u   â¸zNotLessLess;u   âªÌ¸zNotLessSlantEqual;u   â©½Ì¸zNotLessTilde;u   â´zNotNestedGreaterGreater;u   âª¢Ì¸zNotNestedLessLess;u   âª¡Ì¸znotni;u   âznotniva;u   âznotnivb;u   â¾znotnivc;u   â½zNotPrecedes;u   âzNotPrecedesEqual;u   âª¯Ì¸zNotPrecedesSlantEqual;u   â zNotReverseElement;u   âzNotRightTriangle;u   â«zNotRightTriangleBar;u   â§Ì¸zNotRightTriangleEqual;u   â­zNotSquareSubset;u   âÌ¸zNotSquareSubsetEqual;u   â¢zNotSquareSuperset;u   âÌ¸zNotSquareSupersetEqual;u   â£z
NotSubset;u   ââzNotSubsetEqual;u   âzNotSucceeds;u   âzNotSucceedsEqual;u   âª°Ì¸zNotSucceedsSlantEqual;u   â¡zNotSucceedsTilde;u   â¿Ì¸zNotSuperset;u   ââzNotSupersetEqual;u   âz	NotTilde;u   âzNotTildeEqual;u   âzNotTildeFullEqual;u   âzNotTildeTilde;u   âzNotVerticalBar;u   â¤znpar;u   â¦z
nparallel;u   â¦znparsl;u   â«½â¥znpart;u   âÌ¸znpolint;u   â¨znpr;u   âznprcue;u   â znpre;u   âª¯Ì¸znprec;u   âznpreceq;u   âª¯Ì¸znrArr;u   âznrarr;u   âznrarrc;u   â¤³Ì¸znrarrw;u   âÌ¸znRightarrow;u   âznrightarrow;u   âznrtri;u   â«znrtrie;u   â­znsc;u   âznsccue;u   â¡znsce;u   âª°Ì¸zNscr;u   ð©znscr;u   ðz
nshortmid;u   â¤znshortparallel;u   â¦znsim;u   âznsime;u   âznsimeq;u   âznsmid;u   â¤znspar;u   â¦znsqsube;u   â¢znsqsupe;u   â£znsub;u   âznsubE;u   â«Ì¸znsube;u   âznsubset;u   ââz
nsubseteq;u   âznsubseteqq;u   â«Ì¸znsucc;u   âznsucceq;u   âª°Ì¸znsup;u   âznsupE;u   â«Ì¸znsupe;u   âznsupset;u   ââz
nsupseteq;u   âznsupseteqq;u   â«Ì¸zntgl;u   â¹zNtildeõ   Ãzntildeõ   Ã±zNtilde;rK   zntilde;rL   zntlg;u   â¸zntriangleleft;u   âªzntrianglelefteq;u   â¬zntriangleright;u   â«zntrianglerighteq;u   â­zNu;u   Îznu;u   Î½znum;ú#znumero;u   âznumsp;u   âznvap;u   ââznVDash;u   â¯znVdash;u   â®znvDash;u   â­znvdash;u   â¬znvge;u   â¥âznvgt;u   >âznvHarr;u   â¤znvinfin;u   â§znvlArr;u   â¤znvle;u   â¤âznvlt;u   <âznvltrie;u   â´âznvrArr;u   â¤znvrtrie;u   âµâznvsim;u   â¼âznwarhk;u   â¤£znwArr;u   âznwarr;u   âznwarrow;u   âznwnear;u   â¤§zOacuteõ   Ãzoacuteõ   Ã³zOacute;rN   zoacute;rO   zoast;u   âzocir;u   âzOcircõ   Ãzocircõ   Ã´zOcirc;rP   zocirc;rQ   zOcy;u   Ðzocy;u   Ð¾zodash;u   âzOdblac;u   Åzodblac;u   Åzodiv;u   â¨¸zodot;u   âzodsold;u   â¦¼zOElig;u   Åzoelig;u   Åzofcir;u   â¦¿zOfr;u   ðzofr;u   ð¬zogon;u   ËzOgraveõ   Ãzograveõ   Ã²zOgrave;rR   zograve;rS   zogt;u   â§zohbar;u   â¦µzohm;u   Î©zoint;u   â®zolarr;u   âºzolcir;u   â¦¾zolcross;u   â¦»zoline;u   â¾zolt;u   â§zOmacr;u   Åzomacr;u   ÅzOmega;u   Î©zomega;u   ÏzOmicron;u   Îzomicron;u   Î¿zomid;u   â¦¶zominus;u   âzOopf;u   ðzoopf;u   ð zopar;u   â¦·zOpenCurlyDoubleQuote;u   âzOpenCurlyQuote;u   âzoperp;u   â¦¹zoplus;u   âzOr;u   â©zor;u   â¨zorarr;u   â»zord;u   â©zorder;u   â´zorderof;u   â´zordfõ   Âªzordf;rT   zordmõ   Âºzordm;rU   zorigof;u   â¶zoror;u   â©zorslope;u   â©zorv;u   â©zoS;u   âzOscr;u   ðªzoscr;u   â´zOslashõ   Ãzoslashõ   Ã¸zOslash;rV   zoslash;rW   zosol;u   âzOtildeõ   Ãzotildeõ   ÃµzOtilde;rX   zotilde;rY   zOtimes;u   â¨·zotimes;u   âz	otimesas;u   â¨¶zOumlõ   Ãzoumlõ   Ã¶zOuml;rZ   zouml;r[   zovbar;u   â½zOverBar;u   â¾z
OverBrace;u   âzOverBracket;u   â´zOverParenthesis;u   âzpar;u   â¥zparaõ   Â¶zpara;r\   z	parallel;u   â¥zparsim;u   â«³zparsl;u   â«½zpart;u   âz	PartialD;u   âzPcy;u   Ðzpcy;u   Ð¿zpercnt;ú%zperiod;Ú.zpermil;u   â°zperp;u   â¥zpertenk;u   â±zPfr;u   ðzpfr;u   ð­zPhi;u   Î¦zphi;u   Ïzphiv;u   Ïzphmmat;u   â³zphone;u   âzPi;u   Î zpi;u   Ïz
pitchfork;u   âzpiv;u   Ïzplanck;u   âzplanckh;u   âzplankv;u   âzplus;ú+z	plusacir;u   â¨£zplusb;u   âzpluscir;u   â¨¢zplusdo;u   âzplusdu;u   â¨¥zpluse;u   â©²z
PlusMinus;õ   Â±zplusmnr`   zplusmn;r`   zplussim;u   â¨¦zplustwo;u   â¨§zpm;r`   zPoincareplane;u   âz	pointint;u   â¨zPopf;u   âzpopf;u   ð¡zpoundõ   Â£zpound;ra   zPr;u   âª»zpr;u   âºzprap;u   âª·zprcue;u   â¼zprE;u   âª³zpre;u   âª¯zprec;u   âºzprecapprox;u   âª·zpreccurlyeq;u   â¼z	Precedes;u   âºzPrecedesEqual;u   âª¯zPrecedesSlantEqual;u   â¼zPrecedesTilde;u   â¾zpreceq;u   âª¯zprecnapprox;u   âª¹z	precneqq;u   âªµz	precnsim;u   â¨zprecsim;u   â¾zPrime;u   â³zprime;u   â²zprimes;u   âzprnap;u   âª¹zprnE;u   âªµzprnsim;u   â¨zprod;u   âzProduct;u   âz	profalar;u   â®z	profline;u   âz	profsurf;u   âzprop;u   âzProportion;u   â·zProportional;u   âzpropto;u   âzprsim;u   â¾zprurel;u   â°zPscr;u   ð«zpscr;u   ðzPsi;u   Î¨zpsi;u   Ïzpuncsp;u   âzQfr;u   ðzqfr;u   ð®zqint;u   â¨zQopf;u   âzqopf;u   ð¢zqprime;u   âzQscr;u   ð¬zqscr;u   ðzquaternions;u   âzquatint;u   â¨zquest;ú?zquesteq;u   âzQUOTú"zquotrc   zQUOT;rc   zquot;rc   zrAarr;u   âzrace;u   â½Ì±zRacute;u   Åzracute;u   Åzradic;u   âz	raemptyv;u   â¦³zRang;u   â«zrang;u   â©zrangd;u   â¦zrange;u   â¦¥zrangle;u   â©zraquoõ   Â»zraquo;rd   zRarr;u   â zrArr;u   âzrarr;u   âzrarrap;u   â¥µzrarrb;u   â¥zrarrbfs;u   â¤ zrarrc;u   â¤³zrarrfs;u   â¤zrarrhk;u   âªzrarrlp;u   â¬zrarrpl;u   â¥zrarrsim;u   â¥´zRarrtl;u   â¤zrarrtl;u   â£zrarrw;u   âzrAtail;u   â¤zratail;u   â¤zratio;u   â¶z
rationals;u   âzRBarr;u   â¤zrBarr;u   â¤zrbarr;u   â¤zrbbrk;u   â³zrbrace;Ú}zrbrack;ú]zrbrke;u   â¦zrbrksld;u   â¦zrbrkslu;u   â¦zRcaron;u   Åzrcaron;u   ÅzRcedil;u   Åzrcedil;u   Åzrceil;u   âzrcub;re   zRcy;u   Ð zrcy;u   Ñzrdca;u   â¤·zrdldhar;u   â¥©zrdquo;u   âzrdquor;u   âzrdsh;u   â³zRe;u   âzreal;u   âzrealine;u   âz	realpart;u   âzreals;u   âzrect;u   â­zREGr   zregr   zREG;r   zreg;r   zReverseElement;u   âzReverseEquilibrium;u   âzReverseUpEquilibrium;u   â¥¯zrfisht;u   â¥½zrfloor;u   âzRfr;u   âzrfr;u   ð¯zrHar;u   â¥¤zrhard;u   âzrharu;u   âzrharul;u   â¥¬zRho;u   Î¡zrho;u   Ïzrhov;u   Ï±zRightAngleBracket;u   â©zRightArrow;u   âzRightarrow;u   âzrightarrow;u   âzRightArrowBar;u   â¥zRightArrowLeftArrow;u   âzrightarrowtail;u   â£zRightCeiling;u   âzRightDoubleBracket;u   â§zRightDownTeeVector;u   â¥zRightDownVector;u   âzRightDownVectorBar;u   â¥zRightFloor;u   âzrightharpoondown;u   âzrightharpoonup;u   âzrightleftarrows;u   âzrightleftharpoons;u   âzrightrightarrows;u   âzrightsquigarrow;u   âz	RightTee;u   â¢zRightTeeArrow;u   â¦zRightTeeVector;u   â¥zrightthreetimes;u   âzRightTriangle;u   â³zRightTriangleBar;u   â§zRightTriangleEqual;u   âµzRightUpDownVector;u   â¥zRightUpTeeVector;u   â¥zRightUpVector;u   â¾zRightUpVectorBar;u   â¥zRightVector;u   âzRightVectorBar;u   â¥zring;u   Ëzrisingdotseq;u   âzrlarr;u   âzrlhar;u   âzrlm;u   âzrmoust;u   â±zrmoustache;u   â±zrnmid;u   â«®zroang;u   â­zroarr;u   â¾zrobrk;u   â§zropar;u   â¦zRopf;u   âzropf;u   ð£zroplus;u   â¨®zrotimes;u   â¨µzRoundImplies;u   â¥°zrpar;ú)zrpargt;u   â¦z	rppolint;u   â¨zrrarr;u   âzRrightarrow;u   âzrsaquo;u   âºzRscr;u   âzrscr;u   ðzRsh;u   â±zrsh;u   â±zrsqb;rf   zrsquo;u   âzrsquor;u   âzrthree;u   âzrtimes;u   âzrtri;u   â¹zrtrie;u   âµzrtrif;u   â¸z	rtriltri;u   â§zRuleDelayed;u   â§´zruluhar;u   â¥¨zrx;u   âzSacute;u   Åzsacute;u   Åzsbquo;u   âzSc;u   âª¼zsc;u   â»zscap;u   âª¸zScaron;u   Å zscaron;u   Å¡zsccue;u   â½zscE;u   âª´zsce;u   âª°zScedil;u   Åzscedil;u   ÅzScirc;u   Åzscirc;u   Åzscnap;u   âªºzscnE;u   âª¶zscnsim;u   â©z	scpolint;u   â¨zscsim;u   â¿zScy;u   Ð¡zscy;u   Ñzsdot;u   âzsdotb;u   â¡zsdote;u   â©¦zsearhk;u   â¤¥zseArr;u   âzsearr;u   âzsearrow;u   âzsectõ   Â§zsect;rh   zsemi;ú;zseswar;u   â¤©z	setminus;u   âzsetmn;u   âzsext;u   â¶zSfr;u   ðzsfr;u   ð°zsfrown;u   â¢zsharp;u   â¯zSHCHcy;u   Ð©zshchcy;u   ÑzSHcy;u   Ð¨zshcy;u   ÑzShortDownArrow;u   âzShortLeftArrow;u   âz	shortmid;u   â£zshortparallel;u   â¥zShortRightArrow;u   âzShortUpArrow;u   âzshyõ   Â­zshy;rj   zSigma;u   Î£zsigma;u   Ïzsigmaf;u   Ïzsigmav;u   Ïzsim;u   â¼zsimdot;u   â©ªzsime;u   âzsimeq;u   âzsimg;u   âªzsimgE;u   âª zsiml;u   âªzsimlE;u   âªzsimne;u   âzsimplus;u   â¨¤zsimrarr;u   â¥²zslarr;u   âzSmallCircle;u   âzsmallsetminus;u   âzsmashp;u   â¨³z	smeparsl;u   â§¤zsmid;u   â£zsmile;u   â£zsmt;u   âªªzsmte;u   âª¬zsmtes;u   âª¬ï¸zSOFTcy;u   Ð¬zsoftcy;u   Ñzsol;ú/zsolb;u   â§zsolbar;u   â¿zSopf;u   ðzsopf;u   ð¤zspades;u   â z
spadesuit;u   â zspar;u   â¥zsqcap;u   âzsqcaps;u   âï¸zsqcup;u   âzsqcups;u   âï¸zSqrt;u   âzsqsub;u   âzsqsube;u   âz	sqsubset;u   âzsqsubseteq;u   âzsqsup;u   âzsqsupe;u   âz	sqsupset;u   âzsqsupseteq;u   âzsqu;u   â¡zSquare;u   â¡zsquare;u   â¡zSquareIntersection;u   âzSquareSubset;u   âzSquareSubsetEqual;u   âzSquareSuperset;u   âzSquareSupersetEqual;u   âzSquareUnion;u   âzsquarf;u   âªzsquf;u   âªzsrarr;u   âzSscr;u   ð®zsscr;u   ðzssetmn;u   âzssmile;u   â£zsstarf;u   âzStar;u   âzstar;u   âzstarf;u   âzstraightepsilon;u   Ïµzstraightphi;u   Ïzstrns;rF   zSub;u   âzsub;u   âzsubdot;u   âª½zsubE;u   â«zsube;u   âzsubedot;u   â«zsubmult;u   â«zsubnE;u   â«zsubne;u   âzsubplus;u   âª¿zsubrarr;u   â¥¹zSubset;u   âzsubset;u   âz	subseteq;u   âz
subseteqq;u   â«zSubsetEqual;u   âz
subsetneq;u   âzsubsetneqq;u   â«zsubsim;u   â«zsubsub;u   â«zsubsup;u   â«zsucc;u   â»zsuccapprox;u   âª¸zsucccurlyeq;u   â½z	Succeeds;u   â»zSucceedsEqual;u   âª°zSucceedsSlantEqual;u   â½zSucceedsTilde;u   â¿zsucceq;u   âª°zsuccnapprox;u   âªºz	succneqq;u   âª¶z	succnsim;u   â©zsuccsim;u   â¿z	SuchThat;u   âzSum;u   âzsum;u   âzsung;u   âªzsup1õ   Â¹zsup1;rl   zsup2õ   Â²zsup2;rm   zsup3õ   Â³zsup3;rn   zSup;u   âzsup;u   âzsupdot;u   âª¾zsupdsub;u   â«zsupE;u   â«zsupe;u   âzsupedot;u   â«z	Superset;u   âzSupersetEqual;u   âzsuphsol;u   âzsuphsub;u   â«zsuplarr;u   â¥»zsupmult;u   â«zsupnE;u   â«zsupne;u   âzsupplus;u   â«zSupset;u   âzsupset;u   âz	supseteq;u   âz
supseteqq;u   â«z
supsetneq;u   âzsupsetneqq;u   â«zsupsim;u   â«zsupsub;u   â«zsupsup;u   â«zswarhk;u   â¤¦zswArr;u   âzswarr;u   âzswarrow;u   âzswnwar;u   â¤ªzszligõ   Ãzszlig;ro   zTab;ú	ztarget;u   âzTau;u   Î¤ztau;u   Ïztbrk;u   â´zTcaron;u   Å¤ztcaron;u   Å¥zTcedil;u   Å¢ztcedil;u   Å£zTcy;u   Ð¢ztcy;u   Ñztdot;u   âztelrec;u   âzTfr;u   ðztfr;u   ð±zthere4;u   â´z
Therefore;u   â´z
therefore;u   â´zTheta;u   Îztheta;u   Î¸z	thetasym;u   Ïzthetav;u   Ïzthickapprox;u   âz	thicksim;u   â¼zThickSpace;u   ââzthinsp;u   âz
ThinSpace;u   âzthkap;u   âzthksim;u   â¼zTHORNõ   Ãzthornõ   Ã¾zTHORN;rq   zthorn;rr   zTilde;u   â¼ztilde;u   ËzTildeEqual;u   âzTildeFullEqual;u   âzTildeTilde;u   âztimesõ   Ãztimes;rs   ztimesb;u   â z	timesbar;u   â¨±ztimesd;u   â¨°ztint;u   â­ztoea;u   â¤¨ztop;u   â¤ztopbot;u   â¶ztopcir;u   â«±zTopf;u   ðztopf;u   ð¥ztopfork;u   â«ztosa;u   â¤©ztprime;u   â´zTRADE;u   â¢ztrade;u   â¢z	triangle;u   âµztriangledown;u   â¿ztriangleleft;u   âztrianglelefteq;u   â´z
triangleq;u   âztriangleright;u   â¹ztrianglerighteq;u   âµztridot;u   â¬ztrie;u   âz	triminus;u   â¨ºz
TripleDot;u   âztriplus;u   â¨¹ztrisb;u   â§ztritime;u   â¨»z	trpezium;u   â¢zTscr;u   ð¯ztscr;u   ðzTScy;u   Ð¦ztscy;u   ÑzTSHcy;u   Ðztshcy;u   ÑzTstrok;u   Å¦ztstrok;u   Å§ztwixt;u   â¬ztwoheadleftarrow;u   âztwoheadrightarrow;u   â zUacuteõ   Ãzuacuteõ   ÃºzUacute;rt   zuacute;ru   zUarr;u   âzuArr;u   âzuarr;u   âz	Uarrocir;u   â¥zUbrcy;u   Ðzubrcy;u   ÑzUbreve;u   Å¬zubreve;u   Å­zUcircõ   Ãzucircõ   Ã»zUcirc;rv   zucirc;rw   zUcy;u   Ð£zucy;u   Ñzudarr;u   âzUdblac;u   Å°zudblac;u   Å±zudhar;u   â¥®zufisht;u   â¥¾zUfr;u   ðzufr;u   ð²zUgraveõ   Ãzugraveõ   Ã¹zUgrave;rx   zugrave;ry   zuHar;u   â¥£zuharl;u   â¿zuharr;u   â¾zuhblk;u   âzulcorn;u   âz	ulcorner;u   âzulcrop;u   âzultri;u   â¸zUmacr;u   Åªzumacr;u   Å«zumlr"   zuml;r"   z	UnderBar;rC   zUnderBrace;u   âzUnderBracket;u   âµzUnderParenthesis;u   âzUnion;u   âz
UnionPlus;u   âzUogon;u   Å²zuogon;u   Å³zUopf;u   ðzuopf;u   ð¦zUpArrow;u   âzUparrow;u   âzuparrow;u   âzUpArrowBar;u   â¤zUpArrowDownArrow;u   âzUpDownArrow;u   âzUpdownarrow;u   âzupdownarrow;u   âzUpEquilibrium;u   â¥®zupharpoonleft;u   â¿zupharpoonright;u   â¾zuplus;u   âzUpperLeftArrow;u   âzUpperRightArrow;u   âzUpsi;u   Ïzupsi;u   Ïzupsih;u   ÏzUpsilon;u   Î¥zupsilon;u   ÏzUpTee;u   â¥zUpTeeArrow;u   â¥zupuparrows;u   âzurcorn;u   âz	urcorner;u   âzurcrop;u   âzUring;u   Å®zuring;u   Å¯zurtri;u   â¹zUscr;u   ð°zuscr;u   ðzutdot;u   â°zUtilde;u   Å¨zutilde;u   Å©zutri;u   âµzutrif;u   â´zuuarr;u   âzUumlõ   Ãzuumlõ   Ã¼zUuml;rz   zuuml;r{   zuwangle;u   â¦§zvangrt;u   â¦zvarepsilon;u   Ïµz	varkappa;u   Ï°zvarnothing;u   âzvarphi;u   Ïzvarpi;u   Ïz
varpropto;u   âzvArr;u   âzvarr;u   âzvarrho;u   Ï±z	varsigma;u   Ïzvarsubsetneq;u   âï¸zvarsubsetneqq;u   â«ï¸zvarsupsetneq;u   âï¸zvarsupsetneqq;u   â«ï¸z	vartheta;u   Ïzvartriangleleft;u   â²zvartriangleright;u   â³zVbar;u   â««zvBar;u   â«¨zvBarv;u   â«©zVcy;u   Ðzvcy;u   Ð²zVDash;u   â«zVdash;u   â©zvDash;u   â¨zvdash;u   â¢zVdashl;u   â«¦zVee;u   âzvee;u   â¨zveebar;u   â»zveeeq;u   âzvellip;u   â®zVerbar;u   âzverbar;ú|zVert;u   âzvert;r|   zVerticalBar;u   â£zVerticalLine;r|   zVerticalSeparator;u   âzVerticalTilde;u   âzVeryThinSpace;u   âzVfr;u   ðzvfr;u   ð³zvltri;u   â²zvnsub;u   ââzvnsup;u   ââzVopf;u   ðzvopf;u   ð§zvprop;u   âzvrtri;u   â³zVscr;u   ð±zvscr;u   ðzvsubnE;u   â«ï¸zvsubne;u   âï¸zvsupnE;u   â«ï¸zvsupne;u   âï¸zVvdash;u   âªzvzigzag;u   â¦zWcirc;u   Å´zwcirc;u   Åµzwedbar;u   â©zWedge;u   âzwedge;u   â§zwedgeq;u   âzweierp;u   âzWfr;u   ðzwfr;u   ð´zWopf;u   ðzwopf;u   ð¨zwp;u   âzwr;u   âzwreath;u   âzWscr;u   ð²zwscr;u   ðzxcap;u   âzxcirc;u   â¯zxcup;u   âzxdtri;u   â½zXfr;u   ðzxfr;u   ðµzxhArr;u   âºzxharr;u   â·zXi;u   Îzxi;u   Î¾zxlArr;u   â¸zxlarr;u   âµzxmap;u   â¼zxnis;u   â»zxodot;u   â¨zXopf;u   ðzxopf;u   ð©zxoplus;u   â¨zxotime;u   â¨zxrArr;u   â¹zxrarr;u   â¶zXscr;u   ð³zxscr;u   ðzxsqcup;u   â¨zxuplus;u   â¨zxutri;u   â³zxvee;u   âzxwedge;u   âzYacuteõ   Ãzyacuteõ   Ã½zYacute;r}   zyacute;r~   zYAcy;u   Ð¯zyacy;u   ÑzYcirc;u   Å¶zycirc;u   Å·zYcy;u   Ð«zycy;u   Ñzyenõ   Â¥zyen;r   zYfr;u   ðzyfr;u   ð¶zYIcy;u   Ðzyicy;u   ÑzYopf;u   ðzyopf;u   ðªzYscr;u   ð´zyscr;u   ðzYUcy;u   Ð®zyucy;u   Ñzyumlõ   Ã¿zYuml;u   Å¸zyuml;r   zZacute;u   Å¹zzacute;u   ÅºzZcaron;u   Å½zzcaron;u   Å¾zZcy;u   Ðzzcy;u   Ð·zZdot;u   Å»zzdot;u   Å¼zzeetrf;u   â¨zZeroWidthSpace;u   âzZeta;u   Îzzeta;u   Î¶zZfr;u   â¨zzfr;u   ð·zZHcy;u   Ðzzhcy;u   Ð¶zzigrarr;u   âzZopf;u   â¤zzopf;u   ð«zZscr;u   ðµzzscr;u   ðzzwj;u   âzzwnj;u   â0name2codepointhtml\entities.py<module html.entities>Request fulfilled, document followsRequest TimeoutObject moved temporarily -- see URI listNon-Authoritative InformationNot FoundNothing matches the given URIUnsupported Media TypeINTERNAL_SERVER_ERRORRequest-URI Too LongExpectation FailedExpect condition could not be satisfiedUNPROCESSABLE_ENTITYRequest fulfilled from cacheFailed DependencyNot AcceptableAlready ReportedReset ContentClear input form for further inputBad RequestBad request syntax or unsupported methodRequest Header Fields Too LargeThe server is unwilling to process the request because its header fields are too largeUse ProxyConflictRequest conflictFAILED_DEPENDENCYMulti-StatusPrecondition FailedPrecondition in headers is falseObject moved -- see Method and URL listRequest received, please continueUPGRADE_REQUIREDIM_USEDUnprocessable EntityLockedNot ExtendedService UnavailableThe server cannot process the request due to a high loadPermanent RedirectRequest timed out; try again laterINSUFFICIENT_STORAGELoop DetectedPAYMENT_REQUIREDServer got itself in troubleTEMPORARY_REDIRECTInsufficient StorageObject has several resources -- see URI listNot ImplementedACCEPTEDThe client needs to authenticate to gain network accessGateway TimeoutServer is not able to produce a responseUNSUPPORTED_MEDIA_TYPEPartial ContentDocument created, URL followsNETWORK_AUTHENTICATION_REQUIREDThe origin server requires the request to be conditionalURI no longer exists and has been permanently removedBad GatewayVariant Also NegotiatesTOO_MANY_REQUESTSPRECONDITION_FAILEDLength RequiredClient must specify Content-LengthNetwork Authentication RequiredCreatedUnauthorizedNo permission -- see authorization schemesRequest accepted, processing continues off-lineGATEWAY_TIMEOUTThe gateway server did not receive a timely responseEntity body in unsupported formatGoneSwitching to new protocol; obey Upgrade headerMethod Not AllowedSpecified method is invalid for this resourceNot ModifiedDocument has not changed since given timeNo payment -- see charging schemesLOCKEDSee OtherREQUEST_ENTITY_TOO_LARGEREQUEST_TIMEOUTServer does not support this operationUpgrade RequiredForbiddenRequest forbidden -- authorization will not helpIM UsedRequest fulfilled, nothing followsSwitching ProtocolsUSE_PROXYMultiple ChoicesVARIANT_ALSO_NEGOTIATESAcceptedYou must use proxy specified in Location to access this resourceMoved PermanentlyNON_AUTHORITATIVE_INFORMATIONCannot fulfill requestInternal Server ErrorRequest Entity Too LargeEntity is too largeObject moved permanently -- see URI listProxy Authentication RequiredYou must authenticate with this proxy before proceedingNUITKA_PACKAGE_httpCREATEDURI is too longContinuePRECONDITION_REQUIREDMISDIRECTED_REQUESTMETHOD_NOT_ALLOWEDALREADY_REPORTEDRequested Range Not SatisfiableLOOP_DETECTEDPartial content followsPrecondition RequiredThe user has sent too many requests in a given amount of time ("rate limiting")Cannot satisfy request rangePERMANENT_REDIRECTCONFLICTTemporary RedirectToo Many Requestshttp\__init__.pyPARTIAL_CONTENTHTTPStatus.__new__Misdirected RequestMULTI_STATUSMULTIPLE_CHOICESInvalid responses from another server/proxyEXPECTATION_FAILEDURI not available in preferred format<module http>NOT_EXTENDEDSWITCHING_PROTOCOLSProcessingHTTP status codes and reason phrases

    Status codes from the following RFCs are all observed:

        * RFC 7231: Hypertext Transfer Protocol (HTTP/1.1), obsoletes 2616
        * RFC 6585: Additional HTTP Status Codes
        * RFC 3229: Delta encoding in HTTP
        * RFC 4918: HTTP Extensions for WebDAV, obsoletes 2518
        * RFC 5842: Binding Extensions to WebDAV
        * RFC 7238: Permanent Redirect
        * RFC 2295: Transparent Content Negotiation in HTTP
        * RFC 2774: An HTTP Extension Framework
        * RFC 7540: Hypertext Transfer Protocol Version 2 (HTTP/2)
    SEE_OTHERSERVICE_UNAVAILABLENOT_ACCEPTABLEBAD_GATEWAYREQUESTED_RANGE_NOT_SATISFIABLELENGTH_REQUIREDUNAUTHORIZEDHTTP Version Not SupportedFOUNDPROXY_AUTHENTICATION_REQUIREDPayment RequiredGONEIdleAdd a line of output to the current request buffer.

        Assumes that the line does *not* end with \r\n.
        HTTPSConnectionHTTPSConnection.connectskip_accept_encodingproxy-connectionHTTPConnectionHTTPConnection._tunneldatablockPOST_tunnel_headersRemote end closed connection without responsegot more than %d bytes when reading %sdebuglevelInvalidURLUnknownProtocol.__init__HTTPResponse.readintoRequest-startedHTTPConnection.set_tunnelHTTPResponse.closeReturn list of (header, value) tuples.pconn_check_closeGet the response from the server.

        If the HTTPConnection is in the correct state, returns an
        instance of HTTPResponse or of whatever object is returned by
        the response_class variable.

        If a request has not been sent or if a previous response has
        not be handled, ResponseNotReady is raised.  If the HTTP
        response indicates that the connection should be closed, then
        it will be closed before the response is returned.  When the
        connection is closed, the underlying socket is closed.
        total_bytesmvbtemp_mvbmessage_bodyHTTPConnection.connectHTTPResponse._safe_readRead up to len(b) bytes into bytearray b and return the number
        of bytes read.
        key_file, cert_file and check_hostname are deprecated, use a custom context instead.reply:NotConnectedTunnel connection failed: %d %shstringAccept-EncodingHTTPConnection.putheadersendIng a read()able_tunnel_port_get_content_lengthHTTPResponse._close_connauto_open_read_and_discard_trailerline_typechunk_left_MAXLINEencode_chunkedheader_names_MAXHEADERSHTTPConnection._send_requestone_valueHost_HTTPConnection__stateHTTPConnection._get_hostport\n(?![ \t])|\r(?![ \t\n])ImproperConnectionStateHTTPResponse._read_status_read_readableUNKNOWNZero length chunk ignoredHTTPResponse.peekRead with at most one underlying system call.  If at least one
        byte is buffered, return that instead.
        _UNKNOWNHTTPResponse.getcode_read1_chunkedHTTPResponse._get_chunk_leftReturn the HTTP status code that was sent with the response,
        or None if the URL is not an HTTP URL.

        host_enc_http_vsnBadStatusLineSend a complete request to the server.Send the currently buffered request and clear the buffer.

        Appends an extra \r\n to the buffer.
        A message_body may be specified, to be appended to the request.
        HTTPResponse.beginRemoteDisconnectedgetheadersHTTPConnection._output0

HTTPResponse._read_next_chunk_size, %i more expected[^:\s][^:\r\n]*HTTPConnection._is_textIOIncompleteRead.__init__HTTPConnection.__init__%s(%i bytes read%s)UnknownTransferEncodingwill_verifyInvalid header value %rIncompleteRead.__str__skip_host
	HTTPConnection.putrequestHTTPMessage.getallmatchingheadersamtHTTPResponse.read1_METHODS_EXPECTING_BODYUnable to determine size of %rHTTPConnection.closegetresponseGet the content-length based on the body.

        If the body is None, we set Content-Length: 0 for methods that expect
        a body (RFC 7230, Section 3.3.2). We also set the Content-Length for
        any method if the body is a str or bytes-like object and not a file.
        HTTPResponse.__init__Returns an instance of the class mimetools.Message containing
        meta-information associated with the URL.

        When the method is HTTP, these headers are those returned by
        the server at the head of the retrieved HTML page (including
        Content-Length and Content-Type).

        When the method is FTP, a Content-Length header will be
        present if (as is now usual) the server passed back a file
        length in response to the FTP retrieval request. A
        Content-Type header will be present if the MIME type can be
        guessed.

        When the method is local-file, returned headers will include
        a Date representing the file's last-modified time, a
        Content-Length giving file size, and a Content-Type
        containing a guess at the file's type. See also the
        description of the mimetools module.

        HTTPResponse._peek_chunkedconnect_strconnect_bytesheader_strParses only RFC2822 headers from a file pointer.

    email Parser wants to see strings rather than bytes.
    But a TextIOWrapper around self.rfile would buffer too many bytes
    from the stream, bytes which we later need to read as bytes.
    So we read the correct bytes here, as bytes, for email Parser
    to parse.

    CannotSendRequestReturns the value of the header matching *name*.

        If there are multiple matching headers, the values are
        combined into a single string separated by commas and spaces.

        If no matching header is found, returns *default* or None if
        the *default* is not specified.

        If the headers are unknown, raises http.client.ResponseNotReady.

        _safe_readintoTest whether a file-like object is a text or a binary stream.
        trailer linechunk sizeHTTPConnection._send_outputnetloc_encset_debuglevelendheadersHTTPConnection.set_debuglevelhttp\client.pydata should be a bytes-like object or an iterable, got %rtr_encRemoteDisconnected.__init__Same as _safe_read, but for reading into a buffer.HTTPResponse.isclosedThis class allows communication via SSL.status lineIndicate that the last header line has been sent to the server.

        This method sends the request to the server.  The optional message_body
        argument can be used to pass a message body associated with the
        request.
        UnimplementedFileModePATCH_HTTPConnection__responsecheck_hostname needs a SSL context with either CERT_OPTIONAL or CERT_REQUIREDdefault_porttobytesBadStatusLine.__init__<module http.client>True if the connection is closed._readinto_chunkedHTTPResponse._readall_chunkedReturn the real URL of the page.

        In some cases, the HTTP server redirects a client to another
        URL. The urlopen() function handles this transparently, but in
        some cases the caller needs to know which URL the client was
        redirected to. The geturl() method can be used to get at this
        redirected URL.

        _is_illegal_header_valuefullmatchencoding file using iso-8859-1Find all header lines matching a given header name.

        Look through the list of headers and find all lines matching a given
        header name (and their continuation lines).  A list of the lines is
        returned, without interpretation.  If the header does not occur, an
        empty list is returned.  If the header occurs multiple times, all
        occurrences are returned.  Case is not important in the header name.

        Connect to a host on a given (SSL) port.IncompleteRead.__repr__Invalid header name %rHTTPConnection.endheadersHTTPResponse._read_and_discard_trailerHTTP/1.1 client library

<intro stuff goes here>
<other stuff, too>

HTTPConnection goes through a number of "states", which define when a client
may legally make another request or fetch the response for a particular
request. This diagram details these state transitions:

    (null)
      |
      | HTTPConnection()
      v
    Idle
      |
      | putrequest()
      v
    Request-started
      |
      | ( putheader() )*  endheaders()
      v
    Request-sent
      |\_____________________________
      |                              | getresponse() raises
      | response = getresponse()     | ConnectionError
      v                              v
    Unread-response                Idle
    [Response-headers-read]
      |\____________________
      |                     |
      | response.read()     | putrequest()
      v                     v
    Idle                  Req-started-unread-response
                     ______/|
                   /        |
   response.read() |        | ( putheader() )*  endheaders()
                   v        v
       Request-started    Req-sent-unread-response
                            |
                            | response.read()
                            v
                          Request-sent

This diagram presents the following rules:
  -- a second request may not be started until {response-headers-read}
  -- a response [object] cannot be retrieved until {request-sent}
  -- there is no differentiation between an unread response body and a
     partially read response body

Note: this enforcement is applied by the HTTPConnection class. The
      HTTPResponse class does not enforce this state machine, which
      implies sophisticated clients may accelerate the request/response
      pipeline. Caution should be taken, though: accelerating the states
      beyond the above pattern may imply knowledge of the server's
      connection-close behavior for certain requests. For example, it
      is impossible to tell whether the server will close the connection
      UNTIL the response headers have been read; this means that further
      requests cannot be placed into the pipeline until it is known that
      the server will NOT be closing the connection.

Logical State                  __state            __response
-------------                  -------            ----------
Idle                           _CS_IDLE           None
Request-started                _CS_REQ_STARTED    None
Request-sent                   _CS_REQ_SENT       None
Unread-response                _CS_IDLE           <response_class>
Req-started-unread-response    _CS_REQ_STARTED    <response_class>
Req-sent-unread-response       _CS_REQ_SENT       <response_class>
will_closeTextIOBaseCall data.encode("latin-1") but show a better error message.HTTPResponse.readablegot more than %d headersLineTooLong.__init__Set up host and port for HTTP CONNECT tunnelling.

        In a connection that uses HTTP CONNECT tunneling, the host passed to the
        constructor is used as a proxy server that relays all communication to
        the endpoint passed to `set_tunnel`. This done by sending an HTTP
        CONNECT request to the proxy server when the connection is established.

        This method must be called before the HTML connection has been
        established.

        The headers argument should be a mapping of extra HTTP headers to send
        with the CONNECT request.
        CannotSendHeadernonnumeric port: '%s'HTTPResponse.infoHTTPResponse.filenoHTTPConnection.requestHTTPSConnection.__init__CONNECT %s:%d HTTP/1.0
_http_vsn_strRead the number of bytes requested, compensating for partial reads.

        Normally, we have a blocking socket, but a read() can be interrupted
        by a signal (resulting in a partial read).

        Note that we cannot distinguish between EOF and an interrupt when zero
        bytes have been read. IncompleteRead() will be raised in this
        situation.

        This function should be used when <amt> bytes "should" be present for
        reading. If the bytes are truly not available (due to EOF), then the
        IncompleteRead exception can be used to detect the problem.
        _create_connectionClose the connection to the HTTP server.HTTPResponse._safe_readintoHTTP_PORTHTTPResponse._readinto_chunkedSend a request header line to the server.

        For example: h.putheader('Accept', 'text/html')
        HTTPResponse._read1_chunkedHTTPResponse.getheaderHTTPResponse.readlineCan't set up tunnel for established connectionHTTPResponse.getheadersHTTPResponse.geturl_is_legal_header_nameSend a request to the server.

        `method' specifies an HTTP request method, e.g. 'GET'.
        `url' specifies the object being requested, e.g. '/index.html'.
        `skip_host' if True does not add automatically a 'Host:' header
        `skip_accept_encoding' if True does not add automatically an
           'Accept-Encoding:' header
        Connect to the host and port specified in __init__.HTTPS_PORT%s (%.20r) is not valid Latin-1. Use %s.encode('utf-8') if you want to send it encoded in UTF-8.accept-encodingHTTPConnection.sendSend `data' to the server.
        ``data`` can be a string object, a bytes object, an array object, a
        file-like object that supports a .read() method, or an iterable object.
        MAXAMOUNTsend:HTTPConnection._read_readable_tunnel_hostmessage_body should be a bytes-like object or an iterable, got %rHTTPConnection._send_request.<locals>.<genexpr>Always returns TrueHTTPResponse.flushHTTPConnection.getresponseHTTPResponse._check_closeHTTPResponse.__iter__HTTPConnection._get_content_lengthSimpleHTTPRequestHandler.list_directory.<locals>.<lambda>explainTest whether argument path is a Python script.
Keyboard interrupt received, exiting.shortmsg
    Given a URL path, remove extra '/'s and '.' path elements and collapse
    any '..' references and returns a collapsed path.

    Implements something akin to RFC-2396 5.2 step 6 to parse relative paths.
    The utility of this function is limited to is_cgi method and helps
    preventing some security attacks.

    Returns: The reconstituted URL, which will always start with a '/'.

    Raises: IndexError if too many '..' occur within the path.

    Content-typeHandlerClassVersion of send_head that support CGI scriptsHandle a single HTTP request.

        You normally don't need to override this method; see the class
        __doc__ string for information on how to handle specific HTTP
        commands such as GET and POST.

        	
 CONTENT_LENGTHIf-None-Matchraw_requestlinePATH_INFOclose_connectionQUERY_STRINGREMOTE_HOSTHTTP_USER_AGENTHTTP_COOKIEHTTP_REFERER<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01//EN"
        "http://www.w3.org/TR/html4/strict.dtd">
<html>
    <head>
        <meta http-equiv="Content-Type" content="text/html;charset=utf-8">
        <title>Error response</title>
    </head>
    <body>
        <h1>Error response</h1>
        <p>Error code: %(code)d</p>
        <p>Message: %(message)s.</p>
        <p>Error code explanation: %(code)s - %(explain)s.</p>
    </body>
</html>
Translate a /-separated PATH to the local filename syntax.

        Components that mean special things to the local file system
        (e.g. drive or directory names) are ignored.  (XXX They should
        probably be diagnosed.)

        base_version_number<hr>
<ul>BaseHTTPRequestHandler.parse_requestsend_response_onlyBaseHTTPRequestHandler.log_messagenew_partsnew_urllast_modifBaseHTTPRequestHandler.send_headeris_pythonInternal routine to get nobody's uidsend_errorhave_forkdir_sepHTTP_ACCEPTREMOTE_USERBaseHTTPRequestHandler.send_response/cgi-binCGI script is not a plain file (%r)error_message_formatUnsupported method (%r)ServerClassNo permission to list directory100-continue<meta http-equiv="Content-Type" content="text/html; charset=%s">BaseHTTPRequestHandler.log_date_time_stringSend and log an error reply.

        Arguments are
        * code:    an HTTP error code
                   3 digits
        * message: a simple optional 1 line reason phrase.
                   *( HTAB / SP / VCHAR / %x80-FF )
                   defaults to short entry matching the response code
        * explain: a detailed message defaults to the long entry
                   matching the response code.

        This sends an error response (so it must be called before any
        output has been generated), logs the error, and finally sends
        a piece of HTML explaining the error to the user.

        error_content_typeSimpleHTTP/<html>
<head>CGIHTTPRequestHandler.is_cgiLog an arbitrary message.

        This is used by all other logging functions.  Override
        it if you have specific logging wishes.

        The first argument, FORMAT, is a format string for the
        message to be logged.  If the format string contains
        any % escapes requiring parameters, they should be
        specified as subsequent arguments (it's just like
        printf!).

        The client ip and current date/time are prefixed to
        every message.

        Copy all data between two file objects.

        The SOURCE argument is a file object open for reading
        (or anything with a read() method) and the DESTINATION
        argument is a file object open for writing (or
        anything with a write() method).

        The only reason for overriding this would be to change
        the block size or perhaps to replace newlines by CRLF
        -- note however that this the default server uses this
        to copy binary data as well.

        Handle multiple requests if necessary.Log an accepted request.

        This is called by send_response().

        _url_collapse_pathPython/CGI script exited OKSend the response header only.<title>%s</title>
</head>HTTPServer.server_bind_headers_bufferw.exedo_HEADSimpleHTTPRequestHandler.do_HEAD©)ÚselfÚdirÚrestÚpathÚiÚnextdirÚnextrestÚ	scriptdirÚ_ÚqueryÚscriptÚ
scriptnameÚ
scriptfileÚispyÚenvÚuqrestÚauthorizationÚbase64ÚbinasciiÚlengthÚrefererÚacceptÚlineÚuaÚcoÚ
cookie_strÚkÚdecoded_queryÚargsÚnobodyÚpidÚstsÚ
subprocessÚcmdlineÚinterpÚnbytesÚpÚdataÚstdoutÚstderrÚstatuscgi_directoriesSimpleHTTPRequestHandler.guess_typehttpdhead_partsComplete HTTP server with GET, HEAD and POST commands.

    GET and HEAD also support running CGI scripts.

    The POST command is *only* implemented for CGI scripts.

    user-agentDecide what to do with an "Expect: 100-continue" header.

        If the client is expecting a 100 Continue response, we must
        respond with either a 100 Continue or a final response before
        waiting for the request body. The default is to always respond
        with a 100 Continue. You can behave differently (for example,
        reject unauthorized requests) by overriding this method.

        This method should either return True (possibly after sending
        a 100 Continue response) or send an error response and return
        False.

        /htbinBaseHTTPRequestHandler.handle_expect_100server_nameLog an error.

        This is called when a request cannot be fulfilled.  By
        default it passes the message on to log_message().

        Arguments are the same as for log_message().

        XXX This should go to the separate error log.

        %s - - [%s] %s
CGI/1.1BaseHTTPRequestHandler.log_errorCGI script is not executable (%r)Can only POST to CGI scriptsParse a request (internal).

        The request should be stored in self.raw_requestline; the results
        are in self.command, self.path, self.request_version and
        self.headers.

        Return True for success, False for failure; on failure, any relevant
        error response has already been sent back.

        protocol_versionSimpleHTTPRequestHandler.translate_pathReturn the server software version string.CGIHTTPRequestHandler.send_headIf-Modified-SinceSend a MIME header to the headers buffer.nobody_uidpath_partsdefault_request_versionTest the HTTP request handler class.

    This runs an HTTP server on port 8000 (or the port argument).

    splitpathServe a POST request.

        This is only implemented for CGI scripts.

        PATH_TRANSLATEDcollapsed_pathserve_messagerun_cgiSERVER_PROTOCOLlog_requestREMOTE_ADDRSCRIPT_NAMEBaseHTTPRequestHandler.version_stringDEFAULT_ERROR_CONTENT_TYPESend the blank line ending the MIME headers.CGI script exit status %#xBad request version (%r)application/octet-streamBaseHTTPRequestHandler.address_stringBaseHTTPRequestHandler.handle_one_requestBad request syntax (%r)mnameCommon code for GET and HEAD commands.

        This sends the response code and MIME headers.

        Return value is either a file object (which has to be copied
        to the outputfile by the caller unless the command was HEAD,
        and must be closed by the caller under all circumstances), or
        None, in which case the caller has nothing further to do.

        displaynameflush_headersHTTP request handler base class.

    The following explanation of HTTP serves to guide you through the
    code as well as to expose any misunderstandings I may have about
    HTTP (so you don't need to read the code to figure out I'm wrong
    :-).

    HTTP (HyperText Transfer Protocol) is an extensible protocol on
    top of a reliable stream transport (e.g. TCP/IP).  The protocol
    recognizes three parts to a request:

    1. One line identifying the request type and path
    2. An optional set of RFC-822-style headers
    3. An optional data part

    The headers and data are separated by a blank line.

    The first line of the request has the form

    <command> <path> <version>

    where <command> is a (case-sensitive) keyword such as GET or POST,
    <path> is a string containing path information for the request,
    and <version> should be the string "HTTP/1.0" or "HTTP/1.1".
    <path> is encoded using the URL encoding scheme (using %xx to signify
    the ASCII character with hex code xx).

    The specification specifies that lines are separated by CRLF but
    for compatibility with the widest range of clients recommends
    servers also handle LF.  Similarly, whitespace in the request line
    is treated sensibly (allowing multiple spaces between components
    and allowing trailing whitespace).

    Similarly, for output, lines ought to be separated by CRLF pairs
    but most clients grok LF characters just fine.

    If the first line of the request has the form

    <command> <path>

    (i.e. <version> is left out) then this is assumed to be an HTTP
    0.9 request; this form has no optional headers and data part and
    the reply consists of just the data.

    The reply form of the HTTP 1.x protocol again has three parts:

    1. One line giving the response code
    2. An optional set of RFC-822-style headers
    3. The data

    Again, the headers and data are separated by a blank line.

    The response code line has the form

    <version> <responsecode> <responsestring>

    where <version> is the protocol version ("HTTP/1.0" or "HTTP/1.1"),
    <responsecode> is a 3-digit response code indicating success or
    failure of the request, and <responsestring> is an optional
    human-readable string explaining what the response code means.

    This server parses the request and the headers, and then calls a
    function specific to the request type (<command>).  Specifically,
    a request SPAM will be handled by a method do_SPAM().  If no
    such method exists the server sends an error response to the
    client.  If it exists, it is called with no arguments:

    do_SPAM()

    Note that the request name is case sensitive (i.e. SPAM and spam
    are different requests).

    The various request details are stored in instance variables:

    - client_address is the client IP address in the form (host,
    port);

    - command, path and version are the broken-down request line;

    - headers is an instance of email.message.Message (or a derived
    class) containing the header information;

    - rfile is a file object open for reading positioned at the
    start of the optional input data part;

    - wfile is a file object open for writing.

    IT IS IMPORTANT TO ADHERE TO THE PROTOCOL FOR WRITING!

    The first thing to be written must be the response line.  Then
    follow 0 or more header lines, then a blank line, and then the
    actual data (if any).  The meaning of the header lines depends on
    the command executed by the server; in most cases, when data is
    returned, there should be at least one header line of the form

    Content-type: <type>/<subtype>

    where <type> and <subtype> should be registered MIME types,
    e.g. "text/html" or "text/plain".

    BaseHTTPRequestHandler.send_errorCGIHTTPRequestHandler.is_pythonLine too longhttp\server.pydisplaypathSimpleHTTPRequestHandler.do_GETREQUEST_METHODGuess the type of a file.

        Argument is a PATH (a filename).

        Return value is a string of the form type/subtype,
        usable for a MIME Content-type header.

        The default implementation looks the file's extension
        up in the table self.extensions_map, using application/octet-stream
        as a default; however it would be permissible (if
        slow) to look inside the data to make a better guess.

        <!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01//EN" "http://www.w3.org/TR/html4/strict.dtd">%s %d %s
Directory listing for %slongmsgconntypeHTTP server classes.

Note: BaseHTTPRequestHandler doesn't implement any HTTP request; see
SimpleHTTPRequestHandler for simple implementations of GET, HEAD and POST,
and CGIHTTPRequestHandler for CGI scripts.

It does, however, optionally implement HTTP/1.1 persistent connections,
as of version 0.3.

Notes on CGIHTTPRequestHandler
------------------------------

This class implements GET and POST requests to cgi-bin scripts.

If the os.fork() function is not present (e.g. on Windows),
subprocess.Popen() is used as a fallback, with slightly altered semantics.

In all cases, the implementation is intentionally naive -- all
requests are executed synchronously.

SECURITY WARNING: DON'T USE THIS CODE UNLESS YOU ARE INSIDE A FIREWALL
-- it may execute arbitrary Python code or external programs.

Note that status code 200 is sent prior to execution of a CGI script, so
scripts cannot send other status codes such as 302 (redirect).

XXX To do:

- log requests even later (to capture byte count)
- log user-agent header and other interesting goodies
- send error log to separate file
BaseHTTPRequestHandler.send_response_onlyTest whether self.path corresponds to a CGI script.

        Returns True and updates the cgi_info attribute to the tuple
        (dir, rest) if self.path requires running a CGI script.
        Returns False otherwise.

        If any exception is raised, the caller should assume that
        self.path was rejected as invalid and act accordingly.

        The default implementation tests whether the normalized url
        path begins with one of the strings in self.cgi_directories
        (and the next character is a '/' or the end of the string).

        code %d, message %scommand: %sLast-ModifiedRequest timed out: %rAdd the response header to the headers buffer and log the
        response code.

        Also send two standard headers with the server software
        version and the current date.

        Execute a CGI script.SimpleHTTPRequestHandler.copyfiletrailing_slash</ul>
<hr>
</body>
</html>
SERVER_SOFTWAREweekdaynameThreadingHTTPServerOverride server_bind to store the server name.BaseHTTPRequestHandler.flush_headersdup2GATEWAY_INTERFACESimpleHTTPRequestHandler.__init__is_executableServe a GET request.server_versionSERVER_PORT<module http.server>Serve a HEAD request.DEFAULT_ERROR_MESSAGEgetpwallTest for executable file."%s" %s %sdo_POST<body>
<h1>%s</h1>Test whether argument path is an executable file.CGIHTTPRequestHandler.run_cgiBaseHTTP/<li><a href="%s">%s</a></li>Return the current date and time formatted for a message header.CGIHTTPRequestHandler.is_executableBaseHTTPRequestHandler.log_requestCGIHTTPRequestHandler.do_POSTtail_partHelper to produce a directory listing (absent index.html).

        Return value is either a file object, or None (indicating an
        error).  In either case, the headers are sent, making the
        interface the same as for send_head().

        Too many headersSimple HTTP request handler with GET and HEAD commands.

    This serves files from the current directory and any of its
    subdirectories.  The MIME type for files is determined by
    calling the .guess_type() method.

    The GET and HEAD requests are identical except that the HEAD
    request omits the actual contents of the file.

    execveInvalid HTTP version (%s)Serving HTTP on {host} port {port} (http://{host}:{port}/) ...Return the current time formatted for logging.No such CGI script (%r)SERVER_NAMEScript output followsAUTH_TYPEnobody_uid.<locals>.<genexpr>setuidSimpleHTTPRequestHandler.send_headBad HTTP/0.9 request type (%r)Return the client address.BaseHTTPRequestHandler.end_headersFile not foundBaseHTTPRequestHandler.date_time_string%02d/%3s/%04d %02d:%02d:%02dLazyLoader.create_module{}.__spec__ is Noneset_packagemodule object for Trigger the load and then perform the deletion.__initializing__Resolve a relative module name to an absolute one.exceptions.ModuleNotFoundError does not take keyword argumentsMake the module load lazily.LazyLoader.factory_RAW_MAGIC_NUMBER_LazyModule.__delattr__exec_module while trying to find set_loader substituted in sys.modules during a lazy loadoriginal_nameConstruct a callable which returns the eager loader made lazy.Return the hash of *source_bytes* as used in hash-based pyc files.loader must define exec_module()__check_eager_loaderLazyLoader.__check_eager_loaderset_package_wrapperA loader that creates a module which defers loading until attribute access.fxndecode_source_module_to_loadTrigger the load of the module and return the attribute.LazyLoader.__init__importlib\util.pyparent_nameresolve_nameset_package.<locals>.set_package_wrapperis_reloadattrs_updated_resolve_nameA subclass of the module type which triggers loading upon attribute access.parent_path__path__ attribute not found on source_from_cachemodule_from_specSet __loader__ on the returned module.

    This function is deprecated.

    Return the spec for the specified module.

    First, sys.modules is checked to see if the module was already imported. If
    so, then sys.modules[name].__spec__ is returned. If that happens to be
    set to None, then ValueError is raised. If the module is not in
    sys.modules, then sys.meta_path is searched for a suitable spec with the
    value of 'path' given to the finders. None is returned if no spec could
    be found.

    Dotted names do not have their parent packages implicitly imported. You will
    most likely need to explicitly import all parent packages in the proper
    order for a submodule to get the correct spec.

    module_for_loaderThe import system now takes care of this automatically.module_for_loader_wrapper{}.__spec__ is not setoriginal_type_LazyLoader__check_eager_loader_find_specReturn the spec for the specified module.

    First, sys.modules is checked to see if the module was already imported. If
    so, then sys.modules[name].__spec__ is returned. If that happens to be
    set to None, then ValueError is raised. If the module is not in
    sys.modules, then sys.meta_path is searched for a suitable spec with the
    value of 'path' given to the finders. None is returned if no spec could
    be found.

    If the name is for submodule (contains a dot), the parent module is
    automatically imported.

    The name and package arguments work the same as importlib.import_module().
    In other words, relative module names (with leading dots) work.

    Utility code for constructing importers, etc. (required for relative module names)Decorator to handle selecting the proper module for loaders.

    The decorated function is passed the module to use instead of the module
    name. The module passed in to the function is either from sys.modules if
    it already exists or is a new module. If the module is new, then __name__
    is set the first argument to the method, __loader__ is set to self, and
    __package__ is set accordingly (if self.is_package() is defined) will be set
    before it is passed to the decorated function (if self.is_package() does
    not work for the module it will be set post-load).

    If an exception is raised and the decorator created the module it is
    subsequently removed from sys.modules.

    The decorator assumes that the decorated function takes the module name as
    the second argument.

    set_loader_wrapperLazyLoader.factory.<locals>.<lambda>_LazyModule.__getattribute__module_for_loader.<locals>.module_for_loader_wrapper_find_spec_from_pathattrs_nowset_loader.<locals>.set_loader_wrapperloader_stateno package specified for <module importlib.util>attrs_thenSet __package__ on the returned module.

    This function is deprecated.

    LazyLoader.exec_moduleLogger.criticalaloggergetLoggerClassLogger._logAttempt to overwrite %r in LogRecordlogging\__init__.pyFilter.filter_fixupChildren
    Return the class to be used when instantiating a logger.
    LoggerAdapter.hasHandlers${asctime}'stream' or 'filename' should not be specified together with 'handlers'Logger.info(unknown file)(unknown function)
        Return the header string for the specified records.
        Û*   zBASIC_FORMATzBufferingFormatterzCRITICALzDEBUGzERRORzFATALzFileHandlerzFilterz	FormatterzHandlerzINFOz	LogRecordzLoggerzLoggerAdapterzNOTSETzNullHandlerzStreamHandlerzWARNzWARNINGzaddLevelNamezbasicConfigzcaptureWarningszcriticalzdebugzdisablezerrorz	exceptionzfatalzgetLevelNamez	getLoggerzgetLoggerClasszinfozlogzmakeLogRecordzsetLoggerClasszshutdownzwarnzwarningzgetLogRecordFactoryzsetLogRecordFactoryz
lastResortzraiseExceptionslogProcessesemittedNoHandlerWarning
        Get a logger with the specified name (channel name), creating it
        if it doesn't yet exist. This name is a dot-separated hierarchical
        name, such as "a", "a.b", "a.b.c" or similar.

        If a PlaceHolder existed for the specified name [i.e. the logger
        didn't exist but a child of it did], replace it with the created
        logger and fix up the parent/child references which pointed to the
        placeholder to now point to the logger.
        Unknown level: %rLogger.log
    Set the factory to be used when instantiating a log record.

    :param factory: A callable which will be called to instantiate
    a log record.
    
        Log 'msg % args' with severity 'INFO'.

        To pass exception information, use the keyword argument exc_info with
        a true value, e.g.

        logger.info("Houston, we have a %s", "interesting problem", exc_info=1)
        FileHandler.close
        Log 'msg % args' with the integer severity 'level'.

        To pass exception information, use the keyword argument exc_info with
        a true value, e.g.

        logger.log(level, "We have a %s", "mysterious problem", exc_info=1)
        
        Low-level logging routine which creates a LogRecord and then calls
        all the handlers of this logger to handle the record.
        
        Initialize a logging record with interesting information.
        Filterer.removeFilter
    Disable all logging calls of severity 'level' and below.
    NullHandler.createLockNullHandler.handle
        Acquire a thread lock for serializing access to the underlying I/O.
        
        Initialize the handler.
        Manager._fixupParentsPlaceHolder.append
        Delegate a log call to the underlying logger, after adding
        contextual information from this adapter instance.
        formatFooterStreamHandler.__init__
    Formatter instances are used to convert a LogRecord to text.

    Formatters need to know how a LogRecord is constructed. They are
    responsible for converting a LogRecord to (usually) a string which can
    be interpreted by either a human or an external system. The base Formatter
    allows a formatting string to be specified. If none is supplied, the
    the style-dependent default value, "%(message)s", "{message}", or
    "${message}", is used.

    The Formatter can be initialized with a format string which makes use of
    knowledge of the LogRecord attributes - e.g. the default value mentioned
    above makes use of the fact that the user's message and arguments are pre-
    formatted into a LogRecord's message attribute. Currently, the useful
    attributes in a LogRecord are described by:

    %(name)s            Name of the logger (logging channel)
    %(levelno)s         Numeric logging level for the message (DEBUG, INFO,
                        WARNING, ERROR, CRITICAL)
    %(levelname)s       Text logging level for the message ("DEBUG", "INFO",
                        "WARNING", "ERROR", "CRITICAL")
    %(pathname)s        Full pathname of the source file where the logging
                        call was issued (if available)
    %(filename)s        Filename portion of pathname
    %(module)s          Module (name portion of filename)
    %(lineno)d          Source line number where the logging call was issued
                        (if available)
    %(funcName)s        Function name
    %(created)f         Time when the LogRecord was created (time.time()
                        return value)
    %(asctime)s         Textual time when the LogRecord was created
    %(msecs)d           Millisecond portion of the creation time
    %(relativeCreated)d Time in milliseconds when the LogRecord was created,
                        relative to the time the logging module was loaded
                        (typically at application startup time)
    %(thread)d          Thread ID (if available)
    %(threadName)s      Thread name (if available)
    %(process)d         Process ID (if available)
    %(message)s         The result of record.getMessage(), computed just as
                        the record is emitted
    logger cannot be pickledHandler.get_namehandleError
        Delegate a critical call to the underlying logger.
        
        Ensure that children of the placeholder ph are connected to the
        specified logger.
        
    Filter instances are used to perform arbitrary filtering of LogRecords.

    Loggers and Handlers can optionally use Filter instances to filter
    records as desired. The base filter class only allows events which are
    below a certain point in the logger hierarchy. For example, a filter
    initialized with "A.B" will allow events logged by loggers "A.B",
    "A.B.C", "A.B.C.D", "A.B.D" etc. but not "A.BB", "B.A.B" etc. If
    initialized with the empty string, all events are passed.
    --- Logging error ---

        Initialize with the specified logger being a child of this placeholder.
        Filterer.filter
    Handler instances dispatch logging events to specific destinations.

    The base handler class. Acts as a placeholder which defines the Handler
    interface. Handlers can optionally use Formatter instances to format
    records as desired. By default, no formatter is specified; in this case,
    the 'raw' message as determined by record.message is logged.
    current_process
        See if the underlying logger has any handlers.
        
        Pass a record to all relevant handlers.

        Loop through all handlers for this logger and its parents in the
        logger hierarchy. If no handler was found, output a one-off error
        message to sys.stderr. Stop searching up the hierarchy whenever a
        logger with the "propagate" attribute set to zero is found - that
        will be the last logger whose handlers are called.
        
    Log a message with severity 'WARNING' on the root logger. If the logger has
    no handlers, call basicConfig() to add a console handler with a pre-defined
    format.
    method:
    This handler does nothing. It's intended to be used to avoid the
    "No handlers could be found for logger XXX" one-off warning. This is
    important for library code, which may contain code to log events. If a user
    of the library does not configure logging, the one-off warning might be
    produced; to avoid this, the library developer simply needs to instantiate
    a NullHandler and add it to the top-level logger of the library module or
    package.
    loggerMap_at_fork_acquire_release_weakset
        Is this logger enabled for level 'level'?
        Logger.__repr___checkLevelloggerDict{levelname}:{name}:{message}
        Get the effective level for the underlying logger.
        _srcfileformatStack
        Release the I/O thread lock.
        LoggerAdapter._logLogged from file %s, line %s

        Emit a record.

        If a formatter is specified, it is used to format the record.
        The record is then written to the stream with a trailing newline.  If
        exception information is present, it is formatted using
        traceback.print_exception and appended to the stream.  If the stream
        has an 'encoding' attribute, it is used to determine how to do the
        output to the stream.
        stack_infohandlerListFileHandler._openLogger.removeHandlerLevel not an integer or a valid string: %r
    PlaceHolder instances are used in the Manager logger hierarchy to take
    the place of nodes for which no loggers have been defined. This class is
    intended for internal use only and not as part of the public API.
    
        Tidy up any resources used by the handler.

        This version removes the handler from an internal map of handlers,
        _handlers, which is used for handler lookup by name. Subclasses
        should ensure that this gets called from overridden close()
        methods.
        
        Ensure all logging output has been flushed.

        This version does nothing and is intended to be implemented by
        subclasses.
        _clear_cacheLoggerAdapter.exception
        Process the logging message and keyword arguments passed in to
        a logging call to insert contextual information. You can either
        manipulate the message itself, the keyword args or both. Return
        the message and kwargs modified (or not) to suit your needs.

        Normally, you'll only need to override this one method in a
        LoggerAdapter subclass for your specific needs.
        dfs
        Initialize the list of filters to be an empty list.
        
        Add the specified logger as a child of this placeholder.
        
    Add a handler to the internal cleanup list using a weak reference.
    Formatter.usesTime
        Initialize a filter.

        Initialize with the name of the logger which, together with its
        children, will have its events allowed through the filter. If no
        name is specified, allow every event.
        
    Return the textual representation of logging level 'level'.

    If the level is one of the predefined levels (CRITICAL, ERROR, WARNING,
    INFO, DEBUG) then you get the corresponding string. If you have
    associated levels with names using addLevelName then the name you have
    associated with 'level' is returned.

    If a numeric value corresponding to one of the defined levels is passed
    in, the corresponding string representation is returned.

    Otherwise, the string "Level %s" % level is returned.
    
    Log 'msg % args' with the integer severity 'level' on the root logger. If
    the logger has no handlers, call basicConfig() to add a console handler
    with a pre-defined format.
    
    Perform any cleanup actions in the logging system (e.g. flushing
    buffers).

    Should be called at application exit.
    
    A base class for loggers and handlers which allows them to share
    common code.
    _startTime
    Associate 'levelName' with 'level'.

    This is used when converting levels to text during message formatting.
    
        Delegate a warning call to the underlying logger.
        
        Call the handlers for the specified record.

        This method is used for unpickled records received from a socket, as
        well as those created locally. Logger-level filtering is applied.
        
        Do whatever it takes to actually log the specified logging record.

        This version is intended to be implemented by subclasses and so
        raises a NotImplementedError.
        _logRecordFactoryHandler.formatbaseFilename
        Format the specified record.

        If a formatter is set, use it. Otherwise, use the default formatter
        for the module.
        
        Return the message for this LogRecord.

        Return the message for this LogRecord after merging any user-supplied
        arguments with the message.
        getEffectiveLevel
        Log 'msg % args' with severity 'CRITICAL'.

        To pass exception information, use the keyword argument exc_info with
        a true value, e.g.

        logger.critical("Houston, we have a %s", "major disaster", exc_info=1)
        
    This class is like a StreamHandler using sys.stderr, but always uses
    whatever sys.stderr is currently set to rather than the value of
    sys.stderr at handler construction time.
    
        Delegate an info call to the underlying logger.
        Logger.warnLogger.exception
    A formatter suitable for formatting a number of records.
    _before_at_fork_weak_callsHandler.releaseLogRecord.__str___levelToName
        Delegate a debug call to the underlying logger.
        
        Set the class to be used when instantiating a logger with this Manager.
        
    A root logger is not that different to any other logger, except that
    it must have a logging level and there is only one instance of it in
    the hierarchy.
    
        Initialize the handler.

        If stream is not specified, sys.stderr is used.
        <LogRecord: %s, %s, %s, %s, "%s">get_ident07 February 2010
        This method is provided as an extension point for specialized
        formatting of stack information.

        The input data is a string as returned from a call to
        :func:`traceback.print_stack`, but with the last trailing newline
        removed.

        The base implementation just returns the value passed in.
        _defaultFormatternamelenset_name
        Initialize the adapter with a logger and a dict-like object which
        provides contextual information. This constructor signature allows
        easy stacking of LoggerAdapters, if so desired.

        You can effectively pass keyword arguments as shown in the
        following example:

        adapter = LoggerAdapter(someLogger, dict(p1=v1, p2="v2"))
        
        Low-level log implementation, proxied to allow nested logger adapters.
        
        Initialize the formatter with specified format strings.

        Initialize the formatter either with the specified format string, or a
        default as described above. Allow for specialized date formatting with
        the optional datefmt argument. If datefmt is omitted, you get an
        ISO8601-like (or RFC 3339-like) format.

        Use a style parameter of '%', '{' or '$' to specify that you want to
        use one of %-formatting, :meth:`str.format` (``{}``) formatting or
        :class:`string.Template` formatting in your format string.

        .. versionchanged:: 3.2
           Added the ``style`` parameter.
        
        Log 'msg % args' with severity 'DEBUG'.

        To pass exception information, use the keyword argument exc_info with
        a true value, e.g.

        logger.debug("Houston, we have a %s", "thorny problem", exc_info=1)
        LoggerAdapter.setLevel
        Open the current base file with the (original) mode and encoding.
        Return the resulting stream.
        Handler.emitLoggerAdapter.critical
        Emit a record.

        If the stream was not opened because 'delay' was specified in the
        constructor, open it before calling the superclass's emit.
        
        Log 'msg % args' with severity 'WARNING'.

        To pass exception information, use the keyword argument exc_info with
        a true value, e.g.

        logger.warning("Houston, we have a %s", "bit of a problem", exc_info=1)
        _handlerList${levelname}:${name}:${message}
        Optionally specify a formatter which will be used to format each
        individual record.
        _addHandlerRef
        Set the specified level on the underlying logger.
        NUITKA_PACKAGE_loggingStrFormatStyle.formatrootnodeLogger.debugnlen
    Implementation of showwarnings which redirects to logging, which will first
    check to see if the file parameter is None. If a file is specified, it will
    delegate to the original warnings implementation of showwarning. Otherwise,
    it will call warnings.formatwarning and will log the resulting string to a
    warnings logger named "py.warnings" with level logging.WARNING.
    is_enabledcallHandlers
        Conditionally emit the specified logging record.

        Emission depends on filters which may have been added to the handler.
        Wrap the actual emission of the record with acquisition/release of
        the I/O thread lock. Returns whether the filter passed the record for
        emission.
        _StderrHandler.streamFormatter.formatExceptionLogger.__init__
        Open the specified file and use it as the stream for logging.
        _defaultLastResort<%s (%s)>processName
        Determine if a record is loggable by consulting all the filters.

        The default is to allow the record to be logged; any filter can veto
        this and the record is then dropped. Returns a zero value if a record
        is to be dropped, else non-zero.

        .. versionchanged:: 3.2

           Allow filters to be just callables.
        
        Set the factory to be used when instantiating a log record with this
        Manager.
        _releaseLockNullHandler.emitcurrentframedefault_time_format
    Set the class to be used when instantiating a logger. The class should
    define __init__() such that only a name argument is required, and the
    __init__() should call Logger.__init__()
    LoggerAdapter.getEffectiveLevelasctime_formatHandler.acquirePlaceHolder.__init__'stream' and 'filename' should not be specified togetherCall stack:
<%s %s (%s)>Manager.setLogRecordFactoryStreamHandler.setStreamManager._fixupChildrenBufferingFormatter.formatHeaderIgnoring exception from logging atforkdefault_msec_formatLogRecord.__init__Message: %r
Arguments: %s

        Return the creation time of the specified LogRecord as formatted text.

        This method should be called from format() by a formatter which
        wants to make use of a formatted time. This method can be overridden
        in formatters to provide for any specific requirement, but the
        basic behaviour is as follows: if datefmt (a string) is specified,
        it is used with time.strftime() to format the creation time of the
        record. Otherwise, an ISO8601-like (or RFC 3339-like) format is used.
        The resulting string is returned. This function uses a user-configurable
        function to convert the creation time to a tuple. By default,
        time.localtime() is used; to change this for a particular formatter
        instance, set the 'converter' attribute to a function with the same
        signature as time.localtime() or time.gmtime(). To change it for all
        formatters, for example if you want all logging times to be shown in GMT,
        set the 'converter' attribute in the Formatter class.
        Logger.callHandlersLoggerAdapter.__repr__
    Log a message with severity 'ERROR' on the root logger. If the logger has
    no handlers, call basicConfig() to add a console handler with a pre-defined
    format.
    
    Return the factory to be used when instantiating a log record.
    
        Set the logging level of this logger.  level must be an int or a str.
        
        Delegate an error call to the underlying logger.
        linefmtVinay Sajip <vinay_sajip@red-dove.com>LoggerAdapter.debugFormatter.formatStack
    Remove a handler reference from the internal cleanup list.
    sinfoHandler.setLevelloggerClassLogRecord.getMessageStringTemplateStyle.usesTimefindCaller
        Format the specified records and return the result as a string.
        current_threadLogger.findCaller0.5.1.2Unknown moduleUnable to print the message and arguments - possible formatting error.
Use the traceback above to help find the error.
LoggerAdapter.infoFileHandler.__repr__logMultiprocessing
    Log a message with severity 'CRITICAL' on the root logger. If the logger
    has no handlers, call basicConfig() to add a console handler with a
    pre-defined format.
    Formatter.formatTime
        Handle errors which occur during an emit() call.

        This method should be called from handlers when an exception is
        encountered during an emit() call. If raiseExceptions is false,
        exceptions get silently ignored. This is what is mostly wanted
        for a logging system - most users will not care about errors in
        the logging system, they are more interested in application errors.
        You could, however, replace this with a custom handler if you wish.
        The record which was being processed is passed in to this method.
        
    Instances of the Logger class represent a single logging channel. A
    "logging channel" indicates an area of an application. Exactly how an
    "area" is defined is up to the application developer. Since an
    application can have any number of areas, logging channels are identified
    by a unique string. Application areas can be nested (e.g. an area
    of "input processing" might include sub-areas "read CSV files", "read
    XLS files" and "read Gnumeric files"). To cater for this natural nesting,
    channel names are organized into a namespace hierarchy where levels are
    separated by periods, much like the Java or Python package namespace. So
    in the instance given above, channel names might be "input" for the upper
    level, and "input.csv", "input.xls" and "input.gnu" for the sub-levels.
    There is no arbitrary limit to the depth of nesting.
    
        See if this logger has any handlers configured.

        Loop through all handlers for this logger and its parents in the
        logger hierarchy. Return True if a handler was found, else False.
        Stop searching up the hierarchy whenever a logger with the "propagate"
        attribute set to zero is found - that will be the last logger which
        is checked for the existence of handlers.
        
    Log a message with severity 'ERROR' on the root logger, with exception
    information. If the logger has no handlers, basicConfig() is called to add
    a console handler with a pre-defined format.
    after_in_parentPercentStyle_STYLES
        Initialize the manager with the root node of the logger hierarchy.
        asctime_searchhdlrLoggerAdapter.logBufferingFormatter.formatFooter<module logging>
    Do basic configuration for the logging system.

    This function does nothing if the root logger already has handlers
    configured. It is a convenience method intended for use by simple scripts
    to do one-shot configuration of the logging package.

    The default behaviour is to create a StreamHandler which writes to
    sys.stderr, set a formatter using the BASIC_FORMAT format string, and
    add the handler to the root logger.

    A number of optional keyword arguments may be specified, which can alter
    the default behaviour.

    filename  Specifies that a FileHandler be created, using the specified
              filename, rather than a StreamHandler.
    filemode  Specifies the mode to open the file, if filename is specified
              (if filemode is unspecified, it defaults to 'a').
    format    Use the specified format string for the handler.
    datefmt   Use the specified date/time format.
    style     If a format string is specified, use this to specify the
              type of format string (possible values '%', '{', '$', for
              %-formatting, :meth:`str.format` and :class:`string.Template`
              - defaults to '%').
    level     Set the root logger level to the specified level.
    stream    Use the specified stream to initialize the StreamHandler. Note
              that this argument is incompatible with 'filename' - if both
              are present, 'stream' is ignored.
    handlers  If specified, this should be an iterable of already created
              handlers, which will be added to the root handler. Any handler
              in the list which does not have a formatter assigned will be
              assigned the formatter created in this function.

    Note that you could specify a stream created using open(filename, mode)
    rather than passing the filename and mode in. However, it should be
    remembered that StreamHandler does not close its stream (since it may be
    using sys.stdout or sys.stderr), whereas FileHandler closes its stream
    when the handler is closed.

    .. versionchanged:: 3.2
       Added the ``style`` parameter.

    .. versionchanged:: 3.3
       Added the ``handlers`` parameter. A ``ValueError`` is now thrown for
       incompatible arguments (e.g. ``handlers`` specified together with
       ``filename``/``filemode``, or ``filename``/``filemode`` specified
       together with ``stream``, or ``handlers`` specified together with
       ``stream``.
    
        Set the formatter for this handler.
        _loggerClassStack (most recent call last):
logger not derived from logging.Logger: 
    If capture is true, redirect all warnings to the logging package.
    If capture is False, ensure that warnings are not redirected to logging
    but to their original destinations.
    RootLogger.__init__
    A handler class which writes logging records, appropriately formatted,
    to a stream. Note that this class does not close the stream, as
    sys.stdout or sys.stderr may be used.
    $asctime
        Acquire the I/O thread lock.
        Logger.handle
        Remove the specified handler from this logger.
        
        Flushes the stream.
        Logger.__reduce__
        Initialize the logger with the name "root".
        The 'warn' function is deprecated, use 'warning' insteaddefault_formatLogger.hasHandlers
    Return a logger with the specified name, creating it if necessary.

    If no name is specified, return the root logger.
    LoggerAdapter.name
        Clear the cache for all loggers in loggerDict
        Called when level changes are made
        
        Initialize the logger with a name and an optional level.
        Logger.warningHandler.set_nameLoggerAdapter.process
        Ensure that there are either loggers or placeholders all the way
        from the specified logger to the root of the logger hierarchy.
        <%s %s(%s)>
        A factory method which can be overridden in subclasses to create
        specialized LogRecords.
        __traceback__Logger.getChildNo handlers could be found for logger "%s"
Unrecognised argument(s): %s_tplReturn the frame object for the caller's stack frame.Manager.setLoggerClassRootLogger.__reduce__BufferingFormatter.__init___register_at_fork_acquire_releaseexc_text
    Release the module-level lock acquired by calling _acquireLock().
    %s,%03dManager.getLoggerLoggerAdapter.__init__emit must be implemented by Handler subclasses
        Format the specified record as text.

        The record's attribute dictionary is used as the operand to a
        string formatting operation which yields the returned string.
        Before formatting the dictionary, a couple of preparatory steps
        are carried out. The message attribute of the record is computed
        using LogRecord.getMessage(). If the formatting string uses the
        time (as determined by a call to usesTime(), formatTime() is
        called to format the event time. If there is exception information,
        it is formatted using formatException() and appended to the message.
        StreamHandler.flushLogger.makeRecord
        Initializes the instance - basically setting the formatter to None
        and the filter list to empty.
        
        Remove the specified filter from this handler.
        StreamHandler.emit
        Log 'msg % args' with severity 'ERROR'.

        To pass exception information, use the keyword argument exc_info with
        a true value, e.g.

        logger.error("Houston, we have a %s", "major problem", exc_info=1)
        LoggerAdapter.manager
        Get a logger which is a descendant to this one.

        This is a convenience method, such that

        logging.getLogger('abc').getChild('def.ghi')

        is the same as

        logging.getLogger('abc.def.ghi')

        It's useful, for example, when the parent logger is named using
        __name__ rather than a literal string.
        _warnings_showwarning
    There is [under normal circumstances] just one Manager instance, which
    holds the hierarchy of loggers.
    _removeHandlerRefLoggerAdapter.warningFilter.__init__Style must be one of: %s
        Check if the format uses the creation time of the record.
        
Logging package for Python. Based on PEP 282 and comments thereto in
comp.lang.python.

Copyright (C) 2001-2017 Vinay Sajip. All Rights Reserved.

To use, simply 'import logging' and log away!
_StderrHandler.__init__PercentStyle.__init__
        Format and return the specified exception information as a string.

        This default implementation just uses
        traceback.print_exception()
        Handler.handleErrorFileHandler.__init__Formatter.formatMessage
        Return the footer string for the specified records.
        Stub.productionThe 'warn' method is deprecated, use 'warning' instead
    A LogRecord instance represents an event being logged.

    LogRecord instances are created every time something is logged. They
    contain all the information pertinent to the event being logged. The
    main information passed in is in msg and args, which are combined
    using str(msg) % args to create the message field of the record. The
    record also includes information such as when the record was created,
    the source line where the logging call was made, and any exception
    information to be logged.
    MainProcessFilterer.__init__
        Get the effective level for this logger.

        Loop through this logger and its parents in the logger hierarchy,
        looking for a non-zero logging level. Return the first one found.
        
        Find the stack frame of the caller so that we can note the source
        file name, line number and function name.
        
        Set the logging level of this handler.  level must be an int or a str.
        %Y-%m-%d %H:%M:%S
        Add the specified filter to this handler.
        Logger.getEffectiveLevel__status__Logger.addHandlerHandler.setFormatterStreamHandler.__repr__Filterer.addFilterPercentStyle.usesTime
    Acquire the module-level lock for serializing access to shared data.

    This should be released with _releaseLock().
    isEnabledForlevel must be an integer
        Convenience method for logging an ERROR with exception information.
        Manager._clear_cacheLogger.isEnabledFor
    Log a message with severity 'DEBUG' on the root logger. If the logger has
    no handlers, call basicConfig() to add a console handler with a pre-defined
    format.
    StringTemplateStyle.format
    An adapter for loggers which makes it easier to specify contextual
    information in logging output.
    
    Log a message with severity 'INFO' on the root logger. If the logger has
    no handlers, call basicConfig() to add a console handler with a pre-defined
    format.
    Logger.setLevelStringTemplateStyle.__init___after_at_fork_weak_calls
    Make a LogRecord whose attributes are defined by the specified dictionary,
    This function is useful for converting a logging event received over
    a socket connection (which is sent as a dictionary) into a LogRecord
    instance.
    
        Sets the StreamHandler's stream to the specified value,
        if it is different.

        Returns the old stream, if the stream was changed, or None
        if it wasn't.
        LoggerAdapter.errorLoggerAdapter.isEnabledForFileHandler.emit
        Add the specified handler to this logger.
        PercentStyle.formatlogThreads
        Determine if the specified record is to be logged.

        Is the specified record to be logged? Returns 0 for no, nonzero for
        yes. If deemed appropriate, the record may be modified in-place.
        
    A handler class which writes formatted logging records to disk files.
    Logger.errorA logger name must be a string
        Closes the stream.
        
        Delegate an exception call to the underlying logger.
        LZMAFile.readlineTrue if this file is closed.lzma.pyLZMAFile.__init__FORMAT_AUTOReturn the current file position.Compressed data ended before the end-of-stream marker was reachedRead a line of uncompressed bytes from the file.

        The terminating newline (if present) is retained. If size is
        non-negative, no more than size bytes will be read (in which
        case the line may be incomplete). Returns b'' if already at EOF.
        LZMAFile.close_lzmaDecompress a block of data.

    Refer to LZMADecompressor's docstring for a description of the
    optional arguments *format*, *check* and *filters*.

    For incremental decompression, use an LZMADecompressor instead.
    Interface to the liblzma compression library.

This module provides a class for reading and writing compressed files,
classes for incremental (de)compression, and convenience functions for
one-shot (de)compression.

These classes and functions support both the XZ and legacy LZMA
container formats, as well as raw compressed data streams.
_MODE_CLOSED_MODE_WRITELZMAFile.writable_check_can_read<module lzma>Return the file descriptor for the underlying file.Compress a block of data.

    Refer to LZMACompressor's docstring for a description of the
    optional arguments *format*, *check*, *preset* and *filters*.

    For incremental compression, use an LZMACompressor instead.
    LZMAFile.tellRead up to size uncompressed bytes from the file.

        If size is negative or omitted, read until EOF is reached.
        Returns b"" if the file is already at EOF.
        Cannot specify a preset compression level when opening a file for readingLZMAFile.filenoÛ$   z
CHECK_NONEzCHECK_CRC32zCHECK_CRC64zCHECK_SHA256zCHECK_ID_MAXzCHECK_UNKNOWNzFILTER_LZMA1zFILTER_LZMA2zFILTER_DELTAz
FILTER_X86zFILTER_IA64z
FILTER_ARMzFILTER_ARMTHUMBzFILTER_POWERPCzFILTER_SPARCzFORMAT_AUTOz	FORMAT_XZzFORMAT_ALONEz
FORMAT_RAWzMF_HC3zMF_HC4zMF_BT2zMF_BT3zMF_BT4z	MODE_FASTzMODE_NORMALzPRESET_DEFAULTzPRESET_EXTREMEzLZMACompressorzLZMADecompressorzLZMAFilez	LZMAErrorzopenzcompressz
decompresszis_check_supportedWrite a bytes object to the file.

        Returns the number of uncompressed bytes written, which is
        always len(data). Note that due to buffering, the file on disk
        may not reflect the data written until close() is called.
        LZMAFile.peek_check_can_seekLZMAFile.read1lz_modeLZMAFile.writeReturn whether the file supports seeking.Return buffered data without advancing the file position.

        Always returns at least one byte of data, unless at EOF.
        The exact number of bytes returned is unspecified.
        Cannot specify an integrity check when opening a file for readingReturn whether the file was opened for reading.mode_codeRead up to size uncompressed bytes, while trying to avoid
        making multiple reads from the underlying stream. Reads up to a
        buffer's worth of data if size is negative.

        Returns b"" if the file is at EOF.
        filename must be a str, bytes, file or PathLike objectOpen an LZMA-compressed file in binary or text mode.

    filename can be either an actual file name (given as a str, bytes,
    or PathLike object), in which case the named file is opened, or it
    can be an existing file object to read from or write to.

    The mode argument can be "r", "rb" (default), "w", "wb", "x", "xb",
    "a", or "ab" for binary mode, or "rt", "wt", "xt", or "at" for text
    mode.

    The format, check, preset and filters arguments specify the
    compression settings, as for LZMACompressor, LZMADecompressor and
    LZMAFile.

    For binary mode, this function is equivalent to the LZMAFile
    constructor: LZMAFile(filename, mode, ...). In this case, the
    encoding, errors and newline arguments must not be provided.

    For text mode, an LZMAFile object is created, and wrapped in an
    io.TextIOWrapper instance with the specified encoding, error
    handling behavior, and line ending(s).

    Open an LZMA-compressed file in binary mode.

        filename can be either an actual file name (given as a str,
        bytes, or PathLike object), in which case the named file is
        opened, or it can be an existing file object to read from or
        write to.

        mode can be "r" for reading (default), "w" for (over)writing,
        "x" for creating exclusively, or "a" for appending. These can
        equivalently be given as "rb", "wb", "xb" and "ab" respectively.

        format specifies the container format to use for the file.
        If mode is "r", this defaults to FORMAT_AUTO. Otherwise, the
        default is FORMAT_XZ.

        check specifies the integrity check to use. This argument can
        only be used when opening a file for writing. For FORMAT_XZ,
        the default is CHECK_CRC64. FORMAT_ALONE and FORMAT_RAW do not
        support integrity checks - for these formats, check must be
        omitted, or be CHECK_NONE.

        When opening a file for reading, the *preset* argument is not
        meaningful, and should be omitted. The *filters* argument should
        also be omitted, except when format is FORMAT_RAW (in which case
        it is required).

        When opening a file for writing, the settings used by the
        compressor can be specified either as a preset compression
        level (with the *preset* argument), or in detail as a custom
        filter chain (with the *filters* argument). For FORMAT_XZ and
        FORMAT_ALONE, the default is to use the PRESET_DEFAULT preset
        level. For FORMAT_RAW, the caller must always specify a filter
        chain; the raw compressor does not support preset compression
        levels.

        preset (if provided) should be an integer in the range 0-9,
        optionally OR-ed with the constant PRESET_EXTREME.

        filters (if provided) should be a sequence of dicts. Each dict
        should have an entry for "id" indicating ID of the filter, plus
        additional entries for options to the filter.
        A file object providing transparent LZMA (de)compression.

    An LZMAFile can act as a wrapper for an existing file object, or
    refer directly to a named file on disk.

    Note that LZMAFile provides a *binary* file interface - data read
    is returned as bytes, and data to be written must be given as bytes.
    Change the file position.

        The new position is specified by offset, relative to the
        position indicated by whence. Possible values for whence are:

            0: start of stream (default): offset must not be negative
            1: current stream position
            2: end of stream; offset must not be positive

        Returns the new file position.

        Note that seeking is emulated, so depending on the parameters,
        this operation may be extremely slow.
        _closefp_MODE_READLZMAFile.seekableLZMAFile.readableReturn whether the file was opened for writing.memlimittrailing_errorFlush and close the file.

        May be called more than once without error. Once the file is
        closed, any other operation on it will raise a ValueError.
        _check_can_writeLZMAFile.closed/usr/local/etc/httpd/conf/mime.types/etc/httpd/mime.types.svgztypes_map_invMimeTypesREG_SZread_windows_registry/usr/local/lib/netscape/mime.typesAdd a mapping between a type and an extension.

        When the extension is already known, the new
        type will replace the old one. When the type
        is already known the extension will be added
        to the list of known extensions.

        If strict is true, information will be added to
        list of standard types, else to the list of non-standard
        types.
        image/jpgMimeTypes.read_windows_registry.<locals>.enum_typessuffix_maptext/xulOpenKey<module mimetypes>.jpgguess_all_extensionsGuess the extensions for a file based on its MIME type.

    Return value is a list of strings giving the possible filename
    extensions, including the leading dot ('.').  The extension is not
    guaranteed to have been associated with any particular data
    stream, but would be mapped to the MIME type `type' by
    guess_type().  If no extension can be guessed for `type', None
    is returned.

    Optional `strict' argument when false adds a bunch of commonly found,
    but non-standard types.
    Guess the extensions for a file based on its MIME type.

        Return value is a list of strings giving the possible filename
        extensions, including the leading dot ('.').  The extension is not
        guaranteed to have been associated with any particular data stream,
        but would be mapped to the MIME type `type' by guess_type().

        Optional `strict' argument when false adds a bunch of commonly found,
        but non-standard types.
        datatypecommon_typesmimedb/etc/apache/mime.types.svg.gz.tazread_mime_typesMimeTypes.guess_typesuffixesMimeTypes.guess_all_extensionsGuess the extension for a file based on its MIME type.

    Return value is a string giving a filename extension, including the
    leading dot ('.').  The extension is not guaranteed to have been
    associated with any particular data stream, but would be mapped to the
    MIME type `type' by guess_type().  If no extension can be guessed for
    `type', None is returned.

    Optional `strict' argument when false adds a bunch of commonly found,
    but non-standard types.
    Add a mapping between a type and an extension.

    When the extension is already known, the new
    type will replace the old one. When the type
    is already known the extension will be added
    to the list of known extensions.

    If strict is true, information will be added to
    list of standard types, else to the list of non-standard
    types.
    
        Load the MIME types database from Windows registry.

        If strict is true, information will be added to
        list of standard types, else to the list of non-standard
        types.
        subkeyMimeTypes.guess_extensionknownfiles.picsubkeyname.midiûz.azapplication/octet-streamz.aizapplication/postscriptz.aifzaudio/x-aiffz.aifczaudio/x-aiffz.aiffzaudio/x-aiffz.auzaudio/basicz.avizvideo/x-msvideoz.batz
text/plainz.bcpiozapplication/x-bcpioz.binzapplication/octet-streamz.bmpz	image/bmpz.cz
text/plainz.cdfzapplication/x-netcdfz.cpiozapplication/x-cpioz.cshzapplication/x-cshz.cssztext/cssz.csvztext/csvz.dllzapplication/octet-streamz.doczapplication/mswordz.dotzapplication/mswordz.dvizapplication/x-dviz.emlzmessage/rfc822z.epszapplication/postscriptz.etxztext/x-setextz.exezapplication/octet-streamz.gifz	image/gifz.gtarzapplication/x-gtarz.hz
text/plainz.hdfzapplication/x-hdfz.htmz	text/htmlz.htmlz	text/htmlz.icozimage/vnd.microsoft.iconz.iefz	image/iefz.jpez
image/jpegz.jpegz
image/jpegz.jpgz
image/jpegz.jszapplication/javascriptz.jsonzapplication/jsonz.kshz
text/plainz.latexzapplication/x-latexz.m1vz
video/mpegz.m3uzapplication/vnd.apple.mpegurlz.m3u8zapplication/vnd.apple.mpegurlz.manzapplication/x-troff-manz.mezapplication/x-troff-mez.mhtzmessage/rfc822z.mhtmlzmessage/rfc822z.mifzapplication/x-mifz.mjszapplication/javascriptz.movzvideo/quicktimez.moviezvideo/x-sgi-moviez.mp2z
audio/mpegz.mp3z
audio/mpegz.mp4z	video/mp4z.mpaz
video/mpegz.mpez
video/mpegz.mpegz
video/mpegz.mpgz
video/mpegz.mszapplication/x-troff-msz.nczapplication/x-netcdfz.nwszmessage/rfc822z.ozapplication/octet-streamz.objzapplication/octet-streamz.odazapplication/odaz.p12zapplication/x-pkcs12z.p7czapplication/pkcs7-mimez.pbmzimage/x-portable-bitmapz.pdfzapplication/pdfz.pfxzapplication/x-pkcs12z.pgmzimage/x-portable-graymapz.plz
text/plainz.pngz	image/pngz.pnmzimage/x-portable-anymapz.potzapplication/vnd.ms-powerpointz.ppazapplication/vnd.ms-powerpointz.ppmzimage/x-portable-pixmapz.ppszapplication/vnd.ms-powerpointz.pptzapplication/vnd.ms-powerpointz.pszapplication/postscriptz.pwzzapplication/vnd.ms-powerpointz.pyztext/x-pythonz.pyczapplication/x-python-codez.pyozapplication/x-python-codez.qtzvideo/quicktimez.razaudio/x-pn-realaudioz.ramzapplication/x-pn-realaudioz.raszimage/x-cmu-rasterz.rdfzapplication/xmlz.rgbzimage/x-rgbz.roffzapplication/x-troffz.rtxztext/richtextz.sgmztext/x-sgmlz.sgmlztext/x-sgmlz.shzapplication/x-shz.sharzapplication/x-sharz.sndzaudio/basicz.sozapplication/octet-streamz.srczapplication/x-wais-sourcez.sv4cpiozapplication/x-sv4cpioz.sv4crczapplication/x-sv4crcz.svgzimage/svg+xmlz.swfzapplication/x-shockwave-flashz.tzapplication/x-troffz.tarzapplication/x-tarz.tclzapplication/x-tclz.texzapplication/x-texz.texizapplication/x-texinfoz.texinfozapplication/x-texinfoz.tifz
image/tiffz.tiffz
image/tiffz.trzapplication/x-troffz.tsvztext/tab-separated-valuesz.txtz
text/plainz.ustarzapplication/x-ustarz.vcfztext/x-vcardz.wavzaudio/x-wavz.webmz
video/webmz.wizzapplication/mswordz.wsdlzapplication/xmlz.xbmzimage/x-xbitmapz.xlbzapplication/vnd.ms-excelz.xlszapplication/vnd.ms-excelz.xmlztext/xmlz.xpdlzapplication/xmlz.xpmzimage/x-xpixmapz.xslzapplication/xmlz.xwdzimage/x-xwindowdumpz.zipzapplication/zip0Content TypeMimeTypes.add_type
        Read a single mime.types-format file.

        If strict is true, information will be added to
        list of standard types, else to the list of non-standard
        types.
        /usr/local/etc/mime.types/etc/apache2/mime.typesEnumKeyapplication/rtfMimeTypes.__init__image/pictreadfp.rtf.pictMIME-types datastore.

    This datastore can handle information from mime.types-style files
    and supports basic determination of MIME type from a filename or
    URL, and can guess a reasonable extension given a MIME type.
    .xulHKEY_CLASSES_ROOTMimeTypes.readfp.pctGuess the type of a file based on its URL.

    Return value is a tuple (type, encoding) where type is None if the
    type can't be guessed (no or unknown suffix) or a string of the
    form type/subtype, usable for a MIME Content-type header; and
    encoding is None for no encoding or the name of the program used
    to encode (e.g. compress or gzip).  The mappings are table
    driven.  Encoding suffixes are case sensitive; type suffixes are
    first tried case sensitive, then case insensitive.

    The suffixes .tgz, .taz and .tz (case sensitive!) are all mapped
    to ".tar.gz".  (This is table-driven too, using the dictionary
    suffix_map).

    Optional `strict' argument when false adds a bunch of commonly found, but
    non-standard types.
    
        Read a single mime.types-format file, specified by pathname.

        If strict is true, information will be added to
        list of standard types, else to the list of non-standard
        types.
        encodings_maphkcrGuess the MIME type of a file.

This module defines two useful functions:

guess_type(url, strict=True) -- guess the MIME type and encoding of a URL.

guess_extension(type, strict=True) -- guess the extension for a given MIME type.

It also contains the following, for tuning the behavior:

Data:

knownfiles -- list of files to parse
inited -- flag set when init() has been called
suffix_map -- dictionary mapping suffixes to suffixes
encodings_map -- dictionary mapping suffixes to encodings
types_map -- dictionary mapping suffixes to types

Functions:

init([files]) -- parse a list of files, default knownfiles (on Windows, the
  default values are taken from the registry)
read_mime_types(file) -- parse one file, return a dictionary or None
Guess the extension for a file based on its MIME type.

        Return value is a string giving a filename extension,
        including the leading dot ('.').  The extension is not
        guaranteed to have been associated with any particular data
        stream, but would be mapped to the MIME type `type' by
        guess_type().  If no extension can be guessed for `type', None
        is returned.

        Optional `strict' argument when false adds a bunch of commonly found,
        but non-standard types.
        audio/midi_default_mime_typesmimetypes.pyGuess the type of a file based on its URL.

        Return value is a tuple (type, encoding) where type is None if
        the type can't be guessed (no or unknown suffix) or a string
        of the form type/subtype, usable for a MIME Content-type
        header; and encoding is None for no encoding or the name of
        the program used to encode (e.g. compress or gzip).  The
        mappings are table driven.  Encoding suffixes are case
        sensitive; type suffixes are first tried case sensitive, then
        case insensitive.

        The suffixes .tgz, .taz and .tz (case sensitive!) are all
        mapped to '.tar.gz'.  (This is table-driven too, using the
        dictionary suffix_map.)

        Optional `strict' argument when False adds a bunch of commonly found,
        but non-standard types.
        D:\GitHub\DM_colloquium_2019\modulesmodules\N.pyN1<module modules.N>modules\P.pyC1prevkprevd<module modules.P>q3gcfmodules\Q.py<module modules.Q>nokp_2p_1p_3z3modules\Z.py<module modules.Z>Rational.__str__Polinomial.copy<module modules.classes>Integer.copya0Integer.read_from_strRational.copyInteger.__str__Natural.__str__Natural.read_from_strInteger.__init__Rational.__init__modules\classes.pyPolinomial.__init__Polinomial.__str__Natural.copyNatural.__init__TYPED_ACTIONSOptionParser.print_helpOptionContainer.format_descriptionoption %s: invalid %s value: %roption %s: invalid choice: %r (choose from %s)_update_careful_match_long_optOptionParser.format_option_help
    Raised if an ambiguous option is seen on the command line.
    no such option: %sHelpFormatter.set_long_opt_delimiteropt_str
        parse_args(args : [string] = sys.argv[1:],
                   values : Values = None)
        -> (values : Values, args : [string])

        Parse the command-line options found in 'args' (default:
        sys.argv[1:]).  Any errors result in a call to 'error()', which
        by default prints the usage message to stderr and calls
        sys.exit() with an error message.  On success returns a pair
        (values, args) where 'values' is a Values instance (with all
        your option values) and 'args' is the list of arguments left
        over after parsing options.
        rargsnext_arghad_explicit_valueat least one option string must be suppliedOptionContainer._share_option_mappingsAmbiguousOptionErrorOption.__init__choices must be a list of strings ('%s' supplied)make_optionSUPPRESS_HELPSUPPRESS_USAGEOptionGroupIndentedHelpFormatterTitledHelpFormatterOptParseErrorOptionConflictErrorOptionValueErrorBadOptionErrorcheck_choiceAmbiguousOptionError.__str___short_optstakes_valuelong_optsUsage: %s
Option.get_opt_stringcheck_valuesOptionParser._process_long_optOptionParser.__init___check_destexpand_prog_nameexpand_defaultA powerful, extensible, and easy-to-use option parser.

By Greg Ward <gward@python.net>

Originally distributed as Optik.

For support, use the optik-users@lists.sourceforge.net mailing list
(http://lists.sourceforge.net/lists/listinfo/optik-users).

Simple usage example:

   from optparse import OptionParser

   parser = OptionParser()
   parser.add_option("-f", "--file", dest="filename",
                     help="write report to FILE", metavar="FILE")
   parser.add_option("-q", "--quiet",
                     action="store_false", dest="verbose", default=True,
                     help="don't print status messages to stdout")

   (options, args) = parser.parse_args()
c_option%s option does not take a valueValues._updatedisable_interspersed_argsambiguous option: %s (%s?)_parse_numoption %s: %sOptionParser.disable_interspersed_argsOptionParser.get_default_valuesOptionParser._process_short_optsformat_option_stringsIndentedHelpFormatter.format_headingOptionParser.enable_interspersed_argssee OptionParser.destroy().OptionParser.parse_argsstore_option_stringsOptionParser.exit_check_opt_strings
    Raised if conflicting options are added to an OptionParser.
    _parse_intOptionContainer._check_conflictread_moduleno such option %rOptionParser.set_process_default_valuescallback supplied (%r) for non-callback option_long_opt_fmtinvalid argumentsValues.read_fileOptionParser.add_option_groupAmbiguousOptionError.__init__print_versionSet parsing to stop on the first non-option. Use this if
        you have a command processor which runs another command that
        has options of its own and you want to make sure these options
        don't get confused.
        OptParseError.__init__Option.takes_valueSUPPRESSHELPIndentedHelpFormatter.__init__HelpFormatter.format_optionSet parsing to not stop on the first non-option, allowing
        interspersing switches with command arguments. This is the
        default behavior. See also disable_interspersed_args() and the
        class documentation description of the attribute
        allow_interspersed_args.add_optionsradixhas_option_set_opt_stringsOption._set_opt_stringsNO_DEFAULT_VALUEset_descriptionHelpFormatter.dedent_get_all_optionssingularconflict_opts_create_option_list0bOption._check_opt_strings
        Declare that you are done with this OptionParser.  This cleans up
        reference cycles so the OptionParser (and all objects referenced by
        it) can be garbage-collected promptly.  After calling destroy(), the
        OptionParser is unusable.
        OptionParser.expand_prog_namecallback_args, if supplied, must be a tuple: not %rHelpFormatter.set_parserwordmap_add_help_option%defaultmust not supply a type for action %r
    Raised if an invalid option is seen on the command line.
    Option._check_destValues._update_looseOptionGroup._create_option_listmust supply a list of choices for type 'choice'largs%(option)s option requires %(number)d arguments_init_parsing_statecallback_kwargsBadOptionError.__init__OptionParser._add_help_option%prog [options]get_descriptionOptionContainer.get_optionget_option_groupHelpFormatter.format_usageOption._check_choice_builtin_cvtOption.take_actionconflicting option string(s): %sOption._check_type
        Update the option values from an arbitrary dictionary, but only
        use keys from dict that already have a corresponding attribute
        in self.  Any keys in dict without a corresponding attribute
        are silently ignored.
        OptionContainer.remove_optionlopt
Copyright (c) 2001-2006 Gregory P. Ward.  All rights reserved.
Copyright (c) 2002-2006 Python Software Foundation.  All rights reserved.

Redistribution and use in source and binary forms, with or without
modification, are permitted provided that the following conditions are
met:

  * Redistributions of source code must retain the above copyright
    notice, this list of conditions and the following disclaimer.

  * Redistributions in binary form must reproduce the above copyright
    notice, this list of conditions and the following disclaimer in the
    documentation and/or other materials provided with the distribution.

  * Neither the name of the author nor the names of its
    contributors may be used to endorse or promote products derived from
    this software without specific prior written permission.

THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS
IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED
TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A
PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE AUTHOR OR
CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
HelpFormatter.format_descriptionOptParseError.__str__get_usageset_usageOptionParser.print_usage'nargs' must not be supplied for action %rOptionParser._populate_option_list_add_version_optionOptionContainer.destroy'const' must not be supplied for action %rOptionParser.check_values_short_opt_fmt%s: error: %s
TitledHelpFormatter.format_usage_check_constFormat help with underlined section headers.
    Option.__str__callback_args supplied for non-callback optionValues.read_moduleFormat help with indented section bodies.
    Values._update_carefulinvalid conflict_resolution value %rset_titleHelpFormatter.store_option_stringsinvalid metavar delimiter for short options: %r1.5.3OptionParser.set_defaultstandard_option_listfloating-pointHelpFormatter.expand_defaultOptionContainer.format_helpOptionParser.set_usageOption._set_attrsHelpFormatter.set_short_opt_delimiterOption._check_nargs
        check_values(values : Values, args : [string])
        -> (values : Values, args : [string])

        Check that the supplied option values and leftover arguments are
        valid.  Returns the option values and leftover arguments
        (possibly adjusted, possibly completely new -- whatever you
        like).  Default implementation just returns the passed-in
        values; subclasses may override as desired.
        Option._check_action_match_abbrev(s : string, wordmap : {string : Option}) -> string

    Return the string key in 'wordmap' for which 's' is an unambiguous
    abbreviation.  If 's' is found to be ambiguous or doesn't match any of
    'words', raise BadOptionError.
    OptionContainer.add_optionshort_firstadd_option(Option)
           add_option(opt_str, ..., kwarg=val, ...)
        TitledHelpFormatter.format_headingoptparse.pyOptionParser._create_option_listOption._check_callbackmust not supply choices for type %rprint_version(file : file = stdout)

        Print the version message for this program (self.version) to
        'file' (default stdout).  As with print_usage(), any occurrence
        of "%prog" in self.version is replaced by the current program's
        name.  Does nothing if self.version is empty or undefined.
        _process_argsensure_valueOptionContainer.has_optionOptionContainer.set_conflict_handlercallback_kwargs supplied for non-callback optionOptionParser.format_helpValues.__eq__OptionGroup.destroyOptionGroup.format_helpBadOptionError.__str__CONST_ACTIONSget_prog_nameOptionParser._add_version_optioninvalid option string %r: must be at least two characters longOption.convert_value_create_option_mappingsOptionParser.format_epilogoption_classinvalid option type: %rOptionGroup.set_title--versionOptionParser._process_argsOptionParser._get_argsOption.processoption_groupsATTRScallback not callable: %rOptionParser.get_descriptionprint_help(file : file = stdout)

        Print an extended help message, listing all options and any
        help text provided with them, to 'file' (default stdout).
        OptionParser.get_usageopt_width
        Format a paragraph of free-form text for inclusion in the
        help output at the current indentation level.
        error(msg : string)

        Print a usage message incorporating 'msg' to stderr and exit.
        If you override this in a subclass, it should not return -- it
        should either exit or raise an exception.
        OptionParser.errorValues.ensure_valueinvalid OptionGroup (wrong parser)OptionContainer.set_descriptionTYPE_CHECKEROptionContainer._create_option_mappingsHelpFormatter.format_option_strings
        Update the option values from an arbitrary dictionary,
        using all keys from the dictionary regardless of whether
        they have a corresponding attribute in self or not.
        OptionContainer.get_description
    Class attributes:
      standard_option_list : [Option]
        list of standard options that will be accepted by all instances
        of this parser class (intended to be overridden by subclasses).

    Instance attributes:
      usage : string
        a usage string for your program.  Before it is displayed
        to the user, "%prog" will be expanded to the name of
        your program (self.prog or os.path.basename(sys.argv[0])).
      prog : string
        the name of the current program (to override
        os.path.basename(sys.argv[0])).
      description : string
        A paragraph of text giving a brief overview of your program.
        optparse reformats this paragraph to fit the current terminal
        width and prints it when the user requests help (after usage,
        but before the list of options).
      epilog : string
        paragraph of help text to print after option help

      option_groups : [OptionGroup]
        list of option groups in this parser (option groups are
        irrelevant for parsing the command-line, but very useful
        for generating help)

      allow_interspersed_args : bool = true
        if true, positional arguments may be interspersed with options.
        Assuming -a and -b each take a single argument, the command-line
          -ablah foo bar -bboo baz
        will be interpreted the same as
          -ablah -bboo -- foo bar baz
        If this flag were false, that command line would be interpreted as
          -ablah -- foo bar -bboo baz
        -- ie. we stop processing options as soon as we see the first
        non-option argument.  (This is the tradition followed by
        Python's getopt module, Perl's Getopt::Std, and other argument-
        parsing libraries, but it is generally annoying to users.)

      process_default_values : bool = true
        if true, option default values are processed similarly to option
        values from the command line: that is, they are passed to the
        type-checking function for the option's type (as long as the
        default value is a string).  (This really only matters if you
        have defined custom types; see SF bug #955889.)  Set it to false
        to restore the behaviour of Optik 1.4.1 and earlier.

      rargs : [string]
        the argument list currently being parsed.  Only set when
        parse_args() is active, and continually trimmed down as
        we consume arguments.  Mainly there for the benefit of
        callback options.
      largs : [string]
        the list of leftover arguments that we have skipped while
        parsing options.  If allow_interspersed_args is false, this
        list is always empty.
      values : Values
        the set of option values currently being accumulated.  Only
        set when parse_args() is active.  Also mainly for callbacks.

    Because of the 'rargs', 'largs', and 'values' attributes,
    OptionParser is not thread-safe.  If, for some perverse reason, you
    need to parse command-line arguments simultaneously in different
    threads, use different OptionParser instances.

    CHECK_METHODSOptionParser.print_versioncheck_builtinnot an Option instance: %rHelpFormatter.indentOption._check_const
    Raised if an Option instance is created with invalid or
    inconsistent arguments.
    default_tagOptionParser.get_version<%s at 0x%x: %s>STORE_ACTIONSunknown action %roption_idTitledHelpFormatter.__init__<module optparse>OptionParser._init_parsing_stateOption.check_valueinvalid action: %r_process_args(largs : [string],
                         rargs : [string],
                         values : Values)

        Process command-line arguments and populate 'values', consuming
        options and arguments from 'rargs'.  If 'allow_interspersed_args' is
        false, stop at the first non-option argument.  If true, accumulate any
        interspersed non-option arguments in 'largs'.
        OptionContainer.format_option_helpReturn a comma-separated list of option strings & metavariables.not an OptionGroup instance: %r
    Raised if an invalid option value is encountered on the command
    line.
    %s  %s
_long_opts_match_long_opt(opt : string) -> string

        Determine which long option string 'opt' matches, ie. which one
        it is an unambiguous abbreviation for.  Raises BadOptionError if
        'opt' doesn't unambiguously match any long option string.
        
    Abstract base class for formatting option help.  OptionParser
    instances should use one of the HelpFormatter subclasses for
    formatting help; by default IndentedHelpFormatter is used.

    Instance attributes:
      parser : OptionParser
        the controlling OptionParser instance
      indent_increment : int
        the number of columns to indent per nesting level
      max_help_position : int
        the maximum starting column for option help text
      help_position : int
        the calculated starting column for option help text;
        initially the same as the maximum
      width : int
        total number of columns for output (pass None to constructor for
        this value to be taken from the $COLUMNS environment variable)
      level : int
        current indentation level
      current_indent : int
        current indentation level (in columns)
      help_width : int
        number of columns available for option help text (calculated)
      default_tag : str
        text to replace with each option's default value, "%default"
        by default.  Set to false value to disable default value expansion.
      option_strings : { Option : str }
        maps Option instances to the snippet of help text explaining
        the syntax of that option, e.g. "-h, --help" or
        "-fFILE, --file=FILE"
      _short_opt_fmt : str
        format string controlling how short options with values are
        printed in help text.  Must be either "%s%s" ("-fFILE") or
        "%s %s" ("-f FILE"), because those are the two syntaxes that
        Optik supports.
      _long_opt_fmt : str
        similar but for long options; must be either "%s %s" ("--file FILE")
        or "%s=%s" ("--file=FILE").
    print_usage(file : file = stdout)

        Print the usage message for the current program (self.usage) to
        'file' (default stdout).  Any occurrence of the string "%prog" in
        self.usage is replaced with the name of the current program
        (basename of sys.argv[0]).  Does nothing if self.usage is empty
        or not defined.
        OptionContainer.__init__OptionParser.get_prog_nameSUPPRESSUSAGEValues.__init__OptionGroup.__init__OptionParser._match_long_optinvalid metavar delimiter for long options: %rinvalid long option string %r: must start with --, followed by non-dashinvalid short option string %r: must be of the form -x, (x any non-dash char)OptionParser._get_all_optionsinvalid keyword arguments: %scallback_kwargs, if supplied, must be a dict: not %rsubclasses must implementValues.__str__IndentedHelpFormatter.format_usageHelpFormatter.format_epilogOptionParser.get_option_groupinvalid update mode: %r
    Abstract base class.

    Class attributes:
      standard_option_list : [Option]
        list of standard options that will be accepted by all instances
        of this parser class (intended to be overridden by subclasses).

    Instance attributes:
      option_list : [Option]
        the list of Option objects contained by this OptionContainer
      _short_opt : { string : Option }
        dictionary mapping short option strings, eg. "-f" or "-X",
        to the Option instances that implement them.  If an Option
        has multiple short option strings, it will appear in this
        dictionary multiple times. [1]
      _long_opt : { string : Option }
        dictionary mapping long option strings, eg. "--file" or
        "--exclude", to the Option instances that implement them.
        Again, a given Option can occur multiple times in this
        dictionary. [1]
      defaults : { string : any }
        dictionary mapping option destination names to default
        values for each destination [1]

    [1] These mappings are common to (shared by) all components of the
        controlling OptionParser, where they are initially created.

    
    Instance attributes:
      _short_opts : [string]
      _long_opts : [string]

      action : string
      type : string
      dest : string
      default : any
      nargs : int
      const : any
      choices : [string]
      callback : function
      callback_args : (any*)
      callback_kwargs : { string : any }
      help : string
      metavar : string
    ALWAYS_TYPED_ACTIONS--commandfind_functionProduce a reasonable default.Restart_rstr.__repr__(Pdb) ENTERING RECURSIVE DEBUGGERexec(compile(%r, %r, 'exec'))do_runenvHomePdb.do_jumpdo_continuedo_stepdo_nextdo_returndo_quitcmdlistcomplete_enableCurrently displaying:
Program interrupted. (Use 'cont' to resume).Pdb.do_commandsdef\s+%s\s*[(]_runscriptPdb.do_unaliasPdb.interactiondisable bpnumber [bpnumber ...]
        Disables the breakpoints given as a space separated list of
        breakpoint numbers.  Disabling a breakpoint means it cannot
        cause the program to stop execution, but unlike clearing a
        breakpoint, it remains in the list of breakpoints and can be
        (re-)enabled.
        do_retvalThis method is called when there is the remote possibility
        that we ever need to stop in this function.call_tracingPdb.reset_complete_bpnumberPdb._getval_complete_locationBreakpoint %d is now unconditional.do_exitPdb.setupPdb.lookupmodule--KeyboardInterrupt--Pdb.defaultFiledo_interacttb_lasticomplete_clEOF
        Handles the receipt of EOF as a command.
        Newest framewith arguments:d(own) [count]
        Move the current frame count (default one) levels down in the
        stack trace (to a newer frame).
        numberlistWill stop next time breakpoint %d is reached.New condition set for breakpoint %d.old_command_defscommands_silentdisplay %s: %r  [old: %r]** raised %s **Pdb._complete_bpnumberDeleted %sPdb.help_execcl(ear) filename:lineno
cl(ear) [bpnumber [bpnumber...]]
        With a space separated list of breakpoint numbers, clear
        those breakpoints.  Without argument, clear all breaks (but
        first ask confirmation).  With a filename:lineno argument,
        clear all breaks at that line in that file.
        [EOF]<module pdb>exc_linenoPdb.do_enable"until" line number is smaller than current line numbercondition bpnumber [condition]
        Set a new condition for the breakpoint, an expression which
        must evaluate to true before the breakpoint is honored.  If
        condition is absent, any existing condition is removed; i.e.,
        the breakpoint is made unconditional.
        Enabled %sPdb.messagefindsourcewhatis arg
        Print the type of the argument.
        do_displaydo_disabletbreak [ ([filename:]lineno | function) [, condition] ]
        Same arguments as break, but sets a temporary breakpoint: it
        is automatically deleted when first hit.
        do_pNot yet returned!complete_commandsignore bpnumber [count]
        Set the ignore count for the given breakpoint number.  If
        count is omitted, the ignore count is set to 0.  A breakpoint
        becomes active when the ignore count is zero.  When non-zero,
        the count is decremented each time the breakpoint is reached
        and the breakpoint is not disabled and any associated
        condition evaluates to true.
        debug code
        Enter a recursive debugger that steps through the code
        argument (which is an arbitrary expression or statement to be
        executed in the current environment).
         	
`@#$%^&*()=+[{]}\|;:'",<>?h(elp)
        Without argument, print the list of available commands.
        With a command name as argument, print help about that command.
        "help pdb" shows the full pdb documentation.
        "help exec" gives help on the ! command.
        Pdb.preloopPdb._cmdloopcomplete_printPdb.do_helpPdb.do_EOFdo_longlistPdb._runmoduleYou can only jump within the bottom frameUncaught exception. Entering post mortem debuggingcommands_definingprint_stack_tracebreaklistClass %s.%s--command=Pdb.do_disabledo_whatisUsage: commands [bnum]
        ...
        end--Call--Interpret the argument as though it had been typed in response
        to the prompt.

        Checks whether this line is typed at the normal prompt or in
        a breakpoint command list definition.
        run_as_moduleHandle alias expansion and ';;' separator.Disabled %simport x; x.main()countstrÛ"   zhelpzwherezdownzupzbreakztbreakzclearzdisablezenablezignorez	conditionzcommandszstepznextzuntilzjumpzreturnzretvalzrunzcontinuezlistzlonglistzargsÚpzppzwhatiszsourcezdisplayz	undisplayzinteractzaliaszunaliaszdebugzquittmpArgrun [args...]
        Restart the debugged python program. If a string is supplied
        it is split with "shlex", and the result is used as the new
        sys.argv.  History, breakpoints, actions and debugger options
        are preserved.  "restart" is an alias for "run".
        Jump failed: %scomplete_ppBlank or commentunt(il) [lineno]
        Without argument, continue execution until the line with a
        number greater than the current one is reached.  With a line
        number, continue execution until a line with a number greater
        or equal to that is reached.  In both cases, also stop when
        the current frame returns.
        Pdb.do_ignoreCustom displayhook for the exec in default(), which prevents
        assignment of the _ variable in the builtins.
        %s = %rcommands_resumingPdb.do_whatisA valid traceback must be passed if no exception is being handleddo_untdo_ppcommand definition aborted, old commands restoredPdb.do_aliasClear all breaks? TESTCMDRunning 'cont' or 'step' will restart the programbp_commandsPdb.do_interactdo_ll_user_requested_quitdo_restartcurframeThis function is called if an exception occurs,
        but only if we are to stop at or just below this level.rjustPdb._complete_expressionnewframeforgetnot displaying %scomplete_whatisoldvaluedo_upcomplete_ignore1 crossingenable bpnumber [bpnumber ...]
        Enables the breakpoints given as a space separated list of
        breakpoint numbers.
        Invalid frame count (%s)curframe_localsPdb._getval_exceptString that doesn't quote its repr.do_debugreadrcThe specified object %r is not a function or was not found along sys.path.s(tep)
        Execute the current line, stop at the first possible occasion
        (either in a function that is called or in the current
        function).
        longlist | ll
        List the whole source code for the current function or frame.
        Pdb.do_retvalcommands_bnumPdb.do_nextPdb._runscript_help_orderThis function is called when we stop or break at this line.Pdb._complete_locationPdb.user_callBreakpoint %d at %s:%dlineinfoprompt_backThe program exited via sys.exit(). Exit status:Bad lineno: %sp expression
        Print the value of the expression.
        Pdb.bp_commandsPdb.do_until_print_linessave_stdinn(ext)
        Continue execution until the next line in the current function
        is reached or it returns.
        Pdb.user_exceptionMethod %srcLinescomplete_source_previous_sigint_handlerThe 'jump' command requires a line numberNum Type         Disp Enb   WherePdb.do_conditionThis function is called when a return trap is set here.Pdb._select_framemhc:alias [name [command [parameter parameter ...] ]]
        Create an alias called 'name' that executes 'command'.  The
        command must *not* be enclosed in quotes.  Replaceable
        parameters can be indicated by %1, %2, and so on, while %* is
        replaced by all the parameters.  If no command is given, the
        current alias for name is shown. If no name is given, all
        aliases are listed.

        Aliases may be nested and can contain anything that can be
        legally typed at the pdb prompt.  Note!  You *can* override
        internal pdb commands with aliases!  Those internal commands
        are then hidden until the alias is removed.  Aliasing is
        recursively applied to the first word of the command line; all
        other words in the line are left alone.

        As an example, here are two useful aliases (especially when
        placed in the .pdbrc file):

        # Print instance variables (usage "pi classInst")
        alias pi for k in %1.__dict__.keys(): print("%1.",k,"=",%1.__dict__[k])
        # Print instance variables in self
        alias ps pi self
        rcFileCall every command that was set for the current active breakpoint
        (if there is one).

        Returns True if the normal interaction function must be called,
        False otherwise.prompt_prefixPdb.do_listusage: pdb.py [-c command] ... [-m module | pyfile] [arg] ...

Debug the Python program given by pyfile. Alternatively,
an executable module or package to debug can be specified using
the -m switch.

Initial commands are read from .pdbrc files in your home directory
and in the current directory, if they exist.  Commands supplied with
-c are executed after commands from .pdbrc files.

To let the script run until an exception occurs, use "-c continue".
To let the script run up to a given line X in the debugged file, use
"-c 'until X'". will be restartedb(reak) [ ([filename:]lineno | function) [, condition] ]
        Without argument, list all breaks.

        With a line number argument, set a break at this line in the
        current file.  With a function name, set a break at the first
        executable line of that function.  If a second argument is
        present, it is a string specifying an expression which must
        evaluate to true before the breakpoint is honored.

        The line number may be prefixed with a filename and a colon,
        to specify a breakpoint in another file (probably one that
        hasn't been loaded yet).  The file is searched for on
        sys.path; the .py suffix may be omitted.
        complete_conditiona(rgs)
        Print the argument list of the current function.
        lastcmd_backdo_btallow_kbdintset_completer_delimsw(here)
        Print a stack trace, with the most recent frame at the bottom.
        An arrow indicates the "current frame", which determines the
        context of most commands.  'bt' is an alias for this command.
        Check whether specified line seems to be executable.

        Return `lineno` if it is, 0 if not (e.g. a docstring, comment, blank
        line or EOF). Warning: testing is not comprehensive.
        print_stack_entrylasti2linenoPdb.onecmdr(eturn)
        Continue execution until the current function returns.
        do_argsdo_tbreakPdb._print_linesPost mortem debugger finished. The Handles one command line during command list definition.Pdb.do_clearPdb.do_returnunalias name
        Delete the specified alias.
        display [expression]

        Display the value of the expression if it changed, each time execution
        stops in the current frame.

        Without expression, list all display expressions for the current frame.
        Pdb.help_pdbcomplete_displaycomplete_clear%s = *** undefined ***post_mortem%r not found from sys.pathPdb.do_stepline_prefixcomplete_unaliascommands [bpnumber]
        (com) ...
        (com) end
        (Pdb)

        Specify a list of commands for breakpoint number bpnumber.
        The commands themselves are entered on the following lines.
        Type a line containing just 'end' to terminate the commands.
        The commands are executed when the breakpoint is hit.

        To remove all commands from a breakpoint, type commands and
        follow it immediately with end; that is, give no commands.

        With no bpnumber argument, commands refers to the last
        breakpoint set.

        You can use breakpoint commands to start your program up
        again.  Simply use the continue command, or step, or any other
        command that resumes execution.

        Specifying any command resuming execution (currently continue,
        step, next, return, jump, quit and their abbreviations)
        terminates the command list (as if that command was
        immediately followed by end).  This is because any time you
        resume execution (even with a simple next or step), you may
        encounter another breakpoint -- which could have its own
        command list, leading to ambiguities about which list to
        execute.

        If you use the 'silent' command in the command list, the usual
        message about stopping at a breakpoint is not printed.  This
        may be desirable for breakpoints that are to print a specific
        message and then continue.  If none of the other commands
        print anything, you will see no sign that the breakpoint was
        reached.
        execRcLinesNo help for %r; please do not run Python with -OO if you need command helpPdb.handle_command_defPdb.forgetPdb.print_stack_entrylinestartsdo_wherePdb.do_upInvalid line number (%s)Pdb.complete_undisplayPdb.do_undisplayco_argcount
The Python Debugger Pdb
=======================

To use the debugger in its simplest form:

        >>> import pdb
        >>> pdb.run('<a statement>')

The debugger's prompt is '(Pdb) '.  This will stop in the first
function call in <a statement>.

Alternatively, if a statement terminated with an unhandled exception,
you can use pdb's post-mortem facility to inspect the contents of the
traceback:

        >>> <a statement>
        <exception traceback>
        >>> import pdb
        >>> pdb.pm()

The commands recognized by the debugger are listed in the next
section.  Most can be abbreviated as indicated; e.g., h(elp) means
that 'help' can be typed as 'h' or 'help' (but not as 'he' or 'hel',
nor as 'H' or 'Help' or 'HELP').  Optional arguments are enclosed in
square brackets.  Alternatives in the command syntax are separated
by a vertical bar (|).

A blank line repeats the previous command literally, except for
'list', where it lists the next 11 lines.

Commands that the debugger doesn't recognize are assumed to be Python
statements and are executed in the context of the program being
debugged.  Python statements can also be prefixed with an exclamation
point ('!').  This is a powerful way to inspect the program being
debugged; it is even possible to change variables or call functions.
When an exception occurs in such a statement, the exception name is
printed but the debugger's state is not changed.

The debugger supports aliases, which can save typing.  And aliases can
have parameters (see the alias help entry) which allows one a certain
level of adaptability to the context under examination.

Multiple commands may be entered on a single line, separated by the
pair ';;'.  No intelligence is applied to separating the commands; the
input is split at the first ';;', even if it is in the middle of a
quoted string.

If a file ".pdbrc" exists in your home directory or in the current
directory, it is read in and executed as if it had been typed at the
debugger prompt.  This is particularly useful for aliases.  If both
files exist, the one in the home directory is read first and aliases
defined there can be overridden by the local file.  This behavior can be
disabled by passing the "readrc=False" argument to the Pdb constructor.

Aside from aliases, the debugger is not directly programmable; but it
is implemented as a class from which you can derive your own debugger
class, which you can make as fancy as you like.


Debugger commands
=================

Causes a debugger to be restarted for the debugged python program.Pdb.do_continuedo_breakpp expression
        Pretty-print the value of the expression.
        j(ump) lineno
        Set the next line that will be executed.  Only available in
        the bottom-most frame.  This lets you jump back and execute
        code again, or jump forward to skip code that you don't want
        to run.

        It should be noted that not all jumps are allowed -- for
        instance it is not possible to jump into the middle of a
        for loop or out of a finally clause.
        Will ignore next %s of breakpoint %d.Pdb.do_pp%s = %sRestartingPdb.complete_unaliasu(p) [count]
        Move the current frame count (default one) levels up in the
        stack trace (to an older frame).
        mainpyfilePrint a range of lines.Pdb.lineinfocurrent_linenoFunction %sdo_downexc_tracebackPdb.user_linePdb.errorPdb.do_debugPdb.sigint_handlerc(ont(inue))
        Continue execution, only stop when a breakpoint is encountered.
        checklineError in argument: %r%d crossingsOldest framePdb.precmddo_rvdo_source_wait_for_mainpyfilePdb.execRcLinesThe program finished and will be restarted__exception__--Return--*interactive*getblockPdb.displayhookPdb.do_tbreakcomplete_tbreakPdb.do_sourcePdb.do_downPdb.do_breakcurindexcomplete_debugPdb.do_runHelper function for break/clear parsing -- may be overridden.

        lookupmodule() translates (possibly incomplete) file or module name
        into an absolute file name.
        undisplay [expression]

        Do not display the expression any more in the current frame.

        Without expression, clear all display expressions for the current frame.
        complete_disablePdb.do_longlistq(uit)
exit
        Quit from the debugger. The program being executed is aborted.
        l(ist) [first [,last] | .]

        List source code for the current file.  Without arguments,
        list 11 lines around the current line or continue the previous
        listing.  With . as argument, list 11 lines around the current
        line.  With one argument, list 11 lines starting at that line.
        With two arguments, list the given range; if the second
        argument is less than the first, it is a count.

        The current line in the current frame is indicated by "->".
        If an exception is being debugged, the line where the
        exception was originally raised or propagated is indicated by
        ">>", if it differs from the current line.
        source expression
        Try to get source code for the given object and display it.
        findlinestartsPdb.do_quitcomplete_breakPdb.do_displayLEAVING RECURSIVE DEBUGGERPdb.do_whereinteract

        Start an interactive interpreter whose global namespace
        contains all the (global and local) names found in the current scope.
        retval
        Print the return value for the last return of a function.
        co_varnames
-> commands_dopromptgetsourcelinesPdb.do_argsPdb.user_returnPdb.checklinePdb.print_stack_trace(!) statement
        Execute the (one-line) statement in the context of the current
        stack frame.  The exclamation point can be omitted unless the
        first word of the statement resembles a debugger command.  To
        assign to a global variable you must always prefix the command
        with a 'global' command, e.g.:
        (Pdb) global list_options; list_options = ['-l']
        (Pdb)
        _Unframer.load_frame__newobj_ex__<module pickle>load_pop_markload_setitemsfix_importsescape_decodeLONG_batch_setitemsREDUCEload_short_binbytes_Pickler.get_Unpickler.load_ext1BINPERSID_Unpickler.load_getobj2lastnamer_name_mappingr_import_mapping_Unpickler.load_markinst_dictLONG_BINPUTsave_persistent_idBINGETFALSEload_short_binunicode_Unpickler.load_persidload_binunicode8EXT2NEWOBJ_EX_Unpickler.load_setitems_Pickler.put_Pickler.save_typeload_frozensetload_protoclear_memo_Unpickler.load_unicode3.0STACK_GLOBAL requires strislicefunc from save_reduce() must be callable_Unpickler.load_long_binget_Pickler.save_reduce_Unpickler.load_obj_Pickler.save_bool_Unpickler.load_tuple_Unpickler.load_binintload_newobj_ex_Pickler.save_setpickle protocol must be <= %dEXT specifies code <= 0HIGHEST_PROTOCOLNEWTRUEargs[0] from {} args has no __new__commit_framesubpathAPPENDS_file_readline_Unpickler.load_binput_inverted_registrydictitemscompatible_formats_Stop.__init___Pickler.memoizebyteorderWrite a pickled representation of obj to the open file.BINBYTES exceeds system's maximum size of %d bytesload_empty_dictionary_Unpickler.load_build_Framer.end_framingload_long4DICTmetastackgetbufferCreate portable serialized representations of Python objects.

See module copyreg for a mechanism for registering custom picklers.
See module pickletools source for extensive comments.

Classes:

    Pickler
    Unpickler

Functions:

    dump(object, file)
    dumps(object) -> string
    load(file) -> object
    loads(string) -> object

Misc variables:

    __version__
    format_version
    compatible_formats

args[0] from __newobj__ args has the wrong classload_stack_globalstart_framing_Framer.__init__BINUNICODEbytes_typesFROZENSET_Pickler.save_dictwrite_large_bytesEMPTY_LISTload_instbeginning of a new frame before end of current framedecode_longframe_size1.3unsupported persistent id encountered_Pickler.save_global_extension_registry_extension_cache_write_large_bytesargs from save_reduce() must be a tupleThis takes a binary file for writing a pickle data stream.

        The optional *protocol* argument tells the pickler to use the
        given protocol; supported protocols are 0, 1, 2, 3 and 4.  The
        default protocol is 3; a backward-incompatible protocol designed
        for Python 3.

        Specifying a negative protocol version selects the highest
        protocol version supported.  The higher the protocol used, the
        more recent the version of Python needed to read the pickle
        produced.

        The *file* argument must have a write() method that accepts a
        single bytes argument. It can thus be a file object opened for
        binary writing, an io.BytesIO instance, or any other custom
        object that meets this interface.

        If *fix_imports* is True and *protocol* is less than 3, pickle
        will try to map the new Python 3 names to the old module names
        used in Python 2, so that the pickle data stream is readable
        with Python 2.
        BINUNICODE8 exceeds system's maximum size of %d bytes_Framer.writeload_tuple2load_globalDEFAULT_PROTOCOLcan't pickle global identifier '%s.%s' using pickle protocol %i\u005cload_stopload_additems_unframerpersistent IDs in protocol 0 must be ASCII strings_Unpickler.load_long4_Unpickler.load_short_binbytesBUILDget_extensionA common base class for the other pickling exceptions._Unpickler.load_short_binunicode_Unpickler.__init__load_binint2Clears the pickler's "memo".

        The memo is the data structure that remembers which objects the
        pickler has already seen, so that shared or recursive objects
        are pickled by reference and not by value.  This method is
        useful when re-using picklers.
        Decode a long from a two's complement little-endian binary string.

    >>> decode_long(b'')
    0
    >>> decode_long(b"\xff\x00")
    255
    >>> decode_long(b"\xff\x7f")
    32767
    >>> decode_long(b"\x00\xff")
    -256
    >>> decode_long(b"\x00\x80")
    -32768
    >>> decode_long(b"\x80")
    -128
    >>> decode_long(b"\x7f")
    127
    PickleErrorEMPTY_SETI00
save_bytesstopinstBINSTRING pickle has negative byte countload_false_Pickler.save_tupleTUPLE3list_objBININT2_BATCHSIZE\u000aload_empty_setCan't load pickle from unicode stringload_intnegative PUT argumentpickle exhausted before end of frameTUPLE1_Pickler.save_str_Unpickler.load_falseThis exception is raised when an unpicklable object is passed to the
    dump() method.

    POP_MARKLONG pickle has negative byte count_Unpickler.load_proto%s must return string or tupleload_ext2load_tuple1_Unpickler.load_newobjSHORT_BINBYTESUnpickler.__init__() was not called by %s.__init__()LONG1save_long_Pickler._batch_setitemsEMPTY_TUPLE_Unpickler.load_long1_Unpickler.load_newobj_exload_ext4Can't pickle %r: it's not the same object as %s.%sBINBYTES8_file_writeload_float_Unpickler.load_binget_Unpickler.load_binint2persistent_loadThis exception is raised when there is a problem unpickling an object,
    such as a security violation.

    Note that other exceptions may also be raised during unpickling, including
    (but not necessarily limited to) AttributeError, EOFError, ImportError,
    and IndexError.

    load_append_Pickler.save_long_Unpickler.load_additemsBINBYTES8 exceeds system's maximum size of %d bytes_Unpickler.load_ext2_dumpsload_appends[A-Z][A-Z0-9_]+$_Unpickler.pop_markSETITEMsave_frozenset_Unpickler.load_binbytes8Can't pickle %r: it's not found as %s.%sSHORT_BINSTRING_tuplesize2code_decode_stringload_listload_empty_list_Unpickler.load_short_binstringload_putFLOATset_obj_Unpickler.load_string_Unpickler.find_classunsupported pickle protocol: %dUnpicklingError_Unpickler._instantiate_Unpickler.load_instNEWFALSE_Unpickler.load_pop_markcurrent_frameload_memoize_Unpickler.get_extensionSHORT_BINUNICODE_loadsBINUNICODE exceeds system's maximum size of %d bytes_Unpickler.load_dup_Unpickler.load_stack_globalfile_tell_Unframer.read_Unpickler.load_binpersid_Unpickler.load_binunicode8_Unpickler.load_empty_set_Unpickler.load_globalEncode a long to a two's complement little-endian binary string.
    Note that 0 is a special case, returning an empty string, to save a
    byte in the LONG1 pickling context.

    >>> encode_long(0)
    b''
    >>> encode_long(255)
    b'\xff\x00'
    >>> encode_long(32767)
    b'\xff\x7f'
    >>> encode_long(-256)
    b'\x00\xff'
    >>> encode_long(-32768)
    b'\x00\x80'
    >>> encode_long(-128)
    b'\x80'
    >>> encode_long(127)
    b'\x7f'
    >>>
    negative BINPUT argumentload_nonenegative LONG_BINPUT argument_Framer.start_framing_Unpickler.load_binint1_Pickler.save_floatThis takes a binary file for reading a pickle data stream.

        The protocol version of the pickle is detected automatically, so
        no proto argument is needed.

        The argument *file* must have two methods, a read() method that
        takes an integer argument, and a readline() method that requires
        no arguments.  Both methods should return bytes.  Thus *file*
        can be a binary file object opened for reading, an io.BytesIO
        object, or any other custom object that meets this interface.

        The file-like object must have two methods, a read() method
        that takes an integer argument, and a readline() method that
        requires no arguments.  Both methods should return bytes.
        Thus file-like object can be a binary file object opened for
        reading, a BytesIO object, or any other custom object that
        meets this interface.

        Optional keyword arguments are *fix_imports*, *encoding* and
        *errors*, which are used to control compatibility support for
        pickle stream generated by Python 2.  If *fix_imports* is True,
        pickle will try to map the old Python 2 names to the new names
        used in Python 3.  The *encoding* and *errors* tell pickle how
        to decode 8-bit string instances pickled by Python 2; these
        default to 'ASCII' and 'strict', respectively. *encoding* can be
        'bytes' to read theses 8-bit string instances as bytes objects.
        Can't get attribute {!r} on {!r}EMPTY_DICTCan't pickle %r object: %rLONG4_Pickler._batch_appends_Unpickler.load_frame_Unpickler.load_reduce_FRAME_SIZE_TARGET_Unpickler.load_tuple3save_none_Pickler.__init___FRAME_SIZE_MINargs[0] from {} args has the wrong classBINFLOAT_Pickler.persistent_id_Pickler.clear_memo_Unpickler.load_frozensetload_empty_tupleload_binstringfile must have a 'write' attribute_Unpickler.load_long_binputEXT1Read a pickled object representation from the open file.

        Return the reconstituted object hierarchy specified in the file.
        _Unpickler.persistent_loadTUPLE2listitemsI01
_Unpickler.load_empty_list_Pickler.dump_Unpickler._decode_stringSETITEMS_Unpickler.load_ext4frame size > sys.maxsize: %dwhichmoduleADDITEMS_Unpickler.load_empty_tuple_Unpickler.load_trueunregistered extension code %dFind the module an object belong to.EXT4_Unpickler.load_dict_Pickler.save_bytesEllipsisthe STRING opcode argument must be quotedTuple returned by %s must have two to five elementssave_listDUP_Pickler.save_none_Unpickler.load_tuple2_Unpickler.load_binfloatLONG_BINGETin constructor for %s: %s_Unpickler.load_memoizePickler.__init__() was not called by %s.__init__()_Unpickler.load_int_Unpickler.load_stopStore an object in the memo._Unpickler.load_binstringMEMOIZE_Unframer.readline_Framer.commit_frame_Framer.write_large_bytes_Unpickler.load_float_Unpickler.load_empty_dictionary_Unpickler.load_list_Unpickler.load_put_Unpickler.load_appends_Unframer.__init___Pickler.save_persargs[0] from __newobj__ args has no __new___Unpickler.load_tuple1_Pickler.save_listCan't get local attribute {!r} on {!r}_Unpickler.load_noneBININT1_Pickler.save_frozensetImpImporter.find_moduleModuleInfomodule_finder name ispkgget_loaderarchiveiter_zipimport_modulesmod_typeImpLoader.get_sourcedircontentspkgfileCan't open %s: %s
find_loaderparent_packagepath must be None or list of paths to look for modules initer_importersextend_pathImpLoader.get_codepath_itemRetrieve a finder for the given path item

    The returned finder is cached in sys.path_importer_cache
    if it was newly created by a path hook.

    The cache (or part of it) can be cleared manually if a
    rescan of sys.path_hooks is necessary.
    .pkgGet a resource from a package.

    This is a wrapper round the PEP 302 loader get_data API. The package
    argument should be the name of a package, in standard module format
    (foo.bar). The resource argument should be in the form of a relative
    filename, using '/' as the path separator. The parent directory name '..'
    is not allowed, and nor is a rooted name (starting with a '/').

    The function returns a binary string, which is the contents of the
    specified resource.

    For packages located in the filesystem, which have already been imported,
    this is the rough equivalent of

        d = os.path.dirname(sys.modules[package].__file__)
        data = open(os.path.join(d, resource), 'rb').read()

    If the package cannot be located or loaded, or it uses a PEP 302 loader
    which does not support get_data(), then None is returned.
    <module pkgutil>ImpLoader.get_dataImpLoader.get_filename_reopenReturn the finder-specific module spec.load_modulepkgutil.py_zip_directory_cacheExtend a package's path.

    Intended use is to place the following code in a package's __init__.py:

        from pkgutil import extend_path
        __path__ = extend_path(__path__, __name__)

    This will add to the package's __path__ all subdirectories of
    directories on sys.path named after the package.  This is useful
    if one wants to distribute different parts of a single logical
    package as multiple directories.

    It also looks for *.pkg files beginning where * matches the name
    argument.  This feature is similar to *.pth files (see site.py),
    except that it doesn't special-case lines starting with 'import'.
    A *.pkg file is trusted at face value: apart from checking for
    duplicates, all entries found in a *.pkg file are added to the
    path, regardless of whether they are exist the filesystem.  (This
    is a feature.)

    If the input path is not a list (as is the case for frozen
    packages) it is returned unchanged.  The input path is not
    modified; an extended copy is returned.  Items are only appended
    to the copy at the end.

    It is assumed that sys.path is a sequence.  Items of sys.path that
    are not (unicode or 8-bit) strings referring to existing
    directories are ignored.  Unicode items of sys.path that cause
    errors when used as filenames may cause this function to raise an
    exception (in line with os.path.isdir() behavior).
    _get_delegatefinal_nameFileFinderresource_namesingledispatchFind a "loader" object for fullname

    This is a backwards compatibility wrapper around
    importlib.util.find_spec that converts most failures to ImportError
    and only returns the loader rather than the full spec
    ImpImporter.iter_modulesRelative module name {!r} not supportedA namedtuple with minimal info about a module.module_or_nameImpLoader._fix_nameImpLoader.load_modulezipimporterImpLoader._reopenwalk_packages.<locals>.seenYield finders for the given module name

    If fullname contains a '.', the finders will be for the package
    containing fullname, otherwise they will be all registered top level
    finders (i.e. those on both sys.meta_path and sys.path_hooks).

    If the named module is in a package, that package is imported as a side
    effect of invoking this function.

    If no module name is specified, all top level finders are produced.
    PY_COMPILEDsimplegenericYields ModuleInfo for all modules recursively
    on path, or, if path is None, all accessible modules.

    'path' should be either None or a list of paths to look for
    modules in.

    'prefix' is a string to output on the front of every module name
    on output.

    Note that this function must import all *packages* (NOT all
    modules!) on the given path, in order to access the __path__
    attribute to find submodules.

    'onerror' is a function which gets called with one argument (the
    name of the package which was being imported) if any exception
    occurs while trying to import a package.  If no onerror function is
    supplied, ImportErrors are caught and ignored, while all other
    exceptions are propagated, terminating the search.

    Examples:

    # list all modules python can access
    walk_packages()

    # list all submodules of ctypes
    walk_packages(ctypes.__path__, ctypes.__name__+'.')
    portionsImpLoader.__init__iter_importer_modulesLoader for module %s cannot handle module %sError while finding loader for {!r} ({}: {})Utilities to support packages.ImpLoader.is_packageImpLoader._get_delegatesname_pkgsearch_pathPKG_DIRECTORY_iter_file_finder_modules_import_impImpImporter.__init__This emulation is deprecated, use 'importlib' insteadPEP 302 Finder that wraps Python's "classic" import algorithm

    ImpImporter(dirname) produces a PEP 302 finder that searches that
    directory.  ImpImporter(None) produces a PEP 302 finder that searches
    the current sys.path, plus any modules that are frozen or built-in.

    Note that ImpImporter does not currently support being used by placement
    on sys.meta_path.
    C_EXTENSIONYields ModuleInfo for all submodules on path,
    or, if path is None, all top-level modules on sys.path.

    'path' should be either None or a list of paths to look for
    modules in.

    'prefix' is a string to output on the front of every module name
    on output.
    getmodulenamePY_SOURCEGet a "loader" object for module_or_name

    Returns None if the module cannot be found or imported.
    If the named module is not already imported, its containing package
    (if any) is imported, in order to establish the package __path__.
    PEP 302 Loader that wraps Python's "classic" import algorithm
    OpenKeyEx Returns the Python version as string 'major.minor.patchlevel'

        Note that unlike the Python sys.version, the returned value
        will always include the patchlevel (it defaults to 0).

    {0}.{1}.{2}use_syscmd_verbranchPROCESSOR_ARCHITECTUREverfilescsiduname %s 2> %spython_branchproduct_type([\w.+]+)\s*\(#?([^,]+),\s*([\w ]+),\s*([\w :]+)\)\s*\[PyPy [^\]]+\]?chunksize_gitvendorOpenLinux Returns the (true) processor name, e.g. 'amdk6'

        An empty string is returned if the value cannot be
        determined. Note that many platforms do not provide this
        information or simply return the same value as for machine(),
        e.g.  NetBSD does this.

    failed to parse PyPy sys.version: %sptypePROCESSOR_ARCHITEW6432OpenVMSfull_distribution_nameuname_resultsystem node release version machine processorjava.vm.versiondistnamesupported_distsgetwindowsversionwin16dospost2012ServerR2_default_architecturePower MacintoshSYI$_CPUmac_verlibc_ver_libc_searchsupported_platformscommand failed Returns the system's release, e.g. '2.2.0' or 'NT'

        An empty string is returned if the value cannot be determined.

    linkagefileoutuse os.popen insteadvm_vendor_UNIXCONFDIR_mac_ver_xmlWindowsPElinux_distributionversioninfo_platform.<locals>.<genexpr>_mercurial Returns a string identifying the Python implementation.

        Currently, the following implementations are identified:
          'CPython' (C implementation of Python),
          'IronPython' (.NET implementation of Python),
          'Jython' (Java implementation of Python),
          'PyPy' (Python implementation of Python).

    ([\d.]+)\s*\(IronPython\s*[\d.]+\s*\(([\d.]+)\) on ([\w.]+ [\d.]+(?: \(\d+-bit\))?)\)libcinitglibcglibcversionsoversionos_version([\w.+]+)\s*\(#?([^,]+)(?:,\s*([\w ]*)(?:,\s*([\w :]*))?)?\)\s*\[([^\]]+)\]?java.vm.namealt_versionjava.vm.vendor Returns a string identifying the compiler used for compiling
        Python.

    GLIBCos_arch Returns a single string identifying the underlying platform
        with as much useful information as possible (but no more :).

        The output is intended to be human readable rather than
        machine parseable. It may look different on different
        platforms and this is intended.

        If "aliased" is true, the function will use aliases for
        various platforms that report system names which differ from
        their common names, e.g. SunOS will be reported as
        Solaris. The system_alias() function is used to implement
        this.

        Setting terse to true causes the function to return only the
        absolute minimum information needed to identify the platform.

    _pypy_sys_version_parserredhat Returns the system/OS name, e.g. 'Linux', 'Windows' or 'Java'.

        An empty string is returned if the value cannot be determined.

    ELFpython_version_tuple._+-DIST_IDENT([0-9]+|[._+-])vminfoosinfovm_namevm_releaseos_name_release_filename6.0buildnobuilddatebuildtimerevision/usr/lib/setup16bit©ÚaliasedÚterseÚresultÚsystemÚnodeÚreleaseÚversionÚmachineÚ	processorÚrelÚversÚcsdÚptypeÚplatformÚdistnameÚdistversionÚdistidÚlibcnameÚlibcversionÚrÚvÚvminfoÚos_nameÚ
os_versionÚos_archÚbitsÚlinkagegentoo/var/adm/inst-log/info Version interface for Jython.

        Returns a tuple (release, vendor, vminfo, osinfo) with vminfo being
        a tuple (vm_name, vm_release, vm_vendor) and osinfo being a
        tuple (os_name, os_version, os_arch).

        Values which cannot be determined are set to the defaults
        given as parameters (which all default to '').

    SP{}service_pack_majorCloseKeyHKEY_LOCAL_MACHINE Tries some special tricks to get the distribution
        information in case the default method fails.

        Currently supports older SuSE Linux, Caldera OpenLinux and
        Slackware Linux distributions.

    filepath(?:([\w ]+) ([\w.]+) .*\[.* ([\d.]+)\])/etc/.installedN32UnitedLinux Returns a string identifying the Python implementation
        branch.

        For CPython this is the SCM branch from which the
        Python binary was built.

        If not available, an empty string is returned.

    MacOSRhapsodywinver_supported_distsIronPython\s*([\d\.]+)(?: \(([\d\.]+)\))? on (.NET [\d\.]+)failed to parse CPython sys.version: %sgetProperty Tries to determine the name of the Linux OS distribution name.

        The function first looks for a distribution release file in
        /etc and then reverts to _dist_try_harder() in case no
        suitable files are found.

        supported_dists may be given to define the set of Linux
        distributions to look for. It defaults to a list of currently
        supported Linux distributions identified by their release file
        name.

        If full_distribution_name is true (default), the full
        distribution read from the OS is returned. Otherwise the short
        name taken from supported_dists is used.

        Returns a tuple (distname, version, id) which default to the
        args given as parameters.

     Fairly portable uname interface. Returns a tuple
        of strings (system, node, release, version, machine, processor)
        identifying the underlying platform.

        Note that unlike the os.uname function this also returns
        possible processor information as an additional tuple entry.

        Entries which cannot be determined are set to ''.

    PowerPC_ironpython26_sys_version_parserwin32_ver_distname_lsb_release_version_component_reCurrentType
    Copyright (c) 1999-2000, Marc-Andre Lemburg; mailto:mal@lemburg.com
    Copyright (c) 2000-2010, eGenix.com Software GmbH; mailto:info@egenix.com

    Permission to use, copy, modify, and distribute this software and its
    documentation for any purpose and without fee or royalty is hereby granted,
    provided that the above copyright notice appear in all copies and that
    both that copyright notice and this permission notice appear in
    supporting documentation or portions thereof, including modifications,
    that you make.

    EGENIX.COM SOFTWARE GMBH DISCLAIMS ALL WARRANTIES WITH REGARD TO
    THIS SOFTWARE, INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY AND
    FITNESS, IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL,
    INDIRECT OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING
    FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT,
    NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION
    WITH THE USE OR PERFORMANCE OF THIS SOFTWARE !

_follow_symlinks_norm_versionrocks_syscmd_filePROCESSOR_IDENTIFIERMS-DOS/System/Library/CoreServices/SystemVersion.plist_ironpython_sys_version_parserplatform_version(\w+)[-_](release|version)IRIX64turbolinux_platform_cacheyellowdogdist() and linux_distribution() functions are deprecated in Python 3.5_WIN32_CLIENT_RELEASESdist\(\) and linux_distribution\(\) functions are deprecated .*_java_getpropplatform.pyMSDOS1.0.864bitdebianfedoracentosmandrakemandrivaslackwaremageiaMacOS X Servercleaned<module platform>vms_lib_parse_release_file2003Server Returns a tuple (buildno, builddate) stating the Python
        build number and date as strings.

     Interface to the system's file command.

        The function uses the -b option of the file command to have it
        omit the filename in its output. Follow the symlinks. It returns
        default in case the command should fail.

    2008ServerR2 Tries to determine the libc version that the file executable
        (which defaults to the Python interpreter) is linked against.

        Returns a tuple of strings (lib,version) which default to the
        given parameters in case the lookup fails.

        Note that the function has intimate knowledge of how different
        libc versions add symbols to the executable and thus is probably
        only useable for executables compiled using gcc.

        The file is read and scanned in chunks of chunksize bytes.

    _sys_version_cacheProductVersion Interface to the system's uname command.
    ûzdevé
   zalphaé   Úar   zbetaé   Úbr   Úcé(   zRCé2   zrcr   zpléÈ   Úpr	   0java.versionfailed to parse Jython sys.version: %sDEV_NULL Returns a string identifying the Python implementation
        revision.

        For CPython this is the SCM revision from which the
        Python binary was built.

        If not available, an empty string is returned.

    _ver_output Returns (system, release, version) aliased to common
        marketing names used for some systems.

        It also does some reordering of the information in some cases
        where it would otherwise cause confusion.

     Returns a parsed version of Python's sys.version as tuple
        (name, version, branch, revision, buildno, builddate, compiler)
        referring to the Python implementation name, version, branch,
        revision, build number, build date/time as string and the compiler
        identification string.

        Note that unlike the Python sys.version, the returned value
        for the Python version will always include the patchlevel (it
        defaults to '.0').

        The function returns empty strings for tuple entries that
        cannot be determined.

        sys_version may be given to parse an alternative version
        string, e.g. if the version was read from a different Python
        interpreter.

    û)é   é    z2000)r   é   zXP)r   é   z
2003Server)r   Nzpost2003)é   r   zVista)r   r   ú7)r   r   ú8)r   é   z8.1)r   Nzpost8.1)é
   r   z10)r	   Nzpost100 Tries to determine the name of the Linux OS distribution name.

        The function first looks for a distribution release file in
        /etc and then reverts to _dist_try_harder() in case no
        suitable files are found.

        Returns a tuple (distname, version, id) which default to the
        args given as parameters.

     (64bit)no_os_uname_uname_cachejava.langjava.os.arch_syscmd_uname_linux_distribution32bit_comparable_versionVAX([^0-9]+)(?: release )?([\d.]+)[^(]*(?:\((.+)\))?java_ver Returns the system's release version, e.g. '#3 on degas'

        An empty string is returned if the value cannot be determined.

     This module tries to retrieve as much platform-identifying data as
    possible. It makes this information available via function APIs.

    If called from the command line, it prints the platform
    information concatenated as single string to stdout. The output
    format is useable as part of a filename.

 Helper to format the platform string in a filename
        compatible format e.g. "system-version-machine".
     Portable popen() interface.
    failed to parse IronPython sys.version: %spython_implementationSOFTWARE\Microsoft\Windows NT\CurrentVersion_WIN32_SERVER_RELEASESCOFFjava.os.namejava.vendorMIN_DIST_VERSION(__libc_init)|(GLIBC_([0-9.]+))|(libc(_\w+)?\.so(?:\.(\d[0-9.]*))?) Returns the Python version as tuple (major, minor, patchlevel)
        of strings.

        Note that unlike the Python sys.version, the returned value
        will always include the patchlevel (it defaults to 0).

    getsyipython_revisioncommand /c vercmd /c ver In case filepath is a symlink, follow it until a
        real file is reached.
     Normalize the version and build strings and return a single
        version string using the format major.minor.build (or patchlevel).
    32-bit_node_ver_stages Get MacOS version information and return it as tuple (release,
        versioninfo, machine) with versioninfo being a tuple (version,
        dev_stage, non_release_version).

        Entries which cannot be determined are set to the parameter values
        which default to ''. All tuple entries are strings.
    Service Pack  Returns the computer's network name (which may not be fully
        qualified)

        An empty string is returned if the value cannot be determined.

     Returns the machine type, e.g. 'i386'

        An empty string is returned if the value cannot be determined.

     Helper to determine the node name of this machine.
    slack-version-64-bitMicrosoft Windowscpu_number(.+) release ([\d.]+)[^(]*(?:\((.+)\))? Queries the given executable (defaults to the Python interpreter
        binary) for various architecture information.

        Returns a tuple (bits, linkage) which contains information about
        the bit architecture and the linkage format used for the
        executable. Both values are returned as strings.

        Values that cannot be determined are returned as given by the
        parameter presets. If bits is given as '', the sizeof(pointer)
        (or sizeof(long) on Python version < 1.5.2) is used as
        indicator for the supported pointer size.

        The function relies on the system's "file" command to do the
        actual work. This is available on most if not all Unix
        platforms. On some non-Unix platforms where the "file" command
        does not exist and the executable is set to the Python interpreter
        binary defaults from _default_architecture are used.

    java.os.version Tries to figure out the OS version used and returns
        a tuple (system, release, version).

        It uses the "ver" shell command for this which is known
        to exists on Windows, DOS. XXX Others too ?

        In case this fails, the given parameters are used as
        defaults.

    use_builtin_typesdict_typewrite_dictmaxbinsizewritePlist_scalars_is_fmt_binary_PlistParser.begin_dictend_integer_DumbXMLWriter_DumbXMLWriter.__init__ParseFilebomwrite_array_ref_sizesort_keysskipkeys_PlistParser.handle_end_element_PlistWriter.__init__ìûÿÿÿ         >BBQnum_objects
    Read a .plist from a path or file. pathOrFile should either
    be a file name, or a readable binary file object.

    This function is deprecated, use load instead.
    top_object_DumbXMLWriter.writeln_BinaryPlistParser.parse_objtable return the size of the next object.end_dateThe writePlist function is deprecated, use dump() insteadplistlib.py -- a tool to generate and parse MacOSX .plist files.

The property list (.plist) file format is a simple XML pickle supporting
basic object types, like dictionaries, lists, numbers and strings.
Usually the top level object is a dictionary.

To write out a plist file, use the dump(value, file)
function. 'value' is the top level object, 'file' is
a (writable) file object.

To parse a plist from a file, use the load(file) function,
with a (readable) file object as the only argument. It
returns the top level object (again, usually a dictionary).

To work with plist data in bytes objects, you can use loads()
and dumps().

Values can be strings, integers, floats, booleans, tuples, lists,
dictionaries (but only with string keys), Data, bytes, bytearray, or
datetime.datetime objects.

Generate Plist example:

    pl = dict(
        aString = "Doodah",
        aList = ["A", "B", 12, 32.1, [1, 2, 3]],
        aFloat = 0.1,
        anInt = 728,
        aDict = dict(
            anotherString = "<hello & hi there!>",
            aUnicodeValue = "M\xe4ssig, Ma\xdf",
            aTrueValue = True,
            aFalseValue = False,
        ),
        someData = b"<binary gunk>",
        someMoreData = b"<lots of binary gunk>" * 10,
        aDate = datetime.datetime.fromtimestamp(time.mktime(time.gmtime())),
    )
    with open(fileName, 'wb') as fp:
        dump(pl, fp)

Parse Plist example:

    with open(fileName, 'rb') as fp:
        pl = load(fp)
    print(pl["aKey"])
Write 'value' to a .plist file. 'fp' should be a (writable)
    file object.
    end_falseindent_levelsort_version_BinaryPlistParser._read_object_ref_format_PlistParser.end_arrayEndElementHandlerPlistFormatFMT_XML FMT_BINARYend_dict>BBL
        read the object by reference.

        May recursively read sub-objects (content of an array/dict/set)
        </plist>
    Return 'value' as a plist-formatted bytes object.

    This function is deprecated, use dumps instead.
    unsupported type: %send_realmaxlinelengthRead a .plist file from a bytes object.
    Return the unpacked root object (which usually is a dictionary).
    missing value for key '%s' at line %dtokenL_read_intsadd_object_PlistParser.__init__asBase64key_refs_write_objectData.__init__offset_table_offsetrootItemsoffset_size>BBH_PlistParser.add_object_skipkeys<plist version="1.0">_decode_base64writeHeaderInvalidFileException</%s>The writePlistToBytes function is deprecated, use dumps() instead_PlistParser.parseData.fromBase64_BinaryPlistParser._read_refs_controlCharPatwrite_datautf-16-be_getrefnum_date_to_stringutf-16beBOM_UTF16_BE_DumbXMLWriter.simple_elementbegin_array_PlistParser.end_dataStartElementHandlerend_key_sort_keys_dict_typeInvalidFileException.__init___PlistParser.begin_array_PlistParser.get_dataBOM_UTF8_DumbXMLWriter.end_elementThe readPlist function is deprecated, use load() insteadutf-16-le%04d-%02d-%02dT%02d:%02d:%02dZbegin_element_get_size_PlistParser.handle_begin_element_PlistParser.end_integer>BBBoffset_formatend_true>BH_DumbXMLWriter.begin_element[\x00\x01\x02\x03\x04\x05\x06\x07\x08\x0b\x0c\x0e\x0f\x10\x11\x12\x13\x14\x15\x16\x17\x18\x19\x1a\x1b\x1c\x1d\x1e\x1f]ParserCreatereadPlistFromBytes<%s>%s</%s>>5xBBBQQQCurrentLineNumberwrite_bytes_indent_level_BinaryPlistWriter._getrefnumRead a .plist file. 'fp' should be (readable) file object.
    Return the unpacked root object (which usually is a dictionary).
    The readPlistFromBytes function is deprecated, use loads() instead_write_sizehandle_data_PlistWriter.write_arraydata must be as bytes
    Read or write a binary plist file, following the description of the binary
    format.  Raise InvalidFileException in case of error, otherwise return the
    root object.

    see also: http://opensource.apple.com/source/CF/CF-744.18/CFBinaryPList.c
    Data.asBase64write_value_PlistWriter.write_dict<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
current_key_PlistParser.end_stringBOM_UTF16_LE<%s/>_BinaryPlistParser._get_size_PlistParser.end_date_PlistWriter.write_valuetokenH_BINARY_FORMAT_PlistParser.end_real_BinaryPlistWriter.__init___object_offsets>Bq_PlistParser.end_key>BL_undefinedkeyRefsvalRefs(?P<year>\d\d\d\d)(?:-(?P<month>\d\d)(?:-(?P<day>\d\d)(?:T(?P<hour>\d\d)(?::(?P<minute>\d\d)(?::(?P<second>\d\d))?)?)?)?)?Zstrings can't contains control characters; use bytes insteadì            >BQ_objlistInvalid file_BinaryPlistWriter._flattenunexpected element at line %dPLISTHEADER_PlistParser.handle_data_date_from_stringobj_refsData.__eq__Unsupported format: %r_BinaryPlistWriter._write_size_PlistWriter.write_bytes_PlistWriter.write_data_use_builtin_types_maybe_openCharacterDataHandlerbplist00_is_fmt_xml
    Wrapper for binary data.

    This class is deprecated, use a bytes object instead.
    _BinaryPlistParser._read_ints.<locals>.<genexpr>Return a bytes object with the contents for a .plist file.
    _objidtable<module plistlib>unexpected key at line %d_BinaryPlistParser._read_object.<locals>.<genexpr>_dateParser_BinaryPlistWriter.write_PlistParser.end_dict
    Write 'value' to a .plist file. 'pathOrFile' may either be a
    file name or a (writable) file object.

    This function is deprecated, use dump instead.
    _PlistParser.end_false_BinaryPlistWriter._write_object_PlistParser.end_true>6xBBQQQ_BinaryPlistParser.__init___count_to_sizeì            
    Read a plist data from a bytes object. Return the root object.

    This function is deprecated, use loads instead.
    Data.__repr___FORMATSNormalize case of pathname.  Has no effect under Posixcommonpath() arg is an empty sequenceino2Test whether a path is a symbolic linkino1dotdotNormalize path, eliminating double slashes, etc.Can't mix absolute and relative pathsrel_listGiven a sequence of path names, returns the longest common sub-path.\$(\w+|\{[^}]*\})Return the canonical path of the specified filename, eliminating any
symbolic links encountered in the path.Split a pathname into drive and path. On Posix, drive is always
    empty.getcwdbdev1<module posixpath>userhomepwent_splitext_get_sepCommon operations on Posix pathnames.

Instead of importing this module directly, import os and refer to
this module as os.path.  The "os.path" name is an alias for this
module on Posix systems; on other systems (e.g. Mac, Windows),
os.path provides the same operations in a manner specific to that
platform, and is an alias to another module (e.g. macpath, ntpath).

Some of this can actually be useful on non-Posix systems too, e.g.
for manipulation of the pathname component of URLs.
_check_arg_typesTest whether a path exists.  Returns True for broken symbolic linksextsepReturns the directory component of a pathnamenewpathposixpath.pynew_compsstart_listnormcase() argument must be str or bytes, not '{}'Return a relative version of a pathinitial_slashessplit_pathsdev2Test whether a path is a mount pointcommonpath.<locals>.<genexpr>Test whether a path is absoluteReturns the final component of a pathnameSplit a pathname.  Returns tuple "(head, tail)" where "tail" is
    everything after the final slash.  Either part may be empty._joinrealpathno path specifiedpw_dirismountpath_listExpand shell variables of form $var and ${var}.  Unknown variables
    are left unchanged.environbReturn an absolute path._varprogb:/bin:/usr/binsupports_unicode_filenamesÛ&   znormcasezisabszjoinz
splitdrivezsplitzsplitextzbasenamezdirnamezcommonprefixzgetsizezgetmtimezgetatimezgetctimezislinkzexistszlexistszisdirzisfilezismountz
expanduserz
expandvarsznormpathzabspathzsamefilezsameopenfilezsamestatzcurdirzpardirzsepzpathsepzdefpathzaltsepzextsepzdevnullzrealpathzsupports_unicode_filenameszrelpathz
commonpathJoin two or more pathname components, inserting '/' as needed.
    If any component is an absolute path, all previous path components
    will be discarded.  An empty last part will result in a path that
    ends with a separator.genericpathExpand ~ and ~user constructions.  If user or $HOME is unknown,
    do nothing.allowancePrettyPrinter._pprint_user_dict_safe_key.__lt___pprint_bytesPrettyPrinter._format_dict_itemsdelimnlmax_widthnext_entPrettyPrinter._pprint_ordered_dictdefault_factory_pprint_chain_mapsafereprDetermine if saferepr(object) is readable by eval().PrettyPrinter._pprint_dequedepth must be > 0indent must be >= 0_StringIOSupport to pretty-print lists, tuples, & dictionaries recursively.

Very simple, but useful, especially in debugging data structures.

Classes
-------

PrettyPrinter()
    Handle pretty-printing operations onto a stream using a configured
    set of formatting parameters.

Functions
---------

pformat()
    Format a Python object into a pretty-printed representation.

pprint()
    Pretty-print a Python object to a stream [default is sys.stdout].

saferepr()
    Generate a 'standard' repr()-like value, but protect against recursive
    data structures.

PrettyPrinter._pprint_default_dictPrettyPrinter._pprint_bytearray{...}_pprint_counter_safe_tupleHandle pretty printing operations onto a stream using a set of
        configured parameters.

        indent
            Number of spaces to indent for each level of nesting.

        width
            Attempted maximum number of columns in the output.

        depth
            The maximum depth to print out nested structures.

        stream
            The desired output stream.  If omitted (or false), the standard
            output stream available at construction will be used.

        compact
            If true, several items will be combined in one line.

        maxlevelsPrettyPrinter.pformat<module pprint>_pprint_tuplePrettyPrinter._pprint_strmappingproxy(PrettyPrinter.format©ÚobjectÚcontextÚ	maxlevelsÚlevelÚtypÚrÚobjidÚreadableÚ	recursiveÚ
componentsÚappendÚsafereprÚitemsÚkÚvÚkreprÚ	kreadableÚkrecurÚvreprÚ	vreadableÚvrecurÚformatÚoÚoreprÚ	oreadableÚorecurÚrepPrettyPrinter._pprint_chain_map<Recursion on %s with id=%s>PrettyPrinter.isrecursive_compact_safe_reprbytearray(Helper function for comparing 2-tuples_depthHelper function for key functions when sorting unorderable objects.

    The wrapped-object will fallback to a Py2.x style comparison for
    unorderable types (sorting first comparing the type name and then by
    the obj ids).  Does not work recursively, so dict.items() must have
    _safe_key applied to both the key and the value.

    PrettyPrinter._pprint_user_listmost_commonPrettyPrinter._pprint_setisreadable_recursionDetermine if object requires a recursive representation.PrettyPrinter._repr_recursive,)PrettyPrinter._format_items_wrap_bytes_reprlast_indexPrettyPrinter.isreadable_pprint_user_string©ÚselfÚobjectÚstreamÚindentÚ	allowanceÚcontextÚlevelÚwriteÚchunksÚlinesÚ
max_width1Ú	max_widthÚiÚlineÚrepÚpartsÚ
max_width2ÚcurrentÚjÚpartÚ	candidatewidth must be != 0_safe_repr:printerPrettyPrinter._pprint_list_pprint_dict_safe_key.__init__PrettyPrinter._pprint_mappingproxypformat:PrettyPrinter._pprint_tuplePrettyPrinter._pprint_user_stringpprint.py_indent_per_level],
%smaxlen=%s)PrettyPrinter._pprint_bytes\S*\s*Format object for a specific context, returning a string
        and flags indicating whether the representation is 'readable'
        and whether the object represents a recursive construct.
        PrettyPrinter._pprint_counterPrettyPrinter._pprint_dictPrettyPrinter.__init__Version of repr() which can handle recursive data structures._perfcheckPrettyPrinter.pprint%s(%s,
%s_builtin_scalars(%s,)_collections_get_default_invalidation_modesource_to_codeexc_type_nameSOURCE_DATE_EPOCHFile "<string>"{} is a non-regular file and will be changed into a regular one if import writes a byte-compiled file to itSorry: %s: %sdfilepy_excsource_statsbytecodePycInvalidationModetbtexterrmsgException raised when an error occurs while attempting to
    compile the file.

    To raise this exception, use

        raise PyCompileError(exc_type,exc_value,file[,msg])

    where

        exc_type:   exception type to be used in error message
                    type name can be accesses as class variable
                    'exc_type_name'

        exc_value:  exception value to be used in error message
                    can be accesses as class variable 'exc_value'

        file:       name of file being compiled to be used in error message
                    can be accesses as class variable 'file'

        msg:        string message to be written as error message
                    If no value is given, a default exception message will be
                    given, consistent with 'standard' py_compile output.
                    message (or default) can be accesses as class variable
                    'msg'

    TIMESTAMP_write_atomicCompile several source files.

    The files named in 'args' (or on the command line, if 'args' is
    not specified) are compiled and the resulting bytecode is cached
    in the normal manner.  This function does not search a directory
    structure to locate source files; it only compiles files named
    explicitly.  If '-' is the only parameter in args, the list of
    files is taken from standard input.

    Byte-compile one Python source file to Python bytecode.

    :param file: The source file name.
    :param cfile: The target byte compiled file name.  When not given, this
        defaults to the PEP 3147/PEP 488 location.
    :param dfile: Purported file name, i.e. the file name that shows up in
        error messages.  Defaults to the source file name.
    :param doraise: Flag indicating whether or not an exception should be
        raised when a compile error is found.  If an exception occurs and this
        flag is set to False, a string indicating the nature of the exception
        will be printed, and the function will return to the caller. If an
        exception occurs and this flag is set to True, a PyCompileError
        exception will be raised.
    :param optimize: The optimization level for the compiler.  Valid values
        are -1, 0, 1 and 2.  A value of -1 means to use the optimization
        level of the current interpreter, as given by -O command line options.
    :param invalidation_mode:

    :return: Path to the resulting byte compiled file.

    Note that it isn't necessary to byte-compile Python modules for
    execution efficiency -- Python itself byte-compiles a module when
    it is loaded, and if it can, writes out the bytecode to the
    corresponding .pyc file.

    However, if a Python installation is shared between users, it is a
    good idea to byte-compile all modules upon installation, since
    other users may not be able to write in the source directories,
    and thus they won't be able to write the .pyc file, and then
    they would be byte-compiling every module each time it is loaded.
    This can slow down program start-up considerably.

    See compileall.py for a script/module that uses this module to
    byte-compile all installed files (or all files in selected
    directories).

    Do note that FileExistsError is raised if cfile ends up pointing at a
    non-regular file or symlink. Because the compilation uses a file renaming,
    the resulting file would be regular and thus not the same type of file as
    it was previously.
    _code_to_hash_pycRoutine to "compile" a .py file to a .pyc file.

This module has intimate knowledge of the format of .pyc files.
<py_compile>PyCompileError.__str__<module py_compile>_calc_modeCHECKED_HASHPyCompileError.__init__path_statspy_compile.py_code_to_timestamp_pyc{} is a symlink and will be changed into a regular file if import writes a byte-compiled file to itUNCHECKED_HASHImport a Python source file or compiled file given its path.HorizontalRule_start_server.<locals>.DocHandler.log_messageErrorDuringImport.__str__use_pagerdata descriptorHelper.listmodules.<locals>.callbackErrors that occurred while trying to import something to document it.MODULE REFERENCE_url_handler.<locals>.html_searchMethods %sispackagepkgpathSearch ResultsOmit part of a string if needed to make it fit in a maximum length.getcommentsTOPICWrite out HTML documentation for all modules in a directory tree.TextDoc.indent<dd><tt>%s</tt>complete_urlhtml_indexhtml_topicshtml_keywordshtml_getfilehtml_topicpagehtml_getobjhtml_error_get_revised_path:<br>
Data and other attributes %sskipdocsgetdoclocRead one line, using input() when appropriate.Split sequence s via predicate, and return pair ([true], [false]).

    The return value is a 2-tuple of lists,
        ([x for x in s if predicate(x)],
         [x for x in s if not predicate(x)])
    #eeaa77
Here is a list of the punctuation symbols which Python assigns special meaning
to. Enter any symbol to get more help.

©ú+ú-Ú*z**ú/z//ú%z<<z>>ú&ú|ú^ú~ú<ú>z<=z>=z==z!=z<>maxstring<dd><tt>%s</tt></dd>Write HTML documentation to a file in the current directory.Render in text a class tree as returned by inspect.getclasstree().lastupdateopen_browserlocalhostshowsymbol_url_handler.<locals>.html_index.<locals>.bltinlinkplaintextboldProduce text documentation for a data object.<strong>%s</strong>&nbsp;(package)field_orderneedoneforceload#7799eeclean_contentsmaxtuplemore < = class           Help on %s:Format a section with a given heading.>>=HTMLDoc.docmoduleloader_clsGuess whether a path refers to a package directory.HTMLDoc.modulelinkIndex of keywords.modpkginfoshadowedrendererHTMLDoc.docclass.<locals>.HorizontalRule.maybecss_pathcss_linkhtml_navbarttypager.<locals>.<lambda>_HTMLDocRender text documentation, given an object or a path to an object.PYTHONDOCSHTMLDoc.docclass.<locals>.spilldescriptorsHelper.showsymbol_url_handler.<locals>.html_navbarExtensionFileLoader_url_handler.<locals>._HTMLDocwrote
Sorry, topic and keyword documentation is not available because the
module "pydoc_data.topics" could not be found.
\b((http|ftp)://\S+[\w/]|RFC[- ]?(\d+)|PEP[- ]?(\d+)|(self\.)?(\w+))cli.<locals>.BadUsageTextDoc.docclass.<locals>.HorizontalRule.maybe
Here is a list of modules whose name or summary contains '{}'.
If there are any, enter a module name to get more help.

_re_stripid-=<big><big><strong>%s</strong></big></big>no documentation found for %s
Get the one-line summary out of a module file.search?keyServer commands: [b]rowser, [q]uitinherited from %smodpkgsHTMLRepr.repr_stringServer stopped_url_handler.<locals>.html_error.<locals>.<genexpr>CreditsProduce text documentation for a given module object.version %s<a href="%s.html"><font color="#ffffff">%s</font></a>TextRepr__temp__MANPAGERTextDoc.docclass.<locals>.<lambda>$Revision: Helper._gettopicProduce html documentation for a property.multicolumn<dl>
%s</dl>
get_html_pagepath_hereStatic methods %s:

 
^ *
Helper.introlinkednametestreprdocroutinegreymember descriptor %s.%s.%s©#ÚselfÚobjectÚnameÚmodÚignoredÚallÚpartsÚlinksÚiÚ
linkednameÚheadÚpathÚurlÚfilelinkÚinfoÚversionÚdoclocÚresultÚmodulesÚclassesÚcdictÚkeyÚvalueÚbaseÚmodnameÚmoduleÚfuncsÚfdictÚdataÚdocÚmodpkgsÚimporterÚispkgÚcontentsÚ	classlistHTMLDoc.docmodule.<locals>.<lambda>DocServerCOMPLEX<a name="%s">class <strong>%s</strong></a>#000000homeclsapropos.<locals>.onerror
<td width="100%%">%s</td></tr></table>_symbols_inverse.TextDoc.docclass.<locals>.spilldata_start_server.<locals>.DocServer.serve_until_quitServer ready atCheck if an object is of a type that probably means it's data.given_pathr"""HTMLDoc.docdataPage through text by feeding it to another program.Get the doc string or comments for an object.getpager.<locals>.<lambda>pydoc.pyclasslinkthisclass<strong>%s</strong> = more "%s"reallinkimportlib._bootstrapDESCRIPTIONThe pydoc url handler for use with the pydoc server.

    If the content_type is 'text/css', the _pydoc.css style
    sheet is read and returned if it exits.

    If the content_type is 'text/html', then the result of
    get_html_page(url) is returned.
    TextDoc.sectionstatic method((\\[\\abfnrtv\'"]|\\[0-9]..|\\x..|\\u....)+)HTMLDoc.preformat<a name="%s"><strong>%s</strong></a>ErrorDuringImport.__init__#aa55ccFormat an argument default value as text.Topic or keyword help page.getmro<font face="helvetica, arial">%s</font>TextDoc.formattree.<locals>.<genexpr>The first time this is called, determine what kind of pager to use.<big><big><strong>Index of Modules</strong></big></big>Helper.__init__Produce text documentation for a function or method object.ismemberdescriptormaxlistDoc.getdocloc_url_handler.<locals>._HTMLDoc.pageGiven an object or a path to an object, get the object and its name.<tt>%s<br>&nbsp;</tt>
<tr bgcolor="%s"><td rowspan=2>%s</td>
<td colspan=2>%s</td></tr>
<tr><td>%s</td>_strprefixesisgetsetdescriptorûzTYPES)ztypeszRSTRINGS UNICODE NUMBERS SEQUENCES MAPPINGS FUNCTIONS CLASSES MODULES FILES inspectzSTRINGS)zstringsz4str UNICODE SEQUENCES STRINGMETHODS FORMATTING TYPESzSTRINGMETHODS)zstring-methodszSTRINGS FORMATTINGz
FORMATTING)zformatstringsz	OPERATORSzUNICODE)zstringsz:encodings unicode SEQUENCES STRINGMETHODS FORMATTING TYPESzNUMBERS)znumberszINTEGER FLOAT COMPLEX TYPESzINTEGER)zintegersz	int rangezFLOAT)zfloatingz
float mathzCOMPLEX)z	imaginaryzcomplex cmathz	SEQUENCES)ztypesseqz$STRINGMETHODS FORMATTING range LISTSzMAPPINGSzDICTIONARIESz	FUNCTIONS)ztypesfunctionsz	def TYPESzMETHODS)ztypesmethodszclass def CLASSES TYPESzCODEOBJECTS)zbltin-code-objectszcompile FUNCTIONS TYPESzTYPEOBJECTS)zbltin-type-objectsztypes TYPESzFRAMEOBJECTSzTYPESz
TRACEBACKSzTYPESzNONE)zbltin-null-objectÚ zELLIPSIS)zbltin-ellipsis-objectzSLICINGSzSPECIALATTRIBUTES)zspecialattrsr   zCLASSES)ztypesz!class SPECIALMETHODS PRIVATENAMESzMODULES)ztypesmoduleszimportzPACKAGESzimportzEXPRESSIONS)zoperator-summaryzlambda or and not in is BOOLEAN COMPARISON BITWISE SHIFTING BINARY FORMATTING POWER UNARY ATTRIBUTES SUBSCRIPTS SLICINGS CALLS TUPLES LISTS DICTIONARIESz	OPERATORSzEXPRESSIONSz
PRECEDENCEzEXPRESSIONSzOBJECTS)zobjectszTYPESzSPECIALMETHODS)zspecialnameszbBASICMETHODS ATTRIBUTEMETHODS CALLABLEMETHODS SEQUENCEMETHODS MAPPINGMETHODS NUMBERMETHODS CLASSESzBASICMETHODS)zcustomizationzhash repr str SPECIALMETHODSzATTRIBUTEMETHODS)zattribute-accesszATTRIBUTES SPECIALMETHODSzCALLABLEMETHODS)zcallable-typeszCALLS SPECIALMETHODSzSEQUENCEMETHODS)zsequence-typesz(SEQUENCES SEQUENCEMETHODS SPECIALMETHODSzMAPPINGMETHODS)zsequence-typeszMAPPINGS SPECIALMETHODSzNUMBERMETHODS)znumeric-typesz*NUMBERS AUGMENTEDASSIGNMENT SPECIALMETHODSz	EXECUTION)z	execmodelz%NAMESPACES DYNAMICFEATURES EXCEPTIONSz
NAMESPACES)znamingz3global nonlocal ASSIGNMENT DELETION DYNAMICFEATURESzDYNAMICFEATURES)zdynamic-featuresr   zSCOPINGz
NAMESPACESzFRAMESz
NAMESPACESz
EXCEPTIONS)z
exceptionsztry except finally raisezCONVERSIONS)zconversionsr   zIDENTIFIERS)zidentifierszkeywords SPECIALIDENTIFIERSzSPECIALIDENTIFIERS)z
id-classesr   zPRIVATENAMES)zatom-identifiersr   zLITERALS)zatom-literalsz=STRINGS NUMBERS TUPLELITERALS LISTLITERALS DICTIONARYLITERALSzTUPLESz	SEQUENCESzTUPLELITERALS)z	exprlistszTUPLES LITERALSzLISTS)ztypesseq-mutablezLISTLITERALSzLISTLITERALS)zlistszLISTS LITERALSzDICTIONARIES)ztypesmappingzDICTIONARYLITERALSzDICTIONARYLITERALS)zdictzDICTIONARIES LITERALSz
ATTRIBUTES)zattribute-referencesz(getattr hasattr setattr ATTRIBUTEMETHODSz
SUBSCRIPTS)zsubscriptionszSEQUENCEMETHODSzSLICINGS)zslicingszSEQUENCEMETHODSzCALLS)zcallszEXPRESSIONSzPOWER)zpowerzEXPRESSIONSzUNARY)zunaryzEXPRESSIONSzBINARY)zbinaryzEXPRESSIONSzSHIFTING)zshiftingzEXPRESSIONSzBITWISE)zbitwisezEXPRESSIONSz
COMPARISON)zcomparisonszEXPRESSIONS BASICMETHODSzBOOLEAN)zbooleanszEXPRESSIONS TRUTHVALUEz	ASSERTIONzassertz
ASSIGNMENT)z
assignmentzAUGMENTEDASSIGNMENTzAUGMENTEDASSIGNMENT)z	augassignzNUMBERMETHODSzDELETIONzdelz	RETURNINGzreturnz	IMPORTINGzimportzCONDITIONALzifzLOOPING)zcompoundzfor while break continuez
TRUTHVALUE)ztruthz if while and or not BASICMETHODSz	DEBUGGING)zdebuggerzpdbzCONTEXTMANAGERS)zcontext-managerszwith0mdictGenerate an HTML page for url.getchar_start_server.<locals>.ServerThread.readyWrap inspect.classify_class_attrs, with fixup for data descriptors._start_server.<locals>.DocServer.server_activate<big><big><strong>Error</strong></big></big>Start an HTTP server thread on a specific port.

    Start an HTML/text server thread, so HTML or text documents can be
    browsed dynamically and interactively with a Web browser.  Example use:

        >>> import time
        >>> import pydoc

        Define a URL handler.  To determine what the client is asking
        for, check the URL and content_type.

        Then get or generate some text or HTML code and return it.

        >>> def my_url_handler(url, content_type):
        ...     text = 'the URL sent was: (%s, %s)' % (url, content_type)
        ...     return text

        Start server thread on port 0.
        If you use port 0, the server will pick a random port number.
        You can then use serverthread.port to get the port number.

        >>> port = 0
        >>> serverthread = pydoc._start_server(my_url_handler, port)

        Check that the server is really started.  If it is, open browser
        and get first page.  Use serverthread.url as the starting page.

        >>> if serverthread.serving:
        ...    import webbrowser

        The next two lines are commented out so a browser doesn't open if
        doctest is run on this module.

        #...    webbrowser.open(serverthread.url)
        #True

        Let the server do its thing. We just need to monitor its status.
        Use time.sleep so the loop doesn't hog the CPU.

        >>> starttime = time.monotonic()
        >>> timeout = 1                    #seconds

        This is a short timeout for testing purposes.

        >>> while serverthread.serving:
        ...     time.sleep(.01)
        ...     if serverthread.serving and time.monotonic() - starttime > timeout:
        ...          serverthread.stop()
        ...          break

        Print any errors that may have occurred.

        >>> print(serverthread.error)
        None
   Process a request from an HTML browser.

            The URL received is in self.path.
            Get an HTML page from self.urlhandler and send it.
            getfile?keyProduce HTML documentation for a function or method object.Index of topic texts available.Remove the hexadecimal id from a Python object representation.pydoc - the Python documentation tool

{cmd} <name> ...
    Show text documentation on something.  <name> may be the name of a
    Python keyword, topic, function, module, or package, or a dotted
    reference to a class or function within a module or module in a
    package.  If <name> contains a '{sep}', it is used as the path to a
    Python source file to document. If name is 'keywords', 'topics',
    or 'modules', a listing of these things is displayed.

{cmd} -k <keyword>
    Search for a keyword in the synopsis lines of all available modules.

{cmd} -n <hostname>
    Start an HTTP server with the given hostname (default: localhost).

{cmd} -p <port>
    Start an HTTP server on the given port on the local machine.  Port
    number 0 can be used to get an arbitrary unused port.

{cmd} -b
    Start an HTTP server on an arbitrary unused port and open a Web browser
    to interactively browse documentation.  This option can be used in
    combination with -n and/or -p.

{cmd} -w <name> ...
    Write out the HTML documentation for a module to a file in the current
    directory.  If <name> contains a '{sep}', it is treated as a filename; if
    it names a directory, documentation is written for all the contents.
HTMLDoc.headingTextDoc.formatvaluecould not find objectStart the enhanced pydoc Web server and open a Web browser.

    Use port '0' to start the server on an arbitrary port.
    Set open_browser to False to suppress opening a browser.
    Produce HTML documentation for a module object.HTMLDoc.filelinkbk:n:p:w
            <div style='float:left'>
                Python %s<br>%s
            </div>
            <div style='float:right'>
                <div style='text-align:center'>
                  <a href="index.html">Module Index</a>
                  : <a href="topics.html">Topics</a>
                  : <a href="keywords.html">Keywords</a>
                </div>
                <div>
                    <form action="get" style='display:inline;'>
                      <input type=text name=key size=15>
                      <input type=submit value="Get">
                    </form>&nbsp;
                    <form action="search" style='display:inline;'>
                      <input type=text name=key size=15>
                      <input type=submit value="Search">
                    </form>
                </div>
            </div>
            HTMLDoc.docotherlistkeywordsisbuiltin<a href="topic?key=%s">%s</a><a name="%s"><strong>%s</strong></a> = %sSourcelessFileLoaderProduce HTML documentation for a class object.Convert sys.path into a list of absolute, existing, unique paths.base_exec_prefix%s.%s.htmlStop the server and this thread nicelyMake a link for an identifier, given name-to-URL mappings.sort_attributes.<locals>.<lambda><a href=".">index</a><br><dl><dt>%s%s</dl>
<!DOCTYPE html PUBLIC "-//W3C//DTD HTML 4.0 Transitional//EN">
<html><head><title>Pydoc: %s</title>
<meta http-equiv="Content-Type" content="text/html; charset=utf-8">
%s</head><body bgcolor="#f0f0f8">%s<div style="clear:both;padding-top:.5em;">%s</div>
</body></html>Page through text on a text terminal._url_handler.<locals>.html_getobj<table width="100%%" summary="list"><tr>%s</tr></table>HTMLDoc.bigsectionHTMLDoc.docclass.<locals>.<lambda>https://docs.python.org/%d.%d/libraryhelp> bad pydoc urlFormat a page heading.TextDoc.docroutinecramimclassargspecgetattr_staticHTMLRepr.repr_instancelistsymbolsmakenamerepr_unicodeFormatter class for text documentation.Generate documentation for an object.getabsfile<p align=right><font color="#909090" face="helvetica,arial"><strong>pydoc</strong> by Ka-Ping Yee&lt;ping@lfw.org&gt;</font>fgcolClass methods %s:
**=<dd><tt>%s</tt></dd>
Doc.failFormatter class for HTML documentation.Split a doc string into a synopsis line (if any) and the rest.pipepagerclass methodModuleScannerapropos.<locals>.callbackIndent text by prepending a given prefix to each line.showtopic<dl><dt>Method resolution order:</dt>
%=is_bytecodemore_xrefstest.pydoc_modHTMLDoc.docpropertygetset descriptor %s.%s.%sserver> HTMLRepr.escapelisttopicshttp://www.python.org/dev/peps/pep-%04d/chopMake a link for a class.Class for safely making an HTML representation of a Python object..html#docsvrisdatabuilt-in module TextRepr.repr1_PlainTextDoc.bold_split_list_start_server.<locals>.ServerThread.runPage through text by invoking a program on a temporary file.<a href="getfile?key=%s">%s</a>search_resultData descriptors %sDo a series of global replacements on a string./=Mark up some plain text, given a context of symbols to look for.
        Each context dictionary maps object names to anchor names.#bb0000<strong>%s</strong> = <a name="%s">class %s</a>Print all the one-line module summaries that contain a substring.-- more --HTMLDoc.formattreeûzFalseÚ zNoner   zTruer   zandzBOOLEANzaszwithzassert)zassertr   zasync)zasyncr   zawait)zawaitr   zbreak)zbreakz	while forzclass)zclasszCLASSES SPECIALMETHODSzcontinue)zcontinuez	while forzdef)zfunctionr   zdel)zdelzBASICMETHODSzelifzifzelse)zelsez	while forzexceptztryzfinallyztryzfor)zforzbreak continue whilezfromzimportzglobal)zglobalznonlocal NAMESPACESzif)zifz
TRUTHVALUEzimport)zimportzMODULESzin)zinzSEQUENCEMETHODSzisz
COMPARISONzlambda)zlambdaz	FUNCTIONSznonlocal)znonlocalzglobal NAMESPACESznotzBOOLEANzorzBOOLEANzpass)zpassr   zraise)zraisez
EXCEPTIONSzreturn)zreturnz	FUNCTIONSztry)ztryz
EXCEPTIONSzwhile)zwhilezbreak continue if TRUTHVALUEzwith)zwithz CONTEXTMANAGERS EXCEPTIONS yieldzyield)zyieldr   0<td width="%d%%" valign=top>Sort the attrs list in-place by _fields and then alphabetically by name<a href="#%s">%s</a>ispathTextRepr.__init__wrapped_text^=<strong>%s</strong> <em>lambda</em> HTMLDoc.multicolumn<link rel="stylesheet" type="text/css" href="pydoc_data/_pydoc.css">maxother_url_handler.<locals>.html_topicpage.<locals>.bltinlinkFormat a list of items into a multi-column list._escape_stdoutProduce HTML for a class tree as given by inspect.getclasstree().Generate Python documentation in HTML or text for interactive use.

At the Python interactive prompt, calling help(thing) on a Python object
documents the object, and calling help() starts up an interactive
help session.

Or, at the shell command line outside of Python:

Run "pydoc <name>" to show documentation on something.  <name> may be
the name of a function, module, package, or a dotted reference to a
class or function within a module or module in a package.  If the
argument contains a path segment delimiter (e.g. slash on Unix,
backslash on Windows) it is treated as the path to a Python source file.

Run "pydoc -k <keyword>" to search for a keyword in the synopsis lines
of all available modules.

Run "pydoc -n <hostname>" to start an HTTP server with the given
hostname (default: localhost) on the local machine.

Run "pydoc -p <port>" to start an HTTP server on the given port on the
local machine.  Port number 0 can be used to get an arbitrary unused port.

Run "pydoc -b" to start an HTTP server on an arbitrary unused port and
open a Web browser to interactively browse documentation.  Combine with
the -n and -p options to control the hostname and port used.

Run "pydoc -w <name>" to write out the HTML documentation for a module
to a file named "<name>.html".

Module docs for core modules are assumed to be in

    https://docs.python.org/X.Y/library/

This can be overridden by setting the PYTHONDOCS environment variable
to a different URL or to a local directory containing the Library
Reference Manual pages.
%s [%s, %s]Produce text documentation for a property.emacsFormat literal preformatted text. method of %s instance(less) 2>/dev/nullwritedoc<pre>%s</pre>
Enter any module name to get more help.  Or, type "modules spam" to search
for modules whose name or summary contain the string "spam".
Helper.interactReturn unbuffered tuple of (topic, xrefs).

        If an error occurs here, the exception is caught and displayed by
        the url handler.

        This function duplicates the showtopic method but returns its
        result directly so it can be formatted for display in an html page.
        
Here is a list of available topics.  Enter any topic name to get more help.

EXTENSION_SUFFIXESData and other attributes %s:
http://%s:%d/_url_handler.<locals>.get_html_page
Please wait a moment while I gather a list of all available modules...

HTMLRepr.repr1HTMLDoc.markupHTMLDoc.sectionGet a class name and qualify it with a module name if necessary.<p>
<table width="100%%" cellspacing=0 cellpadding=2 border=0 summary="section">
<tr bgcolor="%s">
<td colspan=3 valign=bottom>&nbsp;<br>
<font color="%s" face="helvetica, arial">%s</font></td></tr>
    <big><big><strong>INDEX</strong></big></big><br><a href="%(docloc)s">Module Reference</a>#-An interruptible scanner that searches module synopses.Produce text documentation for a given class object.Ensures current directory is on sys.path, and __main__ directory is not.

    Exception: __main__ dir is left alone if it's also pydoc's directory.
    isdatadescriptor<p>%s</p>
Simply print unformatted text.  This is the ultimate fallback.Error - %s#ffc8d8TextRepr.repr_instanceGuido van Rossum, for an excellent programming language.
Tommy Burnette, the original creator of manpy.
Paul Prescod, for all his work on onlinehelp.
Richard Chamberlain, for the first implementation of textdoc.
Helper.helpTextDoc.docdata_start_server.<locals>.DocServer.__init__ in module ©ÚselfÚobjectÚnameÚmodÚsynopÚdescÚresultÚallÚdoclocÚclassesÚkeyÚvalueÚfuncsÚdataÚmodpkgsÚmodpkgs_namesÚimporterÚmodnameÚispkgÚ
submodulesÚ	classlistÚcontentsÚversionÚfileImport a module; handle errors; return None if the module isn't found.

    If the module *is* found but an exception occurs, it's wrapped in an
    ErrorDuringImport exception and reraised.  Unlike __import__, if a
    package path is specified, the module at the end of the path is returned,
    not the package at the beginning.  If the optional 'forceload' argument
    is 1, we reload the module from disk (unless it's a dynamic extension).Related help topics: Format an HTML page.Helper.getline#ee77aaProduce a short description of the given thing.ûú%zOPERATORS FORMATTINGz**zPOWERú,zTUPLES LISTS FUNCTIONSÚ.z ATTRIBUTES FLOAT MODULES OBJECTSz...zELLIPSISú:zSLICINGS DICTIONARYLITERALSú@z	def classú\zSTRINGSÚ_zPRIVATENAMESz__zPRIVATENAMES SPECIALMETHODSú`z
BACKQUOTESú(zTUPLES FUNCTIONS CALLSú)zTUPLES FUNCTIONS CALLSú[zLISTS SUBSCRIPTS SLICINGSú]zLISTS SUBSCRIPTS SLICINGS0render_docRaise an exception for unimplemented types.http://www.rfc-editor.org/rfc/rfc%d.txtdon't know how to document object%s of type %s<dl><dt>%s</dt></dl>
get?key<module pydoc>Ensures current directory is on returned path, and argv0 directory is not

    Exception: argv0 dir is left alone if it's also pydoc's directory.

    Returns a new path entry list, or None if no adjustment is needed.
    Format a section with a heading.Class for safely making a text representation of a Python object.<a href="%s.html">%s</a><dt><font face="helvetica, arial">Get and display a source file listing safely._url_handler.<locals>.html_topics.<locals>.bltinlinkHelper.listkeywordsLocate an object by name or dotted path, importing as necessary.Return the location of module docs or None<dd>
%s</dd>
Python Library Documentation: %s<dl><dt>%s</dt>%s</dl>
classname_is_some_method<big><big><strong>Search Results</strong></big></big>
<table width="100%%" cellspacing=0 cellpadding=2 border=0 summary="heading">
<tr bgcolor="%s">
<td valign=bottom>&nbsp;<br>
<font color="%s" face="helvetica, arial">&nbsp;<br>%s</font></td
><td align=right valign=bottom
><font color="%s" face="helvetica, arial">%s</font></td></tr></table>
    
<tr><td bgcolor="%s">%s</td><td>%s</td>Produce HTML documentation for a data object._url_handler.<locals>.html_getfile_start_server.<locals>.DocHandler.do_GET<%s.%s instance><%s instance>docserverFile: %s_adjust_cli_sys_pathHelper.listtopicsHelper.output(...)Methods %s:
<font color="#909090">%s</font>Built-in ModulesTextDoc.docproperty%s; charset=UTF-8 unbound %s methodStart the server.No Python documentation found for %r.
Use help() to get the interactive help utility.
Use help(str) for help on the str class.Remove boldface formatting from text.CREDITSSUBMODULESGenerate an HTML index for a directory of modules._start_server.<locals>.ServerThread.stopDecide what method to use for paging through text.stdlib_dirscript_dirHelper.showtopicunknown content type %r for url %skey = %sTextDoc._docdescriptorMake a link for a module or package to display in an index.allmethodsModuleScanner.runMake a link for a module.<dl><dt>%s</dl>
writedocs//=<<=_url_handler.<locals>.html_search.<locals>.callbackTextDoc.docmodule<a href="%s.html#%s">%s</a>nextmoduleserver_help_msg&=keyfuncproblem in %s - %s: %s<!DOCTYPE html PUBLIC "-//W3C//DTD HTML 4.0 Transitional//EN">
<html><head><title>Python: %s</title>
<meta http-equiv="Content-Type" content="text/html; charset=utf-8">
</head><body bgcolor="#f0f0f8">
%s
</body></html>marginalia<font color="#c040c0">\1</font>selfdot_repr_instancefile %r does not exist<big><big><strong>File Listing</strong></big></big>Package Contents<dl><dt><strong>%s</strong></dt>
could not find topic
You are now leaving help and returning to the Python interpreter.
If you want to ask for help on a particular object directly from the
interpreter, you can type "help(object)".  Executing "help('string')"
has the same effect as typing a particular string at the help> prompt.
_url_handler.<locals>.html_search.<locals>.onerrorKEYWORDnamelink<dd>%s</dd>
TextDoc.docotherHTMLDoc.classlinkpreludegetfile %sHTMLDoc.docclass.<locals>.HorizontalRule.__init__Helper.listsymbolsMake a link to source file.PACKAGE CONTENTSpathdirs

The following documentation is automatically generated from the Python
source files.  It may be incomplete, incorrect or include features that
are considered implementation detail and may vary between Python
implementations.  When in doubt, consult the module reference at the
location listed above.
 (package)HTMLDoc.modpkglinkSearch results page.26 February 2001HTMLDoc.docroutine<a href="file:%s">%s</a>Format a section with a big heading.htmlhelpDecide whether to show documentation on a variable.normdirssplitdocHTMLRepr.__init__TextDoc.docclass.<locals>.makenameHTMLDoc.formatvalue_GoInteractive_url_handler.<locals>._HTMLDoc.filelinkHTMLDoc.docclass.<locals>.spilldata_url_handler.<locals>.html_search.<locals>.bltinlinktempfilepagerHTMLDoc.index.<locals>.<genexpr>Helper.listmodules.<locals>.onerrorDoc.document
Here is a list of the Python keywords.  Enter any keyword to get more help.

_url_handler.<locals>.html_keywords.<locals>.bltinlink©ÚselfÚobjectÚnameÚmodÚignoredÚrealnameÚbasesÚmakenameÚtitleÚparentsÚcontentsÚpushÚ	signatureÚargspecÚdocÚmroÚbaseÚHorizontalRuleÚhrÚspillÚspilldescriptorsÚ	spilldataÚattrsÚ	thisclassÚ	inheritedÚtag
Welcome to Python {0}'s help utility!

If this is your first time using Python, you should definitely check out
the tutorial on the Internet at https://docs.python.org/{0}/tutorial/.

Enter the name of any module, keyword, or topic to get help on writing
Python programs and using Python modules.  To quit this help utility and
return to the interpreter, just type "quit".

To get a list of available modules, keywords, symbols, or topics, type
"modules", "keywords", "symbols", or "topics".  Each module also comes
with a one-line summary of what it does; to list the modules whose name
or summary contain a given string such as "spam", type "modules spam".
(built-in)©"ÚselfÚobjectÚnameÚmodÚfuncsÚclassesÚignoredÚrealnameÚbasesÚcontentsÚpushÚHorizontalRuleÚhrÚmroÚbaseÚspillÚspilldescriptorsÚ	spilldataÚattrsÚmdictÚkeyÚkindÚhomeclsÚvalueÚanchorÚ	thisclassÚ	inheritedÚtagÚtitleÚparentsÚdeclÚ	signatureÚargspecÚdocBYTECODE_SUFFIXESSubclass of TextDoc which overrides string stylingHelper.inputHTMLDoc.namelinkvisiblenameDisplay text documentation, given an object or a path to an object.self.<strong>%s</strong>HTMLDoc._docdescriptorModule Index page.Format a string in bold by overstriking.Data descriptors %s:
Ka-Ping Yee <ping@lfw.org>TextDoc.docclass.<locals>.HorizontalRule.__init___is_bound_methodmaxdictimportfileTextRepr.repr_stringProduce html documentation for a data descriptor.Command-line interface (looks at sys.argv to decide what to do).Produce text documentation for a data descriptor.defined heresafeimport#55aa55
</font></dt>source_synopsisTextDoc.bold.<locals>.<genexpr>TextDoc.docclass.<locals>.spilldescriptorsHTMLDoc.grey_start_server.<locals>.ServerThread.__init__plainpager at 0x[0-9a-f]{6,16}(>+)$
    Returns True if fn is a bound method, regardless of whether
    fn was implemented in Python or in C.
    <module pydoc_data>pydoc_data\__init__.pyNUITKA_PACKAGE_pydoc_data<module pydoc_data.topics>pydoc_data\topics.pyûzassertau  The "assert" statement
**********************

Assert statements are a convenient way to insert debugging assertions
into a program:

   assert_stmt ::= "assert" expression ["," expression]

The simple form, "assert expression", is equivalent to

   if __debug__:
       if not expression: raise AssertionError

The extended form, "assert expression1, expression2", is equivalent to

   if __debug__:
       if not expression1: raise AssertionError(expression2)

These equivalences assume that "__debug__" and "AssertionError" refer
to the built-in variables with those names.  In the current
implementation, the built-in variable "__debug__" is "True" under
normal circumstances, "False" when optimization is requested (command
line option "-O").  The current code generator emits no code for an
assert statement when optimization is requested at compile time.  Note
that it is unnecessary to include the source code for the expression
that failed in the error message; it will be displayed as part of the
stack trace.

Assignments to "__debug__" are illegal.  The value for the built-in
variable is determined when the interpreter starts.
z
assignmentuu+  Assignment statements
*********************

Assignment statements are used to (re)bind names to values and to
modify attributes or items of mutable objects:

   assignment_stmt ::= (target_list "=")+ (starred_expression | yield_expression)
   target_list     ::= target ("," target)* [","]
   target          ::= identifier
              | "(" [target_list] ")"
              | "[" [target_list] "]"
              | attributeref
              | subscription
              | slicing
              | "*" target

(See section Primaries for the syntax definitions for *attributeref*,
*subscription*, and *slicing*.)

An assignment statement evaluates the expression list (remember that
this can be a single expression or a comma-separated list, the latter
yielding a tuple) and assigns the single resulting object to each of
the target lists, from left to right.

Assignment is defined recursively depending on the form of the target
(list). When a target is part of a mutable object (an attribute
reference, subscription or slicing), the mutable object must
ultimately perform the assignment and decide about its validity, and
may raise an exception if the assignment is unacceptable.  The rules
observed by various types and the exceptions raised are given with the
definition of the object types (see section The standard type
hierarchy).

Assignment of an object to a target list, optionally enclosed in
parentheses or square brackets, is recursively defined as follows.

* If the target list is a single target with no trailing comma,
  optionally in parentheses, the object is assigned to that target.

* Else: The object must be an iterable with the same number of items
  as there are targets in the target list, and the items are assigned,
  from left to right, to the corresponding targets.

  * If the target list contains one target prefixed with an
    asterisk, called a âstarredâ target: The object must be an
    iterable with at least as many items as there are targets in the
    target list, minus one.  The first items of the iterable are
    assigned, from left to right, to the targets before the starred
    target.  The final items of the iterable are assigned to the
    targets after the starred target.  A list of the remaining items
    in the iterable is then assigned to the starred target (the list
    can be empty).

  * Else: The object must be an iterable with the same number of
    items as there are targets in the target list, and the items are
    assigned, from left to right, to the corresponding targets.

Assignment of an object to a single target is recursively defined as
follows.

* If the target is an identifier (name):

  * If the name does not occur in a "global" or "nonlocal" statement
    in the current code block: the name is bound to the object in the
    current local namespace.

  * Otherwise: the name is bound to the object in the global
    namespace or the outer namespace determined by "nonlocal",
    respectively.

  The name is rebound if it was already bound.  This may cause the
  reference count for the object previously bound to the name to reach
  zero, causing the object to be deallocated and its destructor (if it
  has one) to be called.

* If the target is an attribute reference: The primary expression in
  the reference is evaluated.  It should yield an object with
  assignable attributes; if this is not the case, "TypeError" is
  raised.  That object is then asked to assign the assigned object to
  the given attribute; if it cannot perform the assignment, it raises
  an exception (usually but not necessarily "AttributeError").

  Note: If the object is a class instance and the attribute reference
  occurs on both sides of the assignment operator, the RHS expression,
  "a.x" can access either an instance attribute or (if no instance
  attribute exists) a class attribute.  The LHS target "a.x" is always
  set as an instance attribute, creating it if necessary.  Thus, the
  two occurrences of "a.x" do not necessarily refer to the same
  attribute: if the RHS expression refers to a class attribute, the
  LHS creates a new instance attribute as the target of the
  assignment:

     class Cls:
         x = 3             # class variable
     inst = Cls()
     inst.x = inst.x + 1   # writes inst.x as 4 leaving Cls.x as 3

  This description does not necessarily apply to descriptor
  attributes, such as properties created with "property()".

* If the target is a subscription: The primary expression in the
  reference is evaluated.  It should yield either a mutable sequence
  object (such as a list) or a mapping object (such as a dictionary).
  Next, the subscript expression is evaluated.

  If the primary is a mutable sequence object (such as a list), the
  subscript must yield an integer.  If it is negative, the sequenceâs
  length is added to it.  The resulting value must be a nonnegative
  integer less than the sequenceâs length, and the sequence is asked
  to assign the assigned object to its item with that index.  If the
  index is out of range, "IndexError" is raised (assignment to a
  subscripted sequence cannot add new items to a list).

  If the primary is a mapping object (such as a dictionary), the
  subscript must have a type compatible with the mappingâs key type,
  and the mapping is then asked to create a key/datum pair which maps
  the subscript to the assigned object.  This can either replace an
  existing key/value pair with the same key value, or insert a new
  key/value pair (if no key with the same value existed).

  For user-defined objects, the "__setitem__()" method is called with
  appropriate arguments.

* If the target is a slicing: The primary expression in the
  reference is evaluated.  It should yield a mutable sequence object
  (such as a list).  The assigned object should be a sequence object
  of the same type.  Next, the lower and upper bound expressions are
  evaluated, insofar they are present; defaults are zero and the
  sequenceâs length.  The bounds should evaluate to integers. If
  either bound is negative, the sequenceâs length is added to it.  The
  resulting bounds are clipped to lie between zero and the sequenceâs
  length, inclusive.  Finally, the sequence object is asked to replace
  the slice with the items of the assigned sequence.  The length of
  the slice may be different from the length of the assigned sequence,
  thus changing the length of the target sequence, if the target
  sequence allows it.

**CPython implementation detail:** In the current implementation, the
syntax for targets is taken to be the same as for expressions, and
invalid syntax is rejected during the code generation phase, causing
less detailed error messages.

Although the definition of assignment implies that overlaps between
the left-hand side and the right-hand side are âsimultaneousâ (for
example "a, b = b, a" swaps two variables), overlaps *within* the
collection of assigned-to variables occur left-to-right, sometimes
resulting in confusion.  For instance, the following program prints
"[0, 2]":

   x = [0, 1]
   i = 0
   i, x[i] = 1, 2         # i is updated, then x[i] is updated
   print(x)

See also:

  **PEP 3132** - Extended Iterable Unpacking
     The specification for the "*target" feature.


Augmented assignment statements
===============================

Augmented assignment is the combination, in a single statement, of a
binary operation and an assignment statement:

   augmented_assignment_stmt ::= augtarget augop (expression_list | yield_expression)
   augtarget                 ::= identifier | attributeref | subscription | slicing
   augop                     ::= "+=" | "-=" | "*=" | "@=" | "/=" | "//=" | "%=" | "**="
             | ">>=" | "<<=" | "&=" | "^=" | "|="

(See section Primaries for the syntax definitions of the last three
symbols.)

An augmented assignment evaluates the target (which, unlike normal
assignment statements, cannot be an unpacking) and the expression
list, performs the binary operation specific to the type of assignment
on the two operands, and assigns the result to the original target.
The target is only evaluated once.

An augmented assignment expression like "x += 1" can be rewritten as
"x = x + 1" to achieve a similar, but not exactly equal effect. In the
augmented version, "x" is only evaluated once. Also, when possible,
the actual operation is performed *in-place*, meaning that rather than
creating a new object and assigning that to the target, the old object
is modified instead.

Unlike normal assignments, augmented assignments evaluate the left-
hand side *before* evaluating the right-hand side.  For example, "a[i]
+= f(x)" first looks-up "a[i]", then it evaluates "f(x)" and performs
the addition, and lastly, it writes the result back to "a[i]".

With the exception of assigning to tuples and multiple targets in a
single statement, the assignment done by augmented assignment
statements is handled the same way as normal assignments. Similarly,
with the exception of the possible *in-place* behavior, the binary
operation performed by augmented assignment is the same as the normal
binary operations.

For targets which are attribute references, the same caveat about
class and instance attributes applies as for regular assignments.


Annotated assignment statements
===============================

*Annotation* assignment is the combination, in a single statement, of
a variable or attribute annotation and an optional assignment
statement:

   annotated_assignment_stmt ::= augtarget ":" expression ["=" expression]

The difference from normal Assignment statements is that only single
target and only single right hand side value is allowed.

For simple names as assignment targets, if in class or module scope,
the annotations are evaluated and stored in a special class or module
attribute "__annotations__" that is a dictionary mapping from variable
names (mangled if private) to evaluated annotations. This attribute is
writable and is automatically created at the start of class or module
body execution, if annotations are found statically.

For expressions as assignment targets, the annotations are evaluated
if in class or module scope, but not stored.

If a name is annotated in a function scope, then this name is local
for that scope. Annotations are never evaluated and stored in function
scopes.

If the right hand side is present, an annotated assignment performs
the actual assignment before evaluating annotations (where
applicable). If the right hand side is not present for an expression
target, then the interpreter evaluates the target except for the last
"__setitem__()" or "__setattr__()" call.

See also:

  **PEP 526** - Syntax for Variable Annotations
     The proposal that added syntax for annotating the types of
     variables (including class variables and instance variables),
     instead of expressing them through comments.

  **PEP 484** - Type hints
     The proposal that added the "typing" module to provide a standard
     syntax for type annotations that can be used in static analysis
     tools and IDEs.
zasyncu®  Coroutines
**********

New in version 3.5.


Coroutine function definition
=============================

   async_funcdef ::= [decorators] "async" "def" funcname "(" [parameter_list] ")"
                     ["->" expression] ":" suite

Execution of Python coroutines can be suspended and resumed at many
points (see *coroutine*).  Inside the body of a coroutine function,
"await" and "async" identifiers become reserved keywords; "await"
expressions, "async for" and "async with" can only be used in
coroutine function bodies.

Functions defined with "async def" syntax are always coroutine
functions, even if they do not contain "await" or "async" keywords.

It is a "SyntaxError" to use a "yield from" expression inside the body
of a coroutine function.

An example of a coroutine function:

   async def func(param1, param2):
       do_stuff()
       await some_coroutine()


The "async for" statement
=========================

   async_for_stmt ::= "async" for_stmt

An *asynchronous iterable* is able to call asynchronous code in its
*iter* implementation, and *asynchronous iterator* can call
asynchronous code in its *next* method.

The "async for" statement allows convenient iteration over
asynchronous iterators.

The following code:

   async for TARGET in ITER:
       BLOCK
   else:
       BLOCK2

Is semantically equivalent to:

   iter = (ITER)
   iter = type(iter).__aiter__(iter)
   running = True
   while running:
       try:
           TARGET = await type(iter).__anext__(iter)
       except StopAsyncIteration:
           running = False
       else:
           BLOCK
   else:
       BLOCK2

See also "__aiter__()" and "__anext__()" for details.

It is a "SyntaxError" to use an "async for" statement outside the body
of a coroutine function.


The "async with" statement
==========================

   async_with_stmt ::= "async" with_stmt

An *asynchronous context manager* is a *context manager* that is able
to suspend execution in its *enter* and *exit* methods.

The following code:

   async with EXPR as VAR:
       BLOCK

Is semantically equivalent to:

   mgr = (EXPR)
   aexit = type(mgr).__aexit__
   aenter = type(mgr).__aenter__(mgr)

   VAR = await aenter
   try:
       BLOCK
   except:
       if not await aexit(mgr, *sys.exc_info()):
           raise
   else:
       await aexit(mgr, None, None, None)

See also "__aenter__()" and "__aexit__()" for details.

It is a "SyntaxError" to use an "async with" statement outside the
body of a coroutine function.

See also:

  **PEP 492** - Coroutines with async and await syntax
     The proposal that made coroutines a proper standalone concept in
     Python, and added supporting syntax.

-[ Footnotes ]-

[1] The exception is propagated to the invocation stack unless
    there is a "finally" clause which happens to raise another
    exception. That new exception causes the old one to be lost.

[2] A string literal appearing as the first statement in the
    function body is transformed into the functionâs "__doc__"
    attribute and therefore the functionâs *docstring*.

[3] A string literal appearing as the first statement in the class
    body is transformed into the namespaceâs "__doc__" item and
    therefore the classâs *docstring*.
zatom-identifiersaÌ  Identifiers (Names)
*******************

An identifier occurring as an atom is a name.  See section Identifiers
and keywords for lexical definition and section Naming and binding for
documentation of naming and binding.

When the name is bound to an object, evaluation of the atom yields
that object. When a name is not bound, an attempt to evaluate it
raises a "NameError" exception.

**Private name mangling:** When an identifier that textually occurs in
a class definition begins with two or more underscore characters and
does not end in two or more underscores, it is considered a *private
name* of that class. Private names are transformed to a longer form
before code is generated for them.  The transformation inserts the
class name, with leading underscores removed and a single underscore
inserted, in front of the name.  For example, the identifier "__spam"
occurring in a class named "Ham" will be transformed to "_Ham__spam".
This transformation is independent of the syntactical context in which
the identifier is used.  If the transformed name is extremely long
(longer than 255 characters), implementation defined truncation may
happen. If the class name consists only of underscores, no
transformation is done.
zatom-literalsu  Literals
********

Python supports string and bytes literals and various numeric
literals:

   literal ::= stringliteral | bytesliteral
               | integer | floatnumber | imagnumber

Evaluation of a literal yields an object of the given type (string,
bytes, integer, floating point number, complex number) with the given
value.  The value may be approximated in the case of floating point
and imaginary (complex) literals.  See section Literals for details.

All literals correspond to immutable data types, and hence the
objectâs identity is less important than its value.  Multiple
evaluations of literals with the same value (either the same
occurrence in the program text or a different occurrence) may obtain
the same object or a different object with the same value.
zattribute-accessu41  Customizing attribute access
****************************

The following methods can be defined to customize the meaning of
attribute access (use of, assignment to, or deletion of "x.name") for
class instances.

object.__getattr__(self, name)

   Called when the default attribute access fails with an
   "AttributeError" (either "__getattribute__()" raises an
   "AttributeError" because *name* is not an instance attribute or an
   attribute in the class tree for "self"; or "__get__()" of a *name*
   property raises "AttributeError").  This method should either
   return the (computed) attribute value or raise an "AttributeError"
   exception.

   Note that if the attribute is found through the normal mechanism,
   "__getattr__()" is not called.  (This is an intentional asymmetry
   between "__getattr__()" and "__setattr__()".) This is done both for
   efficiency reasons and because otherwise "__getattr__()" would have
   no way to access other attributes of the instance.  Note that at
   least for instance variables, you can fake total control by not
   inserting any values in the instance attribute dictionary (but
   instead inserting them in another object).  See the
   "__getattribute__()" method below for a way to actually get total
   control over attribute access.

object.__getattribute__(self, name)

   Called unconditionally to implement attribute accesses for
   instances of the class. If the class also defines "__getattr__()",
   the latter will not be called unless "__getattribute__()" either
   calls it explicitly or raises an "AttributeError". This method
   should return the (computed) attribute value or raise an
   "AttributeError" exception. In order to avoid infinite recursion in
   this method, its implementation should always call the base class
   method with the same name to access any attributes it needs, for
   example, "object.__getattribute__(self, name)".

   Note: This method may still be bypassed when looking up special
     methods as the result of implicit invocation via language syntax
     or built-in functions. See Special method lookup.

object.__setattr__(self, name, value)

   Called when an attribute assignment is attempted.  This is called
   instead of the normal mechanism (i.e. store the value in the
   instance dictionary). *name* is the attribute name, *value* is the
   value to be assigned to it.

   If "__setattr__()" wants to assign to an instance attribute, it
   should call the base class method with the same name, for example,
   "object.__setattr__(self, name, value)".

object.__delattr__(self, name)

   Like "__setattr__()" but for attribute deletion instead of
   assignment.  This should only be implemented if "del obj.name" is
   meaningful for the object.

object.__dir__(self)

   Called when "dir()" is called on the object. A sequence must be
   returned. "dir()" converts the returned sequence to a list and
   sorts it.


Customizing module attribute access
===================================

Special names "__getattr__" and "__dir__" can be also used to
customize access to module attributes. The "__getattr__" function at
the module level should accept one argument which is the name of an
attribute and return the computed value or raise an "AttributeError".
If an attribute is not found on a module object through the normal
lookup, i.e. "object.__getattribute__()", then "__getattr__" is
searched in the module "__dict__" before raising an "AttributeError".
If found, it is called with the attribute name and the result is
returned.

The "__dir__" function should accept no arguments, and return a list
of strings that represents the names accessible on module. If present,
this function overrides the standard "dir()" search on a module.

For a more fine grained customization of the module behavior (setting
attributes, properties, etc.), one can set the "__class__" attribute
of a module object to a subclass of "types.ModuleType". For example:

   import sys
   from types import ModuleType

   class VerboseModule(ModuleType):
       def __repr__(self):
           return f'Verbose {self.__name__}'

       def __setattr__(self, attr, value):
           print(f'Setting {attr}...')
           super().__setattr__(attr, value)

   sys.modules[__name__].__class__ = VerboseModule

Note: Defining module "__getattr__" and setting module "__class__"
  only affect lookups made using the attribute access syntax â
  directly accessing the module globals (whether by code within the
  module, or via a reference to the moduleâs globals dictionary) is
  unaffected.

Changed in version 3.5: "__class__" module attribute is now writable.

New in version 3.7: "__getattr__" and "__dir__" module attributes.

See also:

  **PEP 562** - Module __getattr__ and __dir__
     Describes the "__getattr__" and "__dir__" functions on modules.


Implementing Descriptors
========================

The following methods only apply when an instance of the class
containing the method (a so-called *descriptor* class) appears in an
*owner* class (the descriptor must be in either the ownerâs class
dictionary or in the class dictionary for one of its parents).  In the
examples below, âthe attributeâ refers to the attribute whose name is
the key of the property in the owner classâ "__dict__".

object.__get__(self, instance, owner)

   Called to get the attribute of the owner class (class attribute
   access) or of an instance of that class (instance attribute
   access). *owner* is always the owner class, while *instance* is the
   instance that the attribute was accessed through, or "None" when
   the attribute is accessed through the *owner*.  This method should
   return the (computed) attribute value or raise an "AttributeError"
   exception.

object.__set__(self, instance, value)

   Called to set the attribute on an instance *instance* of the owner
   class to a new value, *value*.

object.__delete__(self, instance)

   Called to delete the attribute on an instance *instance* of the
   owner class.

object.__set_name__(self, owner, name)

   Called at the time the owning class *owner* is created. The
   descriptor has been assigned to *name*.

   New in version 3.6.

The attribute "__objclass__" is interpreted by the "inspect" module as
specifying the class where this object was defined (setting this
appropriately can assist in runtime introspection of dynamic class
attributes). For callables, it may indicate that an instance of the
given type (or a subclass) is expected or required as the first
positional argument (for example, CPython sets this attribute for
unbound methods that are implemented in C).


Invoking Descriptors
====================

In general, a descriptor is an object attribute with âbinding
behaviorâ, one whose attribute access has been overridden by methods
in the descriptor protocol:  "__get__()", "__set__()", and
"__delete__()". If any of those methods are defined for an object, it
is said to be a descriptor.

The default behavior for attribute access is to get, set, or delete
the attribute from an objectâs dictionary. For instance, "a.x" has a
lookup chain starting with "a.__dict__['x']", then
"type(a).__dict__['x']", and continuing through the base classes of
"type(a)" excluding metaclasses.

However, if the looked-up value is an object defining one of the
descriptor methods, then Python may override the default behavior and
invoke the descriptor method instead.  Where this occurs in the
precedence chain depends on which descriptor methods were defined and
how they were called.

The starting point for descriptor invocation is a binding, "a.x". How
the arguments are assembled depends on "a":

Direct Call
   The simplest and least common call is when user code directly
   invokes a descriptor method:    "x.__get__(a)".

Instance Binding
   If binding to an object instance, "a.x" is transformed into the
   call: "type(a).__dict__['x'].__get__(a, type(a))".

Class Binding
   If binding to a class, "A.x" is transformed into the call:
   "A.__dict__['x'].__get__(None, A)".

Super Binding
   If "a" is an instance of "super", then the binding "super(B,
   obj).m()" searches "obj.__class__.__mro__" for the base class "A"
   immediately preceding "B" and then invokes the descriptor with the
   call: "A.__dict__['m'].__get__(obj, obj.__class__)".

For instance bindings, the precedence of descriptor invocation depends
on the which descriptor methods are defined.  A descriptor can define
any combination of "__get__()", "__set__()" and "__delete__()".  If it
does not define "__get__()", then accessing the attribute will return
the descriptor object itself unless there is a value in the objectâs
instance dictionary.  If the descriptor defines "__set__()" and/or
"__delete__()", it is a data descriptor; if it defines neither, it is
a non-data descriptor.  Normally, data descriptors define both
"__get__()" and "__set__()", while non-data descriptors have just the
"__get__()" method.  Data descriptors with "__set__()" and "__get__()"
defined always override a redefinition in an instance dictionary.  In
contrast, non-data descriptors can be overridden by instances.

Python methods (including "staticmethod()" and "classmethod()") are
implemented as non-data descriptors.  Accordingly, instances can
redefine and override methods.  This allows individual instances to
acquire behaviors that differ from other instances of the same class.

The "property()" function is implemented as a data descriptor.
Accordingly, instances cannot override the behavior of a property.


__slots__
=========

*__slots__* allow us to explicitly declare data members (like
properties) and deny the creation of *__dict__* and *__weakref__*
(unless explicitly declared in *__slots__* or available in a parent.)

The space saved over using *__dict__* can be significant. Attribute
lookup speed can be significantly improved as well.

object.__slots__

   This class variable can be assigned a string, iterable, or sequence
   of strings with variable names used by instances.  *__slots__*
   reserves space for the declared variables and prevents the
   automatic creation of *__dict__* and *__weakref__* for each
   instance.


Notes on using *__slots__*
--------------------------

* When inheriting from a class without *__slots__*, the *__dict__*
  and *__weakref__* attribute of the instances will always be
  accessible.

* Without a *__dict__* variable, instances cannot be assigned new
  variables not listed in the *__slots__* definition.  Attempts to
  assign to an unlisted variable name raises "AttributeError". If
  dynamic assignment of new variables is desired, then add
  "'__dict__'" to the sequence of strings in the *__slots__*
  declaration.

* Without a *__weakref__* variable for each instance, classes
  defining *__slots__* do not support weak references to its
  instances. If weak reference support is needed, then add
  "'__weakref__'" to the sequence of strings in the *__slots__*
  declaration.

* *__slots__* are implemented at the class level by creating
  descriptors (Implementing Descriptors) for each variable name.  As a
  result, class attributes cannot be used to set default values for
  instance variables defined by *__slots__*; otherwise, the class
  attribute would overwrite the descriptor assignment.

* The action of a *__slots__* declaration is not limited to the
  class where it is defined.  *__slots__* declared in parents are
  available in child classes. However, child subclasses will get a
  *__dict__* and *__weakref__* unless they also define *__slots__*
  (which should only contain names of any *additional* slots).

* If a class defines a slot also defined in a base class, the
  instance variable defined by the base class slot is inaccessible
  (except by retrieving its descriptor directly from the base class).
  This renders the meaning of the program undefined.  In the future, a
  check may be added to prevent this.

* Nonempty *__slots__* does not work for classes derived from
  âvariable-lengthâ built-in types such as "int", "bytes" and "tuple".

* Any non-string iterable may be assigned to *__slots__*. Mappings
  may also be used; however, in the future, special meaning may be
  assigned to the values corresponding to each key.

* *__class__* assignment works only if both classes have the same
  *__slots__*.

* Multiple inheritance with multiple slotted parent classes can be
  used, but only one parent is allowed to have attributes created by
  slots (the other bases must have empty slot layouts) - violations
  raise "TypeError".
zattribute-referencesa  Attribute references
********************

An attribute reference is a primary followed by a period and a name:

   attributeref ::= primary "." identifier

The primary must evaluate to an object of a type that supports
attribute references, which most objects do.  This object is then
asked to produce the attribute whose name is the identifier.  This
production can be customized by overriding the "__getattr__()" method.
If this attribute is not available, the exception "AttributeError" is
raised.  Otherwise, the type and value of the object produced is
determined by the object.  Multiple evaluations of the same attribute
reference may yield different objects.
z	augassignaÛ  Augmented assignment statements
*******************************

Augmented assignment is the combination, in a single statement, of a
binary operation and an assignment statement:

   augmented_assignment_stmt ::= augtarget augop (expression_list | yield_expression)
   augtarget                 ::= identifier | attributeref | subscription | slicing
   augop                     ::= "+=" | "-=" | "*=" | "@=" | "/=" | "//=" | "%=" | "**="
             | ">>=" | "<<=" | "&=" | "^=" | "|="

(See section Primaries for the syntax definitions of the last three
symbols.)

An augmented assignment evaluates the target (which, unlike normal
assignment statements, cannot be an unpacking) and the expression
list, performs the binary operation specific to the type of assignment
on the two operands, and assigns the result to the original target.
The target is only evaluated once.

An augmented assignment expression like "x += 1" can be rewritten as
"x = x + 1" to achieve a similar, but not exactly equal effect. In the
augmented version, "x" is only evaluated once. Also, when possible,
the actual operation is performed *in-place*, meaning that rather than
creating a new object and assigning that to the target, the old object
is modified instead.

Unlike normal assignments, augmented assignments evaluate the left-
hand side *before* evaluating the right-hand side.  For example, "a[i]
+= f(x)" first looks-up "a[i]", then it evaluates "f(x)" and performs
the addition, and lastly, it writes the result back to "a[i]".

With the exception of assigning to tuples and multiple targets in a
single statement, the assignment done by augmented assignment
statements is handled the same way as normal assignments. Similarly,
with the exception of the possible *in-place* behavior, the binary
operation performed by augmented assignment is the same as the normal
binary operations.

For targets which are attribute references, the same caveat about
class and instance attributes applies as for regular assignments.
zawaitzÊAwait expression
****************

Suspend the execution of *coroutine* on an *awaitable* object. Can
only be used inside a *coroutine function*.

   await_expr ::= "await" primary

New in version 3.5.
zbinaryuj  Binary arithmetic operations
****************************

The binary arithmetic operations have the conventional priority
levels.  Note that some of these operations also apply to certain non-
numeric types.  Apart from the power operator, there are only two
levels, one for multiplicative operators and one for additive
operators:

   m_expr ::= u_expr | m_expr "*" u_expr | m_expr "@" m_expr |
              m_expr "//" u_expr | m_expr "/" u_expr |
              m_expr "%" u_expr
   a_expr ::= m_expr | a_expr "+" m_expr | a_expr "-" m_expr

The "*" (multiplication) operator yields the product of its arguments.
The arguments must either both be numbers, or one argument must be an
integer and the other must be a sequence. In the former case, the
numbers are converted to a common type and then multiplied together.
In the latter case, sequence repetition is performed; a negative
repetition factor yields an empty sequence.

The "@" (at) operator is intended to be used for matrix
multiplication.  No builtin Python types implement this operator.

New in version 3.5.

The "/" (division) and "//" (floor division) operators yield the
quotient of their arguments.  The numeric arguments are first
converted to a common type. Division of integers yields a float, while
floor division of integers results in an integer; the result is that
of mathematical division with the âfloorâ function applied to the
result.  Division by zero raises the "ZeroDivisionError" exception.

The "%" (modulo) operator yields the remainder from the division of
the first argument by the second.  The numeric arguments are first
converted to a common type.  A zero right argument raises the
"ZeroDivisionError" exception.  The arguments may be floating point
numbers, e.g., "3.14%0.7" equals "0.34" (since "3.14" equals "4*0.7 +
0.34".)  The modulo operator always yields a result with the same sign
as its second operand (or zero); the absolute value of the result is
strictly smaller than the absolute value of the second operand [1].

The floor division and modulo operators are connected by the following
identity: "x == (x//y)*y + (x%y)".  Floor division and modulo are also
connected with the built-in function "divmod()": "divmod(x, y) ==
(x//y, x%y)". [2].

In addition to performing the modulo operation on numbers, the "%"
operator is also overloaded by string objects to perform old-style
string formatting (also known as interpolation).  The syntax for
string formatting is described in the Python Library Reference,
section printf-style String Formatting.

The floor division operator, the modulo operator, and the "divmod()"
function are not defined for complex numbers.  Instead, convert to a
floating point number using the "abs()" function if appropriate.

The "+" (addition) operator yields the sum of its arguments.  The
arguments must either both be numbers or both be sequences of the same
type.  In the former case, the numbers are converted to a common type
and then added together. In the latter case, the sequences are
concatenated.

The "-" (subtraction) operator yields the difference of its arguments.
The numeric arguments are first converted to a common type.
zbitwisea$  Binary bitwise operations
*************************

Each of the three bitwise operations has a different priority level:

   and_expr ::= shift_expr | and_expr "&" shift_expr
   xor_expr ::= and_expr | xor_expr "^" and_expr
   or_expr  ::= xor_expr | or_expr "|" xor_expr

The "&" operator yields the bitwise AND of its arguments, which must
be integers.

The "^" operator yields the bitwise XOR (exclusive OR) of its
arguments, which must be integers.

The "|" operator yields the bitwise (inclusive) OR of its arguments,
which must be integers.
zbltin-code-objectsux  Code Objects
************

Code objects are used by the implementation to represent âpseudo-
compiledâ executable Python code such as a function body. They differ
from function objects because they donât contain a reference to their
global execution environment.  Code objects are returned by the built-
in "compile()" function and can be extracted from function objects
through their "__code__" attribute. See also the "code" module.

A code object can be executed or evaluated by passing it (instead of a
source string) to the "exec()" or "eval()"  built-in functions.

See The standard type hierarchy for more information.
zbltin-ellipsis-objecta.  The Ellipsis Object
*******************

This object is commonly used by slicing (see Slicings).  It supports
no special operations.  There is exactly one ellipsis object, named
"Ellipsis" (a built-in name).  "type(Ellipsis)()" produces the
"Ellipsis" singleton.

It is written as "Ellipsis" or "...".
zbltin-null-objectu  The Null Object
***************

This object is returned by functions that donât explicitly return a
value.  It supports no special operations.  There is exactly one null
object, named "None" (a built-in name).  "type(None)()" produces the
same singleton.

It is written as "None".
zbltin-type-objectsu5  Type Objects
************

Type objects represent the various object types.  An objectâs type is
accessed by the built-in function "type()".  There are no special
operations on types.  The standard module "types" defines names for
all standard built-in types.

Types are written like this: "<class 'int'>".
zbooleansaÁ  Boolean operations
******************

   or_test  ::= and_test | or_test "or" and_test
   and_test ::= not_test | and_test "and" not_test
   not_test ::= comparison | "not" not_test

In the context of Boolean operations, and also when expressions are
used by control flow statements, the following values are interpreted
as false: "False", "None", numeric zero of all types, and empty
strings and containers (including strings, tuples, lists,
dictionaries, sets and frozensets).  All other values are interpreted
as true.  User-defined objects can customize their truth value by
providing a "__bool__()" method.

The operator "not" yields "True" if its argument is false, "False"
otherwise.

The expression "x and y" first evaluates *x*; if *x* is false, its
value is returned; otherwise, *y* is evaluated and the resulting value
is returned.

The expression "x or y" first evaluates *x*; if *x* is true, its value
is returned; otherwise, *y* is evaluated and the resulting value is
returned.

Note that neither "and" nor "or" restrict the value and type they
return to "False" and "True", but rather return the last evaluated
argument.  This is sometimes useful, e.g., if "s" is a string that
should be replaced by a default value if it is empty, the expression
"s or 'foo'" yields the desired value.  Because "not" has to create a
new value, it returns a boolean value regardless of the type of its
argument (for example, "not 'foo'" produces "False" rather than "''".)
zbreaka$  The "break" statement
*********************

   break_stmt ::= "break"

"break" may only occur syntactically nested in a "for" or "while"
loop, but not nested in a function or class definition within that
loop.

It terminates the nearest enclosing loop, skipping the optional "else"
clause if the loop has one.

If a "for" loop is terminated by "break", the loop control target
keeps its current value.

When "break" passes control out of a "try" statement with a "finally"
clause, that "finally" clause is executed before really leaving the
loop.
zcallable-typesuü   Emulating callable objects
**************************

object.__call__(self[, args...])

   Called when the instance is âcalledâ as a function; if this method
   is defined, "x(arg1, arg2, ...)" is a shorthand for
   "x.__call__(arg1, arg2, ...)".
zcallsuC  Calls
*****

A call calls a callable object (e.g., a *function*) with a possibly
empty series of *arguments*:

   call                 ::= primary "(" [argument_list [","] | comprehension] ")"
   argument_list        ::= positional_arguments ["," starred_and_keywords]
                       ["," keywords_arguments]
                     | starred_and_keywords ["," keywords_arguments]
                     | keywords_arguments
   positional_arguments ::= ["*"] expression ("," ["*"] expression)*
   starred_and_keywords ::= ("*" expression | keyword_item)
                            ("," "*" expression | "," keyword_item)*
   keywords_arguments   ::= (keyword_item | "**" expression)
                          ("," keyword_item | "," "**" expression)*
   keyword_item         ::= identifier "=" expression

An optional trailing comma may be present after the positional and
keyword arguments but does not affect the semantics.

The primary must evaluate to a callable object (user-defined
functions, built-in functions, methods of built-in objects, class
objects, methods of class instances, and all objects having a
"__call__()" method are callable).  All argument expressions are
evaluated before the call is attempted.  Please refer to section
Function definitions for the syntax of formal *parameter* lists.

If keyword arguments are present, they are first converted to
positional arguments, as follows.  First, a list of unfilled slots is
created for the formal parameters.  If there are N positional
arguments, they are placed in the first N slots.  Next, for each
keyword argument, the identifier is used to determine the
corresponding slot (if the identifier is the same as the first formal
parameter name, the first slot is used, and so on).  If the slot is
already filled, a "TypeError" exception is raised. Otherwise, the
value of the argument is placed in the slot, filling it (even if the
expression is "None", it fills the slot).  When all arguments have
been processed, the slots that are still unfilled are filled with the
corresponding default value from the function definition.  (Default
values are calculated, once, when the function is defined; thus, a
mutable object such as a list or dictionary used as default value will
be shared by all calls that donât specify an argument value for the
corresponding slot; this should usually be avoided.)  If there are any
unfilled slots for which no default value is specified, a "TypeError"
exception is raised.  Otherwise, the list of filled slots is used as
the argument list for the call.

**CPython implementation detail:** An implementation may provide
built-in functions whose positional parameters do not have names, even
if they are ânamedâ for the purpose of documentation, and which
therefore cannot be supplied by keyword.  In CPython, this is the case
for functions implemented in C that use "PyArg_ParseTuple()" to parse
their arguments.

If there are more positional arguments than there are formal parameter
slots, a "TypeError" exception is raised, unless a formal parameter
using the syntax "*identifier" is present; in this case, that formal
parameter receives a tuple containing the excess positional arguments
(or an empty tuple if there were no excess positional arguments).

If any keyword argument does not correspond to a formal parameter
name, a "TypeError" exception is raised, unless a formal parameter
using the syntax "**identifier" is present; in this case, that formal
parameter receives a dictionary containing the excess keyword
arguments (using the keywords as keys and the argument values as
corresponding values), or a (new) empty dictionary if there were no
excess keyword arguments.

If the syntax "*expression" appears in the function call, "expression"
must evaluate to an *iterable*.  Elements from these iterables are
treated as if they were additional positional arguments.  For the call
"f(x1, x2, *y, x3, x4)", if *y* evaluates to a sequence *y1*, â¦, *yM*,
this is equivalent to a call with M+4 positional arguments *x1*, *x2*,
*y1*, â¦, *yM*, *x3*, *x4*.

A consequence of this is that although the "*expression" syntax may
appear *after* explicit keyword arguments, it is processed *before*
the keyword arguments (and any "**expression" arguments â see below).
So:

   >>> def f(a, b):
   ...     print(a, b)
   ...
   >>> f(b=1, *(2,))
   2 1
   >>> f(a=1, *(2,))
   Traceback (most recent call last):
     File "<stdin>", line 1, in <module>
   TypeError: f() got multiple values for keyword argument 'a'
   >>> f(1, *(2,))
   1 2

It is unusual for both keyword arguments and the "*expression" syntax
to be used in the same call, so in practice this confusion does not
arise.

If the syntax "**expression" appears in the function call,
"expression" must evaluate to a *mapping*, the contents of which are
treated as additional keyword arguments.  If a keyword is already
present (as an explicit keyword argument, or from another unpacking),
a "TypeError" exception is raised.

Formal parameters using the syntax "*identifier" or "**identifier"
cannot be used as positional argument slots or as keyword argument
names.

Changed in version 3.5: Function calls accept any number of "*" and
"**" unpackings, positional arguments may follow iterable unpackings
("*"), and keyword arguments may follow dictionary unpackings ("**").
Originally proposed by **PEP 448**.

A call always returns some value, possibly "None", unless it raises an
exception.  How this value is computed depends on the type of the
callable object.

If it isâ

a user-defined function:
   The code block for the function is executed, passing it the
   argument list.  The first thing the code block will do is bind the
   formal parameters to the arguments; this is described in section
   Function definitions.  When the code block executes a "return"
   statement, this specifies the return value of the function call.

a built-in function or method:
   The result is up to the interpreter; see Built-in Functions for the
   descriptions of built-in functions and methods.

a class object:
   A new instance of that class is returned.

a class instance method:
   The corresponding user-defined function is called, with an argument
   list that is one longer than the argument list of the call: the
   instance becomes the first argument.

a class instance:
   The class must define a "__call__()" method; the effect is then the
   same as if that method was called.
zclassu  Class definitions
*****************

A class definition defines a class object (see section The standard
type hierarchy):

   classdef    ::= [decorators] "class" classname [inheritance] ":" suite
   inheritance ::= "(" [argument_list] ")"
   classname   ::= identifier

A class definition is an executable statement.  The inheritance list
usually gives a list of base classes (see Metaclasses for more
advanced uses), so each item in the list should evaluate to a class
object which allows subclassing.  Classes without an inheritance list
inherit, by default, from the base class "object"; hence,

   class Foo:
       pass

is equivalent to

   class Foo(object):
       pass

The classâs suite is then executed in a new execution frame (see
Naming and binding), using a newly created local namespace and the
original global namespace. (Usually, the suite contains mostly
function definitions.)  When the classâs suite finishes execution, its
execution frame is discarded but its local namespace is saved. [3] A
class object is then created using the inheritance list for the base
classes and the saved local namespace for the attribute dictionary.
The class name is bound to this class object in the original local
namespace.

The order in which attributes are defined in the class body is
preserved in the new classâs "__dict__".  Note that this is reliable
only right after the class is created and only for classes that were
defined using the definition syntax.

Class creation can be customized heavily using metaclasses.

Classes can also be decorated: just like when decorating functions,

   @f1(arg)
   @f2
   class Foo: pass

is roughly equivalent to

   class Foo: pass
   Foo = f1(arg)(f2(Foo))

The evaluation rules for the decorator expressions are the same as for
function decorators.  The result is then bound to the class name.

**Programmerâs note:** Variables defined in the class definition are
class attributes; they are shared by instances.  Instance attributes
can be set in a method with "self.name = value".  Both class and
instance attributes are accessible through the notation â"self.name"â,
and an instance attribute hides a class attribute with the same name
when accessed in this way.  Class attributes can be used as defaults
for instance attributes, but using mutable values there can lead to
unexpected results.  Descriptors can be used to create instance
variables with different implementation details.

See also:

  **PEP 3115** - Metaclasses in Python 3000
     The proposal that changed the declaration of metaclasses to the
     current syntax, and the semantics for how classes with
     metaclasses are constructed.

  **PEP 3129** - Class Decorators
     The proposal that added class decorators.  Function and method
     decorators were introduced in **PEP 318**.
zcomparisonsuR)  Comparisons
***********

Unlike C, all comparison operations in Python have the same priority,
which is lower than that of any arithmetic, shifting or bitwise
operation.  Also unlike C, expressions like "a < b < c" have the
interpretation that is conventional in mathematics:

   comparison    ::= or_expr (comp_operator or_expr)*
   comp_operator ::= "<" | ">" | "==" | ">=" | "<=" | "!="
                     | "is" ["not"] | ["not"] "in"

Comparisons yield boolean values: "True" or "False".

Comparisons can be chained arbitrarily, e.g., "x < y <= z" is
equivalent to "x < y and y <= z", except that "y" is evaluated only
once (but in both cases "z" is not evaluated at all when "x < y" is
found to be false).

Formally, if *a*, *b*, *c*, â¦, *y*, *z* are expressions and *op1*,
*op2*, â¦, *opN* are comparison operators, then "a op1 b op2 c ... y
opN z" is equivalent to "a op1 b and b op2 c and ... y opN z", except
that each expression is evaluated at most once.

Note that "a op1 b op2 c" doesnât imply any kind of comparison between
*a* and *c*, so that, e.g., "x < y > z" is perfectly legal (though
perhaps not pretty).


Value comparisons
=================

The operators "<", ">", "==", ">=", "<=", and "!=" compare the values
of two objects.  The objects do not need to have the same type.

Chapter Objects, values and types states that objects have a value (in
addition to type and identity).  The value of an object is a rather
abstract notion in Python: For example, there is no canonical access
method for an objectâs value.  Also, there is no requirement that the
value of an object should be constructed in a particular way, e.g.
comprised of all its data attributes. Comparison operators implement a
particular notion of what the value of an object is.  One can think of
them as defining the value of an object indirectly, by means of their
comparison implementation.

Because all types are (direct or indirect) subtypes of "object", they
inherit the default comparison behavior from "object".  Types can
customize their comparison behavior by implementing *rich comparison
methods* like "__lt__()", described in Basic customization.

The default behavior for equality comparison ("==" and "!=") is based
on the identity of the objects.  Hence, equality comparison of
instances with the same identity results in equality, and equality
comparison of instances with different identities results in
inequality.  A motivation for this default behavior is the desire that
all objects should be reflexive (i.e. "x is y" implies "x == y").

A default order comparison ("<", ">", "<=", and ">=") is not provided;
an attempt raises "TypeError".  A motivation for this default behavior
is the lack of a similar invariant as for equality.

The behavior of the default equality comparison, that instances with
different identities are always unequal, may be in contrast to what
types will need that have a sensible definition of object value and
value-based equality.  Such types will need to customize their
comparison behavior, and in fact, a number of built-in types have done
that.

The following list describes the comparison behavior of the most
important built-in types.

* Numbers of built-in numeric types (Numeric Types â int, float,
  complex) and of the standard library types "fractions.Fraction" and
  "decimal.Decimal" can be compared within and across their types,
  with the restriction that complex numbers do not support order
  comparison.  Within the limits of the types involved, they compare
  mathematically (algorithmically) correct without loss of precision.

  The not-a-number values "float('NaN')" and "decimal.Decimal('NaN')"
  are special.  Any ordered comparison of a number to a not-a-number
  value is false. A counter-intuitive implication is that not-a-number
  values are not equal to themselves.  For example, if "x =
  float('NaN')", "3 < x", "x < 3", "x == x", "x != x" are all false.
  This behavior is compliant with IEEE 754.

* Binary sequences (instances of "bytes" or "bytearray") can be
  compared within and across their types.  They compare
  lexicographically using the numeric values of their elements.

* Strings (instances of "str") compare lexicographically using the
  numerical Unicode code points (the result of the built-in function
  "ord()") of their characters. [3]

  Strings and binary sequences cannot be directly compared.

* Sequences (instances of "tuple", "list", or "range") can be
  compared only within each of their types, with the restriction that
  ranges do not support order comparison.  Equality comparison across
  these types results in inequality, and ordering comparison across
  these types raises "TypeError".

  Sequences compare lexicographically using comparison of
  corresponding elements, whereby reflexivity of the elements is
  enforced.

  In enforcing reflexivity of elements, the comparison of collections
  assumes that for a collection element "x", "x == x" is always true.
  Based on that assumption, element identity is compared first, and
  element comparison is performed only for distinct elements.  This
  approach yields the same result as a strict element comparison
  would, if the compared elements are reflexive.  For non-reflexive
  elements, the result is different than for strict element
  comparison, and may be surprising:  The non-reflexive not-a-number
  values for example result in the following comparison behavior when
  used in a list:

     >>> nan = float('NaN')
     >>> nan is nan
     True
     >>> nan == nan
     False                 <-- the defined non-reflexive behavior of NaN
     >>> [nan] == [nan]
     True                  <-- list enforces reflexivity and tests identity first

  Lexicographical comparison between built-in collections works as
  follows:

  * For two collections to compare equal, they must be of the same
    type, have the same length, and each pair of corresponding
    elements must compare equal (for example, "[1,2] == (1,2)" is
    false because the type is not the same).

  * Collections that support order comparison are ordered the same
    as their first unequal elements (for example, "[1,2,x] <= [1,2,y]"
    has the same value as "x <= y").  If a corresponding element does
    not exist, the shorter collection is ordered first (for example,
    "[1,2] < [1,2,3]" is true).

* Mappings (instances of "dict") compare equal if and only if they
  have equal *(key, value)* pairs. Equality comparison of the keys and
  values enforces reflexivity.

  Order comparisons ("<", ">", "<=", and ">=") raise "TypeError".

* Sets (instances of "set" or "frozenset") can be compared within
  and across their types.

  They define order comparison operators to mean subset and superset
  tests.  Those relations do not define total orderings (for example,
  the two sets "{1,2}" and "{2,3}" are not equal, nor subsets of one
  another, nor supersets of one another).  Accordingly, sets are not
  appropriate arguments for functions which depend on total ordering
  (for example, "min()", "max()", and "sorted()" produce undefined
  results given a list of sets as inputs).

  Comparison of sets enforces reflexivity of its elements.

* Most other built-in types have no comparison methods implemented,
  so they inherit the default comparison behavior.

User-defined classes that customize their comparison behavior should
follow some consistency rules, if possible:

* Equality comparison should be reflexive. In other words, identical
  objects should compare equal:

     "x is y" implies "x == y"

* Comparison should be symmetric. In other words, the following
  expressions should have the same result:

     "x == y" and "y == x"

     "x != y" and "y != x"

     "x < y" and "y > x"

     "x <= y" and "y >= x"

* Comparison should be transitive. The following (non-exhaustive)
  examples illustrate that:

     "x > y and y > z" implies "x > z"

     "x < y and y <= z" implies "x < z"

* Inverse comparison should result in the boolean negation. In other
  words, the following expressions should have the same result:

     "x == y" and "not x != y"

     "x < y" and "not x >= y" (for total ordering)

     "x > y" and "not x <= y" (for total ordering)

  The last two expressions apply to totally ordered collections (e.g.
  to sequences, but not to sets or mappings). See also the
  "total_ordering()" decorator.

* The "hash()" result should be consistent with equality. Objects
  that are equal should either have the same hash value, or be marked
  as unhashable.

Python does not enforce these consistency rules. In fact, the
not-a-number values are an example for not following these rules.


Membership test operations
==========================

The operators "in" and "not in" test for membership.  "x in s"
evaluates to "True" if *x* is a member of *s*, and "False" otherwise.
"x not in s" returns the negation of "x in s".  All built-in sequences
and set types support this as well as dictionary, for which "in" tests
whether the dictionary has a given key. For container types such as
list, tuple, set, frozenset, dict, or collections.deque, the
expression "x in y" is equivalent to "any(x is e or x == e for e in
y)".

For the string and bytes types, "x in y" is "True" if and only if *x*
is a substring of *y*.  An equivalent test is "y.find(x) != -1".
Empty strings are always considered to be a substring of any other
string, so """ in "abc"" will return "True".

For user-defined classes which define the "__contains__()" method, "x
in y" returns "True" if "y.__contains__(x)" returns a true value, and
"False" otherwise.

For user-defined classes which do not define "__contains__()" but do
define "__iter__()", "x in y" is "True" if some value "z" with "x ==
z" is produced while iterating over "y".  If an exception is raised
during the iteration, it is as if "in" raised that exception.

Lastly, the old-style iteration protocol is tried: if a class defines
"__getitem__()", "x in y" is "True" if and only if there is a non-
negative integer index *i* such that "x == y[i]", and all lower
integer indices do not raise "IndexError" exception.  (If any other
exception is raised, it is as if "in" raised that exception).

The operator "not in" is defined to have the inverse true value of
"in".


Identity comparisons
====================

The operators "is" and "is not" test for object identity: "x is y" is
true if and only if *x* and *y* are the same object.  Object identity
is determined using the "id()" function.  "x is not y" yields the
inverse truth value. [4]
zcompounduh  Compound statements
*******************

Compound statements contain (groups of) other statements; they affect
or control the execution of those other statements in some way.  In
general, compound statements span multiple lines, although in simple
incarnations a whole compound statement may be contained in one line.

The "if", "while" and "for" statements implement traditional control
flow constructs.  "try" specifies exception handlers and/or cleanup
code for a group of statements, while the "with" statement allows the
execution of initialization and finalization code around a block of
code.  Function and class definitions are also syntactically compound
statements.

A compound statement consists of one or more âclauses.â  A clause
consists of a header and a âsuite.â  The clause headers of a
particular compound statement are all at the same indentation level.
Each clause header begins with a uniquely identifying keyword and ends
with a colon.  A suite is a group of statements controlled by a
clause.  A suite can be one or more semicolon-separated simple
statements on the same line as the header, following the headerâs
colon, or it can be one or more indented statements on subsequent
lines.  Only the latter form of a suite can contain nested compound
statements; the following is illegal, mostly because it wouldnât be
clear to which "if" clause a following "else" clause would belong:

   if test1: if test2: print(x)

Also note that the semicolon binds tighter than the colon in this
context, so that in the following example, either all or none of the
"print()" calls are executed:

   if x < y < z: print(x); print(y); print(z)

Summarizing:

   compound_stmt ::= if_stmt
                     | while_stmt
                     | for_stmt
                     | try_stmt
                     | with_stmt
                     | funcdef
                     | classdef
                     | async_with_stmt
                     | async_for_stmt
                     | async_funcdef
   suite         ::= stmt_list NEWLINE | NEWLINE INDENT statement+ DEDENT
   statement     ::= stmt_list NEWLINE | compound_stmt
   stmt_list     ::= simple_stmt (";" simple_stmt)* [";"]

Note that statements always end in a "NEWLINE" possibly followed by a
"DEDENT".  Also note that optional continuation clauses always begin
with a keyword that cannot start a statement, thus there are no
ambiguities (the âdangling "else"â problem is solved in Python by
requiring nested "if" statements to be indented).

The formatting of the grammar rules in the following sections places
each clause on a separate line for clarity.


The "if" statement
==================

The "if" statement is used for conditional execution:

   if_stmt ::= "if" expression ":" suite
               ("elif" expression ":" suite)*
               ["else" ":" suite]

It selects exactly one of the suites by evaluating the expressions one
by one until one is found to be true (see section Boolean operations
for the definition of true and false); then that suite is executed
(and no other part of the "if" statement is executed or evaluated).
If all expressions are false, the suite of the "else" clause, if
present, is executed.


The "while" statement
=====================

The "while" statement is used for repeated execution as long as an
expression is true:

   while_stmt ::= "while" expression ":" suite
                  ["else" ":" suite]

This repeatedly tests the expression and, if it is true, executes the
first suite; if the expression is false (which may be the first time
it is tested) the suite of the "else" clause, if present, is executed
and the loop terminates.

A "break" statement executed in the first suite terminates the loop
without executing the "else" clauseâs suite.  A "continue" statement
executed in the first suite skips the rest of the suite and goes back
to testing the expression.


The "for" statement
===================

The "for" statement is used to iterate over the elements of a sequence
(such as a string, tuple or list) or other iterable object:

   for_stmt ::= "for" target_list "in" expression_list ":" suite
                ["else" ":" suite]

The expression list is evaluated once; it should yield an iterable
object.  An iterator is created for the result of the
"expression_list".  The suite is then executed once for each item
provided by the iterator, in the order returned by the iterator.  Each
item in turn is assigned to the target list using the standard rules
for assignments (see Assignment statements), and then the suite is
executed.  When the items are exhausted (which is immediately when the
sequence is empty or an iterator raises a "StopIteration" exception),
the suite in the "else" clause, if present, is executed, and the loop
terminates.

A "break" statement executed in the first suite terminates the loop
without executing the "else" clauseâs suite.  A "continue" statement
executed in the first suite skips the rest of the suite and continues
with the next item, or with the "else" clause if there is no next
item.

The for-loop makes assignments to the variables(s) in the target list.
This overwrites all previous assignments to those variables including
those made in the suite of the for-loop:

   for i in range(10):
       print(i)
       i = 5             # this will not affect the for-loop
                         # because i will be overwritten with the next
                         # index in the range

Names in the target list are not deleted when the loop is finished,
but if the sequence is empty, they will not have been assigned to at
all by the loop.  Hint: the built-in function "range()" returns an
iterator of integers suitable to emulate the effect of Pascalâs "for i
:= a to b do"; e.g., "list(range(3))" returns the list "[0, 1, 2]".

Note: There is a subtlety when the sequence is being modified by the
  loop (this can only occur for mutable sequences, e.g. lists).  An
  internal counter is used to keep track of which item is used next,
  and this is incremented on each iteration.  When this counter has
  reached the length of the sequence the loop terminates.  This means
  that if the suite deletes the current (or a previous) item from the
  sequence, the next item will be skipped (since it gets the index of
  the current item which has already been treated).  Likewise, if the
  suite inserts an item in the sequence before the current item, the
  current item will be treated again the next time through the loop.
  This can lead to nasty bugs that can be avoided by making a
  temporary copy using a slice of the whole sequence, e.g.,

     for x in a[:]:
         if x < 0: a.remove(x)


The "try" statement
===================

The "try" statement specifies exception handlers and/or cleanup code
for a group of statements:

   try_stmt  ::= try1_stmt | try2_stmt
   try1_stmt ::= "try" ":" suite
                 ("except" [expression ["as" identifier]] ":" suite)+
                 ["else" ":" suite]
                 ["finally" ":" suite]
   try2_stmt ::= "try" ":" suite
                 "finally" ":" suite

The "except" clause(s) specify one or more exception handlers. When no
exception occurs in the "try" clause, no exception handler is
executed. When an exception occurs in the "try" suite, a search for an
exception handler is started.  This search inspects the except clauses
in turn until one is found that matches the exception.  An expression-
less except clause, if present, must be last; it matches any
exception.  For an except clause with an expression, that expression
is evaluated, and the clause matches the exception if the resulting
object is âcompatibleâ with the exception.  An object is compatible
with an exception if it is the class or a base class of the exception
object or a tuple containing an item compatible with the exception.

If no except clause matches the exception, the search for an exception
handler continues in the surrounding code and on the invocation stack.
[1]

If the evaluation of an expression in the header of an except clause
raises an exception, the original search for a handler is canceled and
a search starts for the new exception in the surrounding code and on
the call stack (it is treated as if the entire "try" statement raised
the exception).

When a matching except clause is found, the exception is assigned to
the target specified after the "as" keyword in that except clause, if
present, and the except clauseâs suite is executed.  All except
clauses must have an executable block.  When the end of this block is
reached, execution continues normally after the entire try statement.
(This means that if two nested handlers exist for the same exception,
and the exception occurs in the try clause of the inner handler, the
outer handler will not handle the exception.)

When an exception has been assigned using "as target", it is cleared
at the end of the except clause.  This is as if

   except E as N:
       foo

was translated to

   except E as N:
       try:
           foo
       finally:
           del N

This means the exception must be assigned to a different name to be
able to refer to it after the except clause.  Exceptions are cleared
because with the traceback attached to them, they form a reference
cycle with the stack frame, keeping all locals in that frame alive
until the next garbage collection occurs.

Before an except clauseâs suite is executed, details about the
exception are stored in the "sys" module and can be accessed via
"sys.exc_info()". "sys.exc_info()" returns a 3-tuple consisting of the
exception class, the exception instance and a traceback object (see
section The standard type hierarchy) identifying the point in the
program where the exception occurred.  "sys.exc_info()" values are
restored to their previous values (before the call) when returning
from a function that handled an exception.

The optional "else" clause is executed if the control flow leaves the
"try" suite, no exception was raised, and no "return", "continue", or
"break" statement was executed.  Exceptions in the "else" clause are
not handled by the preceding "except" clauses.

If "finally" is present, it specifies a âcleanupâ handler.  The "try"
clause is executed, including any "except" and "else" clauses.  If an
exception occurs in any of the clauses and is not handled, the
exception is temporarily saved. The "finally" clause is executed.  If
there is a saved exception it is re-raised at the end of the "finally"
clause.  If the "finally" clause raises another exception, the saved
exception is set as the context of the new exception. If the "finally"
clause executes a "return" or "break" statement, the saved exception
is discarded:

   >>> def f():
   ...     try:
   ...         1/0
   ...     finally:
   ...         return 42
   ...
   >>> f()
   42

The exception information is not available to the program during
execution of the "finally" clause.

When a "return", "break" or "continue" statement is executed in the
"try" suite of a "try"â¦"finally" statement, the "finally" clause is
also executed âon the way out.â A "continue" statement is illegal in
the "finally" clause. (The reason is a problem with the current
implementation â this restriction may be lifted in the future).

The return value of a function is determined by the last "return"
statement executed.  Since the "finally" clause always executes, a
"return" statement executed in the "finally" clause will always be the
last one executed:

   >>> def foo():
   ...     try:
   ...         return 'try'
   ...     finally:
   ...         return 'finally'
   ...
   >>> foo()
   'finally'

Additional information on exceptions can be found in section
Exceptions, and information on using the "raise" statement to generate
exceptions may be found in section The raise statement.


The "with" statement
====================

The "with" statement is used to wrap the execution of a block with
methods defined by a context manager (see section With Statement
Context Managers). This allows common "try"â¦"except"â¦"finally" usage
patterns to be encapsulated for convenient reuse.

   with_stmt ::= "with" with_item ("," with_item)* ":" suite
   with_item ::= expression ["as" target]

The execution of the "with" statement with one âitemâ proceeds as
follows:

1. The context expression (the expression given in the "with_item")
   is evaluated to obtain a context manager.

2. The context managerâs "__exit__()" is loaded for later use.

3. The context managerâs "__enter__()" method is invoked.

4. If a target was included in the "with" statement, the return
   value from "__enter__()" is assigned to it.

   Note: The "with" statement guarantees that if the "__enter__()"
     method returns without an error, then "__exit__()" will always be
     called. Thus, if an error occurs during the assignment to the
     target list, it will be treated the same as an error occurring
     within the suite would be. See step 6 below.

5. The suite is executed.

6. The context managerâs "__exit__()" method is invoked.  If an
   exception caused the suite to be exited, its type, value, and
   traceback are passed as arguments to "__exit__()". Otherwise, three
   "None" arguments are supplied.

   If the suite was exited due to an exception, and the return value
   from the "__exit__()" method was false, the exception is reraised.
   If the return value was true, the exception is suppressed, and
   execution continues with the statement following the "with"
   statement.

   If the suite was exited for any reason other than an exception, the
   return value from "__exit__()" is ignored, and execution proceeds
   at the normal location for the kind of exit that was taken.

With more than one item, the context managers are processed as if
multiple "with" statements were nested:

   with A() as a, B() as b:
       suite

is equivalent to

   with A() as a:
       with B() as b:
           suite

Changed in version 3.1: Support for multiple context expressions.

See also:

  **PEP 343** - The âwithâ statement
     The specification, background, and examples for the Python "with"
     statement.


Function definitions
====================

A function definition defines a user-defined function object (see
section The standard type hierarchy):

   funcdef                 ::= [decorators] "def" funcname "(" [parameter_list] ")"
               ["->" expression] ":" suite
   decorators              ::= decorator+
   decorator               ::= "@" dotted_name ["(" [argument_list [","]] ")"] NEWLINE
   dotted_name             ::= identifier ("." identifier)*
   parameter_list          ::= defparameter ("," defparameter)* ["," [parameter_list_starargs]]
                      | parameter_list_starargs
   parameter_list_starargs ::= "*" [parameter] ("," defparameter)* ["," ["**" parameter [","]]]
                               | "**" parameter [","]
   parameter               ::= identifier [":" expression]
   defparameter            ::= parameter ["=" expression]
   funcname                ::= identifier

A function definition is an executable statement.  Its execution binds
the function name in the current local namespace to a function object
(a wrapper around the executable code for the function).  This
function object contains a reference to the current global namespace
as the global namespace to be used when the function is called.

The function definition does not execute the function body; this gets
executed only when the function is called. [2]

A function definition may be wrapped by one or more *decorator*
expressions. Decorator expressions are evaluated when the function is
defined, in the scope that contains the function definition.  The
result must be a callable, which is invoked with the function object
as the only argument. The returned value is bound to the function name
instead of the function object.  Multiple decorators are applied in
nested fashion. For example, the following code

   @f1(arg)
   @f2
   def func(): pass

is roughly equivalent to

   def func(): pass
   func = f1(arg)(f2(func))

except that the original function is not temporarily bound to the name
"func".

When one or more *parameters* have the form *parameter* "="
*expression*, the function is said to have âdefault parameter values.â
For a parameter with a default value, the corresponding *argument* may
be omitted from a call, in which case the parameterâs default value is
substituted.  If a parameter has a default value, all following
parameters up until the â"*"â must also have a default value â this is
a syntactic restriction that is not expressed by the grammar.

**Default parameter values are evaluated from left to right when the
function definition is executed.** This means that the expression is
evaluated once, when the function is defined, and that the same âpre-
computedâ value is used for each call.  This is especially important
to understand when a default parameter is a mutable object, such as a
list or a dictionary: if the function modifies the object (e.g. by
appending an item to a list), the default value is in effect modified.
This is generally not what was intended.  A way around this is to use
"None" as the default, and explicitly test for it in the body of the
function, e.g.:

   def whats_on_the_telly(penguin=None):
       if penguin is None:
           penguin = []
       penguin.append("property of the zoo")
       return penguin

Function call semantics are described in more detail in section Calls.
A function call always assigns values to all parameters mentioned in
the parameter list, either from position arguments, from keyword
arguments, or from default values.  If the form â"*identifier"â is
present, it is initialized to a tuple receiving any excess positional
parameters, defaulting to the empty tuple. If the form
â"**identifier"â is present, it is initialized to a new ordered
mapping receiving any excess keyword arguments, defaulting to a new
empty mapping of the same type.  Parameters after â"*"â or
â"*identifier"â are keyword-only parameters and may only be passed
used keyword arguments.

Parameters may have an *annotation* of the form â": expression"â
following the parameter name.  Any parameter may have an annotation,
even those of the form "*identifier" or "**identifier".  Functions may
have âreturnâ annotation of the form â"-> expression"â after the
parameter list.  These annotations can be any valid Python expression.
The presence of annotations does not change the semantics of a
function.  The annotation values are available as values of a
dictionary keyed by the parametersâ names in the "__annotations__"
attribute of the function object.  If the "annotations" import from
"__future__" is used, annotations are preserved as strings at runtime
which enables postponed evaluation.  Otherwise, they are evaluated
when the function definition is executed.  In this case annotations
may be evaluated in a different order than they appear in the source
code.

It is also possible to create anonymous functions (functions not bound
to a name), for immediate use in expressions.  This uses lambda
expressions, described in section Lambdas.  Note that the lambda
expression is merely a shorthand for a simplified function definition;
a function defined in a â"def"â statement can be passed around or
assigned to another name just like a function defined by a lambda
expression.  The â"def"â form is actually more powerful since it
allows the execution of multiple statements and annotations.

**Programmerâs note:** Functions are first-class objects.  A â"def"â
statement executed inside a function definition defines a local
function that can be returned or passed around.  Free variables used
in the nested function can access the local variables of the function
containing the def.  See section Naming and binding for details.

See also:

  **PEP 3107** - Function Annotations
     The original specification for function annotations.

  **PEP 484** - Type Hints
     Definition of a standard meaning for annotations: type hints.

  **PEP 526** - Syntax for Variable Annotations
     Ability to type hint variable declarations, including class
     variables and instance variables

  **PEP 563** - Postponed Evaluation of Annotations
     Support for forward references within annotations by preserving
     annotations in a string form at runtime instead of eager
     evaluation.


Class definitions
=================

A class definition defines a class object (see section The standard
type hierarchy):

   classdef    ::= [decorators] "class" classname [inheritance] ":" suite
   inheritance ::= "(" [argument_list] ")"
   classname   ::= identifier

A class definition is an executable statement.  The inheritance list
usually gives a list of base classes (see Metaclasses for more
advanced uses), so each item in the list should evaluate to a class
object which allows subclassing.  Classes without an inheritance list
inherit, by default, from the base class "object"; hence,

   class Foo:
       pass

is equivalent to

   class Foo(object):
       pass

The classâs suite is then executed in a new execution frame (see
Naming and binding), using a newly created local namespace and the
original global namespace. (Usually, the suite contains mostly
function definitions.)  When the classâs suite finishes execution, its
execution frame is discarded but its local namespace is saved. [3] A
class object is then created using the inheritance list for the base
classes and the saved local namespace for the attribute dictionary.
The class name is bound to this class object in the original local
namespace.

The order in which attributes are defined in the class body is
preserved in the new classâs "__dict__".  Note that this is reliable
only right after the class is created and only for classes that were
defined using the definition syntax.

Class creation can be customized heavily using metaclasses.

Classes can also be decorated: just like when decorating functions,

   @f1(arg)
   @f2
   class Foo: pass

is roughly equivalent to

   class Foo: pass
   Foo = f1(arg)(f2(Foo))

The evaluation rules for the decorator expressions are the same as for
function decorators.  The result is then bound to the class name.

**Programmerâs note:** Variables defined in the class definition are
class attributes; they are shared by instances.  Instance attributes
can be set in a method with "self.name = value".  Both class and
instance attributes are accessible through the notation â"self.name"â,
and an instance attribute hides a class attribute with the same name
when accessed in this way.  Class attributes can be used as defaults
for instance attributes, but using mutable values there can lead to
unexpected results.  Descriptors can be used to create instance
variables with different implementation details.

See also:

  **PEP 3115** - Metaclasses in Python 3000
     The proposal that changed the declaration of metaclasses to the
     current syntax, and the semantics for how classes with
     metaclasses are constructed.

  **PEP 3129** - Class Decorators
     The proposal that added class decorators.  Function and method
     decorators were introduced in **PEP 318**.


Coroutines
==========

New in version 3.5.


Coroutine function definition
-----------------------------

   async_funcdef ::= [decorators] "async" "def" funcname "(" [parameter_list] ")"
                     ["->" expression] ":" suite

Execution of Python coroutines can be suspended and resumed at many
points (see *coroutine*).  Inside the body of a coroutine function,
"await" and "async" identifiers become reserved keywords; "await"
expressions, "async for" and "async with" can only be used in
coroutine function bodies.

Functions defined with "async def" syntax are always coroutine
functions, even if they do not contain "await" or "async" keywords.

It is a "SyntaxError" to use a "yield from" expression inside the body
of a coroutine function.

An example of a coroutine function:

   async def func(param1, param2):
       do_stuff()
       await some_coroutine()


The "async for" statement
-------------------------

   async_for_stmt ::= "async" for_stmt

An *asynchronous iterable* is able to call asynchronous code in its
*iter* implementation, and *asynchronous iterator* can call
asynchronous code in its *next* method.

The "async for" statement allows convenient iteration over
asynchronous iterators.

The following code:

   async for TARGET in ITER:
       BLOCK
   else:
       BLOCK2

Is semantically equivalent to:

   iter = (ITER)
   iter = type(iter).__aiter__(iter)
   running = True
   while running:
       try:
           TARGET = await type(iter).__anext__(iter)
       except StopAsyncIteration:
           running = False
       else:
           BLOCK
   else:
       BLOCK2

See also "__aiter__()" and "__anext__()" for details.

It is a "SyntaxError" to use an "async for" statement outside the body
of a coroutine function.


The "async with" statement
--------------------------

   async_with_stmt ::= "async" with_stmt

An *asynchronous context manager* is a *context manager* that is able
to suspend execution in its *enter* and *exit* methods.

The following code:

   async with EXPR as VAR:
       BLOCK

Is semantically equivalent to:

   mgr = (EXPR)
   aexit = type(mgr).__aexit__
   aenter = type(mgr).__aenter__(mgr)

   VAR = await aenter
   try:
       BLOCK
   except:
       if not await aexit(mgr, *sys.exc_info()):
           raise
   else:
       await aexit(mgr, None, None, None)

See also "__aenter__()" and "__aexit__()" for details.

It is a "SyntaxError" to use an "async with" statement outside the
body of a coroutine function.

See also:

  **PEP 492** - Coroutines with async and await syntax
     The proposal that made coroutines a proper standalone concept in
     Python, and added supporting syntax.

-[ Footnotes ]-

[1] The exception is propagated to the invocation stack unless
    there is a "finally" clause which happens to raise another
    exception. That new exception causes the old one to be lost.

[2] A string literal appearing as the first statement in the
    function body is transformed into the functionâs "__doc__"
    attribute and therefore the functionâs *docstring*.

[3] A string literal appearing as the first statement in the class
    body is transformed into the namespaceâs "__doc__" item and
    therefore the classâs *docstring*.
zcontext-managersu¦  With Statement Context Managers
*******************************

A *context manager* is an object that defines the runtime context to
be established when executing a "with" statement. The context manager
handles the entry into, and the exit from, the desired runtime context
for the execution of the block of code.  Context managers are normally
invoked using the "with" statement (described in section The with
statement), but can also be used by directly invoking their methods.

Typical uses of context managers include saving and restoring various
kinds of global state, locking and unlocking resources, closing opened
files, etc.

For more information on context managers, see Context Manager Types.

object.__enter__(self)

   Enter the runtime context related to this object. The "with"
   statement will bind this methodâs return value to the target(s)
   specified in the "as" clause of the statement, if any.

object.__exit__(self, exc_type, exc_value, traceback)

   Exit the runtime context related to this object. The parameters
   describe the exception that caused the context to be exited. If the
   context was exited without an exception, all three arguments will
   be "None".

   If an exception is supplied, and the method wishes to suppress the
   exception (i.e., prevent it from being propagated), it should
   return a true value. Otherwise, the exception will be processed
   normally upon exit from this method.

   Note that "__exit__()" methods should not reraise the passed-in
   exception; this is the callerâs responsibility.

See also:

  **PEP 343** - The âwithâ statement
     The specification, background, and examples for the Python "with"
     statement.
zcontinuea×  The "continue" statement
************************

   continue_stmt ::= "continue"

"continue" may only occur syntactically nested in a "for" or "while"
loop, but not nested in a function or class definition or "finally"
clause within that loop.  It continues with the next cycle of the
nearest enclosing loop.

When "continue" passes control out of a "try" statement with a
"finally" clause, that "finally" clause is executed before really
starting the next loop cycle.
zconversionsu£  Arithmetic conversions
**********************

When a description of an arithmetic operator below uses the phrase
âthe numeric arguments are converted to a common type,â this means
that the operator implementation for built-in types works as follows:

* If either argument is a complex number, the other is converted to
  complex;

* otherwise, if either argument is a floating point number, the
  other is converted to floating point;

* otherwise, both must be integers and no conversion is necessary.

Some additional rules apply for certain operators (e.g., a string as a
left argument to the â%â operator).  Extensions must define their own
conversion behavior.
zcustomizationuH4  Basic customization
*******************

object.__new__(cls[, ...])

   Called to create a new instance of class *cls*.  "__new__()" is a
   static method (special-cased so you need not declare it as such)
   that takes the class of which an instance was requested as its
   first argument.  The remaining arguments are those passed to the
   object constructor expression (the call to the class).  The return
   value of "__new__()" should be the new object instance (usually an
   instance of *cls*).

   Typical implementations create a new instance of the class by
   invoking the superclassâs "__new__()" method using
   "super().__new__(cls[, ...])" with appropriate arguments and then
   modifying the newly-created instance as necessary before returning
   it.

   If "__new__()" returns an instance of *cls*, then the new
   instanceâs "__init__()" method will be invoked like
   "__init__(self[, ...])", where *self* is the new instance and the
   remaining arguments are the same as were passed to "__new__()".

   If "__new__()" does not return an instance of *cls*, then the new
   instanceâs "__init__()" method will not be invoked.

   "__new__()" is intended mainly to allow subclasses of immutable
   types (like int, str, or tuple) to customize instance creation.  It
   is also commonly overridden in custom metaclasses in order to
   customize class creation.

object.__init__(self[, ...])

   Called after the instance has been created (by "__new__()"), but
   before it is returned to the caller.  The arguments are those
   passed to the class constructor expression.  If a base class has an
   "__init__()" method, the derived classâs "__init__()" method, if
   any, must explicitly call it to ensure proper initialization of the
   base class part of the instance; for example:
   "super().__init__([args...])".

   Because "__new__()" and "__init__()" work together in constructing
   objects ("__new__()" to create it, and "__init__()" to customize
   it), no non-"None" value may be returned by "__init__()"; doing so
   will cause a "TypeError" to be raised at runtime.

object.__del__(self)

   Called when the instance is about to be destroyed.  This is also
   called a finalizer or (improperly) a destructor.  If a base class
   has a "__del__()" method, the derived classâs "__del__()" method,
   if any, must explicitly call it to ensure proper deletion of the
   base class part of the instance.

   It is possible (though not recommended!) for the "__del__()" method
   to postpone destruction of the instance by creating a new reference
   to it.  This is called object *resurrection*.  It is
   implementation-dependent whether "__del__()" is called a second
   time when a resurrected object is about to be destroyed; the
   current *CPython* implementation only calls it once.

   It is not guaranteed that "__del__()" methods are called for
   objects that still exist when the interpreter exits.

   Note: "del x" doesnât directly call "x.__del__()" â the former
     decrements the reference count for "x" by one, and the latter is
     only called when "x"âs reference count reaches zero.

   **CPython implementation detail:** It is possible for a reference
   cycle to prevent the reference count of an object from going to
   zero.  In this case, the cycle will be later detected and deleted
   by the *cyclic garbage collector*.  A common cause of reference
   cycles is when an exception has been caught in a local variable.
   The frameâs locals then reference the exception, which references
   its own traceback, which references the locals of all frames caught
   in the traceback.

   See also: Documentation for the "gc" module.

   Warning: Due to the precarious circumstances under which
     "__del__()" methods are invoked, exceptions that occur during
     their execution are ignored, and a warning is printed to
     "sys.stderr" instead. In particular:

     * "__del__()" can be invoked when arbitrary code is being
       executed, including from any arbitrary thread.  If "__del__()"
       needs to take a lock or invoke any other blocking resource, it
       may deadlock as the resource may already be taken by the code
       that gets interrupted to execute "__del__()".

     * "__del__()" can be executed during interpreter shutdown.  As
       a consequence, the global variables it needs to access
       (including other modules) may already have been deleted or set
       to "None". Python guarantees that globals whose name begins
       with a single underscore are deleted from their module before
       other globals are deleted; if no other references to such
       globals exist, this may help in assuring that imported modules
       are still available at the time when the "__del__()" method is
       called.

object.__repr__(self)

   Called by the "repr()" built-in function to compute the âofficialâ
   string representation of an object.  If at all possible, this
   should look like a valid Python expression that could be used to
   recreate an object with the same value (given an appropriate
   environment).  If this is not possible, a string of the form
   "<...some useful description...>" should be returned. The return
   value must be a string object. If a class defines "__repr__()" but
   not "__str__()", then "__repr__()" is also used when an âinformalâ
   string representation of instances of that class is required.

   This is typically used for debugging, so it is important that the
   representation is information-rich and unambiguous.

object.__str__(self)

   Called by "str(object)" and the built-in functions "format()" and
   "print()" to compute the âinformalâ or nicely printable string
   representation of an object.  The return value must be a string
   object.

   This method differs from "object.__repr__()" in that there is no
   expectation that "__str__()" return a valid Python expression: a
   more convenient or concise representation can be used.

   The default implementation defined by the built-in type "object"
   calls "object.__repr__()".

object.__bytes__(self)

   Called by bytes to compute a byte-string representation of an
   object. This should return a "bytes" object.

object.__format__(self, format_spec)

   Called by the "format()" built-in function, and by extension,
   evaluation of formatted string literals and the "str.format()"
   method, to produce a âformattedâ string representation of an
   object. The "format_spec" argument is a string that contains a
   description of the formatting options desired. The interpretation
   of the "format_spec" argument is up to the type implementing
   "__format__()", however most classes will either delegate
   formatting to one of the built-in types, or use a similar
   formatting option syntax.

   See Format Specification Mini-Language for a description of the
   standard formatting syntax.

   The return value must be a string object.

   Changed in version 3.4: The __format__ method of "object" itself
   raises a "TypeError" if passed any non-empty string.

   Changed in version 3.7: "object.__format__(x, '')" is now
   equivalent to "str(x)" rather than "format(str(self), '')".

object.__lt__(self, other)
object.__le__(self, other)
object.__eq__(self, other)
object.__ne__(self, other)
object.__gt__(self, other)
object.__ge__(self, other)

   These are the so-called ârich comparisonâ methods. The
   correspondence between operator symbols and method names is as
   follows: "x<y" calls "x.__lt__(y)", "x<=y" calls "x.__le__(y)",
   "x==y" calls "x.__eq__(y)", "x!=y" calls "x.__ne__(y)", "x>y" calls
   "x.__gt__(y)", and "x>=y" calls "x.__ge__(y)".

   A rich comparison method may return the singleton "NotImplemented"
   if it does not implement the operation for a given pair of
   arguments. By convention, "False" and "True" are returned for a
   successful comparison. However, these methods can return any value,
   so if the comparison operator is used in a Boolean context (e.g.,
   in the condition of an "if" statement), Python will call "bool()"
   on the value to determine if the result is true or false.

   By default, "__ne__()" delegates to "__eq__()" and inverts the
   result unless it is "NotImplemented".  There are no other implied
   relationships among the comparison operators, for example, the
   truth of "(x<y or x==y)" does not imply "x<=y". To automatically
   generate ordering operations from a single root operation, see
   "functools.total_ordering()".

   See the paragraph on "__hash__()" for some important notes on
   creating *hashable* objects which support custom comparison
   operations and are usable as dictionary keys.

   There are no swapped-argument versions of these methods (to be used
   when the left argument does not support the operation but the right
   argument does); rather, "__lt__()" and "__gt__()" are each otherâs
   reflection, "__le__()" and "__ge__()" are each otherâs reflection,
   and "__eq__()" and "__ne__()" are their own reflection. If the
   operands are of different types, and right operandâs type is a
   direct or indirect subclass of the left operandâs type, the
   reflected method of the right operand has priority, otherwise the
   left operandâs method has priority.  Virtual subclassing is not
   considered.

object.__hash__(self)

   Called by built-in function "hash()" and for operations on members
   of hashed collections including "set", "frozenset", and "dict".
   "__hash__()" should return an integer. The only required property
   is that objects which compare equal have the same hash value; it is
   advised to mix together the hash values of the components of the
   object that also play a part in comparison of objects by packing
   them into a tuple and hashing the tuple. Example:

      def __hash__(self):
          return hash((self.name, self.nick, self.color))

   Note: "hash()" truncates the value returned from an objectâs
     custom "__hash__()" method to the size of a "Py_ssize_t".  This
     is typically 8 bytes on 64-bit builds and 4 bytes on 32-bit
     builds. If an objectâs   "__hash__()" must interoperate on builds
     of different bit sizes, be sure to check the width on all
     supported builds.  An easy way to do this is with "python -c
     "import sys; print(sys.hash_info.width)"".

   If a class does not define an "__eq__()" method it should not
   define a "__hash__()" operation either; if it defines "__eq__()"
   but not "__hash__()", its instances will not be usable as items in
   hashable collections.  If a class defines mutable objects and
   implements an "__eq__()" method, it should not implement
   "__hash__()", since the implementation of hashable collections
   requires that a keyâs hash value is immutable (if the objectâs hash
   value changes, it will be in the wrong hash bucket).

   User-defined classes have "__eq__()" and "__hash__()" methods by
   default; with them, all objects compare unequal (except with
   themselves) and "x.__hash__()" returns an appropriate value such
   that "x == y" implies both that "x is y" and "hash(x) == hash(y)".

   A class that overrides "__eq__()" and does not define "__hash__()"
   will have its "__hash__()" implicitly set to "None".  When the
   "__hash__()" method of a class is "None", instances of the class
   will raise an appropriate "TypeError" when a program attempts to
   retrieve their hash value, and will also be correctly identified as
   unhashable when checking "isinstance(obj,
   collections.abc.Hashable)".

   If a class that overrides "__eq__()" needs to retain the
   implementation of "__hash__()" from a parent class, the interpreter
   must be told this explicitly by setting "__hash__ =
   <ParentClass>.__hash__".

   If a class that does not override "__eq__()" wishes to suppress
   hash support, it should include "__hash__ = None" in the class
   definition. A class which defines its own "__hash__()" that
   explicitly raises a "TypeError" would be incorrectly identified as
   hashable by an "isinstance(obj, collections.abc.Hashable)" call.

   Note: By default, the "__hash__()" values of str, bytes and
     datetime objects are âsaltedâ with an unpredictable random value.
     Although they remain constant within an individual Python
     process, they are not predictable between repeated invocations of
     Python.This is intended to provide protection against a denial-
     of-service caused by carefully-chosen inputs that exploit the
     worst case performance of a dict insertion, O(n^2) complexity.
     See http://www.ocert.org/advisories/ocert-2011-003.html for
     details.Changing hash values affects the iteration order of sets.
     Python has never made guarantees about this ordering (and it
     typically varies between 32-bit and 64-bit builds).See also
     "PYTHONHASHSEED".

   Changed in version 3.3: Hash randomization is enabled by default.

object.__bool__(self)

   Called to implement truth value testing and the built-in operation
   "bool()"; should return "False" or "True".  When this method is not
   defined, "__len__()" is called, if it is defined, and the object is
   considered true if its result is nonzero.  If a class defines
   neither "__len__()" nor "__bool__()", all its instances are
   considered true.
zdebuggerunH  "pdb" â The Python Debugger
***************************

**Source code:** Lib/pdb.py

======================================================================

The module "pdb" defines an interactive source code debugger for
Python programs.  It supports setting (conditional) breakpoints and
single stepping at the source line level, inspection of stack frames,
source code listing, and evaluation of arbitrary Python code in the
context of any stack frame.  It also supports post-mortem debugging
and can be called under program control.

The debugger is extensible â it is actually defined as the class
"Pdb". This is currently undocumented but easily understood by reading
the source.  The extension interface uses the modules "bdb" and "cmd".

The debuggerâs prompt is "(Pdb)". Typical usage to run a program under
control of the debugger is:

   >>> import pdb
   >>> import mymodule
   >>> pdb.run('mymodule.test()')
   > <string>(0)?()
   (Pdb) continue
   > <string>(1)?()
   (Pdb) continue
   NameError: 'spam'
   > <string>(1)?()
   (Pdb)

Changed in version 3.3: Tab-completion via the "readline" module is
available for commands and command arguments, e.g. the current global
and local names are offered as arguments of the "p" command.

"pdb.py" can also be invoked as a script to debug other scripts.  For
example:

   python3 -m pdb myscript.py

When invoked as a script, pdb will automatically enter post-mortem
debugging if the program being debugged exits abnormally.  After post-
mortem debugging (or after normal exit of the program), pdb will
restart the program.  Automatic restarting preserves pdbâs state (such
as breakpoints) and in most cases is more useful than quitting the
debugger upon programâs exit.

New in version 3.2: "pdb.py" now accepts a "-c" option that executes
commands as if given in a ".pdbrc" file, see Debugger Commands.

New in version 3.7: "pdb.py" now accepts a "-m" option that execute
modules similar to the way "python3 -m" does. As with a script, the
debugger will pause execution just before the first line of the
module.

The typical usage to break into the debugger from a running program is
to insert

   import pdb; pdb.set_trace()

at the location you want to break into the debugger.  You can then
step through the code following this statement, and continue running
without the debugger using the "continue" command.

New in version 3.7: The built-in "breakpoint()", when called with
defaults, can be used instead of "import pdb; pdb.set_trace()".

The typical usage to inspect a crashed program is:

   >>> import pdb
   >>> import mymodule
   >>> mymodule.test()
   Traceback (most recent call last):
     File "<stdin>", line 1, in <module>
     File "./mymodule.py", line 4, in test
       test2()
     File "./mymodule.py", line 3, in test2
       print(spam)
   NameError: spam
   >>> pdb.pm()
   > ./mymodule.py(3)test2()
   -> print(spam)
   (Pdb)

The module defines the following functions; each enters the debugger
in a slightly different way:

pdb.run(statement, globals=None, locals=None)

   Execute the *statement* (given as a string or a code object) under
   debugger control.  The debugger prompt appears before any code is
   executed; you can set breakpoints and type "continue", or you can
   step through the statement using "step" or "next" (all these
   commands are explained below).  The optional *globals* and *locals*
   arguments specify the environment in which the code is executed; by
   default the dictionary of the module "__main__" is used.  (See the
   explanation of the built-in "exec()" or "eval()" functions.)

pdb.runeval(expression, globals=None, locals=None)

   Evaluate the *expression* (given as a string or a code object)
   under debugger control.  When "runeval()" returns, it returns the
   value of the expression.  Otherwise this function is similar to
   "run()".

pdb.runcall(function, *args, **kwds)

   Call the *function* (a function or method object, not a string)
   with the given arguments.  When "runcall()" returns, it returns
   whatever the function call returned.  The debugger prompt appears
   as soon as the function is entered.

pdb.set_trace(*, header=None)

   Enter the debugger at the calling stack frame.  This is useful to
   hard-code a breakpoint at a given point in a program, even if the
   code is not otherwise being debugged (e.g. when an assertion
   fails).  If given, *header* is printed to the console just before
   debugging begins.

   Changed in version 3.7: The keyword-only argument *header*.

pdb.post_mortem(traceback=None)

   Enter post-mortem debugging of the given *traceback* object.  If no
   *traceback* is given, it uses the one of the exception that is
   currently being handled (an exception must be being handled if the
   default is to be used).

pdb.pm()

   Enter post-mortem debugging of the traceback found in
   "sys.last_traceback".

The "run*" functions and "set_trace()" are aliases for instantiating
the "Pdb" class and calling the method of the same name.  If you want
to access further features, you have to do this yourself:

class pdb.Pdb(completekey='tab', stdin=None, stdout=None, skip=None, nosigint=False, readrc=True)

   "Pdb" is the debugger class.

   The *completekey*, *stdin* and *stdout* arguments are passed to the
   underlying "cmd.Cmd" class; see the description there.

   The *skip* argument, if given, must be an iterable of glob-style
   module name patterns.  The debugger will not step into frames that
   originate in a module that matches one of these patterns. [1]

   By default, Pdb sets a handler for the SIGINT signal (which is sent
   when the user presses "Ctrl-C" on the console) when you give a
   "continue" command. This allows you to break into the debugger
   again by pressing "Ctrl-C".  If you want Pdb not to touch the
   SIGINT handler, set *nosigint* to true.

   The *readrc* argument defaults to true and controls whether Pdb
   will load .pdbrc files from the filesystem.

   Example call to enable tracing with *skip*:

      import pdb; pdb.Pdb(skip=['django.*']).set_trace()

   New in version 3.1: The *skip* argument.

   New in version 3.2: The *nosigint* argument.  Previously, a SIGINT
   handler was never set by Pdb.

   Changed in version 3.6: The *readrc* argument.

   run(statement, globals=None, locals=None)
   runeval(expression, globals=None, locals=None)
   runcall(function, *args, **kwds)
   set_trace()

      See the documentation for the functions explained above.


Debugger Commands
=================

The commands recognized by the debugger are listed below.  Most
commands can be abbreviated to one or two letters as indicated; e.g.
"h(elp)" means that either "h" or "help" can be used to enter the help
command (but not "he" or "hel", nor "H" or "Help" or "HELP").
Arguments to commands must be separated by whitespace (spaces or
tabs).  Optional arguments are enclosed in square brackets ("[]") in
the command syntax; the square brackets must not be typed.
Alternatives in the command syntax are separated by a vertical bar
("|").

Entering a blank line repeats the last command entered.  Exception: if
the last command was a "list" command, the next 11 lines are listed.

Commands that the debugger doesnât recognize are assumed to be Python
statements and are executed in the context of the program being
debugged.  Python statements can also be prefixed with an exclamation
point ("!").  This is a powerful way to inspect the program being
debugged; it is even possible to change a variable or call a function.
When an exception occurs in such a statement, the exception name is
printed but the debuggerâs state is not changed.

The debugger supports aliases.  Aliases can have parameters which
allows one a certain level of adaptability to the context under
examination.

Multiple commands may be entered on a single line, separated by ";;".
(A single ";" is not used as it is the separator for multiple commands
in a line that is passed to the Python parser.)  No intelligence is
applied to separating the commands; the input is split at the first
";;" pair, even if it is in the middle of a quoted string.

If a file ".pdbrc" exists in the userâs home directory or in the
current directory, it is read in and executed as if it had been typed
at the debugger prompt.  This is particularly useful for aliases.  If
both files exist, the one in the home directory is read first and
aliases defined there can be overridden by the local file.

Changed in version 3.2: ".pdbrc" can now contain commands that
continue debugging, such as "continue" or "next".  Previously, these
commands had no effect.

h(elp) [command]

   Without argument, print the list of available commands.  With a
   *command* as argument, print help about that command.  "help pdb"
   displays the full documentation (the docstring of the "pdb"
   module).  Since the *command* argument must be an identifier, "help
   exec" must be entered to get help on the "!" command.

w(here)

   Print a stack trace, with the most recent frame at the bottom.  An
   arrow indicates the current frame, which determines the context of
   most commands.

d(own) [count]

   Move the current frame *count* (default one) levels down in the
   stack trace (to a newer frame).

u(p) [count]

   Move the current frame *count* (default one) levels up in the stack
   trace (to an older frame).

b(reak) [([filename:]lineno | function) [, condition]]

   With a *lineno* argument, set a break there in the current file.
   With a *function* argument, set a break at the first executable
   statement within that function.  The line number may be prefixed
   with a filename and a colon, to specify a breakpoint in another
   file (probably one that hasnât been loaded yet).  The file is
   searched on "sys.path".  Note that each breakpoint is assigned a
   number to which all the other breakpoint commands refer.

   If a second argument is present, it is an expression which must
   evaluate to true before the breakpoint is honored.

   Without argument, list all breaks, including for each breakpoint,
   the number of times that breakpoint has been hit, the current
   ignore count, and the associated condition if any.

tbreak [([filename:]lineno | function) [, condition]]

   Temporary breakpoint, which is removed automatically when it is
   first hit. The arguments are the same as for "break".

cl(ear) [filename:lineno | bpnumber [bpnumber ...]]

   With a *filename:lineno* argument, clear all the breakpoints at
   this line. With a space separated list of breakpoint numbers, clear
   those breakpoints. Without argument, clear all breaks (but first
   ask confirmation).

disable [bpnumber [bpnumber ...]]

   Disable the breakpoints given as a space separated list of
   breakpoint numbers.  Disabling a breakpoint means it cannot cause
   the program to stop execution, but unlike clearing a breakpoint, it
   remains in the list of breakpoints and can be (re-)enabled.

enable [bpnumber [bpnumber ...]]

   Enable the breakpoints specified.

ignore bpnumber [count]

   Set the ignore count for the given breakpoint number.  If count is
   omitted, the ignore count is set to 0.  A breakpoint becomes active
   when the ignore count is zero.  When non-zero, the count is
   decremented each time the breakpoint is reached and the breakpoint
   is not disabled and any associated condition evaluates to true.

condition bpnumber [condition]

   Set a new *condition* for the breakpoint, an expression which must
   evaluate to true before the breakpoint is honored.  If *condition*
   is absent, any existing condition is removed; i.e., the breakpoint
   is made unconditional.

commands [bpnumber]

   Specify a list of commands for breakpoint number *bpnumber*.  The
   commands themselves appear on the following lines.  Type a line
   containing just "end" to terminate the commands. An example:

      (Pdb) commands 1
      (com) p some_variable
      (com) end
      (Pdb)

   To remove all commands from a breakpoint, type "commands" and
   follow it immediately with "end"; that is, give no commands.

   With no *bpnumber* argument, "commands" refers to the last
   breakpoint set.

   You can use breakpoint commands to start your program up again.
   Simply use the "continue" command, or "step", or any other command
   that resumes execution.

   Specifying any command resuming execution (currently "continue",
   "step", "next", "return", "jump", "quit" and their abbreviations)
   terminates the command list (as if that command was immediately
   followed by end). This is because any time you resume execution
   (even with a simple next or step), you may encounter another
   breakpointâwhich could have its own command list, leading to
   ambiguities about which list to execute.

   If you use the âsilentâ command in the command list, the usual
   message about stopping at a breakpoint is not printed.  This may be
   desirable for breakpoints that are to print a specific message and
   then continue.  If none of the other commands print anything, you
   see no sign that the breakpoint was reached.

s(tep)

   Execute the current line, stop at the first possible occasion
   (either in a function that is called or on the next line in the
   current function).

n(ext)

   Continue execution until the next line in the current function is
   reached or it returns.  (The difference between "next" and "step"
   is that "step" stops inside a called function, while "next"
   executes called functions at (nearly) full speed, only stopping at
   the next line in the current function.)

unt(il) [lineno]

   Without argument, continue execution until the line with a number
   greater than the current one is reached.

   With a line number, continue execution until a line with a number
   greater or equal to that is reached.  In both cases, also stop when
   the current frame returns.

   Changed in version 3.2: Allow giving an explicit line number.

r(eturn)

   Continue execution until the current function returns.

c(ont(inue))

   Continue execution, only stop when a breakpoint is encountered.

j(ump) lineno

   Set the next line that will be executed.  Only available in the
   bottom-most frame.  This lets you jump back and execute code again,
   or jump forward to skip code that you donât want to run.

   It should be noted that not all jumps are allowed â for instance it
   is not possible to jump into the middle of a "for" loop or out of a
   "finally" clause.

l(ist) [first[, last]]

   List source code for the current file.  Without arguments, list 11
   lines around the current line or continue the previous listing.
   With "." as argument, list 11 lines around the current line.  With
   one argument, list 11 lines around at that line.  With two
   arguments, list the given range; if the second argument is less
   than the first, it is interpreted as a count.

   The current line in the current frame is indicated by "->".  If an
   exception is being debugged, the line where the exception was
   originally raised or propagated is indicated by ">>", if it differs
   from the current line.

   New in version 3.2: The ">>" marker.

ll | longlist

   List all source code for the current function or frame.
   Interesting lines are marked as for "list".

   New in version 3.2.

a(rgs)

   Print the argument list of the current function.

p expression

   Evaluate the *expression* in the current context and print its
   value.

   Note: "print()" can also be used, but is not a debugger command â
     this executes the Python "print()" function.

pp expression

   Like the "p" command, except the value of the expression is pretty-
   printed using the "pprint" module.

whatis expression

   Print the type of the *expression*.

source expression

   Try to get source code for the given object and display it.

   New in version 3.2.

display [expression]

   Display the value of the expression if it changed, each time
   execution stops in the current frame.

   Without expression, list all display expressions for the current
   frame.

   New in version 3.2.

undisplay [expression]

   Do not display the expression any more in the current frame.
   Without expression, clear all display expressions for the current
   frame.

   New in version 3.2.

interact

   Start an interactive interpreter (using the "code" module) whose
   global namespace contains all the (global and local) names found in
   the current scope.

   New in version 3.2.

alias [name [command]]

   Create an alias called *name* that executes *command*.  The command
   must *not* be enclosed in quotes.  Replaceable parameters can be
   indicated by "%1", "%2", and so on, while "%*" is replaced by all
   the parameters. If no command is given, the current alias for
   *name* is shown. If no arguments are given, all aliases are listed.

   Aliases may be nested and can contain anything that can be legally
   typed at the pdb prompt.  Note that internal pdb commands *can* be
   overridden by aliases.  Such a command is then hidden until the
   alias is removed.  Aliasing is recursively applied to the first
   word of the command line; all other words in the line are left
   alone.

   As an example, here are two useful aliases (especially when placed
   in the ".pdbrc" file):

      # Print instance variables (usage "pi classInst")
      alias pi for k in %1.__dict__.keys(): print("%1.",k,"=",%1.__dict__[k])
      # Print instance variables in self
      alias ps pi self

unalias name

   Delete the specified alias.

! statement

   Execute the (one-line) *statement* in the context of the current
   stack frame. The exclamation point can be omitted unless the first
   word of the statement resembles a debugger command.  To set a
   global variable, you can prefix the assignment command with a
   "global" statement on the same line, e.g.:

      (Pdb) global list_options; list_options = ['-l']
      (Pdb)

run [args ...]
restart [args ...]

   Restart the debugged Python program.  If an argument is supplied,
   it is split with "shlex" and the result is used as the new
   "sys.argv". History, breakpoints, actions and debugger options are
   preserved. "restart" is an alias for "run".

q(uit)

   Quit from the debugger.  The program being executed is aborted.

-[ Footnotes ]-

[1] Whether a frame is considered to originate in a certain module
    is determined by the "__name__" in the frame globals.
zdela©  The "del" statement
*******************

   del_stmt ::= "del" target_list

Deletion is recursively defined very similar to the way assignment is
defined. Rather than spelling it out in full details, here are some
hints.

Deletion of a target list recursively deletes each target, from left
to right.

Deletion of a name removes the binding of that name from the local or
global namespace, depending on whether the name occurs in a "global"
statement in the same code block.  If the name is unbound, a
"NameError" exception will be raised.

Deletion of attribute references, subscriptions and slicings is passed
to the primary object involved; deletion of a slicing is in general
equivalent to assignment of an empty slice of the right type (but even
this is determined by the sliced object).

Changed in version 3.2: Previously it was illegal to delete a name
from the local namespace if it occurs as a free variable in a nested
block.
zdictu  Dictionary displays
*******************

A dictionary display is a possibly empty series of key/datum pairs
enclosed in curly braces:

   dict_display       ::= "{" [key_datum_list | dict_comprehension] "}"
   key_datum_list     ::= key_datum ("," key_datum)* [","]
   key_datum          ::= expression ":" expression | "**" or_expr
   dict_comprehension ::= expression ":" expression comp_for

A dictionary display yields a new dictionary object.

If a comma-separated sequence of key/datum pairs is given, they are
evaluated from left to right to define the entries of the dictionary:
each key object is used as a key into the dictionary to store the
corresponding datum.  This means that you can specify the same key
multiple times in the key/datum list, and the final dictionaryâs value
for that key will be the last one given.

A double asterisk "**" denotes *dictionary unpacking*. Its operand
must be a *mapping*.  Each mapping item is added to the new
dictionary.  Later values replace values already set by earlier
key/datum pairs and earlier dictionary unpackings.

New in version 3.5: Unpacking into dictionary displays, originally
proposed by **PEP 448**.

A dict comprehension, in contrast to list and set comprehensions,
needs two expressions separated with a colon followed by the usual
âforâ and âifâ clauses. When the comprehension is run, the resulting
key and value elements are inserted in the new dictionary in the order
they are produced.

Restrictions on the types of the key values are listed earlier in
section The standard type hierarchy.  (To summarize, the key type
should be *hashable*, which excludes all mutable objects.)  Clashes
between duplicate keys are not detected; the last datum (textually
rightmost in the display) stored for a given key value prevails.
zdynamic-featuresa°  Interaction with dynamic features
*********************************

Name resolution of free variables occurs at runtime, not at compile
time. This means that the following code will print 42:

   i = 10
   def f():
       print(i)
   i = 42
   f()

The "eval()" and "exec()" functions do not have access to the full
environment for resolving names.  Names may be resolved in the local
and global namespaces of the caller.  Free variables are not resolved
in the nearest enclosing namespace, but in the global namespace.  [1]
The "exec()" and "eval()" functions have optional arguments to
override the global and local namespace.  If only one namespace is
specified, it is used for both.
zelseaB  The "if" statement
******************

The "if" statement is used for conditional execution:

   if_stmt ::= "if" expression ":" suite
               ("elif" expression ":" suite)*
               ["else" ":" suite]

It selects exactly one of the suites by evaluating the expressions one
by one until one is found to be true (see section Boolean operations
for the definition of true and false); then that suite is executed
(and no other part of the "if" statement is executed or evaluated).
If all expressions are false, the suite of the "else" clause, if
present, is executed.
z
exceptionsu  Exceptions
**********

Exceptions are a means of breaking out of the normal flow of control
of a code block in order to handle errors or other exceptional
conditions.  An exception is *raised* at the point where the error is
detected; it may be *handled* by the surrounding code block or by any
code block that directly or indirectly invoked the code block where
the error occurred.

The Python interpreter raises an exception when it detects a run-time
error (such as division by zero).  A Python program can also
explicitly raise an exception with the "raise" statement. Exception
handlers are specified with the "try" â¦ "except" statement.  The
"finally" clause of such a statement can be used to specify cleanup
code which does not handle the exception, but is executed whether an
exception occurred or not in the preceding code.

Python uses the âterminationâ model of error handling: an exception
handler can find out what happened and continue execution at an outer
level, but it cannot repair the cause of the error and retry the
failing operation (except by re-entering the offending piece of code
from the top).

When an exception is not handled at all, the interpreter terminates
execution of the program, or returns to its interactive main loop.  In
either case, it prints a stack backtrace, except when the exception is
"SystemExit".

Exceptions are identified by class instances.  The "except" clause is
selected depending on the class of the instance: it must reference the
class of the instance or a base class thereof.  The instance can be
received by the handler and can carry additional information about the
exceptional condition.

Note: Exception messages are not part of the Python API.  Their
  contents may change from one version of Python to the next without
  warning and should not be relied on by code which will run under
  multiple versions of the interpreter.

See also the description of the "try" statement in section The try
statement and "raise" statement in section The raise statement.

-[ Footnotes ]-

[1] This limitation occurs because the code that is executed by
    these operations is not available at the time the module is
    compiled.
z	execmodelu$  Execution model
***************


Structure of a program
======================

A Python program is constructed from code blocks. A *block* is a piece
of Python program text that is executed as a unit. The following are
blocks: a module, a function body, and a class definition. Each
command typed interactively is a block.  A script file (a file given
as standard input to the interpreter or specified as a command line
argument to the interpreter) is a code block.  A script command (a
command specified on the interpreter command line with the "-c"
option) is a code block.  The string argument passed to the built-in
functions "eval()" and "exec()" is a code block.

A code block is executed in an *execution frame*.  A frame contains
some administrative information (used for debugging) and determines
where and how execution continues after the code blockâs execution has
completed.


Naming and binding
==================


Binding of names
----------------

*Names* refer to objects.  Names are introduced by name binding
operations.

The following constructs bind names: formal parameters to functions,
"import" statements, class and function definitions (these bind the
class or function name in the defining block), and targets that are
identifiers if occurring in an assignment, "for" loop header, or after
"as" in a "with" statement or "except" clause. The "import" statement
of the form "from ... import *" binds all names defined in the
imported module, except those beginning with an underscore.  This form
may only be used at the module level.

A target occurring in a "del" statement is also considered bound for
this purpose (though the actual semantics are to unbind the name).

Each assignment or import statement occurs within a block defined by a
class or function definition or at the module level (the top-level
code block).

If a name is bound in a block, it is a local variable of that block,
unless declared as "nonlocal" or "global".  If a name is bound at the
module level, it is a global variable.  (The variables of the module
code block are local and global.)  If a variable is used in a code
block but not defined there, it is a *free variable*.

Each occurrence of a name in the program text refers to the *binding*
of that name established by the following name resolution rules.


Resolution of names
-------------------

A *scope* defines the visibility of a name within a block.  If a local
variable is defined in a block, its scope includes that block.  If the
definition occurs in a function block, the scope extends to any blocks
contained within the defining one, unless a contained block introduces
a different binding for the name.

When a name is used in a code block, it is resolved using the nearest
enclosing scope.  The set of all such scopes visible to a code block
is called the blockâs *environment*.

When a name is not found at all, a "NameError" exception is raised. If
the current scope is a function scope, and the name refers to a local
variable that has not yet been bound to a value at the point where the
name is used, an "UnboundLocalError" exception is raised.
"UnboundLocalError" is a subclass of "NameError".

If a name binding operation occurs anywhere within a code block, all
uses of the name within the block are treated as references to the
current block.  This can lead to errors when a name is used within a
block before it is bound.  This rule is subtle.  Python lacks
declarations and allows name binding operations to occur anywhere
within a code block.  The local variables of a code block can be
determined by scanning the entire text of the block for name binding
operations.

If the "global" statement occurs within a block, all uses of the name
specified in the statement refer to the binding of that name in the
top-level namespace.  Names are resolved in the top-level namespace by
searching the global namespace, i.e. the namespace of the module
containing the code block, and the builtins namespace, the namespace
of the module "builtins".  The global namespace is searched first.  If
the name is not found there, the builtins namespace is searched.  The
"global" statement must precede all uses of the name.

The "global" statement has the same scope as a name binding operation
in the same block.  If the nearest enclosing scope for a free variable
contains a global statement, the free variable is treated as a global.

The "nonlocal" statement causes corresponding names to refer to
previously bound variables in the nearest enclosing function scope.
"SyntaxError" is raised at compile time if the given name does not
exist in any enclosing function scope.

The namespace for a module is automatically created the first time a
module is imported.  The main module for a script is always called
"__main__".

Class definition blocks and arguments to "exec()" and "eval()" are
special in the context of name resolution. A class definition is an
executable statement that may use and define names. These references
follow the normal rules for name resolution with an exception that
unbound local variables are looked up in the global namespace. The
namespace of the class definition becomes the attribute dictionary of
the class. The scope of names defined in a class block is limited to
the class block; it does not extend to the code blocks of methods â
this includes comprehensions and generator expressions since they are
implemented using a function scope.  This means that the following
will fail:

   class A:
       a = 42
       b = list(a + i for i in range(10))


Builtins and restricted execution
---------------------------------

**CPython implementation detail:** Users should not touch
"__builtins__"; it is strictly an implementation detail.  Users
wanting to override values in the builtins namespace should "import"
the "builtins" module and modify its attributes appropriately.

The builtins namespace associated with the execution of a code block
is actually found by looking up the name "__builtins__" in its global
namespace; this should be a dictionary or a module (in the latter case
the moduleâs dictionary is used).  By default, when in the "__main__"
module, "__builtins__" is the built-in module "builtins"; when in any
other module, "__builtins__" is an alias for the dictionary of the
"builtins" module itself.


Interaction with dynamic features
---------------------------------

Name resolution of free variables occurs at runtime, not at compile
time. This means that the following code will print 42:

   i = 10
   def f():
       print(i)
   i = 42
   f()

The "eval()" and "exec()" functions do not have access to the full
environment for resolving names.  Names may be resolved in the local
and global namespaces of the caller.  Free variables are not resolved
in the nearest enclosing namespace, but in the global namespace.  [1]
The "exec()" and "eval()" functions have optional arguments to
override the global and local namespace.  If only one namespace is
specified, it is used for both.


Exceptions
==========

Exceptions are a means of breaking out of the normal flow of control
of a code block in order to handle errors or other exceptional
conditions.  An exception is *raised* at the point where the error is
detected; it may be *handled* by the surrounding code block or by any
code block that directly or indirectly invoked the code block where
the error occurred.

The Python interpreter raises an exception when it detects a run-time
error (such as division by zero).  A Python program can also
explicitly raise an exception with the "raise" statement. Exception
handlers are specified with the "try" â¦ "except" statement.  The
"finally" clause of such a statement can be used to specify cleanup
code which does not handle the exception, but is executed whether an
exception occurred or not in the preceding code.

Python uses the âterminationâ model of error handling: an exception
handler can find out what happened and continue execution at an outer
level, but it cannot repair the cause of the error and retry the
failing operation (except by re-entering the offending piece of code
from the top).

When an exception is not handled at all, the interpreter terminates
execution of the program, or returns to its interactive main loop.  In
either case, it prints a stack backtrace, except when the exception is
"SystemExit".

Exceptions are identified by class instances.  The "except" clause is
selected depending on the class of the instance: it must reference the
class of the instance or a base class thereof.  The instance can be
received by the handler and can carry additional information about the
exceptional condition.

Note: Exception messages are not part of the Python API.  Their
  contents may change from one version of Python to the next without
  warning and should not be relied on by code which will run under
  multiple versions of the interpreter.

See also the description of the "try" statement in section The try
statement and "raise" statement in section The raise statement.

-[ Footnotes ]-

[1] This limitation occurs because the code that is executed by
    these operations is not available at the time the module is
    compiled.
z	exprlistsuo  Expression lists
****************

   expression_list    ::= expression ("," expression)* [","]
   starred_list       ::= starred_item ("," starred_item)* [","]
   starred_expression ::= expression | (starred_item ",")* [starred_item]
   starred_item       ::= expression | "*" or_expr

Except when part of a list or set display, an expression list
containing at least one comma yields a tuple.  The length of the tuple
is the number of expressions in the list.  The expressions are
evaluated from left to right.

An asterisk "*" denotes *iterable unpacking*.  Its operand must be an
*iterable*.  The iterable is expanded into a sequence of items, which
are included in the new tuple, list, or set, at the site of the
unpacking.

New in version 3.5: Iterable unpacking in expression lists, originally
proposed by **PEP 448**.

The trailing comma is required only to create a single tuple (a.k.a. a
*singleton*); it is optional in all other cases.  A single expression
without a trailing comma doesnât create a tuple, but rather yields the
value of that expression. (To create an empty tuple, use an empty pair
of parentheses: "()".)
zfloatinga  Floating point literals
***********************

Floating point literals are described by the following lexical
definitions:

   floatnumber   ::= pointfloat | exponentfloat
   pointfloat    ::= [digitpart] fraction | digitpart "."
   exponentfloat ::= (digitpart | pointfloat) exponent
   digitpart     ::= digit (["_"] digit)*
   fraction      ::= "." digitpart
   exponent      ::= ("e" | "E") ["+" | "-"] digitpart

Note that the integer and exponent parts are always interpreted using
radix 10. For example, "077e010" is legal, and denotes the same number
as "77e10". The allowed range of floating point literals is
implementation-dependent.  As in integer literals, underscores are
supported for digit grouping.

Some examples of floating point literals:

   3.14    10.    .001    1e100    3.14e-10    0e0    3.14_15_93

Changed in version 3.6: Underscores are now allowed for grouping
purposes in literals.
zforuã
  The "for" statement
*******************

The "for" statement is used to iterate over the elements of a sequence
(such as a string, tuple or list) or other iterable object:

   for_stmt ::= "for" target_list "in" expression_list ":" suite
                ["else" ":" suite]

The expression list is evaluated once; it should yield an iterable
object.  An iterator is created for the result of the
"expression_list".  The suite is then executed once for each item
provided by the iterator, in the order returned by the iterator.  Each
item in turn is assigned to the target list using the standard rules
for assignments (see Assignment statements), and then the suite is
executed.  When the items are exhausted (which is immediately when the
sequence is empty or an iterator raises a "StopIteration" exception),
the suite in the "else" clause, if present, is executed, and the loop
terminates.

A "break" statement executed in the first suite terminates the loop
without executing the "else" clauseâs suite.  A "continue" statement
executed in the first suite skips the rest of the suite and continues
with the next item, or with the "else" clause if there is no next
item.

The for-loop makes assignments to the variables(s) in the target list.
This overwrites all previous assignments to those variables including
those made in the suite of the for-loop:

   for i in range(10):
       print(i)
       i = 5             # this will not affect the for-loop
                         # because i will be overwritten with the next
                         # index in the range

Names in the target list are not deleted when the loop is finished,
but if the sequence is empty, they will not have been assigned to at
all by the loop.  Hint: the built-in function "range()" returns an
iterator of integers suitable to emulate the effect of Pascalâs "for i
:= a to b do"; e.g., "list(range(3))" returns the list "[0, 1, 2]".

Note: There is a subtlety when the sequence is being modified by the
  loop (this can only occur for mutable sequences, e.g. lists).  An
  internal counter is used to keep track of which item is used next,
  and this is incremented on each iteration.  When this counter has
  reached the length of the sequence the loop terminates.  This means
  that if the suite deletes the current (or a previous) item from the
  sequence, the next item will be skipped (since it gets the index of
  the current item which has already been treated).  Likewise, if the
  suite inserts an item in the sequence before the current item, the
  current item will be treated again the next time through the loop.
  This can lead to nasty bugs that can be avoided by making a
  temporary copy using a slice of the whole sequence, e.g.,

     for x in a[:]:
         if x < 0: a.remove(x)
zformatstringsuY  Format String Syntax
********************

The "str.format()" method and the "Formatter" class share the same
syntax for format strings (although in the case of "Formatter",
subclasses can define their own format string syntax).  The syntax is
related to that of formatted string literals, but there are
differences.

Format strings contain âreplacement fieldsâ surrounded by curly braces
"{}". Anything that is not contained in braces is considered literal
text, which is copied unchanged to the output.  If you need to include
a brace character in the literal text, it can be escaped by doubling:
"{{" and "}}".

The grammar for a replacement field is as follows:

      replacement_field ::= "{" [field_name] ["!" conversion] [":" format_spec] "}"
      field_name        ::= arg_name ("." attribute_name | "[" element_index "]")*
      arg_name          ::= [identifier | digit+]
      attribute_name    ::= identifier
      element_index     ::= digit+ | index_string
      index_string      ::= <any source character except "]"> +
      conversion        ::= "r" | "s" | "a"
      format_spec       ::= <described in the next section>

In less formal terms, the replacement field can start with a
*field_name* that specifies the object whose value is to be formatted
and inserted into the output instead of the replacement field. The
*field_name* is optionally followed by a  *conversion* field, which is
preceded by an exclamation point "'!'", and a *format_spec*, which is
preceded by a colon "':'".  These specify a non-default format for the
replacement value.

See also the Format Specification Mini-Language section.

The *field_name* itself begins with an *arg_name* that is either a
number or a keyword.  If itâs a number, it refers to a positional
argument, and if itâs a keyword, it refers to a named keyword
argument.  If the numerical arg_names in a format string are 0, 1, 2,
â¦ in sequence, they can all be omitted (not just some) and the numbers
0, 1, 2, â¦ will be automatically inserted in that order. Because
*arg_name* is not quote-delimited, it is not possible to specify
arbitrary dictionary keys (e.g., the strings "'10'" or "':-]'") within
a format string. The *arg_name* can be followed by any number of index
or attribute expressions. An expression of the form "'.name'" selects
the named attribute using "getattr()", while an expression of the form
"'[index]'" does an index lookup using "__getitem__()".

Changed in version 3.1: The positional argument specifiers can be
omitted for "str.format()", so "'{} {}'.format(a, b)" is equivalent to
"'{0} {1}'.format(a, b)".

Changed in version 3.4: The positional argument specifiers can be
omitted for "Formatter".

Some simple format string examples:

   "First, thou shalt count to {0}"  # References first positional argument
   "Bring me a {}"                   # Implicitly references the first positional argument
   "From {} to {}"                   # Same as "From {0} to {1}"
   "My quest is {name}"              # References keyword argument 'name'
   "Weight in tons {0.weight}"       # 'weight' attribute of first positional arg
   "Units destroyed: {players[0]}"   # First element of keyword argument 'players'.

The *conversion* field causes a type coercion before formatting.
Normally, the job of formatting a value is done by the "__format__()"
method of the value itself.  However, in some cases it is desirable to
force a type to be formatted as a string, overriding its own
definition of formatting.  By converting the value to a string before
calling "__format__()", the normal formatting logic is bypassed.

Three conversion flags are currently supported: "'!s'" which calls
"str()" on the value, "'!r'" which calls "repr()" and "'!a'" which
calls "ascii()".

Some examples:

   "Harold's a clever {0!s}"        # Calls str() on the argument first
   "Bring out the holy {name!r}"    # Calls repr() on the argument first
   "More {!a}"                      # Calls ascii() on the argument first

The *format_spec* field contains a specification of how the value
should be presented, including such details as field width, alignment,
padding, decimal precision and so on.  Each value type can define its
own âformatting mini-languageâ or interpretation of the *format_spec*.

Most built-in types support a common formatting mini-language, which
is described in the next section.

A *format_spec* field can also include nested replacement fields
within it. These nested replacement fields may contain a field name,
conversion flag and format specification, but deeper nesting is not
allowed.  The replacement fields within the format_spec are
substituted before the *format_spec* string is interpreted. This
allows the formatting of a value to be dynamically specified.

See the Format examples section for some examples.


Format Specification Mini-Language
==================================

âFormat specificationsâ are used within replacement fields contained
within a format string to define how individual values are presented
(see Format String Syntax and Formatted string literals). They can
also be passed directly to the built-in "format()" function.  Each
formattable type may define how the format specification is to be
interpreted.

Most built-in types implement the following options for format
specifications, although some of the formatting options are only
supported by the numeric types.

A general convention is that an empty format string ("""") produces
the same result as if you had called "str()" on the value. A non-empty
format string typically modifies the result.

The general form of a *standard format specifier* is:

   format_spec     ::= [[fill]align][sign][#][0][width][grouping_option][.precision][type]
   fill            ::= <any character>
   align           ::= "<" | ">" | "=" | "^"
   sign            ::= "+" | "-" | " "
   width           ::= digit+
   grouping_option ::= "_" | ","
   precision       ::= digit+
   type            ::= "b" | "c" | "d" | "e" | "E" | "f" | "F" | "g" | "G" | "n" | "o" | "s" | "x" | "X" | "%"

If a valid *align* value is specified, it can be preceded by a *fill*
character that can be any character and defaults to a space if
omitted. It is not possible to use a literal curly brace (â"{"â or
â"}"â) as the *fill* character in a formatted string literal or when
using the "str.format()" method.  However, it is possible to insert a
curly brace with a nested replacement field.  This limitation doesnât
affect the "format()" function.

The meaning of the various alignment options is as follows:

   +-----------+------------------------------------------------------------+
   | Option    | Meaning                                                    |
   +===========+============================================================+
   | "'<'"     | Forces the field to be left-aligned within the available   |
   |           | space (this is the default for most objects).              |
   +-----------+------------------------------------------------------------+
   | "'>'"     | Forces the field to be right-aligned within the available  |
   |           | space (this is the default for numbers).                   |
   +-----------+------------------------------------------------------------+
   | "'='"     | Forces the padding to be placed after the sign (if any)    |
   |           | but before the digits.  This is used for printing fields   |
   |           | in the form â+000000120â. This alignment option is only    |
   |           | valid for numeric types.  It becomes the default when â0â  |
   |           | immediately precedes the field width.                      |
   +-----------+------------------------------------------------------------+
   | "'^'"     | Forces the field to be centered within the available       |
   |           | space.                                                     |
   +-----------+------------------------------------------------------------+

Note that unless a minimum field width is defined, the field width
will always be the same size as the data to fill it, so that the
alignment option has no meaning in this case.

The *sign* option is only valid for number types, and can be one of
the following:

   +-----------+------------------------------------------------------------+
   | Option    | Meaning                                                    |
   +===========+============================================================+
   | "'+'"     | indicates that a sign should be used for both positive as  |
   |           | well as negative numbers.                                  |
   +-----------+------------------------------------------------------------+
   | "'-'"     | indicates that a sign should be used only for negative     |
   |           | numbers (this is the default behavior).                    |
   +-----------+------------------------------------------------------------+
   | space     | indicates that a leading space should be used on positive  |
   |           | numbers, and a minus sign on negative numbers.             |
   +-----------+------------------------------------------------------------+

The "'#'" option causes the âalternate formâ to be used for the
conversion.  The alternate form is defined differently for different
types.  This option is only valid for integer, float, complex and
Decimal types. For integers, when binary, octal, or hexadecimal output
is used, this option adds the prefix respective "'0b'", "'0o'", or
"'0x'" to the output value. For floats, complex and Decimal the
alternate form causes the result of the conversion to always contain a
decimal-point character, even if no digits follow it. Normally, a
decimal-point character appears in the result of these conversions
only if a digit follows it. In addition, for "'g'" and "'G'"
conversions, trailing zeros are not removed from the result.

The "','" option signals the use of a comma for a thousands separator.
For a locale aware separator, use the "'n'" integer presentation type
instead.

Changed in version 3.1: Added the "','" option (see also **PEP 378**).

The "'_'" option signals the use of an underscore for a thousands
separator for floating point presentation types and for integer
presentation type "'d'".  For integer presentation types "'b'", "'o'",
"'x'", and "'X'", underscores will be inserted every 4 digits.  For
other presentation types, specifying this option is an error.

Changed in version 3.6: Added the "'_'" option (see also **PEP 515**).

*width* is a decimal integer defining the minimum field width.  If not
specified, then the field width will be determined by the content.

When no explicit alignment is given, preceding the *width* field by a
zero ("'0'") character enables sign-aware zero-padding for numeric
types.  This is equivalent to a *fill* character of "'0'" with an
*alignment* type of "'='".

The *precision* is a decimal number indicating how many digits should
be displayed after the decimal point for a floating point value
formatted with "'f'" and "'F'", or before and after the decimal point
for a floating point value formatted with "'g'" or "'G'".  For non-
number types the field indicates the maximum field size - in other
words, how many characters will be used from the field content. The
*precision* is not allowed for integer values.

Finally, the *type* determines how the data should be presented.

The available string presentation types are:

   +-----------+------------------------------------------------------------+
   | Type      | Meaning                                                    |
   +===========+============================================================+
   | "'s'"     | String format. This is the default type for strings and    |
   |           | may be omitted.                                            |
   +-----------+------------------------------------------------------------+
   | None      | The same as "'s'".                                         |
   +-----------+------------------------------------------------------------+

The available integer presentation types are:

   +-----------+------------------------------------------------------------+
   | Type      | Meaning                                                    |
   +===========+============================================================+
   | "'b'"     | Binary format. Outputs the number in base 2.               |
   +-----------+------------------------------------------------------------+
   | "'c'"     | Character. Converts the integer to the corresponding       |
   |           | unicode character before printing.                         |
   +-----------+------------------------------------------------------------+
   | "'d'"     | Decimal Integer. Outputs the number in base 10.            |
   +-----------+------------------------------------------------------------+
   | "'o'"     | Octal format. Outputs the number in base 8.                |
   +-----------+------------------------------------------------------------+
   | "'x'"     | Hex format. Outputs the number in base 16, using lower-    |
   |           | case letters for the digits above 9.                       |
   +-----------+------------------------------------------------------------+
   | "'X'"     | Hex format. Outputs the number in base 16, using upper-    |
   |           | case letters for the digits above 9.                       |
   +-----------+------------------------------------------------------------+
   | "'n'"     | Number. This is the same as "'d'", except that it uses the |
   |           | current locale setting to insert the appropriate number    |
   |           | separator characters.                                      |
   +-----------+------------------------------------------------------------+
   | None      | The same as "'d'".                                         |
   +-----------+------------------------------------------------------------+

In addition to the above presentation types, integers can be formatted
with the floating point presentation types listed below (except "'n'"
and "None"). When doing so, "float()" is used to convert the integer
to a floating point number before formatting.

The available presentation types for floating point and decimal values
are:

   +-----------+------------------------------------------------------------+
   | Type      | Meaning                                                    |
   +===========+============================================================+
   | "'e'"     | Exponent notation. Prints the number in scientific         |
   |           | notation using the letter âeâ to indicate the exponent.    |
   |           | The default precision is "6".                              |
   +-----------+------------------------------------------------------------+
   | "'E'"     | Exponent notation. Same as "'e'" except it uses an upper   |
   |           | case âEâ as the separator character.                       |
   +-----------+------------------------------------------------------------+
   | "'f'"     | Fixed-point notation. Displays the number as a fixed-point |
   |           | number. The default precision is "6".                      |
   +-----------+------------------------------------------------------------+
   | "'F'"     | Fixed-point notation. Same as "'f'", but converts "nan" to |
   |           | "NAN" and "inf" to "INF".                                  |
   +-----------+------------------------------------------------------------+
   | "'g'"     | General format.  For a given precision "p >= 1", this      |
   |           | rounds the number to "p" significant digits and then       |
   |           | formats the result in either fixed-point format or in      |
   |           | scientific notation, depending on its magnitude.  The      |
   |           | precise rules are as follows: suppose that the result      |
   |           | formatted with presentation type "'e'" and precision "p-1" |
   |           | would have exponent "exp".  Then if "-4 <= exp < p", the   |
   |           | number is formatted with presentation type "'f'" and       |
   |           | precision "p-1-exp".  Otherwise, the number is formatted   |
   |           | with presentation type "'e'" and precision "p-1". In both  |
   |           | cases insignificant trailing zeros are removed from the    |
   |           | significand, and the decimal point is also removed if      |
   |           | there are no remaining digits following it.  Positive and  |
   |           | negative infinity, positive and negative zero, and nans,   |
   |           | are formatted as "inf", "-inf", "0", "-0" and "nan"        |
   |           | respectively, regardless of the precision.  A precision of |
   |           | "0" is treated as equivalent to a precision of "1". The    |
   |           | default precision is "6".                                  |
   +-----------+------------------------------------------------------------+
   | "'G'"     | General format. Same as "'g'" except switches to "'E'" if  |
   |           | the number gets too large. The representations of infinity |
   |           | and NaN are uppercased, too.                               |
   +-----------+------------------------------------------------------------+
   | "'n'"     | Number. This is the same as "'g'", except that it uses the |
   |           | current locale setting to insert the appropriate number    |
   |           | separator characters.                                      |
   +-----------+------------------------------------------------------------+
   | "'%'"     | Percentage. Multiplies the number by 100 and displays in   |
   |           | fixed ("'f'") format, followed by a percent sign.          |
   +-----------+------------------------------------------------------------+
   | None      | Similar to "'g'", except that fixed-point notation, when   |
   |           | used, has at least one digit past the decimal point. The   |
   |           | default precision is as high as needed to represent the    |
   |           | particular value. The overall effect is to match the       |
   |           | output of "str()" as altered by the other format           |
   |           | modifiers.                                                 |
   +-----------+------------------------------------------------------------+


Format examples
===============

This section contains examples of the "str.format()" syntax and
comparison with the old "%"-formatting.

In most of the cases the syntax is similar to the old "%"-formatting,
with the addition of the "{}" and with ":" used instead of "%". For
example, "'%03.2f'" can be translated to "'{:03.2f}'".

The new format syntax also supports new and different options, shown
in the following examples.

Accessing arguments by position:

   >>> '{0}, {1}, {2}'.format('a', 'b', 'c')
   'a, b, c'
   >>> '{}, {}, {}'.format('a', 'b', 'c')  # 3.1+ only
   'a, b, c'
   >>> '{2}, {1}, {0}'.format('a', 'b', 'c')
   'c, b, a'
   >>> '{2}, {1}, {0}'.format(*'abc')      # unpacking argument sequence
   'c, b, a'
   >>> '{0}{1}{0}'.format('abra', 'cad')   # arguments' indices can be repeated
   'abracadabra'

Accessing arguments by name:

   >>> 'Coordinates: {latitude}, {longitude}'.format(latitude='37.24N', longitude='-115.81W')
   'Coordinates: 37.24N, -115.81W'
   >>> coord = {'latitude': '37.24N', 'longitude': '-115.81W'}
   >>> 'Coordinates: {latitude}, {longitude}'.format(**coord)
   'Coordinates: 37.24N, -115.81W'

Accessing argumentsâ attributes:

   >>> c = 3-5j
   >>> ('The complex number {0} is formed from the real part {0.real} '
   ...  'and the imaginary part {0.imag}.').format(c)
   'The complex number (3-5j) is formed from the real part 3.0 and the imaginary part -5.0.'
   >>> class Point:
   ...     def __init__(self, x, y):
   ...         self.x, self.y = x, y
   ...     def __str__(self):
   ...         return 'Point({self.x}, {self.y})'.format(self=self)
   ...
   >>> str(Point(4, 2))
   'Point(4, 2)'

Accessing argumentsâ items:

   >>> coord = (3, 5)
   >>> 'X: {0[0]};  Y: {0[1]}'.format(coord)
   'X: 3;  Y: 5'

Replacing "%s" and "%r":

   >>> "repr() shows quotes: {!r}; str() doesn't: {!s}".format('test1', 'test2')
   "repr() shows quotes: 'test1'; str() doesn't: test2"

Aligning the text and specifying a width:

   >>> '{:<30}'.format('left aligned')
   'left aligned                  '
   >>> '{:>30}'.format('right aligned')
   '                 right aligned'
   >>> '{:^30}'.format('centered')
   '           centered           '
   >>> '{:*^30}'.format('centered')  # use '*' as a fill char
   '***********centered***********'

Replacing "%+f", "%-f", and "% f" and specifying a sign:

   >>> '{:+f}; {:+f}'.format(3.14, -3.14)  # show it always
   '+3.140000; -3.140000'
   >>> '{: f}; {: f}'.format(3.14, -3.14)  # show a space for positive numbers
   ' 3.140000; -3.140000'
   >>> '{:-f}; {:-f}'.format(3.14, -3.14)  # show only the minus -- same as '{:f}; {:f}'
   '3.140000; -3.140000'

Replacing "%x" and "%o" and converting the value to different bases:

   >>> # format also supports binary numbers
   >>> "int: {0:d};  hex: {0:x};  oct: {0:o};  bin: {0:b}".format(42)
   'int: 42;  hex: 2a;  oct: 52;  bin: 101010'
   >>> # with 0x, 0o, or 0b as prefix:
   >>> "int: {0:d};  hex: {0:#x};  oct: {0:#o};  bin: {0:#b}".format(42)
   'int: 42;  hex: 0x2a;  oct: 0o52;  bin: 0b101010'

Using the comma as a thousands separator:

   >>> '{:,}'.format(1234567890)
   '1,234,567,890'

Expressing a percentage:

   >>> points = 19
   >>> total = 22
   >>> 'Correct answers: {:.2%}'.format(points/total)
   'Correct answers: 86.36%'

Using type-specific formatting:

   >>> import datetime
   >>> d = datetime.datetime(2010, 7, 4, 12, 15, 58)
   >>> '{:%Y-%m-%d %H:%M:%S}'.format(d)
   '2010-07-04 12:15:58'

Nesting arguments and more complex examples:

   >>> for align, text in zip('<^>', ['left', 'center', 'right']):
   ...     '{0:{fill}{align}16}'.format(text, fill=align, align=align)
   ...
   'left<<<<<<<<<<<<'
   '^^^^^center^^^^^'
   '>>>>>>>>>>>right'
   >>>
   >>> octets = [192, 168, 0, 1]
   >>> '{:02X}{:02X}{:02X}{:02X}'.format(*octets)
   'C0A80001'
   >>> int(_, 16)
   3232235521
   >>>
   >>> width = 5
   >>> for num in range(5,12): 
   ...     for base in 'dXob':
   ...         print('{0:{width}{base}}'.format(num, base=base, width=width), end=' ')
   ...     print()
   ...
       5     5     5   101
       6     6     6   110
       7     7     7   111
       8     8    10  1000
       9     9    11  1001
      10     A    12  1010
      11     B    13  1011
zfunctionuÇ  Function definitions
********************

A function definition defines a user-defined function object (see
section The standard type hierarchy):

   funcdef                 ::= [decorators] "def" funcname "(" [parameter_list] ")"
               ["->" expression] ":" suite
   decorators              ::= decorator+
   decorator               ::= "@" dotted_name ["(" [argument_list [","]] ")"] NEWLINE
   dotted_name             ::= identifier ("." identifier)*
   parameter_list          ::= defparameter ("," defparameter)* ["," [parameter_list_starargs]]
                      | parameter_list_starargs
   parameter_list_starargs ::= "*" [parameter] ("," defparameter)* ["," ["**" parameter [","]]]
                               | "**" parameter [","]
   parameter               ::= identifier [":" expression]
   defparameter            ::= parameter ["=" expression]
   funcname                ::= identifier

A function definition is an executable statement.  Its execution binds
the function name in the current local namespace to a function object
(a wrapper around the executable code for the function).  This
function object contains a reference to the current global namespace
as the global namespace to be used when the function is called.

The function definition does not execute the function body; this gets
executed only when the function is called. [2]

A function definition may be wrapped by one or more *decorator*
expressions. Decorator expressions are evaluated when the function is
defined, in the scope that contains the function definition.  The
result must be a callable, which is invoked with the function object
as the only argument. The returned value is bound to the function name
instead of the function object.  Multiple decorators are applied in
nested fashion. For example, the following code

   @f1(arg)
   @f2
   def func(): pass

is roughly equivalent to

   def func(): pass
   func = f1(arg)(f2(func))

except that the original function is not temporarily bound to the name
"func".

When one or more *parameters* have the form *parameter* "="
*expression*, the function is said to have âdefault parameter values.â
For a parameter with a default value, the corresponding *argument* may
be omitted from a call, in which case the parameterâs default value is
substituted.  If a parameter has a default value, all following
parameters up until the â"*"â must also have a default value â this is
a syntactic restriction that is not expressed by the grammar.

**Default parameter values are evaluated from left to right when the
function definition is executed.** This means that the expression is
evaluated once, when the function is defined, and that the same âpre-
computedâ value is used for each call.  This is especially important
to understand when a default parameter is a mutable object, such as a
list or a dictionary: if the function modifies the object (e.g. by
appending an item to a list), the default value is in effect modified.
This is generally not what was intended.  A way around this is to use
"None" as the default, and explicitly test for it in the body of the
function, e.g.:

   def whats_on_the_telly(penguin=None):
       if penguin is None:
           penguin = []
       penguin.append("property of the zoo")
       return penguin

Function call semantics are described in more detail in section Calls.
A function call always assigns values to all parameters mentioned in
the parameter list, either from position arguments, from keyword
arguments, or from default values.  If the form â"*identifier"â is
present, it is initialized to a tuple receiving any excess positional
parameters, defaulting to the empty tuple. If the form
â"**identifier"â is present, it is initialized to a new ordered
mapping receiving any excess keyword arguments, defaulting to a new
empty mapping of the same type.  Parameters after â"*"â or
â"*identifier"â are keyword-only parameters and may only be passed
used keyword arguments.

Parameters may have an *annotation* of the form â": expression"â
following the parameter name.  Any parameter may have an annotation,
even those of the form "*identifier" or "**identifier".  Functions may
have âreturnâ annotation of the form â"-> expression"â after the
parameter list.  These annotations can be any valid Python expression.
The presence of annotations does not change the semantics of a
function.  The annotation values are available as values of a
dictionary keyed by the parametersâ names in the "__annotations__"
attribute of the function object.  If the "annotations" import from
"__future__" is used, annotations are preserved as strings at runtime
which enables postponed evaluation.  Otherwise, they are evaluated
when the function definition is executed.  In this case annotations
may be evaluated in a different order than they appear in the source
code.

It is also possible to create anonymous functions (functions not bound
to a name), for immediate use in expressions.  This uses lambda
expressions, described in section Lambdas.  Note that the lambda
expression is merely a shorthand for a simplified function definition;
a function defined in a â"def"â statement can be passed around or
assigned to another name just like a function defined by a lambda
expression.  The â"def"â form is actually more powerful since it
allows the execution of multiple statements and annotations.

**Programmerâs note:** Functions are first-class objects.  A â"def"â
statement executed inside a function definition defines a local
function that can be returned or passed around.  Free variables used
in the nested function can access the local variables of the function
containing the def.  See section Naming and binding for details.

See also:

  **PEP 3107** - Function Annotations
     The original specification for function annotations.

  **PEP 484** - Type Hints
     Definition of a standard meaning for annotations: type hints.

  **PEP 526** - Syntax for Variable Annotations
     Ability to type hint variable declarations, including class
     variables and instance variables

  **PEP 563** - Postponed Evaluation of Annotations
     Support for forward references within annotations by preserving
     annotations in a string form at runtime instead of eager
     evaluation.
zglobaluÁ  The "global" statement
**********************

   global_stmt ::= "global" identifier ("," identifier)*

The "global" statement is a declaration which holds for the entire
current code block.  It means that the listed identifiers are to be
interpreted as globals.  It would be impossible to assign to a global
variable without "global", although free variables may refer to
globals without being declared global.

Names listed in a "global" statement must not be used in the same code
block textually preceding that "global" statement.

Names listed in a "global" statement must not be defined as formal
parameters or in a "for" loop control target, "class" definition,
function definition, "import" statement, or variable annotation.

**CPython implementation detail:** The current implementation does not
enforce some of these restrictions, but programs should not abuse this
freedom, as future implementations may enforce them or silently change
the meaning of the program.

**Programmerâs note:** "global" is a directive to the parser.  It
applies only to code parsed at the same time as the "global"
statement. In particular, a "global" statement contained in a string
or code object supplied to the built-in "exec()" function does not
affect the code block *containing* the function call, and code
contained in such a string is unaffected by "global" statements in the
code containing the function call.  The same applies to the "eval()"
and "compile()" functions.
z
id-classesu£  Reserved classes of identifiers
*******************************

Certain classes of identifiers (besides keywords) have special
meanings.  These classes are identified by the patterns of leading and
trailing underscore characters:

"_*"
   Not imported by "from module import *".  The special identifier "_"
   is used in the interactive interpreter to store the result of the
   last evaluation; it is stored in the "builtins" module.  When not
   in interactive mode, "_" has no special meaning and is not defined.
   See section The import statement.

   Note: The name "_" is often used in conjunction with
     internationalization; refer to the documentation for the
     "gettext" module for more information on this convention.

"__*__"
   System-defined names. These names are defined by the interpreter
   and its implementation (including the standard library).  Current
   system names are discussed in the Special method names section and
   elsewhere.  More will likely be defined in future versions of
   Python.  *Any* use of "__*__" names, in any context, that does not
   follow explicitly documented use, is subject to breakage without
   warning.

"__*"
   Class-private names.  Names in this category, when used within the
   context of a class definition, are re-written to use a mangled form
   to help avoid name clashes between âprivateâ attributes of base and
   derived classes. See section Identifiers (Names).
zidentifiersu>  Identifiers and keywords
************************

Identifiers (also referred to as *names*) are described by the
following lexical definitions.

The syntax of identifiers in Python is based on the Unicode standard
annex UAX-31, with elaboration and changes as defined below; see also
**PEP 3131** for further details.

Within the ASCII range (U+0001..U+007F), the valid characters for
identifiers are the same as in Python 2.x: the uppercase and lowercase
letters "A" through "Z", the underscore "_" and, except for the first
character, the digits "0" through "9".

Python 3.0 introduces additional characters from outside the ASCII
range (see **PEP 3131**).  For these characters, the classification
uses the version of the Unicode Character Database as included in the
"unicodedata" module.

Identifiers are unlimited in length.  Case is significant.

   identifier   ::= xid_start xid_continue*
   id_start     ::= <all characters in general categories Lu, Ll, Lt, Lm, Lo, Nl, the underscore, and characters with the Other_ID_Start property>
   id_continue  ::= <all characters in id_start, plus characters in the categories Mn, Mc, Nd, Pc and others with the Other_ID_Continue property>
   xid_start    ::= <all characters in id_start whose NFKC normalization is in "id_start xid_continue*">
   xid_continue ::= <all characters in id_continue whose NFKC normalization is in "id_continue*">

The Unicode category codes mentioned above stand for:

* *Lu* - uppercase letters

* *Ll* - lowercase letters

* *Lt* - titlecase letters

* *Lm* - modifier letters

* *Lo* - other letters

* *Nl* - letter numbers

* *Mn* - nonspacing marks

* *Mc* - spacing combining marks

* *Nd* - decimal numbers

* *Pc* - connector punctuations

* *Other_ID_Start* - explicit list of characters in PropList.txt to
  support backwards compatibility

* *Other_ID_Continue* - likewise

All identifiers are converted into the normal form NFKC while parsing;
comparison of identifiers is based on NFKC.

A non-normative HTML file listing all valid identifier characters for
Unicode 4.1 can be found at https://www.dcl.hpi.uni-
potsdam.de/home/loewis/table-3131.html.


Keywords
========

The following identifiers are used as reserved words, or *keywords* of
the language, and cannot be used as ordinary identifiers.  They must
be spelled exactly as written here:

   False      await      else       import     pass
   None       break      except     in         raise
   True       class      finally    is         return
   and        continue   for        lambda     try
   as         def        from       nonlocal   while
   assert     del        global     not        with
   async      elif       if         or         yield


Reserved classes of identifiers
===============================

Certain classes of identifiers (besides keywords) have special
meanings.  These classes are identified by the patterns of leading and
trailing underscore characters:

"_*"
   Not imported by "from module import *".  The special identifier "_"
   is used in the interactive interpreter to store the result of the
   last evaluation; it is stored in the "builtins" module.  When not
   in interactive mode, "_" has no special meaning and is not defined.
   See section The import statement.

   Note: The name "_" is often used in conjunction with
     internationalization; refer to the documentation for the
     "gettext" module for more information on this convention.

"__*__"
   System-defined names. These names are defined by the interpreter
   and its implementation (including the standard library).  Current
   system names are discussed in the Special method names section and
   elsewhere.  More will likely be defined in future versions of
   Python.  *Any* use of "__*__" names, in any context, that does not
   follow explicitly documented use, is subject to breakage without
   warning.

"__*"
   Class-private names.  Names in this category, when used within the
   context of a class definition, are re-written to use a mangled form
   to help avoid name clashes between âprivateâ attributes of base and
   derived classes. See section Identifiers (Names).
zifaB  The "if" statement
******************

The "if" statement is used for conditional execution:

   if_stmt ::= "if" expression ":" suite
               ("elif" expression ":" suite)*
               ["else" ":" suite]

It selects exactly one of the suites by evaluating the expressions one
by one until one is found to be true (see section Boolean operations
for the definition of true and false); then that suite is executed
(and no other part of the "if" statement is executed or evaluated).
If all expressions are false, the suite of the "else" clause, if
present, is executed.
z	imaginarya5  Imaginary literals
******************

Imaginary literals are described by the following lexical definitions:

   imagnumber ::= (floatnumber | digitpart) ("j" | "J")

An imaginary literal yields a complex number with a real part of 0.0.
Complex numbers are represented as a pair of floating point numbers
and have the same restrictions on their range.  To create a complex
number with a nonzero real part, add a floating point number to it,
e.g., "(3+4j)".  Some examples of imaginary literals:

   3.14j   10.j    10j     .001j   1e100j   3.14e-10j   3.14_15_93j
zimportu¨!  The "import" statement
**********************

   import_stmt     ::= "import" module ["as" identifier] ("," module ["as" identifier])*
                   | "from" relative_module "import" identifier ["as" identifier]
                   ("," identifier ["as" identifier])*
                   | "from" relative_module "import" "(" identifier ["as" identifier]
                   ("," identifier ["as" identifier])* [","] ")"
                   | "from" module "import" "*"
   module          ::= (identifier ".")* identifier
   relative_module ::= "."* module | "."+

The basic import statement (no "from" clause) is executed in two
steps:

1. find a module, loading and initializing it if necessary

2. define a name or names in the local namespace for the scope
   where the "import" statement occurs.

When the statement contains multiple clauses (separated by commas) the
two steps are carried out separately for each clause, just as though
the clauses had been separated out into individual import statements.

The details of the first step, finding and loading modules are
described in greater detail in the section on the import system, which
also describes the various types of packages and modules that can be
imported, as well as all the hooks that can be used to customize the
import system. Note that failures in this step may indicate either
that the module could not be located, *or* that an error occurred
while initializing the module, which includes execution of the
moduleâs code.

If the requested module is retrieved successfully, it will be made
available in the local namespace in one of three ways:

* If the module name is followed by "as", then the name following
  "as" is bound directly to the imported module.

* If no other name is specified, and the module being imported is a
  top level module, the moduleâs name is bound in the local namespace
  as a reference to the imported module

* If the module being imported is *not* a top level module, then the
  name of the top level package that contains the module is bound in
  the local namespace as a reference to the top level package. The
  imported module must be accessed using its full qualified name
  rather than directly

The "from" form uses a slightly more complex process:

1. find the module specified in the "from" clause, loading and
   initializing it if necessary;

2. for each of the identifiers specified in the "import" clauses:

   1. check if the imported module has an attribute by that name

   2. if not, attempt to import a submodule with that name and then
      check the imported module again for that attribute

   3. if the attribute is not found, "ImportError" is raised.

   4. otherwise, a reference to that value is stored in the local
      namespace, using the name in the "as" clause if it is present,
      otherwise using the attribute name

Examples:

   import foo                 # foo imported and bound locally
   import foo.bar.baz         # foo.bar.baz imported, foo bound locally
   import foo.bar.baz as fbb  # foo.bar.baz imported and bound as fbb
   from foo.bar import baz    # foo.bar.baz imported and bound as baz
   from foo import attr       # foo imported and foo.attr bound as attr

If the list of identifiers is replaced by a star ("'*'"), all public
names defined in the module are bound in the local namespace for the
scope where the "import" statement occurs.

The *public names* defined by a module are determined by checking the
moduleâs namespace for a variable named "__all__"; if defined, it must
be a sequence of strings which are names defined or imported by that
module.  The names given in "__all__" are all considered public and
are required to exist.  If "__all__" is not defined, the set of public
names includes all names found in the moduleâs namespace which do not
begin with an underscore character ("'_'").  "__all__" should contain
the entire public API. It is intended to avoid accidentally exporting
items that are not part of the API (such as library modules which were
imported and used within the module).

The wild card form of import â "from module import *" â is only
allowed at the module level.  Attempting to use it in class or
function definitions will raise a "SyntaxError".

When specifying what module to import you do not have to specify the
absolute name of the module. When a module or package is contained
within another package it is possible to make a relative import within
the same top package without having to mention the package name. By
using leading dots in the specified module or package after "from" you
can specify how high to traverse up the current package hierarchy
without specifying exact names. One leading dot means the current
package where the module making the import exists. Two dots means up
one package level. Three dots is up two levels, etc. So if you execute
"from . import mod" from a module in the "pkg" package then you will
end up importing "pkg.mod". If you execute "from ..subpkg2 import mod"
from within "pkg.subpkg1" you will import "pkg.subpkg2.mod". The
specification for relative imports is contained within **PEP 328**.

"importlib.import_module()" is provided to support applications that
determine dynamically the modules to be loaded.


Future statements
=================

A *future statement* is a directive to the compiler that a particular
module should be compiled using syntax or semantics that will be
available in a specified future release of Python where the feature
becomes standard.

The future statement is intended to ease migration to future versions
of Python that introduce incompatible changes to the language.  It
allows use of the new features on a per-module basis before the
release in which the feature becomes standard.

   future_stmt ::= "from" "__future__" "import" feature ["as" identifier]
                   ("," feature ["as" identifier])*
                   | "from" "__future__" "import" "(" feature ["as" identifier]
                   ("," feature ["as" identifier])* [","] ")"
   feature     ::= identifier

A future statement must appear near the top of the module.  The only
lines that can appear before a future statement are:

* the module docstring (if any),

* comments,

* blank lines, and

* other future statements.

The only feature in Python 3.7 that requires using the future
statement is "annotations".

All historical features enabled by the future statement are still
recognized by Python 3.  The list includes "absolute_import",
"division", "generators", "generator_stop", "unicode_literals",
"print_function", "nested_scopes" and "with_statement".  They are all
redundant because they are always enabled, and only kept for backwards
compatibility.

A future statement is recognized and treated specially at compile
time: Changes to the semantics of core constructs are often
implemented by generating different code.  It may even be the case
that a new feature introduces new incompatible syntax (such as a new
reserved word), in which case the compiler may need to parse the
module differently.  Such decisions cannot be pushed off until
runtime.

For any given release, the compiler knows which feature names have
been defined, and raises a compile-time error if a future statement
contains a feature not known to it.

The direct runtime semantics are the same as for any import statement:
there is a standard module "__future__", described later, and it will
be imported in the usual way at the time the future statement is
executed.

The interesting runtime semantics depend on the specific feature
enabled by the future statement.

Note that there is nothing special about the statement:

   import __future__ [as name]

That is not a future statement; itâs an ordinary import statement with
no special semantics or syntax restrictions.

Code compiled by calls to the built-in functions "exec()" and
"compile()" that occur in a module "M" containing a future statement
will, by default, use the new syntax or semantics associated with the
future statement.  This can be controlled by optional arguments to
"compile()" â see the documentation of that function for details.

A future statement typed at an interactive interpreter prompt will
take effect for the rest of the interpreter session.  If an
interpreter is started with the "-i" option, is passed a script name
to execute, and the script includes a future statement, it will be in
effect in the interactive session started after the script is
executed.

See also:

  **PEP 236** - Back to the __future__
     The original proposal for the __future__ mechanism.
zinaO  Membership test operations
**************************

The operators "in" and "not in" test for membership.  "x in s"
evaluates to "True" if *x* is a member of *s*, and "False" otherwise.
"x not in s" returns the negation of "x in s".  All built-in sequences
and set types support this as well as dictionary, for which "in" tests
whether the dictionary has a given key. For container types such as
list, tuple, set, frozenset, dict, or collections.deque, the
expression "x in y" is equivalent to "any(x is e or x == e for e in
y)".

For the string and bytes types, "x in y" is "True" if and only if *x*
is a substring of *y*.  An equivalent test is "y.find(x) != -1".
Empty strings are always considered to be a substring of any other
string, so """ in "abc"" will return "True".

For user-defined classes which define the "__contains__()" method, "x
in y" returns "True" if "y.__contains__(x)" returns a true value, and
"False" otherwise.

For user-defined classes which do not define "__contains__()" but do
define "__iter__()", "x in y" is "True" if some value "z" with "x ==
z" is produced while iterating over "y".  If an exception is raised
during the iteration, it is as if "in" raised that exception.

Lastly, the old-style iteration protocol is tried: if a class defines
"__getitem__()", "x in y" is "True" if and only if there is a non-
negative integer index *i* such that "x == y[i]", and all lower
integer indices do not raise "IndexError" exception.  (If any other
exception is raised, it is as if "in" raised that exception).

The operator "not in" is defined to have the inverse true value of
"in".
zintegersaV  Integer literals
****************

Integer literals are described by the following lexical definitions:

   integer      ::= decinteger | bininteger | octinteger | hexinteger
   decinteger   ::= nonzerodigit (["_"] digit)* | "0"+ (["_"] "0")*
   bininteger   ::= "0" ("b" | "B") (["_"] bindigit)+
   octinteger   ::= "0" ("o" | "O") (["_"] octdigit)+
   hexinteger   ::= "0" ("x" | "X") (["_"] hexdigit)+
   nonzerodigit ::= "1"..."9"
   digit        ::= "0"..."9"
   bindigit     ::= "0" | "1"
   octdigit     ::= "0"..."7"
   hexdigit     ::= digit | "a"..."f" | "A"..."F"

There is no limit for the length of integer literals apart from what
can be stored in available memory.

Underscores are ignored for determining the numeric value of the
literal.  They can be used to group digits for enhanced readability.
One underscore can occur between digits, and after base specifiers
like "0x".

Note that leading zeros in a non-zero decimal number are not allowed.
This is for disambiguation with C-style octal literals, which Python
used before version 3.0.

Some examples of integer literals:

   7     2147483647                        0o177    0b100110111
   3     79228162514264337593543950336     0o377    0xdeadbeef
         100_000_000_000                   0b_1110_0101

Changed in version 3.6: Underscores are now allowed for grouping
purposes in literals.
zlambdaa^  Lambdas
*******

   lambda_expr        ::= "lambda" [parameter_list] ":" expression
   lambda_expr_nocond ::= "lambda" [parameter_list] ":" expression_nocond

Lambda expressions (sometimes called lambda forms) are used to create
anonymous functions. The expression "lambda parameters: expression"
yields a function object.  The unnamed object behaves like a function
object defined with:

   def <lambda>(parameters):
       return expression

See section Function definitions for the syntax of parameter lists.
Note that functions created with lambda expressions cannot contain
statements or annotations.
zlistsa/  List displays
*************

A list display is a possibly empty series of expressions enclosed in
square brackets:

   list_display ::= "[" [starred_list | comprehension] "]"

A list display yields a new list object, the contents being specified
by either a list of expressions or a comprehension.  When a comma-
separated list of expressions is supplied, its elements are evaluated
from left to right and placed into the list object in that order.
When a comprehension is supplied, the list is constructed from the
elements resulting from the comprehension.
znaminguô  Naming and binding
******************


Binding of names
================

*Names* refer to objects.  Names are introduced by name binding
operations.

The following constructs bind names: formal parameters to functions,
"import" statements, class and function definitions (these bind the
class or function name in the defining block), and targets that are
identifiers if occurring in an assignment, "for" loop header, or after
"as" in a "with" statement or "except" clause. The "import" statement
of the form "from ... import *" binds all names defined in the
imported module, except those beginning with an underscore.  This form
may only be used at the module level.

A target occurring in a "del" statement is also considered bound for
this purpose (though the actual semantics are to unbind the name).

Each assignment or import statement occurs within a block defined by a
class or function definition or at the module level (the top-level
code block).

If a name is bound in a block, it is a local variable of that block,
unless declared as "nonlocal" or "global".  If a name is bound at the
module level, it is a global variable.  (The variables of the module
code block are local and global.)  If a variable is used in a code
block but not defined there, it is a *free variable*.

Each occurrence of a name in the program text refers to the *binding*
of that name established by the following name resolution rules.


Resolution of names
===================

A *scope* defines the visibility of a name within a block.  If a local
variable is defined in a block, its scope includes that block.  If the
definition occurs in a function block, the scope extends to any blocks
contained within the defining one, unless a contained block introduces
a different binding for the name.

When a name is used in a code block, it is resolved using the nearest
enclosing scope.  The set of all such scopes visible to a code block
is called the blockâs *environment*.

When a name is not found at all, a "NameError" exception is raised. If
the current scope is a function scope, and the name refers to a local
variable that has not yet been bound to a value at the point where the
name is used, an "UnboundLocalError" exception is raised.
"UnboundLocalError" is a subclass of "NameError".

If a name binding operation occurs anywhere within a code block, all
uses of the name within the block are treated as references to the
current block.  This can lead to errors when a name is used within a
block before it is bound.  This rule is subtle.  Python lacks
declarations and allows name binding operations to occur anywhere
within a code block.  The local variables of a code block can be
determined by scanning the entire text of the block for name binding
operations.

If the "global" statement occurs within a block, all uses of the name
specified in the statement refer to the binding of that name in the
top-level namespace.  Names are resolved in the top-level namespace by
searching the global namespace, i.e. the namespace of the module
containing the code block, and the builtins namespace, the namespace
of the module "builtins".  The global namespace is searched first.  If
the name is not found there, the builtins namespace is searched.  The
"global" statement must precede all uses of the name.

The "global" statement has the same scope as a name binding operation
in the same block.  If the nearest enclosing scope for a free variable
contains a global statement, the free variable is treated as a global.

The "nonlocal" statement causes corresponding names to refer to
previously bound variables in the nearest enclosing function scope.
"SyntaxError" is raised at compile time if the given name does not
exist in any enclosing function scope.

The namespace for a module is automatically created the first time a
module is imported.  The main module for a script is always called
"__main__".

Class definition blocks and arguments to "exec()" and "eval()" are
special in the context of name resolution. A class definition is an
executable statement that may use and define names. These references
follow the normal rules for name resolution with an exception that
unbound local variables are looked up in the global namespace. The
namespace of the class definition becomes the attribute dictionary of
the class. The scope of names defined in a class block is limited to
the class block; it does not extend to the code blocks of methods â
this includes comprehensions and generator expressions since they are
implemented using a function scope.  This means that the following
will fail:

   class A:
       a = 42
       b = list(a + i for i in range(10))


Builtins and restricted execution
=================================

**CPython implementation detail:** Users should not touch
"__builtins__"; it is strictly an implementation detail.  Users
wanting to override values in the builtins namespace should "import"
the "builtins" module and modify its attributes appropriately.

The builtins namespace associated with the execution of a code block
is actually found by looking up the name "__builtins__" in its global
namespace; this should be a dictionary or a module (in the latter case
the moduleâs dictionary is used).  By default, when in the "__main__"
module, "__builtins__" is the built-in module "builtins"; when in any
other module, "__builtins__" is an alias for the dictionary of the
"builtins" module itself.


Interaction with dynamic features
=================================

Name resolution of free variables occurs at runtime, not at compile
time. This means that the following code will print 42:

   i = 10
   def f():
       print(i)
   i = 42
   f()

The "eval()" and "exec()" functions do not have access to the full
environment for resolving names.  Names may be resolved in the local
and global namespaces of the caller.  Free variables are not resolved
in the nearest enclosing namespace, but in the global namespace.  [1]
The "exec()" and "eval()" functions have optional arguments to
override the global and local namespace.  If only one namespace is
specified, it is used for both.
znonlocala¢  The "nonlocal" statement
************************

   nonlocal_stmt ::= "nonlocal" identifier ("," identifier)*

The "nonlocal" statement causes the listed identifiers to refer to
previously bound variables in the nearest enclosing scope excluding
globals. This is important because the default behavior for binding is
to search the local namespace first.  The statement allows
encapsulated code to rebind variables outside of the local scope
besides the global (module) scope.

Names listed in a "nonlocal" statement, unlike those listed in a
"global" statement, must refer to pre-existing bindings in an
enclosing scope (the scope in which a new binding should be created
cannot be determined unambiguously).

Names listed in a "nonlocal" statement must not collide with pre-
existing bindings in the local scope.

See also:

  **PEP 3104** - Access to Names in Outer Scopes
     The specification for the "nonlocal" statement.
znumbersu  Numeric literals
****************

There are three types of numeric literals: integers, floating point
numbers, and imaginary numbers.  There are no complex literals
(complex numbers can be formed by adding a real number and an
imaginary number).

Note that numeric literals do not include a sign; a phrase like "-1"
is actually an expression composed of the unary operator â"-"â and the
literal "1".
znumeric-typesuÊ  Emulating numeric types
***********************

The following methods can be defined to emulate numeric objects.
Methods corresponding to operations that are not supported by the
particular kind of number implemented (e.g., bitwise operations for
non-integral numbers) should be left undefined.

object.__add__(self, other)
object.__sub__(self, other)
object.__mul__(self, other)
object.__matmul__(self, other)
object.__truediv__(self, other)
object.__floordiv__(self, other)
object.__mod__(self, other)
object.__divmod__(self, other)
object.__pow__(self, other[, modulo])
object.__lshift__(self, other)
object.__rshift__(self, other)
object.__and__(self, other)
object.__xor__(self, other)
object.__or__(self, other)

   These methods are called to implement the binary arithmetic
   operations ("+", "-", "*", "@", "/", "//", "%", "divmod()",
   "pow()", "**", "<<", ">>", "&", "^", "|").  For instance, to
   evaluate the expression "x + y", where *x* is an instance of a
   class that has an "__add__()" method, "x.__add__(y)" is called.
   The "__divmod__()" method should be the equivalent to using
   "__floordiv__()" and "__mod__()"; it should not be related to
   "__truediv__()".  Note that "__pow__()" should be defined to accept
   an optional third argument if the ternary version of the built-in
   "pow()" function is to be supported.

   If one of those methods does not support the operation with the
   supplied arguments, it should return "NotImplemented".

object.__radd__(self, other)
object.__rsub__(self, other)
object.__rmul__(self, other)
object.__rmatmul__(self, other)
object.__rtruediv__(self, other)
object.__rfloordiv__(self, other)
object.__rmod__(self, other)
object.__rdivmod__(self, other)
object.__rpow__(self, other)
object.__rlshift__(self, other)
object.__rrshift__(self, other)
object.__rand__(self, other)
object.__rxor__(self, other)
object.__ror__(self, other)

   These methods are called to implement the binary arithmetic
   operations ("+", "-", "*", "@", "/", "//", "%", "divmod()",
   "pow()", "**", "<<", ">>", "&", "^", "|") with reflected (swapped)
   operands.  These functions are only called if the left operand does
   not support the corresponding operation [3] and the operands are of
   different types. [4] For instance, to evaluate the expression "x -
   y", where *y* is an instance of a class that has an "__rsub__()"
   method, "y.__rsub__(x)" is called if "x.__sub__(y)" returns
   *NotImplemented*.

   Note that ternary "pow()" will not try calling "__rpow__()" (the
   coercion rules would become too complicated).

   Note: If the right operandâs type is a subclass of the left
     operandâs type and that subclass provides the reflected method
     for the operation, this method will be called before the left
     operandâs non-reflected method.  This behavior allows subclasses
     to override their ancestorsâ operations.

object.__iadd__(self, other)
object.__isub__(self, other)
object.__imul__(self, other)
object.__imatmul__(self, other)
object.__itruediv__(self, other)
object.__ifloordiv__(self, other)
object.__imod__(self, other)
object.__ipow__(self, other[, modulo])
object.__ilshift__(self, other)
object.__irshift__(self, other)
object.__iand__(self, other)
object.__ixor__(self, other)
object.__ior__(self, other)

   These methods are called to implement the augmented arithmetic
   assignments ("+=", "-=", "*=", "@=", "/=", "//=", "%=", "**=",
   "<<=", ">>=", "&=", "^=", "|=").  These methods should attempt to
   do the operation in-place (modifying *self*) and return the result
   (which could be, but does not have to be, *self*).  If a specific
   method is not defined, the augmented assignment falls back to the
   normal methods.  For instance, if *x* is an instance of a class
   with an "__iadd__()" method, "x += y" is equivalent to "x =
   x.__iadd__(y)" . Otherwise, "x.__add__(y)" and "y.__radd__(x)" are
   considered, as with the evaluation of "x + y". In certain
   situations, augmented assignment can result in unexpected errors
   (see Why does a_tuple[i] += [âitemâ] raise an exception when the
   addition works?), but this behavior is in fact part of the data
   model.

object.__neg__(self)
object.__pos__(self)
object.__abs__(self)
object.__invert__(self)

   Called to implement the unary arithmetic operations ("-", "+",
   "abs()" and "~").

object.__complex__(self)
object.__int__(self)
object.__float__(self)

   Called to implement the built-in functions "complex()", "int()" and
   "float()".  Should return a value of the appropriate type.

object.__index__(self)

   Called to implement "operator.index()", and whenever Python needs
   to losslessly convert the numeric object to an integer object (such
   as in slicing, or in the built-in "bin()", "hex()" and "oct()"
   functions). Presence of this method indicates that the numeric
   object is an integer type.  Must return an integer.

   Note: In order to have a coherent integer type class, when
     "__index__()" is defined "__int__()" should also be defined, and
     both should return the same value.

object.__round__(self[, ndigits])
object.__trunc__(self)
object.__floor__(self)
object.__ceil__(self)

   Called to implement the built-in function "round()" and "math"
   functions "trunc()", "floor()" and "ceil()". Unless *ndigits* is
   passed to "__round__()" all these methods should return the value
   of the object truncated to an "Integral" (typically an "int").

   If "__int__()" is not defined then the built-in function "int()"
   falls back to "__trunc__()".
zobjectsu  Objects, values and types
*************************

*Objects* are Pythonâs abstraction for data.  All data in a Python
program is represented by objects or by relations between objects. (In
a sense, and in conformance to Von Neumannâs model of a âstored
program computer,â code is also represented by objects.)

Every object has an identity, a type and a value.  An objectâs
*identity* never changes once it has been created; you may think of it
as the objectâs address in memory.  The â"is"â operator compares the
identity of two objects; the "id()" function returns an integer
representing its identity.

**CPython implementation detail:** For CPython, "id(x)" is the memory
address where "x" is stored.

An objectâs type determines the operations that the object supports
(e.g., âdoes it have a length?â) and also defines the possible values
for objects of that type.  The "type()" function returns an objectâs
type (which is an object itself).  Like its identity, an objectâs
*type* is also unchangeable. [1]

The *value* of some objects can change.  Objects whose value can
change are said to be *mutable*; objects whose value is unchangeable
once they are created are called *immutable*. (The value of an
immutable container object that contains a reference to a mutable
object can change when the latterâs value is changed; however the
container is still considered immutable, because the collection of
objects it contains cannot be changed.  So, immutability is not
strictly the same as having an unchangeable value, it is more subtle.)
An objectâs mutability is determined by its type; for instance,
numbers, strings and tuples are immutable, while dictionaries and
lists are mutable.

Objects are never explicitly destroyed; however, when they become
unreachable they may be garbage-collected.  An implementation is
allowed to postpone garbage collection or omit it altogether â it is a
matter of implementation quality how garbage collection is
implemented, as long as no objects are collected that are still
reachable.

**CPython implementation detail:** CPython currently uses a reference-
counting scheme with (optional) delayed detection of cyclically linked
garbage, which collects most objects as soon as they become
unreachable, but is not guaranteed to collect garbage containing
circular references.  See the documentation of the "gc" module for
information on controlling the collection of cyclic garbage. Other
implementations act differently and CPython may change. Do not depend
on immediate finalization of objects when they become unreachable (so
you should always close files explicitly).

Note that the use of the implementationâs tracing or debugging
facilities may keep objects alive that would normally be collectable.
Also note that catching an exception with a â"try"â¦"except"â statement
may keep objects alive.

Some objects contain references to âexternalâ resources such as open
files or windows.  It is understood that these resources are freed
when the object is garbage-collected, but since garbage collection is
not guaranteed to happen, such objects also provide an explicit way to
release the external resource, usually a "close()" method. Programs
are strongly recommended to explicitly close such objects.  The
â"try"â¦"finally"â statement and the â"with"â statement provide
convenient ways to do this.

Some objects contain references to other objects; these are called
*containers*. Examples of containers are tuples, lists and
dictionaries.  The references are part of a containerâs value.  In
most cases, when we talk about the value of a container, we imply the
values, not the identities of the contained objects; however, when we
talk about the mutability of a container, only the identities of the
immediately contained objects are implied.  So, if an immutable
container (like a tuple) contains a reference to a mutable object, its
value changes if that mutable object is changed.

Types affect almost all aspects of object behavior.  Even the
importance of object identity is affected in some sense: for immutable
types, operations that compute new values may actually return a
reference to any existing object with the same type and value, while
for mutable objects this is not allowed.  E.g., after "a = 1; b = 1",
"a" and "b" may or may not refer to the same object with the value
one, depending on the implementation, but after "c = []; d = []", "c"
and "d" are guaranteed to refer to two different, unique, newly
created empty lists. (Note that "c = d = []" assigns the same object
to both "c" and "d".)
zoperator-summaryuß  Operator precedence
*******************

The following table summarizes the operator precedence in Python, from
lowest precedence (least binding) to highest precedence (most
binding).  Operators in the same box have the same precedence.  Unless
the syntax is explicitly given, operators are binary.  Operators in
the same box group left to right (except for exponentiation, which
groups from right to left).

Note that comparisons, membership tests, and identity tests, all have
the same precedence and have a left-to-right chaining feature as
described in the Comparisons section.

+-------------------------------------------------+---------------------------------------+
| Operator                                        | Description                           |
+=================================================+=======================================+
| "lambda"                                        | Lambda expression                     |
+-------------------------------------------------+---------------------------------------+
| "if" â "else"                                   | Conditional expression                |
+-------------------------------------------------+---------------------------------------+
| "or"                                            | Boolean OR                            |
+-------------------------------------------------+---------------------------------------+
| "and"                                           | Boolean AND                           |
+-------------------------------------------------+---------------------------------------+
| "not" "x"                                       | Boolean NOT                           |
+-------------------------------------------------+---------------------------------------+
| "in", "not in", "is", "is not", "<", "<=", ">", | Comparisons, including membership     |
| ">=", "!=", "=="                                | tests and identity tests              |
+-------------------------------------------------+---------------------------------------+
| "|"                                             | Bitwise OR                            |
+-------------------------------------------------+---------------------------------------+
| "^"                                             | Bitwise XOR                           |
+-------------------------------------------------+---------------------------------------+
| "&"                                             | Bitwise AND                           |
+-------------------------------------------------+---------------------------------------+
| "<<", ">>"                                      | Shifts                                |
+-------------------------------------------------+---------------------------------------+
| "+", "-"                                        | Addition and subtraction              |
+-------------------------------------------------+---------------------------------------+
| "*", "@", "/", "//", "%"                        | Multiplication, matrix                |
|                                                 | multiplication, division, floor       |
|                                                 | division, remainder [5]               |
+-------------------------------------------------+---------------------------------------+
| "+x", "-x", "~x"                                | Positive, negative, bitwise NOT       |
+-------------------------------------------------+---------------------------------------+
| "**"                                            | Exponentiation [6]                    |
+-------------------------------------------------+---------------------------------------+
| "await" "x"                                     | Await expression                      |
+-------------------------------------------------+---------------------------------------+
| "x[index]", "x[index:index]",                   | Subscription, slicing, call,          |
| "x(arguments...)", "x.attribute"                | attribute reference                   |
+-------------------------------------------------+---------------------------------------+
| "(expressions...)", "[expressions...]", "{key:  | Binding or tuple display, list        |
| value...}", "{expressions...}"                  | display, dictionary display, set      |
|                                                 | display                               |
+-------------------------------------------------+---------------------------------------+

-[ Footnotes ]-

[1] While "abs(x%y) < abs(y)" is true mathematically, for floats
    it may not be true numerically due to roundoff.  For example, and
    assuming a platform on which a Python float is an IEEE 754 double-
    precision number, in order that "-1e-100 % 1e100" have the same
    sign as "1e100", the computed result is "-1e-100 + 1e100", which
    is numerically exactly equal to "1e100".  The function
    "math.fmod()" returns a result whose sign matches the sign of the
    first argument instead, and so returns "-1e-100" in this case.
    Which approach is more appropriate depends on the application.

[2] If x is very close to an exact integer multiple of y, itâs
    possible for "x//y" to be one larger than "(x-x%y)//y" due to
    rounding.  In such cases, Python returns the latter result, in
    order to preserve that "divmod(x,y)[0] * y + x % y" be very close
    to "x".

[3] The Unicode standard distinguishes between *code points* (e.g.
    U+0041) and *abstract characters* (e.g. âLATIN CAPITAL LETTER Aâ).
    While most abstract characters in Unicode are only represented
    using one code point, there is a number of abstract characters
    that can in addition be represented using a sequence of more than
    one code point.  For example, the abstract character âLATIN
    CAPITAL LETTER C WITH CEDILLAâ can be represented as a single
    *precomposed character* at code position U+00C7, or as a sequence
    of a *base character* at code position U+0043 (LATIN CAPITAL
    LETTER C), followed by a *combining character* at code position
    U+0327 (COMBINING CEDILLA).

    The comparison operators on strings compare at the level of
    Unicode code points. This may be counter-intuitive to humans.  For
    example, ""\u00C7" == "\u0043\u0327"" is "False", even though both
    strings represent the same abstract character âLATIN CAPITAL
    LETTER C WITH CEDILLAâ.

    To compare strings at the level of abstract characters (that is,
    in a way intuitive to humans), use "unicodedata.normalize()".

[4] Due to automatic garbage-collection, free lists, and the
    dynamic nature of descriptors, you may notice seemingly unusual
    behaviour in certain uses of the "is" operator, like those
    involving comparisons between instance methods, or constants.
    Check their documentation for more info.

[5] The "%" operator is also used for string formatting; the same
    precedence applies.

[6] The power operator "**" binds less tightly than an arithmetic
    or bitwise unary operator on its right, that is, "2**-1" is "0.5".
zpassuw  The "pass" statement
********************

   pass_stmt ::= "pass"

"pass" is a null operation â when it is executed, nothing happens. It
is useful as a placeholder when a statement is required syntactically,
but no code needs to be executed, for example:

   def f(arg): pass    # a function that does nothing (yet)

   class C: pass       # a class with no methods (yet)
zpowera  The power operator
******************

The power operator binds more tightly than unary operators on its
left; it binds less tightly than unary operators on its right.  The
syntax is:

   power ::= (await_expr | primary) ["**" u_expr]

Thus, in an unparenthesized sequence of power and unary operators, the
operators are evaluated from right to left (this does not constrain
the evaluation order for the operands): "-1**2" results in "-1".

The power operator has the same semantics as the built-in "pow()"
function, when called with two arguments: it yields its left argument
raised to the power of its right argument.  The numeric arguments are
first converted to a common type, and the result is of that type.

For int operands, the result has the same type as the operands unless
the second argument is negative; in that case, all arguments are
converted to float and a float result is delivered. For example,
"10**2" returns "100", but "10**-2" returns "0.01".

Raising "0.0" to a negative power results in a "ZeroDivisionError".
Raising a negative number to a fractional power results in a "complex"
number. (In earlier versions it raised a "ValueError".)
zraiseul  The "raise" statement
*********************

   raise_stmt ::= "raise" [expression ["from" expression]]

If no expressions are present, "raise" re-raises the last exception
that was active in the current scope.  If no exception is active in
the current scope, a "RuntimeError" exception is raised indicating
that this is an error.

Otherwise, "raise" evaluates the first expression as the exception
object.  It must be either a subclass or an instance of
"BaseException". If it is a class, the exception instance will be
obtained when needed by instantiating the class with no arguments.

The *type* of the exception is the exception instanceâs class, the
*value* is the instance itself.

A traceback object is normally created automatically when an exception
is raised and attached to it as the "__traceback__" attribute, which
is writable. You can create an exception and set your own traceback in
one step using the "with_traceback()" exception method (which returns
the same exception instance, with its traceback set to its argument),
like so:

   raise Exception("foo occurred").with_traceback(tracebackobj)

The "from" clause is used for exception chaining: if given, the second
*expression* must be another exception class or instance, which will
then be attached to the raised exception as the "__cause__" attribute
(which is writable).  If the raised exception is not handled, both
exceptions will be printed:

   >>> try:
   ...     print(1 / 0)
   ... except Exception as exc:
   ...     raise RuntimeError("Something bad happened") from exc
   ...
   Traceback (most recent call last):
     File "<stdin>", line 2, in <module>
   ZeroDivisionError: division by zero

   The above exception was the direct cause of the following exception:

   Traceback (most recent call last):
     File "<stdin>", line 4, in <module>
   RuntimeError: Something bad happened

A similar mechanism works implicitly if an exception is raised inside
an exception handler or a "finally" clause: the previous exception is
then attached as the new exceptionâs "__context__" attribute:

   >>> try:
   ...     print(1 / 0)
   ... except:
   ...     raise RuntimeError("Something bad happened")
   ...
   Traceback (most recent call last):
     File "<stdin>", line 2, in <module>
   ZeroDivisionError: division by zero

   During handling of the above exception, another exception occurred:

   Traceback (most recent call last):
     File "<stdin>", line 4, in <module>
   RuntimeError: Something bad happened

Exception chaining can be explicitly suppressed by specifying "None"
in the "from" clause:

   >>> try:
   ...     print(1 / 0)
   ... except:
   ...     raise RuntimeError("Something bad happened") from None
   ...
   Traceback (most recent call last):
     File "<stdin>", line 4, in <module>
   RuntimeError: Something bad happened

Additional information on exceptions can be found in section
Exceptions, and information about handling exceptions is in section
The try statement.

Changed in version 3.3: "None" is now permitted as "Y" in "raise X
from Y".

New in version 3.3: The "__suppress_context__" attribute to suppress
automatic display of the exception context.
zreturna  The "return" statement
**********************

   return_stmt ::= "return" [expression_list]

"return" may only occur syntactically nested in a function definition,
not within a nested class definition.

If an expression list is present, it is evaluated, else "None" is
substituted.

"return" leaves the current function call with the expression list (or
"None") as return value.

When "return" passes control out of a "try" statement with a "finally"
clause, that "finally" clause is executed before really leaving the
function.

In a generator function, the "return" statement indicates that the
generator is done and will cause "StopIteration" to be raised. The
returned value (if any) is used as an argument to construct
"StopIteration" and becomes the "StopIteration.value" attribute.

In an asynchronous generator function, an empty "return" statement
indicates that the asynchronous generator is done and will cause
"StopAsyncIteration" to be raised.  A non-empty "return" statement is
a syntax error in an asynchronous generator function.
zsequence-typesuè  Emulating container types
*************************

The following methods can be defined to implement container objects.
Containers usually are sequences (such as lists or tuples) or mappings
(like dictionaries), but can represent other containers as well.  The
first set of methods is used either to emulate a sequence or to
emulate a mapping; the difference is that for a sequence, the
allowable keys should be the integers *k* for which "0 <= k < N" where
*N* is the length of the sequence, or slice objects, which define a
range of items.  It is also recommended that mappings provide the
methods "keys()", "values()", "items()", "get()", "clear()",
"setdefault()", "pop()", "popitem()", "copy()", and "update()"
behaving similar to those for Pythonâs standard dictionary objects.
The "collections.abc" module provides a "MutableMapping" abstract base
class to help create those methods from a base set of "__getitem__()",
"__setitem__()", "__delitem__()", and "keys()". Mutable sequences
should provide methods "append()", "count()", "index()", "extend()",
"insert()", "pop()", "remove()", "reverse()" and "sort()", like Python
standard list objects.  Finally, sequence types should implement
addition (meaning concatenation) and multiplication (meaning
repetition) by defining the methods "__add__()", "__radd__()",
"__iadd__()", "__mul__()", "__rmul__()" and "__imul__()" described
below; they should not define other numerical operators.  It is
recommended that both mappings and sequences implement the
"__contains__()" method to allow efficient use of the "in" operator;
for mappings, "in" should search the mappingâs keys; for sequences, it
should search through the values.  It is further recommended that both
mappings and sequences implement the "__iter__()" method to allow
efficient iteration through the container; for mappings, "__iter__()"
should be the same as "keys()"; for sequences, it should iterate
through the values.

object.__len__(self)

   Called to implement the built-in function "len()".  Should return
   the length of the object, an integer ">=" 0.  Also, an object that
   doesnât define a "__bool__()" method and whose "__len__()" method
   returns zero is considered to be false in a Boolean context.

   **CPython implementation detail:** In CPython, the length is
   required to be at most "sys.maxsize". If the length is larger than
   "sys.maxsize" some features (such as "len()") may raise
   "OverflowError".  To prevent raising "OverflowError" by truth value
   testing, an object must define a "__bool__()" method.

object.__length_hint__(self)

   Called to implement "operator.length_hint()". Should return an
   estimated length for the object (which may be greater or less than
   the actual length). The length must be an integer ">=" 0. This
   method is purely an optimization and is never required for
   correctness.

   New in version 3.4.

Note: Slicing is done exclusively with the following three methods.
  A call like

     a[1:2] = b

  is translated to

     a[slice(1, 2, None)] = b

  and so forth.  Missing slice items are always filled in with "None".

object.__getitem__(self, key)

   Called to implement evaluation of "self[key]". For sequence types,
   the accepted keys should be integers and slice objects.  Note that
   the special interpretation of negative indexes (if the class wishes
   to emulate a sequence type) is up to the "__getitem__()" method. If
   *key* is of an inappropriate type, "TypeError" may be raised; if of
   a value outside the set of indexes for the sequence (after any
   special interpretation of negative values), "IndexError" should be
   raised. For mapping types, if *key* is missing (not in the
   container), "KeyError" should be raised.

   Note: "for" loops expect that an "IndexError" will be raised for
     illegal indexes to allow proper detection of the end of the
     sequence.

object.__setitem__(self, key, value)

   Called to implement assignment to "self[key]".  Same note as for
   "__getitem__()".  This should only be implemented for mappings if
   the objects support changes to the values for keys, or if new keys
   can be added, or for sequences if elements can be replaced.  The
   same exceptions should be raised for improper *key* values as for
   the "__getitem__()" method.

object.__delitem__(self, key)

   Called to implement deletion of "self[key]".  Same note as for
   "__getitem__()".  This should only be implemented for mappings if
   the objects support removal of keys, or for sequences if elements
   can be removed from the sequence.  The same exceptions should be
   raised for improper *key* values as for the "__getitem__()" method.

object.__missing__(self, key)

   Called by "dict"."__getitem__()" to implement "self[key]" for dict
   subclasses when key is not in the dictionary.

object.__iter__(self)

   This method is called when an iterator is required for a container.
   This method should return a new iterator object that can iterate
   over all the objects in the container.  For mappings, it should
   iterate over the keys of the container.

   Iterator objects also need to implement this method; they are
   required to return themselves.  For more information on iterator
   objects, see Iterator Types.

object.__reversed__(self)

   Called (if present) by the "reversed()" built-in to implement
   reverse iteration.  It should return a new iterator object that
   iterates over all the objects in the container in reverse order.

   If the "__reversed__()" method is not provided, the "reversed()"
   built-in will fall back to using the sequence protocol ("__len__()"
   and "__getitem__()").  Objects that support the sequence protocol
   should only provide "__reversed__()" if they can provide an
   implementation that is more efficient than the one provided by
   "reversed()".

The membership test operators ("in" and "not in") are normally
implemented as an iteration through a sequence.  However, container
objects can supply the following special method with a more efficient
implementation, which also does not require the object be a sequence.

object.__contains__(self, item)

   Called to implement membership test operators.  Should return true
   if *item* is in *self*, false otherwise.  For mapping objects, this
   should consider the keys of the mapping rather than the values or
   the key-item pairs.

   For objects that donât define "__contains__()", the membership test
   first tries iteration via "__iter__()", then the old sequence
   iteration protocol via "__getitem__()", see this section in the
   language reference.
zshiftingaÖ  Shifting operations
*******************

The shifting operations have lower priority than the arithmetic
operations:

   shift_expr ::= a_expr | shift_expr ("<<" | ">>") a_expr

These operators accept integers as arguments.  They shift the first
argument to the left or right by the number of bits given by the
second argument.

A right shift by *n* bits is defined as floor division by "pow(2,n)".
A left shift by *n* bits is defined as multiplication with "pow(2,n)".
zslicingsa  Slicings
********

A slicing selects a range of items in a sequence object (e.g., a
string, tuple or list).  Slicings may be used as expressions or as
targets in assignment or "del" statements.  The syntax for a slicing:

   slicing      ::= primary "[" slice_list "]"
   slice_list   ::= slice_item ("," slice_item)* [","]
   slice_item   ::= expression | proper_slice
   proper_slice ::= [lower_bound] ":" [upper_bound] [ ":" [stride] ]
   lower_bound  ::= expression
   upper_bound  ::= expression
   stride       ::= expression

There is ambiguity in the formal syntax here: anything that looks like
an expression list also looks like a slice list, so any subscription
can be interpreted as a slicing.  Rather than further complicating the
syntax, this is disambiguated by defining that in this case the
interpretation as a subscription takes priority over the
interpretation as a slicing (this is the case if the slice list
contains no proper slice).

The semantics for a slicing are as follows.  The primary is indexed
(using the same "__getitem__()" method as normal subscription) with a
key that is constructed from the slice list, as follows.  If the slice
list contains at least one comma, the key is a tuple containing the
conversion of the slice items; otherwise, the conversion of the lone
slice item is the key.  The conversion of a slice item that is an
expression is that expression.  The conversion of a proper slice is a
slice object (see section The standard type hierarchy) whose "start",
"stop" and "step" attributes are the values of the expressions given
as lower bound, upper bound and stride, respectively, substituting
"None" for missing expressions.
zspecialattrsu~  Special Attributes
******************

The implementation adds a few special read-only attributes to several
object types, where they are relevant.  Some of these are not reported
by the "dir()" built-in function.

object.__dict__

   A dictionary or other mapping object used to store an objectâs
   (writable) attributes.

instance.__class__

   The class to which a class instance belongs.

class.__bases__

   The tuple of base classes of a class object.

definition.__name__

   The name of the class, function, method, descriptor, or generator
   instance.

definition.__qualname__

   The *qualified name* of the class, function, method, descriptor, or
   generator instance.

   New in version 3.3.

class.__mro__

   This attribute is a tuple of classes that are considered when
   looking for base classes during method resolution.

class.mro()

   This method can be overridden by a metaclass to customize the
   method resolution order for its instances.  It is called at class
   instantiation, and its result is stored in "__mro__".

class.__subclasses__()

   Each class keeps a list of weak references to its immediate
   subclasses.  This method returns a list of all those references
   still alive. Example:

      >>> int.__subclasses__()
      [<class 'bool'>]

-[ Footnotes ]-

[1] Additional information on these special methods may be found
    in the Python Reference Manual (Basic customization).

[2] As a consequence, the list "[1, 2]" is considered equal to
    "[1.0, 2.0]", and similarly for tuples.

[3] They must have since the parser canât tell the type of the
    operands.

[4] Cased characters are those with general category property
    being one of âLuâ (Letter, uppercase), âLlâ (Letter, lowercase),
    or âLtâ (Letter, titlecase).

[5] To format only a tuple you should therefore provide a
    singleton tuple whose only element is the tuple to be formatted.
zspecialnamesu Ó  Special method names
********************

A class can implement certain operations that are invoked by special
syntax (such as arithmetic operations or subscripting and slicing) by
defining methods with special names. This is Pythonâs approach to
*operator overloading*, allowing classes to define their own behavior
with respect to language operators.  For instance, if a class defines
a method named "__getitem__()", and "x" is an instance of this class,
then "x[i]" is roughly equivalent to "type(x).__getitem__(x, i)".
Except where mentioned, attempts to execute an operation raise an
exception when no appropriate method is defined (typically
"AttributeError" or "TypeError").

Setting a special method to "None" indicates that the corresponding
operation is not available.  For example, if a class sets "__iter__()"
to "None", the class is not iterable, so calling "iter()" on its
instances will raise a "TypeError" (without falling back to
"__getitem__()"). [2]

When implementing a class that emulates any built-in type, it is
important that the emulation only be implemented to the degree that it
makes sense for the object being modelled.  For example, some
sequences may work well with retrieval of individual elements, but
extracting a slice may not make sense.  (One example of this is the
"NodeList" interface in the W3Câs Document Object Model.)


Basic customization
===================

object.__new__(cls[, ...])

   Called to create a new instance of class *cls*.  "__new__()" is a
   static method (special-cased so you need not declare it as such)
   that takes the class of which an instance was requested as its
   first argument.  The remaining arguments are those passed to the
   object constructor expression (the call to the class).  The return
   value of "__new__()" should be the new object instance (usually an
   instance of *cls*).

   Typical implementations create a new instance of the class by
   invoking the superclassâs "__new__()" method using
   "super().__new__(cls[, ...])" with appropriate arguments and then
   modifying the newly-created instance as necessary before returning
   it.

   If "__new__()" returns an instance of *cls*, then the new
   instanceâs "__init__()" method will be invoked like
   "__init__(self[, ...])", where *self* is the new instance and the
   remaining arguments are the same as were passed to "__new__()".

   If "__new__()" does not return an instance of *cls*, then the new
   instanceâs "__init__()" method will not be invoked.

   "__new__()" is intended mainly to allow subclasses of immutable
   types (like int, str, or tuple) to customize instance creation.  It
   is also commonly overridden in custom metaclasses in order to
   customize class creation.

object.__init__(self[, ...])

   Called after the instance has been created (by "__new__()"), but
   before it is returned to the caller.  The arguments are those
   passed to the class constructor expression.  If a base class has an
   "__init__()" method, the derived classâs "__init__()" method, if
   any, must explicitly call it to ensure proper initialization of the
   base class part of the instance; for example:
   "super().__init__([args...])".

   Because "__new__()" and "__init__()" work together in constructing
   objects ("__new__()" to create it, and "__init__()" to customize
   it), no non-"None" value may be returned by "__init__()"; doing so
   will cause a "TypeError" to be raised at runtime.

object.__del__(self)

   Called when the instance is about to be destroyed.  This is also
   called a finalizer or (improperly) a destructor.  If a base class
   has a "__del__()" method, the derived classâs "__del__()" method,
   if any, must explicitly call it to ensure proper deletion of the
   base class part of the instance.

   It is possible (though not recommended!) for the "__del__()" method
   to postpone destruction of the instance by creating a new reference
   to it.  This is called object *resurrection*.  It is
   implementation-dependent whether "__del__()" is called a second
   time when a resurrected object is about to be destroyed; the
   current *CPython* implementation only calls it once.

   It is not guaranteed that "__del__()" methods are called for
   objects that still exist when the interpreter exits.

   Note: "del x" doesnât directly call "x.__del__()" â the former
     decrements the reference count for "x" by one, and the latter is
     only called when "x"âs reference count reaches zero.

   **CPython implementation detail:** It is possible for a reference
   cycle to prevent the reference count of an object from going to
   zero.  In this case, the cycle will be later detected and deleted
   by the *cyclic garbage collector*.  A common cause of reference
   cycles is when an exception has been caught in a local variable.
   The frameâs locals then reference the exception, which references
   its own traceback, which references the locals of all frames caught
   in the traceback.

   See also: Documentation for the "gc" module.

   Warning: Due to the precarious circumstances under which
     "__del__()" methods are invoked, exceptions that occur during
     their execution are ignored, and a warning is printed to
     "sys.stderr" instead. In particular:

     * "__del__()" can be invoked when arbitrary code is being
       executed, including from any arbitrary thread.  If "__del__()"
       needs to take a lock or invoke any other blocking resource, it
       may deadlock as the resource may already be taken by the code
       that gets interrupted to execute "__del__()".

     * "__del__()" can be executed during interpreter shutdown.  As
       a consequence, the global variables it needs to access
       (including other modules) may already have been deleted or set
       to "None". Python guarantees that globals whose name begins
       with a single underscore are deleted from their module before
       other globals are deleted; if no other references to such
       globals exist, this may help in assuring that imported modules
       are still available at the time when the "__del__()" method is
       called.

object.__repr__(self)

   Called by the "repr()" built-in function to compute the âofficialâ
   string representation of an object.  If at all possible, this
   should look like a valid Python expression that could be used to
   recreate an object with the same value (given an appropriate
   environment).  If this is not possible, a string of the form
   "<...some useful description...>" should be returned. The return
   value must be a string object. If a class defines "__repr__()" but
   not "__str__()", then "__repr__()" is also used when an âinformalâ
   string representation of instances of that class is required.

   This is typically used for debugging, so it is important that the
   representation is information-rich and unambiguous.

object.__str__(self)

   Called by "str(object)" and the built-in functions "format()" and
   "print()" to compute the âinformalâ or nicely printable string
   representation of an object.  The return value must be a string
   object.

   This method differs from "object.__repr__()" in that there is no
   expectation that "__str__()" return a valid Python expression: a
   more convenient or concise representation can be used.

   The default implementation defined by the built-in type "object"
   calls "object.__repr__()".

object.__bytes__(self)

   Called by bytes to compute a byte-string representation of an
   object. This should return a "bytes" object.

object.__format__(self, format_spec)

   Called by the "format()" built-in function, and by extension,
   evaluation of formatted string literals and the "str.format()"
   method, to produce a âformattedâ string representation of an
   object. The "format_spec" argument is a string that contains a
   description of the formatting options desired. The interpretation
   of the "format_spec" argument is up to the type implementing
   "__format__()", however most classes will either delegate
   formatting to one of the built-in types, or use a similar
   formatting option syntax.

   See Format Specification Mini-Language for a description of the
   standard formatting syntax.

   The return value must be a string object.

   Changed in version 3.4: The __format__ method of "object" itself
   raises a "TypeError" if passed any non-empty string.

   Changed in version 3.7: "object.__format__(x, '')" is now
   equivalent to "str(x)" rather than "format(str(self), '')".

object.__lt__(self, other)
object.__le__(self, other)
object.__eq__(self, other)
object.__ne__(self, other)
object.__gt__(self, other)
object.__ge__(self, other)

   These are the so-called ârich comparisonâ methods. The
   correspondence between operator symbols and method names is as
   follows: "x<y" calls "x.__lt__(y)", "x<=y" calls "x.__le__(y)",
   "x==y" calls "x.__eq__(y)", "x!=y" calls "x.__ne__(y)", "x>y" calls
   "x.__gt__(y)", and "x>=y" calls "x.__ge__(y)".

   A rich comparison method may return the singleton "NotImplemented"
   if it does not implement the operation for a given pair of
   arguments. By convention, "False" and "True" are returned for a
   successful comparison. However, these methods can return any value,
   so if the comparison operator is used in a Boolean context (e.g.,
   in the condition of an "if" statement), Python will call "bool()"
   on the value to determine if the result is true or false.

   By default, "__ne__()" delegates to "__eq__()" and inverts the
   result unless it is "NotImplemented".  There are no other implied
   relationships among the comparison operators, for example, the
   truth of "(x<y or x==y)" does not imply "x<=y". To automatically
   generate ordering operations from a single root operation, see
   "functools.total_ordering()".

   See the paragraph on "__hash__()" for some important notes on
   creating *hashable* objects which support custom comparison
   operations and are usable as dictionary keys.

   There are no swapped-argument versions of these methods (to be used
   when the left argument does not support the operation but the right
   argument does); rather, "__lt__()" and "__gt__()" are each otherâs
   reflection, "__le__()" and "__ge__()" are each otherâs reflection,
   and "__eq__()" and "__ne__()" are their own reflection. If the
   operands are of different types, and right operandâs type is a
   direct or indirect subclass of the left operandâs type, the
   reflected method of the right operand has priority, otherwise the
   left operandâs method has priority.  Virtual subclassing is not
   considered.

object.__hash__(self)

   Called by built-in function "hash()" and for operations on members
   of hashed collections including "set", "frozenset", and "dict".
   "__hash__()" should return an integer. The only required property
   is that objects which compare equal have the same hash value; it is
   advised to mix together the hash values of the components of the
   object that also play a part in comparison of objects by packing
   them into a tuple and hashing the tuple. Example:

      def __hash__(self):
          return hash((self.name, self.nick, self.color))

   Note: "hash()" truncates the value returned from an objectâs
     custom "__hash__()" method to the size of a "Py_ssize_t".  This
     is typically 8 bytes on 64-bit builds and 4 bytes on 32-bit
     builds. If an objectâs   "__hash__()" must interoperate on builds
     of different bit sizes, be sure to check the width on all
     supported builds.  An easy way to do this is with "python -c
     "import sys; print(sys.hash_info.width)"".

   If a class does not define an "__eq__()" method it should not
   define a "__hash__()" operation either; if it defines "__eq__()"
   but not "__hash__()", its instances will not be usable as items in
   hashable collections.  If a class defines mutable objects and
   implements an "__eq__()" method, it should not implement
   "__hash__()", since the implementation of hashable collections
   requires that a keyâs hash value is immutable (if the objectâs hash
   value changes, it will be in the wrong hash bucket).

   User-defined classes have "__eq__()" and "__hash__()" methods by
   default; with them, all objects compare unequal (except with
   themselves) and "x.__hash__()" returns an appropriate value such
   that "x == y" implies both that "x is y" and "hash(x) == hash(y)".

   A class that overrides "__eq__()" and does not define "__hash__()"
   will have its "__hash__()" implicitly set to "None".  When the
   "__hash__()" method of a class is "None", instances of the class
   will raise an appropriate "TypeError" when a program attempts to
   retrieve their hash value, and will also be correctly identified as
   unhashable when checking "isinstance(obj,
   collections.abc.Hashable)".

   If a class that overrides "__eq__()" needs to retain the
   implementation of "__hash__()" from a parent class, the interpreter
   must be told this explicitly by setting "__hash__ =
   <ParentClass>.__hash__".

   If a class that does not override "__eq__()" wishes to suppress
   hash support, it should include "__hash__ = None" in the class
   definition. A class which defines its own "__hash__()" that
   explicitly raises a "TypeError" would be incorrectly identified as
   hashable by an "isinstance(obj, collections.abc.Hashable)" call.

   Note: By default, the "__hash__()" values of str, bytes and
     datetime objects are âsaltedâ with an unpredictable random value.
     Although they remain constant within an individual Python
     process, they are not predictable between repeated invocations of
     Python.This is intended to provide protection against a denial-
     of-service caused by carefully-chosen inputs that exploit the
     worst case performance of a dict insertion, O(n^2) complexity.
     See http://www.ocert.org/advisories/ocert-2011-003.html for
     details.Changing hash values affects the iteration order of sets.
     Python has never made guarantees about this ordering (and it
     typically varies between 32-bit and 64-bit builds).See also
     "PYTHONHASHSEED".

   Changed in version 3.3: Hash randomization is enabled by default.

object.__bool__(self)

   Called to implement truth value testing and the built-in operation
   "bool()"; should return "False" or "True".  When this method is not
   defined, "__len__()" is called, if it is defined, and the object is
   considered true if its result is nonzero.  If a class defines
   neither "__len__()" nor "__bool__()", all its instances are
   considered true.


Customizing attribute access
============================

The following methods can be defined to customize the meaning of
attribute access (use of, assignment to, or deletion of "x.name") for
class instances.

object.__getattr__(self, name)

   Called when the default attribute access fails with an
   "AttributeError" (either "__getattribute__()" raises an
   "AttributeError" because *name* is not an instance attribute or an
   attribute in the class tree for "self"; or "__get__()" of a *name*
   property raises "AttributeError").  This method should either
   return the (computed) attribute value or raise an "AttributeError"
   exception.

   Note that if the attribute is found through the normal mechanism,
   "__getattr__()" is not called.  (This is an intentional asymmetry
   between "__getattr__()" and "__setattr__()".) This is done both for
   efficiency reasons and because otherwise "__getattr__()" would have
   no way to access other attributes of the instance.  Note that at
   least for instance variables, you can fake total control by not
   inserting any values in the instance attribute dictionary (but
   instead inserting them in another object).  See the
   "__getattribute__()" method below for a way to actually get total
   control over attribute access.

object.__getattribute__(self, name)

   Called unconditionally to implement attribute accesses for
   instances of the class. If the class also defines "__getattr__()",
   the latter will not be called unless "__getattribute__()" either
   calls it explicitly or raises an "AttributeError". This method
   should return the (computed) attribute value or raise an
   "AttributeError" exception. In order to avoid infinite recursion in
   this method, its implementation should always call the base class
   method with the same name to access any attributes it needs, for
   example, "object.__getattribute__(self, name)".

   Note: This method may still be bypassed when looking up special
     methods as the result of implicit invocation via language syntax
     or built-in functions. See Special method lookup.

object.__setattr__(self, name, value)

   Called when an attribute assignment is attempted.  This is called
   instead of the normal mechanism (i.e. store the value in the
   instance dictionary). *name* is the attribute name, *value* is the
   value to be assigned to it.

   If "__setattr__()" wants to assign to an instance attribute, it
   should call the base class method with the same name, for example,
   "object.__setattr__(self, name, value)".

object.__delattr__(self, name)

   Like "__setattr__()" but for attribute deletion instead of
   assignment.  This should only be implemented if "del obj.name" is
   meaningful for the object.

object.__dir__(self)

   Called when "dir()" is called on the object. A sequence must be
   returned. "dir()" converts the returned sequence to a list and
   sorts it.


Customizing module attribute access
-----------------------------------

Special names "__getattr__" and "__dir__" can be also used to
customize access to module attributes. The "__getattr__" function at
the module level should accept one argument which is the name of an
attribute and return the computed value or raise an "AttributeError".
If an attribute is not found on a module object through the normal
lookup, i.e. "object.__getattribute__()", then "__getattr__" is
searched in the module "__dict__" before raising an "AttributeError".
If found, it is called with the attribute name and the result is
returned.

The "__dir__" function should accept no arguments, and return a list
of strings that represents the names accessible on module. If present,
this function overrides the standard "dir()" search on a module.

For a more fine grained customization of the module behavior (setting
attributes, properties, etc.), one can set the "__class__" attribute
of a module object to a subclass of "types.ModuleType". For example:

   import sys
   from types import ModuleType

   class VerboseModule(ModuleType):
       def __repr__(self):
           return f'Verbose {self.__name__}'

       def __setattr__(self, attr, value):
           print(f'Setting {attr}...')
           super().__setattr__(attr, value)

   sys.modules[__name__].__class__ = VerboseModule

Note: Defining module "__getattr__" and setting module "__class__"
  only affect lookups made using the attribute access syntax â
  directly accessing the module globals (whether by code within the
  module, or via a reference to the moduleâs globals dictionary) is
  unaffected.

Changed in version 3.5: "__class__" module attribute is now writable.

New in version 3.7: "__getattr__" and "__dir__" module attributes.

See also:

  **PEP 562** - Module __getattr__ and __dir__
     Describes the "__getattr__" and "__dir__" functions on modules.


Implementing Descriptors
------------------------

The following methods only apply when an instance of the class
containing the method (a so-called *descriptor* class) appears in an
*owner* class (the descriptor must be in either the ownerâs class
dictionary or in the class dictionary for one of its parents).  In the
examples below, âthe attributeâ refers to the attribute whose name is
the key of the property in the owner classâ "__dict__".

object.__get__(self, instance, owner)

   Called to get the attribute of the owner class (class attribute
   access) or of an instance of that class (instance attribute
   access). *owner* is always the owner class, while *instance* is the
   instance that the attribute was accessed through, or "None" when
   the attribute is accessed through the *owner*.  This method should
   return the (computed) attribute value or raise an "AttributeError"
   exception.

object.__set__(self, instance, value)

   Called to set the attribute on an instance *instance* of the owner
   class to a new value, *value*.

object.__delete__(self, instance)

   Called to delete the attribute on an instance *instance* of the
   owner class.

object.__set_name__(self, owner, name)

   Called at the time the owning class *owner* is created. The
   descriptor has been assigned to *name*.

   New in version 3.6.

The attribute "__objclass__" is interpreted by the "inspect" module as
specifying the class where this object was defined (setting this
appropriately can assist in runtime introspection of dynamic class
attributes). For callables, it may indicate that an instance of the
given type (or a subclass) is expected or required as the first
positional argument (for example, CPython sets this attribute for
unbound methods that are implemented in C).


Invoking Descriptors
--------------------

In general, a descriptor is an object attribute with âbinding
behaviorâ, one whose attribute access has been overridden by methods
in the descriptor protocol:  "__get__()", "__set__()", and
"__delete__()". If any of those methods are defined for an object, it
is said to be a descriptor.

The default behavior for attribute access is to get, set, or delete
the attribute from an objectâs dictionary. For instance, "a.x" has a
lookup chain starting with "a.__dict__['x']", then
"type(a).__dict__['x']", and continuing through the base classes of
"type(a)" excluding metaclasses.

However, if the looked-up value is an object defining one of the
descriptor methods, then Python may override the default behavior and
invoke the descriptor method instead.  Where this occurs in the
precedence chain depends on which descriptor methods were defined and
how they were called.

The starting point for descriptor invocation is a binding, "a.x". How
the arguments are assembled depends on "a":

Direct Call
   The simplest and least common call is when user code directly
   invokes a descriptor method:    "x.__get__(a)".

Instance Binding
   If binding to an object instance, "a.x" is transformed into the
   call: "type(a).__dict__['x'].__get__(a, type(a))".

Class Binding
   If binding to a class, "A.x" is transformed into the call:
   "A.__dict__['x'].__get__(None, A)".

Super Binding
   If "a" is an instance of "super", then the binding "super(B,
   obj).m()" searches "obj.__class__.__mro__" for the base class "A"
   immediately preceding "B" and then invokes the descriptor with the
   call: "A.__dict__['m'].__get__(obj, obj.__class__)".

For instance bindings, the precedence of descriptor invocation depends
on the which descriptor methods are defined.  A descriptor can define
any combination of "__get__()", "__set__()" and "__delete__()".  If it
does not define "__get__()", then accessing the attribute will return
the descriptor object itself unless there is a value in the objectâs
instance dictionary.  If the descriptor defines "__set__()" and/or
"__delete__()", it is a data descriptor; if it defines neither, it is
a non-data descriptor.  Normally, data descriptors define both
"__get__()" and "__set__()", while non-data descriptors have just the
"__get__()" method.  Data descriptors with "__set__()" and "__get__()"
defined always override a redefinition in an instance dictionary.  In
contrast, non-data descriptors can be overridden by instances.

Python methods (including "staticmethod()" and "classmethod()") are
implemented as non-data descriptors.  Accordingly, instances can
redefine and override methods.  This allows individual instances to
acquire behaviors that differ from other instances of the same class.

The "property()" function is implemented as a data descriptor.
Accordingly, instances cannot override the behavior of a property.


__slots__
---------

*__slots__* allow us to explicitly declare data members (like
properties) and deny the creation of *__dict__* and *__weakref__*
(unless explicitly declared in *__slots__* or available in a parent.)

The space saved over using *__dict__* can be significant. Attribute
lookup speed can be significantly improved as well.

object.__slots__

   This class variable can be assigned a string, iterable, or sequence
   of strings with variable names used by instances.  *__slots__*
   reserves space for the declared variables and prevents the
   automatic creation of *__dict__* and *__weakref__* for each
   instance.


Notes on using *__slots__*
~~~~~~~~~~~~~~~~~~~~~~~~~~

* When inheriting from a class without *__slots__*, the *__dict__*
  and *__weakref__* attribute of the instances will always be
  accessible.

* Without a *__dict__* variable, instances cannot be assigned new
  variables not listed in the *__slots__* definition.  Attempts to
  assign to an unlisted variable name raises "AttributeError". If
  dynamic assignment of new variables is desired, then add
  "'__dict__'" to the sequence of strings in the *__slots__*
  declaration.

* Without a *__weakref__* variable for each instance, classes
  defining *__slots__* do not support weak references to its
  instances. If weak reference support is needed, then add
  "'__weakref__'" to the sequence of strings in the *__slots__*
  declaration.

* *__slots__* are implemented at the class level by creating
  descriptors (Implementing Descriptors) for each variable name.  As a
  result, class attributes cannot be used to set default values for
  instance variables defined by *__slots__*; otherwise, the class
  attribute would overwrite the descriptor assignment.

* The action of a *__slots__* declaration is not limited to the
  class where it is defined.  *__slots__* declared in parents are
  available in child classes. However, child subclasses will get a
  *__dict__* and *__weakref__* unless they also define *__slots__*
  (which should only contain names of any *additional* slots).

* If a class defines a slot also defined in a base class, the
  instance variable defined by the base class slot is inaccessible
  (except by retrieving its descriptor directly from the base class).
  This renders the meaning of the program undefined.  In the future, a
  check may be added to prevent this.

* Nonempty *__slots__* does not work for classes derived from
  âvariable-lengthâ built-in types such as "int", "bytes" and "tuple".

* Any non-string iterable may be assigned to *__slots__*. Mappings
  may also be used; however, in the future, special meaning may be
  assigned to the values corresponding to each key.

* *__class__* assignment works only if both classes have the same
  *__slots__*.

* Multiple inheritance with multiple slotted parent classes can be
  used, but only one parent is allowed to have attributes created by
  slots (the other bases must have empty slot layouts) - violations
  raise "TypeError".


Customizing class creation
==========================

Whenever a class inherits from another class, *__init_subclass__* is
called on that class. This way, it is possible to write classes which
change the behavior of subclasses. This is closely related to class
decorators, but where class decorators only affect the specific class
theyâre applied to, "__init_subclass__" solely applies to future
subclasses of the class defining the method.

classmethod object.__init_subclass__(cls)

   This method is called whenever the containing class is subclassed.
   *cls* is then the new subclass. If defined as a normal instance
   method, this method is implicitly converted to a class method.

   Keyword arguments which are given to a new class are passed to the
   parentâs class "__init_subclass__". For compatibility with other
   classes using "__init_subclass__", one should take out the needed
   keyword arguments and pass the others over to the base class, as
   in:

      class Philosopher:
          def __init_subclass__(cls, default_name, **kwargs):
              super().__init_subclass__(**kwargs)
              cls.default_name = default_name

      class AustralianPhilosopher(Philosopher, default_name="Bruce"):
          pass

   The default implementation "object.__init_subclass__" does nothing,
   but raises an error if it is called with any arguments.

   Note: The metaclass hint "metaclass" is consumed by the rest of
     the type machinery, and is never passed to "__init_subclass__"
     implementations. The actual metaclass (rather than the explicit
     hint) can be accessed as "type(cls)".

   New in version 3.6.


Metaclasses
-----------

By default, classes are constructed using "type()". The class body is
executed in a new namespace and the class name is bound locally to the
result of "type(name, bases, namespace)".

The class creation process can be customized by passing the
"metaclass" keyword argument in the class definition line, or by
inheriting from an existing class that included such an argument. In
the following example, both "MyClass" and "MySubclass" are instances
of "Meta":

   class Meta(type):
       pass

   class MyClass(metaclass=Meta):
       pass

   class MySubclass(MyClass):
       pass

Any other keyword arguments that are specified in the class definition
are passed through to all metaclass operations described below.

When a class definition is executed, the following steps occur:

* MRO entries are resolved

* the appropriate metaclass is determined

* the class namespace is prepared

* the class body is executed

* the class object is created


Resolving MRO entries
---------------------

If a base that appears in class definition is not an instance of
"type", then an "__mro_entries__" method is searched on it. If found,
it is called with the original bases tuple. This method must return a
tuple of classes that will be used instead of this base. The tuple may
be empty, in such case the original base is ignored.

See also: **PEP 560** - Core support for typing module and generic
  types


Determining the appropriate metaclass
-------------------------------------

The appropriate metaclass for a class definition is determined as
follows:

* if no bases and no explicit metaclass are given, then "type()" is
  used

* if an explicit metaclass is given and it is *not* an instance of
  "type()", then it is used directly as the metaclass

* if an instance of "type()" is given as the explicit metaclass, or
  bases are defined, then the most derived metaclass is used

The most derived metaclass is selected from the explicitly specified
metaclass (if any) and the metaclasses (i.e. "type(cls)") of all
specified base classes. The most derived metaclass is one which is a
subtype of *all* of these candidate metaclasses. If none of the
candidate metaclasses meets that criterion, then the class definition
will fail with "TypeError".


Preparing the class namespace
-----------------------------

Once the appropriate metaclass has been identified, then the class
namespace is prepared. If the metaclass has a "__prepare__" attribute,
it is called as "namespace = metaclass.__prepare__(name, bases,
**kwds)" (where the additional keyword arguments, if any, come from
the class definition).

If the metaclass has no "__prepare__" attribute, then the class
namespace is initialised as an empty ordered mapping.

See also:

  **PEP 3115** - Metaclasses in Python 3000
     Introduced the "__prepare__" namespace hook


Executing the class body
------------------------

The class body is executed (approximately) as "exec(body, globals(),
namespace)". The key difference from a normal call to "exec()" is that
lexical scoping allows the class body (including any methods) to
reference names from the current and outer scopes when the class
definition occurs inside a function.

However, even when the class definition occurs inside the function,
methods defined inside the class still cannot see names defined at the
class scope. Class variables must be accessed through the first
parameter of instance or class methods, or through the implicit
lexically scoped "__class__" reference described in the next section.


Creating the class object
-------------------------

Once the class namespace has been populated by executing the class
body, the class object is created by calling "metaclass(name, bases,
namespace, **kwds)" (the additional keywords passed here are the same
as those passed to "__prepare__").

This class object is the one that will be referenced by the zero-
argument form of "super()". "__class__" is an implicit closure
reference created by the compiler if any methods in a class body refer
to either "__class__" or "super". This allows the zero argument form
of "super()" to correctly identify the class being defined based on
lexical scoping, while the class or instance that was used to make the
current call is identified based on the first argument passed to the
method.

**CPython implementation detail:** In CPython 3.6 and later, the
"__class__" cell is passed to the metaclass as a "__classcell__" entry
in the class namespace. If present, this must be propagated up to the
"type.__new__" call in order for the class to be initialised
correctly. Failing to do so will result in a "DeprecationWarning" in
Python 3.6, and a "RuntimeError" in Python 3.8.

When using the default metaclass "type", or any metaclass that
ultimately calls "type.__new__", the following additional
customisation steps are invoked after creating the class object:

* first, "type.__new__" collects all of the descriptors in the class
  namespace that define a "__set_name__()" method;

* second, all of these "__set_name__" methods are called with the
  class being defined and the assigned name of that particular
  descriptor; and

* finally, the "__init_subclass__()" hook is called on the immediate
  parent of the new class in its method resolution order.

After the class object is created, it is passed to the class
decorators included in the class definition (if any) and the resulting
object is bound in the local namespace as the defined class.

When a new class is created by "type.__new__", the object provided as
the namespace parameter is copied to a new ordered mapping and the
original object is discarded. The new copy is wrapped in a read-only
proxy, which becomes the "__dict__" attribute of the class object.

See also:

  **PEP 3135** - New super
     Describes the implicit "__class__" closure reference


Uses for metaclasses
--------------------

The potential uses for metaclasses are boundless. Some ideas that have
been explored include enum, logging, interface checking, automatic
delegation, automatic property creation, proxies, frameworks, and
automatic resource locking/synchronization.


Customizing instance and subclass checks
========================================

The following methods are used to override the default behavior of the
"isinstance()" and "issubclass()" built-in functions.

In particular, the metaclass "abc.ABCMeta" implements these methods in
order to allow the addition of Abstract Base Classes (ABCs) as
âvirtual base classesâ to any class or type (including built-in
types), including other ABCs.

class.__instancecheck__(self, instance)

   Return true if *instance* should be considered a (direct or
   indirect) instance of *class*. If defined, called to implement
   "isinstance(instance, class)".

class.__subclasscheck__(self, subclass)

   Return true if *subclass* should be considered a (direct or
   indirect) subclass of *class*.  If defined, called to implement
   "issubclass(subclass, class)".

Note that these methods are looked up on the type (metaclass) of a
class.  They cannot be defined as class methods in the actual class.
This is consistent with the lookup of special methods that are called
on instances, only in this case the instance is itself a class.

See also:

  **PEP 3119** - Introducing Abstract Base Classes
     Includes the specification for customizing "isinstance()" and
     "issubclass()" behavior through "__instancecheck__()" and
     "__subclasscheck__()", with motivation for this functionality in
     the context of adding Abstract Base Classes (see the "abc"
     module) to the language.


Emulating generic types
=======================

One can implement the generic class syntax as specified by **PEP 484**
(for example "List[int]") by defining a special method

classmethod object.__class_getitem__(cls, key)

   Return an object representing the specialization of a generic class
   by type arguments found in *key*.

This method is looked up on the class object itself, and when defined
in the class body, this method is implicitly a class method.  Note,
this mechanism is primarily reserved for use with static type hints,
other usage is discouraged.

See also: **PEP 560** - Core support for typing module and generic
  types


Emulating callable objects
==========================

object.__call__(self[, args...])

   Called when the instance is âcalledâ as a function; if this method
   is defined, "x(arg1, arg2, ...)" is a shorthand for
   "x.__call__(arg1, arg2, ...)".


Emulating container types
=========================

The following methods can be defined to implement container objects.
Containers usually are sequences (such as lists or tuples) or mappings
(like dictionaries), but can represent other containers as well.  The
first set of methods is used either to emulate a sequence or to
emulate a mapping; the difference is that for a sequence, the
allowable keys should be the integers *k* for which "0 <= k < N" where
*N* is the length of the sequence, or slice objects, which define a
range of items.  It is also recommended that mappings provide the
methods "keys()", "values()", "items()", "get()", "clear()",
"setdefault()", "pop()", "popitem()", "copy()", and "update()"
behaving similar to those for Pythonâs standard dictionary objects.
The "collections.abc" module provides a "MutableMapping" abstract base
class to help create those methods from a base set of "__getitem__()",
"__setitem__()", "__delitem__()", and "keys()". Mutable sequences
should provide methods "append()", "count()", "index()", "extend()",
"insert()", "pop()", "remove()", "reverse()" and "sort()", like Python
standard list objects.  Finally, sequence types should implement
addition (meaning concatenation) and multiplication (meaning
repetition) by defining the methods "__add__()", "__radd__()",
"__iadd__()", "__mul__()", "__rmul__()" and "__imul__()" described
below; they should not define other numerical operators.  It is
recommended that both mappings and sequences implement the
"__contains__()" method to allow efficient use of the "in" operator;
for mappings, "in" should search the mappingâs keys; for sequences, it
should search through the values.  It is further recommended that both
mappings and sequences implement the "__iter__()" method to allow
efficient iteration through the container; for mappings, "__iter__()"
should be the same as "keys()"; for sequences, it should iterate
through the values.

object.__len__(self)

   Called to implement the built-in function "len()".  Should return
   the length of the object, an integer ">=" 0.  Also, an object that
   doesnât define a "__bool__()" method and whose "__len__()" method
   returns zero is considered to be false in a Boolean context.

   **CPython implementation detail:** In CPython, the length is
   required to be at most "sys.maxsize". If the length is larger than
   "sys.maxsize" some features (such as "len()") may raise
   "OverflowError".  To prevent raising "OverflowError" by truth value
   testing, an object must define a "__bool__()" method.

object.__length_hint__(self)

   Called to implement "operator.length_hint()". Should return an
   estimated length for the object (which may be greater or less than
   the actual length). The length must be an integer ">=" 0. This
   method is purely an optimization and is never required for
   correctness.

   New in version 3.4.

Note: Slicing is done exclusively with the following three methods.
  A call like

     a[1:2] = b

  is translated to

     a[slice(1, 2, None)] = b

  and so forth.  Missing slice items are always filled in with "None".

object.__getitem__(self, key)

   Called to implement evaluation of "self[key]". For sequence types,
   the accepted keys should be integers and slice objects.  Note that
   the special interpretation of negative indexes (if the class wishes
   to emulate a sequence type) is up to the "__getitem__()" method. If
   *key* is of an inappropriate type, "TypeError" may be raised; if of
   a value outside the set of indexes for the sequence (after any
   special interpretation of negative values), "IndexError" should be
   raised. For mapping types, if *key* is missing (not in the
   container), "KeyError" should be raised.

   Note: "for" loops expect that an "IndexError" will be raised for
     illegal indexes to allow proper detection of the end of the
     sequence.

object.__setitem__(self, key, value)

   Called to implement assignment to "self[key]".  Same note as for
   "__getitem__()".  This should only be implemented for mappings if
   the objects support changes to the values for keys, or if new keys
   can be added, or for sequences if elements can be replaced.  The
   same exceptions should be raised for improper *key* values as for
   the "__getitem__()" method.

object.__delitem__(self, key)

   Called to implement deletion of "self[key]".  Same note as for
   "__getitem__()".  This should only be implemented for mappings if
   the objects support removal of keys, or for sequences if elements
   can be removed from the sequence.  The same exceptions should be
   raised for improper *key* values as for the "__getitem__()" method.

object.__missing__(self, key)

   Called by "dict"."__getitem__()" to implement "self[key]" for dict
   subclasses when key is not in the dictionary.

object.__iter__(self)

   This method is called when an iterator is required for a container.
   This method should return a new iterator object that can iterate
   over all the objects in the container.  For mappings, it should
   iterate over the keys of the container.

   Iterator objects also need to implement this method; they are
   required to return themselves.  For more information on iterator
   objects, see Iterator Types.

object.__reversed__(self)

   Called (if present) by the "reversed()" built-in to implement
   reverse iteration.  It should return a new iterator object that
   iterates over all the objects in the container in reverse order.

   If the "__reversed__()" method is not provided, the "reversed()"
   built-in will fall back to using the sequence protocol ("__len__()"
   and "__getitem__()").  Objects that support the sequence protocol
   should only provide "__reversed__()" if they can provide an
   implementation that is more efficient than the one provided by
   "reversed()".

The membership test operators ("in" and "not in") are normally
implemented as an iteration through a sequence.  However, container
objects can supply the following special method with a more efficient
implementation, which also does not require the object be a sequence.

object.__contains__(self, item)

   Called to implement membership test operators.  Should return true
   if *item* is in *self*, false otherwise.  For mapping objects, this
   should consider the keys of the mapping rather than the values or
   the key-item pairs.

   For objects that donât define "__contains__()", the membership test
   first tries iteration via "__iter__()", then the old sequence
   iteration protocol via "__getitem__()", see this section in the
   language reference.


Emulating numeric types
=======================

The following methods can be defined to emulate numeric objects.
Methods corresponding to operations that are not supported by the
particular kind of number implemented (e.g., bitwise operations for
non-integral numbers) should be left undefined.

object.__add__(self, other)
object.__sub__(self, other)
object.__mul__(self, other)
object.__matmul__(self, other)
object.__truediv__(self, other)
object.__floordiv__(self, other)
object.__mod__(self, other)
object.__divmod__(self, other)
object.__pow__(self, other[, modulo])
object.__lshift__(self, other)
object.__rshift__(self, other)
object.__and__(self, other)
object.__xor__(self, other)
object.__or__(self, other)

   These methods are called to implement the binary arithmetic
   operations ("+", "-", "*", "@", "/", "//", "%", "divmod()",
   "pow()", "**", "<<", ">>", "&", "^", "|").  For instance, to
   evaluate the expression "x + y", where *x* is an instance of a
   class that has an "__add__()" method, "x.__add__(y)" is called.
   The "__divmod__()" method should be the equivalent to using
   "__floordiv__()" and "__mod__()"; it should not be related to
   "__truediv__()".  Note that "__pow__()" should be defined to accept
   an optional third argument if the ternary version of the built-in
   "pow()" function is to be supported.

   If one of those methods does not support the operation with the
   supplied arguments, it should return "NotImplemented".

object.__radd__(self, other)
object.__rsub__(self, other)
object.__rmul__(self, other)
object.__rmatmul__(self, other)
object.__rtruediv__(self, other)
object.__rfloordiv__(self, other)
object.__rmod__(self, other)
object.__rdivmod__(self, other)
object.__rpow__(self, other)
object.__rlshift__(self, other)
object.__rrshift__(self, other)
object.__rand__(self, other)
object.__rxor__(self, other)
object.__ror__(self, other)

   These methods are called to implement the binary arithmetic
   operations ("+", "-", "*", "@", "/", "//", "%", "divmod()",
   "pow()", "**", "<<", ">>", "&", "^", "|") with reflected (swapped)
   operands.  These functions are only called if the left operand does
   not support the corresponding operation [3] and the operands are of
   different types. [4] For instance, to evaluate the expression "x -
   y", where *y* is an instance of a class that has an "__rsub__()"
   method, "y.__rsub__(x)" is called if "x.__sub__(y)" returns
   *NotImplemented*.

   Note that ternary "pow()" will not try calling "__rpow__()" (the
   coercion rules would become too complicated).

   Note: If the right operandâs type is a subclass of the left
     operandâs type and that subclass provides the reflected method
     for the operation, this method will be called before the left
     operandâs non-reflected method.  This behavior allows subclasses
     to override their ancestorsâ operations.

object.__iadd__(self, other)
object.__isub__(self, other)
object.__imul__(self, other)
object.__imatmul__(self, other)
object.__itruediv__(self, other)
object.__ifloordiv__(self, other)
object.__imod__(self, other)
object.__ipow__(self, other[, modulo])
object.__ilshift__(self, other)
object.__irshift__(self, other)
object.__iand__(self, other)
object.__ixor__(self, other)
object.__ior__(self, other)

   These methods are called to implement the augmented arithmetic
   assignments ("+=", "-=", "*=", "@=", "/=", "//=", "%=", "**=",
   "<<=", ">>=", "&=", "^=", "|=").  These methods should attempt to
   do the operation in-place (modifying *self*) and return the result
   (which could be, but does not have to be, *self*).  If a specific
   method is not defined, the augmented assignment falls back to the
   normal methods.  For instance, if *x* is an instance of a class
   with an "__iadd__()" method, "x += y" is equivalent to "x =
   x.__iadd__(y)" . Otherwise, "x.__add__(y)" and "y.__radd__(x)" are
   considered, as with the evaluation of "x + y". In certain
   situations, augmented assignment can result in unexpected errors
   (see Why does a_tuple[i] += [âitemâ] raise an exception when the
   addition works?), but this behavior is in fact part of the data
   model.

object.__neg__(self)
object.__pos__(self)
object.__abs__(self)
object.__invert__(self)

   Called to implement the unary arithmetic operations ("-", "+",
   "abs()" and "~").

object.__complex__(self)
object.__int__(self)
object.__float__(self)

   Called to implement the built-in functions "complex()", "int()" and
   "float()".  Should return a value of the appropriate type.

object.__index__(self)

   Called to implement "operator.index()", and whenever Python needs
   to losslessly convert the numeric object to an integer object (such
   as in slicing, or in the built-in "bin()", "hex()" and "oct()"
   functions). Presence of this method indicates that the numeric
   object is an integer type.  Must return an integer.

   Note: In order to have a coherent integer type class, when
     "__index__()" is defined "__int__()" should also be defined, and
     both should return the same value.

object.__round__(self[, ndigits])
object.__trunc__(self)
object.__floor__(self)
object.__ceil__(self)

   Called to implement the built-in function "round()" and "math"
   functions "trunc()", "floor()" and "ceil()". Unless *ndigits* is
   passed to "__round__()" all these methods should return the value
   of the object truncated to an "Integral" (typically an "int").

   If "__int__()" is not defined then the built-in function "int()"
   falls back to "__trunc__()".


With Statement Context Managers
===============================

A *context manager* is an object that defines the runtime context to
be established when executing a "with" statement. The context manager
handles the entry into, and the exit from, the desired runtime context
for the execution of the block of code.  Context managers are normally
invoked using the "with" statement (described in section The with
statement), but can also be used by directly invoking their methods.

Typical uses of context managers include saving and restoring various
kinds of global state, locking and unlocking resources, closing opened
files, etc.

For more information on context managers, see Context Manager Types.

object.__enter__(self)

   Enter the runtime context related to this object. The "with"
   statement will bind this methodâs return value to the target(s)
   specified in the "as" clause of the statement, if any.

object.__exit__(self, exc_type, exc_value, traceback)

   Exit the runtime context related to this object. The parameters
   describe the exception that caused the context to be exited. If the
   context was exited without an exception, all three arguments will
   be "None".

   If an exception is supplied, and the method wishes to suppress the
   exception (i.e., prevent it from being propagated), it should
   return a true value. Otherwise, the exception will be processed
   normally upon exit from this method.

   Note that "__exit__()" methods should not reraise the passed-in
   exception; this is the callerâs responsibility.

See also:

  **PEP 343** - The âwithâ statement
     The specification, background, and examples for the Python "with"
     statement.


Special method lookup
=====================

For custom classes, implicit invocations of special methods are only
guaranteed to work correctly if defined on an objectâs type, not in
the objectâs instance dictionary.  That behaviour is the reason why
the following code raises an exception:

   >>> class C:
   ...     pass
   ...
   >>> c = C()
   >>> c.__len__ = lambda: 5
   >>> len(c)
   Traceback (most recent call last):
     File "<stdin>", line 1, in <module>
   TypeError: object of type 'C' has no len()

The rationale behind this behaviour lies with a number of special
methods such as "__hash__()" and "__repr__()" that are implemented by
all objects, including type objects. If the implicit lookup of these
methods used the conventional lookup process, they would fail when
invoked on the type object itself:

   >>> 1 .__hash__() == hash(1)
   True
   >>> int.__hash__() == hash(int)
   Traceback (most recent call last):
     File "<stdin>", line 1, in <module>
   TypeError: descriptor '__hash__' of 'int' object needs an argument

Incorrectly attempting to invoke an unbound method of a class in this
way is sometimes referred to as âmetaclass confusionâ, and is avoided
by bypassing the instance when looking up special methods:

   >>> type(1).__hash__(1) == hash(1)
   True
   >>> type(int).__hash__(int) == hash(int)
   True

In addition to bypassing any instance attributes in the interest of
correctness, implicit special method lookup generally also bypasses
the "__getattribute__()" method even of the objectâs metaclass:

   >>> class Meta(type):
   ...     def __getattribute__(*args):
   ...         print("Metaclass getattribute invoked")
   ...         return type.__getattribute__(*args)
   ...
   >>> class C(object, metaclass=Meta):
   ...     def __len__(self):
   ...         return 10
   ...     def __getattribute__(*args):
   ...         print("Class getattribute invoked")
   ...         return object.__getattribute__(*args)
   ...
   >>> c = C()
   >>> c.__len__()                 # Explicit lookup via instance
   Class getattribute invoked
   10
   >>> type(c).__len__(c)          # Explicit lookup via type
   Metaclass getattribute invoked
   10
   >>> len(c)                      # Implicit lookup
   10

Bypassing the "__getattribute__()" machinery in this fashion provides
significant scope for speed optimisations within the interpreter, at
the cost of some flexibility in the handling of special methods (the
special method *must* be set on the class object itself in order to be
consistently invoked by the interpreter).
zstring-methodsu	X  String Methods
**************

Strings implement all of the common sequence operations, along with
the additional methods described below.

Strings also support two styles of string formatting, one providing a
large degree of flexibility and customization (see "str.format()",
Format String Syntax and Custom String Formatting) and the other based
on C "printf" style formatting that handles a narrower range of types
and is slightly harder to use correctly, but is often faster for the
cases it can handle (printf-style String Formatting).

The Text Processing Services section of the standard library covers a
number of other modules that provide various text related utilities
(including regular expression support in the "re" module).

str.capitalize()

   Return a copy of the string with its first character capitalized
   and the rest lowercased.

str.casefold()

   Return a casefolded copy of the string. Casefolded strings may be
   used for caseless matching.

   Casefolding is similar to lowercasing but more aggressive because
   it is intended to remove all case distinctions in a string. For
   example, the German lowercase letter "'Ã'" is equivalent to ""ss"".
   Since it is already lowercase, "lower()" would do nothing to "'Ã'";
   "casefold()" converts it to ""ss"".

   The casefolding algorithm is described in section 3.13 of the
   Unicode Standard.

   New in version 3.3.

str.center(width[, fillchar])

   Return centered in a string of length *width*. Padding is done
   using the specified *fillchar* (default is an ASCII space). The
   original string is returned if *width* is less than or equal to
   "len(s)".

str.count(sub[, start[, end]])

   Return the number of non-overlapping occurrences of substring *sub*
   in the range [*start*, *end*].  Optional arguments *start* and
   *end* are interpreted as in slice notation.

str.encode(encoding="utf-8", errors="strict")

   Return an encoded version of the string as a bytes object. Default
   encoding is "'utf-8'". *errors* may be given to set a different
   error handling scheme. The default for *errors* is "'strict'",
   meaning that encoding errors raise a "UnicodeError". Other possible
   values are "'ignore'", "'replace'", "'xmlcharrefreplace'",
   "'backslashreplace'" and any other name registered via
   "codecs.register_error()", see section Error Handlers. For a list
   of possible encodings, see section Standard Encodings.

   Changed in version 3.1: Support for keyword arguments added.

str.endswith(suffix[, start[, end]])

   Return "True" if the string ends with the specified *suffix*,
   otherwise return "False".  *suffix* can also be a tuple of suffixes
   to look for.  With optional *start*, test beginning at that
   position.  With optional *end*, stop comparing at that position.

str.expandtabs(tabsize=8)

   Return a copy of the string where all tab characters are replaced
   by one or more spaces, depending on the current column and the
   given tab size.  Tab positions occur every *tabsize* characters
   (default is 8, giving tab positions at columns 0, 8, 16 and so on).
   To expand the string, the current column is set to zero and the
   string is examined character by character.  If the character is a
   tab ("\t"), one or more space characters are inserted in the result
   until the current column is equal to the next tab position. (The
   tab character itself is not copied.)  If the character is a newline
   ("\n") or return ("\r"), it is copied and the current column is
   reset to zero.  Any other character is copied unchanged and the
   current column is incremented by one regardless of how the
   character is represented when printed.

   >>> '01\t012\t0123\t01234'.expandtabs()
   '01      012     0123    01234'
   >>> '01\t012\t0123\t01234'.expandtabs(4)
   '01  012 0123    01234'

str.find(sub[, start[, end]])

   Return the lowest index in the string where substring *sub* is
   found within the slice "s[start:end]".  Optional arguments *start*
   and *end* are interpreted as in slice notation.  Return "-1" if
   *sub* is not found.

   Note: The "find()" method should be used only if you need to know
     the position of *sub*.  To check if *sub* is a substring or not,
     use the "in" operator:

        >>> 'Py' in 'Python'
        True

str.format(*args, **kwargs)

   Perform a string formatting operation.  The string on which this
   method is called can contain literal text or replacement fields
   delimited by braces "{}".  Each replacement field contains either
   the numeric index of a positional argument, or the name of a
   keyword argument.  Returns a copy of the string where each
   replacement field is replaced with the string value of the
   corresponding argument.

   >>> "The sum of 1 + 2 is {0}".format(1+2)
   'The sum of 1 + 2 is 3'

   See Format String Syntax for a description of the various
   formatting options that can be specified in format strings.

   Note: When formatting a number ("int", "float", "complex",
     "decimal.Decimal" and subclasses) with the "n" type (ex:
     "'{:n}'.format(1234)"), the function temporarily sets the
     "LC_CTYPE" locale to the "LC_NUMERIC" locale to decode
     "decimal_point" and "thousands_sep" fields of "localeconv()" if
     they are non-ASCII or longer than 1 byte, and the "LC_NUMERIC"
     locale is different than the "LC_CTYPE" locale.  This temporary
     change affects other threads.

   Changed in version 3.7: When formatting a number with the "n" type,
   the function sets temporarily the "LC_CTYPE" locale to the
   "LC_NUMERIC" locale in some cases.

str.format_map(mapping)

   Similar to "str.format(**mapping)", except that "mapping" is used
   directly and not copied to a "dict".  This is useful if for example
   "mapping" is a dict subclass:

   >>> class Default(dict):
   ...     def __missing__(self, key):
   ...         return key
   ...
   >>> '{name} was born in {country}'.format_map(Default(name='Guido'))
   'Guido was born in country'

   New in version 3.2.

str.index(sub[, start[, end]])

   Like "find()", but raise "ValueError" when the substring is not
   found.

str.isalnum()

   Return true if all characters in the string are alphanumeric and
   there is at least one character, false otherwise.  A character "c"
   is alphanumeric if one of the following returns "True":
   "c.isalpha()", "c.isdecimal()", "c.isdigit()", or "c.isnumeric()".

str.isalpha()

   Return true if all characters in the string are alphabetic and
   there is at least one character, false otherwise.  Alphabetic
   characters are those characters defined in the Unicode character
   database as âLetterâ, i.e., those with general category property
   being one of âLmâ, âLtâ, âLuâ, âLlâ, or âLoâ.  Note that this is
   different from the âAlphabeticâ property defined in the Unicode
   Standard.

str.isascii()

   Return true if the string is empty or all characters in the string
   are ASCII, false otherwise. ASCII characters have code points in
   the range U+0000-U+007F.

   New in version 3.7.

str.isdecimal()

   Return true if all characters in the string are decimal characters
   and there is at least one character, false otherwise. Decimal
   characters are those that can be used to form numbers in base 10,
   e.g. U+0660, ARABIC-INDIC DIGIT ZERO.  Formally a decimal character
   is a character in the Unicode General Category âNdâ.

str.isdigit()

   Return true if all characters in the string are digits and there is
   at least one character, false otherwise.  Digits include decimal
   characters and digits that need special handling, such as the
   compatibility superscript digits. This covers digits which cannot
   be used to form numbers in base 10, like the Kharosthi numbers.
   Formally, a digit is a character that has the property value
   Numeric_Type=Digit or Numeric_Type=Decimal.

str.isidentifier()

   Return true if the string is a valid identifier according to the
   language definition, section Identifiers and keywords.

   Use "keyword.iskeyword()" to test for reserved identifiers such as
   "def" and "class".

str.islower()

   Return true if all cased characters [4] in the string are lowercase
   and there is at least one cased character, false otherwise.

str.isnumeric()

   Return true if all characters in the string are numeric characters,
   and there is at least one character, false otherwise. Numeric
   characters include digit characters, and all characters that have
   the Unicode numeric value property, e.g. U+2155, VULGAR FRACTION
   ONE FIFTH.  Formally, numeric characters are those with the
   property value Numeric_Type=Digit, Numeric_Type=Decimal or
   Numeric_Type=Numeric.

str.isprintable()

   Return true if all characters in the string are printable or the
   string is empty, false otherwise.  Nonprintable characters are
   those characters defined in the Unicode character database as
   âOtherâ or âSeparatorâ, excepting the ASCII space (0x20) which is
   considered printable.  (Note that printable characters in this
   context are those which should not be escaped when "repr()" is
   invoked on a string.  It has no bearing on the handling of strings
   written to "sys.stdout" or "sys.stderr".)

str.isspace()

   Return true if there are only whitespace characters in the string
   and there is at least one character, false otherwise.  Whitespace
   characters  are those characters defined in the Unicode character
   database as âOtherâ or âSeparatorâ and those with bidirectional
   property being one of âWSâ, âBâ, or âSâ.

str.istitle()

   Return true if the string is a titlecased string and there is at
   least one character, for example uppercase characters may only
   follow uncased characters and lowercase characters only cased ones.
   Return false otherwise.

str.isupper()

   Return true if all cased characters [4] in the string are uppercase
   and there is at least one cased character, false otherwise.

str.join(iterable)

   Return a string which is the concatenation of the strings in
   *iterable*. A "TypeError" will be raised if there are any non-
   string values in *iterable*, including "bytes" objects.  The
   separator between elements is the string providing this method.

str.ljust(width[, fillchar])

   Return the string left justified in a string of length *width*.
   Padding is done using the specified *fillchar* (default is an ASCII
   space). The original string is returned if *width* is less than or
   equal to "len(s)".

str.lower()

   Return a copy of the string with all the cased characters [4]
   converted to lowercase.

   The lowercasing algorithm used is described in section 3.13 of the
   Unicode Standard.

str.lstrip([chars])

   Return a copy of the string with leading characters removed.  The
   *chars* argument is a string specifying the set of characters to be
   removed.  If omitted or "None", the *chars* argument defaults to
   removing whitespace.  The *chars* argument is not a prefix; rather,
   all combinations of its values are stripped:

      >>> '   spacious   '.lstrip()
      'spacious   '
      >>> 'www.example.com'.lstrip('cmowz.')
      'example.com'

static str.maketrans(x[, y[, z]])

   This static method returns a translation table usable for
   "str.translate()".

   If there is only one argument, it must be a dictionary mapping
   Unicode ordinals (integers) or characters (strings of length 1) to
   Unicode ordinals, strings (of arbitrary lengths) or "None".
   Character keys will then be converted to ordinals.

   If there are two arguments, they must be strings of equal length,
   and in the resulting dictionary, each character in x will be mapped
   to the character at the same position in y.  If there is a third
   argument, it must be a string, whose characters will be mapped to
   "None" in the result.

str.partition(sep)

   Split the string at the first occurrence of *sep*, and return a
   3-tuple containing the part before the separator, the separator
   itself, and the part after the separator.  If the separator is not
   found, return a 3-tuple containing the string itself, followed by
   two empty strings.

str.replace(old, new[, count])

   Return a copy of the string with all occurrences of substring *old*
   replaced by *new*.  If the optional argument *count* is given, only
   the first *count* occurrences are replaced.

str.rfind(sub[, start[, end]])

   Return the highest index in the string where substring *sub* is
   found, such that *sub* is contained within "s[start:end]".
   Optional arguments *start* and *end* are interpreted as in slice
   notation.  Return "-1" on failure.

str.rindex(sub[, start[, end]])

   Like "rfind()" but raises "ValueError" when the substring *sub* is
   not found.

str.rjust(width[, fillchar])

   Return the string right justified in a string of length *width*.
   Padding is done using the specified *fillchar* (default is an ASCII
   space). The original string is returned if *width* is less than or
   equal to "len(s)".

str.rpartition(sep)

   Split the string at the last occurrence of *sep*, and return a
   3-tuple containing the part before the separator, the separator
   itself, and the part after the separator.  If the separator is not
   found, return a 3-tuple containing two empty strings, followed by
   the string itself.

str.rsplit(sep=None, maxsplit=-1)

   Return a list of the words in the string, using *sep* as the
   delimiter string. If *maxsplit* is given, at most *maxsplit* splits
   are done, the *rightmost* ones.  If *sep* is not specified or
   "None", any whitespace string is a separator.  Except for splitting
   from the right, "rsplit()" behaves like "split()" which is
   described in detail below.

str.rstrip([chars])

   Return a copy of the string with trailing characters removed.  The
   *chars* argument is a string specifying the set of characters to be
   removed.  If omitted or "None", the *chars* argument defaults to
   removing whitespace.  The *chars* argument is not a suffix; rather,
   all combinations of its values are stripped:

      >>> '   spacious   '.rstrip()
      '   spacious'
      >>> 'mississippi'.rstrip('ipz')
      'mississ'

str.split(sep=None, maxsplit=-1)

   Return a list of the words in the string, using *sep* as the
   delimiter string.  If *maxsplit* is given, at most *maxsplit*
   splits are done (thus, the list will have at most "maxsplit+1"
   elements).  If *maxsplit* is not specified or "-1", then there is
   no limit on the number of splits (all possible splits are made).

   If *sep* is given, consecutive delimiters are not grouped together
   and are deemed to delimit empty strings (for example,
   "'1,,2'.split(',')" returns "['1', '', '2']").  The *sep* argument
   may consist of multiple characters (for example,
   "'1<>2<>3'.split('<>')" returns "['1', '2', '3']"). Splitting an
   empty string with a specified separator returns "['']".

   For example:

      >>> '1,2,3'.split(',')
      ['1', '2', '3']
      >>> '1,2,3'.split(',', maxsplit=1)
      ['1', '2,3']
      >>> '1,2,,3,'.split(',')
      ['1', '2', '', '3', '']

   If *sep* is not specified or is "None", a different splitting
   algorithm is applied: runs of consecutive whitespace are regarded
   as a single separator, and the result will contain no empty strings
   at the start or end if the string has leading or trailing
   whitespace.  Consequently, splitting an empty string or a string
   consisting of just whitespace with a "None" separator returns "[]".

   For example:

      >>> '1 2 3'.split()
      ['1', '2', '3']
      >>> '1 2 3'.split(maxsplit=1)
      ['1', '2 3']
      >>> '   1   2   3   '.split()
      ['1', '2', '3']

str.splitlines([keepends])

   Return a list of the lines in the string, breaking at line
   boundaries.  Line breaks are not included in the resulting list
   unless *keepends* is given and true.

   This method splits on the following line boundaries.  In
   particular, the boundaries are a superset of *universal newlines*.

   +-------------------------+-------------------------------+
   | Representation          | Description                   |
   +=========================+===============================+
   | "\n"                    | Line Feed                     |
   +-------------------------+-------------------------------+
   | "\r"                    | Carriage Return               |
   +-------------------------+-------------------------------+
   | "\r\n"                  | Carriage Return + Line Feed   |
   +-------------------------+-------------------------------+
   | "\v" or "\x0b"          | Line Tabulation               |
   +-------------------------+-------------------------------+
   | "\f" or "\x0c"          | Form Feed                     |
   +-------------------------+-------------------------------+
   | "\x1c"                  | File Separator                |
   +-------------------------+-------------------------------+
   | "\x1d"                  | Group Separator               |
   +-------------------------+-------------------------------+
   | "\x1e"                  | Record Separator              |
   +-------------------------+-------------------------------+
   | "\x85"                  | Next Line (C1 Control Code)   |
   +-------------------------+-------------------------------+
   | "\u2028"                | Line Separator                |
   +-------------------------+-------------------------------+
   | "\u2029"                | Paragraph Separator           |
   +-------------------------+-------------------------------+

   Changed in version 3.2: "\v" and "\f" added to list of line
   boundaries.

   For example:

      >>> 'ab c\n\nde fg\rkl\r\n'.splitlines()
      ['ab c', '', 'de fg', 'kl']
      >>> 'ab c\n\nde fg\rkl\r\n'.splitlines(keepends=True)
      ['ab c\n', '\n', 'de fg\r', 'kl\r\n']

   Unlike "split()" when a delimiter string *sep* is given, this
   method returns an empty list for the empty string, and a terminal
   line break does not result in an extra line:

      >>> "".splitlines()
      []
      >>> "One line\n".splitlines()
      ['One line']

   For comparison, "split('\n')" gives:

      >>> ''.split('\n')
      ['']
      >>> 'Two lines\n'.split('\n')
      ['Two lines', '']

str.startswith(prefix[, start[, end]])

   Return "True" if string starts with the *prefix*, otherwise return
   "False". *prefix* can also be a tuple of prefixes to look for.
   With optional *start*, test string beginning at that position.
   With optional *end*, stop comparing string at that position.

str.strip([chars])

   Return a copy of the string with the leading and trailing
   characters removed. The *chars* argument is a string specifying the
   set of characters to be removed. If omitted or "None", the *chars*
   argument defaults to removing whitespace. The *chars* argument is
   not a prefix or suffix; rather, all combinations of its values are
   stripped:

      >>> '   spacious   '.strip()
      'spacious'
      >>> 'www.example.com'.strip('cmowz.')
      'example'

   The outermost leading and trailing *chars* argument values are
   stripped from the string. Characters are removed from the leading
   end until reaching a string character that is not contained in the
   set of characters in *chars*. A similar action takes place on the
   trailing end. For example:

      >>> comment_string = '#....... Section 3.2.1 Issue #32 .......'
      >>> comment_string.strip('.#! ')
      'Section 3.2.1 Issue #32'

str.swapcase()

   Return a copy of the string with uppercase characters converted to
   lowercase and vice versa. Note that it is not necessarily true that
   "s.swapcase().swapcase() == s".

str.title()

   Return a titlecased version of the string where words start with an
   uppercase character and the remaining characters are lowercase.

   For example:

      >>> 'Hello world'.title()
      'Hello World'

   The algorithm uses a simple language-independent definition of a
   word as groups of consecutive letters.  The definition works in
   many contexts but it means that apostrophes in contractions and
   possessives form word boundaries, which may not be the desired
   result:

      >>> "they're bill's friends from the UK".title()
      "They'Re Bill'S Friends From The Uk"

   A workaround for apostrophes can be constructed using regular
   expressions:

      >>> import re
      >>> def titlecase(s):
      ...     return re.sub(r"[A-Za-z]+('[A-Za-z]+)?",
      ...                   lambda mo: mo.group(0)[0].upper() +
      ...                              mo.group(0)[1:].lower(),
      ...                   s)
      ...
      >>> titlecase("they're bill's friends.")
      "They're Bill's Friends."

str.translate(table)

   Return a copy of the string in which each character has been mapped
   through the given translation table.  The table must be an object
   that implements indexing via "__getitem__()", typically a *mapping*
   or *sequence*.  When indexed by a Unicode ordinal (an integer), the
   table object can do any of the following: return a Unicode ordinal
   or a string, to map the character to one or more other characters;
   return "None", to delete the character from the return string; or
   raise a "LookupError" exception, to map the character to itself.

   You can use "str.maketrans()" to create a translation map from
   character-to-character mappings in different formats.

   See also the "codecs" module for a more flexible approach to custom
   character mappings.

str.upper()

   Return a copy of the string with all the cased characters [4]
   converted to uppercase.  Note that "s.upper().isupper()" might be
   "False" if "s" contains uncased characters or if the Unicode
   category of the resulting character(s) is not âLuâ (Letter,
   uppercase), but e.g. âLtâ (Letter, titlecase).

   The uppercasing algorithm used is described in section 3.13 of the
   Unicode Standard.

str.zfill(width)

   Return a copy of the string left filled with ASCII "'0'" digits to
   make a string of length *width*. A leading sign prefix
   ("'+'"/"'-'") is handled by inserting the padding *after* the sign
   character rather than before. The original string is returned if
   *width* is less than or equal to "len(s)".

   For example:

      >>> "42".zfill(5)
      '00042'
      >>> "-42".zfill(5)
      '-0042'
zstringsuw   String and Bytes literals
*************************

String literals are described by the following lexical definitions:

   stringliteral   ::= [stringprefix](shortstring | longstring)
   stringprefix    ::= "r" | "u" | "R" | "U" | "f" | "F"
                    | "fr" | "Fr" | "fR" | "FR" | "rf" | "rF" | "Rf" | "RF"
   shortstring     ::= "'" shortstringitem* "'" | '"' shortstringitem* '"'
   longstring      ::= "'''" longstringitem* "'''" | '"""' longstringitem* '"""'
   shortstringitem ::= shortstringchar | stringescapeseq
   longstringitem  ::= longstringchar | stringescapeseq
   shortstringchar ::= <any source character except "\" or newline or the quote>
   longstringchar  ::= <any source character except "\">
   stringescapeseq ::= "\" <any source character>

   bytesliteral   ::= bytesprefix(shortbytes | longbytes)
   bytesprefix    ::= "b" | "B" | "br" | "Br" | "bR" | "BR" | "rb" | "rB" | "Rb" | "RB"
   shortbytes     ::= "'" shortbytesitem* "'" | '"' shortbytesitem* '"'
   longbytes      ::= "'''" longbytesitem* "'''" | '"""' longbytesitem* '"""'
   shortbytesitem ::= shortbyteschar | bytesescapeseq
   longbytesitem  ::= longbyteschar | bytesescapeseq
   shortbyteschar ::= <any ASCII character except "\" or newline or the quote>
   longbyteschar  ::= <any ASCII character except "\">
   bytesescapeseq ::= "\" <any ASCII character>

One syntactic restriction not indicated by these productions is that
whitespace is not allowed between the "stringprefix" or "bytesprefix"
and the rest of the literal. The source character set is defined by
the encoding declaration; it is UTF-8 if no encoding declaration is
given in the source file; see section Encoding declarations.

In plain English: Both types of literals can be enclosed in matching
single quotes ("'") or double quotes (""").  They can also be enclosed
in matching groups of three single or double quotes (these are
generally referred to as *triple-quoted strings*).  The backslash
("\") character is used to escape characters that otherwise have a
special meaning, such as newline, backslash itself, or the quote
character.

Bytes literals are always prefixed with "'b'" or "'B'"; they produce
an instance of the "bytes" type instead of the "str" type.  They may
only contain ASCII characters; bytes with a numeric value of 128 or
greater must be expressed with escapes.

Both string and bytes literals may optionally be prefixed with a
letter "'r'" or "'R'"; such strings are called *raw strings* and treat
backslashes as literal characters.  As a result, in string literals,
"'\U'" and "'\u'" escapes in raw strings are not treated specially.
Given that Python 2.xâs raw unicode literals behave differently than
Python 3.xâs the "'ur'" syntax is not supported.

New in version 3.3: The "'rb'" prefix of raw bytes literals has been
added as a synonym of "'br'".

New in version 3.3: Support for the unicode legacy literal
("u'value'") was reintroduced to simplify the maintenance of dual
Python 2.x and 3.x codebases. See **PEP 414** for more information.

A string literal with "'f'" or "'F'" in its prefix is a *formatted
string literal*; see Formatted string literals.  The "'f'" may be
combined with "'r'", but not with "'b'" or "'u'", therefore raw
formatted strings are possible, but formatted bytes literals are not.

In triple-quoted literals, unescaped newlines and quotes are allowed
(and are retained), except that three unescaped quotes in a row
terminate the literal.  (A âquoteâ is the character used to open the
literal, i.e. either "'" or """.)

Unless an "'r'" or "'R'" prefix is present, escape sequences in string
and bytes literals are interpreted according to rules similar to those
used by Standard C.  The recognized escape sequences are:

+-------------------+-----------------------------------+---------+
| Escape Sequence   | Meaning                           | Notes   |
+===================+===================================+=========+
| "\newline"        | Backslash and newline ignored     |         |
+-------------------+-----------------------------------+---------+
| "\\"              | Backslash ("\")                   |         |
+-------------------+-----------------------------------+---------+
| "\'"              | Single quote ("'")                |         |
+-------------------+-----------------------------------+---------+
| "\""              | Double quote (""")                |         |
+-------------------+-----------------------------------+---------+
| "\a"              | ASCII Bell (BEL)                  |         |
+-------------------+-----------------------------------+---------+
| "\b"              | ASCII Backspace (BS)              |         |
+-------------------+-----------------------------------+---------+
| "\f"              | ASCII Formfeed (FF)               |         |
+-------------------+-----------------------------------+---------+
| "\n"              | ASCII Linefeed (LF)               |         |
+-------------------+-----------------------------------+---------+
| "\r"              | ASCII Carriage Return (CR)        |         |
+-------------------+-----------------------------------+---------+
| "\t"              | ASCII Horizontal Tab (TAB)        |         |
+-------------------+-----------------------------------+---------+
| "\v"              | ASCII Vertical Tab (VT)           |         |
+-------------------+-----------------------------------+---------+
| "\ooo"            | Character with octal value *ooo*  | (1,3)   |
+-------------------+-----------------------------------+---------+
| "\xhh"            | Character with hex value *hh*     | (2,3)   |
+-------------------+-----------------------------------+---------+

Escape sequences only recognized in string literals are:

+-------------------+-----------------------------------+---------+
| Escape Sequence   | Meaning                           | Notes   |
+===================+===================================+=========+
| "\N{name}"        | Character named *name* in the     | (4)     |
|                   | Unicode database                  |         |
+-------------------+-----------------------------------+---------+
| "\uxxxx"          | Character with 16-bit hex value   | (5)     |
|                   | *xxxx*                            |         |
+-------------------+-----------------------------------+---------+
| "\Uxxxxxxxx"      | Character with 32-bit hex value   | (6)     |
|                   | *xxxxxxxx*                        |         |
+-------------------+-----------------------------------+---------+

Notes:

1. As in Standard C, up to three octal digits are accepted.

2. Unlike in Standard C, exactly two hex digits are required.

3. In a bytes literal, hexadecimal and octal escapes denote the
   byte with the given value. In a string literal, these escapes
   denote a Unicode character with the given value.

4. Changed in version 3.3: Support for name aliases [1] has been
   added.

5. Exactly four hex digits are required.

6. Any Unicode character can be encoded this way.  Exactly eight
   hex digits are required.

Unlike Standard C, all unrecognized escape sequences are left in the
string unchanged, i.e., *the backslash is left in the result*.  (This
behavior is useful when debugging: if an escape sequence is mistyped,
the resulting output is more easily recognized as broken.)  It is also
important to note that the escape sequences only recognized in string
literals fall into the category of unrecognized escapes for bytes
literals.

   Changed in version 3.6: Unrecognized escape sequences produce a
   DeprecationWarning.  In some future version of Python they will be
   a SyntaxError.

Even in a raw literal, quotes can be escaped with a backslash, but the
backslash remains in the result; for example, "r"\""" is a valid
string literal consisting of two characters: a backslash and a double
quote; "r"\"" is not a valid string literal (even a raw string cannot
end in an odd number of backslashes).  Specifically, *a raw literal
cannot end in a single backslash* (since the backslash would escape
the following quote character).  Note also that a single backslash
followed by a newline is interpreted as those two characters as part
of the literal, *not* as a line continuation.
zsubscriptionsuM  Subscriptions
*************

A subscription selects an item of a sequence (string, tuple or list)
or mapping (dictionary) object:

   subscription ::= primary "[" expression_list "]"

The primary must evaluate to an object that supports subscription
(lists or dictionaries for example).  User-defined objects can support
subscription by defining a "__getitem__()" method.

For built-in objects, there are two types of objects that support
subscription:

If the primary is a mapping, the expression list must evaluate to an
object whose value is one of the keys of the mapping, and the
subscription selects the value in the mapping that corresponds to that
key.  (The expression list is a tuple except if it has exactly one
item.)

If the primary is a sequence, the expression list must evaluate to an
integer or a slice (as discussed in the following section).

The formal syntax makes no special provision for negative indices in
sequences; however, built-in sequences all provide a "__getitem__()"
method that interprets negative indices by adding the length of the
sequence to the index (so that "x[-1]" selects the last item of "x").
The resulting value must be a nonnegative integer less than the number
of items in the sequence, and the subscription selects the item whose
index is that value (counting from zero). Since the support for
negative indices and slicing occurs in the objectâs "__getitem__()"
method, subclasses overriding this method will need to explicitly add
that support.

A stringâs items are characters.  A character is not a separate data
type but a string of exactly one character.
ztruthax  Truth Value Testing
*******************

Any object can be tested for truth value, for use in an "if" or
"while" condition or as operand of the Boolean operations below.

By default, an object is considered true unless its class defines
either a "__bool__()" method that returns "False" or a "__len__()"
method that returns zero, when called with the object. [1]  Here are
most of the built-in objects considered false:

* constants defined to be false: "None" and "False".

* zero of any numeric type: "0", "0.0", "0j", "Decimal(0)",
  "Fraction(0, 1)"

* empty sequences and collections: "''", "()", "[]", "{}", "set()",
  "range(0)"

Operations and built-in functions that have a Boolean result always
return "0" or "False" for false and "1" or "True" for true, unless
otherwise stated. (Important exception: the Boolean operations "or"
and "and" always return one of their operands.)
ztryu=  The "try" statement
*******************

The "try" statement specifies exception handlers and/or cleanup code
for a group of statements:

   try_stmt  ::= try1_stmt | try2_stmt
   try1_stmt ::= "try" ":" suite
                 ("except" [expression ["as" identifier]] ":" suite)+
                 ["else" ":" suite]
                 ["finally" ":" suite]
   try2_stmt ::= "try" ":" suite
                 "finally" ":" suite

The "except" clause(s) specify one or more exception handlers. When no
exception occurs in the "try" clause, no exception handler is
executed. When an exception occurs in the "try" suite, a search for an
exception handler is started.  This search inspects the except clauses
in turn until one is found that matches the exception.  An expression-
less except clause, if present, must be last; it matches any
exception.  For an except clause with an expression, that expression
is evaluated, and the clause matches the exception if the resulting
object is âcompatibleâ with the exception.  An object is compatible
with an exception if it is the class or a base class of the exception
object or a tuple containing an item compatible with the exception.

If no except clause matches the exception, the search for an exception
handler continues in the surrounding code and on the invocation stack.
[1]

If the evaluation of an expression in the header of an except clause
raises an exception, the original search for a handler is canceled and
a search starts for the new exception in the surrounding code and on
the call stack (it is treated as if the entire "try" statement raised
the exception).

When a matching except clause is found, the exception is assigned to
the target specified after the "as" keyword in that except clause, if
present, and the except clauseâs suite is executed.  All except
clauses must have an executable block.  When the end of this block is
reached, execution continues normally after the entire try statement.
(This means that if two nested handlers exist for the same exception,
and the exception occurs in the try clause of the inner handler, the
outer handler will not handle the exception.)

When an exception has been assigned using "as target", it is cleared
at the end of the except clause.  This is as if

   except E as N:
       foo

was translated to

   except E as N:
       try:
           foo
       finally:
           del N

This means the exception must be assigned to a different name to be
able to refer to it after the except clause.  Exceptions are cleared
because with the traceback attached to them, they form a reference
cycle with the stack frame, keeping all locals in that frame alive
until the next garbage collection occurs.

Before an except clauseâs suite is executed, details about the
exception are stored in the "sys" module and can be accessed via
"sys.exc_info()". "sys.exc_info()" returns a 3-tuple consisting of the
exception class, the exception instance and a traceback object (see
section The standard type hierarchy) identifying the point in the
program where the exception occurred.  "sys.exc_info()" values are
restored to their previous values (before the call) when returning
from a function that handled an exception.

The optional "else" clause is executed if the control flow leaves the
"try" suite, no exception was raised, and no "return", "continue", or
"break" statement was executed.  Exceptions in the "else" clause are
not handled by the preceding "except" clauses.

If "finally" is present, it specifies a âcleanupâ handler.  The "try"
clause is executed, including any "except" and "else" clauses.  If an
exception occurs in any of the clauses and is not handled, the
exception is temporarily saved. The "finally" clause is executed.  If
there is a saved exception it is re-raised at the end of the "finally"
clause.  If the "finally" clause raises another exception, the saved
exception is set as the context of the new exception. If the "finally"
clause executes a "return" or "break" statement, the saved exception
is discarded:

   >>> def f():
   ...     try:
   ...         1/0
   ...     finally:
   ...         return 42
   ...
   >>> f()
   42

The exception information is not available to the program during
execution of the "finally" clause.

When a "return", "break" or "continue" statement is executed in the
"try" suite of a "try"â¦"finally" statement, the "finally" clause is
also executed âon the way out.â A "continue" statement is illegal in
the "finally" clause. (The reason is a problem with the current
implementation â this restriction may be lifted in the future).

The return value of a function is determined by the last "return"
statement executed.  Since the "finally" clause always executes, a
"return" statement executed in the "finally" clause will always be the
last one executed:

   >>> def foo():
   ...     try:
   ...         return 'try'
   ...     finally:
   ...         return 'finally'
   ...
   >>> foo()
   'finally'

Additional information on exceptions can be found in section
Exceptions, and information on using the "raise" statement to generate
exceptions may be found in section The raise statement.
ztypesuì  The standard type hierarchy
***************************

Below is a list of the types that are built into Python.  Extension
modules (written in C, Java, or other languages, depending on the
implementation) can define additional types.  Future versions of
Python may add types to the type hierarchy (e.g., rational numbers,
efficiently stored arrays of integers, etc.), although such additions
will often be provided via the standard library instead.

Some of the type descriptions below contain a paragraph listing
âspecial attributes.â  These are attributes that provide access to the
implementation and are not intended for general use.  Their definition
may change in the future.

None
   This type has a single value.  There is a single object with this
   value. This object is accessed through the built-in name "None". It
   is used to signify the absence of a value in many situations, e.g.,
   it is returned from functions that donât explicitly return
   anything. Its truth value is false.

NotImplemented
   This type has a single value.  There is a single object with this
   value. This object is accessed through the built-in name
   "NotImplemented". Numeric methods and rich comparison methods
   should return this value if they do not implement the operation for
   the operands provided.  (The interpreter will then try the
   reflected operation, or some other fallback, depending on the
   operator.)  Its truth value is true.

   See Implementing the arithmetic operations for more details.

Ellipsis
   This type has a single value.  There is a single object with this
   value. This object is accessed through the literal "..." or the
   built-in name "Ellipsis".  Its truth value is true.

"numbers.Number"
   These are created by numeric literals and returned as results by
   arithmetic operators and arithmetic built-in functions.  Numeric
   objects are immutable; once created their value never changes.
   Python numbers are of course strongly related to mathematical
   numbers, but subject to the limitations of numerical representation
   in computers.

   Python distinguishes between integers, floating point numbers, and
   complex numbers:

   "numbers.Integral"
      These represent elements from the mathematical set of integers
      (positive and negative).

      There are two types of integers:

      Integers ("int")

         These represent numbers in an unlimited range, subject to
         available (virtual) memory only.  For the purpose of shift
         and mask operations, a binary representation is assumed, and
         negative numbers are represented in a variant of 2âs
         complement which gives the illusion of an infinite string of
         sign bits extending to the left.

      Booleans ("bool")
         These represent the truth values False and True.  The two
         objects representing the values "False" and "True" are the
         only Boolean objects. The Boolean type is a subtype of the
         integer type, and Boolean values behave like the values 0 and
         1, respectively, in almost all contexts, the exception being
         that when converted to a string, the strings ""False"" or
         ""True"" are returned, respectively.

      The rules for integer representation are intended to give the
      most meaningful interpretation of shift and mask operations
      involving negative integers.

   "numbers.Real" ("float")
      These represent machine-level double precision floating point
      numbers. You are at the mercy of the underlying machine
      architecture (and C or Java implementation) for the accepted
      range and handling of overflow. Python does not support single-
      precision floating point numbers; the savings in processor and
      memory usage that are usually the reason for using these are
      dwarfed by the overhead of using objects in Python, so there is
      no reason to complicate the language with two kinds of floating
      point numbers.

   "numbers.Complex" ("complex")
      These represent complex numbers as a pair of machine-level
      double precision floating point numbers.  The same caveats apply
      as for floating point numbers. The real and imaginary parts of a
      complex number "z" can be retrieved through the read-only
      attributes "z.real" and "z.imag".

Sequences
   These represent finite ordered sets indexed by non-negative
   numbers. The built-in function "len()" returns the number of items
   of a sequence. When the length of a sequence is *n*, the index set
   contains the numbers 0, 1, â¦, *n*-1.  Item *i* of sequence *a* is
   selected by "a[i]".

   Sequences also support slicing: "a[i:j]" selects all items with
   index *k* such that *i* "<=" *k* "<" *j*.  When used as an
   expression, a slice is a sequence of the same type.  This implies
   that the index set is renumbered so that it starts at 0.

   Some sequences also support âextended slicingâ with a third âstepâ
   parameter: "a[i:j:k]" selects all items of *a* with index *x* where
   "x = i + n*k", *n* ">=" "0" and *i* "<=" *x* "<" *j*.

   Sequences are distinguished according to their mutability:

   Immutable sequences
      An object of an immutable sequence type cannot change once it is
      created.  (If the object contains references to other objects,
      these other objects may be mutable and may be changed; however,
      the collection of objects directly referenced by an immutable
      object cannot change.)

      The following types are immutable sequences:

      Strings
         A string is a sequence of values that represent Unicode code
         points. All the code points in the range "U+0000 - U+10FFFF"
         can be represented in a string.  Python doesnât have a "char"
         type; instead, every code point in the string is represented
         as a string object with length "1".  The built-in function
         "ord()" converts a code point from its string form to an
         integer in the range "0 - 10FFFF"; "chr()" converts an
         integer in the range "0 - 10FFFF" to the corresponding length
         "1" string object. "str.encode()" can be used to convert a
         "str" to "bytes" using the given text encoding, and
         "bytes.decode()" can be used to achieve the opposite.

      Tuples
         The items of a tuple are arbitrary Python objects. Tuples of
         two or more items are formed by comma-separated lists of
         expressions.  A tuple of one item (a âsingletonâ) can be
         formed by affixing a comma to an expression (an expression by
         itself does not create a tuple, since parentheses must be
         usable for grouping of expressions).  An empty tuple can be
         formed by an empty pair of parentheses.

      Bytes
         A bytes object is an immutable array.  The items are 8-bit
         bytes, represented by integers in the range 0 <= x < 256.
         Bytes literals (like "b'abc'") and the built-in "bytes()"
         constructor can be used to create bytes objects.  Also, bytes
         objects can be decoded to strings via the "decode()" method.

   Mutable sequences
      Mutable sequences can be changed after they are created.  The
      subscription and slicing notations can be used as the target of
      assignment and "del" (delete) statements.

      There are currently two intrinsic mutable sequence types:

      Lists
         The items of a list are arbitrary Python objects.  Lists are
         formed by placing a comma-separated list of expressions in
         square brackets. (Note that there are no special cases needed
         to form lists of length 0 or 1.)

      Byte Arrays
         A bytearray object is a mutable array. They are created by
         the built-in "bytearray()" constructor.  Aside from being
         mutable (and hence unhashable), byte arrays otherwise provide
         the same interface and functionality as immutable "bytes"
         objects.

      The extension module "array" provides an additional example of a
      mutable sequence type, as does the "collections" module.

Set types
   These represent unordered, finite sets of unique, immutable
   objects. As such, they cannot be indexed by any subscript. However,
   they can be iterated over, and the built-in function "len()"
   returns the number of items in a set. Common uses for sets are fast
   membership testing, removing duplicates from a sequence, and
   computing mathematical operations such as intersection, union,
   difference, and symmetric difference.

   For set elements, the same immutability rules apply as for
   dictionary keys. Note that numeric types obey the normal rules for
   numeric comparison: if two numbers compare equal (e.g., "1" and
   "1.0"), only one of them can be contained in a set.

   There are currently two intrinsic set types:

   Sets
      These represent a mutable set. They are created by the built-in
      "set()" constructor and can be modified afterwards by several
      methods, such as "add()".

   Frozen sets
      These represent an immutable set.  They are created by the
      built-in "frozenset()" constructor.  As a frozenset is immutable
      and *hashable*, it can be used again as an element of another
      set, or as a dictionary key.

Mappings
   These represent finite sets of objects indexed by arbitrary index
   sets. The subscript notation "a[k]" selects the item indexed by "k"
   from the mapping "a"; this can be used in expressions and as the
   target of assignments or "del" statements. The built-in function
   "len()" returns the number of items in a mapping.

   There is currently a single intrinsic mapping type:

   Dictionaries
      These represent finite sets of objects indexed by nearly
      arbitrary values.  The only types of values not acceptable as
      keys are values containing lists or dictionaries or other
      mutable types that are compared by value rather than by object
      identity, the reason being that the efficient implementation of
      dictionaries requires a keyâs hash value to remain constant.
      Numeric types used for keys obey the normal rules for numeric
      comparison: if two numbers compare equal (e.g., "1" and "1.0")
      then they can be used interchangeably to index the same
      dictionary entry.

      Dictionaries are mutable; they can be created by the "{...}"
      notation (see section Dictionary displays).

      The extension modules "dbm.ndbm" and "dbm.gnu" provide
      additional examples of mapping types, as does the "collections"
      module.

Callable types
   These are the types to which the function call operation (see
   section Calls) can be applied:

   User-defined functions
      A user-defined function object is created by a function
      definition (see section Function definitions).  It should be
      called with an argument list containing the same number of items
      as the functionâs formal parameter list.

      Special attributes:

      +---------------------------+---------------------------------+-------------+
      | Attribute                 | Meaning                         |             |
      +===========================+=================================+=============+
      | "__doc__"                 | The functionâs documentation    | Writable    |
      |                           | string, or "None" if            |             |
      |                           | unavailable; not inherited by   |             |
      |                           | subclasses                      |             |
      +---------------------------+---------------------------------+-------------+
      | "__name__"                | The functionâs name             | Writable    |
      +---------------------------+---------------------------------+-------------+
      | "__qualname__"            | The functionâs *qualified name* | Writable    |
      |                           | New in version 3.3.             |             |
      +---------------------------+---------------------------------+-------------+
      | "__module__"              | The name of the module the      | Writable    |
      |                           | function was defined in, or     |             |
      |                           | "None" if unavailable.          |             |
      +---------------------------+---------------------------------+-------------+
      | "__defaults__"            | A tuple containing default      | Writable    |
      |                           | argument values for those       |             |
      |                           | arguments that have defaults,   |             |
      |                           | or "None" if no arguments have  |             |
      |                           | a default value                 |             |
      +---------------------------+---------------------------------+-------------+
      | "__code__"                | The code object representing    | Writable    |
      |                           | the compiled function body.     |             |
      +---------------------------+---------------------------------+-------------+
      | "__globals__"             | A reference to the dictionary   | Read-only   |
      |                           | that holds the functionâs       |             |
      |                           | global variables â the global   |             |
      |                           | namespace of the module in      |             |
      |                           | which the function was defined. |             |
      +---------------------------+---------------------------------+-------------+
      | "__dict__"                | The namespace supporting        | Writable    |
      |                           | arbitrary function attributes.  |             |
      +---------------------------+---------------------------------+-------------+
      | "__closure__"             | "None" or a tuple of cells that | Read-only   |
      |                           | contain bindings for the        |             |
      |                           | functionâs free variables. See  |             |
      |                           | below for information on the    |             |
      |                           | "cell_contents" attribute.      |             |
      +---------------------------+---------------------------------+-------------+
      | "__annotations__"         | A dict containing annotations   | Writable    |
      |                           | of parameters.  The keys of the |             |
      |                           | dict are the parameter names,   |             |
      |                           | and "'return'" for the return   |             |
      |                           | annotation, if provided.        |             |
      +---------------------------+---------------------------------+-------------+
      | "__kwdefaults__"          | A dict containing defaults for  | Writable    |
      |                           | keyword-only parameters.        |             |
      +---------------------------+---------------------------------+-------------+

      Most of the attributes labelled âWritableâ check the type of the
      assigned value.

      Function objects also support getting and setting arbitrary
      attributes, which can be used, for example, to attach metadata
      to functions.  Regular attribute dot-notation is used to get and
      set such attributes. *Note that the current implementation only
      supports function attributes on user-defined functions. Function
      attributes on built-in functions may be supported in the
      future.*

      A cell object has the attribute "cell_contents". This can be
      used to get the value of the cell, as well as set the value.

      Additional information about a functionâs definition can be
      retrieved from its code object; see the description of internal
      types below.

   Instance methods
      An instance method object combines a class, a class instance and
      any callable object (normally a user-defined function).

      Special read-only attributes: "__self__" is the class instance
      object, "__func__" is the function object; "__doc__" is the
      methodâs documentation (same as "__func__.__doc__"); "__name__"
      is the method name (same as "__func__.__name__"); "__module__"
      is the name of the module the method was defined in, or "None"
      if unavailable.

      Methods also support accessing (but not setting) the arbitrary
      function attributes on the underlying function object.

      User-defined method objects may be created when getting an
      attribute of a class (perhaps via an instance of that class), if
      that attribute is a user-defined function object or a class
      method object.

      When an instance method object is created by retrieving a user-
      defined function object from a class via one of its instances,
      its "__self__" attribute is the instance, and the method object
      is said to be bound.  The new methodâs "__func__" attribute is
      the original function object.

      When a user-defined method object is created by retrieving
      another method object from a class or instance, the behaviour is
      the same as for a function object, except that the "__func__"
      attribute of the new instance is not the original method object
      but its "__func__" attribute.

      When an instance method object is created by retrieving a class
      method object from a class or instance, its "__self__" attribute
      is the class itself, and its "__func__" attribute is the
      function object underlying the class method.

      When an instance method object is called, the underlying
      function ("__func__") is called, inserting the class instance
      ("__self__") in front of the argument list.  For instance, when
      "C" is a class which contains a definition for a function "f()",
      and "x" is an instance of "C", calling "x.f(1)" is equivalent to
      calling "C.f(x, 1)".

      When an instance method object is derived from a class method
      object, the âclass instanceâ stored in "__self__" will actually
      be the class itself, so that calling either "x.f(1)" or "C.f(1)"
      is equivalent to calling "f(C,1)" where "f" is the underlying
      function.

      Note that the transformation from function object to instance
      method object happens each time the attribute is retrieved from
      the instance.  In some cases, a fruitful optimization is to
      assign the attribute to a local variable and call that local
      variable. Also notice that this transformation only happens for
      user-defined functions; other callable objects (and all non-
      callable objects) are retrieved without transformation.  It is
      also important to note that user-defined functions which are
      attributes of a class instance are not converted to bound
      methods; this *only* happens when the function is an attribute
      of the class.

   Generator functions
      A function or method which uses the "yield" statement (see
      section The yield statement) is called a *generator function*.
      Such a function, when called, always returns an iterator object
      which can be used to execute the body of the function:  calling
      the iteratorâs "iterator.__next__()" method will cause the
      function to execute until it provides a value using the "yield"
      statement.  When the function executes a "return" statement or
      falls off the end, a "StopIteration" exception is raised and the
      iterator will have reached the end of the set of values to be
      returned.

   Coroutine functions
      A function or method which is defined using "async def" is
      called a *coroutine function*.  Such a function, when called,
      returns a *coroutine* object.  It may contain "await"
      expressions, as well as "async with" and "async for" statements.
      See also the Coroutine Objects section.

   Asynchronous generator functions
      A function or method which is defined using "async def" and
      which uses the "yield" statement is called a *asynchronous
      generator function*.  Such a function, when called, returns an
      asynchronous iterator object which can be used in an "async for"
      statement to execute the body of the function.

      Calling the asynchronous iteratorâs "aiterator.__anext__()"
      method will return an *awaitable* which when awaited will
      execute until it provides a value using the "yield" expression.
      When the function executes an empty "return" statement or falls
      off the end, a "StopAsyncIteration" exception is raised and the
      asynchronous iterator will have reached the end of the set of
      values to be yielded.

   Built-in functions
      A built-in function object is a wrapper around a C function.
      Examples of built-in functions are "len()" and "math.sin()"
      ("math" is a standard built-in module). The number and type of
      the arguments are determined by the C function. Special read-
      only attributes: "__doc__" is the functionâs documentation
      string, or "None" if unavailable; "__name__" is the functionâs
      name; "__self__" is set to "None" (but see the next item);
      "__module__" is the name of the module the function was defined
      in or "None" if unavailable.

   Built-in methods
      This is really a different disguise of a built-in function, this
      time containing an object passed to the C function as an
      implicit extra argument.  An example of a built-in method is
      "alist.append()", assuming *alist* is a list object. In this
      case, the special read-only attribute "__self__" is set to the
      object denoted by *alist*.

   Classes
      Classes are callable.  These objects normally act as factories
      for new instances of themselves, but variations are possible for
      class types that override "__new__()".  The arguments of the
      call are passed to "__new__()" and, in the typical case, to
      "__init__()" to initialize the new instance.

   Class Instances
      Instances of arbitrary classes can be made callable by defining
      a "__call__()" method in their class.

Modules
   Modules are a basic organizational unit of Python code, and are
   created by the import system as invoked either by the "import"
   statement, or by calling functions such as
   "importlib.import_module()" and built-in "__import__()".  A module
   object has a namespace implemented by a dictionary object (this is
   the dictionary referenced by the "__globals__" attribute of
   functions defined in the module).  Attribute references are
   translated to lookups in this dictionary, e.g., "m.x" is equivalent
   to "m.__dict__["x"]". A module object does not contain the code
   object used to initialize the module (since it isnât needed once
   the initialization is done).

   Attribute assignment updates the moduleâs namespace dictionary,
   e.g., "m.x = 1" is equivalent to "m.__dict__["x"] = 1".

   Predefined (writable) attributes: "__name__" is the moduleâs name;
   "__doc__" is the moduleâs documentation string, or "None" if
   unavailable; "__annotations__" (optional) is a dictionary
   containing *variable annotations* collected during module body
   execution; "__file__" is the pathname of the file from which the
   module was loaded, if it was loaded from a file. The "__file__"
   attribute may be missing for certain types of modules, such as C
   modules that are statically linked into the interpreter; for
   extension modules loaded dynamically from a shared library, it is
   the pathname of the shared library file.

   Special read-only attribute: "__dict__" is the moduleâs namespace
   as a dictionary object.

   **CPython implementation detail:** Because of the way CPython
   clears module dictionaries, the module dictionary will be cleared
   when the module falls out of scope even if the dictionary still has
   live references.  To avoid this, copy the dictionary or keep the
   module around while using its dictionary directly.

Custom classes
   Custom class types are typically created by class definitions (see
   section Class definitions).  A class has a namespace implemented by
   a dictionary object. Class attribute references are translated to
   lookups in this dictionary, e.g., "C.x" is translated to
   "C.__dict__["x"]" (although there are a number of hooks which allow
   for other means of locating attributes). When the attribute name is
   not found there, the attribute search continues in the base
   classes. This search of the base classes uses the C3 method
   resolution order which behaves correctly even in the presence of
   âdiamondâ inheritance structures where there are multiple
   inheritance paths leading back to a common ancestor. Additional
   details on the C3 MRO used by Python can be found in the
   documentation accompanying the 2.3 release at
   https://www.python.org/download/releases/2.3/mro/.

   When a class attribute reference (for class "C", say) would yield a
   class method object, it is transformed into an instance method
   object whose "__self__" attribute is "C".  When it would yield a
   static method object, it is transformed into the object wrapped by
   the static method object. See section Implementing Descriptors for
   another way in which attributes retrieved from a class may differ
   from those actually contained in its "__dict__".

   Class attribute assignments update the classâs dictionary, never
   the dictionary of a base class.

   A class object can be called (see above) to yield a class instance
   (see below).

   Special attributes: "__name__" is the class name; "__module__" is
   the module name in which the class was defined; "__dict__" is the
   dictionary containing the classâs namespace; "__bases__" is a tuple
   containing the base classes, in the order of their occurrence in
   the base class list; "__doc__" is the classâs documentation string,
   or "None" if undefined; "__annotations__" (optional) is a
   dictionary containing *variable annotations* collected during class
   body execution.

Class instances
   A class instance is created by calling a class object (see above).
   A class instance has a namespace implemented as a dictionary which
   is the first place in which attribute references are searched.
   When an attribute is not found there, and the instanceâs class has
   an attribute by that name, the search continues with the class
   attributes.  If a class attribute is found that is a user-defined
   function object, it is transformed into an instance method object
   whose "__self__" attribute is the instance.  Static method and
   class method objects are also transformed; see above under
   âClassesâ.  See section Implementing Descriptors for another way in
   which attributes of a class retrieved via its instances may differ
   from the objects actually stored in the classâs "__dict__".  If no
   class attribute is found, and the objectâs class has a
   "__getattr__()" method, that is called to satisfy the lookup.

   Attribute assignments and deletions update the instanceâs
   dictionary, never a classâs dictionary.  If the class has a
   "__setattr__()" or "__delattr__()" method, this is called instead
   of updating the instance dictionary directly.

   Class instances can pretend to be numbers, sequences, or mappings
   if they have methods with certain special names.  See section
   Special method names.

   Special attributes: "__dict__" is the attribute dictionary;
   "__class__" is the instanceâs class.

I/O objects (also known as file objects)
   A *file object* represents an open file.  Various shortcuts are
   available to create file objects: the "open()" built-in function,
   and also "os.popen()", "os.fdopen()", and the "makefile()" method
   of socket objects (and perhaps by other functions or methods
   provided by extension modules).

   The objects "sys.stdin", "sys.stdout" and "sys.stderr" are
   initialized to file objects corresponding to the interpreterâs
   standard input, output and error streams; they are all open in text
   mode and therefore follow the interface defined by the
   "io.TextIOBase" abstract class.

Internal types
   A few types used internally by the interpreter are exposed to the
   user. Their definitions may change with future versions of the
   interpreter, but they are mentioned here for completeness.

   Code objects
      Code objects represent *byte-compiled* executable Python code,
      or *bytecode*. The difference between a code object and a
      function object is that the function object contains an explicit
      reference to the functionâs globals (the module in which it was
      defined), while a code object contains no context; also the
      default argument values are stored in the function object, not
      in the code object (because they represent values calculated at
      run-time).  Unlike function objects, code objects are immutable
      and contain no references (directly or indirectly) to mutable
      objects.

      Special read-only attributes: "co_name" gives the function name;
      "co_argcount" is the number of positional arguments (including
      arguments with default values); "co_nlocals" is the number of
      local variables used by the function (including arguments);
      "co_varnames" is a tuple containing the names of the local
      variables (starting with the argument names); "co_cellvars" is a
      tuple containing the names of local variables that are
      referenced by nested functions; "co_freevars" is a tuple
      containing the names of free variables; "co_code" is a string
      representing the sequence of bytecode instructions; "co_consts"
      is a tuple containing the literals used by the bytecode;
      "co_names" is a tuple containing the names used by the bytecode;
      "co_filename" is the filename from which the code was compiled;
      "co_firstlineno" is the first line number of the function;
      "co_lnotab" is a string encoding the mapping from bytecode
      offsets to line numbers (for details see the source code of the
      interpreter); "co_stacksize" is the required stack size
      (including local variables); "co_flags" is an integer encoding a
      number of flags for the interpreter.

      The following flag bits are defined for "co_flags": bit "0x04"
      is set if the function uses the "*arguments" syntax to accept an
      arbitrary number of positional arguments; bit "0x08" is set if
      the function uses the "**keywords" syntax to accept arbitrary
      keyword arguments; bit "0x20" is set if the function is a
      generator.

      Future feature declarations ("from __future__ import division")
      also use bits in "co_flags" to indicate whether a code object
      was compiled with a particular feature enabled: bit "0x2000" is
      set if the function was compiled with future division enabled;
      bits "0x10" and "0x1000" were used in earlier versions of
      Python.

      Other bits in "co_flags" are reserved for internal use.

      If a code object represents a function, the first item in
      "co_consts" is the documentation string of the function, or
      "None" if undefined.

   Frame objects
      Frame objects represent execution frames.  They may occur in
      traceback objects (see below), and are also passed to registered
      trace functions.

      Special read-only attributes: "f_back" is to the previous stack
      frame (towards the caller), or "None" if this is the bottom
      stack frame; "f_code" is the code object being executed in this
      frame; "f_locals" is the dictionary used to look up local
      variables; "f_globals" is used for global variables;
      "f_builtins" is used for built-in (intrinsic) names; "f_lasti"
      gives the precise instruction (this is an index into the
      bytecode string of the code object).

      Special writable attributes: "f_trace", if not "None", is a
      function called for various events during code execution (this
      is used by the debugger). Normally an event is triggered for
      each new source line - this can be disabled by setting
      "f_trace_lines" to "False".

      Implementations *may* allow per-opcode events to be requested by
      setting "f_trace_opcodes" to "True". Note that this may lead to
      undefined interpreter behaviour if exceptions raised by the
      trace function escape to the function being traced.

      "f_lineno" is the current line number of the frame â writing to
      this from within a trace function jumps to the given line (only
      for the bottom-most frame).  A debugger can implement a Jump
      command (aka Set Next Statement) by writing to f_lineno.

      Frame objects support one method:

      frame.clear()

         This method clears all references to local variables held by
         the frame.  Also, if the frame belonged to a generator, the
         generator is finalized.  This helps break reference cycles
         involving frame objects (for example when catching an
         exception and storing its traceback for later use).

         "RuntimeError" is raised if the frame is currently executing.

         New in version 3.4.

   Traceback objects
      Traceback objects represent a stack trace of an exception.  A
      traceback object is implicitly created when an exception occurs,
      and may also be explicitly created by calling
      "types.TracebackType".

      For implicitly created tracebacks, when the search for an
      exception handler unwinds the execution stack, at each unwound
      level a traceback object is inserted in front of the current
      traceback.  When an exception handler is entered, the stack
      trace is made available to the program. (See section The try
      statement.) It is accessible as the third item of the tuple
      returned by "sys.exc_info()", and as the "__traceback__"
      attribute of the caught exception.

      When the program contains no suitable handler, the stack trace
      is written (nicely formatted) to the standard error stream; if
      the interpreter is interactive, it is also made available to the
      user as "sys.last_traceback".

      For explicitly created tracebacks, it is up to the creator of
      the traceback to determine how the "tb_next" attributes should
      be linked to form a full stack trace.

      Special read-only attributes: "tb_frame" points to the execution
      frame of the current level; "tb_lineno" gives the line number
      where the exception occurred; "tb_lasti" indicates the precise
      instruction. The line number and last instruction in the
      traceback may differ from the line number of its frame object if
      the exception occurred in a "try" statement with no matching
      except clause or with a finally clause.

      Special writable attribute: "tb_next" is the next level in the
      stack trace (towards the frame where the exception occurred), or
      "None" if there is no next level.

      Changed in version 3.7: Traceback objects can now be explicitly
      instantiated from Python code, and the "tb_next" attribute of
      existing instances can be updated.

   Slice objects
      Slice objects are used to represent slices for "__getitem__()"
      methods.  They are also created by the built-in "slice()"
      function.

      Special read-only attributes: "start" is the lower bound; "stop"
      is the upper bound; "step" is the step value; each is "None" if
      omitted.  These attributes can have any type.

      Slice objects support one method:

      slice.indices(self, length)

         This method takes a single integer argument *length* and
         computes information about the slice that the slice object
         would describe if applied to a sequence of *length* items.
         It returns a tuple of three integers; respectively these are
         the *start* and *stop* indices and the *step* or stride
         length of the slice. Missing or out-of-bounds indices are
         handled in a manner consistent with regular slices.

   Static method objects
      Static method objects provide a way of defeating the
      transformation of function objects to method objects described
      above. A static method object is a wrapper around any other
      object, usually a user-defined method object. When a static
      method object is retrieved from a class or a class instance, the
      object actually returned is the wrapped object, which is not
      subject to any further transformation. Static method objects are
      not themselves callable, although the objects they wrap usually
      are. Static method objects are created by the built-in
      "staticmethod()" constructor.

   Class method objects
      A class method object, like a static method object, is a wrapper
      around another object that alters the way in which that object
      is retrieved from classes and class instances. The behaviour of
      class method objects upon such retrieval is described above,
      under âUser-defined methodsâ. Class method objects are created
      by the built-in "classmethod()" constructor.
ztypesfunctionsa¬  Functions
*********

Function objects are created by function definitions.  The only
operation on a function object is to call it: "func(argument-list)".

There are really two flavors of function objects: built-in functions
and user-defined functions.  Both support the same operation (to call
the function), but the implementation is different, hence the
different object types.

See Function definitions for more information.
ztypesmappingu'  Mapping Types â "dict"
**********************

A *mapping* object maps *hashable* values to arbitrary objects.
Mappings are mutable objects.  There is currently only one standard
mapping type, the *dictionary*.  (For other containers see the built-
in "list", "set", and "tuple" classes, and the "collections" module.)

A dictionaryâs keys are *almost* arbitrary values.  Values that are
not *hashable*, that is, values containing lists, dictionaries or
other mutable types (that are compared by value rather than by object
identity) may not be used as keys.  Numeric types used for keys obey
the normal rules for numeric comparison: if two numbers compare equal
(such as "1" and "1.0") then they can be used interchangeably to index
the same dictionary entry.  (Note however, that since computers store
floating-point numbers as approximations it is usually unwise to use
them as dictionary keys.)

Dictionaries can be created by placing a comma-separated list of "key:
value" pairs within braces, for example: "{'jack': 4098, 'sjoerd':
4127}" or "{4098: 'jack', 4127: 'sjoerd'}", or by the "dict"
constructor.

class dict(**kwarg)
class dict(mapping, **kwarg)
class dict(iterable, **kwarg)

   Return a new dictionary initialized from an optional positional
   argument and a possibly empty set of keyword arguments.

   If no positional argument is given, an empty dictionary is created.
   If a positional argument is given and it is a mapping object, a
   dictionary is created with the same key-value pairs as the mapping
   object.  Otherwise, the positional argument must be an *iterable*
   object.  Each item in the iterable must itself be an iterable with
   exactly two objects.  The first object of each item becomes a key
   in the new dictionary, and the second object the corresponding
   value.  If a key occurs more than once, the last value for that key
   becomes the corresponding value in the new dictionary.

   If keyword arguments are given, the keyword arguments and their
   values are added to the dictionary created from the positional
   argument.  If a key being added is already present, the value from
   the keyword argument replaces the value from the positional
   argument.

   To illustrate, the following examples all return a dictionary equal
   to "{"one": 1, "two": 2, "three": 3}":

      >>> a = dict(one=1, two=2, three=3)
      >>> b = {'one': 1, 'two': 2, 'three': 3}
      >>> c = dict(zip(['one', 'two', 'three'], [1, 2, 3]))
      >>> d = dict([('two', 2), ('one', 1), ('three', 3)])
      >>> e = dict({'three': 3, 'one': 1, 'two': 2})
      >>> a == b == c == d == e
      True

   Providing keyword arguments as in the first example only works for
   keys that are valid Python identifiers.  Otherwise, any valid keys
   can be used.

   These are the operations that dictionaries support (and therefore,
   custom mapping types should support too):

   len(d)

      Return the number of items in the dictionary *d*.

   d[key]

      Return the item of *d* with key *key*.  Raises a "KeyError" if
      *key* is not in the map.

      If a subclass of dict defines a method "__missing__()" and *key*
      is not present, the "d[key]" operation calls that method with
      the key *key* as argument.  The "d[key]" operation then returns
      or raises whatever is returned or raised by the
      "__missing__(key)" call. No other operations or methods invoke
      "__missing__()". If "__missing__()" is not defined, "KeyError"
      is raised. "__missing__()" must be a method; it cannot be an
      instance variable:

         >>> class Counter(dict):
         ...     def __missing__(self, key):
         ...         return 0
         >>> c = Counter()
         >>> c['red']
         0
         >>> c['red'] += 1
         >>> c['red']
         1

      The example above shows part of the implementation of
      "collections.Counter".  A different "__missing__" method is used
      by "collections.defaultdict".

   d[key] = value

      Set "d[key]" to *value*.

   del d[key]

      Remove "d[key]" from *d*.  Raises a "KeyError" if *key* is not
      in the map.

   key in d

      Return "True" if *d* has a key *key*, else "False".

   key not in d

      Equivalent to "not key in d".

   iter(d)

      Return an iterator over the keys of the dictionary.  This is a
      shortcut for "iter(d.keys())".

   clear()

      Remove all items from the dictionary.

   copy()

      Return a shallow copy of the dictionary.

   classmethod fromkeys(iterable[, value])

      Create a new dictionary with keys from *iterable* and values set
      to *value*.

      "fromkeys()" is a class method that returns a new dictionary.
      *value* defaults to "None".

   get(key[, default])

      Return the value for *key* if *key* is in the dictionary, else
      *default*. If *default* is not given, it defaults to "None", so
      that this method never raises a "KeyError".

   items()

      Return a new view of the dictionaryâs items ("(key, value)"
      pairs). See the documentation of view objects.

   keys()

      Return a new view of the dictionaryâs keys.  See the
      documentation of view objects.

   pop(key[, default])

      If *key* is in the dictionary, remove it and return its value,
      else return *default*.  If *default* is not given and *key* is
      not in the dictionary, a "KeyError" is raised.

   popitem()

      Remove and return a "(key, value)" pair from the dictionary.
      Pairs are returned in LIFO (last-in, first-out) order.

      "popitem()" is useful to destructively iterate over a
      dictionary, as often used in set algorithms.  If the dictionary
      is empty, calling "popitem()" raises a "KeyError".

      Changed in version 3.7: LIFO order is now guaranteed. In prior
      versions, "popitem()" would return an arbitrary key/value pair.

   setdefault(key[, default])

      If *key* is in the dictionary, return its value.  If not, insert
      *key* with a value of *default* and return *default*.  *default*
      defaults to "None".

   update([other])

      Update the dictionary with the key/value pairs from *other*,
      overwriting existing keys.  Return "None".

      "update()" accepts either another dictionary object or an
      iterable of key/value pairs (as tuples or other iterables of
      length two).  If keyword arguments are specified, the dictionary
      is then updated with those key/value pairs: "d.update(red=1,
      blue=2)".

   values()

      Return a new view of the dictionaryâs values.  See the
      documentation of view objects.

   Dictionaries compare equal if and only if they have the same "(key,
   value)" pairs. Order comparisons (â<â, â<=â, â>=â, â>â) raise
   "TypeError".

   Dictionaries preserve insertion order.  Note that updating a key
   does not affect the order.  Keys added after deletion are inserted
   at the end.

      >>> d = {"one": 1, "two": 2, "three": 3, "four": 4}
      >>> d
      {'one': 1, 'two': 2, 'three': 3, 'four': 4}
      >>> list(d)
      ['one', 'two', 'three', 'four']
      >>> list(d.values())
      [1, 2, 3, 4]
      >>> d["one"] = 42
      >>> d
      {'one': 42, 'two': 2, 'three': 3, 'four': 4}
      >>> del d["two"]
      >>> d["two"] = None
      >>> d
      {'one': 42, 'three': 3, 'four': 4, 'two': None}

   Changed in version 3.7: Dictionary order is guaranteed to be
   insertion order.  This behavior was an implementation detail of
   CPython from 3.6.

See also: "types.MappingProxyType" can be used to create a read-only
  view of a "dict".


Dictionary view objects
=======================

The objects returned by "dict.keys()", "dict.values()" and
"dict.items()" are *view objects*.  They provide a dynamic view on the
dictionaryâs entries, which means that when the dictionary changes,
the view reflects these changes.

Dictionary views can be iterated over to yield their respective data,
and support membership tests:

len(dictview)

   Return the number of entries in the dictionary.

iter(dictview)

   Return an iterator over the keys, values or items (represented as
   tuples of "(key, value)") in the dictionary.

   Keys and values are iterated over in insertion order. This allows
   the creation of "(value, key)" pairs using "zip()": "pairs =
   zip(d.values(), d.keys())".  Another way to create the same list is
   "pairs = [(v, k) for (k, v) in d.items()]".

   Iterating views while adding or deleting entries in the dictionary
   may raise a "RuntimeError" or fail to iterate over all entries.

   Changed in version 3.7: Dictionary order is guaranteed to be
   insertion order.

x in dictview

   Return "True" if *x* is in the underlying dictionaryâs keys, values
   or items (in the latter case, *x* should be a "(key, value)"
   tuple).

Keys views are set-like since their entries are unique and hashable.
If all values are hashable, so that "(key, value)" pairs are unique
and hashable, then the items view is also set-like.  (Values views are
not treated as set-like since the entries are generally not unique.)
For set-like views, all of the operations defined for the abstract
base class "collections.abc.Set" are available (for example, "==",
"<", or "^").

An example of dictionary view usage:

   >>> dishes = {'eggs': 2, 'sausage': 1, 'bacon': 1, 'spam': 500}
   >>> keys = dishes.keys()
   >>> values = dishes.values()

   >>> # iteration
   >>> n = 0
   >>> for val in values:
   ...     n += val
   >>> print(n)
   504

   >>> # keys and values are iterated over in the same order (insertion order)
   >>> list(keys)
   ['eggs', 'sausage', 'bacon', 'spam']
   >>> list(values)
   [2, 1, 1, 500]

   >>> # view objects are dynamic and reflect dict changes
   >>> del dishes['eggs']
   >>> del dishes['sausage']
   >>> list(keys)
   ['bacon', 'spam']

   >>> # set operations
   >>> keys & {'eggs', 'bacon', 'salad'}
   {'bacon'}
   >>> keys ^ {'sausage', 'juice'}
   {'juice', 'sausage', 'bacon', 'spam'}
ztypesmethodsa  Methods
*******

Methods are functions that are called using the attribute notation.
There are two flavors: built-in methods (such as "append()" on lists)
and class instance methods.  Built-in methods are described with the
types that support them.

If you access a method (a function defined in a class namespace)
through an instance, you get a special object: a *bound method* (also
called *instance method*) object. When called, it will add the "self"
argument to the argument list.  Bound methods have two special read-
only attributes: "m.__self__" is the object on which the method
operates, and "m.__func__" is the function implementing the method.
Calling "m(arg-1, arg-2, ..., arg-n)" is completely equivalent to
calling "m.__func__(m.__self__, arg-1, arg-2, ..., arg-n)".

Like function objects, bound method objects support getting arbitrary
attributes.  However, since method attributes are actually stored on
the underlying function object ("meth.__func__"), setting method
attributes on bound methods is disallowed.  Attempting to set an
attribute on a method results in an "AttributeError" being raised.  In
order to set a method attribute, you need to explicitly set it on the
underlying function object:

   >>> class C:
   ...     def method(self):
   ...         pass
   ...
   >>> c = C()
   >>> c.method.whoami = 'my name is method'  # can't set on the method
   Traceback (most recent call last):
     File "<stdin>", line 1, in <module>
   AttributeError: 'method' object has no attribute 'whoami'
   >>> c.method.__func__.whoami = 'my name is method'
   >>> c.method.whoami
   'my name is method'

See The standard type hierarchy for more information.
ztypesmodulesu$  Modules
*******

The only special operation on a module is attribute access: "m.name",
where *m* is a module and *name* accesses a name defined in *m*âs
symbol table. Module attributes can be assigned to.  (Note that the
"import" statement is not, strictly speaking, an operation on a module
object; "import foo" does not require a module object named *foo* to
exist, rather it requires an (external) *definition* for a module
named *foo* somewhere.)

A special attribute of every module is "__dict__". This is the
dictionary containing the moduleâs symbol table. Modifying this
dictionary will actually change the moduleâs symbol table, but direct
assignment to the "__dict__" attribute is not possible (you can write
"m.__dict__['a'] = 1", which defines "m.a" to be "1", but you canât
write "m.__dict__ = {}").  Modifying "__dict__" directly is not
recommended.

Modules built into the interpreter are written like this: "<module
'sys' (built-in)>".  If loaded from a file, they are written as
"<module 'os' from '/usr/local/lib/pythonX.Y/os.pyc'>".
ztypessequÌY  Sequence Types â "list", "tuple", "range"
*****************************************

There are three basic sequence types: lists, tuples, and range
objects. Additional sequence types tailored for processing of binary
data and text strings are described in dedicated sections.


Common Sequence Operations
==========================

The operations in the following table are supported by most sequence
types, both mutable and immutable. The "collections.abc.Sequence" ABC
is provided to make it easier to correctly implement these operations
on custom sequence types.

This table lists the sequence operations sorted in ascending priority.
In the table, *s* and *t* are sequences of the same type, *n*, *i*,
*j* and *k* are integers and *x* is an arbitrary object that meets any
type and value restrictions imposed by *s*.

The "in" and "not in" operations have the same priorities as the
comparison operations. The "+" (concatenation) and "*" (repetition)
operations have the same priority as the corresponding numeric
operations. [3]

+----------------------------+----------------------------------+------------+
| Operation                  | Result                           | Notes      |
+============================+==================================+============+
| "x in s"                   | "True" if an item of *s* is      | (1)        |
|                            | equal to *x*, else "False"       |            |
+----------------------------+----------------------------------+------------+
| "x not in s"               | "False" if an item of *s* is     | (1)        |
|                            | equal to *x*, else "True"        |            |
+----------------------------+----------------------------------+------------+
| "s + t"                    | the concatenation of *s* and *t* | (6)(7)     |
+----------------------------+----------------------------------+------------+
| "s * n" or "n * s"         | equivalent to adding *s* to      | (2)(7)     |
|                            | itself *n* times                 |            |
+----------------------------+----------------------------------+------------+
| "s[i]"                     | *i*th item of *s*, origin 0      | (3)        |
+----------------------------+----------------------------------+------------+
| "s[i:j]"                   | slice of *s* from *i* to *j*     | (3)(4)     |
+----------------------------+----------------------------------+------------+
| "s[i:j:k]"                 | slice of *s* from *i* to *j*     | (3)(5)     |
|                            | with step *k*                    |            |
+----------------------------+----------------------------------+------------+
| "len(s)"                   | length of *s*                    |            |
+----------------------------+----------------------------------+------------+
| "min(s)"                   | smallest item of *s*             |            |
+----------------------------+----------------------------------+------------+
| "max(s)"                   | largest item of *s*              |            |
+----------------------------+----------------------------------+------------+
| "s.index(x[, i[, j]])"     | index of the first occurrence of | (8)        |
|                            | *x* in *s* (at or after index    |            |
|                            | *i* and before index *j*)        |            |
+----------------------------+----------------------------------+------------+
| "s.count(x)"               | total number of occurrences of   |            |
|                            | *x* in *s*                       |            |
+----------------------------+----------------------------------+------------+

Sequences of the same type also support comparisons.  In particular,
tuples and lists are compared lexicographically by comparing
corresponding elements. This means that to compare equal, every
element must compare equal and the two sequences must be of the same
type and have the same length.  (For full details see Comparisons in
the language reference.)

Notes:

1. While the "in" and "not in" operations are used only for simple
   containment testing in the general case, some specialised sequences
   (such as "str", "bytes" and "bytearray") also use them for
   subsequence testing:

      >>> "gg" in "eggs"
      True

2. Values of *n* less than "0" are treated as "0" (which yields an
   empty sequence of the same type as *s*).  Note that items in the
   sequence *s* are not copied; they are referenced multiple times.
   This often haunts new Python programmers; consider:

      >>> lists = [[]] * 3
      >>> lists
      [[], [], []]
      >>> lists[0].append(3)
      >>> lists
      [[3], [3], [3]]

   What has happened is that "[[]]" is a one-element list containing
   an empty list, so all three elements of "[[]] * 3" are references
   to this single empty list.  Modifying any of the elements of
   "lists" modifies this single list. You can create a list of
   different lists this way:

      >>> lists = [[] for i in range(3)]
      >>> lists[0].append(3)
      >>> lists[1].append(5)
      >>> lists[2].append(7)
      >>> lists
      [[3], [5], [7]]

   Further explanation is available in the FAQ entry How do I create a
   multidimensional list?.

3. If *i* or *j* is negative, the index is relative to the end of
   sequence *s*: "len(s) + i" or "len(s) + j" is substituted.  But
   note that "-0" is still "0".

4. The slice of *s* from *i* to *j* is defined as the sequence of
   items with index *k* such that "i <= k < j".  If *i* or *j* is
   greater than "len(s)", use "len(s)".  If *i* is omitted or "None",
   use "0".  If *j* is omitted or "None", use "len(s)".  If *i* is
   greater than or equal to *j*, the slice is empty.

5. The slice of *s* from *i* to *j* with step *k* is defined as the
   sequence of items with index  "x = i + n*k" such that "0 <= n <
   (j-i)/k".  In other words, the indices are "i", "i+k", "i+2*k",
   "i+3*k" and so on, stopping when *j* is reached (but never
   including *j*).  When *k* is positive, *i* and *j* are reduced to
   "len(s)" if they are greater. When *k* is negative, *i* and *j* are
   reduced to "len(s) - 1" if they are greater.  If *i* or *j* are
   omitted or "None", they become âendâ values (which end depends on
   the sign of *k*).  Note, *k* cannot be zero. If *k* is "None", it
   is treated like "1".

6. Concatenating immutable sequences always results in a new
   object. This means that building up a sequence by repeated
   concatenation will have a quadratic runtime cost in the total
   sequence length. To get a linear runtime cost, you must switch to
   one of the alternatives below:

   * if concatenating "str" objects, you can build a list and use
     "str.join()" at the end or else write to an "io.StringIO"
     instance and retrieve its value when complete

   * if concatenating "bytes" objects, you can similarly use
     "bytes.join()" or "io.BytesIO", or you can do in-place
     concatenation with a "bytearray" object.  "bytearray" objects are
     mutable and have an efficient overallocation mechanism

   * if concatenating "tuple" objects, extend a "list" instead

   * for other types, investigate the relevant class documentation

7. Some sequence types (such as "range") only support item
   sequences that follow specific patterns, and hence donât support
   sequence concatenation or repetition.

8. "index" raises "ValueError" when *x* is not found in *s*. Not
   all implementations support passing the additional arguments *i*
   and *j*. These arguments allow efficient searching of subsections
   of the sequence. Passing the extra arguments is roughly equivalent
   to using "s[i:j].index(x)", only without copying any data and with
   the returned index being relative to the start of the sequence
   rather than the start of the slice.


Immutable Sequence Types
========================

The only operation that immutable sequence types generally implement
that is not also implemented by mutable sequence types is support for
the "hash()" built-in.

This support allows immutable sequences, such as "tuple" instances, to
be used as "dict" keys and stored in "set" and "frozenset" instances.

Attempting to hash an immutable sequence that contains unhashable
values will result in "TypeError".


Mutable Sequence Types
======================

The operations in the following table are defined on mutable sequence
types. The "collections.abc.MutableSequence" ABC is provided to make
it easier to correctly implement these operations on custom sequence
types.

In the table *s* is an instance of a mutable sequence type, *t* is any
iterable object and *x* is an arbitrary object that meets any type and
value restrictions imposed by *s* (for example, "bytearray" only
accepts integers that meet the value restriction "0 <= x <= 255").

+--------------------------------+----------------------------------+-----------------------+
| Operation                      | Result                           | Notes                 |
+================================+==================================+=======================+
| "s[i] = x"                     | item *i* of *s* is replaced by   |                       |
|                                | *x*                              |                       |
+--------------------------------+----------------------------------+-----------------------+
| "s[i:j] = t"                   | slice of *s* from *i* to *j* is  |                       |
|                                | replaced by the contents of the  |                       |
|                                | iterable *t*                     |                       |
+--------------------------------+----------------------------------+-----------------------+
| "del s[i:j]"                   | same as "s[i:j] = []"            |                       |
+--------------------------------+----------------------------------+-----------------------+
| "s[i:j:k] = t"                 | the elements of "s[i:j:k]" are   | (1)                   |
|                                | replaced by those of *t*         |                       |
+--------------------------------+----------------------------------+-----------------------+
| "del s[i:j:k]"                 | removes the elements of          |                       |
|                                | "s[i:j:k]" from the list         |                       |
+--------------------------------+----------------------------------+-----------------------+
| "s.append(x)"                  | appends *x* to the end of the    |                       |
|                                | sequence (same as                |                       |
|                                | "s[len(s):len(s)] = [x]")        |                       |
+--------------------------------+----------------------------------+-----------------------+
| "s.clear()"                    | removes all items from *s* (same | (5)                   |
|                                | as "del s[:]")                   |                       |
+--------------------------------+----------------------------------+-----------------------+
| "s.copy()"                     | creates a shallow copy of *s*    | (5)                   |
|                                | (same as "s[:]")                 |                       |
+--------------------------------+----------------------------------+-----------------------+
| "s.extend(t)" or "s += t"      | extends *s* with the contents of |                       |
|                                | *t* (for the most part the same  |                       |
|                                | as "s[len(s):len(s)] = t")       |                       |
+--------------------------------+----------------------------------+-----------------------+
| "s *= n"                       | updates *s* with its contents    | (6)                   |
|                                | repeated *n* times               |                       |
+--------------------------------+----------------------------------+-----------------------+
| "s.insert(i, x)"               | inserts *x* into *s* at the      |                       |
|                                | index given by *i* (same as      |                       |
|                                | "s[i:i] = [x]")                  |                       |
+--------------------------------+----------------------------------+-----------------------+
| "s.pop([i])"                   | retrieves the item at *i* and    | (2)                   |
|                                | also removes it from *s*         |                       |
+--------------------------------+----------------------------------+-----------------------+
| "s.remove(x)"                  | remove the first item from *s*   | (3)                   |
|                                | where "s[i]" is equal to *x*     |                       |
+--------------------------------+----------------------------------+-----------------------+
| "s.reverse()"                  | reverses the items of *s* in     | (4)                   |
|                                | place                            |                       |
+--------------------------------+----------------------------------+-----------------------+

Notes:

1. *t* must have the same length as the slice it is replacing.

2. The optional argument *i* defaults to "-1", so that by default
   the last item is removed and returned.

3. "remove" raises "ValueError" when *x* is not found in *s*.

4. The "reverse()" method modifies the sequence in place for
   economy of space when reversing a large sequence.  To remind users
   that it operates by side effect, it does not return the reversed
   sequence.

5. "clear()" and "copy()" are included for consistency with the
   interfaces of mutable containers that donât support slicing
   operations (such as "dict" and "set")

   New in version 3.3: "clear()" and "copy()" methods.

6. The value *n* is an integer, or an object implementing
   "__index__()".  Zero and negative values of *n* clear the sequence.
   Items in the sequence are not copied; they are referenced multiple
   times, as explained for "s * n" under Common Sequence Operations.


Lists
=====

Lists are mutable sequences, typically used to store collections of
homogeneous items (where the precise degree of similarity will vary by
application).

class list([iterable])

   Lists may be constructed in several ways:

   * Using a pair of square brackets to denote the empty list: "[]"

   * Using square brackets, separating items with commas: "[a]",
     "[a, b, c]"

   * Using a list comprehension: "[x for x in iterable]"

   * Using the type constructor: "list()" or "list(iterable)"

   The constructor builds a list whose items are the same and in the
   same order as *iterable*âs items.  *iterable* may be either a
   sequence, a container that supports iteration, or an iterator
   object.  If *iterable* is already a list, a copy is made and
   returned, similar to "iterable[:]". For example, "list('abc')"
   returns "['a', 'b', 'c']" and "list( (1, 2, 3) )" returns "[1, 2,
   3]". If no argument is given, the constructor creates a new empty
   list, "[]".

   Many other operations also produce lists, including the "sorted()"
   built-in.

   Lists implement all of the common and mutable sequence operations.
   Lists also provide the following additional method:

   sort(*, key=None, reverse=False)

      This method sorts the list in place, using only "<" comparisons
      between items. Exceptions are not suppressed - if any comparison
      operations fail, the entire sort operation will fail (and the
      list will likely be left in a partially modified state).

      "sort()" accepts two arguments that can only be passed by
      keyword (keyword-only arguments):

      *key* specifies a function of one argument that is used to
      extract a comparison key from each list element (for example,
      "key=str.lower"). The key corresponding to each item in the list
      is calculated once and then used for the entire sorting process.
      The default value of "None" means that list items are sorted
      directly without calculating a separate key value.

      The "functools.cmp_to_key()" utility is available to convert a
      2.x style *cmp* function to a *key* function.

      *reverse* is a boolean value.  If set to "True", then the list
      elements are sorted as if each comparison were reversed.

      This method modifies the sequence in place for economy of space
      when sorting a large sequence.  To remind users that it operates
      by side effect, it does not return the sorted sequence (use
      "sorted()" to explicitly request a new sorted list instance).

      The "sort()" method is guaranteed to be stable.  A sort is
      stable if it guarantees not to change the relative order of
      elements that compare equal â this is helpful for sorting in
      multiple passes (for example, sort by department, then by salary
      grade).

      **CPython implementation detail:** While a list is being sorted,
      the effect of attempting to mutate, or even inspect, the list is
      undefined.  The C implementation of Python makes the list appear
      empty for the duration, and raises "ValueError" if it can detect
      that the list has been mutated during a sort.


Tuples
======

Tuples are immutable sequences, typically used to store collections of
heterogeneous data (such as the 2-tuples produced by the "enumerate()"
built-in). Tuples are also used for cases where an immutable sequence
of homogeneous data is needed (such as allowing storage in a "set" or
"dict" instance).

class tuple([iterable])

   Tuples may be constructed in a number of ways:

   * Using a pair of parentheses to denote the empty tuple: "()"

   * Using a trailing comma for a singleton tuple: "a," or "(a,)"

   * Separating items with commas: "a, b, c" or "(a, b, c)"

   * Using the "tuple()" built-in: "tuple()" or "tuple(iterable)"

   The constructor builds a tuple whose items are the same and in the
   same order as *iterable*âs items.  *iterable* may be either a
   sequence, a container that supports iteration, or an iterator
   object.  If *iterable* is already a tuple, it is returned
   unchanged. For example, "tuple('abc')" returns "('a', 'b', 'c')"
   and "tuple( [1, 2, 3] )" returns "(1, 2, 3)". If no argument is
   given, the constructor creates a new empty tuple, "()".

   Note that it is actually the comma which makes a tuple, not the
   parentheses. The parentheses are optional, except in the empty
   tuple case, or when they are needed to avoid syntactic ambiguity.
   For example, "f(a, b, c)" is a function call with three arguments,
   while "f((a, b, c))" is a function call with a 3-tuple as the sole
   argument.

   Tuples implement all of the common sequence operations.

For heterogeneous collections of data where access by name is clearer
than access by index, "collections.namedtuple()" may be a more
appropriate choice than a simple tuple object.


Ranges
======

The "range" type represents an immutable sequence of numbers and is
commonly used for looping a specific number of times in "for" loops.

class range(stop)
class range(start, stop[, step])

   The arguments to the range constructor must be integers (either
   built-in "int" or any object that implements the "__index__"
   special method).  If the *step* argument is omitted, it defaults to
   "1". If the *start* argument is omitted, it defaults to "0". If
   *step* is zero, "ValueError" is raised.

   For a positive *step*, the contents of a range "r" are determined
   by the formula "r[i] = start + step*i" where "i >= 0" and "r[i] <
   stop".

   For a negative *step*, the contents of the range are still
   determined by the formula "r[i] = start + step*i", but the
   constraints are "i >= 0" and "r[i] > stop".

   A range object will be empty if "r[0]" does not meet the value
   constraint. Ranges do support negative indices, but these are
   interpreted as indexing from the end of the sequence determined by
   the positive indices.

   Ranges containing absolute values larger than "sys.maxsize" are
   permitted but some features (such as "len()") may raise
   "OverflowError".

   Range examples:

      >>> list(range(10))
      [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]
      >>> list(range(1, 11))
      [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]
      >>> list(range(0, 30, 5))
      [0, 5, 10, 15, 20, 25]
      >>> list(range(0, 10, 3))
      [0, 3, 6, 9]
      >>> list(range(0, -10, -1))
      [0, -1, -2, -3, -4, -5, -6, -7, -8, -9]
      >>> list(range(0))
      []
      >>> list(range(1, 0))
      []

   Ranges implement all of the common sequence operations except
   concatenation and repetition (due to the fact that range objects
   can only represent sequences that follow a strict pattern and
   repetition and concatenation will usually violate that pattern).

   start

      The value of the *start* parameter (or "0" if the parameter was
      not supplied)

   stop

      The value of the *stop* parameter

   step

      The value of the *step* parameter (or "1" if the parameter was
      not supplied)

The advantage of the "range" type over a regular "list" or "tuple" is
that a "range" object will always take the same (small) amount of
memory, no matter the size of the range it represents (as it only
stores the "start", "stop" and "step" values, calculating individual
items and subranges as needed).

Range objects implement the "collections.abc.Sequence" ABC, and
provide features such as containment tests, element index lookup,
slicing and support for negative indices (see Sequence Types â list,
tuple, range):

>>> r = range(0, 20, 2)
>>> r
range(0, 20, 2)
>>> 11 in r
False
>>> 10 in r
True
>>> r.index(10)
5
>>> r[5]
10
>>> r[:5]
range(0, 10, 2)
>>> r[-1]
18

Testing range objects for equality with "==" and "!=" compares them as
sequences.  That is, two range objects are considered equal if they
represent the same sequence of values.  (Note that two range objects
that compare equal might have different "start", "stop" and "step"
attributes, for example "range(0) == range(2, 1, 3)" or "range(0, 3,
2) == range(0, 4, 2)".)

Changed in version 3.2: Implement the Sequence ABC. Support slicing
and negative indices. Test "int" objects for membership in constant
time instead of iterating through all items.

Changed in version 3.3: Define â==â and â!=â to compare range objects
based on the sequence of values they define (instead of comparing
based on object identity).

New in version 3.3: The "start", "stop" and "step" attributes.

See also:

  * The linspace recipe shows how to implement a lazy version of
    range suitable for floating point applications.
ztypesseq-mutableus  Mutable Sequence Types
**********************

The operations in the following table are defined on mutable sequence
types. The "collections.abc.MutableSequence" ABC is provided to make
it easier to correctly implement these operations on custom sequence
types.

In the table *s* is an instance of a mutable sequence type, *t* is any
iterable object and *x* is an arbitrary object that meets any type and
value restrictions imposed by *s* (for example, "bytearray" only
accepts integers that meet the value restriction "0 <= x <= 255").

+--------------------------------+----------------------------------+-----------------------+
| Operation                      | Result                           | Notes                 |
+================================+==================================+=======================+
| "s[i] = x"                     | item *i* of *s* is replaced by   |                       |
|                                | *x*                              |                       |
+--------------------------------+----------------------------------+-----------------------+
| "s[i:j] = t"                   | slice of *s* from *i* to *j* is  |                       |
|                                | replaced by the contents of the  |                       |
|                                | iterable *t*                     |                       |
+--------------------------------+----------------------------------+-----------------------+
| "del s[i:j]"                   | same as "s[i:j] = []"            |                       |
+--------------------------------+----------------------------------+-----------------------+
| "s[i:j:k] = t"                 | the elements of "s[i:j:k]" are   | (1)                   |
|                                | replaced by those of *t*         |                       |
+--------------------------------+----------------------------------+-----------------------+
| "del s[i:j:k]"                 | removes the elements of          |                       |
|                                | "s[i:j:k]" from the list         |                       |
+--------------------------------+----------------------------------+-----------------------+
| "s.append(x)"                  | appends *x* to the end of the    |                       |
|                                | sequence (same as                |                       |
|                                | "s[len(s):len(s)] = [x]")        |                       |
+--------------------------------+----------------------------------+-----------------------+
| "s.clear()"                    | removes all items from *s* (same | (5)                   |
|                                | as "del s[:]")                   |                       |
+--------------------------------+----------------------------------+-----------------------+
| "s.copy()"                     | creates a shallow copy of *s*    | (5)                   |
|                                | (same as "s[:]")                 |                       |
+--------------------------------+----------------------------------+-----------------------+
| "s.extend(t)" or "s += t"      | extends *s* with the contents of |                       |
|                                | *t* (for the most part the same  |                       |
|                                | as "s[len(s):len(s)] = t")       |                       |
+--------------------------------+----------------------------------+-----------------------+
| "s *= n"                       | updates *s* with its contents    | (6)                   |
|                                | repeated *n* times               |                       |
+--------------------------------+----------------------------------+-----------------------+
| "s.insert(i, x)"               | inserts *x* into *s* at the      |                       |
|                                | index given by *i* (same as      |                       |
|                                | "s[i:i] = [x]")                  |                       |
+--------------------------------+----------------------------------+-----------------------+
| "s.pop([i])"                   | retrieves the item at *i* and    | (2)                   |
|                                | also removes it from *s*         |                       |
+--------------------------------+----------------------------------+-----------------------+
| "s.remove(x)"                  | remove the first item from *s*   | (3)                   |
|                                | where "s[i]" is equal to *x*     |                       |
+--------------------------------+----------------------------------+-----------------------+
| "s.reverse()"                  | reverses the items of *s* in     | (4)                   |
|                                | place                            |                       |
+--------------------------------+----------------------------------+-----------------------+

Notes:

1. *t* must have the same length as the slice it is replacing.

2. The optional argument *i* defaults to "-1", so that by default
   the last item is removed and returned.

3. "remove" raises "ValueError" when *x* is not found in *s*.

4. The "reverse()" method modifies the sequence in place for
   economy of space when reversing a large sequence.  To remind users
   that it operates by side effect, it does not return the reversed
   sequence.

5. "clear()" and "copy()" are included for consistency with the
   interfaces of mutable containers that donât support slicing
   operations (such as "dict" and "set")

   New in version 3.3: "clear()" and "copy()" methods.

6. The value *n* is an integer, or an object implementing
   "__index__()".  Zero and negative values of *n* clear the sequence.
   Items in the sequence are not copied; they are referenced multiple
   times, as explained for "s * n" under Common Sequence Operations.
zunarya~  Unary arithmetic and bitwise operations
***************************************

All unary arithmetic and bitwise operations have the same priority:

   u_expr ::= power | "-" u_expr | "+" u_expr | "~" u_expr

The unary "-" (minus) operator yields the negation of its numeric
argument.

The unary "+" (plus) operator yields its numeric argument unchanged.

The unary "~" (invert) operator yields the bitwise inversion of its
integer argument.  The bitwise inversion of "x" is defined as
"-(x+1)".  It only applies to integral numbers.

In all three cases, if the argument does not have the proper type, a
"TypeError" exception is raised.
zwhileu±  The "while" statement
*********************

The "while" statement is used for repeated execution as long as an
expression is true:

   while_stmt ::= "while" expression ":" suite
                  ["else" ":" suite]

This repeatedly tests the expression and, if it is true, executes the
first suite; if the expression is false (which may be the first time
it is tested) the suite of the "else" clause, if present, is executed
and the loop terminates.

A "break" statement executed in the first suite terminates the loop
without executing the "else" clauseâs suite.  A "continue" statement
executed in the first suite skips the rest of the suite and goes back
to testing the expression.
zwithu&	  The "with" statement
********************

The "with" statement is used to wrap the execution of a block with
methods defined by a context manager (see section With Statement
Context Managers). This allows common "try"â¦"except"â¦"finally" usage
patterns to be encapsulated for convenient reuse.

   with_stmt ::= "with" with_item ("," with_item)* ":" suite
   with_item ::= expression ["as" target]

The execution of the "with" statement with one âitemâ proceeds as
follows:

1. The context expression (the expression given in the "with_item")
   is evaluated to obtain a context manager.

2. The context managerâs "__exit__()" is loaded for later use.

3. The context managerâs "__enter__()" method is invoked.

4. If a target was included in the "with" statement, the return
   value from "__enter__()" is assigned to it.

   Note: The "with" statement guarantees that if the "__enter__()"
     method returns without an error, then "__exit__()" will always be
     called. Thus, if an error occurs during the assignment to the
     target list, it will be treated the same as an error occurring
     within the suite would be. See step 6 below.

5. The suite is executed.

6. The context managerâs "__exit__()" method is invoked.  If an
   exception caused the suite to be exited, its type, value, and
   traceback are passed as arguments to "__exit__()". Otherwise, three
   "None" arguments are supplied.

   If the suite was exited due to an exception, and the return value
   from the "__exit__()" method was false, the exception is reraised.
   If the return value was true, the exception is suppressed, and
   execution continues with the statement following the "with"
   statement.

   If the suite was exited for any reason other than an exception, the
   return value from "__exit__()" is ignored, and execution proceeds
   at the normal location for the kind of exit that was taken.

With more than one item, the context managers are processed as if
multiple "with" statements were nested:

   with A() as a, B() as b:
       suite

is equivalent to

   with A() as a:
       with B() as b:
           suite

Changed in version 3.1: Support for multiple context expressions.

See also:

  **PEP 343** - The âwithâ statement
     The specification, background, and examples for the Python "with"
     statement.
zyielda,  The "yield" statement
*********************

   yield_stmt ::= yield_expression

A "yield" statement is semantically equivalent to a yield expression.
The yield statement can be used to omit the parentheses that would
otherwise be required in the equivalent yield expression statement.
For example, the yield statements

   yield <expr>
   yield from <expr>

are equivalent to the yield expression statements

   (yield <expr>)
   (yield from <expr>)

Yield expressions and statements are only used when defining a
*generator* function, and are only used in the body of the generator
function.  Using yield in a function definition is sufficient to cause
that definition to create a generator function instead of a normal
function.

For full details of "yield" semantics, refer to the Yield expressions
section.
0samplepopulationrandbelowsetsizepoolselected_addNormal distribution.

        mu is the mean, and sigma is the standard deviation.

        _BuiltinMethodTypeUUUUUUÕ?acosInitialize an instance.

        Optional argument x controls seeding, as for Random.seed().
        Random.triangulargaussurandom      4@_urandomavgRandom.weibullvariateBPF¹?RECIP_BPFThe number of weights does not match the populationsqsumnumber of bits must be greater than zeroShuffle list x in place, and return None.

        Optional argument random is a 0-argument function returning a
        random float in [0.0, 1.0); if it is the default None, the
        standard random.random will be used.

        Circular data distribution.

        mu is the mean angle, expressed in radians between 0 and 2*pi, and
        kappa is the concentration parameter, which must be greater than or
        equal to zero.  If kappa is equal to zero, this distribution reduces
        to a uniform random angle over the range 0 to 2*pi.

        Underlying random() generator does not supply 
enough bits to choose from a population range this large.
To remove the range limitation, add a getrandbits() method.      @internalstateRandom.samplegammavariate: alpha and beta must be > 0.0Exponential distribution.

        lambd is 1.0 divided by the desired mean.  It should be
        nonzero.  (The parameter would be called "lambda", but that is
        a reserved word in Python.)  Returned values range from 0 to
        positive infinity if lambd is positive, and from negative
        infinity to 0 if lambd is negative.

        Random.randrangeSystemRandom.seedRandom.expovariateGamma distribution.  Not the gamma function!

        Conditions on the parameters are alpha > 0 and beta > 0.

        The probability distribution function is:

                    x ** (alpha - 1) * math.exp(-x / beta)
          pdf(x) =  --------------------------------------
                      math.gamma(alpha) * beta ** alpha

        _acosRandom.setstatenon-integer stop for randrange()non-integer step for randrange()SystemRandom.getrandbitsMethod should not be called for a system random number generator.       ÀRandom.__getstate__LOG4Cannot choose from an empty sequenceStub method.  Not used for a system random number generator.Restore internal state from object returned by getstate().Return internal state; can be passed to setstate() later.Pareto distribution.  alpha is the shape parameter.Get the next random number in the range [0.0, 1.0)._notimplementednormalvariateRandom.uniformRandom.shuffleWeibull distribution.

        alpha is the scale parameter and beta is the shape parameter.

        avg %g, stddev %g, min %g, max %g
getrandbits(k) -> x.  Generates an int with k random bits.Boundary cannot be zeroRandom.choiceRandom.__init__Get a random number in the range [a, b) or [a, b] depending on rounding.SystemRandom.random      à¿_sin      @Return a random int in the range [0,n).  Raises ValueError if n==0._MethodTypeRandom variable generators.

    integers
    --------
           uniform within range

    sequences
    ---------
           pick random element
           pick random sample
           pick weighted random sample
           generate random permutation

    distributions on the real line:
    ------------------------------
           uniform
           triangular
           normal (Gaussian)
           lognormal
           negative exponential
           gamma
           beta
           pareto
           Weibull

    distributions on the circle (angles 0 to 2pi)
    ---------------------------------------------
           circular uniform
           von Mises

General notes on the underlying Mersenne Twister core generator:

* The period is 2**19937-1.
* It is one of the most extensively tested generators in existence.
* The random() method is implemented in C, executes in a single Python step,
  and is, therefore, threadsafe.

_itertoolsNV_MAGICCONSTcum_weights      @sqrtgauss_nextSG_MAGICCONSTempty range for randrange()    _ BistepRandom.__setstate__Û   zRandomzseedzrandomzuniformzrandintzchoicezsamplez	randrangezshuffleznormalvariatezlognormvariatezexpovariatezvonmisesvariatezgammavariatez
triangularzgausszbetavariatezparetovariatezweibullvariatezgetstatezsetstatezgetrandbitszchoiceszSystemRandomainvbbbg2radrandom.pyRandom.vonmisesvariateu3Triangular distribution.

        Continuous distribution bounded by given lower and upper limits,
        and having a given mode value in-between.

        http://en.wikipedia.org/wiki/Triangular_distribution

        Random.gammavariate_randomReturn random integer in range [a, b], including both end points.
        Cannot specify both weights and cumulative weightsistartistopRandom.randintRandom number generator base class used by bound module functions.

    Used to instantiate instances of Random to get generators that don't
    share state.

    Class Random can also be subclassed if you want to use a different basic
    generator of your own devising: in that case, override the following
    methods:  random(), seed(), getstate(), and setstate().
    Optionally, implement a getrandbits() method so that randrange()
    can cover arbitrarily large ranges.

    Random.gausszero step for randrange()non-integer arg 1 for randrange()Random.getstate    _ ÂRandom.setstate.<locals>.<genexpr>Choose a random item from range(start, stop[, step]).

        This fixes the problem with randint() which includes the
        endpoint; in Python this is usually not what you want.

        System entropy source does not have state._sqrtSystemRandom._notimplementedTWOPIRandom._randbelowËPÊÿÿï?Random.normalvariateRandom.lognormvariateRandom.betavariateRandom.__reduce__x2piRandom.paretovariatestate with version %s passed to Random.setstate() of version %s      i@Log normal distribution.

        If you take the natural logarithm of this distribution, you'll get a
        normal distribution with mean mu and standard deviation sigma.
        mu can have any value, and sigma must be greater than zero.

        empty range for randrange() (%d,%d, %d)Random.choicesíµ ÷Æ°>sec,Initialize internal state from hashable object.

        None or no argument seeds from current time or from an operating
        system specific randomness source if available.

        If *a* is an int, all bits are used.

        For version 2 (the default), all of the bits are used if *a* is a str,
        bytes, or bytearray.  For version 1 (provided for reproducing random
        sequences from older versions of Python), the algorithm for str and
        bytes generates a narrower range of seeds.

        Beta distribution.

        Conditions on the parameters are alpha > 0 and beta > 0.
        Returned values range between 0 and 1.

        Return a k sized list of population elements chosen with replacement.

        If the relative weights or cumulative weights are not specified,
        the selections are made with equal probability.

        _test_generatorSample larger than population or is negativeAlternate random number generator using sources provided
    by the operating system (such as /dev/urandom on Unix or
    CryptGenRandom on Windows).

     Not available on all systems (see os.urandom() for details).
    Chooses k unique random elements from a population sequence or set.

        Returns a new list containing elements from the population while
        leaving the original population unchanged.  The resulting list is
        in selection order so that all sub-slices will also be valid random
        samples.  This allows raffle winners (the sample) to be partitioned
        into grand prize and second place winners (the subslices).

        Members of the population need not be hashable or unique.  If the
        population contains repeats, then each occurrence is a possible
        selection in the sample.

        To choose a sample in a range of integers, use range as an argument.
        This is especially fast and space efficient for sampling from a
        large population:   sample(range(10000000), 60)
        number of bits should be an integer_cosPopulation must be a sequence or set.  For dicts, use list(d).ÍÌÌÌÌÌì?<module random>Choose a random element from a non-empty sequence.H¯¼ò×z>Gaussian distribution.

        mu is the mean, and sigma is the standard deviation.  This is
        slightly faster than the normalvariate() function.

        Not thread-safe without a lock around calls.

        Compute matches when text contains a dot.

        Assuming the text is of the form NAME.NAME....[NAME], and is
        evaluable in self.namespace, it will be evaluated and its attributes
        (as revealed by dir()) are used as possible completions.  (For class
        instances, class members are also considered.)

        WARNING: this can still invoke arbitrary C code, if an object
        with a __getattr__ hook is evaluated.

        Completer.__init__redisplayCompute matches when text is a simple name.

        Return a list of all keywords, built-in functions and names currently
        defined in self.namespace that match.

        <module rlcompleter>global_matchesReturn the next possible completion for 'text'.

        This is called successively with state == 0, 1, 2, ... until it
        returns None.  The completion should begin with 'text'.

        _readline_availableCompleter.attr_matchesCompleter.global_matchesnoprefixCompleter._callable_postfixCompleter.completenamespace must be a dictionaryCreate a new completer for the command line.

        Completer([namespace]) -> completer instance.

        If unspecified, the default namespace where completions are performed
        is __main__ (technically, __main__.__dict__). Namespaces should be
        given as dictionaries.

        Completer instances should be used as the completion mechanism of
        readline via the set_completer() call:

        readline.set_completer(Completer(my_namespace).complete)
        (\w+(\.\w+)*)\.(\w*)Word completion for GNU readline.

The completer completes keywords, built-ins and globals in a selectable
namespace (which defaults to __main__); when completing NAME.NAME..., it
evaluates (!) the expression up to the last dot and completes its attributes.

It's very cool to do "import sys" type "sys.", hit the completion key (twice),
and see the list of names defined by the sys module!

Tip: to use the tab key as the completion key, call

    readline.parse_and_bind("tab: complete")

Notes:

- Exceptions raised by the completer function are *ignored* (and generally cause
  the completion to fail).  This is a feature -- since readline sets the tty
  device in raw (or cbreak) mode, printing a traceback wouldn't work well
  without some complicated hoopla to save, reset and restore the tty state.

- The evaluation of the NAME.NAME... form may cause arbitrary application
  defined code to be executed if an object with a __getattr__ hook is found.
  Since it is the responsibility of the application (or the user) to enable this
  feature, I consider this an acceptable risk.  More complicated expressions
  (e.g. function calls or indexing operations) are *not* evaluated.

- When the original stdin is not a tty device, GNU readline is never
  used, and this module (and the readline module) are silently inactive.

rlcompleter.pythisobjectuse_main_nsinsert_textget_class_membersRuns the designated module in the __main__ namespace

       Note that the executed module will have full access to the
       __main__ namespace. If this is not desirable, the run_module()
       function should be used to run the module code in a fresh namespace.

       At the very least, these variables in __main__ will be overwritten:
           __name__
           __file__
           __cached__
           __loader__
           __package__
    path_nameinit_globalsrun_nameis_NullImportertemp_modulemod_globalsalter_argv_ModifiedArgv0.__main___sentinel_TempModule.__init__%s; %r is a package and cannot be directly executedRelative module names not supported_ModifiedArgv0.__exit__can't find %r module in %rError while finding module specification for {!r} ({}: {})Already preserving saved valueCannot use package as __main__ modulerun_globalsscript_name_saved_modulepkg_main_namealter_sysrun_path_Error_TempModule.__enter__runpy.pyExecute a module's code without importing it

       Returns the resulting top level namespace dictionary
    main_globalsError that _run_module_as_main() should report without a traceback_ModifiedArgv0.__init___get_main_module_details_ModifiedArgv0.__enter__<module runpy>_run_codeExecute code located at the specified filesystem location

       Returns the resulting top level namespace dictionary

       The file path may refer directly to a Python script (i.e.
       one that could be directly executed with execfile) or else
       it may refer to a zipfile or directory containing a top
       level __main__.py script.
    Temporarily replace a module in sys.modules with an empty namespace{mod_name!r} found in sys.modules after import of package {pkg_name!r}, but prior to execution of {mod_name!r}; this may result in unpredictable behaviour_get_code_from_fileHelper to run code in nominated namespaceHelper to run code in new namespace with sys modifiedrunpy.py - locating and running Python code using the module namespace

Provides support for locating and running Python scripts using the Python
module namespace instead of the native filesystem.

This allows Python code to play nicely with non-filesystem based PEP 302
importers when locating support scripts as well as when importing modules.
<run_path>saved_mainNo module named %sNo code object available for %s_TempModule.__exit__%r is a namespace package and cannot be executed_run_module_code_saved_value_fd_to_keyKQ_EV_ADDBaseSelector.modifySolaris /dev/poll selector.BaseSelector.get_keyKqueue-based selector.max_evkev_listReturn a file descriptor from a file object.

        This wraps _fileobj_to_fd() to do an exhaustive search in case
        the object is invalid but we still have it in our map.  This
        is used by unregister() so we can unregister an object that
        was previously registered even if it is closed.  It is also
        used by _SelectorMapping.
        ü©ñÒMbP?_BaseSelectorImpl._fileobj_lookupkeventReturn the key associated to a given file descriptor.

        Parameters:
        fd -- file descriptor

        Returns:
        corresponding key, or None if not found
        File object registered.Events that must be waited for on this file object.BaseSelector.__enter__poller_eventsChange a registered file object monitored events or attached data.

        Parameters:
        fileobj -- file object or file descriptor
        events  -- events to monitor (bitwise mask of EVENT_READ|EVENT_WRITE)
        data    -- attached data

        Returns:
        SelectorKey instance

        Raises:
        Anything that unregister() or register() raises
        KqueueSelector.__init__KqueueSelector.closeBaseSelector.get_map<module selectors>_selector_clsSelectSelector.registerInvalid file object: {!r}Base class shared between poll, epoll and devpoll selectors.DefaultSelector_BaseSelectorImpl.registerEpollSelector.fileno_PollLikeSelector.selectInvalid events: {!r}SelectSelector._select_PollLikeSelector.unregisterUnregister a file object.

        Parameters:
        fileobj -- file object or file descriptor

        Returns:
        SelectorKey instance

        Raises:
        KeyError if fileobj is not registered

        Note:
        If fileobj is registered but has since been closed this does
        *not* raise OSError (even if the wrapped syscall does)
        Epoll-based selector.selector_eventsDevpollSelector.close_EVENT_WRITE_PollLikeSelector.modifySelectorKey(fileobj, fd, events, data)

    Object used to associate a file object to its backing
    file descriptor, selected event mask, and attached data.
_EVENT_READEPOLLOUTEpollSelector.selectRegister a file object.

        Parameters:
        fileobj -- file object or file descriptor
        events  -- events to monitor (bitwise mask of EVENT_READ|EVENT_WRITE)
        data    -- attached data

        Returns:
        SelectorKey instance

        Raises:
        ValueError if events is invalid
        KeyError if fileobj is already registered
        OSError if fileobj is closed or otherwise is unacceptable to
                the underlying system call (if a system call is made)

        Note:
        OSError may or may not be raised
        BaseSelector.__exit___BaseSelectorImpl.closeBaseSelector.selectBaseSelector.closePOLLINPoll-based selector.selectors.py_SelectorMapping.__iter__KqueueSelector.filenoPerform the actual selection, until some monitored file objects are
        ready or a timeout expires.

        Parameters:
        timeout -- if timeout > 0, this specifies the maximum wait time, in
                   seconds
                   if timeout <= 0, the select() call won't block, and will
                   report the currently ready file objects
                   if timeout is None, select() will block until a monitored
                   file object becomes ready

        Returns:
        list of (key, events) for ready file objects
        `events` is a bitwise mask of EVENT_READ|EVENT_WRITE
        Return the key associated to a registered file object.

        Returns:
        SelectorKey for this file object
        _SelectorMapping.__getitem__Select-based selector.DevpollSelector.filenoKqueueSelector.register_readersBaseSelector.registerMapping of file objects to selector keys._BaseSelectorImpl.modify_BaseSelectorImpl.unregisterEPOLLIN     @@{!r} is not registered_PollLikeSelector.__init__Underlying file descriptor.kqueueBaseSelector.unregister_PollLikeSelector.registerBase selector implementation.KQ_EV_DELETEOptional opaque data associated to this file object.
    For example, this could be used to store a per-client session ID.SelectSelector.selectfd_event_listInvalid file descriptor: {}_SelectorMapping.__len__KQ_FILTER_READEpollSelector.closeSelector is closed_BaseSelectorImpl._key_from_fdSelectSelector.unregisterSelectSelector.__init__KqueueSelector.unregisterKQ_FILTER_WRITEReturn a mapping of file objects to selector keys.{!r} (FD {}) is already registered_BaseSelectorImpl.get_mapKqueueSelector.select_writersSelectors module.

This module allows high-level and efficient I/O multiplexing, built upon the
`select` module primitives.
Selector abstract base class.

    A selector supports registering file objects to be monitored for specific
    I/O events.

    A file object is a file descriptor or any object with a `fileno()` method.
    An arbitrary object can be attached to the file object, which can be used
    for example to store context information, a callback, etc.

    A selector can use various implementations (select(), poll(), epoll()...)
    depending on the platform. The default `Selector` class uses the most
    efficient implementation on the current platform.
    Close the selector.

        This must be called to make sure that any underlying resource is freed.
        _BaseSelectorImpl.__init___SelectorMapping.__init__Return a file descriptor from a file object.

    Parameters:
    fileobj -- file object or file descriptor

    Returns:
    corresponding file descriptor

    Raises:
    ValueError if the object is invalid
    shlex: I see whitespace in word statepush_tokenshlex: token=EOFshlex.__init__commenterslexershlex.__next__Push a token onto the stack popped by the get_token methodshlex.push_tokenPush an input source onto the lexer's input source stack.shlex: popping to %s, line %derror_leadernextcharshlex.get_tokenReturn a shell-escaped version of the string *s*.pushback();<>|&shlex: I see EOF in quotes stateread_tokenescapedstatenewstreamshlex: I see EOF in escape statePop the input source stack._print_tokensinfilewordcharspush_sourceshlex.read_tokeninstreampunctuation_charsshlex: I see whitespace in whitespace stateNo closing quotationabcdfeghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789_shlex: pushing token shlex: I see punctuation in word state[^\w@%+=:,./-]Get a token from the input stream (or from stack if it's nonempty)shlex.error_leader 	
A lexical analyzer class for simple shell-like syntaxes.shlex.pypop_sourcefilestackshlex: in state %r I see character: %rsourcehookshlex.push_sourceshlex: pushing to file %sshlex: pushing to stream %sshlex: raw token=shlex: popping token <module shlex>whitespace_splitToken: _pushback_chars'"'"'Emit a C-compiler-like, Emacs-friendly error-message leader.shlex.pop_sourceshlex: raw token=EOFHook called on a filename to be sourced.shlex.sourcehookNo escaped characterÃÃ Ã¡Ã¢Ã£Ã¤Ã¥Ã¦Ã§Ã¨Ã©ÃªÃ«Ã¬Ã­Ã®Ã¯Ã°Ã±Ã²Ã³Ã´ÃµÃ¶Ã¸Ã¹ÃºÃ»Ã¼Ã½Ã¾Ã¿ÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃ~-./*?=shlex.__iter___find_unsafeescapedquotes"%s", line %d: Registers an archive format.

    name is the name of the format. function is the callable that will be
    used to create archives. If provided, extra_args is a sequence of
    (name, value) tuples that will be passed as arguments to the callable.
    description can be provided to describe the format, and will be returned
    by the get_archive_formats() function.
    _LZMA_SUPPORTED_set_uid_gidroot_dirlistxattrRegistryErrorchflagsENOTSUPExecError<module shutil>_rmtree_safe_fdignored_namesS_IMODEextract_dirformat_infof_bavailorig_stCannot move a directory '%s' into itself '%s'.Destination path '%s' already existssrcnamepathextst_mtime_nsst_flagsfsrcfdst_access_checkthefile_samefileTotal space in bytesignore_errors_destinsrctopfdscandir_itdirfdRecursively copy a directory tree.

    The destination directory must not already exist.
    If exception(s) occur, an Error is raised with a list of reasons.

    If the optional symlinks flag is true, symbolic links in the
    source tree result in symbolic links in the destination tree; if
    it is false, the contents of the files pointed to by symbolic
    links are copied. If the file pointed by the symlink doesn't
    exist, an exception will be added in the list of errors raised in
    an Error exception at the end of the copy process.

    You can set the optional ignore_dangling_symlinks flag to true if you
    want to silence this exception. Notice that this has no effect on
    platforms that don't support os.symlink.

    The optional ignore argument is a callable. If given, it
    is called with the `src` parameter, which is the directory
    being visited by copytree(), and `names` which is the list of
    `src` contents, as returned by os.listdir():

        callable(src, names) -> ignored_names

    Since copytree() is called recursively, the callable will be
    called once for each directory that is copied. It returns a
    list of names relative to the `src` directory that should
    not be copied.

    The optional copy_function argument is a callable that will be used
    to copy each file. It will be called with the source path and the
    destination path as arguments. By default, copy2() is used, but any
    function that supports the same signature (like copy()) can be used.

    SameFileError_make_tarball.<locals>._set_uid_gidCopy mode bits from src to dst.

    If follow_symlinks is not set, symlinks aren't followed if and only
    if both `src` and `dst` are symlinks.  If `lchmod` isn't available
    (e.g. Linux) this method does nothing.

    Copy data and metadata. Return the file's destination.

    Metadata is copied with copystat(). Please see the copystat function
    for more information.

    The destination may be a directory.

    If follow_symlinks is false, symlinks won't be followed. This
    resembles GNU's "cp -P src dst".

    Raised when trying to do a kind of operation (e.g. copying) which is
    not supported on a special file (e.g. a named pipe)save_cwdgztarCopy data from src to dst.

    If follow_symlinks is not set and src is a symbolic link, a new
    symlink will be created instead of copying the file it points to.

    Copy extended filesystem attributes from `src` to `dst`.

        Overwrite existing attributes.

        If `follow_symlinks` is false, symlinks won't be followed.

        Create an archive file (eg. zip or tar).

    'base_name' is the name of the file to create, minus any format-specific
    extension; 'format' is the archive format: one of "zip", "tar", "gztar",
    "bztar", or "xztar".  Or any other registered format.

    'root_dir' is a directory that will be the root directory of the
    archive; ie. we typically chdir into 'root_dir' before creating the
    archive.  'base_dir' is the directory where we start archiving from;
    ie. 'base_dir' will be the common prefix of all files and
    directories in the archive.  'root_dir' and 'base_dir' both default
    to the current directory.  Returns the name of the archive file.

    'owner' and 'group' are used when creating a tar archive. By default,
    uses the current owner and group.
    _use_fd_functions_check_unpack_optionsignore_patterns.<locals>._ignore_patternsunpack_archivedisk_usage_get_gidEPERMCannot call rmtree on a symbolic linkregister_archive_format_make_zipfiledstnameEOPNOTSUPPENODATA_nopuser and/or group must be setterminal_sizearchive_dirtar_compressionzip_filenamechmod_func%s is already registered for "%s"ZIP fileunregister_unpack_formatRecursively move a file or directory to another location. This is
    similar to the Unix "mv" command. Return the file or directory's
    destination.

    If the destination is a directory or a symlink to a directory, the source
    is moved inside the directory. The destination path must not already
    exist.

    If the destination already exists but is not a directory, it may be
    overwritten depending on os.rename() semantics.

    If the destination is on our current filesystem, then rename() is used.
    Otherwise, src is copied to the destination and then removed. Symlinks are
    recreated under the new name if os.rename() fails because of cross
    filesystem renames.

    The optional `copy_function` argument is a callable that will be used
    to copy the source or it will be delegated to `copytree`.
    By default, copy2() is used, but any function that supports the same
    signature (like copy()) can be used.

    A lot more could be done here...  A look at a mv.c shows a lot of
    the issues this implementation glosses over.

    Unpack zip `filename` to `extract_dir`
    unregister_archive_formattotal used freesupports_follow_symlinksRemoves the pack format from the registry.Unknown unpack format '{0}'Change owner user and group of the given path.

    user and group can be the uid/gid or the user/group names, and in that case,
    they are converted to their respective uid/gid.
    dry_rungzip'ed tar-filebzip2'ed tar-fileCopy file metadata

    Copy the permission bits, last access time, last modification time, and
    flags from `src` to `dst`. On Linux, copystat() also copies the "extended
    attributes" where possible. The file contents, owner, and group are
    unaffected. `src` and `dst` are path names given as strings.

    If the optional flag `follow_symlinks` is not set, symlinks aren't
    followed if and only if both `src` and `dst` are symlinks.
    _copyxattr_ntuple_diskusagecompress_extarchive_nameRecursively delete a directory tree.

    If ignore_errors is set, errors are ignored; otherwise, if onerror
    is set, it is called to handle the error with arguments (func,
    path, exc_info) where func is platform and implementation dependent;
    path is the argument to that function that caused it to fail; and
    exc_info is a tuple returned by sys.exc_info().  If ignore_errors
    is false and onerror is None, an exception is raised.

    creating '%s' and adding '%s' to itcopymodeReturn disk usage statistics about the given path.

        Returned value is a named tuple with attributes 'total', 'used' and
        'free', which are the amount of total, used and free space, in bytes.
        which.<locals>.<genexpr>get_terminal_sizecopy data from file-like object fsrc to file-like object fdstCopy data and mode bits ("cp src dst"). Return the file's destination.

    The destination may be a directory.

    If follow_symlinks is false, symlinks won't be followed. This
    resembles GNU's "cp -P src dst".

    If source and destination are the same file, a SameFileError will be
    raised.

    Returns a list of supported formats for unpacking.

    Each element of the returned sequence is a tuple
    (name, extensions, description)
    tarobjEnsure that the parent directory of `path` existsxz'ed tar-filegetxattrreal_dstlinktomake_archive`%s` is a named pipe_rmtree_unsafeFree space in bytesCreating tar archivef_blocksshutil.pyuncompressed tar filebad value for 'compress', or compression format not supported : {0}_ARCHIVE_FORMATSUnknown archive format '{0}'copystat.<locals>._nopThe %s object is not callablewinerrorexisting_extensions_ZLIB_SUPPORTEDextra_args elements are : (arg_name, value)Raised when a command could not be executedget_unpack_formatssetxattr_basenameChecks what gets registered as an unpacker._find_unpack_format_get_uidstatvfsCreate a zip file from all the files under 'base_dir'.

    The output zip file will be named 'base_name' + ".zip".  Returns the
    name of the output zip file.
    Create a (possibly compressed) tar file from all the files under
    'base_dir'.

    'compress' must be "gzip" (the default), "bzip2", "xz", or None.

    'owner' and 'group' can be used to define an owner and a group for the
    archive that is being built. If not provided, the current owner and group
    will be used.

    The output tar file will be named 'base_name' +  ".tar", possibly plus
    the appropriate compression extension (".gz", ".bz2", or ".xz").

    Returns the output filename.
    _unpack_tarfile{!r} and {!r} are the same file_BZ2_SUPPORTEDPATHEXTdirnamescreating %sno such user: {!r}supports_dir_fdstat_funcUnpack an archive.

    `filename` is the name of the archive.

    `extract_dir` is the name of the target directory, where the archive
    is unpacked. If not provided, the current working directory is used.

    `format` is the archive format: one of "zip", "tar", "gztar", "bztar",
    or "xztar".  Or any other registered format.  If not provided,
    unpack_archive will use the filename extension and see if an unpacker
    was registered for that extension.

    In case none is found, a ValueError is raised.
    Get the size of the terminal window.

    For each of the two dimensions, the environment variable, COLUMNS
    and LINES respectively, is checked. If the variable is defined and
    the value is a positive integer, it is used.

    When COLUMNS or LINES is not defined, which is the common case,
    the terminal connected to sys.__stdout__ is queried
    by invoking os.get_terminal_size.

    If the terminal size cannot be successfully queried, either because
    the system doesn't support querying, or because we are not
    connected to a terminal, the value given in fallback parameter
    is used. Fallback defaults to (80, 24) which is the default
    size used by many terminal emulators.

    The value returned is a named tuple of type os.terminal_size.
    %s is not a zip fileRegisters an unpack format.

    `name` is the name of the format. `extensions` is a list of extensions
    corresponding to the format.

    `function` is the callable that will be
    used to unpack archives. The callable will receive archives to unpack.
    If it's unable to handle an archive, it needs to raise a ReadError
    exception.

    If provided, `extra_args` is a sequence of
    (name, value) tuples that will be passed as arguments to the callable.
    description can be provided to describe the format, and will be returned
    by the get_unpack_formats() function.
    changing into '%s'Returns a gid, given a group name.f_frsizeGiven a command, mode, and a PATH string, return the path which
    conforms to the given mode on the PATH, or None if there is no such
    file.

    `mode` defaults to os.F_OK | os.X_OK. `path` defaults to the result
    of os.environ.get("PATH"), or can be overridden with a custom search
    path.

    Return disk usage statistics about the given path.

        Returned values is a named tuple with attributes 'total', 'used' and
        'free', which are the amount of total, used and free space, in bytes.
        SpecialFileErrorReturns a list of supported formats for archiving and unarchiving.

    Each element of the returned sequence is a tuple (name, description)
    extra_args needs to be a sequenceRaised when source and destination are the same file.w|%s_getdiskusagest_atime_nschanging back to '%s'%s is not a compressed or uncompressed tar file_UNPACK_FORMATSFunction that can be used as copytree() ignore parameter.

    Patterns is a sequence of glob-style patterns
    that are used to exclude filesrmtree.<locals>.onerrorunknown archive format '%s'no such group: {!r}Utility functions for copying and archiving files and directory trees.

XXX The functions here don't copy the resource fork or other metadata on Mac.

avoids_symlink_attacksis_symlinkRaised when a registry operation with the archiving
    and unpacking registries failsÛ   zcopyfileobjzcopyfilezcopymodezcopystatzcopyzcopy2zcopytreezmovezrmtreezErrorzSpecialFileErrorz	ExecErrorzmake_archivezget_archive_formatszregister_archive_formatzunregister_archive_formatzget_unpack_formatszregister_unpack_formatzunregister_unpack_formatzunpack_archivezignore_patternszchownzwhichzget_terminal_sizezSameFileErrorThe registered function must be a callablewhich.<locals>._access_check_unpack_zipfileReturns an uid, given a user name.Unpack tar/tar.gz/tar.bz2/tar.xz `filename` to `extract_dir`
    supports_fd_ensure_directoryf_bfreecopystat.<locals>.lookupUsed space in bytesRaised when an archive cannot be readsigpending.<locals>.<genexpr>CTRL_SIG_BLOCKsigsetpthread_sigmask.<locals>.<genexpr>Convert a numeric value to an IntEnum member.
    If it's not a known member, return the numeric value itself.
    sigwaitConvert an IntEnum member to a numeric value.
    If it's not an IntEnum member return the value itself.
    _int_to_enumsignal.pysigs_set_signalSIG_SETMASKsignalnumSIG_UNBLOCK_enum_to_intretsig<module signal>Sigmasks_wrapshistoryGetModuleFileNameenv_basesystem_sitemakepath\PythonPYTHONUSERBASEdircaseenablerlcompleter.<locals>.register_readlinegetegidsetquit
Remainder of file ignoredcheck_enableusersite/lib/python/site-packagessitedirconffileknown_paths_frameworkimport	user_basesitedircaseRun custom user specific code, if available.Add a per user site-package to sys.path

    Each user has its own python directory with site-packages in the
    home directory.
    Set all module __file__ and __cached__ attributes to an absolute path Remove duplicate entries from sys.path along with making them
    absoluteReturns the user-specific site-packages directory path.

    If the global variable ``USER_SITE`` is not initialized yet, this
    function will also set it.
    userbase    %s [--user-base] [--user-site]

    Without arguments print some useful information
    With arguments print the value of USER_BASE and/or USER_SITE separated
    by '%s'.

    Exit codes with --user-base or --user-site:
      0 - user site directory is enabled
      1 - user site directory is disabled by user
      2 - uses site directory is disabled by super user
          or for security reasons
     >2 - unknown error
    PREFIXES__interactivehook__sethelpergetuserbase_frozen_importlibAppend module search paths for third-party packages to sys.path.

****************************************************************
* This module is automatically imported during initialization. *
****************************************************************

This will append site-specific paths to the module search path.  On
Unix (including Mac OSX), it starts with sys.prefix and
sys.exec_prefix (if different) and appends
lib/python<version>/site-packages.
On other platforms (such as Windows), it tries each of the
prefixes directly, as well as with lib/site-packages appended.  The
resulting directories, if they exist, are appended to sys.path, and
also inspected for path configuration files.

If a file named "pyvenv.cfg" exists one directory above sys.executable,
sys.prefix and sys.exec_prefix are set to that directory and
it is also checked for site-packages (sys.base_prefix and
sys.base_exec_prefix will always be the "real" prefixes of the Python
installation). If "pyvenv.cfg" (a bootstrap configuration file) contains
the key "include-system-site-packages" set to anything other than "false"
(case-insensitive), the system-level prefixes will still also be
searched for site-packages; otherwise they won't.

All of the resulting site-specific directories, if they exist, are
appended to sys.path, and also inspected for path configuration
files.

A path configuration file is a file whose name has the form
<package>.pth; its contents are additional directories (one per line)
to be added to sys.path.  Non-existing directories (or
non-directories) are never added to sys.path; no directory is added to
sys.path more than once.  Blank lines and lines beginning with
'#' are skipped. Lines starting with 'import' are executed.

For example, suppose sys.prefix and sys.exec_prefix are set to
/usr/local and there is a directory /usr/local/lib/python2.5/site-packages
with three subdirectories, foo, bar and spam, and two path
configuration files, foo.pth and bar.pth.  Assume foo.pth contains the
following:

  # foo package configuration
  foo
  bar
  bletch

and bar.pth contains:

  # bar package configuration
  bar

Then the following directories are added to sys.path, in this order:

  /usr/local/lib/python2.5/site-packages/bar
  /usr/local/lib/python2.5/site-packages/foo

Note that bletch is omitted because it doesn't exist; bar precedes foo
because bar.pth comes alphabetically before foo.pth; and spam is
omitted because it is not mentioned in either path configuration file.

The readline module is also automatically configured to enable
completion for systems that support it.  This can be overridden in
sitecustomize, usercustomize or PYTHONSTARTUP.  Starting Python in
isolated mode (-I) disables automatic readline configuration.

After these operations, an attempt is made to import a module
named sitecustomize, which can perform arbitrary additional
site-specific customizations.  If this import fails with an
ImportError exception, it is silently ignored.
enablerlcompleter.<locals>.register_readline.<locals>.write_historyAdd 'sitedir' argument to sys.path if missing and handle .pth files in
    'sitedir'abs_paths_homeSet 'copyright' and 'credits' in builtinsReturn a set containing all existing file system items from sys.path.sitepackagesorig_pathAPPDATAaddsitedir\site-packagesProcess a .pth file within the site-packages directory:
       For each line in the file, either combine it with sitedir to a path
       and add that to known_paths, or execute it if it starts with 'import '.
        Thanks to CWI, CNRI, BeOpen.com, Zope Corporation and a cast of thousands
    for supporting Python development.  See www.python.org for more information.LICENSE_getuserbase.<locals>.joinusercandidate_confsread_history_fileENABLE_USER_SITE    %r,_init_pathinfosetcopyrightAdd site-packages to sys.pathwrite_history_filesys.path = [itemcaseuser_site_get_pathError processing line {:d} of {}:
Ctrl-Z plus ReturnCtrl-D (i.e. EOF)read_init_fileError in sitecustomize; set PYTHONVERBOSE for traceback:
%s: %s
Jython is maintained by the Jython developers (www.jython.org).readline_doc__PYVENV_LAUNCHER__Check if user site directory is safe for inclusion

    The function tests for the command line flag (including environment var),
    process uid/gid equal to effective uid/gid.

    None: Disabled for security reasons
    False: Disabled by user (command line option)
    True: Safe and enabled
    getusersitepackagesUSER_SITE: %r (%s)exe_dirsite_prefixconf_basenamevirtual_confbind ^I rl_complete_base_executableaddpackageEnable default readline configuration on interactive prompts, by
    registering a sys.__interactivehook__.

    If the readline module can be imported, the hook will set the Tab key
    as completion key and register ~/.python_history as history file.
    This can be overridden in the sitecustomize or usercustomize module,
    or in a PYTHONSTARTUP file.
    ENABLE_USER_SITE: %raddusersitepackagesSee https://www.python.org/psf/license/execusercustomizeReturns the `user base` directory path.

    The `user base` directory can be used to store data. If the global
    variable ``USER_BASE`` is not initialized yet, this function will also set
    it.
    Run custom site specific code, if available.removeduppathsexecsitecustomizeLICENSE.txtgetsitepackagesaddsitepackagesget_current_history_lengthlibeditAdd standard site-specific directories to the module search path.

    This function is called automatically when this module is imported,
    unless the python interpreter was started with the -S flag.
    Returns a list containing all global site-packages directories.

    For each directory present in ``prefixes`` (or the global ``PREFIXES``),
    this function will find its `site-packages` subdirectory depending on the
    system environment, and will return a list of full paths.
    USER_BASE: %r (%s)getgid<module site>Define new builtins 'quit' and 'exit'.

    These are objects which make the interpreter exit when called.
    The repr of each object contains a hint at how it works.

    Error in usercustomize; set PYTHONVERBOSE for traceback:
%s: %s
errorTabcount must be a positive integer (got {!r})<%s.%s%s fd=%i, family=%s, type=%s, proto=%iOnly SOCK_STREAM socket type is supportedTrue if the SocketIO is open for writing.
        laddrRead-only access to the address family for this socket.
        socket.__init__The network has been shut down., laddr=%sThe operation was interrupted.socktypeRead up to len(b) bytes into the writable buffer *b* and return
        the number of bytes read.  If the socket is non-blocking and no bytes
        are available, None is returned.

        If *b* is non-empty, a 0 return value indicates that the connection
        was shutdown at the other end.
        accept() -> (socket object, address info)

        Wait for an incoming connection.  Return a new socket
        representing the connection, and the address of the client.
        For IP sockets, the address info is a pair (hostaddr, port).
        SocketIO.readintoThe host is down.SocketIO.readablegetdefaulttimeoutcanonnameSocketIO.__init__, raddr=%s_blocking_errnossocketpair([family[, type[, proto]]]) -> (socket object, socket object)
Create a pair of socket objects from the sockets returned by the platform
socketpair() function.
The arguments are the same as for socket() except the default family is AF_UNIX
if defined on the platform; otherwise, the default is AF_INET.
SocketIO.modeA bad file handle was passed.Set the inheritable flag of the socketMSG_set_inheritablenfdcannot read from timed out objectOnly protocol zero is supportedsocket.makefilesocket.get_inheritableReturn the file descriptor of the underlying socket.
        _sendfile_use_sendfileos_sendfilePermission denied.Resolve host and port into list of address info entries.

    Translate the host/port argument into a sequence of 5-tuples that contain
    all the necessary arguments for creating a socket connected to that service.
    host is a domain name, a string representation of an IPv4/v6 address or
    None. port is a string service name such as 'http', a numeric port number or
    None. By passing None as the value of host and port, you can pass NULL to
    the underlying C API.

    The family, type and proto arguments can be optionally specified in order to
    narrow the list of addresses returned. Passing zero as a value for each of
    these arguments selects the full range of results.
    _get_exports_listTrue if the SocketIO is open for seeking.
        _realsocketunbuffered streams must be binarydetach() -> file descriptor

        Close the socket object without closing the underlying file descriptor.
        The object cannot be used after this call, but the file descriptor
        can be reused for other purposes.  The file descriptor is returned.
        rawmodesocket.dupsocketpair([family[, type[, proto]]]) -> (socket object, socket object)

        Create a pair of socket objects from the sockets returned by the platform
        socketpair() function.
        The arguments are the same as for socket() except the default family is
        AF_UNIX if defined on the platform; otherwise, the default is AF_INET.
         fromshare(info) -> socket object

        Create a socket object from the bytes object returned by
        socket.share(pid).
        socket._decref_socketiosBufferedWriterAI_getaddrinfo returns an empty listsocket.__repr__I/O operation on closed socket.socket.__enter__The socket operation would blocksocknototal_sentselector_selectOnly AF_INET and AF_INET6 socket address families are supportedonly SOCK_STREAM type sockets are supportedClose the SocketIO object.  This doesn't close the underlying
        socket, except if all references to it have disappeared.
        SocketIO.seekablesocket.type127.0.0.1socket.acceptConnection refused._io_refs<module socket>AddressFamilySocketKindThe host is unreachable._intenum_convertersocket.closeThe network address is in use.A fault occurred on the network??Write the given bytes or bytearray object *b* to the socket
        and return the number of bytes written.  This can be less than
        len(b) if not all data could be written.  If the socket is
        non-blocking and no bytes could be written None is returned.
         fromfd(fd, family, type[, proto]) -> socket object

    Create a socket object from a duplicate of the given file
    descriptor.  The remaining arguments are the same as for socket().
    RawIOBasesetblockinginvalid mode %r (only r, w, b allowed)sock_sendThe name is too long.BufferedRWPairThis module provides socket operations and some related functions.
On Unix, it supports IP (Internet Protocol) and Unix domain sockets.
On other systems, it only supports IP. Functions specific for a
socket are available as methods of the socket object.

Functions:

socket() -- create a new socket object
socketpair() -- create a pair of new socket objects [*]
fromfd() -- create a socket object from an open file descriptor [*]
fromshare() -- create a socket object from data received from socket.share() [*]
gethostname() -- return the current hostname
gethostbyname() -- map a hostname to its IP number
gethostbyaddr() -- map an IP number or hostname to DNS info
getservbyname() -- map a service name and a protocol name to a port number
getprotobyname() -- map a protocol name (e.g. 'tcp') to a number
ntohs(), ntohl() -- convert 16, 32 bit int from network to host byte order
htons(), htonl() -- convert 16, 32 bit int from host to network byte order
inet_aton() -- convert IP addr string (123.45.67.89) to 32-bit packed format
inet_ntoa() -- convert 32-bit packed format IP to string (123.45.67.89)
socket.getdefaulttimeout() -- get the default timeout value
socket.setdefaulttimeout() -- set the default timeout value
create_connection() -- connects to an address, with an optional timeout and
                       optional source address.

 [*] not available on all platforms!

Special objects:

SocketType -- type object for socket objects
error -- exception raised for I/O errors
has_ipv6 -- boolean value indicating if IPv6 is supported

IntEnum constants:

AF_INET, AF_UNIX -- socket domains (first argument to socket() call)
SOCK_STREAM, SOCK_DGRAM, SOCK_RAW -- socket types (second argument)

Integer constants:

Many other constants may be defined; these may be used in calls to
the setsockopt() and getsockopt() methods.
Wrap __repr__() to reveal the real class name and socket
        address(es).
        _GiveupOnSendfilesocket._check_sendfile_paramsrwbA blocking operation is already in progress.socket._sendfile_use_sendfile_checkWritableCannot serialize socket object_checkReadabledup() -> socket object

        Duplicate the socket. Return a new socket object connected to the same
        system resource. The new socket is non-inheritable.
        Raw I/O implementation for stream sockets.

    This class supports the makefile() method on sockets.  It provides
    the raw I/O interface on top of a socket object.
    file should be opened in binary modeSocketIO.filenosocket.sendfile0.0.0.0non-blocking sockets are not supportedget_handle_inheritableGet the inheritable flag of the socketos.sendfile() not available on this platforminvalid mode: %rsendfile(file[, offset[, count]]) -> sent

        Send a file until EOF is reached by using high-performance
        os.sendfile() and return the total number of bytes which
        were sent.
        *file* must be a regular file object opened in binary mode.
        If os.sendfile() is not available (e.g. Windows) or file is
        not a regular file socket.send() will be used instead.
        *offset* tells from where to start reading the file.
        If specified, *count* is the total number of bytes to transmit
        as opposed to sending the file until EOF is reached.
        File position is updated on return or also in case of error in
        which case file.tell() can be used to figure out the number of
        bytes which were sent.
        The socket must be of SOCK_STREAM type.
        Non-blocking sockets are not supported.
        SocketIO.write_LOCALHOSTcsocksocket.pySocketIO.closeset_handle_inheritableAddressInfosocket.__exit__Connect to *address* and return the socket object.

    Convenience function.  Connect to *address* (a 2-tuple ``(host,
    port)``) and return the socket object.  Passing the optional
    *timeout* parameter will set the timeout on the socket instance
    before attempting to connect.  If no *timeout* is supplied, the
    global default timeout setting returned by :func:`getdefaulttimeout`
    is used.  If *source_address* is set it must be a tuple of (host, port)
    for the socket to bind as a source address before making the connection.
    A host of '' or port 0 tells the OS to use the default.
    SocketIO.writable_readingAn invalid operation was attempted.A subclass of _socket.socket adding the makefile() method.True if the SocketIO is open for reading.
        EWOULDBLOCKThe operation timed out.socket._real_closesocket.__getstate__ipaddrs_timeout_occurredRead-only access to the socket type.
        EAGAINsocket.familySocketIO.namesocket.set_inheritableConvert a numeric family value to an IntEnum member.

    If it's not a known member, return the numeric value itself.
    ::1MsgFlagsocket.detachThe connection has been reset.makefile(...) -> an I/O stream connected to the socket

        The arguments are as for io.open() after the filename, except the only
        supported mode values are 'r' (default), 'w' and 'b'.
        BlockingIOErrorGet fully qualified domain name from name.

    An empty argument is interpreted as meaning the local host.

    First the hostname returned by gethostbyaddr() is checked, then
    possibly existing aliases. In case no FQDN is available, hostname
    from gethostname() is returned.
    _LOCALHOST_V6process_request_threadVerify the request.  May be overridden.

        Return True if we should proceed with this request.

        ThreadingUnixStreamServerBaseServer.serve_foreverGet the request and client address from the socket.

        May be overridden.

        ThreadingUDPServerBaseServer.__init___SocketWriter.filenoUDP server class.BaseServer.handle_timeoutBaseRequestHandler.finishForkingTCPServeraddress_familyBaseServer.verify_requestBaseServer.__exit__Finish one request by instantiating RequestHandlerClass.BaseRequestHandler.__init__Called if no new request arrives within self.timeout.

        Overridden by ForkingMixIn.
        Constructor.  May be extended, do not override.max_packet_sizeInternal routine to wait for children that have exited.ThreadingMixIn.process_request_threadTCPServer.server_close_SocketWriter.__init__UDPServer.get_requestHandle one request at a time until shutdown.

        Polls for shutdown every poll_interval seconds. Ignores
        self.timeout. If you need to do periodic tasks, do them in
        another thread.
        Called by constructor to bind the socket.

        May be overridden.

        ThreadingUnixDatagramServerUDPServer.close_requestStreamRequestHandler.setupdisable_nagle_algorithm_SocketWriter.writableStart a new thread to process the request.Handle an error gracefully.  May be overridden.

        The default is to print a traceback and continue.

        Call finish_request.

        Overridden by ForkingMixIn and ThreadingMixIn.

        bind_and_activateactive_childrenThreadingMixIn.server_close_BaseServer__is_shut_downUDPServer.shutdown_requestThreadingTCPServerDatagramRequestHandler.setupmax_childrenBaseServer.__enter__SHUT_WRGeneric socket server classes.

This module tries to capture the various aspects of defining a server:

For socket-based servers:

- address family:
        - AF_INET{,6}: IP (Internet Protocol) sockets (default)
        - AF_UNIX: Unix domain sockets
        - others, e.g. AF_DECNET are conceivable (see <socket.h>
- socket type:
        - SOCK_STREAM (reliable stream, e.g. TCP)
        - SOCK_DGRAM (datagrams, e.g. UDP)

For request-based servers (including socket-based):

- client address verification before further looking at the request
        (This is actually a hook for any processing that needs to look
         at the request before anything else, e.g. logging)
- how to handle multiple requests:
        - synchronous (one request is handled at a time)
        - forking (each request is handled by a new process)
        - threading (each request is handled by a new thread)

The classes in this module favor the server type that is simplest to
write: a synchronous TCP/IP server.  This is bad class design, but
save some typing.  (There's also the issue that a deep class hierarchy
slows down method lookups.)

There are five classes in an inheritance diagram, four of which represent
synchronous servers of four types:

        +------------+
        | BaseServer |
        +------------+
              |
              v
        +-----------+        +------------------+
        | TCPServer |------->| UnixStreamServer |
        +-----------+        +------------------+
              |
              v
        +-----------+        +--------------------+
        | UDPServer |------->| UnixDatagramServer |
        +-----------+        +--------------------+

Note that UnixDatagramServer derives from UDPServer, not from
UnixStreamServer -- the only difference between an IP and a Unix
stream server is the address family, which is simply repeated in both
unix server classes.

Forking and threading versions of each type of server can be created
using the ForkingMixIn and ThreadingMixIn mix-in classes.  For
instance, a threading UDP server class is created as follows:

        class ThreadingUDPServer(ThreadingMixIn, UDPServer): pass

The Mix-in class must come first, since it overrides a method defined
in UDPServer! Setting the various member variables also changes
the behavior of the underlying server mechanism.

To implement a service, you must derive a class from
BaseRequestHandler and redefine its handle() method.  You can then run
various versions of the service by combining one of the server classes
with your request handler class.

The request handler class must be different for datagram or stream
services.  This can be hidden by using the request handler
subclasses StreamRequestHandler or DatagramRequestHandler.

Of course, you still have to use your head!

For instance, it makes no sense to use a forking server if the service
contains state in memory that can be modified by requests (since the
modifications in the child process would never reach the initial state
kept in the parent process and passed to each child).  In this case,
you can use a threading server, but you will probably have to use
locks to avoid two requests that come in nearly simultaneous to apply
conflicting changes to the server state.

On the other hand, if you are building e.g. an HTTP server, where all
data is stored externally (e.g. in the file system), a synchronous
class will essentially render the service "deaf" while one request is
being handled -- which may be for a very long time if a client is slow
to read all the data it has requested.  Here a threading or forking
server is appropriate.

In some cases, it may be appropriate to process part of a request
synchronously, but to finish processing in a forked child depending on
the request data.  This can be implemented by using a synchronous
server and doing an explicit fork in the request handler class
handle() method.

Another approach to handling multiple simultaneous requests in an
environment that supports neither threads nor fork (or where these are
too expensive or inappropriate for the service) is to maintain an
explicit table of partially finished requests and to use a selector to
decide which request to work on next (or whether to handle a new
incoming request).  This is particularly important for stream services
where each client can potentially be connected for a long time (if
threads or subprocesses cannot be used).

Future work:
- Standard classes for Sun RPC (which uses either UDP or TCP)
- Standard mix-in classes to implement various authentication
  and encryption schemes

XXX Open problems:
- What to do with out-of-band data?

BaseServer:
- split generic "request" functionality out into BaseServer class.
  Copyright (C) 2000  Luke Kenneth Casson Leighton <lkcl@samba.org>

  example: read entries from a SQL database (requires overriding
  get_request() to return a table entry from the database).
  entry is processed by a RequestHandlerClass.

ForkingMixIn.server_closeCollect the zombie child processes regularly in the ForkingMixIn.

            service_actions is called in the BaseServer's serve_forever loop.
            ForkingMixIn.service_actionswbufsize_SocketWriter.writeException happened during processing of request from0.4deadline_threadsblock_on_closeSO_REUSEADDRHandle one request, without blocking.

        I assume that selector.select() has returned that the socket is
        readable before this function was called, so there should be no risk of
        blocking in get_request().
        BaseServer.handle_errorCalled by the serve_forever() loop.

        May be overridden by a subclass / Mixin to implement any code that
        needs to be run during the loop.
        TCPServer.server_activateBase class for request handler classes.

    This class is instantiated for each request to be handled.  The
    constructor sets the instance variables request, client_address
    and server, and then calls the handle() method.  To implement a
    specific service, all you need to do is to derive a class which
    defines a handle() method.

    The handle() method can find the request as self.request, the
    client address as self.client_address, and the server (in case it
    needs access to per-server information) as self.server.  Since a
    separate instance is created for each request, the handle() method
    can define other arbitrary instance variables.

    TCPServer.close_requestUDPServer.server_activateStops the serve_forever loop.

        Blocks until the loop has finished. This must be called while
        serve_forever() is running in another thread, or it will
        deadlock.
        ForkingMixIn.process_request<module socketserver>BaseServer.process_request_handle_request_noblockBaseServer._handle_request_noblockBaseServer.close_requestBaseServer.shutdown_requestCalled to clean-up the server.

        May be overridden.

        Called to clean up an individual request._ServerSelectorForkingMixIn.collect_childrenStreamRequestHandler.finishBaseServer.server_activateForkingUDPServerTCPServer.__init__BaseServer.handle_requestsocketserver.pyDefine self.rfile and self.wfile for datagram sockets.Return socket file number.

        Interface required by selector.

        Mix-in class to handle each request in a new process.request_queue_sizesocket_typeBaseServer.finish_requestFork a new subprocess to process the request.ForkingMixIn.handle_timeoutBaseRequestHandler.handleCalled by constructor to activate the server.

        May be overridden.

        Base class for various socket-based server classes.

    Defaults to synchronous IP stream (i.e., TCP).

    Methods for the caller:

    - __init__(server_address, RequestHandlerClass, bind_and_activate=True)
    - serve_forever(poll_interval=0.5)
    - shutdown()
    - handle_request()  # if you don't use serve_forever()
    - fileno() -> int   # for selector

    Methods that may be overridden:

    - server_bind()
    - server_activate()
    - get_request() -> request, client_address
    - handle_timeout()
    - verify_request(request, client_address)
    - process_request(request, client_address)
    - shutdown_request(request)
    - close_request(request)
    - handle_error()

    Methods for derived classes:

    - finish_request(request, client_address)

    Class variables that may be overridden by derived classes or
    instances:

    - timeout
    - address_family
    - socket_type
    - request_queue_size (only for stream sockets)
    - allow_reuse_address

    Instance variables:

    - server_address
    - RequestHandlerClass
    - socket

    BaseServer.server_closeTCPServer.shutdown_requestDefine self.rfile and self.wfile for stream sockets.BaseRequestHandler.setupTCPServer.server_bindSimple writable BufferedIOBase implementation for a socket

    Does not hold data in a buffer, avoiding any need to call flush().Same as in BaseServer but as a thread.

        In addition, exception handling is done here.

        BaseServer.service_actionsCalled to shutdown and close an individual request._BaseServer__shutdown_requestHandle one request, possibly blocking.

        Respects self.timeout.
        TCPServer.filenoDatagramRequestHandler.finishMix-in class to handle each request in a new thread.TCPServer.get_requestWait for zombies after self.timeout seconds of inactivity.

            May be extended, do not override.
            Base class for server classes.

    Methods for the caller:

    - __init__(server_address, RequestHandlerClass)
    - serve_forever(poll_interval=0.5)
    - shutdown()
    - handle_request()  # if you do not use serve_forever()
    - fileno() -> int   # for selector

    Methods that may be overridden:

    - server_bind()
    - server_activate()
    - get_request() -> request, client_address
    - handle_timeout()
    - verify_request(request, client_address)
    - server_close()
    - process_request(request, client_address)
    - shutdown_request(request)
    - close_request(request)
    - service_actions()
    - handle_error()

    Methods for derived classes:

    - finish_request(request, client_address)

    Class variables that may be overridden by derived classes or
    instances:

    - timeout
    - address_family
    - socket_type
    - allow_reuse_address

    Instance variables:

    - RequestHandlerClass
    - socket

    _Enum_set_npn_protocolsSSLSocket.getpeercertsuppress_ragged_eofsOPENSSL_VERSION_NUMBEROPENSSL_VERSION_INFOReturn the currently selected NPN protocol as a string, or ``None``
        if a next protocol was not negotiated or if NPN is not supported by one
        of the peers.not a callable objectDefaultVerifyPathshost_ipdnsnamescommonNameSSLSocket.session_reused_sessionsni_callbacksendmsgciphersslsock_ASN1Objectload_default_certsPROTO_TLSv1SSLContext.verify_mode_wrap_socketverify_client_post_handshakefromnidSSLWantReadErrorrecvmsgbinary_formReturn the currently selected ALPN protocol as a string, or ``None``
        if a next protocol was not negotiated or if ALPN is not supported by one
        of the peers.SSLContext.wrap_bio_ASN1Object.fromnameHAS_NPNNPN protocols must be 1 to 255 in lengthload_verify_locationsssl_versionsocket_errorrecvmsg_into_encode_hostnameattempt to connect already-connected SSLSocket!SSLObject.shared_ciphersPROTOCOL_SSLv2unable to enumerate Windows certificate storeGet channel binding data for current connection.  Raise ValueError
        if the requested `cb_type` is not supported.  Return bytes of the data
        or None if the data is not available (e.g. before the handshake).HAS_SSLv2Get channel binding data for current connection.  Raise ValueError
        if the requested `cb_type` is not supported.  Return bytes of the data
        or None if the data is not available (e.g. before the handshake).
        Matching according to RFC 6125, section 6.4.3

    - Hostnames are compared lower case.
    - For IDNA, both dn and hostname must be encoded as IDN A-label (ACE).
    - Partial wildcards like 'www*.example.org', multiple wildcards, sole
      wildcard or wildcards in labels other then the left-most label are not
      supported and a CertificateError is raised.
    - A wildcard must match at least one character.
    MemoryBIOWrite DATA to the underlying SSL channel.  Returns
        number of bytes of DATA actually transmitted.pem_cert_stringcafilecapathcadatacheck_hostname requires server_hostnameSSLSocket.get_channel_bindingDER_cert_to_PEM_certOP_NO_SSLv3SSLSocket.sendmsg %d %H:%M:%S %Y GMTnon-zero flags not allowed in calls to recv_into() on %sverify_flagsHAS_SSLv3SSLSocket.contextservernameCreate a SSLContext object for Python stdlib modules

    All Python stdlib modules shall use this function to create SSLContext
    objects in order to keep common settings in one place. The configuration
    is less restrict than create_default_context()'s to increase backward
    compatibility.
    This module provides some more Pythonic support for SSL.

Object types:

  SSLSocket -- subtype of socket.socket which does SSL over the socket

Exceptions:

  SSLError -- exception raised for I/O errors

Functions:

  cert_time_to_seconds -- convert time string used for certificate
                          notBefore and notAfter functions to integer
                          seconds past the Epoch (the time values
                          returned from time.time())

  fetch_server_certificate (HOST, PORT) -- fetch the certificate provided
                          by the server running on HOST at port PORT.  No
                          validation of the certificate is performed.

Integer constants:

SSL_ERROR_ZERO_RETURN
SSL_ERROR_WANT_READ
SSL_ERROR_WANT_WRITE
SSL_ERROR_WANT_X509_LOOKUP
SSL_ERROR_SYSCALL
SSL_ERROR_SSL
SSL_ERROR_WANT_CONNECT

SSL_ERROR_EOF
SSL_ERROR_INVALID_ERROR_CODE

The following group define certificate requirements that one side is
allowing/requiring from the other side:

CERT_NONE - no certificates from the other side are required (or will
            be looked at if provided)
CERT_OPTIONAL - certificates are not required, but if provided will be
                validated, and if validation fails, the connection will
                also fail
CERT_REQUIRED - certificates are required, and will be validated, and
                if validation fails, the connection will also fail

The following constants identify various SSL protocol variants:

PROTOCOL_SSLv2
PROTOCOL_SSLv3
PROTOCOL_SSLv23
PROTOCOL_TLS
PROTOCOL_TLS_CLIENT
PROTOCOL_TLS_SERVER
PROTOCOL_TLSv1
PROTOCOL_TLSv1_1
PROTOCOL_TLSv1_2

The following constants identify various SSL alert message descriptions as per
http://www.iana.org/assignments/tls-parameters/tls-parameters.xml#tls-parameters-6

ALERT_DESCRIPTION_CLOSE_NOTIFY
ALERT_DESCRIPTION_UNEXPECTED_MESSAGE
ALERT_DESCRIPTION_BAD_RECORD_MAC
ALERT_DESCRIPTION_RECORD_OVERFLOW
ALERT_DESCRIPTION_DECOMPRESSION_FAILURE
ALERT_DESCRIPTION_HANDSHAKE_FAILURE
ALERT_DESCRIPTION_BAD_CERTIFICATE
ALERT_DESCRIPTION_UNSUPPORTED_CERTIFICATE
ALERT_DESCRIPTION_CERTIFICATE_REVOKED
ALERT_DESCRIPTION_CERTIFICATE_EXPIRED
ALERT_DESCRIPTION_CERTIFICATE_UNKNOWN
ALERT_DESCRIPTION_ILLEGAL_PARAMETER
ALERT_DESCRIPTION_UNKNOWN_CA
ALERT_DESCRIPTION_ACCESS_DENIED
ALERT_DESCRIPTION_DECODE_ERROR
ALERT_DESCRIPTION_DECRYPT_ERROR
ALERT_DESCRIPTION_PROTOCOL_VERSION
ALERT_DESCRIPTION_INSUFFICIENT_SECURITY
ALERT_DESCRIPTION_INTERNAL_ERROR
ALERT_DESCRIPTION_USER_CANCELLED
ALERT_DESCRIPTION_NO_RENEGOTIATION
ALERT_DESCRIPTION_UNSUPPORTED_EXTENSION
ALERT_DESCRIPTION_CERTIFICATE_UNOBTAINABLE
ALERT_DESCRIPTION_UNRECOGNIZED_NAME
ALERT_DESCRIPTION_BAD_CERTIFICATE_STATUS_RESPONSE
ALERT_DESCRIPTION_BAD_CERTIFICATE_HASH_VALUE
ALERT_DESCRIPTION_UNKNOWN_PSK_IDENTITY
Returns a formatted version of the data in the
        certificate provided by the other end of the SSL channel.
        Return None if no certificate was provided, {} if a
        certificate was provided, but not validated.1.3.6.1.5.5.7.3.1connect_ex_real_connectselected_npn_protocolSSLSocket._check_connectedipnameSSLSocket.selected_npn_protocoldn_leftmostdn_remainderhostname_leftmosthostname_remainderhostname_checks_common_namesubjectAltNameAccepts a new connection from a remote client, and returns
        a tuple containing that new connection wrapped with a server-side
        SSL channel, and the address of the remote client.SSLContext.__new__SSLObject.writeSSLSession_txt2obj<module ssl>Send a file, possibly by using os.sendfile() if this is a
        clear-text socket.  Return the total number of bytes sent.
        Start the SSL shutdown handshake.VERIFY_alpn_protocolsprotoscert_reqscertfilekeyfileflags_or_addrenum_crls{!r} is not an IPv4 address.SSLSocket.sendallenum_certificates_sslobjcan't connect in server-side modetoo many wildcards in certificate DNS name: {!r}.HAS_TLSv1_2PurposeInvalid PEM encoding; must start with %sMINIMUM_SUPPORTEDstorename{0} channel binding type not implemented_set_alpn_protocols_inet_patonSSLContext.minimum_versionSSLObject.get_channel_bindingSSLSocket.sendfiletime data %r does not match format "%%b%s"sslctxserver_name_callbackPROTO_TLSv1_3_OPENSSL_API_VERSIONsendmsg not allowed on instances of %sSSLContext.verify_flagsget_server_certificateSSLContext.wrap_socket_SSLv2_IF_EXISTSSSLObject.compressionReturn a list of ciphers shared by the client during the handshake or
        None if this is not a valid server connection.
        CHANNEL_BINDING_TYPESVerifyModenid shortname longname oidStart the SSL/TLS handshake. does not have a public constructor. Instances are returned by SSLContext.wrap_socket().set_servername_callbackSSLObject.version{!r} is neither an IPv4 nor an IP6 address._ipaddress_matchmatch_hostnamewildcard can only be present in the leftmost label: {!r}.No SSL wrapper around recvfrom_into not allowed on instances of %sbyte_viewSSLSocket.recvfromsendto not allowed on instances of %sWas the client session reused during handshakeSSLContext.optionsPROTO_TLSv1_1SSLSocket.connect_dnsname_matchSSLSocket.ciphercertfile must be specified for server-side operationsTakes a certificate in binary DER format and returns the
    PEM version of it as a string.SSLSocket.recvmsgrecvmsg not allowed on instances of %s_ASN1Object.fromnidca_certsdercertno appropriate commonName or subjectAltName fields were foundnon-zero flags not allowed in calls to send() on %ssession can only be specified in client mode_DEFAULT_CIPHERSdo_handshakePerform a TLS/SSL handshake.hostname %r doesn't match either of %sENOTCONNHAS_SNIHAS_ECDHHAS_ALPNHAS_TLSv1_1HAS_TLSv1_3Retrieve the certificate from the server at the specified address,
    and return it as a PEM-encoded string.
    If 'ca_certs' is specified, validate the server cert against it.
    If 'ssl_version' is specified, use it in the connection attempt.SSLSocket.connect_exExact matching of IP addresses.

    RFC 6125 explicitly doesn't define an algorithm for this
    (section 1.7.2 - "Out of Scope").
    SSLContext._encode_hostnameSSLContext._load_windows_store_certsSSLObject.contextSSLSocket.do_handshakeSSLSocket.shared_ciphers does not have a public constructor. Instances are returned by SSLContext.wrap_bio().SSLContext.protocolSSLObject.selected_npn_protocolSSLCertVerificationErrorSSLSocket.write_RESTRICTED_SERVER_CIPHERSPEM_FOOTERnid2obj_SSLContextMAXIMUM_SUPPORTEDhostname %r doesn't match %r_PROTOCOL_NAMESReturn paths to default cafile and capath.
    This class implements an interface on top of a low-level SSL object as
    implemented by OpenSSL. This object captures the state of an SSL connection
    but does not provide any network IO itself. IO needs to be performed
    through separate "BIO" objects which are OpenSSL's IO abstraction layer.

    This class does not have a public constructor. Instances are returned by
    ``SSLContext.wrap_bio``. This class is typically used by framework authors
    that want to implement asynchronous IO for SSL through memory buffers.

    When compared to ``SSLSocket``, this object lacks the following features:

     * Any form of network IO, including methods such as ``recv`` and ``send``.
     * The ``do_handshake_on_connect`` and ``suppress_ragged_eofs`` machinery.
    SSLObject.session_reusedSSLObject._createSSLContext.set_npn_protocolsPROTO_TLSv1_2der_cert_bytesset_default_verify_pathsSSLSocket.selected_alpn_protocolserver_sideRead up to 'len' bytes from the SSL object and return them.

        If 'buffer' is provided, read into this buffer and return the number of
        bytes read.
        SSLSocket.__init___nid2objTakes a certificate in ASCII PEM format and returns the
    DER-encoded version of it as a byte sequenceSSLZeroReturnErrorSSLWantWriteErrorSSLSyscallErrorSSLEOFError_wrap_bio1.3.6.1.5.5.7.3.2tls-uniqueReturn the current compression algorithm in use, or ``None`` if
        compression was not negotiated or not supported by one of the peers.Return a string identifying the protocol version used by the
        current SSL channel. PROTO_MAXIMUM_SUPPORTEDThis class implements a subtype of socket.socket that wraps
    the underlying OS socket in an SSL context when necessary, and
    provides read and write methods over that channel. Try to convert an IP address to packed binary form

    Supports IPv4 addresses on all platforms and IPv6 on platforms with IPv6
    support.
    empty or no certificate, match_hostname needs a SSL socket or SSL context with either CERT_OPTIONAL or CERT_REQUIREDpartial wildcards in leftmost label are not supported: {!r}.set_ciphersCreate _ASN1Object from OpenSSL numeric ID
        SSLObject.unwrapSSLErrorNumber_ASN1Object.__new__HOSTFLAG_NEVER_CHECK_SUBJECTAn SSLContext holds various SSL-related configuration options and
    data, such as certificates and possibly a private key.RAND_bytesRAND_egdAlertDescriptionSSLObject.do_handshakePEM_HEADER-----END CERTIFICATE-----do_handshake_on_connect should not be specified for non-blocking socketsCan't dup() %s instancesoutgoing_create_unverified_contextReturn the time in seconds since the Epoch, given the timestring
    representing the "notBefore" or "notAfter" date from a certificate
    in ``"%b %d %H:%M:%S %Y %Z"`` strptime format (C locale).

    "notBefore" or "notAfter" dates must use UTC (RFC 5280).

    Month is one of: Jan Feb Mar Apr May Jun Jul Aug Sep Oct Nov Dec
    UTC should be specified as GMT (see ASN1_TIME_print())
    SSLSocket.sendtoSSLSocket.readSSLSocket.verify_client_post_handshakeget_protocol_nameSSLSocket._real_connectcafile capath openssl_cafile_env openssl_cafile openssl_capath_env openssl_capathALPN protocols must be 1 to 255 in length_SSLMethodSSLObject.selected_alpn_protocol-----BEGIN CERTIFICATE-----SSLSocket.dupprotocol_codeshim_cbnewsockRead up to LEN bytes and return them.
        Return zero-length string on EOF.SSLContext.maximum_versionx509_asnTLSVersion_windows_cert_storesRAND_addSSLSocket.unwrapSO_TYPEPEM_cert_to_DER_certCLIENT_AUTH<unknown>SSLObject.server_hostnamessl.pySSLSocket._createSERVER_AUTHWrite 'data' to the SSL object and return the number of bytes
        written.

        The 'data' argument must support the buffer interface.
        SSLSocket.compressionSSLSocket.recvmsg_intoRead on closed or unwrapped SSL socket.Invalid PEM encoding; must end with %sSSLObject.getpeercertWrite on closed or unwrapped SSL socket.SSLContext.set_servername_callback.<locals>.shim_cbmonth_numberget_default_verify_pathsVerifyFlagsCreate _ASN1Object from short name, long name or OID
        SSLSocket.recvfrom_intonon-zero flags not allowed in calls to sendall() on %sSSLSocket.shutdownReturn the number of bytes that can be read immediately.SSLSocket.acceptstandard_b64encoderecvfrom not allowed on instances of %ssole wildcard without additional labels are not support: {!r}.The SSLContext that is currently in use.Connects to remote ADDR, and then wraps the connection in
        an SSL channel.server_hostname can only be specified in client mode_host_flagsSSLContext.hostname_checks_common_nameSSLObject.cipherSSLObject.server_sidesslobject_classASN.1 object identifier lookup
    SSLSocket.pendingReturns a formatted version of the data in the certificate provided
        by the other end of the SSL channel.

        Return None if no certificate was provided, {} if a certificate was
        provided, but not validated.
        SSLSocket.versiononly stream sockets are supportedSSLContext.set_alpn_protocolsPROTO_MINIMUM_SUPPORTEDsslsocket_classrecvmsg_into not allowed on instances of %sSSLObject.readSSLObject.pending
        Return a string identifying the protocol version used by the
        current SSL channel, or None if there is no established channel.
        SSLContext.load_default_certsSSLSocket._real_closeRAND_statusnon-zero flags not allowed in calls to recv() on %sWhether this is a server-side socket.SSLSocket._checkClosedPROTO_SSLv3Verify that *cert* (in decoded format as returned by
    SSLSocket.getpeercert()) matches the *hostname*.  RFC 2818 and RFC 6125
    rules are followed.

    The function matches IP addresses rather than dNSNames if hostname is a
    valid ipaddress string. IPv4 addresses are supported on all platforms.
    IPv6 addresses are supported on platforms with IPv6 support (AF_INET6
    and inet_pton).

    CertificateError is raised on failure. On success, the function
    returns nothing.
    RAND_pseudo_bytesReturn the currently selected cipher as a 3-tuple ``(name,
        ssl_version, secret_bits)``._create_stdlib_contextSSLObject.__init__SSLObject.verify_client_post_handshakeCreate a SSLContext object with default settings.

    NOTE: The protocol and settings may change anytime without prior
          deprecation. The values represent a fair balance between maximum
          compatibility and security.
    SSLSocket.recv_intoHAS_NEVER_CHECK_COMMON_NAMEThe SSLSession for client socket.IP Address_IntFlagSSLContext purpose flags with X509v3 Extended Key Usage objects
    The currently set server hostname (for SNI), or ``None`` if no
        server hostame is set._TemplateMetaclass.__init__format_string<module string>bracedarg_used_ChainMapis_attrformat() missing 1 required positional argument: 'format_string'format_fieldA string class for supporting $-substitutions.used_argsrecursion_depthauto_arg_indexliteral_textoctdigitsdctvformatTemplate.__init___vformatdescriptor 'safe_substitute' of 'Template' object needs an argumentcapwords.<locals>.<genexpr>capwords(s [,sep]) -> string

    Split the argument into words using split, capitalize each
    word using capitalize, and join the capitalized words using
    join.  If the optional second argument sep is absent or None,
    runs of whitespace characters are replaced by a single space
    and leading and trailing whitespace are removed, otherwise
    sep is used to split and join the words.

    formatter_field_name_splitFormatter.check_unused_argsconvert_fielddescriptor 'substitute' of 'Template' object needs an argumentbraceidpatternascii_lowercaseascii_uppercaseTemplate.substitute.<locals>.convertdescriptor 'format' of 'Formatter' object needs an argumentFormatter.get_valueToo many positional argumentsMax string recursion exceededget_fieldFormatter.vformatA collection of string constants.

Public module variables:

whitespace -- a string containing all ASCII whitespace
ascii_lowercase -- a string containing all ASCII lowercase letters
ascii_uppercase -- a string containing all ASCII uppercase letters
ascii_letters -- a string containing all ASCII letters
digits -- a string containing all ASCII decimal digits
hexdigits -- a string containing all ASCII hexadecimal digits
octdigits -- a string containing all ASCII octal digits
punctuation -- a string containing all ASCII punctuation characters
printable -- a string containing all ASCII characters considered printable

Template.safe_substitutecolnoFormatter._vformatFormatter.format_field(?a:[_a-z][_a-z0-9]*)
    %(delim)s(?:
      (?P<escaped>%(delim)s) |   # Escape sequence of two delimiters
      (?P<named>%(id)s)      |   # delimiter and a Python identifier
      {(?P<braced>%(bid)s)}  |   # delimiter and a braced identifier
      (?P<invalid>)              # Other ill-formed delimiter exprs
    )
    !"#$%&'()*+,-./:;<=>?@[\]^_`{|}~Unrecognized named group in patternFormatter.convert_fieldFormatter.parseTemplate.safe_substitute.<locals>.convertFormatter.get_fieldcannot switch from manual field specification to automatic field numberingformatter_parserInvalid placeholder in string: line %d, col %dstring.pyTemplate._invalidUnknown conversion specifier {0!s} 	
_filter_handle_listc2pwrite_communicate_args_from_interpreter_flagspopenargsPIPE_BUFstderr_threadPopen.__init__hStdOutputKill the process with SIGKILL
            Popen._communicatePopen.__enter__capture_outputReturn (exitcode, output) of executing cmd in a shell.

    Execute the string 'cmd' in a shell with 'check_output' and
    return a 2-tuple (status, output). The locale encoding is used
    to decode the output and process newlines.

    A trailing newline is stripped from the output.
    The exit status for the command can be interpreted
    according to the rules for the function 'wait'. Example:

    >>> import subprocess
    >>> subprocess.getstatusoutput('ls /bin/ls')
    (0, '/bin/ls')
    >>> subprocess.getstatusoutput('cat /bin/junk')
    (1, 'cat: /bin/junk: No such file or directory')
    >>> subprocess.getstatusoutput('/bin/junk')
    (127, 'sh: /bin/junk: not found')
    >>> subprocess.getstatusoutput('/bin/kill $$')
    (-15, '')
    Command '%s' timed out after %s secondsPopen.waitpass_fds not supported on Windows.Handle.__repr__dev_modeCompletedProcess.__repr__Raise CalledProcessError if the exit code is non-zero.write_throughCreate new Popen instance._internal_pollflag_opt_mapwarnoptsbytes_warningxoptionsbs_bufCREATE_NEW_CONSOLECREATE_NEW_PROCESS_GROUPSTD_INPUT_HANDLESTD_OUTPUT_HANDLESTD_ERROR_HANDLESW_HIDESTARTF_USESTDHANDLESSTARTF_USESHOWWINDOWABOVE_NORMAL_PRIORITY_CLASSBELOW_NORMAL_PRIORITY_CLASSHIGH_PRIORITY_CLASSIDLE_PRIORITY_CLASSREALTIME_PRIORITY_CLASSCREATE_NO_WINDOWDETACHED_PROCESSCREATE_DEFAULT_ERROR_MODECREATE_BREAKAWAY_FROM_JOBget_exec_pathCreateProcessAlias for output attribute, to match stderrRun command with arguments.  Wait for command to complete or
    timeout, then return the returncode attribute.

    The arguments are the same as for the Popen constructor.  Example:

    retcode = call(["ls", "-l"])
    TimeoutExpired.__str___execute_childECHILDstdout argument not allowed, it will be overridden.showalloccountGetFileTypeWSTOPSIG_WEXITSTATUSSubprocesses with accessible I/O streams

This module allows you to spawn processes, connect to their
input/output/error pipes, and obtain their return codes.

For a complete description of this module see the Python documentation.

Main API
========
run(...): Runs a command, waits for it to complete, then returns a
          CompletedProcess instance.
Popen(...): A class for flexibly executing a command in a new process

Constants
---------
DEVNULL: Special value that indicates that os.devnull should be used
PIPE:    Special value that indicates a pipe should be created
STDOUT:  Special value that indicates that stderr should go to stdout


Older API
=========
call(...): Runs a command, waits for it to complete, then returns
    the return code.
check_call(...): Same as call() but raises CalledProcessError()
    if return code is not 0
check_output(...): Same as check_call() but returns the contents of
    stdout instead of a return code
getoutput(...): Runs a command in the shell, waits for it to complete,
    then returns the output
getstatusoutput(...): Runs a command in the shell, waits for it to complete,
    then returns a (exitcode, output) tuple
_WNOHANGReturn a duplicate of handle, which is inheritable
    Translate a sequence of arguments into a command line
    string, using the same rules as the MS C runtime:

    1) Arguments are delimited by white space, which is either a
       space or a tab.

    2) A string surrounded by double quotation marks is
       interpreted as a single argument, regardless of white space
       contained within.  A quoted string can be embedded in an
       argument.

    3) A double quotation mark preceded by a backslash is
       interpreted as a literal double quotation mark.

    4) Backslashes are interpreted literally, unless they
       immediately precede a double quotation mark.

    5) If backslashes immediately precede a double quotation mark,
       every pair of backslashes is interpreted as a literal
       backslash.  If the number of backslashes is odd, the last
       backslash escapes the next double quotation mark as
       described in rule 3.
    _closed_child_pipe_fdsCOMSPECwShowWindowCheck if child process has terminated.  Returns returncode
            attribute.

            This method is called by __del__, so it can only refer to objects
            in its local scope.

            _maxsize_stdin_writeget_osfhandlePopen._execute_child.<locals>.<genexpr>Handle.Closesend_signalPopen.send_signal_xoptions/bin/shendtimeorig_timeoutinput_viewPopen._try_waituniversal_newlinescheck_returncode©ÚselfÚargsÚbufsizeÚ
executableÚstdinÚstdoutÚstderrÚ
preexec_fnÚ	close_fdsÚshellÚcwdÚenvÚuniversal_newlinesÚstartupinfoÚcreationflagsÚrestore_signalsÚstart_new_sessionÚpass_fdsÚencodingÚerrorsÚtextÚp2creadÚp2cwriteÚc2preadÚc2pwriteÚerrreadÚerrwriteÚfÚto_closeÚfdCommand '%s' died with unknown signal %d.attr_list_PIPE_BUFargs={!r}Popen._check_timeoutRaised when run() is called with check=True and the process
    returns a non-zero exit status.

    Attributes:
      cmd, returncode, stdout, stderr, output
    GetExitCodeProcess_stderr_buffPopen.pollDUPLICATE_SAME_ACCESSreturncode={!r}hStdInputTerminateProcessConstruct and return tuple with IO objects:
            p2cread, p2cwrite, c2pread, c2pwrite, errread, errwrite
            /system/bin/shstdin and input arguments may not both be used.SubprocessErrorRun command with arguments.  Wait for command to complete.  If
    the exit code was zero then return, otherwise raise
    CalledProcessError.  The CalledProcessError object will have the
    return code in the returncode attribute.

    The arguments are the same as for the call function.  Example:

    check_call(["ls", "-l"])
    Return a list of command-line arguments reproducing the current
    settings in sys.flags, sys.warnoptions and sys._xoptions._fileobj2outputdwFlagstimeout_millisnoexecTerminate the process with SIGTERM
            sigint_timeoutimporttimecmd.exetracemalloc_save_input_handle_exitstatushStdErrorlpAttributeListWTERMSIGopen_osfhandle      Ð?Return output (stdout or stderr) of executing cmd in a shell.

    Like getstatusoutput(), except the exit status is ignored and the return
    value is a string containing the command's output.  Example:

    >>> import subprocess
    >>> subprocess.getoutput('ls /bin/ls')
    '/bin/ls'
    CloseHandleReturn a list of command-line arguments reproducing the current
    optimization settings in sys.flags.DetachCTRL_C_EVENTWIFSTOPPEDPopen._handle_exitstatusSTILL_ACTIVEshowrefcountSend a signal to the process.This exception is raised when the timeout expires while waiting for a
    child process.

    Attributes:
        cmd, output, stdout, stderr, timeout
    Command '%s' returned non-zero exit status %d.Filter out console handles that can't be used
            in lpAttributeList["handle_list"] and make sure the list
            isn't empty. This also removes duplicate handles._child_created_translate_newlinesbufsize must be an integer_waitpidPopen.kill<module subprocess>_devnullTimeoutExpired.__init___stdout_buff_get_devnullWait for child process to terminate; returns self.returncode.creationflags is only supported on Windows platformspass_fds overriding close_fds.Check if child process has terminated. Set and return returncode
        attribute.GetCurrentProcessdefault::BytesWarningtext_modePopen._stdin_writeGetStdHandle_readerthread_WTERMSIGPopen._wait_posixsubprocesssubprocess.py_ECHILD_deadstate_WaitForSingleObject_WAIT_OBJECT_0_GetExitCodeProcessFILE_TYPE_CHAREINVALfork_execPopen._translate_newlinesillegal environment variable nameCalledProcessError.__init__Cannot send input after starting communicationSTARTUPINFO_input_offsetstdout={!r}_PopenSelectorignore_environment_WIFSTOPPEDHandle.Detach_get_handlesUnknown child exit status!needquoteCannot disambiguate when both text and universal_newlines are supplied but different. Pass one or the other.Check if child process has terminated.  Returns returncode
            attribute.

            This method is called by __del__, so it cannot reference anything
            outside of the local scope (nor can any methods it calls).

            _communication_startederror::BytesWarningTerminates the process.CalledProcessError.stdoutCTRL_BREAK_EVENTExecute program (MS Windows version)CalledProcessError.__str__Bad exception data from child: {!r}All callers to this function MUST hold self._waitpid_lock.Run command with arguments and return a CompletedProcess instance.

    The returned instance will have attributes args, returncode, stdout and
    stderr. By default, stdout and stderr are not captured, and those attributes
    will be None. Pass stdout=PIPE and/or stderr=PIPE in order to capture them.

    If check is True and the exit code was non-zero, it raises a
    CalledProcessError. The CalledProcessError object will have the return code
    in the returncode attribute, and output & stderr attributes if those streams
    were captured.

    If timeout is given, and the process takes too long, a TimeoutExpired
    exception will be raised.

    There is an optional argument "input", allowing you to
    pass bytes or a string to the subprocess's stdin.  If you use this argument
    you may not also use the Popen constructor's "stdin" argument, as
    it will be used internally.

    By default, all communication is in bytes, and therefore any "input" should
    be bytes, and the stdout and stderr will be bytes. If in text mode, any
    "input" should be a string, and stdout and stderr will be strings decoded
    according to locale encoding, or by "encoding" if set. Text mode is
    triggered by setting any of text, encoding, errors or universal_newlines.

    The other arguments are the same as for the Popen constructor.
    faulthandleralready closedWIFSIGNALEDwait_flagsCreatePipeDuplicateHandleCommand '%s' died with %r.line_bufferingPopen._filter_handle_listmsvcrtgetandroidapilevel<setcontraction>Popen._make_inheritableis_alivestartupinfo is only supported on Windows platformsPopen._internal_pollPopen._readerthreadInteract with process: Send data to stdin and close it.
        Read data from stdout and stderr, until end-of-file is
        reached.  Wait for process to terminate.

        The optional "input" argument should be data to be sent to the
        child process, or None, if no data should be sent to the child.
        communicate() returns a tuple (stdout, stderr).

        By default, all communication is in bytes, and therefore any
        "input" should be bytes, and the (stdout, stderr) will be bytes.
        If in text mode (indicated by self.text_mode), any "input" should
        be a string, and (stdout, stderr) will be strings decoded
        according to locale encoding, or by "encoding" if set. Text mode
        is triggered by setting any of text, encoding, errors or
        universal_newlines.
        Popen._get_handles_WIFEXITEDTimeoutExpired.stdout_optim_args_from_interpreter_flags©ÚselfÚargsÚ
executableÚ
preexec_fnÚ	close_fdsÚpass_fdsÚcwdÚenvÚstartupinfoÚcreationflagsÚshellÚp2creadÚp2cwriteÚc2preadÚc2pwriteÚerrreadÚerrwriteÚunused_restore_signalsÚunused_start_new_sessionÚuse_std_handlesÚattribute_listÚhave_handle_listÚhandle_listÚcomspecÚhpÚhtÚpidÚtidstdout_thread_WSTOPSIGstderr={!r}dont_write_bytecodesubprocess %s is still runningü©ñÒMb@?STARTUPINFO.__init__Popen._save_input Execute a child program in a new process.

    For a complete description of the arguments see the Python documentation.

    Arguments:
      args: A string, or a sequence of program arguments.

      bufsize: supplied as the buffering argument to the open() function when
          creating the stdin/stdout/stderr pipe file objects

      executable: A replacement program to execute.

      stdin, stdout and stderr: These specify the executed programs' standard
          input, standard output and standard error file handles, respectively.

      preexec_fn: (POSIX only) An object to be called in the child process
          just before the child is executed.

      close_fds: Controls closing or inheriting of file descriptors.

      shell: If true, the command will be executed through the shell.

      cwd: Sets the current directory before the child is executed.

      env: Defines the environment variables for the new process.

      text: If true, decode stdin, stdout and stderr using the given encoding
          (if set) or the system default otherwise.

      universal_newlines: Alias of text, provided for backwards compatibility.

      startupinfo and creationflags (Windows only)

      restore_signals (POSIX only)

      start_new_session (POSIX only)

      pass_fds (POSIX only)

      encoding and errors: Text mode encoding and error handling to use for
          file objects stdin, stdout and stderr.

    Attributes:
        stdin, stdout, stderr, pid, returncode
    _sigint_wait_secsCompletedProcess.__init__startupinfo.lpAttributeList['handle_list'] overriding close_fdspreexec_fn is not supported on Windows platformsCompletedProcess.check_returncodeConvenience for checking if a timeout has expired.Popen._remaining_timestdout and stderr arguments may not be used with capture_output.{} /c "{}"_mswindowsSTARTUPINFO._copyInternal implementation of wait() on POSIX.INFINITE_activeWAIT_TIMEOUTExecute program (POSIX version)Popen.universal_newlines_WIFSIGNALEDA process that has finished running.

    This is returned by run().

    Attributes:
      args: The list or str args passed to run().
      returncode: The exit code of the process, negative for signals.
      stdout: The standard output (None if not captured).
      stderr: The standard error (None if not captured).
    Popen.__del__Internal implementation of wait() on Windows.©?Run command with arguments and return its output.

    If the exit code was non-zero it raises a CalledProcessError.  The
    CalledProcessError object will have the return code in the returncode
    attribute and output in the output attribute.

    The arguments are the same as for the Popen constructor.  Example:

    >>> check_output(["ls", "-l", "/dev/null"])
    b'crw-rw-rw- 1 root root 1, 3 Oct 18  2007 /dev/null\n'

    The stdout argument is not allowed as it is used internally.
    To capture standard error in the result, use stderr=STDOUT.

    >>> check_output(["/bin/sh", "-c",
    ...               "ls -l non_existent_file ; exit 0"],
    ...              stderr=STDOUT)
    b'ls: non_existent_file: No such file or directory\n'

    There is an additional optional argument, "input", allowing you to
    pass a string to the subprocess's stdin.  If you use this argument
    you may not also use the Popen constructor's "stdin" argument, as
    it too will be used internally.  Example:

    >>> check_output(["sed", "-e", "s/foo/bar/"],
    ...              input=b"when in the course of fooman events\n")
    b'when in the course of barman events\n'

    By default, all communication is in bytes, and therefore any "input"
    should be bytes, and the return value wil be bytes.  If in text mode,
    any "input" should be a string, and the return value will be a string
    decoded according to locale encoding, or by "encoding" if set. Text mode
    is triggered by setting any of text, encoding, errors or universal_newlines.
    Popen.__exit__%s(%d)Popen.terminateConvenience for _communicate when computing timeouts.Unsupported signal: {}Popen._get_devnullPopen.communicate©*ÚselfÚargsÚ
executableÚ
preexec_fnÚ	close_fdsÚpass_fdsÚcwdÚenvÚstartupinfoÚcreationflagsÚshellÚp2creadÚp2cwriteÚc2preadÚc2pwriteÚerrreadÚerrwriteÚrestore_signalsÚstart_new_sessionÚ
unix_shellÚorig_executableÚerrpipe_readÚerrpipe_writeÚlow_fds_to_closeÚlow_fdÚenv_listÚkÚvÚexecutable_listÚfds_to_keepÚ
devnull_fdÚerrpipe_dataÚpartÚpidÚstsÚexception_nameÚ	hex_errnoÚerr_msgÚchild_exception_typeÚ	errno_numÚchild_exec_never_calledÚerr_filenameClose the TarFile. In write-mode, two finishing zero blocks are
           appended to the archive.
        Make a file called targetpath.
        Make a file from a TarInfo object with an unknown type
           at targetpath.
        addfile_StreamProxynot an lzma fileExtract a member from the archive as a file object. `member' may be
           a filename or a TarInfo object. If `member' is a regular file or a
           link, an io.BufferedReader object is returned. Otherwise, None is
           returned.
        TarFile.taropennot a bzip2 fileReturn the object as a ustar header block.
        {!r} file is extracted.TarFile.xzopenTarFile.openGNU.sparse.majorlinkpath_Stream__readRead from and write to tar format archives.
Copy length bytes from fileobj src to fileobj dst.
       If length is None, copy the entire content.
    %s is closed_LowLevelFile.read.tbz.tb2TarFile.chownMake a fifo called targetpath.
        lzma module is not available././@LongLinkInformational class which holds the details about an
       archive member given by a tar header block.
       TarInfo objects are returned by TarFile.getmember(),
       TarFile.getmembers() and TarFile.gettarinfo() and are
       usually created internally.
    special devices not supported by systemLars GustÃ¤bel (lars@gustaebel.de)Return a header block. info is a dictionary with file
           information, format must be one of the *_FORMAT constants.
        nothing to openpax_headersst_uid_Stream.__writecreate_pax_header_Stream.__del__Return size bytes from the stream.
        CONTTYPEXGLTYPEextractfileReturn the members of the archive as a list of TarInfo objects. The
           list has the same order as the members in the archive.
        Extract a member from the archive to the current working directory,
           using its full name. Its file information is extracted as accurately
           as possible. `member' may be a filename or a TarInfo object. You can
           specify a different directory using `path'. File attributes (owner,
           mtime, mode) are set unless `set_attrs' is False. If `numeric_owner`
           is True, only the numbers for user/group names are used and not
           the names.
        tarfile: Unknown file type %r, extracted as regular file.Low-level file object. Supports reading and writing.
       It is used instead of a regular file object for streaming
       access.
    GNU_MAGICConstruct a TarInfo object. name is the optional name
           of the member.
        TarInfo._proc_sparseRead through the entire archive file and look for readable
           members.
        Return a POSIX.1-2008 extended or global header sequence
           that contains a list of keyword, value pairs. The values
           must be strings.
        TarFile._find_link_targetinvalid compressed data148b8x356bst_rdev_LowLevelFile.__init___Stream.__init__TarInfo._proc_gnusparse_10(\d+) ([^=]+)=TarInfo._proc_paxchksumissymtruncated headercould not change modification timeGeneral exception for extract errors.blockinfolastposrealposTarFile.__iter__devmajor_Stream._init_write_gzfifo not supported by systemTarInfo.tobufConvert a number field to a python number.
    _LowLevelFile.writeTarInfo.issymFind the target member of a symlink or hardlink member in the
           archive.
        comptypecould not change modeTarFile.__exit__Initialize for reading a gzip compressed fileobj.
        empty headerPAX_NUMBER_FIELDS_FileInFile.seekTarInfo._proc_gnusparse_00TarFile.addfileDIRTYPECreate tarfile from sourcesbz2 module is not availableTarInfo._proc_gnulongTarFile.makefifotarfile.pyException for truncated headers.saved_posOpen bzip2 compressed tar archive name for reading or writing.
           Appending is not allowed.
        missing or bad subsequent headerisblkundiscernible modeExFileObject.__init___proc_gnusparse_01TarInfo._apply_pax_info{!r} file created.TarInfo._proc_gnusparse_01TarInfo.isfifoSeek to a position in the file.
        copybufsizeTarFile._checkMake a directory called targetpath.
        frombufTarInfo._create_gnu_long_headerReturn a GNUTYPE_LONGNAME or GNUTYPE_LONGLINK sequence
           for name.
        _Stream.readReturn the TarInfo's attributes as a dictionary.
        awxustar 00signed_chksumFind an archive member by name from bottom to top.
           If tarinfo is given, it is used as the starting point.
        PAX_FIELDSREGULAR_TYPESunpack_frommakelinkExtract the TarInfo object tarinfo to a physical
           file called targetpath.
        r:*_getmember<tarfile>_sparse_structsException for end of file headers.TarInfo.create_pax_global_headerGNU.sparse.sizegetgrgidcould not change ownerCheck if TarFile is still open, and if the operation's mode
           corresponds to TarFile's mode.
        Return the string payload filled with zero bytes
           up to the next 512 byte border.
        Return True if name points to a tar archive that we
       are able to handle, else return False.
    _Stream._init_read_gzTarFile.chmodDeprecated in this location; use stat.filemode.Create a TarInfo object from the result of os.stat or equivalent
           on an existing file. The file is either named by `name', or
           specified as a file object `fileobj' with a file descriptor. If
           given, `arcname' specifies an alternative name for the file in the
           archive, otherwise, the name is taken from the 'name' attribute of
           'fileobj', or the 'name' argument. The name should be a text
           string.
        cannot extract (sym)link as file objectSet file permissions of targetpath according to tarinfo.
        lchownTarFile.makedirTest if a tarfile is validhdrcharsetTarFile.next_posix_split_nameinvalid headerSet modification time of targetpath according to tarinfo.
        TarInfo.isdevTarInfo.get_infooverflow in number fielddereferenceignore_zeroserrorlevelTarFile.__enter__Invalid argumentTarFile._dbgitnExtract all members from the archive to the current working
           directory and set owner, modification time and permissions on
           directories afterwards. `path' specifies a different directory
           to extract to. `members' is optional and must be a subset of the
           list returned by getmembers(). If `numeric_owner` is True, only
           the numbers for user/group names are used and not the names.
        {!r} file is extracted into {!r} directory.gzip module is not availablegzopenbz2openGNU.sparse.minorempty file_FileInFile.writableA simple command-line interface for tarfile module.S_IFBLKTarInfo.pathis_tarfileCompressionErrorStreamErrorExtractErrorHeaderErrorENCODINGUSTAR_FORMATGNU_FORMATPAX_FORMATDEFAULT_FORMATbad checksumTarInfo._posix_split_namemknodtarfile: %s %r_FileInFile.flushCHRTYPEstatres_FileInFile.seekableSYMTYPEischrLENGTH_NAMEProcess the blocks that hold a GNU longname
           or longlink member.
        BLKTYPEunknown compression type %r]  _FileInFile.readintoReturn a tar header as a string of 512 byte blocks.
        unable to resolve link inside archive<module tarfile>RECORDSIZETarFile.extractfileReturn a TarInfo object for member `name'. If `name' can not be
           found in the archive, KeyError is raised. If a member occurs more
           than once in the archive, its last occurrence is assumed to be the
           most up-to-date version.
        _Stream.__read%10sTarInfo._create_pax_generic_header_loadednot a gzip fileTarInfo._proc_memberBase exception for header errors._FileInFile.__init__Open an (uncompressed) tar archive `name'. `mode' is either 'r' to
           read from an existing archive, 'a' to append data to an existing
           file or 'w' to create a new file overwriting an existing one. `mode'
           defaults to 'r'.
           If `fileobj' is given, it is used for reading or writing data. If it
           can be determined, `mode' is overridden by `fileobj's mode.
           `fileobj' is not closed, when TarFile is closed.
        file_nameý7zXZTarFile.gzopenO_TRUNCinodeReturn the object as a ustar header block. If it cannot be
           represented this way, prepend a pax extended header sequence
           with supplement information.
        Process a builtin type or an unknown type which
           will be treated as a regular file.
        _Stream.closeTarFile.getnamesException for unreadable tar archives.origsizefallback_encodingfallback_errorsConvert a python number to a number field.
    deprecated in favor of stat.filemodest_nlinkTarInfo.create_gnu_headeroffset_dataExtract tarfile into target dir\d+ GNU.sparse.numbytes=(\d+)\nSubsequentHeaderErrorException for unsupported operations on stream-like TarFiles.Small proxy class that enables transparent compression
       detection for the Stream interface (mode 'r|*').
    _proc_builtinTarInfo.fromtarfilebad operation for mode %rLENGTH_PREFIXTarInfo._blockOpen a tar archive for reading, writing or appending. Return
           an appropriate TarFile class.

           mode:
           'r' or 'r:*' open for reading with transparent compression
           'r:'         open for reading exclusively uncompressed
           'r:gz'       open for reading with gzip compression
           'r:bz2'      open for reading with bzip2 compression
           'r:xz'       open for reading with lzma compression
           'a' or 'a:'  open for appending, creating the file if necessary
           'w' or 'w:'  open for writing without compression
           'w:gz'       open for writing with gzip compression
           'w:bz2'      open for writing with bzip2 compression
           'w:xz'       open for writing with lzma compression

           'x' or 'x:'  create a tarfile exclusively without compression, raise
                        an exception if the file is already created
           'x:gz'       create a gzip compressed tarfile, raise an exception
                        if the file is already created
           'x:bz2'      create a bzip2 compressed tarfile, raise an exception
                        if the file is already created
           'x:xz'       create an lzma compressed tarfile, raise an exception
                        if the file is already created

           'r|*'        open a stream of tar blocks with transparent compression
           'r|'         open an uncompressed stream of tar blocks for reading
           'r|gz'       open a gzip compressed stream of tar blocks
           'r|bz2'      open a bzip2 compressed stream of tar blocks
           'r|xz'       open an lzma compressed stream of tar blocks
           'w|'         open an uncompressed stream for writing
           'w|gz'       open a gzip compressed stream for writing
           'w|bz2'      open a bzip2 compressed stream for writing
           'w|xz'       open an lzma compressed stream for writing
        Process a GNU tar extended sparse header, version 0.1.
        GNU.sparse.realsizeConstruct a TarInfo object from a 512 byte bytes object.
        BLOCKSIZE_StreamProxy.__init__TarInfo._decode_pax_fieldCalculate the checksum for a member's header by summing up all
       characters except for the chksum field which is treated as if
       it was filled with spaces. According to the GNU tar sources,
       some tars (Sun and NeXT) calculate chksum with signed char,
       which will be different if there are chars in the buffer with
       the high bit set. So we calculate two checksums, unsigned and
       signed.
    FIFOTYPE_StreamProxy.readdevminorGustavo Niemeyer, Niels GustÃ¤bel, Richard Townsend.TarFile.close_StreamProxy.getcomptypetar_fileslinkname is too longtar_modeWrite string s to the stream.
        %10dTarFile._extract_memberPOSIX_MAGICTarInfo.islnkMake a (symbolic) link called targetpath. If it cannot be created
          (platform limitation), we try to make a copy of the referenced file
          instead of a link.
        tarfile: Skipped %r{!r} is not a tar archive.
{!r} is a tar archive.Return the members of the archive as a list of their names. It has
           the same order as the list returned by getmembers().
        TarInfo._create_headerstmdisextendedseeking backwards is not allowedReturn the next member of the archive as a TarInfo object, when
           TarFile is opened for reading. Return None if there is no more
           available.
        TarInfo.isregA thin wrapper around an existing file object that
       provides a part of its data as an individual file
       object.
    invalid formatReturn the next size number of bytes from the stream.
           If size is not defined, return all bytes of the stream
           up to EOF.
        _create_payloadunsupported compression methodTarFile.utimest_gidustar   unexpected end of dataAdd the file `name' to the archive. `name' may be any type of file
           (directory, fifo, symbolic link, etc.). If given, `arcname'
           specifies an alternative name for the file in the archive.
           Directories are added recursively by default. This can be avoided by
           setting `recursive' to False. `filter' is a function
           that expects a TarInfo object argument and returns the changed
           TarInfo object, if it returns None the TarInfo object will be
           excluded from the archive.
        S_ISCHR\d+ GNU.sparse.offset=(\d+)\nTarInfo.ischrBZhO_WRONLYS_IFCHRTarInfo.issparseReturn the stream's file pointer position.
        ././@PaxHeader_safe_print148B8x356BException for empty headers.tar_namecompressionsbltn_open_Stream__writeShow listing of a tarfile_Stream._readTarInfo._create_payloadnot_compressedTarInfo.isdir_extfileobjClass that serves as an adapter between TarFile and
       a stream-like object.  The stream-like object only
       needs to have a read() or write() method and is accessed
       blockwise.  Use of gzip or bzip2 compression is possible.
       A stream-like object could be for example: sys.stdin,
       sys.stdout, a socket, a tape device etc.

       _Stream is intended to be used only internally.
    AREGTYPEinodes_Stream.writeReturn the object as a GNU header block sequence.
        Provide an iterator object.
        TarFile.makedevClose the _Stream object. No operation should be
           done on it afterwards.
        Open uncompressed tar archive name for reading or writing.
        TruncatedHeaderErrormap_indexGNUTYPE_SPARSEmember_nameOPEN_METH0x%X: %sReplace fields with supplemental information from a previous
           pax extended or global header.
        SOLARIS_XHDTYPEBase exception.filename %r not found\d+ hdrcharset=([^\n]+)\nThe TarFile Class provides an interface to tar archives.
    symlink_exceptionfile could not be opened successfullyEmptyHeaderErrormkfifofirstmemberS_ISBLK_Stream.tellTarInfo.isfileGNU_TYPES21 hdrcharset=BINARY
mode must be 'r', 'a', 'w' or 'x'TarFile._loadSUPPORTED_TYPESBZ2File%0*ounsigned_chksumtarfile: Unsupported type %rConstruct a _Stream object.
        %s -> %sLENGTH_LINKReturn the next TarInfo object from TarFile object
           tarfile.
        0.9.0Print a table of contents to sys.stdout. If `verbose' is False, only
           the names of the members are printed. If it is True, an `ls -l'-like
           output is produced. `members' is optional and must be a subset of the
           list returned by getmembers().
        <%s %r at %#x>tarfile: Excluded %rcalc_chksumsTarFile.makefileProcess a GNU tar extended sparse header, version 1.0.
        1AY&SYGNU.sparse.nameWrite string s to the stream if a whole new block
           is ready to be written.
        Open gzip compressed tar archive name for reading or writing.
           Appending is not allowed.
        dbufEOFHeaderErrorTarFile.open.<locals>.not_compressed©znamezmodezuidzgidzsizezmtimezchksumztypezlinknamezunamezgnamezdevmajorzdevminorzoffsetzoffset_datazpax_headerszsparseztarfilez_sparse_structsz_link_target%06o create_ustar_headerGNU.sparse.mapfileobjectProcess a GNU sparse header plus extra headers.
        Exception for unavailable compression methods.TarFile._getmemberChoose the right processing method depending on
           the type and call it.
        mode must be 'r', 'w' or 'x'_FileInFile.readable_FileInFile.tell_Stream.seeklinkname %r not foundTarInfo.__init__Open lzma compressed tar archive name for reading or writing.
           Appending is not allowed.
        _LowLevelFile.closeÿTarFile.bz2openMake a character or block device called targetpath.
        Decode a single field from a pax record.
        Process a GNU tar extended sparse header, version 0.0.
        TarFile.__init__Convert a null-terminated bytes object to a string.
    Initialize for writing with gzip compression.
        TarInfo.create_pax_headermode must be 'r' or 'w'TarInfo.create_ustar_headerSplit a name longer than 100 chars into a prefix
           and a name part.
        Return the object as a pax global header block sequence.
        TarFile.makeunknownTarFile.makelinkException for missing and invalid extended headers.Add the TarInfo object `tarinfo' to the archive. If `fileobj' is
           given, it should be a binary file, and tarinfo.size bytes are read
           from it and added to the archive. You can create TarInfo objects
           directly, or by using gettarinfo().
        _FileInFile.closeProcess an extended or global header as described in
           POSIX.1-2008.
        TarInfo._proc_builtinRound up a byte count by BLOCKSIZE and return it,
           e.g. _block(834) => 1024.
        Write debugging output to sys.stderr.
        Read data from the file.
        S_ISREGPAX_NAME_FIELDSSet owner of targetpath according to tarinfo. If numeric_owner
           is True, use .gid/.uid instead of .gname/.uname. If numeric_owner
           is False, fall back to .gid/.uid when the search based on name
           fails.
        TarFile.list_StreamProxy.closeReturn the current file position.
        Exception for invalid headers.Return size bytes from stream. If internal buffer is empty,
           read another block from the stream.
        TarInfo.linkpathTarFile.extractall.<locals>.<lambda>TarInfo.isblkLNKTYPEConvert a string to a null-terminated bytes object.
    TarInfo.frombufTarInfo.__repr__Set the stream's file pointer to pos. Negative seeking
           is forbidden.
        SpooledTemporaryFile.__init___get_default_tempdirTemporaryDirectory._cleanupTemporary file wrapper, specialized to switch from BytesIO
    or StringIO to a real file when it exceeds a certain size or
    when a fileno is needed.
    SpooledTemporaryFile.closedreturn_type_TemporaryFileWrapper.__getattr__.<locals>.func_wrapper_Randomgettempprefix_TemporaryFileWrapper.closeCommon parameter processing for most APIs in this module.output_typeSpooledTemporaryFile.write_RandomNameSequence.rng_TemporaryFileCloser.__del__No usable temporary directory found in %s_finalizerNo usable temporary directory name foundSpooledTemporaryFile.__iter__SpooledTemporaryFile.flushtempfile.py_TemporaryFileCloser.__init__SpooledTemporaryFile.tell_RandomNameSequence.__iter__Look at the type of all args and divine their implied return type.SpooledTemporaryFile.readTMPDIR%SYSTEMROOT%\Temp\tmpW_OK~\AppData\Local\Tempmkdtemp_rngrollover/tmpSpooledTemporaryFile._check_infer_return_typewarn_messageCan't mix bytes and non-bytes in path components.Create and return a temporary file.
    Arguments:
    'prefix', 'suffix', 'dir' -- as for mkstemp.
    'mode' -- the mode argument to io.open (default "w+b").
    'buffering' -- the buffer size argument to io.open (default -1).
    'encoding' -- the encoding argument to io.open (default None)
    'newline' -- the newline argument to io.open (default None)
    'delete' -- whether the file is deleted on close (default True).
    The file is created as mkstemp() would do it.

    Returns an object with a file-like interface; the name of the file
    is accessible as its 'name' attribute.  The file will be automatically
    deleted when it is closed unless the 'delete' argument is set to False.
    Calculate the default directory to use for temporary files.
    This routine should be called exactly once.

    We determine whether or not a candidate temp dir is usable by
    trying to create and write to a file in that directory.  If this
    is successful, the test file is deleted.  To prevent denial of
    service, the name of the test file must be randomized.NamedTemporaryFileTMP_MAXgettempprefixbgettempdirbblat_TemporaryFileWrapper.__exit__TemporaryDirectory.__init__cur_pid_closerSpooledTemporaryFile.__exit__closefdabcdefghijklmnopqrstuvwxyz0123456789__TemporaryFileWrapper.__iter__Temporary files.

This module provides generic, low- and high-level interfaces for
creating temporary files and directories.  All of the interfaces
provided by this module can be used without fear of race conditions
except for 'mktemp'.  'mktemp' is subject to race conditions and
should not be used; it is provided for backward compatibility only.

The default path names are returned as str.  If you supply bytes as
input, all return values will be in bytes.  Ex:

    >>> tempfile.mkstemp()
    (4, '/tmp/tmptpu9nin8')
    >>> tempfile.mkdtemp(suffix=b'')
    b'/tmp/tmppbi8f0hy'

This module also provides some data items to the user:

  TMP_MAX  - maximum number of names that will be tried before
             giving up.
  tempdir  - If this is set to a string before the first use of
             any routine from this module, it will be considered as
             another candidate location to store temporary files.
_max_size
        Close the temporary file, possibly deleting it.
        _rolledEEXISTsoftspaceSpooledTemporaryFile.truncate/usr/tmpc:\tmpCreate and return a temporary file.
        Arguments:
        'prefix', 'suffix', 'dir' -- as for mkstemp.
        'mode' -- the mode argument to io.open (default "w+b").
        'buffering' -- the buffer size argument to io.open (default -1).
        'encoding' -- the encoding argument to io.open (default None)
        'newline' -- the newline argument to io.open (default None)
        The file is created as mkstemp() would do it.

        Returns an object with a file-like interface.  The file has no
        name, and will cease to exist when it is closed.
        _TemporaryFileCloser.closeSpooledTemporaryFile.newlinesCannot enter context with closed file_candidate_tempdir_listTemporaryDirectory.__repr__SpooledTemporaryFile.encodingUser-callable function to create and return a unique temporary
    file.  The return value is a pair (fd, name) where fd is the
    file descriptor returned by os.open, and name is the filename.

    If 'suffix' is not None, the file name will end with that suffix,
    otherwise there will be no suffix.

    If 'prefix' is not None, the file name will begin with that prefix,
    otherwise a default prefix is used.

    If 'dir' is not None, the file will be created in that directory,
    otherwise a default directory is used.

    If 'text' is specified and true, the file is opened in text
    mode.  Else (the default) the file is opened in binary mode.  On
    some operating systems, this makes no difference.

    If any of 'suffix', 'prefix' and 'dir' are not None, they must be the
    same type.  If they are bytes, the returned name will be bytes; str
    otherwise.

    The file is readable and writable only by the creating user ID.
    If the operating system uses permission bits to indicate whether a
    file is executable, the file is executable by no one. The file
    descriptor is not inherited by children of this process.

    Caller is responsible for deleting the file when done with it.
    SpooledTemporaryFile.fileno_sanitize_paramsSpooledTemporaryFile.softspace<{} {!r}>_shutilTemporaryDirectory.__enter__Generate a list of candidate temporary directories which
    _get_default_tempdir will try._mkstemp_innerclose_calledSpooledTemporaryFile.readlinesO_TEMPORARY_rng_pid<module tempfile>_TemporaryFileWrapper.__enter__An instance of _RandomNameSequence generates an endless
    sequence of unpredictable strings which can safely be incorporated
    into file names.  Each string is eight characters long.  Multiple
    threads can safely use the same instance at the same time.

    _RandomNameSequence is an iterator.getenv_TemporaryFileArgs_once_lock_O_TMPFILE_WORKSCreate and return a temporary directory.  This has the same
    behavior as mkdtemp but can be used as a context manager.  For
    example:

        with TemporaryDirectory() as tmpdir:
            ...

    Upon exiting the context, the directory and everything contained
    in it are removed.
    A bytes version of tempfile.gettempdir().Temporary file wrapper

    This class provides a wrapper around files opened for
    temporary use.  In particular, it seeks to automatically
    remove the file when it is no longer needed.
    cygwinc:\tempSpooledTemporaryFile.rolloverSpooledTemporaryFile.seekSpooledTemporaryFile.isattyO_EXCLO_NOFOLLOWenvnameflags2_RandomNameSequence.__next__/var/tmp_TemporaryFileWrapper.__init__SpooledTemporaryFile.__enter__A separate object allowing proper closing of a temporary file's
    underlying file object, without adding a __del__ method to the
    temporary file.SpooledTemporaryFile.nameNo usable temporary filename found_text_openflagsSpooledTemporaryFile.writelines_name_sequenceUser-callable function to create and return a unique temporary
    directory.  The return value is the pathname of the directory.

    Arguments are as for mkstemp, except that the 'text' argument is
    not accepted.

    The directory is readable, writable, and searchable only by the
    creating user.

    Caller is responsible for deleting the directory when done with it.
    User-callable function to return a unique temporary file name.  The
    file is not created.

    Arguments are similar to mkstemp, except that the 'text' argument is
    not accepted, and suffix=None, prefix=None and bytes file names are not
    supported.

    THIS FUNCTION IS UNSAFE AND SHOULD NOT BE USED.  The file name may
    refer to a file that did not exist at some point, but by the time
    you get around to creating it, someone else may have beaten you to
    the punch.
    TemporaryDirectory.cleanupThe default prefix for temporary directories._get_candidate_namesCode common to mkstemp, TemporaryFile, and NamedTemporaryFile.Accessor for tempfile.tempdir._bin_openflagsImplicitly cleaning up {!r}No usable temporary file name foundCommon setup sequence for all user-callable interfaces.The default prefix for temporary directories as bytes.TemporaryDirectory.__exit__SpooledTemporaryFile.mode_munge_whitespace(text : string) -> string

        Munge whitespace in text: expand tabs and convert all other
        whitespace characters to spaces.  Eg. " foo\tbar\n\nbaz"
        becomes " foo    bar  baz".
        TextWrapper.fillcur_linefill(text : string) -> string

        Reformat the single paragraph in 'text' to fit in lines of no
        more than 'self.width' columns, and return a new string
        containing the entire wrapped paragraph.
        replace_whitespacefix_sentence_endingsbreak_long_wordsdrop_whitespacebreak_on_hyphensmax_linesTextWrapper._munge_whitespace_wrap_chunks[\w!"\'&.,?]prefixed_linesspace_leftRemove any common leading whitespace from every line in `text`.

    This can be used to make triple-quoted strings line up with the left
    edge of the display, while still presenting them in the source code
    in indented form.

    Note that tabs and spaces are both treated as whitespace, but they
    are not equal: the lines "  hello" and "\thello" are
    considered to have no common leading whitespace.  (This behaviour is
    new in Python 2.5; older versions of this module incorrectly
    expanded tabs before searching for common leading whitespace.)
    
        ( # any whitespace
          %(ws)s+
        | # em-dash between words
          (?<=%(wp)s) -{2,} (?=\w)
        | # word, possibly hyphenated
          %(nws)s+? (?:
            # hyphenated word
              -(?: (?<=%(lt)s{2}-) | (?<=%(lt)s-%(lt)s-))
              (?= %(lt)s -? %(lt)s)
            | # end of word
              (?=%(ws)s|\Z)
            | # em-dash
              (?<=%(wp)s) (?=-{2,}\w)
            )
        )Fill a single paragraph of text, returning a new string.

    Reformat the single paragraph in 'text' to fit in lines of no more
    than 'width' columns, and return a new string containing the entire
    wrapped paragraph.  As with wrap(), tabs are expanded and other
    whitespace characters converted to space.  See TextWrapper class for
    available keyword args to customize wrapping behaviour.
    [^\d\W]shortenTextWrapper._fix_sentence_endingscur_len^[ 	]+$_leading_whitespace_re(%s+)indent.<locals>.predicate_handle_long_word(chunks : [string],
                             cur_line : [string],
                             cur_len : int, width : int)

        Handle a chunk of text (most likely a word, not whitespace) that
        is too long to fit in any line.
        wordsep_simple_renowhitespace_fix_sentence_endings(chunks : [string])

        Correct for sentence endings buried in 'chunks'.  Eg. when the
        original text contains "... foo.\nBar ...", munge_whitespace()
        and split() will convert that to [..., "foo.", " ", "Bar", ...]
        which has one too few spaces; this method simply changes the one
        space to two.
        wordsep_reTextWrapper._handle_long_wordText wrapping and filling.
Adds 'prefix' to the beginning of selected lines in 'text'.

    If 'predicate' is provided, 'prefix' will only be added to the lines
    where 'predicate(line)' is True. If 'predicate' is not provided,
    it will default to adding 'prefix' to all non-empty lines that do not
    consist solely of whitespace characters.
    patsearchplaceholder too large for max width<module textwrap>wrap(text : string) -> [string]

        Reformat the single paragraph in 'text' so it fits in lines of
        no more than 'self.width' columns, and return a list of wrapped
        lines.  Tabs in 'text' are expanded with string.expandtabs(),
        and all other whitespace characters (including newline) are
        converted to space.
        indent.<locals>.prefixed_linestextwrap.py	
 unicode_whitespace_trans [...][a-z][\.\!\?][\"\']?\Zprev_lineTextWrapper._wrap_chunksuspace(^[ 	]*)(?:[^ 	
])_wrap_chunks(chunks : [string]) -> [string]

        Wrap a sequence of text chunks and return a list of lines of
        length 'self.width' or less.  (If 'break_long_words' is false,
        some lines may be longer than this.)  Chunks correspond roughly
        to words and the whitespace between them: each chunk is
        indivisible (modulo 'break_long_words'), but a line break can
        come between any two chunks.  Chunks should not have internal
        whitespace; ie. a chunk is either all whitespace or a "word".
        Whitespace chunks will be removed from the beginning and end of
        lines, but apart from that whitespace is preserved.
        _split_chunks_whitespace_only_reTextWrapper._splitsentence_end_rereversed_chunksword_punct
    Object for wrapping/filling text.  The public interface consists of
    the wrap() and fill() methods; the other methods are just there for
    subclasses to override in order to tweak the default behaviour.
    If you want to completely replace the main wrapping algorithm,
    you'll probably have to override _wrap_chunks().

    Several instance attributes control various aspects of wrapping:
      width (default: 70)
        the maximum width of wrapped lines (unless break_long_words
        is false)
      initial_indent (default: "")
        string that will be prepended to the first line of wrapped
        output.  Counts towards the line's width.
      subsequent_indent (default: "")
        string that will be prepended to all lines save the first
        of wrapped output; also counts towards each line's width.
      expand_tabs (default: true)
        Expand tabs in input text to spaces before further processing.
        Each tab will become 0 .. 'tabsize' spaces, depending on its position
        in its line.  If false, each tab is treated as a single character.
      tabsize (default: 8)
        Expand tabs in input text to 0 .. 'tabsize' spaces, unless
        'expand_tabs' is false.
      replace_whitespace (default: true)
        Replace all whitespace characters in the input text by spaces
        after tab expansion.  Note that if expand_tabs is false and
        replace_whitespace is true, every tab will be converted to a
        single space!
      fix_sentence_endings (default: false)
        Ensure that sentence-ending punctuation is always followed
        by two spaces.  Off by default because the algorithm is
        (unavoidably) imperfect.
      break_long_words (default: true)
        Break words longer than 'width'.  If false, those words will not
        be broken, and some lines might be longer than 'width'.
      break_on_hyphens (default: true)
        Allow breaking hyphenated words. If true, wrapping will occur
        preferably on whitespaces and right after hyphens part of
        compound words.
      drop_whitespace (default: true)
        Drop leading and trailing whitespace from lines.
      max_lines (default: None)
        Truncate wrapped lines.
      placeholder (default: ' [...]')
        Append to the last line of truncated text.
    _split(text : string) -> [string]

        Split the text to wrap into indivisible chunks.  Chunks are
        not quite the same as words; see _wrap_chunks() for full
        details.  As an example, the text
          Look, goof-ball -- use the -b option!
        breaks into the following chunks:
          'Look,', ' ', 'goof-', 'ball', ' ', '--', ' ',
          'use', ' ', 'the', ' ', '-b', ' ', 'option!'
        if break_on_hyphens is True, or in:
          'Look,', ' ', 'goof-ball', ' ', '--', ' ',
          'use', ' ', 'the', ' ', '-b', ' ', option!'
        otherwise.
        Collapse and truncate the given text to fit in the given width.

    The text first has its whitespace collapsed.  If it then fits in
    the *width*, it is returned as is.  Otherwise, as many words
    as possible are joined and then the placeholder is appended::

        >>> textwrap.shorten("Hello  world!", width=12)
        'Hello world!'
        >>> textwrap.shorten("Hello  world!", width=11)
        'Hello [...]'
    TextWrapper._split_chunksTextWrapper.__init__invalid width %r (must be > 0)TextWrapper.wrapWrap a single paragraph of text, returning a list of wrapped lines.

    Reformat the single paragraph in 'text' so it fits in lines of no
    more than 'width' columns, and return a list of wrapped lines.  By
    default, tabs in 'text' are expanded with string.expandtabs(), and
    all other whitespace characters (including newline) are converted to
    space.  See TextWrapper class for available keyword args to customize
    wrapping behaviour.
    VTIMETerminal utilities.OSPEEDCS8OFLAGIEXTENLFLAGPARENBOPOSTtty.pyISPEEDICRNLISIG<module tty>CFLAGtermiosBRKINTISTRIPINPCKCSIZEVMINPut terminal into a raw mode.IXONICANONIFLAGPut terminal into a cbreak mode.ECHO<module unittest>_TextTestResultthis_dirunittest\__init__.py
Python unit testing framework, based on Erich Gamma's JUnit and Kent Beck's
Smalltalk testing framework (used with permission).

This module contains the core framework classes that form the basis of
specific test cases and suites (TestCase, TestSuite etc.), and also a
text-based utility class for running the tests and reporting the results
 (TextTestRunner).

Simple usage:

    import unittest

    class IntegerArithmeticTestCase(unittest.TestCase):
        def testAdd(self):  # test method names begin with 'test'
            self.assertEqual((1 + 2), 3)
            self.assertEqual(0 + 1, 1)
        def testMultiply(self):
            self.assertEqual((0 * 10), 0)
            self.assertEqual((5 * 8), 40)

    if __name__ == '__main__':
        unittest.main()

Further information is available in the bundled documentation, and from

  http://docs.python.org/library/unittest.html

Copyright (c) 1999-2003 Steve Purcell
Copyright (c) 2003-2010 Python Software Foundation
This module is free software, and you may redistribute it and/or modify
it under the same terms as Python itself, so long as this copyright message
and disclaimer are retained in their original form.

IN NO EVENT SHALL THE AUTHOR BE LIABLE TO ANY PARTY FOR DIRECT, INDIRECT,
SPECIAL, INCIDENTAL, OR CONSEQUENTIAL DAMAGES ARISING OUT OF THE USE OF
THIS CODE, EVEN IF THE AUTHOR HAS BEEN ADVISED OF THE POSSIBILITY OF SUCH
DAMAGE.

THE AUTHOR SPECIFICALLY DISCLAIMS ANY WARRANTIES, INCLUDING, BUT NOT
LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A
PARTICULAR PURPOSE.  THE CODE PROVIDED HEREUNDER IS ON AN "AS IS" BASIS,
AND THERE IS NO OBLIGATION WHATSOEVER TO PROVIDE MAINTENANCE,
SUPPORT, UPDATES, ENHANCEMENTS, OR MODIFICATIONS.
NUITKA_PACKAGE_unittestseq_typeFunctionTestCase.__init___AssertWarnsContext.__exit___AssertLogsContext.__enter___LoggingWatcheran exception type or tuple of exception typesstandardMsgtest_caselogger_name%s unexpectedly found in %sFail if the two objects are equal as determined by their
           difference rounded to the given number of decimal places
           (default 7) and comparing to zero, or by comparing that the
           difference between the two objects is less than the given delta.

           Note that decimal places (from zero) are usually not the same
           as significant digits (measured from the most significant digit).

           Objects that are equal automatically fail.
        max_difffailUnlessRaisesassertListEqualTestCase.assertEqualcallable_objexpected_regexSecond sequence is not a %s: %s%s is not falseHonour the longMessage attribute when generating failure messages.
        If longMessage is False this means:
        * Use only an explicit message if it is provided
        * Otherwise use the standard message for the assert

        If longMessage is True:
        * Use the standard message
        * If an explicit message is provided, plus ' : ' and the explicit message
        isTest__warningregistry___BaseTestCaseContextItems in the first set but not the second:_testFuncJust like self.assertTrue(a <= b), but with a nicer default message.item2A test case that wraps a test function.

    This is useful for slipping pre-existing test functions into the
    unittest framework. Optionally, set-up and tidy-up functions can be
    supplied. As with TestCase, the tidy-up ('tearDown') function will
    always be called if the set-up ('setUp') function ran successfully.
    A class whose instances are single test cases.

    By default, the test code itself should be placed in a method named
    'runTest'.

    If the fixture may be used for many test cases, create as
    many test methods as are needed. When instantiating such a TestCase
    subclass, specify in the constructor arguments the name of the test method
    that the instance is to execute.

    Test authors should subclass TestCase for their own tests. Construction
    and deconstruction of the test's environment ('fixture') can be
    implemented by overriding the 'setUp' and 'tearDown' methods respectively.

    If it is necessary to override the __init__ method, the base class
    __init__ method must always be called. It is important that subclasses
    should not change the signature of their __init__ method, since instances
    of the classes are instantiated automatically by parts of the framework
    in order to be run.

    When subclassing TestCase, you can set these attributes:
    * failureException: determines which exception will be raised when
        the instance's assertion methods fail; test methods raising this
        exception will be deemed to have 'failed' rather than 'errored'.
    * longMessage: determines whether long messages (including repr of
        objects used in assert methods) will be printed on failure in *addition*
        to any explicit message passed.
    * maxDiff: sets the maximum length of a diff in failure messages
        by assert methods using difflib. It is looked up as an instance
        attribute so can be configured by individual tests if required.
    TestCase.addCleanupassertNotAlmostEqualno logs of level {} or higher triggered on {}TestCase.assertIntestPartExecutor_raiseFailureTestCase._addSkipFail if the two objects are unequal as determined by the '=='
           operator.
        _BaseTestCaseContext._raiseFailureTestCase.assertIsNotsecond_seqmismatchedclear_framesexpected_warningJust like self.assertTrue(a not in b), but with a nicer default message.unexpected_regex
Diff is %s characters long. Set self.maxDiff to None to see it.
Unable to index element %d of second %s
_SubTest.idTestCase.assertWarns_AssertRaisesBaseContextoriginal_funcdeprecated_funcassertNotRegexpMatchesa warning type or tuple of warning typesSecond argument is not a dictionaryTestCase.assertLessFunctionTestCase.__str__firstlinesunittest.caseCreate an instance of the class that will use the named test
           method when executed. Raises a ValueError if the instance does
           not have a method with the specified name.
        TestCase.assertLogsJust like self.assertTrue(a > b), but with a nicer default message.assertNotIn
First differing element %d:
%s
%s
TestCase.assertRaises_SubTest.__str__Unable to index element %d of first %s
expr1expr2%s != %s within %r places (%s difference)
    A logging handler capturing all (raw and formatted) logging output.
    TestCase._deprecateGet a detailed comparison function for the types of the two args.

        Returns: A callable accepting (first, second, msg=None) that will
        raise a failure exception if first != second with a useful human
        readable error message for those types.
        First sequence is not a %s: %sFunctionTestCase.shortDescription_AssertRaisesBaseContext.__init__A context manager used to implement TestCase.assertRaises* methods.TestCase.assertTrueIncluded for symmetry with assertIsNone.Returns a one-line description of the subtest, or None if no
        description has been provided.
        <module unittest.case>%s is not an instance of %rTestCase.assertNotInTestResult has no addSkip method, skips not reported__unittest_expecting_failure__expected_regex must not be empty._SubTest.__init___CapturingHandler.__init__assertEqualsTestCase._truncateMessage"{}" does not match "{}"orig_resulttestMethodskip_whyexpecting_failure_methodexpecting_failure_classFunctionTestCase.tearDownTestCase.assertFalseTestCase.assertNotIsInstance(<subtest>)test_itemskip_wrapperA context manager used to implement TestCase.assertLogs().params_descnew_childlist1list2Fail unless a warning of class warnClass is triggered
           by the callable when invoked with specified positional and
           keyword arguments.  If a different type of warning is
           triggered, it will not be handled: depending on the other
           warning filtering rules in effect, it might be silenced, printed
           out, or raised as an exception.

           If called with the callable and arguments omitted, will return a
           context object used like this::

                with self.assertWarns(SomeWarning):
                    do_something()

           An optional keyword argument 'msg' can be provided when assertWarns
           is used as a context object.

           The context manager keeps a reference to the first matching
           warning as the 'warning' attribute; similarly, the 'filename'
           and 'lineno' attributes give you information about the line
           of Python code from which the warning was triggered.
           This allows you to inspect the warning after the assertion::

               with self.assertWarns(SomeWarning) as cm:
                   do_something()
               the_warning = cm.warning
               self.assertEqual(the_warning.some_attribute, 147)
        assertGreaterEqualexc_nameSecond argument is not a stringTestCase._formatMessageIncluded for symmetry with assertIsInstance.The default assertEqual implementation, not type specific.Fail if the two objects are equal as determined by the '!='
           operator.
        assertCountEqualassertLessEqual%s not greater than %swatcherSame as self.assertTrue(isinstance(obj, cls)), with a nicer
        default message.typeobj_AssertWarnsContext.__enter__subtests cannot be run directlyfirst_matching
        If args is empty, assertRaises/Warns is being used as a
        context manager, so check for a 'msg' kwarg and return self.
        If args is not empty, call a callable passing positional and keyword
        arguments.
        assertRaisesRegexJust like self.assertTrue(a is not b), but with a nicer default message.diffMsg_AssertLogsContext.__exit__assertNotAlmostEquals
    Skip a test unless the condition is true.
    TestCase._feedErrorsToResultFail immediately, with the given message.Run the test without collecting errors in a TestResultReturns a one-line description of the test, or None if no
        description has been provided.

        The default implementation of this method returns the first line of
        the specified test method's docstring.
        Second %s has no length.    Non-sequence?Hook method for deconstructing the test fixture after testing it.TestCase.assertListEqual_cleanupsTestCase.assertSetEqualunittest\case.pyseq_type_namelen2item1_base_type_str_OutcomeTestResult has no addUnexpectedSuccess method, reporting as failureTestCase.defaultTestResultassertRegexMissing: %s_setUpFuncset1set2difference1difference2TestCase.assertLessEqualRegex matched: %r matches %r in %rassertWarnsRegex_BaseTestCaseContext.__init__%s == %s within %r placesExecute all cleanup functions. Normally called for you after
        tearDown.%s != %s within %s delta (%s difference){} not triggered_AssertRaisesBaseContext.handleassertRaisesRegexpFail if the two objects are unequal as determined by their
           difference rounded to the given number of decimal places
           (default 7) and comparing to zero, or by comparing that the
           difference between the two objects is more than the given
           delta.

           Note that decimal places (from zero) are usually not the same
           as significant digits (measured from the most significant digit).

           If the two objects compare equal then they will automatically
           compare almost equal.
        assertTupleEqualTestCase.assertSequenceEqualHook method for setting up class fixture before running tests in the class.assertNotEqualFirst extra element %d:
%s
first_seq
    Skip a test if the condition is true.
    Just like self.assertTrue(a is b), but with a nicer default message._baseAssertEqual_addExpectedFailure_Outcome.testPartExecutor_AssertRaisesContextTestCase.assertIsNone_type_equality_funcsItems in the second set but not the first:secondlinesassertDictContainsSubsetTestCase.setUpClass__unittest_skip_why___diffThresholdA context manager used to implement TestCase.assertWarns* methods.Element counts were not equal:
TestCase.assertRaisesRegexFirst has %d, Second has %d:  %raddTypeEqualityFuncHook method for setting up the test fixture before exercising it.Check that the expression is false.asserterunexpectedly None%s is not trueTestResult has no addExpectedFailure method, reporting as passesinvalid type when attempting set difference: %sfailUnlessEqualbasetypeAsserts that the message in a triggered warning matches a regexp.
        Basic functioning is similar to assertWarns() with the addition
        that only warnings whose messages also match the regular expression
        are considered successful matches.

        Args:
            expected_warning: Warning class expected to be triggered.
            expected_regex: Regex (re.Pattern object or string) expected
                    to be found in error message.
            args: Function to be called and extra positional args.
            kwargs: Extra kwargs.
            msg: Optional message used in case of failure. Can only be used
                    when assertWarnsRegex is used as a context manager.
        Add a type specific assertEqual style function to compare a type.

        This method is for use by TestCase subclasses that need to register
        their own type equality functions to provide nicer error messages.

        Args:
            typeobj: The data type to call this function on when both values
                    are of the same type in assertEqual().
            function: The callable taking two arguments and an optional
                    msg= argument that raises self.failureException with a
                    useful error message when the two arguments are not equal.
        FunctionTestCase.idassertAlmostEqualsHook method for deconstructing the class fixture after running all tests in the class.old_propagateTestCase._baseAssertEqualSame as self.assertTrue(obj is None), with a nicer default message.
    The test should stop.
    assertion_funcTestCase.assertTupleEqualTestCase.tearDownClass%r is an invalid keyword argument for this functionmethodNameJust like self.assertTrue(a in b), but with a nicer default message.assertIsNotNoneTestCase.assertIsNotNoneTestCase._deprecate.<locals>.deprecated_funcChecks whether dictionary is a superset of subset.Fail unless an exception of class expected_exception is raised
           by the callable when invoked with specified positional and
           keyword arguments. If a different type of exception is
           raised, it will not be caught, and the test case will be
           deemed to have suffered an error, exactly as for an
           unexpected exception.

           If called with the callable and arguments omitted, will return a
           context object used like this::

                with self.assertRaises(SomeException):
                    do_something()

           An optional keyword argument 'msg' can be provided when assertRaises
           is used as a context object.

           The context manager keeps a reference to the exception as
           the 'exception' attribute. This allows you to inspect the
           exception after the assertion::

               with self.assertRaises(SomeException) as cm:
                   do_something()
               the_exception = cm.exception
               self.assertEqual(the_exception.error_code, 3)
        callable is NoneLOGGING_FORMATparams_mapA list-specific equality assertion.

        Args:
            list1: The first list to compare.
            list2: The second list to compare.
            msg: Optional message to use on failure instead of a list of
                    differences.

        Check that the expression is true.{} not raisedunexpectedly identical: %sFirst argument is not a dictionaryold_levelold_success_is_subtypeTestCase.assertDictContainsSubset.<locals>.<genexpr>_Outcome.__init__TestCase.countTestCasesFirst %s has no length.    Non-sequence?TestCase._addUnexpectedSuccessTestCase.assertNotEqual_is_subtype.<locals>.<genexpr><%s testMethod=%s>TestCase.assertMultiLineEqualTestCase.assertIsInstanceNo testTestCase.doCleanups%s, expected: %s, actual: %s_subtest_msg_sentinel_testMethodDoc
First %s contains %d additional elements.
{} not triggered by {}%s not greater than or equal to %sTestCase.addTypeEqualityFunc_UnexpectedSuccessassertDictEqualAn equality assertion for ordered sequences (like lists and tuples).

        For the purposes of this function, a valid ordered sequence type is one
        which can be indexed, has a length, and has an equality operator.

        Args:
            seq1: The first sequence to compare.
            seq2: The second sequence to compare.
            seq_type: The expected datatype of the sequences, or None if no
                    datatype should be enforced.
            msg: Optional message to use on failure instead of a list of
                    differences.
        _ShouldStop_AssertRaisesContext.__enter___CapturingHandler.emitTestCase.assertDictEqualFunctionTestCase.__repr__assertNotEqualsJust like self.assertTrue(a >= b), but with a nicer default message.TestCase.skipTestsubTest
Second %s contains %d additional elements.
<%s tec=%s>Test case implementationFunctionTestCase.runTestTestCase.assertCountEqualTestCase.__call__Regex didn't match: %r not found in %rAdd a function, with arguments, to be called when the test is
        completed. Functions added are called on a LIFO basis and are
        called after tearDown on test failure or success.

        Cleanup items are called even if setUp fails (unlike tearDown).%s not found in %sSkip this test.Asserts that the message in a raised exception matches a regex.

        Args:
            expected_exception: Exception class expected to be raised.
            expected_regex: Regex (re.Pattern object or string) expected
                    to be found in error message.
            args: Function to be called and extra positional args.
            kwargs: Extra kwargs.
            msg: Optional message used in case of failure. Can only be used
                    when assertRaisesRegex is used as a context manager.
        _tearDownFuncsecond argument does not support set difference: %s_OrderedChainMap.__iter__TestCase.assertGreaterresult_supports_subtests%s is not None_AssertRaisesContext.__exit___SubTest.runTestspecify delta or places not bothTestCase.assertNotRegex%s() arg 1 must be %sobj_nameTestCase.assertGreaterEqualFunctionTestCase.__hash__TestCase._getAssertEqualityFunc
    Unconditionally skip a test.
    %ss differ: %s != %s
Assert that two multi-line strings are equal.Fail the test unless the text matches the regular expression.First argument is not a string%s not less than %s
    The test was supposed to fail, but it didn't!
    TestCase.subTestTestCase.assertNotAlmostEqualfailIfEqualTestCase.assertWarnsRegex_SubTest.shortDescriptionTestCase.assertRegexPlease use {0} instead._SubTest._subDescription%s : %sA set-specific equality assertion.

        Args:
            set1: The first set to compare.
            set2: The second set to compare.
            msg: Optional message to use on failure instead of a list of
                    differences.

        assertSetEqual uses ducktyping to support different types of sets, and
        is optimized for sets specifically (parameters must support a
        difference method).
        FunctionTestCase.__eq__Fail unless a log message of level *level* or higher is emitted
        on *logger_name* or its children.  If omitted, *level* defaults to
        INFO and *logger* defaults to the root logger.

        This method must be used as a context manager, and will yield
        a recording object with two attributes: `output` and `records`.
        At the end of the context manager, the `output` attribute will
        be a list of the matching formatted log messages and the
        `records` attribute will be a list of the corresponding LogRecord
        objects.

        Example::

            with self.assertLogs('foo', level='INFO') as cm:
                logging.getLogger('foo').info('first message')
                logging.getLogger('foo.bar').error('second message')
            self.assertEqual(cm.output, ['INFO:foo:first message',
                                         'ERROR:foo.bar:second message'])
        Just like self.assertTrue(a < b), but with a nicer default message.assertDictContainsSubset is deprecatedReturn a context manager that will return the enclosed block
        of code in a subtest identified by the optional message and
        keyword parameters.  A failure in the subtest marks the test
        case as failed but resumes execution at the end of the enclosed
        block, allowing further test code to be executed.
        warnings_manager
    Raise this exception in a test to skip it.

    Usually you can use TestCase.skipTest() or one of the skipping decorators
    instead of raising this directly.
    FunctionTestCase.setUpA tuple-specific equality assertion.

        Args:
            tuple1: The first tuple to compare.
            tuple2: The second tuple to compare.
            msg: Optional message to use on failure instead of a list of
                    differences.
        TestCase.failAn unordered sequence comparison asserting that the same elements,
        regardless of order.  If the same element occurs more than once,
        it verifies that the elements occur the same number of times.

            self.assertEqual(Counter(list(first)),
                             Counter(list(second)))

         Example:
            - [0, 1, 1] and [1, 0, 1] compare equal.
            - [0, 0, 1] and [0, 1] compare unequal.

        skip.<locals>.decorator.<locals>.skip_wrapperfailIfAlmostEqual
Unable to index element %d of first %s
_SubTest._subDescription.<locals>.<genexpr>Fail the test if the text matches the regular expression.TestCase._addExpectedFailureDIFF_OMITTED%s not less than or equal to %s_AssertLogsContext.__init__assertRegexpMatchesTestCase.assertAlmostEqualMismatched values: %s{} not raised by {}%s is an instance of %r%s is not %s%s == %s within %s delta (%s difference)_CapturingHandler.flushfirst argument does not support set difference: %sno such test method in %s: %sold_handlersfailUnlessAlmostEqual_match_pathfullNametestCaseNamesFailed to access attribute:
%s_FailedTest.__getattr__.<locals>.testFailureTestLoader.__init__testCaseClasssortUsingsuiteClass$py.classuse_load_testsTestLoader.loadTestsFromModuleTestLoader.getTestCaseNamesReturn a suite of all test cases contained in the given moduleloadTestsFromModule() got an unexpected keyword argument '{}'_make_failed_load_testsshouldIncludeMethodtestFnNames_make_failed_testCan not use builtin modules as dotted module namesReturn a suite of all test cases found using the given sequence
        of string specifiers. See 'loadTestsFromName()'.
        %r module incorrectly imported from %r. Expected %r. Is this module globally installed?TestLoader._match_pathsortTestMethodsUsing_find_test_pathTestLoader._get_module_from_name_relpathVALID_MODULE_NAMETestLoader._find_test_pathtestMethodPrefix_get_name_from_path<module unittest.loader>don't know how to make test from: %suse_load_tests is deprecated and ignoredtop_partFailed to import test module: %s
%scalling %s returned %s, not a test_jython_aware_splitextTestLoader._get_directory_containing_moduletestSkippedis_namespace_loading_packagesReturn a sorted sequence of method names found within testCaseClass
        Return a suite of all test cases contained in testCaseClassTestLoader.loadTestsFromNameTestLoader.getTestCaseNames.<locals>.shouldIncludeMethoderror_casetop_level_dirPath must be within the projectloadTestsFromTestCaseshould_recurseloaded_suite
    This class is responsible for loading tests according to various criteria
    and returning them wrapped in a TestSuite
    Return a suite of all test cases given a string specifier.

        The name may resolve either to a module, a test case class, a
        test method within a test case class, or a callable object which
        returns a TestCase or TestSuite instance.

        The method optionally resolves the names relative to a given module.
        attrname_make_skipped_test.<locals>.testSkipped_FailedTest.__init__TestLoader.getTestCaseNames.<locals>.shouldIncludeMethod.<locals>.<genexpr>complaintis_not_importableModuleSkippedset_implicit_topthe_module_top_level_dir_find_testsLoading unittests.©ÚselfÚ	full_pathÚpatternÚ	namespaceÚbasenameÚnameÚmoduleÚeÚ
error_caseÚerror_messageÚmod_fileÚrealpathÚfullpath_noextÚ
module_dirÚmod_nameÚexpected_dirÚmsgÚ
load_testsÚtestsÚpackageunittest\loader.pyUsed by discovery. Yields test suites it loads.Test cases should not be derived from TestSuite. Maybe you meant to derive from TestCase?TestLoader._find_tests_makeLoaderTestLoader._get_name_from_pathdon't know how to discover from {!r}Start directory is not importable: %rparts_copynext_attributeFailed to call load_tests:
%s_make_failed_import_testTestLoader.loadTestsFromNamesFind and return all test modules from the specified start
        directory, recursing into subdirectories to find them and return all
        tests found within them. Only test files that match the pattern will
        be loaded. (Using shell style pattern matching.)

        All test modules must be importable from the top level of the project.
        If the start directory is not the top level directory then the top
        level directory must be specified separately.

        If a test package name (directory with '__init__.py') matches the
        pattern then the package will be checked for a 'load_tests' function. If
        this exists then it will be called with (loader, tests, pattern) unless
        the package has already had load_tests called from the same discovery
        invocation, in which case the package module object is not scanned for
        tests - this ensures that when a package uses discover to further
        discover child tests that infinite recursion does not happen.

        If load_tests exists then discovery does *not* recurse into the package,
        load_tests is responsible for loading all tests in the package.

        The pattern is deliberately not stored as a loader attribute so that
        packages can continue discovery themselves. top_level_dir is stored so
        load_tests does not need to pass this argument in to loader.discover().

        Paths are sorted before being imported to ensure reproducible execution
        order even on filesystems with non-alphabetical ordering like ext3/4.
        TestLoader.discoverUsed by discovery.

        Loads tests from a single file, or a directories' __init__.py when
        passed the directory.

        Returns a tuple (None_or_tests_from_file, should_recurse).
        [_a-z]\w*\.py$TestLoader.loadTestsFromTestCaseloadTestsFromModule() takes 1 positional argument but {} were givenShow local variables in tracebacksQuiet outputTestProgram._getMainArgParser_convert_select_patternStop on first fail or error--localsparseArgs--buffer--failfastcreateTestsfrom_discoveryparent_parserMAIN_EXAMPLESTestProgram.__init__Directory to start discovery ('.' default)TestProgram.createTestsExamples:
  %(prog)s                           - run default set of tests
  %(prog)s MyTestSuite               - run suite 'MyTestSuite'
  %(prog)s MyTestCase.testSomething  - run MyTestCase.testSomething
  %(prog)s MyTestCase                - run all 'test*' test methods
                                       in MyTestCase
TestProgram._getDiscoveryArgParserTestProgram._do_discovery%s discover--top-level-directory<module unittest.main>testRunnertestLoadercatchbreak--patternTop level directory of project (defaults to start directory)Catch Ctrl-C and display results so far--catchTestProgram._initArgParsersrel_pathTestProgram.parseArgs--start-directoryFor test discovery all test modules must be importable from the top level directory of the project.Examples:
  %(prog)s test_module               - run tests from test_module
  %(prog)s module.TestClass          - run tests from module.TestClass
  %(prog)s module.Class.test_method  - run specified test method
  %(prog)s path/to/test_file.py      - run tests from test_file.py
_print_helpTestProgram.usageExit*%s*progNamea list of any number of test modules, classes and test methods.Buffer stdout and stderr during testsA command-line program that runs a set of tests; this is primarily
       for making test modules conveniently executable.
    TestProgram._print_helpMODULE_EXAMPLESPattern to match tests ('test*.py' default)_discovery_parser_getParentArgParserOnly run tests which match the given substringunittest\main.py_main_parser_convert_name_convert_namestestNamesUnittest main programTestProgram.runTestsTestProgram._getParentArgParser
Stdout:
%stb_ecapture_localsCalled once after all tests are executed.

        See stopTest for a method called after each test.
        TestResult.addSkipConverts a sys.exc_info()-style tuple of values into a string.TestResult._restoreStdoutTestResult.addSubTestTestResult._setupStdoutCalled when the given test is about to be runIndicates that the tests should be aborted.TestResult.wasSuccessfulTestResult._exc_info_to_stringTestResult.stopTestRunCalled when the given test has been run_original_stdoutCalled once before any tests are executed.

        See startTest for a method called before each test.
        TestResult._is_relevant_tb_level
Stderr:
%s_stdout_bufferTestResult._count_relevant_tb_levels<module unittest.result><%s run=%i errors=%i failures=%i>TestResult.printErrorsSTDERR_LINETestResult.addSuccessTestResult.__repr__TestResult.addErrorTestResult.addUnexpectedSuccess_original_stderrfailfast.<locals>.innerTracebackExceptionSTDOUT_LINECalled at the end of a subtest.
        'err' is None if the subtest ended successfully, otherwise it's a
        tuple of values as returned by sys.exc_info().
        msgLines_stderr_bufferTest result objectTestResult.startTestRun_mirrorOutputCalled when a test has completed successfullyTestResult.__init__Called by TestRunner after test runTestResult.addExpectedFailureCalled when a test was expected to fail, but succeed.Called when an expected failure/error occurred.Holder for test result information.

    Test results are automatically managed by the TestCase and TestSuite
    classes, and do not need to be explicitly manipulated by writers of tests.

    Each instance holds the total number of tests run, and collections of
    failures and errors that occurred among those test runs. The collections
    contain tuples of (testcase, exceptioninfo), where exceptioninfo is the
    formatted traceback of the error that occurred.
    Tells whether or not this result was a success.Called when an error has occurred. 'err' is a tuple of values as
        returned by sys.exc_info().
        unittest\result.pyCalled when a test is skipped.TestResult.addFailure_makeResultPlease use assert\w+ instead.TextTestRunner.runTextTestResult.printErrorListTextTestResult.__init__stopTime_WritelnDecoratorunittest.runnerresultclassflavour_WritelnDecorator.__init__showAllunittest\runner.pyTextTestResult.addSkipRunning tests_WritelnDecorator.writelntimeTakenunexpected successes=%dseparator2doc_first_line<module unittest.runner>TextTestResult.addUnexpectedSuccessA test runner class that displays results in textual form.

    It prints out the names of tests as they are run, errors as they
    occur, and a summary of the results at the end of the test run.
    expectedFailsgetDescriptionTextTestResult.startTestskipped=%dfailures=%dTextTestResult.getDescriptionRun the given test case or test suite.TextTestResult.addErrorseparator1TextTestResult.addExpectedFailureTextTestResult.addFailureexpected failures=%dUsed to decorate file-like objects with a handy 'writeln' methodTextTestResult.printErrorsskipped {0!r}errors=%dRan %d test%s in %.3fsA test result class that can print formatted text results to a stream.

    Used by TextTestRunner.
    TextTestResult.addSuccessTextTestRunner._makeResultTextTestRunner.__init___WritelnDecorator.__getattr__Construct a TextTestRunner.

        Subclasses should accept **kwargs to ensure compatibility as the
        interface changes.
        default_handleroriginal_handler_InterruptHandler.__init__.<locals>.default_handler<module unittest.signals>unused_signumexpected SIGINT signal handler to be signal.SIG_IGN, signal.SIG_DFL, or a callable objectunused_framedefault_int_handler_interrupt_handlerremoveHandler.<locals>.innerunittest\signals.py_InterruptHandler.__call__installed_handlerTestSuite._handleModuleFixtureTestSuite._handleModuleTearDown_ErrorHolder.__repr___ErrorHolder.run<module unittest.suite>BaseTestSuite.__iter__errorNamecurrentModulecurrentClass_ErrorHolder.countTestCases_get_previous_moduleBaseTestSuite.addTest_handleClassSetUp
    Placeholder for a TestCase inside a result. As far as a TestResult
    is concerned, this looks exactly like a unit test. Used to insert
    arbitrary errors into a test suite run.
    unittest\suite.pytests must be an iterable of tests, not a stringpreviousClassclassNameBaseTestSuite.__init__TestSuite.debug_addClassOrModuleLevelExceptionA test suite is a composite test consisting of a number of TestCases.

    For use, create an instance of TestSuite, then add test case instances.
    When all tests have been added, the suite can be passed to a test
    runner, such as TextTestRunner. It will run the individual test cases
    in the order in which they were added, aggregating the results. When
    subclassing, do not forget to call the base class constructor.
    _call_if_existssetUpModule_removed_testsBaseTestSuite.__eq__BaseTestSuite._removeTestAtIndexTestSuite.runpreviousModuletearDownClass (%s)tearDownModuleBaseTestSuite.countTestCasessetUpClass (%s)setUpModule (%s)_call_if_exists.<locals>.<lambda>_DebugResulttopLevelBaseTestSuite.debugTestSuite._handleClassSetUpRun the tests without collecting errors in a TestResultBaseTestSuite.__call__addTests{} is not callable_isnotsuiteBaseTestSuite.run<%s tests=%s>_tearDownPreviousClassTestSuite._addClassOrModuleLevelExceptionTestSuite._get_previous_moduleBaseTestSuite.addTests_ErrorHolder.id<ErrorHolder description=%r>_ErrorHolder.__str__A crude way to tell apart testcases and suites with duck-typingTestCases and TestSuites must be instantiated before passing them to addTest()Used by the TestSuite to hold previous class when running in debug._ErrorHolder.__call__tearDownModule (%s)A simple test suite that doesn't provide class or module shared fixtures.
    Stop holding a reference to the TestCase at index._ErrorHolder.shortDescription_ErrorHolder.__init__TestSuite._tearDownPreviousClassBaseTestSuite.__repr__unittest\util.py_MIN_COMMON_LENcnt_s_PLACEHOLDER_LENReturn -1 if x < y, 0 if x == y and 1 if x > y_common_shorten_repr.<locals>.<genexpr>cnt_tother_elemunittest.util_MAX_LENGTHReturns list of (cnt_act, cnt_exp, elem) triples where the counts differunorderable_list_differenceactual expected value_MIN_END_LENsorted_list_differenceFinds elements in only one or the other of two, sorted input lists.

    Returns a two-element tuple of lists.    The first list contains those
    elements in the "expected" list but not in the "actual" list, and the
    second contains those elements in the "actual" list but not in the
    "expected" list.    Duplicate elements in either input list are ignored.
    _MIN_BEGIN_LEN<module unittest.util>_Mismatch%s[%d chars]%s_MIN_DIFF_LENprefixlencommon_lenSame behavior as sorted_list_difference but
    for lists of unorderable items (like dicts).

    As it does a linear search per item (remove) it
    has O(n*n) performance.suffixlen [truncated]...Various utility functions.NUITKA_PACKAGE_urllib<module urllib>urllib\__init__.pydefragThe URL with no fragment identifier.userinfomax_num_fieldsquoternntpSplitResultBytes.geturl
The hierarchical path, such as the path to a file to download.
host_portParseResultBytes.geturl/?#@:bad query field: %rnon_hierarchicaluses_netlocÛ   zurlparsez
urlunparsezurljoinz	urldefragzurlsplitz
urlunsplitz	urlencodezparse_qsz	parse_qslzquotez
quote_pluszquote_from_byteszunquotezunquote_pluszunquote_to_byteszDefragResultzParseResultzSplitResultzDefragResultByteszParseResultByteszSplitResultBytesmmsgopherrtsprtspusipssplitquery%{:02X}url fragment_coerce_result_encoded_counterpartsplitnportStandard approach to decoding parsed results from bytes to strEncode a dict or sequence of two-element tuples into a URL query string.

    If any values in the query arg are sequences and doseq is true, each
    sequence element is converted to a separate parameter.

    If the query arg is a sequence of two-element tuples, the order of the
    parameters in the output will match the order of parameters in the
    input.

    The components of a query arg may each be either a string or a bytes type.

    The safe, encoding, and errors parameters are passed down to the function
    specified by quote_via (encoding and errors only if a component is a str).
    Like quote(), but also replace ' ' with '+', as required for quoting
    HTML form values. Plus signs in the original string are escaped unless
    they are included in safe. It also does not have safe default to '/'.
    urlsplit.<locals>.<genexpr>Standard approach to encoding parsed results from str to bytesParse a URL into 6 components:
    <scheme>://<netloc>/<path>;<params>?<query>#<fragment>
    Return a 6-tuple: (scheme, netloc, path, params, query, fragment).
    Note that we don't break the components up in smaller bits
    (e.g. netloc is a single string) and we don't expand % escapes.uses_queryCannot mix str and non-str arguments¾B   é-   é.   é0   é1   é2   é3   é4   é5   é6   é7   é8   é9   éA   éB   éC   éD   éE   éF   éG   éH   éI   éJ   éK   éL   éM   éN   éO   éP   éQ   éR   éS   éT   éU   éV   éW   éX   éY   éZ   é_   éa   éb   éc   éd   ée   éf   ég   éh   éi   éj   ék   él   ém   én   éo   ép   éq   ér   és   ét   éu   év   éw   éx   éy   éz   é~   urllib\parse.pySplitResult.geturlprosperosftp_result_pairs_DefragResultBasetelnetsplithost('//host[:port]/path') --> 'host[:port]', '/path'._hostinfo_implicit_errors(.*):([0-9]*)$_NetlocResultMixinBytes._userinfo_asciiresplittag([ -]+)_decode_args_implicit_encoding_NetlocResultMixinBaseCombine the elements of a tuple as returned by urlsplit() into a
    complete URL as a string. The data argument can be any five-item iterable.
    This may result in a slightly different, but equivalent URL, if the URL that
    was parsed originally had unnecessary delimiters (for example, a ? with an
    empty query; the RFC states that these are equivalent).splitquery('/path?query') --> '/path', 'query'.name_value<module urllib.parse>Parse a query given as a string argument.

        Arguments:

        qs: percent-encoded query string to be parsed

        keep_blank_values: flag indicating whether blank values in
            percent-encoded queries should be treated as blank strings.
            A true value indicates that blanks should be retained as blank
            strings.  The default false value indicates that blank values
            are to be ignored and treated as if they were  not included.

        strict_parsing: flag indicating what to do with parsing errors. If
            false (the default), errors are silently ignored. If true,
            errors raise a ValueError exception.

        encoding and errors: specify how to decode percent-encoded sequences
            into Unicode characters, as accepted by the bytes.decode() method.

        max_num_fields: int. If set, then throws a ValueError
            if there are more than n fields read by parse_qsl().

        Returns a list, as G-d intended.
    safe: bytes object._portprog_hostprogsplitresult_NetlocResultMixinBytes._hostinfo_ResultMixinStr_fix_result_transcoding_SplitResultBaseA mapping from bytes (in range(0,256)) to strings.

    String values are percent-encoded byte values, unless the key < 128, and
    in the "safe" set (either the specified safe set, or default set).
    _typeprog_ALWAYS_SAFE_BYTES_safe_quotersnetloc 'svnquote('abc def') -> 'abc%20def'

    Each part of a URL, e.g. the path info, the query, etc., has a
    different set of reserved characters that must be quoted.

    RFC 3986 Uniform Resource Identifiers (URI): Generic Syntax lists
    the following reserved characters.

    reserved    = ";" | "/" | "?" | ":" | "@" | "&" | "=" | "+" |
                  "$" | "," | "~"

    Each of these characters is reserved in some component of a URL,
    but not necessarily in all of them.

    Python 3.7 updates from using RFC 2396 to RFC 3986 to quote URL strings.
    Now, "~" is included in the set of reserved characters.

    By default, the quote function is intended for quoting the path
    section of a URL.  Thus, it will not encode '/'.  This character
    is reserved, but in typical usage the quote function is being
    called on a path where the existing slash characters are used as
    reserved characters.

    string and safe may be either str or bytes objects. encoding and errors
    must not be specified if string is a bytes object.

    The optional encoding and errors parameters specify how to deal with
    non-ASCII characters, as accepted by the str.encode method.
    By default, encoding='utf-8' (characters are encoded with UTF-8), and
    errors='strict' (unsupported characters raise a UnicodeEncodeError).
    _ResultMixinStr.encode.<locals>.<genexpr>_NetlocResultMixinBase.usernameSpecifies URL scheme for the request.allow_fragmentssplituser('user[:passwd]@host[:port]') --> 'user[:passwd]', 'host[:port]'.//([^/#?]*)(.*)have_open_br_checknetloc_NetlocResultMixinStrInvalid IPv6 URL
Network location where the request is made to.
_NetlocResultMixinStr._hostinfoscheme netloc path params query fragmentLike unquote(), but also replace plus signs by spaces, as required for
    unquoting HTML form values.

    unquote_plus('%7e/abc+def') -> '~/abc def'
    _ResultMixinBytes.decode.<locals>.<genexpr>Put a parsed URL back together again.  This may result in a
    slightly different, but equivalent URL, if the URL that was parsed
    originally had redundant delimiters, e.g. a ? with an empty query
    (the draft states that these are equivalent).splitport('host:port') --> 'host', 'port'._NetlocResultMixinBase.passwordDefragResult.geturlsvn+sshwsssnewsLike quote(), but accepts a bytes object rather than a str, and does
    not perform string-to-bytes encoding.  It always returns an ASCII string.
    quote_from_bytes(b'abc def?') -> 'abc%20def%3f'
    
DefragResult(url, fragment)

A 2-tuple that contains the url without fragment identifier and the fragment
identifier as a separate argument.
scheme netloc path query fragmentunwrap('<URL:type://host/path>') --> 'type://host/path'.Shared methods for the parsed result objects containing a netloc element_splitnetlocnetloc2uses_relativeunquote_to_bytes('abc%20def') -> b'abc def'.splitattr('/path;attr1=value1;attr2=value2;...') ->
        '/path', ['attr1=value1', 'attr2=value2', ...].Quoter_NetlocResultMixinStr._userinfo©ÚbaseÚurlÚallow_fragmentsÚ_coerce_resultÚbschemeÚbnetlocÚbpathÚbparamsÚbqueryÚ	bfragmentÚschemeÚnetlocÚpathÚparamsÚqueryÚfragmentÚ
base_partsÚsegmentsÚresolved_pathÚsegClear the parse cache and the quoters cache.0123456789ABCDEFabcdefQuoter.__missing__parsed_result_splitparamsParse a URL into 5 components:
    <scheme>://<netloc>/<path>?<query>#<fragment>
    Return a 5-tuple: (scheme, netloc, path, query, fragment).
    Note that we don't break the components up in smaller bits
    (e.g. netloc is a single string) and we don't expand % escapes._hextobyte_decodedbracketedsplittype('type:opaquestring') --> 'type', 'opaquestring'.quote_from_bytes() expected bytesPort out of range 0-65535splittag('/path#tag') --> '/path', 'tag'.
ParseResult(scheme, netloc, path, params,  query, fragment)

A 6-tuple that contains components of a parsed URL.
splitpasswdwdelimsplitvalue('attr=value') --> 'attr', 'value'.Max number of fields exceedednot a valid non-string sequence or mapping object
SplitResult(scheme, netloc, path, query, fragment)

A 5-tuple that contains the different components of a URL. Similar to
ParseResult, but does not split params.
Û   Ú zftpzhttpzgopherznntpztelnetzimapzwaiszfilezmmszhttpszshttpzsnewszprosperozrtspzrtspuzrsynczsvnzsvn+sshzsftpznfszgitzgit+sshzwszwssdefporthave_infohave_password_NetlocResultMixinBase.port
The query component, that contains non-hierarchical data, that along with data
in path component, identifies a resource in the scope of URI's scheme and
network location.
scheme_chars([^/:]+):(.*)Join a base URL and a possibly relative URL to form an absolute
    interpretation of the latter.str_input
Fragment identifier, that allows indirect identification of a secondary resource
by reference to a primary resource and additional identifying information.
Removes any existing fragment from URL.

    Returns a tuple of the defragmented URL and the fragment.  If
    the URL contained no fragments, the second element is the
    empty string.
    uses_paramsquote() doesn't support 'errors' for bytes_parse_cacheabcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789+-.
Parameters for last path element used to dereference the URI in order to provide
access to perform some operation on the resource.
_coerce_args
Fragment identifier separated from URL, that allows indirect identification of a
secondary resource by reference to a primary resource and additional identifying
information.
ParseResult.geturlReplace %xx escapes by their single-character equivalent. The optional
    encoding and errors parameters specify how to decode percent-encoded
    sequences into Unicode characters, as accepted by the bytes.decode()
    method.
    By default, percent-encoded sequences are decoded with UTF-8, and invalid
    sequences are replaced by a placeholder character.

    unquote('abc%20def') -> 'abc def'.
    Parse a query given as a string argument.

        Arguments:

        qs: percent-encoded query string to be parsed

        keep_blank_values: flag indicating whether blank values in
            percent-encoded queries should be treated as blank strings.
            A true value indicates that blanks should be retained as
            blank strings.  The default false value indicates that
            blank values are to be ignored and treated as if they were
            not included.

        strict_parsing: flag indicating what to do with parsing errors.
            If false (the default), errors are silently ignored.
            If true, errors raise a ValueError exception.

        encoding and errors: specify how to decode percent-encoded sequences
            into Unicode characters, as accepted by the bytes.decode() method.

        max_num_fields: int. If set, then throws a ValueError if there
            are more than n fields read by parse_qsl().

        Returns a dictionary.
    %s;%sQuoter.__repr___encode_resultMAX_CACHE_SIZE_decode_args.<locals>.<genexpr>Split host and port, returning numeric port.
    Return given default port if no ':' found; defaults to -1.
    Return numerical port if a valid number are found after ':'.
    Return None if ':' but not a valid number.Quoter.__init___hexdig_ParseResultBase_decoded_counterpartsplitpasswd('user:passwd') -> 'user', 'passwd'.<%s %r>_NetlocResultMixinBase.hostname' contains invalid quote() doesn't support 'encoding' for bytesto_bytes(u"URL") --> 'URL'.uses_fragmentParse (absolute and relative) URLs.

urlparse module is based upon the following RFC specifications.

RFC 3986 (STD66): "Uniform Resource Identifiers" by T. Berners-Lee, R. Fielding
and L.  Masinter, January 2005.

RFC 2732 : "Format for Literal IPv6 Addresses in URL's by R.Hinden, B.Carpenter
and L.Masinter, December 1999.

RFC 2396:  "Uniform Resource Identifiers (URI)": Generic Syntax by T.
Berners-Lee, R. Fielding, and L. Masinter, August 1998.

RFC 2368: "The mailto URL scheme", by P.Hoffman , L Masinter, J. Zawinski, July 1998.

RFC 1808: "Relative Uniform Resource Locators", by R. Fielding, UC Irvine, June
1995.

RFC 1738: "Uniform Resource Locators (URL)" by T. Berners-Lee, L. Masinter, M.
McCahill, December 1994

RFC 3986 is considered the current standard and any future changes to
urlparse module should conform with it.  The urlparse module is
currently not entirely compliant with this RFC due to defacto
scenarios for parsing, and for backward compatibility purposes, some
parsing quirks from older RFCs are retained. The testcases in
test_urlparse.py provides a good indicator of parsing behavior.
characters under NFKC normalizationDefragResultBytes.geturlImplementation of the UUencode and UUdecode functions.

encode(in_file, out_file [,name, mode], *, backtick=False)
decode(in_file [, out_file, mode, quiet])
Warning: %s
Truncated input file<module uu> 
end
uuencode/uudecode main programuu.py--textusage: %prog [-d] [-t] [input [output]]b2a_uuopened_fileshdrfields`
end
Decode uuencoded file 	
No valid begin line found in input filedata is text, encoded format unix-compatible text?Decode (instead of encode)?: cannot do -t to stdouta2b_uu--decodeCannot overwrite existing file: %sUuencode filebegin %o %s
: cannot do -t from stdin_InfoWeakMethod.__eq__WeakKeyDictionary.__delitem__ReferenceTypefinalize.alive_dirty_lenfinalize._select_for_exit.<locals>.<lambda>getweakrefsWeakValueDictionary._commit_removalsWeakValueDictionary.__contains__WeakKeyDictionary.itemsWeakKeyDictionary.__repr__WeakValueDictionary.__getitem___weakrefsetweakref.pyWeak reference support for Python.

This module is an implementation of PEP 205:

http://www.python.org/dev/peps/pep-0205/
KeyedRef.__init__WeakKeyDictionary.__contains__WeakKeyDictionary.keysself_wrfinalize._Info_pending_removalsisenabledWhether finalizer should be called at exitWeakMethod.__ne__<%s object at %#x; for %r at %#x>WeakValueDictionary.__init__WeakValueDictionary.__len__WeakValueDictionary.keysWeakKeyDictionary.update
    A custom `weakref.ref` subclass which simulates a weak reference to
    a bound method, working around the lifetime problem of bound methods.
    _remove_dead_weakref<%s object at %#x; dead>getweakrefcountCallableProxyTypeProxyTypesWhether finalizer is aliveWeakKeyDictionary.__init__WeakKeyDictionary.copyWeakValueDictionary.__init__.<locals>.removereenable_gcIf alive then mark as dead and return (obj, func, args, kwargs);
        otherwise return Nonefinalize.peekWeakValueDictionary.__setitem__WeakKeyDictionary.__deepcopy___IterationGuardWeakValueDictionary.getWeakValueDictionary.update_func_ref_meth_typeReturn an iterator that yields the weak references to the values.

        The references are not guaranteed to be 'live' at the time
        they are used, so the result of calling the references needs
        to be checked before being used.  This can be used to avoid
        creating references that will cause the garbage collector to
        keep the values around longer than needed.

        WeakMethod.__call__If alive then return (obj, func, args, kwargs);
        otherwise return NoneWeakValueDictionary.itervaluerefsWeakMethod.__new__selfref_atomic_removalReturn a list of weak references to the keys.

        The references are not guaranteed to be 'live' at the time
        they are used, so the result of calling the references needs
        to be checked before being used.  This can be used to avoid
        creating references that will cause the garbage collector to
        keep the keys around longer than needed.

        Specialized reference that includes a key corresponding to the value.

    This is used in the WeakValueDictionary to avoid having to create
    a function object for each key stored in the mapping.  A shared
    callback object can use the 'key' attribute of a KeyedRef instead
    of getting a reference to the key from an enclosing scope.

    argument should be a bound method, not {}WeakValueDictionary.popitemWeakKeyDictionary.__setitem__WeakKeyDictionary._scrub_removals_iteratingfinalize.detachWeakKeyDictionary.popWeakMethod.__new__.<locals>._cbWeakKeyDictionary.valuesWeakKeyDictionary.__init__.<locals>.removefinalize.atexitfinalize.__init___registered_with_atexitkeyrefsfinalize.__call__expected at most 1 arguments, got %dIf alive then mark as dead and return func(*args, **kwargs);
        otherwise return NoneReturn a list of weak references to the values.

        The references are not guaranteed to be 'live' at the time
        they are used, so the result of calling the references needs
        to be checked before being used.  This can be used to avoid
        creating references that will cause the garbage collector to
        keep the values around longer than needed.

        WeakKeyDictionary.setdefaultWeakKeyDictionary.__len__WeakValueDictionary.__delitem__WeakValueDictionary.setdefaultWeakValueDictionary.__repr__WeakKeyDictionary.popitemWeakValueDictionary.itemsWeakKeyDictionary._commit_removals<module weakref>descriptor 'update' of 'WeakValueDictionary' object needs an argumentWeakValueDictionary.__deepcopy__WeakKeyDictionary.get<%s at %#x>Mapping class that references values weakly.

    Entries in the dictionary will be discarded when no strong
    reference to the value exists anymore
    WeakKeyDictionary.keyrefsWeakValueDictionary.valuesWeakKeyDictionary.__getitem___index_iterClass for finalization of weakrefable objects

    finalize(obj, func, *args, **kwargs) returns a callable finalizer
    object which will be called when obj is garbage collected. The
    first time the finalizer is called it evaluates func(*arg, **kwargs)
    and returns the result. After this the finalizer is dead, and
    calling it just returns None.

    When the program exits any remaining finalizers for which the
    atexit attribute is true will be run in reverse order of creation.
    By default atexit is true.
    KeyedRef.__new__descriptor '__init__' of 'WeakValueDictionary' object needs an argumentfinalize._exitfuncWeakValueDictionary.copyfinalize.__repr__ Mapping class that references keys weakly.

    Entries in the dictionary will be discarded when there is no
    longer a strong reference to the key. This can be used to
    associate additional data with an object owned by other parts of
    an application without adding attributes to those objects. This
    can be especially useful with objects that override attribute
    accesses.
    WeakValueDictionary.valuerefsLauncher class for Elinks browsers.autoraiseC:\Program Filescould not locate runnable browserGrail.openKonqueror.openGrail._remotesafarixdg-openRegister a browser connector.DISPLAYOmniWebmozillaGenericBrowser.openReturn a browser launcher instance appropriate for the environment.MacOSX.openiceweaselcontrollernew_winkonquerorClass for all browsers which are to be started in the
       background.Bad 'new' parameter to open(); elinksLauncher class for Aqua browsers on Mac OS X

        Optionally specify a browser name on instantiation.  Note that this
        will not work for Aqua browsers if the user has moved the application
        package after installation.

        If no browser is specified, the default browser, as specified in the
        Internet System Preferences panel, will be used.
        -new-tabMacOSXOSAScript.opengrailWindowsDefault-remoteLauncher class for Galeon/Epiphany browsers.kfmkfmclientremote_action_newwinskipstoneopenURL(%s%action)Grail._find_grail_rcBaseBrowserexpected 0, 1, or 2, got %sWindowsDefault.openNetscapeLauncher class for Google Chrome browser.osascriptfirebirdtoWindowosapipemozilla-firebirdchromium-browserMozillaxdg-settings get default-web-browserLauncher class for Mozilla browsers.--silentwindows-defaultBaseBrowser.open_new_tabUnixBrowser._invoke_synthesizeinoutBROWSERopen location "%s"iceapex-www-browserParent class for all Unix browsers with remote functionality.mozilla-firefoxUsage: %s [-n | -t] url
    -n: open new window
    -t: open new tab%22Interfaces for launching and remotely controlling Web browsers.MacOSX.__init__galeonepiphanyParent class for all browsers. Do not use directly.PROGRAMFILESLauncher class for Opera browser.startfileKDE_FULL_SESSIONwebbrowser.pyraise_optstoWindow %dgoogle-chrome_os_preferred_browserMacOSXOSAScript.__init__UnixBrowser.openw3mBackgroundBrowsergvfs-openseamonkeymosaic
                   tell application "%s"
                       activate
                       open location "%s"
                   end
                   OpenURL "%s"GNOME_DESKTOP_SESSION_IDLauncher class for Netscape browser.Attempt to synthesize a controller base on existing controllers.

    This is useful to create a controller when a user specifies a path to
    an entry in the BROWSER environment variable -- we can copy a general
    controller to operate using a specific installation of the desired
    browser in this way.

    If we can't create a controller in this way, or if there is no
    executable for the requested browser, return [None, None].

    _tryorder,new-tabLOAD maybesiexploreraw_resultuserchoices_browsers-noraiseGenericBrowser.__init__<module webbrowser>newTab.grail-unixChromium--new-windowgnome-open,new-windowController for the KDE File Manager (kfm, or Konqueror).

    See the output of ``kfmclient --commands``
    for more information on the Konqueror remote-control interface.
    Internet Explorer\IEXPLORE.EXElynxremote_action_newtabregister_X_browsersBaseBrowser.__init__remote_argsregister_standard_browsersLOADNEW tell application "%s"
                                activate
                                %s %s
                            end tellClass for all browsers started with a command
       and without remote functionality.BackgroundBrowser.open<module xml>saxxml\__init__.pyCore XML support for Python.

This package contains four sub-packages:

dom -- The W3C Document Object Model.  This supports DOM Level 1 +
       Namespaces.

parsers -- Python wrappers for XML parsers (currently only supports Expat).

sax -- The Simple API for XML, developed by XML-Dev, led by David
       Megginson and ported to Python by Lars Marius Garshol.  This
       supports the SAX 2 API.

etree -- The ElementTree XML library.  This is a subset of the full
       ElementTree XML release.

xml\parsers\__init__.pyNUITKA_PACKAGE_xml_parsersxml.parsersPython interfaces to XML parsers.

This package contains one module:

expat -- Python wrapper for James Clark's Expat parser, with namespace
         support.

<module xml.parsers>xml.parsers.expat.modelInterface to the Expat non-validating XML parser.xml\parsers\expat.py<module xml.parsers.expat>pyexpatxml.parsers.expat.errors_ECD_SIZEZipInfofheadercompression type %d (%s)key0Bad magic number for file headerRead and return a line from the stream.

        If limit is specified, at most limit bytes will be read.
        PyZipFile._get_codenameBadZipFileBadZipfileZIP_STOREDZIP_BZIP2ZIP_LZMALargeZipFile_close_fileobj_CD64_DISK_NUMBER_STARTpycache_opt0Bad magic number for central directorynull_byte_readbufferExtract the ZipInfo object 'member' to a physical
           file on the path targetpath.
        _ZipWriteFile._fileobjwritestrDuplicate name: %rClass with attributes describing each file in the ZIP archive._SharedFile.seekBad CRC-32 for file %r<zipfile>Extract zipfile into target dirZipFile.__repr__ZipFile.open.<locals>.<lambda>Can't write to ZIP archive while an open writing handle exists.Compression requires the (missing) lzma moduleReplace bad characters and remove trailing dots from parts.filterfuncTruncated central directoryzinfo_or_arcnameOpen the ZIP file with mode read 'r', write 'w', exclusive create 'x',
        or append 'a'.File is not a zip fileNameToInfoCheck for errors before writing a file to the archive.ZipFile.getinfo_CD64_OFFSET_START_CENTDIRDEFAULT_VERSIONkey2update_keysCan't close the ZIP file while there is an open writing handle on it. Close the writing handle before closing the zip._CD_DISK_NUMBER_STARTZIP_FILECOUNT_LIMIT_CD_TIME_didModifyûé    zstoreé   zshrinké   zreduceé   zreduceé   zreduceé   zreduceé   zimplodeé   ztokenizeé   zdeflateé	   z	deflate64é
   zimplodeé   zbzip2é   zlzmaé   zterseé   zlz77éa   zwavpackéb   zppmd0Truncated file headerZipFile._write_end_recordstringEndArchive64Mode must be 'r', 'w', 'x', or 'a'zef_filesizeEndCentDircompress_typeRead up to n bytes with at most one read() system call.ZipExtFile.tell_CD_EXTRACT_VERSION_raw_time_CD_COMPRESSED_SIZEmin_versionallowZip64endrecwrite() requires mode 'w', 'x', or 'a'Attempt to write to ZIP archive that was already closed<4s4B4HL2L5H2LZipFile._sanitize_windows_name.<locals>.<genexpr>Attempt to write ZIP archive that was already closedZipInfo._encodeFilenameFlags_strip_extraThe following enclosed file is corrupted: {!r}A simple command-line interface for zipfile module._crctable_allowZip64Show listing of a zipfilePut the bytes from filename into the archive under the name
        arcname.structEndArchive64Compression requires the (missing) bz2 moduletestzipforce_zip64dosdateZIP64_VERSIONCreate zipfile from sources_Tellable.closeCorrupt extra field %04x (size=%d) file=%rAdding filesize_cdoffset_cdinferredcentdircommentSizefpinExtract all members from the archive to the current working
           directory. `path' specifies a different directory to extract to.
           `members' is optional and must be a subset of the list returned
           by namelist().
        ZipFile.extractbadfilezip_nameaddToZipzippath_FH_FILENAME_LENGTH_DD_SIGNATURE
    Raised when writing a zipfile, the zipfile requires ZIP64 extensions
    and those extensions are disabled.
    _CD_FLAG_BITSZipFile.printdirReturn a list of class ZipInfo instances for files in the
        archive.MAX_NPKcreate_versioncompressed patched data (flag bit 5)BZIP2_VERSION_CD_EXTERNAL_FILE_ATTRIBUTESxids_compressleveldisk_num_filePassedZipFile.readpycache_opt1_CD_CREATE_VERSIONConstruct an appropriate ZipInfo for a file on the filesystem.

        filename should be the path to a file or directory on the filesystem.

        arcname is the name which it will have within the archive (by default,
        this will be the same as filename, but without a drive letter and with
        leading path separators removed).
        MAX_SEEK_READcp437PyZipFile._get_codename.<locals>._compileZipFile._extract_member.<locals>.<genexpr><LLLL_CD_FILENAME_LENGTHwritepyZipFile.testzipfile_pyfile_pycpycache_opt2archivenameLZMACompressor.flushPKReturns buffered bytes without advancing the position.File size unexpectedly exceeded ZIP64 limit_RealGetContentsZipExtFile.__repr___CD_DATEdirsizesetpasswordwhence must be os.SEEK_SET (0), os.SEEK_CUR (1), or os.SEEK_END (2)ZipExtFile.readabledecrypterfile %r skipped by filterfuncCentral directory size%-46s %s %12dzipfiles that span multiple disks are not supported_FH_LAST_MOD_DATEzipinfo
    Read the ZIP64 end-of-archive records and use that to update endrec
    _compress_leftfilelist<4sLQLZipfile sizeZipExtFile.readline_windows_illegal_name_trans_table Class with methods to open, read, write, close, list zip files.

    z = ZipFile(file, mode="r", compression=ZIP_STORED, allowZip64=True,
                compresslevel=None)

    file: Either the path to the file, or a file-like object.
          If it is a path, the file will be opened and closed by ZipFile.
    mode: The mode can be either read 'r', write 'w', exclusive create 'x',
          or append 'a'.
    compression: ZIP_STORED (no compression), ZIP_DEFLATED (requires zlib),
                 ZIP_BZIP2 (requires bz2) or ZIP_LZMA (requires lzma).
    allowZip64: if True ZipFile will create files with ZIP64 extensions when
                needed, otherwise it will raise an exception when this would
                be necessary.
    compresslevel: None (default for the given compression type) or an integer
                   specifying the level to pass to the compressor.
                   When using ZIP_STORED or ZIP_LZMA this keyword has no effect.
                   When using ZIP_DEFLATED integers 0 through 9 are accepted.
                   When using ZIP_BZIP2 integers 1 through 9 are accepted.

    _fpclosestructEndArchive64LocatorZipFile.infolistinvalid value for 'optimize': {!r}ZipFile._fpclosemaxCommentStartZipFile.commentfile_sizerequires_zip64_FH_SIGNATUREpsize_compress_typecurr_posnew_posread_offsetbuff_offsetread_len_CD64_DIRECTORY_SIZEFile-like object for reading an archive member.
       Is returned by ZipFile.open().
    ZipFile requires mode 'r', 'w', 'x', or 'a'x+b filemode=%rZipFile.__init___running_crcfilepos_ECD_LOCATION_FH_LAST_MOD_TIME_FH_EXTRACT_SYSTEMRead in the table of contents for the ZIP file.<HH_CD_SIGNATURECompression requires the (missing) zlib moduleLZMADecompressor.__init__PKstringEndArchive64Locator_get_compressornewdatamodeDictCall the "close()" method in case the user forgot.CompilingAdding files from directoryZipInfo.from_fileZipFile.writeinvalid_path_partsexternal_attrCan't write to the ZIP file while there is another write handle open on it. Close the first handle before opening another._check_compressionAttempt to use ZIP archive that was already closedWrite a file into the archive.  The contents is 'data', which
        may be either a 'str' or a 'bytes' instance; if it is a 'str',
        it is encoded as UTF-8 first.
        'zinfo_or_arcname' is either a ZipInfo instance or
        the name of the file in the archive._ECD_DISK_START_ECD_ENTRIES_THIS_DISK_EXTRA_FIELD_STRUCT_CD_COMPRESS_TYPEReturn True if this archive member is a directory._ZipWriteFile.closeflag_bits_CD64_CREATE_VERSIONZipExtFile.seek_CD64_DIRECTORY_RECSIZE_CD_INTERNAL_FILE_ATTRIBUTESFile name in directory %r and header %r differ.LZMACompressor._init_FH_EXTRACT_VERSION_ECD_DISK_NUMBERsizeEndCentDir64Locatormain.<locals>.addToZipZipExtFile._read2Return file bytes for name._Tellable.flushMIN_READ_SIZEZipFile.__enter___CD_UNCOMPRESSED_SIZEunderlying stream is not seekableDone testing_Tellable.tell<HHQQ_FH_EXTRA_FIELD_LENGTH<BBH_file_size
Read and write ZIP files.

XXX references to utf-8 need further investigation.
_ECD_ENTRIES_TOTAL_ZipDecrypter.<locals>.update_keys<LLQQ_writecheck_fileRefCntdisknoreloffread_versiondisk_dirdircountdircount2diroffsetDecrypt a bytes object.internal_attr<QQQ compress_type=%sZipExtFile._update_crcprops_ZipDecrypter.<locals>.decrypter_zinfo<4s4H2LHZIP does not support timestamps before 1980_orig_start_crc<%s filename=%rReturn (filename, archivename) for the path.

        Given a module name path, return the correct file path and
        archive name, compiling if necessary.  For example, given
        /python/lib/string, return (/python/lib/string.pyc, string).
        That compression method is not supported<4s2B4HL2L2HZipFile._RealGetContents_CD64_EXTRACT_VERSIONPK_get_decompressorRead and return up to n bytes.
        If the argument is omitted, None, or negative, data is read and returned until EOF is reached..
        stringCentralDirClose the file, and for mode 'w', 'x' and 'a' write the ending
        records.Archive comment is too long; truncating to %d bytesrecData_Tellable.writeFilesize would require ZIP64 extensions_decrypterFile Name                                             Modified             SizeTest if a zipfile is valid_compress_sizeZipInfo.__init__Read all the files and check the CRC._ZipWriteFile.writabledostime_decodeExtraZIP64_LIMITpwd: expected bytes, got %skey1ZipFile.extractallsizeFileHeaderinitname:<>|"?*Z_DEFAULT_COMPRESSION_CD64_SIGNATURECan't read from the ZIP file while there is an open writing handle on it. Close the writing handle before trying to read.I/O operation on closed file.MAX_EXTRACT_VERSION_ECD_OFFSETZIP_MAX_COMMENTgiven, inferred, offset©ÚselfÚzinfoÚdtÚdosdateÚdostimeÚextraÚ	file_sizeÚcompress_sizeÚheader_offsetÚ
extra_dataÚmin_versionÚextract_versionÚcreate_versionÚfilenameÚ	flag_bitsÚcentdirÚpos2ÚcentDirCountÚcentDirSizeÚcentDirOffsetÚrequires_zip64Úzip64endrecÚzip64locrecÚendrecZipFile._open_to_writeThe comment text associated with the ZIP file. mode=%rReturn the instance of ZipInfo given 'name'.ZipExtFile.peek_SharedFile.__init___SharedFile.readÍÌÌÌÌÌð?Return file-like object for 'name'.

        name is a string for the file name within the ZIP file, or a ZipInfo
        object.

        mode should be 'r' to read a file already in the ZIP file, or 'w' to
        write to a file newly added to the archive.

        pwd is the password to decrypt files (only used for reading).

        When writing, if the file size is not known in advance but may exceed
        2 GiB, pass force_zip64 to use the ZIP64 format, which can handle large
        files.  If the size is known in advance, it is best to pass a ZipInfo
        instance for name, with zinfo.file_size set.
        structCentralDir_FH_CRCZipInfo.FileHeaderCentral directory offsetAdd all files from "pathname" to the ZIP archive.

        If pathname is a package directory, search the directory and
        all package subdirectories recursively for all *.py and enter
        the modules into the archive.  If pathname is a plain
        directory, listdir *.py and enter all modules.  Else, pathname
        must be a Python *.py file and the module will be put into the
        archive.  Added modules are always module.pyc.
        This method will compile the module.py into module.pyc if
        necessary.
        If filterfunc(pathname) is given, it is called with every argument.
        When it is False, the file or directory is skipped.
        Set default password for encrypted files._FH_COMPRESSED_SIZEvolume_CD64_NUMBER_ENTRIES_TOTAL compress_size=%r_EndRecData64ZipInfo._decodeExtraZipExtFile.read1compressor_namesZipExtFile.close_gen_crc_unconsumedReturn data from the "End of Central Directory" record, or None.

    The data is a list of the nine items in the ZIP "End of central dir"
    record followed by a tenth item, the file seek offset of this record.LZMA_VERSION_ZipWriteFile.write_check_zipfileorig_filenamePyZipFile.__init__LZMADecompressor.decompresszipfile.py<module zipfile>_Tellable.__init__ZipFile.__exit___ECD_COMMENTFiles added with writepy() must end with ".py"_orig_file_sizeFile %r is encrypted, password required for extractionThere is no item named %r in the archiveCan't reposition in the ZIP file while there is an open writing handle on it. Close the writing handle before trying to read.ZipExtFile.__init__ZipInfo.__repr__sizeCentralDirZipFile.writestrCompressed size unexpectedly exceeded ZIP64 limitZipFile.close<4sQ2H2L4QReturn the per-file header as a bytes object._ECD_COMMENT_SIZE file_size=%rClass to create ZIP archives with Python library files and packages._FH_UNCOMPRESSED_SIZE_CD_COMMENT_LENGTHExtract a member from the archive to the current working directory,
           using its full name. Its file information is extracted as accurately
           as possible. `member' may be a filename or a ZipInfo object. You can
           specify a different directory using `path'.
        _FH_COMPRESSION_METHODQuickly see if a file is a ZIP file by checking the magic number.

    The filename argument may be a file or file-like object too.
    Files count external_attr=%#xBad password for file %rAdding package instructFileHeaderis_encrypted_CD_CRC_ZipWriteFile.__init__ZipExtFile.seekable_ECD_SIGNATURE_CD_EXTRACT_SYSTEMLZMACompressor.__init__fname_str_CD_EXTRA_FIELD_LENGTHZipExtFile._read1strong encryption (flag bit 6)Print a table of contents for the zip file.comment: expected bytes, got %s_CD_CREATE_SYSTEMCompute the CRC32 primitive on one byte._expected_crc_ZipDecrypter.<locals>.crc32 name=%r mode=%rZipInfo.is_dirforce_zip64 is True, but allowZip64 was False when opening the ZIP file._orig_compress_sizePyZipFile.writepy_FH_GENERAL_PURPOSE_FLAG_BITS_CD_LOCAL_HEADER_OFFSETcreate_system%s %r skipped by filterfunczip file version %.1f_seekableLZMACompressor.compressopen() requires mode "r" or "w"ZipFile.namelist_orig_compress_startZipFile.setpasswordpwd is only supported for reading files_CD64_NUMBER_ENTRIES_THIS_DISKReturn a list of file names in the archive.©zorig_filenamezfilenamez	date_timezcompress_typez_compresslevelzcommentzextrazcreate_systemzcreate_versionzextract_versionzreservedz	flag_bitszvolumezinternal_attrzexternal_attrzheader_offsetzCRCzcompress_sizez	file_sizez	_raw_time_SharedFile.closeZipFile._writecheckZipFile.__del__stringFileHeaderPK      à?      ð?       @      ð{®Gáz?      è?u1z1Tuegrpkws<file>fcreidnaisscnum1num2numdEBADFQFontQRectQtGuiRLockfstatklassmkdirDOTALLENOENTNoNameO_RDWRQFrameQLabeldaemondarwinfspathgetpidgetuidiscodelind_dlistenoptargresizeskipIfst_devst_inotzsignunlinkABS_Z_NALIASESDEG_P_NDER_P_PFAC_P_QINT_Q_BLC_TIMELED_P_QMAXYEARMINYEARNMR_P_PNoFrameO_CREATPOZ_Z_DQWidgetRED_Q_QS_ISDIRS_ISLNKSignalsWeakSet__cmp___bisect_sha512_winapiaddItembasedircombo_ddirpathexctypefindallfromhexgeteuidgetfqdnindentsisframelabel_2label_3line_n1line_n2line_qmline_qnlocaltmmarshalnewfileno_sitepopleftsetBoldsetFontsetTextst_modetm_zoneì        <listcomp>ADD_1N_NADD_NN_NADD_PP_PADD_QQ_QADD_ZZ_ZCFWSListCOM_NN_DCONTINUEDIV_NN_NDIV_PP_PDIV_QQ_QDIV_ZZ_ZGCF_NN_NGCF_PP_PLCM_NN_NMOD_NN_NMOD_PP_PMOD_ZZ_ZMUL_ND_NMUL_NN_NMUL_Nk_NMUL_PP_PMUL_PQ_PMUL_QQ_QMUL_ZM_ZMUL_ZZ_ZNZER_N_BO_BINARYO_RDONLYSUB_NN_NSUB_PP_PSUB_QQ_QSUB_ZZ_ZS_ISFIFOSkipTestTHURSDAYTarError_IntEnum__copy____date___writingcalcsizecmdqueuecompat32finditerfromlistfsdecodefsencodegetgrnamgetpwnamgetpwuidismethodismoduleline_q1mline_q1nline_q2mline_q2nmakedirsmod_specnewvaluerbufsizereadlinksettracestrclassstrerrortestsRun<metaclass>DIV_NN_DkExpandingFORBIDDENMAX_WBITSMULTILINEMUL_Pxk_PNOT_FOUNDQComboBoxQLineEditQtWidgetsSUB_NDN_NTCSAFLUSHTRANS_N_ZTRANS_Q_ZTRANS_Z_NTRANS_Z_Q_get_spec_getframe_optimizeblocksizecurrentbpgetlocalegetsignalgroupdicthelp_textisroutinemakeSuitemktime_tzquotetabsread_codesetWeightsetcbreakslotstatestart_dirtb_localstcgetattrtcsetattrtm_gmtoffupperdirs<output_dir>AlignRightBaseStreamCOMMASPACEIGNORECASENO_CONTENTSOL_SOCKETWheelFocus__author____return__a2b_base64appendleftb2a_base64bit_lengthenum_klassformatdategettimeouthelp_linesis_zipfileisfunctionmemoryviewmethodnamepolinomialsetEnabledsettimeoutshouldStopsizePolicyskipUnlessstackleveltextEditedAlignCenterBAD_REQUESTHeaderLabelIPPROTO_TCPLeftToRightOrderedDictPyStringMapQMainWindowQMetaObjectQPushButtonQSizePolicyQToolButtonStyledPanelTCP_NODELAYUNKNOWN8BIT__credits____members___max_appendaddresslistbody_decodecompressobjdecodebytesgetpeernamegetsocknamegroups_of_3istracebacklabel_inputmethod_namepolinomial1polinomial2save_stdoutserver_portsetGeometrysetItemTextsource_hashstore_constunused_dataAlignVCenterCharsetErrorMessageClassNAME_MAPPINGNOT_MODIFIEDPollSelectorQueryValueEx__compiled____internal___format_text_nameToLeveldecodestringget_importerhas_locationheader_bytesindent_firstlist2cmdlineno_user_siteperf_counterpushButton_NpushButton_PpushButton_QpushButton_Zpython_buildquote_stringremoveResultreturn_valuesetAlignmentsetPointSizesimplefilteruse_rawinputAlignTrailingBZ2CompressorDEF_MEM_LEVELDOT_ATOM_ENDSHTTPExceptionPicklingErrorRESET_CONTENT__copyright____metaclass___parsedate_tzdecode_paramsencoded_linesfindTestCasesget_addr_specheader_decodepushButton_unsetFrameShapesetObjectNamesetSizePolicysetStyleSheetsurrogatepassthree_way_cmpIMPORT_MAPPING_NamespacePath__orig_bases___encode_base64abstractmethodafter_in_childcatch_warningsdaemon_threadsdispatch_tableencode_7or8bitencode_rfc2231filterwarningsinstallHandlernon_printablesoriginal_bytespushButton_binregisterResultsetFocusPolicysetFrameShadowsetWindowTitle<dictcontraction>BZ2DecompressorNOT_IMPLEMENTEDResourceWarning_has_surrogates_testMethodName_testRunEnteredexpectedFailureload_cert_chainpushButton_backpushButton_mainpython_compilerunconsumed_tailDecompressReaderInterruptedErrorQCoreApplicationSourceFileLoader_collections_abcexpectedFailuresget_address_listget_unstructuredpushButton_othersave_displayhookspec_from_loadertestNamePatternsMOVED_PERMANENTLY__unittest_skip___check_not_closed_classSetupFailedall_feature_namescache_from_sourcedefaultTestLoaderhasHeightForWidthpushButton_finishpushButton_inputpsetHeightForWidthì   ÿÿÿÿ InvalidHeaderError_moduleSetUpFailed_previousTestClass_strptime_datetimeconnectSlotsByNameismethoddescriptorparse_mime_versionpushButton_forwardpushButton_inputp1pushButton_inputp2setLayoutDirectionsetVerticalStretchDEFAULT_BUFFER_SIZE_bootstrap_external_get_module_detailscurrentIndexChangedunexpectedSuccessesREQUEST_URI_TOO_LONGREVERSE_NAME_MAPPINGUnsupportedOperation_count_diff_hashablebuiltin_module_namessetHorizontalStretchgetfilesystemencodingparsedate_to_datetimeREVERSE_IMPORT_MAPPINGUndecodableBytesDefectNonASCIILocalPartDefect_GLOBAL_DEFAULT_TIMEOUT_count_diff_all_purposespec_from_file_locationInvalidBase64LengthDefect_decode_filter_properties_encode_filter_propertiesparse_content_type_headerHTTP_VERSION_NOT_SUPPORTEDHeaderMissingRequiredValueInvalidBase64PaddingDefect_frozen_importlib_externalsubmodule_search_locationsCloseBoundaryNotFoundDefectNoBoundaryInMultipartDefectStartBoundaryNotFoundDefectInvalidBase64CharactersDefectMisplacedEnvelopeHeaderDefect_create_default_https_contextREQUEST_HEADER_FIELDS_TOO_LARGEMissingHeaderBodySeparatorDefectparse_content_disposition_headerbackground-color: #2EE800;Argument 'newline' not supported in binary modeVerbose output%d-%02d-%02d %02d:%02d:%02d%(levelname)s:%(name)s:%(message)s&quot;Argument 'encoding' not supported in binary mode%*s%-*s  raw-unicode-escapekeep-alivecolor: white; background-color: #E80C94;ÐÑÐ½Ð¾Ð²Ð½ÑÐµ Ð±Ð¸Ð½Ð°ÑÐ½ÑÐµ Ð¾Ð¿ÐµÑÐ°ÑÐ¸Ð¸importlib._bootstrap_externalÐÐ°ÑÑÑÐ°Ð»ÑÐ½ÑÐµ ÑÐ¸ÑÐ»Ð°importlib.machinerynot enough values to unpack (expected at least 1, got %d)PyQt5.QtGuiÐÑÐ¾ÑÐ¸Ðµ Ð´ÐµÐ¹ÑÑÐ²Ð¸ÑInvalid mode: %rÐÑÑÐ°ÑÐ¾Ðº Ð¾Ñ Ð´ÐµÐ»ÐµÐ½Ð¸Ñorg.python.core\\\1{}={!r}incorrect number of arguments%s %s %s%B%s/%sbackground-color:#E80C94; color: whiteÐ¡ÑÐ¼Ð¼Ð°.txz----------------------------------------------------------------------/notexist%s: %s
Ð ÐµÐ·ÑÐ»ÑÑÐ°Ñ:python%d.%dInvalidMultipartContentTransferEncodingDefectHelpFormatter._format_textÐÑÐµÐ¾Ð±ÑÐ°Ð·Ð¾Ð²Ð°Ð½Ð¸Ñ Ð¼Ð½Ð¾Ð³Ð¾ÑÐ»ÐµÐ½Ð°ÐÐ½Ð¾Ð³Ð¾ÑÐ»ÐµÐ½ÑBreakpoint number expected%s.__prepare__() must return a mapping, not %s.pywÐÐ²ÐµÐ´Ð¸ÑÐµ Ð½Ð°ÑÑÑÐ°Ð»ÑÐ½Ð¾Ðµ ÑÐ¸ÑÐ»Ð¾:??? [closed]--createGroup.display_name.tar.bz2--list--verbose--extract&amp;%s argument after ** must be a mapping, not %sÐ¦ÐµÐ»ÑÐµ ÑÐ¸ÑÐ»Ð°ÐÐ²ÐµÐ´Ð¸ÑÐµ ÐºÐ¾ÑÑÑÐ¸ÑÐ¸ÐµÐ½Ñ 0ÐÑÐ±ÐµÑÐ¸ÑÐµ Ð´ÐµÐ¹ÑÑÐ²Ð¸Ðµ:ÐÐ»Ð°Ð²Ð½Ð¾Ðµ Ð¼ÐµÐ½Ñshow program's version number and exitPyQt5.QtWidgetsÐ§Ð°ÑÑÐ½Ð¾Ðµ Ð¾Ñ Ð´ÐµÐ»ÐµÐ½Ð¸Ñ.tbz2Invalid mode: {!r}.tar.xz%s argument after * must be an iterable, not %sbackground-color: #00D5FF;Argument 'errors' not supported in binary mode--testÐÑÐ¾Ð¸Ð·Ð²ÐµÐ´ÐµÐ½Ð¸Ðµshow this help message and exit{%s}D:\Python\python.exeAddress.display_name<II%*s%s:
ÐÐ²ÐµÑÑÐ¸Indent decreased below 0.color: white; background-color: #0D66FF;r+b%*s%s
Ð Ð°Ð·Ð½Ð¾ÑÑÑ%s got multiple values for keyword argument '%s'MultipartInvariantViolationDefect-!*+/FirstHeaderLineIsContinuationDefectparse_content_transfer_encoding_headerã               @   st  d Z ddlmZmZ ddlZdddddd	d
ddddddddddddddddddgZdZeedZ	eee
 Zeei  ¡ Zeei  ¡ Zeei  ¡ Zeeg Zeeeg ZeeedZeeedd > Zeee Zeed!Zeed"Zeee Zei  ¡ Zei  ¡ Zei  ¡ Z eej!Z"ed#d$  Z#d%d& Z$e$ Z$ee$Z%e$ &¡  [$d'd( Z'e' Z'ee'Z(['d)d* Z)G d+d	 d	ed,Z*G d-d ded,Z+G d.d de+Z,e, -e%¡ G d/d ded,Z.G d0d de.Z/G d1d de/Z0e0 -e(¡ G d2d
 d
ed,Z1G d3d de1Z2e2 -e	¡ e2 -e¡ e2 -e¡ e2 -e¡ e2 -e¡ e2 -e¡ e2 -e¡ e2 -e¡ e2 -e¡ e2 -e¡ e2 -e¡ e2 -e¡ e2 -e¡ G d4d de1Z3G d5d de2Z4e4 -e#¡ G d6d ded,Z5G d7d ded,Z6G d8d de5e1e6Z7G d9d ded,Z8G d:d de7Z9e9 -e:¡ G d;d de9Z;e; -e¡ G d<d de7Z<e< -e"¡ G d=d de5Z=G d>d de=e9Z>e> -e¡ G d?d de=e9Z?e? -e ¡ G d@d de=e7Z@e@ -e¡ G dAd de<ZAeA -eB¡ G dBd de3e7ZCeC -eD¡ eC -eE¡ eC -e¡ eC -eF¡ G dCd deCZGeG -eH¡ eG -e
¡ G dDd deCZIeI -eJ¡ eI -e
¡ dS )EzjAbstract Base Classes (ABCs) for collections, according to PEP 3119.

Unit tests are in test_collections.
é    )ÚABCMetaÚabstractmethodNÚ	AwaitableÚ	CoroutineÚAsyncIterableÚAsyncIteratorÚAsyncGeneratorÚHashableÚIterableÚIteratorÚ	GeneratorÚ
ReversibleÚSizedÚ	ContainerÚCallableÚ
CollectionÚSetÚ
MutableSetÚMappingÚMutableMappingÚMappingViewÚKeysViewÚ	ItemsViewÚ
ValuesViewÚSequenceÚMutableSequenceÚ
ByteStringzcollections.abcó    é   iè  Ú © c               c   s   d V S )Nr    r    r    r    ú!D:\Python\lib\_collections_abc.pyÚ<lambda>8   r   r"   c               Ã   s   d S )Nr    r    r    r    r!   Ú_coro:   r   r#   c               C  s
   d V  d S )Nr    r    r    r    r!   Ú_ag@   r   r$   c             G   sH   | j }x<|D ]4}x.|D ]"}||jkr|j| d kr6tS P qW tS qW dS )NT)Ú__mro__Ú__dict__ÚNotImplemented)ÚCÚmethodsÚmroÚmethodÚBr    r    r!   Ú_check_methodsH   s    


r-   c               @   s(   e Zd ZdZedd Zedd ZdS )r	   r    c             C   s   dS )Nr   r    )Úselfr    r    r!   Ú__hash__X   s    zHashable.__hash__c             C   s   | t krt|dS tS )Nr/   )r	   r-   r'   )Úclsr(   r    r    r!   Ú__subclasshook__\   s    
zHashable.__subclasshook__N)Ú__name__Ú
__module__Ú__qualname__Ú	__slots__r   r/   Úclassmethodr1   r    r    r    r!   r	   T   s   )Ú	metaclassc               @   s(   e Zd ZdZedd Zedd ZdS )r   r    c             c   s
   d V  d S )Nr    )r.   r    r    r!   Ú	__await__g   s    zAwaitable.__await__c             C   s   | t krt|dS tS )Nr8   )r   r-   r'   )r0   r(   r    r    r!   r1   k   s    
zAwaitable.__subclasshook__N)r2   r3   r4   r5   r   r8   r6   r1   r    r    r    r!   r   c   s   c               @   s>   e Zd ZdZedd ZedddZdd Zed	d
 Z	dS )r   r    c             C   s   t dS )zcSend a value into the coroutine.
        Return next yielded value or raise StopIteration.
        N)ÚStopIteration)r.   Úvaluer    r    r!   Úsendv   s    zCoroutine.sendNc             C   s4   |dkr|dkr|| }|dk	r,|  |¡}|dS )zgRaise an exception in the coroutine.
        Return next yielded value or raise StopIteration.
        N)Úwith_traceback)r.   ÚtypÚvalÚtbr    r    r!   Úthrow}   s    
zCoroutine.throwc          	   C   s4   y|   t¡ W n ttfk
r&   Y n
X tddS )z.Raise GeneratorExit inside coroutine.
        zcoroutine ignored GeneratorExitN)r@   ÚGeneratorExitr9   ÚRuntimeError)r.   r    r    r!   Úclose   s
    zCoroutine.closec             C   s   | t krt|ddddS tS )Nr8   r;   r@   rC   )r   r-   r'   )r0   r(   r    r    r!   r1      s    zCoroutine.__subclasshook__)NN)
r2   r3   r4   r5   r   r;   r@   rC   r6   r1   r    r    r    r!   r   r   s   
c               @   s(   e Zd ZdZedd Zedd ZdS )r   r    c             C   s   t  S )N)r   )r.   r    r    r!   Ú	__aiter__¢   s    zAsyncIterable.__aiter__c             C   s   | t krt|dS tS )NrD   )r   r-   r'   )r0   r(   r    r    r!   r1   ¦   s    
zAsyncIterable.__subclasshook__N)r2   r3   r4   r5   r   rD   r6   r1   r    r    r    r!   r      s   c               @   s0   e Zd ZdZedd Zdd Zedd ZdS )	r   r    c             Ã   s   t dS )z@Return the next item or raise StopAsyncIteration when exhausted.N)ÚStopAsyncIteration)r.   r    r    r!   Ú	__anext__±   s    zAsyncIterator.__anext__c             C   s   | S )Nr    )r.   r    r    r!   rD   ¶   s    zAsyncIterator.__aiter__c             C   s   | t krt|ddS tS )NrF   rD   )r   r-   r'   )r0   r(   r    r    r!   r1   ¹   s    zAsyncIterator.__subclasshook__N)	r2   r3   r4   r5   r   rF   rD   r6   r1   r    r    r    r!   r   ­   s   c               @   sF   e Zd ZdZdd Zedd ZedddZd	d
 Ze	dd Z
dS )r   r    c             Ã   s   |   d¡I dH S )zpReturn the next item from the asynchronous generator.
        When exhausted, raise StopAsyncIteration.
        N)Úasend)r.   r    r    r!   rF   Ä   s    zAsyncGenerator.__anext__c             Ã   s   t dS )zuSend a value into the asynchronous generator.
        Return next yielded value or raise StopAsyncIteration.
        N)rE   )r.   r:   r    r    r!   rG   Ê   s    zAsyncGenerator.asendNc             Ã   s4   |dkr|dkr|| }|dk	r,|  |¡}|dS )zyRaise an exception in the asynchronous generator.
        Return next yielded value or raise StopAsyncIteration.
        N)r<   )r.   r=   r>   r?   r    r    r!   ÚathrowÑ   s    
zAsyncGenerator.athrowc          	   Ã   s:   y|   t¡I dH  W n ttfk
r,   Y n
X tddS )z.Raise GeneratorExit inside coroutine.
        Nz,asynchronous generator ignored GeneratorExit)rH   rA   rE   rB   )r.   r    r    r!   ÚacloseÞ   s
    zAsyncGenerator.aclosec             C   s   | t krt|dddddS tS )NrD   rF   rG   rH   rI   )r   r-   r'   )r0   r(   r    r    r!   r1   è   s    
zAsyncGenerator.__subclasshook__)NN)r2   r3   r4   r5   rF   r   rG   rH   rI   r6   r1   r    r    r    r!   r   À   s   
c               @   s(   e Zd ZdZedd Zedd ZdS )r
   r    c             c   s   d S )Nr    )r.   r    r    r!   Ú__iter__÷   s    zIterable.__iter__c             C   s   | t krt|dS tS )NrJ   )r
   r-   r'   )r0   r(   r    r    r!   r1   ü   s    
zIterable.__subclasshook__N)r2   r3   r4   r5   r   rJ   r6   r1   r    r    r    r!   r
   ó   s   c               @   s0   e Zd ZdZedd Zdd Zedd ZdS )	r   r    c             C   s   t dS )zKReturn the next item from the iterator. When exhausted, raise StopIterationN)r9   )r.   r    r    r!   Ú__next__  s    zIterator.__next__c             C   s   | S )Nr    )r.   r    r    r!   rJ     s    zIterator.__iter__c             C   s   | t krt|ddS tS )NrJ   rK   )r   r-   r'   )r0   r(   r    r    r!   r1     s    zIterator.__subclasshook__N)	r2   r3   r4   r5   r   rK   rJ   r6   r1   r    r    r    r!   r     s   c               @   s(   e Zd ZdZedd Zedd ZdS )r   r    c             c   s   d S )Nr    )r.   r    r    r!   Ú__reversed__)  s    zReversible.__reversed__c             C   s   | t krt|ddS tS )NrL   rJ   )r   r-   r'   )r0   r(   r    r    r!   r1   .  s    zReversible.__subclasshook__N)r2   r3   r4   r5   r   rL   r6   r1   r    r    r    r!   r   %  s   c               @   sF   e Zd ZdZdd Zedd ZedddZd	d
 Ze	dd Z
dS )r   r    c             C   s
   |   d¡S )z^Return the next item from the generator.
        When exhausted, raise StopIteration.
        N)r;   )r.   r    r    r!   rK   9  s    zGenerator.__next__c             C   s   t dS )zcSend a value into the generator.
        Return next yielded value or raise StopIteration.
        N)r9   )r.   r:   r    r    r!   r;   ?  s    zGenerator.sendNc             C   s4   |dkr|dkr|| }|dk	r,|  |¡}|dS )zgRaise an exception in the generator.
        Return next yielded value or raise StopIteration.
        N)r<   )r.   r=   r>   r?   r    r    r!   r@   F  s    
zGenerator.throwc          	   C   s4   y|   t¡ W n ttfk
r&   Y n
X tddS )z.Raise GeneratorExit inside generator.
        zgenerator ignored GeneratorExitN)r@   rA   r9   rB   )r.   r    r    r!   rC   S  s
    zGenerator.closec             C   s   | t krt|dddddS tS )NrJ   rK   r;   r@   rC   )r   r-   r'   )r0   r(   r    r    r!   r1   ]  s    
zGenerator.__subclasshook__)NN)r2   r3   r4   r5   rK   r   r;   r@   rC   r6   r1   r    r    r    r!   r   5  s   
c               @   s(   e Zd ZdZedd Zedd ZdS )r   r    c             C   s   dS )Nr   r    )r.   r    r    r!   Ú__len__k  s    zSized.__len__c             C   s   | t krt|dS tS )NrM   )r   r-   r'   )r0   r(   r    r    r!   r1   o  s    
zSized.__subclasshook__N)r2   r3   r4   r5   r   rM   r6   r1   r    r    r    r!   r   g  s   c               @   s(   e Zd ZdZedd Zedd ZdS )r   r    c             C   s   dS )NFr    )r.   Úxr    r    r!   Ú__contains__z  s    zContainer.__contains__c             C   s   | t krt|dS tS )NrO   )r   r-   r'   )r0   r(   r    r    r!   r1   ~  s    
zContainer.__subclasshook__N)r2   r3   r4   r5   r   rO   r6   r1   r    r    r    r!   r   v  s   c               @   s   e Zd ZdZedd ZdS )r   r    c             C   s   | t krt|dddS tS )NrM   rJ   rO   )r   r-   r'   )r0   r(   r    r    r!   r1     s    zCollection.__subclasshook__N)r2   r3   r4   r5   r6   r1   r    r    r    r!   r     s   c               @   s(   e Zd ZdZedd Zedd ZdS )r   r    c             O   s   dS )NFr    )r.   ÚargsÚkwdsr    r    r!   Ú__call__  s    zCallable.__call__c             C   s   | t krt|dS tS )NrR   )r   r-   r'   )r0   r(   r    r    r!   r1     s    
zCallable.__subclasshook__N)r2   r3   r4   r5   r   rR   r6   r1   r    r    r    r!   r     s   c               @   s   e Zd ZdZdZdd Zdd Zdd Zd	d
 Zdd Z	e
dd Zdd ZeZdd Zdd ZeZdd Zdd Zdd ZeZdd ZdS )r   aZ  A set is a finite, iterable container.

    This class provides concrete generic implementations of all
    methods except for __contains__, __iter__ and __len__.

    To override the comparisons (presumably for speed, as the
    semantics are fixed), redefine __le__ and __ge__,
    then the other operations will automatically follow suit.
    r    c             C   s@   t |tstS t| t|kr"dS x| D ]}||kr(dS q(W dS )NFT)Ú
isinstancer   r'   Úlen)r.   ÚotherÚelemr    r    r!   Ú__le__®  s    

z
Set.__le__c             C   s(   t |tstS t| t|k o&|  |¡S )N)rS   r   r'   rT   rW   )r.   rU   r    r    r!   Ú__lt__¸  s    
z
Set.__lt__c             C   s(   t |tstS t| t|ko&|  |¡S )N)rS   r   r'   rT   Ú__ge__)r.   rU   r    r    r!   Ú__gt__½  s    
z
Set.__gt__c             C   s@   t |tstS t| t|k r"dS x|D ]}|| kr(dS q(W dS )NFT)rS   r   r'   rT   )r.   rU   rV   r    r    r!   rY   Â  s    

z
Set.__ge__c             C   s(   t |tstS t| t|ko&|  |¡S )N)rS   r   r'   rT   rW   )r.   rU   r    r    r!   Ú__eq__Ì  s    
z
Set.__eq__c             C   s   | |S )z¼Construct an instance of the class from any iterable input.

        Must override this method if the class constructor signature
        does not accept an iterable for an input.
        r    )r0   Úitr    r    r!   Ú_from_iterableÑ  s    zSet._from_iterablec                s&   t |tstS    fdd|D ¡S )Nc             3   s   | ]}| kr|V  qd S )Nr    )Ú.0r:   )r.   r    r!   ú	<genexpr>Ý  s    zSet.__and__.<locals>.<genexpr>)rS   r
   r'   r]   )r.   rU   r    )r.   r!   Ú__and__Ú  s    
zSet.__and__c             C   s   x|D ]}|| krdS qW dS )z1Return True if two sets have a null intersection.FTr    )r.   rU   r:   r    r    r!   Ú
isdisjointá  s    
zSet.isdisjointc             C   s*   t |tstS dd | |fD }|  |¡S )Nc             s   s   | ]}|D ]
}|V  q
qd S )Nr    )r^   ÚsÚer    r    r!   r_   ë  s    zSet.__or__.<locals>.<genexpr>)rS   r
   r'   r]   )r.   rU   Úchainr    r    r!   Ú__or__è  s    
z
Set.__or__c                s:   t  ts"t  tstS |   ¡ |   fdd| D ¡S )Nc             3   s   | ]}| kr|V  qd S )Nr    )r^   r:   )rU   r    r!   r_   õ  s    zSet.__sub__.<locals>.<genexpr>)rS   r   r
   r'   r]   )r.   rU   r    )rU   r!   Ú__sub__ð  s
    


zSet.__sub__c                s:   t |ts"t |tstS   |¡}   fdd|D ¡S )Nc             3   s   | ]}| kr|V  qd S )Nr    )r^   r:   )r.   r    r!   r_   ý  s    zSet.__rsub__.<locals>.<genexpr>)rS   r   r
   r'   r]   )r.   rU   r    )r.   r!   Ú__rsub__ø  s
    


zSet.__rsub__c             C   s2   t |ts"t |tstS |  |¡}| | ||  B S )N)rS   r   r
   r'   r]   )r.   rU   r    r    r!   Ú__xor__   s
    


zSet.__xor__c             C   s   t j}d| d }t| }d|d  }||M }x4| D ],}t|}|||d> A dA d N }||M }q4W |d d }||M }||kr||d 8 }|d	krd
}|S )a+  Compute the hash value of a set.

        Note that we don't define __hash__: not all sets are hashable.
        But if you define a hashable set type, its __hash__ should
        call this function.

        This must be compatible __eq__.

        All sets ought to compare equal if they contain the same
        elements, regardless of how they are implemented, and
        regardless of the order of the elements; so there's not much
        freedom for __eq__ or __hash__.  We match the algorithm used
        by the built-in frozenset type.
        é   r   iMïèré   i³M[l   ×4~2 iÍ iãÃ6éÿÿÿÿiÁÇ8#)ÚsysÚmaxsizerT   Úhash)r.   ÚMAXÚMASKÚnÚhrN   Úhxr    r    r!   Ú_hash	  s     
z	Set._hashN)r2   r3   r4   Ú__doc__r5   rW   rX   rZ   rY   r[   r6   r]   r`   Ú__rand__ra   re   Ú__ror__rf   rg   rh   Ú__rxor__rt   r    r    r    r!   r      s$   


	c               @   sd   e Zd ZdZdZedd Zedd Zdd Zd	d
 Z	dd Z
dd Zdd Zdd Zdd ZdS )r   a  A mutable set is a finite, iterable container.

    This class provides concrete generic implementations of all
    methods except for __contains__, __iter__, __len__,
    add(), and discard().

    To override the comparisons (presumably for speed, as the
    semantics are fixed), all you have to do is redefine __le__ and
    then the other operations will automatically follow suit.
    r    c             C   s   t dS )zAdd an element.N)ÚNotImplementedError)r.   r:   r    r    r!   Úadd:  s    zMutableSet.addc             C   s   t dS )z8Remove an element.  Do not raise an exception if absent.N)ry   )r.   r:   r    r    r!   Údiscard?  s    zMutableSet.discardc             C   s   || krt ||  |¡ dS )z5Remove an element. If not a member, raise a KeyError.N)ÚKeyErrorr{   )r.   r:   r    r    r!   ÚremoveD  s    zMutableSet.removec             C   s>   t | }yt|}W n tk
r.   tdY nX |  |¡ |S )z2Return the popped value.  Raise KeyError if empty.N)ÚiterÚnextr9   r|   r{   )r.   r\   r:   r    r    r!   ÚpopJ  s    
zMutableSet.popc             C   s,   yx|   ¡  qW W n tk
r&   Y nX dS )z6This is slow (creates N new iterators!) but effective.N)r   r|   )r.   r    r    r!   ÚclearT  s
    zMutableSet.clearc             C   s   x|D ]}|   |¡ qW | S )N)rz   )r.   r\   r:   r    r    r!   Ú__ior__\  s    
zMutableSet.__ior__c             C   s    x| | D ]}|   |¡ q
W | S )N)r{   )r.   r\   r:   r    r    r!   Ú__iand__a  s    zMutableSet.__iand__c             C   sV   || kr|   ¡  n@t|ts&|  |¡}x*|D ]"}|| krD|  |¡ q,|  |¡ q,W | S )N)r   rS   r   r]   r{   rz   )r.   r\   r:   r    r    r!   Ú__ixor__f  s    



zMutableSet.__ixor__c             C   s.   || kr|   ¡  nx|D ]}|  |¡ qW | S )N)r   r{   )r.   r\   r:   r    r    r!   Ú__isub__s  s
    

zMutableSet.__isub__N)r2   r3   r4   ru   r5   r   rz   r{   r}   r   r   r   r   r   r   r    r    r    r!   r   ,  s   

c               @   sR   e Zd ZdZedd ZdddZdd Zd	d
 Zdd Z	dd Z
dd ZdZdS )r   r    c             C   s   t d S )N)r|   )r.   Úkeyr    r    r!   Ú__getitem__  s    zMapping.__getitem__Nc             C   s"   y| | S  t k
r   |S X dS )z<D.get(k[,d]) -> D[k] if k in D, else d.  d defaults to None.N)r|   )r.   r   Údefaultr    r    r!   Úget  s    zMapping.getc             C   s*   y| |  W n t k
r    dS X dS d S )NFT)r|   )r.   r   r    r    r!   rO     s
    zMapping.__contains__c             C   s   t | S )z:D.keys() -> a set-like object providing a view on D's keys)r   )r.   r    r    r!   Úkeys   s    zMapping.keysc             C   s   t | S )z<D.items() -> a set-like object providing a view on D's items)r   )r.   r    r    r!   Úitems¤  s    zMapping.itemsc             C   s   t | S )z6D.values() -> an object providing a view on D's values)r   )r.   r    r    r!   Úvalues¨  s    zMapping.valuesc             C   s&   t |tstS t|  ¡ t| ¡ kS )N)rS   r   r'   Údictr   )r.   rU   r    r    r!   r[   ¬  s    
zMapping.__eq__)N)r2   r3   r4   r5   r   r   r   rO   r   r   r   r[   rL   r    r    r    r!   r     s   

c               @   s(   e Zd ZdZdd Zdd Zdd ZdS )	r   )Ú_mappingc             C   s
   || _ d S )N)r   )r.   Úmappingr    r    r!   Ú__init__º  s    zMappingView.__init__c             C   s
   t | jS )N)rT   r   )r.   r    r    r!   rM   ½  s    zMappingView.__len__c             C   s
   d  | ¡S )Nz&{0.__class__.__name__}({0._mapping!r}))Úformat)r.   r    r    r!   Ú__repr__À  s    zMappingView.__repr__N)r2   r3   r4   r5   r   rM   r   r    r    r    r!   r   ¶  s   c               @   s,   e Zd ZdZedd Zdd Zdd ZdS )	r   r    c             C   s   t |S )N)Úset)r.   r\   r    r    r!   r]   È  s    zKeysView._from_iterablec             C   s
   || j kS )N)r   )r.   r   r    r    r!   rO   Ì  s    zKeysView.__contains__c             c   s   | j E d H  d S )N)r   )r.   r    r    r!   rJ   Ï  s    zKeysView.__iter__N)r2   r3   r4   r5   r6   r]   rO   rJ   r    r    r    r!   r   Ä  s   c               @   s,   e Zd ZdZedd Zdd Zdd ZdS )	r   r    c             C   s   t |S )N)r   )r.   r\   r    r    r!   r]   Ù  s    zItemsView._from_iterablec             C   s@   |\}}y| j | }W n tk
r*   dS X ||kp:||kS d S )NF)r   r|   )r.   Úitemr   r:   Úvr    r    r!   rO   Ý  s    zItemsView.__contains__c             c   s$   x| j D ]}|| j | fV  qW d S )N)r   )r.   r   r    r    r!   rJ   æ  s    zItemsView.__iter__N)r2   r3   r4   r5   r6   r]   rO   rJ   r    r    r    r!   r   Õ  s   	c               @   s    e Zd ZdZdd Zdd ZdS )r   r    c             C   s2   x,| j D ]"}| j | }||ks&||krdS qW dS )NTF)r   )r.   r:   r   r   r    r    r!   rO   ñ  s
    
zValuesView.__contains__c             c   s    x| j D ]}| j | V  qW d S )N)r   )r.   r   r    r    r!   rJ   ø  s    zValuesView.__iter__N)r2   r3   r4   r5   rO   rJ   r    r    r    r!   r   í  s   c               @   s\   e Zd ZdZedd Zedd Ze ZefddZ	dd	 Z
d
d Zdd ZdddZdS )r   r    c             C   s   t d S )N)r|   )r.   r   r:   r    r    r!   Ú__setitem__  s    zMutableMapping.__setitem__c             C   s   t d S )N)r|   )r.   r   r    r    r!   Ú__delitem__  s    zMutableMapping.__delitem__c             C   s<   y| | }W n  t k
r,   || jkr( |S X | |= |S dS )z©D.pop(k[,d]) -> v, remove specified key and return the corresponding value.
          If key is not found, d is returned if given, otherwise KeyError is raised.
        N)r|   Ú_MutableMapping__marker)r.   r   r   r:   r    r    r!   r     s    
zMutableMapping.popc             C   sB   yt t| }W n tk
r*   tdY nX | | }| |= ||fS )zD.popitem() -> (k, v), remove and return some (key, value) pair
           as a 2-tuple; but raise KeyError if D is empty.
        N)r   r~   r9   r|   )r.   r   r:   r    r    r!   Úpopitem$  s    zMutableMapping.popitemc             C   s,   yx|   ¡  qW W n tk
r&   Y nX dS )z,D.clear() -> None.  Remove all items from D.N)r   r|   )r.   r    r    r!   r   0  s
    zMutableMapping.clearc              O   sÈ   | st d| ^}} t| dkr0t dt|  | r¦| d }t|trbx^|D ]}|| ||< qLW nDt|drx8| ¡ D ]}|| ||< qvW nx|D ]\}}|||< qW x| ¡ D ]\}}|||< q°W dS )aK   D.update([E, ]**F) -> None.  Update D from mapping/iterable E and F.
            If E present and has a .keys() method, does:     for k in E: D[k] = E[k]
            If E present and lacks .keys() method, does:     for (k, v) in E: D[k] = v
            In either case, this is followed by: for k, v in F.items(): D[k] = v
        z@descriptor 'update' of 'MutableMapping' object needs an argumentr   z+update expected at most 1 arguments, got %dr   r   N)Ú	TypeErrorrT   rS   r   Úhasattrr   r   )rP   rQ   r.   rU   r   r:   r    r    r!   Úupdate8  s$    


zMutableMapping.updateNc             C   s*   y| | S  t k
r$   || |< Y nX |S )z@D.setdefault(k[,d]) -> D.get(k,d), also set D[k]=d if k not in D)r|   )r.   r   r   r    r    r!   Ú
setdefaultS  s
    zMutableMapping.setdefault)N)r2   r3   r4   r5   r   r   r   Úobjectr   r   r   r   r   r   r    r    r    r!   r   ÿ  s   c               @   sJ   e Zd ZdZdZedd Zdd Zdd Zd	d
 Z	dddZ
dd ZdS )r   zAll the operations on a read-only sequence.

    Concrete subclasses must override __new__ or __init__,
    __getitem__, and __len__.
    r    c             C   s   t d S )N)Ú
IndexError)r.   Úindexr    r    r!   r   k  s    zSequence.__getitem__c             c   s>   d}y x| | }|V  |d7 }qW W n t k
r8   d S X d S )Nr   r   )r   )r.   Úir   r    r    r!   rJ   o  s    zSequence.__iter__c             C   s&   x | D ]}||ks||krdS qW dS )NTFr    )r.   r:   r   r    r    r!   rO   y  s    
zSequence.__contains__c             c   s(   x"t tt| D ]}| | V  qW d S )N)ÚreversedÚrangerT   )r.   r¡   r    r    r!   rL     s    zSequence.__reversed__r   Nc             C   s    |dk	r"|dk r"t t| | d}|dk	r>|dk r>|t| 7 }|}xT|dksT||k ry | | }||ksn||krr|S W n tk
r   P Y nX |d7 }qDW tdS )zæS.index(value, [start, [stop]]) -> integer -- return first index of value.
           Raises ValueError if the value is not present.

           Supporting start and stop arguments is optional, but
           recommended.
        Nr   r   )ÚmaxrT   r   Ú
ValueError)r.   r:   ÚstartÚstopr¡   r   r    r    r!   r      s    zSequence.indexc                s   t  fdd| D S )zBS.count(value) -> integer -- return number of occurrences of valuec             3   s"   | ]}| ks| krd V  qdS )r   Nr    )r^   r   )r:   r    r!   r_     s    z!Sequence.count.<locals>.<genexpr>)Úsum)r.   r:   r    )r:   r!   Úcount  s    zSequence.count)r   N)r2   r3   r4   ru   r5   r   r   rJ   rO   rL   r    r©   r    r    r    r!   r   a  s   

c               @   s   e Zd ZdZdZdS )r   zMThis unifies bytes and bytearray.

    XXX Should add all their methods.
    r    N)r2   r3   r4   ru   r5   r    r    r    r!   r   ¤  s   c               @   sn   e Zd ZdZedd Zedd Zedd Zdd	 Zd
d Z	dd Z
dd ZdddZdd Zdd ZdS )r   r    c             C   s   t d S )N)r   )r.   r    r:   r    r    r!   r   ¼  s    zMutableSequence.__setitem__c             C   s   t d S )N)r   )r.   r    r    r    r!   r   À  s    zMutableSequence.__delitem__c             C   s   t dS )z3S.insert(index, value) -- insert value before indexN)r   )r.   r    r:   r    r    r!   ÚinsertÄ  s    zMutableSequence.insertc             C   s   |   t| |¡ dS )z:S.append(value) -- append value to the end of the sequenceN)rª   rT   )r.   r:   r    r    r!   ÚappendÉ  s    zMutableSequence.appendc             C   s,   yx|   ¡  qW W n tk
r&   Y nX dS )z,S.clear() -> None -- remove all items from SN)r   r   )r.   r    r    r!   r   Í  s
    zMutableSequence.clearc             C   sL   t | }x>t|d D ].}| || d  | |  | |< | || d < qW dS )z!S.reverse() -- reverse *IN PLACE*ri   r   N)rT   r£   )r.   rq   r¡   r    r    r!   ÚreverseÕ  s    zMutableSequence.reversec             C   s   x|D ]}|   |¡ qW dS )zMS.extend(iterable) -- extend sequence by appending elements from the iterableN)r«   )r.   r   r   r    r    r!   ÚextendÛ  s    
zMutableSequence.extendrk   c             C   s   | | }| |= |S )zS.pop([index]) -> item -- remove and return item at index (default last).
           Raise IndexError if list is empty or index is out of range.
        r    )r.   r    r   r    r    r!   r   à  s    zMutableSequence.popc             C   s   | |   |¡= dS )zvS.remove(value) -- remove first occurrence of value.
           Raise ValueError if the value is not present.
        N)r    )r.   r:   r    r    r!   r}   è  s    zMutableSequence.removec             C   s   |   |¡ | S )N)r­   )r.   r   r    r    r!   Ú__iadd__î  s    
zMutableSequence.__iadd__N)rk   )r2   r3   r4   r5   r   r   r   rª   r«   r   r¬   r­   r   r}   r®   r    r    r    r!   r   ±  s   	
)Kru   Úabcr   r   rl   Ú__all__r2   Útyper~   Úbytes_iteratorÚ	bytearrayÚbytearray_iteratorr   Údict_keyiteratorr   Údict_valueiteratorr   Údict_itemiteratorÚlist_iteratorr¢   Úlist_reverseiteratorr£   Úrange_iteratorÚlongrange_iteratorr   Úset_iteratorÚstr_iteratorÚtuple_iteratorÚzipÚzip_iteratorÚ	dict_keysÚdict_valuesÚ
dict_itemsr&   ÚmappingproxyÚ	generatorr#   Ú	coroutinerC   r$   Úasync_generatorr-   r	   r   r   Úregisterr   r   r   r
   r   r   r   r   r   r   r   r   Ú	frozensetr   r   r   r   r   r   r   r   r   ÚtupleÚstrÚ
memoryviewr   Úbytesr   Úlistr    r    r    r!   Ú<module>   sÂ   
	
)
0













/

 

O
2



\
=



	

A
ã               @   s:   d Z ddlZejZG dd dejZG dd dejZdS )z7Internal classes used by the gzip, lzma and bz2 modulesé    Nc               @   s0   e Zd ZdZdd Zdd Zdd Zdd	 Zd
S )Ú
BaseStreamzMode-checking helper functions.c             C   s   | j rtdd S )NzI/O operation on closed file)ÚclosedÚ
ValueError)Úself© r   úD:\Python\lib\_compression.pyÚ_check_not_closed   s    zBaseStream._check_not_closedc             C   s   |   ¡ st d¡d S )NzFile not open for reading)ÚreadableÚioÚUnsupportedOperation)r   r   r   r   Ú_check_can_read   s    zBaseStream._check_can_readc             C   s   |   ¡ st d¡d S )NzFile not open for writing)Úwritabler
   r   )r   r   r   r   Ú_check_can_write   s    zBaseStream._check_can_writec             C   s(   |   ¡ st d¡|  ¡ s$t d¡d S )Nz3Seeking is only supported on files open for readingz3The underlying file object does not support seeking)r	   r
   r   Úseekable)r   r   r   r   Ú_check_can_seek   s    
zBaseStream._check_can_seekN)Ú__name__Ú
__module__Ú__qualname__Ú__doc__r   r   r   r   r   r   r   r   r   	   s
   r   c                   sj   e Zd ZdZdd ZdddZ fddZd	d
 Zdd ZdddZ	dd Z
ejfddZdd Z  ZS )ÚDecompressReaderz5Adapts the decompressor API to a RawIOBase reader APIc             C   s   dS )NTr   )r   r   r   r   r	   $   s    zDecompressReader.readabler   c             K   s>   || _ d| _d| _d| _|| _|| _| jf | j| _|| _d S )NFr   éÿÿÿÿ)Ú_fpÚ_eofÚ_posÚ_sizeÚ_decomp_factoryÚ_decomp_argsÚ_decompressorÚ_trailing_error)r   ÚfpÚdecomp_factoryÚtrailing_errorÚdecomp_argsr   r   r   Ú__init__'   s    zDecompressReader.__init__c                s   d | _ t  ¡ S )N)r   ÚsuperÚclose)r   )Ú	__class__r   r   r%   ;   s    zDecompressReader.closec             C   s
   | j  ¡ S )N)r   r   )r   r   r   r   r   ?   s    zDecompressReader.seekablec          
   C   sP   t |:}| d¡$}|  t|¡}||d t|< W d Q R X W d Q R X t|S )NÚB)Ú
memoryviewÚcastÚreadÚlen)r   ÚbÚviewÚ	byte_viewÚdatar   r   r   ÚreadintoB   s    $zDecompressReader.readintor   c             C   sî   |dk r|   ¡ S |r| jrdS d }x| jjr| jjp>| j t¡}|sFP | jf | j	| _y| j 
||¡}W q¸ | jk
r   P Y q¸X n4| jjr¦| j t¡}|sªtdnd}| j 
||¡}|r$P q$W |sØd| _| j| _dS |  jt|7  _|S )Nr   ó    zACompressed file ended before the end-of-stream marker was reachedT)Úreadallr   r   ÚeofÚunused_datar   r*   ÚBUFFER_SIZEr   r   Ú
decompressr   Úneeds_inputÚEOFErrorr   r   r+   )r   Úsizer/   Úrawblockr   r   r   r*   H   s>    



zDecompressReader.readc             C   s,   | j  d¡ d| _d| _| jf | j| _d S )Nr   F)r   Úseekr   r   r   r   r   )r   r   r   r   Ú_rewindr   s    zDecompressReader._rewindc             C   s¸   |t jkrnV|t jkr"| j| }n@|t jkrT| jdk rHx|  t j¡rFq8W | j| }ntd 	|¡|| jk rv|  
¡  n
|| j8 }x0|dkr°|  tt j|¡}|s¢P |t|8 }qW | jS )Nr   zInvalid value for whence: {})r
   ÚSEEK_SETÚSEEK_CURr   ÚSEEK_ENDr   r*   ÚDEFAULT_BUFFER_SIZEr   Úformatr<   Úminr+   )r   ÚoffsetÚwhencer/   r   r   r   r;   x   s&    







zDecompressReader.seekc             C   s   | j S )z!Return the current file position.)r   )r   r   r   r   Útell   s    zDecompressReader.tell)r   )r   )r   r   r   r   r	   r#   r%   r   r0   r*   r<   r
   r=   r;   rE   Ú__classcell__r   r   )r&   r   r   !   s   

*r   )r   r
   r@   r5   ÚBufferedIOBaser   Ú	RawIOBaser   r   r   r   r   Ú<module>   s   ã               @   s2   d dl mZ dgZG dd dZG dd dZdS )é    )ÚrefÚWeakSetc               @   s$   e Zd Zdd Zdd Zdd ZdS )Ú_IterationGuardc             C   s   t || _d S )N)r   Úweakcontainer)Úselfr   © r   úD:\Python\lib\_weakrefset.pyÚ__init__   s    z_IterationGuard.__init__c             C   s    |   ¡ }|d k	r|j | ¡ | S )N)r   Ú
_iteratingÚadd)r   Úwr   r   r   Ú	__enter__   s    z_IterationGuard.__enter__c             C   s0   |   ¡ }|d k	r,|j}| | ¡ |s,| ¡  d S )N)r   r
   ÚremoveÚ_commit_removals)r   ÚeÚtÚbr   Úsr   r   r   Ú__exit__   s    
z_IterationGuard.__exit__N)Ú__name__Ú
__module__Ú__qualname__r	   r   r   r   r   r   r   r   
   s   r   c               @   s  e Zd Zd>ddZdd Zdd Zdd	 Zd
d Zdd Zdd Z	dd Z
dd Zdd Zdd Zdd Zdd Zdd Zdd ZeZd d! Zd"d# Zd$d% ZeZd&d' Zd(d) Zd*d+ ZeZd,d- Zd.d/ ZeZd0d1 Zd2d3 Zd4d5 Z e Z!d6d7 Z"d8d9 Z#d:d; Z$e$Z%d<d= Z&dS )?r   Nc             C   sB   t  | _t| fdd}|| _g | _t  | _|d k	r>|  |¡ d S )Nc             S   s2   | }|d k	r.|j r"|j | ¡ n|j | ¡ d S )N)r
   Ú_pending_removalsÚappendÚdataÚdiscard)ÚitemÚselfrefr   r   r   r   Ú_remove&   s
    z!WeakSet.__init__.<locals>._remove)Úsetr   r   r   r   r
   Úupdate)r   r   r   r   r   r   r	   $   s    zWeakSet.__init__c             C   s(   | j }| jj}x|r"|| ¡  qW d S )N)r   r   r   Úpop)r   Úlr   r   r   r   r   4   s    zWeakSet._commit_removalsc          	   c   s<   t | * x"| jD ]}| }|d k	r|V  qW W d Q R X d S )N)r   r   )r   Úitemrefr   r   r   r   Ú__iter__:   s
    
zWeakSet.__iter__c             C   s   t | jt | j S )N)Úlenr   r   )r   r   r   r   Ú__len__C   s    zWeakSet.__len__c             C   s,   yt |}W n tk
r    dS X || jkS )NF)r   Ú	TypeErrorr   )r   r   Úwrr   r   r   Ú__contains__F   s
    zWeakSet.__contains__c             C   s   | j t| ft| dd fS )NÚ__dict__)Ú	__class__ÚlistÚgetattr)r   r   r   r   Ú
__reduce__M   s    zWeakSet.__reduce__c             C   s&   | j r|  ¡  | j t|| j¡ d S )N)r   r   r   r   r   r   )r   r   r   r   r   r   Q   s    zWeakSet.addc             C   s   | j r|  ¡  | j ¡  d S )N)r   r   r   Úclear)r   r   r   r   r/   V   s    zWeakSet.clearc             C   s
   |   | ¡S )N)r+   )r   r   r   r   Úcopy[   s    zWeakSet.copyc             C   sX   | j r|  ¡  xDy| j ¡ }W n tk
r<   tdd Y nX | }|d k	r|S qW d S )Nzpop from empty WeakSet)r   r   r   r!   ÚKeyError)r   r#   r   r   r   r   r!   ^   s    zWeakSet.popc             C   s"   | j r|  ¡  | j t|¡ d S )N)r   r   r   r   r   )r   r   r   r   r   r   j   s    zWeakSet.removec             C   s"   | j r|  ¡  | j t|¡ d S )N)r   r   r   r   r   )r   r   r   r   r   r   o   s    zWeakSet.discardc             C   s*   | j r|  ¡  x|D ]}|  |¡ qW d S )N)r   r   r   )r   ÚotherÚelementr   r   r   r    t   s    
zWeakSet.updatec             C   s   |   |¡ | S )N)r    )r   r2   r   r   r   Ú__ior__z   s    
zWeakSet.__ior__c             C   s   |   ¡ }| |¡ |S )N)r0   Údifference_update)r   r2   Únewsetr   r   r   Ú
difference~   s    
zWeakSet.differencec             C   s   |   |¡ d S )N)Ú__isub__)r   r2   r   r   r   r5      s    zWeakSet.difference_updatec             C   s<   | j r|  ¡  | |kr"| j ¡  n| j dd |D ¡ | S )Nc             s   s   | ]}t |V  qd S )N)r   )Ú.0r   r   r   r   ú	<genexpr>   s    z#WeakSet.__isub__.<locals>.<genexpr>)r   r   r   r/   r5   )r   r2   r   r   r   r8      s    zWeakSet.__isub__c                s       fdd|D ¡S )Nc             3   s   | ]}| kr|V  qd S )Nr   )r9   r   )r   r   r   r:      s    z'WeakSet.intersection.<locals>.<genexpr>)r+   )r   r2   r   )r   r   Úintersection   s    zWeakSet.intersectionc             C   s   |   |¡ d S )N)Ú__iand__)r   r2   r   r   r   Úintersection_update   s    zWeakSet.intersection_updatec             C   s(   | j r|  ¡  | j dd |D ¡ | S )Nc             s   s   | ]}t |V  qd S )N)r   )r9   r   r   r   r   r:      s    z#WeakSet.__iand__.<locals>.<genexpr>)r   r   r   r=   )r   r2   r   r   r   r<      s    zWeakSet.__iand__c             C   s   | j  dd |D ¡S )Nc             s   s   | ]}t |V  qd S )N)r   )r9   r   r   r   r   r:      s    z#WeakSet.issubset.<locals>.<genexpr>)r   Úissubset)r   r2   r   r   r   r>      s    zWeakSet.issubsetc             C   s   | j ttt|k S )N)r   r   Úmapr   )r   r2   r   r   r   Ú__lt__   s    zWeakSet.__lt__c             C   s   | j  dd |D ¡S )Nc             s   s   | ]}t |V  qd S )N)r   )r9   r   r   r   r   r:   £   s    z%WeakSet.issuperset.<locals>.<genexpr>)r   Ú
issuperset)r   r2   r   r   r   rA   ¢   s    zWeakSet.issupersetc             C   s   | j ttt|kS )N)r   r   r?   r   )r   r2   r   r   r   Ú__gt__¦   s    zWeakSet.__gt__c             C   s$   t || jstS | jttt|kS )N)Ú
isinstancer+   ÚNotImplementedr   r   r?   r   )r   r2   r   r   r   Ú__eq__©   s    zWeakSet.__eq__c             C   s   |   ¡ }| |¡ |S )N)r0   Úsymmetric_difference_update)r   r2   r6   r   r   r   Úsymmetric_difference®   s    
zWeakSet.symmetric_differencec             C   s   |   |¡ d S )N)Ú__ixor__)r   r2   r   r   r   rF   ´   s    z#WeakSet.symmetric_difference_updatec                s@    j r  ¡   |kr" j ¡  n j  fdd|D ¡  S )Nc             3   s   | ]}t | jV  qd S )N)r   r   )r9   r   )r   r   r   r:   ¼   s    z#WeakSet.__ixor__.<locals>.<genexpr>)r   r   r   r/   rF   )r   r2   r   )r   r   rH   ¶   s    zWeakSet.__ixor__c             C   s   |   dd | |fD ¡S )Nc             s   s   | ]}|D ]
}|V  q
qd S )Nr   )r9   r   r   r   r   r   r:   À   s    z WeakSet.union.<locals>.<genexpr>)r+   )r   r2   r   r   r   Úunion¿   s    zWeakSet.unionc             C   s   t |  |¡dkS )Nr   )r%   r;   )r   r2   r   r   r   Ú
isdisjointÃ   s    zWeakSet.isdisjoint)N)'r   r   r   r	   r   r$   r&   r)   r.   r   r/   r0   r!   r   r   r    r4   r7   Ú__sub__r5   r8   r;   Ú__and__r=   r<   r>   Ú__le__r@   rA   Ú__ge__rB   rE   rG   Ú__xor__rF   rH   rI   Ú__or__rJ   r   r   r   r   r   #   sH   
			N)Ú_weakrefr   Ú__all__r   r   r   r   r   r   Ú<module>   s   ã               @   sº   d Z dd ZG dd deZG dd deZG dd deZy,d	d
lm	Z	m
Z
mZmZmZmZmZmZ W n* ek
r   d	dlmZm	Z	 de_Y nX G dd deZG dd dedZdS )z3Abstract Base Classes (ABCs) according to PEP 3119.c             C   s
   d| _ | S )aÞ  A decorator indicating abstract methods.

    Requires that the metaclass is ABCMeta or derived from it.  A
    class that has a metaclass derived from ABCMeta cannot be
    instantiated unless all of its abstract methods are overridden.
    The abstract methods can be called using any of the normal
    'super' call mechanisms.

    Usage:

        class C(metaclass=ABCMeta):
            @abstractmethod
            def my_abstract_method(self, ...):
                ...
    T)Ú__isabstractmethod__)Úfuncobj© r   úD:\Python\lib\abc.pyÚabstractmethod   s    r   c                   s$   e Zd ZdZdZ fddZ  ZS )ÚabstractclassmethodaJ  A decorator indicating abstract classmethods.

    Similar to abstractmethod.

    Usage:

        class C(metaclass=ABCMeta):
            @abstractclassmethod
            def my_abstract_classmethod(cls, ...):
                ...

    'abstractclassmethod' is deprecated. Use 'classmethod' with
    'abstractmethod' instead.
    Tc                s   d|_ t  |¡ d S )NT)r   ÚsuperÚ__init__)ÚselfÚcallable)Ú	__class__r   r   r   -   s    zabstractclassmethod.__init__)Ú__name__Ú
__module__Ú__qualname__Ú__doc__r   r   Ú__classcell__r   r   )r   r   r      s   r   c                   s$   e Zd ZdZdZ fddZ  ZS )ÚabstractstaticmethodaJ  A decorator indicating abstract staticmethods.

    Similar to abstractmethod.

    Usage:

        class C(metaclass=ABCMeta):
            @abstractstaticmethod
            def my_abstract_staticmethod(...):
                ...

    'abstractstaticmethod' is deprecated. Use 'staticmethod' with
    'abstractmethod' instead.
    Tc                s   d|_ t  |¡ d S )NT)r   r   r   )r	   r
   )r   r   r   r   D   s    zabstractstaticmethod.__init__)r   r   r   r   r   r   r   r   r   )r   r   r   2   s   r   c               @   s   e Zd ZdZdZdS )Úabstractpropertyaf  A decorator indicating abstract properties.

    Requires that the metaclass is ABCMeta or derived from it.  A
    class that has a metaclass derived from ABCMeta cannot be
    instantiated unless all of its abstract properties are overridden.
    The abstract properties can be called using any of the normal
    'super' call mechanisms.

    Usage:

        class C(metaclass=ABCMeta):
            @abstractproperty
            def my_abstract_property(self):
                ...

    This defines a read-only property; you can also define a read-write
    abstract property using the 'long' form of property declaration:

        class C(metaclass=ABCMeta):
            def getx(self): ...
            def setx(self, value): ...
            x = abstractproperty(getx, setx)

    'abstractproperty' is deprecated. Use 'property' with 'abstractmethod'
    instead.
    TN)r   r   r   r   r   r   r   r   r   r   I   s   r   é    )Úget_cache_tokenÚ	_abc_initÚ_abc_registerÚ_abc_instancecheckÚ_abc_subclasscheckÚ	_get_dumpÚ_reset_registryÚ_reset_caches)ÚABCMetar   Úabcc                   sR   e Zd ZdZ fddZdd Zdd Zdd	 ZdddZdd Z	dd Z
  ZS )r   a  Metaclass for defining Abstract Base Classes (ABCs).

        Use this metaclass to create an ABC.  An ABC can be subclassed
        directly, and then acts as a mix-in class.  You can also register
        unrelated concrete classes (even built-in classes) and unrelated
        ABCs as 'virtual subclasses' -- these and their descendants will
        be considered subclasses of the registering ABC by the built-in
        issubclass() function, but the registering ABC won't show up in
        their MRO (Method Resolution Order) nor will method
        implementations defined by the registering ABC be callable (not
        even via super()).
        c                s"   t  j| |||f|}t| |S )N)r   Ú__new__r   )ÚmclsÚnameÚbasesÚ	namespaceÚkwargsÚcls)r   r   r   r   }   s    zABCMeta.__new__c             C   s
   t | |S )z{Register a virtual subclass of an ABC.

            Returns the subclass, to allow usage as a class decorator.
            )r   )r$   Úsubclassr   r   r   Úregister   s    zABCMeta.registerc             C   s
   t | |S )z'Override for isinstance(instance, cls).)r   )r$   Úinstancer   r   r   Ú__instancecheck__   s    zABCMeta.__instancecheck__c             C   s
   t | |S )z'Override for issubclass(subclass, cls).)r   )r$   r%   r   r   r   Ú__subclasscheck__   s    zABCMeta.__subclasscheck__Nc             C   s   t d| j d| j |d t dt  |d t| \}}}}t d||d t d||d t d||d t d||d d	S )
z'Debug helper to print the ABC registry.zClass: Ú.)ÚfilezInv. counter: z_abc_registry: z_abc_cache: z_abc_negative_cache: z_abc_negative_cache_version: N)Úprintr   r   r   r   )r$   r+   Ú_abc_registryÚ
_abc_cacheÚ_abc_negative_cacheÚ_abc_negative_cache_versionr   r   r   Ú_dump_registry   s    
zABCMeta._dump_registryc             C   s   t |  dS )z.Clear the registry (for debugging or testing).N)r   )r$   r   r   r   Ú_abc_registry_clear   s    zABCMeta._abc_registry_clearc             C   s   t |  dS )z,Clear the caches (for debugging or testing).N)r   )r$   r   r   r   Ú_abc_caches_clear¡   s    zABCMeta._abc_caches_clear)N)r   r   r   r   r   r&   r(   r)   r1   r2   r3   r   r   r   )r   r   r   p   s   
r   c               @   s   e Zd ZdZdZdS )ÚABCzVHelper class that provides a standard way to create an ABC using
    inheritance.
    r   N)r   r   r   r   Ú	__slots__r   r   r   r   r4   ¦   s   r4   )Ú	metaclassN)r   r   Úclassmethodr   Ústaticmethodr   Úpropertyr   Ú_abcr   r   r   r   r   r   r   r   ÚImportErrorZ_py_abcr   r   Útyper4   r   r   r   r   Ú<module>   s   ,6ã               @   s  d Z ddlZddlZddlZddddddd	d
ddddddddddgZeefZdd ZdCddZ	dDddZ
dd Zdd Ze dd¡Ze dd¡Zdd Zdd Zd Zdadad!d	 ZdEd"d
Zd#d ZdFd$dZdadad%Zd&ZdGd'd(Zddddd)d*dZddd+d,d-dZd.Z da!da"da#dHd/dZ$d0d Z%d1Z&e&d2 d3 Z'd4d Z(d5d Z)d6d7 Z*d8d Z+d9d: Z,d;d Z-d<d= Z.d>d? Z/d@dA Z0e1dBkre/  dS )IzDBase16, Base32, Base64 (RFC 3548), Base85 and Ascii85 data encodingsé    NÚencodeÚdecodeÚencodebytesÚdecodebytesÚ	b64encodeÚ	b64decodeÚ	b32encodeÚ	b32decodeÚ	b16encodeÚ	b16decodeÚ	b85encodeÚ	b85decodeÚ	a85encodeÚ	a85decodeÚstandard_b64encodeÚstandard_b64decodeÚurlsafe_b64encodeÚurlsafe_b64decodec             C   sx   t | tr2y
|  d¡S  tk
r0   tdY nX t | tr@| S yt|  ¡ S  tk
rr   td| j	j
 d Y nX d S )NÚasciiz4string argument should contain only ASCII charactersz>argument should be a bytes-like object or ASCII string, not %r)Ú
isinstanceÚstrr   ÚUnicodeEncodeErrorÚ
ValueErrorÚbytes_typesÚ
memoryviewÚtobytesÚ	TypeErrorÚ	__class__Ú__name__)Ús© r    úD:\Python\lib\base64.pyÚ_bytes_from_decode_data"   s    


r"   c             C   sD   t j| dd}|dk	r@t|dks.tt|| t d|¡¡S |S )a*  Encode the bytes-like object s using Base64 and return a bytes object.

    Optional altchars should be a byte string of length 2 which specifies an
    alternative alphabet for the '+' and '/' characters.  This allows an
    application to e.g. generate url or filesystem safe Base64 strings.
    F)ÚnewlineNé   s   +/)ÚbinasciiÚ
b2a_base64ÚlenÚAssertionErrorÚreprÚ	translateÚbytesÚ	maketrans)r   ÚaltcharsÚencodedr    r    r!   r   3   s
    Fc             C   sf   t | } |dk	rBt |}t|dks0tt||  t |d¡¡} |r\t d| ¡s\t	 
d¡t	 | ¡S )an  Decode the Base64 encoded bytes-like object or ASCII string s.

    Optional altchars must be a bytes-like object or ASCII string of length 2
    which specifies the alternative alphabet used instead of the '+' and '/'
    characters.

    The result is returned as a bytes object.  A binascii.Error is raised if
    s is incorrectly padded.

    If validate is False (the default), characters that are neither in the
    normal base-64 alphabet nor the alternative alphabet are discarded prior
    to the padding check.  If validate is True, these non-alphabet characters
    in the input result in a binascii.Error.
    Nr$   s   +/s   ^[A-Za-z0-9+/]*={0,2}$zNon-base64 digit found)r"   r'   r(   r)   r*   r+   r,   ÚreÚmatchr%   ÚErrorÚ
a2b_base64)r   r-   Úvalidater    r    r!   r   A   s    
c             C   s   t | S )zrEncode bytes-like object s using the standard Base64 alphabet.

    The result is returned as a bytes object.
    )r   )r   r    r    r!   r   Z   s    c             C   s   t | S )aQ  Decode bytes encoded with the standard Base64 alphabet.

    Argument s is a bytes-like object or ASCII string to decode.  The result
    is returned as a bytes object.  A binascii.Error is raised if the input
    is incorrectly padded.  Characters that are not in the standard alphabet
    are discarded prior to the padding check.
    )r   )r   r    r    r!   r   a   s    s   +/s   -_c             C   s   t |  t¡S )zèEncode bytes using the URL- and filesystem-safe Base64 alphabet.

    Argument s is a bytes-like object to encode.  The result is returned as a
    bytes object.  The alphabet uses '-' instead of '+' and '_' instead of
    '/'.
    )r   r*   Ú_urlsafe_encode_translation)r   r    r    r!   r   o   s    c             C   s   t | } |  t¡} t| S )aÎ  Decode bytes using the URL- and filesystem-safe Base64 alphabet.

    Argument s is a bytes-like object or ASCII string to decode.  The result
    is returned as a bytes object.  A binascii.Error is raised if the input
    is incorrectly padded.  Characters that are not in the URL-safe base-64
    alphabet, and are not a plus '+' or slash '/', are discarded prior to the
    padding check.

    The alphabet uses '-' instead of '+' and '_' instead of '/'.
    )r"   r*   Ú_urlsafe_decode_translationr   )r   r    r    r!   r   x   s    
s    ABCDEFGHIJKLMNOPQRSTUVWXYZ234567c                sB  t dkr,dd tD   fdd D a d t| tsBt|  ¡ } t| d }|rb| dd|   } t }tj	}t }xjt
dt| dD ]V}|| ||d  d}|||d	?  ||d
? d@   ||d? d@   ||d@   7 }qW |dkrôd|dd< nF|dkrd|dd< n.|dkr$d|dd< n|dkr:d|dd< t|S )zKEncode the bytes-like object s using Base32 and return a bytes object.
    Nc             S   s   g | ]}t |fqS r    )r+   )Ú.0Úir    r    r!   ú
<listcomp>   s    zb32encode.<locals>.<listcomp>c                s   g | ]} D ]}|| qqS r    r    )r6   ÚaÚb)Úb32tabr    r!   r8      s    é   ó    r   Úbigé   é   iÿ  é
   é   s   ======iúÿÿÿr$   s   ====éüÿÿÿé   s   ===éýÿÿÿé   ó   =éÿÿÿÿ)Ú_b32tab2Ú_b32alphabetr   r   r   r   r'   Ú	bytearrayÚintÚ
from_bytesÚranger+   )r   Úleftoverr.   rM   Úb32tab2r7   Úcr    )r;   r!   r      s4    
*


c          	   C   s  t dkrdd ttD a t| } t| d r8t d¡|dk	rvt|}t|dks`tt||  	t
 dd| ¡¡} |r|  ¡ } t| }|  d	¡} |t|  }t }t }xtd
t| dD ]n}| ||d  }d
}	y"x|D ]}
|	d> ||
  }	qÜW W n" tk
r   t d¡dY nX ||	 dd¡7 }q¼W |d sB|dkrLt d¡|r|r|	d| K }	|	 dd¡}dd|  d }|d| |dd< t
|S )aZ  Decode the Base32 encoded bytes-like object or ASCII string s.

    Optional casefold is a flag specifying whether a lowercase alphabet is
    acceptable as input.  For security purposes, the default is False.

    RFC 3548 allows for optional mapping of the digit 0 (zero) to the
    letter O (oh), and for optional mapping of the digit 1 (one) to
    either the letter I (eye) or letter L (el).  The optional argument
    map01 when not None, specifies which letter the digit 1 should be
    mapped to (when map01 is not None, the digit 0 is always mapped to
    the letter O).  For security purposes the default is None, so that
    0 and 1 are not allowed in the input.

    The result is returned as a bytes object.  A binascii.Error is raised if
    the input is incorrectly padded or if there are non-alphabet
    characters present in the input.
    Nc             S   s   i | ]\}}||qS r    r    )r6   ÚkÚvr    r    r!   ú
<dictcomp>Ê   s    zb32decode.<locals>.<dictcomp>é   zIncorrect paddingrB   s   01ó   OrG   r   r<   zNon-base32 digit foundr>   >   r   rB   rD   rF   é   é+   éûÿÿÿ)Ú_b32revÚ	enumeraterJ   r"   r'   r%   r1   r(   r)   r*   r+   r,   ÚupperÚrstriprK   rN   ÚKeyErrorÚto_bytes)r   ÚcasefoldÚmap01ÚlÚpadcharsÚdecodedÚb32revr7   ÚquantaÚaccrQ   ÚlastrO   r    r    r!   r	   ´   sB    



c             C   s   t  | ¡ ¡ S )zKEncode the bytes-like object s using Base16 and return a bytes object.
    )r%   Úhexlifyr\   )r   r    r    r!   r
   ÷   s    c             C   s4   t | } |r|  ¡ } t d| ¡r*t d¡t | ¡S )a  Decode the Base16 encoded bytes-like object or ASCII string s.

    Optional casefold is a flag specifying whether a lowercase alphabet is
    acceptable as input.  For security purposes, the default is False.

    The result is returned as a bytes object.  A binascii.Error is raised if
    s is incorrectly padded or if there are non-alphabet characters present
    in the input.
    s	   [^0-9A-F]zNon-base16 digit found)r"   r\   r/   Úsearchr%   r1   Ú	unhexlify)r   r`   r    r    r!   r   ý   s    

s   <~s   ~>c       	         s¬   t | tst|  ¡ } t|  d }|r4| d|  } t dt| d  ¡ | ¡} fdd|D }|r¢|s¢|d dkr d d	 |d< |d d |  |d< d
 |¡S )NrF   r=   z!%dIc                sP   g | ]H}r|sd n6r$|dkr$dn&|d  |d d    |d   qS )ó   zi    ó   yií^	 éU   i9  r    )r6   Úword)ÚcharsÚchars2ÚfoldnulsÚ
foldspacesr    r!   r8   !  s   z_85encode.<locals>.<listcomp>rH   rl   r   r<   ó    )	r   r   r   r   r'   ÚstructÚStructÚunpackÚjoin)	r:   rp   rq   Úpadrr   rs   ÚpaddingÚwordsÚchunksr    )rp   rq   rr   rs   r!   Ú	_85encode  s    
r}   )rs   Úwrapcolry   Úadobec               sº   t dkr*dd tddD a dd t D at| t t|d| |rHt   rªt|rVdnd	 fd
dtdt D }|r t|d d kr | d¡ d |¡ |r¶ t	7   S )aÜ  Encode bytes-like object b using Ascii85 and return a bytes object.

    foldspaces is an optional flag that uses the special short sequence 'y'
    instead of 4 consecutive spaces (ASCII 0x20) as supported by 'btoa'. This
    feature is not supported by the "standard" Adobe encoding.

    wrapcol controls whether the output should have newline (b'\n') characters
    added to it. If this is non-zero, each output line will be at most this
    many characters long.

    pad controls whether the input is padded to a multiple of 4 before
    encoding. Note that the btoa implementation always pads.

    adobe controls whether the encoded byte sequence is framed with <~ and ~>,
    which is used by the Adobe implementation.
    Nc             S   s   g | ]}t |fqS r    )r+   )r6   r7   r    r    r!   r8   D  s    za85encode.<locals>.<listcomp>é!   év   c             S   s   g | ]}t D ]}|| qqS r    )Ú	_a85chars)r6   r9   r:   r    r    r!   r8   E  s    Tr$   rB   c                s   g | ]} ||  qS r    r    )r6   r7   )Úresultr~   r    r!   r8   M  s   r   rH   rt   ó   
)
r   rN   Ú
_a85chars2r}   Ú	_A85STARTÚmaxr'   Úappendrx   Ú_A85END)r:   rs   r~   ry   r   r|   r    )r   r~   r!   r   /  s"    

s    	
)rs   r   Úignorecharsc         	   C   s¢  t | } |rH|  t¡s$td t¡|  t¡r<| dd } n| dd } t d¡j	}g }|j
}g }|j
}|j}	x| d D ]ö}
d|
  krdkrn nt||
 t|d	krpd
}x|D ]}
d| |
d  }q¸W y||| W n" tjk
r   tddY nX |	  qz|
dkr.|r$td|d qz|rV|
dkrV|rLtd|d qz|
|krdqzqztd|
 qzW d |¡}dt| }|r|d|  }|S )a  Decode the Ascii85 encoded bytes-like object or ASCII string b.

    foldspaces is a flag that specifies whether the 'y' short sequence should be
    accepted as shorthand for 4 consecutive spaces (ASCII 0x20). This feature is
    not supported by the "standard" Adobe encoding.

    adobe controls whether the input sequence is in Adobe Ascii85 format (i.e.
    is framed with <~ and ~>).

    ignorechars should be a byte string containing characters to ignore from the
    input. This should only contain whitespace characters, and by default
    contains all whitespace characters in ASCII.

    The result is returned as a bytes object.
    z1Ascii85 encoded byte sequences must end with {!r}r$   éþÿÿÿNz!Is   uuuur   éu   r<   r   rn   zAscii85 overflowéz   zz inside Ascii85 5-tuples       éy   zy inside Ascii85 5-tuples       zNon-Ascii85 digit found: %crt   rF   )r"   Úendswithr   r   ÚformatÚ
startswithr   ru   rv   Úpackr   Úclearr'   Úerrorrx   )r:   rs   r   r   ÚpackIrd   Údecoded_appendÚcurrÚcurr_appendÚ
curr_clearÚxrg   r   rz   r    r    r!   r   X  sV    







sU   0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz!#$%&()*+-;<=>?@^_`{|}~c             C   s2   t dkr$dd tD a dd t D at| t t|S )z»Encode bytes-like object b in base85 format and return a bytes object.

    If pad is true, the input is padded with b'\0' so its length is a multiple of
    4 bytes before encoding.
    Nc             S   s   g | ]}t |fqS r    )r+   )r6   r7   r    r    r!   r8   °  s    zb85encode.<locals>.<listcomp>c             S   s   g | ]}t D ]}|| qqS r    )Ú	_b85chars)r6   r9   r:   r    r    r!   r8   ±  s    )r   Ú_b85alphabetÚ
_b85chars2r}   )r:   ry   r    r    r!   r   ¦  s    	c       
   	   C   sZ  t dkr0dgd a xttD ]\}}|t |< qW t| } t|  d }| d|  } g }t d¡j}xÔtdt| dD ]À}| ||d  }d}y"x|D ]}|d t |  }qW W nJ t	k
rø   x2t|D ]&\}}t | dkrÈt
d||  dqÈW  Y nX y| ||¡ W qt tjk
r2   t
d	| dY qtX qtW d
 |¡}	|rV|	d|  }	|	S )zqDecode the base85-encoded bytes-like object or ASCII string b

    The result is returned as a bytes object.
    Né   r<   ó   ~z!Ir   rn   z#bad base85 character at position %dz+base85 overflow in hunk starting at byte %drt   )Ú_b85decr[   r   r"   r'   ru   rv   r   rN   r   r   r   r   rx   )
r:   r7   rQ   rz   Úoutr   Úchunkrg   Újr   r    r    r!   r   ´  s<    


éL   rF   rD   c             C   s`   xZ|   t¡}|sP x0t|tk rB|   tt| ¡}|s8P ||7 }qW t |¡}| |¡ qW dS )z1Encode a file; input and output are binary files.N)ÚreadÚ
MAXBINSIZEr'   r%   r&   Úwrite)ÚinputÚoutputr   ÚnsÚliner    r    r!   r   ä  s    

c             C   s,   x&|   ¡ }|sP t |¡}| |¡ qW dS )z1Decode a file; input and output are binary files.N)Úreadliner%   r2   r§   )r¨   r©   r«   r   r    r    r!   r   ó  s    
c          
   C   s   yt | }W n8 tk
rD } zd| jj }t||W d d }~X Y nX |jdkrjd|j| jjf }t||jdkrd|j| jjf }t|d S )Nz"expected bytes-like object, not %s)rQ   r:   ÚBz-expected single byte elements, not %r from %srB   z(expected 1-D data, not %d-D data from %s)r   r   r   r   r   Úndim)r   ÚmÚerrÚmsgr    r    r!   Ú_input_type_checkü  s    

r²   c             C   sP   t |  g }x8tdt| tD ]$}| ||t  }| t |¡¡ qW d |¡S )zVEncode a bytestring into a bytes object containing multiple lines
    of base-64 data.r   rt   )r²   rN   r'   r¦   r   r%   r&   rx   )r   Úpiecesr7   r¢   r    r    r!   r     s    c             C   s   ddl }| dtd¡ t| S )zLegacy alias of encodebytes().r   NzAencodestring() is a deprecated alias since 3.1, use encodebytes()r$   )ÚwarningsÚwarnÚDeprecationWarningr   )r   r´   r    r    r!   Úencodestring  s    r·   c             C   s   t |  t | ¡S )z8Decode a bytestring of base-64 data into a bytes object.)r²   r%   r2   )r   r    r    r!   r     s    c             C   s   ddl }| dtd¡ t| S )zLegacy alias of decodebytes().r   NzHdecodestring() is a deprecated alias since Python 3.1, use decodebytes()r$   )r´   rµ   r¶   r   )r   r´   r    r    r!   Údecodestring$  s    r¸   c        	   
   C   s   ddl } ddl}y| | jdd d¡\}}W nP |jk
r~ } z0| j| _t| td| jd   |  d¡ W dd}~X Y nX t}xF|D ]>\}}|dkrt}|dkrªt	}|d	kr¶t	}|d
krt
  dS qW |r
|d dkr
t|d d}||| jj W dQ R X n|| jj| jj dS )zSmall main programr   NrB   Údeutzusage: %s [-d|-e|-u|-t] [file|-]
        -d, -u: decode
        -e: encode (default)
        -t: encode and decode string 'Aladdin:open sesame'r$   z-ez-dz-uz-tú-Úrb)ÚsysÚgetoptÚargvr   ÚstderrÚstdoutÚprintÚexitr   r   ÚtestÚopenÚbufferÚstdin)	r¼   r½   ÚoptsÚargsr±   ÚfuncÚor9   Úfr    r    r!   Úmain.  s0         rÌ   c              C   sH   d} t t|  t| }t t| t|}t t| | |ksDtd S )Ns   Aladdin:open sesame)rÁ   r)   r   r   r(   )Ús0Ús1Ús2r    r    r!   rÃ   H  s    rÃ   Ú__main__)N)NF)FN)F)FFF)F)2Ú__doc__r/   ru   r%   Ú__all__r+   rK   r   r"   r   r   r   r   r,   r4   r5   r   r   rJ   rI   rZ   r   r	   r
   r   r   r   r   r   r}   r   r   r   r   r   r    r   r   ÚMAXLINESIZEr¦   r   r   r²   r   r·   r   r¸   rÌ   rÃ   r   r    r    r    r!   Ú<module>   sh   

	&
C

)H
-	
	


ã               @   s   d Z ddddddgZdZdd	lmZ dd
lZdd
lZdd
lZdd
l	Z	ddl
mZ ddlmZmZ dZdZdZG dd de	jZdddZdddZdd Zd
S )z¬Interface to the libbzip2 compression library.

This module provides a file interface, classes for incremental
(de)compression, and functions for one-shot (de)compression.
ÚBZ2FileÚBZ2CompressorÚBZ2DecompressorÚopenÚcompressÚ
decompressz%Nadeem Vawda <nadeem.vawda@gmail.com>é    )r   N)ÚRLock)r   r   é   é   c               @   s®   e Zd ZdZd)ddZdd Zed	d
 Zdd Zdd Z	dd Z
dd Zd*ddZd+ddZd,ddZdd Zd-ddZd.dd Zd!d" Zd#d$ Zejfd%d&Zd'd( ZdS )/r   a@  A file object providing transparent bzip2 (de)compression.

    A BZ2File can act as a wrapper for an existing file object, or refer
    directly to a named file on disk.

    Note that BZ2File provides a *binary* file interface - data read is
    returned as bytes, and data to be written should be given as bytes.
    ÚrNé	   c             C   sP  t  | _d| _d| _t| _|dk	r.t dt¡ d|  krBdksLn t	d|dkr^d}t
}nb|d	krzd
}t}t|| _nF|dkrd}t}t|| _n*|dkr²d}t}t|| _nt	d|f t|tttjfrìt||| _d| _|| _n.t|dst|dr|| _|| _ntd| jt
krFtj| jttd}t |¡| _nd| _dS )a>  Open a bzip2-compressed file.

        If filename is a str, bytes, or PathLike object, it gives the
        name of the file to be opened. Otherwise, it should be a file
        object, which will be used to read or write the compressed data.

        mode can be 'r' for reading (default), 'w' for (over)writing,
        'x' for creating exclusively, or 'a' for appending. These can
        equivalently be given as 'rb', 'wb', 'xb', and 'ab'.

        buffering is ignored. Its use is deprecated.

        If mode is 'w', 'x' or 'a', compresslevel can be a number between 1
        and 9 specifying the level of compression: 1 produces the least
        compression, and 9 (default) produces the most compression.

        If mode is 'r', the input file may be the concatenation of
        multiple compressed streams.
        NFz)Use of 'buffering' argument is deprecatedr	   r   z%compresslevel must be between 1 and 9)Ú r   Úrbr   )ÚwÚwbr   )ÚxÚxbr   )ÚaÚabr   zInvalid mode: %rTÚreadÚwritez6filename must be a str, bytes, file or PathLike object)Útrailing_errorr   )r   Ú_lockÚ_fpÚ_closefpÚ_MODE_CLOSEDÚ_modeÚwarningsÚwarnÚDeprecationWarningÚ
ValueErrorÚ
_MODE_READÚ_MODE_WRITEr   Ú_compressorÚ
isinstanceÚstrÚbytesÚosÚPathLikeÚ_builtin_openÚhasattrÚ	TypeErrorÚ_compressionÚDecompressReaderr   ÚOSErrorÚioÚBufferedReaderÚ_bufferÚ_pos)ÚselfÚfilenameÚmodeÚ	bufferingÚcompresslevelÚ	mode_codeÚraw© r:   úD:\Python\lib\bz2.pyÚ__init__'   sL    
zBZ2File.__init__c             C   s   | j  | jtkrdS z<| jtkr.| j ¡  n"| jtkrP| j | j	 
¡ ¡ d| _	W dz| jrf| j ¡  W dd| _d| _t| _d| _X X W dQ R X dS )z«Flush and close the file.

        May be called more than once without error. Once the file is
        closed, any other operation on it will raise a ValueError.
        NF)r   r   r   r!   r1   Úcloser"   r   r   r#   Úflushr   )r3   r:   r:   r;   r=   l   s     



zBZ2File.closec             C   s
   | j tkS )zTrue if this file is closed.)r   r   )r3   r:   r:   r;   Úclosed   s    zBZ2File.closedc             C   s   |   ¡  | j ¡ S )z3Return the file descriptor for the underlying file.)Ú_check_not_closedr   Úfileno)r3   r:   r:   r;   rA      s    zBZ2File.filenoc             C   s   |   ¡ o| j ¡ S )z)Return whether the file supports seeking.)Úreadabler1   Úseekable)r3   r:   r:   r;   rC      s    zBZ2File.seekablec             C   s   |   ¡  | jtkS )z/Return whether the file was opened for reading.)r@   r   r!   )r3   r:   r:   r;   rB      s    zBZ2File.readablec             C   s   |   ¡  | jtkS )z/Return whether the file was opened for writing.)r@   r   r"   )r3   r:   r:   r;   Úwritable   s    zBZ2File.writabler   c          	   C   s&   | j  |  ¡  | j |¡S Q R X dS )z¿Return buffered data without advancing the file position.

        Always returns at least one byte of data, unless at EOF.
        The exact number of bytes returned is unspecified.
        N)r   Ú_check_can_readr1   Úpeek)r3   Únr:   r:   r;   rF      s    zBZ2File.peekéÿÿÿÿc          	   C   s&   | j  |  ¡  | j |¡S Q R X dS )z±Read up to size uncompressed bytes from the file.

        If size is negative or omitted, read until EOF is reached.
        Returns b'' if the file is already at EOF.
        N)r   rE   r1   r   )r3   Úsizer:   r:   r;   r   ª   s    zBZ2File.readc          	   C   s4   | j $ |  ¡  |dk rtj}| j |¡S Q R X dS )zêRead up to size uncompressed bytes, while trying to avoid
        making multiple reads from the underlying stream. Reads up to a
        buffer's worth of data if size is negative.

        Returns b'' if the file is at EOF.
        r   N)r   rE   r/   ÚDEFAULT_BUFFER_SIZEr1   Úread1)r3   rI   r:   r:   r;   rK   ´   s
    zBZ2File.read1c          	   C   s&   | j  |  ¡  | j |¡S Q R X dS )zRRead bytes into b.

        Returns the number of bytes read (0 for EOF).
        N)r   rE   r1   Úreadinto)r3   Úbr:   r:   r;   rL   Á   s    zBZ2File.readintoc          	   C   sJ   t |ts$t|dstd| ¡ }| j |  ¡  | j |¡S Q R X dS )a  Read a line of uncompressed bytes from the file.

        The terminating newline (if present) is retained. If size is
        non-negative, no more than size bytes will be read (in which
        case the line may be incomplete). Returns b'' if already at EOF.
        Ú	__index__zInteger argument expectedN)	r$   Úintr*   r+   rN   r   rE   r1   Úreadline)r3   rI   r:   r:   r;   rP   Ê   s    

zBZ2File.readlinec          	   C   sJ   t |ts$t|dstd| ¡ }| j |  ¡  | j |¡S Q R X dS )zùRead a list of lines of uncompressed bytes from the file.

        size can be specified to control the number of lines read: no
        further lines will be read once the total size of the lines read
        so far equals or exceeds size.
        rN   zInteger argument expectedN)	r$   rO   r*   r+   rN   r   rE   r1   Ú	readlines)r3   rI   r:   r:   r;   rQ   Ù   s    

zBZ2File.readlinesc          	   C   sL   | j < |  ¡  | j |¡}| j |¡ |  jt|7  _t|S Q R X dS )zöWrite a byte string to the file.

        Returns the number of uncompressed bytes written, which is
        always len(data). Note that due to buffering, the file on disk
        may not reflect the data written until close() is called.
        N)r   Ú_check_can_writer#   r   r   r   r2   Úlen)r3   ÚdataÚ
compressedr:   r:   r;   r   è   s    zBZ2File.writec          	   C   s    | j  tj | |¡S Q R X dS )zñWrite a sequence of byte strings to the file.

        Returns the number of uncompressed bytes written.
        seq can be any iterable yielding byte strings.

        Line separators are not added between the written byte strings.
        N)r   r,   Ú
BaseStreamÚ
writelines)r3   Úseqr:   r:   r;   rW   ö   s    zBZ2File.writelinesc          	   C   s(   | j  |  ¡  | j ||¡S Q R X dS )aç  Change the file position.

        The new position is specified by offset, relative to the
        position indicated by whence. Values for whence are:

            0: start of stream (default); offset must not be negative
            1: current stream position
            2: end of stream; offset must not be positive

        Returns the new file position.

        Note that seeking is emulated, so depending on the parameters,
        this operation may be extremely slow.
        N)r   Ú_check_can_seekr1   Úseek)r3   ÚoffsetÚwhencer:   r:   r;   rZ     s    zBZ2File.seekc          	   C   s4   | j $ |  ¡  | jtkr$| j ¡ S | jS Q R X dS )z!Return the current file position.N)r   r@   r   r!   r1   Útellr2   )r3   r:   r:   r;   r]     s
    

zBZ2File.tell)r   Nr   )r   )rH   )rH   )rH   )rH   )Ú__name__Ú
__module__Ú__qualname__Ú__doc__r<   r=   Úpropertyr?   rA   rC   rB   rD   rF   r   rK   rL   rP   rQ   r   rW   r/   ÚSEEK_SETrZ   r]   r:   r:   r:   r;   r      s$   	
E



	

r   r   c             C   s   d|kr d|krPt d|f n0|dk	r0t d|dk	r@t d|dk	rPt d| dd¡}t| ||d	}d|krt ||||¡S |S dS )
a  Open a bzip2-compressed file in binary or text mode.

    The filename argument can be an actual filename (a str, bytes, or
    PathLike object), or an existing file object to read from or write
    to.

    The mode argument can be "r", "rb", "w", "wb", "x", "xb", "a" or
    "ab" for binary mode, or "rt", "wt", "xt" or "at" for text mode.
    The default mode is "rb", and the default compresslevel is 9.

    For binary mode, this function is equivalent to the BZ2File
    constructor: BZ2File(filename, mode, compresslevel). In this case,
    the encoding, errors and newline arguments must not be provided.

    For text mode, a BZ2File object is created, and wrapped in an
    io.TextIOWrapper instance with the specified encoding, error
    handling behavior, and line ending(s).

    ÚtrM   zInvalid mode: %rNz0Argument 'encoding' not supported in binary modez.Argument 'errors' not supported in binary modez/Argument 'newline' not supported in binary moder   )r7   )r    Úreplacer   r/   ÚTextIOWrapper)r4   r5   r7   ÚencodingÚerrorsÚnewlineÚbz_modeÚbinary_filer:   r:   r;   r     s    c             C   s   t |}| | ¡| ¡  S )z¤Compress a block of data.

    compresslevel, if given, must be a number between 1 and 9.

    For incremental compression, use a BZ2Compressor object instead.
    )r   r   r>   )rT   r7   Úcompr:   r:   r;   r   F  s    c             C   sj   g }xZ| r^t  }y| | ¡}W n tk
r<   |r6P n Y nX | |¡ |jsVtd|j} qW d |¡S )zjDecompress a block of data.

    For incremental decompression, use a BZ2Decompressor object instead.
    zACompressed data ended before the end-of-stream marker was reachedó    )r   r   r.   ÚappendÚeofr    Úunused_dataÚjoin)rT   ÚresultsÚdecompÚresr:   r:   r;   r   Q  s    

)r   r   NNN)r   )ra   Ú__all__Ú
__author__Úbuiltinsr   r)   r/   r'   r   r,   Ú	threadingr   Ú_bz2r   r   r   r!   r"   rV   r   r   r   r:   r:   r:   r;   Ú<module>   s(   
   
(
ã            ,   @   s¢  d Z ddlZddlZyddlT W n. ek
rN Z zede W ddZ[X Y nX ddddd	d
dddddddddddddddddddddd d!d"d#d$d%d&d'd(d)d*d+d,d-d.d/d0g,Zd1Zd2 Z	Z
d3 ZZd4Zd5Zejd6kràe
 ZZeZne ZZeZe
ZeZeZeZG d7d deZG d8d dZG d9d deZG d:d; d;eZG d<d deZG d=d> d>eZG d?d deZG d@d deZ G dAd dZ!G dBd dZ"d\dFdZ#d]dGdZ$dHd Z%dId  Z&dJd! Z'dKd" Z(dLd# Z)dMd$ Z*d^dNd'Z+d_dOd(Z,dPdQ Z-dRdS Z.y4e/dDZ0e/dTZ1e/dUZ2e/dVZ3e/dWZ4e/dXZ5W n. e6k
r`   dZ0dZ1dZ2dZ3dZ4dZ5Y nX dZ7e7rtddl8Z8e9dYkre$ej:dZd[e_:e$ej;d[dZe_;dS )`z codecs -- Python Codec Registry, API and helpers.


Written by Marc-Andre Lemburg (mal@lemburg.com).

(c) Copyright CNRI, All Rights Reserved. NO WARRANTY.

é    N)Ú*z%Failed to load the builtin codecs: %sÚregisterÚlookupÚopenÚEncodedFileÚBOMÚBOM_BEÚBOM_LEÚBOM32_BEÚBOM32_LEÚBOM64_BEÚBOM64_LEÚBOM_UTF8Ú	BOM_UTF16ÚBOM_UTF16_LEÚBOM_UTF16_BEÚ	BOM_UTF32ÚBOM_UTF32_LEÚBOM_UTF32_BEÚ	CodecInfoÚCodecÚIncrementalEncoderÚIncrementalDecoderÚStreamReaderÚStreamWriterÚStreamReaderWriterÚStreamRecoderÚ
getencoderÚ
getdecoderÚgetincrementalencoderÚgetincrementaldecoderÚ	getreaderÚ	getwriterÚencodeÚdecodeÚ
iterencodeÚ
iterdecodeÚstrict_errorsÚignore_errorsÚreplace_errorsÚxmlcharrefreplace_errorsÚbackslashreplace_errorsÚnamereplace_errorsÚregister_errorÚlookup_errors   ï»¿s   ÿþs   þÿs   ÿþ  s     þÿÚlittlec               @   s,   e Zd ZdZdZd	ddddZdd ZdS )
r   z0Codec details when looking up the codec registryTN)Ú_is_text_encodingc      
      C   sP   t  | ||||f¡}	||	_||	_||	_||	_||	_||	_||	_|d k	rL||	_	|	S )N)
ÚtupleÚ__new__Únamer#   r$   ÚincrementalencoderÚincrementaldecoderÚstreamwriterÚstreamreaderr0   )
Úclsr#   r$   r7   r6   r4   r5   r3   r0   Úself© r:   úD:\Python\lib\codecs.pyr2   ^   s    zCodecInfo.__new__c             C   s   d| j j| j j| jt| f S )Nz%<%s.%s object for encoding %s at %#x>)Ú	__class__Ú
__module__Ú__qualname__r3   Úid)r9   r:   r:   r;   Ú__repr__m   s    zCodecInfo.__repr__)NNNNN)Ú__name__r=   r>   Ú__doc__r0   r2   r@   r:   r:   r:   r;   r   S   s    c               @   s$   e Zd ZdZdddZd	ddZdS )
r   a9   Defines the interface for stateless encoders/decoders.

        The .encode()/.decode() methods may use different error
        handling schemes by providing the errors argument. These
        string values are predefined:

         'strict' - raise a ValueError error (or a subclass)
         'ignore' - ignore the character and continue with the next
         'replace' - replace with a suitable replacement character;
                    Python will use the official U+FFFD REPLACEMENT
                    CHARACTER for the builtin Unicode codecs on
                    decoding and '?' on encoding.
         'surrogateescape' - replace with private code points U+DCnn.
         'xmlcharrefreplace' - Replace with the appropriate XML
                               character reference (only for encoding).
         'backslashreplace'  - Replace with backslashed escape sequences.
         'namereplace'       - Replace with \N{...} escape sequences
                               (only for encoding).

        The set of allowed values can be extended via register_error.

    Ústrictc             C   s   t dS )a#   Encodes the object input and returns a tuple (output
            object, length consumed).

            errors defines the error handling to apply. It defaults to
            'strict' handling.

            The method may not store state in the Codec instance. Use
            StreamWriter for codecs which have to keep state in order to
            make encoding efficient.

            The encoder must be able to handle zero length input and
            return an empty object of the output object type in this
            situation.

        N)ÚNotImplementedError)r9   ÚinputÚerrorsr:   r:   r;   r#      s    zCodec.encodec             C   s   t dS )aò   Decodes the object input and returns a tuple (output
            object, length consumed).

            input must be an object which provides the bf_getreadbuf
            buffer slot. Python strings, buffer objects and memory
            mapped files are examples of objects providing this slot.

            errors defines the error handling to apply. It defaults to
            'strict' handling.

            The method may not store state in the Codec instance. Use
            StreamReader for codecs which have to keep state in order to
            make decoding efficient.

            The decoder must be able to handle zero length input and
            return an empty object of the output object type in this
            situation.

        N)rD   )r9   rE   rF   r:   r:   r;   r$      s    zCodec.decodeN)rC   )rC   )rA   r=   r>   rB   r#   r$   r:   r:   r:   r;   r   r   s   
c               @   s<   e Zd ZdZdddZdddZdd	 Zd
d Zdd ZdS )r   zè
    An IncrementalEncoder encodes an input in multiple steps. The input can
    be passed piece by piece to the encode() method. The IncrementalEncoder
    remembers the state of the encoding process between calls to encode().
    rC   c             C   s   || _ d| _dS )zô
        Creates an IncrementalEncoder instance.

        The IncrementalEncoder may use different error handling schemes by
        providing the errors keyword argument. See the module docstring
        for a list of possible values.
        Ú N)rF   Úbuffer)r9   rF   r:   r:   r;   Ú__init__º   s    zIncrementalEncoder.__init__Fc             C   s   t dS )zA
        Encodes input and returns the resulting object.
        N)rD   )r9   rE   Úfinalr:   r:   r;   r#   Å   s    zIncrementalEncoder.encodec             C   s   dS )z:
        Resets the encoder to the initial state.
        Nr:   )r9   r:   r:   r;   ÚresetË   s    zIncrementalEncoder.resetc             C   s   dS )z:
        Return the current state of the encoder.
        r   r:   )r9   r:   r:   r;   ÚgetstateÐ   s    zIncrementalEncoder.getstatec             C   s   dS )zl
        Set the current state of the encoder. state must have been
        returned by getstate().
        Nr:   )r9   Ústater:   r:   r;   ÚsetstateÖ   s    zIncrementalEncoder.setstateN)rC   )F)	rA   r=   r>   rB   rI   r#   rK   rL   rN   r:   r:   r:   r;   r   ´   s   

c               @   sD   e Zd ZdZdddZdd Zddd	Zd
d Zdd Zdd Z	dS )ÚBufferedIncrementalEncoderzÀ
    This subclass of IncrementalEncoder can be used as the baseclass for an
    incremental encoder if the encoder must keep some of the output in a
    buffer between calls to encode().
    rC   c             C   s   t  | |¡ d| _d S )NrG   )r   rI   rH   )r9   rF   r:   r:   r;   rI   â   s    z#BufferedIncrementalEncoder.__init__c             C   s   t d S )N)rD   )r9   rE   rF   rJ   r:   r:   r;   Ú_buffer_encodeç   s    z)BufferedIncrementalEncoder._buffer_encodeFc             C   s0   | j | }|  || j|¡\}}||d  | _ |S )N)rH   rP   rF   )r9   rE   rJ   ÚdataÚresultÚconsumedr:   r:   r;   r#   ì   s    
z!BufferedIncrementalEncoder.encodec             C   s   t  | ¡ d| _d S )NrG   )r   rK   rH   )r9   r:   r:   r;   rK   ô   s    
z BufferedIncrementalEncoder.resetc             C   s
   | j pdS )Nr   )rH   )r9   r:   r:   r;   rL   ø   s    z#BufferedIncrementalEncoder.getstatec             C   s   |pd| _ d S )NrG   )rH   )r9   rM   r:   r:   r;   rN   û   s    z#BufferedIncrementalEncoder.setstateN)rC   )F)
rA   r=   r>   rB   rI   rP   r#   rK   rL   rN   r:   r:   r:   r;   rO   Ü   s   

rO   c               @   s<   e Zd ZdZdddZdddZdd	 Zd
d Zdd ZdS )r   zè
    An IncrementalDecoder decodes an input in multiple steps. The input can
    be passed piece by piece to the decode() method. The IncrementalDecoder
    remembers the state of the decoding process between calls to decode().
    rC   c             C   s
   || _ dS )zó
        Create an IncrementalDecoder instance.

        The IncrementalDecoder may use different error handling schemes by
        providing the errors keyword argument. See the module docstring
        for a list of possible values.
        N)rF   )r9   rF   r:   r:   r;   rI     s    zIncrementalDecoder.__init__Fc             C   s   t dS )z@
        Decode input and returns the resulting object.
        N)rD   )r9   rE   rJ   r:   r:   r;   r$     s    zIncrementalDecoder.decodec             C   s   dS )z9
        Reset the decoder to the initial state.
        Nr:   )r9   r:   r:   r;   rK     s    zIncrementalDecoder.resetc             C   s   dS )a	  
        Return the current state of the decoder.

        This must be a (buffered_input, additional_state_info) tuple.
        buffered_input must be a bytes object containing bytes that
        were passed to decode() that have not yet been converted.
        additional_state_info must be a non-negative integer
        representing the state of the decoder WITHOUT yet having
        processed the contents of buffered_input.  In the initial state
        and after reset(), getstate() must return (b"", 0).
        )ó    r   r:   )r9   r:   r:   r;   rL     s    zIncrementalDecoder.getstatec             C   s   dS )z¶
        Set the current state of the decoder.

        state must have been returned by getstate().  The effect of
        setstate((b"", 0)) must be equivalent to reset().
        Nr:   )r9   rM   r:   r:   r;   rN   '  s    zIncrementalDecoder.setstateN)rC   )F)	rA   r=   r>   rB   rI   r$   rK   rL   rN   r:   r:   r:   r;   r   þ   s   


c               @   sD   e Zd ZdZdddZdd Zddd	Zd
d Zdd Zdd Z	dS )ÚBufferedIncrementalDecoderz®
    This subclass of IncrementalDecoder can be used as the baseclass for an
    incremental decoder if the decoder must be able to handle incomplete
    byte sequences.
    rC   c             C   s   t  | |¡ d| _d S )NrT   )r   rI   rH   )r9   rF   r:   r:   r;   rI   5  s    z#BufferedIncrementalDecoder.__init__c             C   s   t d S )N)rD   )r9   rE   rF   rJ   r:   r:   r;   Ú_buffer_decode:  s    z)BufferedIncrementalDecoder._buffer_decodeFc             C   s0   | j | }|  || j|¡\}}||d  | _ |S )N)rH   rV   rF   )r9   rE   rJ   rQ   rR   rS   r:   r:   r;   r$   ?  s    
z!BufferedIncrementalDecoder.decodec             C   s   t  | ¡ d| _d S )NrT   )r   rK   rH   )r9   r:   r:   r;   rK   G  s    
z BufferedIncrementalDecoder.resetc             C   s
   | j dfS )Nr   )rH   )r9   r:   r:   r;   rL   K  s    z#BufferedIncrementalDecoder.getstatec             C   s   |d | _ d S )Nr   )rH   )r9   rM   r:   r:   r;   rN   O  s    z#BufferedIncrementalDecoder.setstateN)rC   )F)
rA   r=   r>   rB   rI   rV   r$   rK   rL   rN   r:   r:   r:   r;   rU   /  s   

rU   c               @   sT   e Zd ZdddZdd Zdd Zdd	 ZdddZefddZ	dd Z
dd ZdS )r   rC   c             C   s   || _ || _dS )aw   Creates a StreamWriter instance.

            stream must be a file-like object open for writing.

            The StreamWriter may use different error handling
            schemes by providing the errors keyword argument. These
            parameters are predefined:

             'strict' - raise a ValueError (or a subclass)
             'ignore' - ignore the character and continue with the next
             'replace'- replace with a suitable replacement character
             'xmlcharrefreplace' - Replace with the appropriate XML
                                   character reference.
             'backslashreplace'  - Replace with backslashed escape
                                   sequences.
             'namereplace'       - Replace with \N{...} escape sequences.

            The set of allowed parameter values can be extended via
            register_error.
        N)ÚstreamrF   )r9   rW   rF   r:   r:   r;   rI   \  s    zStreamWriter.__init__c             C   s"   |   || j¡\}}| j |¡ dS )z> Writes the object's contents encoded to self.stream.
        N)r#   rF   rW   Úwrite)r9   ÚobjectrQ   rS   r:   r:   r;   rX   u  s    zStreamWriter.writec             C   s   |   d |¡¡ dS )z[ Writes the concatenated list of strings to the stream
            using .write().
        rG   N)rX   Újoin)r9   Úlistr:   r:   r;   Ú
writelines|  s    zStreamWriter.writelinesc             C   s   dS )a5   Flushes and resets the codec buffers used for keeping state.

            Calling this method should ensure that the data on the
            output is put into a clean state, that allows appending
            of new fresh data without having to rescan the whole
            stream to recover state.

        Nr:   )r9   r:   r:   r;   rK     s    
zStreamWriter.resetr   c             C   s*   | j  ||¡ |dkr&|dkr&|  ¡  d S )Nr   )rW   ÚseekrK   )r9   ÚoffsetÚwhencer:   r:   r;   r]     s    zStreamWriter.seekc             C   s   || j |S )z? Inherit all other methods from the underlying stream.
        )rW   )r9   r3   Úgetattrr:   r:   r;   Ú__getattr__  s    zStreamWriter.__getattr__c             C   s   | S )Nr:   )r9   r:   r:   r;   Ú	__enter__  s    zStreamWriter.__enter__c             C   s   | j  ¡  d S )N)rW   Úclose)r9   ÚtypeÚvalueÚtbr:   r:   r;   Ú__exit__  s    zStreamWriter.__exit__N)rC   )r   )rA   r=   r>   rI   rX   r\   rK   r]   r`   ra   rb   rg   r:   r:   r:   r;   r   Z  s   

c               @   s   e Zd ZeZdddZd ddZd!dd	Zd"ddZd#ddZ	dd Z
d$ddZdd Zdd ZefddZdd Zdd Zd
S )%r   rC   c             C   s.   || _ || _d| _|  ¡ | _| j| _d| _dS )a   Creates a StreamReader instance.

            stream must be a file-like object open for reading.

            The StreamReader may use different error handling
            schemes by providing the errors keyword argument. These
            parameters are predefined:

             'strict' - raise a ValueError (or a subclass)
             'ignore' - ignore the character and continue with the next
             'replace'- replace with a suitable replacement character
             'backslashreplace' - Replace with backslashed escape sequences;

            The set of allowed parameter values can be extended via
            register_error.
        rT   N)rW   rF   Ú
bytebufferÚcharbuffertypeÚ_empty_charbufferÚ
charbufferÚ
linebuffer)r9   rW   rF   r:   r:   r;   rI   §  s    
zStreamReader.__init__c             C   s   t d S )N)rD   )r9   rE   rF   r:   r:   r;   r$   À  s    zStreamReader.decodeéÿÿÿÿFc          
   C   sL  | j r| j | j ¡| _d| _ |dk r(|}xæ|dkrBt| j|krBP |dk rV| j ¡ }n| j |¡}| j| }|srP y|  || j	¡\}}W n` t
k
rè } zB|rÖ|  |d|j | j	¡\}}|jdd}	t|	dkrØ n W dd}~X Y nX ||d | _|  j|7  _|s*P q*W |dk r*| j}
| j| _n| jd| }
| j|d | _|
S )aì   Decodes data from the stream self.stream and returns the
            resulting object.

            chars indicates the number of decoded code points or bytes to
            return. read() will never return more data than requested,
            but it might return less, if there is not enough available.

            size indicates the approximate maximum number of decoded
            bytes or code points to read for decoding. The decoder
            can modify this setting as appropriate. The default value
            -1 indicates to read and decode as much as possible.  size
            is intended to prevent having to decode huge files in one
            step.

            If firstline is true, and a UnicodeDecodeError happens
            after the first line terminator in the input only the first line
            will be returned, the rest of the input will be kept until the
            next call to read().

            The method should use a greedy read strategy, meaning that
            it should read as much data as is allowed within the
            definition of the encoding and the given size, e.g.  if
            optional encoding endings or state markers are available
            on the stream, these should be read too.
        Nr   T)Úkeependsé   )rl   rj   rZ   rk   ÚlenrW   Úreadrh   r$   rF   ÚUnicodeDecodeErrorÚstartÚ
splitlines)r9   ÚsizeÚcharsÚ	firstlineÚnewdatarQ   ÚnewcharsÚdecodedbytesÚexcÚlinesrR   r:   r:   r;   rq   Ã  sD    


zStreamReader.readNTc       	      C   sÔ  | j rP| j d }| j d= t| j dkr8| j d | _d| _ |sL|jddd }|S |pVd}| j}xn| j|dd}|r®t|tr| d	¡st|t	r®| d
¡r®|| jddd7 }||7 }|jdd}|rt|dkr:|d }|d= t|dkr|d  | j7  < || _ d| _n|d | j | _|s8|jddd }P |d }|d jddd }||kr| j 
|dd ¡| j | _|r|}n|}P |r|dk	r¼|rº|sº|jddd }P |dk rb|d9 }qbW |S )z± Read one line from the input stream and return the
            decoded data.

            size, if given, is passed as size argument to the
            read() method.

        r   ro   NF)rn   éH   T)rw   úó   )ru   rv   rm   i@  é   )rl   rp   rk   rt   rj   rq   Ú
isinstanceÚstrÚendswithÚbytesrZ   )	r9   ru   rn   ÚlineÚreadsizerQ   r|   Úline0withendÚline0withoutendr:   r:   r;   Úreadline  s^    


zStreamReader.readlinec             C   s   |   ¡ }| |¡S )aS   Read all lines available on the input stream
            and return them as a list.

            Line breaks are implemented using the codec's decoder
            method and are included in the list entries.

            sizehint, if given, is ignored since there is no efficient
            way to finding the true end-of-line.

        )rq   rt   )r9   Úsizehintrn   rQ   r:   r:   r;   Ú	readlines^  s    zStreamReader.readlinesc             C   s   d| _ | j| _d| _dS )zã Resets the codec buffers used for keeping state.

            Note that no stream repositioning should take place.
            This method is primarily intended to be able to recover
            from decoding errors.

        rT   N)rh   rj   rk   rl   )r9   r:   r:   r;   rK   m  s    	zStreamReader.resetr   c             C   s   | j  ||¡ |  ¡  dS )zp Set the input stream's current position.

            Resets the codec buffers used for keeping state.
        N)rW   r]   rK   )r9   r^   r_   r:   r:   r;   r]   z  s    zStreamReader.seekc             C   s   |   ¡ }|r|S tdS )z4 Return the next decoded line from the input stream.N)r   ÚStopIteration)r9   r   r:   r:   r;   Ú__next__  s    zStreamReader.__next__c             C   s   | S )Nr:   )r9   r:   r:   r;   Ú__iter__  s    zStreamReader.__iter__c             C   s   || j |S )z? Inherit all other methods from the underlying stream.
        )rW   )r9   r3   r`   r:   r:   r;   ra     s    zStreamReader.__getattr__c             C   s   | S )Nr:   )r9   r:   r:   r;   rb     s    zStreamReader.__enter__c             C   s   | j  ¡  d S )N)rW   rc   )r9   rd   re   rf   r:   r:   r;   rg     s    zStreamReader.__exit__)rC   )rC   )rm   rm   F)NT)NT)r   )rA   r=   r>   r   ri   rI   r$   rq   r   r   rK   r]   r   r   r`   ra   rb   rg   r:   r:   r:   r;   r   £  s   


P
K

c               @   s   e Zd ZdZdZd!ddZd"ddZd#d
dZd$ddZdd Z	dd Z
dd Zdd Zdd Zd%ddZefddZdd Zdd  Zd	S )&r   a   StreamReaderWriter instances allow wrapping streams which
        work in both read and write modes.

        The design is such that one can use the factory functions
        returned by the codec.lookup() function to construct the
        instance.

    ÚunknownrC   c             C   s(   || _ |||| _|||| _|| _dS )aR   Creates a StreamReaderWriter instance.

            stream must be a Stream-like object.

            Reader, Writer must be factory functions or classes
            providing the StreamReader, StreamWriter interface resp.

            Error handling is done in the same way as defined for the
            StreamWriter/Readers.

        N)rW   ÚreaderÚwriterrF   )r9   rW   ÚReaderÚWriterrF   r:   r:   r;   rI   ©  s    zStreamReaderWriter.__init__rm   c             C   s   | j  |¡S )N)r   rq   )r9   ru   r:   r:   r;   rq   »  s    zStreamReaderWriter.readNc             C   s   | j  |¡S )N)r   r   )r9   ru   r:   r:   r;   r   ¿  s    zStreamReaderWriter.readlinec             C   s   | j  |¡S )N)r   r   )r9   r   r:   r:   r;   r   Ã  s    zStreamReaderWriter.readlinesc             C   s
   t | jS )z4 Return the next decoded line from the input stream.)Únextr   )r9   r:   r:   r;   r   Ç  s    zStreamReaderWriter.__next__c             C   s   | S )Nr:   )r9   r:   r:   r;   r   Ì  s    zStreamReaderWriter.__iter__c             C   s   | j  |¡S )N)r   rX   )r9   rQ   r:   r:   r;   rX   Ï  s    zStreamReaderWriter.writec             C   s   | j  |¡S )N)r   r\   )r9   r[   r:   r:   r;   r\   Ó  s    zStreamReaderWriter.writelinesc             C   s   | j  ¡  | j ¡  d S )N)r   rK   r   )r9   r:   r:   r;   rK   ×  s    
zStreamReaderWriter.resetr   c             C   s6   | j  ||¡ | j ¡  |dkr2|dkr2| j ¡  d S )Nr   )rW   r]   r   rK   r   )r9   r^   r_   r:   r:   r;   r]   Ü  s    
zStreamReaderWriter.seekc             C   s   || j |S )z? Inherit all other methods from the underlying stream.
        )rW   )r9   r3   r`   r:   r:   r;   ra   â  s    zStreamReaderWriter.__getattr__c             C   s   | S )Nr:   )r9   r:   r:   r;   rb   ë  s    zStreamReaderWriter.__enter__c             C   s   | j  ¡  d S )N)rW   rc   )r9   rd   re   rf   r:   r:   r;   rg   î  s    zStreamReaderWriter.__exit__)rC   )rm   )N)N)r   )rA   r=   r>   rB   ÚencodingrI   rq   r   r   r   r   rX   r\   rK   r]   r`   ra   rb   rg   r:   r:   r:   r;   r     s   	




c               @   s   e Zd ZdZdZdZdddZdddZd d
dZd!ddZ	dd Z
dd Zdd Zdd Zdd ZefddZdd Zdd Zd	S )"r   aB   StreamRecoder instances translate data from one encoding to another.

        They use the complete set of APIs returned by the
        codecs.lookup() function to implement their task.

        Data written to the StreamRecoder is first decoded into an
        intermediate format (depending on the "decode" codec) and then
        written to the underlying stream using an instance of the provided
        Writer class.

        In the other direction, data is read from the underlying stream using
        a Reader instance and then encoded and returned to the caller.

    r   rC   c             C   s4   || _ || _|| _|||| _|||| _|| _dS )aé   Creates a StreamRecoder instance which implements a two-way
            conversion: encode and decode work on the frontend (the
            data visible to .read() and .write()) while Reader and Writer
            work on the backend (the data in stream).

            You can use these objects to do transparent
            transcodings from e.g. latin-1 to utf-8 and back.

            stream must be a file-like object.

            encode and decode must adhere to the Codec interface; Reader and
            Writer must be factory functions or classes providing the
            StreamReader and StreamWriter interfaces resp.

            Error handling is done in the same way as defined for the
            StreamWriter/Readers.

        N)rW   r#   r$   r   r   rF   )r9   rW   r#   r$   r   r   rF   r:   r:   r;   rI     s    zStreamRecoder.__init__rm   c             C   s"   | j  |¡}|  || j¡\}}|S )N)r   rq   r#   rF   )r9   ru   rQ   Úbytesencodedr:   r:   r;   rq   #  s    zStreamRecoder.readNc             C   s6   |d kr| j  ¡ }n| j  |¡}|  || j¡\}}|S )N)r   r   r#   rF   )r9   ru   rQ   r   r:   r:   r;   r   )  s
    zStreamRecoder.readlinec             C   s(   | j  ¡ }|  || j¡\}}|jddS )NT)rn   )r   rq   r#   rF   rt   )r9   r   rQ   r   r:   r:   r;   r   2  s    
zStreamRecoder.readlinesc             C   s    t | j}|  || j¡\}}|S )z4 Return the next decoded line from the input stream.)r   r   r#   rF   )r9   rQ   r   r:   r:   r;   r   8  s    
zStreamRecoder.__next__c             C   s   | S )Nr:   )r9   r:   r:   r;   r   ?  s    zStreamRecoder.__iter__c             C   s   |   || j¡\}}| j |¡S )N)r$   rF   r   rX   )r9   rQ   Úbytesdecodedr:   r:   r;   rX   B  s    zStreamRecoder.writec             C   s(   d  |¡}|  || j¡\}}| j |¡S )NrG   )rZ   r$   rF   r   rX   )r9   r[   rQ   r   r:   r:   r;   r\   G  s    
zStreamRecoder.writelinesc             C   s   | j  ¡  | j ¡  d S )N)r   rK   r   )r9   r:   r:   r;   rK   M  s    
zStreamRecoder.resetc             C   s   || j |S )z? Inherit all other methods from the underlying stream.
        )rW   )r9   r3   r`   r:   r:   r;   ra   R  s    zStreamRecoder.__getattr__c             C   s   | S )Nr:   )r9   r:   r:   r;   rb   Y  s    zStreamRecoder.__enter__c             C   s   | j  ¡  d S )N)rW   rc   )r9   rd   re   rf   r:   r:   r;   rg   \  s    zStreamRecoder.__exit__)rC   )rm   )N)N)rA   r=   r>   rB   Údata_encodingÚfile_encodingrI   rq   r   r   r   r   rX   r\   rK   r`   ra   rb   rg   r:   r:   r:   r;   r   ó  s   


	
ÚrrC   ro   c             C   sV   |dk	rd|kr|d }t  | ||¡}|dkr2|S t|}t||j|j|}||_|S )a>   Open an encoded file using the given mode and return
        a wrapped version providing transparent encoding/decoding.

        Note: The wrapped version will only accept the object format
        defined by the codecs, i.e. Unicode objects for most builtin
        codecs. Output is also codec dependent and will usually be
        Unicode as well.

        Underlying encoded files are always opened in binary mode.
        The default file mode is 'r', meaning to open the file in read mode.

        encoding specifies the encoding which is to be used for the
        file.

        errors may be given to define the error handling. It defaults
        to 'strict' which causes ValueErrors to be raised in case an
        encoding error occurs.

        buffering has the same meaning as for the builtin open() API.
        It defaults to line buffered.

        The returned wrapped file object provides an extra attribute
        .encoding which allows querying the used encoding. This
        attribute is only available if an encoding was specified as
        parameter.

    NÚb)Úbuiltinsr   r   r   r7   r6   r   )ÚfilenameÚmoder   rF   Ú	bufferingÚfileÚinfoÚsrwr:   r:   r;   r   a  s    c             C   sF   |dkr|}t |}t |}t| |j|j|j|j|}||_||_|S )aÚ   Return a wrapped version of file which provides transparent
        encoding translation.

        Data written to the wrapped file is decoded according
        to the given data_encoding and then encoded to the underlying
        file using file_encoding. The intermediate data type
        will usually be Unicode but depends on the specified codecs.

        Bytes read from the file are decoded using file_encoding and then
        passed back to the caller encoded using data_encoding.

        If file_encoding is not given, it defaults to data_encoding.

        errors may be given to define the error handling. It defaults
        to 'strict' which causes ValueErrors to be raised in case an
        encoding error occurs.

        The returned wrapped file object provides two extra attributes
        .data_encoding and .file_encoding which reflect the given
        parameters of the same name. The attributes can be used for
        introspection by Python programs.

    N)r   r   r#   r$   r7   r6   r   r   )r    r   r   rF   Ú	data_infoÚ	file_infoÚsrr:   r:   r;   r     s    c             C   s
   t | jS )z Lookup up the codec for the given encoding and return
        its encoder function.

        Raises a LookupError in case the encoding cannot be found.

    )r   r#   )r   r:   r:   r;   r   ±  s    c             C   s
   t | jS )z Lookup up the codec for the given encoding and return
        its decoder function.

        Raises a LookupError in case the encoding cannot be found.

    )r   r$   )r   r:   r:   r;   r   »  s    c             C   s   t | j}|dkrt| |S )z÷ Lookup up the codec for the given encoding and return
        its IncrementalEncoder class or factory function.

        Raises a LookupError in case the encoding cannot be found
        or the codecs doesn't provide an incremental encoder.

    N)r   r4   ÚLookupError)r   Úencoderr:   r:   r;   r   Å  s    	
c             C   s   t | j}|dkrt| |S )z÷ Lookup up the codec for the given encoding and return
        its IncrementalDecoder class or factory function.

        Raises a LookupError in case the encoding cannot be found
        or the codecs doesn't provide an incremental decoder.

    N)r   r5   r¦   )r   Údecoderr:   r:   r;   r    Ó  s    	
c             C   s
   t | jS )z´ Lookup up the codec for the given encoding and return
        its StreamReader class or factory function.

        Raises a LookupError in case the encoding cannot be found.

    )r   r7   )r   r:   r:   r;   r!   á  s    c             C   s
   t | jS )z´ Lookup up the codec for the given encoding and return
        its StreamWriter class or factory function.

        Raises a LookupError in case the encoding cannot be found.

    )r   r6   )r   r:   r:   r;   r"   ë  s    c             k   sL   t ||f|}x | D ]}| |¡}|r|V  qW | dd¡}|rH|V  dS )z¿
    Encoding iterator.

    Encodes the input strings from the iterator using an IncrementalEncoder.

    errors and kwargs are passed through to the IncrementalEncoder
    constructor.
    rG   TN)r   r#   )Úiteratorr   rF   Úkwargsr§   rE   Úoutputr:   r:   r;   r%   õ  s    	


c             k   sL   t ||f|}x | D ]}| |¡}|r|V  qW | dd¡}|rH|V  dS )z¿
    Decoding iterator.

    Decodes the input strings from the iterator using an IncrementalDecoder.

    errors and kwargs are passed through to the IncrementalDecoder
    constructor.
    rT   TN)r    r$   )r©   r   rF   rª   r¨   rE   r«   r:   r:   r;   r&     s    	


c             C   s   dd | D S )z make_identity_dict(rng) -> dict

        Return a dictionary where elements of the rng sequence are
        mapped to themselves.

    c             S   s   i | ]
}||qS r:   r:   )Ú.0Úir:   r:   r;   ú
<dictcomp>#  s    z&make_identity_dict.<locals>.<dictcomp>r:   )Úrngr:   r:   r;   Úmake_identity_dict  s    r°   c             C   s8   i }x.|   ¡ D ]"\}}||kr(|||< qd||< qW |S )a   Creates an encoding map from a decoding map.

        If a target mapping in the decoding map occurs multiple
        times, then that target is mapped to None (undefined mapping),
        causing an exception when encountered by the charmap codec
        during translation.

        One example where this happens is cp875.py which decodes
        multiple character to \u001a.

    N)Úitems)Údecoding_mapÚmÚkÚvr:   r:   r;   Úmake_encoding_map%  s    
r¶   ÚignoreÚreplaceÚxmlcharrefreplaceÚbackslashreplaceÚnamereplaceÚ__main__zlatin-1zutf-8)r   NrC   ro   )NrC   )rC   )rC   )<rB   r   ÚsysÚ_codecsÚImportErrorÚwhyÚSystemErrorÚ__all__r   r	   r   r   r   r   r   Ú	byteorderr   r   r   r   r
   r   r   r1   r   r   rY   r   rO   r   rU   r   r   r   r   r   r   r   r   r   r    r!   r"   r%   r&   r°   r¶   r.   r'   r(   r)   r*   r+   r,   r¦   Ú_falseÚ	encodingsrA   ÚstdoutÚstdinr:   r:   r:   r;   Ú<module>   s   

B("1+I zWn
*
&








ã            	   @   sú  d Z ddddddddd	g	Zd
dlZd
dlmZmZ d
dlm	Z
 d
dlZd
dlZd
dlmZ d
dlmZmZmZ d
dlmZ yd
dlmZ W n ek
r   Y nX ej  e¡ yd
dlm!Z! W n ek
rÐ   Y nX dd Z"G dd dej#Z$G dd dej%Z&G dd dej'Z(G dd de)Z*G dd de+Z,yd
dlm,Z, W n ek
rV   Y nX i Z-dddd d!dZ.d"d# Z/yd
d$lm/Z/ W n ek
r   Y nX G d%d de+Z0G d&d	 d	ej1Z2G d'd dej1Z3G d(d dejZ4G d)d dej5Z6dS )*a?  This module implements specialized container datatypes providing
alternatives to Python's general purpose built-in containers, dict,
list, set, and tuple.

* namedtuple   factory function for creating tuple subclasses with named fields
* deque        list-like container with fast appends and pops on either end
* ChainMap     dict-like class for creating a single view of multiple mappings
* Counter      dict subclass for counting hashable objects
* OrderedDict  dict subclass that remembers the order entries were added
* defaultdict  dict subclass that calls a factory function to supply missing values
* UserDict     wrapper around dictionary objects for easier dict subclassing
* UserList     wrapper around list objects for easier list subclassing
* UserString   wrapper around string objects for easier string subclassing

ÚdequeÚdefaultdictÚ
namedtupleÚUserDictÚUserListÚ
UserStringÚCounterÚOrderedDictÚChainMapé    N)Ú
itemgetterÚeq)Ú	iskeyword)Úproxy)ÚrepeatÚchainÚstarmap)Úrecursive_repr)r   )r   c             C   sR   | t jkr:tt | }dd l}|jdtdd |t | < |S tdtd| d S )Nr
   zUsing or importing the ABCs from 'collections' instead of from 'collections.abc' is deprecated, and in 3.8 it will stop workingé   )Ú
stacklevelzmodule z has no attribute )	Ú_collections_abcÚ__all__ÚgetattrÚwarningsÚwarnÚDeprecationWarningÚglobalsÚAttributeErrorÚ__name__)ÚnameÚobjr   © r    ú%D:\Python\lib\collections\__init__.pyÚ__getattr__*   s    



r"   c               @   s   e Zd Zdd ZdS )Ú_OrderedDictKeysViewc             c   s   t | jE d H  d S )N)ÚreversedÚ_mapping)Úselfr    r    r!   Ú__reversed__?   s    z!_OrderedDictKeysView.__reversed__N)r   Ú
__module__Ú__qualname__r'   r    r    r    r!   r#   =   s   r#   c               @   s   e Zd Zdd ZdS )Ú_OrderedDictItemsViewc             c   s(   x"t | jD ]}|| j| fV  qW d S )N)r$   r%   )r&   Úkeyr    r    r!   r'   D   s    z"_OrderedDictItemsView.__reversed__N)r   r(   r)   r'   r    r    r    r!   r*   B   s   r*   c               @   s   e Zd Zdd ZdS )Ú_OrderedDictValuesViewc             c   s$   xt | jD ]}| j| V  qW d S )N)r$   r%   )r&   r+   r    r    r!   r'   J   s    z#_OrderedDictValuesView.__reversed__N)r   r(   r)   r'   r    r    r    r!   r,   H   s   r,   c               @   s   e Zd ZdZdS )Ú_Link)ÚprevÚnextr+   Ú__weakref__N)r   r(   r)   Ú	__slots__r    r    r    r!   r-   N   s   r-   c               @   sè   e Zd ZdZdd ZejeefddZej	fddZ	dd	 Z
d
d Zdd Zd*ddZd+ddZdd Zejj ZZdd Zdd Zdd ZejjZe ZefddZd,ddZe d d! Zd"d# Zd$d% Ze d-d&d'Z!d(d) Z"dS ).r   z)Dictionary that remembers insertion orderc              O   s   | st d| ^}} t| dkr0t dt|  y
|j W n> tk
rx   t |_t|j |_}| |_|_i |_	Y nX |j
| | dS )zInitialize an ordered dictionary.  The signature is the same as
        regular dictionaries.  Keyword argument order is preserved.
        z?descriptor '__init__' of 'OrderedDict' object needs an argumenté   z$expected at most 1 arguments, got %dN)Ú	TypeErrorÚlenÚ_OrderedDict__rootr   r-   Ú_OrderedDict__hardrootÚ_proxyr.   r/   Ú_OrderedDict__mapÚ_OrderedDict__update)ÚargsÚkwdsr&   Úrootr    r    r!   Ú__init__`   s    
zOrderedDict.__init__c       	      C   sZ   || krJ|  | j |< }| j}|j}|||  |_|_|_||_|||_|| || dS )z!od.__setitem__(i, y) <==> od[i]=yN)r8   r5   r.   r/   r+   )	r&   r+   ÚvalueZdict_setitemr   ZLinkÚlinkr<   Úlastr    r    r!   Ú__setitem__s   s    
zOrderedDict.__setitem__c             C   s>   || | | j  |¡}|j}|j}||_||_d|_d|_dS )z od.__delitem__(y) <==> del od[y]N)r8   Úpopr.   r/   )r&   r+   Zdict_delitemr?   Ú	link_prevÚ	link_nextr    r    r!   Ú__delitem__   s    
zOrderedDict.__delitem__c             c   s,   | j }|j}x||k	r&|jV  |j}qW dS )zod.__iter__() <==> iter(od)N)r5   r/   r+   )r&   r<   Úcurrr    r    r!   Ú__iter__   s
    
zOrderedDict.__iter__c             c   s,   | j }|j}x||k	r&|jV  |j}qW dS )z#od.__reversed__() <==> reversed(od)N)r5   r.   r+   )r&   r<   rF   r    r    r!   r'      s
    
zOrderedDict.__reversed__c             C   s*   | j }| |_|_| j ¡  t | ¡ dS )z.od.clear() -> None.  Remove all items from od.N)r5   r.   r/   r8   ÚclearÚdict)r&   r<   r    r    r!   rH       s    
zOrderedDict.clearTc             C   sj   | st d| j}|r0|j}|j}||_||_n|j}|j}||_||_|j}| j|= t | |¡}||fS )zRemove and return a (key, value) pair from the dictionary.

        Pairs are returned in LIFO order if last is true or FIFO order if false.
        zdictionary is empty)ÚKeyErrorr5   r.   r/   r+   r8   rI   rB   )r&   r@   r<   r?   rC   rD   r+   r>   r    r    r!   Úpopitem§   s     zOrderedDict.popitemc       	      C   st   | j | }|j}|j}|j}||_||_| j}|rR|j}||_||_||_||_n|j}||_||_||_||_dS )zMove an existing element to the end (or beginning if last is false).

        Raise KeyError if the element does not exist.
        N)r8   r.   r/   r5   )	r&   r+   r@   r?   rC   rD   Z	soft_linkr<   Úfirstr    r    r!   Úmove_to_end¾   s$    
zOrderedDict.move_to_endc             C   sV   t j}t| d }|| j}||| jd 7 }||| j| 7 }||| j| 7 }|S )Nr2   r   )Ú_sysÚ	getsizeofr4   Ú__dict__r8   r6   r5   )r&   ÚsizeofÚnÚsizer    r    r!   Ú
__sizeof__×   s    
zOrderedDict.__sizeof__c             C   s   t | S )z:D.keys() -> a set-like object providing a view on D's keys)r#   )r&   r    r    r!   Úkeysâ   s    zOrderedDict.keysc             C   s   t | S )z<D.items() -> a set-like object providing a view on D's items)r*   )r&   r    r    r!   Úitemsæ   s    zOrderedDict.itemsc             C   s   t | S )z6D.values() -> an object providing a view on D's values)r,   )r&   r    r    r!   Úvaluesê   s    zOrderedDict.valuesc             C   s0   || kr| | }| |= |S || j kr,t||S )z²od.pop(k[,d]) -> v, remove specified key and return the corresponding
        value.  If key is not found, d is returned if given, otherwise KeyError
        is raised.

        )Ú_OrderedDict__markerrJ   )r&   r+   ÚdefaultÚresultr    r    r!   rB   ò   s    
zOrderedDict.popNc             C   s   || kr| | S || |< |S )zInsert key with a value of default if key is not in the dictionary.

        Return the value for key if key is in the dictionary, else default.
        r    )r&   r+   rY   r    r    r!   Ú
setdefault   s    zOrderedDict.setdefaultc             C   s*   | sd| j jf S d| j jt|  ¡ f S )zod.__repr__() <==> repr(od)z%s()z%s(%r))Ú	__class__r   ÚlistrV   )r&   r    r    r!   Ú__repr__
  s    zOrderedDict.__repr__c             C   sH   t |  ¡ }xt t D ]}| |d¡ qW | jd|p8ddt|  ¡ fS )z%Return state information for picklingNr    )ÚvarsÚcopyr   rB   r\   ÚiterrV   )r&   Ú	inst_dictÚkr    r    r!   Ú
__reduce__  s    zOrderedDict.__reduce__c             C   s
   |   | ¡S )z!od.copy() -> a shallow copy of od)r\   )r&   r    r    r!   r`     s    zOrderedDict.copyc             C   s    |  }x|D ]}|||< qW |S )zYCreate a new ordered dictionary with keys from iterable and values set to value.
        r    )ÚclsÚiterabler>   r&   r+   r    r    r!   Úfromkeys  s    
zOrderedDict.fromkeysc             C   s2   t |tr&t | |¡o$ttt| |S t | |¡S )zod.__eq__(y) <==> od==y.  Comparison to another OD is order-sensitive
        while comparison to a regular mapping is order-insensitive.

        )Ú
isinstancer   rI   Ú__eq__ÚallÚmapÚ_eq)r&   Úotherr    r    r!   ri   %  s    
zOrderedDict.__eq__)T)T)N)N)#r   r(   r)   Ú__doc__r=   rI   rA   r7   r-   rE   rG   r'   rH   rK   rM   rT   r   ÚMutableMappingÚupdater9   rU   rV   rW   Ú__ne__ÚobjectrX   rB   r[   Ú_recursive_reprr^   rd   r`   Úclassmethodrg   ri   r    r    r    r!   r   Q   s0   		

	

)r   F)ÚrenameÚdefaultsÚmodulec               s¸  t tr dd¡ ¡ tttt t| ¡} |rt }xNt	D ]B\}}| 
¡ rtt|st| d¡st||krd| |< | |¡ qJW xR| g D ]D}t|tk	r´td| 
¡ sÊtd|t|rtd|qW t }xND ]F}| d¡r|std|||kr,td|| |¡ qðW i }|d	k	rt|}t|tkrjtd
tttttt|}tttjtt dd¡dd }	dd dd D ¡ d tjt d|	 d|	 d}
d|  d}t|
| |d }d|  d|	 d|_|d	k	r6||_t fdd}d|  d|j_fdd }d!|  d"|_fd#d$}d%d& }d'd( }x.||j||||fD ]}|  d)|j |_q¤W |  d|	 dd*|||||||d+
}t }xlt	D ]`\}}y|| \}}W n4 t!k
r@   t"|}d,| }||f||< Y nX t#||d-||< qôW t| tf|}|d	kr¤yt $d¡j% &d.d/¡}W n t'tfk
r¢   Y nX |d	k	r´||_(|S )0aC  Returns a new subclass of tuple with named fields.

    >>> Point = namedtuple('Point', ['x', 'y'])
    >>> Point.__doc__                   # docstring for the new class
    'Point(x, y)'
    >>> p = Point(11, y=22)             # instantiate with positional args or keywords
    >>> p[0] + p[1]                     # indexable like a plain tuple
    33
    >>> x, y = p                        # unpack like a regular tuple
    >>> x, y
    (11, 22)
    >>> p.x + p.y                       # fields also accessible by name
    33
    >>> d = p._asdict()                 # convert to a dictionary
    >>> d['x']
    11
    >>> Point(**d)                      # convert from a dictionary
    Point(x=11, y=22)
    >>> p._replace(x=100)               # _replace() is like str.replace() but targets named fields
    Point(x=100, y=22)

    ú,ú Ú_z*Type names and field names must be stringsz6Type names and field names must be valid identifiers: z0Type names and field names cannot be a keyword: z-Field names cannot start with an underscore: z"Encountered duplicate field name: Nz(Got more default values than field namesú'Ú r2   éÿÿÿÿú(z, c             s   s   | ]}| d V  qdS )z=%rNr    )Ú.0r   r    r    r!   ú	<genexpr>  s    znamedtuple.<locals>.<genexpr>ú)zdef __new__(_cls, z): return _tuple_new(_cls, (z))Únamedtuple_)Ú
_tuple_newr   Ú__new__zCreate new instance of c                s2   | |} |kr.t d dt| |S )Nz	Expected z arguments, got )r3   r4   )re   rf   rZ   )Ú_lenÚ
num_fieldsÚ	tuple_newr    r!   Ú_make  s    
znamedtuple.<locals>._makezMake a new z# object from a sequence or iterablec                s.   |   t|j | ¡}|r*tdt||S )NzGot unexpected field names: )r   rk   rB   Ú
ValueErrorr]   )Ú_selfr;   rZ   )Úfield_namesr    r!   Ú_replace  s    znamedtuple.<locals>._replacezReturn a new z2 object replacing specified fields with new valuesc                s   | j j |   S )z/Return a nicely formatted representation string)r\   r   )r&   )Úrepr_fmtr    r!   r^   ¦  s    znamedtuple.<locals>.__repr__c             S   s   t t| j| S )z@Return a new OrderedDict which maps field names to their values.)r   ÚzipÚ_fields)r&   r    r    r!   Ú_asdictª  s    znamedtuple.<locals>._asdictc             S   s   t | S )z7Return self as a plain tuple.  Used by copy and pickle.)Útuple)r&   r    r    r!   Ú__getnewargs__®  s    z"namedtuple.<locals>.__getnewargs__Ú.r    )
rn   r1   r   Ú_fields_defaultsr   r   r   r^   r   r   zAlias for field number )Údocr   Ú__main__))rh   ÚstrÚreplaceÚsplitr]   rk   rN   ÚinternÚsetÚ	enumerateÚisidentifierÚ
_iskeywordÚ
startswithÚaddÚtyper3   r   r   r4   rI   r$   r   ÚreprÚjoinr   Úexecrn   Ú__defaults__rt   Ú__func__r   r)   Ú_nt_itemgettersrJ   Ú_itemgetterÚpropertyÚ	_getframeÚ	f_globalsÚgetr   r(   )Útypenamer   ru   rv   rw   ÚseenÚindexr   Úfield_defaultsÚarg_listÚsÚ	namespacer   r   r   r^   r   r   ÚmethodÚclass_namespaceÚcacheÚitemgetter_objectr   rZ   r    )r   r   r   r   r   r!   r   <  sª    










c             C   s*   | j }x|D ]}||dd | |< qW dS )z!Tally elements from the iterable.r
   r2   N)r¬   )Úmappingrf   Zmapping_getÚelemr    r    r!   Ú_count_elementsæ  s    
rº   )rº   c                   sØ   e Zd ZdZ fddZdd Zd/ddZd	d
 Zed0ddZ	 fddZ
dd Zdd Zdd Z fddZdd Zdd Zdd Zdd Zdd  Zd!d" Zd#d$ Zd%d& Zd'd( Zd)d* Zd+d, Zd-d. Z  ZS )1r   a  Dict subclass for counting hashable items.  Sometimes called a bag
    or multiset.  Elements are stored as dictionary keys and their counts
    are stored as dictionary values.

    >>> c = Counter('abcdeabcdabcaba')  # count elements from a string

    >>> c.most_common(3)                # three most common elements
    [('a', 5), ('b', 4), ('c', 3)]
    >>> sorted(c)                       # list all unique elements
    ['a', 'b', 'c', 'd', 'e']
    >>> ''.join(sorted(c.elements()))   # list elements with repetitions
    'aaaaabbbbcccdde'
    >>> sum(c.values())                 # total of all counts
    15

    >>> c['a']                          # count of letter 'a'
    5
    >>> for elem in 'shazam':           # update counts from an iterable
    ...     c[elem] += 1                # by adding 1 to each element's count
    >>> c['a']                          # now there are seven 'a'
    7
    >>> del c['b']                      # remove all 'b'
    >>> c['b']                          # now there are zero 'b'
    0

    >>> d = Counter('simsalabim')       # make another counter
    >>> c.update(d)                     # add in the second counter
    >>> c['a']                          # now there are nine 'a'
    9

    >>> c.clear()                       # empty the counter
    >>> c
    Counter()

    Note:  If a count is set to zero or reduced to zero, it will remain
    in the counter until the entry is deleted or the counter is cleared:

    >>> c = Counter('aaabbc')
    >>> c['b'] -= 2                     # reduce the count of 'b' by two
    >>> c.most_common()                 # 'b' is still in, but its count is zero
    [('a', 3), ('c', 1), ('b', 0)]

    c                 sN   | st d| ^}} t| dkr0t dt|  tt| ¡  |j| | dS )a	  Create a new, empty Counter object.  And if given, count elements
        from an input iterable.  Or, initialize the count from another mapping
        of elements to their counts.

        >>> c = Counter()                           # a new, empty counter
        >>> c = Counter('gallahad')                 # a new counter from an iterable
        >>> c = Counter({'a': 4, 'b': 2})           # a new counter from a mapping
        >>> c = Counter(a=4, b=2)                   # a new counter from keyword args

        z;descriptor '__init__' of 'Counter' object needs an argumentr2   z$expected at most 1 arguments, got %dN)r3   r4   Úsuperr   r=   rp   )r:   r;   r&   )r\   r    r!   r=   $  s    zCounter.__init__c             C   s   dS )z1The count of elements not in the Counter is zero.r
   r    )r&   r+   r    r    r!   Ú__missing__8  s    zCounter.__missing__Nc             C   s6   |dkrt |  ¡ tdddS tj||  ¡ tddS )zðList the n most common elements and their counts from the most
        common to the least.  If n is None, then list all element counts.

        >>> Counter('abcdeabcdabcaba').most_common(3)
        [('a', 5), ('b', 4), ('c', 3)]

        Nr2   T)r+   Úreverse)r+   )ÚsortedrV   r¨   Ú_heapqÚnlargest)r&   rR   r    r    r!   Úmost_common=  s    	zCounter.most_commonc             C   s   t  tt|  ¡ ¡S )a  Iterator over elements repeating each as many times as its count.

        >>> c = Counter('ABCABC')
        >>> sorted(c.elements())
        ['A', 'A', 'B', 'B', 'C', 'C']

        # Knuth's example for prime factors of 1836:  2**2 * 3**3 * 17**1
        >>> prime_factors = Counter({2: 2, 3: 3, 17: 1})
        >>> product = 1
        >>> for factor in prime_factors.elements():     # loop over factors
        ...     product *= factor                       # and multiply them
        >>> product
        1836

        Note, if an element's count has been set to zero or is a negative
        number, elements() will ignore it.

        )Ú_chainÚfrom_iterableÚ_starmapÚ_repeatrV   )r&   r    r    r!   ÚelementsJ  s    zCounter.elementsc             C   s   t dd S )Nz@Counter.fromkeys() is undefined.  Use Counter(iterable) instead.)ÚNotImplementedError)re   rf   Úvr    r    r!   rg   b  s    zCounter.fromkeysc                 s¶   | st d| ^}} t| dkr0t dt|  | r<| d nd}|dk	r¤t|tjr|r|j}x8| ¡ D ]\}}|||d ||< qhW q¤tt| 	|¡ n
t
|| |r²| 	|¡ dS )aÉ  Like dict.update() but add counts instead of replacing them.

        Source can be an iterable, a dictionary, or another Counter instance.

        >>> c = Counter('which')
        >>> c.update('witch')           # add elements from another iterable
        >>> d = Counter('watch')
        >>> c.update(d)                 # add elements from another counter
        >>> c['h']                      # four 'h' in which, witch, and watch
        4

        z9descriptor 'update' of 'Counter' object needs an argumentr2   z$expected at most 1 arguments, got %dr
   N)r3   r4   rh   r   ÚMappingr¬   rV   r»   r   rp   rº   )r:   r;   r&   rf   Úself_getr¹   Úcount)r\   r    r!   rp   i  s     
zCounter.updatec              O   s¶   | st d| ^}} t| dkr0t dt|  | r<| d nd}|dk	r¤|j}t|tjrxH| ¡ D ]\}}||d| ||< qdW n x|D ]}||dd ||< qW |r²| |¡ dS )a·  Like dict.update() but subtracts counts instead of replacing them.
        Counts can be reduced below zero.  Both the inputs and outputs are
        allowed to contain zero and negative counts.

        Source can be an iterable, a dictionary, or another Counter instance.

        >>> c = Counter('which')
        >>> c.subtract('witch')             # subtract elements from another iterable
        >>> c.subtract(Counter('watch'))    # subtract elements from another counter
        >>> c['h']                          # 2 in which, minus 1 in witch, minus 1 in watch
        0
        >>> c['w']                          # 1 in which, minus 1 in witch, minus 1 in watch
        -1

        z;descriptor 'subtract' of 'Counter' object needs an argumentr2   z$expected at most 1 arguments, got %dr
   N)r3   r4   r¬   rh   r   rÉ   rV   Úsubtract)r:   r;   r&   rf   rÊ   r¹   rË   r    r    r!   rÌ     s    
zCounter.subtractc             C   s
   |   | ¡S )zReturn a shallow copy.)r\   )r&   r    r    r!   r`   ³  s    zCounter.copyc             C   s   | j t| ffS )N)r\   rI   )r&   r    r    r!   rd   ·  s    zCounter.__reduce__c                s   || krt   |¡ dS )zGLike dict.__delitem__() but does not raise KeyError for missing values.N)r»   rE   )r&   r¹   )r\   r    r!   rE   º  s    zCounter.__delitem__c             C   s`   | sd| j j S y&d tdj|  ¡ ¡}d| j j|f S  tk
rZ   d | j jt| ¡S X d S )Nz%s()z, z%r: %rz%s({%s})z
{0}({1!r}))	r\   r   r£   rk   Ú__mod__rÁ   r3   ÚformatrI   )r&   rV   r    r    r!   r^   ¿  s    zCounter.__repr__c             C   sx   t |tstS t }x0|  ¡ D ]$\}}|||  }|dkr|||< qW x,| ¡ D ] \}}|| krP|dkrP|||< qPW |S )zAdd counts from two counters.

        >>> Counter('abbb') + Counter('bcc')
        Counter({'b': 4, 'c': 2, 'a': 1})

        r
   )rh   r   ÚNotImplementedrV   )r&   rm   rZ   r¹   rË   Únewcountr    r    r!   Ú__add__Ò  s    
zCounter.__add__c             C   s|   t |tstS t }x0|  ¡ D ]$\}}|||  }|dkr|||< qW x0| ¡ D ]$\}}|| krP|dk rPd| ||< qPW |S )z Subtract count, but keep only results with positive counts.

        >>> Counter('abbbc') - Counter('bccd')
        Counter({'b': 2, 'a': 1})

        r
   )rh   r   rÏ   rV   )r&   rm   rZ   r¹   rË   rÐ   r    r    r!   Ú__sub__å  s    
zCounter.__sub__c             C   s   t |tstS t }x<|  ¡ D ]0\}}|| }||k r:|n|}|dkr|||< qW x,| ¡ D ] \}}|| kr\|dkr\|||< q\W |S )z Union is the maximum of value in either of the input counters.

        >>> Counter('abbb') | Counter('bcc')
        Counter({'b': 3, 'c': 2, 'a': 1})

        r
   )rh   r   rÏ   rV   )r&   rm   rZ   r¹   rË   Úother_countrÐ   r    r    r!   Ú__or__ø  s    
zCounter.__or__c             C   sV   t |tstS t }x<|  ¡ D ]0\}}|| }||k r:|n|}|dkr|||< qW |S )z Intersection is the minimum of corresponding counts.

        >>> Counter('abbb') & Counter('bcc')
        Counter({'b': 1})

        r
   )rh   r   rÏ   rV   )r&   rm   rZ   r¹   rË   rÓ   rÐ   r    r    r!   Ú__and__  s    
zCounter.__and__c             C   s0   t  }x$|  ¡ D ]\}}|dkr|||< qW |S )zEAdds an empty counter, effectively stripping negative and zero countsr
   )r   rV   )r&   rZ   r¹   rË   r    r    r!   Ú__pos__  s
    zCounter.__pos__c             C   s4   t  }x(|  ¡ D ]\}}|dk rd| ||< qW |S )z{Subtracts from an empty counter.  Strips positive and zero counts,
        and flips the sign on negative counts.

        r
   )r   rV   )r&   rZ   r¹   rË   r    r    r!   Ú__neg__%  s
    zCounter.__neg__c             C   s*   dd |   ¡ D }x|D ]
}| |= qW | S )z?Internal method to strip elements with a negative or zero countc             S   s   g | ]\}}|d ks|qS )r
   r    )r   r¹   rË   r    r    r!   ú
<listcomp>2  s    z*Counter._keep_positive.<locals>.<listcomp>)rV   )r&   Únonpositiver¹   r    r    r!   Ú_keep_positive0  s    

zCounter._keep_positivec             C   s.   x$|  ¡ D ]\}}| |  |7  < q
W |  ¡ S )zÂInplace add from another counter, keeping only positive counts.

        >>> c = Counter('abbb')
        >>> c += Counter('bcc')
        >>> c
        Counter({'b': 4, 'c': 2, 'a': 1})

        )rV   rÚ   )r&   rm   r¹   rË   r    r    r!   Ú__iadd__7  s    	zCounter.__iadd__c             C   s.   x$|  ¡ D ]\}}| |  |8  < q
W |  ¡ S )zÂInplace subtract counter, but keep only results with positive counts.

        >>> c = Counter('abbbc')
        >>> c -= Counter('bccd')
        >>> c
        Counter({'b': 2, 'a': 1})

        )rV   rÚ   )r&   rm   r¹   rË   r    r    r!   Ú__isub__D  s    	zCounter.__isub__c             C   s6   x,|  ¡ D ] \}}| | }||kr
|| |< q
W |  ¡ S )z½Inplace union is the maximum of value from either counter.

        >>> c = Counter('abbb')
        >>> c |= Counter('bcc')
        >>> c
        Counter({'b': 3, 'c': 2, 'a': 1})

        )rV   rÚ   )r&   rm   r¹   rÓ   rË   r    r    r!   Ú__ior__Q  s
    	zCounter.__ior__c             C   s6   x,|   ¡ D ] \}}|| }||k r
|| |< q
W |  ¡ S )z¯Inplace intersection is the minimum of corresponding counts.

        >>> c = Counter('abbb')
        >>> c &= Counter('bcc')
        >>> c
        Counter({'b': 1})

        )rV   rÚ   )r&   rm   r¹   rË   rÓ   r    r    r!   Ú__iand__`  s
    	zCounter.__iand__)N)N)r   r(   r)   rn   r=   r¼   rÁ   rÆ   rt   rg   rp   rÌ   r`   rd   rE   r^   rÑ   rÒ   rÔ   rÕ   rÖ   r×   rÚ   rÛ   rÜ   rÝ   rÞ   Ú__classcell__r    r    )r\   r!   r   ñ  s0   +
("c               @   s¶   e Zd ZdZdd Zdd Zdd Zd'd	d
Zdd Zdd Z	dd Z
dd Ze dd Zedd Zdd ZeZd(ddZedd Zdd Zdd  Zd!d" Zd#d$ Zd%d& ZdS ))r	   a¸   A ChainMap groups multiple dicts (or other mappings) together
    to create a single, updateable view.

    The underlying mappings are stored in a list.  That list is public and can
    be accessed or updated using the *maps* attribute.  There is no other
    state.

    Lookups search the underlying mappings successively until a key is found.
    In contrast, writes, updates, and deletions only operate on the first
    mapping.

    c             G   s   t |pi g| _dS )zInitialize a ChainMap by setting *maps* to the given mappings.
        If no mappings are provided, a single empty dictionary is used.

        N)r]   Úmaps)r&   rà   r    r    r!   r=     s    zChainMap.__init__c             C   s   t |d S )N)rJ   )r&   r+   r    r    r!   r¼     s    zChainMap.__missing__c          	   C   s8   x,| j D ]"}y|| S  tk
r(   Y qX qW |  |¡S )N)rà   rJ   r¼   )r&   r+   r¸   r    r    r!   Ú__getitem__  s    
zChainMap.__getitem__Nc             C   s   || kr| | S |S )Nr    )r&   r+   rY   r    r    r!   r¬     s    zChainMap.getc             C   s   t t j| j S )N)r4   r   Úunionrà   )r&   r    r    r!   Ú__len__  s    zChainMap.__len__c             C   s*   i }xt | jD ]}| |¡ qW t|S )N)r$   rà   rp   ra   )r&   Údr¸   r    r    r!   rG     s    zChainMap.__iter__c                s   t  fdd| jD S )Nc             3   s   | ]} |kV  qd S )Nr    )r   Úm)r+   r    r!   r   ¡  s    z(ChainMap.__contains__.<locals>.<genexpr>)Úanyrà   )r&   r+   r    )r+   r!   Ú__contains__   s    zChainMap.__contains__c             C   s
   t | jS )N)ræ   rà   )r&   r    r    r!   Ú__bool__£  s    zChainMap.__bool__c             C   s   d  | d tt| j¡¡S )Nz{0.__class__.__name__}({1})z, )rÎ   r£   rk   r¢   rà   )r&   r    r    r!   r^   ¦  s    zChainMap.__repr__c             G   s   | t j|f| S )z?Create a ChainMap with a single dict created from the iterable.)rI   rg   )re   rf   r:   r    r    r!   rg   «  s    zChainMap.fromkeysc             C   s$   | j | jd  ¡ f| jdd  S )zHNew ChainMap or subclass with a new copy of maps[0] and refs to maps[1:]r
   r2   N)r\   rà   r`   )r&   r    r    r!   r`   °  s    zChainMap.copyc             C   s   |dkri }| j |f| j S )zyNew ChainMap with a new map followed by all previous maps.
        If no map is provided, an empty dict is used.
        N)r\   rà   )r&   rå   r    r    r!   Ú	new_child¶  s    zChainMap.new_childc             C   s   | j | jdd  S )zNew ChainMap from maps[1:].r2   N)r\   rà   )r&   r    r    r!   Úparents¾  s    zChainMap.parentsc             C   s   || j d |< d S )Nr
   )rà   )r&   r+   r>   r    r    r!   rA   Ã  s    zChainMap.__setitem__c             C   s8   y| j d |= W n" tk
r2   td |¡Y nX d S )Nr
   z(Key not found in the first mapping: {!r})rà   rJ   rÎ   )r&   r+   r    r    r!   rE   Æ  s    zChainMap.__delitem__c             C   s0   y| j d  ¡ S  tk
r*   tdY nX dS )zPRemove and return an item pair from maps[0]. Raise KeyError is maps[0] is empty.r
   z#No keys found in the first mapping.N)rà   rK   rJ   )r&   r    r    r!   rK   Ì  s    zChainMap.popitemc             G   s>   y| j d j|f| S  tk
r8   td |¡Y nX dS )zWRemove *key* from maps[0] and return its value. Raise KeyError if *key* not in maps[0].r
   z(Key not found in the first mapping: {!r}N)rà   rB   rJ   rÎ   )r&   r+   r:   r    r    r!   rB   Ó  s    zChainMap.popc             C   s   | j d  ¡  dS )z'Clear maps[0], leaving maps[1:] intact.r
   N)rà   rH   )r&   r    r    r!   rH   Ú  s    zChainMap.clear)N)N)r   r(   r)   rn   r=   r¼   rá   r¬   rã   rG   rç   rè   rs   r^   rt   rg   r`   Ú__copy__ré   r©   rê   rA   rE   rK   rB   rH   r    r    r    r!   r	   t  s(   

c               @   sb   e Zd Zdd Zdd Zdd Zdd Zd	d
 Zdd Zdd Z	dd Z
dd ZedddZdS )r   c              O   s   | st d| ^}} t| dkr0t dt|  | r>| d }n0d|krj| d¡}dd l}|jdtdd nd }i |_|d k	r| |¡ t|r| |¡ d S )	Nz<descriptor '__init__' of 'UserDict' object needs an argumentr2   z$expected at most 1 arguments, got %dr
   rI   z0Passing 'dict' as keyword argument is deprecatedr   )r   )r3   r4   rB   r   r   r   Údatarp   )r:   Úkwargsr&   rI   r   r    r    r!   r=   æ  s$    


zUserDict.__init__c             C   s
   t | jS )N)r4   rì   )r&   r    r    r!   rã   û  ó    zUserDict.__len__c             C   s:   || j kr| j | S t| jdr.| j | |¡S t|d S )Nr¼   )rì   Úhasattrr\   r¼   rJ   )r&   r+   r    r    r!   rá   ü  s
    

zUserDict.__getitem__c             C   s   || j |< d S )N)rì   )r&   r+   Úitemr    r    r!   rA     rî   zUserDict.__setitem__c             C   s   | j |= d S )N)rì   )r&   r+   r    r    r!   rE     rî   zUserDict.__delitem__c             C   s
   t | jS )N)ra   rì   )r&   r    r    r!   rG     s    zUserDict.__iter__c             C   s
   || j kS )N)rì   )r&   r+   r    r    r!   rç     s    zUserDict.__contains__c             C   s
   t | jS )N)r¢   rì   )r&   r    r    r!   r^     rî   zUserDict.__repr__c             C   sR   | j tkrt| j ¡ S dd l}| j}zi | _| | ¡}W d || _X | | ¡ |S )Nr
   )r\   r   rì   r`   rp   )r&   r`   rì   Úcr    r    r!   r`     s    

zUserDict.copyNc             C   s    |  }x|D ]}|||< qW |S )Nr    )re   rf   r>   rä   r+   r    r    r!   rg     s    
zUserDict.fromkeys)N)r   r(   r)   r=   rã   rá   rA   rE   rG   rç   r^   r`   rt   rg   r    r    r    r!   r   ã  s   c               @   s   e Zd ZdZd>ddZdd Zdd Zd	d
 Zdd Zdd Z	dd Z
dd Zdd Zdd Zdd Zdd Zdd Zdd Zdd  Zd!d" Zd#d$ ZeZd%d& Zd'd( Zd)d* Zd?d,d-Zd.d/ Zd0d1 Zd2d3 Zd4d5 Zd6d7 Zd8d9 Zd:d; Z d<d= Z!dS )@r   zAA more or less complete user-defined wrapper around list objects.Nc             C   sb   g | _ |d k	r^t|t| j kr0|| j d d < n.t|trT|j d d  | j d d < n
t|| _ d S )N)rì   r¡   rh   r   r]   )r&   Úinitlistr    r    r!   r=   (  s    
zUserList.__init__c             C   s
   t | jS )N)r¢   rì   )r&   r    r    r!   r^   2  rî   zUserList.__repr__c             C   s   | j |  |¡k S )N)rì   Ú_UserList__cast)r&   rm   r    r    r!   Ú__lt__3  rî   zUserList.__lt__c             C   s   | j |  |¡kS )N)rì   ró   )r&   rm   r    r    r!   Ú__le__4  rî   zUserList.__le__c             C   s   | j |  |¡kS )N)rì   ró   )r&   rm   r    r    r!   ri   5  rî   zUserList.__eq__c             C   s   | j |  |¡kS )N)rì   ró   )r&   rm   r    r    r!   Ú__gt__6  rî   zUserList.__gt__c             C   s   | j |  |¡kS )N)rì   ró   )r&   rm   r    r    r!   Ú__ge__7  rî   zUserList.__ge__c             C   s   t |tr|jS |S )N)rh   r   rì   )r&   rm   r    r    r!   Ú__cast8  s    zUserList.__castc             C   s
   || j kS )N)rì   )r&   rð   r    r    r!   rç   :  rî   zUserList.__contains__c             C   s
   t | jS )N)r4   rì   )r&   r    r    r!   rã   ;  rî   zUserList.__len__c             C   s
   | j | S )N)rì   )r&   Úir    r    r!   rá   <  rî   zUserList.__getitem__c             C   s   || j |< d S )N)rì   )r&   rù   rð   r    r    r!   rA   =  rî   zUserList.__setitem__c             C   s   | j |= d S )N)rì   )r&   rù   r    r    r!   rE   >  rî   zUserList.__delitem__c             C   sP   t |tr|  | j|j ¡S t |t| jr<|  | j| ¡S |  | jt| ¡S )N)rh   r   r\   rì   r¡   r]   )r&   rm   r    r    r!   rÑ   ?  s
    
zUserList.__add__c             C   sP   t |tr|  |j| j ¡S t |t| jr<|  || j ¡S |  t|| j ¡S )N)rh   r   r\   rì   r¡   r]   )r&   rm   r    r    r!   Ú__radd__E  s
    
zUserList.__radd__c             C   sR   t |tr|  j|j7  _n2t |t| jr<|  j|7  _n|  jt|7  _| S )N)rh   r   rì   r¡   r]   )r&   rm   r    r    r!   rÛ   K  s    
zUserList.__iadd__c             C   s   |   | j| ¡S )N)r\   rì   )r&   rR   r    r    r!   Ú__mul__S  s    zUserList.__mul__c             C   s   |  j |9  _ | S )N)rì   )r&   rR   r    r    r!   Ú__imul__V  s    zUserList.__imul__c             C   s   | j  |¡ d S )N)rì   Úappend)r&   rð   r    r    r!   rý   Y  rî   zUserList.appendc             C   s   | j  ||¡ d S )N)rì   Úinsert)r&   rù   rð   r    r    r!   rþ   Z  rî   zUserList.insertr}   c             C   s   | j  |¡S )N)rì   rB   )r&   rù   r    r    r!   rB   [  rî   zUserList.popc             C   s   | j  |¡ d S )N)rì   Úremove)r&   rð   r    r    r!   rÿ   \  rî   zUserList.removec             C   s   | j  ¡  d S )N)rì   rH   )r&   r    r    r!   rH   ]  rî   zUserList.clearc             C   s
   |   | ¡S )N)r\   )r&   r    r    r!   r`   ^  rî   zUserList.copyc             C   s   | j  |¡S )N)rì   rË   )r&   rð   r    r    r!   rË   _  rî   zUserList.countc             G   s   | j j|f| S )N)rì   r¯   )r&   rð   r:   r    r    r!   r¯   `  rî   zUserList.indexc             C   s   | j  ¡  d S )N)rì   r½   )r&   r    r    r!   r½   a  rî   zUserList.reversec             O   s   | j j|| d S )N)rì   Úsort)r&   r:   r;   r    r    r!   r   b  rî   zUserList.sortc             C   s*   t |tr| j |j¡ n| j |¡ d S )N)rh   r   rì   Úextend)r&   rm   r    r    r!   r  c  s    
zUserList.extend)N)r}   )"r   r(   r)   rn   r=   r^   rô   rõ   ri   rö   r÷   ró   rç   rã   rá   rA   rE   rÑ   rú   rÛ   rû   Ú__rmul__rü   rý   rþ   rB   rÿ   rH   r`   rË   r¯   r½   r   r  r    r    r    r!   r   &  s>   


c               @   sh  e Zd Zdd Zdd Zdd Zdd Zd	d
 Zdd Zdd Z	dd Z
dd Zdd Zdd Zdd Zdd Zdd Zdd Zdd  Zd!d" Zd#d$ Zd%d& ZeZd'd( Zd)d* Zd+d, Zd-d. Zd/d0 Zd1ejfd2d3Zdd5d6Zd1ejfd7d8Z dd:d;Z!d1ejfd<d=Z"d>d? Z#d@dA Z$d1ejfdBdCZ%dDdE Z&dFdG Z'dHdI Z(dJdK Z)dLdM Z*dNdO Z+dPdQ Z,dRdS Z-dTdU Z.dVdW Z/dXdY Z0dZd[ Z1d\d] Z2d^d_ Z3d`da Z4ddbdcZ5e6j7Z7ddde Z8ddgdhZ9d1ejfdidjZ:d1ejfdkdlZ;dmdn Z<dodp Z=ddqdrZ>ddsdtZ?ddudvZ@ddxdyZAd1ejfdzd{ZBdd|d}ZCd~d ZDdd ZEdd ZFdd ZGdd ZHd4S )r   c             C   s<   t |tr|| _n&t |tr.|jd d  | _n
t|| _d S )N)rh   r   rì   r   )r&   Úseqr    r    r!   r=   p  s
    

zUserString.__init__c             C   s
   t | jS )N)r   rì   )r&   r    r    r!   Ú__str__w  rî   zUserString.__str__c             C   s
   t | jS )N)r¢   rì   )r&   r    r    r!   r^   x  rî   zUserString.__repr__c             C   s
   t | jS )N)Úintrì   )r&   r    r    r!   Ú__int__y  rî   zUserString.__int__c             C   s
   t | jS )N)Úfloatrì   )r&   r    r    r!   Ú	__float__z  rî   zUserString.__float__c             C   s
   t | jS )N)Úcomplexrì   )r&   r    r    r!   Ú__complex__{  rî   zUserString.__complex__c             C   s
   t | jS )N)Úhashrì   )r&   r    r    r!   Ú__hash__|  rî   zUserString.__hash__c             C   s   | j d d  fS )N)rì   )r&   r    r    r!   r   }  s    zUserString.__getnewargs__c             C   s    t |tr| j|jkS | j|kS )N)rh   r   rì   )r&   Ústringr    r    r!   ri     s    
zUserString.__eq__c             C   s    t |tr| j|jk S | j|k S )N)rh   r   rì   )r&   r  r    r    r!   rô     s    
zUserString.__lt__c             C   s    t |tr| j|jkS | j|kS )N)rh   r   rì   )r&   r  r    r    r!   rõ     s    
zUserString.__le__c             C   s    t |tr| j|jkS | j|kS )N)rh   r   rì   )r&   r  r    r    r!   rö     s    
zUserString.__gt__c             C   s    t |tr| j|jkS | j|kS )N)rh   r   rì   )r&   r  r    r    r!   r÷     s    
zUserString.__ge__c             C   s   t |tr|j}|| jkS )N)rh   r   rì   )r&   Úcharr    r    r!   rç     s    
zUserString.__contains__c             C   s
   t | jS )N)r4   rì   )r&   r    r    r!   rã     rî   zUserString.__len__c             C   s   |   | j| ¡S )N)r\   rì   )r&   r¯   r    r    r!   rá     rî   zUserString.__getitem__c             C   sJ   t |tr|  | j|j ¡S t |tr6|  | j| ¡S |  | jt| ¡S )N)rh   r   r\   rì   r   )r&   rm   r    r    r!   rÑ     s
    

zUserString.__add__c             C   s.   t |tr|  || j ¡S |  t|| j ¡S )N)rh   r   r\   rì   )r&   rm   r    r    r!   rú   ¢  s    
zUserString.__radd__c             C   s   |   | j| ¡S )N)r\   rì   )r&   rR   r    r    r!   rû   ¦  s    zUserString.__mul__c             C   s   |   | j| ¡S )N)r\   rì   )r&   r:   r    r    r!   rÍ   ©  s    zUserString.__mod__c             C   s   |   |t ¡S )N)r\   r:   )r&   rÎ   r    r    r!   Ú__rmod__«  s    zUserString.__rmod__c             C   s   |   | j ¡ ¡S )N)r\   rì   Ú
capitalize)r&   r    r    r!   r  ¯  rî   zUserString.capitalizec             C   s   |   | j ¡ ¡S )N)r\   rì   Úcasefold)r&   r    r    r!   r  °  s    zUserString.casefoldc             G   s   |   | jj|f| ¡S )N)r\   rì   Úcenter)r&   Úwidthr:   r    r    r!   r  ²  s    zUserString.centerr
   c             C   s    t |tr|j}| j |||¡S )N)rh   r   rì   rË   )r&   ÚsubÚstartÚendr    r    r!   rË   ´  s    
zUserString.countNc             C   s>   |r.|r|   | j ||¡¡S |   | j |¡¡S |   | j ¡ ¡S )N)r\   rì   Úencode)r&   ÚencodingÚerrorsr    r    r!   r  ¸  s
    zUserString.encodec             C   s   | j  |||¡S )N)rì   Úendswith)r&   Úsuffixr  r  r    r    r!   r  ¾  s    zUserString.endswithé   c             C   s   |   | j |¡¡S )N)r\   rì   Ú
expandtabs)r&   Útabsizer    r    r!   r  À  s    zUserString.expandtabsc             C   s    t |tr|j}| j |||¡S )N)rh   r   rì   Úfind)r&   r  r  r  r    r    r!   r  Â  s    
zUserString.findc             O   s   | j j||S )N)rì   rÎ   )r&   r:   r;   r    r    r!   rÎ   Æ  s    zUserString.formatc             C   s   | j  |¡S )N)rì   Ú
format_map)r&   r¸   r    r    r!   r   È  s    zUserString.format_mapc             C   s   | j  |||¡S )N)rì   r¯   )r&   r  r  r  r    r    r!   r¯   Ê  s    zUserString.indexc             C   s
   | j  ¡ S )N)rì   Úisalpha)r&   r    r    r!   r!  Ì  rî   zUserString.isalphac             C   s
   | j  ¡ S )N)rì   Úisalnum)r&   r    r    r!   r"  Í  rî   zUserString.isalnumc             C   s
   | j  ¡ S )N)rì   Úisascii)r&   r    r    r!   r#  Î  rî   zUserString.isasciic             C   s
   | j  ¡ S )N)rì   Ú	isdecimal)r&   r    r    r!   r$  Ï  rî   zUserString.isdecimalc             C   s
   | j  ¡ S )N)rì   Úisdigit)r&   r    r    r!   r%  Ð  rî   zUserString.isdigitc             C   s
   | j  ¡ S )N)rì   r   )r&   r    r    r!   r   Ñ  rî   zUserString.isidentifierc             C   s
   | j  ¡ S )N)rì   Úislower)r&   r    r    r!   r&  Ò  rî   zUserString.islowerc             C   s
   | j  ¡ S )N)rì   Ú	isnumeric)r&   r    r    r!   r'  Ó  rî   zUserString.isnumericc             C   s
   | j  ¡ S )N)rì   Úisprintable)r&   r    r    r!   r(  Ô  rî   zUserString.isprintablec             C   s
   | j  ¡ S )N)rì   Úisspace)r&   r    r    r!   r)  Õ  rî   zUserString.isspacec             C   s
   | j  ¡ S )N)rì   Úistitle)r&   r    r    r!   r*  Ö  rî   zUserString.istitlec             C   s
   | j  ¡ S )N)rì   Úisupper)r&   r    r    r!   r+  ×  rî   zUserString.isupperc             C   s   | j  |¡S )N)rì   r£   )r&   r  r    r    r!   r£   Ø  rî   zUserString.joinc             G   s   |   | jj|f| ¡S )N)r\   rì   Úljust)r&   r  r:   r    r    r!   r,  Ù  s    zUserString.ljustc             C   s   |   | j ¡ ¡S )N)r\   rì   Úlower)r&   r    r    r!   r-  Û  rî   zUserString.lowerc             C   s   |   | j |¡¡S )N)r\   rì   Úlstrip)r&   Úcharsr    r    r!   r.  Ü  rî   zUserString.lstripc             C   s   | j  |¡S )N)rì   Ú	partition)r&   Úsepr    r    r!   r0  Þ  s    zUserString.partitionr}   c             C   s6   t |tr|j}t |tr |j}|  | j |||¡¡S )N)rh   r   rì   r\   r   )r&   ÚoldÚnewÚmaxsplitr    r    r!   r   à  s
    

zUserString.replacec             C   s    t |tr|j}| j |||¡S )N)rh   r   rì   Úrfind)r&   r  r  r  r    r    r!   r5  æ  s    
zUserString.rfindc             C   s   | j  |||¡S )N)rì   Úrindex)r&   r  r  r  r    r    r!   r6  ê  s    zUserString.rindexc             G   s   |   | jj|f| ¡S )N)r\   rì   Úrjust)r&   r  r:   r    r    r!   r7  ì  s    zUserString.rjustc             C   s   | j  |¡S )N)rì   Ú
rpartition)r&   r1  r    r    r!   r8  î  s    zUserString.rpartitionc             C   s   |   | j |¡¡S )N)r\   rì   Úrstrip)r&   r/  r    r    r!   r9  ð  s    zUserString.rstripc             C   s   | j  ||¡S )N)rì   r   )r&   r1  r4  r    r    r!   r   ò  s    zUserString.splitc             C   s   | j  ||¡S )N)rì   Úrsplit)r&   r1  r4  r    r    r!   r:  ô  s    zUserString.rsplitFc             C   s   | j  |¡S )N)rì   Ú
splitlines)r&   Úkeependsr    r    r!   r;  ö  rî   zUserString.splitlinesc             C   s   | j  |||¡S )N)rì   r   )r&   Úprefixr  r  r    r    r!   r   ÷  s    zUserString.startswithc             C   s   |   | j |¡¡S )N)r\   rì   Ústrip)r&   r/  r    r    r!   r>  ù  rî   zUserString.stripc             C   s   |   | j ¡ ¡S )N)r\   rì   Úswapcase)r&   r    r    r!   r?  ú  rî   zUserString.swapcasec             C   s   |   | j ¡ ¡S )N)r\   rì   Útitle)r&   r    r    r!   r@  û  rî   zUserString.titlec             G   s   |   | jj| ¡S )N)r\   rì   Ú	translate)r&   r:   r    r    r!   rA  ü  s    zUserString.translatec             C   s   |   | j ¡ ¡S )N)r\   rì   Úupper)r&   r    r    r!   rB  þ  rî   zUserString.upperc             C   s   |   | j |¡¡S )N)r\   rì   Úzfill)r&   r  r    r    r!   rC  ÿ  rî   zUserString.zfill)NN)r  )N)r}   )N)Nr}   )Nr}   )F)N)Ir   r(   r)   r=   r  r^   r  r  r
  r  r   ri   rô   rõ   rö   r÷   rç   rã   rá   rÑ   rú   rû   r  rÍ   r  r  r  r  rN   ÚmaxsizerË   r  r  r  r  rÎ   r   r¯   r!  r"  r#  r$  r%  r   r&  r'  r(  r)  r*  r+  r£   r,  r-  r.  r   Ú	maketransr0  r   r5  r6  r7  r8  r9  r   r:  r;  r   r>  r?  r@  rA  rB  rC  r    r    r    r!   r   o  s   








)7rn   r   r   Úoperatorr   r¨   r   rl   Úkeywordr   r   ÚsysrN   Úheapqr¿   Ú_weakrefr   r7   Ú	itertoolsr   rÅ   r   rÂ   r   rÄ   Úreprlibr   rs   Ú_collectionsr   ÚImportErrorÚMutableSequenceÚregisterr   r"   ÚKeysViewr#   Ú	ItemsViewr*   Ú
ValuesViewr,   rr   r-   rI   r   r§   r   rº   r   ro   r	   r   r   ÚSequencer   r    r    r    r!   Ú<module>   s\   
 _ +   oCIã               @   s®   d Z dddddgZi ZdddZdd Zye W n ek
rD   Y nX d	d
 Zeeee dd ZdZ	dd Z
dd Zdd Zdd Zi Zi Zi Zdd Zdd Zdd ZdS )z¤Helper to provide extensibility for pickle.

This is only useful to add pickle support for extension types defined in
C, not for instances of user-defined classes.
ÚpickleÚconstructorÚadd_extensionÚremove_extensionÚclear_extension_cacheNc             C   s,   t |std|t| < |d k	r(t| d S )Nz$reduction functions must be callable)ÚcallableÚ	TypeErrorÚdispatch_tabler   )Úob_typeÚpickle_functionÚconstructor_ob© r   úD:\Python\lib\copyreg.pyr      s
    c             C   s   t | stdd S )Nzconstructors must be callable)r   r   )Úobjectr   r   r   r      s    c             C   s   t | j| jffS )N)ÚcomplexÚrealÚimag)Úcr   r   r   Úpickle_complex"   s    r   c             C   s<   |t krt  | ¡}n$| | |¡}|jt jkr8| ||¡ |S )N)r   Ú__new__Ú__init__)ÚclsÚbaseÚstateÚobjr   r   r   Ú_reconstructor)   s    r   i   c             C   sì   |dk st x*| jjD ]}t|dr|jt@ sP qW t}|tkrFd }n || jkr^td|j || }| j||f}y
| j	}W nN t
k
rÊ   t| dd r¢tdd y
| j}W n t
k
rÄ   d }Y nX Y nX | }|ràt||fS t|fS d S )Né   Ú	__flags__zcan't pickle %s objectsÚ	__slots__zNa class that defines __slots__ without defining __getstate__ cannot be pickled)ÚAssertionErrorÚ	__class__Ú__mro__Úhasattrr   Ú	_HEAPTYPEr   r   Ú__name__Ú__getstate__ÚAttributeErrorÚgetattrÚ__dict__r   )ÚselfÚprotor   r   ÚargsÚgetstateÚdictr   r   r   Ú
_reduce_ex6   s2    



r-   c             G   s   | j | f| S )N)r   )r   r*   r   r   r   Ú
__newobj__W   s    r.   c             C   s   | j | f||S )zUsed by pickle protocol 4, instead of __newobj__ to allow classes with
    keyword-only arguments to be pickled correctly.
    )r   )r   r*   Úkwargsr   r   r   Ú__newobj_ex__Z   s    r0   c             C   sà   | j  d¡}|dk	r|S g }t| ds(nx| jD ]}d|j kr0|j d }t|trX|f}xf|D ]^}|dkrnq^q^| d¡r²| d¡s²|j 	d¡}|r¦| 
d||f ¡ q¼| 
|¡ q^| 
|¡ q^W q0W y
|| _W n   Y nX |S )a  Return a list of slot names for a given class.

    This needs to find slots defined by the class and its bases, so we
    can't simply return the __slots__ attribute.  We must walk down
    the Method Resolution Order and concatenate the __slots__ of each
    class found there.  (This assumes classes don't modify their
    __slots__ attribute to misrepresent their slots after the class is
    defined.)
    Ú__slotnames__Nr   )r'   Ú__weakref__Ú__Ú_z_%s%s)r'   Úgetr!   r    Ú
isinstanceÚstrÚ
startswithÚendswithr#   ÚlstripÚappendr1   )r   Únamesr   ÚslotsÚnameÚstrippedr   r   r   Ú
_slotnames`   s2    





r@   c             C   s   t |}d|  krdks&n td| |f}t |¡|krNt |¡|krNdS |tkrjtd|t| f |tkrtd|t| f |t|< |t|< dS )zRegister an extension code.é   iÿÿÿzcode out of rangeNz)key %s is already registered with code %sz$code %s is already in use for key %s)ÚintÚ
ValueErrorÚ_extension_registryr5   Ú_inverted_registry)Úmoduler>   ÚcodeÚkeyr   r   r   r   ¢   s    c             C   sR   | |f}t  |¡|ks$t |¡|kr4td||f t |= t|= |tkrNt|= dS )z0Unregister an extension code.  For testing only.z%key %s is not registered with code %sN)rD   r5   rE   rC   Ú_extension_cache)rF   r>   rG   rH   r   r   r   r   ´   s    c               C   s   t  ¡  d S )N)rI   Úclearr   r   r   r   r   À   s    )N)Ú__doc__Ú__all__r   r   r   r   Ú	NameErrorr   r   r"   r-   r.   r0   r@   rD   rE   rI   r   r   r   r   r   r   r   Ú<module>   s.   


	!<ã               @   sô  d Z ddlZddlZddlZddlZddlT ddlmZ ddddd	d
dddddge Z[ejej	ej
eeefZed Zdd ZdPdddddZdQddddZdddddddddd d!
Zd"d# Zd$d% Zd&d Zd'd( Zddd)dZe d*d+¡Zd,ej_ d-ej_ d.ej_ d/ej_ d0ej_ d1ej _ d2ej!_ d3ej"_ d4Z#d5Z$G d6d deZ%dd7d8dZ&d9d: Z'd;d< Z(dRd=d>Z)dSddd@dZ*ddddAdBZ+dTdddCdDdEZ,dFdG Z-e*Z.dHdI Z/dJd Z0dKd
 Z1G dLd dZ2dMdN Z3e4dOkrðe3  dS )Uz0Disassembler of Python byte code into mnemonics.é    N)Ú*)Ú__all__Ú	code_infoÚdisÚdisassembleÚdistbÚdiscoÚfindlinestartsÚ
findlabelsÚ	show_codeÚget_instructionsÚInstructionÚBytecodeÚFORMAT_VALUEc             C   s6   yt | |d}W n  tk
r0   t | |d}Y nX |S )zßAttempts to compile the given source, first as an expression and
       then as a statement if the first approach fails.

       Utility function to accept strings in functions that otherwise
       expect code objects
    ÚevalÚexec)ÚcompileÚSyntaxError)ÚsourceÚnameÚc© r   úD:\Python\lib\dis.pyÚ_try_compile   s
    r   )ÚfileÚdepthc            C   sn  | dkrt |d dS t| dr&| j} t| dr8| j} n4t| drJ| j} n"t| dr\| j} nt| drl| j} t| drt| j 	¡ }xâ|D ]p\}}t
|trtd	| |d yt|||d
 W n0 tk
rð } ztd||d W dd}~X Y nX t|d qW nht| drt| ||d
 nLt
| ttfr<t| |d n.t
| trXt| ||d
 ntdt| j dS )a0  Disassemble classes, methods, functions, and other compiled objects.

    With no argument, disassemble the last traceback.

    Compiled objects currently include generator objects, async generator
    objects, and coroutine objects, all of which store their code object
    in a special attribute.
    N)r   Ú__func__Ú__code__Úgi_codeÚag_codeÚcr_codeÚ__dict__zDisassembly of %s:)r   r   zSorry:Úco_codez(don't know how to disassemble %s objects)r   Úhasattrr   r   r   r   r    Úsortedr!   ÚitemsÚ
isinstanceÚ
_have_codeÚprintr   Ú	TypeErrorÚ_disassemble_recursiveÚbytesÚ	bytearrayÚ_disassemble_bytesÚstrÚ_disassemble_strÚtypeÚ__name__)Úxr   r   r%   r   Úx1Úmsgr   r   r   r   "   s>    	






 )r   c            C   s\   | dkrDy
t j} W n tk
r0   tddY nX x| jrB| j} q4W t| jj| j|d dS )z2Disassemble a traceback (default: last traceback).Nz no last traceback to disassemble)r   )	ÚsysÚlast_tracebackÚAttributeErrorÚRuntimeErrorÚtb_nextr   Útb_frameÚf_codeÚtb_lasti)Útbr   r   r   r   r   O   s    
 
Ú	OPTIMIZEDÚ	NEWLOCALSÚVARARGSÚVARKEYWORDSÚNESTEDÚ	GENERATORÚNOFREEÚ	COROUTINEÚITERABLE_COROUTINEÚASYNC_GENERATOR)
é   é   é   é   é   é    é@   é   é   i   c             C   sb   g }xRt dD ]8}d|> }| |@ r| t |t|¡¡ | |N } | sP qW | t| ¡ d |¡S )z+Return pretty representation of code flags.rM   rH   z, )ÚrangeÚappendÚCOMPILER_FLAG_NAMESÚgetÚhexÚjoin)ÚflagsÚnamesÚiÚflagr   r   r   Úpretty_flagsi   s    r[   c             C   s   t | dr| j} t | dr"| j} n4t | dr4| j} n"t | drF| j} nt | drV| j} t| trjt| d} t | drx| S t	dt
| j d	S )
zDHelper to handle methods, compiled or raw code objects, and strings.r   r   r   r   r    z<disassembly>r"   z(don't know how to disassemble %s objectsN)r#   r   r   r   r   r    r&   r.   r   r)   r0   r1   )r2   r   r   r   Ú_get_code_objectw   s     







r\   c             C   s   t t| S )z1Formatted details of methods, functions, or code.)Ú_format_code_infor\   )r2   r   r   r   r      s    c             C   s  g }|  d| j ¡ |  d| j ¡ |  d| j ¡ |  d| j ¡ |  d| j ¡ |  d| j ¡ |  dt| j ¡ | j	rª|  d¡ x t
| j	D ]}|  d	| ¡ qW | jrÜ|  d
¡ x t
| jD ]}|  d| ¡ qÆW | jr|  d¡ x t
| jD ]}|  d| ¡ qúW | jrF|  d¡ x"t
| jD ]}|  d| ¡ q.W | jr||  d¡ x"t
| jD ]}|  d| ¡ qdW d |¡S )NzName:              %szFilename:          %szArgument count:    %szKw-only arguments: %szNumber of locals:  %szStack size:        %szFlags:             %sz
Constants:z%4d: %rzNames:z%4d: %szVariable names:zFree variables:zCell variables:Ú
)rR   Úco_nameÚco_filenameÚco_argcountÚco_kwonlyargcountÚ
co_nlocalsÚco_stacksizer[   Úco_flagsÚ	co_constsÚ	enumerateÚco_namesÚco_varnamesÚco_freevarsÚco_cellvarsrV   )ÚcoÚlinesÚi_cÚi_nr   r   r   r]      s:    




r]   c            C   s   t t| |d dS )z}Print details of methods, functions, or code to *file*.

    If *file* is not provided, the output is printed on stdout.
    )r   N)r(   r   )rl   r   r   r   r   r   ±   s    Ú_InstructionzBopname opcode arg argval argrepr offset starts_line is_jump_targetz!Human readable name for operationzNumeric code for operationz6Numeric argument to operation (if any), otherwise Nonez4Resolved arg value (if known), otherwise same as argz0Human readable description of operation argumentz1Start index of operation within bytecode sequencez4Line started by this opcode (if any), otherwise Nonez1True if other code jumps to here, otherwise Falseé   é   c               @   s   e Zd ZdZdddZdS )	r   aK  Details for a bytecode operation

       Defined fields:
         opname - human readable name for operation
         opcode - numeric code for operation
         arg - numeric argument to operation (if any), otherwise None
         argval - resolved arg value (if known), otherwise same as arg
         argrepr - human readable description of operation argument
         offset - start index of operation within bytecode sequence
         starts_line - line started by this opcode (if any), otherwise None
         is_jump_target - True if other code jumps to here, otherwise False
    é   FrJ   c             C   sà   g }|r:| j dk	r,d| }| || j  ¡ n| d| ¡ |rJ| d¡ n
| d¡ | jrf| d¡ n
| d¡ | t| j |¡¡ | | j t¡¡ | j	dk	rÒ| t| j	 t
¡¡ | jrÒ| d| j d	 ¡ d |¡ ¡ S )
a%  Format instruction details for inclusion in disassembly output

        *lineno_width* sets the width of the line number field (0 omits it)
        *mark_as_current* inserts a '-->' marker arrow as part of the line
        *offset_width* sets the width of the instruction offset field
        Nz%%%ddú z-->z   z>>z  ú(ú))Ústarts_linerR   Úis_jump_targetÚreprÚoffsetÚrjustÚopnameÚljustÚ_OPNAME_WIDTHÚargÚ_OPARG_WIDTHÚargreprrV   Úrstrip)ÚselfÚlineno_widthÚmark_as_currentÚoffset_widthÚfieldsÚ
lineno_fmtr   r   r   Ú_disassembleÕ   s&    



zInstruction._disassembleN)rs   FrJ   )r1   Ú
__module__Ú__qualname__Ú__doc__r   r   r   r   r   r   Ç   s   )Ú
first_linec            C   sT   t | }|j|j }tt|}|dk	r4||j }nd}t|j|j|j	|j
|||S )a«  Iterator for the opcodes in methods, functions or code

    Generates a series of Instruction named tuples giving the details of
    each operations in the supplied code.

    If *first_line* is not None, it indicates the line number that should
    be reported for the first source line in the disassembled code.
    Otherwise, the source line information (if any) is taken directly from
    the disassembled code object.
    Nr   )r\   rk   rj   Údictr	   Úco_firstlinenoÚ_get_instructions_bytesr"   ri   rh   rf   )r2   r   rl   Ú
cell_namesÚ
linestartsÚline_offsetr   r   r   r   û   s    c             C   s    | }|dk	r||  }|t |fS )zÕHelper to get optional details about const references

       Returns the dereferenced constant and its repr if the constant
       list is defined.
       Otherwise returns the constant index and its repr().
    N)ry   )Úconst_indexÚ
const_listÚargvalr   r   r   Ú_get_const_info  s    r   c             C   s*   | }|dk	r||  }|}nt |}||fS )zÓHelper to get optional details about named references

       Returns the dereferenced name as both value and repr if the name
       list is defined.
       Otherwise returns the name index and its repr().
    N)ry   )Ú
name_indexÚ	name_listr   r   r   r   r   Ú_get_name_info  s    r   c          
   c   sx  t | }d}xdt| D ]V\}	}
}|dk	rH| |	d¡}|dk	rH||7 }|	|k}d}d}|dk	rT|}|
tkr~t||\}}nÖ|
tkrt||\}}n¾|
tkr¸|	d | }dt| }n|
t	krÐt||\}}n|
t
kræt| }|}nn|
tkrþt||\}}nV|
tkrTdtttf|d@  t|d@ f}d|d@  }|d rT|rL|d	7 }|d
7 }tt|
 |
||||	||V  qW dS )a&  Iterate over the instructions in a bytecode string.

    Generates a sequence of Instruction namedtuples giving the details of each
    opcode.  Additional information about the code's runtime environment
    (e.g. variable names, constants) can be specified using optional
    arguments.

    NÚ rI   zto rs   rJ   )r   r.   ry   ÚasciirH   z, zwith format)r
   Ú_unpack_opargsrT   Úhasconstr   Úhasnamer   Úhasjrelry   ÚhaslocalÚ
hascompareÚcmp_opÚhasfreer   r.   r   Úboolr   r|   )ÚcodeÚvarnamesrX   Ú	constantsÚcellsr   r   Úlabelsrw   rz   Úopr   rx   r   r   r   r   r   r   -  sH    


 

r   éÿÿÿÿc         
   C   s<   | j | j }tt| }t| j|| j| j| j|||d dS )zDisassemble a code object.)r   N)	rk   rj   r   r	   r-   r"   ri   rh   rf   )rl   Úlastir   r   r   r   r   r   r   `  s    c            C   st   t | |d |d ks|dkrp|d k	r,|d }xB| jD ]8}t|dr4t|d td|f |d t|||d q4W d S )N)r   r   rH   r"   zDisassembly of %r:)r   r   )r   rf   r#   r(   r*   )rl   r   r   r2   r   r   r   r*   g  s    

r*   )r   r   c         	   C   sÌ   |d k	}	|	r8t | ¡ | }
|
dkr2tt|
}q<d}nd}t| d }|dkr^tt|}nd}xdt| ||||||dD ]J}|	o|jd k	o|jdk}|r¤t|d |j|k}t| |||¡|d qzW d S )	Niè  rs   r   rI   i'  rJ   )r   )r   )	ÚmaxÚvaluesÚlenr.   r   rw   rz   r(   r   )r¦   r­   r§   rX   r¨   r©   r   r   r   Úshow_linenoÚ	maxlinenor   Ú	maxoffsetr   ÚinstrÚnew_source_lineÚis_current_instrr   r   r   r-   r  s,    




r-   c             K   s   t t| df| dS )z<Compile the source string, then disassemble the code object.z<dis>N)r*   r   )r   Úkwargsr   r   r   r/     s    r/   c             c   sh   d}x^t dt| dD ]J}| | }|tkrP| |d  |B }|tkrJ|d> nd}nd }|||fV  qW d S )Nr   rI   rH   rK   )rQ   r°   ÚHAVE_ARGUMENTÚEXTENDED_ARG)r¦   Úextended_argrY   r«   r   r   r   r   r     s    r   c             C   s`   g }xVt | D ]J\}}}|dk	r|tkr6|d | }n|tkr|}nq||kr| |¡ qW |S )z`Detect all offsets in a byte code which are jump targets.

    Return the list of offsets.

    NrI   )r   r    ÚhasjabsrR   )r¦   rª   rz   r«   r   Úlabelr   r   r   r
   ¡  s    c             c   s   | j ddd }| j ddd }d}| j}d}xPt||D ]B\}}|rd||kr\||fV  |}||7 }|dkrt|d8 }||7 }q:W ||kr||fV  dS )zFind the offsets in a byte code which are start of lines in the source.

    Generate pairs (offset, lineno) as described in Python/compile.c.

    r   NrI   rH   rO   rP   )Ú	co_lnotabr   Úzip)r¦   Úbyte_incrementsÚline_incrementsÚ
lastlinenoÚlinenoÚaddrÚ	byte_incrÚ	line_incrr   r   r   r	   ´  s     
c               @   sL   e Zd ZdZdddddZdd Zdd	 Zed
d Zdd Z	dd Z
dS )r   a  The bytecode operations of a piece of code

    Instantiate this with a function, method, other compiled object, string of
    code, or a code object (as returned by compile()).

    Iterating over this yields the bytecode operations as Instruction instances.
    N)r   Úcurrent_offsetc            C   sd   t | | _}|d kr&|j| _d| _n|| _||j | _|j|j | _tt	|| _
|| _|| _d S )Nr   )r\   Úcodeobjr   r   Ú_line_offsetrk   rj   Ú_cell_namesr   r	   Ú_linestartsÚ_original_objectrÆ   )r   r2   r   rÆ   rl   r   r   r   Ú__init__Õ  s    zBytecode.__init__c          	   C   s*   | j }t|j|j|j|j| j| j| jdS )N)r   )	rÇ   r   r"   ri   rh   rf   rÉ   rÊ   rÈ   )r   rl   r   r   r   Ú__iter__â  s
    zBytecode.__iter__c             C   s   d  | jj| j¡S )Nz{}({!r}))ÚformatÚ	__class__r1   rË   )r   r   r   r   Ú__repr__é  s    
zBytecode.__repr__c             C   s$   x|j r|j }qW | |jj|jdS )z/ Construct a Bytecode from the given traceback )rÆ   )r9   r:   r;   r<   )Úclsr=   r   r   r   Úfrom_tracebackí  s    
zBytecode.from_tracebackc             C   s
   t | jS )z3Return formatted information about the code object.)r]   rÇ   )r   r   r   r   Úinfoô  s    zBytecode.infoc             C   s`   | j }| jdk	r| j}nd}t ¡ 2}t|j|j|j|j| j	| j
| j||d	 | ¡ S Q R X dS )z3Return a formatted view of the bytecode operations.Nr¬   )r§   rX   r¨   r©   r   r   r   r­   )rÇ   rÆ   ÚioÚStringIOr-   r"   ri   rh   rf   rÉ   rÊ   rÈ   Úgetvalue)r   rl   rz   Úoutputr   r   r   r   ø  s    


zBytecode.dis)r1   r   r   r   rÌ   rÍ   rÐ   ÚclassmethodrÒ   rÓ   r   r   r   r   r   r   Í  s   c           	   C   sd   ddl } |  ¡ }|jd|  ¡ ddd | ¡ }|j}| ¡ }W dQ R X t||jjd}t	| dS )z*Simple test program to disassemble a file.r   NÚinfileú?ú-)r0   ÚnargsÚdefaultr   )
ÚargparseÚArgumentParserÚadd_argumentÚFileTypeÚ
parse_argsrÙ   Úreadr   r   r   )rÞ   ÚparserÚargsrÙ   r   r¦   r   r   r   Ú_test
  s    ræ   Ú__main__)N)N)NNNNNr   )r¬   )r¬   NNNNN)5r   r5   ÚtypesÚcollectionsrÔ   Úopcoder   Z_opcodes_allÚ
MethodTypeÚFunctionTypeÚCodeTyperØ   Ústaticmethodr0   r'   Úopmapr   r   r   r   rS   r[   r\   r   r]   r   Ú
namedtuplerp   r|   r   r   r   rz   rw   rx   r~   r   r   r   r   r   r   r   r*   r-   r/   r   r   r
   r	   r   ræ   r1   r   r   r   r   Ú<module>   s~   

-4 
2 =
ã               @   s&  d dl Z d dlmZmZ yd dlmZ W n  ek
rH   d dlmZ Y nX dddddd	d
gZdd Z	dd Z
dd Zdd Ze ZG dd	 d	ZG dd deZdZG dd deZG dd dedZG dd deeZdd ZG dd deZG dd deeZdd Zd d
 Zd!d" Zd#d$ ZdS )%é    N)ÚMappingProxyTypeÚDynamicClassAttribute)ÚOrderedDictÚEnumMetaÚEnumÚIntEnumÚFlagÚIntFlagÚautoÚuniquec             C   s   t | dpt | dpt | dS )z5Returns True if obj is a descriptor, False otherwise.Ú__get__Ú__set__Ú
__delete__)Úhasattr)Úobj© r   úD:\Python\lib\enum.pyÚ_is_descriptor   s    

r   c             C   sL   t | dkoJ| dd | dd   ko.dkn  oJ| d dkoJ| d dkS )z3Returns True if a __dunder__ name, False otherwise.é   Né   éþÿÿÿÚ__Ú_éýÿÿÿ)Úlen)Únamer   r   r   Ú
_is_dunder   s    (r   c             C   sL   t | dkoJ| d | d   ko&dkn  oJ| dd dkoJ| dd dkS )z1Returns True if a _sunder_ name, False otherwise.r   r   éÿÿÿÿr   é   r   )r   )r   r   r   r   Ú
_is_sunder"   s     r   c             C   s   dd }|| _ d| _dS )z"Make the given class un-picklable.c             S   s   t d|  d S )Nz%r cannot be pickled)Ú	TypeError)ÚselfÚprotor   r   r   Ú_break_on_call_reduce,   s    z6_make_class_unpicklable.<locals>._break_on_call_reducez	<unknown>N)Ú__reduce_ex__Ú
__module__)Úclsr#   r   r   r   Ú_make_class_unpicklable*   s    r'   c               @   s   e Zd ZdZeZdS )r
   zP
    Instances are replaced with an appropriate value in Enum class suites.
    N)Ú__name__r%   Ú__qualname__Ú__doc__Ú
_auto_nullÚvaluer   r   r   r   r
   2   s   c                   s,   e Zd ZdZ fddZ fddZ  ZS )Ú	_EnumDictz§Track enum member order and ensure member names are not reused.

    EnumMeta will use the names found in self._member_names as the
    enumeration member names.

    c                s    t   ¡  g | _g | _g | _d S )N)ÚsuperÚ__init__Ú_member_namesÚ_last_valuesÚ_ignore)r!   )Ú	__class__r   r   r/   @   s    
z_EnumDict.__init__c                sP  t |r|dkrtd|dkr.t| d| nV|dkrt|trR| dd¡ ¡ }nt|}|| _t	|t	| j
@ }|rtd|f n¸t|r|d	krd
}n¢|| j
kr´td| n|| jkrÀn~t|s>|| krætd|| | f t|tr&|jtkr |  |dt| j
| jdd ¡|_|j}| j
 |¡ | j |¡ t  ||¡ dS )zåChanges anything not dundered or not a descriptor.

        If an enum member name is used twice, an error is raised; duplicate
        values are not checked for.

        Single underscore (sunder) names are reserved.

        )Ú_order_Ú_create_pseudo_member_Ú_generate_next_value_Ú	_missing_Ú_ignore_z(_names_ are reserved for future Enum user6   Ú_generate_next_valuer8   ú,ú z-_ignore_ cannot specify already set names: %rÚ	__order__r4   zAttempted to reuse key: %rz%r already defined as: %rr   N)r   Ú
ValueErrorÚsetattrÚ
isinstanceÚstrÚreplaceÚsplitÚlistr2   Úsetr0   r   r    r   r
   r,   r+   r9   r   r1   Úappendr.   Ú__setitem__)r!   Úkeyr,   Úalready)r3   r   r   rF   F   s>    	



"z_EnumDict.__setitem__)r(   r%   r)   r*   r/   rF   Ú__classcell__r   r   )r3   r   r-   9   s   r-   c                   sÚ   e Zd ZdZedd Z fddZdd Zd)dddd	d
ddZdd Z	 fddZ
dd Zdd Zdd Zdd Zdd Zedd Zdd Zdd  Z fd!d"Zdddd	d
d#d$Zed%d& Zed'd( Z  ZS )*r   zMetaclass for Enumc             C   s0   t  }|  |¡\}}|d k	r,t|dd |d< |S )Nr6   )r-   Ú_get_mixins_Úgetattr)Úmetaclsr&   ÚbasesÚ	enum_dictÚmember_typeÚ
first_enumr   r   r   Ú__prepare__}   s
    zEnumMeta.__prepare__c          	      s"     dg ¡ d¡  d }x|D ]}  |d ¡ q W |  |¡\}|   |¡\}}}	 fdd jD }
x jD ]
} |= qrW   dd ¡}t|
ddh@ }|r´td d 	|¡¡d	 krÄd
 d	< t
  | || ¡}g |_t |_|_dd | ¡ D }i |_d kr:tk	r:d}tfdd|D s:t| x6 jD ]*}|
| }t|tsf|f}n|}tkrz|f}|	s||}t|dsÒ||_n6||f| }t|dsÒtkrÈ||_n
| |_|j}||_||_|j|  x8|j ¡ D ]\}}|j|jkrú|}P qúW |j |¡ ||kr>t||| ||j|< y||j|< W n tk
rl   Y nX qDW xPdD ]H}t||}t|d }t||d }|d k	rz||krzt||| qzW t d k	rä|rÜ||_!t j|_|d k	rt|t"r
| #dd¡ $¡ }||jkrtd|S )Nr8   c                s   i | ]} | |qS r   r   )Ú.0Úk)Ú	classdictr   r   ú
<dictcomp>   s    z$EnumMeta.__new__.<locals>.<dictcomp>r4   ÚmroÚ zInvalid enum member name: {0}r:   r*   zAn enumeration.c             S   s.   h | ]&}|j  ¡ D ]\}}t|tr|qqS r   )Ú__dict__Úitemsr?   r   )rR   ÚcrS   Úvr   r   r   ú	<setcomp>±   s    z#EnumMeta.__new__.<locals>.<setcomp>r$   )Ú__getnewargs_ex__Ú__getnewargs__r$   Ú
__reduce__c             3   s   | ]}| j kV  qd S )N)rX   )rR   Úm)rO   r   r   ú	<genexpr>Æ   s    z#EnumMeta.__new__.<locals>.<genexpr>Ú_value_)Ú__repr__Ú__str__Ú
__format__r$   r;   z#member order does not match _order_)%Ú
setdefaultrE   ÚpoprJ   Ú
_find_new_r0   rD   r=   ÚformatÚjoinr.   Ú__new__Ú_member_names_r   Ú_member_map_Ú_member_type_rV   Ú_value2member_map_ÚobjectÚanyr'   r?   Útupler   rb   Ú_name_Ú__objclass__r/   rY   r>   r    rK   r   Ú__new_member__r@   rA   rB   )rL   r&   rM   rT   ÚignorerG   rP   rk   Úsave_newÚuse_argsÚenum_membersr   r4   Úinvalid_namesÚ
enum_classÚdynamic_attributesÚmethodsÚmember_namer,   ÚargsÚenum_memberÚcanonical_memberÚclass_methodÚ
obj_methodÚenum_method)r3   )rT   rO   r   rk      s    













zEnumMeta.__new__c             C   s   dS )z6
        classes/types should always be True.
        Tr   )r!   r   r   r   Ú__bool__  s    zEnumMeta.__bool__Nr   )ÚmoduleÚqualnameÚtypeÚstartc            C   s*   |dkr|   | |¡S | j||||||dS )a  Either returns an existing member, or creates a new enum class.

        This method is used both when an enum class is given a value to match
        to an enumeration member (i.e. Color(3)) and for the functional API
        (i.e. Color = Enum('Color', names='RED GREEN BLUE')).

        When used for the functional API:

        `value` will be the name of the new class.

        `names` should be either a string of white-space/comma delimited names
        (values will start at `start`), or an iterator/mapping of name, value pairs.

        `module` should be set to the module this class is being created in;
        if it is not set, an attempt to find that module will be made, but if
        it fails the class will not be picklable.

        `qualname` should be set to the actual location this class can be found
        at in its module; by default it is set to the global scope.  If this is
        not correct, unpickling will fail in some circumstances.

        `type`, if set, will be mixed in as the first base class.

        N)r   r   r   r   )rk   Ú_create_)r&   r,   Únamesr   r   r   r   r   r   r   Ú__call__  s    zEnumMeta.__call__c             C   s6   t |ts dd l}| dtd¡ t || o4|j| jkS )Nr   zHusing non-Enums in containment checks will raise TypeError in Python 3.8r   )r?   r   ÚwarningsÚwarnÚDeprecationWarningrs   rm   )r&   Úmemberr   r   r   r   Ú__contains__:  s    
zEnumMeta.__contains__c                s(   || j krtd| j t  |¡ d S )Nz%s: cannot delete Enum member.)rm   ÚAttributeErrorr(   r.   Ú__delattr__)r&   Úattr)r3   r   r   r   C  s    
zEnumMeta.__delattr__c             C   s   ddddg| j  S )Nr3   r*   Ú__members__r%   )rl   )r!   r   r   r   Ú__dir__K  s    
zEnumMeta.__dir__c             C   s>   t |rt|y
| j| S  tk
r8   t|dY nX dS )a5  Return the enum member matching `name`

        We use __getattr__ instead of descriptors or inserting into the enum
        class' __dict__ in order to support `name` and `value` being both
        properties for enum members (which live in the class' __dict__) and
        enum members themselves.

        N)r   r   rm   ÚKeyError)r&   r   r   r   r   Ú__getattr__O  s    	
zEnumMeta.__getattr__c             C   s
   | j | S )N)rm   )r&   r   r   r   r   Ú__getitem___  s    zEnumMeta.__getitem__c                s    fdd j D S )Nc             3   s   | ]} j | V  qd S )N)rm   )rR   r   )r&   r   r   ra   c  s    z$EnumMeta.__iter__.<locals>.<genexpr>)rl   )r&   r   )r&   r   Ú__iter__b  s    zEnumMeta.__iter__c             C   s
   t | jS )N)r   rl   )r&   r   r   r   Ú__len__e  s    zEnumMeta.__len__c             C   s
   t | jS )z·Returns a mapping of member name->value.

        This mapping lists all enum members, including aliases. Note that this
        is a read-only view of the internal mapping.

        )r   rm   )r&   r   r   r   r   h  s    zEnumMeta.__members__c             C   s
   d| j  S )Nz	<enum %r>)r(   )r&   r   r   r   rc   r  s    zEnumMeta.__repr__c                s    fddt  jD S )Nc             3   s   | ]} j | V  qd S )N)rm   )rR   r   )r&   r   r   ra   v  s    z(EnumMeta.__reversed__.<locals>.<genexpr>)Úreversedrl   )r&   r   )r&   r   Ú__reversed__u  s    zEnumMeta.__reversed__c                s0   | j  di ¡}||krtdt  ||¡ dS )zùBlock attempts to reassign Enum members.

        A simple assignment to the class namespace only changes one of the
        several possible ways to get an Enum member from the Enum class,
        resulting in an inconsistent Enumeration.

        rm   zCannot reassign members.N)rX   Úgetr   r.   Ú__setattr__)r&   r   r,   Ú
member_map)r3   r   r   r   x  s    zEnumMeta.__setattr__c         
   C   s  | j }|dkr| fn|| f}|  |¡\}	}
| ||¡}t|trP| dd¡ ¡ }t|ttfrÄ|rÄt|d trÄ|g  }}g }xDt	|D ]8\}}|
 
||||dd ¡}| |¡ | ||f¡ qW x6|D ].}t|trè|||  }}n|\}}|||< qÊW | ||||¡}|dkrVyt d¡jd }W n* tttfk
rT } zW dd}~X Y nX |dkrjt| n||_|dk	r||_|S )a  Convenience method to create a new Enum class.

        `names` can be:

        * A string containing member names, separated either with spaces or
          commas.  Values are incremented by 1 from `start`.
        * An iterable of member names.  Values are incremented by 1 from `start`.
        * An iterable of (member name, value) pairs.
        * A mapping of member name -> value pairs.

        Nr:   r;   r   r   r(   )r3   rJ   rQ   r?   r@   rA   rB   rr   rC   Ú	enumerater6   rE   rk   ÚsysÚ	_getframeÚ	f_globalsr   r=   r   r'   r%   r)   )r&   Ú
class_namer   r   r   r   r   rL   rM   r   rP   rT   Úoriginal_namesÚlast_valuesÚcountr   r,   Úitemr~   Úmember_valuer{   Úexcr   r   r   r     s<    
 







zEnumMeta._create_c             C   sP   | st tfS dd }| d }t|ts.td|| p8t }|jrHtd||fS )zReturns the type for creating enum members, and the first inherited
        enum class.

        bases: the tuple of bases that was given to __new__

        c             S   sH   xB| D ]:}x4|j D ]*}|tkr"qqd|jkrt|tr8q|S qW qW d S )Nrk   )Ú__mro__rp   rX   Ú
issubclassr   )rM   ÚchainÚbaser   r   r   Ú_find_data_typeÅ  s    


z.EnumMeta._get_mixins_.<locals>._find_data_typer   zZnew enumerations should be created as `EnumName([mixin_type, ...] [data_type,] enum_type)`zCannot extend enumerations)rp   r   r­   r    rl   )rM   r°   rP   rO   r   r   r   rJ   º  s    
zEnumMeta._get_mixins_c       	      C   s   |   dd¡}|dk	}|dkrtxVdD ]H}x8||fD ],}t||d}|ddjtjtjhkr0|}P q0W |dk	r"P q"W tj}|tjkrd}nd}|||fS )a  Returns the __new__ to be used for creating the enum members.

        classdict: the class dictionary given to __new__
        member_type: the data type whose __new__ will be used by default
        first_enum: enumeration to check for an overriding __new__

        rk   N)ru   rk   FT)r   rK   rk   rp   r   )	rT   rO   rP   rk   rw   ÚmethodÚpossibleÚtargetrx   r   r   r   rh   Ú  s(    


zEnumMeta._find_new_)N)r(   r%   r)   r*   ÚclassmethodrQ   rk   r   r   r   r   r   r   r   r   r   Úpropertyr   rc   r   r   r   ÚstaticmethodrJ   rh   rI   r   r   )r3   r   r   {   s(   
 	
5 c               @   s   e Zd ZdZdd Zdd Zedd Zdd	 Zd
d Z	dd Z
dd Zdd Zdd Zedd Zedd ZedddZdS )r   zRGeneric enumeration.

    Derive from this class to define new enumerations.

    c          
   C   s   t || kr|S y
| j| S  tk
r.   Y n6 tk
rb   x | j ¡ D ]}|j|krH|S qHW Y nX yd }|  |¡}W n* tk
r  } z|}d }W d d }~X Y nX t	|| r°|S t
d|| jf }|d krØ|d krØ|n|d kròtd| j|f }||_|d S )Nz%r is not a valid %szDerror in %s._missing_: returned %r instead of None or a valid member)r   ro   r   r    rm   Úvaluesrb   r7   Ú	Exceptionr?   r=   r(   Ú__context__)r&   r,   r   r«   ÚresultÚeÚve_excr   r   r   rk     s6    


zEnum.__new__c          	   C   s8   x2t |D ]"}y|d S  tk
r*   Y q
X q
W |S d S )Nr   )r   r    )r   r   r¨   r§   Ú
last_valuer   r   r   r6   6  s    
zEnum._generate_next_value_c             C   s   t d|| jf d S )Nz%r is not a valid %s)r=   r(   )r&   r,   r   r   r   r7   ?  s    zEnum._missing_c             C   s   d| j j| j| jf S )Nz<%s.%s: %r>)r3   r(   rs   rb   )r!   r   r   r   rc   C  s    zEnum.__repr__c             C   s   d| j j| jf S )Nz%s.%s)r3   r(   rs   )r!   r   r   r   rd   G  s    zEnum.__str__c                s&    fdd j  ¡ D }dddg| S )Nc                s2   g | ]*}|j D ]}|d  dkr| jkr|qqS )r   r   )rX   rm   )rR   r&   r`   )r!   r   r   ú
<listcomp>L  s   
z Enum.__dir__.<locals>.<listcomp>r3   r*   r%   )r3   rV   )r!   Úadded_behaviorr   )r!   r   r   J  s    
zEnum.__dir__c             C   s0   | j tkrt}t| }n| j }| j}| ||¡S )N)rn   rp   r@   rb   re   )r!   Úformat_specr&   Úvalr   r   r   re   S  s    

zEnum.__format__c             C   s
   t | jS )N)Úhashrs   )r!   r   r   r   Ú__hash__b  s    zEnum.__hash__c             C   s   | j | jffS )N)r3   rb   )r!   r"   r   r   r   r$   e  s    zEnum.__reduce_ex__c             C   s   | j S )zThe name of the Enum member.)rs   )r!   r   r   r   r   o  s    z	Enum.namec             C   s   | j S )zThe value of the Enum member.)rb   )r!   r   r   r   r,   t  s    z
Enum.valueNc                s   t tj| }rt n| fdd ¡ D }y|jdd d W n$ tk
rp   |jdd d Y nX | |||d} t| _| | j	¡ | ||< | S )z[
        Create a new Enum subclass that replaces a collection of global constants
        c                s    g | ]} |r|| fqS r   r   )rR   r   )ÚfilterÚsourcer   r   r¾     s   z!Enum._convert.<locals>.<listcomp>c             S   s   | d | d fS )Nr   r   r   )Útr   r   r   Ú<lambda>  ó    zEnum._convert.<locals>.<lambda>)rG   c             S   s   | d S )Nr   r   )rÆ   r   r   r   rÇ     rÈ   )r   )
Úvarsr¢   ÚmodulesÚkeysÚsortr    Ú_reduce_ex_by_namer$   Úupdater   )r&   r   r   rÄ   rÅ   Úmodule_globalsÚmembersr   )rÄ   rÅ   r   Ú_converty  s    

zEnum._convert)N)r(   r%   r)   r*   rk   r6   r´   r7   rc   rd   r   re   rÃ   r$   r   r   r,   rÑ   r   r   r   r   r     s   (		
)Ú	metaclassc               @   s   e Zd ZdZdS )r   z.Enum where members are also (and must be) intsN)r(   r%   r)   r*   r   r   r   r   r     s   c             C   s   | j S )N)r   )r!   r"   r   r   r   rÍ   ¢  s    rÍ   c               @   sp   e Zd ZdZdd Zedd Zedd Zdd	 Zd
d Z	dd Z
dd Zdd Zdd Zdd Zdd ZdS )r   zSupport for flagsc          	   C   sd   |s|dk	r|S dS xBt |D ]6}yt|}P W q tk
rR   td| dY qX qW d|d  S )zñ
        Generate the next value when not given.

        name: the name of the member
        start: the initital start value or None
        count: the number of existing members
        last_value: the last value assigned or None
        Nr   zInvalid Flag value: %rr   )r   Ú	_high_bitr¸   r    )r   r   r¨   r§   r½   Úhigh_bitr   r   r   r6   ¨  s    	zFlag._generate_next_value_c             C   s.   |}|dk r| }|   |¡}|dk r*| }|S )Nr   )r5   )r&   r,   Úoriginal_valueÚpossible_memberr   r   r   r7   »  s    
zFlag._missing_c             C   sb   | j  |d¡}|dkr^t| |\}}|r:td|| jf t | ¡}d|_||_| j  	||¡}|S )zL
        Create a composite member iff value contains only members.
        Nz%r is not a valid %s)
ro   r   Ú
_decomposer=   r(   rp   rk   rs   rb   rf   )r&   r,   Úpseudo_memberr   Úextra_flagsr   r   r   r5   Å  s    
zFlag._create_pseudo_member_c             C   s8   t || js&dd l}| dtd¡ dS |j| j@ |jkS )Nr   zHusing non-Flags in containment checks will raise TypeError in Python 3.8r   F)r?   r3   r   r   r   rb   )r!   Úotherr   r   r   r   r   Ù  s    zFlag.__contains__c             C   sV   | j }| jd k	r$d|j| j| jf S t|| j\}}d|jd dd |D ¡| jf S )Nz<%s.%s: %r>ú|c             S   s   g | ]}t |jp|jqS r   )r@   rs   rb   )rR   r`   r   r   r   r¾   ê  s    z!Flag.__repr__.<locals>.<listcomp>)r3   rs   r(   rb   r×   rj   )r!   r&   rÐ   Ú	uncoveredr   r   r   rc   ã  s    
zFlag.__repr__c             C   s   | j }| jd k	r d|j| jf S t|| j\}}t|dkr^|d jd kr^d|j|d jf S d|jd dd |D ¡f S d S )Nz%s.%sr   r   z%s.%rrÛ   c             S   s   g | ]}t |jp|jqS r   )r@   rs   rb   )rR   r`   r   r   r   r¾   ø  s    z Flag.__str__.<locals>.<listcomp>)r3   rs   r(   r×   rb   r   rj   )r!   r&   rÐ   rÜ   r   r   r   rd   î  s    
zFlag.__str__c             C   s
   t | jS )N)Úboolrb   )r!   r   r   r   r   û  s    zFlag.__bool__c             C   s"   t || jstS |  | j|jB ¡S )N)r?   r3   ÚNotImplementedrb   )r!   rÚ   r   r   r   Ú__or__þ  s    zFlag.__or__c             C   s"   t || jstS |  | j|j@ ¡S )N)r?   r3   rÞ   rb   )r!   rÚ   r   r   r   Ú__and__  s    zFlag.__and__c             C   s"   t || jstS |  | j|jA ¡S )N)r?   r3   rÞ   rb   )r!   rÚ   r   r   r   Ú__xor__  s    zFlag.__xor__c             C   sR   t | j| j\}}|  d¡}x*| jD ] }||kr$|j| j@ s$||B }q$W |  |¡S )Nr   )r×   r3   rb   )r!   rÐ   rÜ   Úinvertedr`   r   r   r   Ú
__invert__  s    
zFlag.__invert__N)r(   r%   r)   r*   r6   r´   r7   r5   r   rc   rd   r   rß   rà   rá   rã   r   r   r   r   r   ¥  s   

c               @   sT   e Zd ZdZedd Zedd Zdd Zdd	 Zd
d Z	eZ
eZe	Zdd ZdS )r	   zSupport for integer-based Flagsc             C   s*   t |tstd|| jf |  |¡}|S )Nz%r is not a valid %s)r?   Úintr=   r(   r5   )r&   r,   Ú
new_memberr   r   r   r7     s    

zIntFlag._missing_c             C   s´   | j  |d ¡}|d kr°|g}t| |\}}xL|rvt|}d| }|| j kr\||kr\| |¡ || krld}q,||N }q,W x6t|D ]*}t | |¡}d |_||_	| j  
||¡}qW |S )Nr   r   )ro   r   r×   rÓ   rE   r   rä   rk   rs   rb   rf   )r&   r,   rØ   Úneed_to_creater   rÙ   ÚbitÚ
flag_valuer   r   r   r5      s&    


zIntFlag._create_pseudo_member_c             C   s0   t || jtfstS |  | j|  |¡jB ¡}|S )N)r?   r3   rä   rÞ   rb   )r!   rÚ   rº   r   r   r   rß   >  s    zIntFlag.__or__c             C   s,   t || jtfstS |  | j|  |¡j@ ¡S )N)r?   r3   rä   rÞ   rb   )r!   rÚ   r   r   r   rà   D  s    zIntFlag.__and__c             C   s,   t || jtfstS |  | j|  |¡jA ¡S )N)r?   r3   rä   rÞ   rb   )r!   rÚ   r   r   r   rá   I  s    zIntFlag.__xor__c             C   s   |   | j ¡}|S )N)r3   rb   )r!   rº   r   r   r   rã   R  s    zIntFlag.__invert__N)r(   r%   r)   r*   r´   r7   r5   rß   rà   rá   Ú__ror__Ú__rand__Ú__rxor__rã   r   r   r   r   r	     s   c             C   s   |   ¡ d S )z@returns index of highest bit, or -1 if value is zero or negativer   )Ú
bit_length)r,   r   r   r   rÓ   W  s    rÓ   c             C   sb   g }x0| j  ¡ D ]"\}}||jkr| ||jf¡ qW |r^d dd |D ¡}td| |f | S )z?Class decorator for enumerations ensuring unique member values.z, c             S   s   g | ]\}}d ||f qS )z%s -> %sr   )rR   Úaliasr   r   r   r   r¾   c  s    zunique.<locals>.<listcomp>z duplicate values found in %r: %s)r   rY   r   rE   rj   r=   )ÚenumerationÚ
duplicatesr   r   Úalias_detailsr   r   r   r   [  s    
c             C   sØ   |}|dk }|r*dd t | j ¡ D }ndd t | j ¡ D }g }x4|D ],\}}|rL||@ |krL| |¡ || M }qLW |s|| jkr| | j| ¡ |jdd dd t|d	krÐ|d j|krÐ| d¡ ||fS )
z#Extract all members from the value.r   c             S   s"   g | ]\}}|j d k	r||fqS )N)r   )rR   r[   r`   r   r   r   r¾   s  s   z_decompose.<locals>.<listcomp>c             S   s*   g | ]"\}}|j d k	st|r||fqS )N)r   Ú_power_of_two)rR   r[   r`   r   r   r   r¾   z  s   c             S   s   | j S )N)rb   )r`   r   r   r   rÇ     rÈ   z_decompose.<locals>.<lambda>T)rG   Úreverser   )rC   ro   rY   rE   rÌ   r   r,   rg   )Úflagr,   Únot_coveredÚnegativeÚflags_to_checkrÐ   r   rª   r   r   r   r×   h  s$    

r×   c             C   s   | dk rdS | dt |  kS )Nr   Fr   )rÓ   )r,   r   r   r   rñ     s    rñ   )r¢   Útypesr   r   Ú_collectionsr   ÚImportErrorÚcollectionsÚ__all__r   r   r   r'   rp   r+   r
   Údictr-   r   r   r   rä   r   rÍ   r   r	   rÓ   r   r×   rñ   r   r   r   r   Ú<module>   s<   ?    qA#ã               @   s¢  d Z ddddddddd	d
dgZyddlmZ W n ek
rB   Y nX ddlmZ ddlmZ ddl	m
Z
 ddlmZ dZdZeefddZeefddZefddZefddZefddZefddZefddZefd d!Zefd"d#Zefd$d%Zefd&d'Zefd(d)Zefd*d+Zefd,d-Zd.efd/efd0efgd0efd1efd.efgd1efd0efd/efgd/efd.efd1efgd2Zd3d Zd4d Z ydd5lm Z  W n ek
r´   Y nX G d6d	 d	Z!ydd7lm!Z! W n ek
rê   Y nX G d8d
 d
e"Z#ed9d:d;d<d=gZ$G d>d? d?e%Z&e" fe'e(he)e*e+fd@dAZ,dRdDdZ-dEdF Z.yddGlm.Z. W n ek
rr   Y nX dHdI Z/dSdKdLZ0dMdN Z1dOdP Z2dQd Z3dJS )TzEfunctools.py - Tools for working with functions and callable objects
Úupdate_wrapperÚwrapsÚWRAPPER_ASSIGNMENTSÚWRAPPER_UPDATESÚtotal_orderingÚ
cmp_to_keyÚ	lru_cacheÚreduceÚpartialÚpartialmethodÚsingledispatché    )r   )Úget_cache_token)Ú
namedtuple)Úrecursive_repr)ÚRLock)Ú
__module__Ú__name__Ú__qualname__Ú__doc__Ú__annotations__)Ú__dict__c          	   C   sn   x<|D ]4}yt ||}W n tk
r,   Y qX t| || qW x$|D ]}t | | t ||i ¡ qDW || _| S )a  Update a wrapper function to look like the wrapped function

       wrapper is the function to be updated
       wrapped is the original function
       assigned is a tuple naming the attributes assigned directly
       from the wrapped function to the wrapper function (defaults to
       functools.WRAPPER_ASSIGNMENTS)
       updated is a tuple naming the attributes of the wrapper that
       are updated with the corresponding attribute from the wrapped
       function (defaults to functools.WRAPPER_UPDATES)
    )ÚgetattrÚAttributeErrorÚsetattrÚupdateÚ__wrapped__)ÚwrapperÚwrappedÚassignedÚupdatedÚattrÚvalue© r"   úD:\Python\lib\functools.pyr   %   s    

c             C   s   t t| ||dS )a  Decorator factory to apply update_wrapper() to a wrapper function

       Returns a decorator that invokes update_wrapper() with the decorated
       function as the wrapper argument and the arguments to wraps() as the
       remaining arguments. Default arguments are as for update_wrapper().
       This is a convenience function to simplify applying partial() to
       update_wrapper().
    )r   r   r   )r	   r   )r   r   r   r"   r"   r#   r   C   s    c             C   s$   |   |¡}||kr|S | o"| |kS )zIReturn a > b.  Computed by @total_ordering from (not a < b) and (a != b).)Ú__lt__)ÚselfÚotherÚNotImplementedÚ	op_resultr"   r"   r#   Ú_gt_from_lt[   s    
r)   c             C   s   |   |¡}|p| |kS )zEReturn a <= b.  Computed by @total_ordering from (a < b) or (a == b).)r$   )r%   r&   r'   r(   r"   r"   r#   Ú_le_from_ltb   s    
r*   c             C   s   |   |¡}||kr|S | S )z=Return a >= b.  Computed by @total_ordering from (not a < b).)r$   )r%   r&   r'   r(   r"   r"   r#   Ú_ge_from_ltg   s    
r+   c             C   s$   |   |¡}||kr|S | p"| |kS )zJReturn a >= b.  Computed by @total_ordering from (not a <= b) or (a == b).)Ú__le__)r%   r&   r'   r(   r"   r"   r#   Ú_ge_from_len   s    
r-   c             C   s"   |   |¡}||kr|S |o | |kS )zFReturn a < b.  Computed by @total_ordering from (a <= b) and (a != b).)r,   )r%   r&   r'   r(   r"   r"   r#   Ú_lt_from_leu   s    
r.   c             C   s   |   |¡}||kr|S | S )z=Return a > b.  Computed by @total_ordering from (not a <= b).)r,   )r%   r&   r'   r(   r"   r"   r#   Ú_gt_from_le|   s    
r/   c             C   s$   |   |¡}||kr|S | o"| |kS )zIReturn a < b.  Computed by @total_ordering from (not a > b) and (a != b).)Ú__gt__)r%   r&   r'   r(   r"   r"   r#   Ú_lt_from_gt   s    
r1   c             C   s   |   |¡}|p| |kS )zEReturn a >= b.  Computed by @total_ordering from (a > b) or (a == b).)r0   )r%   r&   r'   r(   r"   r"   r#   Ú_ge_from_gt   s    
r2   c             C   s   |   |¡}||kr|S | S )z=Return a <= b.  Computed by @total_ordering from (not a > b).)r0   )r%   r&   r'   r(   r"   r"   r#   Ú_le_from_gt   s    
r3   c             C   s$   |   |¡}||kr|S | p"| |kS )zJReturn a <= b.  Computed by @total_ordering from (not a >= b) or (a == b).)Ú__ge__)r%   r&   r'   r(   r"   r"   r#   Ú_le_from_ge   s    
r5   c             C   s"   |   |¡}||kr|S |o | |kS )zFReturn a > b.  Computed by @total_ordering from (a >= b) and (a != b).)r4   )r%   r&   r'   r(   r"   r"   r#   Ú_gt_from_ge   s    
r6   c             C   s   |   |¡}||kr|S | S )z=Return a < b.  Computed by @total_ordering from (not a >= b).)r4   )r%   r&   r'   r(   r"   r"   r#   Ú_lt_from_ge¤   s    
r7   r0   r,   r4   r$   )r$   r,   r0   r4   c                sZ    fddt D }|stdt|}x.t | D ]"\}}||kr0||_t || q0W  S )z6Class decorator that fills in missing ordering methodsc                s(   h | ] }t  |d t t|d k	r|qS )N)r   Úobject)Ú.0Úop)Úclsr"   r#   ú	<setcomp>½   s    z!total_ordering.<locals>.<setcomp>z6must define at least one ordering operation: < > <= >=)Ú_convertÚ
ValueErrorÚmaxr   r   )r;   ÚrootsÚrootÚopnameÚopfuncr"   )r;   r#   r   º   s    c                s   G  fdddt }|S )z,Convert a cmp= function into a key= functionc                   sZ   e Zd ZdgZdd Z fddZ fddZ fdd	Z fd
dZ fddZ	dZ
dS )zcmp_to_key.<locals>.KÚobjc             S   s
   || _ d S )N)rD   )r%   rD   r"   r"   r#   Ú__init__Ð   s    zcmp_to_key.<locals>.K.__init__c                s    | j |j dk S )Nr   )rD   )r%   r&   )Úmycmpr"   r#   r$   Ò   s    zcmp_to_key.<locals>.K.__lt__c                s    | j |j dkS )Nr   )rD   )r%   r&   )rF   r"   r#   r0   Ô   s    zcmp_to_key.<locals>.K.__gt__c                s    | j |j dkS )Nr   )rD   )r%   r&   )rF   r"   r#   Ú__eq__Ö   s    zcmp_to_key.<locals>.K.__eq__c                s    | j |j dkS )Nr   )rD   )r%   r&   )rF   r"   r#   r,   Ø   s    zcmp_to_key.<locals>.K.__le__c                s    | j |j dkS )Nr   )rD   )r%   r&   )rF   r"   r#   r4   Ú   s    zcmp_to_key.<locals>.K.__ge__N)r   r   r   Ú	__slots__rE   r$   r0   rG   r,   r4   Ú__hash__r"   )rF   r"   r#   ÚKÎ   s   rJ   )r8   )rF   rJ   r"   )rF   r#   r   Ì   s    )r   c                   sJ   e Zd ZdZdZ fddZdd Ze dd Zd	d
 Z	dd Z
  ZS )r	   zSNew function with partial application of the given arguments
    and keywords.
    )ÚfuncÚargsÚkeywordsr   Ú__weakref__c                 s   | st dt| dk r t d| ^}}} t|s:t dt| } t|drv|j|  } |j ¡ }| |¡ |}~|j	}t
t| |¡}||_	| |_||_|S )Nz1descriptor '__new__' of partial needs an argumenté   z*type 'partial' takes at least one argumentz#the first argument must be callablerK   )Ú	TypeErrorÚlenÚcallableÚtupleÚhasattrrL   rM   Úcopyr   rK   Úsuperr	   Ú__new__)rL   rM   r;   rK   Ztmpkwr%   )Ú	__class__r"   r#   rW   ñ   s(    




zpartial.__new__c              O   s:   | st d| ^}} |j ¡ }| |¡ |j|j| |S )Nz2descriptor '__call__' of partial needs an argument)rP   rM   rU   r   rK   rL   )rL   rM   r%   Znewkeywordsr"   r"   r#   Ú__call__
  s    

zpartial.__call__c             C   s   t | j}t| jg}| dd | jD ¡ | dd | j ¡ D ¡ t | jdkrld| dd 	|¡ dS | dd 	|¡ dS )	Nc             s   s   | ]}t |V  qd S )N)Úrepr)r9   Úxr"   r"   r#   ú	<genexpr>  s    z#partial.__repr__.<locals>.<genexpr>c             s   s    | ]\}}| d |V  qdS )ú=Nr"   )r9   ÚkÚvr"   r"   r#   r\     s    Ú	functoolsz
functools.ú(z, ú))
Útyper   rZ   rK   ÚextendrL   rM   Úitemsr   Újoin)r%   ÚqualnamerL   r"   r"   r#   Ú__repr__  s    
zpartial.__repr__c             C   s*   t | | jf| j| j| jpd | jp$d ffS )N)rc   rK   rL   rM   r   )r%   r"   r"   r#   Ú
__reduce__  s    zpartial.__reduce__c             C   sÌ   t |tstdt|dkr0tdt| |\}}}}t|rrt |trr|d k	r`t |trr|d k	rzt |tsztdt|}|d kri }nt|tk	r¤t|}|d kr°i }|| _|| _|| _	|| _
d S )Nz(argument to __setstate__ must be a tupleé   zexpected 4 items in state, got zinvalid partial state)Ú
isinstancerS   rP   rQ   rR   Údictrc   r   rK   rL   rM   )r%   ÚstaterK   rL   ÚkwdsÚ	namespacer"   r"   r#   Ú__setstate__   s(    
zpartial.__setstate__)r   r   r   r   rH   rW   rY   r   rh   ri   rp   Ú__classcell__r"   r"   )rX   r#   r	   ê   s   
)r	   c               @   s<   e Zd ZdZdd Zdd Zdd Zdd	 Zed
d Z	dS )r
   zÂMethod descriptor with partial application of the given arguments
    and keywords.

    Supports wrapping existing descriptors and handles non-descriptor
    callables as instance methods.
    c             O   sn   t |s t|ds td |¡t|trX|j| _|j| | _|j 	¡ | _| j 
|¡ n|| _|| _|| _d S )NÚ__get__z${!r} is not callable or a descriptor)rR   rT   rP   Úformatrk   r
   rK   rL   rM   rU   r   )r%   rK   rL   rM   r"   r"   r#   rE   F  s    
zpartialmethod.__init__c             C   sN   d  tt| j¡}d  dd | j ¡ D ¡}d}|j| jj| jj	| j
||dS )Nz, c             s   s   | ]\}}d   ||¡V  qdS )z{}={!r}N)rs   )r9   r^   r_   r"   r"   r#   r\   \  s   z)partialmethod.__repr__.<locals>.<genexpr>z*{module}.{cls}({func}, {args}, {keywords}))Úmoduler;   rK   rL   rM   )rf   ÚmaprZ   rL   rM   re   rs   rX   r   r   rK   )r%   rL   rM   Úformat_stringr"   r"   r#   rh   Z  s    

zpartialmethod.__repr__c                s    fdd} j |_  |_|S )Nc                 s<    j  ¡ }| |¡ | ^}}|f j t| } j||S )N)rM   rU   r   rL   rS   rK   )rL   rM   Úcall_keywordsÚcls_or_selfÚrestÚ	call_args)r%   r"   r#   Ú_methodf  s
    

z3partialmethod._make_unbound_method.<locals>._method)Ú__isabstractmethod__Ú_partialmethod)r%   r{   r"   )r%   r#   Ú_make_unbound_methode  s    z"partialmethod._make_unbound_methodc             C   s   t | jdd }d }|d k	rd|||}|| jk	rdt|f| j| j}y|j|_W n tk
rb   Y nX |d kr||  ¡  ||¡}|S )Nrr   )	r   rK   r	   rL   rM   Ú__self__r   r~   rr   )r%   rD   r;   ÚgetÚresultÚnew_funcr"   r"   r#   rr   p  s    

zpartialmethod.__get__c             C   s   t | jddS )Nr|   F)r   rK   )r%   r"   r"   r#   r|     s    z"partialmethod.__isabstractmethod__N)
r   r   r   r   rE   rh   r~   rr   Úpropertyr|   r"   r"   r"   r#   r
   >  s   Ú	CacheInfoÚhitsÚmissesÚmaxsizeÚcurrsizec               @   s(   e Zd ZdZdZefddZdd ZdS )Ú
_HashedSeqzÃ This class guarantees that hash() will be called no more than once
        per element.  This is important because the lru_cache() will hash
        the key multiple times on a cache miss.

    Ú	hashvaluec             C   s   || d d < ||| _ d S )N)r   )r%   ÚtupÚhashr"   r"   r#   rE     s    z_HashedSeq.__init__c             C   s   | j S )N)r   )r%   r"   r"   r#   rI     s    z_HashedSeq.__hash__N)r   r   r   r   rH   r   rE   rI   r"   r"   r"   r#   r     s   r   c       
         s   | }|r*||7 }x|  ¡ D ]}	||	7 }qW |rl|| fdd| D 7 }|r|| fdd| ¡ D 7 }n$||dkr |d |kr|d S t|S )a  Make a cache key from optionally typed positional and keyword arguments

    The key is constructed in a way that is flat as possible rather than
    as a nested structure that would take more memory.

    If there is only a single argument and its data type is known to cache
    its hash value, then that argument is returned without a wrapper.  This
    saves space and improves lookup speed.

    c             3   s   | ]} |V  qd S )Nr"   )r9   r_   )rc   r"   r#   r\   ¶  s    z_make_key.<locals>.<genexpr>c             3   s   | ]} |V  qd S )Nr"   )r9   r_   )rc   r"   r#   r\   ¸  s    é   r   )re   Úvaluesr   )
rL   rn   ÚtypedÚkwd_markÚ	fasttypesrS   rc   rQ   ÚkeyÚitemr"   )rc   r#   Ú	_make_key  s     r   é   Fc                s:   t  tr dk r(d n dk	r(td fdd}|S )a  Least-recently-used cache decorator.

    If *maxsize* is set to None, the LRU features are disabled and the cache
    can grow without bound.

    If *typed* is True, arguments of different types will be cached separately.
    For example, f(3.0) and f(3) will be treated as distinct calls with
    distinct results.

    Arguments to the cached function must be hashable.

    View the cache statistics named tuple (hits, misses, maxsize, currsize)
    with f.cache_info().  Clear the cache and statistics with f.cache_clear().
    Access the underlying function with f.__wrapped__.

    See:  http://en.wikipedia.org/wiki/Cache_algorithms#Least_Recently_Used

    r   Nz)Expected maxsize to be an integer or Nonec                s   t |  t}t|| S )N)Ú_lru_cache_wrapperÚ
_CacheInfor   )Úuser_functionr   )r   r   r"   r#   Údecorating_functionß  s    z&lru_cache.<locals>.decorating_function)rk   ÚintrP   )r   r   r   r"   )r   r   r#   r   ½  s    
c                sò   t  td\ i d 	djjt 
g d d gd d < dkrhfdd}nNd kr	fdd}n* 	
fdd}	
fdd	}	
fd
d}||_||_|S )N)r   r   rO   é   r   Fc                 s    d7  | |}|S )Nr   r"   )rL   rn   r   )r   r   r"   r#   r   ö  s    
z#_lru_cache_wrapper.<locals>.wrapperc                 sH   | |}|}|k	r*d7 |S d7 | |}| |< |S )Nr   r"   )rL   rn   r   r   )ÚcacheÚ	cache_getr   Úmake_keyr   Úsentinelr   r   r"   r#   r   ÿ  s    

c           	      s2  
| |}	n |}|d k	rr|\}}}}||< ||<  }| |< < ||< |< d7 |S d7 W d Q R X | |}	 |krnrî}	||	 < ||	< |	   }
 }d   < < |
= |	|< n6 }|||g}| |<  < |<  kW d Q R X |S )Nr   r"   )rL   rn   r   ÚlinkZ	link_prevZ	link_nextZ_keyr   ÚlastZoldrootZoldkeyZ	oldresult)ÚKEYÚNEXTÚPREVÚRESULTr   r   Ú	cache_lenÚfullr   Úlockr   r   r   rA   r   r   r"   r#   r     sB    

c            	      s       S Q R X dS )zReport cache statisticsNr"   r"   )r   r¦   r   r¨   r   r   r"   r#   Ú
cache_infoG  s    z&_lru_cache_wrapper.<locals>.cache_infoc            	      s<   .    ¡  ddgdd< d dW dQ R X dS )z$Clear the cache and cache statisticsNr   F)Úclearr"   )r   r§   r   r¨   r   rA   r"   r#   Úcache_clearL  s
    z'_lru_cache_wrapper.<locals>.cache_clear)r8   r   r   Ú__len__r   r©   r«   )r   r   r   r   r   r©   r«   r"   )r¢   r£   r¤   r¥   r   r   r   r¦   r§   r   r¨   r   r   r   rA   r   r   r   r#   r   å  s*    *9	r   )r   c             C   s   g }xdd | D } | s|S x:| D ]2}|d }x$| D ]}||dd kr4d}P q4W P q"W |dkrht d| |¡ x| D ]}|d |krx|d= qxW qW dS )zMerges MROs in *sequences* to a single MRO using the C3 algorithm.

    Adapted from http://www.python.org/download/releases/2.3/mro/.

    c             S   s   g | ]}|r|qS r"   r"   )r9   Úsr"   r"   r#   ú
<listcomp>k  s    z_c3_merge.<locals>.<listcomp>r   r   NzInconsistent hierarchy)ÚRuntimeErrorÚappend)Ú	sequencesr   Ús1Ú	candidateÚs2Úseqr"   r"   r#   Ú	_c3_mergec  s$    



r¶   Nc       
         s$  x8t t| jD ]"\}tdrt| j| }P qW d} rFt ng  t| jd| }g }t| j|d }x8 D ]0t| rxtfdd| jD sx| ¡ qxW x|D ]  	¡ q²W  fdd|D } fdd|D } fd	d|D }	t
| gg| | |	 |g |g |g S )
a  Computes the method resolution order using extended C3 linearization.

    If no *abcs* are given, the algorithm works exactly like the built-in C3
    linearization used for method resolution.

    If given, *abcs* is a list of abstract base classes that should be inserted
    into the resulting MRO. Unrelated ABCs are ignored and don't end up in the
    result. The algorithm inserts ABCs where their functionality is introduced,
    i.e. issubclass(cls, abc) returns True for the class itself but returns
    False for all its direct base classes. Implicit ABCs for a given class
    (either registered or inferred from the presence of a special method like
    __len__) are inserted directly after the last ABC explicitly listed in the
    MRO of said class. If two implicit ABCs end up next to each other in the
    resulting MRO, their ordering depends on the order of types in *abcs*.

    Ú__abstractmethods__r   Nc             3   s   | ]}t | V  qd S )N)Ú
issubclass)r9   Úb)Úbaser"   r#   r\     s    z_c3_mro.<locals>.<genexpr>c                s   g | ]}t | d qS ))Úabcs)Ú_c3_mro)r9   rº   )r»   r"   r#   r®   ¢  s    z_c3_mro.<locals>.<listcomp>c                s   g | ]}t | d qS ))r»   )r¼   )r9   rº   )r»   r"   r#   r®   £  s    c                s   g | ]}t | d qS ))r»   )r¼   )r9   rº   )r»   r"   r#   r®   ¤  s    )Ú	enumerateÚreversedÚ	__bases__rT   rQ   Úlistr¸   Úanyr°   Úremover¶   )
r;   r»   ÚiÚboundaryÚexplicit_basesÚabstract_basesÚother_basesÚexplicit_c3_mrosÚabstract_c3_mrosÚother_c3_mrosr"   )r»   rº   r#   r¼   ~  s(    


r¼   c                sü   t j  fddfddD fddfddD t g }xD ]}g }x<| ¡ D ]0}| krlt|rl| fdd|jD ¡ qlW |s°| |¡ qZ|jtd	d
 x,|D ]$}x|D ]}||krÎ| |¡ qÎW qÄW qZW t|dS )zÛCalculates the method resolution order for a given class *cls*.

    Includes relevant abstract base classes (with their respective bases) from
    the *types* iterable. Uses a modified C3 linearization algorithm.

    c                s   |  kot | dot| S )NÚ__mro__)rT   r¸   )Útyp)Úbasesr;   r"   r#   Ú
is_related´  s    z _compose_mro.<locals>.is_relatedc                s   g | ]} |r|qS r"   r"   )r9   Ún)rÎ   r"   r#   r®   ·  s    z _compose_mro.<locals>.<listcomp>c                s(   x" D ]}| |kr| |j krdS qW dS )NTF)rË   )rÌ   r&   )Útypesr"   r#   Úis_strict_baseº  s    
z$_compose_mro.<locals>.is_strict_basec                s   g | ]} |s|qS r"   r"   )r9   rÏ   )rÑ   r"   r#   r®   ¿  s    c                s   g | ]}| kr|qS r"   r"   )r9   r­   )Útype_setr"   r#   r®   È  s    T)r   Úreverse)r»   )ÚsetrË   Ú__subclasses__r¸   r°   ÚsortrQ   r¼   )r;   rÐ   ÚmrorÌ   ÚfoundÚsubÚsubclsr"   )rÍ   r;   rÎ   rÑ   rÒ   rÐ   r#   Ú_compose_mro«  s*    




rÛ   c             C   sv   t | | ¡ }d}xX|D ]P}|dk	r\||krZ|| jkrZ|| jkrZt||sZtd ||¡P ||kr|}qW | |¡S )a^  Returns the best matching implementation from *registry* for type *cls*.

    Where there is no registered implementation for a specific type, its method
    resolution order is used to find a more generic implementation.

    Note: if *registry* does not contain an implementation for the base
    *object* type, this function may return None.

    NzAmbiguous dispatch: {} or {})rÛ   ÚkeysrË   r¸   r¯   rs   r   )r;   Úregistryr×   ÚmatchÚtr"   r"   r#   Ú
_find_implÔ  s    




rà   c                s   ddl }ddl}i | ¡ d  fddd fdd	fdd}t| d	d
| t< |_|_| ¡|_j	|_
t||  |S )ak  Single-dispatch generic function decorator.

    Transforms a function into a generic function, which can have different
    behaviours depending upon the type of its first argument. The decorated
    function acts as the default implementation, and additional
    implementations can be registered using the register() attribute of the
    generic function.
    r   Nc                s|    dk	r"t  } |kr" ¡  | y|  }W nH tk
rv   y|  }W n tk
rh   t| }Y nX || < Y nX |S )zÌgeneric_func.dispatch(cls) -> <function implementation>

        Runs the dispatch algorithm to return the best available implementation
        for the given *cls* registered on *generic_func*.

        N)r   rª   ÚKeyErrorrà   )r;   Úcurrent_tokenÚimpl)Úcache_tokenÚdispatch_cacherÝ   r"   r#   Údispatch   s    z singledispatch.<locals>.dispatchc                s´   |dkrt  tr  fddS t di }|s@td d }ddlm} tt|| ¡ \} t  tst	d	|d
 d| < dkr¨t
 dr¨t  ¡  |S )zgeneric_func.register(cls, func) -> func

        Registers a new implementation for the given *cls* on a *generic_func*.

        Nc                s
    | S )Nr"   )Úf)r;   Úregisterr"   r#   Ú<lambda>   ó    z2singledispatch.<locals>.register.<locals>.<lambda>r   z(Invalid first argument to `register()`: zS. Use either `@register(some_class)` or plain `@register` on an annotated function.r   )Úget_type_hintszInvalid annotation for z. z is not a class.r·   )rk   rc   r   rP   Útypingrë   ÚnextÚiterre   ÚAssertionErrorrT   r   rª   )r;   rK   Úannrë   Úargname)rä   rå   rè   rÝ   )r;   r#   rè     s"    
z singledispatch.<locals>.registerc                 s&   | st  d | d j| |S )Nz( requires at least 1 positional argumentr   )rP   rX   )rL   Úkw)ræ   Úfuncnamer"   r#   r   6  s    zsingledispatch.<locals>.wrapperr   zsingledispatch function)N)rÐ   ÚweakrefÚWeakKeyDictionaryr   r8   rè   ræ   ÚMappingProxyTyperÝ   rª   Ú_clear_cacher   )rK   rÐ   rô   r   r"   )rä   ræ   rå   ró   rè   rÝ   r#   r   î  s    
)r   F)N)4r   Ú__all__Ú
_functoolsr   ÚImportErrorÚabcr   Úcollectionsr   Úreprlibr   Ú_threadr   r   r   r   r   r'   r)   r*   r+   r-   r.   r/   r1   r2   r3   r5   r6   r7   r=   r   r   r	   r8   r
   r   rÀ   r   r   ÚstrrS   rc   rQ   r   r   r   r¶   r¼   rÛ   rà   r   r"   r"   r"   r#   Ú<module>   s   


NN
(t
-)ã               @   s   d Z ddlZddlZddddddd	d
dddgZdd Zdd
 Zdd	 Zdd Zdd Zdd Z	dd Z
dd Zdd Zdd Zdd Zdd Zdd ZdS )z
Path operations common to more than one OS
Do not use directly.  The OS specific modules import the appropriate
functions from this module themselves.
é    NÚcommonprefixÚexistsÚgetatimeÚgetctimeÚgetmtimeÚgetsizeÚisdirÚisfileÚsamefileÚsameopenfileÚsamestatc             C   s(   yt  | ¡ W n tk
r"   dS X dS )zDTest whether a path exists.  Returns False for broken symbolic linksFT)ÚosÚstatÚOSError)Úpath© r   úD:\Python\lib\genericpath.pyr      s
    c             C   s0   yt  | ¡}W n tk
r"   dS X t |j¡S )z%Test whether a path is a regular fileF)r   r   r   ÚS_ISREGÚst_mode)r   Ústr   r   r   r	      s
    c             C   s0   yt  | ¡}W n tk
r"   dS X t |j¡S )z<Return true if the pathname refers to an existing directory.F)r   r   r   ÚS_ISDIRr   )Úsr   r   r   r   r   '   s
    c             C   s   t  | ¡jS )z1Return the size of a file, reported by os.stat().)r   r   Úst_size)Úfilenamer   r   r   r   0   s    c             C   s   t  | ¡jS )zCReturn the last modification time of a file, reported by os.stat().)r   r   Úst_mtime)r   r   r   r   r   5   s    c             C   s   t  | ¡jS )z=Return the last access time of a file, reported by os.stat().)r   r   Úst_atime)r   r   r   r   r   :   s    c             C   s   t  | ¡jS )zAReturn the metadata change time of a file, reported by os.stat().)r   r   Úst_ctime)r   r   r   r   r   ?   s    c             C   sl   | sdS t | d ttfs*tttj| } t| }t| }x,t|D ] \}}||| krD|d| S qDW |S )zGGiven a list of pathnames, returns the longest common leading componentÚ r   N)	Ú
isinstanceÚlistÚtupleÚmapr   ÚfspathÚminÚmaxÚ	enumerate)ÚmÚs1Ús2ÚiÚcr   r   r   r   E   s     c             C   s   | j |j ko| j|jkS )z5Test whether two stat buffers reference the same file)Úst_inoÚst_dev)r'   r(   r   r   r   r   W   s    c             C   s   t  | ¡}t  |¡}t||S )z9Test whether two pathnames reference the same actual file)r   r   r   )Úf1Úf2r'   r(   r   r   r   r
   ^   s    

c             C   s   t  | ¡}t  |¡}t||S )z:Test whether two open file objects reference the same file)r   Úfstatr   )Úfp1Úfp2r'   r(   r   r   r   r   g   s    

c             C   s   |   |¡}|r"|   |¡}t||}|   |¡}||kr~|d }x@||k r|| ||d  |krr| d| | |d fS |d7 }q>W | | dd fS )z¤Split the extension from a pathname.

    Extension is everything from the last dot to the end, ignoring
    leading dots.  Returns "(root, ext)"; ext may be empty.é   Nr   )Úrfindr$   )ÚpÚsepÚaltsepÚextsepÚsepIndexÚaltsepIndexÚdotIndexÚfilenameIndexr   r   r   Ú	_splitextu   s    




r<   c             G   sb   d }}xB|D ]:}t |tr"d}qt |tr2d}qtd| |jjf d qW |r^|r^tdd d S )NFTz*%s() argument must be str or bytes, not %rz.Can't mix strings and bytes in path components)r   ÚstrÚbytesÚ	TypeErrorÚ	__class__Ú__name__)ÚfuncnameÚargsÚhasstrÚhasbytesr   r   r   r   Ú_check_arg_types   s    


rF   )Ú__doc__r   r   Ú__all__r   r	   r   r   r   r   r   r   r   r
   r   r<   rF   r   r   r   r   Ú<module>   s$   

		ã               @   sZ  d Z dZdddddddd	gZd
d Zdd Zdd Zdd	 Zdd Zdd Zdd Z	dd Z
dd Zdd Zdd Zdd Zdddd dZd)d!dZd*d"dZyd#d$lT W n ek
rÀ   Y nX yd#d%lm	Z	 W n ek
ræ   Y nX yd#d&lm
Z
 W n ek
r   Y nX yd#d'lmZ W n ek
r6   Y nX ed(krVd#dlZee ¡  dS )+aï  Heap queue algorithm (a.k.a. priority queue).

Heaps are arrays for which a[k] <= a[2*k+1] and a[k] <= a[2*k+2] for
all k, counting elements from 0.  For the sake of comparison,
non-existing elements are considered to be infinite.  The interesting
property of a heap is that a[0] is always its smallest element.

Usage:

heap = []            # creates an empty heap
heappush(heap, item) # pushes a new item on the heap
item = heappop(heap) # pops the smallest item from the heap
item = heap[0]       # smallest item on the heap without popping it
heapify(x)           # transforms list into a heap, in-place, in linear time
item = heapreplace(heap, item) # pops and returns smallest item, and adds
                               # new item; the heap size is unchanged

Our API differs from textbook heap algorithms as follows:

- We use 0-based indexing.  This makes the relationship between the
  index for a node and the indexes for its children slightly less
  obvious, but is more suitable since Python uses 0-based indexing.

- Our heappop() method returns the smallest item, not the largest.

These two make it possible to view the heap as a regular Python list
without surprises: heap[0] is the smallest item, and heap.sort()
maintains the heap invariant!
uo  Heap queues

[explanation by FranÃ§ois Pinard]

Heaps are arrays for which a[k] <= a[2*k+1] and a[k] <= a[2*k+2] for
all k, counting elements from 0.  For the sake of comparison,
non-existing elements are considered to be infinite.  The interesting
property of a heap is that a[0] is always its smallest element.

The strange invariant above is meant to be an efficient memory
representation for a tournament.  The numbers below are `k', not a[k]:

                                   0

                  1                                 2

          3               4                5               6

      7       8       9       10      11      12      13      14

    15 16   17 18   19 20   21 22   23 24   25 26   27 28   29 30


In the tree above, each cell `k' is topping `2*k+1' and `2*k+2'.  In
a usual binary tournament we see in sports, each cell is the winner
over the two cells it tops, and we can trace the winner down the tree
to see all opponents s/he had.  However, in many computer applications
of such tournaments, we do not need to trace the history of a winner.
To be more memory efficient, when a winner is promoted, we try to
replace it by something else at a lower level, and the rule becomes
that a cell and the two cells it tops contain three different items,
but the top cell "wins" over the two topped cells.

If this heap invariant is protected at all time, index 0 is clearly
the overall winner.  The simplest algorithmic way to remove it and
find the "next" winner is to move some loser (let's say cell 30 in the
diagram above) into the 0 position, and then percolate this new 0 down
the tree, exchanging values, until the invariant is re-established.
This is clearly logarithmic on the total number of items in the tree.
By iterating over all items, you get an O(n ln n) sort.

A nice feature of this sort is that you can efficiently insert new
items while the sort is going on, provided that the inserted items are
not "better" than the last 0'th element you extracted.  This is
especially useful in simulation contexts, where the tree holds all
incoming events, and the "win" condition means the smallest scheduled
time.  When an event schedule other events for execution, they are
scheduled into the future, so they can easily go into the heap.  So, a
heap is a good structure for implementing schedulers (this is what I
used for my MIDI sequencer :-).

Various structures for implementing schedulers have been extensively
studied, and heaps are good for this, as they are reasonably speedy,
the speed is almost constant, and the worst case is not much different
than the average case.  However, there are other representations which
are more efficient overall, yet the worst cases might be terrible.

Heaps are also very useful in big disk sorts.  You most probably all
know that a big sort implies producing "runs" (which are pre-sorted
sequences, which size is usually related to the amount of CPU memory),
followed by a merging passes for these runs, which merging is often
very cleverly organised[1].  It is very important that the initial
sort produces the longest runs possible.  Tournaments are a good way
to that.  If, using all the memory available to hold a tournament, you
replace and percolate items that happen to fit the current run, you'll
produce runs which are twice the size of the memory for random input,
and much better for input fuzzily ordered.

Moreover, if you output the 0'th item on disk and get an input which
may not fit in the current tournament (because the value "wins" over
the last output value), it cannot fit in the heap, so the size of the
heap decreases.  The freed memory could be cleverly reused immediately
for progressively building a second heap, which grows at exactly the
same rate the first heap is melting.  When the first heap completely
vanishes, you switch heaps and start a new run.  Clever and quite
effective!

In a word, heaps are useful memory structures to know.  I use them in
a few applications, and I think it is good to keep a `heap' module
around. :-)

--------------------
[1] The disk balancing algorithms which are current, nowadays, are
more annoying than clever, and this is a consequence of the seeking
capabilities of the disks.  On devices which cannot seek, like big
tape drives, the story was quite different, and one had to be very
clever to ensure (far in advance) that each tape movement will be the
most effective possible (that is, will best participate at
"progressing" the merge).  Some tapes were even able to read
backwards, and this was also used to avoid the rewinding time.
Believe me, real good tape sorts were quite spectacular to watch!
From all times, sorting has always been a Great Art! :-)
ÚheappushÚheappopÚheapifyÚheapreplaceÚmergeÚnlargestÚ	nsmallestÚheappushpopc             C   s"   |   |¡ t| dt| d  dS )z4Push item onto heap, maintaining the heap invariant.é    é   N)ÚappendÚ	_siftdownÚlen)ÚheapÚitem© r   úD:\Python\lib\heapq.pyr      s    
c             C   s.   |   ¡ }| r*| d }|| d< t| d |S |S )zCPop the smallest item off the heap, maintaining the heap invariant.r	   )ÚpopÚ_siftup)r   ÚlasteltÚ
returnitemr   r   r   r      s    
c             C   s   | d }|| d< t | d |S )a²  Pop and return the current smallest value, and add the new item.

    This is more efficient than heappop() followed by heappush(), and can be
    more appropriate when using a fixed-size heap.  Note that the value
    returned may be larger than item!  That constrains reasonable uses of
    this routine unless written as part of a conditional replacement:

        if item > heap[0]:
            item = heapreplace(heap, item)
    r	   )r   )r   r   r   r   r   r   r      s    
c             C   s0   | r,| d |k r,| d | }| d< t | d |S )z1Fast version of a heappush followed by a heappop.r	   )r   )r   r   r   r   r   r   ¡   s    
c             C   s0   t | }x"tt|d D ]}t| | qW dS )z8Transform list into a heap, in-place, in O(len(x)) time.é   N)r   ÚreversedÚranger   )ÚxÚnÚir   r   r   r   ¨   s    c             C   s.   |   ¡ }| r*| d }|| d< t| d |S |S )zMaxheap version of a heappop.r	   )r   Ú_siftup_max)r   r   r   r   r   r   Ú_heappop_max³   s    
r   c             C   s   | d }|| d< t | d |S )z4Maxheap version of a heappop followed by a heappush.r	   )r   )r   r   r   r   r   r   Ú_heapreplace_max½   s    
r   c             C   s0   t | }x"tt|d D ]}t| | qW dS )z;Transform list into a maxheap, in-place, in O(len(x)) time.r   N)r   r   r   r   )r   r   r   r   r   r   Ú_heapify_maxÄ   s    r   c             C   sN   | | }x8||kr@|d d? }| | }||k r<|| |< |}q
P q
W || |< d S )Nr
   r   )r   ÚstartposÚposÚnewitemÚ	parentposÚparentr   r   r   r   Í   s    
r   c             C   s   t | }|}| | }d| d }xL||k rl|d }||k rN| | | | k sN|}| | | |< |}d| d }q"W || |< t| || d S )Nr   r
   )r   r   )r   r!   Úendposr    r"   ÚchildposÚrightposr   r   r   r     s    
r   c             C   sN   | | }x8||kr@|d d? }| | }||k r<|| |< |}q
P q
W || |< dS )zMaxheap variant of _siftdownr
   Nr   )r   r    r!   r"   r#   r$   r   r   r   Ú_siftdown_max  s    
r(   c             C   s   t | }|}| | }d| d }xL||k rl|d }||k rN| | | | k sN|}| | | |< |}d| d }q"W || |< t| || dS )zMaxheap variant of _siftupr   r
   N)r   r(   )r   r!   r%   r    r"   r&   r'   r   r   r   r   %  s    
r   NF)ÚkeyÚreversec          	   g   s4  g }|j }|r t}t}t}d}nt}t}t}d}| dkr"xNttt	|D ]<\}	}
y|
j
}|| |	| |g W qJ tk
r   Y qJX qJW || xdt|dkröy6x0|d  \}}	}}|V  | |d< ||| q¤W W q tk
rò   || Y qX qW |r|d \}}	}|V  |jE dH  dS x\ttt	|D ]J\}	}
y(|
j
}| }|| ||	| ||g W n tk
rx   Y nX q2W || x~t|dkryJxD|d  \}}	}}}|V  | }| ||d< ||d< ||| qW W n tk
r    || Y nX qW |r0|d \}}	}}|V  |jE dH  dS )ak  Merge multiple sorted inputs into a single sorted output.

    Similar to sorted(itertools.chain(*iterables)) but returns a generator,
    does not pull the data into memory all at once, and assumes that each of
    the input streams is already sorted (smallest to largest).

    >>> list(merge([1,3,5,7], [0,2,4,8], [5,10,15,20], [], [25]))
    [0, 1, 2, 3, 4, 5, 5, 7, 8, 10, 15, 20, 25]

    If *key* is not None, applies a key function to each element to determine
    its sort order.

    >>> list(merge(['dog', 'horse'], ['cat', 'fish', 'kangaroo'], key=len))
    ['dog', 'cat', 'fish', 'horse', 'kangaroo']

    éÿÿÿÿr
   Nr	   r   )r   r   r   r   r   r   r   Ú	enumerateÚmapÚiterÚ__next__ÚStopIterationr   Ú__self__)r)   r*   Ú	iterablesÚhÚh_appendÚ_heapifyÚ_heappopÚ_heapreplaceÚ	directionÚorderÚitÚnextÚvalueÚsÚ	key_valuer   r   r   r   :  sp    


c          	      sÒ  | dkrLt |}t } dkr,t||d}nt|| d}||krFg S |gS yt|}W n ttfk
rp   Y nX | |krt| dd|  S  dkr*t |}dd tt| |D }|sÀ|S t	| |d d }| }t
}	x6|D ].}
|
|k râ|	||
|f |d \}}|d7 }qâW | ¡  d	d |D S t |} fd
dtt| |D }|sX|S t	| |d d }| }t
}	xF|D ]>}
 |
}||k rz|	||||
f |d \}}}|d7 }qzW | ¡  dd |D S )zbFind the n smallest elements in a dataset.

    Equivalent to:  sorted(iterable, key=key)[:n]
    r
   N)Údefault)r?   r)   )r)   c             S   s   g | ]\}}||fqS r   r   )Ú.0r   Úelemr   r   r   ú
<listcomp>ë  s    znsmallest.<locals>.<listcomp>r	   c             S   s   g | ]\}}|qS r   r   )r@   rA   r9   r   r   r   rB   ø  s    c                s   g | ]\}} |||fqS r   r   )r@   r   rA   )r)   r   r   rB   ü  s    c             S   s   g | ]\}}}|qS r   r   )r@   Úkr9   rA   r   r   r   rB   
  s    )r.   ÚobjectÚminr   Ú	TypeErrorÚAttributeErrorÚsortedÚzipr   r   r   Úsort)r   Úiterabler)   r:   ÚsentinelÚresultÚsizeÚtopr9   r7   rA   Ú_orderrC   Ú_elemr   )r)   r   r   Í  sZ    



c          	      sì  | dkrLt |}t } dkr,t||d}nt|| d}||krFg S |gS yt|}W n ttfk
rp   Y n X | |krt| ddd|  S  dkr8t |}dd ttd	|  d
|D }|sÈ|S t	| |d	 d	 }|  }t
}	x6|D ].}
||
k rì|	||
|f |d	 \}}|d8 }qìW |jdd dd |D S t |} fddttd	|  d
|D }|sl|S t	| |d	 d	 }|  }t
}	xF|D ]>}
 |
}||k r|	||||
f |d	 \}}}|d8 }qW |jdd dd |D S )zoFind the n largest elements in a dataset.

    Equivalent to:  sorted(iterable, key=key, reverse=True)[:n]
    r
   N)r?   )r?   r)   T)r)   r*   c             S   s   g | ]\}}||fqS r   r   )r@   r   rA   r   r   r   rB   (  s    znlargest.<locals>.<listcomp>r	   r+   )r*   c             S   s   g | ]\}}|qS r   r   )r@   rA   r9   r   r   r   rB   5  s    c                s   g | ]\}} |||fqS r   r   )r@   r   rA   )r)   r   r   rB   9  s    c             S   s   g | ]\}}}|qS r   r   )r@   rC   r9   rA   r   r   r   rB   G  s    )r.   rD   Úmaxr   rF   rG   rH   rI   r   r   r   rJ   )r   rK   r)   r:   rL   rM   rN   rO   r9   r7   rA   rP   rC   rQ   r   )r)   r   r     sZ    

"

r	   )Ú*)r   )r   )r   Ú__main__)N)N)Ú__doc__Ú	__about__Ú__all__r   r   r   r   r   r   r   r   r   r   r(   r   r   r   r   Ú_heapqÚImportErrorÚ__name__ÚdoctestÚprintÚtestmodr   r   r   r   Ú<module>   sL   `



	5 
?
>
ã               @   sj  d Z ddddgZddlZddlZyddlZW n, ek
rX   ddlmZ e ee¡ Y n@X d	e_	d
e_
ye dd¡e_W n ek
r   Y nX eejd	< yddlZW n0 ek
rÔ   ddlmZ e e¡ ee_Y nBX de_	d
e_
ye dd¡e_W n ek
r
   Y nX eejd< ejZejZddlZddlZddlmZ dd ZdddZdddZi Zdd ZdS )z'A pure Python implementation of import.Ú
__import__Úimport_moduleÚinvalidate_cachesÚreloadé    Né   )Ú
_bootstrapzimportlib._bootstrapÚ	importlibz__init__.pyz_bootstrap.py)Ú_bootstrap_externalzimportlib._bootstrap_externalz_bootstrap_external.py)r   c              C   s&   x t jD ]} t| dr|  ¡  qW dS )zmCall the invalidate_caches() method on all meta path finders stored in
    sys.meta_path (where implemented).r   N)ÚsysÚ	meta_pathÚhasattrr   )Úfinder© r   ú#D:\Python\lib\importlib\__init__.pyr   B   s    
c             C   sÄ   t jdtdd y,tj|  j}|dkr6td | ¡n|S W n6 tk
rP   Y n$ t	k
rr   td | ¡dY nX t
 | |¡}|dkrdS |jdkr¾|jdkr²td | ¡| dtd	| d|jS )
z¹Return the loader for the specified module.

    This is a backward-compatible wrapper around find_spec().

    This function is deprecated in favor of importlib.util.find_spec().

    zDDeprecated since Python 3.4. Use importlib.util.find_spec() instead.é   )Ú
stacklevelNz{}.__loader__ is Nonez{}.__loader__ is not setzspec for {} missing loader)Únamez&namespace packages do not have loaders)ÚwarningsÚwarnÚDeprecationWarningr
   ÚmodulesÚ
__loader__Ú
ValueErrorÚformatÚKeyErrorÚAttributeErrorr   Ú
_find_specÚloaderÚsubmodule_search_locationsÚImportError)r   Úpathr   Úspecr   r   r   Úfind_loaderJ   s*    



r"   c             C   sZ   d}|   d¡rD|s$d}t| | ¡x| D ]}|dkr8P |d7 }q*W t | |d ||¡S )zÞImport a module.

    The 'package' argument is required when performing a relative import. It
    specifies the package to use as the anchor point from which to resolve the
    relative import to an absolute import.

    r   Ú.zHthe 'package' argument is required to perform a relative import for {!r}r   N)Ú
startswithÚ	TypeErrorr   r   Ú_gcd_import)r   ÚpackageÚlevelÚmsgÚ	characterr   r   r   r   m   s    

c             C   sL  | rt | tjstdy| jj}W n tk
r>   | j}Y nX tj	 
|¡| k	rfd}t| |¡|d|tkrvt| S | t|< z¤| d¡d }|rÖytj	| }W n, tk
rÌ   d}t| |¡|ddY qÚX |j}nd}| }t |||¡ }| _|dkrtd||dt || ¡ tj	| S y
t|= W n tk
rD   Y nX X dS )	zcReload the module and return it.

    The module must have been successfully imported before.

    z"reload() argument must be a modulezmodule {} not in sys.modules)r   r#   r   zparent {!r} not in sys.modulesNzspec not found for the module )Ú
isinstanceÚtypesÚ
ModuleTyper%   Ú__spec__r   r   Ú__name__r
   r   Úgetr   r   Ú
_RELOADINGÚ
rpartitionr   Ú__path__r   r   ÚModuleNotFoundErrorÚ_exec)Úmoduler   r)   Úparent_nameÚparentÚpkgpathÚtargetr!   r   r   r   r      sB    



)N)N)Ú__doc__Ú__all__Ú_impr
   Ú_frozen_importlibr   r   Ú Ú_setupr/   Ú__package__Ú__file__ÚreplaceÚ	NameErrorr   Ú_frozen_importlib_externalr	   Ú_w_longÚ_r_longr,   r   r   r   r"   r   r1   r   r   r   r   r   Ú<module>   sL   




#
ã               @   sÐ  d Z dadd Zdd Zi Zi ZG dd deZG dd	 d	ZG d
d dZ	G dd dZ
dd Zdd Zdd ZddddZdd Zdd Zdd Zdd ZG d d! d!ZG d"d# d#Zddd$d%d&Zd`d'd(Zd)d*d+d,Zd-d. Zd/d0 Zd1d2 Zd3d4 Zd5d6 Zd7d8 ZG d9d: d:ZG d;d< d<ZG d=d> d>Z d?d@ Z!dAdB Z"dadCdDZ#dEdF Z$dGZ%e%dH Z&dIdJ Z'e( Z)dKdL Z*dbdNdOZ+d)dPdQdRZ,dSdT Z-dcdVdWZ.dXdY Z/dZd[ Z0d\d] Z1d^d_ Z2dS )daS  Core implementation of import.

This module is NOT meant to be directly imported! It has been designed such
that it can be bootstrapped into Python as the implementation of import. As
such it requires the injection of specific modules and attributes in order to
work. One should use importlib as the public-facing version of this module.

Nc             C   s<   x(dD ] }t ||rt| |t|| qW | j |j¡ dS )z/Simple substitute for functools.update_wrapper.)Ú
__module__Ú__name__Ú__qualname__Ú__doc__N)ÚhasattrÚsetattrÚgetattrÚ__dict__Úupdate)ÚnewÚoldÚreplace© r   ú%D:\Python\lib\importlib\_bootstrap.pyÚ_wrap   s    

r   c             C   s   t t| S )N)ÚtypeÚsys)Únamer   r   r   Ú_new_module#   s    r   c               @   s   e Zd ZdS )Ú_DeadlockErrorN)r   r   r   r   r   r   r   r   0   s   r   c               @   s8   e Zd ZdZdd Zdd Zdd Zdd	 Zd
d ZdS )Ú_ModuleLockz©A recursive lock implementation which is able to detect deadlocks
    (e.g. thread 1 trying to take locks A then B, and thread 2 trying to
    take locks B then A).
    c             C   s0   t  ¡ | _t  ¡ | _|| _d | _d| _d| _d S )Né    )Ú_threadÚallocate_lockÚlockÚwakeupr   ÚownerÚcountÚwaiters)Úselfr   r   r   r   Ú__init__:   s    

z_ModuleLock.__init__c             C   s@   t  ¡ }| j}x,t |¡}|d kr&dS |j}||krdS qW d S )NFT)r   Ú	get_identr   Ú_blocking_onÚget)r   ÚmeÚtidr   r   r   r   Úhas_deadlockB   s    
z_ModuleLock.has_deadlockc          	   C   s¨   t  ¡ }| t|< zx| j` | jdks0| j|krH|| _|  jd7  _dS |  ¡ r\td|  | j 	d¡rv|  j
d7  _
W dQ R X | j 	¡  | j ¡  qW W dt|= X dS )z¹
        Acquire the module lock.  If a potential deadlock is detected,
        a _DeadlockError is raised.
        Otherwise, the lock is always acquired and True is returned.
        r   é   Tzdeadlock detected by %rFN)r   r    r!   r   r   r   r%   r   r   Úacquirer   Úrelease)r   r$   r   r   r   r'   N   s     
z_ModuleLock.acquirec          	   C   sz   t  ¡ }| jb | j|kr"td| jdks0t|  jd8  _| jdkrld | _| jrl|  jd8  _| j 	¡  W d Q R X d S )Nzcannot release un-acquired lockr   r&   )
r   r    r   r   ÚRuntimeErrorr   ÚAssertionErrorr   r   r(   )r   r$   r   r   r   r(   g   s    

z_ModuleLock.releasec             C   s   d  | jt| ¡S )Nz_ModuleLock({!r}) at {})Úformatr   Úid)r   r   r   r   Ú__repr__t   s    z_ModuleLock.__repr__N)	r   r   r   r   r   r%   r'   r(   r-   r   r   r   r   r   4   s   r   c               @   s0   e Zd ZdZdd Zdd Zdd Zdd	 Zd
S )Ú_DummyModuleLockzVA simple _ModuleLock equivalent for Python builds without
    multi-threading support.c             C   s   || _ d| _d S )Nr   )r   r   )r   r   r   r   r   r   |   s    z_DummyModuleLock.__init__c             C   s   |  j d7  _ dS )Nr&   T)r   )r   r   r   r   r'      s    z_DummyModuleLock.acquirec             C   s$   | j dkrtd|  j d8  _ d S )Nr   zcannot release un-acquired lockr&   )r   r)   )r   r   r   r   r(      s    
z_DummyModuleLock.releasec             C   s   d  | jt| ¡S )Nz_DummyModuleLock({!r}) at {})r+   r   r,   )r   r   r   r   r-      s    z_DummyModuleLock.__repr__N)r   r   r   r   r   r'   r(   r-   r   r   r   r   r.   x   s
   r.   c               @   s$   e Zd Zdd Zdd Zdd ZdS )Ú_ModuleLockManagerc             C   s   || _ d | _d S )N)Ú_nameÚ_lock)r   r   r   r   r   r      s    z_ModuleLockManager.__init__c             C   s   t | j| _| j ¡  d S )N)Ú_get_module_lockr0   r1   r'   )r   r   r   r   Ú	__enter__   s    z_ModuleLockManager.__enter__c             O   s   | j  ¡  d S )N)r1   r(   )r   ÚargsÚkwargsr   r   r   Ú__exit__   s    z_ModuleLockManager.__exit__N)r   r   r   r   r3   r6   r   r   r   r   r/      s   r/   c             C   s   t  ¡  zjyt|   }W n tk
r0   d}Y nX |dkrptdkrLt| }nt| }| fdd}t ||¡t| < W dt  	¡  X |S )zGet or create the module lock for a given module name.

    Acquire/release internally the global import lock to protect
    _module_locks.Nc             S   s0   t  ¡  zt |¡| krt|= W d t  ¡  X d S )N)Ú_impÚacquire_lockÚ_module_locksr"   Úrelease_lock)Úrefr   r   r   r   Úcb°   s
    
z_get_module_lock.<locals>.cb)
r7   r8   r9   ÚKeyErrorr   r.   r   Ú_weakrefr;   r:   )r   r   r<   r   r   r   r2      s    


r2   c             C   s6   t | }y| ¡  W n tk
r(   Y n
X | ¡  dS )z½Acquires then releases the module lock for a given module name.

    This is used to ensure a module is completely initialized, in the
    event it is being imported by another thread.
    N)r2   r'   r   r(   )r   r   r   r   r   Ú_lock_unlock_moduleÂ   s    r?   c             O   s
   | ||S )a.  remove_importlib_frames in import.c will always remove sequences
    of importlib frames that end with a call to this function

    Use it instead of a normal call in places where including the importlib
    frames introduces unwanted noise into the traceback (e.g. when executing
    module code)
    r   )Úfr4   Úkwdsr   r   r   Ú_call_with_frames_removedÓ   s    rB   r&   )Ú	verbosityc            G   s6   t jj|kr2|  d¡sd|  } t| j| t jd dS )z=Print the message to stderr if -v/PYTHONVERBOSE is turned on.)ú#zimport z# )ÚfileN)r   ÚflagsÚverboseÚ
startswithÚprintr+   Ústderr)ÚmessagerC   r4   r   r   r   Ú_verbose_messageÞ   s    
rL   c                s    fdd}t |  |S )z1Decorator to verify the named module is built-in.c                s&   |t jkrtd |¡|d | |S )Nz{!r} is not a built-in module)r   )r   Úbuiltin_module_namesÚImportErrorr+   )r   Úfullname)Úfxnr   r   Ú_requires_builtin_wrapperè   s    

z4_requires_builtin.<locals>._requires_builtin_wrapper)r   )rP   rQ   r   )rP   r   Ú_requires_builtinæ   s    
rR   c                s    fdd}t |  |S )z/Decorator to verify the named module is frozen.c                s&   t  |¡std |¡|d | |S )Nz{!r} is not a frozen module)r   )r7   Ú	is_frozenrN   r+   )r   rO   )rP   r   r   Ú_requires_frozen_wrapperó   s    

z2_requires_frozen.<locals>._requires_frozen_wrapper)r   )rP   rT   r   )rP   r   Ú_requires_frozenñ   s    
rU   c             C   s>   t || }|tjkr2tj| }t|| tj| S t|S dS )zLoad the specified module into sys.modules and return it.

    This method is deprecated.  Use loader.exec_module instead.

    N)Úspec_from_loaderr   ÚmodulesÚ_execÚ_load)r   rO   ÚspecÚmoduler   r   r   Ú_load_module_shimý   s    




r\   c             C   sØ   t | dd }t|dr6y
| | ¡S  tk
r4   Y nX y
| j}W n tk
rT   Y nX |d k	rft|S y
| j}W n tk
r   d}Y nX y
| j}W n2 tk
rÆ   |d kr¶d 	|¡S d 	||¡S Y nX d 	||¡S d S )NÚ
__loader__Úmodule_reprú?z<module {!r}>z<module {!r} ({!r})>z<module {!r} from {!r}>)
r   r   r^   Ú	ExceptionÚ__spec__ÚAttributeErrorÚ_module_repr_from_specr   Ú__file__r+   )r[   ÚloaderrZ   r   Úfilenamer   r   r   Ú_module_repr  s.    






rg   c               @   s$   e Zd Zdd Zdd Zdd ZdS )Ú_installed_safelyc             C   s   || _ |j| _d S )N)Ú_modulera   Ú_spec)r   r[   r   r   r   r   3  s    z_installed_safely.__init__c             C   s   d| j _| jtj| j j< d S )NT)rj   Ú_initializingri   r   rW   r   )r   r   r   r   r3   7  s    z_installed_safely.__enter__c             G   sb   zR| j }tdd |D r@ytj|j= W qP tk
r<   Y qPX ntd|j|j W d d| j _X d S )Nc             s   s   | ]}|d k	V  qd S )Nr   )Ú.0Úargr   r   r   ú	<genexpr>A  s    z-_installed_safely.__exit__.<locals>.<genexpr>zimport {!r} # {!r}F)	rj   Úanyr   rW   r   r=   rL   re   rk   )r   r4   rZ   r   r   r   r6   >  s    z_installed_safely.__exit__N)r   r   r   r   r3   r6   r   r   r   r   rh   1  s   rh   c               @   sr   e Zd ZdZddddddZdd Zdd	 Zed
d Zej	dd Zedd Z
edd Zej	dd ZdS )Ú
ModuleSpecaÐ  The specification for a module, used for loading.

    A module's spec is the source for information about the module.  For
    data associated with the module, including source, use the spec's
    loader.

    `name` is the absolute name of the module.  `loader` is the loader
    to use when loading the module.  `parent` is the name of the
    package the module is in.  The parent is derived from the name.

    `is_package` determines if the module is considered a package or
    not.  On modules this is reflected by the `__path__` attribute.

    `origin` is the specific location used by the loader from which to
    load the module, if that information is available.  When filename is
    set, origin will match.

    `has_location` indicates that a spec's "origin" reflects a location.
    When this is True, `__file__` attribute of the module is set.

    `cached` is the location of the cached bytecode file, if any.  It
    corresponds to the `__cached__` attribute.

    `submodule_search_locations` is the sequence of path entries to
    search when importing submodules.  If set, is_package should be
    True--and False otherwise.

    Packages are simply modules that (may) have submodules.  If a spec
    has a non-None value in `submodule_search_locations`, the import
    system will consider modules loaded from the spec as packages.

    Only finders (see importlib.abc.MetaPathFinder and
    importlib.abc.PathEntryFinder) should modify ModuleSpec instances.

    N)ÚoriginÚloader_stateÚ
is_packagec            C   s6   || _ || _|| _|| _|r g nd | _d| _d | _d S )NF)r   re   rq   rr   Úsubmodule_search_locationsÚ_set_fileattrÚ_cached)r   r   re   rq   rr   rs   r   r   r   r   q  s    zModuleSpec.__init__c             C   sf   d  | j¡d  | j¡g}| jd k	r4| d  | j¡¡ | jd k	rP| d  | j¡¡ d  | jjd |¡¡S )Nz	name={!r}zloader={!r}zorigin={!r}zsubmodule_search_locations={}z{}({})z, )	r+   r   re   rq   Úappendrt   Ú	__class__r   Újoin)r   r4   r   r   r   r-   }  s    



zModuleSpec.__repr__c             C   sf   | j }yF| j|jkoL| j|jkoL| j|jkoL||j koL| j|jkoL| j|jkS  tk
r`   dS X d S )NF)rt   r   re   rq   ÚcachedÚhas_locationrb   )r   ÚotherÚsmslr   r   r   Ú__eq__  s    
zModuleSpec.__eq__c             C   s:   | j d kr4| jd k	r4| jr4td kr&tt | j¡| _ | j S )N)rv   rq   ru   Ú_bootstrap_externalÚNotImplementedErrorÚ_get_cached)r   r   r   r   rz     s    
zModuleSpec.cachedc             C   s
   || _ d S )N)rv   )r   rz   r   r   r   rz     s    c             C   s$   | j dkr| j d¡d S | jS dS )z The name of the module's parent.NÚ.r   )rt   r   Ú
rpartition)r   r   r   r   Úparent   s    
zModuleSpec.parentc             C   s   | j S )N)ru   )r   r   r   r   r{   ¨  s    zModuleSpec.has_locationc             C   s   t || _d S )N)Úboolru   )r   Úvaluer   r   r   r{   ¬  s    )r   r   r   r   r   r-   r~   Úpropertyrz   Úsetterr   r{   r   r   r   r   rp   L  s   #
	rp   )rq   rs   c            C   s   t |drJtdkrttj}|dkr0|| |dS |r8g nd}|| ||dS |dkrt |dry| | ¡}W q tk
r   d}Y qX nd}t| |||dS )z5Return a module spec based on various loader methods.Úget_filenameN)re   )re   rt   rs   F)rq   rs   )r   r   r   Úspec_from_file_locationrs   rN   rp   )r   re   rq   rs   r   Úsearchr   r   r   rV   ±  s"    

rV   c             C   s8  y
| j }W n tk
r   Y nX |d k	r,|S | j}|d krZy
| j}W n tk
rX   Y nX y
| j}W n tk
r|   d }Y nX |d kr¸|d kr´y
|j}W q¸ tk
r°   d }Y q¸X n|}y
| j}W n tk
rÚ   d }Y nX yt| j}W n tk
r   d }Y nX t	|||d}|d kr"dnd|_
||_||_|S )N)rq   FT)ra   rb   r   r]   rd   Ú_ORIGINÚ
__cached__ÚlistÚ__path__rp   ru   rz   rt   )r[   re   rq   rZ   r   Úlocationrz   rt   r   r   r   Ú_spec_from_moduleË  sH    







r   F)Úoverridec            C   sâ  |st |dd d kr6y| j|_W n tk
r4   Y nX |sJt |dd d kr²| j}|d kr| jd k	rtd krnttj}| 	|¡}| j|_
|| _d |_y
||_W n tk
r°   Y nX |sÆt |dd d krèy| j|_W n tk
ræ   Y nX y
| |_W n tk
r   Y nX |s"t |dd d krR| jd k	rRy| j|_W n tk
rP   Y nX | jrÞ|srt |dd d kry| j|_W n tk
r   Y nX |s®t |dd d krÞ| jd k	rÞy| j|_W n tk
rÜ   Y nX |S )Nr   r]   Ú__package__r   rd   r   )r   r   r   rb   re   rt   r   r   Ú_NamespaceLoaderÚ__new__Ú_pathrd   r]   r   r   ra   r   r{   rq   rz   r   )rZ   r[   r   re   r   r   r   r   Ú_init_module_attrsø  s`    



r   c             C   sR   d}t | jdr| j | ¡}nt | jdr2td|dkrDt| j}t| | |S )z+Create a module based on the provided spec.NÚcreate_moduleÚexec_modulezBloaders that define exec_module() must also define create_module())r   re   r   rN   r   r   r   )rZ   r[   r   r   r   Úmodule_from_spec@  s    

r   c             C   sj   | j dkrdn| j }| jdkrB| jdkr2d |¡S d || j¡S n$| jrVd || j¡S d | j | j¡S dS )z&Return the repr to use for the module.Nr_   z<module {!r}>z<module {!r} ({!r})>z<module {!r} from {!r}>z<module {!r} ({})>)r   rq   re   r+   r{   )rZ   r   r   r   r   rc   Q  s    


rc   c          	   C   s²   | j }t| tj |¡|k	r6d |¡}t||d| jdkrj| jdkrXtd| j dt	| |dd |S t	| |dd t
| jds| j |¡ n| j |¡ W dQ R X tj| S )zFExecute the spec's specified module in an existing module's namespace.zmodule {!r} not in sys.modules)r   Nzmissing loaderT)r   r   )r   r/   r   rW   r"   r+   rN   re   rt   r   r   Úload_moduler   )rZ   r[   r   Úmsgr   r   r   rX   b  s    



rX   c             C   sÎ   | j  | j¡ tj| j }t|dd d krLy| j |_W n tk
rJ   Y nX t|dd d kry(|j|_	t
|ds| j d¡d |_	W n tk
r   Y nX t|dd d krÊy
| |_W n tk
rÈ   Y nX |S )Nr]   r   r   r   r   ra   )re   r   r   r   rW   r   r]   rb   r   r   r   r   ra   )rZ   r[   r   r   r   Ú_load_backward_compatiblez  s(    

r   c          	   C   sv   | j d k	rt| j dst| S t| }t|6 | j d krT| jd kr`td| jdn| j  |¡ W d Q R X t	j
| j S )Nr   zmissing loader)r   )re   r   r   r   rh   rt   rN   r   r   r   rW   )rZ   r[   r   r   r   Ú_load_unlocked  s    



r   c          	   C   s   t | j
 t| S Q R X dS )z¿Return a new module object, loaded by the spec's loader.

    The module is not added to its parent.

    If a module is already in sys.modules, that existing module gets
    clobbered.

    N)r/   r   r   )rZ   r   r   r   rY   ®  s    	rY   c               @   s   e Zd ZdZedd ZedddZedddZed	d
 Z	edd Z
eedd Zeedd Zeedd ZeeZdS )ÚBuiltinImporterzMeta path import for built-in modules.

    All methods are either class or static methods to avoid the need to
    instantiate the class.

    c             C   s   d  | j¡S )zsReturn repr for the module.

        The method is deprecated.  The import machinery does the job itself.

        z<module {!r} (built-in)>)r+   r   )r[   r   r   r   r^   Æ  s    zBuiltinImporter.module_reprNc             C   s,   |d k	rd S t  |¡r$t|| ddS d S d S )Nzbuilt-in)rq   )r7   Ú
is_builtinrV   )ÚclsrO   ÚpathÚtargetr   r   r   Ú	find_specÏ  s
    
zBuiltinImporter.find_specc             C   s   |   ||¡}|dk	r|jS dS )z¯Find the built-in module.

        If 'path' is ever specified then the search is considered a failure.

        This method is deprecated.  Use find_spec() instead.

        N)r¤   re   )r¡   rO   r¢   rZ   r   r   r   Úfind_moduleØ  s    	zBuiltinImporter.find_modulec             C   s.   |j tjkr"td |j ¡|j dttj|S )zCreate a built-in modulez{!r} is not a built-in module)r   )r   r   rM   rN   r+   rB   r7   Úcreate_builtin)r   rZ   r   r   r   r   ä  s    
zBuiltinImporter.create_modulec             C   s   t tj| dS )zExec a built-in moduleN)rB   r7   Úexec_builtin)r   r[   r   r   r   r   ì  s    zBuiltinImporter.exec_modulec             C   s   dS )z9Return None as built-in modules do not have code objects.Nr   )r¡   rO   r   r   r   Úget_codeñ  s    zBuiltinImporter.get_codec             C   s   dS )z8Return None as built-in modules do not have source code.Nr   )r¡   rO   r   r   r   Ú
get_source÷  s    zBuiltinImporter.get_sourcec             C   s   dS )z4Return False as built-in modules are never packages.Fr   )r¡   rO   r   r   r   rs   ý  s    zBuiltinImporter.is_package)NN)N)r   r   r   r   Ústaticmethodr^   Úclassmethodr¤   r¥   r   r   rR   r¨   r©   rs   r\   r   r   r   r   r   r   ½  s   	r   c               @   s   e Zd ZdZedd ZedddZedddZed	d
 Z	edd Z
edd Zeedd Zeedd Zeedd ZdS )ÚFrozenImporterzMeta path import for frozen modules.

    All methods are either class or static methods to avoid the need to
    instantiate the class.

    c             C   s   d  | j¡S )zsReturn repr for the module.

        The method is deprecated.  The import machinery does the job itself.

        z<module {!r} (frozen)>)r+   r   )Úmr   r   r   r^     s    zFrozenImporter.module_reprNc             C   s    t  |¡rt|| ddS d S d S )NÚfrozen)rq   )r7   rS   rV   )r¡   rO   r¢   r£   r   r   r   r¤     s    
zFrozenImporter.find_specc             C   s   t  |¡r| S dS )z]Find a frozen module.

        This method is deprecated.  Use find_spec() instead.

        N)r7   rS   )r¡   rO   r¢   r   r   r   r¥     s    zFrozenImporter.find_modulec             C   s   dS )z*Use default semantics for module creation.Nr   )r¡   rZ   r   r   r   r   (  s    zFrozenImporter.create_modulec             C   s@   | j j}t |¡s$td |¡|dttj|}t|| j	 d S )Nz{!r} is not a frozen module)r   )
ra   r   r7   rS   rN   r+   rB   Úget_frozen_objectÚexecr   )r[   r   Úcoder   r   r   r   ,  s    

zFrozenImporter.exec_modulec             C   s
   t | |S )z_Load a frozen module.

        This method is deprecated.  Use exec_module() instead.

        )r\   )r¡   rO   r   r   r   r   5  s    zFrozenImporter.load_modulec             C   s
   t  |¡S )z-Return the code object for the frozen module.)r7   r¯   )r¡   rO   r   r   r   r¨   >  s    zFrozenImporter.get_codec             C   s   dS )z6Return None as frozen modules do not have source code.Nr   )r¡   rO   r   r   r   r©   D  s    zFrozenImporter.get_sourcec             C   s
   t  |¡S )z.Return True if the frozen module is a package.)r7   Úis_frozen_package)r¡   rO   r   r   r   rs   J  s    zFrozenImporter.is_package)NN)N)r   r   r   r   rª   r^   r«   r¤   r¥   r   r   r   rU   r¨   r©   rs   r   r   r   r   r¬     s   			r¬   c               @   s    e Zd ZdZdd Zdd ZdS )Ú_ImportLockContextz$Context manager for the import lock.c             C   s   t  ¡  dS )zAcquire the import lock.N)r7   r8   )r   r   r   r   r3   W  s    z_ImportLockContext.__enter__c             C   s   t  ¡  dS )z<Release the import lock regardless of any raised exceptions.N)r7   r:   )r   Úexc_typeÚ	exc_valueÚexc_tracebackr   r   r   r6   [  s    z_ImportLockContext.__exit__N)r   r   r   r   r3   r6   r   r   r   r   r³   S  s   r³   c             C   s@   |  d|d ¡}t||k r$td|d }| r<d || ¡S |S )z2Resolve a relative module name to an absolute one.r   r&   z2attempted relative import beyond top-level packager   z{}.{})ÚrsplitÚlenÚ
ValueErrorr+   )r   ÚpackageÚlevelÚbitsÚbaser   r   r   Ú_resolve_name`  s
    r¾   c             C   s"   |   ||¡}|d krd S t||S )N)r¥   rV   )Úfinderr   r¢   re   r   r   r   Ú_find_spec_legacyi  s    rÀ   c       
   
   C   sð   t j}|dkrtd|s&t dt¡ | t jk}xº|D ]®}t H y
|j}W n* t	k
rv   t
|| |}|dkrrw6Y nX || ||}W dQ R X |dk	r6|sà| t jkràt j|  }y
|j}	W n t	k
rÌ   |S X |	dkrÚ|S |	S q6|S q6W dS dS )zFind a module's spec.Nz5sys.meta_path is None, Python is likely shutting downzsys.meta_path is empty)r   Ú	meta_pathrN   Ú	_warningsÚwarnÚImportWarningrW   r³   r¤   rb   rÀ   ra   )
r   r¢   r£   rÁ   Ú	is_reloadr¿   r¤   rZ   r[   ra   r   r   r   Ú
_find_specr  s6    




rÆ   c             C   sl   t | tstd t| ¡|dk r,td|dkrTt |tsHtdn|sTtd| sh|dkrhtddS )zVerify arguments are "sane".zmodule name must be str, not {}r   zlevel must be >= 0z__package__ not set to a stringz6attempted relative import with no known parent packagezEmpty module nameN)Ú
isinstanceÚstrÚ	TypeErrorr+   r   r¹   rN   )r   rº   r»   r   r   r   Ú_sanity_check¡  s    


rÊ   zNo module named z{!r}c             C   sÜ   d }|   d¡d }|r|tjkr*t|| | tjkr>tj|  S tj| }y
|j}W n2 tk
r   td  | |¡}t|| dd Y nX t	| |}|d kr¬tt | ¡| dnt
|}|rØtj| }t||   d¡d | |S )Nr   r   z; {!r} is not a package)r   é   )r   r   rW   rB   r   rb   Ú_ERR_MSGr+   ÚModuleNotFoundErrorrÆ   r   r   )r   Úimport_r¢   r   Úparent_moduler   rZ   r[   r   r   r   Ú_find_and_load_unlocked´  s*    







rÐ   c          	   C   s^   t | & tj | t¡}|tkr*t| |S W dQ R X |dkrRd | ¡}t|| dt|  |S )zFind and load the module.Nz(import of {} halted; None in sys.modules)r   )	r/   r   rW   r"   Ú_NEEDS_LOADINGrÐ   r+   rÍ   r?   )r   rÎ   r[   rK   r   r   r   Ú_find_and_loadÒ  s    
rÒ   r   c             C   s*   t | || |dkr t| ||} t| tS )a2  Import and return the module based on its name, the package the call is
    being made from, and the level adjustment.

    This function represents the greatest common denominator of functionality
    between import_module and __import__. This includes setting __package__ if
    the loader did not.

    r   )rÊ   r¾   rÒ   Ú_gcd_import)r   rº   r»   r   r   r   rÓ   â  s    	rÓ   )Ú	recursivec            C   sê   t | dræxÚ|D ]Ò}t|tsN|r.| jd }nd}td| dt|j q|dkrx|sât | drât| | j|dd	 qt | |sd
 | j|¡}yt	|| W q t
k
rà } z$|j|krÎtj |t¡dk	rÎw W dd}~X Y qX qW | S )zîFigure out what __import__ should return.

    The import_ parameter is a callable which takes the name of module to
    import. It is required to decouple the function from assuming importlib's
    import implementation is desired.

    r   z.__all__z``from list''zItem in z must be str, not Ú*Ú__all__T)rÔ   z{}.{}N)r   rÇ   rÈ   r   rÉ   r   Ú_handle_fromlistrÖ   r+   rB   rÍ   r   r   rW   r"   rÑ   )r[   ÚfromlistrÎ   rÔ   ÚxÚwhereÚ	from_nameÚexcr   r   r   r×   ñ  s*    







r×   c             C   s   |   d¡}|   d¡}|dk	rR|dk	rN||jkrNtjd|d|jdtdd |S |dk	r`|jS tjd	tdd | d
 }d| kr| d¡d }|S )z§Calculate what __package__ should be.

    __package__ is not guaranteed to be defined or could be set to None
    to represent that its proper value is unknown.

    r   ra   Nz __package__ != __spec__.parent (z != ú)é   )Ú
stacklevelzYcan't resolve package from __spec__ or __package__, falling back on __name__ and __path__r   r   r   r   )r"   r   rÂ   rÃ   rÄ   r   )Úglobalsrº   rZ   r   r   r   Ú_calc___package__  s    



rá   r   c       	      C   s¦   |dkrt | }n$|dk	r|ni }t|}t | ||}|s|dkrTt |  d¡d S | s\|S t| t|  d¡d  }tj|jdt|j|   S nt||t S dS )a×  Import a module.

    The 'globals' argument is used to infer where the import is occurring from
    to handle relative imports. The 'locals' argument is ignored. The
    'fromlist' argument specifies what should exist as attributes on the module
    being imported (e.g. ``from module import <fromlist>``).  The 'level'
    argument represents the package location to import from in a relative
    import (e.g. ``from ..pkg import mod`` would have a 'level' of 2).

    r   Nr   )rÓ   rá   Ú	partitionr¸   r   rW   r   r×   )	r   rà   ÚlocalsrØ   r»   r[   Úglobals_rº   Úcut_offr   r   r   Ú
__import__2  s    
 ræ   c             C   s&   t  | ¡}|d krtd|  t|S )Nzno built-in module named )r   r¤   rN   r   )r   rZ   r   r   r   Ú_builtin_from_nameU  s    
rç   c       
      C   s®   |a | att}xVtj ¡ D ]H\}}t||r|tjkr>t}nt  |¡rt	}nqt
||}t|| qW tjt }x6dD ].}|tjkrt|}	n
tj| }	t|||	 qxW dS )zúSetup importlib by importing needed built-in modules and injecting them
    into the global namespace.

    As sys is needed for sys.modules access and _imp is needed to load built-in
    modules, those two modules must be explicitly passed in.

    )r   rÂ   r>   N)r7   r   r   rW   ÚitemsrÇ   rM   r   rS   r¬   r   r   r   rç   r   )
Ú
sys_moduleÚ_imp_moduleÚmodule_typer   r[   re   rZ   Úself_moduleÚbuiltin_nameÚbuiltin_moduler   r   r   Ú_setup\  s$    	








rï   c             C   s&   t | | tj t¡ tj t¡ dS )z0Install importers for builtin and frozen modulesN)rï   r   rÁ   rw   r   r¬   )ré   rê   r   r   r   Ú_install  s    
rð   c              C   s    ddl } | a|  tjt ¡ dS )z9Install importers that require external filesystem accessr   N)Ú_frozen_importlib_externalr   rð   r   rW   r   )rñ   r   r   r   Ú_install_external_importers  s    rò   )NN)N)Nr   )NNr   r   )3r   r   r   r   r9   r!   r)   r   r   r.   r/   r2   r?   rB   rL   rR   rU   r\   rg   rh   rp   rV   r   r   r   rc   rX   r   r   rY   r   r¬   r³   r¾   rÀ   rÆ   rÊ   Ú_ERR_MSG_PREFIXrÌ   rÐ   ÚobjectrÑ   rÒ   rÓ   r×   rá   ræ   rç   rï   rð   rò   r   r   r   r   Ú<module>   s`   D%$e
-HIM		
/
&
##ã               @   s  d Z dZdZee Zdd Zdd Zdd Zd	d
 Zdd Zdd Z	dd Z
dd Zdd ZdaddZeejZd dd¡d Ze ed¡ZdZdZdgZdgZe ZZdbd d!d"d#Zd$d% Zd&d' Zd(d) Zd*d+ Z d,d- Z!d.d/ Z"d0d1 Z#d2d3 Z$d4d5 Z%dcd6d7Z&ddd9d:Z'ded<d=Z(d>d? Z)e* Z+dfd e+d@dAdBZ,G dCdD dDZ-G dEdF dFZ.G dGdH dHe.Z/G dIdJ dJZ0G dKdL dLe0e/Z1G dMdN dNe0e.Z2g Z3G dOdP dPe0e.Z4G dQdR dRZ5G dSdT dTZ6G dUdV dVZ7G dWdX dXZ8dgdYdZZ9d[d\ Z:d]d^ Z;d_d` Z<d S )ha^  Core implementation of path-based import.

This module is NOT meant to be directly imported! It has been designed such
that it can be bootstrapped into Python as the implementation of import. As
such it requires the injection of specific modules and attributes in order to
work. One should use importlib as the public-facing version of this module.

)Úwin)ÚcygwinÚdarwinc                 s<   t j t¡r0t j t¡rd nd  fdd} ndd } | S )NÚPYTHONCASEOKs   PYTHONCASEOKc                  s
    t jkS )z5True if filenames must be checked case-insensitively.)Ú_osÚenviron© )Úkeyr   ú.D:\Python\lib\importlib\_bootstrap_external.pyÚ_relax_case$   s    z%_make_relax_case.<locals>._relax_casec               S   s   dS )z5True if filenames must be checked case-insensitively.Fr   r   r   r   r	   r
   (   s    )ÚsysÚplatformÚ
startswithÚ_CASE_INSENSITIVE_PLATFORMSÚ#_CASE_INSENSITIVE_PLATFORMS_STR_KEY)r
   r   )r   r	   Ú_make_relax_case   s    r   c             C   s   t | d@  dd¡S )z*Convert a 32-bit integer to little-endian.l   ÿÿ é   Úlittle)ÚintÚto_bytes)Úxr   r   r	   Ú_w_long.   s    r   c             C   s   t  | d¡S )z/Convert 4 bytes in little-endian to an integer.r   )r   Ú
from_bytes)Ú	int_bytesr   r   r	   Ú_r_long3   s    r   c              G   s   t  dd | D ¡S )zReplacement for os.path.join().c             S   s   g | ]}|r|  t¡qS r   )ÚrstripÚpath_separators)Ú.0Úpartr   r   r	   ú
<listcomp>:   s   z_path_join.<locals>.<listcomp>)Úpath_sepÚjoin)Ú
path_partsr   r   r	   Ú
_path_join8   s    
r"   c             C   s`   t tdkr$|  t¡\}}}||fS x2t| D ]&}|tkr.| j|dd\}}||fS q.W d| fS )z Replacement for os.path.split().é   )ÚmaxsplitÚ )Úlenr   Ú
rpartitionr   ÚreversedÚrsplit)ÚpathÚfrontÚ_Útailr   r   r   r	   Ú_path_split>   s    r.   c             C   s
   t  | ¡S )z~Stat the path.

    Made a separate function to make it easier to override in experiments
    (e.g. cache stat results).

    )r   Ústat)r*   r   r   r	   Ú
_path_statJ   s    r0   c             C   s0   yt | }W n tk
r    dS X |jd@ |kS )z1Test whether the path is the specified mode type.Fi ð  )r0   ÚOSErrorÚst_mode)r*   ÚmodeÚ	stat_infor   r   r	   Ú_path_is_mode_typeT   s
    r5   c             C   s
   t | dS )zReplacement for os.path.isfile.i   )r5   )r*   r   r   r	   Ú_path_isfile]   s    r6   c             C   s   | st  ¡ } t| dS )zReplacement for os.path.isdir.i @  )r   Úgetcwdr5   )r*   r   r   r	   Ú_path_isdirb   s    r8   é¶  c             C   s¢   d  | t| ¡}t |tjtjB tjB |d@ ¡}y2t |d¡}| 	|¡ W dQ R X t 
|| ¡ W n: tk
r   yt |¡ W n tk
r   Y nX  Y nX dS )z¢Best-effort function to write data to a path atomically.
    Be prepared to handle a FileExistsError if concurrent writing of the
    temporary file is attempted.z{}.{}i¶  ÚwbN)ÚformatÚidr   ÚopenÚO_EXCLÚO_CREATÚO_WRONLYÚ_ioÚFileIOÚwriteÚreplacer1   Úunlink)r*   Údatar3   Úpath_tmpÚfdÚfiler   r   r	   Ú_write_atomici   s    rJ   iB  é   r   s   
Ú__pycache__zopt-z.pyz.pycN)Úoptimizationc            C   sô   |dk	r4t  dt¡ |dk	r(d}t||r0dnd}t | ¡} t| \}}| d¡\}}}tj	j
}	|	dkrrtdd |r~|n|||	g¡}
|dkr¬tjjdkr¤d}ntjj}t|}|dkrà| ¡ sÒtd	 |¡d
 |
t|¡}
t|t|
td  S )aþ  Given the path to a .py file, return the path to its .pyc file.

    The .py file does not need to exist; this simply returns the path to the
    .pyc file calculated as if the .py file were imported.

    The 'optimization' parameter controls the presumed optimization level of
    the bytecode file. If 'optimization' is not None, the string representation
    of the argument is taken and verified to be alphanumeric (else ValueError
    is raised).

    The debug_override parameter is deprecated. If debug_override is not None,
    a True value is the same as setting 'optimization' to the empty string
    while a False value is equivalent to setting 'optimization' to '1'.

    If sys.implementation.cache_tag is None then NotImplementedError is raised.

    NzFthe debug_override parameter is deprecated; use 'optimization' insteadz2debug_override or optimization must be set to Noner%   r#   Ú.z$sys.implementation.cache_tag is Noneé    z{!r} is not alphanumericz{}.{}{})Ú	_warningsÚwarnÚDeprecationWarningÚ	TypeErrorr   Úfspathr.   r'   r   ÚimplementationÚ	cache_tagÚNotImplementedErrorr    ÚflagsÚoptimizeÚstrÚisalnumÚ
ValueErrorr;   Ú_OPTr"   Ú_PYCACHEÚBYTECODE_SUFFIXES)r*   Údebug_overriderM   ÚmessageÚheadr-   ÚbaseÚsepÚrestÚtagÚalmost_filenamer   r   r	   Úcache_from_source  s0    
rh   c             C   sæ   t jjdkrtdt | ¡} t| \}}t|\}}|tkrNtd 	t| ¡| 
d¡}|dkrptd 	|¡nV|dkrÆ| dd¡d	 }| t¡s td
 	t¡|ttd }| ¡ sÆtd 	|¡| d¡d }t||td  S )an  Given the path to a .pyc. file, return the path to its .py file.

    The .pyc file does not need to exist; this simply returns the path to
    the .py file calculated to correspond to the .pyc file.  If path does
    not conform to PEP 3147/488 format, ValueError will be raised. If
    sys.implementation.cache_tag is None then NotImplementedError is raised.

    Nz$sys.implementation.cache_tag is Nonez%{} not bottom-level directory in {!r}rN   >   rK   é   z!expected only 2 or 3 dots in {!r}ri   rK   éþÿÿÿz9optimization portion of filename does not start with {!r}z4optimization level {!r} is not an alphanumeric valuerO   )r   rU   rV   rW   r   rT   r.   r^   r\   r;   Úcountr)   r   r]   r&   r[   Ú	partitionr"   ÚSOURCE_SUFFIXES)r*   rb   Úpycache_filenameÚpycacheÚ	dot_countrM   Ú	opt_levelÚbase_filenamer   r   r	   Úsource_from_cache<  s.    	




rs   c          	   C   s~   t | dkrdS |  d¡\}}}|r8| ¡ dd dkr<| S yt| }W n$ ttfk
rl   | dd }Y nX t|rz|S | S )z¼Convert a bytecode file path to a source path (if possible).

    This function exists purely for backwards-compatibility for
    PyImport_ExecCodeModuleWithFilenames() in the C API.

    rO   NrN   éýÿÿÿéÿÿÿÿÚpy)r&   r'   Úlowerrs   rW   r\   r6   )Úbytecode_pathre   r,   Ú	extensionÚsource_pathr   r   r	   Ú_get_sourcefile^  s    r{   c             C   sH   |   tt¡r.yt| S  tk
r*   Y qDX n|   tt¡r@| S d S d S )N)ÚendswithÚtuplerm   rh   rW   r_   )Úfilenamer   r   r	   Ú_get_cachedq  s    r   c             C   s4   yt | j}W n tk
r&   d}Y nX |dO }|S )z3Calculate the mode permissions for a bytecode file.i¶  é   )r0   r2   r1   )r*   r3   r   r   r	   Ú
_calc_mode}  s    
r   c                sD   d fdd	}y
t j}W n tk
r4   dd }Y nX ||  |S )züDecorator to verify that the module being requested matches the one the
    loader can handle.

    The first argument (self) must define _name which the second argument is
    compared against. If the comparison fails then ImportError is raised.

    Nc                sB   |d kr| j }n | j |kr0td| j |f |d | |f||S )Nzloader for %s cannot handle %s)Úname)r   ÚImportError)Úselfr   ÚargsÚkwargs)Úmethodr   r	   Ú_check_name_wrapper  s    
z(_check_name.<locals>._check_name_wrapperc             S   s<   x(dD ] }t ||rt| |t|| qW | j |j¡ d S )N)Ú
__module__Ú__name__Ú__qualname__Ú__doc__)ÚhasattrÚsetattrÚgetattrÚ__dict__Úupdate)ÚnewÚoldrD   r   r   r	   Ú_wrap  s    

z_check_name.<locals>._wrap)N)Ú
_bootstrapr   Ú	NameError)r   r   r   r   )r   r	   Ú_check_name  s    

r   c             C   s<   |   |¡\}}|dkr8t|r8d}t | |d ¡t¡ |S )zTry to find a loader for the specified module by delegating to
    self.find_loader().

    This method is deprecated in favor of finder.find_spec().

    Nz,Not importing directory {}: missing __init__rO   )Úfind_loaderr&   rP   rQ   r;   ÚImportWarning)r   ÚfullnameÚloaderÚportionsÚmsgr   r   r	   Ú_find_module_shim¥  s
    
r   c             C   s   | dd }|t kr<d|d|}t d|¡ t|f|t| dk rfd|}t d|¡ t|t| dd }|d	@ rd
|d|}t|f||S )aT  Perform basic validity checking of a pyc header and return the flags field,
    which determines how the pyc should be further validated against the source.

    *data* is the contents of the pyc file. (Only the first 16 bytes are
    required, though.)

    *name* is the name of the module being imported. It is used for logging.

    *exc_details* is a dictionary passed to ImportError if it raised for
    improved debugging.

    ImportError is raised when the magic number is incorrect or when the flags
    field is invalid. EOFError is raised when the data is found to be truncated.

    Nr   zbad magic number in z: z{}é   z(reached EOF while reading pyc header of é   éüÿÿÿzinvalid flags z in )ÚMAGIC_NUMBERr   Ú_verbose_messager   r&   ÚEOFErrorr   )rF   r   Úexc_detailsÚmagicra   rX   r   r   r	   Ú_classify_pyc¶  s    
r§   c             C   sp   t | dd |d@ kr:d|}t d|¡ t|f||dk	rlt | dd |d@ krltd|f|dS )a  Validate a pyc against the source last-modified time.

    *data* is the contents of the pyc file. (Only the first 16 bytes are
    required.)

    *source_mtime* is the last modified timestamp of the source file.

    *source_size* is None or the size of the source file in bytes.

    *name* is the name of the module being imported. It is used for logging.

    *exc_details* is a dictionary passed to ImportError if it raised for
    improved debugging.

    An ImportError is raised if the bytecode is stale.

    r    é   l   ÿÿ zbytecode is stale for z{}Nr   )r   r   r£   r   )rF   Úsource_mtimeÚsource_sizer   r¥   ra   r   r   r	   Ú_validate_timestamp_pyc×  s    
r«   c             C   s&   | dd |kr"t d|f|dS )aó  Validate a hash-based pyc by checking the real source hash against the one in
    the pyc header.

    *data* is the contents of the pyc file. (Only the first 16 bytes are
    required.)

    *source_hash* is the importlib.util.source_hash() of the source file.

    *name* is the name of the module being imported. It is used for logging.

    *exc_details* is a dictionary passed to ImportError if it raised for
    improved debugging.

    An ImportError is raised if the bytecode is stale.

    r    r   z.hash in bytecode doesn't match hash of source N)r   )rF   Úsource_hashr   r¥   r   r   r	   Ú_validate_hash_pycó  s    
r­   c             C   sP   t  | ¡}t|tr8t d|¡ |dk	r4t ||¡ |S td 	|¡||ddS )z#Compile bytecode as found in a pyc.zcode object from {!r}NzNon-code object in {!r})r   r*   )
ÚmarshalÚloadsÚ
isinstanceÚ
_code_typer   r£   Ú_impÚ_fix_co_filenamer   r;   )rF   r   rx   rz   Úcoder   r   r	   Ú_compile_bytecode  s    


rµ   rO   c             C   sF   t t}| td¡ | t|¡ | t|¡ | t | ¡¡ |S )z+Produce the data for a timestamp-based pyc.rO   )Ú	bytearrayr¢   Úextendr   r®   Údumps)r´   Úmtimerª   rF   r   r   r	   Ú_code_to_timestamp_pyc  s    rº   Tc             C   sP   t t}d|d> B }| t|¡ t|dks2t| |¡ | t | ¡¡ |S )z&Produce the data for a hash-based pyc.r#   r    )r¶   r¢   r·   r   r&   ÚAssertionErrorr®   r¸   )r´   r¬   ÚcheckedrF   rX   r   r   r	   Ú_code_to_hash_pyc"  s    
r½   c             C   s>   ddl }t | ¡j}| |¡}t dd¡}| |  |d ¡¡S )zyDecode bytes representing source code and return the string.

    Universal newline support is used in the decoding.
    rO   NT)ÚtokenizerA   ÚBytesIOÚreadlineÚdetect_encodingÚIncrementalNewlineDecoderÚdecode)Úsource_bytesr¾   Úsource_bytes_readlineÚencodingÚnewline_decoderr   r   r	   Údecode_source-  s
    
rÈ   )r   Úsubmodule_search_locationsc      	      C   s  |dkr<d}t |drFy| | ¡}W qF tk
r8   Y qFX n
t |¡}tj| ||d}d|_|dkrx6t D ](\}}| 	t
|¡rl|| |}||_P qlW dS |tkrÞt |dräy| | ¡}W n tk
rÐ   Y qäX |räg |_n||_|jg kr|rt|d }|j |¡ |S )a=  Return a module spec based on a file location.

    To indicate that the module is a package, set
    submodule_search_locations to a list of directory paths.  An
    empty list is sufficient, though its not otherwise useful to the
    import system.

    The loader must take a spec as its only __init__() arg.

    Nz	<unknown>Úget_filename)ÚoriginTÚ
is_packagerO   )r   rÊ   r   r   rT   r   Ú
ModuleSpecÚ_set_fileattrÚ_get_supported_file_loadersr|   r}   r   Ú	_POPULATErÌ   rÉ   r.   Úappend)	r   Úlocationr   rÉ   ÚspecÚloader_classÚsuffixesrÌ   Údirnamer   r   r	   Úspec_from_file_location>  s>    



r×   c               @   sP   e Zd ZdZdZdZdZedd Zedd Z	edd
dZ
edddZd	S )ÚWindowsRegistryFinderz>Meta path finder for modules declared in the Windows registry.z;Software\Python\PythonCore\{sys_version}\Modules\{fullname}zASoftware\Python\PythonCore\{sys_version}\Modules\{fullname}\DebugFc             C   s2   yt  t j|¡S  tk
r,   t  t j|¡S X d S )N)Ú_winregÚOpenKeyÚHKEY_CURRENT_USERr1   ÚHKEY_LOCAL_MACHINE)Úclsr   r   r   r	   Ú_open_registry  s    z$WindowsRegistryFinder._open_registryc          	   C   sp   | j r| j}n| j}|j|dtjd d  d}y&|  |¡}t |d¡}W d Q R X W n t	k
rj   d S X |S )Nz%d.%drK   )r   Úsys_versionr%   )
ÚDEBUG_BUILDÚREGISTRY_KEY_DEBUGÚREGISTRY_KEYr;   r   Úversion_inforÞ   rÙ   Ú
QueryValuer1   )rÝ   r   Úregistry_keyr   ÚhkeyÚfilepathr   r   r	   Ú_search_registry  s    z&WindowsRegistryFinder._search_registryNc             C   sx   |   |¡}|d krd S yt| W n tk
r6   d S X x:t D ]0\}}| t|¡r@tj|||||d}|S q@W d S )N)rË   )rè   r0   r1   rÏ   r|   r}   r   Úspec_from_loader)rÝ   r   r*   Útargetrç   r   rÕ   rÓ   r   r   r	   Ú	find_spec¤  s    
zWindowsRegistryFinder.find_specc             C   s"   |   ||¡}|dk	r|jS dS dS )zlFind module named in the registry.

        This method is deprecated.  Use exec_module() instead.

        N)rë   r   )rÝ   r   r*   rÓ   r   r   r	   Úfind_module´  s    z!WindowsRegistryFinder.find_module)NN)N)r   r   r   r   râ   rá   rà   ÚclassmethodrÞ   rè   rë   rì   r   r   r   r	   rØ     s   rØ   c               @   s0   e Zd ZdZdd Zdd Zdd Zdd	 Zd
S )Ú_LoaderBasicszSBase class of common code needed by both SourceLoader and
    SourcelessFileLoader.c             C   s@   t |  |¡d }| dd¡d }| d¡d }|dko>|dkS )zConcrete implementation of InspectLoader.is_package by checking if
        the path returned by get_filename has a filename of '__init__.py'.r#   rN   rO   rK   Ú__init__)r.   rÊ   r)   r'   )r   r   r~   Úfilename_baseÚ	tail_namer   r   r	   rÌ   Ç  s    z_LoaderBasics.is_packagec             C   s   dS )z*Use default semantics for module creation.Nr   )r   rÓ   r   r   r	   Úcreate_moduleÏ  s    z_LoaderBasics.create_modulec             C   s8   |   |j¡}|dkr$td |j¡t t||j¡ dS )zExecute the module.Nz4cannot load module {!r} when get_code() returns None)Úget_coder   r   r;   r   Ú_call_with_frames_removedÚexecr   )r   Úmoduler´   r   r   r	   Úexec_moduleÒ  s
    
z_LoaderBasics.exec_modulec             C   s   t  | |¡S )zThis module is deprecated.)r   Ú_load_module_shim)r   r   r   r   r	   Úload_moduleÚ  s    z_LoaderBasics.load_moduleN)r   r   r   r   rÌ   rò   r÷   rù   r   r   r   r	   rî   Â  s
   rî   c               @   sJ   e Zd Zdd Zdd Zdd Zdd Zd	d
 ZddddZdd Z	dS )ÚSourceLoaderc             C   s   t dS )z²Optional method that returns the modification time (an int) for the
        specified path, where path is a str.

        Raises OSError when the path cannot be handled.
        N)r1   )r   r*   r   r   r	   Ú
path_mtimeá  s    zSourceLoader.path_mtimec             C   s   d|   |¡iS )aª  Optional method returning a metadata dict for the specified path
        to by the path (str).
        Possible keys:
        - 'mtime' (mandatory) is the numeric timestamp of last source
          code modification;
        - 'size' (optional) is the size in bytes of the source code.

        Implementing this method allows the loader to read bytecode files.
        Raises OSError when the path cannot be handled.
        r¹   )rû   )r   r*   r   r   r	   Ú
path_statsé  s    zSourceLoader.path_statsc             C   s   |   ||¡S )zäOptional method which writes data (bytes) to a file path (a str).

        Implementing this method allows for the writing of bytecode files.

        The source path is needed in order to correctly transfer permissions
        )Úset_data)r   rz   Ú
cache_pathrF   r   r   r	   Ú_cache_bytecodeö  s    zSourceLoader._cache_bytecodec             C   s   dS )zOptional method which writes data (bytes) to a file path (a str).

        Implementing this method allows for the writing of bytecode files.
        Nr   )r   r*   rF   r   r   r	   rý      s    zSourceLoader.set_datac          
   C   sR   |   |¡}y|  |¡}W n0 tk
rH } ztd|d|W dd}~X Y nX t|S )z4Concrete implementation of InspectLoader.get_source.z'source not available through get_data())r   N)rÊ   Úget_datar1   r   rÈ   )r   r   r*   rÄ   Úexcr   r   r	   Ú
get_source  s    
zSourceLoader.get_sourceru   )Ú	_optimizec            C   s   t jt||dd|dS )zReturn the code object compiled from source.

        The 'data' argument can be any object type that compile() supports.
        rõ   T)Údont_inheritrY   )r   rô   Úcompile)r   rF   r*   r  r   r   r	   Úsource_to_code  s    zSourceLoader.source_to_codec          	   C   s.  |   |¡}d}d}d}d}d}yt|}W n tk
rD   d}Y n0X y|  |¡}	W n tk
rj   Y n
X t|	d }y|  |¡}
W n tk
r   Y nÚX ||d}yt|
||}t|
dd }|d@ dk}|r$|d	@ dk}t	j
d
kr8|sþt	j
dkr8|  |¡}t	 t|¡}t|
||| nt|
||	d || W n ttfk
rT   Y n X t d||¡ t||||dS |dkr|  |¡}|  ||¡}t d|¡ tjs*|dk	r*|dk	r*|rä|dkrÖt	 |¡}t|||}
nt||t|}
y|  |||
¡ t d|¡ W n tk
r(   Y nX |S )z¾Concrete implementation of InspectLoader.get_code.

        Reading of bytecode requires path_stats to be implemented. To write
        bytecode, set_data must also be implemented.

        NFTr¹   )r   r*   r   r#   rO   rK   ÚneverÚalwaysÚsizez{} matches {})r   rx   rz   zcode object from {}z
wrote {!r})rÊ   rh   rW   rü   r1   r   r   r§   Ú
memoryviewr²   Úcheck_hash_based_pycsr¬   Ú_RAW_MAGIC_NUMBERr­   r«   r   r¤   r   r£   rµ   r  r   Údont_write_bytecoder½   rº   r&   rÿ   )r   r   rz   r©   rÄ   r¬   Ú
hash_basedÚcheck_sourcerx   ÚstrF   r¥   rX   Ú
bytes_dataÚcode_objectr   r   r	   ró     s    








zSourceLoader.get_codeN)
r   r   r   rû   rü   rÿ   rý   r  r  ró   r   r   r   r	   rú   ß  s   

rú   c                   s|   e Zd ZdZdd Zdd Zdd Ze fdd	Zed
d Z	dd Z
edd Zdd Zdd Zdd Zdd Z  ZS )Ú
FileLoaderzgBase file loader class which implements the loader protocol methods that
    require file system usage.c             C   s   || _ || _dS )zKCache the module name and the path to the file found by the
        finder.N)r   r*   )r   r   r*   r   r   r	   rï   t  s    zFileLoader.__init__c             C   s   | j |j ko| j|jkS )N)Ú	__class__r   )r   Úotherr   r   r	   Ú__eq__z  s    zFileLoader.__eq__c             C   s   t | jt | jA S )N)Úhashr   r*   )r   r   r   r	   Ú__hash__~  s    zFileLoader.__hash__c                s   t t|  |¡S )zdLoad a module from a file.

        This method is deprecated.  Use exec_module() instead.

        )Úsuperr  rù   )r   r   )r  r   r	   rù     s    
zFileLoader.load_modulec             C   s   | j S )z:Return the path to the source file as found by the finder.)r*   )r   r   r   r   r	   rÊ     s    zFileLoader.get_filenamec          	   C   s    t  |d¡
}| ¡ S Q R X dS )z'Return the data from path as raw bytes.ÚrN)rA   rB   Úread)r   r*   rI   r   r   r	   r     s    zFileLoader.get_datac             C   s   |   |¡r| S d S )N)rÌ   )r   rö   r   r   r	   Úget_resource_reader  s    
zFileLoader.get_resource_readerc             C   s    t t| jd |}t |d¡S )NrO   r  )r"   r.   r*   rA   rB   )r   Úresourcer*   r   r   r	   Úopen_resource  s    zFileLoader.open_resourcec             C   s&   |   |¡sttt| jd |}|S )NrO   )Úis_resourceÚFileNotFoundErrorr"   r.   r*   )r   r  r*   r   r   r	   Úresource_path£  s    
zFileLoader.resource_pathc             C   s(   t |krdS tt| jd |}t|S )NFrO   )r   r"   r.   r*   r6   )r   r   r*   r   r   r	   r  ©  s    zFileLoader.is_resourcec             C   s   t t t| jd ¡S )NrO   )Úiterr   Úlistdirr.   r*   )r   r   r   r	   Úcontents¯  s    zFileLoader.contents)r   r   r   r   rï   r  r  r   rù   rÊ   r   r  r  r!  r  r$  Ú__classcell__r   r   )r  r	   r  o  s   r  c               @   s.   e Zd ZdZdd Zdd Zdddd	Zd
S )ÚSourceFileLoaderz>Concrete implementation of SourceLoader using the file system.c             C   s   t |}|j|jdS )z!Return the metadata for the path.)r¹   r	  )r0   Úst_mtimeÚst_size)r   r*   r  r   r   r	   rü   ·  s    zSourceFileLoader.path_statsc             C   s   t |}| j|||dS )N)Ú_mode)r   rý   )r   rz   rx   rF   r3   r   r   r	   rÿ   ¼  s    z SourceFileLoader._cache_bytecodei¶  )r)  c      	      C   sú   t |\}}g }x&|r6t|s6t |\}}| |¡ qW xnt|D ]b}t||}yt |¡ W qB tk
rt   wBY qB tk
r¢ } zt	 
d||¡ dS d}~X Y qBX qBW yt||| t	 
d|¡ W n0 tk
rô } zt	 
d||¡ W dd}~X Y nX dS )zWrite bytes data to a file.zcould not create {!r}: {!r}Nzcreated {!r})r.   r8   rÑ   r(   r"   r   ÚmkdirÚFileExistsErrorr1   r   r£   rJ   )	r   r*   rF   r)  Úparentr~   r!   r   r  r   r   r	   rý   Á  s*    
zSourceFileLoader.set_dataN)r   r   r   r   rü   rÿ   rý   r   r   r   r	   r&  ³  s   r&  c               @   s    e Zd ZdZdd Zdd ZdS )ÚSourcelessFileLoaderz-Loader which handles sourceless file imports.c             C   sD   |   |¡}|  |¡}||d}t||| tt|dd  ||dS )N)r   r*   r   )r   rx   )rÊ   r   r§   rµ   r
  )r   r   r*   rF   r¥   r   r   r	   ró   ä  s    

zSourcelessFileLoader.get_codec             C   s   dS )z'Return None as there is no source code.Nr   )r   r   r   r   r	   r  ô  s    zSourcelessFileLoader.get_sourceN)r   r   r   r   ró   r  r   r   r   r	   r-  à  s   r-  c               @   s\   e Zd ZdZdd Zdd Zdd Zdd	 Zd
d Zdd Z	dd Z
dd Zedd ZdS )ÚExtensionFileLoaderz]Loader for extension modules.

    The constructor is designed to work with FileFinder.

    c             C   s   || _ || _d S )N)r   r*   )r   r   r*   r   r   r	   rï     s    zExtensionFileLoader.__init__c             C   s   | j |j ko| j|jkS )N)r  r   )r   r  r   r   r	   r  	  s    zExtensionFileLoader.__eq__c             C   s   t | jt | jA S )N)r  r   r*   )r   r   r   r	   r    s    zExtensionFileLoader.__hash__c             C   s$   t  tj|¡}t  d|j| j¡ |S )z&Create an unitialized extension modulez&extension module {!r} loaded from {!r})r   rô   r²   Úcreate_dynamicr£   r   r*   )r   rÓ   rö   r   r   r	   rò     s
    
z!ExtensionFileLoader.create_modulec             C   s$   t  tj|¡ t  d| j| j¡ dS )zInitialize an extension modulez(extension module {!r} executed from {!r}N)r   rô   r²   Úexec_dynamicr£   r   r*   )r   rö   r   r   r	   r÷     s    zExtensionFileLoader.exec_modulec                s$   t | jd  t fddtD S )z1Return True if the extension module is a package.r#   c             3   s   | ]} d | kV  qdS )rï   Nr   )r   Úsuffix)Ú	file_namer   r	   ú	<genexpr>!  s   z1ExtensionFileLoader.is_package.<locals>.<genexpr>)r.   r*   ÚanyÚEXTENSION_SUFFIXES)r   r   r   )r2  r	   rÌ     s    zExtensionFileLoader.is_packagec             C   s   dS )z?Return None as an extension module cannot create a code object.Nr   )r   r   r   r   r	   ró   $  s    zExtensionFileLoader.get_codec             C   s   dS )z5Return None as extension modules have no source code.Nr   )r   r   r   r   r	   r  (  s    zExtensionFileLoader.get_sourcec             C   s   | j S )z:Return the path to the source file as found by the finder.)r*   )r   r   r   r   r	   rÊ   ,  s    z ExtensionFileLoader.get_filenameN)r   r   r   r   rï   r  r  rò   r÷   rÌ   ró   r  r   rÊ   r   r   r   r	   r.  ý  s   r.  c               @   s`   e Zd ZdZdd Zdd Zdd Zdd	 Zd
d Zdd Z	dd Z
dd Zdd Zdd ZdS )Ú_NamespacePatha&  Represents a namespace package's path.  It uses the module name
    to find its parent module, and from there it looks up the parent's
    __path__.  When this changes, the module's own path is recomputed,
    using path_finder.  For top-level modules, the parent module's path
    is sys.path.c             C   s$   || _ || _t|  ¡ | _|| _d S )N)Ú_nameÚ_pathr}   Ú_get_parent_pathÚ_last_parent_pathÚ_path_finder)r   r   r*   Úpath_finderr   r   r	   rï   9  s    z_NamespacePath.__init__c             C   s&   | j  d¡\}}}|dkrdS |dfS )z>Returns a tuple of (parent-module-name, parent-path-attr-name)rN   r%   )r   r*   Ú__path__)r7  r'   )r   r,  ÚdotÚmer   r   r	   Ú_find_parent_path_names?  s    z&_NamespacePath._find_parent_path_namesc             C   s   |   ¡ \}}ttj| |S )N)r@  r   r   Úmodules)r   Úparent_module_nameÚpath_attr_namer   r   r	   r9  I  s    z_NamespacePath._get_parent_pathc             C   sP   t |  ¡ }|| jkrJ|  | j|¡}|d k	rD|jd krD|jrD|j| _|| _| jS )N)r}   r9  r:  r;  r7  r   rÉ   r8  )r   Úparent_pathrÓ   r   r   r	   Ú_recalculateM  s    
z_NamespacePath._recalculatec             C   s   t |  ¡ S )N)r"  rE  )r   r   r   r	   Ú__iter__Z  s    z_NamespacePath.__iter__c             C   s   || j |< d S )N)r8  )r   Úindexr*   r   r   r	   Ú__setitem__]  s    z_NamespacePath.__setitem__c             C   s   t |  ¡ S )N)r&   rE  )r   r   r   r	   Ú__len__`  s    z_NamespacePath.__len__c             C   s   d  | j¡S )Nz_NamespacePath({!r}))r;   r8  )r   r   r   r	   Ú__repr__c  s    z_NamespacePath.__repr__c             C   s   ||   ¡ kS )N)rE  )r   Úitemr   r   r	   Ú__contains__f  s    z_NamespacePath.__contains__c             C   s   | j  |¡ d S )N)r8  rÑ   )r   rK  r   r   r	   rÑ   i  s    z_NamespacePath.appendN)r   r   r   r   rï   r@  r9  rE  rF  rH  rI  rJ  rL  rÑ   r   r   r   r	   r6  2  s   
r6  c               @   sP   e Zd Zdd Zedd Zdd Zdd Zd	d
 Zdd Z	dd Z
dd ZdS )Ú_NamespaceLoaderc             C   s   t |||| _d S )N)r6  r8  )r   r   r*   r<  r   r   r	   rï   o  s    z_NamespaceLoader.__init__c             C   s   d  |j¡S )zsReturn repr for the module.

        The method is deprecated.  The import machinery does the job itself.

        z<module {!r} (namespace)>)r;   r   )rÝ   rö   r   r   r	   Úmodule_reprr  s    z_NamespaceLoader.module_reprc             C   s   dS )NTr   )r   r   r   r   r	   rÌ   {  s    z_NamespaceLoader.is_packagec             C   s   dS )Nr%   r   )r   r   r   r   r	   r  ~  s    z_NamespaceLoader.get_sourcec             C   s   t dddddS )Nr%   z<string>rõ   T)r  )r  )r   r   r   r   r	   ró     s    z_NamespaceLoader.get_codec             C   s   dS )z*Use default semantics for module creation.Nr   )r   rÓ   r   r   r	   rò     s    z_NamespaceLoader.create_modulec             C   s   d S )Nr   )r   rö   r   r   r	   r÷     s    z_NamespaceLoader.exec_modulec             C   s   t  d| j¡ t  | |¡S )zbLoad a namespace module.

        This method is deprecated.  Use exec_module() instead.

        z&namespace module loaded with path {!r})r   r£   r8  rø   )r   r   r   r   r	   rù     s    z_NamespaceLoader.load_moduleN)r   r   r   rï   rí   rN  rÌ   r  ró   rò   r÷   rù   r   r   r   r	   rM  n  s   	rM  c               @   sj   e Zd ZdZedd Zedd Zedd Zedd	 ZedddZ	edddZ
edddZd
S )Ú
PathFinderz>Meta path finder for sys.path and package __path__ attributes.c             C   sD   x>t tj ¡ D ],\}}|dkr*tj|= qt|dr| ¡  qW dS )z}Call the invalidate_caches() method on all path entry finders
        stored in sys.path_importer_caches (where implemented).NÚinvalidate_caches)Úlistr   Úpath_importer_cacheÚitemsr   rP  )rÝ   r   Úfinderr   r   r	   rP    s
    

zPathFinder.invalidate_cachesc          	   C   sT   t jdk	rt jst dt¡ x2t jD ]$}y||S  tk
rF   w$Y q$X q$W dS dS )z.Search sys.path_hooks for a finder for 'path'.Nzsys.path_hooks is empty)r   Ú
path_hooksrP   rQ   r   r   )rÝ   r*   Úhookr   r   r	   Ú_path_hooks¦  s    zPathFinder._path_hooksc             C   sf   |dkr*yt  ¡ }W n tk
r(   dS X ytj| }W n( tk
r`   |  |¡}|tj|< Y nX |S )zÒGet the finder for the path entry from sys.path_importer_cache.

        If the path entry is not in the cache, find the appropriate finder
        and cache it. If no finder is available, store None.

        r%   N)r   r7   r   r   rR  ÚKeyErrorrW  )rÝ   r*   rT  r   r   r	   Ú_path_importer_cache³  s    
zPathFinder._path_importer_cachec             C   sR   t |dr| |¡\}}n| |¡}g }|d k	r<t ||¡S t |d ¡}||_|S )Nr   )r   r   rì   r   ré   rÍ   rÉ   )rÝ   r   rT  r   r   rÓ   r   r   r	   Ú_legacy_get_specÉ  s    

zPathFinder._legacy_get_specNc       	      C   sª   g }x |D ]}t |ttfsq
|  |¡}|dk	r
t|drH| ||¡}n|  ||¡}|dkr^q
|jdk	rl|S |j}|dkrt	d| 
|¡ q
W t |d¡}||_|S dS )z?Find the loader or namespace_path for this module/package name.Nrë   zspec missing loader)r°   rZ   ÚbytesrY  r   rë   rZ  r   rÉ   r   r·   r   rÍ   )	rÝ   r   r*   rê   Únamespace_pathÚentryrT  rÓ   r   r   r   r	   Ú	_get_specØ  s(    



zPathFinder._get_specc             C   sd   |dkrt j}|  |||¡}|dkr(dS |jdkr\|j}|rVd|_t||| j|_|S dS n|S dS )zTry to find a spec for 'fullname' on sys.path or 'path'.

        The search is based on sys.path_hooks and sys.path_importer_cache.
        N)r   r*   r^  r   rÉ   rË   r6  )rÝ   r   r*   rê   rÓ   r\  r   r   r	   rë   ø  s    
zPathFinder.find_specc             C   s   |   ||¡}|dkrdS |jS )zªfind the module on sys.path or 'path' based on sys.path_hooks and
        sys.path_importer_cache.

        This method is deprecated.  Use find_spec() instead.

        N)rë   r   )rÝ   r   r*   rÓ   r   r   r	   rì     s    zPathFinder.find_module)N)NN)N)r   r   r   r   rí   rP  rW  rY  rZ  r^  rë   rì   r   r   r   r	   rO    s   
rO  c               @   sZ   e Zd ZdZdd Zdd ZeZdd Zdd	 Z	dddZ
dd Zedd Zdd Zd
S )Ú
FileFinderz¬File-based finder.

    Interactions with the file system are cached for performance, being
    refreshed when the directory the finder is handling has been modified.

    c                sX   g }x(|D ] \ }|   fdd|D ¡ q
W || _|p:d| _d| _t | _t | _dS )zInitialize with the path to search on and a variable number of
        2-tuples containing the loader and the file suffixes the loader
        recognizes.c             3   s   | ]}| fV  qd S )Nr   )r   r1  )r   r   r	   r3  -  s    z&FileFinder.__init__.<locals>.<genexpr>rN   ru   N)r·   Ú_loadersr*   Ú_path_mtimeÚsetÚ_path_cacheÚ_relaxed_path_cache)r   r*   Úloader_detailsÚloadersrÕ   r   )r   r	   rï   '  s    
zFileFinder.__init__c             C   s
   d| _ dS )zInvalidate the directory mtime.ru   N)ra  )r   r   r   r	   rP  5  s    zFileFinder.invalidate_cachesc             C   s*   |   |¡}|dkrdg fS |j|jp&g fS )zÅTry to find a loader for the specified module, or the namespace
        package portions. Returns (loader, list-of-portions).

        This method is deprecated.  Use find_spec() instead.

        N)rë   r   rÉ   )r   r   rÓ   r   r   r	   r   ;  s    
zFileFinder.find_loaderc             C   s   |||}t ||||dS )N)r   rÉ   )r×   )r   rÔ   r   r*   Úsmslrê   r   r   r   r	   r^  G  s    
zFileFinder._get_specNc             C   sb  d}|  d¡d }yt| jp"t ¡ j}W n tk
rB   d}Y nX || jkr\|  ¡  || _t	 rr| j
}| ¡ }n
| j}|}||krÚt| j|}xH| jD ]6\}	}
d|	 }t||}t|r|  |
|||g|¡S qW t|}xX| jD ]N\}	}
t| j||	 }tjd|dd ||	 |krât|râ|  |
||d|¡S qâW |r^t d	|¡ t |d¡}|g|_|S dS )
zoTry to find a spec for the specified module.

        Returns the matching spec, or None if not found.
        FrN   rK   ru   rï   z	trying {})Ú	verbosityNzpossible namespace for {})r'   r0   r*   r   r7   r'  r1   ra  Ú_fill_cacher
   rd  rw   rc  r"   r`  r6   r^  r8   r   r£   rÍ   rÉ   )r   r   rê   Úis_namespaceÚtail_moduler¹   ÚcacheÚcache_moduleÚ	base_pathr1  rÔ   Úinit_filenameÚ	full_pathrÓ   r   r   r	   rë   L  sF    




zFileFinder.find_specc       	   
   C   sÂ   | j }yt |pt ¡ ¡}W n tttfk
r:   g }Y nX tj 	d¡sTt
|| _nNt
 }x@|D ]8}| d¡\}}}|rd || ¡ ¡}n|}| |¡ q`W || _tj 	t¡r¾dd |D | _dS )zDFill the cache of potential modules and packages for this directory.r   rN   z{}.{}c             S   s   h | ]}|  ¡ qS r   )rw   )r   Úfnr   r   r	   ú	<setcomp>  s    z)FileFinder._fill_cache.<locals>.<setcomp>N)r*   r   r#  r7   r   ÚPermissionErrorÚNotADirectoryErrorr   r   r   rb  rc  rl   r;   rw   Úaddr   rd  )	r   r*   r$  Úlower_suffix_contentsrK  r   r>  r1  Únew_namer   r   r	   ri  |  s"    

zFileFinder._fill_cachec                s    fdd}|S )a  A class method which returns a closure to use on sys.path_hook
        which will return an instance using the specified loaders and the path
        called on the closure.

        If the path called on the closure is not a directory, ImportError is
        raised.

        c                s"   t | std| d | f S )z-Path hook for importlib.machinery.FileFinder.zonly directories are supported)r*   )r8   r   )r*   )rÝ   re  r   r	   Úpath_hook_for_FileFinder¥  s    z6FileFinder.path_hook.<locals>.path_hook_for_FileFinderr   )rÝ   re  rx  r   )rÝ   re  r	   Ú	path_hook  s    
zFileFinder.path_hookc             C   s   d  | j¡S )NzFileFinder({!r}))r;   r*   )r   r   r   r	   rJ  ­  s    zFileFinder.__repr__)N)r   r   r   r   rï   rP  r   rì   r   r^  rë   ri  rí   ry  rJ  r   r   r   r	   r_    s   
0r_  c             C   s   |   d¡}|   d¡}|sB|r$|j}n||kr8t||}n
t||}|sTt|||d}y$|| d< || d< || d< || d< W n tk
r   Y nX d S )NÚ
__loader__Ú__spec__)r   Ú__file__Ú
__cached__)Úgetr   r-  r&  r×   Ú	Exception)Únsr   ÚpathnameÚ	cpathnamer   rÓ   r   r   r	   Ú_fix_up_module³  s"    


r  c              C   s&   t t ¡ f} ttf}ttf}| ||gS )z_Returns a list of file-based module loaders.

    Each item is a tuple (loader, suffixes).
    )r.  r²   Úextension_suffixesr&  rm   r-  r_   )Ú
extensionsÚsourceÚbytecoder   r   r	   rÏ   Ê  s    rÏ   c          	   C   s  | a t jat jatjt }x8dD ]0}|tjkr:t  |¡}n
tj| }t||| q W ddgfdddgff}xv|D ]f\}}tdd |D st|d }|tjkr®tj| }P qpyt  |¡}P W qp t	k
rÔ   wpY qpX qpW t	d	t|d
| t|d| t|dd 
|¡ t  d¡}	t|d|	 t  d¡}
t|d|
 |dkrXt  d¡}t|d| t|dt  t t ¡ ¡ |dkrt d¡ dtkrdt_dS )zÍSetup the path-based importers for importlib by importing needed
    built-in modules and injecting them into the global namespace.

    Other components are extracted from the core bootstrap module.

    )rA   rP   Úbuiltinsr®   Úposixú/Úntú\c             s   s   | ]}t |d kV  qdS )r#   N)r&   )r   rd   r   r   r	   r3  î  s    z_setup.<locals>.<genexpr>rO   zimportlib requires posix or ntr   r   r   r%   Ú_threadÚ_weakrefÚwinregrÙ   r
   z.pywz_d.pydTN)r   r   r²   rA  r   Ú_builtin_from_namer   Úallr»   r   r    r   r5  r·   r  rm   rÑ   rØ   rà   )Ú_bootstrap_moduleÚself_moduleÚbuiltin_nameÚbuiltin_moduleÚ
os_detailsÚ
builtin_osr   r   Ú	os_moduleÚthread_moduleÚweakref_moduleÚwinreg_moduler   r   r	   Ú_setupÕ  sL    













r  c             C   s2   t |  t }tj tj| g¡ tj t	¡ dS )z)Install the path-based import components.N)
r  rÏ   r   rU  r·   r_  ry  Ú	meta_pathrÑ   rO  )r  Úsupported_loadersr   r   r	   Ú_install  s    r  )r9   )N)NNN)rO   rO   )T)N)N)=r   r   Ú%_CASE_INSENSITIVE_PLATFORMS_BYTES_KEYr   r   r   r   r"   r.   r0   r5   r6   r8   rJ   ÚtypeÚ__code__r±   r   r¢   r   r   r  r^   r]   rm   r_   ÚDEBUG_BYTECODE_SUFFIXESÚOPTIMIZED_BYTECODE_SUFFIXESrh   rs   r{   r   r   r   r   r§   r«   r­   rµ   rº   r½   rÈ   ÚobjectrÐ   r×   rØ   rî   rú   r  r&  r-  r5  r.  r6  rM  rO  r_  r  rÏ   r  r  r   r   r   r	   Ú<module>   sv   
	

 -"!



C@ D-5<*  
@ã               @   s    d Z ddlZddlmZ ddlmZ ddlmZ ddlmZmZm	Z	m
Z
mZ ddlmZ dd	lmZ dd
lmZ ddlmZ ddlmZ ddlmZ dd ZdS )z9The machinery of importlib: finders, loaders, hooks, etc.é    Né   )Ú
ModuleSpec)ÚBuiltinImporter)ÚFrozenImporter)ÚSOURCE_SUFFIXESÚDEBUG_BYTECODE_SUFFIXESÚOPTIMIZED_BYTECODE_SUFFIXESÚBYTECODE_SUFFIXESÚEXTENSION_SUFFIXES)ÚWindowsRegistryFinder)Ú
PathFinder)Ú
FileFinder)ÚSourceFileLoader)ÚSourcelessFileLoader)ÚExtensionFileLoaderc               C   s   t t t S )zAReturns a list of all recognized module suffixes for this process)r   r	   r
   © r   r   ú$D:\Python\lib\importlib\machinery.pyÚall_suffixes   s    r   )Ú__doc__Ú_impÚ
_bootstrapr   r   r   Ú_bootstrap_externalr   r   r   r	   r
   r   r   r   r   r   r   r   r   r   r   r   Ú<module>   s   ã               @   s  d Z dZddlZddlZddlZddlZddlZddl	Z	ddl
Z
ddlZddlZddlZddlZddlZddlZddlZddlZddlZddlmZ ddlmZmZ e Zx"ej ¡ D ]\ZZeede < q¶W dZdd	 Zd
d Z dd Z!dd Z"dd Z#e$edrdd Z%ndd Z%e$edr.dd Z&ndd Z&dd Z'dd Z(dd Z)d d! Z*d"d# Z+d$d% Z,d&d' Z-d(d) Z.d*d+ Z/d,d- Z0d.d/ Z1d0d1 Z2d2d3 Z3d4d5 Z4dôd6d7Z5ed8d9Z6d:d; Z7d<d= Z8dd>d?d@Z9dAdB Z:dCdD Z;dEdF Z<dGdH Z=dIdJ Z>dKdL Z?dMdN Z@dOdP ZAdõdQdRZBi ZCi ZDdödSdTZEdUdV ZFdWdX ZGG dYdZ dZeHZIG d[d\ d\ZJd]d^ ZKd_d` ZLdadb ZMdcdd ZNd÷dfdgZOedhdiZPdjdk ZQdldm ZRedndoZSdpdq ZTedrdsZUdtdu ZVedvdwZWdxdy ZXdødzd{ZYd|d} ZZdddd~i i e[dd dd dd dd eYfddZ\e[dd dd dd fddZ]dd Z^dd Z_dd Z`eddZadd ZbeddZcdùddZddd Zeeddecjf ZgdúddZhdûd d¡Zid¢d£ Zjdüd¤d¥Zkdýd¦d§Zlem Znd¨d© Zodªd« Zpd¬d­ Zqd®d¯ Zrd°d± Zsenfd²d³Ztd´ZudµZvd¶Zwd·Zxd¸d¹ Zydºd» Zzd¼Z{d½Z|d¾Z}d¿Z~dÀdÁ ZdÂdÃ ZeejZeejZeejdÄ ZeeeejfZdÅdÆ ZdþdÇdÈZdÉdÊ ZdËdÌ ZdÍdÎ ZdÏdÐ ZdÑdÒ ZdÿdÔdÕZd dÖd×ZdØdÙ ZdÓdÓdÚdÛdÜZG dÝdÞ dÞZG dßdà dàZG dádâ dâejZejZejZejZej Z¡ej¢Z£edãedäedåe¡dæe£dçiZ¤e¤j¥Z¦G dèdé déZ§G dêdë dëZ¨G dìdí díZ©dÓdîdïdðZªdñdò Z«e¬dókre«  dS (  a  Get useful information from live Python objects.

This module encapsulates the interface provided by the internal special
attributes (co_*, im_*, tb_*, etc.) in a friendlier fashion.
It also provides some help for examining source code and class layout.

Here are some of the useful functions provided by this module:

    ismodule(), isclass(), ismethod(), isfunction(), isgeneratorfunction(),
        isgenerator(), istraceback(), isframe(), iscode(), isbuiltin(),
        isroutine() - check object types
    getmembers() - get members of an object that satisfy a given condition

    getfile(), getsourcefile(), getsource() - find an object's source code
    getdoc(), getcomments() - get documentation on an object
    getmodule() - determine the module that an object came from
    getclasstree() - arrange classes so as to represent their hierarchy

    getargvalues(), getcallargs() - get info about function arguments
    getfullargspec() - same, with support for Python 3 features
    formatargvalues() - format an argument spec
    getouterframes(), getinnerframes() - get info about frames
    currentframe() - get the current stack frame
    stack(), trace() - get info about frames on the stack or in a traceback

    signature() - get a Signature object for the callable
)zKa-Ping Yee <ping@lfw.org>z'Yury Selivanov <yselivanov@sprymix.com>é    N)Ú
attrgetter)Ú
namedtupleÚOrderedDictZCO_i   c             C   s   t | tjS )zøReturn true if the object is a module.

    Module objects provide these attributes:
        __cached__      pathname to byte compiled file
        __doc__         documentation string
        __file__        filename (missing for built-in modules))Ú
isinstanceÚtypesÚ
ModuleType)Úobject© r	   úD:\Python\lib\inspect.pyÚismodule?   s    r   c             C   s
   t | tS )zÆReturn true if the object is a class.

    Class objects provide these attributes:
        __doc__         documentation string
        __module__      name of module in which this class was defined)r   Útype)r   r	   r	   r
   ÚisclassH   s    r   c             C   s   t | tjS )a_  Return true if the object is an instance method.

    Instance method objects provide these attributes:
        __doc__         documentation string
        __name__        name with which this method was defined
        __func__        function object containing implementation of method
        __self__        instance to which this method is bound)r   r   Ú
MethodType)r   r	   r	   r
   ÚismethodP   s    r   c             C   s:   t | st| st| rdS t| }t|do8t|d S )a  Return true if the object is a method descriptor.

    But not if ismethod() or isclass() or isfunction() are true.

    This is new in Python 2.2, and, for example, is true of int.__add__.
    An object passing this test has a __get__ attribute but not a __set__
    attribute, but beyond that the set of attributes varies.  __name__ is
    usually sensible, and __doc__ often is.

    Methods implemented via descriptors that also pass one of the other
    tests return false from the ismethoddescriptor() test, simply because
    the other tests promise more -- you can, e.g., count on having the
    __func__ attribute (etc) when an object passes ismethod().FÚ__get__Ú__set__)r   r   Ú
isfunctionr   Úhasattr)r   Útpr	   r	   r
   ÚismethoddescriptorZ   s    r   c             C   s8   t | st| st| rdS t| }t|do6t|dS )a  Return true if the object is a data descriptor.

    Data descriptors have both a __get__ and a __set__ attribute.  Examples are
    properties (defined in Python) and getsets and members (defined in C).
    Typically, data descriptors will also have __name__ and __doc__ attributes
    (properties, getsets, and members have both of these attributes), but this
    is not guaranteed.Fr   r   )r   r   r   r   r   )r   r   r	   r	   r
   Úisdatadescriptorn   s    r   ÚMemberDescriptorTypec             C   s   t | tjS )zReturn true if the object is a member descriptor.

        Member descriptors are specialized descriptors defined in extension
        modules.)r   r   r   )r   r	   r	   r
   Úismemberdescriptor~   s    r   c             C   s   dS )zReturn true if the object is a member descriptor.

        Member descriptors are specialized descriptors defined in extension
        modules.Fr	   )r   r	   r	   r
   r      s    ÚGetSetDescriptorTypec             C   s   t | tjS )zReturn true if the object is a getset descriptor.

        getset descriptors are specialized descriptors defined in extension
        modules.)r   r   r   )r   r	   r	   r
   Úisgetsetdescriptor   s    r   c             C   s   dS )zReturn true if the object is a getset descriptor.

        getset descriptors are specialized descriptors defined in extension
        modules.Fr	   )r   r	   r	   r
   r      s    c             C   s   t | tjS )a(  Return true if the object is a user-defined function.

    Function objects provide these attributes:
        __doc__         documentation string
        __name__        name with which this function was defined
        __code__        code object containing compiled function bytecode
        __defaults__    tuple of any default values for arguments
        __globals__     global namespace in which this function was defined
        __annotations__ dict of parameter annotations
        __kwdefaults__  dict of keyword only parameters with defaults)r   r   ÚFunctionType)r   r	   r	   r
   r      s    r   c             C   s    t t| st| o| jjt@ S )z¼Return true if the object is a user-defined generator function.

    Generator function objects provide the same attributes as functions.
    See help(isfunction) for a list of attributes.)Úboolr   r   Ú__code__Úco_flagsÚCO_GENERATOR)r   r	   r	   r
   Úisgeneratorfunction«   s    r    c             C   s    t t| st| o| jjt@ S )zuReturn true if the object is a coroutine function.

    Coroutine functions are defined with "async def" syntax.
    )r   r   r   r   r   ÚCO_COROUTINE)r   r	   r	   r
   Úiscoroutinefunction³   s    r"   c             C   s    t t| st| o| jjt@ S )z¿Return true if the object is an asynchronous generator function.

    Asynchronous generator functions are defined with "async def"
    syntax and have "yield" expressions in their body.
    )r   r   r   r   r   ÚCO_ASYNC_GENERATOR)r   r	   r	   r
   Úisasyncgenfunction»   s    r$   c             C   s   t | tjS )z7Return true if the object is an asynchronous generator.)r   r   ÚAsyncGeneratorType)r   r	   r	   r
   Ú
isasyncgenÄ   s    r&   c             C   s   t | tjS )a  Return true if the object is a generator.

    Generator objects provide these attributes:
        __iter__        defined to support iteration over container
        close           raises a new GeneratorExit exception inside the
                        generator to terminate the iteration
        gi_code         code object
        gi_frame        frame object or possibly None once the generator has
                        been exhausted
        gi_running      set to 1 when generator is executing, 0 otherwise
        next            return the next item from the container
        send            resumes the generator and "sends" a value that becomes
                        the result of the current yield-expression
        throw           used to raise an exception inside the generator)r   r   ÚGeneratorType)r   r	   r	   r
   ÚisgeneratorÈ   s    r(   c             C   s   t | tjS )z)Return true if the object is a coroutine.)r   r   ÚCoroutineType)r   r	   r	   r
   ÚiscoroutineÙ   s    r*   c             C   s6   t | tjp4t | tjr(t| jjt@ p4t | tj	j
S )z?Return true if object can be passed to an ``await`` expression.)r   r   r)   r'   r   Úgi_coder   ÚCO_ITERABLE_COROUTINEÚcollectionsÚabcÚ	Awaitable)r   r	   r	   r
   ÚisawaitableÝ   s    r0   c             C   s   t | tjS )ab  Return true if the object is a traceback.

    Traceback objects provide these attributes:
        tb_frame        frame object at this level
        tb_lasti        index of last attempted instruction in bytecode
        tb_lineno       current line number in Python source code
        tb_next         next inner traceback object (called by this level))r   r   ÚTracebackType)r   r	   r	   r
   Úistracebackä   s    r2   c             C   s   t | tjS )a`  Return true if the object is a frame object.

    Frame objects provide these attributes:
        f_back          next outer frame object (this frame's caller)
        f_builtins      built-in namespace seen by this frame
        f_code          code object being executed in this frame
        f_globals       global namespace seen by this frame
        f_lasti         index of last attempted instruction in bytecode
        f_lineno        current line number in Python source code
        f_locals        local namespace seen by this frame
        f_trace         tracing function for this frame, or None)r   r   Ú	FrameType)r   r	   r	   r
   Úisframeî   s    r4   c             C   s   t | tjS )aE  Return true if the object is a code object.

    Code objects provide these attributes:
        co_argcount         number of arguments (not including *, ** args
                            or keyword only arguments)
        co_code             string of raw compiled bytecode
        co_cellvars         tuple of names of cell variables
        co_consts           tuple of constants used in the bytecode
        co_filename         name of file in which this code object was created
        co_firstlineno      number of first line in Python source code
        co_flags            bitmap: 1=optimized | 2=newlocals | 4=*arg | 8=**arg
                            | 16=nested | 32=generator | 64=nofree | 128=coroutine
                            | 256=iterable_coroutine | 512=async_generator
        co_freevars         tuple of names of free variables
        co_kwonlyargcount   number of keyword only arguments (not including ** arg)
        co_lnotab           encoded mapping of line numbers to bytecode indices
        co_name             name with which this code object was defined
        co_names            tuple of names of local variables
        co_nlocals          number of local variables
        co_stacksize        virtual machine stack space required
        co_varnames         tuple of names of arguments and local variables)r   r   ÚCodeType)r   r	   r	   r
   Úiscodeü   s    r6   c             C   s   t | tjS )a,  Return true if the object is a built-in function or method.

    Built-in functions and methods provide these attributes:
        __doc__         documentation string
        __name__        original name of this function or method
        __self__        instance to which a method is bound, or None)r   r   ÚBuiltinFunctionType)r   r	   r	   r
   Ú	isbuiltin  s    r8   c             C   s    t | pt| pt| pt| S )z<Return true if the object is any kind of function or method.)r8   r   r   r   )r   r	   r	   r
   Ú	isroutine  s    r9   c             C   s¬   t | tsdS | jt@ rdS tt| tjs0dS t| dr>dS x&| j 	¡ D ]\}}t
|ddrJdS qJW x@| jD ]6}x0t
|ddD ] }t
| |d}t
|ddrdS qW qnW dS )z:Return true if the object is an abstract base class (ABC).FTÚ__abstractmethods__Ú__isabstractmethod__r	   N)r   r   Ú	__flags__ÚTPFLAGS_IS_ABSTRACTÚ
issubclassr.   ÚABCMetar   Ú__dict__ÚitemsÚgetattrÚ	__bases__)r   ÚnameÚvalueÚbaser	   r	   r
   Ú
isabstract$  s"    


rG   c          	   C   s$  t | r| ft|  }nd}g }t }t| }yBx<| jD ]2}x,|j ¡ D ]\}}t|tj	rH| 
|¡ qHW q8W W n tk
r   Y nX x|D ]}	yt| |	}
|	|kr¨tW n: tk
rä   x$|D ]}|	|jkrÀ|j|	 }
P qÀW wY nX |rô||
r| 
|	|
f¡ | |	¡ qW |jdd d |S )zReturn all members of an object as (name, value) pairs sorted by name.
    Optionally, only return members that satisfy a given predicate.r	   c             S   s   | d S )Nr   r	   )Úpairr	   r	   r
   Ú<lambda>e  ó    zgetmembers.<locals>.<lambda>)Úkey)r   ÚgetmroÚsetÚdirrC   r@   rA   r   r   ÚDynamicClassAttributeÚappendÚAttributeErrorrB   ÚaddÚsort)r   Ú	predicateÚmroÚresultsÚ	processedÚnamesrF   ÚkÚvrK   rE   r	   r	   r
   Ú
getmembers<  s:    




r[   Ú	Attributezname kind defining_class objectc             C   sh  t | }t t| }tdd |D }| f| }|| }t| }x:|D ]2}x,|j ¡ D ]\}}t|tjrV| 	|¡ qVW qFW g }	t
 }
xÚ|D ]Ð}d}d}d}||
kry|dkr¼tdt| |}W n" tk
rê } zW dd}~X Y n¢X t|d|}||krd}d}x(|D ] }t||d}||kr|}qW xH|D ]@}y| | |¡}W n tk
rh   w:Y nX ||kr:|}q:W |dk	r|}x4|D ],}||jkr|j| }||krº|}P qW |dkrÎq|dk	rÜ|n|}t|ttjfrüd}|}nFt|ttjfrd}|}n*t|tr.d	}|}nt|r>d
}nd}|	 	t||||¡ |
 |¡ qW |	S )aN  Return list of attribute-descriptor tuples.

    For each name in dir(cls), the return list contains a 4-tuple
    with these elements:

        0. The name (a string).

        1. The kind of attribute this is, one of these strings:
               'class method'    created via classmethod()
               'static method'   created via staticmethod()
               'property'        created via property()
               'method'          any other flavor of method or descriptor
               'data'            not a method

        2. The class which defined this attribute (a class).

        3. The object as obtained by calling getattr; if this fails, or if the
           resulting object does not live anywhere in the class' mro (including
           metaclasses) then the object is looked up in the defining class's
           dict (found by walking the mro).

    If one of the items in dir(cls) is stored in the metaclass it will now
    be discovered and not have None be listed as the class in which it was
    defined.  Any items whose home class cannot be discovered are skipped.
    c             s   s   | ]}|t tfkr|V  qd S )N)r   r   )Ú.0Úclsr	   r	   r
   ú	<genexpr>  s    z'classify_class_attrs.<locals>.<genexpr>Nr@   z)__dict__ is special, don't want the proxyÚ__objclass__zstatic methodzclass methodÚpropertyÚmethodÚdata)rL   r   ÚtuplerN   r@   rA   r   r   rO   rP   rM   Ú	ExceptionrB   Ú__getattr__rQ   ÚstaticmethodÚBuiltinMethodTypeÚclassmethodÚClassMethodDescriptorTypera   r9   r\   rR   )r^   rU   ÚmetamroÚclass_basesÚ	all_basesrX   rF   rY   rZ   ÚresultrW   rD   ÚhomeclsÚget_objÚdict_objÚexcÚlast_clsÚsrch_clsÚsrch_objÚobjÚkindr	   r	   r
   Úclassify_class_attrsj  s    

















rx   c             C   s   | j S )zHReturn tuple of base classes (including cls) in method resolution order.)Ú__mro__)r^   r	   r	   r
   rL   Þ  s    rL   )Ústopc               s    dkrdd }n fdd}| }t ||i}t ¡ }xD|| rz| j} t | }||ksbt||krptd |¡| ||< q8W | S )an  Get the object wrapped by *func*.

   Follows the chain of :attr:`__wrapped__` attributes returning the last
   object in the chain.

   *stop* is an optional callback accepting an object in the wrapper chain
   as its sole argument that allows the unwrapping to be terminated early if
   the callback returns a true value. If the callback never returns a true
   value, the last object in the chain is returned as usual. For example,
   :func:`signature` uses this to stop unwrapping if any object in the
   chain has a ``__signature__`` attribute defined.

   :exc:`ValueError` is raised if a cycle is encountered.

    Nc             S   s
   t | dS )NÚ__wrapped__)r   )Úfr	   r	   r
   Ú_is_wrapperõ  s    zunwrap.<locals>._is_wrapperc                s   t | do |  S )Nr{   )r   )r|   )rz   r	   r
   r}   ø  s    z!wrapper loop when unwrapping {!r})ÚidÚsysÚgetrecursionlimitr{   ÚlenÚ
ValueErrorÚformat)Úfuncrz   r}   r|   ÚmemoÚrecursion_limitÚid_funcr	   )rz   r
   Úunwrapä  s    

r   c             C   s   |   ¡ }t|t| ¡  S )zBReturn the indent size, in spaces, at the start of a line of text.)Ú
expandtabsr   Úlstrip)ÚlineÚexpliner	   r	   r
   Ú
indentsize  s    r   c             C   sR   t j | j¡}|d krd S x&| j d¡d d D ]}t||}q0W t|sNd S |S )NÚ.éÿÿÿÿ)r   ÚmodulesÚgetÚ
__module__Ú__qualname__ÚsplitrB   r   )r   r^   rD   r	   r	   r
   Ú
_findclass  s    r   c          	   C   sÖ  t | rRxD| jD ]:}|tk	ry
|j}W n tk
r<   wY nX |d k	r|S qW d S t| r| jj}| j}t |rt	t	||d d| jkr|}n|j
}nðt| rÈ| j}t| }|d ksÂt	||| k	rÆd S n¾t| r| j}| j}t |r|jd | | jkr|}n|j
}nzt| trL| j}|j}t|}|d ksFt	||| k	rd S n:t| s`t| r| j}| j}t	||| k	rd S nd S xJ|jD ]@}yt	||j}W n tk
r¼   wY nX |d k	r|S qW d S )NÚ__func__r   )r   ry   r   Ú__doc__rQ   r   r   Ú__name__Ú__self__rB   Ú	__class__r   r   r8   r   r   ra   Úfgetr   r   r`   )rv   rF   ÚdocrD   Úselfr^   r   r	   r	   r
   Ú_finddoc  sb    





r   c          	   C   sd   y
| j }W n tk
r   dS X |dkrNyt| }W n ttfk
rL   dS X t|ts\dS t|S )zùGet the documentation string for an object.

    All tabs are expanded to spaces.  To clean up docstrings that are
    indented to line up with blocks of code, any whitespace than can be
    uniformly removed from the second line onwards is removed.N)r   rQ   r   Ú	TypeErrorr   ÚstrÚcleandoc)r   r   r	   r	   r
   ÚgetdocR  s    

r¢   c             C   sø   y|   ¡  d¡}W n tk
r&   dS X tj}x:|dd D ]*}t| ¡ }|r<t|| }t||}q<W |r~|d  ¡ |d< |tjk r´x*tdt|D ]}|| |d ||< qW x|rÌ|d sÌ| 	¡  q¶W x|rè|d sè| 	d¡ qÐW d 
|¡S dS )zClean up indentation from docstrings.

    Any whitespace that can be uniformly removed from the second line
    onwards is removed.Ú
Né   r   r   )r   r   ÚUnicodeErrorr   Úmaxsizer   r   ÚminÚrangeÚpopÚjoin)r   ÚlinesÚmarginr   ÚcontentÚindentÚir	   r	   r
   r¡   e  s(    
 r¡   c             C   sÆ   t | r(t| ddr| jS td | ¡t| rht| drZtj 	| j
¡} t| ddrZ| jS td | ¡t| rv| j} t| r| j} t| r| j} t| r | j} t| r®| jS td t| j¡dS )z@Work out which source or compiled file an object was defined in.Ú__file__Nz{!r} is a built-in moduler   z{!r} is a built-in classzVmodule, class, method, function, traceback, frame, or code object was expected, got {})r   rB   r°   r   r   r   r   r   r   r   r   r   r   r   r   r2   Útb_framer4   Úf_coder6   Úco_filenamer   r   )r   r	   r	   r
   Úgetfile  s,    
r´   c             C   sT   t j | ¡}dd tj ¡ D }| ¡  x&|D ]\}}| |¡r.|d| S q.W dS )z1Return the module name for a given file, or None.c             S   s   g | ]}t | |fqS r	   )r   )r]   Úsuffixr	   r	   r
   ú
<listcomp>   s   z!getmodulename.<locals>.<listcomp>N)ÚosÚpathÚbasenameÚ	importlibÚ	machineryÚall_suffixesrS   Úendswith)r¸   ÚfnameÚsuffixesÚneglenrµ   r	   r	   r
   Úgetmodulename  s    
rÁ   c                sº   t |  tjjdd }|tjjdd 7 }t fdd|D r`tj  ¡d tjj	d   nt fddtjj
D r~dS tj  ¡r S tt|  dddk	r¨ S  tjkr¶ S dS )zReturn the filename that can be used to locate an object's source.
    Return None if no way can be identified to get the source.
    Nc             3   s   | ]}   |¡V  qd S )N)r½   )r]   Ús)Úfilenamer	   r
   r_   ¯  s    z getsourcefile.<locals>.<genexpr>r   c             3   s   | ]}   |¡V  qd S )N)r½   )r]   rÂ   )rÃ   r	   r
   r_   ²  s    Ú
__loader__)r´   rº   r»   ÚDEBUG_BYTECODE_SUFFIXESÚOPTIMIZED_BYTECODE_SUFFIXESÚanyr·   r¸   ÚsplitextÚSOURCE_SUFFIXESÚEXTENSION_SUFFIXESÚexistsrB   Ú	getmoduleÚ	linecacheÚcache)r   Úall_bytecode_suffixesr	   )rÃ   r
   Úgetsourcefile¨  s    
rÐ   c             C   s,   |dkrt | pt| }tj tj |¡¡S )z¾Return an absolute path to the source or compiled file for an object.

    The idea is for each object to have a unique origin, so this routine
    normalizes the result as much as possible.N)rÐ   r´   r·   r¸   ÚnormcaseÚabspath)r   Ú	_filenamer	   r	   r
   Ú
getabsfile¾  s    rÔ   c       
      C   s  t | r| S t| dr$tj | j¡S |dk	rD|tkrDtj t| ¡S yt| |}W n tk
rf   dS X |tkrtj t| ¡S xnt	tj 
¡ D ]\\}}t |rt|dr|j}|t |d¡krÂq|t|< t|}|j t|< ttj |¡< qW |tkr
tj t| ¡S tjd }t| ds$dS t|| jrLt|| j}|| krL|S tjd }t|| jr~t|| j}	|	| kr~|S dS )zAReturn the module an object was defined in, or None if not found.r   Nr°   Ú__main__r   Úbuiltins)r   r   r   r   r   r   ÚmodulesbyfilerÔ   r   ÚlistrA   r°   Ú_filesbymodnamer   r·   r¸   ÚrealpathrB   )
r   rÓ   ÚfileÚmodnameÚmoduler|   ÚmainÚ
mainobjectÚbuiltinÚbuiltinobjectr	   r	   r
   rÌ   Ê  sD    





rÌ   c       
      C   sÒ  t | }|rt |¡ n$t| }| d¡r4| d¡s<tdt| |}|rZt ||j	¡}n
t |¡}|sptdt
| r|dfS t| r | j}t d| d ¡}g }xRtt|D ]B}| || ¡}|r´|| d dkrâ||fS | | d	¡|f¡ q´W |r| ¡  ||d d	 fS td
t| r0| j} t| r@| j} t| rP| j} t| r`| j} t| rÆt| ds~td| jd	 }	t d¡}x*|	dkr¼| ||	 ¡r°P |	d	 }	qW ||	fS tddS )ab  Return the entire source file and starting line number for an object.

    The argument may be a module, class, method, function, traceback, frame,
    or code object.  The source code is returned as a list of all the lines
    in the file and the line number indexes a line in that list.  An OSError
    is raised if the source code cannot be retrieved.ú<ú>zsource code not availablezcould not get source coder   z^(\s*)class\s*z\bÚcr¤   zcould not find class definitionÚco_firstlinenoz"could not find function definitionz>^(\s*def\s)|(\s*async\s+def\s)|(.*(?<!\w)lambda(:|\s))|^(\s*@)zcould not find code objectN) rÐ   rÍ   Ú
checkcacher´   Ú
startswithr½   ÚOSErrorrÌ   Úgetlinesr@   r   r   r   ÚreÚcompiler¨   r   ÚmatchrP   ÚgrouprS   r   r   r   r   r2   r±   r4   r²   r6   r   rå   )
r   rÛ   rÝ   r«   rD   ÚpatÚ
candidatesr¯   rì   Úlnumr	   r	   r
   Ú
findsourceø  s^    









 rñ   c          	   C   s>  yt | \}}W n ttfk
r(   dS X t| ròd}|rR|d dd dkrRd}x(|t|k rz||  ¡ dkrz|d }qTW |t|k rî|| dd dkrîg }|}x>|t|k râ|| dd dkrâ| ||  ¡ ¡ |d }q¦W d |¡S nH|dkr:t	|| }|d }|dkr:||  
¡ dd dkr:t	|| |kr:||  ¡  
¡ g}|dkrØ|d }||  ¡  
¡ }x\|dd dkrÖt	|| |krÖ|g|dd< |d }|dk rÂP ||  ¡  
¡ }q|W x*|r|d  ¡ dkrg |dd< qÚW x*|r.|d	  ¡ dkr.g |d	d< qW d |¡S dS )
zwGet lines of comments immediately preceding an object's source code.

    Returns None when source can't be found.
    Nr   é   z#!r¤   )Ú ú#rô   ró   r   )rñ   rè   r   r   r   ÚstriprP   r   rª   r   r   )r   r«   rð   ÚstartÚcommentsÚendr®   Úcommentr	   r	   r
   ÚgetcommentsA  sJ      "
$
&
 rú   c               @   s   e Zd ZdS )Ú
EndOfBlockN)r   r   r   r	   r	   r	   r
   rû   n  s    rû   c               @   s    e Zd ZdZdd Zdd ZdS )ÚBlockFinderz@Provide a tokeneater() method to detect the end of a code block.c             C   s.   d| _ d| _d| _d| _d| _d| _d| _d S )Nr   Fr¤   )r®   ÚislambdaÚstartedÚpasslineÚindecoratorÚdecoratorhasargsÚlast)r   r	   r	   r
   Ú__init__r  s    zBlockFinder.__init__c             C   s  | j s@| js@|dkrd| _n|dkr8|dkr2d| _d| _ d| _nØ|dkrV| jrTd| _nÂ|dkrr| jrpd| _d| _n¦|tjkrªd| _|d | _| jrt| jr¨| js¨d| _nn| jr²nf|tj	krÐ| j
d	 | _
d| _nH|tjkrö| j
d	 | _
| j
dkrôtn"| j
dkr|tjtjfkrtd S )
Nú@T)ÚdefÚclassÚlambdar  ú(ú)Fr   r¤   )rþ   r   rý   rÿ   r  ÚtokenizeÚNEWLINEr  rû   ÚINDENTr®   ÚDEDENTÚCOMMENTÚNL)r   r   ÚtokenÚsrowcolÚerowcolr   r	   r	   r
   Ú
tokeneater{  sB    




zBlockFinder.tokeneaterN)r   r   r   r   r  r  r	   r	   r	   r
   rü   p  s   	rü   c          	   C   sZ   t  }y,t t| j¡}x|D ]}|j|  qW W n ttfk
rJ   Y nX | d|j S )z@Extract the block of code at the top of the given list of lines.N)	rü   r
  Úgenerate_tokensÚiterÚ__next__r  rû   ÚIndentationErrorr  )r«   ÚblockfinderÚtokensÚ_tokenr	   r	   r
   Úgetblock§  s    
r  c             C   sb   t | } t| \}}t| r"| j} t| s>t| rF| jjdkrF|dfS t||d |d fS dS )a£  Return a list of source lines and starting line number for an object.

    The argument may be a module, class, method, function, traceback, frame,
    or code object.  The source code is returned as a list of the lines
    corresponding to the object and the line number indicates where in the
    original source file the first line of code was found.  An OSError is
    raised if the source code cannot be retrieved.z<module>r   Nr¤   )	r   rñ   r2   r±   r   r4   r²   Úco_namer  )r   r«   rð   r	   r	   r
   Úgetsourcelines²  s    r  c             C   s   t | \}}d |¡S )a  Return the text of the source code for an object.

    The argument may be a module, class, method, function, traceback, frame,
    or code object.  The source code is returned as a single string.  An
    OSError is raised if the source code cannot be retrieved.ró   )r  rª   )r   r«   rð   r	   r	   r
   Ú	getsourceÇ  s    r  c             C   sV   g }| j tddd x:| D ]2}| ||jf¡ ||kr| t|| ||¡ qW |S )z-Recursive helper function for getclasstree().r   r   )rK   )rS   r   rP   rC   Úwalktree)ÚclassesÚchildrenÚparentrV   rä   r	   r	   r
   r  Ñ  s    
r  Fc             C   s¤   i }g }xn| D ]f}|j rbxZ|j D ]<}||kr4g ||< ||| krN||  |¡ |r || kr P q W q||kr| |¡ qW x|D ]}|| kr~| |¡ q~W t||dS )aö  Arrange the given list of classes into a hierarchy of nested lists.

    Where a nested list appears, it contains classes derived from the class
    whose entry immediately precedes the list.  Each entry is a 2-tuple
    containing a class and a tuple of its base classes.  If the 'unique'
    argument is true, exactly one entry appears in the returned structure
    for each class in the given list.  Otherwise, classes using multiple
    inheritance and their descendants will appear multiple times.N)rC   rP   r  )r   Úuniquer!  Úrootsrä   r"  r	   r	   r
   ÚgetclasstreeÛ  s"    	
 
r%  Ú	Argumentszargs, varargs, varkwc             C   s    t | \}}}}t|| ||S )a  Get information about the arguments accepted by a code object.

    Three things are returned: (args, varargs, varkw), where
    'args' is the list of argument names. Keyword-only arguments are
    appended. 'varargs' and 'varkw' are the names of the * and **
    arguments or None.)Ú_getfullargsr&  )ÚcoÚargsÚvarargsÚ
kwonlyargsÚvarkwr	   r	   r
   Úgetargsø  s    r-  c       	      C   s   t | std | ¡| j}| j}| j}t|d| }t||||  }d}||7 }d}| jt@ rx| j| }|d }d}| jt	@ r| j| }||||fS )a  Get information about the arguments accepted by a code object.

    Four things are returned: (args, varargs, kwonlyargs, varkw), where
    'args' and 'kwonlyargs' are lists of argument names, and 'varargs'
    and 'varkw' are the names of the * and ** arguments or None.z{!r} is not a code objectNr   r¤   )
r6   r   r   Úco_argcountÚco_varnamesÚco_kwonlyargcountrØ   r   Ú
CO_VARARGSÚCO_VARKEYWORDS)	r(  ÚnargsrX   Únkwargsr)  r+  Ústepr*  r,  r	   r	   r
   r'    s"    



r'  ÚArgSpeczargs varargs keywords defaultsc             C   sD   t jdtdd t| \}}}}}}}|s.|r6tdt||||S )ae  Get the names and default values of a function's parameters.

    A tuple of four things is returned: (args, varargs, keywords, defaults).
    'args' is a list of the argument names, including keyword-only argument names.
    'varargs' and 'keywords' are the names of the * and ** parameters or None.
    'defaults' is an n-tuple of the default values of the last n parameters.

    This function is deprecated, as it does not support annotations or
    keyword-only parameters and will raise ValueError if either is present
    on the supplied callable.

    For a more structured introspection API, use inspect.signature() instead.

    Alternatively, use getfullargspec() for an API with a similar namedtuple
    based interface, but full support for annotations and keyword-only
    parameters.

    Deprecated since Python 3.5, use `inspect.getfullargspec()`.
    zhinspect.getargspec() is deprecated since Python 3.0, use inspect.signature() or inspect.getfullargspec()rò   )Ú
stacklevelzdFunction has keyword-only parameters or annotations, use getfullargspec() API which can support them)ÚwarningsÚwarnÚDeprecationWarningÚgetfullargspecr   r6  )r   r)  r*  r,  Údefaultsr+  ÚkwonlydefaultsÚannr	   r	   r
   Ú
getargspec   s    
r?  ÚFullArgSpeczGargs, varargs, varkw, defaults, kwonlyargs, kwonlydefaults, annotationsc          
   C   s`  yt | ddtd}W n, tk
r@ } ztd|W dd}~X Y nX g }d}d}g }d}i }d}i }	|j|jk	rx|j|d< x¾|j ¡ D ]°}
|
j}|
j	}|t
kr¨| |¡ nv|tkrÔ| |¡ |
j|
jk	rÒ||
jf7 }nJ|tkrâ|}n<|tkr| |¡ |
j|
jk	r|
j|	|< n|tkr|}|
j|
jk	r|
j||< qW |	sBd}	|sLd}t||||||	|S )a$  Get the names and default values of a callable object's parameters.

    A tuple of seven things is returned:
    (args, varargs, varkw, defaults, kwonlyargs, kwonlydefaults, annotations).
    'args' is a list of the parameter names.
    'varargs' and 'varkw' are the names of the * and ** parameters or None.
    'defaults' is an n-tuple of the default values of the last n parameters.
    'kwonlyargs' is a list of keyword-only parameter names.
    'kwonlydefaults' is a dictionary mapping names from kwonlyargs to defaults.
    'annotations' is a dictionary mapping parameter names to annotations.

    Notable differences from inspect.signature():
      - the "self" parameter is always reported, even for bound methods
      - wrapper chains defined by __wrapped__ *not* unwrapped automatically
    F)Úfollow_wrapper_chainsÚskip_bound_argÚsigclszunsupported callableNr	   Úreturn)Ú_signature_from_callableÚ	Signaturere   r   Úreturn_annotationÚemptyÚ
parametersÚvaluesrw   rD   Ú_POSITIONAL_ONLYrP   Ú_POSITIONAL_OR_KEYWORDÚdefaultÚ_VAR_POSITIONALÚ_KEYWORD_ONLYÚ_VAR_KEYWORDÚ
annotationr@  )r   ÚsigÚexr)  r*  r,  r+  r<  ÚannotationsÚ
kwdefaultsÚparamrw   rD   r	   r	   r
   r;  A  sT    





r;  ÚArgInfozargs varargs keywords localsc             C   s    t | j\}}}t|||| jS )a9  Get information about arguments passed into a particular frame.

    A tuple of four things is returned: (args, varargs, varkw, locals).
    'args' is a list of the argument names.
    'varargs' and 'varkw' are the names of the * and ** arguments or None.
    'locals' is the locals dictionary of the given frame.)r-  r²   rW  Úf_locals)Úframer)  r*  r,  r	   r	   r
   Úgetargvalues  s    rZ  c             C   sV   t | dd dkr t|  dd¡S t| trN| jd|fkr>| jS | jd | j S t| S )Nr   Útypingztyping.ró   rÖ   r   )rB   ÚreprÚreplacer   r   r   r   )rQ  Úbase_moduler	   r	   r
   Úformatannotation¨  s    
r_  c                s   t | dd   fdd}|S )Nr   c                s
   t |  S )N)r_  )rQ  )rÝ   r	   r
   Ú_formatannotation³  s    z5formatannotationrelativeto.<locals>._formatannotation)rB   )r   r`  r	   )rÝ   r
   Úformatannotationrelativeto±  s    ra  r	   c             C   s   d|  S )NÚ*r	   )rD   r	   r	   r
   rI   º  rJ   rI   c             C   s   d|  S )Nz**r	   )rD   r	   r	   r
   rI   »  rJ   c             C   s   dt |  S )Nú=)r\  )rE   r	   r	   r
   rI   ¼  rJ   c             C   s   d|  S )Nz -> r	   )Útextr	   r	   r
   rI   ½  rJ   c                sD  ddl m} |dtdd  fdd}g }|rBt| t| }xFt| D ]:\}}||}|r|||kr|||
|||   }| |¡ qLW |dk	r¦| |||¡ n|r´| d	¡ |rôx:|D ]2}||}|ræ||kræ||
|| 7 }| |¡ q¾W |dk	r| |	||¡ d
d |¡ d }d kr@|| d 7 }|S )a÷  Format an argument spec from the values returned by getfullargspec.

    The first seven arguments are (args, varargs, varkw, defaults,
    kwonlyargs, kwonlydefaults, annotations).  The other five arguments
    are the corresponding optional formatting functions that are called to
    turn names and values into strings.  The last argument is an optional
    function to format the sequence of arguments.

    Deprecated since Python 3.5: use the `signature` function and `Signature`
    objects.
    r   )r9  zc`formatargspec` is deprecated since Python 3.5. Use `signature` and the `Signature` object directlyrò   )r7  c                s(   | }|  kr$|d |   7 }|S )Nz: r	   )Úargrn   )rT  r_  Ú	formatargr	   r
   ÚformatargandannotationÒ  s    z-formatargspec.<locals>.formatargandannotationNrb  r  z, r	  rD  )r8  r9  r:  r   Ú	enumeraterP   rª   )r)  r*  r,  r<  r+  r=  rT  rf  ÚformatvarargsÚformatvarkwÚformatvalueÚformatreturnsr_  r9  rg  ÚspecsÚfirstdefaultr¯   re  ÚspecÚ	kwonlyargrn   r	   )rT  r_  rf  r
   Úformatargspec·  s:    



rq  c             C   s   d|  S )Nrb  r	   )rD   r	   r	   r
   rI   ó  rJ   c             C   s   d|  S )Nz**r	   )rD   r	   r	   r
   rI   ô  rJ   c             C   s   dt |  S )Nrc  )r\  )rE   r	   r	   r
   rI   õ  rJ   c             C   s   |||fdd}g }	x&t t| D ]}
|	 || |
 ¡ q"W |rZ|	 |||||  ¡ |rx|	 |||||  ¡ dd |	¡ d S )af  Format an argument spec from the 4 values returned by getargvalues.

    The first four arguments are (args, varargs, varkw, locals).  The
    next four arguments are the corresponding optional formatting functions
    that are called to turn names and values into strings.  The ninth
    argument is an optional function to format the sequence of arguments.c             S   s   || |||   S )Nr	   )rD   Úlocalsrf  rk  r	   r	   r
   Úconvertü  s    z formatargvalues.<locals>.convertr  z, r	  )r¨   r   rP   rª   )r)  r*  r,  rr  rf  ri  rj  rk  rs  rm  r¯   r	   r	   r
   Úformatargvaluesñ  s    rt  c                s    fdd|D }t |}|dkr,|d }n>|dkr@dj| }n*dj|dd   }|dd = d	 |¡| }td
| ||rzdnd|dkrdnd|f d S )Nc                s   g | ]}| krt |qS r	   )r\  )r]   rD   )rJ  r	   r
   r¶   	  s    z&_missing_arguments.<locals>.<listcomp>r¤   r   rò   z	{} and {}z, {} and {}éþÿÿÿz, z*%s() missing %i required %s argument%s: %sÚ
positionalzkeyword-onlyró   rÂ   )r   r   rª   r   )Úf_nameÚargnamesÚposrJ  rX   ÚmissingrÂ   Útailr	   )rJ  r
   Ú_missing_arguments  s    


r|  c          	      sÒ   t || }t  fdd|D }|r:|dk}	d|f }
n2|rTd}	d|t |f }
nt |dk}	tt |}
d}|rd}||dkrd	nd||dkrd	ndf }td
| |
|	r®d	nd|||dkrÄ|sÄdndf d S )Nc                s   g | ]}| kr|qS r	   r	   )r]   re  )rJ  r	   r
   r¶     s    z_too_many.<locals>.<listcomp>r¤   zat least %dTzfrom %d to %dró   z7 positional argument%s (and %d keyword-only argument%s)rÂ   z5%s() takes %s positional argument%s but %d%s %s givenÚwasÚwere)r   r    r   )rw  r)  Úkwonlyr*  ÚdefcountÚgivenrJ  ÚatleastÚkwonly_givenÚpluralrR  Ú
kwonly_sigÚmsgr	   )rJ  r
   Ú	_too_many  s$    r  c              O   s4  | d }| dd }t |}|\}}}}}	}
}|j}i }t|rV|jdk	rV|jf| }t|}t|}|rrt|nd}t||}x t|D ]}|| ||| < qW |rºt||d ||< t||	 }|rÒi ||< xd| 	¡ D ]X\}}||kr|st
d||f ||| |< qÜ||kr,t
d||f |||< qÜW ||kr\|s\t|||	|||| ||k rØ|d||  }x&|D ]}||kr|t||d| q|W x8t||| d D ] \}}||kr´|| ||< q´W d}x>|	D ]6}||krâ|
r||
kr|
| ||< n|d7 }qâW |r0t||	d| |S )zíGet the mapping of arguments to values.

    A dict is returned, with keys the function argument names (including the
    names of the * and ** arguments, if any), and values the respective bound
    values from 'positional' and 'named'.r   r¤   Nz*%s() got an unexpected keyword argument %rz(%s() got multiple values for argument %rTF)r;  r   r   r   r   r§   r¨   rd   rM   rA   r   r  r|  rh  )Úfunc_and_positionalÚnamedr   rv  ro  r)  r*  r,  r<  r+  r=  r>  rw  Ú	arg2valueÚnum_posÚnum_argsÚnum_defaultsÚnr¯   Úpossible_kwargsÚkwrE   Úreqre  rz  Úkwargr	   r	   r
   Úgetcallargs-  sd    








r  ÚClosureVarsz"nonlocals globals builtins unboundc       	      C   s   t | r| j} t| s$td | ¡| j}| jdkr:i }ndd t|j| jD }| j	}| 
dtj¡}t|rt|j}i }i }t }xn|jD ]d}|dkrqy|| ||< W q tk
rì   y|| ||< W n tk
ræ   | |¡ Y nX Y qX qW t||||S )a  
    Get the mapping of free variables to their current values.

    Returns a named tuple of dicts mapping the current nonlocal, global
    and builtin references as seen by the body of the function. A final
    set of unbound names that could not be resolved is also provided.
    z{!r} is not a Python functionNc             S   s   i | ]\}}|j |qS r	   )Úcell_contents)r]   ÚvarÚcellr	   r	   r
   ú
<dictcomp>  s   z"getclosurevars.<locals>.<dictcomp>Ú__builtins__)ÚNoneÚTrueÚFalse)r   r   r   r   r   r   Ú__closure__ÚzipÚco_freevarsÚ__globals__r   rÖ   r@   r   rM   Úco_namesÚKeyErrorrR   r  )	r   ÚcodeÚnonlocal_varsÚ	global_nsÚ
builtin_nsÚglobal_varsÚbuiltin_varsÚunbound_namesrD   r	   r	   r
   Úgetclosurevarsm  s8    	
rª  Ú	Tracebackz+filename lineno function code_context indexr¤   c             C   sÚ   t | r| j}| j} n| j}t| s2td | ¡t| p@t| }|dkr¾|d |d  }yt	| \}}W n t
k
r   d }}Y qÆX tdt|t|| }||||  }|d | }nd }}t||| jj||S )a  Get information about a frame or traceback object.

    A tuple of five things is returned: the filename, the line number of
    the current line, the function name, a list of lines of context from
    the source code, and the index of the current line within that list.
    The optional second argument specifies the number of lines of context
    to return, which are centered around the current line.z'{!r} is not a frame or traceback objectr   r¤   rò   N)r2   Ú	tb_linenor±   Úf_linenor4   r   r   rÐ   r´   rñ   rè   Úmaxr§   r   r«  r²   r  )rY  ÚcontextÚlinenorÃ   rö   r«   rð   Úindexr	   r	   r
   Úgetframeinfo¤  s$    r²  c             C   s   | j S )zCGet the line number from a frame object, allowing for optimization.)r­  )rY  r	   r	   r
   Ú	getlinenoÄ  s    r³  Ú	FrameInfo)rY  c             C   s6   g }x,| r0| ft | | }| t| ¡ | j} qW |S )zÐGet a list of records for a frame and all higher (calling) frames.

    Each record contains a frame object, filename, line number, function
    name, a list of lines of context, and index within the context.)r²  rP   r´  Úf_back)rY  r¯  Ú	framelistÚ	frameinfor	   r	   r
   ÚgetouterframesË  s    
r¸  c             C   s8   g }x.| r2| j ft| | }| t| ¡ | j} qW |S )zÑGet a list of records for a traceback's frame and all lower frames.

    Each record contains a frame object, filename, line number, function
    name, a list of lines of context, and index within the context.)r±   r²  rP   r´  Útb_next)Útbr¯  r¶  r·  r	   r	   r
   Úgetinnerframes×  s    
r»  c               C   s   t tdrt d¡S dS )z?Return the frame of the caller or None if this is not possible.Ú	_getframer¤   N)r   r   r¼  r	   r	   r	   r
   Úcurrentframeã  s    r½  c             C   s   t t d¡| S )z@Return a list of records for the stack above the caller's frame.r¤   )r¸  r   r¼  )r¯  r	   r	   r
   Ústackç  s    r¾  c             C   s   t t ¡ d | S )zCReturn a list of records for the stack below the current exception.rò   )r»  r   Úexc_info)r¯  r	   r	   r
   Útraceë  s    rÀ  c             C   s   t jd  | ¡S )Nry   )r   r@   r   )Úklassr	   r	   r
   Ú_static_getmroô  s    rÂ  c             C   s8   i }yt  | d¡}W n tk
r(   Y nX t ||t¡S )Nr@   )r   Ú__getattribute__rQ   Údictr   Ú	_sentinel)rv   ÚattrÚinstance_dictr	   r	   r
   Ú_check_instance÷  s    rÈ  c          	   C   sF   x@t | D ]4}tt|tkr
y
|j| S  tk
r<   Y q
X q
W tS )N)rÂ  Ú_shadowed_dictr   rÅ  r@   r¢  )rÁ  rÆ  Úentryr	   r	   r
   Ú_check_class   s    

rË  c             C   s&   yt |  W n tk
r    dS X dS )NFT)rÂ  r   )rv   r	   r	   r
   Ú_is_type	  s
    rÌ  c          	   C   sn   t jd }x^t| D ]R}y| |¡d }W n tk
r>   Y qX t |tjkrb|jdkrb|j|ks|S qW t	S )Nr@   )
r   r@   rÂ  r   r¢  r   r   r   r`   rÅ  )rÁ  Ú	dict_attrrÊ  Ú
class_dictr	   r	   r
   rÉ    s    


rÉ  c          	   C   s  t }t| s>t| }t|}|t ks2t|tjkrBt| |}n| }t||}|t k	r|t k	rtt|dt k	rtt|dt k	r|S |t k	r|S |t k	r|S | |krêxDtt|D ]4}tt|t kr²y
|j	| S  t
k
rä   Y q²X q²W |t k	rö|S t|dS )aô  Retrieve attributes without triggering dynamic lookup via the
       descriptor protocol,  __getattr__ or __getattribute__.

       Note: this function may not be able to retrieve all attributes
       that getattr can fetch (like dynamically created attributes)
       and may find attributes that getattr can't (like descriptors
       that raise AttributeError). It can also return descriptor objects
       instead of instance members in some cases. See the
       documentation for details.
    r   r   N)rÅ  rÌ  r   rÉ  r   r   rÈ  rË  rÂ  r@   r¢  rQ   )rv   rÆ  rM  Úinstance_resultrÁ  rÍ  Úklass_resultrÊ  r	   r	   r
   Úgetattr_static  s6    


rÑ  ÚGEN_CREATEDÚGEN_RUNNINGÚGEN_SUSPENDEDÚ
GEN_CLOSEDc             C   s,   | j r
tS | jdkrtS | jjdkr(tS tS )a#  Get current state of a generator-iterator.

    Possible states are:
      GEN_CREATED: Waiting to start execution.
      GEN_RUNNING: Currently being executed by the interpreter.
      GEN_SUSPENDED: Currently suspended at a yield expression.
      GEN_CLOSED: Execution has completed.
    Nr   )Ú
gi_runningrÓ  Úgi_framerÕ  Úf_lastirÒ  rÔ  )Ú	generatorr	   r	   r
   ÚgetgeneratorstateS  s    	
rÚ  c             C   s:   t | std | ¡t| dd}|dk	r2| jjS i S dS )z«
    Get the mapping of generator local variables to their current values.

    A dict is returned, with the keys the local variable names and values the
    bound values.z{!r} is not a Python generatorr×  N)r(   r   r   rB   r×  rX  )rÙ  rY  r	   r	   r
   Úgetgeneratorlocalse  s    rÛ  ÚCORO_CREATEDÚCORO_RUNNINGÚCORO_SUSPENDEDÚCORO_CLOSEDc             C   s,   | j r
tS | jdkrtS | jjdkr(tS tS )a&  Get current state of a coroutine object.

    Possible states are:
      CORO_CREATED: Waiting to start execution.
      CORO_RUNNING: Currently being executed by the interpreter.
      CORO_SUSPENDED: Currently suspended at an await expression.
      CORO_CLOSED: Execution has completed.
    Nr   )Ú
cr_runningrÝ  Úcr_framerß  rØ  rÜ  rÞ  )Ú	coroutiner	   r	   r
   Úgetcoroutinestate}  s    	
rã  c             C   s"   t | dd}|dk	r|jS i S dS )z«
    Get the mapping of coroutine local variables to their current values.

    A dict is returned, with the keys the local variable names and values the
    bound values.rá  N)rB   rX  )râ  rY  r	   r	   r
   Úgetcoroutinelocals  s    rä  Ú
from_bytesc             C   s6   yt | |}W n tk
r"   dS X t|ts2|S dS )zPrivate helper. Checks if ``cls`` has an attribute
    named ``method_name`` and returns it only if it is a
    pure python function.
    N)rB   rQ   r   Ú_NonUserDefinedCallables)r^   Úmethod_nameÚmethr	   r	   r
   Ú"_signature_get_user_defined_method«  s    
ré  c          
   C   s¬  | j }t| ¡ }|jpd}|jp$i }|r2|| }y| j||}W n6 tk
rx } zd |¡}	t|	|W dd}~X Y nX d}
x| ¡ D ]\}}y|j	| }W n t
k
r¶   Y nlX |jtkrÎ| |¡ q|jtkr||krød}
|j|d||< n| |j¡ q|jtkr"|j|d||< |
r|jtk	s6t|jtkrf|| jtd}|||< | |¡ q|jttfkr| |¡ q|jtkr| |j¡ qW | j| ¡ dS )	zPrivate helper to calculate how 'wrapped_sig' signature will
    look like after applying a 'functools.partial' object (or alike)
    on it.
    r	   z+partial object {!r} has incorrect argumentsNFT)rM  )rw   )rI  )rI  r   rA   r)  ÚkeywordsÚbind_partialr   r   r   Ú	argumentsr¢  rw   rK  r©   rL  r]  rD   rO  ÚAssertionErrorÚmove_to_endrP  rN  rJ  )Úwrapped_sigÚpartialÚ
extra_argsÚ
old_paramsÚ
new_paramsÚpartial_argsÚpartial_keywordsÚbarS  r  Útransform_to_kwonlyÚ
param_namerV  Ú	arg_valueÚ	new_paramr	   r	   r
   Ú_signature_get_partial»  sN    





rû  c             C   sl   t | j ¡ }|r$|d jttfkr,td|d j}|ttfkrP|dd }n|t	k	r`td| j
|dS )zWPrivate helper to transform signatures for unbound
    functions to bound methods.
    r   zinvalid method signaturer¤   Nzinvalid argument type)rI  )rd   rI  rJ  rw   rP  rO  r   rL  rK  rN  r]  )rR  Úparamsrw   r	   r	   r
   Ú_signature_bound_method  s    
rý  c             C   s&   t | p$t| p$t| tp$| ttfkS )zxPrivate helper to test if `obj` is a callable that might
    support Argument Clinic's __text_signature__ protocol.
    )r8   r   r   ræ  r   r   )rv   r	   r	   r
   Ú_signature_is_builtin!  s    
rþ  c             C   s   t | rt| rdS t| dd}t| dd}t| dt}t| dt}t| dd}t|tjot|to|dksxt|to|dkst|t	ot|t	S )zþPrivate helper to test if `obj` is a duck type of FunctionType.
    A good example of such objects are functions compiled with
    Cython, which have all attributes that a pure Python function
    would have, but have their code statically compiled.
    Fr   Nr   Ú__defaults__Ú__kwdefaults__Ú__annotations__)
Úcallabler   rB   Ú_voidr   r   r5   r    rd   rÄ  )rv   rD   r£  r<  rU  rT  r	   r	   r
   Ú_signature_is_functionlike-  s    
r  c             C   sr   |   d¡st|  d¡}|dkr*|  d¡}|  d¡}|dksH||ksHt|  d¡}|dksf||ksft| d| S )zÿ Private helper to get first parameter name from a
    __text_signature__ of a builtin method, which should
    be in the following format: '($param1, ...)'.
    Assumptions are that the first argument won't have
    a default value or an annotation.
    z($ú,r   r	  ú:rc  rò   )rç   rí  Úfind)ro  ry  Úcposr	   r	   r
   Ú_signature_get_bound_paramF  s    



r	  c             C   sh  | s| ddfS d}d}dd |   d¡D }t|j}t |¡}d}d}g }|j}	d}
tj}tj}t|}|j	tj
ksxtxÚ|D ]Ò}|j	|j }}||krê|dkrÀ|rªd}q~|r²td}|
d	7 }
q~|d
krê|rÐt|dksÜtd}|
d	 }q~||kr|dkr|dkst|
}q~|r8d}||kr0|dks8|	d |	| |dkr~|	d q~W d |¡}|||fS )aÊ  
    Private helper function. Takes a signature in Argument Clinic's
    extended signature format.

    Returns a tuple of three things:
      * that signature re-rendered in standard Python syntax,
      * the index of the "self" parameter (generally 0), or None if
        the function does not have a "self" parameter, and
      * the index of the last "positional only" parameter,
        or None if the signature has no positional-only parameters.
    Nc             S   s   g | ]}|  d ¡qS )Úascii)Úencode)r]   Úlr	   r	   r
   r¶   p  s    z6_signature_strip_non_python_syntax.<locals>.<listcomp>r£   Fr   r  Tr¤   ú/ú$r	  z, ú ró   )r   r  r  r
  rP   r  ÚOPÚ
ERRORTOKENÚnextr   ÚENCODINGrí  Ústringrª   )Ú	signatureÚself_parameterÚlast_positional_onlyr«   rÙ  Útoken_streamÚdelayed_commaÚskip_next_commard  rR   Úcurrent_parameterr  r  Útr   r  Úclean_signaturer	   r	   r
   Ú"_signature_strip_non_python_syntax]  sZ    




r  Tc          	      sr  ddl | j t|\}}}d| d }y |¡}W n tk
rN   d}Y nX t|jsjtd |¡|j	d }	g  j
t d}i t|dd}
|
r´tj |
d¡}|r´|jtj ¡ 	fdd	fd	d

G 
fdddjf fdd	}t|	jj}t|	jj}tj||dd}|dk	rJ jn jx<ttt|D ](\}\}}||| ||krb jqbW |	jjr¬ j||	jj  jx*t|	jj |	jj!D ]\}}||| qÆW |	jj"rü j#||	jj" |dk	rdst$t|dd}|dk	}t%|}|rJ|s>|rJ &d¡ nd j' jd}|d< | | j
dS )zdPrivate helper to parse content of '__text_signature__'
    and return a Signature based on it.
    r   Nzdef fooz: passz"{!r} builtin has invalid signaturer   c                s(   t |  jst| jd kr"td| jS )Nz'Annotations are not currently supported)r   re  rí  rQ  r   )Únode)Úastr	   r
   Ú
parse_nameË  s    
z&_signature_fromstr.<locals>.parse_namec                sª   yt | }W n> tk
rL   yt | }W n tk
rF   t Y nX Y nX t|trb  |¡S t|ttfrz  |¡S t|t	r  
|¡S |dkr   |¡S t d S )N)TFN)ÚevalÚ	NameErrorÚRuntimeErrorr   r    ÚStrÚintÚfloatÚNumÚbytesÚBytesÚNameConstant)rÂ   rE   )r   Úmodule_dictÚsys_module_dictr	   r
   Ú
wrap_valueÑ  s     





z&_signature_fromstr.<locals>.wrap_valuec                   s(   e Zd Z fddZ fddZdS )z,_signature_fromstr.<locals>.RewriteSymbolicsc                s`   g }|}x"t | jr*| |j¡ |j}q
W t | js>t | |j¡ d t	|¡}|S )Nr   )
r   r\   rP   rÆ  rE   ÚNamer$  r~   rª   Úreversed)r   r  Úar  rE   )r   r.  r	   r
   Úvisit_Attributeå  s    
z<_signature_fromstr.<locals>.RewriteSymbolics.visit_Attributec                s   t |j jst |jS )N)r   ÚctxÚLoadr   r~   )r   r  )r   r.  r	   r
   Ú
visit_Nameñ  s    z7_signature_fromstr.<locals>.RewriteSymbolics.visit_NameN)r   r   r   r2  r5  r	   )r   r.  r	   r
   ÚRewriteSymbolicsä  s   r6  c                s   | }|krd S |rp|t k	rpy  |¡} |¡}W n tk
rR   }Y nX |kr`d S |k	rl|n|}  ||d¡ d S )N)rM  rQ  )Ú_emptyÚvisitÚliteral_evalr   rP   )Ú	name_nodeÚdefault_noderM  rD   Úo)Ú	Parameterr6  r   rH  Úinvalidrw   rI  r!  r	   r
   Úpö  s    
z_signature_fromstr.<locals>.p)Ú	fillvaluer   )rw   )rG  )(r   Ú_parameter_clsr  ÚparseÚSyntaxErrorr   ÚModuler   r   ÚbodyrH  r   rB   r   r   r   r@   ÚcopyÚNodeTransformerr0  r)  r<  Ú	itertoolsÚzip_longestÚPOSITIONAL_ONLYÚPOSITIONAL_OR_KEYWORDrh  rØ   ÚvarargÚVAR_POSITIONALÚKEYWORD_ONLYr  r+  Úkw_defaultsr  ÚVAR_KEYWORDrí  r   r©   r]  )r^   rv   rÂ   rB  r  r  r  ÚprogramrÝ   r|   Úmodule_namer?  r)  r<  r  r¯   rD   rM  Ú_selfÚself_isboundÚself_ismoduler	   )r=  r6  r   rH  r>  rw   r,  rI  r!  r-  r.  r
   Ú_signature_fromstr¥  sn    









rV  c             C   sB   t |std |¡t|dd}|s4td |¡t| |||S )zHPrivate helper function to get signature for
    builtin callables.
    z%{!r} is not a Python builtin functionÚ__text_signature__Nz#no signature found for builtin {!r})rþ  r   r   rB   r   rV  )r^   r   rB  rÂ   r	   r	   r
   Ú_signature_from_builtin5  s    rX  c          	   C   sú  d}t |s(t|rd}ntd |¡| j}|j}|j}|j}t|d| }|j	}||||  }	|j
}
|j}|j}|rt|}nd}g }|| }x4|d| D ]$}|
 |t¡}| |||td¡ q¤W xBt||d D ].\}}|
 |t¡}| |||t|| d¡ qÞW |jt@ rH|||  }|
 |t¡}| |||td¡ xJ|	D ]B}t}|dk	rl| |t¡}|
 |t¡}| |||t|d¡ qNW |jt@ rä|| }|jt@ r¼|d7 }|| }|
 |t¡}| |||td¡ | ||
 d	t¡|d
S )zCPrivate helper: constructs Signature for the given python function.FTz{!r} is not a Python functionNr   )rQ  rw   )rQ  rw   rM  r¤   rD  )rG  Ú__validate_parameters__)r   r  r   r   rA  r   r.  r/  rd   r0  r  rÿ  r   r   r   r7  rP   rL  rh  r   r1  rN  rO  r2  rP  )r^   r   Úis_duck_functionr=  Ú	func_codeÚ	pos_countÚ	arg_namesrv  Úkeyword_only_countÚkeyword_onlyrT  r<  rU  Úpos_default_countrI  Únon_default_countrD   rQ  ÚoffsetrM  r±  r	   r	   r
   Ú_signature_from_functionE  sj    










rc  )rA  rB  c         
   C   s   t | std | ¡t| tjrDt| j|||d}|r@t|S |S |rtt	| dd d} t| tjrtt| |||dS y
| j
}W n tk
r   Y n&X |dk	r¸t|ts´td |¡|S y
| j}W n tk
rÖ   Y nX t|tjrdt|j|||d}t||d}t|j ¡ d	 }|jtjkr(|S t|j ¡ }|rN||d	 k	sNt|f| }	|j|	d
S t| sxt| rt|| S t| rt|| |dS t| tjrÄt| j|||d}t|| S d}t| t ràt!t | d}
|
dk	rþt|
|||d}nJt!| d}|dk	r$t||||d}n$t!| d}|dk	rHt||||d}|dkrRxL| j"dd D ]:}y
|j#}W n tk
r   Y nX |rbt$|| |S qbW t | j"krR| j%t&j%krÐ| j't&j'krÐt(t&S t)d | ¡nrt| t*sRt!t | d}
|
dk	rRyt|
|||d}W n8 t)k
rP } zd | ¡}t)||W dd}~X Y nX |dk	rn|rjt|S |S t| tj+rd | ¡}t)|t)d | ¡dS )zQPrivate helper function to get signature for arbitrary
    callable objects.
    z{!r} is not a callable object)rA  rB  rC  c             S   s
   t | dS )NÚ__signature__)r   )r|   r	   r	   r
   rI   ²  rJ   z*_signature_from_callable.<locals>.<lambda>)rz   Nz1unexpected object {!r} in __signature__ attribute)Nr   )rI  )rB  Ú__call__Ú__new__r  r   z(no signature found for builtin type {!r}zno signature found for {!r}z,no signature found for builtin function {!r}z+callable {!r} is not supported by signature),r  r   r   r   r   r   rE  r   rý  r   rd  rQ   rF  Ú_partialmethodÚ	functoolsÚpartialmethodr   rû  rd   rI  rJ  rw   r=  rM  rí  r]  r   r  rc  rþ  rX  rð  r   ré  ry   rW  rV  r  r   rf  r  r   ræ  r7   )rv   rA  rB  rC  rR  ri  rï  Úfirst_wrapped_paramÚ
sig_paramsró  ÚcallÚnewÚinitrF   Útext_sigrS  r  r	   r	   r
   rE    sê    	



















rE  c               @   s   e Zd ZdZdS )r  z1A private marker - used in Parameter & Signature.N)r   r   r   r   r	   r	   r	   r
   r  _	  s   r  c               @   s   e Zd ZdZdS )r7  z6Marker object for Signature.empty and Parameter.empty.N)r   r   r   r   r	   r	   r	   r
   r7  c	  s   r7  c               @   s(   e Zd ZdZdZdZdZdZdd ZdS )	Ú_ParameterKindr   r¤   rò   é   é   c             C   s   | j S )N)Ú_name_)r   r	   r	   r
   Ú__str__n	  s    z_ParameterKind.__str__N)	r   r   r   rJ  rK  rM  rN  rP  rt  r	   r	   r	   r
   rp  g	  s   rp  zpositional-onlyzpositional or keywordzvariadic positionalzkeyword-onlyzvariadic keywordc               @   s°   e Zd ZdZdZeZeZe	Z
eZeZeZeedddZdd Zdd	 Zed
d Zedd Zedd Zedd ZeeeedddZdd Zdd Zdd Zdd ZdS )r=  a  Represents a parameter in a function signature.

    Has the following public attributes:

    * name : str
        The name of the parameter as a string.
    * default : object
        The default value for the parameter if specified.  If the
        parameter has no default value, this attribute is set to
        `Parameter.empty`.
    * annotation
        The annotation for the parameter if specified.  If the
        parameter has no annotation, this attribute is set to
        `Parameter.empty`.
    * kind : str
        Describes how argument values are bound to the parameter.
        Possible values: `Parameter.POSITIONAL_ONLY`,
        `Parameter.POSITIONAL_OR_KEYWORD`, `Parameter.VAR_POSITIONAL`,
        `Parameter.KEYWORD_ONLY`, `Parameter.VAR_KEYWORD`.
    )Ú_nameÚ_kindÚ_defaultÚ_annotation)rM  rQ  c            C   s   yt || _W n$ tk
r2   td|dY nX |tk	rf| jttfkrfd}| t| j¡}t||| _|| _	|tkrtdt
|ts¤d t|j¡}t||d dkrþ|dd   ¡ rþ| jtkræd	}| t| j¡}t|t| _d
 |dd  ¡}| ¡ std |¡|| _d S )Nzvalue z is not a valid Parameter.kindz({} parameters cannot have default valuesz*name is a required attribute for Parameterzname must be a str, not a {}r   r   r¤   zLimplicit arguments must be passed as positional or keyword arguments, not {}z
implicit{}z"{!r} is not a valid parameter name)rp  rv  r   r7  rN  rP  r   Ú_get_paramkind_descrrw  rx  r   r    r   r   r   ÚisdigitrL  rK  Úisidentifierru  )r   rD   rw   rM  rQ  r  r	   r	   r
   r  £	  s4    


zParameter.__init__c             C   s    t | | j| jf| j| jdfS )N)rw  rx  )r   ru  rv  rw  rx  )r   r	   r	   r
   Ú
__reduce__Ë	  s    
zParameter.__reduce__c             C   s   |d | _ |d | _d S )Nrw  rx  )rw  rx  )r   Ústater	   r	   r
   Ú__setstate__Ñ	  s    
zParameter.__setstate__c             C   s   | j S )N)ru  )r   r	   r	   r
   rD   Õ	  s    zParameter.namec             C   s   | j S )N)rw  )r   r	   r	   r
   rM  Ù	  s    zParameter.defaultc             C   s   | j S )N)rx  )r   r	   r	   r
   rQ  Ý	  s    zParameter.annotationc             C   s   | j S )N)rv  )r   r	   r	   r
   rw   á	  s    zParameter.kind)rD   rw   rQ  rM  c            C   sL   |t kr| j}|t kr| j}|t kr*| j}|t kr8| j}t| ||||dS )z+Creates a customized copy of the Parameter.)rM  rQ  )r  ru  rv  rx  rw  r   )r   rD   rw   rQ  rM  r	   r	   r
   r]  å	  s    zParameter.replacec             C   s   | j }| j}| jtk	r(d |t| j¡}| jtk	rb| jtk	rPd |t| j¡}nd |t| j¡}|tkrtd| }n|t	krd| }|S )Nz{}: {}z{} = {}z{}={}rb  z**)
rw   ru  rx  r7  r   r_  rw  r\  rN  rP  )r   rw   Ú	formattedr	   r	   r
   rt  ÷	  s    



zParameter.__str__c             C   s   d  | jj| ¡S )Nz	<{} "{}">)r   r   r   )r   r	   r	   r
   Ú__repr__
  s    zParameter.__repr__c             C   s   t | j| j| j| jfS )N)ÚhashrD   rw   rQ  rM  )r   r	   r	   r
   Ú__hash__
  s    zParameter.__hash__c             C   sJ   | |krdS t |tstS | j|jkoH| j|jkoH| j|jkoH| j|jkS )NT)r   r=  ÚNotImplementedru  rv  rw  rx  )r   Úotherr	   r	   r
   Ú__eq__
  s    
zParameter.__eq__N)r   r   r   r   Ú	__slots__rK  rJ  rL  rK  rN  rM  rO  rN  rP  rP  r7  rH  r  r|  r~  ra   rD   rM  rQ  rw   r  r]  rt  r  r  r  r	   r	   r	   r
   r=  	  s*   (r=  c               @   sh   e Zd ZdZdZdd Zedd Zedd Zed	d
 Z	dd Z
dd Zdd Zdd Zdd ZdS )ÚBoundArgumentsa  Result of `Signature.bind` call.  Holds the mapping of arguments
    to the function's parameters.

    Has the following public attributes:

    * arguments : OrderedDict
        An ordered mutable mapping of parameters' names to arguments' values.
        Does not contain arguments' default values.
    * signature : Signature
        The Signature object that created this instance.
    * args : tuple
        Tuple of positional arguments values.
    * kwargs : dict
        Dict of keyword arguments values.
    )rì  Ú
_signatureÚ__weakref__c             C   s   || _ || _d S )N)rì  r  )r   r  rì  r	   r	   r
   r  1
  s    zBoundArguments.__init__c             C   s   | j S )N)r  )r   r	   r	   r
   r  5
  s    zBoundArguments.signaturec          	   C   s|   g }xn| j j ¡ D ]^\}}|jttfkr*P y| j| }W n tk
rN   P Y qX |jtkrf| 	|¡ q| 
|¡ qW t|S )N)r  rI  rA   rw   rP  rO  rì  r¢  rN  ÚextendrP   rd   )r   r)  rø  rV  re  r	   r	   r
   r)  9
  s    
zBoundArguments.argsc          	   C   s   i }d}x| j j ¡ D ]x\}}|sF|jttfkr6d}n|| jkrFd}q|sLqy| j| }W n tk
rn   Y qX |jtkr| |¡ q|||< qW |S )NFT)	r  rI  rA   rw   rP  rO  rì  r¢  Úupdate)r   ÚkwargsÚkwargs_startedrø  rV  re  r	   r	   r
   r  P
  s&    

zBoundArguments.kwargsc          	   C   s    | j }g }x| jj ¡ D ]v\}}y| ||| f¡ W q tk
r   |jtk	rX|j}n"|jt	krhd}n|jt
krxi }nw| ||f¡ Y qX qW t|| _ dS )zåSet default values for missing arguments.

        For variable-positional arguments (*args) the default is an
        empty tuple.

        For variable-keyword arguments (**kwargs) the default is an
        empty dict.
        r	   N)rì  r  rI  rA   rP   r¢  rM  r7  rw   rN  rP  r   )r   rì  Únew_argumentsrD   rV  Úvalr	   r	   r
   Úapply_defaultsn
  s    	


zBoundArguments.apply_defaultsc             C   s2   | |krdS t |tstS | j|jko0| j|jkS )NT)r   r  r  r  rì  )r   r  r	   r	   r
   r  
  s    
zBoundArguments.__eq__c             C   s   |d | _ |d | _d S )Nr  rì  )r  rì  )r   r}  r	   r	   r
   r~  
  s    
zBoundArguments.__setstate__c             C   s   | j | jdS )N)r  rì  )r  rì  )r   r	   r	   r
   Ú__getstate__
  s    zBoundArguments.__getstate__c             C   sD   g }x(| j  ¡ D ]\}}| d ||¡¡ qW d | jjd |¡¡S )Nz{}={!r}z	<{} ({})>z, )rì  rA   rP   r   r   r   rª   )r   r)  re  rE   r	   r	   r
   r  
  s    zBoundArguments.__repr__N)r   r   r   r   r  r  ra   r  r)  r  r  r  r~  r  r  r	   r	   r	   r
   r  
  s   r  c               @   sÚ   e Zd ZdZdZeZeZe	Z
d,e	ddddZedd	 Zed
d ZeddddZedd Zedd ZeedddZdd Zdd Zdd ZddddZd d! Zd"d# Zd$d% Zd&d' Zd(d) Zd*d+ ZdS )-rF  a  A Signature object represents the overall signature of a function.
    It stores a Parameter object for each parameter accepted by the
    function, as well as information specific to the function itself.

    A Signature object has the following public attributes and methods:

    * parameters : OrderedDict
        An ordered mapping of parameters' names to the corresponding
        Parameter objects (keyword-only arguments are in the same order
        as listed in `code.co_varnames`).
    * return_annotation : object
        The annotation for the return type of the function if specified.
        If the function has no annotation for its return type, this
        attribute is set to `Signature.empty`.
    * bind(*args, **kwargs) -> BoundArguments
        Creates a mapping from positional and keyword arguments to
        parameters.
    * bind_partial(*args, **kwargs) -> BoundArguments
        Creates a partial mapping from positional and keyword arguments
        to parameters (simulating 'functools.partial' behavior.)
    )Ú_return_annotationÚ_parametersNT)rG  rY  c            C   sö   |dkrt  }nÐ|rÎt  }t}d}x¼t|D ]\}}|j}	|j}
|	|k rjd}| t|t|	¡}t|n|	|krzd}|	}|	ttfkr¦|j	t
kr¢|r¦d}t|nd}|
|krÀd |
¡}t||||
< q,W nt dd |D }t |¡| _|| _dS )	zConstructs Signature from the given list of Parameter
        objects and 'return_annotation'.  All arguments are optional.
        NFz7wrong parameter order: {} parameter before {} parameterz-non-default argument follows default argumentTzduplicate parameter name: {!r}c             s   s   | ]}|j |fV  qd S )N)rD   )r]   rV  r	   r	   r
   r_   ï
  s   z%Signature.__init__.<locals>.<genexpr>)r   rK  rh  rw   rD   r   ry  r   rL  rM  r7  r   ÚMappingProxyTyper  r  )r   rI  rG  rY  rü  Útop_kindÚkind_defaultsÚidxrV  rw   rD   r  r	   r	   r
   r  ¾
  s>    






zSignature.__init__c             C   s   t jdtdd t| |S )zConstructs Signature for the given python function.

        Deprecated since Python 3.5, use `Signature.from_callable()`.
        z_inspect.Signature.from_function() is deprecated since Python 3.5, use Signature.from_callable()rò   )r7  )r8  r9  r:  rc  )r^   r   r	   r	   r
   Úfrom_functionõ
  s    
zSignature.from_functionc             C   s   t jdtdd t| |S )zConstructs Signature for the given builtin function.

        Deprecated since Python 3.5, use `Signature.from_callable()`.
        z^inspect.Signature.from_builtin() is deprecated since Python 3.5, use Signature.from_callable()rò   )r7  )r8  r9  r:  rX  )r^   r   r	   r	   r
   Úfrom_builtin  s    
zSignature.from_builtin)Úfollow_wrappedc            C   s   t || |dS )z3Constructs Signature for the given callable object.)rC  rA  )rE  )r^   rv   r  r	   r	   r
   Úfrom_callable  s    zSignature.from_callablec             C   s   | j S )N)r  )r   r	   r	   r
   rI    s    zSignature.parametersc             C   s   | j S )N)r  )r   r	   r	   r
   rG    s    zSignature.return_annotation)rI  rG  c            C   s0   |t kr| j ¡ }|t kr | j}t| ||dS )zCreates a customized copy of the Signature.
        Pass 'parameters' and/or 'return_annotation' arguments
        to override them in the new copy.
        )rG  )r  rI  rJ  r  r   )r   rI  rG  r	   r	   r
   r]    s    
zSignature.replacec             C   s8   t dd | j ¡ D }dd | j ¡ D }||| jfS )Nc             s   s   | ]}|j tkr|V  qd S )N)rw   rO  )r]   rV  r	   r	   r
   r_   +  s    z(Signature._hash_basis.<locals>.<genexpr>c             S   s   i | ]}|j tkr||jqS r	   )rw   rO  rD   )r]   rV  r	   r	   r
   r  .  s    z)Signature._hash_basis.<locals>.<dictcomp>)rd   rI  rJ  rG  )r   rü  Ú
kwo_paramsr	   r	   r
   Ú_hash_basis*  s    zSignature._hash_basisc             C   s(   |   ¡ \}}}t| ¡ }t|||fS )N)r  Ú	frozensetrJ  r  )r   rü  r  rG  r	   r	   r
   r  3  s    zSignature.__hash__c             C   s*   | |krdS t |tstS |  ¡ | ¡ kS )NT)r   rF  r  r  )r   r  r	   r	   r
   r  8  s
    
zSignature.__eq__F)rð  c            C   s  t  }t| j ¡ }d}t|}xxyt|}W nÈ tk
rø   yt|}	W n tk
rb   P Y nX |	jtkrrP n|	j|kr¬|	jt	kr¢d}
|
j
|	jd}
t|
d|	f}P nH|	jtksÀ|	jtk	rÊ|	f}P n*|rØ|	f}P nd}
|
j
|	jd}
t|
dY q$X yt|}	W n  tk
r&   tddY q$X |	jttfkrBtdd|	jtkrn|g}| |¡ t|||	j< P |	j|krtdj
|	jdd|||	j< q$W d}x¼t ||¡D ]¬}	|	jtkrÆ|	}q®|	jtkrÖq®|	j}y| |¡}W nF tk
r0   |s,|	jtkr,|	jtkr,tdj
|ddY n(X |	jt	krPtdj
|	jd|||< q®W |r|dk	rz|||j< ntdj
tt|d|  | |¡S )	z#Private method. Don't use directly.r	   zA{arg!r} parameter is positional only, but was passed as a keyword)re  Nz$missing a required argument: {arg!r}ztoo many positional argumentsz$multiple values for argument {arg!r}z*got an unexpected keyword argument {arg!r})r   r  rI  rJ  r  ÚStopIterationrw   rN  rD   rK  r   r   rP  rM  r7  rO  r  rd   rH  Úchainr©   r¢  Ú_bound_arguments_cls)r   r)  r  rð  rì  rI  Úparameters_exÚarg_valsÚarg_valrV  r  rJ  Úkwargs_paramrø  r	   r	   r
   Ú_bind?  s    







zSignature._bindc              O   s   | d   | dd |¡S )z¹Get a BoundArguments object, that maps the passed `args`
        and `kwargs` to the function's signature.  Raises `TypeError`
        if the passed arguments can not be bound.
        r   r¤   N)r¦  )r)  r  r	   r	   r
   ÚbindÂ  s    zSignature.bindc              O   s   | d j | dd |ddS )zÂGet a BoundArguments object, that partially maps the
        passed `args` and `kwargs` to the function's signature.
        Raises `TypeError` if the passed arguments can not be bound.
        r   r¤   NT)rð  )r¦  )r)  r  r	   r	   r
   rë  É  s    zSignature.bind_partialc             C   s    t | t| j ¡ fd| jifS )Nr  )r   rd   r  rJ  r  )r   r	   r	   r
   r|  Ð  s    zSignature.__reduce__c             C   s   |d | _ d S )Nr  )r  )r   r}  r	   r	   r
   r~  Õ  s    zSignature.__setstate__c             C   s   d  | jj| ¡S )Nz<{} {}>)r   r   r   )r   r	   r	   r
   r  Ø  s    zSignature.__repr__c       	      C   sÄ   g }d}d}xr| j  ¡ D ]d}t|}|j}|tkr8d}n|rJ| d¡ d}|tkrXd}n|tkrr|rr| d¡ d}| |¡ qW |r| d¡ d d 	|¡¡}| j
tk	rÀt| j
}|d |¡7 }|S )NFTr  rb  z({})z, z -> {})rI  rJ  r    rw   rK  rP   rN  rO  r   rª   rG  r7  r_  )	r   rn   Úrender_pos_only_separatorÚrender_kw_only_separatorrV  r  rw   ÚrenderedÚannor	   r	   r
   rt  Û  s0    




zSignature.__str__)N)r   r   r   r   r  r=  rA  r  r¡  r7  rH  r  ri   r  r  r  ra   rI  rG  r  r]  r  r  r  r¦  r§  rë  r|  r~  r  rt  r	   r	   r	   r
   rF   
  s2   6	 rF  )r  c            C   s   t j| |dS )z/Get a signature object for the passed callable.)r  )rF  r  )rv   r  r	   r	   r
   r  	  s    r  c           
   C   sÈ  ddl } ddl}|  ¡ }|jddd |jdddd	d
 | ¡ }|j}| d¡\}}}y| |¡ }}	W nL tk
r´ }
 z.d 	|t
|
j|
¡}t|tjd td W dd}
~
X Y nX |rà| d¡}|	}x|D ]}t||}qÎW |	jtjkrtdtjd td |jr¸td 	|¡ td 	t|	¡ td 	|	j¡ ||	krxtd 	t|	j¡ t|	dr®td 	|	j¡ n6yt|\}}W n tk
r   Y nX td 	|¡ td ntt| dS )z6 Logic for inspecting an object given at command line r   Nr   zCThe object to be analysed. It supports the 'module:qualname' syntax)Úhelpz-dz	--detailsÚ
store_truez9Display info about the module rather than its source code)Úactionr¬  r  zFailed to import {} ({}: {}))rÛ   rò   r   z#Can't get info for builtin modules.r¤   z
Target: {}z
Origin: {}z
Cached: {}z
Loader: {}Ú__path__zSubmodule search path: {}zLine: {}r£   )Úargparserº   ÚArgumentParserÚadd_argumentÚ
parse_argsr   Ú	partitionÚimport_modulere   r   r   r   Úprintr   ÚstderrÚexitr   rB   Úbuiltin_module_namesÚdetailsrÐ   Ú
__cached__r\  rÄ   r   r¯  rñ   r  )r°  rº   Úparserr)  ÚtargetÚmod_nameÚ	has_attrsÚattrsrv   rÝ   rr   r  ÚpartsÚpartÚ__r°  r	   r	   r
   Ú_main  sV    



rÄ  rÕ   )N)N)N)F)N)r¤   )r¤   )r¤   )r¤   )r¤   )r	   )T)T)­r   Ú
__author__r.   ÚdisÚcollections.abcr-   ÚenumÚimportlib.machineryrº   rH  rÍ   r·   rê   r   r
  r  r   r8  rh  rÖ   Úoperatorr   r   r   ÚglobalsÚmod_dictÚCOMPILER_FLAG_NAMESrA   rY   rZ   r=   r   r   r   r   r   r   r   r   r   r    r"   r$   r&   r(   r*   r0   r2   r4   r6   r8   r9   rG   r[   r\   rx   rL   r   r   r   r   r¢   r¡   r´   rÁ   rÐ   rÔ   r×   rÙ   rÌ   rñ   rú   re   rû   rü   r  r  r  r  r%  r&  r-  r'  r6  r?  r@  r;  rW  rZ  r_  ra  r    rq  rt  r|  r  r  r  rª  r«  r²  r³  Ú_fieldsr´  r¸  r»  r½  r¾  rÀ  r   rÅ  rÂ  rÈ  rË  rÌ  rÉ  rÑ  rÒ  rÓ  rÔ  rÕ  rÚ  rÛ  rÜ  rÝ  rÞ  rß  rã  rä  r   re  Ú_WrapperDescriptorÚallÚ_MethodWrapperr&  r@   Ú_ClassMethodWrapperr7   ræ  ré  rû  rý  rþ  r  r	  r  rV  rX  rc  rE  r  r7  ÚIntEnumrp  rJ  rK  rK  rL  rM  rN  rN  rO  rP  rP  Ú_PARAM_NAME_MAPPINGÚ__getitem__ry  r=  r  rF  r  rÄ  r   r	   r	   r	   r
   Ú<module>   sb  	


	
	
,
t$
;
	
.I-7





[


	4>
5

 



		0


LH
 R H    k:
ã               @   sl  d Z dZdddddddd	d
dddddddddgZddlZddlZddlmZmZmZmZm	Z	m
Z
mZmZmZmZmZmZmZ ejZde_dZdZdZG dd dejejdZG dd dejeZG dd	 d	ejeZG dd dejeZe  e	¡ x"e
eeeefD ]Z!e  e!¡ qW xeefD ]Z!e  e!¡ q W [!yddlm"Z" W n e#k
r\   Y nX e  e"¡ dS ) aÁ  The io module provides the Python interfaces to stream handling. The
builtin open function is defined in this module.

At the top of the I/O hierarchy is the abstract base class IOBase. It
defines the basic interface to a stream. Note, however, that there is no
separation between reading and writing to streams; implementations are
allowed to raise an OSError if they do not support a given operation.

Extending IOBase is RawIOBase which deals simply with the reading and
writing of raw bytes to a stream. FileIO subclasses RawIOBase to provide
an interface to OS files.

BufferedIOBase deals with buffering on a raw byte stream (RawIOBase). Its
subclasses, BufferedWriter, BufferedReader, and BufferedRWPair buffer
streams that are readable, writable, and both respectively.
BufferedRandom provides a buffered interface to random access
streams. BytesIO is a simple stream of in-memory bytes.

Another IOBase subclass, TextIOBase, deals with the encoding and decoding
of streams into text. TextIOWrapper, which extends it, is a buffered text
interface to a buffered raw stream (`BufferedIOBase`). Finally, StringIO
is an in-memory stream for text.

Argument names are not part of the specification, and only the arguments
of open() are intended to be used as keyword arguments.

data:

DEFAULT_BUFFER_SIZE

   An int containing the default buffer size used by the module's buffered
   I/O classes. open() uses the file's blksize (as obtained by os.stat) if
   possible.
zëGuido van Rossum <guido@python.org>, Mike Verdone <mike.verdone@gmail.com>, Mark Russell <mark.russell@zen.co.uk>, Antoine Pitrou <solipsis@pitrou.net>, Amaury Forgeot d'Arc <amauryfa@gmail.com>, Benjamin Peterson <benjamin@python.org>ÚBlockingIOErrorÚopenÚIOBaseÚ	RawIOBaseÚFileIOÚBytesIOÚStringIOÚBufferedIOBaseÚBufferedReaderÚBufferedWriterÚBufferedRWPairÚBufferedRandomÚ
TextIOBaseÚTextIOWrapperÚUnsupportedOperationÚSEEK_SETÚSEEK_CURÚSEEK_ENDé    N)ÚDEFAULT_BUFFER_SIZEr   r   r   r   r   r   r	   r
   r   r   ÚIncrementalNewlineDecoderr   Úioé   é   c               @   s   e Zd ZejjZdS )r   N)Ú__name__Ú
__module__Ú__qualname__Ú_ioÚ_IOBaseÚ__doc__© r   r   úD:\Python\lib\io.pyr   H   s   )Ú	metaclassc               @   s   e Zd ZejjZdS )r   N)r   r   r   r   Ú
_RawIOBaser   r   r   r   r    r   K   s   c               @   s   e Zd ZejjZdS )r   N)r   r   r   r   Ú_BufferedIOBaser   r   r   r   r    r   N   s   c               @   s   e Zd ZejjZdS )r   N)r   r   r   r   Ú_TextIOBaser   r   r   r   r    r   Q   s   )Ú_WindowsConsoleIO)$r   Ú
__author__Ú__all__r   Úabcr   r   r   r   r   r   r   r	   r
   r   r   r   r   ÚOpenWrapperr   r   r   r   r   ÚABCMetar   r"   r   r#   r   r$   r   ÚregisterÚklassr%   ÚImportErrorr   r   r   r    Ú<module>"   s<   
<


ã            #   @   sz   d Z ddgZddddddd	d
dddddddddddddddddddddd d!d"d#d$d%g#ZeejZd&d' Zed(krve  d)S )*zûKeywords (from "graminit.c")

This file is automatically generated; please don't muck it up!

To update the symbols in this file, 'cd' to the top directory of
the python source tree after building the interpreter and run:

    ./python Lib/keyword.py
Ú	iskeywordÚkwlistÚFalseÚNoneÚTrueÚandÚasÚassertÚasyncÚawaitÚbreakÚclassÚcontinueÚdefÚdelÚelifÚelseÚexceptÚfinallyÚforÚfromÚglobalÚifÚimportÚinÚisÚlambdaÚnonlocalÚnotÚorÚpassÚraiseÚreturnÚtryÚwhileÚwithÚyieldc           	   C   s|  dd l } dd l}| jdd  }|r*|d p,d}t|dkrD|d }nd}t|dd}| ¡ }W d Q R X |r|d t|d  ¡ d  nd}t|T}| d¡}g }	x>|D ]6}
d	|
krª| |
¡}|rª|	 	d
| 
d¡ d | ¡ qªW W d Q R X |	 ¡  y0| d| ¡d }| d| ¡}|	|||< W n, tk
rR   | j d¡ |  d¡ Y nX t|ddd}| |¡ W d Q R X d S )Né    é   zPython/graminit.czLib/keyword.pyÚ )ÚnewlineÚ
z	"([^"]+)"z{1, "z	        'z',z#--start keywords--z#--end keywords--z'target does not contain format markers
Úw)ÚsysÚreÚargvÚlenÚopenÚ	readlinesÚstripÚcompileÚsearchÚappendÚgroupÚsortÚindexÚ
ValueErrorÚstderrÚwriteÚexitÚ
writelines)r,   r-   ÚargsÚiptfileÚoptfileÚfpÚformatÚnlÚstrprogÚlinesÚlineÚmatchÚstartÚend© rJ   úD:\Python\lib\keyword.pyÚmain9   s6     
$



*rL   Ú__main__N)Ú__doc__Ú__all__r   Ú	frozensetÚ__contains__r   rL   Ú__name__rJ   rJ   rJ   rK   Ú<module>   sP   
&ã               @   sn   d Z ddlZddlZddlZddlZdddgZdddZi add Zddd	Z	dd
dZ
dddZdd ZdS )zÃCache lines from Python source files.

This is intended to read lines from modules imported -- hence if a filename
is not found, it will look down the module search path for a file by
that name.
é    NÚgetlineÚ
clearcacheÚ
checkcachec             C   s:   t | |}d|  kr"t|kr2n n||d  S dS d S )Né   Ú )ÚgetlinesÚlen)ÚfilenameÚlinenoÚmodule_globalsÚlines© r   úD:\Python\lib\linecache.pyr      s    
c               C   s   i a dS )zClear the cache entirely.N)Úcacher   r   r   r   r      s    c             C   sR   | t kr(t |  }t|dkr(t |  d S y
t| |S  tk
rL   t  g S X dS )zGet the lines for a Python source file from the cache.
    Update the cache if it doesn't contain an entry for this file already.r   é   N)r   r   ÚupdatecacheÚMemoryErrorr   )r	   r   Úentryr   r   r   r   %   s    
r   c          	   C   s®   | dkrt t ¡ }n| tkr&| g}ndS x~|D ]v} t|  }t|dkrJq0|\}}}}|dkr`q0yt |¡}W n tk
r   t| = w0Y nX ||jks ||jkr0t| = q0W dS )zUDiscard cache entries that are out of date.
    (This is not checked upon each call!)Nr   )	Úlistr   Úkeysr   ÚosÚstatÚOSErrorÚst_sizeÚst_mtime)r	   Ú	filenamesr   ÚsizeÚmtimer   Úfullnamer   r   r   r   r   5   s&    
c             C   sØ  | t krtt |  dkrt | = | r6|  d¡r:|  d¡r:g S | }yt |¡}W n tk
rT   | }t| |rÔyt |  d  }W n ttfk
r   Y n<X |dkr¦g S t|ddd | 	¡ D |ft | < t |  d S tj
 | ¡räg S xjtj
D ]\}ytj
 ||¡}W n ttfk
r   wìY nX yt |¡}P W qì tk
rF   Y qìX qìW g S Y nX y"t |¡}| ¡ }W dQ R X W n tk
r   g S X |r¶|d	  d
¡s¶|d	  d
7  < |j|j }	}
|	|
||ft | < |S )zUpdate a cache entry and return its list of lines.
    If something's wrong, print a message, discard the cache entry,
    and return an empty list.r   ú<ú>r   Nc             S   s   g | ]}|d  qS )Ú
r   )Ú.0Úliner   r   r   ú
<listcomp>q   s    zupdatecache.<locals>.<listcomp>r   éÿÿÿÿr!   )r   r   Ú
startswithÚendswithr   r   r   Ú	lazycacheÚImportErrorÚ
splitlinesÚpathÚisabsÚsysÚjoinÚ	TypeErrorÚAttributeErrorÚtokenizeÚopenÚ	readlinesr   r   )r	   r   r   r   ÚbasenameÚdataÚdirnameÚfpr   r   r   r   r   r   r   R   sV    



r   c             C   s   | t kr tt |  dkrdS dS | r8|  d¡r<|  d¡r<dS |rd|kr| d¡}|d }t|dd	}|r|rt ||¡}|ft | < dS dS )
aí  Seed the cache for filename with module_globals.

    The module loader will be asked for the source only when getlines is
    called, not immediately.

    If there is an entry in the cache already, it is not altered.

    :return: True if a lazy load is registered in the cache,
        otherwise False. To register such a load a module loader with a
        get_source method must be found, the filename must be a cachable
        filename, and the filename must not be already cached.
    r   TFr   r    Ú
__loader__Ú__name__Ú
get_sourceN)r   r   r&   r'   ÚgetÚgetattrÚ	functoolsÚpartial)r	   r   ÚnameÚloaderr:   Ú	get_linesr   r   r   r(      s    

r(   )N)N)N)N)Ú__doc__r=   r-   r   r1   Ú__all__r   r   r   r   r   r   r(   r   r   r   r   Ú<module>   s   




Aã            M  @   s4  d Z ddlZddlZddlZddlZddlZddlmZ ddl	Z	dddddd	d
ddddddddddddddddgZ
dd Zdd ZyddlT W nL ek
rÚ   d Zd!Zd"ZdZd#Zd$Zd%Zd&ZeZd'd
 Zd¤d(dZY nX de krêeZde krøeZeZi Ze	  e¡d)d
 Zd*d+ Z!d¥d-d.Z"d/d0 Z#e $d1¡Z%d¦d2d3Z&d§d4dZ'd¨d5dZ(d©d7dZ)d8d Zd9d: Z*e+fd;dZ,d<d Z-d=d> Z.eZ/d?d@ Z0dAdB Z1dCd Z2dDdE Z3dFdG Z4dªdIdZ5efdJdZ6d«dKdZefdLd	Z7ej8 9dM¡rd¬dNdZ:nRye; W n< e<k
rP   e=edOr@d­dPdZ:nd®dQdZ:Y nX d¯dRdZ:dSdSdTdUdUdVdWdXdYdZdTd[d\d]dTdTdTd^d_d`dad]dbd[dcddd\dedfdgdhdUdidjdVdkdldmdndodpdXdYdZdq,Z>x2e?e> @¡ D ]"\ZAZBeA Cdrds¡ZAe> DeAeB¡ qÊW dtdtdtdudvdwdxdxdydzd{d{d|d}d~dddddddddddddddddddddddddddddddddddddddddd d¡d¢d£d¤d¥d¦d§d§d¨d¨d©dªdªdd«dSd¬dSdSd|d­dSdSd®d¯d®d°d±d²d®d³d|d´dµd¶d·d¸d¹dºd»d»d»d¼d½d¾d¾d»d»d»d¿d¿d¿d¿dÀdÁdÂdÃdÀdÄdÅdÆdÀdÇdÈdÉdÊdËdÌdÌdÍdÎdÏdÎdÐd|dÑdÒdÓdÔdÕdÖd×dØdÙdÚdÛdÜdÝdÞdßdàdádØd|dâdãdädådædØdçd|dØd|dSd|dèdédêdëdèdìdídîdïdðdñdòdódôdìdõdöd÷dødùdúdûdüdýdþdÿd dÍddddddddddddd	d
d
ddd¬ddddddddddddddddddÀdÀdÃdÀdddddÎdddddddddddddddºdºdºdd d!d!d!d"d#d$d%d&d'd'd(d)d'd'd&d&d|dâd|dâd|dâd*d+d*d*d,d,d,ddd-d.d.d.d/d/d.d.d.d.d.d0d0d0d1d0d2d3d4d4d5d6d6d7d7d7d8d7d7d9d9d:d;d<d<d=d=d>d?d@dAdBdCdDdEdEdFdFdEdCdCdGdGdHdIdJdJdKdLdMdNdOdOdPdQdRdRdSdSdTdUdVdVdWdWdXdXdYdZd§d§d[d\d]d^d_d`dÈdadÉdÈdbdbdcdddcdcdcdcdededfdfdddddbdgdgdhdidjdjdkdldldmdndodpdqdrdqdsdsdtdtdtdudvdSdSdwdwdxdudvdudydzd{d{d{d|d|d}d{d~ddddddddddddddddºddddddddddddddddddddddddìdìddddddddddddddddddddddddd d d¡d¢d¡d£d¤d¡d¥d¦d¦d¦d¦d§d¨d©d©dªdªd«d«d¬d¬d«d­d®d¯d°d±d²d²d³d³d´dµd¶d·d¶d¸d¸d¹d¹d¹dºd¶d»d¼d¼d½d½d­d¾d¿dÀd¿dÁdÁdÁdÂdÂdÃdÃdÃdÃdÄdÄdÅdÅdÆdÇdÈdÉdÉdÊdÊdËdÌdÍd´dÎdÏd´dÐdÐdÑdÒdÏdµdµdÓdÓdÔLZEdÕdÖd×dØdÙdÚdÛdÜdÝdÞdßdàdádâdãdädådædçdèdédêdëdëdìdídîdïdðdðdñdòdódôdõdöd÷dødùdúdûdüdýdþdÿd ddddddddd	d
ddddddddddddddddddddddd d!d"d#d$d%d&d'd(d)d*d+d,d-d.d.d/d0d1d2d3d4d5d6d7d8d9d:d;d<d=d>d?d@dAdBdCdDdEdFdGdHdIdJdKdLdMdNdOdPdQdRdSdTdUdVdWdXdYdZd[d\d]d^d_d`dadbdcdddedfdgdfdgdhdidjdkdldmdndmdodpdqdrdsdtdudvdwdxdydzd{d|d}d~ddddddddddddddddddddddddddddddddÐZFdd ZGye W n e<k
rä   Y nX e
 Hd ¡ eId¡kr0eJd¢ eJ  eG  eJ  eJd£ eJ  e.  dS (°  a  Locale support module.

The module provides low-level access to the C lib's locale APIs and adds high
level number formatting APIs as well as a locale aliasing engine to complement
these.

The aliasing engine includes support for many commonly used locale names and
maps them to values suitable for passing to the C lib's setlocale() function. It
also includes default encodings for all supported locale names.

é    N)ÚstrÚ	getlocaleÚgetdefaultlocaleÚgetpreferredencodingÚErrorÚ	setlocaleÚresetlocaleÚ
localeconvÚstrcollÚstrxfrmr   ÚatofÚatoiÚformatÚformat_stringÚcurrencyÚ	normalizeÚLC_CTYPEÚ
LC_COLLATEÚLC_TIMEÚLC_MONETARYÚ
LC_NUMERICÚLC_ALLÚCHAR_MAXc             C   s   | |k| |k  S )zZ strcoll(string,string) -> int.
        Compares two strings according to the locale.
    © )ÚaÚbr   r   úD:\Python\lib\locale.pyÚ_strcoll!   s    r   c             C   s   | S )z\ strxfrm(string) -> string.
        Returns a string that behaves for cmp locale-aware.
    r   )Úsr   r   r   Ú_strxfrm'   s    r   )Ú*é   é   é   é   é   é   é   c               C   s,   dgddddg dddddddddddddS )zd localeconv() -> dict.
            Returns numeric and monetary locale-specific parameters.
        r!   Ú Ú.)ÚgroupingÚcurrency_symbolÚn_sign_posnÚp_cs_precedesÚn_cs_precedesÚmon_groupingÚn_sep_by_spaceÚdecimal_pointÚnegative_signÚpositive_signÚp_sep_by_spaceÚint_curr_symbolÚp_sign_posnÚthousands_sepÚmon_thousands_sepÚfrac_digitsÚmon_decimal_pointÚint_frac_digitsr   r   r   r   r   r	   ?   s$    c             C   s   |dkrt ddS )zd setlocale(integer,string=None) -> string.
            Activates/queries locale processing.
        )Nr(   ÚCz*_locale emulation only supports "C" localer<   )r   )ÚcategoryÚvaluer   r   r   r   W   s    c              C   s   t  } tr|  t¡ | S )N)Ú_localeconvÚ_override_localeconvÚupdate)Údr   r   r   r	   l   s    
c             c   sP   d }xF| D ]>}|t krd S |dkr>|d kr2tdx
|V  q4W |V  |}q
W d S )Nr   zinvalid grouping)r   Ú
ValueError)r*   Úlast_intervalÚintervalr   r   r   Ú_grouping_intervalsz   s    

rF   Fc       
      C   sò   t  }||rdpd }||r dp"d }|s2| dfS | d dkr\|  ¡ }| t|d  }|} nd}d}g }xLt|D ]@}	| r| d d	kr| }d} P | | |	 d  ¡ | d |	  } qrW | rÄ| | ¡ | ¡  || |¡ | t|t|d
  fS )Nr8   r7   r/   r*   r   éÿÿÿÿú r(   Ú
0123456789r&   )r	   ÚrstripÚlenrF   ÚappendÚreverseÚjoin)
r   ÚmonetaryÚconvr7   r*   ÚstrippedÚright_spacesÚleft_spacesÚgroupsrE   r   r   r   Ú_group   s0    
rU   c             C   sl   d}x$|r(| | dkr(|d7 }|d8 }qW t | d }x$|rZ| | dkrZ|d8 }|d8 }q8W | ||d  S )Nr   rH   r&   )rK   )r   ÚamountÚlposÚrposr   r   r   Ú_strip_padding©   s    rY   zG%(?:\((?P<key>.*?)\))?(?P<modifiers>[-#0-9 +*.hlL]*?)[eEfFgGdiouxXcrs%]c       	      G   s´   |r| |f|  }n| | }| d dkr~d}|  d¡}|rRt|d |d\|d< }t |r^dp`d }| |¡}|r°t||}n2| d dkr°d}|r¢t||d\}}|r°t||}|S )	NrG   ÚeEfFgGr   r)   )rO   r:   r1   Údiu)ÚsplitrU   r	   rN   rY   )	Úpercentr>   r*   rO   Ú
additionalÚ	formattedÚsepsÚpartsr1   r   r   r   Ú_format·   s(    


rb   c       
   	   C   s  t t | ¡}t d| ¡}t|tjrng }xÖ|D ]8}| ¡ d dkrP| d¡ q0| t	| ¡ |||¡ q0W nt|t
s~|f}g }d}xz|D ]r}| ¡ d dkr¬| d¡ q| d¡ d¡}	| t	| ¡ || ||f||d |d |	   ¡ |d|	 7 }qW t
|}|| S )a  Formats a string in the same way that the % formatting would use,
    but takes the current locale into account.

    Grouping is applied if the third parameter is true.
    Conversion uses monetary thousands separator and grouping strings if
    forth parameter monetary is true.z%srG   ú%r   Ú	modifiersr    r&   )ÚlistÚ_percent_reÚfinditerÚsubÚ
isinstanceÚ_collections_abcÚMappingÚgrouprL   rb   ÚtupleÚcount)
ÚfÚvalr*   rO   ÚpercentsÚnew_fÚnew_valÚpercÚiÚ	starcountr   r   r   r   Ï   s0    


c             G   s^   ddl }|jdtdd t | ¡}|r:t| ¡ t| krJtdt|  t	| |||f| S )z&Deprecated, use format_string instead.r   Nz`This method will be removed in a future version of Python. Use 'locale.format_string()' instead.r'   )Ú
stacklevelzHformat() must be given exactly one %%char format specifier, %s not valid)
ÚwarningsÚwarnÚDeprecationWarningrf   ÚmatchrK   rl   rC   Úreprrb   )r]   r>   r*   rO   r^   rx   r{   r   r   r   r   ô   s    

Tc             C   sf  t  }||rdpd }|dkr&tdtd| t| |dd}d| d	 }|r´||rXd
pZd }|| dk rldpnd }|| dk rdpd }	|r ||	rdpd | }n||	rªdp¬d | }|| dk rÂdpÄd }
|| dk rÖdpØd }|
dkròd| d }n`|
dkr|| }nL|
dkr|| }n8|
dkr2| d|¡}n |
dkrJ| d	|¡}n|| }| dd¡ d	d¡S )zIFormats val according to the currency settings
    in the current locale.r;   r9   r!   z9Currency formatting is not possible using the 'C' locale.z%%.%ifT)rO   ú<ú>r5   r+   r   r.   r-   r0   r4   rH   r(   r,   r6   r2   r3   ú(ú)r&   r'   r#   r%   )r	   rC   rb   ÚabsÚreplace)rp   Úsymbolr*   ÚinternationalrP   Údigitsr   ÚsmbÚprecedesÚ	separatedÚsign_posÚsignr   r   r   r     s6    





c             C   s
   t d| S )z8Convert float to string, taking the locale into account.z%.12g)rb   )rp   r   r   r   r   0  s    c             C   s:   t  }|d }|r|  |d¡} |d }|r6|  |d¡} | S )zHParses a string as a normalized number according to the locale settings.r7   r(   r1   r)   )r	   r   )ÚstringrP   ÚtsÚddr   r   r   Ú
delocalize4  s    r   c             C   s   |t | S )z<Parses a string as a float according to the locale settings.)r   )r   Úfuncr   r   r   r   D  s    c             C   s   t t| S )zAConverts a string to an integer according to the locale settings.)Úintr   )r   r   r   r   r   H  s    c              C   sB   t td tddd} t| dt|  td} t| dt|  d S )Nr(   z%diÍ[r&   ÚisgëQ¸	@)r   r   r   Úprintr   r   r   )Ús1r   r   r   Ú_testL  s
    
r   c             C   s   d| kr| d |   d¡ }n| }t |¡}tjj | ¡ |¡}|}| ¡ }|tkr\t| }n(| dd¡}| dd¡}|tkrt| }|d | S )Nr)   Ú_r(   ú-)ÚindexÚ	encodingsÚnormalize_encodingÚaliasesÚgetÚlowerÚlocale_encoding_aliasr   )ÚcodeÚencodingÚlangnameÚnorm_encodingr   r   r   Ú_replace_encoding^  s    

r¢   c             C   sR   |dkrFd| kr| d S |   d¡\}}}|dkr4| S |dkrFt| dS | d | S )NÚeuror)   z.ISO8859-15)z
ISO8859-15zUTF-8z	ISO8859-1z
ISO8859-15ú@)Ú	partitionr¢   )r   Úmodifierr   r   r   r   r   Ú_append_modifieru  s    
r§   c       	      C   sÜ  |   ¡ }d|kr| dd¡}d|kr6| dd¡\}}nd}d|krZ| d¡dd \}}n|}d}|}|r| dd¡}| d	d¡}|d| 7 }|}|r¢|d| 7 }t |d¡}|dk	rº|S |rt |d¡}|dk	rd|krèt||S | dd¡d   ¡ |kr|S |rØ|}|r"|d| 7 }t |d¡}|dk	rnd|krLt||S | dd¡\}}t||d | S |rØt |d¡}|dk	rØd|kr¨t||}t||S | dd¡\}}|  ¡ |krØt||d | S | S )
a   Returns a normalized locale code for the given locale
        name.

        The returned locale code is formatted for use with
        setlocale().

        If normalization fails, the original name is returned
        unchanged.

        If the given encoding is not known, the function defaults to
        the default encoding for the locale code just like setlocale()
        does.

    ú:r)   r¤   r&   r(   Nr'   r   r   )r   r   r\   Úlocale_aliasr   r§   r¢   )	Ú
localenamer   r¦   r    r   Úlang_encr¡   Úlookup_nameÚdefmodr   r   r   r     s`    








c             C   sr   t | }d|kr8| dd¡\}}|dkr8d|kr8|dfS d|krVt| d¡dd S |dkrbd	S td
|  dS )aÄ   Parses the locale code for localename and returns the
        result as tuple (language code, encoding).

        The localename is normalized and passed through the locale
        alias engine. A ValueError is raised in case the locale name
        cannot be parsed.

        The language code corresponds to RFC 1766.  code and encoding
        can be None in case the values cannot be determined or are
        unknown to this implementation.

    r¤   r&   r£   r)   ziso-8859-15Nr'   r<   )NNzunknown locale: %s)r   r\   rm   rC   )rª   r   r¦   r   r   r   Ú_parse_localenameÓ  s    r®   c          	   C   sX   y0| \}}|dkrd}|dkr"|S |d | S W n" t tfk
rR   t ddY nX dS )z Builds a locale code from the given tuple (language code,
        encoding).

        No aliasing or normalizing takes place.

    Nr<   r)   zXLocale must be None, a string, or an iterable of two strings -- language code, encoding.)Ú	TypeErrorrC   )ÚlocaletupleÚlanguager   r   r   r   Ú_build_localenameñ  s    r²   ©r   r   ÚLANGÚLANGUAGEc          	   C   s¸   yddl }| ¡ \}}W n ttfk
r0   Y n8X tjdkr`|r`|dd dkr`t t|d¡}||fS ddl	}|j
j}x6| D ]*}||d}|r~|dkr¦| d¡d }P q~W d}t|S )	aÖ   Tries to determine the default locale settings and returns
        them as tuple (language code, encoding).

        According to POSIX, a program which has not called
        setlocale(LC_ALL, "") runs using the portable 'C' locale.
        Calling setlocale(LC_ALL, "") lets it use the default locale as
        defined by the LANG variable. Since we don't want to interfere
        with the current locale setting we thus emulate the behavior
        in the way described above.

        To maintain compatibility with other platforms, not only the
        LANG variable is tested, but a list of variables given as
        envvars parameter. The first found to be defined will be
        used. envvars defaults to the search path used in GNU gettext;
        it must always contain the variable name 'LANG'.

        Except for the code 'C', the language code corresponds to RFC
        1766.  code and encoding can be None in case the values cannot
        be determined.

    r   NÚwin32r'   Ú0xrµ   r¨   r<   )Ú_localeÚ_getdefaultlocaleÚImportErrorÚAttributeErrorÚsysÚplatformÚwindows_localer   r   ÚosÚenvironr\   r®   )Úenvvarsr¸   r   r   r¿   ÚlookupÚvariablerª   r   r   r   r     s$    

c             C   s(   t | }| tkr d|kr tdt|S )ap   Returns the current setting for the given locale category as
        tuple (language code, encoding).

        category may be one of the LC_* value except LC_ALL. It
        defaults to LC_CTYPE.

        Except for the code 'C', the language code corresponds to RFC
        1766.  code and encoding can be None in case the values cannot
        be determined.

    ú;z category LC_ALL is not supported)Ú
_setlocaler   r¯   r®   )r=   rª   r   r   r   r   ;  s    c             C   s$   |rt |tstt|}t| |S )a^   Set the locale for the given category.  The locale can be
        a string, an iterable of two strings (language code and encoding),
        or None.

        Iterables are converted to strings using the locale aliasing
        engine.  Locale strings are passed directly to the C lib.

        category may be given as one of the LC_* values.

    )ri   Ú_builtin_strr   r²   rÅ   )r=   Úlocaler   r   r   r   M  s    c             C   s   t | tt  dS )zª Sets the locale for category to the default setting.

        The default setting is determined by calling
        getdefaultlocale(). category defaults to LC_ALL.

    N)rÅ   r²   r   )r=   r   r   r   r   ^  s    Úwinc             C   s   t jjrdS ddl}| d¡S )z1Return the charset that the user is likely using.zUTF-8r   NF)r¼   ÚflagsÚ	utf8_modeÚ_bootlocaler   )Údo_setlocalerË   r   r   r   r   j  s    Zgetandroidapilevelc             C   s   dS )NzUTF-8r   )rÌ   r   r   r   r   x  s    c             C   s&   t jjrdS t d }|dkr"d}|S )zfReturn the charset that the user is likely using,
                by looking at environment variables.zUTF-8r&   NÚascii)r¼   rÉ   rÊ   r   )rÌ   Úresr   r   r   r   |  s    
c             C   s`   t jjrdS ddl}| rDtt}yttd W n tk
rB   Y nX | d¡}| r\tt| |S )zdReturn the charset that the user is likely using,
            according to the system configuration.zUTF-8r   Nr(   F)r¼   rÉ   rÊ   rË   r   r   r   r   )rÌ   rË   ZoldlocÚresultr   r   r   r     s    

r<   z	ISO8859-1ÚJIS7ÚeucJPzKOI8-CÚCP1251ÚCP1255ÚCP1256z	ISO8859-2z	ISO8859-5z
ISO8859-15z
ISO8859-10z
ISO8859-11z
ISO8859-13z
ISO8859-14z
ISO8859-16z	ISO8859-3z	ISO8859-4z	ISO8859-6z	ISO8859-7z	ISO8859-8z	ISO8859-9ÚSJISÚTACTISÚeucKRzUTF-8zKOI8-RzKOI8-TzKOI8-UÚRK1048),Ú437ÚcÚenÚjisÚjis7ÚajecÚkoi8cÚmicrosoftcp1251Úmicrosoftcp1255Úmicrosoftcp1256Ú88591Ú88592Ú88595Ú885915rÍ   Úlatin_1Ú	iso8859_1Ú
iso8859_10Ú
iso8859_11Ú
iso8859_13Ú
iso8859_14Ú
iso8859_15Ú
iso8859_16Ú	iso8859_2Ú	iso8859_3Ú	iso8859_4Ú	iso8859_5Ú	iso8859_6Ú	iso8859_7Ú	iso8859_8Ú	iso8859_9Ú
iso2022_jpÚ	shift_jisÚtactisÚeuc_jpÚeuc_krÚutf_8Úkoi8_rÚkoi8_tÚkoi8_uÚkz1048Úcp1251Úcp1255Úcp1256r   r(   zaz_AZ.KOI8-Czaa_DJ.ISO8859-1zaa_ER.UTF-8zaa_ET.UTF-8zaf_ZA.ISO8859-1zagr_PE.UTF-8zak_GH.UTF-8zam_ET.UTF-8zen_US.ISO8859-1zan_ES.ISO8859-15zanp_IN.UTF-8zar_AA.ISO8859-6zar_AE.ISO8859-6zar_BH.ISO8859-6zar_DZ.ISO8859-6zar_EG.ISO8859-6zar_IN.UTF-8zar_IQ.ISO8859-6zar_JO.ISO8859-6zar_KW.ISO8859-6zar_LB.ISO8859-6zar_LY.ISO8859-6zar_MA.ISO8859-6zar_OM.ISO8859-6zar_QA.ISO8859-6zar_SA.ISO8859-6zar_SD.ISO8859-6zar_SS.UTF-8zar_SY.ISO8859-6zar_TN.ISO8859-6zar_YE.ISO8859-6zas_IN.UTF-8zast_ES.ISO8859-15zayc_PE.UTF-8zaz_AZ.ISO8859-9Ezaz_IR.UTF-8zbe_BY.CP1251zbe_BY.UTF-8@latinzbg_BG.UTF-8zbem_ZM.UTF-8zber_DZ.UTF-8zber_MA.UTF-8zbg_BG.CP1251zbhb_IN.UTF-8zbho_IN.UTF-8zbho_NP.UTF-8zbi_VU.UTF-8zbn_BD.UTF-8zbn_IN.UTF-8zbo_CN.UTF-8zbo_IN.UTF-8znb_NO.ISO8859-1zbr_FR.ISO8859-1zbrx_IN.UTF-8zbs_BA.ISO8859-2zbyn_ER.UTF-8zfr_CA.ISO8859-1zen_US.UTF-8zca_ES.ISO8859-1zca_AD.ISO8859-1zca_ES.UTF-8@valenciazca_FR.ISO8859-1zca_IT.ISO8859-1zce_RU.UTF-8zzh_CN.eucCNzzh_TW.eucTWzchr_US.UTF-8zckb_IQ.UTF-8zcmn_TW.UTF-8zcrh_UA.UTF-8zhr_HR.ISO8859-2zcs_CZ.ISO8859-2zcsb_PL.UTF-8zcv_RU.UTF-8zcy_GB.ISO8859-1zda_DK.ISO8859-1zde_DE.ISO8859-1zde_AT.ISO8859-1zde_BE.ISO8859-1zde_CH.ISO8859-1zde_IT.ISO8859-1zde_LI.UTF-8zde_LU.ISO8859-1zdoi_IN.UTF-8znl_NL.ISO8859-1znl_BE.ISO8859-1zdv_MV.UTF-8zdz_BT.UTF-8zee_EE.ISO8859-4zet_EE.ISO8859-1zel_GR.ISO8859-7zel_CY.ISO8859-7zel_GR.ISO8859-15zen_AG.UTF-8zen_AU.ISO8859-1zen_BE.ISO8859-1zen_BW.ISO8859-1zen_CA.ISO8859-1zen_DK.ISO8859-1zen_DL.UTF-8zen_GB.ISO8859-1zen_HK.ISO8859-1zen_IE.ISO8859-1zen_IL.UTF-8zen_IN.ISO8859-1zen_NG.UTF-8zen_NZ.ISO8859-1zen_PH.ISO8859-1zen_SC.UTF-8zen_SG.ISO8859-1zen_US.ISO8859-15zen_ZA.ISO8859-1zen_ZM.UTF-8zen_ZW.ISO8859-1zen_ZS.UTF-8zen_EN.ISO8859-1zeo_XX.ISO8859-3zeo.UTF-8zeo_EO.ISO8859-3zeo_US.UTF-8zes_ES.ISO8859-1zes_AR.ISO8859-1zes_BO.ISO8859-1zes_CL.ISO8859-1zes_CO.ISO8859-1zes_CR.ISO8859-1zes_CU.UTF-8zes_DO.ISO8859-1zes_EC.ISO8859-1zes_GT.ISO8859-1zes_HN.ISO8859-1zes_MX.ISO8859-1zes_NI.ISO8859-1zes_PA.ISO8859-1zes_PE.ISO8859-1zes_PR.ISO8859-1zes_PY.ISO8859-1zes_SV.ISO8859-1zes_US.ISO8859-1zes_UY.ISO8859-1zes_VE.ISO8859-1zet_EE.ISO8859-15zeu_ES.ISO8859-1zeu_FR.ISO8859-1zfa_IR.UTF-8zfa_IR.ISIRI-3342zff_SN.UTF-8zfi_FI.ISO8859-15zfil_PH.UTF-8zfi_FI.ISO8859-1zfo_FO.ISO8859-1zfr_FR.ISO8859-1zfr_BE.ISO8859-1zfr_CH.ISO8859-1zfr_LU.ISO8859-1zfur_IT.UTF-8zfy_DE.UTF-8zfy_NL.UTF-8zga_IE.ISO8859-1zgl_ES.ISO8859-1zgd_GB.ISO8859-1zgez_ER.UTF-8zgez_ET.UTF-8zgu_IN.UTF-8zgv_GB.ISO8859-1zha_NG.UTF-8zhak_TW.UTF-8zhe_IL.ISO8859-8zhi_IN.ISCII-DEVzhif_FJ.UTF-8zhne_IN.UTF-8zhsb_DE.ISO8859-2zht_HT.UTF-8zhu_HU.ISO8859-2zhy_AM.UTF-8zhy_AM.ARMSCII_8zia.UTF-8zia_FR.UTF-8zis_IS.ISO8859-1zid_ID.ISO8859-1zig_NG.UTF-8zik_CA.UTF-8zit_IT.ISO8859-1zit_CH.ISO8859-1ziu_CA.NUNACOM-8ziw_IL.UTF-8zja_JP.eucJPz
ja_JP.SJISzka_GE.GEORGIAN-ACADEMYzka_GE.GEORGIAN-PSzkab_DZ.UTF-8zkk_KZ.ptcp154zkl_GL.ISO8859-1zkm_KH.UTF-8zkn_IN.UTF-8zko_KR.eucKRzkok_IN.UTF-8zks_IN.UTF-8zks_IN.UTF-8@devanagarizku_TR.ISO8859-9zkw_GB.ISO8859-1zky_KG.UTF-8zlb_LU.UTF-8zlg_UG.ISO8859-10zli_BE.UTF-8zli_NL.UTF-8zlij_IT.UTF-8zlt_LT.ISO8859-13zln_CD.UTF-8zlo_LA.MULELAO-1zlo_LA.IBM-CP1133zlv_LV.ISO8859-13zlzh_TW.UTF-8zmag_IN.UTF-8zmai_IN.UTF-8zmai_NP.UTF-8zmfe_MU.UTF-8zmg_MG.ISO8859-15zmhr_RU.UTF-8zmi_NZ.ISO8859-1zmiq_NI.UTF-8zmjw_IN.UTF-8zmk_MK.ISO8859-5zml_IN.UTF-8zmn_MN.UTF-8zmni_IN.UTF-8zmr_IN.UTF-8zms_MY.ISO8859-1zmt_MT.ISO8859-3zmy_MM.UTF-8znan_TW.UTF-8znds_DE.UTF-8znds_NL.UTF-8zne_NP.UTF-8znhn_MX.UTF-8zniu_NU.UTF-8zniu_NZ.UTF-8znl_AW.UTF-8znn_NO.ISO8859-1zno_NO.ISO8859-1zny_NO.ISO8859-1znr_ZA.ISO8859-1znso_ZA.ISO8859-15zoc_FR.ISO8859-1zom_ET.UTF-8zom_KE.ISO8859-1zor_IN.UTF-8zos_RU.UTF-8zpa_IN.UTF-8zpa_PK.UTF-8zpap_AN.UTF-8zpap_AW.UTF-8zpap_CW.UTF-8zpd_US.ISO8859-1zpd_DE.ISO8859-1zph_PH.ISO8859-1zpl_PL.ISO8859-2zpt_PT.ISO8859-1zpt_BR.ISO8859-1zpp_AN.ISO8859-1zps_AF.UTF-8zquz_PE.UTF-8zraj_IN.UTF-8zro_RO.ISO8859-2zru_RU.UTF-8zru_UA.KOI8-Uzru_RU.KOI8-Rzrw_RW.ISO8859-1zsa_IN.UTF-8zsat_IN.UTF-8zsc_IT.UTF-8zsd_IN.UTF-8zsd_IN.UTF-8@devanagarizsd_PK.UTF-8zse_NO.UTF-8zsr_RS.UTF-8@latinzsgs_LT.UTF-8zsr_CS.ISO8859-2zsh_HR.ISO8859-2zshn_MM.UTF-8zshs_CA.UTF-8zsi_LK.UTF-8zsid_ET.UTF-8zsk_SK.ISO8859-2zsl_SI.ISO8859-2zsl_CS.ISO8859-2zsm_WS.UTF-8zso_DJ.ISO8859-1zso_ET.UTF-8zso_KE.ISO8859-1zso_SO.ISO8859-1zsr_CS.ISO8859-5zsq_AL.ISO8859-2zsq_MK.UTF-8zsr_RS.UTF-8zsr_CS.UTF-8@latinzsr_CS.UTF-8zsr_ME.UTF-8zsr_CS.CP1251zss_ZA.ISO8859-1zst_ZA.ISO8859-1zsv_SE.ISO8859-1zsv_FI.ISO8859-1zsw_KE.UTF-8zsw_TZ.UTF-8zszl_PL.UTF-8zta_IN.TSCII-0zta_LK.UTF-8ztcy_IN.UTF-8zte_IN.UTF-8ztg_TJ.KOI8-Czth_TH.ISO8859-11zth_TH.TIS620zthe_NP.UTF-8zti_ER.UTF-8zti_ET.UTF-8ztig_ER.UTF-8ztk_TM.UTF-8ztl_PH.ISO8859-1ztn_ZA.ISO8859-15zto_TO.UTF-8ztpi_PG.UTF-8ztr_TR.ISO8859-9ztr_CY.ISO8859-9zts_ZA.ISO8859-1ztt_RU.TATAR-CYRztt_RU.UTF-8@iqtelifzug_CN.UTF-8zuk_UA.KOI8-Uz	en_US.utfzunm_US.UTF-8zur_PK.CP1256zur_IN.UTF-8zuz_UZ.UTF-8zve_ZA.UTF-8z
vi_VN.TCVNzvi_VN.VISCIIzwa_BE.ISO8859-1zwae_CH.UTF-8zwal_ET.UTF-8zwo_SN.UTF-8zxh_ZA.ISO8859-1zyi_US.CP1255zyo_NG.UTF-8zyue_HK.UTF-8zyuw_PG.UTF-8zzh_CN.gb2312z
zh_TW.big5zzh_HK.big5hkscszzh_SG.GB2312z	zh_SG.GBKzzu_ZA.ISO8859-1(L  Úa3Úa3_azz
a3_az.koicÚaa_djÚaa_erÚaa_etÚafÚaf_zaÚagr_peÚak_ghÚamÚam_etÚamericanÚan_esÚanp_inÚarÚar_aaÚar_aeÚar_bhÚar_dzÚar_egÚar_inÚar_iqÚar_joÚar_kwÚar_lbÚar_lyÚar_maÚar_omÚar_qaÚar_saÚar_sdÚar_ssÚar_syÚar_tnÚar_yeÚarabicÚasÚas_inÚast_esÚayc_peÚazÚaz_azzaz_az.iso88599eÚaz_irÚbezbe@latinz
be_bg.utf8Úbe_byzbe_by@latinÚbem_zmÚber_dzÚber_maÚbgÚbg_bgzbhb_in.utf8Úbho_inÚbho_npÚbi_vuÚbn_bdÚbn_inÚbo_cnÚbo_inÚbokmalu   bokmÃ¥lÚbrÚbr_frÚbrx_inÚbsÚbs_baÚ	bulgarianÚbyn_errÚ   zc-frenchzc.asciizc.enz
c.iso88591zc.utf8Úc_czc_c.cÚcaÚca_adÚca_eszca_es@valenciaÚca_frÚca_itÚcatalanÚce_ruÚcextendz	chinese-sz	chinese-tÚchr_usÚckb_iqÚcmn_twÚcrh_uaÚcroatianÚcsÚcs_csÚcs_czÚcsb_plÚcv_ruÚcyÚcy_gbÚczÚcz_czÚczechÚdaÚda_dkÚdanishÚdanskÚdeÚde_atÚde_beÚde_chÚde_deÚde_itz
de_li.utf8Úde_luÚdeutschÚdoi_inÚdutchzdutch.iso88591Údv_mvÚdz_btÚeeÚee_eeÚeestiÚelÚel_cyÚel_grz
el_gr@eurorÛ   Úen_agÚen_auÚen_beÚen_bwÚen_caÚen_dkz
en_dl.utf8Úen_gbÚen_hkÚen_ieÚen_ilÚen_inÚen_ngÚen_nzÚen_phz
en_sc.utf8Úen_sgÚen_ukÚen_uszen_us@euro@euroÚen_zaÚen_zmÚen_zwz
en_zw.utf8Úeng_gbÚenglishzenglish.iso88591Ú
english_ukzenglish_united-stateszenglish_united-states.437Ú
english_usÚeozeo.utf8Úeo_eoz
eo_us.utf8Úeo_xxÚesÚes_arÚes_boÚes_clÚes_coÚes_crÚes_cuÚes_doÚes_ecÚes_esÚes_gtÚes_hnÚes_mxÚes_niÚes_paÚes_peÚes_prÚes_pyÚes_svÚes_usÚes_uyÚes_veÚestonianÚetÚet_eeÚeuÚeu_esÚeu_frÚfaÚfa_irzfa_ir.isiri3342Úff_snÚfiÚfi_fiÚfil_phÚfinnishÚfoÚfo_foÚfrÚfr_beÚfr_caÚfr_chÚfr_frÚfr_luu	   franÃ§aisÚfre_frÚfrenchzfrench.iso88591Úfrench_franceÚfur_itÚfy_deÚfy_nlÚgaÚga_ieÚgalegoÚgalicianÚgdÚgd_gbÚger_deÚgermanzgerman.iso88591Úgerman_germanyÚgez_erÚgez_etÚglÚgl_esÚgreekÚgu_inÚgvÚgv_gbÚha_ngÚhak_twÚheÚhe_ilÚhebrewÚhiÚhi_inzhi_in.isciidevÚhif_fjÚhneÚhne_inÚhrÚhr_hrÚhrvatskiÚhsb_deÚht_htÚhuÚhu_huÚ	hungarianÚhy_amzhy_am.armscii8ÚiaÚia_frÚ	icelandicÚidÚid_idÚig_ngÚik_caÚinÚin_idr   Úis_isz
iso-8859-1ziso-8859-15z	iso8859-1z
iso8859-15Ú
iso_8859_1Úiso_8859_15ÚitÚit_chÚit_itÚitalianÚiuÚiu_caziu_ca.nunacom8ÚiwÚiw_ilz
iw_il.utf8ÚjaÚja_jpz	ja_jp.euczja_jp.mscodez	ja_jp.pckÚjapanÚjapanesezjapanese-euczjapanese.eucÚjp_jpÚkaÚka_gezka_ge.georgianacademyzka_ge.georgianpszka_ge.georgianrsÚkab_dzÚkk_kzÚklÚkl_glÚkm_khÚknÚkn_inÚkoÚko_krz	ko_kr.eucÚkok_inÚkoreanz
korean.eucÚksÚks_inzks_in@devanagari.utf8Úku_trÚkwÚkw_gbÚkyÚky_kgÚlb_luÚlg_ugÚli_beÚli_nlÚlij_itÚ
lithuanianÚln_cdÚloÚlo_lazlo_la.cp1133zlo_la.ibmcp1133zlo_la.mulelao1ÚltÚlt_ltÚlvÚlv_lvÚlzh_twÚmag_inÚmaiÚmai_inÚmai_npÚmfe_muÚmg_mgÚmhr_ruÚmiÚmi_nzÚmiq_niÚmjw_inÚmkÚmk_mkÚmlÚml_inÚmn_mnÚmni_inÚmrÚmr_inÚmsÚms_myÚmtÚmt_mtÚmy_mmÚnan_twÚnbÚnb_noÚnds_deÚnds_nlÚne_npÚnhn_mxÚniu_nuÚniu_nzÚnlÚnl_awÚnl_beÚnl_nlÚnnÚnn_noÚnoz
no@nynorskÚno_nozno_no.iso88591@bokmalzno_no.iso88591@nynorskÚ	norwegianÚnrÚnr_zaÚnsoÚnso_zaÚnyÚny_noÚnynorskÚocÚoc_frÚom_etÚom_keÚorÚor_inÚos_ruÚpaÚpa_inÚpa_pkÚpap_anÚpap_awÚpap_cwÚpdÚpd_deÚpd_usÚphÚph_phÚplÚpl_plÚpolishÚ
portugueseÚportuguese_brazilÚposixz
posix-utf2ÚppÚpp_anÚps_afÚptÚpt_brÚpt_ptÚquz_peÚraj_inÚroÚro_roÚromanianÚruÚru_ruÚru_uaÚrumanianÚrussianÚrwÚrw_rwÚsa_inÚsat_inÚsc_itÚsdÚsd_inzsd_in@devanagari.utf8Úsd_pkÚse_noÚserbocroatianÚsgs_ltÚshzsh_ba.iso88592@bosniaÚsh_hrzsh_hr.iso88592Úsh_spÚsh_yuÚshn_mmÚshs_caÚsiÚsi_lkÚsid_etÚsinhalaÚskÚsk_skÚslÚsl_csÚsl_siÚslovakÚsloveneÚ	slovenianÚsm_wsÚso_djÚso_etÚso_keÚso_soÚspÚsp_yuÚspanishÚspanish_spainÚsqÚsq_alÚsq_mkÚsrzsr@cyrilliczsr@latnÚsr_cszsr_cs.iso88592@latnz
sr_cs@latnÚsr_meÚsr_rsz
sr_rs@latnÚsr_spÚsr_yuzsr_yu.cp1251@cyrilliczsr_yu.iso88592zsr_yu.iso88595zsr_yu.iso88595@cyrilliczsr_yu.microsoftcp1251@cyrillicz
sr_yu.utf8zsr_yu.utf8@cyrilliczsr_yu@cyrillicÚssÚss_zaÚstÚst_zaÚsvÚsv_fiÚsv_seÚsw_keÚsw_tzÚswedishÚszl_plÚtaÚta_inzta_in.tsciizta_in.tscii0Úta_lkztcy_in.utf8ÚteÚte_inÚtgÚtg_tjÚthÚth_thzth_th.tactiszth_th.tis620ÚthaiÚthe_npÚti_erÚti_etÚtig_erÚtk_tmÚtlÚtl_phÚtnÚtn_zaÚto_toÚtpi_pgÚtrÚtr_cyÚtr_trr   Úts_zaÚttÚtt_ruztt_ru.tatarcyrztt_ru@iqtelifÚturkishÚug_cnÚukÚuk_uaÚunivÚ	universalzuniversal.utf8@ucs4Úunm_usÚurÚur_inÚur_pkÚuzÚuz_uzzuz_uz@cyrillicÚveÚve_zaÚviÚvi_vnz
vi_vn.tcvnzvi_vn.tcvn5712zvi_vn.visciizvi_vn.viscii111ÚwaÚwa_beÚwae_chÚwal_etÚwo_snÚxhÚxh_zaÚyiÚyi_usÚyo_ngÚyue_hkÚyuw_pgÚzhÚzh_cnz
zh_cn.big5z	zh_cn.eucÚzh_hkzzh_hk.big5hkÚzh_sgz	zh_sg.gbkÚzh_twz	zh_tw.euczzh_tw.euctwÚzuÚzu_zaÚaf_ZAÚsq_ALÚgsw_FRÚam_ETÚar_SAÚar_IQÚar_EGÚar_LYÚar_DZÚar_MAÚar_TNÚar_OMÚar_YEÚar_SYÚar_JOÚar_LBÚar_KWÚar_AEÚar_BHÚar_QAÚhy_AMÚas_INÚaz_AZÚba_RUÚeu_ESÚbe_BYÚbn_INÚbs_BAÚbr_FRÚbg_BGÚca_ESÚzh_CHSÚzh_TWÚzh_CNÚzh_HKÚzh_SGÚzh_MOÚzh_CHTÚco_FRÚhr_HRÚhr_BAÚcs_CZÚda_DKÚgbz_AFÚdiv_MVÚnl_NLÚnl_BEÚen_USÚen_GBÚen_AUÚen_CAÚen_NZÚen_IEÚen_ZAÚen_JAÚen_CBÚen_BZÚen_TTÚen_ZWÚen_PHÚen_INÚen_MYÚet_EEÚfo_FOÚfil_PHÚfi_FIÚfr_FRÚfr_BEÚfr_CAÚfr_CHÚfr_LUÚfr_MCÚfy_NLÚgl_ESÚka_GEÚde_DEÚde_CHÚde_ATÚde_LUÚde_LIÚel_GRÚkl_GLÚgu_INÚha_NGÚhe_ILÚhi_INÚhu_HUÚis_ISÚid_IDÚiu_CAÚga_IEÚit_ITÚit_CHÚja_JPÚkn_INÚkk_KZÚkh_KHÚqut_GTÚrw_RWÚkok_INÚko_KRÚky_KGÚlo_LAÚlv_LVÚlt_LTÚdsb_DEÚlb_LUÚmk_MKÚms_MYÚms_BNÚml_INÚmt_MTÚmi_NZÚarn_CLÚmr_INÚmoh_CAÚmn_MNÚmn_CNÚne_NPÚnb_NOÚnn_NOÚoc_FRÚor_INÚps_AFÚfa_IRÚpl_PLÚpt_BRÚpt_PTÚpa_INÚquz_BOÚquz_ECÚquz_PEÚro_ROÚrm_CHÚru_RUÚsmn_FIÚsmj_NOÚsmj_SEÚse_NOÚse_SEÚse_FIÚsms_FIÚsma_NOÚsma_SEÚsa_INÚsr_SPÚsr_BAÚsi_LKÚns_ZAÚtn_ZAÚsk_SKÚsl_SIÚes_ESÚes_MXÚes_GTÚes_CRÚes_PAÚes_DOÚes_VEÚes_COÚes_PEÚes_ARÚes_ECÚes_CLÚes_URÚes_PYÚes_BOÚes_SVÚes_HNÚes_NIÚes_PRÚes_USÚsw_KEÚsv_SEÚsv_FIÚsyr_SYÚtg_TJÚtmz_DZÚta_INÚtt_RUÚte_INÚth_THÚbo_BTÚbo_CNÚtr_TRÚtk_TMÚug_CNÚuk_UAÚwen_DEÚur_PKÚur_INÚuz_UZÚvi_VNÚcy_GBÚwo_SNÚxh_ZAÚsah_RUÚii_CNÚyo_NGÚzu_ZA)Ði6  i  i  i^  i  i  i  i  i  i  i  i   i$  i(  i,  i0  i4  i8  i<  i@  i+  iM  i,  i,  im  i-  i#  iE  i   i  i~  i  i  r%   i  i  i  i  i  i|  i  i  i  i  i  i  ie  i  i  i	  i	  i	  i	  i	  i	  i	  i	   i	$  i	(  i	,  i	0  i	4  i	@  i	D  i	H  i%  i8  id  i  i  i  i  i  i  i  ib  iV  i7  i  i  i  i  i  i  io  iG  ih  i  i9  i  i  i!  i]  i]  i<  i  i  i  iK  i?  iS  i  i  iW  i  i@  iT  i&  i'  i.  in  i/  i>  i>  iL  i:  i  iz  iN  i|  iP  iP  ia  i  i  i  iH  ic  i)  i  i  i  iF  ik  ik  ik  i  i  i  i;$  i;  i;  i;  i;  i;  i;   i;  i;  iO  i  i  i  i  i[  il  i2  i  i$  i
  i
  i
  i
  i
  i
  i
  i
   i
$  i
(  i
,  i
0  i
4  i
8  i
<  i
@  i
D  i
H  i
L  i
P  i
T  iA  i  i  iZ  i(  i_  iI  iD  iJ  i  iQ  iQ  i  iB  i  i"  i.  i   i   iC  iC  i*  iR  i  i4  i  ix  ij  i5  c              C   sÆ  i } | fdd}|  | d= t d t d t \}}t d|p@d t d|pNd t   t d	 t d xL|  ¡ D ]@\}}t |d
 t|\}}t d|pd t d|p¨d t   qrW t   t d t d t  xP|  ¡ D ]D\}}t |d
 t|\}}t d|pd t d|pd t   qÜW yttd W n$   t d t d t d Y nlX t   t d t d xR|  ¡ D ]F\}}t |d
 t|\}}t d|p¢d t d|p²d t   qxW dS )z Test function.
    c             S   s4   x.t   ¡ D ] \}}|d d dkr|| |< qW d S )Nr#   ÚLC_)ÚglobalsÚitems)Ú
categoriesÚkÚvr   r   r   Ú_init_categories  s    z'_print_locale.<locals>._init_categoriesr   z4Locale defaults as determined by getdefaultlocale():zH------------------------------------------------------------------------z
Language: z(undefined)z
Encoding: zLocale settings on startup:z...z   Language: z   Encoding: z,Locale settings after calling resetlocale():r(   zNOTE:z9setlocale(LC_ALL, "") does not support the default localez&given in the OS environment variables.z4Locale settings after calling setlocale(LC_ALL, ""):N)r   r   r¹  r   r   r   r   )rº  r½  ÚlangÚencÚnamer=   r   r   r   Ú_print_locale  sV    





rÁ  ÚLC_MESSAGESÚ__main__zLocale aliasing:zNumber formatting:)N)F)FF)FF)FF)TFF)r³   )N)T)T)T)T)KÚ__doc__r¼   r   Zencodings.aliasesÚrerj   Úbuiltinsr   rÆ   Ú	functoolsÚ__all__r   r   r¸   rº   r   r   r   r   rÂ  r   r   r   rC   r   r	   r   r¸  r   r
   r?   r@   ÚwrapsrF   rU   rY   Úcompilerf   rb   r   r   r   r   Úfloatr   r   r   rÅ   r¢   r§   r   r®   r²   r   r   r   r½   Ú
startswithr   ZCODESETÚ	NameErrorÚhasattrr   Úsortedr¹  r»  r¼  r   Ú
setdefaultr©   r¾   rÁ  rL   Ú__name__r   r   r   r   r   Ú<module>   s8  


	


%-S5
$}:

ã            &   @   s4  d Z dZdZdZdZdZdZdZdZdd	l	Z	dd	l
Z
dd	lZdd	lZdd
lT dddddddddddddddddddddd d!d"d#d$d%d&d'd(d)d*d+d,d-d.d/d0g&Zd1d2 Zd3d Zd4d Zd5d Zd6d Zd7d Zd8d Zejj e_ d9d Zd:d Zd;d Zd<d Zydd=lmZ W n ek
r(   d	ZY nX d>d Zd?d Zd@d ZdAd  Z dBdC Z!yddDlm"Z" W n ek
r|   e!Z#Y n
X dEd! Z#e#Z$e%e
dFo¤e
 &¡ dG dHkZ'dPdId,Z(dJd0 Z)y,e
 &¡ d	dH dKkrÞddLlm*Z* neW n" e+efk
r   dMdN Z*Y nX yddOlm,Z- W n ek
r.   Y nX d	S )QzCommon pathname manipulations, WindowsNT/95 version.

Instead of importing this module directly, import os and refer to this
module as os.path.
Ú.z..ú\ú;ú/z.;C:\binÚnulé    N)Ú*ÚnormcaseÚisabsÚjoinÚ
splitdriveÚsplitÚsplitextÚbasenameÚdirnameÚcommonprefixÚgetsizeÚgetmtimeÚgetatimeÚgetctimeÚislinkÚexistsÚlexistsÚisdirÚisfileÚismountÚ
expanduserÚ
expandvarsÚnormpathÚabspathÚcurdirÚpardirÚsepÚpathsepÚdefpathÚaltsepÚextsepÚdevnullÚrealpathÚsupports_unicode_filenamesÚrelpathÚsamefileÚsameopenfileÚsamestatÚ
commonpathc             C   s   t | trdS dS d S )Ns   \/z\/)Ú
isinstanceÚbytes)Úpath© r1   úD:\Python\lib\ntpath.pyÚ_get_bothseps"   s    
r3   c          	   C   sx   t  | ¡} y.t| tr&|  dd¡ ¡ S |  dd¡ ¡ S W n: ttfk
rr   t| ttfsltd| j	j
 d Y nX dS )zaNormalize case of pathname.

    Makes all characters lowercase and all slashes into backslashes.ó   /ó   \r   r   z0normcase() argument must be str or bytes, not %rN)ÚosÚfspathr.   r/   ÚreplaceÚlowerÚ	TypeErrorÚAttributeErrorÚstrÚ	__class__Ú__name__)Úsr1   r1   r2   r   ,   s    

c             C   s2   t  | ¡} t| d } t| dko0| d t| kS )zTest whether a path is absoluteé   r   )r6   r7   r   Úlenr3   )r?   r1   r1   r2   r	   C   s    
c       
   
   G   sT  t  | ¡} t| tr"d}d}d}nd}d}d}yð|sD| d d |  t| \}}xtt j|D ]~}t|\}}	|	r|	d |kr|s|s|}|	}q^n*|r¼||kr¼| ¡ | ¡ kr¸|}|	}q^|}|rÔ|d |krÔ|| }||	 }q^W |r|d |kr|r|dd  |kr|| | S || S  ttt	fk
rN   t
jd	| f|   Y nX d S )
Nr5   s   \/ó   :r   z\/ú:r   éÿÿÿÿr
   )r6   r7   r.   r/   r   Úmapr9   r:   r;   ÚBytesWarningÚgenericpathÚ_check_arg_types)
r0   Úpathsr!   ÚsepsÚcolonÚresult_driveÚresult_pathÚpÚp_driveÚp_pathr1   r1   r2   r
   K   sF    

c             C   s  t  | ¡} t| dkrt| tr0d}d}d}nd}d}d}|  ||¡}|dd |d krä|dd	 |krä| |d¡}|d
kr| dd | fS | ||d ¡}||d kr¼| dd | fS |d
krÌt| }| d| | |d fS |dd |kr| dd | dd fS | dd | fS )aÚ  Split a pathname into drive/UNC sharepoint and relative path specifiers.
    Returns a 2-tuple (drive_or_unc, path); either part may be empty.

    If you assign
        result = splitdrive(p)
    It is always true that:
        result[0] + result[1] == p

    If the path contained a drive letter, drive_or_unc will contain everything
    up to and including the colon.  e.g. splitdrive("c:/dir") returns ("c:", "/dir")

    If the path contained a UNC path, the drive_or_unc will contain the host name
    and share up to but not including the fourth directory separator character.
    e.g. splitdrive("//host/computer/dir") returns ("//host/computer", "/dir")

    Paths cannot contain both a drive letter and a UNC path.

    é   r5   r4   rB   r   r   rC   r   é   rD   Nr@   )r6   r7   rA   r.   r/   r8   Úfind)rN   r!   r$   rK   ÚnormpÚindexÚindex2r1   r1   r2   r   z   s.    

$c             C   s|   t  | ¡} t| }t| \}} t| }x |rF| |d  |krF|d8 }q(W | d| | |d  }}| |¡pn|}|| |fS )z~Split a pathname.

    Return tuple (head, tail) where tail is everything after the final slash.
    Either part may be empty.r@   N)r6   r7   r3   r   rA   Úrstrip)rN   rJ   ÚdÚiÚheadÚtailr1   r1   r2   r   ²   s    
c             C   s8   t  | ¡} t| tr$t | ddd¡S t | ddd¡S d S )Nr5   r4   ó   .r   r   r   )r6   r7   r.   r/   rG   Ú	_splitext)rN   r1   r1   r2   r   É   s    

c             C   s   t | d S )z)Returns the final component of a pathnamer@   )r   )rN   r1   r1   r2   r   Ô   s    c             C   s   t | d S )z-Returns the directory component of a pathnamer   )r   )rN   r1   r1   r2   r   Û   s    c          	   C   s4   yt  | ¡}W n ttfk
r&   dS X t |j¡S )zhTest whether a path is a symbolic link.
    This will always return false for Windows prior to 6.0.
    F)r6   ÚlstatÚOSErrorr;   ÚstatÚS_ISLNKÚst_mode)r0   Ústr1   r1   r2   r   â   s
    c             C   s(   yt  | ¡}W n tk
r"   dS X dS )zCTest whether a path exists.  Returns True for broken symbolic linksFT)r6   r^   r_   )r0   rc   r1   r1   r2   r   î   s
    )Ú_getvolumepathnamec             C   st   t  | ¡} t| }t| } t| \}}|rD|d |krD| pB||kS ||krPdS trl|  |¡t|  |¡kS dS dS )zaTest whether a path is a mount point (a drive root, the root of a
    share, or a mounted volume)r   TFN)r6   r7   r3   r   r   rd   rW   )r0   rJ   ÚrootÚrestr1   r1   r2   r     s    
c             C   s  t  | ¡} t| trd}nd}|  |¡s,| S dt|  }}x$||k r^| | t| kr^|d7 }q<W dt jkrvt jd }n\dt jkrt jd }nFdt jkr| S yt jd }W n tk
rÀ   d}Y nX t	|t jd }t| træt  
|¡}|dkrt	t|| d| }|| |d	  S )
zLExpand ~ and ~user constructs.

    If user or $HOME is unknown, do nothing.ó   ~ú~r@   ÚHOMEÚUSERPROFILEÚHOMEPATHÚ	HOMEDRIVEÚ N)r6   r7   r.   r/   Ú
startswithrA   r3   ÚenvironÚKeyErrorr
   Úfsencoder   )r0   ÚtilderY   ÚnÚuserhomeÚdriver1   r1   r2   r     s2    









c             C   s<  t  | ¡} t| trhd| kr(d| kr(| S ddl}t|j|j d d}d}d}d}d	}d}tt d
d}nFd| kr|d| kr|| S ddl}|j|j d }d}d}d}d}d}t j}| dd }	d}
t	| }xn|
|k r6| |
|
d  }||kr\| |
d d } t	| }y&|  
|¡}
|	|| d|
d   7 }	W n* tk
rV   |	||  7 }	|d }
Y nX nÐ||krN| |
d |
d  |kr|	|7 }	|
d7 }
n¸| |
d d } t	| }y|  
|¡}
W n* tk
râ   |	||  7 }	|d }
Y nhX | d|
 }y.|dkrt  t jt  |¡ ¡}n|| }W n" tk
r@   || | }Y nX |	|7 }	nÞ||kr$| |
d |
d  |kr|	|7 }	|
d7 }
q,| |
d |
d  |krb| |
d d } t	| }y|  
|¡}
W n. tk
rô   |	|| |  7 }	|d }
Y nlX | d|
 }y.|dkr&t  t jt  |¡ ¡}n|| }W n& tk
rV   || | | }Y nX |	|7 }	nÀ| dd }|
d7 }
| |
|
d  }x6|r¼||kr¼||7 }|
d7 }
| |
|
d  }qW y.|dkrât  t jt  |¡ ¡}n|| }W n tk
r
   || }Y nX |	|7 }	|r,|
d8 }
n|	|7 }	|
d7 }
qÊW |	S )zfExpand shell variables of the forms $var, ${var} and %var%.

    Unknown variables are left unchanged.ó   $ó   %r   Nz_-Úasciió   'ó   {ó   }Úenvironbú$ú%ú'Ú{Ú}r@   rQ   )r6   r7   r.   r/   ÚstringÚascii_lettersÚdigitsÚgetattrro   rA   rU   Ú
ValueErrorrq   Úfsdecoderp   )r0   r   ÚvarcharsÚquoteÚpercentÚbraceÚrbraceÚdollarro   ÚresrU   ÚpathlenÚcÚvarÚvaluer1   r1   r2   r   Q  s¼    











c       	      C   sT  t  | ¡} t| tr*d}d}d}d}d}nd}d}d}d	}d
}|  |¡rL| S |  ||¡} t| \}} |  |¡r||7 }|  |¡} |  |¡}d}x |t	|k r.|| r²|| |krº||= q|| |kr$|dkrü||d  |krü||d |d = |d8 }n&|dkr| 
|¡r||= n|d7 }q|d7 }qW |sF|sF| |¡ || |¡ S )z0Normalize path, eliminating double slashes, etc.r5   r4   r\   s   ..)s   \\.\s   \\?\r   r   r   z..)z\\.\z\\?\r   r@   )r6   r7   r.   r/   rn   r8   r   Úlstripr   rA   ÚendswithÚappendr
   )	r0   r!   r$   r   r    Úspecial_prefixesÚprefixÚcompsrY   r1   r1   r2   r   Â  sF    








c             C   s@   t  | ¡} t| s8t| tr&t  ¡ }nt  ¡ }t|| } t| S )z¤Return the absolute version of a path as a fallback function in case
    `nt._getfullpathname` is not available or raises OSError. See bpo-31047 for
    more.

    )	r6   r7   r	   r.   r/   ÚgetcwdbÚgetcwdr
   r   )r0   Úcwdr1   r1   r2   Ú_abspath_fallbackó  s    



r   )Ú_getfullpathnamec          	   C   s.   yt t| S  ttfk
r(   t| S X dS )z&Return the absolute version of a path.N)r   r   r_   r   r   )r0   r1   r1   r2   r     s    ÚgetwindowsversionrR   rQ   c             C   sd  t  | ¡} t| tr"d}d}d}nd}d}d}|dkr:|}| sFtdt  |¡}yÞtt|}tt| }t|\}}t|\}	}
t|t|	kr¢td	|	|f d
d | 	|¡D }dd |
 	|¡D }d}x0t
||D ]"\}}t|t|krôP |d7 }qÚW |gt||  ||d  }|s(|S t| S  tttttfk
r^   t d| |¡  Y nX dS )z#Return a relative version of a pathr5   r\   s   ..r   r   z..Nzno path specifiedz&path is on mount %r, start on mount %rc             S   s   g | ]}|r|qS r1   r1   )Ú.0Úxr1   r1   r2   ú
<listcomp>4  s    zrelpath.<locals>.<listcomp>c             S   s   g | ]}|r|qS r1   r1   )r   r    r1   r1   r2   r¡   5  s    r   r@   r)   )r6   r7   r.   r/   r   r   r   r   r   r   ÚziprA   r
   r:   r;   rF   ÚDeprecationWarningrG   rH   )r0   Ústartr!   r   r    Ú	start_absÚpath_absÚstart_driveÚ
start_restÚ
path_driveÚ	path_restÚ
start_listÚ	path_listrY   Úe1Úe2Úrel_listr1   r1   r2   r)     sF    


c          	      s´  | st dtttj| } t| d tr8dd dndd dy> fd	d
| D }fdd
|D }ytfdd|D \}W n t k
r¨   t ddY nX ttdd |D dkrÌt dt	| d  
 ¡\}}| ¡}fdd
|D }fdd
|D }t|}t|}xBt|D ]&\}	}
|
||	 kr,|d|	 }P q,W |dt| }|rt| n|}| |¡ S  ttfk
r®   tjd|    Y nX dS )zDGiven a sequence of path names, returns the longest common sub-path.z%commonpath() arg is an empty sequencer   r5   r4   r\   r   r   r   c                s    g | ]}t |  ¡ ¡ qS r1   )r   r8   r9   )r   rN   )r$   r!   r1   r2   r¡   a  s    zcommonpath.<locals>.<listcomp>c                s   g | ]\}}|   ¡qS r1   )r   )r   rX   rN   )r!   r1   r2   r¡   b  s    c             3   s"   | ]\}}|d d  kV  qd S )Nr@   r1   )r   rX   rN   )r!   r1   r2   ú	<genexpr>e  s    zcommonpath.<locals>.<genexpr>z%Can't mix absolute and relative pathsNc             s   s   | ]\}}|V  qd S )Nr1   )r   rX   rN   r1   r1   r2   r°   l  s    r@   zPaths don't have the same drivec                s   g | ]}|r| kr|qS r1   r1   )r   r   )r   r1   r2   r¡   q  s    c                s   g | ]} fd d|D qS )c                s   g | ]}|r| kr|qS r1   r1   )r   r   )r   r1   r2   r¡   s  s    z)commonpath.<locals>.<listcomp>.<listcomp>r1   )r   r?   )r   r1   r2   r¡   s  s    r-   )r-   )r   ÚtuplerE   r6   r7   r.   r/   ÚsetrA   r   r8   r   ÚminÚmaxÚ	enumerater
   r:   r;   rG   rH   )rI   ÚdrivesplitsÚsplit_pathsr	   ru   r0   ÚcommonÚs1Ús2rY   r   r   r1   )r$   r   r!   r2   r-   P  sF    
)é   r   )Ú_getfinalpathnamec             C   s   t t| S )N)r   r   )Úfr1   r1   r2   r¼     s    r¼   )Ú_isdir)N).Ú__doc__r   r    r%   r!   r"   r$   r#   r&   r6   Úsysr`   rG   Ú__all__r3   r   r	   r
   r   r   r   r]   r   r   r   r   Úntrd   ÚImportErrorr   r   r   r   r   r   r   r'   Úhasattrr   r(   r)   r-   r¼   r;   r¾   r   r1   r1   r1   r2   Ú<module>   sz   



/8

2q1

85ã            6   @   s(  d Z ddddddddd	d
dddddddddddddddddddddd d!d"d#d$d%d&d'd(d)d*d+d,d-d.d/d0d1d2d3d4d5d6g6Zd7d8lmZ d9d& Zd:d# Zd;d	 Zd<d+ Zd=d Z	d>d Z
d?d- Zd@d5 ZdAd ZdBd ZdCd ZdDd ZdEd ZdFd
 ZdGd ZdHd ZeZdId% ZdJd) ZdKd* ZdLd' ZdMd, ZdNd. ZdOd/ ZdPd0 ZdQd1 ZdRd3 ZdSd4 ZdTd6 Z dUd Z!dVd Z"dWd Z#dXd Z$dYd Z%dZd Z&d[d2 Z'dqd\d$Z(G d]d dZ)G d^d  d Z*G d_d( d(Z+d`d Z,dad Z-dbd Z.dcd Z/ddd Z0ded Z1dfd Z2dgd Z3dhd Z4did Z5djd Z6dkd Z7dld! Z8dmd" Z9yd7dnl:T W n e;k
rb   Y nX d7dol:m Z  eZ<eZ=eZ>eZ?e	Z@e
ZAeZBeZCeZDeZEeZFeZGeZHeZIeZJeZKeZLeZMeZNeZOeZPeZQeZReZSeZTe ZUe!ZVe"ZWe$ZXe%ZYe'ZZe,Z[e-Z\e.Z]e/Z^e0Z_e1Z`e2Zae3Zbe4Zce5Zde6Zee7Zfe8Zge9ZhdpS )ras  
Operator Interface

This module exports a set of functions corresponding to the intrinsic
operators of Python.  For example, operator.add(x, y) is equivalent
to the expression x+y.  The function names are those used for special
methods; variants without leading and trailing '__' are also provided
for convenience.

This is the pure Python implementation of the module.
ÚabsÚaddÚand_Ú
attrgetterÚconcatÚcontainsÚcountOfÚdelitemÚeqÚfloordivÚgeÚgetitemÚgtÚiaddÚiandÚiconcatÚ	ifloordivÚilshiftÚimatmulÚimodÚimulÚindexÚindexOfÚinvÚinvertÚiorÚipowÚirshiftÚis_Úis_notÚisubÚ
itemgetterÚitruedivÚixorÚleÚlength_hintÚlshiftÚltÚmatmulÚmethodcallerÚmodÚmulÚneÚnegÚnot_Úor_ÚposÚpowÚrshiftÚsetitemÚsubÚtruedivÚtruthÚxoré    )r   c             C   s   | |k S )zSame as a < b.© )ÚaÚbr8   r8   úD:\Python\lib\operator.pyr&      s    c             C   s   | |kS )zSame as a <= b.r8   )r9   r:   r8   r8   r;   r#      s    c             C   s   | |kS )zSame as a == b.r8   )r9   r:   r8   r8   r;   r	   #   s    c             C   s   | |kS )zSame as a != b.r8   )r9   r:   r8   r8   r;   r+   '   s    c             C   s   | |kS )zSame as a >= b.r8   )r9   r:   r8   r8   r;   r   +   s    c             C   s   | |kS )zSame as a > b.r8   )r9   r:   r8   r8   r;   r   /   s    c             C   s   |  S )zSame as not a.r8   )r9   r8   r8   r;   r-   5   s    c             C   s   | rdS dS )z*Return True if a is true, False otherwise.TFr8   )r9   r8   r8   r;   r5   9   s    c             C   s   | |kS )zSame as a is b.r8   )r9   r:   r8   r8   r;   r   =   s    c             C   s   | |k	S )zSame as a is not b.r8   )r9   r:   r8   r8   r;   r   A   s    c             C   s   t | S )zSame as abs(a).)Ú_abs)r9   r8   r8   r;   r   G   s    c             C   s   | | S )zSame as a + b.r8   )r9   r:   r8   r8   r;   r   K   s    c             C   s   | |@ S )zSame as a & b.r8   )r9   r:   r8   r8   r;   r   O   s    c             C   s   | | S )zSame as a // b.r8   )r9   r:   r8   r8   r;   r
   S   s    c             C   s   |   ¡ S )zSame as a.__index__().)Ú	__index__)r9   r8   r8   r;   r   W   s    c             C   s   |  S )zSame as ~a.r8   )r9   r8   r8   r;   r   [   s    c             C   s   | |> S )zSame as a << b.r8   )r9   r:   r8   r8   r;   r%   `   s    c             C   s   | | S )zSame as a % b.r8   )r9   r:   r8   r8   r;   r)   d   s    c             C   s   | | S )zSame as a * b.r8   )r9   r:   r8   r8   r;   r*   h   s    c             C   s   | | S )zSame as a @ b.r8   )r9   r:   r8   r8   r;   r'   l   s    c             C   s   |  S )zSame as -a.r8   )r9   r8   r8   r;   r,   p   s    c             C   s   | |B S )zSame as a | b.r8   )r9   r:   r8   r8   r;   r.   t   s    c             C   s   | 
 S )zSame as +a.r8   )r9   r8   r8   r;   r/   x   s    c             C   s   | | S )zSame as a ** b.r8   )r9   r:   r8   r8   r;   r0   |   s    c             C   s   | |? S )zSame as a >> b.r8   )r9   r:   r8   r8   r;   r1      s    c             C   s   | | S )zSame as a - b.r8   )r9   r:   r8   r8   r;   r3      s    c             C   s   | | S )zSame as a / b.r8   )r9   r:   r8   r8   r;   r4      s    c             C   s   | |A S )zSame as a ^ b.r8   )r9   r:   r8   r8   r;   r6      s    c             C   s(   t | ds dt| j }t|| | S )z%Same as a + b, for a and b sequences.Ú__getitem__z!'%s' object can't be concatenated)ÚhasattrÚtypeÚ__name__Ú	TypeError)r9   r:   Úmsgr8   r8   r;   r      s    
c             C   s   || kS )z(Same as b in a (note reversed operands).r8   )r9   r:   r8   r8   r;   r      s    c             C   s&   d}x| D ]}||kr
|d7 }q
W |S )z)Return the number of times b occurs in a.r7   é   r8   )r9   r:   ÚcountÚir8   r8   r;   r      s
    
c             C   s
   | |= dS )zSame as del a[b].Nr8   )r9   r:   r8   r8   r;   r   ¥   s    c             C   s   | | S )zSame as a[b].r8   )r9   r:   r8   r8   r;   r   ©   s    c             C   s.   x(t | D ]\}}||kr
|S q
W tddS )z!Return the first index of b in a.z$sequence.index(x): x not in sequenceN)Ú	enumerateÚ
ValueError)r9   r:   rF   Újr8   r8   r;   r   ­   s    c             C   s   || |< dS )zSame as a[b] = c.Nr8   )r9   r:   Úcr8   r8   r;   r2   µ   s    c             C   sÈ   t |ts dt|j }t|yt| S  tk
r<   Y nX yt| j}W n tk
r`   |S X y|| }W n tk
r   |S X |tkr|S t |ts°dt|j }t||dk rÄd}t	||S )a2  
    Return an estimate of the number of items in obj.
    This is useful for presizing containers when building from an iterable.

    If the object supports len(), the result will be exact. Otherwise, it may
    over- or under-estimate by an arbitrary amount. The result will be an
    integer >= 0.
    z/'%s' object cannot be interpreted as an integerz'__length_hint__ must be integer, not %sr7   z$__length_hint__() should return >= 0)
Ú
isinstanceÚintr@   rA   rB   ÚlenÚ__length_hint__ÚAttributeErrorÚNotImplementedrH   )ÚobjÚdefaultrC   ZhintÚvalr8   r8   r;   r$   ¹   s4    	

c               @   s4   e Zd ZdZdZdd Zdd Zdd Zd	d
 ZdS )r   aV  
    Return a callable object that fetches the given attribute(s) from its operand.
    After f = attrgetter('name'), the call f(r) returns r.name.
    After g = attrgetter('name', 'date'), the call g(r) returns (r.name, r.date).
    After h = attrgetter('name.first', 'name.last'), the call h(r) returns
    (r.name.first, r.name.last).
    )Ú_attrsÚ_callc                sn   |s<t |tstd|f| _| d¡fdd}|| _n.|f| | _ttt| j  fdd}|| _d S )Nzattribute name must be a stringÚ.c                s   x D ]}t | |} qW | S )N)Úgetattr)rQ   Úname)Únamesr8   r;   Úfuncò   s    
z!attrgetter.__init__.<locals>.funcc                s   t  fddD S )Nc             3   s   | ]}| V  qd S )Nr8   )Ú.0Úgetter)rQ   r8   r;   ú	<genexpr>û   s    z4attrgetter.__init__.<locals>.func.<locals>.<genexpr>)Útuple)rQ   )Úgetters)rQ   r;   rZ   ú   s    )	rK   ÚstrrB   rT   ÚsplitrU   r^   Úmapr   )ÚselfÚattrÚattrsrZ   r8   )r_   rY   r;   Ú__init__ì   s    

zattrgetter.__init__c             C   s
   |   |¡S )N)rU   )rc   rQ   r8   r8   r;   Ú__call__þ   s    zattrgetter.__call__c             C   s$   d| j j| j jd tt| j¡f S )Nz	%s.%s(%s)z, )Ú	__class__Ú
__module__Ú__qualname__Újoinrb   ÚreprrT   )rc   r8   r8   r;   Ú__repr__  s    zattrgetter.__repr__c             C   s   | j | jfS )N)rh   rT   )rc   r8   r8   r;   Ú
__reduce__  s    zattrgetter.__reduce__N)	rA   ri   rj   Ú__doc__Ú	__slots__rf   rg   rm   rn   r8   r8   r8   r;   r   â   s   c               @   s4   e Zd ZdZdZdd Zdd Zdd Zd	d
 ZdS )r    zØ
    Return a callable object that fetches the given item(s) from its operand.
    After f = itemgetter(2), the call f(r) returns r[2].
    After g = itemgetter(2, 5, 3), the call g(r) returns (r[2], r[5], r[3])
    )Ú_itemsrU   c                sF   s  f| _  fdd}|| _n" f  | _ fdd}|| _d S )Nc                s   |   S )Nr8   )rQ   )Úitemr8   r;   rZ     s    z!itemgetter.__init__.<locals>.funcc                s   t  fddD S )Nc             3   s   | ]} | V  qd S )Nr8   )r[   rF   )rQ   r8   r;   r]     s    z4itemgetter.__init__.<locals>.func.<locals>.<genexpr>)r^   )rQ   )Úitems)rQ   r;   rZ     s    )rq   rU   )rc   rr   rs   rZ   r8   )rr   rs   r;   rf     s    zitemgetter.__init__c             C   s
   |   |¡S )N)rU   )rc   rQ   r8   r8   r;   rg     s    zitemgetter.__call__c             C   s$   d| j j| j jd tt| j¡f S )Nz	%s.%s(%s)z, )rh   ri   rA   rk   rb   rl   rq   )rc   r8   r8   r;   rm      s    zitemgetter.__repr__c             C   s   | j | jfS )N)rh   rq   )rc   r8   r8   r;   rn   %  s    zitemgetter.__reduce__N)	rA   ri   rj   ro   rp   rf   rg   rm   rn   r8   r8   r8   r;   r    	  s   c               @   s4   e Zd ZdZdZdd Zdd Zdd Zd	d
 ZdS )r(   zö
    Return a callable object that calls the given method on its operand.
    After f = methodcaller('name'), the call f(r) returns r.name().
    After g = methodcaller('name', 'date', foo=1), the call g(r) returns
    r.name('date', foo=1).
    )Ú_nameÚ_argsÚ_kwargsc              O   sV   t | dk rd}t|| d }| d |_t|jts>td| dd  |_||_d S )Né   z9methodcaller needs at least one argument, the method namer7   rD   zmethod name must be a string)rM   rB   rt   rK   r`   ru   rv   )ÚargsÚkwargsrC   rc   r8   r8   r;   rf   1  s    
zmethodcaller.__init__c             C   s   t || j| j| jS )N)rW   rt   ru   rv   )rc   rQ   r8   r8   r;   rg   <  s    zmethodcaller.__call__c             C   sT   t | jg}| tt | j¡ | dd | j ¡ D ¡ d| jj| jj	d 
|¡f S )Nc             s   s   | ]\}}d ||f V  qdS )z%s=%rNr8   )r[   ÚkÚvr8   r8   r;   r]   B  s    z(methodcaller.__repr__.<locals>.<genexpr>z	%s.%s(%s)z, )rl   rt   Úextendrb   ru   rv   rs   rh   ri   rA   rk   )rc   rx   r8   r8   r;   rm   ?  s    zmethodcaller.__repr__c             C   sD   | j s| j| jf| j fS ddlm} || j| jf| j | jfS d S )Nr7   )Úpartial)rv   rh   rt   ru   Ú	functoolsr}   )rc   r}   r8   r8   r;   rn   G  s    zmethodcaller.__reduce__N)	rA   ri   rj   ro   rp   rf   rg   rm   rn   r8   r8   r8   r;   r(   (  s   c             C   s   | |7 } | S )zSame as a += b.r8   )r9   r:   r8   r8   r;   r   Q  s    c             C   s   | |M } | S )zSame as a &= b.r8   )r9   r:   r8   r8   r;   r   V  s    c             C   s,   t | ds dt| j }t|| |7 } | S )z&Same as a += b, for a and b sequences.r>   z!'%s' object can't be concatenated)r?   r@   rA   rB   )r9   r:   rC   r8   r8   r;   r   [  s
    
c             C   s   | | } | S )zSame as a //= b.r8   )r9   r:   r8   r8   r;   r   c  s    c             C   s   | |K } | S )zSame as a <<= b.r8   )r9   r:   r8   r8   r;   r   h  s    c             C   s   | |; } | S )zSame as a %= b.r8   )r9   r:   r8   r8   r;   r   m  s    c             C   s   | |9 } | S )zSame as a *= b.r8   )r9   r:   r8   r8   r;   r   r  s    c             C   s   | | } | S )zSame as a @= b.r8   )r9   r:   r8   r8   r;   r   w  s    c             C   s   | |O } | S )zSame as a |= b.r8   )r9   r:   r8   r8   r;   r   |  s    c             C   s   | |C } | S )zSame as a **= b.r8   )r9   r:   r8   r8   r;   r     s    c             C   s   | |L } | S )zSame as a >>= b.r8   )r9   r:   r8   r8   r;   r     s    c             C   s   | |8 } | S )zSame as a -= b.r8   )r9   r:   r8   r8   r;   r     s    c             C   s   | | } | S )zSame as a /= b.r8   )r9   r:   r8   r8   r;   r!     s    c             C   s   | |N } | S )zSame as a ^= b.r8   )r9   r:   r8   r8   r;   r"     s    )Ú*)ro   N)r7   )iro   Ú__all__Úbuiltinsr   r<   r&   r#   r	   r+   r   r   r-   r5   r   r   r   r   r
   r   r   r   r%   r)   r*   r'   r,   r.   r/   r0   r1   r3   r4   r6   r   r   r   r   r   r   r2   r$   r   r    r(   r   r   r   r   r   r   r   r   r   r   r   r   r!   r"   Ú	_operatorÚImportErrorÚ__lt__Ú__le__Ú__eq__Ú__ne__Ú__ge__Ú__gt__Ú__not__Ú__abs__Ú__add__Ú__and__Ú__floordiv__r=   Ú__inv__Ú
__invert__Ú
__lshift__Ú__mod__Ú__mul__Ú
__matmul__Ú__neg__Ú__or__Ú__pos__Ú__pow__Ú
__rshift__Ú__sub__Ú__truediv__Ú__xor__Ú
__concat__Ú__contains__Ú__delitem__r>   Ú__setitem__Ú__iadd__Ú__iand__Ú__iconcat__Ú__ifloordiv__Ú__ilshift__Ú__imod__Ú__imul__Ú__imatmul__Ú__ior__Ú__ipow__Ú__irshift__Ú__isub__Ú__itruediv__Ú__ixor__r8   r8   r8   r;   Ú<module>   sâ   
)')ã               @   sê  d Z ddlZddlZddlZejZddddddd	d
dddddddddddgZdd Zdd Z	dekrìdZ
dZddlT yddlmZ e d¡ W n ek
r¢   Y nX ddlZyddlmZ W n ek
rÐ   Y nX ddlZe e	e¡ [nd ekrd Z
d!ZddlT yddlmZ e d¡ W n ek
r6   Y nX ddlZddlZe e	e¡ [yddlmZ W n ek
r~   Y nX ned"eejd#< dd$lmZmZmZmZmZmZmZmZ [ed%r¾e  Z!d&d' Z"e# Z$e"d(d) e"d*d+ e"d,d- e"d.d/ e"d0d1 e"d2d3 e"d4d5 e"d6d7 e"d8d9 e"d:d; e"d<d= e"d>d? e"d@dA e"dBdC e"dBdD e"dEd1 e$Z%e# Z$e"d(d) e$Z&e# Z$e"dFdG e"dHd+ e"dId- e"dJdK e"dJdL e"dMdN e$ 'e¡ e"dOdP e"dQd1 e"dRd1 e"dSdT edUr&edVr&e"dWdU e$Z(e# Z$e"d(d) e"d,d- e"d.d/ e"dXdY e"dZd+ ed[rve"d\d- e"d2d3 e"d]d1 e"d^d/ e"d.d/ e"dEd1 e"d_d/ e$Z)[$[[!["dZ*d`Z+daZ,d¸dddeZ-dfdg Z.dhdi Z/e dedgdig¡ d¹dkdlZ0e dl¡ e1ehe%krHe2ehe(krHdºdcddndodpZ3dqdr Z4e dp¡ ye5 W n e6k
rj   i Z5Y nX dsdt Z7dudv Z8dwdx Z9dydz Z:d{d| Z;d}d~ Z<e dtdvdxdzd|d~g¡ d»ddZ=d¼ddZ>ddl?m@Z@ G dd de@ZAyeBZCW n e6k
r   dd ZCY nX dekre d¡ yeDZEW n e6k
rD   dd ZEY nX dekrZe d¡ dd ZFeF Z5[Fd½ddZGe
d kZHe d¡ eHrÀdd ZIeAe5jJeIeKeIeKeCeEZL[Id¾ddZMe d¡ dd ZNeN \ZOZP[NedrHedsHedrHdZQd` ZRZSe dddg¡ dd ZTdd ZUdd  ZVd¡d¢ ZWd£d¤ ZXe dd d¢d¤g¡ edrpd¥d¦ ZYd§d¨ ZZe d¦d¨g¡ ed¢rd©dª Z[d«d¬ Z\e dªd¬g¡ d¿d¯dZ]G d°d± d±Z^d²d Z_d³d´ Z`edµsÔe`Zadµea_bG d¶d· d·ejcZddS )ÀaN  OS routines for NT or Posix depending on what system we're on.

This exports:
  - all functions from posix or nt, e.g. unlink, stat, etc.
  - os.path is either posixpath or ntpath
  - os.name is either 'posix' or 'nt'
  - os.curdir is a string representing the current directory (always '.')
  - os.pardir is a string representing the parent directory (always '..')
  - os.sep is the (or a most common) pathname separator ('/' or '\\')
  - os.extsep is the extension separator (always '.')
  - os.altsep is the alternate pathname separator (None or '/')
  - os.pathsep is the component separator used in $PATH etc
  - os.linesep is the line separator in text files ('\r' or '\n' or '\r\n')
  - os.defpath is the default search path for executables
  - os.devnull is the file path of the null device ('/dev/null', etc.)

Programs that import and use 'os' stand a better chance of being
portable between different platforms.  Of course, they must then
only use functions that are defined by all platforms (e.g., unlink
and opendir), and leave all pathname manipulation to os.path
(e.g., split and join).
é    NÚaltsepÚcurdirÚpardirÚsepÚpathsepÚlinesepÚdefpathÚnameÚpathÚdevnullÚSEEK_SETÚSEEK_CURÚSEEK_ENDÚfsencodeÚfsdecodeÚget_exec_pathÚfdopenÚpopenÚextsepc             C   s
   | t  kS )N)Úglobals)r	   © r   úD:\Python\lib\os.pyÚ_exists%   s    r   c             C   s2   y
t | jS  tk
r,   dd t| D S X d S )Nc             S   s   g | ]}|d  dkr|qS )r   Ú_r   )Ú.0Únr   r   r   ú
<listcomp>,   s    z%_get_exports_list.<locals>.<listcomp>)ÚlistÚ__all__ÚAttributeErrorÚdir)Úmoduler   r   r   Ú_get_exports_list(   s    
r"   ÚposixÚ
)Ú*)Ú_exitr&   )Ú_have_functionsÚntz
zno os specific module foundzos.path)r   r   r   r   r   r   r   r   r'   c             C   s"   |t kr| tkrt t | ¡ d S )N)Ú_globalsr'   Ú_setÚadd)ÚstrÚfnr   r   r   Ú_addd   s    r.   ZHAVE_FACCESSATÚaccessZHAVE_FCHMODATÚchmodZHAVE_FCHOWNATÚchownZHAVE_FSTATATÚstatZHAVE_FUTIMESATÚutimeZHAVE_LINKATÚlinkZHAVE_MKDIRATÚmkdirZHAVE_MKFIFOATZmkfifoZHAVE_MKNODATZmknodZHAVE_OPENATÚopenZHAVE_READLINKATÚreadlinkZHAVE_RENAMEATÚrenameZHAVE_SYMLINKATÚsymlinkZHAVE_UNLINKATÚunlinkÚrmdirZHAVE_UTIMENSATZHAVE_FCHDIRÚchdirZHAVE_FCHMODZHAVE_FCHOWNZHAVE_FDOPENDIRÚlistdirÚscandirZHAVE_FEXECVEÚexecveZHAVE_FTRUNCATEÚtruncateZHAVE_FUTIMENSZHAVE_FUTIMESZHAVE_FPATHCONFZpathconfZstatvfsZfstatvfsZHAVE_FSTATVFSZHAVE_LCHFLAGSÚchflagsZHAVE_LCHMODZlchownZHAVE_LCHOWNZHAVE_LUTIMESZ
HAVE_LSTATZ
MS_WINDOWSé   é   éÿ  Fc             C   s´   t  | ¡\}}|s t  |¡\}}|r||r|t  |¡s|yt||d W n tk
rV   Y nX t}t|trpttd}||kr|dS yt| | W n$ t	k
r®   |r¨t  
| ¡sª Y nX dS )a  makedirs(name [, mode=0o777][, exist_ok=False])

    Super-mkdir; create a leaf directory and all intermediate ones.  Works like
    mkdir, except that any intermediate path segment (not just the rightmost)
    will be created if it does not exist. If the target directory already
    exists, raise an OSError if exist_ok is False. Otherwise no exception is
    raised.  This is recursive.

    )Úexist_okÚASCIIN)r
   ÚsplitÚexistsÚmakedirsÚFileExistsErrorr   Ú
isinstanceÚbytesr5   ÚOSErrorÚisdir)r	   ÚmoderE   ÚheadÚtailÚcdirr   r   r   rI   Ä   s$    


rI   c             C   sl   t |  t | ¡\}}|s(t |¡\}}x>|rf|rfyt | W n tk
rT   P Y nX t |¡\}}q*W dS )a¬  removedirs(name)

    Super-rmdir; remove a leaf directory and all empty intermediate
    ones.  Works like rmdir except that, if the leaf directory is
    successfully removed, directories corresponding to rightmost path
    segments will be pruned away until either the whole path is
    consumed or an error occurs.  Errors during this latter phase are
    ignored -- they generally mean that a directory was not empty.

    N)r;   r
   rG   rM   )r	   rP   rQ   r   r   r   Ú
removedirsä   s    
rS   c             C   sn   t  |¡\}}|r(|r(t  |¡s(t| t| | t  | ¡\}}|rj|rjyt| W n tk
rh   Y nX dS )a<  renames(old, new)

    Super-rename; create directories as necessary and delete any left
    empty.  Works like rename, except creation of any intermediate
    directories needed to make the new pathname good is attempted
    first.  After the rename, directories corresponding to rightmost
    path segments of the old name will be pruned until either the
    whole path is consumed or a nonempty directory is found.

    Note: this function can fail with the new directory structure made
    if you lack permissions needed to unlink the leaf directory or
    file.

    N)r
   rG   rH   rI   r8   rS   rM   )ÚoldÚnewrP   rQ   r   r   r   Úrenamesú   s    
rV   Tc             c   sô  t | } g }g }g }yt| }W n2 tk
rR } z|dk	rB|| dS d}~X Y nX |   xöy(yt|}	W n tk
r   P Y nX W n2 tk
rº } z|dk	rª|| dS d}~X Y nX y|	 ¡ }
W n tk
rà   d}
Y nX |
rô| |	j¡ n| |	j¡ |s`|
r`|rd}n.y|	 ¡ }W n tk
r:   d}Y nX | }|r`| |	j	¡ q`W W dQ R X |rÀ| ||fV  t	j
t	j }}xn|D ]4}|| |}|s¤||st||||E dH  qW n0x"|D ]}t||||E dH  qÆW | ||fV  dS )aã
  Directory tree generator.

    For each directory in the directory tree rooted at top (including top
    itself, but excluding '.' and '..'), yields a 3-tuple

        dirpath, dirnames, filenames

    dirpath is a string, the path to the directory.  dirnames is a list of
    the names of the subdirectories in dirpath (excluding '.' and '..').
    filenames is a list of the names of the non-directory files in dirpath.
    Note that the names in the lists are just names, with no path components.
    To get a full path (which begins with top) to a file or directory in
    dirpath, do os.path.join(dirpath, name).

    If optional arg 'topdown' is true or not specified, the triple for a
    directory is generated before the triples for any of its subdirectories
    (directories are generated top down).  If topdown is false, the triple
    for a directory is generated after the triples for all of its
    subdirectories (directories are generated bottom up).

    When topdown is true, the caller can modify the dirnames list in-place
    (e.g., via del or slice assignment), and walk will only recurse into the
    subdirectories whose names remain in dirnames; this can be used to prune the
    search, or to impose a specific order of visiting.  Modifying dirnames when
    topdown is false is ineffective, since the directories in dirnames have
    already been generated by the time dirnames itself is generated. No matter
    the value of topdown, the list of subdirectories is retrieved before the
    tuples for the directory and its subdirectories are generated.

    By default errors from the os.scandir() call are ignored.  If
    optional arg 'onerror' is specified, it should be a function; it
    will be called with one argument, an OSError instance.  It can
    report the error to continue with the walk, or raise the exception
    to abort the walk.  Note that the filename is available as the
    filename attribute of the exception object.

    By default, os.walk does not follow symbolic links to subdirectories on
    systems that support them.  In order to get this functionality, set the
    optional argument 'followlinks' to true.

    Caution:  if you pass a relative pathname for top, don't change the
    current working directory between resumptions of walk.  walk never
    changes the current directory, and assumes that the client doesn't
    either.

    Example:

    import os
    from os.path import join, getsize
    for root, dirs, files in os.walk('python/Lib/email'):
        print(root, "consumes", end="")
        print(sum([getsize(join(root, name)) for name in files]), end="")
        print("bytes in", len(files), "non-directory files")
        if 'CVS' in dirs:
            dirs.remove('CVS')  # don't visit CVS directories

    NFT)Úfspathr>   rM   ÚnextÚStopIterationÚis_dirÚappendr	   Ú
is_symlinkr
   ÚislinkÚjoinÚwalk)ÚtopÚtopdownÚonerrorÚfollowlinksÚdirsÚnondirsÚ	walk_dirsÚ
scandir_itÚerrorÚentryrZ   Ú	walk_intor\   r]   r^   ÚdirnameÚnew_pathr   r   r   r_     s`    :




r_   Ú.)Úfollow_symlinksÚdir_fdc            c   s   t | trt| dst| } |s.t| d|d}t| t|d}zB|s^t |j	¡r|t
 |t|¡r|t|| t | t|||E dH  W dt| X dS )a  Directory tree generator.

        This behaves exactly like walk(), except that it yields a 4-tuple

            dirpath, dirnames, filenames, dirfd

        `dirpath`, `dirnames` and `filenames` are identical to walk() output,
        and `dirfd` is a file descriptor referring to the directory `dirpath`.

        The advantage of fwalk() over walk() is that it's safe against symlink
        races (when follow_symlinks is False).

        If dir_fd is not None, it should be a file descriptor open to a directory,
          and top should be relative; top will then be relative to that directory.
          (dir_fd is always supported for fwalk.)

        Caution:
        Since fwalk() yields file descriptors, those are only valid until the
        next iteration step, so you should dup() them if you want to keep them
        for a longer period.

        Example:

        import os
        for root, dirs, files, rootfd in os.fwalk('python/Lib/email'):
            print(root, "consumes", end="")
            print(sum([os.stat(name, dir_fd=rootfd).st_size for name in files]),
                  end="")
            print("bytes in", len(files), "non-directory files")
            if 'CVS' in dirs:
                dirs.remove('CVS')  # don't visit CVS directories
        Ú	__index__F)rn   ro   )ro   N)rK   ÚintÚhasattrrW   r2   r6   ÚO_RDONLYÚstÚS_ISDIRÚst_moder
   ÚsamestatÚ_fwalkrL   Úclose)r`   ra   rb   rn   ro   Úorig_stÚtopfdr   r   r   Úfwalk¦  s    !r|   c             c   sÖ  t | }g }g }|s|rd ng }	x|D ]}
|
j}|r<t|}y4|
 ¡ rd| |¡ |	d k	rn|	 |
¡ n
| |¡ W q& tk
r°   y|
 ¡ r| |¡ W n tk
rª   Y nX Y q&X q&W |rÈ|||| fV  xô|	d krÖ|nt||	D ]Ú}yP|s$|rt|| dd}n"|	d k	st	|\}}
|
jdd}t
|t| d}W n8 tk
rl } z|d k	rZ|| wàW d d }~X Y nX z@|st |t|¡r¬t ||¡}t||||||E d H  W d t| X qàW |sÒ|||| fV  d S )NF)ro   rn   )rn   )ro   )r>   r	   r   rZ   r[   rM   r\   Úzipr2   ÚAssertionErrorr6   rs   r
   rw   r^   rx   ry   )r{   ZtoppathZisbytesra   rb   rn   rg   rd   re   Úentriesri   r	   rz   ÚdirfdÚerrÚdirpathr   r   r   rx   Ö  sV    


rx   c             G   s   t | | dS )zpexecl(file, *args)

    Execute the executable file with argument list args, replacing the
    current process. N)Úexecv)ÚfileÚargsr   r   r   Úexecl  s    r   c             G   s    |d }t | |dd | dS )zexecle(file, *args, env)

    Execute the executable file with argument list args and
    environment env, replacing the current process. éÿÿÿÿN)r?   )r   r   Úenvr   r   r   Úexecle  s    r   c             G   s   t | | dS )zexeclp(file, *args)

    Execute the executable file (which is searched for along $PATH)
    with argument list args, replacing the current process. N)Úexecvp)r   r   r   r   r   Úexeclp%  s    r   c             G   s    |d }t | |dd | dS )z³execlpe(file, *args, env)

    Execute the executable file (which is searched for along $PATH)
    with argument list args and environment env, replacing the current
    process. r   N)Úexecvpe)r   r   r   r   r   r   Úexeclpe,  s    r   c             C   s   t | | dS )zÀexecvp(file, args)

    Execute the executable file (which is searched for along $PATH)
    with argument list args, replacing the current process.
    args may be a list or tuple of strings. N)Ú_execvpe)r   r   r   r   r   r   5  s    r   c             C   s   t | || dS )zßexecvpe(file, args, env)

    Execute the executable file (which is searched for along $PATH)
    with argument list args and environment env , replacing the
    current process.
    args may be a list or tuple of strings. N)r   )r   r   r   r   r   r   r   =  s    r   c             C   s  |d k	rt }||f}nt}|f}t}t | ¡r@|| f|  d S d }t|}tdkrft| } tt|}x|D ]~}t 	|| ¡}y||f|  W ql t
tfk
r¸ }	 z|	}
W d d }	~	X Y ql tk
rè }	 z|	}
|d krØ|	}W d d }	~	X Y qlX qlW |d k	rú||
d S )Nr(   )r?   r   Úenvironr
   rk   r   r	   r   Úmapr^   ÚFileNotFoundErrorÚNotADirectoryErrorrM   )r   r   r   Ú	exec_funcÚargrestÚ	saved_excÚ	path_listr    ÚfullnameÚeÚlast_excr   r   r   r   H  s6    



r   c          
   C   sÊ   ddl }| dkrt} | ¡  | dt¡ y|  d¡}W n tk
rP   d}Y nX trªy| d }W n ttfk
rz   Y nX |dk	rt	d|}|dk	rªt
|trªt|}W dQ R X |dkrÀt}| t¡S )zóReturns the sequence of directories that will be searched for the
    named executable (similar to a shell) when launching a process.

    *env* must be an environment variable dict or None.  If *env* is None,
    os.environ will be used.
    r   NÚignoreÚPATHs   PATHz*env cannot contain 'PATH' and b'PATH' keys)Úwarningsr   Úcatch_warningsÚsimplefilterÚBytesWarningÚgetÚ	TypeErrorÚsupports_bytes_environÚKeyErrorÚ
ValueErrorrK   rL   r   r   rG   r   )r   r   r   Ú
path_listbr   r   r   r   h  s.    


)ÚMutableMappingc               @   sT   e Zd Zdd Zdd Zdd Zdd Zd	d
 Zdd Zdd Z	dd Z
dd ZdS )Ú_Environc             C   s.   || _ || _|| _|| _|| _|| _|| _d S )N)Ú	encodekeyÚ	decodekeyÚencodevalueÚdecodevalueÚputenvÚunsetenvÚ_data)ÚselfÚdatar¨   r©   rª   r«   r¬   r­   r   r   r   Ú__init__  s    z_Environ.__init__c             C   s>   y| j |  |¡ }W n tk
r2   t|d Y nX |  |¡S )N)r®   r¨   r£   r«   )r¯   ÚkeyÚvaluer   r   r   Ú__getitem__¡  s
    z_Environ.__getitem__c             C   s.   |   |¡}|  |¡}|  ||¡ || j|< d S )N)r¨   rª   r¬   r®   )r¯   r²   r³   r   r   r   Ú__setitem__©  s    

z_Environ.__setitem__c             C   sD   |   |¡}|  |¡ y| j|= W n tk
r>   t|d Y nX d S )N)r¨   r­   r®   r£   )r¯   r²   Ú
encodedkeyr   r   r   Ú__delitem__¯  s    

z_Environ.__delitem__c             c   s(   t | j}x|D ]}|  |¡V  qW d S )N)r   r®   r©   )r¯   Úkeysr²   r   r   r   Ú__iter__¸  s    

z_Environ.__iter__c             C   s
   t | jS )N)Úlenr®   )r¯   r   r   r   Ú__len__¾  s    z_Environ.__len__c                s$   d  d  fdd j ¡ D ¡¡S )Nzenviron({{{}}})z, c             3   s*   | ]"\}}d     |¡  |¡¡V  qdS )z
{!r}: {!r}N)Úformatr©   r«   )r   r²   r³   )r¯   r   r   ú	<genexpr>Ã  s   z$_Environ.__repr__.<locals>.<genexpr>)r¼   r^   r®   Úitems)r¯   r   )r¯   r   Ú__repr__Á  s    
z_Environ.__repr__c             C   s   t | S )N)Údict)r¯   r   r   r   ÚcopyÆ  s    z_Environ.copyc             C   s   || kr|| |< | | S )Nr   )r¯   r²   r³   r   r   r   Ú
setdefaultÉ  s    z_Environ.setdefaultN)Ú__name__Ú
__module__Ú__qualname__r±   r´   rµ   r·   r¹   r»   r¿   rÁ   rÂ   r   r   r   r   r§     s   		r§   c             C   s   d S )Nr   )r²   r³   r   r   r   Ú<lambda>Ñ  ó    rÆ   r¬   c             C   s
   t | dS )NÚ )Ú_putenv)r²   r   r   r   rÆ   Ù  rÇ   r­   c                 s   t dkrLdd } |  t} fdd}i }xJt ¡ D ]\}}||||< q2W n(t ¡ fdd fdd	} }t}t||| |ttS )
Nr(   c             S   s    t | tstdt| j | S )Nzstr expected, not %s)rK   r,   r¡   ÚtyperÃ   )r³   r   r   r   Ú	check_strá  s    
z!_createenviron.<locals>.check_strc                s    |   ¡ S )N)Úupper)r²   )Úencoder   r   r¨   ç  s    z!_createenviron.<locals>.encodekeyc                s(   t | tstdt| j |   d¡S )Nzstr expected, not %sÚsurrogateescape)rK   r,   r¡   rÊ   rÃ   rÍ   )r³   )Úencodingr   r   rÍ   ï  s    
z_createenviron.<locals>.encodec                s   |    d¡S )NrÎ   )Údecode)r³   )rÏ   r   r   rÐ   ó  s    z_createenviron.<locals>.decode)	r	   r,   r   r¾   ÚsysÚgetfilesystemencodingr§   rÉ   Ú	_unsetenv)rË   rÐ   r¨   r°   r²   r³   r   )rÍ   rÏ   r   Ú_createenvironÞ  s"    rÔ   c             C   s   t  | |¡S )z©Get an environment variable, return None if it doesn't exist.
    The optional second argument can specify an alternate default.
    key, default and the result are str.)r   r    )r²   Údefaultr   r   r   Úgetenv  s    rÖ   )rÖ   r¢   c             C   s    t | tstdt| j | S )Nzbytes expected, not %s)rK   rL   r¡   rÊ   rÃ   )r³   r   r   r   Ú_check_bytes  s    
r×   c             C   s   t  | |¡S )z³Get an environment variable, return None if it doesn't exist.
        The optional second argument can specify an alternate default.
        key, default and the result are bytes.)Úenvironbr    )r²   rÕ   r   r   r   Úgetenvb  s    rÙ   )rØ   rÙ   c                 s4   t  ¡  t  ¡  fdd}  fdd}| |fS )Nc                s&   t | } t| tr|   ¡S | S dS )a  Encode filename (an os.PathLike, bytes, or str) to the filesystem
        encoding with 'surrogateescape' error handler, return bytes unchanged.
        On Windows, use 'strict' error handler if the file system encoding is
        'mbcs' (which is the default encoding).
        N)rW   rK   r,   rÍ   )Úfilename)rÏ   Úerrorsr   r   r   #  s    
z_fscodec.<locals>.fsencodec                s&   t | } t| tr|   ¡S | S dS )a  Decode filename (an os.PathLike, bytes, or str) from the filesystem
        encoding with 'surrogateescape' error handler, return str unchanged. On
        Windows, use 'strict' error handler if the file system encoding is
        'mbcs' (which is the default encoding).
        N)rW   rK   rL   rÐ   )rÚ   )rÏ   rÛ   r   r   r   /  s    
z_fscodec.<locals>.fsdecode)rÑ   rÒ   Úgetfilesystemencodeerrors)r   r   r   )rÏ   rÛ   r   Ú_fscodec  s
    rÝ   ÚforkÚspawnvr   ÚP_WAITÚP_NOWAITÚ	P_NOWAITOc             C   sÊ   t |ttfstd|r"|d s*tdt }|spy$|d krJ||| n|||| W qÆ   td Y qÆX nV| tkr||S xHt|d\}}t	|rq~q~t
|rªt| S t|rºt|S tdq~W d S )Nzargv must be a tuple or a listr   z"argv first element cannot be emptyé   z"Not stopped, signaled or exited???)rK   Útupler   r¡   r¤   rÞ   r&   rá   ÚwaitpidZ
WIFSTOPPEDZWIFSIGNALEDZWTERMSIGZ	WIFEXITEDZWEXITSTATUSrM   )rO   r   r   r   ÚfuncÚpidZwpidÚstsr   r   r   Ú	_spawnvefL  s.    
ré   c             C   s   t | ||dtS )a  spawnv(mode, file, args) -> integer

Execute file with arguments from args in a subprocess.
If mode == P_NOWAIT return the pid of the process.
If mode == P_WAIT return the process's exit code if it exits normally;
otherwise return -SIG, where SIG is the signal that killed it. N)ré   r   )rO   r   r   r   r   r   rß   k  s    c             C   s   t | |||tS )a:  spawnve(mode, file, args, env) -> integer

Execute file with arguments from args in a subprocess with the
specified environment.
If mode == P_NOWAIT return the pid of the process.
If mode == P_WAIT return the process's exit code if it exits normally;
otherwise return -SIG, where SIG is the signal that killed it. )ré   r?   )rO   r   r   r   r   r   r   Úspawnvet  s    rê   c             C   s   t | ||dtS )a8  spawnvp(mode, file, args) -> integer

Execute file (which is looked for along $PATH) with arguments from
args in a subprocess.
If mode == P_NOWAIT return the pid of the process.
If mode == P_WAIT return the process's exit code if it exits normally;
otherwise return -SIG, where SIG is the signal that killed it. N)ré   r   )rO   r   r   r   r   r   Úspawnvp  s    rë   c             C   s   t | |||tS )a\  spawnvpe(mode, file, args, env) -> integer

Execute file (which is looked for along $PATH) with arguments from
args in a subprocess with the supplied environment.
If mode == P_NOWAIT return the pid of the process.
If mode == P_WAIT return the process's exit code if it exits normally;
otherwise return -SIG, where SIG is the signal that killed it. )ré   r   )rO   r   r   r   r   r   r   Úspawnvpe  s    rì   c             G   s   t | ||S )a  spawnl(mode, file, *args) -> integer

Execute file with arguments from args in a subprocess.
If mode == P_NOWAIT return the pid of the process.
If mode == P_WAIT return the process's exit code if it exits normally;
otherwise return -SIG, where SIG is the signal that killed it. )rß   )rO   r   r   r   r   r   Úspawnl  s    rí   c             G   s   |d }t | ||dd |S )a:  spawnle(mode, file, *args, env) -> integer

Execute file with arguments from args in a subprocess with the
supplied environment.
If mode == P_NOWAIT return the pid of the process.
If mode == P_WAIT return the process's exit code if it exits normally;
otherwise return -SIG, where SIG is the signal that killed it. r   N)rê   )rO   r   r   r   r   r   r   Úspawnle¥  s    rî   c             G   s   t | ||S )aW  spawnlp(mode, file, *args) -> integer

Execute file (which is looked for along $PATH) with arguments from
args in a subprocess with the supplied environment.
If mode == P_NOWAIT return the pid of the process.
If mode == P_WAIT return the process's exit code if it exits normally;
otherwise return -SIG, where SIG is the signal that killed it. )rë   )rO   r   r   r   r   r   Úspawnlp·  s    rï   c             G   s   |d }t | ||dd |S )a]  spawnlpe(mode, file, *args, env) -> integer

Execute file (which is looked for along $PATH) with arguments from
args in a subprocess with the supplied environment.
If mode == P_NOWAIT return the pid of the process.
If mode == P_WAIT return the process's exit code if it exits normally;
otherwise return -SIG, where SIG is the signal that killed it. r   N)rì   )rO   r   r   r   r   r   r   ÚspawnlpeÁ  s    rð   Úrr   c             C   s®   t | tstdt|  |dkr.td| |dks>|d krFtddd l}dd l}|dkr|j| d|j|d}t	| 
|j¡|S |j| d|j|d	}t	| 
|j¡|S d S )
Nz&invalid cmd type (%s, expected string))rñ   Úwzinvalid mode %rr   z+popen() does not support unbuffered streamsrñ   T)ÚshellÚstdoutÚbufsize)ró   Ústdinrõ   )rK   r,   r¡   rÊ   r¤   Ú
subprocessÚioÚPopenÚPIPEÚ_wrap_closeÚTextIOWrapperrô   rö   )ÚcmdrO   Ú	bufferingr÷   rø   Úprocr   r   r   r   Ñ  s$    
c               @   s<   e Zd Zdd Zdd Zdd Zdd Zd	d
 Zdd ZdS )rû   c             C   s   || _ || _d S )N)Ú_streamÚ_proc)r¯   Ústreamrÿ   r   r   r   r±   è  s    z_wrap_close.__init__c             C   s8   | j  ¡  | j ¡ }|dkr d S tdkr,|S |d> S d S )Nr   r(   é   )r   ry   r  Úwaitr	   )r¯   Ú
returncoder   r   r   ry   ë  s    

z_wrap_close.closec             C   s   | S )Nr   )r¯   r   r   r   Ú	__enter__ô  s    z_wrap_close.__enter__c             G   s   |   ¡  d S )N)ry   )r¯   r   r   r   r   Ú__exit__ö  s    z_wrap_close.__exit__c             C   s   t | j|S )N)Úgetattrr   )r¯   r	   r   r   r   Ú__getattr__ø  s    z_wrap_close.__getattr__c             C   s
   t | jS )N)Úiterr   )r¯   r   r   r   r¹   ú  s    z_wrap_close.__iter__N)	rÃ   rÄ   rÅ   r±   ry   r  r  r	  r¹   r   r   r   r   rû   ç  s   	rû   c             O   s4   t | tstdt|  dd l}|j| f||S )Nz&invalid fd type (%s, expected integer)r   )rK   rq   r¡   rÊ   rø   r6   )Úfdr   Úkwargsrø   r   r   r   r   þ  s    
c             C   s   t | ttfr| S t| }y| | ¡}W n0 tk
rX   t|drF ntd|j Y nX t |ttfrl|S td 	|jt|j¡dS )aa  Return the path representation of a path-like object.

    If str or bytes is passed in, it is returned unchanged. Otherwise the
    os.PathLike interface is used to get the path representation. If the
    path representation is not str or bytes, TypeError is raised. If the
    provided path is not str, bytes, or os.PathLike, TypeError is raised.
    Ú
__fspath__z/expected str, bytes or os.PathLike object, not z7expected {}.__fspath__() to return str or bytes, not {}N)
rK   r,   rL   rÊ   r  r   rr   r¡   rÃ   r¼   )r
   Ú	path_typeÚ	path_reprr   r   r   Ú_fspath  s    
r  rW   c               @   s*   e Zd ZdZejdd Zedd ZdS )ÚPathLikezCAbstract base class for implementing the file system path protocol.c             C   s   t dS )z9Return the file system path representation of the object.N)ÚNotImplementedError)r¯   r   r   r   r  /  s    zPathLike.__fspath__c             C   s
   t |dS )Nr  )rr   )ÚclsÚsubclassr   r   r   Ú__subclasshook__4  s    zPathLike.__subclasshook__N)	rÃ   rÄ   rÅ   Ú__doc__ÚabcÚabstractmethodr  Úclassmethodr  r   r   r   r   r  +  s   r  )rD   F)TNF)rm   TN)N)N)N)N)rñ   r   )er  r  rÑ   r2   rt   Úbuiltin_module_namesZ_namesr   r   r"   r	   r   r#   r&   r[   ÚImportErrorÚ	posixpathr
   r'   Úextendr(   ÚntpathÚmodulesZos.pathr   r   r   r   r   r   r   r   r   r)   r.   Úsetr*   Úsupports_dir_fdÚsupports_effective_idsr+   Úsupports_fdÚsupports_follow_symlinksr   r   r   rI   rS   rV   r_   r6   r>   r|   rx   r   Ú	NameErrorr   r   r   r   r   r   r   r   Ú_collections_abcr¦   r§   r¬   rÉ   r­   rÓ   rÔ   rÖ   r¢   r×   r®   rL   rØ   rÙ   rÝ   r   r   rà   rá   râ   ré   rß   rê   rë   rì   rí   rî   rï   rð   r   rû   r   r  rW   rÃ   ÚABCr  r   r   r   r   Ú<module>   s~  


(











































 
 
08

		
 
-7








	

	


	
ã               @   s´   d Z ddddgZdZdZdZdZyd	d
lmZmZ W n e	k
rP   dZdZY nX dd Z
dd ZdddZdddZdddZdddZdd Zdd Zdd Zedkr°e  dS ) zHConversions to/from quoted-printable transport encoding as per RFC 1521.ÚencodeÚdecodeÚencodestringÚdecodestringó   =éL   s   0123456789ABCDEFó    é    )Úa2b_qpÚb2a_qpNc             C   sH   t | tst| dkr|S | dkr&|S | tkpFd|   ko@dkn   S )zìDecide whether a particular byte ordinal needs to be quoted.

    The 'quotetabs' flag indicates whether embedded tabs and spaces should be
    quoted.  Note that line-ending tabs and spaces are always encoded, as per
    RFC 1521.
    s    	ó   _ó    ó   ~)Ú
isinstanceÚbytesÚAssertionErrorÚESCAPE)ÚcÚ	quotetabsÚheader© r   úD:\Python\lib\quopri.pyÚneedsquoting   s    r   c             C   sB   t | trt| dkstt| } ttt| d  t| d  f S )zQuote a single character.é   é   )r   r   Úlenr   Úordr   ÚHEX)r   r   r   r   Úquote$   s    r   Fc             C   s<  t dk	r,|  ¡ }t |||d}| |¡ dS |dfdd}d}xâ|  ¡ }|sNP g }	d}
|dd dkrv|dd }d}
xL|D ]D}t|f}t|||rt|}|r¶|dkr¶|	 d	¡ q||	 |¡ q|W |dk	rÔ|| t 	|	¡}x:t
|tkr||dtd
  dd |td
 d }qàW |}q@W |dk	r8|||
d dS )av  Read 'input', apply quoted-printable encoding, and write to 'output'.

    'input' and 'output' are binary file objects. The 'quotetabs' flag
    indicates whether embedded tabs and spaces should be quoted. Note that
    line-ending tabs and spaces are always encoded, as per RFC 1521.
    The 'header' flag indicates whether we are encoding spaces as _ as per RFC
    1522.N)r   r   ó   
c             S   sj   | r<| dd  dkr<|  | d d t| dd   | ¡ n*| dkrX|  t| | ¡ n|  | | ¡ d S )Néÿÿÿÿs    	ó   .)Úwriter   )ÚsÚoutputÚlineEndr   r   r   r!   ;   s
    (zencode.<locals>.writer   r   r   r   r   s   =
)r$   )r
   Úreadr!   Úreadliner   r   r   ÚappendÚEMPTYSTRINGÚjoinr   ÚMAXLINESIZE)Úinputr#   r   r   ÚdataÚodatar!   ÚprevlineÚlineÚoutlineÚstrippedr   Úthisliner   r   r   r   ,   s@    	





c             C   sF   t d k	rt | ||dS ddlm} || }| }t|||| | ¡ S )N)r   r   r   )ÚBytesIO)r
   Úior3   r   Úgetvalue)r"   r   r   r3   ÚinfpÚoutfpr   r   r   r   j   s    c             C   s  t dk	r*|  ¡ }t ||d}| |¡ dS d}x¼|  ¡ }|s@P dt| }}|dkr¢||d | dkr¢d}	|d }x.|dkr||d | dkr|d }qxW nd}	x*||k rÒ|||d  }
|
dkrâ|râ|d	 }|d }qª|
tkrü||
 }|d }qª|d |kr|	sd}	P qª|d |k rR||d |d
  tkrR|t }|d
 }qª|d
 |k rÀt||d |d
  rÀt||d
 |d  rÀ|tt||d |d  f }|d }qª||
 }|d }qªW |	s2| |d ¡ d}q2W |rþ| |¡ dS )z»Read 'input', apply quoted-printable decoding, and write to 'output'.
    'input' and 'output' are binary file objects.
    If 'header' is true, decode underscore as space (per RFC 1522).N)r   r   r   r   r   s    	r   r   é   é   )	r	   r%   r!   r&   r   r   Úishexr   Úunhex)r+   r#   r   r,   r-   Únewr/   ÚiÚnÚpartialr   r   r   r   r   u   sR    
   
 
 ( 
B" 
 c             C   sD   t d k	rt | |dS ddlm} || }| }t|||d | ¡ S )N)r   r   )r3   )r	   r4   r3   r   r5   )r"   r   r3   r6   r7   r   r   r   r       s    c             C   sV   t | tstd|   ko dkn  pTd|   ko8dkn  pTd|   koPdkS   S )zDReturn true if the byte ordinal 'c' is a hexadecimal digit in ASCII.ó   0ó   9ó   aó   fó   Aó   F)r   r   r   )r   r   r   r   r:   ¬   s    r:   c             C   s¶   d}x¬| D ]¤}t |f}d|  kr,dkr:n n
td}n`d|  krNdkr`n ntdd }n:d	|  krtd
krn ntd	d }ndstdt| |d t||  }q
W |S )z.Get the integer value of a hexadecimal number.r   r@   rA   Ú0rB   rC   Úaé
   rD   rE   Fznon-hex digit r   )r   r   r   Úrepr)r"   Úbitsr   r=   r   r   r   r;   ±   s    


r;   c              C   s¬  dd l } dd l}y| | jdd  d¡\}}W nV |jk
r } z6| j| _t| td td td |  d¡ W d d }~X Y nX d}d}x(|D ] \}}|dkr¨d}|d	krd}qW |rÚ|rÚ| j| _td
 |  d¡ |sädg}d}	x®|D ]¦}
|
dkr| jj	}nNyt
|
d}W n> tk
rR } z| j d|
|f ¡ d}	wîW d d }~X Y nX z*|rlt|| jj	 nt|| jj	| W d |
dkr| ¡  X qîW |	r¨|  |	¡ d S )Nr   r   Útdz"usage: quopri [-t | -d] [file] ...z-t: quote tabsz-d: decode; default encoder8   z-tz-dz -t and -d are mutually exclusiveú-Úrbz%s: can't open (%s)
)ÚsysÚgetoptÚargvÚerrorÚstderrÚstdoutÚprintÚexitÚstdinÚbufferÚopenÚOSErrorr!   r   r   Úclose)rN   rO   ÚoptsÚargsÚmsgÚdecoÚtabsÚorG   ÚstsÚfileÚfpr   r   r   ÚmainÃ   sT      
 



rd   Ú__main__)F)FF)F)F)Ú__doc__Ú__all__r   r*   r   r(   Úbinasciir	   r
   ÚImportErrorr   r   r   r   r   r   r:   r;   rd   Ú__name__r   r   r   r   Ú<module>   s*   

>

+
.ã               @   s¼  d Z ddlZddlZddlZddlZyddlZW n ek
rH   dZY nX ddddddd	d
dddddddddddddddddddddgZd ZG d!d" d"ej	Z
e  e
j¡ ejZd@d#dZdAd$dZdBd%dZdCd&dZdDd'dZdEd(dZdFd)d	ZdGd*d
ZdHd+dZd,d ZdId-dZd.d/ d0D Zd1d Zee d2d¡Zee d2d¡ d2¡Zi Zd3Z d4d5 Z!e "e ¡d6d7 Z#d8d9 Z$d:d; Z%ddl&Z&d<d= Z'e& (ee'e!¡ G d>d? d?Z)dS )Jac  Support for regular expressions (RE).

This module provides regular expression matching operations similar to
those found in Perl.  It supports both 8-bit and Unicode strings; both
the pattern and the strings being processed can contain null bytes and
characters outside the US ASCII range.

Regular expressions can contain both special and ordinary characters.
Most ordinary characters, like "A", "a", or "0", are the simplest
regular expressions; they simply match themselves.  You can
concatenate ordinary characters, so last matches the string 'last'.

The special characters are:
    "."      Matches any character except a newline.
    "^"      Matches the start of the string.
    "$"      Matches the end of the string or just before the newline at
             the end of the string.
    "*"      Matches 0 or more (greedy) repetitions of the preceding RE.
             Greedy means that it will match as many repetitions as possible.
    "+"      Matches 1 or more (greedy) repetitions of the preceding RE.
    "?"      Matches 0 or 1 (greedy) of the preceding RE.
    *?,+?,?? Non-greedy versions of the previous three special characters.
    {m,n}    Matches from m to n repetitions of the preceding RE.
    {m,n}?   Non-greedy version of the above.
    "\\"     Either escapes special characters or signals a special sequence.
    []       Indicates a set of characters.
             A "^" as the first character indicates a complementing set.
    "|"      A|B, creates an RE that will match either A or B.
    (...)    Matches the RE inside the parentheses.
             The contents can be retrieved or matched later in the string.
    (?aiLmsux) Set the A, I, L, M, S, U, or X flag for the RE (see below).
    (?:...)  Non-grouping version of regular parentheses.
    (?P<name>...) The substring matched by the group is accessible by name.
    (?P=name)     Matches the text matched earlier by the group named name.
    (?#...)  A comment; ignored.
    (?=...)  Matches if ... matches next, but doesn't consume the string.
    (?!...)  Matches if ... doesn't match next.
    (?<=...) Matches if preceded by ... (must be fixed length).
    (?<!...) Matches if not preceded by ... (must be fixed length).
    (?(id/name)yes|no) Matches yes pattern if the group with id/name matched,
                       the (optional) no pattern otherwise.

The special sequences consist of "\\" and a character from the list
below.  If the ordinary character is not on the list, then the
resulting RE will match the second character.
    \number  Matches the contents of the group of the same number.
    \A       Matches only at the start of the string.
    \Z       Matches only at the end of the string.
    \b       Matches the empty string, but only at the start or end of a word.
    \B       Matches the empty string, but not at the start or end of a word.
    \d       Matches any decimal digit; equivalent to the set [0-9] in
             bytes patterns or string patterns with the ASCII flag.
             In string patterns without the ASCII flag, it will match the whole
             range of Unicode digits.
    \D       Matches any non-digit character; equivalent to [^\d].
    \s       Matches any whitespace character; equivalent to [ \t\n\r\f\v] in
             bytes patterns or string patterns with the ASCII flag.
             In string patterns without the ASCII flag, it will match the whole
             range of Unicode whitespace characters.
    \S       Matches any non-whitespace character; equivalent to [^\s].
    \w       Matches any alphanumeric character; equivalent to [a-zA-Z0-9_]
             in bytes patterns or string patterns with the ASCII flag.
             In string patterns without the ASCII flag, it will match the
             range of Unicode alphanumeric characters (letters plus digits
             plus underscore).
             With LOCALE, it will match the set [0-9_] plus characters defined
             as letters for the current locale.
    \W       Matches the complement of \w.
    \\       Matches a literal backslash.

This module exports the following functions:
    match     Match a regular expression pattern to the beginning of a string.
    fullmatch Match a regular expression pattern to all of a string.
    search    Search a string for the presence of a pattern.
    sub       Substitute occurrences of a pattern found in a string.
    subn      Same as sub, but also return the number of substitutions made.
    split     Split a string by the occurrences of a pattern.
    findall   Find all occurrences of a pattern in a string.
    finditer  Return an iterator yielding a Match object for each match.
    compile   Compile a pattern into a Pattern object.
    purge     Clear the regular expression cache.
    escape    Backslash all non-alphanumerics in a string.

Some of the functions in this module takes flags as optional parameters:
    A  ASCII       For string patterns, make \w, \W, \b, \B, \d, \D
                   match the corresponding ASCII character categories
                   (rather than the whole Unicode categories, which is the
                   default).
                   For bytes patterns, this flag is the only available
                   behaviour and needn't be specified.
    I  IGNORECASE  Perform case-insensitive matching.
    L  LOCALE      Make \w, \W, \b, \B, dependent on the current locale.
    M  MULTILINE   "^" matches the beginning of lines (after a newline)
                   as well as the string.
                   "$" matches the end of lines (before a newline) as well
                   as the end of the string.
    S  DOTALL      "." matches any character at all, including the newline.
    X  VERBOSE     Ignore whitespace and comments for nicer looking RE's.
    U  UNICODE     For compatibility only. Ignored for string patterns (it
                   is the default), and forbidden for bytes patterns.

This module also defines an exception 'error'.

é    NÚmatchÚ	fullmatchÚsearchÚsubÚsubnÚsplitÚfindallÚfinditerÚcompileÚpurgeÚtemplateÚescapeÚerrorÚPatternÚMatchÚAÚIÚLÚMÚSÚXÚUÚASCIIÚ
IGNORECASEÚLOCALEÚ	MULTILINEÚDOTALLÚVERBOSEÚUNICODEz2.2.1c               @   sb   e Zd ZejZejZejZ	ej
ZejZejZejZeZeZe	ZeZeZeZeZejZeZejZdS )Ú	RegexFlagN)Ú__name__Ú
__module__Ú__qualname__Úsre_compileÚSRE_FLAG_ASCIIr   ÚSRE_FLAG_IGNORECASEr   ÚSRE_FLAG_LOCALEr   ÚSRE_FLAG_UNICODEr   ÚSRE_FLAG_MULTILINEr   ÚSRE_FLAG_DOTALLr   ÚSRE_FLAG_VERBOSEr   r   r   r   r   r   r   r   ÚSRE_FLAG_TEMPLATEÚTEMPLATEÚTÚSRE_FLAG_DEBUGÚDEBUG© r0   r0   úD:\Python\lib\re.pyr      s"   r   c             C   s   t | | |¡S )zqTry to apply the pattern at the start of the string, returning
    a Match object, or None if no match was found.)Ú_compiler   )ÚpatternÚstringÚflagsr0   r0   r1   r   ª   s    c             C   s   t | | |¡S )zkTry to apply the pattern to all of the string, returning
    a Match object, or None if no match was found.)r2   r   )r3   r4   r5   r0   r0   r1   r   ¯   s    c             C   s   t | | |¡S )ztScan through string looking for a match to the pattern, returning
    a Match object, or None if no match was found.)r2   r   )r3   r4   r5   r0   r0   r1   r   ´   s    c             C   s   t | | |||¡S )aZ  Return the string obtained by replacing the leftmost
    non-overlapping occurrences of the pattern in string by the
    replacement repl.  repl can be either a string or a callable;
    if a string, backslash escapes in it are processed.  If it is
    a callable, it's passed the Match object and must return
    a replacement string to be used.)r2   r   )r3   Úreplr4   Úcountr5   r0   r0   r1   r   ¹   s    c             C   s   t | | |||¡S )aÛ  Return a 2-tuple containing (new_string, number).
    new_string is the string obtained by replacing the leftmost
    non-overlapping occurrences of the pattern in the source
    string by the replacement repl.  number is the number of
    substitutions that were made. repl can be either a string or a
    callable; if a string, backslash escapes in it are processed.
    If it is a callable, it's passed the Match object and must
    return a replacement string to be used.)r2   r   )r3   r6   r4   r7   r5   r0   r0   r1   r   Â   s    	c             C   s   t | | ||¡S )a  Split the source string by the occurrences of the pattern,
    returning a list containing the resulting substrings.  If
    capturing parentheses are used in pattern, then the text of all
    groups in the pattern are also returned as part of the resulting
    list.  If maxsplit is nonzero, at most maxsplit splits occur,
    and the remainder of the string is returned as the final element
    of the list.)r2   r   )r3   r4   Úmaxsplitr5   r0   r0   r1   r   Í   s    c             C   s   t | | |¡S )a  Return a list of all non-overlapping matches in the string.

    If one or more capturing groups are present in the pattern, return
    a list of groups; this will be a list of tuples if the pattern
    has more than one group.

    Empty matches are included in the result.)r2   r   )r3   r4   r5   r0   r0   r1   r   ×   s    c             C   s   t | | |¡S )z«Return an iterator over all non-overlapping matches in the
    string.  For each match, the iterator returns a Match object.

    Empty matches are included in the result.)r2   r	   )r3   r4   r5   r0   r0   r1   r	   á   s    c             C   s
   t | |S )zACompile a regular expression pattern, returning a Pattern object.)r2   )r3   r5   r0   r0   r1   r
   è   s    c               C   s   t  ¡  t ¡  dS )z#Clear the regular expression cachesN)Ú_cacheÚclearÚ_compile_replÚcache_clearr0   r0   r0   r1   r   ì   s    c             C   s   t | |tB S )z6Compile a template pattern, returning a Pattern object)r2   r-   )r3   r5   r0   r0   r1   r   ñ   s    c             C   s   i | ]}d t | |qS )ú\)Úchr)Ú.0Úir0   r0   r1   ú
<dictcomp>ú   s    rA   s   ()[]{}?*+-|^$\.&~# 	
c             C   s2   t | tr|  t¡S t| d} |  t¡ d¡S dS )z0
    Escape special characters in a string.
    Úlatin1N)Ú
isinstanceÚstrÚ	translateÚ_special_chars_mapÚencode)r3   r0   r0   r1   r   ü   s    


Ú i   c          
   C   sÈ   t |tr|j}ytt| | |f S  tk
r6   Y nX t | trR|rNtd| S t 	| ¡sdt
dt | |¡}|t@ sÄtttkr²ytttt= W n tttfk
r°   Y nX |tt| | |f< |S )Nz5cannot process flags argument with a compiled patternz1first argument must be string or compiled pattern)rC   r   Úvaluer9   ÚtypeÚKeyErrorr   Ú
ValueErrorr#   ÚisstringÚ	TypeErrorr
   r/   ÚlenÚ	_MAXCACHEÚnextÚiterÚStopIterationÚRuntimeError)r3   r5   Úpr0   r0   r1   r2     s,    


r2   c             C   s   t  | |¡S )N)Ú	sre_parseÚparse_template)r6   r3   r0   r0   r1   r;   )  s    r;   c             C   s   t  || ¡}t  ||¡S )N)rV   rW   Úexpand_template)r3   r   r   r0   r0   r1   Ú_expand.  s    rY   c             C   s>   t || }|d s.t|d dkr.|d d S |fdd}|S )Nr   é   c             S   s   t  || ¡S )N)rV   rX   )r   r   r0   r0   r1   Úfilter9  s    z_subx.<locals>.filter)r;   rO   )r3   r   r[   r0   r0   r1   Ú_subx3  s
    
r\   c             C   s   t | j| jffS )N)r2   r3   r5   )rU   r0   r0   r1   Ú_pickleA  s    r]   c               @   s   e Zd ZdddZdd ZdS )ÚScannerr   c       
      C   s°   ddl m}m} t|tr |j}|| _g }t ¡ }||_	xP|D ]H\}}| 
¡ }	| t |||	ddt ||¡ffg¡¡ | |	|d ¡ q>W t ||d |ffg¡}t |¡| _d S )Nr   )ÚBRANCHÚ
SUBPATTERNéÿÿÿÿ)Úsre_constantsr_   r`   rC   r   rI   ÚlexiconrV   r   r5   Ú	opengroupÚappendÚ
SubPatternÚparseÚ
closegroupr#   r
   Úscanner)
Úselfrc   r5   r_   r`   rU   ÚsÚphraseÚactionÚgidr0   r0   r1   Ú__init__J  s    

zScanner.__init__c       	      C   s   g }|j }| j |¡j}d}xf| }|s*P | ¡ }||kr<P | j|jd  d }t|rl|| _|| | ¡ }|d k	r||| |}qW |||d  fS )Nr   rZ   )re   ri   r   Úendrc   Ú	lastindexÚcallableÚgroup)	rj   r4   Úresultre   r   r@   ÚmÚjrm   r0   r0   r1   Úscan[  s&    zScanner.scanN)r   )r    r!   r"   ro   rw   r0   r0   r0   r1   r^   I  s   
r^   )r   )r   )r   )r   r   )r   r   )r   r   )r   )r   )r   )r   )*Ú__doc__Úenumr#   rV   Ú	functoolsÚ_localeÚImportErrorÚ__all__Ú__version__ÚIntFlagr   ÚglobalsÚupdateÚ__members__r   r   r   r   r   r   r   r   r	   r
   r   r   rF   r   rJ   r   r   r9   rP   r2   Ú	lru_cacher;   rY   r\   Úcopyregr]   Úpickler^   r0   r0   r0   r1   Ú<module>x   sT   




	







	
ã               @   s^   d Z dddgZddlZddlmZ ddlmZ dd	dZG d
d dZdd Z	e Z
e
jZdS )zGRedo the builtin repr() (representation) but with limits on most sizes.ÚReprÚreprÚrecursive_repré    N)Úislice)Ú	get_identú...c                s    fdd}|S )zGDecorator to make a repr function return fillvalue for a recursive callc                sX   t    fdd}td|_td|_td|_td|_tdi |_|S )Nc          	      sB   t | t f}|kr S  |¡ z| }W d  |¡ X |S )N)Úidr   ÚaddÚdiscard)ÚselfÚkeyÚresult)Ú	fillvalueÚrepr_runningÚuser_function© úD:\Python\lib\reprlib.pyÚwrapper   s    
z<recursive_repr.<locals>.decorating_function.<locals>.wrapperÚ
__module__Ú__doc__Ú__name__Ú__qualname__Ú__annotations__)ÚsetÚgetattrr   r   r   r   r   )r   r   )r   )r   r   r   Údecorating_function   s    z+recursive_repr.<locals>.decorating_functionr   )r   r   r   )r   r   r   	   s    c               @   s~   e Zd Zdd Zdd Zdd Zddd	Zd
d Zdd Zdd Z	dd Z
dd Zdd Zdd Zdd Zdd Zdd ZdS ) r   c             C   sF   d| _ d| _d| _d| _d| _d| _d| _d| _d| _d| _	d| _
d S )Né   é   é   é   é(   )ÚmaxlevelÚmaxtupleÚmaxlistÚmaxarrayÚmaxdictÚmaxsetÚmaxfrozensetÚmaxdequeÚ	maxstringÚmaxlongÚmaxother)r   r   r   r   Ú__init__&   s    zRepr.__init__c             C   s   |   || j¡S )N)Úrepr1r!   )r   Úxr   r   r   r   3   s    z	Repr.reprc             C   sV   t |j}d|kr$| ¡ }d |¡}t| d| rFt| d| ||S |  ||¡S d S )Nú Ú_Úrepr_)Útyper   ÚsplitÚjoinÚhasattrr   Úrepr_instance)r   r.   ÚlevelÚtypenameÚpartsr   r   r   r-   6   s    

z
Repr.repr1Ú c       
         s   t |}|dkr|rd}nX|d  | j fddt||D }	||krT|	 d¡ d |	¡}|dkrr|rr|| }d|||f S )Nr   z...é   c                s   g | ]}| qS r   r   )Ú.0Úelem)Únewlevelr-   r   r   ú
<listcomp>G   s    z'Repr._repr_iterable.<locals>.<listcomp>z, z%s%s%s)Úlenr-   r   Úappendr4   )
r   r.   r7   ÚleftÚrightÚmaxiterÚtrailÚnÚsÚpiecesr   )r>   r-   r   Ú_repr_iterable@   s     

 zRepr._repr_iterablec             C   s   |   ||dd| jd¡S )Nú(ú)ú,)rI   r"   )r   r.   r7   r   r   r   Ú
repr_tupleM   s    zRepr.repr_tuplec             C   s   |   ||dd| j¡S )Nú[ú])rI   r#   )r   r.   r7   r   r   r   Ú	repr_listP   s    zRepr.repr_listc             C   s,   |sd|j  S d|j  }|  |||d| j¡S )Nzarray('%s')zarray('%s', [z]))ÚtypecoderI   r$   )r   r.   r7   Úheaderr   r   r   Ú
repr_arrayS   s    

zRepr.repr_arrayc             C   s$   |sdS t |}|  ||dd| j¡S )Nzset()Ú{Ú})Ú_possibly_sortedrI   r&   )r   r.   r7   r   r   r   Úrepr_setY   s    zRepr.repr_setc             C   s$   |sdS t |}|  ||dd| j¡S )Nzfrozenset()zfrozenset({z}))rV   rI   r'   )r   r.   r7   r   r   r   Úrepr_frozenset_   s
    zRepr.repr_frozensetc             C   s   |   ||dd| j¡S )Nzdeque([z]))rI   r(   )r   r.   r7   r   r   r   Ú
repr_dequef   s    zRepr.repr_dequec             C   s   t |}|dkrdS |dkr dS |d }| j}g }xBtt|| jD ].}|||}||| |}	| d||	f ¡ qDW || jkr| d¡ d |¡}
d|
f S )	Nr   z{}z{...}r;   z%s: %sz...z, z{%s})r@   r-   r   rV   r%   rA   r4   )r   r.   r7   rF   r>   r-   rH   r   ÚkeyreprÚvalreprrG   r   r   r   Ú	repr_dicti   s       

 

zRepr.repr_dictc             C   s   t  |d | j ¡}t|| jkrtd| jd d }td| jd | }t  |d | |t|| d   ¡}|d | d |t|| d   }|S )Nr   é   é   z...)Úbuiltinsr   r)   r@   Úmax)r   r.   r7   rG   ÚiÚjr   r   r   Úrepr_strx   s    &$zRepr.repr_strc             C   sh   t  |¡}t|| jkrdtd| jd d }td| jd | }|d | d |t|| d   }|S )Nr   r]   r^   z...)r_   r   r@   r*   r`   )r   r.   r7   rG   ra   rb   r   r   r   Úrepr_int   s    
$zRepr.repr_intc             C   s   yt  |¡}W n$ tk
r2   d|jjt|f S X t|| jkrtd| jd d }td| jd | }|d | d |t|| d   }|S )Nz<%s instance at %#x>r   r]   r^   z...)	r_   r   Ú	ExceptionÚ	__class__r   r   r@   r+   r`   )r   r.   r7   rG   ra   rb   r   r   r   r6      s    $zRepr.repr_instanceN)r:   )r   r   r   r,   r   r-   rI   rM   rP   rS   rW   rX   rY   r\   rc   rd   r6   r   r   r   r   r   $   s   

	c             C   s&   yt | S  tk
r    t| S X d S )N)Úsortedre   Úlist)r.   r   r   r   rV      s    rV   )r   )r   Ú__all__r_   Ú	itertoolsr   Ú_threadr   r   r   rV   ÚaReprr   r   r   r   r   Ú<module>   s   

s	ã               @   s"  d Z dZdZdZdZdZdZdZdZd	Z	d
Z
dd Zdd ZdZdZdZdZdZdZdZdd Zdd Zdd Zdd Zdd Zd d! Zd"d# Zd$Zd%ZeZd&Zd'Zd(Z d)Z!d*Z"d'Z#d(Z$d)Z%d+Z&d,Z'd-Z(d	Z)dZ*dZ+dZ,dZ-dZ.dZ/dZ0d	Z1d-Z2d,Z3dZ4d.Z5d/Z6d0Z7d1Z8d2Z9ed3fed4fed5fed6fed7fed8ffe#d9ffe$d:ffe%eB d;fed<fe%d=ffe'd9ffe(d:ffe)eB d;fed<fe)d=ffe+d9ffe,d:ffe-eB d>fed?fe-d=fff
Z:d@dA Z;d,Z<d$Z=d)Z>d-Z?dZ@dZAdZBd(ZCdZDd/ZEdZFdZGd%ZHd&ZIdZJd'ZKd.ZLyddBlMT W n eNk
r   Y nX dCS )DzoConstants/functions for interpreting results of os.stat() and os.lstat().

Suggested usage: from stat import *
é    é   é   é   é   é   é   é   é   é	   c             C   s   | d@ S )zMReturn the portion of the file's mode that can be set by
    os.chmod().
    iÿ  © )Úmoder   r   úD:\Python\lib\stat.pyÚS_IMODE   s    r   c             C   s   | d@ S )zLReturn the portion of the file's mode that describes the
    file type.
    i ð  r   )r   r   r   r   ÚS_IFMT   s    r   i @  i    i `  i   i   i    i À  c             C   s   t | tkS )z(Return True if mode is from a directory.)r   ÚS_IFDIR)r   r   r   r   ÚS_ISDIR.   s    r   c             C   s   t | tkS )z<Return True if mode is from a character special device file.)r   ÚS_IFCHR)r   r   r   r   ÚS_ISCHR2   s    r   c             C   s   t | tkS )z8Return True if mode is from a block special device file.)r   ÚS_IFBLK)r   r   r   r   ÚS_ISBLK6   s    r   c             C   s   t | tkS )z+Return True if mode is from a regular file.)r   ÚS_IFREG)r   r   r   r   ÚS_ISREG:   s    r   c             C   s   t | tkS )z0Return True if mode is from a FIFO (named pipe).)r   ÚS_IFIFO)r   r   r   r   ÚS_ISFIFO>   s    r   c             C   s   t | tkS )z,Return True if mode is from a symbolic link.)r   ÚS_IFLNK)r   r   r   r   ÚS_ISLNKB   s    r   c             C   s   t | tkS )z%Return True if mode is from a socket.)r   ÚS_IFSOCK)r   r   r   r   ÚS_ISSOCKF   s    r   i   i   i   é   é   é@   iÀ  é8   é    é   i   i   i   i   i    Úlú-ÚbÚdÚcÚpÚrÚwÚsÚSÚxÚtÚTc             C   sP   g }x@t D ]8}x2|D ] \}}| |@ |kr| |¡ P qW | d¡ q
W d |¡S )z;Convert a file's mode to a string of the form '-rwxrwxrwx'.r%   Ú )Ú_filemode_tableÚappendÚjoin)r   ZpermÚtableÚbitÚcharr   r   r   Úfilemode   s    

r8   )Ú*N)OÚ__doc__ÚST_MODEÚST_INOÚST_DEVÚST_NLINKÚST_UIDÚST_GIDÚST_SIZEÚST_ATIMEÚST_MTIMEÚST_CTIMEr   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   ÚS_ISUIDÚS_ISGIDÚS_ENFMTÚS_ISVTXÚS_IREADÚS_IWRITEÚS_IEXECÚS_IRWXUÚS_IRUSRÚS_IWUSRÚS_IXUSRÚS_IRWXGÚS_IRGRPÚS_IWGRPÚS_IXGRPÚS_IRWXOÚS_IROTHÚS_IWOTHÚS_IXOTHÚ	UF_NODUMPÚUF_IMMUTABLEÚ	UF_APPENDÚ	UF_OPAQUEÚUF_NOUNLINKÚUF_COMPRESSEDÚ	UF_HIDDENÚSF_ARCHIVEDÚSF_IMMUTABLEÚ	SF_APPENDÚSF_NOUNLINKÚSF_SNAPSHOTr2   r8   ÚFILE_ATTRIBUTE_ARCHIVEÚFILE_ATTRIBUTE_COMPRESSEDÚFILE_ATTRIBUTE_DEVICEÚFILE_ATTRIBUTE_DIRECTORYÚFILE_ATTRIBUTE_ENCRYPTEDÚFILE_ATTRIBUTE_HIDDENÚFILE_ATTRIBUTE_INTEGRITY_STREAMÚFILE_ATTRIBUTE_NORMALÚ"FILE_ATTRIBUTE_NOT_CONTENT_INDEXEDÚFILE_ATTRIBUTE_NO_SCRUB_DATAÚFILE_ATTRIBUTE_OFFLINEÚFILE_ATTRIBUTE_READONLYÚFILE_ATTRIBUTE_REPARSE_POINTÚFILE_ATTRIBUTE_SPARSE_FILEÚFILE_ATTRIBUTE_SYSTEMÚFILE_ATTRIBUTE_TEMPORARYÚFILE_ATTRIBUTE_VIRTUALÚ_statÚImportErrorr   r   r   r   Ú<module>   sÈ   	


ã               @   s8   d dddddddgZ dd	lT dd
lmZ ddlmZ dS )ÚcalcsizeÚpackÚ	pack_intoÚunpackÚunpack_fromÚiter_unpackÚStructÚerroré    )Ú*)Ú_clearcache)Ú__doc__N)Ú__all__Ú_structr   r   © r   r   úD:\Python\lib\struct.pyÚ<module>   s   
ã               @   s  d Z ddlZddlZddlZddlmZ ddl	m
Z ddlmZ ddlmZmZ yddlmZ W n  ek
r   ddlmZ Y nX dd	d
ddddddddddddddddddgZejZejZejZejZejZ y
ej!Z"W n e#k
rð   dZ"Y nX ej$Z$[da%da&dd Z'dd Z(eZ)dd Z!G d d! d!Z*e*Z+G d"d
 d
Z,G d#d dZ-G d$d de-Z.G d%d dZ/G d&d dZ0G d'd de1Z2e j3Z4e4  dBd)d*Z5e a6i Z7i Z8e Z9G d+d dZ:G d,d de:Z;G d-d. d.e:Z<G d/d0 d0e:Z=d1d Z>e>Z?d2d	 Z@e@ZAd3d4 ZBd5d ZCdd6lmDZD e< aEd7d8 ZFd9d: ZGd;d ZHydd<lmIZJ W n" ek
rv   dd=lKmJZJ Y nX d>d? ZLeMed@rejNeLdA dS )Cz;Thread module emulating a subset of Java's threading model.é    N)Ú	monotonic)Ú
format_exc)ÚWeakSet)ÚisliceÚcount)ÚdequeÚ	get_identÚactive_countÚ	ConditionÚcurrent_threadÚ	enumerateÚmain_threadÚTIMEOUT_MAXÚEventÚLockÚRLockÚ	SemaphoreÚBoundedSemaphoreÚThreadÚBarrierÚBrokenBarrierErrorÚTimerÚThreadErrorÚ
setprofileÚsettraceÚlocalÚ
stack_sizec             C   s   | a dS )z¸Set a profile function for all threads started from the threading module.

    The func will be passed to sys.setprofile() for each thread, before its
    run() method is called.

    N)Ú_profile_hook)Úfunc© r   úD:\Python\lib\threading.pyr   3   s    c             C   s   | a dS )z´Set a trace function for all threads started from the threading module.

    The func will be passed to sys.settrace() for each thread, before its run()
    method is called.

    N)Ú_trace_hook)r   r   r   r    r   =   s    c              O   s   t dkrt| |S t | |S )a2  Factory function that returns a new reentrant lock.

    A reentrant lock must be released by the thread that acquired it. Once a
    thread has acquired a reentrant lock, the same thread may acquire it again
    without blocking; the thread must release it once for each time it has
    acquired it.

    N)Ú_CRLockÚ_PyRLock)ÚargsÚkwargsr   r   r    r   K   s    	
c               @   sV   e Zd ZdZdd Zdd Zddd	ZeZd
d Zdd Z	dd Z
dd Zdd ZdS )Ú_RLocka,  This class implements reentrant lock objects.

    A reentrant lock must be released by the thread that acquired it. Once a
    thread has acquired a reentrant lock, the same thread may acquire it
    again without blocking; the thread must release it once for each time it
    has acquired it.

    c             C   s   t  | _d | _d| _d S )Nr   )Ú_allocate_lockÚ_blockÚ_ownerÚ_count)Úselfr   r   r    Ú__init__b   s    z_RLock.__init__c          	   C   s^   | j }yt| j}W n tk
r(   Y nX d| j ¡ r:dnd| jj| jj|| j	t
t| f S )Nz)<%s %s.%s object owner=%r count=%d at %s>ÚlockedÚunlocked)r)   Ú_activeÚnameÚKeyErrorr(   r-   Ú	__class__Ú
__module__Ú__qualname__r*   ÚhexÚid)r+   Úownerr   r   r    Ú__repr__g   s    z_RLock.__repr__Téÿÿÿÿc             C   sD   t  }| j|kr"|  jd7  _dS | j ||¡}|r@|| _d| _|S )a  Acquire a lock, blocking or non-blocking.

        When invoked without arguments: if this thread already owns the lock,
        increment the recursion level by one, and return immediately. Otherwise,
        if another thread owns the lock, block until the lock is unlocked. Once
        the lock is unlocked (not owned by any thread), then grab ownership, set
        the recursion level to one, and return. If more than one thread is
        blocked waiting until the lock is unlocked, only one at a time will be
        able to grab ownership of the lock. There is no return value in this
        case.

        When invoked with the blocking argument set to true, do the same thing
        as when called without arguments, and return true.

        When invoked with the blocking argument set to false, do not block. If a
        call without an argument would block, return false immediately;
        otherwise, do the same thing as when called without arguments, and
        return true.

        When invoked with the floating-point timeout argument set to a positive
        value, block for at most the number of seconds specified by timeout
        and as long as the lock cannot be acquired.  Return true if the lock has
        been acquired, false if the timeout has elapsed.

        é   )r   r)   r*   r(   Úacquire)r+   ÚblockingÚtimeoutÚmeÚrcr   r   r    r;   v   s    
z_RLock.acquirec             C   s<   | j t krtd| jd  | _}|s8d| _ | j ¡  dS )am  Release a lock, decrementing the recursion level.

        If after the decrement it is zero, reset the lock to unlocked (not owned
        by any thread), and if any other threads are blocked waiting for the
        lock to become unlocked, allow exactly one of them to proceed. If after
        the decrement the recursion level is still nonzero, the lock remains
        locked and owned by the calling thread.

        Only call this method when the calling thread owns the lock. A
        RuntimeError is raised if this method is called when the lock is
        unlocked.

        There is no return value.

        zcannot release un-acquired lockr:   N)r)   r   ÚRuntimeErrorr*   r(   Úrelease)r+   r   r   r   r    rA      s    z_RLock.releasec             C   s   |   ¡  d S )N)rA   )r+   ÚtÚvÚtbr   r   r    Ú__exit__³   s    z_RLock.__exit__c             C   s   | j  ¡  |\| _| _d S )N)r(   r;   r*   r)   )r+   Ústater   r   r    Ú_acquire_restore¸   s    
z_RLock._acquire_restorec             C   s<   | j dkrtd| j }d| _ | j}d | _| j ¡  ||fS )Nr   zcannot release un-acquired lock)r*   r@   r)   r(   rA   )r+   r   r7   r   r   r    Ú_release_save¼   s    

z_RLock._release_savec             C   s   | j t kS )N)r)   r   )r+   r   r   r    Ú	_is_ownedÆ   s    z_RLock._is_ownedN)Tr9   )Ú__name__r3   r4   Ú__doc__r,   r8   r;   Ú	__enter__rA   rE   rG   rH   rI   r   r   r   r    r&   X   s   
$
r&   c               @   st   e Zd ZdZdddZdd Zdd Zd	d
 Zdd Zdd Z	dd Z
dddZdddZdddZdd ZeZdS )r
   aj  Class that implements a condition variable.

    A condition variable allows one or more threads to wait until they are
    notified by another thread.

    If the lock argument is given and not None, it must be a Lock or RLock
    object, and it is used as the underlying lock. Otherwise, a new RLock object
    is created and used as the underlying lock.

    Nc             C   s   |d krt  }|| _|j| _|j| _y|j| _W n tk
rD   Y nX y|j| _W n tk
rf   Y nX y|j| _W n tk
r   Y nX t | _	d S )N)
r   Ú_lockr;   rA   rH   ÚAttributeErrorrG   rI   Ú_dequeÚ_waiters)r+   Úlockr   r   r    r,   Ø   s$    zCondition.__init__c             C   s
   | j  ¡ S )N)rM   rL   )r+   r   r   r    rL   ð   s    zCondition.__enter__c             G   s   | j j| S )N)rM   rE   )r+   r$   r   r   r    rE   ó   s    zCondition.__exit__c             C   s   d| j t| jf S )Nz<Condition(%s, %d)>)rM   ÚlenrP   )r+   r   r   r    r8   ö   s    zCondition.__repr__c             C   s   | j  ¡  d S )N)rM   rA   )r+   r   r   r    rH   ù   s    zCondition._release_savec             C   s   | j  ¡  d S )N)rM   r;   )r+   Úxr   r   r    rG   ü   s    zCondition._acquire_restorec             C   s"   | j  d¡r| j  ¡  dS dS d S )Nr   FT)rM   r;   rA   )r+   r   r   r    rI   ÿ   s    
zCondition._is_ownedc             C   s¬   |   ¡ stdt }| ¡  | j |¡ |  ¡ }d}z:|dkrN| ¡  d}n |dkrd| d|¡}n
| d¡}|S |  |¡ |s¦y| j |¡ W n t	k
r¤   Y nX X dS )ak  Wait until notified or until a timeout occurs.

        If the calling thread has not acquired the lock when this method is
        called, a RuntimeError is raised.

        This method releases the underlying lock, and then blocks until it is
        awakened by a notify() or notify_all() call for the same condition
        variable in another thread, or until the optional timeout occurs. Once
        awakened or timed out, it re-acquires the lock and returns.

        When the timeout argument is present and not None, it should be a
        floating point number specifying a timeout for the operation in seconds
        (or fractions thereof).

        When the underlying lock is an RLock, it is not released using its
        release() method, since this may not actually unlock the lock when it
        was acquired multiple times recursively. Instead, an internal interface
        of the RLock class is used, which really unlocks it even when it has
        been recursively acquired several times. Another internal interface is
        then used to restore the recursion level when the lock is reacquired.

        zcannot wait on un-acquired lockFNTr   )
rI   r@   r'   r;   rP   ÚappendrH   rG   ÚremoveÚ
ValueError)r+   r=   ÚwaiterÚsaved_stateÚgotitr   r   r    Úwait  s*    

zCondition.waitc             C   s\   d}|}| }xH|sV|dk	rD|dkr0t  | }n|t   }|dkrDP |  |¡ | }qW |S )zÜWait until a condition evaluates to True.

        predicate should be a callable which result will be interpreted as a
        boolean value.  A timeout may be provided giving the maximum time to
        wait.

        Nr   )Ú_timerZ   )r+   Ú	predicater=   ÚendtimeÚwaittimeÚresultr   r   r    Úwait_for8  s    


zCondition.wait_forr:   c          	   C   sj   |   ¡ std| j}tt||}|s,dS x8|D ]0}| ¡  y| |¡ W q2 tk
r`   Y q2X q2W dS )aK  Wake up one or more threads waiting on this condition, if any.

        If the calling thread has not acquired the lock when this method is
        called, a RuntimeError is raised.

        This method wakes up at most n of the threads waiting for the condition
        variable; it is a no-op if no threads are waiting.

        z!cannot notify on un-acquired lockN)rI   r@   rP   rO   Ú_islicerA   rU   rV   )r+   ÚnÚall_waitersÚwaiters_to_notifyrW   r   r   r    ÚnotifyO  s    

zCondition.notifyc             C   s   |   t| j¡ dS )z¯Wake up all threads waiting on this condition.

        If the calling thread has not acquired the lock when this method
        is called, a RuntimeError is raised.

        N)re   rR   rP   )r+   r   r   r    Ú
notify_allf  s    zCondition.notify_all)N)N)N)r:   )rJ   r3   r4   rK   r,   rL   rE   r8   rH   rG   rI   rZ   r`   re   rf   Ú	notifyAllr   r   r   r    r
   Ì   s   

	
0

	c               @   s8   e Zd ZdZdddZdddZeZd	d
 Zdd ZdS )r   aG  This class implements semaphore objects.

    Semaphores manage a counter representing the number of release() calls minus
    the number of acquire() calls, plus an initial value. The acquire() method
    blocks if necessary until it can return without making the counter
    negative. If not given, value defaults to 1.

    r:   c             C   s&   |dk rt dtt | _|| _d S )Nr   z$semaphore initial value must be >= 0)rV   r
   r   Ú_condÚ_value)r+   Úvaluer   r   r    r,   ~  s    zSemaphore.__init__TNc          	   C   s   |s|dk	rt dd}d}| jj xb| jdkrt|s6P |dk	rf|dkrRt | }n|t  }|dkrfP | j |¡ q&W |  jd8  _d}W dQ R X |S )aÔ  Acquire a semaphore, decrementing the internal counter by one.

        When invoked without arguments: if the internal counter is larger than
        zero on entry, decrement it by one and return immediately. If it is zero
        on entry, block, waiting until some other thread has called release() to
        make it larger than zero. This is done with proper interlocking so that
        if multiple acquire() calls are blocked, release() will wake exactly one
        of them up. The implementation may pick one at random, so the order in
        which blocked threads are awakened should not be relied on. There is no
        return value in this case.

        When invoked with blocking set to true, do the same thing as when called
        without arguments, and return true.

        When invoked with blocking set to false, do not block. If a call without
        an argument would block, return false immediately; otherwise, do the
        same thing as when called without arguments, and return true.

        When invoked with a timeout other than None, it will block for at
        most timeout seconds.  If acquire does not complete successfully in
        that interval, return false.  Return true otherwise.

        Nz.can't specify timeout for non-blocking acquireFr   r:   T)rV   rh   ri   r[   rZ   )r+   r<   r=   r?   r]   r   r   r    r;     s$    
zSemaphore.acquirec          	   C   s.   | j  |  jd7  _| j  ¡  W dQ R X dS )z×Release a semaphore, incrementing the internal counter by one.

        When the counter is zero on entry and another thread is waiting for it
        to become larger than zero again, wake up that thread.

        r:   N)rh   ri   re   )r+   r   r   r    rA   ³  s    zSemaphore.releasec             C   s   |   ¡  d S )N)rA   )r+   rB   rC   rD   r   r   r    rE   ¾  s    zSemaphore.__exit__)r:   )TN)	rJ   r3   r4   rK   r,   r;   rL   rA   rE   r   r   r   r    r   r  s   

-c               @   s"   e Zd ZdZdddZdd ZdS )	r   a©  Implements a bounded semaphore.

    A bounded semaphore checks to make sure its current value doesn't exceed its
    initial value. If it does, ValueError is raised. In most situations
    semaphores are used to guard resources with limited capacity.

    If the semaphore is released too many times it's a sign of a bug. If not
    given, value defaults to 1.

    Like regular semaphores, bounded semaphores manage a counter representing
    the number of release() calls minus the number of acquire() calls, plus an
    initial value. The acquire() method blocks if necessary until it can return
    without making the counter negative. If not given, value defaults to 1.

    r:   c             C   s   t  | |¡ || _d S )N)r   r,   Ú_initial_value)r+   rj   r   r   r    r,   Ó  s    zBoundedSemaphore.__init__c          	   C   sB   | j 2 | j| jkrtd|  jd7  _| j  ¡  W dQ R X dS )a6  Release a semaphore, incrementing the internal counter by one.

        When the counter is zero on entry and another thread is waiting for it
        to become larger than zero again, wake up that thread.

        If the number of releases exceeds the number of acquires,
        raise a ValueError.

        z!Semaphore released too many timesr:   N)rh   ri   rk   rV   re   )r+   r   r   r    rA   ×  s
    
zBoundedSemaphore.releaseN)r:   )rJ   r3   r4   rK   r,   rA   r   r   r   r    r   Â  s   
c               @   sF   e Zd ZdZdd Zdd Zdd ZeZdd	 Zd
d Z	dddZ
dS )r   zòClass implementing event objects.

    Events manage a flag that can be set to true with the set() method and reset
    to false with the clear() method. The wait() method blocks until the flag is
    true.  The flag is initially false.

    c             C   s   t t | _d| _d S )NF)r
   r   rh   Ú_flag)r+   r   r   r    r,   ó  s    zEvent.__init__c             C   s   | j  t ¡ d S )N)rh   r,   r   )r+   r   r   r    Ú_reset_internal_locks÷  s    zEvent._reset_internal_locksc             C   s   | j S )z5Return true if and only if the internal flag is true.)rl   )r+   r   r   r    Úis_setû  s    zEvent.is_setc          	   C   s&   | j  d| _| j  ¡  W dQ R X dS )z·Set the internal flag to true.

        All threads waiting for it to become true are awakened. Threads
        that call wait() once the flag is true will not block at all.

        TN)rh   rl   rf   )r+   r   r   r    Úset  s    z	Event.setc          	   C   s   | j  d| _W dQ R X dS )zªReset the internal flag to false.

        Subsequently, threads calling wait() will block until set() is called to
        set the internal flag to true again.

        FN)rh   rl   )r+   r   r   r    Úclear  s    zEvent.clearNc          	   C   s,   | j  | j}|s| j  |¡}|S Q R X dS )aH  Block until the internal flag is true.

        If the internal flag is true on entry, return immediately. Otherwise,
        block until another thread calls set() to set the flag to true, or until
        the optional timeout occurs.

        When the timeout argument is present and not None, it should be a
        floating point number specifying a timeout for the operation in seconds
        (or fractions thereof).

        This method returns the internal flag on exit, so it will always return
        True except if a timeout is given and the operation times out.

        N)rh   rl   rZ   )r+   r=   Úsignaledr   r   r    rZ     s
    z
Event.wait)N)rJ   r3   r4   rK   r,   rm   rn   ÚisSetro   rp   rZ   r   r   r   r    r   è  s   
c               @   s   e Zd ZdZdddZdddZdd Zd	d
 Zdd Zdd Z	dd Z
dd Zdd Zedd Zedd Zedd ZdS )r   zØImplements a Barrier.

    Useful for synchronizing a fixed number of threads at known synchronization
    points.  Threads block on 'wait()' and are simultaneously awoken once they
    have all made that call.

    Nc             C   s.   t t | _|| _|| _|| _d| _d| _dS )aW  Create a barrier, initialised to 'parties' threads.

        'action' is a callable which, when supplied, will be called by one of
        the threads after they have all entered the barrier and just prior to
        releasing them all. If a 'timeout' is provided, it is used as the
        default for all subsequent 'wait()' calls.

        r   N)r
   r   rh   Ú_actionÚ_timeoutÚ_partiesÚ_stater*   )r+   ÚpartiesÚactionr=   r   r   r    r,   @  s    	zBarrier.__init__c          
   C   s   |dkr| j }| jb |  ¡  | j}|  jd7  _z&|d | jkrL|  ¡  n
|  |¡ |S |  jd8  _|  ¡  X W dQ R X dS )aN  Wait for the barrier.

        When the specified number of threads have started waiting, they are all
        simultaneously awoken. If an 'action' was provided for the barrier, one
        of the threads will have executed that callback prior to returning.
        Returns an individual index number from 0 to 'parties-1'.

        Nr:   )rt   rh   Ú_enterr*   ru   Ú_releaseÚ_waitÚ_exit)r+   r=   Úindexr   r   r    rZ   P  s    	

zBarrier.waitc             C   s:   x| j dkr| j ¡  qW | j dk r(t| j dks6td S )N)r9   r:   r   )rv   rh   rZ   r   ÚAssertionError)r+   r   r   r    ry   n  s
    
zBarrier._enterc             C   s>   y"| j r|   ¡  d| _| j ¡  W n   |  ¡   Y nX d S )Nr:   )rs   rv   rh   rf   Ú_break)r+   r   r   r    rz   y  s    zBarrier._releasec                sB    j   fdd|¡s"  ¡  t jdk r0t jdks>td S )Nc                  s
    j dkS )Nr   )rv   r   )r+   r   r    Ú<lambda>  ó    zBarrier._wait.<locals>.<lambda>r   r:   )rh   r`   r   r   rv   r~   )r+   r=   r   )r+   r    r{     s    
zBarrier._waitc             C   s(   | j dkr$| jdkr$d| _| j ¡  d S )Nr   )r9   r:   )r*   rv   rh   rf   )r+   r   r   r    r|     s    

zBarrier._exitc          	   C   sT   | j D | jdkr6| jdkr$d| _q<| jdkr<d| _nd| _| j  ¡  W dQ R X dS )zReset the barrier to the initial state.

        Any threads currently waiting will get the BrokenBarrier exception
        raised.

        r   r9   éþÿÿÿN)rh   r*   rv   rf   )r+   r   r   r    Úreset  s    


zBarrier.resetc          	   C   s   | j  |  ¡  W dQ R X dS )zÃPlace the barrier into a 'broken' state.

        Useful in case of error.  Any currently waiting threads and threads
        attempting to 'wait()' will have BrokenBarrierError raised.

        N)rh   r   )r+   r   r   r    Úabort­  s    zBarrier.abortc             C   s   d| _ | j ¡  d S )Nr   )rv   rh   rf   )r+   r   r   r    r   ·  s    zBarrier._breakc             C   s   | j S )z:Return the number of threads required to trip the barrier.)ru   )r+   r   r   r    rw   ½  s    zBarrier.partiesc             C   s   | j dkr| jS dS )z>Return the number of threads currently waiting at the barrier.r   )rv   r*   )r+   r   r   r    Ú	n_waitingÂ  s    
zBarrier.n_waitingc             C   s
   | j dkS )z0Return True if the barrier is in a broken state.r   )rv   )r+   r   r   r    ÚbrokenË  s    zBarrier.broken)NN)N)rJ   r3   r4   rK   r,   rZ   ry   rz   r{   r|   r   r   r   Úpropertyrw   r   r   r   r   r   r    r   7  s   


	c               @   s   e Zd ZdS )r   N)rJ   r3   r4   r   r   r   r    r   Ñ  s   ú	Thread-%dc             C   s
   | t   S )N)Ú_counter)Útemplater   r   r    Ú_newnameØ  s    r   c               @   sþ   e Zd ZdZdZejZd6ddddZdd	 Z	d
d Z
dd Zdd Zdd Zdd Zdd Zdd Zdd Zdd Zd7ddZd8d d!Zed"d# Zejd$d# Zed%d& Zd'd( Zd)d* Zed+d, Zejd-d, Zd.d/ Zd0d1 Zd2d3 Zd4d5 ZdS )9r   a  A class that represents a thread of control.

    This class can be safely subclassed in a limited fashion. There are two ways
    to specify the activity: by passing a callable object to the constructor, or
    by overriding the run() method in a subclass.

    FNr   )Údaemonc            C   s   |dkst d|dkri }|| _t|p,t | _|| _|| _|dk	rN|| _n
t j	| _d| _
d| _t | _d| _d| _tj| _t | ¡ dS )aK  This constructor should always be called with keyword arguments. Arguments are:

        *group* should be None; reserved for future extension when a ThreadGroup
        class is implemented.

        *target* is the callable object to be invoked by the run()
        method. Defaults to None, meaning nothing is called.

        *name* is the thread name. By default, a unique name is constructed of
        the form "Thread-N" where N is a small decimal number.

        *args* is the argument tuple for the target invocation. Defaults to ().

        *kwargs* is a dictionary of keyword arguments for the target
        invocation. Defaults to {}.

        If a subclass overrides the constructor, it must make sure to invoke
        the base class constructor (Thread.__init__()) before doing anything
        else to the thread.

        Nz#group argument must be None for nowFT)r~   Ú_targetÚstrr   Ú_nameÚ_argsÚ_kwargsÚ	_daemonicr   r   Ú_identÚ_tstate_lockr   Ú_startedÚ_is_stoppedÚ_initializedÚ_sysÚstderrÚ_stderrÚ	_danglingÚadd)r+   ÚgroupÚtargetr0   r$   r%   r   r   r   r    r,   ö  s"    
zThread.__init__c             C   s(   | j  ¡  |r|  ¡  nd| _d | _d S )NT)r   rm   Ú_set_tstate_lockr   r   )r+   Úis_aliver   r   r    rm   #  s
    

zThread._reset_internal_locksc             C   sl   | j stdd}| j ¡ r d}|  ¡  | jr2d}| jr@|d7 }| jd k	rX|d| j 7 }d| jj	| j
|f S )Nz Thread.__init__() was not calledÚinitialÚstartedÚstoppedz daemonz %sz<%s(%s, %s)>)r   r~   r   rn   r    r   r   r   r2   rJ   r   )r+   Ústatusr   r   r    r8   /  s    

zThread.__repr__c             C   s   | j std| j ¡ r tdt | t| < W dQ R X yt| jd W n, tk
rt   t t| = W dQ R X  Y nX | j 	¡  dS )a-  Start the thread's activity.

        It must be called at most once per thread object. It arranges for the
        object's run() method to be invoked in a separate thread of control.

        This method will raise a RuntimeError if called more than once on the
        same thread object.

        zthread.__init__() not calledz threads can only be started onceNr   )
r   r@   r   rn   Ú_active_limbo_lockÚ_limboÚ_start_new_threadÚ
_bootstrapÚ	ExceptionrZ   )r+   r   r   r    Ústart=  s    

zThread.startc             C   s.   z| j r| j | j| j W d| ` | `| `X dS )aX  Method representing the thread's activity.

        You may override this method in a subclass. The standard run() method
        invokes the callable object passed to the object's constructor as the
        target argument, if any, with sequential and keyword arguments taken
        from the args and kwargs arguments, respectively.

        N)r   r   r   )r+   r   r   r    ÚrunV  s    	z
Thread.runc             C   s2   y|   ¡  W n    | jr&td kr&d S  Y nX d S )N)Ú_bootstrap_innerr   r   )r+   r   r   r    r¨   g  s    zThread._bootstrapc             C   s   t  | _d S )N)r   r   )r+   r   r   r    Ú
_set_ident{  s    zThread._set_identc             C   s   t  | _| j ¡  dS )z
        Set a lock object which will be released by the interpreter when
        the underlying thread state (see pystate.h) gets deleted.
        N)Ú_set_sentinelr   r;   )r+   r   r   r    r   ~  s    zThread._set_tstate_lockc             C   s  z`|   ¡  |  ¡  | j ¡  t | t| j< t| = W d Q R X trLt	 
t¡ trZt	 t¡ z y|  ¡  W nî tk
r~   Y nÜ   t	r®t	jd k	r®td| jt f t	jd n¦| jd k	rT|  ¡ \}}}ztd| j d | jd td| jd x6|r&td|jjj|j|jjjf | jd |j}qòW td||f | jd | j ¡  W d ~~~X Y nX W d X W d t  ytt = W n   Y nX W d Q R X X d S )NzException in thread %s:
%s)ÚfilezException in thread z2 (most likely raised during interpreter shutdown):z"Traceback (most recent call last):z  File "%s", line %s, in %sz%s: %s)r­   r   r   ro   r¥   r/   r   r¦   r!   r   r   r   r   r«   Ú
SystemExitr   Úprintr0   Ú_format_excr   Ú	_exc_infoÚtb_frameÚf_codeÚco_filenameÚ	tb_linenoÚco_nameÚtb_nextÚflushr   )r+   Úexc_typeÚ	exc_valueÚexc_tbr   r   r    r¬     sV    




zThread._bootstrap_innerc             C   s*   | j }|d k	r| ¡ rtd| _d | _ d S )NT)r   r-   r~   r   )r+   rQ   r   r   r    Ú_stopÈ  s
    zThread._stopc          	   C   s   t  tt = W dQ R X dS )zARemove current thread from the dict of currently running threads.N)r¥   r/   r   )r+   r   r   r    Ú_deleteß  s    zThread._deletec             C   sZ   | j std| j ¡ s td| t kr2td|dkrD|  ¡  n| jt|dd dS )a  Wait until the thread terminates.

        This blocks the calling thread until the thread whose join() method is
        called terminates -- either normally or through an unhandled exception
        or until the optional timeout occurs.

        When the timeout argument is present and not None, it should be a
        floating point number specifying a timeout for the operation in seconds
        (or fractions thereof). As join() always returns None, you must call
        is_alive() after join() to decide whether a timeout happened -- if the
        thread is still alive, the join() call timed out.

        When the timeout argument is not present or None, the operation will
        block until the thread terminates.

        A thread can be join()ed many times.

        join() raises a RuntimeError if an attempt is made to join the current
        thread as that would cause a deadlock. It is also an error to join() a
        thread before it has been started and attempts to do so raises the same
        exception.

        zThread.__init__() not calledz'cannot join thread before it is startedzcannot join current threadNr   )r=   )r   r@   r   rn   r   Ú_wait_for_tstate_lockÚmax)r+   r=   r   r   r    Újoinè  s    


zThread.joinTr9   c             C   s:   | j }|d kr| js6tn| ||¡r6| ¡  |  ¡  d S )N)r   r   r~   r;   rA   r¾   )r+   Úblockr=   rQ   r   r   r    rÀ     s    zThread._wait_for_tstate_lockc             C   s   | j std| jS )z¸A string used for identification purposes only.

        It has no semantics. Multiple threads may be given the same name. The
        initial name is set by the constructor.

        zThread.__init__() not called)r   r~   r   )r+   r   r   r    r0     s    zThread.namec             C   s   | j stdt|| _d S )NzThread.__init__() not called)r   r~   r   r   )r+   r0   r   r   r    r0   '  s    c             C   s   | j std| jS )a4  Thread identifier of this thread or None if it has not been started.

        This is a nonzero integer. See the get_ident() function. Thread
        identifiers may be recycled when a thread exits and another thread is
        created. The identifier is available even after the thread has exited.

        zThread.__init__() not called)r   r~   r   )r+   r   r   r    Úident,  s    	zThread.identc             C   s4   | j std| js| j ¡ s"dS |  d¡ | j S )zöReturn whether the thread is alive.

        This method returns True just before the run() method starts until just
        after the run() method terminates. The module function enumerate()
        returns a list of all alive threads.

        zThread.__init__() not calledF)r   r~   r   r   rn   rÀ   )r+   r   r   r    r    8  s
    
zThread.is_alivec             C   s    ddl }|jdtdd |  ¡ S )zhReturn whether the thread is alive.

        This method is deprecated, use is_alive() instead.
        r   Nz/isAlive() is deprecated, use is_alive() insteadé   )Ú
stacklevel)ÚwarningsÚwarnÚPendingDeprecationWarningr    )r+   rÇ   r   r   r    ÚisAliveF  s    
zThread.isAlivec             C   s   | j std| jS )aÆ  A boolean value indicating whether this thread is a daemon thread.

        This must be set before start() is called, otherwise RuntimeError is
        raised. Its initial value is inherited from the creating thread; the
        main thread is not a daemon thread and therefore all threads created in
        the main thread default to daemon = False.

        The entire Python program exits when no alive non-daemon threads are
        left.

        zThread.__init__() not called)r   r~   r   )r+   r   r   r    r   P  s    zThread.daemonc             C   s*   | j std| j ¡ r td|| _d S )NzThread.__init__() not calledz)cannot set daemon status of active thread)r   r@   r   rn   r   )r+   Údaemonicr   r   r    r   `  s
    
c             C   s   | j S )N)r   )r+   r   r   r    ÚisDaemonh  s    zThread.isDaemonc             C   s
   || _ d S )N)r   )r+   rË   r   r   r    Ú	setDaemonk  s    zThread.setDaemonc             C   s   | j S )N)r0   )r+   r   r   r    ÚgetNamen  s    zThread.getNamec             C   s
   || _ d S )N)r0   )r+   r0   r   r   r    ÚsetNameq  s    zThread.setName)NNNr   N)N)Tr9   ) rJ   r3   r4   rK   r   r   Úexc_infor³   r,   rm   r8   rª   r«   r¨   r­   r   r¬   r¾   r¿   rÂ   rÀ   r   r0   ÚsetterrÄ   r    rÊ   r   rÌ   rÍ   rÎ   rÏ   r   r   r   r    r   ã  s8    ,B	
&

c               @   s*   e Zd ZdZd	ddZdd Zdd ZdS )
r   zÓCall a function after a specified number of seconds:

            t = Timer(30.0, f, args=None, kwargs=None)
            t.start()
            t.cancel()     # stop the timer's action if it's still waiting

    Nc             C   sF   t  | ¡ || _|| _|d k	r"|ng | _|d k	r4|ni | _t | _d S )N)r   r,   ÚintervalÚfunctionr$   r%   r   Úfinished)r+   rÒ   rÓ   r$   r%   r   r   r    r,     s    
zTimer.__init__c             C   s   | j  ¡  dS )z)Stop the timer if it hasn't finished yet.N)rÔ   ro   )r+   r   r   r    Úcancel  s    zTimer.cancelc             C   s6   | j  | j¡ | j  ¡ s(| j| j| j | j  ¡  d S )N)rÔ   rZ   rÒ   rn   rÓ   r$   r%   ro   )r+   r   r   r    r«     s    
z	Timer.run)NN)rJ   r3   r4   rK   r,   rÕ   r«   r   r   r   r    r   v  s   
c               @   s   e Zd Zdd ZdS )Ú_MainThreadc          	   C   sH   t j| ddd |  ¡  | j ¡  |  ¡  t | t| j< W d Q R X d S )NÚ
MainThreadF)r0   r   )	r   r,   r   r   ro   r­   r¥   r/   r   )r+   r   r   r    r,     s    
z_MainThread.__init__N)rJ   r3   r4   r,   r   r   r   r    rÖ     s   rÖ   c               @   s.   e Zd Zdd Zdd Zdd Zd
dd	ZdS )Ú_DummyThreadc          	   C   sD   t j| tddd | j ¡  |  ¡  t | t| j< W d Q R X d S )NzDummy-%dT)r0   r   )	r   r,   r   r   ro   r­   r¥   r/   r   )r+   r   r   r    r,   ©  s
    
z_DummyThread.__init__c             C   s   d S )Nr   )r+   r   r   r    r¾   ±  s    z_DummyThread._stopc             C   s   | j s| j ¡ stdS )NT)r   r   rn   r~   )r+   r   r   r    r    ´  s    z_DummyThread.is_aliveNc             C   s   dst dd S )NFzcannot join a dummy thread)r~   )r+   r=   r   r   r    rÂ   ¸  s    z_DummyThread.join)N)rJ   r3   r4   r,   r¾   r    rÂ   r   r   r   r    rØ   §  s   rØ   c               C   s&   y
t t  S  tk
r    t S X dS )zïReturn the current Thread object, corresponding to the caller's thread of control.

    If the caller's thread of control was not created through the threading
    module, a dummy thread object with limited functionality is returned.

    N)r/   r   r1   rØ   r   r   r   r    r   ¾  s    
c            	   C   s    t  tttt S Q R X dS )zReturn the number of Thread objects currently alive.

    The returned count is equal to the length of the list returned by
    enumerate().

    N)r¥   rR   r/   r¦   r   r   r   r    r	   Ì  s    c               C   s   t t ¡ t t ¡  S )N)Úlistr/   Úvaluesr¦   r   r   r   r    Ú
_enumerateØ  s    rÛ   c            	   C   s(   t  tt ¡ tt ¡  S Q R X dS )zýReturn a list of all Thread objects currently alive.

    The list includes daemonic threads, dummy thread objects created by
    current_thread(), and the main thread. It excludes terminated threads and
    threads that have not yet been started.

    N)r¥   rÙ   r/   rÚ   r¦   r   r   r   r    r   Ü  s    )r   c              C   sZ   t jr
d S t j} | d k	st|  ¡ s(t|  ¡  t  ¡  t }x|rT| ¡  t }q@W d S )N)	Ú_main_threadr   r   r~   r-   rA   r¾   Ú_pickSomeNonDaemonThreadrÂ   )ÚtlockrB   r   r   r    Ú	_shutdownï  s    rß   c              C   s&   x t  D ]} | js|  ¡ r| S qW d S )N)r   r   r    )rB   r   r   r    rÝ     s    rÝ   c               C   s   t S )zReturn the main thread object.

    In normal conditions, the main thread is the thread from which the
    Python interpreter was started.
    )rÜ   r   r   r   r    r   
  s    )Ú_local)r   c           	   C   s®   t  ai } t }|at tt }| t¡ xF|D ]>}||kr`| d¡ t	 }||_
|| |< q4| d¡ | ¡  q4W t ¡  t ¡  t | ¡ ttdks tW dQ R X dS )zL
    Cleanup threading module state that should not exist after a fork.
    TFr:   N)r'   r¥   r   rÜ   ro   rÛ   Úupdater   rm   r   r   r¾   r¦   rp   r/   rR   r~   )Ú
new_activeÚcurrentÚthreadsÚthreadrÄ   r   r   r    Ú_after_fork  s&    






ræ   Úregister_at_fork)Zafter_in_child)r   )OrK   ÚosÚ_osÚsysr   Ú_threadÚtimer   r[   Ú	tracebackr   r²   Ú_weakrefsetr   Ú	itertoolsr   ra   r   r*   Ú_collectionsr   rO   ÚImportErrorÚcollectionsÚ__all__Ústart_new_threadr§   Úallocate_lockr'   r®   r   Úerrorr   r   r"   rN   r   r   r!   r   r   r   r&   r#   r
   r   r   r   r   r@   r   Ú__next__r   r   r¥   r/   r¦   r   r   r   rÖ   rØ   r   ÚcurrentThreadr	   ÚactiveCountrÛ   r   r   rÜ   rß   rÝ   r   rà   r   Z_threading_localræ   Úhasattrrç   r   r   r   r    Ú<module>   s   


q 'P&O 
   
'ã            /   @   sÈ  d Z dZdZddlmZ ddlmZmZ ddl	Z	ddl
mZ ddlmZ ddlZddlZddlZdd	lT e d
ej¡Ze dej¡ZddlZejddddg Z[eeeeeeeeee e!e"e#e$e%e&e'e(e)e*e+e,e-e.e/e0e1e2e3e4e5e6e7e8e9e:e;e<e=e>e?e@eAeBeCeDd.ZEG dd de	 Fdd¡ZGdd ZHdd ZIdd ZJdZKdZLeKeIdeK  eJeL ZMdZNdZOdZPdZQd ZReHeOePeQeRZSd!ZTeHd"d#eJeT ZUd$eT ZVeHeUeVZWeHd%eWd& ZXeHeXeWeSZYd'd( ZZd)d* Z[eHeZ  Z\d+Z]d,Z^d-Z_d.Z`eHe\d/ e\d0 ZaeHe\d1 e\d2 ZbeHd3d4d5d6d7d8d9d:Zcd;ZdeHd<d=d>ZeeHecedeeZfeHeYefebeNZgeMeg ZheHe\d? eHd@d e\dA eHdBd ZieHdCeLeaZjeKeHejeYefeieN Zki Zlx@eZ D ]6Zme]elemd@ < e^elemdB < e_elemd/ < e`elemd0 < qW en Zoen Zpx\eZ D ]RZqx$eqdB eqd@ fD ]Zreo ser¡ qW x$eqd0 eqd/ fD ]Zrep ser¡ q(W qìW dDZtG dEdF dFeuZvG dGdH dHeuZwG dIdJ dJZxdKd ZydLdM ZzdNd Z{dOdP ZdQd Z|dRdS Z}dTdU Z~dVdW ZedXkrÄe  dS )Yao  Tokenization help for Python programs.

tokenize(readline) is a generator that breaks a stream of bytes into
Python tokens.  It decodes the bytes according to PEP-0263 for
determining source file encoding.

It accepts a readline-like method which is called repeatedly to get the
next line of input (or b"" for EOF).  It generates 5-tuples with these
members:

    the token type (see token.py)
    the token (a string)
    the starting (row, column) indices of the token (a 2-tuple of ints)
    the ending (row, column) indices of the token (a 2-tuple of ints)
    the original line (string)

It is designed to match the working of the Python tokenizer exactly, except
that it produces COMMENT tokens for comments and gives type OP for all
operators.  Additionally, all token lists start with an ENCODING token
which tells you which encoding was used to decode the bytes stream.
zKa-Ping Yee <ping@lfw.org>zpGvR, ESR, Tim Peters, Thomas Wouters, Fred Drake, Skip Montanaro, Raymond Hettinger, Trent Nelson, Michael Foordé    )Úopen)ÚlookupÚBOM_UTF8N)ÚTextIOWrapper)Úchain)Ú*z&^[ \t\f]*#.*?coding[:=][ \t]*([-\w.]+)s   ^[ \t\f]*(?:[#\r\n]|$)ÚtokenizeÚdetect_encodingÚ
untokenizeÚ	TokenInfo).ú(ú)ú[ú]ú:ú,ú;ú+ú-r   ú/ú|ú&ú<ú>ú=Ú.ú%Ú{Ú}z==z!=z<=z>=ú~ú^z<<z>>z**z+=z-=z*=z/=z%=z&=z|=z^=z<<=z>>=z**=z//z//=z...z->ú@z@=c               @   s    e Zd Zdd Zedd ZdS )r   c             C   s$   d| j t| j  f }d| j|d S )Nz%d (%s)z8TokenInfo(type=%s, string=%r, start=%r, end=%r, line=%r))Útype)r"   Útok_nameÚ_replace)ÚselfÚannotated_type© r'   úD:\Python\lib\tokenize.pyÚ__repr___   s    zTokenInfo.__repr__c             C   s(   | j tkr| jtkrt| j S | j S d S )N)r"   ÚOPÚstringÚEXACT_TOKEN_TYPES)r%   r'   r'   r(   Ú
exact_typed   s    
zTokenInfo.exact_typeN)Ú__name__Ú
__module__Ú__qualname__r)   Úpropertyr-   r'   r'   r'   r(   r   ^   s   ztype string start end linec              G   s   dd  | ¡ d S )Nr   r   r   )Újoin)Úchoicesr'   r'   r(   Úgroupk   ó    r4   c              G   s   t |  d S )Nr   )r4   )r3   r'   r'   r(   Úanyl   r5   r6   c              G   s   t |  d S )Nú?)r4   )r3   r'   r'   r(   Úmaybem   r5   r8   z[ \f\t]*z	#[^\r\n]*z\\\r?\nz\w+z0[xX](?:_?[0-9a-fA-F])+z0[bB](?:_?[01])+z0[oO](?:_?[0-7])+z(?:0(?:_?0)*|[1-9](?:_?[0-9])*)z[eE][-+]?[0-9](?:_?[0-9])*z)[0-9](?:_?[0-9])*\.(?:[0-9](?:_?[0-9])*)?z\.[0-9](?:_?[0-9])*z[0-9](?:_?[0-9])*z[0-9](?:_?[0-9])*[jJ]z[jJ]c              C   sj   ddddddg} dh}xN| D ]F}x@t  |¡D ]2}x,t jdd	 |D  D ]}| d |¡¡ qFW q,W qW |S )
NÚbÚrÚuÚfÚbrÚfrÚ c             S   s   g | ]}||  ¡ fqS r'   )Úupper)Ú.0Úcr'   r'   r(   ú
<listcomp>   s    z(_all_string_prefixes.<locals>.<listcomp>)Ú
_itertoolsÚpermutationsÚproductÚaddr2   )Ú_valid_string_prefixesÚresultÚprefixÚtr;   r'   r'   r(   Ú_all_string_prefixes   s    
rL   c             C   s   t  | t j¡S )N)ÚreÚcompileÚUNICODE)Úexprr'   r'   r(   Ú_compile   s    rQ   z[^'\\]*(?:\\.[^'\\]*)*'z[^"\\]*(?:\\.[^"\\]*)*"z%[^'\\]*(?:(?:\\.|'(?!''))[^'\\]*)*'''z%[^"\\]*(?:(?:\\.|"(?!""))[^"\\]*)*"""z'''z"""z'[^\n'\\]*(?:\\.[^\n'\\]*)*'z"[^\n"\\]*(?:\\.[^\n"\\]*)*"z\*\*=?z>>=?z<<=?z!=z//=?z->z[+\-*/%&@|^=<>]=?r   z[][(){}]z\r?\nz\.\.\.z[:;.,@]z'[^\n'\\]*(?:\\.[^\n'\\]*)*ú'z"[^\n"\\]*(?:\\.[^\n"\\]*)*ú"z
\\\r?\n|\Zé   c               @   s   e Zd ZdS )Ú
TokenErrorN)r.   r/   r0   r'   r'   r'   r(   rU   Ô   s    rU   c               @   s   e Zd ZdS )ÚStopTokenizingN)r.   r/   r0   r'   r'   r'   r(   rV   Ö   s    rV   c               @   s,   e Zd Zdd Zdd Zdd Zdd Zd	S )
ÚUntokenizerc             C   s   g | _ d| _d| _d | _d S )Né   r   )ÚtokensÚprev_rowÚprev_colÚencoding)r%   r'   r'   r(   Ú__init__Û   s    zUntokenizer.__init__c             C   s   |\}}|| j k s&|| j kr>|| jk r>td ||| j | j¡|| j  }|rb| j d| ¡ d| _|| j }|r| j d| ¡ d S )Nz+start ({},{}) precedes previous end ({},{})z\
r   ú )rZ   r[   Ú
ValueErrorÚformatrY   Úappend)r%   ÚstartÚrowÚcolÚ
row_offsetÚ
col_offsetr'   r'   r(   Úadd_whitespaceá   s    

zUntokenizer.add_whitespacec             C   s4  t |}g }d}x|D ]
}t|dkr8|  ||¡ P |\}}}}	}
|tkrV|| _q|tkr`P |tkrv| |¡ qnl|tkr| 	¡  |	\| _
| _qnL|ttfkr¨d}n:|râ|râ|d }|d t|krÞ| j |¡ t|| _d}|  |¡ | j |¡ |	\| _
| _|ttfkr|  j
d7  _
d| _qW d | j¡S )NFé   TéÿÿÿÿrX   r   r?   )ÚiterÚlenÚcompatÚENCODINGr\   Ú	ENDMARKERÚINDENTra   ÚDEDENTÚpoprZ   r[   ÚNEWLINEÚNLrY   rg   r2   )r%   ÚiterableÚitÚindentsÚ	startlinerK   Útok_typeÚtokenrb   ÚendÚlineÚindentr'   r'   r(   r
   î   sF    



zUntokenizer.untokenizec       
      C   sè   g }| j j}|d ttfk}d}xÂt|g|D ]²}|d d \}}	|tkrR|	| _q.|ttfkrf|	d7 }	|t	kr|rzd|	 }	d}nd}|t
kr| |	¡ q.n>|tkr®| ¡  q.n*|ttfkrÀd}n|rØ|rØ||d  d}||	 q.W d S )Nr   Frh   r^   Tri   )rY   ra   rr   rs   r   rm   r\   ÚNAMEÚNUMBERÚSTRINGro   rp   rq   )
r%   ry   rt   rv   Útoks_appendrw   Ú
prevstringÚtokÚtoknumÚtokvalr'   r'   r(   rl     s8    
zUntokenizer.compatN)r.   r/   r0   r]   rg   r
   rl   r'   r'   r'   r(   rW   Ù   s   %rW   c             C   s*   t  }| | ¡}|jdk	r&| |j¡}|S )a  Transform tokens back into Python source code.
    It returns a bytes object, encoded using the ENCODING
    token, which is the first token sequence output by tokenize.

    Each element returned by the iterable must be a token sequence
    with at least two elements, a token number and token value.  If
    only two tokens are passed, the resulting output is poor.

    Round-trip invariant for full input:
        Untokenized source will match input source exactly

    Round-trip invariant for limited input:
        # Output bytes will tokenize back to the input
        t1 = [tok[:2] for tok in tokenize(f.readline)]
        newcode = untokenize(t1)
        readline = BytesIO(newcode).readline
        t2 = [tok[:2] for tok in tokenize(readline)]
        assert t1 == t2
    N)rW   r
   r\   Úencode)rt   ÚutÚoutr'   r'   r(   r
   8  s
    

c             C   sH   | dd   ¡  dd¡}|dks*| d¡r.dS |dks@| d¡rDd	S | S )
z(Imitates get_normal_name in tokenizer.c.Né   Ú_r   zutf-8zutf-8-)zlatin-1z
iso-8859-1ziso-latin-1)zlatin-1-ziso-8859-1-ziso-latin-1-z
iso-8859-1)ÚlowerÚreplaceÚ
startswith)Úorig_encÚencr'   r'   r(   Ú_get_normal_nameS  s    
r   c                sÞ   yj jW n tk
r$   dY nX d d}d}fdd} fdd}| }| t¡rpd |d	d }d
}|s||g fS ||}|r||gfS t |¡s¦||gfS | }|sº||gfS ||}|rÒ|||gfS |||gfS )a  
    The detect_encoding() function is used to detect the encoding that should
    be used to decode a Python source file.  It requires one argument, readline,
    in the same way as the tokenize() generator.

    It will call readline a maximum of twice, and return the encoding used
    (as a string) and a list of any lines (left as bytes) it has read in.

    It detects the encoding from the presence of a utf-8 bom or an encoding
    cookie as specified in pep-0263.  If both a bom and a cookie are present,
    but disagree, a SyntaxError will be raised.  If the encoding cookie is an
    invalid charset, raise a SyntaxError.  Note that if a utf-8 bom is found,
    'utf-8-sig' is returned.

    If no encoding is specified, then the default of 'utf-8' will be returned.
    NFzutf-8c                  s    y  S  t k
r   dS X d S )Nr5   )ÚStopIterationr'   )Úreadliner'   r(   Úread_or_stopv  s    z%detect_encoding.<locals>.read_or_stopc                sä   y|   d¡}W n4 tk
rB   d}d k	r6d |¡}t|Y nX t |¡}|sVd S t| d¡}yt|}W n: t	k
rª   d krd| }nd |¡}t|Y nX  rà|dkrØd krÆd}n
d ¡}t||d	7 }|S )
Nzutf-8z'invalid or missing encoding declarationz{} for {!r}rX   zunknown encoding: zunknown encoding for {!r}: {}zencoding problem: utf-8z encoding problem for {!r}: utf-8z-sig)
ÚdecodeÚUnicodeDecodeErrorr`   ÚSyntaxErrorÚ	cookie_reÚmatchr   r4   r   ÚLookupError)r{   Úline_stringÚmsgr   r\   Úcodec)Ú	bom_foundÚfilenamer'   r(   Úfind_cookie|  s6    


z$detect_encoding.<locals>.find_cookieTé   z	utf-8-sig)Ú__self__ÚnameÚAttributeErrorr   r   Úblank_rer   )r   r\   Údefaultr   r   ÚfirstÚsecondr'   )r   r   r   r(   r	   ^  s8    
&




c             C   sV   t | d}y0t|j\}}| d¡ t||dd}d|_|S    | ¡   Y nX dS )zXOpen a file in read only mode using the encoding detected by
    detect_encoding().
    Úrbr   T)Úline_bufferingr:   N)Ú_builtin_openr	   r   Úseekr   ÚmodeÚclose)r   Úbufferr\   ÚlinesÚtextr'   r'   r(   r   »  s    

r   c             C   sB   ddl m}m} t| \}}t| d}|d}t||||j|S )aÝ  
    The tokenize() generator requires one argument, readline, which
    must be a callable object which provides the same interface as the
    readline() method of built-in file objects.  Each call to the function
    should return one line of input as bytes.  Alternatively, readline
    can be a callable function terminating with StopIteration:
        readline = open(myfile, 'rb').__next__  # Example of alternate readline

    The generator produces 5-tuples with these members: the token type; the
    token string; a 2-tuple (srow, scol) of ints specifying the row and
    column where the token begins in the source; a 2-tuple (erow, ecol) of
    ints specifying the row and column where the token ends in the source;
    and the line on which the token was found.  The line passed is the
    logical line; continuation lines are included.

    The first token sequence will always be an ENCODING token
    which tells you which encoding was used to decode the bytes stream.
    r   )r   Úrepeatr5   )Ú	itertoolsr   r°   r	   rj   Ú	_tokenizeÚ__next__)r   r   r°   r\   ÚconsumedÚrl_genÚemptyr'   r'   r(   r   Ë  s
    
c             c   s  d } }}d}d\}}d }dg}	|d k	rH|dkr6d}t t|dddV  d}
d}xªy|}
|  }W n tk
rz   d}Y nX |d k	r| |¡}|d	7 }dt| }}|rt|s¸td
|| |¡}|r
| d¡ }}t t||d |  |||f|| V  d\}}d }nf|r^|dd  dkr^|dd  dkr^t t	|| ||t|f|V  d}d }qTn|| }|| }qTnÀ|dkr|s|sP d}xf||k rö|| dkr´|d	7 }n6|| dkrÔ|t
 d	 t
 }n|| dkrèd}nP |d	7 }qW ||krP || dkr|| dkr`||d   d¡}t t|||f||t| f|V  |t|7 }t t||d  ||f|t|f|V  qT||	d krÂ|	 |¡ t t|d | |df||f|V  xp||	d k r||	krîtdd|||f|	d d }	t td||f||f|V  qÄW n|s0td|dfd}xÂ||k røtt ||¡}|rÊ| d	¡\}}||f||f|  }}}||krq8||| ||  }}||ksÊ|dkrà|dkrà|dkràt t||||V  qô|dkr|dkrt t||||V  nt t||||V  qô|dkrN| d¡r8tt t||||V  qô|tkrÂtt| }| ||¡}|r¤| d¡}||| }t t||||f|V  n||f}||d  }|}P qô|tksð|d d tksð|d d tkrb|d dkrN||f}tt |¡p0t |d	 ¡p0t |d ¡}||d  d	 }}|}P nt t||||V  nf| ¡ rt t||||V  nH|dkrd	}n8|dkr¤|d	7 }n|d kr¶|d	8 }t t||||V  n*t t	|| ||f||d	 f|V  |d	7 }q8W qTW |
r@|
d dkr@t td|d	 t|
f|d	 t|
d	 fdV  x0|	d	d  D ] }t td|df|dfdV  qNW t t d|df|dfdV  d S )!Nr   Ú
0123456789)r?   r   z	utf-8-sigzutf-8)r   r   r?   r5   rX   zEOF in multi-line stringéþÿÿÿz\
éýÿÿÿz\
r^   ú	úz#
ú#z
ri   z3unindent does not match any outer indentation levelz
<tokenize>zEOF in multi-line statementr   z...Ú
rh   r   ú\z([{z)]})!r   rm   r   r   rk   rU   r   rz   r   Ú
ERRORTOKENÚtabsizeÚrstripÚCOMMENTrs   ra   ro   ÚIndentationErrorrp   rQ   ÚPseudoTokenÚspanr~   rr   ÚendswithÚAssertionErrorÚtriple_quotedÚendpatsÚsingle_quotedÚgetÚisidentifierr}   r*   rn   )r   r\   ÚlnumÚparenlevÚ	continuedÚnumcharsÚcontstrÚneedcontÚcontlinerv   Ú	last_liner{   ÚposÚmaxÚstrstartÚendprogÚendmatchrz   ÚcolumnÚcomment_tokenÚpseudomatchrb   ÚsposÚeposry   Úinitialr|   r'   r'   r(   r²   ç  s   




*
 


"
"













. r²   c             C   s
   t | d S )N)r²   )r   r'   r'   r(   Úgenerate_tokens   s    rà   c           
      s(  dd l } dd  d fdd	}| jdd}|jdd	d
dd |jdddddd | ¡ }y|jr|j}t|d}tt|j}W d Q R X nd}t	t
jjd }xF|D ]>}|j}|jrº|j}d|j|j  }	td|	t| |jf  q¤W W n8 tk
r: }
 z0|
jd dd \}}||
jd |||f W d d }
~
X Y nê tk
r }
 z(|
jd \}}||
jd |||f W d d }
~
X Y n¤ tk
r¬ }
 z||
| W d d }
~
X Y nx tk
rÖ }
 z||
 W d d }
~
X Y nN tk
rò   td Y n2 tk
r" }
 z d|
   W d d }
~
X Y nX d S )Nr   c             S   s   t | tjd d S )N)Úfile)ÚprintÚsysÚstderr)Úmessager'   r'   r(   Úperror§  s    zmain.<locals>.perrorc                sR   |r"|f| | f } d|  n"|r8 d|| f  n d|   t  d¡ d S )Nz%s:%d:%d: error: %sz%s: error: %sz	error: %srX   )rã   Úexit)rå   r   ÚlocationÚargs)ræ   r'   r(   Úerrorª  s    zmain.<locals>.errorzpython -m tokenize)Úprogr   r7   zfilename.pyz'the file to tokenize; defaults to stdin)ÚdestÚnargsÚmetavarÚhelpz-ez--exactÚexactÚ
store_truez(display token names using the exact type)rì   Úactionrï   r§   z<stdin>z%d,%d-%d,%d:z%-20s%-15s%-15rrX   r   zinterrupted
zunexpected error: %s)NN)ÚargparseÚArgumentParserÚadd_argumentÚ
parse_argsr   r©   Úlistr   r   r²   rã   Ústdinr"   rð   r-   rb   rz   râ   r#   r+   rÃ   ré   rU   r   ÚOSErrorÚKeyboardInterruptÚ	Exception)ró   rê   Úparserré   r   r<   rY   ry   Ú
token_typeÚtoken_rangeÚerrr{   rÚ   r'   )ræ   r(   Úmain£  sN    
&&r   Ú__main__)Ú__doc__Ú
__author__Ú__credits__Úbuiltinsr   r©   Úcodecsr   r   ÚcollectionsÚior   r±   r   rD   rM   rã   ry   rN   ÚASCIIr   r£   Ú__all__ÚLPARÚRPARÚLSQBÚRSQBÚCOLONÚCOMMAÚSEMIÚPLUSÚMINUSÚSTARÚSLASHÚVBARÚAMPERÚLESSÚGREATERÚEQUALÚDOTÚPERCENTÚLBRACEÚRBRACEÚEQEQUALÚNOTEQUALÚ	LESSEQUALÚGREATEREQUALÚTILDEÚ
CIRCUMFLEXÚ	LEFTSHIFTÚ
RIGHTSHIFTÚ
DOUBLESTARÚ	PLUSEQUALÚMINEQUALÚ	STAREQUALÚ
SLASHEQUALÚPERCENTEQUALÚ
AMPEREQUALÚ	VBAREQUALÚCIRCUMFLEXEQUALÚLEFTSHIFTEQUALÚRIGHTSHIFTEQUALÚDOUBLESTAREQUALÚDOUBLESLASHÚDOUBLESLASHEQUALÚELLIPSISÚRARROWÚATÚATEQUALr,   Ú
namedtupler   r4   r6   r8   Ú
WhitespaceÚCommentÚIgnoreÚNameÚ	HexnumberÚ	BinnumberÚ	OctnumberÚ	DecnumberÚ	IntnumberÚExponentÚ
PointfloatÚExpfloatÚFloatnumberÚ
ImagnumberÚNumberrL   rQ   ÚStringPrefixÚSingleÚDoubleÚSingle3ÚDouble3ÚTripleÚStringÚOperatorÚBracketÚSpecialÚFunnyÚ
PlainTokenÚTokenÚContStrÚPseudoExtrasrÄ   rÉ   Ú_prefixÚsetrÊ   rÈ   rK   r;   rG   rÀ   rû   rU   rV   rW   r
   r   r	   r   r²   rà   r   r.   r'   r'   r'   r(   Ú<module>   s  





_] :<
ã               @   s:  d Z ddlZddlZddlZddlZddddddd	d
dddddddddddgZd3ddZdd Zd4ddZd5dd	Z	d6ddZ
dZdZd7ddZd8d dZd!d Zd"d# Zd$d% Zd9d&d
Zd:d'dZd;d(dZd<d)dZd=d*dZd>d+dZd,d ZG d-d dZd.d Zd/d Zd0ZG d1d deZG d2d dZdS )?z@Extract, format and print information about Python stack traces.é    NÚextract_stackÚ
extract_tbÚformat_exceptionÚformat_exception_onlyÚformat_listÚformat_stackÚ	format_tbÚ	print_excÚ
format_excÚprint_exceptionÚ
print_lastÚprint_stackÚprint_tbÚclear_framesÚFrameSummaryÚStackSummaryÚTracebackExceptionÚ
walk_stackÚwalk_tbc             C   s8   |dkrt j}x$t | ¡ ¡ D ]}t||dd qW dS )zyPrint the list of tuples as returned by extract_tb() or
    extract_stack() as a formatted stack trace to the given file.NÚ )ÚfileÚend)ÚsysÚstderrr   Ú	from_listÚformatÚprint)Úextracted_listr   Úitem© r   úD:\Python\lib\traceback.pyÚ
print_list   s    r!   c             C   s   t  | ¡ ¡ S )a×  Format a list of tuples or FrameSummary objects for printing.

    Given a list of tuples or FrameSummary objects as returned by
    extract_tb() or extract_stack(), return a list of strings ready
    for printing.

    Each string in the resulting list corresponds to the item with the
    same index in the argument list.  Each string ends in a newline;
    the strings may contain internal newlines as well, for those items
    whose source text line is not None.
    )r   r   r   )r   r   r   r    r      s    c             C   s   t t| |d|d dS )a  Print up to 'limit' stack trace entries from the traceback 'tb'.

    If 'limit' is omitted or None, all entries are printed.  If 'file'
    is omitted or None, the output goes to sys.stderr; otherwise
    'file' should be an open file or file-like object with a write()
    method.
    )Úlimit)r   N)r!   r   )Útbr"   r   r   r   r    r   -   s    c             C   s   t | |d ¡ S )z5A shorthand for 'format_list(extract_tb(tb, limit))'.)r"   )r   r   )r#   r"   r   r   r    r   7   s    c             C   s   t jt| |dS )a#  
    Return a StackSummary object representing a list of
    pre-processed entries from traceback.

    This is useful for alternate formatting of stack traces.  If
    'limit' is omitted or None, all entries are extracted.  A
    pre-processed stack trace entry is a FrameSummary object
    containing attributes filename, lineno, name, and line
    representing the information that is usually printed for a stack
    trace.  The line is a string with leading and trailing
    whitespace stripped; if the source is not available it is None.
    )r"   )r   Úextractr   )r#   r"   r   r   r    r   ;   s    zG
The above exception was the direct cause of the following exception:

zF
During handling of the above exception, another exception occurred:

Tc             C   sF   |dkrt j}x2tt||||dj|dD ]}t||dd q,W dS )aù  Print exception up to 'limit' stack trace entries from 'tb' to 'file'.

    This differs from print_tb() in the following ways: (1) if
    traceback is not None, it prints a header "Traceback (most recent
    call last):"; (2) it prints the exception type and value after the
    stack trace; (3) if type is SyntaxError and value has the
    appropriate format, it prints the line where the syntax error
    occurred with a caret on the next line indicating the approximate
    position of the error.
    N)r"   )Úchainr   )r   r   )r   r   r   Útyper   r   )ÚetypeÚvaluer#   r"   r   r%   Úliner   r   r    r   W   s
    c             C   s    t tt||||dj|dS )az  Format a stack trace and the exception information.

    The arguments have the same meaning as the corresponding arguments
    to print_exception().  The return value is a list of strings, each
    ending in a newline and some containing internal newlines.  When
    these lines are concatenated and printed, exactly the same text is
    printed as does print_exception().
    )r"   )r%   )Úlistr   r&   r   )r'   r(   r#   r"   r%   r   r   r    r   l   s    c             C   s   t t| |d ¡ S )a  Format the exception part of a traceback.

    The arguments are the exception type and value such as given by
    sys.last_type and sys.last_value. The return value is a list of
    strings, each ending in a newline.

    Normally, the list contains a single string; however, for
    SyntaxError exceptions, it contains several lines that (when
    printed) display detailed information about where the syntax
    error occurred.

    The message indicating which exception occurred is always the last
    string in the list.

    N)r*   r   r   )r'   r(   r   r   r    r   |   s    c             C   s.   t |}|d ks|sd|  }nd| |f }|S )Nz%s
z%s: %s
)Ú	_some_str)r'   r(   Úvaluestrr)   r   r   r    Ú_format_final_exc_line   s
    
r-   c             C   s"   yt | S    dt| j S d S )Nz<unprintable %s object>)Ústrr&   Ú__name__)r(   r   r   r    r+      s    r+   c             C   s   t t ¡ | ||d dS )z>Shorthand for 'print_exception(*sys.exc_info(), limit, file)'.)r"   r   r%   N)r   r   Úexc_info)r"   r   r%   r   r   r    r	   ¡   s    c             C   s   d  tt ¡ | |d¡S )z%Like print_exc() but return a string.r   )r"   r%   )Újoinr   r   r0   )r"   r%   r   r   r    r
   ¥   s    c             C   s.   t tdstdttjtjtj| || dS )znThis is a shorthand for 'print_exception(sys.last_type,
    sys.last_value, sys.last_traceback, limit, file)'.Ú	last_typezno last exceptionN)Úhasattrr   Ú
ValueErrorr   r2   Ú
last_valueÚlast_traceback)r"   r   r%   r   r   r    r   ©   s    
c             C   s*   | dkrt  ¡ j} tt| |d|d dS )z÷Print a stack trace from its invocation point.

    The optional 'f' argument can be used to specify an alternate
    stack frame at which to start. The optional 'limit' and 'file'
    arguments have the same meaning as for print_exception().
    N)r"   )r   )r   Ú	_getframeÚf_backr!   r   )Úfr"   r   r   r   r    r   µ   s    
c             C   s"   | dkrt  ¡ j} tt| |dS )z5Shorthand for 'format_list(extract_stack(f, limit))'.N)r"   )r   r7   r8   r   r   )r9   r"   r   r   r    r   Á   s    
c             C   s0   | dkrt  ¡ j} tjt| |d}| ¡  |S )as  Extract the raw traceback from the current stack frame.

    The return value has the same format as for extract_tb().  The
    optional 'f' and 'limit' arguments have the same meaning as for
    print_stack().  Each item in the list is a quadruple (filename,
    line number, function name, text), and the entries are in order
    from oldest to newest stack frame.
    N)r"   )r   r7   r8   r   r$   r   Úreverse)r9   r"   Ústackr   r   r    r   È   s
    	
c             C   s<   x6| dk	r6y| j  ¡  W n tk
r,   Y nX | j} qW dS )zEClear all references to local variables in the frames of a traceback.N)Útb_frameÚclearÚRuntimeErrorÚtb_next)r#   r   r   r    r   Ø   s    
c               @   sR   e Zd ZdZdZddddddZdd	 Zd
d Zdd Zdd Z	e
dd ZdS )r   a,  A single frame from a traceback.

    - :attr:`filename` The filename for the frame.
    - :attr:`lineno` The line within filename for the frame that was
      active when the frame was captured.
    - :attr:`name` The name of the function or method that was executing
      when the frame was captured.
    - :attr:`line` The text from the linecache module for the
      of code that was running when the frame was captured.
    - :attr:`locals` Either None if locals were not supplied, or a dict
      mapping the name to the repr() of the variable.
    )ÚfilenameÚlinenoÚnameÚ_lineÚlocalsTN)Úlookup_linerD   r)   c            C   sB   || _ || _|| _|| _|r"| j |r8dd | ¡ D nd| _dS )a  Construct a FrameSummary.

        :param lookup_line: If True, `linecache` is consulted for the source
            code line. Otherwise, the line will be looked up when first needed.
        :param locals: If supplied the frame locals, which will be captured as
            object representations.
        :param line: If provided, use this instead of looking up the line in
            the linecache.
        c             S   s   i | ]\}}t ||qS r   )Úrepr)Ú.0ÚkÚvr   r   r    ú
<dictcomp>  s    z)FrameSummary.__init__.<locals>.<dictcomp>N)r@   rA   rB   rC   r)   ÚitemsrD   )Úselfr@   rA   rB   rE   rD   r)   r   r   r    Ú__init__ó   s    zFrameSummary.__init__c             C   s`   t |tr:| j|jko8| j|jko8| j|jko8| j|jkS t |tr\| j| j| j| jf|kS tS )N)	Ú
isinstancer   r@   rA   rB   rD   Útupler)   ÚNotImplemented)rL   Úotherr   r   r    Ú__eq__  s    

zFrameSummary.__eq__c             C   s   | j | j| j| jf| S )N)r@   rA   rB   r)   )rL   Úposr   r   r    Ú__getitem__  s    zFrameSummary.__getitem__c             C   s   t | j| j| j| jgS )N)Úiterr@   rA   rB   r)   )rL   r   r   r    Ú__iter__  s    zFrameSummary.__iter__c             C   s   dj | j| j| jdS )Nz7<FrameSummary file {filename}, line {lineno} in {name}>)r@   rA   rB   )r   r@   rA   rB   )rL   r   r   r    Ú__repr__  s    zFrameSummary.__repr__c             C   s&   | j d kr t | j| j¡ ¡ | _ | j S )N)rC   Ú	linecacheÚgetliner@   rA   Ústrip)rL   r   r   r    r)     s    
zFrameSummary.line)r/   Ú
__module__Ú__qualname__Ú__doc__Ú	__slots__rM   rR   rT   rV   rW   Úpropertyr)   r   r   r   r    r   ã   s   
c             c   s8   | dkrt  ¡ jj} x| dk	r2| | jfV  | j} qW dS )zÖWalk a stack yielding the frame and line number for each frame.

    This will follow f.f_back from the given frame. If no frame is given, the
    current stack is used. Usually used with StackSummary.extract.
    N)r   r7   r8   Úf_lineno)r9   r   r   r    r   !  s
    
c             c   s&   x | dk	r | j | jfV  | j} qW dS )zÈWalk a traceback yielding the frame and line number for each frame.

    This will follow tb.tb_next (and thus is in the opposite order to
    walk_stack). Usually used with StackSummary.extract.
    N)r<   Ú	tb_linenor?   )r#   r   r   r    r   .  s    
é   c               @   s:   e Zd ZdZeddddddZedd	 Zd
d ZdS )r   zA stack of frames.NTF)r"   Úlookup_linesÚcapture_localsc         
   C   sú   |dkr(t tdd}|dk	r(|dk r(d}|dk	rV|dkrFt ||¡}ntj|| d}|  }t }xb|D ]Z\}}|j}	|	j}
|	j	}| 
|
¡ t |
|j¡ |r¦|j}nd}| t|
||d|d¡ qhW x|D ]}
t |
¡ qÌW |röx|D ]
}|j qèW |S )a?  Create a StackSummary from a traceback or stack object.

        :param frame_gen: A generator that yields (frame, lineno) tuples to
            include in the stack.
        :param limit: None to include all frames or the number of frames to
            include.
        :param lookup_lines: If True, lookup lines for each frame immediately,
            otherwise lookup is deferred until the frame is rendered.
        :param capture_locals: If True, the local variables from each frame will
            be captured as object representations into the FrameSummary.
        NÚtracebacklimitr   )ÚmaxlenF)rE   rD   )Úgetattrr   Ú	itertoolsÚisliceÚcollectionsÚdequeÚsetÚf_codeÚco_filenameÚco_nameÚaddrX   Ú	lazycacheÚ	f_globalsÚf_localsÚappendr   Ú
checkcacher)   )ÚklassÚ	frame_genr"   rc   rd   ÚresultÚfnamesr9   rA   Úcor@   rB   rs   r   r   r    r$   >  s6    



zStackSummary.extractc          	   C   sP   t  }xD|D ]<}t|tr&| |¡ q|\}}}}| t||||d¡ qW |S )z
        Create a StackSummary object from a supplied list of
        FrameSummary objects or old-style list of tuples.
        )r)   )r   rN   r   rt   )rv   Úa_listrx   Úframer@   rA   rB   r)   r   r   r    r   n  s    


zStackSummary.from_listc       
      C   sx  g }d}d}d}d}x$| D ]}|dksX||j ksX|dksX||jksX|dksX||jkr¢|tkr|t8 }| d| d|dkrdnd d¡ |j }|j}|j}d}|d7 }|tkr´qg }| d	 |j |j|j¡¡ |jrî| d
 |j ¡ ¡¡ |jr(x0t	|j 
¡ D ]\}}	| dj||	d¡ qW | d |¡¡ qW |tkrt|t8 }| d| d|dkrhdnd d¡ |S )a   Format the stack ready for printing.

        Returns a list of strings ready for printing.  Each string in the
        resulting list corresponds to a single frame from the stack.
        Each string ends in a newline; the strings may contain internal
        newlines as well, for those items with source text lines.

        For long sequences of the same frame and line, the first few
        repetitions are shown, followed by a summary line stating the exact
        number of further repetitions.
        Nr   z  [Previous line repeated z
 more timeé   Úsr   z]
z  File "{}", line {}, in {}
z    {}
z    {name} = {value}
)rB   r(   )r@   rA   rB   Ú_RECURSIVE_CUTOFFrt   r   r)   rZ   rD   ÚsortedrK   r1   )
rL   rx   Ú	last_fileÚ	last_lineÚ	last_nameÚcountr|   ÚrowrB   r(   r   r   r    r     sD     
"zStackSummary.format)r/   r[   r\   r]   Úclassmethodr$   r   r   r   r   r   r    r   ;  s   .c               @   s^   e Zd ZdZdddddddZedd	 Zd
d Zdd Zdd Z	dd Z
ddddZdS )r   aÌ  An exception ready for rendering.

    The traceback module captures enough attributes from the original exception
    to this intermediary form to ensure that no references are held, while
    still being able to fully print or format it.

    Use `from_exception` to create TracebackException instances from exception
    objects, or the constructor to create TracebackException instances from
    individual components.

    - :attr:`__cause__` A TracebackException of the original *__cause__*.
    - :attr:`__context__` A TracebackException of the original *__context__*.
    - :attr:`__suppress_context__` The *__suppress_context__* value from the
      original exception.
    - :attr:`stack` A `StackSummary` representing the traceback.
    - :attr:`exc_type` The class of the original traceback.
    - :attr:`filename` For syntax errors - the filename where the error
      occurred.
    - :attr:`lineno` For syntax errors - the linenumber where the error
      occurred.
    - :attr:`text` For syntax errors - the text where the error
      occurred.
    - :attr:`offset` For syntax errors - the offset into the text where the
      error occurred.
    - :attr:`msg` For syntax errors - the compiler error message.
    NTF)r"   rc   rd   Ú_seenc      
   	   C   s>  |d krt  }| t|¡ |r\|jd k	r\t|j|kr\tt|j|j|jj|d||d}nd }|r |jd k	r t|j|kr tt|j|j|jj|d||d}	nd }	|| _|| _|	| _|rÀ|j	nd| _	t
jt||||d| _|| _t|| _|r,t|tr,|j| _t|j| _|j| _|j| _|j| _|r:|  ¡  d S )NF)r"   rc   rd   r   )r"   rc   rd   )rl   rp   ÚidÚ	__cause__r   r&   Ú__traceback__Ú__context__Úexc_tracebackÚ__suppress_context__r   r$   r   r;   Úexc_typer+   Ú_strÚ
issubclassÚSyntaxErrorr@   r.   rA   ÚtextÚoffsetÚmsgÚ_load_lines)
rL   r   Ú	exc_valuer   r"   rc   rd   r   ÚcauseÚcontextr   r   r    rM   Ñ  sT    




zTracebackException.__init__c             O   s   | t |||jf||S )z.Create a TracebackException from an exception.)r&   r   )ÚclsÚexcÚargsÚkwargsr   r   r    Úfrom_exception  s    z!TracebackException.from_exceptionc             C   s:   x| j D ]
}|j qW | jr&| j ¡  | jr6| j ¡  dS )z7Private API. force all lines in the stack to be loaded.N)r;   r)   r   r   r   )rL   r|   r   r   r    r     s    

zTracebackException._load_linesc             C   s   | j |j kS )N)Ú__dict__)rL   rQ   r   r   r    rR     s    zTracebackException.__eq__c             C   s   | j S )N)r   )rL   r   r   r    Ú__str__  s    zTracebackException.__str__c       	      c   s  | j dkrtd| jV  dS | j j}| j j}|dkr@|d | }t| j ts^t|| jV  dS | jpfd}t| j	ptd}d 
||¡V  | j}| j}|dk	rüd 
| ¡ ¡V  |dk	rü| d¡}tt||d	 }|d|  ¡ }d
d |D }d 
d |¡¡V  | jpd}d 
||¡V  dS )aÒ  Format the exception part of the traceback.

        The return value is a generator of strings, each ending in a newline.

        Normally, the generator emits a single string; however, for
        SyntaxError exceptions, it emites several lines that (when
        printed) display detailed information about where the syntax
        error occurred.

        The message indicating which exception occurred is always the last
        string in the output.
        N)Ú__main__ÚbuiltinsÚ.z<string>ú?z  File "{}", line {}
z    {}
Ú
r}   c             s   s   | ]}|  ¡ r|pd V  qdS )ú N)Úisspace)rG   Úcr   r   r    ú	<genexpr>G  s    z;TracebackException.format_exception_only.<locals>.<genexpr>z    {}^
r   z<no detail available>z{}: {}
)r   r-   r   r\   r[   r   r   r@   r.   rA   r   r   r   rZ   ÚrstripÚminÚlenÚlstripr1   r   )	rL   ÚstypeÚsmodr@   rA   Úbadliner   Ú
caretspacer   r   r   r    r     s2    


z(TracebackException.format_exception_only)r%   c            c   s   |rT| j dk	r*| j j|dE dH  tV  n*| jdk	rT| jsT| jj|dE dH  tV  | jdk	rddV  | j ¡ E dH  |  ¡ E dH  dS )a¼  Format the exception.

        If chain is not *True*, *__cause__* and *__context__* will not be formatted.

        The return value is a generator of strings, each ending in a newline and
        some containing internal newlines. `print_exception` is a wrapper around
        this method which just prints the lines to a file.

        The message indicating which exception occurred is always the last
        string in the output.
        N)r%   z#Traceback (most recent call last):
)	r   r   Ú_cause_messager   r   Ú_context_messager   r;   r   )rL   r%   r   r   r    r   L  s    


zTracebackException.format)r/   r[   r\   r]   rM   r   r   r   rR   r   r   r   r   r   r   r    r   µ  s   9	-)N)NN)N)N)NNT)NT)NNT)NT)NNT)NNN)NN)NN) r]   rj   rh   rX   r   Ú__all__r!   r   r   r   r   r±   r²   r   r   r   r-   r+   r	   r
   r   r   r   r   r   r   r   r   r   r*   r   r   r   r   r   r    Ú<module>   sF   












>zã               @   s®  d Z ddlZdd ZeeZedd ZeejZeejZ	eej
Zdd Zee Zd	d
 Ze ZeeZe ¡  dd Ze ZeeZG dd dZee jZeeZeg jZeejZee jZeej Z!ee"jd Z#eeZ$ye%W n: e%k
r0   e &¡ d Z'ee'Z(ee'j)Z*dZ'['Y nX eejZ+eej,Z-[[[[[[d"ddZ.dd Z/d#ddZ0dd Z1G dd dZ2G dd dZ3dd Z4d d! e5 D Z6dS )$zO
Define names for built-in types that aren't directly accessible as a builtin.
é    Nc               C   s   d S )N© r   r   r   úD:\Python\lib\types.pyÚ_f   ó    r   c               C   s   d S )Nr   r   r   r   r   Ú<lambda>   r   r   c               c   s
   dV  d S )Né   r   r   r   r   r   Ú_g   s    r   c               Ã   s   d S )Nr   r   r   r   r   Ú_c   r   r	   c               C  s
   d V  d S )Nr   r   r   r   r   Ú_ag   s    r
   c               @   s   e Zd Zdd ZdS )Ú_Cc             C   s   d S )Nr   )Úselfr   r   r   Ú_m!   r   z_C._mN)Ú__name__Ú
__module__Ú__qualname__r   r   r   r   r   r       s   r   Úfromkeysé   r   c             C   sJ   t |}t| ||\}}}|dk	r*|| ||k	r:||d< || ||f|S )zBCreate a class object dynamically using the appropriate metaclass.NÚ__orig_bases__)Úresolve_basesÚprepare_class)ÚnameÚbasesÚkwdsÚ	exec_bodyÚresolved_basesÚmetaÚnsr   r   r   Ú	new_class>   s    r   c             C   s   t | }d}d}xvt| D ]j\}}t|tr.qt|ds:q| | ¡}d}t|ts\tdq|||| || d < |t|d 7 }qW |s| S t|S )z8Resolve MRO entries dynamically as specified by PEP 560.Fr   Ú__mro_entries__Tz#__mro_entries__ must return a tupler   )	ÚlistÚ	enumerateÚ
isinstanceÚtypeÚhasattrr   ÚtupleÚ	TypeErrorÚlen)r   Ú	new_basesÚupdatedÚshiftÚiÚbaseÚnew_baser   r   r   r   H   s"    




r   c             C   s~   |dkri }nt |}d|kr*| d¡}n|r<t|d }nt}t|trTt||}t|drp|j| |f|}ni }|||fS )az  Call the __prepare__ method of the appropriate metaclass.

    Returns (metaclass, namespace, kwds) as a 3-tuple

    *metaclass* is the appropriate metaclass
    *namespace* is the prepared class namespace
    *kwds* is an updated copy of the passed in kwds argument with any
    'metaclass' entry removed. If no kwds argument is passed in, this will
    be an empty dict.
    NÚ	metaclassr   Ú__prepare__)ÚdictÚpopr"   r!   Ú_calculate_metar#   r.   )r   r   r   r   r   r   r   r   r   ]   s    


r   c             C   sB   | }x8|D ]0}t |}t||r"q
t||r2|}q
tdq
W |S )z%Calculate the most derived metaclass.zxmetaclass conflict: the metaclass of a derived class must be a (non-strict) subclass of the metaclasses of all its bases)r"   Ú
issubclassr%   )r   r   Úwinnerr+   Ú	base_metar   r   r   r1   }   s    


r1   c               @   sL   e Zd ZdZdddZdddZdd Zd	d
 Zdd Zdd Z	dd Z
dS )ÚDynamicClassAttributea  Route attribute access on a class to __getattr__.

    This is a descriptor, used to define attributes that act differently when
    accessed through an instance and through a class.  Instance access remains
    normal, but access to an attribute through a class will be routed to the
    class's __getattr__ method; this is done by raising AttributeError.

    This allows one to have properties active on an instance, and have virtual
    attributes on the class with the same name (see Enum for an example).

    Nc             C   s>   || _ || _|| _|p|j| _|d k| _tt|dd| _d S )NÚ__isabstractmethod__F)ÚfgetÚfsetÚfdelÚ__doc__Úoverwrite_docÚboolÚgetattrr6   )r   r7   r8   r9   Údocr   r   r   Ú__init__   s    
zDynamicClassAttribute.__init__c             C   s6   |d kr| j r| S t n| jd kr,td|  |¡S )Nzunreadable attribute)r6   ÚAttributeErrorr7   )r   ÚinstanceÚ
ownerclassr   r   r   Ú__get__¤   s    
zDynamicClassAttribute.__get__c             C   s"   | j d krtd|   ||¡ d S )Nzcan't set attribute)r8   r@   )r   rA   Úvaluer   r   r   Ú__set__­   s    
zDynamicClassAttribute.__set__c             C   s    | j d krtd|   |¡ d S )Nzcan't delete attribute)r9   r@   )r   rA   r   r   r   Ú
__delete__²   s    
z DynamicClassAttribute.__delete__c             C   s8   | j r|jnd }t| || j| j|p(| j}| j |_ |S )N)r;   r:   r"   r8   r9   )r   r7   ÚfdocÚresultr   r   r   Úgetter·   s    zDynamicClassAttribute.getterc             C   s$   t | | j|| j| j}| j|_|S )N)r"   r7   r9   r:   r;   )r   r8   rH   r   r   r   Úsetter½   s    zDynamicClassAttribute.setterc             C   s$   t | | j| j|| j}| j|_|S )N)r"   r7   r8   r:   r;   )r   r9   rH   r   r   r   ÚdeleterÂ   s    zDynamicClassAttribute.deleter)NNNN)N)r   r   r   r:   r?   rC   rE   rF   rI   rJ   rK   r   r   r   r   r5      s   


	r5   c               @   s   e Zd Zdd Zdd Zdd Zdd Zed	d
 Zedd Z	edd Z
edd ZeZe	Ze
ZeZdd Zdd ZeZdS )Ú_GeneratorWrapperc             C   s2   || _ |jtk| _t|dd | _t|dd | _d S )Nr   r   )Ú_GeneratorWrapper__wrappedÚ	__class__ÚGeneratorTypeÚ_GeneratorWrapper__isgenr=   r   r   )r   Úgenr   r   r   r?   Ê   s    z_GeneratorWrapper.__init__c             C   s   | j  |¡S )N)rM   Úsend)r   Úvalr   r   r   rR   Ï   s    z_GeneratorWrapper.sendc             G   s   | j j|f| S )N)rM   Úthrow)r   ÚtpÚrestr   r   r   rT   Ñ   s    z_GeneratorWrapper.throwc             C   s
   | j  ¡ S )N)rM   Úclose)r   r   r   r   rW   Ó   s    z_GeneratorWrapper.closec             C   s   | j jS )N)rM   Úgi_code)r   r   r   r   rX   Õ   s    z_GeneratorWrapper.gi_codec             C   s   | j jS )N)rM   Úgi_frame)r   r   r   r   rY   Ø   s    z_GeneratorWrapper.gi_framec             C   s   | j jS )N)rM   Ú
gi_running)r   r   r   r   rZ   Û   s    z_GeneratorWrapper.gi_runningc             C   s   | j jS )N)rM   Úgi_yieldfrom)r   r   r   r   r[   Þ   s    z_GeneratorWrapper.gi_yieldfromc             C   s
   t | jS )N)ÚnextrM   )r   r   r   r   Ú__next__å   s    z_GeneratorWrapper.__next__c             C   s   | j r| jS | S )N)rP   rM   )r   r   r   r   Ú__iter__ç   s    z_GeneratorWrapper.__iter__N)r   r   r   r?   rR   rT   rW   ÚpropertyrX   rY   rZ   r[   Úcr_codeÚcr_frameÚ
cr_runningÚcr_awaitr]   r^   Ú	__await__r   r   r   r   rL   È   s   rL   c                sÆ   t stdjtkrtddjtkrjj}|d@ r@S |d@ rj}t|j|j	|j
|j|jdB |j|j|j|j|j|j|j|j|j|j_S ddl}ddl | ¡ fdd	}|S )
z2Convert regular generator function to a coroutine.z$types.coroutine() expects a callableÚ__code__Ni  é    é   r   c                 sR   | |}|j tks*|j tkr.|jjd@ r.|S t| jrNt| jsNt|S |S )Nrg   )	rN   ÚCoroutineTyperO   rX   Úco_flagsr!   Ú	GeneratorÚ	CoroutinerL   )ÚargsÚkwargsÚcoro)Ú_collections_abcÚfuncr   r   Úwrapped  s    

zcoroutine.<locals>.wrapped)Úcallabler%   rN   ÚFunctionTyper=   ÚCodeTypere   ri   Úco_argcountÚco_kwonlyargcountÚ
co_nlocalsÚco_stacksizeÚco_codeÚ	co_constsÚco_namesÚco_varnamesÚco_filenameÚco_nameÚco_firstlinenoÚ	co_lnotabÚco_freevarsÚco_cellvarsÚ	functoolsro   Úwraps)rp   ri   Úcor   rq   r   )ro   rp   r   Ú	coroutineí   s,    

r   c             C   s    g | ]}|d d dkr|qS )Nr   Ú_r   )Ú.0Únr   r   r   ú
<listcomp>'  s    r   )r   NN)r   N)7r:   Úsysr   r"   rs   Ú
LambdaTypere   rt   Ú__dict__ÚMappingProxyTypeÚimplementationÚSimpleNamespacer   rO   r	   rh   rW   r
   ÚAsyncGeneratorTyper   r   Ú
MethodTyper&   ÚBuiltinFunctionTypeÚappendÚBuiltinMethodTypeÚobjectr?   ÚWrapperDescriptorTypeÚ__str__ÚMethodWrapperTypeÚstrÚjoinÚMethodDescriptorTyper/   ÚClassMethodDescriptorTypeÚ
ModuleTyper%   Úexc_infoÚtbÚTracebackTypeÚtb_frameÚ	FrameTypeÚGetSetDescriptorTypeÚ__globals__ÚMemberDescriptorTyper   r   r   r1   r5   rL   r   ÚglobalsÚ__all__r   r   r   r   Ú<module>   sX   







 




 :%:ã               @   sÚ  d Z ddlZddddddd	d
gZd<ddZd=ddZdd Zdd ZeZdd ZeZ	dd Z
dedddfddZeddfddZdd Zdd	 ZG dd deZdd Zd d! Zd"d# Zd$d% Zd&d' Zd(d) Zd>d+dZd?d,dZG d-d. d.eZG d/d
 d
eZd0d1 Zy0dd2lmZm Z m!Z!mZmZm"Z" e Z#e!Z$d3Z%W n2 e&k
rn   g Zd4Z#i Z$d*a'd5d6 Z"dZ%Y nX eej( e%sÔe)ed7sÔed4e*d8d*d9 ed:e*d*d; ed:e+d*d; ed:e,d*d; ed:e-d*d; [%dS )@z&Python part of the warnings subsystem.é    NÚwarnÚwarn_explicitÚshowwarningÚformatwarningÚfilterwarningsÚsimplefilterÚresetwarningsÚcatch_warningsc             C   s   t | |||||}t| dS )z7Hook to write a warning to a file; replace if you like.N)ÚWarningMessageÚ_showwarnmsg_impl)ÚmessageÚcategoryÚfilenameÚlinenoÚfileÚlineÚmsg© r   úD:\Python\lib\warnings.pyr   
   s    c             C   s   t | |||d|}t|S )z.Function to format a warning the standard way.N)r
   Ú_formatwarnmsg_impl)r   r   r   r   r   r   r   r   r   r      s    c             C   sP   | j }|d kr tj}|d kr d S t| }y| |¡ W n tk
rJ   Y nX d S )N)r   ÚsysÚstderrÚ_formatwarnmsgÚwriteÚOSError)r   r   Útextr   r   r   r      s    r   c       	   	   C   s   | j j}| j d| j d| d| j d}| jd krpydd l}| | j| j¡}W qv tk
rl   d }d }Y qvX n| j}|r| 	¡ }|d| 7 }| j
d k	rydd l}W n tk
rÂ   d}d }Y n4X | ¡ }y| | j
¡}W n tk
rô   d }Y nX |d k	r|d7 }x|D ]t}|d|j|jf 7 }y$|d k	rD| |j|j¡}nd }W n tk
rd   d }Y nX |r| 	¡ }|d	| 7 }qW n|s|| d
7 }|S )Nú:z: Ú
r   z  %s
Tz-Object allocated at (most recent call last):
z  File "%s", lineno %s
z    %s
z<: Enable tracemalloc to get the object allocation traceback
)r   Ú__name__r   r   r   r   Ú	linecacheÚgetlineÚ	ExceptionÚstripÚsourceÚtracemallocÚ
is_tracingÚget_object_traceback)	r   r   Úsr   r   r$   ÚtracingÚtbÚframer   r   r   r   #   sR    "






r   c             C   sd   yt }W n tk
r   Y n<X |tk	rXt|s6td|| j| j| j| j| j	| j
 dS t|  dS )z7Hook to write a warning to a file; replace if you like.z:warnings.showwarning() must be set to a function or methodN)r   Ú	NameErrorÚ_showwarning_origÚcallableÚ	TypeErrorr   r   r   r   r   r   r   )r   Úswr   r   r   Ú_showwarnmsg`   s    r0   c             C   sH   yt }W n tk
r   Y n$X |tk	r@|| j| j| j| j| jS t| S )z.Function to format a warning the standard way.)	r   r+   Ú_formatwarning_origr   r   r   r   r   r   )r   Úfwr   r   r   r   u   s    
r   Ú Fc             C   sÌ   | dkst d| f t|ts(t dt|ts:t dt|tsLt dt|ts^t dt|trp|dksxt d|s|rdd	l}|r| ||j	¡}nd	}|r°| |¡}nd	}t
| |||||d
 d	S )aÖ  Insert an entry into the list of warnings filters (at the front).

    'action' -- one of "error", "ignore", "always", "default", "module",
                or "once"
    'message' -- a regex that the warning message must match
    'category' -- a class that the warning must be a subclass of
    'module' -- a regex that the module name must match
    'lineno' -- an integer line number, 0 matches all warnings
    'append' -- if true, append to the list of filters
    )ÚerrorÚignoreÚalwaysÚdefaultÚmoduleÚoncezinvalid action: %rzmessage must be a stringzcategory must be a classz#category must be a Warning subclasszmodule must be a stringr   zlineno must be an int >= 0N)Úappend)ÚAssertionErrorÚ
isinstanceÚstrÚtypeÚ
issubclassÚWarningÚintÚreÚcompileÚIÚ_add_filter)Úactionr   r   r8   r   r:   rB   r   r   r   r      s"    
c             C   sH   | dkst d| f t|tr(|dks0t dt| d|d||d dS )a  Insert a simple entry into the list of warnings filters (at the front).

    A simple filter matches all modules and messages.
    'action' -- one of "error", "ignore", "always", "default", "module",
                or "once"
    'category' -- a class that the warning must be a subclass of
    'lineno' -- an integer line number, 0 matches all warnings
    'append' -- if true, append to the list of filters
    )r4   r5   r6   r7   r8   r9   zinvalid action: %rr   zlineno must be an int >= 0N)r:   )r;   r<   rA   rE   )rF   r   r   r:   r   r   r   r   ¥   s
    

c             G   sR   | s6yt  |¡ W n tk
r&   Y nX t  d|¡ n|t krHt  |¡ t  d S )Nr   )ÚfiltersÚremoveÚ
ValueErrorÚinsertr:   Ú_filters_mutated)r:   Úitemr   r   r   rE   µ   s    
rE   c               C   s   g t dd< t  dS )zAClear the list of warning filters, so that no filters are active.N)rG   rK   r   r   r   r   r   Ã   s    c               @   s   e Zd ZdZdS )Ú_OptionErrorz,Exception used by option processing helpers.N)r   Ú
__module__Ú__qualname__Ú__doc__r   r   r   r   rM   È   s   rM   c             C   sR   xL| D ]D}yt | W q tk
rH } ztd|tjd W d d }~X Y qX qW d S )NzInvalid -W option ignored:)r   )Ú
_setoptionrM   Úprintr   r   )ÚargsÚargr   r   r   r   Ú_processoptionsÍ   s
    
rU   c          	   C   sð   dd l }|  d¡}t|dkr,td| f xt|dk rF| d¡ q.W dd |D \}}}}}t|}| |¡}t|}| |¡}|r|d }|rØyt|}|dk rªt	W qÜ t	t
fk
rÔ   td	|f d Y qÜX nd}t||||| d S )
Nr   r   é   ztoo many fields (max 5): %rr3   c             S   s   g | ]}|  ¡ qS r   )r"   )Ú.0r'   r   r   r   ú
<listcomp>Ü   s   z_setoption.<locals>.<listcomp>ú$zinvalid lineno %r)rB   ÚsplitÚlenrM   r:   Ú
_getactionÚescapeÚ_getcategoryrA   rI   ÚOverflowErrorr   )rT   rB   ÚpartsrF   r   r   r8   r   r   r   r   rQ   Õ   s.    


rQ   c             C   sB   | sdS | dkrdS xdD ]}|  | ¡r|S qW td| f d S )Nr7   Úallr6   )r7   r6   r5   r8   r9   r4   zinvalid action: %r)Ú
startswithrM   )rF   Úar   r   r   r\   ð   s     

r\   c             C   s   dd l }| stS | d| ¡rPyt| }W qä tk
rL   td| f d Y qäX n|  d¡}| d | }| |d d  }yt|d d |g}W n$ tk
r®   td|f d Y nX yt	||}W n$ t
k
râ   td| f d Y nX t|tsütd| f |S )Nr   z^[a-zA-Z0-9_]+$zunknown warning category: %rÚ.é   zinvalid module name: %rzinvalid warning category: %r)rB   r@   ÚmatchÚevalr+   rM   ÚrfindÚ
__import__ÚImportErrorÚgetattrÚAttributeErrorr?   )r   rB   ÚcatÚir8   ÚklassÚmr   r   r   r^   ú   s,    

r^   c             C   s   | j j}d|kod|kS )zFSignal whether the frame is an internal CPython implementation detail.Ú	importlibÚ
_bootstrap)Úf_codeÚco_filename)r*   r   r   r   r   Ú_is_internal_frame  s    ru   c             C   s&   | j } x| dk	r t| r | j } qW | S )z;Find the next frame that doesn't involve CPython internals.N)Úf_backru   )r*   r   r   r   Ú_next_external_frame  s    
rw   re   c          	   C   sv  t | tr| j}|dkrt}t |tr0t|tsDtd t|j¡yZ|dks\t	t
 d¡rht
 |¡}n4t
 d¡}x(t|d D ]}t|}|dkrtqW W n tk
r¼   t
j}d}Y nX |j}|j}d|krÜ|d }nd}| d¡}	|	r|	 ¡ }
|
 d¡rP|	dd }	n>|d	krFyt
jd
 }	W n tk
rD   d	}	Y nX |	sP|}	| di ¡}t| ||	||||| dS )z:Issue a warning, or maybe ignore it or raise an exception.Nz/category must be a Warning subclass, not '{:s}'re   r   z<string>Ú__file__z.pycéÿÿÿÿÚ__main__r   Ú__warningregistry__)r<   r@   Ú	__class__ÚUserWarningr>   r?   r.   Úformatr   ru   r   Ú	_getframeÚrangerw   rI   Ú__dict__Ú	f_globalsÚf_linenoÚgetÚlowerÚendswithÚargvrl   Ú
setdefaultr   )r   r   Ú
stacklevelr#   r*   ÚxÚglobalsr   r8   r   ZfnlÚregistryr   r   r   r   #  sL    






c             C   sè  t |}|d kr8|pd}|dd   ¡ dkr8|d d }|d krDi }| dd¡tkrd| ¡  t|d< t| tr~t| }| j}n| }|| } |||f}	| |	¡r¢d S x^t	D ]R}
|
\}}}}}|d ksÌ| 
|¡r¨t||r¨|d ksè| 
|¡r¨|dksø||kr¨P q¨W t}|dkrd S dd l}| ||¡ |dkr2| |dkrfd	||	< ||f}t |¡r\d S d	t|< nf|d
krrnZ|dkr¨d	||	< ||df}| |¡rd S d	||< n$|dkr¼d	||	< ntd||
f t| ||||}t| d S )Nz	<unknown>éýÿÿÿz.pyÚversionr   r5   r4   r9   re   r6   r8   r7   z1Unrecognized action (%r) in warnings.filters:
 %s)rA   r   r   Ú_filters_versionÚclearr<   r@   r=   r|   rG   rf   r?   Údefaultactionr   ÚgetlinesÚonceregistryÚRuntimeErrorr
   r0   )r   r   r   r   r8   r   Úmodule_globalsr#   r   ÚkeyrL   rF   r   rm   ÚmodÚlnr   ZoncekeyZaltkeyr   r   r   r   W  sj    














c               @   s"   e Zd ZdZdddZdd ZdS )r
   )r   r   r   r   r   r   r#   Nc             C   s>   || _ || _|| _|| _|| _|| _|| _|r4|jnd | _d S )N)	r   r   r   r   r   r   r#   r   Ú_category_name)Úselfr   r   r   r   r   r   r#   r   r   r   Ú__init__£  s    zWarningMessage.__init__c             C   s   d| j | j| j| j| jf S )NzD{message : %r, category : %r, filename : %r, lineno : %s, line : %r})r   r   r   r   r   )r   r   r   r   Ú__str__®  s    zWarningMessage.__str__)NNN)r   rN   rO   Ú_WARNING_DETAILSr   r   r   r   r   r   r
     s    

r
   c               @   s8   e Zd ZdZdddddZdd Zd	d
 Zdd ZdS )r	   a  A context manager that copies and restores the warnings filter upon
    exiting the context.

    The 'record' argument specifies whether warnings should be captured by a
    custom implementation of warnings.showwarning() and be appended to a list
    returned by the context manager. Otherwise None is returned by the context
    manager. The objects appended to the list are arguments whose attributes
    mirror the arguments to showwarning().

    The 'module' argument is to specify an alternative module to the module
    named 'warnings' and imported under that name. This argument is only useful
    when testing the warnings module itself.

    FN)Úrecordr8   c            C   s(   || _ |dkrtjd n|| _d| _dS )zêSpecify whether to record warnings and if an alternative module
        should be used other than sys.modules['warnings'].

        For compatibility with Python 3.0, please consider all arguments to be
        keyword-only.

        NÚwarningsF)Ú_recordr   ÚmodulesÚ_moduleÚ_entered)r   r   r8   r   r   r   r   Å  s    zcatch_warnings.__init__c             C   sP   g }| j r| d¡ | jtjd k	r4| d| j ¡ t| j}d|d |¡f S )Nzrecord=Truer   z	module=%rz%s(%s)z, )r    r:   r¢   r   r¡   r>   r   Újoin)r   rS   Únamer   r   r   Ú__repr__Ñ  s    

zcatch_warnings.__repr__c             C   s~   | j rtd|  d| _ | jj| _| jd d  | j_| j ¡  | jj| _| jj| _| j	rvg }|j
| j_| jj| j_|S d S d S )NzCannot enter %r twiceT)r£   r   r¢   rG   Ú_filtersrK   r   Ú_showwarningr   r    r:   r,   )r   Úlogr   r   r   Ú	__enter__Ú  s    




zcatch_warnings.__enter__c             G   s>   | j std|  | j| j_| j ¡  | j| j_| j| j_d S )Nz%Cannot exit %r without entering first)	r£   r   r§   r¢   rG   rK   r¨   r   r   )r   Úexc_infor   r   r   Ú__exit__í  s    


zcatch_warnings.__exit__)r   rN   rO   rP   r   r¦   rª   r¬   r   r   r   r   r	   ´  s
   	c                sz   d j  dg} jd k	rVdd ldd l} fdd}| d¡ || t| ¡7 }d |¡ d¡}t	|t
d	 d
 d S )Nzcoroutine 'z' was never awaited
r   c              3   s8   x2t  jD ]$\} }} | |¡}| |||fV  qW d S )N)ÚreversedÚ	cr_originr    )r   r   Úfuncnamer   )Úcoror   r   r   Úextractý  s    z*_warn_unawaited_coroutine.<locals>.extractz-Coroutine created at (most recent call last)
r3   r   é   )r   r   r#   )rO   r®   r   Ú	tracebackr:   Úformat_listÚlistr¤   Úrstripr   ÚRuntimeWarning)r°   Ú	msg_linesr³   r±   r   r   )r°   r   r   Ú_warn_unawaited_coroutine÷  s    

r¹   )rG   Ú_defaultactionÚ_onceregistryr   r   rK   Tr7   c               C   s   t d7 a d S )Nre   )r   r   r   r   r   rK   "  s    rK   Zgettotalrefcountrz   )r   r8   r:   r5   )r   r:   )NN)N)Nre   N)NNNN).rP   r   Ú__all__r   r   r   r   r,   r0   r1   r   r@   r   r   rE   r   r!   rM   rU   rQ   r\   r^   ru   rw   r   r   Úobjectr
   r	   r¹   Ú	_warningsrG   rº   r»   rK   r   r   Z_warnings_defaultsrj   r   ÚwarnoptionsÚhasattrÚDeprecationWarningÚPendingDeprecationWarningÚImportWarningÚResourceWarningr   r   r   r   Ú<module>   sh   

;"
	
5 
EC 


ã               @   s   d Z ddlZddlZddlmZ i ZdZdgZejZG dd de	e
Zd	d
 Zdd Ze e¡ ejdkr|dd Ze e¡ dS )a3   Standard "encodings" Package

    Standard Python encoding modules are stored in this package
    directory.

    Codec modules must have names corresponding to normalized encoding
    names as defined in the normalize_encoding() function below, e.g.
    'utf-8' must be implemented by the module 'utf_8.py'.

    Each codec module must export the following interface:

    * getregentry() -> codecs.CodecInfo object
    The getregentry() API must return a CodecInfo object with encoder, decoder,
    incrementalencoder, incrementaldecoder, streamwriter and streamreader
    atttributes which adhere to the Python Codec Interface Standard.

    In addition, a module may optionally also define the following
    APIs which are then used by the package's codec search function:

    * getaliases() -> sequence of encoding name strings to use as aliases

    Alias names returned by getaliases() must be normalized encoding
    names as defined by normalize_encoding().

Written by Marc-Andre Lemburg (mal@lemburg.com).

(c) Copyright CNRI, All Rights Reserved. NO WARRANTY.

é    Né   )Úaliasesz--unknown--Ú*c               @   s   e Zd ZdS )ÚCodecRegistryErrorN)Ú__name__Ú
__module__Ú__qualname__© r	   r	   ú#D:\Python\lib\encodings\__init__.pyr   (   s   r   c             C   sj   t | trt| d} g }d}xB| D ]:}| ¡ s6|dkrX|rH|rH| d¡ | |¡ d}q"d}q"W d |¡S )a´   Normalize an encoding name.

        Normalization works as follows: all non-alphanumeric
        characters except the dot used for Python package names are
        collapsed and replaced with a single underscore, e.g. '  -;#'
        becomes '_'. Leading and trailing underscores are removed.

        Note that encoding names should be ASCII only; if they do use
        non-ASCII characters, these must be Latin-1 compatible.

    ÚasciiFÚ.Ú_TÚ )Ú
isinstanceÚbytesÚstrÚisalnumÚappendÚjoin)ÚencodingÚcharsÚpunctÚcr	   r	   r
   Únormalize_encoding+   s    




r   c       
   	   C   s|  t  | t¡}|tk	r|S t| }t |¡p:t | dd¡¡}|d k	rN||g}n|g}xL|D ]@}|rZd|krlqZytd| tdd}W n tk
r   Y qZX P qZW d }y
|j	}W n t
k
rÄ   d }Y nX |d krÚd t | < d S | }t|tjs*dt|  kr
dks n td|j|jf t|d rÈt|d	 rÈ|d
 d k	rXt|d
 rÈ|d d k	rtt|d rÈt|dkr|d d k	rt|d rÈt|dkrÜ|d d k	rÜt|d sÜtd|j|jf t|dk sø|d d kr |ddt|  |j dd	¡d	 f 7 }tj| }|t | < y| ¡ }W n t
k
rT   Y n$X x |D ]}	|	tkr\|t|	< q\W |S )Nr   r   z
encodings.r   )ÚfromlistÚlevelé   é   z#module "%s" (%s) failed to registerr   é   é   é   z'incompatible codecs in module "%s" (%s)é   )N)Ú_cacheÚgetÚ_unknownr   Ú_aliasesÚreplaceÚ
__import__Ú_import_tailÚImportErrorÚgetregentryÚAttributeErrorr   ÚcodecsÚ	CodecInfoÚlenr   r   Ú__file__ÚcallableÚsplitÚ
getaliases)
r   ÚentryÚnorm_encodingÚaliased_encodingÚmodnamesÚmodnameÚmodr*   ÚcodecaliasesÚaliasr	   r	   r
   Úsearch_functionG   sf    	




**(


r;   Úwin32c             C   sL   y2dd l }d| ¡  }| |kr0dd l}|j ¡ S W n tk
rF   Y nX d S )Nr   zcp%s)Ú_winapiÚGetACPÚencodings.mbcsÚmbcsr*   r)   )r   r=   Úansi_code_pageÚ	encodingsr	   r	   r
   Ú_alias_mbcs   s    rC   )Ú__doc__r,   Úsysr   r   r"   r$   r(   r%   ÚLookupErrorÚSystemErrorr   r   r;   ÚregisterÚplatformrC   r	   r	   r	   r
   Ú<module>   s   U

ã            D  @   s  d Z ddddddddddddddddddddddddddddddddddd	d	d
d
dddddddddddddddddddddddddddddddddddddddddddddddddddddddddddd d d d!d!d!d"d"d"d#d#d#d$d$d$d$d%d%d%d%d&d&d&d'd'd(d(d(d)d*d*d*d+d+d+d+d+d+d+d,d-d-d-d-d-d-d-d-d.d.d.d/d0d0d0d1d1d1d2d2d2d3d3d4d4d5d5d6d6d7d7d8d8d8d9d9d9d9d9d9d:d:d:d;d;d;d<d<d<d<d<d<d=d=d=d>d>d>d>d>d?d?d?d?d?d?d@d@d@d@d@d@dAdAdAdAdAdAdBdBdBdBdBdCdCdCdCdCdCdCdDdDdDdDdDdDdDdDdEdEdEdEdEdFdFdFdFdFdFdGdGdHdIdIdIdJdJdJdJdJdJdJdJdJdJdJdJdKdLdMdNdNdOdOdPdQdQdRdRdRdRdSdSdSdTdUdUdUdUdVdVdVdWdWdWdXdYdYdYdYdYdZdZd[d[d\d\d]d]d^d_d`d`d`dadadadadadbdcdcdUd+d-dddCZdeS )fa<   Encoding Aliases Support

    This module is used by the encodings package search function to
    map encodings names to module names.

    Note that the search function normalizes the encoding names before
    doing the lookup, so the mapping will have to map normalized
    encoding names to module names.

    Contents:

        The following aliases dictionary contains mappings of all IANA
        character set names for which the Python core library provides
        codecs. In addition to these, a few Python specific codec
        aliases have also been added.

ÚasciiÚbase64_codecÚbig5Ú	big5hkscsÚ	bz2_codecÚcp037Úcp1026Úcp1125Úcp1140Úcp1250Úcp1251Úcp1252Úcp1253Úcp1254Úcp1255Úcp1256Úcp1257Úcp1258Úcp273Úcp424Úcp437Úcp500Úcp775Úcp850Úcp852Úcp855Úcp857Úcp858Úcp860Úcp861Úcp862Úcp863Úcp864Úcp865Úcp866Úcp869Úcp932Úcp949Úcp950Úeuc_jis_2004Úeuc_jisx0213Úeuc_jpÚeuc_krÚgb18030Úgb2312ÚgbkÚ	hex_codecÚ	hp_roman8ÚhzÚ
iso2022_jpÚiso2022_jp_1Úiso2022_jp_2Úiso2022_jp_2004Úiso2022_jp_3Úiso2022_jp_extÚ
iso2022_krÚ
iso8859_10Ú
iso8859_11Ú
iso8859_13Ú
iso8859_14Ú
iso8859_15Ú
iso8859_16Ú	iso8859_2Ú	iso8859_3Ú	iso8859_4Ú	iso8859_5Ú	iso8859_6Ú	iso8859_7Ú	iso8859_8Ú	iso8859_9ÚjohabÚkoi8_rÚkz1048Úlatin_1Úmac_cyrillicÚ	mac_greekÚmac_icelandÚ
mac_latin2Ú	mac_romanÚmac_turkishÚmbcsÚptcp154Úquopri_codecÚrot_13Ú	shift_jisÚshift_jis_2004Úshift_jisx0213ÚtactisÚtis_620Úutf_16Ú	utf_16_beÚ	utf_16_leÚutf_32Ú	utf_32_beÚ	utf_32_leÚutf_7Úutf_8Úuu_codecÚ
zlib_codec(C  Ú646zansi_x3.4_1968Úansi_x3_4_1968zansi_x3.4_1986Úcp367ÚcsasciiÚibm367Ú	iso646_usziso_646.irv_1991Úiso_ir_6ÚusÚus_asciiÚbase64Úbase_64Úbig5_twÚcsbig5Ú
big5_hkscsÚhkscsÚbz2Ú037Úcsibm037Úebcdic_cp_caÚebcdic_cp_nlÚebcdic_cp_usÚebcdic_cp_wtÚibm037Úibm039Ú1026Ú	csibm1026Úibm1026Ú1125Úibm1125Úcp866uÚrusciiÚ1140Úibm1140Ú1250Úwindows_1250Ú1251Úwindows_1251Ú1252Úwindows_1252Ú1253Úwindows_1253Ú1254Úwindows_1254Ú1255Úwindows_1255Ú1256Úwindows_1256Ú1257Úwindows_1257Ú1258Úwindows_1258Ú273Úibm273Úcsibm273Ú424Úcsibm424Úebcdic_cp_heÚibm424Ú437Úcspc8codepage437Úibm437Ú500Úcsibm500Úebcdic_cp_beÚebcdic_cp_chÚibm500Ú775Úcspc775balticÚibm775Ú850Úcspc850multilingualÚibm850Ú852Úcspcp852Úibm852Ú855Úcsibm855Úibm855Ú857Úcsibm857Úibm857Ú858Úcsibm858Úibm858Ú860Úcsibm860Úibm860Ú861Úcp_isÚcsibm861Úibm861Ú862Úcspc862latinhebrewÚibm862Ú863Úcsibm863Úibm863Ú864Úcsibm864Úibm864Ú865Úcsibm865Úibm865Ú866Úcsibm866Úibm866Ú869Úcp_grÚcsibm869Úibm869Ú932Úms932ÚmskanjiÚms_kanjiÚ949Úms949ÚuhcÚ950Úms950Újisx0213Ú
eucjis2004Úeuc_jis2004Úeucjisx0213ÚeucjpÚujisÚu_jisÚeuckrÚkoreanÚksc5601Ú	ks_c_5601Úks_c_5601_1987Úksx1001Ú	ks_x_1001Úgb18030_2000ÚchineseÚcsiso58gb231280Úeuc_cnÚeuccnÚeucgb2312_cnÚgb2312_1980Ú	gb2312_80Ú	iso_ir_58Ú936Úcp936Úms936ÚhexÚroman8Úr8Ú
csHPRoman8ÚhzgbÚhz_gbÚ
hz_gb_2312Úcsiso2022jpÚ	iso2022jpÚiso_2022_jpÚiso2022jp_1Úiso_2022_jp_1Úiso2022jp_2Úiso_2022_jp_2Úiso_2022_jp_2004Úiso2022jp_2004Úiso2022jp_3Úiso_2022_jp_3Úiso2022jp_extÚiso_2022_jp_extÚcsiso2022krÚ	iso2022krÚiso_2022_krÚcsisolatin6Úiso_8859_10Úiso_8859_10_1992Ú
iso_ir_157Úl6Úlatin6ÚthaiÚiso_8859_11Úiso_8859_11_2001Úiso_8859_13Úl7Úlatin7Úiso_8859_14Úiso_8859_14_1998Ú
iso_celticÚ
iso_ir_199Úl8Úlatin8Úiso_8859_15Úl9Úlatin9Úiso_8859_16Úiso_8859_16_2001Ú
iso_ir_226Úl10Úlatin10Úcsisolatin2Ú
iso_8859_2Úiso_8859_2_1987Ú
iso_ir_101Úl2Úlatin2Úcsisolatin3Ú
iso_8859_3Úiso_8859_3_1988Ú
iso_ir_109Úl3Úlatin3Úcsisolatin4Ú
iso_8859_4Úiso_8859_4_1988Ú
iso_ir_110Úl4Úlatin4ÚcsisolatincyrillicÚcyrillicÚ
iso_8859_5Úiso_8859_5_1988Ú
iso_ir_144ÚarabicÚasmo_708ÚcsisolatinarabicÚecma_114Ú
iso_8859_6Úiso_8859_6_1987Ú
iso_ir_127ÚcsisolatingreekÚecma_118Úelot_928ÚgreekÚgreek8Ú
iso_8859_7Úiso_8859_7_1987Ú
iso_ir_126ÚcsisolatinhebrewÚhebrewÚ
iso_8859_8Úiso_8859_8_1988Ú
iso_ir_138Úcsisolatin5Ú
iso_8859_9Úiso_8859_9_1989Ú
iso_ir_148Úl5Úlatin5Úcp1361Úms1361Úcskoi8rÚkz_1048Úrk1048Ústrk1048_2002Ú8859Úcp819Úcsisolatin1Úibm819Úiso8859Ú	iso8859_1Ú
iso_8859_1Úiso_8859_1_1987Ú
iso_ir_100Úl1ÚlatinÚlatin1ÚmaccyrillicÚmacgreekÚ
macicelandÚmaccentraleuropeÚ	maclatin2Ú	macintoshÚmacromanÚ
macturkishÚansiÚdbcsÚ	csptcp154Úpt154Úcp154Úcyrillic_asianÚquopriÚquoted_printableÚquotedprintableÚrot13Ú
csshiftjisÚshiftjisÚsjisÚs_jisÚshiftjis2004Ú	sjis_2004Ú
s_jis_2004Úshiftjisx0213Ú	sjisx0213Ú
s_jisx0213Útis260Útis620Ú	tis_620_0Útis_620_2529_0Útis_620_2529_1Ú
iso_ir_166Úu16Úutf16ÚunicodebigunmarkedÚutf_16beÚunicodelittleunmarkedÚutf_16leÚu32Úutf32Úutf_32beÚutf_32leÚu7Úutf7Úunicode_1_1_utf_7Úu8ÚutfÚutf8Ú	utf8_ucs2Ú	utf8_ucs4ÚuuÚzipÚzlibÚx_mac_japaneseÚx_mac_koreanÚx_mac_simp_chineseÚx_mac_trad_chineseN)Ú__doc__Úaliases© r¦  r¦  ú"D:\Python\lib\encodings\aliases.pyÚ<module>   s  	ã               @   s   d Z ddlZG dd dejZG dd dejZG dd dejZG d	d
 d
eejZG dd deejZG dd deeZdd ZdS )z Python 'ascii' Codec


Written by Marc-Andre Lemburg (mal@lemburg.com).

(c) Copyright CNRI, All Rights Reserved. NO WARRANTY.

é    Nc               @   s   e Zd ZejZejZdS )ÚCodecN)Ú__name__Ú
__module__Ú__qualname__ÚcodecsÚascii_encodeÚencodeÚascii_decodeÚdecode© r   r   ú D:\Python\lib\encodings\ascii.pyr      s   r   c               @   s   e Zd ZdddZdS )ÚIncrementalEncoderFc             C   s   t  || j¡d S )Nr   )r   r   Úerrors)ÚselfÚinputÚfinalr   r   r   r      s    zIncrementalEncoder.encodeN)F)r   r   r   r   r   r   r   r   r      s   r   c               @   s   e Zd ZdddZdS )ÚIncrementalDecoderFc             C   s   t  || j¡d S )Nr   )r   r	   r   )r   r   r   r   r   r   r
      s    zIncrementalDecoder.decodeN)F)r   r   r   r
   r   r   r   r   r      s   r   c               @   s   e Zd ZdS )ÚStreamWriterN)r   r   r   r   r   r   r   r      s   r   c               @   s   e Zd ZdS )ÚStreamReaderN)r   r   r   r   r   r   r   r      s   r   c               @   s   e Zd ZejZejZdS )ÚStreamConverterN)r   r   r   r   r	   r   r   r
   r   r   r   r   r   "   s   r   c            	   C   s   t jdtjtjttttdS )NÚascii)Únamer   r
   ÚincrementalencoderÚincrementaldecoderÚstreamwriterÚstreamreader)	r   Ú	CodecInfor   r   r
   r   r   r   r   r   r   r   r   Úgetregentry)   s    r   )	Ú__doc__r   r   r   r   r   r   r   r   r   r   r   r   Ú<module>   s   ã               @   s   d Z ddlZddlZdddZdddZG dd	 d	ejZG d
d dejZG dd dejZG dd deejZG dd deej	Z	dd Z
dS )zPython 'base64_codec' Codec - base64 content transfer encoding.

This codec de/encodes from bytes to bytes.

Written by Marc-Andre Lemburg (mal@lemburg.com).
é    NÚstrictc             C   s   |dkst t | ¡t| fS )Nr   )ÚAssertionErrorÚbase64ÚencodebytesÚlen)ÚinputÚerrors© r	   ú'D:\Python\lib\encodings\base64_codec.pyÚbase64_encode   s    r   c             C   s   |dkst t | ¡t| fS )Nr   )r   r   Údecodebytesr   )r   r   r	   r	   r
   Úbase64_decode   s    r   c               @   s    e Zd ZdddZdddZdS )	ÚCodecr   c             C   s
   t ||S )N)r   )Úselfr   r   r	   r	   r
   Úencode   s    zCodec.encodec             C   s
   t ||S )N)r   )r   r   r   r	   r	   r
   Údecode   s    zCodec.decodeN)r   )r   )Ú__name__Ú
__module__Ú__qualname__r   r   r	   r	   r	   r
   r      s   
r   c               @   s   e Zd ZdddZdS )ÚIncrementalEncoderFc             C   s   | j dkstt |¡S )Nr   )r   r   r   r   )r   r   Úfinalr	   r	   r
   r      s    zIncrementalEncoder.encodeN)F)r   r   r   r   r	   r	   r	   r
   r      s   r   c               @   s   e Zd ZdddZdS )ÚIncrementalDecoderFc             C   s   | j dkstt |¡S )Nr   )r   r   r   r   )r   r   r   r	   r	   r
   r   !   s    zIncrementalDecoder.decodeN)F)r   r   r   r   r	   r	   r	   r
   r       s   r   c               @   s   e Zd ZeZdS )ÚStreamWriterN)r   r   r   ÚbytesÚcharbuffertyper	   r	   r	   r
   r   %   s   r   c               @   s   e Zd ZeZdS )ÚStreamReaderN)r   r   r   r   r   r	   r	   r	   r
   r   (   s   r   c            
   C   s   t jdttttttddS )Nr   F)Únamer   r   ÚincrementalencoderÚincrementaldecoderÚstreamwriterÚstreamreaderÚ_is_text_encoding)ÚcodecsÚ	CodecInfor   r   r   r   r   r   r	   r	   r	   r
   Úgetregentry-   s    r$   )r   )r   )Ú__doc__r"   r   r   r   r   r   r   r   r   r$   r	   r	   r	   r
   Ú<module>   s   

ã               @   s   d dl Z d dlZd dlZe  d¡ZG dd dejZG dd dejejZG dd dej	ej
Z
G d	d
 d
eejejZG dd deejejZdd ZdS )é    NÚbig5c               @   s   e Zd ZejZejZdS )ÚCodecN)Ú__name__Ú
__module__Ú__qualname__ÚcodecÚencodeÚdecode© r
   r
   úD:\Python\lib\encodings\big5.pyr      s   r   c               @   s   e Zd ZeZdS )ÚIncrementalEncoderN)r   r   r   r   r
   r
   r
   r   r      s   r   c               @   s   e Zd ZeZdS )ÚIncrementalDecoderN)r   r   r   r   r
   r
   r
   r   r      s   r   c               @   s   e Zd ZeZdS )ÚStreamReaderN)r   r   r   r   r
   r
   r
   r   r      s   r   c               @   s   e Zd ZeZdS )ÚStreamWriterN)r   r   r   r   r
   r
   r
   r   r      s   r   c            	   C   s    t jdt jt jttttdS )Nr   )Únamer   r	   ÚincrementalencoderÚincrementaldecoderÚstreamreaderÚstreamwriter)	ÚcodecsÚ	CodecInfor   r   r	   r   r   r   r   r
   r
   r
   r   Úgetregentry   s    r   )Z
_codecs_twr   Z_multibytecodecZmbcZgetcodecr   r   ZMultibyteIncrementalEncoderr   ZMultibyteIncrementalDecoderr   ZMultibyteStreamReaderr   ZMultibyteStreamWriterr   r   r
   r
   r
   r   Ú<module>   s   
ã               @   s   d dl Z d dlZd dlZe  d¡ZG dd dejZG dd dejejZG dd dej	ej
Z
G d	d
 d
eejejZG dd deejejZdd ZdS )é    NÚ	big5hkscsc               @   s   e Zd ZejZejZdS )ÚCodecN)Ú__name__Ú
__module__Ú__qualname__ÚcodecÚencodeÚdecode© r
   r
   ú$D:\Python\lib\encodings\big5hkscs.pyr      s   r   c               @   s   e Zd ZeZdS )ÚIncrementalEncoderN)r   r   r   r   r
   r
   r
   r   r      s   r   c               @   s   e Zd ZeZdS )ÚIncrementalDecoderN)r   r   r   r   r
   r
   r
   r   r      s   r   c               @   s   e Zd ZeZdS )ÚStreamReaderN)r   r   r   r   r
   r
   r
   r   r      s   r   c               @   s   e Zd ZeZdS )ÚStreamWriterN)r   r   r   r   r
   r
   r
   r   r      s   r   c            	   C   s    t jdt jt jttttdS )Nr   )Únamer   r	   ÚincrementalencoderÚincrementaldecoderÚstreamreaderÚstreamwriter)	ÚcodecsÚ	CodecInfor   r   r	   r   r   r   r   r
   r
   r
   r   Úgetregentry   s    r   )Z
_codecs_hkr   Z_multibytecodecZmbcZgetcodecr   r   ZMultibyteIncrementalEncoderr   ZMultibyteIncrementalDecoderr   ZMultibyteStreamReaderr   ZMultibyteStreamWriterr   r   r
   r
   r
   r   Ú<module>   s   
ã               @   s   d Z ddlZddlZdddZdddZG dd	 d	ejZG d
d dejZG dd dejZG dd deejZG dd deej	Z	dd Z
dS )a  Python 'bz2_codec' Codec - bz2 compression encoding.

This codec de/encodes from bytes to bytes and is therefore usable with
bytes.transform() and bytes.untransform().

Adapted by Raymond Hettinger from zlib_codec.py which was written
by Marc-Andre Lemburg (mal@lemburg.com).
é    NÚstrictc             C   s   |dkst t | ¡t| fS )Nr   )ÚAssertionErrorÚbz2ÚcompressÚlen)ÚinputÚerrors© r	   ú$D:\Python\lib\encodings\bz2_codec.pyÚ
bz2_encode   s    r   c             C   s   |dkst t | ¡t| fS )Nr   )r   r   Ú
decompressr   )r   r   r	   r	   r
   Ú
bz2_decode   s    r   c               @   s    e Zd ZdddZdddZdS )	ÚCodecr   c             C   s
   t ||S )N)r   )Úselfr   r   r	   r	   r
   Úencode   s    zCodec.encodec             C   s
   t ||S )N)r   )r   r   r   r	   r	   r
   Údecode   s    zCodec.decodeN)r   )r   )Ú__name__Ú
__module__Ú__qualname__r   r   r	   r	   r	   r
   r      s   
r   c               @   s(   e Zd Zd
ddZdddZdd Zd	S )ÚIncrementalEncoderr   c             C   s    |dkst || _t ¡ | _d S )Nr   )r   r   r   ÚBZ2CompressorÚcompressobj)r   r   r	   r	   r
   Ú__init__   s    zIncrementalEncoder.__init__Fc             C   s.   |r| j  |¡}|| j  ¡  S | j  |¡S d S )N)r   r   Úflush)r   r   ÚfinalÚcr	   r	   r
   r   #   s    zIncrementalEncoder.encodec             C   s   t  ¡ | _d S )N)r   r   r   )r   r	   r	   r
   Úreset*   s    zIncrementalEncoder.resetN)r   )F)r   r   r   r   r   r   r	   r	   r	   r
   r      s   

r   c               @   s(   e Zd Zd
ddZdddZdd Zd	S )ÚIncrementalDecoderr   c             C   s    |dkst || _t ¡ | _d S )Nr   )r   r   r   ÚBZ2DecompressorÚdecompressobj)r   r   r	   r	   r
   r   .   s    zIncrementalDecoder.__init__Fc             C   s&   y| j  |¡S  tk
r    dS X d S )NÚ )r   r   ÚEOFError)r   r   r   r	   r	   r
   r   3   s    zIncrementalDecoder.decodec             C   s   t  ¡ | _d S )N)r   r   r   )r   r	   r	   r
   r   9   s    zIncrementalDecoder.resetN)r   )F)r   r   r   r   r   r   r	   r	   r	   r
   r   -   s   

r   c               @   s   e Zd ZeZdS )ÚStreamWriterN)r   r   r   ÚbytesÚcharbuffertyper	   r	   r	   r
   r"   <   s   r"   c               @   s   e Zd ZeZdS )ÚStreamReaderN)r   r   r   r#   r$   r	   r	   r	   r
   r%   ?   s   r%   c            
   C   s   t jdttttttddS )Nr   F)Únamer   r   ÚincrementalencoderÚincrementaldecoderÚstreamwriterÚstreamreaderÚ_is_text_encoding)ÚcodecsÚ	CodecInfor   r   r   r   r"   r%   r	   r	   r	   r
   ÚgetregentryD   s    r.   )r   )r   )Ú__doc__r,   r   r   r   r   r   r   r"   r%   r.   r	   r	   r	   r
   Ú<module>   s   

ã               @   sv   d Z ddlZG dd dejZG dd dejZG dd dejZG d	d
 d
eejZG dd deejZdd ZdS )a   Generic Python Character Mapping Codec.

    Use this codec directly rather than through the automatic
    conversion mechanisms supplied by unicode() and .encode().


Written by Marc-Andre Lemburg (mal@lemburg.com).

(c) Copyright CNRI, All Rights Reserved. NO WARRANTY.

é    Nc               @   s   e Zd ZejZejZdS )ÚCodecN)Ú__name__Ú
__module__Ú__qualname__ÚcodecsÚcharmap_encodeÚencodeÚcharmap_decodeÚdecode© r   r   ú"D:\Python\lib\encodings\charmap.pyr      s   r   c               @   s    e Zd ZdddZd	ddZdS )
ÚIncrementalEncoderÚstrictNc             C   s   t j | |¡ || _d S )N)r   r   Ú__init__Úmapping)ÚselfÚerrorsr   r   r   r   r      s    zIncrementalEncoder.__init__Fc             C   s   t  || j| j¡d S )Nr   )r   r   r   r   )r   ÚinputÚfinalr   r   r   r      s    zIncrementalEncoder.encode)r   N)F)r   r   r   r   r   r   r   r   r   r      s   
r   c               @   s    e Zd ZdddZd	ddZdS )
ÚIncrementalDecoderr   Nc             C   s   t j | |¡ || _d S )N)r   r   r   r   )r   r   r   r   r   r   r   !   s    zIncrementalDecoder.__init__Fc             C   s   t  || j| j¡d S )Nr   )r   r	   r   r   )r   r   r   r   r   r   r
   %   s    zIncrementalDecoder.decode)r   N)F)r   r   r   r   r
   r   r   r   r   r       s   
r   c               @   s    e Zd ZdddZdddZdS )	ÚStreamWriterr   Nc             C   s   t j | ||¡ || _d S )N)r   r   r   r   )r   Ústreamr   r   r   r   r   r   *   s    zStreamWriter.__init__c             C   s   t  ||| j¡S )N)r   r   r   )r   r   r   r   r   r   r   .   s    zStreamWriter.encode)r   N)r   )r   r   r   r   r   r   r   r   r   r   (   s   
r   c               @   s    e Zd ZdddZdddZdS )	ÚStreamReaderr   Nc             C   s   t j | ||¡ || _d S )N)r   r   r   r   )r   r   r   r   r   r   r   r   3   s    zStreamReader.__init__c             C   s   t  ||| j¡S )N)r   r
   r   )r   r   r   r   r   r   r
   7   s    zStreamReader.decode)r   N)r   )r   r   r   r   r
   r   r   r   r   r   1   s   
r   c            	   C   s   t jdtjtjttttdS )NÚcharmap)Únamer   r
   ÚincrementalencoderÚincrementaldecoderÚstreamwriterÚstreamreader)	r   Ú	CodecInfor   r   r
   r   r   r   r   r   r   r   r   Úgetregentry<   s    r    )Ú__doc__r   r   r   r   r   r   r    r   r   r   r   Ú<module>   s   	ã               @   s   d Z ddlZG dd dejZG dd dejZG dd dejZG d	d
 d
eejZG dd deejZdd ZdZe 	e¡Z
dS )zs Python Character Mapping Codec cp037 generated from 'MAPPINGS/VENDORS/MICSFT/EBCDIC/CP037.TXT' with gencodec.py.

é    Nc               @   s    e Zd ZdddZdddZdS )	ÚCodecÚstrictc             C   s   t  ||t¡S )N)ÚcodecsÚcharmap_encodeÚencoding_table)ÚselfÚinputÚerrors© r
   ú D:\Python\lib\encodings\cp037.pyÚencode   s    zCodec.encodec             C   s   t  ||t¡S )N)r   Úcharmap_decodeÚdecoding_table)r   r   r	   r
   r
   r   Údecode   s    zCodec.decodeN)r   )r   )Ú__name__Ú
__module__Ú__qualname__r   r   r
   r
   r
   r   r   	   s   
r   c               @   s   e Zd ZdddZdS )ÚIncrementalEncoderFc             C   s   t  || jt¡d S )Nr   )r   r   r	   r   )r   r   Úfinalr
   r
   r   r      s    zIncrementalEncoder.encodeN)F)r   r   r   r   r
   r
   r
   r   r      s   r   c               @   s   e Zd ZdddZdS )ÚIncrementalDecoderFc             C   s   t  || jt¡d S )Nr   )r   r   r	   r   )r   r   r   r
   r
   r   r      s    zIncrementalDecoder.decodeN)F)r   r   r   r   r
   r
   r
   r   r      s   r   c               @   s   e Zd ZdS )ÚStreamWriterN)r   r   r   r
   r
   r
   r   r      s   r   c               @   s   e Zd ZdS )ÚStreamReaderN)r   r   r   r
   r
   r
   r   r      s   r   c            	   C   s    t jdt jt jttttdS )NÚcp037)Únamer   r   ÚincrementalencoderÚincrementaldecoderÚstreamreaderÚstreamwriter)	r   Ú	CodecInfor   r   r   r   r   r   r   r
   r
   r
   r   Úgetregentry!   s    r   u   Â	ÂÂÂÂÂÂÂÂÂÂÂÂÂÂ
ÂÂÂÂÂÂÂÂÂÂÂÂÂÂÂÂ Â Ã¢Ã¤Ã Ã¡Ã£Ã¥Ã§Ã±Â¢.<(+|&Ã©ÃªÃ«Ã¨Ã­Ã®Ã¯Ã¬Ã!$*);Â¬-/ÃÃÃÃÃÃÃÃÂ¦,%_>?Ã¸ÃÃÃÃÃÃÃÃ`:#@'="ÃabcdefghiÂ«Â»Ã°Ã½Ã¾Â±Â°jklmnopqrÂªÂºÃ¦Â¸ÃÂ¤Âµ~stuvwxyzÂ¡Â¿ÃÃÃÂ®^Â£Â¥Â·Â©Â§Â¶Â¼Â½Â¾[]Â¯Â¨Â´Ã{ABCDEFGHIÂ­Ã´Ã¶Ã²Ã³Ãµ}JKLMNOPQRÂ¹Ã»Ã¼Ã¹ÃºÃ¿\Ã·STUVWXYZÂ²ÃÃÃÃÃ0123456789Â³ÃÃÃÃÂ)Ú__doc__r   r   r   r   r   r   r   r   Úcharmap_buildr   r
   r
   r
   r   Ú<module>   s     ã               @   s   d Z ddlZG dd dejZG dd dejZG dd dejZG d	d
 d
eejZG dd deejZdd ZdZe 	e¡Z
dS )zl Python Character Mapping Codec cp1006 generated from 'MAPPINGS/VENDORS/MISC/CP1006.TXT' with gencodec.py.

é    Nc               @   s    e Zd ZdddZdddZdS )	ÚCodecÚstrictc             C   s   t  ||t¡S )N)ÚcodecsÚcharmap_encodeÚencoding_table)ÚselfÚinputÚerrors© r
   ú!D:\Python\lib\encodings\cp1006.pyÚencode   s    zCodec.encodec             C   s   t  ||t¡S )N)r   Úcharmap_decodeÚdecoding_table)r   r   r	   r
   r
   r   Údecode   s    zCodec.decodeN)r   )r   )Ú__name__Ú
__module__Ú__qualname__r   r   r
   r
   r
   r   r   	   s   
r   c               @   s   e Zd ZdddZdS )ÚIncrementalEncoderFc             C   s   t  || jt¡d S )Nr   )r   r   r	   r   )r   r   Úfinalr
   r
   r   r      s    zIncrementalEncoder.encodeN)F)r   r   r   r   r
   r
   r
   r   r      s   r   c               @   s   e Zd ZdddZdS )ÚIncrementalDecoderFc             C   s   t  || jt¡d S )Nr   )r   r   r	   r   )r   r   r   r
   r
   r   r      s    zIncrementalDecoder.decodeN)F)r   r   r   r   r
   r
   r
   r   r      s   r   c               @   s   e Zd ZdS )ÚStreamWriterN)r   r   r   r
   r
   r
   r   r      s   r   c               @   s   e Zd ZdS )ÚStreamReaderN)r   r   r   r
   r
   r
   r   r      s   r   c            	   C   s    t jdt jt jttttdS )NZcp1006)Únamer   r   ÚincrementalencoderÚincrementaldecoderÚstreamreaderÚstreamwriter)	r   Ú	CodecInfor   r   r   r   r   r   r   r
   r
   r
   r   Úgetregentry!   s    r   uÑ   	
 !"#$%&'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\]^_`abcdefghijklmnopqrstuvwxyz{|}~ÂÂÂÂÂÂÂÂÂÂÂÂÂÂÂÂÂÂÂÂÂÂÂÂÂÂÂÂÂÂÂÂÂ Û°Û±Û²Û³Û´ÛµÛ¶Û·Û¸Û¹ØØÂ­Øïºïºïºïºïºïºï­ï­ïºïºïºï­¦ï­¨ïºïºïºïºï­ºï­¼ïº¡ïº£ïº¥ïº§ïº©ï®ïº«ïº­ï®ïº¯ï®ïº±ïº³ïºµïº·ïº¹ïº»ïº½ïº¿ï»ï»ï»ï»ï»ï»ï»ï»ï»ï»ï»ï»ï»ï»ï»ï»ï®ï®ï»ï»ï» ï»¡ï»£ï®ï»¥ï»§ïºï»­ï®¦ï®¨ï®©ï®ªïºïºïºïºï»±ï»²ï»³ï®°ï®®ï¹¼ï¹½)Ú__doc__r   r   r   r   r   r   r   r   Úcharmap_buildr   r
   r
   r
   r   Ú<module>   s     ã               @   s   d Z ddlZG dd dejZG dd dejZG dd dejZG d	d
 d
eejZG dd deejZdd ZdZe 	e¡Z
dS )zu Python Character Mapping Codec cp1026 generated from 'MAPPINGS/VENDORS/MICSFT/EBCDIC/CP1026.TXT' with gencodec.py.

é    Nc               @   s    e Zd ZdddZdddZdS )	ÚCodecÚstrictc             C   s   t  ||t¡S )N)ÚcodecsÚcharmap_encodeÚencoding_table)ÚselfÚinputÚerrors© r
   ú!D:\Python\lib\encodings\cp1026.pyÚencode   s    zCodec.encodec             C   s   t  ||t¡S )N)r   Úcharmap_decodeÚdecoding_table)r   r   r	   r
   r
   r   Údecode   s    zCodec.decodeN)r   )r   )Ú__name__Ú
__module__Ú__qualname__r   r   r
   r
   r
   r   r   	   s   
r   c               @   s   e Zd ZdddZdS )ÚIncrementalEncoderFc             C   s   t  || jt¡d S )Nr   )r   r   r	   r   )r   r   Úfinalr
   r
   r   r      s    zIncrementalEncoder.encodeN)F)r   r   r   r   r
   r
   r
   r   r      s   r   c               @   s   e Zd ZdddZdS )ÚIncrementalDecoderFc             C   s   t  || jt¡d S )Nr   )r   r   r	   r   )r   r   r   r
   r
   r   r      s    zIncrementalDecoder.decodeN)F)r   r   r   r   r
   r
   r
   r   r      s   r   c               @   s   e Zd ZdS )ÚStreamWriterN)r   r   r   r
   r
   r
   r   r      s   r   c               @   s   e Zd ZdS )ÚStreamReaderN)r   r   r   r
   r
   r
   r   r      s   r   c            	   C   s    t jdt jt jttttdS )NÚcp1026)Únamer   r   ÚincrementalencoderÚincrementaldecoderÚstreamreaderÚstreamwriter)	r   Ú	CodecInfor   r   r   r   r   r   r   r
   r
   r
   r   Úgetregentry!   s    r   u   Â	ÂÂÂÂÂÂÂÂÂÂÂÂÂÂ
ÂÂÂÂÂÂÂÂÂÂÂÂÂÂÂÂ Â Ã¢Ã¤Ã Ã¡Ã£Ã¥{Ã±Ã.<(+!&Ã©ÃªÃ«Ã¨Ã­Ã®Ã¯Ã¬ÃÄÄ°*);^-/ÃÃÃÃÃÃ[ÃÅ,%_>?Ã¸ÃÃÃÃÃÃÃÃÄ±:ÃÅ'=ÃÃabcdefghiÂ«Â»}`Â¦Â±Â°jklmnopqrÂªÂºÃ¦Â¸ÃÂ¤ÂµÃ¶stuvwxyzÂ¡Â¿]$@Â®Â¢Â£Â¥Â·Â©Â§Â¶Â¼Â½Â¾Â¬|Â¯Â¨Â´ÃÃ§ABCDEFGHIÂ­Ã´~Ã²Ã³ÃµÄJKLMNOPQRÂ¹Ã»\Ã¹ÃºÃ¿Ã¼Ã·STUVWXYZÂ²Ã#ÃÃÃ0123456789Â³Ã"ÃÃÂ)Ú__doc__r   r   r   r   r   r   r   r   Úcharmap_buildr   r
   r
   r
   r   Ú<module>   s     ã              @   sº  d Z ddlZG dd dejZG dd dejZG dd dejZG d	d
 d
eejZG dd deejZdd Ze e	d¡Z
e
 ddddddddddddddddd d!d"d#d$d%d&d'd(d)d*d+d,d-d.d/d0d1d2d3d4d5d6d7d8d9d:d;d<d=d>d?d@dAdBdCdDdEdFdGdHdIdJdKdLdMdNdOdPdQdRdSdTdUdVdWdXdYdZd[d\d]d^d_d`dadbdcdddedfdgdhdidjdkdldmdndodpdqdrdsdtdudvdwdxdydzd{d|d}d~dddddddddddddddddd¡ dZdddddddddddddddd d¡d¢d£d¤d¥d¦d§d¨d©dªd«d¬d­d®d¯d°d±d²d³d´dµd¶d·d¸d¹dºd»d¼d½d¾d¿dÀdÁdÂdÃdÄdÅdÆdÇdÈdÉdÊdËdÌdÍdÎdÏdÐdÑdÒdÓdÔdÕdÖd×dØdÙdÚdÛdÜdÝdÞdßdàdádâdãdädådædçdèdédêdëdìdídîdïdðdñdòdódôdõdöd÷dødùdúdûdüdýdþdÿd ddddddddd	d
dddddddddddddddddddddd d!d"d#d$d%d&d'd(d)d*d+d,d-d.d/d0d1d2d3d4d5d6d7dd8d9d:dd;d<d=d>d?d@dAdBdCdDdEdFdGdHdIdJdKdLdMdNdOdPdQdRdSdTdUdVdWdXdYdZd[d\d]d^d_d`dadbdcdddedfdgdhdidjdkdldmdnddodpdqdrdsdtdudvdwdxdydzd{d|d}d~dddddddddddddddd ZdS (  z, Python Character Mapping Codec for CP1125

é    Nc               @   s    e Zd ZdddZdddZdS )	ÚCodecÚstrictc             C   s   t  ||t¡S )N)ÚcodecsÚcharmap_encodeÚencoding_map)ÚselfÚinputÚerrors© r
   ú!D:\Python\lib\encodings\cp1125.pyÚencode   s    zCodec.encodec             C   s   t  ||t¡S )N)r   Úcharmap_decodeÚdecoding_table)r   r   r	   r
   r
   r   Údecode   s    zCodec.decodeN)r   )r   )Ú__name__Ú
__module__Ú__qualname__r   r   r
   r
   r
   r   r   	   s   
r   c               @   s   e Zd ZdddZdS )ÚIncrementalEncoderFc             C   s   t  || jt¡d S )Nr   )r   r   r	   r   )r   r   Úfinalr
   r
   r   r      s    zIncrementalEncoder.encodeN)F)r   r   r   r   r
   r
   r
   r   r      s   r   c               @   s   e Zd ZdddZdS )ÚIncrementalDecoderFc             C   s   t  || jt¡d S )Nr   )r   r   r	   r   )r   r   r   r
   r
   r   r      s    zIncrementalDecoder.decodeN)F)r   r   r   r   r
   r
   r
   r   r      s   r   c               @   s   e Zd ZdS )ÚStreamWriterN)r   r   r   r
   r
   r
   r   r      s   r   c               @   s   e Zd ZdS )ÚStreamReaderN)r   r   r   r
   r
   r
   r   r      s   r   c            	   C   s    t jdt jt jttttdS )NÚcp1125)Únamer   r   ÚincrementalencoderÚincrementaldecoderÚstreamreaderÚstreamwriter)	r   Ú	CodecInfor   r   r   r   r   r   r   r
   r
   r
   r   Úgetregentry!   s    r   é   i  i  i  i  i  i  i  i  i  i  i  i  i  i  i  i  i   i!  i"  i#  i$  i%  i&  i'  i(  i)  i*  i+  i,  i-  i.  i/  i0  i1  i2  i3  i4  i5  i6  i7  i8  i9  i:  i;  i<  i=  i>  i?  i%  i%  i%  i%  i$%  ia%  ib%  iV%  iU%  ic%  iQ%  iW%  i]%  i\%  i[%  i%  i%  i4%  i,%  i%  i %  i<%  i^%  i_%  iZ%  iT%  ii%  if%  i`%  iP%  il%  ig%  ih%  id%  ie%  iY%  iX%  iR%  iS%  ik%  ij%  i%  i%  i%  i%  i%  i%  i%  i@  iA  iB  iC  iD  iE  iF  iG  iH  iI  iJ  iK  iL  iM  iN  iO  i  iQ  i  i  i  iT  i  iV  i  iW  é·   i"  i!  é¤   i %  é    )é   é   é   é   é   é   é   é   é   é   é   é   é   é   é   é   é   é   é   é   é   é   é   é   é   é   é   é   é   é   é   é   r#   é¡   é¢   é£   r"   é¥   é¦   é§   é¨   é©   éª   é«   é¬   é­   é®   é¯   é°   é±   é²   é³   é´   éµ   é¶   r!   é¸   é¹   éº   é»   é¼   é½   é¾   é¿   éÀ   éÁ   éÂ   éÃ   éÄ   éÅ   éÆ   éÇ   éÈ   éÉ   éÊ   éË   éÌ   éÍ   éÎ   éÏ   éÐ   éÑ   éÒ   éÓ   éÔ   éÕ   éÖ   é×   éØ   éÙ   éÚ   éÛ   éÜ   éÝ   éÞ   éß   éà   éá   éâ   éã   éä   éå   éæ   éç   éè   éé   éê   éë   éì   éí   éî   éï   éð   éñ   éò   éó   éô   éõ   éö   é÷   éø   éù   éú   éû   éü   éý   éþ   éÿ   u³   	
 !"#$%&'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\]^_`abcdefghijklmnopqrstuvwxyz{|}~ÐÐÐÐÐÐÐÐÐÐÐÐÐÐÐÐÐ Ð¡Ð¢Ð£Ð¤Ð¥Ð¦Ð§Ð¨Ð©ÐªÐ«Ð¬Ð­Ð®Ð¯Ð°Ð±Ð²Ð³Ð´ÐµÐ¶Ð·Ð¸Ð¹ÐºÐ»Ð¼Ð½Ð¾Ð¿âââââ¤â¡â¢âââ£ââââââââ´â¬âââ¼âââââ©â¦â ââ¬â§â¨â¤â¥âââââ«âªâââââââÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÐÑÒÒÐÑÐÑÐÑÂ·ââÂ¤â Â é   é   é   é   é   é   é   é   é	   é
   é   é   é   é   é   é   é   é   é   é   é   é   é   é   é   é   é   é   é   é   é   é    é!   é"   é#   é$   é%   é&   é'   é(   é)   é*   é+   é,   é-   é.   é/   é0   é1   é2   é3   é4   é5   é6   é7   é8   é9   é:   é;   é<   é=   é>   é?   é@   éA   éB   éC   éD   éE   éF   éG   éH   éI   éJ   éK   éL   éM   éN   éO   éP   éQ   éR   éS   éT   éU   éV   éW   éX   éY   éZ   é[   é\   é]   é^   é_   é`   éa   éb   éc   éd   ée   éf   ég   éh   éi   éj   ék   él   ém   én   éo   ép   éq   ér   és   ét   éu   év   éw   éx   éy   éz   é{   é|   é}   é~   é   r    r   r   r   r   r   r   r$   r%   r&   r'   r(   r)   r*   r+   r,   r-   r.   r/   r0   r1   r2   r3   r4   r5   r6   r7   r8   r9   r:   r;   r<   r=   r>   r?   r@   rA   rB   rC   rD   rE   rF   rG   rH   rI   rJ   rK   rL   rM   rN   rO   rP   rQ   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   re   rU   r{   r`   ra   rz   rd   rV   rc   rb   rf   rn   r[   rv   rw   rj   rY   r\   ru   rt   ri   r_   r^   r]   rg   rh   rm   rW   rX   rZ   rr   rs   rl   rp   rq   rk   ry   rx   ro   r   r}   r|   r~   r   rR   rS   rT   r   (   r   r¡   r¢   r£   r¤   r¥   r¦   r§   r¨   r©   rª   r«   r¬   r­   r®   r¯   r°   r±   r²   r³   r´   rµ   r¶   r·   r¸   r¹   rº   r»   r¼   r½   r¾   r¿   rÀ   rÁ   rÂ   rÃ   rÄ   rÅ   rÆ   rÇ   rÈ   rÉ   rÊ   rË   rÌ   rÍ   rÎ   rÏ   rÐ   rÑ   rÒ   rÓ   rÔ   rÕ   rÖ   r×   rØ   rÙ   rÚ   rÛ   rÜ   rÝ   rÞ   rß   rà   rá   râ   rã   rä   rå   ræ   rç   rè   ré   rê   rë   rì   rí   rî   rï   rð   rñ   rò   ró   rô   rõ   rö   r÷   rø   rù   rú   rû   rü   rý   rþ   rÿ   r   r  r  r  r  r  r  r  r  r	  r
  r  r  r  r  r  r  r  r  r  r  r  r  r  r  r  r  r  r  r  r  r  r#   r"   r!   i  i  i  i  i  i  i  i  i  i  i  i  i  i  i  i  i  i  i  i  i   i!  i"  i#  i$  i%  i&  i'  i(  i)  i*  i+  i,  i-  i.  i/  i0  i1  i2  i3  i4  i5  i6  i7  i8  i9  i:  i;  i<  i=  i>  i?  i@  iA  iB  iC  iD  iE  iF  iG  iH  iI  iJ  iK  iL  iM  iN  iO  iQ  iT  iV  iW  i  i  i!  i"  i %  i%  i%  i%  i%  i%  i%  i$%  i,%  i4%  i<%  iP%  iQ%  iR%  iS%  iT%  iU%  iV%  iW%  iX%  iY%  iZ%  i[%  i\%  i]%  i^%  i_%  i`%  ia%  ib%  ic%  id%  ie%  if%  ig%  ih%  ii%  ij%  ik%  il%  i%  i%  i%  i%  i%  i%  i%  i%  i %  )Ú__doc__r   r   r   r   r   r   r   Úmake_identity_dictÚrangeÚdecoding_mapÚupdater   r   r
   r
   r
   r   Ú<module>   s  
  ã               @   s   d Z ddlZG dd dejZG dd dejZG dd dejZG d	d
 d
eejZG dd deejZdd ZdZe 	e¡Z
dS )zf Python Character Mapping Codec cp1140 generated from 'python-mappings/CP1140.TXT' with gencodec.py.

é    Nc               @   s    e Zd ZdddZdddZdS )	ÚCodecÚstrictc             C   s   t  ||t¡S )N)ÚcodecsÚcharmap_encodeÚencoding_table)ÚselfÚinputÚerrors© r
   ú!D:\Python\lib\encodings\cp1140.pyÚencode   s    zCodec.encodec             C   s   t  ||t¡S )N)r   Úcharmap_decodeÚdecoding_table)r   r   r	   r
   r
   r   Údecode   s    zCodec.decodeN)r   )r   )Ú__name__Ú
__module__Ú__qualname__r   r   r
   r
   r
   r   r   	   s   
r   c               @   s   e Zd ZdddZdS )ÚIncrementalEncoderFc             C   s   t  || jt¡d S )Nr   )r   r   r	   r   )r   r   Úfinalr
   r
   r   r      s    zIncrementalEncoder.encodeN)F)r   r   r   r   r
   r
   r
   r   r      s   r   c               @   s   e Zd ZdddZdS )ÚIncrementalDecoderFc             C   s   t  || jt¡d S )Nr   )r   r   r	   r   )r   r   r   r
   r
   r   r      s    zIncrementalDecoder.decodeN)F)r   r   r   r   r
   r
   r
   r   r      s   r   c               @   s   e Zd ZdS )ÚStreamWriterN)r   r   r   r
   r
   r
   r   r      s   r   c               @   s   e Zd ZdS )ÚStreamReaderN)r   r   r   r
   r
   r
   r   r      s   r   c            	   C   s    t jdt jt jttttdS )NÚcp1140)Únamer   r   ÚincrementalencoderÚincrementaldecoderÚstreamreaderÚstreamwriter)	r   Ú	CodecInfor   r   r   r   r   r   r   r
   r
   r
   r   Úgetregentry!   s    r   u   Â	ÂÂÂÂÂÂÂÂÂÂÂÂÂÂ
ÂÂÂÂÂÂÂÂÂÂÂÂÂÂÂÂ Â Ã¢Ã¤Ã Ã¡Ã£Ã¥Ã§Ã±Â¢.<(+|&Ã©ÃªÃ«Ã¨Ã­Ã®Ã¯Ã¬Ã!$*);Â¬-/ÃÃÃÃÃÃÃÃÂ¦,%_>?Ã¸ÃÃÃÃÃÃÃÃ`:#@'="ÃabcdefghiÂ«Â»Ã°Ã½Ã¾Â±Â°jklmnopqrÂªÂºÃ¦Â¸Ãâ¬Âµ~stuvwxyzÂ¡Â¿ÃÃÃÂ®^Â£Â¥Â·Â©Â§Â¶Â¼Â½Â¾[]Â¯Â¨Â´Ã{ABCDEFGHIÂ­Ã´Ã¶Ã²Ã³Ãµ}JKLMNOPQRÂ¹Ã»Ã¼Ã¹ÃºÃ¿\Ã·STUVWXYZÂ²ÃÃÃÃÃ0123456789Â³ÃÃÃÃÂ)Ú__doc__r   r   r   r   r   r   r   r   Úcharmap_buildr   r
   r
   r
   r   Ú<module>   s     ã               @   s   d Z ddlZG dd dejZG dd dejZG dd dejZG d	d
 d
eejZG dd deejZdd ZdZe 	e¡Z
dS )zv Python Character Mapping Codec cp1250 generated from 'MAPPINGS/VENDORS/MICSFT/WINDOWS/CP1250.TXT' with gencodec.py.

é    Nc               @   s    e Zd ZdddZdddZdS )	ÚCodecÚstrictc             C   s   t  ||t¡S )N)ÚcodecsÚcharmap_encodeÚencoding_table)ÚselfÚinputÚerrors© r
   ú!D:\Python\lib\encodings\cp1250.pyÚencode   s    zCodec.encodec             C   s   t  ||t¡S )N)r   Úcharmap_decodeÚdecoding_table)r   r   r	   r
   r
   r   Údecode   s    zCodec.decodeN)r   )r   )Ú__name__Ú
__module__Ú__qualname__r   r   r
   r
   r
   r   r   	   s   
r   c               @   s   e Zd ZdddZdS )ÚIncrementalEncoderFc             C   s   t  || jt¡d S )Nr   )r   r   r	   r   )r   r   Úfinalr
   r
   r   r      s    zIncrementalEncoder.encodeN)F)r   r   r   r   r
   r
   r
   r   r      s   r   c               @   s   e Zd ZdddZdS )ÚIncrementalDecoderFc             C   s   t  || jt¡d S )Nr   )r   r   r	   r   )r   r   r   r
   r
   r   r      s    zIncrementalDecoder.decodeN)F)r   r   r   r   r
   r
   r
   r   r      s   r   c               @   s   e Zd ZdS )ÚStreamWriterN)r   r   r   r
   r
   r
   r   r      s   r   c               @   s   e Zd ZdS )ÚStreamReaderN)r   r   r   r
   r
   r
   r   r      s   r   c            	   C   s    t jdt jt jttttdS )NÚcp1250)Únamer   r   ÚincrementalencoderÚincrementaldecoderÚstreamreaderÚstreamwriter)	r   Ú	CodecInfor   r   r   r   r   r   r   r
   r
   r
   r   Úgetregentry!   s    r   u   	
 !"#$%&'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\]^_`abcdefghijklmnopqrstuvwxyz{|}~â¬ï¿¾âï¿¾ââ¦â â¡ï¿¾â°Å â¹ÅÅ¤Å½Å¹ï¿¾âââââ¢ââï¿¾â¢Å¡âºÅÅ¥Å¾ÅºÂ ËËÅÂ¤ÄÂ¦Â§Â¨Â©ÅÂ«Â¬Â­Â®Å»Â°Â±ËÅÂ´ÂµÂ¶Â·Â¸ÄÅÂ»Ä½ËÄ¾Å¼ÅÃÃÄÃÄ¹ÄÃÄÃÄÃÄÃÃÄÄÅÅÃÃÅÃÃÅÅ®ÃÅ°ÃÃÅ¢ÃÅÃ¡Ã¢ÄÃ¤ÄºÄÃ§ÄÃ©ÄÃ«ÄÃ­Ã®ÄÄÅÅÃ³Ã´ÅÃ¶Ã·ÅÅ¯ÃºÅ±Ã¼Ã½Å£Ë)Ú__doc__r   r   r   r   r   r   r   r   Úcharmap_buildr   r
   r
   r
   r   Ú<module>   s     ã               @   s   d Z ddlZG dd dejZG dd dejZG dd dejZG d	d
 d
eejZG dd deejZdd ZdZe 	e¡Z
dS )zv Python Character Mapping Codec cp1251 generated from 'MAPPINGS/VENDORS/MICSFT/WINDOWS/CP1251.TXT' with gencodec.py.

é    Nc               @   s    e Zd ZdddZdddZdS )	ÚCodecÚstrictc             C   s   t  ||t¡S )N)ÚcodecsÚcharmap_encodeÚencoding_table)ÚselfÚinputÚerrors© r
   ú!D:\Python\lib\encodings\cp1251.pyÚencode   s    zCodec.encodec             C   s   t  ||t¡S )N)r   Úcharmap_decodeÚdecoding_table)r   r   r	   r
   r
   r   Údecode   s    zCodec.decodeN)r   )r   )Ú__name__Ú
__module__Ú__qualname__r   r   r
   r
   r
   r   r   	   s   
r   c               @   s   e Zd ZdddZdS )ÚIncrementalEncoderFc             C   s   t  || jt¡d S )Nr   )r   r   r	   r   )r   r   Úfinalr
   r
   r   r      s    zIncrementalEncoder.encodeN)F)r   r   r   r   r
   r
   r
   r   r      s   r   c               @   s   e Zd ZdddZdS )ÚIncrementalDecoderFc             C   s   t  || jt¡d S )Nr   )r   r   r	   r   )r   r   r   r
   r
   r   r      s    zIncrementalDecoder.decodeN)F)r   r   r   r   r
   r
   r
   r   r      s   r   c               @   s   e Zd ZdS )ÚStreamWriterN)r   r   r   r
   r
   r
   r   r      s   r   c               @   s   e Zd ZdS )ÚStreamReaderN)r   r   r   r
   r
   r
   r   r      s   r   c            	   C   s    t jdt jt jttttdS )NÚcp1251)Únamer   r   ÚincrementalencoderÚincrementaldecoderÚstreamreaderÚstreamwriter)	r   Ú	CodecInfor   r   r   r   r   r   r   r
   r
   r
   r   Úgetregentry!   s    r   u   	
 !"#$%&'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\]^_`abcdefghijklmnopqrstuvwxyz{|}~ÐÐâÑââ¦â â¡â¬â°Ðâ¹ÐÐÐÐÑâââââ¢ââï¿¾â¢ÑâºÑÑÑÑÂ ÐÑÐÂ¤ÒÂ¦Â§ÐÂ©ÐÂ«Â¬Â­Â®ÐÂ°Â±ÐÑÒÂµÂ¶Â·ÑâÑÂ»ÑÐÑÑÐÐÐÐÐÐÐÐÐÐÐÐÐÐÐÐÐ Ð¡Ð¢Ð£Ð¤Ð¥Ð¦Ð§Ð¨Ð©ÐªÐ«Ð¬Ð­Ð®Ð¯Ð°Ð±Ð²Ð³Ð´ÐµÐ¶Ð·Ð¸Ð¹ÐºÐ»Ð¼Ð½Ð¾Ð¿ÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑ)Ú__doc__r   r   r   r   r   r   r   r   Úcharmap_buildr   r
   r
   r
   r   Ú<module>   s     ã               @   s   d Z ddlZG dd dejZG dd dejZG dd dejZG d	d
 d
eejZG dd deejZdd ZdZe 	e¡Z
dS )zv Python Character Mapping Codec cp1252 generated from 'MAPPINGS/VENDORS/MICSFT/WINDOWS/CP1252.TXT' with gencodec.py.

é    Nc               @   s    e Zd ZdddZdddZdS )	ÚCodecÚstrictc             C   s   t  ||t¡S )N)ÚcodecsÚcharmap_encodeÚencoding_table)ÚselfÚinputÚerrors© r
   ú!D:\Python\lib\encodings\cp1252.pyÚencode   s    zCodec.encodec             C   s   t  ||t¡S )N)r   Úcharmap_decodeÚdecoding_table)r   r   r	   r
   r
   r   Údecode   s    zCodec.decodeN)r   )r   )Ú__name__Ú
__module__Ú__qualname__r   r   r
   r
   r
   r   r   	   s   
r   c               @   s   e Zd ZdddZdS )ÚIncrementalEncoderFc             C   s   t  || jt¡d S )Nr   )r   r   r	   r   )r   r   Úfinalr
   r
   r   r      s    zIncrementalEncoder.encodeN)F)r   r   r   r   r
   r
   r
   r   r      s   r   c               @   s   e Zd ZdddZdS )ÚIncrementalDecoderFc             C   s   t  || jt¡d S )Nr   )r   r   r	   r   )r   r   r   r
   r
   r   r      s    zIncrementalDecoder.decodeN)F)r   r   r   r   r
   r
   r
   r   r      s   r   c               @   s   e Zd ZdS )ÚStreamWriterN)r   r   r   r
   r
   r
   r   r      s   r   c               @   s   e Zd ZdS )ÚStreamReaderN)r   r   r   r
   r
   r
   r   r      s   r   c            	   C   s    t jdt jt jttttdS )NÚcp1252)Únamer   r   ÚincrementalencoderÚincrementaldecoderÚstreamreaderÚstreamwriter)	r   Ú	CodecInfor   r   r   r   r   r   r   r
   r
   r
   r   Úgetregentry!   s    r   u   	
 !"#$%&'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\]^_`abcdefghijklmnopqrstuvwxyz{|}~â¬ï¿¾âÆââ¦â â¡Ëâ°Å â¹Åï¿¾Å½ï¿¾ï¿¾âââââ¢ââËâ¢Å¡âºÅï¿¾Å¾Å¸Â Â¡Â¢Â£Â¤Â¥Â¦Â§Â¨Â©ÂªÂ«Â¬Â­Â®Â¯Â°Â±Â²Â³Â´ÂµÂ¶Â·Â¸Â¹ÂºÂ»Â¼Â½Â¾Â¿ÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃ Ã¡Ã¢Ã£Ã¤Ã¥Ã¦Ã§Ã¨Ã©ÃªÃ«Ã¬Ã­Ã®Ã¯Ã°Ã±Ã²Ã³Ã´ÃµÃ¶Ã·Ã¸Ã¹ÃºÃ»Ã¼Ã½Ã¾Ã¿)Ú__doc__r   r   r   r   r   r   r   r   Úcharmap_buildr   r
   r
   r
   r   Ú<module>   s     ã               @   s   d Z ddlZG dd dejZG dd dejZG dd dejZG d	d
 d
eejZG dd deejZdd ZdZe 	e¡Z
dS )zv Python Character Mapping Codec cp1253 generated from 'MAPPINGS/VENDORS/MICSFT/WINDOWS/CP1253.TXT' with gencodec.py.

é    Nc               @   s    e Zd ZdddZdddZdS )	ÚCodecÚstrictc             C   s   t  ||t¡S )N)ÚcodecsÚcharmap_encodeÚencoding_table)ÚselfÚinputÚerrors© r
   ú!D:\Python\lib\encodings\cp1253.pyÚencode   s    zCodec.encodec             C   s   t  ||t¡S )N)r   Úcharmap_decodeÚdecoding_table)r   r   r	   r
   r
   r   Údecode   s    zCodec.decodeN)r   )r   )Ú__name__Ú
__module__Ú__qualname__r   r   r
   r
   r
   r   r   	   s   
r   c               @   s   e Zd ZdddZdS )ÚIncrementalEncoderFc             C   s   t  || jt¡d S )Nr   )r   r   r	   r   )r   r   Úfinalr
   r
   r   r      s    zIncrementalEncoder.encodeN)F)r   r   r   r   r
   r
   r
   r   r      s   r   c               @   s   e Zd ZdddZdS )ÚIncrementalDecoderFc             C   s   t  || jt¡d S )Nr   )r   r   r	   r   )r   r   r   r
   r
   r   r      s    zIncrementalDecoder.decodeN)F)r   r   r   r   r
   r
   r
   r   r      s   r   c               @   s   e Zd ZdS )ÚStreamWriterN)r   r   r   r
   r
   r
   r   r      s   r   c               @   s   e Zd ZdS )ÚStreamReaderN)r   r   r   r
   r
   r
   r   r      s   r   c            	   C   s    t jdt jt jttttdS )NÚcp1253)Únamer   r   ÚincrementalencoderÚincrementaldecoderÚstreamreaderÚstreamwriter)	r   Ú	CodecInfor   r   r   r   r   r   r   r
   r
   r
   r   Úgetregentry!   s    r   u£   	
 !"#$%&'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\]^_`abcdefghijklmnopqrstuvwxyz{|}~â¬ï¿¾âÆââ¦â â¡ï¿¾â°ï¿¾â¹ï¿¾ï¿¾ï¿¾ï¿¾ï¿¾âââââ¢ââï¿¾â¢ï¿¾âºï¿¾ï¿¾ï¿¾ï¿¾Â ÎÎÂ£Â¤Â¥Â¦Â§Â¨Â©ï¿¾Â«Â¬Â­Â®âÂ°Â±Â²Â³ÎÂµÂ¶Â·ÎÎÎÂ»ÎÂ½ÎÎÎÎÎÎÎÎÎÎÎÎÎÎÎÎÎÎÎ Î¡ï¿¾Î£Î¤Î¥Î¦Î§Î¨Î©ÎªÎ«Î¬Î­Î®Î¯Î°Î±Î²Î³Î´ÎµÎ¶Î·Î¸Î¹ÎºÎ»Î¼Î½Î¾Î¿ÏÏÏÏÏÏÏÏÏÏÏÏÏÏÏï¿¾)Ú__doc__r   r   r   r   r   r   r   r   Úcharmap_buildr   r
   r
   r
   r   Ú<module>   s     ã               @   s   d Z ddlZG dd dejZG dd dejZG dd dejZG d	d
 d
eejZG dd deejZdd ZdZe 	e¡Z
dS )zv Python Character Mapping Codec cp1254 generated from 'MAPPINGS/VENDORS/MICSFT/WINDOWS/CP1254.TXT' with gencodec.py.

é    Nc               @   s    e Zd ZdddZdddZdS )	ÚCodecÚstrictc             C   s   t  ||t¡S )N)ÚcodecsÚcharmap_encodeÚencoding_table)ÚselfÚinputÚerrors© r
   ú!D:\Python\lib\encodings\cp1254.pyÚencode   s    zCodec.encodec             C   s   t  ||t¡S )N)r   Úcharmap_decodeÚdecoding_table)r   r   r	   r
   r
   r   Údecode   s    zCodec.decodeN)r   )r   )Ú__name__Ú
__module__Ú__qualname__r   r   r
   r
   r
   r   r   	   s   
r   c               @   s   e Zd ZdddZdS )ÚIncrementalEncoderFc             C   s   t  || jt¡d S )Nr   )r   r   r	   r   )r   r   Úfinalr
   r
   r   r      s    zIncrementalEncoder.encodeN)F)r   r   r   r   r
   r
   r
   r   r      s   r   c               @   s   e Zd ZdddZdS )ÚIncrementalDecoderFc             C   s   t  || jt¡d S )Nr   )r   r   r	   r   )r   r   r   r
   r
   r   r      s    zIncrementalDecoder.decodeN)F)r   r   r   r   r
   r
   r
   r   r      s   r   c               @   s   e Zd ZdS )ÚStreamWriterN)r   r   r   r
   r
   r
   r   r      s   r   c               @   s   e Zd ZdS )ÚStreamReaderN)r   r   r   r
   r
   r
   r   r      s   r   c            	   C   s    t jdt jt jttttdS )NÚcp1254)Únamer   r   ÚincrementalencoderÚincrementaldecoderÚstreamreaderÚstreamwriter)	r   Ú	CodecInfor   r   r   r   r   r   r   r
   r
   r
   r   Úgetregentry!   s    r   u   	
 !"#$%&'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\]^_`abcdefghijklmnopqrstuvwxyz{|}~â¬ï¿¾âÆââ¦â â¡Ëâ°Å â¹Åï¿¾ï¿¾ï¿¾ï¿¾âââââ¢ââËâ¢Å¡âºÅï¿¾ï¿¾Å¸Â Â¡Â¢Â£Â¤Â¥Â¦Â§Â¨Â©ÂªÂ«Â¬Â­Â®Â¯Â°Â±Â²Â³Â´ÂµÂ¶Â·Â¸Â¹ÂºÂ»Â¼Â½Â¾Â¿ÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÄÃÃÃÃÃÃÃÃÃÃÃÃÄ°ÅÃÃ Ã¡Ã¢Ã£Ã¤Ã¥Ã¦Ã§Ã¨Ã©ÃªÃ«Ã¬Ã­Ã®Ã¯ÄÃ±Ã²Ã³Ã´ÃµÃ¶Ã·Ã¸Ã¹ÃºÃ»Ã¼Ä±ÅÃ¿)Ú__doc__r   r   r   r   r   r   r   r   Úcharmap_buildr   r
   r
   r
   r   Ú<module>   s     ã               @   s   d Z ddlZG dd dejZG dd dejZG dd dejZG d	d
 d
eejZG dd deejZdd ZdZe 	e¡Z
dS )zv Python Character Mapping Codec cp1255 generated from 'MAPPINGS/VENDORS/MICSFT/WINDOWS/CP1255.TXT' with gencodec.py.

é    Nc               @   s    e Zd ZdddZdddZdS )	ÚCodecÚstrictc             C   s   t  ||t¡S )N)ÚcodecsÚcharmap_encodeÚencoding_table)ÚselfÚinputÚerrors© r
   ú!D:\Python\lib\encodings\cp1255.pyÚencode   s    zCodec.encodec             C   s   t  ||t¡S )N)r   Úcharmap_decodeÚdecoding_table)r   r   r	   r
   r
   r   Údecode   s    zCodec.decodeN)r   )r   )Ú__name__Ú
__module__Ú__qualname__r   r   r
   r
   r
   r   r   	   s   
r   c               @   s   e Zd ZdddZdS )ÚIncrementalEncoderFc             C   s   t  || jt¡d S )Nr   )r   r   r	   r   )r   r   Úfinalr
   r
   r   r      s    zIncrementalEncoder.encodeN)F)r   r   r   r   r
   r
   r
   r   r      s   r   c               @   s   e Zd ZdddZdS )ÚIncrementalDecoderFc             C   s   t  || jt¡d S )Nr   )r   r   r	   r   )r   r   r   r
   r
   r   r      s    zIncrementalDecoder.decodeN)F)r   r   r   r   r
   r
   r
   r   r      s   r   c               @   s   e Zd ZdS )ÚStreamWriterN)r   r   r   r
   r
   r
   r   r      s   r   c               @   s   e Zd ZdS )ÚStreamReaderN)r   r   r   r
   r
   r
   r   r      s   r   c            	   C   s    t jdt jt jttttdS )NÚcp1255)Únamer   r   ÚincrementalencoderÚincrementaldecoderÚstreamreaderÚstreamwriter)	r   Ú	CodecInfor   r   r   r   r   r   r   r
   r
   r
   r   Úgetregentry!   s    r   u«   	
 !"#$%&'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\]^_`abcdefghijklmnopqrstuvwxyz{|}~â¬ï¿¾âÆââ¦â â¡Ëâ°ï¿¾â¹ï¿¾ï¿¾ï¿¾ï¿¾ï¿¾âââââ¢ââËâ¢ï¿¾âºï¿¾ï¿¾ï¿¾ï¿¾Â Â¡Â¢Â£âªÂ¥Â¦Â§Â¨Â©ÃÂ«Â¬Â­Â®Â¯Â°Â±Â²Â³Â´ÂµÂ¶Â·Â¸Â¹Ã·Â»Â¼Â½Â¾Â¿Ö°Ö±Ö²Ö³Ö´ÖµÖ¶Ö·Ö¸Ö¹ï¿¾Ö»Ö¼Ö½Ö¾Ö¿×××××°×±×²×³×´ï¿¾ï¿¾ï¿¾ï¿¾ï¿¾ï¿¾ï¿¾××××××××××××××××× ×¡×¢×£×¤×¥×¦×§×¨×©×ªï¿¾ï¿¾ââï¿¾)Ú__doc__r   r   r   r   r   r   r   r   Úcharmap_buildr   r
   r
   r
   r   Ú<module>   s     ã               @   s   d Z ddlZG dd dejZG dd dejZG dd dejZG d	d
 d
eejZG dd deejZdd ZdZe 	e¡Z
dS )zv Python Character Mapping Codec cp1256 generated from 'MAPPINGS/VENDORS/MICSFT/WINDOWS/CP1256.TXT' with gencodec.py.

é    Nc               @   s    e Zd ZdddZdddZdS )	ÚCodecÚstrictc             C   s   t  ||t¡S )N)ÚcodecsÚcharmap_encodeÚencoding_table)ÚselfÚinputÚerrors© r
   ú!D:\Python\lib\encodings\cp1256.pyÚencode   s    zCodec.encodec             C   s   t  ||t¡S )N)r   Úcharmap_decodeÚdecoding_table)r   r   r	   r
   r
   r   Údecode   s    zCodec.decodeN)r   )r   )Ú__name__Ú
__module__Ú__qualname__r   r   r
   r
   r
   r   r   	   s   
r   c               @   s   e Zd ZdddZdS )ÚIncrementalEncoderFc             C   s   t  || jt¡d S )Nr   )r   r   r	   r   )r   r   Úfinalr
   r
   r   r      s    zIncrementalEncoder.encodeN)F)r   r   r   r   r
   r
   r
   r   r      s   r   c               @   s   e Zd ZdddZdS )ÚIncrementalDecoderFc             C   s   t  || jt¡d S )Nr   )r   r   r	   r   )r   r   r   r
   r
   r   r      s    zIncrementalDecoder.decodeN)F)r   r   r   r   r
   r
   r
   r   r      s   r   c               @   s   e Zd ZdS )ÚStreamWriterN)r   r   r   r
   r
   r
   r   r      s   r   c               @   s   e Zd ZdS )ÚStreamReaderN)r   r   r   r
   r
   r
   r   r      s   r   c            	   C   s    t jdt jt jttttdS )NÚcp1256)Únamer   r   ÚincrementalencoderÚincrementaldecoderÚstreamreaderÚstreamwriter)	r   Ú	CodecInfor   r   r   r   r   r   r   r
   r
   r
   r   Úgetregentry!   s    r   u   	
 !"#$%&'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\]^_`abcdefghijklmnopqrstuvwxyz{|}~â¬Ù¾âÆââ¦â â¡Ëâ°Ù¹â¹ÅÚÚÚÚ¯âââââ¢ââÚ©â¢ÚâºÅââÚºÂ ØÂ¢Â£Â¤Â¥Â¦Â§Â¨Â©Ú¾Â«Â¬Â­Â®Â¯Â°Â±Â²Â³Â´ÂµÂ¶Â·Â¸Â¹ØÂ»Â¼Â½Â¾ØÛØ¡Ø¢Ø£Ø¤Ø¥Ø¦Ø§Ø¨Ø©ØªØ«Ø¬Ø­Ø®Ø¯Ø°Ø±Ø²Ø³Ø´ØµØ¶ÃØ·Ø¸Ø¹ØºÙÙÙÙÃ ÙÃ¢ÙÙÙÙÃ§Ã¨Ã©ÃªÃ«ÙÙÃ®Ã¯ÙÙÙÙÃ´ÙÙÃ·ÙÃ¹ÙÃ»Ã¼ââÛ)Ú__doc__r   r   r   r   r   r   r   r   Úcharmap_buildr   r
   r
   r
   r   Ú<module>   s     ã               @   s   d Z ddlZG dd dejZG dd dejZG dd dejZG d	d
 d
eejZG dd deejZdd ZdZe 	e¡Z
dS )zv Python Character Mapping Codec cp1257 generated from 'MAPPINGS/VENDORS/MICSFT/WINDOWS/CP1257.TXT' with gencodec.py.

é    Nc               @   s    e Zd ZdddZdddZdS )	ÚCodecÚstrictc             C   s   t  ||t¡S )N)ÚcodecsÚcharmap_encodeÚencoding_table)ÚselfÚinputÚerrors© r
   ú!D:\Python\lib\encodings\cp1257.pyÚencode   s    zCodec.encodec             C   s   t  ||t¡S )N)r   Úcharmap_decodeÚdecoding_table)r   r   r	   r
   r
   r   Údecode   s    zCodec.decodeN)r   )r   )Ú__name__Ú
__module__Ú__qualname__r   r   r
   r
   r
   r   r   	   s   
r   c               @   s   e Zd ZdddZdS )ÚIncrementalEncoderFc             C   s   t  || jt¡d S )Nr   )r   r   r	   r   )r   r   Úfinalr
   r
   r   r      s    zIncrementalEncoder.encodeN)F)r   r   r   r   r
   r
   r
   r   r      s   r   c               @   s   e Zd ZdddZdS )ÚIncrementalDecoderFc             C   s   t  || jt¡d S )Nr   )r   r   r	   r   )r   r   r   r
   r
   r   r      s    zIncrementalDecoder.decodeN)F)r   r   r   r   r
   r
   r
   r   r      s   r   c               @   s   e Zd ZdS )ÚStreamWriterN)r   r   r   r
   r
   r
   r   r      s   r   c               @   s   e Zd ZdS )ÚStreamReaderN)r   r   r   r
   r
   r
   r   r      s   r   c            	   C   s    t jdt jt jttttdS )NÚcp1257)Únamer   r   ÚincrementalencoderÚincrementaldecoderÚstreamreaderÚstreamwriter)	r   Ú	CodecInfor   r   r   r   r   r   r   r
   r
   r
   r   Úgetregentry!   s    r   u   	
 !"#$%&'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\]^_`abcdefghijklmnopqrstuvwxyz{|}~â¬ï¿¾âï¿¾ââ¦â â¡ï¿¾â°ï¿¾â¹ï¿¾Â¨ËÂ¸ï¿¾âââââ¢ââï¿¾â¢ï¿¾âºï¿¾Â¯Ëï¿¾Â ï¿¾Â¢Â£Â¤ï¿¾Â¦Â§ÃÂ©ÅÂ«Â¬Â­Â®ÃÂ°Â±Â²Â³Â´ÂµÂ¶Â·Ã¸Â¹ÅÂ»Â¼Â½Â¾Ã¦ÄÄ®ÄÄÃÃÄÄÄÃÅ¹ÄÄ¢Ä¶ÄªÄ»Å ÅÅÃÅÃÃÃÅ²ÅÅÅªÃÅ»Å½ÃÄÄ¯ÄÄÃ¤Ã¥ÄÄÄÃ©ÅºÄÄ£Ä·Ä«Ä¼Å¡ÅÅÃ³ÅÃµÃ¶Ã·Å³ÅÅÅ«Ã¼Å¼Å¾Ë)Ú__doc__r   r   r   r   r   r   r   r   Úcharmap_buildr   r
   r
   r
   r   Ú<module>   s     ã               @   s   d Z ddlZG dd dejZG dd dejZG dd dejZG d	d
 d
eejZG dd deejZdd ZdZe 	e¡Z
dS )zv Python Character Mapping Codec cp1258 generated from 'MAPPINGS/VENDORS/MICSFT/WINDOWS/CP1258.TXT' with gencodec.py.

é    Nc               @   s    e Zd ZdddZdddZdS )	ÚCodecÚstrictc             C   s   t  ||t¡S )N)ÚcodecsÚcharmap_encodeÚencoding_table)ÚselfÚinputÚerrors© r
   ú!D:\Python\lib\encodings\cp1258.pyÚencode   s    zCodec.encodec             C   s   t  ||t¡S )N)r   Úcharmap_decodeÚdecoding_table)r   r   r	   r
   r
   r   Údecode   s    zCodec.decodeN)r   )r   )Ú__name__Ú
__module__Ú__qualname__r   r   r
   r
   r
   r   r   	   s   
r   c               @   s   e Zd ZdddZdS )ÚIncrementalEncoderFc             C   s   t  || jt¡d S )Nr   )r   r   r	   r   )r   r   Úfinalr
   r
   r   r      s    zIncrementalEncoder.encodeN)F)r   r   r   r   r
   r
   r
   r   r      s   r   c               @   s   e Zd ZdddZdS )ÚIncrementalDecoderFc             C   s   t  || jt¡d S )Nr   )r   r   r	   r   )r   r   r   r
   r
   r   r      s    zIncrementalDecoder.decodeN)F)r   r   r   r   r
   r
   r
   r   r      s   r   c               @   s   e Zd ZdS )ÚStreamWriterN)r   r   r   r
   r
   r
   r   r      s   r   c               @   s   e Zd ZdS )ÚStreamReaderN)r   r   r   r
   r
   r
   r   r      s   r   c            	   C   s    t jdt jt jttttdS )NÚcp1258)Únamer   r   ÚincrementalencoderÚincrementaldecoderÚstreamreaderÚstreamwriter)	r   Ú	CodecInfor   r   r   r   r   r   r   r
   r
   r
   r   Úgetregentry!   s    r   u   	
 !"#$%&'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\]^_`abcdefghijklmnopqrstuvwxyz{|}~â¬ï¿¾âÆââ¦â â¡Ëâ°ï¿¾â¹Åï¿¾ï¿¾ï¿¾ï¿¾âââââ¢ââËâ¢ï¿¾âºÅï¿¾ï¿¾Å¸Â Â¡Â¢Â£Â¤Â¥Â¦Â§Â¨Â©ÂªÂ«Â¬Â­Â®Â¯Â°Â±Â²Â³Â´ÂµÂ¶Â·Â¸Â¹ÂºÂ»Â¼Â½Â¾Â¿ÃÃÃÄÃÃÃÃÃÃÃÃÌÃÃÃÄÃÌÃÃÆ ÃÃÃÃÃÃÃÆ¯ÌÃÃ Ã¡Ã¢ÄÃ¤Ã¥Ã¦Ã§Ã¨Ã©ÃªÃ«ÌÃ­Ã®Ã¯ÄÃ±Ì£Ã³Ã´Æ¡Ã¶Ã·Ã¸Ã¹ÃºÃ»Ã¼Æ°â«Ã¿)Ú__doc__r   r   r   r   r   r   r   r   Úcharmap_buildr   r
   r
   r
   r   Ú<module>   s     ã               @   s   d Z ddlZG dd dejZG dd dejZG dd dejZG d	d
 d
eejZG dd deejZdd ZdZe 	e¡Z
dS )zd Python Character Mapping Codec cp273 generated from 'python-mappings/CP273.TXT' with gencodec.py.

é    Nc               @   s    e Zd ZdddZdddZdS )	ÚCodecÚstrictc             C   s   t  ||t¡S )N)ÚcodecsÚcharmap_encodeÚencoding_table)ÚselfÚinputÚerrors© r
   ú D:\Python\lib\encodings\cp273.pyÚencode   s    zCodec.encodec             C   s   t  ||t¡S )N)r   Úcharmap_decodeÚdecoding_table)r   r   r	   r
   r
   r   Údecode   s    zCodec.decodeN)r   )r   )Ú__name__Ú
__module__Ú__qualname__r   r   r
   r
   r
   r   r   	   s   
r   c               @   s   e Zd ZdddZdS )ÚIncrementalEncoderFc             C   s   t  || jt¡d S )Nr   )r   r   r	   r   )r   r   Úfinalr
   r
   r   r      s    zIncrementalEncoder.encodeN)F)r   r   r   r   r
   r
   r
   r   r      s   r   c               @   s   e Zd ZdddZdS )ÚIncrementalDecoderFc             C   s   t  || jt¡d S )Nr   )r   r   r	   r   )r   r   r   r
   r
   r   r      s    zIncrementalDecoder.decodeN)F)r   r   r   r   r
   r
   r
   r   r      s   r   c               @   s   e Zd ZdS )ÚStreamWriterN)r   r   r   r
   r
   r
   r   r      s   r   c               @   s   e Zd ZdS )ÚStreamReaderN)r   r   r   r
   r
   r
   r   r      s   r   c            	   C   s    t jdt jt jttttdS )NÚcp273)Únamer   r   ÚincrementalencoderÚincrementaldecoderÚstreamreaderÚstreamwriter)	r   Ú	CodecInfor   r   r   r   r   r   r   r
   r
   r
   r   Úgetregentry!   s    r   u   Â	ÂÂÂÂÂÂÂÂÂÂÂÂÂÂ
ÂÂÂÂÂÂÂÂÂÂÂÂÂÂÂÂ Â Ã¢{Ã Ã¡Ã£Ã¥Ã§Ã±Ã.<(+!&Ã©ÃªÃ«Ã¨Ã­Ã®Ã¯Ã¬~Ã$*);^-/Ã[ÃÃÃÃÃÃÃ¶,%_>?Ã¸ÃÃÃÃÃÃÃÃ`:#Â§'="ÃabcdefghiÂ«Â»Ã°Ã½Ã¾Â±Â°jklmnopqrÂªÂºÃ¦Â¸ÃÂ¤ÂµÃstuvwxyzÂ¡Â¿ÃÃÃÂ®Â¢Â£Â¥Â·Â©@Â¶Â¼Â½Â¾Â¬|â¾Â¨Â´ÃÃ¤ABCDEFGHIÂ­Ã´Â¦Ã²Ã³ÃµÃ¼JKLMNOPQRÂ¹Ã»}Ã¹ÃºÃ¿ÃÃ·STUVWXYZÂ²Ã\ÃÃÃ0123456789Â³Ã]ÃÃÂ)Ú__doc__r   r   r   r   r   r   r   r   Úcharmap_buildr   r
   r
   r
   r   Ú<module>   s     ã               @   s   d Z ddlZG dd dejZG dd dejZG dd dejZG d	d
 d
eejZG dd deejZdd ZdZe 	e¡Z
dS )zj Python Character Mapping Codec cp424 generated from 'MAPPINGS/VENDORS/MISC/CP424.TXT' with gencodec.py.

é    Nc               @   s    e Zd ZdddZdddZdS )	ÚCodecÚstrictc             C   s   t  ||t¡S )N)ÚcodecsÚcharmap_encodeÚencoding_table)ÚselfÚinputÚerrors© r
   ú D:\Python\lib\encodings\cp424.pyÚencode   s    zCodec.encodec             C   s   t  ||t¡S )N)r   Úcharmap_decodeÚdecoding_table)r   r   r	   r
   r
   r   Údecode   s    zCodec.decodeN)r   )r   )Ú__name__Ú
__module__Ú__qualname__r   r   r
   r
   r
   r   r   	   s   
r   c               @   s   e Zd ZdddZdS )ÚIncrementalEncoderFc             C   s   t  || jt¡d S )Nr   )r   r   r	   r   )r   r   Úfinalr
   r
   r   r      s    zIncrementalEncoder.encodeN)F)r   r   r   r   r
   r
   r
   r   r      s   r   c               @   s   e Zd ZdddZdS )ÚIncrementalDecoderFc             C   s   t  || jt¡d S )Nr   )r   r   r	   r   )r   r   r   r
   r
   r   r      s    zIncrementalDecoder.decodeN)F)r   r   r   r   r
   r
   r
   r   r      s   r   c               @   s   e Zd ZdS )ÚStreamWriterN)r   r   r   r
   r
   r
   r   r      s   r   c               @   s   e Zd ZdS )ÚStreamReaderN)r   r   r   r
   r
   r
   r   r      s   r   c            	   C   s    t jdt jt jttttdS )NÚcp424)Únamer   r   ÚincrementalencoderÚincrementaldecoderÚstreamreaderÚstreamwriter)	r   Ú	CodecInfor   r   r   r   r   r   r   r
   r
   r
   r   Úgetregentry!   s    r   u§   Â	ÂÂÂÂÂÂÂÂÂÂÂÂÂÂ
ÂÂÂÂÂÂÂÂÂÂÂÂÂÂÂÂ ×××××××××Â¢.<(+|&×××××××× ×¡!$*);Â¬-/×¢×£×¤×¥×¦×§×¨×©Â¦,%_>?ï¿¾×ªï¿¾ï¿¾Â ï¿¾ï¿¾ï¿¾â`:#@'="ï¿¾abcdefghiÂ«Â»ï¿¾ï¿¾ï¿¾Â±Â°jklmnopqrï¿¾ï¿¾ï¿¾Â¸ï¿¾Â¤Âµ~stuvwxyzï¿¾ï¿¾ï¿¾ï¿¾ï¿¾Â®^Â£Â¥Â·Â©Â§Â¶Â¼Â½Â¾[]Â¯Â¨Â´Ã{ABCDEFGHIÂ­ï¿¾ï¿¾ï¿¾ï¿¾ï¿¾}JKLMNOPQRÂ¹ï¿¾ï¿¾ï¿¾ï¿¾ï¿¾\Ã·STUVWXYZÂ²ï¿¾ï¿¾ï¿¾ï¿¾ï¿¾0123456789Â³ï¿¾ï¿¾ï¿¾ï¿¾Â)Ú__doc__r   r   r   r   r   r   r   r   Úcharmap_buildr   r
   r
   r
   r   Ú<module>   s     ã              @   sV  d Z ddlZG dd dejZG dd dejZG dd dejZG d	d
 d
eejZG dd deejZdd Ze e	d¡Z
e
 ddddddddddddddddd d!d"d#d$d%d&d'd(d)d*d+d,d-d.d/d0d1d2d3d4d5d6d7d8d9d:d;d<d=d>d?d@dAdBdCdDdEdFdGdHdIdJdKdLdMdNdOdPdQdRdSdTdUdVdWdXdYdZd[d\d]d^d_d`dadbdcdddedfdgdhdidjdkdldmdndodpdqdrdsdtdudvdwdxdydzd{d|d}d~dddddddddddddddddd¡ dZdddddddddddddddd d¡d¢d£d¤d¥d¦d§d¨d©dªd«d¬d­d®d¯d°d±d²d³d´dµd¶d·d¸d¹dºd»d¼d½d¾d¿dÀdÁdÂdÃdÄdÅdÆdÇdÈdÉdÊdËdÌdÍdÎdÏdÐdÑdÒdÓdÔdÕdÖd×dØdÙdÚdÛdÜdÝdÞdßdàdádâdãdädådædçdèdédêdëdìdídîdïdðdñdòdódôdõdöd÷dødùdúdûdüdýdþdÿd ddddddddd	d
ddddddd(ddddddd6dd4dd!d3ddd:d>dddddd d-d!d"d0d#dd$d%d&d'd(d)d*d+d,d-d=d.d/d0d1d+d2d3d$d4d,d5d6d7d8ddddddddd9ddd1dd:d'd&dddd;d2d%d<d#d=dd>d?d8d@dAdBdCdDdEddFd7dGd)d dHdd?dIdJdKdLd;d<d"ddMdvdNdOd5dPdQdRdSdTdUdVdWdqd*dXdYdZdddd[d\ ZdS (]  zf Python Character Mapping Codec cp437 generated from 'VENDORS/MICSFT/PC/CP437.TXT' with gencodec.py.

é    Nc               @   s    e Zd ZdddZdddZdS )	ÚCodecÚstrictc             C   s   t  ||t¡S )N)ÚcodecsÚcharmap_encodeÚencoding_map)ÚselfÚinputÚerrors© r
   ú D:\Python\lib\encodings\cp437.pyÚencode   s    zCodec.encodec             C   s   t  ||t¡S )N)r   Úcharmap_decodeÚdecoding_table)r   r   r	   r
   r
   r   Údecode   s    zCodec.decodeN)r   )r   )Ú__name__Ú
__module__Ú__qualname__r   r   r
   r
   r
   r   r   	   s   
r   c               @   s   e Zd ZdddZdS )ÚIncrementalEncoderFc             C   s   t  || jt¡d S )Nr   )r   r   r	   r   )r   r   Úfinalr
   r
   r   r      s    zIncrementalEncoder.encodeN)F)r   r   r   r   r
   r
   r
   r   r      s   r   c               @   s   e Zd ZdddZdS )ÚIncrementalDecoderFc             C   s   t  || jt¡d S )Nr   )r   r   r	   r   )r   r   r   r
   r
   r   r      s    zIncrementalDecoder.decodeN)F)r   r   r   r   r
   r
   r
   r   r      s   r   c               @   s   e Zd ZdS )ÚStreamWriterN)r   r   r   r
   r
   r
   r   r      s   r   c               @   s   e Zd ZdS )ÚStreamReaderN)r   r   r   r
   r
   r
   r   r      s   r   c            	   C   s    t jdt jt jttttdS )NÚcp437)Únamer   r   ÚincrementalencoderÚincrementaldecoderÚstreamreaderÚstreamwriter)	r   Ú	CodecInfor   r   r   r   r   r   r   r
   r
   r
   r   Úgetregentry!   s    r   é   éÇ   éü   éé   éâ   éä   éà   éå   éç   éê   éë   éè   éï   éî   éì   éÄ   éÅ   éÉ   éæ   éÆ   éô   éö   éò   éû   éù   éÿ   éÖ   éÜ   é¢   é£   é¥   i§   i  éá   éí   éó   éú   éñ   éÑ   éª   éº   é¿   i#  é¬   é½   é¼   é¡   é«   é»   i%  i%  i%  i%  i$%  ia%  ib%  iV%  iU%  ic%  iQ%  iW%  i]%  i\%  i[%  i%  i%  i4%  i,%  i%  i %  i<%  i^%  i_%  iZ%  iT%  ii%  if%  i`%  iP%  il%  ig%  ih%  id%  ie%  iY%  iX%  iR%  iS%  ik%  ij%  i%  i%  i%  i%  i%  i%  i%  i±  éß   i  iÀ  i£  iÃ  éµ   iÄ  i¦  i  i©  i´  i"  iÆ  iµ  i)"  ia"  é±   ie"  id"  i #  i!#  é÷   iH"  é°   i"  é·   i"  i   é²   i %  é    )é   é   é   é   é   é   é   é   é   é   é   é   é   é   é   é   é   é   é   é   é   é   é   é   é   é   é   é   é   é   é   é   rU   rK   r<   r=   é¤   r>   é¦   é§   é¨   é©   rE   rL   rH   é­   é®   é¯   rR   rP   rT   é³   é´   rO   é¶   rS   é¸   é¹   rF   rM   rJ   rI   é¾   rG   éÀ   éÁ   éÂ   éÃ   r/   r0   r3   r!   éÈ   r1   éÊ   éË   éÌ   éÍ   éÎ   éÏ   éÐ   rD   éÒ   éÓ   éÔ   éÕ   r:   é×   éØ   éÙ   éÚ   éÛ   r;   éÝ   éÞ   rN   r&   r?   r$   éã   r%   r'   r2   r(   r+   r#   r)   r*   r.   r@   r-   r,   éð   rC   r6   rA   r4   éõ   r5   rQ   éø   r8   rB   r7   r"   éý   éþ   r9   u¾   	
 !"#$%&'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\]^_`abcdefghijklmnopqrstuvwxyz{|}~ÃÃ¼Ã©Ã¢Ã¤Ã Ã¥Ã§ÃªÃ«Ã¨Ã¯Ã®Ã¬ÃÃÃÃ¦ÃÃ´Ã¶Ã²Ã»Ã¹Ã¿ÃÃÂ¢Â£Â¥â§ÆÃ¡Ã­Ã³ÃºÃ±ÃÂªÂºÂ¿âÂ¬Â½Â¼Â¡Â«Â»âââââ¤â¡â¢âââ£ââââââââ´â¬âââ¼âââââ©â¦â ââ¬â§â¨â¤â¥âââââ«âªâââââââÎ±ÃÎÏÎ£ÏÂµÏÎ¦ÎÎ©Î´âÏÎµâ©â¡Â±â¥â¤â â¡Ã·âÂ°âÂ·ââ¿Â²â Â é   é   é   é   é   é   é   é   é	   é
   é   é   é   é   é   é   é   é   é   é   é   é   é   é   é   é   é   é   é   é   é   é    é!   é"   é#   é$   é%   é&   é'   é(   é)   é*   é+   é,   é-   é.   é/   é0   é1   é2   é3   é4   é5   é6   é7   é8   é9   é:   é;   é<   é=   é>   é?   é@   éA   éB   éC   éD   éE   éF   éG   éH   éI   éJ   éK   éL   éM   éN   éO   éP   éQ   éR   éS   éT   éU   éV   éW   éX   éY   éZ   é[   é\   é]   é^   é_   é`   éa   éb   éc   éd   ée   éf   ég   éh   éi   éj   ék   él   ém   én   éo   ép   éq   ér   és   ét   éu   év   éw   éx   éy   éz   é{   é|   é}   é~   é   r{   rq   rr   rs   rw   r|   r   r   rx   r}   ry   rd   re   rh   rV   rf   ro   rp   r[   rY   rZ   r\   rg   r]   r`   rX   r^   r_   rc   rb   ra   rv   rk   ri   rj   rm   rl   rW   rn   ru   r   rt   r   rz   r   r~   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r    (   r   r¡   r¢   r£   r¤   r¥   r¦   r§   r¨   r©   rª   r«   r¬   r­   r®   r¯   r°   r±   r²   r³   r´   rµ   r¶   r·   r¸   r¹   rº   r»   r¼   r½   r¾   r¿   rÀ   rÁ   rÂ   rÃ   rÄ   rÅ   rÆ   rÇ   rÈ   rÉ   rÊ   rË   rÌ   rÍ   rÎ   rÏ   rÐ   rÑ   rÒ   rÓ   rÔ   rÕ   rÖ   r×   rØ   rÙ   rÚ   rÛ   rÜ   rÝ   rÞ   rß   rà   rá   râ   rã   rä   rå   ræ   rç   rè   ré   rê   rë   rì   rí   rî   rï   rð   rñ   rò   ró   rô   rõ   rö   r÷   rø   rù   rú   rû   rü   rý   rþ   rÿ   r   r  r  r  r  r  r  r  r  r	  r
  r  r  r  r  r  r  r  r  r  r  r  r  r  r  r  r  r  r  r  r  r  rU   rK   r<   r=   r>   rE   rL   rH   rR   rP   rT   rO   rS   rF   rM   rJ   rI   rG   r/   r0   r3   r!   r1   rD   r:   r;   rN   r&   r?   r$   r%   r'   r2   r(   r+   r#   r)   r*   r.   r@   r-   r,   rC   r6   rA   r4   r5   rQ   r8   rB   r7   r"   r9   i  i  i  i£  i¦  i©  i±  i´  iµ  iÀ  iÃ  iÄ  iÆ  i   i§   i"  i"  i"  i)"  iH"  ia"  id"  ie"  i#  i #  i!#  i %  i%  i%  i%  i%  i%  i%  i$%  i,%  i4%  i<%  iP%  iQ%  iR%  iS%  iT%  iU%  iV%  iW%  iX%  iY%  iZ%  i[%  i\%  i]%  i^%  i_%  i`%  ia%  ib%  ic%  id%  ie%  if%  ig%  ih%  ii%  ij%  ik%  il%  i%  i%  i%  i%  i%  i%  i%  i%  i %  )Ú__doc__r   r   r   r   r   r   r   Úmake_identity_dictÚrangeÚdecoding_mapÚupdater   r   r
   r
   r
   r   Ú<module>   s  
  ã               @   s   d Z ddlZG dd dejZG dd dejZG dd dejZG d	d
 d
eejZG dd deejZdd ZdZe 	e¡Z
dS )zs Python Character Mapping Codec cp500 generated from 'MAPPINGS/VENDORS/MICSFT/EBCDIC/CP500.TXT' with gencodec.py.

é    Nc               @   s    e Zd ZdddZdddZdS )	ÚCodecÚstrictc             C   s   t  ||t¡S )N)ÚcodecsÚcharmap_encodeÚencoding_table)ÚselfÚinputÚerrors© r
   ú D:\Python\lib\encodings\cp500.pyÚencode   s    zCodec.encodec             C   s   t  ||t¡S )N)r   Úcharmap_decodeÚdecoding_table)r   r   r	   r
   r
   r   Údecode   s    zCodec.decodeN)r   )r   )Ú__name__Ú
__module__Ú__qualname__r   r   r
   r
   r
   r   r   	   s   
r   c               @   s   e Zd ZdddZdS )ÚIncrementalEncoderFc             C   s   t  || jt¡d S )Nr   )r   r   r	   r   )r   r   Úfinalr
   r
   r   r      s    zIncrementalEncoder.encodeN)F)r   r   r   r   r
   r
   r
   r   r      s   r   c               @   s   e Zd ZdddZdS )ÚIncrementalDecoderFc             C   s   t  || jt¡d S )Nr   )r   r   r	   r   )r   r   r   r
   r
   r   r      s    zIncrementalDecoder.decodeN)F)r   r   r   r   r
   r
   r
   r   r      s   r   c               @   s   e Zd ZdS )ÚStreamWriterN)r   r   r   r
   r
   r
   r   r      s   r   c               @   s   e Zd ZdS )ÚStreamReaderN)r   r   r   r
   r
   r
   r   r      s   r   c            	   C   s    t jdt jt jttttdS )NÚcp500)Únamer   r   ÚincrementalencoderÚincrementaldecoderÚstreamreaderÚstreamwriter)	r   Ú	CodecInfor   r   r   r   r   r   r   r
   r
   r
   r   Úgetregentry!   s    r   u   Â	ÂÂÂÂÂÂÂÂÂÂÂÂÂÂ
ÂÂÂÂÂÂÂÂÂÂÂÂÂÂÂÂ Â Ã¢Ã¤Ã Ã¡Ã£Ã¥Ã§Ã±[.<(+!&Ã©ÃªÃ«Ã¨Ã­Ã®Ã¯Ã¬Ã]$*);^-/ÃÃÃÃÃÃÃÃÂ¦,%_>?Ã¸ÃÃÃÃÃÃÃÃ`:#@'="ÃabcdefghiÂ«Â»Ã°Ã½Ã¾Â±Â°jklmnopqrÂªÂºÃ¦Â¸ÃÂ¤Âµ~stuvwxyzÂ¡Â¿ÃÃÃÂ®Â¢Â£Â¥Â·Â©Â§Â¶Â¼Â½Â¾Â¬|Â¯Â¨Â´Ã{ABCDEFGHIÂ­Ã´Ã¶Ã²Ã³Ãµ}JKLMNOPQRÂ¹Ã»Ã¼Ã¹ÃºÃ¿\Ã·STUVWXYZÂ²ÃÃÃÃÃ0123456789Â³ÃÃÃÃÂ)Ú__doc__r   r   r   r   r   r   r   r   Úcharmap_buildr   r
   r
   r
   r   Ú<module>   s     ã               @   s    d Z ddlZddlZeeds&ede ejd¡Ze ejd¡Z	dddZ
G d	d
 d
ejZG dd dejZG dd dejZG dd dejZdd ZdS )z+
Code page 65001: Windows UTF-8 (CP_UTF8).
é    NÚcode_page_encodez-cp65001 encoding is only available on Windowsiéý  Ústrictc             C   s   t  d| |d¡S )Niéý  T)ÚcodecsÚcode_page_decode)ÚinputÚerrors© r   ú"D:\Python\lib\encodings\cp65001.pyÚdecode   s    r
   c               @   s   e Zd ZdddZdS )ÚIncrementalEncoderFc             C   s   t || jd S )Nr   )Úencoder   )Úselfr   Úfinalr   r   r	   r      s    zIncrementalEncoder.encodeN)F)Ú__name__Ú
__module__Ú__qualname__r   r   r   r   r	   r      s   r   c               @   s   e Zd ZeZdS )ÚIncrementalDecoderN)r   r   r   Ú_decodeÚ_buffer_decoder   r   r   r	   r      s   r   c               @   s   e Zd ZeZdS )ÚStreamWriterN)r   r   r   r   r   r   r   r	   r      s   r   c               @   s   e Zd ZeZdS )ÚStreamReaderN)r   r   r   r   r
   r   r   r   r	   r      s   r   c            	   C   s   t jdttttttdS )NÚcp65001)Únamer   r
   ÚincrementalencoderÚincrementaldecoderÚstreamreaderÚstreamwriter)r   Ú	CodecInfor   r
   r   r   r   r   r   r   r   r	   Úgetregentry"   s    r   )r   )Ú__doc__r   Ú	functoolsÚhasattrÚLookupErrorÚpartialr   r   r   r   r
   r   ÚBufferedIncrementalDecoderr   r   r   r   r   r   r   r	   Ú<module>   s   

ã               @   s   d Z ddlZG dd dejZG dd dejZG dd dejZG d	d
 d
eejZG dd deejZdd ZdZe 	e¡Z
dS )zPython Character Mapping Codec cp720 generated on Windows:
Vista 6.0.6002 SP2 Multiprocessor Free with the command:
  python Tools/unicode/genwincodec.py 720
é    Nc               @   s    e Zd ZdddZdddZdS )	ÚCodecÚstrictc             C   s   t  ||t¡S )N)ÚcodecsÚcharmap_encodeÚencoding_table)ÚselfÚinputÚerrors© r
   ú D:\Python\lib\encodings\cp720.pyÚencode   s    zCodec.encodec             C   s   t  ||t¡S )N)r   Úcharmap_decodeÚdecoding_table)r   r   r	   r
   r
   r   Údecode   s    zCodec.decodeN)r   )r   )Ú__name__Ú
__module__Ú__qualname__r   r   r
   r
   r
   r   r      s   
r   c               @   s   e Zd ZdddZdS )ÚIncrementalEncoderFc             C   s   t  || jt¡d S )Nr   )r   r   r	   r   )r   r   Úfinalr
   r
   r   r      s    zIncrementalEncoder.encodeN)F)r   r   r   r   r
   r
   r
   r   r      s   r   c               @   s   e Zd ZdddZdS )ÚIncrementalDecoderFc             C   s   t  || jt¡d S )Nr   )r   r   r	   r   )r   r   r   r
   r
   r   r      s    zIncrementalDecoder.decodeN)F)r   r   r   r   r
   r
   r
   r   r      s   r   c               @   s   e Zd ZdS )ÚStreamWriterN)r   r   r   r
   r
   r
   r   r      s   r   c               @   s   e Zd ZdS )ÚStreamReaderN)r   r   r   r
   r
   r
   r   r      s   r   c            	   C   s    t jdt jt jttttdS )NZcp720)Únamer   r   ÚincrementalencoderÚincrementaldecoderÚstreamreaderÚstreamwriter)	r   Ú	CodecInfor   r   r   r   r   r   r   r
   r
   r
   r   Úgetregentry#   s    r   u¶   	
 !"#$%&'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\]^_`abcdefghijklmnopqrstuvwxyz{|}~ÂÂÃ©Ã¢ÂÃ ÂÃ§ÃªÃ«Ã¨Ã¯Ã®ÂÂÂÂÙÙÃ´Â¤ÙÃ»Ã¹Ø¡Ø¢Ø£Ø¤Â£Ø¥Ø¦Ø§Ø¨Ø©ØªØ«Ø¬Ø­Ø®Ø¯Ø°Ø±Ø²Ø³Ø´ØµÂ«Â»âââââ¤â¡â¢âââ£ââââââââ´â¬âââ¼âââââ©â¦â ââ¬â§â¨â¤â¥âââââ«âªâââââââØ¶Ø·Ø¸Ø¹ØºÙÂµÙÙÙÙÙÙÙÙÙâ¡ÙÙÙÙÙÙâÂ°âÂ·ââ¿Â²â Â )Ú__doc__r   r   r   r   r   r   r   r   Úcharmap_buildr   r
   r
   r
   r   Ú<module>   s     ã              @   s´  d Z ddlZG dd dejZG dd dejZG dd dejZG d	d
 d
eejZG dd deejZdd Ze e	d¡Z
e
 ddddddddddddddddd d!d"d#d$d%d&d'd(d)d*d+d,d-d.d/d0d1d2d3d4d5d6d7d8d9d:d;d<d=d>d?d@dAdBdCdDdEdFdGdHdIdJdKdLdMdNdOdPdQdRdSdTdUdVdWdXdYdZd[d\d]d^d_d`dadbdcdddedfdgdhdidjdkdldmdndodpdqdrdsdtdudvdwdxdydzd{d|d}d~dddddddddddddddddd¡ dZdddddddddddddddd d¡d¢d£d¤d¥d¦d§d¨d©dªd«d¬d­d®d¯d°d±d²d³d´dµd¶d·d¸d¹dºd»d¼d½d¾d¿dÀdÁdÂdÃdÄdÅdÆdÇdÈdÉdÊdËdÌdÍdÎdÏdÐdÑdÒdÓdÔdÕdÖd×dØdÙdÚdÛdÜdÝdÞdßdàdádâdãdädådædçdèdédêdëdìdídîdïdðdñdòdódôdõdöd÷dødùdúdûdüdýdþdÿd ddddddddd	d
dddddddddddddddddddddd d!d"d#d$d%d&d'd(d)d*d+d,d-d.d/d0d1d2d3d4d5d6d7d8d9d:d;d<d=d>d?d@dAdBdCddDdEdFdGdHdIdJdKdLdMdNdOdPdQdRdSdTdUdVdWdXdYdZd[dd\d]d^d_d`dadbdcdddedfdgdhdidjdkdldmdnddodpdqdrdsdtdudvdwdxdydzd{d|d}d~dddddddddddddddd ZdS (  zf Python Character Mapping Codec cp737 generated from 'VENDORS/MICSFT/PC/CP737.TXT' with gencodec.py.

é    Nc               @   s    e Zd ZdddZdddZdS )	ÚCodecÚstrictc             C   s   t  ||t¡S )N)ÚcodecsÚcharmap_encodeÚencoding_map)ÚselfÚinputÚerrors© r
   ú D:\Python\lib\encodings\cp737.pyÚencode   s    zCodec.encodec             C   s   t  ||t¡S )N)r   Úcharmap_decodeÚdecoding_table)r   r   r	   r
   r
   r   Údecode   s    zCodec.decodeN)r   )r   )Ú__name__Ú
__module__Ú__qualname__r   r   r
   r
   r
   r   r   	   s   
r   c               @   s   e Zd ZdddZdS )ÚIncrementalEncoderFc             C   s   t  || jt¡d S )Nr   )r   r   r	   r   )r   r   Úfinalr
   r
   r   r      s    zIncrementalEncoder.encodeN)F)r   r   r   r   r
   r
   r
   r   r      s   r   c               @   s   e Zd ZdddZdS )ÚIncrementalDecoderFc             C   s   t  || jt¡d S )Nr   )r   r   r	   r   )r   r   r   r
   r
   r   r      s    zIncrementalDecoder.decodeN)F)r   r   r   r   r
   r
   r
   r   r      s   r   c               @   s   e Zd ZdS )ÚStreamWriterN)r   r   r   r
   r
   r
   r   r      s   r   c               @   s   e Zd ZdS )ÚStreamReaderN)r   r   r   r
   r
   r
   r   r      s   r   c            	   C   s    t jdt jt jttttdS )NZcp737)Únamer   r   ÚincrementalencoderÚincrementaldecoderÚstreamreaderÚstreamwriter)	r   Ú	CodecInfor   r   r   r   r   r   r   r
   r
   r
   r   Úgetregentry!   s    r   é   i  i  i  i  i  i  i  i  i  i  i  i  i  i  i  i   i¡  i£  i¤  i¥  i¦  i§  i¨  i©  i±  i²  i³  i´  iµ  i¶  i·  i¸  i¹  iº  i»  i¼  i½  i¾  i¿  iÀ  iÁ  iÃ  iÂ  iÄ  iÅ  iÆ  iÇ  iÈ  i%  i%  i%  i%  i$%  ia%  ib%  iV%  iU%  ic%  iQ%  iW%  i]%  i\%  i[%  i%  i%  i4%  i,%  i%  i %  i<%  i^%  i_%  iZ%  iT%  ii%  if%  i`%  iP%  il%  ig%  ih%  id%  ie%  iY%  iX%  iR%  iS%  ik%  ij%  i%  i%  i%  i%  i%  i%  i%  iÉ  i¬  i­  i®  iÊ  i¯  iÌ  iÍ  iË  iÎ  i  i  i  i  i  i  i  é±   ie"  id"  iª  i«  é÷   iH"  é°   i"  é·   i"  i   é²   i %  é    )é   é   é   é   é   é   é   é   é   é   é   é   é   é   é   é   é   é   é   é   é   é   é   é   é   é   é   é   é   é   é   é   r%   é¡   é¢   é£   é¤   é¥   é¦   é§   é¨   é©   éª   é«   é¬   é­   é®   é¯   r"   r    r$   é³   é´   éµ   é¶   r#   é¸   é¹   éº   é»   é¼   é½   é¾   é¿   éÀ   éÁ   éÂ   éÃ   éÄ   éÅ   éÆ   éÇ   éÈ   éÉ   éÊ   éË   éÌ   éÍ   éÎ   éÏ   éÐ   éÑ   éÒ   éÓ   éÔ   éÕ   éÖ   é×   éØ   éÙ   éÚ   éÛ   éÜ   éÝ   éÞ   éß   éà   éá   éâ   éã   éä   éå   éæ   éç   éè   éé   éê   éë   éì   éí   éî   éï   éð   éñ   éò   éó   éô   éõ   éö   r!   éø   éù   éú   éû   éü   éý   éþ   éÿ   u·   	
 !"#$%&'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\]^_`abcdefghijklmnopqrstuvwxyz{|}~ÎÎÎÎÎÎÎÎÎÎÎÎÎÎÎÎ Î¡Î£Î¤Î¥Î¦Î§Î¨Î©Î±Î²Î³Î´ÎµÎ¶Î·Î¸Î¹ÎºÎ»Î¼Î½Î¾Î¿ÏÏÏÏÏÏÏÏÏâââââ¤â¡â¢âââ£ââââââââ´â¬âââ¼âââââ©â¦â ââ¬â§â¨â¤â¥âââââ«âªâââââââÏÎ¬Î­Î®ÏÎ¯ÏÏÏÏÎÎÎÎÎÎÎÂ±â¥â¤ÎªÎ«Ã·âÂ°âÂ·ââ¿Â²â Â é   é   é   é   é   é   é   é   é	   é
   é   é   é   é   é   é   é   é   é   é   é   é   é   é   é   é   é   é   é   é   é   é    é!   é"   é#   é$   é%   é&   é'   é(   é)   é*   é+   é,   é-   é.   é/   é0   é1   é2   é3   é4   é5   é6   é7   é8   é9   é:   é;   é<   é=   é>   é?   é@   éA   éB   éC   éD   éE   éF   éG   éH   éI   éJ   éK   éL   éM   éN   éO   éP   éQ   éR   éS   éT   éU   éV   éW   éX   éY   éZ   é[   é\   é]   é^   é_   é`   éa   éb   éc   éd   ée   éf   ég   éh   éi   éj   ék   él   ém   én   éo   ép   éq   ér   és   ét   éu   év   éw   éx   éy   éz   é{   é|   é}   é~   é   r   r   r   r   r   r   r   r   r   r   r   r   r   r&   r'   r(   r)   r*   r+   r,   r-   r.   r/   r0   r1   r2   r3   r4   r5   r6   r7   r8   r9   r:   r;   r<   r=   r   r   r   r   r   r   r>   r?   r@   rA   rB   rC   rD   rE   rF   rG   rH   rI   rJ   rK   rL   rM   rO   rN   rP   rQ   rR   rS   rT   r   r   r   r   r   r   r   r   r   r   r   re   rU   r{   r`   ra   rz   rd   rV   rc   rb   rf   rn   r[   rv   rw   rj   rY   r\   ru   rt   ri   r_   r^   r]   rg   rh   rm   rW   rX   rZ   rr   rs   rl   rp   rq   rk   ry   rx   ro   r   r}   r|   r~   r   r   (   r   r    r¡   r¢   r£   r¤   r¥   r¦   r§   r¨   r©   rª   r«   r¬   r­   r®   r¯   r°   r±   r²   r³   r´   rµ   r¶   r·   r¸   r¹   rº   r»   r¼   r½   r¾   r¿   rÀ   rÁ   rÂ   rÃ   rÄ   rÅ   rÆ   rÇ   rÈ   rÉ   rÊ   rË   rÌ   rÍ   rÎ   rÏ   rÐ   rÑ   rÒ   rÓ   rÔ   rÕ   rÖ   r×   rØ   rÙ   rÚ   rÛ   rÜ   rÝ   rÞ   rß   rà   rá   râ   rã   rä   rå   ræ   rç   rè   ré   rê   rë   rì   rí   rî   rï   rð   rñ   rò   ró   rô   rõ   rö   r÷   rø   rù   rú   rû   rü   rý   rþ   rÿ   r   r  r  r  r  r  r  r  r  r	  r
  r  r  r  r  r  r  r  r  r  r  r  r  r  r  r  r  r  r  r  r  r%   r"   r    r$   r#   r!   i  i  i  i  i  i  i  i  i  i  i  i  i  i  i  i  i  i  i  i  i  i  i   i¡  i£  i¤  i¥  i¦  i§  i¨  i©  iª  i«  i¬  i­  i®  i¯  i±  i²  i³  i´  iµ  i¶  i·  i¸  i¹  iº  i»  i¼  i½  i¾  i¿  iÀ  iÁ  iÂ  iÃ  iÄ  iÅ  iÆ  iÇ  iÈ  iÉ  iÊ  iË  iÌ  iÍ  iÎ  i   i"  i"  iH"  id"  ie"  i %  i%  i%  i%  i%  i%  i%  i$%  i,%  i4%  i<%  iP%  iQ%  iR%  iS%  iT%  iU%  iV%  iW%  iX%  iY%  iZ%  i[%  i\%  i]%  i^%  i_%  i`%  ia%  ib%  ic%  id%  ie%  if%  ig%  ih%  ii%  ij%  ik%  il%  i%  i%  i%  i%  i%  i%  i%  i%  i %  )Ú__doc__r   r   r   r   r   r   r   Úmake_identity_dictÚrangeÚdecoding_mapÚupdater   r   r
   r
   r
   r   Ú<module>   s  
  ã              @   sf  d Z ddlZG dd dejZG dd dejZG dd dejZG d	d
 d
eejZG dd deejZdd Ze e	d¡Z
e
 ddddddddddddddddd d!d"d#d$d%d&d'd(d)d*d+d,d-d.d/dd0d1d2d3d4d5d6d7d8d9d:d;d<d=d>d?d@dAdBdCdDdEdFdGdHdIdJdKdLdMdNdOdPdQdRdSdTdUdVdWdXdYdZd[d\d]d^d_d`dadbdcdddedfdgdhdidjdkdldmdndodpdqdrdsdtdudvdwdxdydzd{d|d}d~ddddddddddddddddd¡ dZddddddddddddddddd d¡d¢d£d¤d¥d¦d§d¨d©dªd«d¬d­d®d¯d°d±d²d³d´dµd¶d·d¸d¹dºd»d¼d½d¾d¿dÀdÁdÂdÃdÄdÅdÆdÇdÈdÉdÊdËdÌdÍdÎdÏdÐdÑdÒdÓdÔdÕdÖd×dØdÙdÚdÛdÜdÝdÞdßdàdádâdãdädådædçdèdédêdëdìdídîdïdðdñdòdódôdõdöd÷dødùdúdûdüdýdþdÿd ddddddddd	d
dddddddddddsdd8ddd7d+dddd!ddddd9d=d1dddd d!dd"d#d$d%d&d'd(d)d*d&dd+d$d,d-dd.dud/d0d1dd2d3d4d5dodd6d7d8d9d:d:d;d<dd=d>dd?d@dAdBdCdDdEdFdGdHdIddtdJd.d"d)dKdLd,d/dMd-dNdOd6ddPdddQdRdSdTdUdVdWdXddYdZd d>d[d;d\dd]d^d_dpd*d`dadbddddcdd ZdS (e  zf Python Character Mapping Codec cp775 generated from 'VENDORS/MICSFT/PC/CP775.TXT' with gencodec.py.

é    Nc               @   s    e Zd ZdddZdddZdS )	ÚCodecÚstrictc             C   s   t  ||t¡S )N)ÚcodecsÚcharmap_encodeÚencoding_map)ÚselfÚinputÚerrors© r
   ú D:\Python\lib\encodings\cp775.pyÚencode   s    zCodec.encodec             C   s   t  ||t¡S )N)r   Úcharmap_decodeÚdecoding_table)r   r   r	   r
   r
   r   Údecode   s    zCodec.decodeN)r   )r   )Ú__name__Ú
__module__Ú__qualname__r   r   r
   r
   r
   r   r   	   s   
r   c               @   s   e Zd ZdddZdS )ÚIncrementalEncoderFc             C   s   t  || jt¡d S )Nr   )r   r   r	   r   )r   r   Úfinalr
   r
   r   r      s    zIncrementalEncoder.encodeN)F)r   r   r   r   r
   r
   r
   r   r      s   r   c               @   s   e Zd ZdddZdS )ÚIncrementalDecoderFc             C   s   t  || jt¡d S )Nr   )r   r   r	   r   )r   r   r   r
   r
   r   r      s    zIncrementalDecoder.decodeN)F)r   r   r   r   r
   r
   r
   r   r      s   r   c               @   s   e Zd ZdS )ÚStreamWriterN)r   r   r   r
   r
   r
   r   r      s   r   c               @   s   e Zd ZdS )ÚStreamReaderN)r   r   r   r
   r
   r
   r   r      s   r   c            	   C   s    t jdt jt jttttdS )NÚcp775)Únamer   r   ÚincrementalencoderÚincrementaldecoderÚstreamreaderÚstreamwriter)	r   Ú	CodecInfor   r   r   r   r   r   r   r
   r
   r
   r   Úgetregentry!   s    r   é   i  éü   éé   i  éä   i#  éå   i  iB  i  iV  iW  i+  iy  éÄ   éÅ   éÉ   éæ   éÆ   iM  éö   i"  é¢   iZ  i[  éÖ   éÜ   éø   é£   éØ   é×   é¤   i*  éó   i{  i|  iz  i   é¦   é©   é®   é¬   é½   é¼   iA  é«   é»   i%  i%  i%  i%  i$%  i  i  i  i  ic%  iQ%  iW%  i]%  i.  i`  i%  i%  i4%  i,%  i%  i %  i<%  ir  ij  iZ%  iT%  ii%  if%  i`%  iP%  il%  i}  i  i  i  i  i/  ia  is  ik  i~  i%  i%  i%  i%  i%  i%  i%  éÓ   éß   iL  iC  éõ   éÕ   éµ   iD  i6  i7  i;  i<  iF  i  iE  i   é­   é±   i   é¾   é¶   é§   é÷   i   é°   i"  é·   é¹   é³   é²   i %  é    )é   é   é   é   é   é   é   é   é   é   é   é   é   é   é   é   é   é   é   é   é   é   é   é   é   é   é   é   é   é   é   é   rL   é¡   r+   r/   r2   é¥   r4   rE   é¨   r5   éª   r:   r7   rA   r6   é¯   rG   rB   rK   rJ   é´   r@   rD   rH   é¸   rI   éº   r;   r9   r8   rC   é¿   éÀ   éÁ   éÂ   éÃ   r%   r&   r)   éÇ   éÈ   r'   éÊ   éË   éÌ   éÍ   éÎ   éÏ   éÐ   éÑ   éÒ   r<   éÔ   r?   r,   r1   r0   éÙ   éÚ   éÛ   r-   éÝ   éÞ   r=   éà   éá   éâ   éã   r#   r$   r(   éç   éè   r"   éê   éë   éì   éí   éî   éï   éð   éñ   éò   r3   éô   r>   r*   rF   r.   éù   éú   éû   r!   éý   éþ   éÿ   u¤   	
 !"#$%&'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\]^_`abcdefghijklmnopqrstuvwxyz{|}~ÄÃ¼Ã©ÄÃ¤Ä£Ã¥ÄÅÄÅÅÄ«Å¹ÃÃÃÃ¦ÃÅÃ¶Ä¢Â¢ÅÅÃÃÃ¸Â£ÃÃÂ¤ÄÄªÃ³Å»Å¼ÅºâÂ¦Â©Â®Â¬Â½Â¼ÅÂ«Â»âââââ¤ÄÄÄÄâ£âââÄ®Å âââ´â¬âââ¼Å²Åªâââ©â¦â ââ¬Å½ÄÄÄÄÄ¯Å¡Å³Å«Å¾âââââââÃÃÅÅÃµÃÂµÅÄ¶Ä·Ä»Ä¼ÅÄÅâÂ­Â±âÂ¾Â¶Â§Ã·âÂ°âÂ·Â¹Â³Â²â Â é   é   é   é   é   é   é   é   é	   é
   é   é   é   é   é   é   é   é   é   é   é   é   é   é   é   é   é   é   é   é   é   é    é!   é"   é#   é$   é%   é&   é'   é(   é)   é*   é+   é,   é-   é.   é/   é0   é1   é2   é3   é4   é5   é6   é7   é8   é9   é:   é;   é<   é=   é>   é?   é@   éA   éB   éC   éD   éE   éF   éG   éH   éI   éJ   éK   éL   éM   éN   éO   éP   éQ   éR   éS   éT   éU   éV   éW   éX   éY   éZ   é[   é\   é]   é^   é_   é`   éa   éb   éc   éd   ée   éf   ég   éh   éi   éj   ék   él   ém   én   éo   ép   éq   ér   és   ét   éu   év   éw   éx   éy   éz   é{   é|   é}   é~   é   r    rc   ri   rl   ro   rp   r   r   r   r   r   r   rq   r[   r\   r_   r]   r   rf   rk   rj   rg   r   rQ   rS   r^   rO   ra   rh   rN   rP   r   rM   rT   r   r   rV   rs   r   rb   rR   rm   rY   r   r   r   r   rU   r   r   r   r   r   r`   rW   rX   rd   re   rz   rZ   rn   r   r   r   r   r   ru   rv   r   ry   rr   rx   rw   r   rt   r{   r~   r}   r|   r   r   r   r   r   (   r   r¡   r¢   r£   r¤   r¥   r¦   r§   r¨   r©   rª   r«   r¬   r­   r®   r¯   r°   r±   r²   r³   r´   rµ   r¶   r·   r¸   r¹   rº   r»   r¼   r½   r¾   r¿   rÀ   rÁ   rÂ   rÃ   rÄ   rÅ   rÆ   rÇ   rÈ   rÉ   rÊ   rË   rÌ   rÍ   rÎ   rÏ   rÐ   rÑ   rÒ   rÓ   rÔ   rÕ   rÖ   r×   rØ   rÙ   rÚ   rÛ   rÜ   rÝ   rÞ   rß   rà   rá   râ   rã   rä   rå   ræ   rç   rè   ré   rê   rë   rì   rí   rî   rï   rð   rñ   rò   ró   rô   rõ   rö   r÷   rø   rù   rú   rû   rü   rý   rþ   rÿ   r   r  r  r  r  r  r  r  r  r	  r
  r  r  r  r  r  r  r  r  r  r  r  r  r  r  r  r  r  r  r  r  r  rL   r+   r/   r2   r4   rE   r5   r:   r7   rA   r6   rG   rB   rK   rJ   r@   rD   rH   rI   r;   r9   r8   rC   r%   r&   r)   r'   r<   r?   r,   r1   r0   r-   r=   r#   r$   r(   r"   r3   r>   r*   rF   r.   r!   r    i  i  i  i  i  i  i  i  i  i  i  i  i  i"  i#  i*  i+  i.  i/  i6  i7  i;  i<  iA  iB  iC  iD  iE  iF  iL  iM  iV  iW  iZ  i[  i`  ia  ij  ik  ir  is  iy  iz  i{  i|  i}  i~  i   i   i   i   i"  i %  i%  i%  i%  i%  i%  i%  i$%  i,%  i4%  i<%  iP%  iQ%  iT%  iW%  iZ%  i]%  i`%  ic%  if%  ii%  il%  i%  i%  i%  i%  i%  i%  i%  i%  i %  )Ú__doc__r   r   r   r   r   r   r   Úmake_identity_dictÚrangeÚdecoding_mapÚupdater   r   r
   r
   r
   r   Ú<module>   s  
  ã              @   s   d Z ddlZG dd dejZG dd dejZG dd dejZG d	d
 d
eejZG dd deejZdd Ze e	d¡Z
e
 ddddddddddddddddd d!d"d#d$d%d&d'd(d)d*d+d,d-d.d/d0d1d2d3d4d5d6d7d8d9d:d;d<d=d>d?d@dAdBdCdDdEdFdGdHdIdJdKdLdMdNdOdPdQdRdSdTdUdVdWdXdYdZd[d\d]d^d_d`dadbdcdddedfdgdhdidjdkdldmdndodpdqdrdsdtdudvdwdxdydzd{d|d}d~dddddddddddddddddd¡ dZdddddddddddddddd d¡d¢d£d¤d¥d¦d§d¨d©dªd«d¬d­d®d¯d°d±d²d³d´dµd¶d·d¸d¹dºd»d¼d½d¾d¿dÀdÁdÂdÃdÄdÅdÆdÇdÈdÉdÊdËdÌdÍdÎdÏdÐdÑdÒdÓdÔdÕdÖd×dØdÙdÚdÛdÜdÝdÞdßdàdádâdãdädådædçdèdédêdëdìdídîdïdðdñdòdódôdõdöd÷dødùdúdûdüdýdþdÿd ddddddddd	d
ddddddd(dd;ddhdd}dtd'ddmd9d6d`dHdd+d4d|ddd!d#d3dd&dd~d:d>d2dddvdddddddrddsdpdxd)d.d-d5dNdVddddddddddd1dd0dddd"dddd d!d"d#d$d%d=d&d'dad_d(dMd)dd*d$d+d,d,d-d.ddd/dud0d%dddyd8dGd{dWddFdEddfd7d d?ddd<dnddcdbdgdqd*dzddddwd1 ZdS (2  z` Python Character Mapping Codec generated from 'VENDORS/MICSFT/PC/CP850.TXT' with gencodec.py.

é    Nc               @   s    e Zd ZdddZdddZdS )	ÚCodecÚstrictc             C   s   t  ||t¡S )N)ÚcodecsÚcharmap_encodeÚencoding_map)ÚselfÚinputÚerrors© r
   ú D:\Python\lib\encodings\cp850.pyÚencode   s    zCodec.encodec             C   s   t  ||t¡S )N)r   Úcharmap_decodeÚdecoding_table)r   r   r	   r
   r
   r   Údecode   s    zCodec.decodeN)r   )r   )Ú__name__Ú
__module__Ú__qualname__r   r   r
   r
   r
   r   r   	   s   
r   c               @   s   e Zd ZdddZdS )ÚIncrementalEncoderFc             C   s   t  || jt¡d S )Nr   )r   r   r	   r   )r   r   Úfinalr
   r
   r   r      s    zIncrementalEncoder.encodeN)F)r   r   r   r   r
   r
   r
   r   r      s   r   c               @   s   e Zd ZdddZdS )ÚIncrementalDecoderFc             C   s   t  || jt¡d S )Nr   )r   r   r	   r   )r   r   r   r
   r
   r   r      s    zIncrementalDecoder.decodeN)F)r   r   r   r   r
   r
   r
   r   r      s   r   c               @   s   e Zd ZdS )ÚStreamWriterN)r   r   r   r
   r
   r
   r   r      s   r   c               @   s   e Zd ZdS )ÚStreamReaderN)r   r   r   r
   r
   r
   r   r      s   r   c            	   C   s    t jdt jt jttttdS )NÚcp850)Únamer   r   ÚincrementalencoderÚincrementaldecoderÚstreamreaderÚstreamwriter)	r   Ú	CodecInfor   r   r   r   r   r   r   r
   r
   r
   r   Úgetregentry!   s    r   é   éÇ   éü   éé   éâ   éä   éà   éå   éç   éê   éë   éè   éï   éî   éì   éÄ   éÅ   éÉ   éæ   éÆ   éô   éö   éò   éû   éù   éÿ   éÖ   éÜ   éø   é£   éØ   é×   i  éá   éí   éó   éú   éñ   éÑ   éª   éº   é¿   é®   é¬   é½   é¼   é¡   é«   é»   i%  i%  i%  i%  i$%  éÁ   éÂ   éÀ   é©   ic%  iQ%  iW%  i]%  é¢   é¥   i%  i%  i4%  i,%  i%  i %  i<%  éã   éÃ   iZ%  iT%  ii%  if%  i`%  iP%  il%  é¤   éð   éÐ   éÊ   éË   éÈ   i1  éÍ   éÎ   éÏ   i%  i%  i%  i%  é¦   éÌ   i%  éÓ   éß   éÔ   éÒ   éõ   éÕ   éµ   éþ   éÞ   éÚ   éÛ   éÙ   éý   éÝ   é¯   é´   é­   é±   i   é¾   é¶   é§   é÷   é¸   é°   é¨   é·   é¹   é³   é²   i %  é    )é   é   é   é   é   é   é   é   é   é   é   é   é   é   é   é   é   é   é   é   é   é   é   é   é   é   é   é   é   é   é   é   r   rM   rT   r=   rX   rU   ra   rw   r{   rS   rF   rN   rJ   rs   rI   rq   rz   rt   r   r~   rr   ri   rv   r|   ry   r}   rG   rO   rL   rK   ru   rH   rR   rP   rQ   rW   r/   r0   r3   r!   r]   r1   r[   r\   rb   r^   r_   r`   rZ   rE   rf   rc   re   rh   r:   r?   r>   rn   rl   rm   r;   rp   rk   rd   r&   r@   r$   rV   r%   r'   r2   r(   r+   r#   r)   r*   r.   rA   r-   r,   rY   rD   r6   rB   r4   rg   r5   rx   r<   r8   rC   r7   r"   ro   rj   r9   u   	
 !"#$%&'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\]^_`abcdefghijklmnopqrstuvwxyz{|}~ÃÃ¼Ã©Ã¢Ã¤Ã Ã¥Ã§ÃªÃ«Ã¨Ã¯Ã®Ã¬ÃÃÃÃ¦ÃÃ´Ã¶Ã²Ã»Ã¹Ã¿ÃÃÃ¸Â£ÃÃÆÃ¡Ã­Ã³ÃºÃ±ÃÂªÂºÂ¿Â®Â¬Â½Â¼Â¡Â«Â»âââââ¤ÃÃÃÂ©â£âââÂ¢Â¥âââ´â¬âââ¼Ã£Ãâââ©â¦â ââ¬Â¤Ã°ÃÃÃÃÄ±ÃÃÃââââÂ¦ÃâÃÃÃÃÃµÃÂµÃ¾ÃÃÃÃÃ½ÃÂ¯Â´Â­Â±âÂ¾Â¶Â§Ã·Â¸Â°Â¨Â·Â¹Â³Â²â Â é   é   é   é   é   é   é   é   é	   é
   é   é   é   é   é   é   é   é   é   é   é   é   é   é   é   é   é   é   é   é   é   é    é!   é"   é#   é$   é%   é&   é'   é(   é)   é*   é+   é,   é-   é.   é/   é0   é1   é2   é3   é4   é5   é6   é7   é8   é9   é:   é;   é<   é=   é>   é?   é@   éA   éB   éC   éD   éE   éF   éG   éH   éI   éJ   éK   éL   éM   éN   éO   éP   éQ   éR   éS   éT   éU   éV   éW   éX   éY   éZ   é[   é\   é]   é^   é_   é`   éa   éb   éc   éd   ée   éf   ég   éh   éi   éj   ék   él   ém   én   éo   ép   éq   ér   és   ét   éu   év   éw   éx   éy   éz   é{   é|   é}   é~   é   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r    (   r   r¡   r¢   r£   r¤   r¥   r¦   r§   r¨   r©   rª   r«   r¬   r­   r®   r¯   r°   r±   r²   r³   r´   rµ   r¶   r·   r¸   r¹   rº   r»   r¼   r½   r¾   r¿   rÀ   rÁ   rÂ   rÃ   rÄ   rÅ   rÆ   rÇ   rÈ   rÉ   rÊ   rË   rÌ   rÍ   rÎ   rÏ   rÐ   rÑ   rÒ   rÓ   rÔ   rÕ   rÖ   r×   rØ   rÙ   rÚ   rÛ   rÜ   rÝ   rÞ   rß   rà   rá   râ   rã   rä   rå   ræ   rç   rè   ré   rê   rë   rì   rí   rî   rï   rð   rñ   rò   ró   rô   rõ   rö   r÷   rø   rù   rú   rû   rü   rý   rþ   rÿ   r   r  r  r  r  r  r  r  r  r	  r
  r  r  r  r  r  r  r  r  r  r  r  r  r  r  r  r  r  r  r  r  r  r   rM   rT   r=   rX   rU   ra   rw   r{   rS   rF   rN   rJ   rs   rI   rq   rz   rt   r   r~   rr   ri   rv   r|   ry   r}   rG   rO   rL   rK   ru   rH   rR   rP   rQ   rW   r/   r0   r3   r!   r]   r1   r[   r\   rb   r^   r_   r`   rZ   rE   rf   rc   re   rh   r:   r?   r>   rn   rl   rm   r;   rp   rk   rd   r&   r@   r$   rV   r%   r'   r2   r(   r+   r#   r)   r*   r.   rA   r-   r,   rY   rD   r6   rB   r4   rg   r5   rx   r<   r8   rC   r7   r"   ro   rj   r9   i1  i  i   i %  i%  i%  i%  i%  i%  i%  i$%  i,%  i4%  i<%  iP%  iQ%  iT%  iW%  iZ%  i]%  i`%  ic%  if%  ii%  il%  i%  i%  i%  i%  i%  i%  i %  )Ú__doc__r   r   r   r   r   r   r   Úmake_identity_dictÚrangeÚdecoding_mapÚupdater   r   r
   r
   r
   r   Ú<module>   s  
  ã              @   sl  d Z ddlZG dd dejZG dd dejZG dd dejZG d	d
 d
eejZG dd deejZdd Ze e	d¡Z
e
 ddddddddddddddddd d!d"d#d$d%d&d'd(d)d*d+d,d-d.d/d0d1d2d3d4d5d6d7d8d9d:d;d<d=d>d?d@dAdBdCdDdEdFdGdHdIdJdKdLdMdNdOdPdQdRdSdTdUdVdWdXdYdZd[d\d]d^d_d`dadbdcdddedfdgdhdidjdkdldmdndodpdqdrdsdtdudvdwdxdydzd{d|d}d~dddddddddddddddddd¡ dZdddddddddddddddd d¡d¢d£d¤d¥d¦d§d¨d©dªd«d¬d­d®d¯d°d±d²d³d´dµd¶d·d¸d¹dºd»d¼d½d¾d¿dÀdÁdÂdÃdÄdÅdÆdÇdÈdÉdÊdËdÌdÍdÎdÏdÐdÑdÒdÓdÔdÕdÖd×dØdÙdÚdÛdÜdÝdÞdßdàdádâdãdädådædçdèdédêdëdìdídîdïdðdñdòdódôdõdöd÷dødùdúdûdüdýdþdÿd ddddddddd	d
dddddddddddddddddddddddpd)d.d dd!d"dd#d1d0dd$d%d&d'd(d)d*d+d,d-d$d.d/d0d1dd_d2d3d4d:d5d6drd7d8dd9d:d;d<d=d>d?d@dAdBddCdDdEdFdGdHdd|dIdJdddKdd}ddLdMdNdOddPdQd>dRdSdTdd2d#d3dUdVddWdydXdYdZd[ddFdEd\dfd]d d?d^d_d`dadcdbdgdqd*dcddddedfdg ZdS (h  z` Python Character Mapping Codec generated from 'VENDORS/MICSFT/PC/CP852.TXT' with gencodec.py.

é    Nc               @   s    e Zd ZdddZdddZdS )	ÚCodecÚstrictc             C   s   t  ||t¡S )N)ÚcodecsÚcharmap_encodeÚencoding_map)ÚselfÚinputÚerrors© r
   ú D:\Python\lib\encodings\cp852.pyÚencode   s    zCodec.encodec             C   s   t  ||t¡S )N)r   Úcharmap_decodeÚdecoding_table)r   r   r	   r
   r
   r   Údecode   s    zCodec.decodeN)r   )r   )Ú__name__Ú
__module__Ú__qualname__r   r   r
   r
   r
   r   r   	   s   
r   c               @   s   e Zd ZdddZdS )ÚIncrementalEncoderFc             C   s   t  || jt¡d S )Nr   )r   r   r	   r   )r   r   Úfinalr
   r
   r   r      s    zIncrementalEncoder.encodeN)F)r   r   r   r   r
   r
   r
   r   r      s   r   c               @   s   e Zd ZdddZdS )ÚIncrementalDecoderFc             C   s   t  || jt¡d S )Nr   )r   r   r	   r   )r   r   r   r
   r
   r   r      s    zIncrementalDecoder.decodeN)F)r   r   r   r   r
   r
   r
   r   r      s   r   c               @   s   e Zd ZdS )ÚStreamWriterN)r   r   r   r
   r
   r
   r   r      s   r   c               @   s   e Zd ZdS )ÚStreamReaderN)r   r   r   r
   r
   r
   r   r      s   r   c            	   C   s    t jdt jt jttttdS )NÚcp852)Únamer   r   ÚincrementalencoderÚincrementaldecoderÚstreamreaderÚstreamwriter)	r   Ú	CodecInfor   r   r   r   r   r   r   r
   r
   r
   r   Úgetregentry!   s    r   é   éÇ   éü   éé   éâ   éä   io  i  éç   iB  éë   iP  iQ  éî   iy  éÄ   i  éÉ   i9  i:  éô   éö   i=  i>  iZ  i[  éÖ   éÜ   id  ie  iA  é×   i  éá   éí   éó   éú   i  i  i}  i~  i  i  é¬   iz  i  i_  é«   é»   i%  i%  i%  i%  i$%  éÁ   éÂ   i  i^  ic%  iQ%  iW%  i]%  i{  i|  i%  i%  i4%  i,%  i%  i %  i<%  i  i  iZ%  iT%  ii%  if%  i`%  iP%  il%  é¤   i  i  i  éË   i  iG  éÍ   éÎ   i  i%  i%  i%  i%  ib  in  i%  éÓ   éß   éÔ   iC  iD  iH  i`  ia  iT  éÚ   iU  ip  éý   éÝ   ic  é´   é­   iÝ  iÛ  iÇ  iØ  é§   é÷   é¸   é°   é¨   iÙ  iq  iX  iY  i %  é    )é   é   é   é   é   é   é   é   é   é   é   é   é   é   é   é   é   é   é   é   é   é   é   é   é   é   é   é   é   é   é   é   rJ   é¡   é¢   é£   r9   é¥   é¦   rE   rI   é©   éª   r5   r4   rD   é®   é¯   rH   é±   é²   é³   rC   éµ   é¶   é·   rG   é¹   éº   r6   é¼   é½   é¾   é¿   éÀ   r7   r8   éÃ   r)   éÅ   éÆ   r!   éÈ   r*   éÊ   r:   éÌ   r;   r<   éÏ   éÐ   éÑ   éÒ   r=   r?   éÕ   r-   r/   éØ   éÙ   r@   éÛ   r.   rB   éÞ   r>   éà   r0   r$   éã   r%   éå   éæ   r&   éè   r#   éê   r'   éì   r1   r(   éï   éð   éñ   éò   r2   r+   éõ   r,   rF   éø   éù   r3   éû   r"   rA   éþ   éÿ   u   	
 !"#$%&'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\]^_`abcdefghijklmnopqrstuvwxyz{|}~ÃÃ¼Ã©Ã¢Ã¤Å¯ÄÃ§ÅÃ«ÅÅÃ®Å¹ÃÄÃÄ¹ÄºÃ´Ã¶Ä½Ä¾ÅÅÃÃÅ¤Å¥ÅÃÄÃ¡Ã­Ã³ÃºÄÄÅ½Å¾ÄÄÂ¬ÅºÄÅÂ«Â»âââââ¤ÃÃÄÅâ£âââÅ»Å¼âââ´â¬âââ¼ÄÄâââ©â¦â ââ¬Â¤ÄÄÄÃÄÅÃÃÄââââÅ¢Å®âÃÃÃÅÅÅÅ Å¡ÅÃÅÅ°Ã½ÃÅ£Â´Â­ËËËËÂ§Ã·Â¸Â°Â¨ËÅ±ÅÅâ Â é   é   é   é   é   é   é   é   é	   é
   é   é   é   é   é   é   é   é   é   é   é   é   é   é   é   é   é   é   é   é   é   é    é!   é"   é#   é$   é%   é&   é'   é(   é)   é*   é+   é,   é-   é.   é/   é0   é1   é2   é3   é4   é5   é6   é7   é8   é9   é:   é;   é<   é=   é>   é?   é@   éA   éB   éC   éD   éE   éF   éG   éH   éI   éJ   éK   éL   éM   éN   éO   éP   éQ   éR   éS   éT   éU   éV   éW   éX   éY   éZ   é[   é\   é]   é^   é_   é`   éa   éb   éc   éd   ée   éf   ég   éh   éi   éj   ék   él   ém   én   éo   ép   éq   ér   és   ét   éu   év   éw   éx   éy   éz   é{   é|   é}   é~   é   r    r   r   r   rr   rq   r   r   r   rs   rw   rx   rY   rK   r[   r   rd   ri   re   rN   rO   rR   rM   rT   rk   rW   rl   r^   r_   rm   rL   r   r   rn   rZ   rQ   rj   r   r   r   rp   ry   r   r\   r]   r`   ra   rh   rS   r   r   r   rU   rV   r   r   rb   rc   r   rf   rg   r   rP   r   rX   r}   r~   ro   r   r   rv   r   r   r   r   r   r{   r   r|   r   rz   r   r   rt   ru   r   (   r   r¡   r¢   r£   r¤   r¥   r¦   r§   r¨   r©   rª   r«   r¬   r­   r®   r¯   r°   r±   r²   r³   r´   rµ   r¶   r·   r¸   r¹   rº   r»   r¼   r½   r¾   r¿   rÀ   rÁ   rÂ   rÃ   rÄ   rÅ   rÆ   rÇ   rÈ   rÉ   rÊ   rË   rÌ   rÍ   rÎ   rÏ   rÐ   rÑ   rÒ   rÓ   rÔ   rÕ   rÖ   r×   rØ   rÙ   rÚ   rÛ   rÜ   rÝ   rÞ   rß   rà   rá   râ   rã   rä   rå   ræ   rç   rè   ré   rê   rë   rì   rí   rî   rï   rð   rñ   rò   ró   rô   rõ   rö   r÷   rø   rù   rú   rû   rü   rý   rþ   rÿ   r   r  r  r  r  r  r  r  r  r	  r
  r  r  r  r  r  r  r  r  r  r  r  r  r  r  r  r  r  r  r  r  r  rJ   r9   rE   rI   r5   r4   rD   rH   rC   rG   r6   r7   r8   r)   r!   r*   r:   r;   r<   r=   r?   r-   r/   r@   r.   rB   r>   r0   r$   r%   r&   r#   r'   r1   r(   r2   r+   r,   rF   r3   r"   rA   i  i  i  i  i  i  i  i  i  i  i  i  i  i  i  i  i9  i:  i=  i>  iA  iB  iC  iD  iG  iH  iP  iQ  iT  iU  iX  iY  iZ  i[  i^  i_  i`  ia  ib  ic  id  ie  in  io  ip  iq  iy  iz  i{  i|  i}  i~  iÇ  iØ  iÙ  iÛ  iÝ  i %  i%  i%  i%  i%  i%  i%  i$%  i,%  i4%  i<%  iP%  iQ%  iT%  iW%  iZ%  i]%  i`%  ic%  if%  ii%  il%  i%  i%  i%  i%  i%  i%  i %  )Ú__doc__r   r   r   r   r   r   r   Úmake_identity_dictÚrangeÚdecoding_mapÚupdater   r   r
   r
   r
   r   Ú<module>   s  
  ã              @   s´  d Z ddlZG dd dejZG dd dejZG dd dejZG d	d
 d
eejZG dd deejZdd Ze e	d¡Z
e
 ddddddddddddddddd d!d"d#d$d%d&d'd(d)d*d+d,d-d.d/d0d1d2d3d4d5d6d7d8d9d:d;d<d=d>d?d@dAdBdCdDdEdFdGdHdIdJdKdLdMdNdOdPdQdRdSdTdUdVdWdXdYdZd[d\d]d^d_d`dadbdcdddedfdgdhdidjdkdldmdndodpdqdrdsdtdudvdwdxdydzd{d|d}d~dddddddddddddddddd¡ dZdddddddddddddddd d¡d¢d£d¤d¥d¦d§d¨d©dªd«d¬d­d®d¯d°d±d²d³d´dµd¶d·d¸d¹dºd»d¼d½d¾d¿dÀdÁdÂdÃdÄdÅdÆdÇdÈdÉdÊdËdÌdÍdÎdÏdÐdÑdÒdÓdÔdÕdÖd×dØdÙdÚdÛdÜdÝdÞdßdàdádâdãdädådædçdèdédêdëdìdídîdïdðdñdòdódôdõdöd÷dødùdúdûdüdýdþdÿd ddddddddd	d
dddddddddddddddddddddd d!d"d#d$d%d&d'ddd(d)d*d+d,d-d.d/d0d1d2d3d4d5d6d>d7d8d9d:d;d<d=d>d?d@dAddBdCdDdEdFdGdHdIdJdKdLdMdNdOdPdQdRdSdTdUdVd_dWdXdYdZd[d\d]d^d_d`dadbdcdddedfdgdhdidjdkdldmdndodpdqdrdsdtdudvdwdxdydzd{d|d?d}d~ddddddddddddd ZdS (  z` Python Character Mapping Codec generated from 'VENDORS/MICSFT/PC/CP855.TXT' with gencodec.py.

é    Nc               @   s    e Zd ZdddZdddZdS )	ÚCodecÚstrictc             C   s   t  ||t¡S )N)ÚcodecsÚcharmap_encodeÚencoding_map)ÚselfÚinputÚerrors© r
   ú D:\Python\lib\encodings\cp855.pyÚencode   s    zCodec.encodec             C   s   t  ||t¡S )N)r   Úcharmap_decodeÚdecoding_table)r   r   r	   r
   r
   r   Údecode   s    zCodec.decodeN)r   )r   )Ú__name__Ú
__module__Ú__qualname__r   r   r
   r
   r
   r   r   	   s   
r   c               @   s   e Zd ZdddZdS )ÚIncrementalEncoderFc             C   s   t  || jt¡d S )Nr   )r   r   r	   r   )r   r   Úfinalr
   r
   r   r      s    zIncrementalEncoder.encodeN)F)r   r   r   r   r
   r
   r
   r   r      s   r   c               @   s   e Zd ZdddZdS )ÚIncrementalDecoderFc             C   s   t  || jt¡d S )Nr   )r   r   r	   r   )r   r   r   r
   r
   r   r      s    zIncrementalDecoder.decodeN)F)r   r   r   r   r
   r
   r
   r   r      s   r   c               @   s   e Zd ZdS )ÚStreamWriterN)r   r   r   r
   r
   r
   r   r      s   r   c               @   s   e Zd ZdS )ÚStreamReaderN)r   r   r   r
   r
   r
   r   r      s   r   c            	   C   s    t jdt jt jttttdS )NÚcp855)Únamer   r   ÚincrementalencoderÚincrementaldecoderÚstreamreaderÚstreamwriter)	r   Ú	CodecInfor   r   r   r   r   r   r   r
   r
   r
   r   Úgetregentry!   s    r   é   iR  i  iS  i  iQ  i  iT  i  iU  i  iV  i  iW  i  iX  i  iY  i	  iZ  i
  i[  i  i\  i  i^  i  i_  i  iN  i.  iJ  i*  i0  i  i1  i  iF  i&  i4  i  i5  i  iD  i$  i3  i  é«   é»   i%  i%  i%  i%  i$%  iE  i%  i8  i  ic%  iQ%  iW%  i]%  i9  i  i%  i%  i4%  i,%  i%  i %  i<%  i:  i  iZ%  iT%  ii%  if%  i`%  iP%  il%  é¤   i;  i  i<  i  i=  i  i>  i  i?  i%  i%  i%  i%  i  iO  i%  i/  i@  i   iA  i!  iB  i"  iC  i#  i6  i  i2  i  iL  i,  i!  é­   iK  i+  i7  i  iH  i(  iM  i-  iI  i)  iG  i'  é§   i %  é    )é   é   é   é   é   é   é   é   é   é   é   é   é   é   é   é   é   é   é   é   é   é   é   é   é   é   é   é   é   é   é   é   r&   é¡   é¢   é£   r#   é¥   é¦   r%   é¨   é©   éª   r!   é¬   r$   é®   é¯   é°   é±   é²   é³   é´   éµ   é¶   é·   é¸   é¹   éº   r"   é¼   é½   é¾   é¿   éÀ   éÁ   éÂ   éÃ   éÄ   éÅ   éÆ   éÇ   éÈ   éÉ   éÊ   éË   éÌ   éÍ   éÎ   éÏ   éÐ   éÑ   éÒ   éÓ   éÔ   éÕ   éÖ   é×   éØ   éÙ   éÚ   éÛ   éÜ   éÝ   éÞ   éß   éà   éá   éâ   éã   éä   éå   éæ   éç   éè   éé   éê   éë   éì   éí   éî   éï   éð   éñ   éò   éó   éô   éõ   éö   é÷   éø   éù   éú   éû   éü   éý   éþ   éÿ   u   	
 !"#$%&'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\]^_`abcdefghijklmnopqrstuvwxyz{|}~ÑÐÑÐÑÐÑÐÑÐÑÐÑÐÑÐÑÐÑÐÑÐÑÐÑÐÑÐÑÐ®ÑÐªÐ°ÐÐ±ÐÑÐ¦Ð´ÐÐµÐÑÐ¤Ð³ÐÂ«Â»âââââ¤ÑÐ¥Ð¸Ðâ£âââÐ¹Ðâââ´â¬âââ¼ÐºÐâââ©â¦â ââ¬Â¤Ð»ÐÐ¼ÐÐ½ÐÐ¾ÐÐ¿ââââÐÑâÐ¯ÑÐ ÑÐ¡ÑÐ¢ÑÐ£Ð¶ÐÐ²ÐÑÐ¬âÂ­ÑÐ«Ð·ÐÑÐ¨ÑÐ­ÑÐ©ÑÐ§Â§â Â é   é   é   é   é   é   é   é   é	   é
   é   é   é   é   é   é   é   é   é   é   é   é   é   é   é   é   é   é   é   é   é   é    é!   é"   é#   é$   é%   é&   é'   é(   é)   é*   é+   é,   é-   é.   é/   é0   é1   é2   é3   é4   é5   é6   é7   é8   é9   é:   é;   é<   é=   é>   é?   é@   éA   éB   éC   éD   éE   éF   éG   éH   éI   éJ   éK   éL   éM   éN   éO   éP   éQ   éR   éS   éT   éU   éV   éW   éX   éY   éZ   é[   é\   é]   é^   é_   é`   éa   éb   éc   éd   ée   éf   ég   éh   éi   éj   ék   él   ém   én   éo   ép   éq   ér   és   ét   éu   év   éw   éx   éy   éz   é{   é|   é}   é~   é   r    rp   r   rP   r   rQ   r,   r(   r*   r.   r0   r2   r4   r6   r8   r:   r<   r>   r@   rB   rG   rI   r   rM   r   r   rZ   r_   rh   rr   rt   rv   rx   r~   r   r   r   r   rX   rJ   r   r   r   rF   r   r   r   rD   r   rH   r   rO   rK   rL   r   r   rY   r^   rg   rq   rs   ru   rw   ry   r   r   r   r   rN   rW   r   r   r   rE   r   r   r   rC   r   r+   r'   r)   r-   r/   r1   r3   r5   r7   r9   r;   r=   r?   rA   r   re   rU   r{   r`   ra   rz   rd   rV   rc   rb   rf   rn   r\   rj   ri   r]   rm   r[   rl   rk   ro   r   r}   r|   rR   rS   rT   r   (   r   r¡   r¢   r£   r¤   r¥   r¦   r§   r¨   r©   rª   r«   r¬   r­   r®   r¯   r°   r±   r²   r³   r´   rµ   r¶   r·   r¸   r¹   rº   r»   r¼   r½   r¾   r¿   rÀ   rÁ   rÂ   rÃ   rÄ   rÅ   rÆ   rÇ   rÈ   rÉ   rÊ   rË   rÌ   rÍ   rÎ   rÏ   rÐ   rÑ   rÒ   rÓ   rÔ   rÕ   rÖ   r×   rØ   rÙ   rÚ   rÛ   rÜ   rÝ   rÞ   rß   rà   rá   râ   rã   rä   rå   ræ   rç   rè   ré   rê   rë   rì   rí   rî   rï   rð   rñ   rò   ró   rô   rõ   rö   r÷   rø   rù   rú   rû   rü   rý   rþ   rÿ   r   r  r  r  r  r  r  r  r  r	  r
  r  r  r  r  r  r  r  r  r  r  r  r  r  r  r  r  r  r  r  r  r  r&   r#   r%   r!   r$   r"   i  i  i  i  i  i  i  i  i	  i
  i  i  i  i  i  i  i  i  i  i  i  i  i  i  i  i  i  i  i  i  i   i!  i"  i#  i$  i%  i&  i'  i(  i)  i*  i+  i,  i-  i.  i/  i0  i1  i2  i3  i4  i5  i6  i7  i8  i9  i:  i;  i<  i=  i>  i?  i@  iA  iB  iC  iD  iE  iF  iG  iH  iI  iJ  iK  iL  iM  iN  iO  iQ  iR  iS  iT  iU  iV  iW  iX  iY  iZ  i[  i\  i^  i_  i!  i %  i%  i%  i%  i%  i%  i%  i$%  i,%  i4%  i<%  iP%  iQ%  iT%  iW%  iZ%  i]%  i`%  ic%  if%  ii%  il%  i%  i%  i%  i%  i%  i%  i %  )Ú__doc__r   r   r   r   r   r   r   Úmake_identity_dictÚrangeÚdecoding_mapÚupdater   r   r
   r
   r
   r   Ú<module>   s  
  ã               @   s   d Z ddlZG dd dejZG dd dejZG dd dejZG d	d
 d
eejZG dd deejZdd ZdZe 	e¡Z
dS )zj Python Character Mapping Codec cp856 generated from 'MAPPINGS/VENDORS/MISC/CP856.TXT' with gencodec.py.

é    Nc               @   s    e Zd ZdddZdddZdS )	ÚCodecÚstrictc             C   s   t  ||t¡S )N)ÚcodecsÚcharmap_encodeÚencoding_table)ÚselfÚinputÚerrors© r
   ú D:\Python\lib\encodings\cp856.pyÚencode   s    zCodec.encodec             C   s   t  ||t¡S )N)r   Úcharmap_decodeÚdecoding_table)r   r   r	   r
   r
   r   Údecode   s    zCodec.decodeN)r   )r   )Ú__name__Ú
__module__Ú__qualname__r   r   r
   r
   r
   r   r   	   s   
r   c               @   s   e Zd ZdddZdS )ÚIncrementalEncoderFc             C   s   t  || jt¡d S )Nr   )r   r   r	   r   )r   r   Úfinalr
   r
   r   r      s    zIncrementalEncoder.encodeN)F)r   r   r   r   r
   r
   r
   r   r      s   r   c               @   s   e Zd ZdddZdS )ÚIncrementalDecoderFc             C   s   t  || jt¡d S )Nr   )r   r   r	   r   )r   r   r   r
   r
   r   r      s    zIncrementalDecoder.decodeN)F)r   r   r   r   r
   r
   r
   r   r      s   r   c               @   s   e Zd ZdS )ÚStreamWriterN)r   r   r   r
   r
   r
   r   r      s   r   c               @   s   e Zd ZdS )ÚStreamReaderN)r   r   r   r
   r
   r
   r   r      s   r   c            	   C   s    t jdt jt jttttdS )NZcp856)Únamer   r   ÚincrementalencoderÚincrementaldecoderÚstreamreaderÚstreamwriter)	r   Ú	CodecInfor   r   r   r   r   r   r   r
   r
   r
   r   Úgetregentry!   s    r   uÇ   	
 !"#$%&'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\]^_`abcdefghijklmnopqrstuvwxyz{|}~××××××××××××××××× ×¡×¢×£×¤×¥×¦×§×¨×©×ªï¿¾Â£ï¿¾Ãï¿¾ï¿¾ï¿¾ï¿¾ï¿¾ï¿¾ï¿¾ï¿¾ï¿¾ï¿¾Â®Â¬Â½Â¼ï¿¾Â«Â»âââââ¤ï¿¾ï¿¾ï¿¾Â©â£âââÂ¢Â¥âââ´â¬âââ¼ï¿¾ï¿¾âââ©â¦â ââ¬Â¤ï¿¾ï¿¾ï¿¾ï¿¾ï¿¾ï¿¾ï¿¾ï¿¾ï¿¾ââââÂ¦ï¿¾âï¿¾ï¿¾ï¿¾ï¿¾ï¿¾ï¿¾Âµï¿¾ï¿¾ï¿¾ï¿¾ï¿¾ï¿¾ï¿¾Â¯Â´Â­Â±âÂ¾Â¶Â§Ã·Â¸Â°Â¨Â·Â¹Â³Â²â Â )Ú__doc__r   r   r   r   r   r   r   r   Úcharmap_buildr   r
   r
   r
   r   Ú<module>   s     ã            þ   @   sü  d Z ddlZG dd dejZG dd dejZG dd dejZG d	d
 d
eejZG dd deejZdd Ze e	d¡Z
e
 ddddddddddddddddd d!d"d#d$d%d&d'd(d)d*d+d,d-d.d/d0d1d2d3d4d5d6d7d8d9d:d;d<d=d>d?d@dAdBdCdDdEdFdGdHdIdJdKdLdMdNdOdPdQdRdSdTdUdVdWdXdYdZd[d\d]d^d_d`dadbdcddddedfdgdhdidjdkdldmdndodpdqdrdsdtduddvdwdxdydzd{d|d}d~ddddddddddddddd¡ dZdddddddddddddddddddd d¡d¢d£d¤d¥d¦d§d¨d©dªd«d¬d­d®d¯d°d±d²d³d´dµd¶d·d¸d¹dºd»d¼d½d¾d¿dÀdÁdÂdÃdÄdÅdÆdÇdÈdÉdÊdËdÌdÍdÎdÏdÐdÑdÒdÓdÔdÕdÖd×dØdÙdÚdÛdÜdÝdÞdßdàdádâdãdädådædçdèdédêdëdìdídîdïdðdñdòdódôdõdöd÷dødùdúdûdüdýdþdÿd ddddddddd	d
dddzd}d;ddgdddsd'dd5d9daddHdd+d4dddd!d#d3dd&dd{d:d>d2dddudddddddqddrdodd)dvd-dNdVddddddddddd0dddd"dddd d!d"d#d$d%d=d&d'd_d(dMd)dd*d$d+d,d,d-d.d1dldd/d0d1d2dddwd8dGdydWd|dFdEdded`d d?ddd<dmddcdbdfdpd*dxdd~dd3d4ýZdS (5  z` Python Character Mapping Codec generated from 'VENDORS/MICSFT/PC/CP857.TXT' with gencodec.py.

é    Nc               @   s    e Zd ZdddZdddZdS )	ÚCodecÚstrictc             C   s   t  ||t¡S )N)ÚcodecsÚcharmap_encodeÚencoding_map)ÚselfÚinputÚerrors© r
   ú D:\Python\lib\encodings\cp857.pyÚencode   s    zCodec.encodec             C   s   t  ||t¡S )N)r   Úcharmap_decodeÚdecoding_table)r   r   r	   r
   r
   r   Údecode   s    zCodec.decodeN)r   )r   )Ú__name__Ú
__module__Ú__qualname__r   r   r
   r
   r
   r   r   	   s   
r   c               @   s   e Zd ZdddZdS )ÚIncrementalEncoderFc             C   s   t  || jt¡d S )Nr   )r   r   r	   r   )r   r   Úfinalr
   r
   r   r      s    zIncrementalEncoder.encodeN)F)r   r   r   r   r
   r
   r
   r   r      s   r   c               @   s   e Zd ZdddZdS )ÚIncrementalDecoderFc             C   s   t  || jt¡d S )Nr   )r   r   r	   r   )r   r   r   r
   r
   r   r      s    zIncrementalDecoder.decodeN)F)r   r   r   r   r
   r
   r
   r   r      s   r   c               @   s   e Zd ZdS )ÚStreamWriterN)r   r   r   r
   r
   r
   r   r      s   r   c               @   s   e Zd ZdS )ÚStreamReaderN)r   r   r   r
   r
   r
   r   r      s   r   c            	   C   s    t jdt jt jttttdS )NÚcp857)Únamer   r   ÚincrementalencoderÚincrementaldecoderÚstreamreaderÚstreamwriter)	r   Ú	CodecInfor   r   r   r   r   r   r   r
   r
   r
   r   Úgetregentry!   s    r   é   éÇ   éü   éé   éâ   éä   éà   éå   éç   éê   éë   éè   éï   éî   i1  éÄ   éÅ   éÉ   éæ   éÆ   éô   éö   éò   éû   éù   i0  éÖ   éÜ   éø   é£   éØ   i^  i_  éá   éí   éó   éú   éñ   éÑ   i  i  é¿   é®   é¬   é½   é¼   é¡   é«   é»   i%  i%  i%  i%  i$%  éÁ   éÂ   éÀ   é©   ic%  iQ%  iW%  i]%  é¢   é¥   i%  i%  i4%  i,%  i%  i %  i<%  éã   éÃ   iZ%  iT%  ii%  if%  i`%  iP%  il%  é¤   éº   éª   éÊ   éË   éÈ   éÍ   éÎ   éÏ   i%  i%  i%  i%  é¦   éÌ   i%  éÓ   éß   éÔ   éÒ   éõ   éÕ   éµ   é×   éÚ   éÛ   éÙ   éÿ   é¯   é´   é­   é±   é¾   é¶   é§   é÷   é¸   é°   é¨   é·   é¹   é³   é²   i %  é    )é   é   é   é   é   é   é   é   é   é   é   é   é   é   é   é   é   é   é   é   é   é   é   é   é   é   é   é   é   é   é   é   ry   rH   rO   r;   rS   rP   r\   rp   rt   rN   rU   rI   rE   rl   rD   rj   rs   rm   rx   rw   rk   rd   ro   ru   rr   rv   rT   rJ   rG   rF   rn   rC   rM   rK   rL   rR   r.   r/   r2   r!   rX   r0   rV   rW   r]   rY   rZ   r[   éÐ   rB   ra   r^   r`   rc   r8   re   r<   rh   rf   rg   r9   éÝ   éÞ   r_   r&   r=   r$   rQ   r%   r'   r1   r(   r+   r#   r)   r*   r>   r-   r,   éð   rA   r5   r?   r3   rb   r4   rq   r:   r7   r@   r6   r"   éý   éþ   ri   u    	
 !"#$%&'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\]^_`abcdefghijklmnopqrstuvwxyz{|}~ÃÃ¼Ã©Ã¢Ã¤Ã Ã¥Ã§ÃªÃ«Ã¨Ã¯Ã®Ä±ÃÃÃÃ¦ÃÃ´Ã¶Ã²Ã»Ã¹Ä°ÃÃÃ¸Â£ÃÅÅÃ¡Ã­Ã³ÃºÃ±ÃÄÄÂ¿Â®Â¬Â½Â¼Â¡Â«Â»âââââ¤ÃÃÃÂ©â£âââÂ¢Â¥âââ´â¬âââ¼Ã£Ãâââ©â¦â ââ¬Â¤ÂºÂªÃÃÃï¿¾ÃÃÃââââÂ¦ÃâÃÃÃÃÃµÃÂµï¿¾ÃÃÃÃÃ¬Ã¿Â¯Â´Â­Â±ï¿¾Â¾Â¶Â§Ã·Â¸Â°Â¨Â·Â¹Â³Â²â Â é   é   é   é   é   é   é   é   é	   é
   é   é   é   é   é   é   é   é   é   é   é   é   é   é   é   é   é   é   é   é   é   é    é!   é"   é#   é$   é%   é&   é'   é(   é)   é*   é+   é,   é-   é.   é/   é0   é1   é2   é3   é4   é5   é6   é7   é8   é9   é:   é;   é<   é=   é>   é?   é@   éA   éB   éC   éD   éE   éF   éG   éH   éI   éJ   éK   éL   éM   éN   éO   éP   éQ   éR   éS   éT   éU   éV   éW   éX   éY   éZ   é[   é\   é]   é^   é_   é`   éa   éb   éc   éd   ée   éf   ég   éh   éi   éj   ék   él   ém   én   éo   ép   éq   ér   és   ét   éu   év   éw   éx   éy   éz   é{   é|   é}   é~   é   r   r   r   r   r   r   r   r   rz   r   r   r   r   r   r   r}   r~   r   r   r   r   r|   r   r   éì   r   r   r   r   r   r   r   r   r{   r   r   r   r   r   )ýr   r    r¡   r¢   r£   r¤   r¥   r¦   r§   r¨   r©   rª   r«   r¬   r­   r®   r¯   r°   r±   r²   r³   r´   rµ   r¶   r·   r¸   r¹   rº   r»   r¼   r½   r¾   r¿   rÀ   rÁ   rÂ   rÃ   rÄ   rÅ   rÆ   rÇ   rÈ   rÉ   rÊ   rË   rÌ   rÍ   rÎ   rÏ   rÐ   rÑ   rÒ   rÓ   rÔ   rÕ   rÖ   r×   rØ   rÙ   rÚ   rÛ   rÜ   rÝ   rÞ   rß   rà   rá   râ   rã   rä   rå   ræ   rç   rè   ré   rê   rë   rì   rí   rî   rï   rð   rñ   rò   ró   rô   rõ   rö   r÷   rø   rù   rú   rû   rü   rý   rþ   rÿ   r   r  r  r  r  r  r  r  r  r	  r
  r  r  r  r  r  r  r  r  r  r  r  r  r  r  r  r  r  r  r  r  ry   rH   rO   r;   rS   rP   r\   rp   rt   rN   rU   rI   rE   rl   rD   rj   rs   rm   rx   rw   rk   rd   ro   ru   rr   rv   rT   rJ   rG   rF   rn   rC   rM   rK   rL   rR   r.   r/   r2   r!   rX   r0   rV   rW   r]   rY   rZ   r[   rB   ra   r^   r`   rc   r8   re   r<   rh   rf   rg   r9   r_   r&   r=   r$   rQ   r%   r'   r1   r(   r+   r#   r)   r*   r  r>   r-   r,   rA   r5   r?   r3   rb   r4   rq   r:   r7   r@   r6   r"   ri   i  i  i0  i1  i^  i_  i %  i%  i%  i%  i%  i%  i%  i$%  i,%  i4%  i<%  iP%  iQ%  iT%  iW%  iZ%  i]%  i`%  ic%  if%  ii%  il%  i%  i%  i%  i%  i%  i%  i %  )Ú__doc__r   r   r   r   r   r   r   Úmake_identity_dictÚrangeÚdecoding_mapÚupdater   r   r
   r
   r
   r   Ú<module>   s  
  ã              @   s   d Z ddlZG dd dejZG dd dejZG dd dejZG d	d
 d
eejZG dd deejZdd Ze e	d¡Z
e
 ddddddddddddddddd d!d"d#d$d%d&d'd(d)d*d+d,d-d.d/d0d1d2d3d4d5d6d7d8d9d:d;d<d=d>d?d@dAdBdCdDdEdFdGdHdIdJdKdLdMdNdOdPdQdRdSdTdUdVdWdXdYdZd[d\d]d^d_d`dadbdcdddedfdgdhdidjdkdldmdndodpdqdrdsdtdudvdwdxdydzd{d|d}d~dddddddddddddddddd¡ dZdddddddddddddddd d¡d¢d£d¤d¥d¦d§d¨d©dªd«d¬d­d®d¯d°d±d²d³d´dµd¶d·d¸d¹dºd»d¼d½d¾d¿dÀdÁdÂdÃdÄdÅdÆdÇdÈdÉdÊdËdÌdÍdÎdÏdÐdÑdÒdÓdÔdÕdÖd×dØdÙdÚdÛdÜdÝdÞdßdàdádâdãdädådædçdèdédêdëdìdídîdïdðdñdòdódôdõdöd÷dødùdúdûdüdýdþdÿd ddddddddd	d
ddddddd(dd;ddhdd}dtd'ddmd9d6d`dHdd+d4d|ddd!d#d3dd&dd~d:d>d2dddvdddddddrddsdpdxd)d.d-d5dNdVddddddddddd1dd0dddd"dddd d!d"d#d$d%d=d&d'dad_d(dMd)dd*d$d+d,d,d-d.ddd/dud0d%dddyd8dGd{dWddFdEddfd7d d?ddd<dnddcdbdgdqd*dzddddwd1 ZdS (2  zA Python Character Mapping Codec for CP858, modified from cp850.

é    Nc               @   s    e Zd ZdddZdddZdS )	ÚCodecÚstrictc             C   s   t  ||t¡S )N)ÚcodecsÚcharmap_encodeÚencoding_map)ÚselfÚinputÚerrors© r
   ú D:\Python\lib\encodings\cp858.pyÚencode   s    zCodec.encodec             C   s   t  ||t¡S )N)r   Úcharmap_decodeÚdecoding_table)r   r   r	   r
   r
   r   Údecode   s    zCodec.decodeN)r   )r   )Ú__name__Ú
__module__Ú__qualname__r   r   r
   r
   r
   r   r   	   s   
r   c               @   s   e Zd ZdddZdS )ÚIncrementalEncoderFc             C   s   t  || jt¡d S )Nr   )r   r   r	   r   )r   r   Úfinalr
   r
   r   r      s    zIncrementalEncoder.encodeN)F)r   r   r   r   r
   r
   r
   r   r      s   r   c               @   s   e Zd ZdddZdS )ÚIncrementalDecoderFc             C   s   t  || jt¡d S )Nr   )r   r   r	   r   )r   r   r   r
   r
   r   r      s    zIncrementalDecoder.decodeN)F)r   r   r   r   r
   r
   r
   r   r      s   r   c               @   s   e Zd ZdS )ÚStreamWriterN)r   r   r   r
   r
   r
   r   r      s   r   c               @   s   e Zd ZdS )ÚStreamReaderN)r   r   r   r
   r
   r
   r   r      s   r   c            	   C   s    t jdt jt jttttdS )NÚcp858)Únamer   r   ÚincrementalencoderÚincrementaldecoderÚstreamreaderÚstreamwriter)	r   Ú	CodecInfor   r   r   r   r   r   r   r
   r
   r
   r   Úgetregentry!   s    r   é   éÇ   éü   éé   éâ   éä   éà   éå   éç   éê   éë   éè   éï   éî   éì   éÄ   éÅ   éÉ   éæ   éÆ   éô   éö   éò   éû   éù   éÿ   éÖ   éÜ   éø   é£   éØ   é×   i  éá   éí   éó   éú   éñ   éÑ   éª   éº   é¿   é®   é¬   é½   é¼   é¡   é«   é»   i%  i%  i%  i%  i$%  éÁ   éÂ   éÀ   é©   ic%  iQ%  iW%  i]%  é¢   é¥   i%  i%  i4%  i,%  i%  i %  i<%  éã   éÃ   iZ%  iT%  ii%  if%  i`%  iP%  il%  é¤   éð   éÐ   éÊ   éË   éÈ   i¬   éÍ   éÎ   éÏ   i%  i%  i%  i%  é¦   éÌ   i%  éÓ   éß   éÔ   éÒ   éõ   éÕ   éµ   éþ   éÞ   éÚ   éÛ   éÙ   éý   éÝ   é¯   é´   é­   é±   i   é¾   é¶   é§   é÷   é¸   é°   é¨   é·   é¹   é³   é²   i %  é    )é   é   é   é   é   é   é   é   é   é   é   é   é   é   é   é   é   é   é   é   é   é   é   é   é   é   é   é   é   é   é   é   r   rM   rT   r=   rX   rU   ra   rw   r{   rS   rF   rN   rJ   rs   rI   rq   rz   rt   r   r~   rr   ri   rv   r|   ry   r}   rG   rO   rL   rK   ru   rH   rR   rP   rQ   rW   r/   r0   r3   r!   r]   r1   r[   r\   rb   r^   r_   r`   rZ   rE   rf   rc   re   rh   r:   r?   r>   rn   rl   rm   r;   rp   rk   rd   r&   r@   r$   rV   r%   r'   r2   r(   r+   r#   r)   r*   r.   rA   r-   r,   rY   rD   r6   rB   r4   rg   r5   rx   r<   r8   rC   r7   r"   ro   rj   r9   u   	
 !"#$%&'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\]^_`abcdefghijklmnopqrstuvwxyz{|}~ÃÃ¼Ã©Ã¢Ã¤Ã Ã¥Ã§ÃªÃ«Ã¨Ã¯Ã®Ã¬ÃÃÃÃ¦ÃÃ´Ã¶Ã²Ã»Ã¹Ã¿ÃÃÃ¸Â£ÃÃÆÃ¡Ã­Ã³ÃºÃ±ÃÂªÂºÂ¿Â®Â¬Â½Â¼Â¡Â«Â»âââââ¤ÃÃÃÂ©â£âââÂ¢Â¥âââ´â¬âââ¼Ã£Ãâââ©â¦â ââ¬Â¤Ã°ÃÃÃÃâ¬ÃÃÃââââÂ¦ÃâÃÃÃÃÃµÃÂµÃ¾ÃÃÃÃÃ½ÃÂ¯Â´Â­Â±âÂ¾Â¶Â§Ã·Â¸Â°Â¨Â·Â¹Â³Â²â Â é   é   é   é   é   é   é   é   é	   é
   é   é   é   é   é   é   é   é   é   é   é   é   é   é   é   é   é   é   é   é   é   é    é!   é"   é#   é$   é%   é&   é'   é(   é)   é*   é+   é,   é-   é.   é/   é0   é1   é2   é3   é4   é5   é6   é7   é8   é9   é:   é;   é<   é=   é>   é?   é@   éA   éB   éC   éD   éE   éF   éG   éH   éI   éJ   éK   éL   éM   éN   éO   éP   éQ   éR   éS   éT   éU   éV   éW   éX   éY   éZ   é[   é\   é]   é^   é_   é`   éa   éb   éc   éd   ée   éf   ég   éh   éi   éj   ék   él   ém   én   éo   ép   éq   ér   és   ét   éu   év   éw   éx   éy   éz   é{   é|   é}   é~   é   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r    (   r   r¡   r¢   r£   r¤   r¥   r¦   r§   r¨   r©   rª   r«   r¬   r­   r®   r¯   r°   r±   r²   r³   r´   rµ   r¶   r·   r¸   r¹   rº   r»   r¼   r½   r¾   r¿   rÀ   rÁ   rÂ   rÃ   rÄ   rÅ   rÆ   rÇ   rÈ   rÉ   rÊ   rË   rÌ   rÍ   rÎ   rÏ   rÐ   rÑ   rÒ   rÓ   rÔ   rÕ   rÖ   r×   rØ   rÙ   rÚ   rÛ   rÜ   rÝ   rÞ   rß   rà   rá   râ   rã   rä   rå   ræ   rç   rè   ré   rê   rë   rì   rí   rî   rï   rð   rñ   rò   ró   rô   rõ   rö   r÷   rø   rù   rú   rû   rü   rý   rþ   rÿ   r   r  r  r  r  r  r  r  r  r	  r
  r  r  r  r  r  r  r  r  r  r  r  r  r  r  r  r  r  r  r  r  r  r   rM   rT   r=   rX   rU   ra   rw   r{   rS   rF   rN   rJ   rs   rI   rq   rz   rt   r   r~   rr   ri   rv   r|   ry   r}   rG   rO   rL   rK   ru   rH   rR   rP   rQ   rW   r/   r0   r3   r!   r]   r1   r[   r\   rb   r^   r_   r`   rZ   rE   rf   rc   re   rh   r:   r?   r>   rn   rl   rm   r;   rp   rk   rd   r&   r@   r$   rV   r%   r'   r2   r(   r+   r#   r)   r*   r.   rA   r-   r,   rY   rD   r6   rB   r4   rg   r5   rx   r<   r8   rC   r7   r"   ro   rj   r9   i¬   i  i   i %  i%  i%  i%  i%  i%  i%  i$%  i,%  i4%  i<%  iP%  iQ%  iT%  iW%  iZ%  i]%  i`%  ic%  if%  ii%  il%  i%  i%  i%  i%  i%  i%  i %  )Ú__doc__r   r   r   r   r   r   r   Úmake_identity_dictÚrangeÚdecoding_mapÚupdater   r   r
   r
   r
   r   Ú<module>   s  
  ã              @   sR  d Z ddlZG dd dejZG dd dejZG dd dejZG d	d
 d
eejZG dd deejZdd Ze e	d¡Z
e
 ddddddddddddddddd d!d"d#d$d%d&d'd(d)d*d+d,d-d.d/d0d1d2d3d4d5d6d7d8d9d:d;d<d=d>d?d@dAdBdCdDdEdFdGdHdIdJdKdLdMdNdOdPdQdRdSdTdUdVdWdXdYdZd[d\d]d^d_d`dadbdcdddedfdgdhdidjdkdldmdndodpdqdrdsdtdudvdwdxdydzd{d|d}d~dddddddddddddddddd¡ dZdddddddddddddddd d¡d¢d£d¤d¥d¦d§d¨d©dªd«d¬d­d®d¯d°d±d²d³d´dµd¶d·d¸d¹dºd»d¼d½d¾d¿dÀdÁdÂdÃdÄdÅdÆdÇdÈdÉdÊdËdÌdÍdÎdÏdÐdÑdÒdÓdÔdÕdÖd×dØdÙdÚdÛdÜdÝdÞdßdàdádâdãdädådædçdèdédêdëdìdídîdïdðdñdòdódôdõdöd÷dødùdúdûdüdýdþdÿd ddddddddd	d
ddddddddddddd6dd4ddd3ddd:d>ddddd d!d"d#d$d%d&d'd(d)d*d+d,d-d.d0d/dd0d1d2d3d4d5d6d=d7d8d+d9d:d;d<d,d=ddd>dddd?d@ddAdd1ddBd'dCddDddEd2d%d#d$dFdGd&d8d!d-ddHdddIdd7d)dJd dKdd?dd/d"dLd;d<dMdd(dvdNdOd5d9dPdQdRddSdTdUdqd*dVdWdXddddYdZ ZdS ([  z` Python Character Mapping Codec generated from 'VENDORS/MICSFT/PC/CP860.TXT' with gencodec.py.

é    Nc               @   s    e Zd ZdddZdddZdS )	ÚCodecÚstrictc             C   s   t  ||t¡S )N)ÚcodecsÚcharmap_encodeÚencoding_map)ÚselfÚinputÚerrors© r
   ú D:\Python\lib\encodings\cp860.pyÚencode   s    zCodec.encodec             C   s   t  ||t¡S )N)r   Úcharmap_decodeÚdecoding_table)r   r   r	   r
   r
   r   Údecode   s    zCodec.decodeN)r   )r   )Ú__name__Ú
__module__Ú__qualname__r   r   r
   r
   r
   r   r   	   s   
r   c               @   s   e Zd ZdddZdS )ÚIncrementalEncoderFc             C   s   t  || jt¡d S )Nr   )r   r   r	   r   )r   r   Úfinalr
   r
   r   r      s    zIncrementalEncoder.encodeN)F)r   r   r   r   r
   r
   r
   r   r      s   r   c               @   s   e Zd ZdddZdS )ÚIncrementalDecoderFc             C   s   t  || jt¡d S )Nr   )r   r   r	   r   )r   r   r   r
   r
   r   r      s    zIncrementalDecoder.decodeN)F)r   r   r   r   r
   r
   r
   r   r      s   r   c               @   s   e Zd ZdS )ÚStreamWriterN)r   r   r   r
   r
   r
   r   r      s   r   c               @   s   e Zd ZdS )ÚStreamReaderN)r   r   r   r
   r
   r
   r   r      s   r   c            	   C   s    t jdt jt jttttdS )NÚcp860)Únamer   r   ÚincrementalencoderÚincrementaldecoderÚstreamreaderÚstreamwriter)	r   Ú	CodecInfor   r   r   r   r   r   r   r
   r
   r
   r   Úgetregentry!   s    r   é   éÇ   éü   éé   éâ   éã   éà   éÁ   éç   éê   éÊ   éè   éÍ   éÔ   éì   éÃ   éÂ   éÉ   éÀ   éÈ   éô   éõ   éò   éÚ   éù   éÌ   éÕ   éÜ   é¢   é£   éÙ   i§   éÓ   éá   éí   éó   éú   éñ   éÑ   éª   éº   é¿   éÒ   é¬   é½   é¼   é¡   é«   é»   i%  i%  i%  i%  i$%  ia%  ib%  iV%  iU%  ic%  iQ%  iW%  i]%  i\%  i[%  i%  i%  i4%  i,%  i%  i %  i<%  i^%  i_%  iZ%  iT%  ii%  if%  i`%  iP%  il%  ig%  ih%  id%  ie%  iY%  iX%  iR%  iS%  ik%  ij%  i%  i%  i%  i%  i%  i%  i%  i±  éß   i  iÀ  i£  iÃ  éµ   iÄ  i¦  i  i©  i´  i"  iÆ  iµ  i)"  ia"  é±   ie"  id"  i #  i!#  é÷   iH"  é°   i"  é·   i"  i   é²   i %  é    )é   é   é   é   é   é   é   é   é   é   é   é   é   é   é   é   é   é   é   é   é   é   é   é   é   é   é   é   é   é   é   é   rW   rM   r<   r=   é¤   é¥   é¦   é§   é¨   é©   rF   rN   rJ   é­   é®   é¯   rT   rR   rV   é³   é´   rQ   é¶   rU   é¸   é¹   rG   rO   rL   rK   é¾   rH   r2   r'   r0   r/   éÄ   éÅ   éÆ   r!   r3   r1   r*   éË   r9   r,   éÎ   éÏ   éÐ   rE   rI   r?   r-   r:   éÖ   é×   éØ   r>   r7   éÛ   r;   éÝ   éÞ   rP   r&   r@   r$   r%   éä   éå   éæ   r(   r+   r#   r)   éë   r.   rA   éî   éï   éð   rD   r6   rB   r4   r5   éö   rS   éø   r8   rC   éû   r"   éý   éþ   éÿ   u½   	
 !"#$%&'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\]^_`abcdefghijklmnopqrstuvwxyz{|}~ÃÃ¼Ã©Ã¢Ã£Ã ÃÃ§ÃªÃÃ¨ÃÃÃ¬ÃÃÃÃÃÃ´ÃµÃ²ÃÃ¹ÃÃÃÂ¢Â£Ãâ§ÃÃ¡Ã­Ã³ÃºÃ±ÃÂªÂºÂ¿ÃÂ¬Â½Â¼Â¡Â«Â»âââââ¤â¡â¢âââ£ââââââââ´â¬âââ¼âââââ©â¦â ââ¬â§â¨â¤â¥âââââ«âªâââââââÎ±ÃÎÏÎ£ÏÂµÏÎ¦ÎÎ©Î´âÏÎµâ©â¡Â±â¥â¤â â¡Ã·âÂ°âÂ·ââ¿Â²â Â é   é   é   é   é   é   é   é   é	   é
   é   é   é   é   é   é   é   é   é   é   é   é   é   é   é   é   é   é   é   é   é   é    é!   é"   é#   é$   é%   é&   é'   é(   é)   é*   é+   é,   é-   é.   é/   é0   é1   é2   é3   é4   é5   é6   é7   é8   é9   é:   é;   é<   é=   é>   é?   é@   éA   éB   éC   éD   éE   éF   éG   éH   éI   éJ   éK   éL   éM   éN   éO   éP   éQ   éR   éS   éT   éU   éV   éW   éX   éY   éZ   é[   é\   é]   é^   é_   é`   éa   éb   éc   éd   ée   éf   ég   éh   éi   éj   ék   él   ém   én   éo   ép   éq   ér   és   ét   éu   év   éw   éx   éy   éz   é{   é|   é}   é~   é   r    r~   rs   rt   rz   r   r   r   r   r{   r   r|   ri   r^   rg   rf   rX   rj   rh   ra   rp   rc   ry   r}   rw   rd   rq   ru   rn   rr   r]   r[   r\   r_   rb   rZ   r`   re   rx   rm   rk   rl   r   ro   rY   r   r   r   r   rv   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   (   r   r¡   r¢   r£   r¤   r¥   r¦   r§   r¨   r©   rª   r«   r¬   r­   r®   r¯   r°   r±   r²   r³   r´   rµ   r¶   r·   r¸   r¹   rº   r»   r¼   r½   r¾   r¿   rÀ   rÁ   rÂ   rÃ   rÄ   rÅ   rÆ   rÇ   rÈ   rÉ   rÊ   rË   rÌ   rÍ   rÎ   rÏ   rÐ   rÑ   rÒ   rÓ   rÔ   rÕ   rÖ   r×   rØ   rÙ   rÚ   rÛ   rÜ   rÝ   rÞ   rß   rà   rá   râ   rã   rä   rå   ræ   rç   rè   ré   rê   rë   rì   rí   rî   rï   rð   rñ   rò   ró   rô   rõ   rö   r÷   rø   rù   rú   rû   rü   rý   rþ   rÿ   r   r  r  r  r  r  r  r  r  r	  r
  r  r  r  r  r  r  r  r  r  r  r  r  r  r  r  r  r  r  r  r  r  rW   rM   r<   r=   rF   rN   rJ   rT   rR   rV   rQ   rU   rG   rO   rL   rK   rH   r2   r'   r0   r/   r!   r3   r1   r*   r9   r,   rE   rI   r?   r-   r:   r>   r7   r;   rP   r&   r@   r$   r%   r(   r+   r#   r)   r.   rA   rD   r6   rB   r4   r5   rS   r8   rC   r"   i  i  i£  i¦  i©  i±  i´  iµ  iÀ  iÃ  iÄ  iÆ  i   i§   i"  i"  i"  i)"  iH"  ia"  id"  ie"  i #  i!#  i %  i%  i%  i%  i%  i%  i%  i$%  i,%  i4%  i<%  iP%  iQ%  iR%  iS%  iT%  iU%  iV%  iW%  iX%  iY%  iZ%  i[%  i\%  i]%  i^%  i_%  i`%  ia%  ib%  ic%  id%  ie%  if%  ig%  ih%  ii%  ij%  ik%  il%  i%  i%  i%  i%  i%  i%  i%  i%  i %  )Ú__doc__r   r   r   r   r   r   r   Úmake_identity_dictÚrangeÚdecoding_mapÚupdater   r   r
   r
   r
   r   Ú<module>   s  
  ã              @   sV  d Z ddlZG dd dejZG dd dejZG dd dejZG d	d
 d
eejZG dd deejZdd Ze e	d¡Z
e
 ddddddddddddddddd d!d"d#d$d%d&d'd(d)d*d+d,d-d.d/d0d1d2d3d4d5d6d7d8d9d:d;d<d=d>d?d@dAdBdCdDdEdFdGdHdIdJdKdLdMdNdOdPdQdRdSdTdUdVdWdXdYdZd[d\d]d^d_d`dadbdcdddedfdgdhdidjdkdldmdndodpdqdrdsdtdudvdwdxdydzd{d|d}d~dddddddddddddddddd¡ dZdddddddddddddddd d¡d¢d£d¤d¥d¦d§d¨d©dªd«d¬d­d®d¯d°d±d²d³d´dµd¶d·d¸d¹dºd»d¼d½d¾d¿dÀdÁdÂdÃdÄdÅdÆdÇdÈdÉdÊdËdÌdÍdÎdÏdÐdÑdÒdÓdÔdÕdÖd×dØdÙdÚdÛdÜdÝdÞdßdàdádâdãdädådædçdèdédêdëdìdídîdïdðdñdòdódôdõdöd÷dødùdúdûdüdýdþdÿd ddddddddd	d
dddddddddddd+dd(d!d3dd:d>ddddddddd d!d"d#d$d%d&d'd0d(dd)d*d+d,d-d.d/d0d1d=d2d3d4d5d$d6d,d7d8d9d:d;dddddddd<d=ddd1dd>d?d&d@dAddd2dBdCd#dDddEd7d8dFdGdHdIdJd4dd5dKdLd)d dMdd?dNd6dOdPd;d<d"ddQdvdRdSdTdUdVdWddXd-dYdZdqd*d[d'ddddd%d\ ZdS (]  z` Python Character Mapping Codec generated from 'VENDORS/MICSFT/PC/CP861.TXT' with gencodec.py.

é    Nc               @   s    e Zd ZdddZdddZdS )	ÚCodecÚstrictc             C   s   t  ||t¡S )N)ÚcodecsÚcharmap_encodeÚencoding_map)ÚselfÚinputÚerrors© r
   ú D:\Python\lib\encodings\cp861.pyÚencode   s    zCodec.encodec             C   s   t  ||t¡S )N)r   Úcharmap_decodeÚdecoding_table)r   r   r	   r
   r
   r   Údecode   s    zCodec.decodeN)r   )r   )Ú__name__Ú
__module__Ú__qualname__r   r   r
   r
   r
   r   r   	   s   
r   c               @   s   e Zd ZdddZdS )ÚIncrementalEncoderFc             C   s   t  || jt¡d S )Nr   )r   r   r	   r   )r   r   Úfinalr
   r
   r   r      s    zIncrementalEncoder.encodeN)F)r   r   r   r   r
   r
   r
   r   r      s   r   c               @   s   e Zd ZdddZdS )ÚIncrementalDecoderFc             C   s   t  || jt¡d S )Nr   )r   r   r	   r   )r   r   r   r
   r
   r   r      s    zIncrementalDecoder.decodeN)F)r   r   r   r   r
   r
   r
   r   r      s   r   c               @   s   e Zd ZdS )ÚStreamWriterN)r   r   r   r
   r
   r
   r   r      s   r   c               @   s   e Zd ZdS )ÚStreamReaderN)r   r   r   r
   r
   r
   r   r      s   r   c            	   C   s    t jdt jt jttttdS )NÚcp861)Únamer   r   ÚincrementalencoderÚincrementaldecoderÚstreamreaderÚstreamwriter)	r   Ú	CodecInfor   r   r   r   r   r   r   r
   r
   r
   r   Úgetregentry!   s    r   é   éÇ   éü   éé   éâ   éä   éà   éå   éç   éê   éë   éè   éÐ   éð   éÞ   éÄ   éÅ   éÉ   éæ   éÆ   éô   éö   éþ   éû   éÝ   éý   éÖ   éÜ   éø   é£   éØ   i§   i  éá   éí   éó   éú   éÁ   éÍ   éÓ   éÚ   é¿   i#  é¬   é½   é¼   é¡   é«   é»   i%  i%  i%  i%  i$%  ia%  ib%  iV%  iU%  ic%  iQ%  iW%  i]%  i\%  i[%  i%  i%  i4%  i,%  i%  i %  i<%  i^%  i_%  iZ%  iT%  ii%  if%  i`%  iP%  il%  ig%  ih%  id%  ie%  iY%  iX%  iR%  iS%  ik%  ij%  i%  i%  i%  i%  i%  i%  i%  i±  éß   i  iÀ  i£  iÃ  éµ   iÄ  i¦  i  i©  i´  i"  iÆ  iµ  i)"  ia"  é±   ie"  id"  i #  i!#  é÷   iH"  é°   i"  é·   i"  i   é²   i %  é    )é   é   é   é   é   é   é   é   é   é   é   é   é   é   é   é   é   é   é   é   é   é   é   é   é   é   é   é   é   é   é   é   rU   rK   é¢   r=   é¤   é¥   é¦   é§   é¨   é©   éª   rL   rH   é­   é®   é¯   rR   rP   rT   é³   é´   rO   é¶   rS   é¸   é¹   éº   rM   rJ   rI   é¾   rG   éÀ   rC   éÂ   éÃ   r/   r0   r3   r!   éÈ   r1   éÊ   éË   éÌ   rD   éÎ   éÏ   r,   éÑ   éÒ   rE   éÔ   éÕ   r:   é×   r>   éÙ   rF   éÛ   r;   r8   r.   rN   r&   r?   r$   éã   r%   r'   r2   r(   r+   r#   r)   r*   éì   r@   éî   éï   r-   éñ   éò   rA   r4   éõ   r5   rQ   r<   éù   rB   r7   r"   r9   r6   éÿ   u¾   	
 !"#$%&'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\]^_`abcdefghijklmnopqrstuvwxyz{|}~ÃÃ¼Ã©Ã¢Ã¤Ã Ã¥Ã§ÃªÃ«Ã¨ÃÃ°ÃÃÃÃÃ¦ÃÃ´Ã¶Ã¾Ã»ÃÃ½ÃÃÃ¸Â£Ãâ§ÆÃ¡Ã­Ã³ÃºÃÃÃÃÂ¿âÂ¬Â½Â¼Â¡Â«Â»âââââ¤â¡â¢âââ£ââââââââ´â¬âââ¼âââââ©â¦â ââ¬â§â¨â¤â¥âââââ«âªâââââââÎ±ÃÎÏÎ£ÏÂµÏÎ¦ÎÎ©Î´âÏÎµâ©â¡Â±â¥â¤â â¡Ã·âÂ°âÂ·ââ¿Â²â Â é   é   é   é   é   é   é   é   é	   é
   é   é   é   é   é   é   é   é   é   é   é   é   é   é   é   é   é   é   é   é   é   é    é!   é"   é#   é$   é%   é&   é'   é(   é)   é*   é+   é,   é-   é.   é/   é0   é1   é2   é3   é4   é5   é6   é7   é8   é9   é:   é;   é<   é=   é>   é?   é@   éA   éB   éC   éD   éE   éF   éG   éH   éI   éJ   éK   éL   éM   éN   éO   éP   éQ   éR   éS   éT   éU   éV   éW   éX   éY   éZ   é[   é\   é]   é^   é_   é`   éa   éb   éc   éd   ée   éf   ég   éh   éi   éj   ék   él   ém   én   éo   ép   éq   ér   és   ét   éu   év   éw   éx   éy   éz   é{   é|   é}   é~   é   r    r~   rr   r   r}   r   r   r{   rw   rd   re   rh   rV   rf   rx   ra   ry   ro   rs   rz   rp   rm   rc   r[   rY   rZ   r\   rg   r]   r`   rX   r^   r_   rb   rv   ri   rj   rq   rl   rW   rn   rk   ru   r   r   rt   r   r   r   r   r|   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   (   r   r¡   r¢   r£   r¤   r¥   r¦   r§   r¨   r©   rª   r«   r¬   r­   r®   r¯   r°   r±   r²   r³   r´   rµ   r¶   r·   r¸   r¹   rº   r»   r¼   r½   r¾   r¿   rÀ   rÁ   rÂ   rÃ   rÄ   rÅ   rÆ   rÇ   rÈ   rÉ   rÊ   rË   rÌ   rÍ   rÎ   rÏ   rÐ   rÑ   rÒ   rÓ   rÔ   rÕ   rÖ   r×   rØ   rÙ   rÚ   rÛ   rÜ   rÝ   rÞ   rß   rà   rá   râ   rã   rä   rå   ræ   rç   rè   ré   rê   rë   rì   rí   rî   rï   rð   rñ   rò   ró   rô   rõ   rö   r÷   rø   rù   rú   rû   rü   rý   rþ   rÿ   r   r  r  r  r  r  r  r  r  r	  r
  r  r  r  r  r  r  r  r  r  r  r  r  r  r  r  r  r  r  r  r  r  rU   rK   r=   rL   rH   rR   rP   rT   rO   rS   rM   rJ   rI   rG   rC   r/   r0   r3   r!   r1   rD   r,   rE   r:   r>   rF   r;   r8   r.   rN   r&   r?   r$   r%   r'   r2   r(   r+   r#   r)   r*   r@   r-   rA   r4   r5   rQ   r<   rB   r7   r"   r9   r6   i  i  i  i£  i¦  i©  i±  i´  iµ  iÀ  iÃ  iÄ  iÆ  i   i§   i"  i"  i"  i)"  iH"  ia"  id"  ie"  i#  i #  i!#  i %  i%  i%  i%  i%  i%  i%  i$%  i,%  i4%  i<%  iP%  iQ%  iR%  iS%  iT%  iU%  iV%  iW%  iX%  iY%  iZ%  i[%  i\%  i]%  i^%  i_%  i`%  ia%  ib%  ic%  id%  ie%  if%  ig%  ih%  ii%  ij%  ik%  il%  i%  i%  i%  i%  i%  i%  i%  i%  i %  )Ú__doc__r   r   r   r   r   r   r   Úmake_identity_dictÚrangeÚdecoding_mapÚupdater   r   r
   r
   r
   r   Ú<module>   s  
  ã              @   s  d Z ddlZG dd dejZG dd dejZG dd dejZG d	d
 d
eejZG dd deejZdd Ze e	d¡Z
e
 ddddddddddddddddd d!d"d#d$d%d&d'd(d)d*d+d,d-d.d/d0d1d2d3d4d5d6d7d8d9d:d;d<d=d>d?d@dAdBdCdDdEdFdGdHdIdJdKdLdMdNdOdPdQdRdSdTdUdVdWdXdYdZd[d\d]d^d_d`dadbdcdddedfdgdhdidjdkdldmdndodpdqdrdsdtdudvdwdxdydzd{d|d}d~dddddddddddddddddd¡ dZdddddddddddddddd d¡d¢d£d¤d¥d¦d§d¨d©dªd«d¬d­d®d¯d°d±d²d³d´dµd¶d·d¸d¹dºd»d¼d½d¾d¿dÀdÁdÂdÃdÄdÅdÆdÇdÈdÉdÊdËdÌdÍdÎdÏdÐdÑdÒdÓdÔdÕdÖd×dØdÙdÚdÛdÜdÝdÞdßdàdádâdãdädådædçdèdédêdëdìdídîdïdðdñdòdódôdõdöd÷dødùdúdûdüdýdþdÿd ddddddddd	d
dddddddddddddd6dd4ddd3ddd:d>dd-d0dd=dd+dd,d d!d"d#d$d%d&d'd(d)d*d+d1d,d-d.d/d0d1d2d3d4d5d6d7d8d9d:d;d<d=d>d?d@dAdBdCdDdEdFdGdHdIdJdKdLddMd2dNdOdPdQdRdSdTd8dUdVdWdXdYdZd[d\d7d]d^d_d`dd?dadbdcddd;d<dedfdgdvdhdid5djdkdldmdndodpdqdqdrdsdtduddddvdw ZdS (x  z` Python Character Mapping Codec generated from 'VENDORS/MICSFT/PC/CP862.TXT' with gencodec.py.

é    Nc               @   s    e Zd ZdddZdddZdS )	ÚCodecÚstrictc             C   s   t  ||t¡S )N)ÚcodecsÚcharmap_encodeÚencoding_map)ÚselfÚinputÚerrors© r
   ú D:\Python\lib\encodings\cp862.pyÚencode   s    zCodec.encodec             C   s   t  ||t¡S )N)r   Úcharmap_decodeÚdecoding_table)r   r   r	   r
   r
   r   Údecode   s    zCodec.decodeN)r   )r   )Ú__name__Ú
__module__Ú__qualname__r   r   r
   r
   r
   r   r   	   s   
r   c               @   s   e Zd ZdddZdS )ÚIncrementalEncoderFc             C   s   t  || jt¡d S )Nr   )r   r   r	   r   )r   r   Úfinalr
   r
   r   r      s    zIncrementalEncoder.encodeN)F)r   r   r   r   r
   r
   r
   r   r      s   r   c               @   s   e Zd ZdddZdS )ÚIncrementalDecoderFc             C   s   t  || jt¡d S )Nr   )r   r   r	   r   )r   r   r   r
   r
   r   r      s    zIncrementalDecoder.decodeN)F)r   r   r   r   r
   r
   r
   r   r      s   r   c               @   s   e Zd ZdS )ÚStreamWriterN)r   r   r   r
   r
   r
   r   r      s   r   c               @   s   e Zd ZdS )ÚStreamReaderN)r   r   r   r
   r
   r
   r   r      s   r   c            	   C   s    t jdt jt jttttdS )NÚcp862)Únamer   r   ÚincrementalencoderÚincrementaldecoderÚstreamreaderÚstreamwriter)	r   Ú	CodecInfor   r   r   r   r   r   r   r
   r
   r
   r   Úgetregentry!   s    r   é   iÐ  iÑ  iÒ  iÓ  iÔ  iÕ  iÖ  i×  iØ  iÙ  iÚ  iÛ  iÜ  iÝ  iÞ  iß  ià  iá  iâ  iã  iä  iå  iæ  iç  iè  ié  iê  é¢   é£   é¥   i§   i  éá   éí   éó   éú   éñ   éÑ   éª   éº   é¿   i#  é¬   é½   é¼   é¡   é«   é»   i%  i%  i%  i%  i$%  ia%  ib%  iV%  iU%  ic%  iQ%  iW%  i]%  i\%  i[%  i%  i%  i4%  i,%  i%  i %  i<%  i^%  i_%  iZ%  iT%  ii%  if%  i`%  iP%  il%  ig%  ih%  id%  ie%  iY%  iX%  iR%  iS%  ik%  ij%  i%  i%  i%  i%  i%  i%  i%  i±  éß   i  iÀ  i£  iÃ  éµ   iÄ  i¦  i  i©  i´  i"  iÆ  iµ  i)"  ia"  é±   ie"  id"  i #  i!#  é÷   iH"  é°   i"  é·   i"  i   é²   i %  é    )é   é   é   é   é   é   é   é   é   é   é   é   é   é   é   é   é   é   é   é   é   é   é   é   é   é   é   é   é   é   é   é   r:   r0   r!   r"   é¤   r#   é¦   é§   é¨   é©   r*   r1   r-   é­   é®   é¯   r7   r5   r9   é³   é´   r4   é¶   r8   é¸   é¹   r+   r2   r/   r.   é¾   r,   éÀ   éÁ   éÂ   éÃ   éÄ   éÅ   éÆ   éÇ   éÈ   éÉ   éÊ   éË   éÌ   éÍ   éÎ   éÏ   éÐ   r)   éÒ   éÓ   éÔ   éÕ   éÖ   é×   éØ   éÙ   éÚ   éÛ   éÜ   éÝ   éÞ   r3   éà   r$   éâ   éã   éä   éå   éæ   éç   éè   éé   éê   éë   éì   r%   éî   éï   éð   r(   éò   r&   éô   éõ   éö   r6   éø   éù   r'   éû   éü   éý   éþ   éÿ   u¾   	
 !"#$%&'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\]^_`abcdefghijklmnopqrstuvwxyz{|}~××××××××××××××××× ×¡×¢×£×¤×¥×¦×§×¨×©×ªÂ¢Â£Â¥â§ÆÃ¡Ã­Ã³ÃºÃ±ÃÂªÂºÂ¿âÂ¬Â½Â¼Â¡Â«Â»âââââ¤â¡â¢âââ£ââââââââ´â¬âââ¼âââââ©â¦â ââ¬â§â¨â¤â¥âââââ«âªâââââââÎ±ÃÎÏÎ£ÏÂµÏÎ¦ÎÎ©Î´âÏÎµâ©â¡Â±â¥â¤â â¡Ã·âÂ°âÂ·ââ¿Â²â Â é   é   é   é   é   é   é   é   é	   é
   é   é   é   é   é   é   é   é   é   é   é   é   é   é   é   é   é   é   é   é   é   é    é!   é"   é#   é$   é%   é&   é'   é(   é)   é*   é+   é,   é-   é.   é/   é0   é1   é2   é3   é4   é5   é6   é7   é8   é9   é:   é;   é<   é=   é>   é?   é@   éA   éB   éC   éD   éE   éF   éG   éH   éI   éJ   éK   éL   éM   éN   éO   éP   éQ   éR   éS   éT   éU   éV   éW   éX   éY   éZ   é[   é\   é]   é^   é_   é`   éa   éb   éc   éd   ée   éf   ég   éh   éi   éj   ék   él   ém   én   éo   ép   éq   ér   és   ét   éu   év   éw   éx   éy   éz   é{   é|   é}   é~   é   r    r`   rV   rW   rX   r\   ra   r   r   r   r]   rb   r^   r[   r   rZ   r   r   r   r   r   r   r   r   r   r   r   r;   r<   r=   r>   r?   r@   rA   rB   rC   rD   rE   rF   rG   rH   rI   rJ   rK   rL   rM   rN   rO   rP   rQ   rR   rS   rT   rU   r   rY   r   r   r   r   r   r   r_   r   r   rm   rc   r   ri   r   rl   rd   rk   rj   rn   rv   r}   r~   rr   rf   r|   r{   rq   rh   ro   rp   ru   re   rg   rz   rt   rx   ry   rs   r   r   rw   r   r   r   r   r   (   r   r¡   r¢   r£   r¤   r¥   r¦   r§   r¨   r©   rª   r«   r¬   r­   r®   r¯   r°   r±   r²   r³   r´   rµ   r¶   r·   r¸   r¹   rº   r»   r¼   r½   r¾   r¿   rÀ   rÁ   rÂ   rÃ   rÄ   rÅ   rÆ   rÇ   rÈ   rÉ   rÊ   rË   rÌ   rÍ   rÎ   rÏ   rÐ   rÑ   rÒ   rÓ   rÔ   rÕ   rÖ   r×   rØ   rÙ   rÚ   rÛ   rÜ   rÝ   rÞ   rß   rà   rá   râ   rã   rä   rå   ræ   rç   rè   ré   rê   rë   rì   rí   rî   rï   rð   rñ   rò   ró   rô   rõ   rö   r÷   rø   rù   rú   rû   rü   rý   rþ   rÿ   r   r  r  r  r  r  r  r  r  r	  r
  r  r  r  r  r  r  r  r  r  r  r  r  r  r  r  r  r  r  r  r  r  r:   r0   r!   r"   r#   r*   r1   r-   r7   r5   r9   r4   r8   r+   r2   r/   r.   r,   r)   r3   r$   r%   r(   r&   r6   r'   i  i  i  i£  i¦  i©  i±  i´  iµ  iÀ  iÃ  iÄ  iÆ  iÐ  iÑ  iÒ  iÓ  iÔ  iÕ  iÖ  i×  iØ  iÙ  iÚ  iÛ  iÜ  iÝ  iÞ  iß  ià  iá  iâ  iã  iä  iå  iæ  iç  iè  ié  iê  i   i§   i"  i"  i"  i)"  iH"  ia"  id"  ie"  i#  i #  i!#  i %  i%  i%  i%  i%  i%  i%  i$%  i,%  i4%  i<%  iP%  iQ%  iR%  iS%  iT%  iU%  iV%  iW%  iX%  iY%  iZ%  i[%  i\%  i]%  i^%  i_%  i`%  ia%  ib%  ic%  id%  ie%  if%  ig%  ih%  ii%  ij%  ik%  il%  i%  i%  i%  i%  i%  i%  i%  i%  i %  )Ú__doc__r   r   r   r   r   r   r   Úmake_identity_dictÚrangeÚdecoding_mapÚupdater   r   r
   r
   r
   r   Ú<module>   s  
  ã              @   sV  d Z ddlZG dd dejZG dd dejZG dd dejZG d	d
 d
eejZG dd deejZdd Ze e	d¡Z
e
 ddddddddddddddddd d!d"d#d$d%d&d'd(d)d*d+d,d-d.d/d0d1d2d3d4d5d6d7d8d9d:d;d<d=d>d?d@dAdBdCdDdEdFdGdHdIdJdKdLdMdNdOdPdQdRdSdTdUdVdWdXdYdZd[d\d]d^d_d`dadbdcdddedfdgdhdidjdkdldmdndodpdqdrdsdtdudvdwdxdydzd{d|d}d~dddddddddddddddddd¡ dZdddddddddddddddd d¡d¢d£d¤d¥d¦d§d¨d©dªd«d¬d­d®d¯d°d±d²d³d´dµd¶d·d¸d¹dºd»d¼d½d¾d¿dÀdÁdÂdÃdÄdÅdÆdÇdÈdÉdÊdËdÌdÍdÎdÏdÐdÑdÒdÓdÔdÕdÖd×dØdÙdÚdÛdÜdÝdÞdßdàdádâdãdädådædçdèdédêdëdìdídîdïdðdñdòdódôdõdöd÷dødùdúdûdüdýdþdÿd ddddddddd	d
ddddddddddddd(ddddddd0dddd3dd7d:d>dd d!d"d#d$d%d&d4d'd(d)d*d+d,d-d.d/d0d1d2d3d4d5d+d6d7d8d,d9d:d;ddd<dddddd=d>dd?d@dd'd&dAdddBd2dCdDd#dEdFd6dGdHdd-dId1ddJdKdLdMdNdOd d5dd?d)dPd!d=d;d<dQddRdvddSdTdUd$d%dVd"dWdXd8dqd*d.dYdZdddd[d\ ZdS (]  z` Python Character Mapping Codec generated from 'VENDORS/MICSFT/PC/CP863.TXT' with gencodec.py.

é    Nc               @   s    e Zd ZdddZdddZdS )	ÚCodecÚstrictc             C   s   t  ||t¡S )N)ÚcodecsÚcharmap_encodeÚencoding_map)ÚselfÚinputÚerrors© r
   ú D:\Python\lib\encodings\cp863.pyÚencode   s    zCodec.encodec             C   s   t  ||t¡S )N)r   Úcharmap_decodeÚdecoding_table)r   r   r	   r
   r
   r   Údecode   s    zCodec.decodeN)r   )r   )Ú__name__Ú
__module__Ú__qualname__r   r   r
   r
   r
   r   r   	   s   
r   c               @   s   e Zd ZdddZdS )ÚIncrementalEncoderFc             C   s   t  || jt¡d S )Nr   )r   r   r	   r   )r   r   Úfinalr
   r
   r   r      s    zIncrementalEncoder.encodeN)F)r   r   r   r   r
   r
   r
   r   r      s   r   c               @   s   e Zd ZdddZdS )ÚIncrementalDecoderFc             C   s   t  || jt¡d S )Nr   )r   r   r	   r   )r   r   r   r
   r
   r   r      s    zIncrementalDecoder.decodeN)F)r   r   r   r   r
   r
   r
   r   r      s   r   c               @   s   e Zd ZdS )ÚStreamWriterN)r   r   r   r
   r
   r
   r   r      s   r   c               @   s   e Zd ZdS )ÚStreamReaderN)r   r   r   r
   r
   r
   r   r      s   r   c            	   C   s    t jdt jt jttttdS )NÚcp863)Únamer   r   ÚincrementalencoderÚincrementaldecoderÚstreamreaderÚstreamwriter)	r   Ú	CodecInfor   r   r   r   r   r   r   r
   r
   r
   r   Úgetregentry!   s    r   é   éÇ   éü   éé   éâ   éÂ   éà   é¶   éç   éê   éë   éè   éï   éî   i   éÀ   é§   éÉ   éÈ   éÊ   éô   éË   éÏ   éû   éù   é¤   éÔ   éÜ   é¢   é£   éÙ   éÛ   i  é¦   é´   éó   éú   é¨   é¸   é³   é¯   éÎ   i#  é¬   é½   é¼   é¾   é«   é»   i%  i%  i%  i%  i$%  ia%  ib%  iV%  iU%  ic%  iQ%  iW%  i]%  i\%  i[%  i%  i%  i4%  i,%  i%  i %  i<%  i^%  i_%  iZ%  iT%  ii%  if%  i`%  iP%  il%  ig%  ih%  id%  ie%  iY%  iX%  iR%  iS%  ik%  ij%  i%  i%  i%  i%  i%  i%  i%  i±  éß   i  iÀ  i£  iÃ  éµ   iÄ  i¦  i  i©  i´  i"  iÆ  iµ  i)"  ia"  é±   ie"  id"  i #  i!#  é÷   iH"  é°   i"  é·   i"  i   é²   i %  é    )é   é   é   é   é   é   é   é   é   é   é   é   é   é   é   é   é   é   é   é   é   é   é   é   é   é   é   é   é   é   é   é   rU   é¡   r;   r<   r8   é¥   r?   r/   rC   é©   éª   rL   rH   é­   é®   rF   rR   rP   rT   rE   r@   rO   r'   rS   rD   é¹   éº   rM   rJ   rI   rK   é¿   r.   éÁ   r%   éÃ   éÄ   éÅ   éÆ   r!   r1   r0   r2   r4   éÌ   éÍ   rG   r5   éÐ   éÑ   éÒ   éÓ   r9   éÕ   éÖ   é×   éØ   r=   éÚ   r>   r:   éÝ   éÞ   rN   r&   éá   r$   éã   éä   éå   éæ   r(   r+   r#   r)   r*   éì   éí   r-   r,   éð   éñ   éò   rA   r3   éõ   éö   rQ   éø   r7   rB   r6   r"   éý   éþ   éÿ   u¾   	
 !"#$%&'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\]^_`abcdefghijklmnopqrstuvwxyz{|}~ÃÃ¼Ã©Ã¢ÃÃ Â¶Ã§ÃªÃ«Ã¨Ã¯Ã®âÃÂ§ÃÃÃÃ´ÃÃÃ»Ã¹Â¤ÃÃÂ¢Â£ÃÃÆÂ¦Â´Ã³ÃºÂ¨Â¸Â³Â¯ÃâÂ¬Â½Â¼Â¾Â«Â»âââââ¤â¡â¢âââ£ââââââââ´â¬âââ¼âââââ©â¦â ââ¬â§â¨â¤â¥âââââ«âªâââââââÎ±ÃÎÏÎ£ÏÂµÏÎ¦ÎÎ©Î´âÏÎµâ©â¡Â±â¥â¤â â¡Ã·âÂ°âÂ·ââ¿Â²â Â é   é   é   é   é   é   é   é   é	   é
   é   é   é   é   é   é   é   é   é   é   é   é   é   é   é   é   é   é   é   é   é   é    é!   é"   é#   é$   é%   é&   é'   é(   é)   é*   é+   é,   é-   é.   é/   é0   é1   é2   é3   é4   é5   é6   é7   é8   é9   é:   é;   é<   é=   é>   é?   é@   éA   éB   éC   éD   éE   éF   éG   éH   éI   éJ   éK   éL   éM   éN   éO   éP   éQ   éR   éS   éT   éU   éV   éW   éX   éY   éZ   é[   é\   é]   é^   é_   é`   éa   éb   éc   éd   ée   éf   ég   éh   éi   éj   ék   él   ém   én   éo   ép   éq   ér   és   ét   éu   év   éw   éx   éy   éz   é{   é|   é}   é~   é   r    rq   rr   rn   re   r{   ry   r   r   r   rv   r   r\   rw   rz   rd   rZ   rV   rg   rf   rh   rj   rk   ro   rs   rt   rp   r   r[   rY   r]   r`   rX   r^   r_   rb   ra   ri   r   rm   rl   rW   ru   r   r   r   r   rc   r   r   r   rx   r   r   r   r~   r   r   r   r   r}   r   r   r   r   r   r|   r   r   r   r   r   r   r   r   (   r   r¡   r¢   r£   r¤   r¥   r¦   r§   r¨   r©   rª   r«   r¬   r­   r®   r¯   r°   r±   r²   r³   r´   rµ   r¶   r·   r¸   r¹   rº   r»   r¼   r½   r¾   r¿   rÀ   rÁ   rÂ   rÃ   rÄ   rÅ   rÆ   rÇ   rÈ   rÉ   rÊ   rË   rÌ   rÍ   rÎ   rÏ   rÐ   rÑ   rÒ   rÓ   rÔ   rÕ   rÖ   r×   rØ   rÙ   rÚ   rÛ   rÜ   rÝ   rÞ   rß   rà   rá   râ   rã   rä   rå   ræ   rç   rè   ré   rê   rë   rì   rí   rî   rï   rð   rñ   rò   ró   rô   rõ   rö   r÷   rø   rù   rú   rû   rü   rý   rþ   rÿ   r   r  r  r  r  r  r  r  r  r	  r
  r  r  r  r  r  r  r  r  r  r  r  r  r  r  r  r  r  r  r  r  r  rU   r;   r<   r8   r?   r/   rC   rL   rH   rF   rR   rP   rT   rE   r@   rO   r'   rS   rD   rM   rJ   rI   rK   r.   r%   r!   r1   r0   r2   r4   rG   r5   r9   r=   r>   r:   rN   r&   r$   r(   r+   r#   r)   r*   r-   r,   rA   r3   rQ   r7   rB   r6   r"   i  i  i  i£  i¦  i©  i±  i´  iµ  iÀ  iÃ  iÄ  iÆ  i   i   i"  i"  i"  i)"  iH"  ia"  id"  ie"  i#  i #  i!#  i %  i%  i%  i%  i%  i%  i%  i$%  i,%  i4%  i<%  iP%  iQ%  iR%  iS%  iT%  iU%  iV%  iW%  iX%  iY%  iZ%  i[%  i\%  i]%  i^%  i_%  i`%  ia%  ib%  ic%  id%  ie%  if%  ig%  ih%  ii%  ij%  ik%  il%  i%  i%  i%  i%  i%  i%  i%  i%  i %  )Ú__doc__r   r   r   r   r   r   r   Úmake_identity_dictÚrangeÚdecoding_mapÚupdater   r   r
   r
   r
   r   Ú<module>   s  
  ã            û   @   sz  d Z ddlZG dd dejZG dd dejZG dd dejZG d	d
 d
eejZG dd deejZdd Ze e	d¡Z
e
 ddddddddddddddddd d!d"d#d$d%d&d'd(d)d*d+ddd,d-dd.d/d0ddd1d2d3d4d5d6d7d8d9d:d;d<d=d>d?d@dAdBdCdDdEdFdGdHdIdJdKdLdMdNdOdPdQdRdSdTdUdVdWdXdYdZd[d\d]d^d_d`dadbdcdddedfdgdhdidjdkdldmdndodpdqdrdsdtdudvdwdxdydzd{d|d}d~ddddddddddd~¡ dZdddddddddddddddddddddddd d¡d¢d£d¤d¥d¦d§d¨d©dªd«d¬d­d®d¯d°d±d²d³d´dµd¶d·d¸d¹dºd»d¼d½d¾d¿dÀdÁdÂdÃdÄdÅdÆdÇdÈdÉdÊdËdÌdÍdÎdÏdÐdÑdÒdÓdÔdÕdÖd×dØdÙdÚdÛdÜdÝdÞdßdàdádâdãdädådædçdèdédêdëdìdídîdïdðdñdòdódôdõdöd÷dødùdúdûdüdýdþdÿd ddddddddd	d
dddddddddddddddded)ddddd$dddd d!dd"d#d$d%d&d'd(d)d*d+d,d-d.d/d0d1d2d3d4d5d6d7d8dId9d:d;d<d=d>d?d@dAdBdCd(dDd.dEdFdGdHdIdJdKdLdMd&dNd%dOdPdQdRdSdgdTdUdVdWdXdYdZd[dfd\d]d^d_d`dadbdcdddedfdgdhdidjdkdldmdndodpdqdrdsdtdudvdwúZdS (x  z` Python Character Mapping Codec generated from 'VENDORS/MICSFT/PC/CP864.TXT' with gencodec.py.

é    Nc               @   s    e Zd ZdddZdddZdS )	ÚCodecÚstrictc             C   s   t  ||t¡S )N)ÚcodecsÚcharmap_encodeÚencoding_map)ÚselfÚinputÚerrors© r
   ú D:\Python\lib\encodings\cp864.pyÚencode   s    zCodec.encodec             C   s   t  ||t¡S )N)r   Úcharmap_decodeÚdecoding_table)r   r   r	   r
   r
   r   Údecode   s    zCodec.decodeN)r   )r   )Ú__name__Ú
__module__Ú__qualname__r   r   r
   r
   r
   r   r   	   s   
r   c               @   s   e Zd ZdddZdS )ÚIncrementalEncoderFc             C   s   t  || jt¡d S )Nr   )r   r   r	   r   )r   r   Úfinalr
   r
   r   r      s    zIncrementalEncoder.encodeN)F)r   r   r   r   r
   r
   r
   r   r      s   r   c               @   s   e Zd ZdddZdS )ÚIncrementalDecoderFc             C   s   t  || jt¡d S )Nr   )r   r   r	   r   )r   r   r   r
   r
   r   r      s    zIncrementalDecoder.decodeN)F)r   r   r   r   r
   r
   r
   r   r      s   r   c               @   s   e Zd ZdS )ÚStreamWriterN)r   r   r   r
   r
   r
   r   r      s   r   c               @   s   e Zd ZdS )ÚStreamReaderN)r   r   r   r
   r
   r
   r   r      s   r   c            	   C   s    t jdt jt jttttdS )NÚcp864)Únamer   r   ÚincrementalencoderÚincrementaldecoderÚstreamreaderÚstreamwriter)	r   Ú	CodecInfor   r   r   r   r   r   r   r
   r
   r
   r   Úgetregentry!   s    r   é   ij  é°   é·   i"  i"  i%  i %  i%  i<%  i$%  i,%  i%  i4%  i%  i%  i%  i%  i²  i"  iÆ  é±   é½   é¼   iH"  é«   é»   i÷þ  iøþ  iûþ  iüþ  é­   iþ  iþ  iþ  iþ  iþ  iþ  i  iþ  i¡þ  i¥þ  i`  ia  ib  ic  id  ie  if  ig  ih  ii  iÑþ  i  i±þ  iµþ  i¹þ  i  é¢   iþ  iþ  iþ  iþ  iÊþ  iþ  iþ  iþ  iþ  iþ  iþ  iþ  i£þ  i§þ  i©þ  i«þ  i­þ  i¯þ  i³þ  i·þ  i»þ  i¿þ  iÁþ  iÅþ  iËþ  iÏþ  é¦   é¬   é÷   é×   iÉþ  i@  iÓþ  i×þ  iÛþ  ißþ  iãþ  içþ  iëþ  iíþ  iïþ  ióþ  i½þ  iÌþ  iÎþ  iÍþ  iáþ  i}þ  iQ  iåþ  iéþ  iìþ  iðþ  iòþ  iÐþ  iÕþ  iõþ  iöþ  iÝþ  iÙþ  iñþ  i %  )~é%   é   é   é   é   é   é   é   é   é   é   é   é   é   é   é   é   é   é   é   é   é   é   é   é   é   é   é   é   é   é   é   é   é¡   r)   é¥   r*   é§   é¨   é©   éª   r&   r+   r(   é®   é¯   r!   r#   é²   é³   é´   éµ   é¶   r"   é¸   é¹   éº   r'   r%   r$   é¾   é¿   éÀ   éÁ   éÂ   éÃ   éÄ   éÅ   éÆ   éÇ   éÈ   éÉ   éÊ   éË   éÌ   éÍ   éÎ   éÏ   éÐ   éÑ   éÒ   éÓ   éÔ   éÕ   éÖ   r-   éØ   éÙ   éÚ   éÛ   éÜ   éÝ   éÞ   éß   éà   éá   éâ   éã   éä   éå   éæ   éç   éè   éé   éê   éë   éì   éí   éî   éï   éð   éñ   éò   éó   éô   éõ   éö   r,   éø   éù   éú   éû   éü   éý   éþ   éÿ   uà   	
 !"#$Ùª&'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\]^_`abcdefghijklmnopqrstuvwxyz{|}~Â°Â·ââââââ¼â¤â¬ââ´ââââÎ²âÏÂ±Â½Â¼âÂ«Â»ï»·ï»¸ï¿¾ï¿¾ï»»ï»¼ï¿¾Â Â­ïºÂ£Â¤ïºï¿¾ï¿¾ïºïºïºïºØïºïº¡ïº¥Ù Ù¡Ù¢Ù£Ù¤Ù¥Ù¦Ù§Ù¨Ù©ï»Øïº±ïºµïº¹ØÂ¢ïºïºïºïºï»ïºïºïºïºïºïºïºïº£ïº§ïº©ïº«ïº­ïº¯ïº³ïº·ïº»ïº¿ï»ï»ï»ï»Â¦Â¬Ã·Ãï»Ùï»ï»ï»ï»ï»£ï»§ï»«ï»­ï»¯ï»³ïº½ï»ï»ï»ï»¡ï¹½Ùï»¥ï»©ï»¬ï»°ï»²ï»ï»ï»µï»¶ï»ï»ï»±â ï¿¾é   é   é   é   é   é   é   é   é	   é
   é   é   é   é   é   é   é   é   é   é   é   é   é   é   é   é   é   é   é   é   é   é    é!   é"   é#   é$   é&   é'   é(   é)   é*   é+   é,   é-   é.   é/   é0   é1   é2   é3   é4   é5   é6   é7   é8   é9   é:   é;   é<   é=   é>   é?   é@   éA   éB   éC   éD   éE   éF   éG   éH   éI   éJ   éK   éL   éM   éN   éO   éP   éQ   éR   éS   éT   éU   éV   éW   éX   éY   éZ   é[   é\   é]   é^   é_   é`   éa   éb   éc   éd   ée   éf   ég   éh   éi   éj   ék   él   ém   én   éo   ép   éq   ér   és   ét   éu   év   éw   éx   éy   éz   é{   é|   é}   é~   é   é    ra   é£   é¤   r{   rF   r|   rO   r/   rB   r0   rG   rD   rC   r~   r}   r?   rA   r`   r   r   rW   rX   rY   rZ   r[   r\   r]   r.   r1   r2   r@   rE   r4   r5   r<   r;   r=   r>   r9   r7   r8   r:   r6   r3   r   r   rb   rc   rd   rP   re   rg   rh   rR   rS   ri   rj   rT   rk   rl   rm   rU   rn   rV   ro   rp   rq   rr   rs   rt   ru   r_   rv   r   rw   rx   r   rf   ry   r   r   r   rz   r^   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   rH   rI   rL   rM   )úr   r   r    r¡   r¢   r£   r¤   r¥   r¦   r§   r¨   r©   rª   r«   r¬   r­   r®   r¯   r°   r±   r²   r³   r´   rµ   r¶   r·   r¸   r¹   rº   r»   r¼   r½   r¾   r¿   rÀ   rÁ   rÂ   rÃ   rÄ   rÅ   rÆ   rÇ   rÈ   rÉ   rÊ   rË   rÌ   rÍ   rÎ   rÏ   rÐ   rÑ   rÒ   rÓ   rÔ   rÕ   rÖ   r×   rØ   rÙ   rÚ   rÛ   rÜ   rÝ   rÞ   rß   rà   rá   râ   rã   rä   rå   ræ   rç   rè   ré   rê   rë   rì   rí   rî   rï   rð   rñ   rò   ró   rô   rõ   rö   r÷   rø   rù   rú   rû   rü   rý   rþ   rÿ   r   r  r  r  r  r  r  r  r  r	  r
  r  r  r  r  r  r  r  r  r  r  r  r  r  r  r  r  r  r  r  r)   r  r  r*   r&   r+   r(   r!   r#   r"   r'   r%   r$   r-   r,   i²  iÆ  i  i  i  i@  iQ  i`  ia  ib  ic  id  ie  if  ig  ih  ii  ij  i"  i"  i"  iH"  i %  i%  i%  i%  i%  i%  i%  i$%  i,%  i4%  i<%  i%  i %  i}þ  iþ  iþ  iþ  iþ  iþ  iþ  iþ  iþ  iþ  iþ  iþ  iþ  iþ  iþ  iþ  iþ  iþ  iþ  i¡þ  i£þ  i¥þ  i§þ  i©þ  i«þ  i­þ  i¯þ  i±þ  i³þ  iµþ  i·þ  i¹þ  i»þ  i½þ  i¿þ  iÁþ  iÅþ  iÉþ  iÊþ  iËþ  iÌþ  iÍþ  iÎþ  iÏþ  iÐþ  iÑþ  iÓþ  iÕþ  i×þ  iÙþ  iÛþ  iÝþ  ißþ  iáþ  iãþ  iåþ  içþ  iéþ  iëþ  iìþ  iíþ  iïþ  iðþ  iñþ  iòþ  ióþ  iõþ  iöþ  i÷þ  iøþ  iûþ  iüþ  )Ú__doc__r   r   r   r   r   r   r   Úmake_identity_dictÚrangeÚdecoding_mapÚupdater   r   r
   r
   r
   r   Ú<module>   s  
  ã              @   sV  d Z ddlZG dd dejZG dd dejZG dd dejZG d	d
 d
eejZG dd deejZdd Ze e	d¡Z
e
 ddddddddddddddddd d!d"d#d$d%d&d'd(d)d*d+d,d-d.d/d0d1d2d3d4d5d6d7d8d9d:d;d<d=d>d?d@dAdBdCdDdEdFdGdHdIdJdKdLdMdNdOdPdQdRdSdTdUdVdWdXdYdZd[d\d]d^d_d`dadbdcdddedfdgdhdidjdkdldmdndodpdqdrdsdtdudvdwdxdydzd{d|d}d~dddddddddddddddddd¡ dZdddddddddddddddd d¡d¢d£d¤d¥d¦d§d¨d©dªd«d¬d­d®d¯d°d±d²d³d´dµd¶d·d¸d¹dºd»d¼d½d¾d¿dÀdÁdÂdÃdÄdÅdÆdÇdÈdÉdÊdËdÌdÍdÎdÏdÐdÑdÒdÓdÔdÕdÖd×dØdÙdÚdÛdÜdÝdÞdßdàdádâdãdädådædçdèdédêdëdìdídîdïdðdñdòdódôdõdöd÷dødùdúdûdüdýdþdÿd ddddddddd	d
ddddddd(dddddd6d+d4dd!d3dd:d>ddddddddd d!d0d"dd#d$d%d&d'd(d)d*d+d,d=d-d.d?d/d0d1d2d$d3d4d,d5d6d7d8ddddddddd9ddd1dd:d'd&dddd;d2d%d<d#d=dd>d?d8d@dAdBdCdDdEddFd7dGd)d dHddIdJdKdLdMd;d<d"ddNdvdOdPd5dQdRdSdTdUd-dVdWdqd*dXdYdZdddd[d\ ZdS (]  z` Python Character Mapping Codec generated from 'VENDORS/MICSFT/PC/CP865.TXT' with gencodec.py.

é    Nc               @   s    e Zd ZdddZdddZdS )	ÚCodecÚstrictc             C   s   t  ||t¡S )N)ÚcodecsÚcharmap_encodeÚencoding_map)ÚselfÚinputÚerrors© r
   ú D:\Python\lib\encodings\cp865.pyÚencode   s    zCodec.encodec             C   s   t  ||t¡S )N)r   Úcharmap_decodeÚdecoding_table)r   r   r	   r
   r
   r   Údecode   s    zCodec.decodeN)r   )r   )Ú__name__Ú
__module__Ú__qualname__r   r   r
   r
   r
   r   r   	   s   
r   c               @   s   e Zd ZdddZdS )ÚIncrementalEncoderFc             C   s   t  || jt¡d S )Nr   )r   r   r	   r   )r   r   Úfinalr
   r
   r   r      s    zIncrementalEncoder.encodeN)F)r   r   r   r   r
   r
   r
   r   r      s   r   c               @   s   e Zd ZdddZdS )ÚIncrementalDecoderFc             C   s   t  || jt¡d S )Nr   )r   r   r	   r   )r   r   r   r
   r
   r   r      s    zIncrementalDecoder.decodeN)F)r   r   r   r   r
   r
   r
   r   r      s   r   c               @   s   e Zd ZdS )ÚStreamWriterN)r   r   r   r
   r
   r
   r   r      s   r   c               @   s   e Zd ZdS )ÚStreamReaderN)r   r   r   r
   r
   r
   r   r      s   r   c            	   C   s    t jdt jt jttttdS )NÚcp865)Únamer   r   ÚincrementalencoderÚincrementaldecoderÚstreamreaderÚstreamwriter)	r   Ú	CodecInfor   r   r   r   r   r   r   r
   r
   r
   r   Úgetregentry!   s    r   é   éÇ   éü   éé   éâ   éä   éà   éå   éç   éê   éë   éè   éï   éî   éì   éÄ   éÅ   éÉ   éæ   éÆ   éô   éö   éò   éû   éù   éÿ   éÖ   éÜ   éø   é£   éØ   i§   i  éá   éí   éó   éú   éñ   éÑ   éª   éº   é¿   i#  é¬   é½   é¼   é¡   é«   é¤   i%  i%  i%  i%  i$%  ia%  ib%  iV%  iU%  ic%  iQ%  iW%  i]%  i\%  i[%  i%  i%  i4%  i,%  i%  i %  i<%  i^%  i_%  iZ%  iT%  ii%  if%  i`%  iP%  il%  ig%  ih%  id%  ie%  iY%  iX%  iR%  iS%  ik%  ij%  i%  i%  i%  i%  i%  i%  i%  i±  éß   i  iÀ  i£  iÃ  éµ   iÄ  i¦  i  i©  i´  i"  iÆ  iµ  i)"  ia"  é±   ie"  id"  i #  i!#  é÷   iH"  é°   i"  é·   i"  i   é²   i %  é    )é   é   é   é   é   é   é   é   é   é   é   é   é   é   é   é   é   é   é   é   é   é   é   é   é   é   é   é   é   é   é   é   rU   rK   é¢   r=   rM   é¥   é¦   é§   é¨   é©   rE   rL   rH   é­   é®   é¯   rR   rP   rT   é³   é´   rO   é¶   rS   é¸   é¹   rF   é»   rJ   rI   é¾   rG   éÀ   éÁ   éÂ   éÃ   r/   r0   r3   r!   éÈ   r1   éÊ   éË   éÌ   éÍ   éÎ   éÏ   éÐ   rD   éÒ   éÓ   éÔ   éÕ   r:   é×   r>   éÙ   éÚ   éÛ   r;   éÝ   éÞ   rN   r&   r?   r$   éã   r%   r'   r2   r(   r+   r#   r)   r*   r.   r@   r-   r,   éð   rC   r6   rA   r4   éõ   r5   rQ   r<   r8   rB   r7   r"   éý   éþ   r9   u¾   	
 !"#$%&'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\]^_`abcdefghijklmnopqrstuvwxyz{|}~ÃÃ¼Ã©Ã¢Ã¤Ã Ã¥Ã§ÃªÃ«Ã¨Ã¯Ã®Ã¬ÃÃÃÃ¦ÃÃ´Ã¶Ã²Ã»Ã¹Ã¿ÃÃÃ¸Â£Ãâ§ÆÃ¡Ã­Ã³ÃºÃ±ÃÂªÂºÂ¿âÂ¬Â½Â¼Â¡Â«Â¤âââââ¤â¡â¢âââ£ââââââââ´â¬âââ¼âââââ©â¦â ââ¬â§â¨â¤â¥âââââ«âªâââââââÎ±ÃÎÏÎ£ÏÂµÏÎ¦ÎÎ©Î´âÏÎµâ©â¡Â±â¥â¤â â¡Ã·âÂ°âÂ·ââ¿Â²â Â é   é   é   é   é   é   é   é   é	   é
   é   é   é   é   é   é   é   é   é   é   é   é   é   é   é   é   é   é   é   é   é   é    é!   é"   é#   é$   é%   é&   é'   é(   é)   é*   é+   é,   é-   é.   é/   é0   é1   é2   é3   é4   é5   é6   é7   é8   é9   é:   é;   é<   é=   é>   é?   é@   éA   éB   éC   éD   éE   éF   éG   éH   éI   éJ   éK   éL   éM   éN   éO   éP   éQ   éR   éS   éT   éU   éV   éW   éX   éY   éZ   é[   é\   é]   é^   é_   é`   éa   éb   éc   éd   ée   éf   ég   éh   éi   éj   ék   él   ém   én   éo   ép   éq   ér   és   ét   éu   év   éw   éx   éy   éz   é{   é|   é}   é~   é   r|   rr   r~   rx   r}   r   ry   rz   rd   re   rh   rV   rf   rw   ro   rs   rp   r[   rY   rZ   r\   rg   r]   r`   rX   r^   r_   rc   rb   ra   rk   rv   ri   rj   rq   rm   rl   rW   rn   ru   r   rt   r   r{   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r    (   r   r¡   r¢   r£   r¤   r¥   r¦   r§   r¨   r©   rª   r«   r¬   r­   r®   r¯   r°   r±   r²   r³   r´   rµ   r¶   r·   r¸   r¹   rº   r»   r¼   r½   r¾   r¿   rÀ   rÁ   rÂ   rÃ   rÄ   rÅ   rÆ   rÇ   rÈ   rÉ   rÊ   rË   rÌ   rÍ   rÎ   rÏ   rÐ   rÑ   rÒ   rÓ   rÔ   rÕ   rÖ   r×   rØ   rÙ   rÚ   rÛ   rÜ   rÝ   rÞ   rß   rà   rá   râ   rã   rä   rå   ræ   rç   rè   ré   rê   rë   rì   rí   rî   rï   rð   rñ   rò   ró   rô   rõ   rö   r÷   rø   rù   rú   rû   rü   rý   rþ   rÿ   r   r  r  r  r  r  r  r  r  r	  r
  r  r  r  r  r  r  r  r  r  r  r  r  r  r  r  r  r  r  r  r  r  rU   rK   r=   rM   rE   rL   rH   rR   rP   rT   rO   rS   rF   rJ   rI   rG   r/   r0   r3   r!   r1   rD   r:   r>   r;   rN   r&   r?   r$   r%   r'   r2   r(   r+   r#   r)   r*   r.   r@   r-   r,   rC   r6   rA   r4   r5   rQ   r<   r8   rB   r7   r"   r9   i  i  i  i£  i¦  i©  i±  i´  iµ  iÀ  iÃ  iÄ  iÆ  i   i§   i"  i"  i"  i)"  iH"  ia"  id"  ie"  i#  i #  i!#  i %  i%  i%  i%  i%  i%  i%  i$%  i,%  i4%  i<%  iP%  iQ%  iR%  iS%  iT%  iU%  iV%  iW%  iX%  iY%  iZ%  i[%  i\%  i]%  i^%  i_%  i`%  ia%  ib%  ic%  id%  ie%  if%  ig%  ih%  ii%  ij%  ik%  il%  i%  i%  i%  i%  i%  i%  i%  i%  i %  )Ú__doc__r   r   r   r   r   r   r   Úmake_identity_dictÚrangeÚdecoding_mapÚupdater   r   r
   r
   r
   r   Ú<module>   s  
  ã              @   s¸  d Z ddlZG dd dejZG dd dejZG dd dejZG d	d
 d
eejZG dd deejZdd Ze e	d¡Z
e
 ddddddddddddddddd d!d"d#d$d%d&d'd(d)d*d+d,d-d.d/d0d1d2d3d4d5d6d7d8d9d:d;d<d=d>d?d@dAdBdCdDdEdFdGdHdIdJdKdLdMdNdOdPdQdRdSdTdUdVdWdXdYdZd[d\d]d^d_d`dadbdcdddedfdgdhdidjdkdldmdndodpdqdrdsdtdudvdwdxdydzd{d|d}d~dddddddddddddddddd¡ dZdddddddddddddddd d¡d¢d£d¤d¥d¦d§d¨d©dªd«d¬d­d®d¯d°d±d²d³d´dµd¶d·d¸d¹dºd»d¼d½d¾d¿dÀdÁdÂdÃdÄdÅdÆdÇdÈdÉdÊdËdÌdÍdÎdÏdÐdÑdÒdÓdÔdÕdÖd×dØdÙdÚdÛdÜdÝdÞdßdàdádâdãdädådædçdèdédêdëdìdídîdïdðdñdòdódôdõdöd÷dødùdúdûdüdýdþdÿd ddddddddd	d
dddddddddddddddddddddd d!d"d#d$d%d&d'd(d)d*d+d,d-d.d/d0d1d2d3d4d5d6d7d8dd9d:d;dd<d=d>d?d@dAdBdCdDdEdFdGdHdIdJdKdLdMdNdOdPdQdRdSdTdUdVdWdXdYdZd[d\d]d^d_d`dadbdcdddedfdgdhdidjdkdldmdnddodpdqdrdsdtdudvdwdxdydzd{d|d}d~dddddddddddddddd ZdS (  z` Python Character Mapping Codec generated from 'VENDORS/MICSFT/PC/CP866.TXT' with gencodec.py.

é    Nc               @   s    e Zd ZdddZdddZdS )	ÚCodecÚstrictc             C   s   t  ||t¡S )N)ÚcodecsÚcharmap_encodeÚencoding_map)ÚselfÚinputÚerrors© r
   ú D:\Python\lib\encodings\cp866.pyÚencode   s    zCodec.encodec             C   s   t  ||t¡S )N)r   Úcharmap_decodeÚdecoding_table)r   r   r	   r
   r
   r   Údecode   s    zCodec.decodeN)r   )r   )Ú__name__Ú
__module__Ú__qualname__r   r   r
   r
   r
   r   r   	   s   
r   c               @   s   e Zd ZdddZdS )ÚIncrementalEncoderFc             C   s   t  || jt¡d S )Nr   )r   r   r	   r   )r   r   Úfinalr
   r
   r   r      s    zIncrementalEncoder.encodeN)F)r   r   r   r   r
   r
   r
   r   r      s   r   c               @   s   e Zd ZdddZdS )ÚIncrementalDecoderFc             C   s   t  || jt¡d S )Nr   )r   r   r	   r   )r   r   r   r
   r
   r   r      s    zIncrementalDecoder.decodeN)F)r   r   r   r   r
   r
   r
   r   r      s   r   c               @   s   e Zd ZdS )ÚStreamWriterN)r   r   r   r
   r
   r
   r   r      s   r   c               @   s   e Zd ZdS )ÚStreamReaderN)r   r   r   r
   r
   r
   r   r      s   r   c            	   C   s    t jdt jt jttttdS )NÚcp866)Únamer   r   ÚincrementalencoderÚincrementaldecoderÚstreamreaderÚstreamwriter)	r   Ú	CodecInfor   r   r   r   r   r   r   r
   r
   r
   r   Úgetregentry!   s    r   é   i  i  i  i  i  i  i  i  i  i  i  i  i  i  i  i  i   i!  i"  i#  i$  i%  i&  i'  i(  i)  i*  i+  i,  i-  i.  i/  i0  i1  i2  i3  i4  i5  i6  i7  i8  i9  i:  i;  i<  i=  i>  i?  i%  i%  i%  i%  i$%  ia%  ib%  iV%  iU%  ic%  iQ%  iW%  i]%  i\%  i[%  i%  i%  i4%  i,%  i%  i %  i<%  i^%  i_%  iZ%  iT%  ii%  if%  i`%  iP%  il%  ig%  ih%  id%  ie%  iY%  iX%  iR%  iS%  ik%  ij%  i%  i%  i%  i%  i%  i%  i%  i@  iA  iB  iC  iD  iE  iF  iG  iH  iI  iJ  iK  iL  iM  iN  iO  i  iQ  i  iT  i  iW  i  i^  é°   i"  é·   i"  i!  é¤   i %  é    )é   é   é   é   é   é   é   é   é   é   é   é   é   é   é   é   é   é   é   é   é   é   é   é   é   é   é   é   é   é   é   é   r$   é¡   é¢   é£   r#   é¥   é¦   é§   é¨   é©   éª   é«   é¬   é­   é®   é¯   r!   é±   é²   é³   é´   éµ   é¶   r"   é¸   é¹   éº   é»   é¼   é½   é¾   é¿   éÀ   éÁ   éÂ   éÃ   éÄ   éÅ   éÆ   éÇ   éÈ   éÉ   éÊ   éË   éÌ   éÍ   éÎ   éÏ   éÐ   éÑ   éÒ   éÓ   éÔ   éÕ   éÖ   é×   éØ   éÙ   éÚ   éÛ   éÜ   éÝ   éÞ   éß   éà   éá   éâ   éã   éä   éå   éæ   éç   éè   éé   éê   éë   éì   éí   éî   éï   éð   éñ   éò   éó   éô   éõ   éö   é÷   éø   éù   éú   éû   éü   éý   éþ   éÿ   u´   	
 !"#$%&'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\]^_`abcdefghijklmnopqrstuvwxyz{|}~ÐÐÐÐÐÐÐÐÐÐÐÐÐÐÐÐÐ Ð¡Ð¢Ð£Ð¤Ð¥Ð¦Ð§Ð¨Ð©ÐªÐ«Ð¬Ð­Ð®Ð¯Ð°Ð±Ð²Ð³Ð´ÐµÐ¶Ð·Ð¸Ð¹ÐºÐ»Ð¼Ð½Ð¾Ð¿âââââ¤â¡â¢âââ£ââââââââ´â¬âââ¼âââââ©â¦â ââ¬â§â¨â¤â¥âââââ«âªâââââââÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÐÑÐÑÐÑÐÑÂ°âÂ·ââÂ¤â Â é   é   é   é   é   é   é   é   é	   é
   é   é   é   é   é   é   é   é   é   é   é   é   é   é   é   é   é   é   é   é   é   é    é!   é"   é#   é$   é%   é&   é'   é(   é)   é*   é+   é,   é-   é.   é/   é0   é1   é2   é3   é4   é5   é6   é7   é8   é9   é:   é;   é<   é=   é>   é?   é@   éA   éB   éC   éD   éE   éF   éG   éH   éI   éJ   éK   éL   éM   éN   éO   éP   éQ   éR   éS   éT   éU   éV   éW   éX   éY   éZ   é[   é\   é]   é^   é_   é`   éa   éb   éc   éd   ée   éf   ég   éh   éi   éj   ék   él   ém   én   éo   ép   éq   ér   és   ét   éu   év   éw   éx   éy   éz   é{   é|   é}   é~   é   r    r   r   r   r   r   r   r   r%   r&   r'   r(   r)   r*   r+   r,   r-   r.   r/   r0   r1   r2   r3   r4   r5   r6   r7   r8   r9   r:   r;   r<   r=   r>   r?   r@   rA   rB   rC   rD   rE   rF   rG   rH   rI   rJ   rK   rL   rM   rN   rO   rP   rQ   rR   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   re   rU   r{   r`   ra   rz   rd   rV   rc   rb   rf   rn   r[   rv   rw   rj   rY   r\   ru   rt   ri   r_   r^   r]   rg   rh   rm   rW   rX   rZ   rr   rs   rl   rp   rq   rk   ry   rx   ro   r   r}   r|   r~   r   rS   rT   r   (   r   r¡   r¢   r£   r¤   r¥   r¦   r§   r¨   r©   rª   r«   r¬   r­   r®   r¯   r°   r±   r²   r³   r´   rµ   r¶   r·   r¸   r¹   rº   r»   r¼   r½   r¾   r¿   rÀ   rÁ   rÂ   rÃ   rÄ   rÅ   rÆ   rÇ   rÈ   rÉ   rÊ   rË   rÌ   rÍ   rÎ   rÏ   rÐ   rÑ   rÒ   rÓ   rÔ   rÕ   rÖ   r×   rØ   rÙ   rÚ   rÛ   rÜ   rÝ   rÞ   rß   rà   rá   râ   rã   rä   rå   ræ   rç   rè   ré   rê   rë   rì   rí   rî   rï   rð   rñ   rò   ró   rô   rõ   rö   r÷   rø   rù   rú   rû   rü   rý   rþ   rÿ   r   r  r  r  r  r  r  r  r  r	  r
  r  r  r  r  r  r  r  r  r  r  r  r  r  r  r  r  r  r  r  r  r  r$   r#   r!   r"   i  i  i  i  i  i  i  i  i  i  i  i  i  i  i  i  i  i  i  i  i   i!  i"  i#  i$  i%  i&  i'  i(  i)  i*  i+  i,  i-  i.  i/  i0  i1  i2  i3  i4  i5  i6  i7  i8  i9  i:  i;  i<  i=  i>  i?  i@  iA  iB  iC  iD  iE  iF  iG  iH  iI  iJ  iK  iL  iM  iN  iO  iQ  iT  iW  i^  i!  i"  i"  i %  i%  i%  i%  i%  i%  i%  i$%  i,%  i4%  i<%  iP%  iQ%  iR%  iS%  iT%  iU%  iV%  iW%  iX%  iY%  iZ%  i[%  i\%  i]%  i^%  i_%  i`%  ia%  ib%  ic%  id%  ie%  if%  ig%  ih%  ii%  ij%  ik%  il%  i%  i%  i%  i%  i%  i%  i%  i%  i %  )Ú__doc__r   r   r   r   r   r   r   Úmake_identity_dictÚrangeÚdecoding_mapÚupdater   r   r
   r
   r
   r   Ú<module>   s  
  ã            ø   @   sh  d Z ddlZG dd dejZG dd dejZG dd dejZG d	d
 d
eejZG dd deejZdd Ze e	d¡Z
e
 dddddddddddddddddddddddddd d!d"d#d$d%d&d'd(d)d*d+d,d-d.d/d0d1d2d3d4d5d6d7d8d9d:d;d<d=d>d?d@dAdBdCdDdEdFdGdHdIdJdKdLdMdNdOdPdQdRdSdTdUdVdWdXdYdZd[d\d]d^d_d`dadbdcdddedfdgdhdidjdkdldmdndodpdqdrdsdtdudvdwdxdydzd{d|d}d~ddddddddd¡ dZddddddddddddddddddddddddd d¡d¢d£d¤d¥d¦d§d¨d©dªd«d¬d­d®d¯d°d±d²d³d´dµd¶d·d¸d¹dºd»d¼d½d¾d¿dÀdÁdÂdÃdÄdÅdÆdÇdÈdÉdÊdËdÌdÍdÎdÏdÐdÑdÒdÓdÔdÕdÖd×dØdÙdÚdÛdÜdÝdÞdßdàdádâdãdädådædçdèdédêdëdìdídîdïdðdñdòdódôdõdöd÷dødùdúdûdüdýdþdÿd ddddddddd	d
ddddddddddddd5dddddddddd d!d"dd|ddd#ddwd$d%dd&d2d'd(d)d*d+d,d-d.d/d0d1d2d3d4d5d6d7d8d9d:d;d<d=d>d?d@dAdBdCdDdEdFdGdHdIdJdKdLdMdNdOdPddQdRd#dSdTdUdVdWd!dXdYdZd[d\d]d^d_d`dadbdcd6dddedfdgdhdidjdkdldmddxd dndo÷ZdS (p  z` Python Character Mapping Codec generated from 'VENDORS/MICSFT/PC/CP869.TXT' with gencodec.py.

é    Nc               @   s    e Zd ZdddZdddZdS )	ÚCodecÚstrictc             C   s   t  ||t¡S )N)ÚcodecsÚcharmap_encodeÚencoding_map)ÚselfÚinputÚerrors© r
   ú D:\Python\lib\encodings\cp869.pyÚencode   s    zCodec.encodec             C   s   t  ||t¡S )N)r   Úcharmap_decodeÚdecoding_table)r   r   r	   r
   r
   r   Údecode   s    zCodec.decodeN)r   )r   )Ú__name__Ú
__module__Ú__qualname__r   r   r
   r
   r
   r   r   	   s   
r   c               @   s   e Zd ZdddZdS )ÚIncrementalEncoderFc             C   s   t  || jt¡d S )Nr   )r   r   r	   r   )r   r   Úfinalr
   r
   r   r      s    zIncrementalEncoder.encodeN)F)r   r   r   r   r
   r
   r
   r   r      s   r   c               @   s   e Zd ZdddZdS )ÚIncrementalDecoderFc             C   s   t  || jt¡d S )Nr   )r   r   r	   r   )r   r   r   r
   r
   r   r      s    zIncrementalDecoder.decodeN)F)r   r   r   r   r
   r
   r
   r   r      s   r   c               @   s   e Zd ZdS )ÚStreamWriterN)r   r   r   r
   r
   r
   r   r      s   r   c               @   s   e Zd ZdS )ÚStreamReaderN)r   r   r   r
   r
   r
   r   r      s   r   c            	   C   s    t jdt jt jttttdS )NÚcp869)Únamer   r   ÚincrementalencoderÚincrementaldecoderÚstreamreaderÚstreamwriter)	r   Ú	CodecInfor   r   r   r   r   r   r   r
   r
   r
   r   Úgetregentry!   s    r   é   i  é·   é¬   é¦   i   i   i  i   i  i  iª  i  i  i«  é©   i  é²   é³   i¬  é£   i­  i®  i¯  iÊ  i  iÌ  iÍ  i  i  i  i  i  i  i  é½   i  i  é«   é»   i%  i%  i%  i%  i$%  i  i  i  i  ic%  iQ%  iW%  i]%  i  i  i%  i%  i4%  i,%  i%  i %  i<%  i   i¡  iZ%  iT%  ii%  if%  i`%  iP%  il%  i£  i¤  i¥  i¦  i§  i¨  i©  i±  i²  i³  i%  i%  i%  i%  i´  iµ  i%  i¶  i·  i¸  i¹  iº  i»  i¼  i½  i¾  i¿  iÀ  iÁ  iÃ  iÂ  iÄ  i  é­   é±   iÅ  iÆ  iÇ  é§   iÈ  i  é°   é¨   iÉ  iË  i°  iÎ  i %  é    )é   é   é   é   é   é   é   é   é   é   é   é   é   é   é   é   é   é   é   é   é   é   é   é   é   é   é   é   é   é   é   é   r0   é¡   é¢   r'   é¤   é¥   r#   r-   r/   r$   éª   r)   r"   r+   é®   é¯   r.   r,   r%   r&   é´   éµ   é¶   r!   é¸   é¹   éº   r*   é¼   r(   é¾   é¿   éÀ   éÁ   éÂ   éÃ   éÄ   éÅ   éÆ   éÇ   éÈ   éÉ   éÊ   éË   éÌ   éÍ   éÎ   éÏ   éÐ   éÑ   éÒ   éÓ   éÔ   éÕ   éÖ   é×   éØ   éÙ   éÚ   éÛ   éÜ   éÝ   éÞ   éß   éà   éá   éâ   éã   éä   éå   éæ   éç   éè   éé   éê   éë   éì   éí   éî   éï   éð   éñ   éò   éó   éô   éõ   éö   é÷   éø   éù   éú   éû   éü   éý   éþ   éÿ   u©   	
 !"#$%&'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\]^_`abcdefghijklmnopqrstuvwxyz{|}~ï¿¾ï¿¾ï¿¾ï¿¾ï¿¾ï¿¾Îï¿¾Â·Â¬Â¦ââÎâÎÎÎªÎï¿¾ï¿¾ÎÎ«Â©ÎÂ²Â³Î¬Â£Î­Î®Î¯ÏÎÏÏÎÎÎÎÎÎÎÂ½ÎÎÂ«Â»âââââ¤ÎÎÎÎâ£âââÎÎâââ´â¬âââ¼Î Î¡âââ©â¦â ââ¬Î£Î¤Î¥Î¦Î§Î¨Î©Î±Î²Î³ââââÎ´ÎµâÎ¶Î·Î¸Î¹ÎºÎ»Î¼Î½Î¾Î¿ÏÏÏÏÏÎÂ­Â±ÏÏÏÂ§ÏÎÂ°Â¨ÏÏÎ°Ïâ Â é   é   é   é   é   é   é   é   é	   é
   é   é   é   é   é   é   é   é   é   é   é   é   é   é   é   é   é   é   é   é   é   é    é!   é"   é#   é$   é%   é&   é'   é(   é)   é*   é+   é,   é-   é.   é/   é0   é1   é2   é3   é4   é5   é6   é7   é8   é9   é:   é;   é<   é=   é>   é?   é@   éA   éB   éC   éD   éE   éF   éG   éH   éI   éJ   éK   éL   éM   éN   éO   éP   éQ   éR   éS   éT   éU   éV   éW   éX   éY   éZ   é[   é\   é]   é^   é_   é`   éa   éb   éc   éd   ée   éf   ég   éh   éi   éj   ék   él   ém   én   éo   ép   éq   ér   és   ét   éu   év   éw   éx   éy   éz   é{   é|   é}   é~   é   r    rM   r;   r   r   rH   rV   r:   r   r   r   rJ   rK   r9   rW   r   r   r7   r>   r@   rA   rC   rF   rI   rQ   rS   rT   rU   rY   rZ   r[   r_   rg   rh   rp   rq   rr   rs   rt   ru   rv   rB   rG   rL   rN   rO   rP   r   rw   rx   ry   r~   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   r   rR   r   r?   r<   r=   re   r{   r`   ra   rz   rd   rX   rc   rb   rf   rn   r]   rj   ri   r^   rm   r\   rl   rk   ro   r   r}   r|   r   )÷r   r¡   r¢   r£   r¤   r¥   r¦   r§   r¨   r©   rª   r«   r¬   r­   r®   r¯   r°   r±   r²   r³   r´   rµ   r¶   r·   r¸   r¹   rº   r»   r¼   r½   r¾   r¿   rÀ   rÁ   rÂ   rÃ   rÄ   rÅ   rÆ   rÇ   rÈ   rÉ   rÊ   rË   rÌ   rÍ   rÎ   rÏ   rÐ   rÑ   rÒ   rÓ   rÔ   rÕ   rÖ   r×   rØ   rÙ   rÚ   rÛ   rÜ   rÝ   rÞ   rß   rà   rá   râ   rã   rä   rå   ræ   rç   rè   ré   rê   rë   rì   rí   rî   rï   rð   rñ   rò   ró   rô   rõ   rö   r÷   rø   rù   rú   rû   rü   rý   rþ   rÿ   r   r  r  r  r  r  r  r  r  r	  r
  r  r  r  r  r  r  r  r  r  r  r  r  r  r  r  r  r  r  r  r  r  r0   r'   r#   r-   r/   r$   r)   r"   r+   r.   r,   r%   r&   r!   r*   r(   i  i  i  i  i  i  i  i  i  i  i  i  i  i  i  i  i  i  i  i  i  i  i  i  i  i   i¡  i£  i¤  i¥  i¦  i§  i¨  i©  iª  i«  i¬  i­  i®  i¯  i°  i±  i²  i³  i´  iµ  i¶  i·  i¸  i¹  iº  i»  i¼  i½  i¾  i¿  iÀ  iÁ  iÂ  iÃ  iÄ  iÅ  iÆ  iÇ  iÈ  iÉ  iÊ  iË  iÌ  iÍ  iÎ  i   i   i   i %  i%  i%  i%  i%  i%  i%  i$%  i,%  i4%  i<%  iP%  iQ%  iT%  iW%  iZ%  i]%  i`%  ic%  if%  ii%  il%  i%  i%  i%  i%  i%  i%  i %  )Ú__doc__r   r   r   r   r   r   r   Úmake_identity_dictÚrangeÚdecoding_mapÚupdater   r   r
   r
   r
   r   Ú<module>   s  
  ã               @   s   d Z ddlZG dd dejZG dd dejZG dd dejZG d	d
 d
eejZG dd deejZdd ZdZe 	e¡Z
dS )zt Python Character Mapping Codec cp874 generated from 'MAPPINGS/VENDORS/MICSFT/WINDOWS/CP874.TXT' with gencodec.py.

é    Nc               @   s    e Zd ZdddZdddZdS )	ÚCodecÚstrictc             C   s   t  ||t¡S )N)ÚcodecsÚcharmap_encodeÚencoding_table)ÚselfÚinputÚerrors© r
   ú D:\Python\lib\encodings\cp874.pyÚencode   s    zCodec.encodec             C   s   t  ||t¡S )N)r   Úcharmap_decodeÚdecoding_table)r   r   r	   r
   r
   r   Údecode   s    zCodec.decodeN)r   )r   )Ú__name__Ú
__module__Ú__qualname__r   r   r
   r
   r
   r   r   	   s   
r   c               @   s   e Zd ZdddZdS )ÚIncrementalEncoderFc             C   s   t  || jt¡d S )Nr   )r   r   r	   r   )r   r   Úfinalr
   r
   r   r      s    zIncrementalEncoder.encodeN)F)r   r   r   r   r
   r
   r
   r   r      s   r   c               @   s   e Zd ZdddZdS )ÚIncrementalDecoderFc             C   s   t  || jt¡d S )Nr   )r   r   r	   r   )r   r   r   r
   r
   r   r      s    zIncrementalDecoder.decodeN)F)r   r   r   r   r
   r
   r
   r   r      s   r   c               @   s   e Zd ZdS )ÚStreamWriterN)r   r   r   r
   r
   r
   r   r      s   r   c               @   s   e Zd ZdS )ÚStreamReaderN)r   r   r   r
   r
   r
   r   r      s   r   c            	   C   s    t jdt jt jttttdS )NZcp874)Únamer   r   ÚincrementalencoderÚincrementaldecoderÚstreamreaderÚstreamwriter)	r   Ú	CodecInfor   r   r   r   r   r   r   r
   r
   r
   r   Úgetregentry!   s    r   uÿ   	
 !"#$%&'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\]^_`abcdefghijklmnopqrstuvwxyz{|}~â¬ï¿¾ï¿¾ï¿¾ï¿¾â¦ï¿¾ï¿¾ï¿¾ï¿¾ï¿¾ï¿¾ï¿¾ï¿¾ï¿¾ï¿¾ï¿¾âââââ¢ââï¿¾ï¿¾ï¿¾ï¿¾ï¿¾ï¿¾ï¿¾ï¿¾Â à¸à¸à¸à¸à¸à¸à¸à¸à¸à¸à¸à¸à¸à¸à¸à¸à¸à¸à¸à¸à¸à¸à¸à¸à¸à¸à¸à¸à¸à¸à¸à¸ à¸¡à¸¢à¸£à¸¤à¸¥à¸¦à¸§à¸¨à¸©à¸ªà¸«à¸¬à¸­à¸®à¸¯à¸°à¸±à¸²à¸³à¸´à¸µà¸¶à¸·à¸¸à¸¹à¸ºï¿¾ï¿¾ï¿¾ï¿¾à¸¿à¹à¹à¹à¹à¹à¹à¹à¹à¹à¹à¹à¹à¹à¹à¹à¹à¹à¹à¹à¹à¹à¹à¹à¹à¹à¹à¹à¹ï¿¾ï¿¾ï¿¾ï¿¾)Ú__doc__r   r   r   r   r   r   r   r   Úcharmap_buildr   r
   r
   r
   r   Ú<module>   s     ã               @   s   d Z ddlZG dd dejZG dd dejZG dd dejZG d	d
 d
eejZG dd deejZdd ZdZe 	e¡Z
dS )zs Python Character Mapping Codec cp875 generated from 'MAPPINGS/VENDORS/MICSFT/EBCDIC/CP875.TXT' with gencodec.py.

é    Nc               @   s    e Zd ZdddZdddZdS )	ÚCodecÚstrictc             C   s   t  ||t¡S )N)ÚcodecsÚcharmap_encodeÚencoding_table)ÚselfÚinputÚerrors© r
   ú D:\Python\lib\encodings\cp875.pyÚencode   s    zCodec.encodec             C   s   t  ||t¡S )N)r   Úcharmap_decodeÚdecoding_table)r   r   r	   r
   r
   r   Údecode   s    zCodec.decodeN)r   )r   )Ú__name__Ú
__module__Ú__qualname__r   r   r
   r
   r
   r   r   	   s   
r   c               @   s   e Zd ZdddZdS )ÚIncrementalEncoderFc             C   s   t  || jt¡d S )Nr   )r   r   r	   r   )r   r   Úfinalr
   r
   r   r      s    zIncrementalEncoder.encodeN)F)r   r   r   r   r
   r
   r
   r   r      s   r   c               @   s   e Zd ZdddZdS )ÚIncrementalDecoderFc             C   s   t  || jt¡d S )Nr   )r   r   r	   r   )r   r   r   r
   r
   r   r      s    zIncrementalDecoder.decodeN)F)r   r   r   r   r
   r
   r
   r   r      s   r   c               @   s   e Zd ZdS )ÚStreamWriterN)r   r   r   r
   r
   r
   r   r      s   r   c               @   s   e Zd ZdS )ÚStreamReaderN)r   r   r   r
   r
   r
   r   r      s   r   c            	   C   s    t jdt jt jttttdS )NZcp875)Únamer   r   ÚincrementalencoderÚincrementaldecoderÚstreamreaderÚstreamwriter)	r   Ú	CodecInfor   r   r   r   r   r   r   r
   r
   r
   r   Úgetregentry!   s    r   u}   Â	ÂÂÂÂÂÂÂÂÂÂÂÂÂÂ
ÂÂÂÂÂÂÂÂÂÂÂÂÂÂÂÂ ÎÎÎÎÎÎÎÎÎ[.<(+!&ÎÎÎÎÎÎÎ Î¡Î£]$*);^-/Î¤Î¥Î¦Î§Î¨Î©ÎªÎ«|,%_>?Â¨ÎÎÎÂ ÎÎÎÎ`:#@'="ÎabcdefghiÎ±Î²Î³Î´ÎµÎ¶Â°jklmnopqrÎ·Î¸Î¹ÎºÎ»Î¼Â´~stuvwxyzÎ½Î¾Î¿ÏÏÏÂ£Î¬Î­Î®ÏÎ¯ÏÏÏÏÏÏÏÏÏÏ{ABCDEFGHIÂ­ÏÎÎ°ââ}JKLMNOPQRÂ±Â½ÎâÂ¦\STUVWXYZÂ²Â§Â«Â¬0123456789Â³Â©Â»Â)Ú__doc__r   r   r   r   r   r   r   r   Úcharmap_buildr   r
   r
   r
   r   Ú<module>   s     ã               @   s   d dl Z d dlZd dlZe  d¡ZG dd dejZG dd dejejZG dd dej	ej
Z
G d	d
 d
eejejZG dd deejejZdd ZdS )é    NÚcp932c               @   s   e Zd ZejZejZdS )ÚCodecN)Ú__name__Ú
__module__Ú__qualname__ÚcodecÚencodeÚdecode© r
   r
   ú D:\Python\lib\encodings\cp932.pyr      s   r   c               @   s   e Zd ZeZdS )ÚIncrementalEncoderN)r   r   r   r   r
   r
   r
   r   r      s   r   c               @   s   e Zd ZeZdS )ÚIncrementalDecoderN)r   r   r   r   r
   r
   r
   r   r      s   r   c               @   s   e Zd ZeZdS )ÚStreamReaderN)r   r   r   r   r
   r
   r
   r   r      s   r   c               @   s   e Zd ZeZdS )ÚStreamWriterN)r   r   r   r   r
   r
   r
   r   r      s   r   c            	   C   s    t jdt jt jttttdS )Nr   )Únamer   r	   ÚincrementalencoderÚincrementaldecoderÚstreamreaderÚstreamwriter)	ÚcodecsÚ	CodecInfor   r   r	   r   r   r   r   r
   r
   r
   r   Úgetregentry   s    r   )Z
_codecs_jpr   Z_multibytecodecZmbcZgetcodecr   r   ZMultibyteIncrementalEncoderr   ZMultibyteIncrementalDecoderr   ZMultibyteStreamReaderr   ZMultibyteStreamWriterr   r   r
   r
   r
   r   Ú<module>   s   
ã               @   s   d dl Z d dlZd dlZe  d¡ZG dd dejZG dd dejejZG dd dej	ej
Z
G d	d
 d
eejejZG dd deejejZdd ZdS )é    NÚcp949c               @   s   e Zd ZejZejZdS )ÚCodecN)Ú__name__Ú
__module__Ú__qualname__ÚcodecÚencodeÚdecode© r
   r
   ú D:\Python\lib\encodings\cp949.pyr      s   r   c               @   s   e Zd ZeZdS )ÚIncrementalEncoderN)r   r   r   r   r
   r
   r
   r   r      s   r   c               @   s   e Zd ZeZdS )ÚIncrementalDecoderN)r   r   r   r   r
   r
   r
   r   r      s   r   c               @   s   e Zd ZeZdS )ÚStreamReaderN)r   r   r   r   r
   r
   r
   r   r      s   r   c               @   s   e Zd ZeZdS )ÚStreamWriterN)r   r   r   r   r
   r
   r
   r   r      s   r   c            	   C   s    t jdt jt jttttdS )Nr   )Únamer   r	   ÚincrementalencoderÚincrementaldecoderÚstreamreaderÚstreamwriter)	ÚcodecsÚ	CodecInfor   r   r	   r   r   r   r   r
   r
   r
   r   Úgetregentry   s    r   )Z
_codecs_krr   Z_multibytecodecZmbcZgetcodecr   r   ZMultibyteIncrementalEncoderr   ZMultibyteIncrementalDecoderr   ZMultibyteStreamReaderr   ZMultibyteStreamWriterr   r   r
   r
   r
   r   Ú<module>   s   
ã               @   s   d dl Z d dlZd dlZe  d¡ZG dd dejZG dd dejejZG dd dej	ej
Z
G d	d
 d
eejejZG dd deejejZdd ZdS )é    NÚcp950c               @   s   e Zd ZejZejZdS )ÚCodecN)Ú__name__Ú
__module__Ú__qualname__ÚcodecÚencodeÚdecode© r
   r
   ú D:\Python\lib\encodings\cp950.pyr      s   r   c               @   s   e Zd ZeZdS )ÚIncrementalEncoderN)r   r   r   r   r
   r
   r
   r   r      s   r   c               @   s   e Zd ZeZdS )ÚIncrementalDecoderN)r   r   r   r   r
   r
   r
   r   r      s   r   c               @   s   e Zd ZeZdS )ÚStreamReaderN)r   r   r   r   r
   r
   r
   r   r      s   r   c               @   s   e Zd ZeZdS )ÚStreamWriterN)r   r   r   r   r
   r
   r
   r   r      s   r   c            	   C   s    t jdt jt jttttdS )Nr   )Únamer   r	   ÚincrementalencoderÚincrementaldecoderÚstreamreaderÚstreamwriter)	ÚcodecsÚ	CodecInfor   r   r	   r   r   r   r   r
   r
   r
   r   Úgetregentry   s    r   )Z
_codecs_twr   Z_multibytecodecZmbcZgetcodecr   r   ZMultibyteIncrementalEncoderr   ZMultibyteIncrementalDecoderr   ZMultibyteStreamReaderr   ZMultibyteStreamWriterr   r   r
   r
   r
   r   Ú<module>   s   
ã               @   s   d dl Z d dlZd dlZe  d¡ZG dd dejZG dd dejejZG dd dej	ej
Z
G d	d
 d
eejejZG dd deejejZdd ZdS )é    NÚeuc_jis_2004c               @   s   e Zd ZejZejZdS )ÚCodecN)Ú__name__Ú
__module__Ú__qualname__ÚcodecÚencodeÚdecode© r
   r
   ú'D:\Python\lib\encodings\euc_jis_2004.pyr      s   r   c               @   s   e Zd ZeZdS )ÚIncrementalEncoderN)r   r   r   r   r
   r
   r
   r   r      s   r   c               @   s   e Zd ZeZdS )ÚIncrementalDecoderN)r   r   r   r   r
   r
   r
   r   r      s   r   c               @   s   e Zd ZeZdS )ÚStreamReaderN)r   r   r   r   r
   r
   r
   r   r      s   r   c               @   s   e Zd ZeZdS )ÚStreamWriterN)r   r   r   r   r
   r
   r
   r   r      s   r   c            	   C   s    t jdt jt jttttdS )Nr   )Únamer   r	   ÚincrementalencoderÚincrementaldecoderÚstreamreaderÚstreamwriter)	ÚcodecsÚ	CodecInfor   r   r	   r   r   r   r   r
   r
   r
   r   Úgetregentry   s    r   )Z
_codecs_jpr   Z_multibytecodecZmbcZgetcodecr   r   ZMultibyteIncrementalEncoderr   ZMultibyteIncrementalDecoderr   ZMultibyteStreamReaderr   ZMultibyteStreamWriterr   r   r
   r
   r
   r   Ú<module>   s   
ã               @   s   d dl Z d dlZd dlZe  d¡ZG dd dejZG dd dejejZG dd dej	ej
Z
G d	d
 d
eejejZG dd deejejZdd ZdS )é    NÚeuc_jisx0213c               @   s   e Zd ZejZejZdS )ÚCodecN)Ú__name__Ú
__module__Ú__qualname__ÚcodecÚencodeÚdecode© r
   r
   ú'D:\Python\lib\encodings\euc_jisx0213.pyr      s   r   c               @   s   e Zd ZeZdS )ÚIncrementalEncoderN)r   r   r   r   r
   r
   r
   r   r      s   r   c               @   s   e Zd ZeZdS )ÚIncrementalDecoderN)r   r   r   r   r
   r
   r
   r   r      s   r   c               @   s   e Zd ZeZdS )ÚStreamReaderN)r   r   r   r   r
   r
   r
   r   r      s   r   c               @   s   e Zd ZeZdS )ÚStreamWriterN)r   r   r   r   r
   r
   r
   r   r      s   r   c            	   C   s    t jdt jt jttttdS )Nr   )Únamer   r	   ÚincrementalencoderÚincrementaldecoderÚstreamreaderÚstreamwriter)	ÚcodecsÚ	CodecInfor   r   r	   r   r   r   r   r
   r
   r
   r   Úgetregentry   s    r   )Z
_codecs_jpr   Z_multibytecodecZmbcZgetcodecr   r   ZMultibyteIncrementalEncoderr   ZMultibyteIncrementalDecoderr   ZMultibyteStreamReaderr   ZMultibyteStreamWriterr   r   r
   r
   r
   r   Ú<module>   s   
ã               @   s   d dl Z d dlZd dlZe  d¡ZG dd dejZG dd dejejZG dd dej	ej
Z
G d	d
 d
eejejZG dd deejejZdd ZdS )é    NÚeuc_jpc               @   s   e Zd ZejZejZdS )ÚCodecN)Ú__name__Ú
__module__Ú__qualname__ÚcodecÚencodeÚdecode© r
   r
   ú!D:\Python\lib\encodings\euc_jp.pyr      s   r   c               @   s   e Zd ZeZdS )ÚIncrementalEncoderN)r   r   r   r   r
   r
   r
   r   r      s   r   c               @   s   e Zd ZeZdS )ÚIncrementalDecoderN)r   r   r   r   r
   r
   r
   r   r      s   r   c               @   s   e Zd ZeZdS )ÚStreamReaderN)r   r   r   r   r
   r
   r
   r   r      s   r   c               @   s   e Zd ZeZdS )ÚStreamWriterN)r   r   r   r   r
   r
   r
   r   r      s   r   c            	   C   s    t jdt jt jttttdS )Nr   )Únamer   r	   ÚincrementalencoderÚincrementaldecoderÚstreamreaderÚstreamwriter)	ÚcodecsÚ	CodecInfor   r   r	   r   r   r   r   r
   r
   r
   r   Úgetregentry   s    r   )Z
_codecs_jpr   Z_multibytecodecZmbcZgetcodecr   r   ZMultibyteIncrementalEncoderr   ZMultibyteIncrementalDecoderr   ZMultibyteStreamReaderr   ZMultibyteStreamWriterr   r   r
   r
   r
   r   Ú<module>   s   
ã               @   s   d dl Z d dlZd dlZe  d¡ZG dd dejZG dd dejejZG dd dej	ej
Z
G d	d
 d
eejejZG dd deejejZdd ZdS )é    NÚeuc_krc               @   s   e Zd ZejZejZdS )ÚCodecN)Ú__name__Ú
__module__Ú__qualname__ÚcodecÚencodeÚdecode© r
   r
   ú!D:\Python\lib\encodings\euc_kr.pyr      s   r   c               @   s   e Zd ZeZdS )ÚIncrementalEncoderN)r   r   r   r   r
   r
   r
   r   r      s   r   c               @   s   e Zd ZeZdS )ÚIncrementalDecoderN)r   r   r   r   r
   r
   r
   r   r      s   r   c               @   s   e Zd ZeZdS )ÚStreamReaderN)r   r   r   r   r
   r
   r
   r   r      s   r   c               @   s   e Zd ZeZdS )ÚStreamWriterN)r   r   r   r   r
   r
   r
   r   r      s   r   c            	   C   s    t jdt jt jttttdS )Nr   )Únamer   r	   ÚincrementalencoderÚincrementaldecoderÚstreamreaderÚstreamwriter)	ÚcodecsÚ	CodecInfor   r   r	   r   r   r   r   r
   r
   r
   r   Úgetregentry   s    r   )Z
_codecs_krr   Z_multibytecodecZmbcZgetcodecr   r   ZMultibyteIncrementalEncoderr   ZMultibyteIncrementalDecoderr   ZMultibyteStreamReaderr   ZMultibyteStreamWriterr   r   r
   r
   r
   r   Ú<module>   s   
ã               @   s   d dl Z d dlZd dlZe  d¡ZG dd dejZG dd dejejZG dd dej	ej
Z
G d	d
 d
eejejZG dd deejejZdd ZdS )é    NÚgb18030c               @   s   e Zd ZejZejZdS )ÚCodecN)Ú__name__Ú
__module__Ú__qualname__ÚcodecÚencodeÚdecode© r
   r
   ú"D:\Python\lib\encodings\gb18030.pyr      s   r   c               @   s   e Zd ZeZdS )ÚIncrementalEncoderN)r   r   r   r   r
   r
   r
   r   r      s   r   c               @   s   e Zd ZeZdS )ÚIncrementalDecoderN)r   r   r   r   r
   r
   r
   r   r      s   r   c               @   s   e Zd ZeZdS )ÚStreamReaderN)r   r   r   r   r
   r
   r
   r   r      s   r   c               @   s   e Zd ZeZdS )ÚStreamWriterN)r   r   r   r   r
   r
   r
   r   r      s   r   c            	   C   s    t jdt jt jttttdS )Nr   )Únamer   r	   ÚincrementalencoderÚincrementaldecoderÚstreamreaderÚstreamwriter)	ÚcodecsÚ	CodecInfor   r   r	   r   r   r   r   r
   r
   r
   r   Úgetregentry   s    r   )Z
_codecs_cnr   Z_multibytecodecZmbcZgetcodecr   r   ZMultibyteIncrementalEncoderr   ZMultibyteIncrementalDecoderr   ZMultibyteStreamReaderr   ZMultibyteStreamWriterr   r   r
   r
   r
   r   Ú<module>   s   
ã               @   s   d dl Z d dlZd dlZe  d¡ZG dd dejZG dd dejejZG dd dej	ej
Z
G d	d
 d
eejejZG dd deejejZdd ZdS )é    NÚgb2312c               @   s   e Zd ZejZejZdS )ÚCodecN)Ú__name__Ú
__module__Ú__qualname__ÚcodecÚencodeÚdecode© r
   r
   ú!D:\Python\lib\encodings\gb2312.pyr      s   r   c               @   s   e Zd ZeZdS )ÚIncrementalEncoderN)r   r   r   r   r
   r
   r
   r   r      s   r   c               @   s   e Zd ZeZdS )ÚIncrementalDecoderN)r   r   r   r   r
   r
   r
   r   r      s   r   c               @   s   e Zd ZeZdS )ÚStreamReaderN)r   r   r   r   r
   r
   r
   r   r      s   r   c               @   s   e Zd ZeZdS )ÚStreamWriterN)r   r   r   r   r
   r
   r
   r   r      s   r   c            	   C   s    t jdt jt jttttdS )Nr   )Únamer   r	   ÚincrementalencoderÚincrementaldecoderÚstreamreaderÚstreamwriter)	ÚcodecsÚ	CodecInfor   r   r	   r   r   r   r   r
   r
   r
   r   Úgetregentry   s    r   )Z
_codecs_cnr   Z_multibytecodecZmbcZgetcodecr   r   ZMultibyteIncrementalEncoderr   ZMultibyteIncrementalDecoderr   ZMultibyteStreamReaderr   ZMultibyteStreamWriterr   r   r
   r
   r
   r   Ú<module>   s   
ã               @   s   d dl Z d dlZd dlZe  d¡ZG dd dejZG dd dejejZG dd dej	ej
Z
G d	d
 d
eejejZG dd deejejZdd ZdS )é    NÚgbkc               @   s   e Zd ZejZejZdS )ÚCodecN)Ú__name__Ú
__module__Ú__qualname__ÚcodecÚencodeÚdecode© r
   r
   úD:\Python\lib\encodings\gbk.pyr      s   r   c               @   s   e Zd ZeZdS )ÚIncrementalEncoderN)r   r   r   r   r
   r
   r
   r   r      s   r   c               @   s   e Zd ZeZdS )ÚIncrementalDecoderN)r   r   r   r   r
   r
   r
   r   r      s   r   c               @   s   e Zd ZeZdS )ÚStreamReaderN)r   r   r   r   r
   r
   r
   r   r      s   r   c               @   s   e Zd ZeZdS )ÚStreamWriterN)r   r   r   r   r
   r
   r
   r   r      s   r   c            	   C   s    t jdt jt jttttdS )Nr   )Únamer   r	   ÚincrementalencoderÚincrementaldecoderÚstreamreaderÚstreamwriter)	ÚcodecsÚ	CodecInfor   r   r	   r   r   r   r   r
   r
   r
   r   Úgetregentry   s    r   )Z
_codecs_cnr   Z_multibytecodecZmbcZgetcodecr   r   ZMultibyteIncrementalEncoderr   ZMultibyteIncrementalDecoderr   ZMultibyteStreamReaderr   ZMultibyteStreamWriterr   r   r
   r
   r
   r   Ú<module>   s   
ã               @   s   d Z ddlZddlZdddZdddZG dd	 d	ejZG d
d dejZG dd dejZG dd deejZG dd deej	Z	dd Z
dS )z Python 'hex_codec' Codec - 2-digit hex content transfer encoding.

This codec de/encodes from bytes to bytes.

Written by Marc-Andre Lemburg (mal@lemburg.com).
é    NÚstrictc             C   s   |dkst t | ¡t| fS )Nr   )ÚAssertionErrorÚbinasciiÚb2a_hexÚlen)ÚinputÚerrors© r	   ú$D:\Python\lib\encodings\hex_codec.pyÚ
hex_encode   s    r   c             C   s   |dkst t | ¡t| fS )Nr   )r   r   Úa2b_hexr   )r   r   r	   r	   r
   Ú
hex_decode   s    r   c               @   s    e Zd ZdddZdddZdS )	ÚCodecr   c             C   s
   t ||S )N)r   )Úselfr   r   r	   r	   r
   Úencode   s    zCodec.encodec             C   s
   t ||S )N)r   )r   r   r   r	   r	   r
   Údecode   s    zCodec.decodeN)r   )r   )Ú__name__Ú
__module__Ú__qualname__r   r   r	   r	   r	   r
   r      s   
r   c               @   s   e Zd ZdddZdS )ÚIncrementalEncoderFc             C   s   | j dkstt |¡S )Nr   )r   r   r   r   )r   r   Úfinalr	   r	   r
   r      s    zIncrementalEncoder.encodeN)F)r   r   r   r   r	   r	   r	   r
   r      s   r   c               @   s   e Zd ZdddZdS )ÚIncrementalDecoderFc             C   s   | j dkstt |¡S )Nr   )r   r   r   r   )r   r   r   r	   r	   r
   r   !   s    zIncrementalDecoder.decodeN)F)r   r   r   r   r	   r	   r	   r
   r       s   r   c               @   s   e Zd ZeZdS )ÚStreamWriterN)r   r   r   ÚbytesÚcharbuffertyper	   r	   r	   r
   r   %   s   r   c               @   s   e Zd ZeZdS )ÚStreamReaderN)r   r   r   r   r   r	   r	   r	   r
   r   (   s   r   c            
   C   s   t jdttttttddS )NÚhexF)Únamer   r   ÚincrementalencoderÚincrementaldecoderÚstreamwriterÚstreamreaderÚ_is_text_encoding)ÚcodecsÚ	CodecInfor   r   r   r   r   r   r	   r	   r	   r
   Úgetregentry-   s    r%   )r   )r   )Ú__doc__r#   r   r   r   r   r   r   r   r   r%   r	   r	   r	   r
   Ú<module>   s   

ã               @   s   d Z ddlZG dd dejZG dd dejZG dd dejZG d	d
 d
eejZG dd deejZdd ZdZe 	e¡Z
dS )a-   Python Character Mapping Codec generated from 'hp_roman8.txt' with gencodec.py.

    Based on data from ftp://dkuug.dk/i18n/charmaps/HP-ROMAN8 (Keld Simonsen)

    Original source: LaserJet IIP Printer User's Manual HP part no
    33471-90901, Hewlet-Packard, June 1989.

    (Used with permission)

é    Nc               @   s    e Zd ZdddZdddZdS )	ÚCodecÚstrictc             C   s   t  ||t¡S )N)ÚcodecsÚcharmap_encodeÚencoding_table)ÚselfÚinputÚerrors© r
   ú$D:\Python\lib\encodings\hp_roman8.pyÚencode   s    zCodec.encodec             C   s   t  ||t¡S )N)r   Úcharmap_decodeÚdecoding_table)r   r   r	   r
   r
   r   Údecode   s    zCodec.decodeN)r   )r   )Ú__name__Ú
__module__Ú__qualname__r   r   r
   r
   r
   r   r      s   
r   c               @   s   e Zd ZdddZdS )ÚIncrementalEncoderFc             C   s   t  || jt¡d S )Nr   )r   r   r	   r   )r   r   Úfinalr
   r
   r   r      s    zIncrementalEncoder.encodeN)F)r   r   r   r   r
   r
   r
   r   r      s   r   c               @   s   e Zd ZdddZdS )ÚIncrementalDecoderFc             C   s   t  || jt¡d S )Nr   )r   r   r	   r   )r   r   r   r
   r
   r   r      s    zIncrementalDecoder.decodeN)F)r   r   r   r   r
   r
   r
   r   r      s   r   c               @   s   e Zd ZdS )ÚStreamWriterN)r   r   r   r
   r
   r
   r   r       s   r   c               @   s   e Zd ZdS )ÚStreamReaderN)r   r   r   r
   r
   r
   r   r   #   s   r   c            	   C   s    t jdt jt jttttdS )Nz	hp-roman8)Únamer   r   ÚincrementalencoderÚincrementaldecoderÚstreamwriterÚstreamreader)	r   Ú	CodecInfor   r   r   r   r   r   r   r
   r
   r
   r   Úgetregentry(   s    r   u   	
 !"#$%&'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\]^_`abcdefghijklmnopqrstuvwxyz{|}~ÂÂÂÂÂÂÂÂÂÂÂÂÂÂÂÂÂÂÂÂÂÂÂÂÂÂÂÂÂÂÂÂÂ ÃÃÃÃÃÃÃÂ´ËËÂ¨ËÃÃâ¤Â¯ÃÃ½Â°ÃÃ§ÃÃ±Â¡Â¿Â¤Â£Â¥Â§ÆÂ¢Ã¢ÃªÃ´Ã»Ã¡Ã©Ã³ÃºÃ Ã¨Ã²Ã¹Ã¤Ã«Ã¶Ã¼ÃÃ®ÃÃÃ¥Ã­Ã¸Ã¦ÃÃ¬ÃÃÃÃ¯ÃÃÃÃÃ£ÃÃ°ÃÃÃÃÃÃµÅ Å¡ÃÅ¸Ã¿ÃÃ¾Â·ÂµÂ¶Â¾âÂ¼Â½ÂªÂºÂ«â Â»Â±ï¿¾)Ú__doc__r   r   r   r   r   r   r   r   Úcharmap_buildr   r
   r
   r
   r   Ú<module>
   s     ã               @   s   d dl Z d dlZd dlZe  d¡ZG dd dejZG dd dejejZG dd dej	ej
Z
G d	d
 d
eejejZG dd deejejZdd ZdS )é    NÚhzc               @   s   e Zd ZejZejZdS )ÚCodecN)Ú__name__Ú
__module__Ú__qualname__ÚcodecÚencodeÚdecode© r
   r
   úD:\Python\lib\encodings\hz.pyr      s   r   c               @   s   e Zd ZeZdS )ÚIncrementalEncoderN)r   r   r   r   r
   r
   r
   r   r      s   r   c               @   s   e Zd ZeZdS )ÚIncrementalDecoderN)r   r   r   r   r
   r
   r
   r   r      s   r   c               @   s   e Zd ZeZdS )ÚStreamReaderN)r   r   r   r   r
   r
   r
   r   r      s   r   c               @   s   e Zd ZeZdS )ÚStreamWriterN)r   r   r   r   r
   r
   r
   r   r      s   r   c            	   C   s    t jdt jt jttttdS )Nr   )Únamer   r	   ÚincrementalencoderÚincrementaldecoderÚstreamreaderÚstreamwriter)	ÚcodecsÚ	CodecInfor   r   r	   r   r   r   r   r
   r
   r
   r   Úgetregentry   s    r   )Z
_codecs_cnr   Z_multibytecodecZmbcZgetcodecr   r   ZMultibyteIncrementalEncoderr   ZMultibyteIncrementalDecoderr   ZMultibyteStreamReaderr   ZMultibyteStreamWriterr   r   r
   r
   r
   r   Ú<module>   s   
ã               @   s¸   d dl Z d dlZd dlZd dlmZ e d¡ZdZdZdd Z	dd	 Z
d
d ZG dd dejZG dd dejZG dd dejZG dd deejZG dd deejZdd ZdS )é    N)Ú	ucd_3_2_0u   [.ãï¼ï½¡]s   xn--zxn--c             C   s  g }x(| D ] }t  |¡rq
| t  |¡¡ q
W d |¡} t d| ¡} xr| D ]j}t  |¡s¨t  |¡s¨t  	|¡s¨t  
|¡s¨t  |¡s¨t  |¡s¨t  |¡s¨t  |¡s¨t  |¡rJtd| qJW dd | D }xD|D ]<}|rÌtdd | D rîtd|d	 r |d
 sÌtdqÌW | S )NÚ ÚNFKCzInvalid character %rc             S   s   g | ]}t  |¡qS © )Ú
stringprepZin_table_d1)Ú.0Úxr   r   úD:\Python\lib\encodings\idna.pyú
<listcomp>)   s    znameprep.<locals>.<listcomp>c             s   s   | ]}t  |¡V  qd S )N)r   Zin_table_d2)r   r   r   r   r	   ú	<genexpr>2   s    znameprep.<locals>.<genexpr>zViolation of BIDI requirement 2r   éÿÿÿÿzViolation of BIDI requirement 3)r   Zin_table_b1ÚappendZmap_table_b2ÚjoinÚunicodedataÚ	normalizeZin_table_c12Zin_table_c22Zin_table_c3Zin_table_c4Zin_table_c5Zin_table_c6Zin_table_c7Zin_table_c8Zin_table_c9ÚUnicodeErrorÚany)ÚlabelZnewlabelÚcZRandALr   r   r	   Únameprep   s4    













r   c             C   sð   y|   d¡} W n tk
r"   Y n*X dt|   k r<dk rDn n| S tdt| } y|   d¡} W n tk
rv   Y n*X dt|   k rdk rn n| S td|  t¡r²td|   d¡} t|  } dt|   k rÜdk rän n| S tdd S )NÚasciir   é@   zlabel empty or too longzLabel starts with ACE prefixÚpunycode)Úencoder   Úlenr   Ú
startswithÚsace_prefixÚ
ace_prefix)r   r   r   r	   ÚToASCII>   s,    

r   c             C   sÒ   t | trd}n,y|  d¡} d}W n tk
r:   d}Y nX |stt| } y|  d¡} W n tk
rr   tdY nX |  t¡st| dS | ttd  }| 	d¡}t
|}t| d ¡ t|dkrÎtd| ||S )NTr   FzInvalid character in IDN labelr   zIDNA does not round-trip)Ú
isinstanceÚbytesr   r   r   r   r   Ústrr   Údecoder   Úlower)r   Z
pure_asciiZlabel1ÚresultZlabel2r   r   r	   Ú	ToUnicodei   s*    





r%   c               @   s    e Zd ZdddZdddZdS )	ÚCodecÚstrictc             C   s  |dkrt d| |sdS y| d¡}W n tk
r>   Y nhX | d¡}x6|d d D ]&}dt|  k rtdk sXn t d	qXW t|d dkrt d
|t|fS t }t |¡}|rÎ|d sÎd}|d= nd}x(|D ] }|rê| d¡ | t|¡ qØW t	|| t|fS )Nr'   zunsupported error handling )ó    r   r   ó   .r   r   r   zlabel empty or too longzlabel too longr(   )
r   r   ÚUnicodeEncodeErrorÚsplitr   Ú	bytearrayÚdotsÚextendr   r    )ÚselfÚinputÚerrorsr$   Úlabelsr   Útrailing_dotr   r   r	   r      s4    



zCodec.encodec             C   sÂ   |dkrt d| |sdS t|ts.t|}t|kr^y| d¡t|fS  tk
r\   Y nX | d¡}|rt|d dkrd}|d= nd	}g }x|D ]}| t	|¡ qW d 
|¡| t|fS )
Nr'   zUnsupported error handling )r   r   r   r)   r   r   Ú.r   )r   r   r    r   r"   r   ÚUnicodeDecodeErrorr+   r   r%   r   )r/   r0   r1   r2   r3   r$   r   r   r   r	   r"   ¸   s(    


zCodec.decodeN)r'   )r'   )Ú__name__Ú
__module__Ú__qualname__r   r"   r   r   r   r	   r&      s   
%r&   c               @   s   e Zd Zdd ZdS )ÚIncrementalEncoderc       	      C   s¼   |dkrt d| |sdS t |¡}d}|rT|d sBd}|d= n|sT|d= |rTd}t }d}x<|D ]4}|r~| d¡ |d7 }| t|¡ |t|7 }qdW ||7 }|t|7 }t||fS )	Nr'   zunsupported error handling )r(   r   r(   r   r)   r   é   )r   r-   r+   r,   r.   r   r   r    )	r/   r0   r1   Úfinalr2   r3   r$   Úsizer   r   r   r	   Ú_buffer_encodeÛ   s2    


z!IncrementalEncoder._buffer_encodeN)r6   r7   r8   r=   r   r   r   r	   r9   Ú   s   r9   c               @   s   e Zd Zdd ZdS )ÚIncrementalDecoderc       	      C   sÒ   |dkrt d| |sdS t|tr2t |¡}nt|d}| d¡}d}|rt|d sbd}|d= n|st|d= |rtd}g }d}x2|D ]*}| t|¡ |r |d	7 }|t|7 }qW d |¡| }|t|7 }||fS )
Nr'   zUnsupported error handling )r   r   r   r4   r   r   r   r:   )	r   r   r!   r-   r+   r   r%   r   r   )	r/   r0   r1   r;   r2   r3   r$   r<   r   r   r   r	   Ú_buffer_decodeþ   s6    



z!IncrementalDecoder._buffer_decodeN)r6   r7   r8   r?   r   r   r   r	   r>   ý   s   r>   c               @   s   e Zd ZdS )ÚStreamWriterN)r6   r7   r8   r   r   r   r	   r@   $  s   r@   c               @   s   e Zd ZdS )ÚStreamReaderN)r6   r7   r8   r   r   r   r	   rA   '  s   rA   c            	   C   s    t jdt jt jttttdS )NÚidna)Únamer   r"   ÚincrementalencoderÚincrementaldecoderÚstreamwriterÚstreamreader)	ÚcodecsÚ	CodecInfor&   r   r"   r9   r>   r@   rA   r   r   r   r	   Úgetregentry,  s    rJ   )r   ÚrerH   r   r   Úcompiler-   r   r   r   r   r%   r&   ÚBufferedIncrementalEncoderr9   ÚBufferedIncrementalDecoderr>   r@   rA   rJ   r   r   r   r	   Ú<module>   s   
0+)H#'ã               @   s   d dl Z d dlZd dlZe  d¡ZG dd dejZG dd dejejZG dd dej	ej
Z
G d	d
 d
eejejZG dd deejejZdd ZdS )é    NÚ
iso2022_jpc               @   s   e Zd ZejZejZdS )ÚCodecN)Ú__name__Ú
__module__Ú__qualname__ÚcodecÚencodeÚdecode© r
   r
   ú%D:\Python\lib\encodings\iso2022_jp.pyr      s   r   c               @   s   e Zd ZeZdS )ÚIncrementalEncoderN)r   r   r   r   r
   r
   r
   r   r      s   r   c               @   s   e Zd ZeZdS )ÚIncrementalDecoderN)r   r   r   r   r
   r
   r
   r   r      s   r   c               @   s   e Zd ZeZdS )ÚStreamReaderN)r   r   r   r   r
   r
   r
   r   r      s   r   c               @   s   e Zd ZeZdS )ÚStreamWriterN)r   r   r   r   r
   r
   r
   r   r      s   r   c            	   C   s    t jdt jt jttttdS )Nr   )Únamer   r	   ÚincrementalencoderÚincrementaldecoderÚstreamreaderÚstreamwriter)	ÚcodecsÚ	CodecInfor   r   r	   r   r   r   r   r
   r
   r
   r   Úgetregentry   s    r   )Z_codecs_iso2022r   Z_multibytecodecZmbcZgetcodecr   r   ZMultibyteIncrementalEncoderr   ZMultibyteIncrementalDecoderr   ZMultibyteStreamReaderr   ZMultibyteStreamWriterr   r   r
   r
   r
   r   Ú<module>   s   
ã               @   s   d dl Z d dlZd dlZe  d¡ZG dd dejZG dd dejejZG dd dej	ej
Z
G d	d
 d
eejejZG dd deejejZdd ZdS )é    NÚiso2022_jp_1c               @   s   e Zd ZejZejZdS )ÚCodecN)Ú__name__Ú
__module__Ú__qualname__ÚcodecÚencodeÚdecode© r
   r
   ú'D:\Python\lib\encodings\iso2022_jp_1.pyr      s   r   c               @   s   e Zd ZeZdS )ÚIncrementalEncoderN)r   r   r   r   r
   r
   r
   r   r      s   r   c               @   s   e Zd ZeZdS )ÚIncrementalDecoderN)r   r   r   r   r
   r
   r
   r   r      s   r   c               @   s   e Zd ZeZdS )ÚStreamReaderN)r   r   r   r   r
   r
   r
   r   r      s   r   c               @   s   e Zd ZeZdS )ÚStreamWriterN)r   r   r   r   r
   r
   r
   r   r      s   r   c            	   C   s    t jdt jt jttttdS )Nr   )Únamer   r	   ÚincrementalencoderÚincrementaldecoderÚstreamreaderÚstreamwriter)	ÚcodecsÚ	CodecInfor   r   r	   r   r   r   r   r
   r
   r
   r   Úgetregentry   s    r   )Z_codecs_iso2022r   Z_multibytecodecZmbcZgetcodecr   r   ZMultibyteIncrementalEncoderr   ZMultibyteIncrementalDecoderr   ZMultibyteStreamReaderr   ZMultibyteStreamWriterr   r   r
   r
   r
   r   Ú<module>   s   
ã               @   s   d dl Z d dlZd dlZe  d¡ZG dd dejZG dd dejejZG dd dej	ej
Z
G d	d
 d
eejejZG dd deejejZdd ZdS )é    NÚiso2022_jp_2c               @   s   e Zd ZejZejZdS )ÚCodecN)Ú__name__Ú
__module__Ú__qualname__ÚcodecÚencodeÚdecode© r
   r
   ú'D:\Python\lib\encodings\iso2022_jp_2.pyr      s   r   c               @   s   e Zd ZeZdS )ÚIncrementalEncoderN)r   r   r   r   r
   r
   r
   r   r      s   r   c               @   s   e Zd ZeZdS )ÚIncrementalDecoderN)r   r   r   r   r
   r
   r
   r   r      s   r   c               @   s   e Zd ZeZdS )ÚStreamReaderN)r   r   r   r   r
   r
   r
   r   r      s   r   c               @   s   e Zd ZeZdS )ÚStreamWriterN)r   r   r   r   r
   r
   r
   r   r      s   r   c            	   C   s    t jdt jt jttttdS )Nr   )Únamer   r	   ÚincrementalencoderÚincrementaldecoderÚstreamreaderÚstreamwriter)	ÚcodecsÚ	CodecInfor   r   r	   r   r   r   r   r
   r
   r
   r   Úgetregentry   s    r   )Z_codecs_iso2022r   Z_multibytecodecZmbcZgetcodecr   r   ZMultibyteIncrementalEncoderr   ZMultibyteIncrementalDecoderr   ZMultibyteStreamReaderr   ZMultibyteStreamWriterr   r   r
   r
   r
   r   Ú<module>   s   
ã               @   s   d dl Z d dlZd dlZe  d¡ZG dd dejZG dd dejejZG dd dej	ej
Z
G d	d
 d
eejejZG dd deejejZdd ZdS )é    NÚiso2022_jp_2004c               @   s   e Zd ZejZejZdS )ÚCodecN)Ú__name__Ú
__module__Ú__qualname__ÚcodecÚencodeÚdecode© r
   r
   ú*D:\Python\lib\encodings\iso2022_jp_2004.pyr      s   r   c               @   s   e Zd ZeZdS )ÚIncrementalEncoderN)r   r   r   r   r
   r
   r
   r   r      s   r   c               @   s   e Zd ZeZdS )ÚIncrementalDecoderN)r   r   r   r   r
   r
   r
   r   r      s   r   c               @   s   e Zd ZeZdS )ÚStreamReaderN)r   r   r   r   r
   r
   r
   r   r      s   r   c               @   s   e Zd ZeZdS )ÚStreamWriterN)r   r   r   r   r
   r
   r
   r   r      s   r   c            	   C   s    t jdt jt jttttdS )Nr   )Únamer   r	   ÚincrementalencoderÚincrementaldecoderÚstreamreaderÚstreamwriter)	ÚcodecsÚ	CodecInfor   r   r	   r   r   r   r   r
   r
   r
   r   Úgetregentry   s    r   )Z_codecs_iso2022r   Z_multibytecodecZmbcZgetcodecr   r   ZMultibyteIncrementalEncoderr   ZMultibyteIncrementalDecoderr   ZMultibyteStreamReaderr   ZMultibyteStreamWriterr   r   r
   r
   r
   r   Ú<module>   s   
ã               @   s   d dl Z d dlZd dlZe  d¡ZG dd dejZG dd dejejZG dd dej	ej
Z
G d	d
 d
eejejZG dd deejejZdd ZdS )é    NÚiso2022_jp_3c               @   s   e Zd ZejZejZdS )ÚCodecN)Ú__name__Ú
__module__Ú__qualname__ÚcodecÚencodeÚdecode© r
   r
   ú'D:\Python\lib\encodings\iso2022_jp_3.pyr      s   r   c               @   s   e Zd ZeZdS )ÚIncrementalEncoderN)r   r   r   r   r
   r
   r
   r   r      s   r   c               @   s   e Zd ZeZdS )ÚIncrementalDecoderN)r   r   r   r   r
   r
   r
   r   r      s   r   c               @   s   e Zd ZeZdS )ÚStreamReaderN)r   r   r   r   r
   r
   r
   r   r      s   r   c               @   s   e Zd ZeZdS )ÚStreamWriterN)r   r   r   r   r
   r
   r
   r   r      s   r   c            	   C   s    t jdt jt jttttdS )Nr   )Únamer   r	   ÚincrementalencoderÚincrementaldecoderÚstreamreaderÚstreamwriter)	ÚcodecsÚ	CodecInfor   r   r	   r   r   r   r   r
   r
   r
   r   Úgetregentry   s    r   )Z_codecs_iso2022r   Z_multibytecodecZmbcZgetcodecr   r   ZMultibyteIncrementalEncoderr   ZMultibyteIncrementalDecoderr   ZMultibyteStreamReaderr   ZMultibyteStreamWriterr   r   r
   r
   r
   r   Ú<module>   s   
ã               @   s   d dl Z d dlZd dlZe  d¡ZG dd dejZG dd dejejZG dd dej	ej
Z
G d	d
 d
eejejZG dd deejejZdd ZdS )é    NÚiso2022_jp_extc               @   s   e Zd ZejZejZdS )ÚCodecN)Ú__name__Ú
__module__Ú__qualname__ÚcodecÚencodeÚdecode© r
   r
   ú)D:\Python\lib\encodings\iso2022_jp_ext.pyr      s   r   c               @   s   e Zd ZeZdS )ÚIncrementalEncoderN)r   r   r   r   r
   r
   r
   r   r      s   r   c               @   s   e Zd ZeZdS )ÚIncrementalDecoderN)r   r   r   r   r
   r
   r
   r   r      s   r   c               @   s   e Zd ZeZdS )ÚStreamReaderN)r   r   r   r   r
   r
   r
   r   r      s   r   c               @   s   e Zd ZeZdS )ÚStreamWriterN)r   r   r   r   r
   r
   r
   r   r      s   r   c            	   C   s    t jdt jt jttttdS )Nr   )Únamer   r	   ÚincrementalencoderÚincrementaldecoderÚstreamreaderÚstreamwriter)	ÚcodecsÚ	CodecInfor   r   r	   r   r   r   r   r
   r
   r
   r   Úgetregentry   s    r   )Z_codecs_iso2022r   Z_multibytecodecZmbcZgetcodecr   r   ZMultibyteIncrementalEncoderr   ZMultibyteIncrementalDecoderr   ZMultibyteStreamReaderr   ZMultibyteStreamWriterr   r   r
   r
   r
   r   Ú<module>   s   
ã               @   s   d dl Z d dlZd dlZe  d¡ZG dd dejZG dd dejejZG dd dej	ej
Z
G d	d
 d
eejejZG dd deejejZdd ZdS )é    NÚ
iso2022_krc               @   s   e Zd ZejZejZdS )ÚCodecN)Ú__name__Ú
__module__Ú__qualname__ÚcodecÚencodeÚdecode© r
   r
   ú%D:\Python\lib\encodings\iso2022_kr.pyr      s   r   c               @   s   e Zd ZeZdS )ÚIncrementalEncoderN)r   r   r   r   r
   r
   r
   r   r      s   r   c               @   s   e Zd ZeZdS )ÚIncrementalDecoderN)r   r   r   r   r
   r
   r
   r   r      s   r   c               @   s   e Zd ZeZdS )ÚStreamReaderN)r   r   r   r   r
   r
   r
   r   r      s   r   c               @   s   e Zd ZeZdS )ÚStreamWriterN)r   r   r   r   r
   r
   r
   r   r      s   r   c            	   C   s    t jdt jt jttttdS )Nr   )Únamer   r	   ÚincrementalencoderÚincrementaldecoderÚstreamreaderÚstreamwriter)	ÚcodecsÚ	CodecInfor   r   r	   r   r   r   r   r
   r
   r
   r   Úgetregentry   s    r   )Z_codecs_iso2022r   Z_multibytecodecZmbcZgetcodecr   r   ZMultibyteIncrementalEncoderr   ZMultibyteIncrementalDecoderr   ZMultibyteStreamReaderr   ZMultibyteStreamWriterr   r   r
   r
   r
   r   Ú<module>   s   
ã               @   s   d Z ddlZG dd dejZG dd dejZG dd dejZG d	d
 d
eejZG dd deejZdd ZdZe 	e¡Z
dS )zj Python Character Mapping Codec iso8859_1 generated from 'MAPPINGS/ISO8859/8859-1.TXT' with gencodec.py.

é    Nc               @   s    e Zd ZdddZdddZdS )	ÚCodecÚstrictc             C   s   t  ||t¡S )N)ÚcodecsÚcharmap_encodeÚencoding_table)ÚselfÚinputÚerrors© r
   ú$D:\Python\lib\encodings\iso8859_1.pyÚencode   s    zCodec.encodec             C   s   t  ||t¡S )N)r   Úcharmap_decodeÚdecoding_table)r   r   r	   r
   r
   r   Údecode   s    zCodec.decodeN)r   )r   )Ú__name__Ú
__module__Ú__qualname__r   r   r
   r
   r
   r   r   	   s   
r   c               @   s   e Zd ZdddZdS )ÚIncrementalEncoderFc             C   s   t  || jt¡d S )Nr   )r   r   r	   r   )r   r   Úfinalr
   r
   r   r      s    zIncrementalEncoder.encodeN)F)r   r   r   r   r
   r
   r
   r   r      s   r   c               @   s   e Zd ZdddZdS )ÚIncrementalDecoderFc             C   s   t  || jt¡d S )Nr   )r   r   r	   r   )r   r   r   r
   r
   r   r      s    zIncrementalDecoder.decodeN)F)r   r   r   r   r
   r
   r
   r   r      s   r   c               @   s   e Zd ZdS )ÚStreamWriterN)r   r   r   r
   r
   r
   r   r      s   r   c               @   s   e Zd ZdS )ÚStreamReaderN)r   r   r   r
   r
   r
   r   r      s   r   c            	   C   s    t jdt jt jttttdS )Nz	iso8859-1)Únamer   r   ÚincrementalencoderÚincrementaldecoderÚstreamreaderÚstreamwriter)	r   Ú	CodecInfor   r   r   r   r   r   r   r
   r
   r
   r   Úgetregentry!   s    r   u   	
 !"#$%&'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\]^_`abcdefghijklmnopqrstuvwxyz{|}~ÂÂÂÂÂÂÂÂÂÂÂÂÂÂÂÂÂÂÂÂÂÂÂÂÂÂÂÂÂÂÂÂÂ Â¡Â¢Â£Â¤Â¥Â¦Â§Â¨Â©ÂªÂ«Â¬Â­Â®Â¯Â°Â±Â²Â³Â´ÂµÂ¶Â·Â¸Â¹ÂºÂ»Â¼Â½Â¾Â¿ÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃ Ã¡Ã¢Ã£Ã¤Ã¥Ã¦Ã§Ã¨Ã©ÃªÃ«Ã¬Ã­Ã®Ã¯Ã°Ã±Ã²Ã³Ã´ÃµÃ¶Ã·Ã¸Ã¹ÃºÃ»Ã¼Ã½Ã¾Ã¿)Ú__doc__r   r   r   r   r   r   r   r   Úcharmap_buildr   r
   r
   r
   r   Ú<module>   s     ã               @   s   d Z ddlZG dd dejZG dd dejZG dd dejZG d	d
 d
eejZG dd deejZdd ZdZe 	e¡Z
dS )zl Python Character Mapping Codec iso8859_10 generated from 'MAPPINGS/ISO8859/8859-10.TXT' with gencodec.py.

é    Nc               @   s    e Zd ZdddZdddZdS )	ÚCodecÚstrictc             C   s   t  ||t¡S )N)ÚcodecsÚcharmap_encodeÚencoding_table)ÚselfÚinputÚerrors© r
   ú%D:\Python\lib\encodings\iso8859_10.pyÚencode   s    zCodec.encodec             C   s   t  ||t¡S )N)r   Úcharmap_decodeÚdecoding_table)r   r   r	   r
   r
   r   Údecode   s    zCodec.decodeN)r   )r   )Ú__name__Ú
__module__Ú__qualname__r   r   r
   r
   r
   r   r   	   s   
r   c               @   s   e Zd ZdddZdS )ÚIncrementalEncoderFc             C   s   t  || jt¡d S )Nr   )r   r   r	   r   )r   r   Úfinalr
   r
   r   r      s    zIncrementalEncoder.encodeN)F)r   r   r   r   r
   r
   r
   r   r      s   r   c               @   s   e Zd ZdddZdS )ÚIncrementalDecoderFc             C   s   t  || jt¡d S )Nr   )r   r   r	   r   )r   r   r   r
   r
   r   r      s    zIncrementalDecoder.decodeN)F)r   r   r   r   r
   r
   r
   r   r      s   r   c               @   s   e Zd ZdS )ÚStreamWriterN)r   r   r   r
   r
   r
   r   r      s   r   c               @   s   e Zd ZdS )ÚStreamReaderN)r   r   r   r
   r
   r
   r   r      s   r   c            	   C   s    t jdt jt jttttdS )Nz
iso8859-10)Únamer   r   ÚincrementalencoderÚincrementaldecoderÚstreamreaderÚstreamwriter)	r   Ú	CodecInfor   r   r   r   r   r   r   r
   r
   r
   r   Úgetregentry!   s    r   u   	
 !"#$%&'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\]^_`abcdefghijklmnopqrstuvwxyz{|}~ÂÂÂÂÂÂÂÂÂÂÂÂÂÂÂÂÂÂÂÂÂÂÂÂÂÂÂÂÂÂÂÂÂ ÄÄÄ¢ÄªÄ¨Ä¶Â§Ä»ÄÅ Å¦Å½Â­ÅªÅÂ°ÄÄÄ£Ä«Ä©Ä·Â·Ä¼ÄÅ¡Å§Å¾âÅ«ÅÄÃÃÃÃÃÃÄ®ÄÃÄÃÄÃÃÃÃÅÅÃÃÃÃÅ¨ÃÅ²ÃÃÃÃÃÃÄÃ¡Ã¢Ã£Ã¤Ã¥Ã¦Ä¯ÄÃ©ÄÃ«ÄÃ­Ã®Ã¯Ã°ÅÅÃ³Ã´ÃµÃ¶Å©Ã¸Å³ÃºÃ»Ã¼Ã½Ã¾Ä¸)Ú__doc__r   r   r   r   r   r   r   r   Úcharmap_buildr   r
   r
   r
   r   Ú<module>   s     ã               @   s   d Z ddlZG dd dejZG dd dejZG dd dejZG d	d
 d
eejZG dd deejZdd ZdZe 	e¡Z
dS )zl Python Character Mapping Codec iso8859_11 generated from 'MAPPINGS/ISO8859/8859-11.TXT' with gencodec.py.

é    Nc               @   s    e Zd ZdddZdddZdS )	ÚCodecÚstrictc             C   s   t  ||t¡S )N)ÚcodecsÚcharmap_encodeÚencoding_table)ÚselfÚinputÚerrors© r
   ú%D:\Python\lib\encodings\iso8859_11.pyÚencode   s    zCodec.encodec             C   s   t  ||t¡S )N)r   Úcharmap_decodeÚdecoding_table)r   r   r	   r
   r
   r   Údecode   s    zCodec.decodeN)r   )r   )Ú__name__Ú
__module__Ú__qualname__r   r   r
   r
   r
   r   r   	   s   
r   c               @   s   e Zd ZdddZdS )ÚIncrementalEncoderFc             C   s   t  || jt¡d S )Nr   )r   r   r	   r   )r   r   Úfinalr
   r
   r   r      s    zIncrementalEncoder.encodeN)F)r   r   r   r   r
   r
   r
   r   r      s   r   c               @   s   e Zd ZdddZdS )ÚIncrementalDecoderFc             C   s   t  || jt¡d S )Nr   )r   r   r	   r   )r   r   r   r
   r
   r   r      s    zIncrementalDecoder.decodeN)F)r   r   r   r   r
   r
   r
   r   r      s   r   c               @   s   e Zd ZdS )ÚStreamWriterN)r   r   r   r
   r
   r
   r   r      s   r   c               @   s   e Zd ZdS )ÚStreamReaderN)r   r   r   r
   r
   r
   r   r      s   r   c            	   C   s    t jdt jt jttttdS )Nz
iso8859-11)Únamer   r   ÚincrementalencoderÚincrementaldecoderÚstreamreaderÚstreamwriter)	r   Ú	CodecInfor   r   r   r   r   r   r   r
   r
   r
   r   Úgetregentry!   s    r   uß   	
 !"#$%&'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\]^_`abcdefghijklmnopqrstuvwxyz{|}~ÂÂÂÂÂÂÂÂÂÂÂÂÂÂÂÂÂÂÂÂÂÂÂÂÂÂÂÂÂÂÂÂÂ à¸à¸à¸à¸à¸à¸à¸à¸à¸à¸à¸à¸à¸à¸à¸à¸à¸à¸à¸à¸à¸à¸à¸à¸à¸à¸à¸à¸à¸à¸à¸à¸ à¸¡à¸¢à¸£à¸¤à¸¥à¸¦à¸§à¸¨à¸©à¸ªà¸«à¸¬à¸­à¸®à¸¯à¸°à¸±à¸²à¸³à¸´à¸µà¸¶à¸·à¸¸à¸¹à¸ºï¿¾ï¿¾ï¿¾ï¿¾à¸¿à¹à¹à¹à¹à¹à¹à¹à¹à¹à¹à¹à¹à¹à¹à¹à¹à¹à¹à¹à¹à¹à¹à¹à¹à¹à¹à¹à¹ï¿¾ï¿¾ï¿¾ï¿¾)Ú__doc__r   r   r   r   r   r   r   r   Úcharmap_buildr   r
   r
   r
   r   Ú<module>   s     ã               @   s   d Z ddlZG dd dejZG dd dejZG dd dejZG d	d
 d
eejZG dd deejZdd ZdZe 	e¡Z
dS )zl Python Character Mapping Codec iso8859_13 generated from 'MAPPINGS/ISO8859/8859-13.TXT' with gencodec.py.

é    Nc               @   s    e Zd ZdddZdddZdS )	ÚCodecÚstrictc             C   s   t  ||t¡S )N)ÚcodecsÚcharmap_encodeÚencoding_table)ÚselfÚinputÚerrors© r
   ú%D:\Python\lib\encodings\iso8859_13.pyÚencode   s    zCodec.encodec             C   s   t  ||t¡S )N)r   Úcharmap_decodeÚdecoding_table)r   r   r	   r
   r
   r   Údecode   s    zCodec.decodeN)r   )r   )Ú__name__Ú
__module__Ú__qualname__r   r   r
   r
   r
   r   r   	   s   
r   c               @   s   e Zd ZdddZdS )ÚIncrementalEncoderFc             C   s   t  || jt¡d S )Nr   )r   r   r	   r   )r   r   Úfinalr
   r
   r   r      s    zIncrementalEncoder.encodeN)F)r   r   r   r   r
   r
   r
   r   r      s   r   c               @   s   e Zd ZdddZdS )ÚIncrementalDecoderFc             C   s   t  || jt¡d S )Nr   )r   r   r	   r   )r   r   r   r
   r
   r   r      s    zIncrementalDecoder.decodeN)F)r   r   r   r   r
   r
   r
   r   r      s   r   c               @   s   e Zd ZdS )ÚStreamWriterN)r   r   r   r
   r
   r
   r   r      s   r   c               @   s   e Zd ZdS )ÚStreamReaderN)r   r   r   r
   r
   r
   r   r      s   r   c            	   C   s    t jdt jt jttttdS )Nz
iso8859-13)Únamer   r   ÚincrementalencoderÚincrementaldecoderÚstreamreaderÚstreamwriter)	r   Ú	CodecInfor   r   r   r   r   r   r   r
   r
   r
   r   Úgetregentry!   s    r   u   	
 !"#$%&'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\]^_`abcdefghijklmnopqrstuvwxyz{|}~ÂÂÂÂÂÂÂÂÂÂÂÂÂÂÂÂÂÂÂÂÂÂÂÂÂÂÂÂÂÂÂÂÂ âÂ¢Â£Â¤âÂ¦Â§ÃÂ©ÅÂ«Â¬Â­Â®ÃÂ°Â±Â²Â³âÂµÂ¶Â·Ã¸Â¹ÅÂ»Â¼Â½Â¾Ã¦ÄÄ®ÄÄÃÃÄÄÄÃÅ¹ÄÄ¢Ä¶ÄªÄ»Å ÅÅÃÅÃÃÃÅ²ÅÅÅªÃÅ»Å½ÃÄÄ¯ÄÄÃ¤Ã¥ÄÄÄÃ©ÅºÄÄ£Ä·Ä«Ä¼Å¡ÅÅÃ³ÅÃµÃ¶Ã·Å³ÅÅÅ«Ã¼Å¼Å¾â)Ú__doc__r   r   r   r   r   r   r   r   Úcharmap_buildr   r
   r
   r
   r   Ú<module>   s     ã               @   s   d Z ddlZG dd dejZG dd dejZG dd dejZG d	d
 d
eejZG dd deejZdd ZdZe 	e¡Z
dS )zl Python Character Mapping Codec iso8859_14 generated from 'MAPPINGS/ISO8859/8859-14.TXT' with gencodec.py.

é    Nc               @   s    e Zd ZdddZdddZdS )	ÚCodecÚstrictc             C   s   t  ||t¡S )N)ÚcodecsÚcharmap_encodeÚencoding_table)ÚselfÚinputÚerrors© r
   ú%D:\Python\lib\encodings\iso8859_14.pyÚencode   s    zCodec.encodec             C   s   t  ||t¡S )N)r   Úcharmap_decodeÚdecoding_table)r   r   r	   r
   r
   r   Údecode   s    zCodec.decodeN)r   )r   )Ú__name__Ú
__module__Ú__qualname__r   r   r
   r
   r
   r   r   	   s   
r   c               @   s   e Zd ZdddZdS )ÚIncrementalEncoderFc             C   s   t  || jt¡d S )Nr   )r   r   r	   r   )r   r   Úfinalr
   r
   r   r      s    zIncrementalEncoder.encodeN)F)r   r   r   r   r
   r
   r
   r   r      s   r   c               @   s   e Zd ZdddZdS )ÚIncrementalDecoderFc             C   s   t  || jt¡d S )Nr   )r   r   r	   r   )r   r   r   r
   r
   r   r      s    zIncrementalDecoder.decodeN)F)r   r   r   r   r
   r
   r
   r   r      s   r   c               @   s   e Zd ZdS )ÚStreamWriterN)r   r   r   r
   r
   r
   r   r      s   r   c               @   s   e Zd ZdS )ÚStreamReaderN)r   r   r   r
   r
   r
   r   r      s   r   c            	   C   s    t jdt jt jttttdS )Nz
iso8859-14)Únamer   r   ÚincrementalencoderÚincrementaldecoderÚstreamreaderÚstreamwriter)	r   Ú	CodecInfor   r   r   r   r   r   r   r
   r
   r
   r   Úgetregentry!   s    r   u   	
 !"#$%&'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\]^_`abcdefghijklmnopqrstuvwxyz{|}~ÂÂÂÂÂÂÂÂÂÂÂÂÂÂÂÂÂÂÂÂÂÂÂÂÂÂÂÂÂÂÂÂÂ á¸á¸Â£ÄÄá¸Â§áºÂ©áºá¸á»²Â­Â®Å¸á¸á¸Ä Ä¡á¹á¹Â¶á¹áºá¹áºá¹ á»³áºáºá¹¡ÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÅ´ÃÃÃÃÃÃá¹ªÃÃÃÃÃÃÅ¶ÃÃ Ã¡Ã¢Ã£Ã¤Ã¥Ã¦Ã§Ã¨Ã©ÃªÃ«Ã¬Ã­Ã®Ã¯ÅµÃ±Ã²Ã³Ã´ÃµÃ¶á¹«Ã¸Ã¹ÃºÃ»Ã¼Ã½Å·Ã¿)Ú__doc__r   r   r   r   r   r   r   r   Úcharmap_buildr   r
   r
   r
   r   Ú<module>   s     ã               @   s   d Z ddlZG dd dejZG dd dejZG dd dejZG d	d
 d
eejZG dd deejZdd ZdZe 	e¡Z
dS )zl Python Character Mapping Codec iso8859_15 generated from 'MAPPINGS/ISO8859/8859-15.TXT' with gencodec.py.

é    Nc               @   s    e Zd ZdddZdddZdS )	ÚCodecÚstrictc             C   s   t  ||t¡S )N)ÚcodecsÚcharmap_encodeÚencoding_table)ÚselfÚinputÚerrors© r
   ú%D:\Python\lib\encodings\iso8859_15.pyÚencode   s    zCodec.encodec             C   s   t  ||t¡S )N)r   Úcharmap_decodeÚdecoding_table)r   r   r	   r
   r
   r   Údecode   s    zCodec.decodeN)r   )r   )Ú__name__Ú
__module__Ú__qualname__r   r   r
   r
   r
   r   r   	   s   
r   c               @   s   e Zd ZdddZdS )ÚIncrementalEncoderFc             C   s   t  || jt¡d S )Nr   )r   r   r	   r   )r   r   Úfinalr
   r
   r   r      s    zIncrementalEncoder.encodeN)F)r   r   r   r   r
   r
   r
   r   r      s   r   c               @   s   e Zd ZdddZdS )ÚIncrementalDecoderFc             C   s   t  || jt¡d S )Nr   )r   r   r	   r   )r   r   r   r
   r
   r   r      s    zIncrementalDecoder.decodeN)F)r   r   r   r   r
   r
   r
   r   r      s   r   c               @   s   e Zd ZdS )ÚStreamWriterN)r   r   r   r
   r
   r
   r   r      s   r   c               @   s   e Zd ZdS )ÚStreamReaderN)r   r   r   r
   r
   r
   r   r      s   r   c            	   C   s    t jdt jt jttttdS )Nz
iso8859-15)Únamer   r   ÚincrementalencoderÚincrementaldecoderÚstreamreaderÚstreamwriter)	r   Ú	CodecInfor   r   r   r   r   r   r   r
   r
   r
   r   Úgetregentry!   s    r   u   	
 !"#$%&'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\]^_`abcdefghijklmnopqrstuvwxyz{|}~ÂÂÂÂÂÂÂÂÂÂÂÂÂÂÂÂÂÂÂÂÂÂÂÂÂÂÂÂÂÂÂÂÂ Â¡Â¢Â£â¬Â¥Å Â§Å¡Â©ÂªÂ«Â¬Â­Â®Â¯Â°Â±Â²Â³Å½ÂµÂ¶Â·Å¾Â¹ÂºÂ»ÅÅÅ¸Â¿ÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃ Ã¡Ã¢Ã£Ã¤Ã¥Ã¦Ã§Ã¨Ã©ÃªÃ«Ã¬Ã­Ã®Ã¯Ã°Ã±Ã²Ã³Ã´ÃµÃ¶Ã·Ã¸Ã¹ÃºÃ»Ã¼Ã½Ã¾Ã¿)Ú__doc__r   r   r   r   r   r   r   r   Úcharmap_buildr   r
   r
   r
   r   Ú<module>   s     ã               @   s   d Z ddlZG dd dejZG dd dejZG dd dejZG d	d
 d
eejZG dd deejZdd ZdZe 	e¡Z
dS )zl Python Character Mapping Codec iso8859_16 generated from 'MAPPINGS/ISO8859/8859-16.TXT' with gencodec.py.

é    Nc               @   s    e Zd ZdddZdddZdS )	ÚCodecÚstrictc             C   s   t  ||t¡S )N)ÚcodecsÚcharmap_encodeÚencoding_table)ÚselfÚinputÚerrors© r
   ú%D:\Python\lib\encodings\iso8859_16.pyÚencode   s    zCodec.encodec             C   s   t  ||t¡S )N)r   Úcharmap_decodeÚdecoding_table)r   r   r	   r
   r
   r   Údecode   s    zCodec.decodeN)r   )r   )Ú__name__Ú
__module__Ú__qualname__r   r   r
   r
   r
   r   r   	   s   
r   c               @   s   e Zd ZdddZdS )ÚIncrementalEncoderFc             C   s   t  || jt¡d S )Nr   )r   r   r	   r   )r   r   Úfinalr
   r
   r   r      s    zIncrementalEncoder.encodeN)F)r   r   r   r   r
   r
   r
   r   r      s   r   c               @   s   e Zd ZdddZdS )ÚIncrementalDecoderFc             C   s   t  || jt¡d S )Nr   )r   r   r	   r   )r   r   r   r
   r
   r   r      s    zIncrementalDecoder.decodeN)F)r   r   r   r   r
   r
   r
   r   r      s   r   c               @   s   e Zd ZdS )ÚStreamWriterN)r   r   r   r
   r
   r
   r   r      s   r   c               @   s   e Zd ZdS )ÚStreamReaderN)r   r   r   r
   r
   r
   r   r      s   r   c            	   C   s    t jdt jt jttttdS )Nz
iso8859-16)Únamer   r   ÚincrementalencoderÚincrementaldecoderÚstreamreaderÚstreamwriter)	r   Ú	CodecInfor   r   r   r   r   r   r   r
   r
   r
   r   Úgetregentry!   s    r   u   	
 !"#$%&'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\]^_`abcdefghijklmnopqrstuvwxyz{|}~ÂÂÂÂÂÂÂÂÂÂÂÂÂÂÂÂÂÂÂÂÂÂÂÂÂÂÂÂÂÂÂÂÂ ÄÄÅâ¬âÅ Â§Å¡Â©ÈÂ«Å¹Â­ÅºÅ»Â°Â±ÄÅÅ½âÂ¶Â·Å¾ÄÈÂ»ÅÅÅ¸Å¼ÃÃÃÄÃÄÃÃÃÃÃÃÃÃÃÃÄÅÃÃÃÅÃÅÅ°ÃÃÃÃÄÈÃÃ Ã¡Ã¢ÄÃ¤ÄÃ¦Ã§Ã¨Ã©ÃªÃ«Ã¬Ã­Ã®Ã¯ÄÅÃ²Ã³Ã´ÅÃ¶ÅÅ±Ã¹ÃºÃ»Ã¼ÄÈÃ¿)Ú__doc__r   r   r   r   r   r   r   r   Úcharmap_buildr   r
   r
   r
   r   Ú<module>   s     ã               @   s   d Z ddlZG dd dejZG dd dejZG dd dejZG d	d
 d
eejZG dd deejZdd ZdZe 	e¡Z
dS )zj Python Character Mapping Codec iso8859_2 generated from 'MAPPINGS/ISO8859/8859-2.TXT' with gencodec.py.

é    Nc               @   s    e Zd ZdddZdddZdS )	ÚCodecÚstrictc             C   s   t  ||t¡S )N)ÚcodecsÚcharmap_encodeÚencoding_table)ÚselfÚinputÚerrors© r
   ú$D:\Python\lib\encodings\iso8859_2.pyÚencode   s    zCodec.encodec             C   s   t  ||t¡S )N)r   Úcharmap_decodeÚdecoding_table)r   r   r	   r
   r
   r   Údecode   s    zCodec.decodeN)r   )r   )Ú__name__Ú
__module__Ú__qualname__r   r   r
   r
   r
   r   r   	   s   
r   c               @   s   e Zd ZdddZdS )ÚIncrementalEncoderFc             C   s   t  || jt¡d S )Nr   )r   r   r	   r   )r   r   Úfinalr
   r
   r   r      s    zIncrementalEncoder.encodeN)F)r   r   r   r   r
   r
   r
   r   r      s   r   c               @   s   e Zd ZdddZdS )ÚIncrementalDecoderFc             C   s   t  || jt¡d S )Nr   )r   r   r	   r   )r   r   r   r
   r
   r   r      s    zIncrementalDecoder.decodeN)F)r   r   r   r   r
   r
   r
   r   r      s   r   c               @   s   e Zd ZdS )ÚStreamWriterN)r   r   r   r
   r
   r
   r   r      s   r   c               @   s   e Zd ZdS )ÚStreamReaderN)r   r   r   r
   r
   r
   r   r      s   r   c            	   C   s    t jdt jt jttttdS )Nz	iso8859-2)Únamer   r   ÚincrementalencoderÚincrementaldecoderÚstreamreaderÚstreamwriter)	r   Ú	CodecInfor   r   r   r   r   r   r   r
   r
   r
   r   Úgetregentry!   s    r   u   	
 !"#$%&'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\]^_`abcdefghijklmnopqrstuvwxyz{|}~ÂÂÂÂÂÂÂÂÂÂÂÂÂÂÂÂÂÂÂÂÂÂÂÂÂÂÂÂÂÂÂÂÂ ÄËÅÂ¤Ä½ÅÂ§Â¨Å ÅÅ¤Å¹Â­Å½Å»Â°ÄËÅÂ´Ä¾ÅËÂ¸Å¡ÅÅ¥ÅºËÅ¾Å¼ÅÃÃÄÃÄ¹ÄÃÄÃÄÃÄÃÃÄÄÅÅÃÃÅÃÃÅÅ®ÃÅ°ÃÃÅ¢ÃÅÃ¡Ã¢ÄÃ¤ÄºÄÃ§ÄÃ©ÄÃ«ÄÃ­Ã®ÄÄÅÅÃ³Ã´ÅÃ¶Ã·ÅÅ¯ÃºÅ±Ã¼Ã½Å£Ë)Ú__doc__r   r   r   r   r   r   r   r   Úcharmap_buildr   r
   r
   r
   r   Ú<module>   s     ã               @   s   d Z ddlZG dd dejZG dd dejZG dd dejZG d	d
 d
eejZG dd deejZdd ZdZe 	e¡Z
dS )zj Python Character Mapping Codec iso8859_3 generated from 'MAPPINGS/ISO8859/8859-3.TXT' with gencodec.py.

é    Nc               @   s    e Zd ZdddZdddZdS )	ÚCodecÚstrictc             C   s   t  ||t¡S )N)ÚcodecsÚcharmap_encodeÚencoding_table)ÚselfÚinputÚerrors© r
   ú$D:\Python\lib\encodings\iso8859_3.pyÚencode   s    zCodec.encodec             C   s   t  ||t¡S )N)r   Úcharmap_decodeÚdecoding_table)r   r   r	   r
   r
   r   Údecode   s    zCodec.decodeN)r   )r   )Ú__name__Ú
__module__Ú__qualname__r   r   r
   r
   r
   r   r   	   s   
r   c               @   s   e Zd ZdddZdS )ÚIncrementalEncoderFc             C   s   t  || jt¡d S )Nr   )r   r   r	   r   )r   r   Úfinalr
   r
   r   r      s    zIncrementalEncoder.encodeN)F)r   r   r   r   r
   r
   r
   r   r      s   r   c               @   s   e Zd ZdddZdS )ÚIncrementalDecoderFc             C   s   t  || jt¡d S )Nr   )r   r   r	   r   )r   r   r   r
   r
   r   r      s    zIncrementalDecoder.decodeN)F)r   r   r   r   r
   r
   r
   r   r      s   r   c               @   s   e Zd ZdS )ÚStreamWriterN)r   r   r   r
   r
   r
   r   r      s   r   c               @   s   e Zd ZdS )ÚStreamReaderN)r   r   r   r
   r
   r
   r   r      s   r   c            	   C   s    t jdt jt jttttdS )Nz	iso8859-3)Únamer   r   ÚincrementalencoderÚincrementaldecoderÚstreamreaderÚstreamwriter)	r   Ú	CodecInfor   r   r   r   r   r   r   r
   r
   r
   r   Úgetregentry!   s    r   u   	
 !"#$%&'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\]^_`abcdefghijklmnopqrstuvwxyz{|}~ÂÂÂÂÂÂÂÂÂÂÂÂÂÂÂÂÂÂÂÂÂÂÂÂÂÂÂÂÂÂÂÂÂ Ä¦ËÂ£Â¤ï¿¾Ä¤Â§Â¨Ä°ÅÄÄ´Â­ï¿¾Å»Â°Ä§Â²Â³Â´ÂµÄ¥Â·Â¸Ä±ÅÄÄµÂ½ï¿¾Å¼ÃÃÃï¿¾ÃÄÄÃÃÃÃÃÃÃÃÃï¿¾ÃÃÃÃÄ ÃÃÄÃÃÃÃÅ¬ÅÃÃ Ã¡Ã¢ï¿¾Ã¤ÄÄÃ§Ã¨Ã©ÃªÃ«Ã¬Ã­Ã®Ã¯ï¿¾Ã±Ã²Ã³Ã´Ä¡Ã¶Ã·ÄÃ¹ÃºÃ»Ã¼Å­ÅË)Ú__doc__r   r   r   r   r   r   r   r   Úcharmap_buildr   r
   r
   r
   r   Ú<module>   s     ã               @   s   d Z ddlZG dd dejZG dd dejZG dd dejZG d	d
 d
eejZG dd deejZdd ZdZe 	e¡Z
dS )zj Python Character Mapping Codec iso8859_4 generated from 'MAPPINGS/ISO8859/8859-4.TXT' with gencodec.py.

é    Nc               @   s    e Zd ZdddZdddZdS )	ÚCodecÚstrictc             C   s   t  ||t¡S )N)ÚcodecsÚcharmap_encodeÚencoding_table)ÚselfÚinputÚerrors© r
   ú$D:\Python\lib\encodings\iso8859_4.pyÚencode   s    zCodec.encodec             C   s   t  ||t¡S )N)r   Úcharmap_decodeÚdecoding_table)r   r   r	   r
   r
   r   Údecode   s    zCodec.decodeN)r   )r   )Ú__name__Ú
__module__Ú__qualname__r   r   r
   r
   r
   r   r   	   s   
r   c               @   s   e Zd ZdddZdS )ÚIncrementalEncoderFc             C   s   t  || jt¡d S )Nr   )r   r   r	   r   )r   r   Úfinalr
   r
   r   r      s    zIncrementalEncoder.encodeN)F)r   r   r   r   r
   r
   r
   r   r      s   r   c               @   s   e Zd ZdddZdS )ÚIncrementalDecoderFc             C   s   t  || jt¡d S )Nr   )r   r   r	   r   )r   r   r   r
   r
   r   r      s    zIncrementalDecoder.decodeN)F)r   r   r   r   r
   r
   r
   r   r      s   r   c               @   s   e Zd ZdS )ÚStreamWriterN)r   r   r   r
   r
   r
   r   r      s   r   c               @   s   e Zd ZdS )ÚStreamReaderN)r   r   r   r
   r
   r
   r   r      s   r   c            	   C   s    t jdt jt jttttdS )Nz	iso8859-4)Únamer   r   ÚincrementalencoderÚincrementaldecoderÚstreamreaderÚstreamwriter)	r   Ú	CodecInfor   r   r   r   r   r   r   r
   r
   r
   r   Úgetregentry!   s    r   u   	
 !"#$%&'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\]^_`abcdefghijklmnopqrstuvwxyz{|}~ÂÂÂÂÂÂÂÂÂÂÂÂÂÂÂÂÂÂÂÂÂÂÂÂÂÂÂÂÂÂÂÂÂ ÄÄ¸ÅÂ¤Ä¨Ä»Â§Â¨Å ÄÄ¢Å¦Â­Å½Â¯Â°ÄËÅÂ´Ä©Ä¼ËÂ¸Å¡ÄÄ£Å§ÅÅ¾ÅÄÃÃÃÃÃÃÄ®ÄÃÄÃÄÃÃÄªÄÅÅÄ¶ÃÃÃÃÃÅ²ÃÃÃÅ¨ÅªÃÄÃ¡Ã¢Ã£Ã¤Ã¥Ã¦Ä¯ÄÃ©ÄÃ«ÄÃ­Ã®Ä«ÄÅÅÄ·Ã´ÃµÃ¶Ã·Ã¸Å³ÃºÃ»Ã¼Å©Å«Ë)Ú__doc__r   r   r   r   r   r   r   r   Úcharmap_buildr   r
   r
   r
   r   Ú<module>   s     ã               @   s   d Z ddlZG dd dejZG dd dejZG dd dejZG d	d
 d
eejZG dd deejZdd ZdZe 	e¡Z
dS )zj Python Character Mapping Codec iso8859_5 generated from 'MAPPINGS/ISO8859/8859-5.TXT' with gencodec.py.

é    Nc               @   s    e Zd ZdddZdddZdS )	ÚCodecÚstrictc             C   s   t  ||t¡S )N)ÚcodecsÚcharmap_encodeÚencoding_table)ÚselfÚinputÚerrors© r
   ú$D:\Python\lib\encodings\iso8859_5.pyÚencode   s    zCodec.encodec             C   s   t  ||t¡S )N)r   Úcharmap_decodeÚdecoding_table)r   r   r	   r
   r
   r   Údecode   s    zCodec.decodeN)r   )r   )Ú__name__Ú
__module__Ú__qualname__r   r   r
   r
   r
   r   r   	   s   
r   c               @   s   e Zd ZdddZdS )ÚIncrementalEncoderFc             C   s   t  || jt¡d S )Nr   )r   r   r	   r   )r   r   Úfinalr
   r
   r   r      s    zIncrementalEncoder.encodeN)F)r   r   r   r   r
   r
   r
   r   r      s   r   c               @   s   e Zd ZdddZdS )ÚIncrementalDecoderFc             C   s   t  || jt¡d S )Nr   )r   r   r	   r   )r   r   r   r
   r
   r   r      s    zIncrementalDecoder.decodeN)F)r   r   r   r   r
   r
   r
   r   r      s   r   c               @   s   e Zd ZdS )ÚStreamWriterN)r   r   r   r
   r
   r
   r   r      s   r   c               @   s   e Zd ZdS )ÚStreamReaderN)r   r   r   r
   r
   r
   r   r      s   r   c            	   C   s    t jdt jt jttttdS )Nz	iso8859-5)Únamer   r   ÚincrementalencoderÚincrementaldecoderÚstreamreaderÚstreamwriter)	r   Ú	CodecInfor   r   r   r   r   r   r   r
   r
   r
   r   Úgetregentry!   s    r   u   	
 !"#$%&'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\]^_`abcdefghijklmnopqrstuvwxyz{|}~ÂÂÂÂÂÂÂÂÂÂÂÂÂÂÂÂÂÂÂÂÂÂÂÂÂÂÂÂÂÂÂÂÂ ÐÐÐÐÐÐÐÐÐÐÐÐÂ­ÐÐÐÐÐÐÐÐÐÐÐÐÐÐÐÐÐÐÐ Ð¡Ð¢Ð£Ð¤Ð¥Ð¦Ð§Ð¨Ð©ÐªÐ«Ð¬Ð­Ð®Ð¯Ð°Ð±Ð²Ð³Ð´ÐµÐ¶Ð·Ð¸Ð¹ÐºÐ»Ð¼Ð½Ð¾Ð¿ÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑâÑÑÑÑÑÑÑÑÑÑÑÑÂ§ÑÑ)Ú__doc__r   r   r   r   r   r   r   r   Úcharmap_buildr   r
   r
   r
   r   Ú<module>   s     ã               @   s   d Z ddlZG dd dejZG dd dejZG dd dejZG d	d
 d
eejZG dd deejZdd ZdZe 	e¡Z
dS )zj Python Character Mapping Codec iso8859_6 generated from 'MAPPINGS/ISO8859/8859-6.TXT' with gencodec.py.

é    Nc               @   s    e Zd ZdddZdddZdS )	ÚCodecÚstrictc             C   s   t  ||t¡S )N)ÚcodecsÚcharmap_encodeÚencoding_table)ÚselfÚinputÚerrors© r
   ú$D:\Python\lib\encodings\iso8859_6.pyÚencode   s    zCodec.encodec             C   s   t  ||t¡S )N)r   Úcharmap_decodeÚdecoding_table)r   r   r	   r
   r
   r   Údecode   s    zCodec.decodeN)r   )r   )Ú__name__Ú
__module__Ú__qualname__r   r   r
   r
   r
   r   r   	   s   
r   c               @   s   e Zd ZdddZdS )ÚIncrementalEncoderFc             C   s   t  || jt¡d S )Nr   )r   r   r	   r   )r   r   Úfinalr
   r
   r   r      s    zIncrementalEncoder.encodeN)F)r   r   r   r   r
   r
   r
   r   r      s   r   c               @   s   e Zd ZdddZdS )ÚIncrementalDecoderFc             C   s   t  || jt¡d S )Nr   )r   r   r	   r   )r   r   r   r
   r
   r   r      s    zIncrementalDecoder.decodeN)F)r   r   r   r   r
   r
   r
   r   r      s   r   c               @   s   e Zd ZdS )ÚStreamWriterN)r   r   r   r
   r
   r
   r   r      s   r   c               @   s   e Zd ZdS )ÚStreamReaderN)r   r   r   r
   r
   r
   r   r      s   r   c            	   C   s    t jdt jt jttttdS )Nz	iso8859-6)Únamer   r   ÚincrementalencoderÚincrementaldecoderÚstreamreaderÚstreamwriter)	r   Ú	CodecInfor   r   r   r   r   r   r   r
   r
   r
   r   Úgetregentry!   s    r   u­   	
 !"#$%&'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\]^_`abcdefghijklmnopqrstuvwxyz{|}~ÂÂÂÂÂÂÂÂÂÂÂÂÂÂÂÂÂÂÂÂÂÂÂÂÂÂÂÂÂÂÂÂÂ ï¿¾ï¿¾ï¿¾Â¤ï¿¾ï¿¾ï¿¾ï¿¾ï¿¾ï¿¾ï¿¾ØÂ­ï¿¾ï¿¾ï¿¾ï¿¾ï¿¾ï¿¾ï¿¾ï¿¾ï¿¾ï¿¾ï¿¾ï¿¾ï¿¾Øï¿¾ï¿¾ï¿¾Øï¿¾Ø¡Ø¢Ø£Ø¤Ø¥Ø¦Ø§Ø¨Ø©ØªØ«Ø¬Ø­Ø®Ø¯Ø°Ø±Ø²Ø³Ø´ØµØ¶Ø·Ø¸Ø¹Øºï¿¾ï¿¾ï¿¾ï¿¾ï¿¾ÙÙÙÙÙÙÙÙÙÙÙÙÙÙÙÙÙÙÙï¿¾ï¿¾ï¿¾ï¿¾ï¿¾ï¿¾ï¿¾ï¿¾ï¿¾ï¿¾ï¿¾ï¿¾ï¿¾)Ú__doc__r   r   r   r   r   r   r   r   Úcharmap_buildr   r
   r
   r
   r   Ú<module>   s     ã               @   s   d Z ddlZG dd dejZG dd dejZG dd dejZG d	d
 d
eejZG dd deejZdd ZdZe 	e¡Z
dS )zj Python Character Mapping Codec iso8859_7 generated from 'MAPPINGS/ISO8859/8859-7.TXT' with gencodec.py.

é    Nc               @   s    e Zd ZdddZdddZdS )	ÚCodecÚstrictc             C   s   t  ||t¡S )N)ÚcodecsÚcharmap_encodeÚencoding_table)ÚselfÚinputÚerrors© r
   ú$D:\Python\lib\encodings\iso8859_7.pyÚencode   s    zCodec.encodec             C   s   t  ||t¡S )N)r   Úcharmap_decodeÚdecoding_table)r   r   r	   r
   r
   r   Údecode   s    zCodec.decodeN)r   )r   )Ú__name__Ú
__module__Ú__qualname__r   r   r
   r
   r
   r   r   	   s   
r   c               @   s   e Zd ZdddZdS )ÚIncrementalEncoderFc             C   s   t  || jt¡d S )Nr   )r   r   r	   r   )r   r   Úfinalr
   r
   r   r      s    zIncrementalEncoder.encodeN)F)r   r   r   r   r
   r
   r
   r   r      s   r   c               @   s   e Zd ZdddZdS )ÚIncrementalDecoderFc             C   s   t  || jt¡d S )Nr   )r   r   r	   r   )r   r   r   r
   r
   r   r      s    zIncrementalDecoder.decodeN)F)r   r   r   r   r
   r
   r
   r   r      s   r   c               @   s   e Zd ZdS )ÚStreamWriterN)r   r   r   r
   r
   r
   r   r      s   r   c               @   s   e Zd ZdS )ÚStreamReaderN)r   r   r   r
   r
   r
   r   r      s   r   c            	   C   s    t jdt jt jttttdS )Nz	iso8859-7)Únamer   r   ÚincrementalencoderÚincrementaldecoderÚstreamreaderÚstreamwriter)	r   Ú	CodecInfor   r   r   r   r   r   r   r
   r
   r
   r   Úgetregentry!   s    r   u   	
 !"#$%&'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\]^_`abcdefghijklmnopqrstuvwxyz{|}~ÂÂÂÂÂÂÂÂÂÂÂÂÂÂÂÂÂÂÂÂÂÂÂÂÂÂÂÂÂÂÂÂÂ ââÂ£â¬â¯Â¦Â§Â¨Â©ÍºÂ«Â¬Â­ï¿¾âÂ°Â±Â²Â³ÎÎÎÂ·ÎÎÎÂ»ÎÂ½ÎÎÎÎÎÎÎÎÎÎÎÎÎÎÎÎÎÎÎ Î¡ï¿¾Î£Î¤Î¥Î¦Î§Î¨Î©ÎªÎ«Î¬Î­Î®Î¯Î°Î±Î²Î³Î´ÎµÎ¶Î·Î¸Î¹ÎºÎ»Î¼Î½Î¾Î¿ÏÏÏÏÏÏÏÏÏÏÏÏÏÏÏï¿¾)Ú__doc__r   r   r   r   r   r   r   r   Úcharmap_buildr   r
   r
   r
   r   Ú<module>   s     ã               @   s   d Z ddlZG dd dejZG dd dejZG dd dejZG d	d
 d
eejZG dd deejZdd ZdZe 	e¡Z
dS )zj Python Character Mapping Codec iso8859_8 generated from 'MAPPINGS/ISO8859/8859-8.TXT' with gencodec.py.

é    Nc               @   s    e Zd ZdddZdddZdS )	ÚCodecÚstrictc             C   s   t  ||t¡S )N)ÚcodecsÚcharmap_encodeÚencoding_table)ÚselfÚinputÚerrors© r
   ú$D:\Python\lib\encodings\iso8859_8.pyÚencode   s    zCodec.encodec             C   s   t  ||t¡S )N)r   Úcharmap_decodeÚdecoding_table)r   r   r	   r
   r
   r   Údecode   s    zCodec.decodeN)r   )r   )Ú__name__Ú
__module__Ú__qualname__r   r   r
   r
   r
   r   r   	   s   
r   c               @   s   e Zd ZdddZdS )ÚIncrementalEncoderFc             C   s   t  || jt¡d S )Nr   )r   r   r	   r   )r   r   Úfinalr
   r
   r   r      s    zIncrementalEncoder.encodeN)F)r   r   r   r   r
   r
   r
   r   r      s   r   c               @   s   e Zd ZdddZdS )ÚIncrementalDecoderFc             C   s   t  || jt¡d S )Nr   )r   r   r	   r   )r   r   r   r
   r
   r   r      s    zIncrementalDecoder.decodeN)F)r   r   r   r   r
   r
   r
   r   r      s   r   c               @   s   e Zd ZdS )ÚStreamWriterN)r   r   r   r
   r
   r
   r   r      s   r   c               @   s   e Zd ZdS )ÚStreamReaderN)r   r   r   r
   r
   r
   r   r      s   r   c            	   C   s    t jdt jt jttttdS )Nz	iso8859-8)Únamer   r   ÚincrementalencoderÚincrementaldecoderÚstreamreaderÚstreamwriter)	r   Ú	CodecInfor   r   r   r   r   r   r   r
   r
   r
   r   Úgetregentry!   s    r   u§   	
 !"#$%&'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\]^_`abcdefghijklmnopqrstuvwxyz{|}~ÂÂÂÂÂÂÂÂÂÂÂÂÂÂÂÂÂÂÂÂÂÂÂÂÂÂÂÂÂÂÂÂÂ ï¿¾Â¢Â£Â¤Â¥Â¦Â§Â¨Â©ÃÂ«Â¬Â­Â®Â¯Â°Â±Â²Â³Â´ÂµÂ¶Â·Â¸Â¹Ã·Â»Â¼Â½Â¾ï¿¾ï¿¾ï¿¾ï¿¾ï¿¾ï¿¾ï¿¾ï¿¾ï¿¾ï¿¾ï¿¾ï¿¾ï¿¾ï¿¾ï¿¾ï¿¾ï¿¾ï¿¾ï¿¾ï¿¾ï¿¾ï¿¾ï¿¾ï¿¾ï¿¾ï¿¾ï¿¾ï¿¾ï¿¾ï¿¾ï¿¾ï¿¾â××××××××××××××××× ×¡×¢×£×¤×¥×¦×§×¨×©×ªï¿¾ï¿¾ââï¿¾)Ú__doc__r   r   r   r   r   r   r   r   Úcharmap_buildr   r
   r
   r
   r   Ú<module>   s     ã               @   s   d Z ddlZG dd dejZG dd dejZG dd dejZG d	d
 d
eejZG dd deejZdd ZdZe 	e¡Z
dS )zj Python Character Mapping Codec iso8859_9 generated from 'MAPPINGS/ISO8859/8859-9.TXT' with gencodec.py.

é    Nc               @   s    e Zd ZdddZdddZdS )	ÚCodecÚstrictc             C   s   t  ||t¡S )N)ÚcodecsÚcharmap_encodeÚencoding_table)ÚselfÚinputÚerrors© r
   ú$D:\Python\lib\encodings\iso8859_9.pyÚencode   s    zCodec.encodec             C   s   t  ||t¡S )N)r   Úcharmap_decodeÚdecoding_table)r   r   r	   r
   r
   r   Údecode   s    zCodec.decodeN)r   )r   )Ú__name__Ú
__module__Ú__qualname__r   r   r
   r
   r
   r   r   	   s   
r   c               @   s   e Zd ZdddZdS )ÚIncrementalEncoderFc             C   s   t  || jt¡d S )Nr   )r   r   r	   r   )r   r   Úfinalr
   r
   r   r      s    zIncrementalEncoder.encodeN)F)r   r   r   r   r
   r
   r
   r   r      s   r   c               @   s   e Zd ZdddZdS )ÚIncrementalDecoderFc             C   s   t  || jt¡d S )Nr   )r   r   r	   r   )r   r   r   r
   r
   r   r      s    zIncrementalDecoder.decodeN)F)r   r   r   r   r
   r
   r
   r   r      s   r   c               @   s   e Zd ZdS )ÚStreamWriterN)r   r   r   r
   r
   r
   r   r      s   r   c               @   s   e Zd ZdS )ÚStreamReaderN)r   r   r   r
   r
   r
   r   r      s   r   c            	   C   s    t jdt jt jttttdS )Nz	iso8859-9)Únamer   r   ÚincrementalencoderÚincrementaldecoderÚstreamreaderÚstreamwriter)	r   Ú	CodecInfor   r   r   r   r   r   r   r
   r
   r
   r   Úgetregentry!   s    r   u   	
 !"#$%&'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\]^_`abcdefghijklmnopqrstuvwxyz{|}~ÂÂÂÂÂÂÂÂÂÂÂÂÂÂÂÂÂÂÂÂÂÂÂÂÂÂÂÂÂÂÂÂÂ Â¡Â¢Â£Â¤Â¥Â¦Â§Â¨Â©ÂªÂ«Â¬Â­Â®Â¯Â°Â±Â²Â³Â´ÂµÂ¶Â·Â¸Â¹ÂºÂ»Â¼Â½Â¾Â¿ÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÄÃÃÃÃÃÃÃÃÃÃÃÃÄ°ÅÃÃ Ã¡Ã¢Ã£Ã¤Ã¥Ã¦Ã§Ã¨Ã©ÃªÃ«Ã¬Ã­Ã®Ã¯ÄÃ±Ã²Ã³Ã´ÃµÃ¶Ã·Ã¸Ã¹ÃºÃ»Ã¼Ä±ÅÃ¿)Ú__doc__r   r   r   r   r   r   r   r   Úcharmap_buildr   r
   r
   r
   r   Ú<module>   s     ã               @   s   d dl Z d dlZd dlZe  d¡ZG dd dejZG dd dejejZG dd dej	ej
Z
G d	d
 d
eejejZG dd deejejZdd ZdS )é    NÚjohabc               @   s   e Zd ZejZejZdS )ÚCodecN)Ú__name__Ú
__module__Ú__qualname__ÚcodecÚencodeÚdecode© r
   r
   ú D:\Python\lib\encodings\johab.pyr      s   r   c               @   s   e Zd ZeZdS )ÚIncrementalEncoderN)r   r   r   r   r
   r
   r
   r   r      s   r   c               @   s   e Zd ZeZdS )ÚIncrementalDecoderN)r   r   r   r   r
   r
   r
   r   r      s   r   c               @   s   e Zd ZeZdS )ÚStreamReaderN)r   r   r   r   r
   r
   r
   r   r      s   r   c               @   s   e Zd ZeZdS )ÚStreamWriterN)r   r   r   r   r
   r
   r
   r   r      s   r   c            	   C   s    t jdt jt jttttdS )Nr   )Únamer   r	   ÚincrementalencoderÚincrementaldecoderÚstreamreaderÚstreamwriter)	ÚcodecsÚ	CodecInfor   r   r	   r   r   r   r   r
   r
   r
   r   Úgetregentry   s    r   )Z
_codecs_krr   Z_multibytecodecZmbcZgetcodecr   r   ZMultibyteIncrementalEncoderr   ZMultibyteIncrementalDecoderr   ZMultibyteStreamReaderr   ZMultibyteStreamWriterr   r   r
   r
   r
   r   Ú<module>   s   
ã               @   s   d Z ddlZG dd dejZG dd dejZG dd dejZG d	d
 d
eejZG dd deejZdd ZdZe 	e¡Z
dS )zl Python Character Mapping Codec koi8_r generated from 'MAPPINGS/VENDORS/MISC/KOI8-R.TXT' with gencodec.py.

é    Nc               @   s    e Zd ZdddZdddZdS )	ÚCodecÚstrictc             C   s   t  ||t¡S )N)ÚcodecsÚcharmap_encodeÚencoding_table)ÚselfÚinputÚerrors© r
   ú!D:\Python\lib\encodings\koi8_r.pyÚencode   s    zCodec.encodec             C   s   t  ||t¡S )N)r   Úcharmap_decodeÚdecoding_table)r   r   r	   r
   r
   r   Údecode   s    zCodec.decodeN)r   )r   )Ú__name__Ú
__module__Ú__qualname__r   r   r
   r
   r
   r   r   	   s   
r   c               @   s   e Zd ZdddZdS )ÚIncrementalEncoderFc             C   s   t  || jt¡d S )Nr   )r   r   r	   r   )r   r   Úfinalr
   r
   r   r      s    zIncrementalEncoder.encodeN)F)r   r   r   r   r
   r
   r
   r   r      s   r   c               @   s   e Zd ZdddZdS )ÚIncrementalDecoderFc             C   s   t  || jt¡d S )Nr   )r   r   r	   r   )r   r   r   r
   r
   r   r      s    zIncrementalDecoder.decodeN)F)r   r   r   r   r
   r
   r
   r   r      s   r   c               @   s   e Zd ZdS )ÚStreamWriterN)r   r   r   r
   r
   r
   r   r      s   r   c               @   s   e Zd ZdS )ÚStreamReaderN)r   r   r   r
   r
   r
   r   r      s   r   c            	   C   s    t jdt jt jttttdS )Nzkoi8-r)Únamer   r   ÚincrementalencoderÚincrementaldecoderÚstreamreaderÚstreamwriter)	r   Ú	CodecInfor   r   r   r   r   r   r   r
   r
   r
   r   Úgetregentry!   s    r   u¸   	
 !"#$%&'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\]^_`abcdefghijklmnopqrstuvwxyz{|}~ââââââââ¤â¬â´â¼âââââââââ â ââââ¤â¥Â â¡Â°Â²Â·Ã·âââÑââââââââââââââ â¡Ðâ¢â£â¤â¥â¦â§â¨â©âªâ«â¬Â©ÑÐ°Ð±ÑÐ´ÐµÑÐ³ÑÐ¸Ð¹ÐºÐ»Ð¼Ð½Ð¾Ð¿ÑÑÑÑÑÐ¶Ð²ÑÑÐ·ÑÑÑÑÑÐ®ÐÐÐ¦ÐÐÐ¤ÐÐ¥ÐÐÐÐÐÐÐÐÐ¯Ð Ð¡Ð¢Ð£ÐÐÐ¬Ð«ÐÐ¨Ð­Ð©Ð§Ðª)Ú__doc__r   r   r   r   r   r   r   r   Úcharmap_buildr   r
   r
   r
   r   Ú<module>   s     ã               @   s   d Z ddlZG dd dejZG dd dejZG dd dejZG d	d
 d
eejZG dd deejZdd ZdZe 	e¡Z
dS )z' Python Character Mapping Codec koi8_t
é    Nc               @   s    e Zd ZdddZdddZdS )	ÚCodecÚstrictc             C   s   t  ||t¡S )N)ÚcodecsÚcharmap_encodeÚencoding_table)ÚselfÚinputÚerrors© r
   ú!D:\Python\lib\encodings\koi8_t.pyÚencode   s    zCodec.encodec             C   s   t  ||t¡S )N)r   Úcharmap_decodeÚdecoding_table)r   r   r	   r
   r
   r   Údecode   s    zCodec.decodeN)r   )r   )Ú__name__Ú
__module__Ú__qualname__r   r   r
   r
   r
   r   r   
   s   
r   c               @   s   e Zd ZdddZdS )ÚIncrementalEncoderFc             C   s   t  || jt¡d S )Nr   )r   r   r	   r   )r   r   Úfinalr
   r
   r   r      s    zIncrementalEncoder.encodeN)F)r   r   r   r   r
   r
   r
   r   r      s   r   c               @   s   e Zd ZdddZdS )ÚIncrementalDecoderFc             C   s   t  || jt¡d S )Nr   )r   r   r	   r   )r   r   r   r
   r
   r   r      s    zIncrementalDecoder.decodeN)F)r   r   r   r   r
   r
   r
   r   r      s   r   c               @   s   e Zd ZdS )ÚStreamWriterN)r   r   r   r
   r
   r
   r   r      s   r   c               @   s   e Zd ZdS )ÚStreamReaderN)r   r   r   r
   r
   r
   r   r      s   r   c            	   C   s    t jdt jt jttttdS )Nzkoi8-t)Únamer   r   ÚincrementalencoderÚincrementaldecoderÚstreamreaderÚstreamwriter)	r   Ú	CodecInfor   r   r   r   r   r   r   r
   r
   r
   r   Úgetregentry"   s    r   u¤   	
 !"#$%&'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\]^_`abcdefghijklmnopqrstuvwxyz{|}~ÒÒâÒââ¦â â¡ï¿¾â°Ò³â¹Ò²Ò·Ò¶ï¿¾Òâââââ¢ââï¿¾â¢ï¿¾âºï¿¾ï¿¾ï¿¾ï¿¾ï¿¾Ó¯Ó®ÑÂ¤Ó£Â¦Â§ï¿¾ï¿¾ï¿¾Â«Â¬Â­Â®ï¿¾Â°Â±Â²Ðï¿¾Ó¢Â¶Â·ï¿¾âï¿¾Â»ï¿¾ï¿¾ï¿¾Â©ÑÐ°Ð±ÑÐ´ÐµÑÐ³ÑÐ¸Ð¹ÐºÐ»Ð¼Ð½Ð¾Ð¿ÑÑÑÑÑÐ¶Ð²ÑÑÐ·ÑÑÑÑÑÐ®ÐÐÐ¦ÐÐÐ¤ÐÐ¥ÐÐÐÐÐÐÐÐÐ¯Ð Ð¡Ð¢Ð£ÐÐÐ¬Ð«ÐÐ¨Ð­Ð©Ð§Ðª)Ú__doc__r   r   r   r   r   r   r   r   Úcharmap_buildr   r
   r
   r
   r   Ú<module>   s     ã               @   s   d Z ddlZG dd dejZG dd dejZG dd dejZG d	d
 d
eejZG dd deejZdd ZdZe 	e¡Z
dS )zf Python Character Mapping Codec koi8_u generated from 'python-mappings/KOI8-U.TXT' with gencodec.py.

é    Nc               @   s    e Zd ZdddZdddZdS )	ÚCodecÚstrictc             C   s   t  ||t¡S )N)ÚcodecsÚcharmap_encodeÚencoding_table)ÚselfÚinputÚerrors© r
   ú!D:\Python\lib\encodings\koi8_u.pyÚencode   s    zCodec.encodec             C   s   t  ||t¡S )N)r   Úcharmap_decodeÚdecoding_table)r   r   r	   r
   r
   r   Údecode   s    zCodec.decodeN)r   )r   )Ú__name__Ú
__module__Ú__qualname__r   r   r
   r
   r
   r   r   	   s   
r   c               @   s   e Zd ZdddZdS )ÚIncrementalEncoderFc             C   s   t  || jt¡d S )Nr   )r   r   r	   r   )r   r   Úfinalr
   r
   r   r      s    zIncrementalEncoder.encodeN)F)r   r   r   r   r
   r
   r
   r   r      s   r   c               @   s   e Zd ZdddZdS )ÚIncrementalDecoderFc             C   s   t  || jt¡d S )Nr   )r   r   r	   r   )r   r   r   r
   r
   r   r      s    zIncrementalDecoder.decodeN)F)r   r   r   r   r
   r
   r
   r   r      s   r   c               @   s   e Zd ZdS )ÚStreamWriterN)r   r   r   r
   r
   r
   r   r      s   r   c               @   s   e Zd ZdS )ÚStreamReaderN)r   r   r   r
   r
   r
   r   r      s   r   c            	   C   s    t jdt jt jttttdS )Nzkoi8-u)Únamer   r   ÚincrementalencoderÚincrementaldecoderÚstreamreaderÚstreamwriter)	r   Ú	CodecInfor   r   r   r   r   r   r   r
   r
   r
   r   Úgetregentry!   s    r   u°   	
 !"#$%&'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\]^_`abcdefghijklmnopqrstuvwxyz{|}~ââââââââ¤â¬â´â¼âââââââââ â ââââ¤â¥Â â¡Â°Â²Â·Ã·âââÑÑâÑÑâââââÒââââ â¡ÐÐâ£ÐÐâ¦â§â¨â©âªÒâ¬Â©ÑÐ°Ð±ÑÐ´ÐµÑÐ³ÑÐ¸Ð¹ÐºÐ»Ð¼Ð½Ð¾Ð¿ÑÑÑÑÑÐ¶Ð²ÑÑÐ·ÑÑÑÑÑÐ®ÐÐÐ¦ÐÐÐ¤ÐÐ¥ÐÐÐÐÐÐÐÐÐ¯Ð Ð¡Ð¢Ð£ÐÐÐ¬Ð«ÐÐ¨Ð­Ð©Ð§Ðª)Ú__doc__r   r   r   r   r   r   r   r   Úcharmap_buildr   r
   r
   r
   r   Ú<module>   s     ã               @   s   d Z ddlZG dd dejZG dd dejZG dd dejZG d	d
 d
eejZG dd deejZdd ZdZe 	e¡Z
dS )zl Python Character Mapping Codec kz1048 generated from 'MAPPINGS/VENDORS/MISC/KZ1048.TXT' with gencodec.py.

é    Nc               @   s    e Zd ZdddZdddZdS )	ÚCodecÚstrictc             C   s   t  ||t¡S )N)ÚcodecsÚcharmap_encodeÚencoding_table)ÚselfÚinputÚerrors© r
   ú!D:\Python\lib\encodings\kz1048.pyÚencode   s    zCodec.encodec             C   s   t  ||t¡S )N)r   Úcharmap_decodeÚdecoding_table)r   r   r	   r
   r
   r   Údecode   s    zCodec.decodeN)r   )r   )Ú__name__Ú
__module__Ú__qualname__r   r   r
   r
   r
   r   r   	   s   
r   c               @   s   e Zd ZdddZdS )ÚIncrementalEncoderFc             C   s   t  || jt¡d S )Nr   )r   r   r	   r   )r   r   Úfinalr
   r
   r   r      s    zIncrementalEncoder.encodeN)F)r   r   r   r   r
   r
   r
   r   r      s   r   c               @   s   e Zd ZdddZdS )ÚIncrementalDecoderFc             C   s   t  || jt¡d S )Nr   )r   r   r	   r   )r   r   r   r
   r
   r   r      s    zIncrementalDecoder.decodeN)F)r   r   r   r   r
   r
   r
   r   r      s   r   c               @   s   e Zd ZdS )ÚStreamWriterN)r   r   r   r
   r
   r
   r   r      s   r   c               @   s   e Zd ZdS )ÚStreamReaderN)r   r   r   r
   r
   r
   r   r      s   r   c            	   C   s    t jdt jt jttttdS )NÚkz1048)Únamer   r   ÚincrementalencoderÚincrementaldecoderÚstreamreaderÚstreamwriter)	r   Ú	CodecInfor   r   r   r   r   r   r   r
   r
   r
   r   Úgetregentry!   s    r   u   	
 !"#$%&'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\]^_`abcdefghijklmnopqrstuvwxyz{|}~ÐÐâÑââ¦â â¡â¬â°Ðâ¹ÐÒÒºÐÑâââââ¢ââï¿¾â¢ÑâºÑÒÒ»ÑÂ Ò°Ò±ÓÂ¤Ó¨Â¦Â§ÐÂ©ÒÂ«Â¬Â­Â®Ò®Â°Â±ÐÑÓ©ÂµÂ¶Â·ÑâÒÂ»ÓÒ¢Ò£Ò¯ÐÐÐÐÐÐÐÐÐÐÐÐÐÐÐÐÐ Ð¡Ð¢Ð£Ð¤Ð¥Ð¦Ð§Ð¨Ð©ÐªÐ«Ð¬Ð­Ð®Ð¯Ð°Ð±Ð²Ð³Ð´ÐµÐ¶Ð·Ð¸Ð¹ÐºÐ»Ð¼Ð½Ð¾Ð¿ÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑ)Ú__doc__r   r   r   r   r   r   r   r   Úcharmap_buildr   r
   r
   r
   r   Ú<module>   s     ã               @   s   d Z ddlZG dd dejZG dd dejZG dd dejZG d	d
 d
eejZG dd deejZG dd deeZdd ZdS )z Python 'latin-1' Codec


Written by Marc-Andre Lemburg (mal@lemburg.com).

(c) Copyright CNRI, All Rights Reserved. NO WARRANTY.

é    Nc               @   s   e Zd ZejZejZdS )ÚCodecN)Ú__name__Ú
__module__Ú__qualname__ÚcodecsÚlatin_1_encodeÚencodeÚlatin_1_decodeÚdecode© r   r   ú"D:\Python\lib\encodings\latin_1.pyr      s   r   c               @   s   e Zd ZdddZdS )ÚIncrementalEncoderFc             C   s   t  || j¡d S )Nr   )r   r   Úerrors)ÚselfÚinputÚfinalr   r   r   r      s    zIncrementalEncoder.encodeN)F)r   r   r   r   r   r   r   r   r      s   r   c               @   s   e Zd ZdddZdS )ÚIncrementalDecoderFc             C   s   t  || j¡d S )Nr   )r   r	   r   )r   r   r   r   r   r   r
      s    zIncrementalDecoder.decodeN)F)r   r   r   r
   r   r   r   r   r      s   r   c               @   s   e Zd ZdS )ÚStreamWriterN)r   r   r   r   r   r   r   r      s   r   c               @   s   e Zd ZdS )ÚStreamReaderN)r   r   r   r   r   r   r   r      s   r   c               @   s   e Zd ZejZejZdS )ÚStreamConverterN)r   r   r   r   r	   r   r   r
   r   r   r   r   r   "   s   r   c            	   C   s   t jdtjtjttttdS )Nz	iso8859-1)Únamer   r
   ÚincrementalencoderÚincrementaldecoderÚstreamreaderÚstreamwriter)	r   Ú	CodecInfor   r   r
   r   r   r   r   r   r   r   r   Úgetregentry)   s    r   )	Ú__doc__r   r   r   r   r   r   r   r   r   r   r   r   Ú<module>   s   ã              @   sP  d Z ddlZG dd dejZG dd dejZG dd dejZG d	d
 d
eejZG dd deejZdd Ze e	d¡Z
e
 ddddddddddddddddd d!d"d#d$d%d&d'd(d)d*d+d,d-d.d/d0d1d2d3d4d5d6d7d8d9d:d;d<d=d>d?d@dAdBdCdDdEdFdGdHdIdJdKdLdMdNdOdPdQdRdSdTdUdVdWdXdYdZd[d\d]d^d_d`dadbdcdddedfdgdhdidjdkdldmdndodpdqdrdsdtdudvdwdxdydzd{d|d}d~dddddddddddddddddd¡ dZdddddddddddddddd d¡d¢d£d¤d¥d¦d§d¨d©dªd«d¬d­d®d¯d°d0dd1d±d2d²d3d³d4d´dµd6d¶d7d·d8d¸d9d¹d:dºd;dd»d=d¼d>d½d?d¾d¿dÀdÁdÂdÃdÄdÅdÆdÇdÈdJdÉdÊdLdËdMdÌdNdÍdÎdÏdÐdÑdÒdÓdÔdÕdÖd×dØdÙdÚdÛdÜdÝdÞdßdàdádâdãdädådædçdèdédkdêdlddmdëdndìdodídîdïdðdñdòdódôdõdöd÷dødùdúdûdüdýdþdÿd dddddddddd.dd/dd	d
dddddddddddddddddddddd d!d"d#d$d%d&d'd(d)d*d(d+d,d-d.dd/d0dd1dd2d3d4d5d6d7d8dd9d:d;d<dd=d>d?d@ddddAddBdCdddd d!dDd"d$d%dEd&dFdGdHdIdJdKdLdMdNdOdPdQd)d'dRd-d,dSd+dTdUdVd*dWdXdY ZdS (Z  z] Python Character Mapping Codec generated from 'VENDORS/APPLE/ARABIC.TXT' with gencodec.py.

é    Nc               @   s    e Zd ZdddZdddZdS )	ÚCodecÚstrictc             C   s   t  ||t¡S )N)ÚcodecsÚcharmap_encodeÚencoding_map)ÚselfÚinputÚerrors© r
   ú%D:\Python\lib\encodings\mac_arabic.pyÚencode   s    zCodec.encodec             C   s   t  ||t¡S )N)r   Úcharmap_decodeÚdecoding_table)r   r   r	   r
   r
   r   Údecode   s    zCodec.decodeN)r   )r   )Ú__name__Ú
__module__Ú__qualname__r   r   r
   r
   r
   r   r   	   s   
r   c               @   s   e Zd ZdddZdS )ÚIncrementalEncoderFc             C   s   t  || jt¡d S )Nr   )r   r   r	   r   )r   r   Úfinalr
   r
   r   r      s    zIncrementalEncoder.encodeN)F)r   r   r   r   r
   r
   r
   r   r      s   r   c               @   s   e Zd ZdddZdS )ÚIncrementalDecoderFc             C   s   t  || jt¡d S )Nr   )r   r   r	   r   )r   r   r   r
   r
   r   r      s    zIncrementalDecoder.decodeN)F)r   r   r   r   r
   r
   r
   r   r      s   r   c               @   s   e Zd ZdS )ÚStreamWriterN)r   r   r   r
   r
   r
   r   r      s   r   c               @   s   e Zd ZdS )ÚStreamReaderN)r   r   r   r
   r
   r
   r   r      s   r   c            	   C   s    t jdt jt jttttdS )Nz
mac-arabic)Únamer   r   ÚincrementalencoderÚincrementaldecoderÚstreamreaderÚstreamwriter)	r   Ú	CodecInfor   r   r   r   r   r   r   r
   r
   r
   r   Úgetregentry!   s    r   é   éÄ   é    éÇ   éÉ   éÑ   éÖ   éÜ   éá   éà   éâ   éä   iº  é«   éç   éé   éè   éê   éë   éí   i&   éî   éï   éñ   éó   é»   éô   éö   é÷   éú   éù   éû   éü   é    é!   é"   é#   é$   ij  é&   é'   é(   é)   é*   é+   i  é-   é.   é/   i`  ia  ib  ic  id  ie  if  ig  ih  ii  é:   i  é<   é=   é>   i  iJ'  i!  i"  i#  i$  i%  i&  i'  i(  i)  i*  i+  i,  i-  i.  i/  i0  i1  i2  i3  i4  i5  i6  i7  i8  i9  i:  é[   é\   é]   é^   é_   i@  iA  iB  iC  iD  iE  iF  iG  iH  iI  iJ  iK  iL  iM  iN  iO  iP  iQ  iR  i~  iy  i  iÕ  i¤  i¯  i  i  é{   é|   é}   i  iÒ  )é   é   é   é   é   é   é   é   é   é   é   é   é   é   é   é   é   é   é   é   é   é   é   é   é   é   é   é   é   é   é   é   r!   é¡   é¢   é£   é¤   é¥   é¦   é§   é¨   é©   éª   r+   é¬   é­   é®   é¯   é°   é±   é²   é³   é´   éµ   é¶   é·   é¸   é¹   éº   r6   é¼   é½   é¾   é¿   éÀ   éÁ   éÂ   éÃ   r    éÅ   éÆ   r"   éÈ   r#   éÊ   éË   éÌ   éÍ   éÎ   éÏ   éÐ   r$   éÒ   éÓ   éÔ   éÕ   r%   é×   éØ   éÙ   éÚ   éÛ   r&   éÝ   éÞ   éß   r(   r'   r)   éã   r*   éå   éæ   r,   r.   r-   r/   r0   éì   r1   r2   r3   éð   r4   éò   r5   r7   éõ   r8   r9   éø   r;   r:   r<   r=   éý   éþ   éÿ   uh   	
 !"#$%&'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\]^_`abcdefghijklmnopqrstuvwxyz{|}~ÃÂ ÃÃÃÃÃÃ¡Ã Ã¢Ã¤ÚºÂ«Ã§Ã©Ã¨ÃªÃ«Ã­â¦Ã®Ã¯Ã±Ã³Â»Ã´Ã¶Ã·ÃºÃ¹Ã»Ã¼ !"#$Ùª&'()*+Ø-./Ù Ù¡Ù¢Ù£Ù¤Ù¥Ù¦Ù§Ù¨Ù©:Ø<=>ØâØ¡Ø¢Ø£Ø¤Ø¥Ø¦Ø§Ø¨Ø©ØªØ«Ø¬Ø­Ø®Ø¯Ø°Ø±Ø²Ø³Ø´ØµØ¶Ø·Ø¸Ø¹Øº[\]^_ÙÙÙÙÙÙÙÙÙÙÙÙÙÙÙÙÙÙÙÙ¾Ù¹ÚÛÚ¤Ú¯ÚÚ{|}ÚÛé   é   é   é   é   é   é   é   é	   é
   é   é   é   é   é   é   é   é   é   é   é   é   é   é   é   é   é   é   é   é   é   rx   ry   rz   r{   é%   r}   r~   r   r   r   é,   r   r   r   é0   é1   é2   é3   é4   é5   é6   é7   é8   é9   r   é;   r   r   r   é?   é@   éA   éB   éC   éD   éE   éF   éG   éH   éI   éJ   éK   éL   éM   éN   éO   éP   éQ   éR   éS   éT   éU   éV   éW   éX   éY   éZ   r«   r¬   r­   r®   é`   éa   éb   éc   éd   ée   éf   ég   éh   éi   éj   ék   él   ém   én   éo   ép   éq   ér   és   ét   éu   év   éw   éx   éy   éz   r·   é~   é   rY   rd   rp   rX   rZ   r[   r\   r]   r^   r`   r_   ra   rb   re   rg   rf   rh   ri   rj   rl   rm   rn   ro   rq   rr   rs   ru   rt   rv   rw   r   r   r   r   r   r   r   r   r   r   r   r   r    r¡   r¢   r£   r¤   r¥   r¦   r§   r¨   r©   rª   r¯   r°   r±   r²   r³   r´   r   r   r   r   r   r   r   r   r   r   r|   rµ   r¸   r¶   rc   r¹   rk   r   (   r   rº   r»   r¼   r½   r¾   r¿   rÀ   rÁ   rÂ   rÃ   rÄ   rÅ   rÆ   rÇ   rÈ   rÉ   rÊ   rË   rÌ   rÍ   rÎ   rÏ   rÐ   rÑ   rÒ   rÓ   rÔ   rÕ   rÖ   r×   rØ   r>   r>   r?   r?   r@   r@   rA   rA   rB   rB   rÙ   rC   rC   rD   rD   rE   rE   rF   rF   rG   rG   rH   rH   rÚ   rI   rI   rJ   rJ   rK   rK   rÛ   rÜ   rÝ   rÞ   rß   rà   rá   râ   rã   rä   rL   rL   rå   rM   rM   rN   rN   rO   rO   ræ   rç   rè   ré   rê   rë   rì   rí   rî   rï   rð   rñ   rò   ró   rô   rõ   rö   r÷   rø   rù   rú   rû   rü   rý   rþ   rÿ   r   r  rP   rP   rQ   rQ   rR   rR   rS   rS   rT   rT   r  r  r  r  r  r  r  r	  r
  r  r  r  r  r  r  r  r  r  r  r  r  r  r  r  r  r  r  rU   rU   rV   rV   rW   rW   r  r  r!   r+   r6   r    r"   r#   r$   r%   r&   r(   r'   r)   r*   r,   r.   r-   r/   r0   r1   r2   r3   r4   r5   r7   r8   r9   r;   r:   r<   r=   i  i  i  i!  i"  i#  i$  i%  i&  i'  i(  i)  i*  i+  i,  i-  i.  i/  i0  i1  i2  i3  i4  i5  i6  i7  i8  i9  i:  i@  iA  iB  iC  iD  iE  iF  iG  iH  iI  iJ  iK  iL  iM  iN  iO  iP  iQ  iR  i`  ia  ib  ic  id  ie  if  ig  ih  ii  ij  iy  i~  i  i  i  i  i¤  i¯  iº  iÒ  iÕ  i&   iJ'  )Ú__doc__r   r   r   r   r   r   r   Úmake_identity_dictÚrangeÚdecoding_mapÚupdater   r   r
   r
   r
   r   Ú<module>   s  
  ã               @   s   d Z ddlZG dd dejZG dd dejZG dd dejZG d	d
 d
eejZG dd deejZdd ZdZe 	e¡Z
dS )zu Python Character Mapping Codec mac_centeuro generated from 'MAPPINGS/VENDORS/APPLE/CENTEURO.TXT' with gencodec.py.

é    Nc               @   s    e Zd ZdddZdddZdS )	ÚCodecÚstrictc             C   s   t  ||t¡S )N)ÚcodecsÚcharmap_encodeÚencoding_table)ÚselfÚinputÚerrors© r
   ú'D:\Python\lib\encodings\mac_centeuro.pyÚencode   s    zCodec.encodec             C   s   t  ||t¡S )N)r   Úcharmap_decodeÚdecoding_table)r   r   r	   r
   r
   r   Údecode   s    zCodec.decodeN)r   )r   )Ú__name__Ú
__module__Ú__qualname__r   r   r
   r
   r
   r   r   	   s   
r   c               @   s   e Zd ZdddZdS )ÚIncrementalEncoderFc             C   s   t  || jt¡d S )Nr   )r   r   r	   r   )r   r   Úfinalr
   r
   r   r      s    zIncrementalEncoder.encodeN)F)r   r   r   r   r
   r
   r
   r   r      s   r   c               @   s   e Zd ZdddZdS )ÚIncrementalDecoderFc             C   s   t  || jt¡d S )Nr   )r   r   r	   r   )r   r   r   r
   r
   r   r      s    zIncrementalDecoder.decodeN)F)r   r   r   r   r
   r
   r
   r   r      s   r   c               @   s   e Zd ZdS )ÚStreamWriterN)r   r   r   r
   r
   r
   r   r      s   r   c               @   s   e Zd ZdS )ÚStreamReaderN)r   r   r   r
   r
   r
   r   r      s   r   c            	   C   s    t jdt jt jttttdS )Nzmac-centeuro)Únamer   r   ÚincrementalencoderÚincrementaldecoderÚstreamreaderÚstreamwriter)	r   Ú	CodecInfor   r   r   r   r   r   r   r
   r
   r
   r   Úgetregentry!   s    r   u   	
 !"#$%&'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\]^_`abcdefghijklmnopqrstuvwxyz{|}~ÃÄÄÃÄÃÃÃ¡ÄÄÃ¤ÄÄÄÃ©Å¹ÅºÄÃ­ÄÄÄÄÃ³ÄÃ´Ã¶ÃµÃºÄÄÃ¼â Â°ÄÂ£Â§â¢Â¶ÃÂ®Â©â¢ÄÂ¨â Ä£Ä®Ä¯Äªâ¤â¥Ä«Ä¶ââÅÄ»Ä¼Ä½Ä¾Ä¹ÄºÅÅÅÂ¬âÅÅâÂ«Â»â¦Â ÅÅÃÅÅââââââÃ·âÅÅÅÅâ¹âºÅÅÅÅ ââÅ¡ÅÅÃÅ¤Å¥ÃÅ½Å¾ÅªÃÃÅ«Å®ÃÅ¯Å°Å±Å²Å³ÃÃ½Ä·Å»ÅÅ¼Ä¢Ë)Ú__doc__r   r   r   r   r   r   r   r   Úcharmap_buildr   r
   r
   r
   r   Ú<module>   s     ã               @   s   d Z ddlZG dd dejZG dd dejZG dd dejZG d	d
 d
eejZG dd deejZdd ZdZe 	e¡Z
dS )zu Python Character Mapping Codec mac_croatian generated from 'MAPPINGS/VENDORS/APPLE/CROATIAN.TXT' with gencodec.py.

é    Nc               @   s    e Zd ZdddZdddZdS )	ÚCodecÚstrictc             C   s   t  ||t¡S )N)ÚcodecsÚcharmap_encodeÚencoding_table)ÚselfÚinputÚerrors© r
   ú'D:\Python\lib\encodings\mac_croatian.pyÚencode   s    zCodec.encodec             C   s   t  ||t¡S )N)r   Úcharmap_decodeÚdecoding_table)r   r   r	   r
   r
   r   Údecode   s    zCodec.decodeN)r   )r   )Ú__name__Ú
__module__Ú__qualname__r   r   r
   r
   r
   r   r   	   s   
r   c               @   s   e Zd ZdddZdS )ÚIncrementalEncoderFc             C   s   t  || jt¡d S )Nr   )r   r   r	   r   )r   r   Úfinalr
   r
   r   r      s    zIncrementalEncoder.encodeN)F)r   r   r   r   r
   r
   r
   r   r      s   r   c               @   s   e Zd ZdddZdS )ÚIncrementalDecoderFc             C   s   t  || jt¡d S )Nr   )r   r   r	   r   )r   r   r   r
   r
   r   r      s    zIncrementalDecoder.decodeN)F)r   r   r   r   r
   r
   r
   r   r      s   r   c               @   s   e Zd ZdS )ÚStreamWriterN)r   r   r   r
   r
   r
   r   r      s   r   c               @   s   e Zd ZdS )ÚStreamReaderN)r   r   r   r
   r
   r
   r   r      s   r   c            	   C   s    t jdt jt jttttdS )Nzmac-croatian)Únamer   r   ÚincrementalencoderÚincrementaldecoderÚstreamreaderÚstreamwriter)	r   Ú	CodecInfor   r   r   r   r   r   r   r
   r
   r
   r   Úgetregentry!   s    r   u   	
 !"#$%&'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\]^_`abcdefghijklmnopqrstuvwxyz{|}~ÃÃÃÃÃÃÃÃ¡Ã Ã¢Ã¤Ã£Ã¥Ã§Ã©Ã¨ÃªÃ«Ã­Ã¬Ã®Ã¯Ã±Ã³Ã²Ã´Ã¶ÃµÃºÃ¹Ã»Ã¼â Â°Â¢Â£Â§â¢Â¶ÃÂ®Å â¢Â´Â¨â Å½ÃâÂ±â¤â¥âÂµâââÅ¡â«ÂªÂºÎ©Å¾Ã¸Â¿Â¡Â¬âÆâÄÂ«Äâ¦Â ÃÃÃÅÅÄâââââÃ·âï£¿Â©ââ¬â¹âºÃÂ»âÂ·âââ°ÃÄÃÄÃÃÃÃÃÃÃÄÃÃÃÃÄ±ËËÂ¯ÏÃËÂ¸ÃÃ¦Ë)Ú__doc__r   r   r   r   r   r   r   r   Úcharmap_buildr   r
   r
   r
   r   Ú<module>   s     ã               @   s   d Z ddlZG dd dejZG dd dejZG dd dejZG d	d
 d
eejZG dd deejZdd ZdZe 	e¡Z
dS )zu Python Character Mapping Codec mac_cyrillic generated from 'MAPPINGS/VENDORS/APPLE/CYRILLIC.TXT' with gencodec.py.

é    Nc               @   s    e Zd ZdddZdddZdS )	ÚCodecÚstrictc             C   s   t  ||t¡S )N)ÚcodecsÚcharmap_encodeÚencoding_table)ÚselfÚinputÚerrors© r
   ú'D:\Python\lib\encodings\mac_cyrillic.pyÚencode   s    zCodec.encodec             C   s   t  ||t¡S )N)r   Úcharmap_decodeÚdecoding_table)r   r   r	   r
   r
   r   Údecode   s    zCodec.decodeN)r   )r   )Ú__name__Ú
__module__Ú__qualname__r   r   r
   r
   r
   r   r   	   s   
r   c               @   s   e Zd ZdddZdS )ÚIncrementalEncoderFc             C   s   t  || jt¡d S )Nr   )r   r   r	   r   )r   r   Úfinalr
   r
   r   r      s    zIncrementalEncoder.encodeN)F)r   r   r   r   r
   r
   r
   r   r      s   r   c               @   s   e Zd ZdddZdS )ÚIncrementalDecoderFc             C   s   t  || jt¡d S )Nr   )r   r   r	   r   )r   r   r   r
   r
   r   r      s    zIncrementalDecoder.decodeN)F)r   r   r   r   r
   r
   r
   r   r      s   r   c               @   s   e Zd ZdS )ÚStreamWriterN)r   r   r   r
   r
   r
   r   r      s   r   c               @   s   e Zd ZdS )ÚStreamReaderN)r   r   r   r
   r
   r
   r   r      s   r   c            	   C   s    t jdt jt jttttdS )Nzmac-cyrillic)Únamer   r   ÚincrementalencoderÚincrementaldecoderÚstreamreaderÚstreamwriter)	r   Ú	CodecInfor   r   r   r   r   r   r   r
   r
   r
   r   Úgetregentry!   s    r   u   	
 !"#$%&'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\]^_`abcdefghijklmnopqrstuvwxyz{|}~ÐÐÐÐÐÐÐÐÐÐÐÐÐÐÐÐÐ Ð¡Ð¢Ð£Ð¤Ð¥Ð¦Ð§Ð¨Ð©ÐªÐ«Ð¬Ð­Ð®Ð¯â Â°ÒÂ£Â§â¢Â¶ÐÂ®Â©â¢ÐÑâ ÐÑâÂ±â¤â¥ÑÂµÒÐÐÑÐÑÐÑÐÑÑÐÂ¬âÆââÂ«Â»â¦Â ÐÑÐÑÑââââââÃ·âÐÑÐÑâÐÑÑÐ°Ð±Ð²Ð³Ð´ÐµÐ¶Ð·Ð¸Ð¹ÐºÐ»Ð¼Ð½Ð¾Ð¿ÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑâ¬)Ú__doc__r   r   r   r   r   r   r   r   Úcharmap_buildr   r
   r
   r
   r   Ú<module>   s     ã               @   s   d Z ddlZG dd dejZG dd dejZG dd dejZG d	d
 d
eejZG dd deejZdd ZdZe 	e¡Z
dS )zo Python Character Mapping Codec mac_farsi generated from 'MAPPINGS/VENDORS/APPLE/FARSI.TXT' with gencodec.py.

é    Nc               @   s    e Zd ZdddZdddZdS )	ÚCodecÚstrictc             C   s   t  ||t¡S )N)ÚcodecsÚcharmap_encodeÚencoding_table)ÚselfÚinputÚerrors© r
   ú$D:\Python\lib\encodings\mac_farsi.pyÚencode   s    zCodec.encodec             C   s   t  ||t¡S )N)r   Úcharmap_decodeÚdecoding_table)r   r   r	   r
   r
   r   Údecode   s    zCodec.decodeN)r   )r   )Ú__name__Ú
__module__Ú__qualname__r   r   r
   r
   r
   r   r   	   s   
r   c               @   s   e Zd ZdddZdS )ÚIncrementalEncoderFc             C   s   t  || jt¡d S )Nr   )r   r   r	   r   )r   r   Úfinalr
   r
   r   r      s    zIncrementalEncoder.encodeN)F)r   r   r   r   r
   r
   r
   r   r      s   r   c               @   s   e Zd ZdddZdS )ÚIncrementalDecoderFc             C   s   t  || jt¡d S )Nr   )r   r   r	   r   )r   r   r   r
   r
   r   r      s    zIncrementalDecoder.decodeN)F)r   r   r   r   r
   r
   r
   r   r      s   r   c               @   s   e Zd ZdS )ÚStreamWriterN)r   r   r   r
   r
   r
   r   r      s   r   c               @   s   e Zd ZdS )ÚStreamReaderN)r   r   r   r
   r
   r
   r   r      s   r   c            	   C   s    t jdt jt jttttdS )Nz	mac-farsi)Únamer   r   ÚincrementalencoderÚincrementaldecoderÚstreamreaderÚstreamwriter)	r   Ú	CodecInfor   r   r   r   r   r   r   r
   r
   r
   r   Úgetregentry!   s    r   uh   	
 !"#$%&'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\]^_`abcdefghijklmnopqrstuvwxyz{|}~ÃÂ ÃÃÃÃÃÃ¡Ã Ã¢Ã¤ÚºÂ«Ã§Ã©Ã¨ÃªÃ«Ã­â¦Ã®Ã¯Ã±Ã³Â»Ã´Ã¶Ã·ÃºÃ¹Ã»Ã¼ !"#$Ùª&'()*+Ø-./Û°Û±Û²Û³Û´ÛµÛ¶Û·Û¸Û¹:Ø<=>ØâØ¡Ø¢Ø£Ø¤Ø¥Ø¦Ø§Ø¨Ø©ØªØ«Ø¬Ø­Ø®Ø¯Ø°Ø±Ø²Ø³Ø´ØµØ¶Ø·Ø¸Ø¹Øº[\]^_ÙÙÙÙÙÙÙÙÙÙÙÙÙÙÙÙÙÙÙÙ¾Ù¹ÚÛÚ¤Ú¯ÚÚ{|}ÚÛ)Ú__doc__r   r   r   r   r   r   r   r   Úcharmap_buildr   r
   r
   r
   r   Ú<module>   s     ã               @   s   d Z ddlZG dd dejZG dd dejZG dd dejZG d	d
 d
eejZG dd deejZdd ZdZe 	e¡Z
dS )zo Python Character Mapping Codec mac_greek generated from 'MAPPINGS/VENDORS/APPLE/GREEK.TXT' with gencodec.py.

é    Nc               @   s    e Zd ZdddZdddZdS )	ÚCodecÚstrictc             C   s   t  ||t¡S )N)ÚcodecsÚcharmap_encodeÚencoding_table)ÚselfÚinputÚerrors© r
   ú$D:\Python\lib\encodings\mac_greek.pyÚencode   s    zCodec.encodec             C   s   t  ||t¡S )N)r   Úcharmap_decodeÚdecoding_table)r   r   r	   r
   r
   r   Údecode   s    zCodec.decodeN)r   )r   )Ú__name__Ú
__module__Ú__qualname__r   r   r
   r
   r
   r   r   	   s   
r   c               @   s   e Zd ZdddZdS )ÚIncrementalEncoderFc             C   s   t  || jt¡d S )Nr   )r   r   r	   r   )r   r   Úfinalr
   r
   r   r      s    zIncrementalEncoder.encodeN)F)r   r   r   r   r
   r
   r
   r   r      s   r   c               @   s   e Zd ZdddZdS )ÚIncrementalDecoderFc             C   s   t  || jt¡d S )Nr   )r   r   r	   r   )r   r   r   r
   r
   r   r      s    zIncrementalDecoder.decodeN)F)r   r   r   r   r
   r
   r
   r   r      s   r   c               @   s   e Zd ZdS )ÚStreamWriterN)r   r   r   r
   r
   r
   r   r      s   r   c               @   s   e Zd ZdS )ÚStreamReaderN)r   r   r   r
   r
   r
   r   r      s   r   c            	   C   s    t jdt jt jttttdS )Nz	mac-greek)Únamer   r   ÚincrementalencoderÚincrementaldecoderÚstreamreaderÚstreamwriter)	r   Ú	CodecInfor   r   r   r   r   r   r   r
   r
   r
   r   Úgetregentry!   s    r   u   	
 !"#$%&'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\]^_`abcdefghijklmnopqrstuvwxyz{|}~ÃÂ¹Â²ÃÂ³ÃÃÎÃ Ã¢Ã¤ÎÂ¨Ã§Ã©Ã¨ÃªÃ«Â£â¢Ã®Ã¯â¢Â½â°Ã´Ã¶Â¦â¬Ã¹Ã»Ã¼â ÎÎÎÎÎÎ ÃÂ®Â©Î£ÎªÂ§â Â°Â·ÎÂ±â¤â¥Â¥ÎÎÎÎÎÎÎÎ¦Î«Î¨Î©Î¬ÎÂ¬ÎÎ¡âÎ¤Â«Â»â¦Â Î¥Î§ÎÎÅââââââÃ·ÎÎÎÎÎ­Î®Î¯ÏÎÏÎ±Î²ÏÎ´ÎµÏÎ³Î·Î¹Î¾ÎºÎ»Î¼Î½Î¿ÏÏÏÏÏÎ¸ÏÏÏÏÎ¶ÏÏÎÎ°Â­)Ú__doc__r   r   r   r   r   r   r   r   Úcharmap_buildr   r
   r
   r
   r   Ú<module>   s     ã               @   s   d Z ddlZG dd dejZG dd dejZG dd dejZG d	d
 d
eejZG dd deejZdd ZdZe 	e¡Z
dS )zs Python Character Mapping Codec mac_iceland generated from 'MAPPINGS/VENDORS/APPLE/ICELAND.TXT' with gencodec.py.

é    Nc               @   s    e Zd ZdddZdddZdS )	ÚCodecÚstrictc             C   s   t  ||t¡S )N)ÚcodecsÚcharmap_encodeÚencoding_table)ÚselfÚinputÚerrors© r
   ú&D:\Python\lib\encodings\mac_iceland.pyÚencode   s    zCodec.encodec             C   s   t  ||t¡S )N)r   Úcharmap_decodeÚdecoding_table)r   r   r	   r
   r
   r   Údecode   s    zCodec.decodeN)r   )r   )Ú__name__Ú
__module__Ú__qualname__r   r   r
   r
   r
   r   r   	   s   
r   c               @   s   e Zd ZdddZdS )ÚIncrementalEncoderFc             C   s   t  || jt¡d S )Nr   )r   r   r	   r   )r   r   Úfinalr
   r
   r   r      s    zIncrementalEncoder.encodeN)F)r   r   r   r   r
   r
   r
   r   r      s   r   c               @   s   e Zd ZdddZdS )ÚIncrementalDecoderFc             C   s   t  || jt¡d S )Nr   )r   r   r	   r   )r   r   r   r
   r
   r   r      s    zIncrementalDecoder.decodeN)F)r   r   r   r   r
   r
   r
   r   r      s   r   c               @   s   e Zd ZdS )ÚStreamWriterN)r   r   r   r
   r
   r
   r   r      s   r   c               @   s   e Zd ZdS )ÚStreamReaderN)r   r   r   r
   r
   r
   r   r      s   r   c            	   C   s    t jdt jt jttttdS )Nzmac-iceland)Únamer   r   ÚincrementalencoderÚincrementaldecoderÚstreamreaderÚstreamwriter)	r   Ú	CodecInfor   r   r   r   r   r   r   r
   r
   r
   r   Úgetregentry!   s    r   u   	
 !"#$%&'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\]^_`abcdefghijklmnopqrstuvwxyz{|}~ÃÃÃÃÃÃÃÃ¡Ã Ã¢Ã¤Ã£Ã¥Ã§Ã©Ã¨ÃªÃ«Ã­Ã¬Ã®Ã¯Ã±Ã³Ã²Ã´Ã¶ÃµÃºÃ¹Ã»Ã¼ÃÂ°Â¢Â£Â§â¢Â¶ÃÂ®Â©â¢Â´Â¨â ÃÃâÂ±â¤â¥Â¥ÂµâââÏâ«ÂªÂºÎ©Ã¦Ã¸Â¿Â¡Â¬âÆââÂ«Â»â¦Â ÃÃÃÅÅââââââÃ·âÃ¿Å¸ââ¬ÃÃ°ÃÃ¾Ã½Â·âââ°ÃÃÃÃÃÃÃÃÃÃÃï£¿ÃÃÃÃÄ±ËËÂ¯ËËËÂ¸ËËË)Ú__doc__r   r   r   r   r   r   r   r   Úcharmap_buildr   r
   r
   r
   r   Ú<module>   s     ã               @   s   d Z ddlZG dd dejZG dd dejZG dd dejZG d	d
 d
eejZG dd deejZdd ZdZe 	e¡Z
dS )a   Python Character Mapping Codec mac_latin2 generated from 'MAPPINGS/VENDORS/MICSFT/MAC/LATIN2.TXT' with gencodec.py.

Written by Marc-Andre Lemburg (mal@lemburg.com).

(c) Copyright CNRI, All Rights Reserved. NO WARRANTY.
(c) Copyright 2000 Guido van Rossum.

é    Nc               @   s    e Zd ZdddZdddZdS )	ÚCodecÚstrictc             C   s   t  ||t¡S )N)ÚcodecsÚcharmap_encodeÚencoding_table)ÚselfÚinputÚerrors© r
   ú%D:\Python\lib\encodings\mac_latin2.pyÚencode   s    zCodec.encodec             C   s   t  ||t¡S )N)r   Úcharmap_decodeÚdecoding_table)r   r   r	   r
   r
   r   Údecode   s    zCodec.decodeN)r   )r   )Ú__name__Ú
__module__Ú__qualname__r   r   r
   r
   r
   r   r      s   
r   c               @   s   e Zd ZdddZdS )ÚIncrementalEncoderFc             C   s   t  || jt¡d S )Nr   )r   r   r	   r   )r   r   Úfinalr
   r
   r   r      s    zIncrementalEncoder.encodeN)F)r   r   r   r   r
   r
   r
   r   r      s   r   c               @   s   e Zd ZdddZdS )ÚIncrementalDecoderFc             C   s   t  || jt¡d S )Nr   )r   r   r	   r   )r   r   r   r
   r
   r   r      s    zIncrementalDecoder.decodeN)F)r   r   r   r   r
   r
   r
   r   r      s   r   c               @   s   e Zd ZdS )ÚStreamWriterN)r   r   r   r
   r
   r
   r   r      s   r   c               @   s   e Zd ZdS )ÚStreamReaderN)r   r   r   r
   r
   r
   r   r   !   s   r   c            	   C   s    t jdt jt jttttdS )Nz
mac-latin2)Únamer   r   ÚincrementalencoderÚincrementaldecoderÚstreamreaderÚstreamwriter)	r   Ú	CodecInfor   r   r   r   r   r   r   r
   r
   r
   r   Úgetregentry&   s    r   u   	
 !"#$%&'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\]^_`abcdefghijklmnopqrstuvwxyz{|}~ÃÄÄÃÄÃÃÃ¡ÄÄÃ¤ÄÄÄÃ©Å¹ÅºÄÃ­ÄÄÄÄÃ³ÄÃ´Ã¶ÃµÃºÄÄÃ¼â Â°ÄÂ£Â§â¢Â¶ÃÂ®Â©â¢ÄÂ¨â Ä£Ä®Ä¯Äªâ¤â¥Ä«Ä¶ââÅÄ»Ä¼Ä½Ä¾Ä¹ÄºÅÅÅÂ¬âÅÅâÂ«Â»â¦Â ÅÅÃÅÅââââââÃ·âÅÅÅÅâ¹âºÅÅÅÅ ââÅ¡ÅÅÃÅ¤Å¥ÃÅ½Å¾ÅªÃÃÅ«Å®ÃÅ¯Å°Å±Å²Å³ÃÃ½Ä·Å»ÅÅ¼Ä¢Ë)Ú__doc__r   r   r   r   r   r   r   r   Úcharmap_buildr   r
   r
   r
   r   Ú<module>   s     ã               @   s   d Z ddlZG dd dejZG dd dejZG dd dejZG d	d
 d
eejZG dd deejZdd ZdZe 	e¡Z
dS )zo Python Character Mapping Codec mac_roman generated from 'MAPPINGS/VENDORS/APPLE/ROMAN.TXT' with gencodec.py.

é    Nc               @   s    e Zd ZdddZdddZdS )	ÚCodecÚstrictc             C   s   t  ||t¡S )N)ÚcodecsÚcharmap_encodeÚencoding_table)ÚselfÚinputÚerrors© r
   ú$D:\Python\lib\encodings\mac_roman.pyÚencode   s    zCodec.encodec             C   s   t  ||t¡S )N)r   Úcharmap_decodeÚdecoding_table)r   r   r	   r
   r
   r   Údecode   s    zCodec.decodeN)r   )r   )Ú__name__Ú
__module__Ú__qualname__r   r   r
   r
   r
   r   r   	   s   
r   c               @   s   e Zd ZdddZdS )ÚIncrementalEncoderFc             C   s   t  || jt¡d S )Nr   )r   r   r	   r   )r   r   Úfinalr
   r
   r   r      s    zIncrementalEncoder.encodeN)F)r   r   r   r   r
   r
   r
   r   r      s   r   c               @   s   e Zd ZdddZdS )ÚIncrementalDecoderFc             C   s   t  || jt¡d S )Nr   )r   r   r	   r   )r   r   r   r
   r
   r   r      s    zIncrementalDecoder.decodeN)F)r   r   r   r   r
   r
   r
   r   r      s   r   c               @   s   e Zd ZdS )ÚStreamWriterN)r   r   r   r
   r
   r
   r   r      s   r   c               @   s   e Zd ZdS )ÚStreamReaderN)r   r   r   r
   r
   r
   r   r      s   r   c            	   C   s    t jdt jt jttttdS )Nz	mac-roman)Únamer   r   ÚincrementalencoderÚincrementaldecoderÚstreamreaderÚstreamwriter)	r   Ú	CodecInfor   r   r   r   r   r   r   r
   r
   r
   r   Úgetregentry!   s    r   u¡   	
 !"#$%&'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\]^_`abcdefghijklmnopqrstuvwxyz{|}~ÃÃÃÃÃÃÃÃ¡Ã Ã¢Ã¤Ã£Ã¥Ã§Ã©Ã¨ÃªÃ«Ã­Ã¬Ã®Ã¯Ã±Ã³Ã²Ã´Ã¶ÃµÃºÃ¹Ã»Ã¼â Â°Â¢Â£Â§â¢Â¶ÃÂ®Â©â¢Â´Â¨â ÃÃâÂ±â¤â¥Â¥ÂµâââÏâ«ÂªÂºÎ©Ã¦Ã¸Â¿Â¡Â¬âÆââÂ«Â»â¦Â ÃÃÃÅÅââââââÃ·âÃ¿Å¸ââ¬â¹âºï¬ï¬â¡Â·âââ°ÃÃÃÃÃÃÃÃÃÃÃï£¿ÃÃÃÃÄ±ËËÂ¯ËËËÂ¸ËËË)Ú__doc__r   r   r   r   r   r   r   r   Úcharmap_buildr   r
   r
   r
   r   Ú<module>   s     ã               @   s   d Z ddlZG dd dejZG dd dejZG dd dejZG d	d
 d
eejZG dd deejZdd ZdZe 	e¡Z
dS )zu Python Character Mapping Codec mac_romanian generated from 'MAPPINGS/VENDORS/APPLE/ROMANIAN.TXT' with gencodec.py.

é    Nc               @   s    e Zd ZdddZdddZdS )	ÚCodecÚstrictc             C   s   t  ||t¡S )N)ÚcodecsÚcharmap_encodeÚencoding_table)ÚselfÚinputÚerrors© r
   ú'D:\Python\lib\encodings\mac_romanian.pyÚencode   s    zCodec.encodec             C   s   t  ||t¡S )N)r   Úcharmap_decodeÚdecoding_table)r   r   r	   r
   r
   r   Údecode   s    zCodec.decodeN)r   )r   )Ú__name__Ú
__module__Ú__qualname__r   r   r
   r
   r
   r   r   	   s   
r   c               @   s   e Zd ZdddZdS )ÚIncrementalEncoderFc             C   s   t  || jt¡d S )Nr   )r   r   r	   r   )r   r   Úfinalr
   r
   r   r      s    zIncrementalEncoder.encodeN)F)r   r   r   r   r
   r
   r
   r   r      s   r   c               @   s   e Zd ZdddZdS )ÚIncrementalDecoderFc             C   s   t  || jt¡d S )Nr   )r   r   r	   r   )r   r   r   r
   r
   r   r      s    zIncrementalDecoder.decodeN)F)r   r   r   r   r
   r
   r
   r   r      s   r   c               @   s   e Zd ZdS )ÚStreamWriterN)r   r   r   r
   r
   r
   r   r      s   r   c               @   s   e Zd ZdS )ÚStreamReaderN)r   r   r   r
   r
   r
   r   r      s   r   c            	   C   s    t jdt jt jttttdS )Nzmac-romanian)Únamer   r   ÚincrementalencoderÚincrementaldecoderÚstreamreaderÚstreamwriter)	r   Ú	CodecInfor   r   r   r   r   r   r   r
   r
   r
   r   Úgetregentry!   s    r   u   	
 !"#$%&'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\]^_`abcdefghijklmnopqrstuvwxyz{|}~ÃÃÃÃÃÃÃÃ¡Ã Ã¢Ã¤Ã£Ã¥Ã§Ã©Ã¨ÃªÃ«Ã­Ã¬Ã®Ã¯Ã±Ã³Ã²Ã´Ã¶ÃµÃºÃ¹Ã»Ã¼â Â°Â¢Â£Â§â¢Â¶ÃÂ®Â©â¢Â´Â¨â ÄÈâÂ±â¤â¥Â¥ÂµâââÏâ«ÂªÂºÎ©ÄÈÂ¿Â¡Â¬âÆââÂ«Â»â¦Â ÃÃÃÅÅââââââÃ·âÃ¿Å¸ââ¬â¹âºÈÈâ¡Â·âââ°ÃÃÃÃÃÃÃÃÃÃÃï£¿ÃÃÃÃÄ±ËËÂ¯ËËËÂ¸ËËË)Ú__doc__r   r   r   r   r   r   r   r   Úcharmap_buildr   r
   r
   r
   r   Ú<module>   s     ã               @   s   d Z ddlZG dd dejZG dd dejZG dd dejZG d	d
 d
eejZG dd deejZdd ZdZe 	e¡Z
dS )zs Python Character Mapping Codec mac_turkish generated from 'MAPPINGS/VENDORS/APPLE/TURKISH.TXT' with gencodec.py.

é    Nc               @   s    e Zd ZdddZdddZdS )	ÚCodecÚstrictc             C   s   t  ||t¡S )N)ÚcodecsÚcharmap_encodeÚencoding_table)ÚselfÚinputÚerrors© r
   ú&D:\Python\lib\encodings\mac_turkish.pyÚencode   s    zCodec.encodec             C   s   t  ||t¡S )N)r   Úcharmap_decodeÚdecoding_table)r   r   r	   r
   r
   r   Údecode   s    zCodec.decodeN)r   )r   )Ú__name__Ú
__module__Ú__qualname__r   r   r
   r
   r
   r   r   	   s   
r   c               @   s   e Zd ZdddZdS )ÚIncrementalEncoderFc             C   s   t  || jt¡d S )Nr   )r   r   r	   r   )r   r   Úfinalr
   r
   r   r      s    zIncrementalEncoder.encodeN)F)r   r   r   r   r
   r
   r
   r   r      s   r   c               @   s   e Zd ZdddZdS )ÚIncrementalDecoderFc             C   s   t  || jt¡d S )Nr   )r   r   r	   r   )r   r   r   r
   r
   r   r      s    zIncrementalDecoder.decodeN)F)r   r   r   r   r
   r
   r
   r   r      s   r   c               @   s   e Zd ZdS )ÚStreamWriterN)r   r   r   r
   r
   r
   r   r      s   r   c               @   s   e Zd ZdS )ÚStreamReaderN)r   r   r   r
   r
   r
   r   r      s   r   c            	   C   s    t jdt jt jttttdS )Nzmac-turkish)Únamer   r   ÚincrementalencoderÚincrementaldecoderÚstreamreaderÚstreamwriter)	r   Ú	CodecInfor   r   r   r   r   r   r   r
   r
   r
   r   Úgetregentry!   s    r   u   	
 !"#$%&'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\]^_`abcdefghijklmnopqrstuvwxyz{|}~ÃÃÃÃÃÃÃÃ¡Ã Ã¢Ã¤Ã£Ã¥Ã§Ã©Ã¨ÃªÃ«Ã­Ã¬Ã®Ã¯Ã±Ã³Ã²Ã´Ã¶ÃµÃºÃ¹Ã»Ã¼â Â°Â¢Â£Â§â¢Â¶ÃÂ®Â©â¢Â´Â¨â ÃÃâÂ±â¤â¥Â¥ÂµâââÏâ«ÂªÂºÎ©Ã¦Ã¸Â¿Â¡Â¬âÆââÂ«Â»â¦Â ÃÃÃÅÅââââââÃ·âÃ¿Å¸ÄÄÄ°Ä±ÅÅâ¡Â·âââ°ÃÃÃÃÃÃÃÃÃÃÃï£¿ÃÃÃÃï¢ ËËÂ¯ËËËÂ¸ËËË)Ú__doc__r   r   r   r   r   r   r   r   Úcharmap_buildr   r
   r
   r
   r   Ú<module>   s     ã               @   s~   d Z ddlmZmZ ddlZeZdddZG dd dejZG d	d
 d
ejZG dd dej	Z	G dd dej
Z
dd ZdS )zØ Python 'mbcs' Codec for Windows


Cloned by Mark Hammond (mhammond@skippinet.com.au) from ascii.py,
which was written by Marc-Andre Lemburg (mal@lemburg.com).

(c) Copyright CNRI, All Rights Reserved. NO WARRANTY.

é    )Úmbcs_encodeÚmbcs_decodeNÚstrictc             C   s   t | |dS )NT)r   )ÚinputÚerrors© r   úD:\Python\lib\encodings\mbcs.pyÚdecode   s    r	   c               @   s   e Zd ZdddZdS )ÚIncrementalEncoderFc             C   s   t || jd S )Nr   )r   r   )Úselfr   Úfinalr   r   r   Úencode   s    zIncrementalEncoder.encodeN)F)Ú__name__Ú
__module__Ú__qualname__r   r   r   r   r   r
      s   r
   c               @   s   e Zd ZeZdS )ÚIncrementalDecoderN)r   r   r   r   Ú_buffer_decoder   r   r   r   r      s   r   c               @   s   e Zd ZeZdS )ÚStreamWriterN)r   r   r   r   r   r   r   r   r   r      s   r   c               @   s   e Zd ZeZdS )ÚStreamReaderN)r   r   r   r   r	   r   r   r   r   r   !   s   r   c            	   C   s   t jdttttttdS )NÚmbcs)Únamer   r	   ÚincrementalencoderÚincrementaldecoderÚstreamreaderÚstreamwriter)ÚcodecsÚ	CodecInfor   r	   r
   r   r   r   r   r   r   r   Úgetregentry&   s    r   )r   )Ú__doc__r   r   r   r   r	   r
   ÚBufferedIncrementalDecoderr   r   r   r   r   r   r   r   Ú<module>	   s   
ã               @   s~   d Z ddlmZmZ ddlZeZdddZG dd dejZG d	d
 d
ejZG dd dej	Z	G dd dej
Z
dd ZdS )z! Python 'oem' Codec for Windows

é    )Ú
oem_encodeÚ
oem_decodeNÚstrictc             C   s   t | |dS )NT)r   )ÚinputÚerrors© r   úD:\Python\lib\encodings\oem.pyÚdecode   s    r	   c               @   s   e Zd ZdddZdS )ÚIncrementalEncoderFc             C   s   t || jd S )Nr   )r   r   )Úselfr   Úfinalr   r   r   Úencode   s    zIncrementalEncoder.encodeN)F)Ú__name__Ú
__module__Ú__qualname__r   r   r   r   r   r
      s   r
   c               @   s   e Zd ZeZdS )ÚIncrementalDecoderN)r   r   r   r   Ú_buffer_decoder   r   r   r   r      s   r   c               @   s   e Zd ZeZdS )ÚStreamWriterN)r   r   r   r   r   r   r   r   r   r      s   r   c               @   s   e Zd ZeZdS )ÚStreamReaderN)r   r   r   r   r	   r   r   r   r   r      s   r   c            	   C   s   t jdttttttdS )NÚoem)Únamer   r	   ÚincrementalencoderÚincrementaldecoderÚstreamreaderÚstreamwriter)ÚcodecsÚ	CodecInfor   r	   r
   r   r   r   r   r   r   r   Úgetregentry    s    r   )r   )Ú__doc__r   r   r   r   r	   r
   ÚBufferedIncrementalDecoderr   r   r   r   r   r   r   r   Ú<module>   s   
ã               @   s   d Z ddlZG dd dejZG dd dejZG dd dejZG d	d
 d
eejZG dd deejZdd ZdZe 	e¡Z
dS )zx Python Character Mapping Codec for PalmOS 3.5.

Written by Sjoerd Mullender (sjoerd@acm.org); based on iso8859_15.py.

é    Nc               @   s    e Zd ZdddZdddZdS )	ÚCodecÚstrictc             C   s   t  ||t¡S )N)ÚcodecsÚcharmap_encodeÚencoding_table)ÚselfÚinputÚerrors© r
   ú!D:\Python\lib\encodings\palmos.pyÚencode   s    zCodec.encodec             C   s   t  ||t¡S )N)r   Úcharmap_decodeÚdecoding_table)r   r   r	   r
   r
   r   Údecode   s    zCodec.decodeN)r   )r   )Ú__name__Ú
__module__Ú__qualname__r   r   r
   r
   r
   r   r      s   
r   c               @   s   e Zd ZdddZdS )ÚIncrementalEncoderFc             C   s   t  || jt¡d S )Nr   )r   r   r	   r   )r   r   Úfinalr
   r
   r   r      s    zIncrementalEncoder.encodeN)F)r   r   r   r   r
   r
   r
   r   r      s   r   c               @   s   e Zd ZdddZdS )ÚIncrementalDecoderFc             C   s   t  || jt¡d S )Nr   )r   r   r	   r   )r   r   r   r
   r
   r   r      s    zIncrementalDecoder.decodeN)F)r   r   r   r   r
   r
   r
   r   r      s   r   c               @   s   e Zd ZdS )ÚStreamWriterN)r   r   r   r
   r
   r
   r   r      s   r   c               @   s   e Zd ZdS )ÚStreamReaderN)r   r   r   r
   r
   r
   r   r      s   r   c            	   C   s    t jdt jt jttttdS )NZpalmos)Únamer   r   ÚincrementalencoderÚincrementaldecoderÚstreamreaderÚstreamwriter)	r   Ú	CodecInfor   r   r   r   r   r   r   r
   r
   r
   r   Úgetregentry"   s    r   u   	
 !"#$%&'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\]^_`abcdefghijklmnopqrstuvwxyz{|}~â¬ÂâÆââ¦â â¡Ëâ°Å â¹Åâ¦â£â¥â âââââ¢ââËâ¢Å¡ÂÅÂÂÅ¸Â Â¡Â¢Â£Â¤Â¥Â¦Â§Â¨Â©ÂªÂ«Â¬Â­Â®Â¯Â°Â±Â²Â³Â´ÂµÂ¶Â·Â¸Â¹ÂºÂ»Â¼Â½Â¾Â¿ÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃÃ Ã¡Ã¢Ã£Ã¤Ã¥Ã¦Ã§Ã¨Ã©ÃªÃ«Ã¬Ã­Ã®Ã¯Ã°Ã±Ã²Ã³Ã´ÃµÃ¶Ã·Ã¸Ã¹ÃºÃ»Ã¼Ã½Ã¾Ã¿)Ú__doc__r   r   r   r   r   r   r   r   Úcharmap_buildr   r
   r
   r
   r   Ú<module>   s     ã               @   s   d Z ddlZG dd dejZG dd dejZG dd dejZG d	d
 d
eejZG dd deejZdd ZdZe 	e¡Z
dS )zÞ Python Character Mapping Codec generated from 'PTCP154.txt' with gencodec.py.

Written by Marc-Andre Lemburg (mal@lemburg.com).

(c) Copyright CNRI, All Rights Reserved. NO WARRANTY.
(c) Copyright 2000 Guido van Rossum.

é    Nc               @   s    e Zd ZdddZdddZdS )	ÚCodecÚstrictc             C   s   t  ||t¡S )N)ÚcodecsÚcharmap_encodeÚencoding_table)ÚselfÚinputÚerrors© r
   ú"D:\Python\lib\encodings\ptcp154.pyÚencode   s    zCodec.encodec             C   s   t  ||t¡S )N)r   Úcharmap_decodeÚdecoding_table)r   r   r	   r
   r
   r   Údecode   s    zCodec.decodeN)r   )r   )Ú__name__Ú
__module__Ú__qualname__r   r   r
   r
   r
   r   r      s   
r   c               @   s   e Zd ZdddZdS )ÚIncrementalEncoderFc             C   s   t  || jt¡d S )Nr   )r   r   r	   r   )r   r   Úfinalr
   r
   r   r      s    zIncrementalEncoder.encodeN)F)r   r   r   r   r
   r
   r
   r   r      s   r   c               @   s   e Zd ZdddZdS )ÚIncrementalDecoderFc             C   s   t  || jt¡d S )Nr   )r   r   r	   r   )r   r   r   r
   r
   r   r      s    zIncrementalDecoder.decodeN)F)r   r   r   r   r
   r
   r
   r   r      s   r   c               @   s   e Zd ZdS )ÚStreamWriterN)r   r   r   r
   r
   r
   r   r      s   r   c               @   s   e Zd ZdS )ÚStreamReaderN)r   r   r   r
   r
   r
   r   r   !   s   r   c            	   C   s    t jdt jt jttttdS )NÚptcp154)Únamer   r   ÚincrementalencoderÚincrementaldecoderÚstreamreaderÚstreamwriter)	r   Ú	CodecInfor   r   r   r   r   r   r   r
   r
   r
   r   Úgetregentry&   s    r   u   	
 !"#$%&'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\]^_`abcdefghijklmnopqrstuvwxyz{|}~ÒÒÓ®Òââ¦Ò¶Ò®Ò²Ò¯Ò Ó¢Ò¢ÒÒºÒ¸Òâââââ¢ââÒ³Ò·Ò¡Ó£Ò£ÒÒ»Ò¹Â ÐÑÐÓ¨ÒÒ°Â§ÐÂ©ÓÂ«Â¬Ó¯Â®ÒÂ°Ò±ÐÑÒÓ©Â¶Â·ÑâÓÂ»ÑÒªÒ«ÒÐÐÐÐÐÐÐÐÐÐÐÐÐÐÐÐÐ Ð¡Ð¢Ð£Ð¤Ð¥Ð¦Ð§Ð¨Ð©ÐªÐ«Ð¬Ð­Ð®Ð¯Ð°Ð±Ð²Ð³Ð´ÐµÐ¶Ð·Ð¸Ð¹ÐºÐ»Ð¼Ð½Ð¾Ð¿ÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑÑ)Ú__doc__r   r   r   r   r   r   r   r   Úcharmap_buildr   r
   r
   r
   r   Ú<module>   s     ã               @   sÚ   d Z ddlZdd Zdd Zdd Zd	d
 Zdd ZdZdd Zdd Z	dd Z
dd Zdd Zdd Zdd ZG dd dejZG dd dejZG d d! d!ejZG d"d# d#eejZG d$d% d%eejZd&d' ZdS )(uY    Codec for the Punicode encoding, as specified in RFC 3492

Written by Martin v. LÃ¶wis.
é    Nc             C   sT   t  }t }x2| D ]*}t|dk r2| t|¡ q| |¡ qW t|}t||fS )z 3.1 Basic code point segregationé   )Ú	bytearrayÚsetÚordÚappendÚaddÚsortedÚbytes)ÚstrÚbaseÚextendedÚc© r   ú#D:\Python\lib\encodings\punycode.pyÚ	segregate
   s    
r   c             C   s*   d}x | D ]}t ||k r
|d7 }q
W |S )z@Return the length of str, considering only characters below max.r   é   )r   )r
   ÚmaxÚresr   r   r   r   Úselective_len   s
    
r   c             C   sR   t | }xD|d7 }||krdS | | }||kr:|d |fS ||k r
|d7 }q
W dS )a  Return a pair (index, pos), indicating the next occurrence of
    char in str. index is the position of the character considering
    only ordinals up to and including char, and pos is the position in
    the full string. index/pos is the starting position in the full
    string.r   )éÿÿÿÿr   N)Úlen)r
   ÚcharÚindexÚposÚlr   r   r   r   Úselective_find   s    r   c             C   s   d}g }d}x~|D ]v}d }}t |}t| |}	|	d ||  }
xBt| |||\}}|dkr^P |
|| 7 }
| |
d ¡ |}d}
qBW |}qW |S )z3.2 Insertion unsort codingr   r   r   r   )r   r   r   r   )r
   r   ZoldcharÚresultZoldindexr   r   r   r   ZcurlenÚdeltar   r   r   Úinsertion_unsort0   s$    

r   c             C   s,   d| d  | }|dk rdS |dkr(dS |S )Né$   r   é   r   )ÚjÚbiasr   r   r   r   ÚTF   s      r#   s$   abcdefghijklmnopqrstuvwxyz0123456789c             C   sr   t  }d}xbt||}| |k r4| t|  ¡ t|S | t|| | d|    ¡ | | d|  } |d7 }qW dS )z(3.3 Generalized variable-length integersr   r   r   N)r   r#   r   Údigitsr	   )ÚNr"   r   r!   Útr   r   r   Úgenerate_generalized_integerN   s    
r'   c             C   s\   |r| d } n| d } | | | 7 } d}x| dkrB| d } |d7 }q(W |d|  | d   }|S )Ni¼  é   r   iÇ  é#   r   é&   r   )r   ÚfirstÚnumcharsZ	divisionsr"   r   r   r   Úadapt[   s    

r-   c             C   sT   t  }d}x@t|D ]4\}}t||}| |¡ t||dk| | d }qW t|S )z3.4 Bias adaptationéH   r   r   )r   Ú	enumerater'   Úextendr-   r	   )ZbaselenÚdeltasr   r"   Zpointsr   Úsr   r   r   Úgenerate_integersj   s    

r3   c             C   s8   t | \}}t| |}tt||}|r4|d | S |S )Nó   -)r   r   r3   r   )Útextr   r   r1   r   r   r   Úpunycode_encodeu   s    
r6   c       
      C   sü   d}d}d}xêyt | | }W n, tk
rJ   |dkr>td|d dfS X |d7 }d|  krhdkrvn n
|d }nDd|  krd	krn n
|d
 }n"|dkr²td| |  n|dfS t||}	||| 7 }||	k rà||fS |d|	  }|d7 }qW dS )z(3.3 Generalized variable-length integersr   r   Ústrictzincomplete punicode stringNéA   éZ   é0   é9   é   z Invalid extended code point '%s'r   )r   Ú
IndexErrorÚUnicodeErrorr#   )
r   Úextposr"   Úerrorsr   Úwr!   r   Zdigitr&   r   r   r   Údecode_generalized_number   s2    


rB   c       	      C   sÐ   d}d}d}d}xº|t |k rÊt||||\}}|dkr<| S ||d 7 }||t | d  7 }|dkr|dkrxtd	| td
}|t | d  }| d| t| | |d  } t||dkt | }|}qW | S )z3.2 Insertion unsort codingr   r   r.   r   Nr   iÿÿ r7   zInvalid character U+%xú?)r   rB   r>   r   Úchrr-   )	r   r   r@   r   r   r"   r?   Znewposr   r   r   r   Úinsertion_sort   s(     rE   c             C   s   t | tr|  d¡} t | tr&t| } |  d¡}|dkrLd}t| d ¡ }n.t| d | d|}t| |d d  d ¡ }t|||S )NÚasciir4   r   Ú r   )Ú
isinstancer
   ÚencodeÚ
memoryviewr	   ÚrfindÚupperrE   )r5   r@   r   r   r   r   r   r   Úpunycode_decode¶   s    



rM   c               @   s    e Zd ZdddZdddZdS )	ÚCodecr7   c             C   s   t |}|t|fS )N)r6   r   )ÚselfÚinputr@   r   r   r   r   rI   È   s    zCodec.encodec             C   s*   |dkrt d| t||}|t|fS )N)r7   ÚreplaceÚignorezUnsupported error handling )r>   rM   r   )rO   rP   r@   r   r   r   r   ÚdecodeÌ   s    
zCodec.decodeN)r7   )r7   )Ú__name__Ú
__module__Ú__qualname__rI   rS   r   r   r   r   rN   Æ   s   
rN   c               @   s   e Zd ZdddZdS )ÚIncrementalEncoderFc             C   s   t |S )N)r6   )rO   rP   Úfinalr   r   r   rI   Ó   s    zIncrementalEncoder.encodeN)F)rT   rU   rV   rI   r   r   r   r   rW   Ò   s   rW   c               @   s   e Zd ZdddZdS )ÚIncrementalDecoderFc             C   s$   | j dkrtd| j  t|| j S )N)r7   rQ   rR   zUnsupported error handling )r@   r>   rM   )rO   rP   rX   r   r   r   rS   ×   s    
zIncrementalDecoder.decodeN)F)rT   rU   rV   rS   r   r   r   r   rY   Ö   s   rY   c               @   s   e Zd ZdS )ÚStreamWriterN)rT   rU   rV   r   r   r   r   rZ   Ü   s   rZ   c               @   s   e Zd ZdS )ÚStreamReaderN)rT   rU   rV   r   r   r   r   r[   ß   s   r[   c            	   C   s    t jdt jt jttttdS )NZpunycode)ÚnamerI   rS   ÚincrementalencoderÚincrementaldecoderÚstreamwriterÚstreamreader)	ÚcodecsÚ	CodecInforN   rI   rS   rW   rY   rZ   r[   r   r   r   r   Úgetregentryä   s    rc   )Ú__doc__ra   r   r   r   r   r#   r$   r'   r-   r3   r6   rB   rE   rM   rN   rW   rY   rZ   r[   rc   r   r   r   r   Ú<module>   s(   
ã               @   s   d Z ddlZddlZddlmZ dddZdddZG d	d
 d
ejZG dd dejZG dd dej	Z	G dd deej
Z
G dd deejZdd ZdS )zQCodec for quoted-printable encoding.

This codec de/encodes from bytes to bytes.
é    N)ÚBytesIOÚstrictc             C   s:   |dkst t| }t }tj||dd | ¡ t| fS )Nr   T)Ú	quotetabs)ÚAssertionErrorr   ÚquopriÚencodeÚgetvalueÚlen)ÚinputÚerrorsÚfÚg© r   ú'D:\Python\lib\encodings\quopri_codec.pyÚquopri_encode
   s
    r   c             C   s6   |dkst t| }t }t ||¡ | ¡ t| fS )Nr   )r   r   r   Údecoder   r	   )r
   r   r   r   r   r   r   Úquopri_decode   s
    r   c               @   s    e Zd ZdddZdddZdS )	ÚCodecr   c             C   s
   t ||S )N)r   )Úselfr
   r   r   r   r   r      s    zCodec.encodec             C   s
   t ||S )N)r   )r   r
   r   r   r   r   r      s    zCodec.decodeN)r   )r   )Ú__name__Ú
__module__Ú__qualname__r   r   r   r   r   r   r      s   
r   c               @   s   e Zd ZdddZdS )ÚIncrementalEncoderFc             C   s   t || jd S )Nr   )r   r   )r   r
   Úfinalr   r   r   r      s    zIncrementalEncoder.encodeN)F)r   r   r   r   r   r   r   r   r      s   r   c               @   s   e Zd ZdddZdS )ÚIncrementalDecoderFc             C   s   t || jd S )Nr   )r   r   )r   r
   r   r   r   r   r   #   s    zIncrementalDecoder.decodeN)F)r   r   r   r   r   r   r   r   r   "   s   r   c               @   s   e Zd ZeZdS )ÚStreamWriterN)r   r   r   ÚbytesÚcharbuffertyper   r   r   r   r   &   s   r   c               @   s   e Zd ZeZdS )ÚStreamReaderN)r   r   r   r   r   r   r   r   r   r   )   s   r   c            
   C   s   t jdttttttddS )Nr   F)Únamer   r   ÚincrementalencoderÚincrementaldecoderÚstreamwriterÚstreamreaderÚ_is_text_encoding)ÚcodecsÚ	CodecInfor   r   r   r   r   r   r   r   r   r   Úgetregentry.   s    r'   )r   )r   )Ú__doc__r%   r   Úior   r   r   r   r   r   r   r   r'   r   r   r   r   Ú<module>   s   

ã               @   sv   d Z ddlZG dd dejZG dd dejZG dd dejZG d	d
 d
eejZG dd deejZdd ZdS )z Python 'raw-unicode-escape' Codec


Written by Marc-Andre Lemburg (mal@lemburg.com).

(c) Copyright CNRI, All Rights Reserved. NO WARRANTY.

é    Nc               @   s   e Zd ZejZejZdS )ÚCodecN)Ú__name__Ú
__module__Ú__qualname__ÚcodecsÚraw_unicode_escape_encodeÚencodeÚraw_unicode_escape_decodeÚdecode© r   r   ú-D:\Python\lib\encodings\raw_unicode_escape.pyr      s   r   c               @   s   e Zd ZdddZdS )ÚIncrementalEncoderFc             C   s   t  || j¡d S )Nr   )r   r   Úerrors)ÚselfÚinputÚfinalr   r   r   r      s    zIncrementalEncoder.encodeN)F)r   r   r   r   r   r   r   r   r      s   r   c               @   s   e Zd ZdddZdS )ÚIncrementalDecoderFc             C   s   t  || j¡d S )Nr   )r   r	   r   )r   r   r   r   r   r   r
      s    zIncrementalDecoder.decodeN)F)r   r   r   r
   r   r   r   r   r      s   r   c               @   s   e Zd ZdS )ÚStreamWriterN)r   r   r   r   r   r   r   r      s   r   c               @   s   e Zd ZdS )ÚStreamReaderN)r   r   r   r   r   r   r   r      s   r   c            	   C   s   t jdtjtjttttdS )Nzraw-unicode-escape)Únamer   r
   ÚincrementalencoderÚincrementaldecoderÚstreamwriterÚstreamreader)	r   Ú	CodecInfor   r   r
   r   r   r   r   r   r   r   r   Úgetregentry$   s    r   )Ú__doc__r   r   r   r   r   r   r   r   r   r   r   Ú<module>   s   ã            7   @   s   d Z ddlZG dd dejZG dd dejZG dd dejZG d	d
 d
eejZG dd deejZdd Ze e	d¡Z
e
 ddddddddddddddddd d!d"d#d$d%d&d'd(d)d*d+d,d-d.d/d0d1d2d3d4d5d6d7d8d9d:d;d<d=d>d?d@dAdBdCdD4¡ dEdF ZedGkrddlZeejej dS )Hz Python Character Mapping Codec for ROT13.

This codec de/encodes from str to str.

Written by Marc-Andre Lemburg (mal@lemburg.com).
é    Nc               @   s    e Zd ZdddZdddZdS )	ÚCodecÚstrictc             C   s   t  |t¡t|fS )N)ÚstrÚ	translateÚ	rot13_mapÚlen)ÚselfÚinputÚerrors© r   ú!D:\Python\lib\encodings\rot_13.pyÚencode   s    zCodec.encodec             C   s   t  |t¡t|fS )N)r   r   r   r   )r   r	   r
   r   r   r   Údecode   s    zCodec.decodeN)r   )r   )Ú__name__Ú
__module__Ú__qualname__r   r   r   r   r   r   r      s   
r   c               @   s   e Zd ZdddZdS )ÚIncrementalEncoderFc             C   s   t  |t¡S )N)r   r   r   )r   r	   Úfinalr   r   r   r      s    zIncrementalEncoder.encodeN)F)r   r   r   r   r   r   r   r   r      s   r   c               @   s   e Zd ZdddZdS )ÚIncrementalDecoderFc             C   s   t  |t¡S )N)r   r   r   )r   r	   r   r   r   r   r      s    zIncrementalDecoder.decodeN)F)r   r   r   r   r   r   r   r   r      s   r   c               @   s   e Zd ZdS )ÚStreamWriterN)r   r   r   r   r   r   r   r      s   r   c               @   s   e Zd ZdS )ÚStreamReaderN)r   r   r   r   r   r   r   r      s   r   c            
   C   s"   t jdt jt jttttddS )Nzrot-13F)Únamer   r   ÚincrementalencoderÚincrementaldecoderÚstreamwriterÚstreamreaderÚ_is_text_encoding)	ÚcodecsÚ	CodecInfor   r   r   r   r   r   r   r   r   r   r   Úgetregentry$   s    r   é   éN   éO   éP   éQ   éR   éS   éT   éU   éV   éW   éX   éY   éZ   éA   éB   éC   éD   éE   éF   éG   éH   éI   éJ   éK   éL   éM   én   éo   ép   éq   ér   és   ét   éu   év   éw   éx   éy   éz   éa   éb   éc   éd   ée   éf   ég   éh   éi   éj   ék   él   ém   )4r.   r/   r0   r1   r2   r3   r4   r5   r6   r7   r8   r9   r:   r!   r"   r#   r$   r%   r&   r'   r(   r)   r*   r+   r,   r-   rH   rI   rJ   rK   rL   rM   rN   rO   rP   rQ   rR   rS   rT   r;   r<   r=   r>   r?   r@   rA   rB   rC   rD   rE   rF   rG   c             C   s   |  t |  ¡ d¡¡ d S )Nzrot-13)Úwriter   r   Úread)ÚinfileÚoutfiler   r   r   Úrot13l   s    rY   Ú__main__)Ú__doc__r   r   r   r   r   r   r   Úmake_identity_dictÚranger   ÚupdaterY   r   ÚsysÚstdinÚstdoutr   r   r   r   Ú<module>   s   

ã               @   s   d dl Z d dlZd dlZe  d¡ZG dd dejZG dd dejejZG dd dej	ej
Z
G d	d
 d
eejejZG dd deejejZdd ZdS )é    NÚ	shift_jisc               @   s   e Zd ZejZejZdS )ÚCodecN)Ú__name__Ú
__module__Ú__qualname__ÚcodecÚencodeÚdecode© r
   r
   ú$D:\Python\lib\encodings\shift_jis.pyr      s   r   c               @   s   e Zd ZeZdS )ÚIncrementalEncoderN)r   r   r   r   r
   r
   r
   r   r      s   r   c               @   s   e Zd ZeZdS )ÚIncrementalDecoderN)r   r   r   r   r
   r
   r
   r   r      s   r   c               @   s   e Zd ZeZdS )ÚStreamReaderN)r   r   r   r   r
   r
   r
   r   r      s   r   c               @   s   e Zd ZeZdS )ÚStreamWriterN)r   r   r   r   r
   r
   r
   r   r      s   r   c            	   C   s    t jdt jt jttttdS )Nr   )Únamer   r	   ÚincrementalencoderÚincrementaldecoderÚstreamreaderÚstreamwriter)	ÚcodecsÚ	CodecInfor   r   r	   r   r   r   r   r
   r
   r
   r   Úgetregentry   s    r   )Z
_codecs_jpr   Z_multibytecodecZmbcZgetcodecr   r   ZMultibyteIncrementalEncoderr   ZMultibyteIncrementalDecoderr   ZMultibyteStreamReaderr   ZMultibyteStreamWriterr   r   r
   r
   r
   r   Ú<module>   s   
ã               @   s   d dl Z d dlZd dlZe  d¡ZG dd dejZG dd dejejZG dd dej	ej
Z
G d	d
 d
eejejZG dd deejejZdd ZdS )é    NÚshift_jis_2004c               @   s   e Zd ZejZejZdS )ÚCodecN)Ú__name__Ú
__module__Ú__qualname__ÚcodecÚencodeÚdecode© r
   r
   ú)D:\Python\lib\encodings\shift_jis_2004.pyr      s   r   c               @   s   e Zd ZeZdS )ÚIncrementalEncoderN)r   r   r   r   r
   r
   r
   r   r      s   r   c               @   s   e Zd ZeZdS )ÚIncrementalDecoderN)r   r   r   r   r
   r
   r
   r   r      s   r   c               @   s   e Zd ZeZdS )ÚStreamReaderN)r   r   r   r   r
   r
   r
   r   r      s   r   c               @   s   e Zd ZeZdS )ÚStreamWriterN)r   r   r   r   r
   r
   r
   r   r      s   r   c            	   C   s    t jdt jt jttttdS )Nr   )Únamer   r	   ÚincrementalencoderÚincrementaldecoderÚstreamreaderÚstreamwriter)	ÚcodecsÚ	CodecInfor   r   r	   r   r   r   r   r
   r
   r
   r   Úgetregentry   s    r   )Z
_codecs_jpr   Z_multibytecodecZmbcZgetcodecr   r   ZMultibyteIncrementalEncoderr   ZMultibyteIncrementalDecoderr   ZMultibyteStreamReaderr   ZMultibyteStreamWriterr   r   r
   r
   r
   r   Ú<module>   s   
ã               @   s   d dl Z d dlZd dlZe  d¡ZG dd dejZG dd dejejZG dd dej	ej
Z
G d	d
 d
eejejZG dd deejejZdd ZdS )é    NÚshift_jisx0213c               @   s   e Zd ZejZejZdS )ÚCodecN)Ú__name__Ú
__module__Ú__qualname__ÚcodecÚencodeÚdecode© r
   r
   ú)D:\Python\lib\encodings\shift_jisx0213.pyr      s   r   c               @   s   e Zd ZeZdS )ÚIncrementalEncoderN)r   r   r   r   r
   r
   r
   r   r      s   r   c               @   s   e Zd ZeZdS )ÚIncrementalDecoderN)r   r   r   r   r
   r
   r
   r   r      s   r   c               @   s   e Zd ZeZdS )ÚStreamReaderN)r   r   r   r   r
   r
   r
   r   r      s   r   c               @   s   e Zd ZeZdS )ÚStreamWriterN)r   r   r   r   r
   r
   r
   r   r      s   r   c            	   C   s    t jdt jt jttttdS )Nr   )Únamer   r	   ÚincrementalencoderÚincrementaldecoderÚstreamreaderÚstreamwriter)	ÚcodecsÚ	CodecInfor   r   r	   r   r   r   r   r
   r
   r
   r   Úgetregentry   s    r   )Z
_codecs_jpr   Z_multibytecodecZmbcZgetcodecr   r   ZMultibyteIncrementalEncoderr   ZMultibyteIncrementalDecoderr   ZMultibyteStreamReaderr   ZMultibyteStreamWriterr   r   r
   r
   r
   r   Ú<module>   s   
ã               @   s   d Z ddlZG dd dejZG dd dejZG dd dejZG d	d
 d
eejZG dd deejZdd ZdZe 	e¡Z
dS )zh Python Character Mapping Codec tis_620 generated from 'python-mappings/TIS-620.TXT' with gencodec.py.

é    Nc               @   s    e Zd ZdddZdddZdS )	ÚCodecÚstrictc             C   s   t  ||t¡S )N)ÚcodecsÚcharmap_encodeÚencoding_table)ÚselfÚinputÚerrors© r
   ú"D:\Python\lib\encodings\tis_620.pyÚencode   s    zCodec.encodec             C   s   t  ||t¡S )N)r   Úcharmap_decodeÚdecoding_table)r   r   r	   r
   r
   r   Údecode   s    zCodec.decodeN)r   )r   )Ú__name__Ú
__module__Ú__qualname__r   r   r
   r
   r
   r   r   	   s   
r   c               @   s   e Zd ZdddZdS )ÚIncrementalEncoderFc             C   s   t  || jt¡d S )Nr   )r   r   r	   r   )r   r   Úfinalr
   r
   r   r      s    zIncrementalEncoder.encodeN)F)r   r   r   r   r
   r
   r
   r   r      s   r   c               @   s   e Zd ZdddZdS )ÚIncrementalDecoderFc             C   s   t  || jt¡d S )Nr   )r   r   r	   r   )r   r   r   r
   r
   r   r      s    zIncrementalDecoder.decodeN)F)r   r   r   r   r
   r
   r
   r   r      s   r   c               @   s   e Zd ZdS )ÚStreamWriterN)r   r   r   r
   r
   r
   r   r      s   r   c               @   s   e Zd ZdS )ÚStreamReaderN)r   r   r   r
   r
   r
   r   r      s   r   c            	   C   s    t jdt jt jttttdS )Nztis-620)Únamer   r   ÚincrementalencoderÚincrementaldecoderÚstreamreaderÚstreamwriter)	r   Ú	CodecInfor   r   r   r   r   r   r   r
   r
   r
   r   Úgetregentry!   s    r   uà   	
 !"#$%&'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\]^_`abcdefghijklmnopqrstuvwxyz{|}~ÂÂÂÂÂÂÂÂÂÂÂÂÂÂÂÂÂÂÂÂÂÂÂÂÂÂÂÂÂÂÂÂï¿¾à¸à¸à¸à¸à¸à¸à¸à¸à¸à¸à¸à¸à¸à¸à¸à¸à¸à¸à¸à¸à¸à¸à¸à¸à¸à¸à¸à¸à¸à¸à¸à¸ à¸¡à¸¢à¸£à¸¤à¸¥à¸¦à¸§à¸¨à¸©à¸ªà¸«à¸¬à¸­à¸®à¸¯à¸°à¸±à¸²à¸³à¸´à¸µà¸¶à¸·à¸¸à¸¹à¸ºï¿¾ï¿¾ï¿¾ï¿¾à¸¿à¹à¹à¹à¹à¹à¹à¹à¹à¹à¹à¹à¹à¹à¹à¹à¹à¹à¹à¹à¹à¹à¹à¹à¹à¹à¹à¹à¹ï¿¾ï¿¾ï¿¾ï¿¾)Ú__doc__r   r   r   r   r   r   r   r   Úcharmap_buildr   r
   r
   r
   r   Ú<module>   s     ã               @   sv   d Z ddlZG dd dejZG dd dejZG dd dejZG d	d
 d
eejZG dd deejZdd ZdS )a5   Python 'undefined' Codec

    This codec will always raise a ValueError exception when being
    used. It is intended for use by the site.py file to switch off
    automatic string to Unicode coercion.

Written by Marc-Andre Lemburg (mal@lemburg.com).

(c) Copyright CNRI, All Rights Reserved. NO WARRANTY.

é    Nc               @   s    e Zd ZdddZdddZdS )	ÚCodecÚstrictc             C   s   t dd S )Nzundefined encoding)ÚUnicodeError)ÚselfÚinputÚerrors© r   ú$D:\Python\lib\encodings\undefined.pyÚencode   s    zCodec.encodec             C   s   t dd S )Nzundefined encoding)r   )r   r   r   r   r   r	   Údecode   s    zCodec.decodeN)r   )r   )Ú__name__Ú
__module__Ú__qualname__r
   r   r   r   r   r	   r      s   
r   c               @   s   e Zd ZdddZdS )ÚIncrementalEncoderFc             C   s   t dd S )Nzundefined encoding)r   )r   r   Úfinalr   r   r	   r
      s    zIncrementalEncoder.encodeN)F)r   r   r   r
   r   r   r   r	   r      s   r   c               @   s   e Zd ZdddZdS )ÚIncrementalDecoderFc             C   s   t dd S )Nzundefined encoding)r   )r   r   r   r   r   r	   r      s    zIncrementalDecoder.decodeN)F)r   r   r   r   r   r   r   r	   r      s   r   c               @   s   e Zd ZdS )ÚStreamWriterN)r   r   r   r   r   r   r	   r       s   r   c               @   s   e Zd ZdS )ÚStreamReaderN)r   r   r   r   r   r   r	   r   #   s   r   c            	   C   s    t jdt jt jttttdS )NZ	undefined)Únamer
   r   ÚincrementalencoderÚincrementaldecoderÚstreamwriterÚstreamreader)	ÚcodecsÚ	CodecInfor   r
   r   r   r   r   r   r   r   r   r	   Úgetregentry(   s    r   )Ú__doc__r   r   r   r   r   r   r   r   r   r   r	   Ú<module>   s   ã               @   sv   d Z ddlZG dd dejZG dd dejZG dd dejZG d	d
 d
eejZG dd deejZdd ZdS )z Python 'unicode-escape' Codec


Written by Marc-Andre Lemburg (mal@lemburg.com).

(c) Copyright CNRI, All Rights Reserved. NO WARRANTY.

é    Nc               @   s   e Zd ZejZejZdS )ÚCodecN)Ú__name__Ú
__module__Ú__qualname__ÚcodecsÚunicode_escape_encodeÚencodeÚunicode_escape_decodeÚdecode© r   r   ú)D:\Python\lib\encodings\unicode_escape.pyr      s   r   c               @   s   e Zd ZdddZdS )ÚIncrementalEncoderFc             C   s   t  || j¡d S )Nr   )r   r   Úerrors)ÚselfÚinputÚfinalr   r   r   r      s    zIncrementalEncoder.encodeN)F)r   r   r   r   r   r   r   r   r      s   r   c               @   s   e Zd ZdddZdS )ÚIncrementalDecoderFc             C   s   t  || j¡d S )Nr   )r   r	   r   )r   r   r   r   r   r   r
      s    zIncrementalDecoder.decodeN)F)r   r   r   r
   r   r   r   r   r      s   r   c               @   s   e Zd ZdS )ÚStreamWriterN)r   r   r   r   r   r   r   r      s   r   c               @   s   e Zd ZdS )ÚStreamReaderN)r   r   r   r   r   r   r   r      s   r   c            	   C   s   t jdtjtjttttdS )Nzunicode-escape)Únamer   r
   ÚincrementalencoderÚincrementaldecoderÚstreamwriterÚstreamreader)	r   Ú	CodecInfor   r   r
   r   r   r   r   r   r   r   r   Úgetregentry$   s    r   )Ú__doc__r   r   r   r   r   r   r   r   r   r   r   Ú<module>   s   ã               @   sv   d Z ddlZG dd dejZG dd dejZG dd dejZG d	d
 d
eejZG dd deejZdd ZdS )z Python 'unicode-internal' Codec


Written by Marc-Andre Lemburg (mal@lemburg.com).

(c) Copyright CNRI, All Rights Reserved. NO WARRANTY.

é    Nc               @   s   e Zd ZejZejZdS )ÚCodecN)Ú__name__Ú
__module__Ú__qualname__ÚcodecsÚunicode_internal_encodeÚencodeÚunicode_internal_decodeÚdecode© r   r   ú+D:\Python\lib\encodings\unicode_internal.pyr      s   r   c               @   s   e Zd ZdddZdS )ÚIncrementalEncoderFc             C   s   t  || j¡d S )Nr   )r   r   Úerrors)ÚselfÚinputÚfinalr   r   r   r      s    zIncrementalEncoder.encodeN)F)r   r   r   r   r   r   r   r   r      s   r   c               @   s   e Zd ZdddZdS )ÚIncrementalDecoderFc             C   s   t  || j¡d S )Nr   )r   r	   r   )r   r   r   r   r   r   r
      s    zIncrementalDecoder.decodeN)F)r   r   r   r
   r   r   r   r   r      s   r   c               @   s   e Zd ZdS )ÚStreamWriterN)r   r   r   r   r   r   r   r      s   r   c               @   s   e Zd ZdS )ÚStreamReaderN)r   r   r   r   r   r   r   r      s   r   c            	   C   s   t jdtjtjttttdS )Nzunicode-internal)Únamer   r
   ÚincrementalencoderÚincrementaldecoderÚstreamwriterÚstreamreader)	r   Ú	CodecInfor   r   r
   r   r   r   r   r   r   r   r   Úgetregentry$   s    r   )Ú__doc__r   r   r   r   r   r   r   r   r   r   r   Ú<module>   s   ã               @   sx   d Z ddlZddlZejZdddZG dd dejZG dd	 d	ejZG d
d dej	Z	G dd dej
Z
dd ZdS )z Python 'utf-16' Codec


Written by Marc-Andre Lemburg (mal@lemburg.com).

(c) Copyright CNRI, All Rights Reserved. NO WARRANTY.

é    NÚstrictc             C   s   t  | |d¡S )NT)ÚcodecsÚutf_16_decode)ÚinputÚerrors© r   ú!D:\Python\lib\encodings\utf_16.pyÚdecode   s    r	   c               @   s8   e Zd ZdddZdddZdd Zd	d
 Zdd ZdS )ÚIncrementalEncoderr   c             C   s   t j | |¡ d | _d S )N)r   r
   Ú__init__Úencoder)Úselfr   r   r   r   r      s    zIncrementalEncoder.__init__Fc             C   sN   | j d kr<t || j¡d }tjdkr0tj| _ ntj| _ |S |   || j¡d S )Nr   Úlittle)r   r   Úutf_16_encoder   ÚsysÚ	byteorderÚutf_16_le_encodeÚutf_16_be_encode)r   r   ÚfinalÚresultr   r   r   Úencode   s    


zIncrementalEncoder.encodec             C   s   t j | ¡ d | _d S )N)r   r
   Úresetr   )r   r   r   r   r   !   s    zIncrementalEncoder.resetc             C   s   | j d krdS dS )Né   r   )r   )r   r   r   r   Úgetstate%   s    zIncrementalEncoder.getstatec             C   s,   |rd | _ ntjdkr tj| _ ntj| _ d S )Nr   )r   r   r   r   r   r   )r   Ústater   r   r   Úsetstate,   s
    

zIncrementalEncoder.setstateN)r   )F)Ú__name__Ú
__module__Ú__qualname__r   r   r   r   r   r   r   r   r   r
      s
   


r
   c               @   s6   e Zd ZdddZdd Zdd Zdd	 Zd
d ZdS )ÚIncrementalDecoderr   c             C   s   t j | |¡ d | _d S )N)r   ÚBufferedIncrementalDecoderr   Údecoder)r   r   r   r   r   r   6   s    zIncrementalDecoder.__init__c             C   sl   | j d kr\t ||d|¡\}}}|dkr2tj| _ n"|dkrDtj| _ n|dkrTtd||fS |   || j|¡S )Nr   éÿÿÿÿé   r   z%UTF-16 stream does not start with BOM)r!   r   Úutf_16_ex_decodeÚutf_16_le_decodeÚutf_16_be_decodeÚUnicodeErrorr   )r   r   r   r   ÚoutputÚconsumedr   r   r   r   Ú_buffer_decode:   s    


z!IncrementalDecoder._buffer_decodec             C   s   t j | ¡ d | _d S )N)r   r    r   r!   )r   r   r   r   r   G   s    zIncrementalDecoder.resetc             C   sD   t j | ¡d }| jd kr"|dfS ttjdk| jt jkk}||fS )Nr   r   Úbig)r   r    r   r!   Úintr   r   r&   )r   r   Zaddstater   r   r   r   K   s    

zIncrementalDecoder.getstatec             C   sd   t j | |¡ |d }|dkr8tjdkr.t jnt j| _n(|dkrZtjdkrPt jnt j| _nd | _d S )Nr#   r   r+   )r   r    r   r   r   r&   r%   r!   )r   r   r   r   r   r   Y   s    

zIncrementalDecoder.setstateN)r   )r   r   r   r   r*   r   r   r   r   r   r   r   r   5   s
   
r   c               @   s(   e Zd Zd	ddZdd Zd
ddZdS )ÚStreamWriterr   c             C   s   t j | ||¡ d | _d S )N)r   r-   r   r   )r   Ústreamr   r   r   r   r   i   s    zStreamWriter.__init__c             C   s   t j | ¡ d | _d S )N)r   r-   r   r   )r   r   r   r   r   m   s    zStreamWriter.resetc             C   sF   | j d kr6t ||¡}tjdkr*tj| _ ntj| _ |S |   ||¡S d S )Nr   )r   r   r   r   r   r   r   )r   r   r   r   r   r   r   r   q   s    


zStreamWriter.encodeN)r   )r   )r   r   r   r   r   r   r   r   r   r   r-   h   s   
r-   c               @   s   e Zd Zdd ZdddZdS )ÚStreamReaderc             C   s.   t j | ¡ y| `W n tk
r(   Y nX d S )N)r   r/   r   r	   ÚAttributeError)r   r   r   r   r   ~   s
    zStreamReader.resetr   c             C   sR   t  ||dd¡\}}}|dkr(t j| _n"|dkr:t j| _n|dkrJtd||fS )Nr   Fr"   r#   r   z%UTF-16 stream does not start with BOM)r   r$   r%   r	   r&   r'   )r   r   r   Úobjectr)   r   r   r   r   r	      s    

zStreamReader.decodeN)r   )r   r   r   r   r	   r   r   r   r   r/   |   s   r/   c            	   C   s   t jdttttttdS )Nzutf-16)Únamer   r	   ÚincrementalencoderÚincrementaldecoderÚstreamreaderÚstreamwriter)r   Ú	CodecInfor   r	   r
   r   r/   r-   r   r   r   r   Úgetregentry   s    r8   )r   )Ú__doc__r   r   r   r   r	   r
   r    r   r-   r/   r8   r   r   r   r   Ú<module>   s   
#3ã               @   sp   d Z ddlZejZdddZG dd dejZG dd	 d	ejZG d
d dejZG dd dej	Z	dd Z
dS )z Python 'utf-16-be' Codec


Written by Marc-Andre Lemburg (mal@lemburg.com).

(c) Copyright CNRI, All Rights Reserved. NO WARRANTY.

é    NÚstrictc             C   s   t  | |d¡S )NT)ÚcodecsÚutf_16_be_decode)ÚinputÚerrors© r   ú$D:\Python\lib\encodings\utf_16_be.pyÚdecode   s    r	   c               @   s   e Zd ZdddZdS )ÚIncrementalEncoderFc             C   s   t  || j¡d S )Nr   )r   Úutf_16_be_encoder   )Úselfr   Úfinalr   r   r   Úencode   s    zIncrementalEncoder.encodeN)F)Ú__name__Ú
__module__Ú__qualname__r   r   r   r   r   r
      s   r
   c               @   s   e Zd ZejZdS )ÚIncrementalDecoderN)r   r   r   r   r   Ú_buffer_decoder   r   r   r   r      s   r   c               @   s   e Zd ZejZdS )ÚStreamWriterN)r   r   r   r   r   r   r   r   r   r   r      s   r   c               @   s   e Zd ZejZdS )ÚStreamReaderN)r   r   r   r   r   r	   r   r   r   r   r      s   r   c            	   C   s   t jdttttttdS )Nz	utf-16-be)Únamer   r	   ÚincrementalencoderÚincrementaldecoderÚstreamreaderÚstreamwriter)r   Ú	CodecInfor   r	   r
   r   r   r   r   r   r   r   Úgetregentry!   s    r   )r   )Ú__doc__r   r   r   r	   r
   ÚBufferedIncrementalDecoderr   r   r   r   r   r   r   r   Ú<module>   s   
ã               @   sp   d Z ddlZejZdddZG dd dejZG dd	 d	ejZG d
d dejZG dd dej	Z	dd Z
dS )z Python 'utf-16-le' Codec


Written by Marc-Andre Lemburg (mal@lemburg.com).

(c) Copyright CNRI, All Rights Reserved. NO WARRANTY.

é    NÚstrictc             C   s   t  | |d¡S )NT)ÚcodecsÚutf_16_le_decode)ÚinputÚerrors© r   ú$D:\Python\lib\encodings\utf_16_le.pyÚdecode   s    r	   c               @   s   e Zd ZdddZdS )ÚIncrementalEncoderFc             C   s   t  || j¡d S )Nr   )r   Úutf_16_le_encoder   )Úselfr   Úfinalr   r   r   Úencode   s    zIncrementalEncoder.encodeN)F)Ú__name__Ú
__module__Ú__qualname__r   r   r   r   r   r
      s   r
   c               @   s   e Zd ZejZdS )ÚIncrementalDecoderN)r   r   r   r   r   Ú_buffer_decoder   r   r   r   r      s   r   c               @   s   e Zd ZejZdS )ÚStreamWriterN)r   r   r   r   r   r   r   r   r   r   r      s   r   c               @   s   e Zd ZejZdS )ÚStreamReaderN)r   r   r   r   r   r	   r   r   r   r   r      s   r   c            	   C   s   t jdttttttdS )Nz	utf-16-le)Únamer   r	   ÚincrementalencoderÚincrementaldecoderÚstreamreaderÚstreamwriter)r   Ú	CodecInfor   r	   r
   r   r   r   r   r   r   r   Úgetregentry!   s    r   )r   )Ú__doc__r   r   r   r	   r
   ÚBufferedIncrementalDecoderr   r   r   r   r   r   r   r   Ú<module>   s   
ã               @   sx   d Z ddlZddlZejZdddZG dd dejZG dd	 d	ejZG d
d dej	Z	G dd dej
Z
dd ZdS )z
Python 'utf-32' Codec
é    NÚstrictc             C   s   t  | |d¡S )NT)ÚcodecsÚutf_32_decode)ÚinputÚerrors© r   ú!D:\Python\lib\encodings\utf_32.pyÚdecode
   s    r	   c               @   s8   e Zd ZdddZdddZdd Zd	d
 Zdd ZdS )ÚIncrementalEncoderr   c             C   s   t j | |¡ d | _d S )N)r   r
   Ú__init__Úencoder)Úselfr   r   r   r   r      s    zIncrementalEncoder.__init__Fc             C   sN   | j d kr<t || j¡d }tjdkr0tj| _ ntj| _ |S |   || j¡d S )Nr   Úlittle)r   r   Úutf_32_encoder   ÚsysÚ	byteorderÚutf_32_le_encodeÚutf_32_be_encode)r   r   ÚfinalÚresultr   r   r   Úencode   s    


zIncrementalEncoder.encodec             C   s   t j | ¡ d | _d S )N)r   r
   Úresetr   )r   r   r   r   r      s    zIncrementalEncoder.resetc             C   s   | j d krdS dS )Né   r   )r   )r   r   r   r   Úgetstate    s    zIncrementalEncoder.getstatec             C   s,   |rd | _ ntjdkr tj| _ ntj| _ d S )Nr   )r   r   r   r   r   r   )r   Ústater   r   r   Úsetstate'   s
    

zIncrementalEncoder.setstateN)r   )F)Ú__name__Ú
__module__Ú__qualname__r   r   r   r   r   r   r   r   r   r
      s
   


r
   c               @   s6   e Zd ZdddZdd Zdd Zdd	 Zd
d ZdS )ÚIncrementalDecoderr   c             C   s   t j | |¡ d | _d S )N)r   ÚBufferedIncrementalDecoderr   Údecoder)r   r   r   r   r   r   1   s    zIncrementalDecoder.__init__c             C   sl   | j d kr\t ||d|¡\}}}|dkr2tj| _ n"|dkrDtj| _ n|dkrTtd||fS |   || j|¡S )Nr   éÿÿÿÿé   é   z%UTF-32 stream does not start with BOM)r!   r   Úutf_32_ex_decodeÚutf_32_le_decodeÚutf_32_be_decodeÚUnicodeErrorr   )r   r   r   r   ÚoutputÚconsumedr   r   r   r   Ú_buffer_decode5   s    


z!IncrementalDecoder._buffer_decodec             C   s   t j | ¡ d | _d S )N)r   r    r   r!   )r   r   r   r   r   B   s    zIncrementalDecoder.resetc             C   sD   t j | ¡d }| jd kr"|dfS ttjdk| jt jkk}||fS )Nr   r   Úbig)r   r    r   r!   Úintr   r   r'   )r   r   Zaddstater   r   r   r   F   s    

zIncrementalDecoder.getstatec             C   sd   t j | |¡ |d }|dkr8tjdkr.t jnt j| _n(|dkrZtjdkrPt jnt j| _nd | _d S )Nr#   r   r,   )r   r    r   r   r   r'   r&   r!   )r   r   r   r   r   r   T   s    

zIncrementalDecoder.setstateN)r   )r   r   r   r   r+   r   r   r   r   r   r   r   r   0   s
   
r   c               @   s(   e Zd Zd	ddZdd Zd
ddZdS )ÚStreamWriterr   c             C   s   d | _ tj | ||¡ d S )N)r   r   r.   r   )r   Ústreamr   r   r   r   r   d   s    zStreamWriter.__init__c             C   s   t j | ¡ d | _d S )N)r   r.   r   r   )r   r   r   r   r   h   s    zStreamWriter.resetc             C   sF   | j d kr6t ||¡}tjdkr*tj| _ ntj| _ |S |   ||¡S d S )Nr   )r   r   r   r   r   r   r   )r   r   r   r   r   r   r   r   l   s    


zStreamWriter.encodeN)r   )r   )r   r   r   r   r   r   r   r   r   r   r.   c   s   
r.   c               @   s   e Zd Zdd ZdddZdS )ÚStreamReaderc             C   s.   t j | ¡ y| `W n tk
r(   Y nX d S )N)r   r0   r   r	   ÚAttributeError)r   r   r   r   r   y   s
    zStreamReader.resetr   c             C   sR   t  ||dd¡\}}}|dkr(t j| _n"|dkr:t j| _n|dkrJtd||fS )Nr   Fr"   r#   r$   z%UTF-32 stream does not start with BOM)r   r%   r&   r	   r'   r(   )r   r   r   Úobjectr*   r   r   r   r   r	      s    

zStreamReader.decodeN)r   )r   r   r   r   r	   r   r   r   r   r0   w   s   r0   c            	   C   s   t jdttttttdS )Nzutf-32)Únamer   r	   ÚincrementalencoderÚincrementaldecoderÚstreamreaderÚstreamwriter)r   Ú	CodecInfor   r	   r
   r   r0   r.   r   r   r   r   Úgetregentry   s    r9   )r   )Ú__doc__r   r   r   r   r	   r
   r    r   r.   r0   r9   r   r   r   r   Ú<module>   s   
#3ã               @   sp   d Z ddlZejZdddZG dd dejZG dd	 d	ejZG d
d dejZG dd dej	Z	dd Z
dS )z
Python 'utf-32-be' Codec
é    NÚstrictc             C   s   t  | |d¡S )NT)ÚcodecsÚutf_32_be_decode)ÚinputÚerrors© r   ú$D:\Python\lib\encodings\utf_32_be.pyÚdecode
   s    r	   c               @   s   e Zd ZdddZdS )ÚIncrementalEncoderFc             C   s   t  || j¡d S )Nr   )r   Úutf_32_be_encoder   )Úselfr   Úfinalr   r   r   Úencode   s    zIncrementalEncoder.encodeN)F)Ú__name__Ú
__module__Ú__qualname__r   r   r   r   r   r
      s   r
   c               @   s   e Zd ZejZdS )ÚIncrementalDecoderN)r   r   r   r   r   Ú_buffer_decoder   r   r   r   r      s   r   c               @   s   e Zd ZejZdS )ÚStreamWriterN)r   r   r   r   r   r   r   r   r   r   r      s   r   c               @   s   e Zd ZejZdS )ÚStreamReaderN)r   r   r   r   r   r	   r   r   r   r   r      s   r   c            	   C   s   t jdttttttdS )Nz	utf-32-be)Únamer   r	   ÚincrementalencoderÚincrementaldecoderÚstreamreaderÚstreamwriter)r   Ú	CodecInfor   r	   r
   r   r   r   r   r   r   r   Úgetregentry   s    r   )r   )Ú__doc__r   r   r   r	   r
   ÚBufferedIncrementalDecoderr   r   r   r   r   r   r   r   Ú<module>   s   
ã               @   sp   d Z ddlZejZdddZG dd dejZG dd	 d	ejZG d
d dejZG dd dej	Z	dd Z
dS )z
Python 'utf-32-le' Codec
é    NÚstrictc             C   s   t  | |d¡S )NT)ÚcodecsÚutf_32_le_decode)ÚinputÚerrors© r   ú$D:\Python\lib\encodings\utf_32_le.pyÚdecode
   s    r	   c               @   s   e Zd ZdddZdS )ÚIncrementalEncoderFc             C   s   t  || j¡d S )Nr   )r   Úutf_32_le_encoder   )Úselfr   Úfinalr   r   r   Úencode   s    zIncrementalEncoder.encodeN)F)Ú__name__Ú
__module__Ú__qualname__r   r   r   r   r   r
      s   r
   c               @   s   e Zd ZejZdS )ÚIncrementalDecoderN)r   r   r   r   r   Ú_buffer_decoder   r   r   r   r      s   r   c               @   s   e Zd ZejZdS )ÚStreamWriterN)r   r   r   r   r   r   r   r   r   r   r      s   r   c               @   s   e Zd ZejZdS )ÚStreamReaderN)r   r   r   r   r   r	   r   r   r   r   r      s   r   c            	   C   s   t jdttttttdS )Nz	utf-32-le)Únamer   r	   ÚincrementalencoderÚincrementaldecoderÚstreamreaderÚstreamwriter)r   Ú	CodecInfor   r	   r
   r   r   r   r   r   r   r   Úgetregentry   s    r   )r   )Ú__doc__r   r   r   r	   r
   ÚBufferedIncrementalDecoderr   r   r   r   r   r   r   r   Ú<module>   s   
ã               @   sp   d Z ddlZejZdddZG dd dejZG dd	 d	ejZG d
d dejZG dd dej	Z	dd Z
dS )zF Python 'utf-7' Codec

Written by Brian Quinlan (brian@sweetapp.com).
é    NÚstrictc             C   s   t  | |d¡S )NT)ÚcodecsÚutf_7_decode)ÚinputÚerrors© r   ú D:\Python\lib\encodings\utf_7.pyÚdecode   s    r	   c               @   s   e Zd ZdddZdS )ÚIncrementalEncoderFc             C   s   t  || j¡d S )Nr   )r   Úutf_7_encoder   )Úselfr   Úfinalr   r   r   Úencode   s    zIncrementalEncoder.encodeN)F)Ú__name__Ú
__module__Ú__qualname__r   r   r   r   r   r
      s   r
   c               @   s   e Zd ZejZdS )ÚIncrementalDecoderN)r   r   r   r   r   Ú_buffer_decoder   r   r   r   r      s   r   c               @   s   e Zd ZejZdS )ÚStreamWriterN)r   r   r   r   r   r   r   r   r   r   r      s   r   c               @   s   e Zd ZejZdS )ÚStreamReaderN)r   r   r   r   r   r	   r   r   r   r   r      s   r   c            	   C   s   t jdttttttdS )Nzutf-7)Únamer   r	   ÚincrementalencoderÚincrementaldecoderÚstreamreaderÚstreamwriter)r   Ú	CodecInfor   r	   r
   r   r   r   r   r   r   r   Úgetregentry   s    r   )r   )Ú__doc__r   r   r   r	   r
   ÚBufferedIncrementalDecoderr   r   r   r   r   r   r   r   Ú<module>   s   
ã               @   sp   d Z ddlZejZdddZG dd dejZG dd	 d	ejZG d
d dejZG dd dej	Z	dd Z
dS )z Python 'utf-8' Codec


Written by Marc-Andre Lemburg (mal@lemburg.com).

(c) Copyright CNRI, All Rights Reserved. NO WARRANTY.

é    NÚstrictc             C   s   t  | |d¡S )NT)ÚcodecsÚutf_8_decode)ÚinputÚerrors© r   ú D:\Python\lib\encodings\utf_8.pyÚdecode   s    r	   c               @   s   e Zd ZdddZdS )ÚIncrementalEncoderFc             C   s   t  || j¡d S )Nr   )r   Úutf_8_encoder   )Úselfr   Úfinalr   r   r   Úencode   s    zIncrementalEncoder.encodeN)F)Ú__name__Ú
__module__Ú__qualname__r   r   r   r   r   r
      s   r
   c               @   s   e Zd ZejZdS )ÚIncrementalDecoderN)r   r   r   r   r   Ú_buffer_decoder   r   r   r   r      s   r   c               @   s   e Zd ZejZdS )ÚStreamWriterN)r   r   r   r   r   r   r   r   r   r   r      s   r   c               @   s   e Zd ZejZdS )ÚStreamReaderN)r   r   r   r   r   r	   r   r   r   r   r      s   r   c            	   C   s   t jdttttttdS )Nzutf-8)Únamer   r	   ÚincrementalencoderÚincrementaldecoderÚstreamreaderÚstreamwriter)r   Ú	CodecInfor   r	   r
   r   r   r   r   r   r   r   Úgetregentry!   s    r   )r   )Ú__doc__r   r   r   r	   r
   ÚBufferedIncrementalDecoderr   r   r   r   r   r   r   r   Ú<module>   s   
ã               @   st   d Z ddlZdddZdddZG dd	 d	ejZG d
d dejZG dd dejZG dd dejZdd Z	dS )a   Python 'utf-8-sig' Codec
This work similar to UTF-8 with the following changes:

* On encoding/writing a UTF-8 encoded BOM will be prepended/written as the
  first three bytes.

* On decoding/reading if the first three bytes are a UTF-8 encoded BOM, these
  bytes will be skipped.
é    NÚstrictc             C   s   t jt  | |¡d  t| fS )Nr   )ÚcodecsÚBOM_UTF8Úutf_8_encodeÚlen)ÚinputÚerrors© r	   ú$D:\Python\lib\encodings\utf_8_sig.pyÚencode   s    r   c             C   sD   d}| d d t jkr&| dd  } d}t  | |d¡\}}||| fS )Nr   é   T)r   r   Úutf_8_decode)r   r   ÚprefixÚoutputÚconsumedr	   r	   r
   Údecode   s    r   c               @   s8   e Zd ZdddZdddZdd Zd	d
 Zdd ZdS )ÚIncrementalEncoderr   c             C   s   t j | |¡ d| _d S )Né   )r   r   Ú__init__Úfirst)Úselfr   r	   r	   r
   r      s    zIncrementalEncoder.__init__Fc             C   s:   | j r$d| _ tjt || j¡d  S t || j¡d S d S )Nr   )r   r   r   r   r   )r   r   Úfinalr	   r	   r
   r      s
    zIncrementalEncoder.encodec             C   s   t j | ¡ d| _d S )Nr   )r   r   Úresetr   )r   r	   r	   r
   r   '   s    zIncrementalEncoder.resetc             C   s   | j S )N)r   )r   r	   r	   r
   Úgetstate+   s    zIncrementalEncoder.getstatec             C   s
   || _ d S )N)r   )r   Ústater	   r	   r
   Úsetstate.   s    zIncrementalEncoder.setstateN)r   )F)Ú__name__Ú
__module__Ú__qualname__r   r   r   r   r   r	   r	   r	   r
   r      s
   

r   c               @   s6   e Zd ZdddZdd Zdd Zdd	 Zd
d ZdS )ÚIncrementalDecoderr   c             C   s   t j | |¡ d| _d S )Nr   )r   ÚBufferedIncrementalDecoderr   r   )r   r   r	   r	   r
   r   2   s    zIncrementalDecoder.__init__c             C   sv   | j rht|dk r*tj |¡r"dS d| _ n>d| _ |d d tjkrht |dd  ||¡\}}||d fS t |||¡S )Nr   )Ú r   r   )r   r   r   r   Ú
startswithr   )r   r   r   r   r   r   r	   r	   r
   Ú_buffer_decode6   s    z!IncrementalDecoder._buffer_decodec             C   s   t j | ¡ d| _d S )Nr   )r   r    r   r   )r   r	   r	   r
   r   G   s    zIncrementalDecoder.resetc             C   s   t j | ¡}|d | jfS )Nr   )r   r    r   r   )r   r   r	   r	   r
   r   K   s    zIncrementalDecoder.getstatec             C   s   t j | |¡ |d | _d S )Nr   )r   r    r   r   )r   r   r	   r	   r
   r   P   s    zIncrementalDecoder.setstateN)r   )r   r   r   r   r#   r   r   r   r	   r	   r	   r
   r   1   s
   
r   c               @   s   e Zd Zdd ZdddZdS )ÚStreamWriterc             C   s.   t j | ¡ y| `W n tk
r(   Y nX d S )N)r   r$   r   r   ÚAttributeError)r   r	   r	   r
   r   V   s
    zStreamWriter.resetr   c             C   s   t j| _t||S )N)r   r   r   )r   r   r   r	   r	   r
   r   ]   s    zStreamWriter.encodeN)r   )r   r   r   r   r   r	   r	   r	   r
   r$   U   s   r$   c               @   s   e Zd Zdd ZdddZdS )ÚStreamReaderc             C   s.   t j | ¡ y| `W n tk
r(   Y nX d S )N)r   r&   r   r   r%   )r   r	   r	   r
   r   b   s
    zStreamReader.resetr   c             C   sp   t |dk rtj |¡r\dS n>|d d tjkr\tj| _t |dd  |¡\}}||d fS tj| _t ||¡S )Nr   )r!   r   )r   r   r   r"   r   r   )r   r   r   r   r   r	   r	   r
   r   i   s    zStreamReader.decodeN)r   )r   r   r   r   r   r	   r	   r	   r
   r&   a   s   r&   c            	   C   s   t jdttttttdS )Nz	utf-8-sig)Únamer   r   ÚincrementalencoderÚincrementaldecoderÚstreamreaderÚstreamwriter)r   Ú	CodecInfor   r   r   r   r&   r$   r	   r	   r	   r
   Úgetregentryy   s    r-   )r   )r   )
Ú__doc__r   r   r   r   r    r   r$   r&   r-   r	   r	   r	   r
   Ú<module>	   s   

$ã               @   s   d Z ddlZddlZddlmZ dddZdd	d
ZG dd dejZG dd dejZG dd dej	Z	G dd deej
Z
G dd deejZdd ZdS )a  Python 'uu_codec' Codec - UU content transfer encoding.

This codec de/encodes from bytes to bytes.

Written by Marc-Andre Lemburg (mal@lemburg.com). Some details were
adapted from uu.py which was written by Lance Ellinghouse and
modified by Jack Jansen and Fredrik Lundh.
é    N)ÚBytesIOÚstrictú<data>é¶  c       	      C   s   |dkst t| }t }|j}|j}|d|d@ |f  d¡ |d}x|rf|t |¡ |d}qJW |d | ¡ t| fS )Nr   zbegin %o %s
iÿ  Úasciié-   s    
end
)	ÚAssertionErrorr   ÚreadÚwriteÚencodeÚbinasciiÚb2a_uuÚgetvalueÚlen)	ÚinputÚerrorsÚfilenameÚmodeÚinfileÚoutfiler	   r
   Úchunk© r   ú#D:\Python\lib\encodings\uu_codec.pyÚ	uu_encode   s    r   c       
   
   C   sð   |dkst t| }t }|j}|j}x(| }|s:td|d d dkr(P q(W x| }|rd|dkrfP yt |¡}W nR tjk
rÆ } z2|d d d@ d	 d d
 }	t |d |	 ¡}W d d }~X Y nX || qRW |sàtd| ¡ t	| fS )Nr   z"Missing "begin" line in input dataé   s   begins   end
r   é    é?   é   é   zTruncated input data)
r   r   Úreadliner
   Ú
ValueErrorr   Úa2b_uuÚErrorr   r   )
r   r   r   r   r   r
   ÚsÚdataÚvÚnbytesr   r   r   Ú	uu_decode!   s0    $r'   c               @   s    e Zd ZdddZdddZdS )	ÚCodecr   c             C   s
   t ||S )N)r   )Úselfr   r   r   r   r   r   C   s    zCodec.encodec             C   s
   t ||S )N)r'   )r)   r   r   r   r   r   ÚdecodeF   s    zCodec.decodeN)r   )r   )Ú__name__Ú
__module__Ú__qualname__r   r*   r   r   r   r   r(   B   s   
r(   c               @   s   e Zd ZdddZdS )ÚIncrementalEncoderFc             C   s   t || jd S )Nr   )r   r   )r)   r   Úfinalr   r   r   r   J   s    zIncrementalEncoder.encodeN)F)r+   r,   r-   r   r   r   r   r   r.   I   s   r.   c               @   s   e Zd ZdddZdS )ÚIncrementalDecoderFc             C   s   t || jd S )Nr   )r'   r   )r)   r   r/   r   r   r   r*   N   s    zIncrementalDecoder.decodeN)F)r+   r,   r-   r*   r   r   r   r   r0   M   s   r0   c               @   s   e Zd ZeZdS )ÚStreamWriterN)r+   r,   r-   ÚbytesÚcharbuffertyper   r   r   r   r1   Q   s   r1   c               @   s   e Zd ZeZdS )ÚStreamReaderN)r+   r,   r-   r2   r3   r   r   r   r   r4   T   s   r4   c            
   C   s   t jdttttttddS )NÚuuF)Únamer   r*   ÚincrementalencoderÚincrementaldecoderÚstreamreaderÚstreamwriterÚ_is_text_encoding)ÚcodecsÚ	CodecInfor   r'   r.   r0   r4   r1   r   r   r   r   ÚgetregentryY   s    r>   )r   r   r   )r   )Ú__doc__r<   r   Úior   r   r'   r(   r.   r0   r1   r4   r>   r   r   r   r   Ú<module>   s   

!ã               @   s   d Z ddlZddlZdddZdddZG dd	 d	ejZG d
d dejZG dd dejZG dd deejZG dd deej	Z	dd Z
dS )zPython 'zlib_codec' Codec - zlib compression encoding.

This codec de/encodes from bytes to bytes.

Written by Marc-Andre Lemburg (mal@lemburg.com).
é    NÚstrictc             C   s   |dkst t | ¡t| fS )Nr   )ÚAssertionErrorÚzlibÚcompressÚlen)ÚinputÚerrors© r	   ú%D:\Python\lib\encodings\zlib_codec.pyÚzlib_encode   s    r   c             C   s   |dkst t | ¡t| fS )Nr   )r   r   Ú
decompressr   )r   r   r	   r	   r
   Úzlib_decode   s    r   c               @   s    e Zd ZdddZdddZdS )	ÚCodecr   c             C   s
   t ||S )N)r   )Úselfr   r   r	   r	   r
   Úencode   s    zCodec.encodec             C   s
   t ||S )N)r   )r   r   r   r	   r	   r
   Údecode   s    zCodec.decodeN)r   )r   )Ú__name__Ú
__module__Ú__qualname__r   r   r	   r	   r	   r
   r      s   
r   c               @   s(   e Zd Zd
ddZdddZdd Zd	S )ÚIncrementalEncoderr   c             C   s    |dkst || _t ¡ | _d S )Nr   )r   r   r   Úcompressobj)r   r   r	   r	   r
   Ú__init__   s    zIncrementalEncoder.__init__Fc             C   s.   |r| j  |¡}|| j  ¡  S | j  |¡S d S )N)r   r   Úflush)r   r   ÚfinalÚcr	   r	   r
   r   !   s    zIncrementalEncoder.encodec             C   s   t  ¡ | _d S )N)r   r   )r   r	   r	   r
   Úreset(   s    zIncrementalEncoder.resetN)r   )F)r   r   r   r   r   r   r	   r	   r	   r
   r      s   

r   c               @   s(   e Zd Zd
ddZdddZdd Zd	S )ÚIncrementalDecoderr   c             C   s    |dkst || _t ¡ | _d S )Nr   )r   r   r   Údecompressobj)r   r   r	   r	   r
   r   ,   s    zIncrementalDecoder.__init__Fc             C   s.   |r| j  |¡}|| j  ¡  S | j  |¡S d S )N)r   r   r   )r   r   r   r   r	   r	   r
   r   1   s    zIncrementalDecoder.decodec             C   s   t  ¡ | _d S )N)r   r   )r   r	   r	   r
   r   8   s    zIncrementalDecoder.resetN)r   )F)r   r   r   r   r   r   r	   r	   r	   r
   r   +   s   

r   c               @   s   e Zd ZeZdS )ÚStreamWriterN)r   r   r   ÚbytesÚcharbuffertyper	   r	   r	   r
   r   ;   s   r   c               @   s   e Zd ZeZdS )ÚStreamReaderN)r   r   r   r   r    r	   r	   r	   r
   r!   >   s   r!   c            
   C   s   t jdttttttddS )Nr   F)Únamer   r   ÚincrementalencoderÚincrementaldecoderÚstreamreaderÚstreamwriterÚ_is_text_encoding)ÚcodecsÚ	CodecInfor   r   r   r   r!   r   r	   r	   r	   r
   ÚgetregentryC   s    r*   )r   )r   )Ú__doc__r(   r   r   r   r   r   r   r   r!   r*   r	   r	   r	   r
   Ú<module>   s   

ã               @   sà  d Z ddddddddd	d
dddgZyddlmZ e d¡ W n ek
rP   Y nX dZg Zg Zg Z	g Z
g Zg Zg Zg Zi Zdd edD Zdd Zdd Zdd Zdd Zedd edd  ed!d" ed#d$ ed%d& ed'd( ed)d* ed+d, ed-d. ed/d0 ed1d2 ed3d4 ed5d6 ed7d8 ed9d: ed;d< ed=d> ed?d@ edAdB edCdD edEdF edGdH edIdJ edKdL edMdN edOdP edQdR edSdT edUdV edWdX edYdZ ed[d\ ed]d^ ed_d` edadb edcdd ededf edgdh edidj edkdl edmdn edodp edqdr edsdt edudv edwdx edydz ed{d| ed}d~ edd edd edd edd edd edd edd edd edd dZedd edd edd edd edd edd edd edd  ed¡d¢ ed£d¤ e d¤¡ ed¥d¦ ed§d¨ ed©dª ed«d¬ ed­d® ed¯d° ed±d² e d²¡ ed³d´ edµd¶ ed·d¸ ed¹dº ed»d¼ ed½d¾ ed¿dÀ edÁdÂ edÃdÄ edÅdÆ edÇdÈ edÉdÊ edËdÌ edÍdÎ e dÎ¡ edÏdÐ e dÐ¡ edÑdÒ e dÒ¡ edÓdÔ edÕdÖ ed×dØ edÙdÚ edÛdÜ e dÜ¡ edÝdÞ e dÞ¡ edßdà e dà¡ edádâ e dâ¡ edãdä edådæ edçdè edédê edëdì edídî edïdð e dð¡ eddñ dñZedòdó edôdõ edöd÷ edødù edúdû edüdý edþdÿ ed d edd edd edd edd	 [[[[d
S (  zy
opcode module - potentially shared between dis and other modules which
operate on bytecodes (e.g. peephole optimizers).
Úcmp_opÚhasconstÚhasnameÚhasjrelÚhasjabsÚhaslocalÚ
hascompareÚhasfreeÚopnameÚopmapÚHAVE_ARGUMENTÚEXTENDED_ARGÚhasnargsé    )Ústack_effectr   )ú<z<=z==z!=ú>z>=Úinznot inÚiszis notzexception matchÚBADc             C   s   g | ]}d |f qS )z<%r>© )Ú.0Úopr   r   úD:\Python\lib\opcode.pyú
<listcomp>%   s    r   é   c             C   s   | t |< |t| < d S )N)r	   r
   )Únamer   r   r   r   Údef_op'   s    r   c             C   s   t | | t |¡ d S )N)r   r   Úappend)r   r   r   r   r   Úname_op+   s    
r   c             C   s   t | | t |¡ d S )N)r   r   r   )r   r   r   r   r   Újrel_op/   s    
r   c             C   s   t | | t |¡ d S )N)r   r   r   )r   r   r   r   r   Újabs_op3   s    
r    ÚPOP_TOPé   ÚROT_TWOé   Ú	ROT_THREEé   ÚDUP_TOPé   ÚDUP_TOP_TWOé   ÚNOPé	   ÚUNARY_POSITIVEé
   ÚUNARY_NEGATIVEé   Ú	UNARY_NOTé   ÚUNARY_INVERTé   ÚBINARY_MATRIX_MULTIPLYé   ÚINPLACE_MATRIX_MULTIPLYé   ÚBINARY_POWERé   ÚBINARY_MULTIPLYé   ÚBINARY_MODULOé   Ú
BINARY_ADDé   ÚBINARY_SUBTRACTé   ÚBINARY_SUBSCRé   ÚBINARY_FLOOR_DIVIDEé   ÚBINARY_TRUE_DIVIDEé   ÚINPLACE_FLOOR_DIVIDEé   ÚINPLACE_TRUE_DIVIDEé   Ú	GET_AITERé2   Ú	GET_ANEXTé3   ÚBEFORE_ASYNC_WITHé4   ÚINPLACE_ADDé7   ÚINPLACE_SUBTRACTé8   ÚINPLACE_MULTIPLYé9   ÚINPLACE_MODULOé;   ÚSTORE_SUBSCRé<   ÚDELETE_SUBSCRé=   ÚBINARY_LSHIFTé>   ÚBINARY_RSHIFTé?   Ú
BINARY_ANDé@   Ú
BINARY_XORéA   Ú	BINARY_ORéB   ÚINPLACE_POWERéC   ÚGET_ITERéD   ÚGET_YIELD_FROM_ITERéE   Ú
PRINT_EXPRéF   ÚLOAD_BUILD_CLASSéG   Ú
YIELD_FROMéH   ÚGET_AWAITABLEéI   ÚINPLACE_LSHIFTéK   ÚINPLACE_RSHIFTéL   ÚINPLACE_ANDéM   ÚINPLACE_XORéN   Ú
INPLACE_ORéO   Ú
BREAK_LOOPéP   ÚWITH_CLEANUP_STARTéQ   ÚWITH_CLEANUP_FINISHéR   ÚRETURN_VALUEéS   ÚIMPORT_STARéT   ÚSETUP_ANNOTATIONSéU   ÚYIELD_VALUEéV   Ú	POP_BLOCKéW   ÚEND_FINALLYéX   Ú
POP_EXCEPTéY   éZ   Ú
STORE_NAMEÚDELETE_NAMEé[   ÚUNPACK_SEQUENCEé\   ÚFOR_ITERé]   Ú	UNPACK_EXé^   Ú
STORE_ATTRé_   ÚDELETE_ATTRé`   ÚSTORE_GLOBALéa   ÚDELETE_GLOBALéb   Ú
LOAD_CONSTéd   Ú	LOAD_NAMEée   ÚBUILD_TUPLEéf   Ú
BUILD_LISTég   Ú	BUILD_SETéh   Ú	BUILD_MAPéi   Ú	LOAD_ATTRéj   Ú
COMPARE_OPék   ÚIMPORT_NAMEél   ÚIMPORT_FROMém   ÚJUMP_FORWARDén   ÚJUMP_IF_FALSE_OR_POPéo   ÚJUMP_IF_TRUE_OR_POPép   ÚJUMP_ABSOLUTEéq   ÚPOP_JUMP_IF_FALSEér   ÚPOP_JUMP_IF_TRUEés   ÚLOAD_GLOBALét   ÚCONTINUE_LOOPéw   Ú
SETUP_LOOPéx   ÚSETUP_EXCEPTéy   ÚSETUP_FINALLYéz   Ú	LOAD_FASTé|   Ú
STORE_FASTé}   ÚDELETE_FASTé~   ÚRAISE_VARARGSé   ÚCALL_FUNCTIONé   ÚMAKE_FUNCTIONé   ÚBUILD_SLICEé   ÚLOAD_CLOSUREé   Ú
LOAD_DEREFé   ÚSTORE_DEREFé   ÚDELETE_DEREFé   ÚCALL_FUNCTION_KWé   ÚCALL_FUNCTION_EXé   Ú
SETUP_WITHé   ÚLIST_APPENDé   ÚSET_ADDé   ÚMAP_ADDé   ÚLOAD_CLASSDEREFé   é   ÚBUILD_LIST_UNPACKé   ÚBUILD_MAP_UNPACKé   ÚBUILD_MAP_UNPACK_WITH_CALLé   ÚBUILD_TUPLE_UNPACKé   ÚBUILD_SET_UNPACKé   ÚSETUP_ASYNC_WITHé   ÚFORMAT_VALUEé   ÚBUILD_CONST_KEY_MAPé   ÚBUILD_STRINGé   ÚBUILD_TUPLE_UNPACK_WITH_CALLé   ÚLOAD_METHODé    ÚCALL_METHODé¡   N)Ú__doc__Ú__all__Ú_opcoder   r   ÚImportErrorr   r   r   r   r   r   r   r   r   r
   Úranger	   r   r   r   r    r   r   r   r   r   r   Ú<module>   s6  


	



























































































































ã               @   s$  d Z ddlZddlZddlT ejeks.tdeehZe	e
ehZeehZeehZeeehB ZdZdd eD Zejfdd	Zd
d Zdd Zd-ddZejd Zde> d ZdZ ee!fddZ"dd Z#dd Z$dd Z%dd Z&dd Z'dd  Z(d!d" Z)d#d$ Z*d%d& Z+d'd( Z,d)d* Z-d.d+d,Z.dS )/zInternal support module for sreé    N)Ú*zSRE module mismatch))éi   i1  )és   i  )éµ   i¼  )iE  i¹  i¾  )i  iÓ  )i°  iã  )i²  iÐ  )iµ  iõ  )i¸  iÑ  )iº  ið  )iÀ  iÖ  )iÁ  iñ  )iÂ  iÃ  )iÆ  iÕ  )ia  i  )iû  iû  c                s.   i | ]&}|D ] t  fd d|D  qqS )c             3   s   | ]} |kr|V  qd S )N© )Ú.0Új)Úir   úD:\Python\lib\sre_compile.pyú	<genexpr>>   s    z<dictcomp>.<genexpr>)Útuple)r   Útr   )r	   r
   ú
<dictcomp>>   s   r   c             C   s    ||@ r| | M } | |B | @ S )Nr   )ÚflagsÚ	add_flagsÚ	del_flagsÚ
TYPE_FLAGSr   r   r
   Ú_combine_flagsA   s    
r   c             C   s  | j }t}t}t}t}t}d }	d }
d }|t@ rd|t@ sd|t@ rX|t	@ sXt
j}	t
j}
t}nt
j}	t
j}
x¦|D ]\}}||kr|t@ s|| || næ|t@ r¸|t|  || nÈ|	|sÒ|| || n®|
|}|sô|t|  || n||kr|t|  || nl|t || }|d |tkr>|t x(|f||  D ]}|t || qNW |t || | | |< ql|tkrt||	|
|\}}|t@ r¼|t@ r¼|t n(|sÌ|t n|sÜ|t n|t || }|d t|||  || | | |< ql|tkr:|t@ r0|t n|t ql||krF|t @ r\t!d|f t"|d rØ|t#kr~|t$ n|t% || }|d ||d  ||d  t&| |d | |t' || | | |< nl|t( || }|d ||d  ||d  t&| |d | || | | |< |t#kr<|t) n|t* ql|t+kr²|\}}}}|rz|t, ||d d  t&| |t-||| |r
|t, ||d d d  ql||krÆ|| ql||krT|| || }|d |d dkr |d n*|d  .¡ \}}||kr"t!d|| t&| |d | |t' || | | |< ql|t/kr|| || }|d t&| || |t' || | | |< ql|t0kr|| |t1@ rÄt2 3||¡}|t@ rÜt4 3||¡}n |t@ rü|t	@ süt5 3||¡}|| ql|t6kr¨|| g }|j }xZ|d D ]N}|| }|d t&| || |t7 |||  |d || | | |< q,W |t x|D ]}|| | | |< qW ql|t8krô|| |t@ rÎt9| }n|t@ rê|t	@ sêt:| }|| ql|t;krL|t@ s|| n,|t@ r&|t< n|s6|t= n|t> ||d  ql|t?krü|| ||d d  || }|d t&| |d | |d ræ|t7 || }|d || | d | |< t&| |d | || | | |< n|| | d | |< qlt!d|f qlW d S )Nr   z*internal: unsupported template operator %ré   é   z(look-behind requires fixed-width patternz%internal: unsupported operand type %r)@ÚappendÚlenÚ_LITERAL_CODESÚ_REPEATING_CODESÚ_SUCCESS_CODESÚ_ASSERT_CODESÚSRE_FLAG_IGNORECASEÚSRE_FLAG_LOCALEÚSRE_FLAG_UNICODEÚSRE_FLAG_ASCIIÚ_sreÚunicode_iscasedÚunicode_tolowerÚ_ignorecase_fixesÚascii_iscasedÚascii_tolowerÚOP_LOCALE_IGNOREÚ	OP_IGNOREÚOP_UNICODE_IGNOREÚIN_UNI_IGNOREÚNOT_LITERALÚNEGATEÚLITERALÚFAILUREÚINÚ_optimize_charsetÚIN_LOC_IGNOREÚ	IN_IGNOREÚ_compile_charsetÚANYÚSRE_FLAG_DOTALLÚANY_ALLÚSRE_FLAG_TEMPLATEÚerrorÚ_simpleÚ
MAX_REPEATÚ
REPEAT_ONEÚMIN_REPEAT_ONEÚ_compileÚSUCCESSÚREPEATÚ	MAX_UNTILÚ	MIN_UNTILÚ
SUBPATTERNÚMARKr   ÚgetwidthÚCALLÚATÚSRE_FLAG_MULTILINEÚAT_MULTILINEÚgetÚ	AT_LOCALEÚ
AT_UNICODEÚBRANCHÚJUMPÚCATEGORYÚ	CH_LOCALEÚ
CH_UNICODEÚGROUPREFÚGROUPREF_LOC_IGNOREÚGROUPREF_IGNOREÚGROUPREF_UNI_IGNOREÚGROUPREF_EXISTS)ÚcodeÚpatternr   ÚemitÚ_lenÚLITERAL_CODESÚREPEATING_CODESÚSUCCESS_CODESÚASSERT_CODESÚiscasedÚtolowerÚfixesÚopÚavÚloÚskipÚkÚcharsetÚhascasedÚgroupr   r   ÚpÚhiÚtailÚ
tailappendÚskipyesÚskipnor   r   r
   r<   G   sV   






 




 







  






 


 




  











 
 r<   c             C   sî   |j }xÚ| D ]Ò\}}|| |tkr&q|tkr8|| q|tksH|tkrb||d  ||d  q|tkrv| |¡ q|tkr| |¡ q|tkrÐ|t	@ r¨|t
|  qÞ|t@ rÆ|t@ sÆ|t|  qÞ|| qtd|f qW |t d S )Nr   r   z%internal: unsupported set operator %r)r   r+   r,   ÚRANGEÚRANGE_UNI_IGNOREÚCHARSETÚextendÚ
BIGCHARSETrM   r   rN   r   r   rO   r7   r-   )re   r   rU   rW   r`   ra   r   r   r
   r2   ù   s,    

r2   c          	   C   s¾  g }g }t d}d}xº| D ]°\}}	x¤yB|tkr|r||	}
d||
< |rp|
|krpx||
 D ]}d||< q`W |s||	rd}nd||	< nà|tkrDt|	d |	d d }|r*|röx\t||D ].}d||< ||krÂx|| D ]}d||< qàW qÂW nxt||D ]}d||< qW |sBtt||}nx@|D ]}d||< q0W n(|tkr^| ||	f¡ n| ||	f¡ W nX tk
rÆ   t	|dkr|dd 7 }w*|r´d}|tkr´t
}| ||	f¡ Y nX P q*W qW g }d}xj| d|¡}|dk rôP t	|dkrd }P | d|¡}|dk r2| |t	|f¡ P | ||f¡ qÜW |d k	rÈxF|D ]>\}}|| dkr|| t|f¡ n| t||d ff¡ qVW ||7 }|s¸t	|t	| k rÀ||fS | |fS t	|dkrüt|}| t|f¡ ||7 }||fS t|}i }t d}d}t  }xftdd	dD ]V}|||d  }||krX|| ||d < n$| ||d < ||< |d7 }||7 }q(W t|}|gt| |dd< | t|f¡ ||7 }||fS )
Né   Fr   Tr   ó    i ÿ  r   i   )Ú	bytearrayr,   rn   ÚrangeÚmapÚanyr+   r   Ú
IndexErrorr   ro   ÚfindÚ
_mk_bitmaprp   ÚbytesÚ_bytes_to_codesrr   )re   r]   Úfixupr_   Úoutrj   Úcharmaprf   r`   ra   rb   rd   Úrr	   ÚrunsÚqrh   ÚdataÚcompsÚmappingÚblockÚchunkr   r   r
   r/     s´    









r/   é   r   s   0111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111c                s8   |   t¡d d d  fddttd  D S )Néÿÿÿÿc                s"   g | ]}|  | d qS )r   r   )r   r	   )Ú	_CODEBITSÚ_intÚsr   r
   ú
<listcomp>  s   z_mk_bitmap.<locals>.<listcomp>r   )Ú	translateÚ_BITS_TRANSrv   r   )Úbitsr   r   r   )r   r   r   r
   r{     s    r{   c             C   s@   t |  d¡}|jtjkstt||j t| ks8t| ¡ S )NÚI)Ú
memoryviewÚcastÚitemsizer    ÚCODESIZEÚAssertionErrorr   Útolist)ÚbÚar   r   r
   r}      s    r}   c             C   sD   t | dkrdS | d \}}|tkr<|d d ko:t|d S |tkS )Nr   Fr   r   )r   rA   r8   Ú_UNIT_CODES)rh   r`   ra   r   r   r
   r8   §  s    r8   c             C   sv   dgt |  }xbtdt | D ]P}||d  }x>| | | | kr`|dkrRd||< P ||d  }q0W |d ||< qW |S )aj  
    Generate an overlap table for the following prefix.
    An overlap table is a table of the same size as the prefix which
    informs about the potential self-overlap for each index in the prefix:
    - if overlap[i] == 0, prefix[i:] can't overlap prefix[0:...]
    - if overlap[i] == k with 0 < k <= i, prefix[i-k+1:i+1] overlaps with
      prefix[0:k]
    r   r   )r   rv   )ÚprefixÚtabler	   Úidxr   r   r
   Ú_generate_overlap_table°  s    	r   c             C   s,   | t @ sd S | t@ r"| t@ s"tjS tjS d S )N)r   r   r   r    r!   r$   )r   r   r   r
   Ú_get_iscasedÅ  s
    r    c             C   sâ   g }|j }d }t|}xÀ| jD ]¬\}}|tkrF|r<||r<P || q|tkrÈ|\}}	}
}t||	|
}|t@ rx|t@ rxP t||\}}}|d kr¶|d k	r¢t	|}n|d k	r¶t	|| }| 
|¡ |sÊP qP qW ||dfS ||dfS )NTF)r   r    r   r,   rA   r   r   r   Ú_get_literal_prefixr   rq   )rV   r   r   ÚprefixappendÚprefix_skipr]   r`   ra   rg   r   r   rh   Úflags1Úprefix1Úprefix_skip1Úgot_allr   r   r
   r¡   Í  s4    



r¡   c             C   sf  xR| j sd S | j d \}}|tk	r$P |\}}}} t|||}|t@ r|t@ rd S qW t|}|tkr~|rt||rtd S ||fgS |tkràg }|j}	xJ|d D ]>}
|
s¦d S |
d \}}|tkrÔ|rÆ||sÔ|	||f qd S qW |S |t	krb|}|r^xh|D ]`\}}|tkr||rZd S qú|t
krú|d dkr6d S tt|t|d |d d rúd S qúW |S d S )Nr   r   iÿÿ  )r   rA   r   r   r   r    r,   rK   r   r.   rn   rx   rw   rv   )rV   r   r`   ra   rg   r   r   r]   re   Úcharsetappendrh   r   r   r
   Ú_get_charset_prefixì  sP    



 r©   c             C   s|  |  ¡ \}}|tkrt}|dkr8|  tdd||g¡ d S g }d}g }|t@ rT|t@ srt||\}}}|srt||}| j}	|	t t	| }
|	d d}|r²t
}|d kr¾|r¾|tB }n|r¾|tB }|	| |tk rØ|	| n|	t |d t }|	t|t |r@|	t	| |d krt	|}|	| |  |¡ |  t|¡ n(|rht|\}}|r\tt|||  t	| |
 | |
< d S )Nr   é   )rC   ÚMAXCODErq   ÚINFOr   r   r¡   r©   r   r   ÚSRE_INFO_PREFIXÚSRE_INFO_LITERALÚSRE_INFO_CHARSETÚminr   r/   r   r2   )rU   rV   r   rb   ri   r   r£   re   r§   rW   rc   Úmaskrf   r   r   r
   Ú_compile_info  sT    
 




r²   c             C   s   t | ttfS )N)Ú
isinstanceÚstrr|   )Úobjr   r   r
   ÚisstringS  s    r¶   c             C   s8   | j j|B }g }t|| | t|| j| | t¡ |S )N)rV   r   r²   r<   r   r   r=   )rh   r   rU   r   r   r
   Ú_codeV  s    
r·   c             C   s   dd  dd | D ¡ S )Nz[%s]z, c             s   s$   | ]}d t jd d |f V  qdS )z%#0*xr   N)r    r   )r   Úxr   r   r
   r   f  s    z_hex_code.<locals>.<genexpr>)Újoin)rU   r   r   r
   Ú	_hex_codee  s    rº   c                sN   dd l t dttt d  fdddt  d S )Nr   r   c          	      sè  d d fdd
}fdd}d7  }x¦||k rÚ| | }|d7 }t | }|tttttttfkr||| q6|tt	t
tttttfkr¼| }|d7 }||d|t|f  q6|tkr
| }|d7 }tt| }|d d d	ksöt|||dd   q6|tkrZ| }|d7 }tt| }|d d
 dksFt|||d
d   q6|ttttfkr¢| }||||| d |d ||  ||7 }q6|ttfkrì||d  \}}	|d7 }||d||	t|t|	f  q6|tkr"||t||dt    |dt 7 }q6|t krÒ| }|d7 }t!d "fdd||dt#j$   D ¡}
||||
 |dt#j$ 7 }d7 x:t%|D ].}|t||dt    |dt 7 }qW d8 q6|t&t't(t)t*fkr| }|d7 }||| q6|t+kr0| }||||| d |d7 }q6|t,kr´| }||||| d xT|r¨|d ||  ||7 }| | }|r|d||| d n|t qVW |d7 }q6|t-t.t/fkr||d  \}}}|t0krèd}||||||| d |d ||  ||7 }q6|t1krV||d  \}}|||||| d |d7 }q6|t2t3fkr¨||d  \}}|||||| d |d ||  ||7 }q6|t4krÐ||d  \}}}}|t0krØd}|||t5||||| d |d  |t6@ r|d |d  \}}|d| |d    |  }|ddd "dd |D ¡ dd "t7t|¡   |7  |d  |    |7  |t8@ rÆd7 |d  ||  d8 ||7 }q6t9|q6W d8 d S )N)Útoc                sX   | d k	r"   | ¡ |d| f f7 }td kr6dndf dd  d t|  d S )Nz(to %d)z%*d%s ú:Ú.z  r   )Úend)ÚaddÚprint)r»   Úargs)ÚlabelsÚlevelÚoffset_widthÚstartr   r
   Úprint_p  s    
z!dis.<locals>.dis_.<locals>.print_c                 s"   t dd    d t |   d S )Nú r   )r¾   )rÀ   )rÁ   )rÃ   rÄ   r   r
   Úprint_2x  s    z"dis.<locals>.dis_.<locals>.print_2r   z
%#02x (%r)é   ÚAT_é	   Ú	CATEGORY_r   z%#02x %#02x (%r-%r)rs   ó    c             3   s   | ]}|  tj j¡V  qd S )N)Úto_bytesr    r   Ú	byteorder)r   r¸   )Úsysr   r
   r   ©  s   z$dis.<locals>.dis_.<locals>.<genexpr>ÚbranchÚ	MAXREPEATrª   é   z  prefix_skipz  prefixz[%s]z, c             s   s   | ]}d | V  qdS )z%#02xNr   )r   r¸   r   r   r
   r   ä  s    z(%r)Ú z	  overlapÚin):ÚOPCODESr=   r-   r3   r5   r?   r@   r+   r,   r*   ÚLITERAL_IGNOREÚNOT_LITERAL_IGNOREÚLITERAL_UNI_IGNOREÚNOT_LITERAL_UNI_IGNOREÚLITERAL_LOC_IGNOREÚNOT_LITERAL_LOC_IGNOREÚchrrE   r´   ÚATCODESr   rM   ÚCHCODESr.   r1   r)   r0   rn   ro   rp   rº   r   rr   Úlistr¹   r    r   rv   rB   rP   rR   rS   rQ   rL   rK   r>   r:   r;   rÒ   rT   ÚASSERTÚ
ASSERT_NOTr¬   Úbinr­   rw   r¯   Ú
ValueError)rÅ   r¾   rÆ   rÈ   r	   r`   Úargrc   rb   ri   r   r   r°   Úmaxr   Ú
prefix_lenr£   r   )rU   Údis_rÂ   rÃ   rÄ   rÐ   )rÅ   r
   rè   o  sê    





 



















zdis.<locals>.dis_)rÐ   Úsetr   r´   )rU   r   )rU   rè   rÂ   rÃ   rÄ   rÐ   r
   Údish  s     rê   c          	   C   s   t | r| }t | |¡} nd }t| |}|t@ r>t  t| | jj}d g| jj	 }x| 
¡ D ]\}}|||< q^W t ||| jjB || jj	d |t|¡S )Nr   )r¶   Ú	sre_parseÚparser·   ÚSRE_FLAG_DEBUGrÀ   rê   rV   Ú	groupdictÚgroupsÚitemsr    Úcompiler   r   )rh   r   rV   rU   Ú
groupindexÚ
indexgrouprd   r	   r   r   r
   rñ   ÷  s     

rñ   )NNN)r   )/Ú__doc__r    rë   Úsre_constantsÚMAGICr   r,   r*   r   r>   Ú
MIN_REPEATr9   r   r=   r-   r   rá   râ   r   r3   r.   r   Ú_equivalencesr#   r   r   r<   r2   r/   r   r   r«   r   Úintr{   r}   r8   r   r    r¡   r©   r²   r¶   r·   rº   rê   rñ   r   r   r   r
   Ú<module>   sF   
" 3
 
	,; ã               @   sD  d Z dZddlmZmZ G dd deZG dd deZeedZd	d
 Z	e	dZ
e
dd= e	dZe	dZeeeeiZeeeeiZeeeeiZeeeeiZeeee iZ!ee"ee#iZ$e%e%e&e&e'e'e(e(e)e*e+e,e-e-e.e.iZ/e%e0e&e1e'e2e(e3e)e4e+e5e-e6e.e7iZ8dZ9dZ:dZ;dZ<dZ=dZ>dZ?dZ@dZAdZBdZCdZDeEdkr@dd ZFeGddêZHeH Id¡ eH Ide ¡ eFeHe
d  eFeHed! eFeHed! eH Id"e9 ¡ eH Id#e: ¡ eH Id$e; ¡ eH Id%e< ¡ eH Id&e= ¡ eH Id'e> ¡ eH Id(e? ¡ eH Id)e@ ¡ eH Id*eA ¡ eH Id+eB ¡ eH Id,eC ¡ eH Id-eD ¡ W dQ R X eJd. dS )/zInternal support module for sreiýÈ3é    )Ú	MAXREPEATÚ	MAXGROUPSc                   s&   e Zd ZdZdZd fdd	Z  ZS )Úerrorai  Exception raised for invalid regular expressions.

    Attributes:

        msg: The unformatted error message
        pattern: The regular expression pattern
        pos: The index in the pattern where compilation failed (may be None)
        lineno: The line corresponding to pos (may be None)
        colno: The column corresponding to pos (may be None)
    ÚreNc                s¢   || _ || _|| _|d k	r|d k	rd||f }t|tr>d}nd}| |d|¡d | _|| |d|¡ | _||krd|| j| jf }nd  | _| _t	  
|¡ d S )Nz%s at position %dÚ
ó   
r   é   z%s (line %d, column %d))ÚmsgÚpatternÚposÚ
isinstanceÚstrÚcountÚlinenoÚrfindÚcolnoÚsuperÚ__init__)Úselfr	   r
   r   Únewline)Ú	__class__© úD:\Python\lib\sre_constants.pyr   %   s    
zerror.__init__)NN)Ú__name__Ú
__module__Ú__qualname__Ú__doc__r   Ú__classcell__r   r   )r   r   r      s   
r   c                   s(   e Zd Z fddZdd ZeZ  ZS )Ú_NamedIntConstantc                s   t t|  | |¡}||_|S )N)r   r   Ú__new__Úname)ÚclsÚvaluer    r   )r   r   r   r   9   s    z_NamedIntConstant.__new__c             C   s   | j S )N)r    )r   r   r   r   Ú__str__>   s    z_NamedIntConstant.__str__)r   r   r   r   r#   Ú__repr__r   r   r   )r   r   r   8   s   r   r   c             C   s8   |   ¡  ¡ } dd t| D }t  dd |D ¡ |S )Nc             S   s   g | ]\}}t ||qS r   )r   )Ú.0Úir    r   r   r   ú
<listcomp>G   s    z_makecodes.<locals>.<listcomp>c             S   s   i | ]}||j qS r   )r    )r%   Úitemr   r   r   ú
<dictcomp>H   s    z_makecodes.<locals>.<dictcomp>)ÚstripÚsplitÚ	enumerateÚglobalsÚupdate)ÚnamesÚitemsr   r   r   Ú
_makecodesE   s    r1   az  
    FAILURE SUCCESS

    ANY ANY_ALL
    ASSERT ASSERT_NOT
    AT
    BRANCH
    CALL
    CATEGORY
    CHARSET BIGCHARSET
    GROUPREF GROUPREF_EXISTS
    IN
    INFO
    JUMP
    LITERAL
    MARK
    MAX_UNTIL
    MIN_UNTIL
    NOT_LITERAL
    NEGATE
    RANGE
    REPEAT
    REPEAT_ONE
    SUBPATTERN
    MIN_REPEAT_ONE

    GROUPREF_IGNORE
    IN_IGNORE
    LITERAL_IGNORE
    NOT_LITERAL_IGNORE

    GROUPREF_LOC_IGNORE
    IN_LOC_IGNORE
    LITERAL_LOC_IGNORE
    NOT_LITERAL_LOC_IGNORE

    GROUPREF_UNI_IGNORE
    IN_UNI_IGNORE
    LITERAL_UNI_IGNORE
    NOT_LITERAL_UNI_IGNORE
    RANGE_UNI_IGNORE

    MIN_REPEAT MAX_REPEAT
éþÿÿÿNzÏ
    AT_BEGINNING AT_BEGINNING_LINE AT_BEGINNING_STRING
    AT_BOUNDARY AT_NON_BOUNDARY
    AT_END AT_END_LINE AT_END_STRING

    AT_LOC_BOUNDARY AT_LOC_NON_BOUNDARY

    AT_UNI_BOUNDARY AT_UNI_NON_BOUNDARY
a  
    CATEGORY_DIGIT CATEGORY_NOT_DIGIT
    CATEGORY_SPACE CATEGORY_NOT_SPACE
    CATEGORY_WORD CATEGORY_NOT_WORD
    CATEGORY_LINEBREAK CATEGORY_NOT_LINEBREAK

    CATEGORY_LOC_WORD CATEGORY_LOC_NOT_WORD

    CATEGORY_UNI_DIGIT CATEGORY_UNI_NOT_DIGIT
    CATEGORY_UNI_SPACE CATEGORY_UNI_NOT_SPACE
    CATEGORY_UNI_WORD CATEGORY_UNI_NOT_WORD
    CATEGORY_UNI_LINEBREAK CATEGORY_UNI_NOT_LINEBREAK
r   é   é   é   é   é    é@   é   é   Ú__main__c             C   s.   t |}x |D ]}|  d|||f ¡ qW d S )Nz#define %s_%s %d
)ÚsortedÚwrite)ÚfÚdÚprefixr0   r(   r   r   r   ÚdumpÜ   s    
rA   zsre_constants.hÚwao  /*
 * Secret Labs' Regular Expression Engine
 *
 * regular expression matching engine
 *
 * NOTE: This file is generated by sre_constants.py.  If you need
 * to change anything in here, edit sre_constants.py and run it.
 *
 * Copyright (c) 1997-2001 by Secret Labs AB.  All rights reserved.
 *
 * See the _sre.c file for information on usage and redistribution.
 */

z#define SRE_MAGIC %d
ZSRE_OPZSREz#define SRE_FLAG_TEMPLATE %d
z#define SRE_FLAG_IGNORECASE %d
z#define SRE_FLAG_LOCALE %d
z#define SRE_FLAG_MULTILINE %d
z#define SRE_FLAG_DOTALL %d
z#define SRE_FLAG_UNICODE %d
z#define SRE_FLAG_VERBOSE %d
z#define SRE_FLAG_DEBUG %d
z#define SRE_FLAG_ASCII %d
z#define SRE_INFO_PREFIX %d
z#define SRE_INFO_LITERAL %d
z#define SRE_INFO_CHARSET %d
Údone)Kr   ÚMAGICÚ_srer   r   Ú	Exceptionr   Úintr   r1   ÚOPCODESÚATCODESÚCHCODESÚLITERALÚLITERAL_IGNOREÚNOT_LITERALÚNOT_LITERAL_IGNOREÚ	OP_IGNOREÚLITERAL_LOC_IGNOREÚNOT_LITERAL_LOC_IGNOREÚOP_LOCALE_IGNOREÚLITERAL_UNI_IGNOREÚNOT_LITERAL_UNI_IGNOREÚOP_UNICODE_IGNOREÚAT_BEGINNINGZAT_BEGINNING_LINEÚAT_ENDZAT_END_LINEÚAT_MULTILINEZAT_BOUNDARYZAT_LOC_BOUNDARYZAT_NON_BOUNDARYZAT_LOC_NON_BOUNDARYÚ	AT_LOCALEZAT_UNI_BOUNDARYZAT_UNI_NON_BOUNDARYÚ
AT_UNICODEZCATEGORY_DIGITZCATEGORY_NOT_DIGITZCATEGORY_SPACEZCATEGORY_NOT_SPACEZCATEGORY_WORDZCATEGORY_LOC_WORDZCATEGORY_NOT_WORDZCATEGORY_LOC_NOT_WORDZCATEGORY_LINEBREAKZCATEGORY_NOT_LINEBREAKÚ	CH_LOCALEZCATEGORY_UNI_DIGITZCATEGORY_UNI_NOT_DIGITZCATEGORY_UNI_SPACEZCATEGORY_UNI_NOT_SPACEZCATEGORY_UNI_WORDZCATEGORY_UNI_NOT_WORDZCATEGORY_UNI_LINEBREAKZCATEGORY_UNI_NOT_LINEBREAKÚ
CH_UNICODEÚSRE_FLAG_TEMPLATEÚSRE_FLAG_IGNORECASEÚSRE_FLAG_LOCALEÚSRE_FLAG_MULTILINEÚSRE_FLAG_DOTALLÚSRE_FLAG_UNICODEÚSRE_FLAG_VERBOSEÚSRE_FLAG_DEBUGÚSRE_FLAG_ASCIIÚSRE_INFO_PREFIXÚSRE_INFO_LITERALÚSRE_INFO_CHARSETr   rA   Úopenr>   r=   Úprintr   r   r   r   Ú<module>   s   !
+

ã               @   sÔ  d Z ddlT dZdZedZedZedZedZed	Z	ee
ehZeeeeeeehZeed
feedfeedfeedfeedfeedfeedfeedfdZeefeefeefeeefgfeeefgfeeefgfeeefgfeeefgfeeefgfee fd
Z!e"e#e$e%e&e'e(e)dZ*e'e#B e)B Z+e,e(B Z-G dd de.Z/G dd dZ0G dd dZ1G dd dZ2dd Z3dd  Z4d!d" Z5d#d$ Z6d3d&d'Z7d(d) Z8d*d+ Z9d4d-d.Z:d/d0 Z;d1d2 Z<d,S )5zInternal support module for sreé    )Ú*z.\[{()*+?^$|z*+?{Ú
0123456789Ú01234567Z0123456789abcdefABCDEFZ4abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZz 	
úúúÚ
úú	úú\)z\az\bz\fz\nz\rz\tz\vz\\)
z\Az\bz\Bz\dz\Dz\sz\Sz\wz\Wz\Z)ÚiÚLÚmÚsÚxÚaÚtÚuc               @   s   e Zd ZdS )ÚVerboseN)Ú__name__Ú
__module__Ú__qualname__© r   r   úD:\Python\lib\sre_parse.pyr   G   s   r   c               @   sB   e Zd Zdd Zedd ZdddZdd	 Zd
d Zdd Z	dS )ÚPatternc             C   s   d| _ i | _d g| _d | _d S )Nr   )ÚflagsÚ	groupdictÚgroupwidthsÚlookbehindgroups)Úselfr   r   r   Ú__init__L   s    zPattern.__init__c             C   s
   t | jS )N)Úlenr   )r    r   r   r   ÚgroupsQ   s    zPattern.groupsNc             C   sb   | j }| j d ¡ | j tkr$td|d k	r^| j |d ¡}|d k	rTtd|||f || j|< |S )Nztoo many groupsz7redefinition of group name %r as group %d; was group %d)r#   r   ÚappendÚ	MAXGROUPSÚerrorr   Úget)r    ÚnameÚgidÚogidr   r   r   Ú	opengroupT   s    

zPattern.opengroupc             C   s   |  ¡ | j|< d S )N)Úgetwidthr   )r    r)   Úpr   r   r   Ú
closegroup`   s    zPattern.closegroupc             C   s   || j k o| j| d k	S )N)r#   r   )r    r)   r   r   r   Ú
checkgroupb   s    zPattern.checkgroupc             C   s6   | j d k	r2|  |¡s| d¡|| j kr2| d¡d S )Nzcannot refer to an open groupz?cannot refer to group defined in the same lookbehind subpattern)r   r/   r&   )r    r)   Úsourcer   r   r   Úchecklookbehindgroupe   s
    



zPattern.checklookbehindgroup)N)
r   r   r   r!   Úpropertyr#   r+   r.   r/   r1   r   r   r   r   r   J   s   
r   c               @   s`   e Zd ZdddZdddZdd Zd	d
 Zdd Zdd Zdd Z	dd Z
dd Zdd ZdS )Ú
SubPatternNc             C   s"   || _ |d krg }|| _d | _d S )N)ÚpatternÚdataÚwidth)r    r4   r5   r   r   r   r!   o   s
    zSubPattern.__init__r   c             C   s   d}t tf}x| jD ]\}}t|d t| dd |tkrtt  x*|D ]"\}}t|d d t| | qLW q|tkrÀt  x:t|d D ]*\}}|r¬t|d d  | |d ¡ qW q|t	kr|\}}	}
td| |	 |d ¡ |
rt|d d  |
 |d ¡ qt
||rd}x\|D ]T}t
|trX|sDt  | |d ¡ d}n"|sjtd	dd t|dd d}q(W |st  qtd| qW d S )
NTz  Ú )Úendé   ÚORÚELSEFú )ÚtupleÚlistr5   ÚprintÚstrÚINÚBRANCHÚ	enumerateÚdumpÚGROUPREF_EXISTSÚ
isinstancer3   )r    ÚlevelÚnlÚseqtypesÚopÚavr   r   Ú	condgroupÚitem_yesÚitem_nor   r   r   rD   v   sH     




zSubPattern.dumpc             C   s
   t | jS )N)Úreprr5   )r    r   r   r   Ú__repr__   s    zSubPattern.__repr__c             C   s
   t | jS )N)r"   r5   )r    r   r   r   Ú__len__    s    zSubPattern.__len__c             C   s   | j |= d S )N)r5   )r    Úindexr   r   r   Ú__delitem__¢   s    zSubPattern.__delitem__c             C   s&   t |trt| j| j| S | j| S )N)rF   Úslicer3   r4   r5   )r    rR   r   r   r   Ú__getitem__¤   s    
zSubPattern.__getitem__c             C   s   || j |< d S )N)r5   )r    rR   Úcoder   r   r   Ú__setitem__¨   s    zSubPattern.__setitem__c             C   s   | j  ||¡ d S )N)r5   Úinsert)r    rR   rV   r   r   r   rX   ª   s    zSubPattern.insertc             C   s   | j  |¡ d S )N)r5   r$   )r    rV   r   r   r   r$   ¬   s    zSubPattern.appendc       	      C   sê  | j d k	r| j S d }}x®| jD ]¢\}}|tkrtd }d}x0|d D ]$}| ¡ \}}t||}t||}qJW || }|| }q"|tkrª| ¡ \}}|| }|| }q"|tkrÔ|d  ¡ \}}|| }|| }q"|t	kr|d  ¡ \}}|||d   }|||d   }q"|t
kr,|d }|d }q"|tkrX| jj| \}}|| }|| }q"|tkr¼|d  ¡ \}}|d d k	r¦|d  ¡ \}}t||}t||}nd}|| }|| }q"|tkr"P q"W t|td t|tf| _ | j S )Nr   r9   éÿÿÿÿé   )r6   r5   rB   Ú	MAXREPEATr,   ÚminÚmaxÚCALLÚ
SUBPATTERNÚ_REPEATCODESÚ
_UNITCODESÚGROUPREFr4   r   rE   ÚSUCCESS)	r    ÚloÚhirJ   rK   r   ÚjÚlÚhr   r   r   r,   ®   sZ    












zSubPattern.getwidth)N)r   )r   r   r   r!   rD   rP   rQ   rS   rU   rW   rX   r$   r,   r   r   r   r   r3   m   s   

(r3   c               @   sb   e Zd Zdd Zdd Zdd Zdd Zd	d
 Zdd Ze	dd Z
dd Zdd ZdddZdS )Ú	Tokenizerc             C   s@   t |t| _|| _| js"t|d}|| _d| _d | _|  ¡  d S )NÚlatin1r   )rF   r@   ÚistextÚstringÚdecoded_stringrR   ÚnextÚ_Tokenizer__next)r    rl   r   r   r   r!   à   s    
zTokenizer.__init__c             C   s   | j }y| j| }W n tk
r.   d | _d S X |dkr|d7 }y|| j| 7 }W n. tk
r   td| jt| jd d Y nX |d | _ || _d S )Nr   r9   zbad escape (end of pattern))rR   rm   Ú
IndexErrorrn   r&   rl   r"   )r    rR   Úcharr   r   r   Ú__nexté   s    
zTokenizer.__nextc             C   s   || j kr|  ¡  dS dS )NTF)rn   ro   )r    rq   r   r   r   Úmatchù   s    
zTokenizer.matchc             C   s   | j }|  ¡  |S )N)rn   ro   )r    Úthisr   r   r   r'   þ   s    zTokenizer.getc             C   s:   d}x0t |D ]$}| j}||kr"P ||7 }|  ¡  qW |S )Nr7   )Úrangern   ro   )r    ÚnÚcharsetÚresultÚ_Úcr   r   r   Úgetwhile  s    zTokenizer.getwhilec             C   sh   d}x^| j }|  ¡  |d kr>|s*|  d¡|  d| t|¡||krX|sV|  dd¡P ||7 }qW |S )Nr7   zmissing group namezmissing %s, unterminated namer9   )rn   ro   r&   r"   )r    Ú
terminatorrx   rz   r   r   r   Úgetuntil  s    


zTokenizer.getuntilc             C   s   | j t| jpd S )Nr7   )rR   r"   rn   )r    r   r   r   Úpos  s    zTokenizer.posc             C   s   | j t| jpd S )Nr7   )rR   r"   rn   )r    r   r   r   Útell  s    zTokenizer.tellc             C   s   || _ |  ¡  d S )N)rR   ro   )r    rR   r   r   r   Úseek   s    zTokenizer.seekr   c             C   s   t || j|  ¡ | S )N)r&   rl   r   )r    ÚmsgÚoffsetr   r   r   r&   $  s    zTokenizer.errorN)r   )r   r   r   r!   ro   rs   r'   r{   r}   r2   r~   r   r   r&   r   r   r   r   ri   ß   s   		ri   c             C   s  t  |¡}|r|S t |¡}|r0|d tkr0|S y´|dd }|dkr||  dt¡7 }t|dkrx|  d| t|¡tt	|dd  dfS |dkrâ| j
râ||  dt¡7 }t|d	krÌ|  d| t|¡tt	|dd  dfS |d
krH| j
rH||  dt¡7 }t|dkr&|  d| t|¡t	|dd  d}t| t|fS |tkr||  dt¡7 }t	|dd  d}|dkr|  d| t|¡t|fS |tkr¨tt|dkrä|tkrÔ|  d| t|¡tt|d fS W n tk
rü   Y nX |  d| t|¡d S )Nr   r9   rZ   r   é   zincomplete escape %sé   r   é   ÚUé   é
   éÿ   z.octal escape value %s outside of range 0-0o377zbad escape %s)ÚESCAPESr'   Ú
CATEGORIESrA   r{   Ú	HEXDIGITSr"   r&   ÚLITERALÚintrk   ÚchrÚ	OCTDIGITSÚDIGITSÚ
ValueErrorÚASCIILETTERSÚord)r0   ÚescaperV   rz   r   r   r   Ú_class_escape'  sR    





r   c             C   sÌ  t  |¡}|r|S t |¡}|r$|S yv|dd }|dkr||  dt¡7 }t|dkrl|  d| t|¡tt|dd  dfS |dkrÖ| j	rÖ||  dt¡7 }t|dkrÀ|  d| t|¡tt|dd  dfS |d	kr<| j	r<||  d
t¡7 }t|dkr|  d| t|¡t|dd  d}t
| t|fS |dkrl||  dt¡7 }tt|dd  d
fS |tkr^| jtkrú||  ¡ 7 }|d tkrú|d tkrú| jtkrú||  ¡ 7 }t|dd  d
}|dkrò|  d| t|¡t|fS t|dd  }||jk rF| |¡s2|  dt|¡| || ¡ t|fS |  d| t|d ¡t|dkr|tkr|  d| t|¡tt|d fS W n tk
r²   Y nX |  d| t|¡d S )Nr9   rZ   r   r   zincomplete escape %sr   r   r   r   r   r   Ú0r   z.octal escape value %s outside of range 0-0o377zcannot refer to an open groupzinvalid group reference %dzbad escape %s)r   r'   r   r{   r   r"   r&   r   r   rk   r   r   r   rn   r#   r/   r1   rb   r   r   r   )r0   r   ÚstaterV   rz   Úgroupr   r   r   Ú_escapeW  sn    







r   c             C   s@   t t| t | kr| S g }x| D ]}||kr"| |¡ q"W |S )N)r"   Úsetr$   )ÚitemsÚnewitemsÚitemr   r   r   Ú_uniq  s    
r   c             C   s`  g }|j }| j}|  ¡ }x.|t| |||d | o4|  |dsP qW t|dkr\|d S t|}x^d }	xR|D ]*}
|
szP |	d kr|
d }	qp|
d |	krpP qpW x|D ]
}
|
d= q¤W |  |	¡ qfP qfW g }x|D ]b}
t|
dkràP |
d \}}|tkr|  ||f¡ qÎ|tkr.|d d tk	r.| 	|¡ qÎP qÎW |  tt
|f¡ |S |  td |ff¡ |S )Nr9   ú|r   )r$   rs   r   Ú_parser"   r3   r   rA   ÚNEGATEÚextendr   rB   )r0   r   ÚverboseÚnestedr   ÚitemsappendÚsourcematchÚstartÚ
subpatternÚprefixr   r   rJ   rK   r   r   r   Ú
_parse_sub¡  sP    






r«   Fc       /   
   C   s¦  t |}|j}| j}| j}t}	t}
x| j}|d kr6P |dkr@P |  |r||tkrTq&|dkr|x| }|d kst|dkr^P q^W q&|d dkrt| ||}|| q&|t	kr¸|t
|
|f q&|dkrÞ|  ¡ d }g }|j}| jdkrdd l}|jd|  ¡  t|d	 d
 |d}xT| }|d kr8|  d|  ¡ | ¡|dkrL|rLP n|d dkrft| |}n~|rØ|dkrØ| j|krØdd l}|jd|dkrdn|dkr¬dn|dkrºdnd|  ¡ d f t|d	 d
 t
|
|f}|dr@| }|d kr|  d|  ¡ | ¡|dkrP|d tkr6|d d }|| |t
|
df P |d dkrjt| |}n>|dkrdd l}|jd|  ¡ d  t|d	 d
 t
|
|f}|d t
ksÄ|d t
krìd||f }|  |t|d t| ¡|d }|d }||k r.d||f }|  |t|d t| ¡|t||ff n"|d tkrZ|d d }|| qW t|}|	|dkrº|d d t
krº|r¬|t|d d f n||d  n"|rÐ| dtd f¡ |t|f q&|tkr<|  ¡ }|dkrd\}}nJ|dkrdt }}n2|dkr6dt }}n|dkrB| jdkr^|t
|
|f q&dt }}d  }}x| jtkr|| 7 }qrW |d!r¸x"| jtkr´|| 7 }qW n|}|dsâ|t
|
|f |  |¡ q&|rt|}|tkrtd"|rPt|}|tkr"td"||k rP|  d#|  ¡ | ¡ntd$|f |rd|d%d  }nd }|r|d d tkr|  d&|  ¡ | t| ¡|d d tkrÊ|  d'|  ¡ | t| ¡|d d t kr
|d d \}}}}|d kr
|s
|s
|}|dr(t!|||ff|d%< nt"|||ff|d%< q&|d(krT|t#d f q&|d)krö|  ¡ d } d*}d }!d}d}|dr(| }|d kr|  d+¡|d,krÂ|d-rä|  $d.¡}!|! %¡ s¾d/|! }|  |t|!d ¡nÚ|d0r|  $d1¡}!|! %¡ sd/|! }|  |t|!d ¡|j& |!¡}"|"d krPd2|! }|  |t|!d ¡| '|"¡sp|  d3t|!d ¡| (|"| ¡ |t)|"f q&n2| }|d kr¦|  d+¡|  d4| t|d ¡nf|d5krÔd }nT|dkrx4| jd kr |  d6|  ¡ |  ¡| d1kràP qàW q&n|d7k	rd}#|d-kr| }|d krL|  d+¡|d8krn|  d9| t|d ¡d%}#|j*}$|$d kr|j+|_*t,| |||d }|#dk r¶|$d kr¶d |_*|d1sÔ|  d:|  ¡ |  ¡|d0krð|t-|#|ff q&|t.|#|ff q&n"|d)k
rv|  $d1¡}%|% %¡ 	rX|j& |%¡}&|&d k	rèd2|% }|  |t|%d ¡nyt|%}&|&dk 	rpt/W n4 t/k
	r¦   d/|% }|  |t|%d ¡d Y nX |&	sÂ|  d;t|%d ¡|&t0k	rèd<|& }|  |t|%d ¡| (|&| ¡ t1| |||d }'|  d=¡
r<t1| |||d }(| jd=k
r@|  d>¡nd }(|  d1¡
s`|  d:|  ¡ |  ¡|t2|&|'|(ff q&n²|t3k
s|dkrt4| ||})|)d kr|
r¬|
rîdd l}|jd?| j5d d@ t| j5d@k
rÚdAnd f t6|d	 d
 |j7t8@ r&|s&t9q&|)\}}d }n|  dB| t|d ¡|d k	r~y| :|!¡}W n< tk
r| }* z|  |*j;t|!d ¡d W d d }*~*X Y nX |s|t8@ o|t8@  }+t,| ||+|d }|  d1¡sÊ|  d:|  ¡ |  ¡|d k	rà| <||¡ |t ||||ff q&|dkr|tt=f q&|dCkr&|tt>f q&tdD|f q&W xht?t|d d d% D ]N},||, \}-}.|-t krP|.\}}}}|d krP|sP|sP|||,|,d < qPW |S )ENz|)ú#r   r   r   ú[r9   z"Possible nested set at position %dr   )Ú
stacklevelú^zunterminated character setú]z-&~|zPossible set %s at position %dú-Ú
differenceú&Úintersectionú~zsymmetric differenceÚunionz&Possible set difference at position %drZ   zbad character range %s-%sú?)r   r9   r   ú+Ú{Ú}r7   ú,z"the repetition number is too largez"min repeat greater than max repeatzunsupported quantifier %rrY   znothing to repeatzmultiple repeatÚ.ú(Tzunexpected end of patternÚPú<ú>zbad character in group name %rú=ú)zunknown group name %rzcannot refer to an open groupzunknown extension ?Pú:zmissing ), unterminated commentz=!<z=!zunknown extension ?<z"missing ), unterminated subpatternzbad group numberzinvalid group reference %dr    z/conditional backref with more than two branchesz-Flags not at the start of the expression %r%sé   z (truncated)zunknown extension ?ú$z unsupported special character %r)@r3   r$   r'   rs   r"   r   rn   Ú
WHITESPACEr   ÚSPECIAL_CHARSr   r   ÚwarningsÚwarnÚFutureWarningr&   r   rA   ÚRANGEr   ÚNOT_LITERALrX   r¢   ÚREPEAT_CHARSr[   r   r   r   ÚOverflowErrorÚAssertionErrorÚATr`   r_   Ú
MIN_REPEATÚ
MAX_REPEATÚANYr}   Úisidentifierr   r/   r1   rb   r   r#   r«   ÚASSERTÚ
ASSERT_NOTr   r%   r¡   rE   ÚFLAGSÚ_parse_flagsrl   ÚDeprecationWarningr   ÚSRE_FLAG_VERBOSEr   r+   r   r.   ÚAT_BEGINNINGÚAT_ENDru   )/r0   r   r¤   r¥   Úfirstr©   ÚsubpatternappendÚ	sourcegetr§   Ú_lenÚ_ordrt   rV   Úherer   Ú	setappendrÈ   ÚnegateÚcode1ÚthatÚcode2r   rd   re   r\   r]   rq   r   r   Ú	add_flagsÚ	del_flagsr-   r¨   r(   r)   Údirr   ÚcondnamerL   rM   rN   r   ÚerrÚsub_verboser   rJ   rK   r   r   r   r¡   Û  sP   








 


















































*




r¡   c             C   s  | j }d}d}|dkrÌx´t| }| jr>|dkrTd}|  |¡n|dkrTd}|  |¡||O }|t@ r~|t@ |kr~d}|  |¡| }|d kr|  d¡|d	kr P |tkr| ¡ r´d
nd}|  |t|¡qW |dkræ| j|O  _d S |t@ rú|  dd¡|dkrÌ| }|d kr|  d¡|tkrJ| ¡ r6d
nd}|  |t|¡xt| }|t@ rld}|  |¡||O }| }|d kr|  d¡|dkrP |tkrL| ¡ r²d
nd}|  |t|¡qLW |dksÚt	|t@ rð|  dd¡||@ r|  dd¡||fS )Nr   r±   r   z8bad inline flags: cannot use 'L' flag with a str patternr   z:bad inline flags: cannot use 'u' flag with a bytes patternz9bad inline flags: flags 'a', 'u' and 'L' are incompatiblezmissing -, : or )z)-:zunknown flagrÂ   z,bad inline flags: cannot turn on global flagr9   zmissing flagz8bad inline flags: cannot turn off flags 'a', 'u' and 'L'z	missing :rÃ   z-bad inline flags: cannot turn off global flagz(bad inline flags: flag turned on and off)
r'   r×   rk   r&   Ú
TYPE_FLAGSÚisalphar"   r   ÚGLOBAL_FLAGSrÏ   )r0   r   rq   rß   rè   ré   Úflagr   r   r   r   rØ   K  sr    














rØ   c             C   sj   t | tr>|t@ rtd|t@ s,|tO }qf|t@ rftdn(|t@ rNtd|t@ rf|t@ rftd|S )Nz)cannot use LOCALE flag with a str patternz(ASCII and UNICODE flags are incompatiblez,cannot use UNICODE flag with a bytes patternz'ASCII and LOCALE flags are incompatible)rF   r@   ÚSRE_FLAG_LOCALEr   ÚSRE_FLAG_ASCIIÚSRE_FLAG_UNICODE)Úsrcr   r   r   r   Ú	fix_flags  s    


rö   Nc             C   sÄ   t | }|d krt }||_| |_yt|||t@ d}W nB tk
rz   t }|tB |_| |_| d¡ t||dd}Y nX t| |j	j|j	_|j
d k	r°|j
dks¦t| d¡|t@ rÀ| ¡  |S )Nr   TrÂ   zunbalanced parenthesis)ri   r   r   r@   r«   rÚ   r   r   rö   r4   rn   rÏ   r&   ÚSRE_FLAG_DEBUGrD   )r@   r   r4   r0   r-   r   r   r   Úparse  s(    



rø   c                sò  t | j}g  g g j} fdd}j}x|| }|d krNP |d dkr®|d }|dkrJd} d¡s d	¡ d
¡}| ¡ rÈy|| }	W n  tk
rÄ   t	d| Y nX nlyt
|}	|	dk rÞtW n0 tk
r    d| t|d ¡d Y nX |	tkr4 d|	 t|d ¡||	t|d  q¶|dkr¢jtkr|| 7 }jtkr|| 7 }|tt
|dd  dd@  q¶|tkrZd}
jtkr4|| 7 }|tkr4|d tkr4jtkr4|| 7 }d}
t
|dd  d}|dkr( d| t|¡|t| |
s¬|t
|dd  t|d  nRytt| d }W n4 tk
r¢   |tkr d| t|¡Y nX || q>|| q>W rÐ d ¡¡ t| tsêdd D  fS )Nc                sX   | j kr d|  |¡r8 d ¡¡ d d =   t| f¡  d ¡ d S )Nzinvalid group reference %dr7   )r#   r&   r$   Újoinr"   )rR   r~   )r#   ÚliteralÚliteralsr4   r   r   r   ÚaddgroupÀ  s    

z parse_template.<locals>.addgroupr   r   r9   Úgr7   r¿   z	missing <rÀ   zunknown group name %rzbad character in group name %rzinvalid group reference %dr   r   r   FrZ   Tz.octal escape value %s outside of range 0-0o377zbad escape %sc             S   s"   g | ]}|d krd n|  d¡qS )Nzlatin-1)Úencode)Ú.0r   r   r   r   ú
<listcomp>	  s    z"parse_template.<locals>.<listcomp>)ri   r'   r$   Ú
groupindexrs   r&   r}   rÔ   ÚKeyErrorrp   r   r   r"   r%   rn   r   r   r   r   r   rù   rF   r@   )r0   r4   ÚsgetÚlappendrü   r  rt   rz   r(   rR   Úisoctalr   )r#   rú   rû   r4   r   r   Úparse_template·  s    









"



 

r  c             C   sz   |j }|jd d }| \}}|d d  }y&x |D ]\}}||pB|||< q0W W n  tk
rn   td| Y nX | |¡S )Nr   zinvalid group reference %d)r   rl   rp   r&   rù   )Útemplaters   rý   Úemptyr#   rû   rR   r   r   r   r   Úexpand_template  s    r	  )F)r   N)=Ú__doc__Úsre_constantsrÇ   rÍ   Ú	frozensetr   r   r   r   rÆ   rÑ   rÒ   r`   rÓ   rË   rA   r   rÌ   ÚCATEGORYra   r   r   rÐ   ZAT_BEGINNING_STRINGZAT_BOUNDARYZAT_NON_BOUNDARYZCATEGORY_DIGITZCATEGORY_NOT_DIGITZCATEGORY_SPACEZCATEGORY_NOT_SPACEZCATEGORY_WORDZCATEGORY_NOT_WORDZAT_END_STRINGr   ÚSRE_FLAG_IGNORECASErò   ÚSRE_FLAG_MULTILINEÚSRE_FLAG_DOTALLrÚ   ró   ÚSRE_FLAG_TEMPLATErô   r×   rî   r÷   rð   Ú	Exceptionr   r   r3   ri   r   r   r   r«   r¡   rØ   rö   rø   r  r	  r   r   r   r   Ú<module>   sl   






#rH0A	:
  r<
 Uã              @   sÀ  d Z ddlmZ ejdkstdd Zedddd	d
ddddddgeedd Z	dd Z
dddddddddddd d!d"d#d$d%d&d'd(dd)d*d+d,d-d.d/d0d1d2d3d4d5d6d7d8d9d:d;d<d5d6d7d8d9d:d;d<d=d>d?d@dAdBdCdDd=d>d?d@dAdBdCdDdEdFdGdHdIdJdKdLdEdFdGdHdIdJdKdLdMdNdOdPdQdNddRdSdTdUdVdSdWddXdYdZdd[d\d]d^d_d`dadbd_dcdddedfdgdhdhdhdididjdkdldmdndodododpdqdrdsdsdtdddudvdwdxd&dydzd{d|d}d~ddddddddddddddd}dddddddddddddddddddddd d¡d¢d£d¤d¥d¦d§d¨d©dªd«d¬d­d®d®d¯d°d±d²d³d´dtdddydudvdµdhdid¶d·djdwdkd¸dmdndodd¹dºd»d¼d½d¾dsd´dtdddydudvdµdhdid¶d·djdwdkd¸dmdndodd¹dºd»d¼d½d¾dsd´dtdddydudvdµdhdid¶d·djdwdkd¸dmdndodd¹dºd»d¼d½d¾dsd´dddydµd¶d·dkd¸dmdndd¹dºd»d¼d½d¾dsd´dtdddydudvdµdhdid¶d·djdwdkd¸dmdndodd¹dºd»d¼d½d¾dsd´dtdydudvdµd¶d·djdwdkd¸dmdndd¹dºd»d¼d½d¾d´dtdydudvdµdid¶d·djdwd¸dd¹dºd»d¼d½d¾d´dtdddydudvdµdhdid¶d·djdwdkd¸dmdndodd¹dºd»d¼d½d¾dsd´dtdddydudvdµdhdid¶d·djdwdkd¸dmdndodd¹dºd»d¼d½d¾dsd´dtdddydudvdµdhdid¶d·djdwdkd¸dmdndodd¹dºd»d¼d½d¾dsd´dtdddydudvdµdhdid¶d·djdwdkd¸dmdndodd¹dºd»d¼d½d¾dsd´dtdddydudvdµdhdid¶d·djdwdkd¸dmdndodd¹dºd»d¼d½d¾dsd´dtdddydudvdµdhdid¶d·djdwdkd¸dmdndodd¹dºd»d¼d½d¾dsd¿d dxdÀd)dÁdÂd!dd'dÃddÄdÅdÆd&d(d!ddÇd"d%dÈdÉdÊdd¿d dxdÀd)dÁdÂd!dd'dÃddÄdÅdÆd&d(d!ddÇd"d%dÈdÉdÊdd¿d dxdÀd)dÁdÂd!dd'dÃddÄdÅdÆd&d(d!ddÇd"d%dÈdÉdÊdd¿d dxdÀd)dÁdÂd!dd'dÃddÄdÅdÆd&d(d!ddÇd"d%dÈdÉdÊdd¿d dxdÀd)dÁdÂd!dd'dÃddÄdÅdÆd&d(d!ddÇd"d%dÈdÉdÊddËZdÌdÍ ZdÎdÏ ZdÐdÑ ZdÒdÓ ZdÔdÕ ZdÖd× ZedØdÙdÚdddÛdÜdgeeddÝ eedÞdß eedàdá eedâdã Zdädå Zdædç Zdèdé Zdêdë Zdìdí ZeedàdîZdïdð ZeedñdòZdódô Zedõdöd÷døgeedùdú eedÞdß Zdûdü Zedýgeedþdÿ Zd d Zdd Z dd Z!dS (  zÉLibrary that exposes various tables found in the StringPrep RFC 3454.

There are two kinds of tables: sets, for which a member test is provided,
and mappings, for which a mapping function is provided.
é    )Ú	ucd_3_2_0z3.2.0c             C   sB   t  | ¡dkrdS t| }d|  kr.dk r6n ndS |d@ dkS )NZCnFiÐý  iðý  iÿÿ  )iþÿ  iÿÿ  )ÚunicodedataÚcategoryÚord)ÚcodeÚc© r   úD:\Python\lib\stringprep.pyÚin_table_a1   s      r
   é­   iO  i  i  i  i  i   i   i   i`   iÿþ  i þ  iþ  c             C   s   t | tkS )N)r   Úb1_set)r   r   r   r	   Úin_table_b1   s    r   u   Î¼Ússu   iÌu   Ê¼nÚsu   jÌu   Î¹u    Î¹u   Î¹ÌÌu   ÏÌÌu   Ïu   Î²u   Î¸u   Ïu   Ïu   Ïu   Ïu   Ïu   Îºu   Ïu   Îµu   Õ¥Öu   hÌ±u   tÌu   wÌu   yÌu   aÊ¾u   á¹¡u   ÏÌu   ÏÌÌu   ÏÌÌu   ÏÌÍu   á¼Î¹u   á¼Î¹u   á¼Î¹u   á¼Î¹u   á¼Î¹u   á¼Î¹u   á¼Î¹u   á¼Î¹u   á¼ Î¹u   á¼¡Î¹u   á¼¢Î¹u   á¼£Î¹u   á¼¤Î¹u   á¼¥Î¹u   á¼¦Î¹u   á¼§Î¹u   á½ Î¹u   á½¡Î¹u   á½¢Î¹u   á½£Î¹u   á½¤Î¹u   á½¥Î¹u   á½¦Î¹u   á½§Î¹u   á½°Î¹u   Î±Î¹u   Î¬Î¹u   Î±Íu   Î±ÍÎ¹u   á½´Î¹u   Î·Î¹u   Î®Î¹u   Î·Íu   Î·ÍÎ¹u   Î¹ÌÌu   Î¹Íu   Î¹ÌÍu   ÏÌÌu   ÏÌu   ÏÍu   ÏÌÍu   á½¼Î¹u   ÏÎ¹u   ÏÎ¹u   ÏÍu   ÏÍÎ¹Zrsr   u   Â°cu   Éu   Â°fÚhÚiÚlÚnÚnoÚpÚqÚrZsmÚtelÚtmÚzÚbÚeÚfÚmu   Î³ÚdZhpaZauZovÚpaZnau   Î¼aZmaÚkaZkbZmbZgbZpfZnfu   Î¼fÚhzZkhzZmhzZghzZthzZkpaZmpaZgpaÚpvÚnvu   Î¼vÚmvZkvÚpwZnwu   Î¼wZmwÚkwu   kÏu   mÏZbqu   câkgzco.ZdbZgyÚhpZkkZkmÚphZppmZprÚsvÚwbZffÚfiZflZffiZfflÚstu   Õ´Õ¶u   Õ´Õ¥u   Õ´Õ«u   Õ¾Õ¶u   Õ´Õ­ÚaÚgÚjÚkÚoÚtÚuÚvÚwÚxÚyu   Î±u   Î´u   Î¶u   Î·u   Î»u   Î½u   Î¾u   Î¿u   Ïu   Ïu   Ïu   Ï(  éµ   éß   i0  iI  i  ið  iE  iz  i  i°  iÂ  iÐ  iÑ  iÒ  iÓ  iÔ  iÕ  iÖ  ið  iñ  iò  iõ  i  i  i  i  i  i  i  iP  iR  iT  iV  i  i  i  i  i  i  i  i  i  i  i  i  i  i  i  i  i  i  i  i  i  i  i  i  i  i  i  i  i  i  i  i  i   i¡  i¢  i£  i¤  i¥  i¦  i§  i¨  i©  iª  i«  i¬  i­  i®  i¯  i²  i³  i´  i¶  i·  i¼  i¾  iÂ  iÃ  iÄ  iÆ  iÇ  iÌ  iÒ  iÓ  iÖ  i×  iâ  iã  iä  iæ  iç  iò  ió  iô  iö  i÷  iü  i¨   i!  i!  i!  i	!  i!  i!  i!  i!  i!  i!  i!  i!  i!  i!  i!  i!  i!  i !  i!!  i"!  i$!  i(!  i,!  i-!  i0!  i1!  i3!  i>!  i?!  iE!  iq3  is3  iu3  i3  i3  i3  i3  i3  i3  i3  i3  i3  i3  i3  i3  i3  i3  i3  i3  i©3  iª3  i«3  i¬3  i´3  iµ3  i¶3  i·3  i¸3  i¹3  iº3  i»3  i¼3  i½3  i¾3  i¿3  iÀ3  iÁ3  iÃ3  iÆ3  iÇ3  iÈ3  iÉ3  iË3  iÍ3  iÎ3  i×3  iÙ3  iÚ3  iÜ3  iÝ3  i û  iû  iû  iû  iû  iû  iû  iû  iû  iû  iû  iû  i Ô iÔ iÔ iÔ iÔ iÔ iÔ iÔ iÔ i	Ô i
Ô iÔ iÔ iÔ iÔ iÔ iÔ iÔ iÔ iÔ iÔ iÔ iÔ iÔ iÔ iÔ i4Ô i5Ô i6Ô i7Ô i8Ô i9Ô i:Ô i;Ô i<Ô i=Ô i>Ô i?Ô i@Ô iAÔ iBÔ iCÔ iDÔ iEÔ iFÔ iGÔ iHÔ iIÔ iJÔ iKÔ iLÔ iMÔ ihÔ iiÔ ijÔ ikÔ ilÔ imÔ inÔ ioÔ ipÔ iqÔ irÔ isÔ itÔ iuÔ ivÔ iwÔ ixÔ iyÔ izÔ i{Ô i|Ô i}Ô i~Ô iÔ iÔ iÔ iÔ iÔ iÔ i¢Ô i¥Ô i¦Ô i©Ô iªÔ i«Ô i¬Ô i®Ô i¯Ô i°Ô i±Ô i²Ô i³Ô i´Ô iµÔ iÐÔ iÑÔ iÒÔ iÓÔ iÔÔ iÕÔ iÖÔ i×Ô iØÔ iÙÔ iÚÔ iÛÔ iÜÔ iÝÔ iÞÔ ißÔ iàÔ iáÔ iâÔ iãÔ iäÔ iåÔ iæÔ içÔ ièÔ iéÔ iÕ iÕ iÕ iÕ i	Õ i
Õ iÕ iÕ iÕ iÕ iÕ iÕ iÕ iÕ iÕ iÕ iÕ iÕ iÕ iÕ iÕ i8Õ i9Õ i;Õ i<Õ i=Õ i>Õ i@Õ iAÕ iBÕ iCÕ iDÕ iFÕ iJÕ iKÕ iLÕ iMÕ iNÕ iOÕ iPÕ ilÕ imÕ inÕ ioÕ ipÕ iqÕ irÕ isÕ itÕ iuÕ ivÕ iwÕ ixÕ iyÕ izÕ i{Õ i|Õ i}Õ i~Õ iÕ iÕ iÕ iÕ iÕ iÕ iÕ i Õ i¡Õ i¢Õ i£Õ i¤Õ i¥Õ i¦Õ i§Õ i¨Õ i©Õ iªÕ i«Õ i¬Õ i­Õ i®Õ i¯Õ i°Õ i±Õ i²Õ i³Õ i´Õ iµÕ i¶Õ i·Õ i¸Õ i¹Õ iÔÕ iÕÕ iÖÕ i×Õ iØÕ iÙÕ iÚÕ iÛÕ iÜÕ iÝÕ iÞÕ ißÕ iàÕ iáÕ iâÕ iãÕ iäÕ iåÕ iæÕ içÕ ièÕ iéÕ iêÕ iëÕ iìÕ iíÕ iÖ i	Ö i
Ö iÖ iÖ iÖ iÖ iÖ iÖ iÖ iÖ iÖ iÖ iÖ iÖ iÖ iÖ iÖ iÖ iÖ iÖ iÖ iÖ iÖ i Ö i!Ö i<Ö i=Ö i>Ö i?Ö i@Ö iAÖ iBÖ iCÖ iDÖ iEÖ iFÖ iGÖ iHÖ iIÖ iJÖ iKÖ iLÖ iMÖ iNÖ iOÖ iPÖ iQÖ iRÖ iSÖ iTÖ iUÖ ipÖ iqÖ irÖ isÖ itÖ iuÖ ivÖ iwÖ ixÖ iyÖ izÖ i{Ö i|Ö i}Ö i~Ö iÖ iÖ iÖ iÖ iÖ iÖ iÖ iÖ iÖ iÖ iÖ i¨Ö i©Ö iªÖ i«Ö i¬Ö i­Ö i®Ö i¯Ö i°Ö i±Ö i²Ö i³Ö i´Ö iµÖ i¶Ö i·Ö i¸Ö i¹Ö iºÖ i»Ö i¼Ö i½Ö i¾Ö i¿Ö iÀÖ iÓÖ iâÖ iãÖ iäÖ iåÖ iæÖ içÖ ièÖ iéÖ iêÖ iëÖ iìÖ iíÖ iîÖ iïÖ iðÖ iñÖ iòÖ ióÖ iôÖ iõÖ iöÖ i÷Ö iøÖ iùÖ iúÖ i× i× i× i× i× i × i!× i"× i#× i$× i%× i&× i'× i(× i)× i*× i+× i,× i-× i.× i/× i0× i1× i2× i3× i4× iG× iV× iW× iX× iY× iZ× i[× i\× i]× i^× i_× i`× ia× ib× ic× id× ie× if× ig× ih× ii× ij× ik× il× im× in× i× i× i× i× i× i× i× i× i× i× i× i× i× i× i× i× i× i × i¡× i¢× i£× i¤× i¥× i¦× i§× i¨× i»× c             C   s"   t  t| ¡}|d k	r|S |  ¡ S )N)Úb3_exceptionsÚgetr   Úlower)r   r   r   r   r	   Úmap_table_b3½   s     r>   c             C   sH   t | }t d|¡}d dd |D ¡}t d|¡}||kr@|S |S d S )NÚNFKCÚ c             S   s   g | ]}t |qS r   )r>   )Ú.0Úchr   r   r	   ú
<listcomp>Æ   s    z map_table_b2.<locals>.<listcomp>)r>   r   Ú	normalizeÚjoin)r.   Úalr   Zblr   r   r   r	   Úmap_table_b2Ã   s    rG   c             C   s   | dkS )Nú r   )r   r   r   r	   Úin_table_c11Î   s    rI   c             C   s   t  | ¡dko| dkS )NÚZsrH   )r   r   )r   r   r   r	   Úin_table_c12Ò   s    rK   c             C   s   t  | ¡dkS )NrJ   )r   r   )r   r   r   r	   Úin_table_c11_c12Õ   s    rL   c             C   s   t | dk ot | ¡dkS )Né   ÚCc)r   r   r   )r   r   r   r	   Úin_table_c21Ù   s    rO   iÝ  i  i  i(   i)   id   ij   ip   iùÿ  iýÿ  isÑ i{Ñ c             C   s.   t | }|dk rdS t | ¡dkr&dS |tkS )NrM   FrN   T)r   r   r   Úc22_specials)r   r   r   r   r	   Úin_table_c22Ý   s      rQ   c             C   s   t  | ¡dkpt| tkS )NrN   )r   r   r   rP   )r   r   r   r	   Úin_table_c21_c22ã   s    rR   c             C   s   t  | ¡dkS )NZCo)r   r   )r   r   r   r	   Úin_table_c3è   s    rS   c             C   s0   t | }|dk rdS |dk r dS t | d@ dkS )NiÐý  Fiðý  Tiÿÿ  )iþÿ  iÿÿ  )r   )r   r   r   r   r	   Úin_table_c4ì   s      rT   c             C   s   t  | ¡dkS )NZCs)r   r   )r   r   r   r	   Úin_table_c5ó   s    rU   iþÿ  c             C   s   t | tkS )N)r   Úc6_set)r   r   r   r	   Úin_table_c6ø   s    rW   ið/  iü/  c             C   s   t | tkS )N)r   Úc7_set)r   r   r   r	   Úin_table_c7ý   s    rY   i@  iA  i   i   i*   i/   c             C   s   t | tkS )N)r   Úc8_set)r   r   r   r	   Úin_table_c8  s    r[   i  i   i  c             C   s   t | tkS )N)r   Úc9_set)r   r   r   r	   Úin_table_c9  s    r]   c             C   s   t  | ¡dkS )N)ÚRÚAL)r   Úbidirectional)r   r   r   r	   Úin_table_d1  s    ra   c             C   s   t  | ¡dkS )NÚL)r   r`   )r   r   r   r	   Úin_table_d2  s    rc   N)"Ú__doc__r   r   Zunidata_versionÚAssertionErrorr
   ÚsetÚlistÚranger   r   r;   r>   rG   rI   rK   rL   rO   rP   rQ   rR   rS   rT   rU   rV   rW   rX   rY   rZ   r[   r\   r]   ra   rc   r   r   r   r	   Ú<module>   s|  ,P,ã               @   sV  d Z ddddgZdZdZdZdZd	Zd
ZdZdZ	dZ
dZdZdZdZdZdZdZdZdZdZdZdZdZdZdZdZdZdZd Zd!Zd"Zd#Z d$Z!d%Z"d&Z#d'Z$d(Z%d)Z&d*Z'd+Z(d,Z)d-Z*d.Z+d/Z,d0Z-d1Z.d2Z/d3Z0d4Z1d5Z2d6Z3d7Z4d8Z5d9Z6d:Z7d;Z8d<Z9d=Z:d>Z;d?Z<d@Z=dAdB e>  ?¡ D Z@e Ae@ B¡ ¡ dCd ZCdDd ZDdEd ZEdFdG ZFeGdHkrReF  dIS )Jz!Token constants (from "token.h").Útok_nameÚ
ISTERMINALÚISNONTERMINALÚISEOFé    é   é   é   é   é   é   é   é   é	   é
   é   é   é   é   é   é   é   é   é   é   é   é   é   é   é   é   é   é   é   é   é   é    é!   é"   é#   é$   é%   é&   é'   é(   é)   é*   é+   é,   é-   é.   é/   é0   é1   é2   é3   é4   é5   é6   é7   é8   é9   é:   é   c             C   s*   i | ]"\}}t |tr| d ¡s||qS )Ú_)Ú
isinstanceÚintÚ
startswith)Ú.0ÚnameÚvalue© rH   úD:\Python\lib\token.pyú
<dictcomp>N   s   rJ   c             C   s   | t k S )N)Ú	NT_OFFSET)ÚxrH   rH   rI   r   S   s    c             C   s   | t kS )N)rK   )rL   rH   rH   rI   r   V   s    c             C   s   | t kS )N)Ú	ENDMARKER)rL   rH   rH   rI   r   Y   s    c           
   C   sâ  dd l } dd l}|jdd  }|r*|d p,d}d}t|dkrF|d }yt|}W n@ tk
r } z"|j dt| ¡ | 	d¡ W d d }~X Y nX | | 
¡  d¡}W d Q R X |  d| j¡}|  d| j¡}	i }
d }xr|D ]j}| |¡}|r| dd	¡\}}t|}d
|i|
|< |}qÜ|	 |¡}|rÜ|d k	rÜ| d¡}||
| d< qÜW t|
 ¡ }yt|}W nB tk
r¤ } z"|j dt| ¡ | 	d	¡ W d d }~X Y nX | | 
¡  d¡}W d Q R X y| d¡d }| d¡}W n, tk
r   |j d¡ | 	d¡ Y nX g }xL|D ]D}| d|
| d
 |f ¡ d|
| kr| d|
| d  ¡ qW ||||< yt|d}W nB tk
r¼ } z"|j dt| ¡ | 	d¡ W d d }~X Y nX | | d |¡¡ W d Q R X d S )Nr   r   zInclude/token.hzLib/token.pyzI/O error: %s
Ú
z>#define[ \t][ \t]*([A-Z0-9][A-Z0-9_]*)[ \t][ \t]*([0-9][0-9]*)z^\s*/\*\s*(.+?)\s*\*/\s*$r   ÚtokenÚcommentz#--start constants--z#--end constants--z&target does not contain format markersr   z%s = %dz# %sÚwr	   )ÚreÚsysÚargvÚlenÚopenÚOSErrorÚstdoutÚwriteÚstrÚexitÚreadÚsplitÚcompileÚ
IGNORECASEÚmatchÚgrouprC   ÚsortedÚkeysÚstderrÚindexÚ
ValueErrorÚappendÚjoin)rR   rS   ÚargsÚ
inFileNameÚoutFileNameÚfpÚerrÚlinesÚprogÚcomment_regexÚtokensÚprev_valÚliner`   rF   ÚvalÚcomment_matchrP   rc   ÚformatÚstartÚendÚkeyrH   rH   rI   Ú_main]   sx    




rz   Ú__main__N)HÚ__doc__Ú__all__rM   ÚNAMEÚNUMBERÚSTRINGÚNEWLINEÚINDENTÚDEDENTÚLPARÚRPARÚLSQBÚRSQBÚCOLONÚCOMMAÚSEMIÚPLUSÚMINUSÚSTARÚSLASHÚVBARÚAMPERÚLESSÚGREATERÚEQUALÚDOTÚPERCENTÚLBRACEÚRBRACEÚEQEQUALÚNOTEQUALÚ	LESSEQUALÚGREATEREQUALÚTILDEÚ
CIRCUMFLEXÚ	LEFTSHIFTÚ
RIGHTSHIFTÚ
DOUBLESTARÚ	PLUSEQUALÚMINEQUALÚ	STAREQUALÚ
SLASHEQUALÚPERCENTEQUALÚ
AMPEREQUALÚ	VBAREQUALÚCIRCUMFLEXEQUALÚLEFTSHIFTEQUALÚRIGHTSHIFTEQUALÚDOUBLESTAREQUALÚDOUBLESLASHÚDOUBLESLASHEQUALÚATÚATEQUALÚRARROWÚELLIPSISÚOPÚ
ERRORTOKENÚCOMMENTÚNLÚENCODINGÚN_TOKENSrK   ÚglobalsÚitemsr   ÚextendÚvaluesr   r   r   rz   Ú__name__rH   rH   rH   rI   Ú<module>   s   
B
