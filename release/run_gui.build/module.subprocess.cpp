/* Generated code for Python module 'subprocess'
 * created by Nuitka version 0.6.2
 *
 * This code is in part copyright 2019 Kay Hayen.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

#include "nuitka/prelude.h"

#include "__helpers.h"

/* The "_module_subprocess" is a Python object pointer of module type.
 *
 * Note: For full compatibility with CPython, every module variable access
 * needs to go through it except for cases where the module cannot possibly
 * have changed in the mean time.
 */

PyObject *module_subprocess;
PyDictObject *moduledict_subprocess;

/* The declarations of module constants used, if any. */
static PyObject *const_str_plain__filter_handle_list;
extern PyObject *const_tuple_str_plain_self_str_plain_args_tuple;
static PyObject *const_str_plain_c2pwrite;
extern PyObject *const_str_plain___spec__;
static PyObject *const_str_plain__communicate;
extern PyObject *const_str_plain___del__;
extern PyObject *const_str_plain___name__;
static PyObject *const_str_plain__args_from_interpreter_flags;
extern PyObject *const_str_plain_sorted;
extern PyObject *const_str_plain_builtins;
static PyObject *const_tuple_str_plain_timeout_str_plain_popenargs_str_plain_kwargs_tuple;
extern PyObject *const_bytearray_72cdf64f605ef12d57287fc4b61c2b5e;
static PyObject *const_tuple_str_plain_self_str_plain_input_str_plain_exc_tuple;
static PyObject *const_str_plain_PIPE_BUF;
static PyObject *const_str_plain_stderr_thread;
extern PyObject *const_str_plain_object;
static PyObject *const_tuple_c9e8fa414d034df4031fc4111ed36a42_tuple;
extern PyObject *const_str_plain_encode;
static PyObject *const_int_pos_50000;
extern PyObject *const_str_plain_fileno;
extern PyObject *const_str_plain_default;
static PyObject *const_str_digest_a18273144a57c4519b4c0da4d8a57d6c;
extern PyObject *const_str_plain_unregister;
extern PyObject *const_tuple_type_str_type_bytes_tuple;
static PyObject *const_tuple_int_neg_1_int_neg_1_int_neg_1_int_neg_1_int_neg_1_int_neg_1_tuple;
extern PyObject *const_str_plain_os;
extern PyObject *const_str_plain_None;
static PyObject *const_str_plain_hStdOutput;
static PyObject *const_str_digest_6c36c7bffe6106b4899f065ba37e0541;
static PyObject *const_str_digest_50731d62964f79d5fbaa6d7d14ba78dc;
static PyObject *const_str_digest_90a82a8b07cad57e858e4baab680e96c;
static PyObject *const_dict_e546620670da4aad7a6759469fad34a0;
static PyObject *const_str_digest_c2f9c4fb5ab6dcd3948ba0f41215e217;
extern PyObject *const_int_pos_512;
static PyObject *const_str_digest_1e4edad453cfaa12c0e57ca62e3ae4d6;
static PyObject *const_str_digest_6a5c73467512a55bc94316b05a6227e5;
extern PyObject *const_str_plain_fsencode;
static PyObject *const_str_digest_9b7f493a6ae9d7d25f0b01787918ea86;
extern PyObject *const_str_plain_stdout;
static PyObject *const_str_digest_35f84ffd5f8558a1b8bb435acb0aabe1;
extern PyObject *const_str_plain_start;
extern PyObject *const_tuple_none_none_none_tuple;
static PyObject *const_str_plain_dev_mode;
static PyObject *const_tuple_str_digest_24ffb4df8f6d99d30b1c0d82c11728f6_str_plain_dev_tuple;
extern PyObject *const_int_pos_16;
static PyObject *const_str_digest_6bfbca1b772b87689ce29d96787e292d;
static PyObject *const_str_digest_04075ac2a07d98a51e5d2365cf949798;
static PyObject *const_str_plain_write_through;
extern PyObject *const_str_plain_Popen;
static PyObject *const_tuple_str_plain_args_str_plain_value_tuple;
extern PyObject *const_str_plain_timeout;
extern PyObject *const_str_plain___debug__;
extern PyObject *const_str_plain_errno;
extern PyObject *const_str_plain_flags;
static PyObject *const_str_digest_20717f32ff2e8fa49a275f684313d4c7;
extern PyObject *const_str_plain_time;
static PyObject *const_tuple_a1f6990a259f63871d04a0031479ef59_tuple;
extern PyObject *const_str_plain_closed;
static PyObject *const_str_plain__internal_poll;
static PyObject *const_tuple_e34addb639ceb9dc9a4cc0882e121f30_tuple;
static PyObject *const_str_plain_bs_buf;
extern PyObject *const_str_angle_genexpr;
static PyObject *const_tuple_0b4b80302a0dd2641ae2bccda19bd994_tuple;
extern PyObject *const_str_plain_str;
extern PyObject *const_str_plain_WNOHANG;
extern PyObject *const_str_plain_waitpid;
static PyObject *const_str_plain_get_exec_path;
static PyObject *const_str_plain_CreateProcess;
extern PyObject *const_int_neg_2;
static PyObject *const_str_digest_ba4c66db524f9f7ea35f9ca80bb0f03a;
static PyObject *const_str_digest_0abfbff0054faa56a9b013b694deb65a;
extern PyObject *const_str_plain_min;
static PyObject *const_tuple_ecea41d9618568317bd7dde90480efa5_tuple;
static PyObject *const_str_plain_REALTIME_PRIORITY_CLASS;
extern PyObject *const_str_plain_path;
extern PyObject *const_str_plain_check;
extern PyObject *const_str_chr_45;
static PyObject *const_str_digest_b24355a78cfa4ecb206db6eb94a902c2;
static PyObject *const_str_plain_CREATE_BREAKAWAY_FROM_JOB;
static PyObject *const_str_plain__execute_child;
static PyObject *const_tuple_str_digest_9b7f493a6ae9d7d25f0b01787918ea86_tuple;
static PyObject *const_tuple_int_neg_1_int_neg_1_tuple;
static PyObject *const_str_plain_ECHILD;
static PyObject *const_str_plain_CREATE_NEW_PROCESS_GROUP;
static PyObject *const_str_digest_74856fc69b8683094c7bb7799fd12a5d;
static PyObject *const_str_plain_showalloccount;
extern PyObject *const_str_plain__time;
static PyObject *const_str_plain_GetFileType;
static PyObject *const_str_plain_WSTOPSIG;
static PyObject *const_str_plain__WEXITSTATUS;
extern PyObject *const_str_chr_9;
static PyObject *const_str_digest_eb773ccb8bd268b82caeedc82ba70185;
static PyObject *const_str_plain__WNOHANG;
static PyObject *const_str_digest_bc5a75fca86ecfaf571f8d5223e48666;
extern PyObject *const_str_plain_SelectSelector;
extern PyObject *const_str_plain_EVENT_READ;
extern PyObject *const_str_plain_RuntimeWarning;
static PyObject *const_str_digest_013753546732b33c34f2ebb05638c59c;
extern PyObject *const_tuple_int_0_tuple;
static PyObject *const_str_plain__closed_child_pipe_fds;
extern PyObject *const_str_plain_map;
extern PyObject *const_str_plain_False;
static PyObject *const_str_plain_COMSPEC;
static PyObject *const_str_plain_wShowWindow;
static PyObject *const_str_digest_5b563e342c6fb75d214ffb280a2e5464;
static PyObject *const_str_plain_ABOVE_NORMAL_PRIORITY_CLASS;
static PyObject *const_tuple_str_plain_self_str_plain__maxsize_str_plain__warn_tuple;
static PyObject *const_str_plain__stdin_write;
extern PyObject *const_tuple_str_plain_default_tuple;
static PyObject *const_str_plain_get_osfhandle;
static PyObject *const_tuple_str_plain_inst_str_plain_res_tuple;
extern PyObject *const_int_0;
static PyObject *const_str_digest_e2dc63c649962018f41bc6960a48c125;
extern PyObject *const_str_plain_no_user_site;
static PyObject *const_str_digest_6a219ad0399ae48eefe9eb5e907f4323;
extern PyObject *const_str_plain_register;
extern PyObject *const_str_digest_db35ab94a03c3cbeb13cbe2a1d728b77;
static PyObject *const_str_plain_send_signal;
static PyObject *const_str_digest_228a056f29f7ed5444f6cd76fc5830dd;
extern PyObject *const_str_plain_B;
static PyObject *const_str_plain__xoptions;
static PyObject *const_str_plain_STD_INPUT_HANDLE;
static PyObject *const_str_digest_e1055fdcc238bf0745885200755a16f7;
static PyObject *const_tuple_0b33e45deac7cdd8ab96e21af782d142_tuple;
static PyObject *const_str_digest_7171fe58b58f607b78d848b1d715f626;
static PyObject *const_tuple_str_plain_self_str_plain_universal_newlines_tuple;
static PyObject *const_str_plain_check_returncode;
static PyObject *const_tuple_049761c70f8d64139550fd3b8024294a_tuple;
extern PyObject *const_int_neg_3;
extern PyObject *const_str_plain_type;
static PyObject *const_str_plain__maxsize;
extern PyObject *const_str_plain_optimize;
static PyObject *const_str_digest_deb66f1ed83050e2e64b93d19ff3eba0;
extern PyObject *const_str_plain___cached__;
static PyObject *const_tuple_str_plain_self_str_plain_fh_str_plain_buffer_tuple;
extern PyObject *const_tuple_none_tuple;
static PyObject *const_tuple_str_plain_self_str_plain_attr_list_tuple;
extern PyObject *const_str_plain_opt;
extern PyObject *const_str_plain__warn;
static PyObject *const_str_plain__PIPE_BUF;
static PyObject *const_str_digest_cc2faf98f6cbd21153d66f0b08ef520b;
extern PyObject *const_str_digest_d26f52d432ccf199e53ad3ddfa46aa69;
static PyObject *const_str_digest_93ffc62d6616f571ceaa45141505e352;
static PyObject *const_str_digest_1e2d75506e9e2e171471d3f72a5fa834;
extern PyObject *const_int_pos_1;
static PyObject *const_str_digest_8cf228ee982ca1d76c1701e22ea65d38;
extern PyObject *const_str_plain_replace;
static PyObject *const_str_plain_GetExitCodeProcess;
static PyObject *const_str_plain_WEXITSTATUS;
static PyObject *const_str_plain__stderr_buff;
static PyObject *const_str_digest_8a04e8f481c7ca9444a23a83f56c2d84;
extern PyObject *const_str_plain_open;
static PyObject *const_str_plain_DUPLICATE_SAME_ACCESS;
extern PyObject *const_str_plain_pid;
extern PyObject *const_str_plain___prepare__;
static PyObject *const_str_digest_6589e74b142d57485b33df8d4bf5e9da;
static PyObject *const_str_plain_hStdInput;
static PyObject *const_str_plain_TerminateProcess;
static PyObject *const_str_digest_549f1a66edfa79c8b0272a3b6b8d9d50;
static PyObject *const_str_digest_24ffb4df8f6d99d30b1c0d82c11728f6;
extern PyObject *const_str_plain_write;
extern PyObject *const_str_plain___repr__;
static PyObject *const_str_digest_833b0499a7c50df55adf92e47cee19b7;
static PyObject *const_str_digest_51af6ec25e2aac315afeb32a2ca3309c;
static PyObject *const_bytes_digest_92a77d7ec5d45eaee3b796fbf5eebb91;
extern PyObject *const_str_plain_kwargs;
static PyObject *const_dict_d1e7f52ec90a7cdf0d2cc5349ac066ed;
static PyObject *const_str_digest_6d1a327b39e434d86db0dcab2f1a3781;
static PyObject *const_str_digest_e7bc3a787f33637108c4ae505936e97f;
static PyObject *const_str_plain__fileobj2output;
static PyObject *const_str_plain_dwFlags;
extern PyObject *const_str_plain_flag;
extern PyObject *const_str_plain_format;
extern PyObject *const_str_plain_property;
static PyObject *const_str_plain_SW_HIDE;
static PyObject *const_tuple_e7e46fd4bb764fd8230718c34c643b10_tuple;
static PyObject *const_str_plain_noexec;
extern PyObject *const_str_plain_threading;
static PyObject *const_str_digest_fe1b075d3056cfb43cf764c5a738a164;
static PyObject *const_tuple_8a64ed7c758b87eda350abbe0b42cdde_tuple;
static PyObject *const_str_plain_importtime;
static PyObject *const_str_digest_ffe1d577487de46eb473039cc7e4d3e0;
static PyObject *const_str_digest_d53cbfa1c290fabaad865ce93b11e777;
static PyObject *const_str_plain_sts;
static PyObject *const_str_plain_tracemalloc;
extern PyObject *const_tuple_str_space_tuple;
extern PyObject *const_str_plain___file__;
extern PyObject *const_str_plain_setter;
extern PyObject *const_str_plain_h;
static PyObject *const_str_plain_attr_list;
static PyObject *const_str_plain__save_input;
extern PyObject *const_tuple_str_chr_34_tuple;
static PyObject *const_str_plain__handle_exitstatus;
static PyObject *const_tuple_1646503210130d97fade91ad80b732e0_tuple;
static PyObject *const_str_plain_WTERMSIG;
static PyObject *const_str_plain_open_osfhandle;
static PyObject *const_tuple_str_digest_571eccf4664cb01ecea1867fcbf66f8d_tuple;
static PyObject *const_float_0_25;
extern PyObject *const_str_plain_EVENT_WRITE;
static PyObject *const_str_digest_cd49e8e73e2a29b6371b14c295709203;
extern PyObject *const_str_plain_filter;
static PyObject *const_str_plain_CloseHandle;
extern PyObject *const_str_plain_check_output;
extern PyObject *const_str_plain___stdout__;
static PyObject *const_str_plain_dev;
extern PyObject *const_str_plain_CalledProcessError;
static PyObject *const_str_digest_64262d9d765dd22583ae3b093ab328f8;
static PyObject *const_str_plain_Detach;
extern PyObject *const_str_plain_read;
static PyObject *const_tuple_50ebc68da7664988618a7f21371f1fba_tuple;
static PyObject *const_str_plain_CTRL_C_EVENT;
extern PyObject *const_str_plain_PollSelector;
extern PyObject *const_str_plain_platform;
extern PyObject *const_str_plain_PIPE;
static PyObject *const_str_plain_WIFSTOPPED;
static PyObject *const_str_digest_671f0d482711dcaa6854d3a0cc514994;
static PyObject *const_tuple_str_plain_self_str_plain_sig_tuple;
extern PyObject *const_str_plain___orig_bases__;
static PyObject *const_str_plain_STARTF_USESHOWWINDOW;
extern PyObject *const_str_plain_wb;
extern PyObject *const_str_plain_close;
extern PyObject *const_str_plain___qualname__;
static PyObject *const_tuple_b4f5f0e49ae6d02cc4f743bef79300d5_tuple;
static PyObject *const_str_plain_STILL_ACTIVE;
static PyObject *const_str_plain_showrefcount;
extern PyObject *const_str_digest_bcaecae14d8428f69f1ec08173db8ce0;
extern PyObject *const_str_plain_p;
extern PyObject *const_str_plain_value;
static PyObject *const_str_digest_654362c78432fb5fb1e872a376dbf470;
static PyObject *const_str_plain_Close;
static PyObject *const_tuple_str_plain_handle_tuple;
static PyObject *const_str_digest_db0bae7c8ec4265d177cd95885bf2b67;
static PyObject *const_str_digest_fe182f1121b0539251b21da6faaebf72;
extern PyObject *const_str_plain_e;
static PyObject *const_str_digest_02074f0e49b72edf13efe1e05bfa3e94;
static PyObject *const_str_plain__child_created;
extern PyObject *const_str_plain_exc_type;
extern PyObject *const_tuple_str_plain_self_str_plain_value_tuple;
extern PyObject *const_slice_int_neg_1_none_none;
static PyObject *const_str_plain__translate_newlines;
static PyObject *const_str_digest_77f73674b849dfbaebef9438ad08733e;
static PyObject *const_str_plain__waitpid;
extern PyObject *const_str_plain_errors;
static PyObject *const_str_digest_64c2209e0c91061515d2da3a8a8c5e6a;
static PyObject *const_tuple_a6f41dd7c64b6479154fdfcda359491a_tuple;
static PyObject *const_str_plain_CREATE_NEW_CONSOLE;
static PyObject *const_str_plain_SubprocessError;
static PyObject *const_str_digest_067feae16ba6c6d7054cdc19949cebc8;
static PyObject *const_str_plain__devnull;
static PyObject *const_str_digest_ed42f52d2cf5b3ed02ea77ba3eb9cc1a;
static PyObject *const_str_plain_IDLE_PRIORITY_CLASS;
static PyObject *const_str_plain_exitcode;
static PyObject *const_str_plain__stdout_buff;
static PyObject *const_str_plain_errread;
static PyObject *const_str_plain__get_devnull;
extern PyObject *const_str_plain_decode;
extern PyObject *const_str_plain_verbose;
static PyObject *const_str_digest_4e5d48093781680053716042e6c0ae8f;
extern PyObject *const_str_plain_buffer;
extern PyObject *const_str_plain___getitem__;
static PyObject *const_str_digest_3cf2126fcabff0e2cda546c966091d3c;
extern PyObject *const_str_plain___all__;
static PyObject *const_tuple_54550700c47664a85ad99db8afd7ef8f_tuple;
extern PyObject *const_str_plain_memoryview;
static PyObject *const_tuple_str_plain_universal_newlines_false_tuple;
static PyObject *const_str_digest_3d757e4458d6f562adb6609274396e8a;
static PyObject *const_str_plain_CREATE_NO_WINDOW;
extern PyObject *const_str_digest_c836122af34ee7a172b779f26da7801f;
static PyObject *const_tuple_str_digest_c836122af34ee7a172b779f26da7801f_tuple;
static PyObject *const_tuple_str_digest_c245c8a772b3a33119deac8565a08f57_tuple;
extern PyObject *const_str_plain_maxsize;
static PyObject *const_str_digest_0e6a2015259e836fd56329226048ed97;
static PyObject *const_str_plain_GetCurrentProcess;
extern PyObject *const_str_plain_call;
static PyObject *const_str_digest_885315c83fa89d51965111c7f94ba941;
extern PyObject *const_str_plain_rc;
extern PyObject *const_str_plain_selector;
extern PyObject *const_str_plain_text;
static PyObject *const_str_plain_text_mode;
extern PyObject *const_str_plain_origin;
static PyObject *const_str_digest_5b15356b3e57532a4751bdb812b0091e;
static PyObject *const_tuple_2f0cd8ae0d18cf50f50c0e08a3f1784e_tuple;
extern PyObject *const_tuple_none_int_0_tuple;
static PyObject *const_tuple_dea21aa990bc1774755e7d37055a00a1_tuple;
static PyObject *const_str_plain_GetStdHandle;
extern PyObject *const_str_digest_75fd71b1edada749c2ef7ac810062295;
static PyObject *const_str_plain__readerthread;
static PyObject *const_str_plain__WTERMSIG;
static PyObject *const_str_plain_STARTF_USESTDHANDLES;
extern PyObject *const_str_plain_acquire;
static PyObject *const_str_digest_121b2b9ade4ed6778d76629e1abd32c7;
extern PyObject *const_str_plain_select;
extern PyObject *const_str_plain_Thread;
static PyObject *const_str_plain__posixsubprocess;
extern PyObject *const_str_plain_delay;
extern PyObject *const_str_plain_d;
static PyObject *const_str_digest_7486a19b1011dc32401c0be752e70b18;
extern PyObject *const_str_plain_v;
static PyObject *const_str_plain__ECHILD;
static PyObject *const_str_plain_CREATE_DEFAULT_ERROR_MODE;
static PyObject *const_tuple_935322585dac22c4179d8ef098096f67_tuple;
static PyObject *const_str_plain__wait;
extern PyObject *const_str_plain_S;
static PyObject *const_str_plain_warnopts;
extern PyObject *const_str_plain_sys;
extern PyObject *const_str_plain_io;
static PyObject *const_str_plain_FILE_TYPE_CHAR;
extern PyObject *const_str_plain_dup;
extern PyObject *const_str_plain_ENOENT;
extern PyObject *const_slice_none_int_neg_1_none;
extern PyObject *const_str_plain_shell;
static PyObject *const_str_plain_EINVAL;
extern PyObject *const_str_plain_copy;
extern PyObject *const_str_plain_key;
static PyObject *const_str_plain_fork_exec;
extern PyObject *const_str_plain_quiet;
extern PyObject *const_str_plain___init__;
extern PyObject *const_bytes_chr_61;
static PyObject *const_str_digest_29b37c1962ac8c0d3a43f5fdd853deaf;
static PyObject *const_tuple_5c0aacd6bfc62532472ec1b2ebbdbfd6_tuple;
static PyObject *const_str_digest_a7fe184903448f080dd53d3fd8903dfe;
extern PyObject *const_bytes_chr_58;
extern PyObject *const_str_plain_stdin;
static PyObject *const_str_digest_7eeb7240d1d21e44dc1879ad2e2e8102;
extern PyObject *const_str_plain_process;
static PyObject *const_str_digest_feaf87b9b7d17be45ce0885d3a2e0b62;
static PyObject *const_str_plain_STARTUPINFO;
static PyObject *const_str_plain__input_offset;
extern PyObject *const_str_plain_has_location;
static PyObject *const_str_digest_7b16e795bd361a9112c3449f85ac2ce4;
extern PyObject *const_str_plain_ascii;
static PyObject *const_str_plain__PopenSelector;
extern PyObject *const_str_plain_ResourceWarning;
static PyObject *const_str_plain_ignore_environment;
extern PyObject *const_str_empty;
static PyObject *const_str_plain__WIFSTOPPED;
static PyObject *const_str_digest_4e4c098f9de9960963ee1b8db5526b4f;
extern PyObject *const_tuple_none_none_tuple;
static PyObject *const_str_plain__get_handles;
static PyObject *const_str_plain_popenargs;
extern PyObject *const_str_plain_seq;
extern PyObject *const_str_plain__input;
static PyObject *const_str_plain__deadstate;
extern PyObject *const_str_plain_fspath;
extern PyObject *const_str_plain_result;
static PyObject *const_str_plain__handle;
static PyObject *const_str_plain_terminate;
static PyObject *const_str_digest_571eccf4664cb01ecea1867fcbf66f8d;
extern PyObject *const_str_plain_traceback;
extern PyObject *const_str_plain_bytes;
static PyObject *const_str_plain_lpAttributeList;
static PyObject *const_tuple_str_digest_c2199ddfa55a575bd2b108a574a03ff2_tuple;
extern PyObject *const_int_neg_1;
extern PyObject *const_str_digest_8b4c8c81913e132a2fb432c041f3150f;
static PyObject *const_tuple_str_plain_self_str_plain_endtime_tuple;
extern PyObject *const_str_plain_get_map;
static PyObject *const_str_plain_needquote;
extern PyObject *const_str_plain_STDOUT;
static PyObject *const_str_digest_4e3a0250114d61f59638f6789662dcba;
static PyObject *const_tuple_str_plain_self_str_plain_handle_str_plain_h_tuple;
static PyObject *const_str_digest_f43f5e0af2382671e17ef2c95186da07;
static PyObject *const_str_plain_timeout_millis;
extern PyObject *const_str_plain_input;
static PyObject *const_str_plain_STD_ERROR_HANDLE;
extern PyObject *const_str_plain_ex;
extern PyObject *const_str_plain_q;
extern PyObject *const_str_plain_sleep;
static PyObject *const_str_plain__communication_started;
static PyObject *const_str_digest_14e5e85200836625f117ca82ffb5a872;
static PyObject *const_str_plain__check_timeout;
extern PyObject *const_str_plain_flush;
static PyObject *const_str_plain_xoptions;
extern PyObject *const_tuple_str_plain_monotonic_tuple;
static PyObject *const_tuple_fff35330d783c7cbe09d00630da65907_tuple;
extern PyObject *const_str_plain__cleanup;
extern PyObject *const_str_plain___doc__;
static PyObject *const_str_plain_getstatusoutput;
extern PyObject *const_str_plain_extend;
static PyObject *const_str_plain__copy;
extern PyObject *const_str_plain_data;
extern PyObject *const_tuple_str_plain_ascii_tuple;
extern PyObject *const_str_plain_fileobj;
static PyObject *const_str_plain_remaining;
extern PyObject *const_str_plain_add;
extern PyObject *const_str_plain_warnings;
static PyObject *const_str_digest_dcd462023a553d64f3f2590b895d01db;
static PyObject *const_str_digest_2386d871d226995e0c34ee5ff8d725b0;
extern PyObject *const_str_digest_b9c4baf879ebd882d40843df3a4dead7;
extern PyObject *const_str_plain_isolated;
extern PyObject *const_tuple_str_plain_self_tuple;
static PyObject *const_str_plain_orig_timeout;
extern PyObject *const_str_plain_wait;
extern PyObject *const_str_plain_subprocess;
static PyObject *const_str_plain_CTRL_BREAK_EVENT;
static PyObject *const_str_digest_4b89cb8f2efcc65423014358bf5bbcaa;
static PyObject *const_str_digest_1fe7c2f33755e78e0808f49c8f55e2fb;
static PyObject *const_str_plain__try_wait;
extern PyObject *const_tuple_empty;
static PyObject *const_str_digest_c293a5f4ec55acb4d02352a014e64c8e;
extern PyObject *const_str_space;
extern PyObject *const_str_plain_append;
extern PyObject *const_str_plain_dir;
extern PyObject *const_str_plain__winapi;
static PyObject *const_str_digest_a9baa6c4286527d268d784d318f29772;
static PyObject *const_str_plain_fh;
static PyObject *const_str_digest_48844c21ab42096c08c915c9a31d8a19;
static PyObject *const_str_plain_WAIT_OBJECT_0;
extern PyObject *const_str_plain_handle;
extern PyObject *const_str_chr_92;
static PyObject *const_tuple_661bad9cbc9a35bb6615dc0b659093ae_tuple;
static PyObject *const_str_digest_22989ef04fa2851112debbb34c367cd5;
extern PyObject *const_str_plain_warnoptions;
extern PyObject *const_str_plain_b;
extern PyObject *const_str_plain_split;
extern PyObject *const_str_plain_remove;
static PyObject *const_tuple_str_plain_STARTUPINFO_tuple_empty_tuple;
static PyObject *const_str_plain_WIFSIGNALED;
extern PyObject *const_str_plain_returncode;
extern PyObject *const_str_plain_strerror;
extern PyObject *const_tuple_str_plain_args_tuple;
static PyObject *const_str_plain_Handle;
static PyObject *const_str_plain_wait_flags;
static PyObject *const_str_plain_HIGH_PRIORITY_CLASS;
static PyObject *const_str_plain_CreatePipe;
static PyObject *const_str_plain_DuplicateHandle;
static PyObject *const_str_digest_09f66a71a4fc28a672963a6ed2ac1f83;
static PyObject *const_str_plain_line_buffering;
static PyObject *const_str_plain_sigint_timeout;
static PyObject *const_str_plain_p2cwrite;
extern PyObject *const_int_pos_1000;
extern PyObject *const_str_plain_sig;
static PyObject *const_str_digest_9872b006876be6449800507bda736085;
static PyObject *const_str_plain_msvcrt;
static PyObject *const_str_plain_getandroidapilevel;
static PyObject *const_str_plain_DETACHED_PROCESS;
extern PyObject *const_str_plain_c;
static PyObject *const_tuple_type_int_tuple;
static PyObject *const_str_angle_setcontraction;
static PyObject *const_str_plain_p2cread;
static PyObject *const_str_digest_28798c26179676c7fa1a3ff06fce120f;
extern PyObject *const_str_digest_c245c8a772b3a33119deac8565a08f57;
static PyObject *const_str_plain_faulthandler;
static PyObject *const_str_plain_handle_list;
static PyObject *const_str_plain_is_alive;
extern PyObject *const_str_plain_communicate;
extern PyObject *const_str_plain_O_RDWR;
extern PyObject *const_str_plain_dirname;
static PyObject *const_tuple_ccb354e7993a1a686857aa7debf87169_tuple;
static PyObject *const_str_digest_e096819985cef365d5caa59be5dc3e0d;
static PyObject *const_str_digest_c67562936c6fdce3db01658a88125f57;
static PyObject *const_str_digest_79ad71fbe87b58faeda4ba23873ab316;
extern PyObject *const_str_plain___class__;
extern PyObject *const_str_plain__;
extern PyObject *const_tuple_type_Exception_tuple;
extern PyObject *const_str_plain_pipe;
extern PyObject *const_str_plain_source;
extern PyObject *const_str_plain___module__;
extern PyObject *const_str_plain___str__;
extern PyObject *const_str_plain_chunk;
static PyObject *const_str_plain_endtime;
extern PyObject *const_str_plain_utf8;
extern PyObject *const_str_plain_debug;
extern PyObject *const_str_plain_events;
static PyObject *const_str_plain_Lock;
static PyObject *const_str_digest_2d9aade0afb2c93d441372ae2b274606;
extern PyObject *const_str_plain_cmd;
static PyObject *const_str_digest_f63dd4474459d20b2148cad38ff3a3a4;
extern PyObject *const_str_plain_O;
static PyObject *const_tuple_99b88f8bafa923a962cefb9576dd6911_tuple;
extern PyObject *const_str_plain_target;
extern PyObject *const_str_digest_439d1398e2f3d2739cafa9b75372a63f;
static PyObject *const_str_plain_SIGTERM;
static PyObject *const_dict_22c19d2ba6a30c2bc2d52043b2a0b7a3;
static PyObject *const_str_plain__WIFEXITED;
static PyObject *const_tuple_str_plain_cmd_tuple;
static PyObject *const_str_digest_f58f57a774a6a0292157f8096bb67059;
extern PyObject *const_str_plain_DEVNULL;
static PyObject *const_str_plain__optim_args_from_interpreter_flags;
static PyObject *const_tuple_14ea0634846f7a7bf710e42f8a23be2c_tuple;
extern PyObject *const_str_plain_get;
extern PyObject *const_list_empty;
static PyObject *const_str_plain_stdout_thread;
extern PyObject *const_str_plain_no_site;
static PyObject *const_str_plain__WSTOPSIG;
extern PyObject *const_str_plain_daemon;
static PyObject *const_str_plain_c2pread;
extern PyObject *const_str_plain_executable;
extern PyObject *const_str_plain_win32;
static PyObject *const_str_digest_7823c80713f79a3a1017f8e4a72a1d94;
static PyObject *const_str_plain__GetExitCodeProcess;
static PyObject *const_dict_0c016cbcf3a29fcfbd4e8161e127568c;
extern PyObject *const_str_plain_warn;
static PyObject *const_tuple_str_digest_4e3a0250114d61f59638f6789662dcba_tuple;
static PyObject *const_tuple_str_digest_885315c83fa89d51965111c7f94ba941_tuple;
extern PyObject *const_str_plain_run;
static PyObject *const_str_digest_166f9097b3e951eb97a38979661ad5f0;
extern PyObject *const_str_plain_metaclass;
static PyObject *const_tuple_str_digest_14e5e85200836625f117ca82ffb5a872_tuple;
static PyObject *const_float_0_0005;
static PyObject *const_tuple_str_digest_1e2d75506e9e2e171471d3f72a5fa834_tuple;
extern PyObject *const_tuple_str_plain___class___tuple;
extern PyObject *const_tuple_false_tuple;
extern PyObject *const_str_angle_metaclass;
static PyObject *const_str_plain_bytes_warning;
extern PyObject *const_str_plain_arg;
extern PyObject *const_tuple_str_chr_13_str_newline_tuple;
extern PyObject *const_str_plain_args;
static PyObject *const_str_plain_check_call;
extern PyObject *const_str_plain___exit__;
static PyObject *const_str_plain__make_inheritable;
static PyObject *const_str_digest_b0f9489f19895430140f8c443e5e12cc;
static PyObject *const_tuple_str_plain_self_str_plain_input_tuple;
static PyObject *const_str_digest_c2199ddfa55a575bd2b108a574a03ff2;
static PyObject *const_str_plain__WAIT_OBJECT_0;
static PyObject *const_str_plain_WIFEXITED;
extern PyObject *const_str_plain_ready;
static PyObject *const_dict_073457380201d8dc13a75e4bf4f18aab;
extern PyObject *const_str_plain_items;
static PyObject *const_str_digest_c3c4dae216dc74ce02c15a7aab8a2cb4;
static PyObject *const_tuple_str_plain_self_str_plain_rc_tuple;
static PyObject *const_str_plain__WaitForSingleObject;
extern PyObject *const_str_plain_signal;
static PyObject *const_str_digest_f4fe94d7cfc53f3b8f1f9e21a8236719;
static PyObject *const_str_plain__sigint_wait_secs;
extern PyObject *const_str_plain___enter__;
static PyObject *const_str_plain_input_view;
static PyObject *const_str_digest_8ec5ae439f87f3f0c243fb8d22338d95;
extern PyObject *const_str_plain_join;
static PyObject *const_str_plain_universal_newlines;
static PyObject *const_str_plain_kill;
extern PyObject *const_str_plain_res;
static PyObject *const_list_2de1e2426e82522523b314e32dc118d0_list;
static PyObject *const_str_digest_64e76603765a4738675c6641b73cb9a4;
extern PyObject *const_str_plain_environ;
static PyObject *const_str_plain_SIGKILL;
static PyObject *const_tuple_31560b4570051a8862725158ecfbeb2d_tuple;
static PyObject *const_str_plain_BELOW_NORMAL_PRIORITY_CLASS;
static PyObject *const_str_digest_efdf129abd1c7a9613b43bdd2cdb76ca;
extern PyObject *const_str_plain_devnull;
extern PyObject *const_str_plain_release;
static PyObject *const_str_digest_e1960ce654cb854d574db0763ef9f0c9;
extern PyObject *const_str_plain_int;
static PyObject *const_str_digest_d2dd934860f14f99585c78ba1e12ccb4;
static PyObject *const_str_digest_95b6ea17ae512e14a9afdf83d45b254e;
static PyObject *const_str_digest_c1c4cc87478b3ab151a2911bde978276;
static PyObject *const_str_digest_32c9e04a9bd5680040a0920d9760bb51;
static PyObject *const_tuple_fb54ea688cc17622d0908c7f61795e76_tuple;
extern PyObject *const_str_chr_13;
static PyObject *const_str_digest_6c198d899a8b04cb613a55f20364551d;
static PyObject *const_tuple_cf15e362698fabb360ad29cd5431b46a_tuple;
extern PyObject *const_str_plain_rb;
extern PyObject *const_str_plain_fd;
static PyObject *const_str_plain__mswindows;
extern PyObject *const_str_plain_TimeoutExpired;
extern PyObject *const_str_plain_stderr;
extern PyObject *const_str_plain_issubclass;
static PyObject *const_str_digest_5dfadc7c87bc4f008360fea2b750683b;
static PyObject *const_str_plain_getoutput;
static PyObject *const_str_digest_0a633d267f972c6e0c6b9540b7fcf4fa;
static PyObject *const_str_plain_INFINITE;
static PyObject *const_str_plain_capture_output;
static PyObject *const_str_plain__remaining_time;
static PyObject *const_str_plain_dont_write_bytecode;
static PyObject *const_str_plain__active;
static PyObject *const_str_plain_WAIT_TIMEOUT;
extern PyObject *const_str_plain_list2cmdline;
static PyObject *const_tuple_str_plain_self_str_plain_endtime_str_plain_orig_timeout_tuple;
static PyObject *const_str_digest_b364aa0abc3244518b37748082f33aee;
static PyObject *const_str_digest_c52570f1e4c4b8688cc11fd57b87de93;
static PyObject *const_tuple_str_plain_self_str_plain_handle_list_tuple;
static PyObject *const_tuple_910481b0a4c3ef57eddfaac737d27911_tuple;
extern PyObject *const_str_plain_output;
static PyObject *const_tuple_str_plain_self_str_plain_CloseHandle_tuple;
extern PyObject *const_str_plain_encoding;
extern PyObject *const_str_plain_count;
static PyObject *const_str_plain_retcode;
static PyObject *const_tuple_9d53b184c0a5bb37c7eb8baced87290a_tuple;
extern PyObject *const_str_plain_selectors;
static PyObject *const_str_digest_d4cf3b1ab6270b5f4023d8f76f66fb62;
static PyObject *const_str_digest_f7cc3ebb17bcca148e03473a571dfdea;
static PyObject *const_str_plain_flag_opt_map;
static PyObject *const_str_digest_927c83f65f23dc939b13cf98a20b74de;
static PyObject *const_float_0_05;
static PyObject *const_str_plain_WaitForSingleObject;
extern PyObject *const_int_pos_32768;
extern PyObject *const_bytes_empty;
extern PyObject *const_str_plain_monotonic;
static PyObject *const_str_digest_ff62834d72b88ff76d329084e1313437;
static PyObject *const_str_digest_b2039696d546f34d83614019cb0ad468;
static PyObject *const_str_digest_99c68c9315a477a5c8bc86e0cf57cf7c;
extern PyObject *const_tuple_type_object_tuple;
extern PyObject *const_tuple_str_digest_7ca129d2d421fe965ad48cbb290b579b_str_newline_tuple;
static PyObject *const_str_digest_01cd7c708ecfb9de8b6cc9427d24ca89;
static PyObject *const_tuple_e544aafec9de467b5b69acb717e74e6d_tuple;
static PyObject *const_str_digest_cad0983096c75ec466fc8048e9db576d;
static PyObject *const_list_fdef13c4c35998d41daafbf2cb2f200f_list;
extern PyObject *const_str_plain_exc;
static PyObject *const_str_plain_errwrite;
extern PyObject *const_str_digest_7ca129d2d421fe965ad48cbb290b579b;
extern PyObject *const_str_newline;
static PyObject *const_tuple_bytes_chr_58_int_pos_2_tuple;
extern PyObject *const_str_chr_34;
static PyObject *const_str_plain_STD_OUTPUT_HANDLE;
extern PyObject *const_int_pos_3;
static PyObject *const_str_digest_5d726b70cb8fe8b5fcc08d6baecaf12d;
extern PyObject *const_str_plain_Signals;
static PyObject *const_str_digest_d9cffe6f287cc82f3b2a6b7bfea4bc0e;
extern PyObject *const_str_plain_self;
extern PyObject *const_str_plain_inst;
extern PyObject *const_slice_none_none_none;
extern PyObject *const_str_plain_TextIOWrapper;
static PyObject *const_str_plain_hStdError;
extern PyObject *const_bytes_chr_48;
static PyObject *const_str_plain_NORMAL_PRIORITY_CLASS;
static PyObject *const_tuple_str_plain_cmd_str_plain_data_str_plain_exitcode_str_plain_ex_tuple;
static PyObject *const_tuple_f457fab1f66c6184eb685077fc2b03b6_tuple;
static PyObject *const_str_plain__waitpid_lock;
extern PyObject *const_int_pos_2;
static PyObject *const_str_plain_CompletedProcess;
static PyObject *const_str_digest_aba692270bbf18608b3180d8e88dacf3;
extern PyObject *const_str_plain_poll;
static PyObject *const_tuple_c048319f0716cd20701fbaaff129a45d_tuple;
static PyObject *const_str_plain__WIFSIGNALED;
static PyObject *const_tuple_7ef29b82f1cb69b263e2866742e2862b_tuple;
static PyObject *const_dict_a5979bd3e78699eae28243cd65531cb5;
static PyObject *module_filename_obj;

/* Indicator if this modules private constants were created yet. */
static bool constants_created = false;

/* Function to create module private constants. */
static void createModuleConstants( void )
{
    const_str_plain__filter_handle_list = UNSTREAM_STRING_ASCII( &constant_bin[ 1045586 ], 19, 1 );
    const_str_plain_c2pwrite = UNSTREAM_STRING_ASCII( &constant_bin[ 1045605 ], 8, 1 );
    const_str_plain__communicate = UNSTREAM_STRING_ASCII( &constant_bin[ 1045613 ], 12, 1 );
    const_str_plain__args_from_interpreter_flags = UNSTREAM_STRING_ASCII( &constant_bin[ 1045625 ], 28, 1 );
    const_tuple_str_plain_timeout_str_plain_popenargs_str_plain_kwargs_tuple = PyTuple_New( 3 );
    PyTuple_SET_ITEM( const_tuple_str_plain_timeout_str_plain_popenargs_str_plain_kwargs_tuple, 0, const_str_plain_timeout ); Py_INCREF( const_str_plain_timeout );
    const_str_plain_popenargs = UNSTREAM_STRING_ASCII( &constant_bin[ 1045653 ], 9, 1 );
    PyTuple_SET_ITEM( const_tuple_str_plain_timeout_str_plain_popenargs_str_plain_kwargs_tuple, 1, const_str_plain_popenargs ); Py_INCREF( const_str_plain_popenargs );
    PyTuple_SET_ITEM( const_tuple_str_plain_timeout_str_plain_popenargs_str_plain_kwargs_tuple, 2, const_str_plain_kwargs ); Py_INCREF( const_str_plain_kwargs );
    const_tuple_str_plain_self_str_plain_input_str_plain_exc_tuple = PyTuple_New( 3 );
    PyTuple_SET_ITEM( const_tuple_str_plain_self_str_plain_input_str_plain_exc_tuple, 0, const_str_plain_self ); Py_INCREF( const_str_plain_self );
    PyTuple_SET_ITEM( const_tuple_str_plain_self_str_plain_input_str_plain_exc_tuple, 1, const_str_plain_input ); Py_INCREF( const_str_plain_input );
    PyTuple_SET_ITEM( const_tuple_str_plain_self_str_plain_input_str_plain_exc_tuple, 2, const_str_plain_exc ); Py_INCREF( const_str_plain_exc );
    const_str_plain_PIPE_BUF = UNSTREAM_STRING_ASCII( &constant_bin[ 1045662 ], 8, 1 );
    const_str_plain_stderr_thread = UNSTREAM_STRING_ASCII( &constant_bin[ 1045670 ], 13, 1 );
    const_tuple_c9e8fa414d034df4031fc4111ed36a42_tuple = PyTuple_New( 4 );
    PyTuple_SET_ITEM( const_tuple_c9e8fa414d034df4031fc4111ed36a42_tuple, 0, const_str_plain_self ); Py_INCREF( const_str_plain_self );
    PyTuple_SET_ITEM( const_tuple_c9e8fa414d034df4031fc4111ed36a42_tuple, 1, const_str_plain_exc_type ); Py_INCREF( const_str_plain_exc_type );
    PyTuple_SET_ITEM( const_tuple_c9e8fa414d034df4031fc4111ed36a42_tuple, 2, const_str_plain_value ); Py_INCREF( const_str_plain_value );
    PyTuple_SET_ITEM( const_tuple_c9e8fa414d034df4031fc4111ed36a42_tuple, 3, const_str_plain_traceback ); Py_INCREF( const_str_plain_traceback );
    const_int_pos_50000 = PyLong_FromUnsignedLong( 50000ul );
    const_str_digest_a18273144a57c4519b4c0da4d8a57d6c = UNSTREAM_STRING_ASCII( &constant_bin[ 1045683 ], 14, 0 );
    const_tuple_int_neg_1_int_neg_1_int_neg_1_int_neg_1_int_neg_1_int_neg_1_tuple = PyTuple_New( 6 );
    PyTuple_SET_ITEM( const_tuple_int_neg_1_int_neg_1_int_neg_1_int_neg_1_int_neg_1_int_neg_1_tuple, 0, const_int_neg_1 ); Py_INCREF( const_int_neg_1 );
    PyTuple_SET_ITEM( const_tuple_int_neg_1_int_neg_1_int_neg_1_int_neg_1_int_neg_1_int_neg_1_tuple, 1, const_int_neg_1 ); Py_INCREF( const_int_neg_1 );
    PyTuple_SET_ITEM( const_tuple_int_neg_1_int_neg_1_int_neg_1_int_neg_1_int_neg_1_int_neg_1_tuple, 2, const_int_neg_1 ); Py_INCREF( const_int_neg_1 );
    PyTuple_SET_ITEM( const_tuple_int_neg_1_int_neg_1_int_neg_1_int_neg_1_int_neg_1_int_neg_1_tuple, 3, const_int_neg_1 ); Py_INCREF( const_int_neg_1 );
    PyTuple_SET_ITEM( const_tuple_int_neg_1_int_neg_1_int_neg_1_int_neg_1_int_neg_1_int_neg_1_tuple, 4, const_int_neg_1 ); Py_INCREF( const_int_neg_1 );
    PyTuple_SET_ITEM( const_tuple_int_neg_1_int_neg_1_int_neg_1_int_neg_1_int_neg_1_int_neg_1_tuple, 5, const_int_neg_1 ); Py_INCREF( const_int_neg_1 );
    const_str_plain_hStdOutput = UNSTREAM_STRING_ASCII( &constant_bin[ 1045697 ], 10, 1 );
    const_str_digest_6c36c7bffe6106b4899f065ba37e0541 = UNSTREAM_STRING_ASCII( &constant_bin[ 1045707 ], 42, 0 );
    const_str_digest_50731d62964f79d5fbaa6d7d14ba78dc = UNSTREAM_STRING_ASCII( &constant_bin[ 1045749 ], 18, 0 );
    const_str_digest_90a82a8b07cad57e858e4baab680e96c = UNSTREAM_STRING_ASCII( &constant_bin[ 1045767 ], 15, 0 );
    const_dict_e546620670da4aad7a6759469fad34a0 = _PyDict_NewPresized( 4 );
    PyDict_SetItem( const_dict_e546620670da4aad7a6759469fad34a0, const_str_plain_input, Py_None );
    const_str_plain_capture_output = UNSTREAM_STRING_ASCII( &constant_bin[ 1045782 ], 14, 1 );
    PyDict_SetItem( const_dict_e546620670da4aad7a6759469fad34a0, const_str_plain_capture_output, Py_False );
    PyDict_SetItem( const_dict_e546620670da4aad7a6759469fad34a0, const_str_plain_timeout, Py_None );
    PyDict_SetItem( const_dict_e546620670da4aad7a6759469fad34a0, const_str_plain_check, Py_False );
    assert( PyDict_Size( const_dict_e546620670da4aad7a6759469fad34a0 ) == 4 );
    const_str_digest_c2f9c4fb5ab6dcd3948ba0f41215e217 = UNSTREAM_STRING_ASCII( &constant_bin[ 1045796 ], 758, 0 );
    const_str_digest_1e4edad453cfaa12c0e57ca62e3ae4d6 = UNSTREAM_STRING_ASCII( &constant_bin[ 1046554 ], 39, 0 );
    const_str_digest_6a5c73467512a55bc94316b05a6227e5 = UNSTREAM_STRING_ASCII( &constant_bin[ 1046593 ], 10, 0 );
    const_str_digest_9b7f493a6ae9d7d25f0b01787918ea86 = UNSTREAM_STRING_ASCII( &constant_bin[ 1046603 ], 34, 0 );
    const_str_digest_35f84ffd5f8558a1b8bb435acb0aabe1 = UNSTREAM_STRING_ASCII( &constant_bin[ 1046637 ], 15, 0 );
    const_str_plain_dev_mode = UNSTREAM_STRING_ASCII( &constant_bin[ 1046652 ], 8, 1 );
    const_tuple_str_digest_24ffb4df8f6d99d30b1c0d82c11728f6_str_plain_dev_tuple = PyTuple_New( 2 );
    const_str_digest_24ffb4df8f6d99d30b1c0d82c11728f6 = UNSTREAM_STRING_ASCII( &constant_bin[ 458480 ], 2, 0 );
    PyTuple_SET_ITEM( const_tuple_str_digest_24ffb4df8f6d99d30b1c0d82c11728f6_str_plain_dev_tuple, 0, const_str_digest_24ffb4df8f6d99d30b1c0d82c11728f6 ); Py_INCREF( const_str_digest_24ffb4df8f6d99d30b1c0d82c11728f6 );
    const_str_plain_dev = UNSTREAM_STRING_ASCII( &constant_bin[ 116790 ], 3, 1 );
    PyTuple_SET_ITEM( const_tuple_str_digest_24ffb4df8f6d99d30b1c0d82c11728f6_str_plain_dev_tuple, 1, const_str_plain_dev ); Py_INCREF( const_str_plain_dev );
    const_str_digest_6bfbca1b772b87689ce29d96787e292d = UNSTREAM_STRING_ASCII( &constant_bin[ 1046660 ], 25, 0 );
    const_str_digest_04075ac2a07d98a51e5d2365cf949798 = UNSTREAM_STRING_ASCII( &constant_bin[ 1046685 ], 54, 0 );
    const_str_plain_write_through = UNSTREAM_STRING_ASCII( &constant_bin[ 1046739 ], 13, 1 );
    const_tuple_str_plain_args_str_plain_value_tuple = PyTuple_New( 2 );
    PyTuple_SET_ITEM( const_tuple_str_plain_args_str_plain_value_tuple, 0, const_str_plain_args ); Py_INCREF( const_str_plain_args );
    PyTuple_SET_ITEM( const_tuple_str_plain_args_str_plain_value_tuple, 1, const_str_plain_value ); Py_INCREF( const_str_plain_value );
    const_str_digest_20717f32ff2e8fa49a275f684313d4c7 = UNSTREAM_STRING_ASCII( &constant_bin[ 1046752 ], 26, 0 );
    const_tuple_a1f6990a259f63871d04a0031479ef59_tuple = PyTuple_New( 5 );
    PyTuple_SET_ITEM( const_tuple_a1f6990a259f63871d04a0031479ef59_tuple, 0, const_str_plain_self ); Py_INCREF( const_str_plain_self );
    PyTuple_SET_ITEM( const_tuple_a1f6990a259f63871d04a0031479ef59_tuple, 1, const_str_plain_returncode ); Py_INCREF( const_str_plain_returncode );
    PyTuple_SET_ITEM( const_tuple_a1f6990a259f63871d04a0031479ef59_tuple, 2, const_str_plain_cmd ); Py_INCREF( const_str_plain_cmd );
    PyTuple_SET_ITEM( const_tuple_a1f6990a259f63871d04a0031479ef59_tuple, 3, const_str_plain_output ); Py_INCREF( const_str_plain_output );
    PyTuple_SET_ITEM( const_tuple_a1f6990a259f63871d04a0031479ef59_tuple, 4, const_str_plain_stderr ); Py_INCREF( const_str_plain_stderr );
    const_str_plain__internal_poll = UNSTREAM_STRING_ASCII( &constant_bin[ 1046778 ], 14, 1 );
    const_tuple_e34addb639ceb9dc9a4cc0882e121f30_tuple = PyTuple_New( 11 );
    const_str_plain_flag_opt_map = UNSTREAM_STRING_ASCII( &constant_bin[ 1046792 ], 12, 1 );
    PyTuple_SET_ITEM( const_tuple_e34addb639ceb9dc9a4cc0882e121f30_tuple, 0, const_str_plain_flag_opt_map ); Py_INCREF( const_str_plain_flag_opt_map );
    PyTuple_SET_ITEM( const_tuple_e34addb639ceb9dc9a4cc0882e121f30_tuple, 1, const_str_plain_args ); Py_INCREF( const_str_plain_args );
    PyTuple_SET_ITEM( const_tuple_e34addb639ceb9dc9a4cc0882e121f30_tuple, 2, const_str_plain_flag ); Py_INCREF( const_str_plain_flag );
    PyTuple_SET_ITEM( const_tuple_e34addb639ceb9dc9a4cc0882e121f30_tuple, 3, const_str_plain_opt ); Py_INCREF( const_str_plain_opt );
    PyTuple_SET_ITEM( const_tuple_e34addb639ceb9dc9a4cc0882e121f30_tuple, 4, const_str_plain_v ); Py_INCREF( const_str_plain_v );
    const_str_plain_warnopts = UNSTREAM_STRING_ASCII( &constant_bin[ 1046804 ], 8, 1 );
    PyTuple_SET_ITEM( const_tuple_e34addb639ceb9dc9a4cc0882e121f30_tuple, 5, const_str_plain_warnopts ); Py_INCREF( const_str_plain_warnopts );
    const_str_plain_bytes_warning = UNSTREAM_STRING_ASCII( &constant_bin[ 1046812 ], 13, 1 );
    PyTuple_SET_ITEM( const_tuple_e34addb639ceb9dc9a4cc0882e121f30_tuple, 6, const_str_plain_bytes_warning ); Py_INCREF( const_str_plain_bytes_warning );
    const_str_plain_xoptions = UNSTREAM_STRING_ASCII( &constant_bin[ 1046825 ], 8, 1 );
    PyTuple_SET_ITEM( const_tuple_e34addb639ceb9dc9a4cc0882e121f30_tuple, 7, const_str_plain_xoptions ); Py_INCREF( const_str_plain_xoptions );
    PyTuple_SET_ITEM( const_tuple_e34addb639ceb9dc9a4cc0882e121f30_tuple, 8, const_str_plain_dev_mode ); Py_INCREF( const_str_plain_dev_mode );
    PyTuple_SET_ITEM( const_tuple_e34addb639ceb9dc9a4cc0882e121f30_tuple, 9, const_str_plain_value ); Py_INCREF( const_str_plain_value );
    PyTuple_SET_ITEM( const_tuple_e34addb639ceb9dc9a4cc0882e121f30_tuple, 10, const_str_plain_arg ); Py_INCREF( const_str_plain_arg );
    const_str_plain_bs_buf = UNSTREAM_STRING_ASCII( &constant_bin[ 1046833 ], 6, 1 );
    const_tuple_0b4b80302a0dd2641ae2bccda19bd994_tuple = PyTuple_New( 18 );
    const_str_plain_CREATE_NEW_CONSOLE = UNSTREAM_STRING_ASCII( &constant_bin[ 1046839 ], 18, 1 );
    PyTuple_SET_ITEM( const_tuple_0b4b80302a0dd2641ae2bccda19bd994_tuple, 0, const_str_plain_CREATE_NEW_CONSOLE ); Py_INCREF( const_str_plain_CREATE_NEW_CONSOLE );
    const_str_plain_CREATE_NEW_PROCESS_GROUP = UNSTREAM_STRING_ASCII( &constant_bin[ 1046857 ], 24, 1 );
    PyTuple_SET_ITEM( const_tuple_0b4b80302a0dd2641ae2bccda19bd994_tuple, 1, const_str_plain_CREATE_NEW_PROCESS_GROUP ); Py_INCREF( const_str_plain_CREATE_NEW_PROCESS_GROUP );
    const_str_plain_STD_INPUT_HANDLE = UNSTREAM_STRING_ASCII( &constant_bin[ 1046881 ], 16, 1 );
    PyTuple_SET_ITEM( const_tuple_0b4b80302a0dd2641ae2bccda19bd994_tuple, 2, const_str_plain_STD_INPUT_HANDLE ); Py_INCREF( const_str_plain_STD_INPUT_HANDLE );
    const_str_plain_STD_OUTPUT_HANDLE = UNSTREAM_STRING_ASCII( &constant_bin[ 1046897 ], 17, 1 );
    PyTuple_SET_ITEM( const_tuple_0b4b80302a0dd2641ae2bccda19bd994_tuple, 3, const_str_plain_STD_OUTPUT_HANDLE ); Py_INCREF( const_str_plain_STD_OUTPUT_HANDLE );
    const_str_plain_STD_ERROR_HANDLE = UNSTREAM_STRING_ASCII( &constant_bin[ 1046914 ], 16, 1 );
    PyTuple_SET_ITEM( const_tuple_0b4b80302a0dd2641ae2bccda19bd994_tuple, 4, const_str_plain_STD_ERROR_HANDLE ); Py_INCREF( const_str_plain_STD_ERROR_HANDLE );
    const_str_plain_SW_HIDE = UNSTREAM_STRING_ASCII( &constant_bin[ 1046930 ], 7, 1 );
    PyTuple_SET_ITEM( const_tuple_0b4b80302a0dd2641ae2bccda19bd994_tuple, 5, const_str_plain_SW_HIDE ); Py_INCREF( const_str_plain_SW_HIDE );
    const_str_plain_STARTF_USESTDHANDLES = UNSTREAM_STRING_ASCII( &constant_bin[ 1046937 ], 20, 1 );
    PyTuple_SET_ITEM( const_tuple_0b4b80302a0dd2641ae2bccda19bd994_tuple, 6, const_str_plain_STARTF_USESTDHANDLES ); Py_INCREF( const_str_plain_STARTF_USESTDHANDLES );
    const_str_plain_STARTF_USESHOWWINDOW = UNSTREAM_STRING_ASCII( &constant_bin[ 1046957 ], 20, 1 );
    PyTuple_SET_ITEM( const_tuple_0b4b80302a0dd2641ae2bccda19bd994_tuple, 7, const_str_plain_STARTF_USESHOWWINDOW ); Py_INCREF( const_str_plain_STARTF_USESHOWWINDOW );
    const_str_plain_ABOVE_NORMAL_PRIORITY_CLASS = UNSTREAM_STRING_ASCII( &constant_bin[ 1046977 ], 27, 1 );
    PyTuple_SET_ITEM( const_tuple_0b4b80302a0dd2641ae2bccda19bd994_tuple, 8, const_str_plain_ABOVE_NORMAL_PRIORITY_CLASS ); Py_INCREF( const_str_plain_ABOVE_NORMAL_PRIORITY_CLASS );
    const_str_plain_BELOW_NORMAL_PRIORITY_CLASS = UNSTREAM_STRING_ASCII( &constant_bin[ 1047004 ], 27, 1 );
    PyTuple_SET_ITEM( const_tuple_0b4b80302a0dd2641ae2bccda19bd994_tuple, 9, const_str_plain_BELOW_NORMAL_PRIORITY_CLASS ); Py_INCREF( const_str_plain_BELOW_NORMAL_PRIORITY_CLASS );
    const_str_plain_HIGH_PRIORITY_CLASS = UNSTREAM_STRING_ASCII( &constant_bin[ 1047031 ], 19, 1 );
    PyTuple_SET_ITEM( const_tuple_0b4b80302a0dd2641ae2bccda19bd994_tuple, 10, const_str_plain_HIGH_PRIORITY_CLASS ); Py_INCREF( const_str_plain_HIGH_PRIORITY_CLASS );
    const_str_plain_IDLE_PRIORITY_CLASS = UNSTREAM_STRING_ASCII( &constant_bin[ 1047050 ], 19, 1 );
    PyTuple_SET_ITEM( const_tuple_0b4b80302a0dd2641ae2bccda19bd994_tuple, 11, const_str_plain_IDLE_PRIORITY_CLASS ); Py_INCREF( const_str_plain_IDLE_PRIORITY_CLASS );
    const_str_plain_NORMAL_PRIORITY_CLASS = UNSTREAM_STRING_ASCII( &constant_bin[ 1046983 ], 21, 1 );
    PyTuple_SET_ITEM( const_tuple_0b4b80302a0dd2641ae2bccda19bd994_tuple, 12, const_str_plain_NORMAL_PRIORITY_CLASS ); Py_INCREF( const_str_plain_NORMAL_PRIORITY_CLASS );
    const_str_plain_REALTIME_PRIORITY_CLASS = UNSTREAM_STRING_ASCII( &constant_bin[ 1047069 ], 23, 1 );
    PyTuple_SET_ITEM( const_tuple_0b4b80302a0dd2641ae2bccda19bd994_tuple, 13, const_str_plain_REALTIME_PRIORITY_CLASS ); Py_INCREF( const_str_plain_REALTIME_PRIORITY_CLASS );
    const_str_plain_CREATE_NO_WINDOW = UNSTREAM_STRING_ASCII( &constant_bin[ 1047092 ], 16, 1 );
    PyTuple_SET_ITEM( const_tuple_0b4b80302a0dd2641ae2bccda19bd994_tuple, 14, const_str_plain_CREATE_NO_WINDOW ); Py_INCREF( const_str_plain_CREATE_NO_WINDOW );
    const_str_plain_DETACHED_PROCESS = UNSTREAM_STRING_ASCII( &constant_bin[ 1047108 ], 16, 1 );
    PyTuple_SET_ITEM( const_tuple_0b4b80302a0dd2641ae2bccda19bd994_tuple, 15, const_str_plain_DETACHED_PROCESS ); Py_INCREF( const_str_plain_DETACHED_PROCESS );
    const_str_plain_CREATE_DEFAULT_ERROR_MODE = UNSTREAM_STRING_ASCII( &constant_bin[ 1047124 ], 25, 1 );
    PyTuple_SET_ITEM( const_tuple_0b4b80302a0dd2641ae2bccda19bd994_tuple, 16, const_str_plain_CREATE_DEFAULT_ERROR_MODE ); Py_INCREF( const_str_plain_CREATE_DEFAULT_ERROR_MODE );
    const_str_plain_CREATE_BREAKAWAY_FROM_JOB = UNSTREAM_STRING_ASCII( &constant_bin[ 1047149 ], 25, 1 );
    PyTuple_SET_ITEM( const_tuple_0b4b80302a0dd2641ae2bccda19bd994_tuple, 17, const_str_plain_CREATE_BREAKAWAY_FROM_JOB ); Py_INCREF( const_str_plain_CREATE_BREAKAWAY_FROM_JOB );
    const_str_plain_get_exec_path = UNSTREAM_STRING_ASCII( &constant_bin[ 1047174 ], 13, 1 );
    const_str_plain_CreateProcess = UNSTREAM_STRING_ASCII( &constant_bin[ 1047187 ], 13, 1 );
    const_str_digest_ba4c66db524f9f7ea35f9ca80bb0f03a = UNSTREAM_STRING_ASCII( &constant_bin[ 1047200 ], 43, 0 );
    const_str_digest_0abfbff0054faa56a9b013b694deb65a = UNSTREAM_STRING_ASCII( &constant_bin[ 1047243 ], 222, 0 );
    const_tuple_ecea41d9618568317bd7dde90480efa5_tuple = PyTuple_New( 3 );
    PyTuple_SET_ITEM( const_tuple_ecea41d9618568317bd7dde90480efa5_tuple, 0, const_str_digest_b9c4baf879ebd882d40843df3a4dead7 ); Py_INCREF( const_str_digest_b9c4baf879ebd882d40843df3a4dead7 );
    PyTuple_SET_ITEM( const_tuple_ecea41d9618568317bd7dde90480efa5_tuple, 1, const_str_plain_dir ); Py_INCREF( const_str_plain_dir );
    PyTuple_SET_ITEM( const_tuple_ecea41d9618568317bd7dde90480efa5_tuple, 2, const_str_plain_executable ); Py_INCREF( const_str_plain_executable );
    const_str_digest_b24355a78cfa4ecb206db6eb94a902c2 = UNSTREAM_STRING_ASCII( &constant_bin[ 1047465 ], 22, 0 );
    const_str_plain__execute_child = UNSTREAM_STRING_ASCII( &constant_bin[ 1047487 ], 14, 1 );
    const_tuple_str_digest_9b7f493a6ae9d7d25f0b01787918ea86_tuple = PyTuple_New( 1 );
    PyTuple_SET_ITEM( const_tuple_str_digest_9b7f493a6ae9d7d25f0b01787918ea86_tuple, 0, const_str_digest_9b7f493a6ae9d7d25f0b01787918ea86 ); Py_INCREF( const_str_digest_9b7f493a6ae9d7d25f0b01787918ea86 );
    const_tuple_int_neg_1_int_neg_1_tuple = PyTuple_New( 2 );
    PyTuple_SET_ITEM( const_tuple_int_neg_1_int_neg_1_tuple, 0, const_int_neg_1 ); Py_INCREF( const_int_neg_1 );
    PyTuple_SET_ITEM( const_tuple_int_neg_1_int_neg_1_tuple, 1, const_int_neg_1 ); Py_INCREF( const_int_neg_1 );
    const_str_plain_ECHILD = UNSTREAM_STRING_ASCII( &constant_bin[ 1047501 ], 6, 1 );
    const_str_digest_74856fc69b8683094c7bb7799fd12a5d = UNSTREAM_STRING_ASCII( &constant_bin[ 1047507 ], 51, 0 );
    const_str_plain_showalloccount = UNSTREAM_STRING_ASCII( &constant_bin[ 1047558 ], 14, 1 );
    const_str_plain_GetFileType = UNSTREAM_STRING_ASCII( &constant_bin[ 1047572 ], 11, 1 );
    const_str_plain_WSTOPSIG = UNSTREAM_STRING_ASCII( &constant_bin[ 1047583 ], 8, 1 );
    const_str_plain__WEXITSTATUS = UNSTREAM_STRING_ASCII( &constant_bin[ 1047591 ], 12, 1 );
    const_str_digest_eb773ccb8bd268b82caeedc82ba70185 = UNSTREAM_STRING_ASCII( &constant_bin[ 1047603 ], 1173, 0 );
    const_str_plain__WNOHANG = UNSTREAM_STRING_ASCII( &constant_bin[ 1048776 ], 8, 1 );
    const_str_digest_bc5a75fca86ecfaf571f8d5223e48666 = UNSTREAM_STRING_ASCII( &constant_bin[ 1048784 ], 50, 0 );
    const_str_digest_013753546732b33c34f2ebb05638c59c = UNSTREAM_STRING_ASCII( &constant_bin[ 1048834 ], 917, 0 );
    const_str_plain__closed_child_pipe_fds = UNSTREAM_STRING_ASCII( &constant_bin[ 1049751 ], 22, 1 );
    const_str_plain_COMSPEC = UNSTREAM_STRING_ASCII( &constant_bin[ 1049773 ], 7, 1 );
    const_str_plain_wShowWindow = UNSTREAM_STRING_ASCII( &constant_bin[ 1049780 ], 11, 1 );
    const_str_digest_5b563e342c6fb75d214ffb280a2e5464 = UNSTREAM_STRING_ASCII( &constant_bin[ 1049791 ], 206, 0 );
    const_tuple_str_plain_self_str_plain__maxsize_str_plain__warn_tuple = PyTuple_New( 3 );
    PyTuple_SET_ITEM( const_tuple_str_plain_self_str_plain__maxsize_str_plain__warn_tuple, 0, const_str_plain_self ); Py_INCREF( const_str_plain_self );
    const_str_plain__maxsize = UNSTREAM_STRING_ASCII( &constant_bin[ 1049997 ], 8, 1 );
    PyTuple_SET_ITEM( const_tuple_str_plain_self_str_plain__maxsize_str_plain__warn_tuple, 1, const_str_plain__maxsize ); Py_INCREF( const_str_plain__maxsize );
    PyTuple_SET_ITEM( const_tuple_str_plain_self_str_plain__maxsize_str_plain__warn_tuple, 2, const_str_plain__warn ); Py_INCREF( const_str_plain__warn );
    const_str_plain__stdin_write = UNSTREAM_STRING_ASCII( &constant_bin[ 1050005 ], 12, 1 );
    const_str_plain_get_osfhandle = UNSTREAM_STRING_ASCII( &constant_bin[ 1050017 ], 13, 1 );
    const_tuple_str_plain_inst_str_plain_res_tuple = PyTuple_New( 2 );
    PyTuple_SET_ITEM( const_tuple_str_plain_inst_str_plain_res_tuple, 0, const_str_plain_inst ); Py_INCREF( const_str_plain_inst );
    PyTuple_SET_ITEM( const_tuple_str_plain_inst_str_plain_res_tuple, 1, const_str_plain_res ); Py_INCREF( const_str_plain_res );
    const_str_digest_e2dc63c649962018f41bc6960a48c125 = UNSTREAM_STRING_ASCII( &constant_bin[ 1050030 ], 39, 0 );
    const_str_digest_6a219ad0399ae48eefe9eb5e907f4323 = UNSTREAM_STRING_ASCII( &constant_bin[ 1050069 ], 12, 0 );
    const_str_plain_send_signal = UNSTREAM_STRING_ASCII( &constant_bin[ 1050081 ], 11, 1 );
    const_str_digest_228a056f29f7ed5444f6cd76fc5830dd = UNSTREAM_STRING_ASCII( &constant_bin[ 1050092 ], 17, 0 );
    const_str_plain__xoptions = UNSTREAM_STRING_ASCII( &constant_bin[ 1050109 ], 9, 1 );
    const_str_digest_e1055fdcc238bf0745885200755a16f7 = UNSTREAM_STRING_ASCII( &constant_bin[ 1050118 ], 7, 0 );
    const_tuple_0b33e45deac7cdd8ab96e21af782d142_tuple = PyTuple_New( 14 );
    PyTuple_SET_ITEM( const_tuple_0b33e45deac7cdd8ab96e21af782d142_tuple, 0, const_str_plain_self ); Py_INCREF( const_str_plain_self );
    PyTuple_SET_ITEM( const_tuple_0b33e45deac7cdd8ab96e21af782d142_tuple, 1, const_str_plain_input ); Py_INCREF( const_str_plain_input );
    const_str_plain_endtime = UNSTREAM_STRING_ASCII( &constant_bin[ 1050125 ], 7, 1 );
    PyTuple_SET_ITEM( const_tuple_0b33e45deac7cdd8ab96e21af782d142_tuple, 2, const_str_plain_endtime ); Py_INCREF( const_str_plain_endtime );
    const_str_plain_orig_timeout = UNSTREAM_STRING_ASCII( &constant_bin[ 1050132 ], 12, 1 );
    PyTuple_SET_ITEM( const_tuple_0b33e45deac7cdd8ab96e21af782d142_tuple, 3, const_str_plain_orig_timeout ); Py_INCREF( const_str_plain_orig_timeout );
    PyTuple_SET_ITEM( const_tuple_0b33e45deac7cdd8ab96e21af782d142_tuple, 4, const_str_plain_stdout ); Py_INCREF( const_str_plain_stdout );
    PyTuple_SET_ITEM( const_tuple_0b33e45deac7cdd8ab96e21af782d142_tuple, 5, const_str_plain_stderr ); Py_INCREF( const_str_plain_stderr );
    const_str_plain_input_view = UNSTREAM_STRING_ASCII( &constant_bin[ 1050144 ], 10, 1 );
    PyTuple_SET_ITEM( const_tuple_0b33e45deac7cdd8ab96e21af782d142_tuple, 6, const_str_plain_input_view ); Py_INCREF( const_str_plain_input_view );
    PyTuple_SET_ITEM( const_tuple_0b33e45deac7cdd8ab96e21af782d142_tuple, 7, const_str_plain_selector ); Py_INCREF( const_str_plain_selector );
    PyTuple_SET_ITEM( const_tuple_0b33e45deac7cdd8ab96e21af782d142_tuple, 8, const_str_plain_timeout ); Py_INCREF( const_str_plain_timeout );
    PyTuple_SET_ITEM( const_tuple_0b33e45deac7cdd8ab96e21af782d142_tuple, 9, const_str_plain_ready ); Py_INCREF( const_str_plain_ready );
    PyTuple_SET_ITEM( const_tuple_0b33e45deac7cdd8ab96e21af782d142_tuple, 10, const_str_plain_key ); Py_INCREF( const_str_plain_key );
    PyTuple_SET_ITEM( const_tuple_0b33e45deac7cdd8ab96e21af782d142_tuple, 11, const_str_plain_events ); Py_INCREF( const_str_plain_events );
    PyTuple_SET_ITEM( const_tuple_0b33e45deac7cdd8ab96e21af782d142_tuple, 12, const_str_plain_chunk ); Py_INCREF( const_str_plain_chunk );
    PyTuple_SET_ITEM( const_tuple_0b33e45deac7cdd8ab96e21af782d142_tuple, 13, const_str_plain_data ); Py_INCREF( const_str_plain_data );
    const_str_digest_7171fe58b58f607b78d848b1d715f626 = UNSTREAM_STRING_ASCII( &constant_bin[ 1050154 ], 15, 0 );
    const_tuple_str_plain_self_str_plain_universal_newlines_tuple = PyTuple_New( 2 );
    PyTuple_SET_ITEM( const_tuple_str_plain_self_str_plain_universal_newlines_tuple, 0, const_str_plain_self ); Py_INCREF( const_str_plain_self );
    const_str_plain_universal_newlines = UNSTREAM_STRING_ASCII( &constant_bin[ 1050169 ], 18, 1 );
    PyTuple_SET_ITEM( const_tuple_str_plain_self_str_plain_universal_newlines_tuple, 1, const_str_plain_universal_newlines ); Py_INCREF( const_str_plain_universal_newlines );
    const_str_plain_check_returncode = UNSTREAM_STRING_ASCII( &constant_bin[ 1050187 ], 16, 1 );
    const_tuple_049761c70f8d64139550fd3b8024294a_tuple = PyMarshal_ReadObjectFromString( (char *)&constant_bin[ 1050203 ], 290 );
    const_str_digest_deb66f1ed83050e2e64b93d19ff3eba0 = UNSTREAM_STRING_ASCII( &constant_bin[ 1050493 ], 41, 0 );
    const_tuple_str_plain_self_str_plain_fh_str_plain_buffer_tuple = PyTuple_New( 3 );
    PyTuple_SET_ITEM( const_tuple_str_plain_self_str_plain_fh_str_plain_buffer_tuple, 0, const_str_plain_self ); Py_INCREF( const_str_plain_self );
    const_str_plain_fh = UNSTREAM_STRING_ASCII( &constant_bin[ 79868 ], 2, 1 );
    PyTuple_SET_ITEM( const_tuple_str_plain_self_str_plain_fh_str_plain_buffer_tuple, 1, const_str_plain_fh ); Py_INCREF( const_str_plain_fh );
    PyTuple_SET_ITEM( const_tuple_str_plain_self_str_plain_fh_str_plain_buffer_tuple, 2, const_str_plain_buffer ); Py_INCREF( const_str_plain_buffer );
    const_tuple_str_plain_self_str_plain_attr_list_tuple = PyTuple_New( 2 );
    PyTuple_SET_ITEM( const_tuple_str_plain_self_str_plain_attr_list_tuple, 0, const_str_plain_self ); Py_INCREF( const_str_plain_self );
    const_str_plain_attr_list = UNSTREAM_STRING_ASCII( &constant_bin[ 1050534 ], 9, 1 );
    PyTuple_SET_ITEM( const_tuple_str_plain_self_str_plain_attr_list_tuple, 1, const_str_plain_attr_list ); Py_INCREF( const_str_plain_attr_list );
    const_str_plain__PIPE_BUF = UNSTREAM_STRING_ASCII( &constant_bin[ 1050543 ], 9, 1 );
    const_str_digest_cc2faf98f6cbd21153d66f0b08ef520b = UNSTREAM_STRING_ASCII( &constant_bin[ 1050552 ], 9, 0 );
    const_str_digest_93ffc62d6616f571ceaa45141505e352 = UNSTREAM_STRING_ASCII( &constant_bin[ 1050561 ], 20, 0 );
    const_str_digest_1e2d75506e9e2e171471d3f72a5fa834 = UNSTREAM_STRING_ASCII( &constant_bin[ 214990 ], 2, 0 );
    const_str_digest_8cf228ee982ca1d76c1701e22ea65d38 = UNSTREAM_STRING_ASCII( &constant_bin[ 1050581 ], 163, 0 );
    const_str_plain_GetExitCodeProcess = UNSTREAM_STRING_ASCII( &constant_bin[ 1050744 ], 18, 1 );
    const_str_plain_WEXITSTATUS = UNSTREAM_STRING_ASCII( &constant_bin[ 1047592 ], 11, 1 );
    const_str_plain__stderr_buff = UNSTREAM_STRING_ASCII( &constant_bin[ 1050762 ], 12, 1 );
    const_str_digest_8a04e8f481c7ca9444a23a83f56c2d84 = UNSTREAM_STRING_ASCII( &constant_bin[ 1050774 ], 10, 0 );
    const_str_plain_DUPLICATE_SAME_ACCESS = UNSTREAM_STRING_ASCII( &constant_bin[ 1050784 ], 21, 1 );
    const_str_digest_6589e74b142d57485b33df8d4bf5e9da = UNSTREAM_STRING_ASCII( &constant_bin[ 1050805 ], 15, 0 );
    const_str_plain_hStdInput = UNSTREAM_STRING_ASCII( &constant_bin[ 1050820 ], 9, 1 );
    const_str_plain_TerminateProcess = UNSTREAM_STRING_ASCII( &constant_bin[ 1050829 ], 16, 1 );
    const_str_digest_549f1a66edfa79c8b0272a3b6b8d9d50 = UNSTREAM_STRING_ASCII( &constant_bin[ 1050845 ], 124, 0 );
    const_str_digest_833b0499a7c50df55adf92e47cee19b7 = UNSTREAM_STRING_ASCII( &constant_bin[ 1050969 ], 14, 0 );
    const_str_digest_51af6ec25e2aac315afeb32a2ca3309c = UNSTREAM_STRING_ASCII( &constant_bin[ 1050983 ], 47, 0 );
    const_bytes_digest_92a77d7ec5d45eaee3b796fbf5eebb91 = UNSTREAM_BYTES( &constant_bin[ 1051030 ], 15 );
    const_dict_d1e7f52ec90a7cdf0d2cc5349ac066ed = _PyDict_NewPresized( 1 );
    const_str_plain_handle_list = UNSTREAM_STRING_ASCII( &constant_bin[ 1045594 ], 11, 1 );
    PyDict_SetItem( const_dict_d1e7f52ec90a7cdf0d2cc5349ac066ed, const_str_plain_handle_list, const_list_empty );
    assert( PyDict_Size( const_dict_d1e7f52ec90a7cdf0d2cc5349ac066ed ) == 1 );
    const_str_digest_6d1a327b39e434d86db0dcab2f1a3781 = UNSTREAM_STRING_ASCII( &constant_bin[ 1051045 ], 335, 0 );
    const_str_digest_e7bc3a787f33637108c4ae505936e97f = UNSTREAM_STRING_ASCII( &constant_bin[ 1051380 ], 125, 0 );
    const_str_plain__fileobj2output = UNSTREAM_STRING_ASCII( &constant_bin[ 1051505 ], 15, 1 );
    const_str_plain_dwFlags = UNSTREAM_STRING_ASCII( &constant_bin[ 1051520 ], 7, 1 );
    const_tuple_e7e46fd4bb764fd8230718c34c643b10_tuple = PyTuple_New( 4 );
    PyTuple_SET_ITEM( const_tuple_e7e46fd4bb764fd8230718c34c643b10_tuple, 0, const_str_plain_self ); Py_INCREF( const_str_plain_self );
    PyTuple_SET_ITEM( const_tuple_e7e46fd4bb764fd8230718c34c643b10_tuple, 1, const_str_plain_timeout ); Py_INCREF( const_str_plain_timeout );
    const_str_plain_timeout_millis = UNSTREAM_STRING_ASCII( &constant_bin[ 1051527 ], 14, 1 );
    PyTuple_SET_ITEM( const_tuple_e7e46fd4bb764fd8230718c34c643b10_tuple, 2, const_str_plain_timeout_millis ); Py_INCREF( const_str_plain_timeout_millis );
    PyTuple_SET_ITEM( const_tuple_e7e46fd4bb764fd8230718c34c643b10_tuple, 3, const_str_plain_result ); Py_INCREF( const_str_plain_result );
    const_str_plain_noexec = UNSTREAM_STRING_ASCII( &constant_bin[ 1051541 ], 6, 1 );
    const_str_digest_fe1b075d3056cfb43cf764c5a738a164 = UNSTREAM_STRING_ASCII( &constant_bin[ 1051547 ], 47, 0 );
    const_tuple_8a64ed7c758b87eda350abbe0b42cdde_tuple = PyTuple_New( 8 );
    PyTuple_SET_ITEM( const_tuple_8a64ed7c758b87eda350abbe0b42cdde_tuple, 0, const_str_plain_self ); Py_INCREF( const_str_plain_self );
    PyTuple_SET_ITEM( const_tuple_8a64ed7c758b87eda350abbe0b42cdde_tuple, 1, const_str_plain_input ); Py_INCREF( const_str_plain_input );
    PyTuple_SET_ITEM( const_tuple_8a64ed7c758b87eda350abbe0b42cdde_tuple, 2, const_str_plain_timeout ); Py_INCREF( const_str_plain_timeout );
    PyTuple_SET_ITEM( const_tuple_8a64ed7c758b87eda350abbe0b42cdde_tuple, 3, const_str_plain_stdout ); Py_INCREF( const_str_plain_stdout );
    PyTuple_SET_ITEM( const_tuple_8a64ed7c758b87eda350abbe0b42cdde_tuple, 4, const_str_plain_stderr ); Py_INCREF( const_str_plain_stderr );
    PyTuple_SET_ITEM( const_tuple_8a64ed7c758b87eda350abbe0b42cdde_tuple, 5, const_str_plain_endtime ); Py_INCREF( const_str_plain_endtime );
    const_str_plain_sigint_timeout = UNSTREAM_STRING_ASCII( &constant_bin[ 1051594 ], 14, 1 );
    PyTuple_SET_ITEM( const_tuple_8a64ed7c758b87eda350abbe0b42cdde_tuple, 6, const_str_plain_sigint_timeout ); Py_INCREF( const_str_plain_sigint_timeout );
    const_str_plain_sts = UNSTREAM_STRING_ASCII( &constant_bin[ 5862 ], 3, 1 );
    PyTuple_SET_ITEM( const_tuple_8a64ed7c758b87eda350abbe0b42cdde_tuple, 7, const_str_plain_sts ); Py_INCREF( const_str_plain_sts );
    const_str_plain_importtime = UNSTREAM_STRING_ASCII( &constant_bin[ 1051608 ], 10, 1 );
    const_str_digest_ffe1d577487de46eb473039cc7e4d3e0 = UNSTREAM_STRING_ASCII( &constant_bin[ 1051618 ], 7, 0 );
    const_str_digest_d53cbfa1c290fabaad865ce93b11e777 = UNSTREAM_STRING_ASCII( &constant_bin[ 182812 ], 2, 0 );
    const_str_plain_tracemalloc = UNSTREAM_STRING_ASCII( &constant_bin[ 1051625 ], 11, 1 );
    const_str_plain__save_input = UNSTREAM_STRING_ASCII( &constant_bin[ 1051636 ], 11, 1 );
    const_str_plain__handle_exitstatus = UNSTREAM_STRING_ASCII( &constant_bin[ 1051647 ], 18, 1 );
    const_tuple_1646503210130d97fade91ad80b732e0_tuple = PyTuple_New( 7 );
    PyTuple_SET_ITEM( const_tuple_1646503210130d97fade91ad80b732e0_tuple, 0, const_str_plain_self ); Py_INCREF( const_str_plain_self );
    PyTuple_SET_ITEM( const_tuple_1646503210130d97fade91ad80b732e0_tuple, 1, const_str_plain_dwFlags ); Py_INCREF( const_str_plain_dwFlags );
    PyTuple_SET_ITEM( const_tuple_1646503210130d97fade91ad80b732e0_tuple, 2, const_str_plain_hStdInput ); Py_INCREF( const_str_plain_hStdInput );
    PyTuple_SET_ITEM( const_tuple_1646503210130d97fade91ad80b732e0_tuple, 3, const_str_plain_hStdOutput ); Py_INCREF( const_str_plain_hStdOutput );
    const_str_plain_hStdError = UNSTREAM_STRING_ASCII( &constant_bin[ 1051665 ], 9, 1 );
    PyTuple_SET_ITEM( const_tuple_1646503210130d97fade91ad80b732e0_tuple, 4, const_str_plain_hStdError ); Py_INCREF( const_str_plain_hStdError );
    PyTuple_SET_ITEM( const_tuple_1646503210130d97fade91ad80b732e0_tuple, 5, const_str_plain_wShowWindow ); Py_INCREF( const_str_plain_wShowWindow );
    const_str_plain_lpAttributeList = UNSTREAM_STRING_ASCII( &constant_bin[ 1051674 ], 15, 1 );
    PyTuple_SET_ITEM( const_tuple_1646503210130d97fade91ad80b732e0_tuple, 6, const_str_plain_lpAttributeList ); Py_INCREF( const_str_plain_lpAttributeList );
    const_str_plain_WTERMSIG = UNSTREAM_STRING_ASCII( &constant_bin[ 1051689 ], 8, 1 );
    const_str_plain_open_osfhandle = UNSTREAM_STRING_ASCII( &constant_bin[ 1051697 ], 14, 1 );
    const_tuple_str_digest_571eccf4664cb01ecea1867fcbf66f8d_tuple = PyTuple_New( 1 );
    const_str_digest_571eccf4664cb01ecea1867fcbf66f8d = UNSTREAM_STRING_ASCII( &constant_bin[ 227166 ], 2, 0 );
    PyTuple_SET_ITEM( const_tuple_str_digest_571eccf4664cb01ecea1867fcbf66f8d_tuple, 0, const_str_digest_571eccf4664cb01ecea1867fcbf66f8d ); Py_INCREF( const_str_digest_571eccf4664cb01ecea1867fcbf66f8d );
    const_float_0_25 = UNSTREAM_FLOAT( &constant_bin[ 1051711 ] );
    const_str_digest_cd49e8e73e2a29b6371b14c295709203 = UNSTREAM_STRING_ASCII( &constant_bin[ 1051719 ], 293, 0 );
    const_str_plain_CloseHandle = UNSTREAM_STRING_ASCII( &constant_bin[ 1052012 ], 11, 1 );
    const_str_digest_64262d9d765dd22583ae3b093ab328f8 = UNSTREAM_STRING_ASCII( &constant_bin[ 1052023 ], 103, 0 );
    const_str_plain_Detach = UNSTREAM_STRING_ASCII( &constant_bin[ 1052126 ], 6, 1 );
    const_tuple_50ebc68da7664988618a7f21371f1fba_tuple = PyTuple_New( 4 );
    PyTuple_SET_ITEM( const_tuple_50ebc68da7664988618a7f21371f1fba_tuple, 0, const_str_plain_self ); Py_INCREF( const_str_plain_self );
    PyTuple_SET_ITEM( const_tuple_50ebc68da7664988618a7f21371f1fba_tuple, 1, const_str_plain_data ); Py_INCREF( const_str_plain_data );
    PyTuple_SET_ITEM( const_tuple_50ebc68da7664988618a7f21371f1fba_tuple, 2, const_str_plain_encoding ); Py_INCREF( const_str_plain_encoding );
    PyTuple_SET_ITEM( const_tuple_50ebc68da7664988618a7f21371f1fba_tuple, 3, const_str_plain_errors ); Py_INCREF( const_str_plain_errors );
    const_str_plain_CTRL_C_EVENT = UNSTREAM_STRING_ASCII( &constant_bin[ 1052132 ], 12, 1 );
    const_str_plain_WIFSTOPPED = UNSTREAM_STRING_ASCII( &constant_bin[ 1052144 ], 10, 1 );
    const_str_digest_671f0d482711dcaa6854d3a0cc514994 = UNSTREAM_STRING_ASCII( &constant_bin[ 1052154 ], 24, 0 );
    const_tuple_str_plain_self_str_plain_sig_tuple = PyTuple_New( 2 );
    PyTuple_SET_ITEM( const_tuple_str_plain_self_str_plain_sig_tuple, 0, const_str_plain_self ); Py_INCREF( const_str_plain_self );
    PyTuple_SET_ITEM( const_tuple_str_plain_self_str_plain_sig_tuple, 1, const_str_plain_sig ); Py_INCREF( const_str_plain_sig );
    const_tuple_b4f5f0e49ae6d02cc4f743bef79300d5_tuple = PyTuple_New( 2 );
    PyTuple_SET_ITEM( const_tuple_b4f5f0e49ae6d02cc4f743bef79300d5_tuple, 0, const_str_plain_COMSPEC ); Py_INCREF( const_str_plain_COMSPEC );
    PyTuple_SET_ITEM( const_tuple_b4f5f0e49ae6d02cc4f743bef79300d5_tuple, 1, const_str_digest_ffe1d577487de46eb473039cc7e4d3e0 ); Py_INCREF( const_str_digest_ffe1d577487de46eb473039cc7e4d3e0 );
    const_str_plain_STILL_ACTIVE = UNSTREAM_STRING_ASCII( &constant_bin[ 1052178 ], 12, 1 );
    const_str_plain_showrefcount = UNSTREAM_STRING_ASCII( &constant_bin[ 1052190 ], 12, 1 );
    const_str_digest_654362c78432fb5fb1e872a376dbf470 = UNSTREAM_STRING_ASCII( &constant_bin[ 1052202 ], 29, 0 );
    const_str_plain_Close = UNSTREAM_STRING_ASCII( &constant_bin[ 60274 ], 5, 1 );
    const_tuple_str_plain_handle_tuple = PyTuple_New( 1 );
    PyTuple_SET_ITEM( const_tuple_str_plain_handle_tuple, 0, const_str_plain_handle ); Py_INCREF( const_str_plain_handle );
    const_str_digest_db0bae7c8ec4265d177cd95885bf2b67 = UNSTREAM_STRING_ASCII( &constant_bin[ 1052231 ], 155, 0 );
    const_str_digest_fe182f1121b0539251b21da6faaebf72 = UNSTREAM_STRING_ASCII( &constant_bin[ 1052386 ], 46, 0 );
    const_str_digest_02074f0e49b72edf13efe1e05bfa3e94 = UNSTREAM_STRING_ASCII( &constant_bin[ 1052432 ], 176, 0 );
    const_str_plain__child_created = UNSTREAM_STRING_ASCII( &constant_bin[ 1052608 ], 14, 1 );
    const_str_plain__translate_newlines = UNSTREAM_STRING_ASCII( &constant_bin[ 1052622 ], 19, 1 );
    const_str_digest_77f73674b849dfbaebef9438ad08733e = UNSTREAM_STRING_ASCII( &constant_bin[ 1052641 ], 26, 0 );
    const_str_plain__waitpid = UNSTREAM_STRING_ASCII( &constant_bin[ 1052667 ], 8, 1 );
    const_str_digest_64c2209e0c91061515d2da3a8a8c5e6a = UNSTREAM_STRING_ASCII( &constant_bin[ 1052675 ], 10, 0 );
    const_tuple_a6f41dd7c64b6479154fdfcda359491a_tuple = PyTuple_New( 7 );
    PyTuple_SET_ITEM( const_tuple_a6f41dd7c64b6479154fdfcda359491a_tuple, 0, const_str_plain_self ); Py_INCREF( const_str_plain_self );
    PyTuple_SET_ITEM( const_tuple_a6f41dd7c64b6479154fdfcda359491a_tuple, 1, const_str_plain_timeout ); Py_INCREF( const_str_plain_timeout );
    PyTuple_SET_ITEM( const_tuple_a6f41dd7c64b6479154fdfcda359491a_tuple, 2, const_str_plain_endtime ); Py_INCREF( const_str_plain_endtime );
    PyTuple_SET_ITEM( const_tuple_a6f41dd7c64b6479154fdfcda359491a_tuple, 3, const_str_plain_delay ); Py_INCREF( const_str_plain_delay );
    PyTuple_SET_ITEM( const_tuple_a6f41dd7c64b6479154fdfcda359491a_tuple, 4, const_str_plain_pid ); Py_INCREF( const_str_plain_pid );
    PyTuple_SET_ITEM( const_tuple_a6f41dd7c64b6479154fdfcda359491a_tuple, 5, const_str_plain_sts ); Py_INCREF( const_str_plain_sts );
    const_str_plain_remaining = UNSTREAM_STRING_ASCII( &constant_bin[ 15896 ], 9, 1 );
    PyTuple_SET_ITEM( const_tuple_a6f41dd7c64b6479154fdfcda359491a_tuple, 6, const_str_plain_remaining ); Py_INCREF( const_str_plain_remaining );
    const_str_plain_SubprocessError = UNSTREAM_STRING_ASCII( &constant_bin[ 1051030 ], 15, 1 );
    const_str_digest_067feae16ba6c6d7054cdc19949cebc8 = UNSTREAM_STRING_ASCII( &constant_bin[ 1052685 ], 19, 0 );
    const_str_plain__devnull = UNSTREAM_STRING_ASCII( &constant_bin[ 1052704 ], 8, 1 );
    const_str_digest_ed42f52d2cf5b3ed02ea77ba3eb9cc1a = UNSTREAM_STRING_ASCII( &constant_bin[ 1052712 ], 23, 0 );
    const_str_plain_exitcode = UNSTREAM_STRING_ASCII( &constant_bin[ 1045804 ], 8, 1 );
    const_str_plain__stdout_buff = UNSTREAM_STRING_ASCII( &constant_bin[ 1052735 ], 12, 1 );
    const_str_plain_errread = UNSTREAM_STRING_ASCII( &constant_bin[ 1050459 ], 7, 1 );
    const_str_plain__get_devnull = UNSTREAM_STRING_ASCII( &constant_bin[ 1052747 ], 12, 1 );
    const_str_digest_4e5d48093781680053716042e6c0ae8f = UNSTREAM_STRING_ASCII( &constant_bin[ 1052759 ], 61, 0 );
    const_str_digest_3cf2126fcabff0e2cda546c966091d3c = UNSTREAM_STRING_ASCII( &constant_bin[ 1052820 ], 52, 0 );
    const_tuple_54550700c47664a85ad99db8afd7ef8f_tuple = PyTuple_New( 10 );
    PyTuple_SET_ITEM( const_tuple_54550700c47664a85ad99db8afd7ef8f_tuple, 0, const_str_plain_self ); Py_INCREF( const_str_plain_self );
    PyTuple_SET_ITEM( const_tuple_54550700c47664a85ad99db8afd7ef8f_tuple, 1, const_str_plain_stdin ); Py_INCREF( const_str_plain_stdin );
    PyTuple_SET_ITEM( const_tuple_54550700c47664a85ad99db8afd7ef8f_tuple, 2, const_str_plain_stdout ); Py_INCREF( const_str_plain_stdout );
    PyTuple_SET_ITEM( const_tuple_54550700c47664a85ad99db8afd7ef8f_tuple, 3, const_str_plain_stderr ); Py_INCREF( const_str_plain_stderr );
    const_str_plain_p2cread = UNSTREAM_STRING_ASCII( &constant_bin[ 1050421 ], 7, 1 );
    PyTuple_SET_ITEM( const_tuple_54550700c47664a85ad99db8afd7ef8f_tuple, 4, const_str_plain_p2cread ); Py_INCREF( const_str_plain_p2cread );
    const_str_plain_p2cwrite = UNSTREAM_STRING_ASCII( &constant_bin[ 1050430 ], 8, 1 );
    PyTuple_SET_ITEM( const_tuple_54550700c47664a85ad99db8afd7ef8f_tuple, 5, const_str_plain_p2cwrite ); Py_INCREF( const_str_plain_p2cwrite );
    const_str_plain_c2pread = UNSTREAM_STRING_ASCII( &constant_bin[ 1050440 ], 7, 1 );
    PyTuple_SET_ITEM( const_tuple_54550700c47664a85ad99db8afd7ef8f_tuple, 6, const_str_plain_c2pread ); Py_INCREF( const_str_plain_c2pread );
    PyTuple_SET_ITEM( const_tuple_54550700c47664a85ad99db8afd7ef8f_tuple, 7, const_str_plain_c2pwrite ); Py_INCREF( const_str_plain_c2pwrite );
    PyTuple_SET_ITEM( const_tuple_54550700c47664a85ad99db8afd7ef8f_tuple, 8, const_str_plain_errread ); Py_INCREF( const_str_plain_errread );
    const_str_plain_errwrite = UNSTREAM_STRING_ASCII( &constant_bin[ 1050468 ], 8, 1 );
    PyTuple_SET_ITEM( const_tuple_54550700c47664a85ad99db8afd7ef8f_tuple, 9, const_str_plain_errwrite ); Py_INCREF( const_str_plain_errwrite );
    const_tuple_str_plain_universal_newlines_false_tuple = PyTuple_New( 2 );
    PyTuple_SET_ITEM( const_tuple_str_plain_universal_newlines_false_tuple, 0, const_str_plain_universal_newlines ); Py_INCREF( const_str_plain_universal_newlines );
    PyTuple_SET_ITEM( const_tuple_str_plain_universal_newlines_false_tuple, 1, Py_False ); Py_INCREF( Py_False );
    const_str_digest_3d757e4458d6f562adb6609274396e8a = UNSTREAM_STRING_ASCII( &constant_bin[ 1052872 ], 30, 0 );
    const_tuple_str_digest_c836122af34ee7a172b779f26da7801f_tuple = PyTuple_New( 1 );
    PyTuple_SET_ITEM( const_tuple_str_digest_c836122af34ee7a172b779f26da7801f_tuple, 0, const_str_digest_c836122af34ee7a172b779f26da7801f ); Py_INCREF( const_str_digest_c836122af34ee7a172b779f26da7801f );
    const_tuple_str_digest_c245c8a772b3a33119deac8565a08f57_tuple = PyTuple_New( 1 );
    PyTuple_SET_ITEM( const_tuple_str_digest_c245c8a772b3a33119deac8565a08f57_tuple, 0, const_str_digest_c245c8a772b3a33119deac8565a08f57 ); Py_INCREF( const_str_digest_c245c8a772b3a33119deac8565a08f57 );
    const_str_digest_0e6a2015259e836fd56329226048ed97 = UNSTREAM_STRING_ASCII( &constant_bin[ 1052902 ], 83, 0 );
    const_str_plain_GetCurrentProcess = UNSTREAM_STRING_ASCII( &constant_bin[ 1052985 ], 17, 1 );
    const_str_digest_885315c83fa89d51965111c7f94ba941 = UNSTREAM_STRING_ASCII( &constant_bin[ 1053002 ], 21, 0 );
    const_str_plain_text_mode = UNSTREAM_STRING_ASCII( &constant_bin[ 1053023 ], 9, 1 );
    const_str_digest_5b15356b3e57532a4751bdb812b0091e = UNSTREAM_STRING_ASCII( &constant_bin[ 1053032 ], 18, 0 );
    const_tuple_2f0cd8ae0d18cf50f50c0e08a3f1784e_tuple = PyTuple_New( 5 );
    PyTuple_SET_ITEM( const_tuple_2f0cd8ae0d18cf50f50c0e08a3f1784e_tuple, 0, const_str_plain_self ); Py_INCREF( const_str_plain_self );
    PyTuple_SET_ITEM( const_tuple_2f0cd8ae0d18cf50f50c0e08a3f1784e_tuple, 1, const_str_plain_cmd ); Py_INCREF( const_str_plain_cmd );
    PyTuple_SET_ITEM( const_tuple_2f0cd8ae0d18cf50f50c0e08a3f1784e_tuple, 2, const_str_plain_timeout ); Py_INCREF( const_str_plain_timeout );
    PyTuple_SET_ITEM( const_tuple_2f0cd8ae0d18cf50f50c0e08a3f1784e_tuple, 3, const_str_plain_output ); Py_INCREF( const_str_plain_output );
    PyTuple_SET_ITEM( const_tuple_2f0cd8ae0d18cf50f50c0e08a3f1784e_tuple, 4, const_str_plain_stderr ); Py_INCREF( const_str_plain_stderr );
    const_tuple_dea21aa990bc1774755e7d37055a00a1_tuple = PyTuple_New( 6 );
    PyTuple_SET_ITEM( const_tuple_dea21aa990bc1774755e7d37055a00a1_tuple, 0, const_str_plain_self ); Py_INCREF( const_str_plain_self );
    PyTuple_SET_ITEM( const_tuple_dea21aa990bc1774755e7d37055a00a1_tuple, 1, const_str_plain_input ); Py_INCREF( const_str_plain_input );
    PyTuple_SET_ITEM( const_tuple_dea21aa990bc1774755e7d37055a00a1_tuple, 2, const_str_plain_endtime ); Py_INCREF( const_str_plain_endtime );
    PyTuple_SET_ITEM( const_tuple_dea21aa990bc1774755e7d37055a00a1_tuple, 3, const_str_plain_orig_timeout ); Py_INCREF( const_str_plain_orig_timeout );
    PyTuple_SET_ITEM( const_tuple_dea21aa990bc1774755e7d37055a00a1_tuple, 4, const_str_plain_stdout ); Py_INCREF( const_str_plain_stdout );
    PyTuple_SET_ITEM( const_tuple_dea21aa990bc1774755e7d37055a00a1_tuple, 5, const_str_plain_stderr ); Py_INCREF( const_str_plain_stderr );
    const_str_plain_GetStdHandle = UNSTREAM_STRING_ASCII( &constant_bin[ 1053050 ], 12, 1 );
    const_str_plain__readerthread = UNSTREAM_STRING_ASCII( &constant_bin[ 1053062 ], 13, 1 );
    const_str_plain__WTERMSIG = UNSTREAM_STRING_ASCII( &constant_bin[ 1053075 ], 9, 1 );
    const_str_digest_121b2b9ade4ed6778d76629e1abd32c7 = UNSTREAM_STRING_ASCII( &constant_bin[ 1053084 ], 11, 0 );
    const_str_plain__posixsubprocess = UNSTREAM_STRING_ASCII( &constant_bin[ 1053095 ], 16, 1 );
    const_str_digest_7486a19b1011dc32401c0be752e70b18 = UNSTREAM_STRING_ASCII( &constant_bin[ 1053111 ], 13, 0 );
    const_str_plain__ECHILD = UNSTREAM_STRING_ASCII( &constant_bin[ 1053124 ], 7, 1 );
    const_tuple_935322585dac22c4179d8ef098096f67_tuple = PyTuple_New( 5 );
    PyTuple_SET_ITEM( const_tuple_935322585dac22c4179d8ef098096f67_tuple, 0, const_str_plain_self ); Py_INCREF( const_str_plain_self );
    const_str_plain__deadstate = UNSTREAM_STRING_ASCII( &constant_bin[ 1053131 ], 10, 1 );
    PyTuple_SET_ITEM( const_tuple_935322585dac22c4179d8ef098096f67_tuple, 1, const_str_plain__deadstate ); Py_INCREF( const_str_plain__deadstate );
    const_str_plain__WaitForSingleObject = UNSTREAM_STRING_ASCII( &constant_bin[ 1053141 ], 20, 1 );
    PyTuple_SET_ITEM( const_tuple_935322585dac22c4179d8ef098096f67_tuple, 2, const_str_plain__WaitForSingleObject ); Py_INCREF( const_str_plain__WaitForSingleObject );
    const_str_plain__WAIT_OBJECT_0 = UNSTREAM_STRING_ASCII( &constant_bin[ 1053161 ], 14, 1 );
    PyTuple_SET_ITEM( const_tuple_935322585dac22c4179d8ef098096f67_tuple, 3, const_str_plain__WAIT_OBJECT_0 ); Py_INCREF( const_str_plain__WAIT_OBJECT_0 );
    const_str_plain__GetExitCodeProcess = UNSTREAM_STRING_ASCII( &constant_bin[ 1053175 ], 19, 1 );
    PyTuple_SET_ITEM( const_tuple_935322585dac22c4179d8ef098096f67_tuple, 4, const_str_plain__GetExitCodeProcess ); Py_INCREF( const_str_plain__GetExitCodeProcess );
    const_str_plain__wait = UNSTREAM_STRING_ASCII( &constant_bin[ 475730 ], 5, 1 );
    const_str_plain_FILE_TYPE_CHAR = UNSTREAM_STRING_ASCII( &constant_bin[ 1053194 ], 14, 1 );
    const_str_plain_EINVAL = UNSTREAM_STRING_ASCII( &constant_bin[ 1053208 ], 6, 1 );
    const_str_plain_fork_exec = UNSTREAM_STRING_ASCII( &constant_bin[ 1053214 ], 9, 1 );
    const_str_digest_29b37c1962ac8c0d3a43f5fdd853deaf = UNSTREAM_STRING_ASCII( &constant_bin[ 1053223 ], 25, 0 );
    const_tuple_5c0aacd6bfc62532472ec1b2ebbdbfd6_tuple = PyTuple_New( 4 );
    PyTuple_SET_ITEM( const_tuple_5c0aacd6bfc62532472ec1b2ebbdbfd6_tuple, 0, const_str_plain_self ); Py_INCREF( const_str_plain_self );
    PyTuple_SET_ITEM( const_tuple_5c0aacd6bfc62532472ec1b2ebbdbfd6_tuple, 1, const_str_plain_timeout ); Py_INCREF( const_str_plain_timeout );
    PyTuple_SET_ITEM( const_tuple_5c0aacd6bfc62532472ec1b2ebbdbfd6_tuple, 2, const_str_plain_endtime ); Py_INCREF( const_str_plain_endtime );
    PyTuple_SET_ITEM( const_tuple_5c0aacd6bfc62532472ec1b2ebbdbfd6_tuple, 3, const_str_plain_sigint_timeout ); Py_INCREF( const_str_plain_sigint_timeout );
    const_str_digest_a7fe184903448f080dd53d3fd8903dfe = UNSTREAM_STRING_ASCII( &constant_bin[ 1053248 ], 33, 0 );
    const_str_digest_7eeb7240d1d21e44dc1879ad2e2e8102 = UNSTREAM_STRING_ASCII( &constant_bin[ 1053281 ], 27, 0 );
    const_str_digest_feaf87b9b7d17be45ce0885d3a2e0b62 = UNSTREAM_STRING_ASCII( &constant_bin[ 1053308 ], 46, 0 );
    const_str_plain_STARTUPINFO = UNSTREAM_STRING_ASCII( &constant_bin[ 1053354 ], 11, 1 );
    const_str_plain__input_offset = UNSTREAM_STRING_ASCII( &constant_bin[ 1053365 ], 13, 1 );
    const_str_digest_7b16e795bd361a9112c3449f85ac2ce4 = UNSTREAM_STRING_ASCII( &constant_bin[ 1053378 ], 11, 0 );
    const_str_plain__PopenSelector = UNSTREAM_STRING_ASCII( &constant_bin[ 1053389 ], 14, 1 );
    const_str_plain_ignore_environment = UNSTREAM_STRING_ASCII( &constant_bin[ 1053403 ], 18, 1 );
    const_str_plain__WIFSTOPPED = UNSTREAM_STRING_ASCII( &constant_bin[ 1053421 ], 11, 1 );
    const_str_digest_4e4c098f9de9960963ee1b8db5526b4f = UNSTREAM_STRING_ASCII( &constant_bin[ 1053432 ], 13, 0 );
    const_str_plain__get_handles = UNSTREAM_STRING_ASCII( &constant_bin[ 1053445 ], 12, 1 );
    const_str_plain__handle = UNSTREAM_STRING_ASCII( &constant_bin[ 16554 ], 7, 1 );
    const_str_plain_terminate = UNSTREAM_STRING_ASCII( &constant_bin[ 121451 ], 9, 1 );
    const_tuple_str_digest_c2199ddfa55a575bd2b108a574a03ff2_tuple = PyTuple_New( 1 );
    const_str_digest_c2199ddfa55a575bd2b108a574a03ff2 = UNSTREAM_STRING_ASCII( &constant_bin[ 1053457 ], 26, 0 );
    PyTuple_SET_ITEM( const_tuple_str_digest_c2199ddfa55a575bd2b108a574a03ff2_tuple, 0, const_str_digest_c2199ddfa55a575bd2b108a574a03ff2 ); Py_INCREF( const_str_digest_c2199ddfa55a575bd2b108a574a03ff2 );
    const_tuple_str_plain_self_str_plain_endtime_tuple = PyTuple_New( 2 );
    PyTuple_SET_ITEM( const_tuple_str_plain_self_str_plain_endtime_tuple, 0, const_str_plain_self ); Py_INCREF( const_str_plain_self );
    PyTuple_SET_ITEM( const_tuple_str_plain_self_str_plain_endtime_tuple, 1, const_str_plain_endtime ); Py_INCREF( const_str_plain_endtime );
    const_str_plain_needquote = UNSTREAM_STRING_ASCII( &constant_bin[ 1053483 ], 9, 1 );
    const_str_digest_4e3a0250114d61f59638f6789662dcba = UNSTREAM_STRING_ASCII( &constant_bin[ 1053492 ], 108, 0 );
    const_tuple_str_plain_self_str_plain_handle_str_plain_h_tuple = PyTuple_New( 3 );
    PyTuple_SET_ITEM( const_tuple_str_plain_self_str_plain_handle_str_plain_h_tuple, 0, const_str_plain_self ); Py_INCREF( const_str_plain_self );
    PyTuple_SET_ITEM( const_tuple_str_plain_self_str_plain_handle_str_plain_h_tuple, 1, const_str_plain_handle ); Py_INCREF( const_str_plain_handle );
    PyTuple_SET_ITEM( const_tuple_str_plain_self_str_plain_handle_str_plain_h_tuple, 2, const_str_plain_h ); Py_INCREF( const_str_plain_h );
    const_str_digest_f43f5e0af2382671e17ef2c95186da07 = UNSTREAM_STRING_ASCII( &constant_bin[ 1053600 ], 245, 0 );
    const_str_plain__communication_started = UNSTREAM_STRING_ASCII( &constant_bin[ 1053845 ], 22, 1 );
    const_str_digest_14e5e85200836625f117ca82ffb5a872 = UNSTREAM_STRING_ASCII( &constant_bin[ 1053867 ], 19, 0 );
    const_str_plain__check_timeout = UNSTREAM_STRING_ASCII( &constant_bin[ 1050567 ], 14, 1 );
    const_tuple_fff35330d783c7cbe09d00630da65907_tuple = PyTuple_New( 8 );
    PyTuple_SET_ITEM( const_tuple_fff35330d783c7cbe09d00630da65907_tuple, 0, const_str_plain_self ); Py_INCREF( const_str_plain_self );
    PyTuple_SET_ITEM( const_tuple_fff35330d783c7cbe09d00630da65907_tuple, 1, const_str_plain__deadstate ); Py_INCREF( const_str_plain__deadstate );
    PyTuple_SET_ITEM( const_tuple_fff35330d783c7cbe09d00630da65907_tuple, 2, const_str_plain__waitpid ); Py_INCREF( const_str_plain__waitpid );
    PyTuple_SET_ITEM( const_tuple_fff35330d783c7cbe09d00630da65907_tuple, 3, const_str_plain__WNOHANG ); Py_INCREF( const_str_plain__WNOHANG );
    PyTuple_SET_ITEM( const_tuple_fff35330d783c7cbe09d00630da65907_tuple, 4, const_str_plain__ECHILD ); Py_INCREF( const_str_plain__ECHILD );
    PyTuple_SET_ITEM( const_tuple_fff35330d783c7cbe09d00630da65907_tuple, 5, const_str_plain_pid ); Py_INCREF( const_str_plain_pid );
    PyTuple_SET_ITEM( const_tuple_fff35330d783c7cbe09d00630da65907_tuple, 6, const_str_plain_sts ); Py_INCREF( const_str_plain_sts );
    PyTuple_SET_ITEM( const_tuple_fff35330d783c7cbe09d00630da65907_tuple, 7, const_str_plain_e ); Py_INCREF( const_str_plain_e );
    const_str_plain_getstatusoutput = UNSTREAM_STRING_ASCII( &constant_bin[ 1046245 ], 15, 1 );
    const_str_plain__copy = UNSTREAM_STRING_ASCII( &constant_bin[ 32561 ], 5, 1 );
    const_str_digest_dcd462023a553d64f3f2590b895d01db = UNSTREAM_STRING_ASCII( &constant_bin[ 1053886 ], 23, 0 );
    const_str_digest_2386d871d226995e0c34ee5ff8d725b0 = UNSTREAM_STRING_ASCII( &constant_bin[ 1053909 ], 25, 0 );
    const_str_plain_CTRL_BREAK_EVENT = UNSTREAM_STRING_ASCII( &constant_bin[ 1053934 ], 16, 1 );
    const_str_digest_4b89cb8f2efcc65423014358bf5bbcaa = UNSTREAM_STRING_ASCII( &constant_bin[ 1053950 ], 36, 0 );
    const_str_digest_1fe7c2f33755e78e0808f49c8f55e2fb = UNSTREAM_STRING_ASCII( &constant_bin[ 1053986 ], 26, 0 );
    const_str_plain__try_wait = UNSTREAM_STRING_ASCII( &constant_bin[ 1050160 ], 9, 1 );
    const_str_digest_c293a5f4ec55acb4d02352a014e64c8e = UNSTREAM_STRING_ASCII( &constant_bin[ 1054012 ], 35, 0 );
    const_str_digest_a9baa6c4286527d268d784d318f29772 = UNSTREAM_STRING_ASCII( &constant_bin[ 1054047 ], 58, 0 );
    const_str_digest_48844c21ab42096c08c915c9a31d8a19 = UNSTREAM_STRING_ASCII( &constant_bin[ 1054105 ], 1355, 0 );
    const_str_plain_WAIT_OBJECT_0 = UNSTREAM_STRING_ASCII( &constant_bin[ 1053162 ], 13, 1 );
    const_tuple_661bad9cbc9a35bb6615dc0b659093ae_tuple = PyTuple_New( 6 );
    const_str_plain_faulthandler = UNSTREAM_STRING_ASCII( &constant_bin[ 1055460 ], 12, 1 );
    PyTuple_SET_ITEM( const_tuple_661bad9cbc9a35bb6615dc0b659093ae_tuple, 0, const_str_plain_faulthandler ); Py_INCREF( const_str_plain_faulthandler );
    PyTuple_SET_ITEM( const_tuple_661bad9cbc9a35bb6615dc0b659093ae_tuple, 1, const_str_plain_tracemalloc ); Py_INCREF( const_str_plain_tracemalloc );
    PyTuple_SET_ITEM( const_tuple_661bad9cbc9a35bb6615dc0b659093ae_tuple, 2, const_str_plain_importtime ); Py_INCREF( const_str_plain_importtime );
    PyTuple_SET_ITEM( const_tuple_661bad9cbc9a35bb6615dc0b659093ae_tuple, 3, const_str_plain_showalloccount ); Py_INCREF( const_str_plain_showalloccount );
    PyTuple_SET_ITEM( const_tuple_661bad9cbc9a35bb6615dc0b659093ae_tuple, 4, const_str_plain_showrefcount ); Py_INCREF( const_str_plain_showrefcount );
    PyTuple_SET_ITEM( const_tuple_661bad9cbc9a35bb6615dc0b659093ae_tuple, 5, const_str_plain_utf8 ); Py_INCREF( const_str_plain_utf8 );
    const_str_digest_22989ef04fa2851112debbb34c367cd5 = UNSTREAM_STRING_ASCII( &constant_bin[ 1055472 ], 14, 0 );
    const_tuple_str_plain_STARTUPINFO_tuple_empty_tuple = PyTuple_New( 2 );
    PyTuple_SET_ITEM( const_tuple_str_plain_STARTUPINFO_tuple_empty_tuple, 0, const_str_plain_STARTUPINFO ); Py_INCREF( const_str_plain_STARTUPINFO );
    PyTuple_SET_ITEM( const_tuple_str_plain_STARTUPINFO_tuple_empty_tuple, 1, const_tuple_empty ); Py_INCREF( const_tuple_empty );
    const_str_plain_WIFSIGNALED = UNSTREAM_STRING_ASCII( &constant_bin[ 1055486 ], 11, 1 );
    const_str_plain_Handle = UNSTREAM_STRING_ASCII( &constant_bin[ 3447 ], 6, 1 );
    const_str_plain_wait_flags = UNSTREAM_STRING_ASCII( &constant_bin[ 1055497 ], 10, 1 );
    const_str_plain_CreatePipe = UNSTREAM_STRING_ASCII( &constant_bin[ 1055507 ], 10, 1 );
    const_str_plain_DuplicateHandle = UNSTREAM_STRING_ASCII( &constant_bin[ 1055517 ], 15, 1 );
    const_str_digest_09f66a71a4fc28a672963a6ed2ac1f83 = UNSTREAM_STRING_ASCII( &constant_bin[ 1055532 ], 26, 0 );
    const_str_plain_line_buffering = UNSTREAM_STRING_ASCII( &constant_bin[ 1055558 ], 14, 1 );
    const_str_digest_9872b006876be6449800507bda736085 = UNSTREAM_STRING_ASCII( &constant_bin[ 1055572 ], 25, 0 );
    const_str_plain_msvcrt = UNSTREAM_STRING_ASCII( &constant_bin[ 1055597 ], 6, 1 );
    const_str_plain_getandroidapilevel = UNSTREAM_STRING_ASCII( &constant_bin[ 1055603 ], 18, 1 );
    const_tuple_type_int_tuple = PyTuple_New( 1 );
    PyTuple_SET_ITEM( const_tuple_type_int_tuple, 0, (PyObject *)&PyLong_Type ); Py_INCREF( (PyObject *)&PyLong_Type );
    const_str_angle_setcontraction = UNSTREAM_STRING_ASCII( &constant_bin[ 1055621 ], 16, 0 );
    const_str_digest_28798c26179676c7fa1a3ff06fce120f = UNSTREAM_STRING_ASCII( &constant_bin[ 1055637 ], 23, 0 );
    const_str_plain_is_alive = UNSTREAM_STRING_ASCII( &constant_bin[ 1055660 ], 8, 1 );
    const_tuple_ccb354e7993a1a686857aa7debf87169_tuple = PyTuple_New( 4 );
    PyTuple_SET_ITEM( const_tuple_ccb354e7993a1a686857aa7debf87169_tuple, 0, const_str_plain_timeout ); Py_INCREF( const_str_plain_timeout );
    PyTuple_SET_ITEM( const_tuple_ccb354e7993a1a686857aa7debf87169_tuple, 1, const_str_plain_popenargs ); Py_INCREF( const_str_plain_popenargs );
    PyTuple_SET_ITEM( const_tuple_ccb354e7993a1a686857aa7debf87169_tuple, 2, const_str_plain_kwargs ); Py_INCREF( const_str_plain_kwargs );
    PyTuple_SET_ITEM( const_tuple_ccb354e7993a1a686857aa7debf87169_tuple, 3, const_str_plain_p ); Py_INCREF( const_str_plain_p );
    const_str_digest_e096819985cef365d5caa59be5dc3e0d = UNSTREAM_STRING_ASCII( &constant_bin[ 1055668 ], 50, 0 );
    const_str_digest_c67562936c6fdce3db01658a88125f57 = UNSTREAM_STRING_ASCII( &constant_bin[ 1055718 ], 20, 0 );
    const_str_digest_79ad71fbe87b58faeda4ba23873ab316 = UNSTREAM_STRING_ASCII( &constant_bin[ 1055738 ], 19, 0 );
    const_str_plain_Lock = UNSTREAM_STRING_ASCII( &constant_bin[ 355921 ], 4, 1 );
    const_str_digest_2d9aade0afb2c93d441372ae2b274606 = UNSTREAM_STRING_ASCII( &constant_bin[ 1055757 ], 825, 0 );
    const_str_digest_f63dd4474459d20b2148cad38ff3a3a4 = UNSTREAM_STRING_ASCII( &constant_bin[ 1056582 ], 18, 0 );
    const_tuple_99b88f8bafa923a962cefb9576dd6911_tuple = PyTuple_New( 4 );
    PyTuple_SET_ITEM( const_tuple_99b88f8bafa923a962cefb9576dd6911_tuple, 0, const_str_plain_self ); Py_INCREF( const_str_plain_self );
    PyTuple_SET_ITEM( const_tuple_99b88f8bafa923a962cefb9576dd6911_tuple, 1, const_str_plain_wait_flags ); Py_INCREF( const_str_plain_wait_flags );
    PyTuple_SET_ITEM( const_tuple_99b88f8bafa923a962cefb9576dd6911_tuple, 2, const_str_plain_pid ); Py_INCREF( const_str_plain_pid );
    PyTuple_SET_ITEM( const_tuple_99b88f8bafa923a962cefb9576dd6911_tuple, 3, const_str_plain_sts ); Py_INCREF( const_str_plain_sts );
    const_str_plain_SIGTERM = UNSTREAM_STRING_ASCII( &constant_bin[ 1051574 ], 7, 1 );
    const_dict_22c19d2ba6a30c2bc2d52043b2a0b7a3 = _PyDict_NewPresized( 3 );
    PyDict_SetItem( const_dict_22c19d2ba6a30c2bc2d52043b2a0b7a3, const_str_plain_encoding, Py_None );
    PyDict_SetItem( const_dict_22c19d2ba6a30c2bc2d52043b2a0b7a3, const_str_plain_errors, Py_None );
    PyDict_SetItem( const_dict_22c19d2ba6a30c2bc2d52043b2a0b7a3, const_str_plain_text, Py_None );
    assert( PyDict_Size( const_dict_22c19d2ba6a30c2bc2d52043b2a0b7a3 ) == 3 );
    const_str_plain__WIFEXITED = UNSTREAM_STRING_ASCII( &constant_bin[ 1056600 ], 10, 1 );
    const_tuple_str_plain_cmd_tuple = PyTuple_New( 1 );
    PyTuple_SET_ITEM( const_tuple_str_plain_cmd_tuple, 0, const_str_plain_cmd ); Py_INCREF( const_str_plain_cmd );
    const_str_digest_f58f57a774a6a0292157f8096bb67059 = UNSTREAM_STRING_ASCII( &constant_bin[ 1056610 ], 21, 0 );
    const_str_plain__optim_args_from_interpreter_flags = UNSTREAM_STRING_ASCII( &constant_bin[ 1056631 ], 34, 1 );
    const_tuple_14ea0634846f7a7bf710e42f8a23be2c_tuple = PyMarshal_ReadObjectFromString( (char *)&constant_bin[ 1056665 ], 302 );
    const_str_plain_stdout_thread = UNSTREAM_STRING_ASCII( &constant_bin[ 1056967 ], 13, 1 );
    const_str_plain__WSTOPSIG = UNSTREAM_STRING_ASCII( &constant_bin[ 1056980 ], 9, 1 );
    const_str_digest_7823c80713f79a3a1017f8e4a72a1d94 = UNSTREAM_STRING_ASCII( &constant_bin[ 1056989 ], 11, 0 );
    const_dict_0c016cbcf3a29fcfbd4e8161e127568c = _PyDict_NewPresized( 6 );
    PyDict_SetItem( const_dict_0c016cbcf3a29fcfbd4e8161e127568c, const_str_plain_debug, const_str_plain_d );
    const_str_plain_dont_write_bytecode = UNSTREAM_STRING_ASCII( &constant_bin[ 1057000 ], 19, 1 );
    PyDict_SetItem( const_dict_0c016cbcf3a29fcfbd4e8161e127568c, const_str_plain_dont_write_bytecode, const_str_plain_B );
    PyDict_SetItem( const_dict_0c016cbcf3a29fcfbd4e8161e127568c, const_str_plain_no_site, const_str_plain_S );
    PyDict_SetItem( const_dict_0c016cbcf3a29fcfbd4e8161e127568c, const_str_plain_verbose, const_str_plain_v );
    PyDict_SetItem( const_dict_0c016cbcf3a29fcfbd4e8161e127568c, const_str_plain_bytes_warning, const_str_plain_b );
    PyDict_SetItem( const_dict_0c016cbcf3a29fcfbd4e8161e127568c, const_str_plain_quiet, const_str_plain_q );
    assert( PyDict_Size( const_dict_0c016cbcf3a29fcfbd4e8161e127568c ) == 6 );
    const_tuple_str_digest_4e3a0250114d61f59638f6789662dcba_tuple = PyTuple_New( 1 );
    PyTuple_SET_ITEM( const_tuple_str_digest_4e3a0250114d61f59638f6789662dcba_tuple, 0, const_str_digest_4e3a0250114d61f59638f6789662dcba ); Py_INCREF( const_str_digest_4e3a0250114d61f59638f6789662dcba );
    const_tuple_str_digest_885315c83fa89d51965111c7f94ba941_tuple = PyTuple_New( 1 );
    PyTuple_SET_ITEM( const_tuple_str_digest_885315c83fa89d51965111c7f94ba941_tuple, 0, const_str_digest_885315c83fa89d51965111c7f94ba941 ); Py_INCREF( const_str_digest_885315c83fa89d51965111c7f94ba941 );
    const_str_digest_166f9097b3e951eb97a38979661ad5f0 = UNSTREAM_STRING_ASCII( &constant_bin[ 1057019 ], 30, 0 );
    const_tuple_str_digest_14e5e85200836625f117ca82ffb5a872_tuple = PyTuple_New( 1 );
    PyTuple_SET_ITEM( const_tuple_str_digest_14e5e85200836625f117ca82ffb5a872_tuple, 0, const_str_digest_14e5e85200836625f117ca82ffb5a872 ); Py_INCREF( const_str_digest_14e5e85200836625f117ca82ffb5a872 );
    const_float_0_0005 = UNSTREAM_FLOAT( &constant_bin[ 1057049 ] );
    const_tuple_str_digest_1e2d75506e9e2e171471d3f72a5fa834_tuple = PyTuple_New( 1 );
    PyTuple_SET_ITEM( const_tuple_str_digest_1e2d75506e9e2e171471d3f72a5fa834_tuple, 0, const_str_digest_1e2d75506e9e2e171471d3f72a5fa834 ); Py_INCREF( const_str_digest_1e2d75506e9e2e171471d3f72a5fa834 );
    const_str_plain_check_call = UNSTREAM_STRING_ASCII( &constant_bin[ 448961 ], 10, 1 );
    const_str_plain__make_inheritable = UNSTREAM_STRING_ASCII( &constant_bin[ 1055643 ], 17, 1 );
    const_str_digest_b0f9489f19895430140f8c443e5e12cc = UNSTREAM_STRING_ASCII( &constant_bin[ 1057057 ], 20, 0 );
    const_tuple_str_plain_self_str_plain_input_tuple = PyTuple_New( 2 );
    PyTuple_SET_ITEM( const_tuple_str_plain_self_str_plain_input_tuple, 0, const_str_plain_self ); Py_INCREF( const_str_plain_self );
    PyTuple_SET_ITEM( const_tuple_str_plain_self_str_plain_input_tuple, 1, const_str_plain_input ); Py_INCREF( const_str_plain_input );
    const_str_plain_WIFEXITED = UNSTREAM_STRING_ASCII( &constant_bin[ 1056601 ], 9, 1 );
    const_dict_073457380201d8dc13a75e4bf4f18aab = _PyDict_NewPresized( 6 );
    PyDict_SetItem( const_dict_073457380201d8dc13a75e4bf4f18aab, const_str_plain_dwFlags, const_int_0 );
    PyDict_SetItem( const_dict_073457380201d8dc13a75e4bf4f18aab, const_str_plain_hStdInput, Py_None );
    PyDict_SetItem( const_dict_073457380201d8dc13a75e4bf4f18aab, const_str_plain_hStdOutput, Py_None );
    PyDict_SetItem( const_dict_073457380201d8dc13a75e4bf4f18aab, const_str_plain_hStdError, Py_None );
    PyDict_SetItem( const_dict_073457380201d8dc13a75e4bf4f18aab, const_str_plain_wShowWindow, const_int_0 );
    PyDict_SetItem( const_dict_073457380201d8dc13a75e4bf4f18aab, const_str_plain_lpAttributeList, Py_None );
    assert( PyDict_Size( const_dict_073457380201d8dc13a75e4bf4f18aab ) == 6 );
    const_str_digest_c3c4dae216dc74ce02c15a7aab8a2cb4 = UNSTREAM_STRING_ASCII( &constant_bin[ 1057077 ], 17, 0 );
    const_tuple_str_plain_self_str_plain_rc_tuple = PyTuple_New( 2 );
    PyTuple_SET_ITEM( const_tuple_str_plain_self_str_plain_rc_tuple, 0, const_str_plain_self ); Py_INCREF( const_str_plain_self );
    PyTuple_SET_ITEM( const_tuple_str_plain_self_str_plain_rc_tuple, 1, const_str_plain_rc ); Py_INCREF( const_str_plain_rc );
    const_str_digest_f4fe94d7cfc53f3b8f1f9e21a8236719 = UNSTREAM_STRING_ASCII( &constant_bin[ 1057094 ], 1506, 0 );
    const_str_plain__sigint_wait_secs = UNSTREAM_STRING_ASCII( &constant_bin[ 1058600 ], 17, 1 );
    const_str_digest_8ec5ae439f87f3f0c243fb8d22338d95 = UNSTREAM_STRING_ASCII( &constant_bin[ 1058617 ], 25, 0 );
    const_str_plain_kill = UNSTREAM_STRING_ASCII( &constant_bin[ 1046526 ], 4, 1 );
    const_list_2de1e2426e82522523b314e32dc118d0_list = PyList_New( 14 );
    PyList_SET_ITEM( const_list_2de1e2426e82522523b314e32dc118d0_list, 0, const_str_plain_Popen ); Py_INCREF( const_str_plain_Popen );
    PyList_SET_ITEM( const_list_2de1e2426e82522523b314e32dc118d0_list, 1, const_str_plain_PIPE ); Py_INCREF( const_str_plain_PIPE );
    PyList_SET_ITEM( const_list_2de1e2426e82522523b314e32dc118d0_list, 2, const_str_plain_STDOUT ); Py_INCREF( const_str_plain_STDOUT );
    PyList_SET_ITEM( const_list_2de1e2426e82522523b314e32dc118d0_list, 3, const_str_plain_call ); Py_INCREF( const_str_plain_call );
    PyList_SET_ITEM( const_list_2de1e2426e82522523b314e32dc118d0_list, 4, const_str_plain_check_call ); Py_INCREF( const_str_plain_check_call );
    PyList_SET_ITEM( const_list_2de1e2426e82522523b314e32dc118d0_list, 5, const_str_plain_getstatusoutput ); Py_INCREF( const_str_plain_getstatusoutput );
    const_str_plain_getoutput = UNSTREAM_STRING_ASCII( &constant_bin[ 1048556 ], 9, 1 );
    PyList_SET_ITEM( const_list_2de1e2426e82522523b314e32dc118d0_list, 6, const_str_plain_getoutput ); Py_INCREF( const_str_plain_getoutput );
    PyList_SET_ITEM( const_list_2de1e2426e82522523b314e32dc118d0_list, 7, const_str_plain_check_output ); Py_INCREF( const_str_plain_check_output );
    PyList_SET_ITEM( const_list_2de1e2426e82522523b314e32dc118d0_list, 8, const_str_plain_run ); Py_INCREF( const_str_plain_run );
    PyList_SET_ITEM( const_list_2de1e2426e82522523b314e32dc118d0_list, 9, const_str_plain_CalledProcessError ); Py_INCREF( const_str_plain_CalledProcessError );
    PyList_SET_ITEM( const_list_2de1e2426e82522523b314e32dc118d0_list, 10, const_str_plain_DEVNULL ); Py_INCREF( const_str_plain_DEVNULL );
    PyList_SET_ITEM( const_list_2de1e2426e82522523b314e32dc118d0_list, 11, const_str_plain_SubprocessError ); Py_INCREF( const_str_plain_SubprocessError );
    PyList_SET_ITEM( const_list_2de1e2426e82522523b314e32dc118d0_list, 12, const_str_plain_TimeoutExpired ); Py_INCREF( const_str_plain_TimeoutExpired );
    const_str_plain_CompletedProcess = UNSTREAM_STRING_ASCII( &constant_bin[ 1046660 ], 16, 1 );
    PyList_SET_ITEM( const_list_2de1e2426e82522523b314e32dc118d0_list, 13, const_str_plain_CompletedProcess ); Py_INCREF( const_str_plain_CompletedProcess );
    const_str_digest_64e76603765a4738675c6641b73cb9a4 = UNSTREAM_STRING_ASCII( &constant_bin[ 1058642 ], 63, 0 );
    const_str_plain_SIGKILL = UNSTREAM_STRING_ASCII( &constant_bin[ 1045729 ], 7, 1 );
    const_tuple_31560b4570051a8862725158ecfbeb2d_tuple = PyTuple_New( 5 );
    PyTuple_SET_ITEM( const_tuple_31560b4570051a8862725158ecfbeb2d_tuple, 0, const_str_plain_self ); Py_INCREF( const_str_plain_self );
    PyTuple_SET_ITEM( const_tuple_31560b4570051a8862725158ecfbeb2d_tuple, 1, const_str_plain_args ); Py_INCREF( const_str_plain_args );
    PyTuple_SET_ITEM( const_tuple_31560b4570051a8862725158ecfbeb2d_tuple, 2, const_str_plain_returncode ); Py_INCREF( const_str_plain_returncode );
    PyTuple_SET_ITEM( const_tuple_31560b4570051a8862725158ecfbeb2d_tuple, 3, const_str_plain_stdout ); Py_INCREF( const_str_plain_stdout );
    PyTuple_SET_ITEM( const_tuple_31560b4570051a8862725158ecfbeb2d_tuple, 4, const_str_plain_stderr ); Py_INCREF( const_str_plain_stderr );
    const_str_digest_efdf129abd1c7a9613b43bdd2cdb76ca = UNSTREAM_STRING_ASCII( &constant_bin[ 1058705 ], 48, 0 );
    const_str_digest_e1960ce654cb854d574db0763ef9f0c9 = UNSTREAM_STRING_ASCII( &constant_bin[ 1058753 ], 33, 0 );
    const_str_digest_d2dd934860f14f99585c78ba1e12ccb4 = UNSTREAM_STRING_ASCII( &constant_bin[ 1058786 ], 50, 0 );
    const_str_digest_95b6ea17ae512e14a9afdf83d45b254e = UNSTREAM_STRING_ASCII( &constant_bin[ 1058836 ], 21, 0 );
    const_str_digest_c1c4cc87478b3ab151a2911bde978276 = UNSTREAM_STRING_ASCII( &constant_bin[ 1058857 ], 64, 0 );
    const_str_digest_32c9e04a9bd5680040a0920d9760bb51 = UNSTREAM_STRING_ASCII( &constant_bin[ 1050030 ], 20, 0 );
    const_tuple_fb54ea688cc17622d0908c7f61795e76_tuple = PyTuple_New( 11 );
    PyTuple_SET_ITEM( const_tuple_fb54ea688cc17622d0908c7f61795e76_tuple, 0, const_str_plain_self ); Py_INCREF( const_str_plain_self );
    PyTuple_SET_ITEM( const_tuple_fb54ea688cc17622d0908c7f61795e76_tuple, 1, const_str_plain_stdin ); Py_INCREF( const_str_plain_stdin );
    PyTuple_SET_ITEM( const_tuple_fb54ea688cc17622d0908c7f61795e76_tuple, 2, const_str_plain_stdout ); Py_INCREF( const_str_plain_stdout );
    PyTuple_SET_ITEM( const_tuple_fb54ea688cc17622d0908c7f61795e76_tuple, 3, const_str_plain_stderr ); Py_INCREF( const_str_plain_stderr );
    PyTuple_SET_ITEM( const_tuple_fb54ea688cc17622d0908c7f61795e76_tuple, 4, const_str_plain_p2cread ); Py_INCREF( const_str_plain_p2cread );
    PyTuple_SET_ITEM( const_tuple_fb54ea688cc17622d0908c7f61795e76_tuple, 5, const_str_plain_p2cwrite ); Py_INCREF( const_str_plain_p2cwrite );
    PyTuple_SET_ITEM( const_tuple_fb54ea688cc17622d0908c7f61795e76_tuple, 6, const_str_plain_c2pread ); Py_INCREF( const_str_plain_c2pread );
    PyTuple_SET_ITEM( const_tuple_fb54ea688cc17622d0908c7f61795e76_tuple, 7, const_str_plain_c2pwrite ); Py_INCREF( const_str_plain_c2pwrite );
    PyTuple_SET_ITEM( const_tuple_fb54ea688cc17622d0908c7f61795e76_tuple, 8, const_str_plain_errread ); Py_INCREF( const_str_plain_errread );
    PyTuple_SET_ITEM( const_tuple_fb54ea688cc17622d0908c7f61795e76_tuple, 9, const_str_plain_errwrite ); Py_INCREF( const_str_plain_errwrite );
    PyTuple_SET_ITEM( const_tuple_fb54ea688cc17622d0908c7f61795e76_tuple, 10, const_str_plain__ ); Py_INCREF( const_str_plain__ );
    const_str_digest_6c198d899a8b04cb613a55f20364551d = UNSTREAM_STRING_ASCII( &constant_bin[ 1058921 ], 10, 0 );
    const_tuple_cf15e362698fabb360ad29cd5431b46a_tuple = PyTuple_New( 1 );
    PyTuple_SET_ITEM( const_tuple_cf15e362698fabb360ad29cd5431b46a_tuple, 0, const_tuple_str_digest_24ffb4df8f6d99d30b1c0d82c11728f6_str_plain_dev_tuple ); Py_INCREF( const_tuple_str_digest_24ffb4df8f6d99d30b1c0d82c11728f6_str_plain_dev_tuple );
    const_str_plain__mswindows = UNSTREAM_STRING_ASCII( &constant_bin[ 1058931 ], 10, 1 );
    const_str_digest_5dfadc7c87bc4f008360fea2b750683b = UNSTREAM_STRING_ASCII( &constant_bin[ 1058941 ], 17, 0 );
    const_str_digest_0a633d267f972c6e0c6b9540b7fcf4fa = UNSTREAM_STRING_ASCII( &constant_bin[ 1058958 ], 43, 0 );
    const_str_plain_INFINITE = UNSTREAM_STRING_ASCII( &constant_bin[ 1059001 ], 8, 1 );
    const_str_plain__remaining_time = UNSTREAM_STRING_ASCII( &constant_bin[ 1058842 ], 15, 1 );
    const_str_plain__active = UNSTREAM_STRING_ASCII( &constant_bin[ 1059009 ], 7, 1 );
    const_str_plain_WAIT_TIMEOUT = UNSTREAM_STRING_ASCII( &constant_bin[ 1059016 ], 12, 1 );
    const_tuple_str_plain_self_str_plain_endtime_str_plain_orig_timeout_tuple = PyTuple_New( 3 );
    PyTuple_SET_ITEM( const_tuple_str_plain_self_str_plain_endtime_str_plain_orig_timeout_tuple, 0, const_str_plain_self ); Py_INCREF( const_str_plain_self );
    PyTuple_SET_ITEM( const_tuple_str_plain_self_str_plain_endtime_str_plain_orig_timeout_tuple, 1, const_str_plain_endtime ); Py_INCREF( const_str_plain_endtime );
    PyTuple_SET_ITEM( const_tuple_str_plain_self_str_plain_endtime_str_plain_orig_timeout_tuple, 2, const_str_plain_orig_timeout ); Py_INCREF( const_str_plain_orig_timeout );
    const_str_digest_b364aa0abc3244518b37748082f33aee = UNSTREAM_STRING_ASCII( &constant_bin[ 1059028 ], 31, 0 );
    const_str_digest_c52570f1e4c4b8688cc11fd57b87de93 = UNSTREAM_STRING_ASCII( &constant_bin[ 1059059 ], 24, 0 );
    const_tuple_str_plain_self_str_plain_handle_list_tuple = PyTuple_New( 2 );
    PyTuple_SET_ITEM( const_tuple_str_plain_self_str_plain_handle_list_tuple, 0, const_str_plain_self ); Py_INCREF( const_str_plain_self );
    PyTuple_SET_ITEM( const_tuple_str_plain_self_str_plain_handle_list_tuple, 1, const_str_plain_handle_list ); Py_INCREF( const_str_plain_handle_list );
    const_tuple_910481b0a4c3ef57eddfaac737d27911_tuple = PyTuple_New( 8 );
    PyTuple_SET_ITEM( const_tuple_910481b0a4c3ef57eddfaac737d27911_tuple, 0, const_str_plain_self ); Py_INCREF( const_str_plain_self );
    PyTuple_SET_ITEM( const_tuple_910481b0a4c3ef57eddfaac737d27911_tuple, 1, const_str_plain_sts ); Py_INCREF( const_str_plain_sts );
    const_str_plain__WIFSIGNALED = UNSTREAM_STRING_ASCII( &constant_bin[ 1059083 ], 12, 1 );
    PyTuple_SET_ITEM( const_tuple_910481b0a4c3ef57eddfaac737d27911_tuple, 2, const_str_plain__WIFSIGNALED ); Py_INCREF( const_str_plain__WIFSIGNALED );
    PyTuple_SET_ITEM( const_tuple_910481b0a4c3ef57eddfaac737d27911_tuple, 3, const_str_plain__WTERMSIG ); Py_INCREF( const_str_plain__WTERMSIG );
    PyTuple_SET_ITEM( const_tuple_910481b0a4c3ef57eddfaac737d27911_tuple, 4, const_str_plain__WIFEXITED ); Py_INCREF( const_str_plain__WIFEXITED );
    PyTuple_SET_ITEM( const_tuple_910481b0a4c3ef57eddfaac737d27911_tuple, 5, const_str_plain__WEXITSTATUS ); Py_INCREF( const_str_plain__WEXITSTATUS );
    PyTuple_SET_ITEM( const_tuple_910481b0a4c3ef57eddfaac737d27911_tuple, 6, const_str_plain__WIFSTOPPED ); Py_INCREF( const_str_plain__WIFSTOPPED );
    PyTuple_SET_ITEM( const_tuple_910481b0a4c3ef57eddfaac737d27911_tuple, 7, const_str_plain__WSTOPSIG ); Py_INCREF( const_str_plain__WSTOPSIG );
    const_tuple_str_plain_self_str_plain_CloseHandle_tuple = PyTuple_New( 2 );
    PyTuple_SET_ITEM( const_tuple_str_plain_self_str_plain_CloseHandle_tuple, 0, const_str_plain_self ); Py_INCREF( const_str_plain_self );
    PyTuple_SET_ITEM( const_tuple_str_plain_self_str_plain_CloseHandle_tuple, 1, const_str_plain_CloseHandle ); Py_INCREF( const_str_plain_CloseHandle );
    const_str_plain_retcode = UNSTREAM_STRING_ASCII( &constant_bin[ 1047432 ], 7, 1 );
    const_tuple_9d53b184c0a5bb37c7eb8baced87290a_tuple = PyTuple_New( 6 );
    PyTuple_SET_ITEM( const_tuple_9d53b184c0a5bb37c7eb8baced87290a_tuple, 0, const_str_plain_seq ); Py_INCREF( const_str_plain_seq );
    PyTuple_SET_ITEM( const_tuple_9d53b184c0a5bb37c7eb8baced87290a_tuple, 1, const_str_plain_result ); Py_INCREF( const_str_plain_result );
    PyTuple_SET_ITEM( const_tuple_9d53b184c0a5bb37c7eb8baced87290a_tuple, 2, const_str_plain_needquote ); Py_INCREF( const_str_plain_needquote );
    PyTuple_SET_ITEM( const_tuple_9d53b184c0a5bb37c7eb8baced87290a_tuple, 3, const_str_plain_arg ); Py_INCREF( const_str_plain_arg );
    PyTuple_SET_ITEM( const_tuple_9d53b184c0a5bb37c7eb8baced87290a_tuple, 4, const_str_plain_bs_buf ); Py_INCREF( const_str_plain_bs_buf );
    PyTuple_SET_ITEM( const_tuple_9d53b184c0a5bb37c7eb8baced87290a_tuple, 5, const_str_plain_c ); Py_INCREF( const_str_plain_c );
    const_str_digest_d4cf3b1ab6270b5f4023d8f76f66fb62 = UNSTREAM_STRING_ASCII( &constant_bin[ 1059095 ], 325, 0 );
    const_str_digest_f7cc3ebb17bcca148e03473a571dfdea = UNSTREAM_STRING_ASCII( &constant_bin[ 1059420 ], 13, 0 );
    const_str_digest_927c83f65f23dc939b13cf98a20b74de = UNSTREAM_STRING_ASCII( &constant_bin[ 1059433 ], 45, 0 );
    const_float_0_05 = UNSTREAM_FLOAT( &constant_bin[ 1059478 ] );
    const_str_plain_WaitForSingleObject = UNSTREAM_STRING_ASCII( &constant_bin[ 1053142 ], 19, 1 );
    const_str_digest_ff62834d72b88ff76d329084e1313437 = UNSTREAM_STRING_ASCII( &constant_bin[ 1059486 ], 1558, 0 );
    const_str_digest_b2039696d546f34d83614019cb0ad468 = UNSTREAM_STRING_ASCII( &constant_bin[ 1061044 ], 14, 0 );
    const_str_digest_99c68c9315a477a5c8bc86e0cf57cf7c = UNSTREAM_STRING_ASCII( &constant_bin[ 1061058 ], 6, 0 );
    const_str_digest_01cd7c708ecfb9de8b6cc9427d24ca89 = UNSTREAM_STRING_ASCII( &constant_bin[ 1061064 ], 15, 0 );
    const_tuple_e544aafec9de467b5b69acb717e74e6d_tuple = PyTuple_New( 4 );
    PyTuple_SET_ITEM( const_tuple_e544aafec9de467b5b69acb717e74e6d_tuple, 0, const_str_plain_popenargs ); Py_INCREF( const_str_plain_popenargs );
    PyTuple_SET_ITEM( const_tuple_e544aafec9de467b5b69acb717e74e6d_tuple, 1, const_str_plain_kwargs ); Py_INCREF( const_str_plain_kwargs );
    PyTuple_SET_ITEM( const_tuple_e544aafec9de467b5b69acb717e74e6d_tuple, 2, const_str_plain_retcode ); Py_INCREF( const_str_plain_retcode );
    PyTuple_SET_ITEM( const_tuple_e544aafec9de467b5b69acb717e74e6d_tuple, 3, const_str_plain_cmd ); Py_INCREF( const_str_plain_cmd );
    const_str_digest_cad0983096c75ec466fc8048e9db576d = UNSTREAM_STRING_ASCII( &constant_bin[ 1061079 ], 53, 0 );
    const_list_fdef13c4c35998d41daafbf2cb2f200f_list = PyList_New( 19 );
    PyList_SET_ITEM( const_list_fdef13c4c35998d41daafbf2cb2f200f_list, 0, const_str_plain_CREATE_NEW_CONSOLE ); Py_INCREF( const_str_plain_CREATE_NEW_CONSOLE );
    PyList_SET_ITEM( const_list_fdef13c4c35998d41daafbf2cb2f200f_list, 1, const_str_plain_CREATE_NEW_PROCESS_GROUP ); Py_INCREF( const_str_plain_CREATE_NEW_PROCESS_GROUP );
    PyList_SET_ITEM( const_list_fdef13c4c35998d41daafbf2cb2f200f_list, 2, const_str_plain_STD_INPUT_HANDLE ); Py_INCREF( const_str_plain_STD_INPUT_HANDLE );
    PyList_SET_ITEM( const_list_fdef13c4c35998d41daafbf2cb2f200f_list, 3, const_str_plain_STD_OUTPUT_HANDLE ); Py_INCREF( const_str_plain_STD_OUTPUT_HANDLE );
    PyList_SET_ITEM( const_list_fdef13c4c35998d41daafbf2cb2f200f_list, 4, const_str_plain_STD_ERROR_HANDLE ); Py_INCREF( const_str_plain_STD_ERROR_HANDLE );
    PyList_SET_ITEM( const_list_fdef13c4c35998d41daafbf2cb2f200f_list, 5, const_str_plain_SW_HIDE ); Py_INCREF( const_str_plain_SW_HIDE );
    PyList_SET_ITEM( const_list_fdef13c4c35998d41daafbf2cb2f200f_list, 6, const_str_plain_STARTF_USESTDHANDLES ); Py_INCREF( const_str_plain_STARTF_USESTDHANDLES );
    PyList_SET_ITEM( const_list_fdef13c4c35998d41daafbf2cb2f200f_list, 7, const_str_plain_STARTF_USESHOWWINDOW ); Py_INCREF( const_str_plain_STARTF_USESHOWWINDOW );
    PyList_SET_ITEM( const_list_fdef13c4c35998d41daafbf2cb2f200f_list, 8, const_str_plain_STARTUPINFO ); Py_INCREF( const_str_plain_STARTUPINFO );
    PyList_SET_ITEM( const_list_fdef13c4c35998d41daafbf2cb2f200f_list, 9, const_str_plain_ABOVE_NORMAL_PRIORITY_CLASS ); Py_INCREF( const_str_plain_ABOVE_NORMAL_PRIORITY_CLASS );
    PyList_SET_ITEM( const_list_fdef13c4c35998d41daafbf2cb2f200f_list, 10, const_str_plain_BELOW_NORMAL_PRIORITY_CLASS ); Py_INCREF( const_str_plain_BELOW_NORMAL_PRIORITY_CLASS );
    PyList_SET_ITEM( const_list_fdef13c4c35998d41daafbf2cb2f200f_list, 11, const_str_plain_HIGH_PRIORITY_CLASS ); Py_INCREF( const_str_plain_HIGH_PRIORITY_CLASS );
    PyList_SET_ITEM( const_list_fdef13c4c35998d41daafbf2cb2f200f_list, 12, const_str_plain_IDLE_PRIORITY_CLASS ); Py_INCREF( const_str_plain_IDLE_PRIORITY_CLASS );
    PyList_SET_ITEM( const_list_fdef13c4c35998d41daafbf2cb2f200f_list, 13, const_str_plain_NORMAL_PRIORITY_CLASS ); Py_INCREF( const_str_plain_NORMAL_PRIORITY_CLASS );
    PyList_SET_ITEM( const_list_fdef13c4c35998d41daafbf2cb2f200f_list, 14, const_str_plain_REALTIME_PRIORITY_CLASS ); Py_INCREF( const_str_plain_REALTIME_PRIORITY_CLASS );
    PyList_SET_ITEM( const_list_fdef13c4c35998d41daafbf2cb2f200f_list, 15, const_str_plain_CREATE_NO_WINDOW ); Py_INCREF( const_str_plain_CREATE_NO_WINDOW );
    PyList_SET_ITEM( const_list_fdef13c4c35998d41daafbf2cb2f200f_list, 16, const_str_plain_DETACHED_PROCESS ); Py_INCREF( const_str_plain_DETACHED_PROCESS );
    PyList_SET_ITEM( const_list_fdef13c4c35998d41daafbf2cb2f200f_list, 17, const_str_plain_CREATE_DEFAULT_ERROR_MODE ); Py_INCREF( const_str_plain_CREATE_DEFAULT_ERROR_MODE );
    PyList_SET_ITEM( const_list_fdef13c4c35998d41daafbf2cb2f200f_list, 18, const_str_plain_CREATE_BREAKAWAY_FROM_JOB ); Py_INCREF( const_str_plain_CREATE_BREAKAWAY_FROM_JOB );
    const_tuple_bytes_chr_58_int_pos_2_tuple = PyTuple_New( 2 );
    PyTuple_SET_ITEM( const_tuple_bytes_chr_58_int_pos_2_tuple, 0, const_bytes_chr_58 ); Py_INCREF( const_bytes_chr_58 );
    PyTuple_SET_ITEM( const_tuple_bytes_chr_58_int_pos_2_tuple, 1, const_int_pos_2 ); Py_INCREF( const_int_pos_2 );
    const_str_digest_5d726b70cb8fe8b5fcc08d6baecaf12d = UNSTREAM_STRING_ASCII( &constant_bin[ 1061132 ], 22, 0 );
    const_str_digest_d9cffe6f287cc82f3b2a6b7bfea4bc0e = UNSTREAM_STRING_ASCII( &constant_bin[ 1061154 ], 18, 0 );
    const_tuple_str_plain_cmd_str_plain_data_str_plain_exitcode_str_plain_ex_tuple = PyTuple_New( 4 );
    PyTuple_SET_ITEM( const_tuple_str_plain_cmd_str_plain_data_str_plain_exitcode_str_plain_ex_tuple, 0, const_str_plain_cmd ); Py_INCREF( const_str_plain_cmd );
    PyTuple_SET_ITEM( const_tuple_str_plain_cmd_str_plain_data_str_plain_exitcode_str_plain_ex_tuple, 1, const_str_plain_data ); Py_INCREF( const_str_plain_data );
    PyTuple_SET_ITEM( const_tuple_str_plain_cmd_str_plain_data_str_plain_exitcode_str_plain_ex_tuple, 2, const_str_plain_exitcode ); Py_INCREF( const_str_plain_exitcode );
    PyTuple_SET_ITEM( const_tuple_str_plain_cmd_str_plain_data_str_plain_exitcode_str_plain_ex_tuple, 3, const_str_plain_ex ); Py_INCREF( const_str_plain_ex );
    const_tuple_f457fab1f66c6184eb685077fc2b03b6_tuple = PyTuple_New( 16 );
    PyTuple_SET_ITEM( const_tuple_f457fab1f66c6184eb685077fc2b03b6_tuple, 0, const_int_neg_1 ); Py_INCREF( const_int_neg_1 );
    PyTuple_SET_ITEM( const_tuple_f457fab1f66c6184eb685077fc2b03b6_tuple, 1, Py_None ); Py_INCREF( Py_None );
    PyTuple_SET_ITEM( const_tuple_f457fab1f66c6184eb685077fc2b03b6_tuple, 2, Py_None ); Py_INCREF( Py_None );
    PyTuple_SET_ITEM( const_tuple_f457fab1f66c6184eb685077fc2b03b6_tuple, 3, Py_None ); Py_INCREF( Py_None );
    PyTuple_SET_ITEM( const_tuple_f457fab1f66c6184eb685077fc2b03b6_tuple, 4, Py_None ); Py_INCREF( Py_None );
    PyTuple_SET_ITEM( const_tuple_f457fab1f66c6184eb685077fc2b03b6_tuple, 5, Py_None ); Py_INCREF( Py_None );
    PyTuple_SET_ITEM( const_tuple_f457fab1f66c6184eb685077fc2b03b6_tuple, 6, Py_True ); Py_INCREF( Py_True );
    PyTuple_SET_ITEM( const_tuple_f457fab1f66c6184eb685077fc2b03b6_tuple, 7, Py_False ); Py_INCREF( Py_False );
    PyTuple_SET_ITEM( const_tuple_f457fab1f66c6184eb685077fc2b03b6_tuple, 8, Py_None ); Py_INCREF( Py_None );
    PyTuple_SET_ITEM( const_tuple_f457fab1f66c6184eb685077fc2b03b6_tuple, 9, Py_None ); Py_INCREF( Py_None );
    PyTuple_SET_ITEM( const_tuple_f457fab1f66c6184eb685077fc2b03b6_tuple, 10, Py_None ); Py_INCREF( Py_None );
    PyTuple_SET_ITEM( const_tuple_f457fab1f66c6184eb685077fc2b03b6_tuple, 11, Py_None ); Py_INCREF( Py_None );
    PyTuple_SET_ITEM( const_tuple_f457fab1f66c6184eb685077fc2b03b6_tuple, 12, const_int_0 ); Py_INCREF( const_int_0 );
    PyTuple_SET_ITEM( const_tuple_f457fab1f66c6184eb685077fc2b03b6_tuple, 13, Py_True ); Py_INCREF( Py_True );
    PyTuple_SET_ITEM( const_tuple_f457fab1f66c6184eb685077fc2b03b6_tuple, 14, Py_False ); Py_INCREF( Py_False );
    PyTuple_SET_ITEM( const_tuple_f457fab1f66c6184eb685077fc2b03b6_tuple, 15, const_tuple_empty ); Py_INCREF( const_tuple_empty );
    const_str_plain__waitpid_lock = UNSTREAM_STRING_ASCII( &constant_bin[ 1054091 ], 13, 1 );
    const_str_digest_aba692270bbf18608b3180d8e88dacf3 = UNSTREAM_STRING_ASCII( &constant_bin[ 1061172 ], 17, 0 );
    const_tuple_c048319f0716cd20701fbaaff129a45d_tuple = PyTuple_New( 10 );
    PyTuple_SET_ITEM( const_tuple_c048319f0716cd20701fbaaff129a45d_tuple, 0, const_str_plain_input ); Py_INCREF( const_str_plain_input );
    PyTuple_SET_ITEM( const_tuple_c048319f0716cd20701fbaaff129a45d_tuple, 1, const_str_plain_capture_output ); Py_INCREF( const_str_plain_capture_output );
    PyTuple_SET_ITEM( const_tuple_c048319f0716cd20701fbaaff129a45d_tuple, 2, const_str_plain_timeout ); Py_INCREF( const_str_plain_timeout );
    PyTuple_SET_ITEM( const_tuple_c048319f0716cd20701fbaaff129a45d_tuple, 3, const_str_plain_check ); Py_INCREF( const_str_plain_check );
    PyTuple_SET_ITEM( const_tuple_c048319f0716cd20701fbaaff129a45d_tuple, 4, const_str_plain_popenargs ); Py_INCREF( const_str_plain_popenargs );
    PyTuple_SET_ITEM( const_tuple_c048319f0716cd20701fbaaff129a45d_tuple, 5, const_str_plain_kwargs ); Py_INCREF( const_str_plain_kwargs );
    PyTuple_SET_ITEM( const_tuple_c048319f0716cd20701fbaaff129a45d_tuple, 6, const_str_plain_process ); Py_INCREF( const_str_plain_process );
    PyTuple_SET_ITEM( const_tuple_c048319f0716cd20701fbaaff129a45d_tuple, 7, const_str_plain_stdout ); Py_INCREF( const_str_plain_stdout );
    PyTuple_SET_ITEM( const_tuple_c048319f0716cd20701fbaaff129a45d_tuple, 8, const_str_plain_stderr ); Py_INCREF( const_str_plain_stderr );
    PyTuple_SET_ITEM( const_tuple_c048319f0716cd20701fbaaff129a45d_tuple, 9, const_str_plain_retcode ); Py_INCREF( const_str_plain_retcode );
    const_tuple_7ef29b82f1cb69b263e2866742e2862b_tuple = PyMarshal_ReadObjectFromString( (char *)&constant_bin[ 1061189 ], 477 );
    const_dict_a5979bd3e78699eae28243cd65531cb5 = _PyDict_NewPresized( 1 );
    PyDict_SetItem( const_dict_a5979bd3e78699eae28243cd65531cb5, const_str_plain_timeout, Py_None );
    assert( PyDict_Size( const_dict_a5979bd3e78699eae28243cd65531cb5 ) == 1 );

    constants_created = true;
}

/* Function to verify module private constants for non-corruption. */
#ifndef __NUITKA_NO_ASSERT__
void checkModuleConstants_subprocess( void )
{
    // The module may not have been used at all, then ignore this.
    if (constants_created == false) return;


}
#endif

// The module code objects.
static PyCodeObject *codeobj_344493d524bfa8f2de55b875388073d9;
static PyCodeObject *codeobj_3b8ded27a474e748966db3dc93ed4330;
static PyCodeObject *codeobj_8173f38e5b402db35849e9f35fd86a10;
static PyCodeObject *codeobj_511b93c0afbf8069afc1fef349c67d72;
static PyCodeObject *codeobj_800df6b7458649b7309b2810385e4019;
static PyCodeObject *codeobj_975e88a8e14ee44e8b0b0239cd447315;
static PyCodeObject *codeobj_62c892bd90657b3e328cf24a2a5cb717;
static PyCodeObject *codeobj_5e53de9cfb00a7770460518e667a6e26;
static PyCodeObject *codeobj_175fb9997171de0186ab4a7d7aec4913;
static PyCodeObject *codeobj_c34aed000ce9d0c2f8b25617b8641037;
static PyCodeObject *codeobj_276abd04051027d5fca15e73c89233a1;
static PyCodeObject *codeobj_1201f74c0ffd90a63b69d50f62ce3a39;
static PyCodeObject *codeobj_5db1c771e454ce7efc2d55a455db0551;
static PyCodeObject *codeobj_3af98ecbcd655216221180d14227e886;
static PyCodeObject *codeobj_0621318b9179e2fc44838b0d713462aa;
static PyCodeObject *codeobj_44b15ad53077c34eed61c357f6697f1e;
static PyCodeObject *codeobj_0bf27aad494dc8f368128ec83ef540d3;
static PyCodeObject *codeobj_7665585c959149b8e34fdc68aca32362;
static PyCodeObject *codeobj_3307251e478e6f87577905ed55fc01cd;
static PyCodeObject *codeobj_4a08f6b780e038c83cf85b523d9b9679;
static PyCodeObject *codeobj_3a2b66c8ce864438c352c2c20c126501;
static PyCodeObject *codeobj_289d47da2f84ee299300ab1657e1c7c0;
static PyCodeObject *codeobj_323a42d7dbbe5bdc0b337dd2ef1c320e;
static PyCodeObject *codeobj_ff315f57888600677cc6737090042b3f;
static PyCodeObject *codeobj_0b619157658b6bba36dd9c0cb11c64d6;
static PyCodeObject *codeobj_35541e506aecaa1fe122d7df64fdd496;
static PyCodeObject *codeobj_8def44d887a0ac5f684876bf2dcf6269;
static PyCodeObject *codeobj_b3fe41aa9e45c0ee93ce9ccbee67af61;
static PyCodeObject *codeobj_52856dea11ed4d8c00f05a44a2bb7a1b;
static PyCodeObject *codeobj_3e8d1a1c7da302cd9107f80bea120660;
static PyCodeObject *codeobj_f8a56ca7f4381c06bb242e27d9cd6c68;
static PyCodeObject *codeobj_595fbfe0f24c4e1cf92bb35eb23a0fd7;
static PyCodeObject *codeobj_f237254193b28e16736fc7794a633862;
static PyCodeObject *codeobj_1ccac2e96ff9427e4b97325ca6a6800b;
static PyCodeObject *codeobj_495b7c0e9bc8fdb79276f40655ad3103;
static PyCodeObject *codeobj_90571a4b7308f1f4fd3c602274ac0a6e;
static PyCodeObject *codeobj_cb01cf9133dac884d7efaf334d2fc08e;
static PyCodeObject *codeobj_0f3fa34b6ea5a1c6fe10cb63908c593e;
static PyCodeObject *codeobj_f4ca8605c9569418bc8039f668bf7a67;
static PyCodeObject *codeobj_650c2a689f3dbec589e4aff67a1ae95f;
static PyCodeObject *codeobj_21dae82fed1de99da6d824d21ade5909;
static PyCodeObject *codeobj_f509d8cccefcdfabcd164c7da0c88071;
static PyCodeObject *codeobj_d661584a44e154f3de3b31a0ecaf959b;
static PyCodeObject *codeobj_6878daaf3da84a8cdb9f86ec178c7a88;
static PyCodeObject *codeobj_48a7fa25571490ca92c398c7d8159669;
static PyCodeObject *codeobj_3e52afa8f05d71315554cd661e6674c6;
static PyCodeObject *codeobj_0a9e54124646f9f125d4cee5c810af87;
static PyCodeObject *codeobj_9ac704ea3f4336924bb76de6e74b8ce5;
static PyCodeObject *codeobj_88bdef2e440093790ddc6f18b2662761;
static PyCodeObject *codeobj_0dd12d5ae3ba750cb624023663caa12b;
static PyCodeObject *codeobj_ca16cf62941d8c38ddb7a8897aa86002;
static PyCodeObject *codeobj_09aa7102ace1ff05e255e991f636cddd;
static PyCodeObject *codeobj_78e27b0fea17bb4807da1cbf00c46c61;
static PyCodeObject *codeobj_3e0d6e816dfe25aa8c0ca80bd02ad8e4;
static PyCodeObject *codeobj_cd37d8e56d2bad5c732a7fd11b219980;
static PyCodeObject *codeobj_4d1e11f8c56bd49daa3f383638f665b8;
static PyCodeObject *codeobj_3ab7bcc7becc4741b37856918d8ae0ba;
static PyCodeObject *codeobj_87577be703ef6ca741a608913b4ddfe9;
static PyCodeObject *codeobj_b7ad6617339f8bbe8f5dcdac8aa127fa;
static PyCodeObject *codeobj_f2e84d6d5d5d645355d81357adbd86d6;
static PyCodeObject *codeobj_a1324c786d80e8d4c439d7cf3e3789e5;
static PyCodeObject *codeobj_2e69df50cbecb4b3decb2a2de054c9a4;
static PyCodeObject *codeobj_85e1efc804e970d045260ba73e076811;
static PyCodeObject *codeobj_a7894b3dfd0b661a4dc1a04158eea63e;
static PyCodeObject *codeobj_90d6a8357ef671f37e6c6ec00861d6a2;
static PyCodeObject *codeobj_5b0375b01e6bdd838edb3483499aae6a;
static PyCodeObject *codeobj_d9743507f2d846e87fae35855b109ba4;
static PyCodeObject *codeobj_4897b9eeb94c896eae280946e0cffe8e;
static PyCodeObject *codeobj_dddc561887afa411fcad41520a6648b6;
static PyCodeObject *codeobj_12f0d521926b7d02309cee945224ffb2;

static void createModuleCodeObjects(void)
{
    module_filename_obj = MAKE_RELATIVE_PATH( const_str_digest_7486a19b1011dc32401c0be752e70b18 );
    codeobj_344493d524bfa8f2de55b875388073d9 = MAKE_CODEOBJ( module_filename_obj, const_str_angle_genexpr, 1442, const_tuple_ecea41d9618568317bd7dde90480efa5_tuple, 1, 0, CO_GENERATOR | CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE );
    codeobj_3b8ded27a474e748966db3dc93ed4330 = MAKE_CODEOBJ( module_filename_obj, const_str_digest_067feae16ba6c6d7054cdc19949cebc8, 1, const_tuple_empty, 0, 0, CO_NOFREE );
    codeobj_8173f38e5b402db35849e9f35fd86a10 = MAKE_CODEOBJ( module_filename_obj, const_str_angle_setcontraction, 1101, const_tuple_str_plain_handle_tuple, 1, 0, CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE );
    codeobj_511b93c0afbf8069afc1fef349c67d72 = MAKE_CODEOBJ( module_filename_obj, const_str_plain_CalledProcessError, 60, const_tuple_str_plain___class___tuple, 0, 0, CO_NOFREE );
    codeobj_800df6b7458649b7309b2810385e4019 = MAKE_CODEOBJ( module_filename_obj, const_str_plain_Close, 202, const_tuple_str_plain_self_str_plain_CloseHandle_tuple, 2, 0, CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE );
    codeobj_975e88a8e14ee44e8b0b0239cd447315 = MAKE_CODEOBJ( module_filename_obj, const_str_plain_CompletedProcess, 398, const_tuple_str_plain___class___tuple, 0, 0, CO_NOFREE );
    codeobj_62c892bd90657b3e328cf24a2a5cb717 = MAKE_CODEOBJ( module_filename_obj, const_str_plain_Detach, 207, const_tuple_str_plain_self_tuple, 1, 0, CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE );
    codeobj_5e53de9cfb00a7770460518e667a6e26 = MAKE_CODEOBJ( module_filename_obj, const_str_plain_Handle, 199, const_tuple_str_plain___class___tuple, 0, 0, CO_NOFREE );
    codeobj_175fb9997171de0186ab4a7d7aec4913 = MAKE_CODEOBJ( module_filename_obj, const_str_plain_Popen, 608, const_tuple_str_plain___class___tuple, 0, 0, CO_NOFREE );
    codeobj_c34aed000ce9d0c2f8b25617b8641037 = MAKE_CODEOBJ( module_filename_obj, const_str_plain_STARTUPINFO, 129, const_tuple_str_plain___class___tuple, 0, 0, CO_NOFREE );
    codeobj_276abd04051027d5fca15e73c89233a1 = MAKE_CODEOBJ( module_filename_obj, const_str_plain_TimeoutExpired, 97, const_tuple_str_plain___class___tuple, 0, 0, CO_NOFREE );
    codeobj_1201f74c0ffd90a63b69d50f62ce3a39 = MAKE_CODEOBJ( module_filename_obj, const_str_plain___del__, 850, const_tuple_str_plain_self_str_plain__maxsize_str_plain__warn_tuple, 3, 0, CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE );
    codeobj_5db1c771e454ce7efc2d55a455db0551 = MAKE_CODEOBJ( module_filename_obj, const_str_plain___enter__, 819, const_tuple_str_plain_self_tuple, 1, 0, CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE );
    codeobj_3af98ecbcd655216221180d14227e886 = MAKE_CODEOBJ( module_filename_obj, const_str_plain___exit__, 822, const_tuple_c9e8fa414d034df4031fc4111ed36a42_tuple, 4, 0, CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE );
    codeobj_0621318b9179e2fc44838b0d713462aa = MAKE_CODEOBJ( module_filename_obj, const_str_plain___init__, 67, const_tuple_a1f6990a259f63871d04a0031479ef59_tuple, 5, 0, CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE );
    codeobj_44b15ad53077c34eed61c357f6697f1e = MAKE_CODEOBJ( module_filename_obj, const_str_plain___init__, 104, const_tuple_2f0cd8ae0d18cf50f50c0e08a3f1784e_tuple, 5, 0, CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE );
    codeobj_0bf27aad494dc8f368128ec83ef540d3 = MAKE_CODEOBJ( module_filename_obj, const_str_plain___init__, 130, const_tuple_1646503210130d97fade91ad80b732e0_tuple, 1, 6, CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE );
    codeobj_7665585c959149b8e34fdc68aca32362 = MAKE_CODEOBJ( module_filename_obj, const_str_plain___init__, 409, const_tuple_31560b4570051a8862725158ecfbeb2d_tuple, 5, 0, CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE );
    codeobj_3307251e478e6f87577905ed55fc01cd = MAKE_CODEOBJ( module_filename_obj, const_str_plain___init__, 656, const_tuple_049761c70f8d64139550fd3b8024294a_tuple, 18, 3, CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE );
    codeobj_4a08f6b780e038c83cf85b523d9b9679 = MAKE_CODEOBJ( module_filename_obj, const_str_plain___repr__, 213, const_tuple_str_plain_self_tuple, 1, 0, CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE );
    codeobj_3a2b66c8ce864438c352c2c20c126501 = MAKE_CODEOBJ( module_filename_obj, const_str_plain___repr__, 415, const_tuple_str_plain_self_str_plain_args_tuple, 1, 0, CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE );
    codeobj_289d47da2f84ee299300ab1657e1c7c0 = MAKE_CODEOBJ( module_filename_obj, const_str_plain___str__, 73, const_tuple_str_plain_self_tuple, 1, 0, CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE );
    codeobj_323a42d7dbbe5bdc0b337dd2ef1c320e = MAKE_CODEOBJ( module_filename_obj, const_str_plain___str__, 110, const_tuple_str_plain_self_tuple, 1, 0, CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE );
    codeobj_ff315f57888600677cc6737090042b3f = MAKE_CODEOBJ( module_filename_obj, const_str_plain__args_from_interpreter_flags, 256, const_tuple_e34addb639ceb9dc9a4cc0882e121f30_tuple, 0, 0, CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE );
    codeobj_0b619157658b6bba36dd9c0cb11c64d6 = MAKE_CODEOBJ( module_filename_obj, const_str_plain__check_timeout, 977, const_tuple_str_plain_self_str_plain_endtime_str_plain_orig_timeout_tuple, 3, 0, CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE );
    codeobj_35541e506aecaa1fe122d7df64fdd496 = MAKE_CODEOBJ( module_filename_obj, const_str_plain__cleanup, 226, const_tuple_str_plain_inst_str_plain_res_tuple, 0, 0, CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE );
    codeobj_8def44d887a0ac5f684876bf2dcf6269 = MAKE_CODEOBJ( module_filename_obj, const_str_plain__communicate, 1242, const_tuple_dea21aa990bc1774755e7d37055a00a1_tuple, 4, 0, CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE );
    codeobj_b3fe41aa9e45c0ee93ce9ccbee67af61 = MAKE_CODEOBJ( module_filename_obj, const_str_plain__communicate, 1633, const_tuple_0b33e45deac7cdd8ab96e21af782d142_tuple, 4, 0, CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE );
    codeobj_52856dea11ed4d8c00f05a44a2bb7a1b = MAKE_CODEOBJ( module_filename_obj, const_str_plain__copy, 139, const_tuple_str_plain_self_str_plain_attr_list_tuple, 1, 0, CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE );
    codeobj_3e8d1a1c7da302cd9107f80bea120660 = MAKE_CODEOBJ( module_filename_obj, const_str_plain__execute_child, 1107, const_tuple_14ea0634846f7a7bf710e42f8a23be2c_tuple, 19, 0, CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE );
    codeobj_f8a56ca7f4381c06bb242e27d9cd6c68 = MAKE_CODEOBJ( module_filename_obj, const_str_plain__execute_child, 1383, const_tuple_7ef29b82f1cb69b263e2866742e2862b_tuple, 19, 0, CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE );
    codeobj_595fbfe0f24c4e1cf92bb35eb23a0fd7 = MAKE_CODEOBJ( module_filename_obj, const_str_plain__filter_handle_list, 1094, const_tuple_str_plain_self_str_plain_handle_list_tuple, 2, 0, CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE );
    codeobj_f237254193b28e16736fc7794a633862 = MAKE_CODEOBJ( module_filename_obj, const_str_plain__get_devnull, 865, const_tuple_str_plain_self_tuple, 1, 0, CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE );
    codeobj_1ccac2e96ff9427e4b97325ca6a6800b = MAKE_CODEOBJ( module_filename_obj, const_str_plain__get_handles, 1013, const_tuple_fb54ea688cc17622d0908c7f61795e76_tuple, 4, 0, CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE );
    codeobj_495b7c0e9bc8fdb79276f40655ad3103 = MAKE_CODEOBJ( module_filename_obj, const_str_plain__get_handles, 1329, const_tuple_54550700c47664a85ad99db8afd7ef8f_tuple, 4, 0, CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE );
    codeobj_90571a4b7308f1f4fd3c602274ac0a6e = MAKE_CODEOBJ( module_filename_obj, const_str_plain__handle_exitstatus, 1526, const_tuple_910481b0a4c3ef57eddfaac737d27911_tuple, 8, 0, CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE );
    codeobj_cb01cf9133dac884d7efaf334d2fc08e = MAKE_CODEOBJ( module_filename_obj, const_str_plain__internal_poll, 1204, const_tuple_935322585dac22c4179d8ef098096f67_tuple, 5, 0, CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE );
    codeobj_0f3fa34b6ea5a1c6fe10cb63908c593e = MAKE_CODEOBJ( module_filename_obj, const_str_plain__internal_poll, 1544, const_tuple_fff35330d783c7cbe09d00630da65907_tuple, 5, 0, CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE );
    codeobj_f4ca8605c9569418bc8039f668bf7a67 = MAKE_CODEOBJ( module_filename_obj, const_str_plain__make_inheritable, 1085, const_tuple_str_plain_self_str_plain_handle_str_plain_h_tuple, 2, 0, CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE );
    codeobj_650c2a689f3dbec589e4aff67a1ae95f = MAKE_CODEOBJ( module_filename_obj, const_str_plain__optim_args_from_interpreter_flags, 246, const_tuple_str_plain_args_str_plain_value_tuple, 0, 0, CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE );
    codeobj_21dae82fed1de99da6d824d21ade5909 = MAKE_CODEOBJ( module_filename_obj, const_str_plain__readerthread, 1237, const_tuple_str_plain_self_str_plain_fh_str_plain_buffer_tuple, 3, 0, CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE );
    codeobj_f509d8cccefcdfabcd164c7da0c88071 = MAKE_CODEOBJ( module_filename_obj, const_str_plain__remaining_time, 969, const_tuple_str_plain_self_str_plain_endtime_tuple, 2, 0, CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE );
    codeobj_d661584a44e154f3de3b31a0ecaf959b = MAKE_CODEOBJ( module_filename_obj, const_str_plain__save_input, 1730, const_tuple_str_plain_self_str_plain_input_tuple, 2, 0, CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE );
    codeobj_6878daaf3da84a8cdb9f86ec178c7a88 = MAKE_CODEOBJ( module_filename_obj, const_str_plain__stdin_write, 870, const_tuple_str_plain_self_str_plain_input_str_plain_exc_tuple, 2, 0, CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE );
    codeobj_48a7fa25571490ca92c398c7d8159669 = MAKE_CODEOBJ( module_filename_obj, const_str_plain__translate_newlines, 815, const_tuple_50ebc68da7664988618a7f21371f1fba_tuple, 4, 0, CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE );
    codeobj_3e52afa8f05d71315554cd661e6674c6 = MAKE_CODEOBJ( module_filename_obj, const_str_plain__try_wait, 1579, const_tuple_99b88f8bafa923a962cefb9576dd6911_tuple, 2, 0, CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE );
    codeobj_0a9e54124646f9f125d4cee5c810af87 = MAKE_CODEOBJ( module_filename_obj, const_str_plain__wait, 1221, const_tuple_e7e46fd4bb764fd8230718c34c643b10_tuple, 2, 0, CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE );
    codeobj_9ac704ea3f4336924bb76de6e74b8ce5 = MAKE_CODEOBJ( module_filename_obj, const_str_plain__wait, 1592, const_tuple_a6f41dd7c64b6479154fdfcda359491a_tuple, 2, 0, CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE );
    codeobj_88bdef2e440093790ddc6f18b2662761 = MAKE_CODEOBJ( module_filename_obj, const_str_plain_call, 315, const_tuple_ccb354e7993a1a686857aa7debf87169_tuple, 0, 1, CO_OPTIMIZED | CO_NEWLOCALS | CO_VARARGS | CO_VARKEYWORDS | CO_NOFREE );
    codeobj_0dd12d5ae3ba750cb624023663caa12b = MAKE_CODEOBJ( module_filename_obj, const_str_plain_check_call, 332, const_tuple_e544aafec9de467b5b69acb717e74e6d_tuple, 0, 0, CO_OPTIMIZED | CO_NEWLOCALS | CO_VARARGS | CO_VARKEYWORDS | CO_NOFREE );
    codeobj_ca16cf62941d8c38ddb7a8897aa86002 = MAKE_CODEOBJ( module_filename_obj, const_str_plain_check_output, 351, const_tuple_str_plain_timeout_str_plain_popenargs_str_plain_kwargs_tuple, 0, 1, CO_OPTIMIZED | CO_NEWLOCALS | CO_VARARGS | CO_VARKEYWORDS | CO_NOFREE );
    codeobj_09aa7102ace1ff05e255e991f636cddd = MAKE_CODEOBJ( module_filename_obj, const_str_plain_check_returncode, 424, const_tuple_str_plain_self_tuple, 1, 0, CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE );
    codeobj_78e27b0fea17bb4807da1cbf00c46c61 = MAKE_CODEOBJ( module_filename_obj, const_str_plain_communicate, 895, const_tuple_8a64ed7c758b87eda350abbe0b42cdde_tuple, 3, 0, CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE );
    codeobj_3e0d6e816dfe25aa8c0ca80bd02ad8e4 = MAKE_CODEOBJ( module_filename_obj, const_str_plain_getoutput, 595, const_tuple_str_plain_cmd_tuple, 1, 0, CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE );
    codeobj_cd37d8e56d2bad5c732a7fd11b219980 = MAKE_CODEOBJ( module_filename_obj, const_str_plain_getstatusoutput, 564, const_tuple_str_plain_cmd_str_plain_data_str_plain_exitcode_str_plain_ex_tuple, 1, 0, CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE );
    codeobj_4d1e11f8c56bd49daa3f383638f665b8 = MAKE_CODEOBJ( module_filename_obj, const_str_plain_kill, 1753, const_tuple_str_plain_self_tuple, 1, 0, CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE );
    codeobj_3ab7bcc7becc4741b37856918d8ae0ba = MAKE_CODEOBJ( module_filename_obj, const_str_plain_list2cmdline, 491, const_tuple_9d53b184c0a5bb37c7eb8baced87290a_tuple, 1, 0, CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE );
    codeobj_87577be703ef6ca741a608913b4ddfe9 = MAKE_CODEOBJ( module_filename_obj, const_str_plain_poll, 963, const_tuple_str_plain_self_tuple, 1, 0, CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE );
    codeobj_b7ad6617339f8bbe8f5dcdac8aa127fa = MAKE_CODEOBJ( module_filename_obj, const_str_plain_run, 431, const_tuple_c048319f0716cd20701fbaaff129a45d_tuple, 0, 4, CO_OPTIMIZED | CO_NEWLOCALS | CO_VARARGS | CO_VARKEYWORDS | CO_NOFREE );
    codeobj_f2e84d6d5d5d645355d81357adbd86d6 = MAKE_CODEOBJ( module_filename_obj, const_str_plain_send_signal, 1294, const_tuple_str_plain_self_str_plain_sig_tuple, 2, 0, CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE );
    codeobj_a1324c786d80e8d4c439d7cf3e3789e5 = MAKE_CODEOBJ( module_filename_obj, const_str_plain_send_signal, 1742, const_tuple_str_plain_self_str_plain_sig_tuple, 2, 0, CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE );
    codeobj_2e69df50cbecb4b3decb2a2de054c9a4 = MAKE_CODEOBJ( module_filename_obj, const_str_plain_stdout, 85, const_tuple_str_plain_self_tuple, 1, 0, CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE );
    codeobj_85e1efc804e970d045260ba73e076811 = MAKE_CODEOBJ( module_filename_obj, const_str_plain_stdout, 90, const_tuple_str_plain_self_str_plain_value_tuple, 2, 0, CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE );
    codeobj_a7894b3dfd0b661a4dc1a04158eea63e = MAKE_CODEOBJ( module_filename_obj, const_str_plain_stdout, 114, const_tuple_str_plain_self_tuple, 1, 0, CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE );
    codeobj_90d6a8357ef671f37e6c6ec00861d6a2 = MAKE_CODEOBJ( module_filename_obj, const_str_plain_stdout, 118, const_tuple_str_plain_self_str_plain_value_tuple, 2, 0, CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE );
    codeobj_5b0375b01e6bdd838edb3483499aae6a = MAKE_CODEOBJ( module_filename_obj, const_str_plain_terminate, 1308, const_tuple_str_plain_self_str_plain_rc_tuple, 1, 0, CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE );
    codeobj_d9743507f2d846e87fae35855b109ba4 = MAKE_CODEOBJ( module_filename_obj, const_str_plain_terminate, 1748, const_tuple_str_plain_self_tuple, 1, 0, CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE );
    codeobj_4897b9eeb94c896eae280946e0cffe8e = MAKE_CODEOBJ( module_filename_obj, const_str_plain_universal_newlines, 805, const_tuple_str_plain_self_tuple, 1, 0, CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE );
    codeobj_dddc561887afa411fcad41520a6648b6 = MAKE_CODEOBJ( module_filename_obj, const_str_plain_universal_newlines, 811, const_tuple_str_plain_self_str_plain_universal_newlines_tuple, 2, 0, CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE );
    codeobj_12f0d521926b7d02309cee945224ffb2 = MAKE_CODEOBJ( module_filename_obj, const_str_plain_wait, 985, const_tuple_5c0aacd6bfc62532472ec1b2ebbdbfd6_tuple, 2, 0, CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE );
}

// The module function declarations.
static PyObject *subprocess$$$function_52__execute_child$$$genexpr_1_genexpr_maker( void );


NUITKA_CROSS_MODULE PyObject *impl___internal__$$$function_1__mro_entries_conversion( PyObject **python_pars );


NUITKA_CROSS_MODULE PyObject *impl___internal__$$$function_5_complex_call_helper_star_list_star_dict( PyObject **python_pars );


NUITKA_CROSS_MODULE PyObject *impl___internal__$$$function_10_complex_call_helper_keywords_star_list_star_dict( PyObject **python_pars );


static PyObject *MAKE_FUNCTION_subprocess$$$function_10__copy(  );


static PyObject *MAKE_FUNCTION_subprocess$$$function_11_Close( PyObject *defaults );


static PyObject *MAKE_FUNCTION_subprocess$$$function_12_Detach(  );


static PyObject *MAKE_FUNCTION_subprocess$$$function_13___repr__(  );


static PyObject *MAKE_FUNCTION_subprocess$$$function_14__cleanup(  );


static PyObject *MAKE_FUNCTION_subprocess$$$function_15__optim_args_from_interpreter_flags(  );


static PyObject *MAKE_FUNCTION_subprocess$$$function_16__args_from_interpreter_flags(  );


static PyObject *MAKE_FUNCTION_subprocess$$$function_17_call( PyObject *kw_defaults );


static PyObject *MAKE_FUNCTION_subprocess$$$function_18_check_call(  );


static PyObject *MAKE_FUNCTION_subprocess$$$function_19_check_output( PyObject *kw_defaults );


static PyObject *MAKE_FUNCTION_subprocess$$$function_1___init__( PyObject *defaults );


static PyObject *MAKE_FUNCTION_subprocess$$$function_20___init__( PyObject *defaults );


static PyObject *MAKE_FUNCTION_subprocess$$$function_21___repr__(  );


static PyObject *MAKE_FUNCTION_subprocess$$$function_22_check_returncode(  );


static PyObject *MAKE_FUNCTION_subprocess$$$function_23_run( PyObject *kw_defaults );


static PyObject *MAKE_FUNCTION_subprocess$$$function_24_list2cmdline(  );


static PyObject *MAKE_FUNCTION_subprocess$$$function_25_getstatusoutput(  );


static PyObject *MAKE_FUNCTION_subprocess$$$function_26_getoutput(  );


static PyObject *MAKE_FUNCTION_subprocess$$$function_27___init__( PyObject *defaults, PyObject *kw_defaults );


static PyObject *MAKE_FUNCTION_subprocess$$$function_28_universal_newlines(  );


static PyObject *MAKE_FUNCTION_subprocess$$$function_29_universal_newlines(  );


static PyObject *MAKE_FUNCTION_subprocess$$$function_2___str__(  );


static PyObject *MAKE_FUNCTION_subprocess$$$function_30__translate_newlines(  );


static PyObject *MAKE_FUNCTION_subprocess$$$function_31___enter__(  );


static PyObject *MAKE_FUNCTION_subprocess$$$function_32___exit__(  );


static PyObject *MAKE_FUNCTION_subprocess$$$function_33___del__( PyObject *defaults );


static PyObject *MAKE_FUNCTION_subprocess$$$function_34__get_devnull(  );


static PyObject *MAKE_FUNCTION_subprocess$$$function_35__stdin_write(  );


static PyObject *MAKE_FUNCTION_subprocess$$$function_36_communicate( PyObject *defaults );


static PyObject *MAKE_FUNCTION_subprocess$$$function_37_poll(  );


static PyObject *MAKE_FUNCTION_subprocess$$$function_38__remaining_time(  );


static PyObject *MAKE_FUNCTION_subprocess$$$function_39__check_timeout(  );


static PyObject *MAKE_FUNCTION_subprocess$$$function_3_stdout(  );


static PyObject *MAKE_FUNCTION_subprocess$$$function_40_wait( PyObject *defaults );


static PyObject *MAKE_FUNCTION_subprocess$$$function_41__get_handles(  );


static PyObject *MAKE_FUNCTION_subprocess$$$function_42__make_inheritable(  );


static PyObject *MAKE_FUNCTION_subprocess$$$function_43__filter_handle_list(  );


static PyObject *MAKE_FUNCTION_subprocess$$$function_44__execute_child(  );


static PyObject *MAKE_FUNCTION_subprocess$$$function_45__internal_poll( PyObject *defaults );


static PyObject *MAKE_FUNCTION_subprocess$$$function_46__wait(  );


static PyObject *MAKE_FUNCTION_subprocess$$$function_47__readerthread(  );


static PyObject *MAKE_FUNCTION_subprocess$$$function_48__communicate(  );


static PyObject *MAKE_FUNCTION_subprocess$$$function_49_send_signal(  );


static PyObject *MAKE_FUNCTION_subprocess$$$function_4_stdout(  );


static PyObject *MAKE_FUNCTION_subprocess$$$function_50_terminate(  );


static PyObject *MAKE_FUNCTION_subprocess$$$function_51__get_handles(  );


static PyObject *MAKE_FUNCTION_subprocess$$$function_52__execute_child(  );


static PyObject *MAKE_FUNCTION_subprocess$$$function_53__handle_exitstatus( PyObject *defaults );


static PyObject *MAKE_FUNCTION_subprocess$$$function_54__internal_poll( PyObject *defaults );


static PyObject *MAKE_FUNCTION_subprocess$$$function_55__try_wait(  );


static PyObject *MAKE_FUNCTION_subprocess$$$function_56__wait(  );


static PyObject *MAKE_FUNCTION_subprocess$$$function_57__communicate(  );


static PyObject *MAKE_FUNCTION_subprocess$$$function_58__save_input(  );


static PyObject *MAKE_FUNCTION_subprocess$$$function_59_send_signal(  );


static PyObject *MAKE_FUNCTION_subprocess$$$function_5___init__( PyObject *defaults );


static PyObject *MAKE_FUNCTION_subprocess$$$function_60_terminate(  );


static PyObject *MAKE_FUNCTION_subprocess$$$function_61_kill(  );


static PyObject *MAKE_FUNCTION_subprocess$$$function_6___str__(  );


static PyObject *MAKE_FUNCTION_subprocess$$$function_7_stdout(  );


static PyObject *MAKE_FUNCTION_subprocess$$$function_8_stdout(  );


static PyObject *MAKE_FUNCTION_subprocess$$$function_9___init__( PyObject *kw_defaults );


// The module function definitions.
static PyObject *impl_subprocess$$$function_1___init__( struct Nuitka_FunctionObject const *self, PyObject **python_pars )
{
    // Preserve error status for checks
#ifndef __NUITKA_NO_ASSERT__
    NUITKA_MAY_BE_UNUSED bool had_error = ERROR_OCCURRED();
#endif

    // Local variable declarations.
    PyObject *par_self = python_pars[ 0 ];
    PyObject *par_returncode = python_pars[ 1 ];
    PyObject *par_cmd = python_pars[ 2 ];
    PyObject *par_output = python_pars[ 3 ];
    PyObject *par_stderr = python_pars[ 4 ];
    struct Nuitka_FrameObject *frame_0621318b9179e2fc44838b0d713462aa;
    NUITKA_MAY_BE_UNUSED char const *type_description_1 = NULL;
    bool tmp_result;
    PyObject *exception_type = NULL;
    PyObject *exception_value = NULL;
    PyTracebackObject *exception_tb = NULL;
    NUITKA_MAY_BE_UNUSED int exception_lineno = 0;
    static struct Nuitka_FrameObject *cache_frame_0621318b9179e2fc44838b0d713462aa = NULL;
    PyObject *tmp_return_value = NULL;
    PyObject *exception_keeper_type_1;
    PyObject *exception_keeper_value_1;
    PyTracebackObject *exception_keeper_tb_1;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_1;

    // Actual function body.
    // Tried code:
    MAKE_OR_REUSE_FRAME( cache_frame_0621318b9179e2fc44838b0d713462aa, codeobj_0621318b9179e2fc44838b0d713462aa, module_subprocess, sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *) );
    frame_0621318b9179e2fc44838b0d713462aa = cache_frame_0621318b9179e2fc44838b0d713462aa;

    // Push the new frame as the currently active one.
    pushFrameStack( frame_0621318b9179e2fc44838b0d713462aa );

    // Mark the frame object as in use, ref count 1 will be up for reuse.
    assert( Py_REFCNT( frame_0621318b9179e2fc44838b0d713462aa ) == 2 ); // Frame stack

    // Framed code:
    {
        PyObject *tmp_assattr_name_1;
        PyObject *tmp_assattr_target_1;
        CHECK_OBJECT( par_returncode );
        tmp_assattr_name_1 = par_returncode;
        CHECK_OBJECT( par_self );
        tmp_assattr_target_1 = par_self;
        tmp_result = SET_ATTRIBUTE( tmp_assattr_target_1, const_str_plain_returncode, tmp_assattr_name_1 );
        if ( tmp_result == false )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 68;
            type_description_1 = "ooooo";
            goto frame_exception_exit_1;
        }
    }
    {
        PyObject *tmp_assattr_name_2;
        PyObject *tmp_assattr_target_2;
        CHECK_OBJECT( par_cmd );
        tmp_assattr_name_2 = par_cmd;
        CHECK_OBJECT( par_self );
        tmp_assattr_target_2 = par_self;
        tmp_result = SET_ATTRIBUTE( tmp_assattr_target_2, const_str_plain_cmd, tmp_assattr_name_2 );
        if ( tmp_result == false )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 69;
            type_description_1 = "ooooo";
            goto frame_exception_exit_1;
        }
    }
    {
        PyObject *tmp_assattr_name_3;
        PyObject *tmp_assattr_target_3;
        CHECK_OBJECT( par_output );
        tmp_assattr_name_3 = par_output;
        CHECK_OBJECT( par_self );
        tmp_assattr_target_3 = par_self;
        tmp_result = SET_ATTRIBUTE( tmp_assattr_target_3, const_str_plain_output, tmp_assattr_name_3 );
        if ( tmp_result == false )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 70;
            type_description_1 = "ooooo";
            goto frame_exception_exit_1;
        }
    }
    {
        PyObject *tmp_assattr_name_4;
        PyObject *tmp_assattr_target_4;
        CHECK_OBJECT( par_stderr );
        tmp_assattr_name_4 = par_stderr;
        CHECK_OBJECT( par_self );
        tmp_assattr_target_4 = par_self;
        tmp_result = SET_ATTRIBUTE( tmp_assattr_target_4, const_str_plain_stderr, tmp_assattr_name_4 );
        if ( tmp_result == false )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 71;
            type_description_1 = "ooooo";
            goto frame_exception_exit_1;
        }
    }

#if 0
    RESTORE_FRAME_EXCEPTION( frame_0621318b9179e2fc44838b0d713462aa );
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto frame_no_exception_1;

    frame_exception_exit_1:;

#if 0
    RESTORE_FRAME_EXCEPTION( frame_0621318b9179e2fc44838b0d713462aa );
#endif

    if ( exception_tb == NULL )
    {
        exception_tb = MAKE_TRACEBACK( frame_0621318b9179e2fc44838b0d713462aa, exception_lineno );
    }
    else if ( exception_tb->tb_frame != &frame_0621318b9179e2fc44838b0d713462aa->m_frame )
    {
        exception_tb = ADD_TRACEBACK( exception_tb, frame_0621318b9179e2fc44838b0d713462aa, exception_lineno );
    }

    // Attachs locals to frame if any.
    Nuitka_Frame_AttachLocals(
        (struct Nuitka_FrameObject *)frame_0621318b9179e2fc44838b0d713462aa,
        type_description_1,
        par_self,
        par_returncode,
        par_cmd,
        par_output,
        par_stderr
    );


    // Release cached frame.
    if ( frame_0621318b9179e2fc44838b0d713462aa == cache_frame_0621318b9179e2fc44838b0d713462aa )
    {
        Py_DECREF( frame_0621318b9179e2fc44838b0d713462aa );
    }
    cache_frame_0621318b9179e2fc44838b0d713462aa = NULL;

    assertFrameObject( frame_0621318b9179e2fc44838b0d713462aa );

    // Put the previous frame back on top.
    popFrameStack();

    // Return the error.
    goto try_except_handler_1;

    frame_no_exception_1:;
    tmp_return_value = Py_None;
    Py_INCREF( tmp_return_value );
    goto try_return_handler_1;
    // tried codes exits in all cases
    NUITKA_CANNOT_GET_HERE( subprocess$$$function_1___init__ );
    return NULL;
    // Return handler code:
    try_return_handler_1:;
    CHECK_OBJECT( (PyObject *)par_self );
    Py_DECREF( par_self );
    par_self = NULL;

    CHECK_OBJECT( (PyObject *)par_returncode );
    Py_DECREF( par_returncode );
    par_returncode = NULL;

    CHECK_OBJECT( (PyObject *)par_cmd );
    Py_DECREF( par_cmd );
    par_cmd = NULL;

    CHECK_OBJECT( (PyObject *)par_output );
    Py_DECREF( par_output );
    par_output = NULL;

    CHECK_OBJECT( (PyObject *)par_stderr );
    Py_DECREF( par_stderr );
    par_stderr = NULL;

    goto function_return_exit;
    // Exception handler code:
    try_except_handler_1:;
    exception_keeper_type_1 = exception_type;
    exception_keeper_value_1 = exception_value;
    exception_keeper_tb_1 = exception_tb;
    exception_keeper_lineno_1 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    CHECK_OBJECT( (PyObject *)par_self );
    Py_DECREF( par_self );
    par_self = NULL;

    CHECK_OBJECT( (PyObject *)par_returncode );
    Py_DECREF( par_returncode );
    par_returncode = NULL;

    CHECK_OBJECT( (PyObject *)par_cmd );
    Py_DECREF( par_cmd );
    par_cmd = NULL;

    CHECK_OBJECT( (PyObject *)par_output );
    Py_DECREF( par_output );
    par_output = NULL;

    CHECK_OBJECT( (PyObject *)par_stderr );
    Py_DECREF( par_stderr );
    par_stderr = NULL;

    // Re-raise.
    exception_type = exception_keeper_type_1;
    exception_value = exception_keeper_value_1;
    exception_tb = exception_keeper_tb_1;
    exception_lineno = exception_keeper_lineno_1;

    goto function_exception_exit;
    // End of try:

    // Return statement must have exited already.
    NUITKA_CANNOT_GET_HERE( subprocess$$$function_1___init__ );
    return NULL;

function_exception_exit:
    assert( exception_type );
    RESTORE_ERROR_OCCURRED( exception_type, exception_value, exception_tb );

    return NULL;

function_return_exit:
   // Function cleanup code if any.


   // Actual function exit with return value, making sure we did not make
   // the error status worse despite non-NULL return.
   CHECK_OBJECT( tmp_return_value );
   assert( had_error || !ERROR_OCCURRED() );
   return tmp_return_value;
}


static PyObject *impl_subprocess$$$function_2___str__( struct Nuitka_FunctionObject const *self, PyObject **python_pars )
{
    // Preserve error status for checks
#ifndef __NUITKA_NO_ASSERT__
    NUITKA_MAY_BE_UNUSED bool had_error = ERROR_OCCURRED();
#endif

    // Local variable declarations.
    PyObject *par_self = python_pars[ 0 ];
    struct Nuitka_FrameObject *frame_289d47da2f84ee299300ab1657e1c7c0;
    NUITKA_MAY_BE_UNUSED char const *type_description_1 = NULL;
    PyObject *exception_type = NULL;
    PyObject *exception_value = NULL;
    PyTracebackObject *exception_tb = NULL;
    NUITKA_MAY_BE_UNUSED int exception_lineno = 0;
    int tmp_res;
    PyObject *tmp_return_value = NULL;
    PyObject *exception_keeper_type_1;
    PyObject *exception_keeper_value_1;
    PyTracebackObject *exception_keeper_tb_1;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_1;
    PyObject *exception_preserved_type_1;
    PyObject *exception_preserved_value_1;
    PyTracebackObject *exception_preserved_tb_1;
    bool tmp_result;
    PyObject *exception_keeper_type_2;
    PyObject *exception_keeper_value_2;
    PyTracebackObject *exception_keeper_tb_2;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_2;
    static struct Nuitka_FrameObject *cache_frame_289d47da2f84ee299300ab1657e1c7c0 = NULL;
    PyObject *exception_keeper_type_3;
    PyObject *exception_keeper_value_3;
    PyTracebackObject *exception_keeper_tb_3;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_3;

    // Actual function body.
    // Tried code:
    MAKE_OR_REUSE_FRAME( cache_frame_289d47da2f84ee299300ab1657e1c7c0, codeobj_289d47da2f84ee299300ab1657e1c7c0, module_subprocess, sizeof(void *) );
    frame_289d47da2f84ee299300ab1657e1c7c0 = cache_frame_289d47da2f84ee299300ab1657e1c7c0;

    // Push the new frame as the currently active one.
    pushFrameStack( frame_289d47da2f84ee299300ab1657e1c7c0 );

    // Mark the frame object as in use, ref count 1 will be up for reuse.
    assert( Py_REFCNT( frame_289d47da2f84ee299300ab1657e1c7c0 ) == 2 ); // Frame stack

    // Framed code:
    {
        nuitka_bool tmp_condition_result_1;
        int tmp_and_left_truth_1;
        nuitka_bool tmp_and_left_value_1;
        nuitka_bool tmp_and_right_value_1;
        PyObject *tmp_source_name_1;
        PyObject *tmp_attribute_value_1;
        int tmp_truth_name_1;
        PyObject *tmp_compexpr_left_1;
        PyObject *tmp_compexpr_right_1;
        PyObject *tmp_source_name_2;
        CHECK_OBJECT( par_self );
        tmp_source_name_1 = par_self;
        tmp_attribute_value_1 = LOOKUP_ATTRIBUTE( tmp_source_name_1, const_str_plain_returncode );
        if ( tmp_attribute_value_1 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 74;
            type_description_1 = "o";
            goto frame_exception_exit_1;
        }
        tmp_truth_name_1 = CHECK_IF_TRUE( tmp_attribute_value_1 );
        if ( tmp_truth_name_1 == -1 )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
            Py_DECREF( tmp_attribute_value_1 );

            exception_lineno = 74;
            type_description_1 = "o";
            goto frame_exception_exit_1;
        }
        tmp_and_left_value_1 = tmp_truth_name_1 == 1 ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
        Py_DECREF( tmp_attribute_value_1 );
        tmp_and_left_truth_1 = tmp_and_left_value_1 == NUITKA_BOOL_TRUE ? 1 : 0;
        if ( tmp_and_left_truth_1 == 1 )
        {
            goto and_right_1;
        }
        else
        {
            goto and_left_1;
        }
        and_right_1:;
        CHECK_OBJECT( par_self );
        tmp_source_name_2 = par_self;
        tmp_compexpr_left_1 = LOOKUP_ATTRIBUTE( tmp_source_name_2, const_str_plain_returncode );
        if ( tmp_compexpr_left_1 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 74;
            type_description_1 = "o";
            goto frame_exception_exit_1;
        }
        tmp_compexpr_right_1 = const_int_0;
        tmp_res = RICH_COMPARE_BOOL_LT_OBJECT_OBJECT( tmp_compexpr_left_1, tmp_compexpr_right_1 );
        Py_DECREF( tmp_compexpr_left_1 );
        if ( tmp_res == -1 )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 74;
            type_description_1 = "o";
            goto frame_exception_exit_1;
        }
        tmp_and_right_value_1 = ( tmp_res != 0 ) ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
        tmp_condition_result_1 = tmp_and_right_value_1;
        goto and_end_1;
        and_left_1:;
        tmp_condition_result_1 = tmp_and_left_value_1;
        and_end_1:;
        if ( tmp_condition_result_1 == NUITKA_BOOL_TRUE )
        {
            goto branch_yes_1;
        }
        else
        {
            goto branch_no_1;
        }
        branch_yes_1:;
        // Tried code:
        {
            PyObject *tmp_left_name_1;
            PyObject *tmp_right_name_1;
            PyObject *tmp_tuple_element_1;
            PyObject *tmp_source_name_3;
            PyObject *tmp_called_name_1;
            PyObject *tmp_source_name_4;
            PyObject *tmp_mvar_value_1;
            PyObject *tmp_args_element_name_1;
            PyObject *tmp_operand_name_1;
            PyObject *tmp_source_name_5;
            tmp_left_name_1 = const_str_digest_09f66a71a4fc28a672963a6ed2ac1f83;
            CHECK_OBJECT( par_self );
            tmp_source_name_3 = par_self;
            tmp_tuple_element_1 = LOOKUP_ATTRIBUTE( tmp_source_name_3, const_str_plain_cmd );
            if ( tmp_tuple_element_1 == NULL )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 77;
                type_description_1 = "o";
                goto try_except_handler_2;
            }
            tmp_right_name_1 = PyTuple_New( 2 );
            PyTuple_SET_ITEM( tmp_right_name_1, 0, tmp_tuple_element_1 );
            tmp_mvar_value_1 = GET_STRING_DICT_VALUE( moduledict_subprocess, (Nuitka_StringObject *)const_str_plain_signal );

            if (unlikely( tmp_mvar_value_1 == NULL ))
            {
                tmp_mvar_value_1 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_signal );
            }

            if ( tmp_mvar_value_1 == NULL )
            {
                Py_DECREF( tmp_right_name_1 );
                exception_type = PyExc_NameError;
                Py_INCREF( exception_type );
                exception_value = PyUnicode_FromFormat( "name '%s' is not defined", "signal" );
                exception_tb = NULL;
                NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
                CHAIN_EXCEPTION( exception_value );

                exception_lineno = 77;
                type_description_1 = "o";
                goto try_except_handler_2;
            }

            tmp_source_name_4 = tmp_mvar_value_1;
            tmp_called_name_1 = LOOKUP_ATTRIBUTE( tmp_source_name_4, const_str_plain_Signals );
            if ( tmp_called_name_1 == NULL )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
                Py_DECREF( tmp_right_name_1 );

                exception_lineno = 77;
                type_description_1 = "o";
                goto try_except_handler_2;
            }
            CHECK_OBJECT( par_self );
            tmp_source_name_5 = par_self;
            tmp_operand_name_1 = LOOKUP_ATTRIBUTE( tmp_source_name_5, const_str_plain_returncode );
            if ( tmp_operand_name_1 == NULL )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
                Py_DECREF( tmp_right_name_1 );
                Py_DECREF( tmp_called_name_1 );

                exception_lineno = 77;
                type_description_1 = "o";
                goto try_except_handler_2;
            }
            tmp_args_element_name_1 = UNARY_OPERATION( PyNumber_Negative, tmp_operand_name_1 );
            Py_DECREF( tmp_operand_name_1 );
            if ( tmp_args_element_name_1 == NULL )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
                Py_DECREF( tmp_right_name_1 );
                Py_DECREF( tmp_called_name_1 );

                exception_lineno = 77;
                type_description_1 = "o";
                goto try_except_handler_2;
            }
            frame_289d47da2f84ee299300ab1657e1c7c0->m_frame.f_lineno = 77;
            {
                PyObject *call_args[] = { tmp_args_element_name_1 };
                tmp_tuple_element_1 = CALL_FUNCTION_WITH_ARGS1( tmp_called_name_1, call_args );
            }

            Py_DECREF( tmp_called_name_1 );
            Py_DECREF( tmp_args_element_name_1 );
            if ( tmp_tuple_element_1 == NULL )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
                Py_DECREF( tmp_right_name_1 );

                exception_lineno = 77;
                type_description_1 = "o";
                goto try_except_handler_2;
            }
            PyTuple_SET_ITEM( tmp_right_name_1, 1, tmp_tuple_element_1 );
            tmp_return_value = BINARY_OPERATION_REMAINDER( tmp_left_name_1, tmp_right_name_1 );
            Py_DECREF( tmp_right_name_1 );
            if ( tmp_return_value == NULL )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 76;
                type_description_1 = "o";
                goto try_except_handler_2;
            }
            goto frame_return_exit_1;
        }
        // tried codes exits in all cases
        NUITKA_CANNOT_GET_HERE( subprocess$$$function_2___str__ );
        return NULL;
        // Exception handler code:
        try_except_handler_2:;
        exception_keeper_type_1 = exception_type;
        exception_keeper_value_1 = exception_value;
        exception_keeper_tb_1 = exception_tb;
        exception_keeper_lineno_1 = exception_lineno;
        exception_type = NULL;
        exception_value = NULL;
        exception_tb = NULL;
        exception_lineno = 0;

        // Preserve existing published exception.
        exception_preserved_type_1 = EXC_TYPE(PyThreadState_GET());
        Py_XINCREF( exception_preserved_type_1 );
        exception_preserved_value_1 = EXC_VALUE(PyThreadState_GET());
        Py_XINCREF( exception_preserved_value_1 );
        exception_preserved_tb_1 = (PyTracebackObject *)EXC_TRACEBACK(PyThreadState_GET());
        Py_XINCREF( exception_preserved_tb_1 );

        if ( exception_keeper_tb_1 == NULL )
        {
            exception_keeper_tb_1 = MAKE_TRACEBACK( frame_289d47da2f84ee299300ab1657e1c7c0, exception_keeper_lineno_1 );
        }
        else if ( exception_keeper_lineno_1 != 0 )
        {
            exception_keeper_tb_1 = ADD_TRACEBACK( exception_keeper_tb_1, frame_289d47da2f84ee299300ab1657e1c7c0, exception_keeper_lineno_1 );
        }

        NORMALIZE_EXCEPTION( &exception_keeper_type_1, &exception_keeper_value_1, &exception_keeper_tb_1 );
        PyException_SetTraceback( exception_keeper_value_1, (PyObject *)exception_keeper_tb_1 );
        PUBLISH_EXCEPTION( &exception_keeper_type_1, &exception_keeper_value_1, &exception_keeper_tb_1 );
        // Tried code:
        {
            nuitka_bool tmp_condition_result_2;
            PyObject *tmp_compexpr_left_2;
            PyObject *tmp_compexpr_right_2;
            tmp_compexpr_left_2 = EXC_TYPE(PyThreadState_GET());
            tmp_compexpr_right_2 = PyExc_ValueError;
            tmp_res = EXCEPTION_MATCH_BOOL( tmp_compexpr_left_2, tmp_compexpr_right_2 );
            if ( tmp_res == -1 )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 78;
                type_description_1 = "o";
                goto try_except_handler_3;
            }
            tmp_condition_result_2 = ( tmp_res != 0 ) ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
            if ( tmp_condition_result_2 == NUITKA_BOOL_TRUE )
            {
                goto branch_yes_2;
            }
            else
            {
                goto branch_no_2;
            }
            branch_yes_2:;
            {
                PyObject *tmp_left_name_2;
                PyObject *tmp_right_name_2;
                PyObject *tmp_tuple_element_2;
                PyObject *tmp_source_name_6;
                PyObject *tmp_operand_name_2;
                PyObject *tmp_source_name_7;
                tmp_left_name_2 = const_str_digest_deb66f1ed83050e2e64b93d19ff3eba0;
                CHECK_OBJECT( par_self );
                tmp_source_name_6 = par_self;
                tmp_tuple_element_2 = LOOKUP_ATTRIBUTE( tmp_source_name_6, const_str_plain_cmd );
                if ( tmp_tuple_element_2 == NULL )
                {
                    assert( ERROR_OCCURRED() );

                    FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                    exception_lineno = 80;
                    type_description_1 = "o";
                    goto try_except_handler_3;
                }
                tmp_right_name_2 = PyTuple_New( 2 );
                PyTuple_SET_ITEM( tmp_right_name_2, 0, tmp_tuple_element_2 );
                CHECK_OBJECT( par_self );
                tmp_source_name_7 = par_self;
                tmp_operand_name_2 = LOOKUP_ATTRIBUTE( tmp_source_name_7, const_str_plain_returncode );
                if ( tmp_operand_name_2 == NULL )
                {
                    assert( ERROR_OCCURRED() );

                    FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
                    Py_DECREF( tmp_right_name_2 );

                    exception_lineno = 80;
                    type_description_1 = "o";
                    goto try_except_handler_3;
                }
                tmp_tuple_element_2 = UNARY_OPERATION( PyNumber_Negative, tmp_operand_name_2 );
                Py_DECREF( tmp_operand_name_2 );
                if ( tmp_tuple_element_2 == NULL )
                {
                    assert( ERROR_OCCURRED() );

                    FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
                    Py_DECREF( tmp_right_name_2 );

                    exception_lineno = 80;
                    type_description_1 = "o";
                    goto try_except_handler_3;
                }
                PyTuple_SET_ITEM( tmp_right_name_2, 1, tmp_tuple_element_2 );
                tmp_return_value = BINARY_OPERATION_REMAINDER( tmp_left_name_2, tmp_right_name_2 );
                Py_DECREF( tmp_right_name_2 );
                if ( tmp_return_value == NULL )
                {
                    assert( ERROR_OCCURRED() );

                    FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                    exception_lineno = 79;
                    type_description_1 = "o";
                    goto try_except_handler_3;
                }
                goto try_return_handler_3;
            }
            goto branch_end_2;
            branch_no_2:;
            tmp_result = RERAISE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
            if (unlikely( tmp_result == false ))
            {
                exception_lineno = 75;
            }

            if (exception_tb && exception_tb->tb_frame == &frame_289d47da2f84ee299300ab1657e1c7c0->m_frame) frame_289d47da2f84ee299300ab1657e1c7c0->m_frame.f_lineno = exception_tb->tb_lineno;
            type_description_1 = "o";
            goto try_except_handler_3;
            branch_end_2:;
        }
        // tried codes exits in all cases
        NUITKA_CANNOT_GET_HERE( subprocess$$$function_2___str__ );
        return NULL;
        // Return handler code:
        try_return_handler_3:;
        // Restore previous exception.
        SET_CURRENT_EXCEPTION( exception_preserved_type_1, exception_preserved_value_1, exception_preserved_tb_1 );
        goto frame_return_exit_1;
        // Exception handler code:
        try_except_handler_3:;
        exception_keeper_type_2 = exception_type;
        exception_keeper_value_2 = exception_value;
        exception_keeper_tb_2 = exception_tb;
        exception_keeper_lineno_2 = exception_lineno;
        exception_type = NULL;
        exception_value = NULL;
        exception_tb = NULL;
        exception_lineno = 0;

        // Restore previous exception.
        SET_CURRENT_EXCEPTION( exception_preserved_type_1, exception_preserved_value_1, exception_preserved_tb_1 );
        // Re-raise.
        exception_type = exception_keeper_type_2;
        exception_value = exception_keeper_value_2;
        exception_tb = exception_keeper_tb_2;
        exception_lineno = exception_keeper_lineno_2;

        goto frame_exception_exit_1;
        // End of try:
        // End of try:
        goto branch_end_1;
        branch_no_1:;
        {
            PyObject *tmp_left_name_3;
            PyObject *tmp_right_name_3;
            PyObject *tmp_tuple_element_3;
            PyObject *tmp_source_name_8;
            PyObject *tmp_source_name_9;
            tmp_left_name_3 = const_str_digest_fe182f1121b0539251b21da6faaebf72;
            CHECK_OBJECT( par_self );
            tmp_source_name_8 = par_self;
            tmp_tuple_element_3 = LOOKUP_ATTRIBUTE( tmp_source_name_8, const_str_plain_cmd );
            if ( tmp_tuple_element_3 == NULL )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 83;
                type_description_1 = "o";
                goto frame_exception_exit_1;
            }
            tmp_right_name_3 = PyTuple_New( 2 );
            PyTuple_SET_ITEM( tmp_right_name_3, 0, tmp_tuple_element_3 );
            CHECK_OBJECT( par_self );
            tmp_source_name_9 = par_self;
            tmp_tuple_element_3 = LOOKUP_ATTRIBUTE( tmp_source_name_9, const_str_plain_returncode );
            if ( tmp_tuple_element_3 == NULL )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
                Py_DECREF( tmp_right_name_3 );

                exception_lineno = 83;
                type_description_1 = "o";
                goto frame_exception_exit_1;
            }
            PyTuple_SET_ITEM( tmp_right_name_3, 1, tmp_tuple_element_3 );
            tmp_return_value = BINARY_OPERATION_REMAINDER( tmp_left_name_3, tmp_right_name_3 );
            Py_DECREF( tmp_right_name_3 );
            if ( tmp_return_value == NULL )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 82;
                type_description_1 = "o";
                goto frame_exception_exit_1;
            }
            goto frame_return_exit_1;
        }
        branch_end_1:;
    }

#if 0
    RESTORE_FRAME_EXCEPTION( frame_289d47da2f84ee299300ab1657e1c7c0 );
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto frame_no_exception_1;

    frame_return_exit_1:;
#if 0
    RESTORE_FRAME_EXCEPTION( frame_289d47da2f84ee299300ab1657e1c7c0 );
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto try_return_handler_1;

    frame_exception_exit_1:;

#if 0
    RESTORE_FRAME_EXCEPTION( frame_289d47da2f84ee299300ab1657e1c7c0 );
#endif

    if ( exception_tb == NULL )
    {
        exception_tb = MAKE_TRACEBACK( frame_289d47da2f84ee299300ab1657e1c7c0, exception_lineno );
    }
    else if ( exception_tb->tb_frame != &frame_289d47da2f84ee299300ab1657e1c7c0->m_frame )
    {
        exception_tb = ADD_TRACEBACK( exception_tb, frame_289d47da2f84ee299300ab1657e1c7c0, exception_lineno );
    }

    // Attachs locals to frame if any.
    Nuitka_Frame_AttachLocals(
        (struct Nuitka_FrameObject *)frame_289d47da2f84ee299300ab1657e1c7c0,
        type_description_1,
        par_self
    );


    // Release cached frame.
    if ( frame_289d47da2f84ee299300ab1657e1c7c0 == cache_frame_289d47da2f84ee299300ab1657e1c7c0 )
    {
        Py_DECREF( frame_289d47da2f84ee299300ab1657e1c7c0 );
    }
    cache_frame_289d47da2f84ee299300ab1657e1c7c0 = NULL;

    assertFrameObject( frame_289d47da2f84ee299300ab1657e1c7c0 );

    // Put the previous frame back on top.
    popFrameStack();

    // Return the error.
    goto try_except_handler_1;

    frame_no_exception_1:;
    // tried codes exits in all cases
    NUITKA_CANNOT_GET_HERE( subprocess$$$function_2___str__ );
    return NULL;
    // Return handler code:
    try_return_handler_1:;
    CHECK_OBJECT( (PyObject *)par_self );
    Py_DECREF( par_self );
    par_self = NULL;

    goto function_return_exit;
    // Exception handler code:
    try_except_handler_1:;
    exception_keeper_type_3 = exception_type;
    exception_keeper_value_3 = exception_value;
    exception_keeper_tb_3 = exception_tb;
    exception_keeper_lineno_3 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    CHECK_OBJECT( (PyObject *)par_self );
    Py_DECREF( par_self );
    par_self = NULL;

    // Re-raise.
    exception_type = exception_keeper_type_3;
    exception_value = exception_keeper_value_3;
    exception_tb = exception_keeper_tb_3;
    exception_lineno = exception_keeper_lineno_3;

    goto function_exception_exit;
    // End of try:

    // Return statement must have exited already.
    NUITKA_CANNOT_GET_HERE( subprocess$$$function_2___str__ );
    return NULL;

function_exception_exit:
    assert( exception_type );
    RESTORE_ERROR_OCCURRED( exception_type, exception_value, exception_tb );

    return NULL;

function_return_exit:
   // Function cleanup code if any.


   // Actual function exit with return value, making sure we did not make
   // the error status worse despite non-NULL return.
   CHECK_OBJECT( tmp_return_value );
   assert( had_error || !ERROR_OCCURRED() );
   return tmp_return_value;
}


static PyObject *impl_subprocess$$$function_3_stdout( struct Nuitka_FunctionObject const *self, PyObject **python_pars )
{
    // Preserve error status for checks
#ifndef __NUITKA_NO_ASSERT__
    NUITKA_MAY_BE_UNUSED bool had_error = ERROR_OCCURRED();
#endif

    // Local variable declarations.
    PyObject *par_self = python_pars[ 0 ];
    struct Nuitka_FrameObject *frame_2e69df50cbecb4b3decb2a2de054c9a4;
    NUITKA_MAY_BE_UNUSED char const *type_description_1 = NULL;
    PyObject *tmp_return_value = NULL;
    PyObject *exception_type = NULL;
    PyObject *exception_value = NULL;
    PyTracebackObject *exception_tb = NULL;
    NUITKA_MAY_BE_UNUSED int exception_lineno = 0;
    static struct Nuitka_FrameObject *cache_frame_2e69df50cbecb4b3decb2a2de054c9a4 = NULL;
    PyObject *exception_keeper_type_1;
    PyObject *exception_keeper_value_1;
    PyTracebackObject *exception_keeper_tb_1;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_1;

    // Actual function body.
    // Tried code:
    MAKE_OR_REUSE_FRAME( cache_frame_2e69df50cbecb4b3decb2a2de054c9a4, codeobj_2e69df50cbecb4b3decb2a2de054c9a4, module_subprocess, sizeof(void *) );
    frame_2e69df50cbecb4b3decb2a2de054c9a4 = cache_frame_2e69df50cbecb4b3decb2a2de054c9a4;

    // Push the new frame as the currently active one.
    pushFrameStack( frame_2e69df50cbecb4b3decb2a2de054c9a4 );

    // Mark the frame object as in use, ref count 1 will be up for reuse.
    assert( Py_REFCNT( frame_2e69df50cbecb4b3decb2a2de054c9a4 ) == 2 ); // Frame stack

    // Framed code:
    {
        PyObject *tmp_source_name_1;
        CHECK_OBJECT( par_self );
        tmp_source_name_1 = par_self;
        tmp_return_value = LOOKUP_ATTRIBUTE( tmp_source_name_1, const_str_plain_output );
        if ( tmp_return_value == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 88;
            type_description_1 = "o";
            goto frame_exception_exit_1;
        }
        goto frame_return_exit_1;
    }

#if 0
    RESTORE_FRAME_EXCEPTION( frame_2e69df50cbecb4b3decb2a2de054c9a4 );
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto frame_no_exception_1;

    frame_return_exit_1:;
#if 0
    RESTORE_FRAME_EXCEPTION( frame_2e69df50cbecb4b3decb2a2de054c9a4 );
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto try_return_handler_1;

    frame_exception_exit_1:;

#if 0
    RESTORE_FRAME_EXCEPTION( frame_2e69df50cbecb4b3decb2a2de054c9a4 );
#endif

    if ( exception_tb == NULL )
    {
        exception_tb = MAKE_TRACEBACK( frame_2e69df50cbecb4b3decb2a2de054c9a4, exception_lineno );
    }
    else if ( exception_tb->tb_frame != &frame_2e69df50cbecb4b3decb2a2de054c9a4->m_frame )
    {
        exception_tb = ADD_TRACEBACK( exception_tb, frame_2e69df50cbecb4b3decb2a2de054c9a4, exception_lineno );
    }

    // Attachs locals to frame if any.
    Nuitka_Frame_AttachLocals(
        (struct Nuitka_FrameObject *)frame_2e69df50cbecb4b3decb2a2de054c9a4,
        type_description_1,
        par_self
    );


    // Release cached frame.
    if ( frame_2e69df50cbecb4b3decb2a2de054c9a4 == cache_frame_2e69df50cbecb4b3decb2a2de054c9a4 )
    {
        Py_DECREF( frame_2e69df50cbecb4b3decb2a2de054c9a4 );
    }
    cache_frame_2e69df50cbecb4b3decb2a2de054c9a4 = NULL;

    assertFrameObject( frame_2e69df50cbecb4b3decb2a2de054c9a4 );

    // Put the previous frame back on top.
    popFrameStack();

    // Return the error.
    goto try_except_handler_1;

    frame_no_exception_1:;
    // tried codes exits in all cases
    NUITKA_CANNOT_GET_HERE( subprocess$$$function_3_stdout );
    return NULL;
    // Return handler code:
    try_return_handler_1:;
    CHECK_OBJECT( (PyObject *)par_self );
    Py_DECREF( par_self );
    par_self = NULL;

    goto function_return_exit;
    // Exception handler code:
    try_except_handler_1:;
    exception_keeper_type_1 = exception_type;
    exception_keeper_value_1 = exception_value;
    exception_keeper_tb_1 = exception_tb;
    exception_keeper_lineno_1 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    CHECK_OBJECT( (PyObject *)par_self );
    Py_DECREF( par_self );
    par_self = NULL;

    // Re-raise.
    exception_type = exception_keeper_type_1;
    exception_value = exception_keeper_value_1;
    exception_tb = exception_keeper_tb_1;
    exception_lineno = exception_keeper_lineno_1;

    goto function_exception_exit;
    // End of try:

    // Return statement must have exited already.
    NUITKA_CANNOT_GET_HERE( subprocess$$$function_3_stdout );
    return NULL;

function_exception_exit:
    assert( exception_type );
    RESTORE_ERROR_OCCURRED( exception_type, exception_value, exception_tb );

    return NULL;

function_return_exit:
   // Function cleanup code if any.


   // Actual function exit with return value, making sure we did not make
   // the error status worse despite non-NULL return.
   CHECK_OBJECT( tmp_return_value );
   assert( had_error || !ERROR_OCCURRED() );
   return tmp_return_value;
}


static PyObject *impl_subprocess$$$function_4_stdout( struct Nuitka_FunctionObject const *self, PyObject **python_pars )
{
    // Preserve error status for checks
#ifndef __NUITKA_NO_ASSERT__
    NUITKA_MAY_BE_UNUSED bool had_error = ERROR_OCCURRED();
#endif

    // Local variable declarations.
    PyObject *par_self = python_pars[ 0 ];
    PyObject *par_value = python_pars[ 1 ];
    struct Nuitka_FrameObject *frame_85e1efc804e970d045260ba73e076811;
    NUITKA_MAY_BE_UNUSED char const *type_description_1 = NULL;
    bool tmp_result;
    PyObject *exception_type = NULL;
    PyObject *exception_value = NULL;
    PyTracebackObject *exception_tb = NULL;
    NUITKA_MAY_BE_UNUSED int exception_lineno = 0;
    static struct Nuitka_FrameObject *cache_frame_85e1efc804e970d045260ba73e076811 = NULL;
    PyObject *tmp_return_value = NULL;
    PyObject *exception_keeper_type_1;
    PyObject *exception_keeper_value_1;
    PyTracebackObject *exception_keeper_tb_1;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_1;

    // Actual function body.
    // Tried code:
    MAKE_OR_REUSE_FRAME( cache_frame_85e1efc804e970d045260ba73e076811, codeobj_85e1efc804e970d045260ba73e076811, module_subprocess, sizeof(void *)+sizeof(void *) );
    frame_85e1efc804e970d045260ba73e076811 = cache_frame_85e1efc804e970d045260ba73e076811;

    // Push the new frame as the currently active one.
    pushFrameStack( frame_85e1efc804e970d045260ba73e076811 );

    // Mark the frame object as in use, ref count 1 will be up for reuse.
    assert( Py_REFCNT( frame_85e1efc804e970d045260ba73e076811 ) == 2 ); // Frame stack

    // Framed code:
    {
        PyObject *tmp_assattr_name_1;
        PyObject *tmp_assattr_target_1;
        CHECK_OBJECT( par_value );
        tmp_assattr_name_1 = par_value;
        CHECK_OBJECT( par_self );
        tmp_assattr_target_1 = par_self;
        tmp_result = SET_ATTRIBUTE( tmp_assattr_target_1, const_str_plain_output, tmp_assattr_name_1 );
        if ( tmp_result == false )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 94;
            type_description_1 = "oo";
            goto frame_exception_exit_1;
        }
    }

#if 0
    RESTORE_FRAME_EXCEPTION( frame_85e1efc804e970d045260ba73e076811 );
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto frame_no_exception_1;

    frame_exception_exit_1:;

#if 0
    RESTORE_FRAME_EXCEPTION( frame_85e1efc804e970d045260ba73e076811 );
#endif

    if ( exception_tb == NULL )
    {
        exception_tb = MAKE_TRACEBACK( frame_85e1efc804e970d045260ba73e076811, exception_lineno );
    }
    else if ( exception_tb->tb_frame != &frame_85e1efc804e970d045260ba73e076811->m_frame )
    {
        exception_tb = ADD_TRACEBACK( exception_tb, frame_85e1efc804e970d045260ba73e076811, exception_lineno );
    }

    // Attachs locals to frame if any.
    Nuitka_Frame_AttachLocals(
        (struct Nuitka_FrameObject *)frame_85e1efc804e970d045260ba73e076811,
        type_description_1,
        par_self,
        par_value
    );


    // Release cached frame.
    if ( frame_85e1efc804e970d045260ba73e076811 == cache_frame_85e1efc804e970d045260ba73e076811 )
    {
        Py_DECREF( frame_85e1efc804e970d045260ba73e076811 );
    }
    cache_frame_85e1efc804e970d045260ba73e076811 = NULL;

    assertFrameObject( frame_85e1efc804e970d045260ba73e076811 );

    // Put the previous frame back on top.
    popFrameStack();

    // Return the error.
    goto try_except_handler_1;

    frame_no_exception_1:;
    tmp_return_value = Py_None;
    Py_INCREF( tmp_return_value );
    goto try_return_handler_1;
    // tried codes exits in all cases
    NUITKA_CANNOT_GET_HERE( subprocess$$$function_4_stdout );
    return NULL;
    // Return handler code:
    try_return_handler_1:;
    CHECK_OBJECT( (PyObject *)par_self );
    Py_DECREF( par_self );
    par_self = NULL;

    CHECK_OBJECT( (PyObject *)par_value );
    Py_DECREF( par_value );
    par_value = NULL;

    goto function_return_exit;
    // Exception handler code:
    try_except_handler_1:;
    exception_keeper_type_1 = exception_type;
    exception_keeper_value_1 = exception_value;
    exception_keeper_tb_1 = exception_tb;
    exception_keeper_lineno_1 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    CHECK_OBJECT( (PyObject *)par_self );
    Py_DECREF( par_self );
    par_self = NULL;

    CHECK_OBJECT( (PyObject *)par_value );
    Py_DECREF( par_value );
    par_value = NULL;

    // Re-raise.
    exception_type = exception_keeper_type_1;
    exception_value = exception_keeper_value_1;
    exception_tb = exception_keeper_tb_1;
    exception_lineno = exception_keeper_lineno_1;

    goto function_exception_exit;
    // End of try:

    // Return statement must have exited already.
    NUITKA_CANNOT_GET_HERE( subprocess$$$function_4_stdout );
    return NULL;

function_exception_exit:
    assert( exception_type );
    RESTORE_ERROR_OCCURRED( exception_type, exception_value, exception_tb );

    return NULL;

function_return_exit:
   // Function cleanup code if any.


   // Actual function exit with return value, making sure we did not make
   // the error status worse despite non-NULL return.
   CHECK_OBJECT( tmp_return_value );
   assert( had_error || !ERROR_OCCURRED() );
   return tmp_return_value;
}


static PyObject *impl_subprocess$$$function_5___init__( struct Nuitka_FunctionObject const *self, PyObject **python_pars )
{
    // Preserve error status for checks
#ifndef __NUITKA_NO_ASSERT__
    NUITKA_MAY_BE_UNUSED bool had_error = ERROR_OCCURRED();
#endif

    // Local variable declarations.
    PyObject *par_self = python_pars[ 0 ];
    PyObject *par_cmd = python_pars[ 1 ];
    PyObject *par_timeout = python_pars[ 2 ];
    PyObject *par_output = python_pars[ 3 ];
    PyObject *par_stderr = python_pars[ 4 ];
    struct Nuitka_FrameObject *frame_44b15ad53077c34eed61c357f6697f1e;
    NUITKA_MAY_BE_UNUSED char const *type_description_1 = NULL;
    bool tmp_result;
    PyObject *exception_type = NULL;
    PyObject *exception_value = NULL;
    PyTracebackObject *exception_tb = NULL;
    NUITKA_MAY_BE_UNUSED int exception_lineno = 0;
    static struct Nuitka_FrameObject *cache_frame_44b15ad53077c34eed61c357f6697f1e = NULL;
    PyObject *tmp_return_value = NULL;
    PyObject *exception_keeper_type_1;
    PyObject *exception_keeper_value_1;
    PyTracebackObject *exception_keeper_tb_1;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_1;

    // Actual function body.
    // Tried code:
    MAKE_OR_REUSE_FRAME( cache_frame_44b15ad53077c34eed61c357f6697f1e, codeobj_44b15ad53077c34eed61c357f6697f1e, module_subprocess, sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *) );
    frame_44b15ad53077c34eed61c357f6697f1e = cache_frame_44b15ad53077c34eed61c357f6697f1e;

    // Push the new frame as the currently active one.
    pushFrameStack( frame_44b15ad53077c34eed61c357f6697f1e );

    // Mark the frame object as in use, ref count 1 will be up for reuse.
    assert( Py_REFCNT( frame_44b15ad53077c34eed61c357f6697f1e ) == 2 ); // Frame stack

    // Framed code:
    {
        PyObject *tmp_assattr_name_1;
        PyObject *tmp_assattr_target_1;
        CHECK_OBJECT( par_cmd );
        tmp_assattr_name_1 = par_cmd;
        CHECK_OBJECT( par_self );
        tmp_assattr_target_1 = par_self;
        tmp_result = SET_ATTRIBUTE( tmp_assattr_target_1, const_str_plain_cmd, tmp_assattr_name_1 );
        if ( tmp_result == false )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 105;
            type_description_1 = "ooooo";
            goto frame_exception_exit_1;
        }
    }
    {
        PyObject *tmp_assattr_name_2;
        PyObject *tmp_assattr_target_2;
        CHECK_OBJECT( par_timeout );
        tmp_assattr_name_2 = par_timeout;
        CHECK_OBJECT( par_self );
        tmp_assattr_target_2 = par_self;
        tmp_result = SET_ATTRIBUTE( tmp_assattr_target_2, const_str_plain_timeout, tmp_assattr_name_2 );
        if ( tmp_result == false )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 106;
            type_description_1 = "ooooo";
            goto frame_exception_exit_1;
        }
    }
    {
        PyObject *tmp_assattr_name_3;
        PyObject *tmp_assattr_target_3;
        CHECK_OBJECT( par_output );
        tmp_assattr_name_3 = par_output;
        CHECK_OBJECT( par_self );
        tmp_assattr_target_3 = par_self;
        tmp_result = SET_ATTRIBUTE( tmp_assattr_target_3, const_str_plain_output, tmp_assattr_name_3 );
        if ( tmp_result == false )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 107;
            type_description_1 = "ooooo";
            goto frame_exception_exit_1;
        }
    }
    {
        PyObject *tmp_assattr_name_4;
        PyObject *tmp_assattr_target_4;
        CHECK_OBJECT( par_stderr );
        tmp_assattr_name_4 = par_stderr;
        CHECK_OBJECT( par_self );
        tmp_assattr_target_4 = par_self;
        tmp_result = SET_ATTRIBUTE( tmp_assattr_target_4, const_str_plain_stderr, tmp_assattr_name_4 );
        if ( tmp_result == false )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 108;
            type_description_1 = "ooooo";
            goto frame_exception_exit_1;
        }
    }

#if 0
    RESTORE_FRAME_EXCEPTION( frame_44b15ad53077c34eed61c357f6697f1e );
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto frame_no_exception_1;

    frame_exception_exit_1:;

#if 0
    RESTORE_FRAME_EXCEPTION( frame_44b15ad53077c34eed61c357f6697f1e );
#endif

    if ( exception_tb == NULL )
    {
        exception_tb = MAKE_TRACEBACK( frame_44b15ad53077c34eed61c357f6697f1e, exception_lineno );
    }
    else if ( exception_tb->tb_frame != &frame_44b15ad53077c34eed61c357f6697f1e->m_frame )
    {
        exception_tb = ADD_TRACEBACK( exception_tb, frame_44b15ad53077c34eed61c357f6697f1e, exception_lineno );
    }

    // Attachs locals to frame if any.
    Nuitka_Frame_AttachLocals(
        (struct Nuitka_FrameObject *)frame_44b15ad53077c34eed61c357f6697f1e,
        type_description_1,
        par_self,
        par_cmd,
        par_timeout,
        par_output,
        par_stderr
    );


    // Release cached frame.
    if ( frame_44b15ad53077c34eed61c357f6697f1e == cache_frame_44b15ad53077c34eed61c357f6697f1e )
    {
        Py_DECREF( frame_44b15ad53077c34eed61c357f6697f1e );
    }
    cache_frame_44b15ad53077c34eed61c357f6697f1e = NULL;

    assertFrameObject( frame_44b15ad53077c34eed61c357f6697f1e );

    // Put the previous frame back on top.
    popFrameStack();

    // Return the error.
    goto try_except_handler_1;

    frame_no_exception_1:;
    tmp_return_value = Py_None;
    Py_INCREF( tmp_return_value );
    goto try_return_handler_1;
    // tried codes exits in all cases
    NUITKA_CANNOT_GET_HERE( subprocess$$$function_5___init__ );
    return NULL;
    // Return handler code:
    try_return_handler_1:;
    CHECK_OBJECT( (PyObject *)par_self );
    Py_DECREF( par_self );
    par_self = NULL;

    CHECK_OBJECT( (PyObject *)par_cmd );
    Py_DECREF( par_cmd );
    par_cmd = NULL;

    CHECK_OBJECT( (PyObject *)par_timeout );
    Py_DECREF( par_timeout );
    par_timeout = NULL;

    CHECK_OBJECT( (PyObject *)par_output );
    Py_DECREF( par_output );
    par_output = NULL;

    CHECK_OBJECT( (PyObject *)par_stderr );
    Py_DECREF( par_stderr );
    par_stderr = NULL;

    goto function_return_exit;
    // Exception handler code:
    try_except_handler_1:;
    exception_keeper_type_1 = exception_type;
    exception_keeper_value_1 = exception_value;
    exception_keeper_tb_1 = exception_tb;
    exception_keeper_lineno_1 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    CHECK_OBJECT( (PyObject *)par_self );
    Py_DECREF( par_self );
    par_self = NULL;

    CHECK_OBJECT( (PyObject *)par_cmd );
    Py_DECREF( par_cmd );
    par_cmd = NULL;

    CHECK_OBJECT( (PyObject *)par_timeout );
    Py_DECREF( par_timeout );
    par_timeout = NULL;

    CHECK_OBJECT( (PyObject *)par_output );
    Py_DECREF( par_output );
    par_output = NULL;

    CHECK_OBJECT( (PyObject *)par_stderr );
    Py_DECREF( par_stderr );
    par_stderr = NULL;

    // Re-raise.
    exception_type = exception_keeper_type_1;
    exception_value = exception_keeper_value_1;
    exception_tb = exception_keeper_tb_1;
    exception_lineno = exception_keeper_lineno_1;

    goto function_exception_exit;
    // End of try:

    // Return statement must have exited already.
    NUITKA_CANNOT_GET_HERE( subprocess$$$function_5___init__ );
    return NULL;

function_exception_exit:
    assert( exception_type );
    RESTORE_ERROR_OCCURRED( exception_type, exception_value, exception_tb );

    return NULL;

function_return_exit:
   // Function cleanup code if any.


   // Actual function exit with return value, making sure we did not make
   // the error status worse despite non-NULL return.
   CHECK_OBJECT( tmp_return_value );
   assert( had_error || !ERROR_OCCURRED() );
   return tmp_return_value;
}


static PyObject *impl_subprocess$$$function_6___str__( struct Nuitka_FunctionObject const *self, PyObject **python_pars )
{
    // Preserve error status for checks
#ifndef __NUITKA_NO_ASSERT__
    NUITKA_MAY_BE_UNUSED bool had_error = ERROR_OCCURRED();
#endif

    // Local variable declarations.
    PyObject *par_self = python_pars[ 0 ];
    struct Nuitka_FrameObject *frame_323a42d7dbbe5bdc0b337dd2ef1c320e;
    NUITKA_MAY_BE_UNUSED char const *type_description_1 = NULL;
    PyObject *tmp_return_value = NULL;
    PyObject *exception_type = NULL;
    PyObject *exception_value = NULL;
    PyTracebackObject *exception_tb = NULL;
    NUITKA_MAY_BE_UNUSED int exception_lineno = 0;
    static struct Nuitka_FrameObject *cache_frame_323a42d7dbbe5bdc0b337dd2ef1c320e = NULL;
    PyObject *exception_keeper_type_1;
    PyObject *exception_keeper_value_1;
    PyTracebackObject *exception_keeper_tb_1;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_1;

    // Actual function body.
    // Tried code:
    MAKE_OR_REUSE_FRAME( cache_frame_323a42d7dbbe5bdc0b337dd2ef1c320e, codeobj_323a42d7dbbe5bdc0b337dd2ef1c320e, module_subprocess, sizeof(void *) );
    frame_323a42d7dbbe5bdc0b337dd2ef1c320e = cache_frame_323a42d7dbbe5bdc0b337dd2ef1c320e;

    // Push the new frame as the currently active one.
    pushFrameStack( frame_323a42d7dbbe5bdc0b337dd2ef1c320e );

    // Mark the frame object as in use, ref count 1 will be up for reuse.
    assert( Py_REFCNT( frame_323a42d7dbbe5bdc0b337dd2ef1c320e ) == 2 ); // Frame stack

    // Framed code:
    {
        PyObject *tmp_left_name_1;
        PyObject *tmp_right_name_1;
        PyObject *tmp_tuple_element_1;
        PyObject *tmp_source_name_1;
        PyObject *tmp_source_name_2;
        tmp_left_name_1 = const_str_digest_1e4edad453cfaa12c0e57ca62e3ae4d6;
        CHECK_OBJECT( par_self );
        tmp_source_name_1 = par_self;
        tmp_tuple_element_1 = LOOKUP_ATTRIBUTE( tmp_source_name_1, const_str_plain_cmd );
        if ( tmp_tuple_element_1 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 112;
            type_description_1 = "o";
            goto frame_exception_exit_1;
        }
        tmp_right_name_1 = PyTuple_New( 2 );
        PyTuple_SET_ITEM( tmp_right_name_1, 0, tmp_tuple_element_1 );
        CHECK_OBJECT( par_self );
        tmp_source_name_2 = par_self;
        tmp_tuple_element_1 = LOOKUP_ATTRIBUTE( tmp_source_name_2, const_str_plain_timeout );
        if ( tmp_tuple_element_1 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
            Py_DECREF( tmp_right_name_1 );

            exception_lineno = 112;
            type_description_1 = "o";
            goto frame_exception_exit_1;
        }
        PyTuple_SET_ITEM( tmp_right_name_1, 1, tmp_tuple_element_1 );
        tmp_return_value = BINARY_OPERATION_REMAINDER( tmp_left_name_1, tmp_right_name_1 );
        Py_DECREF( tmp_right_name_1 );
        if ( tmp_return_value == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 111;
            type_description_1 = "o";
            goto frame_exception_exit_1;
        }
        goto frame_return_exit_1;
    }

#if 0
    RESTORE_FRAME_EXCEPTION( frame_323a42d7dbbe5bdc0b337dd2ef1c320e );
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto frame_no_exception_1;

    frame_return_exit_1:;
#if 0
    RESTORE_FRAME_EXCEPTION( frame_323a42d7dbbe5bdc0b337dd2ef1c320e );
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto try_return_handler_1;

    frame_exception_exit_1:;

#if 0
    RESTORE_FRAME_EXCEPTION( frame_323a42d7dbbe5bdc0b337dd2ef1c320e );
#endif

    if ( exception_tb == NULL )
    {
        exception_tb = MAKE_TRACEBACK( frame_323a42d7dbbe5bdc0b337dd2ef1c320e, exception_lineno );
    }
    else if ( exception_tb->tb_frame != &frame_323a42d7dbbe5bdc0b337dd2ef1c320e->m_frame )
    {
        exception_tb = ADD_TRACEBACK( exception_tb, frame_323a42d7dbbe5bdc0b337dd2ef1c320e, exception_lineno );
    }

    // Attachs locals to frame if any.
    Nuitka_Frame_AttachLocals(
        (struct Nuitka_FrameObject *)frame_323a42d7dbbe5bdc0b337dd2ef1c320e,
        type_description_1,
        par_self
    );


    // Release cached frame.
    if ( frame_323a42d7dbbe5bdc0b337dd2ef1c320e == cache_frame_323a42d7dbbe5bdc0b337dd2ef1c320e )
    {
        Py_DECREF( frame_323a42d7dbbe5bdc0b337dd2ef1c320e );
    }
    cache_frame_323a42d7dbbe5bdc0b337dd2ef1c320e = NULL;

    assertFrameObject( frame_323a42d7dbbe5bdc0b337dd2ef1c320e );

    // Put the previous frame back on top.
    popFrameStack();

    // Return the error.
    goto try_except_handler_1;

    frame_no_exception_1:;
    // tried codes exits in all cases
    NUITKA_CANNOT_GET_HERE( subprocess$$$function_6___str__ );
    return NULL;
    // Return handler code:
    try_return_handler_1:;
    CHECK_OBJECT( (PyObject *)par_self );
    Py_DECREF( par_self );
    par_self = NULL;

    goto function_return_exit;
    // Exception handler code:
    try_except_handler_1:;
    exception_keeper_type_1 = exception_type;
    exception_keeper_value_1 = exception_value;
    exception_keeper_tb_1 = exception_tb;
    exception_keeper_lineno_1 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    CHECK_OBJECT( (PyObject *)par_self );
    Py_DECREF( par_self );
    par_self = NULL;

    // Re-raise.
    exception_type = exception_keeper_type_1;
    exception_value = exception_keeper_value_1;
    exception_tb = exception_keeper_tb_1;
    exception_lineno = exception_keeper_lineno_1;

    goto function_exception_exit;
    // End of try:

    // Return statement must have exited already.
    NUITKA_CANNOT_GET_HERE( subprocess$$$function_6___str__ );
    return NULL;

function_exception_exit:
    assert( exception_type );
    RESTORE_ERROR_OCCURRED( exception_type, exception_value, exception_tb );

    return NULL;

function_return_exit:
   // Function cleanup code if any.


   // Actual function exit with return value, making sure we did not make
   // the error status worse despite non-NULL return.
   CHECK_OBJECT( tmp_return_value );
   assert( had_error || !ERROR_OCCURRED() );
   return tmp_return_value;
}


static PyObject *impl_subprocess$$$function_7_stdout( struct Nuitka_FunctionObject const *self, PyObject **python_pars )
{
    // Preserve error status for checks
#ifndef __NUITKA_NO_ASSERT__
    NUITKA_MAY_BE_UNUSED bool had_error = ERROR_OCCURRED();
#endif

    // Local variable declarations.
    PyObject *par_self = python_pars[ 0 ];
    struct Nuitka_FrameObject *frame_a7894b3dfd0b661a4dc1a04158eea63e;
    NUITKA_MAY_BE_UNUSED char const *type_description_1 = NULL;
    PyObject *tmp_return_value = NULL;
    PyObject *exception_type = NULL;
    PyObject *exception_value = NULL;
    PyTracebackObject *exception_tb = NULL;
    NUITKA_MAY_BE_UNUSED int exception_lineno = 0;
    static struct Nuitka_FrameObject *cache_frame_a7894b3dfd0b661a4dc1a04158eea63e = NULL;
    PyObject *exception_keeper_type_1;
    PyObject *exception_keeper_value_1;
    PyTracebackObject *exception_keeper_tb_1;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_1;

    // Actual function body.
    // Tried code:
    MAKE_OR_REUSE_FRAME( cache_frame_a7894b3dfd0b661a4dc1a04158eea63e, codeobj_a7894b3dfd0b661a4dc1a04158eea63e, module_subprocess, sizeof(void *) );
    frame_a7894b3dfd0b661a4dc1a04158eea63e = cache_frame_a7894b3dfd0b661a4dc1a04158eea63e;

    // Push the new frame as the currently active one.
    pushFrameStack( frame_a7894b3dfd0b661a4dc1a04158eea63e );

    // Mark the frame object as in use, ref count 1 will be up for reuse.
    assert( Py_REFCNT( frame_a7894b3dfd0b661a4dc1a04158eea63e ) == 2 ); // Frame stack

    // Framed code:
    {
        PyObject *tmp_source_name_1;
        CHECK_OBJECT( par_self );
        tmp_source_name_1 = par_self;
        tmp_return_value = LOOKUP_ATTRIBUTE( tmp_source_name_1, const_str_plain_output );
        if ( tmp_return_value == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 116;
            type_description_1 = "o";
            goto frame_exception_exit_1;
        }
        goto frame_return_exit_1;
    }

#if 0
    RESTORE_FRAME_EXCEPTION( frame_a7894b3dfd0b661a4dc1a04158eea63e );
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto frame_no_exception_1;

    frame_return_exit_1:;
#if 0
    RESTORE_FRAME_EXCEPTION( frame_a7894b3dfd0b661a4dc1a04158eea63e );
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto try_return_handler_1;

    frame_exception_exit_1:;

#if 0
    RESTORE_FRAME_EXCEPTION( frame_a7894b3dfd0b661a4dc1a04158eea63e );
#endif

    if ( exception_tb == NULL )
    {
        exception_tb = MAKE_TRACEBACK( frame_a7894b3dfd0b661a4dc1a04158eea63e, exception_lineno );
    }
    else if ( exception_tb->tb_frame != &frame_a7894b3dfd0b661a4dc1a04158eea63e->m_frame )
    {
        exception_tb = ADD_TRACEBACK( exception_tb, frame_a7894b3dfd0b661a4dc1a04158eea63e, exception_lineno );
    }

    // Attachs locals to frame if any.
    Nuitka_Frame_AttachLocals(
        (struct Nuitka_FrameObject *)frame_a7894b3dfd0b661a4dc1a04158eea63e,
        type_description_1,
        par_self
    );


    // Release cached frame.
    if ( frame_a7894b3dfd0b661a4dc1a04158eea63e == cache_frame_a7894b3dfd0b661a4dc1a04158eea63e )
    {
        Py_DECREF( frame_a7894b3dfd0b661a4dc1a04158eea63e );
    }
    cache_frame_a7894b3dfd0b661a4dc1a04158eea63e = NULL;

    assertFrameObject( frame_a7894b3dfd0b661a4dc1a04158eea63e );

    // Put the previous frame back on top.
    popFrameStack();

    // Return the error.
    goto try_except_handler_1;

    frame_no_exception_1:;
    // tried codes exits in all cases
    NUITKA_CANNOT_GET_HERE( subprocess$$$function_7_stdout );
    return NULL;
    // Return handler code:
    try_return_handler_1:;
    CHECK_OBJECT( (PyObject *)par_self );
    Py_DECREF( par_self );
    par_self = NULL;

    goto function_return_exit;
    // Exception handler code:
    try_except_handler_1:;
    exception_keeper_type_1 = exception_type;
    exception_keeper_value_1 = exception_value;
    exception_keeper_tb_1 = exception_tb;
    exception_keeper_lineno_1 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    CHECK_OBJECT( (PyObject *)par_self );
    Py_DECREF( par_self );
    par_self = NULL;

    // Re-raise.
    exception_type = exception_keeper_type_1;
    exception_value = exception_keeper_value_1;
    exception_tb = exception_keeper_tb_1;
    exception_lineno = exception_keeper_lineno_1;

    goto function_exception_exit;
    // End of try:

    // Return statement must have exited already.
    NUITKA_CANNOT_GET_HERE( subprocess$$$function_7_stdout );
    return NULL;

function_exception_exit:
    assert( exception_type );
    RESTORE_ERROR_OCCURRED( exception_type, exception_value, exception_tb );

    return NULL;

function_return_exit:
   // Function cleanup code if any.


   // Actual function exit with return value, making sure we did not make
   // the error status worse despite non-NULL return.
   CHECK_OBJECT( tmp_return_value );
   assert( had_error || !ERROR_OCCURRED() );
   return tmp_return_value;
}


static PyObject *impl_subprocess$$$function_8_stdout( struct Nuitka_FunctionObject const *self, PyObject **python_pars )
{
    // Preserve error status for checks
#ifndef __NUITKA_NO_ASSERT__
    NUITKA_MAY_BE_UNUSED bool had_error = ERROR_OCCURRED();
#endif

    // Local variable declarations.
    PyObject *par_self = python_pars[ 0 ];
    PyObject *par_value = python_pars[ 1 ];
    struct Nuitka_FrameObject *frame_90d6a8357ef671f37e6c6ec00861d6a2;
    NUITKA_MAY_BE_UNUSED char const *type_description_1 = NULL;
    bool tmp_result;
    PyObject *exception_type = NULL;
    PyObject *exception_value = NULL;
    PyTracebackObject *exception_tb = NULL;
    NUITKA_MAY_BE_UNUSED int exception_lineno = 0;
    static struct Nuitka_FrameObject *cache_frame_90d6a8357ef671f37e6c6ec00861d6a2 = NULL;
    PyObject *tmp_return_value = NULL;
    PyObject *exception_keeper_type_1;
    PyObject *exception_keeper_value_1;
    PyTracebackObject *exception_keeper_tb_1;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_1;

    // Actual function body.
    // Tried code:
    MAKE_OR_REUSE_FRAME( cache_frame_90d6a8357ef671f37e6c6ec00861d6a2, codeobj_90d6a8357ef671f37e6c6ec00861d6a2, module_subprocess, sizeof(void *)+sizeof(void *) );
    frame_90d6a8357ef671f37e6c6ec00861d6a2 = cache_frame_90d6a8357ef671f37e6c6ec00861d6a2;

    // Push the new frame as the currently active one.
    pushFrameStack( frame_90d6a8357ef671f37e6c6ec00861d6a2 );

    // Mark the frame object as in use, ref count 1 will be up for reuse.
    assert( Py_REFCNT( frame_90d6a8357ef671f37e6c6ec00861d6a2 ) == 2 ); // Frame stack

    // Framed code:
    {
        PyObject *tmp_assattr_name_1;
        PyObject *tmp_assattr_target_1;
        CHECK_OBJECT( par_value );
        tmp_assattr_name_1 = par_value;
        CHECK_OBJECT( par_self );
        tmp_assattr_target_1 = par_self;
        tmp_result = SET_ATTRIBUTE( tmp_assattr_target_1, const_str_plain_output, tmp_assattr_name_1 );
        if ( tmp_result == false )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 122;
            type_description_1 = "oo";
            goto frame_exception_exit_1;
        }
    }

#if 0
    RESTORE_FRAME_EXCEPTION( frame_90d6a8357ef671f37e6c6ec00861d6a2 );
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto frame_no_exception_1;

    frame_exception_exit_1:;

#if 0
    RESTORE_FRAME_EXCEPTION( frame_90d6a8357ef671f37e6c6ec00861d6a2 );
#endif

    if ( exception_tb == NULL )
    {
        exception_tb = MAKE_TRACEBACK( frame_90d6a8357ef671f37e6c6ec00861d6a2, exception_lineno );
    }
    else if ( exception_tb->tb_frame != &frame_90d6a8357ef671f37e6c6ec00861d6a2->m_frame )
    {
        exception_tb = ADD_TRACEBACK( exception_tb, frame_90d6a8357ef671f37e6c6ec00861d6a2, exception_lineno );
    }

    // Attachs locals to frame if any.
    Nuitka_Frame_AttachLocals(
        (struct Nuitka_FrameObject *)frame_90d6a8357ef671f37e6c6ec00861d6a2,
        type_description_1,
        par_self,
        par_value
    );


    // Release cached frame.
    if ( frame_90d6a8357ef671f37e6c6ec00861d6a2 == cache_frame_90d6a8357ef671f37e6c6ec00861d6a2 )
    {
        Py_DECREF( frame_90d6a8357ef671f37e6c6ec00861d6a2 );
    }
    cache_frame_90d6a8357ef671f37e6c6ec00861d6a2 = NULL;

    assertFrameObject( frame_90d6a8357ef671f37e6c6ec00861d6a2 );

    // Put the previous frame back on top.
    popFrameStack();

    // Return the error.
    goto try_except_handler_1;

    frame_no_exception_1:;
    tmp_return_value = Py_None;
    Py_INCREF( tmp_return_value );
    goto try_return_handler_1;
    // tried codes exits in all cases
    NUITKA_CANNOT_GET_HERE( subprocess$$$function_8_stdout );
    return NULL;
    // Return handler code:
    try_return_handler_1:;
    CHECK_OBJECT( (PyObject *)par_self );
    Py_DECREF( par_self );
    par_self = NULL;

    CHECK_OBJECT( (PyObject *)par_value );
    Py_DECREF( par_value );
    par_value = NULL;

    goto function_return_exit;
    // Exception handler code:
    try_except_handler_1:;
    exception_keeper_type_1 = exception_type;
    exception_keeper_value_1 = exception_value;
    exception_keeper_tb_1 = exception_tb;
    exception_keeper_lineno_1 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    CHECK_OBJECT( (PyObject *)par_self );
    Py_DECREF( par_self );
    par_self = NULL;

    CHECK_OBJECT( (PyObject *)par_value );
    Py_DECREF( par_value );
    par_value = NULL;

    // Re-raise.
    exception_type = exception_keeper_type_1;
    exception_value = exception_keeper_value_1;
    exception_tb = exception_keeper_tb_1;
    exception_lineno = exception_keeper_lineno_1;

    goto function_exception_exit;
    // End of try:

    // Return statement must have exited already.
    NUITKA_CANNOT_GET_HERE( subprocess$$$function_8_stdout );
    return NULL;

function_exception_exit:
    assert( exception_type );
    RESTORE_ERROR_OCCURRED( exception_type, exception_value, exception_tb );

    return NULL;

function_return_exit:
   // Function cleanup code if any.


   // Actual function exit with return value, making sure we did not make
   // the error status worse despite non-NULL return.
   CHECK_OBJECT( tmp_return_value );
   assert( had_error || !ERROR_OCCURRED() );
   return tmp_return_value;
}


static PyObject *impl_subprocess$$$function_9___init__( struct Nuitka_FunctionObject const *self, PyObject **python_pars )
{
    // Preserve error status for checks
#ifndef __NUITKA_NO_ASSERT__
    NUITKA_MAY_BE_UNUSED bool had_error = ERROR_OCCURRED();
#endif

    // Local variable declarations.
    PyObject *par_self = python_pars[ 0 ];
    PyObject *par_dwFlags = python_pars[ 1 ];
    PyObject *par_hStdInput = python_pars[ 2 ];
    PyObject *par_hStdOutput = python_pars[ 3 ];
    PyObject *par_hStdError = python_pars[ 4 ];
    PyObject *par_wShowWindow = python_pars[ 5 ];
    PyObject *par_lpAttributeList = python_pars[ 6 ];
    struct Nuitka_FrameObject *frame_0bf27aad494dc8f368128ec83ef540d3;
    NUITKA_MAY_BE_UNUSED char const *type_description_1 = NULL;
    bool tmp_result;
    PyObject *exception_type = NULL;
    PyObject *exception_value = NULL;
    PyTracebackObject *exception_tb = NULL;
    NUITKA_MAY_BE_UNUSED int exception_lineno = 0;
    static struct Nuitka_FrameObject *cache_frame_0bf27aad494dc8f368128ec83ef540d3 = NULL;
    PyObject *tmp_return_value = NULL;
    PyObject *exception_keeper_type_1;
    PyObject *exception_keeper_value_1;
    PyTracebackObject *exception_keeper_tb_1;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_1;

    // Actual function body.
    // Tried code:
    MAKE_OR_REUSE_FRAME( cache_frame_0bf27aad494dc8f368128ec83ef540d3, codeobj_0bf27aad494dc8f368128ec83ef540d3, module_subprocess, sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *) );
    frame_0bf27aad494dc8f368128ec83ef540d3 = cache_frame_0bf27aad494dc8f368128ec83ef540d3;

    // Push the new frame as the currently active one.
    pushFrameStack( frame_0bf27aad494dc8f368128ec83ef540d3 );

    // Mark the frame object as in use, ref count 1 will be up for reuse.
    assert( Py_REFCNT( frame_0bf27aad494dc8f368128ec83ef540d3 ) == 2 ); // Frame stack

    // Framed code:
    {
        PyObject *tmp_assattr_name_1;
        PyObject *tmp_assattr_target_1;
        CHECK_OBJECT( par_dwFlags );
        tmp_assattr_name_1 = par_dwFlags;
        CHECK_OBJECT( par_self );
        tmp_assattr_target_1 = par_self;
        tmp_result = SET_ATTRIBUTE( tmp_assattr_target_1, const_str_plain_dwFlags, tmp_assattr_name_1 );
        if ( tmp_result == false )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 132;
            type_description_1 = "ooooooo";
            goto frame_exception_exit_1;
        }
    }
    {
        PyObject *tmp_assattr_name_2;
        PyObject *tmp_assattr_target_2;
        CHECK_OBJECT( par_hStdInput );
        tmp_assattr_name_2 = par_hStdInput;
        CHECK_OBJECT( par_self );
        tmp_assattr_target_2 = par_self;
        tmp_result = SET_ATTRIBUTE( tmp_assattr_target_2, const_str_plain_hStdInput, tmp_assattr_name_2 );
        if ( tmp_result == false )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 133;
            type_description_1 = "ooooooo";
            goto frame_exception_exit_1;
        }
    }
    {
        PyObject *tmp_assattr_name_3;
        PyObject *tmp_assattr_target_3;
        CHECK_OBJECT( par_hStdOutput );
        tmp_assattr_name_3 = par_hStdOutput;
        CHECK_OBJECT( par_self );
        tmp_assattr_target_3 = par_self;
        tmp_result = SET_ATTRIBUTE( tmp_assattr_target_3, const_str_plain_hStdOutput, tmp_assattr_name_3 );
        if ( tmp_result == false )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 134;
            type_description_1 = "ooooooo";
            goto frame_exception_exit_1;
        }
    }
    {
        PyObject *tmp_assattr_name_4;
        PyObject *tmp_assattr_target_4;
        CHECK_OBJECT( par_hStdError );
        tmp_assattr_name_4 = par_hStdError;
        CHECK_OBJECT( par_self );
        tmp_assattr_target_4 = par_self;
        tmp_result = SET_ATTRIBUTE( tmp_assattr_target_4, const_str_plain_hStdError, tmp_assattr_name_4 );
        if ( tmp_result == false )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 135;
            type_description_1 = "ooooooo";
            goto frame_exception_exit_1;
        }
    }
    {
        PyObject *tmp_assattr_name_5;
        PyObject *tmp_assattr_target_5;
        CHECK_OBJECT( par_wShowWindow );
        tmp_assattr_name_5 = par_wShowWindow;
        CHECK_OBJECT( par_self );
        tmp_assattr_target_5 = par_self;
        tmp_result = SET_ATTRIBUTE( tmp_assattr_target_5, const_str_plain_wShowWindow, tmp_assattr_name_5 );
        if ( tmp_result == false )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 136;
            type_description_1 = "ooooooo";
            goto frame_exception_exit_1;
        }
    }
    {
        PyObject *tmp_assattr_name_6;
        int tmp_or_left_truth_1;
        PyObject *tmp_or_left_value_1;
        PyObject *tmp_or_right_value_1;
        PyObject *tmp_assattr_target_6;
        CHECK_OBJECT( par_lpAttributeList );
        tmp_or_left_value_1 = par_lpAttributeList;
        tmp_or_left_truth_1 = CHECK_IF_TRUE( tmp_or_left_value_1 );
        if ( tmp_or_left_truth_1 == -1 )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 137;
            type_description_1 = "ooooooo";
            goto frame_exception_exit_1;
        }
        if ( tmp_or_left_truth_1 == 1 )
        {
            goto or_left_1;
        }
        else
        {
            goto or_right_1;
        }
        or_right_1:;
        tmp_or_right_value_1 = DEEP_COPY( const_dict_d1e7f52ec90a7cdf0d2cc5349ac066ed );
        tmp_assattr_name_6 = tmp_or_right_value_1;
        goto or_end_1;
        or_left_1:;
        Py_INCREF( tmp_or_left_value_1 );
        tmp_assattr_name_6 = tmp_or_left_value_1;
        or_end_1:;
        CHECK_OBJECT( par_self );
        tmp_assattr_target_6 = par_self;
        tmp_result = SET_ATTRIBUTE( tmp_assattr_target_6, const_str_plain_lpAttributeList, tmp_assattr_name_6 );
        Py_DECREF( tmp_assattr_name_6 );
        if ( tmp_result == false )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 137;
            type_description_1 = "ooooooo";
            goto frame_exception_exit_1;
        }
    }

#if 0
    RESTORE_FRAME_EXCEPTION( frame_0bf27aad494dc8f368128ec83ef540d3 );
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto frame_no_exception_1;

    frame_exception_exit_1:;

#if 0
    RESTORE_FRAME_EXCEPTION( frame_0bf27aad494dc8f368128ec83ef540d3 );
#endif

    if ( exception_tb == NULL )
    {
        exception_tb = MAKE_TRACEBACK( frame_0bf27aad494dc8f368128ec83ef540d3, exception_lineno );
    }
    else if ( exception_tb->tb_frame != &frame_0bf27aad494dc8f368128ec83ef540d3->m_frame )
    {
        exception_tb = ADD_TRACEBACK( exception_tb, frame_0bf27aad494dc8f368128ec83ef540d3, exception_lineno );
    }

    // Attachs locals to frame if any.
    Nuitka_Frame_AttachLocals(
        (struct Nuitka_FrameObject *)frame_0bf27aad494dc8f368128ec83ef540d3,
        type_description_1,
        par_self,
        par_dwFlags,
        par_hStdInput,
        par_hStdOutput,
        par_hStdError,
        par_wShowWindow,
        par_lpAttributeList
    );


    // Release cached frame.
    if ( frame_0bf27aad494dc8f368128ec83ef540d3 == cache_frame_0bf27aad494dc8f368128ec83ef540d3 )
    {
        Py_DECREF( frame_0bf27aad494dc8f368128ec83ef540d3 );
    }
    cache_frame_0bf27aad494dc8f368128ec83ef540d3 = NULL;

    assertFrameObject( frame_0bf27aad494dc8f368128ec83ef540d3 );

    // Put the previous frame back on top.
    popFrameStack();

    // Return the error.
    goto try_except_handler_1;

    frame_no_exception_1:;
    tmp_return_value = Py_None;
    Py_INCREF( tmp_return_value );
    goto try_return_handler_1;
    // tried codes exits in all cases
    NUITKA_CANNOT_GET_HERE( subprocess$$$function_9___init__ );
    return NULL;
    // Return handler code:
    try_return_handler_1:;
    CHECK_OBJECT( (PyObject *)par_self );
    Py_DECREF( par_self );
    par_self = NULL;

    CHECK_OBJECT( (PyObject *)par_dwFlags );
    Py_DECREF( par_dwFlags );
    par_dwFlags = NULL;

    CHECK_OBJECT( (PyObject *)par_hStdInput );
    Py_DECREF( par_hStdInput );
    par_hStdInput = NULL;

    CHECK_OBJECT( (PyObject *)par_hStdOutput );
    Py_DECREF( par_hStdOutput );
    par_hStdOutput = NULL;

    CHECK_OBJECT( (PyObject *)par_hStdError );
    Py_DECREF( par_hStdError );
    par_hStdError = NULL;

    CHECK_OBJECT( (PyObject *)par_wShowWindow );
    Py_DECREF( par_wShowWindow );
    par_wShowWindow = NULL;

    CHECK_OBJECT( (PyObject *)par_lpAttributeList );
    Py_DECREF( par_lpAttributeList );
    par_lpAttributeList = NULL;

    goto function_return_exit;
    // Exception handler code:
    try_except_handler_1:;
    exception_keeper_type_1 = exception_type;
    exception_keeper_value_1 = exception_value;
    exception_keeper_tb_1 = exception_tb;
    exception_keeper_lineno_1 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    CHECK_OBJECT( (PyObject *)par_self );
    Py_DECREF( par_self );
    par_self = NULL;

    CHECK_OBJECT( (PyObject *)par_dwFlags );
    Py_DECREF( par_dwFlags );
    par_dwFlags = NULL;

    CHECK_OBJECT( (PyObject *)par_hStdInput );
    Py_DECREF( par_hStdInput );
    par_hStdInput = NULL;

    CHECK_OBJECT( (PyObject *)par_hStdOutput );
    Py_DECREF( par_hStdOutput );
    par_hStdOutput = NULL;

    CHECK_OBJECT( (PyObject *)par_hStdError );
    Py_DECREF( par_hStdError );
    par_hStdError = NULL;

    CHECK_OBJECT( (PyObject *)par_wShowWindow );
    Py_DECREF( par_wShowWindow );
    par_wShowWindow = NULL;

    CHECK_OBJECT( (PyObject *)par_lpAttributeList );
    Py_DECREF( par_lpAttributeList );
    par_lpAttributeList = NULL;

    // Re-raise.
    exception_type = exception_keeper_type_1;
    exception_value = exception_keeper_value_1;
    exception_tb = exception_keeper_tb_1;
    exception_lineno = exception_keeper_lineno_1;

    goto function_exception_exit;
    // End of try:

    // Return statement must have exited already.
    NUITKA_CANNOT_GET_HERE( subprocess$$$function_9___init__ );
    return NULL;

function_exception_exit:
    assert( exception_type );
    RESTORE_ERROR_OCCURRED( exception_type, exception_value, exception_tb );

    return NULL;

function_return_exit:
   // Function cleanup code if any.


   // Actual function exit with return value, making sure we did not make
   // the error status worse despite non-NULL return.
   CHECK_OBJECT( tmp_return_value );
   assert( had_error || !ERROR_OCCURRED() );
   return tmp_return_value;
}


static PyObject *impl_subprocess$$$function_10__copy( struct Nuitka_FunctionObject const *self, PyObject **python_pars )
{
    // Preserve error status for checks
#ifndef __NUITKA_NO_ASSERT__
    NUITKA_MAY_BE_UNUSED bool had_error = ERROR_OCCURRED();
#endif

    // Local variable declarations.
    PyObject *par_self = python_pars[ 0 ];
    PyObject *var_attr_list = NULL;
    struct Nuitka_FrameObject *frame_52856dea11ed4d8c00f05a44a2bb7a1b;
    NUITKA_MAY_BE_UNUSED char const *type_description_1 = NULL;
    PyObject *exception_type = NULL;
    PyObject *exception_value = NULL;
    PyTracebackObject *exception_tb = NULL;
    NUITKA_MAY_BE_UNUSED int exception_lineno = 0;
    int tmp_res;
    bool tmp_result;
    PyObject *tmp_return_value = NULL;
    static struct Nuitka_FrameObject *cache_frame_52856dea11ed4d8c00f05a44a2bb7a1b = NULL;
    PyObject *exception_keeper_type_1;
    PyObject *exception_keeper_value_1;
    PyTracebackObject *exception_keeper_tb_1;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_1;

    // Actual function body.
    // Tried code:
    MAKE_OR_REUSE_FRAME( cache_frame_52856dea11ed4d8c00f05a44a2bb7a1b, codeobj_52856dea11ed4d8c00f05a44a2bb7a1b, module_subprocess, sizeof(void *)+sizeof(void *) );
    frame_52856dea11ed4d8c00f05a44a2bb7a1b = cache_frame_52856dea11ed4d8c00f05a44a2bb7a1b;

    // Push the new frame as the currently active one.
    pushFrameStack( frame_52856dea11ed4d8c00f05a44a2bb7a1b );

    // Mark the frame object as in use, ref count 1 will be up for reuse.
    assert( Py_REFCNT( frame_52856dea11ed4d8c00f05a44a2bb7a1b ) == 2 ); // Frame stack

    // Framed code:
    {
        PyObject *tmp_assign_source_1;
        PyObject *tmp_called_instance_1;
        PyObject *tmp_source_name_1;
        CHECK_OBJECT( par_self );
        tmp_source_name_1 = par_self;
        tmp_called_instance_1 = LOOKUP_ATTRIBUTE( tmp_source_name_1, const_str_plain_lpAttributeList );
        if ( tmp_called_instance_1 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 140;
            type_description_1 = "oo";
            goto frame_exception_exit_1;
        }
        frame_52856dea11ed4d8c00f05a44a2bb7a1b->m_frame.f_lineno = 140;
        tmp_assign_source_1 = CALL_METHOD_NO_ARGS( tmp_called_instance_1, const_str_plain_copy );
        Py_DECREF( tmp_called_instance_1 );
        if ( tmp_assign_source_1 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 140;
            type_description_1 = "oo";
            goto frame_exception_exit_1;
        }
        assert( var_attr_list == NULL );
        var_attr_list = tmp_assign_source_1;
    }
    {
        nuitka_bool tmp_condition_result_1;
        PyObject *tmp_compexpr_left_1;
        PyObject *tmp_compexpr_right_1;
        tmp_compexpr_left_1 = const_str_plain_handle_list;
        CHECK_OBJECT( var_attr_list );
        tmp_compexpr_right_1 = var_attr_list;
        tmp_res = PySequence_Contains( tmp_compexpr_right_1, tmp_compexpr_left_1 );
        if ( tmp_res == -1 )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 141;
            type_description_1 = "oo";
            goto frame_exception_exit_1;
        }
        tmp_condition_result_1 = ( tmp_res == 1 ) ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
        if ( tmp_condition_result_1 == NUITKA_BOOL_TRUE )
        {
            goto branch_yes_1;
        }
        else
        {
            goto branch_no_1;
        }
        branch_yes_1:;
        {
            PyObject *tmp_ass_subvalue_1;
            PyObject *tmp_list_arg_1;
            PyObject *tmp_subscribed_name_1;
            PyObject *tmp_subscript_name_1;
            PyObject *tmp_ass_subscribed_1;
            PyObject *tmp_ass_subscript_1;
            CHECK_OBJECT( var_attr_list );
            tmp_subscribed_name_1 = var_attr_list;
            tmp_subscript_name_1 = const_str_plain_handle_list;
            tmp_list_arg_1 = LOOKUP_SUBSCRIPT( tmp_subscribed_name_1, tmp_subscript_name_1 );
            if ( tmp_list_arg_1 == NULL )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 142;
                type_description_1 = "oo";
                goto frame_exception_exit_1;
            }
            tmp_ass_subvalue_1 = PySequence_List( tmp_list_arg_1 );
            Py_DECREF( tmp_list_arg_1 );
            if ( tmp_ass_subvalue_1 == NULL )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 142;
                type_description_1 = "oo";
                goto frame_exception_exit_1;
            }
            CHECK_OBJECT( var_attr_list );
            tmp_ass_subscribed_1 = var_attr_list;
            tmp_ass_subscript_1 = const_str_plain_handle_list;
            tmp_result = SET_SUBSCRIPT( tmp_ass_subscribed_1, tmp_ass_subscript_1, tmp_ass_subvalue_1 );
            Py_DECREF( tmp_ass_subvalue_1 );
            if ( tmp_result == false )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 142;
                type_description_1 = "oo";
                goto frame_exception_exit_1;
            }
        }
        branch_no_1:;
    }
    {
        PyObject *tmp_called_name_1;
        PyObject *tmp_mvar_value_1;
        PyObject *tmp_kw_name_1;
        PyObject *tmp_dict_key_1;
        PyObject *tmp_dict_value_1;
        PyObject *tmp_source_name_2;
        PyObject *tmp_dict_key_2;
        PyObject *tmp_dict_value_2;
        PyObject *tmp_source_name_3;
        PyObject *tmp_dict_key_3;
        PyObject *tmp_dict_value_3;
        PyObject *tmp_source_name_4;
        PyObject *tmp_dict_key_4;
        PyObject *tmp_dict_value_4;
        PyObject *tmp_source_name_5;
        PyObject *tmp_dict_key_5;
        PyObject *tmp_dict_value_5;
        PyObject *tmp_source_name_6;
        PyObject *tmp_dict_key_6;
        PyObject *tmp_dict_value_6;
        tmp_mvar_value_1 = GET_STRING_DICT_VALUE( moduledict_subprocess, (Nuitka_StringObject *)const_str_plain_STARTUPINFO );

        if (unlikely( tmp_mvar_value_1 == NULL ))
        {
            tmp_mvar_value_1 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_STARTUPINFO );
        }

        if ( tmp_mvar_value_1 == NULL )
        {

            exception_type = PyExc_NameError;
            Py_INCREF( exception_type );
            exception_value = PyUnicode_FromFormat( "name '%s' is not defined", "STARTUPINFO" );
            exception_tb = NULL;
            NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
            CHAIN_EXCEPTION( exception_value );

            exception_lineno = 144;
            type_description_1 = "oo";
            goto frame_exception_exit_1;
        }

        tmp_called_name_1 = tmp_mvar_value_1;
        tmp_dict_key_1 = const_str_plain_dwFlags;
        CHECK_OBJECT( par_self );
        tmp_source_name_2 = par_self;
        tmp_dict_value_1 = LOOKUP_ATTRIBUTE( tmp_source_name_2, const_str_plain_dwFlags );
        if ( tmp_dict_value_1 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 144;
            type_description_1 = "oo";
            goto frame_exception_exit_1;
        }
        tmp_kw_name_1 = _PyDict_NewPresized( 6 );
        tmp_res = PyDict_SetItem( tmp_kw_name_1, tmp_dict_key_1, tmp_dict_value_1 );
        Py_DECREF( tmp_dict_value_1 );
        assert( !(tmp_res != 0) );
        tmp_dict_key_2 = const_str_plain_hStdInput;
        CHECK_OBJECT( par_self );
        tmp_source_name_3 = par_self;
        tmp_dict_value_2 = LOOKUP_ATTRIBUTE( tmp_source_name_3, const_str_plain_hStdInput );
        if ( tmp_dict_value_2 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
            Py_DECREF( tmp_kw_name_1 );

            exception_lineno = 145;
            type_description_1 = "oo";
            goto frame_exception_exit_1;
        }
        tmp_res = PyDict_SetItem( tmp_kw_name_1, tmp_dict_key_2, tmp_dict_value_2 );
        Py_DECREF( tmp_dict_value_2 );
        assert( !(tmp_res != 0) );
        tmp_dict_key_3 = const_str_plain_hStdOutput;
        CHECK_OBJECT( par_self );
        tmp_source_name_4 = par_self;
        tmp_dict_value_3 = LOOKUP_ATTRIBUTE( tmp_source_name_4, const_str_plain_hStdOutput );
        if ( tmp_dict_value_3 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
            Py_DECREF( tmp_kw_name_1 );

            exception_lineno = 146;
            type_description_1 = "oo";
            goto frame_exception_exit_1;
        }
        tmp_res = PyDict_SetItem( tmp_kw_name_1, tmp_dict_key_3, tmp_dict_value_3 );
        Py_DECREF( tmp_dict_value_3 );
        assert( !(tmp_res != 0) );
        tmp_dict_key_4 = const_str_plain_hStdError;
        CHECK_OBJECT( par_self );
        tmp_source_name_5 = par_self;
        tmp_dict_value_4 = LOOKUP_ATTRIBUTE( tmp_source_name_5, const_str_plain_hStdError );
        if ( tmp_dict_value_4 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
            Py_DECREF( tmp_kw_name_1 );

            exception_lineno = 147;
            type_description_1 = "oo";
            goto frame_exception_exit_1;
        }
        tmp_res = PyDict_SetItem( tmp_kw_name_1, tmp_dict_key_4, tmp_dict_value_4 );
        Py_DECREF( tmp_dict_value_4 );
        assert( !(tmp_res != 0) );
        tmp_dict_key_5 = const_str_plain_wShowWindow;
        CHECK_OBJECT( par_self );
        tmp_source_name_6 = par_self;
        tmp_dict_value_5 = LOOKUP_ATTRIBUTE( tmp_source_name_6, const_str_plain_wShowWindow );
        if ( tmp_dict_value_5 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
            Py_DECREF( tmp_kw_name_1 );

            exception_lineno = 148;
            type_description_1 = "oo";
            goto frame_exception_exit_1;
        }
        tmp_res = PyDict_SetItem( tmp_kw_name_1, tmp_dict_key_5, tmp_dict_value_5 );
        Py_DECREF( tmp_dict_value_5 );
        assert( !(tmp_res != 0) );
        tmp_dict_key_6 = const_str_plain_lpAttributeList;
        CHECK_OBJECT( var_attr_list );
        tmp_dict_value_6 = var_attr_list;
        tmp_res = PyDict_SetItem( tmp_kw_name_1, tmp_dict_key_6, tmp_dict_value_6 );
        assert( !(tmp_res != 0) );
        frame_52856dea11ed4d8c00f05a44a2bb7a1b->m_frame.f_lineno = 144;
        tmp_return_value = CALL_FUNCTION_WITH_KEYARGS( tmp_called_name_1, tmp_kw_name_1 );
        Py_DECREF( tmp_kw_name_1 );
        if ( tmp_return_value == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 144;
            type_description_1 = "oo";
            goto frame_exception_exit_1;
        }
        goto frame_return_exit_1;
    }

#if 0
    RESTORE_FRAME_EXCEPTION( frame_52856dea11ed4d8c00f05a44a2bb7a1b );
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto frame_no_exception_1;

    frame_return_exit_1:;
#if 0
    RESTORE_FRAME_EXCEPTION( frame_52856dea11ed4d8c00f05a44a2bb7a1b );
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto try_return_handler_1;

    frame_exception_exit_1:;

#if 0
    RESTORE_FRAME_EXCEPTION( frame_52856dea11ed4d8c00f05a44a2bb7a1b );
#endif

    if ( exception_tb == NULL )
    {
        exception_tb = MAKE_TRACEBACK( frame_52856dea11ed4d8c00f05a44a2bb7a1b, exception_lineno );
    }
    else if ( exception_tb->tb_frame != &frame_52856dea11ed4d8c00f05a44a2bb7a1b->m_frame )
    {
        exception_tb = ADD_TRACEBACK( exception_tb, frame_52856dea11ed4d8c00f05a44a2bb7a1b, exception_lineno );
    }

    // Attachs locals to frame if any.
    Nuitka_Frame_AttachLocals(
        (struct Nuitka_FrameObject *)frame_52856dea11ed4d8c00f05a44a2bb7a1b,
        type_description_1,
        par_self,
        var_attr_list
    );


    // Release cached frame.
    if ( frame_52856dea11ed4d8c00f05a44a2bb7a1b == cache_frame_52856dea11ed4d8c00f05a44a2bb7a1b )
    {
        Py_DECREF( frame_52856dea11ed4d8c00f05a44a2bb7a1b );
    }
    cache_frame_52856dea11ed4d8c00f05a44a2bb7a1b = NULL;

    assertFrameObject( frame_52856dea11ed4d8c00f05a44a2bb7a1b );

    // Put the previous frame back on top.
    popFrameStack();

    // Return the error.
    goto try_except_handler_1;

    frame_no_exception_1:;
    // tried codes exits in all cases
    NUITKA_CANNOT_GET_HERE( subprocess$$$function_10__copy );
    return NULL;
    // Return handler code:
    try_return_handler_1:;
    CHECK_OBJECT( (PyObject *)par_self );
    Py_DECREF( par_self );
    par_self = NULL;

    CHECK_OBJECT( (PyObject *)var_attr_list );
    Py_DECREF( var_attr_list );
    var_attr_list = NULL;

    goto function_return_exit;
    // Exception handler code:
    try_except_handler_1:;
    exception_keeper_type_1 = exception_type;
    exception_keeper_value_1 = exception_value;
    exception_keeper_tb_1 = exception_tb;
    exception_keeper_lineno_1 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    CHECK_OBJECT( (PyObject *)par_self );
    Py_DECREF( par_self );
    par_self = NULL;

    Py_XDECREF( var_attr_list );
    var_attr_list = NULL;

    // Re-raise.
    exception_type = exception_keeper_type_1;
    exception_value = exception_keeper_value_1;
    exception_tb = exception_keeper_tb_1;
    exception_lineno = exception_keeper_lineno_1;

    goto function_exception_exit;
    // End of try:

    // Return statement must have exited already.
    NUITKA_CANNOT_GET_HERE( subprocess$$$function_10__copy );
    return NULL;

function_exception_exit:
    assert( exception_type );
    RESTORE_ERROR_OCCURRED( exception_type, exception_value, exception_tb );

    return NULL;

function_return_exit:
   // Function cleanup code if any.


   // Actual function exit with return value, making sure we did not make
   // the error status worse despite non-NULL return.
   CHECK_OBJECT( tmp_return_value );
   assert( had_error || !ERROR_OCCURRED() );
   return tmp_return_value;
}


static PyObject *impl_subprocess$$$function_11_Close( struct Nuitka_FunctionObject const *self, PyObject **python_pars )
{
    // Preserve error status for checks
#ifndef __NUITKA_NO_ASSERT__
    NUITKA_MAY_BE_UNUSED bool had_error = ERROR_OCCURRED();
#endif

    // Local variable declarations.
    PyObject *par_self = python_pars[ 0 ];
    PyObject *par_CloseHandle = python_pars[ 1 ];
    struct Nuitka_FrameObject *frame_800df6b7458649b7309b2810385e4019;
    NUITKA_MAY_BE_UNUSED char const *type_description_1 = NULL;
    PyObject *exception_type = NULL;
    PyObject *exception_value = NULL;
    PyTracebackObject *exception_tb = NULL;
    NUITKA_MAY_BE_UNUSED int exception_lineno = 0;
    int tmp_res;
    bool tmp_result;
    static struct Nuitka_FrameObject *cache_frame_800df6b7458649b7309b2810385e4019 = NULL;
    PyObject *tmp_return_value = NULL;
    PyObject *exception_keeper_type_1;
    PyObject *exception_keeper_value_1;
    PyTracebackObject *exception_keeper_tb_1;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_1;

    // Actual function body.
    // Tried code:
    MAKE_OR_REUSE_FRAME( cache_frame_800df6b7458649b7309b2810385e4019, codeobj_800df6b7458649b7309b2810385e4019, module_subprocess, sizeof(void *)+sizeof(void *) );
    frame_800df6b7458649b7309b2810385e4019 = cache_frame_800df6b7458649b7309b2810385e4019;

    // Push the new frame as the currently active one.
    pushFrameStack( frame_800df6b7458649b7309b2810385e4019 );

    // Mark the frame object as in use, ref count 1 will be up for reuse.
    assert( Py_REFCNT( frame_800df6b7458649b7309b2810385e4019 ) == 2 ); // Frame stack

    // Framed code:
    {
        nuitka_bool tmp_condition_result_1;
        PyObject *tmp_operand_name_1;
        PyObject *tmp_source_name_1;
        CHECK_OBJECT( par_self );
        tmp_source_name_1 = par_self;
        tmp_operand_name_1 = LOOKUP_ATTRIBUTE( tmp_source_name_1, const_str_plain_closed );
        if ( tmp_operand_name_1 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 203;
            type_description_1 = "oo";
            goto frame_exception_exit_1;
        }
        tmp_res = CHECK_IF_TRUE( tmp_operand_name_1 );
        Py_DECREF( tmp_operand_name_1 );
        if ( tmp_res == -1 )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 203;
            type_description_1 = "oo";
            goto frame_exception_exit_1;
        }
        tmp_condition_result_1 = ( tmp_res == 0 ) ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
        if ( tmp_condition_result_1 == NUITKA_BOOL_TRUE )
        {
            goto branch_yes_1;
        }
        else
        {
            goto branch_no_1;
        }
        branch_yes_1:;
        {
            PyObject *tmp_assattr_name_1;
            PyObject *tmp_assattr_target_1;
            tmp_assattr_name_1 = Py_True;
            CHECK_OBJECT( par_self );
            tmp_assattr_target_1 = par_self;
            tmp_result = SET_ATTRIBUTE( tmp_assattr_target_1, const_str_plain_closed, tmp_assattr_name_1 );
            if ( tmp_result == false )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 204;
                type_description_1 = "oo";
                goto frame_exception_exit_1;
            }
        }
        {
            PyObject *tmp_called_name_1;
            PyObject *tmp_call_result_1;
            PyObject *tmp_args_element_name_1;
            CHECK_OBJECT( par_CloseHandle );
            tmp_called_name_1 = par_CloseHandle;
            CHECK_OBJECT( par_self );
            tmp_args_element_name_1 = par_self;
            frame_800df6b7458649b7309b2810385e4019->m_frame.f_lineno = 205;
            {
                PyObject *call_args[] = { tmp_args_element_name_1 };
                tmp_call_result_1 = CALL_FUNCTION_WITH_ARGS1( tmp_called_name_1, call_args );
            }

            if ( tmp_call_result_1 == NULL )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 205;
                type_description_1 = "oo";
                goto frame_exception_exit_1;
            }
            Py_DECREF( tmp_call_result_1 );
        }
        branch_no_1:;
    }

#if 0
    RESTORE_FRAME_EXCEPTION( frame_800df6b7458649b7309b2810385e4019 );
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto frame_no_exception_1;

    frame_exception_exit_1:;

#if 0
    RESTORE_FRAME_EXCEPTION( frame_800df6b7458649b7309b2810385e4019 );
#endif

    if ( exception_tb == NULL )
    {
        exception_tb = MAKE_TRACEBACK( frame_800df6b7458649b7309b2810385e4019, exception_lineno );
    }
    else if ( exception_tb->tb_frame != &frame_800df6b7458649b7309b2810385e4019->m_frame )
    {
        exception_tb = ADD_TRACEBACK( exception_tb, frame_800df6b7458649b7309b2810385e4019, exception_lineno );
    }

    // Attachs locals to frame if any.
    Nuitka_Frame_AttachLocals(
        (struct Nuitka_FrameObject *)frame_800df6b7458649b7309b2810385e4019,
        type_description_1,
        par_self,
        par_CloseHandle
    );


    // Release cached frame.
    if ( frame_800df6b7458649b7309b2810385e4019 == cache_frame_800df6b7458649b7309b2810385e4019 )
    {
        Py_DECREF( frame_800df6b7458649b7309b2810385e4019 );
    }
    cache_frame_800df6b7458649b7309b2810385e4019 = NULL;

    assertFrameObject( frame_800df6b7458649b7309b2810385e4019 );

    // Put the previous frame back on top.
    popFrameStack();

    // Return the error.
    goto try_except_handler_1;

    frame_no_exception_1:;
    tmp_return_value = Py_None;
    Py_INCREF( tmp_return_value );
    goto try_return_handler_1;
    // tried codes exits in all cases
    NUITKA_CANNOT_GET_HERE( subprocess$$$function_11_Close );
    return NULL;
    // Return handler code:
    try_return_handler_1:;
    CHECK_OBJECT( (PyObject *)par_self );
    Py_DECREF( par_self );
    par_self = NULL;

    CHECK_OBJECT( (PyObject *)par_CloseHandle );
    Py_DECREF( par_CloseHandle );
    par_CloseHandle = NULL;

    goto function_return_exit;
    // Exception handler code:
    try_except_handler_1:;
    exception_keeper_type_1 = exception_type;
    exception_keeper_value_1 = exception_value;
    exception_keeper_tb_1 = exception_tb;
    exception_keeper_lineno_1 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    CHECK_OBJECT( (PyObject *)par_self );
    Py_DECREF( par_self );
    par_self = NULL;

    CHECK_OBJECT( (PyObject *)par_CloseHandle );
    Py_DECREF( par_CloseHandle );
    par_CloseHandle = NULL;

    // Re-raise.
    exception_type = exception_keeper_type_1;
    exception_value = exception_keeper_value_1;
    exception_tb = exception_keeper_tb_1;
    exception_lineno = exception_keeper_lineno_1;

    goto function_exception_exit;
    // End of try:

    // Return statement must have exited already.
    NUITKA_CANNOT_GET_HERE( subprocess$$$function_11_Close );
    return NULL;

function_exception_exit:
    assert( exception_type );
    RESTORE_ERROR_OCCURRED( exception_type, exception_value, exception_tb );

    return NULL;

function_return_exit:
   // Function cleanup code if any.


   // Actual function exit with return value, making sure we did not make
   // the error status worse despite non-NULL return.
   CHECK_OBJECT( tmp_return_value );
   assert( had_error || !ERROR_OCCURRED() );
   return tmp_return_value;
}


static PyObject *impl_subprocess$$$function_12_Detach( struct Nuitka_FunctionObject const *self, PyObject **python_pars )
{
    // Preserve error status for checks
#ifndef __NUITKA_NO_ASSERT__
    NUITKA_MAY_BE_UNUSED bool had_error = ERROR_OCCURRED();
#endif

    // Local variable declarations.
    PyObject *par_self = python_pars[ 0 ];
    struct Nuitka_FrameObject *frame_62c892bd90657b3e328cf24a2a5cb717;
    NUITKA_MAY_BE_UNUSED char const *type_description_1 = NULL;
    PyObject *exception_type = NULL;
    PyObject *exception_value = NULL;
    PyTracebackObject *exception_tb = NULL;
    NUITKA_MAY_BE_UNUSED int exception_lineno = 0;
    int tmp_res;
    bool tmp_result;
    PyObject *tmp_return_value = NULL;
    static struct Nuitka_FrameObject *cache_frame_62c892bd90657b3e328cf24a2a5cb717 = NULL;
    PyObject *exception_keeper_type_1;
    PyObject *exception_keeper_value_1;
    PyTracebackObject *exception_keeper_tb_1;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_1;

    // Actual function body.
    // Tried code:
    MAKE_OR_REUSE_FRAME( cache_frame_62c892bd90657b3e328cf24a2a5cb717, codeobj_62c892bd90657b3e328cf24a2a5cb717, module_subprocess, sizeof(void *) );
    frame_62c892bd90657b3e328cf24a2a5cb717 = cache_frame_62c892bd90657b3e328cf24a2a5cb717;

    // Push the new frame as the currently active one.
    pushFrameStack( frame_62c892bd90657b3e328cf24a2a5cb717 );

    // Mark the frame object as in use, ref count 1 will be up for reuse.
    assert( Py_REFCNT( frame_62c892bd90657b3e328cf24a2a5cb717 ) == 2 ); // Frame stack

    // Framed code:
    {
        nuitka_bool tmp_condition_result_1;
        PyObject *tmp_operand_name_1;
        PyObject *tmp_source_name_1;
        CHECK_OBJECT( par_self );
        tmp_source_name_1 = par_self;
        tmp_operand_name_1 = LOOKUP_ATTRIBUTE( tmp_source_name_1, const_str_plain_closed );
        if ( tmp_operand_name_1 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 208;
            type_description_1 = "o";
            goto frame_exception_exit_1;
        }
        tmp_res = CHECK_IF_TRUE( tmp_operand_name_1 );
        Py_DECREF( tmp_operand_name_1 );
        if ( tmp_res == -1 )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 208;
            type_description_1 = "o";
            goto frame_exception_exit_1;
        }
        tmp_condition_result_1 = ( tmp_res == 0 ) ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
        if ( tmp_condition_result_1 == NUITKA_BOOL_TRUE )
        {
            goto branch_yes_1;
        }
        else
        {
            goto branch_no_1;
        }
        branch_yes_1:;
        {
            PyObject *tmp_assattr_name_1;
            PyObject *tmp_assattr_target_1;
            tmp_assattr_name_1 = Py_True;
            CHECK_OBJECT( par_self );
            tmp_assattr_target_1 = par_self;
            tmp_result = SET_ATTRIBUTE( tmp_assattr_target_1, const_str_plain_closed, tmp_assattr_name_1 );
            if ( tmp_result == false )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 209;
                type_description_1 = "o";
                goto frame_exception_exit_1;
            }
        }
        {
            PyObject *tmp_int_arg_1;
            CHECK_OBJECT( par_self );
            tmp_int_arg_1 = par_self;
            tmp_return_value = PyNumber_Int( tmp_int_arg_1 );
            if ( tmp_return_value == NULL )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 210;
                type_description_1 = "o";
                goto frame_exception_exit_1;
            }
            goto frame_return_exit_1;
        }
        branch_no_1:;
    }
    {
        PyObject *tmp_raise_type_1;
        PyObject *tmp_make_exception_arg_1;
        tmp_make_exception_arg_1 = const_str_digest_22989ef04fa2851112debbb34c367cd5;
        frame_62c892bd90657b3e328cf24a2a5cb717->m_frame.f_lineno = 211;
        {
            PyObject *call_args[] = { tmp_make_exception_arg_1 };
            tmp_raise_type_1 = CALL_FUNCTION_WITH_ARGS1( PyExc_ValueError, call_args );
        }

        assert( !(tmp_raise_type_1 == NULL) );
        exception_type = tmp_raise_type_1;
        exception_lineno = 211;
        RAISE_EXCEPTION_WITH_TYPE( &exception_type, &exception_value, &exception_tb );
        type_description_1 = "o";
        goto frame_exception_exit_1;
    }

#if 0
    RESTORE_FRAME_EXCEPTION( frame_62c892bd90657b3e328cf24a2a5cb717 );
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto frame_no_exception_1;

    frame_return_exit_1:;
#if 0
    RESTORE_FRAME_EXCEPTION( frame_62c892bd90657b3e328cf24a2a5cb717 );
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto try_return_handler_1;

    frame_exception_exit_1:;

#if 0
    RESTORE_FRAME_EXCEPTION( frame_62c892bd90657b3e328cf24a2a5cb717 );
#endif

    if ( exception_tb == NULL )
    {
        exception_tb = MAKE_TRACEBACK( frame_62c892bd90657b3e328cf24a2a5cb717, exception_lineno );
    }
    else if ( exception_tb->tb_frame != &frame_62c892bd90657b3e328cf24a2a5cb717->m_frame )
    {
        exception_tb = ADD_TRACEBACK( exception_tb, frame_62c892bd90657b3e328cf24a2a5cb717, exception_lineno );
    }

    // Attachs locals to frame if any.
    Nuitka_Frame_AttachLocals(
        (struct Nuitka_FrameObject *)frame_62c892bd90657b3e328cf24a2a5cb717,
        type_description_1,
        par_self
    );


    // Release cached frame.
    if ( frame_62c892bd90657b3e328cf24a2a5cb717 == cache_frame_62c892bd90657b3e328cf24a2a5cb717 )
    {
        Py_DECREF( frame_62c892bd90657b3e328cf24a2a5cb717 );
    }
    cache_frame_62c892bd90657b3e328cf24a2a5cb717 = NULL;

    assertFrameObject( frame_62c892bd90657b3e328cf24a2a5cb717 );

    // Put the previous frame back on top.
    popFrameStack();

    // Return the error.
    goto try_except_handler_1;

    frame_no_exception_1:;
    // tried codes exits in all cases
    NUITKA_CANNOT_GET_HERE( subprocess$$$function_12_Detach );
    return NULL;
    // Return handler code:
    try_return_handler_1:;
    CHECK_OBJECT( (PyObject *)par_self );
    Py_DECREF( par_self );
    par_self = NULL;

    goto function_return_exit;
    // Exception handler code:
    try_except_handler_1:;
    exception_keeper_type_1 = exception_type;
    exception_keeper_value_1 = exception_value;
    exception_keeper_tb_1 = exception_tb;
    exception_keeper_lineno_1 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    CHECK_OBJECT( (PyObject *)par_self );
    Py_DECREF( par_self );
    par_self = NULL;

    // Re-raise.
    exception_type = exception_keeper_type_1;
    exception_value = exception_keeper_value_1;
    exception_tb = exception_keeper_tb_1;
    exception_lineno = exception_keeper_lineno_1;

    goto function_exception_exit;
    // End of try:

    // Return statement must have exited already.
    NUITKA_CANNOT_GET_HERE( subprocess$$$function_12_Detach );
    return NULL;

function_exception_exit:
    assert( exception_type );
    RESTORE_ERROR_OCCURRED( exception_type, exception_value, exception_tb );

    return NULL;

function_return_exit:
   // Function cleanup code if any.


   // Actual function exit with return value, making sure we did not make
   // the error status worse despite non-NULL return.
   CHECK_OBJECT( tmp_return_value );
   assert( had_error || !ERROR_OCCURRED() );
   return tmp_return_value;
}


static PyObject *impl_subprocess$$$function_13___repr__( struct Nuitka_FunctionObject const *self, PyObject **python_pars )
{
    // Preserve error status for checks
#ifndef __NUITKA_NO_ASSERT__
    NUITKA_MAY_BE_UNUSED bool had_error = ERROR_OCCURRED();
#endif

    // Local variable declarations.
    PyObject *par_self = python_pars[ 0 ];
    struct Nuitka_FrameObject *frame_4a08f6b780e038c83cf85b523d9b9679;
    NUITKA_MAY_BE_UNUSED char const *type_description_1 = NULL;
    PyObject *tmp_return_value = NULL;
    PyObject *exception_type = NULL;
    PyObject *exception_value = NULL;
    PyTracebackObject *exception_tb = NULL;
    NUITKA_MAY_BE_UNUSED int exception_lineno = 0;
    static struct Nuitka_FrameObject *cache_frame_4a08f6b780e038c83cf85b523d9b9679 = NULL;
    PyObject *exception_keeper_type_1;
    PyObject *exception_keeper_value_1;
    PyTracebackObject *exception_keeper_tb_1;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_1;

    // Actual function body.
    // Tried code:
    MAKE_OR_REUSE_FRAME( cache_frame_4a08f6b780e038c83cf85b523d9b9679, codeobj_4a08f6b780e038c83cf85b523d9b9679, module_subprocess, sizeof(void *) );
    frame_4a08f6b780e038c83cf85b523d9b9679 = cache_frame_4a08f6b780e038c83cf85b523d9b9679;

    // Push the new frame as the currently active one.
    pushFrameStack( frame_4a08f6b780e038c83cf85b523d9b9679 );

    // Mark the frame object as in use, ref count 1 will be up for reuse.
    assert( Py_REFCNT( frame_4a08f6b780e038c83cf85b523d9b9679 ) == 2 ); // Frame stack

    // Framed code:
    {
        PyObject *tmp_left_name_1;
        PyObject *tmp_right_name_1;
        PyObject *tmp_tuple_element_1;
        PyObject *tmp_source_name_1;
        PyObject *tmp_source_name_2;
        PyObject *tmp_int_arg_1;
        tmp_left_name_1 = const_str_digest_99c68c9315a477a5c8bc86e0cf57cf7c;
        CHECK_OBJECT( par_self );
        tmp_source_name_2 = par_self;
        tmp_source_name_1 = LOOKUP_ATTRIBUTE_CLASS_SLOT( tmp_source_name_2 );
        if ( tmp_source_name_1 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 214;
            type_description_1 = "o";
            goto frame_exception_exit_1;
        }
        tmp_tuple_element_1 = LOOKUP_ATTRIBUTE( tmp_source_name_1, const_str_plain___name__ );
        Py_DECREF( tmp_source_name_1 );
        if ( tmp_tuple_element_1 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 214;
            type_description_1 = "o";
            goto frame_exception_exit_1;
        }
        tmp_right_name_1 = PyTuple_New( 2 );
        PyTuple_SET_ITEM( tmp_right_name_1, 0, tmp_tuple_element_1 );
        CHECK_OBJECT( par_self );
        tmp_int_arg_1 = par_self;
        tmp_tuple_element_1 = PyNumber_Int( tmp_int_arg_1 );
        if ( tmp_tuple_element_1 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
            Py_DECREF( tmp_right_name_1 );

            exception_lineno = 214;
            type_description_1 = "o";
            goto frame_exception_exit_1;
        }
        PyTuple_SET_ITEM( tmp_right_name_1, 1, tmp_tuple_element_1 );
        tmp_return_value = BINARY_OPERATION_REMAINDER( tmp_left_name_1, tmp_right_name_1 );
        Py_DECREF( tmp_right_name_1 );
        if ( tmp_return_value == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 214;
            type_description_1 = "o";
            goto frame_exception_exit_1;
        }
        goto frame_return_exit_1;
    }

#if 0
    RESTORE_FRAME_EXCEPTION( frame_4a08f6b780e038c83cf85b523d9b9679 );
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto frame_no_exception_1;

    frame_return_exit_1:;
#if 0
    RESTORE_FRAME_EXCEPTION( frame_4a08f6b780e038c83cf85b523d9b9679 );
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto try_return_handler_1;

    frame_exception_exit_1:;

#if 0
    RESTORE_FRAME_EXCEPTION( frame_4a08f6b780e038c83cf85b523d9b9679 );
#endif

    if ( exception_tb == NULL )
    {
        exception_tb = MAKE_TRACEBACK( frame_4a08f6b780e038c83cf85b523d9b9679, exception_lineno );
    }
    else if ( exception_tb->tb_frame != &frame_4a08f6b780e038c83cf85b523d9b9679->m_frame )
    {
        exception_tb = ADD_TRACEBACK( exception_tb, frame_4a08f6b780e038c83cf85b523d9b9679, exception_lineno );
    }

    // Attachs locals to frame if any.
    Nuitka_Frame_AttachLocals(
        (struct Nuitka_FrameObject *)frame_4a08f6b780e038c83cf85b523d9b9679,
        type_description_1,
        par_self
    );


    // Release cached frame.
    if ( frame_4a08f6b780e038c83cf85b523d9b9679 == cache_frame_4a08f6b780e038c83cf85b523d9b9679 )
    {
        Py_DECREF( frame_4a08f6b780e038c83cf85b523d9b9679 );
    }
    cache_frame_4a08f6b780e038c83cf85b523d9b9679 = NULL;

    assertFrameObject( frame_4a08f6b780e038c83cf85b523d9b9679 );

    // Put the previous frame back on top.
    popFrameStack();

    // Return the error.
    goto try_except_handler_1;

    frame_no_exception_1:;
    // tried codes exits in all cases
    NUITKA_CANNOT_GET_HERE( subprocess$$$function_13___repr__ );
    return NULL;
    // Return handler code:
    try_return_handler_1:;
    CHECK_OBJECT( (PyObject *)par_self );
    Py_DECREF( par_self );
    par_self = NULL;

    goto function_return_exit;
    // Exception handler code:
    try_except_handler_1:;
    exception_keeper_type_1 = exception_type;
    exception_keeper_value_1 = exception_value;
    exception_keeper_tb_1 = exception_tb;
    exception_keeper_lineno_1 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    CHECK_OBJECT( (PyObject *)par_self );
    Py_DECREF( par_self );
    par_self = NULL;

    // Re-raise.
    exception_type = exception_keeper_type_1;
    exception_value = exception_keeper_value_1;
    exception_tb = exception_keeper_tb_1;
    exception_lineno = exception_keeper_lineno_1;

    goto function_exception_exit;
    // End of try:

    // Return statement must have exited already.
    NUITKA_CANNOT_GET_HERE( subprocess$$$function_13___repr__ );
    return NULL;

function_exception_exit:
    assert( exception_type );
    RESTORE_ERROR_OCCURRED( exception_type, exception_value, exception_tb );

    return NULL;

function_return_exit:
   // Function cleanup code if any.


   // Actual function exit with return value, making sure we did not make
   // the error status worse despite non-NULL return.
   CHECK_OBJECT( tmp_return_value );
   assert( had_error || !ERROR_OCCURRED() );
   return tmp_return_value;
}


static PyObject *impl_subprocess$$$function_14__cleanup( struct Nuitka_FunctionObject const *self, PyObject **python_pars )
{
    // Preserve error status for checks
#ifndef __NUITKA_NO_ASSERT__
    NUITKA_MAY_BE_UNUSED bool had_error = ERROR_OCCURRED();
#endif

    // Local variable declarations.
    PyObject *var_inst = NULL;
    PyObject *var_res = NULL;
    PyObject *tmp_for_loop_1__for_iterator = NULL;
    PyObject *tmp_for_loop_1__iter_value = NULL;
    struct Nuitka_FrameObject *frame_35541e506aecaa1fe122d7df64fdd496;
    NUITKA_MAY_BE_UNUSED char const *type_description_1 = NULL;
    PyObject *exception_type = NULL;
    PyObject *exception_value = NULL;
    PyTracebackObject *exception_tb = NULL;
    NUITKA_MAY_BE_UNUSED int exception_lineno = 0;
    int tmp_res;
    PyObject *exception_keeper_type_1;
    PyObject *exception_keeper_value_1;
    PyTracebackObject *exception_keeper_tb_1;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_1;
    PyObject *exception_preserved_type_1;
    PyObject *exception_preserved_value_1;
    PyTracebackObject *exception_preserved_tb_1;
    bool tmp_result;
    PyObject *exception_keeper_type_2;
    PyObject *exception_keeper_value_2;
    PyTracebackObject *exception_keeper_tb_2;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_2;
    PyObject *exception_keeper_type_3;
    PyObject *exception_keeper_value_3;
    PyTracebackObject *exception_keeper_tb_3;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_3;
    static struct Nuitka_FrameObject *cache_frame_35541e506aecaa1fe122d7df64fdd496 = NULL;
    PyObject *tmp_return_value = NULL;
    PyObject *exception_keeper_type_4;
    PyObject *exception_keeper_value_4;
    PyTracebackObject *exception_keeper_tb_4;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_4;

    // Actual function body.
    // Tried code:
    MAKE_OR_REUSE_FRAME( cache_frame_35541e506aecaa1fe122d7df64fdd496, codeobj_35541e506aecaa1fe122d7df64fdd496, module_subprocess, sizeof(void *)+sizeof(void *) );
    frame_35541e506aecaa1fe122d7df64fdd496 = cache_frame_35541e506aecaa1fe122d7df64fdd496;

    // Push the new frame as the currently active one.
    pushFrameStack( frame_35541e506aecaa1fe122d7df64fdd496 );

    // Mark the frame object as in use, ref count 1 will be up for reuse.
    assert( Py_REFCNT( frame_35541e506aecaa1fe122d7df64fdd496 ) == 2 ); // Frame stack

    // Framed code:
    {
        PyObject *tmp_assign_source_1;
        PyObject *tmp_iter_arg_1;
        PyObject *tmp_subscribed_name_1;
        PyObject *tmp_mvar_value_1;
        PyObject *tmp_subscript_name_1;
        tmp_mvar_value_1 = GET_STRING_DICT_VALUE( moduledict_subprocess, (Nuitka_StringObject *)const_str_plain__active );

        if (unlikely( tmp_mvar_value_1 == NULL ))
        {
            tmp_mvar_value_1 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain__active );
        }

        if ( tmp_mvar_value_1 == NULL )
        {

            exception_type = PyExc_NameError;
            Py_INCREF( exception_type );
            exception_value = PyUnicode_FromFormat( "name '%s' is not defined", "_active" );
            exception_tb = NULL;
            NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
            CHAIN_EXCEPTION( exception_value );

            exception_lineno = 227;
            type_description_1 = "oo";
            goto frame_exception_exit_1;
        }

        tmp_subscribed_name_1 = tmp_mvar_value_1;
        tmp_subscript_name_1 = const_slice_none_none_none;
        tmp_iter_arg_1 = LOOKUP_SUBSCRIPT( tmp_subscribed_name_1, tmp_subscript_name_1 );
        if ( tmp_iter_arg_1 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 227;
            type_description_1 = "oo";
            goto frame_exception_exit_1;
        }
        tmp_assign_source_1 = MAKE_ITERATOR( tmp_iter_arg_1 );
        Py_DECREF( tmp_iter_arg_1 );
        if ( tmp_assign_source_1 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 227;
            type_description_1 = "oo";
            goto frame_exception_exit_1;
        }
        assert( tmp_for_loop_1__for_iterator == NULL );
        tmp_for_loop_1__for_iterator = tmp_assign_source_1;
    }
    // Tried code:
    loop_start_1:;
    {
        PyObject *tmp_next_source_1;
        PyObject *tmp_assign_source_2;
        CHECK_OBJECT( tmp_for_loop_1__for_iterator );
        tmp_next_source_1 = tmp_for_loop_1__for_iterator;
        tmp_assign_source_2 = ITERATOR_NEXT( tmp_next_source_1 );
        if ( tmp_assign_source_2 == NULL )
        {
            if ( CHECK_AND_CLEAR_STOP_ITERATION_OCCURRED() )
            {

                goto loop_end_1;
            }
            else
            {

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
                type_description_1 = "oo";
                exception_lineno = 227;
                goto try_except_handler_2;
            }
        }

        {
            PyObject *old = tmp_for_loop_1__iter_value;
            tmp_for_loop_1__iter_value = tmp_assign_source_2;
            Py_XDECREF( old );
        }

    }
    {
        PyObject *tmp_assign_source_3;
        CHECK_OBJECT( tmp_for_loop_1__iter_value );
        tmp_assign_source_3 = tmp_for_loop_1__iter_value;
        {
            PyObject *old = var_inst;
            var_inst = tmp_assign_source_3;
            Py_INCREF( var_inst );
            Py_XDECREF( old );
        }

    }
    {
        PyObject *tmp_assign_source_4;
        PyObject *tmp_called_name_1;
        PyObject *tmp_source_name_1;
        PyObject *tmp_kw_name_1;
        PyObject *tmp_dict_key_1;
        PyObject *tmp_dict_value_1;
        PyObject *tmp_source_name_2;
        PyObject *tmp_mvar_value_2;
        CHECK_OBJECT( var_inst );
        tmp_source_name_1 = var_inst;
        tmp_called_name_1 = LOOKUP_ATTRIBUTE( tmp_source_name_1, const_str_plain__internal_poll );
        if ( tmp_called_name_1 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 228;
            type_description_1 = "oo";
            goto try_except_handler_2;
        }
        tmp_dict_key_1 = const_str_plain__deadstate;
        tmp_mvar_value_2 = GET_STRING_DICT_VALUE( moduledict_subprocess, (Nuitka_StringObject *)const_str_plain_sys );

        if (unlikely( tmp_mvar_value_2 == NULL ))
        {
            tmp_mvar_value_2 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_sys );
        }

        if ( tmp_mvar_value_2 == NULL )
        {
            Py_DECREF( tmp_called_name_1 );
            exception_type = PyExc_NameError;
            Py_INCREF( exception_type );
            exception_value = PyUnicode_FromFormat( "name '%s' is not defined", "sys" );
            exception_tb = NULL;
            NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
            CHAIN_EXCEPTION( exception_value );

            exception_lineno = 228;
            type_description_1 = "oo";
            goto try_except_handler_2;
        }

        tmp_source_name_2 = tmp_mvar_value_2;
        tmp_dict_value_1 = LOOKUP_ATTRIBUTE( tmp_source_name_2, const_str_plain_maxsize );
        if ( tmp_dict_value_1 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
            Py_DECREF( tmp_called_name_1 );

            exception_lineno = 228;
            type_description_1 = "oo";
            goto try_except_handler_2;
        }
        tmp_kw_name_1 = _PyDict_NewPresized( 1 );
        tmp_res = PyDict_SetItem( tmp_kw_name_1, tmp_dict_key_1, tmp_dict_value_1 );
        Py_DECREF( tmp_dict_value_1 );
        assert( !(tmp_res != 0) );
        frame_35541e506aecaa1fe122d7df64fdd496->m_frame.f_lineno = 228;
        tmp_assign_source_4 = CALL_FUNCTION_WITH_KEYARGS( tmp_called_name_1, tmp_kw_name_1 );
        Py_DECREF( tmp_called_name_1 );
        Py_DECREF( tmp_kw_name_1 );
        if ( tmp_assign_source_4 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 228;
            type_description_1 = "oo";
            goto try_except_handler_2;
        }
        {
            PyObject *old = var_res;
            var_res = tmp_assign_source_4;
            Py_XDECREF( old );
        }

    }
    {
        nuitka_bool tmp_condition_result_1;
        PyObject *tmp_compexpr_left_1;
        PyObject *tmp_compexpr_right_1;
        CHECK_OBJECT( var_res );
        tmp_compexpr_left_1 = var_res;
        tmp_compexpr_right_1 = Py_None;
        tmp_condition_result_1 = ( tmp_compexpr_left_1 != tmp_compexpr_right_1 ) ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
        if ( tmp_condition_result_1 == NUITKA_BOOL_TRUE )
        {
            goto branch_yes_1;
        }
        else
        {
            goto branch_no_1;
        }
        branch_yes_1:;
        // Tried code:
        {
            PyObject *tmp_called_instance_1;
            PyObject *tmp_mvar_value_3;
            PyObject *tmp_call_result_1;
            PyObject *tmp_args_element_name_1;
            tmp_mvar_value_3 = GET_STRING_DICT_VALUE( moduledict_subprocess, (Nuitka_StringObject *)const_str_plain__active );

            if (unlikely( tmp_mvar_value_3 == NULL ))
            {
                tmp_mvar_value_3 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain__active );
            }

            if ( tmp_mvar_value_3 == NULL )
            {

                exception_type = PyExc_NameError;
                Py_INCREF( exception_type );
                exception_value = PyUnicode_FromFormat( "name '%s' is not defined", "_active" );
                exception_tb = NULL;
                NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
                CHAIN_EXCEPTION( exception_value );

                exception_lineno = 231;
                type_description_1 = "oo";
                goto try_except_handler_3;
            }

            tmp_called_instance_1 = tmp_mvar_value_3;
            CHECK_OBJECT( var_inst );
            tmp_args_element_name_1 = var_inst;
            frame_35541e506aecaa1fe122d7df64fdd496->m_frame.f_lineno = 231;
            {
                PyObject *call_args[] = { tmp_args_element_name_1 };
                tmp_call_result_1 = CALL_METHOD_WITH_ARGS1( tmp_called_instance_1, const_str_plain_remove, call_args );
            }

            if ( tmp_call_result_1 == NULL )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 231;
                type_description_1 = "oo";
                goto try_except_handler_3;
            }
            Py_DECREF( tmp_call_result_1 );
        }
        goto try_end_1;
        // Exception handler code:
        try_except_handler_3:;
        exception_keeper_type_1 = exception_type;
        exception_keeper_value_1 = exception_value;
        exception_keeper_tb_1 = exception_tb;
        exception_keeper_lineno_1 = exception_lineno;
        exception_type = NULL;
        exception_value = NULL;
        exception_tb = NULL;
        exception_lineno = 0;

        // Preserve existing published exception.
        exception_preserved_type_1 = EXC_TYPE(PyThreadState_GET());
        Py_XINCREF( exception_preserved_type_1 );
        exception_preserved_value_1 = EXC_VALUE(PyThreadState_GET());
        Py_XINCREF( exception_preserved_value_1 );
        exception_preserved_tb_1 = (PyTracebackObject *)EXC_TRACEBACK(PyThreadState_GET());
        Py_XINCREF( exception_preserved_tb_1 );

        if ( exception_keeper_tb_1 == NULL )
        {
            exception_keeper_tb_1 = MAKE_TRACEBACK( frame_35541e506aecaa1fe122d7df64fdd496, exception_keeper_lineno_1 );
        }
        else if ( exception_keeper_lineno_1 != 0 )
        {
            exception_keeper_tb_1 = ADD_TRACEBACK( exception_keeper_tb_1, frame_35541e506aecaa1fe122d7df64fdd496, exception_keeper_lineno_1 );
        }

        NORMALIZE_EXCEPTION( &exception_keeper_type_1, &exception_keeper_value_1, &exception_keeper_tb_1 );
        PyException_SetTraceback( exception_keeper_value_1, (PyObject *)exception_keeper_tb_1 );
        PUBLISH_EXCEPTION( &exception_keeper_type_1, &exception_keeper_value_1, &exception_keeper_tb_1 );
        // Tried code:
        {
            nuitka_bool tmp_condition_result_2;
            PyObject *tmp_operand_name_1;
            PyObject *tmp_compexpr_left_2;
            PyObject *tmp_compexpr_right_2;
            tmp_compexpr_left_2 = EXC_TYPE(PyThreadState_GET());
            tmp_compexpr_right_2 = PyExc_ValueError;
            tmp_res = EXCEPTION_MATCH_BOOL( tmp_compexpr_left_2, tmp_compexpr_right_2 );
            if ( tmp_res == -1 )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 232;
                type_description_1 = "oo";
                goto try_except_handler_4;
            }
            tmp_operand_name_1 = ( tmp_res != 0 ) ? Py_True : Py_False;
            tmp_res = CHECK_IF_TRUE( tmp_operand_name_1 );
            if ( tmp_res == -1 )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 232;
                type_description_1 = "oo";
                goto try_except_handler_4;
            }
            tmp_condition_result_2 = ( tmp_res == 0 ) ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
            if ( tmp_condition_result_2 == NUITKA_BOOL_TRUE )
            {
                goto branch_yes_2;
            }
            else
            {
                goto branch_no_2;
            }
            branch_yes_2:;
            tmp_result = RERAISE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
            if (unlikely( tmp_result == false ))
            {
                exception_lineno = 230;
            }

            if (exception_tb && exception_tb->tb_frame == &frame_35541e506aecaa1fe122d7df64fdd496->m_frame) frame_35541e506aecaa1fe122d7df64fdd496->m_frame.f_lineno = exception_tb->tb_lineno;
            type_description_1 = "oo";
            goto try_except_handler_4;
            branch_no_2:;
        }
        goto try_end_2;
        // Exception handler code:
        try_except_handler_4:;
        exception_keeper_type_2 = exception_type;
        exception_keeper_value_2 = exception_value;
        exception_keeper_tb_2 = exception_tb;
        exception_keeper_lineno_2 = exception_lineno;
        exception_type = NULL;
        exception_value = NULL;
        exception_tb = NULL;
        exception_lineno = 0;

        // Restore previous exception.
        SET_CURRENT_EXCEPTION( exception_preserved_type_1, exception_preserved_value_1, exception_preserved_tb_1 );
        // Re-raise.
        exception_type = exception_keeper_type_2;
        exception_value = exception_keeper_value_2;
        exception_tb = exception_keeper_tb_2;
        exception_lineno = exception_keeper_lineno_2;

        goto try_except_handler_2;
        // End of try:
        try_end_2:;
        // Restore previous exception.
        SET_CURRENT_EXCEPTION( exception_preserved_type_1, exception_preserved_value_1, exception_preserved_tb_1 );
        goto try_end_1;
        // exception handler codes exits in all cases
        NUITKA_CANNOT_GET_HERE( subprocess$$$function_14__cleanup );
        return NULL;
        // End of try:
        try_end_1:;
        branch_no_1:;
    }
    if ( CONSIDER_THREADING() == false )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 227;
        type_description_1 = "oo";
        goto try_except_handler_2;
    }
    goto loop_start_1;
    loop_end_1:;
    goto try_end_3;
    // Exception handler code:
    try_except_handler_2:;
    exception_keeper_type_3 = exception_type;
    exception_keeper_value_3 = exception_value;
    exception_keeper_tb_3 = exception_tb;
    exception_keeper_lineno_3 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    Py_XDECREF( tmp_for_loop_1__iter_value );
    tmp_for_loop_1__iter_value = NULL;

    CHECK_OBJECT( (PyObject *)tmp_for_loop_1__for_iterator );
    Py_DECREF( tmp_for_loop_1__for_iterator );
    tmp_for_loop_1__for_iterator = NULL;

    // Re-raise.
    exception_type = exception_keeper_type_3;
    exception_value = exception_keeper_value_3;
    exception_tb = exception_keeper_tb_3;
    exception_lineno = exception_keeper_lineno_3;

    goto frame_exception_exit_1;
    // End of try:
    try_end_3:;

#if 0
    RESTORE_FRAME_EXCEPTION( frame_35541e506aecaa1fe122d7df64fdd496 );
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto frame_no_exception_1;

    frame_exception_exit_1:;

#if 0
    RESTORE_FRAME_EXCEPTION( frame_35541e506aecaa1fe122d7df64fdd496 );
#endif

    if ( exception_tb == NULL )
    {
        exception_tb = MAKE_TRACEBACK( frame_35541e506aecaa1fe122d7df64fdd496, exception_lineno );
    }
    else if ( exception_tb->tb_frame != &frame_35541e506aecaa1fe122d7df64fdd496->m_frame )
    {
        exception_tb = ADD_TRACEBACK( exception_tb, frame_35541e506aecaa1fe122d7df64fdd496, exception_lineno );
    }

    // Attachs locals to frame if any.
    Nuitka_Frame_AttachLocals(
        (struct Nuitka_FrameObject *)frame_35541e506aecaa1fe122d7df64fdd496,
        type_description_1,
        var_inst,
        var_res
    );


    // Release cached frame.
    if ( frame_35541e506aecaa1fe122d7df64fdd496 == cache_frame_35541e506aecaa1fe122d7df64fdd496 )
    {
        Py_DECREF( frame_35541e506aecaa1fe122d7df64fdd496 );
    }
    cache_frame_35541e506aecaa1fe122d7df64fdd496 = NULL;

    assertFrameObject( frame_35541e506aecaa1fe122d7df64fdd496 );

    // Put the previous frame back on top.
    popFrameStack();

    // Return the error.
    goto try_except_handler_1;

    frame_no_exception_1:;
    Py_XDECREF( tmp_for_loop_1__iter_value );
    tmp_for_loop_1__iter_value = NULL;

    CHECK_OBJECT( (PyObject *)tmp_for_loop_1__for_iterator );
    Py_DECREF( tmp_for_loop_1__for_iterator );
    tmp_for_loop_1__for_iterator = NULL;

    tmp_return_value = Py_None;
    Py_INCREF( tmp_return_value );
    goto try_return_handler_1;
    // tried codes exits in all cases
    NUITKA_CANNOT_GET_HERE( subprocess$$$function_14__cleanup );
    return NULL;
    // Return handler code:
    try_return_handler_1:;
    Py_XDECREF( var_inst );
    var_inst = NULL;

    Py_XDECREF( var_res );
    var_res = NULL;

    goto function_return_exit;
    // Exception handler code:
    try_except_handler_1:;
    exception_keeper_type_4 = exception_type;
    exception_keeper_value_4 = exception_value;
    exception_keeper_tb_4 = exception_tb;
    exception_keeper_lineno_4 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    Py_XDECREF( var_inst );
    var_inst = NULL;

    Py_XDECREF( var_res );
    var_res = NULL;

    // Re-raise.
    exception_type = exception_keeper_type_4;
    exception_value = exception_keeper_value_4;
    exception_tb = exception_keeper_tb_4;
    exception_lineno = exception_keeper_lineno_4;

    goto function_exception_exit;
    // End of try:

    // Return statement must have exited already.
    NUITKA_CANNOT_GET_HERE( subprocess$$$function_14__cleanup );
    return NULL;

function_exception_exit:
    assert( exception_type );
    RESTORE_ERROR_OCCURRED( exception_type, exception_value, exception_tb );

    return NULL;

function_return_exit:
   // Function cleanup code if any.


   // Actual function exit with return value, making sure we did not make
   // the error status worse despite non-NULL return.
   CHECK_OBJECT( tmp_return_value );
   assert( had_error || !ERROR_OCCURRED() );
   return tmp_return_value;
}


static PyObject *impl_subprocess$$$function_15__optim_args_from_interpreter_flags( struct Nuitka_FunctionObject const *self, PyObject **python_pars )
{
    // Preserve error status for checks
#ifndef __NUITKA_NO_ASSERT__
    NUITKA_MAY_BE_UNUSED bool had_error = ERROR_OCCURRED();
#endif

    // Local variable declarations.
    PyObject *var_args = NULL;
    PyObject *var_value = NULL;
    struct Nuitka_FrameObject *frame_650c2a689f3dbec589e4aff67a1ae95f;
    NUITKA_MAY_BE_UNUSED char const *type_description_1 = NULL;
    PyObject *exception_type = NULL;
    PyObject *exception_value = NULL;
    PyTracebackObject *exception_tb = NULL;
    NUITKA_MAY_BE_UNUSED int exception_lineno = 0;
    int tmp_res;
    static struct Nuitka_FrameObject *cache_frame_650c2a689f3dbec589e4aff67a1ae95f = NULL;
    PyObject *tmp_return_value = NULL;
    PyObject *exception_keeper_type_1;
    PyObject *exception_keeper_value_1;
    PyTracebackObject *exception_keeper_tb_1;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_1;

    // Actual function body.
    {
        PyObject *tmp_assign_source_1;
        tmp_assign_source_1 = PyList_New( 0 );
        assert( var_args == NULL );
        var_args = tmp_assign_source_1;
    }
    // Tried code:
    MAKE_OR_REUSE_FRAME( cache_frame_650c2a689f3dbec589e4aff67a1ae95f, codeobj_650c2a689f3dbec589e4aff67a1ae95f, module_subprocess, sizeof(void *)+sizeof(void *) );
    frame_650c2a689f3dbec589e4aff67a1ae95f = cache_frame_650c2a689f3dbec589e4aff67a1ae95f;

    // Push the new frame as the currently active one.
    pushFrameStack( frame_650c2a689f3dbec589e4aff67a1ae95f );

    // Mark the frame object as in use, ref count 1 will be up for reuse.
    assert( Py_REFCNT( frame_650c2a689f3dbec589e4aff67a1ae95f ) == 2 ); // Frame stack

    // Framed code:
    {
        PyObject *tmp_assign_source_2;
        PyObject *tmp_source_name_1;
        PyObject *tmp_source_name_2;
        PyObject *tmp_mvar_value_1;
        tmp_mvar_value_1 = GET_STRING_DICT_VALUE( moduledict_subprocess, (Nuitka_StringObject *)const_str_plain_sys );

        if (unlikely( tmp_mvar_value_1 == NULL ))
        {
            tmp_mvar_value_1 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_sys );
        }

        if ( tmp_mvar_value_1 == NULL )
        {

            exception_type = PyExc_NameError;
            Py_INCREF( exception_type );
            exception_value = PyUnicode_FromFormat( "name '%s' is not defined", "sys" );
            exception_tb = NULL;
            NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
            CHAIN_EXCEPTION( exception_value );

            exception_lineno = 250;
            type_description_1 = "oo";
            goto frame_exception_exit_1;
        }

        tmp_source_name_2 = tmp_mvar_value_1;
        tmp_source_name_1 = LOOKUP_ATTRIBUTE( tmp_source_name_2, const_str_plain_flags );
        if ( tmp_source_name_1 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 250;
            type_description_1 = "oo";
            goto frame_exception_exit_1;
        }
        tmp_assign_source_2 = LOOKUP_ATTRIBUTE( tmp_source_name_1, const_str_plain_optimize );
        Py_DECREF( tmp_source_name_1 );
        if ( tmp_assign_source_2 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 250;
            type_description_1 = "oo";
            goto frame_exception_exit_1;
        }
        assert( var_value == NULL );
        var_value = tmp_assign_source_2;
    }
    {
        nuitka_bool tmp_condition_result_1;
        PyObject *tmp_compexpr_left_1;
        PyObject *tmp_compexpr_right_1;
        CHECK_OBJECT( var_value );
        tmp_compexpr_left_1 = var_value;
        tmp_compexpr_right_1 = const_int_0;
        tmp_res = RICH_COMPARE_BOOL_GT_OBJECT_OBJECT( tmp_compexpr_left_1, tmp_compexpr_right_1 );
        if ( tmp_res == -1 )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 251;
            type_description_1 = "oo";
            goto frame_exception_exit_1;
        }
        tmp_condition_result_1 = ( tmp_res != 0 ) ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
        if ( tmp_condition_result_1 == NUITKA_BOOL_TRUE )
        {
            goto branch_yes_1;
        }
        else
        {
            goto branch_no_1;
        }
        branch_yes_1:;
        {
            PyObject *tmp_called_name_1;
            PyObject *tmp_source_name_3;
            PyObject *tmp_call_result_1;
            PyObject *tmp_args_element_name_1;
            PyObject *tmp_left_name_1;
            PyObject *tmp_right_name_1;
            PyObject *tmp_left_name_2;
            PyObject *tmp_right_name_2;
            CHECK_OBJECT( var_args );
            tmp_source_name_3 = var_args;
            tmp_called_name_1 = LOOKUP_ATTRIBUTE( tmp_source_name_3, const_str_plain_append );
            if ( tmp_called_name_1 == NULL )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 252;
                type_description_1 = "oo";
                goto frame_exception_exit_1;
            }
            tmp_left_name_1 = const_str_chr_45;
            tmp_left_name_2 = const_str_plain_O;
            CHECK_OBJECT( var_value );
            tmp_right_name_2 = var_value;
            tmp_right_name_1 = BINARY_OPERATION_MUL( tmp_left_name_2, tmp_right_name_2 );
            if ( tmp_right_name_1 == NULL )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
                Py_DECREF( tmp_called_name_1 );

                exception_lineno = 252;
                type_description_1 = "oo";
                goto frame_exception_exit_1;
            }
            tmp_args_element_name_1 = BINARY_OPERATION_ADD_UNICODE_OBJECT( tmp_left_name_1, tmp_right_name_1 );
            Py_DECREF( tmp_right_name_1 );
            if ( tmp_args_element_name_1 == NULL )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
                Py_DECREF( tmp_called_name_1 );

                exception_lineno = 252;
                type_description_1 = "oo";
                goto frame_exception_exit_1;
            }
            frame_650c2a689f3dbec589e4aff67a1ae95f->m_frame.f_lineno = 252;
            {
                PyObject *call_args[] = { tmp_args_element_name_1 };
                tmp_call_result_1 = CALL_FUNCTION_WITH_ARGS1( tmp_called_name_1, call_args );
            }

            Py_DECREF( tmp_called_name_1 );
            Py_DECREF( tmp_args_element_name_1 );
            if ( tmp_call_result_1 == NULL )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 252;
                type_description_1 = "oo";
                goto frame_exception_exit_1;
            }
            Py_DECREF( tmp_call_result_1 );
        }
        branch_no_1:;
    }

#if 0
    RESTORE_FRAME_EXCEPTION( frame_650c2a689f3dbec589e4aff67a1ae95f );
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto frame_no_exception_1;

    frame_exception_exit_1:;

#if 0
    RESTORE_FRAME_EXCEPTION( frame_650c2a689f3dbec589e4aff67a1ae95f );
#endif

    if ( exception_tb == NULL )
    {
        exception_tb = MAKE_TRACEBACK( frame_650c2a689f3dbec589e4aff67a1ae95f, exception_lineno );
    }
    else if ( exception_tb->tb_frame != &frame_650c2a689f3dbec589e4aff67a1ae95f->m_frame )
    {
        exception_tb = ADD_TRACEBACK( exception_tb, frame_650c2a689f3dbec589e4aff67a1ae95f, exception_lineno );
    }

    // Attachs locals to frame if any.
    Nuitka_Frame_AttachLocals(
        (struct Nuitka_FrameObject *)frame_650c2a689f3dbec589e4aff67a1ae95f,
        type_description_1,
        var_args,
        var_value
    );


    // Release cached frame.
    if ( frame_650c2a689f3dbec589e4aff67a1ae95f == cache_frame_650c2a689f3dbec589e4aff67a1ae95f )
    {
        Py_DECREF( frame_650c2a689f3dbec589e4aff67a1ae95f );
    }
    cache_frame_650c2a689f3dbec589e4aff67a1ae95f = NULL;

    assertFrameObject( frame_650c2a689f3dbec589e4aff67a1ae95f );

    // Put the previous frame back on top.
    popFrameStack();

    // Return the error.
    goto try_except_handler_1;

    frame_no_exception_1:;
    CHECK_OBJECT( var_args );
    tmp_return_value = var_args;
    Py_INCREF( tmp_return_value );
    goto try_return_handler_1;
    // tried codes exits in all cases
    NUITKA_CANNOT_GET_HERE( subprocess$$$function_15__optim_args_from_interpreter_flags );
    return NULL;
    // Return handler code:
    try_return_handler_1:;
    CHECK_OBJECT( (PyObject *)var_args );
    Py_DECREF( var_args );
    var_args = NULL;

    CHECK_OBJECT( (PyObject *)var_value );
    Py_DECREF( var_value );
    var_value = NULL;

    goto function_return_exit;
    // Exception handler code:
    try_except_handler_1:;
    exception_keeper_type_1 = exception_type;
    exception_keeper_value_1 = exception_value;
    exception_keeper_tb_1 = exception_tb;
    exception_keeper_lineno_1 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    CHECK_OBJECT( (PyObject *)var_args );
    Py_DECREF( var_args );
    var_args = NULL;

    Py_XDECREF( var_value );
    var_value = NULL;

    // Re-raise.
    exception_type = exception_keeper_type_1;
    exception_value = exception_keeper_value_1;
    exception_tb = exception_keeper_tb_1;
    exception_lineno = exception_keeper_lineno_1;

    goto function_exception_exit;
    // End of try:

    // Return statement must have exited already.
    NUITKA_CANNOT_GET_HERE( subprocess$$$function_15__optim_args_from_interpreter_flags );
    return NULL;

function_exception_exit:
    assert( exception_type );
    RESTORE_ERROR_OCCURRED( exception_type, exception_value, exception_tb );

    return NULL;

function_return_exit:
   // Function cleanup code if any.


   // Actual function exit with return value, making sure we did not make
   // the error status worse despite non-NULL return.
   CHECK_OBJECT( tmp_return_value );
   assert( had_error || !ERROR_OCCURRED() );
   return tmp_return_value;
}


static PyObject *impl_subprocess$$$function_16__args_from_interpreter_flags( struct Nuitka_FunctionObject const *self, PyObject **python_pars )
{
    // Preserve error status for checks
#ifndef __NUITKA_NO_ASSERT__
    NUITKA_MAY_BE_UNUSED bool had_error = ERROR_OCCURRED();
#endif

    // Local variable declarations.
    PyObject *var_flag_opt_map = NULL;
    PyObject *var_args = NULL;
    PyObject *var_flag = NULL;
    PyObject *var_opt = NULL;
    PyObject *var_v = NULL;
    PyObject *var_warnopts = NULL;
    PyObject *var_bytes_warning = NULL;
    PyObject *var_xoptions = NULL;
    nuitka_bool var_dev_mode = NUITKA_BOOL_UNASSIGNED;
    PyObject *var_value = NULL;
    PyObject *var_arg = NULL;
    PyObject *tmp_for_loop_1__for_iterator = NULL;
    PyObject *tmp_for_loop_1__iter_value = NULL;
    PyObject *tmp_for_loop_2__for_iterator = NULL;
    PyObject *tmp_for_loop_2__iter_value = NULL;
    PyObject *tmp_for_loop_3__for_iterator = NULL;
    PyObject *tmp_for_loop_3__iter_value = NULL;
    PyObject *tmp_tuple_unpack_1__element_1 = NULL;
    PyObject *tmp_tuple_unpack_1__element_2 = NULL;
    PyObject *tmp_tuple_unpack_1__source_iter = NULL;
    struct Nuitka_FrameObject *frame_ff315f57888600677cc6737090042b3f;
    NUITKA_MAY_BE_UNUSED char const *type_description_1 = NULL;
    PyObject *exception_type = NULL;
    PyObject *exception_value = NULL;
    PyTracebackObject *exception_tb = NULL;
    NUITKA_MAY_BE_UNUSED int exception_lineno = 0;
    PyObject *tmp_iterator_attempt;
    PyObject *exception_keeper_type_1;
    PyObject *exception_keeper_value_1;
    PyTracebackObject *exception_keeper_tb_1;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_1;
    PyObject *exception_keeper_type_2;
    PyObject *exception_keeper_value_2;
    PyTracebackObject *exception_keeper_tb_2;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_2;
    int tmp_res;
    PyObject *exception_keeper_type_3;
    PyObject *exception_keeper_value_3;
    PyTracebackObject *exception_keeper_tb_3;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_3;
    PyObject *exception_keeper_type_4;
    PyObject *exception_keeper_value_4;
    PyTracebackObject *exception_keeper_tb_4;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_4;
    PyObject *exception_keeper_type_5;
    PyObject *exception_keeper_value_5;
    PyTracebackObject *exception_keeper_tb_5;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_5;
    static struct Nuitka_FrameObject *cache_frame_ff315f57888600677cc6737090042b3f = NULL;
    PyObject *tmp_return_value = NULL;
    PyObject *exception_keeper_type_6;
    PyObject *exception_keeper_value_6;
    PyTracebackObject *exception_keeper_tb_6;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_6;

    // Actual function body.
    {
        PyObject *tmp_assign_source_1;
        tmp_assign_source_1 = PyDict_Copy( const_dict_0c016cbcf3a29fcfbd4e8161e127568c );
        assert( var_flag_opt_map == NULL );
        var_flag_opt_map = tmp_assign_source_1;
    }
    // Tried code:
    MAKE_OR_REUSE_FRAME( cache_frame_ff315f57888600677cc6737090042b3f, codeobj_ff315f57888600677cc6737090042b3f, module_subprocess, sizeof(nuitka_bool)+sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *) );
    frame_ff315f57888600677cc6737090042b3f = cache_frame_ff315f57888600677cc6737090042b3f;

    // Push the new frame as the currently active one.
    pushFrameStack( frame_ff315f57888600677cc6737090042b3f );

    // Mark the frame object as in use, ref count 1 will be up for reuse.
    assert( Py_REFCNT( frame_ff315f57888600677cc6737090042b3f ) == 2 ); // Frame stack

    // Framed code:
    {
        PyObject *tmp_assign_source_2;
        PyObject *tmp_called_name_1;
        PyObject *tmp_mvar_value_1;
        tmp_mvar_value_1 = GET_STRING_DICT_VALUE( moduledict_subprocess, (Nuitka_StringObject *)const_str_plain__optim_args_from_interpreter_flags );

        if (unlikely( tmp_mvar_value_1 == NULL ))
        {
            tmp_mvar_value_1 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain__optim_args_from_interpreter_flags );
        }

        if ( tmp_mvar_value_1 == NULL )
        {

            exception_type = PyExc_NameError;
            Py_INCREF( exception_type );
            exception_value = PyUnicode_FromFormat( "name '%s' is not defined", "_optim_args_from_interpreter_flags" );
            exception_tb = NULL;
            NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
            CHAIN_EXCEPTION( exception_value );

            exception_lineno = 270;
            type_description_1 = "ooooooooboo";
            goto frame_exception_exit_1;
        }

        tmp_called_name_1 = tmp_mvar_value_1;
        frame_ff315f57888600677cc6737090042b3f->m_frame.f_lineno = 270;
        tmp_assign_source_2 = CALL_FUNCTION_NO_ARGS( tmp_called_name_1 );
        if ( tmp_assign_source_2 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 270;
            type_description_1 = "ooooooooboo";
            goto frame_exception_exit_1;
        }
        assert( var_args == NULL );
        var_args = tmp_assign_source_2;
    }
    {
        PyObject *tmp_assign_source_3;
        PyObject *tmp_iter_arg_1;
        PyObject *tmp_called_instance_1;
        CHECK_OBJECT( var_flag_opt_map );
        tmp_called_instance_1 = var_flag_opt_map;
        frame_ff315f57888600677cc6737090042b3f->m_frame.f_lineno = 271;
        tmp_iter_arg_1 = CALL_METHOD_NO_ARGS( tmp_called_instance_1, const_str_plain_items );
        if ( tmp_iter_arg_1 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 271;
            type_description_1 = "ooooooooboo";
            goto frame_exception_exit_1;
        }
        tmp_assign_source_3 = MAKE_ITERATOR( tmp_iter_arg_1 );
        Py_DECREF( tmp_iter_arg_1 );
        if ( tmp_assign_source_3 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 271;
            type_description_1 = "ooooooooboo";
            goto frame_exception_exit_1;
        }
        assert( tmp_for_loop_1__for_iterator == NULL );
        tmp_for_loop_1__for_iterator = tmp_assign_source_3;
    }
    // Tried code:
    loop_start_1:;
    {
        PyObject *tmp_next_source_1;
        PyObject *tmp_assign_source_4;
        CHECK_OBJECT( tmp_for_loop_1__for_iterator );
        tmp_next_source_1 = tmp_for_loop_1__for_iterator;
        tmp_assign_source_4 = ITERATOR_NEXT( tmp_next_source_1 );
        if ( tmp_assign_source_4 == NULL )
        {
            if ( CHECK_AND_CLEAR_STOP_ITERATION_OCCURRED() )
            {

                goto loop_end_1;
            }
            else
            {

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
                type_description_1 = "ooooooooboo";
                exception_lineno = 271;
                goto try_except_handler_2;
            }
        }

        {
            PyObject *old = tmp_for_loop_1__iter_value;
            tmp_for_loop_1__iter_value = tmp_assign_source_4;
            Py_XDECREF( old );
        }

    }
    // Tried code:
    {
        PyObject *tmp_assign_source_5;
        PyObject *tmp_iter_arg_2;
        CHECK_OBJECT( tmp_for_loop_1__iter_value );
        tmp_iter_arg_2 = tmp_for_loop_1__iter_value;
        tmp_assign_source_5 = MAKE_UNPACK_ITERATOR( tmp_iter_arg_2 );
        if ( tmp_assign_source_5 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 271;
            type_description_1 = "ooooooooboo";
            goto try_except_handler_3;
        }
        {
            PyObject *old = tmp_tuple_unpack_1__source_iter;
            tmp_tuple_unpack_1__source_iter = tmp_assign_source_5;
            Py_XDECREF( old );
        }

    }
    // Tried code:
    {
        PyObject *tmp_assign_source_6;
        PyObject *tmp_unpack_1;
        CHECK_OBJECT( tmp_tuple_unpack_1__source_iter );
        tmp_unpack_1 = tmp_tuple_unpack_1__source_iter;
        tmp_assign_source_6 = UNPACK_NEXT( tmp_unpack_1, 0, 2 );
        if ( tmp_assign_source_6 == NULL )
        {
            if ( !ERROR_OCCURRED() )
            {
                exception_type = PyExc_StopIteration;
                Py_INCREF( exception_type );
                exception_value = NULL;
                exception_tb = NULL;
            }
            else
            {
                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
            }


            type_description_1 = "ooooooooboo";
            exception_lineno = 271;
            goto try_except_handler_4;
        }
        {
            PyObject *old = tmp_tuple_unpack_1__element_1;
            tmp_tuple_unpack_1__element_1 = tmp_assign_source_6;
            Py_XDECREF( old );
        }

    }
    {
        PyObject *tmp_assign_source_7;
        PyObject *tmp_unpack_2;
        CHECK_OBJECT( tmp_tuple_unpack_1__source_iter );
        tmp_unpack_2 = tmp_tuple_unpack_1__source_iter;
        tmp_assign_source_7 = UNPACK_NEXT( tmp_unpack_2, 1, 2 );
        if ( tmp_assign_source_7 == NULL )
        {
            if ( !ERROR_OCCURRED() )
            {
                exception_type = PyExc_StopIteration;
                Py_INCREF( exception_type );
                exception_value = NULL;
                exception_tb = NULL;
            }
            else
            {
                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
            }


            type_description_1 = "ooooooooboo";
            exception_lineno = 271;
            goto try_except_handler_4;
        }
        {
            PyObject *old = tmp_tuple_unpack_1__element_2;
            tmp_tuple_unpack_1__element_2 = tmp_assign_source_7;
            Py_XDECREF( old );
        }

    }
    {
        PyObject *tmp_iterator_name_1;
        CHECK_OBJECT( tmp_tuple_unpack_1__source_iter );
        tmp_iterator_name_1 = tmp_tuple_unpack_1__source_iter;
        // Check if iterator has left-over elements.
        CHECK_OBJECT( tmp_iterator_name_1 ); assert( HAS_ITERNEXT( tmp_iterator_name_1 ) );

        tmp_iterator_attempt = (*Py_TYPE( tmp_iterator_name_1 )->tp_iternext)( tmp_iterator_name_1 );

        if (likely( tmp_iterator_attempt == NULL ))
        {
            PyObject *error = GET_ERROR_OCCURRED();

            if ( error != NULL )
            {
                if ( EXCEPTION_MATCH_BOOL_SINGLE( error, PyExc_StopIteration ))
                {
                    CLEAR_ERROR_OCCURRED();
                }
                else
                {
                    FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );

                    type_description_1 = "ooooooooboo";
                    exception_lineno = 271;
                    goto try_except_handler_4;
                }
            }
        }
        else
        {
            Py_DECREF( tmp_iterator_attempt );

            // TODO: Could avoid PyErr_Format.
#if PYTHON_VERSION < 300
            PyErr_Format( PyExc_ValueError, "too many values to unpack" );
#else
            PyErr_Format( PyExc_ValueError, "too many values to unpack (expected 2)" );
#endif
            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );

            type_description_1 = "ooooooooboo";
            exception_lineno = 271;
            goto try_except_handler_4;
        }
    }
    goto try_end_1;
    // Exception handler code:
    try_except_handler_4:;
    exception_keeper_type_1 = exception_type;
    exception_keeper_value_1 = exception_value;
    exception_keeper_tb_1 = exception_tb;
    exception_keeper_lineno_1 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    CHECK_OBJECT( (PyObject *)tmp_tuple_unpack_1__source_iter );
    Py_DECREF( tmp_tuple_unpack_1__source_iter );
    tmp_tuple_unpack_1__source_iter = NULL;

    // Re-raise.
    exception_type = exception_keeper_type_1;
    exception_value = exception_keeper_value_1;
    exception_tb = exception_keeper_tb_1;
    exception_lineno = exception_keeper_lineno_1;

    goto try_except_handler_3;
    // End of try:
    try_end_1:;
    goto try_end_2;
    // Exception handler code:
    try_except_handler_3:;
    exception_keeper_type_2 = exception_type;
    exception_keeper_value_2 = exception_value;
    exception_keeper_tb_2 = exception_tb;
    exception_keeper_lineno_2 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    Py_XDECREF( tmp_tuple_unpack_1__element_1 );
    tmp_tuple_unpack_1__element_1 = NULL;

    Py_XDECREF( tmp_tuple_unpack_1__element_2 );
    tmp_tuple_unpack_1__element_2 = NULL;

    // Re-raise.
    exception_type = exception_keeper_type_2;
    exception_value = exception_keeper_value_2;
    exception_tb = exception_keeper_tb_2;
    exception_lineno = exception_keeper_lineno_2;

    goto try_except_handler_2;
    // End of try:
    try_end_2:;
    CHECK_OBJECT( (PyObject *)tmp_tuple_unpack_1__source_iter );
    Py_DECREF( tmp_tuple_unpack_1__source_iter );
    tmp_tuple_unpack_1__source_iter = NULL;

    {
        PyObject *tmp_assign_source_8;
        CHECK_OBJECT( tmp_tuple_unpack_1__element_1 );
        tmp_assign_source_8 = tmp_tuple_unpack_1__element_1;
        {
            PyObject *old = var_flag;
            var_flag = tmp_assign_source_8;
            Py_INCREF( var_flag );
            Py_XDECREF( old );
        }

    }
    Py_XDECREF( tmp_tuple_unpack_1__element_1 );
    tmp_tuple_unpack_1__element_1 = NULL;

    {
        PyObject *tmp_assign_source_9;
        CHECK_OBJECT( tmp_tuple_unpack_1__element_2 );
        tmp_assign_source_9 = tmp_tuple_unpack_1__element_2;
        {
            PyObject *old = var_opt;
            var_opt = tmp_assign_source_9;
            Py_INCREF( var_opt );
            Py_XDECREF( old );
        }

    }
    Py_XDECREF( tmp_tuple_unpack_1__element_2 );
    tmp_tuple_unpack_1__element_2 = NULL;

    {
        PyObject *tmp_assign_source_10;
        PyObject *tmp_getattr_target_1;
        PyObject *tmp_source_name_1;
        PyObject *tmp_mvar_value_2;
        PyObject *tmp_getattr_attr_1;
        tmp_mvar_value_2 = GET_STRING_DICT_VALUE( moduledict_subprocess, (Nuitka_StringObject *)const_str_plain_sys );

        if (unlikely( tmp_mvar_value_2 == NULL ))
        {
            tmp_mvar_value_2 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_sys );
        }

        if ( tmp_mvar_value_2 == NULL )
        {

            exception_type = PyExc_NameError;
            Py_INCREF( exception_type );
            exception_value = PyUnicode_FromFormat( "name '%s' is not defined", "sys" );
            exception_tb = NULL;
            NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
            CHAIN_EXCEPTION( exception_value );

            exception_lineno = 272;
            type_description_1 = "ooooooooboo";
            goto try_except_handler_2;
        }

        tmp_source_name_1 = tmp_mvar_value_2;
        tmp_getattr_target_1 = LOOKUP_ATTRIBUTE( tmp_source_name_1, const_str_plain_flags );
        if ( tmp_getattr_target_1 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 272;
            type_description_1 = "ooooooooboo";
            goto try_except_handler_2;
        }
        CHECK_OBJECT( var_flag );
        tmp_getattr_attr_1 = var_flag;
        tmp_assign_source_10 = BUILTIN_GETATTR( tmp_getattr_target_1, tmp_getattr_attr_1, NULL );
        Py_DECREF( tmp_getattr_target_1 );
        if ( tmp_assign_source_10 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 272;
            type_description_1 = "ooooooooboo";
            goto try_except_handler_2;
        }
        {
            PyObject *old = var_v;
            var_v = tmp_assign_source_10;
            Py_XDECREF( old );
        }

    }
    {
        nuitka_bool tmp_condition_result_1;
        PyObject *tmp_compexpr_left_1;
        PyObject *tmp_compexpr_right_1;
        CHECK_OBJECT( var_v );
        tmp_compexpr_left_1 = var_v;
        tmp_compexpr_right_1 = const_int_0;
        tmp_res = RICH_COMPARE_BOOL_GT_OBJECT_OBJECT( tmp_compexpr_left_1, tmp_compexpr_right_1 );
        if ( tmp_res == -1 )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 273;
            type_description_1 = "ooooooooboo";
            goto try_except_handler_2;
        }
        tmp_condition_result_1 = ( tmp_res != 0 ) ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
        if ( tmp_condition_result_1 == NUITKA_BOOL_TRUE )
        {
            goto branch_yes_1;
        }
        else
        {
            goto branch_no_1;
        }
        branch_yes_1:;
        {
            PyObject *tmp_called_name_2;
            PyObject *tmp_source_name_2;
            PyObject *tmp_call_result_1;
            PyObject *tmp_args_element_name_1;
            PyObject *tmp_left_name_1;
            PyObject *tmp_right_name_1;
            PyObject *tmp_left_name_2;
            PyObject *tmp_right_name_2;
            CHECK_OBJECT( var_args );
            tmp_source_name_2 = var_args;
            tmp_called_name_2 = LOOKUP_ATTRIBUTE( tmp_source_name_2, const_str_plain_append );
            if ( tmp_called_name_2 == NULL )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 274;
                type_description_1 = "ooooooooboo";
                goto try_except_handler_2;
            }
            tmp_left_name_1 = const_str_chr_45;
            CHECK_OBJECT( var_opt );
            tmp_left_name_2 = var_opt;
            CHECK_OBJECT( var_v );
            tmp_right_name_2 = var_v;
            tmp_right_name_1 = BINARY_OPERATION_MUL( tmp_left_name_2, tmp_right_name_2 );
            if ( tmp_right_name_1 == NULL )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
                Py_DECREF( tmp_called_name_2 );

                exception_lineno = 274;
                type_description_1 = "ooooooooboo";
                goto try_except_handler_2;
            }
            tmp_args_element_name_1 = BINARY_OPERATION_ADD_UNICODE_OBJECT( tmp_left_name_1, tmp_right_name_1 );
            Py_DECREF( tmp_right_name_1 );
            if ( tmp_args_element_name_1 == NULL )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
                Py_DECREF( tmp_called_name_2 );

                exception_lineno = 274;
                type_description_1 = "ooooooooboo";
                goto try_except_handler_2;
            }
            frame_ff315f57888600677cc6737090042b3f->m_frame.f_lineno = 274;
            {
                PyObject *call_args[] = { tmp_args_element_name_1 };
                tmp_call_result_1 = CALL_FUNCTION_WITH_ARGS1( tmp_called_name_2, call_args );
            }

            Py_DECREF( tmp_called_name_2 );
            Py_DECREF( tmp_args_element_name_1 );
            if ( tmp_call_result_1 == NULL )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 274;
                type_description_1 = "ooooooooboo";
                goto try_except_handler_2;
            }
            Py_DECREF( tmp_call_result_1 );
        }
        branch_no_1:;
    }
    if ( CONSIDER_THREADING() == false )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 271;
        type_description_1 = "ooooooooboo";
        goto try_except_handler_2;
    }
    goto loop_start_1;
    loop_end_1:;
    goto try_end_3;
    // Exception handler code:
    try_except_handler_2:;
    exception_keeper_type_3 = exception_type;
    exception_keeper_value_3 = exception_value;
    exception_keeper_tb_3 = exception_tb;
    exception_keeper_lineno_3 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    Py_XDECREF( tmp_for_loop_1__iter_value );
    tmp_for_loop_1__iter_value = NULL;

    CHECK_OBJECT( (PyObject *)tmp_for_loop_1__for_iterator );
    Py_DECREF( tmp_for_loop_1__for_iterator );
    tmp_for_loop_1__for_iterator = NULL;

    // Re-raise.
    exception_type = exception_keeper_type_3;
    exception_value = exception_keeper_value_3;
    exception_tb = exception_keeper_tb_3;
    exception_lineno = exception_keeper_lineno_3;

    goto frame_exception_exit_1;
    // End of try:
    try_end_3:;
    Py_XDECREF( tmp_for_loop_1__iter_value );
    tmp_for_loop_1__iter_value = NULL;

    CHECK_OBJECT( (PyObject *)tmp_for_loop_1__for_iterator );
    Py_DECREF( tmp_for_loop_1__for_iterator );
    tmp_for_loop_1__for_iterator = NULL;

    {
        nuitka_bool tmp_condition_result_2;
        PyObject *tmp_source_name_3;
        PyObject *tmp_source_name_4;
        PyObject *tmp_mvar_value_3;
        PyObject *tmp_attribute_value_1;
        int tmp_truth_name_1;
        tmp_mvar_value_3 = GET_STRING_DICT_VALUE( moduledict_subprocess, (Nuitka_StringObject *)const_str_plain_sys );

        if (unlikely( tmp_mvar_value_3 == NULL ))
        {
            tmp_mvar_value_3 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_sys );
        }

        if ( tmp_mvar_value_3 == NULL )
        {

            exception_type = PyExc_NameError;
            Py_INCREF( exception_type );
            exception_value = PyUnicode_FromFormat( "name '%s' is not defined", "sys" );
            exception_tb = NULL;
            NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
            CHAIN_EXCEPTION( exception_value );

            exception_lineno = 276;
            type_description_1 = "ooooooooboo";
            goto frame_exception_exit_1;
        }

        tmp_source_name_4 = tmp_mvar_value_3;
        tmp_source_name_3 = LOOKUP_ATTRIBUTE( tmp_source_name_4, const_str_plain_flags );
        if ( tmp_source_name_3 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 276;
            type_description_1 = "ooooooooboo";
            goto frame_exception_exit_1;
        }
        tmp_attribute_value_1 = LOOKUP_ATTRIBUTE( tmp_source_name_3, const_str_plain_isolated );
        Py_DECREF( tmp_source_name_3 );
        if ( tmp_attribute_value_1 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 276;
            type_description_1 = "ooooooooboo";
            goto frame_exception_exit_1;
        }
        tmp_truth_name_1 = CHECK_IF_TRUE( tmp_attribute_value_1 );
        if ( tmp_truth_name_1 == -1 )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
            Py_DECREF( tmp_attribute_value_1 );

            exception_lineno = 276;
            type_description_1 = "ooooooooboo";
            goto frame_exception_exit_1;
        }
        tmp_condition_result_2 = tmp_truth_name_1 == 1 ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
        Py_DECREF( tmp_attribute_value_1 );
        if ( tmp_condition_result_2 == NUITKA_BOOL_TRUE )
        {
            goto branch_yes_2;
        }
        else
        {
            goto branch_no_2;
        }
        branch_yes_2:;
        {
            PyObject *tmp_called_instance_2;
            PyObject *tmp_call_result_2;
            CHECK_OBJECT( var_args );
            tmp_called_instance_2 = var_args;
            frame_ff315f57888600677cc6737090042b3f->m_frame.f_lineno = 277;
            tmp_call_result_2 = CALL_METHOD_WITH_ARGS1( tmp_called_instance_2, const_str_plain_append, &PyTuple_GET_ITEM( const_tuple_str_digest_571eccf4664cb01ecea1867fcbf66f8d_tuple, 0 ) );

            if ( tmp_call_result_2 == NULL )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 277;
                type_description_1 = "ooooooooboo";
                goto frame_exception_exit_1;
            }
            Py_DECREF( tmp_call_result_2 );
        }
        goto branch_end_2;
        branch_no_2:;
        {
            nuitka_bool tmp_condition_result_3;
            PyObject *tmp_source_name_5;
            PyObject *tmp_source_name_6;
            PyObject *tmp_mvar_value_4;
            PyObject *tmp_attribute_value_2;
            int tmp_truth_name_2;
            tmp_mvar_value_4 = GET_STRING_DICT_VALUE( moduledict_subprocess, (Nuitka_StringObject *)const_str_plain_sys );

            if (unlikely( tmp_mvar_value_4 == NULL ))
            {
                tmp_mvar_value_4 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_sys );
            }

            if ( tmp_mvar_value_4 == NULL )
            {

                exception_type = PyExc_NameError;
                Py_INCREF( exception_type );
                exception_value = PyUnicode_FromFormat( "name '%s' is not defined", "sys" );
                exception_tb = NULL;
                NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
                CHAIN_EXCEPTION( exception_value );

                exception_lineno = 279;
                type_description_1 = "ooooooooboo";
                goto frame_exception_exit_1;
            }

            tmp_source_name_6 = tmp_mvar_value_4;
            tmp_source_name_5 = LOOKUP_ATTRIBUTE( tmp_source_name_6, const_str_plain_flags );
            if ( tmp_source_name_5 == NULL )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 279;
                type_description_1 = "ooooooooboo";
                goto frame_exception_exit_1;
            }
            tmp_attribute_value_2 = LOOKUP_ATTRIBUTE( tmp_source_name_5, const_str_plain_ignore_environment );
            Py_DECREF( tmp_source_name_5 );
            if ( tmp_attribute_value_2 == NULL )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 279;
                type_description_1 = "ooooooooboo";
                goto frame_exception_exit_1;
            }
            tmp_truth_name_2 = CHECK_IF_TRUE( tmp_attribute_value_2 );
            if ( tmp_truth_name_2 == -1 )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
                Py_DECREF( tmp_attribute_value_2 );

                exception_lineno = 279;
                type_description_1 = "ooooooooboo";
                goto frame_exception_exit_1;
            }
            tmp_condition_result_3 = tmp_truth_name_2 == 1 ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
            Py_DECREF( tmp_attribute_value_2 );
            if ( tmp_condition_result_3 == NUITKA_BOOL_TRUE )
            {
                goto branch_yes_3;
            }
            else
            {
                goto branch_no_3;
            }
            branch_yes_3:;
            {
                PyObject *tmp_called_instance_3;
                PyObject *tmp_call_result_3;
                CHECK_OBJECT( var_args );
                tmp_called_instance_3 = var_args;
                frame_ff315f57888600677cc6737090042b3f->m_frame.f_lineno = 280;
                tmp_call_result_3 = CALL_METHOD_WITH_ARGS1( tmp_called_instance_3, const_str_plain_append, &PyTuple_GET_ITEM( const_tuple_str_digest_1e2d75506e9e2e171471d3f72a5fa834_tuple, 0 ) );

                if ( tmp_call_result_3 == NULL )
                {
                    assert( ERROR_OCCURRED() );

                    FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                    exception_lineno = 280;
                    type_description_1 = "ooooooooboo";
                    goto frame_exception_exit_1;
                }
                Py_DECREF( tmp_call_result_3 );
            }
            branch_no_3:;
        }
        {
            nuitka_bool tmp_condition_result_4;
            PyObject *tmp_source_name_7;
            PyObject *tmp_source_name_8;
            PyObject *tmp_mvar_value_5;
            PyObject *tmp_attribute_value_3;
            int tmp_truth_name_3;
            tmp_mvar_value_5 = GET_STRING_DICT_VALUE( moduledict_subprocess, (Nuitka_StringObject *)const_str_plain_sys );

            if (unlikely( tmp_mvar_value_5 == NULL ))
            {
                tmp_mvar_value_5 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_sys );
            }

            if ( tmp_mvar_value_5 == NULL )
            {

                exception_type = PyExc_NameError;
                Py_INCREF( exception_type );
                exception_value = PyUnicode_FromFormat( "name '%s' is not defined", "sys" );
                exception_tb = NULL;
                NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
                CHAIN_EXCEPTION( exception_value );

                exception_lineno = 281;
                type_description_1 = "ooooooooboo";
                goto frame_exception_exit_1;
            }

            tmp_source_name_8 = tmp_mvar_value_5;
            tmp_source_name_7 = LOOKUP_ATTRIBUTE( tmp_source_name_8, const_str_plain_flags );
            if ( tmp_source_name_7 == NULL )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 281;
                type_description_1 = "ooooooooboo";
                goto frame_exception_exit_1;
            }
            tmp_attribute_value_3 = LOOKUP_ATTRIBUTE( tmp_source_name_7, const_str_plain_no_user_site );
            Py_DECREF( tmp_source_name_7 );
            if ( tmp_attribute_value_3 == NULL )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 281;
                type_description_1 = "ooooooooboo";
                goto frame_exception_exit_1;
            }
            tmp_truth_name_3 = CHECK_IF_TRUE( tmp_attribute_value_3 );
            if ( tmp_truth_name_3 == -1 )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
                Py_DECREF( tmp_attribute_value_3 );

                exception_lineno = 281;
                type_description_1 = "ooooooooboo";
                goto frame_exception_exit_1;
            }
            tmp_condition_result_4 = tmp_truth_name_3 == 1 ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
            Py_DECREF( tmp_attribute_value_3 );
            if ( tmp_condition_result_4 == NUITKA_BOOL_TRUE )
            {
                goto branch_yes_4;
            }
            else
            {
                goto branch_no_4;
            }
            branch_yes_4:;
            {
                PyObject *tmp_called_instance_4;
                PyObject *tmp_call_result_4;
                CHECK_OBJECT( var_args );
                tmp_called_instance_4 = var_args;
                frame_ff315f57888600677cc6737090042b3f->m_frame.f_lineno = 282;
                tmp_call_result_4 = CALL_METHOD_WITH_ARGS1( tmp_called_instance_4, const_str_plain_append, &PyTuple_GET_ITEM( const_tuple_str_digest_c836122af34ee7a172b779f26da7801f_tuple, 0 ) );

                if ( tmp_call_result_4 == NULL )
                {
                    assert( ERROR_OCCURRED() );

                    FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                    exception_lineno = 282;
                    type_description_1 = "ooooooooboo";
                    goto frame_exception_exit_1;
                }
                Py_DECREF( tmp_call_result_4 );
            }
            branch_no_4:;
        }
        branch_end_2:;
    }
    {
        PyObject *tmp_assign_source_11;
        PyObject *tmp_subscribed_name_1;
        PyObject *tmp_source_name_9;
        PyObject *tmp_mvar_value_6;
        PyObject *tmp_subscript_name_1;
        tmp_mvar_value_6 = GET_STRING_DICT_VALUE( moduledict_subprocess, (Nuitka_StringObject *)const_str_plain_sys );

        if (unlikely( tmp_mvar_value_6 == NULL ))
        {
            tmp_mvar_value_6 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_sys );
        }

        if ( tmp_mvar_value_6 == NULL )
        {

            exception_type = PyExc_NameError;
            Py_INCREF( exception_type );
            exception_value = PyUnicode_FromFormat( "name '%s' is not defined", "sys" );
            exception_tb = NULL;
            NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
            CHAIN_EXCEPTION( exception_value );

            exception_lineno = 285;
            type_description_1 = "ooooooooboo";
            goto frame_exception_exit_1;
        }

        tmp_source_name_9 = tmp_mvar_value_6;
        tmp_subscribed_name_1 = LOOKUP_ATTRIBUTE( tmp_source_name_9, const_str_plain_warnoptions );
        if ( tmp_subscribed_name_1 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 285;
            type_description_1 = "ooooooooboo";
            goto frame_exception_exit_1;
        }
        tmp_subscript_name_1 = const_slice_none_none_none;
        tmp_assign_source_11 = LOOKUP_SUBSCRIPT( tmp_subscribed_name_1, tmp_subscript_name_1 );
        Py_DECREF( tmp_subscribed_name_1 );
        if ( tmp_assign_source_11 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 285;
            type_description_1 = "ooooooooboo";
            goto frame_exception_exit_1;
        }
        assert( var_warnopts == NULL );
        var_warnopts = tmp_assign_source_11;
    }
    {
        PyObject *tmp_assign_source_12;
        PyObject *tmp_source_name_10;
        PyObject *tmp_source_name_11;
        PyObject *tmp_mvar_value_7;
        tmp_mvar_value_7 = GET_STRING_DICT_VALUE( moduledict_subprocess, (Nuitka_StringObject *)const_str_plain_sys );

        if (unlikely( tmp_mvar_value_7 == NULL ))
        {
            tmp_mvar_value_7 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_sys );
        }

        if ( tmp_mvar_value_7 == NULL )
        {

            exception_type = PyExc_NameError;
            Py_INCREF( exception_type );
            exception_value = PyUnicode_FromFormat( "name '%s' is not defined", "sys" );
            exception_tb = NULL;
            NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
            CHAIN_EXCEPTION( exception_value );

            exception_lineno = 286;
            type_description_1 = "ooooooooboo";
            goto frame_exception_exit_1;
        }

        tmp_source_name_11 = tmp_mvar_value_7;
        tmp_source_name_10 = LOOKUP_ATTRIBUTE( tmp_source_name_11, const_str_plain_flags );
        if ( tmp_source_name_10 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 286;
            type_description_1 = "ooooooooboo";
            goto frame_exception_exit_1;
        }
        tmp_assign_source_12 = LOOKUP_ATTRIBUTE( tmp_source_name_10, const_str_plain_bytes_warning );
        Py_DECREF( tmp_source_name_10 );
        if ( tmp_assign_source_12 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 286;
            type_description_1 = "ooooooooboo";
            goto frame_exception_exit_1;
        }
        assert( var_bytes_warning == NULL );
        var_bytes_warning = tmp_assign_source_12;
    }
    {
        PyObject *tmp_assign_source_13;
        PyObject *tmp_getattr_target_2;
        PyObject *tmp_mvar_value_8;
        PyObject *tmp_getattr_attr_2;
        PyObject *tmp_getattr_default_1;
        tmp_mvar_value_8 = GET_STRING_DICT_VALUE( moduledict_subprocess, (Nuitka_StringObject *)const_str_plain_sys );

        if (unlikely( tmp_mvar_value_8 == NULL ))
        {
            tmp_mvar_value_8 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_sys );
        }

        if ( tmp_mvar_value_8 == NULL )
        {

            exception_type = PyExc_NameError;
            Py_INCREF( exception_type );
            exception_value = PyUnicode_FromFormat( "name '%s' is not defined", "sys" );
            exception_tb = NULL;
            NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
            CHAIN_EXCEPTION( exception_value );

            exception_lineno = 287;
            type_description_1 = "ooooooooboo";
            goto frame_exception_exit_1;
        }

        tmp_getattr_target_2 = tmp_mvar_value_8;
        tmp_getattr_attr_2 = const_str_plain__xoptions;
        tmp_getattr_default_1 = PyDict_New();
        tmp_assign_source_13 = BUILTIN_GETATTR( tmp_getattr_target_2, tmp_getattr_attr_2, tmp_getattr_default_1 );
        Py_DECREF( tmp_getattr_default_1 );
        if ( tmp_assign_source_13 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 287;
            type_description_1 = "ooooooooboo";
            goto frame_exception_exit_1;
        }
        assert( var_xoptions == NULL );
        var_xoptions = tmp_assign_source_13;
    }
    {
        nuitka_bool tmp_assign_source_14;
        PyObject *tmp_compexpr_left_2;
        PyObject *tmp_compexpr_right_2;
        tmp_compexpr_left_2 = const_str_plain_dev;
        CHECK_OBJECT( var_xoptions );
        tmp_compexpr_right_2 = var_xoptions;
        tmp_res = PySequence_Contains( tmp_compexpr_right_2, tmp_compexpr_left_2 );
        if ( tmp_res == -1 )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 288;
            type_description_1 = "ooooooooboo";
            goto frame_exception_exit_1;
        }
        tmp_assign_source_14 = ( tmp_res == 1 ) ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
        var_dev_mode = tmp_assign_source_14;
    }
    {
        nuitka_bool tmp_condition_result_5;
        PyObject *tmp_compexpr_left_3;
        PyObject *tmp_compexpr_right_3;
        CHECK_OBJECT( var_bytes_warning );
        tmp_compexpr_left_3 = var_bytes_warning;
        tmp_compexpr_right_3 = const_int_pos_1;
        tmp_res = RICH_COMPARE_BOOL_GT_OBJECT_OBJECT( tmp_compexpr_left_3, tmp_compexpr_right_3 );
        if ( tmp_res == -1 )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 290;
            type_description_1 = "ooooooooboo";
            goto frame_exception_exit_1;
        }
        tmp_condition_result_5 = ( tmp_res != 0 ) ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
        if ( tmp_condition_result_5 == NUITKA_BOOL_TRUE )
        {
            goto branch_yes_5;
        }
        else
        {
            goto branch_no_5;
        }
        branch_yes_5:;
        {
            PyObject *tmp_called_instance_5;
            PyObject *tmp_call_result_5;
            CHECK_OBJECT( var_warnopts );
            tmp_called_instance_5 = var_warnopts;
            frame_ff315f57888600677cc6737090042b3f->m_frame.f_lineno = 291;
            tmp_call_result_5 = CALL_METHOD_WITH_ARGS1( tmp_called_instance_5, const_str_plain_remove, &PyTuple_GET_ITEM( const_tuple_str_digest_14e5e85200836625f117ca82ffb5a872_tuple, 0 ) );

            if ( tmp_call_result_5 == NULL )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 291;
                type_description_1 = "ooooooooboo";
                goto frame_exception_exit_1;
            }
            Py_DECREF( tmp_call_result_5 );
        }
        goto branch_end_5;
        branch_no_5:;
        {
            nuitka_bool tmp_condition_result_6;
            int tmp_truth_name_4;
            CHECK_OBJECT( var_bytes_warning );
            tmp_truth_name_4 = CHECK_IF_TRUE( var_bytes_warning );
            if ( tmp_truth_name_4 == -1 )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 292;
                type_description_1 = "ooooooooboo";
                goto frame_exception_exit_1;
            }
            tmp_condition_result_6 = tmp_truth_name_4 == 1 ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
            if ( tmp_condition_result_6 == NUITKA_BOOL_TRUE )
            {
                goto branch_yes_6;
            }
            else
            {
                goto branch_no_6;
            }
            branch_yes_6:;
            {
                PyObject *tmp_called_instance_6;
                PyObject *tmp_call_result_6;
                CHECK_OBJECT( var_warnopts );
                tmp_called_instance_6 = var_warnopts;
                frame_ff315f57888600677cc6737090042b3f->m_frame.f_lineno = 293;
                tmp_call_result_6 = CALL_METHOD_WITH_ARGS1( tmp_called_instance_6, const_str_plain_remove, &PyTuple_GET_ITEM( const_tuple_str_digest_885315c83fa89d51965111c7f94ba941_tuple, 0 ) );

                if ( tmp_call_result_6 == NULL )
                {
                    assert( ERROR_OCCURRED() );

                    FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                    exception_lineno = 293;
                    type_description_1 = "ooooooooboo";
                    goto frame_exception_exit_1;
                }
                Py_DECREF( tmp_call_result_6 );
            }
            branch_no_6:;
        }
        branch_end_5:;
    }
    {
        nuitka_bool tmp_condition_result_7;
        assert( var_dev_mode != NUITKA_BOOL_UNASSIGNED);
        tmp_condition_result_7 = var_dev_mode;
        if ( tmp_condition_result_7 == NUITKA_BOOL_TRUE )
        {
            goto branch_yes_7;
        }
        else
        {
            goto branch_no_7;
        }
        branch_yes_7:;
        {
            PyObject *tmp_called_instance_7;
            PyObject *tmp_call_result_7;
            CHECK_OBJECT( var_warnopts );
            tmp_called_instance_7 = var_warnopts;
            frame_ff315f57888600677cc6737090042b3f->m_frame.f_lineno = 295;
            tmp_call_result_7 = CALL_METHOD_WITH_ARGS1( tmp_called_instance_7, const_str_plain_remove, &PyTuple_GET_ITEM( const_tuple_str_plain_default_tuple, 0 ) );

            if ( tmp_call_result_7 == NULL )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 295;
                type_description_1 = "ooooooooboo";
                goto frame_exception_exit_1;
            }
            Py_DECREF( tmp_call_result_7 );
        }
        branch_no_7:;
    }
    {
        PyObject *tmp_assign_source_15;
        PyObject *tmp_iter_arg_3;
        CHECK_OBJECT( var_warnopts );
        tmp_iter_arg_3 = var_warnopts;
        tmp_assign_source_15 = MAKE_ITERATOR( tmp_iter_arg_3 );
        if ( tmp_assign_source_15 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 296;
            type_description_1 = "ooooooooboo";
            goto frame_exception_exit_1;
        }
        assert( tmp_for_loop_2__for_iterator == NULL );
        tmp_for_loop_2__for_iterator = tmp_assign_source_15;
    }
    // Tried code:
    loop_start_2:;
    {
        PyObject *tmp_next_source_2;
        PyObject *tmp_assign_source_16;
        CHECK_OBJECT( tmp_for_loop_2__for_iterator );
        tmp_next_source_2 = tmp_for_loop_2__for_iterator;
        tmp_assign_source_16 = ITERATOR_NEXT( tmp_next_source_2 );
        if ( tmp_assign_source_16 == NULL )
        {
            if ( CHECK_AND_CLEAR_STOP_ITERATION_OCCURRED() )
            {

                goto loop_end_2;
            }
            else
            {

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
                type_description_1 = "ooooooooboo";
                exception_lineno = 296;
                goto try_except_handler_5;
            }
        }

        {
            PyObject *old = tmp_for_loop_2__iter_value;
            tmp_for_loop_2__iter_value = tmp_assign_source_16;
            Py_XDECREF( old );
        }

    }
    {
        PyObject *tmp_assign_source_17;
        CHECK_OBJECT( tmp_for_loop_2__iter_value );
        tmp_assign_source_17 = tmp_for_loop_2__iter_value;
        {
            PyObject *old = var_opt;
            var_opt = tmp_assign_source_17;
            Py_INCREF( var_opt );
            Py_XDECREF( old );
        }

    }
    {
        PyObject *tmp_called_name_3;
        PyObject *tmp_source_name_12;
        PyObject *tmp_call_result_8;
        PyObject *tmp_args_element_name_2;
        PyObject *tmp_left_name_3;
        PyObject *tmp_right_name_3;
        CHECK_OBJECT( var_args );
        tmp_source_name_12 = var_args;
        tmp_called_name_3 = LOOKUP_ATTRIBUTE( tmp_source_name_12, const_str_plain_append );
        if ( tmp_called_name_3 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 297;
            type_description_1 = "ooooooooboo";
            goto try_except_handler_5;
        }
        tmp_left_name_3 = const_str_digest_d53cbfa1c290fabaad865ce93b11e777;
        CHECK_OBJECT( var_opt );
        tmp_right_name_3 = var_opt;
        tmp_args_element_name_2 = BINARY_OPERATION_ADD_UNICODE_OBJECT( tmp_left_name_3, tmp_right_name_3 );
        if ( tmp_args_element_name_2 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
            Py_DECREF( tmp_called_name_3 );

            exception_lineno = 297;
            type_description_1 = "ooooooooboo";
            goto try_except_handler_5;
        }
        frame_ff315f57888600677cc6737090042b3f->m_frame.f_lineno = 297;
        {
            PyObject *call_args[] = { tmp_args_element_name_2 };
            tmp_call_result_8 = CALL_FUNCTION_WITH_ARGS1( tmp_called_name_3, call_args );
        }

        Py_DECREF( tmp_called_name_3 );
        Py_DECREF( tmp_args_element_name_2 );
        if ( tmp_call_result_8 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 297;
            type_description_1 = "ooooooooboo";
            goto try_except_handler_5;
        }
        Py_DECREF( tmp_call_result_8 );
    }
    if ( CONSIDER_THREADING() == false )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 296;
        type_description_1 = "ooooooooboo";
        goto try_except_handler_5;
    }
    goto loop_start_2;
    loop_end_2:;
    goto try_end_4;
    // Exception handler code:
    try_except_handler_5:;
    exception_keeper_type_4 = exception_type;
    exception_keeper_value_4 = exception_value;
    exception_keeper_tb_4 = exception_tb;
    exception_keeper_lineno_4 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    Py_XDECREF( tmp_for_loop_2__iter_value );
    tmp_for_loop_2__iter_value = NULL;

    CHECK_OBJECT( (PyObject *)tmp_for_loop_2__for_iterator );
    Py_DECREF( tmp_for_loop_2__for_iterator );
    tmp_for_loop_2__for_iterator = NULL;

    // Re-raise.
    exception_type = exception_keeper_type_4;
    exception_value = exception_keeper_value_4;
    exception_tb = exception_keeper_tb_4;
    exception_lineno = exception_keeper_lineno_4;

    goto frame_exception_exit_1;
    // End of try:
    try_end_4:;
    Py_XDECREF( tmp_for_loop_2__iter_value );
    tmp_for_loop_2__iter_value = NULL;

    CHECK_OBJECT( (PyObject *)tmp_for_loop_2__for_iterator );
    Py_DECREF( tmp_for_loop_2__for_iterator );
    tmp_for_loop_2__for_iterator = NULL;

    {
        nuitka_bool tmp_condition_result_8;
        assert( var_dev_mode != NUITKA_BOOL_UNASSIGNED);
        tmp_condition_result_8 = var_dev_mode;
        if ( tmp_condition_result_8 == NUITKA_BOOL_TRUE )
        {
            goto branch_yes_8;
        }
        else
        {
            goto branch_no_8;
        }
        branch_yes_8:;
        {
            PyObject *tmp_called_instance_8;
            PyObject *tmp_call_result_9;
            CHECK_OBJECT( var_args );
            tmp_called_instance_8 = var_args;
            frame_ff315f57888600677cc6737090042b3f->m_frame.f_lineno = 301;
            tmp_call_result_9 = CALL_METHOD_WITH_ARGS1( tmp_called_instance_8, const_str_plain_extend, &PyTuple_GET_ITEM( const_tuple_cf15e362698fabb360ad29cd5431b46a_tuple, 0 ) );

            if ( tmp_call_result_9 == NULL )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 301;
                type_description_1 = "ooooooooboo";
                goto frame_exception_exit_1;
            }
            Py_DECREF( tmp_call_result_9 );
        }
        branch_no_8:;
    }
    {
        PyObject *tmp_assign_source_18;
        PyObject *tmp_iter_arg_4;
        tmp_iter_arg_4 = const_tuple_661bad9cbc9a35bb6615dc0b659093ae_tuple;
        tmp_assign_source_18 = MAKE_ITERATOR( tmp_iter_arg_4 );
        assert( !(tmp_assign_source_18 == NULL) );
        assert( tmp_for_loop_3__for_iterator == NULL );
        tmp_for_loop_3__for_iterator = tmp_assign_source_18;
    }
    // Tried code:
    loop_start_3:;
    {
        PyObject *tmp_next_source_3;
        PyObject *tmp_assign_source_19;
        CHECK_OBJECT( tmp_for_loop_3__for_iterator );
        tmp_next_source_3 = tmp_for_loop_3__for_iterator;
        tmp_assign_source_19 = ITERATOR_NEXT( tmp_next_source_3 );
        if ( tmp_assign_source_19 == NULL )
        {
            if ( CHECK_AND_CLEAR_STOP_ITERATION_OCCURRED() )
            {

                goto loop_end_3;
            }
            else
            {

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
                type_description_1 = "ooooooooboo";
                exception_lineno = 302;
                goto try_except_handler_6;
            }
        }

        {
            PyObject *old = tmp_for_loop_3__iter_value;
            tmp_for_loop_3__iter_value = tmp_assign_source_19;
            Py_XDECREF( old );
        }

    }
    {
        PyObject *tmp_assign_source_20;
        CHECK_OBJECT( tmp_for_loop_3__iter_value );
        tmp_assign_source_20 = tmp_for_loop_3__iter_value;
        {
            PyObject *old = var_opt;
            var_opt = tmp_assign_source_20;
            Py_INCREF( var_opt );
            Py_XDECREF( old );
        }

    }
    {
        nuitka_bool tmp_condition_result_9;
        PyObject *tmp_compexpr_left_4;
        PyObject *tmp_compexpr_right_4;
        CHECK_OBJECT( var_opt );
        tmp_compexpr_left_4 = var_opt;
        CHECK_OBJECT( var_xoptions );
        tmp_compexpr_right_4 = var_xoptions;
        tmp_res = PySequence_Contains( tmp_compexpr_right_4, tmp_compexpr_left_4 );
        if ( tmp_res == -1 )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 304;
            type_description_1 = "ooooooooboo";
            goto try_except_handler_6;
        }
        tmp_condition_result_9 = ( tmp_res == 1 ) ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
        if ( tmp_condition_result_9 == NUITKA_BOOL_TRUE )
        {
            goto branch_yes_9;
        }
        else
        {
            goto branch_no_9;
        }
        branch_yes_9:;
        {
            PyObject *tmp_assign_source_21;
            PyObject *tmp_subscribed_name_2;
            PyObject *tmp_subscript_name_2;
            CHECK_OBJECT( var_xoptions );
            tmp_subscribed_name_2 = var_xoptions;
            CHECK_OBJECT( var_opt );
            tmp_subscript_name_2 = var_opt;
            tmp_assign_source_21 = LOOKUP_SUBSCRIPT( tmp_subscribed_name_2, tmp_subscript_name_2 );
            if ( tmp_assign_source_21 == NULL )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 305;
                type_description_1 = "ooooooooboo";
                goto try_except_handler_6;
            }
            {
                PyObject *old = var_value;
                var_value = tmp_assign_source_21;
                Py_XDECREF( old );
            }

        }
        {
            nuitka_bool tmp_condition_result_10;
            PyObject *tmp_compexpr_left_5;
            PyObject *tmp_compexpr_right_5;
            CHECK_OBJECT( var_value );
            tmp_compexpr_left_5 = var_value;
            tmp_compexpr_right_5 = Py_True;
            tmp_condition_result_10 = ( tmp_compexpr_left_5 == tmp_compexpr_right_5 ) ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
            if ( tmp_condition_result_10 == NUITKA_BOOL_TRUE )
            {
                goto branch_yes_10;
            }
            else
            {
                goto branch_no_10;
            }
            branch_yes_10:;
            {
                PyObject *tmp_assign_source_22;
                CHECK_OBJECT( var_opt );
                tmp_assign_source_22 = var_opt;
                {
                    PyObject *old = var_arg;
                    var_arg = tmp_assign_source_22;
                    Py_INCREF( var_arg );
                    Py_XDECREF( old );
                }

            }
            goto branch_end_10;
            branch_no_10:;
            {
                PyObject *tmp_assign_source_23;
                PyObject *tmp_left_name_4;
                PyObject *tmp_right_name_4;
                PyObject *tmp_tuple_element_1;
                tmp_left_name_4 = const_str_digest_d26f52d432ccf199e53ad3ddfa46aa69;
                CHECK_OBJECT( var_opt );
                tmp_tuple_element_1 = var_opt;
                tmp_right_name_4 = PyTuple_New( 2 );
                Py_INCREF( tmp_tuple_element_1 );
                PyTuple_SET_ITEM( tmp_right_name_4, 0, tmp_tuple_element_1 );
                CHECK_OBJECT( var_value );
                tmp_tuple_element_1 = var_value;
                Py_INCREF( tmp_tuple_element_1 );
                PyTuple_SET_ITEM( tmp_right_name_4, 1, tmp_tuple_element_1 );
                tmp_assign_source_23 = BINARY_OPERATION_REMAINDER( tmp_left_name_4, tmp_right_name_4 );
                Py_DECREF( tmp_right_name_4 );
                if ( tmp_assign_source_23 == NULL )
                {
                    assert( ERROR_OCCURRED() );

                    FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                    exception_lineno = 309;
                    type_description_1 = "ooooooooboo";
                    goto try_except_handler_6;
                }
                {
                    PyObject *old = var_arg;
                    var_arg = tmp_assign_source_23;
                    Py_XDECREF( old );
                }

            }
            branch_end_10:;
        }
        {
            PyObject *tmp_called_instance_9;
            PyObject *tmp_call_result_10;
            PyObject *tmp_args_element_name_3;
            PyObject *tmp_tuple_element_2;
            CHECK_OBJECT( var_args );
            tmp_called_instance_9 = var_args;
            tmp_tuple_element_2 = const_str_digest_24ffb4df8f6d99d30b1c0d82c11728f6;
            tmp_args_element_name_3 = PyTuple_New( 2 );
            Py_INCREF( tmp_tuple_element_2 );
            PyTuple_SET_ITEM( tmp_args_element_name_3, 0, tmp_tuple_element_2 );
            CHECK_OBJECT( var_arg );
            tmp_tuple_element_2 = var_arg;
            Py_INCREF( tmp_tuple_element_2 );
            PyTuple_SET_ITEM( tmp_args_element_name_3, 1, tmp_tuple_element_2 );
            frame_ff315f57888600677cc6737090042b3f->m_frame.f_lineno = 310;
            {
                PyObject *call_args[] = { tmp_args_element_name_3 };
                tmp_call_result_10 = CALL_METHOD_WITH_ARGS1( tmp_called_instance_9, const_str_plain_extend, call_args );
            }

            Py_DECREF( tmp_args_element_name_3 );
            if ( tmp_call_result_10 == NULL )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 310;
                type_description_1 = "ooooooooboo";
                goto try_except_handler_6;
            }
            Py_DECREF( tmp_call_result_10 );
        }
        branch_no_9:;
    }
    if ( CONSIDER_THREADING() == false )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 302;
        type_description_1 = "ooooooooboo";
        goto try_except_handler_6;
    }
    goto loop_start_3;
    loop_end_3:;
    goto try_end_5;
    // Exception handler code:
    try_except_handler_6:;
    exception_keeper_type_5 = exception_type;
    exception_keeper_value_5 = exception_value;
    exception_keeper_tb_5 = exception_tb;
    exception_keeper_lineno_5 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    Py_XDECREF( tmp_for_loop_3__iter_value );
    tmp_for_loop_3__iter_value = NULL;

    CHECK_OBJECT( (PyObject *)tmp_for_loop_3__for_iterator );
    Py_DECREF( tmp_for_loop_3__for_iterator );
    tmp_for_loop_3__for_iterator = NULL;

    // Re-raise.
    exception_type = exception_keeper_type_5;
    exception_value = exception_keeper_value_5;
    exception_tb = exception_keeper_tb_5;
    exception_lineno = exception_keeper_lineno_5;

    goto frame_exception_exit_1;
    // End of try:
    try_end_5:;

#if 0
    RESTORE_FRAME_EXCEPTION( frame_ff315f57888600677cc6737090042b3f );
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto frame_no_exception_1;

    frame_exception_exit_1:;

#if 0
    RESTORE_FRAME_EXCEPTION( frame_ff315f57888600677cc6737090042b3f );
#endif

    if ( exception_tb == NULL )
    {
        exception_tb = MAKE_TRACEBACK( frame_ff315f57888600677cc6737090042b3f, exception_lineno );
    }
    else if ( exception_tb->tb_frame != &frame_ff315f57888600677cc6737090042b3f->m_frame )
    {
        exception_tb = ADD_TRACEBACK( exception_tb, frame_ff315f57888600677cc6737090042b3f, exception_lineno );
    }

    // Attachs locals to frame if any.
    Nuitka_Frame_AttachLocals(
        (struct Nuitka_FrameObject *)frame_ff315f57888600677cc6737090042b3f,
        type_description_1,
        var_flag_opt_map,
        var_args,
        var_flag,
        var_opt,
        var_v,
        var_warnopts,
        var_bytes_warning,
        var_xoptions,
        (int)var_dev_mode,
        var_value,
        var_arg
    );


    // Release cached frame.
    if ( frame_ff315f57888600677cc6737090042b3f == cache_frame_ff315f57888600677cc6737090042b3f )
    {
        Py_DECREF( frame_ff315f57888600677cc6737090042b3f );
    }
    cache_frame_ff315f57888600677cc6737090042b3f = NULL;

    assertFrameObject( frame_ff315f57888600677cc6737090042b3f );

    // Put the previous frame back on top.
    popFrameStack();

    // Return the error.
    goto try_except_handler_1;

    frame_no_exception_1:;
    Py_XDECREF( tmp_for_loop_3__iter_value );
    tmp_for_loop_3__iter_value = NULL;

    CHECK_OBJECT( (PyObject *)tmp_for_loop_3__for_iterator );
    Py_DECREF( tmp_for_loop_3__for_iterator );
    tmp_for_loop_3__for_iterator = NULL;

    CHECK_OBJECT( var_args );
    tmp_return_value = var_args;
    Py_INCREF( tmp_return_value );
    goto try_return_handler_1;
    // tried codes exits in all cases
    NUITKA_CANNOT_GET_HERE( subprocess$$$function_16__args_from_interpreter_flags );
    return NULL;
    // Return handler code:
    try_return_handler_1:;
    CHECK_OBJECT( (PyObject *)var_flag_opt_map );
    Py_DECREF( var_flag_opt_map );
    var_flag_opt_map = NULL;

    CHECK_OBJECT( (PyObject *)var_args );
    Py_DECREF( var_args );
    var_args = NULL;

    Py_XDECREF( var_flag );
    var_flag = NULL;

    Py_XDECREF( var_opt );
    var_opt = NULL;

    Py_XDECREF( var_v );
    var_v = NULL;

    CHECK_OBJECT( (PyObject *)var_warnopts );
    Py_DECREF( var_warnopts );
    var_warnopts = NULL;

    CHECK_OBJECT( (PyObject *)var_bytes_warning );
    Py_DECREF( var_bytes_warning );
    var_bytes_warning = NULL;

    CHECK_OBJECT( (PyObject *)var_xoptions );
    Py_DECREF( var_xoptions );
    var_xoptions = NULL;

    Py_XDECREF( var_value );
    var_value = NULL;

    Py_XDECREF( var_arg );
    var_arg = NULL;

    goto function_return_exit;
    // Exception handler code:
    try_except_handler_1:;
    exception_keeper_type_6 = exception_type;
    exception_keeper_value_6 = exception_value;
    exception_keeper_tb_6 = exception_tb;
    exception_keeper_lineno_6 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    CHECK_OBJECT( (PyObject *)var_flag_opt_map );
    Py_DECREF( var_flag_opt_map );
    var_flag_opt_map = NULL;

    Py_XDECREF( var_args );
    var_args = NULL;

    Py_XDECREF( var_flag );
    var_flag = NULL;

    Py_XDECREF( var_opt );
    var_opt = NULL;

    Py_XDECREF( var_v );
    var_v = NULL;

    Py_XDECREF( var_warnopts );
    var_warnopts = NULL;

    Py_XDECREF( var_bytes_warning );
    var_bytes_warning = NULL;

    Py_XDECREF( var_xoptions );
    var_xoptions = NULL;

    Py_XDECREF( var_value );
    var_value = NULL;

    Py_XDECREF( var_arg );
    var_arg = NULL;

    // Re-raise.
    exception_type = exception_keeper_type_6;
    exception_value = exception_keeper_value_6;
    exception_tb = exception_keeper_tb_6;
    exception_lineno = exception_keeper_lineno_6;

    goto function_exception_exit;
    // End of try:

    // Return statement must have exited already.
    NUITKA_CANNOT_GET_HERE( subprocess$$$function_16__args_from_interpreter_flags );
    return NULL;

function_exception_exit:
    assert( exception_type );
    RESTORE_ERROR_OCCURRED( exception_type, exception_value, exception_tb );

    return NULL;

function_return_exit:
   // Function cleanup code if any.


   // Actual function exit with return value, making sure we did not make
   // the error status worse despite non-NULL return.
   CHECK_OBJECT( tmp_return_value );
   assert( had_error || !ERROR_OCCURRED() );
   return tmp_return_value;
}


static PyObject *impl_subprocess$$$function_17_call( struct Nuitka_FunctionObject const *self, PyObject **python_pars )
{
    // Preserve error status for checks
#ifndef __NUITKA_NO_ASSERT__
    NUITKA_MAY_BE_UNUSED bool had_error = ERROR_OCCURRED();
#endif

    // Local variable declarations.
    PyObject *par_timeout = python_pars[ 0 ];
    PyObject *par_popenargs = python_pars[ 1 ];
    PyObject *par_kwargs = python_pars[ 2 ];
    PyObject *var_p = NULL;
    PyObject *tmp_with_1__enter = NULL;
    PyObject *tmp_with_1__exit = NULL;
    nuitka_bool tmp_with_1__indicator = NUITKA_BOOL_UNASSIGNED;
    PyObject *tmp_with_1__source = NULL;
    struct Nuitka_FrameObject *frame_88bdef2e440093790ddc6f18b2662761;
    NUITKA_MAY_BE_UNUSED char const *type_description_1 = NULL;
    PyObject *exception_type = NULL;
    PyObject *exception_value = NULL;
    PyTracebackObject *exception_tb = NULL;
    NUITKA_MAY_BE_UNUSED int exception_lineno = 0;
    PyObject *tmp_return_value = NULL;
    int tmp_res;
    PyObject *exception_keeper_type_1;
    PyObject *exception_keeper_value_1;
    PyTracebackObject *exception_keeper_tb_1;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_1;
    PyObject *exception_preserved_type_1;
    PyObject *exception_preserved_value_1;
    PyTracebackObject *exception_preserved_tb_1;
    bool tmp_result;
    PyObject *exception_keeper_type_2;
    PyObject *exception_keeper_value_2;
    PyTracebackObject *exception_keeper_tb_2;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_2;
    PyObject *exception_keeper_type_3;
    PyObject *exception_keeper_value_3;
    PyTracebackObject *exception_keeper_tb_3;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_3;
    PyObject *exception_preserved_type_2;
    PyObject *exception_preserved_value_2;
    PyTracebackObject *exception_preserved_tb_2;
    PyObject *exception_keeper_type_4;
    PyObject *exception_keeper_value_4;
    PyTracebackObject *exception_keeper_tb_4;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_4;
    PyObject *exception_keeper_type_5;
    PyObject *exception_keeper_value_5;
    PyTracebackObject *exception_keeper_tb_5;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_5;
    PyObject *exception_keeper_type_6;
    PyObject *exception_keeper_value_6;
    PyTracebackObject *exception_keeper_tb_6;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_6;
    static struct Nuitka_FrameObject *cache_frame_88bdef2e440093790ddc6f18b2662761 = NULL;
    PyObject *exception_keeper_type_7;
    PyObject *exception_keeper_value_7;
    PyTracebackObject *exception_keeper_tb_7;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_7;

    // Actual function body.
    // Tried code:
    MAKE_OR_REUSE_FRAME( cache_frame_88bdef2e440093790ddc6f18b2662761, codeobj_88bdef2e440093790ddc6f18b2662761, module_subprocess, sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *) );
    frame_88bdef2e440093790ddc6f18b2662761 = cache_frame_88bdef2e440093790ddc6f18b2662761;

    // Push the new frame as the currently active one.
    pushFrameStack( frame_88bdef2e440093790ddc6f18b2662761 );

    // Mark the frame object as in use, ref count 1 will be up for reuse.
    assert( Py_REFCNT( frame_88bdef2e440093790ddc6f18b2662761 ) == 2 ); // Frame stack

    // Framed code:
    // Tried code:
    {
        PyObject *tmp_assign_source_1;
        PyObject *tmp_dircall_arg1_1;
        PyObject *tmp_mvar_value_1;
        PyObject *tmp_dircall_arg2_1;
        PyObject *tmp_dircall_arg3_1;
        tmp_mvar_value_1 = GET_STRING_DICT_VALUE( moduledict_subprocess, (Nuitka_StringObject *)const_str_plain_Popen );

        if (unlikely( tmp_mvar_value_1 == NULL ))
        {
            tmp_mvar_value_1 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_Popen );
        }

        if ( tmp_mvar_value_1 == NULL )
        {

            exception_type = PyExc_NameError;
            Py_INCREF( exception_type );
            exception_value = PyUnicode_FromFormat( "name '%s' is not defined", "Popen" );
            exception_tb = NULL;
            NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
            CHAIN_EXCEPTION( exception_value );

            exception_lineno = 323;
            type_description_1 = "oooo";
            goto try_except_handler_2;
        }

        tmp_dircall_arg1_1 = tmp_mvar_value_1;
        CHECK_OBJECT( par_popenargs );
        tmp_dircall_arg2_1 = par_popenargs;
        CHECK_OBJECT( par_kwargs );
        tmp_dircall_arg3_1 = par_kwargs;
        Py_INCREF( tmp_dircall_arg1_1 );
        Py_INCREF( tmp_dircall_arg2_1 );
        Py_INCREF( tmp_dircall_arg3_1 );

        {
            PyObject *dir_call_args[] = {tmp_dircall_arg1_1, tmp_dircall_arg2_1, tmp_dircall_arg3_1};
            tmp_assign_source_1 = impl___internal__$$$function_5_complex_call_helper_star_list_star_dict( dir_call_args );
        }
        if ( tmp_assign_source_1 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 323;
            type_description_1 = "oooo";
            goto try_except_handler_2;
        }
        assert( tmp_with_1__source == NULL );
        tmp_with_1__source = tmp_assign_source_1;
    }
    {
        PyObject *tmp_assign_source_2;
        PyObject *tmp_called_name_1;
        PyObject *tmp_source_name_1;
        CHECK_OBJECT( tmp_with_1__source );
        tmp_source_name_1 = tmp_with_1__source;
        tmp_called_name_1 = LOOKUP_SPECIAL( tmp_source_name_1, const_str_plain___enter__ );
        if ( tmp_called_name_1 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 323;
            type_description_1 = "oooo";
            goto try_except_handler_2;
        }
        frame_88bdef2e440093790ddc6f18b2662761->m_frame.f_lineno = 323;
        tmp_assign_source_2 = CALL_FUNCTION_NO_ARGS( tmp_called_name_1 );
        Py_DECREF( tmp_called_name_1 );
        if ( tmp_assign_source_2 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 323;
            type_description_1 = "oooo";
            goto try_except_handler_2;
        }
        assert( tmp_with_1__enter == NULL );
        tmp_with_1__enter = tmp_assign_source_2;
    }
    {
        PyObject *tmp_assign_source_3;
        PyObject *tmp_source_name_2;
        CHECK_OBJECT( tmp_with_1__source );
        tmp_source_name_2 = tmp_with_1__source;
        tmp_assign_source_3 = LOOKUP_SPECIAL( tmp_source_name_2, const_str_plain___exit__ );
        if ( tmp_assign_source_3 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 323;
            type_description_1 = "oooo";
            goto try_except_handler_2;
        }
        assert( tmp_with_1__exit == NULL );
        tmp_with_1__exit = tmp_assign_source_3;
    }
    {
        nuitka_bool tmp_assign_source_4;
        tmp_assign_source_4 = NUITKA_BOOL_TRUE;
        tmp_with_1__indicator = tmp_assign_source_4;
    }
    {
        PyObject *tmp_assign_source_5;
        CHECK_OBJECT( tmp_with_1__enter );
        tmp_assign_source_5 = tmp_with_1__enter;
        assert( var_p == NULL );
        Py_INCREF( tmp_assign_source_5 );
        var_p = tmp_assign_source_5;
    }
    // Tried code:
    // Tried code:
    // Tried code:
    {
        PyObject *tmp_called_name_2;
        PyObject *tmp_source_name_3;
        PyObject *tmp_kw_name_1;
        PyObject *tmp_dict_key_1;
        PyObject *tmp_dict_value_1;
        CHECK_OBJECT( var_p );
        tmp_source_name_3 = var_p;
        tmp_called_name_2 = LOOKUP_ATTRIBUTE( tmp_source_name_3, const_str_plain_wait );
        if ( tmp_called_name_2 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 325;
            type_description_1 = "oooo";
            goto try_except_handler_5;
        }
        tmp_dict_key_1 = const_str_plain_timeout;
        CHECK_OBJECT( par_timeout );
        tmp_dict_value_1 = par_timeout;
        tmp_kw_name_1 = _PyDict_NewPresized( 1 );
        tmp_res = PyDict_SetItem( tmp_kw_name_1, tmp_dict_key_1, tmp_dict_value_1 );
        assert( !(tmp_res != 0) );
        frame_88bdef2e440093790ddc6f18b2662761->m_frame.f_lineno = 325;
        tmp_return_value = CALL_FUNCTION_WITH_KEYARGS( tmp_called_name_2, tmp_kw_name_1 );
        Py_DECREF( tmp_called_name_2 );
        Py_DECREF( tmp_kw_name_1 );
        if ( tmp_return_value == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 325;
            type_description_1 = "oooo";
            goto try_except_handler_5;
        }
        goto try_return_handler_3;
    }
    // tried codes exits in all cases
    NUITKA_CANNOT_GET_HERE( subprocess$$$function_17_call );
    return NULL;
    // Exception handler code:
    try_except_handler_5:;
    exception_keeper_type_1 = exception_type;
    exception_keeper_value_1 = exception_value;
    exception_keeper_tb_1 = exception_tb;
    exception_keeper_lineno_1 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    // Preserve existing published exception.
    exception_preserved_type_1 = EXC_TYPE(PyThreadState_GET());
    Py_XINCREF( exception_preserved_type_1 );
    exception_preserved_value_1 = EXC_VALUE(PyThreadState_GET());
    Py_XINCREF( exception_preserved_value_1 );
    exception_preserved_tb_1 = (PyTracebackObject *)EXC_TRACEBACK(PyThreadState_GET());
    Py_XINCREF( exception_preserved_tb_1 );

    if ( exception_keeper_tb_1 == NULL )
    {
        exception_keeper_tb_1 = MAKE_TRACEBACK( frame_88bdef2e440093790ddc6f18b2662761, exception_keeper_lineno_1 );
    }
    else if ( exception_keeper_lineno_1 != 0 )
    {
        exception_keeper_tb_1 = ADD_TRACEBACK( exception_keeper_tb_1, frame_88bdef2e440093790ddc6f18b2662761, exception_keeper_lineno_1 );
    }

    NORMALIZE_EXCEPTION( &exception_keeper_type_1, &exception_keeper_value_1, &exception_keeper_tb_1 );
    PyException_SetTraceback( exception_keeper_value_1, (PyObject *)exception_keeper_tb_1 );
    PUBLISH_EXCEPTION( &exception_keeper_type_1, &exception_keeper_value_1, &exception_keeper_tb_1 );
    // Tried code:
    {
        PyObject *tmp_called_instance_1;
        PyObject *tmp_call_result_1;
        CHECK_OBJECT( var_p );
        tmp_called_instance_1 = var_p;
        frame_88bdef2e440093790ddc6f18b2662761->m_frame.f_lineno = 327;
        tmp_call_result_1 = CALL_METHOD_NO_ARGS( tmp_called_instance_1, const_str_plain_kill );
        if ( tmp_call_result_1 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 327;
            type_description_1 = "oooo";
            goto try_except_handler_6;
        }
        Py_DECREF( tmp_call_result_1 );
    }
    tmp_result = RERAISE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
    if (unlikely( tmp_result == false ))
    {
        exception_lineno = 329;
    }

    if (exception_tb && exception_tb->tb_frame == &frame_88bdef2e440093790ddc6f18b2662761->m_frame) frame_88bdef2e440093790ddc6f18b2662761->m_frame.f_lineno = exception_tb->tb_lineno;
    type_description_1 = "oooo";
    goto try_except_handler_6;
    // tried codes exits in all cases
    NUITKA_CANNOT_GET_HERE( subprocess$$$function_17_call );
    return NULL;
    // Exception handler code:
    try_except_handler_6:;
    exception_keeper_type_2 = exception_type;
    exception_keeper_value_2 = exception_value;
    exception_keeper_tb_2 = exception_tb;
    exception_keeper_lineno_2 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    // Restore previous exception.
    SET_CURRENT_EXCEPTION( exception_preserved_type_1, exception_preserved_value_1, exception_preserved_tb_1 );
    // Re-raise.
    exception_type = exception_keeper_type_2;
    exception_value = exception_keeper_value_2;
    exception_tb = exception_keeper_tb_2;
    exception_lineno = exception_keeper_lineno_2;

    goto try_except_handler_4;
    // End of try:
    // End of try:
    // tried codes exits in all cases
    NUITKA_CANNOT_GET_HERE( subprocess$$$function_17_call );
    return NULL;
    // Exception handler code:
    try_except_handler_4:;
    exception_keeper_type_3 = exception_type;
    exception_keeper_value_3 = exception_value;
    exception_keeper_tb_3 = exception_tb;
    exception_keeper_lineno_3 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    // Preserve existing published exception.
    exception_preserved_type_2 = EXC_TYPE(PyThreadState_GET());
    Py_XINCREF( exception_preserved_type_2 );
    exception_preserved_value_2 = EXC_VALUE(PyThreadState_GET());
    Py_XINCREF( exception_preserved_value_2 );
    exception_preserved_tb_2 = (PyTracebackObject *)EXC_TRACEBACK(PyThreadState_GET());
    Py_XINCREF( exception_preserved_tb_2 );

    if ( exception_keeper_tb_3 == NULL )
    {
        exception_keeper_tb_3 = MAKE_TRACEBACK( frame_88bdef2e440093790ddc6f18b2662761, exception_keeper_lineno_3 );
    }
    else if ( exception_keeper_lineno_3 != 0 )
    {
        exception_keeper_tb_3 = ADD_TRACEBACK( exception_keeper_tb_3, frame_88bdef2e440093790ddc6f18b2662761, exception_keeper_lineno_3 );
    }

    NORMALIZE_EXCEPTION( &exception_keeper_type_3, &exception_keeper_value_3, &exception_keeper_tb_3 );
    PyException_SetTraceback( exception_keeper_value_3, (PyObject *)exception_keeper_tb_3 );
    PUBLISH_EXCEPTION( &exception_keeper_type_3, &exception_keeper_value_3, &exception_keeper_tb_3 );
    // Tried code:
    {
        nuitka_bool tmp_condition_result_1;
        PyObject *tmp_compexpr_left_1;
        PyObject *tmp_compexpr_right_1;
        tmp_compexpr_left_1 = EXC_TYPE(PyThreadState_GET());
        tmp_compexpr_right_1 = PyExc_BaseException;
        tmp_res = EXCEPTION_MATCH_BOOL( tmp_compexpr_left_1, tmp_compexpr_right_1 );
        if ( tmp_res == -1 )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 323;
            type_description_1 = "oooo";
            goto try_except_handler_7;
        }
        tmp_condition_result_1 = ( tmp_res != 0 ) ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
        if ( tmp_condition_result_1 == NUITKA_BOOL_TRUE )
        {
            goto branch_yes_1;
        }
        else
        {
            goto branch_no_1;
        }
        branch_yes_1:;
        {
            nuitka_bool tmp_assign_source_6;
            tmp_assign_source_6 = NUITKA_BOOL_FALSE;
            tmp_with_1__indicator = tmp_assign_source_6;
        }
        {
            nuitka_bool tmp_condition_result_2;
            PyObject *tmp_operand_name_1;
            PyObject *tmp_called_name_3;
            PyObject *tmp_args_element_name_1;
            PyObject *tmp_args_element_name_2;
            PyObject *tmp_args_element_name_3;
            CHECK_OBJECT( tmp_with_1__exit );
            tmp_called_name_3 = tmp_with_1__exit;
            tmp_args_element_name_1 = EXC_TYPE(PyThreadState_GET());
            tmp_args_element_name_2 = EXC_VALUE(PyThreadState_GET());
            tmp_args_element_name_3 = EXC_TRACEBACK(PyThreadState_GET());
            frame_88bdef2e440093790ddc6f18b2662761->m_frame.f_lineno = 323;
            {
                PyObject *call_args[] = { tmp_args_element_name_1, tmp_args_element_name_2, tmp_args_element_name_3 };
                tmp_operand_name_1 = CALL_FUNCTION_WITH_ARGS3( tmp_called_name_3, call_args );
            }

            if ( tmp_operand_name_1 == NULL )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 323;
                type_description_1 = "oooo";
                goto try_except_handler_7;
            }
            tmp_res = CHECK_IF_TRUE( tmp_operand_name_1 );
            Py_DECREF( tmp_operand_name_1 );
            if ( tmp_res == -1 )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 323;
                type_description_1 = "oooo";
                goto try_except_handler_7;
            }
            tmp_condition_result_2 = ( tmp_res == 0 ) ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
            if ( tmp_condition_result_2 == NUITKA_BOOL_TRUE )
            {
                goto branch_yes_2;
            }
            else
            {
                goto branch_no_2;
            }
            branch_yes_2:;
            tmp_result = RERAISE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
            if (unlikely( tmp_result == false ))
            {
                exception_lineno = 323;
            }

            if (exception_tb && exception_tb->tb_frame == &frame_88bdef2e440093790ddc6f18b2662761->m_frame) frame_88bdef2e440093790ddc6f18b2662761->m_frame.f_lineno = exception_tb->tb_lineno;
            type_description_1 = "oooo";
            goto try_except_handler_7;
            branch_no_2:;
        }
        goto branch_end_1;
        branch_no_1:;
        tmp_result = RERAISE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
        if (unlikely( tmp_result == false ))
        {
            exception_lineno = 323;
        }

        if (exception_tb && exception_tb->tb_frame == &frame_88bdef2e440093790ddc6f18b2662761->m_frame) frame_88bdef2e440093790ddc6f18b2662761->m_frame.f_lineno = exception_tb->tb_lineno;
        type_description_1 = "oooo";
        goto try_except_handler_7;
        branch_end_1:;
    }
    goto try_end_1;
    // Exception handler code:
    try_except_handler_7:;
    exception_keeper_type_4 = exception_type;
    exception_keeper_value_4 = exception_value;
    exception_keeper_tb_4 = exception_tb;
    exception_keeper_lineno_4 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    // Restore previous exception.
    SET_CURRENT_EXCEPTION( exception_preserved_type_2, exception_preserved_value_2, exception_preserved_tb_2 );
    // Re-raise.
    exception_type = exception_keeper_type_4;
    exception_value = exception_keeper_value_4;
    exception_tb = exception_keeper_tb_4;
    exception_lineno = exception_keeper_lineno_4;

    goto try_except_handler_3;
    // End of try:
    try_end_1:;
    // Restore previous exception.
    SET_CURRENT_EXCEPTION( exception_preserved_type_2, exception_preserved_value_2, exception_preserved_tb_2 );
    goto try_end_2;
    // exception handler codes exits in all cases
    NUITKA_CANNOT_GET_HERE( subprocess$$$function_17_call );
    return NULL;
    // End of try:
    try_end_2:;
    goto try_end_3;
    // Return handler code:
    try_return_handler_3:;
    {
        PyObject *tmp_called_name_4;
        PyObject *tmp_call_result_2;
        CHECK_OBJECT( tmp_with_1__exit );
        tmp_called_name_4 = tmp_with_1__exit;
        frame_88bdef2e440093790ddc6f18b2662761->m_frame.f_lineno = 323;
        tmp_call_result_2 = CALL_FUNCTION_WITH_ARGS3( tmp_called_name_4, &PyTuple_GET_ITEM( const_tuple_none_none_none_tuple, 0 ) );

        if ( tmp_call_result_2 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 323;
            type_description_1 = "oooo";
            goto try_except_handler_2;
        }
        Py_DECREF( tmp_call_result_2 );
    }
    goto try_return_handler_2;
    // Exception handler code:
    try_except_handler_3:;
    exception_keeper_type_5 = exception_type;
    exception_keeper_value_5 = exception_value;
    exception_keeper_tb_5 = exception_tb;
    exception_keeper_lineno_5 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    {
        nuitka_bool tmp_condition_result_3;
        nuitka_bool tmp_compexpr_left_2;
        nuitka_bool tmp_compexpr_right_2;
        assert( tmp_with_1__indicator != NUITKA_BOOL_UNASSIGNED);
        tmp_compexpr_left_2 = tmp_with_1__indicator;
        tmp_compexpr_right_2 = NUITKA_BOOL_TRUE;
        tmp_condition_result_3 = ( tmp_compexpr_left_2 == tmp_compexpr_right_2 ) ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
        if ( tmp_condition_result_3 == NUITKA_BOOL_TRUE )
        {
            goto branch_yes_3;
        }
        else
        {
            goto branch_no_3;
        }
        branch_yes_3:;
        {
            PyObject *tmp_called_name_5;
            PyObject *tmp_call_result_3;
            CHECK_OBJECT( tmp_with_1__exit );
            tmp_called_name_5 = tmp_with_1__exit;
            frame_88bdef2e440093790ddc6f18b2662761->m_frame.f_lineno = 323;
            tmp_call_result_3 = CALL_FUNCTION_WITH_ARGS3( tmp_called_name_5, &PyTuple_GET_ITEM( const_tuple_none_none_none_tuple, 0 ) );

            if ( tmp_call_result_3 == NULL )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );

                Py_DECREF( exception_keeper_type_5 );
                Py_XDECREF( exception_keeper_value_5 );
                Py_XDECREF( exception_keeper_tb_5 );

                exception_lineno = 323;
                type_description_1 = "oooo";
                goto try_except_handler_2;
            }
            Py_DECREF( tmp_call_result_3 );
        }
        branch_no_3:;
    }
    // Re-raise.
    exception_type = exception_keeper_type_5;
    exception_value = exception_keeper_value_5;
    exception_tb = exception_keeper_tb_5;
    exception_lineno = exception_keeper_lineno_5;

    goto try_except_handler_2;
    // End of try:
    try_end_3:;
    {
        nuitka_bool tmp_condition_result_4;
        nuitka_bool tmp_compexpr_left_3;
        nuitka_bool tmp_compexpr_right_3;
        assert( tmp_with_1__indicator != NUITKA_BOOL_UNASSIGNED);
        tmp_compexpr_left_3 = tmp_with_1__indicator;
        tmp_compexpr_right_3 = NUITKA_BOOL_TRUE;
        tmp_condition_result_4 = ( tmp_compexpr_left_3 == tmp_compexpr_right_3 ) ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
        if ( tmp_condition_result_4 == NUITKA_BOOL_TRUE )
        {
            goto branch_yes_4;
        }
        else
        {
            goto branch_no_4;
        }
        branch_yes_4:;
        {
            PyObject *tmp_called_name_6;
            PyObject *tmp_call_result_4;
            CHECK_OBJECT( tmp_with_1__exit );
            tmp_called_name_6 = tmp_with_1__exit;
            frame_88bdef2e440093790ddc6f18b2662761->m_frame.f_lineno = 323;
            tmp_call_result_4 = CALL_FUNCTION_WITH_ARGS3( tmp_called_name_6, &PyTuple_GET_ITEM( const_tuple_none_none_none_tuple, 0 ) );

            if ( tmp_call_result_4 == NULL )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 323;
                type_description_1 = "oooo";
                goto try_except_handler_2;
            }
            Py_DECREF( tmp_call_result_4 );
        }
        branch_no_4:;
    }
    goto try_end_4;
    // Return handler code:
    try_return_handler_2:;
    CHECK_OBJECT( (PyObject *)tmp_with_1__source );
    Py_DECREF( tmp_with_1__source );
    tmp_with_1__source = NULL;

    CHECK_OBJECT( (PyObject *)tmp_with_1__enter );
    Py_DECREF( tmp_with_1__enter );
    tmp_with_1__enter = NULL;

    CHECK_OBJECT( (PyObject *)tmp_with_1__exit );
    Py_DECREF( tmp_with_1__exit );
    tmp_with_1__exit = NULL;

    goto frame_return_exit_1;
    // Exception handler code:
    try_except_handler_2:;
    exception_keeper_type_6 = exception_type;
    exception_keeper_value_6 = exception_value;
    exception_keeper_tb_6 = exception_tb;
    exception_keeper_lineno_6 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    Py_XDECREF( tmp_with_1__source );
    tmp_with_1__source = NULL;

    Py_XDECREF( tmp_with_1__enter );
    tmp_with_1__enter = NULL;

    Py_XDECREF( tmp_with_1__exit );
    tmp_with_1__exit = NULL;

    // Re-raise.
    exception_type = exception_keeper_type_6;
    exception_value = exception_keeper_value_6;
    exception_tb = exception_keeper_tb_6;
    exception_lineno = exception_keeper_lineno_6;

    goto frame_exception_exit_1;
    // End of try:
    try_end_4:;

#if 0
    RESTORE_FRAME_EXCEPTION( frame_88bdef2e440093790ddc6f18b2662761 );
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto frame_no_exception_1;

    frame_return_exit_1:;
#if 0
    RESTORE_FRAME_EXCEPTION( frame_88bdef2e440093790ddc6f18b2662761 );
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto try_return_handler_1;

    frame_exception_exit_1:;

#if 0
    RESTORE_FRAME_EXCEPTION( frame_88bdef2e440093790ddc6f18b2662761 );
#endif

    if ( exception_tb == NULL )
    {
        exception_tb = MAKE_TRACEBACK( frame_88bdef2e440093790ddc6f18b2662761, exception_lineno );
    }
    else if ( exception_tb->tb_frame != &frame_88bdef2e440093790ddc6f18b2662761->m_frame )
    {
        exception_tb = ADD_TRACEBACK( exception_tb, frame_88bdef2e440093790ddc6f18b2662761, exception_lineno );
    }

    // Attachs locals to frame if any.
    Nuitka_Frame_AttachLocals(
        (struct Nuitka_FrameObject *)frame_88bdef2e440093790ddc6f18b2662761,
        type_description_1,
        par_timeout,
        par_popenargs,
        par_kwargs,
        var_p
    );


    // Release cached frame.
    if ( frame_88bdef2e440093790ddc6f18b2662761 == cache_frame_88bdef2e440093790ddc6f18b2662761 )
    {
        Py_DECREF( frame_88bdef2e440093790ddc6f18b2662761 );
    }
    cache_frame_88bdef2e440093790ddc6f18b2662761 = NULL;

    assertFrameObject( frame_88bdef2e440093790ddc6f18b2662761 );

    // Put the previous frame back on top.
    popFrameStack();

    // Return the error.
    goto try_except_handler_1;

    frame_no_exception_1:;
    CHECK_OBJECT( (PyObject *)tmp_with_1__source );
    Py_DECREF( tmp_with_1__source );
    tmp_with_1__source = NULL;

    CHECK_OBJECT( (PyObject *)tmp_with_1__enter );
    Py_DECREF( tmp_with_1__enter );
    tmp_with_1__enter = NULL;

    CHECK_OBJECT( (PyObject *)tmp_with_1__exit );
    Py_DECREF( tmp_with_1__exit );
    tmp_with_1__exit = NULL;

    tmp_return_value = Py_None;
    Py_INCREF( tmp_return_value );
    goto try_return_handler_1;
    // tried codes exits in all cases
    NUITKA_CANNOT_GET_HERE( subprocess$$$function_17_call );
    return NULL;
    // Return handler code:
    try_return_handler_1:;
    CHECK_OBJECT( (PyObject *)par_timeout );
    Py_DECREF( par_timeout );
    par_timeout = NULL;

    CHECK_OBJECT( (PyObject *)par_popenargs );
    Py_DECREF( par_popenargs );
    par_popenargs = NULL;

    CHECK_OBJECT( (PyObject *)par_kwargs );
    Py_DECREF( par_kwargs );
    par_kwargs = NULL;

    CHECK_OBJECT( (PyObject *)var_p );
    Py_DECREF( var_p );
    var_p = NULL;

    goto function_return_exit;
    // Exception handler code:
    try_except_handler_1:;
    exception_keeper_type_7 = exception_type;
    exception_keeper_value_7 = exception_value;
    exception_keeper_tb_7 = exception_tb;
    exception_keeper_lineno_7 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    CHECK_OBJECT( (PyObject *)par_timeout );
    Py_DECREF( par_timeout );
    par_timeout = NULL;

    CHECK_OBJECT( (PyObject *)par_popenargs );
    Py_DECREF( par_popenargs );
    par_popenargs = NULL;

    CHECK_OBJECT( (PyObject *)par_kwargs );
    Py_DECREF( par_kwargs );
    par_kwargs = NULL;

    Py_XDECREF( var_p );
    var_p = NULL;

    // Re-raise.
    exception_type = exception_keeper_type_7;
    exception_value = exception_keeper_value_7;
    exception_tb = exception_keeper_tb_7;
    exception_lineno = exception_keeper_lineno_7;

    goto function_exception_exit;
    // End of try:

    // Return statement must have exited already.
    NUITKA_CANNOT_GET_HERE( subprocess$$$function_17_call );
    return NULL;

function_exception_exit:
    assert( exception_type );
    RESTORE_ERROR_OCCURRED( exception_type, exception_value, exception_tb );

    return NULL;

function_return_exit:
   // Function cleanup code if any.


   // Actual function exit with return value, making sure we did not make
   // the error status worse despite non-NULL return.
   CHECK_OBJECT( tmp_return_value );
   assert( had_error || !ERROR_OCCURRED() );
   return tmp_return_value;
}


static PyObject *impl_subprocess$$$function_18_check_call( struct Nuitka_FunctionObject const *self, PyObject **python_pars )
{
    // Preserve error status for checks
#ifndef __NUITKA_NO_ASSERT__
    NUITKA_MAY_BE_UNUSED bool had_error = ERROR_OCCURRED();
#endif

    // Local variable declarations.
    PyObject *par_popenargs = python_pars[ 0 ];
    PyObject *par_kwargs = python_pars[ 1 ];
    PyObject *var_retcode = NULL;
    PyObject *var_cmd = NULL;
    struct Nuitka_FrameObject *frame_0dd12d5ae3ba750cb624023663caa12b;
    NUITKA_MAY_BE_UNUSED char const *type_description_1 = NULL;
    PyObject *exception_type = NULL;
    PyObject *exception_value = NULL;
    PyTracebackObject *exception_tb = NULL;
    NUITKA_MAY_BE_UNUSED int exception_lineno = 0;
    static struct Nuitka_FrameObject *cache_frame_0dd12d5ae3ba750cb624023663caa12b = NULL;
    PyObject *tmp_return_value = NULL;
    PyObject *exception_keeper_type_1;
    PyObject *exception_keeper_value_1;
    PyTracebackObject *exception_keeper_tb_1;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_1;

    // Actual function body.
    // Tried code:
    MAKE_OR_REUSE_FRAME( cache_frame_0dd12d5ae3ba750cb624023663caa12b, codeobj_0dd12d5ae3ba750cb624023663caa12b, module_subprocess, sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *) );
    frame_0dd12d5ae3ba750cb624023663caa12b = cache_frame_0dd12d5ae3ba750cb624023663caa12b;

    // Push the new frame as the currently active one.
    pushFrameStack( frame_0dd12d5ae3ba750cb624023663caa12b );

    // Mark the frame object as in use, ref count 1 will be up for reuse.
    assert( Py_REFCNT( frame_0dd12d5ae3ba750cb624023663caa12b ) == 2 ); // Frame stack

    // Framed code:
    {
        PyObject *tmp_assign_source_1;
        PyObject *tmp_dircall_arg1_1;
        PyObject *tmp_mvar_value_1;
        PyObject *tmp_dircall_arg2_1;
        PyObject *tmp_dircall_arg3_1;
        tmp_mvar_value_1 = GET_STRING_DICT_VALUE( moduledict_subprocess, (Nuitka_StringObject *)const_str_plain_call );

        if (unlikely( tmp_mvar_value_1 == NULL ))
        {
            tmp_mvar_value_1 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_call );
        }

        if ( tmp_mvar_value_1 == NULL )
        {

            exception_type = PyExc_NameError;
            Py_INCREF( exception_type );
            exception_value = PyUnicode_FromFormat( "name '%s' is not defined", "call" );
            exception_tb = NULL;
            NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
            CHAIN_EXCEPTION( exception_value );

            exception_lineno = 342;
            type_description_1 = "oooo";
            goto frame_exception_exit_1;
        }

        tmp_dircall_arg1_1 = tmp_mvar_value_1;
        CHECK_OBJECT( par_popenargs );
        tmp_dircall_arg2_1 = par_popenargs;
        CHECK_OBJECT( par_kwargs );
        tmp_dircall_arg3_1 = par_kwargs;
        Py_INCREF( tmp_dircall_arg1_1 );
        Py_INCREF( tmp_dircall_arg2_1 );
        Py_INCREF( tmp_dircall_arg3_1 );

        {
            PyObject *dir_call_args[] = {tmp_dircall_arg1_1, tmp_dircall_arg2_1, tmp_dircall_arg3_1};
            tmp_assign_source_1 = impl___internal__$$$function_5_complex_call_helper_star_list_star_dict( dir_call_args );
        }
        if ( tmp_assign_source_1 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 342;
            type_description_1 = "oooo";
            goto frame_exception_exit_1;
        }
        assert( var_retcode == NULL );
        var_retcode = tmp_assign_source_1;
    }
    {
        nuitka_bool tmp_condition_result_1;
        int tmp_truth_name_1;
        CHECK_OBJECT( var_retcode );
        tmp_truth_name_1 = CHECK_IF_TRUE( var_retcode );
        if ( tmp_truth_name_1 == -1 )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 343;
            type_description_1 = "oooo";
            goto frame_exception_exit_1;
        }
        tmp_condition_result_1 = tmp_truth_name_1 == 1 ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
        if ( tmp_condition_result_1 == NUITKA_BOOL_TRUE )
        {
            goto branch_yes_1;
        }
        else
        {
            goto branch_no_1;
        }
        branch_yes_1:;
        {
            PyObject *tmp_assign_source_2;
            PyObject *tmp_called_instance_1;
            CHECK_OBJECT( par_kwargs );
            tmp_called_instance_1 = par_kwargs;
            frame_0dd12d5ae3ba750cb624023663caa12b->m_frame.f_lineno = 344;
            tmp_assign_source_2 = CALL_METHOD_WITH_ARGS1( tmp_called_instance_1, const_str_plain_get, &PyTuple_GET_ITEM( const_tuple_str_plain_args_tuple, 0 ) );

            if ( tmp_assign_source_2 == NULL )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 344;
                type_description_1 = "oooo";
                goto frame_exception_exit_1;
            }
            assert( var_cmd == NULL );
            var_cmd = tmp_assign_source_2;
        }
        {
            nuitka_bool tmp_condition_result_2;
            PyObject *tmp_compexpr_left_1;
            PyObject *tmp_compexpr_right_1;
            CHECK_OBJECT( var_cmd );
            tmp_compexpr_left_1 = var_cmd;
            tmp_compexpr_right_1 = Py_None;
            tmp_condition_result_2 = ( tmp_compexpr_left_1 == tmp_compexpr_right_1 ) ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
            if ( tmp_condition_result_2 == NUITKA_BOOL_TRUE )
            {
                goto branch_yes_2;
            }
            else
            {
                goto branch_no_2;
            }
            branch_yes_2:;
            {
                PyObject *tmp_assign_source_3;
                PyObject *tmp_subscribed_name_1;
                PyObject *tmp_subscript_name_1;
                CHECK_OBJECT( par_popenargs );
                tmp_subscribed_name_1 = par_popenargs;
                tmp_subscript_name_1 = const_int_0;
                tmp_assign_source_3 = LOOKUP_SUBSCRIPT_CONST( tmp_subscribed_name_1, tmp_subscript_name_1, 0 );
                if ( tmp_assign_source_3 == NULL )
                {
                    assert( ERROR_OCCURRED() );

                    FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                    exception_lineno = 346;
                    type_description_1 = "oooo";
                    goto frame_exception_exit_1;
                }
                {
                    PyObject *old = var_cmd;
                    assert( old != NULL );
                    var_cmd = tmp_assign_source_3;
                    Py_DECREF( old );
                }

            }
            branch_no_2:;
        }
        {
            PyObject *tmp_raise_type_1;
            PyObject *tmp_called_name_1;
            PyObject *tmp_mvar_value_2;
            PyObject *tmp_args_element_name_1;
            PyObject *tmp_args_element_name_2;
            tmp_mvar_value_2 = GET_STRING_DICT_VALUE( moduledict_subprocess, (Nuitka_StringObject *)const_str_plain_CalledProcessError );

            if (unlikely( tmp_mvar_value_2 == NULL ))
            {
                tmp_mvar_value_2 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_CalledProcessError );
            }

            if ( tmp_mvar_value_2 == NULL )
            {

                exception_type = PyExc_NameError;
                Py_INCREF( exception_type );
                exception_value = PyUnicode_FromFormat( "name '%s' is not defined", "CalledProcessError" );
                exception_tb = NULL;
                NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
                CHAIN_EXCEPTION( exception_value );

                exception_lineno = 347;
                type_description_1 = "oooo";
                goto frame_exception_exit_1;
            }

            tmp_called_name_1 = tmp_mvar_value_2;
            CHECK_OBJECT( var_retcode );
            tmp_args_element_name_1 = var_retcode;
            CHECK_OBJECT( var_cmd );
            tmp_args_element_name_2 = var_cmd;
            frame_0dd12d5ae3ba750cb624023663caa12b->m_frame.f_lineno = 347;
            {
                PyObject *call_args[] = { tmp_args_element_name_1, tmp_args_element_name_2 };
                tmp_raise_type_1 = CALL_FUNCTION_WITH_ARGS2( tmp_called_name_1, call_args );
            }

            if ( tmp_raise_type_1 == NULL )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 347;
                type_description_1 = "oooo";
                goto frame_exception_exit_1;
            }
            exception_type = tmp_raise_type_1;
            exception_lineno = 347;
            RAISE_EXCEPTION_WITH_TYPE( &exception_type, &exception_value, &exception_tb );
            type_description_1 = "oooo";
            goto frame_exception_exit_1;
        }
        branch_no_1:;
    }

#if 0
    RESTORE_FRAME_EXCEPTION( frame_0dd12d5ae3ba750cb624023663caa12b );
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto frame_no_exception_1;

    frame_exception_exit_1:;

#if 0
    RESTORE_FRAME_EXCEPTION( frame_0dd12d5ae3ba750cb624023663caa12b );
#endif

    if ( exception_tb == NULL )
    {
        exception_tb = MAKE_TRACEBACK( frame_0dd12d5ae3ba750cb624023663caa12b, exception_lineno );
    }
    else if ( exception_tb->tb_frame != &frame_0dd12d5ae3ba750cb624023663caa12b->m_frame )
    {
        exception_tb = ADD_TRACEBACK( exception_tb, frame_0dd12d5ae3ba750cb624023663caa12b, exception_lineno );
    }

    // Attachs locals to frame if any.
    Nuitka_Frame_AttachLocals(
        (struct Nuitka_FrameObject *)frame_0dd12d5ae3ba750cb624023663caa12b,
        type_description_1,
        par_popenargs,
        par_kwargs,
        var_retcode,
        var_cmd
    );


    // Release cached frame.
    if ( frame_0dd12d5ae3ba750cb624023663caa12b == cache_frame_0dd12d5ae3ba750cb624023663caa12b )
    {
        Py_DECREF( frame_0dd12d5ae3ba750cb624023663caa12b );
    }
    cache_frame_0dd12d5ae3ba750cb624023663caa12b = NULL;

    assertFrameObject( frame_0dd12d5ae3ba750cb624023663caa12b );

    // Put the previous frame back on top.
    popFrameStack();

    // Return the error.
    goto try_except_handler_1;

    frame_no_exception_1:;
    tmp_return_value = const_int_0;
    Py_INCREF( tmp_return_value );
    goto try_return_handler_1;
    // tried codes exits in all cases
    NUITKA_CANNOT_GET_HERE( subprocess$$$function_18_check_call );
    return NULL;
    // Return handler code:
    try_return_handler_1:;
    CHECK_OBJECT( (PyObject *)par_popenargs );
    Py_DECREF( par_popenargs );
    par_popenargs = NULL;

    CHECK_OBJECT( (PyObject *)par_kwargs );
    Py_DECREF( par_kwargs );
    par_kwargs = NULL;

    CHECK_OBJECT( (PyObject *)var_retcode );
    Py_DECREF( var_retcode );
    var_retcode = NULL;

    goto function_return_exit;
    // Exception handler code:
    try_except_handler_1:;
    exception_keeper_type_1 = exception_type;
    exception_keeper_value_1 = exception_value;
    exception_keeper_tb_1 = exception_tb;
    exception_keeper_lineno_1 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    CHECK_OBJECT( (PyObject *)par_popenargs );
    Py_DECREF( par_popenargs );
    par_popenargs = NULL;

    CHECK_OBJECT( (PyObject *)par_kwargs );
    Py_DECREF( par_kwargs );
    par_kwargs = NULL;

    Py_XDECREF( var_retcode );
    var_retcode = NULL;

    Py_XDECREF( var_cmd );
    var_cmd = NULL;

    // Re-raise.
    exception_type = exception_keeper_type_1;
    exception_value = exception_keeper_value_1;
    exception_tb = exception_keeper_tb_1;
    exception_lineno = exception_keeper_lineno_1;

    goto function_exception_exit;
    // End of try:

    // Return statement must have exited already.
    NUITKA_CANNOT_GET_HERE( subprocess$$$function_18_check_call );
    return NULL;

function_exception_exit:
    assert( exception_type );
    RESTORE_ERROR_OCCURRED( exception_type, exception_value, exception_tb );

    return NULL;

function_return_exit:
   // Function cleanup code if any.


   // Actual function exit with return value, making sure we did not make
   // the error status worse despite non-NULL return.
   CHECK_OBJECT( tmp_return_value );
   assert( had_error || !ERROR_OCCURRED() );
   return tmp_return_value;
}


static PyObject *impl_subprocess$$$function_19_check_output( struct Nuitka_FunctionObject const *self, PyObject **python_pars )
{
    // Preserve error status for checks
#ifndef __NUITKA_NO_ASSERT__
    NUITKA_MAY_BE_UNUSED bool had_error = ERROR_OCCURRED();
#endif

    // Local variable declarations.
    PyObject *par_timeout = python_pars[ 0 ];
    PyObject *par_popenargs = python_pars[ 1 ];
    PyObject *par_kwargs = python_pars[ 2 ];
    struct Nuitka_FrameObject *frame_ca16cf62941d8c38ddb7a8897aa86002;
    NUITKA_MAY_BE_UNUSED char const *type_description_1 = NULL;
    int tmp_res;
    PyObject *exception_type = NULL;
    PyObject *exception_value = NULL;
    PyTracebackObject *exception_tb = NULL;
    NUITKA_MAY_BE_UNUSED int exception_lineno = 0;
    bool tmp_result;
    PyObject *tmp_return_value = NULL;
    static struct Nuitka_FrameObject *cache_frame_ca16cf62941d8c38ddb7a8897aa86002 = NULL;
    PyObject *exception_keeper_type_1;
    PyObject *exception_keeper_value_1;
    PyTracebackObject *exception_keeper_tb_1;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_1;

    // Actual function body.
    // Tried code:
    MAKE_OR_REUSE_FRAME( cache_frame_ca16cf62941d8c38ddb7a8897aa86002, codeobj_ca16cf62941d8c38ddb7a8897aa86002, module_subprocess, sizeof(void *)+sizeof(void *)+sizeof(void *) );
    frame_ca16cf62941d8c38ddb7a8897aa86002 = cache_frame_ca16cf62941d8c38ddb7a8897aa86002;

    // Push the new frame as the currently active one.
    pushFrameStack( frame_ca16cf62941d8c38ddb7a8897aa86002 );

    // Mark the frame object as in use, ref count 1 will be up for reuse.
    assert( Py_REFCNT( frame_ca16cf62941d8c38ddb7a8897aa86002 ) == 2 ); // Frame stack

    // Framed code:
    {
        nuitka_bool tmp_condition_result_1;
        PyObject *tmp_compexpr_left_1;
        PyObject *tmp_compexpr_right_1;
        tmp_compexpr_left_1 = const_str_plain_stdout;
        CHECK_OBJECT( par_kwargs );
        tmp_compexpr_right_1 = par_kwargs;
        tmp_res = PySequence_Contains( tmp_compexpr_right_1, tmp_compexpr_left_1 );
        if ( tmp_res == -1 )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 386;
            type_description_1 = "ooo";
            goto frame_exception_exit_1;
        }
        tmp_condition_result_1 = ( tmp_res == 1 ) ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
        if ( tmp_condition_result_1 == NUITKA_BOOL_TRUE )
        {
            goto branch_yes_1;
        }
        else
        {
            goto branch_no_1;
        }
        branch_yes_1:;
        {
            PyObject *tmp_raise_type_1;
            PyObject *tmp_make_exception_arg_1;
            tmp_make_exception_arg_1 = const_str_digest_74856fc69b8683094c7bb7799fd12a5d;
            frame_ca16cf62941d8c38ddb7a8897aa86002->m_frame.f_lineno = 387;
            {
                PyObject *call_args[] = { tmp_make_exception_arg_1 };
                tmp_raise_type_1 = CALL_FUNCTION_WITH_ARGS1( PyExc_ValueError, call_args );
            }

            assert( !(tmp_raise_type_1 == NULL) );
            exception_type = tmp_raise_type_1;
            exception_lineno = 387;
            RAISE_EXCEPTION_WITH_TYPE( &exception_type, &exception_value, &exception_tb );
            type_description_1 = "ooo";
            goto frame_exception_exit_1;
        }
        branch_no_1:;
    }
    {
        nuitka_bool tmp_condition_result_2;
        int tmp_and_left_truth_1;
        nuitka_bool tmp_and_left_value_1;
        nuitka_bool tmp_and_right_value_1;
        PyObject *tmp_compexpr_left_2;
        PyObject *tmp_compexpr_right_2;
        PyObject *tmp_compexpr_left_3;
        PyObject *tmp_compexpr_right_3;
        PyObject *tmp_subscribed_name_1;
        PyObject *tmp_subscript_name_1;
        tmp_compexpr_left_2 = const_str_plain_input;
        CHECK_OBJECT( par_kwargs );
        tmp_compexpr_right_2 = par_kwargs;
        tmp_res = PySequence_Contains( tmp_compexpr_right_2, tmp_compexpr_left_2 );
        if ( tmp_res == -1 )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 389;
            type_description_1 = "ooo";
            goto frame_exception_exit_1;
        }
        tmp_and_left_value_1 = ( tmp_res == 1 ) ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
        tmp_and_left_truth_1 = tmp_and_left_value_1 == NUITKA_BOOL_TRUE ? 1 : 0;
        if ( tmp_and_left_truth_1 == 1 )
        {
            goto and_right_1;
        }
        else
        {
            goto and_left_1;
        }
        and_right_1:;
        CHECK_OBJECT( par_kwargs );
        tmp_subscribed_name_1 = par_kwargs;
        tmp_subscript_name_1 = const_str_plain_input;
        tmp_compexpr_left_3 = LOOKUP_SUBSCRIPT( tmp_subscribed_name_1, tmp_subscript_name_1 );
        if ( tmp_compexpr_left_3 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 389;
            type_description_1 = "ooo";
            goto frame_exception_exit_1;
        }
        tmp_compexpr_right_3 = Py_None;
        tmp_and_right_value_1 = ( tmp_compexpr_left_3 == tmp_compexpr_right_3 ) ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
        Py_DECREF( tmp_compexpr_left_3 );
        tmp_condition_result_2 = tmp_and_right_value_1;
        goto and_end_1;
        and_left_1:;
        tmp_condition_result_2 = tmp_and_left_value_1;
        and_end_1:;
        if ( tmp_condition_result_2 == NUITKA_BOOL_TRUE )
        {
            goto branch_yes_2;
        }
        else
        {
            goto branch_no_2;
        }
        branch_yes_2:;
        {
            PyObject *tmp_ass_subvalue_1;
            nuitka_bool tmp_condition_result_3;
            PyObject *tmp_called_instance_1;
            PyObject *tmp_call_result_1;
            int tmp_truth_name_1;
            PyObject *tmp_ass_subscribed_1;
            PyObject *tmp_ass_subscript_1;
            CHECK_OBJECT( par_kwargs );
            tmp_called_instance_1 = par_kwargs;
            frame_ca16cf62941d8c38ddb7a8897aa86002->m_frame.f_lineno = 392;
            tmp_call_result_1 = CALL_METHOD_WITH_ARGS2( tmp_called_instance_1, const_str_plain_get, &PyTuple_GET_ITEM( const_tuple_str_plain_universal_newlines_false_tuple, 0 ) );

            if ( tmp_call_result_1 == NULL )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 392;
                type_description_1 = "ooo";
                goto frame_exception_exit_1;
            }
            tmp_truth_name_1 = CHECK_IF_TRUE( tmp_call_result_1 );
            if ( tmp_truth_name_1 == -1 )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
                Py_DECREF( tmp_call_result_1 );

                exception_lineno = 392;
                type_description_1 = "ooo";
                goto frame_exception_exit_1;
            }
            tmp_condition_result_3 = tmp_truth_name_1 == 1 ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
            Py_DECREF( tmp_call_result_1 );
            if ( tmp_condition_result_3 == NUITKA_BOOL_TRUE )
            {
                goto condexpr_true_1;
            }
            else
            {
                goto condexpr_false_1;
            }
            condexpr_true_1:;
            tmp_ass_subvalue_1 = const_str_empty;
            goto condexpr_end_1;
            condexpr_false_1:;
            tmp_ass_subvalue_1 = const_bytes_empty;
            condexpr_end_1:;
            CHECK_OBJECT( par_kwargs );
            tmp_ass_subscribed_1 = par_kwargs;
            tmp_ass_subscript_1 = const_str_plain_input;
            tmp_result = SET_SUBSCRIPT( tmp_ass_subscribed_1, tmp_ass_subscript_1, tmp_ass_subvalue_1 );
            if ( tmp_result == false )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 392;
                type_description_1 = "ooo";
                goto frame_exception_exit_1;
            }
        }
        branch_no_2:;
    }
    {
        PyObject *tmp_source_name_1;
        PyObject *tmp_dircall_arg1_1;
        PyObject *tmp_mvar_value_1;
        PyObject *tmp_dircall_arg2_1;
        PyObject *tmp_dircall_arg3_1;
        PyObject *tmp_dict_key_1;
        PyObject *tmp_dict_value_1;
        PyObject *tmp_mvar_value_2;
        PyObject *tmp_dict_key_2;
        PyObject *tmp_dict_value_2;
        PyObject *tmp_dict_key_3;
        PyObject *tmp_dict_value_3;
        PyObject *tmp_dircall_arg4_1;
        tmp_mvar_value_1 = GET_STRING_DICT_VALUE( moduledict_subprocess, (Nuitka_StringObject *)const_str_plain_run );

        if (unlikely( tmp_mvar_value_1 == NULL ))
        {
            tmp_mvar_value_1 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_run );
        }

        if ( tmp_mvar_value_1 == NULL )
        {

            exception_type = PyExc_NameError;
            Py_INCREF( exception_type );
            exception_value = PyUnicode_FromFormat( "name '%s' is not defined", "run" );
            exception_tb = NULL;
            NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
            CHAIN_EXCEPTION( exception_value );

            exception_lineno = 394;
            type_description_1 = "ooo";
            goto frame_exception_exit_1;
        }

        tmp_dircall_arg1_1 = tmp_mvar_value_1;
        CHECK_OBJECT( par_popenargs );
        tmp_dircall_arg2_1 = par_popenargs;
        tmp_dict_key_1 = const_str_plain_stdout;
        tmp_mvar_value_2 = GET_STRING_DICT_VALUE( moduledict_subprocess, (Nuitka_StringObject *)const_str_plain_PIPE );

        if (unlikely( tmp_mvar_value_2 == NULL ))
        {
            tmp_mvar_value_2 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_PIPE );
        }

        if ( tmp_mvar_value_2 == NULL )
        {

            exception_type = PyExc_NameError;
            Py_INCREF( exception_type );
            exception_value = PyUnicode_FromFormat( "name '%s' is not defined", "PIPE" );
            exception_tb = NULL;
            NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
            CHAIN_EXCEPTION( exception_value );

            exception_lineno = 394;
            type_description_1 = "ooo";
            goto frame_exception_exit_1;
        }

        tmp_dict_value_1 = tmp_mvar_value_2;
        tmp_dircall_arg3_1 = _PyDict_NewPresized( 3 );
        tmp_res = PyDict_SetItem( tmp_dircall_arg3_1, tmp_dict_key_1, tmp_dict_value_1 );
        assert( !(tmp_res != 0) );
        tmp_dict_key_2 = const_str_plain_timeout;
        CHECK_OBJECT( par_timeout );
        tmp_dict_value_2 = par_timeout;
        tmp_res = PyDict_SetItem( tmp_dircall_arg3_1, tmp_dict_key_2, tmp_dict_value_2 );
        assert( !(tmp_res != 0) );
        tmp_dict_key_3 = const_str_plain_check;
        tmp_dict_value_3 = Py_True;
        tmp_res = PyDict_SetItem( tmp_dircall_arg3_1, tmp_dict_key_3, tmp_dict_value_3 );
        assert( !(tmp_res != 0) );
        CHECK_OBJECT( par_kwargs );
        tmp_dircall_arg4_1 = par_kwargs;
        Py_INCREF( tmp_dircall_arg1_1 );
        Py_INCREF( tmp_dircall_arg2_1 );
        Py_INCREF( tmp_dircall_arg4_1 );

        {
            PyObject *dir_call_args[] = {tmp_dircall_arg1_1, tmp_dircall_arg2_1, tmp_dircall_arg3_1, tmp_dircall_arg4_1};
            tmp_source_name_1 = impl___internal__$$$function_10_complex_call_helper_keywords_star_list_star_dict( dir_call_args );
        }
        if ( tmp_source_name_1 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 394;
            type_description_1 = "ooo";
            goto frame_exception_exit_1;
        }
        tmp_return_value = LOOKUP_ATTRIBUTE( tmp_source_name_1, const_str_plain_stdout );
        Py_DECREF( tmp_source_name_1 );
        if ( tmp_return_value == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 394;
            type_description_1 = "ooo";
            goto frame_exception_exit_1;
        }
        goto frame_return_exit_1;
    }

#if 0
    RESTORE_FRAME_EXCEPTION( frame_ca16cf62941d8c38ddb7a8897aa86002 );
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto frame_no_exception_1;

    frame_return_exit_1:;
#if 0
    RESTORE_FRAME_EXCEPTION( frame_ca16cf62941d8c38ddb7a8897aa86002 );
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto try_return_handler_1;

    frame_exception_exit_1:;

#if 0
    RESTORE_FRAME_EXCEPTION( frame_ca16cf62941d8c38ddb7a8897aa86002 );
#endif

    if ( exception_tb == NULL )
    {
        exception_tb = MAKE_TRACEBACK( frame_ca16cf62941d8c38ddb7a8897aa86002, exception_lineno );
    }
    else if ( exception_tb->tb_frame != &frame_ca16cf62941d8c38ddb7a8897aa86002->m_frame )
    {
        exception_tb = ADD_TRACEBACK( exception_tb, frame_ca16cf62941d8c38ddb7a8897aa86002, exception_lineno );
    }

    // Attachs locals to frame if any.
    Nuitka_Frame_AttachLocals(
        (struct Nuitka_FrameObject *)frame_ca16cf62941d8c38ddb7a8897aa86002,
        type_description_1,
        par_timeout,
        par_popenargs,
        par_kwargs
    );


    // Release cached frame.
    if ( frame_ca16cf62941d8c38ddb7a8897aa86002 == cache_frame_ca16cf62941d8c38ddb7a8897aa86002 )
    {
        Py_DECREF( frame_ca16cf62941d8c38ddb7a8897aa86002 );
    }
    cache_frame_ca16cf62941d8c38ddb7a8897aa86002 = NULL;

    assertFrameObject( frame_ca16cf62941d8c38ddb7a8897aa86002 );

    // Put the previous frame back on top.
    popFrameStack();

    // Return the error.
    goto try_except_handler_1;

    frame_no_exception_1:;
    // tried codes exits in all cases
    NUITKA_CANNOT_GET_HERE( subprocess$$$function_19_check_output );
    return NULL;
    // Return handler code:
    try_return_handler_1:;
    CHECK_OBJECT( (PyObject *)par_timeout );
    Py_DECREF( par_timeout );
    par_timeout = NULL;

    CHECK_OBJECT( (PyObject *)par_popenargs );
    Py_DECREF( par_popenargs );
    par_popenargs = NULL;

    CHECK_OBJECT( (PyObject *)par_kwargs );
    Py_DECREF( par_kwargs );
    par_kwargs = NULL;

    goto function_return_exit;
    // Exception handler code:
    try_except_handler_1:;
    exception_keeper_type_1 = exception_type;
    exception_keeper_value_1 = exception_value;
    exception_keeper_tb_1 = exception_tb;
    exception_keeper_lineno_1 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    CHECK_OBJECT( (PyObject *)par_timeout );
    Py_DECREF( par_timeout );
    par_timeout = NULL;

    CHECK_OBJECT( (PyObject *)par_popenargs );
    Py_DECREF( par_popenargs );
    par_popenargs = NULL;

    CHECK_OBJECT( (PyObject *)par_kwargs );
    Py_DECREF( par_kwargs );
    par_kwargs = NULL;

    // Re-raise.
    exception_type = exception_keeper_type_1;
    exception_value = exception_keeper_value_1;
    exception_tb = exception_keeper_tb_1;
    exception_lineno = exception_keeper_lineno_1;

    goto function_exception_exit;
    // End of try:

    // Return statement must have exited already.
    NUITKA_CANNOT_GET_HERE( subprocess$$$function_19_check_output );
    return NULL;

function_exception_exit:
    assert( exception_type );
    RESTORE_ERROR_OCCURRED( exception_type, exception_value, exception_tb );

    return NULL;

function_return_exit:
   // Function cleanup code if any.


   // Actual function exit with return value, making sure we did not make
   // the error status worse despite non-NULL return.
   CHECK_OBJECT( tmp_return_value );
   assert( had_error || !ERROR_OCCURRED() );
   return tmp_return_value;
}


static PyObject *impl_subprocess$$$function_20___init__( struct Nuitka_FunctionObject const *self, PyObject **python_pars )
{
    // Preserve error status for checks
#ifndef __NUITKA_NO_ASSERT__
    NUITKA_MAY_BE_UNUSED bool had_error = ERROR_OCCURRED();
#endif

    // Local variable declarations.
    PyObject *par_self = python_pars[ 0 ];
    PyObject *par_args = python_pars[ 1 ];
    PyObject *par_returncode = python_pars[ 2 ];
    PyObject *par_stdout = python_pars[ 3 ];
    PyObject *par_stderr = python_pars[ 4 ];
    struct Nuitka_FrameObject *frame_7665585c959149b8e34fdc68aca32362;
    NUITKA_MAY_BE_UNUSED char const *type_description_1 = NULL;
    bool tmp_result;
    PyObject *exception_type = NULL;
    PyObject *exception_value = NULL;
    PyTracebackObject *exception_tb = NULL;
    NUITKA_MAY_BE_UNUSED int exception_lineno = 0;
    static struct Nuitka_FrameObject *cache_frame_7665585c959149b8e34fdc68aca32362 = NULL;
    PyObject *tmp_return_value = NULL;
    PyObject *exception_keeper_type_1;
    PyObject *exception_keeper_value_1;
    PyTracebackObject *exception_keeper_tb_1;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_1;

    // Actual function body.
    // Tried code:
    MAKE_OR_REUSE_FRAME( cache_frame_7665585c959149b8e34fdc68aca32362, codeobj_7665585c959149b8e34fdc68aca32362, module_subprocess, sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *) );
    frame_7665585c959149b8e34fdc68aca32362 = cache_frame_7665585c959149b8e34fdc68aca32362;

    // Push the new frame as the currently active one.
    pushFrameStack( frame_7665585c959149b8e34fdc68aca32362 );

    // Mark the frame object as in use, ref count 1 will be up for reuse.
    assert( Py_REFCNT( frame_7665585c959149b8e34fdc68aca32362 ) == 2 ); // Frame stack

    // Framed code:
    {
        PyObject *tmp_assattr_name_1;
        PyObject *tmp_assattr_target_1;
        CHECK_OBJECT( par_args );
        tmp_assattr_name_1 = par_args;
        CHECK_OBJECT( par_self );
        tmp_assattr_target_1 = par_self;
        tmp_result = SET_ATTRIBUTE( tmp_assattr_target_1, const_str_plain_args, tmp_assattr_name_1 );
        if ( tmp_result == false )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 410;
            type_description_1 = "ooooo";
            goto frame_exception_exit_1;
        }
    }
    {
        PyObject *tmp_assattr_name_2;
        PyObject *tmp_assattr_target_2;
        CHECK_OBJECT( par_returncode );
        tmp_assattr_name_2 = par_returncode;
        CHECK_OBJECT( par_self );
        tmp_assattr_target_2 = par_self;
        tmp_result = SET_ATTRIBUTE( tmp_assattr_target_2, const_str_plain_returncode, tmp_assattr_name_2 );
        if ( tmp_result == false )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 411;
            type_description_1 = "ooooo";
            goto frame_exception_exit_1;
        }
    }
    {
        PyObject *tmp_assattr_name_3;
        PyObject *tmp_assattr_target_3;
        CHECK_OBJECT( par_stdout );
        tmp_assattr_name_3 = par_stdout;
        CHECK_OBJECT( par_self );
        tmp_assattr_target_3 = par_self;
        tmp_result = SET_ATTRIBUTE( tmp_assattr_target_3, const_str_plain_stdout, tmp_assattr_name_3 );
        if ( tmp_result == false )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 412;
            type_description_1 = "ooooo";
            goto frame_exception_exit_1;
        }
    }
    {
        PyObject *tmp_assattr_name_4;
        PyObject *tmp_assattr_target_4;
        CHECK_OBJECT( par_stderr );
        tmp_assattr_name_4 = par_stderr;
        CHECK_OBJECT( par_self );
        tmp_assattr_target_4 = par_self;
        tmp_result = SET_ATTRIBUTE( tmp_assattr_target_4, const_str_plain_stderr, tmp_assattr_name_4 );
        if ( tmp_result == false )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 413;
            type_description_1 = "ooooo";
            goto frame_exception_exit_1;
        }
    }

#if 0
    RESTORE_FRAME_EXCEPTION( frame_7665585c959149b8e34fdc68aca32362 );
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto frame_no_exception_1;

    frame_exception_exit_1:;

#if 0
    RESTORE_FRAME_EXCEPTION( frame_7665585c959149b8e34fdc68aca32362 );
#endif

    if ( exception_tb == NULL )
    {
        exception_tb = MAKE_TRACEBACK( frame_7665585c959149b8e34fdc68aca32362, exception_lineno );
    }
    else if ( exception_tb->tb_frame != &frame_7665585c959149b8e34fdc68aca32362->m_frame )
    {
        exception_tb = ADD_TRACEBACK( exception_tb, frame_7665585c959149b8e34fdc68aca32362, exception_lineno );
    }

    // Attachs locals to frame if any.
    Nuitka_Frame_AttachLocals(
        (struct Nuitka_FrameObject *)frame_7665585c959149b8e34fdc68aca32362,
        type_description_1,
        par_self,
        par_args,
        par_returncode,
        par_stdout,
        par_stderr
    );


    // Release cached frame.
    if ( frame_7665585c959149b8e34fdc68aca32362 == cache_frame_7665585c959149b8e34fdc68aca32362 )
    {
        Py_DECREF( frame_7665585c959149b8e34fdc68aca32362 );
    }
    cache_frame_7665585c959149b8e34fdc68aca32362 = NULL;

    assertFrameObject( frame_7665585c959149b8e34fdc68aca32362 );

    // Put the previous frame back on top.
    popFrameStack();

    // Return the error.
    goto try_except_handler_1;

    frame_no_exception_1:;
    tmp_return_value = Py_None;
    Py_INCREF( tmp_return_value );
    goto try_return_handler_1;
    // tried codes exits in all cases
    NUITKA_CANNOT_GET_HERE( subprocess$$$function_20___init__ );
    return NULL;
    // Return handler code:
    try_return_handler_1:;
    CHECK_OBJECT( (PyObject *)par_self );
    Py_DECREF( par_self );
    par_self = NULL;

    CHECK_OBJECT( (PyObject *)par_args );
    Py_DECREF( par_args );
    par_args = NULL;

    CHECK_OBJECT( (PyObject *)par_returncode );
    Py_DECREF( par_returncode );
    par_returncode = NULL;

    CHECK_OBJECT( (PyObject *)par_stdout );
    Py_DECREF( par_stdout );
    par_stdout = NULL;

    CHECK_OBJECT( (PyObject *)par_stderr );
    Py_DECREF( par_stderr );
    par_stderr = NULL;

    goto function_return_exit;
    // Exception handler code:
    try_except_handler_1:;
    exception_keeper_type_1 = exception_type;
    exception_keeper_value_1 = exception_value;
    exception_keeper_tb_1 = exception_tb;
    exception_keeper_lineno_1 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    CHECK_OBJECT( (PyObject *)par_self );
    Py_DECREF( par_self );
    par_self = NULL;

    CHECK_OBJECT( (PyObject *)par_args );
    Py_DECREF( par_args );
    par_args = NULL;

    CHECK_OBJECT( (PyObject *)par_returncode );
    Py_DECREF( par_returncode );
    par_returncode = NULL;

    CHECK_OBJECT( (PyObject *)par_stdout );
    Py_DECREF( par_stdout );
    par_stdout = NULL;

    CHECK_OBJECT( (PyObject *)par_stderr );
    Py_DECREF( par_stderr );
    par_stderr = NULL;

    // Re-raise.
    exception_type = exception_keeper_type_1;
    exception_value = exception_keeper_value_1;
    exception_tb = exception_keeper_tb_1;
    exception_lineno = exception_keeper_lineno_1;

    goto function_exception_exit;
    // End of try:

    // Return statement must have exited already.
    NUITKA_CANNOT_GET_HERE( subprocess$$$function_20___init__ );
    return NULL;

function_exception_exit:
    assert( exception_type );
    RESTORE_ERROR_OCCURRED( exception_type, exception_value, exception_tb );

    return NULL;

function_return_exit:
   // Function cleanup code if any.


   // Actual function exit with return value, making sure we did not make
   // the error status worse despite non-NULL return.
   CHECK_OBJECT( tmp_return_value );
   assert( had_error || !ERROR_OCCURRED() );
   return tmp_return_value;
}


static PyObject *impl_subprocess$$$function_21___repr__( struct Nuitka_FunctionObject const *self, PyObject **python_pars )
{
    // Preserve error status for checks
#ifndef __NUITKA_NO_ASSERT__
    NUITKA_MAY_BE_UNUSED bool had_error = ERROR_OCCURRED();
#endif

    // Local variable declarations.
    PyObject *par_self = python_pars[ 0 ];
    PyObject *var_args = NULL;
    struct Nuitka_FrameObject *frame_3a2b66c8ce864438c352c2c20c126501;
    NUITKA_MAY_BE_UNUSED char const *type_description_1 = NULL;
    PyObject *exception_type = NULL;
    PyObject *exception_value = NULL;
    PyTracebackObject *exception_tb = NULL;
    NUITKA_MAY_BE_UNUSED int exception_lineno = 0;
    PyObject *tmp_return_value = NULL;
    static struct Nuitka_FrameObject *cache_frame_3a2b66c8ce864438c352c2c20c126501 = NULL;
    PyObject *exception_keeper_type_1;
    PyObject *exception_keeper_value_1;
    PyTracebackObject *exception_keeper_tb_1;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_1;

    // Actual function body.
    // Tried code:
    MAKE_OR_REUSE_FRAME( cache_frame_3a2b66c8ce864438c352c2c20c126501, codeobj_3a2b66c8ce864438c352c2c20c126501, module_subprocess, sizeof(void *)+sizeof(void *) );
    frame_3a2b66c8ce864438c352c2c20c126501 = cache_frame_3a2b66c8ce864438c352c2c20c126501;

    // Push the new frame as the currently active one.
    pushFrameStack( frame_3a2b66c8ce864438c352c2c20c126501 );

    // Mark the frame object as in use, ref count 1 will be up for reuse.
    assert( Py_REFCNT( frame_3a2b66c8ce864438c352c2c20c126501 ) == 2 ); // Frame stack

    // Framed code:
    {
        PyObject *tmp_assign_source_1;
        PyObject *tmp_list_element_1;
        PyObject *tmp_called_name_1;
        PyObject *tmp_source_name_1;
        PyObject *tmp_args_element_name_1;
        PyObject *tmp_source_name_2;
        PyObject *tmp_called_name_2;
        PyObject *tmp_source_name_3;
        PyObject *tmp_args_element_name_2;
        PyObject *tmp_source_name_4;
        tmp_source_name_1 = const_str_digest_cc2faf98f6cbd21153d66f0b08ef520b;
        tmp_called_name_1 = LOOKUP_ATTRIBUTE( tmp_source_name_1, const_str_plain_format );
        assert( !(tmp_called_name_1 == NULL) );
        CHECK_OBJECT( par_self );
        tmp_source_name_2 = par_self;
        tmp_args_element_name_1 = LOOKUP_ATTRIBUTE( tmp_source_name_2, const_str_plain_args );
        if ( tmp_args_element_name_1 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
            Py_DECREF( tmp_called_name_1 );

            exception_lineno = 416;
            type_description_1 = "oo";
            goto frame_exception_exit_1;
        }
        frame_3a2b66c8ce864438c352c2c20c126501->m_frame.f_lineno = 416;
        {
            PyObject *call_args[] = { tmp_args_element_name_1 };
            tmp_list_element_1 = CALL_FUNCTION_WITH_ARGS1( tmp_called_name_1, call_args );
        }

        Py_DECREF( tmp_called_name_1 );
        Py_DECREF( tmp_args_element_name_1 );
        if ( tmp_list_element_1 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 416;
            type_description_1 = "oo";
            goto frame_exception_exit_1;
        }
        tmp_assign_source_1 = PyList_New( 2 );
        PyList_SET_ITEM( tmp_assign_source_1, 0, tmp_list_element_1 );
        tmp_source_name_3 = const_str_digest_6589e74b142d57485b33df8d4bf5e9da;
        tmp_called_name_2 = LOOKUP_ATTRIBUTE( tmp_source_name_3, const_str_plain_format );
        assert( !(tmp_called_name_2 == NULL) );
        CHECK_OBJECT( par_self );
        tmp_source_name_4 = par_self;
        tmp_args_element_name_2 = LOOKUP_ATTRIBUTE( tmp_source_name_4, const_str_plain_returncode );
        if ( tmp_args_element_name_2 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
            Py_DECREF( tmp_assign_source_1 );
            Py_DECREF( tmp_called_name_2 );

            exception_lineno = 417;
            type_description_1 = "oo";
            goto frame_exception_exit_1;
        }
        frame_3a2b66c8ce864438c352c2c20c126501->m_frame.f_lineno = 417;
        {
            PyObject *call_args[] = { tmp_args_element_name_2 };
            tmp_list_element_1 = CALL_FUNCTION_WITH_ARGS1( tmp_called_name_2, call_args );
        }

        Py_DECREF( tmp_called_name_2 );
        Py_DECREF( tmp_args_element_name_2 );
        if ( tmp_list_element_1 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
            Py_DECREF( tmp_assign_source_1 );

            exception_lineno = 417;
            type_description_1 = "oo";
            goto frame_exception_exit_1;
        }
        PyList_SET_ITEM( tmp_assign_source_1, 1, tmp_list_element_1 );
        assert( var_args == NULL );
        var_args = tmp_assign_source_1;
    }
    {
        nuitka_bool tmp_condition_result_1;
        PyObject *tmp_compexpr_left_1;
        PyObject *tmp_compexpr_right_1;
        PyObject *tmp_source_name_5;
        CHECK_OBJECT( par_self );
        tmp_source_name_5 = par_self;
        tmp_compexpr_left_1 = LOOKUP_ATTRIBUTE( tmp_source_name_5, const_str_plain_stdout );
        if ( tmp_compexpr_left_1 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 418;
            type_description_1 = "oo";
            goto frame_exception_exit_1;
        }
        tmp_compexpr_right_1 = Py_None;
        tmp_condition_result_1 = ( tmp_compexpr_left_1 != tmp_compexpr_right_1 ) ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
        Py_DECREF( tmp_compexpr_left_1 );
        if ( tmp_condition_result_1 == NUITKA_BOOL_TRUE )
        {
            goto branch_yes_1;
        }
        else
        {
            goto branch_no_1;
        }
        branch_yes_1:;
        {
            PyObject *tmp_called_name_3;
            PyObject *tmp_source_name_6;
            PyObject *tmp_call_result_1;
            PyObject *tmp_args_element_name_3;
            PyObject *tmp_called_name_4;
            PyObject *tmp_source_name_7;
            PyObject *tmp_args_element_name_4;
            PyObject *tmp_source_name_8;
            CHECK_OBJECT( var_args );
            tmp_source_name_6 = var_args;
            tmp_called_name_3 = LOOKUP_ATTRIBUTE( tmp_source_name_6, const_str_plain_append );
            if ( tmp_called_name_3 == NULL )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 419;
                type_description_1 = "oo";
                goto frame_exception_exit_1;
            }
            tmp_source_name_7 = const_str_digest_7b16e795bd361a9112c3449f85ac2ce4;
            tmp_called_name_4 = LOOKUP_ATTRIBUTE( tmp_source_name_7, const_str_plain_format );
            assert( !(tmp_called_name_4 == NULL) );
            CHECK_OBJECT( par_self );
            tmp_source_name_8 = par_self;
            tmp_args_element_name_4 = LOOKUP_ATTRIBUTE( tmp_source_name_8, const_str_plain_stdout );
            if ( tmp_args_element_name_4 == NULL )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
                Py_DECREF( tmp_called_name_3 );
                Py_DECREF( tmp_called_name_4 );

                exception_lineno = 419;
                type_description_1 = "oo";
                goto frame_exception_exit_1;
            }
            frame_3a2b66c8ce864438c352c2c20c126501->m_frame.f_lineno = 419;
            {
                PyObject *call_args[] = { tmp_args_element_name_4 };
                tmp_args_element_name_3 = CALL_FUNCTION_WITH_ARGS1( tmp_called_name_4, call_args );
            }

            Py_DECREF( tmp_called_name_4 );
            Py_DECREF( tmp_args_element_name_4 );
            if ( tmp_args_element_name_3 == NULL )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
                Py_DECREF( tmp_called_name_3 );

                exception_lineno = 419;
                type_description_1 = "oo";
                goto frame_exception_exit_1;
            }
            frame_3a2b66c8ce864438c352c2c20c126501->m_frame.f_lineno = 419;
            {
                PyObject *call_args[] = { tmp_args_element_name_3 };
                tmp_call_result_1 = CALL_FUNCTION_WITH_ARGS1( tmp_called_name_3, call_args );
            }

            Py_DECREF( tmp_called_name_3 );
            Py_DECREF( tmp_args_element_name_3 );
            if ( tmp_call_result_1 == NULL )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 419;
                type_description_1 = "oo";
                goto frame_exception_exit_1;
            }
            Py_DECREF( tmp_call_result_1 );
        }
        branch_no_1:;
    }
    {
        nuitka_bool tmp_condition_result_2;
        PyObject *tmp_compexpr_left_2;
        PyObject *tmp_compexpr_right_2;
        PyObject *tmp_source_name_9;
        CHECK_OBJECT( par_self );
        tmp_source_name_9 = par_self;
        tmp_compexpr_left_2 = LOOKUP_ATTRIBUTE( tmp_source_name_9, const_str_plain_stderr );
        if ( tmp_compexpr_left_2 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 420;
            type_description_1 = "oo";
            goto frame_exception_exit_1;
        }
        tmp_compexpr_right_2 = Py_None;
        tmp_condition_result_2 = ( tmp_compexpr_left_2 != tmp_compexpr_right_2 ) ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
        Py_DECREF( tmp_compexpr_left_2 );
        if ( tmp_condition_result_2 == NUITKA_BOOL_TRUE )
        {
            goto branch_yes_2;
        }
        else
        {
            goto branch_no_2;
        }
        branch_yes_2:;
        {
            PyObject *tmp_called_name_5;
            PyObject *tmp_source_name_10;
            PyObject *tmp_call_result_2;
            PyObject *tmp_args_element_name_5;
            PyObject *tmp_called_name_6;
            PyObject *tmp_source_name_11;
            PyObject *tmp_args_element_name_6;
            PyObject *tmp_source_name_12;
            CHECK_OBJECT( var_args );
            tmp_source_name_10 = var_args;
            tmp_called_name_5 = LOOKUP_ATTRIBUTE( tmp_source_name_10, const_str_plain_append );
            if ( tmp_called_name_5 == NULL )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 421;
                type_description_1 = "oo";
                goto frame_exception_exit_1;
            }
            tmp_source_name_11 = const_str_digest_7823c80713f79a3a1017f8e4a72a1d94;
            tmp_called_name_6 = LOOKUP_ATTRIBUTE( tmp_source_name_11, const_str_plain_format );
            assert( !(tmp_called_name_6 == NULL) );
            CHECK_OBJECT( par_self );
            tmp_source_name_12 = par_self;
            tmp_args_element_name_6 = LOOKUP_ATTRIBUTE( tmp_source_name_12, const_str_plain_stderr );
            if ( tmp_args_element_name_6 == NULL )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
                Py_DECREF( tmp_called_name_5 );
                Py_DECREF( tmp_called_name_6 );

                exception_lineno = 421;
                type_description_1 = "oo";
                goto frame_exception_exit_1;
            }
            frame_3a2b66c8ce864438c352c2c20c126501->m_frame.f_lineno = 421;
            {
                PyObject *call_args[] = { tmp_args_element_name_6 };
                tmp_args_element_name_5 = CALL_FUNCTION_WITH_ARGS1( tmp_called_name_6, call_args );
            }

            Py_DECREF( tmp_called_name_6 );
            Py_DECREF( tmp_args_element_name_6 );
            if ( tmp_args_element_name_5 == NULL )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
                Py_DECREF( tmp_called_name_5 );

                exception_lineno = 421;
                type_description_1 = "oo";
                goto frame_exception_exit_1;
            }
            frame_3a2b66c8ce864438c352c2c20c126501->m_frame.f_lineno = 421;
            {
                PyObject *call_args[] = { tmp_args_element_name_5 };
                tmp_call_result_2 = CALL_FUNCTION_WITH_ARGS1( tmp_called_name_5, call_args );
            }

            Py_DECREF( tmp_called_name_5 );
            Py_DECREF( tmp_args_element_name_5 );
            if ( tmp_call_result_2 == NULL )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 421;
                type_description_1 = "oo";
                goto frame_exception_exit_1;
            }
            Py_DECREF( tmp_call_result_2 );
        }
        branch_no_2:;
    }
    {
        PyObject *tmp_called_name_7;
        PyObject *tmp_source_name_13;
        PyObject *tmp_args_element_name_7;
        PyObject *tmp_source_name_14;
        PyObject *tmp_type_arg_1;
        PyObject *tmp_args_element_name_8;
        PyObject *tmp_called_instance_1;
        PyObject *tmp_args_element_name_9;
        tmp_source_name_13 = const_str_digest_bcaecae14d8428f69f1ec08173db8ce0;
        tmp_called_name_7 = LOOKUP_ATTRIBUTE( tmp_source_name_13, const_str_plain_format );
        assert( !(tmp_called_name_7 == NULL) );
        CHECK_OBJECT( par_self );
        tmp_type_arg_1 = par_self;
        tmp_source_name_14 = BUILTIN_TYPE1( tmp_type_arg_1 );
        assert( !(tmp_source_name_14 == NULL) );
        tmp_args_element_name_7 = LOOKUP_ATTRIBUTE( tmp_source_name_14, const_str_plain___name__ );
        Py_DECREF( tmp_source_name_14 );
        if ( tmp_args_element_name_7 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
            Py_DECREF( tmp_called_name_7 );

            exception_lineno = 422;
            type_description_1 = "oo";
            goto frame_exception_exit_1;
        }
        tmp_called_instance_1 = const_str_digest_db35ab94a03c3cbeb13cbe2a1d728b77;
        CHECK_OBJECT( var_args );
        tmp_args_element_name_9 = var_args;
        frame_3a2b66c8ce864438c352c2c20c126501->m_frame.f_lineno = 422;
        {
            PyObject *call_args[] = { tmp_args_element_name_9 };
            tmp_args_element_name_8 = CALL_METHOD_WITH_ARGS1( tmp_called_instance_1, const_str_plain_join, call_args );
        }

        if ( tmp_args_element_name_8 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
            Py_DECREF( tmp_called_name_7 );
            Py_DECREF( tmp_args_element_name_7 );

            exception_lineno = 422;
            type_description_1 = "oo";
            goto frame_exception_exit_1;
        }
        frame_3a2b66c8ce864438c352c2c20c126501->m_frame.f_lineno = 422;
        {
            PyObject *call_args[] = { tmp_args_element_name_7, tmp_args_element_name_8 };
            tmp_return_value = CALL_FUNCTION_WITH_ARGS2( tmp_called_name_7, call_args );
        }

        Py_DECREF( tmp_called_name_7 );
        Py_DECREF( tmp_args_element_name_7 );
        Py_DECREF( tmp_args_element_name_8 );
        if ( tmp_return_value == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 422;
            type_description_1 = "oo";
            goto frame_exception_exit_1;
        }
        goto frame_return_exit_1;
    }

#if 0
    RESTORE_FRAME_EXCEPTION( frame_3a2b66c8ce864438c352c2c20c126501 );
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto frame_no_exception_1;

    frame_return_exit_1:;
#if 0
    RESTORE_FRAME_EXCEPTION( frame_3a2b66c8ce864438c352c2c20c126501 );
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto try_return_handler_1;

    frame_exception_exit_1:;

#if 0
    RESTORE_FRAME_EXCEPTION( frame_3a2b66c8ce864438c352c2c20c126501 );
#endif

    if ( exception_tb == NULL )
    {
        exception_tb = MAKE_TRACEBACK( frame_3a2b66c8ce864438c352c2c20c126501, exception_lineno );
    }
    else if ( exception_tb->tb_frame != &frame_3a2b66c8ce864438c352c2c20c126501->m_frame )
    {
        exception_tb = ADD_TRACEBACK( exception_tb, frame_3a2b66c8ce864438c352c2c20c126501, exception_lineno );
    }

    // Attachs locals to frame if any.
    Nuitka_Frame_AttachLocals(
        (struct Nuitka_FrameObject *)frame_3a2b66c8ce864438c352c2c20c126501,
        type_description_1,
        par_self,
        var_args
    );


    // Release cached frame.
    if ( frame_3a2b66c8ce864438c352c2c20c126501 == cache_frame_3a2b66c8ce864438c352c2c20c126501 )
    {
        Py_DECREF( frame_3a2b66c8ce864438c352c2c20c126501 );
    }
    cache_frame_3a2b66c8ce864438c352c2c20c126501 = NULL;

    assertFrameObject( frame_3a2b66c8ce864438c352c2c20c126501 );

    // Put the previous frame back on top.
    popFrameStack();

    // Return the error.
    goto try_except_handler_1;

    frame_no_exception_1:;
    // tried codes exits in all cases
    NUITKA_CANNOT_GET_HERE( subprocess$$$function_21___repr__ );
    return NULL;
    // Return handler code:
    try_return_handler_1:;
    CHECK_OBJECT( (PyObject *)par_self );
    Py_DECREF( par_self );
    par_self = NULL;

    CHECK_OBJECT( (PyObject *)var_args );
    Py_DECREF( var_args );
    var_args = NULL;

    goto function_return_exit;
    // Exception handler code:
    try_except_handler_1:;
    exception_keeper_type_1 = exception_type;
    exception_keeper_value_1 = exception_value;
    exception_keeper_tb_1 = exception_tb;
    exception_keeper_lineno_1 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    CHECK_OBJECT( (PyObject *)par_self );
    Py_DECREF( par_self );
    par_self = NULL;

    Py_XDECREF( var_args );
    var_args = NULL;

    // Re-raise.
    exception_type = exception_keeper_type_1;
    exception_value = exception_keeper_value_1;
    exception_tb = exception_keeper_tb_1;
    exception_lineno = exception_keeper_lineno_1;

    goto function_exception_exit;
    // End of try:

    // Return statement must have exited already.
    NUITKA_CANNOT_GET_HERE( subprocess$$$function_21___repr__ );
    return NULL;

function_exception_exit:
    assert( exception_type );
    RESTORE_ERROR_OCCURRED( exception_type, exception_value, exception_tb );

    return NULL;

function_return_exit:
   // Function cleanup code if any.


   // Actual function exit with return value, making sure we did not make
   // the error status worse despite non-NULL return.
   CHECK_OBJECT( tmp_return_value );
   assert( had_error || !ERROR_OCCURRED() );
   return tmp_return_value;
}


static PyObject *impl_subprocess$$$function_22_check_returncode( struct Nuitka_FunctionObject const *self, PyObject **python_pars )
{
    // Preserve error status for checks
#ifndef __NUITKA_NO_ASSERT__
    NUITKA_MAY_BE_UNUSED bool had_error = ERROR_OCCURRED();
#endif

    // Local variable declarations.
    PyObject *par_self = python_pars[ 0 ];
    struct Nuitka_FrameObject *frame_09aa7102ace1ff05e255e991f636cddd;
    NUITKA_MAY_BE_UNUSED char const *type_description_1 = NULL;
    PyObject *exception_type = NULL;
    PyObject *exception_value = NULL;
    PyTracebackObject *exception_tb = NULL;
    NUITKA_MAY_BE_UNUSED int exception_lineno = 0;
    static struct Nuitka_FrameObject *cache_frame_09aa7102ace1ff05e255e991f636cddd = NULL;
    PyObject *tmp_return_value = NULL;
    PyObject *exception_keeper_type_1;
    PyObject *exception_keeper_value_1;
    PyTracebackObject *exception_keeper_tb_1;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_1;

    // Actual function body.
    // Tried code:
    MAKE_OR_REUSE_FRAME( cache_frame_09aa7102ace1ff05e255e991f636cddd, codeobj_09aa7102ace1ff05e255e991f636cddd, module_subprocess, sizeof(void *) );
    frame_09aa7102ace1ff05e255e991f636cddd = cache_frame_09aa7102ace1ff05e255e991f636cddd;

    // Push the new frame as the currently active one.
    pushFrameStack( frame_09aa7102ace1ff05e255e991f636cddd );

    // Mark the frame object as in use, ref count 1 will be up for reuse.
    assert( Py_REFCNT( frame_09aa7102ace1ff05e255e991f636cddd ) == 2 ); // Frame stack

    // Framed code:
    {
        nuitka_bool tmp_condition_result_1;
        PyObject *tmp_source_name_1;
        PyObject *tmp_attribute_value_1;
        int tmp_truth_name_1;
        CHECK_OBJECT( par_self );
        tmp_source_name_1 = par_self;
        tmp_attribute_value_1 = LOOKUP_ATTRIBUTE( tmp_source_name_1, const_str_plain_returncode );
        if ( tmp_attribute_value_1 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 426;
            type_description_1 = "o";
            goto frame_exception_exit_1;
        }
        tmp_truth_name_1 = CHECK_IF_TRUE( tmp_attribute_value_1 );
        if ( tmp_truth_name_1 == -1 )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
            Py_DECREF( tmp_attribute_value_1 );

            exception_lineno = 426;
            type_description_1 = "o";
            goto frame_exception_exit_1;
        }
        tmp_condition_result_1 = tmp_truth_name_1 == 1 ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
        Py_DECREF( tmp_attribute_value_1 );
        if ( tmp_condition_result_1 == NUITKA_BOOL_TRUE )
        {
            goto branch_yes_1;
        }
        else
        {
            goto branch_no_1;
        }
        branch_yes_1:;
        {
            PyObject *tmp_raise_type_1;
            PyObject *tmp_called_name_1;
            PyObject *tmp_mvar_value_1;
            PyObject *tmp_args_element_name_1;
            PyObject *tmp_source_name_2;
            PyObject *tmp_args_element_name_2;
            PyObject *tmp_source_name_3;
            PyObject *tmp_args_element_name_3;
            PyObject *tmp_source_name_4;
            PyObject *tmp_args_element_name_4;
            PyObject *tmp_source_name_5;
            tmp_mvar_value_1 = GET_STRING_DICT_VALUE( moduledict_subprocess, (Nuitka_StringObject *)const_str_plain_CalledProcessError );

            if (unlikely( tmp_mvar_value_1 == NULL ))
            {
                tmp_mvar_value_1 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_CalledProcessError );
            }

            if ( tmp_mvar_value_1 == NULL )
            {

                exception_type = PyExc_NameError;
                Py_INCREF( exception_type );
                exception_value = PyUnicode_FromFormat( "name '%s' is not defined", "CalledProcessError" );
                exception_tb = NULL;
                NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
                CHAIN_EXCEPTION( exception_value );

                exception_lineno = 427;
                type_description_1 = "o";
                goto frame_exception_exit_1;
            }

            tmp_called_name_1 = tmp_mvar_value_1;
            CHECK_OBJECT( par_self );
            tmp_source_name_2 = par_self;
            tmp_args_element_name_1 = LOOKUP_ATTRIBUTE( tmp_source_name_2, const_str_plain_returncode );
            if ( tmp_args_element_name_1 == NULL )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 427;
                type_description_1 = "o";
                goto frame_exception_exit_1;
            }
            CHECK_OBJECT( par_self );
            tmp_source_name_3 = par_self;
            tmp_args_element_name_2 = LOOKUP_ATTRIBUTE( tmp_source_name_3, const_str_plain_args );
            if ( tmp_args_element_name_2 == NULL )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
                Py_DECREF( tmp_args_element_name_1 );

                exception_lineno = 427;
                type_description_1 = "o";
                goto frame_exception_exit_1;
            }
            CHECK_OBJECT( par_self );
            tmp_source_name_4 = par_self;
            tmp_args_element_name_3 = LOOKUP_ATTRIBUTE( tmp_source_name_4, const_str_plain_stdout );
            if ( tmp_args_element_name_3 == NULL )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
                Py_DECREF( tmp_args_element_name_1 );
                Py_DECREF( tmp_args_element_name_2 );

                exception_lineno = 427;
                type_description_1 = "o";
                goto frame_exception_exit_1;
            }
            CHECK_OBJECT( par_self );
            tmp_source_name_5 = par_self;
            tmp_args_element_name_4 = LOOKUP_ATTRIBUTE( tmp_source_name_5, const_str_plain_stderr );
            if ( tmp_args_element_name_4 == NULL )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
                Py_DECREF( tmp_args_element_name_1 );
                Py_DECREF( tmp_args_element_name_2 );
                Py_DECREF( tmp_args_element_name_3 );

                exception_lineno = 428;
                type_description_1 = "o";
                goto frame_exception_exit_1;
            }
            frame_09aa7102ace1ff05e255e991f636cddd->m_frame.f_lineno = 427;
            {
                PyObject *call_args[] = { tmp_args_element_name_1, tmp_args_element_name_2, tmp_args_element_name_3, tmp_args_element_name_4 };
                tmp_raise_type_1 = CALL_FUNCTION_WITH_ARGS4( tmp_called_name_1, call_args );
            }

            Py_DECREF( tmp_args_element_name_1 );
            Py_DECREF( tmp_args_element_name_2 );
            Py_DECREF( tmp_args_element_name_3 );
            Py_DECREF( tmp_args_element_name_4 );
            if ( tmp_raise_type_1 == NULL )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 427;
                type_description_1 = "o";
                goto frame_exception_exit_1;
            }
            exception_type = tmp_raise_type_1;
            exception_lineno = 427;
            RAISE_EXCEPTION_WITH_TYPE( &exception_type, &exception_value, &exception_tb );
            type_description_1 = "o";
            goto frame_exception_exit_1;
        }
        branch_no_1:;
    }

#if 0
    RESTORE_FRAME_EXCEPTION( frame_09aa7102ace1ff05e255e991f636cddd );
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto frame_no_exception_1;

    frame_exception_exit_1:;

#if 0
    RESTORE_FRAME_EXCEPTION( frame_09aa7102ace1ff05e255e991f636cddd );
#endif

    if ( exception_tb == NULL )
    {
        exception_tb = MAKE_TRACEBACK( frame_09aa7102ace1ff05e255e991f636cddd, exception_lineno );
    }
    else if ( exception_tb->tb_frame != &frame_09aa7102ace1ff05e255e991f636cddd->m_frame )
    {
        exception_tb = ADD_TRACEBACK( exception_tb, frame_09aa7102ace1ff05e255e991f636cddd, exception_lineno );
    }

    // Attachs locals to frame if any.
    Nuitka_Frame_AttachLocals(
        (struct Nuitka_FrameObject *)frame_09aa7102ace1ff05e255e991f636cddd,
        type_description_1,
        par_self
    );


    // Release cached frame.
    if ( frame_09aa7102ace1ff05e255e991f636cddd == cache_frame_09aa7102ace1ff05e255e991f636cddd )
    {
        Py_DECREF( frame_09aa7102ace1ff05e255e991f636cddd );
    }
    cache_frame_09aa7102ace1ff05e255e991f636cddd = NULL;

    assertFrameObject( frame_09aa7102ace1ff05e255e991f636cddd );

    // Put the previous frame back on top.
    popFrameStack();

    // Return the error.
    goto try_except_handler_1;

    frame_no_exception_1:;
    tmp_return_value = Py_None;
    Py_INCREF( tmp_return_value );
    goto try_return_handler_1;
    // tried codes exits in all cases
    NUITKA_CANNOT_GET_HERE( subprocess$$$function_22_check_returncode );
    return NULL;
    // Return handler code:
    try_return_handler_1:;
    CHECK_OBJECT( (PyObject *)par_self );
    Py_DECREF( par_self );
    par_self = NULL;

    goto function_return_exit;
    // Exception handler code:
    try_except_handler_1:;
    exception_keeper_type_1 = exception_type;
    exception_keeper_value_1 = exception_value;
    exception_keeper_tb_1 = exception_tb;
    exception_keeper_lineno_1 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    CHECK_OBJECT( (PyObject *)par_self );
    Py_DECREF( par_self );
    par_self = NULL;

    // Re-raise.
    exception_type = exception_keeper_type_1;
    exception_value = exception_keeper_value_1;
    exception_tb = exception_keeper_tb_1;
    exception_lineno = exception_keeper_lineno_1;

    goto function_exception_exit;
    // End of try:

    // Return statement must have exited already.
    NUITKA_CANNOT_GET_HERE( subprocess$$$function_22_check_returncode );
    return NULL;

function_exception_exit:
    assert( exception_type );
    RESTORE_ERROR_OCCURRED( exception_type, exception_value, exception_tb );

    return NULL;

function_return_exit:
   // Function cleanup code if any.


   // Actual function exit with return value, making sure we did not make
   // the error status worse despite non-NULL return.
   CHECK_OBJECT( tmp_return_value );
   assert( had_error || !ERROR_OCCURRED() );
   return tmp_return_value;
}


static PyObject *impl_subprocess$$$function_23_run( struct Nuitka_FunctionObject const *self, PyObject **python_pars )
{
    // Preserve error status for checks
#ifndef __NUITKA_NO_ASSERT__
    NUITKA_MAY_BE_UNUSED bool had_error = ERROR_OCCURRED();
#endif

    // Local variable declarations.
    PyObject *par_input = python_pars[ 0 ];
    PyObject *par_capture_output = python_pars[ 1 ];
    PyObject *par_timeout = python_pars[ 2 ];
    PyObject *par_check = python_pars[ 3 ];
    PyObject *par_popenargs = python_pars[ 4 ];
    PyObject *par_kwargs = python_pars[ 5 ];
    PyObject *var_process = NULL;
    PyObject *var_stdout = NULL;
    PyObject *var_stderr = NULL;
    PyObject *var_retcode = NULL;
    PyObject *tmp_tuple_unpack_1__element_1 = NULL;
    PyObject *tmp_tuple_unpack_1__element_2 = NULL;
    PyObject *tmp_tuple_unpack_1__source_iter = NULL;
    PyObject *tmp_tuple_unpack_2__element_1 = NULL;
    PyObject *tmp_tuple_unpack_2__element_2 = NULL;
    PyObject *tmp_tuple_unpack_2__source_iter = NULL;
    PyObject *tmp_with_1__enter = NULL;
    PyObject *tmp_with_1__exit = NULL;
    nuitka_bool tmp_with_1__indicator = NUITKA_BOOL_UNASSIGNED;
    PyObject *tmp_with_1__source = NULL;
    struct Nuitka_FrameObject *frame_b7ad6617339f8bbe8f5dcdac8aa127fa;
    NUITKA_MAY_BE_UNUSED char const *type_description_1 = NULL;
    int tmp_res;
    PyObject *exception_type = NULL;
    PyObject *exception_value = NULL;
    PyTracebackObject *exception_tb = NULL;
    NUITKA_MAY_BE_UNUSED int exception_lineno = 0;
    bool tmp_result;
    PyObject *tmp_iterator_attempt;
    PyObject *exception_keeper_type_1;
    PyObject *exception_keeper_value_1;
    PyTracebackObject *exception_keeper_tb_1;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_1;
    PyObject *exception_keeper_type_2;
    PyObject *exception_keeper_value_2;
    PyTracebackObject *exception_keeper_tb_2;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_2;
    PyObject *exception_keeper_type_3;
    PyObject *exception_keeper_value_3;
    PyTracebackObject *exception_keeper_tb_3;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_3;
    PyObject *exception_preserved_type_1;
    PyObject *exception_preserved_value_1;
    PyTracebackObject *exception_preserved_tb_1;
    PyObject *exception_keeper_type_4;
    PyObject *exception_keeper_value_4;
    PyTracebackObject *exception_keeper_tb_4;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_4;
    PyObject *exception_keeper_type_5;
    PyObject *exception_keeper_value_5;
    PyTracebackObject *exception_keeper_tb_5;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_5;
    PyObject *exception_keeper_type_6;
    PyObject *exception_keeper_value_6;
    PyTracebackObject *exception_keeper_tb_6;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_6;
    PyObject *exception_keeper_type_7;
    PyObject *exception_keeper_value_7;
    PyTracebackObject *exception_keeper_tb_7;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_7;
    PyObject *exception_preserved_type_2;
    PyObject *exception_preserved_value_2;
    PyTracebackObject *exception_preserved_tb_2;
    PyObject *exception_keeper_type_8;
    PyObject *exception_keeper_value_8;
    PyTracebackObject *exception_keeper_tb_8;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_8;
    PyObject *exception_keeper_type_9;
    PyObject *exception_keeper_value_9;
    PyTracebackObject *exception_keeper_tb_9;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_9;
    PyObject *exception_keeper_type_10;
    PyObject *exception_keeper_value_10;
    PyTracebackObject *exception_keeper_tb_10;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_10;
    PyObject *tmp_return_value = NULL;
    static struct Nuitka_FrameObject *cache_frame_b7ad6617339f8bbe8f5dcdac8aa127fa = NULL;
    PyObject *exception_keeper_type_11;
    PyObject *exception_keeper_value_11;
    PyTracebackObject *exception_keeper_tb_11;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_11;

    // Actual function body.
    // Tried code:
    MAKE_OR_REUSE_FRAME( cache_frame_b7ad6617339f8bbe8f5dcdac8aa127fa, codeobj_b7ad6617339f8bbe8f5dcdac8aa127fa, module_subprocess, sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *) );
    frame_b7ad6617339f8bbe8f5dcdac8aa127fa = cache_frame_b7ad6617339f8bbe8f5dcdac8aa127fa;

    // Push the new frame as the currently active one.
    pushFrameStack( frame_b7ad6617339f8bbe8f5dcdac8aa127fa );

    // Mark the frame object as in use, ref count 1 will be up for reuse.
    assert( Py_REFCNT( frame_b7ad6617339f8bbe8f5dcdac8aa127fa ) == 2 ); // Frame stack

    // Framed code:
    {
        nuitka_bool tmp_condition_result_1;
        PyObject *tmp_compexpr_left_1;
        PyObject *tmp_compexpr_right_1;
        CHECK_OBJECT( par_input );
        tmp_compexpr_left_1 = par_input;
        tmp_compexpr_right_1 = Py_None;
        tmp_condition_result_1 = ( tmp_compexpr_left_1 != tmp_compexpr_right_1 ) ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
        if ( tmp_condition_result_1 == NUITKA_BOOL_TRUE )
        {
            goto branch_yes_1;
        }
        else
        {
            goto branch_no_1;
        }
        branch_yes_1:;
        {
            nuitka_bool tmp_condition_result_2;
            PyObject *tmp_compexpr_left_2;
            PyObject *tmp_compexpr_right_2;
            tmp_compexpr_left_2 = const_str_plain_stdin;
            CHECK_OBJECT( par_kwargs );
            tmp_compexpr_right_2 = par_kwargs;
            tmp_res = PySequence_Contains( tmp_compexpr_right_2, tmp_compexpr_left_2 );
            if ( tmp_res == -1 )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 461;
                type_description_1 = "oooooooooo";
                goto frame_exception_exit_1;
            }
            tmp_condition_result_2 = ( tmp_res == 1 ) ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
            if ( tmp_condition_result_2 == NUITKA_BOOL_TRUE )
            {
                goto branch_yes_2;
            }
            else
            {
                goto branch_no_2;
            }
            branch_yes_2:;
            {
                PyObject *tmp_raise_type_1;
                PyObject *tmp_make_exception_arg_1;
                tmp_make_exception_arg_1 = const_str_digest_51af6ec25e2aac315afeb32a2ca3309c;
                frame_b7ad6617339f8bbe8f5dcdac8aa127fa->m_frame.f_lineno = 462;
                {
                    PyObject *call_args[] = { tmp_make_exception_arg_1 };
                    tmp_raise_type_1 = CALL_FUNCTION_WITH_ARGS1( PyExc_ValueError, call_args );
                }

                assert( !(tmp_raise_type_1 == NULL) );
                exception_type = tmp_raise_type_1;
                exception_lineno = 462;
                RAISE_EXCEPTION_WITH_TYPE( &exception_type, &exception_value, &exception_tb );
                type_description_1 = "oooooooooo";
                goto frame_exception_exit_1;
            }
            branch_no_2:;
        }
        {
            PyObject *tmp_ass_subvalue_1;
            PyObject *tmp_mvar_value_1;
            PyObject *tmp_ass_subscribed_1;
            PyObject *tmp_ass_subscript_1;
            tmp_mvar_value_1 = GET_STRING_DICT_VALUE( moduledict_subprocess, (Nuitka_StringObject *)const_str_plain_PIPE );

            if (unlikely( tmp_mvar_value_1 == NULL ))
            {
                tmp_mvar_value_1 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_PIPE );
            }

            if ( tmp_mvar_value_1 == NULL )
            {

                exception_type = PyExc_NameError;
                Py_INCREF( exception_type );
                exception_value = PyUnicode_FromFormat( "name '%s' is not defined", "PIPE" );
                exception_tb = NULL;
                NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
                CHAIN_EXCEPTION( exception_value );

                exception_lineno = 463;
                type_description_1 = "oooooooooo";
                goto frame_exception_exit_1;
            }

            tmp_ass_subvalue_1 = tmp_mvar_value_1;
            CHECK_OBJECT( par_kwargs );
            tmp_ass_subscribed_1 = par_kwargs;
            tmp_ass_subscript_1 = const_str_plain_stdin;
            tmp_result = SET_SUBSCRIPT( tmp_ass_subscribed_1, tmp_ass_subscript_1, tmp_ass_subvalue_1 );
            if ( tmp_result == false )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 463;
                type_description_1 = "oooooooooo";
                goto frame_exception_exit_1;
            }
        }
        branch_no_1:;
    }
    {
        nuitka_bool tmp_condition_result_3;
        int tmp_truth_name_1;
        CHECK_OBJECT( par_capture_output );
        tmp_truth_name_1 = CHECK_IF_TRUE( par_capture_output );
        if ( tmp_truth_name_1 == -1 )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 465;
            type_description_1 = "oooooooooo";
            goto frame_exception_exit_1;
        }
        tmp_condition_result_3 = tmp_truth_name_1 == 1 ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
        if ( tmp_condition_result_3 == NUITKA_BOOL_TRUE )
        {
            goto branch_yes_3;
        }
        else
        {
            goto branch_no_3;
        }
        branch_yes_3:;
        {
            nuitka_bool tmp_condition_result_4;
            int tmp_or_left_truth_1;
            nuitka_bool tmp_or_left_value_1;
            nuitka_bool tmp_or_right_value_1;
            PyObject *tmp_compexpr_left_3;
            PyObject *tmp_compexpr_right_3;
            PyObject *tmp_compexpr_left_4;
            PyObject *tmp_compexpr_right_4;
            tmp_compexpr_left_3 = const_str_plain_stdout;
            CHECK_OBJECT( par_kwargs );
            tmp_compexpr_right_3 = par_kwargs;
            tmp_res = PySequence_Contains( tmp_compexpr_right_3, tmp_compexpr_left_3 );
            if ( tmp_res == -1 )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 466;
                type_description_1 = "oooooooooo";
                goto frame_exception_exit_1;
            }
            tmp_or_left_value_1 = ( tmp_res == 1 ) ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
            tmp_or_left_truth_1 = tmp_or_left_value_1 == NUITKA_BOOL_TRUE ? 1 : 0;
            if ( tmp_or_left_truth_1 == 1 )
            {
                goto or_left_1;
            }
            else
            {
                goto or_right_1;
            }
            or_right_1:;
            tmp_compexpr_left_4 = const_str_plain_stderr;
            CHECK_OBJECT( par_kwargs );
            tmp_compexpr_right_4 = par_kwargs;
            tmp_res = PySequence_Contains( tmp_compexpr_right_4, tmp_compexpr_left_4 );
            if ( tmp_res == -1 )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 466;
                type_description_1 = "oooooooooo";
                goto frame_exception_exit_1;
            }
            tmp_or_right_value_1 = ( tmp_res == 1 ) ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
            tmp_condition_result_4 = tmp_or_right_value_1;
            goto or_end_1;
            or_left_1:;
            tmp_condition_result_4 = tmp_or_left_value_1;
            or_end_1:;
            if ( tmp_condition_result_4 == NUITKA_BOOL_TRUE )
            {
                goto branch_yes_4;
            }
            else
            {
                goto branch_no_4;
            }
            branch_yes_4:;
            {
                PyObject *tmp_raise_type_2;
                PyObject *tmp_make_exception_arg_2;
                tmp_make_exception_arg_2 = const_str_digest_c1c4cc87478b3ab151a2911bde978276;
                frame_b7ad6617339f8bbe8f5dcdac8aa127fa->m_frame.f_lineno = 467;
                {
                    PyObject *call_args[] = { tmp_make_exception_arg_2 };
                    tmp_raise_type_2 = CALL_FUNCTION_WITH_ARGS1( PyExc_ValueError, call_args );
                }

                assert( !(tmp_raise_type_2 == NULL) );
                exception_type = tmp_raise_type_2;
                exception_lineno = 467;
                RAISE_EXCEPTION_WITH_TYPE( &exception_type, &exception_value, &exception_tb );
                type_description_1 = "oooooooooo";
                goto frame_exception_exit_1;
            }
            branch_no_4:;
        }
        {
            PyObject *tmp_ass_subvalue_2;
            PyObject *tmp_mvar_value_2;
            PyObject *tmp_ass_subscribed_2;
            PyObject *tmp_ass_subscript_2;
            tmp_mvar_value_2 = GET_STRING_DICT_VALUE( moduledict_subprocess, (Nuitka_StringObject *)const_str_plain_PIPE );

            if (unlikely( tmp_mvar_value_2 == NULL ))
            {
                tmp_mvar_value_2 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_PIPE );
            }

            if ( tmp_mvar_value_2 == NULL )
            {

                exception_type = PyExc_NameError;
                Py_INCREF( exception_type );
                exception_value = PyUnicode_FromFormat( "name '%s' is not defined", "PIPE" );
                exception_tb = NULL;
                NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
                CHAIN_EXCEPTION( exception_value );

                exception_lineno = 469;
                type_description_1 = "oooooooooo";
                goto frame_exception_exit_1;
            }

            tmp_ass_subvalue_2 = tmp_mvar_value_2;
            CHECK_OBJECT( par_kwargs );
            tmp_ass_subscribed_2 = par_kwargs;
            tmp_ass_subscript_2 = const_str_plain_stdout;
            tmp_result = SET_SUBSCRIPT( tmp_ass_subscribed_2, tmp_ass_subscript_2, tmp_ass_subvalue_2 );
            if ( tmp_result == false )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 469;
                type_description_1 = "oooooooooo";
                goto frame_exception_exit_1;
            }
        }
        {
            PyObject *tmp_ass_subvalue_3;
            PyObject *tmp_mvar_value_3;
            PyObject *tmp_ass_subscribed_3;
            PyObject *tmp_ass_subscript_3;
            tmp_mvar_value_3 = GET_STRING_DICT_VALUE( moduledict_subprocess, (Nuitka_StringObject *)const_str_plain_PIPE );

            if (unlikely( tmp_mvar_value_3 == NULL ))
            {
                tmp_mvar_value_3 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_PIPE );
            }

            if ( tmp_mvar_value_3 == NULL )
            {

                exception_type = PyExc_NameError;
                Py_INCREF( exception_type );
                exception_value = PyUnicode_FromFormat( "name '%s' is not defined", "PIPE" );
                exception_tb = NULL;
                NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
                CHAIN_EXCEPTION( exception_value );

                exception_lineno = 470;
                type_description_1 = "oooooooooo";
                goto frame_exception_exit_1;
            }

            tmp_ass_subvalue_3 = tmp_mvar_value_3;
            CHECK_OBJECT( par_kwargs );
            tmp_ass_subscribed_3 = par_kwargs;
            tmp_ass_subscript_3 = const_str_plain_stderr;
            tmp_result = SET_SUBSCRIPT( tmp_ass_subscribed_3, tmp_ass_subscript_3, tmp_ass_subvalue_3 );
            if ( tmp_result == false )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 470;
                type_description_1 = "oooooooooo";
                goto frame_exception_exit_1;
            }
        }
        branch_no_3:;
    }
    // Tried code:
    {
        PyObject *tmp_assign_source_1;
        PyObject *tmp_dircall_arg1_1;
        PyObject *tmp_mvar_value_4;
        PyObject *tmp_dircall_arg2_1;
        PyObject *tmp_dircall_arg3_1;
        tmp_mvar_value_4 = GET_STRING_DICT_VALUE( moduledict_subprocess, (Nuitka_StringObject *)const_str_plain_Popen );

        if (unlikely( tmp_mvar_value_4 == NULL ))
        {
            tmp_mvar_value_4 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_Popen );
        }

        if ( tmp_mvar_value_4 == NULL )
        {

            exception_type = PyExc_NameError;
            Py_INCREF( exception_type );
            exception_value = PyUnicode_FromFormat( "name '%s' is not defined", "Popen" );
            exception_tb = NULL;
            NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
            CHAIN_EXCEPTION( exception_value );

            exception_lineno = 472;
            type_description_1 = "oooooooooo";
            goto try_except_handler_2;
        }

        tmp_dircall_arg1_1 = tmp_mvar_value_4;
        CHECK_OBJECT( par_popenargs );
        tmp_dircall_arg2_1 = par_popenargs;
        CHECK_OBJECT( par_kwargs );
        tmp_dircall_arg3_1 = par_kwargs;
        Py_INCREF( tmp_dircall_arg1_1 );
        Py_INCREF( tmp_dircall_arg2_1 );
        Py_INCREF( tmp_dircall_arg3_1 );

        {
            PyObject *dir_call_args[] = {tmp_dircall_arg1_1, tmp_dircall_arg2_1, tmp_dircall_arg3_1};
            tmp_assign_source_1 = impl___internal__$$$function_5_complex_call_helper_star_list_star_dict( dir_call_args );
        }
        if ( tmp_assign_source_1 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 472;
            type_description_1 = "oooooooooo";
            goto try_except_handler_2;
        }
        assert( tmp_with_1__source == NULL );
        tmp_with_1__source = tmp_assign_source_1;
    }
    {
        PyObject *tmp_assign_source_2;
        PyObject *tmp_called_name_1;
        PyObject *tmp_source_name_1;
        CHECK_OBJECT( tmp_with_1__source );
        tmp_source_name_1 = tmp_with_1__source;
        tmp_called_name_1 = LOOKUP_SPECIAL( tmp_source_name_1, const_str_plain___enter__ );
        if ( tmp_called_name_1 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 472;
            type_description_1 = "oooooooooo";
            goto try_except_handler_2;
        }
        frame_b7ad6617339f8bbe8f5dcdac8aa127fa->m_frame.f_lineno = 472;
        tmp_assign_source_2 = CALL_FUNCTION_NO_ARGS( tmp_called_name_1 );
        Py_DECREF( tmp_called_name_1 );
        if ( tmp_assign_source_2 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 472;
            type_description_1 = "oooooooooo";
            goto try_except_handler_2;
        }
        assert( tmp_with_1__enter == NULL );
        tmp_with_1__enter = tmp_assign_source_2;
    }
    {
        PyObject *tmp_assign_source_3;
        PyObject *tmp_source_name_2;
        CHECK_OBJECT( tmp_with_1__source );
        tmp_source_name_2 = tmp_with_1__source;
        tmp_assign_source_3 = LOOKUP_SPECIAL( tmp_source_name_2, const_str_plain___exit__ );
        if ( tmp_assign_source_3 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 472;
            type_description_1 = "oooooooooo";
            goto try_except_handler_2;
        }
        assert( tmp_with_1__exit == NULL );
        tmp_with_1__exit = tmp_assign_source_3;
    }
    {
        nuitka_bool tmp_assign_source_4;
        tmp_assign_source_4 = NUITKA_BOOL_TRUE;
        tmp_with_1__indicator = tmp_assign_source_4;
    }
    {
        PyObject *tmp_assign_source_5;
        CHECK_OBJECT( tmp_with_1__enter );
        tmp_assign_source_5 = tmp_with_1__enter;
        assert( var_process == NULL );
        Py_INCREF( tmp_assign_source_5 );
        var_process = tmp_assign_source_5;
    }
    // Tried code:
    // Tried code:
    // Tried code:
    // Tried code:
    {
        PyObject *tmp_assign_source_6;
        PyObject *tmp_iter_arg_1;
        PyObject *tmp_called_name_2;
        PyObject *tmp_source_name_3;
        PyObject *tmp_args_name_1;
        PyObject *tmp_tuple_element_1;
        PyObject *tmp_kw_name_1;
        PyObject *tmp_dict_key_1;
        PyObject *tmp_dict_value_1;
        CHECK_OBJECT( var_process );
        tmp_source_name_3 = var_process;
        tmp_called_name_2 = LOOKUP_ATTRIBUTE( tmp_source_name_3, const_str_plain_communicate );
        if ( tmp_called_name_2 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 474;
            type_description_1 = "oooooooooo";
            goto try_except_handler_6;
        }
        CHECK_OBJECT( par_input );
        tmp_tuple_element_1 = par_input;
        tmp_args_name_1 = PyTuple_New( 1 );
        Py_INCREF( tmp_tuple_element_1 );
        PyTuple_SET_ITEM( tmp_args_name_1, 0, tmp_tuple_element_1 );
        tmp_dict_key_1 = const_str_plain_timeout;
        CHECK_OBJECT( par_timeout );
        tmp_dict_value_1 = par_timeout;
        tmp_kw_name_1 = _PyDict_NewPresized( 1 );
        tmp_res = PyDict_SetItem( tmp_kw_name_1, tmp_dict_key_1, tmp_dict_value_1 );
        assert( !(tmp_res != 0) );
        frame_b7ad6617339f8bbe8f5dcdac8aa127fa->m_frame.f_lineno = 474;
        tmp_iter_arg_1 = CALL_FUNCTION( tmp_called_name_2, tmp_args_name_1, tmp_kw_name_1 );
        Py_DECREF( tmp_called_name_2 );
        Py_DECREF( tmp_args_name_1 );
        Py_DECREF( tmp_kw_name_1 );
        if ( tmp_iter_arg_1 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 474;
            type_description_1 = "oooooooooo";
            goto try_except_handler_6;
        }
        tmp_assign_source_6 = MAKE_UNPACK_ITERATOR( tmp_iter_arg_1 );
        Py_DECREF( tmp_iter_arg_1 );
        if ( tmp_assign_source_6 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 474;
            type_description_1 = "oooooooooo";
            goto try_except_handler_6;
        }
        assert( tmp_tuple_unpack_1__source_iter == NULL );
        tmp_tuple_unpack_1__source_iter = tmp_assign_source_6;
    }
    // Tried code:
    {
        PyObject *tmp_assign_source_7;
        PyObject *tmp_unpack_1;
        CHECK_OBJECT( tmp_tuple_unpack_1__source_iter );
        tmp_unpack_1 = tmp_tuple_unpack_1__source_iter;
        tmp_assign_source_7 = UNPACK_NEXT( tmp_unpack_1, 0, 2 );
        if ( tmp_assign_source_7 == NULL )
        {
            if ( !ERROR_OCCURRED() )
            {
                exception_type = PyExc_StopIteration;
                Py_INCREF( exception_type );
                exception_value = NULL;
                exception_tb = NULL;
            }
            else
            {
                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
            }


            type_description_1 = "oooooooooo";
            exception_lineno = 474;
            goto try_except_handler_7;
        }
        assert( tmp_tuple_unpack_1__element_1 == NULL );
        tmp_tuple_unpack_1__element_1 = tmp_assign_source_7;
    }
    {
        PyObject *tmp_assign_source_8;
        PyObject *tmp_unpack_2;
        CHECK_OBJECT( tmp_tuple_unpack_1__source_iter );
        tmp_unpack_2 = tmp_tuple_unpack_1__source_iter;
        tmp_assign_source_8 = UNPACK_NEXT( tmp_unpack_2, 1, 2 );
        if ( tmp_assign_source_8 == NULL )
        {
            if ( !ERROR_OCCURRED() )
            {
                exception_type = PyExc_StopIteration;
                Py_INCREF( exception_type );
                exception_value = NULL;
                exception_tb = NULL;
            }
            else
            {
                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
            }


            type_description_1 = "oooooooooo";
            exception_lineno = 474;
            goto try_except_handler_7;
        }
        assert( tmp_tuple_unpack_1__element_2 == NULL );
        tmp_tuple_unpack_1__element_2 = tmp_assign_source_8;
    }
    {
        PyObject *tmp_iterator_name_1;
        CHECK_OBJECT( tmp_tuple_unpack_1__source_iter );
        tmp_iterator_name_1 = tmp_tuple_unpack_1__source_iter;
        // Check if iterator has left-over elements.
        CHECK_OBJECT( tmp_iterator_name_1 ); assert( HAS_ITERNEXT( tmp_iterator_name_1 ) );

        tmp_iterator_attempt = (*Py_TYPE( tmp_iterator_name_1 )->tp_iternext)( tmp_iterator_name_1 );

        if (likely( tmp_iterator_attempt == NULL ))
        {
            PyObject *error = GET_ERROR_OCCURRED();

            if ( error != NULL )
            {
                if ( EXCEPTION_MATCH_BOOL_SINGLE( error, PyExc_StopIteration ))
                {
                    CLEAR_ERROR_OCCURRED();
                }
                else
                {
                    FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );

                    type_description_1 = "oooooooooo";
                    exception_lineno = 474;
                    goto try_except_handler_7;
                }
            }
        }
        else
        {
            Py_DECREF( tmp_iterator_attempt );

            // TODO: Could avoid PyErr_Format.
#if PYTHON_VERSION < 300
            PyErr_Format( PyExc_ValueError, "too many values to unpack" );
#else
            PyErr_Format( PyExc_ValueError, "too many values to unpack (expected 2)" );
#endif
            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );

            type_description_1 = "oooooooooo";
            exception_lineno = 474;
            goto try_except_handler_7;
        }
    }
    goto try_end_1;
    // Exception handler code:
    try_except_handler_7:;
    exception_keeper_type_1 = exception_type;
    exception_keeper_value_1 = exception_value;
    exception_keeper_tb_1 = exception_tb;
    exception_keeper_lineno_1 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    CHECK_OBJECT( (PyObject *)tmp_tuple_unpack_1__source_iter );
    Py_DECREF( tmp_tuple_unpack_1__source_iter );
    tmp_tuple_unpack_1__source_iter = NULL;

    // Re-raise.
    exception_type = exception_keeper_type_1;
    exception_value = exception_keeper_value_1;
    exception_tb = exception_keeper_tb_1;
    exception_lineno = exception_keeper_lineno_1;

    goto try_except_handler_6;
    // End of try:
    try_end_1:;
    goto try_end_2;
    // Exception handler code:
    try_except_handler_6:;
    exception_keeper_type_2 = exception_type;
    exception_keeper_value_2 = exception_value;
    exception_keeper_tb_2 = exception_tb;
    exception_keeper_lineno_2 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    Py_XDECREF( tmp_tuple_unpack_1__element_1 );
    tmp_tuple_unpack_1__element_1 = NULL;

    Py_XDECREF( tmp_tuple_unpack_1__element_2 );
    tmp_tuple_unpack_1__element_2 = NULL;

    // Re-raise.
    exception_type = exception_keeper_type_2;
    exception_value = exception_keeper_value_2;
    exception_tb = exception_keeper_tb_2;
    exception_lineno = exception_keeper_lineno_2;

    goto try_except_handler_5;
    // End of try:
    try_end_2:;
    goto try_end_3;
    // Exception handler code:
    try_except_handler_5:;
    exception_keeper_type_3 = exception_type;
    exception_keeper_value_3 = exception_value;
    exception_keeper_tb_3 = exception_tb;
    exception_keeper_lineno_3 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    // Preserve existing published exception.
    exception_preserved_type_1 = EXC_TYPE(PyThreadState_GET());
    Py_XINCREF( exception_preserved_type_1 );
    exception_preserved_value_1 = EXC_VALUE(PyThreadState_GET());
    Py_XINCREF( exception_preserved_value_1 );
    exception_preserved_tb_1 = (PyTracebackObject *)EXC_TRACEBACK(PyThreadState_GET());
    Py_XINCREF( exception_preserved_tb_1 );

    if ( exception_keeper_tb_3 == NULL )
    {
        exception_keeper_tb_3 = MAKE_TRACEBACK( frame_b7ad6617339f8bbe8f5dcdac8aa127fa, exception_keeper_lineno_3 );
    }
    else if ( exception_keeper_lineno_3 != 0 )
    {
        exception_keeper_tb_3 = ADD_TRACEBACK( exception_keeper_tb_3, frame_b7ad6617339f8bbe8f5dcdac8aa127fa, exception_keeper_lineno_3 );
    }

    NORMALIZE_EXCEPTION( &exception_keeper_type_3, &exception_keeper_value_3, &exception_keeper_tb_3 );
    PyException_SetTraceback( exception_keeper_value_3, (PyObject *)exception_keeper_tb_3 );
    PUBLISH_EXCEPTION( &exception_keeper_type_3, &exception_keeper_value_3, &exception_keeper_tb_3 );
    // Tried code:
    {
        nuitka_bool tmp_condition_result_5;
        PyObject *tmp_compexpr_left_5;
        PyObject *tmp_compexpr_right_5;
        PyObject *tmp_mvar_value_5;
        tmp_compexpr_left_5 = EXC_TYPE(PyThreadState_GET());
        tmp_mvar_value_5 = GET_STRING_DICT_VALUE( moduledict_subprocess, (Nuitka_StringObject *)const_str_plain_TimeoutExpired );

        if (unlikely( tmp_mvar_value_5 == NULL ))
        {
            tmp_mvar_value_5 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_TimeoutExpired );
        }

        if ( tmp_mvar_value_5 == NULL )
        {

            exception_type = PyExc_NameError;
            Py_INCREF( exception_type );
            exception_value = PyUnicode_FromFormat( "name '%s' is not defined", "TimeoutExpired" );
            exception_tb = NULL;
            NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
            CHAIN_EXCEPTION( exception_value );

            exception_lineno = 475;
            type_description_1 = "oooooooooo";
            goto try_except_handler_8;
        }

        tmp_compexpr_right_5 = tmp_mvar_value_5;
        tmp_res = EXCEPTION_MATCH_BOOL( tmp_compexpr_left_5, tmp_compexpr_right_5 );
        if ( tmp_res == -1 )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 475;
            type_description_1 = "oooooooooo";
            goto try_except_handler_8;
        }
        tmp_condition_result_5 = ( tmp_res != 0 ) ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
        if ( tmp_condition_result_5 == NUITKA_BOOL_TRUE )
        {
            goto branch_yes_5;
        }
        else
        {
            goto branch_no_5;
        }
        branch_yes_5:;
        {
            PyObject *tmp_called_instance_1;
            PyObject *tmp_call_result_1;
            CHECK_OBJECT( var_process );
            tmp_called_instance_1 = var_process;
            frame_b7ad6617339f8bbe8f5dcdac8aa127fa->m_frame.f_lineno = 476;
            tmp_call_result_1 = CALL_METHOD_NO_ARGS( tmp_called_instance_1, const_str_plain_kill );
            if ( tmp_call_result_1 == NULL )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 476;
                type_description_1 = "oooooooooo";
                goto try_except_handler_8;
            }
            Py_DECREF( tmp_call_result_1 );
        }
        // Tried code:
        {
            PyObject *tmp_assign_source_9;
            PyObject *tmp_iter_arg_2;
            PyObject *tmp_called_instance_2;
            CHECK_OBJECT( var_process );
            tmp_called_instance_2 = var_process;
            frame_b7ad6617339f8bbe8f5dcdac8aa127fa->m_frame.f_lineno = 477;
            tmp_iter_arg_2 = CALL_METHOD_NO_ARGS( tmp_called_instance_2, const_str_plain_communicate );
            if ( tmp_iter_arg_2 == NULL )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 477;
                type_description_1 = "oooooooooo";
                goto try_except_handler_9;
            }
            tmp_assign_source_9 = MAKE_UNPACK_ITERATOR( tmp_iter_arg_2 );
            Py_DECREF( tmp_iter_arg_2 );
            if ( tmp_assign_source_9 == NULL )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 477;
                type_description_1 = "oooooooooo";
                goto try_except_handler_9;
            }
            assert( tmp_tuple_unpack_2__source_iter == NULL );
            tmp_tuple_unpack_2__source_iter = tmp_assign_source_9;
        }
        // Tried code:
        {
            PyObject *tmp_assign_source_10;
            PyObject *tmp_unpack_3;
            CHECK_OBJECT( tmp_tuple_unpack_2__source_iter );
            tmp_unpack_3 = tmp_tuple_unpack_2__source_iter;
            tmp_assign_source_10 = UNPACK_NEXT( tmp_unpack_3, 0, 2 );
            if ( tmp_assign_source_10 == NULL )
            {
                if ( !ERROR_OCCURRED() )
                {
                    exception_type = PyExc_StopIteration;
                    Py_INCREF( exception_type );
                    exception_value = NULL;
                    exception_tb = NULL;
                }
                else
                {
                    FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
                }


                type_description_1 = "oooooooooo";
                exception_lineno = 477;
                goto try_except_handler_10;
            }
            assert( tmp_tuple_unpack_2__element_1 == NULL );
            tmp_tuple_unpack_2__element_1 = tmp_assign_source_10;
        }
        {
            PyObject *tmp_assign_source_11;
            PyObject *tmp_unpack_4;
            CHECK_OBJECT( tmp_tuple_unpack_2__source_iter );
            tmp_unpack_4 = tmp_tuple_unpack_2__source_iter;
            tmp_assign_source_11 = UNPACK_NEXT( tmp_unpack_4, 1, 2 );
            if ( tmp_assign_source_11 == NULL )
            {
                if ( !ERROR_OCCURRED() )
                {
                    exception_type = PyExc_StopIteration;
                    Py_INCREF( exception_type );
                    exception_value = NULL;
                    exception_tb = NULL;
                }
                else
                {
                    FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
                }


                type_description_1 = "oooooooooo";
                exception_lineno = 477;
                goto try_except_handler_10;
            }
            assert( tmp_tuple_unpack_2__element_2 == NULL );
            tmp_tuple_unpack_2__element_2 = tmp_assign_source_11;
        }
        {
            PyObject *tmp_iterator_name_2;
            CHECK_OBJECT( tmp_tuple_unpack_2__source_iter );
            tmp_iterator_name_2 = tmp_tuple_unpack_2__source_iter;
            // Check if iterator has left-over elements.
            CHECK_OBJECT( tmp_iterator_name_2 ); assert( HAS_ITERNEXT( tmp_iterator_name_2 ) );

            tmp_iterator_attempt = (*Py_TYPE( tmp_iterator_name_2 )->tp_iternext)( tmp_iterator_name_2 );

            if (likely( tmp_iterator_attempt == NULL ))
            {
                PyObject *error = GET_ERROR_OCCURRED();

                if ( error != NULL )
                {
                    if ( EXCEPTION_MATCH_BOOL_SINGLE( error, PyExc_StopIteration ))
                    {
                        CLEAR_ERROR_OCCURRED();
                    }
                    else
                    {
                        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );

                        type_description_1 = "oooooooooo";
                        exception_lineno = 477;
                        goto try_except_handler_10;
                    }
                }
            }
            else
            {
                Py_DECREF( tmp_iterator_attempt );

                // TODO: Could avoid PyErr_Format.
#if PYTHON_VERSION < 300
                PyErr_Format( PyExc_ValueError, "too many values to unpack" );
#else
                PyErr_Format( PyExc_ValueError, "too many values to unpack (expected 2)" );
#endif
                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );

                type_description_1 = "oooooooooo";
                exception_lineno = 477;
                goto try_except_handler_10;
            }
        }
        goto try_end_4;
        // Exception handler code:
        try_except_handler_10:;
        exception_keeper_type_4 = exception_type;
        exception_keeper_value_4 = exception_value;
        exception_keeper_tb_4 = exception_tb;
        exception_keeper_lineno_4 = exception_lineno;
        exception_type = NULL;
        exception_value = NULL;
        exception_tb = NULL;
        exception_lineno = 0;

        CHECK_OBJECT( (PyObject *)tmp_tuple_unpack_2__source_iter );
        Py_DECREF( tmp_tuple_unpack_2__source_iter );
        tmp_tuple_unpack_2__source_iter = NULL;

        // Re-raise.
        exception_type = exception_keeper_type_4;
        exception_value = exception_keeper_value_4;
        exception_tb = exception_keeper_tb_4;
        exception_lineno = exception_keeper_lineno_4;

        goto try_except_handler_9;
        // End of try:
        try_end_4:;
        goto try_end_5;
        // Exception handler code:
        try_except_handler_9:;
        exception_keeper_type_5 = exception_type;
        exception_keeper_value_5 = exception_value;
        exception_keeper_tb_5 = exception_tb;
        exception_keeper_lineno_5 = exception_lineno;
        exception_type = NULL;
        exception_value = NULL;
        exception_tb = NULL;
        exception_lineno = 0;

        Py_XDECREF( tmp_tuple_unpack_2__element_1 );
        tmp_tuple_unpack_2__element_1 = NULL;

        Py_XDECREF( tmp_tuple_unpack_2__element_2 );
        tmp_tuple_unpack_2__element_2 = NULL;

        // Re-raise.
        exception_type = exception_keeper_type_5;
        exception_value = exception_keeper_value_5;
        exception_tb = exception_keeper_tb_5;
        exception_lineno = exception_keeper_lineno_5;

        goto try_except_handler_8;
        // End of try:
        try_end_5:;
        CHECK_OBJECT( (PyObject *)tmp_tuple_unpack_2__source_iter );
        Py_DECREF( tmp_tuple_unpack_2__source_iter );
        tmp_tuple_unpack_2__source_iter = NULL;

        {
            PyObject *tmp_assign_source_12;
            CHECK_OBJECT( tmp_tuple_unpack_2__element_1 );
            tmp_assign_source_12 = tmp_tuple_unpack_2__element_1;
            assert( var_stdout == NULL );
            Py_INCREF( tmp_assign_source_12 );
            var_stdout = tmp_assign_source_12;
        }
        Py_XDECREF( tmp_tuple_unpack_2__element_1 );
        tmp_tuple_unpack_2__element_1 = NULL;

        {
            PyObject *tmp_assign_source_13;
            CHECK_OBJECT( tmp_tuple_unpack_2__element_2 );
            tmp_assign_source_13 = tmp_tuple_unpack_2__element_2;
            assert( var_stderr == NULL );
            Py_INCREF( tmp_assign_source_13 );
            var_stderr = tmp_assign_source_13;
        }
        Py_XDECREF( tmp_tuple_unpack_2__element_2 );
        tmp_tuple_unpack_2__element_2 = NULL;

        {
            PyObject *tmp_raise_type_3;
            PyObject *tmp_called_name_3;
            PyObject *tmp_mvar_value_6;
            PyObject *tmp_args_name_2;
            PyObject *tmp_tuple_element_2;
            PyObject *tmp_source_name_4;
            PyObject *tmp_kw_name_2;
            PyObject *tmp_dict_key_2;
            PyObject *tmp_dict_value_2;
            PyObject *tmp_dict_key_3;
            PyObject *tmp_dict_value_3;
            tmp_mvar_value_6 = GET_STRING_DICT_VALUE( moduledict_subprocess, (Nuitka_StringObject *)const_str_plain_TimeoutExpired );

            if (unlikely( tmp_mvar_value_6 == NULL ))
            {
                tmp_mvar_value_6 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_TimeoutExpired );
            }

            if ( tmp_mvar_value_6 == NULL )
            {

                exception_type = PyExc_NameError;
                Py_INCREF( exception_type );
                exception_value = PyUnicode_FromFormat( "name '%s' is not defined", "TimeoutExpired" );
                exception_tb = NULL;
                NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
                CHAIN_EXCEPTION( exception_value );

                exception_lineno = 478;
                type_description_1 = "oooooooooo";
                goto try_except_handler_8;
            }

            tmp_called_name_3 = tmp_mvar_value_6;
            CHECK_OBJECT( var_process );
            tmp_source_name_4 = var_process;
            tmp_tuple_element_2 = LOOKUP_ATTRIBUTE( tmp_source_name_4, const_str_plain_args );
            if ( tmp_tuple_element_2 == NULL )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 478;
                type_description_1 = "oooooooooo";
                goto try_except_handler_8;
            }
            tmp_args_name_2 = PyTuple_New( 2 );
            PyTuple_SET_ITEM( tmp_args_name_2, 0, tmp_tuple_element_2 );
            CHECK_OBJECT( par_timeout );
            tmp_tuple_element_2 = par_timeout;
            Py_INCREF( tmp_tuple_element_2 );
            PyTuple_SET_ITEM( tmp_args_name_2, 1, tmp_tuple_element_2 );
            tmp_dict_key_2 = const_str_plain_output;
            CHECK_OBJECT( var_stdout );
            tmp_dict_value_2 = var_stdout;
            tmp_kw_name_2 = _PyDict_NewPresized( 2 );
            tmp_res = PyDict_SetItem( tmp_kw_name_2, tmp_dict_key_2, tmp_dict_value_2 );
            assert( !(tmp_res != 0) );
            tmp_dict_key_3 = const_str_plain_stderr;
            CHECK_OBJECT( var_stderr );
            tmp_dict_value_3 = var_stderr;
            tmp_res = PyDict_SetItem( tmp_kw_name_2, tmp_dict_key_3, tmp_dict_value_3 );
            assert( !(tmp_res != 0) );
            frame_b7ad6617339f8bbe8f5dcdac8aa127fa->m_frame.f_lineno = 478;
            tmp_raise_type_3 = CALL_FUNCTION( tmp_called_name_3, tmp_args_name_2, tmp_kw_name_2 );
            Py_DECREF( tmp_args_name_2 );
            Py_DECREF( tmp_kw_name_2 );
            if ( tmp_raise_type_3 == NULL )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 478;
                type_description_1 = "oooooooooo";
                goto try_except_handler_8;
            }
            exception_type = tmp_raise_type_3;
            exception_lineno = 478;
            RAISE_EXCEPTION_WITH_TYPE( &exception_type, &exception_value, &exception_tb );
            type_description_1 = "oooooooooo";
            goto try_except_handler_8;
        }
        goto branch_end_5;
        branch_no_5:;
        {
            PyObject *tmp_called_instance_3;
            PyObject *tmp_call_result_2;
            CHECK_OBJECT( var_process );
            tmp_called_instance_3 = var_process;
            frame_b7ad6617339f8bbe8f5dcdac8aa127fa->m_frame.f_lineno = 481;
            tmp_call_result_2 = CALL_METHOD_NO_ARGS( tmp_called_instance_3, const_str_plain_kill );
            if ( tmp_call_result_2 == NULL )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 481;
                type_description_1 = "oooooooooo";
                goto try_except_handler_8;
            }
            Py_DECREF( tmp_call_result_2 );
        }
        tmp_result = RERAISE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
        if (unlikely( tmp_result == false ))
        {
            exception_lineno = 483;
        }

        if (exception_tb && exception_tb->tb_frame == &frame_b7ad6617339f8bbe8f5dcdac8aa127fa->m_frame) frame_b7ad6617339f8bbe8f5dcdac8aa127fa->m_frame.f_lineno = exception_tb->tb_lineno;
        type_description_1 = "oooooooooo";
        goto try_except_handler_8;
        branch_end_5:;
    }
    // tried codes exits in all cases
    NUITKA_CANNOT_GET_HERE( subprocess$$$function_23_run );
    return NULL;
    // Exception handler code:
    try_except_handler_8:;
    exception_keeper_type_6 = exception_type;
    exception_keeper_value_6 = exception_value;
    exception_keeper_tb_6 = exception_tb;
    exception_keeper_lineno_6 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    // Restore previous exception.
    SET_CURRENT_EXCEPTION( exception_preserved_type_1, exception_preserved_value_1, exception_preserved_tb_1 );
    // Re-raise.
    exception_type = exception_keeper_type_6;
    exception_value = exception_keeper_value_6;
    exception_tb = exception_keeper_tb_6;
    exception_lineno = exception_keeper_lineno_6;

    goto try_except_handler_4;
    // End of try:
    // End of try:
    try_end_3:;
    CHECK_OBJECT( (PyObject *)tmp_tuple_unpack_1__source_iter );
    Py_DECREF( tmp_tuple_unpack_1__source_iter );
    tmp_tuple_unpack_1__source_iter = NULL;

    {
        PyObject *tmp_assign_source_14;
        CHECK_OBJECT( tmp_tuple_unpack_1__element_1 );
        tmp_assign_source_14 = tmp_tuple_unpack_1__element_1;
        assert( var_stdout == NULL );
        Py_INCREF( tmp_assign_source_14 );
        var_stdout = tmp_assign_source_14;
    }
    Py_XDECREF( tmp_tuple_unpack_1__element_1 );
    tmp_tuple_unpack_1__element_1 = NULL;

    {
        PyObject *tmp_assign_source_15;
        CHECK_OBJECT( tmp_tuple_unpack_1__element_2 );
        tmp_assign_source_15 = tmp_tuple_unpack_1__element_2;
        assert( var_stderr == NULL );
        Py_INCREF( tmp_assign_source_15 );
        var_stderr = tmp_assign_source_15;
    }
    Py_XDECREF( tmp_tuple_unpack_1__element_2 );
    tmp_tuple_unpack_1__element_2 = NULL;

    {
        PyObject *tmp_assign_source_16;
        PyObject *tmp_called_instance_4;
        CHECK_OBJECT( var_process );
        tmp_called_instance_4 = var_process;
        frame_b7ad6617339f8bbe8f5dcdac8aa127fa->m_frame.f_lineno = 484;
        tmp_assign_source_16 = CALL_METHOD_NO_ARGS( tmp_called_instance_4, const_str_plain_poll );
        if ( tmp_assign_source_16 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 484;
            type_description_1 = "oooooooooo";
            goto try_except_handler_4;
        }
        assert( var_retcode == NULL );
        var_retcode = tmp_assign_source_16;
    }
    {
        nuitka_bool tmp_condition_result_6;
        int tmp_and_left_truth_1;
        nuitka_bool tmp_and_left_value_1;
        nuitka_bool tmp_and_right_value_1;
        int tmp_truth_name_2;
        int tmp_truth_name_3;
        CHECK_OBJECT( par_check );
        tmp_truth_name_2 = CHECK_IF_TRUE( par_check );
        if ( tmp_truth_name_2 == -1 )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 485;
            type_description_1 = "oooooooooo";
            goto try_except_handler_4;
        }
        tmp_and_left_value_1 = tmp_truth_name_2 == 1 ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
        tmp_and_left_truth_1 = tmp_and_left_value_1 == NUITKA_BOOL_TRUE ? 1 : 0;
        if ( tmp_and_left_truth_1 == 1 )
        {
            goto and_right_1;
        }
        else
        {
            goto and_left_1;
        }
        and_right_1:;
        CHECK_OBJECT( var_retcode );
        tmp_truth_name_3 = CHECK_IF_TRUE( var_retcode );
        if ( tmp_truth_name_3 == -1 )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 485;
            type_description_1 = "oooooooooo";
            goto try_except_handler_4;
        }
        tmp_and_right_value_1 = tmp_truth_name_3 == 1 ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
        tmp_condition_result_6 = tmp_and_right_value_1;
        goto and_end_1;
        and_left_1:;
        tmp_condition_result_6 = tmp_and_left_value_1;
        and_end_1:;
        if ( tmp_condition_result_6 == NUITKA_BOOL_TRUE )
        {
            goto branch_yes_6;
        }
        else
        {
            goto branch_no_6;
        }
        branch_yes_6:;
        {
            PyObject *tmp_raise_type_4;
            PyObject *tmp_called_name_4;
            PyObject *tmp_mvar_value_7;
            PyObject *tmp_args_name_3;
            PyObject *tmp_tuple_element_3;
            PyObject *tmp_source_name_5;
            PyObject *tmp_kw_name_3;
            PyObject *tmp_dict_key_4;
            PyObject *tmp_dict_value_4;
            PyObject *tmp_dict_key_5;
            PyObject *tmp_dict_value_5;
            tmp_mvar_value_7 = GET_STRING_DICT_VALUE( moduledict_subprocess, (Nuitka_StringObject *)const_str_plain_CalledProcessError );

            if (unlikely( tmp_mvar_value_7 == NULL ))
            {
                tmp_mvar_value_7 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_CalledProcessError );
            }

            if ( tmp_mvar_value_7 == NULL )
            {

                exception_type = PyExc_NameError;
                Py_INCREF( exception_type );
                exception_value = PyUnicode_FromFormat( "name '%s' is not defined", "CalledProcessError" );
                exception_tb = NULL;
                NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
                CHAIN_EXCEPTION( exception_value );

                exception_lineno = 486;
                type_description_1 = "oooooooooo";
                goto try_except_handler_4;
            }

            tmp_called_name_4 = tmp_mvar_value_7;
            CHECK_OBJECT( var_retcode );
            tmp_tuple_element_3 = var_retcode;
            tmp_args_name_3 = PyTuple_New( 2 );
            Py_INCREF( tmp_tuple_element_3 );
            PyTuple_SET_ITEM( tmp_args_name_3, 0, tmp_tuple_element_3 );
            CHECK_OBJECT( var_process );
            tmp_source_name_5 = var_process;
            tmp_tuple_element_3 = LOOKUP_ATTRIBUTE( tmp_source_name_5, const_str_plain_args );
            if ( tmp_tuple_element_3 == NULL )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
                Py_DECREF( tmp_args_name_3 );

                exception_lineno = 486;
                type_description_1 = "oooooooooo";
                goto try_except_handler_4;
            }
            PyTuple_SET_ITEM( tmp_args_name_3, 1, tmp_tuple_element_3 );
            tmp_dict_key_4 = const_str_plain_output;
            CHECK_OBJECT( var_stdout );
            tmp_dict_value_4 = var_stdout;
            tmp_kw_name_3 = _PyDict_NewPresized( 2 );
            tmp_res = PyDict_SetItem( tmp_kw_name_3, tmp_dict_key_4, tmp_dict_value_4 );
            assert( !(tmp_res != 0) );
            tmp_dict_key_5 = const_str_plain_stderr;
            CHECK_OBJECT( var_stderr );
            tmp_dict_value_5 = var_stderr;
            tmp_res = PyDict_SetItem( tmp_kw_name_3, tmp_dict_key_5, tmp_dict_value_5 );
            assert( !(tmp_res != 0) );
            frame_b7ad6617339f8bbe8f5dcdac8aa127fa->m_frame.f_lineno = 486;
            tmp_raise_type_4 = CALL_FUNCTION( tmp_called_name_4, tmp_args_name_3, tmp_kw_name_3 );
            Py_DECREF( tmp_args_name_3 );
            Py_DECREF( tmp_kw_name_3 );
            if ( tmp_raise_type_4 == NULL )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 486;
                type_description_1 = "oooooooooo";
                goto try_except_handler_4;
            }
            exception_type = tmp_raise_type_4;
            exception_lineno = 486;
            RAISE_EXCEPTION_WITH_TYPE( &exception_type, &exception_value, &exception_tb );
            type_description_1 = "oooooooooo";
            goto try_except_handler_4;
        }
        branch_no_6:;
    }
    goto try_end_6;
    // Exception handler code:
    try_except_handler_4:;
    exception_keeper_type_7 = exception_type;
    exception_keeper_value_7 = exception_value;
    exception_keeper_tb_7 = exception_tb;
    exception_keeper_lineno_7 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    // Preserve existing published exception.
    exception_preserved_type_2 = EXC_TYPE(PyThreadState_GET());
    Py_XINCREF( exception_preserved_type_2 );
    exception_preserved_value_2 = EXC_VALUE(PyThreadState_GET());
    Py_XINCREF( exception_preserved_value_2 );
    exception_preserved_tb_2 = (PyTracebackObject *)EXC_TRACEBACK(PyThreadState_GET());
    Py_XINCREF( exception_preserved_tb_2 );

    if ( exception_keeper_tb_7 == NULL )
    {
        exception_keeper_tb_7 = MAKE_TRACEBACK( frame_b7ad6617339f8bbe8f5dcdac8aa127fa, exception_keeper_lineno_7 );
    }
    else if ( exception_keeper_lineno_7 != 0 )
    {
        exception_keeper_tb_7 = ADD_TRACEBACK( exception_keeper_tb_7, frame_b7ad6617339f8bbe8f5dcdac8aa127fa, exception_keeper_lineno_7 );
    }

    NORMALIZE_EXCEPTION( &exception_keeper_type_7, &exception_keeper_value_7, &exception_keeper_tb_7 );
    PyException_SetTraceback( exception_keeper_value_7, (PyObject *)exception_keeper_tb_7 );
    PUBLISH_EXCEPTION( &exception_keeper_type_7, &exception_keeper_value_7, &exception_keeper_tb_7 );
    // Tried code:
    {
        nuitka_bool tmp_condition_result_7;
        PyObject *tmp_compexpr_left_6;
        PyObject *tmp_compexpr_right_6;
        tmp_compexpr_left_6 = EXC_TYPE(PyThreadState_GET());
        tmp_compexpr_right_6 = PyExc_BaseException;
        tmp_res = EXCEPTION_MATCH_BOOL( tmp_compexpr_left_6, tmp_compexpr_right_6 );
        if ( tmp_res == -1 )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 472;
            type_description_1 = "oooooooooo";
            goto try_except_handler_11;
        }
        tmp_condition_result_7 = ( tmp_res != 0 ) ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
        if ( tmp_condition_result_7 == NUITKA_BOOL_TRUE )
        {
            goto branch_yes_7;
        }
        else
        {
            goto branch_no_7;
        }
        branch_yes_7:;
        {
            nuitka_bool tmp_assign_source_17;
            tmp_assign_source_17 = NUITKA_BOOL_FALSE;
            tmp_with_1__indicator = tmp_assign_source_17;
        }
        {
            nuitka_bool tmp_condition_result_8;
            PyObject *tmp_operand_name_1;
            PyObject *tmp_called_name_5;
            PyObject *tmp_args_element_name_1;
            PyObject *tmp_args_element_name_2;
            PyObject *tmp_args_element_name_3;
            CHECK_OBJECT( tmp_with_1__exit );
            tmp_called_name_5 = tmp_with_1__exit;
            tmp_args_element_name_1 = EXC_TYPE(PyThreadState_GET());
            tmp_args_element_name_2 = EXC_VALUE(PyThreadState_GET());
            tmp_args_element_name_3 = EXC_TRACEBACK(PyThreadState_GET());
            frame_b7ad6617339f8bbe8f5dcdac8aa127fa->m_frame.f_lineno = 472;
            {
                PyObject *call_args[] = { tmp_args_element_name_1, tmp_args_element_name_2, tmp_args_element_name_3 };
                tmp_operand_name_1 = CALL_FUNCTION_WITH_ARGS3( tmp_called_name_5, call_args );
            }

            if ( tmp_operand_name_1 == NULL )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 472;
                type_description_1 = "oooooooooo";
                goto try_except_handler_11;
            }
            tmp_res = CHECK_IF_TRUE( tmp_operand_name_1 );
            Py_DECREF( tmp_operand_name_1 );
            if ( tmp_res == -1 )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 472;
                type_description_1 = "oooooooooo";
                goto try_except_handler_11;
            }
            tmp_condition_result_8 = ( tmp_res == 0 ) ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
            if ( tmp_condition_result_8 == NUITKA_BOOL_TRUE )
            {
                goto branch_yes_8;
            }
            else
            {
                goto branch_no_8;
            }
            branch_yes_8:;
            tmp_result = RERAISE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
            if (unlikely( tmp_result == false ))
            {
                exception_lineno = 472;
            }

            if (exception_tb && exception_tb->tb_frame == &frame_b7ad6617339f8bbe8f5dcdac8aa127fa->m_frame) frame_b7ad6617339f8bbe8f5dcdac8aa127fa->m_frame.f_lineno = exception_tb->tb_lineno;
            type_description_1 = "oooooooooo";
            goto try_except_handler_11;
            branch_no_8:;
        }
        goto branch_end_7;
        branch_no_7:;
        tmp_result = RERAISE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
        if (unlikely( tmp_result == false ))
        {
            exception_lineno = 472;
        }

        if (exception_tb && exception_tb->tb_frame == &frame_b7ad6617339f8bbe8f5dcdac8aa127fa->m_frame) frame_b7ad6617339f8bbe8f5dcdac8aa127fa->m_frame.f_lineno = exception_tb->tb_lineno;
        type_description_1 = "oooooooooo";
        goto try_except_handler_11;
        branch_end_7:;
    }
    goto try_end_7;
    // Exception handler code:
    try_except_handler_11:;
    exception_keeper_type_8 = exception_type;
    exception_keeper_value_8 = exception_value;
    exception_keeper_tb_8 = exception_tb;
    exception_keeper_lineno_8 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    // Restore previous exception.
    SET_CURRENT_EXCEPTION( exception_preserved_type_2, exception_preserved_value_2, exception_preserved_tb_2 );
    // Re-raise.
    exception_type = exception_keeper_type_8;
    exception_value = exception_keeper_value_8;
    exception_tb = exception_keeper_tb_8;
    exception_lineno = exception_keeper_lineno_8;

    goto try_except_handler_3;
    // End of try:
    try_end_7:;
    // Restore previous exception.
    SET_CURRENT_EXCEPTION( exception_preserved_type_2, exception_preserved_value_2, exception_preserved_tb_2 );
    goto try_end_6;
    // exception handler codes exits in all cases
    NUITKA_CANNOT_GET_HERE( subprocess$$$function_23_run );
    return NULL;
    // End of try:
    try_end_6:;
    goto try_end_8;
    // Exception handler code:
    try_except_handler_3:;
    exception_keeper_type_9 = exception_type;
    exception_keeper_value_9 = exception_value;
    exception_keeper_tb_9 = exception_tb;
    exception_keeper_lineno_9 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    {
        nuitka_bool tmp_condition_result_9;
        nuitka_bool tmp_compexpr_left_7;
        nuitka_bool tmp_compexpr_right_7;
        assert( tmp_with_1__indicator != NUITKA_BOOL_UNASSIGNED);
        tmp_compexpr_left_7 = tmp_with_1__indicator;
        tmp_compexpr_right_7 = NUITKA_BOOL_TRUE;
        tmp_condition_result_9 = ( tmp_compexpr_left_7 == tmp_compexpr_right_7 ) ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
        if ( tmp_condition_result_9 == NUITKA_BOOL_TRUE )
        {
            goto branch_yes_9;
        }
        else
        {
            goto branch_no_9;
        }
        branch_yes_9:;
        {
            PyObject *tmp_called_name_6;
            PyObject *tmp_call_result_3;
            CHECK_OBJECT( tmp_with_1__exit );
            tmp_called_name_6 = tmp_with_1__exit;
            frame_b7ad6617339f8bbe8f5dcdac8aa127fa->m_frame.f_lineno = 472;
            tmp_call_result_3 = CALL_FUNCTION_WITH_ARGS3( tmp_called_name_6, &PyTuple_GET_ITEM( const_tuple_none_none_none_tuple, 0 ) );

            if ( tmp_call_result_3 == NULL )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );

                Py_DECREF( exception_keeper_type_9 );
                Py_XDECREF( exception_keeper_value_9 );
                Py_XDECREF( exception_keeper_tb_9 );

                exception_lineno = 472;
                type_description_1 = "oooooooooo";
                goto try_except_handler_2;
            }
            Py_DECREF( tmp_call_result_3 );
        }
        branch_no_9:;
    }
    // Re-raise.
    exception_type = exception_keeper_type_9;
    exception_value = exception_keeper_value_9;
    exception_tb = exception_keeper_tb_9;
    exception_lineno = exception_keeper_lineno_9;

    goto try_except_handler_2;
    // End of try:
    try_end_8:;
    {
        nuitka_bool tmp_condition_result_10;
        nuitka_bool tmp_compexpr_left_8;
        nuitka_bool tmp_compexpr_right_8;
        assert( tmp_with_1__indicator != NUITKA_BOOL_UNASSIGNED);
        tmp_compexpr_left_8 = tmp_with_1__indicator;
        tmp_compexpr_right_8 = NUITKA_BOOL_TRUE;
        tmp_condition_result_10 = ( tmp_compexpr_left_8 == tmp_compexpr_right_8 ) ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
        if ( tmp_condition_result_10 == NUITKA_BOOL_TRUE )
        {
            goto branch_yes_10;
        }
        else
        {
            goto branch_no_10;
        }
        branch_yes_10:;
        {
            PyObject *tmp_called_name_7;
            PyObject *tmp_call_result_4;
            CHECK_OBJECT( tmp_with_1__exit );
            tmp_called_name_7 = tmp_with_1__exit;
            frame_b7ad6617339f8bbe8f5dcdac8aa127fa->m_frame.f_lineno = 472;
            tmp_call_result_4 = CALL_FUNCTION_WITH_ARGS3( tmp_called_name_7, &PyTuple_GET_ITEM( const_tuple_none_none_none_tuple, 0 ) );

            if ( tmp_call_result_4 == NULL )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 472;
                type_description_1 = "oooooooooo";
                goto try_except_handler_2;
            }
            Py_DECREF( tmp_call_result_4 );
        }
        branch_no_10:;
    }
    goto try_end_9;
    // Exception handler code:
    try_except_handler_2:;
    exception_keeper_type_10 = exception_type;
    exception_keeper_value_10 = exception_value;
    exception_keeper_tb_10 = exception_tb;
    exception_keeper_lineno_10 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    Py_XDECREF( tmp_with_1__source );
    tmp_with_1__source = NULL;

    Py_XDECREF( tmp_with_1__enter );
    tmp_with_1__enter = NULL;

    Py_XDECREF( tmp_with_1__exit );
    tmp_with_1__exit = NULL;

    // Re-raise.
    exception_type = exception_keeper_type_10;
    exception_value = exception_keeper_value_10;
    exception_tb = exception_keeper_tb_10;
    exception_lineno = exception_keeper_lineno_10;

    goto frame_exception_exit_1;
    // End of try:
    try_end_9:;
    CHECK_OBJECT( (PyObject *)tmp_with_1__source );
    Py_DECREF( tmp_with_1__source );
    tmp_with_1__source = NULL;

    CHECK_OBJECT( (PyObject *)tmp_with_1__enter );
    Py_DECREF( tmp_with_1__enter );
    tmp_with_1__enter = NULL;

    CHECK_OBJECT( (PyObject *)tmp_with_1__exit );
    Py_DECREF( tmp_with_1__exit );
    tmp_with_1__exit = NULL;

    {
        PyObject *tmp_called_name_8;
        PyObject *tmp_mvar_value_8;
        PyObject *tmp_args_element_name_4;
        PyObject *tmp_source_name_6;
        PyObject *tmp_args_element_name_5;
        PyObject *tmp_args_element_name_6;
        PyObject *tmp_args_element_name_7;
        tmp_mvar_value_8 = GET_STRING_DICT_VALUE( moduledict_subprocess, (Nuitka_StringObject *)const_str_plain_CompletedProcess );

        if (unlikely( tmp_mvar_value_8 == NULL ))
        {
            tmp_mvar_value_8 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_CompletedProcess );
        }

        if ( tmp_mvar_value_8 == NULL )
        {

            exception_type = PyExc_NameError;
            Py_INCREF( exception_type );
            exception_value = PyUnicode_FromFormat( "name '%s' is not defined", "CompletedProcess" );
            exception_tb = NULL;
            NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
            CHAIN_EXCEPTION( exception_value );

            exception_lineno = 488;
            type_description_1 = "oooooooooo";
            goto frame_exception_exit_1;
        }

        tmp_called_name_8 = tmp_mvar_value_8;
        CHECK_OBJECT( var_process );
        tmp_source_name_6 = var_process;
        tmp_args_element_name_4 = LOOKUP_ATTRIBUTE( tmp_source_name_6, const_str_plain_args );
        if ( tmp_args_element_name_4 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 488;
            type_description_1 = "oooooooooo";
            goto frame_exception_exit_1;
        }
        if ( var_retcode == NULL )
        {
            Py_DECREF( tmp_args_element_name_4 );
            exception_type = PyExc_UnboundLocalError;
            Py_INCREF( exception_type );
            exception_value = PyUnicode_FromFormat( "local variable '%s' referenced before assignment", "retcode" );
            exception_tb = NULL;
            NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
            CHAIN_EXCEPTION( exception_value );

            exception_lineno = 488;
            type_description_1 = "oooooooooo";
            goto frame_exception_exit_1;
        }

        tmp_args_element_name_5 = var_retcode;
        if ( var_stdout == NULL )
        {
            Py_DECREF( tmp_args_element_name_4 );
            exception_type = PyExc_UnboundLocalError;
            Py_INCREF( exception_type );
            exception_value = PyUnicode_FromFormat( "local variable '%s' referenced before assignment", "stdout" );
            exception_tb = NULL;
            NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
            CHAIN_EXCEPTION( exception_value );

            exception_lineno = 488;
            type_description_1 = "oooooooooo";
            goto frame_exception_exit_1;
        }

        tmp_args_element_name_6 = var_stdout;
        if ( var_stderr == NULL )
        {
            Py_DECREF( tmp_args_element_name_4 );
            exception_type = PyExc_UnboundLocalError;
            Py_INCREF( exception_type );
            exception_value = PyUnicode_FromFormat( "local variable '%s' referenced before assignment", "stderr" );
            exception_tb = NULL;
            NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
            CHAIN_EXCEPTION( exception_value );

            exception_lineno = 488;
            type_description_1 = "oooooooooo";
            goto frame_exception_exit_1;
        }

        tmp_args_element_name_7 = var_stderr;
        frame_b7ad6617339f8bbe8f5dcdac8aa127fa->m_frame.f_lineno = 488;
        {
            PyObject *call_args[] = { tmp_args_element_name_4, tmp_args_element_name_5, tmp_args_element_name_6, tmp_args_element_name_7 };
            tmp_return_value = CALL_FUNCTION_WITH_ARGS4( tmp_called_name_8, call_args );
        }

        Py_DECREF( tmp_args_element_name_4 );
        if ( tmp_return_value == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 488;
            type_description_1 = "oooooooooo";
            goto frame_exception_exit_1;
        }
        goto frame_return_exit_1;
    }

#if 0
    RESTORE_FRAME_EXCEPTION( frame_b7ad6617339f8bbe8f5dcdac8aa127fa );
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto frame_no_exception_1;

    frame_return_exit_1:;
#if 0
    RESTORE_FRAME_EXCEPTION( frame_b7ad6617339f8bbe8f5dcdac8aa127fa );
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto try_return_handler_1;

    frame_exception_exit_1:;

#if 0
    RESTORE_FRAME_EXCEPTION( frame_b7ad6617339f8bbe8f5dcdac8aa127fa );
#endif

    if ( exception_tb == NULL )
    {
        exception_tb = MAKE_TRACEBACK( frame_b7ad6617339f8bbe8f5dcdac8aa127fa, exception_lineno );
    }
    else if ( exception_tb->tb_frame != &frame_b7ad6617339f8bbe8f5dcdac8aa127fa->m_frame )
    {
        exception_tb = ADD_TRACEBACK( exception_tb, frame_b7ad6617339f8bbe8f5dcdac8aa127fa, exception_lineno );
    }

    // Attachs locals to frame if any.
    Nuitka_Frame_AttachLocals(
        (struct Nuitka_FrameObject *)frame_b7ad6617339f8bbe8f5dcdac8aa127fa,
        type_description_1,
        par_input,
        par_capture_output,
        par_timeout,
        par_check,
        par_popenargs,
        par_kwargs,
        var_process,
        var_stdout,
        var_stderr,
        var_retcode
    );


    // Release cached frame.
    if ( frame_b7ad6617339f8bbe8f5dcdac8aa127fa == cache_frame_b7ad6617339f8bbe8f5dcdac8aa127fa )
    {
        Py_DECREF( frame_b7ad6617339f8bbe8f5dcdac8aa127fa );
    }
    cache_frame_b7ad6617339f8bbe8f5dcdac8aa127fa = NULL;

    assertFrameObject( frame_b7ad6617339f8bbe8f5dcdac8aa127fa );

    // Put the previous frame back on top.
    popFrameStack();

    // Return the error.
    goto try_except_handler_1;

    frame_no_exception_1:;
    // tried codes exits in all cases
    NUITKA_CANNOT_GET_HERE( subprocess$$$function_23_run );
    return NULL;
    // Return handler code:
    try_return_handler_1:;
    CHECK_OBJECT( (PyObject *)par_input );
    Py_DECREF( par_input );
    par_input = NULL;

    CHECK_OBJECT( (PyObject *)par_capture_output );
    Py_DECREF( par_capture_output );
    par_capture_output = NULL;

    CHECK_OBJECT( (PyObject *)par_timeout );
    Py_DECREF( par_timeout );
    par_timeout = NULL;

    CHECK_OBJECT( (PyObject *)par_check );
    Py_DECREF( par_check );
    par_check = NULL;

    CHECK_OBJECT( (PyObject *)par_popenargs );
    Py_DECREF( par_popenargs );
    par_popenargs = NULL;

    CHECK_OBJECT( (PyObject *)par_kwargs );
    Py_DECREF( par_kwargs );
    par_kwargs = NULL;

    CHECK_OBJECT( (PyObject *)var_process );
    Py_DECREF( var_process );
    var_process = NULL;

    Py_XDECREF( var_stdout );
    var_stdout = NULL;

    Py_XDECREF( var_stderr );
    var_stderr = NULL;

    Py_XDECREF( var_retcode );
    var_retcode = NULL;

    goto function_return_exit;
    // Exception handler code:
    try_except_handler_1:;
    exception_keeper_type_11 = exception_type;
    exception_keeper_value_11 = exception_value;
    exception_keeper_tb_11 = exception_tb;
    exception_keeper_lineno_11 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    CHECK_OBJECT( (PyObject *)par_input );
    Py_DECREF( par_input );
    par_input = NULL;

    CHECK_OBJECT( (PyObject *)par_capture_output );
    Py_DECREF( par_capture_output );
    par_capture_output = NULL;

    CHECK_OBJECT( (PyObject *)par_timeout );
    Py_DECREF( par_timeout );
    par_timeout = NULL;

    CHECK_OBJECT( (PyObject *)par_check );
    Py_DECREF( par_check );
    par_check = NULL;

    CHECK_OBJECT( (PyObject *)par_popenargs );
    Py_DECREF( par_popenargs );
    par_popenargs = NULL;

    CHECK_OBJECT( (PyObject *)par_kwargs );
    Py_DECREF( par_kwargs );
    par_kwargs = NULL;

    Py_XDECREF( var_process );
    var_process = NULL;

    Py_XDECREF( var_stdout );
    var_stdout = NULL;

    Py_XDECREF( var_stderr );
    var_stderr = NULL;

    Py_XDECREF( var_retcode );
    var_retcode = NULL;

    // Re-raise.
    exception_type = exception_keeper_type_11;
    exception_value = exception_keeper_value_11;
    exception_tb = exception_keeper_tb_11;
    exception_lineno = exception_keeper_lineno_11;

    goto function_exception_exit;
    // End of try:

    // Return statement must have exited already.
    NUITKA_CANNOT_GET_HERE( subprocess$$$function_23_run );
    return NULL;

function_exception_exit:
    assert( exception_type );
    RESTORE_ERROR_OCCURRED( exception_type, exception_value, exception_tb );

    return NULL;

function_return_exit:
   // Function cleanup code if any.


   // Actual function exit with return value, making sure we did not make
   // the error status worse despite non-NULL return.
   CHECK_OBJECT( tmp_return_value );
   assert( had_error || !ERROR_OCCURRED() );
   return tmp_return_value;
}


static PyObject *impl_subprocess$$$function_24_list2cmdline( struct Nuitka_FunctionObject const *self, PyObject **python_pars )
{
    // Preserve error status for checks
#ifndef __NUITKA_NO_ASSERT__
    NUITKA_MAY_BE_UNUSED bool had_error = ERROR_OCCURRED();
#endif

    // Local variable declarations.
    PyObject *par_seq = python_pars[ 0 ];
    PyObject *var_result = NULL;
    PyObject *var_needquote = NULL;
    PyObject *var_arg = NULL;
    PyObject *var_bs_buf = NULL;
    PyObject *var_c = NULL;
    PyObject *tmp_for_loop_1__for_iterator = NULL;
    PyObject *tmp_for_loop_1__iter_value = NULL;
    PyObject *tmp_for_loop_2__for_iterator = NULL;
    PyObject *tmp_for_loop_2__iter_value = NULL;
    struct Nuitka_FrameObject *frame_3ab7bcc7becc4741b37856918d8ae0ba;
    NUITKA_MAY_BE_UNUSED char const *type_description_1 = NULL;
    PyObject *exception_type = NULL;
    PyObject *exception_value = NULL;
    PyTracebackObject *exception_tb = NULL;
    NUITKA_MAY_BE_UNUSED int exception_lineno = 0;
    int tmp_res;
    PyObject *exception_keeper_type_1;
    PyObject *exception_keeper_value_1;
    PyTracebackObject *exception_keeper_tb_1;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_1;
    PyObject *exception_keeper_type_2;
    PyObject *exception_keeper_value_2;
    PyTracebackObject *exception_keeper_tb_2;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_2;
    PyObject *tmp_return_value = NULL;
    static struct Nuitka_FrameObject *cache_frame_3ab7bcc7becc4741b37856918d8ae0ba = NULL;
    PyObject *exception_keeper_type_3;
    PyObject *exception_keeper_value_3;
    PyTracebackObject *exception_keeper_tb_3;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_3;

    // Actual function body.
    {
        PyObject *tmp_assign_source_1;
        tmp_assign_source_1 = PyList_New( 0 );
        assert( var_result == NULL );
        var_result = tmp_assign_source_1;
    }
    {
        PyObject *tmp_assign_source_2;
        tmp_assign_source_2 = Py_False;
        assert( var_needquote == NULL );
        Py_INCREF( tmp_assign_source_2 );
        var_needquote = tmp_assign_source_2;
    }
    // Tried code:
    MAKE_OR_REUSE_FRAME( cache_frame_3ab7bcc7becc4741b37856918d8ae0ba, codeobj_3ab7bcc7becc4741b37856918d8ae0ba, module_subprocess, sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *) );
    frame_3ab7bcc7becc4741b37856918d8ae0ba = cache_frame_3ab7bcc7becc4741b37856918d8ae0ba;

    // Push the new frame as the currently active one.
    pushFrameStack( frame_3ab7bcc7becc4741b37856918d8ae0ba );

    // Mark the frame object as in use, ref count 1 will be up for reuse.
    assert( Py_REFCNT( frame_3ab7bcc7becc4741b37856918d8ae0ba ) == 2 ); // Frame stack

    // Framed code:
    {
        PyObject *tmp_assign_source_3;
        PyObject *tmp_iter_arg_1;
        CHECK_OBJECT( par_seq );
        tmp_iter_arg_1 = par_seq;
        tmp_assign_source_3 = MAKE_ITERATOR( tmp_iter_arg_1 );
        if ( tmp_assign_source_3 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 523;
            type_description_1 = "oooooo";
            goto frame_exception_exit_1;
        }
        assert( tmp_for_loop_1__for_iterator == NULL );
        tmp_for_loop_1__for_iterator = tmp_assign_source_3;
    }
    // Tried code:
    loop_start_1:;
    {
        PyObject *tmp_next_source_1;
        PyObject *tmp_assign_source_4;
        CHECK_OBJECT( tmp_for_loop_1__for_iterator );
        tmp_next_source_1 = tmp_for_loop_1__for_iterator;
        tmp_assign_source_4 = ITERATOR_NEXT( tmp_next_source_1 );
        if ( tmp_assign_source_4 == NULL )
        {
            if ( CHECK_AND_CLEAR_STOP_ITERATION_OCCURRED() )
            {

                goto loop_end_1;
            }
            else
            {

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
                type_description_1 = "oooooo";
                exception_lineno = 523;
                goto try_except_handler_2;
            }
        }

        {
            PyObject *old = tmp_for_loop_1__iter_value;
            tmp_for_loop_1__iter_value = tmp_assign_source_4;
            Py_XDECREF( old );
        }

    }
    {
        PyObject *tmp_assign_source_5;
        CHECK_OBJECT( tmp_for_loop_1__iter_value );
        tmp_assign_source_5 = tmp_for_loop_1__iter_value;
        {
            PyObject *old = var_arg;
            var_arg = tmp_assign_source_5;
            Py_INCREF( var_arg );
            Py_XDECREF( old );
        }

    }
    {
        PyObject *tmp_assign_source_6;
        tmp_assign_source_6 = PyList_New( 0 );
        {
            PyObject *old = var_bs_buf;
            var_bs_buf = tmp_assign_source_6;
            Py_XDECREF( old );
        }

    }
    {
        nuitka_bool tmp_condition_result_1;
        int tmp_truth_name_1;
        CHECK_OBJECT( var_result );
        tmp_truth_name_1 = CHECK_IF_TRUE( var_result );
        if ( tmp_truth_name_1 == -1 )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 527;
            type_description_1 = "oooooo";
            goto try_except_handler_2;
        }
        tmp_condition_result_1 = tmp_truth_name_1 == 1 ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
        if ( tmp_condition_result_1 == NUITKA_BOOL_TRUE )
        {
            goto branch_yes_1;
        }
        else
        {
            goto branch_no_1;
        }
        branch_yes_1:;
        {
            PyObject *tmp_called_instance_1;
            PyObject *tmp_call_result_1;
            CHECK_OBJECT( var_result );
            tmp_called_instance_1 = var_result;
            frame_3ab7bcc7becc4741b37856918d8ae0ba->m_frame.f_lineno = 528;
            tmp_call_result_1 = CALL_METHOD_WITH_ARGS1( tmp_called_instance_1, const_str_plain_append, &PyTuple_GET_ITEM( const_tuple_str_space_tuple, 0 ) );

            if ( tmp_call_result_1 == NULL )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 528;
                type_description_1 = "oooooo";
                goto try_except_handler_2;
            }
            Py_DECREF( tmp_call_result_1 );
        }
        branch_no_1:;
    }
    {
        PyObject *tmp_assign_source_7;
        int tmp_or_left_truth_1;
        PyObject *tmp_or_left_value_1;
        PyObject *tmp_or_right_value_1;
        PyObject *tmp_compexpr_left_1;
        PyObject *tmp_compexpr_right_1;
        int tmp_or_left_truth_2;
        PyObject *tmp_or_left_value_2;
        PyObject *tmp_or_right_value_2;
        PyObject *tmp_compexpr_left_2;
        PyObject *tmp_compexpr_right_2;
        PyObject *tmp_operand_name_1;
        tmp_compexpr_left_1 = const_str_space;
        CHECK_OBJECT( var_arg );
        tmp_compexpr_right_1 = var_arg;
        tmp_res = PySequence_Contains( tmp_compexpr_right_1, tmp_compexpr_left_1 );
        if ( tmp_res == -1 )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 530;
            type_description_1 = "oooooo";
            goto try_except_handler_2;
        }
        tmp_or_left_value_1 = ( tmp_res == 1 ) ? Py_True : Py_False;
        tmp_or_left_truth_1 = CHECK_IF_TRUE( tmp_or_left_value_1 );
        if ( tmp_or_left_truth_1 == 1 )
        {
            goto or_left_1;
        }
        else
        {
            goto or_right_1;
        }
        or_right_1:;
        tmp_compexpr_left_2 = const_str_chr_9;
        CHECK_OBJECT( var_arg );
        tmp_compexpr_right_2 = var_arg;
        tmp_res = PySequence_Contains( tmp_compexpr_right_2, tmp_compexpr_left_2 );
        if ( tmp_res == -1 )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 530;
            type_description_1 = "oooooo";
            goto try_except_handler_2;
        }
        tmp_or_left_value_2 = ( tmp_res == 1 ) ? Py_True : Py_False;
        tmp_or_left_truth_2 = CHECK_IF_TRUE( tmp_or_left_value_2 );
        if ( tmp_or_left_truth_2 == 1 )
        {
            goto or_left_2;
        }
        else
        {
            goto or_right_2;
        }
        or_right_2:;
        CHECK_OBJECT( var_arg );
        tmp_operand_name_1 = var_arg;
        tmp_res = CHECK_IF_TRUE( tmp_operand_name_1 );
        if ( tmp_res == -1 )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 530;
            type_description_1 = "oooooo";
            goto try_except_handler_2;
        }
        tmp_or_right_value_2 = ( tmp_res == 0 ) ? Py_True : Py_False;
        tmp_or_right_value_1 = tmp_or_right_value_2;
        goto or_end_2;
        or_left_2:;
        tmp_or_right_value_1 = tmp_or_left_value_2;
        or_end_2:;
        tmp_assign_source_7 = tmp_or_right_value_1;
        goto or_end_1;
        or_left_1:;
        tmp_assign_source_7 = tmp_or_left_value_1;
        or_end_1:;
        {
            PyObject *old = var_needquote;
            assert( old != NULL );
            var_needquote = tmp_assign_source_7;
            Py_INCREF( var_needquote );
            Py_DECREF( old );
        }

    }
    {
        nuitka_bool tmp_condition_result_2;
        int tmp_truth_name_2;
        CHECK_OBJECT( var_needquote );
        tmp_truth_name_2 = CHECK_IF_TRUE( var_needquote );
        if ( tmp_truth_name_2 == -1 )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 531;
            type_description_1 = "oooooo";
            goto try_except_handler_2;
        }
        tmp_condition_result_2 = tmp_truth_name_2 == 1 ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
        if ( tmp_condition_result_2 == NUITKA_BOOL_TRUE )
        {
            goto branch_yes_2;
        }
        else
        {
            goto branch_no_2;
        }
        branch_yes_2:;
        {
            PyObject *tmp_called_instance_2;
            PyObject *tmp_call_result_2;
            CHECK_OBJECT( var_result );
            tmp_called_instance_2 = var_result;
            frame_3ab7bcc7becc4741b37856918d8ae0ba->m_frame.f_lineno = 532;
            tmp_call_result_2 = CALL_METHOD_WITH_ARGS1( tmp_called_instance_2, const_str_plain_append, &PyTuple_GET_ITEM( const_tuple_str_chr_34_tuple, 0 ) );

            if ( tmp_call_result_2 == NULL )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 532;
                type_description_1 = "oooooo";
                goto try_except_handler_2;
            }
            Py_DECREF( tmp_call_result_2 );
        }
        branch_no_2:;
    }
    {
        PyObject *tmp_assign_source_8;
        PyObject *tmp_iter_arg_2;
        CHECK_OBJECT( var_arg );
        tmp_iter_arg_2 = var_arg;
        tmp_assign_source_8 = MAKE_ITERATOR( tmp_iter_arg_2 );
        if ( tmp_assign_source_8 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 534;
            type_description_1 = "oooooo";
            goto try_except_handler_2;
        }
        {
            PyObject *old = tmp_for_loop_2__for_iterator;
            tmp_for_loop_2__for_iterator = tmp_assign_source_8;
            Py_XDECREF( old );
        }

    }
    // Tried code:
    loop_start_2:;
    {
        PyObject *tmp_next_source_2;
        PyObject *tmp_assign_source_9;
        CHECK_OBJECT( tmp_for_loop_2__for_iterator );
        tmp_next_source_2 = tmp_for_loop_2__for_iterator;
        tmp_assign_source_9 = ITERATOR_NEXT( tmp_next_source_2 );
        if ( tmp_assign_source_9 == NULL )
        {
            if ( CHECK_AND_CLEAR_STOP_ITERATION_OCCURRED() )
            {

                goto loop_end_2;
            }
            else
            {

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
                type_description_1 = "oooooo";
                exception_lineno = 534;
                goto try_except_handler_3;
            }
        }

        {
            PyObject *old = tmp_for_loop_2__iter_value;
            tmp_for_loop_2__iter_value = tmp_assign_source_9;
            Py_XDECREF( old );
        }

    }
    {
        PyObject *tmp_assign_source_10;
        CHECK_OBJECT( tmp_for_loop_2__iter_value );
        tmp_assign_source_10 = tmp_for_loop_2__iter_value;
        {
            PyObject *old = var_c;
            var_c = tmp_assign_source_10;
            Py_INCREF( var_c );
            Py_XDECREF( old );
        }

    }
    {
        nuitka_bool tmp_condition_result_3;
        PyObject *tmp_compexpr_left_3;
        PyObject *tmp_compexpr_right_3;
        CHECK_OBJECT( var_c );
        tmp_compexpr_left_3 = var_c;
        tmp_compexpr_right_3 = const_str_chr_92;
        tmp_res = RICH_COMPARE_BOOL_EQ_OBJECT_OBJECT( tmp_compexpr_left_3, tmp_compexpr_right_3 );
        if ( tmp_res == -1 )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 535;
            type_description_1 = "oooooo";
            goto try_except_handler_3;
        }
        tmp_condition_result_3 = ( tmp_res != 0 ) ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
        if ( tmp_condition_result_3 == NUITKA_BOOL_TRUE )
        {
            goto branch_yes_3;
        }
        else
        {
            goto branch_no_3;
        }
        branch_yes_3:;
        {
            PyObject *tmp_called_instance_3;
            PyObject *tmp_call_result_3;
            PyObject *tmp_args_element_name_1;
            if ( var_bs_buf == NULL )
            {

                exception_type = PyExc_UnboundLocalError;
                Py_INCREF( exception_type );
                exception_value = PyUnicode_FromFormat( "local variable '%s' referenced before assignment", "bs_buf" );
                exception_tb = NULL;
                NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
                CHAIN_EXCEPTION( exception_value );

                exception_lineno = 537;
                type_description_1 = "oooooo";
                goto try_except_handler_3;
            }

            tmp_called_instance_3 = var_bs_buf;
            CHECK_OBJECT( var_c );
            tmp_args_element_name_1 = var_c;
            frame_3ab7bcc7becc4741b37856918d8ae0ba->m_frame.f_lineno = 537;
            {
                PyObject *call_args[] = { tmp_args_element_name_1 };
                tmp_call_result_3 = CALL_METHOD_WITH_ARGS1( tmp_called_instance_3, const_str_plain_append, call_args );
            }

            if ( tmp_call_result_3 == NULL )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 537;
                type_description_1 = "oooooo";
                goto try_except_handler_3;
            }
            Py_DECREF( tmp_call_result_3 );
        }
        goto branch_end_3;
        branch_no_3:;
        {
            nuitka_bool tmp_condition_result_4;
            PyObject *tmp_compexpr_left_4;
            PyObject *tmp_compexpr_right_4;
            CHECK_OBJECT( var_c );
            tmp_compexpr_left_4 = var_c;
            tmp_compexpr_right_4 = const_str_chr_34;
            tmp_res = RICH_COMPARE_BOOL_EQ_OBJECT_OBJECT( tmp_compexpr_left_4, tmp_compexpr_right_4 );
            if ( tmp_res == -1 )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 538;
                type_description_1 = "oooooo";
                goto try_except_handler_3;
            }
            tmp_condition_result_4 = ( tmp_res != 0 ) ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
            if ( tmp_condition_result_4 == NUITKA_BOOL_TRUE )
            {
                goto branch_yes_4;
            }
            else
            {
                goto branch_no_4;
            }
            branch_yes_4:;
            {
                PyObject *tmp_called_name_1;
                PyObject *tmp_source_name_1;
                PyObject *tmp_call_result_4;
                PyObject *tmp_args_element_name_2;
                PyObject *tmp_left_name_1;
                PyObject *tmp_left_name_2;
                PyObject *tmp_right_name_1;
                PyObject *tmp_len_arg_1;
                PyObject *tmp_right_name_2;
                CHECK_OBJECT( var_result );
                tmp_source_name_1 = var_result;
                tmp_called_name_1 = LOOKUP_ATTRIBUTE( tmp_source_name_1, const_str_plain_append );
                if ( tmp_called_name_1 == NULL )
                {
                    assert( ERROR_OCCURRED() );

                    FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                    exception_lineno = 540;
                    type_description_1 = "oooooo";
                    goto try_except_handler_3;
                }
                tmp_left_name_2 = const_str_chr_92;
                if ( var_bs_buf == NULL )
                {
                    Py_DECREF( tmp_called_name_1 );
                    exception_type = PyExc_UnboundLocalError;
                    Py_INCREF( exception_type );
                    exception_value = PyUnicode_FromFormat( "local variable '%s' referenced before assignment", "bs_buf" );
                    exception_tb = NULL;
                    NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
                    CHAIN_EXCEPTION( exception_value );

                    exception_lineno = 540;
                    type_description_1 = "oooooo";
                    goto try_except_handler_3;
                }

                tmp_len_arg_1 = var_bs_buf;
                tmp_right_name_1 = BUILTIN_LEN( tmp_len_arg_1 );
                if ( tmp_right_name_1 == NULL )
                {
                    assert( ERROR_OCCURRED() );

                    FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
                    Py_DECREF( tmp_called_name_1 );

                    exception_lineno = 540;
                    type_description_1 = "oooooo";
                    goto try_except_handler_3;
                }
                tmp_left_name_1 = BINARY_OPERATION_MUL( tmp_left_name_2, tmp_right_name_1 );
                Py_DECREF( tmp_right_name_1 );
                if ( tmp_left_name_1 == NULL )
                {
                    assert( ERROR_OCCURRED() );

                    FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
                    Py_DECREF( tmp_called_name_1 );

                    exception_lineno = 540;
                    type_description_1 = "oooooo";
                    goto try_except_handler_3;
                }
                tmp_right_name_2 = const_int_pos_2;
                tmp_args_element_name_2 = BINARY_OPERATION_MUL( tmp_left_name_1, tmp_right_name_2 );
                Py_DECREF( tmp_left_name_1 );
                if ( tmp_args_element_name_2 == NULL )
                {
                    assert( ERROR_OCCURRED() );

                    FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
                    Py_DECREF( tmp_called_name_1 );

                    exception_lineno = 540;
                    type_description_1 = "oooooo";
                    goto try_except_handler_3;
                }
                frame_3ab7bcc7becc4741b37856918d8ae0ba->m_frame.f_lineno = 540;
                {
                    PyObject *call_args[] = { tmp_args_element_name_2 };
                    tmp_call_result_4 = CALL_FUNCTION_WITH_ARGS1( tmp_called_name_1, call_args );
                }

                Py_DECREF( tmp_called_name_1 );
                Py_DECREF( tmp_args_element_name_2 );
                if ( tmp_call_result_4 == NULL )
                {
                    assert( ERROR_OCCURRED() );

                    FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                    exception_lineno = 540;
                    type_description_1 = "oooooo";
                    goto try_except_handler_3;
                }
                Py_DECREF( tmp_call_result_4 );
            }
            {
                PyObject *tmp_assign_source_11;
                tmp_assign_source_11 = PyList_New( 0 );
                {
                    PyObject *old = var_bs_buf;
                    var_bs_buf = tmp_assign_source_11;
                    Py_XDECREF( old );
                }

            }
            {
                PyObject *tmp_called_instance_4;
                PyObject *tmp_call_result_5;
                CHECK_OBJECT( var_result );
                tmp_called_instance_4 = var_result;
                frame_3ab7bcc7becc4741b37856918d8ae0ba->m_frame.f_lineno = 542;
                tmp_call_result_5 = CALL_METHOD_WITH_ARGS1( tmp_called_instance_4, const_str_plain_append, &PyTuple_GET_ITEM( const_tuple_str_digest_c245c8a772b3a33119deac8565a08f57_tuple, 0 ) );

                if ( tmp_call_result_5 == NULL )
                {
                    assert( ERROR_OCCURRED() );

                    FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                    exception_lineno = 542;
                    type_description_1 = "oooooo";
                    goto try_except_handler_3;
                }
                Py_DECREF( tmp_call_result_5 );
            }
            goto branch_end_4;
            branch_no_4:;
            {
                nuitka_bool tmp_condition_result_5;
                int tmp_truth_name_3;
                if ( var_bs_buf == NULL )
                {

                    exception_type = PyExc_UnboundLocalError;
                    Py_INCREF( exception_type );
                    exception_value = PyUnicode_FromFormat( "local variable '%s' referenced before assignment", "bs_buf" );
                    exception_tb = NULL;
                    NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
                    CHAIN_EXCEPTION( exception_value );

                    exception_lineno = 545;
                    type_description_1 = "oooooo";
                    goto try_except_handler_3;
                }

                tmp_truth_name_3 = CHECK_IF_TRUE( var_bs_buf );
                if ( tmp_truth_name_3 == -1 )
                {
                    assert( ERROR_OCCURRED() );

                    FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                    exception_lineno = 545;
                    type_description_1 = "oooooo";
                    goto try_except_handler_3;
                }
                tmp_condition_result_5 = tmp_truth_name_3 == 1 ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
                if ( tmp_condition_result_5 == NUITKA_BOOL_TRUE )
                {
                    goto branch_yes_5;
                }
                else
                {
                    goto branch_no_5;
                }
                branch_yes_5:;
                {
                    PyObject *tmp_called_name_2;
                    PyObject *tmp_source_name_2;
                    PyObject *tmp_call_result_6;
                    PyObject *tmp_args_element_name_3;
                    CHECK_OBJECT( var_result );
                    tmp_source_name_2 = var_result;
                    tmp_called_name_2 = LOOKUP_ATTRIBUTE( tmp_source_name_2, const_str_plain_extend );
                    if ( tmp_called_name_2 == NULL )
                    {
                        assert( ERROR_OCCURRED() );

                        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                        exception_lineno = 546;
                        type_description_1 = "oooooo";
                        goto try_except_handler_3;
                    }
                    if ( var_bs_buf == NULL )
                    {
                        Py_DECREF( tmp_called_name_2 );
                        exception_type = PyExc_UnboundLocalError;
                        Py_INCREF( exception_type );
                        exception_value = PyUnicode_FromFormat( "local variable '%s' referenced before assignment", "bs_buf" );
                        exception_tb = NULL;
                        NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
                        CHAIN_EXCEPTION( exception_value );

                        exception_lineno = 546;
                        type_description_1 = "oooooo";
                        goto try_except_handler_3;
                    }

                    tmp_args_element_name_3 = var_bs_buf;
                    frame_3ab7bcc7becc4741b37856918d8ae0ba->m_frame.f_lineno = 546;
                    {
                        PyObject *call_args[] = { tmp_args_element_name_3 };
                        tmp_call_result_6 = CALL_FUNCTION_WITH_ARGS1( tmp_called_name_2, call_args );
                    }

                    Py_DECREF( tmp_called_name_2 );
                    if ( tmp_call_result_6 == NULL )
                    {
                        assert( ERROR_OCCURRED() );

                        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                        exception_lineno = 546;
                        type_description_1 = "oooooo";
                        goto try_except_handler_3;
                    }
                    Py_DECREF( tmp_call_result_6 );
                }
                {
                    PyObject *tmp_assign_source_12;
                    tmp_assign_source_12 = PyList_New( 0 );
                    {
                        PyObject *old = var_bs_buf;
                        var_bs_buf = tmp_assign_source_12;
                        Py_XDECREF( old );
                    }

                }
                branch_no_5:;
            }
            {
                PyObject *tmp_called_instance_5;
                PyObject *tmp_call_result_7;
                PyObject *tmp_args_element_name_4;
                CHECK_OBJECT( var_result );
                tmp_called_instance_5 = var_result;
                CHECK_OBJECT( var_c );
                tmp_args_element_name_4 = var_c;
                frame_3ab7bcc7becc4741b37856918d8ae0ba->m_frame.f_lineno = 548;
                {
                    PyObject *call_args[] = { tmp_args_element_name_4 };
                    tmp_call_result_7 = CALL_METHOD_WITH_ARGS1( tmp_called_instance_5, const_str_plain_append, call_args );
                }

                if ( tmp_call_result_7 == NULL )
                {
                    assert( ERROR_OCCURRED() );

                    FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                    exception_lineno = 548;
                    type_description_1 = "oooooo";
                    goto try_except_handler_3;
                }
                Py_DECREF( tmp_call_result_7 );
            }
            branch_end_4:;
        }
        branch_end_3:;
    }
    if ( CONSIDER_THREADING() == false )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 534;
        type_description_1 = "oooooo";
        goto try_except_handler_3;
    }
    goto loop_start_2;
    loop_end_2:;
    goto try_end_1;
    // Exception handler code:
    try_except_handler_3:;
    exception_keeper_type_1 = exception_type;
    exception_keeper_value_1 = exception_value;
    exception_keeper_tb_1 = exception_tb;
    exception_keeper_lineno_1 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    Py_XDECREF( tmp_for_loop_2__iter_value );
    tmp_for_loop_2__iter_value = NULL;

    CHECK_OBJECT( (PyObject *)tmp_for_loop_2__for_iterator );
    Py_DECREF( tmp_for_loop_2__for_iterator );
    tmp_for_loop_2__for_iterator = NULL;

    // Re-raise.
    exception_type = exception_keeper_type_1;
    exception_value = exception_keeper_value_1;
    exception_tb = exception_keeper_tb_1;
    exception_lineno = exception_keeper_lineno_1;

    goto try_except_handler_2;
    // End of try:
    try_end_1:;
    Py_XDECREF( tmp_for_loop_2__iter_value );
    tmp_for_loop_2__iter_value = NULL;

    CHECK_OBJECT( (PyObject *)tmp_for_loop_2__for_iterator );
    Py_DECREF( tmp_for_loop_2__for_iterator );
    tmp_for_loop_2__for_iterator = NULL;

    {
        nuitka_bool tmp_condition_result_6;
        int tmp_truth_name_4;
        if ( var_bs_buf == NULL )
        {

            exception_type = PyExc_UnboundLocalError;
            Py_INCREF( exception_type );
            exception_value = PyUnicode_FromFormat( "local variable '%s' referenced before assignment", "bs_buf" );
            exception_tb = NULL;
            NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
            CHAIN_EXCEPTION( exception_value );

            exception_lineno = 551;
            type_description_1 = "oooooo";
            goto try_except_handler_2;
        }

        tmp_truth_name_4 = CHECK_IF_TRUE( var_bs_buf );
        if ( tmp_truth_name_4 == -1 )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 551;
            type_description_1 = "oooooo";
            goto try_except_handler_2;
        }
        tmp_condition_result_6 = tmp_truth_name_4 == 1 ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
        if ( tmp_condition_result_6 == NUITKA_BOOL_TRUE )
        {
            goto branch_yes_6;
        }
        else
        {
            goto branch_no_6;
        }
        branch_yes_6:;
        {
            PyObject *tmp_called_name_3;
            PyObject *tmp_source_name_3;
            PyObject *tmp_call_result_8;
            PyObject *tmp_args_element_name_5;
            CHECK_OBJECT( var_result );
            tmp_source_name_3 = var_result;
            tmp_called_name_3 = LOOKUP_ATTRIBUTE( tmp_source_name_3, const_str_plain_extend );
            if ( tmp_called_name_3 == NULL )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 552;
                type_description_1 = "oooooo";
                goto try_except_handler_2;
            }
            if ( var_bs_buf == NULL )
            {
                Py_DECREF( tmp_called_name_3 );
                exception_type = PyExc_UnboundLocalError;
                Py_INCREF( exception_type );
                exception_value = PyUnicode_FromFormat( "local variable '%s' referenced before assignment", "bs_buf" );
                exception_tb = NULL;
                NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
                CHAIN_EXCEPTION( exception_value );

                exception_lineno = 552;
                type_description_1 = "oooooo";
                goto try_except_handler_2;
            }

            tmp_args_element_name_5 = var_bs_buf;
            frame_3ab7bcc7becc4741b37856918d8ae0ba->m_frame.f_lineno = 552;
            {
                PyObject *call_args[] = { tmp_args_element_name_5 };
                tmp_call_result_8 = CALL_FUNCTION_WITH_ARGS1( tmp_called_name_3, call_args );
            }

            Py_DECREF( tmp_called_name_3 );
            if ( tmp_call_result_8 == NULL )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 552;
                type_description_1 = "oooooo";
                goto try_except_handler_2;
            }
            Py_DECREF( tmp_call_result_8 );
        }
        branch_no_6:;
    }
    {
        nuitka_bool tmp_condition_result_7;
        int tmp_truth_name_5;
        CHECK_OBJECT( var_needquote );
        tmp_truth_name_5 = CHECK_IF_TRUE( var_needquote );
        if ( tmp_truth_name_5 == -1 )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 554;
            type_description_1 = "oooooo";
            goto try_except_handler_2;
        }
        tmp_condition_result_7 = tmp_truth_name_5 == 1 ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
        if ( tmp_condition_result_7 == NUITKA_BOOL_TRUE )
        {
            goto branch_yes_7;
        }
        else
        {
            goto branch_no_7;
        }
        branch_yes_7:;
        {
            PyObject *tmp_called_name_4;
            PyObject *tmp_source_name_4;
            PyObject *tmp_call_result_9;
            PyObject *tmp_args_element_name_6;
            CHECK_OBJECT( var_result );
            tmp_source_name_4 = var_result;
            tmp_called_name_4 = LOOKUP_ATTRIBUTE( tmp_source_name_4, const_str_plain_extend );
            if ( tmp_called_name_4 == NULL )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 555;
                type_description_1 = "oooooo";
                goto try_except_handler_2;
            }
            if ( var_bs_buf == NULL )
            {
                Py_DECREF( tmp_called_name_4 );
                exception_type = PyExc_UnboundLocalError;
                Py_INCREF( exception_type );
                exception_value = PyUnicode_FromFormat( "local variable '%s' referenced before assignment", "bs_buf" );
                exception_tb = NULL;
                NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
                CHAIN_EXCEPTION( exception_value );

                exception_lineno = 555;
                type_description_1 = "oooooo";
                goto try_except_handler_2;
            }

            tmp_args_element_name_6 = var_bs_buf;
            frame_3ab7bcc7becc4741b37856918d8ae0ba->m_frame.f_lineno = 555;
            {
                PyObject *call_args[] = { tmp_args_element_name_6 };
                tmp_call_result_9 = CALL_FUNCTION_WITH_ARGS1( tmp_called_name_4, call_args );
            }

            Py_DECREF( tmp_called_name_4 );
            if ( tmp_call_result_9 == NULL )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 555;
                type_description_1 = "oooooo";
                goto try_except_handler_2;
            }
            Py_DECREF( tmp_call_result_9 );
        }
        {
            PyObject *tmp_called_instance_6;
            PyObject *tmp_call_result_10;
            CHECK_OBJECT( var_result );
            tmp_called_instance_6 = var_result;
            frame_3ab7bcc7becc4741b37856918d8ae0ba->m_frame.f_lineno = 556;
            tmp_call_result_10 = CALL_METHOD_WITH_ARGS1( tmp_called_instance_6, const_str_plain_append, &PyTuple_GET_ITEM( const_tuple_str_chr_34_tuple, 0 ) );

            if ( tmp_call_result_10 == NULL )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 556;
                type_description_1 = "oooooo";
                goto try_except_handler_2;
            }
            Py_DECREF( tmp_call_result_10 );
        }
        branch_no_7:;
    }
    if ( CONSIDER_THREADING() == false )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 523;
        type_description_1 = "oooooo";
        goto try_except_handler_2;
    }
    goto loop_start_1;
    loop_end_1:;
    goto try_end_2;
    // Exception handler code:
    try_except_handler_2:;
    exception_keeper_type_2 = exception_type;
    exception_keeper_value_2 = exception_value;
    exception_keeper_tb_2 = exception_tb;
    exception_keeper_lineno_2 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    Py_XDECREF( tmp_for_loop_1__iter_value );
    tmp_for_loop_1__iter_value = NULL;

    CHECK_OBJECT( (PyObject *)tmp_for_loop_1__for_iterator );
    Py_DECREF( tmp_for_loop_1__for_iterator );
    tmp_for_loop_1__for_iterator = NULL;

    // Re-raise.
    exception_type = exception_keeper_type_2;
    exception_value = exception_keeper_value_2;
    exception_tb = exception_keeper_tb_2;
    exception_lineno = exception_keeper_lineno_2;

    goto frame_exception_exit_1;
    // End of try:
    try_end_2:;
    Py_XDECREF( tmp_for_loop_1__iter_value );
    tmp_for_loop_1__iter_value = NULL;

    CHECK_OBJECT( (PyObject *)tmp_for_loop_1__for_iterator );
    Py_DECREF( tmp_for_loop_1__for_iterator );
    tmp_for_loop_1__for_iterator = NULL;

    {
        PyObject *tmp_called_instance_7;
        PyObject *tmp_args_element_name_7;
        tmp_called_instance_7 = const_str_empty;
        CHECK_OBJECT( var_result );
        tmp_args_element_name_7 = var_result;
        frame_3ab7bcc7becc4741b37856918d8ae0ba->m_frame.f_lineno = 558;
        {
            PyObject *call_args[] = { tmp_args_element_name_7 };
            tmp_return_value = CALL_METHOD_WITH_ARGS1( tmp_called_instance_7, const_str_plain_join, call_args );
        }

        if ( tmp_return_value == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 558;
            type_description_1 = "oooooo";
            goto frame_exception_exit_1;
        }
        goto frame_return_exit_1;
    }

#if 0
    RESTORE_FRAME_EXCEPTION( frame_3ab7bcc7becc4741b37856918d8ae0ba );
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto frame_no_exception_1;

    frame_return_exit_1:;
#if 0
    RESTORE_FRAME_EXCEPTION( frame_3ab7bcc7becc4741b37856918d8ae0ba );
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto try_return_handler_1;

    frame_exception_exit_1:;

#if 0
    RESTORE_FRAME_EXCEPTION( frame_3ab7bcc7becc4741b37856918d8ae0ba );
#endif

    if ( exception_tb == NULL )
    {
        exception_tb = MAKE_TRACEBACK( frame_3ab7bcc7becc4741b37856918d8ae0ba, exception_lineno );
    }
    else if ( exception_tb->tb_frame != &frame_3ab7bcc7becc4741b37856918d8ae0ba->m_frame )
    {
        exception_tb = ADD_TRACEBACK( exception_tb, frame_3ab7bcc7becc4741b37856918d8ae0ba, exception_lineno );
    }

    // Attachs locals to frame if any.
    Nuitka_Frame_AttachLocals(
        (struct Nuitka_FrameObject *)frame_3ab7bcc7becc4741b37856918d8ae0ba,
        type_description_1,
        par_seq,
        var_result,
        var_needquote,
        var_arg,
        var_bs_buf,
        var_c
    );


    // Release cached frame.
    if ( frame_3ab7bcc7becc4741b37856918d8ae0ba == cache_frame_3ab7bcc7becc4741b37856918d8ae0ba )
    {
        Py_DECREF( frame_3ab7bcc7becc4741b37856918d8ae0ba );
    }
    cache_frame_3ab7bcc7becc4741b37856918d8ae0ba = NULL;

    assertFrameObject( frame_3ab7bcc7becc4741b37856918d8ae0ba );

    // Put the previous frame back on top.
    popFrameStack();

    // Return the error.
    goto try_except_handler_1;

    frame_no_exception_1:;
    // tried codes exits in all cases
    NUITKA_CANNOT_GET_HERE( subprocess$$$function_24_list2cmdline );
    return NULL;
    // Return handler code:
    try_return_handler_1:;
    CHECK_OBJECT( (PyObject *)par_seq );
    Py_DECREF( par_seq );
    par_seq = NULL;

    CHECK_OBJECT( (PyObject *)var_result );
    Py_DECREF( var_result );
    var_result = NULL;

    CHECK_OBJECT( (PyObject *)var_needquote );
    Py_DECREF( var_needquote );
    var_needquote = NULL;

    Py_XDECREF( var_arg );
    var_arg = NULL;

    Py_XDECREF( var_bs_buf );
    var_bs_buf = NULL;

    Py_XDECREF( var_c );
    var_c = NULL;

    goto function_return_exit;
    // Exception handler code:
    try_except_handler_1:;
    exception_keeper_type_3 = exception_type;
    exception_keeper_value_3 = exception_value;
    exception_keeper_tb_3 = exception_tb;
    exception_keeper_lineno_3 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    CHECK_OBJECT( (PyObject *)par_seq );
    Py_DECREF( par_seq );
    par_seq = NULL;

    CHECK_OBJECT( (PyObject *)var_result );
    Py_DECREF( var_result );
    var_result = NULL;

    Py_XDECREF( var_needquote );
    var_needquote = NULL;

    Py_XDECREF( var_arg );
    var_arg = NULL;

    Py_XDECREF( var_bs_buf );
    var_bs_buf = NULL;

    Py_XDECREF( var_c );
    var_c = NULL;

    // Re-raise.
    exception_type = exception_keeper_type_3;
    exception_value = exception_keeper_value_3;
    exception_tb = exception_keeper_tb_3;
    exception_lineno = exception_keeper_lineno_3;

    goto function_exception_exit;
    // End of try:

    // Return statement must have exited already.
    NUITKA_CANNOT_GET_HERE( subprocess$$$function_24_list2cmdline );
    return NULL;

function_exception_exit:
    assert( exception_type );
    RESTORE_ERROR_OCCURRED( exception_type, exception_value, exception_tb );

    return NULL;

function_return_exit:
   // Function cleanup code if any.


   // Actual function exit with return value, making sure we did not make
   // the error status worse despite non-NULL return.
   CHECK_OBJECT( tmp_return_value );
   assert( had_error || !ERROR_OCCURRED() );
   return tmp_return_value;
}


static PyObject *impl_subprocess$$$function_25_getstatusoutput( struct Nuitka_FunctionObject const *self, PyObject **python_pars )
{
    // Preserve error status for checks
#ifndef __NUITKA_NO_ASSERT__
    NUITKA_MAY_BE_UNUSED bool had_error = ERROR_OCCURRED();
#endif

    // Local variable declarations.
    PyObject *par_cmd = python_pars[ 0 ];
    PyObject *var_data = NULL;
    PyObject *var_exitcode = NULL;
    PyObject *var_ex = NULL;
    struct Nuitka_FrameObject *frame_cd37d8e56d2bad5c732a7fd11b219980;
    NUITKA_MAY_BE_UNUSED char const *type_description_1 = NULL;
    PyObject *exception_type = NULL;
    PyObject *exception_value = NULL;
    PyTracebackObject *exception_tb = NULL;
    NUITKA_MAY_BE_UNUSED int exception_lineno = 0;
    int tmp_res;
    PyObject *exception_keeper_type_1;
    PyObject *exception_keeper_value_1;
    PyTracebackObject *exception_keeper_tb_1;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_1;
    PyObject *exception_preserved_type_1;
    PyObject *exception_preserved_value_1;
    PyTracebackObject *exception_preserved_tb_1;
    PyObject *exception_keeper_type_2;
    PyObject *exception_keeper_value_2;
    PyTracebackObject *exception_keeper_tb_2;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_2;
    bool tmp_result;
    PyObject *exception_keeper_type_3;
    PyObject *exception_keeper_value_3;
    PyTracebackObject *exception_keeper_tb_3;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_3;
    PyObject *tmp_return_value = NULL;
    static struct Nuitka_FrameObject *cache_frame_cd37d8e56d2bad5c732a7fd11b219980 = NULL;
    PyObject *exception_keeper_type_4;
    PyObject *exception_keeper_value_4;
    PyTracebackObject *exception_keeper_tb_4;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_4;

    // Actual function body.
    // Tried code:
    MAKE_OR_REUSE_FRAME( cache_frame_cd37d8e56d2bad5c732a7fd11b219980, codeobj_cd37d8e56d2bad5c732a7fd11b219980, module_subprocess, sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *) );
    frame_cd37d8e56d2bad5c732a7fd11b219980 = cache_frame_cd37d8e56d2bad5c732a7fd11b219980;

    // Push the new frame as the currently active one.
    pushFrameStack( frame_cd37d8e56d2bad5c732a7fd11b219980 );

    // Mark the frame object as in use, ref count 1 will be up for reuse.
    assert( Py_REFCNT( frame_cd37d8e56d2bad5c732a7fd11b219980 ) == 2 ); // Frame stack

    // Framed code:
    // Tried code:
    {
        PyObject *tmp_assign_source_1;
        PyObject *tmp_called_name_1;
        PyObject *tmp_mvar_value_1;
        PyObject *tmp_args_name_1;
        PyObject *tmp_tuple_element_1;
        PyObject *tmp_kw_name_1;
        PyObject *tmp_dict_key_1;
        PyObject *tmp_dict_value_1;
        PyObject *tmp_dict_key_2;
        PyObject *tmp_dict_value_2;
        PyObject *tmp_dict_key_3;
        PyObject *tmp_dict_value_3;
        PyObject *tmp_mvar_value_2;
        tmp_mvar_value_1 = GET_STRING_DICT_VALUE( moduledict_subprocess, (Nuitka_StringObject *)const_str_plain_check_output );

        if (unlikely( tmp_mvar_value_1 == NULL ))
        {
            tmp_mvar_value_1 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_check_output );
        }

        if ( tmp_mvar_value_1 == NULL )
        {

            exception_type = PyExc_NameError;
            Py_INCREF( exception_type );
            exception_value = PyUnicode_FromFormat( "name '%s' is not defined", "check_output" );
            exception_tb = NULL;
            NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
            CHAIN_EXCEPTION( exception_value );

            exception_lineno = 586;
            type_description_1 = "oooo";
            goto try_except_handler_2;
        }

        tmp_called_name_1 = tmp_mvar_value_1;
        CHECK_OBJECT( par_cmd );
        tmp_tuple_element_1 = par_cmd;
        tmp_args_name_1 = PyTuple_New( 1 );
        Py_INCREF( tmp_tuple_element_1 );
        PyTuple_SET_ITEM( tmp_args_name_1, 0, tmp_tuple_element_1 );
        tmp_dict_key_1 = const_str_plain_shell;
        tmp_dict_value_1 = Py_True;
        tmp_kw_name_1 = _PyDict_NewPresized( 3 );
        tmp_res = PyDict_SetItem( tmp_kw_name_1, tmp_dict_key_1, tmp_dict_value_1 );
        assert( !(tmp_res != 0) );
        tmp_dict_key_2 = const_str_plain_text;
        tmp_dict_value_2 = Py_True;
        tmp_res = PyDict_SetItem( tmp_kw_name_1, tmp_dict_key_2, tmp_dict_value_2 );
        assert( !(tmp_res != 0) );
        tmp_dict_key_3 = const_str_plain_stderr;
        tmp_mvar_value_2 = GET_STRING_DICT_VALUE( moduledict_subprocess, (Nuitka_StringObject *)const_str_plain_STDOUT );

        if (unlikely( tmp_mvar_value_2 == NULL ))
        {
            tmp_mvar_value_2 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_STDOUT );
        }

        if ( tmp_mvar_value_2 == NULL )
        {
            Py_DECREF( tmp_args_name_1 );
            Py_DECREF( tmp_kw_name_1 );
            exception_type = PyExc_NameError;
            Py_INCREF( exception_type );
            exception_value = PyUnicode_FromFormat( "name '%s' is not defined", "STDOUT" );
            exception_tb = NULL;
            NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
            CHAIN_EXCEPTION( exception_value );

            exception_lineno = 586;
            type_description_1 = "oooo";
            goto try_except_handler_2;
        }

        tmp_dict_value_3 = tmp_mvar_value_2;
        tmp_res = PyDict_SetItem( tmp_kw_name_1, tmp_dict_key_3, tmp_dict_value_3 );
        assert( !(tmp_res != 0) );
        frame_cd37d8e56d2bad5c732a7fd11b219980->m_frame.f_lineno = 586;
        tmp_assign_source_1 = CALL_FUNCTION( tmp_called_name_1, tmp_args_name_1, tmp_kw_name_1 );
        Py_DECREF( tmp_args_name_1 );
        Py_DECREF( tmp_kw_name_1 );
        if ( tmp_assign_source_1 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 586;
            type_description_1 = "oooo";
            goto try_except_handler_2;
        }
        assert( var_data == NULL );
        var_data = tmp_assign_source_1;
    }
    {
        PyObject *tmp_assign_source_2;
        tmp_assign_source_2 = const_int_0;
        assert( var_exitcode == NULL );
        Py_INCREF( tmp_assign_source_2 );
        var_exitcode = tmp_assign_source_2;
    }
    goto try_end_1;
    // Exception handler code:
    try_except_handler_2:;
    exception_keeper_type_1 = exception_type;
    exception_keeper_value_1 = exception_value;
    exception_keeper_tb_1 = exception_tb;
    exception_keeper_lineno_1 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    // Preserve existing published exception.
    exception_preserved_type_1 = EXC_TYPE(PyThreadState_GET());
    Py_XINCREF( exception_preserved_type_1 );
    exception_preserved_value_1 = EXC_VALUE(PyThreadState_GET());
    Py_XINCREF( exception_preserved_value_1 );
    exception_preserved_tb_1 = (PyTracebackObject *)EXC_TRACEBACK(PyThreadState_GET());
    Py_XINCREF( exception_preserved_tb_1 );

    if ( exception_keeper_tb_1 == NULL )
    {
        exception_keeper_tb_1 = MAKE_TRACEBACK( frame_cd37d8e56d2bad5c732a7fd11b219980, exception_keeper_lineno_1 );
    }
    else if ( exception_keeper_lineno_1 != 0 )
    {
        exception_keeper_tb_1 = ADD_TRACEBACK( exception_keeper_tb_1, frame_cd37d8e56d2bad5c732a7fd11b219980, exception_keeper_lineno_1 );
    }

    NORMALIZE_EXCEPTION( &exception_keeper_type_1, &exception_keeper_value_1, &exception_keeper_tb_1 );
    PyException_SetTraceback( exception_keeper_value_1, (PyObject *)exception_keeper_tb_1 );
    PUBLISH_EXCEPTION( &exception_keeper_type_1, &exception_keeper_value_1, &exception_keeper_tb_1 );
    // Tried code:
    {
        nuitka_bool tmp_condition_result_1;
        PyObject *tmp_compexpr_left_1;
        PyObject *tmp_compexpr_right_1;
        PyObject *tmp_mvar_value_3;
        tmp_compexpr_left_1 = EXC_TYPE(PyThreadState_GET());
        tmp_mvar_value_3 = GET_STRING_DICT_VALUE( moduledict_subprocess, (Nuitka_StringObject *)const_str_plain_CalledProcessError );

        if (unlikely( tmp_mvar_value_3 == NULL ))
        {
            tmp_mvar_value_3 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_CalledProcessError );
        }

        if ( tmp_mvar_value_3 == NULL )
        {

            exception_type = PyExc_NameError;
            Py_INCREF( exception_type );
            exception_value = PyUnicode_FromFormat( "name '%s' is not defined", "CalledProcessError" );
            exception_tb = NULL;
            NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
            CHAIN_EXCEPTION( exception_value );

            exception_lineno = 588;
            type_description_1 = "oooo";
            goto try_except_handler_3;
        }

        tmp_compexpr_right_1 = tmp_mvar_value_3;
        tmp_res = EXCEPTION_MATCH_BOOL( tmp_compexpr_left_1, tmp_compexpr_right_1 );
        if ( tmp_res == -1 )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 588;
            type_description_1 = "oooo";
            goto try_except_handler_3;
        }
        tmp_condition_result_1 = ( tmp_res != 0 ) ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
        if ( tmp_condition_result_1 == NUITKA_BOOL_TRUE )
        {
            goto branch_yes_1;
        }
        else
        {
            goto branch_no_1;
        }
        branch_yes_1:;
        {
            PyObject *tmp_assign_source_3;
            tmp_assign_source_3 = EXC_VALUE(PyThreadState_GET());
            assert( var_ex == NULL );
            Py_INCREF( tmp_assign_source_3 );
            var_ex = tmp_assign_source_3;
        }
        // Tried code:
        {
            PyObject *tmp_assign_source_4;
            PyObject *tmp_source_name_1;
            CHECK_OBJECT( var_ex );
            tmp_source_name_1 = var_ex;
            tmp_assign_source_4 = LOOKUP_ATTRIBUTE( tmp_source_name_1, const_str_plain_output );
            if ( tmp_assign_source_4 == NULL )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 589;
                type_description_1 = "oooo";
                goto try_except_handler_4;
            }
            assert( var_data == NULL );
            var_data = tmp_assign_source_4;
        }
        {
            PyObject *tmp_assign_source_5;
            PyObject *tmp_source_name_2;
            CHECK_OBJECT( var_ex );
            tmp_source_name_2 = var_ex;
            tmp_assign_source_5 = LOOKUP_ATTRIBUTE( tmp_source_name_2, const_str_plain_returncode );
            if ( tmp_assign_source_5 == NULL )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 590;
                type_description_1 = "oooo";
                goto try_except_handler_4;
            }
            assert( var_exitcode == NULL );
            var_exitcode = tmp_assign_source_5;
        }
        goto try_end_2;
        // Exception handler code:
        try_except_handler_4:;
        exception_keeper_type_2 = exception_type;
        exception_keeper_value_2 = exception_value;
        exception_keeper_tb_2 = exception_tb;
        exception_keeper_lineno_2 = exception_lineno;
        exception_type = NULL;
        exception_value = NULL;
        exception_tb = NULL;
        exception_lineno = 0;

        Py_XDECREF( var_ex );
        var_ex = NULL;

        // Re-raise.
        exception_type = exception_keeper_type_2;
        exception_value = exception_keeper_value_2;
        exception_tb = exception_keeper_tb_2;
        exception_lineno = exception_keeper_lineno_2;

        goto try_except_handler_3;
        // End of try:
        try_end_2:;
        Py_XDECREF( var_ex );
        var_ex = NULL;

        goto branch_end_1;
        branch_no_1:;
        tmp_result = RERAISE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
        if (unlikely( tmp_result == false ))
        {
            exception_lineno = 585;
        }

        if (exception_tb && exception_tb->tb_frame == &frame_cd37d8e56d2bad5c732a7fd11b219980->m_frame) frame_cd37d8e56d2bad5c732a7fd11b219980->m_frame.f_lineno = exception_tb->tb_lineno;
        type_description_1 = "oooo";
        goto try_except_handler_3;
        branch_end_1:;
    }
    goto try_end_3;
    // Exception handler code:
    try_except_handler_3:;
    exception_keeper_type_3 = exception_type;
    exception_keeper_value_3 = exception_value;
    exception_keeper_tb_3 = exception_tb;
    exception_keeper_lineno_3 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    // Restore previous exception.
    SET_CURRENT_EXCEPTION( exception_preserved_type_1, exception_preserved_value_1, exception_preserved_tb_1 );
    // Re-raise.
    exception_type = exception_keeper_type_3;
    exception_value = exception_keeper_value_3;
    exception_tb = exception_keeper_tb_3;
    exception_lineno = exception_keeper_lineno_3;

    goto frame_exception_exit_1;
    // End of try:
    try_end_3:;
    // Restore previous exception.
    SET_CURRENT_EXCEPTION( exception_preserved_type_1, exception_preserved_value_1, exception_preserved_tb_1 );
    goto try_end_1;
    // exception handler codes exits in all cases
    NUITKA_CANNOT_GET_HERE( subprocess$$$function_25_getstatusoutput );
    return NULL;
    // End of try:
    try_end_1:;
    {
        nuitka_bool tmp_condition_result_2;
        PyObject *tmp_compexpr_left_2;
        PyObject *tmp_compexpr_right_2;
        PyObject *tmp_subscribed_name_1;
        PyObject *tmp_subscript_name_1;
        if ( var_data == NULL )
        {

            exception_type = PyExc_UnboundLocalError;
            Py_INCREF( exception_type );
            exception_value = PyUnicode_FromFormat( "local variable '%s' referenced before assignment", "data" );
            exception_tb = NULL;
            NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
            CHAIN_EXCEPTION( exception_value );

            exception_lineno = 591;
            type_description_1 = "oooo";
            goto frame_exception_exit_1;
        }

        tmp_subscribed_name_1 = var_data;
        tmp_subscript_name_1 = const_slice_int_neg_1_none_none;
        tmp_compexpr_left_2 = LOOKUP_SUBSCRIPT( tmp_subscribed_name_1, tmp_subscript_name_1 );
        if ( tmp_compexpr_left_2 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 591;
            type_description_1 = "oooo";
            goto frame_exception_exit_1;
        }
        tmp_compexpr_right_2 = const_str_newline;
        tmp_res = RICH_COMPARE_BOOL_EQ_OBJECT_OBJECT( tmp_compexpr_left_2, tmp_compexpr_right_2 );
        Py_DECREF( tmp_compexpr_left_2 );
        if ( tmp_res == -1 )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 591;
            type_description_1 = "oooo";
            goto frame_exception_exit_1;
        }
        tmp_condition_result_2 = ( tmp_res != 0 ) ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
        if ( tmp_condition_result_2 == NUITKA_BOOL_TRUE )
        {
            goto branch_yes_2;
        }
        else
        {
            goto branch_no_2;
        }
        branch_yes_2:;
        {
            PyObject *tmp_assign_source_6;
            PyObject *tmp_subscribed_name_2;
            PyObject *tmp_subscript_name_2;
            if ( var_data == NULL )
            {

                exception_type = PyExc_UnboundLocalError;
                Py_INCREF( exception_type );
                exception_value = PyUnicode_FromFormat( "local variable '%s' referenced before assignment", "data" );
                exception_tb = NULL;
                NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
                CHAIN_EXCEPTION( exception_value );

                exception_lineno = 592;
                type_description_1 = "oooo";
                goto frame_exception_exit_1;
            }

            tmp_subscribed_name_2 = var_data;
            tmp_subscript_name_2 = const_slice_none_int_neg_1_none;
            tmp_assign_source_6 = LOOKUP_SUBSCRIPT( tmp_subscribed_name_2, tmp_subscript_name_2 );
            if ( tmp_assign_source_6 == NULL )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 592;
                type_description_1 = "oooo";
                goto frame_exception_exit_1;
            }
            {
                PyObject *old = var_data;
                var_data = tmp_assign_source_6;
                Py_XDECREF( old );
            }

        }
        branch_no_2:;
    }
    {
        PyObject *tmp_tuple_element_2;
        if ( var_exitcode == NULL )
        {

            exception_type = PyExc_UnboundLocalError;
            Py_INCREF( exception_type );
            exception_value = PyUnicode_FromFormat( "local variable '%s' referenced before assignment", "exitcode" );
            exception_tb = NULL;
            NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
            CHAIN_EXCEPTION( exception_value );

            exception_lineno = 593;
            type_description_1 = "oooo";
            goto frame_exception_exit_1;
        }

        tmp_tuple_element_2 = var_exitcode;
        tmp_return_value = PyTuple_New( 2 );
        Py_INCREF( tmp_tuple_element_2 );
        PyTuple_SET_ITEM( tmp_return_value, 0, tmp_tuple_element_2 );
        if ( var_data == NULL )
        {
            Py_DECREF( tmp_return_value );
            exception_type = PyExc_UnboundLocalError;
            Py_INCREF( exception_type );
            exception_value = PyUnicode_FromFormat( "local variable '%s' referenced before assignment", "data" );
            exception_tb = NULL;
            NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
            CHAIN_EXCEPTION( exception_value );

            exception_lineno = 593;
            type_description_1 = "oooo";
            goto frame_exception_exit_1;
        }

        tmp_tuple_element_2 = var_data;
        Py_INCREF( tmp_tuple_element_2 );
        PyTuple_SET_ITEM( tmp_return_value, 1, tmp_tuple_element_2 );
        goto frame_return_exit_1;
    }

#if 0
    RESTORE_FRAME_EXCEPTION( frame_cd37d8e56d2bad5c732a7fd11b219980 );
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto frame_no_exception_1;

    frame_return_exit_1:;
#if 0
    RESTORE_FRAME_EXCEPTION( frame_cd37d8e56d2bad5c732a7fd11b219980 );
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto try_return_handler_1;

    frame_exception_exit_1:;

#if 0
    RESTORE_FRAME_EXCEPTION( frame_cd37d8e56d2bad5c732a7fd11b219980 );
#endif

    if ( exception_tb == NULL )
    {
        exception_tb = MAKE_TRACEBACK( frame_cd37d8e56d2bad5c732a7fd11b219980, exception_lineno );
    }
    else if ( exception_tb->tb_frame != &frame_cd37d8e56d2bad5c732a7fd11b219980->m_frame )
    {
        exception_tb = ADD_TRACEBACK( exception_tb, frame_cd37d8e56d2bad5c732a7fd11b219980, exception_lineno );
    }

    // Attachs locals to frame if any.
    Nuitka_Frame_AttachLocals(
        (struct Nuitka_FrameObject *)frame_cd37d8e56d2bad5c732a7fd11b219980,
        type_description_1,
        par_cmd,
        var_data,
        var_exitcode,
        var_ex
    );


    // Release cached frame.
    if ( frame_cd37d8e56d2bad5c732a7fd11b219980 == cache_frame_cd37d8e56d2bad5c732a7fd11b219980 )
    {
        Py_DECREF( frame_cd37d8e56d2bad5c732a7fd11b219980 );
    }
    cache_frame_cd37d8e56d2bad5c732a7fd11b219980 = NULL;

    assertFrameObject( frame_cd37d8e56d2bad5c732a7fd11b219980 );

    // Put the previous frame back on top.
    popFrameStack();

    // Return the error.
    goto try_except_handler_1;

    frame_no_exception_1:;
    // tried codes exits in all cases
    NUITKA_CANNOT_GET_HERE( subprocess$$$function_25_getstatusoutput );
    return NULL;
    // Return handler code:
    try_return_handler_1:;
    CHECK_OBJECT( (PyObject *)par_cmd );
    Py_DECREF( par_cmd );
    par_cmd = NULL;

    Py_XDECREF( var_data );
    var_data = NULL;

    Py_XDECREF( var_exitcode );
    var_exitcode = NULL;

    Py_XDECREF( var_ex );
    var_ex = NULL;

    goto function_return_exit;
    // Exception handler code:
    try_except_handler_1:;
    exception_keeper_type_4 = exception_type;
    exception_keeper_value_4 = exception_value;
    exception_keeper_tb_4 = exception_tb;
    exception_keeper_lineno_4 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    CHECK_OBJECT( (PyObject *)par_cmd );
    Py_DECREF( par_cmd );
    par_cmd = NULL;

    Py_XDECREF( var_data );
    var_data = NULL;

    Py_XDECREF( var_exitcode );
    var_exitcode = NULL;

    Py_XDECREF( var_ex );
    var_ex = NULL;

    // Re-raise.
    exception_type = exception_keeper_type_4;
    exception_value = exception_keeper_value_4;
    exception_tb = exception_keeper_tb_4;
    exception_lineno = exception_keeper_lineno_4;

    goto function_exception_exit;
    // End of try:

    // Return statement must have exited already.
    NUITKA_CANNOT_GET_HERE( subprocess$$$function_25_getstatusoutput );
    return NULL;

function_exception_exit:
    assert( exception_type );
    RESTORE_ERROR_OCCURRED( exception_type, exception_value, exception_tb );

    return NULL;

function_return_exit:
   // Function cleanup code if any.


   // Actual function exit with return value, making sure we did not make
   // the error status worse despite non-NULL return.
   CHECK_OBJECT( tmp_return_value );
   assert( had_error || !ERROR_OCCURRED() );
   return tmp_return_value;
}


static PyObject *impl_subprocess$$$function_26_getoutput( struct Nuitka_FunctionObject const *self, PyObject **python_pars )
{
    // Preserve error status for checks
#ifndef __NUITKA_NO_ASSERT__
    NUITKA_MAY_BE_UNUSED bool had_error = ERROR_OCCURRED();
#endif

    // Local variable declarations.
    PyObject *par_cmd = python_pars[ 0 ];
    struct Nuitka_FrameObject *frame_3e0d6e816dfe25aa8c0ca80bd02ad8e4;
    NUITKA_MAY_BE_UNUSED char const *type_description_1 = NULL;
    PyObject *tmp_return_value = NULL;
    PyObject *exception_type = NULL;
    PyObject *exception_value = NULL;
    PyTracebackObject *exception_tb = NULL;
    NUITKA_MAY_BE_UNUSED int exception_lineno = 0;
    static struct Nuitka_FrameObject *cache_frame_3e0d6e816dfe25aa8c0ca80bd02ad8e4 = NULL;
    PyObject *exception_keeper_type_1;
    PyObject *exception_keeper_value_1;
    PyTracebackObject *exception_keeper_tb_1;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_1;

    // Actual function body.
    // Tried code:
    MAKE_OR_REUSE_FRAME( cache_frame_3e0d6e816dfe25aa8c0ca80bd02ad8e4, codeobj_3e0d6e816dfe25aa8c0ca80bd02ad8e4, module_subprocess, sizeof(void *) );
    frame_3e0d6e816dfe25aa8c0ca80bd02ad8e4 = cache_frame_3e0d6e816dfe25aa8c0ca80bd02ad8e4;

    // Push the new frame as the currently active one.
    pushFrameStack( frame_3e0d6e816dfe25aa8c0ca80bd02ad8e4 );

    // Mark the frame object as in use, ref count 1 will be up for reuse.
    assert( Py_REFCNT( frame_3e0d6e816dfe25aa8c0ca80bd02ad8e4 ) == 2 ); // Frame stack

    // Framed code:
    {
        PyObject *tmp_subscribed_name_1;
        PyObject *tmp_called_name_1;
        PyObject *tmp_mvar_value_1;
        PyObject *tmp_args_element_name_1;
        PyObject *tmp_subscript_name_1;
        tmp_mvar_value_1 = GET_STRING_DICT_VALUE( moduledict_subprocess, (Nuitka_StringObject *)const_str_plain_getstatusoutput );

        if (unlikely( tmp_mvar_value_1 == NULL ))
        {
            tmp_mvar_value_1 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_getstatusoutput );
        }

        if ( tmp_mvar_value_1 == NULL )
        {

            exception_type = PyExc_NameError;
            Py_INCREF( exception_type );
            exception_value = PyUnicode_FromFormat( "name '%s' is not defined", "getstatusoutput" );
            exception_tb = NULL;
            NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
            CHAIN_EXCEPTION( exception_value );

            exception_lineno = 605;
            type_description_1 = "o";
            goto frame_exception_exit_1;
        }

        tmp_called_name_1 = tmp_mvar_value_1;
        CHECK_OBJECT( par_cmd );
        tmp_args_element_name_1 = par_cmd;
        frame_3e0d6e816dfe25aa8c0ca80bd02ad8e4->m_frame.f_lineno = 605;
        {
            PyObject *call_args[] = { tmp_args_element_name_1 };
            tmp_subscribed_name_1 = CALL_FUNCTION_WITH_ARGS1( tmp_called_name_1, call_args );
        }

        if ( tmp_subscribed_name_1 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 605;
            type_description_1 = "o";
            goto frame_exception_exit_1;
        }
        tmp_subscript_name_1 = const_int_pos_1;
        tmp_return_value = LOOKUP_SUBSCRIPT_CONST( tmp_subscribed_name_1, tmp_subscript_name_1, 1 );
        Py_DECREF( tmp_subscribed_name_1 );
        if ( tmp_return_value == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 605;
            type_description_1 = "o";
            goto frame_exception_exit_1;
        }
        goto frame_return_exit_1;
    }

#if 0
    RESTORE_FRAME_EXCEPTION( frame_3e0d6e816dfe25aa8c0ca80bd02ad8e4 );
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto frame_no_exception_1;

    frame_return_exit_1:;
#if 0
    RESTORE_FRAME_EXCEPTION( frame_3e0d6e816dfe25aa8c0ca80bd02ad8e4 );
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto try_return_handler_1;

    frame_exception_exit_1:;

#if 0
    RESTORE_FRAME_EXCEPTION( frame_3e0d6e816dfe25aa8c0ca80bd02ad8e4 );
#endif

    if ( exception_tb == NULL )
    {
        exception_tb = MAKE_TRACEBACK( frame_3e0d6e816dfe25aa8c0ca80bd02ad8e4, exception_lineno );
    }
    else if ( exception_tb->tb_frame != &frame_3e0d6e816dfe25aa8c0ca80bd02ad8e4->m_frame )
    {
        exception_tb = ADD_TRACEBACK( exception_tb, frame_3e0d6e816dfe25aa8c0ca80bd02ad8e4, exception_lineno );
    }

    // Attachs locals to frame if any.
    Nuitka_Frame_AttachLocals(
        (struct Nuitka_FrameObject *)frame_3e0d6e816dfe25aa8c0ca80bd02ad8e4,
        type_description_1,
        par_cmd
    );


    // Release cached frame.
    if ( frame_3e0d6e816dfe25aa8c0ca80bd02ad8e4 == cache_frame_3e0d6e816dfe25aa8c0ca80bd02ad8e4 )
    {
        Py_DECREF( frame_3e0d6e816dfe25aa8c0ca80bd02ad8e4 );
    }
    cache_frame_3e0d6e816dfe25aa8c0ca80bd02ad8e4 = NULL;

    assertFrameObject( frame_3e0d6e816dfe25aa8c0ca80bd02ad8e4 );

    // Put the previous frame back on top.
    popFrameStack();

    // Return the error.
    goto try_except_handler_1;

    frame_no_exception_1:;
    // tried codes exits in all cases
    NUITKA_CANNOT_GET_HERE( subprocess$$$function_26_getoutput );
    return NULL;
    // Return handler code:
    try_return_handler_1:;
    CHECK_OBJECT( (PyObject *)par_cmd );
    Py_DECREF( par_cmd );
    par_cmd = NULL;

    goto function_return_exit;
    // Exception handler code:
    try_except_handler_1:;
    exception_keeper_type_1 = exception_type;
    exception_keeper_value_1 = exception_value;
    exception_keeper_tb_1 = exception_tb;
    exception_keeper_lineno_1 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    CHECK_OBJECT( (PyObject *)par_cmd );
    Py_DECREF( par_cmd );
    par_cmd = NULL;

    // Re-raise.
    exception_type = exception_keeper_type_1;
    exception_value = exception_keeper_value_1;
    exception_tb = exception_keeper_tb_1;
    exception_lineno = exception_keeper_lineno_1;

    goto function_exception_exit;
    // End of try:

    // Return statement must have exited already.
    NUITKA_CANNOT_GET_HERE( subprocess$$$function_26_getoutput );
    return NULL;

function_exception_exit:
    assert( exception_type );
    RESTORE_ERROR_OCCURRED( exception_type, exception_value, exception_tb );

    return NULL;

function_return_exit:
   // Function cleanup code if any.


   // Actual function exit with return value, making sure we did not make
   // the error status worse despite non-NULL return.
   CHECK_OBJECT( tmp_return_value );
   assert( had_error || !ERROR_OCCURRED() );
   return tmp_return_value;
}


static PyObject *impl_subprocess$$$function_27___init__( struct Nuitka_FunctionObject const *self, PyObject **python_pars )
{
    // Preserve error status for checks
#ifndef __NUITKA_NO_ASSERT__
    NUITKA_MAY_BE_UNUSED bool had_error = ERROR_OCCURRED();
#endif

    // Local variable declarations.
    PyObject *par_self = python_pars[ 0 ];
    PyObject *par_args = python_pars[ 1 ];
    PyObject *par_bufsize = python_pars[ 2 ];
    PyObject *par_executable = python_pars[ 3 ];
    PyObject *par_stdin = python_pars[ 4 ];
    PyObject *par_stdout = python_pars[ 5 ];
    PyObject *par_stderr = python_pars[ 6 ];
    PyObject *par_preexec_fn = python_pars[ 7 ];
    PyObject *par_close_fds = python_pars[ 8 ];
    PyObject *par_shell = python_pars[ 9 ];
    PyObject *par_cwd = python_pars[ 10 ];
    PyObject *par_env = python_pars[ 11 ];
    PyObject *par_universal_newlines = python_pars[ 12 ];
    PyObject *par_startupinfo = python_pars[ 13 ];
    PyObject *par_creationflags = python_pars[ 14 ];
    PyObject *par_restore_signals = python_pars[ 15 ];
    PyObject *par_start_new_session = python_pars[ 16 ];
    PyObject *par_pass_fds = python_pars[ 17 ];
    PyObject *par_encoding = python_pars[ 18 ];
    PyObject *par_errors = python_pars[ 19 ];
    PyObject *par_text = python_pars[ 20 ];
    PyObject *var_p2cread = NULL;
    PyObject *var_p2cwrite = NULL;
    PyObject *var_c2pread = NULL;
    PyObject *var_c2pwrite = NULL;
    PyObject *var_errread = NULL;
    PyObject *var_errwrite = NULL;
    PyObject *var_f = NULL;
    PyObject *var_to_close = NULL;
    PyObject *var_fd = NULL;
    PyObject *tmp_for_loop_1__for_iterator = NULL;
    PyObject *tmp_for_loop_1__iter_value = NULL;
    PyObject *tmp_for_loop_2__for_iterator = NULL;
    PyObject *tmp_for_loop_2__iter_value = NULL;
    PyObject *tmp_tuple_unpack_1__element_1 = NULL;
    PyObject *tmp_tuple_unpack_1__element_2 = NULL;
    PyObject *tmp_tuple_unpack_1__element_3 = NULL;
    PyObject *tmp_tuple_unpack_1__element_4 = NULL;
    PyObject *tmp_tuple_unpack_1__element_5 = NULL;
    PyObject *tmp_tuple_unpack_1__element_6 = NULL;
    PyObject *tmp_tuple_unpack_1__source_iter = NULL;
    struct Nuitka_FrameObject *frame_3307251e478e6f87577905ed55fc01cd;
    NUITKA_MAY_BE_UNUSED char const *type_description_1 = NULL;
    PyObject *exception_type = NULL;
    PyObject *exception_value = NULL;
    PyTracebackObject *exception_tb = NULL;
    NUITKA_MAY_BE_UNUSED int exception_lineno = 0;
    bool tmp_result;
    int tmp_res;
    PyObject *tmp_iterator_attempt;
    PyObject *exception_keeper_type_1;
    PyObject *exception_keeper_value_1;
    PyTracebackObject *exception_keeper_tb_1;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_1;
    PyObject *exception_keeper_type_2;
    PyObject *exception_keeper_value_2;
    PyTracebackObject *exception_keeper_tb_2;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_2;
    PyObject *exception_keeper_type_3;
    PyObject *exception_keeper_value_3;
    PyTracebackObject *exception_keeper_tb_3;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_3;
    PyObject *exception_preserved_type_3;
    PyObject *exception_preserved_value_3;
    PyTracebackObject *exception_preserved_tb_3;
    PyObject *exception_keeper_type_4;
    PyObject *exception_keeper_value_4;
    PyTracebackObject *exception_keeper_tb_4;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_4;
    PyObject *exception_preserved_type_1;
    PyObject *exception_preserved_value_1;
    PyTracebackObject *exception_preserved_tb_1;
    PyObject *exception_keeper_type_5;
    PyObject *exception_keeper_value_5;
    PyTracebackObject *exception_keeper_tb_5;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_5;
    PyObject *exception_keeper_type_6;
    PyObject *exception_keeper_value_6;
    PyTracebackObject *exception_keeper_tb_6;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_6;
    PyObject *exception_keeper_type_7;
    PyObject *exception_keeper_value_7;
    PyTracebackObject *exception_keeper_tb_7;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_7;
    PyObject *exception_preserved_type_2;
    PyObject *exception_preserved_value_2;
    PyTracebackObject *exception_preserved_tb_2;
    PyObject *exception_keeper_type_8;
    PyObject *exception_keeper_value_8;
    PyTracebackObject *exception_keeper_tb_8;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_8;
    PyObject *exception_keeper_type_9;
    PyObject *exception_keeper_value_9;
    PyTracebackObject *exception_keeper_tb_9;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_9;
    PyObject *exception_keeper_type_10;
    PyObject *exception_keeper_value_10;
    PyTracebackObject *exception_keeper_tb_10;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_10;
    static struct Nuitka_FrameObject *cache_frame_3307251e478e6f87577905ed55fc01cd = NULL;
    PyObject *tmp_return_value = NULL;
    PyObject *exception_keeper_type_11;
    PyObject *exception_keeper_value_11;
    PyTracebackObject *exception_keeper_tb_11;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_11;

    // Actual function body.
    // Tried code:
    MAKE_OR_REUSE_FRAME( cache_frame_3307251e478e6f87577905ed55fc01cd, codeobj_3307251e478e6f87577905ed55fc01cd, module_subprocess, sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *) );
    frame_3307251e478e6f87577905ed55fc01cd = cache_frame_3307251e478e6f87577905ed55fc01cd;

    // Push the new frame as the currently active one.
    pushFrameStack( frame_3307251e478e6f87577905ed55fc01cd );

    // Mark the frame object as in use, ref count 1 will be up for reuse.
    assert( Py_REFCNT( frame_3307251e478e6f87577905ed55fc01cd ) == 2 ); // Frame stack

    // Framed code:
    {
        PyObject *tmp_called_name_1;
        PyObject *tmp_mvar_value_1;
        PyObject *tmp_call_result_1;
        tmp_mvar_value_1 = GET_STRING_DICT_VALUE( moduledict_subprocess, (Nuitka_StringObject *)const_str_plain__cleanup );

        if (unlikely( tmp_mvar_value_1 == NULL ))
        {
            tmp_mvar_value_1 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain__cleanup );
        }

        if ( tmp_mvar_value_1 == NULL )
        {

            exception_type = PyExc_NameError;
            Py_INCREF( exception_type );
            exception_value = PyUnicode_FromFormat( "name '%s' is not defined", "_cleanup" );
            exception_tb = NULL;
            NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
            CHAIN_EXCEPTION( exception_value );

            exception_lineno = 664;
            type_description_1 = "oooooooooooooooooooooooooooooo";
            goto frame_exception_exit_1;
        }

        tmp_called_name_1 = tmp_mvar_value_1;
        frame_3307251e478e6f87577905ed55fc01cd->m_frame.f_lineno = 664;
        tmp_call_result_1 = CALL_FUNCTION_NO_ARGS( tmp_called_name_1 );
        if ( tmp_call_result_1 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 664;
            type_description_1 = "oooooooooooooooooooooooooooooo";
            goto frame_exception_exit_1;
        }
        Py_DECREF( tmp_call_result_1 );
    }
    {
        PyObject *tmp_assattr_name_1;
        PyObject *tmp_called_instance_1;
        PyObject *tmp_mvar_value_2;
        PyObject *tmp_assattr_target_1;
        tmp_mvar_value_2 = GET_STRING_DICT_VALUE( moduledict_subprocess, (Nuitka_StringObject *)const_str_plain_threading );

        if (unlikely( tmp_mvar_value_2 == NULL ))
        {
            tmp_mvar_value_2 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_threading );
        }

        if ( tmp_mvar_value_2 == NULL )
        {

            exception_type = PyExc_NameError;
            Py_INCREF( exception_type );
            exception_value = PyUnicode_FromFormat( "name '%s' is not defined", "threading" );
            exception_tb = NULL;
            NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
            CHAIN_EXCEPTION( exception_value );

            exception_lineno = 670;
            type_description_1 = "oooooooooooooooooooooooooooooo";
            goto frame_exception_exit_1;
        }

        tmp_called_instance_1 = tmp_mvar_value_2;
        frame_3307251e478e6f87577905ed55fc01cd->m_frame.f_lineno = 670;
        tmp_assattr_name_1 = CALL_METHOD_NO_ARGS( tmp_called_instance_1, const_str_plain_Lock );
        if ( tmp_assattr_name_1 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 670;
            type_description_1 = "oooooooooooooooooooooooooooooo";
            goto frame_exception_exit_1;
        }
        CHECK_OBJECT( par_self );
        tmp_assattr_target_1 = par_self;
        tmp_result = SET_ATTRIBUTE( tmp_assattr_target_1, const_str_plain__waitpid_lock, tmp_assattr_name_1 );
        Py_DECREF( tmp_assattr_name_1 );
        if ( tmp_result == false )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 670;
            type_description_1 = "oooooooooooooooooooooooooooooo";
            goto frame_exception_exit_1;
        }
    }
    {
        PyObject *tmp_assattr_name_2;
        PyObject *tmp_assattr_target_2;
        tmp_assattr_name_2 = Py_None;
        CHECK_OBJECT( par_self );
        tmp_assattr_target_2 = par_self;
        tmp_result = SET_ATTRIBUTE( tmp_assattr_target_2, const_str_plain__input, tmp_assattr_name_2 );
        if ( tmp_result == false )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 672;
            type_description_1 = "oooooooooooooooooooooooooooooo";
            goto frame_exception_exit_1;
        }
    }
    {
        PyObject *tmp_assattr_name_3;
        PyObject *tmp_assattr_target_3;
        tmp_assattr_name_3 = Py_False;
        CHECK_OBJECT( par_self );
        tmp_assattr_target_3 = par_self;
        tmp_result = SET_ATTRIBUTE( tmp_assattr_target_3, const_str_plain__communication_started, tmp_assattr_name_3 );
        if ( tmp_result == false )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 673;
            type_description_1 = "oooooooooooooooooooooooooooooo";
            goto frame_exception_exit_1;
        }
    }
    {
        nuitka_bool tmp_condition_result_1;
        PyObject *tmp_compexpr_left_1;
        PyObject *tmp_compexpr_right_1;
        CHECK_OBJECT( par_bufsize );
        tmp_compexpr_left_1 = par_bufsize;
        tmp_compexpr_right_1 = Py_None;
        tmp_condition_result_1 = ( tmp_compexpr_left_1 == tmp_compexpr_right_1 ) ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
        if ( tmp_condition_result_1 == NUITKA_BOOL_TRUE )
        {
            goto branch_yes_1;
        }
        else
        {
            goto branch_no_1;
        }
        branch_yes_1:;
        {
            PyObject *tmp_assign_source_1;
            tmp_assign_source_1 = const_int_neg_1;
            {
                PyObject *old = par_bufsize;
                assert( old != NULL );
                par_bufsize = tmp_assign_source_1;
                Py_INCREF( par_bufsize );
                Py_DECREF( old );
            }

        }
        branch_no_1:;
    }
    {
        nuitka_bool tmp_condition_result_2;
        PyObject *tmp_operand_name_1;
        PyObject *tmp_isinstance_inst_1;
        PyObject *tmp_isinstance_cls_1;
        CHECK_OBJECT( par_bufsize );
        tmp_isinstance_inst_1 = par_bufsize;
        tmp_isinstance_cls_1 = (PyObject *)&PyLong_Type;
        tmp_res = Nuitka_IsInstance( tmp_isinstance_inst_1, tmp_isinstance_cls_1 );
        if ( tmp_res == -1 )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 676;
            type_description_1 = "oooooooooooooooooooooooooooooo";
            goto frame_exception_exit_1;
        }
        tmp_operand_name_1 = ( tmp_res != 0 ) ? Py_True : Py_False;
        tmp_res = CHECK_IF_TRUE( tmp_operand_name_1 );
        if ( tmp_res == -1 )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 676;
            type_description_1 = "oooooooooooooooooooooooooooooo";
            goto frame_exception_exit_1;
        }
        tmp_condition_result_2 = ( tmp_res == 0 ) ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
        if ( tmp_condition_result_2 == NUITKA_BOOL_TRUE )
        {
            goto branch_yes_2;
        }
        else
        {
            goto branch_no_2;
        }
        branch_yes_2:;
        {
            PyObject *tmp_raise_type_1;
            PyObject *tmp_make_exception_arg_1;
            tmp_make_exception_arg_1 = const_str_digest_77f73674b849dfbaebef9438ad08733e;
            frame_3307251e478e6f87577905ed55fc01cd->m_frame.f_lineno = 677;
            {
                PyObject *call_args[] = { tmp_make_exception_arg_1 };
                tmp_raise_type_1 = CALL_FUNCTION_WITH_ARGS1( PyExc_TypeError, call_args );
            }

            assert( !(tmp_raise_type_1 == NULL) );
            exception_type = tmp_raise_type_1;
            exception_lineno = 677;
            RAISE_EXCEPTION_WITH_TYPE( &exception_type, &exception_value, &exception_tb );
            type_description_1 = "oooooooooooooooooooooooooooooo";
            goto frame_exception_exit_1;
        }
        branch_no_2:;
    }
    {
        nuitka_bool tmp_condition_result_3;
        PyObject *tmp_mvar_value_3;
        int tmp_truth_name_1;
        tmp_mvar_value_3 = GET_STRING_DICT_VALUE( moduledict_subprocess, (Nuitka_StringObject *)const_str_plain__mswindows );

        if (unlikely( tmp_mvar_value_3 == NULL ))
        {
            tmp_mvar_value_3 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain__mswindows );
        }

        if ( tmp_mvar_value_3 == NULL )
        {

            exception_type = PyExc_NameError;
            Py_INCREF( exception_type );
            exception_value = PyUnicode_FromFormat( "name '%s' is not defined", "_mswindows" );
            exception_tb = NULL;
            NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
            CHAIN_EXCEPTION( exception_value );

            exception_lineno = 679;
            type_description_1 = "oooooooooooooooooooooooooooooo";
            goto frame_exception_exit_1;
        }

        tmp_truth_name_1 = CHECK_IF_TRUE( tmp_mvar_value_3 );
        if ( tmp_truth_name_1 == -1 )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 679;
            type_description_1 = "oooooooooooooooooooooooooooooo";
            goto frame_exception_exit_1;
        }
        tmp_condition_result_3 = tmp_truth_name_1 == 1 ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
        if ( tmp_condition_result_3 == NUITKA_BOOL_TRUE )
        {
            goto branch_yes_3;
        }
        else
        {
            goto branch_no_3;
        }
        branch_yes_3:;
        {
            nuitka_bool tmp_condition_result_4;
            PyObject *tmp_compexpr_left_2;
            PyObject *tmp_compexpr_right_2;
            CHECK_OBJECT( par_preexec_fn );
            tmp_compexpr_left_2 = par_preexec_fn;
            tmp_compexpr_right_2 = Py_None;
            tmp_condition_result_4 = ( tmp_compexpr_left_2 != tmp_compexpr_right_2 ) ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
            if ( tmp_condition_result_4 == NUITKA_BOOL_TRUE )
            {
                goto branch_yes_4;
            }
            else
            {
                goto branch_no_4;
            }
            branch_yes_4:;
            {
                PyObject *tmp_raise_type_2;
                PyObject *tmp_make_exception_arg_2;
                tmp_make_exception_arg_2 = const_str_digest_efdf129abd1c7a9613b43bdd2cdb76ca;
                frame_3307251e478e6f87577905ed55fc01cd->m_frame.f_lineno = 681;
                {
                    PyObject *call_args[] = { tmp_make_exception_arg_2 };
                    tmp_raise_type_2 = CALL_FUNCTION_WITH_ARGS1( PyExc_ValueError, call_args );
                }

                assert( !(tmp_raise_type_2 == NULL) );
                exception_type = tmp_raise_type_2;
                exception_lineno = 681;
                RAISE_EXCEPTION_WITH_TYPE( &exception_type, &exception_value, &exception_tb );
                type_description_1 = "oooooooooooooooooooooooooooooo";
                goto frame_exception_exit_1;
            }
            branch_no_4:;
        }
        goto branch_end_3;
        branch_no_3:;
        {
            nuitka_bool tmp_condition_result_5;
            int tmp_and_left_truth_1;
            nuitka_bool tmp_and_left_value_1;
            nuitka_bool tmp_and_right_value_1;
            int tmp_truth_name_2;
            PyObject *tmp_operand_name_2;
            CHECK_OBJECT( par_pass_fds );
            tmp_truth_name_2 = CHECK_IF_TRUE( par_pass_fds );
            if ( tmp_truth_name_2 == -1 )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 685;
                type_description_1 = "oooooooooooooooooooooooooooooo";
                goto frame_exception_exit_1;
            }
            tmp_and_left_value_1 = tmp_truth_name_2 == 1 ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
            tmp_and_left_truth_1 = tmp_and_left_value_1 == NUITKA_BOOL_TRUE ? 1 : 0;
            if ( tmp_and_left_truth_1 == 1 )
            {
                goto and_right_1;
            }
            else
            {
                goto and_left_1;
            }
            and_right_1:;
            CHECK_OBJECT( par_close_fds );
            tmp_operand_name_2 = par_close_fds;
            tmp_res = CHECK_IF_TRUE( tmp_operand_name_2 );
            if ( tmp_res == -1 )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 685;
                type_description_1 = "oooooooooooooooooooooooooooooo";
                goto frame_exception_exit_1;
            }
            tmp_and_right_value_1 = ( tmp_res == 0 ) ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
            tmp_condition_result_5 = tmp_and_right_value_1;
            goto and_end_1;
            and_left_1:;
            tmp_condition_result_5 = tmp_and_left_value_1;
            and_end_1:;
            if ( tmp_condition_result_5 == NUITKA_BOOL_TRUE )
            {
                goto branch_yes_5;
            }
            else
            {
                goto branch_no_5;
            }
            branch_yes_5:;
            {
                PyObject *tmp_called_name_2;
                PyObject *tmp_source_name_1;
                PyObject *tmp_mvar_value_4;
                PyObject *tmp_call_result_2;
                PyObject *tmp_args_element_name_1;
                PyObject *tmp_args_element_name_2;
                PyObject *tmp_mvar_value_5;
                tmp_mvar_value_4 = GET_STRING_DICT_VALUE( moduledict_subprocess, (Nuitka_StringObject *)const_str_plain_warnings );

                if (unlikely( tmp_mvar_value_4 == NULL ))
                {
                    tmp_mvar_value_4 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_warnings );
                }

                if ( tmp_mvar_value_4 == NULL )
                {

                    exception_type = PyExc_NameError;
                    Py_INCREF( exception_type );
                    exception_value = PyUnicode_FromFormat( "name '%s' is not defined", "warnings" );
                    exception_tb = NULL;
                    NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
                    CHAIN_EXCEPTION( exception_value );

                    exception_lineno = 686;
                    type_description_1 = "oooooooooooooooooooooooooooooo";
                    goto frame_exception_exit_1;
                }

                tmp_source_name_1 = tmp_mvar_value_4;
                tmp_called_name_2 = LOOKUP_ATTRIBUTE( tmp_source_name_1, const_str_plain_warn );
                if ( tmp_called_name_2 == NULL )
                {
                    assert( ERROR_OCCURRED() );

                    FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                    exception_lineno = 686;
                    type_description_1 = "oooooooooooooooooooooooooooooo";
                    goto frame_exception_exit_1;
                }
                tmp_args_element_name_1 = const_str_digest_3d757e4458d6f562adb6609274396e8a;
                tmp_mvar_value_5 = GET_STRING_DICT_VALUE( moduledict_subprocess, (Nuitka_StringObject *)const_str_plain_RuntimeWarning );

                if (unlikely( tmp_mvar_value_5 == NULL ))
                {
                    tmp_mvar_value_5 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_RuntimeWarning );
                }

                if ( tmp_mvar_value_5 == NULL )
                {
                    Py_DECREF( tmp_called_name_2 );
                    exception_type = PyExc_NameError;
                    Py_INCREF( exception_type );
                    exception_value = PyUnicode_FromFormat( "name '%s' is not defined", "RuntimeWarning" );
                    exception_tb = NULL;
                    NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
                    CHAIN_EXCEPTION( exception_value );

                    exception_lineno = 686;
                    type_description_1 = "oooooooooooooooooooooooooooooo";
                    goto frame_exception_exit_1;
                }

                tmp_args_element_name_2 = tmp_mvar_value_5;
                frame_3307251e478e6f87577905ed55fc01cd->m_frame.f_lineno = 686;
                {
                    PyObject *call_args[] = { tmp_args_element_name_1, tmp_args_element_name_2 };
                    tmp_call_result_2 = CALL_FUNCTION_WITH_ARGS2( tmp_called_name_2, call_args );
                }

                Py_DECREF( tmp_called_name_2 );
                if ( tmp_call_result_2 == NULL )
                {
                    assert( ERROR_OCCURRED() );

                    FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                    exception_lineno = 686;
                    type_description_1 = "oooooooooooooooooooooooooooooo";
                    goto frame_exception_exit_1;
                }
                Py_DECREF( tmp_call_result_2 );
            }
            {
                PyObject *tmp_assign_source_2;
                tmp_assign_source_2 = Py_True;
                {
                    PyObject *old = par_close_fds;
                    assert( old != NULL );
                    par_close_fds = tmp_assign_source_2;
                    Py_INCREF( par_close_fds );
                    Py_DECREF( old );
                }

            }
            branch_no_5:;
        }
        {
            nuitka_bool tmp_condition_result_6;
            PyObject *tmp_compexpr_left_3;
            PyObject *tmp_compexpr_right_3;
            CHECK_OBJECT( par_startupinfo );
            tmp_compexpr_left_3 = par_startupinfo;
            tmp_compexpr_right_3 = Py_None;
            tmp_condition_result_6 = ( tmp_compexpr_left_3 != tmp_compexpr_right_3 ) ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
            if ( tmp_condition_result_6 == NUITKA_BOOL_TRUE )
            {
                goto branch_yes_6;
            }
            else
            {
                goto branch_no_6;
            }
            branch_yes_6:;
            {
                PyObject *tmp_raise_type_3;
                PyObject *tmp_make_exception_arg_3;
                tmp_make_exception_arg_3 = const_str_digest_e096819985cef365d5caa59be5dc3e0d;
                frame_3307251e478e6f87577905ed55fc01cd->m_frame.f_lineno = 689;
                {
                    PyObject *call_args[] = { tmp_make_exception_arg_3 };
                    tmp_raise_type_3 = CALL_FUNCTION_WITH_ARGS1( PyExc_ValueError, call_args );
                }

                assert( !(tmp_raise_type_3 == NULL) );
                exception_type = tmp_raise_type_3;
                exception_lineno = 689;
                RAISE_EXCEPTION_WITH_TYPE( &exception_type, &exception_value, &exception_tb );
                type_description_1 = "oooooooooooooooooooooooooooooo";
                goto frame_exception_exit_1;
            }
            branch_no_6:;
        }
        {
            nuitka_bool tmp_condition_result_7;
            PyObject *tmp_compexpr_left_4;
            PyObject *tmp_compexpr_right_4;
            CHECK_OBJECT( par_creationflags );
            tmp_compexpr_left_4 = par_creationflags;
            tmp_compexpr_right_4 = const_int_0;
            tmp_res = RICH_COMPARE_BOOL_NOTEQ_OBJECT_OBJECT( tmp_compexpr_left_4, tmp_compexpr_right_4 );
            if ( tmp_res == -1 )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 691;
                type_description_1 = "oooooooooooooooooooooooooooooo";
                goto frame_exception_exit_1;
            }
            tmp_condition_result_7 = ( tmp_res != 0 ) ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
            if ( tmp_condition_result_7 == NUITKA_BOOL_TRUE )
            {
                goto branch_yes_7;
            }
            else
            {
                goto branch_no_7;
            }
            branch_yes_7:;
            {
                PyObject *tmp_raise_type_4;
                PyObject *tmp_make_exception_arg_4;
                tmp_make_exception_arg_4 = const_str_digest_3cf2126fcabff0e2cda546c966091d3c;
                frame_3307251e478e6f87577905ed55fc01cd->m_frame.f_lineno = 692;
                {
                    PyObject *call_args[] = { tmp_make_exception_arg_4 };
                    tmp_raise_type_4 = CALL_FUNCTION_WITH_ARGS1( PyExc_ValueError, call_args );
                }

                assert( !(tmp_raise_type_4 == NULL) );
                exception_type = tmp_raise_type_4;
                exception_lineno = 692;
                RAISE_EXCEPTION_WITH_TYPE( &exception_type, &exception_value, &exception_tb );
                type_description_1 = "oooooooooooooooooooooooooooooo";
                goto frame_exception_exit_1;
            }
            branch_no_7:;
        }
        branch_end_3:;
    }
    {
        PyObject *tmp_assattr_name_4;
        PyObject *tmp_assattr_target_4;
        CHECK_OBJECT( par_args );
        tmp_assattr_name_4 = par_args;
        CHECK_OBJECT( par_self );
        tmp_assattr_target_4 = par_self;
        tmp_result = SET_ATTRIBUTE( tmp_assattr_target_4, const_str_plain_args, tmp_assattr_name_4 );
        if ( tmp_result == false )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 695;
            type_description_1 = "oooooooooooooooooooooooooooooo";
            goto frame_exception_exit_1;
        }
    }
    {
        PyObject *tmp_assattr_name_5;
        PyObject *tmp_assattr_target_5;
        tmp_assattr_name_5 = Py_None;
        CHECK_OBJECT( par_self );
        tmp_assattr_target_5 = par_self;
        tmp_result = SET_ATTRIBUTE( tmp_assattr_target_5, const_str_plain_stdin, tmp_assattr_name_5 );
        if ( tmp_result == false )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 696;
            type_description_1 = "oooooooooooooooooooooooooooooo";
            goto frame_exception_exit_1;
        }
    }
    {
        PyObject *tmp_assattr_name_6;
        PyObject *tmp_assattr_target_6;
        tmp_assattr_name_6 = Py_None;
        CHECK_OBJECT( par_self );
        tmp_assattr_target_6 = par_self;
        tmp_result = SET_ATTRIBUTE( tmp_assattr_target_6, const_str_plain_stdout, tmp_assattr_name_6 );
        if ( tmp_result == false )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 697;
            type_description_1 = "oooooooooooooooooooooooooooooo";
            goto frame_exception_exit_1;
        }
    }
    {
        PyObject *tmp_assattr_name_7;
        PyObject *tmp_assattr_target_7;
        tmp_assattr_name_7 = Py_None;
        CHECK_OBJECT( par_self );
        tmp_assattr_target_7 = par_self;
        tmp_result = SET_ATTRIBUTE( tmp_assattr_target_7, const_str_plain_stderr, tmp_assattr_name_7 );
        if ( tmp_result == false )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 698;
            type_description_1 = "oooooooooooooooooooooooooooooo";
            goto frame_exception_exit_1;
        }
    }
    {
        PyObject *tmp_assattr_name_8;
        PyObject *tmp_assattr_target_8;
        tmp_assattr_name_8 = Py_None;
        CHECK_OBJECT( par_self );
        tmp_assattr_target_8 = par_self;
        tmp_result = SET_ATTRIBUTE( tmp_assattr_target_8, const_str_plain_pid, tmp_assattr_name_8 );
        if ( tmp_result == false )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 699;
            type_description_1 = "oooooooooooooooooooooooooooooo";
            goto frame_exception_exit_1;
        }
    }
    {
        PyObject *tmp_assattr_name_9;
        PyObject *tmp_assattr_target_9;
        tmp_assattr_name_9 = Py_None;
        CHECK_OBJECT( par_self );
        tmp_assattr_target_9 = par_self;
        tmp_result = SET_ATTRIBUTE( tmp_assattr_target_9, const_str_plain_returncode, tmp_assattr_name_9 );
        if ( tmp_result == false )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 700;
            type_description_1 = "oooooooooooooooooooooooooooooo";
            goto frame_exception_exit_1;
        }
    }
    {
        PyObject *tmp_assattr_name_10;
        PyObject *tmp_assattr_target_10;
        CHECK_OBJECT( par_encoding );
        tmp_assattr_name_10 = par_encoding;
        CHECK_OBJECT( par_self );
        tmp_assattr_target_10 = par_self;
        tmp_result = SET_ATTRIBUTE( tmp_assattr_target_10, const_str_plain_encoding, tmp_assattr_name_10 );
        if ( tmp_result == false )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 701;
            type_description_1 = "oooooooooooooooooooooooooooooo";
            goto frame_exception_exit_1;
        }
    }
    {
        PyObject *tmp_assattr_name_11;
        PyObject *tmp_assattr_target_11;
        CHECK_OBJECT( par_errors );
        tmp_assattr_name_11 = par_errors;
        CHECK_OBJECT( par_self );
        tmp_assattr_target_11 = par_self;
        tmp_result = SET_ATTRIBUTE( tmp_assattr_target_11, const_str_plain_errors, tmp_assattr_name_11 );
        if ( tmp_result == false )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 702;
            type_description_1 = "oooooooooooooooooooooooooooooo";
            goto frame_exception_exit_1;
        }
    }
    {
        nuitka_bool tmp_condition_result_8;
        int tmp_and_left_truth_2;
        nuitka_bool tmp_and_left_value_2;
        nuitka_bool tmp_and_right_value_2;
        PyObject *tmp_compexpr_left_5;
        PyObject *tmp_compexpr_right_5;
        int tmp_and_left_truth_3;
        nuitka_bool tmp_and_left_value_3;
        nuitka_bool tmp_and_right_value_3;
        PyObject *tmp_compexpr_left_6;
        PyObject *tmp_compexpr_right_6;
        PyObject *tmp_compexpr_left_7;
        PyObject *tmp_compexpr_right_7;
        PyObject *tmp_value_name_1;
        PyObject *tmp_value_name_2;
        CHECK_OBJECT( par_text );
        tmp_compexpr_left_5 = par_text;
        tmp_compexpr_right_5 = Py_None;
        tmp_and_left_value_2 = ( tmp_compexpr_left_5 != tmp_compexpr_right_5 ) ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
        tmp_and_left_truth_2 = tmp_and_left_value_2 == NUITKA_BOOL_TRUE ? 1 : 0;
        if ( tmp_and_left_truth_2 == 1 )
        {
            goto and_right_2;
        }
        else
        {
            goto and_left_2;
        }
        and_right_2:;
        CHECK_OBJECT( par_universal_newlines );
        tmp_compexpr_left_6 = par_universal_newlines;
        tmp_compexpr_right_6 = Py_None;
        tmp_and_left_value_3 = ( tmp_compexpr_left_6 != tmp_compexpr_right_6 ) ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
        tmp_and_left_truth_3 = tmp_and_left_value_3 == NUITKA_BOOL_TRUE ? 1 : 0;
        if ( tmp_and_left_truth_3 == 1 )
        {
            goto and_right_3;
        }
        else
        {
            goto and_left_3;
        }
        and_right_3:;
        CHECK_OBJECT( par_universal_newlines );
        tmp_value_name_1 = par_universal_newlines;
        tmp_res = CHECK_IF_TRUE( tmp_value_name_1 );
        if ( tmp_res == -1 )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 706;
            type_description_1 = "oooooooooooooooooooooooooooooo";
            goto frame_exception_exit_1;
        }
        tmp_compexpr_left_7 = ( tmp_res != 0 ) ? Py_True : Py_False;
        CHECK_OBJECT( par_text );
        tmp_value_name_2 = par_text;
        tmp_res = CHECK_IF_TRUE( tmp_value_name_2 );
        if ( tmp_res == -1 )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 706;
            type_description_1 = "oooooooooooooooooooooooooooooo";
            goto frame_exception_exit_1;
        }
        tmp_compexpr_right_7 = ( tmp_res != 0 ) ? Py_True : Py_False;
        tmp_res = RICH_COMPARE_BOOL_NOTEQ_OBJECT_OBJECT( tmp_compexpr_left_7, tmp_compexpr_right_7 );
        assert( !(tmp_res == -1) );
        tmp_and_right_value_3 = ( tmp_res != 0 ) ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
        tmp_and_right_value_2 = tmp_and_right_value_3;
        goto and_end_3;
        and_left_3:;
        tmp_and_right_value_2 = tmp_and_left_value_3;
        and_end_3:;
        tmp_condition_result_8 = tmp_and_right_value_2;
        goto and_end_2;
        and_left_2:;
        tmp_condition_result_8 = tmp_and_left_value_2;
        and_end_2:;
        if ( tmp_condition_result_8 == NUITKA_BOOL_TRUE )
        {
            goto branch_yes_8;
        }
        else
        {
            goto branch_no_8;
        }
        branch_yes_8:;
        {
            PyObject *tmp_raise_type_5;
            PyObject *tmp_called_name_3;
            PyObject *tmp_mvar_value_6;
            tmp_mvar_value_6 = GET_STRING_DICT_VALUE( moduledict_subprocess, (Nuitka_StringObject *)const_str_plain_SubprocessError );

            if (unlikely( tmp_mvar_value_6 == NULL ))
            {
                tmp_mvar_value_6 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_SubprocessError );
            }

            if ( tmp_mvar_value_6 == NULL )
            {

                exception_type = PyExc_NameError;
                Py_INCREF( exception_type );
                exception_value = PyUnicode_FromFormat( "name '%s' is not defined", "SubprocessError" );
                exception_tb = NULL;
                NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
                CHAIN_EXCEPTION( exception_value );

                exception_lineno = 707;
                type_description_1 = "oooooooooooooooooooooooooooooo";
                goto frame_exception_exit_1;
            }

            tmp_called_name_3 = tmp_mvar_value_6;
            frame_3307251e478e6f87577905ed55fc01cd->m_frame.f_lineno = 707;
            tmp_raise_type_5 = CALL_FUNCTION_WITH_ARGS1( tmp_called_name_3, &PyTuple_GET_ITEM( const_tuple_str_digest_4e3a0250114d61f59638f6789662dcba_tuple, 0 ) );

            if ( tmp_raise_type_5 == NULL )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 707;
                type_description_1 = "oooooooooooooooooooooooooooooo";
                goto frame_exception_exit_1;
            }
            exception_type = tmp_raise_type_5;
            exception_lineno = 707;
            RAISE_EXCEPTION_WITH_TYPE( &exception_type, &exception_value, &exception_tb );
            type_description_1 = "oooooooooooooooooooooooooooooo";
            goto frame_exception_exit_1;
        }
        branch_no_8:;
    }
    // Tried code:
    {
        PyObject *tmp_assign_source_3;
        PyObject *tmp_iter_arg_1;
        PyObject *tmp_called_instance_2;
        PyObject *tmp_args_element_name_3;
        PyObject *tmp_args_element_name_4;
        PyObject *tmp_args_element_name_5;
        CHECK_OBJECT( par_self );
        tmp_called_instance_2 = par_self;
        CHECK_OBJECT( par_stdin );
        tmp_args_element_name_3 = par_stdin;
        CHECK_OBJECT( par_stdout );
        tmp_args_element_name_4 = par_stdout;
        CHECK_OBJECT( par_stderr );
        tmp_args_element_name_5 = par_stderr;
        frame_3307251e478e6f87577905ed55fc01cd->m_frame.f_lineno = 728;
        {
            PyObject *call_args[] = { tmp_args_element_name_3, tmp_args_element_name_4, tmp_args_element_name_5 };
            tmp_iter_arg_1 = CALL_METHOD_WITH_ARGS3( tmp_called_instance_2, const_str_plain__get_handles, call_args );
        }

        if ( tmp_iter_arg_1 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 728;
            type_description_1 = "oooooooooooooooooooooooooooooo";
            goto try_except_handler_2;
        }
        tmp_assign_source_3 = MAKE_UNPACK_ITERATOR( tmp_iter_arg_1 );
        Py_DECREF( tmp_iter_arg_1 );
        if ( tmp_assign_source_3 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 726;
            type_description_1 = "oooooooooooooooooooooooooooooo";
            goto try_except_handler_2;
        }
        assert( tmp_tuple_unpack_1__source_iter == NULL );
        tmp_tuple_unpack_1__source_iter = tmp_assign_source_3;
    }
    // Tried code:
    {
        PyObject *tmp_assign_source_4;
        PyObject *tmp_unpack_1;
        CHECK_OBJECT( tmp_tuple_unpack_1__source_iter );
        tmp_unpack_1 = tmp_tuple_unpack_1__source_iter;
        tmp_assign_source_4 = UNPACK_NEXT( tmp_unpack_1, 0, 6 );
        if ( tmp_assign_source_4 == NULL )
        {
            if ( !ERROR_OCCURRED() )
            {
                exception_type = PyExc_StopIteration;
                Py_INCREF( exception_type );
                exception_value = NULL;
                exception_tb = NULL;
            }
            else
            {
                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
            }


            type_description_1 = "oooooooooooooooooooooooooooooo";
            exception_lineno = 726;
            goto try_except_handler_3;
        }
        assert( tmp_tuple_unpack_1__element_1 == NULL );
        tmp_tuple_unpack_1__element_1 = tmp_assign_source_4;
    }
    {
        PyObject *tmp_assign_source_5;
        PyObject *tmp_unpack_2;
        CHECK_OBJECT( tmp_tuple_unpack_1__source_iter );
        tmp_unpack_2 = tmp_tuple_unpack_1__source_iter;
        tmp_assign_source_5 = UNPACK_NEXT( tmp_unpack_2, 1, 6 );
        if ( tmp_assign_source_5 == NULL )
        {
            if ( !ERROR_OCCURRED() )
            {
                exception_type = PyExc_StopIteration;
                Py_INCREF( exception_type );
                exception_value = NULL;
                exception_tb = NULL;
            }
            else
            {
                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
            }


            type_description_1 = "oooooooooooooooooooooooooooooo";
            exception_lineno = 726;
            goto try_except_handler_3;
        }
        assert( tmp_tuple_unpack_1__element_2 == NULL );
        tmp_tuple_unpack_1__element_2 = tmp_assign_source_5;
    }
    {
        PyObject *tmp_assign_source_6;
        PyObject *tmp_unpack_3;
        CHECK_OBJECT( tmp_tuple_unpack_1__source_iter );
        tmp_unpack_3 = tmp_tuple_unpack_1__source_iter;
        tmp_assign_source_6 = UNPACK_NEXT( tmp_unpack_3, 2, 6 );
        if ( tmp_assign_source_6 == NULL )
        {
            if ( !ERROR_OCCURRED() )
            {
                exception_type = PyExc_StopIteration;
                Py_INCREF( exception_type );
                exception_value = NULL;
                exception_tb = NULL;
            }
            else
            {
                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
            }


            type_description_1 = "oooooooooooooooooooooooooooooo";
            exception_lineno = 726;
            goto try_except_handler_3;
        }
        assert( tmp_tuple_unpack_1__element_3 == NULL );
        tmp_tuple_unpack_1__element_3 = tmp_assign_source_6;
    }
    {
        PyObject *tmp_assign_source_7;
        PyObject *tmp_unpack_4;
        CHECK_OBJECT( tmp_tuple_unpack_1__source_iter );
        tmp_unpack_4 = tmp_tuple_unpack_1__source_iter;
        tmp_assign_source_7 = UNPACK_NEXT( tmp_unpack_4, 3, 6 );
        if ( tmp_assign_source_7 == NULL )
        {
            if ( !ERROR_OCCURRED() )
            {
                exception_type = PyExc_StopIteration;
                Py_INCREF( exception_type );
                exception_value = NULL;
                exception_tb = NULL;
            }
            else
            {
                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
            }


            type_description_1 = "oooooooooooooooooooooooooooooo";
            exception_lineno = 726;
            goto try_except_handler_3;
        }
        assert( tmp_tuple_unpack_1__element_4 == NULL );
        tmp_tuple_unpack_1__element_4 = tmp_assign_source_7;
    }
    {
        PyObject *tmp_assign_source_8;
        PyObject *tmp_unpack_5;
        CHECK_OBJECT( tmp_tuple_unpack_1__source_iter );
        tmp_unpack_5 = tmp_tuple_unpack_1__source_iter;
        tmp_assign_source_8 = UNPACK_NEXT( tmp_unpack_5, 4, 6 );
        if ( tmp_assign_source_8 == NULL )
        {
            if ( !ERROR_OCCURRED() )
            {
                exception_type = PyExc_StopIteration;
                Py_INCREF( exception_type );
                exception_value = NULL;
                exception_tb = NULL;
            }
            else
            {
                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
            }


            type_description_1 = "oooooooooooooooooooooooooooooo";
            exception_lineno = 726;
            goto try_except_handler_3;
        }
        assert( tmp_tuple_unpack_1__element_5 == NULL );
        tmp_tuple_unpack_1__element_5 = tmp_assign_source_8;
    }
    {
        PyObject *tmp_assign_source_9;
        PyObject *tmp_unpack_6;
        CHECK_OBJECT( tmp_tuple_unpack_1__source_iter );
        tmp_unpack_6 = tmp_tuple_unpack_1__source_iter;
        tmp_assign_source_9 = UNPACK_NEXT( tmp_unpack_6, 5, 6 );
        if ( tmp_assign_source_9 == NULL )
        {
            if ( !ERROR_OCCURRED() )
            {
                exception_type = PyExc_StopIteration;
                Py_INCREF( exception_type );
                exception_value = NULL;
                exception_tb = NULL;
            }
            else
            {
                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
            }


            type_description_1 = "oooooooooooooooooooooooooooooo";
            exception_lineno = 726;
            goto try_except_handler_3;
        }
        assert( tmp_tuple_unpack_1__element_6 == NULL );
        tmp_tuple_unpack_1__element_6 = tmp_assign_source_9;
    }
    {
        PyObject *tmp_iterator_name_1;
        CHECK_OBJECT( tmp_tuple_unpack_1__source_iter );
        tmp_iterator_name_1 = tmp_tuple_unpack_1__source_iter;
        // Check if iterator has left-over elements.
        CHECK_OBJECT( tmp_iterator_name_1 ); assert( HAS_ITERNEXT( tmp_iterator_name_1 ) );

        tmp_iterator_attempt = (*Py_TYPE( tmp_iterator_name_1 )->tp_iternext)( tmp_iterator_name_1 );

        if (likely( tmp_iterator_attempt == NULL ))
        {
            PyObject *error = GET_ERROR_OCCURRED();

            if ( error != NULL )
            {
                if ( EXCEPTION_MATCH_BOOL_SINGLE( error, PyExc_StopIteration ))
                {
                    CLEAR_ERROR_OCCURRED();
                }
                else
                {
                    FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );

                    type_description_1 = "oooooooooooooooooooooooooooooo";
                    exception_lineno = 726;
                    goto try_except_handler_3;
                }
            }
        }
        else
        {
            Py_DECREF( tmp_iterator_attempt );

            // TODO: Could avoid PyErr_Format.
#if PYTHON_VERSION < 300
            PyErr_Format( PyExc_ValueError, "too many values to unpack" );
#else
            PyErr_Format( PyExc_ValueError, "too many values to unpack (expected 6)" );
#endif
            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );

            type_description_1 = "oooooooooooooooooooooooooooooo";
            exception_lineno = 726;
            goto try_except_handler_3;
        }
    }
    goto try_end_1;
    // Exception handler code:
    try_except_handler_3:;
    exception_keeper_type_1 = exception_type;
    exception_keeper_value_1 = exception_value;
    exception_keeper_tb_1 = exception_tb;
    exception_keeper_lineno_1 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    CHECK_OBJECT( (PyObject *)tmp_tuple_unpack_1__source_iter );
    Py_DECREF( tmp_tuple_unpack_1__source_iter );
    tmp_tuple_unpack_1__source_iter = NULL;

    // Re-raise.
    exception_type = exception_keeper_type_1;
    exception_value = exception_keeper_value_1;
    exception_tb = exception_keeper_tb_1;
    exception_lineno = exception_keeper_lineno_1;

    goto try_except_handler_2;
    // End of try:
    try_end_1:;
    goto try_end_2;
    // Exception handler code:
    try_except_handler_2:;
    exception_keeper_type_2 = exception_type;
    exception_keeper_value_2 = exception_value;
    exception_keeper_tb_2 = exception_tb;
    exception_keeper_lineno_2 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    Py_XDECREF( tmp_tuple_unpack_1__element_1 );
    tmp_tuple_unpack_1__element_1 = NULL;

    Py_XDECREF( tmp_tuple_unpack_1__element_2 );
    tmp_tuple_unpack_1__element_2 = NULL;

    Py_XDECREF( tmp_tuple_unpack_1__element_3 );
    tmp_tuple_unpack_1__element_3 = NULL;

    Py_XDECREF( tmp_tuple_unpack_1__element_4 );
    tmp_tuple_unpack_1__element_4 = NULL;

    Py_XDECREF( tmp_tuple_unpack_1__element_5 );
    tmp_tuple_unpack_1__element_5 = NULL;

    Py_XDECREF( tmp_tuple_unpack_1__element_6 );
    tmp_tuple_unpack_1__element_6 = NULL;

    // Re-raise.
    exception_type = exception_keeper_type_2;
    exception_value = exception_keeper_value_2;
    exception_tb = exception_keeper_tb_2;
    exception_lineno = exception_keeper_lineno_2;

    goto frame_exception_exit_1;
    // End of try:
    try_end_2:;
    CHECK_OBJECT( (PyObject *)tmp_tuple_unpack_1__source_iter );
    Py_DECREF( tmp_tuple_unpack_1__source_iter );
    tmp_tuple_unpack_1__source_iter = NULL;

    {
        PyObject *tmp_assign_source_10;
        CHECK_OBJECT( tmp_tuple_unpack_1__element_1 );
        tmp_assign_source_10 = tmp_tuple_unpack_1__element_1;
        assert( var_p2cread == NULL );
        Py_INCREF( tmp_assign_source_10 );
        var_p2cread = tmp_assign_source_10;
    }
    Py_XDECREF( tmp_tuple_unpack_1__element_1 );
    tmp_tuple_unpack_1__element_1 = NULL;

    {
        PyObject *tmp_assign_source_11;
        CHECK_OBJECT( tmp_tuple_unpack_1__element_2 );
        tmp_assign_source_11 = tmp_tuple_unpack_1__element_2;
        assert( var_p2cwrite == NULL );
        Py_INCREF( tmp_assign_source_11 );
        var_p2cwrite = tmp_assign_source_11;
    }
    Py_XDECREF( tmp_tuple_unpack_1__element_2 );
    tmp_tuple_unpack_1__element_2 = NULL;

    {
        PyObject *tmp_assign_source_12;
        CHECK_OBJECT( tmp_tuple_unpack_1__element_3 );
        tmp_assign_source_12 = tmp_tuple_unpack_1__element_3;
        assert( var_c2pread == NULL );
        Py_INCREF( tmp_assign_source_12 );
        var_c2pread = tmp_assign_source_12;
    }
    Py_XDECREF( tmp_tuple_unpack_1__element_3 );
    tmp_tuple_unpack_1__element_3 = NULL;

    {
        PyObject *tmp_assign_source_13;
        CHECK_OBJECT( tmp_tuple_unpack_1__element_4 );
        tmp_assign_source_13 = tmp_tuple_unpack_1__element_4;
        assert( var_c2pwrite == NULL );
        Py_INCREF( tmp_assign_source_13 );
        var_c2pwrite = tmp_assign_source_13;
    }
    Py_XDECREF( tmp_tuple_unpack_1__element_4 );
    tmp_tuple_unpack_1__element_4 = NULL;

    {
        PyObject *tmp_assign_source_14;
        CHECK_OBJECT( tmp_tuple_unpack_1__element_5 );
        tmp_assign_source_14 = tmp_tuple_unpack_1__element_5;
        assert( var_errread == NULL );
        Py_INCREF( tmp_assign_source_14 );
        var_errread = tmp_assign_source_14;
    }
    Py_XDECREF( tmp_tuple_unpack_1__element_5 );
    tmp_tuple_unpack_1__element_5 = NULL;

    {
        PyObject *tmp_assign_source_15;
        CHECK_OBJECT( tmp_tuple_unpack_1__element_6 );
        tmp_assign_source_15 = tmp_tuple_unpack_1__element_6;
        assert( var_errwrite == NULL );
        Py_INCREF( tmp_assign_source_15 );
        var_errwrite = tmp_assign_source_15;
    }
    Py_XDECREF( tmp_tuple_unpack_1__element_6 );
    tmp_tuple_unpack_1__element_6 = NULL;

    {
        nuitka_bool tmp_condition_result_9;
        PyObject *tmp_mvar_value_7;
        int tmp_truth_name_3;
        tmp_mvar_value_7 = GET_STRING_DICT_VALUE( moduledict_subprocess, (Nuitka_StringObject *)const_str_plain__mswindows );

        if (unlikely( tmp_mvar_value_7 == NULL ))
        {
            tmp_mvar_value_7 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain__mswindows );
        }

        if ( tmp_mvar_value_7 == NULL )
        {

            exception_type = PyExc_NameError;
            Py_INCREF( exception_type );
            exception_value = PyUnicode_FromFormat( "name '%s' is not defined", "_mswindows" );
            exception_tb = NULL;
            NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
            CHAIN_EXCEPTION( exception_value );

            exception_lineno = 734;
            type_description_1 = "oooooooooooooooooooooooooooooo";
            goto frame_exception_exit_1;
        }

        tmp_truth_name_3 = CHECK_IF_TRUE( tmp_mvar_value_7 );
        if ( tmp_truth_name_3 == -1 )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 734;
            type_description_1 = "oooooooooooooooooooooooooooooo";
            goto frame_exception_exit_1;
        }
        tmp_condition_result_9 = tmp_truth_name_3 == 1 ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
        if ( tmp_condition_result_9 == NUITKA_BOOL_TRUE )
        {
            goto branch_yes_9;
        }
        else
        {
            goto branch_no_9;
        }
        branch_yes_9:;
        {
            nuitka_bool tmp_condition_result_10;
            PyObject *tmp_compexpr_left_8;
            PyObject *tmp_compexpr_right_8;
            CHECK_OBJECT( var_p2cwrite );
            tmp_compexpr_left_8 = var_p2cwrite;
            tmp_compexpr_right_8 = const_int_neg_1;
            tmp_res = RICH_COMPARE_BOOL_NOTEQ_OBJECT_OBJECT( tmp_compexpr_left_8, tmp_compexpr_right_8 );
            if ( tmp_res == -1 )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 735;
                type_description_1 = "oooooooooooooooooooooooooooooo";
                goto frame_exception_exit_1;
            }
            tmp_condition_result_10 = ( tmp_res != 0 ) ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
            if ( tmp_condition_result_10 == NUITKA_BOOL_TRUE )
            {
                goto branch_yes_10;
            }
            else
            {
                goto branch_no_10;
            }
            branch_yes_10:;
            {
                PyObject *tmp_assign_source_16;
                PyObject *tmp_called_name_4;
                PyObject *tmp_source_name_2;
                PyObject *tmp_mvar_value_8;
                PyObject *tmp_args_element_name_6;
                PyObject *tmp_called_instance_3;
                PyObject *tmp_args_element_name_7;
                tmp_mvar_value_8 = GET_STRING_DICT_VALUE( moduledict_subprocess, (Nuitka_StringObject *)const_str_plain_msvcrt );

                if (unlikely( tmp_mvar_value_8 == NULL ))
                {
                    tmp_mvar_value_8 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_msvcrt );
                }

                if ( tmp_mvar_value_8 == NULL )
                {

                    exception_type = PyExc_NameError;
                    Py_INCREF( exception_type );
                    exception_value = PyUnicode_FromFormat( "name '%s' is not defined", "msvcrt" );
                    exception_tb = NULL;
                    NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
                    CHAIN_EXCEPTION( exception_value );

                    exception_lineno = 736;
                    type_description_1 = "oooooooooooooooooooooooooooooo";
                    goto frame_exception_exit_1;
                }

                tmp_source_name_2 = tmp_mvar_value_8;
                tmp_called_name_4 = LOOKUP_ATTRIBUTE( tmp_source_name_2, const_str_plain_open_osfhandle );
                if ( tmp_called_name_4 == NULL )
                {
                    assert( ERROR_OCCURRED() );

                    FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                    exception_lineno = 736;
                    type_description_1 = "oooooooooooooooooooooooooooooo";
                    goto frame_exception_exit_1;
                }
                CHECK_OBJECT( var_p2cwrite );
                tmp_called_instance_3 = var_p2cwrite;
                frame_3307251e478e6f87577905ed55fc01cd->m_frame.f_lineno = 736;
                tmp_args_element_name_6 = CALL_METHOD_NO_ARGS( tmp_called_instance_3, const_str_plain_Detach );
                if ( tmp_args_element_name_6 == NULL )
                {
                    assert( ERROR_OCCURRED() );

                    FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
                    Py_DECREF( tmp_called_name_4 );

                    exception_lineno = 736;
                    type_description_1 = "oooooooooooooooooooooooooooooo";
                    goto frame_exception_exit_1;
                }
                tmp_args_element_name_7 = const_int_0;
                frame_3307251e478e6f87577905ed55fc01cd->m_frame.f_lineno = 736;
                {
                    PyObject *call_args[] = { tmp_args_element_name_6, tmp_args_element_name_7 };
                    tmp_assign_source_16 = CALL_FUNCTION_WITH_ARGS2( tmp_called_name_4, call_args );
                }

                Py_DECREF( tmp_called_name_4 );
                Py_DECREF( tmp_args_element_name_6 );
                if ( tmp_assign_source_16 == NULL )
                {
                    assert( ERROR_OCCURRED() );

                    FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                    exception_lineno = 736;
                    type_description_1 = "oooooooooooooooooooooooooooooo";
                    goto frame_exception_exit_1;
                }
                {
                    PyObject *old = var_p2cwrite;
                    assert( old != NULL );
                    var_p2cwrite = tmp_assign_source_16;
                    Py_DECREF( old );
                }

            }
            branch_no_10:;
        }
        {
            nuitka_bool tmp_condition_result_11;
            PyObject *tmp_compexpr_left_9;
            PyObject *tmp_compexpr_right_9;
            CHECK_OBJECT( var_c2pread );
            tmp_compexpr_left_9 = var_c2pread;
            tmp_compexpr_right_9 = const_int_neg_1;
            tmp_res = RICH_COMPARE_BOOL_NOTEQ_OBJECT_OBJECT( tmp_compexpr_left_9, tmp_compexpr_right_9 );
            if ( tmp_res == -1 )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 737;
                type_description_1 = "oooooooooooooooooooooooooooooo";
                goto frame_exception_exit_1;
            }
            tmp_condition_result_11 = ( tmp_res != 0 ) ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
            if ( tmp_condition_result_11 == NUITKA_BOOL_TRUE )
            {
                goto branch_yes_11;
            }
            else
            {
                goto branch_no_11;
            }
            branch_yes_11:;
            {
                PyObject *tmp_assign_source_17;
                PyObject *tmp_called_name_5;
                PyObject *tmp_source_name_3;
                PyObject *tmp_mvar_value_9;
                PyObject *tmp_args_element_name_8;
                PyObject *tmp_called_instance_4;
                PyObject *tmp_args_element_name_9;
                tmp_mvar_value_9 = GET_STRING_DICT_VALUE( moduledict_subprocess, (Nuitka_StringObject *)const_str_plain_msvcrt );

                if (unlikely( tmp_mvar_value_9 == NULL ))
                {
                    tmp_mvar_value_9 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_msvcrt );
                }

                if ( tmp_mvar_value_9 == NULL )
                {

                    exception_type = PyExc_NameError;
                    Py_INCREF( exception_type );
                    exception_value = PyUnicode_FromFormat( "name '%s' is not defined", "msvcrt" );
                    exception_tb = NULL;
                    NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
                    CHAIN_EXCEPTION( exception_value );

                    exception_lineno = 738;
                    type_description_1 = "oooooooooooooooooooooooooooooo";
                    goto frame_exception_exit_1;
                }

                tmp_source_name_3 = tmp_mvar_value_9;
                tmp_called_name_5 = LOOKUP_ATTRIBUTE( tmp_source_name_3, const_str_plain_open_osfhandle );
                if ( tmp_called_name_5 == NULL )
                {
                    assert( ERROR_OCCURRED() );

                    FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                    exception_lineno = 738;
                    type_description_1 = "oooooooooooooooooooooooooooooo";
                    goto frame_exception_exit_1;
                }
                CHECK_OBJECT( var_c2pread );
                tmp_called_instance_4 = var_c2pread;
                frame_3307251e478e6f87577905ed55fc01cd->m_frame.f_lineno = 738;
                tmp_args_element_name_8 = CALL_METHOD_NO_ARGS( tmp_called_instance_4, const_str_plain_Detach );
                if ( tmp_args_element_name_8 == NULL )
                {
                    assert( ERROR_OCCURRED() );

                    FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
                    Py_DECREF( tmp_called_name_5 );

                    exception_lineno = 738;
                    type_description_1 = "oooooooooooooooooooooooooooooo";
                    goto frame_exception_exit_1;
                }
                tmp_args_element_name_9 = const_int_0;
                frame_3307251e478e6f87577905ed55fc01cd->m_frame.f_lineno = 738;
                {
                    PyObject *call_args[] = { tmp_args_element_name_8, tmp_args_element_name_9 };
                    tmp_assign_source_17 = CALL_FUNCTION_WITH_ARGS2( tmp_called_name_5, call_args );
                }

                Py_DECREF( tmp_called_name_5 );
                Py_DECREF( tmp_args_element_name_8 );
                if ( tmp_assign_source_17 == NULL )
                {
                    assert( ERROR_OCCURRED() );

                    FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                    exception_lineno = 738;
                    type_description_1 = "oooooooooooooooooooooooooooooo";
                    goto frame_exception_exit_1;
                }
                {
                    PyObject *old = var_c2pread;
                    assert( old != NULL );
                    var_c2pread = tmp_assign_source_17;
                    Py_DECREF( old );
                }

            }
            branch_no_11:;
        }
        {
            nuitka_bool tmp_condition_result_12;
            PyObject *tmp_compexpr_left_10;
            PyObject *tmp_compexpr_right_10;
            CHECK_OBJECT( var_errread );
            tmp_compexpr_left_10 = var_errread;
            tmp_compexpr_right_10 = const_int_neg_1;
            tmp_res = RICH_COMPARE_BOOL_NOTEQ_OBJECT_OBJECT( tmp_compexpr_left_10, tmp_compexpr_right_10 );
            if ( tmp_res == -1 )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 739;
                type_description_1 = "oooooooooooooooooooooooooooooo";
                goto frame_exception_exit_1;
            }
            tmp_condition_result_12 = ( tmp_res != 0 ) ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
            if ( tmp_condition_result_12 == NUITKA_BOOL_TRUE )
            {
                goto branch_yes_12;
            }
            else
            {
                goto branch_no_12;
            }
            branch_yes_12:;
            {
                PyObject *tmp_assign_source_18;
                PyObject *tmp_called_name_6;
                PyObject *tmp_source_name_4;
                PyObject *tmp_mvar_value_10;
                PyObject *tmp_args_element_name_10;
                PyObject *tmp_called_instance_5;
                PyObject *tmp_args_element_name_11;
                tmp_mvar_value_10 = GET_STRING_DICT_VALUE( moduledict_subprocess, (Nuitka_StringObject *)const_str_plain_msvcrt );

                if (unlikely( tmp_mvar_value_10 == NULL ))
                {
                    tmp_mvar_value_10 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_msvcrt );
                }

                if ( tmp_mvar_value_10 == NULL )
                {

                    exception_type = PyExc_NameError;
                    Py_INCREF( exception_type );
                    exception_value = PyUnicode_FromFormat( "name '%s' is not defined", "msvcrt" );
                    exception_tb = NULL;
                    NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
                    CHAIN_EXCEPTION( exception_value );

                    exception_lineno = 740;
                    type_description_1 = "oooooooooooooooooooooooooooooo";
                    goto frame_exception_exit_1;
                }

                tmp_source_name_4 = tmp_mvar_value_10;
                tmp_called_name_6 = LOOKUP_ATTRIBUTE( tmp_source_name_4, const_str_plain_open_osfhandle );
                if ( tmp_called_name_6 == NULL )
                {
                    assert( ERROR_OCCURRED() );

                    FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                    exception_lineno = 740;
                    type_description_1 = "oooooooooooooooooooooooooooooo";
                    goto frame_exception_exit_1;
                }
                CHECK_OBJECT( var_errread );
                tmp_called_instance_5 = var_errread;
                frame_3307251e478e6f87577905ed55fc01cd->m_frame.f_lineno = 740;
                tmp_args_element_name_10 = CALL_METHOD_NO_ARGS( tmp_called_instance_5, const_str_plain_Detach );
                if ( tmp_args_element_name_10 == NULL )
                {
                    assert( ERROR_OCCURRED() );

                    FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
                    Py_DECREF( tmp_called_name_6 );

                    exception_lineno = 740;
                    type_description_1 = "oooooooooooooooooooooooooooooo";
                    goto frame_exception_exit_1;
                }
                tmp_args_element_name_11 = const_int_0;
                frame_3307251e478e6f87577905ed55fc01cd->m_frame.f_lineno = 740;
                {
                    PyObject *call_args[] = { tmp_args_element_name_10, tmp_args_element_name_11 };
                    tmp_assign_source_18 = CALL_FUNCTION_WITH_ARGS2( tmp_called_name_6, call_args );
                }

                Py_DECREF( tmp_called_name_6 );
                Py_DECREF( tmp_args_element_name_10 );
                if ( tmp_assign_source_18 == NULL )
                {
                    assert( ERROR_OCCURRED() );

                    FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                    exception_lineno = 740;
                    type_description_1 = "oooooooooooooooooooooooooooooo";
                    goto frame_exception_exit_1;
                }
                {
                    PyObject *old = var_errread;
                    assert( old != NULL );
                    var_errread = tmp_assign_source_18;
                    Py_DECREF( old );
                }

            }
            branch_no_12:;
        }
        branch_no_9:;
    }
    {
        PyObject *tmp_assattr_name_12;
        int tmp_or_left_truth_1;
        PyObject *tmp_or_left_value_1;
        PyObject *tmp_or_right_value_1;
        int tmp_or_left_truth_2;
        PyObject *tmp_or_left_value_2;
        PyObject *tmp_or_right_value_2;
        int tmp_or_left_truth_3;
        PyObject *tmp_or_left_value_3;
        PyObject *tmp_or_right_value_3;
        PyObject *tmp_assattr_target_12;
        CHECK_OBJECT( par_encoding );
        tmp_or_left_value_1 = par_encoding;
        tmp_or_left_truth_1 = CHECK_IF_TRUE( tmp_or_left_value_1 );
        if ( tmp_or_left_truth_1 == -1 )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 742;
            type_description_1 = "oooooooooooooooooooooooooooooo";
            goto frame_exception_exit_1;
        }
        if ( tmp_or_left_truth_1 == 1 )
        {
            goto or_left_1;
        }
        else
        {
            goto or_right_1;
        }
        or_right_1:;
        CHECK_OBJECT( par_errors );
        tmp_or_left_value_2 = par_errors;
        tmp_or_left_truth_2 = CHECK_IF_TRUE( tmp_or_left_value_2 );
        if ( tmp_or_left_truth_2 == -1 )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 742;
            type_description_1 = "oooooooooooooooooooooooooooooo";
            goto frame_exception_exit_1;
        }
        if ( tmp_or_left_truth_2 == 1 )
        {
            goto or_left_2;
        }
        else
        {
            goto or_right_2;
        }
        or_right_2:;
        CHECK_OBJECT( par_text );
        tmp_or_left_value_3 = par_text;
        tmp_or_left_truth_3 = CHECK_IF_TRUE( tmp_or_left_value_3 );
        if ( tmp_or_left_truth_3 == -1 )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 742;
            type_description_1 = "oooooooooooooooooooooooooooooo";
            goto frame_exception_exit_1;
        }
        if ( tmp_or_left_truth_3 == 1 )
        {
            goto or_left_3;
        }
        else
        {
            goto or_right_3;
        }
        or_right_3:;
        CHECK_OBJECT( par_universal_newlines );
        tmp_or_right_value_3 = par_universal_newlines;
        tmp_or_right_value_2 = tmp_or_right_value_3;
        goto or_end_3;
        or_left_3:;
        tmp_or_right_value_2 = tmp_or_left_value_3;
        or_end_3:;
        tmp_or_right_value_1 = tmp_or_right_value_2;
        goto or_end_2;
        or_left_2:;
        tmp_or_right_value_1 = tmp_or_left_value_2;
        or_end_2:;
        tmp_assattr_name_12 = tmp_or_right_value_1;
        goto or_end_1;
        or_left_1:;
        tmp_assattr_name_12 = tmp_or_left_value_1;
        or_end_1:;
        CHECK_OBJECT( par_self );
        tmp_assattr_target_12 = par_self;
        tmp_result = SET_ATTRIBUTE( tmp_assattr_target_12, const_str_plain_text_mode, tmp_assattr_name_12 );
        if ( tmp_result == false )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 742;
            type_description_1 = "oooooooooooooooooooooooooooooo";
            goto frame_exception_exit_1;
        }
    }
    {
        PyObject *tmp_assattr_name_13;
        PyObject *tmp_assattr_target_13;
        tmp_assattr_name_13 = const_float_0_25;
        CHECK_OBJECT( par_self );
        tmp_assattr_target_13 = par_self;
        tmp_result = SET_ATTRIBUTE( tmp_assattr_target_13, const_str_plain__sigint_wait_secs, tmp_assattr_name_13 );
        if ( tmp_result == false )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 747;
            type_description_1 = "oooooooooooooooooooooooooooooo";
            goto frame_exception_exit_1;
        }
    }
    {
        PyObject *tmp_assattr_name_14;
        PyObject *tmp_assattr_target_14;
        tmp_assattr_name_14 = Py_False;
        CHECK_OBJECT( par_self );
        tmp_assattr_target_14 = par_self;
        tmp_result = SET_ATTRIBUTE( tmp_assattr_target_14, const_str_plain__closed_child_pipe_fds, tmp_assattr_name_14 );
        if ( tmp_result == false )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 749;
            type_description_1 = "oooooooooooooooooooooooooooooo";
            goto frame_exception_exit_1;
        }
    }
    // Tried code:
    {
        nuitka_bool tmp_condition_result_13;
        PyObject *tmp_compexpr_left_11;
        PyObject *tmp_compexpr_right_11;
        if ( var_p2cwrite == NULL )
        {

            exception_type = PyExc_UnboundLocalError;
            Py_INCREF( exception_type );
            exception_value = PyUnicode_FromFormat( "local variable '%s' referenced before assignment", "p2cwrite" );
            exception_tb = NULL;
            NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
            CHAIN_EXCEPTION( exception_value );

            exception_lineno = 752;
            type_description_1 = "oooooooooooooooooooooooooooooo";
            goto try_except_handler_4;
        }

        tmp_compexpr_left_11 = var_p2cwrite;
        tmp_compexpr_right_11 = const_int_neg_1;
        tmp_res = RICH_COMPARE_BOOL_NOTEQ_OBJECT_OBJECT( tmp_compexpr_left_11, tmp_compexpr_right_11 );
        if ( tmp_res == -1 )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 752;
            type_description_1 = "oooooooooooooooooooooooooooooo";
            goto try_except_handler_4;
        }
        tmp_condition_result_13 = ( tmp_res != 0 ) ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
        if ( tmp_condition_result_13 == NUITKA_BOOL_TRUE )
        {
            goto branch_yes_13;
        }
        else
        {
            goto branch_no_13;
        }
        branch_yes_13:;
        {
            PyObject *tmp_assattr_name_15;
            PyObject *tmp_called_name_7;
            PyObject *tmp_source_name_5;
            PyObject *tmp_mvar_value_11;
            PyObject *tmp_args_element_name_12;
            PyObject *tmp_args_element_name_13;
            PyObject *tmp_args_element_name_14;
            PyObject *tmp_assattr_target_15;
            tmp_mvar_value_11 = GET_STRING_DICT_VALUE( moduledict_subprocess, (Nuitka_StringObject *)const_str_plain_io );

            if (unlikely( tmp_mvar_value_11 == NULL ))
            {
                tmp_mvar_value_11 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_io );
            }

            if ( tmp_mvar_value_11 == NULL )
            {

                exception_type = PyExc_NameError;
                Py_INCREF( exception_type );
                exception_value = PyUnicode_FromFormat( "name '%s' is not defined", "io" );
                exception_tb = NULL;
                NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
                CHAIN_EXCEPTION( exception_value );

                exception_lineno = 753;
                type_description_1 = "oooooooooooooooooooooooooooooo";
                goto try_except_handler_4;
            }

            tmp_source_name_5 = tmp_mvar_value_11;
            tmp_called_name_7 = LOOKUP_ATTRIBUTE( tmp_source_name_5, const_str_plain_open );
            if ( tmp_called_name_7 == NULL )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 753;
                type_description_1 = "oooooooooooooooooooooooooooooo";
                goto try_except_handler_4;
            }
            if ( var_p2cwrite == NULL )
            {
                Py_DECREF( tmp_called_name_7 );
                exception_type = PyExc_UnboundLocalError;
                Py_INCREF( exception_type );
                exception_value = PyUnicode_FromFormat( "local variable '%s' referenced before assignment", "p2cwrite" );
                exception_tb = NULL;
                NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
                CHAIN_EXCEPTION( exception_value );

                exception_lineno = 753;
                type_description_1 = "oooooooooooooooooooooooooooooo";
                goto try_except_handler_4;
            }

            tmp_args_element_name_12 = var_p2cwrite;
            tmp_args_element_name_13 = const_str_plain_wb;
            CHECK_OBJECT( par_bufsize );
            tmp_args_element_name_14 = par_bufsize;
            frame_3307251e478e6f87577905ed55fc01cd->m_frame.f_lineno = 753;
            {
                PyObject *call_args[] = { tmp_args_element_name_12, tmp_args_element_name_13, tmp_args_element_name_14 };
                tmp_assattr_name_15 = CALL_FUNCTION_WITH_ARGS3( tmp_called_name_7, call_args );
            }

            Py_DECREF( tmp_called_name_7 );
            if ( tmp_assattr_name_15 == NULL )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 753;
                type_description_1 = "oooooooooooooooooooooooooooooo";
                goto try_except_handler_4;
            }
            CHECK_OBJECT( par_self );
            tmp_assattr_target_15 = par_self;
            tmp_result = SET_ATTRIBUTE( tmp_assattr_target_15, const_str_plain_stdin, tmp_assattr_name_15 );
            Py_DECREF( tmp_assattr_name_15 );
            if ( tmp_result == false )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 753;
                type_description_1 = "oooooooooooooooooooooooooooooo";
                goto try_except_handler_4;
            }
        }
        {
            nuitka_bool tmp_condition_result_14;
            PyObject *tmp_source_name_6;
            PyObject *tmp_attribute_value_1;
            int tmp_truth_name_4;
            CHECK_OBJECT( par_self );
            tmp_source_name_6 = par_self;
            tmp_attribute_value_1 = LOOKUP_ATTRIBUTE( tmp_source_name_6, const_str_plain_text_mode );
            if ( tmp_attribute_value_1 == NULL )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 754;
                type_description_1 = "oooooooooooooooooooooooooooooo";
                goto try_except_handler_4;
            }
            tmp_truth_name_4 = CHECK_IF_TRUE( tmp_attribute_value_1 );
            if ( tmp_truth_name_4 == -1 )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
                Py_DECREF( tmp_attribute_value_1 );

                exception_lineno = 754;
                type_description_1 = "oooooooooooooooooooooooooooooo";
                goto try_except_handler_4;
            }
            tmp_condition_result_14 = tmp_truth_name_4 == 1 ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
            Py_DECREF( tmp_attribute_value_1 );
            if ( tmp_condition_result_14 == NUITKA_BOOL_TRUE )
            {
                goto branch_yes_14;
            }
            else
            {
                goto branch_no_14;
            }
            branch_yes_14:;
            {
                PyObject *tmp_assattr_name_16;
                PyObject *tmp_called_name_8;
                PyObject *tmp_source_name_7;
                PyObject *tmp_mvar_value_12;
                PyObject *tmp_args_name_1;
                PyObject *tmp_tuple_element_1;
                PyObject *tmp_source_name_8;
                PyObject *tmp_kw_name_1;
                PyObject *tmp_dict_key_1;
                PyObject *tmp_dict_value_1;
                PyObject *tmp_dict_key_2;
                PyObject *tmp_dict_value_2;
                PyObject *tmp_compexpr_left_12;
                PyObject *tmp_compexpr_right_12;
                PyObject *tmp_dict_key_3;
                PyObject *tmp_dict_value_3;
                PyObject *tmp_dict_key_4;
                PyObject *tmp_dict_value_4;
                PyObject *tmp_assattr_target_16;
                tmp_mvar_value_12 = GET_STRING_DICT_VALUE( moduledict_subprocess, (Nuitka_StringObject *)const_str_plain_io );

                if (unlikely( tmp_mvar_value_12 == NULL ))
                {
                    tmp_mvar_value_12 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_io );
                }

                if ( tmp_mvar_value_12 == NULL )
                {

                    exception_type = PyExc_NameError;
                    Py_INCREF( exception_type );
                    exception_value = PyUnicode_FromFormat( "name '%s' is not defined", "io" );
                    exception_tb = NULL;
                    NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
                    CHAIN_EXCEPTION( exception_value );

                    exception_lineno = 755;
                    type_description_1 = "oooooooooooooooooooooooooooooo";
                    goto try_except_handler_4;
                }

                tmp_source_name_7 = tmp_mvar_value_12;
                tmp_called_name_8 = LOOKUP_ATTRIBUTE( tmp_source_name_7, const_str_plain_TextIOWrapper );
                if ( tmp_called_name_8 == NULL )
                {
                    assert( ERROR_OCCURRED() );

                    FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                    exception_lineno = 755;
                    type_description_1 = "oooooooooooooooooooooooooooooo";
                    goto try_except_handler_4;
                }
                CHECK_OBJECT( par_self );
                tmp_source_name_8 = par_self;
                tmp_tuple_element_1 = LOOKUP_ATTRIBUTE( tmp_source_name_8, const_str_plain_stdin );
                if ( tmp_tuple_element_1 == NULL )
                {
                    assert( ERROR_OCCURRED() );

                    FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
                    Py_DECREF( tmp_called_name_8 );

                    exception_lineno = 755;
                    type_description_1 = "oooooooooooooooooooooooooooooo";
                    goto try_except_handler_4;
                }
                tmp_args_name_1 = PyTuple_New( 1 );
                PyTuple_SET_ITEM( tmp_args_name_1, 0, tmp_tuple_element_1 );
                tmp_dict_key_1 = const_str_plain_write_through;
                tmp_dict_value_1 = Py_True;
                tmp_kw_name_1 = _PyDict_NewPresized( 4 );
                tmp_res = PyDict_SetItem( tmp_kw_name_1, tmp_dict_key_1, tmp_dict_value_1 );
                assert( !(tmp_res != 0) );
                tmp_dict_key_2 = const_str_plain_line_buffering;
                CHECK_OBJECT( par_bufsize );
                tmp_compexpr_left_12 = par_bufsize;
                tmp_compexpr_right_12 = const_int_pos_1;
                tmp_dict_value_2 = RICH_COMPARE_EQ_OBJECT_OBJECT( tmp_compexpr_left_12, tmp_compexpr_right_12 );
                if ( tmp_dict_value_2 == NULL )
                {
                    assert( ERROR_OCCURRED() );

                    FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
                    Py_DECREF( tmp_called_name_8 );
                    Py_DECREF( tmp_args_name_1 );
                    Py_DECREF( tmp_kw_name_1 );

                    exception_lineno = 756;
                    type_description_1 = "oooooooooooooooooooooooooooooo";
                    goto try_except_handler_4;
                }
                tmp_res = PyDict_SetItem( tmp_kw_name_1, tmp_dict_key_2, tmp_dict_value_2 );
                Py_DECREF( tmp_dict_value_2 );
                assert( !(tmp_res != 0) );
                tmp_dict_key_3 = const_str_plain_encoding;
                CHECK_OBJECT( par_encoding );
                tmp_dict_value_3 = par_encoding;
                tmp_res = PyDict_SetItem( tmp_kw_name_1, tmp_dict_key_3, tmp_dict_value_3 );
                assert( !(tmp_res != 0) );
                tmp_dict_key_4 = const_str_plain_errors;
                CHECK_OBJECT( par_errors );
                tmp_dict_value_4 = par_errors;
                tmp_res = PyDict_SetItem( tmp_kw_name_1, tmp_dict_key_4, tmp_dict_value_4 );
                assert( !(tmp_res != 0) );
                frame_3307251e478e6f87577905ed55fc01cd->m_frame.f_lineno = 755;
                tmp_assattr_name_16 = CALL_FUNCTION( tmp_called_name_8, tmp_args_name_1, tmp_kw_name_1 );
                Py_DECREF( tmp_called_name_8 );
                Py_DECREF( tmp_args_name_1 );
                Py_DECREF( tmp_kw_name_1 );
                if ( tmp_assattr_name_16 == NULL )
                {
                    assert( ERROR_OCCURRED() );

                    FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                    exception_lineno = 755;
                    type_description_1 = "oooooooooooooooooooooooooooooo";
                    goto try_except_handler_4;
                }
                CHECK_OBJECT( par_self );
                tmp_assattr_target_16 = par_self;
                tmp_result = SET_ATTRIBUTE( tmp_assattr_target_16, const_str_plain_stdin, tmp_assattr_name_16 );
                Py_DECREF( tmp_assattr_name_16 );
                if ( tmp_result == false )
                {
                    assert( ERROR_OCCURRED() );

                    FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                    exception_lineno = 755;
                    type_description_1 = "oooooooooooooooooooooooooooooo";
                    goto try_except_handler_4;
                }
            }
            branch_no_14:;
        }
        branch_no_13:;
    }
    {
        nuitka_bool tmp_condition_result_15;
        PyObject *tmp_compexpr_left_13;
        PyObject *tmp_compexpr_right_13;
        if ( var_c2pread == NULL )
        {

            exception_type = PyExc_UnboundLocalError;
            Py_INCREF( exception_type );
            exception_value = PyUnicode_FromFormat( "local variable '%s' referenced before assignment", "c2pread" );
            exception_tb = NULL;
            NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
            CHAIN_EXCEPTION( exception_value );

            exception_lineno = 758;
            type_description_1 = "oooooooooooooooooooooooooooooo";
            goto try_except_handler_4;
        }

        tmp_compexpr_left_13 = var_c2pread;
        tmp_compexpr_right_13 = const_int_neg_1;
        tmp_res = RICH_COMPARE_BOOL_NOTEQ_OBJECT_OBJECT( tmp_compexpr_left_13, tmp_compexpr_right_13 );
        if ( tmp_res == -1 )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 758;
            type_description_1 = "oooooooooooooooooooooooooooooo";
            goto try_except_handler_4;
        }
        tmp_condition_result_15 = ( tmp_res != 0 ) ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
        if ( tmp_condition_result_15 == NUITKA_BOOL_TRUE )
        {
            goto branch_yes_15;
        }
        else
        {
            goto branch_no_15;
        }
        branch_yes_15:;
        {
            PyObject *tmp_assattr_name_17;
            PyObject *tmp_called_name_9;
            PyObject *tmp_source_name_9;
            PyObject *tmp_mvar_value_13;
            PyObject *tmp_args_element_name_15;
            PyObject *tmp_args_element_name_16;
            PyObject *tmp_args_element_name_17;
            PyObject *tmp_assattr_target_17;
            tmp_mvar_value_13 = GET_STRING_DICT_VALUE( moduledict_subprocess, (Nuitka_StringObject *)const_str_plain_io );

            if (unlikely( tmp_mvar_value_13 == NULL ))
            {
                tmp_mvar_value_13 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_io );
            }

            if ( tmp_mvar_value_13 == NULL )
            {

                exception_type = PyExc_NameError;
                Py_INCREF( exception_type );
                exception_value = PyUnicode_FromFormat( "name '%s' is not defined", "io" );
                exception_tb = NULL;
                NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
                CHAIN_EXCEPTION( exception_value );

                exception_lineno = 759;
                type_description_1 = "oooooooooooooooooooooooooooooo";
                goto try_except_handler_4;
            }

            tmp_source_name_9 = tmp_mvar_value_13;
            tmp_called_name_9 = LOOKUP_ATTRIBUTE( tmp_source_name_9, const_str_plain_open );
            if ( tmp_called_name_9 == NULL )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 759;
                type_description_1 = "oooooooooooooooooooooooooooooo";
                goto try_except_handler_4;
            }
            if ( var_c2pread == NULL )
            {
                Py_DECREF( tmp_called_name_9 );
                exception_type = PyExc_UnboundLocalError;
                Py_INCREF( exception_type );
                exception_value = PyUnicode_FromFormat( "local variable '%s' referenced before assignment", "c2pread" );
                exception_tb = NULL;
                NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
                CHAIN_EXCEPTION( exception_value );

                exception_lineno = 759;
                type_description_1 = "oooooooooooooooooooooooooooooo";
                goto try_except_handler_4;
            }

            tmp_args_element_name_15 = var_c2pread;
            tmp_args_element_name_16 = const_str_plain_rb;
            CHECK_OBJECT( par_bufsize );
            tmp_args_element_name_17 = par_bufsize;
            frame_3307251e478e6f87577905ed55fc01cd->m_frame.f_lineno = 759;
            {
                PyObject *call_args[] = { tmp_args_element_name_15, tmp_args_element_name_16, tmp_args_element_name_17 };
                tmp_assattr_name_17 = CALL_FUNCTION_WITH_ARGS3( tmp_called_name_9, call_args );
            }

            Py_DECREF( tmp_called_name_9 );
            if ( tmp_assattr_name_17 == NULL )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 759;
                type_description_1 = "oooooooooooooooooooooooooooooo";
                goto try_except_handler_4;
            }
            CHECK_OBJECT( par_self );
            tmp_assattr_target_17 = par_self;
            tmp_result = SET_ATTRIBUTE( tmp_assattr_target_17, const_str_plain_stdout, tmp_assattr_name_17 );
            Py_DECREF( tmp_assattr_name_17 );
            if ( tmp_result == false )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 759;
                type_description_1 = "oooooooooooooooooooooooooooooo";
                goto try_except_handler_4;
            }
        }
        {
            nuitka_bool tmp_condition_result_16;
            PyObject *tmp_source_name_10;
            PyObject *tmp_attribute_value_2;
            int tmp_truth_name_5;
            CHECK_OBJECT( par_self );
            tmp_source_name_10 = par_self;
            tmp_attribute_value_2 = LOOKUP_ATTRIBUTE( tmp_source_name_10, const_str_plain_text_mode );
            if ( tmp_attribute_value_2 == NULL )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 760;
                type_description_1 = "oooooooooooooooooooooooooooooo";
                goto try_except_handler_4;
            }
            tmp_truth_name_5 = CHECK_IF_TRUE( tmp_attribute_value_2 );
            if ( tmp_truth_name_5 == -1 )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
                Py_DECREF( tmp_attribute_value_2 );

                exception_lineno = 760;
                type_description_1 = "oooooooooooooooooooooooooooooo";
                goto try_except_handler_4;
            }
            tmp_condition_result_16 = tmp_truth_name_5 == 1 ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
            Py_DECREF( tmp_attribute_value_2 );
            if ( tmp_condition_result_16 == NUITKA_BOOL_TRUE )
            {
                goto branch_yes_16;
            }
            else
            {
                goto branch_no_16;
            }
            branch_yes_16:;
            {
                PyObject *tmp_assattr_name_18;
                PyObject *tmp_called_name_10;
                PyObject *tmp_source_name_11;
                PyObject *tmp_mvar_value_14;
                PyObject *tmp_args_name_2;
                PyObject *tmp_tuple_element_2;
                PyObject *tmp_source_name_12;
                PyObject *tmp_kw_name_2;
                PyObject *tmp_dict_key_5;
                PyObject *tmp_dict_value_5;
                PyObject *tmp_dict_key_6;
                PyObject *tmp_dict_value_6;
                PyObject *tmp_assattr_target_18;
                tmp_mvar_value_14 = GET_STRING_DICT_VALUE( moduledict_subprocess, (Nuitka_StringObject *)const_str_plain_io );

                if (unlikely( tmp_mvar_value_14 == NULL ))
                {
                    tmp_mvar_value_14 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_io );
                }

                if ( tmp_mvar_value_14 == NULL )
                {

                    exception_type = PyExc_NameError;
                    Py_INCREF( exception_type );
                    exception_value = PyUnicode_FromFormat( "name '%s' is not defined", "io" );
                    exception_tb = NULL;
                    NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
                    CHAIN_EXCEPTION( exception_value );

                    exception_lineno = 761;
                    type_description_1 = "oooooooooooooooooooooooooooooo";
                    goto try_except_handler_4;
                }

                tmp_source_name_11 = tmp_mvar_value_14;
                tmp_called_name_10 = LOOKUP_ATTRIBUTE( tmp_source_name_11, const_str_plain_TextIOWrapper );
                if ( tmp_called_name_10 == NULL )
                {
                    assert( ERROR_OCCURRED() );

                    FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                    exception_lineno = 761;
                    type_description_1 = "oooooooooooooooooooooooooooooo";
                    goto try_except_handler_4;
                }
                CHECK_OBJECT( par_self );
                tmp_source_name_12 = par_self;
                tmp_tuple_element_2 = LOOKUP_ATTRIBUTE( tmp_source_name_12, const_str_plain_stdout );
                if ( tmp_tuple_element_2 == NULL )
                {
                    assert( ERROR_OCCURRED() );

                    FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
                    Py_DECREF( tmp_called_name_10 );

                    exception_lineno = 761;
                    type_description_1 = "oooooooooooooooooooooooooooooo";
                    goto try_except_handler_4;
                }
                tmp_args_name_2 = PyTuple_New( 1 );
                PyTuple_SET_ITEM( tmp_args_name_2, 0, tmp_tuple_element_2 );
                tmp_dict_key_5 = const_str_plain_encoding;
                CHECK_OBJECT( par_encoding );
                tmp_dict_value_5 = par_encoding;
                tmp_kw_name_2 = _PyDict_NewPresized( 2 );
                tmp_res = PyDict_SetItem( tmp_kw_name_2, tmp_dict_key_5, tmp_dict_value_5 );
                assert( !(tmp_res != 0) );
                tmp_dict_key_6 = const_str_plain_errors;
                CHECK_OBJECT( par_errors );
                tmp_dict_value_6 = par_errors;
                tmp_res = PyDict_SetItem( tmp_kw_name_2, tmp_dict_key_6, tmp_dict_value_6 );
                assert( !(tmp_res != 0) );
                frame_3307251e478e6f87577905ed55fc01cd->m_frame.f_lineno = 761;
                tmp_assattr_name_18 = CALL_FUNCTION( tmp_called_name_10, tmp_args_name_2, tmp_kw_name_2 );
                Py_DECREF( tmp_called_name_10 );
                Py_DECREF( tmp_args_name_2 );
                Py_DECREF( tmp_kw_name_2 );
                if ( tmp_assattr_name_18 == NULL )
                {
                    assert( ERROR_OCCURRED() );

                    FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                    exception_lineno = 761;
                    type_description_1 = "oooooooooooooooooooooooooooooo";
                    goto try_except_handler_4;
                }
                CHECK_OBJECT( par_self );
                tmp_assattr_target_18 = par_self;
                tmp_result = SET_ATTRIBUTE( tmp_assattr_target_18, const_str_plain_stdout, tmp_assattr_name_18 );
                Py_DECREF( tmp_assattr_name_18 );
                if ( tmp_result == false )
                {
                    assert( ERROR_OCCURRED() );

                    FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                    exception_lineno = 761;
                    type_description_1 = "oooooooooooooooooooooooooooooo";
                    goto try_except_handler_4;
                }
            }
            branch_no_16:;
        }
        branch_no_15:;
    }
    {
        nuitka_bool tmp_condition_result_17;
        PyObject *tmp_compexpr_left_14;
        PyObject *tmp_compexpr_right_14;
        if ( var_errread == NULL )
        {

            exception_type = PyExc_UnboundLocalError;
            Py_INCREF( exception_type );
            exception_value = PyUnicode_FromFormat( "local variable '%s' referenced before assignment", "errread" );
            exception_tb = NULL;
            NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
            CHAIN_EXCEPTION( exception_value );

            exception_lineno = 763;
            type_description_1 = "oooooooooooooooooooooooooooooo";
            goto try_except_handler_4;
        }

        tmp_compexpr_left_14 = var_errread;
        tmp_compexpr_right_14 = const_int_neg_1;
        tmp_res = RICH_COMPARE_BOOL_NOTEQ_OBJECT_OBJECT( tmp_compexpr_left_14, tmp_compexpr_right_14 );
        if ( tmp_res == -1 )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 763;
            type_description_1 = "oooooooooooooooooooooooooooooo";
            goto try_except_handler_4;
        }
        tmp_condition_result_17 = ( tmp_res != 0 ) ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
        if ( tmp_condition_result_17 == NUITKA_BOOL_TRUE )
        {
            goto branch_yes_17;
        }
        else
        {
            goto branch_no_17;
        }
        branch_yes_17:;
        {
            PyObject *tmp_assattr_name_19;
            PyObject *tmp_called_name_11;
            PyObject *tmp_source_name_13;
            PyObject *tmp_mvar_value_15;
            PyObject *tmp_args_element_name_18;
            PyObject *tmp_args_element_name_19;
            PyObject *tmp_args_element_name_20;
            PyObject *tmp_assattr_target_19;
            tmp_mvar_value_15 = GET_STRING_DICT_VALUE( moduledict_subprocess, (Nuitka_StringObject *)const_str_plain_io );

            if (unlikely( tmp_mvar_value_15 == NULL ))
            {
                tmp_mvar_value_15 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_io );
            }

            if ( tmp_mvar_value_15 == NULL )
            {

                exception_type = PyExc_NameError;
                Py_INCREF( exception_type );
                exception_value = PyUnicode_FromFormat( "name '%s' is not defined", "io" );
                exception_tb = NULL;
                NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
                CHAIN_EXCEPTION( exception_value );

                exception_lineno = 764;
                type_description_1 = "oooooooooooooooooooooooooooooo";
                goto try_except_handler_4;
            }

            tmp_source_name_13 = tmp_mvar_value_15;
            tmp_called_name_11 = LOOKUP_ATTRIBUTE( tmp_source_name_13, const_str_plain_open );
            if ( tmp_called_name_11 == NULL )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 764;
                type_description_1 = "oooooooooooooooooooooooooooooo";
                goto try_except_handler_4;
            }
            if ( var_errread == NULL )
            {
                Py_DECREF( tmp_called_name_11 );
                exception_type = PyExc_UnboundLocalError;
                Py_INCREF( exception_type );
                exception_value = PyUnicode_FromFormat( "local variable '%s' referenced before assignment", "errread" );
                exception_tb = NULL;
                NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
                CHAIN_EXCEPTION( exception_value );

                exception_lineno = 764;
                type_description_1 = "oooooooooooooooooooooooooooooo";
                goto try_except_handler_4;
            }

            tmp_args_element_name_18 = var_errread;
            tmp_args_element_name_19 = const_str_plain_rb;
            CHECK_OBJECT( par_bufsize );
            tmp_args_element_name_20 = par_bufsize;
            frame_3307251e478e6f87577905ed55fc01cd->m_frame.f_lineno = 764;
            {
                PyObject *call_args[] = { tmp_args_element_name_18, tmp_args_element_name_19, tmp_args_element_name_20 };
                tmp_assattr_name_19 = CALL_FUNCTION_WITH_ARGS3( tmp_called_name_11, call_args );
            }

            Py_DECREF( tmp_called_name_11 );
            if ( tmp_assattr_name_19 == NULL )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 764;
                type_description_1 = "oooooooooooooooooooooooooooooo";
                goto try_except_handler_4;
            }
            CHECK_OBJECT( par_self );
            tmp_assattr_target_19 = par_self;
            tmp_result = SET_ATTRIBUTE( tmp_assattr_target_19, const_str_plain_stderr, tmp_assattr_name_19 );
            Py_DECREF( tmp_assattr_name_19 );
            if ( tmp_result == false )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 764;
                type_description_1 = "oooooooooooooooooooooooooooooo";
                goto try_except_handler_4;
            }
        }
        {
            nuitka_bool tmp_condition_result_18;
            PyObject *tmp_source_name_14;
            PyObject *tmp_attribute_value_3;
            int tmp_truth_name_6;
            CHECK_OBJECT( par_self );
            tmp_source_name_14 = par_self;
            tmp_attribute_value_3 = LOOKUP_ATTRIBUTE( tmp_source_name_14, const_str_plain_text_mode );
            if ( tmp_attribute_value_3 == NULL )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 765;
                type_description_1 = "oooooooooooooooooooooooooooooo";
                goto try_except_handler_4;
            }
            tmp_truth_name_6 = CHECK_IF_TRUE( tmp_attribute_value_3 );
            if ( tmp_truth_name_6 == -1 )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
                Py_DECREF( tmp_attribute_value_3 );

                exception_lineno = 765;
                type_description_1 = "oooooooooooooooooooooooooooooo";
                goto try_except_handler_4;
            }
            tmp_condition_result_18 = tmp_truth_name_6 == 1 ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
            Py_DECREF( tmp_attribute_value_3 );
            if ( tmp_condition_result_18 == NUITKA_BOOL_TRUE )
            {
                goto branch_yes_18;
            }
            else
            {
                goto branch_no_18;
            }
            branch_yes_18:;
            {
                PyObject *tmp_assattr_name_20;
                PyObject *tmp_called_name_12;
                PyObject *tmp_source_name_15;
                PyObject *tmp_mvar_value_16;
                PyObject *tmp_args_name_3;
                PyObject *tmp_tuple_element_3;
                PyObject *tmp_source_name_16;
                PyObject *tmp_kw_name_3;
                PyObject *tmp_dict_key_7;
                PyObject *tmp_dict_value_7;
                PyObject *tmp_dict_key_8;
                PyObject *tmp_dict_value_8;
                PyObject *tmp_assattr_target_20;
                tmp_mvar_value_16 = GET_STRING_DICT_VALUE( moduledict_subprocess, (Nuitka_StringObject *)const_str_plain_io );

                if (unlikely( tmp_mvar_value_16 == NULL ))
                {
                    tmp_mvar_value_16 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_io );
                }

                if ( tmp_mvar_value_16 == NULL )
                {

                    exception_type = PyExc_NameError;
                    Py_INCREF( exception_type );
                    exception_value = PyUnicode_FromFormat( "name '%s' is not defined", "io" );
                    exception_tb = NULL;
                    NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
                    CHAIN_EXCEPTION( exception_value );

                    exception_lineno = 766;
                    type_description_1 = "oooooooooooooooooooooooooooooo";
                    goto try_except_handler_4;
                }

                tmp_source_name_15 = tmp_mvar_value_16;
                tmp_called_name_12 = LOOKUP_ATTRIBUTE( tmp_source_name_15, const_str_plain_TextIOWrapper );
                if ( tmp_called_name_12 == NULL )
                {
                    assert( ERROR_OCCURRED() );

                    FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                    exception_lineno = 766;
                    type_description_1 = "oooooooooooooooooooooooooooooo";
                    goto try_except_handler_4;
                }
                CHECK_OBJECT( par_self );
                tmp_source_name_16 = par_self;
                tmp_tuple_element_3 = LOOKUP_ATTRIBUTE( tmp_source_name_16, const_str_plain_stderr );
                if ( tmp_tuple_element_3 == NULL )
                {
                    assert( ERROR_OCCURRED() );

                    FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
                    Py_DECREF( tmp_called_name_12 );

                    exception_lineno = 766;
                    type_description_1 = "oooooooooooooooooooooooooooooo";
                    goto try_except_handler_4;
                }
                tmp_args_name_3 = PyTuple_New( 1 );
                PyTuple_SET_ITEM( tmp_args_name_3, 0, tmp_tuple_element_3 );
                tmp_dict_key_7 = const_str_plain_encoding;
                CHECK_OBJECT( par_encoding );
                tmp_dict_value_7 = par_encoding;
                tmp_kw_name_3 = _PyDict_NewPresized( 2 );
                tmp_res = PyDict_SetItem( tmp_kw_name_3, tmp_dict_key_7, tmp_dict_value_7 );
                assert( !(tmp_res != 0) );
                tmp_dict_key_8 = const_str_plain_errors;
                CHECK_OBJECT( par_errors );
                tmp_dict_value_8 = par_errors;
                tmp_res = PyDict_SetItem( tmp_kw_name_3, tmp_dict_key_8, tmp_dict_value_8 );
                assert( !(tmp_res != 0) );
                frame_3307251e478e6f87577905ed55fc01cd->m_frame.f_lineno = 766;
                tmp_assattr_name_20 = CALL_FUNCTION( tmp_called_name_12, tmp_args_name_3, tmp_kw_name_3 );
                Py_DECREF( tmp_called_name_12 );
                Py_DECREF( tmp_args_name_3 );
                Py_DECREF( tmp_kw_name_3 );
                if ( tmp_assattr_name_20 == NULL )
                {
                    assert( ERROR_OCCURRED() );

                    FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                    exception_lineno = 766;
                    type_description_1 = "oooooooooooooooooooooooooooooo";
                    goto try_except_handler_4;
                }
                CHECK_OBJECT( par_self );
                tmp_assattr_target_20 = par_self;
                tmp_result = SET_ATTRIBUTE( tmp_assattr_target_20, const_str_plain_stderr, tmp_assattr_name_20 );
                Py_DECREF( tmp_assattr_name_20 );
                if ( tmp_result == false )
                {
                    assert( ERROR_OCCURRED() );

                    FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                    exception_lineno = 766;
                    type_description_1 = "oooooooooooooooooooooooooooooo";
                    goto try_except_handler_4;
                }
            }
            branch_no_18:;
        }
        branch_no_17:;
    }
    {
        PyObject *tmp_called_name_13;
        PyObject *tmp_source_name_17;
        PyObject *tmp_call_result_3;
        PyObject *tmp_args_element_name_21;
        PyObject *tmp_args_element_name_22;
        PyObject *tmp_args_element_name_23;
        PyObject *tmp_args_element_name_24;
        PyObject *tmp_args_element_name_25;
        PyObject *tmp_args_element_name_26;
        PyObject *tmp_args_element_name_27;
        PyObject *tmp_args_element_name_28;
        PyObject *tmp_args_element_name_29;
        PyObject *tmp_args_element_name_30;
        PyObject *tmp_args_element_name_31;
        PyObject *tmp_args_element_name_32;
        PyObject *tmp_args_element_name_33;
        PyObject *tmp_args_element_name_34;
        PyObject *tmp_args_element_name_35;
        PyObject *tmp_args_element_name_36;
        PyObject *tmp_args_element_name_37;
        PyObject *tmp_args_element_name_38;
        CHECK_OBJECT( par_self );
        tmp_source_name_17 = par_self;
        tmp_called_name_13 = LOOKUP_ATTRIBUTE( tmp_source_name_17, const_str_plain__execute_child );
        if ( tmp_called_name_13 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 769;
            type_description_1 = "oooooooooooooooooooooooooooooo";
            goto try_except_handler_4;
        }
        CHECK_OBJECT( par_args );
        tmp_args_element_name_21 = par_args;
        CHECK_OBJECT( par_executable );
        tmp_args_element_name_22 = par_executable;
        CHECK_OBJECT( par_preexec_fn );
        tmp_args_element_name_23 = par_preexec_fn;
        if ( par_close_fds == NULL )
        {
            Py_DECREF( tmp_called_name_13 );
            exception_type = PyExc_UnboundLocalError;
            Py_INCREF( exception_type );
            exception_value = PyUnicode_FromFormat( "local variable '%s' referenced before assignment", "close_fds" );
            exception_tb = NULL;
            NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
            CHAIN_EXCEPTION( exception_value );

            exception_lineno = 769;
            type_description_1 = "oooooooooooooooooooooooooooooo";
            goto try_except_handler_4;
        }

        tmp_args_element_name_24 = par_close_fds;
        CHECK_OBJECT( par_pass_fds );
        tmp_args_element_name_25 = par_pass_fds;
        CHECK_OBJECT( par_cwd );
        tmp_args_element_name_26 = par_cwd;
        CHECK_OBJECT( par_env );
        tmp_args_element_name_27 = par_env;
        CHECK_OBJECT( par_startupinfo );
        tmp_args_element_name_28 = par_startupinfo;
        CHECK_OBJECT( par_creationflags );
        tmp_args_element_name_29 = par_creationflags;
        CHECK_OBJECT( par_shell );
        tmp_args_element_name_30 = par_shell;
        CHECK_OBJECT( var_p2cread );
        tmp_args_element_name_31 = var_p2cread;
        if ( var_p2cwrite == NULL )
        {
            Py_DECREF( tmp_called_name_13 );
            exception_type = PyExc_UnboundLocalError;
            Py_INCREF( exception_type );
            exception_value = PyUnicode_FromFormat( "local variable '%s' referenced before assignment", "p2cwrite" );
            exception_tb = NULL;
            NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
            CHAIN_EXCEPTION( exception_value );

            exception_lineno = 772;
            type_description_1 = "oooooooooooooooooooooooooooooo";
            goto try_except_handler_4;
        }

        tmp_args_element_name_32 = var_p2cwrite;
        if ( var_c2pread == NULL )
        {
            Py_DECREF( tmp_called_name_13 );
            exception_type = PyExc_UnboundLocalError;
            Py_INCREF( exception_type );
            exception_value = PyUnicode_FromFormat( "local variable '%s' referenced before assignment", "c2pread" );
            exception_tb = NULL;
            NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
            CHAIN_EXCEPTION( exception_value );

            exception_lineno = 773;
            type_description_1 = "oooooooooooooooooooooooooooooo";
            goto try_except_handler_4;
        }

        tmp_args_element_name_33 = var_c2pread;
        CHECK_OBJECT( var_c2pwrite );
        tmp_args_element_name_34 = var_c2pwrite;
        if ( var_errread == NULL )
        {
            Py_DECREF( tmp_called_name_13 );
            exception_type = PyExc_UnboundLocalError;
            Py_INCREF( exception_type );
            exception_value = PyUnicode_FromFormat( "local variable '%s' referenced before assignment", "errread" );
            exception_tb = NULL;
            NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
            CHAIN_EXCEPTION( exception_value );

            exception_lineno = 774;
            type_description_1 = "oooooooooooooooooooooooooooooo";
            goto try_except_handler_4;
        }

        tmp_args_element_name_35 = var_errread;
        CHECK_OBJECT( var_errwrite );
        tmp_args_element_name_36 = var_errwrite;
        CHECK_OBJECT( par_restore_signals );
        tmp_args_element_name_37 = par_restore_signals;
        CHECK_OBJECT( par_start_new_session );
        tmp_args_element_name_38 = par_start_new_session;
        frame_3307251e478e6f87577905ed55fc01cd->m_frame.f_lineno = 769;
        {
            PyObject *call_args[] = { tmp_args_element_name_21, tmp_args_element_name_22, tmp_args_element_name_23, tmp_args_element_name_24, tmp_args_element_name_25, tmp_args_element_name_26, tmp_args_element_name_27, tmp_args_element_name_28, tmp_args_element_name_29, tmp_args_element_name_30, tmp_args_element_name_31, tmp_args_element_name_32, tmp_args_element_name_33, tmp_args_element_name_34, tmp_args_element_name_35, tmp_args_element_name_36, tmp_args_element_name_37, tmp_args_element_name_38 };
            tmp_call_result_3 = CALL_FUNCTION_WITH_ARGS18( tmp_called_name_13, call_args );
        }

        Py_DECREF( tmp_called_name_13 );
        if ( tmp_call_result_3 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 769;
            type_description_1 = "oooooooooooooooooooooooooooooo";
            goto try_except_handler_4;
        }
        Py_DECREF( tmp_call_result_3 );
    }
    goto try_end_3;
    // Exception handler code:
    try_except_handler_4:;
    exception_keeper_type_3 = exception_type;
    exception_keeper_value_3 = exception_value;
    exception_keeper_tb_3 = exception_tb;
    exception_keeper_lineno_3 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    // Preserve existing published exception.
    exception_preserved_type_3 = EXC_TYPE(PyThreadState_GET());
    Py_XINCREF( exception_preserved_type_3 );
    exception_preserved_value_3 = EXC_VALUE(PyThreadState_GET());
    Py_XINCREF( exception_preserved_value_3 );
    exception_preserved_tb_3 = (PyTracebackObject *)EXC_TRACEBACK(PyThreadState_GET());
    Py_XINCREF( exception_preserved_tb_3 );

    if ( exception_keeper_tb_3 == NULL )
    {
        exception_keeper_tb_3 = MAKE_TRACEBACK( frame_3307251e478e6f87577905ed55fc01cd, exception_keeper_lineno_3 );
    }
    else if ( exception_keeper_lineno_3 != 0 )
    {
        exception_keeper_tb_3 = ADD_TRACEBACK( exception_keeper_tb_3, frame_3307251e478e6f87577905ed55fc01cd, exception_keeper_lineno_3 );
    }

    NORMALIZE_EXCEPTION( &exception_keeper_type_3, &exception_keeper_value_3, &exception_keeper_tb_3 );
    PyException_SetTraceback( exception_keeper_value_3, (PyObject *)exception_keeper_tb_3 );
    PUBLISH_EXCEPTION( &exception_keeper_type_3, &exception_keeper_value_3, &exception_keeper_tb_3 );
    // Tried code:
    {
        PyObject *tmp_assign_source_19;
        PyObject *tmp_iter_arg_2;
        PyObject *tmp_called_name_14;
        PyObject *tmp_args_element_name_39;
        PyObject *tmp_args_element_name_40;
        PyObject *tmp_tuple_element_4;
        PyObject *tmp_source_name_18;
        PyObject *tmp_source_name_19;
        PyObject *tmp_source_name_20;
        tmp_called_name_14 = (PyObject *)&PyFilter_Type;
        tmp_args_element_name_39 = Py_None;
        CHECK_OBJECT( par_self );
        tmp_source_name_18 = par_self;
        tmp_tuple_element_4 = LOOKUP_ATTRIBUTE( tmp_source_name_18, const_str_plain_stdin );
        if ( tmp_tuple_element_4 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 778;
            type_description_1 = "oooooooooooooooooooooooooooooo";
            goto try_except_handler_5;
        }
        tmp_args_element_name_40 = PyTuple_New( 3 );
        PyTuple_SET_ITEM( tmp_args_element_name_40, 0, tmp_tuple_element_4 );
        CHECK_OBJECT( par_self );
        tmp_source_name_19 = par_self;
        tmp_tuple_element_4 = LOOKUP_ATTRIBUTE( tmp_source_name_19, const_str_plain_stdout );
        if ( tmp_tuple_element_4 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
            Py_DECREF( tmp_args_element_name_40 );

            exception_lineno = 778;
            type_description_1 = "oooooooooooooooooooooooooooooo";
            goto try_except_handler_5;
        }
        PyTuple_SET_ITEM( tmp_args_element_name_40, 1, tmp_tuple_element_4 );
        CHECK_OBJECT( par_self );
        tmp_source_name_20 = par_self;
        tmp_tuple_element_4 = LOOKUP_ATTRIBUTE( tmp_source_name_20, const_str_plain_stderr );
        if ( tmp_tuple_element_4 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
            Py_DECREF( tmp_args_element_name_40 );

            exception_lineno = 778;
            type_description_1 = "oooooooooooooooooooooooooooooo";
            goto try_except_handler_5;
        }
        PyTuple_SET_ITEM( tmp_args_element_name_40, 2, tmp_tuple_element_4 );
        frame_3307251e478e6f87577905ed55fc01cd->m_frame.f_lineno = 778;
        {
            PyObject *call_args[] = { tmp_args_element_name_39, tmp_args_element_name_40 };
            tmp_iter_arg_2 = CALL_FUNCTION_WITH_ARGS2( tmp_called_name_14, call_args );
        }

        Py_DECREF( tmp_args_element_name_40 );
        if ( tmp_iter_arg_2 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 778;
            type_description_1 = "oooooooooooooooooooooooooooooo";
            goto try_except_handler_5;
        }
        tmp_assign_source_19 = MAKE_ITERATOR( tmp_iter_arg_2 );
        Py_DECREF( tmp_iter_arg_2 );
        if ( tmp_assign_source_19 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 778;
            type_description_1 = "oooooooooooooooooooooooooooooo";
            goto try_except_handler_5;
        }
        assert( tmp_for_loop_1__for_iterator == NULL );
        tmp_for_loop_1__for_iterator = tmp_assign_source_19;
    }
    // Tried code:
    loop_start_1:;
    {
        PyObject *tmp_next_source_1;
        PyObject *tmp_assign_source_20;
        CHECK_OBJECT( tmp_for_loop_1__for_iterator );
        tmp_next_source_1 = tmp_for_loop_1__for_iterator;
        tmp_assign_source_20 = ITERATOR_NEXT( tmp_next_source_1 );
        if ( tmp_assign_source_20 == NULL )
        {
            if ( CHECK_AND_CLEAR_STOP_ITERATION_OCCURRED() )
            {

                goto loop_end_1;
            }
            else
            {

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
                type_description_1 = "oooooooooooooooooooooooooooooo";
                exception_lineno = 778;
                goto try_except_handler_6;
            }
        }

        {
            PyObject *old = tmp_for_loop_1__iter_value;
            tmp_for_loop_1__iter_value = tmp_assign_source_20;
            Py_XDECREF( old );
        }

    }
    {
        PyObject *tmp_assign_source_21;
        CHECK_OBJECT( tmp_for_loop_1__iter_value );
        tmp_assign_source_21 = tmp_for_loop_1__iter_value;
        {
            PyObject *old = var_f;
            var_f = tmp_assign_source_21;
            Py_INCREF( var_f );
            Py_XDECREF( old );
        }

    }
    // Tried code:
    {
        PyObject *tmp_called_instance_6;
        PyObject *tmp_call_result_4;
        CHECK_OBJECT( var_f );
        tmp_called_instance_6 = var_f;
        frame_3307251e478e6f87577905ed55fc01cd->m_frame.f_lineno = 780;
        tmp_call_result_4 = CALL_METHOD_NO_ARGS( tmp_called_instance_6, const_str_plain_close );
        if ( tmp_call_result_4 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 780;
            type_description_1 = "oooooooooooooooooooooooooooooo";
            goto try_except_handler_7;
        }
        Py_DECREF( tmp_call_result_4 );
    }
    goto try_end_4;
    // Exception handler code:
    try_except_handler_7:;
    exception_keeper_type_4 = exception_type;
    exception_keeper_value_4 = exception_value;
    exception_keeper_tb_4 = exception_tb;
    exception_keeper_lineno_4 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    // Preserve existing published exception.
    exception_preserved_type_1 = EXC_TYPE(PyThreadState_GET());
    Py_XINCREF( exception_preserved_type_1 );
    exception_preserved_value_1 = EXC_VALUE(PyThreadState_GET());
    Py_XINCREF( exception_preserved_value_1 );
    exception_preserved_tb_1 = (PyTracebackObject *)EXC_TRACEBACK(PyThreadState_GET());
    Py_XINCREF( exception_preserved_tb_1 );

    if ( exception_keeper_tb_4 == NULL )
    {
        exception_keeper_tb_4 = MAKE_TRACEBACK( frame_3307251e478e6f87577905ed55fc01cd, exception_keeper_lineno_4 );
    }
    else if ( exception_keeper_lineno_4 != 0 )
    {
        exception_keeper_tb_4 = ADD_TRACEBACK( exception_keeper_tb_4, frame_3307251e478e6f87577905ed55fc01cd, exception_keeper_lineno_4 );
    }

    NORMALIZE_EXCEPTION( &exception_keeper_type_4, &exception_keeper_value_4, &exception_keeper_tb_4 );
    PyException_SetTraceback( exception_keeper_value_4, (PyObject *)exception_keeper_tb_4 );
    PUBLISH_EXCEPTION( &exception_keeper_type_4, &exception_keeper_value_4, &exception_keeper_tb_4 );
    // Tried code:
    {
        nuitka_bool tmp_condition_result_19;
        PyObject *tmp_operand_name_3;
        PyObject *tmp_compexpr_left_15;
        PyObject *tmp_compexpr_right_15;
        tmp_compexpr_left_15 = EXC_TYPE(PyThreadState_GET());
        tmp_compexpr_right_15 = PyExc_OSError;
        tmp_res = EXCEPTION_MATCH_BOOL( tmp_compexpr_left_15, tmp_compexpr_right_15 );
        if ( tmp_res == -1 )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 781;
            type_description_1 = "oooooooooooooooooooooooooooooo";
            goto try_except_handler_8;
        }
        tmp_operand_name_3 = ( tmp_res != 0 ) ? Py_True : Py_False;
        tmp_res = CHECK_IF_TRUE( tmp_operand_name_3 );
        if ( tmp_res == -1 )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 781;
            type_description_1 = "oooooooooooooooooooooooooooooo";
            goto try_except_handler_8;
        }
        tmp_condition_result_19 = ( tmp_res == 0 ) ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
        if ( tmp_condition_result_19 == NUITKA_BOOL_TRUE )
        {
            goto branch_yes_19;
        }
        else
        {
            goto branch_no_19;
        }
        branch_yes_19:;
        tmp_result = RERAISE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
        if (unlikely( tmp_result == false ))
        {
            exception_lineno = 779;
        }

        if (exception_tb && exception_tb->tb_frame == &frame_3307251e478e6f87577905ed55fc01cd->m_frame) frame_3307251e478e6f87577905ed55fc01cd->m_frame.f_lineno = exception_tb->tb_lineno;
        type_description_1 = "oooooooooooooooooooooooooooooo";
        goto try_except_handler_8;
        branch_no_19:;
    }
    goto try_end_5;
    // Exception handler code:
    try_except_handler_8:;
    exception_keeper_type_5 = exception_type;
    exception_keeper_value_5 = exception_value;
    exception_keeper_tb_5 = exception_tb;
    exception_keeper_lineno_5 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    // Restore previous exception.
    SET_CURRENT_EXCEPTION( exception_preserved_type_1, exception_preserved_value_1, exception_preserved_tb_1 );
    // Re-raise.
    exception_type = exception_keeper_type_5;
    exception_value = exception_keeper_value_5;
    exception_tb = exception_keeper_tb_5;
    exception_lineno = exception_keeper_lineno_5;

    goto try_except_handler_6;
    // End of try:
    try_end_5:;
    // Restore previous exception.
    SET_CURRENT_EXCEPTION( exception_preserved_type_1, exception_preserved_value_1, exception_preserved_tb_1 );
    goto try_end_4;
    // exception handler codes exits in all cases
    NUITKA_CANNOT_GET_HERE( subprocess$$$function_27___init__ );
    return NULL;
    // End of try:
    try_end_4:;
    if ( CONSIDER_THREADING() == false )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 778;
        type_description_1 = "oooooooooooooooooooooooooooooo";
        goto try_except_handler_6;
    }
    goto loop_start_1;
    loop_end_1:;
    goto try_end_6;
    // Exception handler code:
    try_except_handler_6:;
    exception_keeper_type_6 = exception_type;
    exception_keeper_value_6 = exception_value;
    exception_keeper_tb_6 = exception_tb;
    exception_keeper_lineno_6 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    Py_XDECREF( tmp_for_loop_1__iter_value );
    tmp_for_loop_1__iter_value = NULL;

    CHECK_OBJECT( (PyObject *)tmp_for_loop_1__for_iterator );
    Py_DECREF( tmp_for_loop_1__for_iterator );
    tmp_for_loop_1__for_iterator = NULL;

    // Re-raise.
    exception_type = exception_keeper_type_6;
    exception_value = exception_keeper_value_6;
    exception_tb = exception_keeper_tb_6;
    exception_lineno = exception_keeper_lineno_6;

    goto try_except_handler_5;
    // End of try:
    try_end_6:;
    Py_XDECREF( tmp_for_loop_1__iter_value );
    tmp_for_loop_1__iter_value = NULL;

    CHECK_OBJECT( (PyObject *)tmp_for_loop_1__for_iterator );
    Py_DECREF( tmp_for_loop_1__for_iterator );
    tmp_for_loop_1__for_iterator = NULL;

    {
        nuitka_bool tmp_condition_result_20;
        PyObject *tmp_operand_name_4;
        PyObject *tmp_source_name_21;
        CHECK_OBJECT( par_self );
        tmp_source_name_21 = par_self;
        tmp_operand_name_4 = LOOKUP_ATTRIBUTE( tmp_source_name_21, const_str_plain__closed_child_pipe_fds );
        if ( tmp_operand_name_4 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 784;
            type_description_1 = "oooooooooooooooooooooooooooooo";
            goto try_except_handler_5;
        }
        tmp_res = CHECK_IF_TRUE( tmp_operand_name_4 );
        Py_DECREF( tmp_operand_name_4 );
        if ( tmp_res == -1 )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 784;
            type_description_1 = "oooooooooooooooooooooooooooooo";
            goto try_except_handler_5;
        }
        tmp_condition_result_20 = ( tmp_res == 0 ) ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
        if ( tmp_condition_result_20 == NUITKA_BOOL_TRUE )
        {
            goto branch_yes_20;
        }
        else
        {
            goto branch_no_20;
        }
        branch_yes_20:;
        {
            PyObject *tmp_assign_source_22;
            tmp_assign_source_22 = PyList_New( 0 );
            assert( var_to_close == NULL );
            var_to_close = tmp_assign_source_22;
        }
        {
            nuitka_bool tmp_condition_result_21;
            PyObject *tmp_compexpr_left_16;
            PyObject *tmp_compexpr_right_16;
            PyObject *tmp_mvar_value_17;
            CHECK_OBJECT( par_stdin );
            tmp_compexpr_left_16 = par_stdin;
            tmp_mvar_value_17 = GET_STRING_DICT_VALUE( moduledict_subprocess, (Nuitka_StringObject *)const_str_plain_PIPE );

            if (unlikely( tmp_mvar_value_17 == NULL ))
            {
                tmp_mvar_value_17 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_PIPE );
            }

            if ( tmp_mvar_value_17 == NULL )
            {

                exception_type = PyExc_NameError;
                Py_INCREF( exception_type );
                exception_value = PyUnicode_FromFormat( "name '%s' is not defined", "PIPE" );
                exception_tb = NULL;
                NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
                CHAIN_EXCEPTION( exception_value );

                exception_lineno = 786;
                type_description_1 = "oooooooooooooooooooooooooooooo";
                goto try_except_handler_5;
            }

            tmp_compexpr_right_16 = tmp_mvar_value_17;
            tmp_res = RICH_COMPARE_BOOL_EQ_OBJECT_OBJECT( tmp_compexpr_left_16, tmp_compexpr_right_16 );
            if ( tmp_res == -1 )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 786;
                type_description_1 = "oooooooooooooooooooooooooooooo";
                goto try_except_handler_5;
            }
            tmp_condition_result_21 = ( tmp_res != 0 ) ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
            if ( tmp_condition_result_21 == NUITKA_BOOL_TRUE )
            {
                goto branch_yes_21;
            }
            else
            {
                goto branch_no_21;
            }
            branch_yes_21:;
            {
                PyObject *tmp_called_instance_7;
                PyObject *tmp_call_result_5;
                PyObject *tmp_args_element_name_41;
                CHECK_OBJECT( var_to_close );
                tmp_called_instance_7 = var_to_close;
                CHECK_OBJECT( var_p2cread );
                tmp_args_element_name_41 = var_p2cread;
                frame_3307251e478e6f87577905ed55fc01cd->m_frame.f_lineno = 787;
                {
                    PyObject *call_args[] = { tmp_args_element_name_41 };
                    tmp_call_result_5 = CALL_METHOD_WITH_ARGS1( tmp_called_instance_7, const_str_plain_append, call_args );
                }

                if ( tmp_call_result_5 == NULL )
                {
                    assert( ERROR_OCCURRED() );

                    FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                    exception_lineno = 787;
                    type_description_1 = "oooooooooooooooooooooooooooooo";
                    goto try_except_handler_5;
                }
                Py_DECREF( tmp_call_result_5 );
            }
            branch_no_21:;
        }
        {
            nuitka_bool tmp_condition_result_22;
            PyObject *tmp_compexpr_left_17;
            PyObject *tmp_compexpr_right_17;
            PyObject *tmp_mvar_value_18;
            CHECK_OBJECT( par_stdout );
            tmp_compexpr_left_17 = par_stdout;
            tmp_mvar_value_18 = GET_STRING_DICT_VALUE( moduledict_subprocess, (Nuitka_StringObject *)const_str_plain_PIPE );

            if (unlikely( tmp_mvar_value_18 == NULL ))
            {
                tmp_mvar_value_18 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_PIPE );
            }

            if ( tmp_mvar_value_18 == NULL )
            {

                exception_type = PyExc_NameError;
                Py_INCREF( exception_type );
                exception_value = PyUnicode_FromFormat( "name '%s' is not defined", "PIPE" );
                exception_tb = NULL;
                NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
                CHAIN_EXCEPTION( exception_value );

                exception_lineno = 788;
                type_description_1 = "oooooooooooooooooooooooooooooo";
                goto try_except_handler_5;
            }

            tmp_compexpr_right_17 = tmp_mvar_value_18;
            tmp_res = RICH_COMPARE_BOOL_EQ_OBJECT_OBJECT( tmp_compexpr_left_17, tmp_compexpr_right_17 );
            if ( tmp_res == -1 )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 788;
                type_description_1 = "oooooooooooooooooooooooooooooo";
                goto try_except_handler_5;
            }
            tmp_condition_result_22 = ( tmp_res != 0 ) ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
            if ( tmp_condition_result_22 == NUITKA_BOOL_TRUE )
            {
                goto branch_yes_22;
            }
            else
            {
                goto branch_no_22;
            }
            branch_yes_22:;
            {
                PyObject *tmp_called_instance_8;
                PyObject *tmp_call_result_6;
                PyObject *tmp_args_element_name_42;
                CHECK_OBJECT( var_to_close );
                tmp_called_instance_8 = var_to_close;
                CHECK_OBJECT( var_c2pwrite );
                tmp_args_element_name_42 = var_c2pwrite;
                frame_3307251e478e6f87577905ed55fc01cd->m_frame.f_lineno = 789;
                {
                    PyObject *call_args[] = { tmp_args_element_name_42 };
                    tmp_call_result_6 = CALL_METHOD_WITH_ARGS1( tmp_called_instance_8, const_str_plain_append, call_args );
                }

                if ( tmp_call_result_6 == NULL )
                {
                    assert( ERROR_OCCURRED() );

                    FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                    exception_lineno = 789;
                    type_description_1 = "oooooooooooooooooooooooooooooo";
                    goto try_except_handler_5;
                }
                Py_DECREF( tmp_call_result_6 );
            }
            branch_no_22:;
        }
        {
            nuitka_bool tmp_condition_result_23;
            PyObject *tmp_compexpr_left_18;
            PyObject *tmp_compexpr_right_18;
            PyObject *tmp_mvar_value_19;
            CHECK_OBJECT( par_stderr );
            tmp_compexpr_left_18 = par_stderr;
            tmp_mvar_value_19 = GET_STRING_DICT_VALUE( moduledict_subprocess, (Nuitka_StringObject *)const_str_plain_PIPE );

            if (unlikely( tmp_mvar_value_19 == NULL ))
            {
                tmp_mvar_value_19 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_PIPE );
            }

            if ( tmp_mvar_value_19 == NULL )
            {

                exception_type = PyExc_NameError;
                Py_INCREF( exception_type );
                exception_value = PyUnicode_FromFormat( "name '%s' is not defined", "PIPE" );
                exception_tb = NULL;
                NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
                CHAIN_EXCEPTION( exception_value );

                exception_lineno = 790;
                type_description_1 = "oooooooooooooooooooooooooooooo";
                goto try_except_handler_5;
            }

            tmp_compexpr_right_18 = tmp_mvar_value_19;
            tmp_res = RICH_COMPARE_BOOL_EQ_OBJECT_OBJECT( tmp_compexpr_left_18, tmp_compexpr_right_18 );
            if ( tmp_res == -1 )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 790;
                type_description_1 = "oooooooooooooooooooooooooooooo";
                goto try_except_handler_5;
            }
            tmp_condition_result_23 = ( tmp_res != 0 ) ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
            if ( tmp_condition_result_23 == NUITKA_BOOL_TRUE )
            {
                goto branch_yes_23;
            }
            else
            {
                goto branch_no_23;
            }
            branch_yes_23:;
            {
                PyObject *tmp_called_instance_9;
                PyObject *tmp_call_result_7;
                PyObject *tmp_args_element_name_43;
                CHECK_OBJECT( var_to_close );
                tmp_called_instance_9 = var_to_close;
                CHECK_OBJECT( var_errwrite );
                tmp_args_element_name_43 = var_errwrite;
                frame_3307251e478e6f87577905ed55fc01cd->m_frame.f_lineno = 791;
                {
                    PyObject *call_args[] = { tmp_args_element_name_43 };
                    tmp_call_result_7 = CALL_METHOD_WITH_ARGS1( tmp_called_instance_9, const_str_plain_append, call_args );
                }

                if ( tmp_call_result_7 == NULL )
                {
                    assert( ERROR_OCCURRED() );

                    FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                    exception_lineno = 791;
                    type_description_1 = "oooooooooooooooooooooooooooooo";
                    goto try_except_handler_5;
                }
                Py_DECREF( tmp_call_result_7 );
            }
            branch_no_23:;
        }
        {
            nuitka_bool tmp_condition_result_24;
            PyObject *tmp_source_name_22;
            PyObject *tmp_attribute_name_1;
            CHECK_OBJECT( par_self );
            tmp_source_name_22 = par_self;
            tmp_attribute_name_1 = const_str_plain__devnull;
            tmp_res = BUILTIN_HASATTR_BOOL( tmp_source_name_22, tmp_attribute_name_1 );
            if ( tmp_res == -1 )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 792;
                type_description_1 = "oooooooooooooooooooooooooooooo";
                goto try_except_handler_5;
            }
            tmp_condition_result_24 = ( tmp_res != 0 ) ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
            if ( tmp_condition_result_24 == NUITKA_BOOL_TRUE )
            {
                goto branch_yes_24;
            }
            else
            {
                goto branch_no_24;
            }
            branch_yes_24:;
            {
                PyObject *tmp_called_name_15;
                PyObject *tmp_source_name_23;
                PyObject *tmp_call_result_8;
                PyObject *tmp_args_element_name_44;
                PyObject *tmp_source_name_24;
                CHECK_OBJECT( var_to_close );
                tmp_source_name_23 = var_to_close;
                tmp_called_name_15 = LOOKUP_ATTRIBUTE( tmp_source_name_23, const_str_plain_append );
                if ( tmp_called_name_15 == NULL )
                {
                    assert( ERROR_OCCURRED() );

                    FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                    exception_lineno = 793;
                    type_description_1 = "oooooooooooooooooooooooooooooo";
                    goto try_except_handler_5;
                }
                CHECK_OBJECT( par_self );
                tmp_source_name_24 = par_self;
                tmp_args_element_name_44 = LOOKUP_ATTRIBUTE( tmp_source_name_24, const_str_plain__devnull );
                if ( tmp_args_element_name_44 == NULL )
                {
                    assert( ERROR_OCCURRED() );

                    FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
                    Py_DECREF( tmp_called_name_15 );

                    exception_lineno = 793;
                    type_description_1 = "oooooooooooooooooooooooooooooo";
                    goto try_except_handler_5;
                }
                frame_3307251e478e6f87577905ed55fc01cd->m_frame.f_lineno = 793;
                {
                    PyObject *call_args[] = { tmp_args_element_name_44 };
                    tmp_call_result_8 = CALL_FUNCTION_WITH_ARGS1( tmp_called_name_15, call_args );
                }

                Py_DECREF( tmp_called_name_15 );
                Py_DECREF( tmp_args_element_name_44 );
                if ( tmp_call_result_8 == NULL )
                {
                    assert( ERROR_OCCURRED() );

                    FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                    exception_lineno = 793;
                    type_description_1 = "oooooooooooooooooooooooooooooo";
                    goto try_except_handler_5;
                }
                Py_DECREF( tmp_call_result_8 );
            }
            branch_no_24:;
        }
        {
            PyObject *tmp_assign_source_23;
            PyObject *tmp_iter_arg_3;
            CHECK_OBJECT( var_to_close );
            tmp_iter_arg_3 = var_to_close;
            tmp_assign_source_23 = MAKE_ITERATOR( tmp_iter_arg_3 );
            if ( tmp_assign_source_23 == NULL )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 794;
                type_description_1 = "oooooooooooooooooooooooooooooo";
                goto try_except_handler_5;
            }
            assert( tmp_for_loop_2__for_iterator == NULL );
            tmp_for_loop_2__for_iterator = tmp_assign_source_23;
        }
        // Tried code:
        loop_start_2:;
        {
            PyObject *tmp_next_source_2;
            PyObject *tmp_assign_source_24;
            CHECK_OBJECT( tmp_for_loop_2__for_iterator );
            tmp_next_source_2 = tmp_for_loop_2__for_iterator;
            tmp_assign_source_24 = ITERATOR_NEXT( tmp_next_source_2 );
            if ( tmp_assign_source_24 == NULL )
            {
                if ( CHECK_AND_CLEAR_STOP_ITERATION_OCCURRED() )
                {

                    goto loop_end_2;
                }
                else
                {

                    FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
                    type_description_1 = "oooooooooooooooooooooooooooooo";
                    exception_lineno = 794;
                    goto try_except_handler_9;
                }
            }

            {
                PyObject *old = tmp_for_loop_2__iter_value;
                tmp_for_loop_2__iter_value = tmp_assign_source_24;
                Py_XDECREF( old );
            }

        }
        {
            PyObject *tmp_assign_source_25;
            CHECK_OBJECT( tmp_for_loop_2__iter_value );
            tmp_assign_source_25 = tmp_for_loop_2__iter_value;
            {
                PyObject *old = var_fd;
                var_fd = tmp_assign_source_25;
                Py_INCREF( var_fd );
                Py_XDECREF( old );
            }

        }
        // Tried code:
        {
            nuitka_bool tmp_condition_result_25;
            int tmp_and_left_truth_4;
            nuitka_bool tmp_and_left_value_4;
            nuitka_bool tmp_and_right_value_4;
            PyObject *tmp_mvar_value_20;
            int tmp_truth_name_7;
            PyObject *tmp_isinstance_inst_2;
            PyObject *tmp_isinstance_cls_2;
            PyObject *tmp_mvar_value_21;
            tmp_mvar_value_20 = GET_STRING_DICT_VALUE( moduledict_subprocess, (Nuitka_StringObject *)const_str_plain__mswindows );

            if (unlikely( tmp_mvar_value_20 == NULL ))
            {
                tmp_mvar_value_20 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain__mswindows );
            }

            if ( tmp_mvar_value_20 == NULL )
            {

                exception_type = PyExc_NameError;
                Py_INCREF( exception_type );
                exception_value = PyUnicode_FromFormat( "name '%s' is not defined", "_mswindows" );
                exception_tb = NULL;
                NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
                CHAIN_EXCEPTION( exception_value );

                exception_lineno = 796;
                type_description_1 = "oooooooooooooooooooooooooooooo";
                goto try_except_handler_10;
            }

            tmp_truth_name_7 = CHECK_IF_TRUE( tmp_mvar_value_20 );
            if ( tmp_truth_name_7 == -1 )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 796;
                type_description_1 = "oooooooooooooooooooooooooooooo";
                goto try_except_handler_10;
            }
            tmp_and_left_value_4 = tmp_truth_name_7 == 1 ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
            tmp_and_left_truth_4 = tmp_and_left_value_4 == NUITKA_BOOL_TRUE ? 1 : 0;
            if ( tmp_and_left_truth_4 == 1 )
            {
                goto and_right_4;
            }
            else
            {
                goto and_left_4;
            }
            and_right_4:;
            CHECK_OBJECT( var_fd );
            tmp_isinstance_inst_2 = var_fd;
            tmp_mvar_value_21 = GET_STRING_DICT_VALUE( moduledict_subprocess, (Nuitka_StringObject *)const_str_plain_Handle );

            if (unlikely( tmp_mvar_value_21 == NULL ))
            {
                tmp_mvar_value_21 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_Handle );
            }

            if ( tmp_mvar_value_21 == NULL )
            {

                exception_type = PyExc_NameError;
                Py_INCREF( exception_type );
                exception_value = PyUnicode_FromFormat( "name '%s' is not defined", "Handle" );
                exception_tb = NULL;
                NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
                CHAIN_EXCEPTION( exception_value );

                exception_lineno = 796;
                type_description_1 = "oooooooooooooooooooooooooooooo";
                goto try_except_handler_10;
            }

            tmp_isinstance_cls_2 = tmp_mvar_value_21;
            tmp_res = Nuitka_IsInstance( tmp_isinstance_inst_2, tmp_isinstance_cls_2 );
            if ( tmp_res == -1 )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 796;
                type_description_1 = "oooooooooooooooooooooooooooooo";
                goto try_except_handler_10;
            }
            tmp_and_right_value_4 = ( tmp_res != 0 ) ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
            tmp_condition_result_25 = tmp_and_right_value_4;
            goto and_end_4;
            and_left_4:;
            tmp_condition_result_25 = tmp_and_left_value_4;
            and_end_4:;
            if ( tmp_condition_result_25 == NUITKA_BOOL_TRUE )
            {
                goto branch_yes_25;
            }
            else
            {
                goto branch_no_25;
            }
            branch_yes_25:;
            {
                PyObject *tmp_called_instance_10;
                PyObject *tmp_call_result_9;
                CHECK_OBJECT( var_fd );
                tmp_called_instance_10 = var_fd;
                frame_3307251e478e6f87577905ed55fc01cd->m_frame.f_lineno = 797;
                tmp_call_result_9 = CALL_METHOD_NO_ARGS( tmp_called_instance_10, const_str_plain_Close );
                if ( tmp_call_result_9 == NULL )
                {
                    assert( ERROR_OCCURRED() );

                    FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                    exception_lineno = 797;
                    type_description_1 = "oooooooooooooooooooooooooooooo";
                    goto try_except_handler_10;
                }
                Py_DECREF( tmp_call_result_9 );
            }
            goto branch_end_25;
            branch_no_25:;
            {
                PyObject *tmp_called_instance_11;
                PyObject *tmp_mvar_value_22;
                PyObject *tmp_call_result_10;
                PyObject *tmp_args_element_name_45;
                tmp_mvar_value_22 = GET_STRING_DICT_VALUE( moduledict_subprocess, (Nuitka_StringObject *)const_str_plain_os );

                if (unlikely( tmp_mvar_value_22 == NULL ))
                {
                    tmp_mvar_value_22 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_os );
                }

                if ( tmp_mvar_value_22 == NULL )
                {

                    exception_type = PyExc_NameError;
                    Py_INCREF( exception_type );
                    exception_value = PyUnicode_FromFormat( "name '%s' is not defined", "os" );
                    exception_tb = NULL;
                    NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
                    CHAIN_EXCEPTION( exception_value );

                    exception_lineno = 799;
                    type_description_1 = "oooooooooooooooooooooooooooooo";
                    goto try_except_handler_10;
                }

                tmp_called_instance_11 = tmp_mvar_value_22;
                CHECK_OBJECT( var_fd );
                tmp_args_element_name_45 = var_fd;
                frame_3307251e478e6f87577905ed55fc01cd->m_frame.f_lineno = 799;
                {
                    PyObject *call_args[] = { tmp_args_element_name_45 };
                    tmp_call_result_10 = CALL_METHOD_WITH_ARGS1( tmp_called_instance_11, const_str_plain_close, call_args );
                }

                if ( tmp_call_result_10 == NULL )
                {
                    assert( ERROR_OCCURRED() );

                    FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                    exception_lineno = 799;
                    type_description_1 = "oooooooooooooooooooooooooooooo";
                    goto try_except_handler_10;
                }
                Py_DECREF( tmp_call_result_10 );
            }
            branch_end_25:;
        }
        goto try_end_7;
        // Exception handler code:
        try_except_handler_10:;
        exception_keeper_type_7 = exception_type;
        exception_keeper_value_7 = exception_value;
        exception_keeper_tb_7 = exception_tb;
        exception_keeper_lineno_7 = exception_lineno;
        exception_type = NULL;
        exception_value = NULL;
        exception_tb = NULL;
        exception_lineno = 0;

        // Preserve existing published exception.
        exception_preserved_type_2 = EXC_TYPE(PyThreadState_GET());
        Py_XINCREF( exception_preserved_type_2 );
        exception_preserved_value_2 = EXC_VALUE(PyThreadState_GET());
        Py_XINCREF( exception_preserved_value_2 );
        exception_preserved_tb_2 = (PyTracebackObject *)EXC_TRACEBACK(PyThreadState_GET());
        Py_XINCREF( exception_preserved_tb_2 );

        if ( exception_keeper_tb_7 == NULL )
        {
            exception_keeper_tb_7 = MAKE_TRACEBACK( frame_3307251e478e6f87577905ed55fc01cd, exception_keeper_lineno_7 );
        }
        else if ( exception_keeper_lineno_7 != 0 )
        {
            exception_keeper_tb_7 = ADD_TRACEBACK( exception_keeper_tb_7, frame_3307251e478e6f87577905ed55fc01cd, exception_keeper_lineno_7 );
        }

        NORMALIZE_EXCEPTION( &exception_keeper_type_7, &exception_keeper_value_7, &exception_keeper_tb_7 );
        PyException_SetTraceback( exception_keeper_value_7, (PyObject *)exception_keeper_tb_7 );
        PUBLISH_EXCEPTION( &exception_keeper_type_7, &exception_keeper_value_7, &exception_keeper_tb_7 );
        // Tried code:
        {
            nuitka_bool tmp_condition_result_26;
            PyObject *tmp_operand_name_5;
            PyObject *tmp_compexpr_left_19;
            PyObject *tmp_compexpr_right_19;
            tmp_compexpr_left_19 = EXC_TYPE(PyThreadState_GET());
            tmp_compexpr_right_19 = PyExc_OSError;
            tmp_res = EXCEPTION_MATCH_BOOL( tmp_compexpr_left_19, tmp_compexpr_right_19 );
            if ( tmp_res == -1 )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 800;
                type_description_1 = "oooooooooooooooooooooooooooooo";
                goto try_except_handler_11;
            }
            tmp_operand_name_5 = ( tmp_res != 0 ) ? Py_True : Py_False;
            tmp_res = CHECK_IF_TRUE( tmp_operand_name_5 );
            if ( tmp_res == -1 )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 800;
                type_description_1 = "oooooooooooooooooooooooooooooo";
                goto try_except_handler_11;
            }
            tmp_condition_result_26 = ( tmp_res == 0 ) ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
            if ( tmp_condition_result_26 == NUITKA_BOOL_TRUE )
            {
                goto branch_yes_26;
            }
            else
            {
                goto branch_no_26;
            }
            branch_yes_26:;
            tmp_result = RERAISE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
            if (unlikely( tmp_result == false ))
            {
                exception_lineno = 795;
            }

            if (exception_tb && exception_tb->tb_frame == &frame_3307251e478e6f87577905ed55fc01cd->m_frame) frame_3307251e478e6f87577905ed55fc01cd->m_frame.f_lineno = exception_tb->tb_lineno;
            type_description_1 = "oooooooooooooooooooooooooooooo";
            goto try_except_handler_11;
            branch_no_26:;
        }
        goto try_end_8;
        // Exception handler code:
        try_except_handler_11:;
        exception_keeper_type_8 = exception_type;
        exception_keeper_value_8 = exception_value;
        exception_keeper_tb_8 = exception_tb;
        exception_keeper_lineno_8 = exception_lineno;
        exception_type = NULL;
        exception_value = NULL;
        exception_tb = NULL;
        exception_lineno = 0;

        // Restore previous exception.
        SET_CURRENT_EXCEPTION( exception_preserved_type_2, exception_preserved_value_2, exception_preserved_tb_2 );
        // Re-raise.
        exception_type = exception_keeper_type_8;
        exception_value = exception_keeper_value_8;
        exception_tb = exception_keeper_tb_8;
        exception_lineno = exception_keeper_lineno_8;

        goto try_except_handler_9;
        // End of try:
        try_end_8:;
        // Restore previous exception.
        SET_CURRENT_EXCEPTION( exception_preserved_type_2, exception_preserved_value_2, exception_preserved_tb_2 );
        goto try_end_7;
        // exception handler codes exits in all cases
        NUITKA_CANNOT_GET_HERE( subprocess$$$function_27___init__ );
        return NULL;
        // End of try:
        try_end_7:;
        if ( CONSIDER_THREADING() == false )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 794;
            type_description_1 = "oooooooooooooooooooooooooooooo";
            goto try_except_handler_9;
        }
        goto loop_start_2;
        loop_end_2:;
        goto try_end_9;
        // Exception handler code:
        try_except_handler_9:;
        exception_keeper_type_9 = exception_type;
        exception_keeper_value_9 = exception_value;
        exception_keeper_tb_9 = exception_tb;
        exception_keeper_lineno_9 = exception_lineno;
        exception_type = NULL;
        exception_value = NULL;
        exception_tb = NULL;
        exception_lineno = 0;

        Py_XDECREF( tmp_for_loop_2__iter_value );
        tmp_for_loop_2__iter_value = NULL;

        CHECK_OBJECT( (PyObject *)tmp_for_loop_2__for_iterator );
        Py_DECREF( tmp_for_loop_2__for_iterator );
        tmp_for_loop_2__for_iterator = NULL;

        // Re-raise.
        exception_type = exception_keeper_type_9;
        exception_value = exception_keeper_value_9;
        exception_tb = exception_keeper_tb_9;
        exception_lineno = exception_keeper_lineno_9;

        goto try_except_handler_5;
        // End of try:
        try_end_9:;
        Py_XDECREF( tmp_for_loop_2__iter_value );
        tmp_for_loop_2__iter_value = NULL;

        CHECK_OBJECT( (PyObject *)tmp_for_loop_2__for_iterator );
        Py_DECREF( tmp_for_loop_2__for_iterator );
        tmp_for_loop_2__for_iterator = NULL;

        branch_no_20:;
    }
    tmp_result = RERAISE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
    if (unlikely( tmp_result == false ))
    {
        exception_lineno = 803;
    }

    if (exception_tb && exception_tb->tb_frame == &frame_3307251e478e6f87577905ed55fc01cd->m_frame) frame_3307251e478e6f87577905ed55fc01cd->m_frame.f_lineno = exception_tb->tb_lineno;
    type_description_1 = "oooooooooooooooooooooooooooooo";
    goto try_except_handler_5;
    // tried codes exits in all cases
    NUITKA_CANNOT_GET_HERE( subprocess$$$function_27___init__ );
    return NULL;
    // Exception handler code:
    try_except_handler_5:;
    exception_keeper_type_10 = exception_type;
    exception_keeper_value_10 = exception_value;
    exception_keeper_tb_10 = exception_tb;
    exception_keeper_lineno_10 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    // Restore previous exception.
    SET_CURRENT_EXCEPTION( exception_preserved_type_3, exception_preserved_value_3, exception_preserved_tb_3 );
    // Re-raise.
    exception_type = exception_keeper_type_10;
    exception_value = exception_keeper_value_10;
    exception_tb = exception_keeper_tb_10;
    exception_lineno = exception_keeper_lineno_10;

    goto frame_exception_exit_1;
    // End of try:
    // End of try:
    try_end_3:;

#if 0
    RESTORE_FRAME_EXCEPTION( frame_3307251e478e6f87577905ed55fc01cd );
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto frame_no_exception_1;

    frame_exception_exit_1:;

#if 0
    RESTORE_FRAME_EXCEPTION( frame_3307251e478e6f87577905ed55fc01cd );
#endif

    if ( exception_tb == NULL )
    {
        exception_tb = MAKE_TRACEBACK( frame_3307251e478e6f87577905ed55fc01cd, exception_lineno );
    }
    else if ( exception_tb->tb_frame != &frame_3307251e478e6f87577905ed55fc01cd->m_frame )
    {
        exception_tb = ADD_TRACEBACK( exception_tb, frame_3307251e478e6f87577905ed55fc01cd, exception_lineno );
    }

    // Attachs locals to frame if any.
    Nuitka_Frame_AttachLocals(
        (struct Nuitka_FrameObject *)frame_3307251e478e6f87577905ed55fc01cd,
        type_description_1,
        par_self,
        par_args,
        par_bufsize,
        par_executable,
        par_stdin,
        par_stdout,
        par_stderr,
        par_preexec_fn,
        par_close_fds,
        par_shell,
        par_cwd,
        par_env,
        par_universal_newlines,
        par_startupinfo,
        par_creationflags,
        par_restore_signals,
        par_start_new_session,
        par_pass_fds,
        par_encoding,
        par_errors,
        par_text,
        var_p2cread,
        var_p2cwrite,
        var_c2pread,
        var_c2pwrite,
        var_errread,
        var_errwrite,
        var_f,
        var_to_close,
        var_fd
    );


    // Release cached frame.
    if ( frame_3307251e478e6f87577905ed55fc01cd == cache_frame_3307251e478e6f87577905ed55fc01cd )
    {
        Py_DECREF( frame_3307251e478e6f87577905ed55fc01cd );
    }
    cache_frame_3307251e478e6f87577905ed55fc01cd = NULL;

    assertFrameObject( frame_3307251e478e6f87577905ed55fc01cd );

    // Put the previous frame back on top.
    popFrameStack();

    // Return the error.
    goto try_except_handler_1;

    frame_no_exception_1:;
    tmp_return_value = Py_None;
    Py_INCREF( tmp_return_value );
    goto try_return_handler_1;
    // tried codes exits in all cases
    NUITKA_CANNOT_GET_HERE( subprocess$$$function_27___init__ );
    return NULL;
    // Return handler code:
    try_return_handler_1:;
    CHECK_OBJECT( (PyObject *)par_self );
    Py_DECREF( par_self );
    par_self = NULL;

    CHECK_OBJECT( (PyObject *)par_args );
    Py_DECREF( par_args );
    par_args = NULL;

    CHECK_OBJECT( (PyObject *)par_bufsize );
    Py_DECREF( par_bufsize );
    par_bufsize = NULL;

    CHECK_OBJECT( (PyObject *)par_executable );
    Py_DECREF( par_executable );
    par_executable = NULL;

    CHECK_OBJECT( (PyObject *)par_stdin );
    Py_DECREF( par_stdin );
    par_stdin = NULL;

    CHECK_OBJECT( (PyObject *)par_stdout );
    Py_DECREF( par_stdout );
    par_stdout = NULL;

    CHECK_OBJECT( (PyObject *)par_stderr );
    Py_DECREF( par_stderr );
    par_stderr = NULL;

    CHECK_OBJECT( (PyObject *)par_preexec_fn );
    Py_DECREF( par_preexec_fn );
    par_preexec_fn = NULL;

    Py_XDECREF( par_close_fds );
    par_close_fds = NULL;

    CHECK_OBJECT( (PyObject *)par_shell );
    Py_DECREF( par_shell );
    par_shell = NULL;

    CHECK_OBJECT( (PyObject *)par_cwd );
    Py_DECREF( par_cwd );
    par_cwd = NULL;

    CHECK_OBJECT( (PyObject *)par_env );
    Py_DECREF( par_env );
    par_env = NULL;

    CHECK_OBJECT( (PyObject *)par_universal_newlines );
    Py_DECREF( par_universal_newlines );
    par_universal_newlines = NULL;

    CHECK_OBJECT( (PyObject *)par_startupinfo );
    Py_DECREF( par_startupinfo );
    par_startupinfo = NULL;

    CHECK_OBJECT( (PyObject *)par_creationflags );
    Py_DECREF( par_creationflags );
    par_creationflags = NULL;

    CHECK_OBJECT( (PyObject *)par_restore_signals );
    Py_DECREF( par_restore_signals );
    par_restore_signals = NULL;

    CHECK_OBJECT( (PyObject *)par_start_new_session );
    Py_DECREF( par_start_new_session );
    par_start_new_session = NULL;

    CHECK_OBJECT( (PyObject *)par_pass_fds );
    Py_DECREF( par_pass_fds );
    par_pass_fds = NULL;

    CHECK_OBJECT( (PyObject *)par_encoding );
    Py_DECREF( par_encoding );
    par_encoding = NULL;

    CHECK_OBJECT( (PyObject *)par_errors );
    Py_DECREF( par_errors );
    par_errors = NULL;

    CHECK_OBJECT( (PyObject *)par_text );
    Py_DECREF( par_text );
    par_text = NULL;

    CHECK_OBJECT( (PyObject *)var_p2cread );
    Py_DECREF( var_p2cread );
    var_p2cread = NULL;

    Py_XDECREF( var_p2cwrite );
    var_p2cwrite = NULL;

    Py_XDECREF( var_c2pread );
    var_c2pread = NULL;

    CHECK_OBJECT( (PyObject *)var_c2pwrite );
    Py_DECREF( var_c2pwrite );
    var_c2pwrite = NULL;

    Py_XDECREF( var_errread );
    var_errread = NULL;

    CHECK_OBJECT( (PyObject *)var_errwrite );
    Py_DECREF( var_errwrite );
    var_errwrite = NULL;

    goto function_return_exit;
    // Exception handler code:
    try_except_handler_1:;
    exception_keeper_type_11 = exception_type;
    exception_keeper_value_11 = exception_value;
    exception_keeper_tb_11 = exception_tb;
    exception_keeper_lineno_11 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    CHECK_OBJECT( (PyObject *)par_self );
    Py_DECREF( par_self );
    par_self = NULL;

    CHECK_OBJECT( (PyObject *)par_args );
    Py_DECREF( par_args );
    par_args = NULL;

    Py_XDECREF( par_bufsize );
    par_bufsize = NULL;

    CHECK_OBJECT( (PyObject *)par_executable );
    Py_DECREF( par_executable );
    par_executable = NULL;

    CHECK_OBJECT( (PyObject *)par_stdin );
    Py_DECREF( par_stdin );
    par_stdin = NULL;

    CHECK_OBJECT( (PyObject *)par_stdout );
    Py_DECREF( par_stdout );
    par_stdout = NULL;

    CHECK_OBJECT( (PyObject *)par_stderr );
    Py_DECREF( par_stderr );
    par_stderr = NULL;

    CHECK_OBJECT( (PyObject *)par_preexec_fn );
    Py_DECREF( par_preexec_fn );
    par_preexec_fn = NULL;

    Py_XDECREF( par_close_fds );
    par_close_fds = NULL;

    CHECK_OBJECT( (PyObject *)par_shell );
    Py_DECREF( par_shell );
    par_shell = NULL;

    CHECK_OBJECT( (PyObject *)par_cwd );
    Py_DECREF( par_cwd );
    par_cwd = NULL;

    CHECK_OBJECT( (PyObject *)par_env );
    Py_DECREF( par_env );
    par_env = NULL;

    CHECK_OBJECT( (PyObject *)par_universal_newlines );
    Py_DECREF( par_universal_newlines );
    par_universal_newlines = NULL;

    CHECK_OBJECT( (PyObject *)par_startupinfo );
    Py_DECREF( par_startupinfo );
    par_startupinfo = NULL;

    CHECK_OBJECT( (PyObject *)par_creationflags );
    Py_DECREF( par_creationflags );
    par_creationflags = NULL;

    CHECK_OBJECT( (PyObject *)par_restore_signals );
    Py_DECREF( par_restore_signals );
    par_restore_signals = NULL;

    CHECK_OBJECT( (PyObject *)par_start_new_session );
    Py_DECREF( par_start_new_session );
    par_start_new_session = NULL;

    CHECK_OBJECT( (PyObject *)par_pass_fds );
    Py_DECREF( par_pass_fds );
    par_pass_fds = NULL;

    CHECK_OBJECT( (PyObject *)par_encoding );
    Py_DECREF( par_encoding );
    par_encoding = NULL;

    CHECK_OBJECT( (PyObject *)par_errors );
    Py_DECREF( par_errors );
    par_errors = NULL;

    CHECK_OBJECT( (PyObject *)par_text );
    Py_DECREF( par_text );
    par_text = NULL;

    Py_XDECREF( var_p2cread );
    var_p2cread = NULL;

    Py_XDECREF( var_p2cwrite );
    var_p2cwrite = NULL;

    Py_XDECREF( var_c2pread );
    var_c2pread = NULL;

    Py_XDECREF( var_c2pwrite );
    var_c2pwrite = NULL;

    Py_XDECREF( var_errread );
    var_errread = NULL;

    Py_XDECREF( var_errwrite );
    var_errwrite = NULL;

    Py_XDECREF( var_f );
    var_f = NULL;

    Py_XDECREF( var_to_close );
    var_to_close = NULL;

    Py_XDECREF( var_fd );
    var_fd = NULL;

    // Re-raise.
    exception_type = exception_keeper_type_11;
    exception_value = exception_keeper_value_11;
    exception_tb = exception_keeper_tb_11;
    exception_lineno = exception_keeper_lineno_11;

    goto function_exception_exit;
    // End of try:

    // Return statement must have exited already.
    NUITKA_CANNOT_GET_HERE( subprocess$$$function_27___init__ );
    return NULL;

function_exception_exit:
    assert( exception_type );
    RESTORE_ERROR_OCCURRED( exception_type, exception_value, exception_tb );

    return NULL;

function_return_exit:
   // Function cleanup code if any.


   // Actual function exit with return value, making sure we did not make
   // the error status worse despite non-NULL return.
   CHECK_OBJECT( tmp_return_value );
   assert( had_error || !ERROR_OCCURRED() );
   return tmp_return_value;
}


static PyObject *impl_subprocess$$$function_28_universal_newlines( struct Nuitka_FunctionObject const *self, PyObject **python_pars )
{
    // Preserve error status for checks
#ifndef __NUITKA_NO_ASSERT__
    NUITKA_MAY_BE_UNUSED bool had_error = ERROR_OCCURRED();
#endif

    // Local variable declarations.
    PyObject *par_self = python_pars[ 0 ];
    struct Nuitka_FrameObject *frame_4897b9eeb94c896eae280946e0cffe8e;
    NUITKA_MAY_BE_UNUSED char const *type_description_1 = NULL;
    PyObject *tmp_return_value = NULL;
    PyObject *exception_type = NULL;
    PyObject *exception_value = NULL;
    PyTracebackObject *exception_tb = NULL;
    NUITKA_MAY_BE_UNUSED int exception_lineno = 0;
    static struct Nuitka_FrameObject *cache_frame_4897b9eeb94c896eae280946e0cffe8e = NULL;
    PyObject *exception_keeper_type_1;
    PyObject *exception_keeper_value_1;
    PyTracebackObject *exception_keeper_tb_1;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_1;

    // Actual function body.
    // Tried code:
    MAKE_OR_REUSE_FRAME( cache_frame_4897b9eeb94c896eae280946e0cffe8e, codeobj_4897b9eeb94c896eae280946e0cffe8e, module_subprocess, sizeof(void *) );
    frame_4897b9eeb94c896eae280946e0cffe8e = cache_frame_4897b9eeb94c896eae280946e0cffe8e;

    // Push the new frame as the currently active one.
    pushFrameStack( frame_4897b9eeb94c896eae280946e0cffe8e );

    // Mark the frame object as in use, ref count 1 will be up for reuse.
    assert( Py_REFCNT( frame_4897b9eeb94c896eae280946e0cffe8e ) == 2 ); // Frame stack

    // Framed code:
    {
        PyObject *tmp_source_name_1;
        CHECK_OBJECT( par_self );
        tmp_source_name_1 = par_self;
        tmp_return_value = LOOKUP_ATTRIBUTE( tmp_source_name_1, const_str_plain_text_mode );
        if ( tmp_return_value == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 809;
            type_description_1 = "o";
            goto frame_exception_exit_1;
        }
        goto frame_return_exit_1;
    }

#if 0
    RESTORE_FRAME_EXCEPTION( frame_4897b9eeb94c896eae280946e0cffe8e );
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto frame_no_exception_1;

    frame_return_exit_1:;
#if 0
    RESTORE_FRAME_EXCEPTION( frame_4897b9eeb94c896eae280946e0cffe8e );
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto try_return_handler_1;

    frame_exception_exit_1:;

#if 0
    RESTORE_FRAME_EXCEPTION( frame_4897b9eeb94c896eae280946e0cffe8e );
#endif

    if ( exception_tb == NULL )
    {
        exception_tb = MAKE_TRACEBACK( frame_4897b9eeb94c896eae280946e0cffe8e, exception_lineno );
    }
    else if ( exception_tb->tb_frame != &frame_4897b9eeb94c896eae280946e0cffe8e->m_frame )
    {
        exception_tb = ADD_TRACEBACK( exception_tb, frame_4897b9eeb94c896eae280946e0cffe8e, exception_lineno );
    }

    // Attachs locals to frame if any.
    Nuitka_Frame_AttachLocals(
        (struct Nuitka_FrameObject *)frame_4897b9eeb94c896eae280946e0cffe8e,
        type_description_1,
        par_self
    );


    // Release cached frame.
    if ( frame_4897b9eeb94c896eae280946e0cffe8e == cache_frame_4897b9eeb94c896eae280946e0cffe8e )
    {
        Py_DECREF( frame_4897b9eeb94c896eae280946e0cffe8e );
    }
    cache_frame_4897b9eeb94c896eae280946e0cffe8e = NULL;

    assertFrameObject( frame_4897b9eeb94c896eae280946e0cffe8e );

    // Put the previous frame back on top.
    popFrameStack();

    // Return the error.
    goto try_except_handler_1;

    frame_no_exception_1:;
    // tried codes exits in all cases
    NUITKA_CANNOT_GET_HERE( subprocess$$$function_28_universal_newlines );
    return NULL;
    // Return handler code:
    try_return_handler_1:;
    CHECK_OBJECT( (PyObject *)par_self );
    Py_DECREF( par_self );
    par_self = NULL;

    goto function_return_exit;
    // Exception handler code:
    try_except_handler_1:;
    exception_keeper_type_1 = exception_type;
    exception_keeper_value_1 = exception_value;
    exception_keeper_tb_1 = exception_tb;
    exception_keeper_lineno_1 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    CHECK_OBJECT( (PyObject *)par_self );
    Py_DECREF( par_self );
    par_self = NULL;

    // Re-raise.
    exception_type = exception_keeper_type_1;
    exception_value = exception_keeper_value_1;
    exception_tb = exception_keeper_tb_1;
    exception_lineno = exception_keeper_lineno_1;

    goto function_exception_exit;
    // End of try:

    // Return statement must have exited already.
    NUITKA_CANNOT_GET_HERE( subprocess$$$function_28_universal_newlines );
    return NULL;

function_exception_exit:
    assert( exception_type );
    RESTORE_ERROR_OCCURRED( exception_type, exception_value, exception_tb );

    return NULL;

function_return_exit:
   // Function cleanup code if any.


   // Actual function exit with return value, making sure we did not make
   // the error status worse despite non-NULL return.
   CHECK_OBJECT( tmp_return_value );
   assert( had_error || !ERROR_OCCURRED() );
   return tmp_return_value;
}


static PyObject *impl_subprocess$$$function_29_universal_newlines( struct Nuitka_FunctionObject const *self, PyObject **python_pars )
{
    // Preserve error status for checks
#ifndef __NUITKA_NO_ASSERT__
    NUITKA_MAY_BE_UNUSED bool had_error = ERROR_OCCURRED();
#endif

    // Local variable declarations.
    PyObject *par_self = python_pars[ 0 ];
    PyObject *par_universal_newlines = python_pars[ 1 ];
    struct Nuitka_FrameObject *frame_dddc561887afa411fcad41520a6648b6;
    NUITKA_MAY_BE_UNUSED char const *type_description_1 = NULL;
    int tmp_res;
    PyObject *exception_type = NULL;
    PyObject *exception_value = NULL;
    PyTracebackObject *exception_tb = NULL;
    NUITKA_MAY_BE_UNUSED int exception_lineno = 0;
    bool tmp_result;
    static struct Nuitka_FrameObject *cache_frame_dddc561887afa411fcad41520a6648b6 = NULL;
    PyObject *tmp_return_value = NULL;
    PyObject *exception_keeper_type_1;
    PyObject *exception_keeper_value_1;
    PyTracebackObject *exception_keeper_tb_1;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_1;

    // Actual function body.
    // Tried code:
    MAKE_OR_REUSE_FRAME( cache_frame_dddc561887afa411fcad41520a6648b6, codeobj_dddc561887afa411fcad41520a6648b6, module_subprocess, sizeof(void *)+sizeof(void *) );
    frame_dddc561887afa411fcad41520a6648b6 = cache_frame_dddc561887afa411fcad41520a6648b6;

    // Push the new frame as the currently active one.
    pushFrameStack( frame_dddc561887afa411fcad41520a6648b6 );

    // Mark the frame object as in use, ref count 1 will be up for reuse.
    assert( Py_REFCNT( frame_dddc561887afa411fcad41520a6648b6 ) == 2 ); // Frame stack

    // Framed code:
    {
        PyObject *tmp_assattr_name_1;
        PyObject *tmp_value_name_1;
        PyObject *tmp_assattr_target_1;
        CHECK_OBJECT( par_universal_newlines );
        tmp_value_name_1 = par_universal_newlines;
        tmp_res = CHECK_IF_TRUE( tmp_value_name_1 );
        if ( tmp_res == -1 )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 813;
            type_description_1 = "oo";
            goto frame_exception_exit_1;
        }
        tmp_assattr_name_1 = ( tmp_res != 0 ) ? Py_True : Py_False;
        CHECK_OBJECT( par_self );
        tmp_assattr_target_1 = par_self;
        tmp_result = SET_ATTRIBUTE( tmp_assattr_target_1, const_str_plain_text_mode, tmp_assattr_name_1 );
        if ( tmp_result == false )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 813;
            type_description_1 = "oo";
            goto frame_exception_exit_1;
        }
    }

#if 0
    RESTORE_FRAME_EXCEPTION( frame_dddc561887afa411fcad41520a6648b6 );
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto frame_no_exception_1;

    frame_exception_exit_1:;

#if 0
    RESTORE_FRAME_EXCEPTION( frame_dddc561887afa411fcad41520a6648b6 );
#endif

    if ( exception_tb == NULL )
    {
        exception_tb = MAKE_TRACEBACK( frame_dddc561887afa411fcad41520a6648b6, exception_lineno );
    }
    else if ( exception_tb->tb_frame != &frame_dddc561887afa411fcad41520a6648b6->m_frame )
    {
        exception_tb = ADD_TRACEBACK( exception_tb, frame_dddc561887afa411fcad41520a6648b6, exception_lineno );
    }

    // Attachs locals to frame if any.
    Nuitka_Frame_AttachLocals(
        (struct Nuitka_FrameObject *)frame_dddc561887afa411fcad41520a6648b6,
        type_description_1,
        par_self,
        par_universal_newlines
    );


    // Release cached frame.
    if ( frame_dddc561887afa411fcad41520a6648b6 == cache_frame_dddc561887afa411fcad41520a6648b6 )
    {
        Py_DECREF( frame_dddc561887afa411fcad41520a6648b6 );
    }
    cache_frame_dddc561887afa411fcad41520a6648b6 = NULL;

    assertFrameObject( frame_dddc561887afa411fcad41520a6648b6 );

    // Put the previous frame back on top.
    popFrameStack();

    // Return the error.
    goto try_except_handler_1;

    frame_no_exception_1:;
    tmp_return_value = Py_None;
    Py_INCREF( tmp_return_value );
    goto try_return_handler_1;
    // tried codes exits in all cases
    NUITKA_CANNOT_GET_HERE( subprocess$$$function_29_universal_newlines );
    return NULL;
    // Return handler code:
    try_return_handler_1:;
    CHECK_OBJECT( (PyObject *)par_self );
    Py_DECREF( par_self );
    par_self = NULL;

    CHECK_OBJECT( (PyObject *)par_universal_newlines );
    Py_DECREF( par_universal_newlines );
    par_universal_newlines = NULL;

    goto function_return_exit;
    // Exception handler code:
    try_except_handler_1:;
    exception_keeper_type_1 = exception_type;
    exception_keeper_value_1 = exception_value;
    exception_keeper_tb_1 = exception_tb;
    exception_keeper_lineno_1 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    CHECK_OBJECT( (PyObject *)par_self );
    Py_DECREF( par_self );
    par_self = NULL;

    CHECK_OBJECT( (PyObject *)par_universal_newlines );
    Py_DECREF( par_universal_newlines );
    par_universal_newlines = NULL;

    // Re-raise.
    exception_type = exception_keeper_type_1;
    exception_value = exception_keeper_value_1;
    exception_tb = exception_keeper_tb_1;
    exception_lineno = exception_keeper_lineno_1;

    goto function_exception_exit;
    // End of try:

    // Return statement must have exited already.
    NUITKA_CANNOT_GET_HERE( subprocess$$$function_29_universal_newlines );
    return NULL;

function_exception_exit:
    assert( exception_type );
    RESTORE_ERROR_OCCURRED( exception_type, exception_value, exception_tb );

    return NULL;

function_return_exit:
   // Function cleanup code if any.


   // Actual function exit with return value, making sure we did not make
   // the error status worse despite non-NULL return.
   CHECK_OBJECT( tmp_return_value );
   assert( had_error || !ERROR_OCCURRED() );
   return tmp_return_value;
}


static PyObject *impl_subprocess$$$function_30__translate_newlines( struct Nuitka_FunctionObject const *self, PyObject **python_pars )
{
    // Preserve error status for checks
#ifndef __NUITKA_NO_ASSERT__
    NUITKA_MAY_BE_UNUSED bool had_error = ERROR_OCCURRED();
#endif

    // Local variable declarations.
    PyObject *par_self = python_pars[ 0 ];
    PyObject *par_data = python_pars[ 1 ];
    PyObject *par_encoding = python_pars[ 2 ];
    PyObject *par_errors = python_pars[ 3 ];
    struct Nuitka_FrameObject *frame_48a7fa25571490ca92c398c7d8159669;
    NUITKA_MAY_BE_UNUSED char const *type_description_1 = NULL;
    PyObject *exception_type = NULL;
    PyObject *exception_value = NULL;
    PyTracebackObject *exception_tb = NULL;
    NUITKA_MAY_BE_UNUSED int exception_lineno = 0;
    PyObject *tmp_return_value = NULL;
    static struct Nuitka_FrameObject *cache_frame_48a7fa25571490ca92c398c7d8159669 = NULL;
    PyObject *exception_keeper_type_1;
    PyObject *exception_keeper_value_1;
    PyTracebackObject *exception_keeper_tb_1;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_1;

    // Actual function body.
    // Tried code:
    MAKE_OR_REUSE_FRAME( cache_frame_48a7fa25571490ca92c398c7d8159669, codeobj_48a7fa25571490ca92c398c7d8159669, module_subprocess, sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *) );
    frame_48a7fa25571490ca92c398c7d8159669 = cache_frame_48a7fa25571490ca92c398c7d8159669;

    // Push the new frame as the currently active one.
    pushFrameStack( frame_48a7fa25571490ca92c398c7d8159669 );

    // Mark the frame object as in use, ref count 1 will be up for reuse.
    assert( Py_REFCNT( frame_48a7fa25571490ca92c398c7d8159669 ) == 2 ); // Frame stack

    // Framed code:
    {
        PyObject *tmp_assign_source_1;
        PyObject *tmp_called_instance_1;
        PyObject *tmp_args_element_name_1;
        PyObject *tmp_args_element_name_2;
        CHECK_OBJECT( par_data );
        tmp_called_instance_1 = par_data;
        CHECK_OBJECT( par_encoding );
        tmp_args_element_name_1 = par_encoding;
        CHECK_OBJECT( par_errors );
        tmp_args_element_name_2 = par_errors;
        frame_48a7fa25571490ca92c398c7d8159669->m_frame.f_lineno = 816;
        {
            PyObject *call_args[] = { tmp_args_element_name_1, tmp_args_element_name_2 };
            tmp_assign_source_1 = CALL_METHOD_WITH_ARGS2( tmp_called_instance_1, const_str_plain_decode, call_args );
        }

        if ( tmp_assign_source_1 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 816;
            type_description_1 = "oooo";
            goto frame_exception_exit_1;
        }
        {
            PyObject *old = par_data;
            assert( old != NULL );
            par_data = tmp_assign_source_1;
            Py_DECREF( old );
        }

    }
    {
        PyObject *tmp_called_instance_2;
        PyObject *tmp_called_instance_3;
        CHECK_OBJECT( par_data );
        tmp_called_instance_3 = par_data;
        frame_48a7fa25571490ca92c398c7d8159669->m_frame.f_lineno = 817;
        tmp_called_instance_2 = CALL_METHOD_WITH_ARGS2( tmp_called_instance_3, const_str_plain_replace, &PyTuple_GET_ITEM( const_tuple_str_digest_7ca129d2d421fe965ad48cbb290b579b_str_newline_tuple, 0 ) );

        if ( tmp_called_instance_2 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 817;
            type_description_1 = "oooo";
            goto frame_exception_exit_1;
        }
        frame_48a7fa25571490ca92c398c7d8159669->m_frame.f_lineno = 817;
        tmp_return_value = CALL_METHOD_WITH_ARGS2( tmp_called_instance_2, const_str_plain_replace, &PyTuple_GET_ITEM( const_tuple_str_chr_13_str_newline_tuple, 0 ) );

        Py_DECREF( tmp_called_instance_2 );
        if ( tmp_return_value == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 817;
            type_description_1 = "oooo";
            goto frame_exception_exit_1;
        }
        goto frame_return_exit_1;
    }

#if 0
    RESTORE_FRAME_EXCEPTION( frame_48a7fa25571490ca92c398c7d8159669 );
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto frame_no_exception_1;

    frame_return_exit_1:;
#if 0
    RESTORE_FRAME_EXCEPTION( frame_48a7fa25571490ca92c398c7d8159669 );
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto try_return_handler_1;

    frame_exception_exit_1:;

#if 0
    RESTORE_FRAME_EXCEPTION( frame_48a7fa25571490ca92c398c7d8159669 );
#endif

    if ( exception_tb == NULL )
    {
        exception_tb = MAKE_TRACEBACK( frame_48a7fa25571490ca92c398c7d8159669, exception_lineno );
    }
    else if ( exception_tb->tb_frame != &frame_48a7fa25571490ca92c398c7d8159669->m_frame )
    {
        exception_tb = ADD_TRACEBACK( exception_tb, frame_48a7fa25571490ca92c398c7d8159669, exception_lineno );
    }

    // Attachs locals to frame if any.
    Nuitka_Frame_AttachLocals(
        (struct Nuitka_FrameObject *)frame_48a7fa25571490ca92c398c7d8159669,
        type_description_1,
        par_self,
        par_data,
        par_encoding,
        par_errors
    );


    // Release cached frame.
    if ( frame_48a7fa25571490ca92c398c7d8159669 == cache_frame_48a7fa25571490ca92c398c7d8159669 )
    {
        Py_DECREF( frame_48a7fa25571490ca92c398c7d8159669 );
    }
    cache_frame_48a7fa25571490ca92c398c7d8159669 = NULL;

    assertFrameObject( frame_48a7fa25571490ca92c398c7d8159669 );

    // Put the previous frame back on top.
    popFrameStack();

    // Return the error.
    goto try_except_handler_1;

    frame_no_exception_1:;
    // tried codes exits in all cases
    NUITKA_CANNOT_GET_HERE( subprocess$$$function_30__translate_newlines );
    return NULL;
    // Return handler code:
    try_return_handler_1:;
    CHECK_OBJECT( (PyObject *)par_self );
    Py_DECREF( par_self );
    par_self = NULL;

    CHECK_OBJECT( (PyObject *)par_data );
    Py_DECREF( par_data );
    par_data = NULL;

    CHECK_OBJECT( (PyObject *)par_encoding );
    Py_DECREF( par_encoding );
    par_encoding = NULL;

    CHECK_OBJECT( (PyObject *)par_errors );
    Py_DECREF( par_errors );
    par_errors = NULL;

    goto function_return_exit;
    // Exception handler code:
    try_except_handler_1:;
    exception_keeper_type_1 = exception_type;
    exception_keeper_value_1 = exception_value;
    exception_keeper_tb_1 = exception_tb;
    exception_keeper_lineno_1 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    CHECK_OBJECT( (PyObject *)par_self );
    Py_DECREF( par_self );
    par_self = NULL;

    CHECK_OBJECT( (PyObject *)par_data );
    Py_DECREF( par_data );
    par_data = NULL;

    CHECK_OBJECT( (PyObject *)par_encoding );
    Py_DECREF( par_encoding );
    par_encoding = NULL;

    CHECK_OBJECT( (PyObject *)par_errors );
    Py_DECREF( par_errors );
    par_errors = NULL;

    // Re-raise.
    exception_type = exception_keeper_type_1;
    exception_value = exception_keeper_value_1;
    exception_tb = exception_keeper_tb_1;
    exception_lineno = exception_keeper_lineno_1;

    goto function_exception_exit;
    // End of try:

    // Return statement must have exited already.
    NUITKA_CANNOT_GET_HERE( subprocess$$$function_30__translate_newlines );
    return NULL;

function_exception_exit:
    assert( exception_type );
    RESTORE_ERROR_OCCURRED( exception_type, exception_value, exception_tb );

    return NULL;

function_return_exit:
   // Function cleanup code if any.


   // Actual function exit with return value, making sure we did not make
   // the error status worse despite non-NULL return.
   CHECK_OBJECT( tmp_return_value );
   assert( had_error || !ERROR_OCCURRED() );
   return tmp_return_value;
}


static PyObject *impl_subprocess$$$function_31___enter__( struct Nuitka_FunctionObject const *self, PyObject **python_pars )
{
    // Preserve error status for checks
#ifndef __NUITKA_NO_ASSERT__
    NUITKA_MAY_BE_UNUSED bool had_error = ERROR_OCCURRED();
#endif

    // Local variable declarations.
    PyObject *par_self = python_pars[ 0 ];
    PyObject *tmp_return_value = NULL;

    // Actual function body.
    // Tried code:
    CHECK_OBJECT( par_self );
    tmp_return_value = par_self;
    Py_INCREF( tmp_return_value );
    goto try_return_handler_1;
    // tried codes exits in all cases
    NUITKA_CANNOT_GET_HERE( subprocess$$$function_31___enter__ );
    return NULL;
    // Return handler code:
    try_return_handler_1:;
    CHECK_OBJECT( (PyObject *)par_self );
    Py_DECREF( par_self );
    par_self = NULL;

    goto function_return_exit;
    // End of try:

    // Return statement must have exited already.
    NUITKA_CANNOT_GET_HERE( subprocess$$$function_31___enter__ );
    return NULL;


function_return_exit:
   // Function cleanup code if any.


   // Actual function exit with return value, making sure we did not make
   // the error status worse despite non-NULL return.
   CHECK_OBJECT( tmp_return_value );
   assert( had_error || !ERROR_OCCURRED() );
   return tmp_return_value;
}


static PyObject *impl_subprocess$$$function_32___exit__( struct Nuitka_FunctionObject const *self, PyObject **python_pars )
{
    // Preserve error status for checks
#ifndef __NUITKA_NO_ASSERT__
    NUITKA_MAY_BE_UNUSED bool had_error = ERROR_OCCURRED();
#endif

    // Local variable declarations.
    PyObject *par_self = python_pars[ 0 ];
    PyObject *par_exc_type = python_pars[ 1 ];
    PyObject *par_value = python_pars[ 2 ];
    PyObject *par_traceback = python_pars[ 3 ];
    struct Nuitka_FrameObject *frame_3af98ecbcd655216221180d14227e886;
    NUITKA_MAY_BE_UNUSED char const *type_description_1 = NULL;
    PyObject *exception_type = NULL;
    PyObject *exception_value = NULL;
    PyTracebackObject *exception_tb = NULL;
    NUITKA_MAY_BE_UNUSED int exception_lineno = 0;
    PyObject *exception_keeper_type_1;
    PyObject *exception_keeper_value_1;
    PyTracebackObject *exception_keeper_tb_1;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_1;
    PyObject *exception_preserved_type_2;
    PyObject *exception_preserved_value_2;
    PyTracebackObject *exception_preserved_tb_2;
    int tmp_res;
    PyObject *exception_keeper_type_2;
    PyObject *exception_keeper_value_2;
    PyTracebackObject *exception_keeper_tb_2;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_2;
    PyObject *exception_preserved_type_1;
    PyObject *exception_preserved_value_1;
    PyTracebackObject *exception_preserved_tb_1;
    bool tmp_result;
    PyObject *exception_keeper_type_3;
    PyObject *exception_keeper_value_3;
    PyTracebackObject *exception_keeper_tb_3;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_3;
    PyObject *tmp_return_value = NULL;
    PyObject *exception_keeper_type_4;
    PyObject *exception_keeper_value_4;
    PyTracebackObject *exception_keeper_tb_4;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_4;
    PyObject *exception_keeper_type_5;
    PyObject *exception_keeper_value_5;
    PyTracebackObject *exception_keeper_tb_5;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_5;
    PyObject *exception_keeper_type_6;
    PyObject *exception_keeper_value_6;
    PyTracebackObject *exception_keeper_tb_6;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_6;
    static struct Nuitka_FrameObject *cache_frame_3af98ecbcd655216221180d14227e886 = NULL;
    PyObject *exception_keeper_type_7;
    PyObject *exception_keeper_value_7;
    PyTracebackObject *exception_keeper_tb_7;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_7;

    // Actual function body.
    // Tried code:
    MAKE_OR_REUSE_FRAME( cache_frame_3af98ecbcd655216221180d14227e886, codeobj_3af98ecbcd655216221180d14227e886, module_subprocess, sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *) );
    frame_3af98ecbcd655216221180d14227e886 = cache_frame_3af98ecbcd655216221180d14227e886;

    // Push the new frame as the currently active one.
    pushFrameStack( frame_3af98ecbcd655216221180d14227e886 );

    // Mark the frame object as in use, ref count 1 will be up for reuse.
    assert( Py_REFCNT( frame_3af98ecbcd655216221180d14227e886 ) == 2 ); // Frame stack

    // Framed code:
    {
        nuitka_bool tmp_condition_result_1;
        PyObject *tmp_source_name_1;
        PyObject *tmp_attribute_value_1;
        int tmp_truth_name_1;
        CHECK_OBJECT( par_self );
        tmp_source_name_1 = par_self;
        tmp_attribute_value_1 = LOOKUP_ATTRIBUTE( tmp_source_name_1, const_str_plain_stdout );
        if ( tmp_attribute_value_1 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 823;
            type_description_1 = "oooo";
            goto frame_exception_exit_1;
        }
        tmp_truth_name_1 = CHECK_IF_TRUE( tmp_attribute_value_1 );
        if ( tmp_truth_name_1 == -1 )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
            Py_DECREF( tmp_attribute_value_1 );

            exception_lineno = 823;
            type_description_1 = "oooo";
            goto frame_exception_exit_1;
        }
        tmp_condition_result_1 = tmp_truth_name_1 == 1 ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
        Py_DECREF( tmp_attribute_value_1 );
        if ( tmp_condition_result_1 == NUITKA_BOOL_TRUE )
        {
            goto branch_yes_1;
        }
        else
        {
            goto branch_no_1;
        }
        branch_yes_1:;
        {
            PyObject *tmp_called_instance_1;
            PyObject *tmp_source_name_2;
            PyObject *tmp_call_result_1;
            CHECK_OBJECT( par_self );
            tmp_source_name_2 = par_self;
            tmp_called_instance_1 = LOOKUP_ATTRIBUTE( tmp_source_name_2, const_str_plain_stdout );
            if ( tmp_called_instance_1 == NULL )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 824;
                type_description_1 = "oooo";
                goto frame_exception_exit_1;
            }
            frame_3af98ecbcd655216221180d14227e886->m_frame.f_lineno = 824;
            tmp_call_result_1 = CALL_METHOD_NO_ARGS( tmp_called_instance_1, const_str_plain_close );
            Py_DECREF( tmp_called_instance_1 );
            if ( tmp_call_result_1 == NULL )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 824;
                type_description_1 = "oooo";
                goto frame_exception_exit_1;
            }
            Py_DECREF( tmp_call_result_1 );
        }
        branch_no_1:;
    }
    {
        nuitka_bool tmp_condition_result_2;
        PyObject *tmp_source_name_3;
        PyObject *tmp_attribute_value_2;
        int tmp_truth_name_2;
        CHECK_OBJECT( par_self );
        tmp_source_name_3 = par_self;
        tmp_attribute_value_2 = LOOKUP_ATTRIBUTE( tmp_source_name_3, const_str_plain_stderr );
        if ( tmp_attribute_value_2 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 825;
            type_description_1 = "oooo";
            goto frame_exception_exit_1;
        }
        tmp_truth_name_2 = CHECK_IF_TRUE( tmp_attribute_value_2 );
        if ( tmp_truth_name_2 == -1 )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
            Py_DECREF( tmp_attribute_value_2 );

            exception_lineno = 825;
            type_description_1 = "oooo";
            goto frame_exception_exit_1;
        }
        tmp_condition_result_2 = tmp_truth_name_2 == 1 ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
        Py_DECREF( tmp_attribute_value_2 );
        if ( tmp_condition_result_2 == NUITKA_BOOL_TRUE )
        {
            goto branch_yes_2;
        }
        else
        {
            goto branch_no_2;
        }
        branch_yes_2:;
        {
            PyObject *tmp_called_instance_2;
            PyObject *tmp_source_name_4;
            PyObject *tmp_call_result_2;
            CHECK_OBJECT( par_self );
            tmp_source_name_4 = par_self;
            tmp_called_instance_2 = LOOKUP_ATTRIBUTE( tmp_source_name_4, const_str_plain_stderr );
            if ( tmp_called_instance_2 == NULL )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 826;
                type_description_1 = "oooo";
                goto frame_exception_exit_1;
            }
            frame_3af98ecbcd655216221180d14227e886->m_frame.f_lineno = 826;
            tmp_call_result_2 = CALL_METHOD_NO_ARGS( tmp_called_instance_2, const_str_plain_close );
            Py_DECREF( tmp_called_instance_2 );
            if ( tmp_call_result_2 == NULL )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 826;
                type_description_1 = "oooo";
                goto frame_exception_exit_1;
            }
            Py_DECREF( tmp_call_result_2 );
        }
        branch_no_2:;
    }
    // Tried code:
    {
        nuitka_bool tmp_condition_result_3;
        PyObject *tmp_source_name_5;
        PyObject *tmp_attribute_value_3;
        int tmp_truth_name_3;
        CHECK_OBJECT( par_self );
        tmp_source_name_5 = par_self;
        tmp_attribute_value_3 = LOOKUP_ATTRIBUTE( tmp_source_name_5, const_str_plain_stdin );
        if ( tmp_attribute_value_3 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 828;
            type_description_1 = "oooo";
            goto try_except_handler_2;
        }
        tmp_truth_name_3 = CHECK_IF_TRUE( tmp_attribute_value_3 );
        if ( tmp_truth_name_3 == -1 )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
            Py_DECREF( tmp_attribute_value_3 );

            exception_lineno = 828;
            type_description_1 = "oooo";
            goto try_except_handler_2;
        }
        tmp_condition_result_3 = tmp_truth_name_3 == 1 ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
        Py_DECREF( tmp_attribute_value_3 );
        if ( tmp_condition_result_3 == NUITKA_BOOL_TRUE )
        {
            goto branch_yes_3;
        }
        else
        {
            goto branch_no_3;
        }
        branch_yes_3:;
        {
            PyObject *tmp_called_instance_3;
            PyObject *tmp_source_name_6;
            PyObject *tmp_call_result_3;
            CHECK_OBJECT( par_self );
            tmp_source_name_6 = par_self;
            tmp_called_instance_3 = LOOKUP_ATTRIBUTE( tmp_source_name_6, const_str_plain_stdin );
            if ( tmp_called_instance_3 == NULL )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 829;
                type_description_1 = "oooo";
                goto try_except_handler_2;
            }
            frame_3af98ecbcd655216221180d14227e886->m_frame.f_lineno = 829;
            tmp_call_result_3 = CALL_METHOD_NO_ARGS( tmp_called_instance_3, const_str_plain_close );
            Py_DECREF( tmp_called_instance_3 );
            if ( tmp_call_result_3 == NULL )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 829;
                type_description_1 = "oooo";
                goto try_except_handler_2;
            }
            Py_DECREF( tmp_call_result_3 );
        }
        branch_no_3:;
    }
    goto try_end_1;
    // Exception handler code:
    try_except_handler_2:;
    exception_keeper_type_1 = exception_type;
    exception_keeper_value_1 = exception_value;
    exception_keeper_tb_1 = exception_tb;
    exception_keeper_lineno_1 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    // Preserve existing published exception.
    exception_preserved_type_2 = EXC_TYPE(PyThreadState_GET());
    Py_XINCREF( exception_preserved_type_2 );
    exception_preserved_value_2 = EXC_VALUE(PyThreadState_GET());
    Py_XINCREF( exception_preserved_value_2 );
    exception_preserved_tb_2 = (PyTracebackObject *)EXC_TRACEBACK(PyThreadState_GET());
    Py_XINCREF( exception_preserved_tb_2 );

    if ( exception_keeper_tb_1 == NULL )
    {
        exception_keeper_tb_1 = MAKE_TRACEBACK( frame_3af98ecbcd655216221180d14227e886, exception_keeper_lineno_1 );
    }
    else if ( exception_keeper_lineno_1 != 0 )
    {
        exception_keeper_tb_1 = ADD_TRACEBACK( exception_keeper_tb_1, frame_3af98ecbcd655216221180d14227e886, exception_keeper_lineno_1 );
    }

    NORMALIZE_EXCEPTION( &exception_keeper_type_1, &exception_keeper_value_1, &exception_keeper_tb_1 );
    PyException_SetTraceback( exception_keeper_value_1, (PyObject *)exception_keeper_tb_1 );
    PUBLISH_EXCEPTION( &exception_keeper_type_1, &exception_keeper_value_1, &exception_keeper_tb_1 );
    // Tried code:
    {
        nuitka_bool tmp_condition_result_4;
        PyObject *tmp_compexpr_left_1;
        PyObject *tmp_compexpr_right_1;
        CHECK_OBJECT( par_exc_type );
        tmp_compexpr_left_1 = par_exc_type;
        tmp_compexpr_right_1 = PyExc_KeyboardInterrupt;
        tmp_res = RICH_COMPARE_BOOL_EQ_OBJECT_OBJECT( tmp_compexpr_left_1, tmp_compexpr_right_1 );
        if ( tmp_res == -1 )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 831;
            type_description_1 = "oooo";
            goto try_except_handler_3;
        }
        tmp_condition_result_4 = ( tmp_res != 0 ) ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
        if ( tmp_condition_result_4 == NUITKA_BOOL_TRUE )
        {
            goto branch_yes_4;
        }
        else
        {
            goto branch_no_4;
        }
        branch_yes_4:;
        {
            nuitka_bool tmp_condition_result_5;
            PyObject *tmp_compexpr_left_2;
            PyObject *tmp_compexpr_right_2;
            PyObject *tmp_source_name_7;
            CHECK_OBJECT( par_self );
            tmp_source_name_7 = par_self;
            tmp_compexpr_left_2 = LOOKUP_ATTRIBUTE( tmp_source_name_7, const_str_plain__sigint_wait_secs );
            if ( tmp_compexpr_left_2 == NULL )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 839;
                type_description_1 = "oooo";
                goto try_except_handler_3;
            }
            tmp_compexpr_right_2 = const_int_0;
            tmp_res = RICH_COMPARE_BOOL_GT_OBJECT_OBJECT( tmp_compexpr_left_2, tmp_compexpr_right_2 );
            Py_DECREF( tmp_compexpr_left_2 );
            if ( tmp_res == -1 )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 839;
                type_description_1 = "oooo";
                goto try_except_handler_3;
            }
            tmp_condition_result_5 = ( tmp_res != 0 ) ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
            if ( tmp_condition_result_5 == NUITKA_BOOL_TRUE )
            {
                goto branch_yes_5;
            }
            else
            {
                goto branch_no_5;
            }
            branch_yes_5:;
            // Tried code:
            {
                PyObject *tmp_called_name_1;
                PyObject *tmp_source_name_8;
                PyObject *tmp_call_result_4;
                PyObject *tmp_kw_name_1;
                PyObject *tmp_dict_key_1;
                PyObject *tmp_dict_value_1;
                PyObject *tmp_source_name_9;
                CHECK_OBJECT( par_self );
                tmp_source_name_8 = par_self;
                tmp_called_name_1 = LOOKUP_ATTRIBUTE( tmp_source_name_8, const_str_plain__wait );
                if ( tmp_called_name_1 == NULL )
                {
                    assert( ERROR_OCCURRED() );

                    FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                    exception_lineno = 841;
                    type_description_1 = "oooo";
                    goto try_except_handler_4;
                }
                tmp_dict_key_1 = const_str_plain_timeout;
                CHECK_OBJECT( par_self );
                tmp_source_name_9 = par_self;
                tmp_dict_value_1 = LOOKUP_ATTRIBUTE( tmp_source_name_9, const_str_plain__sigint_wait_secs );
                if ( tmp_dict_value_1 == NULL )
                {
                    assert( ERROR_OCCURRED() );

                    FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
                    Py_DECREF( tmp_called_name_1 );

                    exception_lineno = 841;
                    type_description_1 = "oooo";
                    goto try_except_handler_4;
                }
                tmp_kw_name_1 = _PyDict_NewPresized( 1 );
                tmp_res = PyDict_SetItem( tmp_kw_name_1, tmp_dict_key_1, tmp_dict_value_1 );
                Py_DECREF( tmp_dict_value_1 );
                assert( !(tmp_res != 0) );
                frame_3af98ecbcd655216221180d14227e886->m_frame.f_lineno = 841;
                tmp_call_result_4 = CALL_FUNCTION_WITH_KEYARGS( tmp_called_name_1, tmp_kw_name_1 );
                Py_DECREF( tmp_called_name_1 );
                Py_DECREF( tmp_kw_name_1 );
                if ( tmp_call_result_4 == NULL )
                {
                    assert( ERROR_OCCURRED() );

                    FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                    exception_lineno = 841;
                    type_description_1 = "oooo";
                    goto try_except_handler_4;
                }
                Py_DECREF( tmp_call_result_4 );
            }
            goto try_end_2;
            // Exception handler code:
            try_except_handler_4:;
            exception_keeper_type_2 = exception_type;
            exception_keeper_value_2 = exception_value;
            exception_keeper_tb_2 = exception_tb;
            exception_keeper_lineno_2 = exception_lineno;
            exception_type = NULL;
            exception_value = NULL;
            exception_tb = NULL;
            exception_lineno = 0;

            // Preserve existing published exception.
            exception_preserved_type_1 = EXC_TYPE(PyThreadState_GET());
            Py_XINCREF( exception_preserved_type_1 );
            exception_preserved_value_1 = EXC_VALUE(PyThreadState_GET());
            Py_XINCREF( exception_preserved_value_1 );
            exception_preserved_tb_1 = (PyTracebackObject *)EXC_TRACEBACK(PyThreadState_GET());
            Py_XINCREF( exception_preserved_tb_1 );

            if ( exception_keeper_tb_2 == NULL )
            {
                exception_keeper_tb_2 = MAKE_TRACEBACK( frame_3af98ecbcd655216221180d14227e886, exception_keeper_lineno_2 );
            }
            else if ( exception_keeper_lineno_2 != 0 )
            {
                exception_keeper_tb_2 = ADD_TRACEBACK( exception_keeper_tb_2, frame_3af98ecbcd655216221180d14227e886, exception_keeper_lineno_2 );
            }

            NORMALIZE_EXCEPTION( &exception_keeper_type_2, &exception_keeper_value_2, &exception_keeper_tb_2 );
            PyException_SetTraceback( exception_keeper_value_2, (PyObject *)exception_keeper_tb_2 );
            PUBLISH_EXCEPTION( &exception_keeper_type_2, &exception_keeper_value_2, &exception_keeper_tb_2 );
            // Tried code:
            {
                nuitka_bool tmp_condition_result_6;
                PyObject *tmp_operand_name_1;
                PyObject *tmp_compexpr_left_3;
                PyObject *tmp_compexpr_right_3;
                PyObject *tmp_mvar_value_1;
                tmp_compexpr_left_3 = EXC_TYPE(PyThreadState_GET());
                tmp_mvar_value_1 = GET_STRING_DICT_VALUE( moduledict_subprocess, (Nuitka_StringObject *)const_str_plain_TimeoutExpired );

                if (unlikely( tmp_mvar_value_1 == NULL ))
                {
                    tmp_mvar_value_1 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_TimeoutExpired );
                }

                if ( tmp_mvar_value_1 == NULL )
                {

                    exception_type = PyExc_NameError;
                    Py_INCREF( exception_type );
                    exception_value = PyUnicode_FromFormat( "name '%s' is not defined", "TimeoutExpired" );
                    exception_tb = NULL;
                    NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
                    CHAIN_EXCEPTION( exception_value );

                    exception_lineno = 842;
                    type_description_1 = "oooo";
                    goto try_except_handler_5;
                }

                tmp_compexpr_right_3 = tmp_mvar_value_1;
                tmp_res = EXCEPTION_MATCH_BOOL( tmp_compexpr_left_3, tmp_compexpr_right_3 );
                if ( tmp_res == -1 )
                {
                    assert( ERROR_OCCURRED() );

                    FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                    exception_lineno = 842;
                    type_description_1 = "oooo";
                    goto try_except_handler_5;
                }
                tmp_operand_name_1 = ( tmp_res != 0 ) ? Py_True : Py_False;
                tmp_res = CHECK_IF_TRUE( tmp_operand_name_1 );
                if ( tmp_res == -1 )
                {
                    assert( ERROR_OCCURRED() );

                    FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                    exception_lineno = 842;
                    type_description_1 = "oooo";
                    goto try_except_handler_5;
                }
                tmp_condition_result_6 = ( tmp_res == 0 ) ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
                if ( tmp_condition_result_6 == NUITKA_BOOL_TRUE )
                {
                    goto branch_yes_6;
                }
                else
                {
                    goto branch_no_6;
                }
                branch_yes_6:;
                tmp_result = RERAISE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
                if (unlikely( tmp_result == false ))
                {
                    exception_lineno = 840;
                }

                if (exception_tb && exception_tb->tb_frame == &frame_3af98ecbcd655216221180d14227e886->m_frame) frame_3af98ecbcd655216221180d14227e886->m_frame.f_lineno = exception_tb->tb_lineno;
                type_description_1 = "oooo";
                goto try_except_handler_5;
                branch_no_6:;
            }
            goto try_end_3;
            // Exception handler code:
            try_except_handler_5:;
            exception_keeper_type_3 = exception_type;
            exception_keeper_value_3 = exception_value;
            exception_keeper_tb_3 = exception_tb;
            exception_keeper_lineno_3 = exception_lineno;
            exception_type = NULL;
            exception_value = NULL;
            exception_tb = NULL;
            exception_lineno = 0;

            // Restore previous exception.
            SET_CURRENT_EXCEPTION( exception_preserved_type_1, exception_preserved_value_1, exception_preserved_tb_1 );
            // Re-raise.
            exception_type = exception_keeper_type_3;
            exception_value = exception_keeper_value_3;
            exception_tb = exception_keeper_tb_3;
            exception_lineno = exception_keeper_lineno_3;

            goto try_except_handler_3;
            // End of try:
            try_end_3:;
            // Restore previous exception.
            SET_CURRENT_EXCEPTION( exception_preserved_type_1, exception_preserved_value_1, exception_preserved_tb_1 );
            goto try_end_2;
            // exception handler codes exits in all cases
            NUITKA_CANNOT_GET_HERE( subprocess$$$function_32___exit__ );
            return NULL;
            // End of try:
            try_end_2:;
            branch_no_5:;
        }
        {
            PyObject *tmp_assattr_name_1;
            PyObject *tmp_assattr_target_1;
            tmp_assattr_name_1 = const_int_0;
            CHECK_OBJECT( par_self );
            tmp_assattr_target_1 = par_self;
            tmp_result = SET_ATTRIBUTE( tmp_assattr_target_1, const_str_plain__sigint_wait_secs, tmp_assattr_name_1 );
            if ( tmp_result == false )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 844;
                type_description_1 = "oooo";
                goto try_except_handler_3;
            }
        }
        tmp_return_value = Py_None;
        Py_INCREF( tmp_return_value );
        goto try_return_handler_3;
        branch_no_4:;
    }
    {
        PyObject *tmp_called_instance_4;
        PyObject *tmp_call_result_5;
        CHECK_OBJECT( par_self );
        tmp_called_instance_4 = par_self;
        frame_3af98ecbcd655216221180d14227e886->m_frame.f_lineno = 848;
        tmp_call_result_5 = CALL_METHOD_NO_ARGS( tmp_called_instance_4, const_str_plain_wait );
        if ( tmp_call_result_5 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 848;
            type_description_1 = "oooo";
            goto try_except_handler_3;
        }
        Py_DECREF( tmp_call_result_5 );
    }
    tmp_result = RERAISE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
    if (unlikely( tmp_result == false ))
    {
        exception_lineno = 827;
    }

    if (exception_tb && exception_tb->tb_frame == &frame_3af98ecbcd655216221180d14227e886->m_frame) frame_3af98ecbcd655216221180d14227e886->m_frame.f_lineno = exception_tb->tb_lineno;
    type_description_1 = "oooo";
    goto try_except_handler_3;
    // tried codes exits in all cases
    NUITKA_CANNOT_GET_HERE( subprocess$$$function_32___exit__ );
    return NULL;
    // Return handler code:
    try_return_handler_3:;
    // Restore previous exception.
    SET_CURRENT_EXCEPTION( exception_preserved_type_2, exception_preserved_value_2, exception_preserved_tb_2 );
    goto frame_return_exit_1;
    // Exception handler code:
    try_except_handler_3:;
    exception_keeper_type_4 = exception_type;
    exception_keeper_value_4 = exception_value;
    exception_keeper_tb_4 = exception_tb;
    exception_keeper_lineno_4 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    // Restore previous exception.
    SET_CURRENT_EXCEPTION( exception_preserved_type_2, exception_preserved_value_2, exception_preserved_tb_2 );
    // Re-raise.
    exception_type = exception_keeper_type_4;
    exception_value = exception_keeper_value_4;
    exception_tb = exception_keeper_tb_4;
    exception_lineno = exception_keeper_lineno_4;

    goto frame_exception_exit_1;
    // End of try:
    // End of try:
    try_end_1:;
    {
        nuitka_bool tmp_condition_result_7;
        PyObject *tmp_compexpr_left_4;
        PyObject *tmp_compexpr_right_4;
        CHECK_OBJECT( par_exc_type );
        tmp_compexpr_left_4 = par_exc_type;
        tmp_compexpr_right_4 = PyExc_KeyboardInterrupt;
        tmp_res = RICH_COMPARE_BOOL_EQ_OBJECT_OBJECT( tmp_compexpr_left_4, tmp_compexpr_right_4 );
        if ( tmp_res == -1 )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 831;
            type_description_1 = "oooo";
            goto frame_exception_exit_1;
        }
        tmp_condition_result_7 = ( tmp_res != 0 ) ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
        if ( tmp_condition_result_7 == NUITKA_BOOL_TRUE )
        {
            goto branch_yes_7;
        }
        else
        {
            goto branch_no_7;
        }
        branch_yes_7:;
        {
            nuitka_bool tmp_condition_result_8;
            PyObject *tmp_compexpr_left_5;
            PyObject *tmp_compexpr_right_5;
            PyObject *tmp_source_name_10;
            CHECK_OBJECT( par_self );
            tmp_source_name_10 = par_self;
            tmp_compexpr_left_5 = LOOKUP_ATTRIBUTE( tmp_source_name_10, const_str_plain__sigint_wait_secs );
            if ( tmp_compexpr_left_5 == NULL )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 839;
                type_description_1 = "oooo";
                goto frame_exception_exit_1;
            }
            tmp_compexpr_right_5 = const_int_0;
            tmp_res = RICH_COMPARE_BOOL_GT_OBJECT_OBJECT( tmp_compexpr_left_5, tmp_compexpr_right_5 );
            Py_DECREF( tmp_compexpr_left_5 );
            if ( tmp_res == -1 )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 839;
                type_description_1 = "oooo";
                goto frame_exception_exit_1;
            }
            tmp_condition_result_8 = ( tmp_res != 0 ) ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
            if ( tmp_condition_result_8 == NUITKA_BOOL_TRUE )
            {
                goto branch_yes_8;
            }
            else
            {
                goto branch_no_8;
            }
            branch_yes_8:;
            // Tried code:
            {
                PyObject *tmp_called_name_2;
                PyObject *tmp_source_name_11;
                PyObject *tmp_call_result_6;
                PyObject *tmp_kw_name_2;
                PyObject *tmp_dict_key_2;
                PyObject *tmp_dict_value_2;
                PyObject *tmp_source_name_12;
                CHECK_OBJECT( par_self );
                tmp_source_name_11 = par_self;
                tmp_called_name_2 = LOOKUP_ATTRIBUTE( tmp_source_name_11, const_str_plain__wait );
                if ( tmp_called_name_2 == NULL )
                {
                    assert( ERROR_OCCURRED() );

                    FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                    exception_lineno = 841;
                    type_description_1 = "oooo";
                    goto try_except_handler_6;
                }
                tmp_dict_key_2 = const_str_plain_timeout;
                CHECK_OBJECT( par_self );
                tmp_source_name_12 = par_self;
                tmp_dict_value_2 = LOOKUP_ATTRIBUTE( tmp_source_name_12, const_str_plain__sigint_wait_secs );
                if ( tmp_dict_value_2 == NULL )
                {
                    assert( ERROR_OCCURRED() );

                    FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
                    Py_DECREF( tmp_called_name_2 );

                    exception_lineno = 841;
                    type_description_1 = "oooo";
                    goto try_except_handler_6;
                }
                tmp_kw_name_2 = _PyDict_NewPresized( 1 );
                tmp_res = PyDict_SetItem( tmp_kw_name_2, tmp_dict_key_2, tmp_dict_value_2 );
                Py_DECREF( tmp_dict_value_2 );
                assert( !(tmp_res != 0) );
                frame_3af98ecbcd655216221180d14227e886->m_frame.f_lineno = 841;
                tmp_call_result_6 = CALL_FUNCTION_WITH_KEYARGS( tmp_called_name_2, tmp_kw_name_2 );
                Py_DECREF( tmp_called_name_2 );
                Py_DECREF( tmp_kw_name_2 );
                if ( tmp_call_result_6 == NULL )
                {
                    assert( ERROR_OCCURRED() );

                    FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                    exception_lineno = 841;
                    type_description_1 = "oooo";
                    goto try_except_handler_6;
                }
                Py_DECREF( tmp_call_result_6 );
            }
            goto try_end_4;
            // Exception handler code:
            try_except_handler_6:;
            exception_keeper_type_5 = exception_type;
            exception_keeper_value_5 = exception_value;
            exception_keeper_tb_5 = exception_tb;
            exception_keeper_lineno_5 = exception_lineno;
            exception_type = NULL;
            exception_value = NULL;
            exception_tb = NULL;
            exception_lineno = 0;

            // Preserve existing published exception.
            exception_preserved_type_1 = EXC_TYPE(PyThreadState_GET());
            Py_XINCREF( exception_preserved_type_1 );
            exception_preserved_value_1 = EXC_VALUE(PyThreadState_GET());
            Py_XINCREF( exception_preserved_value_1 );
            exception_preserved_tb_1 = (PyTracebackObject *)EXC_TRACEBACK(PyThreadState_GET());
            Py_XINCREF( exception_preserved_tb_1 );

            if ( exception_keeper_tb_5 == NULL )
            {
                exception_keeper_tb_5 = MAKE_TRACEBACK( frame_3af98ecbcd655216221180d14227e886, exception_keeper_lineno_5 );
            }
            else if ( exception_keeper_lineno_5 != 0 )
            {
                exception_keeper_tb_5 = ADD_TRACEBACK( exception_keeper_tb_5, frame_3af98ecbcd655216221180d14227e886, exception_keeper_lineno_5 );
            }

            NORMALIZE_EXCEPTION( &exception_keeper_type_5, &exception_keeper_value_5, &exception_keeper_tb_5 );
            PyException_SetTraceback( exception_keeper_value_5, (PyObject *)exception_keeper_tb_5 );
            PUBLISH_EXCEPTION( &exception_keeper_type_5, &exception_keeper_value_5, &exception_keeper_tb_5 );
            // Tried code:
            {
                nuitka_bool tmp_condition_result_9;
                PyObject *tmp_operand_name_2;
                PyObject *tmp_compexpr_left_6;
                PyObject *tmp_compexpr_right_6;
                PyObject *tmp_mvar_value_2;
                tmp_compexpr_left_6 = EXC_TYPE(PyThreadState_GET());
                tmp_mvar_value_2 = GET_STRING_DICT_VALUE( moduledict_subprocess, (Nuitka_StringObject *)const_str_plain_TimeoutExpired );

                if (unlikely( tmp_mvar_value_2 == NULL ))
                {
                    tmp_mvar_value_2 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_TimeoutExpired );
                }

                if ( tmp_mvar_value_2 == NULL )
                {

                    exception_type = PyExc_NameError;
                    Py_INCREF( exception_type );
                    exception_value = PyUnicode_FromFormat( "name '%s' is not defined", "TimeoutExpired" );
                    exception_tb = NULL;
                    NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
                    CHAIN_EXCEPTION( exception_value );

                    exception_lineno = 842;
                    type_description_1 = "oooo";
                    goto try_except_handler_7;
                }

                tmp_compexpr_right_6 = tmp_mvar_value_2;
                tmp_res = EXCEPTION_MATCH_BOOL( tmp_compexpr_left_6, tmp_compexpr_right_6 );
                if ( tmp_res == -1 )
                {
                    assert( ERROR_OCCURRED() );

                    FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                    exception_lineno = 842;
                    type_description_1 = "oooo";
                    goto try_except_handler_7;
                }
                tmp_operand_name_2 = ( tmp_res != 0 ) ? Py_True : Py_False;
                tmp_res = CHECK_IF_TRUE( tmp_operand_name_2 );
                if ( tmp_res == -1 )
                {
                    assert( ERROR_OCCURRED() );

                    FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                    exception_lineno = 842;
                    type_description_1 = "oooo";
                    goto try_except_handler_7;
                }
                tmp_condition_result_9 = ( tmp_res == 0 ) ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
                if ( tmp_condition_result_9 == NUITKA_BOOL_TRUE )
                {
                    goto branch_yes_9;
                }
                else
                {
                    goto branch_no_9;
                }
                branch_yes_9:;
                tmp_result = RERAISE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
                if (unlikely( tmp_result == false ))
                {
                    exception_lineno = 840;
                }

                if (exception_tb && exception_tb->tb_frame == &frame_3af98ecbcd655216221180d14227e886->m_frame) frame_3af98ecbcd655216221180d14227e886->m_frame.f_lineno = exception_tb->tb_lineno;
                type_description_1 = "oooo";
                goto try_except_handler_7;
                branch_no_9:;
            }
            goto try_end_5;
            // Exception handler code:
            try_except_handler_7:;
            exception_keeper_type_6 = exception_type;
            exception_keeper_value_6 = exception_value;
            exception_keeper_tb_6 = exception_tb;
            exception_keeper_lineno_6 = exception_lineno;
            exception_type = NULL;
            exception_value = NULL;
            exception_tb = NULL;
            exception_lineno = 0;

            // Restore previous exception.
            SET_CURRENT_EXCEPTION( exception_preserved_type_1, exception_preserved_value_1, exception_preserved_tb_1 );
            // Re-raise.
            exception_type = exception_keeper_type_6;
            exception_value = exception_keeper_value_6;
            exception_tb = exception_keeper_tb_6;
            exception_lineno = exception_keeper_lineno_6;

            goto frame_exception_exit_1;
            // End of try:
            try_end_5:;
            // Restore previous exception.
            SET_CURRENT_EXCEPTION( exception_preserved_type_1, exception_preserved_value_1, exception_preserved_tb_1 );
            goto try_end_4;
            // exception handler codes exits in all cases
            NUITKA_CANNOT_GET_HERE( subprocess$$$function_32___exit__ );
            return NULL;
            // End of try:
            try_end_4:;
            branch_no_8:;
        }
        {
            PyObject *tmp_assattr_name_2;
            PyObject *tmp_assattr_target_2;
            tmp_assattr_name_2 = const_int_0;
            CHECK_OBJECT( par_self );
            tmp_assattr_target_2 = par_self;
            tmp_result = SET_ATTRIBUTE( tmp_assattr_target_2, const_str_plain__sigint_wait_secs, tmp_assattr_name_2 );
            if ( tmp_result == false )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 844;
                type_description_1 = "oooo";
                goto frame_exception_exit_1;
            }
        }
        tmp_return_value = Py_None;
        Py_INCREF( tmp_return_value );
        goto frame_return_exit_1;
        branch_no_7:;
    }
    {
        PyObject *tmp_called_instance_5;
        PyObject *tmp_call_result_7;
        CHECK_OBJECT( par_self );
        tmp_called_instance_5 = par_self;
        frame_3af98ecbcd655216221180d14227e886->m_frame.f_lineno = 848;
        tmp_call_result_7 = CALL_METHOD_NO_ARGS( tmp_called_instance_5, const_str_plain_wait );
        if ( tmp_call_result_7 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 848;
            type_description_1 = "oooo";
            goto frame_exception_exit_1;
        }
        Py_DECREF( tmp_call_result_7 );
    }

#if 0
    RESTORE_FRAME_EXCEPTION( frame_3af98ecbcd655216221180d14227e886 );
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto frame_no_exception_1;

    frame_return_exit_1:;
#if 0
    RESTORE_FRAME_EXCEPTION( frame_3af98ecbcd655216221180d14227e886 );
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto try_return_handler_1;

    frame_exception_exit_1:;

#if 0
    RESTORE_FRAME_EXCEPTION( frame_3af98ecbcd655216221180d14227e886 );
#endif

    if ( exception_tb == NULL )
    {
        exception_tb = MAKE_TRACEBACK( frame_3af98ecbcd655216221180d14227e886, exception_lineno );
    }
    else if ( exception_tb->tb_frame != &frame_3af98ecbcd655216221180d14227e886->m_frame )
    {
        exception_tb = ADD_TRACEBACK( exception_tb, frame_3af98ecbcd655216221180d14227e886, exception_lineno );
    }

    // Attachs locals to frame if any.
    Nuitka_Frame_AttachLocals(
        (struct Nuitka_FrameObject *)frame_3af98ecbcd655216221180d14227e886,
        type_description_1,
        par_self,
        par_exc_type,
        par_value,
        par_traceback
    );


    // Release cached frame.
    if ( frame_3af98ecbcd655216221180d14227e886 == cache_frame_3af98ecbcd655216221180d14227e886 )
    {
        Py_DECREF( frame_3af98ecbcd655216221180d14227e886 );
    }
    cache_frame_3af98ecbcd655216221180d14227e886 = NULL;

    assertFrameObject( frame_3af98ecbcd655216221180d14227e886 );

    // Put the previous frame back on top.
    popFrameStack();

    // Return the error.
    goto try_except_handler_1;

    frame_no_exception_1:;
    tmp_return_value = Py_None;
    Py_INCREF( tmp_return_value );
    goto try_return_handler_1;
    // tried codes exits in all cases
    NUITKA_CANNOT_GET_HERE( subprocess$$$function_32___exit__ );
    return NULL;
    // Return handler code:
    try_return_handler_1:;
    CHECK_OBJECT( (PyObject *)par_self );
    Py_DECREF( par_self );
    par_self = NULL;

    CHECK_OBJECT( (PyObject *)par_exc_type );
    Py_DECREF( par_exc_type );
    par_exc_type = NULL;

    CHECK_OBJECT( (PyObject *)par_value );
    Py_DECREF( par_value );
    par_value = NULL;

    CHECK_OBJECT( (PyObject *)par_traceback );
    Py_DECREF( par_traceback );
    par_traceback = NULL;

    goto function_return_exit;
    // Exception handler code:
    try_except_handler_1:;
    exception_keeper_type_7 = exception_type;
    exception_keeper_value_7 = exception_value;
    exception_keeper_tb_7 = exception_tb;
    exception_keeper_lineno_7 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    CHECK_OBJECT( (PyObject *)par_self );
    Py_DECREF( par_self );
    par_self = NULL;

    CHECK_OBJECT( (PyObject *)par_exc_type );
    Py_DECREF( par_exc_type );
    par_exc_type = NULL;

    CHECK_OBJECT( (PyObject *)par_value );
    Py_DECREF( par_value );
    par_value = NULL;

    CHECK_OBJECT( (PyObject *)par_traceback );
    Py_DECREF( par_traceback );
    par_traceback = NULL;

    // Re-raise.
    exception_type = exception_keeper_type_7;
    exception_value = exception_keeper_value_7;
    exception_tb = exception_keeper_tb_7;
    exception_lineno = exception_keeper_lineno_7;

    goto function_exception_exit;
    // End of try:

    // Return statement must have exited already.
    NUITKA_CANNOT_GET_HERE( subprocess$$$function_32___exit__ );
    return NULL;

function_exception_exit:
    assert( exception_type );
    RESTORE_ERROR_OCCURRED( exception_type, exception_value, exception_tb );

    return NULL;

function_return_exit:
   // Function cleanup code if any.


   // Actual function exit with return value, making sure we did not make
   // the error status worse despite non-NULL return.
   CHECK_OBJECT( tmp_return_value );
   assert( had_error || !ERROR_OCCURRED() );
   return tmp_return_value;
}


static PyObject *impl_subprocess$$$function_33___del__( struct Nuitka_FunctionObject const *self, PyObject **python_pars )
{
    // Preserve error status for checks
#ifndef __NUITKA_NO_ASSERT__
    NUITKA_MAY_BE_UNUSED bool had_error = ERROR_OCCURRED();
#endif

    // Local variable declarations.
    PyObject *par_self = python_pars[ 0 ];
    PyObject *par__maxsize = python_pars[ 1 ];
    PyObject *par__warn = python_pars[ 2 ];
    struct Nuitka_FrameObject *frame_1201f74c0ffd90a63b69d50f62ce3a39;
    NUITKA_MAY_BE_UNUSED char const *type_description_1 = NULL;
    PyObject *exception_type = NULL;
    PyObject *exception_value = NULL;
    PyTracebackObject *exception_tb = NULL;
    NUITKA_MAY_BE_UNUSED int exception_lineno = 0;
    int tmp_res;
    PyObject *tmp_return_value = NULL;
    static struct Nuitka_FrameObject *cache_frame_1201f74c0ffd90a63b69d50f62ce3a39 = NULL;
    PyObject *exception_keeper_type_1;
    PyObject *exception_keeper_value_1;
    PyTracebackObject *exception_keeper_tb_1;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_1;

    // Actual function body.
    // Tried code:
    MAKE_OR_REUSE_FRAME( cache_frame_1201f74c0ffd90a63b69d50f62ce3a39, codeobj_1201f74c0ffd90a63b69d50f62ce3a39, module_subprocess, sizeof(void *)+sizeof(void *)+sizeof(void *) );
    frame_1201f74c0ffd90a63b69d50f62ce3a39 = cache_frame_1201f74c0ffd90a63b69d50f62ce3a39;

    // Push the new frame as the currently active one.
    pushFrameStack( frame_1201f74c0ffd90a63b69d50f62ce3a39 );

    // Mark the frame object as in use, ref count 1 will be up for reuse.
    assert( Py_REFCNT( frame_1201f74c0ffd90a63b69d50f62ce3a39 ) == 2 ); // Frame stack

    // Framed code:
    {
        nuitka_bool tmp_condition_result_1;
        PyObject *tmp_operand_name_1;
        PyObject *tmp_source_name_1;
        CHECK_OBJECT( par_self );
        tmp_source_name_1 = par_self;
        tmp_operand_name_1 = LOOKUP_ATTRIBUTE( tmp_source_name_1, const_str_plain__child_created );
        if ( tmp_operand_name_1 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 851;
            type_description_1 = "ooo";
            goto frame_exception_exit_1;
        }
        tmp_res = CHECK_IF_TRUE( tmp_operand_name_1 );
        Py_DECREF( tmp_operand_name_1 );
        if ( tmp_res == -1 )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 851;
            type_description_1 = "ooo";
            goto frame_exception_exit_1;
        }
        tmp_condition_result_1 = ( tmp_res == 0 ) ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
        if ( tmp_condition_result_1 == NUITKA_BOOL_TRUE )
        {
            goto branch_yes_1;
        }
        else
        {
            goto branch_no_1;
        }
        branch_yes_1:;
        tmp_return_value = Py_None;
        Py_INCREF( tmp_return_value );
        goto frame_return_exit_1;
        branch_no_1:;
    }
    {
        nuitka_bool tmp_condition_result_2;
        PyObject *tmp_compexpr_left_1;
        PyObject *tmp_compexpr_right_1;
        PyObject *tmp_source_name_2;
        CHECK_OBJECT( par_self );
        tmp_source_name_2 = par_self;
        tmp_compexpr_left_1 = LOOKUP_ATTRIBUTE( tmp_source_name_2, const_str_plain_returncode );
        if ( tmp_compexpr_left_1 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 854;
            type_description_1 = "ooo";
            goto frame_exception_exit_1;
        }
        tmp_compexpr_right_1 = Py_None;
        tmp_condition_result_2 = ( tmp_compexpr_left_1 == tmp_compexpr_right_1 ) ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
        Py_DECREF( tmp_compexpr_left_1 );
        if ( tmp_condition_result_2 == NUITKA_BOOL_TRUE )
        {
            goto branch_yes_2;
        }
        else
        {
            goto branch_no_2;
        }
        branch_yes_2:;
        {
            PyObject *tmp_called_name_1;
            PyObject *tmp_call_result_1;
            PyObject *tmp_args_name_1;
            PyObject *tmp_tuple_element_1;
            PyObject *tmp_left_name_1;
            PyObject *tmp_right_name_1;
            PyObject *tmp_source_name_3;
            PyObject *tmp_mvar_value_1;
            PyObject *tmp_kw_name_1;
            PyObject *tmp_dict_key_1;
            PyObject *tmp_dict_value_1;
            CHECK_OBJECT( par__warn );
            tmp_called_name_1 = par__warn;
            tmp_left_name_1 = const_str_digest_166f9097b3e951eb97a38979661ad5f0;
            CHECK_OBJECT( par_self );
            tmp_source_name_3 = par_self;
            tmp_right_name_1 = LOOKUP_ATTRIBUTE( tmp_source_name_3, const_str_plain_pid );
            if ( tmp_right_name_1 == NULL )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 857;
                type_description_1 = "ooo";
                goto frame_exception_exit_1;
            }
            tmp_tuple_element_1 = BINARY_OPERATION_REMAINDER( tmp_left_name_1, tmp_right_name_1 );
            Py_DECREF( tmp_right_name_1 );
            if ( tmp_tuple_element_1 == NULL )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 857;
                type_description_1 = "ooo";
                goto frame_exception_exit_1;
            }
            tmp_args_name_1 = PyTuple_New( 2 );
            PyTuple_SET_ITEM( tmp_args_name_1, 0, tmp_tuple_element_1 );
            tmp_mvar_value_1 = GET_STRING_DICT_VALUE( moduledict_subprocess, (Nuitka_StringObject *)const_str_plain_ResourceWarning );

            if (unlikely( tmp_mvar_value_1 == NULL ))
            {
                tmp_mvar_value_1 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_ResourceWarning );
            }

            if ( tmp_mvar_value_1 == NULL )
            {
                Py_DECREF( tmp_args_name_1 );
                exception_type = PyExc_NameError;
                Py_INCREF( exception_type );
                exception_value = PyUnicode_FromFormat( "name '%s' is not defined", "ResourceWarning" );
                exception_tb = NULL;
                NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
                CHAIN_EXCEPTION( exception_value );

                exception_lineno = 858;
                type_description_1 = "ooo";
                goto frame_exception_exit_1;
            }

            tmp_tuple_element_1 = tmp_mvar_value_1;
            Py_INCREF( tmp_tuple_element_1 );
            PyTuple_SET_ITEM( tmp_args_name_1, 1, tmp_tuple_element_1 );
            tmp_dict_key_1 = const_str_plain_source;
            CHECK_OBJECT( par_self );
            tmp_dict_value_1 = par_self;
            tmp_kw_name_1 = _PyDict_NewPresized( 1 );
            tmp_res = PyDict_SetItem( tmp_kw_name_1, tmp_dict_key_1, tmp_dict_value_1 );
            assert( !(tmp_res != 0) );
            frame_1201f74c0ffd90a63b69d50f62ce3a39->m_frame.f_lineno = 857;
            tmp_call_result_1 = CALL_FUNCTION( tmp_called_name_1, tmp_args_name_1, tmp_kw_name_1 );
            Py_DECREF( tmp_args_name_1 );
            Py_DECREF( tmp_kw_name_1 );
            if ( tmp_call_result_1 == NULL )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 857;
                type_description_1 = "ooo";
                goto frame_exception_exit_1;
            }
            Py_DECREF( tmp_call_result_1 );
        }
        branch_no_2:;
    }
    {
        PyObject *tmp_called_name_2;
        PyObject *tmp_source_name_4;
        PyObject *tmp_call_result_2;
        PyObject *tmp_kw_name_2;
        PyObject *tmp_dict_key_2;
        PyObject *tmp_dict_value_2;
        CHECK_OBJECT( par_self );
        tmp_source_name_4 = par_self;
        tmp_called_name_2 = LOOKUP_ATTRIBUTE( tmp_source_name_4, const_str_plain__internal_poll );
        if ( tmp_called_name_2 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 860;
            type_description_1 = "ooo";
            goto frame_exception_exit_1;
        }
        tmp_dict_key_2 = const_str_plain__deadstate;
        CHECK_OBJECT( par__maxsize );
        tmp_dict_value_2 = par__maxsize;
        tmp_kw_name_2 = _PyDict_NewPresized( 1 );
        tmp_res = PyDict_SetItem( tmp_kw_name_2, tmp_dict_key_2, tmp_dict_value_2 );
        assert( !(tmp_res != 0) );
        frame_1201f74c0ffd90a63b69d50f62ce3a39->m_frame.f_lineno = 860;
        tmp_call_result_2 = CALL_FUNCTION_WITH_KEYARGS( tmp_called_name_2, tmp_kw_name_2 );
        Py_DECREF( tmp_called_name_2 );
        Py_DECREF( tmp_kw_name_2 );
        if ( tmp_call_result_2 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 860;
            type_description_1 = "ooo";
            goto frame_exception_exit_1;
        }
        Py_DECREF( tmp_call_result_2 );
    }
    {
        nuitka_bool tmp_condition_result_3;
        int tmp_and_left_truth_1;
        nuitka_bool tmp_and_left_value_1;
        nuitka_bool tmp_and_right_value_1;
        PyObject *tmp_compexpr_left_2;
        PyObject *tmp_compexpr_right_2;
        PyObject *tmp_source_name_5;
        PyObject *tmp_compexpr_left_3;
        PyObject *tmp_compexpr_right_3;
        PyObject *tmp_mvar_value_2;
        CHECK_OBJECT( par_self );
        tmp_source_name_5 = par_self;
        tmp_compexpr_left_2 = LOOKUP_ATTRIBUTE( tmp_source_name_5, const_str_plain_returncode );
        if ( tmp_compexpr_left_2 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 861;
            type_description_1 = "ooo";
            goto frame_exception_exit_1;
        }
        tmp_compexpr_right_2 = Py_None;
        tmp_and_left_value_1 = ( tmp_compexpr_left_2 == tmp_compexpr_right_2 ) ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
        Py_DECREF( tmp_compexpr_left_2 );
        tmp_and_left_truth_1 = tmp_and_left_value_1 == NUITKA_BOOL_TRUE ? 1 : 0;
        if ( tmp_and_left_truth_1 == 1 )
        {
            goto and_right_1;
        }
        else
        {
            goto and_left_1;
        }
        and_right_1:;
        tmp_mvar_value_2 = GET_STRING_DICT_VALUE( moduledict_subprocess, (Nuitka_StringObject *)const_str_plain__active );

        if (unlikely( tmp_mvar_value_2 == NULL ))
        {
            tmp_mvar_value_2 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain__active );
        }

        if ( tmp_mvar_value_2 == NULL )
        {

            exception_type = PyExc_NameError;
            Py_INCREF( exception_type );
            exception_value = PyUnicode_FromFormat( "name '%s' is not defined", "_active" );
            exception_tb = NULL;
            NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
            CHAIN_EXCEPTION( exception_value );

            exception_lineno = 861;
            type_description_1 = "ooo";
            goto frame_exception_exit_1;
        }

        tmp_compexpr_left_3 = tmp_mvar_value_2;
        tmp_compexpr_right_3 = Py_None;
        tmp_and_right_value_1 = ( tmp_compexpr_left_3 != tmp_compexpr_right_3 ) ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
        tmp_condition_result_3 = tmp_and_right_value_1;
        goto and_end_1;
        and_left_1:;
        tmp_condition_result_3 = tmp_and_left_value_1;
        and_end_1:;
        if ( tmp_condition_result_3 == NUITKA_BOOL_TRUE )
        {
            goto branch_yes_3;
        }
        else
        {
            goto branch_no_3;
        }
        branch_yes_3:;
        {
            PyObject *tmp_called_instance_1;
            PyObject *tmp_mvar_value_3;
            PyObject *tmp_call_result_3;
            PyObject *tmp_args_element_name_1;
            tmp_mvar_value_3 = GET_STRING_DICT_VALUE( moduledict_subprocess, (Nuitka_StringObject *)const_str_plain__active );

            if (unlikely( tmp_mvar_value_3 == NULL ))
            {
                tmp_mvar_value_3 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain__active );
            }

            if ( tmp_mvar_value_3 == NULL )
            {

                exception_type = PyExc_NameError;
                Py_INCREF( exception_type );
                exception_value = PyUnicode_FromFormat( "name '%s' is not defined", "_active" );
                exception_tb = NULL;
                NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
                CHAIN_EXCEPTION( exception_value );

                exception_lineno = 863;
                type_description_1 = "ooo";
                goto frame_exception_exit_1;
            }

            tmp_called_instance_1 = tmp_mvar_value_3;
            CHECK_OBJECT( par_self );
            tmp_args_element_name_1 = par_self;
            frame_1201f74c0ffd90a63b69d50f62ce3a39->m_frame.f_lineno = 863;
            {
                PyObject *call_args[] = { tmp_args_element_name_1 };
                tmp_call_result_3 = CALL_METHOD_WITH_ARGS1( tmp_called_instance_1, const_str_plain_append, call_args );
            }

            if ( tmp_call_result_3 == NULL )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 863;
                type_description_1 = "ooo";
                goto frame_exception_exit_1;
            }
            Py_DECREF( tmp_call_result_3 );
        }
        branch_no_3:;
    }

#if 0
    RESTORE_FRAME_EXCEPTION( frame_1201f74c0ffd90a63b69d50f62ce3a39 );
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto frame_no_exception_1;

    frame_return_exit_1:;
#if 0
    RESTORE_FRAME_EXCEPTION( frame_1201f74c0ffd90a63b69d50f62ce3a39 );
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto try_return_handler_1;

    frame_exception_exit_1:;

#if 0
    RESTORE_FRAME_EXCEPTION( frame_1201f74c0ffd90a63b69d50f62ce3a39 );
#endif

    if ( exception_tb == NULL )
    {
        exception_tb = MAKE_TRACEBACK( frame_1201f74c0ffd90a63b69d50f62ce3a39, exception_lineno );
    }
    else if ( exception_tb->tb_frame != &frame_1201f74c0ffd90a63b69d50f62ce3a39->m_frame )
    {
        exception_tb = ADD_TRACEBACK( exception_tb, frame_1201f74c0ffd90a63b69d50f62ce3a39, exception_lineno );
    }

    // Attachs locals to frame if any.
    Nuitka_Frame_AttachLocals(
        (struct Nuitka_FrameObject *)frame_1201f74c0ffd90a63b69d50f62ce3a39,
        type_description_1,
        par_self,
        par__maxsize,
        par__warn
    );


    // Release cached frame.
    if ( frame_1201f74c0ffd90a63b69d50f62ce3a39 == cache_frame_1201f74c0ffd90a63b69d50f62ce3a39 )
    {
        Py_DECREF( frame_1201f74c0ffd90a63b69d50f62ce3a39 );
    }
    cache_frame_1201f74c0ffd90a63b69d50f62ce3a39 = NULL;

    assertFrameObject( frame_1201f74c0ffd90a63b69d50f62ce3a39 );

    // Put the previous frame back on top.
    popFrameStack();

    // Return the error.
    goto try_except_handler_1;

    frame_no_exception_1:;
    tmp_return_value = Py_None;
    Py_INCREF( tmp_return_value );
    goto try_return_handler_1;
    // tried codes exits in all cases
    NUITKA_CANNOT_GET_HERE( subprocess$$$function_33___del__ );
    return NULL;
    // Return handler code:
    try_return_handler_1:;
    CHECK_OBJECT( (PyObject *)par_self );
    Py_DECREF( par_self );
    par_self = NULL;

    CHECK_OBJECT( (PyObject *)par__maxsize );
    Py_DECREF( par__maxsize );
    par__maxsize = NULL;

    CHECK_OBJECT( (PyObject *)par__warn );
    Py_DECREF( par__warn );
    par__warn = NULL;

    goto function_return_exit;
    // Exception handler code:
    try_except_handler_1:;
    exception_keeper_type_1 = exception_type;
    exception_keeper_value_1 = exception_value;
    exception_keeper_tb_1 = exception_tb;
    exception_keeper_lineno_1 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    CHECK_OBJECT( (PyObject *)par_self );
    Py_DECREF( par_self );
    par_self = NULL;

    CHECK_OBJECT( (PyObject *)par__maxsize );
    Py_DECREF( par__maxsize );
    par__maxsize = NULL;

    CHECK_OBJECT( (PyObject *)par__warn );
    Py_DECREF( par__warn );
    par__warn = NULL;

    // Re-raise.
    exception_type = exception_keeper_type_1;
    exception_value = exception_keeper_value_1;
    exception_tb = exception_keeper_tb_1;
    exception_lineno = exception_keeper_lineno_1;

    goto function_exception_exit;
    // End of try:

    // Return statement must have exited already.
    NUITKA_CANNOT_GET_HERE( subprocess$$$function_33___del__ );
    return NULL;

function_exception_exit:
    assert( exception_type );
    RESTORE_ERROR_OCCURRED( exception_type, exception_value, exception_tb );

    return NULL;

function_return_exit:
   // Function cleanup code if any.


   // Actual function exit with return value, making sure we did not make
   // the error status worse despite non-NULL return.
   CHECK_OBJECT( tmp_return_value );
   assert( had_error || !ERROR_OCCURRED() );
   return tmp_return_value;
}


static PyObject *impl_subprocess$$$function_34__get_devnull( struct Nuitka_FunctionObject const *self, PyObject **python_pars )
{
    // Preserve error status for checks
#ifndef __NUITKA_NO_ASSERT__
    NUITKA_MAY_BE_UNUSED bool had_error = ERROR_OCCURRED();
#endif

    // Local variable declarations.
    PyObject *par_self = python_pars[ 0 ];
    struct Nuitka_FrameObject *frame_f237254193b28e16736fc7794a633862;
    NUITKA_MAY_BE_UNUSED char const *type_description_1 = NULL;
    int tmp_res;
    PyObject *exception_type = NULL;
    PyObject *exception_value = NULL;
    PyTracebackObject *exception_tb = NULL;
    NUITKA_MAY_BE_UNUSED int exception_lineno = 0;
    bool tmp_result;
    PyObject *tmp_return_value = NULL;
    static struct Nuitka_FrameObject *cache_frame_f237254193b28e16736fc7794a633862 = NULL;
    PyObject *exception_keeper_type_1;
    PyObject *exception_keeper_value_1;
    PyTracebackObject *exception_keeper_tb_1;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_1;

    // Actual function body.
    // Tried code:
    MAKE_OR_REUSE_FRAME( cache_frame_f237254193b28e16736fc7794a633862, codeobj_f237254193b28e16736fc7794a633862, module_subprocess, sizeof(void *) );
    frame_f237254193b28e16736fc7794a633862 = cache_frame_f237254193b28e16736fc7794a633862;

    // Push the new frame as the currently active one.
    pushFrameStack( frame_f237254193b28e16736fc7794a633862 );

    // Mark the frame object as in use, ref count 1 will be up for reuse.
    assert( Py_REFCNT( frame_f237254193b28e16736fc7794a633862 ) == 2 ); // Frame stack

    // Framed code:
    {
        nuitka_bool tmp_condition_result_1;
        PyObject *tmp_operand_name_1;
        PyObject *tmp_source_name_1;
        PyObject *tmp_attribute_name_1;
        CHECK_OBJECT( par_self );
        tmp_source_name_1 = par_self;
        tmp_attribute_name_1 = const_str_plain__devnull;
        tmp_res = BUILTIN_HASATTR_BOOL( tmp_source_name_1, tmp_attribute_name_1 );
        if ( tmp_res == -1 )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 866;
            type_description_1 = "o";
            goto frame_exception_exit_1;
        }
        tmp_operand_name_1 = ( tmp_res != 0 ) ? Py_True : Py_False;
        tmp_res = CHECK_IF_TRUE( tmp_operand_name_1 );
        if ( tmp_res == -1 )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 866;
            type_description_1 = "o";
            goto frame_exception_exit_1;
        }
        tmp_condition_result_1 = ( tmp_res == 0 ) ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
        if ( tmp_condition_result_1 == NUITKA_BOOL_TRUE )
        {
            goto branch_yes_1;
        }
        else
        {
            goto branch_no_1;
        }
        branch_yes_1:;
        {
            PyObject *tmp_assattr_name_1;
            PyObject *tmp_called_name_1;
            PyObject *tmp_source_name_2;
            PyObject *tmp_mvar_value_1;
            PyObject *tmp_args_element_name_1;
            PyObject *tmp_source_name_3;
            PyObject *tmp_mvar_value_2;
            PyObject *tmp_args_element_name_2;
            PyObject *tmp_source_name_4;
            PyObject *tmp_mvar_value_3;
            PyObject *tmp_assattr_target_1;
            tmp_mvar_value_1 = GET_STRING_DICT_VALUE( moduledict_subprocess, (Nuitka_StringObject *)const_str_plain_os );

            if (unlikely( tmp_mvar_value_1 == NULL ))
            {
                tmp_mvar_value_1 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_os );
            }

            if ( tmp_mvar_value_1 == NULL )
            {

                exception_type = PyExc_NameError;
                Py_INCREF( exception_type );
                exception_value = PyUnicode_FromFormat( "name '%s' is not defined", "os" );
                exception_tb = NULL;
                NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
                CHAIN_EXCEPTION( exception_value );

                exception_lineno = 867;
                type_description_1 = "o";
                goto frame_exception_exit_1;
            }

            tmp_source_name_2 = tmp_mvar_value_1;
            tmp_called_name_1 = LOOKUP_ATTRIBUTE( tmp_source_name_2, const_str_plain_open );
            if ( tmp_called_name_1 == NULL )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 867;
                type_description_1 = "o";
                goto frame_exception_exit_1;
            }
            tmp_mvar_value_2 = GET_STRING_DICT_VALUE( moduledict_subprocess, (Nuitka_StringObject *)const_str_plain_os );

            if (unlikely( tmp_mvar_value_2 == NULL ))
            {
                tmp_mvar_value_2 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_os );
            }

            if ( tmp_mvar_value_2 == NULL )
            {
                Py_DECREF( tmp_called_name_1 );
                exception_type = PyExc_NameError;
                Py_INCREF( exception_type );
                exception_value = PyUnicode_FromFormat( "name '%s' is not defined", "os" );
                exception_tb = NULL;
                NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
                CHAIN_EXCEPTION( exception_value );

                exception_lineno = 867;
                type_description_1 = "o";
                goto frame_exception_exit_1;
            }

            tmp_source_name_3 = tmp_mvar_value_2;
            tmp_args_element_name_1 = LOOKUP_ATTRIBUTE( tmp_source_name_3, const_str_plain_devnull );
            if ( tmp_args_element_name_1 == NULL )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
                Py_DECREF( tmp_called_name_1 );

                exception_lineno = 867;
                type_description_1 = "o";
                goto frame_exception_exit_1;
            }
            tmp_mvar_value_3 = GET_STRING_DICT_VALUE( moduledict_subprocess, (Nuitka_StringObject *)const_str_plain_os );

            if (unlikely( tmp_mvar_value_3 == NULL ))
            {
                tmp_mvar_value_3 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_os );
            }

            if ( tmp_mvar_value_3 == NULL )
            {
                Py_DECREF( tmp_called_name_1 );
                Py_DECREF( tmp_args_element_name_1 );
                exception_type = PyExc_NameError;
                Py_INCREF( exception_type );
                exception_value = PyUnicode_FromFormat( "name '%s' is not defined", "os" );
                exception_tb = NULL;
                NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
                CHAIN_EXCEPTION( exception_value );

                exception_lineno = 867;
                type_description_1 = "o";
                goto frame_exception_exit_1;
            }

            tmp_source_name_4 = tmp_mvar_value_3;
            tmp_args_element_name_2 = LOOKUP_ATTRIBUTE( tmp_source_name_4, const_str_plain_O_RDWR );
            if ( tmp_args_element_name_2 == NULL )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
                Py_DECREF( tmp_called_name_1 );
                Py_DECREF( tmp_args_element_name_1 );

                exception_lineno = 867;
                type_description_1 = "o";
                goto frame_exception_exit_1;
            }
            frame_f237254193b28e16736fc7794a633862->m_frame.f_lineno = 867;
            {
                PyObject *call_args[] = { tmp_args_element_name_1, tmp_args_element_name_2 };
                tmp_assattr_name_1 = CALL_FUNCTION_WITH_ARGS2( tmp_called_name_1, call_args );
            }

            Py_DECREF( tmp_called_name_1 );
            Py_DECREF( tmp_args_element_name_1 );
            Py_DECREF( tmp_args_element_name_2 );
            if ( tmp_assattr_name_1 == NULL )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 867;
                type_description_1 = "o";
                goto frame_exception_exit_1;
            }
            CHECK_OBJECT( par_self );
            tmp_assattr_target_1 = par_self;
            tmp_result = SET_ATTRIBUTE( tmp_assattr_target_1, const_str_plain__devnull, tmp_assattr_name_1 );
            Py_DECREF( tmp_assattr_name_1 );
            if ( tmp_result == false )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 867;
                type_description_1 = "o";
                goto frame_exception_exit_1;
            }
        }
        branch_no_1:;
    }
    {
        PyObject *tmp_source_name_5;
        CHECK_OBJECT( par_self );
        tmp_source_name_5 = par_self;
        tmp_return_value = LOOKUP_ATTRIBUTE( tmp_source_name_5, const_str_plain__devnull );
        if ( tmp_return_value == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 868;
            type_description_1 = "o";
            goto frame_exception_exit_1;
        }
        goto frame_return_exit_1;
    }

#if 0
    RESTORE_FRAME_EXCEPTION( frame_f237254193b28e16736fc7794a633862 );
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto frame_no_exception_1;

    frame_return_exit_1:;
#if 0
    RESTORE_FRAME_EXCEPTION( frame_f237254193b28e16736fc7794a633862 );
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto try_return_handler_1;

    frame_exception_exit_1:;

#if 0
    RESTORE_FRAME_EXCEPTION( frame_f237254193b28e16736fc7794a633862 );
#endif

    if ( exception_tb == NULL )
    {
        exception_tb = MAKE_TRACEBACK( frame_f237254193b28e16736fc7794a633862, exception_lineno );
    }
    else if ( exception_tb->tb_frame != &frame_f237254193b28e16736fc7794a633862->m_frame )
    {
        exception_tb = ADD_TRACEBACK( exception_tb, frame_f237254193b28e16736fc7794a633862, exception_lineno );
    }

    // Attachs locals to frame if any.
    Nuitka_Frame_AttachLocals(
        (struct Nuitka_FrameObject *)frame_f237254193b28e16736fc7794a633862,
        type_description_1,
        par_self
    );


    // Release cached frame.
    if ( frame_f237254193b28e16736fc7794a633862 == cache_frame_f237254193b28e16736fc7794a633862 )
    {
        Py_DECREF( frame_f237254193b28e16736fc7794a633862 );
    }
    cache_frame_f237254193b28e16736fc7794a633862 = NULL;

    assertFrameObject( frame_f237254193b28e16736fc7794a633862 );

    // Put the previous frame back on top.
    popFrameStack();

    // Return the error.
    goto try_except_handler_1;

    frame_no_exception_1:;
    // tried codes exits in all cases
    NUITKA_CANNOT_GET_HERE( subprocess$$$function_34__get_devnull );
    return NULL;
    // Return handler code:
    try_return_handler_1:;
    CHECK_OBJECT( (PyObject *)par_self );
    Py_DECREF( par_self );
    par_self = NULL;

    goto function_return_exit;
    // Exception handler code:
    try_except_handler_1:;
    exception_keeper_type_1 = exception_type;
    exception_keeper_value_1 = exception_value;
    exception_keeper_tb_1 = exception_tb;
    exception_keeper_lineno_1 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    CHECK_OBJECT( (PyObject *)par_self );
    Py_DECREF( par_self );
    par_self = NULL;

    // Re-raise.
    exception_type = exception_keeper_type_1;
    exception_value = exception_keeper_value_1;
    exception_tb = exception_keeper_tb_1;
    exception_lineno = exception_keeper_lineno_1;

    goto function_exception_exit;
    // End of try:

    // Return statement must have exited already.
    NUITKA_CANNOT_GET_HERE( subprocess$$$function_34__get_devnull );
    return NULL;

function_exception_exit:
    assert( exception_type );
    RESTORE_ERROR_OCCURRED( exception_type, exception_value, exception_tb );

    return NULL;

function_return_exit:
   // Function cleanup code if any.


   // Actual function exit with return value, making sure we did not make
   // the error status worse despite non-NULL return.
   CHECK_OBJECT( tmp_return_value );
   assert( had_error || !ERROR_OCCURRED() );
   return tmp_return_value;
}


static PyObject *impl_subprocess$$$function_35__stdin_write( struct Nuitka_FunctionObject const *self, PyObject **python_pars )
{
    // Preserve error status for checks
#ifndef __NUITKA_NO_ASSERT__
    NUITKA_MAY_BE_UNUSED bool had_error = ERROR_OCCURRED();
#endif

    // Local variable declarations.
    PyObject *par_self = python_pars[ 0 ];
    PyObject *par_input = python_pars[ 1 ];
    PyObject *var_exc = NULL;
    struct Nuitka_FrameObject *frame_6878daaf3da84a8cdb9f86ec178c7a88;
    NUITKA_MAY_BE_UNUSED char const *type_description_1 = NULL;
    PyObject *exception_type = NULL;
    PyObject *exception_value = NULL;
    PyTracebackObject *exception_tb = NULL;
    NUITKA_MAY_BE_UNUSED int exception_lineno = 0;
    PyObject *exception_keeper_type_1;
    PyObject *exception_keeper_value_1;
    PyTracebackObject *exception_keeper_tb_1;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_1;
    PyObject *exception_preserved_type_1;
    PyObject *exception_preserved_value_1;
    PyTracebackObject *exception_preserved_tb_1;
    int tmp_res;
    bool tmp_result;
    PyObject *exception_keeper_type_2;
    PyObject *exception_keeper_value_2;
    PyTracebackObject *exception_keeper_tb_2;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_2;
    PyObject *exception_keeper_type_3;
    PyObject *exception_keeper_value_3;
    PyTracebackObject *exception_keeper_tb_3;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_3;
    PyObject *exception_keeper_type_4;
    PyObject *exception_keeper_value_4;
    PyTracebackObject *exception_keeper_tb_4;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_4;
    PyObject *exception_preserved_type_2;
    PyObject *exception_preserved_value_2;
    PyTracebackObject *exception_preserved_tb_2;
    PyObject *exception_keeper_type_5;
    PyObject *exception_keeper_value_5;
    PyTracebackObject *exception_keeper_tb_5;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_5;
    PyObject *exception_keeper_type_6;
    PyObject *exception_keeper_value_6;
    PyTracebackObject *exception_keeper_tb_6;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_6;
    static struct Nuitka_FrameObject *cache_frame_6878daaf3da84a8cdb9f86ec178c7a88 = NULL;
    PyObject *tmp_return_value = NULL;
    PyObject *exception_keeper_type_7;
    PyObject *exception_keeper_value_7;
    PyTracebackObject *exception_keeper_tb_7;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_7;

    // Actual function body.
    // Tried code:
    MAKE_OR_REUSE_FRAME( cache_frame_6878daaf3da84a8cdb9f86ec178c7a88, codeobj_6878daaf3da84a8cdb9f86ec178c7a88, module_subprocess, sizeof(void *)+sizeof(void *)+sizeof(void *) );
    frame_6878daaf3da84a8cdb9f86ec178c7a88 = cache_frame_6878daaf3da84a8cdb9f86ec178c7a88;

    // Push the new frame as the currently active one.
    pushFrameStack( frame_6878daaf3da84a8cdb9f86ec178c7a88 );

    // Mark the frame object as in use, ref count 1 will be up for reuse.
    assert( Py_REFCNT( frame_6878daaf3da84a8cdb9f86ec178c7a88 ) == 2 ); // Frame stack

    // Framed code:
    {
        nuitka_bool tmp_condition_result_1;
        int tmp_truth_name_1;
        CHECK_OBJECT( par_input );
        tmp_truth_name_1 = CHECK_IF_TRUE( par_input );
        if ( tmp_truth_name_1 == -1 )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 871;
            type_description_1 = "ooo";
            goto frame_exception_exit_1;
        }
        tmp_condition_result_1 = tmp_truth_name_1 == 1 ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
        if ( tmp_condition_result_1 == NUITKA_BOOL_TRUE )
        {
            goto branch_yes_1;
        }
        else
        {
            goto branch_no_1;
        }
        branch_yes_1:;
        // Tried code:
        {
            PyObject *tmp_called_instance_1;
            PyObject *tmp_source_name_1;
            PyObject *tmp_call_result_1;
            PyObject *tmp_args_element_name_1;
            CHECK_OBJECT( par_self );
            tmp_source_name_1 = par_self;
            tmp_called_instance_1 = LOOKUP_ATTRIBUTE( tmp_source_name_1, const_str_plain_stdin );
            if ( tmp_called_instance_1 == NULL )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 873;
                type_description_1 = "ooo";
                goto try_except_handler_2;
            }
            CHECK_OBJECT( par_input );
            tmp_args_element_name_1 = par_input;
            frame_6878daaf3da84a8cdb9f86ec178c7a88->m_frame.f_lineno = 873;
            {
                PyObject *call_args[] = { tmp_args_element_name_1 };
                tmp_call_result_1 = CALL_METHOD_WITH_ARGS1( tmp_called_instance_1, const_str_plain_write, call_args );
            }

            Py_DECREF( tmp_called_instance_1 );
            if ( tmp_call_result_1 == NULL )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 873;
                type_description_1 = "ooo";
                goto try_except_handler_2;
            }
            Py_DECREF( tmp_call_result_1 );
        }
        goto try_end_1;
        // Exception handler code:
        try_except_handler_2:;
        exception_keeper_type_1 = exception_type;
        exception_keeper_value_1 = exception_value;
        exception_keeper_tb_1 = exception_tb;
        exception_keeper_lineno_1 = exception_lineno;
        exception_type = NULL;
        exception_value = NULL;
        exception_tb = NULL;
        exception_lineno = 0;

        // Preserve existing published exception.
        exception_preserved_type_1 = EXC_TYPE(PyThreadState_GET());
        Py_XINCREF( exception_preserved_type_1 );
        exception_preserved_value_1 = EXC_VALUE(PyThreadState_GET());
        Py_XINCREF( exception_preserved_value_1 );
        exception_preserved_tb_1 = (PyTracebackObject *)EXC_TRACEBACK(PyThreadState_GET());
        Py_XINCREF( exception_preserved_tb_1 );

        if ( exception_keeper_tb_1 == NULL )
        {
            exception_keeper_tb_1 = MAKE_TRACEBACK( frame_6878daaf3da84a8cdb9f86ec178c7a88, exception_keeper_lineno_1 );
        }
        else if ( exception_keeper_lineno_1 != 0 )
        {
            exception_keeper_tb_1 = ADD_TRACEBACK( exception_keeper_tb_1, frame_6878daaf3da84a8cdb9f86ec178c7a88, exception_keeper_lineno_1 );
        }

        NORMALIZE_EXCEPTION( &exception_keeper_type_1, &exception_keeper_value_1, &exception_keeper_tb_1 );
        PyException_SetTraceback( exception_keeper_value_1, (PyObject *)exception_keeper_tb_1 );
        PUBLISH_EXCEPTION( &exception_keeper_type_1, &exception_keeper_value_1, &exception_keeper_tb_1 );
        // Tried code:
        {
            nuitka_bool tmp_condition_result_2;
            PyObject *tmp_operand_name_1;
            PyObject *tmp_compexpr_left_1;
            PyObject *tmp_compexpr_right_1;
            tmp_compexpr_left_1 = EXC_TYPE(PyThreadState_GET());
            tmp_compexpr_right_1 = PyExc_BrokenPipeError;
            tmp_res = EXCEPTION_MATCH_BOOL( tmp_compexpr_left_1, tmp_compexpr_right_1 );
            if ( tmp_res == -1 )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 874;
                type_description_1 = "ooo";
                goto try_except_handler_3;
            }
            tmp_operand_name_1 = ( tmp_res != 0 ) ? Py_True : Py_False;
            tmp_res = CHECK_IF_TRUE( tmp_operand_name_1 );
            if ( tmp_res == -1 )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 874;
                type_description_1 = "ooo";
                goto try_except_handler_3;
            }
            tmp_condition_result_2 = ( tmp_res == 0 ) ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
            if ( tmp_condition_result_2 == NUITKA_BOOL_TRUE )
            {
                goto branch_yes_2;
            }
            else
            {
                goto branch_no_2;
            }
            branch_yes_2:;
            {
                nuitka_bool tmp_condition_result_3;
                PyObject *tmp_compexpr_left_2;
                PyObject *tmp_compexpr_right_2;
                tmp_compexpr_left_2 = EXC_TYPE(PyThreadState_GET());
                tmp_compexpr_right_2 = PyExc_OSError;
                tmp_res = EXCEPTION_MATCH_BOOL( tmp_compexpr_left_2, tmp_compexpr_right_2 );
                if ( tmp_res == -1 )
                {
                    assert( ERROR_OCCURRED() );

                    FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                    exception_lineno = 876;
                    type_description_1 = "ooo";
                    goto try_except_handler_3;
                }
                tmp_condition_result_3 = ( tmp_res != 0 ) ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
                if ( tmp_condition_result_3 == NUITKA_BOOL_TRUE )
                {
                    goto branch_yes_3;
                }
                else
                {
                    goto branch_no_3;
                }
                branch_yes_3:;
                {
                    PyObject *tmp_assign_source_1;
                    tmp_assign_source_1 = EXC_VALUE(PyThreadState_GET());
                    assert( var_exc == NULL );
                    Py_INCREF( tmp_assign_source_1 );
                    var_exc = tmp_assign_source_1;
                }
                // Tried code:
                {
                    nuitka_bool tmp_condition_result_4;
                    PyObject *tmp_operand_name_2;
                    PyObject *tmp_compexpr_left_3;
                    PyObject *tmp_compexpr_right_3;
                    PyObject *tmp_source_name_2;
                    PyObject *tmp_source_name_3;
                    PyObject *tmp_mvar_value_1;
                    CHECK_OBJECT( var_exc );
                    tmp_source_name_2 = var_exc;
                    tmp_compexpr_left_3 = LOOKUP_ATTRIBUTE( tmp_source_name_2, const_str_plain_errno );
                    if ( tmp_compexpr_left_3 == NULL )
                    {
                        assert( ERROR_OCCURRED() );

                        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                        exception_lineno = 877;
                        type_description_1 = "ooo";
                        goto try_except_handler_4;
                    }
                    tmp_mvar_value_1 = GET_STRING_DICT_VALUE( moduledict_subprocess, (Nuitka_StringObject *)const_str_plain_errno );

                    if (unlikely( tmp_mvar_value_1 == NULL ))
                    {
                        tmp_mvar_value_1 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_errno );
                    }

                    if ( tmp_mvar_value_1 == NULL )
                    {
                        Py_DECREF( tmp_compexpr_left_3 );
                        exception_type = PyExc_NameError;
                        Py_INCREF( exception_type );
                        exception_value = PyUnicode_FromFormat( "name '%s' is not defined", "errno" );
                        exception_tb = NULL;
                        NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
                        CHAIN_EXCEPTION( exception_value );

                        exception_lineno = 877;
                        type_description_1 = "ooo";
                        goto try_except_handler_4;
                    }

                    tmp_source_name_3 = tmp_mvar_value_1;
                    tmp_compexpr_right_3 = LOOKUP_ATTRIBUTE( tmp_source_name_3, const_str_plain_EINVAL );
                    if ( tmp_compexpr_right_3 == NULL )
                    {
                        assert( ERROR_OCCURRED() );

                        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
                        Py_DECREF( tmp_compexpr_left_3 );

                        exception_lineno = 877;
                        type_description_1 = "ooo";
                        goto try_except_handler_4;
                    }
                    tmp_operand_name_2 = RICH_COMPARE_EQ_OBJECT_OBJECT( tmp_compexpr_left_3, tmp_compexpr_right_3 );
                    Py_DECREF( tmp_compexpr_left_3 );
                    Py_DECREF( tmp_compexpr_right_3 );
                    if ( tmp_operand_name_2 == NULL )
                    {
                        assert( ERROR_OCCURRED() );

                        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                        exception_lineno = 877;
                        type_description_1 = "ooo";
                        goto try_except_handler_4;
                    }
                    tmp_res = CHECK_IF_TRUE( tmp_operand_name_2 );
                    Py_DECREF( tmp_operand_name_2 );
                    if ( tmp_res == -1 )
                    {
                        assert( ERROR_OCCURRED() );

                        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                        exception_lineno = 877;
                        type_description_1 = "ooo";
                        goto try_except_handler_4;
                    }
                    tmp_condition_result_4 = ( tmp_res == 0 ) ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
                    if ( tmp_condition_result_4 == NUITKA_BOOL_TRUE )
                    {
                        goto branch_yes_4;
                    }
                    else
                    {
                        goto branch_no_4;
                    }
                    branch_yes_4:;
                    tmp_result = RERAISE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
                    if (unlikely( tmp_result == false ))
                    {
                        exception_lineno = 883;
                    }

                    if (exception_tb && exception_tb->tb_frame == &frame_6878daaf3da84a8cdb9f86ec178c7a88->m_frame) frame_6878daaf3da84a8cdb9f86ec178c7a88->m_frame.f_lineno = exception_tb->tb_lineno;
                    type_description_1 = "ooo";
                    goto try_except_handler_4;
                    branch_no_4:;
                }
                goto try_end_2;
                // Exception handler code:
                try_except_handler_4:;
                exception_keeper_type_2 = exception_type;
                exception_keeper_value_2 = exception_value;
                exception_keeper_tb_2 = exception_tb;
                exception_keeper_lineno_2 = exception_lineno;
                exception_type = NULL;
                exception_value = NULL;
                exception_tb = NULL;
                exception_lineno = 0;

                Py_XDECREF( var_exc );
                var_exc = NULL;

                // Re-raise.
                exception_type = exception_keeper_type_2;
                exception_value = exception_keeper_value_2;
                exception_tb = exception_keeper_tb_2;
                exception_lineno = exception_keeper_lineno_2;

                goto try_except_handler_3;
                // End of try:
                try_end_2:;
                Py_XDECREF( var_exc );
                var_exc = NULL;

                goto branch_end_3;
                branch_no_3:;
                tmp_result = RERAISE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
                if (unlikely( tmp_result == false ))
                {
                    exception_lineno = 872;
                }

                if (exception_tb && exception_tb->tb_frame == &frame_6878daaf3da84a8cdb9f86ec178c7a88->m_frame) frame_6878daaf3da84a8cdb9f86ec178c7a88->m_frame.f_lineno = exception_tb->tb_lineno;
                type_description_1 = "ooo";
                goto try_except_handler_3;
                branch_end_3:;
            }
            branch_no_2:;
        }
        goto try_end_3;
        // Exception handler code:
        try_except_handler_3:;
        exception_keeper_type_3 = exception_type;
        exception_keeper_value_3 = exception_value;
        exception_keeper_tb_3 = exception_tb;
        exception_keeper_lineno_3 = exception_lineno;
        exception_type = NULL;
        exception_value = NULL;
        exception_tb = NULL;
        exception_lineno = 0;

        // Restore previous exception.
        SET_CURRENT_EXCEPTION( exception_preserved_type_1, exception_preserved_value_1, exception_preserved_tb_1 );
        // Re-raise.
        exception_type = exception_keeper_type_3;
        exception_value = exception_keeper_value_3;
        exception_tb = exception_keeper_tb_3;
        exception_lineno = exception_keeper_lineno_3;

        goto frame_exception_exit_1;
        // End of try:
        try_end_3:;
        // Restore previous exception.
        SET_CURRENT_EXCEPTION( exception_preserved_type_1, exception_preserved_value_1, exception_preserved_tb_1 );
        goto try_end_1;
        // exception handler codes exits in all cases
        NUITKA_CANNOT_GET_HERE( subprocess$$$function_35__stdin_write );
        return NULL;
        // End of try:
        try_end_1:;
        branch_no_1:;
    }
    // Tried code:
    {
        PyObject *tmp_called_instance_2;
        PyObject *tmp_source_name_4;
        PyObject *tmp_call_result_2;
        CHECK_OBJECT( par_self );
        tmp_source_name_4 = par_self;
        tmp_called_instance_2 = LOOKUP_ATTRIBUTE( tmp_source_name_4, const_str_plain_stdin );
        if ( tmp_called_instance_2 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 886;
            type_description_1 = "ooo";
            goto try_except_handler_5;
        }
        frame_6878daaf3da84a8cdb9f86ec178c7a88->m_frame.f_lineno = 886;
        tmp_call_result_2 = CALL_METHOD_NO_ARGS( tmp_called_instance_2, const_str_plain_close );
        Py_DECREF( tmp_called_instance_2 );
        if ( tmp_call_result_2 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 886;
            type_description_1 = "ooo";
            goto try_except_handler_5;
        }
        Py_DECREF( tmp_call_result_2 );
    }
    goto try_end_4;
    // Exception handler code:
    try_except_handler_5:;
    exception_keeper_type_4 = exception_type;
    exception_keeper_value_4 = exception_value;
    exception_keeper_tb_4 = exception_tb;
    exception_keeper_lineno_4 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    // Preserve existing published exception.
    exception_preserved_type_2 = EXC_TYPE(PyThreadState_GET());
    Py_XINCREF( exception_preserved_type_2 );
    exception_preserved_value_2 = EXC_VALUE(PyThreadState_GET());
    Py_XINCREF( exception_preserved_value_2 );
    exception_preserved_tb_2 = (PyTracebackObject *)EXC_TRACEBACK(PyThreadState_GET());
    Py_XINCREF( exception_preserved_tb_2 );

    if ( exception_keeper_tb_4 == NULL )
    {
        exception_keeper_tb_4 = MAKE_TRACEBACK( frame_6878daaf3da84a8cdb9f86ec178c7a88, exception_keeper_lineno_4 );
    }
    else if ( exception_keeper_lineno_4 != 0 )
    {
        exception_keeper_tb_4 = ADD_TRACEBACK( exception_keeper_tb_4, frame_6878daaf3da84a8cdb9f86ec178c7a88, exception_keeper_lineno_4 );
    }

    NORMALIZE_EXCEPTION( &exception_keeper_type_4, &exception_keeper_value_4, &exception_keeper_tb_4 );
    PyException_SetTraceback( exception_keeper_value_4, (PyObject *)exception_keeper_tb_4 );
    PUBLISH_EXCEPTION( &exception_keeper_type_4, &exception_keeper_value_4, &exception_keeper_tb_4 );
    // Tried code:
    {
        nuitka_bool tmp_condition_result_5;
        PyObject *tmp_operand_name_3;
        PyObject *tmp_compexpr_left_4;
        PyObject *tmp_compexpr_right_4;
        tmp_compexpr_left_4 = EXC_TYPE(PyThreadState_GET());
        tmp_compexpr_right_4 = PyExc_BrokenPipeError;
        tmp_res = EXCEPTION_MATCH_BOOL( tmp_compexpr_left_4, tmp_compexpr_right_4 );
        if ( tmp_res == -1 )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 887;
            type_description_1 = "ooo";
            goto try_except_handler_6;
        }
        tmp_operand_name_3 = ( tmp_res != 0 ) ? Py_True : Py_False;
        tmp_res = CHECK_IF_TRUE( tmp_operand_name_3 );
        if ( tmp_res == -1 )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 887;
            type_description_1 = "ooo";
            goto try_except_handler_6;
        }
        tmp_condition_result_5 = ( tmp_res == 0 ) ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
        if ( tmp_condition_result_5 == NUITKA_BOOL_TRUE )
        {
            goto branch_yes_5;
        }
        else
        {
            goto branch_no_5;
        }
        branch_yes_5:;
        {
            nuitka_bool tmp_condition_result_6;
            PyObject *tmp_compexpr_left_5;
            PyObject *tmp_compexpr_right_5;
            tmp_compexpr_left_5 = EXC_TYPE(PyThreadState_GET());
            tmp_compexpr_right_5 = PyExc_OSError;
            tmp_res = EXCEPTION_MATCH_BOOL( tmp_compexpr_left_5, tmp_compexpr_right_5 );
            if ( tmp_res == -1 )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 889;
                type_description_1 = "ooo";
                goto try_except_handler_6;
            }
            tmp_condition_result_6 = ( tmp_res != 0 ) ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
            if ( tmp_condition_result_6 == NUITKA_BOOL_TRUE )
            {
                goto branch_yes_6;
            }
            else
            {
                goto branch_no_6;
            }
            branch_yes_6:;
            {
                PyObject *tmp_assign_source_2;
                tmp_assign_source_2 = EXC_VALUE(PyThreadState_GET());
                assert( var_exc == NULL );
                Py_INCREF( tmp_assign_source_2 );
                var_exc = tmp_assign_source_2;
            }
            // Tried code:
            {
                nuitka_bool tmp_condition_result_7;
                PyObject *tmp_operand_name_4;
                PyObject *tmp_compexpr_left_6;
                PyObject *tmp_compexpr_right_6;
                PyObject *tmp_source_name_5;
                PyObject *tmp_source_name_6;
                PyObject *tmp_mvar_value_2;
                CHECK_OBJECT( var_exc );
                tmp_source_name_5 = var_exc;
                tmp_compexpr_left_6 = LOOKUP_ATTRIBUTE( tmp_source_name_5, const_str_plain_errno );
                if ( tmp_compexpr_left_6 == NULL )
                {
                    assert( ERROR_OCCURRED() );

                    FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                    exception_lineno = 890;
                    type_description_1 = "ooo";
                    goto try_except_handler_7;
                }
                tmp_mvar_value_2 = GET_STRING_DICT_VALUE( moduledict_subprocess, (Nuitka_StringObject *)const_str_plain_errno );

                if (unlikely( tmp_mvar_value_2 == NULL ))
                {
                    tmp_mvar_value_2 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_errno );
                }

                if ( tmp_mvar_value_2 == NULL )
                {
                    Py_DECREF( tmp_compexpr_left_6 );
                    exception_type = PyExc_NameError;
                    Py_INCREF( exception_type );
                    exception_value = PyUnicode_FromFormat( "name '%s' is not defined", "errno" );
                    exception_tb = NULL;
                    NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
                    CHAIN_EXCEPTION( exception_value );

                    exception_lineno = 890;
                    type_description_1 = "ooo";
                    goto try_except_handler_7;
                }

                tmp_source_name_6 = tmp_mvar_value_2;
                tmp_compexpr_right_6 = LOOKUP_ATTRIBUTE( tmp_source_name_6, const_str_plain_EINVAL );
                if ( tmp_compexpr_right_6 == NULL )
                {
                    assert( ERROR_OCCURRED() );

                    FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
                    Py_DECREF( tmp_compexpr_left_6 );

                    exception_lineno = 890;
                    type_description_1 = "ooo";
                    goto try_except_handler_7;
                }
                tmp_operand_name_4 = RICH_COMPARE_EQ_OBJECT_OBJECT( tmp_compexpr_left_6, tmp_compexpr_right_6 );
                Py_DECREF( tmp_compexpr_left_6 );
                Py_DECREF( tmp_compexpr_right_6 );
                if ( tmp_operand_name_4 == NULL )
                {
                    assert( ERROR_OCCURRED() );

                    FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                    exception_lineno = 890;
                    type_description_1 = "ooo";
                    goto try_except_handler_7;
                }
                tmp_res = CHECK_IF_TRUE( tmp_operand_name_4 );
                Py_DECREF( tmp_operand_name_4 );
                if ( tmp_res == -1 )
                {
                    assert( ERROR_OCCURRED() );

                    FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                    exception_lineno = 890;
                    type_description_1 = "ooo";
                    goto try_except_handler_7;
                }
                tmp_condition_result_7 = ( tmp_res == 0 ) ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
                if ( tmp_condition_result_7 == NUITKA_BOOL_TRUE )
                {
                    goto branch_yes_7;
                }
                else
                {
                    goto branch_no_7;
                }
                branch_yes_7:;
                tmp_result = RERAISE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
                if (unlikely( tmp_result == false ))
                {
                    exception_lineno = 893;
                }

                if (exception_tb && exception_tb->tb_frame == &frame_6878daaf3da84a8cdb9f86ec178c7a88->m_frame) frame_6878daaf3da84a8cdb9f86ec178c7a88->m_frame.f_lineno = exception_tb->tb_lineno;
                type_description_1 = "ooo";
                goto try_except_handler_7;
                branch_no_7:;
            }
            goto try_end_5;
            // Exception handler code:
            try_except_handler_7:;
            exception_keeper_type_5 = exception_type;
            exception_keeper_value_5 = exception_value;
            exception_keeper_tb_5 = exception_tb;
            exception_keeper_lineno_5 = exception_lineno;
            exception_type = NULL;
            exception_value = NULL;
            exception_tb = NULL;
            exception_lineno = 0;

            Py_XDECREF( var_exc );
            var_exc = NULL;

            // Re-raise.
            exception_type = exception_keeper_type_5;
            exception_value = exception_keeper_value_5;
            exception_tb = exception_keeper_tb_5;
            exception_lineno = exception_keeper_lineno_5;

            goto try_except_handler_6;
            // End of try:
            try_end_5:;
            Py_XDECREF( var_exc );
            var_exc = NULL;

            goto branch_end_6;
            branch_no_6:;
            tmp_result = RERAISE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
            if (unlikely( tmp_result == false ))
            {
                exception_lineno = 885;
            }

            if (exception_tb && exception_tb->tb_frame == &frame_6878daaf3da84a8cdb9f86ec178c7a88->m_frame) frame_6878daaf3da84a8cdb9f86ec178c7a88->m_frame.f_lineno = exception_tb->tb_lineno;
            type_description_1 = "ooo";
            goto try_except_handler_6;
            branch_end_6:;
        }
        branch_no_5:;
    }
    goto try_end_6;
    // Exception handler code:
    try_except_handler_6:;
    exception_keeper_type_6 = exception_type;
    exception_keeper_value_6 = exception_value;
    exception_keeper_tb_6 = exception_tb;
    exception_keeper_lineno_6 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    // Restore previous exception.
    SET_CURRENT_EXCEPTION( exception_preserved_type_2, exception_preserved_value_2, exception_preserved_tb_2 );
    // Re-raise.
    exception_type = exception_keeper_type_6;
    exception_value = exception_keeper_value_6;
    exception_tb = exception_keeper_tb_6;
    exception_lineno = exception_keeper_lineno_6;

    goto frame_exception_exit_1;
    // End of try:
    try_end_6:;
    // Restore previous exception.
    SET_CURRENT_EXCEPTION( exception_preserved_type_2, exception_preserved_value_2, exception_preserved_tb_2 );
    goto try_end_4;
    // exception handler codes exits in all cases
    NUITKA_CANNOT_GET_HERE( subprocess$$$function_35__stdin_write );
    return NULL;
    // End of try:
    try_end_4:;

#if 0
    RESTORE_FRAME_EXCEPTION( frame_6878daaf3da84a8cdb9f86ec178c7a88 );
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto frame_no_exception_1;

    frame_exception_exit_1:;

#if 0
    RESTORE_FRAME_EXCEPTION( frame_6878daaf3da84a8cdb9f86ec178c7a88 );
#endif

    if ( exception_tb == NULL )
    {
        exception_tb = MAKE_TRACEBACK( frame_6878daaf3da84a8cdb9f86ec178c7a88, exception_lineno );
    }
    else if ( exception_tb->tb_frame != &frame_6878daaf3da84a8cdb9f86ec178c7a88->m_frame )
    {
        exception_tb = ADD_TRACEBACK( exception_tb, frame_6878daaf3da84a8cdb9f86ec178c7a88, exception_lineno );
    }

    // Attachs locals to frame if any.
    Nuitka_Frame_AttachLocals(
        (struct Nuitka_FrameObject *)frame_6878daaf3da84a8cdb9f86ec178c7a88,
        type_description_1,
        par_self,
        par_input,
        var_exc
    );


    // Release cached frame.
    if ( frame_6878daaf3da84a8cdb9f86ec178c7a88 == cache_frame_6878daaf3da84a8cdb9f86ec178c7a88 )
    {
        Py_DECREF( frame_6878daaf3da84a8cdb9f86ec178c7a88 );
    }
    cache_frame_6878daaf3da84a8cdb9f86ec178c7a88 = NULL;

    assertFrameObject( frame_6878daaf3da84a8cdb9f86ec178c7a88 );

    // Put the previous frame back on top.
    popFrameStack();

    // Return the error.
    goto try_except_handler_1;

    frame_no_exception_1:;
    tmp_return_value = Py_None;
    Py_INCREF( tmp_return_value );
    goto try_return_handler_1;
    // tried codes exits in all cases
    NUITKA_CANNOT_GET_HERE( subprocess$$$function_35__stdin_write );
    return NULL;
    // Return handler code:
    try_return_handler_1:;
    CHECK_OBJECT( (PyObject *)par_self );
    Py_DECREF( par_self );
    par_self = NULL;

    CHECK_OBJECT( (PyObject *)par_input );
    Py_DECREF( par_input );
    par_input = NULL;

    Py_XDECREF( var_exc );
    var_exc = NULL;

    goto function_return_exit;
    // Exception handler code:
    try_except_handler_1:;
    exception_keeper_type_7 = exception_type;
    exception_keeper_value_7 = exception_value;
    exception_keeper_tb_7 = exception_tb;
    exception_keeper_lineno_7 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    CHECK_OBJECT( (PyObject *)par_self );
    Py_DECREF( par_self );
    par_self = NULL;

    CHECK_OBJECT( (PyObject *)par_input );
    Py_DECREF( par_input );
    par_input = NULL;

    Py_XDECREF( var_exc );
    var_exc = NULL;

    // Re-raise.
    exception_type = exception_keeper_type_7;
    exception_value = exception_keeper_value_7;
    exception_tb = exception_keeper_tb_7;
    exception_lineno = exception_keeper_lineno_7;

    goto function_exception_exit;
    // End of try:

    // Return statement must have exited already.
    NUITKA_CANNOT_GET_HERE( subprocess$$$function_35__stdin_write );
    return NULL;

function_exception_exit:
    assert( exception_type );
    RESTORE_ERROR_OCCURRED( exception_type, exception_value, exception_tb );

    return NULL;

function_return_exit:
   // Function cleanup code if any.


   // Actual function exit with return value, making sure we did not make
   // the error status worse despite non-NULL return.
   CHECK_OBJECT( tmp_return_value );
   assert( had_error || !ERROR_OCCURRED() );
   return tmp_return_value;
}


static PyObject *impl_subprocess$$$function_36_communicate( struct Nuitka_FunctionObject const *self, PyObject **python_pars )
{
    // Preserve error status for checks
#ifndef __NUITKA_NO_ASSERT__
    NUITKA_MAY_BE_UNUSED bool had_error = ERROR_OCCURRED();
#endif

    // Local variable declarations.
    PyObject *par_self = python_pars[ 0 ];
    PyObject *par_input = python_pars[ 1 ];
    PyObject *par_timeout = python_pars[ 2 ];
    PyObject *var_stdout = NULL;
    PyObject *var_stderr = NULL;
    PyObject *var_endtime = NULL;
    PyObject *var_sigint_timeout = NULL;
    PyObject *var_sts = NULL;
    PyObject *tmp_tuple_unpack_1__element_1 = NULL;
    PyObject *tmp_tuple_unpack_1__element_2 = NULL;
    PyObject *tmp_tuple_unpack_1__source_iter = NULL;
    struct Nuitka_FrameObject *frame_78e27b0fea17bb4807da1cbf00c46c61;
    NUITKA_MAY_BE_UNUSED char const *type_description_1 = NULL;
    PyObject *exception_type = NULL;
    PyObject *exception_value = NULL;
    PyTracebackObject *exception_tb = NULL;
    NUITKA_MAY_BE_UNUSED int exception_lineno = 0;
    int tmp_res;
    PyObject *tmp_iterator_attempt;
    PyObject *exception_keeper_type_1;
    PyObject *exception_keeper_value_1;
    PyTracebackObject *exception_keeper_tb_1;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_1;
    PyObject *exception_keeper_type_2;
    PyObject *exception_keeper_value_2;
    PyTracebackObject *exception_keeper_tb_2;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_2;
    PyObject *exception_keeper_type_3;
    PyObject *exception_keeper_value_3;
    PyTracebackObject *exception_keeper_tb_3;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_3;
    PyObject *exception_preserved_type_2;
    PyObject *exception_preserved_value_2;
    PyTracebackObject *exception_preserved_tb_2;
    bool tmp_result;
    PyObject *exception_keeper_type_4;
    PyObject *exception_keeper_value_4;
    PyTracebackObject *exception_keeper_tb_4;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_4;
    PyObject *exception_preserved_type_1;
    PyObject *exception_preserved_value_1;
    PyTracebackObject *exception_preserved_tb_1;
    PyObject *exception_keeper_type_5;
    PyObject *exception_keeper_value_5;
    PyTracebackObject *exception_keeper_tb_5;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_5;
    PyObject *exception_keeper_type_6;
    PyObject *exception_keeper_value_6;
    PyTracebackObject *exception_keeper_tb_6;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_6;
    PyObject *exception_keeper_type_7;
    PyObject *exception_keeper_value_7;
    PyTracebackObject *exception_keeper_tb_7;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_7;
    PyObject *exception_preserved_type_3;
    PyObject *exception_preserved_value_3;
    PyTracebackObject *exception_preserved_tb_3;
    PyObject *exception_keeper_type_8;
    PyObject *exception_keeper_value_8;
    PyTracebackObject *exception_keeper_tb_8;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_8;
    PyObject *tmp_return_value = NULL;
    static struct Nuitka_FrameObject *cache_frame_78e27b0fea17bb4807da1cbf00c46c61 = NULL;
    PyObject *exception_keeper_type_9;
    PyObject *exception_keeper_value_9;
    PyTracebackObject *exception_keeper_tb_9;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_9;

    // Actual function body.
    // Tried code:
    MAKE_OR_REUSE_FRAME( cache_frame_78e27b0fea17bb4807da1cbf00c46c61, codeobj_78e27b0fea17bb4807da1cbf00c46c61, module_subprocess, sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *) );
    frame_78e27b0fea17bb4807da1cbf00c46c61 = cache_frame_78e27b0fea17bb4807da1cbf00c46c61;

    // Push the new frame as the currently active one.
    pushFrameStack( frame_78e27b0fea17bb4807da1cbf00c46c61 );

    // Mark the frame object as in use, ref count 1 will be up for reuse.
    assert( Py_REFCNT( frame_78e27b0fea17bb4807da1cbf00c46c61 ) == 2 ); // Frame stack

    // Framed code:
    {
        nuitka_bool tmp_condition_result_1;
        int tmp_and_left_truth_1;
        nuitka_bool tmp_and_left_value_1;
        nuitka_bool tmp_and_right_value_1;
        PyObject *tmp_source_name_1;
        PyObject *tmp_attribute_value_1;
        int tmp_truth_name_1;
        int tmp_truth_name_2;
        CHECK_OBJECT( par_self );
        tmp_source_name_1 = par_self;
        tmp_attribute_value_1 = LOOKUP_ATTRIBUTE( tmp_source_name_1, const_str_plain__communication_started );
        if ( tmp_attribute_value_1 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 913;
            type_description_1 = "oooooooo";
            goto frame_exception_exit_1;
        }
        tmp_truth_name_1 = CHECK_IF_TRUE( tmp_attribute_value_1 );
        if ( tmp_truth_name_1 == -1 )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
            Py_DECREF( tmp_attribute_value_1 );

            exception_lineno = 913;
            type_description_1 = "oooooooo";
            goto frame_exception_exit_1;
        }
        tmp_and_left_value_1 = tmp_truth_name_1 == 1 ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
        Py_DECREF( tmp_attribute_value_1 );
        tmp_and_left_truth_1 = tmp_and_left_value_1 == NUITKA_BOOL_TRUE ? 1 : 0;
        if ( tmp_and_left_truth_1 == 1 )
        {
            goto and_right_1;
        }
        else
        {
            goto and_left_1;
        }
        and_right_1:;
        CHECK_OBJECT( par_input );
        tmp_truth_name_2 = CHECK_IF_TRUE( par_input );
        if ( tmp_truth_name_2 == -1 )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 913;
            type_description_1 = "oooooooo";
            goto frame_exception_exit_1;
        }
        tmp_and_right_value_1 = tmp_truth_name_2 == 1 ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
        tmp_condition_result_1 = tmp_and_right_value_1;
        goto and_end_1;
        and_left_1:;
        tmp_condition_result_1 = tmp_and_left_value_1;
        and_end_1:;
        if ( tmp_condition_result_1 == NUITKA_BOOL_TRUE )
        {
            goto branch_yes_1;
        }
        else
        {
            goto branch_no_1;
        }
        branch_yes_1:;
        {
            PyObject *tmp_raise_type_1;
            PyObject *tmp_make_exception_arg_1;
            tmp_make_exception_arg_1 = const_str_digest_feaf87b9b7d17be45ce0885d3a2e0b62;
            frame_78e27b0fea17bb4807da1cbf00c46c61->m_frame.f_lineno = 914;
            {
                PyObject *call_args[] = { tmp_make_exception_arg_1 };
                tmp_raise_type_1 = CALL_FUNCTION_WITH_ARGS1( PyExc_ValueError, call_args );
            }

            assert( !(tmp_raise_type_1 == NULL) );
            exception_type = tmp_raise_type_1;
            exception_lineno = 914;
            RAISE_EXCEPTION_WITH_TYPE( &exception_type, &exception_value, &exception_tb );
            type_description_1 = "oooooooo";
            goto frame_exception_exit_1;
        }
        branch_no_1:;
    }
    {
        nuitka_bool tmp_condition_result_2;
        int tmp_and_left_truth_2;
        nuitka_bool tmp_and_left_value_2;
        nuitka_bool tmp_and_right_value_2;
        PyObject *tmp_compexpr_left_1;
        PyObject *tmp_compexpr_right_1;
        int tmp_and_left_truth_3;
        nuitka_bool tmp_and_left_value_3;
        nuitka_bool tmp_and_right_value_3;
        PyObject *tmp_operand_name_1;
        PyObject *tmp_source_name_2;
        PyObject *tmp_compexpr_left_2;
        PyObject *tmp_compexpr_right_2;
        PyObject *tmp_called_instance_1;
        PyObject *tmp_list_element_1;
        PyObject *tmp_source_name_3;
        PyObject *tmp_source_name_4;
        PyObject *tmp_source_name_5;
        CHECK_OBJECT( par_timeout );
        tmp_compexpr_left_1 = par_timeout;
        tmp_compexpr_right_1 = Py_None;
        tmp_and_left_value_2 = ( tmp_compexpr_left_1 == tmp_compexpr_right_1 ) ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
        tmp_and_left_truth_2 = tmp_and_left_value_2 == NUITKA_BOOL_TRUE ? 1 : 0;
        if ( tmp_and_left_truth_2 == 1 )
        {
            goto and_right_2;
        }
        else
        {
            goto and_left_2;
        }
        and_right_2:;
        CHECK_OBJECT( par_self );
        tmp_source_name_2 = par_self;
        tmp_operand_name_1 = LOOKUP_ATTRIBUTE( tmp_source_name_2, const_str_plain__communication_started );
        if ( tmp_operand_name_1 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 919;
            type_description_1 = "oooooooo";
            goto frame_exception_exit_1;
        }
        tmp_res = CHECK_IF_TRUE( tmp_operand_name_1 );
        Py_DECREF( tmp_operand_name_1 );
        if ( tmp_res == -1 )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 919;
            type_description_1 = "oooooooo";
            goto frame_exception_exit_1;
        }
        tmp_and_left_value_3 = ( tmp_res == 0 ) ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
        tmp_and_left_truth_3 = tmp_and_left_value_3 == NUITKA_BOOL_TRUE ? 1 : 0;
        if ( tmp_and_left_truth_3 == 1 )
        {
            goto and_right_3;
        }
        else
        {
            goto and_left_3;
        }
        and_right_3:;
        CHECK_OBJECT( par_self );
        tmp_source_name_3 = par_self;
        tmp_list_element_1 = LOOKUP_ATTRIBUTE( tmp_source_name_3, const_str_plain_stdin );
        if ( tmp_list_element_1 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 920;
            type_description_1 = "oooooooo";
            goto frame_exception_exit_1;
        }
        tmp_called_instance_1 = PyList_New( 3 );
        PyList_SET_ITEM( tmp_called_instance_1, 0, tmp_list_element_1 );
        CHECK_OBJECT( par_self );
        tmp_source_name_4 = par_self;
        tmp_list_element_1 = LOOKUP_ATTRIBUTE( tmp_source_name_4, const_str_plain_stdout );
        if ( tmp_list_element_1 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
            Py_DECREF( tmp_called_instance_1 );

            exception_lineno = 920;
            type_description_1 = "oooooooo";
            goto frame_exception_exit_1;
        }
        PyList_SET_ITEM( tmp_called_instance_1, 1, tmp_list_element_1 );
        CHECK_OBJECT( par_self );
        tmp_source_name_5 = par_self;
        tmp_list_element_1 = LOOKUP_ATTRIBUTE( tmp_source_name_5, const_str_plain_stderr );
        if ( tmp_list_element_1 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
            Py_DECREF( tmp_called_instance_1 );

            exception_lineno = 920;
            type_description_1 = "oooooooo";
            goto frame_exception_exit_1;
        }
        PyList_SET_ITEM( tmp_called_instance_1, 2, tmp_list_element_1 );
        frame_78e27b0fea17bb4807da1cbf00c46c61->m_frame.f_lineno = 920;
        tmp_compexpr_left_2 = CALL_METHOD_WITH_ARGS1( tmp_called_instance_1, const_str_plain_count, &PyTuple_GET_ITEM( const_tuple_none_tuple, 0 ) );

        Py_DECREF( tmp_called_instance_1 );
        if ( tmp_compexpr_left_2 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 920;
            type_description_1 = "oooooooo";
            goto frame_exception_exit_1;
        }
        tmp_compexpr_right_2 = const_int_pos_2;
        tmp_res = RICH_COMPARE_BOOL_GTE_OBJECT_OBJECT( tmp_compexpr_left_2, tmp_compexpr_right_2 );
        Py_DECREF( tmp_compexpr_left_2 );
        if ( tmp_res == -1 )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 920;
            type_description_1 = "oooooooo";
            goto frame_exception_exit_1;
        }
        tmp_and_right_value_3 = ( tmp_res != 0 ) ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
        tmp_and_right_value_2 = tmp_and_right_value_3;
        goto and_end_3;
        and_left_3:;
        tmp_and_right_value_2 = tmp_and_left_value_3;
        and_end_3:;
        tmp_condition_result_2 = tmp_and_right_value_2;
        goto and_end_2;
        and_left_2:;
        tmp_condition_result_2 = tmp_and_left_value_2;
        and_end_2:;
        if ( tmp_condition_result_2 == NUITKA_BOOL_TRUE )
        {
            goto branch_yes_2;
        }
        else
        {
            goto branch_no_2;
        }
        branch_yes_2:;
        {
            PyObject *tmp_assign_source_1;
            tmp_assign_source_1 = Py_None;
            assert( var_stdout == NULL );
            Py_INCREF( tmp_assign_source_1 );
            var_stdout = tmp_assign_source_1;
        }
        {
            PyObject *tmp_assign_source_2;
            tmp_assign_source_2 = Py_None;
            assert( var_stderr == NULL );
            Py_INCREF( tmp_assign_source_2 );
            var_stderr = tmp_assign_source_2;
        }
        {
            nuitka_bool tmp_condition_result_3;
            PyObject *tmp_source_name_6;
            PyObject *tmp_attribute_value_2;
            int tmp_truth_name_3;
            CHECK_OBJECT( par_self );
            tmp_source_name_6 = par_self;
            tmp_attribute_value_2 = LOOKUP_ATTRIBUTE( tmp_source_name_6, const_str_plain_stdin );
            if ( tmp_attribute_value_2 == NULL )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 923;
                type_description_1 = "oooooooo";
                goto frame_exception_exit_1;
            }
            tmp_truth_name_3 = CHECK_IF_TRUE( tmp_attribute_value_2 );
            if ( tmp_truth_name_3 == -1 )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
                Py_DECREF( tmp_attribute_value_2 );

                exception_lineno = 923;
                type_description_1 = "oooooooo";
                goto frame_exception_exit_1;
            }
            tmp_condition_result_3 = tmp_truth_name_3 == 1 ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
            Py_DECREF( tmp_attribute_value_2 );
            if ( tmp_condition_result_3 == NUITKA_BOOL_TRUE )
            {
                goto branch_yes_3;
            }
            else
            {
                goto branch_no_3;
            }
            branch_yes_3:;
            {
                PyObject *tmp_called_instance_2;
                PyObject *tmp_call_result_1;
                PyObject *tmp_args_element_name_1;
                CHECK_OBJECT( par_self );
                tmp_called_instance_2 = par_self;
                CHECK_OBJECT( par_input );
                tmp_args_element_name_1 = par_input;
                frame_78e27b0fea17bb4807da1cbf00c46c61->m_frame.f_lineno = 924;
                {
                    PyObject *call_args[] = { tmp_args_element_name_1 };
                    tmp_call_result_1 = CALL_METHOD_WITH_ARGS1( tmp_called_instance_2, const_str_plain__stdin_write, call_args );
                }

                if ( tmp_call_result_1 == NULL )
                {
                    assert( ERROR_OCCURRED() );

                    FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                    exception_lineno = 924;
                    type_description_1 = "oooooooo";
                    goto frame_exception_exit_1;
                }
                Py_DECREF( tmp_call_result_1 );
            }
            goto branch_end_3;
            branch_no_3:;
            {
                nuitka_bool tmp_condition_result_4;
                PyObject *tmp_source_name_7;
                PyObject *tmp_attribute_value_3;
                int tmp_truth_name_4;
                CHECK_OBJECT( par_self );
                tmp_source_name_7 = par_self;
                tmp_attribute_value_3 = LOOKUP_ATTRIBUTE( tmp_source_name_7, const_str_plain_stdout );
                if ( tmp_attribute_value_3 == NULL )
                {
                    assert( ERROR_OCCURRED() );

                    FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                    exception_lineno = 925;
                    type_description_1 = "oooooooo";
                    goto frame_exception_exit_1;
                }
                tmp_truth_name_4 = CHECK_IF_TRUE( tmp_attribute_value_3 );
                if ( tmp_truth_name_4 == -1 )
                {
                    assert( ERROR_OCCURRED() );

                    FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
                    Py_DECREF( tmp_attribute_value_3 );

                    exception_lineno = 925;
                    type_description_1 = "oooooooo";
                    goto frame_exception_exit_1;
                }
                tmp_condition_result_4 = tmp_truth_name_4 == 1 ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
                Py_DECREF( tmp_attribute_value_3 );
                if ( tmp_condition_result_4 == NUITKA_BOOL_TRUE )
                {
                    goto branch_yes_4;
                }
                else
                {
                    goto branch_no_4;
                }
                branch_yes_4:;
                {
                    PyObject *tmp_assign_source_3;
                    PyObject *tmp_called_instance_3;
                    PyObject *tmp_source_name_8;
                    CHECK_OBJECT( par_self );
                    tmp_source_name_8 = par_self;
                    tmp_called_instance_3 = LOOKUP_ATTRIBUTE( tmp_source_name_8, const_str_plain_stdout );
                    if ( tmp_called_instance_3 == NULL )
                    {
                        assert( ERROR_OCCURRED() );

                        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                        exception_lineno = 926;
                        type_description_1 = "oooooooo";
                        goto frame_exception_exit_1;
                    }
                    frame_78e27b0fea17bb4807da1cbf00c46c61->m_frame.f_lineno = 926;
                    tmp_assign_source_3 = CALL_METHOD_NO_ARGS( tmp_called_instance_3, const_str_plain_read );
                    Py_DECREF( tmp_called_instance_3 );
                    if ( tmp_assign_source_3 == NULL )
                    {
                        assert( ERROR_OCCURRED() );

                        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                        exception_lineno = 926;
                        type_description_1 = "oooooooo";
                        goto frame_exception_exit_1;
                    }
                    {
                        PyObject *old = var_stdout;
                        assert( old != NULL );
                        var_stdout = tmp_assign_source_3;
                        Py_DECREF( old );
                    }

                }
                {
                    PyObject *tmp_called_instance_4;
                    PyObject *tmp_source_name_9;
                    PyObject *tmp_call_result_2;
                    CHECK_OBJECT( par_self );
                    tmp_source_name_9 = par_self;
                    tmp_called_instance_4 = LOOKUP_ATTRIBUTE( tmp_source_name_9, const_str_plain_stdout );
                    if ( tmp_called_instance_4 == NULL )
                    {
                        assert( ERROR_OCCURRED() );

                        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                        exception_lineno = 927;
                        type_description_1 = "oooooooo";
                        goto frame_exception_exit_1;
                    }
                    frame_78e27b0fea17bb4807da1cbf00c46c61->m_frame.f_lineno = 927;
                    tmp_call_result_2 = CALL_METHOD_NO_ARGS( tmp_called_instance_4, const_str_plain_close );
                    Py_DECREF( tmp_called_instance_4 );
                    if ( tmp_call_result_2 == NULL )
                    {
                        assert( ERROR_OCCURRED() );

                        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                        exception_lineno = 927;
                        type_description_1 = "oooooooo";
                        goto frame_exception_exit_1;
                    }
                    Py_DECREF( tmp_call_result_2 );
                }
                goto branch_end_4;
                branch_no_4:;
                {
                    nuitka_bool tmp_condition_result_5;
                    PyObject *tmp_source_name_10;
                    PyObject *tmp_attribute_value_4;
                    int tmp_truth_name_5;
                    CHECK_OBJECT( par_self );
                    tmp_source_name_10 = par_self;
                    tmp_attribute_value_4 = LOOKUP_ATTRIBUTE( tmp_source_name_10, const_str_plain_stderr );
                    if ( tmp_attribute_value_4 == NULL )
                    {
                        assert( ERROR_OCCURRED() );

                        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                        exception_lineno = 928;
                        type_description_1 = "oooooooo";
                        goto frame_exception_exit_1;
                    }
                    tmp_truth_name_5 = CHECK_IF_TRUE( tmp_attribute_value_4 );
                    if ( tmp_truth_name_5 == -1 )
                    {
                        assert( ERROR_OCCURRED() );

                        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
                        Py_DECREF( tmp_attribute_value_4 );

                        exception_lineno = 928;
                        type_description_1 = "oooooooo";
                        goto frame_exception_exit_1;
                    }
                    tmp_condition_result_5 = tmp_truth_name_5 == 1 ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
                    Py_DECREF( tmp_attribute_value_4 );
                    if ( tmp_condition_result_5 == NUITKA_BOOL_TRUE )
                    {
                        goto branch_yes_5;
                    }
                    else
                    {
                        goto branch_no_5;
                    }
                    branch_yes_5:;
                    {
                        PyObject *tmp_assign_source_4;
                        PyObject *tmp_called_instance_5;
                        PyObject *tmp_source_name_11;
                        CHECK_OBJECT( par_self );
                        tmp_source_name_11 = par_self;
                        tmp_called_instance_5 = LOOKUP_ATTRIBUTE( tmp_source_name_11, const_str_plain_stderr );
                        if ( tmp_called_instance_5 == NULL )
                        {
                            assert( ERROR_OCCURRED() );

                            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                            exception_lineno = 929;
                            type_description_1 = "oooooooo";
                            goto frame_exception_exit_1;
                        }
                        frame_78e27b0fea17bb4807da1cbf00c46c61->m_frame.f_lineno = 929;
                        tmp_assign_source_4 = CALL_METHOD_NO_ARGS( tmp_called_instance_5, const_str_plain_read );
                        Py_DECREF( tmp_called_instance_5 );
                        if ( tmp_assign_source_4 == NULL )
                        {
                            assert( ERROR_OCCURRED() );

                            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                            exception_lineno = 929;
                            type_description_1 = "oooooooo";
                            goto frame_exception_exit_1;
                        }
                        {
                            PyObject *old = var_stderr;
                            assert( old != NULL );
                            var_stderr = tmp_assign_source_4;
                            Py_DECREF( old );
                        }

                    }
                    {
                        PyObject *tmp_called_instance_6;
                        PyObject *tmp_source_name_12;
                        PyObject *tmp_call_result_3;
                        CHECK_OBJECT( par_self );
                        tmp_source_name_12 = par_self;
                        tmp_called_instance_6 = LOOKUP_ATTRIBUTE( tmp_source_name_12, const_str_plain_stderr );
                        if ( tmp_called_instance_6 == NULL )
                        {
                            assert( ERROR_OCCURRED() );

                            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                            exception_lineno = 930;
                            type_description_1 = "oooooooo";
                            goto frame_exception_exit_1;
                        }
                        frame_78e27b0fea17bb4807da1cbf00c46c61->m_frame.f_lineno = 930;
                        tmp_call_result_3 = CALL_METHOD_NO_ARGS( tmp_called_instance_6, const_str_plain_close );
                        Py_DECREF( tmp_called_instance_6 );
                        if ( tmp_call_result_3 == NULL )
                        {
                            assert( ERROR_OCCURRED() );

                            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                            exception_lineno = 930;
                            type_description_1 = "oooooooo";
                            goto frame_exception_exit_1;
                        }
                        Py_DECREF( tmp_call_result_3 );
                    }
                    branch_no_5:;
                }
                branch_end_4:;
            }
            branch_end_3:;
        }
        {
            PyObject *tmp_called_instance_7;
            PyObject *tmp_call_result_4;
            CHECK_OBJECT( par_self );
            tmp_called_instance_7 = par_self;
            frame_78e27b0fea17bb4807da1cbf00c46c61->m_frame.f_lineno = 931;
            tmp_call_result_4 = CALL_METHOD_NO_ARGS( tmp_called_instance_7, const_str_plain_wait );
            if ( tmp_call_result_4 == NULL )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 931;
                type_description_1 = "oooooooo";
                goto frame_exception_exit_1;
            }
            Py_DECREF( tmp_call_result_4 );
        }
        goto branch_end_2;
        branch_no_2:;
        {
            nuitka_bool tmp_condition_result_6;
            PyObject *tmp_compexpr_left_3;
            PyObject *tmp_compexpr_right_3;
            CHECK_OBJECT( par_timeout );
            tmp_compexpr_left_3 = par_timeout;
            tmp_compexpr_right_3 = Py_None;
            tmp_condition_result_6 = ( tmp_compexpr_left_3 != tmp_compexpr_right_3 ) ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
            if ( tmp_condition_result_6 == NUITKA_BOOL_TRUE )
            {
                goto branch_yes_6;
            }
            else
            {
                goto branch_no_6;
            }
            branch_yes_6:;
            {
                PyObject *tmp_assign_source_5;
                PyObject *tmp_left_name_1;
                PyObject *tmp_called_name_1;
                PyObject *tmp_mvar_value_1;
                PyObject *tmp_right_name_1;
                tmp_mvar_value_1 = GET_STRING_DICT_VALUE( moduledict_subprocess, (Nuitka_StringObject *)const_str_plain__time );

                if (unlikely( tmp_mvar_value_1 == NULL ))
                {
                    tmp_mvar_value_1 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain__time );
                }

                if ( tmp_mvar_value_1 == NULL )
                {

                    exception_type = PyExc_NameError;
                    Py_INCREF( exception_type );
                    exception_value = PyUnicode_FromFormat( "name '%s' is not defined", "_time" );
                    exception_tb = NULL;
                    NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
                    CHAIN_EXCEPTION( exception_value );

                    exception_lineno = 934;
                    type_description_1 = "oooooooo";
                    goto frame_exception_exit_1;
                }

                tmp_called_name_1 = tmp_mvar_value_1;
                frame_78e27b0fea17bb4807da1cbf00c46c61->m_frame.f_lineno = 934;
                tmp_left_name_1 = CALL_FUNCTION_NO_ARGS( tmp_called_name_1 );
                if ( tmp_left_name_1 == NULL )
                {
                    assert( ERROR_OCCURRED() );

                    FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                    exception_lineno = 934;
                    type_description_1 = "oooooooo";
                    goto frame_exception_exit_1;
                }
                CHECK_OBJECT( par_timeout );
                tmp_right_name_1 = par_timeout;
                tmp_assign_source_5 = BINARY_OPERATION_ADD_OBJECT_OBJECT( tmp_left_name_1, tmp_right_name_1 );
                Py_DECREF( tmp_left_name_1 );
                if ( tmp_assign_source_5 == NULL )
                {
                    assert( ERROR_OCCURRED() );

                    FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                    exception_lineno = 934;
                    type_description_1 = "oooooooo";
                    goto frame_exception_exit_1;
                }
                assert( var_endtime == NULL );
                var_endtime = tmp_assign_source_5;
            }
            goto branch_end_6;
            branch_no_6:;
            {
                PyObject *tmp_assign_source_6;
                tmp_assign_source_6 = Py_None;
                assert( var_endtime == NULL );
                Py_INCREF( tmp_assign_source_6 );
                var_endtime = tmp_assign_source_6;
            }
            branch_end_6:;
        }
        // Tried code:
        // Tried code:
        // Tried code:
        {
            PyObject *tmp_assign_source_7;
            PyObject *tmp_iter_arg_1;
            PyObject *tmp_called_instance_8;
            PyObject *tmp_args_element_name_2;
            PyObject *tmp_args_element_name_3;
            PyObject *tmp_args_element_name_4;
            CHECK_OBJECT( par_self );
            tmp_called_instance_8 = par_self;
            CHECK_OBJECT( par_input );
            tmp_args_element_name_2 = par_input;
            CHECK_OBJECT( var_endtime );
            tmp_args_element_name_3 = var_endtime;
            CHECK_OBJECT( par_timeout );
            tmp_args_element_name_4 = par_timeout;
            frame_78e27b0fea17bb4807da1cbf00c46c61->m_frame.f_lineno = 939;
            {
                PyObject *call_args[] = { tmp_args_element_name_2, tmp_args_element_name_3, tmp_args_element_name_4 };
                tmp_iter_arg_1 = CALL_METHOD_WITH_ARGS3( tmp_called_instance_8, const_str_plain__communicate, call_args );
            }

            if ( tmp_iter_arg_1 == NULL )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 939;
                type_description_1 = "oooooooo";
                goto try_except_handler_4;
            }
            tmp_assign_source_7 = MAKE_UNPACK_ITERATOR( tmp_iter_arg_1 );
            Py_DECREF( tmp_iter_arg_1 );
            if ( tmp_assign_source_7 == NULL )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 939;
                type_description_1 = "oooooooo";
                goto try_except_handler_4;
            }
            assert( tmp_tuple_unpack_1__source_iter == NULL );
            tmp_tuple_unpack_1__source_iter = tmp_assign_source_7;
        }
        // Tried code:
        {
            PyObject *tmp_assign_source_8;
            PyObject *tmp_unpack_1;
            CHECK_OBJECT( tmp_tuple_unpack_1__source_iter );
            tmp_unpack_1 = tmp_tuple_unpack_1__source_iter;
            tmp_assign_source_8 = UNPACK_NEXT( tmp_unpack_1, 0, 2 );
            if ( tmp_assign_source_8 == NULL )
            {
                if ( !ERROR_OCCURRED() )
                {
                    exception_type = PyExc_StopIteration;
                    Py_INCREF( exception_type );
                    exception_value = NULL;
                    exception_tb = NULL;
                }
                else
                {
                    FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
                }


                type_description_1 = "oooooooo";
                exception_lineno = 939;
                goto try_except_handler_5;
            }
            assert( tmp_tuple_unpack_1__element_1 == NULL );
            tmp_tuple_unpack_1__element_1 = tmp_assign_source_8;
        }
        {
            PyObject *tmp_assign_source_9;
            PyObject *tmp_unpack_2;
            CHECK_OBJECT( tmp_tuple_unpack_1__source_iter );
            tmp_unpack_2 = tmp_tuple_unpack_1__source_iter;
            tmp_assign_source_9 = UNPACK_NEXT( tmp_unpack_2, 1, 2 );
            if ( tmp_assign_source_9 == NULL )
            {
                if ( !ERROR_OCCURRED() )
                {
                    exception_type = PyExc_StopIteration;
                    Py_INCREF( exception_type );
                    exception_value = NULL;
                    exception_tb = NULL;
                }
                else
                {
                    FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
                }


                type_description_1 = "oooooooo";
                exception_lineno = 939;
                goto try_except_handler_5;
            }
            assert( tmp_tuple_unpack_1__element_2 == NULL );
            tmp_tuple_unpack_1__element_2 = tmp_assign_source_9;
        }
        {
            PyObject *tmp_iterator_name_1;
            CHECK_OBJECT( tmp_tuple_unpack_1__source_iter );
            tmp_iterator_name_1 = tmp_tuple_unpack_1__source_iter;
            // Check if iterator has left-over elements.
            CHECK_OBJECT( tmp_iterator_name_1 ); assert( HAS_ITERNEXT( tmp_iterator_name_1 ) );

            tmp_iterator_attempt = (*Py_TYPE( tmp_iterator_name_1 )->tp_iternext)( tmp_iterator_name_1 );

            if (likely( tmp_iterator_attempt == NULL ))
            {
                PyObject *error = GET_ERROR_OCCURRED();

                if ( error != NULL )
                {
                    if ( EXCEPTION_MATCH_BOOL_SINGLE( error, PyExc_StopIteration ))
                    {
                        CLEAR_ERROR_OCCURRED();
                    }
                    else
                    {
                        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );

                        type_description_1 = "oooooooo";
                        exception_lineno = 939;
                        goto try_except_handler_5;
                    }
                }
            }
            else
            {
                Py_DECREF( tmp_iterator_attempt );

                // TODO: Could avoid PyErr_Format.
#if PYTHON_VERSION < 300
                PyErr_Format( PyExc_ValueError, "too many values to unpack" );
#else
                PyErr_Format( PyExc_ValueError, "too many values to unpack (expected 2)" );
#endif
                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );

                type_description_1 = "oooooooo";
                exception_lineno = 939;
                goto try_except_handler_5;
            }
        }
        goto try_end_1;
        // Exception handler code:
        try_except_handler_5:;
        exception_keeper_type_1 = exception_type;
        exception_keeper_value_1 = exception_value;
        exception_keeper_tb_1 = exception_tb;
        exception_keeper_lineno_1 = exception_lineno;
        exception_type = NULL;
        exception_value = NULL;
        exception_tb = NULL;
        exception_lineno = 0;

        CHECK_OBJECT( (PyObject *)tmp_tuple_unpack_1__source_iter );
        Py_DECREF( tmp_tuple_unpack_1__source_iter );
        tmp_tuple_unpack_1__source_iter = NULL;

        // Re-raise.
        exception_type = exception_keeper_type_1;
        exception_value = exception_keeper_value_1;
        exception_tb = exception_keeper_tb_1;
        exception_lineno = exception_keeper_lineno_1;

        goto try_except_handler_4;
        // End of try:
        try_end_1:;
        goto try_end_2;
        // Exception handler code:
        try_except_handler_4:;
        exception_keeper_type_2 = exception_type;
        exception_keeper_value_2 = exception_value;
        exception_keeper_tb_2 = exception_tb;
        exception_keeper_lineno_2 = exception_lineno;
        exception_type = NULL;
        exception_value = NULL;
        exception_tb = NULL;
        exception_lineno = 0;

        Py_XDECREF( tmp_tuple_unpack_1__element_1 );
        tmp_tuple_unpack_1__element_1 = NULL;

        Py_XDECREF( tmp_tuple_unpack_1__element_2 );
        tmp_tuple_unpack_1__element_2 = NULL;

        // Re-raise.
        exception_type = exception_keeper_type_2;
        exception_value = exception_keeper_value_2;
        exception_tb = exception_keeper_tb_2;
        exception_lineno = exception_keeper_lineno_2;

        goto try_except_handler_3;
        // End of try:
        try_end_2:;
        goto try_end_3;
        // Exception handler code:
        try_except_handler_3:;
        exception_keeper_type_3 = exception_type;
        exception_keeper_value_3 = exception_value;
        exception_keeper_tb_3 = exception_tb;
        exception_keeper_lineno_3 = exception_lineno;
        exception_type = NULL;
        exception_value = NULL;
        exception_tb = NULL;
        exception_lineno = 0;

        // Preserve existing published exception.
        exception_preserved_type_2 = EXC_TYPE(PyThreadState_GET());
        Py_XINCREF( exception_preserved_type_2 );
        exception_preserved_value_2 = EXC_VALUE(PyThreadState_GET());
        Py_XINCREF( exception_preserved_value_2 );
        exception_preserved_tb_2 = (PyTracebackObject *)EXC_TRACEBACK(PyThreadState_GET());
        Py_XINCREF( exception_preserved_tb_2 );

        if ( exception_keeper_tb_3 == NULL )
        {
            exception_keeper_tb_3 = MAKE_TRACEBACK( frame_78e27b0fea17bb4807da1cbf00c46c61, exception_keeper_lineno_3 );
        }
        else if ( exception_keeper_lineno_3 != 0 )
        {
            exception_keeper_tb_3 = ADD_TRACEBACK( exception_keeper_tb_3, frame_78e27b0fea17bb4807da1cbf00c46c61, exception_keeper_lineno_3 );
        }

        NORMALIZE_EXCEPTION( &exception_keeper_type_3, &exception_keeper_value_3, &exception_keeper_tb_3 );
        PyException_SetTraceback( exception_keeper_value_3, (PyObject *)exception_keeper_tb_3 );
        PUBLISH_EXCEPTION( &exception_keeper_type_3, &exception_keeper_value_3, &exception_keeper_tb_3 );
        // Tried code:
        {
            nuitka_bool tmp_condition_result_7;
            PyObject *tmp_compexpr_left_4;
            PyObject *tmp_compexpr_right_4;
            tmp_compexpr_left_4 = EXC_TYPE(PyThreadState_GET());
            tmp_compexpr_right_4 = PyExc_KeyboardInterrupt;
            tmp_res = EXCEPTION_MATCH_BOOL( tmp_compexpr_left_4, tmp_compexpr_right_4 );
            if ( tmp_res == -1 )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 940;
                type_description_1 = "oooooooo";
                goto try_except_handler_6;
            }
            tmp_condition_result_7 = ( tmp_res != 0 ) ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
            if ( tmp_condition_result_7 == NUITKA_BOOL_TRUE )
            {
                goto branch_yes_7;
            }
            else
            {
                goto branch_no_7;
            }
            branch_yes_7:;
            {
                nuitka_bool tmp_condition_result_8;
                PyObject *tmp_compexpr_left_5;
                PyObject *tmp_compexpr_right_5;
                CHECK_OBJECT( par_timeout );
                tmp_compexpr_left_5 = par_timeout;
                tmp_compexpr_right_5 = Py_None;
                tmp_condition_result_8 = ( tmp_compexpr_left_5 != tmp_compexpr_right_5 ) ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
                if ( tmp_condition_result_8 == NUITKA_BOOL_TRUE )
                {
                    goto branch_yes_8;
                }
                else
                {
                    goto branch_no_8;
                }
                branch_yes_8:;
                {
                    PyObject *tmp_assign_source_10;
                    PyObject *tmp_called_name_2;
                    PyObject *tmp_args_element_name_5;
                    PyObject *tmp_source_name_13;
                    PyObject *tmp_args_element_name_6;
                    PyObject *tmp_called_instance_9;
                    PyObject *tmp_args_element_name_7;
                    tmp_called_name_2 = LOOKUP_BUILTIN( const_str_plain_min );
                    assert( tmp_called_name_2 != NULL );
                    CHECK_OBJECT( par_self );
                    tmp_source_name_13 = par_self;
                    tmp_args_element_name_5 = LOOKUP_ATTRIBUTE( tmp_source_name_13, const_str_plain__sigint_wait_secs );
                    if ( tmp_args_element_name_5 == NULL )
                    {
                        assert( ERROR_OCCURRED() );

                        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                        exception_lineno = 944;
                        type_description_1 = "oooooooo";
                        goto try_except_handler_6;
                    }
                    CHECK_OBJECT( par_self );
                    tmp_called_instance_9 = par_self;
                    CHECK_OBJECT( var_endtime );
                    tmp_args_element_name_7 = var_endtime;
                    frame_78e27b0fea17bb4807da1cbf00c46c61->m_frame.f_lineno = 945;
                    {
                        PyObject *call_args[] = { tmp_args_element_name_7 };
                        tmp_args_element_name_6 = CALL_METHOD_WITH_ARGS1( tmp_called_instance_9, const_str_plain__remaining_time, call_args );
                    }

                    if ( tmp_args_element_name_6 == NULL )
                    {
                        assert( ERROR_OCCURRED() );

                        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
                        Py_DECREF( tmp_args_element_name_5 );

                        exception_lineno = 945;
                        type_description_1 = "oooooooo";
                        goto try_except_handler_6;
                    }
                    frame_78e27b0fea17bb4807da1cbf00c46c61->m_frame.f_lineno = 944;
                    {
                        PyObject *call_args[] = { tmp_args_element_name_5, tmp_args_element_name_6 };
                        tmp_assign_source_10 = CALL_FUNCTION_WITH_ARGS2( tmp_called_name_2, call_args );
                    }

                    Py_DECREF( tmp_args_element_name_5 );
                    Py_DECREF( tmp_args_element_name_6 );
                    if ( tmp_assign_source_10 == NULL )
                    {
                        assert( ERROR_OCCURRED() );

                        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                        exception_lineno = 944;
                        type_description_1 = "oooooooo";
                        goto try_except_handler_6;
                    }
                    assert( var_sigint_timeout == NULL );
                    var_sigint_timeout = tmp_assign_source_10;
                }
                goto branch_end_8;
                branch_no_8:;
                {
                    PyObject *tmp_assign_source_11;
                    PyObject *tmp_source_name_14;
                    CHECK_OBJECT( par_self );
                    tmp_source_name_14 = par_self;
                    tmp_assign_source_11 = LOOKUP_ATTRIBUTE( tmp_source_name_14, const_str_plain__sigint_wait_secs );
                    if ( tmp_assign_source_11 == NULL )
                    {
                        assert( ERROR_OCCURRED() );

                        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                        exception_lineno = 947;
                        type_description_1 = "oooooooo";
                        goto try_except_handler_6;
                    }
                    assert( var_sigint_timeout == NULL );
                    var_sigint_timeout = tmp_assign_source_11;
                }
                branch_end_8:;
            }
            {
                PyObject *tmp_assattr_name_1;
                PyObject *tmp_assattr_target_1;
                tmp_assattr_name_1 = const_int_0;
                CHECK_OBJECT( par_self );
                tmp_assattr_target_1 = par_self;
                tmp_result = SET_ATTRIBUTE( tmp_assattr_target_1, const_str_plain__sigint_wait_secs, tmp_assattr_name_1 );
                if ( tmp_result == false )
                {
                    assert( ERROR_OCCURRED() );

                    FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                    exception_lineno = 948;
                    type_description_1 = "oooooooo";
                    goto try_except_handler_6;
                }
            }
            // Tried code:
            {
                PyObject *tmp_called_name_3;
                PyObject *tmp_source_name_15;
                PyObject *tmp_call_result_5;
                PyObject *tmp_kw_name_1;
                PyObject *tmp_dict_key_1;
                PyObject *tmp_dict_value_1;
                CHECK_OBJECT( par_self );
                tmp_source_name_15 = par_self;
                tmp_called_name_3 = LOOKUP_ATTRIBUTE( tmp_source_name_15, const_str_plain__wait );
                if ( tmp_called_name_3 == NULL )
                {
                    assert( ERROR_OCCURRED() );

                    FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                    exception_lineno = 950;
                    type_description_1 = "oooooooo";
                    goto try_except_handler_7;
                }
                tmp_dict_key_1 = const_str_plain_timeout;
                CHECK_OBJECT( var_sigint_timeout );
                tmp_dict_value_1 = var_sigint_timeout;
                tmp_kw_name_1 = _PyDict_NewPresized( 1 );
                tmp_res = PyDict_SetItem( tmp_kw_name_1, tmp_dict_key_1, tmp_dict_value_1 );
                assert( !(tmp_res != 0) );
                frame_78e27b0fea17bb4807da1cbf00c46c61->m_frame.f_lineno = 950;
                tmp_call_result_5 = CALL_FUNCTION_WITH_KEYARGS( tmp_called_name_3, tmp_kw_name_1 );
                Py_DECREF( tmp_called_name_3 );
                Py_DECREF( tmp_kw_name_1 );
                if ( tmp_call_result_5 == NULL )
                {
                    assert( ERROR_OCCURRED() );

                    FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                    exception_lineno = 950;
                    type_description_1 = "oooooooo";
                    goto try_except_handler_7;
                }
                Py_DECREF( tmp_call_result_5 );
            }
            goto try_end_4;
            // Exception handler code:
            try_except_handler_7:;
            exception_keeper_type_4 = exception_type;
            exception_keeper_value_4 = exception_value;
            exception_keeper_tb_4 = exception_tb;
            exception_keeper_lineno_4 = exception_lineno;
            exception_type = NULL;
            exception_value = NULL;
            exception_tb = NULL;
            exception_lineno = 0;

            // Preserve existing published exception.
            exception_preserved_type_1 = EXC_TYPE(PyThreadState_GET());
            Py_XINCREF( exception_preserved_type_1 );
            exception_preserved_value_1 = EXC_VALUE(PyThreadState_GET());
            Py_XINCREF( exception_preserved_value_1 );
            exception_preserved_tb_1 = (PyTracebackObject *)EXC_TRACEBACK(PyThreadState_GET());
            Py_XINCREF( exception_preserved_tb_1 );

            if ( exception_keeper_tb_4 == NULL )
            {
                exception_keeper_tb_4 = MAKE_TRACEBACK( frame_78e27b0fea17bb4807da1cbf00c46c61, exception_keeper_lineno_4 );
            }
            else if ( exception_keeper_lineno_4 != 0 )
            {
                exception_keeper_tb_4 = ADD_TRACEBACK( exception_keeper_tb_4, frame_78e27b0fea17bb4807da1cbf00c46c61, exception_keeper_lineno_4 );
            }

            NORMALIZE_EXCEPTION( &exception_keeper_type_4, &exception_keeper_value_4, &exception_keeper_tb_4 );
            PyException_SetTraceback( exception_keeper_value_4, (PyObject *)exception_keeper_tb_4 );
            PUBLISH_EXCEPTION( &exception_keeper_type_4, &exception_keeper_value_4, &exception_keeper_tb_4 );
            // Tried code:
            {
                nuitka_bool tmp_condition_result_9;
                PyObject *tmp_operand_name_2;
                PyObject *tmp_compexpr_left_6;
                PyObject *tmp_compexpr_right_6;
                PyObject *tmp_mvar_value_2;
                tmp_compexpr_left_6 = EXC_TYPE(PyThreadState_GET());
                tmp_mvar_value_2 = GET_STRING_DICT_VALUE( moduledict_subprocess, (Nuitka_StringObject *)const_str_plain_TimeoutExpired );

                if (unlikely( tmp_mvar_value_2 == NULL ))
                {
                    tmp_mvar_value_2 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_TimeoutExpired );
                }

                if ( tmp_mvar_value_2 == NULL )
                {

                    exception_type = PyExc_NameError;
                    Py_INCREF( exception_type );
                    exception_value = PyUnicode_FromFormat( "name '%s' is not defined", "TimeoutExpired" );
                    exception_tb = NULL;
                    NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
                    CHAIN_EXCEPTION( exception_value );

                    exception_lineno = 951;
                    type_description_1 = "oooooooo";
                    goto try_except_handler_8;
                }

                tmp_compexpr_right_6 = tmp_mvar_value_2;
                tmp_res = EXCEPTION_MATCH_BOOL( tmp_compexpr_left_6, tmp_compexpr_right_6 );
                if ( tmp_res == -1 )
                {
                    assert( ERROR_OCCURRED() );

                    FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                    exception_lineno = 951;
                    type_description_1 = "oooooooo";
                    goto try_except_handler_8;
                }
                tmp_operand_name_2 = ( tmp_res != 0 ) ? Py_True : Py_False;
                tmp_res = CHECK_IF_TRUE( tmp_operand_name_2 );
                if ( tmp_res == -1 )
                {
                    assert( ERROR_OCCURRED() );

                    FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                    exception_lineno = 951;
                    type_description_1 = "oooooooo";
                    goto try_except_handler_8;
                }
                tmp_condition_result_9 = ( tmp_res == 0 ) ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
                if ( tmp_condition_result_9 == NUITKA_BOOL_TRUE )
                {
                    goto branch_yes_9;
                }
                else
                {
                    goto branch_no_9;
                }
                branch_yes_9:;
                tmp_result = RERAISE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
                if (unlikely( tmp_result == false ))
                {
                    exception_lineno = 949;
                }

                if (exception_tb && exception_tb->tb_frame == &frame_78e27b0fea17bb4807da1cbf00c46c61->m_frame) frame_78e27b0fea17bb4807da1cbf00c46c61->m_frame.f_lineno = exception_tb->tb_lineno;
                type_description_1 = "oooooooo";
                goto try_except_handler_8;
                branch_no_9:;
            }
            goto try_end_5;
            // Exception handler code:
            try_except_handler_8:;
            exception_keeper_type_5 = exception_type;
            exception_keeper_value_5 = exception_value;
            exception_keeper_tb_5 = exception_tb;
            exception_keeper_lineno_5 = exception_lineno;
            exception_type = NULL;
            exception_value = NULL;
            exception_tb = NULL;
            exception_lineno = 0;

            // Restore previous exception.
            SET_CURRENT_EXCEPTION( exception_preserved_type_1, exception_preserved_value_1, exception_preserved_tb_1 );
            // Re-raise.
            exception_type = exception_keeper_type_5;
            exception_value = exception_keeper_value_5;
            exception_tb = exception_keeper_tb_5;
            exception_lineno = exception_keeper_lineno_5;

            goto try_except_handler_6;
            // End of try:
            try_end_5:;
            // Restore previous exception.
            SET_CURRENT_EXCEPTION( exception_preserved_type_1, exception_preserved_value_1, exception_preserved_tb_1 );
            goto try_end_4;
            // exception handler codes exits in all cases
            NUITKA_CANNOT_GET_HERE( subprocess$$$function_36_communicate );
            return NULL;
            // End of try:
            try_end_4:;
            tmp_result = RERAISE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
            if (unlikely( tmp_result == false ))
            {
                exception_lineno = 953;
            }

            if (exception_tb && exception_tb->tb_frame == &frame_78e27b0fea17bb4807da1cbf00c46c61->m_frame) frame_78e27b0fea17bb4807da1cbf00c46c61->m_frame.f_lineno = exception_tb->tb_lineno;
            type_description_1 = "oooooooo";
            goto try_except_handler_6;
            goto branch_end_7;
            branch_no_7:;
            tmp_result = RERAISE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
            if (unlikely( tmp_result == false ))
            {
                exception_lineno = 938;
            }

            if (exception_tb && exception_tb->tb_frame == &frame_78e27b0fea17bb4807da1cbf00c46c61->m_frame) frame_78e27b0fea17bb4807da1cbf00c46c61->m_frame.f_lineno = exception_tb->tb_lineno;
            type_description_1 = "oooooooo";
            goto try_except_handler_6;
            branch_end_7:;
        }
        // tried codes exits in all cases
        NUITKA_CANNOT_GET_HERE( subprocess$$$function_36_communicate );
        return NULL;
        // Exception handler code:
        try_except_handler_6:;
        exception_keeper_type_6 = exception_type;
        exception_keeper_value_6 = exception_value;
        exception_keeper_tb_6 = exception_tb;
        exception_keeper_lineno_6 = exception_lineno;
        exception_type = NULL;
        exception_value = NULL;
        exception_tb = NULL;
        exception_lineno = 0;

        // Restore previous exception.
        SET_CURRENT_EXCEPTION( exception_preserved_type_2, exception_preserved_value_2, exception_preserved_tb_2 );
        // Re-raise.
        exception_type = exception_keeper_type_6;
        exception_value = exception_keeper_value_6;
        exception_tb = exception_keeper_tb_6;
        exception_lineno = exception_keeper_lineno_6;

        goto try_except_handler_2;
        // End of try:
        // End of try:
        try_end_3:;
        goto try_end_6;
        // Exception handler code:
        try_except_handler_2:;
        exception_keeper_type_7 = exception_type;
        exception_keeper_value_7 = exception_value;
        exception_keeper_tb_7 = exception_tb;
        exception_keeper_lineno_7 = exception_lineno;
        exception_type = NULL;
        exception_value = NULL;
        exception_tb = NULL;
        exception_lineno = 0;

        // Preserve existing published exception.
        exception_preserved_type_3 = EXC_TYPE(PyThreadState_GET());
        Py_XINCREF( exception_preserved_type_3 );
        exception_preserved_value_3 = EXC_VALUE(PyThreadState_GET());
        Py_XINCREF( exception_preserved_value_3 );
        exception_preserved_tb_3 = (PyTracebackObject *)EXC_TRACEBACK(PyThreadState_GET());
        Py_XINCREF( exception_preserved_tb_3 );

        if ( exception_keeper_tb_7 == NULL )
        {
            exception_keeper_tb_7 = MAKE_TRACEBACK( frame_78e27b0fea17bb4807da1cbf00c46c61, exception_keeper_lineno_7 );
        }
        else if ( exception_keeper_lineno_7 != 0 )
        {
            exception_keeper_tb_7 = ADD_TRACEBACK( exception_keeper_tb_7, frame_78e27b0fea17bb4807da1cbf00c46c61, exception_keeper_lineno_7 );
        }

        NORMALIZE_EXCEPTION( &exception_keeper_type_7, &exception_keeper_value_7, &exception_keeper_tb_7 );
        PyException_SetTraceback( exception_keeper_value_7, (PyObject *)exception_keeper_tb_7 );
        PUBLISH_EXCEPTION( &exception_keeper_type_7, &exception_keeper_value_7, &exception_keeper_tb_7 );
        // Tried code:
        {
            PyObject *tmp_assattr_name_2;
            PyObject *tmp_assattr_target_2;
            tmp_assattr_name_2 = Py_True;
            CHECK_OBJECT( par_self );
            tmp_assattr_target_2 = par_self;
            tmp_result = SET_ATTRIBUTE( tmp_assattr_target_2, const_str_plain__communication_started, tmp_assattr_name_2 );
            if ( tmp_result == false )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 956;
                type_description_1 = "oooooooo";
                goto try_except_handler_9;
            }
        }
        tmp_result = RERAISE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
        if (unlikely( tmp_result == false ))
        {
            exception_lineno = 938;
        }

        if (exception_tb && exception_tb->tb_frame == &frame_78e27b0fea17bb4807da1cbf00c46c61->m_frame) frame_78e27b0fea17bb4807da1cbf00c46c61->m_frame.f_lineno = exception_tb->tb_lineno;
        type_description_1 = "oooooooo";
        goto try_except_handler_9;
        // tried codes exits in all cases
        NUITKA_CANNOT_GET_HERE( subprocess$$$function_36_communicate );
        return NULL;
        // Exception handler code:
        try_except_handler_9:;
        exception_keeper_type_8 = exception_type;
        exception_keeper_value_8 = exception_value;
        exception_keeper_tb_8 = exception_tb;
        exception_keeper_lineno_8 = exception_lineno;
        exception_type = NULL;
        exception_value = NULL;
        exception_tb = NULL;
        exception_lineno = 0;

        // Restore previous exception.
        SET_CURRENT_EXCEPTION( exception_preserved_type_3, exception_preserved_value_3, exception_preserved_tb_3 );
        // Re-raise.
        exception_type = exception_keeper_type_8;
        exception_value = exception_keeper_value_8;
        exception_tb = exception_keeper_tb_8;
        exception_lineno = exception_keeper_lineno_8;

        goto frame_exception_exit_1;
        // End of try:
        // End of try:
        try_end_6:;
        CHECK_OBJECT( (PyObject *)tmp_tuple_unpack_1__source_iter );
        Py_DECREF( tmp_tuple_unpack_1__source_iter );
        tmp_tuple_unpack_1__source_iter = NULL;

        {
            PyObject *tmp_assign_source_12;
            CHECK_OBJECT( tmp_tuple_unpack_1__element_1 );
            tmp_assign_source_12 = tmp_tuple_unpack_1__element_1;
            assert( var_stdout == NULL );
            Py_INCREF( tmp_assign_source_12 );
            var_stdout = tmp_assign_source_12;
        }
        Py_XDECREF( tmp_tuple_unpack_1__element_1 );
        tmp_tuple_unpack_1__element_1 = NULL;

        {
            PyObject *tmp_assign_source_13;
            CHECK_OBJECT( tmp_tuple_unpack_1__element_2 );
            tmp_assign_source_13 = tmp_tuple_unpack_1__element_2;
            assert( var_stderr == NULL );
            Py_INCREF( tmp_assign_source_13 );
            var_stderr = tmp_assign_source_13;
        }
        Py_XDECREF( tmp_tuple_unpack_1__element_2 );
        tmp_tuple_unpack_1__element_2 = NULL;

        {
            PyObject *tmp_assattr_name_3;
            PyObject *tmp_assattr_target_3;
            tmp_assattr_name_3 = Py_True;
            CHECK_OBJECT( par_self );
            tmp_assattr_target_3 = par_self;
            tmp_result = SET_ATTRIBUTE( tmp_assattr_target_3, const_str_plain__communication_started, tmp_assattr_name_3 );
            if ( tmp_result == false )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 956;
                type_description_1 = "oooooooo";
                goto frame_exception_exit_1;
            }
        }
        {
            PyObject *tmp_assign_source_14;
            PyObject *tmp_called_name_4;
            PyObject *tmp_source_name_16;
            PyObject *tmp_kw_name_2;
            PyObject *tmp_dict_key_2;
            PyObject *tmp_dict_value_2;
            PyObject *tmp_called_instance_10;
            PyObject *tmp_args_element_name_8;
            CHECK_OBJECT( par_self );
            tmp_source_name_16 = par_self;
            tmp_called_name_4 = LOOKUP_ATTRIBUTE( tmp_source_name_16, const_str_plain_wait );
            if ( tmp_called_name_4 == NULL )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 958;
                type_description_1 = "oooooooo";
                goto frame_exception_exit_1;
            }
            tmp_dict_key_2 = const_str_plain_timeout;
            CHECK_OBJECT( par_self );
            tmp_called_instance_10 = par_self;
            CHECK_OBJECT( var_endtime );
            tmp_args_element_name_8 = var_endtime;
            frame_78e27b0fea17bb4807da1cbf00c46c61->m_frame.f_lineno = 958;
            {
                PyObject *call_args[] = { tmp_args_element_name_8 };
                tmp_dict_value_2 = CALL_METHOD_WITH_ARGS1( tmp_called_instance_10, const_str_plain__remaining_time, call_args );
            }

            if ( tmp_dict_value_2 == NULL )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
                Py_DECREF( tmp_called_name_4 );

                exception_lineno = 958;
                type_description_1 = "oooooooo";
                goto frame_exception_exit_1;
            }
            tmp_kw_name_2 = _PyDict_NewPresized( 1 );
            tmp_res = PyDict_SetItem( tmp_kw_name_2, tmp_dict_key_2, tmp_dict_value_2 );
            Py_DECREF( tmp_dict_value_2 );
            assert( !(tmp_res != 0) );
            frame_78e27b0fea17bb4807da1cbf00c46c61->m_frame.f_lineno = 958;
            tmp_assign_source_14 = CALL_FUNCTION_WITH_KEYARGS( tmp_called_name_4, tmp_kw_name_2 );
            Py_DECREF( tmp_called_name_4 );
            Py_DECREF( tmp_kw_name_2 );
            if ( tmp_assign_source_14 == NULL )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 958;
                type_description_1 = "oooooooo";
                goto frame_exception_exit_1;
            }
            assert( var_sts == NULL );
            var_sts = tmp_assign_source_14;
        }
        branch_end_2:;
    }
    {
        PyObject *tmp_tuple_element_1;
        if ( var_stdout == NULL )
        {

            exception_type = PyExc_UnboundLocalError;
            Py_INCREF( exception_type );
            exception_value = PyUnicode_FromFormat( "local variable '%s' referenced before assignment", "stdout" );
            exception_tb = NULL;
            NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
            CHAIN_EXCEPTION( exception_value );

            exception_lineno = 960;
            type_description_1 = "oooooooo";
            goto frame_exception_exit_1;
        }

        tmp_tuple_element_1 = var_stdout;
        tmp_return_value = PyTuple_New( 2 );
        Py_INCREF( tmp_tuple_element_1 );
        PyTuple_SET_ITEM( tmp_return_value, 0, tmp_tuple_element_1 );
        if ( var_stderr == NULL )
        {
            Py_DECREF( tmp_return_value );
            exception_type = PyExc_UnboundLocalError;
            Py_INCREF( exception_type );
            exception_value = PyUnicode_FromFormat( "local variable '%s' referenced before assignment", "stderr" );
            exception_tb = NULL;
            NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
            CHAIN_EXCEPTION( exception_value );

            exception_lineno = 960;
            type_description_1 = "oooooooo";
            goto frame_exception_exit_1;
        }

        tmp_tuple_element_1 = var_stderr;
        Py_INCREF( tmp_tuple_element_1 );
        PyTuple_SET_ITEM( tmp_return_value, 1, tmp_tuple_element_1 );
        goto frame_return_exit_1;
    }

#if 0
    RESTORE_FRAME_EXCEPTION( frame_78e27b0fea17bb4807da1cbf00c46c61 );
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto frame_no_exception_1;

    frame_return_exit_1:;
#if 0
    RESTORE_FRAME_EXCEPTION( frame_78e27b0fea17bb4807da1cbf00c46c61 );
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto try_return_handler_1;

    frame_exception_exit_1:;

#if 0
    RESTORE_FRAME_EXCEPTION( frame_78e27b0fea17bb4807da1cbf00c46c61 );
#endif

    if ( exception_tb == NULL )
    {
        exception_tb = MAKE_TRACEBACK( frame_78e27b0fea17bb4807da1cbf00c46c61, exception_lineno );
    }
    else if ( exception_tb->tb_frame != &frame_78e27b0fea17bb4807da1cbf00c46c61->m_frame )
    {
        exception_tb = ADD_TRACEBACK( exception_tb, frame_78e27b0fea17bb4807da1cbf00c46c61, exception_lineno );
    }

    // Attachs locals to frame if any.
    Nuitka_Frame_AttachLocals(
        (struct Nuitka_FrameObject *)frame_78e27b0fea17bb4807da1cbf00c46c61,
        type_description_1,
        par_self,
        par_input,
        par_timeout,
        var_stdout,
        var_stderr,
        var_endtime,
        var_sigint_timeout,
        var_sts
    );


    // Release cached frame.
    if ( frame_78e27b0fea17bb4807da1cbf00c46c61 == cache_frame_78e27b0fea17bb4807da1cbf00c46c61 )
    {
        Py_DECREF( frame_78e27b0fea17bb4807da1cbf00c46c61 );
    }
    cache_frame_78e27b0fea17bb4807da1cbf00c46c61 = NULL;

    assertFrameObject( frame_78e27b0fea17bb4807da1cbf00c46c61 );

    // Put the previous frame back on top.
    popFrameStack();

    // Return the error.
    goto try_except_handler_1;

    frame_no_exception_1:;
    // tried codes exits in all cases
    NUITKA_CANNOT_GET_HERE( subprocess$$$function_36_communicate );
    return NULL;
    // Return handler code:
    try_return_handler_1:;
    CHECK_OBJECT( (PyObject *)par_self );
    Py_DECREF( par_self );
    par_self = NULL;

    CHECK_OBJECT( (PyObject *)par_input );
    Py_DECREF( par_input );
    par_input = NULL;

    CHECK_OBJECT( (PyObject *)par_timeout );
    Py_DECREF( par_timeout );
    par_timeout = NULL;

    Py_XDECREF( var_stdout );
    var_stdout = NULL;

    Py_XDECREF( var_stderr );
    var_stderr = NULL;

    Py_XDECREF( var_endtime );
    var_endtime = NULL;

    Py_XDECREF( var_sts );
    var_sts = NULL;

    goto function_return_exit;
    // Exception handler code:
    try_except_handler_1:;
    exception_keeper_type_9 = exception_type;
    exception_keeper_value_9 = exception_value;
    exception_keeper_tb_9 = exception_tb;
    exception_keeper_lineno_9 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    CHECK_OBJECT( (PyObject *)par_self );
    Py_DECREF( par_self );
    par_self = NULL;

    CHECK_OBJECT( (PyObject *)par_input );
    Py_DECREF( par_input );
    par_input = NULL;

    CHECK_OBJECT( (PyObject *)par_timeout );
    Py_DECREF( par_timeout );
    par_timeout = NULL;

    Py_XDECREF( var_stdout );
    var_stdout = NULL;

    Py_XDECREF( var_stderr );
    var_stderr = NULL;

    Py_XDECREF( var_endtime );
    var_endtime = NULL;

    Py_XDECREF( var_sigint_timeout );
    var_sigint_timeout = NULL;

    Py_XDECREF( var_sts );
    var_sts = NULL;

    // Re-raise.
    exception_type = exception_keeper_type_9;
    exception_value = exception_keeper_value_9;
    exception_tb = exception_keeper_tb_9;
    exception_lineno = exception_keeper_lineno_9;

    goto function_exception_exit;
    // End of try:

    // Return statement must have exited already.
    NUITKA_CANNOT_GET_HERE( subprocess$$$function_36_communicate );
    return NULL;

function_exception_exit:
    assert( exception_type );
    RESTORE_ERROR_OCCURRED( exception_type, exception_value, exception_tb );

    return NULL;

function_return_exit:
   // Function cleanup code if any.


   // Actual function exit with return value, making sure we did not make
   // the error status worse despite non-NULL return.
   CHECK_OBJECT( tmp_return_value );
   assert( had_error || !ERROR_OCCURRED() );
   return tmp_return_value;
}


static PyObject *impl_subprocess$$$function_37_poll( struct Nuitka_FunctionObject const *self, PyObject **python_pars )
{
    // Preserve error status for checks
#ifndef __NUITKA_NO_ASSERT__
    NUITKA_MAY_BE_UNUSED bool had_error = ERROR_OCCURRED();
#endif

    // Local variable declarations.
    PyObject *par_self = python_pars[ 0 ];
    struct Nuitka_FrameObject *frame_87577be703ef6ca741a608913b4ddfe9;
    NUITKA_MAY_BE_UNUSED char const *type_description_1 = NULL;
    PyObject *tmp_return_value = NULL;
    PyObject *exception_type = NULL;
    PyObject *exception_value = NULL;
    PyTracebackObject *exception_tb = NULL;
    NUITKA_MAY_BE_UNUSED int exception_lineno = 0;
    static struct Nuitka_FrameObject *cache_frame_87577be703ef6ca741a608913b4ddfe9 = NULL;
    PyObject *exception_keeper_type_1;
    PyObject *exception_keeper_value_1;
    PyTracebackObject *exception_keeper_tb_1;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_1;

    // Actual function body.
    // Tried code:
    MAKE_OR_REUSE_FRAME( cache_frame_87577be703ef6ca741a608913b4ddfe9, codeobj_87577be703ef6ca741a608913b4ddfe9, module_subprocess, sizeof(void *) );
    frame_87577be703ef6ca741a608913b4ddfe9 = cache_frame_87577be703ef6ca741a608913b4ddfe9;

    // Push the new frame as the currently active one.
    pushFrameStack( frame_87577be703ef6ca741a608913b4ddfe9 );

    // Mark the frame object as in use, ref count 1 will be up for reuse.
    assert( Py_REFCNT( frame_87577be703ef6ca741a608913b4ddfe9 ) == 2 ); // Frame stack

    // Framed code:
    {
        PyObject *tmp_called_instance_1;
        CHECK_OBJECT( par_self );
        tmp_called_instance_1 = par_self;
        frame_87577be703ef6ca741a608913b4ddfe9->m_frame.f_lineno = 966;
        tmp_return_value = CALL_METHOD_NO_ARGS( tmp_called_instance_1, const_str_plain__internal_poll );
        if ( tmp_return_value == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 966;
            type_description_1 = "o";
            goto frame_exception_exit_1;
        }
        goto frame_return_exit_1;
    }

#if 0
    RESTORE_FRAME_EXCEPTION( frame_87577be703ef6ca741a608913b4ddfe9 );
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto frame_no_exception_1;

    frame_return_exit_1:;
#if 0
    RESTORE_FRAME_EXCEPTION( frame_87577be703ef6ca741a608913b4ddfe9 );
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto try_return_handler_1;

    frame_exception_exit_1:;

#if 0
    RESTORE_FRAME_EXCEPTION( frame_87577be703ef6ca741a608913b4ddfe9 );
#endif

    if ( exception_tb == NULL )
    {
        exception_tb = MAKE_TRACEBACK( frame_87577be703ef6ca741a608913b4ddfe9, exception_lineno );
    }
    else if ( exception_tb->tb_frame != &frame_87577be703ef6ca741a608913b4ddfe9->m_frame )
    {
        exception_tb = ADD_TRACEBACK( exception_tb, frame_87577be703ef6ca741a608913b4ddfe9, exception_lineno );
    }

    // Attachs locals to frame if any.
    Nuitka_Frame_AttachLocals(
        (struct Nuitka_FrameObject *)frame_87577be703ef6ca741a608913b4ddfe9,
        type_description_1,
        par_self
    );


    // Release cached frame.
    if ( frame_87577be703ef6ca741a608913b4ddfe9 == cache_frame_87577be703ef6ca741a608913b4ddfe9 )
    {
        Py_DECREF( frame_87577be703ef6ca741a608913b4ddfe9 );
    }
    cache_frame_87577be703ef6ca741a608913b4ddfe9 = NULL;

    assertFrameObject( frame_87577be703ef6ca741a608913b4ddfe9 );

    // Put the previous frame back on top.
    popFrameStack();

    // Return the error.
    goto try_except_handler_1;

    frame_no_exception_1:;
    // tried codes exits in all cases
    NUITKA_CANNOT_GET_HERE( subprocess$$$function_37_poll );
    return NULL;
    // Return handler code:
    try_return_handler_1:;
    CHECK_OBJECT( (PyObject *)par_self );
    Py_DECREF( par_self );
    par_self = NULL;

    goto function_return_exit;
    // Exception handler code:
    try_except_handler_1:;
    exception_keeper_type_1 = exception_type;
    exception_keeper_value_1 = exception_value;
    exception_keeper_tb_1 = exception_tb;
    exception_keeper_lineno_1 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    CHECK_OBJECT( (PyObject *)par_self );
    Py_DECREF( par_self );
    par_self = NULL;

    // Re-raise.
    exception_type = exception_keeper_type_1;
    exception_value = exception_keeper_value_1;
    exception_tb = exception_keeper_tb_1;
    exception_lineno = exception_keeper_lineno_1;

    goto function_exception_exit;
    // End of try:

    // Return statement must have exited already.
    NUITKA_CANNOT_GET_HERE( subprocess$$$function_37_poll );
    return NULL;

function_exception_exit:
    assert( exception_type );
    RESTORE_ERROR_OCCURRED( exception_type, exception_value, exception_tb );

    return NULL;

function_return_exit:
   // Function cleanup code if any.


   // Actual function exit with return value, making sure we did not make
   // the error status worse despite non-NULL return.
   CHECK_OBJECT( tmp_return_value );
   assert( had_error || !ERROR_OCCURRED() );
   return tmp_return_value;
}


static PyObject *impl_subprocess$$$function_38__remaining_time( struct Nuitka_FunctionObject const *self, PyObject **python_pars )
{
    // Preserve error status for checks
#ifndef __NUITKA_NO_ASSERT__
    NUITKA_MAY_BE_UNUSED bool had_error = ERROR_OCCURRED();
#endif

    // Local variable declarations.
    PyObject *par_self = python_pars[ 0 ];
    PyObject *par_endtime = python_pars[ 1 ];
    struct Nuitka_FrameObject *frame_f509d8cccefcdfabcd164c7da0c88071;
    NUITKA_MAY_BE_UNUSED char const *type_description_1 = NULL;
    PyObject *tmp_return_value = NULL;
    PyObject *exception_type = NULL;
    PyObject *exception_value = NULL;
    PyTracebackObject *exception_tb = NULL;
    NUITKA_MAY_BE_UNUSED int exception_lineno = 0;
    static struct Nuitka_FrameObject *cache_frame_f509d8cccefcdfabcd164c7da0c88071 = NULL;
    PyObject *exception_keeper_type_1;
    PyObject *exception_keeper_value_1;
    PyTracebackObject *exception_keeper_tb_1;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_1;

    // Actual function body.
    // Tried code:
    MAKE_OR_REUSE_FRAME( cache_frame_f509d8cccefcdfabcd164c7da0c88071, codeobj_f509d8cccefcdfabcd164c7da0c88071, module_subprocess, sizeof(void *)+sizeof(void *) );
    frame_f509d8cccefcdfabcd164c7da0c88071 = cache_frame_f509d8cccefcdfabcd164c7da0c88071;

    // Push the new frame as the currently active one.
    pushFrameStack( frame_f509d8cccefcdfabcd164c7da0c88071 );

    // Mark the frame object as in use, ref count 1 will be up for reuse.
    assert( Py_REFCNT( frame_f509d8cccefcdfabcd164c7da0c88071 ) == 2 ); // Frame stack

    // Framed code:
    {
        nuitka_bool tmp_condition_result_1;
        PyObject *tmp_compexpr_left_1;
        PyObject *tmp_compexpr_right_1;
        CHECK_OBJECT( par_endtime );
        tmp_compexpr_left_1 = par_endtime;
        tmp_compexpr_right_1 = Py_None;
        tmp_condition_result_1 = ( tmp_compexpr_left_1 == tmp_compexpr_right_1 ) ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
        if ( tmp_condition_result_1 == NUITKA_BOOL_TRUE )
        {
            goto branch_yes_1;
        }
        else
        {
            goto branch_no_1;
        }
        branch_yes_1:;
        tmp_return_value = Py_None;
        Py_INCREF( tmp_return_value );
        goto frame_return_exit_1;
        goto branch_end_1;
        branch_no_1:;
        {
            PyObject *tmp_left_name_1;
            PyObject *tmp_right_name_1;
            PyObject *tmp_called_name_1;
            PyObject *tmp_mvar_value_1;
            CHECK_OBJECT( par_endtime );
            tmp_left_name_1 = par_endtime;
            tmp_mvar_value_1 = GET_STRING_DICT_VALUE( moduledict_subprocess, (Nuitka_StringObject *)const_str_plain__time );

            if (unlikely( tmp_mvar_value_1 == NULL ))
            {
                tmp_mvar_value_1 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain__time );
            }

            if ( tmp_mvar_value_1 == NULL )
            {

                exception_type = PyExc_NameError;
                Py_INCREF( exception_type );
                exception_value = PyUnicode_FromFormat( "name '%s' is not defined", "_time" );
                exception_tb = NULL;
                NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
                CHAIN_EXCEPTION( exception_value );

                exception_lineno = 974;
                type_description_1 = "oo";
                goto frame_exception_exit_1;
            }

            tmp_called_name_1 = tmp_mvar_value_1;
            frame_f509d8cccefcdfabcd164c7da0c88071->m_frame.f_lineno = 974;
            tmp_right_name_1 = CALL_FUNCTION_NO_ARGS( tmp_called_name_1 );
            if ( tmp_right_name_1 == NULL )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 974;
                type_description_1 = "oo";
                goto frame_exception_exit_1;
            }
            tmp_return_value = BINARY_OPERATION_SUB( tmp_left_name_1, tmp_right_name_1 );
            Py_DECREF( tmp_right_name_1 );
            if ( tmp_return_value == NULL )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 974;
                type_description_1 = "oo";
                goto frame_exception_exit_1;
            }
            goto frame_return_exit_1;
        }
        branch_end_1:;
    }

#if 0
    RESTORE_FRAME_EXCEPTION( frame_f509d8cccefcdfabcd164c7da0c88071 );
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto frame_no_exception_1;

    frame_return_exit_1:;
#if 0
    RESTORE_FRAME_EXCEPTION( frame_f509d8cccefcdfabcd164c7da0c88071 );
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto try_return_handler_1;

    frame_exception_exit_1:;

#if 0
    RESTORE_FRAME_EXCEPTION( frame_f509d8cccefcdfabcd164c7da0c88071 );
#endif

    if ( exception_tb == NULL )
    {
        exception_tb = MAKE_TRACEBACK( frame_f509d8cccefcdfabcd164c7da0c88071, exception_lineno );
    }
    else if ( exception_tb->tb_frame != &frame_f509d8cccefcdfabcd164c7da0c88071->m_frame )
    {
        exception_tb = ADD_TRACEBACK( exception_tb, frame_f509d8cccefcdfabcd164c7da0c88071, exception_lineno );
    }

    // Attachs locals to frame if any.
    Nuitka_Frame_AttachLocals(
        (struct Nuitka_FrameObject *)frame_f509d8cccefcdfabcd164c7da0c88071,
        type_description_1,
        par_self,
        par_endtime
    );


    // Release cached frame.
    if ( frame_f509d8cccefcdfabcd164c7da0c88071 == cache_frame_f509d8cccefcdfabcd164c7da0c88071 )
    {
        Py_DECREF( frame_f509d8cccefcdfabcd164c7da0c88071 );
    }
    cache_frame_f509d8cccefcdfabcd164c7da0c88071 = NULL;

    assertFrameObject( frame_f509d8cccefcdfabcd164c7da0c88071 );

    // Put the previous frame back on top.
    popFrameStack();

    // Return the error.
    goto try_except_handler_1;

    frame_no_exception_1:;
    // tried codes exits in all cases
    NUITKA_CANNOT_GET_HERE( subprocess$$$function_38__remaining_time );
    return NULL;
    // Return handler code:
    try_return_handler_1:;
    CHECK_OBJECT( (PyObject *)par_self );
    Py_DECREF( par_self );
    par_self = NULL;

    CHECK_OBJECT( (PyObject *)par_endtime );
    Py_DECREF( par_endtime );
    par_endtime = NULL;

    goto function_return_exit;
    // Exception handler code:
    try_except_handler_1:;
    exception_keeper_type_1 = exception_type;
    exception_keeper_value_1 = exception_value;
    exception_keeper_tb_1 = exception_tb;
    exception_keeper_lineno_1 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    CHECK_OBJECT( (PyObject *)par_self );
    Py_DECREF( par_self );
    par_self = NULL;

    CHECK_OBJECT( (PyObject *)par_endtime );
    Py_DECREF( par_endtime );
    par_endtime = NULL;

    // Re-raise.
    exception_type = exception_keeper_type_1;
    exception_value = exception_keeper_value_1;
    exception_tb = exception_keeper_tb_1;
    exception_lineno = exception_keeper_lineno_1;

    goto function_exception_exit;
    // End of try:

    // Return statement must have exited already.
    NUITKA_CANNOT_GET_HERE( subprocess$$$function_38__remaining_time );
    return NULL;

function_exception_exit:
    assert( exception_type );
    RESTORE_ERROR_OCCURRED( exception_type, exception_value, exception_tb );

    return NULL;

function_return_exit:
   // Function cleanup code if any.


   // Actual function exit with return value, making sure we did not make
   // the error status worse despite non-NULL return.
   CHECK_OBJECT( tmp_return_value );
   assert( had_error || !ERROR_OCCURRED() );
   return tmp_return_value;
}


static PyObject *impl_subprocess$$$function_39__check_timeout( struct Nuitka_FunctionObject const *self, PyObject **python_pars )
{
    // Preserve error status for checks
#ifndef __NUITKA_NO_ASSERT__
    NUITKA_MAY_BE_UNUSED bool had_error = ERROR_OCCURRED();
#endif

    // Local variable declarations.
    PyObject *par_self = python_pars[ 0 ];
    PyObject *par_endtime = python_pars[ 1 ];
    PyObject *par_orig_timeout = python_pars[ 2 ];
    PyObject *tmp_return_value = NULL;
    struct Nuitka_FrameObject *frame_0b619157658b6bba36dd9c0cb11c64d6;
    NUITKA_MAY_BE_UNUSED char const *type_description_1 = NULL;
    PyObject *exception_type = NULL;
    PyObject *exception_value = NULL;
    PyTracebackObject *exception_tb = NULL;
    NUITKA_MAY_BE_UNUSED int exception_lineno = 0;
    int tmp_res;
    static struct Nuitka_FrameObject *cache_frame_0b619157658b6bba36dd9c0cb11c64d6 = NULL;
    PyObject *exception_keeper_type_1;
    PyObject *exception_keeper_value_1;
    PyTracebackObject *exception_keeper_tb_1;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_1;

    // Actual function body.
    // Tried code:
    {
        nuitka_bool tmp_condition_result_1;
        PyObject *tmp_compexpr_left_1;
        PyObject *tmp_compexpr_right_1;
        CHECK_OBJECT( par_endtime );
        tmp_compexpr_left_1 = par_endtime;
        tmp_compexpr_right_1 = Py_None;
        tmp_condition_result_1 = ( tmp_compexpr_left_1 == tmp_compexpr_right_1 ) ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
        if ( tmp_condition_result_1 == NUITKA_BOOL_TRUE )
        {
            goto branch_yes_1;
        }
        else
        {
            goto branch_no_1;
        }
        branch_yes_1:;
        tmp_return_value = Py_None;
        Py_INCREF( tmp_return_value );
        goto try_return_handler_1;
        branch_no_1:;
    }
    MAKE_OR_REUSE_FRAME( cache_frame_0b619157658b6bba36dd9c0cb11c64d6, codeobj_0b619157658b6bba36dd9c0cb11c64d6, module_subprocess, sizeof(void *)+sizeof(void *)+sizeof(void *) );
    frame_0b619157658b6bba36dd9c0cb11c64d6 = cache_frame_0b619157658b6bba36dd9c0cb11c64d6;

    // Push the new frame as the currently active one.
    pushFrameStack( frame_0b619157658b6bba36dd9c0cb11c64d6 );

    // Mark the frame object as in use, ref count 1 will be up for reuse.
    assert( Py_REFCNT( frame_0b619157658b6bba36dd9c0cb11c64d6 ) == 2 ); // Frame stack

    // Framed code:
    {
        nuitka_bool tmp_condition_result_2;
        PyObject *tmp_compexpr_left_2;
        PyObject *tmp_compexpr_right_2;
        PyObject *tmp_called_name_1;
        PyObject *tmp_mvar_value_1;
        tmp_mvar_value_1 = GET_STRING_DICT_VALUE( moduledict_subprocess, (Nuitka_StringObject *)const_str_plain__time );

        if (unlikely( tmp_mvar_value_1 == NULL ))
        {
            tmp_mvar_value_1 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain__time );
        }

        if ( tmp_mvar_value_1 == NULL )
        {

            exception_type = PyExc_NameError;
            Py_INCREF( exception_type );
            exception_value = PyUnicode_FromFormat( "name '%s' is not defined", "_time" );
            exception_tb = NULL;
            NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
            CHAIN_EXCEPTION( exception_value );

            exception_lineno = 981;
            type_description_1 = "ooo";
            goto frame_exception_exit_1;
        }

        tmp_called_name_1 = tmp_mvar_value_1;
        frame_0b619157658b6bba36dd9c0cb11c64d6->m_frame.f_lineno = 981;
        tmp_compexpr_left_2 = CALL_FUNCTION_NO_ARGS( tmp_called_name_1 );
        if ( tmp_compexpr_left_2 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 981;
            type_description_1 = "ooo";
            goto frame_exception_exit_1;
        }
        CHECK_OBJECT( par_endtime );
        tmp_compexpr_right_2 = par_endtime;
        tmp_res = RICH_COMPARE_BOOL_GT_OBJECT_OBJECT( tmp_compexpr_left_2, tmp_compexpr_right_2 );
        Py_DECREF( tmp_compexpr_left_2 );
        if ( tmp_res == -1 )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 981;
            type_description_1 = "ooo";
            goto frame_exception_exit_1;
        }
        tmp_condition_result_2 = ( tmp_res != 0 ) ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
        if ( tmp_condition_result_2 == NUITKA_BOOL_TRUE )
        {
            goto branch_yes_2;
        }
        else
        {
            goto branch_no_2;
        }
        branch_yes_2:;
        {
            PyObject *tmp_raise_type_1;
            PyObject *tmp_called_name_2;
            PyObject *tmp_mvar_value_2;
            PyObject *tmp_args_element_name_1;
            PyObject *tmp_source_name_1;
            PyObject *tmp_args_element_name_2;
            tmp_mvar_value_2 = GET_STRING_DICT_VALUE( moduledict_subprocess, (Nuitka_StringObject *)const_str_plain_TimeoutExpired );

            if (unlikely( tmp_mvar_value_2 == NULL ))
            {
                tmp_mvar_value_2 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_TimeoutExpired );
            }

            if ( tmp_mvar_value_2 == NULL )
            {

                exception_type = PyExc_NameError;
                Py_INCREF( exception_type );
                exception_value = PyUnicode_FromFormat( "name '%s' is not defined", "TimeoutExpired" );
                exception_tb = NULL;
                NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
                CHAIN_EXCEPTION( exception_value );

                exception_lineno = 982;
                type_description_1 = "ooo";
                goto frame_exception_exit_1;
            }

            tmp_called_name_2 = tmp_mvar_value_2;
            CHECK_OBJECT( par_self );
            tmp_source_name_1 = par_self;
            tmp_args_element_name_1 = LOOKUP_ATTRIBUTE( tmp_source_name_1, const_str_plain_args );
            if ( tmp_args_element_name_1 == NULL )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 982;
                type_description_1 = "ooo";
                goto frame_exception_exit_1;
            }
            CHECK_OBJECT( par_orig_timeout );
            tmp_args_element_name_2 = par_orig_timeout;
            frame_0b619157658b6bba36dd9c0cb11c64d6->m_frame.f_lineno = 982;
            {
                PyObject *call_args[] = { tmp_args_element_name_1, tmp_args_element_name_2 };
                tmp_raise_type_1 = CALL_FUNCTION_WITH_ARGS2( tmp_called_name_2, call_args );
            }

            Py_DECREF( tmp_args_element_name_1 );
            if ( tmp_raise_type_1 == NULL )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 982;
                type_description_1 = "ooo";
                goto frame_exception_exit_1;
            }
            exception_type = tmp_raise_type_1;
            exception_lineno = 982;
            RAISE_EXCEPTION_WITH_TYPE( &exception_type, &exception_value, &exception_tb );
            type_description_1 = "ooo";
            goto frame_exception_exit_1;
        }
        branch_no_2:;
    }

#if 0
    RESTORE_FRAME_EXCEPTION( frame_0b619157658b6bba36dd9c0cb11c64d6 );
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto frame_no_exception_1;

    frame_exception_exit_1:;

#if 0
    RESTORE_FRAME_EXCEPTION( frame_0b619157658b6bba36dd9c0cb11c64d6 );
#endif

    if ( exception_tb == NULL )
    {
        exception_tb = MAKE_TRACEBACK( frame_0b619157658b6bba36dd9c0cb11c64d6, exception_lineno );
    }
    else if ( exception_tb->tb_frame != &frame_0b619157658b6bba36dd9c0cb11c64d6->m_frame )
    {
        exception_tb = ADD_TRACEBACK( exception_tb, frame_0b619157658b6bba36dd9c0cb11c64d6, exception_lineno );
    }

    // Attachs locals to frame if any.
    Nuitka_Frame_AttachLocals(
        (struct Nuitka_FrameObject *)frame_0b619157658b6bba36dd9c0cb11c64d6,
        type_description_1,
        par_self,
        par_endtime,
        par_orig_timeout
    );


    // Release cached frame.
    if ( frame_0b619157658b6bba36dd9c0cb11c64d6 == cache_frame_0b619157658b6bba36dd9c0cb11c64d6 )
    {
        Py_DECREF( frame_0b619157658b6bba36dd9c0cb11c64d6 );
    }
    cache_frame_0b619157658b6bba36dd9c0cb11c64d6 = NULL;

    assertFrameObject( frame_0b619157658b6bba36dd9c0cb11c64d6 );

    // Put the previous frame back on top.
    popFrameStack();

    // Return the error.
    goto try_except_handler_1;

    frame_no_exception_1:;
    tmp_return_value = Py_None;
    Py_INCREF( tmp_return_value );
    goto try_return_handler_1;
    // tried codes exits in all cases
    NUITKA_CANNOT_GET_HERE( subprocess$$$function_39__check_timeout );
    return NULL;
    // Return handler code:
    try_return_handler_1:;
    CHECK_OBJECT( (PyObject *)par_self );
    Py_DECREF( par_self );
    par_self = NULL;

    CHECK_OBJECT( (PyObject *)par_endtime );
    Py_DECREF( par_endtime );
    par_endtime = NULL;

    CHECK_OBJECT( (PyObject *)par_orig_timeout );
    Py_DECREF( par_orig_timeout );
    par_orig_timeout = NULL;

    goto function_return_exit;
    // Exception handler code:
    try_except_handler_1:;
    exception_keeper_type_1 = exception_type;
    exception_keeper_value_1 = exception_value;
    exception_keeper_tb_1 = exception_tb;
    exception_keeper_lineno_1 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    CHECK_OBJECT( (PyObject *)par_self );
    Py_DECREF( par_self );
    par_self = NULL;

    CHECK_OBJECT( (PyObject *)par_endtime );
    Py_DECREF( par_endtime );
    par_endtime = NULL;

    CHECK_OBJECT( (PyObject *)par_orig_timeout );
    Py_DECREF( par_orig_timeout );
    par_orig_timeout = NULL;

    // Re-raise.
    exception_type = exception_keeper_type_1;
    exception_value = exception_keeper_value_1;
    exception_tb = exception_keeper_tb_1;
    exception_lineno = exception_keeper_lineno_1;

    goto function_exception_exit;
    // End of try:

    // Return statement must have exited already.
    NUITKA_CANNOT_GET_HERE( subprocess$$$function_39__check_timeout );
    return NULL;

function_exception_exit:
    assert( exception_type );
    RESTORE_ERROR_OCCURRED( exception_type, exception_value, exception_tb );

    return NULL;

function_return_exit:
   // Function cleanup code if any.


   // Actual function exit with return value, making sure we did not make
   // the error status worse despite non-NULL return.
   CHECK_OBJECT( tmp_return_value );
   assert( had_error || !ERROR_OCCURRED() );
   return tmp_return_value;
}


static PyObject *impl_subprocess$$$function_40_wait( struct Nuitka_FunctionObject const *self, PyObject **python_pars )
{
    // Preserve error status for checks
#ifndef __NUITKA_NO_ASSERT__
    NUITKA_MAY_BE_UNUSED bool had_error = ERROR_OCCURRED();
#endif

    // Local variable declarations.
    PyObject *par_self = python_pars[ 0 ];
    PyObject *par_timeout = python_pars[ 1 ];
    PyObject *var_endtime = NULL;
    PyObject *var_sigint_timeout = NULL;
    struct Nuitka_FrameObject *frame_12f0d521926b7d02309cee945224ffb2;
    NUITKA_MAY_BE_UNUSED char const *type_description_1 = NULL;
    PyObject *exception_type = NULL;
    PyObject *exception_value = NULL;
    PyTracebackObject *exception_tb = NULL;
    NUITKA_MAY_BE_UNUSED int exception_lineno = 0;
    PyObject *tmp_return_value = NULL;
    int tmp_res;
    PyObject *exception_keeper_type_1;
    PyObject *exception_keeper_value_1;
    PyTracebackObject *exception_keeper_tb_1;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_1;
    PyObject *exception_preserved_type_2;
    PyObject *exception_preserved_value_2;
    PyTracebackObject *exception_preserved_tb_2;
    bool tmp_result;
    PyObject *exception_keeper_type_2;
    PyObject *exception_keeper_value_2;
    PyTracebackObject *exception_keeper_tb_2;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_2;
    PyObject *exception_preserved_type_1;
    PyObject *exception_preserved_value_1;
    PyTracebackObject *exception_preserved_tb_1;
    PyObject *exception_keeper_type_3;
    PyObject *exception_keeper_value_3;
    PyTracebackObject *exception_keeper_tb_3;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_3;
    PyObject *exception_keeper_type_4;
    PyObject *exception_keeper_value_4;
    PyTracebackObject *exception_keeper_tb_4;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_4;
    static struct Nuitka_FrameObject *cache_frame_12f0d521926b7d02309cee945224ffb2 = NULL;
    PyObject *exception_keeper_type_5;
    PyObject *exception_keeper_value_5;
    PyTracebackObject *exception_keeper_tb_5;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_5;

    // Actual function body.
    // Tried code:
    MAKE_OR_REUSE_FRAME( cache_frame_12f0d521926b7d02309cee945224ffb2, codeobj_12f0d521926b7d02309cee945224ffb2, module_subprocess, sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *) );
    frame_12f0d521926b7d02309cee945224ffb2 = cache_frame_12f0d521926b7d02309cee945224ffb2;

    // Push the new frame as the currently active one.
    pushFrameStack( frame_12f0d521926b7d02309cee945224ffb2 );

    // Mark the frame object as in use, ref count 1 will be up for reuse.
    assert( Py_REFCNT( frame_12f0d521926b7d02309cee945224ffb2 ) == 2 ); // Frame stack

    // Framed code:
    {
        nuitka_bool tmp_condition_result_1;
        PyObject *tmp_compexpr_left_1;
        PyObject *tmp_compexpr_right_1;
        CHECK_OBJECT( par_timeout );
        tmp_compexpr_left_1 = par_timeout;
        tmp_compexpr_right_1 = Py_None;
        tmp_condition_result_1 = ( tmp_compexpr_left_1 != tmp_compexpr_right_1 ) ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
        if ( tmp_condition_result_1 == NUITKA_BOOL_TRUE )
        {
            goto branch_yes_1;
        }
        else
        {
            goto branch_no_1;
        }
        branch_yes_1:;
        {
            PyObject *tmp_assign_source_1;
            PyObject *tmp_left_name_1;
            PyObject *tmp_called_name_1;
            PyObject *tmp_mvar_value_1;
            PyObject *tmp_right_name_1;
            tmp_mvar_value_1 = GET_STRING_DICT_VALUE( moduledict_subprocess, (Nuitka_StringObject *)const_str_plain__time );

            if (unlikely( tmp_mvar_value_1 == NULL ))
            {
                tmp_mvar_value_1 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain__time );
            }

            if ( tmp_mvar_value_1 == NULL )
            {

                exception_type = PyExc_NameError;
                Py_INCREF( exception_type );
                exception_value = PyUnicode_FromFormat( "name '%s' is not defined", "_time" );
                exception_tb = NULL;
                NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
                CHAIN_EXCEPTION( exception_value );

                exception_lineno = 988;
                type_description_1 = "oooo";
                goto frame_exception_exit_1;
            }

            tmp_called_name_1 = tmp_mvar_value_1;
            frame_12f0d521926b7d02309cee945224ffb2->m_frame.f_lineno = 988;
            tmp_left_name_1 = CALL_FUNCTION_NO_ARGS( tmp_called_name_1 );
            if ( tmp_left_name_1 == NULL )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 988;
                type_description_1 = "oooo";
                goto frame_exception_exit_1;
            }
            CHECK_OBJECT( par_timeout );
            tmp_right_name_1 = par_timeout;
            tmp_assign_source_1 = BINARY_OPERATION_ADD_OBJECT_OBJECT( tmp_left_name_1, tmp_right_name_1 );
            Py_DECREF( tmp_left_name_1 );
            if ( tmp_assign_source_1 == NULL )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 988;
                type_description_1 = "oooo";
                goto frame_exception_exit_1;
            }
            assert( var_endtime == NULL );
            var_endtime = tmp_assign_source_1;
        }
        branch_no_1:;
    }
    // Tried code:
    {
        PyObject *tmp_called_name_2;
        PyObject *tmp_source_name_1;
        PyObject *tmp_kw_name_1;
        PyObject *tmp_dict_key_1;
        PyObject *tmp_dict_value_1;
        CHECK_OBJECT( par_self );
        tmp_source_name_1 = par_self;
        tmp_called_name_2 = LOOKUP_ATTRIBUTE( tmp_source_name_1, const_str_plain__wait );
        if ( tmp_called_name_2 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 990;
            type_description_1 = "oooo";
            goto try_except_handler_2;
        }
        tmp_dict_key_1 = const_str_plain_timeout;
        CHECK_OBJECT( par_timeout );
        tmp_dict_value_1 = par_timeout;
        tmp_kw_name_1 = _PyDict_NewPresized( 1 );
        tmp_res = PyDict_SetItem( tmp_kw_name_1, tmp_dict_key_1, tmp_dict_value_1 );
        assert( !(tmp_res != 0) );
        frame_12f0d521926b7d02309cee945224ffb2->m_frame.f_lineno = 990;
        tmp_return_value = CALL_FUNCTION_WITH_KEYARGS( tmp_called_name_2, tmp_kw_name_1 );
        Py_DECREF( tmp_called_name_2 );
        Py_DECREF( tmp_kw_name_1 );
        if ( tmp_return_value == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 990;
            type_description_1 = "oooo";
            goto try_except_handler_2;
        }
        goto frame_return_exit_1;
    }
    // tried codes exits in all cases
    NUITKA_CANNOT_GET_HERE( subprocess$$$function_40_wait );
    return NULL;
    // Exception handler code:
    try_except_handler_2:;
    exception_keeper_type_1 = exception_type;
    exception_keeper_value_1 = exception_value;
    exception_keeper_tb_1 = exception_tb;
    exception_keeper_lineno_1 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    // Preserve existing published exception.
    exception_preserved_type_2 = EXC_TYPE(PyThreadState_GET());
    Py_XINCREF( exception_preserved_type_2 );
    exception_preserved_value_2 = EXC_VALUE(PyThreadState_GET());
    Py_XINCREF( exception_preserved_value_2 );
    exception_preserved_tb_2 = (PyTracebackObject *)EXC_TRACEBACK(PyThreadState_GET());
    Py_XINCREF( exception_preserved_tb_2 );

    if ( exception_keeper_tb_1 == NULL )
    {
        exception_keeper_tb_1 = MAKE_TRACEBACK( frame_12f0d521926b7d02309cee945224ffb2, exception_keeper_lineno_1 );
    }
    else if ( exception_keeper_lineno_1 != 0 )
    {
        exception_keeper_tb_1 = ADD_TRACEBACK( exception_keeper_tb_1, frame_12f0d521926b7d02309cee945224ffb2, exception_keeper_lineno_1 );
    }

    NORMALIZE_EXCEPTION( &exception_keeper_type_1, &exception_keeper_value_1, &exception_keeper_tb_1 );
    PyException_SetTraceback( exception_keeper_value_1, (PyObject *)exception_keeper_tb_1 );
    PUBLISH_EXCEPTION( &exception_keeper_type_1, &exception_keeper_value_1, &exception_keeper_tb_1 );
    // Tried code:
    {
        nuitka_bool tmp_condition_result_2;
        PyObject *tmp_compexpr_left_2;
        PyObject *tmp_compexpr_right_2;
        tmp_compexpr_left_2 = EXC_TYPE(PyThreadState_GET());
        tmp_compexpr_right_2 = PyExc_KeyboardInterrupt;
        tmp_res = EXCEPTION_MATCH_BOOL( tmp_compexpr_left_2, tmp_compexpr_right_2 );
        if ( tmp_res == -1 )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 991;
            type_description_1 = "oooo";
            goto try_except_handler_3;
        }
        tmp_condition_result_2 = ( tmp_res != 0 ) ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
        if ( tmp_condition_result_2 == NUITKA_BOOL_TRUE )
        {
            goto branch_yes_2;
        }
        else
        {
            goto branch_no_2;
        }
        branch_yes_2:;
        {
            nuitka_bool tmp_condition_result_3;
            PyObject *tmp_compexpr_left_3;
            PyObject *tmp_compexpr_right_3;
            CHECK_OBJECT( par_timeout );
            tmp_compexpr_left_3 = par_timeout;
            tmp_compexpr_right_3 = Py_None;
            tmp_condition_result_3 = ( tmp_compexpr_left_3 != tmp_compexpr_right_3 ) ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
            if ( tmp_condition_result_3 == NUITKA_BOOL_TRUE )
            {
                goto branch_yes_3;
            }
            else
            {
                goto branch_no_3;
            }
            branch_yes_3:;
            {
                PyObject *tmp_assign_source_2;
                PyObject *tmp_called_name_3;
                PyObject *tmp_args_element_name_1;
                PyObject *tmp_source_name_2;
                PyObject *tmp_args_element_name_2;
                PyObject *tmp_called_name_4;
                PyObject *tmp_source_name_3;
                PyObject *tmp_args_element_name_3;
                tmp_called_name_3 = LOOKUP_BUILTIN( const_str_plain_min );
                assert( tmp_called_name_3 != NULL );
                CHECK_OBJECT( par_self );
                tmp_source_name_2 = par_self;
                tmp_args_element_name_1 = LOOKUP_ATTRIBUTE( tmp_source_name_2, const_str_plain__sigint_wait_secs );
                if ( tmp_args_element_name_1 == NULL )
                {
                    assert( ERROR_OCCURRED() );

                    FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                    exception_lineno = 997;
                    type_description_1 = "oooo";
                    goto try_except_handler_3;
                }
                CHECK_OBJECT( par_self );
                tmp_source_name_3 = par_self;
                tmp_called_name_4 = LOOKUP_ATTRIBUTE( tmp_source_name_3, const_str_plain__remaining_time );
                if ( tmp_called_name_4 == NULL )
                {
                    assert( ERROR_OCCURRED() );

                    FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
                    Py_DECREF( tmp_args_element_name_1 );

                    exception_lineno = 998;
                    type_description_1 = "oooo";
                    goto try_except_handler_3;
                }
                if ( var_endtime == NULL )
                {
                    Py_DECREF( tmp_args_element_name_1 );
                    Py_DECREF( tmp_called_name_4 );
                    exception_type = PyExc_UnboundLocalError;
                    Py_INCREF( exception_type );
                    exception_value = PyUnicode_FromFormat( "local variable '%s' referenced before assignment", "endtime" );
                    exception_tb = NULL;
                    NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
                    CHAIN_EXCEPTION( exception_value );

                    exception_lineno = 998;
                    type_description_1 = "oooo";
                    goto try_except_handler_3;
                }

                tmp_args_element_name_3 = var_endtime;
                frame_12f0d521926b7d02309cee945224ffb2->m_frame.f_lineno = 998;
                {
                    PyObject *call_args[] = { tmp_args_element_name_3 };
                    tmp_args_element_name_2 = CALL_FUNCTION_WITH_ARGS1( tmp_called_name_4, call_args );
                }

                Py_DECREF( tmp_called_name_4 );
                if ( tmp_args_element_name_2 == NULL )
                {
                    assert( ERROR_OCCURRED() );

                    FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
                    Py_DECREF( tmp_args_element_name_1 );

                    exception_lineno = 998;
                    type_description_1 = "oooo";
                    goto try_except_handler_3;
                }
                frame_12f0d521926b7d02309cee945224ffb2->m_frame.f_lineno = 997;
                {
                    PyObject *call_args[] = { tmp_args_element_name_1, tmp_args_element_name_2 };
                    tmp_assign_source_2 = CALL_FUNCTION_WITH_ARGS2( tmp_called_name_3, call_args );
                }

                Py_DECREF( tmp_args_element_name_1 );
                Py_DECREF( tmp_args_element_name_2 );
                if ( tmp_assign_source_2 == NULL )
                {
                    assert( ERROR_OCCURRED() );

                    FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                    exception_lineno = 997;
                    type_description_1 = "oooo";
                    goto try_except_handler_3;
                }
                assert( var_sigint_timeout == NULL );
                var_sigint_timeout = tmp_assign_source_2;
            }
            goto branch_end_3;
            branch_no_3:;
            {
                PyObject *tmp_assign_source_3;
                PyObject *tmp_source_name_4;
                CHECK_OBJECT( par_self );
                tmp_source_name_4 = par_self;
                tmp_assign_source_3 = LOOKUP_ATTRIBUTE( tmp_source_name_4, const_str_plain__sigint_wait_secs );
                if ( tmp_assign_source_3 == NULL )
                {
                    assert( ERROR_OCCURRED() );

                    FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                    exception_lineno = 1000;
                    type_description_1 = "oooo";
                    goto try_except_handler_3;
                }
                assert( var_sigint_timeout == NULL );
                var_sigint_timeout = tmp_assign_source_3;
            }
            branch_end_3:;
        }
        {
            PyObject *tmp_assattr_name_1;
            PyObject *tmp_assattr_target_1;
            tmp_assattr_name_1 = const_int_0;
            CHECK_OBJECT( par_self );
            tmp_assattr_target_1 = par_self;
            tmp_result = SET_ATTRIBUTE( tmp_assattr_target_1, const_str_plain__sigint_wait_secs, tmp_assattr_name_1 );
            if ( tmp_result == false )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 1001;
                type_description_1 = "oooo";
                goto try_except_handler_3;
            }
        }
        // Tried code:
        {
            PyObject *tmp_called_name_5;
            PyObject *tmp_source_name_5;
            PyObject *tmp_call_result_1;
            PyObject *tmp_kw_name_2;
            PyObject *tmp_dict_key_2;
            PyObject *tmp_dict_value_2;
            CHECK_OBJECT( par_self );
            tmp_source_name_5 = par_self;
            tmp_called_name_5 = LOOKUP_ATTRIBUTE( tmp_source_name_5, const_str_plain__wait );
            if ( tmp_called_name_5 == NULL )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 1003;
                type_description_1 = "oooo";
                goto try_except_handler_4;
            }
            tmp_dict_key_2 = const_str_plain_timeout;
            CHECK_OBJECT( var_sigint_timeout );
            tmp_dict_value_2 = var_sigint_timeout;
            tmp_kw_name_2 = _PyDict_NewPresized( 1 );
            tmp_res = PyDict_SetItem( tmp_kw_name_2, tmp_dict_key_2, tmp_dict_value_2 );
            assert( !(tmp_res != 0) );
            frame_12f0d521926b7d02309cee945224ffb2->m_frame.f_lineno = 1003;
            tmp_call_result_1 = CALL_FUNCTION_WITH_KEYARGS( tmp_called_name_5, tmp_kw_name_2 );
            Py_DECREF( tmp_called_name_5 );
            Py_DECREF( tmp_kw_name_2 );
            if ( tmp_call_result_1 == NULL )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 1003;
                type_description_1 = "oooo";
                goto try_except_handler_4;
            }
            Py_DECREF( tmp_call_result_1 );
        }
        goto try_end_1;
        // Exception handler code:
        try_except_handler_4:;
        exception_keeper_type_2 = exception_type;
        exception_keeper_value_2 = exception_value;
        exception_keeper_tb_2 = exception_tb;
        exception_keeper_lineno_2 = exception_lineno;
        exception_type = NULL;
        exception_value = NULL;
        exception_tb = NULL;
        exception_lineno = 0;

        // Preserve existing published exception.
        exception_preserved_type_1 = EXC_TYPE(PyThreadState_GET());
        Py_XINCREF( exception_preserved_type_1 );
        exception_preserved_value_1 = EXC_VALUE(PyThreadState_GET());
        Py_XINCREF( exception_preserved_value_1 );
        exception_preserved_tb_1 = (PyTracebackObject *)EXC_TRACEBACK(PyThreadState_GET());
        Py_XINCREF( exception_preserved_tb_1 );

        if ( exception_keeper_tb_2 == NULL )
        {
            exception_keeper_tb_2 = MAKE_TRACEBACK( frame_12f0d521926b7d02309cee945224ffb2, exception_keeper_lineno_2 );
        }
        else if ( exception_keeper_lineno_2 != 0 )
        {
            exception_keeper_tb_2 = ADD_TRACEBACK( exception_keeper_tb_2, frame_12f0d521926b7d02309cee945224ffb2, exception_keeper_lineno_2 );
        }

        NORMALIZE_EXCEPTION( &exception_keeper_type_2, &exception_keeper_value_2, &exception_keeper_tb_2 );
        PyException_SetTraceback( exception_keeper_value_2, (PyObject *)exception_keeper_tb_2 );
        PUBLISH_EXCEPTION( &exception_keeper_type_2, &exception_keeper_value_2, &exception_keeper_tb_2 );
        // Tried code:
        {
            nuitka_bool tmp_condition_result_4;
            PyObject *tmp_operand_name_1;
            PyObject *tmp_compexpr_left_4;
            PyObject *tmp_compexpr_right_4;
            PyObject *tmp_mvar_value_2;
            tmp_compexpr_left_4 = EXC_TYPE(PyThreadState_GET());
            tmp_mvar_value_2 = GET_STRING_DICT_VALUE( moduledict_subprocess, (Nuitka_StringObject *)const_str_plain_TimeoutExpired );

            if (unlikely( tmp_mvar_value_2 == NULL ))
            {
                tmp_mvar_value_2 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_TimeoutExpired );
            }

            if ( tmp_mvar_value_2 == NULL )
            {

                exception_type = PyExc_NameError;
                Py_INCREF( exception_type );
                exception_value = PyUnicode_FromFormat( "name '%s' is not defined", "TimeoutExpired" );
                exception_tb = NULL;
                NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
                CHAIN_EXCEPTION( exception_value );

                exception_lineno = 1004;
                type_description_1 = "oooo";
                goto try_except_handler_5;
            }

            tmp_compexpr_right_4 = tmp_mvar_value_2;
            tmp_res = EXCEPTION_MATCH_BOOL( tmp_compexpr_left_4, tmp_compexpr_right_4 );
            if ( tmp_res == -1 )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 1004;
                type_description_1 = "oooo";
                goto try_except_handler_5;
            }
            tmp_operand_name_1 = ( tmp_res != 0 ) ? Py_True : Py_False;
            tmp_res = CHECK_IF_TRUE( tmp_operand_name_1 );
            if ( tmp_res == -1 )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 1004;
                type_description_1 = "oooo";
                goto try_except_handler_5;
            }
            tmp_condition_result_4 = ( tmp_res == 0 ) ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
            if ( tmp_condition_result_4 == NUITKA_BOOL_TRUE )
            {
                goto branch_yes_4;
            }
            else
            {
                goto branch_no_4;
            }
            branch_yes_4:;
            tmp_result = RERAISE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
            if (unlikely( tmp_result == false ))
            {
                exception_lineno = 1002;
            }

            if (exception_tb && exception_tb->tb_frame == &frame_12f0d521926b7d02309cee945224ffb2->m_frame) frame_12f0d521926b7d02309cee945224ffb2->m_frame.f_lineno = exception_tb->tb_lineno;
            type_description_1 = "oooo";
            goto try_except_handler_5;
            branch_no_4:;
        }
        goto try_end_2;
        // Exception handler code:
        try_except_handler_5:;
        exception_keeper_type_3 = exception_type;
        exception_keeper_value_3 = exception_value;
        exception_keeper_tb_3 = exception_tb;
        exception_keeper_lineno_3 = exception_lineno;
        exception_type = NULL;
        exception_value = NULL;
        exception_tb = NULL;
        exception_lineno = 0;

        // Restore previous exception.
        SET_CURRENT_EXCEPTION( exception_preserved_type_1, exception_preserved_value_1, exception_preserved_tb_1 );
        // Re-raise.
        exception_type = exception_keeper_type_3;
        exception_value = exception_keeper_value_3;
        exception_tb = exception_keeper_tb_3;
        exception_lineno = exception_keeper_lineno_3;

        goto try_except_handler_3;
        // End of try:
        try_end_2:;
        // Restore previous exception.
        SET_CURRENT_EXCEPTION( exception_preserved_type_1, exception_preserved_value_1, exception_preserved_tb_1 );
        goto try_end_1;
        // exception handler codes exits in all cases
        NUITKA_CANNOT_GET_HERE( subprocess$$$function_40_wait );
        return NULL;
        // End of try:
        try_end_1:;
        tmp_result = RERAISE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
        if (unlikely( tmp_result == false ))
        {
            exception_lineno = 1006;
        }

        if (exception_tb && exception_tb->tb_frame == &frame_12f0d521926b7d02309cee945224ffb2->m_frame) frame_12f0d521926b7d02309cee945224ffb2->m_frame.f_lineno = exception_tb->tb_lineno;
        type_description_1 = "oooo";
        goto try_except_handler_3;
        goto branch_end_2;
        branch_no_2:;
        tmp_result = RERAISE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
        if (unlikely( tmp_result == false ))
        {
            exception_lineno = 989;
        }

        if (exception_tb && exception_tb->tb_frame == &frame_12f0d521926b7d02309cee945224ffb2->m_frame) frame_12f0d521926b7d02309cee945224ffb2->m_frame.f_lineno = exception_tb->tb_lineno;
        type_description_1 = "oooo";
        goto try_except_handler_3;
        branch_end_2:;
    }
    // tried codes exits in all cases
    NUITKA_CANNOT_GET_HERE( subprocess$$$function_40_wait );
    return NULL;
    // Exception handler code:
    try_except_handler_3:;
    exception_keeper_type_4 = exception_type;
    exception_keeper_value_4 = exception_value;
    exception_keeper_tb_4 = exception_tb;
    exception_keeper_lineno_4 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    // Restore previous exception.
    SET_CURRENT_EXCEPTION( exception_preserved_type_2, exception_preserved_value_2, exception_preserved_tb_2 );
    // Re-raise.
    exception_type = exception_keeper_type_4;
    exception_value = exception_keeper_value_4;
    exception_tb = exception_keeper_tb_4;
    exception_lineno = exception_keeper_lineno_4;

    goto frame_exception_exit_1;
    // End of try:
    // End of try:

#if 0
    RESTORE_FRAME_EXCEPTION( frame_12f0d521926b7d02309cee945224ffb2 );
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto frame_no_exception_1;

    frame_return_exit_1:;
#if 0
    RESTORE_FRAME_EXCEPTION( frame_12f0d521926b7d02309cee945224ffb2 );
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto try_return_handler_1;

    frame_exception_exit_1:;

#if 0
    RESTORE_FRAME_EXCEPTION( frame_12f0d521926b7d02309cee945224ffb2 );
#endif

    if ( exception_tb == NULL )
    {
        exception_tb = MAKE_TRACEBACK( frame_12f0d521926b7d02309cee945224ffb2, exception_lineno );
    }
    else if ( exception_tb->tb_frame != &frame_12f0d521926b7d02309cee945224ffb2->m_frame )
    {
        exception_tb = ADD_TRACEBACK( exception_tb, frame_12f0d521926b7d02309cee945224ffb2, exception_lineno );
    }

    // Attachs locals to frame if any.
    Nuitka_Frame_AttachLocals(
        (struct Nuitka_FrameObject *)frame_12f0d521926b7d02309cee945224ffb2,
        type_description_1,
        par_self,
        par_timeout,
        var_endtime,
        var_sigint_timeout
    );


    // Release cached frame.
    if ( frame_12f0d521926b7d02309cee945224ffb2 == cache_frame_12f0d521926b7d02309cee945224ffb2 )
    {
        Py_DECREF( frame_12f0d521926b7d02309cee945224ffb2 );
    }
    cache_frame_12f0d521926b7d02309cee945224ffb2 = NULL;

    assertFrameObject( frame_12f0d521926b7d02309cee945224ffb2 );

    // Put the previous frame back on top.
    popFrameStack();

    // Return the error.
    goto try_except_handler_1;

    frame_no_exception_1:;
    // tried codes exits in all cases
    NUITKA_CANNOT_GET_HERE( subprocess$$$function_40_wait );
    return NULL;
    // Return handler code:
    try_return_handler_1:;
    CHECK_OBJECT( (PyObject *)par_self );
    Py_DECREF( par_self );
    par_self = NULL;

    CHECK_OBJECT( (PyObject *)par_timeout );
    Py_DECREF( par_timeout );
    par_timeout = NULL;

    Py_XDECREF( var_endtime );
    var_endtime = NULL;

    goto function_return_exit;
    // Exception handler code:
    try_except_handler_1:;
    exception_keeper_type_5 = exception_type;
    exception_keeper_value_5 = exception_value;
    exception_keeper_tb_5 = exception_tb;
    exception_keeper_lineno_5 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    CHECK_OBJECT( (PyObject *)par_self );
    Py_DECREF( par_self );
    par_self = NULL;

    CHECK_OBJECT( (PyObject *)par_timeout );
    Py_DECREF( par_timeout );
    par_timeout = NULL;

    Py_XDECREF( var_endtime );
    var_endtime = NULL;

    Py_XDECREF( var_sigint_timeout );
    var_sigint_timeout = NULL;

    // Re-raise.
    exception_type = exception_keeper_type_5;
    exception_value = exception_keeper_value_5;
    exception_tb = exception_keeper_tb_5;
    exception_lineno = exception_keeper_lineno_5;

    goto function_exception_exit;
    // End of try:

    // Return statement must have exited already.
    NUITKA_CANNOT_GET_HERE( subprocess$$$function_40_wait );
    return NULL;

function_exception_exit:
    assert( exception_type );
    RESTORE_ERROR_OCCURRED( exception_type, exception_value, exception_tb );

    return NULL;

function_return_exit:
   // Function cleanup code if any.


   // Actual function exit with return value, making sure we did not make
   // the error status worse despite non-NULL return.
   CHECK_OBJECT( tmp_return_value );
   assert( had_error || !ERROR_OCCURRED() );
   return tmp_return_value;
}


static PyObject *impl_subprocess$$$function_41__get_handles( struct Nuitka_FunctionObject const *self, PyObject **python_pars )
{
    // Preserve error status for checks
#ifndef __NUITKA_NO_ASSERT__
    NUITKA_MAY_BE_UNUSED bool had_error = ERROR_OCCURRED();
#endif

    // Local variable declarations.
    PyObject *par_self = python_pars[ 0 ];
    PyObject *par_stdin = python_pars[ 1 ];
    PyObject *par_stdout = python_pars[ 2 ];
    PyObject *par_stderr = python_pars[ 3 ];
    PyObject *var_p2cread = NULL;
    PyObject *var_p2cwrite = NULL;
    PyObject *var_c2pread = NULL;
    PyObject *var_c2pwrite = NULL;
    PyObject *var_errread = NULL;
    PyObject *var_errwrite = NULL;
    PyObject *var__ = NULL;
    PyObject *tmp_tuple_unpack_10__element_1 = NULL;
    PyObject *tmp_tuple_unpack_10__element_2 = NULL;
    PyObject *tmp_tuple_unpack_10__source_iter = NULL;
    PyObject *tmp_tuple_unpack_11__element_1 = NULL;
    PyObject *tmp_tuple_unpack_11__element_2 = NULL;
    PyObject *tmp_tuple_unpack_11__source_iter = NULL;
    PyObject *tmp_tuple_unpack_12__element_1 = NULL;
    PyObject *tmp_tuple_unpack_12__element_2 = NULL;
    PyObject *tmp_tuple_unpack_12__source_iter = NULL;
    PyObject *tmp_tuple_unpack_1__element_1 = NULL;
    PyObject *tmp_tuple_unpack_1__element_2 = NULL;
    PyObject *tmp_tuple_unpack_1__source_iter = NULL;
    PyObject *tmp_tuple_unpack_2__element_1 = NULL;
    PyObject *tmp_tuple_unpack_2__element_2 = NULL;
    PyObject *tmp_tuple_unpack_2__source_iter = NULL;
    PyObject *tmp_tuple_unpack_3__element_1 = NULL;
    PyObject *tmp_tuple_unpack_3__element_2 = NULL;
    PyObject *tmp_tuple_unpack_3__source_iter = NULL;
    PyObject *tmp_tuple_unpack_4__element_1 = NULL;
    PyObject *tmp_tuple_unpack_4__element_2 = NULL;
    PyObject *tmp_tuple_unpack_4__source_iter = NULL;
    PyObject *tmp_tuple_unpack_5__element_1 = NULL;
    PyObject *tmp_tuple_unpack_5__element_2 = NULL;
    PyObject *tmp_tuple_unpack_5__source_iter = NULL;
    PyObject *tmp_tuple_unpack_6__element_1 = NULL;
    PyObject *tmp_tuple_unpack_6__element_2 = NULL;
    PyObject *tmp_tuple_unpack_6__source_iter = NULL;
    PyObject *tmp_tuple_unpack_7__element_1 = NULL;
    PyObject *tmp_tuple_unpack_7__element_2 = NULL;
    PyObject *tmp_tuple_unpack_7__source_iter = NULL;
    PyObject *tmp_tuple_unpack_8__element_1 = NULL;
    PyObject *tmp_tuple_unpack_8__element_2 = NULL;
    PyObject *tmp_tuple_unpack_8__source_iter = NULL;
    PyObject *tmp_tuple_unpack_9__element_1 = NULL;
    PyObject *tmp_tuple_unpack_9__element_2 = NULL;
    PyObject *tmp_tuple_unpack_9__source_iter = NULL;
    PyObject *tmp_return_value = NULL;
    struct Nuitka_FrameObject *frame_1ccac2e96ff9427e4b97325ca6a6800b;
    NUITKA_MAY_BE_UNUSED char const *type_description_1 = NULL;
    PyObject *exception_type = NULL;
    PyObject *exception_value = NULL;
    PyTracebackObject *exception_tb = NULL;
    NUITKA_MAY_BE_UNUSED int exception_lineno = 0;
    PyObject *exception_keeper_type_1;
    PyObject *exception_keeper_value_1;
    PyTracebackObject *exception_keeper_tb_1;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_1;
    PyObject *exception_keeper_type_2;
    PyObject *exception_keeper_value_2;
    PyTracebackObject *exception_keeper_tb_2;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_2;
    PyObject *exception_keeper_type_3;
    PyObject *exception_keeper_value_3;
    PyTracebackObject *exception_keeper_tb_3;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_3;
    PyObject *exception_keeper_type_4;
    PyObject *exception_keeper_value_4;
    PyTracebackObject *exception_keeper_tb_4;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_4;
    PyObject *exception_keeper_type_5;
    PyObject *exception_keeper_value_5;
    PyTracebackObject *exception_keeper_tb_5;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_5;
    PyObject *exception_keeper_type_6;
    PyObject *exception_keeper_value_6;
    PyTracebackObject *exception_keeper_tb_6;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_6;
    PyObject *tmp_iterator_attempt;
    PyObject *exception_keeper_type_7;
    PyObject *exception_keeper_value_7;
    PyTracebackObject *exception_keeper_tb_7;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_7;
    PyObject *exception_keeper_type_8;
    PyObject *exception_keeper_value_8;
    PyTracebackObject *exception_keeper_tb_8;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_8;
    int tmp_res;
    PyObject *exception_keeper_type_9;
    PyObject *exception_keeper_value_9;
    PyTracebackObject *exception_keeper_tb_9;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_9;
    PyObject *exception_keeper_type_10;
    PyObject *exception_keeper_value_10;
    PyTracebackObject *exception_keeper_tb_10;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_10;
    PyObject *exception_keeper_type_11;
    PyObject *exception_keeper_value_11;
    PyTracebackObject *exception_keeper_tb_11;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_11;
    PyObject *exception_keeper_type_12;
    PyObject *exception_keeper_value_12;
    PyTracebackObject *exception_keeper_tb_12;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_12;
    PyObject *exception_keeper_type_13;
    PyObject *exception_keeper_value_13;
    PyTracebackObject *exception_keeper_tb_13;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_13;
    PyObject *exception_keeper_type_14;
    PyObject *exception_keeper_value_14;
    PyTracebackObject *exception_keeper_tb_14;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_14;
    PyObject *exception_keeper_type_15;
    PyObject *exception_keeper_value_15;
    PyTracebackObject *exception_keeper_tb_15;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_15;
    PyObject *exception_keeper_type_16;
    PyObject *exception_keeper_value_16;
    PyTracebackObject *exception_keeper_tb_16;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_16;
    PyObject *exception_keeper_type_17;
    PyObject *exception_keeper_value_17;
    PyTracebackObject *exception_keeper_tb_17;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_17;
    PyObject *exception_keeper_type_18;
    PyObject *exception_keeper_value_18;
    PyTracebackObject *exception_keeper_tb_18;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_18;
    PyObject *exception_keeper_type_19;
    PyObject *exception_keeper_value_19;
    PyTracebackObject *exception_keeper_tb_19;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_19;
    PyObject *exception_keeper_type_20;
    PyObject *exception_keeper_value_20;
    PyTracebackObject *exception_keeper_tb_20;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_20;
    PyObject *exception_keeper_type_21;
    PyObject *exception_keeper_value_21;
    PyTracebackObject *exception_keeper_tb_21;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_21;
    PyObject *exception_keeper_type_22;
    PyObject *exception_keeper_value_22;
    PyTracebackObject *exception_keeper_tb_22;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_22;
    PyObject *exception_keeper_type_23;
    PyObject *exception_keeper_value_23;
    PyTracebackObject *exception_keeper_tb_23;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_23;
    PyObject *exception_keeper_type_24;
    PyObject *exception_keeper_value_24;
    PyTracebackObject *exception_keeper_tb_24;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_24;
    static struct Nuitka_FrameObject *cache_frame_1ccac2e96ff9427e4b97325ca6a6800b = NULL;
    PyObject *exception_keeper_type_25;
    PyObject *exception_keeper_value_25;
    PyTracebackObject *exception_keeper_tb_25;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_25;

    // Actual function body.
    // Tried code:
    {
        nuitka_bool tmp_condition_result_1;
        int tmp_and_left_truth_1;
        nuitka_bool tmp_and_left_value_1;
        nuitka_bool tmp_and_right_value_1;
        PyObject *tmp_compexpr_left_1;
        PyObject *tmp_compexpr_right_1;
        int tmp_and_left_truth_2;
        nuitka_bool tmp_and_left_value_2;
        nuitka_bool tmp_and_right_value_2;
        PyObject *tmp_compexpr_left_2;
        PyObject *tmp_compexpr_right_2;
        PyObject *tmp_compexpr_left_3;
        PyObject *tmp_compexpr_right_3;
        CHECK_OBJECT( par_stdin );
        tmp_compexpr_left_1 = par_stdin;
        tmp_compexpr_right_1 = Py_None;
        tmp_and_left_value_1 = ( tmp_compexpr_left_1 == tmp_compexpr_right_1 ) ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
        tmp_and_left_truth_1 = tmp_and_left_value_1 == NUITKA_BOOL_TRUE ? 1 : 0;
        if ( tmp_and_left_truth_1 == 1 )
        {
            goto and_right_1;
        }
        else
        {
            goto and_left_1;
        }
        and_right_1:;
        CHECK_OBJECT( par_stdout );
        tmp_compexpr_left_2 = par_stdout;
        tmp_compexpr_right_2 = Py_None;
        tmp_and_left_value_2 = ( tmp_compexpr_left_2 == tmp_compexpr_right_2 ) ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
        tmp_and_left_truth_2 = tmp_and_left_value_2 == NUITKA_BOOL_TRUE ? 1 : 0;
        if ( tmp_and_left_truth_2 == 1 )
        {
            goto and_right_2;
        }
        else
        {
            goto and_left_2;
        }
        and_right_2:;
        CHECK_OBJECT( par_stderr );
        tmp_compexpr_left_3 = par_stderr;
        tmp_compexpr_right_3 = Py_None;
        tmp_and_right_value_2 = ( tmp_compexpr_left_3 == tmp_compexpr_right_3 ) ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
        tmp_and_right_value_1 = tmp_and_right_value_2;
        goto and_end_2;
        and_left_2:;
        tmp_and_right_value_1 = tmp_and_left_value_2;
        and_end_2:;
        tmp_condition_result_1 = tmp_and_right_value_1;
        goto and_end_1;
        and_left_1:;
        tmp_condition_result_1 = tmp_and_left_value_1;
        and_end_1:;
        if ( tmp_condition_result_1 == NUITKA_BOOL_TRUE )
        {
            goto branch_yes_1;
        }
        else
        {
            goto branch_no_1;
        }
        branch_yes_1:;
        tmp_return_value = const_tuple_int_neg_1_int_neg_1_int_neg_1_int_neg_1_int_neg_1_int_neg_1_tuple;
        Py_INCREF( tmp_return_value );
        goto try_return_handler_1;
        branch_no_1:;
    }
    {
        PyObject *tmp_assign_source_1;
        PyObject *tmp_iter_arg_1;
        tmp_iter_arg_1 = const_tuple_int_neg_1_int_neg_1_tuple;
        tmp_assign_source_1 = MAKE_UNPACK_ITERATOR( tmp_iter_arg_1 );
        assert( !(tmp_assign_source_1 == NULL) );
        assert( tmp_tuple_unpack_1__source_iter == NULL );
        tmp_tuple_unpack_1__source_iter = tmp_assign_source_1;
    }
    MAKE_OR_REUSE_FRAME( cache_frame_1ccac2e96ff9427e4b97325ca6a6800b, codeobj_1ccac2e96ff9427e4b97325ca6a6800b, module_subprocess, sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *) );
    frame_1ccac2e96ff9427e4b97325ca6a6800b = cache_frame_1ccac2e96ff9427e4b97325ca6a6800b;

    // Push the new frame as the currently active one.
    pushFrameStack( frame_1ccac2e96ff9427e4b97325ca6a6800b );

    // Mark the frame object as in use, ref count 1 will be up for reuse.
    assert( Py_REFCNT( frame_1ccac2e96ff9427e4b97325ca6a6800b ) == 2 ); // Frame stack

    // Framed code:
    // Tried code:
    // Tried code:
    {
        PyObject *tmp_assign_source_2;
        PyObject *tmp_unpack_1;
        CHECK_OBJECT( tmp_tuple_unpack_1__source_iter );
        tmp_unpack_1 = tmp_tuple_unpack_1__source_iter;
        tmp_assign_source_2 = UNPACK_NEXT( tmp_unpack_1, 0, 2 );
        if ( tmp_assign_source_2 == NULL )
        {
            if ( !ERROR_OCCURRED() )
            {
                exception_type = PyExc_StopIteration;
                Py_INCREF( exception_type );
                exception_value = NULL;
                exception_tb = NULL;
            }
            else
            {
                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
            }


            type_description_1 = "ooooooooooo";
            exception_lineno = 1020;
            goto try_except_handler_3;
        }
        assert( tmp_tuple_unpack_1__element_1 == NULL );
        tmp_tuple_unpack_1__element_1 = tmp_assign_source_2;
    }
    {
        PyObject *tmp_assign_source_3;
        PyObject *tmp_unpack_2;
        CHECK_OBJECT( tmp_tuple_unpack_1__source_iter );
        tmp_unpack_2 = tmp_tuple_unpack_1__source_iter;
        tmp_assign_source_3 = UNPACK_NEXT( tmp_unpack_2, 1, 2 );
        if ( tmp_assign_source_3 == NULL )
        {
            if ( !ERROR_OCCURRED() )
            {
                exception_type = PyExc_StopIteration;
                Py_INCREF( exception_type );
                exception_value = NULL;
                exception_tb = NULL;
            }
            else
            {
                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
            }


            type_description_1 = "ooooooooooo";
            exception_lineno = 1020;
            goto try_except_handler_3;
        }
        assert( tmp_tuple_unpack_1__element_2 == NULL );
        tmp_tuple_unpack_1__element_2 = tmp_assign_source_3;
    }
    goto try_end_1;
    // Exception handler code:
    try_except_handler_3:;
    exception_keeper_type_1 = exception_type;
    exception_keeper_value_1 = exception_value;
    exception_keeper_tb_1 = exception_tb;
    exception_keeper_lineno_1 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    CHECK_OBJECT( (PyObject *)tmp_tuple_unpack_1__source_iter );
    Py_DECREF( tmp_tuple_unpack_1__source_iter );
    tmp_tuple_unpack_1__source_iter = NULL;

    // Re-raise.
    exception_type = exception_keeper_type_1;
    exception_value = exception_keeper_value_1;
    exception_tb = exception_keeper_tb_1;
    exception_lineno = exception_keeper_lineno_1;

    goto try_except_handler_2;
    // End of try:
    try_end_1:;
    goto try_end_2;
    // Exception handler code:
    try_except_handler_2:;
    exception_keeper_type_2 = exception_type;
    exception_keeper_value_2 = exception_value;
    exception_keeper_tb_2 = exception_tb;
    exception_keeper_lineno_2 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    Py_XDECREF( tmp_tuple_unpack_1__element_1 );
    tmp_tuple_unpack_1__element_1 = NULL;

    // Re-raise.
    exception_type = exception_keeper_type_2;
    exception_value = exception_keeper_value_2;
    exception_tb = exception_keeper_tb_2;
    exception_lineno = exception_keeper_lineno_2;

    goto frame_exception_exit_1;
    // End of try:
    try_end_2:;
    CHECK_OBJECT( (PyObject *)tmp_tuple_unpack_1__source_iter );
    Py_DECREF( tmp_tuple_unpack_1__source_iter );
    tmp_tuple_unpack_1__source_iter = NULL;

    {
        PyObject *tmp_assign_source_4;
        CHECK_OBJECT( tmp_tuple_unpack_1__element_1 );
        tmp_assign_source_4 = tmp_tuple_unpack_1__element_1;
        assert( var_p2cread == NULL );
        Py_INCREF( tmp_assign_source_4 );
        var_p2cread = tmp_assign_source_4;
    }
    Py_XDECREF( tmp_tuple_unpack_1__element_1 );
    tmp_tuple_unpack_1__element_1 = NULL;

    {
        PyObject *tmp_assign_source_5;
        CHECK_OBJECT( tmp_tuple_unpack_1__element_2 );
        tmp_assign_source_5 = tmp_tuple_unpack_1__element_2;
        assert( var_p2cwrite == NULL );
        Py_INCREF( tmp_assign_source_5 );
        var_p2cwrite = tmp_assign_source_5;
    }
    Py_XDECREF( tmp_tuple_unpack_1__element_2 );
    tmp_tuple_unpack_1__element_2 = NULL;

    {
        PyObject *tmp_assign_source_6;
        PyObject *tmp_iter_arg_2;
        tmp_iter_arg_2 = const_tuple_int_neg_1_int_neg_1_tuple;
        tmp_assign_source_6 = MAKE_UNPACK_ITERATOR( tmp_iter_arg_2 );
        assert( !(tmp_assign_source_6 == NULL) );
        assert( tmp_tuple_unpack_2__source_iter == NULL );
        tmp_tuple_unpack_2__source_iter = tmp_assign_source_6;
    }
    // Tried code:
    // Tried code:
    {
        PyObject *tmp_assign_source_7;
        PyObject *tmp_unpack_3;
        CHECK_OBJECT( tmp_tuple_unpack_2__source_iter );
        tmp_unpack_3 = tmp_tuple_unpack_2__source_iter;
        tmp_assign_source_7 = UNPACK_NEXT( tmp_unpack_3, 0, 2 );
        if ( tmp_assign_source_7 == NULL )
        {
            if ( !ERROR_OCCURRED() )
            {
                exception_type = PyExc_StopIteration;
                Py_INCREF( exception_type );
                exception_value = NULL;
                exception_tb = NULL;
            }
            else
            {
                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
            }


            type_description_1 = "ooooooooooo";
            exception_lineno = 1021;
            goto try_except_handler_5;
        }
        assert( tmp_tuple_unpack_2__element_1 == NULL );
        tmp_tuple_unpack_2__element_1 = tmp_assign_source_7;
    }
    {
        PyObject *tmp_assign_source_8;
        PyObject *tmp_unpack_4;
        CHECK_OBJECT( tmp_tuple_unpack_2__source_iter );
        tmp_unpack_4 = tmp_tuple_unpack_2__source_iter;
        tmp_assign_source_8 = UNPACK_NEXT( tmp_unpack_4, 1, 2 );
        if ( tmp_assign_source_8 == NULL )
        {
            if ( !ERROR_OCCURRED() )
            {
                exception_type = PyExc_StopIteration;
                Py_INCREF( exception_type );
                exception_value = NULL;
                exception_tb = NULL;
            }
            else
            {
                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
            }


            type_description_1 = "ooooooooooo";
            exception_lineno = 1021;
            goto try_except_handler_5;
        }
        assert( tmp_tuple_unpack_2__element_2 == NULL );
        tmp_tuple_unpack_2__element_2 = tmp_assign_source_8;
    }
    goto try_end_3;
    // Exception handler code:
    try_except_handler_5:;
    exception_keeper_type_3 = exception_type;
    exception_keeper_value_3 = exception_value;
    exception_keeper_tb_3 = exception_tb;
    exception_keeper_lineno_3 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    CHECK_OBJECT( (PyObject *)tmp_tuple_unpack_2__source_iter );
    Py_DECREF( tmp_tuple_unpack_2__source_iter );
    tmp_tuple_unpack_2__source_iter = NULL;

    // Re-raise.
    exception_type = exception_keeper_type_3;
    exception_value = exception_keeper_value_3;
    exception_tb = exception_keeper_tb_3;
    exception_lineno = exception_keeper_lineno_3;

    goto try_except_handler_4;
    // End of try:
    try_end_3:;
    goto try_end_4;
    // Exception handler code:
    try_except_handler_4:;
    exception_keeper_type_4 = exception_type;
    exception_keeper_value_4 = exception_value;
    exception_keeper_tb_4 = exception_tb;
    exception_keeper_lineno_4 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    Py_XDECREF( tmp_tuple_unpack_2__element_1 );
    tmp_tuple_unpack_2__element_1 = NULL;

    // Re-raise.
    exception_type = exception_keeper_type_4;
    exception_value = exception_keeper_value_4;
    exception_tb = exception_keeper_tb_4;
    exception_lineno = exception_keeper_lineno_4;

    goto frame_exception_exit_1;
    // End of try:
    try_end_4:;
    CHECK_OBJECT( (PyObject *)tmp_tuple_unpack_2__source_iter );
    Py_DECREF( tmp_tuple_unpack_2__source_iter );
    tmp_tuple_unpack_2__source_iter = NULL;

    {
        PyObject *tmp_assign_source_9;
        CHECK_OBJECT( tmp_tuple_unpack_2__element_1 );
        tmp_assign_source_9 = tmp_tuple_unpack_2__element_1;
        assert( var_c2pread == NULL );
        Py_INCREF( tmp_assign_source_9 );
        var_c2pread = tmp_assign_source_9;
    }
    Py_XDECREF( tmp_tuple_unpack_2__element_1 );
    tmp_tuple_unpack_2__element_1 = NULL;

    {
        PyObject *tmp_assign_source_10;
        CHECK_OBJECT( tmp_tuple_unpack_2__element_2 );
        tmp_assign_source_10 = tmp_tuple_unpack_2__element_2;
        assert( var_c2pwrite == NULL );
        Py_INCREF( tmp_assign_source_10 );
        var_c2pwrite = tmp_assign_source_10;
    }
    Py_XDECREF( tmp_tuple_unpack_2__element_2 );
    tmp_tuple_unpack_2__element_2 = NULL;

    {
        PyObject *tmp_assign_source_11;
        PyObject *tmp_iter_arg_3;
        tmp_iter_arg_3 = const_tuple_int_neg_1_int_neg_1_tuple;
        tmp_assign_source_11 = MAKE_UNPACK_ITERATOR( tmp_iter_arg_3 );
        assert( !(tmp_assign_source_11 == NULL) );
        assert( tmp_tuple_unpack_3__source_iter == NULL );
        tmp_tuple_unpack_3__source_iter = tmp_assign_source_11;
    }
    // Tried code:
    // Tried code:
    {
        PyObject *tmp_assign_source_12;
        PyObject *tmp_unpack_5;
        CHECK_OBJECT( tmp_tuple_unpack_3__source_iter );
        tmp_unpack_5 = tmp_tuple_unpack_3__source_iter;
        tmp_assign_source_12 = UNPACK_NEXT( tmp_unpack_5, 0, 2 );
        if ( tmp_assign_source_12 == NULL )
        {
            if ( !ERROR_OCCURRED() )
            {
                exception_type = PyExc_StopIteration;
                Py_INCREF( exception_type );
                exception_value = NULL;
                exception_tb = NULL;
            }
            else
            {
                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
            }


            type_description_1 = "ooooooooooo";
            exception_lineno = 1022;
            goto try_except_handler_7;
        }
        assert( tmp_tuple_unpack_3__element_1 == NULL );
        tmp_tuple_unpack_3__element_1 = tmp_assign_source_12;
    }
    {
        PyObject *tmp_assign_source_13;
        PyObject *tmp_unpack_6;
        CHECK_OBJECT( tmp_tuple_unpack_3__source_iter );
        tmp_unpack_6 = tmp_tuple_unpack_3__source_iter;
        tmp_assign_source_13 = UNPACK_NEXT( tmp_unpack_6, 1, 2 );
        if ( tmp_assign_source_13 == NULL )
        {
            if ( !ERROR_OCCURRED() )
            {
                exception_type = PyExc_StopIteration;
                Py_INCREF( exception_type );
                exception_value = NULL;
                exception_tb = NULL;
            }
            else
            {
                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
            }


            type_description_1 = "ooooooooooo";
            exception_lineno = 1022;
            goto try_except_handler_7;
        }
        assert( tmp_tuple_unpack_3__element_2 == NULL );
        tmp_tuple_unpack_3__element_2 = tmp_assign_source_13;
    }
    goto try_end_5;
    // Exception handler code:
    try_except_handler_7:;
    exception_keeper_type_5 = exception_type;
    exception_keeper_value_5 = exception_value;
    exception_keeper_tb_5 = exception_tb;
    exception_keeper_lineno_5 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    CHECK_OBJECT( (PyObject *)tmp_tuple_unpack_3__source_iter );
    Py_DECREF( tmp_tuple_unpack_3__source_iter );
    tmp_tuple_unpack_3__source_iter = NULL;

    // Re-raise.
    exception_type = exception_keeper_type_5;
    exception_value = exception_keeper_value_5;
    exception_tb = exception_keeper_tb_5;
    exception_lineno = exception_keeper_lineno_5;

    goto try_except_handler_6;
    // End of try:
    try_end_5:;
    goto try_end_6;
    // Exception handler code:
    try_except_handler_6:;
    exception_keeper_type_6 = exception_type;
    exception_keeper_value_6 = exception_value;
    exception_keeper_tb_6 = exception_tb;
    exception_keeper_lineno_6 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    Py_XDECREF( tmp_tuple_unpack_3__element_1 );
    tmp_tuple_unpack_3__element_1 = NULL;

    // Re-raise.
    exception_type = exception_keeper_type_6;
    exception_value = exception_keeper_value_6;
    exception_tb = exception_keeper_tb_6;
    exception_lineno = exception_keeper_lineno_6;

    goto frame_exception_exit_1;
    // End of try:
    try_end_6:;
    CHECK_OBJECT( (PyObject *)tmp_tuple_unpack_3__source_iter );
    Py_DECREF( tmp_tuple_unpack_3__source_iter );
    tmp_tuple_unpack_3__source_iter = NULL;

    {
        PyObject *tmp_assign_source_14;
        CHECK_OBJECT( tmp_tuple_unpack_3__element_1 );
        tmp_assign_source_14 = tmp_tuple_unpack_3__element_1;
        assert( var_errread == NULL );
        Py_INCREF( tmp_assign_source_14 );
        var_errread = tmp_assign_source_14;
    }
    Py_XDECREF( tmp_tuple_unpack_3__element_1 );
    tmp_tuple_unpack_3__element_1 = NULL;

    {
        PyObject *tmp_assign_source_15;
        CHECK_OBJECT( tmp_tuple_unpack_3__element_2 );
        tmp_assign_source_15 = tmp_tuple_unpack_3__element_2;
        assert( var_errwrite == NULL );
        Py_INCREF( tmp_assign_source_15 );
        var_errwrite = tmp_assign_source_15;
    }
    Py_XDECREF( tmp_tuple_unpack_3__element_2 );
    tmp_tuple_unpack_3__element_2 = NULL;

    {
        nuitka_bool tmp_condition_result_2;
        PyObject *tmp_compexpr_left_4;
        PyObject *tmp_compexpr_right_4;
        CHECK_OBJECT( par_stdin );
        tmp_compexpr_left_4 = par_stdin;
        tmp_compexpr_right_4 = Py_None;
        tmp_condition_result_2 = ( tmp_compexpr_left_4 == tmp_compexpr_right_4 ) ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
        if ( tmp_condition_result_2 == NUITKA_BOOL_TRUE )
        {
            goto branch_yes_2;
        }
        else
        {
            goto branch_no_2;
        }
        branch_yes_2:;
        {
            PyObject *tmp_assign_source_16;
            PyObject *tmp_called_name_1;
            PyObject *tmp_source_name_1;
            PyObject *tmp_mvar_value_1;
            PyObject *tmp_args_element_name_1;
            PyObject *tmp_source_name_2;
            PyObject *tmp_mvar_value_2;
            tmp_mvar_value_1 = GET_STRING_DICT_VALUE( moduledict_subprocess, (Nuitka_StringObject *)const_str_plain__winapi );

            if (unlikely( tmp_mvar_value_1 == NULL ))
            {
                tmp_mvar_value_1 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain__winapi );
            }

            if ( tmp_mvar_value_1 == NULL )
            {

                exception_type = PyExc_NameError;
                Py_INCREF( exception_type );
                exception_value = PyUnicode_FromFormat( "name '%s' is not defined", "_winapi" );
                exception_tb = NULL;
                NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
                CHAIN_EXCEPTION( exception_value );

                exception_lineno = 1025;
                type_description_1 = "ooooooooooo";
                goto frame_exception_exit_1;
            }

            tmp_source_name_1 = tmp_mvar_value_1;
            tmp_called_name_1 = LOOKUP_ATTRIBUTE( tmp_source_name_1, const_str_plain_GetStdHandle );
            if ( tmp_called_name_1 == NULL )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 1025;
                type_description_1 = "ooooooooooo";
                goto frame_exception_exit_1;
            }
            tmp_mvar_value_2 = GET_STRING_DICT_VALUE( moduledict_subprocess, (Nuitka_StringObject *)const_str_plain__winapi );

            if (unlikely( tmp_mvar_value_2 == NULL ))
            {
                tmp_mvar_value_2 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain__winapi );
            }

            if ( tmp_mvar_value_2 == NULL )
            {
                Py_DECREF( tmp_called_name_1 );
                exception_type = PyExc_NameError;
                Py_INCREF( exception_type );
                exception_value = PyUnicode_FromFormat( "name '%s' is not defined", "_winapi" );
                exception_tb = NULL;
                NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
                CHAIN_EXCEPTION( exception_value );

                exception_lineno = 1025;
                type_description_1 = "ooooooooooo";
                goto frame_exception_exit_1;
            }

            tmp_source_name_2 = tmp_mvar_value_2;
            tmp_args_element_name_1 = LOOKUP_ATTRIBUTE( tmp_source_name_2, const_str_plain_STD_INPUT_HANDLE );
            if ( tmp_args_element_name_1 == NULL )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
                Py_DECREF( tmp_called_name_1 );

                exception_lineno = 1025;
                type_description_1 = "ooooooooooo";
                goto frame_exception_exit_1;
            }
            frame_1ccac2e96ff9427e4b97325ca6a6800b->m_frame.f_lineno = 1025;
            {
                PyObject *call_args[] = { tmp_args_element_name_1 };
                tmp_assign_source_16 = CALL_FUNCTION_WITH_ARGS1( tmp_called_name_1, call_args );
            }

            Py_DECREF( tmp_called_name_1 );
            Py_DECREF( tmp_args_element_name_1 );
            if ( tmp_assign_source_16 == NULL )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 1025;
                type_description_1 = "ooooooooooo";
                goto frame_exception_exit_1;
            }
            {
                PyObject *old = var_p2cread;
                assert( old != NULL );
                var_p2cread = tmp_assign_source_16;
                Py_DECREF( old );
            }

        }
        {
            nuitka_bool tmp_condition_result_3;
            PyObject *tmp_compexpr_left_5;
            PyObject *tmp_compexpr_right_5;
            CHECK_OBJECT( var_p2cread );
            tmp_compexpr_left_5 = var_p2cread;
            tmp_compexpr_right_5 = Py_None;
            tmp_condition_result_3 = ( tmp_compexpr_left_5 == tmp_compexpr_right_5 ) ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
            if ( tmp_condition_result_3 == NUITKA_BOOL_TRUE )
            {
                goto branch_yes_3;
            }
            else
            {
                goto branch_no_3;
            }
            branch_yes_3:;
            // Tried code:
            {
                PyObject *tmp_assign_source_17;
                PyObject *tmp_iter_arg_4;
                PyObject *tmp_called_instance_1;
                PyObject *tmp_mvar_value_3;
                tmp_mvar_value_3 = GET_STRING_DICT_VALUE( moduledict_subprocess, (Nuitka_StringObject *)const_str_plain__winapi );

                if (unlikely( tmp_mvar_value_3 == NULL ))
                {
                    tmp_mvar_value_3 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain__winapi );
                }

                if ( tmp_mvar_value_3 == NULL )
                {

                    exception_type = PyExc_NameError;
                    Py_INCREF( exception_type );
                    exception_value = PyUnicode_FromFormat( "name '%s' is not defined", "_winapi" );
                    exception_tb = NULL;
                    NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
                    CHAIN_EXCEPTION( exception_value );

                    exception_lineno = 1027;
                    type_description_1 = "ooooooooooo";
                    goto try_except_handler_8;
                }

                tmp_called_instance_1 = tmp_mvar_value_3;
                frame_1ccac2e96ff9427e4b97325ca6a6800b->m_frame.f_lineno = 1027;
                tmp_iter_arg_4 = CALL_METHOD_WITH_ARGS2( tmp_called_instance_1, const_str_plain_CreatePipe, &PyTuple_GET_ITEM( const_tuple_none_int_0_tuple, 0 ) );

                if ( tmp_iter_arg_4 == NULL )
                {
                    assert( ERROR_OCCURRED() );

                    FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                    exception_lineno = 1027;
                    type_description_1 = "ooooooooooo";
                    goto try_except_handler_8;
                }
                tmp_assign_source_17 = MAKE_UNPACK_ITERATOR( tmp_iter_arg_4 );
                Py_DECREF( tmp_iter_arg_4 );
                if ( tmp_assign_source_17 == NULL )
                {
                    assert( ERROR_OCCURRED() );

                    FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                    exception_lineno = 1027;
                    type_description_1 = "ooooooooooo";
                    goto try_except_handler_8;
                }
                assert( tmp_tuple_unpack_4__source_iter == NULL );
                tmp_tuple_unpack_4__source_iter = tmp_assign_source_17;
            }
            // Tried code:
            {
                PyObject *tmp_assign_source_18;
                PyObject *tmp_unpack_7;
                CHECK_OBJECT( tmp_tuple_unpack_4__source_iter );
                tmp_unpack_7 = tmp_tuple_unpack_4__source_iter;
                tmp_assign_source_18 = UNPACK_NEXT( tmp_unpack_7, 0, 2 );
                if ( tmp_assign_source_18 == NULL )
                {
                    if ( !ERROR_OCCURRED() )
                    {
                        exception_type = PyExc_StopIteration;
                        Py_INCREF( exception_type );
                        exception_value = NULL;
                        exception_tb = NULL;
                    }
                    else
                    {
                        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
                    }


                    type_description_1 = "ooooooooooo";
                    exception_lineno = 1027;
                    goto try_except_handler_9;
                }
                assert( tmp_tuple_unpack_4__element_1 == NULL );
                tmp_tuple_unpack_4__element_1 = tmp_assign_source_18;
            }
            {
                PyObject *tmp_assign_source_19;
                PyObject *tmp_unpack_8;
                CHECK_OBJECT( tmp_tuple_unpack_4__source_iter );
                tmp_unpack_8 = tmp_tuple_unpack_4__source_iter;
                tmp_assign_source_19 = UNPACK_NEXT( tmp_unpack_8, 1, 2 );
                if ( tmp_assign_source_19 == NULL )
                {
                    if ( !ERROR_OCCURRED() )
                    {
                        exception_type = PyExc_StopIteration;
                        Py_INCREF( exception_type );
                        exception_value = NULL;
                        exception_tb = NULL;
                    }
                    else
                    {
                        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
                    }


                    type_description_1 = "ooooooooooo";
                    exception_lineno = 1027;
                    goto try_except_handler_9;
                }
                assert( tmp_tuple_unpack_4__element_2 == NULL );
                tmp_tuple_unpack_4__element_2 = tmp_assign_source_19;
            }
            {
                PyObject *tmp_iterator_name_1;
                CHECK_OBJECT( tmp_tuple_unpack_4__source_iter );
                tmp_iterator_name_1 = tmp_tuple_unpack_4__source_iter;
                // Check if iterator has left-over elements.
                CHECK_OBJECT( tmp_iterator_name_1 ); assert( HAS_ITERNEXT( tmp_iterator_name_1 ) );

                tmp_iterator_attempt = (*Py_TYPE( tmp_iterator_name_1 )->tp_iternext)( tmp_iterator_name_1 );

                if (likely( tmp_iterator_attempt == NULL ))
                {
                    PyObject *error = GET_ERROR_OCCURRED();

                    if ( error != NULL )
                    {
                        if ( EXCEPTION_MATCH_BOOL_SINGLE( error, PyExc_StopIteration ))
                        {
                            CLEAR_ERROR_OCCURRED();
                        }
                        else
                        {
                            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );

                            type_description_1 = "ooooooooooo";
                            exception_lineno = 1027;
                            goto try_except_handler_9;
                        }
                    }
                }
                else
                {
                    Py_DECREF( tmp_iterator_attempt );

                    // TODO: Could avoid PyErr_Format.
#if PYTHON_VERSION < 300
                    PyErr_Format( PyExc_ValueError, "too many values to unpack" );
#else
                    PyErr_Format( PyExc_ValueError, "too many values to unpack (expected 2)" );
#endif
                    FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );

                    type_description_1 = "ooooooooooo";
                    exception_lineno = 1027;
                    goto try_except_handler_9;
                }
            }
            goto try_end_7;
            // Exception handler code:
            try_except_handler_9:;
            exception_keeper_type_7 = exception_type;
            exception_keeper_value_7 = exception_value;
            exception_keeper_tb_7 = exception_tb;
            exception_keeper_lineno_7 = exception_lineno;
            exception_type = NULL;
            exception_value = NULL;
            exception_tb = NULL;
            exception_lineno = 0;

            CHECK_OBJECT( (PyObject *)tmp_tuple_unpack_4__source_iter );
            Py_DECREF( tmp_tuple_unpack_4__source_iter );
            tmp_tuple_unpack_4__source_iter = NULL;

            // Re-raise.
            exception_type = exception_keeper_type_7;
            exception_value = exception_keeper_value_7;
            exception_tb = exception_keeper_tb_7;
            exception_lineno = exception_keeper_lineno_7;

            goto try_except_handler_8;
            // End of try:
            try_end_7:;
            goto try_end_8;
            // Exception handler code:
            try_except_handler_8:;
            exception_keeper_type_8 = exception_type;
            exception_keeper_value_8 = exception_value;
            exception_keeper_tb_8 = exception_tb;
            exception_keeper_lineno_8 = exception_lineno;
            exception_type = NULL;
            exception_value = NULL;
            exception_tb = NULL;
            exception_lineno = 0;

            Py_XDECREF( tmp_tuple_unpack_4__element_1 );
            tmp_tuple_unpack_4__element_1 = NULL;

            Py_XDECREF( tmp_tuple_unpack_4__element_2 );
            tmp_tuple_unpack_4__element_2 = NULL;

            // Re-raise.
            exception_type = exception_keeper_type_8;
            exception_value = exception_keeper_value_8;
            exception_tb = exception_keeper_tb_8;
            exception_lineno = exception_keeper_lineno_8;

            goto frame_exception_exit_1;
            // End of try:
            try_end_8:;
            CHECK_OBJECT( (PyObject *)tmp_tuple_unpack_4__source_iter );
            Py_DECREF( tmp_tuple_unpack_4__source_iter );
            tmp_tuple_unpack_4__source_iter = NULL;

            {
                PyObject *tmp_assign_source_20;
                CHECK_OBJECT( tmp_tuple_unpack_4__element_1 );
                tmp_assign_source_20 = tmp_tuple_unpack_4__element_1;
                {
                    PyObject *old = var_p2cread;
                    assert( old != NULL );
                    var_p2cread = tmp_assign_source_20;
                    Py_INCREF( var_p2cread );
                    Py_DECREF( old );
                }

            }
            Py_XDECREF( tmp_tuple_unpack_4__element_1 );
            tmp_tuple_unpack_4__element_1 = NULL;

            {
                PyObject *tmp_assign_source_21;
                CHECK_OBJECT( tmp_tuple_unpack_4__element_2 );
                tmp_assign_source_21 = tmp_tuple_unpack_4__element_2;
                assert( var__ == NULL );
                Py_INCREF( tmp_assign_source_21 );
                var__ = tmp_assign_source_21;
            }
            Py_XDECREF( tmp_tuple_unpack_4__element_2 );
            tmp_tuple_unpack_4__element_2 = NULL;

            {
                PyObject *tmp_assign_source_22;
                PyObject *tmp_called_name_2;
                PyObject *tmp_mvar_value_4;
                PyObject *tmp_args_element_name_2;
                tmp_mvar_value_4 = GET_STRING_DICT_VALUE( moduledict_subprocess, (Nuitka_StringObject *)const_str_plain_Handle );

                if (unlikely( tmp_mvar_value_4 == NULL ))
                {
                    tmp_mvar_value_4 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_Handle );
                }

                if ( tmp_mvar_value_4 == NULL )
                {

                    exception_type = PyExc_NameError;
                    Py_INCREF( exception_type );
                    exception_value = PyUnicode_FromFormat( "name '%s' is not defined", "Handle" );
                    exception_tb = NULL;
                    NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
                    CHAIN_EXCEPTION( exception_value );

                    exception_lineno = 1028;
                    type_description_1 = "ooooooooooo";
                    goto frame_exception_exit_1;
                }

                tmp_called_name_2 = tmp_mvar_value_4;
                CHECK_OBJECT( var_p2cread );
                tmp_args_element_name_2 = var_p2cread;
                frame_1ccac2e96ff9427e4b97325ca6a6800b->m_frame.f_lineno = 1028;
                {
                    PyObject *call_args[] = { tmp_args_element_name_2 };
                    tmp_assign_source_22 = CALL_FUNCTION_WITH_ARGS1( tmp_called_name_2, call_args );
                }

                if ( tmp_assign_source_22 == NULL )
                {
                    assert( ERROR_OCCURRED() );

                    FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                    exception_lineno = 1028;
                    type_description_1 = "ooooooooooo";
                    goto frame_exception_exit_1;
                }
                {
                    PyObject *old = var_p2cread;
                    assert( old != NULL );
                    var_p2cread = tmp_assign_source_22;
                    Py_DECREF( old );
                }

            }
            {
                PyObject *tmp_called_instance_2;
                PyObject *tmp_mvar_value_5;
                PyObject *tmp_call_result_1;
                PyObject *tmp_args_element_name_3;
                tmp_mvar_value_5 = GET_STRING_DICT_VALUE( moduledict_subprocess, (Nuitka_StringObject *)const_str_plain__winapi );

                if (unlikely( tmp_mvar_value_5 == NULL ))
                {
                    tmp_mvar_value_5 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain__winapi );
                }

                if ( tmp_mvar_value_5 == NULL )
                {

                    exception_type = PyExc_NameError;
                    Py_INCREF( exception_type );
                    exception_value = PyUnicode_FromFormat( "name '%s' is not defined", "_winapi" );
                    exception_tb = NULL;
                    NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
                    CHAIN_EXCEPTION( exception_value );

                    exception_lineno = 1029;
                    type_description_1 = "ooooooooooo";
                    goto frame_exception_exit_1;
                }

                tmp_called_instance_2 = tmp_mvar_value_5;
                CHECK_OBJECT( var__ );
                tmp_args_element_name_3 = var__;
                frame_1ccac2e96ff9427e4b97325ca6a6800b->m_frame.f_lineno = 1029;
                {
                    PyObject *call_args[] = { tmp_args_element_name_3 };
                    tmp_call_result_1 = CALL_METHOD_WITH_ARGS1( tmp_called_instance_2, const_str_plain_CloseHandle, call_args );
                }

                if ( tmp_call_result_1 == NULL )
                {
                    assert( ERROR_OCCURRED() );

                    FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                    exception_lineno = 1029;
                    type_description_1 = "ooooooooooo";
                    goto frame_exception_exit_1;
                }
                Py_DECREF( tmp_call_result_1 );
            }
            branch_no_3:;
        }
        goto branch_end_2;
        branch_no_2:;
        {
            nuitka_bool tmp_condition_result_4;
            PyObject *tmp_compexpr_left_6;
            PyObject *tmp_compexpr_right_6;
            PyObject *tmp_mvar_value_6;
            CHECK_OBJECT( par_stdin );
            tmp_compexpr_left_6 = par_stdin;
            tmp_mvar_value_6 = GET_STRING_DICT_VALUE( moduledict_subprocess, (Nuitka_StringObject *)const_str_plain_PIPE );

            if (unlikely( tmp_mvar_value_6 == NULL ))
            {
                tmp_mvar_value_6 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_PIPE );
            }

            if ( tmp_mvar_value_6 == NULL )
            {

                exception_type = PyExc_NameError;
                Py_INCREF( exception_type );
                exception_value = PyUnicode_FromFormat( "name '%s' is not defined", "PIPE" );
                exception_tb = NULL;
                NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
                CHAIN_EXCEPTION( exception_value );

                exception_lineno = 1030;
                type_description_1 = "ooooooooooo";
                goto frame_exception_exit_1;
            }

            tmp_compexpr_right_6 = tmp_mvar_value_6;
            tmp_res = RICH_COMPARE_BOOL_EQ_OBJECT_OBJECT( tmp_compexpr_left_6, tmp_compexpr_right_6 );
            if ( tmp_res == -1 )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 1030;
                type_description_1 = "ooooooooooo";
                goto frame_exception_exit_1;
            }
            tmp_condition_result_4 = ( tmp_res != 0 ) ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
            if ( tmp_condition_result_4 == NUITKA_BOOL_TRUE )
            {
                goto branch_yes_4;
            }
            else
            {
                goto branch_no_4;
            }
            branch_yes_4:;
            // Tried code:
            {
                PyObject *tmp_assign_source_23;
                PyObject *tmp_iter_arg_5;
                PyObject *tmp_called_instance_3;
                PyObject *tmp_mvar_value_7;
                tmp_mvar_value_7 = GET_STRING_DICT_VALUE( moduledict_subprocess, (Nuitka_StringObject *)const_str_plain__winapi );

                if (unlikely( tmp_mvar_value_7 == NULL ))
                {
                    tmp_mvar_value_7 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain__winapi );
                }

                if ( tmp_mvar_value_7 == NULL )
                {

                    exception_type = PyExc_NameError;
                    Py_INCREF( exception_type );
                    exception_value = PyUnicode_FromFormat( "name '%s' is not defined", "_winapi" );
                    exception_tb = NULL;
                    NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
                    CHAIN_EXCEPTION( exception_value );

                    exception_lineno = 1031;
                    type_description_1 = "ooooooooooo";
                    goto try_except_handler_10;
                }

                tmp_called_instance_3 = tmp_mvar_value_7;
                frame_1ccac2e96ff9427e4b97325ca6a6800b->m_frame.f_lineno = 1031;
                tmp_iter_arg_5 = CALL_METHOD_WITH_ARGS2( tmp_called_instance_3, const_str_plain_CreatePipe, &PyTuple_GET_ITEM( const_tuple_none_int_0_tuple, 0 ) );

                if ( tmp_iter_arg_5 == NULL )
                {
                    assert( ERROR_OCCURRED() );

                    FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                    exception_lineno = 1031;
                    type_description_1 = "ooooooooooo";
                    goto try_except_handler_10;
                }
                tmp_assign_source_23 = MAKE_UNPACK_ITERATOR( tmp_iter_arg_5 );
                Py_DECREF( tmp_iter_arg_5 );
                if ( tmp_assign_source_23 == NULL )
                {
                    assert( ERROR_OCCURRED() );

                    FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                    exception_lineno = 1031;
                    type_description_1 = "ooooooooooo";
                    goto try_except_handler_10;
                }
                assert( tmp_tuple_unpack_5__source_iter == NULL );
                tmp_tuple_unpack_5__source_iter = tmp_assign_source_23;
            }
            // Tried code:
            {
                PyObject *tmp_assign_source_24;
                PyObject *tmp_unpack_9;
                CHECK_OBJECT( tmp_tuple_unpack_5__source_iter );
                tmp_unpack_9 = tmp_tuple_unpack_5__source_iter;
                tmp_assign_source_24 = UNPACK_NEXT( tmp_unpack_9, 0, 2 );
                if ( tmp_assign_source_24 == NULL )
                {
                    if ( !ERROR_OCCURRED() )
                    {
                        exception_type = PyExc_StopIteration;
                        Py_INCREF( exception_type );
                        exception_value = NULL;
                        exception_tb = NULL;
                    }
                    else
                    {
                        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
                    }


                    type_description_1 = "ooooooooooo";
                    exception_lineno = 1031;
                    goto try_except_handler_11;
                }
                assert( tmp_tuple_unpack_5__element_1 == NULL );
                tmp_tuple_unpack_5__element_1 = tmp_assign_source_24;
            }
            {
                PyObject *tmp_assign_source_25;
                PyObject *tmp_unpack_10;
                CHECK_OBJECT( tmp_tuple_unpack_5__source_iter );
                tmp_unpack_10 = tmp_tuple_unpack_5__source_iter;
                tmp_assign_source_25 = UNPACK_NEXT( tmp_unpack_10, 1, 2 );
                if ( tmp_assign_source_25 == NULL )
                {
                    if ( !ERROR_OCCURRED() )
                    {
                        exception_type = PyExc_StopIteration;
                        Py_INCREF( exception_type );
                        exception_value = NULL;
                        exception_tb = NULL;
                    }
                    else
                    {
                        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
                    }


                    type_description_1 = "ooooooooooo";
                    exception_lineno = 1031;
                    goto try_except_handler_11;
                }
                assert( tmp_tuple_unpack_5__element_2 == NULL );
                tmp_tuple_unpack_5__element_2 = tmp_assign_source_25;
            }
            {
                PyObject *tmp_iterator_name_2;
                CHECK_OBJECT( tmp_tuple_unpack_5__source_iter );
                tmp_iterator_name_2 = tmp_tuple_unpack_5__source_iter;
                // Check if iterator has left-over elements.
                CHECK_OBJECT( tmp_iterator_name_2 ); assert( HAS_ITERNEXT( tmp_iterator_name_2 ) );

                tmp_iterator_attempt = (*Py_TYPE( tmp_iterator_name_2 )->tp_iternext)( tmp_iterator_name_2 );

                if (likely( tmp_iterator_attempt == NULL ))
                {
                    PyObject *error = GET_ERROR_OCCURRED();

                    if ( error != NULL )
                    {
                        if ( EXCEPTION_MATCH_BOOL_SINGLE( error, PyExc_StopIteration ))
                        {
                            CLEAR_ERROR_OCCURRED();
                        }
                        else
                        {
                            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );

                            type_description_1 = "ooooooooooo";
                            exception_lineno = 1031;
                            goto try_except_handler_11;
                        }
                    }
                }
                else
                {
                    Py_DECREF( tmp_iterator_attempt );

                    // TODO: Could avoid PyErr_Format.
#if PYTHON_VERSION < 300
                    PyErr_Format( PyExc_ValueError, "too many values to unpack" );
#else
                    PyErr_Format( PyExc_ValueError, "too many values to unpack (expected 2)" );
#endif
                    FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );

                    type_description_1 = "ooooooooooo";
                    exception_lineno = 1031;
                    goto try_except_handler_11;
                }
            }
            goto try_end_9;
            // Exception handler code:
            try_except_handler_11:;
            exception_keeper_type_9 = exception_type;
            exception_keeper_value_9 = exception_value;
            exception_keeper_tb_9 = exception_tb;
            exception_keeper_lineno_9 = exception_lineno;
            exception_type = NULL;
            exception_value = NULL;
            exception_tb = NULL;
            exception_lineno = 0;

            CHECK_OBJECT( (PyObject *)tmp_tuple_unpack_5__source_iter );
            Py_DECREF( tmp_tuple_unpack_5__source_iter );
            tmp_tuple_unpack_5__source_iter = NULL;

            // Re-raise.
            exception_type = exception_keeper_type_9;
            exception_value = exception_keeper_value_9;
            exception_tb = exception_keeper_tb_9;
            exception_lineno = exception_keeper_lineno_9;

            goto try_except_handler_10;
            // End of try:
            try_end_9:;
            goto try_end_10;
            // Exception handler code:
            try_except_handler_10:;
            exception_keeper_type_10 = exception_type;
            exception_keeper_value_10 = exception_value;
            exception_keeper_tb_10 = exception_tb;
            exception_keeper_lineno_10 = exception_lineno;
            exception_type = NULL;
            exception_value = NULL;
            exception_tb = NULL;
            exception_lineno = 0;

            Py_XDECREF( tmp_tuple_unpack_5__element_1 );
            tmp_tuple_unpack_5__element_1 = NULL;

            Py_XDECREF( tmp_tuple_unpack_5__element_2 );
            tmp_tuple_unpack_5__element_2 = NULL;

            // Re-raise.
            exception_type = exception_keeper_type_10;
            exception_value = exception_keeper_value_10;
            exception_tb = exception_keeper_tb_10;
            exception_lineno = exception_keeper_lineno_10;

            goto frame_exception_exit_1;
            // End of try:
            try_end_10:;
            CHECK_OBJECT( (PyObject *)tmp_tuple_unpack_5__source_iter );
            Py_DECREF( tmp_tuple_unpack_5__source_iter );
            tmp_tuple_unpack_5__source_iter = NULL;

            {
                PyObject *tmp_assign_source_26;
                CHECK_OBJECT( tmp_tuple_unpack_5__element_1 );
                tmp_assign_source_26 = tmp_tuple_unpack_5__element_1;
                {
                    PyObject *old = var_p2cread;
                    assert( old != NULL );
                    var_p2cread = tmp_assign_source_26;
                    Py_INCREF( var_p2cread );
                    Py_DECREF( old );
                }

            }
            Py_XDECREF( tmp_tuple_unpack_5__element_1 );
            tmp_tuple_unpack_5__element_1 = NULL;

            {
                PyObject *tmp_assign_source_27;
                CHECK_OBJECT( tmp_tuple_unpack_5__element_2 );
                tmp_assign_source_27 = tmp_tuple_unpack_5__element_2;
                {
                    PyObject *old = var_p2cwrite;
                    assert( old != NULL );
                    var_p2cwrite = tmp_assign_source_27;
                    Py_INCREF( var_p2cwrite );
                    Py_DECREF( old );
                }

            }
            Py_XDECREF( tmp_tuple_unpack_5__element_2 );
            tmp_tuple_unpack_5__element_2 = NULL;

            // Tried code:
            {
                PyObject *tmp_assign_source_28;
                PyObject *tmp_iter_arg_6;
                PyObject *tmp_tuple_element_1;
                PyObject *tmp_called_name_3;
                PyObject *tmp_mvar_value_8;
                PyObject *tmp_args_element_name_4;
                PyObject *tmp_called_name_4;
                PyObject *tmp_mvar_value_9;
                PyObject *tmp_args_element_name_5;
                tmp_mvar_value_8 = GET_STRING_DICT_VALUE( moduledict_subprocess, (Nuitka_StringObject *)const_str_plain_Handle );

                if (unlikely( tmp_mvar_value_8 == NULL ))
                {
                    tmp_mvar_value_8 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_Handle );
                }

                if ( tmp_mvar_value_8 == NULL )
                {

                    exception_type = PyExc_NameError;
                    Py_INCREF( exception_type );
                    exception_value = PyUnicode_FromFormat( "name '%s' is not defined", "Handle" );
                    exception_tb = NULL;
                    NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
                    CHAIN_EXCEPTION( exception_value );

                    exception_lineno = 1032;
                    type_description_1 = "ooooooooooo";
                    goto try_except_handler_12;
                }

                tmp_called_name_3 = tmp_mvar_value_8;
                CHECK_OBJECT( var_p2cread );
                tmp_args_element_name_4 = var_p2cread;
                frame_1ccac2e96ff9427e4b97325ca6a6800b->m_frame.f_lineno = 1032;
                {
                    PyObject *call_args[] = { tmp_args_element_name_4 };
                    tmp_tuple_element_1 = CALL_FUNCTION_WITH_ARGS1( tmp_called_name_3, call_args );
                }

                if ( tmp_tuple_element_1 == NULL )
                {
                    assert( ERROR_OCCURRED() );

                    FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                    exception_lineno = 1032;
                    type_description_1 = "ooooooooooo";
                    goto try_except_handler_12;
                }
                tmp_iter_arg_6 = PyTuple_New( 2 );
                PyTuple_SET_ITEM( tmp_iter_arg_6, 0, tmp_tuple_element_1 );
                tmp_mvar_value_9 = GET_STRING_DICT_VALUE( moduledict_subprocess, (Nuitka_StringObject *)const_str_plain_Handle );

                if (unlikely( tmp_mvar_value_9 == NULL ))
                {
                    tmp_mvar_value_9 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_Handle );
                }

                if ( tmp_mvar_value_9 == NULL )
                {
                    Py_DECREF( tmp_iter_arg_6 );
                    exception_type = PyExc_NameError;
                    Py_INCREF( exception_type );
                    exception_value = PyUnicode_FromFormat( "name '%s' is not defined", "Handle" );
                    exception_tb = NULL;
                    NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
                    CHAIN_EXCEPTION( exception_value );

                    exception_lineno = 1032;
                    type_description_1 = "ooooooooooo";
                    goto try_except_handler_12;
                }

                tmp_called_name_4 = tmp_mvar_value_9;
                CHECK_OBJECT( var_p2cwrite );
                tmp_args_element_name_5 = var_p2cwrite;
                frame_1ccac2e96ff9427e4b97325ca6a6800b->m_frame.f_lineno = 1032;
                {
                    PyObject *call_args[] = { tmp_args_element_name_5 };
                    tmp_tuple_element_1 = CALL_FUNCTION_WITH_ARGS1( tmp_called_name_4, call_args );
                }

                if ( tmp_tuple_element_1 == NULL )
                {
                    assert( ERROR_OCCURRED() );

                    FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
                    Py_DECREF( tmp_iter_arg_6 );

                    exception_lineno = 1032;
                    type_description_1 = "ooooooooooo";
                    goto try_except_handler_12;
                }
                PyTuple_SET_ITEM( tmp_iter_arg_6, 1, tmp_tuple_element_1 );
                tmp_assign_source_28 = MAKE_UNPACK_ITERATOR( tmp_iter_arg_6 );
                Py_DECREF( tmp_iter_arg_6 );
                if ( tmp_assign_source_28 == NULL )
                {
                    assert( ERROR_OCCURRED() );

                    FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                    exception_lineno = 1032;
                    type_description_1 = "ooooooooooo";
                    goto try_except_handler_12;
                }
                assert( tmp_tuple_unpack_6__source_iter == NULL );
                tmp_tuple_unpack_6__source_iter = tmp_assign_source_28;
            }
            // Tried code:
            {
                PyObject *tmp_assign_source_29;
                PyObject *tmp_unpack_11;
                CHECK_OBJECT( tmp_tuple_unpack_6__source_iter );
                tmp_unpack_11 = tmp_tuple_unpack_6__source_iter;
                tmp_assign_source_29 = UNPACK_NEXT( tmp_unpack_11, 0, 2 );
                if ( tmp_assign_source_29 == NULL )
                {
                    if ( !ERROR_OCCURRED() )
                    {
                        exception_type = PyExc_StopIteration;
                        Py_INCREF( exception_type );
                        exception_value = NULL;
                        exception_tb = NULL;
                    }
                    else
                    {
                        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
                    }


                    type_description_1 = "ooooooooooo";
                    exception_lineno = 1032;
                    goto try_except_handler_13;
                }
                assert( tmp_tuple_unpack_6__element_1 == NULL );
                tmp_tuple_unpack_6__element_1 = tmp_assign_source_29;
            }
            {
                PyObject *tmp_assign_source_30;
                PyObject *tmp_unpack_12;
                CHECK_OBJECT( tmp_tuple_unpack_6__source_iter );
                tmp_unpack_12 = tmp_tuple_unpack_6__source_iter;
                tmp_assign_source_30 = UNPACK_NEXT( tmp_unpack_12, 1, 2 );
                if ( tmp_assign_source_30 == NULL )
                {
                    if ( !ERROR_OCCURRED() )
                    {
                        exception_type = PyExc_StopIteration;
                        Py_INCREF( exception_type );
                        exception_value = NULL;
                        exception_tb = NULL;
                    }
                    else
                    {
                        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
                    }


                    type_description_1 = "ooooooooooo";
                    exception_lineno = 1032;
                    goto try_except_handler_13;
                }
                assert( tmp_tuple_unpack_6__element_2 == NULL );
                tmp_tuple_unpack_6__element_2 = tmp_assign_source_30;
            }
            goto try_end_11;
            // Exception handler code:
            try_except_handler_13:;
            exception_keeper_type_11 = exception_type;
            exception_keeper_value_11 = exception_value;
            exception_keeper_tb_11 = exception_tb;
            exception_keeper_lineno_11 = exception_lineno;
            exception_type = NULL;
            exception_value = NULL;
            exception_tb = NULL;
            exception_lineno = 0;

            CHECK_OBJECT( (PyObject *)tmp_tuple_unpack_6__source_iter );
            Py_DECREF( tmp_tuple_unpack_6__source_iter );
            tmp_tuple_unpack_6__source_iter = NULL;

            // Re-raise.
            exception_type = exception_keeper_type_11;
            exception_value = exception_keeper_value_11;
            exception_tb = exception_keeper_tb_11;
            exception_lineno = exception_keeper_lineno_11;

            goto try_except_handler_12;
            // End of try:
            try_end_11:;
            goto try_end_12;
            // Exception handler code:
            try_except_handler_12:;
            exception_keeper_type_12 = exception_type;
            exception_keeper_value_12 = exception_value;
            exception_keeper_tb_12 = exception_tb;
            exception_keeper_lineno_12 = exception_lineno;
            exception_type = NULL;
            exception_value = NULL;
            exception_tb = NULL;
            exception_lineno = 0;

            Py_XDECREF( tmp_tuple_unpack_6__element_1 );
            tmp_tuple_unpack_6__element_1 = NULL;

            // Re-raise.
            exception_type = exception_keeper_type_12;
            exception_value = exception_keeper_value_12;
            exception_tb = exception_keeper_tb_12;
            exception_lineno = exception_keeper_lineno_12;

            goto frame_exception_exit_1;
            // End of try:
            try_end_12:;
            CHECK_OBJECT( (PyObject *)tmp_tuple_unpack_6__source_iter );
            Py_DECREF( tmp_tuple_unpack_6__source_iter );
            tmp_tuple_unpack_6__source_iter = NULL;

            {
                PyObject *tmp_assign_source_31;
                CHECK_OBJECT( tmp_tuple_unpack_6__element_1 );
                tmp_assign_source_31 = tmp_tuple_unpack_6__element_1;
                {
                    PyObject *old = var_p2cread;
                    assert( old != NULL );
                    var_p2cread = tmp_assign_source_31;
                    Py_INCREF( var_p2cread );
                    Py_DECREF( old );
                }

            }
            Py_XDECREF( tmp_tuple_unpack_6__element_1 );
            tmp_tuple_unpack_6__element_1 = NULL;

            {
                PyObject *tmp_assign_source_32;
                CHECK_OBJECT( tmp_tuple_unpack_6__element_2 );
                tmp_assign_source_32 = tmp_tuple_unpack_6__element_2;
                {
                    PyObject *old = var_p2cwrite;
                    assert( old != NULL );
                    var_p2cwrite = tmp_assign_source_32;
                    Py_INCREF( var_p2cwrite );
                    Py_DECREF( old );
                }

            }
            Py_XDECREF( tmp_tuple_unpack_6__element_2 );
            tmp_tuple_unpack_6__element_2 = NULL;

            goto branch_end_4;
            branch_no_4:;
            {
                nuitka_bool tmp_condition_result_5;
                PyObject *tmp_compexpr_left_7;
                PyObject *tmp_compexpr_right_7;
                PyObject *tmp_mvar_value_10;
                CHECK_OBJECT( par_stdin );
                tmp_compexpr_left_7 = par_stdin;
                tmp_mvar_value_10 = GET_STRING_DICT_VALUE( moduledict_subprocess, (Nuitka_StringObject *)const_str_plain_DEVNULL );

                if (unlikely( tmp_mvar_value_10 == NULL ))
                {
                    tmp_mvar_value_10 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_DEVNULL );
                }

                if ( tmp_mvar_value_10 == NULL )
                {

                    exception_type = PyExc_NameError;
                    Py_INCREF( exception_type );
                    exception_value = PyUnicode_FromFormat( "name '%s' is not defined", "DEVNULL" );
                    exception_tb = NULL;
                    NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
                    CHAIN_EXCEPTION( exception_value );

                    exception_lineno = 1033;
                    type_description_1 = "ooooooooooo";
                    goto frame_exception_exit_1;
                }

                tmp_compexpr_right_7 = tmp_mvar_value_10;
                tmp_res = RICH_COMPARE_BOOL_EQ_OBJECT_OBJECT( tmp_compexpr_left_7, tmp_compexpr_right_7 );
                if ( tmp_res == -1 )
                {
                    assert( ERROR_OCCURRED() );

                    FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                    exception_lineno = 1033;
                    type_description_1 = "ooooooooooo";
                    goto frame_exception_exit_1;
                }
                tmp_condition_result_5 = ( tmp_res != 0 ) ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
                if ( tmp_condition_result_5 == NUITKA_BOOL_TRUE )
                {
                    goto branch_yes_5;
                }
                else
                {
                    goto branch_no_5;
                }
                branch_yes_5:;
                {
                    PyObject *tmp_assign_source_33;
                    PyObject *tmp_called_name_5;
                    PyObject *tmp_source_name_3;
                    PyObject *tmp_mvar_value_11;
                    PyObject *tmp_args_element_name_6;
                    PyObject *tmp_called_instance_4;
                    tmp_mvar_value_11 = GET_STRING_DICT_VALUE( moduledict_subprocess, (Nuitka_StringObject *)const_str_plain_msvcrt );

                    if (unlikely( tmp_mvar_value_11 == NULL ))
                    {
                        tmp_mvar_value_11 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_msvcrt );
                    }

                    if ( tmp_mvar_value_11 == NULL )
                    {

                        exception_type = PyExc_NameError;
                        Py_INCREF( exception_type );
                        exception_value = PyUnicode_FromFormat( "name '%s' is not defined", "msvcrt" );
                        exception_tb = NULL;
                        NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
                        CHAIN_EXCEPTION( exception_value );

                        exception_lineno = 1034;
                        type_description_1 = "ooooooooooo";
                        goto frame_exception_exit_1;
                    }

                    tmp_source_name_3 = tmp_mvar_value_11;
                    tmp_called_name_5 = LOOKUP_ATTRIBUTE( tmp_source_name_3, const_str_plain_get_osfhandle );
                    if ( tmp_called_name_5 == NULL )
                    {
                        assert( ERROR_OCCURRED() );

                        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                        exception_lineno = 1034;
                        type_description_1 = "ooooooooooo";
                        goto frame_exception_exit_1;
                    }
                    CHECK_OBJECT( par_self );
                    tmp_called_instance_4 = par_self;
                    frame_1ccac2e96ff9427e4b97325ca6a6800b->m_frame.f_lineno = 1034;
                    tmp_args_element_name_6 = CALL_METHOD_NO_ARGS( tmp_called_instance_4, const_str_plain__get_devnull );
                    if ( tmp_args_element_name_6 == NULL )
                    {
                        assert( ERROR_OCCURRED() );

                        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
                        Py_DECREF( tmp_called_name_5 );

                        exception_lineno = 1034;
                        type_description_1 = "ooooooooooo";
                        goto frame_exception_exit_1;
                    }
                    frame_1ccac2e96ff9427e4b97325ca6a6800b->m_frame.f_lineno = 1034;
                    {
                        PyObject *call_args[] = { tmp_args_element_name_6 };
                        tmp_assign_source_33 = CALL_FUNCTION_WITH_ARGS1( tmp_called_name_5, call_args );
                    }

                    Py_DECREF( tmp_called_name_5 );
                    Py_DECREF( tmp_args_element_name_6 );
                    if ( tmp_assign_source_33 == NULL )
                    {
                        assert( ERROR_OCCURRED() );

                        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                        exception_lineno = 1034;
                        type_description_1 = "ooooooooooo";
                        goto frame_exception_exit_1;
                    }
                    {
                        PyObject *old = var_p2cread;
                        assert( old != NULL );
                        var_p2cread = tmp_assign_source_33;
                        Py_DECREF( old );
                    }

                }
                goto branch_end_5;
                branch_no_5:;
                {
                    nuitka_bool tmp_condition_result_6;
                    PyObject *tmp_isinstance_inst_1;
                    PyObject *tmp_isinstance_cls_1;
                    CHECK_OBJECT( par_stdin );
                    tmp_isinstance_inst_1 = par_stdin;
                    tmp_isinstance_cls_1 = (PyObject *)&PyLong_Type;
                    tmp_res = Nuitka_IsInstance( tmp_isinstance_inst_1, tmp_isinstance_cls_1 );
                    if ( tmp_res == -1 )
                    {
                        assert( ERROR_OCCURRED() );

                        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                        exception_lineno = 1035;
                        type_description_1 = "ooooooooooo";
                        goto frame_exception_exit_1;
                    }
                    tmp_condition_result_6 = ( tmp_res != 0 ) ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
                    if ( tmp_condition_result_6 == NUITKA_BOOL_TRUE )
                    {
                        goto branch_yes_6;
                    }
                    else
                    {
                        goto branch_no_6;
                    }
                    branch_yes_6:;
                    {
                        PyObject *tmp_assign_source_34;
                        PyObject *tmp_called_instance_5;
                        PyObject *tmp_mvar_value_12;
                        PyObject *tmp_args_element_name_7;
                        tmp_mvar_value_12 = GET_STRING_DICT_VALUE( moduledict_subprocess, (Nuitka_StringObject *)const_str_plain_msvcrt );

                        if (unlikely( tmp_mvar_value_12 == NULL ))
                        {
                            tmp_mvar_value_12 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_msvcrt );
                        }

                        if ( tmp_mvar_value_12 == NULL )
                        {

                            exception_type = PyExc_NameError;
                            Py_INCREF( exception_type );
                            exception_value = PyUnicode_FromFormat( "name '%s' is not defined", "msvcrt" );
                            exception_tb = NULL;
                            NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
                            CHAIN_EXCEPTION( exception_value );

                            exception_lineno = 1036;
                            type_description_1 = "ooooooooooo";
                            goto frame_exception_exit_1;
                        }

                        tmp_called_instance_5 = tmp_mvar_value_12;
                        CHECK_OBJECT( par_stdin );
                        tmp_args_element_name_7 = par_stdin;
                        frame_1ccac2e96ff9427e4b97325ca6a6800b->m_frame.f_lineno = 1036;
                        {
                            PyObject *call_args[] = { tmp_args_element_name_7 };
                            tmp_assign_source_34 = CALL_METHOD_WITH_ARGS1( tmp_called_instance_5, const_str_plain_get_osfhandle, call_args );
                        }

                        if ( tmp_assign_source_34 == NULL )
                        {
                            assert( ERROR_OCCURRED() );

                            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                            exception_lineno = 1036;
                            type_description_1 = "ooooooooooo";
                            goto frame_exception_exit_1;
                        }
                        {
                            PyObject *old = var_p2cread;
                            assert( old != NULL );
                            var_p2cread = tmp_assign_source_34;
                            Py_DECREF( old );
                        }

                    }
                    goto branch_end_6;
                    branch_no_6:;
                    {
                        PyObject *tmp_assign_source_35;
                        PyObject *tmp_called_name_6;
                        PyObject *tmp_source_name_4;
                        PyObject *tmp_mvar_value_13;
                        PyObject *tmp_args_element_name_8;
                        PyObject *tmp_called_instance_6;
                        tmp_mvar_value_13 = GET_STRING_DICT_VALUE( moduledict_subprocess, (Nuitka_StringObject *)const_str_plain_msvcrt );

                        if (unlikely( tmp_mvar_value_13 == NULL ))
                        {
                            tmp_mvar_value_13 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_msvcrt );
                        }

                        if ( tmp_mvar_value_13 == NULL )
                        {

                            exception_type = PyExc_NameError;
                            Py_INCREF( exception_type );
                            exception_value = PyUnicode_FromFormat( "name '%s' is not defined", "msvcrt" );
                            exception_tb = NULL;
                            NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
                            CHAIN_EXCEPTION( exception_value );

                            exception_lineno = 1039;
                            type_description_1 = "ooooooooooo";
                            goto frame_exception_exit_1;
                        }

                        tmp_source_name_4 = tmp_mvar_value_13;
                        tmp_called_name_6 = LOOKUP_ATTRIBUTE( tmp_source_name_4, const_str_plain_get_osfhandle );
                        if ( tmp_called_name_6 == NULL )
                        {
                            assert( ERROR_OCCURRED() );

                            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                            exception_lineno = 1039;
                            type_description_1 = "ooooooooooo";
                            goto frame_exception_exit_1;
                        }
                        CHECK_OBJECT( par_stdin );
                        tmp_called_instance_6 = par_stdin;
                        frame_1ccac2e96ff9427e4b97325ca6a6800b->m_frame.f_lineno = 1039;
                        tmp_args_element_name_8 = CALL_METHOD_NO_ARGS( tmp_called_instance_6, const_str_plain_fileno );
                        if ( tmp_args_element_name_8 == NULL )
                        {
                            assert( ERROR_OCCURRED() );

                            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
                            Py_DECREF( tmp_called_name_6 );

                            exception_lineno = 1039;
                            type_description_1 = "ooooooooooo";
                            goto frame_exception_exit_1;
                        }
                        frame_1ccac2e96ff9427e4b97325ca6a6800b->m_frame.f_lineno = 1039;
                        {
                            PyObject *call_args[] = { tmp_args_element_name_8 };
                            tmp_assign_source_35 = CALL_FUNCTION_WITH_ARGS1( tmp_called_name_6, call_args );
                        }

                        Py_DECREF( tmp_called_name_6 );
                        Py_DECREF( tmp_args_element_name_8 );
                        if ( tmp_assign_source_35 == NULL )
                        {
                            assert( ERROR_OCCURRED() );

                            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                            exception_lineno = 1039;
                            type_description_1 = "ooooooooooo";
                            goto frame_exception_exit_1;
                        }
                        {
                            PyObject *old = var_p2cread;
                            assert( old != NULL );
                            var_p2cread = tmp_assign_source_35;
                            Py_DECREF( old );
                        }

                    }
                    branch_end_6:;
                }
                branch_end_5:;
            }
            branch_end_4:;
        }
        branch_end_2:;
    }
    {
        PyObject *tmp_assign_source_36;
        PyObject *tmp_called_name_7;
        PyObject *tmp_source_name_5;
        PyObject *tmp_args_element_name_9;
        CHECK_OBJECT( par_self );
        tmp_source_name_5 = par_self;
        tmp_called_name_7 = LOOKUP_ATTRIBUTE( tmp_source_name_5, const_str_plain__make_inheritable );
        if ( tmp_called_name_7 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 1040;
            type_description_1 = "ooooooooooo";
            goto frame_exception_exit_1;
        }
        if ( var_p2cread == NULL )
        {
            Py_DECREF( tmp_called_name_7 );
            exception_type = PyExc_UnboundLocalError;
            Py_INCREF( exception_type );
            exception_value = PyUnicode_FromFormat( "local variable '%s' referenced before assignment", "p2cread" );
            exception_tb = NULL;
            NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
            CHAIN_EXCEPTION( exception_value );

            exception_lineno = 1040;
            type_description_1 = "ooooooooooo";
            goto frame_exception_exit_1;
        }

        tmp_args_element_name_9 = var_p2cread;
        frame_1ccac2e96ff9427e4b97325ca6a6800b->m_frame.f_lineno = 1040;
        {
            PyObject *call_args[] = { tmp_args_element_name_9 };
            tmp_assign_source_36 = CALL_FUNCTION_WITH_ARGS1( tmp_called_name_7, call_args );
        }

        Py_DECREF( tmp_called_name_7 );
        if ( tmp_assign_source_36 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 1040;
            type_description_1 = "ooooooooooo";
            goto frame_exception_exit_1;
        }
        {
            PyObject *old = var_p2cread;
            var_p2cread = tmp_assign_source_36;
            Py_XDECREF( old );
        }

    }
    {
        nuitka_bool tmp_condition_result_7;
        PyObject *tmp_compexpr_left_8;
        PyObject *tmp_compexpr_right_8;
        CHECK_OBJECT( par_stdout );
        tmp_compexpr_left_8 = par_stdout;
        tmp_compexpr_right_8 = Py_None;
        tmp_condition_result_7 = ( tmp_compexpr_left_8 == tmp_compexpr_right_8 ) ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
        if ( tmp_condition_result_7 == NUITKA_BOOL_TRUE )
        {
            goto branch_yes_7;
        }
        else
        {
            goto branch_no_7;
        }
        branch_yes_7:;
        {
            PyObject *tmp_assign_source_37;
            PyObject *tmp_called_name_8;
            PyObject *tmp_source_name_6;
            PyObject *tmp_mvar_value_14;
            PyObject *tmp_args_element_name_10;
            PyObject *tmp_source_name_7;
            PyObject *tmp_mvar_value_15;
            tmp_mvar_value_14 = GET_STRING_DICT_VALUE( moduledict_subprocess, (Nuitka_StringObject *)const_str_plain__winapi );

            if (unlikely( tmp_mvar_value_14 == NULL ))
            {
                tmp_mvar_value_14 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain__winapi );
            }

            if ( tmp_mvar_value_14 == NULL )
            {

                exception_type = PyExc_NameError;
                Py_INCREF( exception_type );
                exception_value = PyUnicode_FromFormat( "name '%s' is not defined", "_winapi" );
                exception_tb = NULL;
                NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
                CHAIN_EXCEPTION( exception_value );

                exception_lineno = 1043;
                type_description_1 = "ooooooooooo";
                goto frame_exception_exit_1;
            }

            tmp_source_name_6 = tmp_mvar_value_14;
            tmp_called_name_8 = LOOKUP_ATTRIBUTE( tmp_source_name_6, const_str_plain_GetStdHandle );
            if ( tmp_called_name_8 == NULL )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 1043;
                type_description_1 = "ooooooooooo";
                goto frame_exception_exit_1;
            }
            tmp_mvar_value_15 = GET_STRING_DICT_VALUE( moduledict_subprocess, (Nuitka_StringObject *)const_str_plain__winapi );

            if (unlikely( tmp_mvar_value_15 == NULL ))
            {
                tmp_mvar_value_15 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain__winapi );
            }

            if ( tmp_mvar_value_15 == NULL )
            {
                Py_DECREF( tmp_called_name_8 );
                exception_type = PyExc_NameError;
                Py_INCREF( exception_type );
                exception_value = PyUnicode_FromFormat( "name '%s' is not defined", "_winapi" );
                exception_tb = NULL;
                NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
                CHAIN_EXCEPTION( exception_value );

                exception_lineno = 1043;
                type_description_1 = "ooooooooooo";
                goto frame_exception_exit_1;
            }

            tmp_source_name_7 = tmp_mvar_value_15;
            tmp_args_element_name_10 = LOOKUP_ATTRIBUTE( tmp_source_name_7, const_str_plain_STD_OUTPUT_HANDLE );
            if ( tmp_args_element_name_10 == NULL )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
                Py_DECREF( tmp_called_name_8 );

                exception_lineno = 1043;
                type_description_1 = "ooooooooooo";
                goto frame_exception_exit_1;
            }
            frame_1ccac2e96ff9427e4b97325ca6a6800b->m_frame.f_lineno = 1043;
            {
                PyObject *call_args[] = { tmp_args_element_name_10 };
                tmp_assign_source_37 = CALL_FUNCTION_WITH_ARGS1( tmp_called_name_8, call_args );
            }

            Py_DECREF( tmp_called_name_8 );
            Py_DECREF( tmp_args_element_name_10 );
            if ( tmp_assign_source_37 == NULL )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 1043;
                type_description_1 = "ooooooooooo";
                goto frame_exception_exit_1;
            }
            {
                PyObject *old = var_c2pwrite;
                assert( old != NULL );
                var_c2pwrite = tmp_assign_source_37;
                Py_DECREF( old );
            }

        }
        {
            nuitka_bool tmp_condition_result_8;
            PyObject *tmp_compexpr_left_9;
            PyObject *tmp_compexpr_right_9;
            CHECK_OBJECT( var_c2pwrite );
            tmp_compexpr_left_9 = var_c2pwrite;
            tmp_compexpr_right_9 = Py_None;
            tmp_condition_result_8 = ( tmp_compexpr_left_9 == tmp_compexpr_right_9 ) ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
            if ( tmp_condition_result_8 == NUITKA_BOOL_TRUE )
            {
                goto branch_yes_8;
            }
            else
            {
                goto branch_no_8;
            }
            branch_yes_8:;
            // Tried code:
            {
                PyObject *tmp_assign_source_38;
                PyObject *tmp_iter_arg_7;
                PyObject *tmp_called_instance_7;
                PyObject *tmp_mvar_value_16;
                tmp_mvar_value_16 = GET_STRING_DICT_VALUE( moduledict_subprocess, (Nuitka_StringObject *)const_str_plain__winapi );

                if (unlikely( tmp_mvar_value_16 == NULL ))
                {
                    tmp_mvar_value_16 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain__winapi );
                }

                if ( tmp_mvar_value_16 == NULL )
                {

                    exception_type = PyExc_NameError;
                    Py_INCREF( exception_type );
                    exception_value = PyUnicode_FromFormat( "name '%s' is not defined", "_winapi" );
                    exception_tb = NULL;
                    NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
                    CHAIN_EXCEPTION( exception_value );

                    exception_lineno = 1045;
                    type_description_1 = "ooooooooooo";
                    goto try_except_handler_14;
                }

                tmp_called_instance_7 = tmp_mvar_value_16;
                frame_1ccac2e96ff9427e4b97325ca6a6800b->m_frame.f_lineno = 1045;
                tmp_iter_arg_7 = CALL_METHOD_WITH_ARGS2( tmp_called_instance_7, const_str_plain_CreatePipe, &PyTuple_GET_ITEM( const_tuple_none_int_0_tuple, 0 ) );

                if ( tmp_iter_arg_7 == NULL )
                {
                    assert( ERROR_OCCURRED() );

                    FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                    exception_lineno = 1045;
                    type_description_1 = "ooooooooooo";
                    goto try_except_handler_14;
                }
                tmp_assign_source_38 = MAKE_UNPACK_ITERATOR( tmp_iter_arg_7 );
                Py_DECREF( tmp_iter_arg_7 );
                if ( tmp_assign_source_38 == NULL )
                {
                    assert( ERROR_OCCURRED() );

                    FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                    exception_lineno = 1045;
                    type_description_1 = "ooooooooooo";
                    goto try_except_handler_14;
                }
                assert( tmp_tuple_unpack_7__source_iter == NULL );
                tmp_tuple_unpack_7__source_iter = tmp_assign_source_38;
            }
            // Tried code:
            {
                PyObject *tmp_assign_source_39;
                PyObject *tmp_unpack_13;
                CHECK_OBJECT( tmp_tuple_unpack_7__source_iter );
                tmp_unpack_13 = tmp_tuple_unpack_7__source_iter;
                tmp_assign_source_39 = UNPACK_NEXT( tmp_unpack_13, 0, 2 );
                if ( tmp_assign_source_39 == NULL )
                {
                    if ( !ERROR_OCCURRED() )
                    {
                        exception_type = PyExc_StopIteration;
                        Py_INCREF( exception_type );
                        exception_value = NULL;
                        exception_tb = NULL;
                    }
                    else
                    {
                        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
                    }


                    type_description_1 = "ooooooooooo";
                    exception_lineno = 1045;
                    goto try_except_handler_15;
                }
                assert( tmp_tuple_unpack_7__element_1 == NULL );
                tmp_tuple_unpack_7__element_1 = tmp_assign_source_39;
            }
            {
                PyObject *tmp_assign_source_40;
                PyObject *tmp_unpack_14;
                CHECK_OBJECT( tmp_tuple_unpack_7__source_iter );
                tmp_unpack_14 = tmp_tuple_unpack_7__source_iter;
                tmp_assign_source_40 = UNPACK_NEXT( tmp_unpack_14, 1, 2 );
                if ( tmp_assign_source_40 == NULL )
                {
                    if ( !ERROR_OCCURRED() )
                    {
                        exception_type = PyExc_StopIteration;
                        Py_INCREF( exception_type );
                        exception_value = NULL;
                        exception_tb = NULL;
                    }
                    else
                    {
                        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
                    }


                    type_description_1 = "ooooooooooo";
                    exception_lineno = 1045;
                    goto try_except_handler_15;
                }
                assert( tmp_tuple_unpack_7__element_2 == NULL );
                tmp_tuple_unpack_7__element_2 = tmp_assign_source_40;
            }
            {
                PyObject *tmp_iterator_name_3;
                CHECK_OBJECT( tmp_tuple_unpack_7__source_iter );
                tmp_iterator_name_3 = tmp_tuple_unpack_7__source_iter;
                // Check if iterator has left-over elements.
                CHECK_OBJECT( tmp_iterator_name_3 ); assert( HAS_ITERNEXT( tmp_iterator_name_3 ) );

                tmp_iterator_attempt = (*Py_TYPE( tmp_iterator_name_3 )->tp_iternext)( tmp_iterator_name_3 );

                if (likely( tmp_iterator_attempt == NULL ))
                {
                    PyObject *error = GET_ERROR_OCCURRED();

                    if ( error != NULL )
                    {
                        if ( EXCEPTION_MATCH_BOOL_SINGLE( error, PyExc_StopIteration ))
                        {
                            CLEAR_ERROR_OCCURRED();
                        }
                        else
                        {
                            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );

                            type_description_1 = "ooooooooooo";
                            exception_lineno = 1045;
                            goto try_except_handler_15;
                        }
                    }
                }
                else
                {
                    Py_DECREF( tmp_iterator_attempt );

                    // TODO: Could avoid PyErr_Format.
#if PYTHON_VERSION < 300
                    PyErr_Format( PyExc_ValueError, "too many values to unpack" );
#else
                    PyErr_Format( PyExc_ValueError, "too many values to unpack (expected 2)" );
#endif
                    FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );

                    type_description_1 = "ooooooooooo";
                    exception_lineno = 1045;
                    goto try_except_handler_15;
                }
            }
            goto try_end_13;
            // Exception handler code:
            try_except_handler_15:;
            exception_keeper_type_13 = exception_type;
            exception_keeper_value_13 = exception_value;
            exception_keeper_tb_13 = exception_tb;
            exception_keeper_lineno_13 = exception_lineno;
            exception_type = NULL;
            exception_value = NULL;
            exception_tb = NULL;
            exception_lineno = 0;

            CHECK_OBJECT( (PyObject *)tmp_tuple_unpack_7__source_iter );
            Py_DECREF( tmp_tuple_unpack_7__source_iter );
            tmp_tuple_unpack_7__source_iter = NULL;

            // Re-raise.
            exception_type = exception_keeper_type_13;
            exception_value = exception_keeper_value_13;
            exception_tb = exception_keeper_tb_13;
            exception_lineno = exception_keeper_lineno_13;

            goto try_except_handler_14;
            // End of try:
            try_end_13:;
            goto try_end_14;
            // Exception handler code:
            try_except_handler_14:;
            exception_keeper_type_14 = exception_type;
            exception_keeper_value_14 = exception_value;
            exception_keeper_tb_14 = exception_tb;
            exception_keeper_lineno_14 = exception_lineno;
            exception_type = NULL;
            exception_value = NULL;
            exception_tb = NULL;
            exception_lineno = 0;

            Py_XDECREF( tmp_tuple_unpack_7__element_1 );
            tmp_tuple_unpack_7__element_1 = NULL;

            Py_XDECREF( tmp_tuple_unpack_7__element_2 );
            tmp_tuple_unpack_7__element_2 = NULL;

            // Re-raise.
            exception_type = exception_keeper_type_14;
            exception_value = exception_keeper_value_14;
            exception_tb = exception_keeper_tb_14;
            exception_lineno = exception_keeper_lineno_14;

            goto frame_exception_exit_1;
            // End of try:
            try_end_14:;
            CHECK_OBJECT( (PyObject *)tmp_tuple_unpack_7__source_iter );
            Py_DECREF( tmp_tuple_unpack_7__source_iter );
            tmp_tuple_unpack_7__source_iter = NULL;

            {
                PyObject *tmp_assign_source_41;
                CHECK_OBJECT( tmp_tuple_unpack_7__element_1 );
                tmp_assign_source_41 = tmp_tuple_unpack_7__element_1;
                {
                    PyObject *old = var__;
                    var__ = tmp_assign_source_41;
                    Py_INCREF( var__ );
                    Py_XDECREF( old );
                }

            }
            Py_XDECREF( tmp_tuple_unpack_7__element_1 );
            tmp_tuple_unpack_7__element_1 = NULL;

            {
                PyObject *tmp_assign_source_42;
                CHECK_OBJECT( tmp_tuple_unpack_7__element_2 );
                tmp_assign_source_42 = tmp_tuple_unpack_7__element_2;
                {
                    PyObject *old = var_c2pwrite;
                    assert( old != NULL );
                    var_c2pwrite = tmp_assign_source_42;
                    Py_INCREF( var_c2pwrite );
                    Py_DECREF( old );
                }

            }
            Py_XDECREF( tmp_tuple_unpack_7__element_2 );
            tmp_tuple_unpack_7__element_2 = NULL;

            {
                PyObject *tmp_assign_source_43;
                PyObject *tmp_called_name_9;
                PyObject *tmp_mvar_value_17;
                PyObject *tmp_args_element_name_11;
                tmp_mvar_value_17 = GET_STRING_DICT_VALUE( moduledict_subprocess, (Nuitka_StringObject *)const_str_plain_Handle );

                if (unlikely( tmp_mvar_value_17 == NULL ))
                {
                    tmp_mvar_value_17 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_Handle );
                }

                if ( tmp_mvar_value_17 == NULL )
                {

                    exception_type = PyExc_NameError;
                    Py_INCREF( exception_type );
                    exception_value = PyUnicode_FromFormat( "name '%s' is not defined", "Handle" );
                    exception_tb = NULL;
                    NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
                    CHAIN_EXCEPTION( exception_value );

                    exception_lineno = 1046;
                    type_description_1 = "ooooooooooo";
                    goto frame_exception_exit_1;
                }

                tmp_called_name_9 = tmp_mvar_value_17;
                CHECK_OBJECT( var_c2pwrite );
                tmp_args_element_name_11 = var_c2pwrite;
                frame_1ccac2e96ff9427e4b97325ca6a6800b->m_frame.f_lineno = 1046;
                {
                    PyObject *call_args[] = { tmp_args_element_name_11 };
                    tmp_assign_source_43 = CALL_FUNCTION_WITH_ARGS1( tmp_called_name_9, call_args );
                }

                if ( tmp_assign_source_43 == NULL )
                {
                    assert( ERROR_OCCURRED() );

                    FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                    exception_lineno = 1046;
                    type_description_1 = "ooooooooooo";
                    goto frame_exception_exit_1;
                }
                {
                    PyObject *old = var_c2pwrite;
                    assert( old != NULL );
                    var_c2pwrite = tmp_assign_source_43;
                    Py_DECREF( old );
                }

            }
            {
                PyObject *tmp_called_instance_8;
                PyObject *tmp_mvar_value_18;
                PyObject *tmp_call_result_2;
                PyObject *tmp_args_element_name_12;
                tmp_mvar_value_18 = GET_STRING_DICT_VALUE( moduledict_subprocess, (Nuitka_StringObject *)const_str_plain__winapi );

                if (unlikely( tmp_mvar_value_18 == NULL ))
                {
                    tmp_mvar_value_18 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain__winapi );
                }

                if ( tmp_mvar_value_18 == NULL )
                {

                    exception_type = PyExc_NameError;
                    Py_INCREF( exception_type );
                    exception_value = PyUnicode_FromFormat( "name '%s' is not defined", "_winapi" );
                    exception_tb = NULL;
                    NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
                    CHAIN_EXCEPTION( exception_value );

                    exception_lineno = 1047;
                    type_description_1 = "ooooooooooo";
                    goto frame_exception_exit_1;
                }

                tmp_called_instance_8 = tmp_mvar_value_18;
                CHECK_OBJECT( var__ );
                tmp_args_element_name_12 = var__;
                frame_1ccac2e96ff9427e4b97325ca6a6800b->m_frame.f_lineno = 1047;
                {
                    PyObject *call_args[] = { tmp_args_element_name_12 };
                    tmp_call_result_2 = CALL_METHOD_WITH_ARGS1( tmp_called_instance_8, const_str_plain_CloseHandle, call_args );
                }

                if ( tmp_call_result_2 == NULL )
                {
                    assert( ERROR_OCCURRED() );

                    FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                    exception_lineno = 1047;
                    type_description_1 = "ooooooooooo";
                    goto frame_exception_exit_1;
                }
                Py_DECREF( tmp_call_result_2 );
            }
            branch_no_8:;
        }
        goto branch_end_7;
        branch_no_7:;
        {
            nuitka_bool tmp_condition_result_9;
            PyObject *tmp_compexpr_left_10;
            PyObject *tmp_compexpr_right_10;
            PyObject *tmp_mvar_value_19;
            CHECK_OBJECT( par_stdout );
            tmp_compexpr_left_10 = par_stdout;
            tmp_mvar_value_19 = GET_STRING_DICT_VALUE( moduledict_subprocess, (Nuitka_StringObject *)const_str_plain_PIPE );

            if (unlikely( tmp_mvar_value_19 == NULL ))
            {
                tmp_mvar_value_19 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_PIPE );
            }

            if ( tmp_mvar_value_19 == NULL )
            {

                exception_type = PyExc_NameError;
                Py_INCREF( exception_type );
                exception_value = PyUnicode_FromFormat( "name '%s' is not defined", "PIPE" );
                exception_tb = NULL;
                NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
                CHAIN_EXCEPTION( exception_value );

                exception_lineno = 1048;
                type_description_1 = "ooooooooooo";
                goto frame_exception_exit_1;
            }

            tmp_compexpr_right_10 = tmp_mvar_value_19;
            tmp_res = RICH_COMPARE_BOOL_EQ_OBJECT_OBJECT( tmp_compexpr_left_10, tmp_compexpr_right_10 );
            if ( tmp_res == -1 )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 1048;
                type_description_1 = "ooooooooooo";
                goto frame_exception_exit_1;
            }
            tmp_condition_result_9 = ( tmp_res != 0 ) ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
            if ( tmp_condition_result_9 == NUITKA_BOOL_TRUE )
            {
                goto branch_yes_9;
            }
            else
            {
                goto branch_no_9;
            }
            branch_yes_9:;
            // Tried code:
            {
                PyObject *tmp_assign_source_44;
                PyObject *tmp_iter_arg_8;
                PyObject *tmp_called_instance_9;
                PyObject *tmp_mvar_value_20;
                tmp_mvar_value_20 = GET_STRING_DICT_VALUE( moduledict_subprocess, (Nuitka_StringObject *)const_str_plain__winapi );

                if (unlikely( tmp_mvar_value_20 == NULL ))
                {
                    tmp_mvar_value_20 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain__winapi );
                }

                if ( tmp_mvar_value_20 == NULL )
                {

                    exception_type = PyExc_NameError;
                    Py_INCREF( exception_type );
                    exception_value = PyUnicode_FromFormat( "name '%s' is not defined", "_winapi" );
                    exception_tb = NULL;
                    NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
                    CHAIN_EXCEPTION( exception_value );

                    exception_lineno = 1049;
                    type_description_1 = "ooooooooooo";
                    goto try_except_handler_16;
                }

                tmp_called_instance_9 = tmp_mvar_value_20;
                frame_1ccac2e96ff9427e4b97325ca6a6800b->m_frame.f_lineno = 1049;
                tmp_iter_arg_8 = CALL_METHOD_WITH_ARGS2( tmp_called_instance_9, const_str_plain_CreatePipe, &PyTuple_GET_ITEM( const_tuple_none_int_0_tuple, 0 ) );

                if ( tmp_iter_arg_8 == NULL )
                {
                    assert( ERROR_OCCURRED() );

                    FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                    exception_lineno = 1049;
                    type_description_1 = "ooooooooooo";
                    goto try_except_handler_16;
                }
                tmp_assign_source_44 = MAKE_UNPACK_ITERATOR( tmp_iter_arg_8 );
                Py_DECREF( tmp_iter_arg_8 );
                if ( tmp_assign_source_44 == NULL )
                {
                    assert( ERROR_OCCURRED() );

                    FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                    exception_lineno = 1049;
                    type_description_1 = "ooooooooooo";
                    goto try_except_handler_16;
                }
                assert( tmp_tuple_unpack_8__source_iter == NULL );
                tmp_tuple_unpack_8__source_iter = tmp_assign_source_44;
            }
            // Tried code:
            {
                PyObject *tmp_assign_source_45;
                PyObject *tmp_unpack_15;
                CHECK_OBJECT( tmp_tuple_unpack_8__source_iter );
                tmp_unpack_15 = tmp_tuple_unpack_8__source_iter;
                tmp_assign_source_45 = UNPACK_NEXT( tmp_unpack_15, 0, 2 );
                if ( tmp_assign_source_45 == NULL )
                {
                    if ( !ERROR_OCCURRED() )
                    {
                        exception_type = PyExc_StopIteration;
                        Py_INCREF( exception_type );
                        exception_value = NULL;
                        exception_tb = NULL;
                    }
                    else
                    {
                        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
                    }


                    type_description_1 = "ooooooooooo";
                    exception_lineno = 1049;
                    goto try_except_handler_17;
                }
                assert( tmp_tuple_unpack_8__element_1 == NULL );
                tmp_tuple_unpack_8__element_1 = tmp_assign_source_45;
            }
            {
                PyObject *tmp_assign_source_46;
                PyObject *tmp_unpack_16;
                CHECK_OBJECT( tmp_tuple_unpack_8__source_iter );
                tmp_unpack_16 = tmp_tuple_unpack_8__source_iter;
                tmp_assign_source_46 = UNPACK_NEXT( tmp_unpack_16, 1, 2 );
                if ( tmp_assign_source_46 == NULL )
                {
                    if ( !ERROR_OCCURRED() )
                    {
                        exception_type = PyExc_StopIteration;
                        Py_INCREF( exception_type );
                        exception_value = NULL;
                        exception_tb = NULL;
                    }
                    else
                    {
                        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
                    }


                    type_description_1 = "ooooooooooo";
                    exception_lineno = 1049;
                    goto try_except_handler_17;
                }
                assert( tmp_tuple_unpack_8__element_2 == NULL );
                tmp_tuple_unpack_8__element_2 = tmp_assign_source_46;
            }
            {
                PyObject *tmp_iterator_name_4;
                CHECK_OBJECT( tmp_tuple_unpack_8__source_iter );
                tmp_iterator_name_4 = tmp_tuple_unpack_8__source_iter;
                // Check if iterator has left-over elements.
                CHECK_OBJECT( tmp_iterator_name_4 ); assert( HAS_ITERNEXT( tmp_iterator_name_4 ) );

                tmp_iterator_attempt = (*Py_TYPE( tmp_iterator_name_4 )->tp_iternext)( tmp_iterator_name_4 );

                if (likely( tmp_iterator_attempt == NULL ))
                {
                    PyObject *error = GET_ERROR_OCCURRED();

                    if ( error != NULL )
                    {
                        if ( EXCEPTION_MATCH_BOOL_SINGLE( error, PyExc_StopIteration ))
                        {
                            CLEAR_ERROR_OCCURRED();
                        }
                        else
                        {
                            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );

                            type_description_1 = "ooooooooooo";
                            exception_lineno = 1049;
                            goto try_except_handler_17;
                        }
                    }
                }
                else
                {
                    Py_DECREF( tmp_iterator_attempt );

                    // TODO: Could avoid PyErr_Format.
#if PYTHON_VERSION < 300
                    PyErr_Format( PyExc_ValueError, "too many values to unpack" );
#else
                    PyErr_Format( PyExc_ValueError, "too many values to unpack (expected 2)" );
#endif
                    FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );

                    type_description_1 = "ooooooooooo";
                    exception_lineno = 1049;
                    goto try_except_handler_17;
                }
            }
            goto try_end_15;
            // Exception handler code:
            try_except_handler_17:;
            exception_keeper_type_15 = exception_type;
            exception_keeper_value_15 = exception_value;
            exception_keeper_tb_15 = exception_tb;
            exception_keeper_lineno_15 = exception_lineno;
            exception_type = NULL;
            exception_value = NULL;
            exception_tb = NULL;
            exception_lineno = 0;

            CHECK_OBJECT( (PyObject *)tmp_tuple_unpack_8__source_iter );
            Py_DECREF( tmp_tuple_unpack_8__source_iter );
            tmp_tuple_unpack_8__source_iter = NULL;

            // Re-raise.
            exception_type = exception_keeper_type_15;
            exception_value = exception_keeper_value_15;
            exception_tb = exception_keeper_tb_15;
            exception_lineno = exception_keeper_lineno_15;

            goto try_except_handler_16;
            // End of try:
            try_end_15:;
            goto try_end_16;
            // Exception handler code:
            try_except_handler_16:;
            exception_keeper_type_16 = exception_type;
            exception_keeper_value_16 = exception_value;
            exception_keeper_tb_16 = exception_tb;
            exception_keeper_lineno_16 = exception_lineno;
            exception_type = NULL;
            exception_value = NULL;
            exception_tb = NULL;
            exception_lineno = 0;

            Py_XDECREF( tmp_tuple_unpack_8__element_1 );
            tmp_tuple_unpack_8__element_1 = NULL;

            Py_XDECREF( tmp_tuple_unpack_8__element_2 );
            tmp_tuple_unpack_8__element_2 = NULL;

            // Re-raise.
            exception_type = exception_keeper_type_16;
            exception_value = exception_keeper_value_16;
            exception_tb = exception_keeper_tb_16;
            exception_lineno = exception_keeper_lineno_16;

            goto frame_exception_exit_1;
            // End of try:
            try_end_16:;
            CHECK_OBJECT( (PyObject *)tmp_tuple_unpack_8__source_iter );
            Py_DECREF( tmp_tuple_unpack_8__source_iter );
            tmp_tuple_unpack_8__source_iter = NULL;

            {
                PyObject *tmp_assign_source_47;
                CHECK_OBJECT( tmp_tuple_unpack_8__element_1 );
                tmp_assign_source_47 = tmp_tuple_unpack_8__element_1;
                {
                    PyObject *old = var_c2pread;
                    assert( old != NULL );
                    var_c2pread = tmp_assign_source_47;
                    Py_INCREF( var_c2pread );
                    Py_DECREF( old );
                }

            }
            Py_XDECREF( tmp_tuple_unpack_8__element_1 );
            tmp_tuple_unpack_8__element_1 = NULL;

            {
                PyObject *tmp_assign_source_48;
                CHECK_OBJECT( tmp_tuple_unpack_8__element_2 );
                tmp_assign_source_48 = tmp_tuple_unpack_8__element_2;
                {
                    PyObject *old = var_c2pwrite;
                    assert( old != NULL );
                    var_c2pwrite = tmp_assign_source_48;
                    Py_INCREF( var_c2pwrite );
                    Py_DECREF( old );
                }

            }
            Py_XDECREF( tmp_tuple_unpack_8__element_2 );
            tmp_tuple_unpack_8__element_2 = NULL;

            // Tried code:
            {
                PyObject *tmp_assign_source_49;
                PyObject *tmp_iter_arg_9;
                PyObject *tmp_tuple_element_2;
                PyObject *tmp_called_name_10;
                PyObject *tmp_mvar_value_21;
                PyObject *tmp_args_element_name_13;
                PyObject *tmp_called_name_11;
                PyObject *tmp_mvar_value_22;
                PyObject *tmp_args_element_name_14;
                tmp_mvar_value_21 = GET_STRING_DICT_VALUE( moduledict_subprocess, (Nuitka_StringObject *)const_str_plain_Handle );

                if (unlikely( tmp_mvar_value_21 == NULL ))
                {
                    tmp_mvar_value_21 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_Handle );
                }

                if ( tmp_mvar_value_21 == NULL )
                {

                    exception_type = PyExc_NameError;
                    Py_INCREF( exception_type );
                    exception_value = PyUnicode_FromFormat( "name '%s' is not defined", "Handle" );
                    exception_tb = NULL;
                    NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
                    CHAIN_EXCEPTION( exception_value );

                    exception_lineno = 1050;
                    type_description_1 = "ooooooooooo";
                    goto try_except_handler_18;
                }

                tmp_called_name_10 = tmp_mvar_value_21;
                CHECK_OBJECT( var_c2pread );
                tmp_args_element_name_13 = var_c2pread;
                frame_1ccac2e96ff9427e4b97325ca6a6800b->m_frame.f_lineno = 1050;
                {
                    PyObject *call_args[] = { tmp_args_element_name_13 };
                    tmp_tuple_element_2 = CALL_FUNCTION_WITH_ARGS1( tmp_called_name_10, call_args );
                }

                if ( tmp_tuple_element_2 == NULL )
                {
                    assert( ERROR_OCCURRED() );

                    FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                    exception_lineno = 1050;
                    type_description_1 = "ooooooooooo";
                    goto try_except_handler_18;
                }
                tmp_iter_arg_9 = PyTuple_New( 2 );
                PyTuple_SET_ITEM( tmp_iter_arg_9, 0, tmp_tuple_element_2 );
                tmp_mvar_value_22 = GET_STRING_DICT_VALUE( moduledict_subprocess, (Nuitka_StringObject *)const_str_plain_Handle );

                if (unlikely( tmp_mvar_value_22 == NULL ))
                {
                    tmp_mvar_value_22 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_Handle );
                }

                if ( tmp_mvar_value_22 == NULL )
                {
                    Py_DECREF( tmp_iter_arg_9 );
                    exception_type = PyExc_NameError;
                    Py_INCREF( exception_type );
                    exception_value = PyUnicode_FromFormat( "name '%s' is not defined", "Handle" );
                    exception_tb = NULL;
                    NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
                    CHAIN_EXCEPTION( exception_value );

                    exception_lineno = 1050;
                    type_description_1 = "ooooooooooo";
                    goto try_except_handler_18;
                }

                tmp_called_name_11 = tmp_mvar_value_22;
                CHECK_OBJECT( var_c2pwrite );
                tmp_args_element_name_14 = var_c2pwrite;
                frame_1ccac2e96ff9427e4b97325ca6a6800b->m_frame.f_lineno = 1050;
                {
                    PyObject *call_args[] = { tmp_args_element_name_14 };
                    tmp_tuple_element_2 = CALL_FUNCTION_WITH_ARGS1( tmp_called_name_11, call_args );
                }

                if ( tmp_tuple_element_2 == NULL )
                {
                    assert( ERROR_OCCURRED() );

                    FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
                    Py_DECREF( tmp_iter_arg_9 );

                    exception_lineno = 1050;
                    type_description_1 = "ooooooooooo";
                    goto try_except_handler_18;
                }
                PyTuple_SET_ITEM( tmp_iter_arg_9, 1, tmp_tuple_element_2 );
                tmp_assign_source_49 = MAKE_UNPACK_ITERATOR( tmp_iter_arg_9 );
                Py_DECREF( tmp_iter_arg_9 );
                if ( tmp_assign_source_49 == NULL )
                {
                    assert( ERROR_OCCURRED() );

                    FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                    exception_lineno = 1050;
                    type_description_1 = "ooooooooooo";
                    goto try_except_handler_18;
                }
                assert( tmp_tuple_unpack_9__source_iter == NULL );
                tmp_tuple_unpack_9__source_iter = tmp_assign_source_49;
            }
            // Tried code:
            {
                PyObject *tmp_assign_source_50;
                PyObject *tmp_unpack_17;
                CHECK_OBJECT( tmp_tuple_unpack_9__source_iter );
                tmp_unpack_17 = tmp_tuple_unpack_9__source_iter;
                tmp_assign_source_50 = UNPACK_NEXT( tmp_unpack_17, 0, 2 );
                if ( tmp_assign_source_50 == NULL )
                {
                    if ( !ERROR_OCCURRED() )
                    {
                        exception_type = PyExc_StopIteration;
                        Py_INCREF( exception_type );
                        exception_value = NULL;
                        exception_tb = NULL;
                    }
                    else
                    {
                        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
                    }


                    type_description_1 = "ooooooooooo";
                    exception_lineno = 1050;
                    goto try_except_handler_19;
                }
                assert( tmp_tuple_unpack_9__element_1 == NULL );
                tmp_tuple_unpack_9__element_1 = tmp_assign_source_50;
            }
            {
                PyObject *tmp_assign_source_51;
                PyObject *tmp_unpack_18;
                CHECK_OBJECT( tmp_tuple_unpack_9__source_iter );
                tmp_unpack_18 = tmp_tuple_unpack_9__source_iter;
                tmp_assign_source_51 = UNPACK_NEXT( tmp_unpack_18, 1, 2 );
                if ( tmp_assign_source_51 == NULL )
                {
                    if ( !ERROR_OCCURRED() )
                    {
                        exception_type = PyExc_StopIteration;
                        Py_INCREF( exception_type );
                        exception_value = NULL;
                        exception_tb = NULL;
                    }
                    else
                    {
                        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
                    }


                    type_description_1 = "ooooooooooo";
                    exception_lineno = 1050;
                    goto try_except_handler_19;
                }
                assert( tmp_tuple_unpack_9__element_2 == NULL );
                tmp_tuple_unpack_9__element_2 = tmp_assign_source_51;
            }
            goto try_end_17;
            // Exception handler code:
            try_except_handler_19:;
            exception_keeper_type_17 = exception_type;
            exception_keeper_value_17 = exception_value;
            exception_keeper_tb_17 = exception_tb;
            exception_keeper_lineno_17 = exception_lineno;
            exception_type = NULL;
            exception_value = NULL;
            exception_tb = NULL;
            exception_lineno = 0;

            CHECK_OBJECT( (PyObject *)tmp_tuple_unpack_9__source_iter );
            Py_DECREF( tmp_tuple_unpack_9__source_iter );
            tmp_tuple_unpack_9__source_iter = NULL;

            // Re-raise.
            exception_type = exception_keeper_type_17;
            exception_value = exception_keeper_value_17;
            exception_tb = exception_keeper_tb_17;
            exception_lineno = exception_keeper_lineno_17;

            goto try_except_handler_18;
            // End of try:
            try_end_17:;
            goto try_end_18;
            // Exception handler code:
            try_except_handler_18:;
            exception_keeper_type_18 = exception_type;
            exception_keeper_value_18 = exception_value;
            exception_keeper_tb_18 = exception_tb;
            exception_keeper_lineno_18 = exception_lineno;
            exception_type = NULL;
            exception_value = NULL;
            exception_tb = NULL;
            exception_lineno = 0;

            Py_XDECREF( tmp_tuple_unpack_9__element_1 );
            tmp_tuple_unpack_9__element_1 = NULL;

            // Re-raise.
            exception_type = exception_keeper_type_18;
            exception_value = exception_keeper_value_18;
            exception_tb = exception_keeper_tb_18;
            exception_lineno = exception_keeper_lineno_18;

            goto frame_exception_exit_1;
            // End of try:
            try_end_18:;
            CHECK_OBJECT( (PyObject *)tmp_tuple_unpack_9__source_iter );
            Py_DECREF( tmp_tuple_unpack_9__source_iter );
            tmp_tuple_unpack_9__source_iter = NULL;

            {
                PyObject *tmp_assign_source_52;
                CHECK_OBJECT( tmp_tuple_unpack_9__element_1 );
                tmp_assign_source_52 = tmp_tuple_unpack_9__element_1;
                {
                    PyObject *old = var_c2pread;
                    assert( old != NULL );
                    var_c2pread = tmp_assign_source_52;
                    Py_INCREF( var_c2pread );
                    Py_DECREF( old );
                }

            }
            Py_XDECREF( tmp_tuple_unpack_9__element_1 );
            tmp_tuple_unpack_9__element_1 = NULL;

            {
                PyObject *tmp_assign_source_53;
                CHECK_OBJECT( tmp_tuple_unpack_9__element_2 );
                tmp_assign_source_53 = tmp_tuple_unpack_9__element_2;
                {
                    PyObject *old = var_c2pwrite;
                    assert( old != NULL );
                    var_c2pwrite = tmp_assign_source_53;
                    Py_INCREF( var_c2pwrite );
                    Py_DECREF( old );
                }

            }
            Py_XDECREF( tmp_tuple_unpack_9__element_2 );
            tmp_tuple_unpack_9__element_2 = NULL;

            goto branch_end_9;
            branch_no_9:;
            {
                nuitka_bool tmp_condition_result_10;
                PyObject *tmp_compexpr_left_11;
                PyObject *tmp_compexpr_right_11;
                PyObject *tmp_mvar_value_23;
                CHECK_OBJECT( par_stdout );
                tmp_compexpr_left_11 = par_stdout;
                tmp_mvar_value_23 = GET_STRING_DICT_VALUE( moduledict_subprocess, (Nuitka_StringObject *)const_str_plain_DEVNULL );

                if (unlikely( tmp_mvar_value_23 == NULL ))
                {
                    tmp_mvar_value_23 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_DEVNULL );
                }

                if ( tmp_mvar_value_23 == NULL )
                {

                    exception_type = PyExc_NameError;
                    Py_INCREF( exception_type );
                    exception_value = PyUnicode_FromFormat( "name '%s' is not defined", "DEVNULL" );
                    exception_tb = NULL;
                    NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
                    CHAIN_EXCEPTION( exception_value );

                    exception_lineno = 1051;
                    type_description_1 = "ooooooooooo";
                    goto frame_exception_exit_1;
                }

                tmp_compexpr_right_11 = tmp_mvar_value_23;
                tmp_res = RICH_COMPARE_BOOL_EQ_OBJECT_OBJECT( tmp_compexpr_left_11, tmp_compexpr_right_11 );
                if ( tmp_res == -1 )
                {
                    assert( ERROR_OCCURRED() );

                    FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                    exception_lineno = 1051;
                    type_description_1 = "ooooooooooo";
                    goto frame_exception_exit_1;
                }
                tmp_condition_result_10 = ( tmp_res != 0 ) ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
                if ( tmp_condition_result_10 == NUITKA_BOOL_TRUE )
                {
                    goto branch_yes_10;
                }
                else
                {
                    goto branch_no_10;
                }
                branch_yes_10:;
                {
                    PyObject *tmp_assign_source_54;
                    PyObject *tmp_called_name_12;
                    PyObject *tmp_source_name_8;
                    PyObject *tmp_mvar_value_24;
                    PyObject *tmp_args_element_name_15;
                    PyObject *tmp_called_instance_10;
                    tmp_mvar_value_24 = GET_STRING_DICT_VALUE( moduledict_subprocess, (Nuitka_StringObject *)const_str_plain_msvcrt );

                    if (unlikely( tmp_mvar_value_24 == NULL ))
                    {
                        tmp_mvar_value_24 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_msvcrt );
                    }

                    if ( tmp_mvar_value_24 == NULL )
                    {

                        exception_type = PyExc_NameError;
                        Py_INCREF( exception_type );
                        exception_value = PyUnicode_FromFormat( "name '%s' is not defined", "msvcrt" );
                        exception_tb = NULL;
                        NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
                        CHAIN_EXCEPTION( exception_value );

                        exception_lineno = 1052;
                        type_description_1 = "ooooooooooo";
                        goto frame_exception_exit_1;
                    }

                    tmp_source_name_8 = tmp_mvar_value_24;
                    tmp_called_name_12 = LOOKUP_ATTRIBUTE( tmp_source_name_8, const_str_plain_get_osfhandle );
                    if ( tmp_called_name_12 == NULL )
                    {
                        assert( ERROR_OCCURRED() );

                        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                        exception_lineno = 1052;
                        type_description_1 = "ooooooooooo";
                        goto frame_exception_exit_1;
                    }
                    CHECK_OBJECT( par_self );
                    tmp_called_instance_10 = par_self;
                    frame_1ccac2e96ff9427e4b97325ca6a6800b->m_frame.f_lineno = 1052;
                    tmp_args_element_name_15 = CALL_METHOD_NO_ARGS( tmp_called_instance_10, const_str_plain__get_devnull );
                    if ( tmp_args_element_name_15 == NULL )
                    {
                        assert( ERROR_OCCURRED() );

                        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
                        Py_DECREF( tmp_called_name_12 );

                        exception_lineno = 1052;
                        type_description_1 = "ooooooooooo";
                        goto frame_exception_exit_1;
                    }
                    frame_1ccac2e96ff9427e4b97325ca6a6800b->m_frame.f_lineno = 1052;
                    {
                        PyObject *call_args[] = { tmp_args_element_name_15 };
                        tmp_assign_source_54 = CALL_FUNCTION_WITH_ARGS1( tmp_called_name_12, call_args );
                    }

                    Py_DECREF( tmp_called_name_12 );
                    Py_DECREF( tmp_args_element_name_15 );
                    if ( tmp_assign_source_54 == NULL )
                    {
                        assert( ERROR_OCCURRED() );

                        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                        exception_lineno = 1052;
                        type_description_1 = "ooooooooooo";
                        goto frame_exception_exit_1;
                    }
                    {
                        PyObject *old = var_c2pwrite;
                        assert( old != NULL );
                        var_c2pwrite = tmp_assign_source_54;
                        Py_DECREF( old );
                    }

                }
                goto branch_end_10;
                branch_no_10:;
                {
                    nuitka_bool tmp_condition_result_11;
                    PyObject *tmp_isinstance_inst_2;
                    PyObject *tmp_isinstance_cls_2;
                    CHECK_OBJECT( par_stdout );
                    tmp_isinstance_inst_2 = par_stdout;
                    tmp_isinstance_cls_2 = (PyObject *)&PyLong_Type;
                    tmp_res = Nuitka_IsInstance( tmp_isinstance_inst_2, tmp_isinstance_cls_2 );
                    if ( tmp_res == -1 )
                    {
                        assert( ERROR_OCCURRED() );

                        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                        exception_lineno = 1053;
                        type_description_1 = "ooooooooooo";
                        goto frame_exception_exit_1;
                    }
                    tmp_condition_result_11 = ( tmp_res != 0 ) ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
                    if ( tmp_condition_result_11 == NUITKA_BOOL_TRUE )
                    {
                        goto branch_yes_11;
                    }
                    else
                    {
                        goto branch_no_11;
                    }
                    branch_yes_11:;
                    {
                        PyObject *tmp_assign_source_55;
                        PyObject *tmp_called_instance_11;
                        PyObject *tmp_mvar_value_25;
                        PyObject *tmp_args_element_name_16;
                        tmp_mvar_value_25 = GET_STRING_DICT_VALUE( moduledict_subprocess, (Nuitka_StringObject *)const_str_plain_msvcrt );

                        if (unlikely( tmp_mvar_value_25 == NULL ))
                        {
                            tmp_mvar_value_25 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_msvcrt );
                        }

                        if ( tmp_mvar_value_25 == NULL )
                        {

                            exception_type = PyExc_NameError;
                            Py_INCREF( exception_type );
                            exception_value = PyUnicode_FromFormat( "name '%s' is not defined", "msvcrt" );
                            exception_tb = NULL;
                            NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
                            CHAIN_EXCEPTION( exception_value );

                            exception_lineno = 1054;
                            type_description_1 = "ooooooooooo";
                            goto frame_exception_exit_1;
                        }

                        tmp_called_instance_11 = tmp_mvar_value_25;
                        CHECK_OBJECT( par_stdout );
                        tmp_args_element_name_16 = par_stdout;
                        frame_1ccac2e96ff9427e4b97325ca6a6800b->m_frame.f_lineno = 1054;
                        {
                            PyObject *call_args[] = { tmp_args_element_name_16 };
                            tmp_assign_source_55 = CALL_METHOD_WITH_ARGS1( tmp_called_instance_11, const_str_plain_get_osfhandle, call_args );
                        }

                        if ( tmp_assign_source_55 == NULL )
                        {
                            assert( ERROR_OCCURRED() );

                            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                            exception_lineno = 1054;
                            type_description_1 = "ooooooooooo";
                            goto frame_exception_exit_1;
                        }
                        {
                            PyObject *old = var_c2pwrite;
                            assert( old != NULL );
                            var_c2pwrite = tmp_assign_source_55;
                            Py_DECREF( old );
                        }

                    }
                    goto branch_end_11;
                    branch_no_11:;
                    {
                        PyObject *tmp_assign_source_56;
                        PyObject *tmp_called_name_13;
                        PyObject *tmp_source_name_9;
                        PyObject *tmp_mvar_value_26;
                        PyObject *tmp_args_element_name_17;
                        PyObject *tmp_called_instance_12;
                        tmp_mvar_value_26 = GET_STRING_DICT_VALUE( moduledict_subprocess, (Nuitka_StringObject *)const_str_plain_msvcrt );

                        if (unlikely( tmp_mvar_value_26 == NULL ))
                        {
                            tmp_mvar_value_26 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_msvcrt );
                        }

                        if ( tmp_mvar_value_26 == NULL )
                        {

                            exception_type = PyExc_NameError;
                            Py_INCREF( exception_type );
                            exception_value = PyUnicode_FromFormat( "name '%s' is not defined", "msvcrt" );
                            exception_tb = NULL;
                            NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
                            CHAIN_EXCEPTION( exception_value );

                            exception_lineno = 1057;
                            type_description_1 = "ooooooooooo";
                            goto frame_exception_exit_1;
                        }

                        tmp_source_name_9 = tmp_mvar_value_26;
                        tmp_called_name_13 = LOOKUP_ATTRIBUTE( tmp_source_name_9, const_str_plain_get_osfhandle );
                        if ( tmp_called_name_13 == NULL )
                        {
                            assert( ERROR_OCCURRED() );

                            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                            exception_lineno = 1057;
                            type_description_1 = "ooooooooooo";
                            goto frame_exception_exit_1;
                        }
                        CHECK_OBJECT( par_stdout );
                        tmp_called_instance_12 = par_stdout;
                        frame_1ccac2e96ff9427e4b97325ca6a6800b->m_frame.f_lineno = 1057;
                        tmp_args_element_name_17 = CALL_METHOD_NO_ARGS( tmp_called_instance_12, const_str_plain_fileno );
                        if ( tmp_args_element_name_17 == NULL )
                        {
                            assert( ERROR_OCCURRED() );

                            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
                            Py_DECREF( tmp_called_name_13 );

                            exception_lineno = 1057;
                            type_description_1 = "ooooooooooo";
                            goto frame_exception_exit_1;
                        }
                        frame_1ccac2e96ff9427e4b97325ca6a6800b->m_frame.f_lineno = 1057;
                        {
                            PyObject *call_args[] = { tmp_args_element_name_17 };
                            tmp_assign_source_56 = CALL_FUNCTION_WITH_ARGS1( tmp_called_name_13, call_args );
                        }

                        Py_DECREF( tmp_called_name_13 );
                        Py_DECREF( tmp_args_element_name_17 );
                        if ( tmp_assign_source_56 == NULL )
                        {
                            assert( ERROR_OCCURRED() );

                            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                            exception_lineno = 1057;
                            type_description_1 = "ooooooooooo";
                            goto frame_exception_exit_1;
                        }
                        {
                            PyObject *old = var_c2pwrite;
                            assert( old != NULL );
                            var_c2pwrite = tmp_assign_source_56;
                            Py_DECREF( old );
                        }

                    }
                    branch_end_11:;
                }
                branch_end_10:;
            }
            branch_end_9:;
        }
        branch_end_7:;
    }
    {
        PyObject *tmp_assign_source_57;
        PyObject *tmp_called_name_14;
        PyObject *tmp_source_name_10;
        PyObject *tmp_args_element_name_18;
        CHECK_OBJECT( par_self );
        tmp_source_name_10 = par_self;
        tmp_called_name_14 = LOOKUP_ATTRIBUTE( tmp_source_name_10, const_str_plain__make_inheritable );
        if ( tmp_called_name_14 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 1058;
            type_description_1 = "ooooooooooo";
            goto frame_exception_exit_1;
        }
        if ( var_c2pwrite == NULL )
        {
            Py_DECREF( tmp_called_name_14 );
            exception_type = PyExc_UnboundLocalError;
            Py_INCREF( exception_type );
            exception_value = PyUnicode_FromFormat( "local variable '%s' referenced before assignment", "c2pwrite" );
            exception_tb = NULL;
            NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
            CHAIN_EXCEPTION( exception_value );

            exception_lineno = 1058;
            type_description_1 = "ooooooooooo";
            goto frame_exception_exit_1;
        }

        tmp_args_element_name_18 = var_c2pwrite;
        frame_1ccac2e96ff9427e4b97325ca6a6800b->m_frame.f_lineno = 1058;
        {
            PyObject *call_args[] = { tmp_args_element_name_18 };
            tmp_assign_source_57 = CALL_FUNCTION_WITH_ARGS1( tmp_called_name_14, call_args );
        }

        Py_DECREF( tmp_called_name_14 );
        if ( tmp_assign_source_57 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 1058;
            type_description_1 = "ooooooooooo";
            goto frame_exception_exit_1;
        }
        {
            PyObject *old = var_c2pwrite;
            var_c2pwrite = tmp_assign_source_57;
            Py_XDECREF( old );
        }

    }
    {
        nuitka_bool tmp_condition_result_12;
        PyObject *tmp_compexpr_left_12;
        PyObject *tmp_compexpr_right_12;
        CHECK_OBJECT( par_stderr );
        tmp_compexpr_left_12 = par_stderr;
        tmp_compexpr_right_12 = Py_None;
        tmp_condition_result_12 = ( tmp_compexpr_left_12 == tmp_compexpr_right_12 ) ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
        if ( tmp_condition_result_12 == NUITKA_BOOL_TRUE )
        {
            goto branch_yes_12;
        }
        else
        {
            goto branch_no_12;
        }
        branch_yes_12:;
        {
            PyObject *tmp_assign_source_58;
            PyObject *tmp_called_name_15;
            PyObject *tmp_source_name_11;
            PyObject *tmp_mvar_value_27;
            PyObject *tmp_args_element_name_19;
            PyObject *tmp_source_name_12;
            PyObject *tmp_mvar_value_28;
            tmp_mvar_value_27 = GET_STRING_DICT_VALUE( moduledict_subprocess, (Nuitka_StringObject *)const_str_plain__winapi );

            if (unlikely( tmp_mvar_value_27 == NULL ))
            {
                tmp_mvar_value_27 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain__winapi );
            }

            if ( tmp_mvar_value_27 == NULL )
            {

                exception_type = PyExc_NameError;
                Py_INCREF( exception_type );
                exception_value = PyUnicode_FromFormat( "name '%s' is not defined", "_winapi" );
                exception_tb = NULL;
                NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
                CHAIN_EXCEPTION( exception_value );

                exception_lineno = 1061;
                type_description_1 = "ooooooooooo";
                goto frame_exception_exit_1;
            }

            tmp_source_name_11 = tmp_mvar_value_27;
            tmp_called_name_15 = LOOKUP_ATTRIBUTE( tmp_source_name_11, const_str_plain_GetStdHandle );
            if ( tmp_called_name_15 == NULL )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 1061;
                type_description_1 = "ooooooooooo";
                goto frame_exception_exit_1;
            }
            tmp_mvar_value_28 = GET_STRING_DICT_VALUE( moduledict_subprocess, (Nuitka_StringObject *)const_str_plain__winapi );

            if (unlikely( tmp_mvar_value_28 == NULL ))
            {
                tmp_mvar_value_28 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain__winapi );
            }

            if ( tmp_mvar_value_28 == NULL )
            {
                Py_DECREF( tmp_called_name_15 );
                exception_type = PyExc_NameError;
                Py_INCREF( exception_type );
                exception_value = PyUnicode_FromFormat( "name '%s' is not defined", "_winapi" );
                exception_tb = NULL;
                NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
                CHAIN_EXCEPTION( exception_value );

                exception_lineno = 1061;
                type_description_1 = "ooooooooooo";
                goto frame_exception_exit_1;
            }

            tmp_source_name_12 = tmp_mvar_value_28;
            tmp_args_element_name_19 = LOOKUP_ATTRIBUTE( tmp_source_name_12, const_str_plain_STD_ERROR_HANDLE );
            if ( tmp_args_element_name_19 == NULL )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
                Py_DECREF( tmp_called_name_15 );

                exception_lineno = 1061;
                type_description_1 = "ooooooooooo";
                goto frame_exception_exit_1;
            }
            frame_1ccac2e96ff9427e4b97325ca6a6800b->m_frame.f_lineno = 1061;
            {
                PyObject *call_args[] = { tmp_args_element_name_19 };
                tmp_assign_source_58 = CALL_FUNCTION_WITH_ARGS1( tmp_called_name_15, call_args );
            }

            Py_DECREF( tmp_called_name_15 );
            Py_DECREF( tmp_args_element_name_19 );
            if ( tmp_assign_source_58 == NULL )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 1061;
                type_description_1 = "ooooooooooo";
                goto frame_exception_exit_1;
            }
            {
                PyObject *old = var_errwrite;
                assert( old != NULL );
                var_errwrite = tmp_assign_source_58;
                Py_DECREF( old );
            }

        }
        {
            nuitka_bool tmp_condition_result_13;
            PyObject *tmp_compexpr_left_13;
            PyObject *tmp_compexpr_right_13;
            CHECK_OBJECT( var_errwrite );
            tmp_compexpr_left_13 = var_errwrite;
            tmp_compexpr_right_13 = Py_None;
            tmp_condition_result_13 = ( tmp_compexpr_left_13 == tmp_compexpr_right_13 ) ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
            if ( tmp_condition_result_13 == NUITKA_BOOL_TRUE )
            {
                goto branch_yes_13;
            }
            else
            {
                goto branch_no_13;
            }
            branch_yes_13:;
            // Tried code:
            {
                PyObject *tmp_assign_source_59;
                PyObject *tmp_iter_arg_10;
                PyObject *tmp_called_instance_13;
                PyObject *tmp_mvar_value_29;
                tmp_mvar_value_29 = GET_STRING_DICT_VALUE( moduledict_subprocess, (Nuitka_StringObject *)const_str_plain__winapi );

                if (unlikely( tmp_mvar_value_29 == NULL ))
                {
                    tmp_mvar_value_29 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain__winapi );
                }

                if ( tmp_mvar_value_29 == NULL )
                {

                    exception_type = PyExc_NameError;
                    Py_INCREF( exception_type );
                    exception_value = PyUnicode_FromFormat( "name '%s' is not defined", "_winapi" );
                    exception_tb = NULL;
                    NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
                    CHAIN_EXCEPTION( exception_value );

                    exception_lineno = 1063;
                    type_description_1 = "ooooooooooo";
                    goto try_except_handler_20;
                }

                tmp_called_instance_13 = tmp_mvar_value_29;
                frame_1ccac2e96ff9427e4b97325ca6a6800b->m_frame.f_lineno = 1063;
                tmp_iter_arg_10 = CALL_METHOD_WITH_ARGS2( tmp_called_instance_13, const_str_plain_CreatePipe, &PyTuple_GET_ITEM( const_tuple_none_int_0_tuple, 0 ) );

                if ( tmp_iter_arg_10 == NULL )
                {
                    assert( ERROR_OCCURRED() );

                    FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                    exception_lineno = 1063;
                    type_description_1 = "ooooooooooo";
                    goto try_except_handler_20;
                }
                tmp_assign_source_59 = MAKE_UNPACK_ITERATOR( tmp_iter_arg_10 );
                Py_DECREF( tmp_iter_arg_10 );
                if ( tmp_assign_source_59 == NULL )
                {
                    assert( ERROR_OCCURRED() );

                    FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                    exception_lineno = 1063;
                    type_description_1 = "ooooooooooo";
                    goto try_except_handler_20;
                }
                assert( tmp_tuple_unpack_10__source_iter == NULL );
                tmp_tuple_unpack_10__source_iter = tmp_assign_source_59;
            }
            // Tried code:
            {
                PyObject *tmp_assign_source_60;
                PyObject *tmp_unpack_19;
                CHECK_OBJECT( tmp_tuple_unpack_10__source_iter );
                tmp_unpack_19 = tmp_tuple_unpack_10__source_iter;
                tmp_assign_source_60 = UNPACK_NEXT( tmp_unpack_19, 0, 2 );
                if ( tmp_assign_source_60 == NULL )
                {
                    if ( !ERROR_OCCURRED() )
                    {
                        exception_type = PyExc_StopIteration;
                        Py_INCREF( exception_type );
                        exception_value = NULL;
                        exception_tb = NULL;
                    }
                    else
                    {
                        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
                    }


                    type_description_1 = "ooooooooooo";
                    exception_lineno = 1063;
                    goto try_except_handler_21;
                }
                assert( tmp_tuple_unpack_10__element_1 == NULL );
                tmp_tuple_unpack_10__element_1 = tmp_assign_source_60;
            }
            {
                PyObject *tmp_assign_source_61;
                PyObject *tmp_unpack_20;
                CHECK_OBJECT( tmp_tuple_unpack_10__source_iter );
                tmp_unpack_20 = tmp_tuple_unpack_10__source_iter;
                tmp_assign_source_61 = UNPACK_NEXT( tmp_unpack_20, 1, 2 );
                if ( tmp_assign_source_61 == NULL )
                {
                    if ( !ERROR_OCCURRED() )
                    {
                        exception_type = PyExc_StopIteration;
                        Py_INCREF( exception_type );
                        exception_value = NULL;
                        exception_tb = NULL;
                    }
                    else
                    {
                        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
                    }


                    type_description_1 = "ooooooooooo";
                    exception_lineno = 1063;
                    goto try_except_handler_21;
                }
                assert( tmp_tuple_unpack_10__element_2 == NULL );
                tmp_tuple_unpack_10__element_2 = tmp_assign_source_61;
            }
            {
                PyObject *tmp_iterator_name_5;
                CHECK_OBJECT( tmp_tuple_unpack_10__source_iter );
                tmp_iterator_name_5 = tmp_tuple_unpack_10__source_iter;
                // Check if iterator has left-over elements.
                CHECK_OBJECT( tmp_iterator_name_5 ); assert( HAS_ITERNEXT( tmp_iterator_name_5 ) );

                tmp_iterator_attempt = (*Py_TYPE( tmp_iterator_name_5 )->tp_iternext)( tmp_iterator_name_5 );

                if (likely( tmp_iterator_attempt == NULL ))
                {
                    PyObject *error = GET_ERROR_OCCURRED();

                    if ( error != NULL )
                    {
                        if ( EXCEPTION_MATCH_BOOL_SINGLE( error, PyExc_StopIteration ))
                        {
                            CLEAR_ERROR_OCCURRED();
                        }
                        else
                        {
                            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );

                            type_description_1 = "ooooooooooo";
                            exception_lineno = 1063;
                            goto try_except_handler_21;
                        }
                    }
                }
                else
                {
                    Py_DECREF( tmp_iterator_attempt );

                    // TODO: Could avoid PyErr_Format.
#if PYTHON_VERSION < 300
                    PyErr_Format( PyExc_ValueError, "too many values to unpack" );
#else
                    PyErr_Format( PyExc_ValueError, "too many values to unpack (expected 2)" );
#endif
                    FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );

                    type_description_1 = "ooooooooooo";
                    exception_lineno = 1063;
                    goto try_except_handler_21;
                }
            }
            goto try_end_19;
            // Exception handler code:
            try_except_handler_21:;
            exception_keeper_type_19 = exception_type;
            exception_keeper_value_19 = exception_value;
            exception_keeper_tb_19 = exception_tb;
            exception_keeper_lineno_19 = exception_lineno;
            exception_type = NULL;
            exception_value = NULL;
            exception_tb = NULL;
            exception_lineno = 0;

            CHECK_OBJECT( (PyObject *)tmp_tuple_unpack_10__source_iter );
            Py_DECREF( tmp_tuple_unpack_10__source_iter );
            tmp_tuple_unpack_10__source_iter = NULL;

            // Re-raise.
            exception_type = exception_keeper_type_19;
            exception_value = exception_keeper_value_19;
            exception_tb = exception_keeper_tb_19;
            exception_lineno = exception_keeper_lineno_19;

            goto try_except_handler_20;
            // End of try:
            try_end_19:;
            goto try_end_20;
            // Exception handler code:
            try_except_handler_20:;
            exception_keeper_type_20 = exception_type;
            exception_keeper_value_20 = exception_value;
            exception_keeper_tb_20 = exception_tb;
            exception_keeper_lineno_20 = exception_lineno;
            exception_type = NULL;
            exception_value = NULL;
            exception_tb = NULL;
            exception_lineno = 0;

            Py_XDECREF( tmp_tuple_unpack_10__element_1 );
            tmp_tuple_unpack_10__element_1 = NULL;

            Py_XDECREF( tmp_tuple_unpack_10__element_2 );
            tmp_tuple_unpack_10__element_2 = NULL;

            // Re-raise.
            exception_type = exception_keeper_type_20;
            exception_value = exception_keeper_value_20;
            exception_tb = exception_keeper_tb_20;
            exception_lineno = exception_keeper_lineno_20;

            goto frame_exception_exit_1;
            // End of try:
            try_end_20:;
            CHECK_OBJECT( (PyObject *)tmp_tuple_unpack_10__source_iter );
            Py_DECREF( tmp_tuple_unpack_10__source_iter );
            tmp_tuple_unpack_10__source_iter = NULL;

            {
                PyObject *tmp_assign_source_62;
                CHECK_OBJECT( tmp_tuple_unpack_10__element_1 );
                tmp_assign_source_62 = tmp_tuple_unpack_10__element_1;
                {
                    PyObject *old = var__;
                    var__ = tmp_assign_source_62;
                    Py_INCREF( var__ );
                    Py_XDECREF( old );
                }

            }
            Py_XDECREF( tmp_tuple_unpack_10__element_1 );
            tmp_tuple_unpack_10__element_1 = NULL;

            {
                PyObject *tmp_assign_source_63;
                CHECK_OBJECT( tmp_tuple_unpack_10__element_2 );
                tmp_assign_source_63 = tmp_tuple_unpack_10__element_2;
                {
                    PyObject *old = var_errwrite;
                    assert( old != NULL );
                    var_errwrite = tmp_assign_source_63;
                    Py_INCREF( var_errwrite );
                    Py_DECREF( old );
                }

            }
            Py_XDECREF( tmp_tuple_unpack_10__element_2 );
            tmp_tuple_unpack_10__element_2 = NULL;

            {
                PyObject *tmp_assign_source_64;
                PyObject *tmp_called_name_16;
                PyObject *tmp_mvar_value_30;
                PyObject *tmp_args_element_name_20;
                tmp_mvar_value_30 = GET_STRING_DICT_VALUE( moduledict_subprocess, (Nuitka_StringObject *)const_str_plain_Handle );

                if (unlikely( tmp_mvar_value_30 == NULL ))
                {
                    tmp_mvar_value_30 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_Handle );
                }

                if ( tmp_mvar_value_30 == NULL )
                {

                    exception_type = PyExc_NameError;
                    Py_INCREF( exception_type );
                    exception_value = PyUnicode_FromFormat( "name '%s' is not defined", "Handle" );
                    exception_tb = NULL;
                    NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
                    CHAIN_EXCEPTION( exception_value );

                    exception_lineno = 1064;
                    type_description_1 = "ooooooooooo";
                    goto frame_exception_exit_1;
                }

                tmp_called_name_16 = tmp_mvar_value_30;
                CHECK_OBJECT( var_errwrite );
                tmp_args_element_name_20 = var_errwrite;
                frame_1ccac2e96ff9427e4b97325ca6a6800b->m_frame.f_lineno = 1064;
                {
                    PyObject *call_args[] = { tmp_args_element_name_20 };
                    tmp_assign_source_64 = CALL_FUNCTION_WITH_ARGS1( tmp_called_name_16, call_args );
                }

                if ( tmp_assign_source_64 == NULL )
                {
                    assert( ERROR_OCCURRED() );

                    FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                    exception_lineno = 1064;
                    type_description_1 = "ooooooooooo";
                    goto frame_exception_exit_1;
                }
                {
                    PyObject *old = var_errwrite;
                    assert( old != NULL );
                    var_errwrite = tmp_assign_source_64;
                    Py_DECREF( old );
                }

            }
            {
                PyObject *tmp_called_instance_14;
                PyObject *tmp_mvar_value_31;
                PyObject *tmp_call_result_3;
                PyObject *tmp_args_element_name_21;
                tmp_mvar_value_31 = GET_STRING_DICT_VALUE( moduledict_subprocess, (Nuitka_StringObject *)const_str_plain__winapi );

                if (unlikely( tmp_mvar_value_31 == NULL ))
                {
                    tmp_mvar_value_31 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain__winapi );
                }

                if ( tmp_mvar_value_31 == NULL )
                {

                    exception_type = PyExc_NameError;
                    Py_INCREF( exception_type );
                    exception_value = PyUnicode_FromFormat( "name '%s' is not defined", "_winapi" );
                    exception_tb = NULL;
                    NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
                    CHAIN_EXCEPTION( exception_value );

                    exception_lineno = 1065;
                    type_description_1 = "ooooooooooo";
                    goto frame_exception_exit_1;
                }

                tmp_called_instance_14 = tmp_mvar_value_31;
                CHECK_OBJECT( var__ );
                tmp_args_element_name_21 = var__;
                frame_1ccac2e96ff9427e4b97325ca6a6800b->m_frame.f_lineno = 1065;
                {
                    PyObject *call_args[] = { tmp_args_element_name_21 };
                    tmp_call_result_3 = CALL_METHOD_WITH_ARGS1( tmp_called_instance_14, const_str_plain_CloseHandle, call_args );
                }

                if ( tmp_call_result_3 == NULL )
                {
                    assert( ERROR_OCCURRED() );

                    FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                    exception_lineno = 1065;
                    type_description_1 = "ooooooooooo";
                    goto frame_exception_exit_1;
                }
                Py_DECREF( tmp_call_result_3 );
            }
            branch_no_13:;
        }
        goto branch_end_12;
        branch_no_12:;
        {
            nuitka_bool tmp_condition_result_14;
            PyObject *tmp_compexpr_left_14;
            PyObject *tmp_compexpr_right_14;
            PyObject *tmp_mvar_value_32;
            CHECK_OBJECT( par_stderr );
            tmp_compexpr_left_14 = par_stderr;
            tmp_mvar_value_32 = GET_STRING_DICT_VALUE( moduledict_subprocess, (Nuitka_StringObject *)const_str_plain_PIPE );

            if (unlikely( tmp_mvar_value_32 == NULL ))
            {
                tmp_mvar_value_32 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_PIPE );
            }

            if ( tmp_mvar_value_32 == NULL )
            {

                exception_type = PyExc_NameError;
                Py_INCREF( exception_type );
                exception_value = PyUnicode_FromFormat( "name '%s' is not defined", "PIPE" );
                exception_tb = NULL;
                NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
                CHAIN_EXCEPTION( exception_value );

                exception_lineno = 1066;
                type_description_1 = "ooooooooooo";
                goto frame_exception_exit_1;
            }

            tmp_compexpr_right_14 = tmp_mvar_value_32;
            tmp_res = RICH_COMPARE_BOOL_EQ_OBJECT_OBJECT( tmp_compexpr_left_14, tmp_compexpr_right_14 );
            if ( tmp_res == -1 )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 1066;
                type_description_1 = "ooooooooooo";
                goto frame_exception_exit_1;
            }
            tmp_condition_result_14 = ( tmp_res != 0 ) ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
            if ( tmp_condition_result_14 == NUITKA_BOOL_TRUE )
            {
                goto branch_yes_14;
            }
            else
            {
                goto branch_no_14;
            }
            branch_yes_14:;
            // Tried code:
            {
                PyObject *tmp_assign_source_65;
                PyObject *tmp_iter_arg_11;
                PyObject *tmp_called_instance_15;
                PyObject *tmp_mvar_value_33;
                tmp_mvar_value_33 = GET_STRING_DICT_VALUE( moduledict_subprocess, (Nuitka_StringObject *)const_str_plain__winapi );

                if (unlikely( tmp_mvar_value_33 == NULL ))
                {
                    tmp_mvar_value_33 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain__winapi );
                }

                if ( tmp_mvar_value_33 == NULL )
                {

                    exception_type = PyExc_NameError;
                    Py_INCREF( exception_type );
                    exception_value = PyUnicode_FromFormat( "name '%s' is not defined", "_winapi" );
                    exception_tb = NULL;
                    NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
                    CHAIN_EXCEPTION( exception_value );

                    exception_lineno = 1067;
                    type_description_1 = "ooooooooooo";
                    goto try_except_handler_22;
                }

                tmp_called_instance_15 = tmp_mvar_value_33;
                frame_1ccac2e96ff9427e4b97325ca6a6800b->m_frame.f_lineno = 1067;
                tmp_iter_arg_11 = CALL_METHOD_WITH_ARGS2( tmp_called_instance_15, const_str_plain_CreatePipe, &PyTuple_GET_ITEM( const_tuple_none_int_0_tuple, 0 ) );

                if ( tmp_iter_arg_11 == NULL )
                {
                    assert( ERROR_OCCURRED() );

                    FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                    exception_lineno = 1067;
                    type_description_1 = "ooooooooooo";
                    goto try_except_handler_22;
                }
                tmp_assign_source_65 = MAKE_UNPACK_ITERATOR( tmp_iter_arg_11 );
                Py_DECREF( tmp_iter_arg_11 );
                if ( tmp_assign_source_65 == NULL )
                {
                    assert( ERROR_OCCURRED() );

                    FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                    exception_lineno = 1067;
                    type_description_1 = "ooooooooooo";
                    goto try_except_handler_22;
                }
                assert( tmp_tuple_unpack_11__source_iter == NULL );
                tmp_tuple_unpack_11__source_iter = tmp_assign_source_65;
            }
            // Tried code:
            {
                PyObject *tmp_assign_source_66;
                PyObject *tmp_unpack_21;
                CHECK_OBJECT( tmp_tuple_unpack_11__source_iter );
                tmp_unpack_21 = tmp_tuple_unpack_11__source_iter;
                tmp_assign_source_66 = UNPACK_NEXT( tmp_unpack_21, 0, 2 );
                if ( tmp_assign_source_66 == NULL )
                {
                    if ( !ERROR_OCCURRED() )
                    {
                        exception_type = PyExc_StopIteration;
                        Py_INCREF( exception_type );
                        exception_value = NULL;
                        exception_tb = NULL;
                    }
                    else
                    {
                        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
                    }


                    type_description_1 = "ooooooooooo";
                    exception_lineno = 1067;
                    goto try_except_handler_23;
                }
                assert( tmp_tuple_unpack_11__element_1 == NULL );
                tmp_tuple_unpack_11__element_1 = tmp_assign_source_66;
            }
            {
                PyObject *tmp_assign_source_67;
                PyObject *tmp_unpack_22;
                CHECK_OBJECT( tmp_tuple_unpack_11__source_iter );
                tmp_unpack_22 = tmp_tuple_unpack_11__source_iter;
                tmp_assign_source_67 = UNPACK_NEXT( tmp_unpack_22, 1, 2 );
                if ( tmp_assign_source_67 == NULL )
                {
                    if ( !ERROR_OCCURRED() )
                    {
                        exception_type = PyExc_StopIteration;
                        Py_INCREF( exception_type );
                        exception_value = NULL;
                        exception_tb = NULL;
                    }
                    else
                    {
                        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
                    }


                    type_description_1 = "ooooooooooo";
                    exception_lineno = 1067;
                    goto try_except_handler_23;
                }
                assert( tmp_tuple_unpack_11__element_2 == NULL );
                tmp_tuple_unpack_11__element_2 = tmp_assign_source_67;
            }
            {
                PyObject *tmp_iterator_name_6;
                CHECK_OBJECT( tmp_tuple_unpack_11__source_iter );
                tmp_iterator_name_6 = tmp_tuple_unpack_11__source_iter;
                // Check if iterator has left-over elements.
                CHECK_OBJECT( tmp_iterator_name_6 ); assert( HAS_ITERNEXT( tmp_iterator_name_6 ) );

                tmp_iterator_attempt = (*Py_TYPE( tmp_iterator_name_6 )->tp_iternext)( tmp_iterator_name_6 );

                if (likely( tmp_iterator_attempt == NULL ))
                {
                    PyObject *error = GET_ERROR_OCCURRED();

                    if ( error != NULL )
                    {
                        if ( EXCEPTION_MATCH_BOOL_SINGLE( error, PyExc_StopIteration ))
                        {
                            CLEAR_ERROR_OCCURRED();
                        }
                        else
                        {
                            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );

                            type_description_1 = "ooooooooooo";
                            exception_lineno = 1067;
                            goto try_except_handler_23;
                        }
                    }
                }
                else
                {
                    Py_DECREF( tmp_iterator_attempt );

                    // TODO: Could avoid PyErr_Format.
#if PYTHON_VERSION < 300
                    PyErr_Format( PyExc_ValueError, "too many values to unpack" );
#else
                    PyErr_Format( PyExc_ValueError, "too many values to unpack (expected 2)" );
#endif
                    FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );

                    type_description_1 = "ooooooooooo";
                    exception_lineno = 1067;
                    goto try_except_handler_23;
                }
            }
            goto try_end_21;
            // Exception handler code:
            try_except_handler_23:;
            exception_keeper_type_21 = exception_type;
            exception_keeper_value_21 = exception_value;
            exception_keeper_tb_21 = exception_tb;
            exception_keeper_lineno_21 = exception_lineno;
            exception_type = NULL;
            exception_value = NULL;
            exception_tb = NULL;
            exception_lineno = 0;

            CHECK_OBJECT( (PyObject *)tmp_tuple_unpack_11__source_iter );
            Py_DECREF( tmp_tuple_unpack_11__source_iter );
            tmp_tuple_unpack_11__source_iter = NULL;

            // Re-raise.
            exception_type = exception_keeper_type_21;
            exception_value = exception_keeper_value_21;
            exception_tb = exception_keeper_tb_21;
            exception_lineno = exception_keeper_lineno_21;

            goto try_except_handler_22;
            // End of try:
            try_end_21:;
            goto try_end_22;
            // Exception handler code:
            try_except_handler_22:;
            exception_keeper_type_22 = exception_type;
            exception_keeper_value_22 = exception_value;
            exception_keeper_tb_22 = exception_tb;
            exception_keeper_lineno_22 = exception_lineno;
            exception_type = NULL;
            exception_value = NULL;
            exception_tb = NULL;
            exception_lineno = 0;

            Py_XDECREF( tmp_tuple_unpack_11__element_1 );
            tmp_tuple_unpack_11__element_1 = NULL;

            Py_XDECREF( tmp_tuple_unpack_11__element_2 );
            tmp_tuple_unpack_11__element_2 = NULL;

            // Re-raise.
            exception_type = exception_keeper_type_22;
            exception_value = exception_keeper_value_22;
            exception_tb = exception_keeper_tb_22;
            exception_lineno = exception_keeper_lineno_22;

            goto frame_exception_exit_1;
            // End of try:
            try_end_22:;
            CHECK_OBJECT( (PyObject *)tmp_tuple_unpack_11__source_iter );
            Py_DECREF( tmp_tuple_unpack_11__source_iter );
            tmp_tuple_unpack_11__source_iter = NULL;

            {
                PyObject *tmp_assign_source_68;
                CHECK_OBJECT( tmp_tuple_unpack_11__element_1 );
                tmp_assign_source_68 = tmp_tuple_unpack_11__element_1;
                {
                    PyObject *old = var_errread;
                    assert( old != NULL );
                    var_errread = tmp_assign_source_68;
                    Py_INCREF( var_errread );
                    Py_DECREF( old );
                }

            }
            Py_XDECREF( tmp_tuple_unpack_11__element_1 );
            tmp_tuple_unpack_11__element_1 = NULL;

            {
                PyObject *tmp_assign_source_69;
                CHECK_OBJECT( tmp_tuple_unpack_11__element_2 );
                tmp_assign_source_69 = tmp_tuple_unpack_11__element_2;
                {
                    PyObject *old = var_errwrite;
                    assert( old != NULL );
                    var_errwrite = tmp_assign_source_69;
                    Py_INCREF( var_errwrite );
                    Py_DECREF( old );
                }

            }
            Py_XDECREF( tmp_tuple_unpack_11__element_2 );
            tmp_tuple_unpack_11__element_2 = NULL;

            // Tried code:
            {
                PyObject *tmp_assign_source_70;
                PyObject *tmp_iter_arg_12;
                PyObject *tmp_tuple_element_3;
                PyObject *tmp_called_name_17;
                PyObject *tmp_mvar_value_34;
                PyObject *tmp_args_element_name_22;
                PyObject *tmp_called_name_18;
                PyObject *tmp_mvar_value_35;
                PyObject *tmp_args_element_name_23;
                tmp_mvar_value_34 = GET_STRING_DICT_VALUE( moduledict_subprocess, (Nuitka_StringObject *)const_str_plain_Handle );

                if (unlikely( tmp_mvar_value_34 == NULL ))
                {
                    tmp_mvar_value_34 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_Handle );
                }

                if ( tmp_mvar_value_34 == NULL )
                {

                    exception_type = PyExc_NameError;
                    Py_INCREF( exception_type );
                    exception_value = PyUnicode_FromFormat( "name '%s' is not defined", "Handle" );
                    exception_tb = NULL;
                    NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
                    CHAIN_EXCEPTION( exception_value );

                    exception_lineno = 1068;
                    type_description_1 = "ooooooooooo";
                    goto try_except_handler_24;
                }

                tmp_called_name_17 = tmp_mvar_value_34;
                CHECK_OBJECT( var_errread );
                tmp_args_element_name_22 = var_errread;
                frame_1ccac2e96ff9427e4b97325ca6a6800b->m_frame.f_lineno = 1068;
                {
                    PyObject *call_args[] = { tmp_args_element_name_22 };
                    tmp_tuple_element_3 = CALL_FUNCTION_WITH_ARGS1( tmp_called_name_17, call_args );
                }

                if ( tmp_tuple_element_3 == NULL )
                {
                    assert( ERROR_OCCURRED() );

                    FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                    exception_lineno = 1068;
                    type_description_1 = "ooooooooooo";
                    goto try_except_handler_24;
                }
                tmp_iter_arg_12 = PyTuple_New( 2 );
                PyTuple_SET_ITEM( tmp_iter_arg_12, 0, tmp_tuple_element_3 );
                tmp_mvar_value_35 = GET_STRING_DICT_VALUE( moduledict_subprocess, (Nuitka_StringObject *)const_str_plain_Handle );

                if (unlikely( tmp_mvar_value_35 == NULL ))
                {
                    tmp_mvar_value_35 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_Handle );
                }

                if ( tmp_mvar_value_35 == NULL )
                {
                    Py_DECREF( tmp_iter_arg_12 );
                    exception_type = PyExc_NameError;
                    Py_INCREF( exception_type );
                    exception_value = PyUnicode_FromFormat( "name '%s' is not defined", "Handle" );
                    exception_tb = NULL;
                    NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
                    CHAIN_EXCEPTION( exception_value );

                    exception_lineno = 1068;
                    type_description_1 = "ooooooooooo";
                    goto try_except_handler_24;
                }

                tmp_called_name_18 = tmp_mvar_value_35;
                CHECK_OBJECT( var_errwrite );
                tmp_args_element_name_23 = var_errwrite;
                frame_1ccac2e96ff9427e4b97325ca6a6800b->m_frame.f_lineno = 1068;
                {
                    PyObject *call_args[] = { tmp_args_element_name_23 };
                    tmp_tuple_element_3 = CALL_FUNCTION_WITH_ARGS1( tmp_called_name_18, call_args );
                }

                if ( tmp_tuple_element_3 == NULL )
                {
                    assert( ERROR_OCCURRED() );

                    FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
                    Py_DECREF( tmp_iter_arg_12 );

                    exception_lineno = 1068;
                    type_description_1 = "ooooooooooo";
                    goto try_except_handler_24;
                }
                PyTuple_SET_ITEM( tmp_iter_arg_12, 1, tmp_tuple_element_3 );
                tmp_assign_source_70 = MAKE_UNPACK_ITERATOR( tmp_iter_arg_12 );
                Py_DECREF( tmp_iter_arg_12 );
                if ( tmp_assign_source_70 == NULL )
                {
                    assert( ERROR_OCCURRED() );

                    FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                    exception_lineno = 1068;
                    type_description_1 = "ooooooooooo";
                    goto try_except_handler_24;
                }
                assert( tmp_tuple_unpack_12__source_iter == NULL );
                tmp_tuple_unpack_12__source_iter = tmp_assign_source_70;
            }
            // Tried code:
            {
                PyObject *tmp_assign_source_71;
                PyObject *tmp_unpack_23;
                CHECK_OBJECT( tmp_tuple_unpack_12__source_iter );
                tmp_unpack_23 = tmp_tuple_unpack_12__source_iter;
                tmp_assign_source_71 = UNPACK_NEXT( tmp_unpack_23, 0, 2 );
                if ( tmp_assign_source_71 == NULL )
                {
                    if ( !ERROR_OCCURRED() )
                    {
                        exception_type = PyExc_StopIteration;
                        Py_INCREF( exception_type );
                        exception_value = NULL;
                        exception_tb = NULL;
                    }
                    else
                    {
                        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
                    }


                    type_description_1 = "ooooooooooo";
                    exception_lineno = 1068;
                    goto try_except_handler_25;
                }
                assert( tmp_tuple_unpack_12__element_1 == NULL );
                tmp_tuple_unpack_12__element_1 = tmp_assign_source_71;
            }
            {
                PyObject *tmp_assign_source_72;
                PyObject *tmp_unpack_24;
                CHECK_OBJECT( tmp_tuple_unpack_12__source_iter );
                tmp_unpack_24 = tmp_tuple_unpack_12__source_iter;
                tmp_assign_source_72 = UNPACK_NEXT( tmp_unpack_24, 1, 2 );
                if ( tmp_assign_source_72 == NULL )
                {
                    if ( !ERROR_OCCURRED() )
                    {
                        exception_type = PyExc_StopIteration;
                        Py_INCREF( exception_type );
                        exception_value = NULL;
                        exception_tb = NULL;
                    }
                    else
                    {
                        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
                    }


                    type_description_1 = "ooooooooooo";
                    exception_lineno = 1068;
                    goto try_except_handler_25;
                }
                assert( tmp_tuple_unpack_12__element_2 == NULL );
                tmp_tuple_unpack_12__element_2 = tmp_assign_source_72;
            }
            goto try_end_23;
            // Exception handler code:
            try_except_handler_25:;
            exception_keeper_type_23 = exception_type;
            exception_keeper_value_23 = exception_value;
            exception_keeper_tb_23 = exception_tb;
            exception_keeper_lineno_23 = exception_lineno;
            exception_type = NULL;
            exception_value = NULL;
            exception_tb = NULL;
            exception_lineno = 0;

            CHECK_OBJECT( (PyObject *)tmp_tuple_unpack_12__source_iter );
            Py_DECREF( tmp_tuple_unpack_12__source_iter );
            tmp_tuple_unpack_12__source_iter = NULL;

            // Re-raise.
            exception_type = exception_keeper_type_23;
            exception_value = exception_keeper_value_23;
            exception_tb = exception_keeper_tb_23;
            exception_lineno = exception_keeper_lineno_23;

            goto try_except_handler_24;
            // End of try:
            try_end_23:;
            goto try_end_24;
            // Exception handler code:
            try_except_handler_24:;
            exception_keeper_type_24 = exception_type;
            exception_keeper_value_24 = exception_value;
            exception_keeper_tb_24 = exception_tb;
            exception_keeper_lineno_24 = exception_lineno;
            exception_type = NULL;
            exception_value = NULL;
            exception_tb = NULL;
            exception_lineno = 0;

            Py_XDECREF( tmp_tuple_unpack_12__element_1 );
            tmp_tuple_unpack_12__element_1 = NULL;

            // Re-raise.
            exception_type = exception_keeper_type_24;
            exception_value = exception_keeper_value_24;
            exception_tb = exception_keeper_tb_24;
            exception_lineno = exception_keeper_lineno_24;

            goto frame_exception_exit_1;
            // End of try:
            try_end_24:;
            CHECK_OBJECT( (PyObject *)tmp_tuple_unpack_12__source_iter );
            Py_DECREF( tmp_tuple_unpack_12__source_iter );
            tmp_tuple_unpack_12__source_iter = NULL;

            {
                PyObject *tmp_assign_source_73;
                CHECK_OBJECT( tmp_tuple_unpack_12__element_1 );
                tmp_assign_source_73 = tmp_tuple_unpack_12__element_1;
                {
                    PyObject *old = var_errread;
                    assert( old != NULL );
                    var_errread = tmp_assign_source_73;
                    Py_INCREF( var_errread );
                    Py_DECREF( old );
                }

            }
            Py_XDECREF( tmp_tuple_unpack_12__element_1 );
            tmp_tuple_unpack_12__element_1 = NULL;

            {
                PyObject *tmp_assign_source_74;
                CHECK_OBJECT( tmp_tuple_unpack_12__element_2 );
                tmp_assign_source_74 = tmp_tuple_unpack_12__element_2;
                {
                    PyObject *old = var_errwrite;
                    assert( old != NULL );
                    var_errwrite = tmp_assign_source_74;
                    Py_INCREF( var_errwrite );
                    Py_DECREF( old );
                }

            }
            Py_XDECREF( tmp_tuple_unpack_12__element_2 );
            tmp_tuple_unpack_12__element_2 = NULL;

            goto branch_end_14;
            branch_no_14:;
            {
                nuitka_bool tmp_condition_result_15;
                PyObject *tmp_compexpr_left_15;
                PyObject *tmp_compexpr_right_15;
                PyObject *tmp_mvar_value_36;
                CHECK_OBJECT( par_stderr );
                tmp_compexpr_left_15 = par_stderr;
                tmp_mvar_value_36 = GET_STRING_DICT_VALUE( moduledict_subprocess, (Nuitka_StringObject *)const_str_plain_STDOUT );

                if (unlikely( tmp_mvar_value_36 == NULL ))
                {
                    tmp_mvar_value_36 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_STDOUT );
                }

                if ( tmp_mvar_value_36 == NULL )
                {

                    exception_type = PyExc_NameError;
                    Py_INCREF( exception_type );
                    exception_value = PyUnicode_FromFormat( "name '%s' is not defined", "STDOUT" );
                    exception_tb = NULL;
                    NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
                    CHAIN_EXCEPTION( exception_value );

                    exception_lineno = 1069;
                    type_description_1 = "ooooooooooo";
                    goto frame_exception_exit_1;
                }

                tmp_compexpr_right_15 = tmp_mvar_value_36;
                tmp_res = RICH_COMPARE_BOOL_EQ_OBJECT_OBJECT( tmp_compexpr_left_15, tmp_compexpr_right_15 );
                if ( tmp_res == -1 )
                {
                    assert( ERROR_OCCURRED() );

                    FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                    exception_lineno = 1069;
                    type_description_1 = "ooooooooooo";
                    goto frame_exception_exit_1;
                }
                tmp_condition_result_15 = ( tmp_res != 0 ) ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
                if ( tmp_condition_result_15 == NUITKA_BOOL_TRUE )
                {
                    goto branch_yes_15;
                }
                else
                {
                    goto branch_no_15;
                }
                branch_yes_15:;
                {
                    PyObject *tmp_assign_source_75;
                    CHECK_OBJECT( var_c2pwrite );
                    tmp_assign_source_75 = var_c2pwrite;
                    {
                        PyObject *old = var_errwrite;
                        assert( old != NULL );
                        var_errwrite = tmp_assign_source_75;
                        Py_INCREF( var_errwrite );
                        Py_DECREF( old );
                    }

                }
                goto branch_end_15;
                branch_no_15:;
                {
                    nuitka_bool tmp_condition_result_16;
                    PyObject *tmp_compexpr_left_16;
                    PyObject *tmp_compexpr_right_16;
                    PyObject *tmp_mvar_value_37;
                    CHECK_OBJECT( par_stderr );
                    tmp_compexpr_left_16 = par_stderr;
                    tmp_mvar_value_37 = GET_STRING_DICT_VALUE( moduledict_subprocess, (Nuitka_StringObject *)const_str_plain_DEVNULL );

                    if (unlikely( tmp_mvar_value_37 == NULL ))
                    {
                        tmp_mvar_value_37 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_DEVNULL );
                    }

                    if ( tmp_mvar_value_37 == NULL )
                    {

                        exception_type = PyExc_NameError;
                        Py_INCREF( exception_type );
                        exception_value = PyUnicode_FromFormat( "name '%s' is not defined", "DEVNULL" );
                        exception_tb = NULL;
                        NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
                        CHAIN_EXCEPTION( exception_value );

                        exception_lineno = 1071;
                        type_description_1 = "ooooooooooo";
                        goto frame_exception_exit_1;
                    }

                    tmp_compexpr_right_16 = tmp_mvar_value_37;
                    tmp_res = RICH_COMPARE_BOOL_EQ_OBJECT_OBJECT( tmp_compexpr_left_16, tmp_compexpr_right_16 );
                    if ( tmp_res == -1 )
                    {
                        assert( ERROR_OCCURRED() );

                        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                        exception_lineno = 1071;
                        type_description_1 = "ooooooooooo";
                        goto frame_exception_exit_1;
                    }
                    tmp_condition_result_16 = ( tmp_res != 0 ) ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
                    if ( tmp_condition_result_16 == NUITKA_BOOL_TRUE )
                    {
                        goto branch_yes_16;
                    }
                    else
                    {
                        goto branch_no_16;
                    }
                    branch_yes_16:;
                    {
                        PyObject *tmp_assign_source_76;
                        PyObject *tmp_called_name_19;
                        PyObject *tmp_source_name_13;
                        PyObject *tmp_mvar_value_38;
                        PyObject *tmp_args_element_name_24;
                        PyObject *tmp_called_instance_16;
                        tmp_mvar_value_38 = GET_STRING_DICT_VALUE( moduledict_subprocess, (Nuitka_StringObject *)const_str_plain_msvcrt );

                        if (unlikely( tmp_mvar_value_38 == NULL ))
                        {
                            tmp_mvar_value_38 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_msvcrt );
                        }

                        if ( tmp_mvar_value_38 == NULL )
                        {

                            exception_type = PyExc_NameError;
                            Py_INCREF( exception_type );
                            exception_value = PyUnicode_FromFormat( "name '%s' is not defined", "msvcrt" );
                            exception_tb = NULL;
                            NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
                            CHAIN_EXCEPTION( exception_value );

                            exception_lineno = 1072;
                            type_description_1 = "ooooooooooo";
                            goto frame_exception_exit_1;
                        }

                        tmp_source_name_13 = tmp_mvar_value_38;
                        tmp_called_name_19 = LOOKUP_ATTRIBUTE( tmp_source_name_13, const_str_plain_get_osfhandle );
                        if ( tmp_called_name_19 == NULL )
                        {
                            assert( ERROR_OCCURRED() );

                            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                            exception_lineno = 1072;
                            type_description_1 = "ooooooooooo";
                            goto frame_exception_exit_1;
                        }
                        CHECK_OBJECT( par_self );
                        tmp_called_instance_16 = par_self;
                        frame_1ccac2e96ff9427e4b97325ca6a6800b->m_frame.f_lineno = 1072;
                        tmp_args_element_name_24 = CALL_METHOD_NO_ARGS( tmp_called_instance_16, const_str_plain__get_devnull );
                        if ( tmp_args_element_name_24 == NULL )
                        {
                            assert( ERROR_OCCURRED() );

                            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
                            Py_DECREF( tmp_called_name_19 );

                            exception_lineno = 1072;
                            type_description_1 = "ooooooooooo";
                            goto frame_exception_exit_1;
                        }
                        frame_1ccac2e96ff9427e4b97325ca6a6800b->m_frame.f_lineno = 1072;
                        {
                            PyObject *call_args[] = { tmp_args_element_name_24 };
                            tmp_assign_source_76 = CALL_FUNCTION_WITH_ARGS1( tmp_called_name_19, call_args );
                        }

                        Py_DECREF( tmp_called_name_19 );
                        Py_DECREF( tmp_args_element_name_24 );
                        if ( tmp_assign_source_76 == NULL )
                        {
                            assert( ERROR_OCCURRED() );

                            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                            exception_lineno = 1072;
                            type_description_1 = "ooooooooooo";
                            goto frame_exception_exit_1;
                        }
                        {
                            PyObject *old = var_errwrite;
                            assert( old != NULL );
                            var_errwrite = tmp_assign_source_76;
                            Py_DECREF( old );
                        }

                    }
                    goto branch_end_16;
                    branch_no_16:;
                    {
                        nuitka_bool tmp_condition_result_17;
                        PyObject *tmp_isinstance_inst_3;
                        PyObject *tmp_isinstance_cls_3;
                        CHECK_OBJECT( par_stderr );
                        tmp_isinstance_inst_3 = par_stderr;
                        tmp_isinstance_cls_3 = (PyObject *)&PyLong_Type;
                        tmp_res = Nuitka_IsInstance( tmp_isinstance_inst_3, tmp_isinstance_cls_3 );
                        if ( tmp_res == -1 )
                        {
                            assert( ERROR_OCCURRED() );

                            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                            exception_lineno = 1073;
                            type_description_1 = "ooooooooooo";
                            goto frame_exception_exit_1;
                        }
                        tmp_condition_result_17 = ( tmp_res != 0 ) ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
                        if ( tmp_condition_result_17 == NUITKA_BOOL_TRUE )
                        {
                            goto branch_yes_17;
                        }
                        else
                        {
                            goto branch_no_17;
                        }
                        branch_yes_17:;
                        {
                            PyObject *tmp_assign_source_77;
                            PyObject *tmp_called_instance_17;
                            PyObject *tmp_mvar_value_39;
                            PyObject *tmp_args_element_name_25;
                            tmp_mvar_value_39 = GET_STRING_DICT_VALUE( moduledict_subprocess, (Nuitka_StringObject *)const_str_plain_msvcrt );

                            if (unlikely( tmp_mvar_value_39 == NULL ))
                            {
                                tmp_mvar_value_39 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_msvcrt );
                            }

                            if ( tmp_mvar_value_39 == NULL )
                            {

                                exception_type = PyExc_NameError;
                                Py_INCREF( exception_type );
                                exception_value = PyUnicode_FromFormat( "name '%s' is not defined", "msvcrt" );
                                exception_tb = NULL;
                                NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
                                CHAIN_EXCEPTION( exception_value );

                                exception_lineno = 1074;
                                type_description_1 = "ooooooooooo";
                                goto frame_exception_exit_1;
                            }

                            tmp_called_instance_17 = tmp_mvar_value_39;
                            CHECK_OBJECT( par_stderr );
                            tmp_args_element_name_25 = par_stderr;
                            frame_1ccac2e96ff9427e4b97325ca6a6800b->m_frame.f_lineno = 1074;
                            {
                                PyObject *call_args[] = { tmp_args_element_name_25 };
                                tmp_assign_source_77 = CALL_METHOD_WITH_ARGS1( tmp_called_instance_17, const_str_plain_get_osfhandle, call_args );
                            }

                            if ( tmp_assign_source_77 == NULL )
                            {
                                assert( ERROR_OCCURRED() );

                                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                                exception_lineno = 1074;
                                type_description_1 = "ooooooooooo";
                                goto frame_exception_exit_1;
                            }
                            {
                                PyObject *old = var_errwrite;
                                assert( old != NULL );
                                var_errwrite = tmp_assign_source_77;
                                Py_DECREF( old );
                            }

                        }
                        goto branch_end_17;
                        branch_no_17:;
                        {
                            PyObject *tmp_assign_source_78;
                            PyObject *tmp_called_name_20;
                            PyObject *tmp_source_name_14;
                            PyObject *tmp_mvar_value_40;
                            PyObject *tmp_args_element_name_26;
                            PyObject *tmp_called_instance_18;
                            tmp_mvar_value_40 = GET_STRING_DICT_VALUE( moduledict_subprocess, (Nuitka_StringObject *)const_str_plain_msvcrt );

                            if (unlikely( tmp_mvar_value_40 == NULL ))
                            {
                                tmp_mvar_value_40 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_msvcrt );
                            }

                            if ( tmp_mvar_value_40 == NULL )
                            {

                                exception_type = PyExc_NameError;
                                Py_INCREF( exception_type );
                                exception_value = PyUnicode_FromFormat( "name '%s' is not defined", "msvcrt" );
                                exception_tb = NULL;
                                NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
                                CHAIN_EXCEPTION( exception_value );

                                exception_lineno = 1077;
                                type_description_1 = "ooooooooooo";
                                goto frame_exception_exit_1;
                            }

                            tmp_source_name_14 = tmp_mvar_value_40;
                            tmp_called_name_20 = LOOKUP_ATTRIBUTE( tmp_source_name_14, const_str_plain_get_osfhandle );
                            if ( tmp_called_name_20 == NULL )
                            {
                                assert( ERROR_OCCURRED() );

                                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                                exception_lineno = 1077;
                                type_description_1 = "ooooooooooo";
                                goto frame_exception_exit_1;
                            }
                            CHECK_OBJECT( par_stderr );
                            tmp_called_instance_18 = par_stderr;
                            frame_1ccac2e96ff9427e4b97325ca6a6800b->m_frame.f_lineno = 1077;
                            tmp_args_element_name_26 = CALL_METHOD_NO_ARGS( tmp_called_instance_18, const_str_plain_fileno );
                            if ( tmp_args_element_name_26 == NULL )
                            {
                                assert( ERROR_OCCURRED() );

                                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
                                Py_DECREF( tmp_called_name_20 );

                                exception_lineno = 1077;
                                type_description_1 = "ooooooooooo";
                                goto frame_exception_exit_1;
                            }
                            frame_1ccac2e96ff9427e4b97325ca6a6800b->m_frame.f_lineno = 1077;
                            {
                                PyObject *call_args[] = { tmp_args_element_name_26 };
                                tmp_assign_source_78 = CALL_FUNCTION_WITH_ARGS1( tmp_called_name_20, call_args );
                            }

                            Py_DECREF( tmp_called_name_20 );
                            Py_DECREF( tmp_args_element_name_26 );
                            if ( tmp_assign_source_78 == NULL )
                            {
                                assert( ERROR_OCCURRED() );

                                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                                exception_lineno = 1077;
                                type_description_1 = "ooooooooooo";
                                goto frame_exception_exit_1;
                            }
                            {
                                PyObject *old = var_errwrite;
                                assert( old != NULL );
                                var_errwrite = tmp_assign_source_78;
                                Py_DECREF( old );
                            }

                        }
                        branch_end_17:;
                    }
                    branch_end_16:;
                }
                branch_end_15:;
            }
            branch_end_14:;
        }
        branch_end_12:;
    }
    {
        PyObject *tmp_assign_source_79;
        PyObject *tmp_called_name_21;
        PyObject *tmp_source_name_15;
        PyObject *tmp_args_element_name_27;
        CHECK_OBJECT( par_self );
        tmp_source_name_15 = par_self;
        tmp_called_name_21 = LOOKUP_ATTRIBUTE( tmp_source_name_15, const_str_plain__make_inheritable );
        if ( tmp_called_name_21 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 1078;
            type_description_1 = "ooooooooooo";
            goto frame_exception_exit_1;
        }
        if ( var_errwrite == NULL )
        {
            Py_DECREF( tmp_called_name_21 );
            exception_type = PyExc_UnboundLocalError;
            Py_INCREF( exception_type );
            exception_value = PyUnicode_FromFormat( "local variable '%s' referenced before assignment", "errwrite" );
            exception_tb = NULL;
            NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
            CHAIN_EXCEPTION( exception_value );

            exception_lineno = 1078;
            type_description_1 = "ooooooooooo";
            goto frame_exception_exit_1;
        }

        tmp_args_element_name_27 = var_errwrite;
        frame_1ccac2e96ff9427e4b97325ca6a6800b->m_frame.f_lineno = 1078;
        {
            PyObject *call_args[] = { tmp_args_element_name_27 };
            tmp_assign_source_79 = CALL_FUNCTION_WITH_ARGS1( tmp_called_name_21, call_args );
        }

        Py_DECREF( tmp_called_name_21 );
        if ( tmp_assign_source_79 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 1078;
            type_description_1 = "ooooooooooo";
            goto frame_exception_exit_1;
        }
        {
            PyObject *old = var_errwrite;
            var_errwrite = tmp_assign_source_79;
            Py_XDECREF( old );
        }

    }
    {
        PyObject *tmp_tuple_element_4;
        CHECK_OBJECT( var_p2cread );
        tmp_tuple_element_4 = var_p2cread;
        tmp_return_value = PyTuple_New( 6 );
        Py_INCREF( tmp_tuple_element_4 );
        PyTuple_SET_ITEM( tmp_return_value, 0, tmp_tuple_element_4 );
        if ( var_p2cwrite == NULL )
        {
            Py_DECREF( tmp_return_value );
            exception_type = PyExc_UnboundLocalError;
            Py_INCREF( exception_type );
            exception_value = PyUnicode_FromFormat( "local variable '%s' referenced before assignment", "p2cwrite" );
            exception_tb = NULL;
            NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
            CHAIN_EXCEPTION( exception_value );

            exception_lineno = 1080;
            type_description_1 = "ooooooooooo";
            goto frame_exception_exit_1;
        }

        tmp_tuple_element_4 = var_p2cwrite;
        Py_INCREF( tmp_tuple_element_4 );
        PyTuple_SET_ITEM( tmp_return_value, 1, tmp_tuple_element_4 );
        if ( var_c2pread == NULL )
        {
            Py_DECREF( tmp_return_value );
            exception_type = PyExc_UnboundLocalError;
            Py_INCREF( exception_type );
            exception_value = PyUnicode_FromFormat( "local variable '%s' referenced before assignment", "c2pread" );
            exception_tb = NULL;
            NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
            CHAIN_EXCEPTION( exception_value );

            exception_lineno = 1081;
            type_description_1 = "ooooooooooo";
            goto frame_exception_exit_1;
        }

        tmp_tuple_element_4 = var_c2pread;
        Py_INCREF( tmp_tuple_element_4 );
        PyTuple_SET_ITEM( tmp_return_value, 2, tmp_tuple_element_4 );
        CHECK_OBJECT( var_c2pwrite );
        tmp_tuple_element_4 = var_c2pwrite;
        Py_INCREF( tmp_tuple_element_4 );
        PyTuple_SET_ITEM( tmp_return_value, 3, tmp_tuple_element_4 );
        if ( var_errread == NULL )
        {
            Py_DECREF( tmp_return_value );
            exception_type = PyExc_UnboundLocalError;
            Py_INCREF( exception_type );
            exception_value = PyUnicode_FromFormat( "local variable '%s' referenced before assignment", "errread" );
            exception_tb = NULL;
            NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
            CHAIN_EXCEPTION( exception_value );

            exception_lineno = 1082;
            type_description_1 = "ooooooooooo";
            goto frame_exception_exit_1;
        }

        tmp_tuple_element_4 = var_errread;
        Py_INCREF( tmp_tuple_element_4 );
        PyTuple_SET_ITEM( tmp_return_value, 4, tmp_tuple_element_4 );
        CHECK_OBJECT( var_errwrite );
        tmp_tuple_element_4 = var_errwrite;
        Py_INCREF( tmp_tuple_element_4 );
        PyTuple_SET_ITEM( tmp_return_value, 5, tmp_tuple_element_4 );
        goto frame_return_exit_1;
    }

#if 0
    RESTORE_FRAME_EXCEPTION( frame_1ccac2e96ff9427e4b97325ca6a6800b );
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto frame_no_exception_1;

    frame_return_exit_1:;
#if 0
    RESTORE_FRAME_EXCEPTION( frame_1ccac2e96ff9427e4b97325ca6a6800b );
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto try_return_handler_1;

    frame_exception_exit_1:;

#if 0
    RESTORE_FRAME_EXCEPTION( frame_1ccac2e96ff9427e4b97325ca6a6800b );
#endif

    if ( exception_tb == NULL )
    {
        exception_tb = MAKE_TRACEBACK( frame_1ccac2e96ff9427e4b97325ca6a6800b, exception_lineno );
    }
    else if ( exception_tb->tb_frame != &frame_1ccac2e96ff9427e4b97325ca6a6800b->m_frame )
    {
        exception_tb = ADD_TRACEBACK( exception_tb, frame_1ccac2e96ff9427e4b97325ca6a6800b, exception_lineno );
    }

    // Attachs locals to frame if any.
    Nuitka_Frame_AttachLocals(
        (struct Nuitka_FrameObject *)frame_1ccac2e96ff9427e4b97325ca6a6800b,
        type_description_1,
        par_self,
        par_stdin,
        par_stdout,
        par_stderr,
        var_p2cread,
        var_p2cwrite,
        var_c2pread,
        var_c2pwrite,
        var_errread,
        var_errwrite,
        var__
    );


    // Release cached frame.
    if ( frame_1ccac2e96ff9427e4b97325ca6a6800b == cache_frame_1ccac2e96ff9427e4b97325ca6a6800b )
    {
        Py_DECREF( frame_1ccac2e96ff9427e4b97325ca6a6800b );
    }
    cache_frame_1ccac2e96ff9427e4b97325ca6a6800b = NULL;

    assertFrameObject( frame_1ccac2e96ff9427e4b97325ca6a6800b );

    // Put the previous frame back on top.
    popFrameStack();

    // Return the error.
    goto try_except_handler_1;

    frame_no_exception_1:;
    // tried codes exits in all cases
    NUITKA_CANNOT_GET_HERE( subprocess$$$function_41__get_handles );
    return NULL;
    // Return handler code:
    try_return_handler_1:;
    CHECK_OBJECT( (PyObject *)par_self );
    Py_DECREF( par_self );
    par_self = NULL;

    CHECK_OBJECT( (PyObject *)par_stdin );
    Py_DECREF( par_stdin );
    par_stdin = NULL;

    CHECK_OBJECT( (PyObject *)par_stdout );
    Py_DECREF( par_stdout );
    par_stdout = NULL;

    CHECK_OBJECT( (PyObject *)par_stderr );
    Py_DECREF( par_stderr );
    par_stderr = NULL;

    Py_XDECREF( var_p2cread );
    var_p2cread = NULL;

    Py_XDECREF( var_p2cwrite );
    var_p2cwrite = NULL;

    Py_XDECREF( var_c2pread );
    var_c2pread = NULL;

    Py_XDECREF( var_c2pwrite );
    var_c2pwrite = NULL;

    Py_XDECREF( var_errread );
    var_errread = NULL;

    Py_XDECREF( var_errwrite );
    var_errwrite = NULL;

    Py_XDECREF( var__ );
    var__ = NULL;

    goto function_return_exit;
    // Exception handler code:
    try_except_handler_1:;
    exception_keeper_type_25 = exception_type;
    exception_keeper_value_25 = exception_value;
    exception_keeper_tb_25 = exception_tb;
    exception_keeper_lineno_25 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    CHECK_OBJECT( (PyObject *)par_self );
    Py_DECREF( par_self );
    par_self = NULL;

    CHECK_OBJECT( (PyObject *)par_stdin );
    Py_DECREF( par_stdin );
    par_stdin = NULL;

    CHECK_OBJECT( (PyObject *)par_stdout );
    Py_DECREF( par_stdout );
    par_stdout = NULL;

    CHECK_OBJECT( (PyObject *)par_stderr );
    Py_DECREF( par_stderr );
    par_stderr = NULL;

    Py_XDECREF( var_p2cread );
    var_p2cread = NULL;

    Py_XDECREF( var_p2cwrite );
    var_p2cwrite = NULL;

    Py_XDECREF( var_c2pread );
    var_c2pread = NULL;

    Py_XDECREF( var_c2pwrite );
    var_c2pwrite = NULL;

    Py_XDECREF( var_errread );
    var_errread = NULL;

    Py_XDECREF( var_errwrite );
    var_errwrite = NULL;

    Py_XDECREF( var__ );
    var__ = NULL;

    // Re-raise.
    exception_type = exception_keeper_type_25;
    exception_value = exception_keeper_value_25;
    exception_tb = exception_keeper_tb_25;
    exception_lineno = exception_keeper_lineno_25;

    goto function_exception_exit;
    // End of try:

    // Return statement must have exited already.
    NUITKA_CANNOT_GET_HERE( subprocess$$$function_41__get_handles );
    return NULL;

function_exception_exit:
    assert( exception_type );
    RESTORE_ERROR_OCCURRED( exception_type, exception_value, exception_tb );

    return NULL;

function_return_exit:
   // Function cleanup code if any.


   // Actual function exit with return value, making sure we did not make
   // the error status worse despite non-NULL return.
   CHECK_OBJECT( tmp_return_value );
   assert( had_error || !ERROR_OCCURRED() );
   return tmp_return_value;
}


static PyObject *impl_subprocess$$$function_42__make_inheritable( struct Nuitka_FunctionObject const *self, PyObject **python_pars )
{
    // Preserve error status for checks
#ifndef __NUITKA_NO_ASSERT__
    NUITKA_MAY_BE_UNUSED bool had_error = ERROR_OCCURRED();
#endif

    // Local variable declarations.
    PyObject *par_self = python_pars[ 0 ];
    PyObject *par_handle = python_pars[ 1 ];
    PyObject *var_h = NULL;
    struct Nuitka_FrameObject *frame_f4ca8605c9569418bc8039f668bf7a67;
    NUITKA_MAY_BE_UNUSED char const *type_description_1 = NULL;
    PyObject *exception_type = NULL;
    PyObject *exception_value = NULL;
    PyTracebackObject *exception_tb = NULL;
    NUITKA_MAY_BE_UNUSED int exception_lineno = 0;
    PyObject *tmp_return_value = NULL;
    static struct Nuitka_FrameObject *cache_frame_f4ca8605c9569418bc8039f668bf7a67 = NULL;
    PyObject *exception_keeper_type_1;
    PyObject *exception_keeper_value_1;
    PyTracebackObject *exception_keeper_tb_1;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_1;

    // Actual function body.
    // Tried code:
    MAKE_OR_REUSE_FRAME( cache_frame_f4ca8605c9569418bc8039f668bf7a67, codeobj_f4ca8605c9569418bc8039f668bf7a67, module_subprocess, sizeof(void *)+sizeof(void *)+sizeof(void *) );
    frame_f4ca8605c9569418bc8039f668bf7a67 = cache_frame_f4ca8605c9569418bc8039f668bf7a67;

    // Push the new frame as the currently active one.
    pushFrameStack( frame_f4ca8605c9569418bc8039f668bf7a67 );

    // Mark the frame object as in use, ref count 1 will be up for reuse.
    assert( Py_REFCNT( frame_f4ca8605c9569418bc8039f668bf7a67 ) == 2 ); // Frame stack

    // Framed code:
    {
        PyObject *tmp_assign_source_1;
        PyObject *tmp_called_name_1;
        PyObject *tmp_source_name_1;
        PyObject *tmp_mvar_value_1;
        PyObject *tmp_args_element_name_1;
        PyObject *tmp_called_instance_1;
        PyObject *tmp_mvar_value_2;
        PyObject *tmp_args_element_name_2;
        PyObject *tmp_args_element_name_3;
        PyObject *tmp_called_instance_2;
        PyObject *tmp_mvar_value_3;
        PyObject *tmp_args_element_name_4;
        PyObject *tmp_args_element_name_5;
        PyObject *tmp_args_element_name_6;
        PyObject *tmp_source_name_2;
        PyObject *tmp_mvar_value_4;
        tmp_mvar_value_1 = GET_STRING_DICT_VALUE( moduledict_subprocess, (Nuitka_StringObject *)const_str_plain__winapi );

        if (unlikely( tmp_mvar_value_1 == NULL ))
        {
            tmp_mvar_value_1 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain__winapi );
        }

        if ( tmp_mvar_value_1 == NULL )
        {

            exception_type = PyExc_NameError;
            Py_INCREF( exception_type );
            exception_value = PyUnicode_FromFormat( "name '%s' is not defined", "_winapi" );
            exception_tb = NULL;
            NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
            CHAIN_EXCEPTION( exception_value );

            exception_lineno = 1087;
            type_description_1 = "ooo";
            goto frame_exception_exit_1;
        }

        tmp_source_name_1 = tmp_mvar_value_1;
        tmp_called_name_1 = LOOKUP_ATTRIBUTE( tmp_source_name_1, const_str_plain_DuplicateHandle );
        if ( tmp_called_name_1 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 1087;
            type_description_1 = "ooo";
            goto frame_exception_exit_1;
        }
        tmp_mvar_value_2 = GET_STRING_DICT_VALUE( moduledict_subprocess, (Nuitka_StringObject *)const_str_plain__winapi );

        if (unlikely( tmp_mvar_value_2 == NULL ))
        {
            tmp_mvar_value_2 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain__winapi );
        }

        if ( tmp_mvar_value_2 == NULL )
        {
            Py_DECREF( tmp_called_name_1 );
            exception_type = PyExc_NameError;
            Py_INCREF( exception_type );
            exception_value = PyUnicode_FromFormat( "name '%s' is not defined", "_winapi" );
            exception_tb = NULL;
            NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
            CHAIN_EXCEPTION( exception_value );

            exception_lineno = 1088;
            type_description_1 = "ooo";
            goto frame_exception_exit_1;
        }

        tmp_called_instance_1 = tmp_mvar_value_2;
        frame_f4ca8605c9569418bc8039f668bf7a67->m_frame.f_lineno = 1088;
        tmp_args_element_name_1 = CALL_METHOD_NO_ARGS( tmp_called_instance_1, const_str_plain_GetCurrentProcess );
        if ( tmp_args_element_name_1 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
            Py_DECREF( tmp_called_name_1 );

            exception_lineno = 1088;
            type_description_1 = "ooo";
            goto frame_exception_exit_1;
        }
        CHECK_OBJECT( par_handle );
        tmp_args_element_name_2 = par_handle;
        tmp_mvar_value_3 = GET_STRING_DICT_VALUE( moduledict_subprocess, (Nuitka_StringObject *)const_str_plain__winapi );

        if (unlikely( tmp_mvar_value_3 == NULL ))
        {
            tmp_mvar_value_3 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain__winapi );
        }

        if ( tmp_mvar_value_3 == NULL )
        {
            Py_DECREF( tmp_called_name_1 );
            Py_DECREF( tmp_args_element_name_1 );
            exception_type = PyExc_NameError;
            Py_INCREF( exception_type );
            exception_value = PyUnicode_FromFormat( "name '%s' is not defined", "_winapi" );
            exception_tb = NULL;
            NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
            CHAIN_EXCEPTION( exception_value );

            exception_lineno = 1089;
            type_description_1 = "ooo";
            goto frame_exception_exit_1;
        }

        tmp_called_instance_2 = tmp_mvar_value_3;
        frame_f4ca8605c9569418bc8039f668bf7a67->m_frame.f_lineno = 1089;
        tmp_args_element_name_3 = CALL_METHOD_NO_ARGS( tmp_called_instance_2, const_str_plain_GetCurrentProcess );
        if ( tmp_args_element_name_3 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
            Py_DECREF( tmp_called_name_1 );
            Py_DECREF( tmp_args_element_name_1 );

            exception_lineno = 1089;
            type_description_1 = "ooo";
            goto frame_exception_exit_1;
        }
        tmp_args_element_name_4 = const_int_0;
        tmp_args_element_name_5 = const_int_pos_1;
        tmp_mvar_value_4 = GET_STRING_DICT_VALUE( moduledict_subprocess, (Nuitka_StringObject *)const_str_plain__winapi );

        if (unlikely( tmp_mvar_value_4 == NULL ))
        {
            tmp_mvar_value_4 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain__winapi );
        }

        if ( tmp_mvar_value_4 == NULL )
        {
            Py_DECREF( tmp_called_name_1 );
            Py_DECREF( tmp_args_element_name_1 );
            Py_DECREF( tmp_args_element_name_3 );
            exception_type = PyExc_NameError;
            Py_INCREF( exception_type );
            exception_value = PyUnicode_FromFormat( "name '%s' is not defined", "_winapi" );
            exception_tb = NULL;
            NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
            CHAIN_EXCEPTION( exception_value );

            exception_lineno = 1090;
            type_description_1 = "ooo";
            goto frame_exception_exit_1;
        }

        tmp_source_name_2 = tmp_mvar_value_4;
        tmp_args_element_name_6 = LOOKUP_ATTRIBUTE( tmp_source_name_2, const_str_plain_DUPLICATE_SAME_ACCESS );
        if ( tmp_args_element_name_6 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
            Py_DECREF( tmp_called_name_1 );
            Py_DECREF( tmp_args_element_name_1 );
            Py_DECREF( tmp_args_element_name_3 );

            exception_lineno = 1090;
            type_description_1 = "ooo";
            goto frame_exception_exit_1;
        }
        frame_f4ca8605c9569418bc8039f668bf7a67->m_frame.f_lineno = 1087;
        {
            PyObject *call_args[] = { tmp_args_element_name_1, tmp_args_element_name_2, tmp_args_element_name_3, tmp_args_element_name_4, tmp_args_element_name_5, tmp_args_element_name_6 };
            tmp_assign_source_1 = CALL_FUNCTION_WITH_ARGS6( tmp_called_name_1, call_args );
        }

        Py_DECREF( tmp_called_name_1 );
        Py_DECREF( tmp_args_element_name_1 );
        Py_DECREF( tmp_args_element_name_3 );
        Py_DECREF( tmp_args_element_name_6 );
        if ( tmp_assign_source_1 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 1087;
            type_description_1 = "ooo";
            goto frame_exception_exit_1;
        }
        assert( var_h == NULL );
        var_h = tmp_assign_source_1;
    }
    {
        PyObject *tmp_called_name_2;
        PyObject *tmp_mvar_value_5;
        PyObject *tmp_args_element_name_7;
        tmp_mvar_value_5 = GET_STRING_DICT_VALUE( moduledict_subprocess, (Nuitka_StringObject *)const_str_plain_Handle );

        if (unlikely( tmp_mvar_value_5 == NULL ))
        {
            tmp_mvar_value_5 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_Handle );
        }

        if ( tmp_mvar_value_5 == NULL )
        {

            exception_type = PyExc_NameError;
            Py_INCREF( exception_type );
            exception_value = PyUnicode_FromFormat( "name '%s' is not defined", "Handle" );
            exception_tb = NULL;
            NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
            CHAIN_EXCEPTION( exception_value );

            exception_lineno = 1091;
            type_description_1 = "ooo";
            goto frame_exception_exit_1;
        }

        tmp_called_name_2 = tmp_mvar_value_5;
        CHECK_OBJECT( var_h );
        tmp_args_element_name_7 = var_h;
        frame_f4ca8605c9569418bc8039f668bf7a67->m_frame.f_lineno = 1091;
        {
            PyObject *call_args[] = { tmp_args_element_name_7 };
            tmp_return_value = CALL_FUNCTION_WITH_ARGS1( tmp_called_name_2, call_args );
        }

        if ( tmp_return_value == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 1091;
            type_description_1 = "ooo";
            goto frame_exception_exit_1;
        }
        goto frame_return_exit_1;
    }

#if 0
    RESTORE_FRAME_EXCEPTION( frame_f4ca8605c9569418bc8039f668bf7a67 );
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto frame_no_exception_1;

    frame_return_exit_1:;
#if 0
    RESTORE_FRAME_EXCEPTION( frame_f4ca8605c9569418bc8039f668bf7a67 );
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto try_return_handler_1;

    frame_exception_exit_1:;

#if 0
    RESTORE_FRAME_EXCEPTION( frame_f4ca8605c9569418bc8039f668bf7a67 );
#endif

    if ( exception_tb == NULL )
    {
        exception_tb = MAKE_TRACEBACK( frame_f4ca8605c9569418bc8039f668bf7a67, exception_lineno );
    }
    else if ( exception_tb->tb_frame != &frame_f4ca8605c9569418bc8039f668bf7a67->m_frame )
    {
        exception_tb = ADD_TRACEBACK( exception_tb, frame_f4ca8605c9569418bc8039f668bf7a67, exception_lineno );
    }

    // Attachs locals to frame if any.
    Nuitka_Frame_AttachLocals(
        (struct Nuitka_FrameObject *)frame_f4ca8605c9569418bc8039f668bf7a67,
        type_description_1,
        par_self,
        par_handle,
        var_h
    );


    // Release cached frame.
    if ( frame_f4ca8605c9569418bc8039f668bf7a67 == cache_frame_f4ca8605c9569418bc8039f668bf7a67 )
    {
        Py_DECREF( frame_f4ca8605c9569418bc8039f668bf7a67 );
    }
    cache_frame_f4ca8605c9569418bc8039f668bf7a67 = NULL;

    assertFrameObject( frame_f4ca8605c9569418bc8039f668bf7a67 );

    // Put the previous frame back on top.
    popFrameStack();

    // Return the error.
    goto try_except_handler_1;

    frame_no_exception_1:;
    // tried codes exits in all cases
    NUITKA_CANNOT_GET_HERE( subprocess$$$function_42__make_inheritable );
    return NULL;
    // Return handler code:
    try_return_handler_1:;
    CHECK_OBJECT( (PyObject *)par_self );
    Py_DECREF( par_self );
    par_self = NULL;

    CHECK_OBJECT( (PyObject *)par_handle );
    Py_DECREF( par_handle );
    par_handle = NULL;

    CHECK_OBJECT( (PyObject *)var_h );
    Py_DECREF( var_h );
    var_h = NULL;

    goto function_return_exit;
    // Exception handler code:
    try_except_handler_1:;
    exception_keeper_type_1 = exception_type;
    exception_keeper_value_1 = exception_value;
    exception_keeper_tb_1 = exception_tb;
    exception_keeper_lineno_1 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    CHECK_OBJECT( (PyObject *)par_self );
    Py_DECREF( par_self );
    par_self = NULL;

    CHECK_OBJECT( (PyObject *)par_handle );
    Py_DECREF( par_handle );
    par_handle = NULL;

    Py_XDECREF( var_h );
    var_h = NULL;

    // Re-raise.
    exception_type = exception_keeper_type_1;
    exception_value = exception_keeper_value_1;
    exception_tb = exception_keeper_tb_1;
    exception_lineno = exception_keeper_lineno_1;

    goto function_exception_exit;
    // End of try:

    // Return statement must have exited already.
    NUITKA_CANNOT_GET_HERE( subprocess$$$function_42__make_inheritable );
    return NULL;

function_exception_exit:
    assert( exception_type );
    RESTORE_ERROR_OCCURRED( exception_type, exception_value, exception_tb );

    return NULL;

function_return_exit:
   // Function cleanup code if any.


   // Actual function exit with return value, making sure we did not make
   // the error status worse despite non-NULL return.
   CHECK_OBJECT( tmp_return_value );
   assert( had_error || !ERROR_OCCURRED() );
   return tmp_return_value;
}


static PyObject *impl_subprocess$$$function_43__filter_handle_list( struct Nuitka_FunctionObject const *self, PyObject **python_pars )
{
    // Preserve error status for checks
#ifndef __NUITKA_NO_ASSERT__
    NUITKA_MAY_BE_UNUSED bool had_error = ERROR_OCCURRED();
#endif

    // Local variable declarations.
    PyObject *par_self = python_pars[ 0 ];
    PyObject *par_handle_list = python_pars[ 1 ];
    PyObject *outline_0_var_handle = NULL;
    PyObject *tmp_setcontraction_1__$0 = NULL;
    PyObject *tmp_setcontraction_1__contraction = NULL;
    PyObject *tmp_setcontraction_1__iter_value_0 = NULL;
    struct Nuitka_FrameObject *frame_595fbfe0f24c4e1cf92bb35eb23a0fd7;
    NUITKA_MAY_BE_UNUSED char const *type_description_1 = NULL;
    PyObject *tmp_return_value = NULL;
    PyObject *exception_type = NULL;
    PyObject *exception_value = NULL;
    PyTracebackObject *exception_tb = NULL;
    NUITKA_MAY_BE_UNUSED int exception_lineno = 0;
    struct Nuitka_FrameObject *frame_8173f38e5b402db35849e9f35fd86a10_2;
    NUITKA_MAY_BE_UNUSED char const *type_description_2 = NULL;
    int tmp_res;
    PyObject *exception_keeper_type_1;
    PyObject *exception_keeper_value_1;
    PyTracebackObject *exception_keeper_tb_1;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_1;
    static struct Nuitka_FrameObject *cache_frame_8173f38e5b402db35849e9f35fd86a10_2 = NULL;
    PyObject *exception_keeper_type_2;
    PyObject *exception_keeper_value_2;
    PyTracebackObject *exception_keeper_tb_2;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_2;
    static struct Nuitka_FrameObject *cache_frame_595fbfe0f24c4e1cf92bb35eb23a0fd7 = NULL;
    PyObject *exception_keeper_type_3;
    PyObject *exception_keeper_value_3;
    PyTracebackObject *exception_keeper_tb_3;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_3;

    // Actual function body.
    // Tried code:
    MAKE_OR_REUSE_FRAME( cache_frame_595fbfe0f24c4e1cf92bb35eb23a0fd7, codeobj_595fbfe0f24c4e1cf92bb35eb23a0fd7, module_subprocess, sizeof(void *)+sizeof(void *) );
    frame_595fbfe0f24c4e1cf92bb35eb23a0fd7 = cache_frame_595fbfe0f24c4e1cf92bb35eb23a0fd7;

    // Push the new frame as the currently active one.
    pushFrameStack( frame_595fbfe0f24c4e1cf92bb35eb23a0fd7 );

    // Mark the frame object as in use, ref count 1 will be up for reuse.
    assert( Py_REFCNT( frame_595fbfe0f24c4e1cf92bb35eb23a0fd7 ) == 2 ); // Frame stack

    // Framed code:
    {
        PyObject *tmp_list_arg_1;
        // Tried code:
        {
            PyObject *tmp_assign_source_1;
            PyObject *tmp_iter_arg_1;
            CHECK_OBJECT( par_handle_list );
            tmp_iter_arg_1 = par_handle_list;
            tmp_assign_source_1 = MAKE_ITERATOR( tmp_iter_arg_1 );
            if ( tmp_assign_source_1 == NULL )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 1101;
                type_description_1 = "oo";
                goto try_except_handler_2;
            }
            assert( tmp_setcontraction_1__$0 == NULL );
            tmp_setcontraction_1__$0 = tmp_assign_source_1;
        }
        {
            PyObject *tmp_assign_source_2;
            tmp_assign_source_2 = PySet_New( NULL );
            assert( tmp_setcontraction_1__contraction == NULL );
            tmp_setcontraction_1__contraction = tmp_assign_source_2;
        }
        MAKE_OR_REUSE_FRAME( cache_frame_8173f38e5b402db35849e9f35fd86a10_2, codeobj_8173f38e5b402db35849e9f35fd86a10, module_subprocess, sizeof(void *) );
        frame_8173f38e5b402db35849e9f35fd86a10_2 = cache_frame_8173f38e5b402db35849e9f35fd86a10_2;

        // Push the new frame as the currently active one.
        pushFrameStack( frame_8173f38e5b402db35849e9f35fd86a10_2 );

        // Mark the frame object as in use, ref count 1 will be up for reuse.
        assert( Py_REFCNT( frame_8173f38e5b402db35849e9f35fd86a10_2 ) == 2 ); // Frame stack

        // Framed code:
        // Tried code:
        loop_start_1:;
        {
            PyObject *tmp_next_source_1;
            PyObject *tmp_assign_source_3;
            CHECK_OBJECT( tmp_setcontraction_1__$0 );
            tmp_next_source_1 = tmp_setcontraction_1__$0;
            tmp_assign_source_3 = ITERATOR_NEXT( tmp_next_source_1 );
            if ( tmp_assign_source_3 == NULL )
            {
                if ( CHECK_AND_CLEAR_STOP_ITERATION_OCCURRED() )
                {

                    goto loop_end_1;
                }
                else
                {

                    FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
                    type_description_2 = "o";
                    exception_lineno = 1101;
                    goto try_except_handler_3;
                }
            }

            {
                PyObject *old = tmp_setcontraction_1__iter_value_0;
                tmp_setcontraction_1__iter_value_0 = tmp_assign_source_3;
                Py_XDECREF( old );
            }

        }
        {
            PyObject *tmp_assign_source_4;
            CHECK_OBJECT( tmp_setcontraction_1__iter_value_0 );
            tmp_assign_source_4 = tmp_setcontraction_1__iter_value_0;
            {
                PyObject *old = outline_0_var_handle;
                outline_0_var_handle = tmp_assign_source_4;
                Py_INCREF( outline_0_var_handle );
                Py_XDECREF( old );
            }

        }
        {
            nuitka_bool tmp_condition_result_1;
            int tmp_or_left_truth_1;
            nuitka_bool tmp_or_left_value_1;
            nuitka_bool tmp_or_right_value_1;
            PyObject *tmp_compexpr_left_1;
            PyObject *tmp_compexpr_right_1;
            PyObject *tmp_left_name_1;
            PyObject *tmp_right_name_1;
            PyObject *tmp_compexpr_left_2;
            PyObject *tmp_compexpr_right_2;
            PyObject *tmp_called_instance_1;
            PyObject *tmp_mvar_value_1;
            PyObject *tmp_args_element_name_1;
            PyObject *tmp_source_name_1;
            PyObject *tmp_mvar_value_2;
            CHECK_OBJECT( outline_0_var_handle );
            tmp_left_name_1 = outline_0_var_handle;
            tmp_right_name_1 = const_int_pos_3;
            tmp_compexpr_left_1 = BINARY_OPERATION( PyNumber_And, tmp_left_name_1, tmp_right_name_1 );
            if ( tmp_compexpr_left_1 == NULL )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 1102;
                type_description_2 = "o";
                goto try_except_handler_3;
            }
            tmp_compexpr_right_1 = const_int_pos_3;
            tmp_res = RICH_COMPARE_BOOL_NOTEQ_OBJECT_OBJECT( tmp_compexpr_left_1, tmp_compexpr_right_1 );
            Py_DECREF( tmp_compexpr_left_1 );
            if ( tmp_res == -1 )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 1102;
                type_description_2 = "o";
                goto try_except_handler_3;
            }
            tmp_or_left_value_1 = ( tmp_res != 0 ) ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
            tmp_or_left_truth_1 = tmp_or_left_value_1 == NUITKA_BOOL_TRUE ? 1 : 0;
            if ( tmp_or_left_truth_1 == 1 )
            {
                goto or_left_1;
            }
            else
            {
                goto or_right_1;
            }
            or_right_1:;
            tmp_mvar_value_1 = GET_STRING_DICT_VALUE( moduledict_subprocess, (Nuitka_StringObject *)const_str_plain__winapi );

            if (unlikely( tmp_mvar_value_1 == NULL ))
            {
                tmp_mvar_value_1 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain__winapi );
            }

            if ( tmp_mvar_value_1 == NULL )
            {

                exception_type = PyExc_NameError;
                Py_INCREF( exception_type );
                exception_value = PyUnicode_FromFormat( "name '%s' is not defined", "_winapi" );
                exception_tb = NULL;
                NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
                CHAIN_EXCEPTION( exception_value );

                exception_lineno = 1103;
                type_description_2 = "o";
                goto try_except_handler_3;
            }

            tmp_called_instance_1 = tmp_mvar_value_1;
            CHECK_OBJECT( outline_0_var_handle );
            tmp_args_element_name_1 = outline_0_var_handle;
            frame_8173f38e5b402db35849e9f35fd86a10_2->m_frame.f_lineno = 1103;
            {
                PyObject *call_args[] = { tmp_args_element_name_1 };
                tmp_compexpr_left_2 = CALL_METHOD_WITH_ARGS1( tmp_called_instance_1, const_str_plain_GetFileType, call_args );
            }

            if ( tmp_compexpr_left_2 == NULL )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 1103;
                type_description_2 = "o";
                goto try_except_handler_3;
            }
            tmp_mvar_value_2 = GET_STRING_DICT_VALUE( moduledict_subprocess, (Nuitka_StringObject *)const_str_plain__winapi );

            if (unlikely( tmp_mvar_value_2 == NULL ))
            {
                tmp_mvar_value_2 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain__winapi );
            }

            if ( tmp_mvar_value_2 == NULL )
            {
                Py_DECREF( tmp_compexpr_left_2 );
                exception_type = PyExc_NameError;
                Py_INCREF( exception_type );
                exception_value = PyUnicode_FromFormat( "name '%s' is not defined", "_winapi" );
                exception_tb = NULL;
                NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
                CHAIN_EXCEPTION( exception_value );

                exception_lineno = 1104;
                type_description_2 = "o";
                goto try_except_handler_3;
            }

            tmp_source_name_1 = tmp_mvar_value_2;
            tmp_compexpr_right_2 = LOOKUP_ATTRIBUTE( tmp_source_name_1, const_str_plain_FILE_TYPE_CHAR );
            if ( tmp_compexpr_right_2 == NULL )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
                Py_DECREF( tmp_compexpr_left_2 );

                exception_lineno = 1104;
                type_description_2 = "o";
                goto try_except_handler_3;
            }
            tmp_res = RICH_COMPARE_BOOL_NOTEQ_OBJECT_OBJECT( tmp_compexpr_left_2, tmp_compexpr_right_2 );
            Py_DECREF( tmp_compexpr_left_2 );
            Py_DECREF( tmp_compexpr_right_2 );
            if ( tmp_res == -1 )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 1103;
                type_description_2 = "o";
                goto try_except_handler_3;
            }
            tmp_or_right_value_1 = ( tmp_res != 0 ) ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
            tmp_condition_result_1 = tmp_or_right_value_1;
            goto or_end_1;
            or_left_1:;
            tmp_condition_result_1 = tmp_or_left_value_1;
            or_end_1:;
            if ( tmp_condition_result_1 == NUITKA_BOOL_TRUE )
            {
                goto branch_yes_1;
            }
            else
            {
                goto branch_no_1;
            }
            branch_yes_1:;
            {
                PyObject *tmp_append_list_1;
                PyObject *tmp_append_value_1;
                CHECK_OBJECT( tmp_setcontraction_1__contraction );
                tmp_append_list_1 = tmp_setcontraction_1__contraction;
                CHECK_OBJECT( outline_0_var_handle );
                tmp_append_value_1 = outline_0_var_handle;
                assert( PySet_Check( tmp_append_list_1 ) );
                tmp_res = PySet_Add( tmp_append_list_1, tmp_append_value_1 );
                if ( tmp_res == -1 )
                {
                    assert( ERROR_OCCURRED() );

                    FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                    exception_lineno = 1101;
                    type_description_2 = "o";
                    goto try_except_handler_3;
                }
            }
            branch_no_1:;
        }
        if ( CONSIDER_THREADING() == false )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 1101;
            type_description_2 = "o";
            goto try_except_handler_3;
        }
        goto loop_start_1;
        loop_end_1:;
        CHECK_OBJECT( tmp_setcontraction_1__contraction );
        tmp_list_arg_1 = tmp_setcontraction_1__contraction;
        Py_INCREF( tmp_list_arg_1 );
        goto try_return_handler_3;
        // tried codes exits in all cases
        NUITKA_CANNOT_GET_HERE( subprocess$$$function_43__filter_handle_list );
        return NULL;
        // Return handler code:
        try_return_handler_3:;
        CHECK_OBJECT( (PyObject *)tmp_setcontraction_1__$0 );
        Py_DECREF( tmp_setcontraction_1__$0 );
        tmp_setcontraction_1__$0 = NULL;

        CHECK_OBJECT( (PyObject *)tmp_setcontraction_1__contraction );
        Py_DECREF( tmp_setcontraction_1__contraction );
        tmp_setcontraction_1__contraction = NULL;

        Py_XDECREF( tmp_setcontraction_1__iter_value_0 );
        tmp_setcontraction_1__iter_value_0 = NULL;

        goto frame_return_exit_2;
        // Exception handler code:
        try_except_handler_3:;
        exception_keeper_type_1 = exception_type;
        exception_keeper_value_1 = exception_value;
        exception_keeper_tb_1 = exception_tb;
        exception_keeper_lineno_1 = exception_lineno;
        exception_type = NULL;
        exception_value = NULL;
        exception_tb = NULL;
        exception_lineno = 0;

        CHECK_OBJECT( (PyObject *)tmp_setcontraction_1__$0 );
        Py_DECREF( tmp_setcontraction_1__$0 );
        tmp_setcontraction_1__$0 = NULL;

        CHECK_OBJECT( (PyObject *)tmp_setcontraction_1__contraction );
        Py_DECREF( tmp_setcontraction_1__contraction );
        tmp_setcontraction_1__contraction = NULL;

        Py_XDECREF( tmp_setcontraction_1__iter_value_0 );
        tmp_setcontraction_1__iter_value_0 = NULL;

        // Re-raise.
        exception_type = exception_keeper_type_1;
        exception_value = exception_keeper_value_1;
        exception_tb = exception_keeper_tb_1;
        exception_lineno = exception_keeper_lineno_1;

        goto frame_exception_exit_2;
        // End of try:

#if 0
        RESTORE_FRAME_EXCEPTION( frame_8173f38e5b402db35849e9f35fd86a10_2 );
#endif

        // Put the previous frame back on top.
        popFrameStack();

        goto frame_no_exception_1;

        frame_return_exit_2:;
#if 0
        RESTORE_FRAME_EXCEPTION( frame_8173f38e5b402db35849e9f35fd86a10_2 );
#endif

        // Put the previous frame back on top.
        popFrameStack();

        goto try_return_handler_2;

        frame_exception_exit_2:;

#if 0
        RESTORE_FRAME_EXCEPTION( frame_8173f38e5b402db35849e9f35fd86a10_2 );
#endif

        if ( exception_tb == NULL )
        {
            exception_tb = MAKE_TRACEBACK( frame_8173f38e5b402db35849e9f35fd86a10_2, exception_lineno );
        }
        else if ( exception_tb->tb_frame != &frame_8173f38e5b402db35849e9f35fd86a10_2->m_frame )
        {
            exception_tb = ADD_TRACEBACK( exception_tb, frame_8173f38e5b402db35849e9f35fd86a10_2, exception_lineno );
        }

        // Attachs locals to frame if any.
        Nuitka_Frame_AttachLocals(
            (struct Nuitka_FrameObject *)frame_8173f38e5b402db35849e9f35fd86a10_2,
            type_description_2,
            outline_0_var_handle
        );


        // Release cached frame.
        if ( frame_8173f38e5b402db35849e9f35fd86a10_2 == cache_frame_8173f38e5b402db35849e9f35fd86a10_2 )
        {
            Py_DECREF( frame_8173f38e5b402db35849e9f35fd86a10_2 );
        }
        cache_frame_8173f38e5b402db35849e9f35fd86a10_2 = NULL;

        assertFrameObject( frame_8173f38e5b402db35849e9f35fd86a10_2 );

        // Put the previous frame back on top.
        popFrameStack();

        // Return the error.
        goto nested_frame_exit_1;

        frame_no_exception_1:;
        goto skip_nested_handling_1;
        nested_frame_exit_1:;
        type_description_1 = "oo";
        goto try_except_handler_2;
        skip_nested_handling_1:;
        // tried codes exits in all cases
        NUITKA_CANNOT_GET_HERE( subprocess$$$function_43__filter_handle_list );
        return NULL;
        // Return handler code:
        try_return_handler_2:;
        Py_XDECREF( outline_0_var_handle );
        outline_0_var_handle = NULL;

        goto outline_result_1;
        // Exception handler code:
        try_except_handler_2:;
        exception_keeper_type_2 = exception_type;
        exception_keeper_value_2 = exception_value;
        exception_keeper_tb_2 = exception_tb;
        exception_keeper_lineno_2 = exception_lineno;
        exception_type = NULL;
        exception_value = NULL;
        exception_tb = NULL;
        exception_lineno = 0;

        Py_XDECREF( outline_0_var_handle );
        outline_0_var_handle = NULL;

        // Re-raise.
        exception_type = exception_keeper_type_2;
        exception_value = exception_keeper_value_2;
        exception_tb = exception_keeper_tb_2;
        exception_lineno = exception_keeper_lineno_2;

        goto outline_exception_1;
        // End of try:
        // Return statement must have exited already.
        NUITKA_CANNOT_GET_HERE( subprocess$$$function_43__filter_handle_list );
        return NULL;
        outline_exception_1:;
        exception_lineno = 1101;
        goto frame_exception_exit_1;
        outline_result_1:;
        tmp_return_value = PySequence_List( tmp_list_arg_1 );
        Py_DECREF( tmp_list_arg_1 );
        if ( tmp_return_value == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 1101;
            type_description_1 = "oo";
            goto frame_exception_exit_1;
        }
        goto frame_return_exit_1;
    }

#if 0
    RESTORE_FRAME_EXCEPTION( frame_595fbfe0f24c4e1cf92bb35eb23a0fd7 );
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto frame_no_exception_2;

    frame_return_exit_1:;
#if 0
    RESTORE_FRAME_EXCEPTION( frame_595fbfe0f24c4e1cf92bb35eb23a0fd7 );
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto try_return_handler_1;

    frame_exception_exit_1:;

#if 0
    RESTORE_FRAME_EXCEPTION( frame_595fbfe0f24c4e1cf92bb35eb23a0fd7 );
#endif

    if ( exception_tb == NULL )
    {
        exception_tb = MAKE_TRACEBACK( frame_595fbfe0f24c4e1cf92bb35eb23a0fd7, exception_lineno );
    }
    else if ( exception_tb->tb_frame != &frame_595fbfe0f24c4e1cf92bb35eb23a0fd7->m_frame )
    {
        exception_tb = ADD_TRACEBACK( exception_tb, frame_595fbfe0f24c4e1cf92bb35eb23a0fd7, exception_lineno );
    }

    // Attachs locals to frame if any.
    Nuitka_Frame_AttachLocals(
        (struct Nuitka_FrameObject *)frame_595fbfe0f24c4e1cf92bb35eb23a0fd7,
        type_description_1,
        par_self,
        par_handle_list
    );


    // Release cached frame.
    if ( frame_595fbfe0f24c4e1cf92bb35eb23a0fd7 == cache_frame_595fbfe0f24c4e1cf92bb35eb23a0fd7 )
    {
        Py_DECREF( frame_595fbfe0f24c4e1cf92bb35eb23a0fd7 );
    }
    cache_frame_595fbfe0f24c4e1cf92bb35eb23a0fd7 = NULL;

    assertFrameObject( frame_595fbfe0f24c4e1cf92bb35eb23a0fd7 );

    // Put the previous frame back on top.
    popFrameStack();

    // Return the error.
    goto try_except_handler_1;

    frame_no_exception_2:;
    // tried codes exits in all cases
    NUITKA_CANNOT_GET_HERE( subprocess$$$function_43__filter_handle_list );
    return NULL;
    // Return handler code:
    try_return_handler_1:;
    CHECK_OBJECT( (PyObject *)par_self );
    Py_DECREF( par_self );
    par_self = NULL;

    CHECK_OBJECT( (PyObject *)par_handle_list );
    Py_DECREF( par_handle_list );
    par_handle_list = NULL;

    goto function_return_exit;
    // Exception handler code:
    try_except_handler_1:;
    exception_keeper_type_3 = exception_type;
    exception_keeper_value_3 = exception_value;
    exception_keeper_tb_3 = exception_tb;
    exception_keeper_lineno_3 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    CHECK_OBJECT( (PyObject *)par_self );
    Py_DECREF( par_self );
    par_self = NULL;

    CHECK_OBJECT( (PyObject *)par_handle_list );
    Py_DECREF( par_handle_list );
    par_handle_list = NULL;

    // Re-raise.
    exception_type = exception_keeper_type_3;
    exception_value = exception_keeper_value_3;
    exception_tb = exception_keeper_tb_3;
    exception_lineno = exception_keeper_lineno_3;

    goto function_exception_exit;
    // End of try:

    // Return statement must have exited already.
    NUITKA_CANNOT_GET_HERE( subprocess$$$function_43__filter_handle_list );
    return NULL;

function_exception_exit:
    assert( exception_type );
    RESTORE_ERROR_OCCURRED( exception_type, exception_value, exception_tb );

    return NULL;

function_return_exit:
   // Function cleanup code if any.


   // Actual function exit with return value, making sure we did not make
   // the error status worse despite non-NULL return.
   CHECK_OBJECT( tmp_return_value );
   assert( had_error || !ERROR_OCCURRED() );
   return tmp_return_value;
}


static PyObject *impl_subprocess$$$function_44__execute_child( struct Nuitka_FunctionObject const *self, PyObject **python_pars )
{
    // Preserve error status for checks
#ifndef __NUITKA_NO_ASSERT__
    NUITKA_MAY_BE_UNUSED bool had_error = ERROR_OCCURRED();
#endif

    // Local variable declarations.
    PyObject *par_self = python_pars[ 0 ];
    PyObject *par_args = python_pars[ 1 ];
    PyObject *par_executable = python_pars[ 2 ];
    PyObject *par_preexec_fn = python_pars[ 3 ];
    PyObject *par_close_fds = python_pars[ 4 ];
    PyObject *par_pass_fds = python_pars[ 5 ];
    PyObject *par_cwd = python_pars[ 6 ];
    PyObject *par_env = python_pars[ 7 ];
    PyObject *par_startupinfo = python_pars[ 8 ];
    PyObject *par_creationflags = python_pars[ 9 ];
    PyObject *par_shell = python_pars[ 10 ];
    PyObject *par_p2cread = python_pars[ 11 ];
    PyObject *par_p2cwrite = python_pars[ 12 ];
    PyObject *par_c2pread = python_pars[ 13 ];
    PyObject *par_c2pwrite = python_pars[ 14 ];
    PyObject *par_errread = python_pars[ 15 ];
    PyObject *par_errwrite = python_pars[ 16 ];
    PyObject *par_unused_restore_signals = python_pars[ 17 ];
    PyObject *par_unused_start_new_session = python_pars[ 18 ];
    nuitka_bool var_use_std_handles = NUITKA_BOOL_UNASSIGNED;
    PyObject *var_attribute_list = NULL;
    nuitka_bool var_have_handle_list = NUITKA_BOOL_UNASSIGNED;
    PyObject *var_handle_list = NULL;
    PyObject *var_comspec = NULL;
    PyObject *var_hp = NULL;
    PyObject *var_ht = NULL;
    PyObject *var_pid = NULL;
    PyObject *var_tid = NULL;
    PyObject *tmp_assign_unpack_1__assign_source = NULL;
    PyObject *tmp_assign_unpack_2__assign_source = NULL;
    PyObject *tmp_inplace_assign_attr_1__end = NULL;
    PyObject *tmp_inplace_assign_attr_1__start = NULL;
    PyObject *tmp_inplace_assign_attr_2__end = NULL;
    PyObject *tmp_inplace_assign_attr_2__start = NULL;
    PyObject *tmp_tuple_unpack_1__element_1 = NULL;
    PyObject *tmp_tuple_unpack_1__element_2 = NULL;
    PyObject *tmp_tuple_unpack_1__element_3 = NULL;
    PyObject *tmp_tuple_unpack_1__element_4 = NULL;
    PyObject *tmp_tuple_unpack_1__source_iter = NULL;
    struct Nuitka_FrameObject *frame_3e8d1a1c7da302cd9107f80bea120660;
    NUITKA_MAY_BE_UNUSED char const *type_description_1 = NULL;
    int tmp_res;
    PyObject *exception_type = NULL;
    PyObject *exception_value = NULL;
    PyTracebackObject *exception_tb = NULL;
    NUITKA_MAY_BE_UNUSED int exception_lineno = 0;
    bool tmp_result;
    PyObject *exception_keeper_type_1;
    PyObject *exception_keeper_value_1;
    PyTracebackObject *exception_keeper_tb_1;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_1;
    PyObject *exception_keeper_type_2;
    PyObject *exception_keeper_value_2;
    PyTracebackObject *exception_keeper_tb_2;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_2;
    PyObject *exception_keeper_type_3;
    PyObject *exception_keeper_value_3;
    PyTracebackObject *exception_keeper_tb_3;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_3;
    PyObject *exception_keeper_type_4;
    PyObject *exception_keeper_value_4;
    PyTracebackObject *exception_keeper_tb_4;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_4;
    PyObject *exception_keeper_type_5;
    PyObject *exception_keeper_value_5;
    PyTracebackObject *exception_keeper_tb_5;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_5;
    PyObject *exception_keeper_type_6;
    PyObject *exception_keeper_value_6;
    PyTracebackObject *exception_keeper_tb_6;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_6;
    PyObject *tmp_iterator_attempt;
    PyObject *exception_keeper_type_7;
    PyObject *exception_keeper_value_7;
    PyTracebackObject *exception_keeper_tb_7;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_7;
    PyObject *exception_keeper_type_8;
    PyObject *exception_keeper_value_8;
    PyTracebackObject *exception_keeper_tb_8;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_8;
    PyObject *exception_keeper_type_9;
    PyObject *exception_keeper_value_9;
    PyTracebackObject *exception_keeper_tb_9;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_9;
    PyObject *exception_preserved_type_1;
    PyObject *exception_preserved_value_1;
    PyTracebackObject *exception_preserved_tb_1;
    PyObject *exception_keeper_type_10;
    PyObject *exception_keeper_value_10;
    PyTracebackObject *exception_keeper_tb_10;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_10;
    static struct Nuitka_FrameObject *cache_frame_3e8d1a1c7da302cd9107f80bea120660 = NULL;
    PyObject *tmp_return_value = NULL;
    PyObject *exception_keeper_type_11;
    PyObject *exception_keeper_value_11;
    PyTracebackObject *exception_keeper_tb_11;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_11;

    // Actual function body.
    // Tried code:
    MAKE_OR_REUSE_FRAME( cache_frame_3e8d1a1c7da302cd9107f80bea120660, codeobj_3e8d1a1c7da302cd9107f80bea120660, module_subprocess, sizeof(nuitka_bool)+sizeof(nuitka_bool)+sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *) );
    frame_3e8d1a1c7da302cd9107f80bea120660 = cache_frame_3e8d1a1c7da302cd9107f80bea120660;

    // Push the new frame as the currently active one.
    pushFrameStack( frame_3e8d1a1c7da302cd9107f80bea120660 );

    // Mark the frame object as in use, ref count 1 will be up for reuse.
    assert( Py_REFCNT( frame_3e8d1a1c7da302cd9107f80bea120660 ) == 2 ); // Frame stack

    // Framed code:
    {
        nuitka_bool tmp_condition_result_1;
        PyObject *tmp_operand_name_1;
        PyObject *tmp_operand_name_2;
        CHECK_OBJECT( par_pass_fds );
        tmp_operand_name_2 = par_pass_fds;
        tmp_res = CHECK_IF_TRUE( tmp_operand_name_2 );
        if ( tmp_res == -1 )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 1116;
            type_description_1 = "oooooooooooooooooooboboooooo";
            goto frame_exception_exit_1;
        }
        tmp_operand_name_1 = ( tmp_res == 0 ) ? Py_True : Py_False;
        tmp_res = CHECK_IF_TRUE( tmp_operand_name_1 );
        if ( tmp_res == -1 )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 1116;
            type_description_1 = "oooooooooooooooooooboboooooo";
            goto frame_exception_exit_1;
        }
        tmp_condition_result_1 = ( tmp_res == 0 ) ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
        if ( tmp_condition_result_1 == NUITKA_BOOL_TRUE )
        {
            goto branch_yes_1;
        }
        else
        {
            goto branch_no_1;
        }
        branch_yes_1:;
        {
            PyObject *tmp_raise_type_1;
            PyObject *tmp_raise_value_1;
            tmp_raise_type_1 = PyExc_AssertionError;
            tmp_raise_value_1 = const_tuple_str_digest_9b7f493a6ae9d7d25f0b01787918ea86_tuple;
            exception_type = tmp_raise_type_1;
            Py_INCREF( tmp_raise_type_1 );
            exception_value = tmp_raise_value_1;
            Py_INCREF( tmp_raise_value_1 );
            exception_lineno = 1116;
            RAISE_EXCEPTION_WITH_VALUE( &exception_type, &exception_value, &exception_tb );
            type_description_1 = "oooooooooooooooooooboboooooo";
            goto frame_exception_exit_1;
        }
        branch_no_1:;
    }
    {
        nuitka_bool tmp_condition_result_2;
        PyObject *tmp_operand_name_3;
        PyObject *tmp_isinstance_inst_1;
        PyObject *tmp_isinstance_cls_1;
        CHECK_OBJECT( par_args );
        tmp_isinstance_inst_1 = par_args;
        tmp_isinstance_cls_1 = (PyObject *)&PyUnicode_Type;
        tmp_res = Nuitka_IsInstance( tmp_isinstance_inst_1, tmp_isinstance_cls_1 );
        if ( tmp_res == -1 )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 1118;
            type_description_1 = "oooooooooooooooooooboboooooo";
            goto frame_exception_exit_1;
        }
        tmp_operand_name_3 = ( tmp_res != 0 ) ? Py_True : Py_False;
        tmp_res = CHECK_IF_TRUE( tmp_operand_name_3 );
        if ( tmp_res == -1 )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 1118;
            type_description_1 = "oooooooooooooooooooboboooooo";
            goto frame_exception_exit_1;
        }
        tmp_condition_result_2 = ( tmp_res == 0 ) ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
        if ( tmp_condition_result_2 == NUITKA_BOOL_TRUE )
        {
            goto branch_yes_2;
        }
        else
        {
            goto branch_no_2;
        }
        branch_yes_2:;
        {
            PyObject *tmp_assign_source_1;
            PyObject *tmp_called_name_1;
            PyObject *tmp_mvar_value_1;
            PyObject *tmp_args_element_name_1;
            tmp_mvar_value_1 = GET_STRING_DICT_VALUE( moduledict_subprocess, (Nuitka_StringObject *)const_str_plain_list2cmdline );

            if (unlikely( tmp_mvar_value_1 == NULL ))
            {
                tmp_mvar_value_1 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_list2cmdline );
            }

            if ( tmp_mvar_value_1 == NULL )
            {

                exception_type = PyExc_NameError;
                Py_INCREF( exception_type );
                exception_value = PyUnicode_FromFormat( "name '%s' is not defined", "list2cmdline" );
                exception_tb = NULL;
                NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
                CHAIN_EXCEPTION( exception_value );

                exception_lineno = 1119;
                type_description_1 = "oooooooooooooooooooboboooooo";
                goto frame_exception_exit_1;
            }

            tmp_called_name_1 = tmp_mvar_value_1;
            CHECK_OBJECT( par_args );
            tmp_args_element_name_1 = par_args;
            frame_3e8d1a1c7da302cd9107f80bea120660->m_frame.f_lineno = 1119;
            {
                PyObject *call_args[] = { tmp_args_element_name_1 };
                tmp_assign_source_1 = CALL_FUNCTION_WITH_ARGS1( tmp_called_name_1, call_args );
            }

            if ( tmp_assign_source_1 == NULL )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 1119;
                type_description_1 = "oooooooooooooooooooboboooooo";
                goto frame_exception_exit_1;
            }
            {
                PyObject *old = par_args;
                assert( old != NULL );
                par_args = tmp_assign_source_1;
                Py_DECREF( old );
            }

        }
        branch_no_2:;
    }
    {
        nuitka_bool tmp_condition_result_3;
        PyObject *tmp_compexpr_left_1;
        PyObject *tmp_compexpr_right_1;
        CHECK_OBJECT( par_startupinfo );
        tmp_compexpr_left_1 = par_startupinfo;
        tmp_compexpr_right_1 = Py_None;
        tmp_condition_result_3 = ( tmp_compexpr_left_1 == tmp_compexpr_right_1 ) ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
        if ( tmp_condition_result_3 == NUITKA_BOOL_TRUE )
        {
            goto branch_yes_3;
        }
        else
        {
            goto branch_no_3;
        }
        branch_yes_3:;
        {
            PyObject *tmp_assign_source_2;
            PyObject *tmp_called_name_2;
            PyObject *tmp_mvar_value_2;
            tmp_mvar_value_2 = GET_STRING_DICT_VALUE( moduledict_subprocess, (Nuitka_StringObject *)const_str_plain_STARTUPINFO );

            if (unlikely( tmp_mvar_value_2 == NULL ))
            {
                tmp_mvar_value_2 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_STARTUPINFO );
            }

            if ( tmp_mvar_value_2 == NULL )
            {

                exception_type = PyExc_NameError;
                Py_INCREF( exception_type );
                exception_value = PyUnicode_FromFormat( "name '%s' is not defined", "STARTUPINFO" );
                exception_tb = NULL;
                NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
                CHAIN_EXCEPTION( exception_value );

                exception_lineno = 1123;
                type_description_1 = "oooooooooooooooooooboboooooo";
                goto frame_exception_exit_1;
            }

            tmp_called_name_2 = tmp_mvar_value_2;
            frame_3e8d1a1c7da302cd9107f80bea120660->m_frame.f_lineno = 1123;
            tmp_assign_source_2 = CALL_FUNCTION_NO_ARGS( tmp_called_name_2 );
            if ( tmp_assign_source_2 == NULL )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 1123;
                type_description_1 = "oooooooooooooooooooboboooooo";
                goto frame_exception_exit_1;
            }
            {
                PyObject *old = par_startupinfo;
                assert( old != NULL );
                par_startupinfo = tmp_assign_source_2;
                Py_DECREF( old );
            }

        }
        goto branch_end_3;
        branch_no_3:;
        {
            PyObject *tmp_assign_source_3;
            PyObject *tmp_called_instance_1;
            CHECK_OBJECT( par_startupinfo );
            tmp_called_instance_1 = par_startupinfo;
            frame_3e8d1a1c7da302cd9107f80bea120660->m_frame.f_lineno = 1127;
            tmp_assign_source_3 = CALL_METHOD_NO_ARGS( tmp_called_instance_1, const_str_plain__copy );
            if ( tmp_assign_source_3 == NULL )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 1127;
                type_description_1 = "oooooooooooooooooooboboooooo";
                goto frame_exception_exit_1;
            }
            {
                PyObject *old = par_startupinfo;
                assert( old != NULL );
                par_startupinfo = tmp_assign_source_3;
                Py_DECREF( old );
            }

        }
        branch_end_3:;
    }
    {
        nuitka_bool tmp_assign_source_4;
        PyObject *tmp_compexpr_left_2;
        PyObject *tmp_compexpr_right_2;
        PyObject *tmp_tuple_element_1;
        tmp_compexpr_left_2 = const_int_neg_1;
        CHECK_OBJECT( par_p2cread );
        tmp_tuple_element_1 = par_p2cread;
        tmp_compexpr_right_2 = PyTuple_New( 3 );
        Py_INCREF( tmp_tuple_element_1 );
        PyTuple_SET_ITEM( tmp_compexpr_right_2, 0, tmp_tuple_element_1 );
        CHECK_OBJECT( par_c2pwrite );
        tmp_tuple_element_1 = par_c2pwrite;
        Py_INCREF( tmp_tuple_element_1 );
        PyTuple_SET_ITEM( tmp_compexpr_right_2, 1, tmp_tuple_element_1 );
        CHECK_OBJECT( par_errwrite );
        tmp_tuple_element_1 = par_errwrite;
        Py_INCREF( tmp_tuple_element_1 );
        PyTuple_SET_ITEM( tmp_compexpr_right_2, 2, tmp_tuple_element_1 );
        tmp_res = PySequence_Contains( tmp_compexpr_right_2, tmp_compexpr_left_2 );
        Py_DECREF( tmp_compexpr_right_2 );
        if ( tmp_res == -1 )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 1129;
            type_description_1 = "oooooooooooooooooooboboooooo";
            goto frame_exception_exit_1;
        }
        tmp_assign_source_4 = ( tmp_res == 0 ) ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
        var_use_std_handles = tmp_assign_source_4;
    }
    {
        nuitka_bool tmp_condition_result_4;
        assert( var_use_std_handles != NUITKA_BOOL_UNASSIGNED);
        tmp_condition_result_4 = var_use_std_handles;
        if ( tmp_condition_result_4 == NUITKA_BOOL_TRUE )
        {
            goto branch_yes_4;
        }
        else
        {
            goto branch_no_4;
        }
        branch_yes_4:;
        {
            PyObject *tmp_assign_source_5;
            PyObject *tmp_source_name_1;
            CHECK_OBJECT( par_startupinfo );
            tmp_source_name_1 = par_startupinfo;
            tmp_assign_source_5 = LOOKUP_ATTRIBUTE( tmp_source_name_1, const_str_plain_dwFlags );
            if ( tmp_assign_source_5 == NULL )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 1131;
                type_description_1 = "oooooooooooooooooooboboooooo";
                goto frame_exception_exit_1;
            }
            assert( tmp_inplace_assign_attr_1__start == NULL );
            tmp_inplace_assign_attr_1__start = tmp_assign_source_5;
        }
        // Tried code:
        {
            PyObject *tmp_assign_source_6;
            PyObject *tmp_left_name_1;
            PyObject *tmp_right_name_1;
            PyObject *tmp_source_name_2;
            PyObject *tmp_mvar_value_3;
            CHECK_OBJECT( tmp_inplace_assign_attr_1__start );
            tmp_left_name_1 = tmp_inplace_assign_attr_1__start;
            tmp_mvar_value_3 = GET_STRING_DICT_VALUE( moduledict_subprocess, (Nuitka_StringObject *)const_str_plain__winapi );

            if (unlikely( tmp_mvar_value_3 == NULL ))
            {
                tmp_mvar_value_3 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain__winapi );
            }

            if ( tmp_mvar_value_3 == NULL )
            {

                exception_type = PyExc_NameError;
                Py_INCREF( exception_type );
                exception_value = PyUnicode_FromFormat( "name '%s' is not defined", "_winapi" );
                exception_tb = NULL;
                NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
                CHAIN_EXCEPTION( exception_value );

                exception_lineno = 1131;
                type_description_1 = "oooooooooooooooooooboboooooo";
                goto try_except_handler_2;
            }

            tmp_source_name_2 = tmp_mvar_value_3;
            tmp_right_name_1 = LOOKUP_ATTRIBUTE( tmp_source_name_2, const_str_plain_STARTF_USESTDHANDLES );
            if ( tmp_right_name_1 == NULL )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 1131;
                type_description_1 = "oooooooooooooooooooboboooooo";
                goto try_except_handler_2;
            }
            tmp_assign_source_6 = BINARY_OPERATION( PyNumber_InPlaceOr, tmp_left_name_1, tmp_right_name_1 );
            Py_DECREF( tmp_right_name_1 );
            if ( tmp_assign_source_6 == NULL )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 1131;
                type_description_1 = "oooooooooooooooooooboboooooo";
                goto try_except_handler_2;
            }
            assert( tmp_inplace_assign_attr_1__end == NULL );
            tmp_inplace_assign_attr_1__end = tmp_assign_source_6;
        }
        // Tried code:
        {
            PyObject *tmp_assattr_name_1;
            PyObject *tmp_assattr_target_1;
            CHECK_OBJECT( tmp_inplace_assign_attr_1__end );
            tmp_assattr_name_1 = tmp_inplace_assign_attr_1__end;
            CHECK_OBJECT( par_startupinfo );
            tmp_assattr_target_1 = par_startupinfo;
            tmp_result = SET_ATTRIBUTE( tmp_assattr_target_1, const_str_plain_dwFlags, tmp_assattr_name_1 );
            if ( tmp_result == false )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 1131;
                type_description_1 = "oooooooooooooooooooboboooooo";
                goto try_except_handler_3;
            }
        }
        goto try_end_1;
        // Exception handler code:
        try_except_handler_3:;
        exception_keeper_type_1 = exception_type;
        exception_keeper_value_1 = exception_value;
        exception_keeper_tb_1 = exception_tb;
        exception_keeper_lineno_1 = exception_lineno;
        exception_type = NULL;
        exception_value = NULL;
        exception_tb = NULL;
        exception_lineno = 0;

        CHECK_OBJECT( (PyObject *)tmp_inplace_assign_attr_1__end );
        Py_DECREF( tmp_inplace_assign_attr_1__end );
        tmp_inplace_assign_attr_1__end = NULL;

        // Re-raise.
        exception_type = exception_keeper_type_1;
        exception_value = exception_keeper_value_1;
        exception_tb = exception_keeper_tb_1;
        exception_lineno = exception_keeper_lineno_1;

        goto try_except_handler_2;
        // End of try:
        try_end_1:;
        goto try_end_2;
        // Exception handler code:
        try_except_handler_2:;
        exception_keeper_type_2 = exception_type;
        exception_keeper_value_2 = exception_value;
        exception_keeper_tb_2 = exception_tb;
        exception_keeper_lineno_2 = exception_lineno;
        exception_type = NULL;
        exception_value = NULL;
        exception_tb = NULL;
        exception_lineno = 0;

        CHECK_OBJECT( (PyObject *)tmp_inplace_assign_attr_1__start );
        Py_DECREF( tmp_inplace_assign_attr_1__start );
        tmp_inplace_assign_attr_1__start = NULL;

        // Re-raise.
        exception_type = exception_keeper_type_2;
        exception_value = exception_keeper_value_2;
        exception_tb = exception_keeper_tb_2;
        exception_lineno = exception_keeper_lineno_2;

        goto frame_exception_exit_1;
        // End of try:
        try_end_2:;
        CHECK_OBJECT( (PyObject *)tmp_inplace_assign_attr_1__end );
        Py_DECREF( tmp_inplace_assign_attr_1__end );
        tmp_inplace_assign_attr_1__end = NULL;

        CHECK_OBJECT( (PyObject *)tmp_inplace_assign_attr_1__start );
        Py_DECREF( tmp_inplace_assign_attr_1__start );
        tmp_inplace_assign_attr_1__start = NULL;

        {
            PyObject *tmp_assattr_name_2;
            PyObject *tmp_assattr_target_2;
            CHECK_OBJECT( par_p2cread );
            tmp_assattr_name_2 = par_p2cread;
            CHECK_OBJECT( par_startupinfo );
            tmp_assattr_target_2 = par_startupinfo;
            tmp_result = SET_ATTRIBUTE( tmp_assattr_target_2, const_str_plain_hStdInput, tmp_assattr_name_2 );
            if ( tmp_result == false )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 1132;
                type_description_1 = "oooooooooooooooooooboboooooo";
                goto frame_exception_exit_1;
            }
        }
        {
            PyObject *tmp_assattr_name_3;
            PyObject *tmp_assattr_target_3;
            CHECK_OBJECT( par_c2pwrite );
            tmp_assattr_name_3 = par_c2pwrite;
            CHECK_OBJECT( par_startupinfo );
            tmp_assattr_target_3 = par_startupinfo;
            tmp_result = SET_ATTRIBUTE( tmp_assattr_target_3, const_str_plain_hStdOutput, tmp_assattr_name_3 );
            if ( tmp_result == false )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 1133;
                type_description_1 = "oooooooooooooooooooboboooooo";
                goto frame_exception_exit_1;
            }
        }
        {
            PyObject *tmp_assattr_name_4;
            PyObject *tmp_assattr_target_4;
            CHECK_OBJECT( par_errwrite );
            tmp_assattr_name_4 = par_errwrite;
            CHECK_OBJECT( par_startupinfo );
            tmp_assattr_target_4 = par_startupinfo;
            tmp_result = SET_ATTRIBUTE( tmp_assattr_target_4, const_str_plain_hStdError, tmp_assattr_name_4 );
            if ( tmp_result == false )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 1134;
                type_description_1 = "oooooooooooooooooooboboooooo";
                goto frame_exception_exit_1;
            }
        }
        branch_no_4:;
    }
    {
        PyObject *tmp_assign_source_7;
        PyObject *tmp_source_name_3;
        CHECK_OBJECT( par_startupinfo );
        tmp_source_name_3 = par_startupinfo;
        tmp_assign_source_7 = LOOKUP_ATTRIBUTE( tmp_source_name_3, const_str_plain_lpAttributeList );
        if ( tmp_assign_source_7 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 1136;
            type_description_1 = "oooooooooooooooooooboboooooo";
            goto frame_exception_exit_1;
        }
        assert( var_attribute_list == NULL );
        var_attribute_list = tmp_assign_source_7;
    }
    {
        nuitka_bool tmp_assign_source_8;
        PyObject *tmp_value_name_1;
        int tmp_and_left_truth_1;
        PyObject *tmp_and_left_value_1;
        PyObject *tmp_and_right_value_1;
        int tmp_and_left_truth_2;
        PyObject *tmp_and_left_value_2;
        PyObject *tmp_and_right_value_2;
        PyObject *tmp_compexpr_left_3;
        PyObject *tmp_compexpr_right_3;
        PyObject *tmp_subscribed_name_1;
        PyObject *tmp_subscript_name_1;
        CHECK_OBJECT( var_attribute_list );
        tmp_and_left_value_1 = var_attribute_list;
        tmp_and_left_truth_1 = CHECK_IF_TRUE( tmp_and_left_value_1 );
        if ( tmp_and_left_truth_1 == -1 )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 1139;
            type_description_1 = "oooooooooooooooooooboboooooo";
            goto frame_exception_exit_1;
        }
        if ( tmp_and_left_truth_1 == 1 )
        {
            goto and_right_1;
        }
        else
        {
            goto and_left_1;
        }
        and_right_1:;
        tmp_compexpr_left_3 = const_str_plain_handle_list;
        CHECK_OBJECT( var_attribute_list );
        tmp_compexpr_right_3 = var_attribute_list;
        tmp_res = PySequence_Contains( tmp_compexpr_right_3, tmp_compexpr_left_3 );
        if ( tmp_res == -1 )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 1138;
            type_description_1 = "oooooooooooooooooooboboooooo";
            goto frame_exception_exit_1;
        }
        tmp_and_left_value_2 = ( tmp_res == 1 ) ? Py_True : Py_False;
        tmp_and_left_truth_2 = CHECK_IF_TRUE( tmp_and_left_value_2 );
        if ( tmp_and_left_truth_2 == 1 )
        {
            goto and_right_2;
        }
        else
        {
            goto and_left_2;
        }
        and_right_2:;
        CHECK_OBJECT( var_attribute_list );
        tmp_subscribed_name_1 = var_attribute_list;
        tmp_subscript_name_1 = const_str_plain_handle_list;
        tmp_and_right_value_2 = LOOKUP_SUBSCRIPT( tmp_subscribed_name_1, tmp_subscript_name_1 );
        if ( tmp_and_right_value_2 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 1139;
            type_description_1 = "oooooooooooooooooooboboooooo";
            goto frame_exception_exit_1;
        }
        tmp_and_right_value_1 = tmp_and_right_value_2;
        goto and_end_2;
        and_left_2:;
        Py_INCREF( tmp_and_left_value_2 );
        tmp_and_right_value_1 = tmp_and_left_value_2;
        and_end_2:;
        tmp_value_name_1 = tmp_and_right_value_1;
        goto and_end_1;
        and_left_1:;
        Py_INCREF( tmp_and_left_value_1 );
        tmp_value_name_1 = tmp_and_left_value_1;
        and_end_1:;
        tmp_res = CHECK_IF_TRUE( tmp_value_name_1 );
        Py_DECREF( tmp_value_name_1 );
        if ( tmp_res == -1 )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 1137;
            type_description_1 = "oooooooooooooooooooboboooooo";
            goto frame_exception_exit_1;
        }
        tmp_assign_source_8 = ( tmp_res != 0 ) ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
        var_have_handle_list = tmp_assign_source_8;
    }
    {
        nuitka_bool tmp_condition_result_5;
        int tmp_or_left_truth_1;
        nuitka_bool tmp_or_left_value_1;
        nuitka_bool tmp_or_right_value_1;
        int tmp_and_left_truth_3;
        nuitka_bool tmp_and_left_value_3;
        nuitka_bool tmp_and_right_value_3;
        int tmp_truth_name_1;
        assert( var_have_handle_list != NUITKA_BOOL_UNASSIGNED);
        tmp_or_left_value_1 = var_have_handle_list;
        tmp_or_left_truth_1 = tmp_or_left_value_1 == NUITKA_BOOL_TRUE ? 1 : 0;
        if ( tmp_or_left_truth_1 == 1 )
        {
            goto or_left_1;
        }
        else
        {
            goto or_right_1;
        }
        or_right_1:;
        assert( var_use_std_handles != NUITKA_BOOL_UNASSIGNED);
        tmp_and_left_value_3 = var_use_std_handles;
        tmp_and_left_truth_3 = tmp_and_left_value_3 == NUITKA_BOOL_TRUE ? 1 : 0;
        if ( tmp_and_left_truth_3 == 1 )
        {
            goto and_right_3;
        }
        else
        {
            goto and_left_3;
        }
        and_right_3:;
        CHECK_OBJECT( par_close_fds );
        tmp_truth_name_1 = CHECK_IF_TRUE( par_close_fds );
        if ( tmp_truth_name_1 == -1 )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 1142;
            type_description_1 = "oooooooooooooooooooboboooooo";
            goto frame_exception_exit_1;
        }
        tmp_and_right_value_3 = tmp_truth_name_1 == 1 ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
        tmp_or_right_value_1 = tmp_and_right_value_3;
        goto and_end_3;
        and_left_3:;
        tmp_or_right_value_1 = tmp_and_left_value_3;
        and_end_3:;
        tmp_condition_result_5 = tmp_or_right_value_1;
        goto or_end_1;
        or_left_1:;
        tmp_condition_result_5 = tmp_or_left_value_1;
        or_end_1:;
        if ( tmp_condition_result_5 == NUITKA_BOOL_TRUE )
        {
            goto branch_yes_5;
        }
        else
        {
            goto branch_no_5;
        }
        branch_yes_5:;
        {
            nuitka_bool tmp_condition_result_6;
            PyObject *tmp_compexpr_left_4;
            PyObject *tmp_compexpr_right_4;
            CHECK_OBJECT( var_attribute_list );
            tmp_compexpr_left_4 = var_attribute_list;
            tmp_compexpr_right_4 = Py_None;
            tmp_condition_result_6 = ( tmp_compexpr_left_4 == tmp_compexpr_right_4 ) ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
            if ( tmp_condition_result_6 == NUITKA_BOOL_TRUE )
            {
                goto branch_yes_6;
            }
            else
            {
                goto branch_no_6;
            }
            branch_yes_6:;
            {
                PyObject *tmp_assign_source_9;
                tmp_assign_source_9 = PyDict_New();
                assert( tmp_assign_unpack_1__assign_source == NULL );
                tmp_assign_unpack_1__assign_source = tmp_assign_source_9;
            }
            {
                PyObject *tmp_assign_source_10;
                CHECK_OBJECT( tmp_assign_unpack_1__assign_source );
                tmp_assign_source_10 = tmp_assign_unpack_1__assign_source;
                {
                    PyObject *old = var_attribute_list;
                    assert( old != NULL );
                    var_attribute_list = tmp_assign_source_10;
                    Py_INCREF( var_attribute_list );
                    Py_DECREF( old );
                }

            }
            // Tried code:
            {
                PyObject *tmp_assattr_name_5;
                PyObject *tmp_assattr_target_5;
                CHECK_OBJECT( tmp_assign_unpack_1__assign_source );
                tmp_assattr_name_5 = tmp_assign_unpack_1__assign_source;
                CHECK_OBJECT( par_startupinfo );
                tmp_assattr_target_5 = par_startupinfo;
                tmp_result = SET_ATTRIBUTE( tmp_assattr_target_5, const_str_plain_lpAttributeList, tmp_assattr_name_5 );
                if ( tmp_result == false )
                {
                    assert( ERROR_OCCURRED() );

                    FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                    exception_lineno = 1144;
                    type_description_1 = "oooooooooooooooooooboboooooo";
                    goto try_except_handler_4;
                }
            }
            goto try_end_3;
            // Exception handler code:
            try_except_handler_4:;
            exception_keeper_type_3 = exception_type;
            exception_keeper_value_3 = exception_value;
            exception_keeper_tb_3 = exception_tb;
            exception_keeper_lineno_3 = exception_lineno;
            exception_type = NULL;
            exception_value = NULL;
            exception_tb = NULL;
            exception_lineno = 0;

            CHECK_OBJECT( (PyObject *)tmp_assign_unpack_1__assign_source );
            Py_DECREF( tmp_assign_unpack_1__assign_source );
            tmp_assign_unpack_1__assign_source = NULL;

            // Re-raise.
            exception_type = exception_keeper_type_3;
            exception_value = exception_keeper_value_3;
            exception_tb = exception_keeper_tb_3;
            exception_lineno = exception_keeper_lineno_3;

            goto frame_exception_exit_1;
            // End of try:
            try_end_3:;
            CHECK_OBJECT( (PyObject *)tmp_assign_unpack_1__assign_source );
            Py_DECREF( tmp_assign_unpack_1__assign_source );
            tmp_assign_unpack_1__assign_source = NULL;

            branch_no_6:;
        }
        // Tried code:
        {
            PyObject *tmp_assign_source_11;
            PyObject *tmp_list_arg_1;
            PyObject *tmp_called_instance_2;
            PyObject *tmp_call_arg_element_1;
            PyObject *tmp_call_arg_element_2;
            CHECK_OBJECT( var_attribute_list );
            tmp_called_instance_2 = var_attribute_list;
            tmp_call_arg_element_1 = const_str_plain_handle_list;
            tmp_call_arg_element_2 = PyList_New( 0 );
            frame_3e8d1a1c7da302cd9107f80bea120660->m_frame.f_lineno = 1146;
            {
                PyObject *call_args[] = { tmp_call_arg_element_1, tmp_call_arg_element_2 };
                tmp_list_arg_1 = CALL_METHOD_WITH_ARGS2( tmp_called_instance_2, const_str_plain_get, call_args );
            }

            Py_DECREF( tmp_call_arg_element_2 );
            if ( tmp_list_arg_1 == NULL )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 1146;
                type_description_1 = "oooooooooooooooooooboboooooo";
                goto try_except_handler_5;
            }
            tmp_assign_source_11 = PySequence_List( tmp_list_arg_1 );
            Py_DECREF( tmp_list_arg_1 );
            if ( tmp_assign_source_11 == NULL )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 1146;
                type_description_1 = "oooooooooooooooooooboboooooo";
                goto try_except_handler_5;
            }
            assert( tmp_assign_unpack_2__assign_source == NULL );
            tmp_assign_unpack_2__assign_source = tmp_assign_source_11;
        }
        {
            PyObject *tmp_assign_source_12;
            CHECK_OBJECT( tmp_assign_unpack_2__assign_source );
            tmp_assign_source_12 = tmp_assign_unpack_2__assign_source;
            assert( var_handle_list == NULL );
            Py_INCREF( tmp_assign_source_12 );
            var_handle_list = tmp_assign_source_12;
        }
        {
            PyObject *tmp_ass_subvalue_1;
            PyObject *tmp_ass_subscribed_1;
            PyObject *tmp_ass_subscript_1;
            CHECK_OBJECT( tmp_assign_unpack_2__assign_source );
            tmp_ass_subvalue_1 = tmp_assign_unpack_2__assign_source;
            CHECK_OBJECT( var_attribute_list );
            tmp_ass_subscribed_1 = var_attribute_list;
            tmp_ass_subscript_1 = const_str_plain_handle_list;
            tmp_result = SET_SUBSCRIPT( tmp_ass_subscribed_1, tmp_ass_subscript_1, tmp_ass_subvalue_1 );
            if ( tmp_result == false )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 1145;
                type_description_1 = "oooooooooooooooooooboboooooo";
                goto try_except_handler_5;
            }
        }
        goto try_end_4;
        // Exception handler code:
        try_except_handler_5:;
        exception_keeper_type_4 = exception_type;
        exception_keeper_value_4 = exception_value;
        exception_keeper_tb_4 = exception_tb;
        exception_keeper_lineno_4 = exception_lineno;
        exception_type = NULL;
        exception_value = NULL;
        exception_tb = NULL;
        exception_lineno = 0;

        Py_XDECREF( tmp_assign_unpack_2__assign_source );
        tmp_assign_unpack_2__assign_source = NULL;

        // Re-raise.
        exception_type = exception_keeper_type_4;
        exception_value = exception_keeper_value_4;
        exception_tb = exception_keeper_tb_4;
        exception_lineno = exception_keeper_lineno_4;

        goto frame_exception_exit_1;
        // End of try:
        try_end_4:;
        CHECK_OBJECT( (PyObject *)tmp_assign_unpack_2__assign_source );
        Py_DECREF( tmp_assign_unpack_2__assign_source );
        tmp_assign_unpack_2__assign_source = NULL;

        {
            nuitka_bool tmp_condition_result_7;
            assert( var_use_std_handles != NUITKA_BOOL_UNASSIGNED);
            tmp_condition_result_7 = var_use_std_handles;
            if ( tmp_condition_result_7 == NUITKA_BOOL_TRUE )
            {
                goto branch_yes_7;
            }
            else
            {
                goto branch_no_7;
            }
            branch_yes_7:;
            {
                PyObject *tmp_assign_source_13;
                PyObject *tmp_left_name_2;
                PyObject *tmp_right_name_2;
                PyObject *tmp_list_element_1;
                PyObject *tmp_int_arg_1;
                PyObject *tmp_int_arg_2;
                PyObject *tmp_int_arg_3;
                CHECK_OBJECT( var_handle_list );
                tmp_left_name_2 = var_handle_list;
                CHECK_OBJECT( par_p2cread );
                tmp_int_arg_1 = par_p2cread;
                tmp_list_element_1 = PyNumber_Int( tmp_int_arg_1 );
                if ( tmp_list_element_1 == NULL )
                {
                    assert( ERROR_OCCURRED() );

                    FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                    exception_lineno = 1149;
                    type_description_1 = "oooooooooooooooooooboboooooo";
                    goto frame_exception_exit_1;
                }
                tmp_right_name_2 = PyList_New( 3 );
                PyList_SET_ITEM( tmp_right_name_2, 0, tmp_list_element_1 );
                CHECK_OBJECT( par_c2pwrite );
                tmp_int_arg_2 = par_c2pwrite;
                tmp_list_element_1 = PyNumber_Int( tmp_int_arg_2 );
                if ( tmp_list_element_1 == NULL )
                {
                    assert( ERROR_OCCURRED() );

                    FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
                    Py_DECREF( tmp_right_name_2 );

                    exception_lineno = 1149;
                    type_description_1 = "oooooooooooooooooooboboooooo";
                    goto frame_exception_exit_1;
                }
                PyList_SET_ITEM( tmp_right_name_2, 1, tmp_list_element_1 );
                CHECK_OBJECT( par_errwrite );
                tmp_int_arg_3 = par_errwrite;
                tmp_list_element_1 = PyNumber_Int( tmp_int_arg_3 );
                if ( tmp_list_element_1 == NULL )
                {
                    assert( ERROR_OCCURRED() );

                    FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
                    Py_DECREF( tmp_right_name_2 );

                    exception_lineno = 1149;
                    type_description_1 = "oooooooooooooooooooboboooooo";
                    goto frame_exception_exit_1;
                }
                PyList_SET_ITEM( tmp_right_name_2, 2, tmp_list_element_1 );
                tmp_result = BINARY_OPERATION_ADD_OBJECT_LIST_INPLACE( &tmp_left_name_2, tmp_right_name_2 );
                Py_DECREF( tmp_right_name_2 );
                if ( tmp_result == false )
                {
                    assert( ERROR_OCCURRED() );

                    FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                    exception_lineno = 1149;
                    type_description_1 = "oooooooooooooooooooboboooooo";
                    goto frame_exception_exit_1;
                }
                tmp_assign_source_13 = tmp_left_name_2;
                var_handle_list = tmp_assign_source_13;

            }
            branch_no_7:;
        }
        {
            PyObject *tmp_ass_subvalue_2;
            PyObject *tmp_called_instance_3;
            PyObject *tmp_args_element_name_2;
            PyObject *tmp_ass_subscribed_2;
            PyObject *tmp_ass_subscript_2;
            CHECK_OBJECT( par_self );
            tmp_called_instance_3 = par_self;
            CHECK_OBJECT( var_handle_list );
            tmp_args_element_name_2 = var_handle_list;
            frame_3e8d1a1c7da302cd9107f80bea120660->m_frame.f_lineno = 1151;
            {
                PyObject *call_args[] = { tmp_args_element_name_2 };
                tmp_ass_subvalue_2 = CALL_METHOD_WITH_ARGS1( tmp_called_instance_3, const_str_plain__filter_handle_list, call_args );
            }

            if ( tmp_ass_subvalue_2 == NULL )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 1151;
                type_description_1 = "oooooooooooooooooooboboooooo";
                goto frame_exception_exit_1;
            }
            CHECK_OBJECT( var_handle_list );
            tmp_ass_subscribed_2 = var_handle_list;
            tmp_ass_subscript_2 = const_slice_none_none_none;
            tmp_result = SET_SUBSCRIPT( tmp_ass_subscribed_2, tmp_ass_subscript_2, tmp_ass_subvalue_2 );
            Py_DECREF( tmp_ass_subvalue_2 );
            if ( tmp_result == false )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 1151;
                type_description_1 = "oooooooooooooooooooboboooooo";
                goto frame_exception_exit_1;
            }
        }
        {
            nuitka_bool tmp_condition_result_8;
            int tmp_truth_name_2;
            CHECK_OBJECT( var_handle_list );
            tmp_truth_name_2 = CHECK_IF_TRUE( var_handle_list );
            if ( tmp_truth_name_2 == -1 )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 1153;
                type_description_1 = "oooooooooooooooooooboboooooo";
                goto frame_exception_exit_1;
            }
            tmp_condition_result_8 = tmp_truth_name_2 == 1 ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
            if ( tmp_condition_result_8 == NUITKA_BOOL_TRUE )
            {
                goto branch_yes_8;
            }
            else
            {
                goto branch_no_8;
            }
            branch_yes_8:;
            {
                nuitka_bool tmp_condition_result_9;
                PyObject *tmp_operand_name_4;
                CHECK_OBJECT( par_close_fds );
                tmp_operand_name_4 = par_close_fds;
                tmp_res = CHECK_IF_TRUE( tmp_operand_name_4 );
                if ( tmp_res == -1 )
                {
                    assert( ERROR_OCCURRED() );

                    FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                    exception_lineno = 1154;
                    type_description_1 = "oooooooooooooooooooboboooooo";
                    goto frame_exception_exit_1;
                }
                tmp_condition_result_9 = ( tmp_res == 0 ) ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
                if ( tmp_condition_result_9 == NUITKA_BOOL_TRUE )
                {
                    goto branch_yes_9;
                }
                else
                {
                    goto branch_no_9;
                }
                branch_yes_9:;
                {
                    PyObject *tmp_called_name_3;
                    PyObject *tmp_source_name_4;
                    PyObject *tmp_mvar_value_4;
                    PyObject *tmp_call_result_1;
                    PyObject *tmp_args_element_name_3;
                    PyObject *tmp_args_element_name_4;
                    PyObject *tmp_mvar_value_5;
                    tmp_mvar_value_4 = GET_STRING_DICT_VALUE( moduledict_subprocess, (Nuitka_StringObject *)const_str_plain_warnings );

                    if (unlikely( tmp_mvar_value_4 == NULL ))
                    {
                        tmp_mvar_value_4 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_warnings );
                    }

                    if ( tmp_mvar_value_4 == NULL )
                    {

                        exception_type = PyExc_NameError;
                        Py_INCREF( exception_type );
                        exception_value = PyUnicode_FromFormat( "name '%s' is not defined", "warnings" );
                        exception_tb = NULL;
                        NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
                        CHAIN_EXCEPTION( exception_value );

                        exception_lineno = 1155;
                        type_description_1 = "oooooooooooooooooooboboooooo";
                        goto frame_exception_exit_1;
                    }

                    tmp_source_name_4 = tmp_mvar_value_4;
                    tmp_called_name_3 = LOOKUP_ATTRIBUTE( tmp_source_name_4, const_str_plain_warn );
                    if ( tmp_called_name_3 == NULL )
                    {
                        assert( ERROR_OCCURRED() );

                        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                        exception_lineno = 1155;
                        type_description_1 = "oooooooooooooooooooboboooooo";
                        goto frame_exception_exit_1;
                    }
                    tmp_args_element_name_3 = const_str_digest_64e76603765a4738675c6641b73cb9a4;
                    tmp_mvar_value_5 = GET_STRING_DICT_VALUE( moduledict_subprocess, (Nuitka_StringObject *)const_str_plain_RuntimeWarning );

                    if (unlikely( tmp_mvar_value_5 == NULL ))
                    {
                        tmp_mvar_value_5 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_RuntimeWarning );
                    }

                    if ( tmp_mvar_value_5 == NULL )
                    {
                        Py_DECREF( tmp_called_name_3 );
                        exception_type = PyExc_NameError;
                        Py_INCREF( exception_type );
                        exception_value = PyUnicode_FromFormat( "name '%s' is not defined", "RuntimeWarning" );
                        exception_tb = NULL;
                        NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
                        CHAIN_EXCEPTION( exception_value );

                        exception_lineno = 1156;
                        type_description_1 = "oooooooooooooooooooboboooooo";
                        goto frame_exception_exit_1;
                    }

                    tmp_args_element_name_4 = tmp_mvar_value_5;
                    frame_3e8d1a1c7da302cd9107f80bea120660->m_frame.f_lineno = 1155;
                    {
                        PyObject *call_args[] = { tmp_args_element_name_3, tmp_args_element_name_4 };
                        tmp_call_result_1 = CALL_FUNCTION_WITH_ARGS2( tmp_called_name_3, call_args );
                    }

                    Py_DECREF( tmp_called_name_3 );
                    if ( tmp_call_result_1 == NULL )
                    {
                        assert( ERROR_OCCURRED() );

                        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                        exception_lineno = 1155;
                        type_description_1 = "oooooooooooooooooooboboooooo";
                        goto frame_exception_exit_1;
                    }
                    Py_DECREF( tmp_call_result_1 );
                }
                branch_no_9:;
            }
            {
                PyObject *tmp_assign_source_14;
                tmp_assign_source_14 = Py_False;
                {
                    PyObject *old = par_close_fds;
                    assert( old != NULL );
                    par_close_fds = tmp_assign_source_14;
                    Py_INCREF( par_close_fds );
                    Py_DECREF( old );
                }

            }
            branch_no_8:;
        }
        branch_no_5:;
    }
    {
        nuitka_bool tmp_condition_result_10;
        int tmp_truth_name_3;
        CHECK_OBJECT( par_shell );
        tmp_truth_name_3 = CHECK_IF_TRUE( par_shell );
        if ( tmp_truth_name_3 == -1 )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 1163;
            type_description_1 = "oooooooooooooooooooboboooooo";
            goto frame_exception_exit_1;
        }
        tmp_condition_result_10 = tmp_truth_name_3 == 1 ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
        if ( tmp_condition_result_10 == NUITKA_BOOL_TRUE )
        {
            goto branch_yes_10;
        }
        else
        {
            goto branch_no_10;
        }
        branch_yes_10:;
        {
            PyObject *tmp_assign_source_15;
            PyObject *tmp_source_name_5;
            CHECK_OBJECT( par_startupinfo );
            tmp_source_name_5 = par_startupinfo;
            tmp_assign_source_15 = LOOKUP_ATTRIBUTE( tmp_source_name_5, const_str_plain_dwFlags );
            if ( tmp_assign_source_15 == NULL )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 1164;
                type_description_1 = "oooooooooooooooooooboboooooo";
                goto frame_exception_exit_1;
            }
            assert( tmp_inplace_assign_attr_2__start == NULL );
            tmp_inplace_assign_attr_2__start = tmp_assign_source_15;
        }
        // Tried code:
        {
            PyObject *tmp_assign_source_16;
            PyObject *tmp_left_name_3;
            PyObject *tmp_right_name_3;
            PyObject *tmp_source_name_6;
            PyObject *tmp_mvar_value_6;
            CHECK_OBJECT( tmp_inplace_assign_attr_2__start );
            tmp_left_name_3 = tmp_inplace_assign_attr_2__start;
            tmp_mvar_value_6 = GET_STRING_DICT_VALUE( moduledict_subprocess, (Nuitka_StringObject *)const_str_plain__winapi );

            if (unlikely( tmp_mvar_value_6 == NULL ))
            {
                tmp_mvar_value_6 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain__winapi );
            }

            if ( tmp_mvar_value_6 == NULL )
            {

                exception_type = PyExc_NameError;
                Py_INCREF( exception_type );
                exception_value = PyUnicode_FromFormat( "name '%s' is not defined", "_winapi" );
                exception_tb = NULL;
                NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
                CHAIN_EXCEPTION( exception_value );

                exception_lineno = 1164;
                type_description_1 = "oooooooooooooooooooboboooooo";
                goto try_except_handler_6;
            }

            tmp_source_name_6 = tmp_mvar_value_6;
            tmp_right_name_3 = LOOKUP_ATTRIBUTE( tmp_source_name_6, const_str_plain_STARTF_USESHOWWINDOW );
            if ( tmp_right_name_3 == NULL )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 1164;
                type_description_1 = "oooooooooooooooooooboboooooo";
                goto try_except_handler_6;
            }
            tmp_assign_source_16 = BINARY_OPERATION( PyNumber_InPlaceOr, tmp_left_name_3, tmp_right_name_3 );
            Py_DECREF( tmp_right_name_3 );
            if ( tmp_assign_source_16 == NULL )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 1164;
                type_description_1 = "oooooooooooooooooooboboooooo";
                goto try_except_handler_6;
            }
            assert( tmp_inplace_assign_attr_2__end == NULL );
            tmp_inplace_assign_attr_2__end = tmp_assign_source_16;
        }
        // Tried code:
        {
            PyObject *tmp_assattr_name_6;
            PyObject *tmp_assattr_target_6;
            CHECK_OBJECT( tmp_inplace_assign_attr_2__end );
            tmp_assattr_name_6 = tmp_inplace_assign_attr_2__end;
            CHECK_OBJECT( par_startupinfo );
            tmp_assattr_target_6 = par_startupinfo;
            tmp_result = SET_ATTRIBUTE( tmp_assattr_target_6, const_str_plain_dwFlags, tmp_assattr_name_6 );
            if ( tmp_result == false )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 1164;
                type_description_1 = "oooooooooooooooooooboboooooo";
                goto try_except_handler_7;
            }
        }
        goto try_end_5;
        // Exception handler code:
        try_except_handler_7:;
        exception_keeper_type_5 = exception_type;
        exception_keeper_value_5 = exception_value;
        exception_keeper_tb_5 = exception_tb;
        exception_keeper_lineno_5 = exception_lineno;
        exception_type = NULL;
        exception_value = NULL;
        exception_tb = NULL;
        exception_lineno = 0;

        CHECK_OBJECT( (PyObject *)tmp_inplace_assign_attr_2__end );
        Py_DECREF( tmp_inplace_assign_attr_2__end );
        tmp_inplace_assign_attr_2__end = NULL;

        // Re-raise.
        exception_type = exception_keeper_type_5;
        exception_value = exception_keeper_value_5;
        exception_tb = exception_keeper_tb_5;
        exception_lineno = exception_keeper_lineno_5;

        goto try_except_handler_6;
        // End of try:
        try_end_5:;
        goto try_end_6;
        // Exception handler code:
        try_except_handler_6:;
        exception_keeper_type_6 = exception_type;
        exception_keeper_value_6 = exception_value;
        exception_keeper_tb_6 = exception_tb;
        exception_keeper_lineno_6 = exception_lineno;
        exception_type = NULL;
        exception_value = NULL;
        exception_tb = NULL;
        exception_lineno = 0;

        CHECK_OBJECT( (PyObject *)tmp_inplace_assign_attr_2__start );
        Py_DECREF( tmp_inplace_assign_attr_2__start );
        tmp_inplace_assign_attr_2__start = NULL;

        // Re-raise.
        exception_type = exception_keeper_type_6;
        exception_value = exception_keeper_value_6;
        exception_tb = exception_keeper_tb_6;
        exception_lineno = exception_keeper_lineno_6;

        goto frame_exception_exit_1;
        // End of try:
        try_end_6:;
        CHECK_OBJECT( (PyObject *)tmp_inplace_assign_attr_2__end );
        Py_DECREF( tmp_inplace_assign_attr_2__end );
        tmp_inplace_assign_attr_2__end = NULL;

        CHECK_OBJECT( (PyObject *)tmp_inplace_assign_attr_2__start );
        Py_DECREF( tmp_inplace_assign_attr_2__start );
        tmp_inplace_assign_attr_2__start = NULL;

        {
            PyObject *tmp_assattr_name_7;
            PyObject *tmp_source_name_7;
            PyObject *tmp_mvar_value_7;
            PyObject *tmp_assattr_target_7;
            tmp_mvar_value_7 = GET_STRING_DICT_VALUE( moduledict_subprocess, (Nuitka_StringObject *)const_str_plain__winapi );

            if (unlikely( tmp_mvar_value_7 == NULL ))
            {
                tmp_mvar_value_7 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain__winapi );
            }

            if ( tmp_mvar_value_7 == NULL )
            {

                exception_type = PyExc_NameError;
                Py_INCREF( exception_type );
                exception_value = PyUnicode_FromFormat( "name '%s' is not defined", "_winapi" );
                exception_tb = NULL;
                NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
                CHAIN_EXCEPTION( exception_value );

                exception_lineno = 1165;
                type_description_1 = "oooooooooooooooooooboboooooo";
                goto frame_exception_exit_1;
            }

            tmp_source_name_7 = tmp_mvar_value_7;
            tmp_assattr_name_7 = LOOKUP_ATTRIBUTE( tmp_source_name_7, const_str_plain_SW_HIDE );
            if ( tmp_assattr_name_7 == NULL )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 1165;
                type_description_1 = "oooooooooooooooooooboboooooo";
                goto frame_exception_exit_1;
            }
            CHECK_OBJECT( par_startupinfo );
            tmp_assattr_target_7 = par_startupinfo;
            tmp_result = SET_ATTRIBUTE( tmp_assattr_target_7, const_str_plain_wShowWindow, tmp_assattr_name_7 );
            Py_DECREF( tmp_assattr_name_7 );
            if ( tmp_result == false )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 1165;
                type_description_1 = "oooooooooooooooooooboboooooo";
                goto frame_exception_exit_1;
            }
        }
        {
            PyObject *tmp_assign_source_17;
            PyObject *tmp_called_instance_4;
            PyObject *tmp_source_name_8;
            PyObject *tmp_mvar_value_8;
            tmp_mvar_value_8 = GET_STRING_DICT_VALUE( moduledict_subprocess, (Nuitka_StringObject *)const_str_plain_os );

            if (unlikely( tmp_mvar_value_8 == NULL ))
            {
                tmp_mvar_value_8 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_os );
            }

            if ( tmp_mvar_value_8 == NULL )
            {

                exception_type = PyExc_NameError;
                Py_INCREF( exception_type );
                exception_value = PyUnicode_FromFormat( "name '%s' is not defined", "os" );
                exception_tb = NULL;
                NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
                CHAIN_EXCEPTION( exception_value );

                exception_lineno = 1166;
                type_description_1 = "oooooooooooooooooooboboooooo";
                goto frame_exception_exit_1;
            }

            tmp_source_name_8 = tmp_mvar_value_8;
            tmp_called_instance_4 = LOOKUP_ATTRIBUTE( tmp_source_name_8, const_str_plain_environ );
            if ( tmp_called_instance_4 == NULL )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 1166;
                type_description_1 = "oooooooooooooooooooboboooooo";
                goto frame_exception_exit_1;
            }
            frame_3e8d1a1c7da302cd9107f80bea120660->m_frame.f_lineno = 1166;
            tmp_assign_source_17 = CALL_METHOD_WITH_ARGS2( tmp_called_instance_4, const_str_plain_get, &PyTuple_GET_ITEM( const_tuple_b4f5f0e49ae6d02cc4f743bef79300d5_tuple, 0 ) );

            Py_DECREF( tmp_called_instance_4 );
            if ( tmp_assign_source_17 == NULL )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 1166;
                type_description_1 = "oooooooooooooooooooboboooooo";
                goto frame_exception_exit_1;
            }
            assert( var_comspec == NULL );
            var_comspec = tmp_assign_source_17;
        }
        {
            PyObject *tmp_assign_source_18;
            PyObject *tmp_called_instance_5;
            PyObject *tmp_args_element_name_5;
            PyObject *tmp_args_element_name_6;
            tmp_called_instance_5 = const_str_digest_6c198d899a8b04cb613a55f20364551d;
            CHECK_OBJECT( var_comspec );
            tmp_args_element_name_5 = var_comspec;
            CHECK_OBJECT( par_args );
            tmp_args_element_name_6 = par_args;
            frame_3e8d1a1c7da302cd9107f80bea120660->m_frame.f_lineno = 1167;
            {
                PyObject *call_args[] = { tmp_args_element_name_5, tmp_args_element_name_6 };
                tmp_assign_source_18 = CALL_METHOD_WITH_ARGS2( tmp_called_instance_5, const_str_plain_format, call_args );
            }

            if ( tmp_assign_source_18 == NULL )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 1167;
                type_description_1 = "oooooooooooooooooooboboooooo";
                goto frame_exception_exit_1;
            }
            {
                PyObject *old = par_args;
                assert( old != NULL );
                par_args = tmp_assign_source_18;
                Py_DECREF( old );
            }

        }
        branch_no_10:;
    }
    // Tried code:
    // Tried code:
    {
        PyObject *tmp_assign_source_19;
        PyObject *tmp_iter_arg_1;
        PyObject *tmp_called_name_4;
        PyObject *tmp_source_name_9;
        PyObject *tmp_mvar_value_9;
        PyObject *tmp_args_element_name_7;
        PyObject *tmp_args_element_name_8;
        PyObject *tmp_args_element_name_9;
        PyObject *tmp_args_element_name_10;
        PyObject *tmp_args_element_name_11;
        PyObject *tmp_int_arg_4;
        PyObject *tmp_operand_name_5;
        PyObject *tmp_args_element_name_12;
        PyObject *tmp_args_element_name_13;
        PyObject *tmp_args_element_name_14;
        nuitka_bool tmp_condition_result_11;
        PyObject *tmp_compexpr_left_5;
        PyObject *tmp_compexpr_right_5;
        PyObject *tmp_called_instance_6;
        PyObject *tmp_mvar_value_10;
        PyObject *tmp_args_element_name_15;
        PyObject *tmp_args_element_name_16;
        tmp_mvar_value_9 = GET_STRING_DICT_VALUE( moduledict_subprocess, (Nuitka_StringObject *)const_str_plain__winapi );

        if (unlikely( tmp_mvar_value_9 == NULL ))
        {
            tmp_mvar_value_9 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain__winapi );
        }

        if ( tmp_mvar_value_9 == NULL )
        {

            exception_type = PyExc_NameError;
            Py_INCREF( exception_type );
            exception_value = PyUnicode_FromFormat( "name '%s' is not defined", "_winapi" );
            exception_tb = NULL;
            NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
            CHAIN_EXCEPTION( exception_value );

            exception_lineno = 1171;
            type_description_1 = "oooooooooooooooooooboboooooo";
            goto try_except_handler_9;
        }

        tmp_source_name_9 = tmp_mvar_value_9;
        tmp_called_name_4 = LOOKUP_ATTRIBUTE( tmp_source_name_9, const_str_plain_CreateProcess );
        if ( tmp_called_name_4 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 1171;
            type_description_1 = "oooooooooooooooooooboboooooo";
            goto try_except_handler_9;
        }
        CHECK_OBJECT( par_executable );
        tmp_args_element_name_7 = par_executable;
        if ( par_args == NULL )
        {
            Py_DECREF( tmp_called_name_4 );
            exception_type = PyExc_UnboundLocalError;
            Py_INCREF( exception_type );
            exception_value = PyUnicode_FromFormat( "local variable '%s' referenced before assignment", "args" );
            exception_tb = NULL;
            NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
            CHAIN_EXCEPTION( exception_value );

            exception_lineno = 1171;
            type_description_1 = "oooooooooooooooooooboboooooo";
            goto try_except_handler_9;
        }

        tmp_args_element_name_8 = par_args;
        tmp_args_element_name_9 = Py_None;
        tmp_args_element_name_10 = Py_None;
        if ( par_close_fds == NULL )
        {
            Py_DECREF( tmp_called_name_4 );
            exception_type = PyExc_UnboundLocalError;
            Py_INCREF( exception_type );
            exception_value = PyUnicode_FromFormat( "local variable '%s' referenced before assignment", "close_fds" );
            exception_tb = NULL;
            NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
            CHAIN_EXCEPTION( exception_value );

            exception_lineno = 1174;
            type_description_1 = "oooooooooooooooooooboboooooo";
            goto try_except_handler_9;
        }

        tmp_operand_name_5 = par_close_fds;
        tmp_res = CHECK_IF_TRUE( tmp_operand_name_5 );
        if ( tmp_res == -1 )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
            Py_DECREF( tmp_called_name_4 );

            exception_lineno = 1174;
            type_description_1 = "oooooooooooooooooooboboooooo";
            goto try_except_handler_9;
        }
        tmp_int_arg_4 = ( tmp_res == 0 ) ? Py_True : Py_False;
        tmp_args_element_name_11 = PyNumber_Int( tmp_int_arg_4 );
        if ( tmp_args_element_name_11 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
            Py_DECREF( tmp_called_name_4 );

            exception_lineno = 1174;
            type_description_1 = "oooooooooooooooooooboboooooo";
            goto try_except_handler_9;
        }
        CHECK_OBJECT( par_creationflags );
        tmp_args_element_name_12 = par_creationflags;
        CHECK_OBJECT( par_env );
        tmp_args_element_name_13 = par_env;
        CHECK_OBJECT( par_cwd );
        tmp_compexpr_left_5 = par_cwd;
        tmp_compexpr_right_5 = Py_None;
        tmp_condition_result_11 = ( tmp_compexpr_left_5 != tmp_compexpr_right_5 ) ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
        if ( tmp_condition_result_11 == NUITKA_BOOL_TRUE )
        {
            goto condexpr_true_1;
        }
        else
        {
            goto condexpr_false_1;
        }
        condexpr_true_1:;
        tmp_mvar_value_10 = GET_STRING_DICT_VALUE( moduledict_subprocess, (Nuitka_StringObject *)const_str_plain_os );

        if (unlikely( tmp_mvar_value_10 == NULL ))
        {
            tmp_mvar_value_10 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_os );
        }

        if ( tmp_mvar_value_10 == NULL )
        {
            Py_DECREF( tmp_called_name_4 );
            Py_DECREF( tmp_args_element_name_11 );
            exception_type = PyExc_NameError;
            Py_INCREF( exception_type );
            exception_value = PyUnicode_FromFormat( "name '%s' is not defined", "os" );
            exception_tb = NULL;
            NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
            CHAIN_EXCEPTION( exception_value );

            exception_lineno = 1177;
            type_description_1 = "oooooooooooooooooooboboooooo";
            goto try_except_handler_9;
        }

        tmp_called_instance_6 = tmp_mvar_value_10;
        CHECK_OBJECT( par_cwd );
        tmp_args_element_name_15 = par_cwd;
        frame_3e8d1a1c7da302cd9107f80bea120660->m_frame.f_lineno = 1177;
        {
            PyObject *call_args[] = { tmp_args_element_name_15 };
            tmp_args_element_name_14 = CALL_METHOD_WITH_ARGS1( tmp_called_instance_6, const_str_plain_fspath, call_args );
        }

        if ( tmp_args_element_name_14 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
            Py_DECREF( tmp_called_name_4 );
            Py_DECREF( tmp_args_element_name_11 );

            exception_lineno = 1177;
            type_description_1 = "oooooooooooooooooooboboooooo";
            goto try_except_handler_9;
        }
        goto condexpr_end_1;
        condexpr_false_1:;
        tmp_args_element_name_14 = Py_None;
        Py_INCREF( tmp_args_element_name_14 );
        condexpr_end_1:;
        CHECK_OBJECT( par_startupinfo );
        tmp_args_element_name_16 = par_startupinfo;
        frame_3e8d1a1c7da302cd9107f80bea120660->m_frame.f_lineno = 1171;
        {
            PyObject *call_args[] = { tmp_args_element_name_7, tmp_args_element_name_8, tmp_args_element_name_9, tmp_args_element_name_10, tmp_args_element_name_11, tmp_args_element_name_12, tmp_args_element_name_13, tmp_args_element_name_14, tmp_args_element_name_16 };
            tmp_iter_arg_1 = CALL_FUNCTION_WITH_ARGS9( tmp_called_name_4, call_args );
        }

        Py_DECREF( tmp_called_name_4 );
        Py_DECREF( tmp_args_element_name_11 );
        Py_DECREF( tmp_args_element_name_14 );
        if ( tmp_iter_arg_1 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 1171;
            type_description_1 = "oooooooooooooooooooboboooooo";
            goto try_except_handler_9;
        }
        tmp_assign_source_19 = MAKE_UNPACK_ITERATOR( tmp_iter_arg_1 );
        Py_DECREF( tmp_iter_arg_1 );
        if ( tmp_assign_source_19 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 1171;
            type_description_1 = "oooooooooooooooooooboboooooo";
            goto try_except_handler_9;
        }
        assert( tmp_tuple_unpack_1__source_iter == NULL );
        tmp_tuple_unpack_1__source_iter = tmp_assign_source_19;
    }
    // Tried code:
    {
        PyObject *tmp_assign_source_20;
        PyObject *tmp_unpack_1;
        CHECK_OBJECT( tmp_tuple_unpack_1__source_iter );
        tmp_unpack_1 = tmp_tuple_unpack_1__source_iter;
        tmp_assign_source_20 = UNPACK_NEXT( tmp_unpack_1, 0, 4 );
        if ( tmp_assign_source_20 == NULL )
        {
            if ( !ERROR_OCCURRED() )
            {
                exception_type = PyExc_StopIteration;
                Py_INCREF( exception_type );
                exception_value = NULL;
                exception_tb = NULL;
            }
            else
            {
                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
            }


            type_description_1 = "oooooooooooooooooooboboooooo";
            exception_lineno = 1171;
            goto try_except_handler_10;
        }
        assert( tmp_tuple_unpack_1__element_1 == NULL );
        tmp_tuple_unpack_1__element_1 = tmp_assign_source_20;
    }
    {
        PyObject *tmp_assign_source_21;
        PyObject *tmp_unpack_2;
        CHECK_OBJECT( tmp_tuple_unpack_1__source_iter );
        tmp_unpack_2 = tmp_tuple_unpack_1__source_iter;
        tmp_assign_source_21 = UNPACK_NEXT( tmp_unpack_2, 1, 4 );
        if ( tmp_assign_source_21 == NULL )
        {
            if ( !ERROR_OCCURRED() )
            {
                exception_type = PyExc_StopIteration;
                Py_INCREF( exception_type );
                exception_value = NULL;
                exception_tb = NULL;
            }
            else
            {
                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
            }


            type_description_1 = "oooooooooooooooooooboboooooo";
            exception_lineno = 1171;
            goto try_except_handler_10;
        }
        assert( tmp_tuple_unpack_1__element_2 == NULL );
        tmp_tuple_unpack_1__element_2 = tmp_assign_source_21;
    }
    {
        PyObject *tmp_assign_source_22;
        PyObject *tmp_unpack_3;
        CHECK_OBJECT( tmp_tuple_unpack_1__source_iter );
        tmp_unpack_3 = tmp_tuple_unpack_1__source_iter;
        tmp_assign_source_22 = UNPACK_NEXT( tmp_unpack_3, 2, 4 );
        if ( tmp_assign_source_22 == NULL )
        {
            if ( !ERROR_OCCURRED() )
            {
                exception_type = PyExc_StopIteration;
                Py_INCREF( exception_type );
                exception_value = NULL;
                exception_tb = NULL;
            }
            else
            {
                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
            }


            type_description_1 = "oooooooooooooooooooboboooooo";
            exception_lineno = 1171;
            goto try_except_handler_10;
        }
        assert( tmp_tuple_unpack_1__element_3 == NULL );
        tmp_tuple_unpack_1__element_3 = tmp_assign_source_22;
    }
    {
        PyObject *tmp_assign_source_23;
        PyObject *tmp_unpack_4;
        CHECK_OBJECT( tmp_tuple_unpack_1__source_iter );
        tmp_unpack_4 = tmp_tuple_unpack_1__source_iter;
        tmp_assign_source_23 = UNPACK_NEXT( tmp_unpack_4, 3, 4 );
        if ( tmp_assign_source_23 == NULL )
        {
            if ( !ERROR_OCCURRED() )
            {
                exception_type = PyExc_StopIteration;
                Py_INCREF( exception_type );
                exception_value = NULL;
                exception_tb = NULL;
            }
            else
            {
                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
            }


            type_description_1 = "oooooooooooooooooooboboooooo";
            exception_lineno = 1171;
            goto try_except_handler_10;
        }
        assert( tmp_tuple_unpack_1__element_4 == NULL );
        tmp_tuple_unpack_1__element_4 = tmp_assign_source_23;
    }
    {
        PyObject *tmp_iterator_name_1;
        CHECK_OBJECT( tmp_tuple_unpack_1__source_iter );
        tmp_iterator_name_1 = tmp_tuple_unpack_1__source_iter;
        // Check if iterator has left-over elements.
        CHECK_OBJECT( tmp_iterator_name_1 ); assert( HAS_ITERNEXT( tmp_iterator_name_1 ) );

        tmp_iterator_attempt = (*Py_TYPE( tmp_iterator_name_1 )->tp_iternext)( tmp_iterator_name_1 );

        if (likely( tmp_iterator_attempt == NULL ))
        {
            PyObject *error = GET_ERROR_OCCURRED();

            if ( error != NULL )
            {
                if ( EXCEPTION_MATCH_BOOL_SINGLE( error, PyExc_StopIteration ))
                {
                    CLEAR_ERROR_OCCURRED();
                }
                else
                {
                    FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );

                    type_description_1 = "oooooooooooooooooooboboooooo";
                    exception_lineno = 1171;
                    goto try_except_handler_10;
                }
            }
        }
        else
        {
            Py_DECREF( tmp_iterator_attempt );

            // TODO: Could avoid PyErr_Format.
#if PYTHON_VERSION < 300
            PyErr_Format( PyExc_ValueError, "too many values to unpack" );
#else
            PyErr_Format( PyExc_ValueError, "too many values to unpack (expected 4)" );
#endif
            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );

            type_description_1 = "oooooooooooooooooooboboooooo";
            exception_lineno = 1171;
            goto try_except_handler_10;
        }
    }
    goto try_end_7;
    // Exception handler code:
    try_except_handler_10:;
    exception_keeper_type_7 = exception_type;
    exception_keeper_value_7 = exception_value;
    exception_keeper_tb_7 = exception_tb;
    exception_keeper_lineno_7 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    CHECK_OBJECT( (PyObject *)tmp_tuple_unpack_1__source_iter );
    Py_DECREF( tmp_tuple_unpack_1__source_iter );
    tmp_tuple_unpack_1__source_iter = NULL;

    // Re-raise.
    exception_type = exception_keeper_type_7;
    exception_value = exception_keeper_value_7;
    exception_tb = exception_keeper_tb_7;
    exception_lineno = exception_keeper_lineno_7;

    goto try_except_handler_9;
    // End of try:
    try_end_7:;
    goto try_end_8;
    // Exception handler code:
    try_except_handler_9:;
    exception_keeper_type_8 = exception_type;
    exception_keeper_value_8 = exception_value;
    exception_keeper_tb_8 = exception_tb;
    exception_keeper_lineno_8 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    Py_XDECREF( tmp_tuple_unpack_1__element_1 );
    tmp_tuple_unpack_1__element_1 = NULL;

    Py_XDECREF( tmp_tuple_unpack_1__element_2 );
    tmp_tuple_unpack_1__element_2 = NULL;

    Py_XDECREF( tmp_tuple_unpack_1__element_3 );
    tmp_tuple_unpack_1__element_3 = NULL;

    Py_XDECREF( tmp_tuple_unpack_1__element_4 );
    tmp_tuple_unpack_1__element_4 = NULL;

    // Re-raise.
    exception_type = exception_keeper_type_8;
    exception_value = exception_keeper_value_8;
    exception_tb = exception_keeper_tb_8;
    exception_lineno = exception_keeper_lineno_8;

    goto try_except_handler_8;
    // End of try:
    try_end_8:;
    goto try_end_9;
    // Exception handler code:
    try_except_handler_8:;
    exception_keeper_type_9 = exception_type;
    exception_keeper_value_9 = exception_value;
    exception_keeper_tb_9 = exception_tb;
    exception_keeper_lineno_9 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    // Preserve existing published exception.
    exception_preserved_type_1 = EXC_TYPE(PyThreadState_GET());
    Py_XINCREF( exception_preserved_type_1 );
    exception_preserved_value_1 = EXC_VALUE(PyThreadState_GET());
    Py_XINCREF( exception_preserved_value_1 );
    exception_preserved_tb_1 = (PyTracebackObject *)EXC_TRACEBACK(PyThreadState_GET());
    Py_XINCREF( exception_preserved_tb_1 );

    if ( exception_keeper_tb_9 == NULL )
    {
        exception_keeper_tb_9 = MAKE_TRACEBACK( frame_3e8d1a1c7da302cd9107f80bea120660, exception_keeper_lineno_9 );
    }
    else if ( exception_keeper_lineno_9 != 0 )
    {
        exception_keeper_tb_9 = ADD_TRACEBACK( exception_keeper_tb_9, frame_3e8d1a1c7da302cd9107f80bea120660, exception_keeper_lineno_9 );
    }

    NORMALIZE_EXCEPTION( &exception_keeper_type_9, &exception_keeper_value_9, &exception_keeper_tb_9 );
    PyException_SetTraceback( exception_keeper_value_9, (PyObject *)exception_keeper_tb_9 );
    PUBLISH_EXCEPTION( &exception_keeper_type_9, &exception_keeper_value_9, &exception_keeper_tb_9 );
    // Tried code:
    {
        nuitka_bool tmp_condition_result_12;
        PyObject *tmp_compexpr_left_6;
        PyObject *tmp_compexpr_right_6;
        CHECK_OBJECT( par_p2cread );
        tmp_compexpr_left_6 = par_p2cread;
        tmp_compexpr_right_6 = const_int_neg_1;
        tmp_res = RICH_COMPARE_BOOL_NOTEQ_OBJECT_OBJECT( tmp_compexpr_left_6, tmp_compexpr_right_6 );
        if ( tmp_res == -1 )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 1186;
            type_description_1 = "oooooooooooooooooooboboooooo";
            goto try_except_handler_11;
        }
        tmp_condition_result_12 = ( tmp_res != 0 ) ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
        if ( tmp_condition_result_12 == NUITKA_BOOL_TRUE )
        {
            goto branch_yes_11;
        }
        else
        {
            goto branch_no_11;
        }
        branch_yes_11:;
        {
            PyObject *tmp_called_instance_7;
            PyObject *tmp_call_result_2;
            CHECK_OBJECT( par_p2cread );
            tmp_called_instance_7 = par_p2cread;
            frame_3e8d1a1c7da302cd9107f80bea120660->m_frame.f_lineno = 1187;
            tmp_call_result_2 = CALL_METHOD_NO_ARGS( tmp_called_instance_7, const_str_plain_Close );
            if ( tmp_call_result_2 == NULL )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 1187;
                type_description_1 = "oooooooooooooooooooboboooooo";
                goto try_except_handler_11;
            }
            Py_DECREF( tmp_call_result_2 );
        }
        branch_no_11:;
    }
    {
        nuitka_bool tmp_condition_result_13;
        PyObject *tmp_compexpr_left_7;
        PyObject *tmp_compexpr_right_7;
        CHECK_OBJECT( par_c2pwrite );
        tmp_compexpr_left_7 = par_c2pwrite;
        tmp_compexpr_right_7 = const_int_neg_1;
        tmp_res = RICH_COMPARE_BOOL_NOTEQ_OBJECT_OBJECT( tmp_compexpr_left_7, tmp_compexpr_right_7 );
        if ( tmp_res == -1 )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 1188;
            type_description_1 = "oooooooooooooooooooboboooooo";
            goto try_except_handler_11;
        }
        tmp_condition_result_13 = ( tmp_res != 0 ) ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
        if ( tmp_condition_result_13 == NUITKA_BOOL_TRUE )
        {
            goto branch_yes_12;
        }
        else
        {
            goto branch_no_12;
        }
        branch_yes_12:;
        {
            PyObject *tmp_called_instance_8;
            PyObject *tmp_call_result_3;
            CHECK_OBJECT( par_c2pwrite );
            tmp_called_instance_8 = par_c2pwrite;
            frame_3e8d1a1c7da302cd9107f80bea120660->m_frame.f_lineno = 1189;
            tmp_call_result_3 = CALL_METHOD_NO_ARGS( tmp_called_instance_8, const_str_plain_Close );
            if ( tmp_call_result_3 == NULL )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 1189;
                type_description_1 = "oooooooooooooooooooboboooooo";
                goto try_except_handler_11;
            }
            Py_DECREF( tmp_call_result_3 );
        }
        branch_no_12:;
    }
    {
        nuitka_bool tmp_condition_result_14;
        PyObject *tmp_compexpr_left_8;
        PyObject *tmp_compexpr_right_8;
        CHECK_OBJECT( par_errwrite );
        tmp_compexpr_left_8 = par_errwrite;
        tmp_compexpr_right_8 = const_int_neg_1;
        tmp_res = RICH_COMPARE_BOOL_NOTEQ_OBJECT_OBJECT( tmp_compexpr_left_8, tmp_compexpr_right_8 );
        if ( tmp_res == -1 )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 1190;
            type_description_1 = "oooooooooooooooooooboboooooo";
            goto try_except_handler_11;
        }
        tmp_condition_result_14 = ( tmp_res != 0 ) ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
        if ( tmp_condition_result_14 == NUITKA_BOOL_TRUE )
        {
            goto branch_yes_13;
        }
        else
        {
            goto branch_no_13;
        }
        branch_yes_13:;
        {
            PyObject *tmp_called_instance_9;
            PyObject *tmp_call_result_4;
            CHECK_OBJECT( par_errwrite );
            tmp_called_instance_9 = par_errwrite;
            frame_3e8d1a1c7da302cd9107f80bea120660->m_frame.f_lineno = 1191;
            tmp_call_result_4 = CALL_METHOD_NO_ARGS( tmp_called_instance_9, const_str_plain_Close );
            if ( tmp_call_result_4 == NULL )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 1191;
                type_description_1 = "oooooooooooooooooooboboooooo";
                goto try_except_handler_11;
            }
            Py_DECREF( tmp_call_result_4 );
        }
        branch_no_13:;
    }
    {
        nuitka_bool tmp_condition_result_15;
        PyObject *tmp_source_name_10;
        PyObject *tmp_attribute_name_1;
        CHECK_OBJECT( par_self );
        tmp_source_name_10 = par_self;
        tmp_attribute_name_1 = const_str_plain__devnull;
        tmp_res = BUILTIN_HASATTR_BOOL( tmp_source_name_10, tmp_attribute_name_1 );
        if ( tmp_res == -1 )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 1192;
            type_description_1 = "oooooooooooooooooooboboooooo";
            goto try_except_handler_11;
        }
        tmp_condition_result_15 = ( tmp_res != 0 ) ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
        if ( tmp_condition_result_15 == NUITKA_BOOL_TRUE )
        {
            goto branch_yes_14;
        }
        else
        {
            goto branch_no_14;
        }
        branch_yes_14:;
        {
            PyObject *tmp_called_name_5;
            PyObject *tmp_source_name_11;
            PyObject *tmp_mvar_value_11;
            PyObject *tmp_call_result_5;
            PyObject *tmp_args_element_name_17;
            PyObject *tmp_source_name_12;
            tmp_mvar_value_11 = GET_STRING_DICT_VALUE( moduledict_subprocess, (Nuitka_StringObject *)const_str_plain_os );

            if (unlikely( tmp_mvar_value_11 == NULL ))
            {
                tmp_mvar_value_11 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_os );
            }

            if ( tmp_mvar_value_11 == NULL )
            {

                exception_type = PyExc_NameError;
                Py_INCREF( exception_type );
                exception_value = PyUnicode_FromFormat( "name '%s' is not defined", "os" );
                exception_tb = NULL;
                NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
                CHAIN_EXCEPTION( exception_value );

                exception_lineno = 1193;
                type_description_1 = "oooooooooooooooooooboboooooo";
                goto try_except_handler_11;
            }

            tmp_source_name_11 = tmp_mvar_value_11;
            tmp_called_name_5 = LOOKUP_ATTRIBUTE( tmp_source_name_11, const_str_plain_close );
            if ( tmp_called_name_5 == NULL )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 1193;
                type_description_1 = "oooooooooooooooooooboboooooo";
                goto try_except_handler_11;
            }
            CHECK_OBJECT( par_self );
            tmp_source_name_12 = par_self;
            tmp_args_element_name_17 = LOOKUP_ATTRIBUTE( tmp_source_name_12, const_str_plain__devnull );
            if ( tmp_args_element_name_17 == NULL )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
                Py_DECREF( tmp_called_name_5 );

                exception_lineno = 1193;
                type_description_1 = "oooooooooooooooooooboboooooo";
                goto try_except_handler_11;
            }
            frame_3e8d1a1c7da302cd9107f80bea120660->m_frame.f_lineno = 1193;
            {
                PyObject *call_args[] = { tmp_args_element_name_17 };
                tmp_call_result_5 = CALL_FUNCTION_WITH_ARGS1( tmp_called_name_5, call_args );
            }

            Py_DECREF( tmp_called_name_5 );
            Py_DECREF( tmp_args_element_name_17 );
            if ( tmp_call_result_5 == NULL )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 1193;
                type_description_1 = "oooooooooooooooooooboboooooo";
                goto try_except_handler_11;
            }
            Py_DECREF( tmp_call_result_5 );
        }
        branch_no_14:;
    }
    {
        PyObject *tmp_assattr_name_8;
        PyObject *tmp_assattr_target_8;
        tmp_assattr_name_8 = Py_True;
        CHECK_OBJECT( par_self );
        tmp_assattr_target_8 = par_self;
        tmp_result = SET_ATTRIBUTE( tmp_assattr_target_8, const_str_plain__closed_child_pipe_fds, tmp_assattr_name_8 );
        if ( tmp_result == false )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 1196;
            type_description_1 = "oooooooooooooooooooboboooooo";
            goto try_except_handler_11;
        }
    }
    tmp_result = RERAISE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
    if (unlikely( tmp_result == false ))
    {
        exception_lineno = 1170;
    }

    if (exception_tb && exception_tb->tb_frame == &frame_3e8d1a1c7da302cd9107f80bea120660->m_frame) frame_3e8d1a1c7da302cd9107f80bea120660->m_frame.f_lineno = exception_tb->tb_lineno;
    type_description_1 = "oooooooooooooooooooboboooooo";
    goto try_except_handler_11;
    // tried codes exits in all cases
    NUITKA_CANNOT_GET_HERE( subprocess$$$function_44__execute_child );
    return NULL;
    // Exception handler code:
    try_except_handler_11:;
    exception_keeper_type_10 = exception_type;
    exception_keeper_value_10 = exception_value;
    exception_keeper_tb_10 = exception_tb;
    exception_keeper_lineno_10 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    // Restore previous exception.
    SET_CURRENT_EXCEPTION( exception_preserved_type_1, exception_preserved_value_1, exception_preserved_tb_1 );
    // Re-raise.
    exception_type = exception_keeper_type_10;
    exception_value = exception_keeper_value_10;
    exception_tb = exception_keeper_tb_10;
    exception_lineno = exception_keeper_lineno_10;

    goto frame_exception_exit_1;
    // End of try:
    // End of try:
    try_end_9:;
    CHECK_OBJECT( (PyObject *)tmp_tuple_unpack_1__source_iter );
    Py_DECREF( tmp_tuple_unpack_1__source_iter );
    tmp_tuple_unpack_1__source_iter = NULL;

    {
        PyObject *tmp_assign_source_24;
        CHECK_OBJECT( tmp_tuple_unpack_1__element_1 );
        tmp_assign_source_24 = tmp_tuple_unpack_1__element_1;
        assert( var_hp == NULL );
        Py_INCREF( tmp_assign_source_24 );
        var_hp = tmp_assign_source_24;
    }
    Py_XDECREF( tmp_tuple_unpack_1__element_1 );
    tmp_tuple_unpack_1__element_1 = NULL;

    {
        PyObject *tmp_assign_source_25;
        CHECK_OBJECT( tmp_tuple_unpack_1__element_2 );
        tmp_assign_source_25 = tmp_tuple_unpack_1__element_2;
        assert( var_ht == NULL );
        Py_INCREF( tmp_assign_source_25 );
        var_ht = tmp_assign_source_25;
    }
    Py_XDECREF( tmp_tuple_unpack_1__element_2 );
    tmp_tuple_unpack_1__element_2 = NULL;

    {
        PyObject *tmp_assign_source_26;
        CHECK_OBJECT( tmp_tuple_unpack_1__element_3 );
        tmp_assign_source_26 = tmp_tuple_unpack_1__element_3;
        assert( var_pid == NULL );
        Py_INCREF( tmp_assign_source_26 );
        var_pid = tmp_assign_source_26;
    }
    Py_XDECREF( tmp_tuple_unpack_1__element_3 );
    tmp_tuple_unpack_1__element_3 = NULL;

    {
        PyObject *tmp_assign_source_27;
        CHECK_OBJECT( tmp_tuple_unpack_1__element_4 );
        tmp_assign_source_27 = tmp_tuple_unpack_1__element_4;
        assert( var_tid == NULL );
        Py_INCREF( tmp_assign_source_27 );
        var_tid = tmp_assign_source_27;
    }
    Py_XDECREF( tmp_tuple_unpack_1__element_4 );
    tmp_tuple_unpack_1__element_4 = NULL;

    {
        nuitka_bool tmp_condition_result_16;
        PyObject *tmp_compexpr_left_9;
        PyObject *tmp_compexpr_right_9;
        CHECK_OBJECT( par_p2cread );
        tmp_compexpr_left_9 = par_p2cread;
        tmp_compexpr_right_9 = const_int_neg_1;
        tmp_res = RICH_COMPARE_BOOL_NOTEQ_OBJECT_OBJECT( tmp_compexpr_left_9, tmp_compexpr_right_9 );
        if ( tmp_res == -1 )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 1186;
            type_description_1 = "oooooooooooooooooooboboooooo";
            goto frame_exception_exit_1;
        }
        tmp_condition_result_16 = ( tmp_res != 0 ) ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
        if ( tmp_condition_result_16 == NUITKA_BOOL_TRUE )
        {
            goto branch_yes_15;
        }
        else
        {
            goto branch_no_15;
        }
        branch_yes_15:;
        {
            PyObject *tmp_called_instance_10;
            PyObject *tmp_call_result_6;
            CHECK_OBJECT( par_p2cread );
            tmp_called_instance_10 = par_p2cread;
            frame_3e8d1a1c7da302cd9107f80bea120660->m_frame.f_lineno = 1187;
            tmp_call_result_6 = CALL_METHOD_NO_ARGS( tmp_called_instance_10, const_str_plain_Close );
            if ( tmp_call_result_6 == NULL )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 1187;
                type_description_1 = "oooooooooooooooooooboboooooo";
                goto frame_exception_exit_1;
            }
            Py_DECREF( tmp_call_result_6 );
        }
        branch_no_15:;
    }
    {
        nuitka_bool tmp_condition_result_17;
        PyObject *tmp_compexpr_left_10;
        PyObject *tmp_compexpr_right_10;
        CHECK_OBJECT( par_c2pwrite );
        tmp_compexpr_left_10 = par_c2pwrite;
        tmp_compexpr_right_10 = const_int_neg_1;
        tmp_res = RICH_COMPARE_BOOL_NOTEQ_OBJECT_OBJECT( tmp_compexpr_left_10, tmp_compexpr_right_10 );
        if ( tmp_res == -1 )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 1188;
            type_description_1 = "oooooooooooooooooooboboooooo";
            goto frame_exception_exit_1;
        }
        tmp_condition_result_17 = ( tmp_res != 0 ) ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
        if ( tmp_condition_result_17 == NUITKA_BOOL_TRUE )
        {
            goto branch_yes_16;
        }
        else
        {
            goto branch_no_16;
        }
        branch_yes_16:;
        {
            PyObject *tmp_called_instance_11;
            PyObject *tmp_call_result_7;
            CHECK_OBJECT( par_c2pwrite );
            tmp_called_instance_11 = par_c2pwrite;
            frame_3e8d1a1c7da302cd9107f80bea120660->m_frame.f_lineno = 1189;
            tmp_call_result_7 = CALL_METHOD_NO_ARGS( tmp_called_instance_11, const_str_plain_Close );
            if ( tmp_call_result_7 == NULL )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 1189;
                type_description_1 = "oooooooooooooooooooboboooooo";
                goto frame_exception_exit_1;
            }
            Py_DECREF( tmp_call_result_7 );
        }
        branch_no_16:;
    }
    {
        nuitka_bool tmp_condition_result_18;
        PyObject *tmp_compexpr_left_11;
        PyObject *tmp_compexpr_right_11;
        CHECK_OBJECT( par_errwrite );
        tmp_compexpr_left_11 = par_errwrite;
        tmp_compexpr_right_11 = const_int_neg_1;
        tmp_res = RICH_COMPARE_BOOL_NOTEQ_OBJECT_OBJECT( tmp_compexpr_left_11, tmp_compexpr_right_11 );
        if ( tmp_res == -1 )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 1190;
            type_description_1 = "oooooooooooooooooooboboooooo";
            goto frame_exception_exit_1;
        }
        tmp_condition_result_18 = ( tmp_res != 0 ) ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
        if ( tmp_condition_result_18 == NUITKA_BOOL_TRUE )
        {
            goto branch_yes_17;
        }
        else
        {
            goto branch_no_17;
        }
        branch_yes_17:;
        {
            PyObject *tmp_called_instance_12;
            PyObject *tmp_call_result_8;
            CHECK_OBJECT( par_errwrite );
            tmp_called_instance_12 = par_errwrite;
            frame_3e8d1a1c7da302cd9107f80bea120660->m_frame.f_lineno = 1191;
            tmp_call_result_8 = CALL_METHOD_NO_ARGS( tmp_called_instance_12, const_str_plain_Close );
            if ( tmp_call_result_8 == NULL )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 1191;
                type_description_1 = "oooooooooooooooooooboboooooo";
                goto frame_exception_exit_1;
            }
            Py_DECREF( tmp_call_result_8 );
        }
        branch_no_17:;
    }
    {
        nuitka_bool tmp_condition_result_19;
        PyObject *tmp_source_name_13;
        PyObject *tmp_attribute_name_2;
        CHECK_OBJECT( par_self );
        tmp_source_name_13 = par_self;
        tmp_attribute_name_2 = const_str_plain__devnull;
        tmp_res = BUILTIN_HASATTR_BOOL( tmp_source_name_13, tmp_attribute_name_2 );
        if ( tmp_res == -1 )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 1192;
            type_description_1 = "oooooooooooooooooooboboooooo";
            goto frame_exception_exit_1;
        }
        tmp_condition_result_19 = ( tmp_res != 0 ) ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
        if ( tmp_condition_result_19 == NUITKA_BOOL_TRUE )
        {
            goto branch_yes_18;
        }
        else
        {
            goto branch_no_18;
        }
        branch_yes_18:;
        {
            PyObject *tmp_called_name_6;
            PyObject *tmp_source_name_14;
            PyObject *tmp_mvar_value_12;
            PyObject *tmp_call_result_9;
            PyObject *tmp_args_element_name_18;
            PyObject *tmp_source_name_15;
            tmp_mvar_value_12 = GET_STRING_DICT_VALUE( moduledict_subprocess, (Nuitka_StringObject *)const_str_plain_os );

            if (unlikely( tmp_mvar_value_12 == NULL ))
            {
                tmp_mvar_value_12 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_os );
            }

            if ( tmp_mvar_value_12 == NULL )
            {

                exception_type = PyExc_NameError;
                Py_INCREF( exception_type );
                exception_value = PyUnicode_FromFormat( "name '%s' is not defined", "os" );
                exception_tb = NULL;
                NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
                CHAIN_EXCEPTION( exception_value );

                exception_lineno = 1193;
                type_description_1 = "oooooooooooooooooooboboooooo";
                goto frame_exception_exit_1;
            }

            tmp_source_name_14 = tmp_mvar_value_12;
            tmp_called_name_6 = LOOKUP_ATTRIBUTE( tmp_source_name_14, const_str_plain_close );
            if ( tmp_called_name_6 == NULL )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 1193;
                type_description_1 = "oooooooooooooooooooboboooooo";
                goto frame_exception_exit_1;
            }
            CHECK_OBJECT( par_self );
            tmp_source_name_15 = par_self;
            tmp_args_element_name_18 = LOOKUP_ATTRIBUTE( tmp_source_name_15, const_str_plain__devnull );
            if ( tmp_args_element_name_18 == NULL )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
                Py_DECREF( tmp_called_name_6 );

                exception_lineno = 1193;
                type_description_1 = "oooooooooooooooooooboboooooo";
                goto frame_exception_exit_1;
            }
            frame_3e8d1a1c7da302cd9107f80bea120660->m_frame.f_lineno = 1193;
            {
                PyObject *call_args[] = { tmp_args_element_name_18 };
                tmp_call_result_9 = CALL_FUNCTION_WITH_ARGS1( tmp_called_name_6, call_args );
            }

            Py_DECREF( tmp_called_name_6 );
            Py_DECREF( tmp_args_element_name_18 );
            if ( tmp_call_result_9 == NULL )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 1193;
                type_description_1 = "oooooooooooooooooooboboooooo";
                goto frame_exception_exit_1;
            }
            Py_DECREF( tmp_call_result_9 );
        }
        branch_no_18:;
    }
    {
        PyObject *tmp_assattr_name_9;
        PyObject *tmp_assattr_target_9;
        tmp_assattr_name_9 = Py_True;
        CHECK_OBJECT( par_self );
        tmp_assattr_target_9 = par_self;
        tmp_result = SET_ATTRIBUTE( tmp_assattr_target_9, const_str_plain__closed_child_pipe_fds, tmp_assattr_name_9 );
        if ( tmp_result == false )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 1196;
            type_description_1 = "oooooooooooooooooooboboooooo";
            goto frame_exception_exit_1;
        }
    }
    {
        PyObject *tmp_assattr_name_10;
        PyObject *tmp_assattr_target_10;
        tmp_assattr_name_10 = Py_True;
        CHECK_OBJECT( par_self );
        tmp_assattr_target_10 = par_self;
        tmp_result = SET_ATTRIBUTE( tmp_assattr_target_10, const_str_plain__child_created, tmp_assattr_name_10 );
        if ( tmp_result == false )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 1199;
            type_description_1 = "oooooooooooooooooooboboooooo";
            goto frame_exception_exit_1;
        }
    }
    {
        PyObject *tmp_assattr_name_11;
        PyObject *tmp_called_name_7;
        PyObject *tmp_mvar_value_13;
        PyObject *tmp_args_element_name_19;
        PyObject *tmp_assattr_target_11;
        tmp_mvar_value_13 = GET_STRING_DICT_VALUE( moduledict_subprocess, (Nuitka_StringObject *)const_str_plain_Handle );

        if (unlikely( tmp_mvar_value_13 == NULL ))
        {
            tmp_mvar_value_13 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_Handle );
        }

        if ( tmp_mvar_value_13 == NULL )
        {

            exception_type = PyExc_NameError;
            Py_INCREF( exception_type );
            exception_value = PyUnicode_FromFormat( "name '%s' is not defined", "Handle" );
            exception_tb = NULL;
            NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
            CHAIN_EXCEPTION( exception_value );

            exception_lineno = 1200;
            type_description_1 = "oooooooooooooooooooboboooooo";
            goto frame_exception_exit_1;
        }

        tmp_called_name_7 = tmp_mvar_value_13;
        CHECK_OBJECT( var_hp );
        tmp_args_element_name_19 = var_hp;
        frame_3e8d1a1c7da302cd9107f80bea120660->m_frame.f_lineno = 1200;
        {
            PyObject *call_args[] = { tmp_args_element_name_19 };
            tmp_assattr_name_11 = CALL_FUNCTION_WITH_ARGS1( tmp_called_name_7, call_args );
        }

        if ( tmp_assattr_name_11 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 1200;
            type_description_1 = "oooooooooooooooooooboboooooo";
            goto frame_exception_exit_1;
        }
        CHECK_OBJECT( par_self );
        tmp_assattr_target_11 = par_self;
        tmp_result = SET_ATTRIBUTE( tmp_assattr_target_11, const_str_plain__handle, tmp_assattr_name_11 );
        Py_DECREF( tmp_assattr_name_11 );
        if ( tmp_result == false )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 1200;
            type_description_1 = "oooooooooooooooooooboboooooo";
            goto frame_exception_exit_1;
        }
    }
    {
        PyObject *tmp_assattr_name_12;
        PyObject *tmp_assattr_target_12;
        CHECK_OBJECT( var_pid );
        tmp_assattr_name_12 = var_pid;
        CHECK_OBJECT( par_self );
        tmp_assattr_target_12 = par_self;
        tmp_result = SET_ATTRIBUTE( tmp_assattr_target_12, const_str_plain_pid, tmp_assattr_name_12 );
        if ( tmp_result == false )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 1201;
            type_description_1 = "oooooooooooooooooooboboooooo";
            goto frame_exception_exit_1;
        }
    }
    {
        PyObject *tmp_called_instance_13;
        PyObject *tmp_mvar_value_14;
        PyObject *tmp_call_result_10;
        PyObject *tmp_args_element_name_20;
        tmp_mvar_value_14 = GET_STRING_DICT_VALUE( moduledict_subprocess, (Nuitka_StringObject *)const_str_plain__winapi );

        if (unlikely( tmp_mvar_value_14 == NULL ))
        {
            tmp_mvar_value_14 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain__winapi );
        }

        if ( tmp_mvar_value_14 == NULL )
        {

            exception_type = PyExc_NameError;
            Py_INCREF( exception_type );
            exception_value = PyUnicode_FromFormat( "name '%s' is not defined", "_winapi" );
            exception_tb = NULL;
            NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
            CHAIN_EXCEPTION( exception_value );

            exception_lineno = 1202;
            type_description_1 = "oooooooooooooooooooboboooooo";
            goto frame_exception_exit_1;
        }

        tmp_called_instance_13 = tmp_mvar_value_14;
        CHECK_OBJECT( var_ht );
        tmp_args_element_name_20 = var_ht;
        frame_3e8d1a1c7da302cd9107f80bea120660->m_frame.f_lineno = 1202;
        {
            PyObject *call_args[] = { tmp_args_element_name_20 };
            tmp_call_result_10 = CALL_METHOD_WITH_ARGS1( tmp_called_instance_13, const_str_plain_CloseHandle, call_args );
        }

        if ( tmp_call_result_10 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 1202;
            type_description_1 = "oooooooooooooooooooboboooooo";
            goto frame_exception_exit_1;
        }
        Py_DECREF( tmp_call_result_10 );
    }

#if 0
    RESTORE_FRAME_EXCEPTION( frame_3e8d1a1c7da302cd9107f80bea120660 );
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto frame_no_exception_1;

    frame_exception_exit_1:;

#if 0
    RESTORE_FRAME_EXCEPTION( frame_3e8d1a1c7da302cd9107f80bea120660 );
#endif

    if ( exception_tb == NULL )
    {
        exception_tb = MAKE_TRACEBACK( frame_3e8d1a1c7da302cd9107f80bea120660, exception_lineno );
    }
    else if ( exception_tb->tb_frame != &frame_3e8d1a1c7da302cd9107f80bea120660->m_frame )
    {
        exception_tb = ADD_TRACEBACK( exception_tb, frame_3e8d1a1c7da302cd9107f80bea120660, exception_lineno );
    }

    // Attachs locals to frame if any.
    Nuitka_Frame_AttachLocals(
        (struct Nuitka_FrameObject *)frame_3e8d1a1c7da302cd9107f80bea120660,
        type_description_1,
        par_self,
        par_args,
        par_executable,
        par_preexec_fn,
        par_close_fds,
        par_pass_fds,
        par_cwd,
        par_env,
        par_startupinfo,
        par_creationflags,
        par_shell,
        par_p2cread,
        par_p2cwrite,
        par_c2pread,
        par_c2pwrite,
        par_errread,
        par_errwrite,
        par_unused_restore_signals,
        par_unused_start_new_session,
        (int)var_use_std_handles,
        var_attribute_list,
        (int)var_have_handle_list,
        var_handle_list,
        var_comspec,
        var_hp,
        var_ht,
        var_pid,
        var_tid
    );


    // Release cached frame.
    if ( frame_3e8d1a1c7da302cd9107f80bea120660 == cache_frame_3e8d1a1c7da302cd9107f80bea120660 )
    {
        Py_DECREF( frame_3e8d1a1c7da302cd9107f80bea120660 );
    }
    cache_frame_3e8d1a1c7da302cd9107f80bea120660 = NULL;

    assertFrameObject( frame_3e8d1a1c7da302cd9107f80bea120660 );

    // Put the previous frame back on top.
    popFrameStack();

    // Return the error.
    goto try_except_handler_1;

    frame_no_exception_1:;
    tmp_return_value = Py_None;
    Py_INCREF( tmp_return_value );
    goto try_return_handler_1;
    // tried codes exits in all cases
    NUITKA_CANNOT_GET_HERE( subprocess$$$function_44__execute_child );
    return NULL;
    // Return handler code:
    try_return_handler_1:;
    CHECK_OBJECT( (PyObject *)par_self );
    Py_DECREF( par_self );
    par_self = NULL;

    Py_XDECREF( par_args );
    par_args = NULL;

    CHECK_OBJECT( (PyObject *)par_executable );
    Py_DECREF( par_executable );
    par_executable = NULL;

    CHECK_OBJECT( (PyObject *)par_preexec_fn );
    Py_DECREF( par_preexec_fn );
    par_preexec_fn = NULL;

    Py_XDECREF( par_close_fds );
    par_close_fds = NULL;

    CHECK_OBJECT( (PyObject *)par_pass_fds );
    Py_DECREF( par_pass_fds );
    par_pass_fds = NULL;

    CHECK_OBJECT( (PyObject *)par_cwd );
    Py_DECREF( par_cwd );
    par_cwd = NULL;

    CHECK_OBJECT( (PyObject *)par_env );
    Py_DECREF( par_env );
    par_env = NULL;

    CHECK_OBJECT( (PyObject *)par_startupinfo );
    Py_DECREF( par_startupinfo );
    par_startupinfo = NULL;

    CHECK_OBJECT( (PyObject *)par_creationflags );
    Py_DECREF( par_creationflags );
    par_creationflags = NULL;

    CHECK_OBJECT( (PyObject *)par_shell );
    Py_DECREF( par_shell );
    par_shell = NULL;

    CHECK_OBJECT( (PyObject *)par_p2cread );
    Py_DECREF( par_p2cread );
    par_p2cread = NULL;

    CHECK_OBJECT( (PyObject *)par_p2cwrite );
    Py_DECREF( par_p2cwrite );
    par_p2cwrite = NULL;

    CHECK_OBJECT( (PyObject *)par_c2pread );
    Py_DECREF( par_c2pread );
    par_c2pread = NULL;

    CHECK_OBJECT( (PyObject *)par_c2pwrite );
    Py_DECREF( par_c2pwrite );
    par_c2pwrite = NULL;

    CHECK_OBJECT( (PyObject *)par_errread );
    Py_DECREF( par_errread );
    par_errread = NULL;

    CHECK_OBJECT( (PyObject *)par_errwrite );
    Py_DECREF( par_errwrite );
    par_errwrite = NULL;

    CHECK_OBJECT( (PyObject *)par_unused_restore_signals );
    Py_DECREF( par_unused_restore_signals );
    par_unused_restore_signals = NULL;

    CHECK_OBJECT( (PyObject *)par_unused_start_new_session );
    Py_DECREF( par_unused_start_new_session );
    par_unused_start_new_session = NULL;

    Py_XDECREF( var_attribute_list );
    var_attribute_list = NULL;

    Py_XDECREF( var_handle_list );
    var_handle_list = NULL;

    Py_XDECREF( var_comspec );
    var_comspec = NULL;

    CHECK_OBJECT( (PyObject *)var_hp );
    Py_DECREF( var_hp );
    var_hp = NULL;

    CHECK_OBJECT( (PyObject *)var_ht );
    Py_DECREF( var_ht );
    var_ht = NULL;

    CHECK_OBJECT( (PyObject *)var_pid );
    Py_DECREF( var_pid );
    var_pid = NULL;

    CHECK_OBJECT( (PyObject *)var_tid );
    Py_DECREF( var_tid );
    var_tid = NULL;

    goto function_return_exit;
    // Exception handler code:
    try_except_handler_1:;
    exception_keeper_type_11 = exception_type;
    exception_keeper_value_11 = exception_value;
    exception_keeper_tb_11 = exception_tb;
    exception_keeper_lineno_11 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    CHECK_OBJECT( (PyObject *)par_self );
    Py_DECREF( par_self );
    par_self = NULL;

    Py_XDECREF( par_args );
    par_args = NULL;

    CHECK_OBJECT( (PyObject *)par_executable );
    Py_DECREF( par_executable );
    par_executable = NULL;

    CHECK_OBJECT( (PyObject *)par_preexec_fn );
    Py_DECREF( par_preexec_fn );
    par_preexec_fn = NULL;

    Py_XDECREF( par_close_fds );
    par_close_fds = NULL;

    CHECK_OBJECT( (PyObject *)par_pass_fds );
    Py_DECREF( par_pass_fds );
    par_pass_fds = NULL;

    CHECK_OBJECT( (PyObject *)par_cwd );
    Py_DECREF( par_cwd );
    par_cwd = NULL;

    CHECK_OBJECT( (PyObject *)par_env );
    Py_DECREF( par_env );
    par_env = NULL;

    Py_XDECREF( par_startupinfo );
    par_startupinfo = NULL;

    CHECK_OBJECT( (PyObject *)par_creationflags );
    Py_DECREF( par_creationflags );
    par_creationflags = NULL;

    CHECK_OBJECT( (PyObject *)par_shell );
    Py_DECREF( par_shell );
    par_shell = NULL;

    CHECK_OBJECT( (PyObject *)par_p2cread );
    Py_DECREF( par_p2cread );
    par_p2cread = NULL;

    CHECK_OBJECT( (PyObject *)par_p2cwrite );
    Py_DECREF( par_p2cwrite );
    par_p2cwrite = NULL;

    CHECK_OBJECT( (PyObject *)par_c2pread );
    Py_DECREF( par_c2pread );
    par_c2pread = NULL;

    CHECK_OBJECT( (PyObject *)par_c2pwrite );
    Py_DECREF( par_c2pwrite );
    par_c2pwrite = NULL;

    CHECK_OBJECT( (PyObject *)par_errread );
    Py_DECREF( par_errread );
    par_errread = NULL;

    CHECK_OBJECT( (PyObject *)par_errwrite );
    Py_DECREF( par_errwrite );
    par_errwrite = NULL;

    CHECK_OBJECT( (PyObject *)par_unused_restore_signals );
    Py_DECREF( par_unused_restore_signals );
    par_unused_restore_signals = NULL;

    CHECK_OBJECT( (PyObject *)par_unused_start_new_session );
    Py_DECREF( par_unused_start_new_session );
    par_unused_start_new_session = NULL;

    Py_XDECREF( var_attribute_list );
    var_attribute_list = NULL;

    Py_XDECREF( var_handle_list );
    var_handle_list = NULL;

    Py_XDECREF( var_comspec );
    var_comspec = NULL;

    Py_XDECREF( var_hp );
    var_hp = NULL;

    Py_XDECREF( var_ht );
    var_ht = NULL;

    Py_XDECREF( var_pid );
    var_pid = NULL;

    Py_XDECREF( var_tid );
    var_tid = NULL;

    // Re-raise.
    exception_type = exception_keeper_type_11;
    exception_value = exception_keeper_value_11;
    exception_tb = exception_keeper_tb_11;
    exception_lineno = exception_keeper_lineno_11;

    goto function_exception_exit;
    // End of try:

    // Return statement must have exited already.
    NUITKA_CANNOT_GET_HERE( subprocess$$$function_44__execute_child );
    return NULL;

function_exception_exit:
    assert( exception_type );
    RESTORE_ERROR_OCCURRED( exception_type, exception_value, exception_tb );

    return NULL;

function_return_exit:
   // Function cleanup code if any.


   // Actual function exit with return value, making sure we did not make
   // the error status worse despite non-NULL return.
   CHECK_OBJECT( tmp_return_value );
   assert( had_error || !ERROR_OCCURRED() );
   return tmp_return_value;
}


static PyObject *impl_subprocess$$$function_45__internal_poll( struct Nuitka_FunctionObject const *self, PyObject **python_pars )
{
    // Preserve error status for checks
#ifndef __NUITKA_NO_ASSERT__
    NUITKA_MAY_BE_UNUSED bool had_error = ERROR_OCCURRED();
#endif

    // Local variable declarations.
    PyObject *par_self = python_pars[ 0 ];
    PyObject *par__deadstate = python_pars[ 1 ];
    PyObject *par__WaitForSingleObject = python_pars[ 2 ];
    PyObject *par__WAIT_OBJECT_0 = python_pars[ 3 ];
    PyObject *par__GetExitCodeProcess = python_pars[ 4 ];
    struct Nuitka_FrameObject *frame_cb01cf9133dac884d7efaf334d2fc08e;
    NUITKA_MAY_BE_UNUSED char const *type_description_1 = NULL;
    PyObject *exception_type = NULL;
    PyObject *exception_value = NULL;
    PyTracebackObject *exception_tb = NULL;
    NUITKA_MAY_BE_UNUSED int exception_lineno = 0;
    int tmp_res;
    bool tmp_result;
    PyObject *tmp_return_value = NULL;
    static struct Nuitka_FrameObject *cache_frame_cb01cf9133dac884d7efaf334d2fc08e = NULL;
    PyObject *exception_keeper_type_1;
    PyObject *exception_keeper_value_1;
    PyTracebackObject *exception_keeper_tb_1;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_1;

    // Actual function body.
    // Tried code:
    MAKE_OR_REUSE_FRAME( cache_frame_cb01cf9133dac884d7efaf334d2fc08e, codeobj_cb01cf9133dac884d7efaf334d2fc08e, module_subprocess, sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *) );
    frame_cb01cf9133dac884d7efaf334d2fc08e = cache_frame_cb01cf9133dac884d7efaf334d2fc08e;

    // Push the new frame as the currently active one.
    pushFrameStack( frame_cb01cf9133dac884d7efaf334d2fc08e );

    // Mark the frame object as in use, ref count 1 will be up for reuse.
    assert( Py_REFCNT( frame_cb01cf9133dac884d7efaf334d2fc08e ) == 2 ); // Frame stack

    // Framed code:
    {
        nuitka_bool tmp_condition_result_1;
        PyObject *tmp_compexpr_left_1;
        PyObject *tmp_compexpr_right_1;
        PyObject *tmp_source_name_1;
        CHECK_OBJECT( par_self );
        tmp_source_name_1 = par_self;
        tmp_compexpr_left_1 = LOOKUP_ATTRIBUTE( tmp_source_name_1, const_str_plain_returncode );
        if ( tmp_compexpr_left_1 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 1215;
            type_description_1 = "ooooo";
            goto frame_exception_exit_1;
        }
        tmp_compexpr_right_1 = Py_None;
        tmp_condition_result_1 = ( tmp_compexpr_left_1 == tmp_compexpr_right_1 ) ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
        Py_DECREF( tmp_compexpr_left_1 );
        if ( tmp_condition_result_1 == NUITKA_BOOL_TRUE )
        {
            goto branch_yes_1;
        }
        else
        {
            goto branch_no_1;
        }
        branch_yes_1:;
        {
            nuitka_bool tmp_condition_result_2;
            PyObject *tmp_compexpr_left_2;
            PyObject *tmp_compexpr_right_2;
            PyObject *tmp_called_name_1;
            PyObject *tmp_args_element_name_1;
            PyObject *tmp_source_name_2;
            PyObject *tmp_args_element_name_2;
            CHECK_OBJECT( par__WaitForSingleObject );
            tmp_called_name_1 = par__WaitForSingleObject;
            CHECK_OBJECT( par_self );
            tmp_source_name_2 = par_self;
            tmp_args_element_name_1 = LOOKUP_ATTRIBUTE( tmp_source_name_2, const_str_plain__handle );
            if ( tmp_args_element_name_1 == NULL )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 1216;
                type_description_1 = "ooooo";
                goto frame_exception_exit_1;
            }
            tmp_args_element_name_2 = const_int_0;
            frame_cb01cf9133dac884d7efaf334d2fc08e->m_frame.f_lineno = 1216;
            {
                PyObject *call_args[] = { tmp_args_element_name_1, tmp_args_element_name_2 };
                tmp_compexpr_left_2 = CALL_FUNCTION_WITH_ARGS2( tmp_called_name_1, call_args );
            }

            Py_DECREF( tmp_args_element_name_1 );
            if ( tmp_compexpr_left_2 == NULL )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 1216;
                type_description_1 = "ooooo";
                goto frame_exception_exit_1;
            }
            CHECK_OBJECT( par__WAIT_OBJECT_0 );
            tmp_compexpr_right_2 = par__WAIT_OBJECT_0;
            tmp_res = RICH_COMPARE_BOOL_EQ_OBJECT_OBJECT( tmp_compexpr_left_2, tmp_compexpr_right_2 );
            Py_DECREF( tmp_compexpr_left_2 );
            if ( tmp_res == -1 )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 1216;
                type_description_1 = "ooooo";
                goto frame_exception_exit_1;
            }
            tmp_condition_result_2 = ( tmp_res != 0 ) ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
            if ( tmp_condition_result_2 == NUITKA_BOOL_TRUE )
            {
                goto branch_yes_2;
            }
            else
            {
                goto branch_no_2;
            }
            branch_yes_2:;
            {
                PyObject *tmp_assattr_name_1;
                PyObject *tmp_called_name_2;
                PyObject *tmp_args_element_name_3;
                PyObject *tmp_source_name_3;
                PyObject *tmp_assattr_target_1;
                CHECK_OBJECT( par__GetExitCodeProcess );
                tmp_called_name_2 = par__GetExitCodeProcess;
                CHECK_OBJECT( par_self );
                tmp_source_name_3 = par_self;
                tmp_args_element_name_3 = LOOKUP_ATTRIBUTE( tmp_source_name_3, const_str_plain__handle );
                if ( tmp_args_element_name_3 == NULL )
                {
                    assert( ERROR_OCCURRED() );

                    FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                    exception_lineno = 1217;
                    type_description_1 = "ooooo";
                    goto frame_exception_exit_1;
                }
                frame_cb01cf9133dac884d7efaf334d2fc08e->m_frame.f_lineno = 1217;
                {
                    PyObject *call_args[] = { tmp_args_element_name_3 };
                    tmp_assattr_name_1 = CALL_FUNCTION_WITH_ARGS1( tmp_called_name_2, call_args );
                }

                Py_DECREF( tmp_args_element_name_3 );
                if ( tmp_assattr_name_1 == NULL )
                {
                    assert( ERROR_OCCURRED() );

                    FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                    exception_lineno = 1217;
                    type_description_1 = "ooooo";
                    goto frame_exception_exit_1;
                }
                CHECK_OBJECT( par_self );
                tmp_assattr_target_1 = par_self;
                tmp_result = SET_ATTRIBUTE( tmp_assattr_target_1, const_str_plain_returncode, tmp_assattr_name_1 );
                Py_DECREF( tmp_assattr_name_1 );
                if ( tmp_result == false )
                {
                    assert( ERROR_OCCURRED() );

                    FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                    exception_lineno = 1217;
                    type_description_1 = "ooooo";
                    goto frame_exception_exit_1;
                }
            }
            branch_no_2:;
        }
        branch_no_1:;
    }
    {
        PyObject *tmp_source_name_4;
        CHECK_OBJECT( par_self );
        tmp_source_name_4 = par_self;
        tmp_return_value = LOOKUP_ATTRIBUTE( tmp_source_name_4, const_str_plain_returncode );
        if ( tmp_return_value == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 1218;
            type_description_1 = "ooooo";
            goto frame_exception_exit_1;
        }
        goto frame_return_exit_1;
    }

#if 0
    RESTORE_FRAME_EXCEPTION( frame_cb01cf9133dac884d7efaf334d2fc08e );
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto frame_no_exception_1;

    frame_return_exit_1:;
#if 0
    RESTORE_FRAME_EXCEPTION( frame_cb01cf9133dac884d7efaf334d2fc08e );
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto try_return_handler_1;

    frame_exception_exit_1:;

#if 0
    RESTORE_FRAME_EXCEPTION( frame_cb01cf9133dac884d7efaf334d2fc08e );
#endif

    if ( exception_tb == NULL )
    {
        exception_tb = MAKE_TRACEBACK( frame_cb01cf9133dac884d7efaf334d2fc08e, exception_lineno );
    }
    else if ( exception_tb->tb_frame != &frame_cb01cf9133dac884d7efaf334d2fc08e->m_frame )
    {
        exception_tb = ADD_TRACEBACK( exception_tb, frame_cb01cf9133dac884d7efaf334d2fc08e, exception_lineno );
    }

    // Attachs locals to frame if any.
    Nuitka_Frame_AttachLocals(
        (struct Nuitka_FrameObject *)frame_cb01cf9133dac884d7efaf334d2fc08e,
        type_description_1,
        par_self,
        par__deadstate,
        par__WaitForSingleObject,
        par__WAIT_OBJECT_0,
        par__GetExitCodeProcess
    );


    // Release cached frame.
    if ( frame_cb01cf9133dac884d7efaf334d2fc08e == cache_frame_cb01cf9133dac884d7efaf334d2fc08e )
    {
        Py_DECREF( frame_cb01cf9133dac884d7efaf334d2fc08e );
    }
    cache_frame_cb01cf9133dac884d7efaf334d2fc08e = NULL;

    assertFrameObject( frame_cb01cf9133dac884d7efaf334d2fc08e );

    // Put the previous frame back on top.
    popFrameStack();

    // Return the error.
    goto try_except_handler_1;

    frame_no_exception_1:;
    // tried codes exits in all cases
    NUITKA_CANNOT_GET_HERE( subprocess$$$function_45__internal_poll );
    return NULL;
    // Return handler code:
    try_return_handler_1:;
    CHECK_OBJECT( (PyObject *)par_self );
    Py_DECREF( par_self );
    par_self = NULL;

    CHECK_OBJECT( (PyObject *)par__deadstate );
    Py_DECREF( par__deadstate );
    par__deadstate = NULL;

    CHECK_OBJECT( (PyObject *)par__WaitForSingleObject );
    Py_DECREF( par__WaitForSingleObject );
    par__WaitForSingleObject = NULL;

    CHECK_OBJECT( (PyObject *)par__WAIT_OBJECT_0 );
    Py_DECREF( par__WAIT_OBJECT_0 );
    par__WAIT_OBJECT_0 = NULL;

    CHECK_OBJECT( (PyObject *)par__GetExitCodeProcess );
    Py_DECREF( par__GetExitCodeProcess );
    par__GetExitCodeProcess = NULL;

    goto function_return_exit;
    // Exception handler code:
    try_except_handler_1:;
    exception_keeper_type_1 = exception_type;
    exception_keeper_value_1 = exception_value;
    exception_keeper_tb_1 = exception_tb;
    exception_keeper_lineno_1 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    CHECK_OBJECT( (PyObject *)par_self );
    Py_DECREF( par_self );
    par_self = NULL;

    CHECK_OBJECT( (PyObject *)par__deadstate );
    Py_DECREF( par__deadstate );
    par__deadstate = NULL;

    CHECK_OBJECT( (PyObject *)par__WaitForSingleObject );
    Py_DECREF( par__WaitForSingleObject );
    par__WaitForSingleObject = NULL;

    CHECK_OBJECT( (PyObject *)par__WAIT_OBJECT_0 );
    Py_DECREF( par__WAIT_OBJECT_0 );
    par__WAIT_OBJECT_0 = NULL;

    CHECK_OBJECT( (PyObject *)par__GetExitCodeProcess );
    Py_DECREF( par__GetExitCodeProcess );
    par__GetExitCodeProcess = NULL;

    // Re-raise.
    exception_type = exception_keeper_type_1;
    exception_value = exception_keeper_value_1;
    exception_tb = exception_keeper_tb_1;
    exception_lineno = exception_keeper_lineno_1;

    goto function_exception_exit;
    // End of try:

    // Return statement must have exited already.
    NUITKA_CANNOT_GET_HERE( subprocess$$$function_45__internal_poll );
    return NULL;

function_exception_exit:
    assert( exception_type );
    RESTORE_ERROR_OCCURRED( exception_type, exception_value, exception_tb );

    return NULL;

function_return_exit:
   // Function cleanup code if any.


   // Actual function exit with return value, making sure we did not make
   // the error status worse despite non-NULL return.
   CHECK_OBJECT( tmp_return_value );
   assert( had_error || !ERROR_OCCURRED() );
   return tmp_return_value;
}


static PyObject *impl_subprocess$$$function_46__wait( struct Nuitka_FunctionObject const *self, PyObject **python_pars )
{
    // Preserve error status for checks
#ifndef __NUITKA_NO_ASSERT__
    NUITKA_MAY_BE_UNUSED bool had_error = ERROR_OCCURRED();
#endif

    // Local variable declarations.
    PyObject *par_self = python_pars[ 0 ];
    PyObject *par_timeout = python_pars[ 1 ];
    PyObject *var_timeout_millis = NULL;
    PyObject *var_result = NULL;
    struct Nuitka_FrameObject *frame_0a9e54124646f9f125d4cee5c810af87;
    NUITKA_MAY_BE_UNUSED char const *type_description_1 = NULL;
    PyObject *exception_type = NULL;
    PyObject *exception_value = NULL;
    PyTracebackObject *exception_tb = NULL;
    NUITKA_MAY_BE_UNUSED int exception_lineno = 0;
    int tmp_res;
    bool tmp_result;
    PyObject *tmp_return_value = NULL;
    static struct Nuitka_FrameObject *cache_frame_0a9e54124646f9f125d4cee5c810af87 = NULL;
    PyObject *exception_keeper_type_1;
    PyObject *exception_keeper_value_1;
    PyTracebackObject *exception_keeper_tb_1;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_1;

    // Actual function body.
    // Tried code:
    MAKE_OR_REUSE_FRAME( cache_frame_0a9e54124646f9f125d4cee5c810af87, codeobj_0a9e54124646f9f125d4cee5c810af87, module_subprocess, sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *) );
    frame_0a9e54124646f9f125d4cee5c810af87 = cache_frame_0a9e54124646f9f125d4cee5c810af87;

    // Push the new frame as the currently active one.
    pushFrameStack( frame_0a9e54124646f9f125d4cee5c810af87 );

    // Mark the frame object as in use, ref count 1 will be up for reuse.
    assert( Py_REFCNT( frame_0a9e54124646f9f125d4cee5c810af87 ) == 2 ); // Frame stack

    // Framed code:
    {
        nuitka_bool tmp_condition_result_1;
        PyObject *tmp_compexpr_left_1;
        PyObject *tmp_compexpr_right_1;
        CHECK_OBJECT( par_timeout );
        tmp_compexpr_left_1 = par_timeout;
        tmp_compexpr_right_1 = Py_None;
        tmp_condition_result_1 = ( tmp_compexpr_left_1 == tmp_compexpr_right_1 ) ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
        if ( tmp_condition_result_1 == NUITKA_BOOL_TRUE )
        {
            goto branch_yes_1;
        }
        else
        {
            goto branch_no_1;
        }
        branch_yes_1:;
        {
            PyObject *tmp_assign_source_1;
            PyObject *tmp_source_name_1;
            PyObject *tmp_mvar_value_1;
            tmp_mvar_value_1 = GET_STRING_DICT_VALUE( moduledict_subprocess, (Nuitka_StringObject *)const_str_plain__winapi );

            if (unlikely( tmp_mvar_value_1 == NULL ))
            {
                tmp_mvar_value_1 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain__winapi );
            }

            if ( tmp_mvar_value_1 == NULL )
            {

                exception_type = PyExc_NameError;
                Py_INCREF( exception_type );
                exception_value = PyUnicode_FromFormat( "name '%s' is not defined", "_winapi" );
                exception_tb = NULL;
                NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
                CHAIN_EXCEPTION( exception_value );

                exception_lineno = 1224;
                type_description_1 = "oooo";
                goto frame_exception_exit_1;
            }

            tmp_source_name_1 = tmp_mvar_value_1;
            tmp_assign_source_1 = LOOKUP_ATTRIBUTE( tmp_source_name_1, const_str_plain_INFINITE );
            if ( tmp_assign_source_1 == NULL )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 1224;
                type_description_1 = "oooo";
                goto frame_exception_exit_1;
            }
            assert( var_timeout_millis == NULL );
            var_timeout_millis = tmp_assign_source_1;
        }
        goto branch_end_1;
        branch_no_1:;
        {
            PyObject *tmp_assign_source_2;
            PyObject *tmp_int_arg_1;
            PyObject *tmp_left_name_1;
            PyObject *tmp_right_name_1;
            CHECK_OBJECT( par_timeout );
            tmp_left_name_1 = par_timeout;
            tmp_right_name_1 = const_int_pos_1000;
            tmp_int_arg_1 = BINARY_OPERATION_MUL( tmp_left_name_1, tmp_right_name_1 );
            if ( tmp_int_arg_1 == NULL )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 1226;
                type_description_1 = "oooo";
                goto frame_exception_exit_1;
            }
            tmp_assign_source_2 = PyNumber_Int( tmp_int_arg_1 );
            Py_DECREF( tmp_int_arg_1 );
            if ( tmp_assign_source_2 == NULL )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 1226;
                type_description_1 = "oooo";
                goto frame_exception_exit_1;
            }
            assert( var_timeout_millis == NULL );
            var_timeout_millis = tmp_assign_source_2;
        }
        branch_end_1:;
    }
    {
        nuitka_bool tmp_condition_result_2;
        PyObject *tmp_compexpr_left_2;
        PyObject *tmp_compexpr_right_2;
        PyObject *tmp_source_name_2;
        CHECK_OBJECT( par_self );
        tmp_source_name_2 = par_self;
        tmp_compexpr_left_2 = LOOKUP_ATTRIBUTE( tmp_source_name_2, const_str_plain_returncode );
        if ( tmp_compexpr_left_2 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 1227;
            type_description_1 = "oooo";
            goto frame_exception_exit_1;
        }
        tmp_compexpr_right_2 = Py_None;
        tmp_condition_result_2 = ( tmp_compexpr_left_2 == tmp_compexpr_right_2 ) ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
        Py_DECREF( tmp_compexpr_left_2 );
        if ( tmp_condition_result_2 == NUITKA_BOOL_TRUE )
        {
            goto branch_yes_2;
        }
        else
        {
            goto branch_no_2;
        }
        branch_yes_2:;
        {
            PyObject *tmp_assign_source_3;
            PyObject *tmp_called_name_1;
            PyObject *tmp_source_name_3;
            PyObject *tmp_mvar_value_2;
            PyObject *tmp_args_element_name_1;
            PyObject *tmp_source_name_4;
            PyObject *tmp_args_element_name_2;
            tmp_mvar_value_2 = GET_STRING_DICT_VALUE( moduledict_subprocess, (Nuitka_StringObject *)const_str_plain__winapi );

            if (unlikely( tmp_mvar_value_2 == NULL ))
            {
                tmp_mvar_value_2 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain__winapi );
            }

            if ( tmp_mvar_value_2 == NULL )
            {

                exception_type = PyExc_NameError;
                Py_INCREF( exception_type );
                exception_value = PyUnicode_FromFormat( "name '%s' is not defined", "_winapi" );
                exception_tb = NULL;
                NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
                CHAIN_EXCEPTION( exception_value );

                exception_lineno = 1229;
                type_description_1 = "oooo";
                goto frame_exception_exit_1;
            }

            tmp_source_name_3 = tmp_mvar_value_2;
            tmp_called_name_1 = LOOKUP_ATTRIBUTE( tmp_source_name_3, const_str_plain_WaitForSingleObject );
            if ( tmp_called_name_1 == NULL )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 1229;
                type_description_1 = "oooo";
                goto frame_exception_exit_1;
            }
            CHECK_OBJECT( par_self );
            tmp_source_name_4 = par_self;
            tmp_args_element_name_1 = LOOKUP_ATTRIBUTE( tmp_source_name_4, const_str_plain__handle );
            if ( tmp_args_element_name_1 == NULL )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
                Py_DECREF( tmp_called_name_1 );

                exception_lineno = 1229;
                type_description_1 = "oooo";
                goto frame_exception_exit_1;
            }
            CHECK_OBJECT( var_timeout_millis );
            tmp_args_element_name_2 = var_timeout_millis;
            frame_0a9e54124646f9f125d4cee5c810af87->m_frame.f_lineno = 1229;
            {
                PyObject *call_args[] = { tmp_args_element_name_1, tmp_args_element_name_2 };
                tmp_assign_source_3 = CALL_FUNCTION_WITH_ARGS2( tmp_called_name_1, call_args );
            }

            Py_DECREF( tmp_called_name_1 );
            Py_DECREF( tmp_args_element_name_1 );
            if ( tmp_assign_source_3 == NULL )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 1229;
                type_description_1 = "oooo";
                goto frame_exception_exit_1;
            }
            assert( var_result == NULL );
            var_result = tmp_assign_source_3;
        }
        {
            nuitka_bool tmp_condition_result_3;
            PyObject *tmp_compexpr_left_3;
            PyObject *tmp_compexpr_right_3;
            PyObject *tmp_source_name_5;
            PyObject *tmp_mvar_value_3;
            CHECK_OBJECT( var_result );
            tmp_compexpr_left_3 = var_result;
            tmp_mvar_value_3 = GET_STRING_DICT_VALUE( moduledict_subprocess, (Nuitka_StringObject *)const_str_plain__winapi );

            if (unlikely( tmp_mvar_value_3 == NULL ))
            {
                tmp_mvar_value_3 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain__winapi );
            }

            if ( tmp_mvar_value_3 == NULL )
            {

                exception_type = PyExc_NameError;
                Py_INCREF( exception_type );
                exception_value = PyUnicode_FromFormat( "name '%s' is not defined", "_winapi" );
                exception_tb = NULL;
                NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
                CHAIN_EXCEPTION( exception_value );

                exception_lineno = 1231;
                type_description_1 = "oooo";
                goto frame_exception_exit_1;
            }

            tmp_source_name_5 = tmp_mvar_value_3;
            tmp_compexpr_right_3 = LOOKUP_ATTRIBUTE( tmp_source_name_5, const_str_plain_WAIT_TIMEOUT );
            if ( tmp_compexpr_right_3 == NULL )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 1231;
                type_description_1 = "oooo";
                goto frame_exception_exit_1;
            }
            tmp_res = RICH_COMPARE_BOOL_EQ_OBJECT_OBJECT( tmp_compexpr_left_3, tmp_compexpr_right_3 );
            Py_DECREF( tmp_compexpr_right_3 );
            if ( tmp_res == -1 )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 1231;
                type_description_1 = "oooo";
                goto frame_exception_exit_1;
            }
            tmp_condition_result_3 = ( tmp_res != 0 ) ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
            if ( tmp_condition_result_3 == NUITKA_BOOL_TRUE )
            {
                goto branch_yes_3;
            }
            else
            {
                goto branch_no_3;
            }
            branch_yes_3:;
            {
                PyObject *tmp_raise_type_1;
                PyObject *tmp_called_name_2;
                PyObject *tmp_mvar_value_4;
                PyObject *tmp_args_element_name_3;
                PyObject *tmp_source_name_6;
                PyObject *tmp_args_element_name_4;
                tmp_mvar_value_4 = GET_STRING_DICT_VALUE( moduledict_subprocess, (Nuitka_StringObject *)const_str_plain_TimeoutExpired );

                if (unlikely( tmp_mvar_value_4 == NULL ))
                {
                    tmp_mvar_value_4 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_TimeoutExpired );
                }

                if ( tmp_mvar_value_4 == NULL )
                {

                    exception_type = PyExc_NameError;
                    Py_INCREF( exception_type );
                    exception_value = PyUnicode_FromFormat( "name '%s' is not defined", "TimeoutExpired" );
                    exception_tb = NULL;
                    NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
                    CHAIN_EXCEPTION( exception_value );

                    exception_lineno = 1232;
                    type_description_1 = "oooo";
                    goto frame_exception_exit_1;
                }

                tmp_called_name_2 = tmp_mvar_value_4;
                CHECK_OBJECT( par_self );
                tmp_source_name_6 = par_self;
                tmp_args_element_name_3 = LOOKUP_ATTRIBUTE( tmp_source_name_6, const_str_plain_args );
                if ( tmp_args_element_name_3 == NULL )
                {
                    assert( ERROR_OCCURRED() );

                    FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                    exception_lineno = 1232;
                    type_description_1 = "oooo";
                    goto frame_exception_exit_1;
                }
                CHECK_OBJECT( par_timeout );
                tmp_args_element_name_4 = par_timeout;
                frame_0a9e54124646f9f125d4cee5c810af87->m_frame.f_lineno = 1232;
                {
                    PyObject *call_args[] = { tmp_args_element_name_3, tmp_args_element_name_4 };
                    tmp_raise_type_1 = CALL_FUNCTION_WITH_ARGS2( tmp_called_name_2, call_args );
                }

                Py_DECREF( tmp_args_element_name_3 );
                if ( tmp_raise_type_1 == NULL )
                {
                    assert( ERROR_OCCURRED() );

                    FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                    exception_lineno = 1232;
                    type_description_1 = "oooo";
                    goto frame_exception_exit_1;
                }
                exception_type = tmp_raise_type_1;
                exception_lineno = 1232;
                RAISE_EXCEPTION_WITH_TYPE( &exception_type, &exception_value, &exception_tb );
                type_description_1 = "oooo";
                goto frame_exception_exit_1;
            }
            branch_no_3:;
        }
        {
            PyObject *tmp_assattr_name_1;
            PyObject *tmp_called_name_3;
            PyObject *tmp_source_name_7;
            PyObject *tmp_mvar_value_5;
            PyObject *tmp_args_element_name_5;
            PyObject *tmp_source_name_8;
            PyObject *tmp_assattr_target_1;
            tmp_mvar_value_5 = GET_STRING_DICT_VALUE( moduledict_subprocess, (Nuitka_StringObject *)const_str_plain__winapi );

            if (unlikely( tmp_mvar_value_5 == NULL ))
            {
                tmp_mvar_value_5 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain__winapi );
            }

            if ( tmp_mvar_value_5 == NULL )
            {

                exception_type = PyExc_NameError;
                Py_INCREF( exception_type );
                exception_value = PyUnicode_FromFormat( "name '%s' is not defined", "_winapi" );
                exception_tb = NULL;
                NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
                CHAIN_EXCEPTION( exception_value );

                exception_lineno = 1233;
                type_description_1 = "oooo";
                goto frame_exception_exit_1;
            }

            tmp_source_name_7 = tmp_mvar_value_5;
            tmp_called_name_3 = LOOKUP_ATTRIBUTE( tmp_source_name_7, const_str_plain_GetExitCodeProcess );
            if ( tmp_called_name_3 == NULL )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 1233;
                type_description_1 = "oooo";
                goto frame_exception_exit_1;
            }
            CHECK_OBJECT( par_self );
            tmp_source_name_8 = par_self;
            tmp_args_element_name_5 = LOOKUP_ATTRIBUTE( tmp_source_name_8, const_str_plain__handle );
            if ( tmp_args_element_name_5 == NULL )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
                Py_DECREF( tmp_called_name_3 );

                exception_lineno = 1233;
                type_description_1 = "oooo";
                goto frame_exception_exit_1;
            }
            frame_0a9e54124646f9f125d4cee5c810af87->m_frame.f_lineno = 1233;
            {
                PyObject *call_args[] = { tmp_args_element_name_5 };
                tmp_assattr_name_1 = CALL_FUNCTION_WITH_ARGS1( tmp_called_name_3, call_args );
            }

            Py_DECREF( tmp_called_name_3 );
            Py_DECREF( tmp_args_element_name_5 );
            if ( tmp_assattr_name_1 == NULL )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 1233;
                type_description_1 = "oooo";
                goto frame_exception_exit_1;
            }
            CHECK_OBJECT( par_self );
            tmp_assattr_target_1 = par_self;
            tmp_result = SET_ATTRIBUTE( tmp_assattr_target_1, const_str_plain_returncode, tmp_assattr_name_1 );
            Py_DECREF( tmp_assattr_name_1 );
            if ( tmp_result == false )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 1233;
                type_description_1 = "oooo";
                goto frame_exception_exit_1;
            }
        }
        branch_no_2:;
    }
    {
        PyObject *tmp_source_name_9;
        CHECK_OBJECT( par_self );
        tmp_source_name_9 = par_self;
        tmp_return_value = LOOKUP_ATTRIBUTE( tmp_source_name_9, const_str_plain_returncode );
        if ( tmp_return_value == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 1234;
            type_description_1 = "oooo";
            goto frame_exception_exit_1;
        }
        goto frame_return_exit_1;
    }

#if 0
    RESTORE_FRAME_EXCEPTION( frame_0a9e54124646f9f125d4cee5c810af87 );
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto frame_no_exception_1;

    frame_return_exit_1:;
#if 0
    RESTORE_FRAME_EXCEPTION( frame_0a9e54124646f9f125d4cee5c810af87 );
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto try_return_handler_1;

    frame_exception_exit_1:;

#if 0
    RESTORE_FRAME_EXCEPTION( frame_0a9e54124646f9f125d4cee5c810af87 );
#endif

    if ( exception_tb == NULL )
    {
        exception_tb = MAKE_TRACEBACK( frame_0a9e54124646f9f125d4cee5c810af87, exception_lineno );
    }
    else if ( exception_tb->tb_frame != &frame_0a9e54124646f9f125d4cee5c810af87->m_frame )
    {
        exception_tb = ADD_TRACEBACK( exception_tb, frame_0a9e54124646f9f125d4cee5c810af87, exception_lineno );
    }

    // Attachs locals to frame if any.
    Nuitka_Frame_AttachLocals(
        (struct Nuitka_FrameObject *)frame_0a9e54124646f9f125d4cee5c810af87,
        type_description_1,
        par_self,
        par_timeout,
        var_timeout_millis,
        var_result
    );


    // Release cached frame.
    if ( frame_0a9e54124646f9f125d4cee5c810af87 == cache_frame_0a9e54124646f9f125d4cee5c810af87 )
    {
        Py_DECREF( frame_0a9e54124646f9f125d4cee5c810af87 );
    }
    cache_frame_0a9e54124646f9f125d4cee5c810af87 = NULL;

    assertFrameObject( frame_0a9e54124646f9f125d4cee5c810af87 );

    // Put the previous frame back on top.
    popFrameStack();

    // Return the error.
    goto try_except_handler_1;

    frame_no_exception_1:;
    // tried codes exits in all cases
    NUITKA_CANNOT_GET_HERE( subprocess$$$function_46__wait );
    return NULL;
    // Return handler code:
    try_return_handler_1:;
    CHECK_OBJECT( (PyObject *)par_self );
    Py_DECREF( par_self );
    par_self = NULL;

    CHECK_OBJECT( (PyObject *)par_timeout );
    Py_DECREF( par_timeout );
    par_timeout = NULL;

    CHECK_OBJECT( (PyObject *)var_timeout_millis );
    Py_DECREF( var_timeout_millis );
    var_timeout_millis = NULL;

    Py_XDECREF( var_result );
    var_result = NULL;

    goto function_return_exit;
    // Exception handler code:
    try_except_handler_1:;
    exception_keeper_type_1 = exception_type;
    exception_keeper_value_1 = exception_value;
    exception_keeper_tb_1 = exception_tb;
    exception_keeper_lineno_1 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    CHECK_OBJECT( (PyObject *)par_self );
    Py_DECREF( par_self );
    par_self = NULL;

    CHECK_OBJECT( (PyObject *)par_timeout );
    Py_DECREF( par_timeout );
    par_timeout = NULL;

    Py_XDECREF( var_timeout_millis );
    var_timeout_millis = NULL;

    Py_XDECREF( var_result );
    var_result = NULL;

    // Re-raise.
    exception_type = exception_keeper_type_1;
    exception_value = exception_keeper_value_1;
    exception_tb = exception_keeper_tb_1;
    exception_lineno = exception_keeper_lineno_1;

    goto function_exception_exit;
    // End of try:

    // Return statement must have exited already.
    NUITKA_CANNOT_GET_HERE( subprocess$$$function_46__wait );
    return NULL;

function_exception_exit:
    assert( exception_type );
    RESTORE_ERROR_OCCURRED( exception_type, exception_value, exception_tb );

    return NULL;

function_return_exit:
   // Function cleanup code if any.


   // Actual function exit with return value, making sure we did not make
   // the error status worse despite non-NULL return.
   CHECK_OBJECT( tmp_return_value );
   assert( had_error || !ERROR_OCCURRED() );
   return tmp_return_value;
}


static PyObject *impl_subprocess$$$function_47__readerthread( struct Nuitka_FunctionObject const *self, PyObject **python_pars )
{
    // Preserve error status for checks
#ifndef __NUITKA_NO_ASSERT__
    NUITKA_MAY_BE_UNUSED bool had_error = ERROR_OCCURRED();
#endif

    // Local variable declarations.
    PyObject *par_self = python_pars[ 0 ];
    PyObject *par_fh = python_pars[ 1 ];
    PyObject *par_buffer = python_pars[ 2 ];
    struct Nuitka_FrameObject *frame_21dae82fed1de99da6d824d21ade5909;
    NUITKA_MAY_BE_UNUSED char const *type_description_1 = NULL;
    PyObject *exception_type = NULL;
    PyObject *exception_value = NULL;
    PyTracebackObject *exception_tb = NULL;
    NUITKA_MAY_BE_UNUSED int exception_lineno = 0;
    static struct Nuitka_FrameObject *cache_frame_21dae82fed1de99da6d824d21ade5909 = NULL;
    PyObject *tmp_return_value = NULL;
    PyObject *exception_keeper_type_1;
    PyObject *exception_keeper_value_1;
    PyTracebackObject *exception_keeper_tb_1;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_1;

    // Actual function body.
    // Tried code:
    MAKE_OR_REUSE_FRAME( cache_frame_21dae82fed1de99da6d824d21ade5909, codeobj_21dae82fed1de99da6d824d21ade5909, module_subprocess, sizeof(void *)+sizeof(void *)+sizeof(void *) );
    frame_21dae82fed1de99da6d824d21ade5909 = cache_frame_21dae82fed1de99da6d824d21ade5909;

    // Push the new frame as the currently active one.
    pushFrameStack( frame_21dae82fed1de99da6d824d21ade5909 );

    // Mark the frame object as in use, ref count 1 will be up for reuse.
    assert( Py_REFCNT( frame_21dae82fed1de99da6d824d21ade5909 ) == 2 ); // Frame stack

    // Framed code:
    {
        PyObject *tmp_called_name_1;
        PyObject *tmp_source_name_1;
        PyObject *tmp_call_result_1;
        PyObject *tmp_args_element_name_1;
        PyObject *tmp_called_instance_1;
        CHECK_OBJECT( par_buffer );
        tmp_source_name_1 = par_buffer;
        tmp_called_name_1 = LOOKUP_ATTRIBUTE( tmp_source_name_1, const_str_plain_append );
        if ( tmp_called_name_1 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 1238;
            type_description_1 = "ooo";
            goto frame_exception_exit_1;
        }
        CHECK_OBJECT( par_fh );
        tmp_called_instance_1 = par_fh;
        frame_21dae82fed1de99da6d824d21ade5909->m_frame.f_lineno = 1238;
        tmp_args_element_name_1 = CALL_METHOD_NO_ARGS( tmp_called_instance_1, const_str_plain_read );
        if ( tmp_args_element_name_1 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
            Py_DECREF( tmp_called_name_1 );

            exception_lineno = 1238;
            type_description_1 = "ooo";
            goto frame_exception_exit_1;
        }
        frame_21dae82fed1de99da6d824d21ade5909->m_frame.f_lineno = 1238;
        {
            PyObject *call_args[] = { tmp_args_element_name_1 };
            tmp_call_result_1 = CALL_FUNCTION_WITH_ARGS1( tmp_called_name_1, call_args );
        }

        Py_DECREF( tmp_called_name_1 );
        Py_DECREF( tmp_args_element_name_1 );
        if ( tmp_call_result_1 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 1238;
            type_description_1 = "ooo";
            goto frame_exception_exit_1;
        }
        Py_DECREF( tmp_call_result_1 );
    }
    {
        PyObject *tmp_called_instance_2;
        PyObject *tmp_call_result_2;
        CHECK_OBJECT( par_fh );
        tmp_called_instance_2 = par_fh;
        frame_21dae82fed1de99da6d824d21ade5909->m_frame.f_lineno = 1239;
        tmp_call_result_2 = CALL_METHOD_NO_ARGS( tmp_called_instance_2, const_str_plain_close );
        if ( tmp_call_result_2 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 1239;
            type_description_1 = "ooo";
            goto frame_exception_exit_1;
        }
        Py_DECREF( tmp_call_result_2 );
    }

#if 0
    RESTORE_FRAME_EXCEPTION( frame_21dae82fed1de99da6d824d21ade5909 );
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto frame_no_exception_1;

    frame_exception_exit_1:;

#if 0
    RESTORE_FRAME_EXCEPTION( frame_21dae82fed1de99da6d824d21ade5909 );
#endif

    if ( exception_tb == NULL )
    {
        exception_tb = MAKE_TRACEBACK( frame_21dae82fed1de99da6d824d21ade5909, exception_lineno );
    }
    else if ( exception_tb->tb_frame != &frame_21dae82fed1de99da6d824d21ade5909->m_frame )
    {
        exception_tb = ADD_TRACEBACK( exception_tb, frame_21dae82fed1de99da6d824d21ade5909, exception_lineno );
    }

    // Attachs locals to frame if any.
    Nuitka_Frame_AttachLocals(
        (struct Nuitka_FrameObject *)frame_21dae82fed1de99da6d824d21ade5909,
        type_description_1,
        par_self,
        par_fh,
        par_buffer
    );


    // Release cached frame.
    if ( frame_21dae82fed1de99da6d824d21ade5909 == cache_frame_21dae82fed1de99da6d824d21ade5909 )
    {
        Py_DECREF( frame_21dae82fed1de99da6d824d21ade5909 );
    }
    cache_frame_21dae82fed1de99da6d824d21ade5909 = NULL;

    assertFrameObject( frame_21dae82fed1de99da6d824d21ade5909 );

    // Put the previous frame back on top.
    popFrameStack();

    // Return the error.
    goto try_except_handler_1;

    frame_no_exception_1:;
    tmp_return_value = Py_None;
    Py_INCREF( tmp_return_value );
    goto try_return_handler_1;
    // tried codes exits in all cases
    NUITKA_CANNOT_GET_HERE( subprocess$$$function_47__readerthread );
    return NULL;
    // Return handler code:
    try_return_handler_1:;
    CHECK_OBJECT( (PyObject *)par_self );
    Py_DECREF( par_self );
    par_self = NULL;

    CHECK_OBJECT( (PyObject *)par_fh );
    Py_DECREF( par_fh );
    par_fh = NULL;

    CHECK_OBJECT( (PyObject *)par_buffer );
    Py_DECREF( par_buffer );
    par_buffer = NULL;

    goto function_return_exit;
    // Exception handler code:
    try_except_handler_1:;
    exception_keeper_type_1 = exception_type;
    exception_keeper_value_1 = exception_value;
    exception_keeper_tb_1 = exception_tb;
    exception_keeper_lineno_1 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    CHECK_OBJECT( (PyObject *)par_self );
    Py_DECREF( par_self );
    par_self = NULL;

    CHECK_OBJECT( (PyObject *)par_fh );
    Py_DECREF( par_fh );
    par_fh = NULL;

    CHECK_OBJECT( (PyObject *)par_buffer );
    Py_DECREF( par_buffer );
    par_buffer = NULL;

    // Re-raise.
    exception_type = exception_keeper_type_1;
    exception_value = exception_keeper_value_1;
    exception_tb = exception_keeper_tb_1;
    exception_lineno = exception_keeper_lineno_1;

    goto function_exception_exit;
    // End of try:

    // Return statement must have exited already.
    NUITKA_CANNOT_GET_HERE( subprocess$$$function_47__readerthread );
    return NULL;

function_exception_exit:
    assert( exception_type );
    RESTORE_ERROR_OCCURRED( exception_type, exception_value, exception_tb );

    return NULL;

function_return_exit:
   // Function cleanup code if any.


   // Actual function exit with return value, making sure we did not make
   // the error status worse despite non-NULL return.
   CHECK_OBJECT( tmp_return_value );
   assert( had_error || !ERROR_OCCURRED() );
   return tmp_return_value;
}


static PyObject *impl_subprocess$$$function_48__communicate( struct Nuitka_FunctionObject const *self, PyObject **python_pars )
{
    // Preserve error status for checks
#ifndef __NUITKA_NO_ASSERT__
    NUITKA_MAY_BE_UNUSED bool had_error = ERROR_OCCURRED();
#endif

    // Local variable declarations.
    PyObject *par_self = python_pars[ 0 ];
    PyObject *par_input = python_pars[ 1 ];
    PyObject *par_endtime = python_pars[ 2 ];
    PyObject *par_orig_timeout = python_pars[ 3 ];
    PyObject *var_stdout = NULL;
    PyObject *var_stderr = NULL;
    struct Nuitka_FrameObject *frame_8def44d887a0ac5f684876bf2dcf6269;
    NUITKA_MAY_BE_UNUSED char const *type_description_1 = NULL;
    PyObject *exception_type = NULL;
    PyObject *exception_value = NULL;
    PyTracebackObject *exception_tb = NULL;
    NUITKA_MAY_BE_UNUSED int exception_lineno = 0;
    int tmp_res;
    bool tmp_result;
    PyObject *tmp_return_value = NULL;
    static struct Nuitka_FrameObject *cache_frame_8def44d887a0ac5f684876bf2dcf6269 = NULL;
    PyObject *exception_keeper_type_1;
    PyObject *exception_keeper_value_1;
    PyTracebackObject *exception_keeper_tb_1;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_1;

    // Actual function body.
    // Tried code:
    MAKE_OR_REUSE_FRAME( cache_frame_8def44d887a0ac5f684876bf2dcf6269, codeobj_8def44d887a0ac5f684876bf2dcf6269, module_subprocess, sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *) );
    frame_8def44d887a0ac5f684876bf2dcf6269 = cache_frame_8def44d887a0ac5f684876bf2dcf6269;

    // Push the new frame as the currently active one.
    pushFrameStack( frame_8def44d887a0ac5f684876bf2dcf6269 );

    // Mark the frame object as in use, ref count 1 will be up for reuse.
    assert( Py_REFCNT( frame_8def44d887a0ac5f684876bf2dcf6269 ) == 2 ); // Frame stack

    // Framed code:
    {
        nuitka_bool tmp_condition_result_1;
        int tmp_and_left_truth_1;
        nuitka_bool tmp_and_left_value_1;
        nuitka_bool tmp_and_right_value_1;
        PyObject *tmp_source_name_1;
        PyObject *tmp_attribute_value_1;
        int tmp_truth_name_1;
        PyObject *tmp_operand_name_1;
        PyObject *tmp_source_name_2;
        PyObject *tmp_attribute_name_1;
        CHECK_OBJECT( par_self );
        tmp_source_name_1 = par_self;
        tmp_attribute_value_1 = LOOKUP_ATTRIBUTE( tmp_source_name_1, const_str_plain_stdout );
        if ( tmp_attribute_value_1 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 1245;
            type_description_1 = "oooooo";
            goto frame_exception_exit_1;
        }
        tmp_truth_name_1 = CHECK_IF_TRUE( tmp_attribute_value_1 );
        if ( tmp_truth_name_1 == -1 )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
            Py_DECREF( tmp_attribute_value_1 );

            exception_lineno = 1245;
            type_description_1 = "oooooo";
            goto frame_exception_exit_1;
        }
        tmp_and_left_value_1 = tmp_truth_name_1 == 1 ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
        Py_DECREF( tmp_attribute_value_1 );
        tmp_and_left_truth_1 = tmp_and_left_value_1 == NUITKA_BOOL_TRUE ? 1 : 0;
        if ( tmp_and_left_truth_1 == 1 )
        {
            goto and_right_1;
        }
        else
        {
            goto and_left_1;
        }
        and_right_1:;
        CHECK_OBJECT( par_self );
        tmp_source_name_2 = par_self;
        tmp_attribute_name_1 = const_str_plain__stdout_buff;
        tmp_res = BUILTIN_HASATTR_BOOL( tmp_source_name_2, tmp_attribute_name_1 );
        if ( tmp_res == -1 )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 1245;
            type_description_1 = "oooooo";
            goto frame_exception_exit_1;
        }
        tmp_operand_name_1 = ( tmp_res != 0 ) ? Py_True : Py_False;
        tmp_res = CHECK_IF_TRUE( tmp_operand_name_1 );
        if ( tmp_res == -1 )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 1245;
            type_description_1 = "oooooo";
            goto frame_exception_exit_1;
        }
        tmp_and_right_value_1 = ( tmp_res == 0 ) ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
        tmp_condition_result_1 = tmp_and_right_value_1;
        goto and_end_1;
        and_left_1:;
        tmp_condition_result_1 = tmp_and_left_value_1;
        and_end_1:;
        if ( tmp_condition_result_1 == NUITKA_BOOL_TRUE )
        {
            goto branch_yes_1;
        }
        else
        {
            goto branch_no_1;
        }
        branch_yes_1:;
        {
            PyObject *tmp_assattr_name_1;
            PyObject *tmp_assattr_target_1;
            tmp_assattr_name_1 = PyList_New( 0 );
            CHECK_OBJECT( par_self );
            tmp_assattr_target_1 = par_self;
            tmp_result = SET_ATTRIBUTE( tmp_assattr_target_1, const_str_plain__stdout_buff, tmp_assattr_name_1 );
            Py_DECREF( tmp_assattr_name_1 );
            if ( tmp_result == false )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 1246;
                type_description_1 = "oooooo";
                goto frame_exception_exit_1;
            }
        }
        {
            PyObject *tmp_assattr_name_2;
            PyObject *tmp_called_name_1;
            PyObject *tmp_source_name_3;
            PyObject *tmp_mvar_value_1;
            PyObject *tmp_kw_name_1;
            PyObject *tmp_dict_key_1;
            PyObject *tmp_dict_value_1;
            PyObject *tmp_source_name_4;
            PyObject *tmp_dict_key_2;
            PyObject *tmp_dict_value_2;
            PyObject *tmp_tuple_element_1;
            PyObject *tmp_source_name_5;
            PyObject *tmp_source_name_6;
            PyObject *tmp_assattr_target_2;
            tmp_mvar_value_1 = GET_STRING_DICT_VALUE( moduledict_subprocess, (Nuitka_StringObject *)const_str_plain_threading );

            if (unlikely( tmp_mvar_value_1 == NULL ))
            {
                tmp_mvar_value_1 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_threading );
            }

            if ( tmp_mvar_value_1 == NULL )
            {

                exception_type = PyExc_NameError;
                Py_INCREF( exception_type );
                exception_value = PyUnicode_FromFormat( "name '%s' is not defined", "threading" );
                exception_tb = NULL;
                NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
                CHAIN_EXCEPTION( exception_value );

                exception_lineno = 1248;
                type_description_1 = "oooooo";
                goto frame_exception_exit_1;
            }

            tmp_source_name_3 = tmp_mvar_value_1;
            tmp_called_name_1 = LOOKUP_ATTRIBUTE( tmp_source_name_3, const_str_plain_Thread );
            if ( tmp_called_name_1 == NULL )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 1248;
                type_description_1 = "oooooo";
                goto frame_exception_exit_1;
            }
            tmp_dict_key_1 = const_str_plain_target;
            CHECK_OBJECT( par_self );
            tmp_source_name_4 = par_self;
            tmp_dict_value_1 = LOOKUP_ATTRIBUTE( tmp_source_name_4, const_str_plain__readerthread );
            if ( tmp_dict_value_1 == NULL )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
                Py_DECREF( tmp_called_name_1 );

                exception_lineno = 1248;
                type_description_1 = "oooooo";
                goto frame_exception_exit_1;
            }
            tmp_kw_name_1 = _PyDict_NewPresized( 2 );
            tmp_res = PyDict_SetItem( tmp_kw_name_1, tmp_dict_key_1, tmp_dict_value_1 );
            Py_DECREF( tmp_dict_value_1 );
            assert( !(tmp_res != 0) );
            tmp_dict_key_2 = const_str_plain_args;
            CHECK_OBJECT( par_self );
            tmp_source_name_5 = par_self;
            tmp_tuple_element_1 = LOOKUP_ATTRIBUTE( tmp_source_name_5, const_str_plain_stdout );
            if ( tmp_tuple_element_1 == NULL )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
                Py_DECREF( tmp_called_name_1 );
                Py_DECREF( tmp_kw_name_1 );

                exception_lineno = 1249;
                type_description_1 = "oooooo";
                goto frame_exception_exit_1;
            }
            tmp_dict_value_2 = PyTuple_New( 2 );
            PyTuple_SET_ITEM( tmp_dict_value_2, 0, tmp_tuple_element_1 );
            CHECK_OBJECT( par_self );
            tmp_source_name_6 = par_self;
            tmp_tuple_element_1 = LOOKUP_ATTRIBUTE( tmp_source_name_6, const_str_plain__stdout_buff );
            if ( tmp_tuple_element_1 == NULL )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
                Py_DECREF( tmp_called_name_1 );
                Py_DECREF( tmp_kw_name_1 );
                Py_DECREF( tmp_dict_value_2 );

                exception_lineno = 1249;
                type_description_1 = "oooooo";
                goto frame_exception_exit_1;
            }
            PyTuple_SET_ITEM( tmp_dict_value_2, 1, tmp_tuple_element_1 );
            tmp_res = PyDict_SetItem( tmp_kw_name_1, tmp_dict_key_2, tmp_dict_value_2 );
            Py_DECREF( tmp_dict_value_2 );
            assert( !(tmp_res != 0) );
            frame_8def44d887a0ac5f684876bf2dcf6269->m_frame.f_lineno = 1248;
            tmp_assattr_name_2 = CALL_FUNCTION_WITH_KEYARGS( tmp_called_name_1, tmp_kw_name_1 );
            Py_DECREF( tmp_called_name_1 );
            Py_DECREF( tmp_kw_name_1 );
            if ( tmp_assattr_name_2 == NULL )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 1248;
                type_description_1 = "oooooo";
                goto frame_exception_exit_1;
            }
            CHECK_OBJECT( par_self );
            tmp_assattr_target_2 = par_self;
            tmp_result = SET_ATTRIBUTE( tmp_assattr_target_2, const_str_plain_stdout_thread, tmp_assattr_name_2 );
            Py_DECREF( tmp_assattr_name_2 );
            if ( tmp_result == false )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 1247;
                type_description_1 = "oooooo";
                goto frame_exception_exit_1;
            }
        }
        {
            PyObject *tmp_assattr_name_3;
            PyObject *tmp_assattr_target_3;
            PyObject *tmp_source_name_7;
            tmp_assattr_name_3 = Py_True;
            CHECK_OBJECT( par_self );
            tmp_source_name_7 = par_self;
            tmp_assattr_target_3 = LOOKUP_ATTRIBUTE( tmp_source_name_7, const_str_plain_stdout_thread );
            if ( tmp_assattr_target_3 == NULL )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 1250;
                type_description_1 = "oooooo";
                goto frame_exception_exit_1;
            }
            tmp_result = SET_ATTRIBUTE( tmp_assattr_target_3, const_str_plain_daemon, tmp_assattr_name_3 );
            Py_DECREF( tmp_assattr_target_3 );
            if ( tmp_result == false )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 1250;
                type_description_1 = "oooooo";
                goto frame_exception_exit_1;
            }
        }
        {
            PyObject *tmp_called_instance_1;
            PyObject *tmp_source_name_8;
            PyObject *tmp_call_result_1;
            CHECK_OBJECT( par_self );
            tmp_source_name_8 = par_self;
            tmp_called_instance_1 = LOOKUP_ATTRIBUTE( tmp_source_name_8, const_str_plain_stdout_thread );
            if ( tmp_called_instance_1 == NULL )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 1251;
                type_description_1 = "oooooo";
                goto frame_exception_exit_1;
            }
            frame_8def44d887a0ac5f684876bf2dcf6269->m_frame.f_lineno = 1251;
            tmp_call_result_1 = CALL_METHOD_NO_ARGS( tmp_called_instance_1, const_str_plain_start );
            Py_DECREF( tmp_called_instance_1 );
            if ( tmp_call_result_1 == NULL )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 1251;
                type_description_1 = "oooooo";
                goto frame_exception_exit_1;
            }
            Py_DECREF( tmp_call_result_1 );
        }
        branch_no_1:;
    }
    {
        nuitka_bool tmp_condition_result_2;
        int tmp_and_left_truth_2;
        nuitka_bool tmp_and_left_value_2;
        nuitka_bool tmp_and_right_value_2;
        PyObject *tmp_source_name_9;
        PyObject *tmp_attribute_value_2;
        int tmp_truth_name_2;
        PyObject *tmp_operand_name_2;
        PyObject *tmp_source_name_10;
        PyObject *tmp_attribute_name_2;
        CHECK_OBJECT( par_self );
        tmp_source_name_9 = par_self;
        tmp_attribute_value_2 = LOOKUP_ATTRIBUTE( tmp_source_name_9, const_str_plain_stderr );
        if ( tmp_attribute_value_2 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 1252;
            type_description_1 = "oooooo";
            goto frame_exception_exit_1;
        }
        tmp_truth_name_2 = CHECK_IF_TRUE( tmp_attribute_value_2 );
        if ( tmp_truth_name_2 == -1 )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
            Py_DECREF( tmp_attribute_value_2 );

            exception_lineno = 1252;
            type_description_1 = "oooooo";
            goto frame_exception_exit_1;
        }
        tmp_and_left_value_2 = tmp_truth_name_2 == 1 ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
        Py_DECREF( tmp_attribute_value_2 );
        tmp_and_left_truth_2 = tmp_and_left_value_2 == NUITKA_BOOL_TRUE ? 1 : 0;
        if ( tmp_and_left_truth_2 == 1 )
        {
            goto and_right_2;
        }
        else
        {
            goto and_left_2;
        }
        and_right_2:;
        CHECK_OBJECT( par_self );
        tmp_source_name_10 = par_self;
        tmp_attribute_name_2 = const_str_plain__stderr_buff;
        tmp_res = BUILTIN_HASATTR_BOOL( tmp_source_name_10, tmp_attribute_name_2 );
        if ( tmp_res == -1 )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 1252;
            type_description_1 = "oooooo";
            goto frame_exception_exit_1;
        }
        tmp_operand_name_2 = ( tmp_res != 0 ) ? Py_True : Py_False;
        tmp_res = CHECK_IF_TRUE( tmp_operand_name_2 );
        if ( tmp_res == -1 )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 1252;
            type_description_1 = "oooooo";
            goto frame_exception_exit_1;
        }
        tmp_and_right_value_2 = ( tmp_res == 0 ) ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
        tmp_condition_result_2 = tmp_and_right_value_2;
        goto and_end_2;
        and_left_2:;
        tmp_condition_result_2 = tmp_and_left_value_2;
        and_end_2:;
        if ( tmp_condition_result_2 == NUITKA_BOOL_TRUE )
        {
            goto branch_yes_2;
        }
        else
        {
            goto branch_no_2;
        }
        branch_yes_2:;
        {
            PyObject *tmp_assattr_name_4;
            PyObject *tmp_assattr_target_4;
            tmp_assattr_name_4 = PyList_New( 0 );
            CHECK_OBJECT( par_self );
            tmp_assattr_target_4 = par_self;
            tmp_result = SET_ATTRIBUTE( tmp_assattr_target_4, const_str_plain__stderr_buff, tmp_assattr_name_4 );
            Py_DECREF( tmp_assattr_name_4 );
            if ( tmp_result == false )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 1253;
                type_description_1 = "oooooo";
                goto frame_exception_exit_1;
            }
        }
        {
            PyObject *tmp_assattr_name_5;
            PyObject *tmp_called_name_2;
            PyObject *tmp_source_name_11;
            PyObject *tmp_mvar_value_2;
            PyObject *tmp_kw_name_2;
            PyObject *tmp_dict_key_3;
            PyObject *tmp_dict_value_3;
            PyObject *tmp_source_name_12;
            PyObject *tmp_dict_key_4;
            PyObject *tmp_dict_value_4;
            PyObject *tmp_tuple_element_2;
            PyObject *tmp_source_name_13;
            PyObject *tmp_source_name_14;
            PyObject *tmp_assattr_target_5;
            tmp_mvar_value_2 = GET_STRING_DICT_VALUE( moduledict_subprocess, (Nuitka_StringObject *)const_str_plain_threading );

            if (unlikely( tmp_mvar_value_2 == NULL ))
            {
                tmp_mvar_value_2 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_threading );
            }

            if ( tmp_mvar_value_2 == NULL )
            {

                exception_type = PyExc_NameError;
                Py_INCREF( exception_type );
                exception_value = PyUnicode_FromFormat( "name '%s' is not defined", "threading" );
                exception_tb = NULL;
                NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
                CHAIN_EXCEPTION( exception_value );

                exception_lineno = 1255;
                type_description_1 = "oooooo";
                goto frame_exception_exit_1;
            }

            tmp_source_name_11 = tmp_mvar_value_2;
            tmp_called_name_2 = LOOKUP_ATTRIBUTE( tmp_source_name_11, const_str_plain_Thread );
            if ( tmp_called_name_2 == NULL )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 1255;
                type_description_1 = "oooooo";
                goto frame_exception_exit_1;
            }
            tmp_dict_key_3 = const_str_plain_target;
            CHECK_OBJECT( par_self );
            tmp_source_name_12 = par_self;
            tmp_dict_value_3 = LOOKUP_ATTRIBUTE( tmp_source_name_12, const_str_plain__readerthread );
            if ( tmp_dict_value_3 == NULL )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
                Py_DECREF( tmp_called_name_2 );

                exception_lineno = 1255;
                type_description_1 = "oooooo";
                goto frame_exception_exit_1;
            }
            tmp_kw_name_2 = _PyDict_NewPresized( 2 );
            tmp_res = PyDict_SetItem( tmp_kw_name_2, tmp_dict_key_3, tmp_dict_value_3 );
            Py_DECREF( tmp_dict_value_3 );
            assert( !(tmp_res != 0) );
            tmp_dict_key_4 = const_str_plain_args;
            CHECK_OBJECT( par_self );
            tmp_source_name_13 = par_self;
            tmp_tuple_element_2 = LOOKUP_ATTRIBUTE( tmp_source_name_13, const_str_plain_stderr );
            if ( tmp_tuple_element_2 == NULL )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
                Py_DECREF( tmp_called_name_2 );
                Py_DECREF( tmp_kw_name_2 );

                exception_lineno = 1256;
                type_description_1 = "oooooo";
                goto frame_exception_exit_1;
            }
            tmp_dict_value_4 = PyTuple_New( 2 );
            PyTuple_SET_ITEM( tmp_dict_value_4, 0, tmp_tuple_element_2 );
            CHECK_OBJECT( par_self );
            tmp_source_name_14 = par_self;
            tmp_tuple_element_2 = LOOKUP_ATTRIBUTE( tmp_source_name_14, const_str_plain__stderr_buff );
            if ( tmp_tuple_element_2 == NULL )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
                Py_DECREF( tmp_called_name_2 );
                Py_DECREF( tmp_kw_name_2 );
                Py_DECREF( tmp_dict_value_4 );

                exception_lineno = 1256;
                type_description_1 = "oooooo";
                goto frame_exception_exit_1;
            }
            PyTuple_SET_ITEM( tmp_dict_value_4, 1, tmp_tuple_element_2 );
            tmp_res = PyDict_SetItem( tmp_kw_name_2, tmp_dict_key_4, tmp_dict_value_4 );
            Py_DECREF( tmp_dict_value_4 );
            assert( !(tmp_res != 0) );
            frame_8def44d887a0ac5f684876bf2dcf6269->m_frame.f_lineno = 1255;
            tmp_assattr_name_5 = CALL_FUNCTION_WITH_KEYARGS( tmp_called_name_2, tmp_kw_name_2 );
            Py_DECREF( tmp_called_name_2 );
            Py_DECREF( tmp_kw_name_2 );
            if ( tmp_assattr_name_5 == NULL )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 1255;
                type_description_1 = "oooooo";
                goto frame_exception_exit_1;
            }
            CHECK_OBJECT( par_self );
            tmp_assattr_target_5 = par_self;
            tmp_result = SET_ATTRIBUTE( tmp_assattr_target_5, const_str_plain_stderr_thread, tmp_assattr_name_5 );
            Py_DECREF( tmp_assattr_name_5 );
            if ( tmp_result == false )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 1254;
                type_description_1 = "oooooo";
                goto frame_exception_exit_1;
            }
        }
        {
            PyObject *tmp_assattr_name_6;
            PyObject *tmp_assattr_target_6;
            PyObject *tmp_source_name_15;
            tmp_assattr_name_6 = Py_True;
            CHECK_OBJECT( par_self );
            tmp_source_name_15 = par_self;
            tmp_assattr_target_6 = LOOKUP_ATTRIBUTE( tmp_source_name_15, const_str_plain_stderr_thread );
            if ( tmp_assattr_target_6 == NULL )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 1257;
                type_description_1 = "oooooo";
                goto frame_exception_exit_1;
            }
            tmp_result = SET_ATTRIBUTE( tmp_assattr_target_6, const_str_plain_daemon, tmp_assattr_name_6 );
            Py_DECREF( tmp_assattr_target_6 );
            if ( tmp_result == false )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 1257;
                type_description_1 = "oooooo";
                goto frame_exception_exit_1;
            }
        }
        {
            PyObject *tmp_called_instance_2;
            PyObject *tmp_source_name_16;
            PyObject *tmp_call_result_2;
            CHECK_OBJECT( par_self );
            tmp_source_name_16 = par_self;
            tmp_called_instance_2 = LOOKUP_ATTRIBUTE( tmp_source_name_16, const_str_plain_stderr_thread );
            if ( tmp_called_instance_2 == NULL )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 1258;
                type_description_1 = "oooooo";
                goto frame_exception_exit_1;
            }
            frame_8def44d887a0ac5f684876bf2dcf6269->m_frame.f_lineno = 1258;
            tmp_call_result_2 = CALL_METHOD_NO_ARGS( tmp_called_instance_2, const_str_plain_start );
            Py_DECREF( tmp_called_instance_2 );
            if ( tmp_call_result_2 == NULL )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 1258;
                type_description_1 = "oooooo";
                goto frame_exception_exit_1;
            }
            Py_DECREF( tmp_call_result_2 );
        }
        branch_no_2:;
    }
    {
        nuitka_bool tmp_condition_result_3;
        PyObject *tmp_source_name_17;
        PyObject *tmp_attribute_value_3;
        int tmp_truth_name_3;
        CHECK_OBJECT( par_self );
        tmp_source_name_17 = par_self;
        tmp_attribute_value_3 = LOOKUP_ATTRIBUTE( tmp_source_name_17, const_str_plain_stdin );
        if ( tmp_attribute_value_3 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 1260;
            type_description_1 = "oooooo";
            goto frame_exception_exit_1;
        }
        tmp_truth_name_3 = CHECK_IF_TRUE( tmp_attribute_value_3 );
        if ( tmp_truth_name_3 == -1 )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
            Py_DECREF( tmp_attribute_value_3 );

            exception_lineno = 1260;
            type_description_1 = "oooooo";
            goto frame_exception_exit_1;
        }
        tmp_condition_result_3 = tmp_truth_name_3 == 1 ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
        Py_DECREF( tmp_attribute_value_3 );
        if ( tmp_condition_result_3 == NUITKA_BOOL_TRUE )
        {
            goto branch_yes_3;
        }
        else
        {
            goto branch_no_3;
        }
        branch_yes_3:;
        {
            PyObject *tmp_called_instance_3;
            PyObject *tmp_call_result_3;
            PyObject *tmp_args_element_name_1;
            CHECK_OBJECT( par_self );
            tmp_called_instance_3 = par_self;
            CHECK_OBJECT( par_input );
            tmp_args_element_name_1 = par_input;
            frame_8def44d887a0ac5f684876bf2dcf6269->m_frame.f_lineno = 1261;
            {
                PyObject *call_args[] = { tmp_args_element_name_1 };
                tmp_call_result_3 = CALL_METHOD_WITH_ARGS1( tmp_called_instance_3, const_str_plain__stdin_write, call_args );
            }

            if ( tmp_call_result_3 == NULL )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 1261;
                type_description_1 = "oooooo";
                goto frame_exception_exit_1;
            }
            Py_DECREF( tmp_call_result_3 );
        }
        branch_no_3:;
    }
    {
        nuitka_bool tmp_condition_result_4;
        PyObject *tmp_compexpr_left_1;
        PyObject *tmp_compexpr_right_1;
        PyObject *tmp_source_name_18;
        CHECK_OBJECT( par_self );
        tmp_source_name_18 = par_self;
        tmp_compexpr_left_1 = LOOKUP_ATTRIBUTE( tmp_source_name_18, const_str_plain_stdout );
        if ( tmp_compexpr_left_1 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 1266;
            type_description_1 = "oooooo";
            goto frame_exception_exit_1;
        }
        tmp_compexpr_right_1 = Py_None;
        tmp_condition_result_4 = ( tmp_compexpr_left_1 != tmp_compexpr_right_1 ) ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
        Py_DECREF( tmp_compexpr_left_1 );
        if ( tmp_condition_result_4 == NUITKA_BOOL_TRUE )
        {
            goto branch_yes_4;
        }
        else
        {
            goto branch_no_4;
        }
        branch_yes_4:;
        {
            PyObject *tmp_called_name_3;
            PyObject *tmp_source_name_19;
            PyObject *tmp_source_name_20;
            PyObject *tmp_call_result_4;
            PyObject *tmp_args_element_name_2;
            PyObject *tmp_called_instance_4;
            PyObject *tmp_args_element_name_3;
            CHECK_OBJECT( par_self );
            tmp_source_name_20 = par_self;
            tmp_source_name_19 = LOOKUP_ATTRIBUTE( tmp_source_name_20, const_str_plain_stdout_thread );
            if ( tmp_source_name_19 == NULL )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 1267;
                type_description_1 = "oooooo";
                goto frame_exception_exit_1;
            }
            tmp_called_name_3 = LOOKUP_ATTRIBUTE( tmp_source_name_19, const_str_plain_join );
            Py_DECREF( tmp_source_name_19 );
            if ( tmp_called_name_3 == NULL )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 1267;
                type_description_1 = "oooooo";
                goto frame_exception_exit_1;
            }
            CHECK_OBJECT( par_self );
            tmp_called_instance_4 = par_self;
            CHECK_OBJECT( par_endtime );
            tmp_args_element_name_3 = par_endtime;
            frame_8def44d887a0ac5f684876bf2dcf6269->m_frame.f_lineno = 1267;
            {
                PyObject *call_args[] = { tmp_args_element_name_3 };
                tmp_args_element_name_2 = CALL_METHOD_WITH_ARGS1( tmp_called_instance_4, const_str_plain__remaining_time, call_args );
            }

            if ( tmp_args_element_name_2 == NULL )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
                Py_DECREF( tmp_called_name_3 );

                exception_lineno = 1267;
                type_description_1 = "oooooo";
                goto frame_exception_exit_1;
            }
            frame_8def44d887a0ac5f684876bf2dcf6269->m_frame.f_lineno = 1267;
            {
                PyObject *call_args[] = { tmp_args_element_name_2 };
                tmp_call_result_4 = CALL_FUNCTION_WITH_ARGS1( tmp_called_name_3, call_args );
            }

            Py_DECREF( tmp_called_name_3 );
            Py_DECREF( tmp_args_element_name_2 );
            if ( tmp_call_result_4 == NULL )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 1267;
                type_description_1 = "oooooo";
                goto frame_exception_exit_1;
            }
            Py_DECREF( tmp_call_result_4 );
        }
        {
            nuitka_bool tmp_condition_result_5;
            PyObject *tmp_called_instance_5;
            PyObject *tmp_source_name_21;
            PyObject *tmp_call_result_5;
            int tmp_truth_name_4;
            CHECK_OBJECT( par_self );
            tmp_source_name_21 = par_self;
            tmp_called_instance_5 = LOOKUP_ATTRIBUTE( tmp_source_name_21, const_str_plain_stdout_thread );
            if ( tmp_called_instance_5 == NULL )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 1268;
                type_description_1 = "oooooo";
                goto frame_exception_exit_1;
            }
            frame_8def44d887a0ac5f684876bf2dcf6269->m_frame.f_lineno = 1268;
            tmp_call_result_5 = CALL_METHOD_NO_ARGS( tmp_called_instance_5, const_str_plain_is_alive );
            Py_DECREF( tmp_called_instance_5 );
            if ( tmp_call_result_5 == NULL )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 1268;
                type_description_1 = "oooooo";
                goto frame_exception_exit_1;
            }
            tmp_truth_name_4 = CHECK_IF_TRUE( tmp_call_result_5 );
            if ( tmp_truth_name_4 == -1 )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
                Py_DECREF( tmp_call_result_5 );

                exception_lineno = 1268;
                type_description_1 = "oooooo";
                goto frame_exception_exit_1;
            }
            tmp_condition_result_5 = tmp_truth_name_4 == 1 ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
            Py_DECREF( tmp_call_result_5 );
            if ( tmp_condition_result_5 == NUITKA_BOOL_TRUE )
            {
                goto branch_yes_5;
            }
            else
            {
                goto branch_no_5;
            }
            branch_yes_5:;
            {
                PyObject *tmp_raise_type_1;
                PyObject *tmp_called_name_4;
                PyObject *tmp_mvar_value_3;
                PyObject *tmp_args_element_name_4;
                PyObject *tmp_source_name_22;
                PyObject *tmp_args_element_name_5;
                tmp_mvar_value_3 = GET_STRING_DICT_VALUE( moduledict_subprocess, (Nuitka_StringObject *)const_str_plain_TimeoutExpired );

                if (unlikely( tmp_mvar_value_3 == NULL ))
                {
                    tmp_mvar_value_3 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_TimeoutExpired );
                }

                if ( tmp_mvar_value_3 == NULL )
                {

                    exception_type = PyExc_NameError;
                    Py_INCREF( exception_type );
                    exception_value = PyUnicode_FromFormat( "name '%s' is not defined", "TimeoutExpired" );
                    exception_tb = NULL;
                    NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
                    CHAIN_EXCEPTION( exception_value );

                    exception_lineno = 1269;
                    type_description_1 = "oooooo";
                    goto frame_exception_exit_1;
                }

                tmp_called_name_4 = tmp_mvar_value_3;
                CHECK_OBJECT( par_self );
                tmp_source_name_22 = par_self;
                tmp_args_element_name_4 = LOOKUP_ATTRIBUTE( tmp_source_name_22, const_str_plain_args );
                if ( tmp_args_element_name_4 == NULL )
                {
                    assert( ERROR_OCCURRED() );

                    FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                    exception_lineno = 1269;
                    type_description_1 = "oooooo";
                    goto frame_exception_exit_1;
                }
                CHECK_OBJECT( par_orig_timeout );
                tmp_args_element_name_5 = par_orig_timeout;
                frame_8def44d887a0ac5f684876bf2dcf6269->m_frame.f_lineno = 1269;
                {
                    PyObject *call_args[] = { tmp_args_element_name_4, tmp_args_element_name_5 };
                    tmp_raise_type_1 = CALL_FUNCTION_WITH_ARGS2( tmp_called_name_4, call_args );
                }

                Py_DECREF( tmp_args_element_name_4 );
                if ( tmp_raise_type_1 == NULL )
                {
                    assert( ERROR_OCCURRED() );

                    FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                    exception_lineno = 1269;
                    type_description_1 = "oooooo";
                    goto frame_exception_exit_1;
                }
                exception_type = tmp_raise_type_1;
                exception_lineno = 1269;
                RAISE_EXCEPTION_WITH_TYPE( &exception_type, &exception_value, &exception_tb );
                type_description_1 = "oooooo";
                goto frame_exception_exit_1;
            }
            branch_no_5:;
        }
        branch_no_4:;
    }
    {
        nuitka_bool tmp_condition_result_6;
        PyObject *tmp_compexpr_left_2;
        PyObject *tmp_compexpr_right_2;
        PyObject *tmp_source_name_23;
        CHECK_OBJECT( par_self );
        tmp_source_name_23 = par_self;
        tmp_compexpr_left_2 = LOOKUP_ATTRIBUTE( tmp_source_name_23, const_str_plain_stderr );
        if ( tmp_compexpr_left_2 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 1270;
            type_description_1 = "oooooo";
            goto frame_exception_exit_1;
        }
        tmp_compexpr_right_2 = Py_None;
        tmp_condition_result_6 = ( tmp_compexpr_left_2 != tmp_compexpr_right_2 ) ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
        Py_DECREF( tmp_compexpr_left_2 );
        if ( tmp_condition_result_6 == NUITKA_BOOL_TRUE )
        {
            goto branch_yes_6;
        }
        else
        {
            goto branch_no_6;
        }
        branch_yes_6:;
        {
            PyObject *tmp_called_name_5;
            PyObject *tmp_source_name_24;
            PyObject *tmp_source_name_25;
            PyObject *tmp_call_result_6;
            PyObject *tmp_args_element_name_6;
            PyObject *tmp_called_instance_6;
            PyObject *tmp_args_element_name_7;
            CHECK_OBJECT( par_self );
            tmp_source_name_25 = par_self;
            tmp_source_name_24 = LOOKUP_ATTRIBUTE( tmp_source_name_25, const_str_plain_stderr_thread );
            if ( tmp_source_name_24 == NULL )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 1271;
                type_description_1 = "oooooo";
                goto frame_exception_exit_1;
            }
            tmp_called_name_5 = LOOKUP_ATTRIBUTE( tmp_source_name_24, const_str_plain_join );
            Py_DECREF( tmp_source_name_24 );
            if ( tmp_called_name_5 == NULL )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 1271;
                type_description_1 = "oooooo";
                goto frame_exception_exit_1;
            }
            CHECK_OBJECT( par_self );
            tmp_called_instance_6 = par_self;
            CHECK_OBJECT( par_endtime );
            tmp_args_element_name_7 = par_endtime;
            frame_8def44d887a0ac5f684876bf2dcf6269->m_frame.f_lineno = 1271;
            {
                PyObject *call_args[] = { tmp_args_element_name_7 };
                tmp_args_element_name_6 = CALL_METHOD_WITH_ARGS1( tmp_called_instance_6, const_str_plain__remaining_time, call_args );
            }

            if ( tmp_args_element_name_6 == NULL )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
                Py_DECREF( tmp_called_name_5 );

                exception_lineno = 1271;
                type_description_1 = "oooooo";
                goto frame_exception_exit_1;
            }
            frame_8def44d887a0ac5f684876bf2dcf6269->m_frame.f_lineno = 1271;
            {
                PyObject *call_args[] = { tmp_args_element_name_6 };
                tmp_call_result_6 = CALL_FUNCTION_WITH_ARGS1( tmp_called_name_5, call_args );
            }

            Py_DECREF( tmp_called_name_5 );
            Py_DECREF( tmp_args_element_name_6 );
            if ( tmp_call_result_6 == NULL )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 1271;
                type_description_1 = "oooooo";
                goto frame_exception_exit_1;
            }
            Py_DECREF( tmp_call_result_6 );
        }
        {
            nuitka_bool tmp_condition_result_7;
            PyObject *tmp_called_instance_7;
            PyObject *tmp_source_name_26;
            PyObject *tmp_call_result_7;
            int tmp_truth_name_5;
            CHECK_OBJECT( par_self );
            tmp_source_name_26 = par_self;
            tmp_called_instance_7 = LOOKUP_ATTRIBUTE( tmp_source_name_26, const_str_plain_stderr_thread );
            if ( tmp_called_instance_7 == NULL )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 1272;
                type_description_1 = "oooooo";
                goto frame_exception_exit_1;
            }
            frame_8def44d887a0ac5f684876bf2dcf6269->m_frame.f_lineno = 1272;
            tmp_call_result_7 = CALL_METHOD_NO_ARGS( tmp_called_instance_7, const_str_plain_is_alive );
            Py_DECREF( tmp_called_instance_7 );
            if ( tmp_call_result_7 == NULL )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 1272;
                type_description_1 = "oooooo";
                goto frame_exception_exit_1;
            }
            tmp_truth_name_5 = CHECK_IF_TRUE( tmp_call_result_7 );
            if ( tmp_truth_name_5 == -1 )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
                Py_DECREF( tmp_call_result_7 );

                exception_lineno = 1272;
                type_description_1 = "oooooo";
                goto frame_exception_exit_1;
            }
            tmp_condition_result_7 = tmp_truth_name_5 == 1 ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
            Py_DECREF( tmp_call_result_7 );
            if ( tmp_condition_result_7 == NUITKA_BOOL_TRUE )
            {
                goto branch_yes_7;
            }
            else
            {
                goto branch_no_7;
            }
            branch_yes_7:;
            {
                PyObject *tmp_raise_type_2;
                PyObject *tmp_called_name_6;
                PyObject *tmp_mvar_value_4;
                PyObject *tmp_args_element_name_8;
                PyObject *tmp_source_name_27;
                PyObject *tmp_args_element_name_9;
                tmp_mvar_value_4 = GET_STRING_DICT_VALUE( moduledict_subprocess, (Nuitka_StringObject *)const_str_plain_TimeoutExpired );

                if (unlikely( tmp_mvar_value_4 == NULL ))
                {
                    tmp_mvar_value_4 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_TimeoutExpired );
                }

                if ( tmp_mvar_value_4 == NULL )
                {

                    exception_type = PyExc_NameError;
                    Py_INCREF( exception_type );
                    exception_value = PyUnicode_FromFormat( "name '%s' is not defined", "TimeoutExpired" );
                    exception_tb = NULL;
                    NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
                    CHAIN_EXCEPTION( exception_value );

                    exception_lineno = 1273;
                    type_description_1 = "oooooo";
                    goto frame_exception_exit_1;
                }

                tmp_called_name_6 = tmp_mvar_value_4;
                CHECK_OBJECT( par_self );
                tmp_source_name_27 = par_self;
                tmp_args_element_name_8 = LOOKUP_ATTRIBUTE( tmp_source_name_27, const_str_plain_args );
                if ( tmp_args_element_name_8 == NULL )
                {
                    assert( ERROR_OCCURRED() );

                    FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                    exception_lineno = 1273;
                    type_description_1 = "oooooo";
                    goto frame_exception_exit_1;
                }
                CHECK_OBJECT( par_orig_timeout );
                tmp_args_element_name_9 = par_orig_timeout;
                frame_8def44d887a0ac5f684876bf2dcf6269->m_frame.f_lineno = 1273;
                {
                    PyObject *call_args[] = { tmp_args_element_name_8, tmp_args_element_name_9 };
                    tmp_raise_type_2 = CALL_FUNCTION_WITH_ARGS2( tmp_called_name_6, call_args );
                }

                Py_DECREF( tmp_args_element_name_8 );
                if ( tmp_raise_type_2 == NULL )
                {
                    assert( ERROR_OCCURRED() );

                    FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                    exception_lineno = 1273;
                    type_description_1 = "oooooo";
                    goto frame_exception_exit_1;
                }
                exception_type = tmp_raise_type_2;
                exception_lineno = 1273;
                RAISE_EXCEPTION_WITH_TYPE( &exception_type, &exception_value, &exception_tb );
                type_description_1 = "oooooo";
                goto frame_exception_exit_1;
            }
            branch_no_7:;
        }
        branch_no_6:;
    }
    {
        PyObject *tmp_assign_source_1;
        tmp_assign_source_1 = Py_None;
        assert( var_stdout == NULL );
        Py_INCREF( tmp_assign_source_1 );
        var_stdout = tmp_assign_source_1;
    }
    {
        PyObject *tmp_assign_source_2;
        tmp_assign_source_2 = Py_None;
        assert( var_stderr == NULL );
        Py_INCREF( tmp_assign_source_2 );
        var_stderr = tmp_assign_source_2;
    }
    {
        nuitka_bool tmp_condition_result_8;
        PyObject *tmp_source_name_28;
        PyObject *tmp_attribute_value_4;
        int tmp_truth_name_6;
        CHECK_OBJECT( par_self );
        tmp_source_name_28 = par_self;
        tmp_attribute_value_4 = LOOKUP_ATTRIBUTE( tmp_source_name_28, const_str_plain_stdout );
        if ( tmp_attribute_value_4 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 1279;
            type_description_1 = "oooooo";
            goto frame_exception_exit_1;
        }
        tmp_truth_name_6 = CHECK_IF_TRUE( tmp_attribute_value_4 );
        if ( tmp_truth_name_6 == -1 )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
            Py_DECREF( tmp_attribute_value_4 );

            exception_lineno = 1279;
            type_description_1 = "oooooo";
            goto frame_exception_exit_1;
        }
        tmp_condition_result_8 = tmp_truth_name_6 == 1 ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
        Py_DECREF( tmp_attribute_value_4 );
        if ( tmp_condition_result_8 == NUITKA_BOOL_TRUE )
        {
            goto branch_yes_8;
        }
        else
        {
            goto branch_no_8;
        }
        branch_yes_8:;
        {
            PyObject *tmp_assign_source_3;
            PyObject *tmp_source_name_29;
            CHECK_OBJECT( par_self );
            tmp_source_name_29 = par_self;
            tmp_assign_source_3 = LOOKUP_ATTRIBUTE( tmp_source_name_29, const_str_plain__stdout_buff );
            if ( tmp_assign_source_3 == NULL )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 1280;
                type_description_1 = "oooooo";
                goto frame_exception_exit_1;
            }
            {
                PyObject *old = var_stdout;
                assert( old != NULL );
                var_stdout = tmp_assign_source_3;
                Py_DECREF( old );
            }

        }
        {
            PyObject *tmp_called_instance_8;
            PyObject *tmp_source_name_30;
            PyObject *tmp_call_result_8;
            CHECK_OBJECT( par_self );
            tmp_source_name_30 = par_self;
            tmp_called_instance_8 = LOOKUP_ATTRIBUTE( tmp_source_name_30, const_str_plain_stdout );
            if ( tmp_called_instance_8 == NULL )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 1281;
                type_description_1 = "oooooo";
                goto frame_exception_exit_1;
            }
            frame_8def44d887a0ac5f684876bf2dcf6269->m_frame.f_lineno = 1281;
            tmp_call_result_8 = CALL_METHOD_NO_ARGS( tmp_called_instance_8, const_str_plain_close );
            Py_DECREF( tmp_called_instance_8 );
            if ( tmp_call_result_8 == NULL )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 1281;
                type_description_1 = "oooooo";
                goto frame_exception_exit_1;
            }
            Py_DECREF( tmp_call_result_8 );
        }
        branch_no_8:;
    }
    {
        nuitka_bool tmp_condition_result_9;
        PyObject *tmp_source_name_31;
        PyObject *tmp_attribute_value_5;
        int tmp_truth_name_7;
        CHECK_OBJECT( par_self );
        tmp_source_name_31 = par_self;
        tmp_attribute_value_5 = LOOKUP_ATTRIBUTE( tmp_source_name_31, const_str_plain_stderr );
        if ( tmp_attribute_value_5 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 1282;
            type_description_1 = "oooooo";
            goto frame_exception_exit_1;
        }
        tmp_truth_name_7 = CHECK_IF_TRUE( tmp_attribute_value_5 );
        if ( tmp_truth_name_7 == -1 )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
            Py_DECREF( tmp_attribute_value_5 );

            exception_lineno = 1282;
            type_description_1 = "oooooo";
            goto frame_exception_exit_1;
        }
        tmp_condition_result_9 = tmp_truth_name_7 == 1 ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
        Py_DECREF( tmp_attribute_value_5 );
        if ( tmp_condition_result_9 == NUITKA_BOOL_TRUE )
        {
            goto branch_yes_9;
        }
        else
        {
            goto branch_no_9;
        }
        branch_yes_9:;
        {
            PyObject *tmp_assign_source_4;
            PyObject *tmp_source_name_32;
            CHECK_OBJECT( par_self );
            tmp_source_name_32 = par_self;
            tmp_assign_source_4 = LOOKUP_ATTRIBUTE( tmp_source_name_32, const_str_plain__stderr_buff );
            if ( tmp_assign_source_4 == NULL )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 1283;
                type_description_1 = "oooooo";
                goto frame_exception_exit_1;
            }
            {
                PyObject *old = var_stderr;
                assert( old != NULL );
                var_stderr = tmp_assign_source_4;
                Py_DECREF( old );
            }

        }
        {
            PyObject *tmp_called_instance_9;
            PyObject *tmp_source_name_33;
            PyObject *tmp_call_result_9;
            CHECK_OBJECT( par_self );
            tmp_source_name_33 = par_self;
            tmp_called_instance_9 = LOOKUP_ATTRIBUTE( tmp_source_name_33, const_str_plain_stderr );
            if ( tmp_called_instance_9 == NULL )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 1284;
                type_description_1 = "oooooo";
                goto frame_exception_exit_1;
            }
            frame_8def44d887a0ac5f684876bf2dcf6269->m_frame.f_lineno = 1284;
            tmp_call_result_9 = CALL_METHOD_NO_ARGS( tmp_called_instance_9, const_str_plain_close );
            Py_DECREF( tmp_called_instance_9 );
            if ( tmp_call_result_9 == NULL )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 1284;
                type_description_1 = "oooooo";
                goto frame_exception_exit_1;
            }
            Py_DECREF( tmp_call_result_9 );
        }
        branch_no_9:;
    }
    {
        nuitka_bool tmp_condition_result_10;
        PyObject *tmp_compexpr_left_3;
        PyObject *tmp_compexpr_right_3;
        CHECK_OBJECT( var_stdout );
        tmp_compexpr_left_3 = var_stdout;
        tmp_compexpr_right_3 = Py_None;
        tmp_condition_result_10 = ( tmp_compexpr_left_3 != tmp_compexpr_right_3 ) ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
        if ( tmp_condition_result_10 == NUITKA_BOOL_TRUE )
        {
            goto branch_yes_10;
        }
        else
        {
            goto branch_no_10;
        }
        branch_yes_10:;
        {
            PyObject *tmp_assign_source_5;
            PyObject *tmp_subscribed_name_1;
            PyObject *tmp_subscript_name_1;
            CHECK_OBJECT( var_stdout );
            tmp_subscribed_name_1 = var_stdout;
            tmp_subscript_name_1 = const_int_0;
            tmp_assign_source_5 = LOOKUP_SUBSCRIPT_CONST( tmp_subscribed_name_1, tmp_subscript_name_1, 0 );
            if ( tmp_assign_source_5 == NULL )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 1288;
                type_description_1 = "oooooo";
                goto frame_exception_exit_1;
            }
            {
                PyObject *old = var_stdout;
                assert( old != NULL );
                var_stdout = tmp_assign_source_5;
                Py_DECREF( old );
            }

        }
        branch_no_10:;
    }
    {
        nuitka_bool tmp_condition_result_11;
        PyObject *tmp_compexpr_left_4;
        PyObject *tmp_compexpr_right_4;
        CHECK_OBJECT( var_stderr );
        tmp_compexpr_left_4 = var_stderr;
        tmp_compexpr_right_4 = Py_None;
        tmp_condition_result_11 = ( tmp_compexpr_left_4 != tmp_compexpr_right_4 ) ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
        if ( tmp_condition_result_11 == NUITKA_BOOL_TRUE )
        {
            goto branch_yes_11;
        }
        else
        {
            goto branch_no_11;
        }
        branch_yes_11:;
        {
            PyObject *tmp_assign_source_6;
            PyObject *tmp_subscribed_name_2;
            PyObject *tmp_subscript_name_2;
            CHECK_OBJECT( var_stderr );
            tmp_subscribed_name_2 = var_stderr;
            tmp_subscript_name_2 = const_int_0;
            tmp_assign_source_6 = LOOKUP_SUBSCRIPT_CONST( tmp_subscribed_name_2, tmp_subscript_name_2, 0 );
            if ( tmp_assign_source_6 == NULL )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 1290;
                type_description_1 = "oooooo";
                goto frame_exception_exit_1;
            }
            {
                PyObject *old = var_stderr;
                assert( old != NULL );
                var_stderr = tmp_assign_source_6;
                Py_DECREF( old );
            }

        }
        branch_no_11:;
    }
    {
        PyObject *tmp_tuple_element_3;
        if ( var_stdout == NULL )
        {

            exception_type = PyExc_UnboundLocalError;
            Py_INCREF( exception_type );
            exception_value = PyUnicode_FromFormat( "local variable '%s' referenced before assignment", "stdout" );
            exception_tb = NULL;
            NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
            CHAIN_EXCEPTION( exception_value );

            exception_lineno = 1292;
            type_description_1 = "oooooo";
            goto frame_exception_exit_1;
        }

        tmp_tuple_element_3 = var_stdout;
        tmp_return_value = PyTuple_New( 2 );
        Py_INCREF( tmp_tuple_element_3 );
        PyTuple_SET_ITEM( tmp_return_value, 0, tmp_tuple_element_3 );
        if ( var_stderr == NULL )
        {
            Py_DECREF( tmp_return_value );
            exception_type = PyExc_UnboundLocalError;
            Py_INCREF( exception_type );
            exception_value = PyUnicode_FromFormat( "local variable '%s' referenced before assignment", "stderr" );
            exception_tb = NULL;
            NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
            CHAIN_EXCEPTION( exception_value );

            exception_lineno = 1292;
            type_description_1 = "oooooo";
            goto frame_exception_exit_1;
        }

        tmp_tuple_element_3 = var_stderr;
        Py_INCREF( tmp_tuple_element_3 );
        PyTuple_SET_ITEM( tmp_return_value, 1, tmp_tuple_element_3 );
        goto frame_return_exit_1;
    }

#if 0
    RESTORE_FRAME_EXCEPTION( frame_8def44d887a0ac5f684876bf2dcf6269 );
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto frame_no_exception_1;

    frame_return_exit_1:;
#if 0
    RESTORE_FRAME_EXCEPTION( frame_8def44d887a0ac5f684876bf2dcf6269 );
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto try_return_handler_1;

    frame_exception_exit_1:;

#if 0
    RESTORE_FRAME_EXCEPTION( frame_8def44d887a0ac5f684876bf2dcf6269 );
#endif

    if ( exception_tb == NULL )
    {
        exception_tb = MAKE_TRACEBACK( frame_8def44d887a0ac5f684876bf2dcf6269, exception_lineno );
    }
    else if ( exception_tb->tb_frame != &frame_8def44d887a0ac5f684876bf2dcf6269->m_frame )
    {
        exception_tb = ADD_TRACEBACK( exception_tb, frame_8def44d887a0ac5f684876bf2dcf6269, exception_lineno );
    }

    // Attachs locals to frame if any.
    Nuitka_Frame_AttachLocals(
        (struct Nuitka_FrameObject *)frame_8def44d887a0ac5f684876bf2dcf6269,
        type_description_1,
        par_self,
        par_input,
        par_endtime,
        par_orig_timeout,
        var_stdout,
        var_stderr
    );


    // Release cached frame.
    if ( frame_8def44d887a0ac5f684876bf2dcf6269 == cache_frame_8def44d887a0ac5f684876bf2dcf6269 )
    {
        Py_DECREF( frame_8def44d887a0ac5f684876bf2dcf6269 );
    }
    cache_frame_8def44d887a0ac5f684876bf2dcf6269 = NULL;

    assertFrameObject( frame_8def44d887a0ac5f684876bf2dcf6269 );

    // Put the previous frame back on top.
    popFrameStack();

    // Return the error.
    goto try_except_handler_1;

    frame_no_exception_1:;
    // tried codes exits in all cases
    NUITKA_CANNOT_GET_HERE( subprocess$$$function_48__communicate );
    return NULL;
    // Return handler code:
    try_return_handler_1:;
    CHECK_OBJECT( (PyObject *)par_self );
    Py_DECREF( par_self );
    par_self = NULL;

    CHECK_OBJECT( (PyObject *)par_input );
    Py_DECREF( par_input );
    par_input = NULL;

    CHECK_OBJECT( (PyObject *)par_endtime );
    Py_DECREF( par_endtime );
    par_endtime = NULL;

    CHECK_OBJECT( (PyObject *)par_orig_timeout );
    Py_DECREF( par_orig_timeout );
    par_orig_timeout = NULL;

    Py_XDECREF( var_stdout );
    var_stdout = NULL;

    Py_XDECREF( var_stderr );
    var_stderr = NULL;

    goto function_return_exit;
    // Exception handler code:
    try_except_handler_1:;
    exception_keeper_type_1 = exception_type;
    exception_keeper_value_1 = exception_value;
    exception_keeper_tb_1 = exception_tb;
    exception_keeper_lineno_1 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    CHECK_OBJECT( (PyObject *)par_self );
    Py_DECREF( par_self );
    par_self = NULL;

    CHECK_OBJECT( (PyObject *)par_input );
    Py_DECREF( par_input );
    par_input = NULL;

    CHECK_OBJECT( (PyObject *)par_endtime );
    Py_DECREF( par_endtime );
    par_endtime = NULL;

    CHECK_OBJECT( (PyObject *)par_orig_timeout );
    Py_DECREF( par_orig_timeout );
    par_orig_timeout = NULL;

    Py_XDECREF( var_stdout );
    var_stdout = NULL;

    Py_XDECREF( var_stderr );
    var_stderr = NULL;

    // Re-raise.
    exception_type = exception_keeper_type_1;
    exception_value = exception_keeper_value_1;
    exception_tb = exception_keeper_tb_1;
    exception_lineno = exception_keeper_lineno_1;

    goto function_exception_exit;
    // End of try:

    // Return statement must have exited already.
    NUITKA_CANNOT_GET_HERE( subprocess$$$function_48__communicate );
    return NULL;

function_exception_exit:
    assert( exception_type );
    RESTORE_ERROR_OCCURRED( exception_type, exception_value, exception_tb );

    return NULL;

function_return_exit:
   // Function cleanup code if any.


   // Actual function exit with return value, making sure we did not make
   // the error status worse despite non-NULL return.
   CHECK_OBJECT( tmp_return_value );
   assert( had_error || !ERROR_OCCURRED() );
   return tmp_return_value;
}


static PyObject *impl_subprocess$$$function_49_send_signal( struct Nuitka_FunctionObject const *self, PyObject **python_pars )
{
    // Preserve error status for checks
#ifndef __NUITKA_NO_ASSERT__
    NUITKA_MAY_BE_UNUSED bool had_error = ERROR_OCCURRED();
#endif

    // Local variable declarations.
    PyObject *par_self = python_pars[ 0 ];
    PyObject *par_sig = python_pars[ 1 ];
    struct Nuitka_FrameObject *frame_f2e84d6d5d5d645355d81357adbd86d6;
    NUITKA_MAY_BE_UNUSED char const *type_description_1 = NULL;
    PyObject *exception_type = NULL;
    PyObject *exception_value = NULL;
    PyTracebackObject *exception_tb = NULL;
    NUITKA_MAY_BE_UNUSED int exception_lineno = 0;
    PyObject *tmp_return_value = NULL;
    int tmp_res;
    static struct Nuitka_FrameObject *cache_frame_f2e84d6d5d5d645355d81357adbd86d6 = NULL;
    PyObject *exception_keeper_type_1;
    PyObject *exception_keeper_value_1;
    PyTracebackObject *exception_keeper_tb_1;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_1;

    // Actual function body.
    // Tried code:
    MAKE_OR_REUSE_FRAME( cache_frame_f2e84d6d5d5d645355d81357adbd86d6, codeobj_f2e84d6d5d5d645355d81357adbd86d6, module_subprocess, sizeof(void *)+sizeof(void *) );
    frame_f2e84d6d5d5d645355d81357adbd86d6 = cache_frame_f2e84d6d5d5d645355d81357adbd86d6;

    // Push the new frame as the currently active one.
    pushFrameStack( frame_f2e84d6d5d5d645355d81357adbd86d6 );

    // Mark the frame object as in use, ref count 1 will be up for reuse.
    assert( Py_REFCNT( frame_f2e84d6d5d5d645355d81357adbd86d6 ) == 2 ); // Frame stack

    // Framed code:
    {
        nuitka_bool tmp_condition_result_1;
        PyObject *tmp_compexpr_left_1;
        PyObject *tmp_compexpr_right_1;
        PyObject *tmp_source_name_1;
        CHECK_OBJECT( par_self );
        tmp_source_name_1 = par_self;
        tmp_compexpr_left_1 = LOOKUP_ATTRIBUTE( tmp_source_name_1, const_str_plain_returncode );
        if ( tmp_compexpr_left_1 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 1297;
            type_description_1 = "oo";
            goto frame_exception_exit_1;
        }
        tmp_compexpr_right_1 = Py_None;
        tmp_condition_result_1 = ( tmp_compexpr_left_1 != tmp_compexpr_right_1 ) ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
        Py_DECREF( tmp_compexpr_left_1 );
        if ( tmp_condition_result_1 == NUITKA_BOOL_TRUE )
        {
            goto branch_yes_1;
        }
        else
        {
            goto branch_no_1;
        }
        branch_yes_1:;
        tmp_return_value = Py_None;
        Py_INCREF( tmp_return_value );
        goto frame_return_exit_1;
        branch_no_1:;
    }
    {
        nuitka_bool tmp_condition_result_2;
        PyObject *tmp_compexpr_left_2;
        PyObject *tmp_compexpr_right_2;
        PyObject *tmp_source_name_2;
        PyObject *tmp_mvar_value_1;
        CHECK_OBJECT( par_sig );
        tmp_compexpr_left_2 = par_sig;
        tmp_mvar_value_1 = GET_STRING_DICT_VALUE( moduledict_subprocess, (Nuitka_StringObject *)const_str_plain_signal );

        if (unlikely( tmp_mvar_value_1 == NULL ))
        {
            tmp_mvar_value_1 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_signal );
        }

        if ( tmp_mvar_value_1 == NULL )
        {

            exception_type = PyExc_NameError;
            Py_INCREF( exception_type );
            exception_value = PyUnicode_FromFormat( "name '%s' is not defined", "signal" );
            exception_tb = NULL;
            NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
            CHAIN_EXCEPTION( exception_value );

            exception_lineno = 1299;
            type_description_1 = "oo";
            goto frame_exception_exit_1;
        }

        tmp_source_name_2 = tmp_mvar_value_1;
        tmp_compexpr_right_2 = LOOKUP_ATTRIBUTE( tmp_source_name_2, const_str_plain_SIGTERM );
        if ( tmp_compexpr_right_2 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 1299;
            type_description_1 = "oo";
            goto frame_exception_exit_1;
        }
        tmp_res = RICH_COMPARE_BOOL_EQ_OBJECT_OBJECT( tmp_compexpr_left_2, tmp_compexpr_right_2 );
        Py_DECREF( tmp_compexpr_right_2 );
        if ( tmp_res == -1 )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 1299;
            type_description_1 = "oo";
            goto frame_exception_exit_1;
        }
        tmp_condition_result_2 = ( tmp_res != 0 ) ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
        if ( tmp_condition_result_2 == NUITKA_BOOL_TRUE )
        {
            goto branch_yes_2;
        }
        else
        {
            goto branch_no_2;
        }
        branch_yes_2:;
        {
            PyObject *tmp_called_instance_1;
            PyObject *tmp_call_result_1;
            CHECK_OBJECT( par_self );
            tmp_called_instance_1 = par_self;
            frame_f2e84d6d5d5d645355d81357adbd86d6->m_frame.f_lineno = 1300;
            tmp_call_result_1 = CALL_METHOD_NO_ARGS( tmp_called_instance_1, const_str_plain_terminate );
            if ( tmp_call_result_1 == NULL )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 1300;
                type_description_1 = "oo";
                goto frame_exception_exit_1;
            }
            Py_DECREF( tmp_call_result_1 );
        }
        goto branch_end_2;
        branch_no_2:;
        {
            nuitka_bool tmp_condition_result_3;
            PyObject *tmp_compexpr_left_3;
            PyObject *tmp_compexpr_right_3;
            PyObject *tmp_source_name_3;
            PyObject *tmp_mvar_value_2;
            CHECK_OBJECT( par_sig );
            tmp_compexpr_left_3 = par_sig;
            tmp_mvar_value_2 = GET_STRING_DICT_VALUE( moduledict_subprocess, (Nuitka_StringObject *)const_str_plain_signal );

            if (unlikely( tmp_mvar_value_2 == NULL ))
            {
                tmp_mvar_value_2 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_signal );
            }

            if ( tmp_mvar_value_2 == NULL )
            {

                exception_type = PyExc_NameError;
                Py_INCREF( exception_type );
                exception_value = PyUnicode_FromFormat( "name '%s' is not defined", "signal" );
                exception_tb = NULL;
                NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
                CHAIN_EXCEPTION( exception_value );

                exception_lineno = 1301;
                type_description_1 = "oo";
                goto frame_exception_exit_1;
            }

            tmp_source_name_3 = tmp_mvar_value_2;
            tmp_compexpr_right_3 = LOOKUP_ATTRIBUTE( tmp_source_name_3, const_str_plain_CTRL_C_EVENT );
            if ( tmp_compexpr_right_3 == NULL )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 1301;
                type_description_1 = "oo";
                goto frame_exception_exit_1;
            }
            tmp_res = RICH_COMPARE_BOOL_EQ_OBJECT_OBJECT( tmp_compexpr_left_3, tmp_compexpr_right_3 );
            Py_DECREF( tmp_compexpr_right_3 );
            if ( tmp_res == -1 )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 1301;
                type_description_1 = "oo";
                goto frame_exception_exit_1;
            }
            tmp_condition_result_3 = ( tmp_res != 0 ) ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
            if ( tmp_condition_result_3 == NUITKA_BOOL_TRUE )
            {
                goto branch_yes_3;
            }
            else
            {
                goto branch_no_3;
            }
            branch_yes_3:;
            {
                PyObject *tmp_called_name_1;
                PyObject *tmp_source_name_4;
                PyObject *tmp_mvar_value_3;
                PyObject *tmp_call_result_2;
                PyObject *tmp_args_element_name_1;
                PyObject *tmp_source_name_5;
                PyObject *tmp_args_element_name_2;
                PyObject *tmp_source_name_6;
                PyObject *tmp_mvar_value_4;
                tmp_mvar_value_3 = GET_STRING_DICT_VALUE( moduledict_subprocess, (Nuitka_StringObject *)const_str_plain_os );

                if (unlikely( tmp_mvar_value_3 == NULL ))
                {
                    tmp_mvar_value_3 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_os );
                }

                if ( tmp_mvar_value_3 == NULL )
                {

                    exception_type = PyExc_NameError;
                    Py_INCREF( exception_type );
                    exception_value = PyUnicode_FromFormat( "name '%s' is not defined", "os" );
                    exception_tb = NULL;
                    NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
                    CHAIN_EXCEPTION( exception_value );

                    exception_lineno = 1302;
                    type_description_1 = "oo";
                    goto frame_exception_exit_1;
                }

                tmp_source_name_4 = tmp_mvar_value_3;
                tmp_called_name_1 = LOOKUP_ATTRIBUTE( tmp_source_name_4, const_str_plain_kill );
                if ( tmp_called_name_1 == NULL )
                {
                    assert( ERROR_OCCURRED() );

                    FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                    exception_lineno = 1302;
                    type_description_1 = "oo";
                    goto frame_exception_exit_1;
                }
                CHECK_OBJECT( par_self );
                tmp_source_name_5 = par_self;
                tmp_args_element_name_1 = LOOKUP_ATTRIBUTE( tmp_source_name_5, const_str_plain_pid );
                if ( tmp_args_element_name_1 == NULL )
                {
                    assert( ERROR_OCCURRED() );

                    FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
                    Py_DECREF( tmp_called_name_1 );

                    exception_lineno = 1302;
                    type_description_1 = "oo";
                    goto frame_exception_exit_1;
                }
                tmp_mvar_value_4 = GET_STRING_DICT_VALUE( moduledict_subprocess, (Nuitka_StringObject *)const_str_plain_signal );

                if (unlikely( tmp_mvar_value_4 == NULL ))
                {
                    tmp_mvar_value_4 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_signal );
                }

                if ( tmp_mvar_value_4 == NULL )
                {
                    Py_DECREF( tmp_called_name_1 );
                    Py_DECREF( tmp_args_element_name_1 );
                    exception_type = PyExc_NameError;
                    Py_INCREF( exception_type );
                    exception_value = PyUnicode_FromFormat( "name '%s' is not defined", "signal" );
                    exception_tb = NULL;
                    NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
                    CHAIN_EXCEPTION( exception_value );

                    exception_lineno = 1302;
                    type_description_1 = "oo";
                    goto frame_exception_exit_1;
                }

                tmp_source_name_6 = tmp_mvar_value_4;
                tmp_args_element_name_2 = LOOKUP_ATTRIBUTE( tmp_source_name_6, const_str_plain_CTRL_C_EVENT );
                if ( tmp_args_element_name_2 == NULL )
                {
                    assert( ERROR_OCCURRED() );

                    FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
                    Py_DECREF( tmp_called_name_1 );
                    Py_DECREF( tmp_args_element_name_1 );

                    exception_lineno = 1302;
                    type_description_1 = "oo";
                    goto frame_exception_exit_1;
                }
                frame_f2e84d6d5d5d645355d81357adbd86d6->m_frame.f_lineno = 1302;
                {
                    PyObject *call_args[] = { tmp_args_element_name_1, tmp_args_element_name_2 };
                    tmp_call_result_2 = CALL_FUNCTION_WITH_ARGS2( tmp_called_name_1, call_args );
                }

                Py_DECREF( tmp_called_name_1 );
                Py_DECREF( tmp_args_element_name_1 );
                Py_DECREF( tmp_args_element_name_2 );
                if ( tmp_call_result_2 == NULL )
                {
                    assert( ERROR_OCCURRED() );

                    FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                    exception_lineno = 1302;
                    type_description_1 = "oo";
                    goto frame_exception_exit_1;
                }
                Py_DECREF( tmp_call_result_2 );
            }
            goto branch_end_3;
            branch_no_3:;
            {
                nuitka_bool tmp_condition_result_4;
                PyObject *tmp_compexpr_left_4;
                PyObject *tmp_compexpr_right_4;
                PyObject *tmp_source_name_7;
                PyObject *tmp_mvar_value_5;
                CHECK_OBJECT( par_sig );
                tmp_compexpr_left_4 = par_sig;
                tmp_mvar_value_5 = GET_STRING_DICT_VALUE( moduledict_subprocess, (Nuitka_StringObject *)const_str_plain_signal );

                if (unlikely( tmp_mvar_value_5 == NULL ))
                {
                    tmp_mvar_value_5 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_signal );
                }

                if ( tmp_mvar_value_5 == NULL )
                {

                    exception_type = PyExc_NameError;
                    Py_INCREF( exception_type );
                    exception_value = PyUnicode_FromFormat( "name '%s' is not defined", "signal" );
                    exception_tb = NULL;
                    NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
                    CHAIN_EXCEPTION( exception_value );

                    exception_lineno = 1303;
                    type_description_1 = "oo";
                    goto frame_exception_exit_1;
                }

                tmp_source_name_7 = tmp_mvar_value_5;
                tmp_compexpr_right_4 = LOOKUP_ATTRIBUTE( tmp_source_name_7, const_str_plain_CTRL_BREAK_EVENT );
                if ( tmp_compexpr_right_4 == NULL )
                {
                    assert( ERROR_OCCURRED() );

                    FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                    exception_lineno = 1303;
                    type_description_1 = "oo";
                    goto frame_exception_exit_1;
                }
                tmp_res = RICH_COMPARE_BOOL_EQ_OBJECT_OBJECT( tmp_compexpr_left_4, tmp_compexpr_right_4 );
                Py_DECREF( tmp_compexpr_right_4 );
                if ( tmp_res == -1 )
                {
                    assert( ERROR_OCCURRED() );

                    FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                    exception_lineno = 1303;
                    type_description_1 = "oo";
                    goto frame_exception_exit_1;
                }
                tmp_condition_result_4 = ( tmp_res != 0 ) ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
                if ( tmp_condition_result_4 == NUITKA_BOOL_TRUE )
                {
                    goto branch_yes_4;
                }
                else
                {
                    goto branch_no_4;
                }
                branch_yes_4:;
                {
                    PyObject *tmp_called_name_2;
                    PyObject *tmp_source_name_8;
                    PyObject *tmp_mvar_value_6;
                    PyObject *tmp_call_result_3;
                    PyObject *tmp_args_element_name_3;
                    PyObject *tmp_source_name_9;
                    PyObject *tmp_args_element_name_4;
                    PyObject *tmp_source_name_10;
                    PyObject *tmp_mvar_value_7;
                    tmp_mvar_value_6 = GET_STRING_DICT_VALUE( moduledict_subprocess, (Nuitka_StringObject *)const_str_plain_os );

                    if (unlikely( tmp_mvar_value_6 == NULL ))
                    {
                        tmp_mvar_value_6 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_os );
                    }

                    if ( tmp_mvar_value_6 == NULL )
                    {

                        exception_type = PyExc_NameError;
                        Py_INCREF( exception_type );
                        exception_value = PyUnicode_FromFormat( "name '%s' is not defined", "os" );
                        exception_tb = NULL;
                        NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
                        CHAIN_EXCEPTION( exception_value );

                        exception_lineno = 1304;
                        type_description_1 = "oo";
                        goto frame_exception_exit_1;
                    }

                    tmp_source_name_8 = tmp_mvar_value_6;
                    tmp_called_name_2 = LOOKUP_ATTRIBUTE( tmp_source_name_8, const_str_plain_kill );
                    if ( tmp_called_name_2 == NULL )
                    {
                        assert( ERROR_OCCURRED() );

                        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                        exception_lineno = 1304;
                        type_description_1 = "oo";
                        goto frame_exception_exit_1;
                    }
                    CHECK_OBJECT( par_self );
                    tmp_source_name_9 = par_self;
                    tmp_args_element_name_3 = LOOKUP_ATTRIBUTE( tmp_source_name_9, const_str_plain_pid );
                    if ( tmp_args_element_name_3 == NULL )
                    {
                        assert( ERROR_OCCURRED() );

                        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
                        Py_DECREF( tmp_called_name_2 );

                        exception_lineno = 1304;
                        type_description_1 = "oo";
                        goto frame_exception_exit_1;
                    }
                    tmp_mvar_value_7 = GET_STRING_DICT_VALUE( moduledict_subprocess, (Nuitka_StringObject *)const_str_plain_signal );

                    if (unlikely( tmp_mvar_value_7 == NULL ))
                    {
                        tmp_mvar_value_7 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_signal );
                    }

                    if ( tmp_mvar_value_7 == NULL )
                    {
                        Py_DECREF( tmp_called_name_2 );
                        Py_DECREF( tmp_args_element_name_3 );
                        exception_type = PyExc_NameError;
                        Py_INCREF( exception_type );
                        exception_value = PyUnicode_FromFormat( "name '%s' is not defined", "signal" );
                        exception_tb = NULL;
                        NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
                        CHAIN_EXCEPTION( exception_value );

                        exception_lineno = 1304;
                        type_description_1 = "oo";
                        goto frame_exception_exit_1;
                    }

                    tmp_source_name_10 = tmp_mvar_value_7;
                    tmp_args_element_name_4 = LOOKUP_ATTRIBUTE( tmp_source_name_10, const_str_plain_CTRL_BREAK_EVENT );
                    if ( tmp_args_element_name_4 == NULL )
                    {
                        assert( ERROR_OCCURRED() );

                        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
                        Py_DECREF( tmp_called_name_2 );
                        Py_DECREF( tmp_args_element_name_3 );

                        exception_lineno = 1304;
                        type_description_1 = "oo";
                        goto frame_exception_exit_1;
                    }
                    frame_f2e84d6d5d5d645355d81357adbd86d6->m_frame.f_lineno = 1304;
                    {
                        PyObject *call_args[] = { tmp_args_element_name_3, tmp_args_element_name_4 };
                        tmp_call_result_3 = CALL_FUNCTION_WITH_ARGS2( tmp_called_name_2, call_args );
                    }

                    Py_DECREF( tmp_called_name_2 );
                    Py_DECREF( tmp_args_element_name_3 );
                    Py_DECREF( tmp_args_element_name_4 );
                    if ( tmp_call_result_3 == NULL )
                    {
                        assert( ERROR_OCCURRED() );

                        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                        exception_lineno = 1304;
                        type_description_1 = "oo";
                        goto frame_exception_exit_1;
                    }
                    Py_DECREF( tmp_call_result_3 );
                }
                goto branch_end_4;
                branch_no_4:;
                {
                    PyObject *tmp_raise_type_1;
                    PyObject *tmp_make_exception_arg_1;
                    PyObject *tmp_called_instance_2;
                    PyObject *tmp_args_element_name_5;
                    tmp_called_instance_2 = const_str_digest_5d726b70cb8fe8b5fcc08d6baecaf12d;
                    CHECK_OBJECT( par_sig );
                    tmp_args_element_name_5 = par_sig;
                    frame_f2e84d6d5d5d645355d81357adbd86d6->m_frame.f_lineno = 1306;
                    {
                        PyObject *call_args[] = { tmp_args_element_name_5 };
                        tmp_make_exception_arg_1 = CALL_METHOD_WITH_ARGS1( tmp_called_instance_2, const_str_plain_format, call_args );
                    }

                    if ( tmp_make_exception_arg_1 == NULL )
                    {
                        assert( ERROR_OCCURRED() );

                        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                        exception_lineno = 1306;
                        type_description_1 = "oo";
                        goto frame_exception_exit_1;
                    }
                    frame_f2e84d6d5d5d645355d81357adbd86d6->m_frame.f_lineno = 1306;
                    {
                        PyObject *call_args[] = { tmp_make_exception_arg_1 };
                        tmp_raise_type_1 = CALL_FUNCTION_WITH_ARGS1( PyExc_ValueError, call_args );
                    }

                    Py_DECREF( tmp_make_exception_arg_1 );
                    assert( !(tmp_raise_type_1 == NULL) );
                    exception_type = tmp_raise_type_1;
                    exception_lineno = 1306;
                    RAISE_EXCEPTION_WITH_TYPE( &exception_type, &exception_value, &exception_tb );
                    type_description_1 = "oo";
                    goto frame_exception_exit_1;
                }
                branch_end_4:;
            }
            branch_end_3:;
        }
        branch_end_2:;
    }

#if 0
    RESTORE_FRAME_EXCEPTION( frame_f2e84d6d5d5d645355d81357adbd86d6 );
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto frame_no_exception_1;

    frame_return_exit_1:;
#if 0
    RESTORE_FRAME_EXCEPTION( frame_f2e84d6d5d5d645355d81357adbd86d6 );
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto try_return_handler_1;

    frame_exception_exit_1:;

#if 0
    RESTORE_FRAME_EXCEPTION( frame_f2e84d6d5d5d645355d81357adbd86d6 );
#endif

    if ( exception_tb == NULL )
    {
        exception_tb = MAKE_TRACEBACK( frame_f2e84d6d5d5d645355d81357adbd86d6, exception_lineno );
    }
    else if ( exception_tb->tb_frame != &frame_f2e84d6d5d5d645355d81357adbd86d6->m_frame )
    {
        exception_tb = ADD_TRACEBACK( exception_tb, frame_f2e84d6d5d5d645355d81357adbd86d6, exception_lineno );
    }

    // Attachs locals to frame if any.
    Nuitka_Frame_AttachLocals(
        (struct Nuitka_FrameObject *)frame_f2e84d6d5d5d645355d81357adbd86d6,
        type_description_1,
        par_self,
        par_sig
    );


    // Release cached frame.
    if ( frame_f2e84d6d5d5d645355d81357adbd86d6 == cache_frame_f2e84d6d5d5d645355d81357adbd86d6 )
    {
        Py_DECREF( frame_f2e84d6d5d5d645355d81357adbd86d6 );
    }
    cache_frame_f2e84d6d5d5d645355d81357adbd86d6 = NULL;

    assertFrameObject( frame_f2e84d6d5d5d645355d81357adbd86d6 );

    // Put the previous frame back on top.
    popFrameStack();

    // Return the error.
    goto try_except_handler_1;

    frame_no_exception_1:;
    tmp_return_value = Py_None;
    Py_INCREF( tmp_return_value );
    goto try_return_handler_1;
    // tried codes exits in all cases
    NUITKA_CANNOT_GET_HERE( subprocess$$$function_49_send_signal );
    return NULL;
    // Return handler code:
    try_return_handler_1:;
    CHECK_OBJECT( (PyObject *)par_self );
    Py_DECREF( par_self );
    par_self = NULL;

    CHECK_OBJECT( (PyObject *)par_sig );
    Py_DECREF( par_sig );
    par_sig = NULL;

    goto function_return_exit;
    // Exception handler code:
    try_except_handler_1:;
    exception_keeper_type_1 = exception_type;
    exception_keeper_value_1 = exception_value;
    exception_keeper_tb_1 = exception_tb;
    exception_keeper_lineno_1 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    CHECK_OBJECT( (PyObject *)par_self );
    Py_DECREF( par_self );
    par_self = NULL;

    CHECK_OBJECT( (PyObject *)par_sig );
    Py_DECREF( par_sig );
    par_sig = NULL;

    // Re-raise.
    exception_type = exception_keeper_type_1;
    exception_value = exception_keeper_value_1;
    exception_tb = exception_keeper_tb_1;
    exception_lineno = exception_keeper_lineno_1;

    goto function_exception_exit;
    // End of try:

    // Return statement must have exited already.
    NUITKA_CANNOT_GET_HERE( subprocess$$$function_49_send_signal );
    return NULL;

function_exception_exit:
    assert( exception_type );
    RESTORE_ERROR_OCCURRED( exception_type, exception_value, exception_tb );

    return NULL;

function_return_exit:
   // Function cleanup code if any.


   // Actual function exit with return value, making sure we did not make
   // the error status worse despite non-NULL return.
   CHECK_OBJECT( tmp_return_value );
   assert( had_error || !ERROR_OCCURRED() );
   return tmp_return_value;
}


static PyObject *impl_subprocess$$$function_50_terminate( struct Nuitka_FunctionObject const *self, PyObject **python_pars )
{
    // Preserve error status for checks
#ifndef __NUITKA_NO_ASSERT__
    NUITKA_MAY_BE_UNUSED bool had_error = ERROR_OCCURRED();
#endif

    // Local variable declarations.
    PyObject *par_self = python_pars[ 0 ];
    PyObject *var_rc = NULL;
    struct Nuitka_FrameObject *frame_5b0375b01e6bdd838edb3483499aae6a;
    NUITKA_MAY_BE_UNUSED char const *type_description_1 = NULL;
    PyObject *exception_type = NULL;
    PyObject *exception_value = NULL;
    PyTracebackObject *exception_tb = NULL;
    NUITKA_MAY_BE_UNUSED int exception_lineno = 0;
    PyObject *tmp_return_value = NULL;
    PyObject *exception_keeper_type_1;
    PyObject *exception_keeper_value_1;
    PyTracebackObject *exception_keeper_tb_1;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_1;
    PyObject *exception_preserved_type_1;
    PyObject *exception_preserved_value_1;
    PyTracebackObject *exception_preserved_tb_1;
    int tmp_res;
    bool tmp_result;
    PyObject *exception_keeper_type_2;
    PyObject *exception_keeper_value_2;
    PyTracebackObject *exception_keeper_tb_2;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_2;
    static struct Nuitka_FrameObject *cache_frame_5b0375b01e6bdd838edb3483499aae6a = NULL;
    PyObject *exception_keeper_type_3;
    PyObject *exception_keeper_value_3;
    PyTracebackObject *exception_keeper_tb_3;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_3;

    // Actual function body.
    // Tried code:
    MAKE_OR_REUSE_FRAME( cache_frame_5b0375b01e6bdd838edb3483499aae6a, codeobj_5b0375b01e6bdd838edb3483499aae6a, module_subprocess, sizeof(void *)+sizeof(void *) );
    frame_5b0375b01e6bdd838edb3483499aae6a = cache_frame_5b0375b01e6bdd838edb3483499aae6a;

    // Push the new frame as the currently active one.
    pushFrameStack( frame_5b0375b01e6bdd838edb3483499aae6a );

    // Mark the frame object as in use, ref count 1 will be up for reuse.
    assert( Py_REFCNT( frame_5b0375b01e6bdd838edb3483499aae6a ) == 2 ); // Frame stack

    // Framed code:
    {
        nuitka_bool tmp_condition_result_1;
        PyObject *tmp_compexpr_left_1;
        PyObject *tmp_compexpr_right_1;
        PyObject *tmp_source_name_1;
        CHECK_OBJECT( par_self );
        tmp_source_name_1 = par_self;
        tmp_compexpr_left_1 = LOOKUP_ATTRIBUTE( tmp_source_name_1, const_str_plain_returncode );
        if ( tmp_compexpr_left_1 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 1311;
            type_description_1 = "oo";
            goto frame_exception_exit_1;
        }
        tmp_compexpr_right_1 = Py_None;
        tmp_condition_result_1 = ( tmp_compexpr_left_1 != tmp_compexpr_right_1 ) ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
        Py_DECREF( tmp_compexpr_left_1 );
        if ( tmp_condition_result_1 == NUITKA_BOOL_TRUE )
        {
            goto branch_yes_1;
        }
        else
        {
            goto branch_no_1;
        }
        branch_yes_1:;
        tmp_return_value = Py_None;
        Py_INCREF( tmp_return_value );
        goto frame_return_exit_1;
        branch_no_1:;
    }
    // Tried code:
    {
        PyObject *tmp_called_name_1;
        PyObject *tmp_source_name_2;
        PyObject *tmp_mvar_value_1;
        PyObject *tmp_call_result_1;
        PyObject *tmp_args_element_name_1;
        PyObject *tmp_source_name_3;
        PyObject *tmp_args_element_name_2;
        tmp_mvar_value_1 = GET_STRING_DICT_VALUE( moduledict_subprocess, (Nuitka_StringObject *)const_str_plain__winapi );

        if (unlikely( tmp_mvar_value_1 == NULL ))
        {
            tmp_mvar_value_1 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain__winapi );
        }

        if ( tmp_mvar_value_1 == NULL )
        {

            exception_type = PyExc_NameError;
            Py_INCREF( exception_type );
            exception_value = PyUnicode_FromFormat( "name '%s' is not defined", "_winapi" );
            exception_tb = NULL;
            NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
            CHAIN_EXCEPTION( exception_value );

            exception_lineno = 1314;
            type_description_1 = "oo";
            goto try_except_handler_2;
        }

        tmp_source_name_2 = tmp_mvar_value_1;
        tmp_called_name_1 = LOOKUP_ATTRIBUTE( tmp_source_name_2, const_str_plain_TerminateProcess );
        if ( tmp_called_name_1 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 1314;
            type_description_1 = "oo";
            goto try_except_handler_2;
        }
        CHECK_OBJECT( par_self );
        tmp_source_name_3 = par_self;
        tmp_args_element_name_1 = LOOKUP_ATTRIBUTE( tmp_source_name_3, const_str_plain__handle );
        if ( tmp_args_element_name_1 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
            Py_DECREF( tmp_called_name_1 );

            exception_lineno = 1314;
            type_description_1 = "oo";
            goto try_except_handler_2;
        }
        tmp_args_element_name_2 = const_int_pos_1;
        frame_5b0375b01e6bdd838edb3483499aae6a->m_frame.f_lineno = 1314;
        {
            PyObject *call_args[] = { tmp_args_element_name_1, tmp_args_element_name_2 };
            tmp_call_result_1 = CALL_FUNCTION_WITH_ARGS2( tmp_called_name_1, call_args );
        }

        Py_DECREF( tmp_called_name_1 );
        Py_DECREF( tmp_args_element_name_1 );
        if ( tmp_call_result_1 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 1314;
            type_description_1 = "oo";
            goto try_except_handler_2;
        }
        Py_DECREF( tmp_call_result_1 );
    }
    goto try_end_1;
    // Exception handler code:
    try_except_handler_2:;
    exception_keeper_type_1 = exception_type;
    exception_keeper_value_1 = exception_value;
    exception_keeper_tb_1 = exception_tb;
    exception_keeper_lineno_1 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    // Preserve existing published exception.
    exception_preserved_type_1 = EXC_TYPE(PyThreadState_GET());
    Py_XINCREF( exception_preserved_type_1 );
    exception_preserved_value_1 = EXC_VALUE(PyThreadState_GET());
    Py_XINCREF( exception_preserved_value_1 );
    exception_preserved_tb_1 = (PyTracebackObject *)EXC_TRACEBACK(PyThreadState_GET());
    Py_XINCREF( exception_preserved_tb_1 );

    if ( exception_keeper_tb_1 == NULL )
    {
        exception_keeper_tb_1 = MAKE_TRACEBACK( frame_5b0375b01e6bdd838edb3483499aae6a, exception_keeper_lineno_1 );
    }
    else if ( exception_keeper_lineno_1 != 0 )
    {
        exception_keeper_tb_1 = ADD_TRACEBACK( exception_keeper_tb_1, frame_5b0375b01e6bdd838edb3483499aae6a, exception_keeper_lineno_1 );
    }

    NORMALIZE_EXCEPTION( &exception_keeper_type_1, &exception_keeper_value_1, &exception_keeper_tb_1 );
    PyException_SetTraceback( exception_keeper_value_1, (PyObject *)exception_keeper_tb_1 );
    PUBLISH_EXCEPTION( &exception_keeper_type_1, &exception_keeper_value_1, &exception_keeper_tb_1 );
    // Tried code:
    {
        nuitka_bool tmp_condition_result_2;
        PyObject *tmp_compexpr_left_2;
        PyObject *tmp_compexpr_right_2;
        tmp_compexpr_left_2 = EXC_TYPE(PyThreadState_GET());
        tmp_compexpr_right_2 = PyExc_PermissionError;
        tmp_res = EXCEPTION_MATCH_BOOL( tmp_compexpr_left_2, tmp_compexpr_right_2 );
        if ( tmp_res == -1 )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 1315;
            type_description_1 = "oo";
            goto try_except_handler_3;
        }
        tmp_condition_result_2 = ( tmp_res != 0 ) ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
        if ( tmp_condition_result_2 == NUITKA_BOOL_TRUE )
        {
            goto branch_yes_2;
        }
        else
        {
            goto branch_no_2;
        }
        branch_yes_2:;
        {
            PyObject *tmp_assign_source_1;
            PyObject *tmp_called_name_2;
            PyObject *tmp_source_name_4;
            PyObject *tmp_mvar_value_2;
            PyObject *tmp_args_element_name_3;
            PyObject *tmp_source_name_5;
            tmp_mvar_value_2 = GET_STRING_DICT_VALUE( moduledict_subprocess, (Nuitka_StringObject *)const_str_plain__winapi );

            if (unlikely( tmp_mvar_value_2 == NULL ))
            {
                tmp_mvar_value_2 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain__winapi );
            }

            if ( tmp_mvar_value_2 == NULL )
            {

                exception_type = PyExc_NameError;
                Py_INCREF( exception_type );
                exception_value = PyUnicode_FromFormat( "name '%s' is not defined", "_winapi" );
                exception_tb = NULL;
                NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
                CHAIN_EXCEPTION( exception_value );

                exception_lineno = 1318;
                type_description_1 = "oo";
                goto try_except_handler_3;
            }

            tmp_source_name_4 = tmp_mvar_value_2;
            tmp_called_name_2 = LOOKUP_ATTRIBUTE( tmp_source_name_4, const_str_plain_GetExitCodeProcess );
            if ( tmp_called_name_2 == NULL )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 1318;
                type_description_1 = "oo";
                goto try_except_handler_3;
            }
            CHECK_OBJECT( par_self );
            tmp_source_name_5 = par_self;
            tmp_args_element_name_3 = LOOKUP_ATTRIBUTE( tmp_source_name_5, const_str_plain__handle );
            if ( tmp_args_element_name_3 == NULL )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
                Py_DECREF( tmp_called_name_2 );

                exception_lineno = 1318;
                type_description_1 = "oo";
                goto try_except_handler_3;
            }
            frame_5b0375b01e6bdd838edb3483499aae6a->m_frame.f_lineno = 1318;
            {
                PyObject *call_args[] = { tmp_args_element_name_3 };
                tmp_assign_source_1 = CALL_FUNCTION_WITH_ARGS1( tmp_called_name_2, call_args );
            }

            Py_DECREF( tmp_called_name_2 );
            Py_DECREF( tmp_args_element_name_3 );
            if ( tmp_assign_source_1 == NULL )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 1318;
                type_description_1 = "oo";
                goto try_except_handler_3;
            }
            assert( var_rc == NULL );
            var_rc = tmp_assign_source_1;
        }
        {
            nuitka_bool tmp_condition_result_3;
            PyObject *tmp_compexpr_left_3;
            PyObject *tmp_compexpr_right_3;
            PyObject *tmp_source_name_6;
            PyObject *tmp_mvar_value_3;
            CHECK_OBJECT( var_rc );
            tmp_compexpr_left_3 = var_rc;
            tmp_mvar_value_3 = GET_STRING_DICT_VALUE( moduledict_subprocess, (Nuitka_StringObject *)const_str_plain__winapi );

            if (unlikely( tmp_mvar_value_3 == NULL ))
            {
                tmp_mvar_value_3 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain__winapi );
            }

            if ( tmp_mvar_value_3 == NULL )
            {

                exception_type = PyExc_NameError;
                Py_INCREF( exception_type );
                exception_value = PyUnicode_FromFormat( "name '%s' is not defined", "_winapi" );
                exception_tb = NULL;
                NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
                CHAIN_EXCEPTION( exception_value );

                exception_lineno = 1319;
                type_description_1 = "oo";
                goto try_except_handler_3;
            }

            tmp_source_name_6 = tmp_mvar_value_3;
            tmp_compexpr_right_3 = LOOKUP_ATTRIBUTE( tmp_source_name_6, const_str_plain_STILL_ACTIVE );
            if ( tmp_compexpr_right_3 == NULL )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 1319;
                type_description_1 = "oo";
                goto try_except_handler_3;
            }
            tmp_res = RICH_COMPARE_BOOL_EQ_OBJECT_OBJECT( tmp_compexpr_left_3, tmp_compexpr_right_3 );
            Py_DECREF( tmp_compexpr_right_3 );
            if ( tmp_res == -1 )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 1319;
                type_description_1 = "oo";
                goto try_except_handler_3;
            }
            tmp_condition_result_3 = ( tmp_res != 0 ) ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
            if ( tmp_condition_result_3 == NUITKA_BOOL_TRUE )
            {
                goto branch_yes_3;
            }
            else
            {
                goto branch_no_3;
            }
            branch_yes_3:;
            tmp_result = RERAISE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
            if (unlikely( tmp_result == false ))
            {
                exception_lineno = 1320;
            }

            if (exception_tb && exception_tb->tb_frame == &frame_5b0375b01e6bdd838edb3483499aae6a->m_frame) frame_5b0375b01e6bdd838edb3483499aae6a->m_frame.f_lineno = exception_tb->tb_lineno;
            type_description_1 = "oo";
            goto try_except_handler_3;
            branch_no_3:;
        }
        {
            PyObject *tmp_assattr_name_1;
            PyObject *tmp_assattr_target_1;
            CHECK_OBJECT( var_rc );
            tmp_assattr_name_1 = var_rc;
            CHECK_OBJECT( par_self );
            tmp_assattr_target_1 = par_self;
            tmp_result = SET_ATTRIBUTE( tmp_assattr_target_1, const_str_plain_returncode, tmp_assattr_name_1 );
            if ( tmp_result == false )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 1321;
                type_description_1 = "oo";
                goto try_except_handler_3;
            }
        }
        goto branch_end_2;
        branch_no_2:;
        tmp_result = RERAISE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
        if (unlikely( tmp_result == false ))
        {
            exception_lineno = 1313;
        }

        if (exception_tb && exception_tb->tb_frame == &frame_5b0375b01e6bdd838edb3483499aae6a->m_frame) frame_5b0375b01e6bdd838edb3483499aae6a->m_frame.f_lineno = exception_tb->tb_lineno;
        type_description_1 = "oo";
        goto try_except_handler_3;
        branch_end_2:;
    }
    goto try_end_2;
    // Exception handler code:
    try_except_handler_3:;
    exception_keeper_type_2 = exception_type;
    exception_keeper_value_2 = exception_value;
    exception_keeper_tb_2 = exception_tb;
    exception_keeper_lineno_2 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    // Restore previous exception.
    SET_CURRENT_EXCEPTION( exception_preserved_type_1, exception_preserved_value_1, exception_preserved_tb_1 );
    // Re-raise.
    exception_type = exception_keeper_type_2;
    exception_value = exception_keeper_value_2;
    exception_tb = exception_keeper_tb_2;
    exception_lineno = exception_keeper_lineno_2;

    goto frame_exception_exit_1;
    // End of try:
    try_end_2:;
    // Restore previous exception.
    SET_CURRENT_EXCEPTION( exception_preserved_type_1, exception_preserved_value_1, exception_preserved_tb_1 );
    goto try_end_1;
    // exception handler codes exits in all cases
    NUITKA_CANNOT_GET_HERE( subprocess$$$function_50_terminate );
    return NULL;
    // End of try:
    try_end_1:;

#if 0
    RESTORE_FRAME_EXCEPTION( frame_5b0375b01e6bdd838edb3483499aae6a );
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto frame_no_exception_1;

    frame_return_exit_1:;
#if 0
    RESTORE_FRAME_EXCEPTION( frame_5b0375b01e6bdd838edb3483499aae6a );
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto try_return_handler_1;

    frame_exception_exit_1:;

#if 0
    RESTORE_FRAME_EXCEPTION( frame_5b0375b01e6bdd838edb3483499aae6a );
#endif

    if ( exception_tb == NULL )
    {
        exception_tb = MAKE_TRACEBACK( frame_5b0375b01e6bdd838edb3483499aae6a, exception_lineno );
    }
    else if ( exception_tb->tb_frame != &frame_5b0375b01e6bdd838edb3483499aae6a->m_frame )
    {
        exception_tb = ADD_TRACEBACK( exception_tb, frame_5b0375b01e6bdd838edb3483499aae6a, exception_lineno );
    }

    // Attachs locals to frame if any.
    Nuitka_Frame_AttachLocals(
        (struct Nuitka_FrameObject *)frame_5b0375b01e6bdd838edb3483499aae6a,
        type_description_1,
        par_self,
        var_rc
    );


    // Release cached frame.
    if ( frame_5b0375b01e6bdd838edb3483499aae6a == cache_frame_5b0375b01e6bdd838edb3483499aae6a )
    {
        Py_DECREF( frame_5b0375b01e6bdd838edb3483499aae6a );
    }
    cache_frame_5b0375b01e6bdd838edb3483499aae6a = NULL;

    assertFrameObject( frame_5b0375b01e6bdd838edb3483499aae6a );

    // Put the previous frame back on top.
    popFrameStack();

    // Return the error.
    goto try_except_handler_1;

    frame_no_exception_1:;
    tmp_return_value = Py_None;
    Py_INCREF( tmp_return_value );
    goto try_return_handler_1;
    // tried codes exits in all cases
    NUITKA_CANNOT_GET_HERE( subprocess$$$function_50_terminate );
    return NULL;
    // Return handler code:
    try_return_handler_1:;
    CHECK_OBJECT( (PyObject *)par_self );
    Py_DECREF( par_self );
    par_self = NULL;

    Py_XDECREF( var_rc );
    var_rc = NULL;

    goto function_return_exit;
    // Exception handler code:
    try_except_handler_1:;
    exception_keeper_type_3 = exception_type;
    exception_keeper_value_3 = exception_value;
    exception_keeper_tb_3 = exception_tb;
    exception_keeper_lineno_3 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    CHECK_OBJECT( (PyObject *)par_self );
    Py_DECREF( par_self );
    par_self = NULL;

    Py_XDECREF( var_rc );
    var_rc = NULL;

    // Re-raise.
    exception_type = exception_keeper_type_3;
    exception_value = exception_keeper_value_3;
    exception_tb = exception_keeper_tb_3;
    exception_lineno = exception_keeper_lineno_3;

    goto function_exception_exit;
    // End of try:

    // Return statement must have exited already.
    NUITKA_CANNOT_GET_HERE( subprocess$$$function_50_terminate );
    return NULL;

function_exception_exit:
    assert( exception_type );
    RESTORE_ERROR_OCCURRED( exception_type, exception_value, exception_tb );

    return NULL;

function_return_exit:
   // Function cleanup code if any.


   // Actual function exit with return value, making sure we did not make
   // the error status worse despite non-NULL return.
   CHECK_OBJECT( tmp_return_value );
   assert( had_error || !ERROR_OCCURRED() );
   return tmp_return_value;
}


static PyObject *impl_subprocess$$$function_51__get_handles( struct Nuitka_FunctionObject const *self, PyObject **python_pars )
{
    // Preserve error status for checks
#ifndef __NUITKA_NO_ASSERT__
    NUITKA_MAY_BE_UNUSED bool had_error = ERROR_OCCURRED();
#endif

    // Local variable declarations.
    PyObject *par_self = python_pars[ 0 ];
    PyObject *par_stdin = python_pars[ 1 ];
    PyObject *par_stdout = python_pars[ 2 ];
    PyObject *par_stderr = python_pars[ 3 ];
    PyObject *var_p2cread = NULL;
    PyObject *var_p2cwrite = NULL;
    PyObject *var_c2pread = NULL;
    PyObject *var_c2pwrite = NULL;
    PyObject *var_errread = NULL;
    PyObject *var_errwrite = NULL;
    PyObject *tmp_tuple_unpack_1__element_1 = NULL;
    PyObject *tmp_tuple_unpack_1__element_2 = NULL;
    PyObject *tmp_tuple_unpack_1__source_iter = NULL;
    PyObject *tmp_tuple_unpack_2__element_1 = NULL;
    PyObject *tmp_tuple_unpack_2__element_2 = NULL;
    PyObject *tmp_tuple_unpack_2__source_iter = NULL;
    PyObject *tmp_tuple_unpack_3__element_1 = NULL;
    PyObject *tmp_tuple_unpack_3__element_2 = NULL;
    PyObject *tmp_tuple_unpack_3__source_iter = NULL;
    PyObject *tmp_tuple_unpack_4__element_1 = NULL;
    PyObject *tmp_tuple_unpack_4__element_2 = NULL;
    PyObject *tmp_tuple_unpack_4__source_iter = NULL;
    PyObject *tmp_tuple_unpack_5__element_1 = NULL;
    PyObject *tmp_tuple_unpack_5__element_2 = NULL;
    PyObject *tmp_tuple_unpack_5__source_iter = NULL;
    PyObject *tmp_tuple_unpack_6__element_1 = NULL;
    PyObject *tmp_tuple_unpack_6__element_2 = NULL;
    PyObject *tmp_tuple_unpack_6__source_iter = NULL;
    struct Nuitka_FrameObject *frame_495b7c0e9bc8fdb79276f40655ad3103;
    NUITKA_MAY_BE_UNUSED char const *type_description_1 = NULL;
    PyObject *exception_type = NULL;
    PyObject *exception_value = NULL;
    PyTracebackObject *exception_tb = NULL;
    NUITKA_MAY_BE_UNUSED int exception_lineno = 0;
    PyObject *exception_keeper_type_1;
    PyObject *exception_keeper_value_1;
    PyTracebackObject *exception_keeper_tb_1;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_1;
    PyObject *exception_keeper_type_2;
    PyObject *exception_keeper_value_2;
    PyTracebackObject *exception_keeper_tb_2;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_2;
    PyObject *exception_keeper_type_3;
    PyObject *exception_keeper_value_3;
    PyTracebackObject *exception_keeper_tb_3;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_3;
    PyObject *exception_keeper_type_4;
    PyObject *exception_keeper_value_4;
    PyTracebackObject *exception_keeper_tb_4;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_4;
    PyObject *exception_keeper_type_5;
    PyObject *exception_keeper_value_5;
    PyTracebackObject *exception_keeper_tb_5;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_5;
    PyObject *exception_keeper_type_6;
    PyObject *exception_keeper_value_6;
    PyTracebackObject *exception_keeper_tb_6;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_6;
    int tmp_res;
    PyObject *tmp_iterator_attempt;
    PyObject *exception_keeper_type_7;
    PyObject *exception_keeper_value_7;
    PyTracebackObject *exception_keeper_tb_7;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_7;
    PyObject *exception_keeper_type_8;
    PyObject *exception_keeper_value_8;
    PyTracebackObject *exception_keeper_tb_8;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_8;
    PyObject *exception_keeper_type_9;
    PyObject *exception_keeper_value_9;
    PyTracebackObject *exception_keeper_tb_9;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_9;
    PyObject *exception_keeper_type_10;
    PyObject *exception_keeper_value_10;
    PyTracebackObject *exception_keeper_tb_10;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_10;
    PyObject *exception_keeper_type_11;
    PyObject *exception_keeper_value_11;
    PyTracebackObject *exception_keeper_tb_11;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_11;
    PyObject *exception_keeper_type_12;
    PyObject *exception_keeper_value_12;
    PyTracebackObject *exception_keeper_tb_12;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_12;
    PyObject *tmp_return_value = NULL;
    static struct Nuitka_FrameObject *cache_frame_495b7c0e9bc8fdb79276f40655ad3103 = NULL;
    PyObject *exception_keeper_type_13;
    PyObject *exception_keeper_value_13;
    PyTracebackObject *exception_keeper_tb_13;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_13;

    // Actual function body.
    {
        PyObject *tmp_assign_source_1;
        PyObject *tmp_iter_arg_1;
        tmp_iter_arg_1 = const_tuple_int_neg_1_int_neg_1_tuple;
        tmp_assign_source_1 = MAKE_UNPACK_ITERATOR( tmp_iter_arg_1 );
        assert( !(tmp_assign_source_1 == NULL) );
        assert( tmp_tuple_unpack_1__source_iter == NULL );
        tmp_tuple_unpack_1__source_iter = tmp_assign_source_1;
    }
    // Tried code:
    MAKE_OR_REUSE_FRAME( cache_frame_495b7c0e9bc8fdb79276f40655ad3103, codeobj_495b7c0e9bc8fdb79276f40655ad3103, module_subprocess, sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *) );
    frame_495b7c0e9bc8fdb79276f40655ad3103 = cache_frame_495b7c0e9bc8fdb79276f40655ad3103;

    // Push the new frame as the currently active one.
    pushFrameStack( frame_495b7c0e9bc8fdb79276f40655ad3103 );

    // Mark the frame object as in use, ref count 1 will be up for reuse.
    assert( Py_REFCNT( frame_495b7c0e9bc8fdb79276f40655ad3103 ) == 2 ); // Frame stack

    // Framed code:
    // Tried code:
    // Tried code:
    {
        PyObject *tmp_assign_source_2;
        PyObject *tmp_unpack_1;
        CHECK_OBJECT( tmp_tuple_unpack_1__source_iter );
        tmp_unpack_1 = tmp_tuple_unpack_1__source_iter;
        tmp_assign_source_2 = UNPACK_NEXT( tmp_unpack_1, 0, 2 );
        if ( tmp_assign_source_2 == NULL )
        {
            if ( !ERROR_OCCURRED() )
            {
                exception_type = PyExc_StopIteration;
                Py_INCREF( exception_type );
                exception_value = NULL;
                exception_tb = NULL;
            }
            else
            {
                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
            }


            type_description_1 = "oooooooooo";
            exception_lineno = 1333;
            goto try_except_handler_3;
        }
        assert( tmp_tuple_unpack_1__element_1 == NULL );
        tmp_tuple_unpack_1__element_1 = tmp_assign_source_2;
    }
    {
        PyObject *tmp_assign_source_3;
        PyObject *tmp_unpack_2;
        CHECK_OBJECT( tmp_tuple_unpack_1__source_iter );
        tmp_unpack_2 = tmp_tuple_unpack_1__source_iter;
        tmp_assign_source_3 = UNPACK_NEXT( tmp_unpack_2, 1, 2 );
        if ( tmp_assign_source_3 == NULL )
        {
            if ( !ERROR_OCCURRED() )
            {
                exception_type = PyExc_StopIteration;
                Py_INCREF( exception_type );
                exception_value = NULL;
                exception_tb = NULL;
            }
            else
            {
                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
            }


            type_description_1 = "oooooooooo";
            exception_lineno = 1333;
            goto try_except_handler_3;
        }
        assert( tmp_tuple_unpack_1__element_2 == NULL );
        tmp_tuple_unpack_1__element_2 = tmp_assign_source_3;
    }
    goto try_end_1;
    // Exception handler code:
    try_except_handler_3:;
    exception_keeper_type_1 = exception_type;
    exception_keeper_value_1 = exception_value;
    exception_keeper_tb_1 = exception_tb;
    exception_keeper_lineno_1 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    CHECK_OBJECT( (PyObject *)tmp_tuple_unpack_1__source_iter );
    Py_DECREF( tmp_tuple_unpack_1__source_iter );
    tmp_tuple_unpack_1__source_iter = NULL;

    // Re-raise.
    exception_type = exception_keeper_type_1;
    exception_value = exception_keeper_value_1;
    exception_tb = exception_keeper_tb_1;
    exception_lineno = exception_keeper_lineno_1;

    goto try_except_handler_2;
    // End of try:
    try_end_1:;
    goto try_end_2;
    // Exception handler code:
    try_except_handler_2:;
    exception_keeper_type_2 = exception_type;
    exception_keeper_value_2 = exception_value;
    exception_keeper_tb_2 = exception_tb;
    exception_keeper_lineno_2 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    Py_XDECREF( tmp_tuple_unpack_1__element_1 );
    tmp_tuple_unpack_1__element_1 = NULL;

    // Re-raise.
    exception_type = exception_keeper_type_2;
    exception_value = exception_keeper_value_2;
    exception_tb = exception_keeper_tb_2;
    exception_lineno = exception_keeper_lineno_2;

    goto frame_exception_exit_1;
    // End of try:
    try_end_2:;
    CHECK_OBJECT( (PyObject *)tmp_tuple_unpack_1__source_iter );
    Py_DECREF( tmp_tuple_unpack_1__source_iter );
    tmp_tuple_unpack_1__source_iter = NULL;

    {
        PyObject *tmp_assign_source_4;
        CHECK_OBJECT( tmp_tuple_unpack_1__element_1 );
        tmp_assign_source_4 = tmp_tuple_unpack_1__element_1;
        assert( var_p2cread == NULL );
        Py_INCREF( tmp_assign_source_4 );
        var_p2cread = tmp_assign_source_4;
    }
    Py_XDECREF( tmp_tuple_unpack_1__element_1 );
    tmp_tuple_unpack_1__element_1 = NULL;

    {
        PyObject *tmp_assign_source_5;
        CHECK_OBJECT( tmp_tuple_unpack_1__element_2 );
        tmp_assign_source_5 = tmp_tuple_unpack_1__element_2;
        assert( var_p2cwrite == NULL );
        Py_INCREF( tmp_assign_source_5 );
        var_p2cwrite = tmp_assign_source_5;
    }
    Py_XDECREF( tmp_tuple_unpack_1__element_2 );
    tmp_tuple_unpack_1__element_2 = NULL;

    {
        PyObject *tmp_assign_source_6;
        PyObject *tmp_iter_arg_2;
        tmp_iter_arg_2 = const_tuple_int_neg_1_int_neg_1_tuple;
        tmp_assign_source_6 = MAKE_UNPACK_ITERATOR( tmp_iter_arg_2 );
        assert( !(tmp_assign_source_6 == NULL) );
        assert( tmp_tuple_unpack_2__source_iter == NULL );
        tmp_tuple_unpack_2__source_iter = tmp_assign_source_6;
    }
    // Tried code:
    // Tried code:
    {
        PyObject *tmp_assign_source_7;
        PyObject *tmp_unpack_3;
        CHECK_OBJECT( tmp_tuple_unpack_2__source_iter );
        tmp_unpack_3 = tmp_tuple_unpack_2__source_iter;
        tmp_assign_source_7 = UNPACK_NEXT( tmp_unpack_3, 0, 2 );
        if ( tmp_assign_source_7 == NULL )
        {
            if ( !ERROR_OCCURRED() )
            {
                exception_type = PyExc_StopIteration;
                Py_INCREF( exception_type );
                exception_value = NULL;
                exception_tb = NULL;
            }
            else
            {
                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
            }


            type_description_1 = "oooooooooo";
            exception_lineno = 1334;
            goto try_except_handler_5;
        }
        assert( tmp_tuple_unpack_2__element_1 == NULL );
        tmp_tuple_unpack_2__element_1 = tmp_assign_source_7;
    }
    {
        PyObject *tmp_assign_source_8;
        PyObject *tmp_unpack_4;
        CHECK_OBJECT( tmp_tuple_unpack_2__source_iter );
        tmp_unpack_4 = tmp_tuple_unpack_2__source_iter;
        tmp_assign_source_8 = UNPACK_NEXT( tmp_unpack_4, 1, 2 );
        if ( tmp_assign_source_8 == NULL )
        {
            if ( !ERROR_OCCURRED() )
            {
                exception_type = PyExc_StopIteration;
                Py_INCREF( exception_type );
                exception_value = NULL;
                exception_tb = NULL;
            }
            else
            {
                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
            }


            type_description_1 = "oooooooooo";
            exception_lineno = 1334;
            goto try_except_handler_5;
        }
        assert( tmp_tuple_unpack_2__element_2 == NULL );
        tmp_tuple_unpack_2__element_2 = tmp_assign_source_8;
    }
    goto try_end_3;
    // Exception handler code:
    try_except_handler_5:;
    exception_keeper_type_3 = exception_type;
    exception_keeper_value_3 = exception_value;
    exception_keeper_tb_3 = exception_tb;
    exception_keeper_lineno_3 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    CHECK_OBJECT( (PyObject *)tmp_tuple_unpack_2__source_iter );
    Py_DECREF( tmp_tuple_unpack_2__source_iter );
    tmp_tuple_unpack_2__source_iter = NULL;

    // Re-raise.
    exception_type = exception_keeper_type_3;
    exception_value = exception_keeper_value_3;
    exception_tb = exception_keeper_tb_3;
    exception_lineno = exception_keeper_lineno_3;

    goto try_except_handler_4;
    // End of try:
    try_end_3:;
    goto try_end_4;
    // Exception handler code:
    try_except_handler_4:;
    exception_keeper_type_4 = exception_type;
    exception_keeper_value_4 = exception_value;
    exception_keeper_tb_4 = exception_tb;
    exception_keeper_lineno_4 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    Py_XDECREF( tmp_tuple_unpack_2__element_1 );
    tmp_tuple_unpack_2__element_1 = NULL;

    // Re-raise.
    exception_type = exception_keeper_type_4;
    exception_value = exception_keeper_value_4;
    exception_tb = exception_keeper_tb_4;
    exception_lineno = exception_keeper_lineno_4;

    goto frame_exception_exit_1;
    // End of try:
    try_end_4:;
    CHECK_OBJECT( (PyObject *)tmp_tuple_unpack_2__source_iter );
    Py_DECREF( tmp_tuple_unpack_2__source_iter );
    tmp_tuple_unpack_2__source_iter = NULL;

    {
        PyObject *tmp_assign_source_9;
        CHECK_OBJECT( tmp_tuple_unpack_2__element_1 );
        tmp_assign_source_9 = tmp_tuple_unpack_2__element_1;
        assert( var_c2pread == NULL );
        Py_INCREF( tmp_assign_source_9 );
        var_c2pread = tmp_assign_source_9;
    }
    Py_XDECREF( tmp_tuple_unpack_2__element_1 );
    tmp_tuple_unpack_2__element_1 = NULL;

    {
        PyObject *tmp_assign_source_10;
        CHECK_OBJECT( tmp_tuple_unpack_2__element_2 );
        tmp_assign_source_10 = tmp_tuple_unpack_2__element_2;
        assert( var_c2pwrite == NULL );
        Py_INCREF( tmp_assign_source_10 );
        var_c2pwrite = tmp_assign_source_10;
    }
    Py_XDECREF( tmp_tuple_unpack_2__element_2 );
    tmp_tuple_unpack_2__element_2 = NULL;

    {
        PyObject *tmp_assign_source_11;
        PyObject *tmp_iter_arg_3;
        tmp_iter_arg_3 = const_tuple_int_neg_1_int_neg_1_tuple;
        tmp_assign_source_11 = MAKE_UNPACK_ITERATOR( tmp_iter_arg_3 );
        assert( !(tmp_assign_source_11 == NULL) );
        assert( tmp_tuple_unpack_3__source_iter == NULL );
        tmp_tuple_unpack_3__source_iter = tmp_assign_source_11;
    }
    // Tried code:
    // Tried code:
    {
        PyObject *tmp_assign_source_12;
        PyObject *tmp_unpack_5;
        CHECK_OBJECT( tmp_tuple_unpack_3__source_iter );
        tmp_unpack_5 = tmp_tuple_unpack_3__source_iter;
        tmp_assign_source_12 = UNPACK_NEXT( tmp_unpack_5, 0, 2 );
        if ( tmp_assign_source_12 == NULL )
        {
            if ( !ERROR_OCCURRED() )
            {
                exception_type = PyExc_StopIteration;
                Py_INCREF( exception_type );
                exception_value = NULL;
                exception_tb = NULL;
            }
            else
            {
                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
            }


            type_description_1 = "oooooooooo";
            exception_lineno = 1335;
            goto try_except_handler_7;
        }
        assert( tmp_tuple_unpack_3__element_1 == NULL );
        tmp_tuple_unpack_3__element_1 = tmp_assign_source_12;
    }
    {
        PyObject *tmp_assign_source_13;
        PyObject *tmp_unpack_6;
        CHECK_OBJECT( tmp_tuple_unpack_3__source_iter );
        tmp_unpack_6 = tmp_tuple_unpack_3__source_iter;
        tmp_assign_source_13 = UNPACK_NEXT( tmp_unpack_6, 1, 2 );
        if ( tmp_assign_source_13 == NULL )
        {
            if ( !ERROR_OCCURRED() )
            {
                exception_type = PyExc_StopIteration;
                Py_INCREF( exception_type );
                exception_value = NULL;
                exception_tb = NULL;
            }
            else
            {
                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
            }


            type_description_1 = "oooooooooo";
            exception_lineno = 1335;
            goto try_except_handler_7;
        }
        assert( tmp_tuple_unpack_3__element_2 == NULL );
        tmp_tuple_unpack_3__element_2 = tmp_assign_source_13;
    }
    goto try_end_5;
    // Exception handler code:
    try_except_handler_7:;
    exception_keeper_type_5 = exception_type;
    exception_keeper_value_5 = exception_value;
    exception_keeper_tb_5 = exception_tb;
    exception_keeper_lineno_5 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    CHECK_OBJECT( (PyObject *)tmp_tuple_unpack_3__source_iter );
    Py_DECREF( tmp_tuple_unpack_3__source_iter );
    tmp_tuple_unpack_3__source_iter = NULL;

    // Re-raise.
    exception_type = exception_keeper_type_5;
    exception_value = exception_keeper_value_5;
    exception_tb = exception_keeper_tb_5;
    exception_lineno = exception_keeper_lineno_5;

    goto try_except_handler_6;
    // End of try:
    try_end_5:;
    goto try_end_6;
    // Exception handler code:
    try_except_handler_6:;
    exception_keeper_type_6 = exception_type;
    exception_keeper_value_6 = exception_value;
    exception_keeper_tb_6 = exception_tb;
    exception_keeper_lineno_6 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    Py_XDECREF( tmp_tuple_unpack_3__element_1 );
    tmp_tuple_unpack_3__element_1 = NULL;

    // Re-raise.
    exception_type = exception_keeper_type_6;
    exception_value = exception_keeper_value_6;
    exception_tb = exception_keeper_tb_6;
    exception_lineno = exception_keeper_lineno_6;

    goto frame_exception_exit_1;
    // End of try:
    try_end_6:;
    CHECK_OBJECT( (PyObject *)tmp_tuple_unpack_3__source_iter );
    Py_DECREF( tmp_tuple_unpack_3__source_iter );
    tmp_tuple_unpack_3__source_iter = NULL;

    {
        PyObject *tmp_assign_source_14;
        CHECK_OBJECT( tmp_tuple_unpack_3__element_1 );
        tmp_assign_source_14 = tmp_tuple_unpack_3__element_1;
        assert( var_errread == NULL );
        Py_INCREF( tmp_assign_source_14 );
        var_errread = tmp_assign_source_14;
    }
    Py_XDECREF( tmp_tuple_unpack_3__element_1 );
    tmp_tuple_unpack_3__element_1 = NULL;

    {
        PyObject *tmp_assign_source_15;
        CHECK_OBJECT( tmp_tuple_unpack_3__element_2 );
        tmp_assign_source_15 = tmp_tuple_unpack_3__element_2;
        assert( var_errwrite == NULL );
        Py_INCREF( tmp_assign_source_15 );
        var_errwrite = tmp_assign_source_15;
    }
    Py_XDECREF( tmp_tuple_unpack_3__element_2 );
    tmp_tuple_unpack_3__element_2 = NULL;

    {
        nuitka_bool tmp_condition_result_1;
        PyObject *tmp_compexpr_left_1;
        PyObject *tmp_compexpr_right_1;
        CHECK_OBJECT( par_stdin );
        tmp_compexpr_left_1 = par_stdin;
        tmp_compexpr_right_1 = Py_None;
        tmp_condition_result_1 = ( tmp_compexpr_left_1 != tmp_compexpr_right_1 ) ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
        if ( tmp_condition_result_1 == NUITKA_BOOL_TRUE )
        {
            goto branch_yes_1;
        }
        else
        {
            goto branch_no_1;
        }
        branch_yes_1:;
        {
            nuitka_bool tmp_condition_result_2;
            PyObject *tmp_compexpr_left_2;
            PyObject *tmp_compexpr_right_2;
            PyObject *tmp_mvar_value_1;
            CHECK_OBJECT( par_stdin );
            tmp_compexpr_left_2 = par_stdin;
            tmp_mvar_value_1 = GET_STRING_DICT_VALUE( moduledict_subprocess, (Nuitka_StringObject *)const_str_plain_PIPE );

            if (unlikely( tmp_mvar_value_1 == NULL ))
            {
                tmp_mvar_value_1 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_PIPE );
            }

            if ( tmp_mvar_value_1 == NULL )
            {

                exception_type = PyExc_NameError;
                Py_INCREF( exception_type );
                exception_value = PyUnicode_FromFormat( "name '%s' is not defined", "PIPE" );
                exception_tb = NULL;
                NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
                CHAIN_EXCEPTION( exception_value );

                exception_lineno = 1339;
                type_description_1 = "oooooooooo";
                goto frame_exception_exit_1;
            }

            tmp_compexpr_right_2 = tmp_mvar_value_1;
            tmp_res = RICH_COMPARE_BOOL_EQ_OBJECT_OBJECT( tmp_compexpr_left_2, tmp_compexpr_right_2 );
            if ( tmp_res == -1 )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 1339;
                type_description_1 = "oooooooooo";
                goto frame_exception_exit_1;
            }
            tmp_condition_result_2 = ( tmp_res != 0 ) ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
            if ( tmp_condition_result_2 == NUITKA_BOOL_TRUE )
            {
                goto branch_yes_2;
            }
            else
            {
                goto branch_no_2;
            }
            branch_yes_2:;
            // Tried code:
            {
                PyObject *tmp_assign_source_16;
                PyObject *tmp_iter_arg_4;
                PyObject *tmp_called_instance_1;
                PyObject *tmp_mvar_value_2;
                tmp_mvar_value_2 = GET_STRING_DICT_VALUE( moduledict_subprocess, (Nuitka_StringObject *)const_str_plain_os );

                if (unlikely( tmp_mvar_value_2 == NULL ))
                {
                    tmp_mvar_value_2 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_os );
                }

                if ( tmp_mvar_value_2 == NULL )
                {

                    exception_type = PyExc_NameError;
                    Py_INCREF( exception_type );
                    exception_value = PyUnicode_FromFormat( "name '%s' is not defined", "os" );
                    exception_tb = NULL;
                    NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
                    CHAIN_EXCEPTION( exception_value );

                    exception_lineno = 1340;
                    type_description_1 = "oooooooooo";
                    goto try_except_handler_8;
                }

                tmp_called_instance_1 = tmp_mvar_value_2;
                frame_495b7c0e9bc8fdb79276f40655ad3103->m_frame.f_lineno = 1340;
                tmp_iter_arg_4 = CALL_METHOD_NO_ARGS( tmp_called_instance_1, const_str_plain_pipe );
                if ( tmp_iter_arg_4 == NULL )
                {
                    assert( ERROR_OCCURRED() );

                    FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                    exception_lineno = 1340;
                    type_description_1 = "oooooooooo";
                    goto try_except_handler_8;
                }
                tmp_assign_source_16 = MAKE_UNPACK_ITERATOR( tmp_iter_arg_4 );
                Py_DECREF( tmp_iter_arg_4 );
                if ( tmp_assign_source_16 == NULL )
                {
                    assert( ERROR_OCCURRED() );

                    FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                    exception_lineno = 1340;
                    type_description_1 = "oooooooooo";
                    goto try_except_handler_8;
                }
                assert( tmp_tuple_unpack_4__source_iter == NULL );
                tmp_tuple_unpack_4__source_iter = tmp_assign_source_16;
            }
            // Tried code:
            {
                PyObject *tmp_assign_source_17;
                PyObject *tmp_unpack_7;
                CHECK_OBJECT( tmp_tuple_unpack_4__source_iter );
                tmp_unpack_7 = tmp_tuple_unpack_4__source_iter;
                tmp_assign_source_17 = UNPACK_NEXT( tmp_unpack_7, 0, 2 );
                if ( tmp_assign_source_17 == NULL )
                {
                    if ( !ERROR_OCCURRED() )
                    {
                        exception_type = PyExc_StopIteration;
                        Py_INCREF( exception_type );
                        exception_value = NULL;
                        exception_tb = NULL;
                    }
                    else
                    {
                        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
                    }


                    type_description_1 = "oooooooooo";
                    exception_lineno = 1340;
                    goto try_except_handler_9;
                }
                assert( tmp_tuple_unpack_4__element_1 == NULL );
                tmp_tuple_unpack_4__element_1 = tmp_assign_source_17;
            }
            {
                PyObject *tmp_assign_source_18;
                PyObject *tmp_unpack_8;
                CHECK_OBJECT( tmp_tuple_unpack_4__source_iter );
                tmp_unpack_8 = tmp_tuple_unpack_4__source_iter;
                tmp_assign_source_18 = UNPACK_NEXT( tmp_unpack_8, 1, 2 );
                if ( tmp_assign_source_18 == NULL )
                {
                    if ( !ERROR_OCCURRED() )
                    {
                        exception_type = PyExc_StopIteration;
                        Py_INCREF( exception_type );
                        exception_value = NULL;
                        exception_tb = NULL;
                    }
                    else
                    {
                        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
                    }


                    type_description_1 = "oooooooooo";
                    exception_lineno = 1340;
                    goto try_except_handler_9;
                }
                assert( tmp_tuple_unpack_4__element_2 == NULL );
                tmp_tuple_unpack_4__element_2 = tmp_assign_source_18;
            }
            {
                PyObject *tmp_iterator_name_1;
                CHECK_OBJECT( tmp_tuple_unpack_4__source_iter );
                tmp_iterator_name_1 = tmp_tuple_unpack_4__source_iter;
                // Check if iterator has left-over elements.
                CHECK_OBJECT( tmp_iterator_name_1 ); assert( HAS_ITERNEXT( tmp_iterator_name_1 ) );

                tmp_iterator_attempt = (*Py_TYPE( tmp_iterator_name_1 )->tp_iternext)( tmp_iterator_name_1 );

                if (likely( tmp_iterator_attempt == NULL ))
                {
                    PyObject *error = GET_ERROR_OCCURRED();

                    if ( error != NULL )
                    {
                        if ( EXCEPTION_MATCH_BOOL_SINGLE( error, PyExc_StopIteration ))
                        {
                            CLEAR_ERROR_OCCURRED();
                        }
                        else
                        {
                            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );

                            type_description_1 = "oooooooooo";
                            exception_lineno = 1340;
                            goto try_except_handler_9;
                        }
                    }
                }
                else
                {
                    Py_DECREF( tmp_iterator_attempt );

                    // TODO: Could avoid PyErr_Format.
#if PYTHON_VERSION < 300
                    PyErr_Format( PyExc_ValueError, "too many values to unpack" );
#else
                    PyErr_Format( PyExc_ValueError, "too many values to unpack (expected 2)" );
#endif
                    FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );

                    type_description_1 = "oooooooooo";
                    exception_lineno = 1340;
                    goto try_except_handler_9;
                }
            }
            goto try_end_7;
            // Exception handler code:
            try_except_handler_9:;
            exception_keeper_type_7 = exception_type;
            exception_keeper_value_7 = exception_value;
            exception_keeper_tb_7 = exception_tb;
            exception_keeper_lineno_7 = exception_lineno;
            exception_type = NULL;
            exception_value = NULL;
            exception_tb = NULL;
            exception_lineno = 0;

            CHECK_OBJECT( (PyObject *)tmp_tuple_unpack_4__source_iter );
            Py_DECREF( tmp_tuple_unpack_4__source_iter );
            tmp_tuple_unpack_4__source_iter = NULL;

            // Re-raise.
            exception_type = exception_keeper_type_7;
            exception_value = exception_keeper_value_7;
            exception_tb = exception_keeper_tb_7;
            exception_lineno = exception_keeper_lineno_7;

            goto try_except_handler_8;
            // End of try:
            try_end_7:;
            goto try_end_8;
            // Exception handler code:
            try_except_handler_8:;
            exception_keeper_type_8 = exception_type;
            exception_keeper_value_8 = exception_value;
            exception_keeper_tb_8 = exception_tb;
            exception_keeper_lineno_8 = exception_lineno;
            exception_type = NULL;
            exception_value = NULL;
            exception_tb = NULL;
            exception_lineno = 0;

            Py_XDECREF( tmp_tuple_unpack_4__element_1 );
            tmp_tuple_unpack_4__element_1 = NULL;

            Py_XDECREF( tmp_tuple_unpack_4__element_2 );
            tmp_tuple_unpack_4__element_2 = NULL;

            // Re-raise.
            exception_type = exception_keeper_type_8;
            exception_value = exception_keeper_value_8;
            exception_tb = exception_keeper_tb_8;
            exception_lineno = exception_keeper_lineno_8;

            goto frame_exception_exit_1;
            // End of try:
            try_end_8:;
            CHECK_OBJECT( (PyObject *)tmp_tuple_unpack_4__source_iter );
            Py_DECREF( tmp_tuple_unpack_4__source_iter );
            tmp_tuple_unpack_4__source_iter = NULL;

            {
                PyObject *tmp_assign_source_19;
                CHECK_OBJECT( tmp_tuple_unpack_4__element_1 );
                tmp_assign_source_19 = tmp_tuple_unpack_4__element_1;
                {
                    PyObject *old = var_p2cread;
                    assert( old != NULL );
                    var_p2cread = tmp_assign_source_19;
                    Py_INCREF( var_p2cread );
                    Py_DECREF( old );
                }

            }
            Py_XDECREF( tmp_tuple_unpack_4__element_1 );
            tmp_tuple_unpack_4__element_1 = NULL;

            {
                PyObject *tmp_assign_source_20;
                CHECK_OBJECT( tmp_tuple_unpack_4__element_2 );
                tmp_assign_source_20 = tmp_tuple_unpack_4__element_2;
                {
                    PyObject *old = var_p2cwrite;
                    assert( old != NULL );
                    var_p2cwrite = tmp_assign_source_20;
                    Py_INCREF( var_p2cwrite );
                    Py_DECREF( old );
                }

            }
            Py_XDECREF( tmp_tuple_unpack_4__element_2 );
            tmp_tuple_unpack_4__element_2 = NULL;

            goto branch_end_2;
            branch_no_2:;
            {
                nuitka_bool tmp_condition_result_3;
                PyObject *tmp_compexpr_left_3;
                PyObject *tmp_compexpr_right_3;
                PyObject *tmp_mvar_value_3;
                CHECK_OBJECT( par_stdin );
                tmp_compexpr_left_3 = par_stdin;
                tmp_mvar_value_3 = GET_STRING_DICT_VALUE( moduledict_subprocess, (Nuitka_StringObject *)const_str_plain_DEVNULL );

                if (unlikely( tmp_mvar_value_3 == NULL ))
                {
                    tmp_mvar_value_3 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_DEVNULL );
                }

                if ( tmp_mvar_value_3 == NULL )
                {

                    exception_type = PyExc_NameError;
                    Py_INCREF( exception_type );
                    exception_value = PyUnicode_FromFormat( "name '%s' is not defined", "DEVNULL" );
                    exception_tb = NULL;
                    NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
                    CHAIN_EXCEPTION( exception_value );

                    exception_lineno = 1341;
                    type_description_1 = "oooooooooo";
                    goto frame_exception_exit_1;
                }

                tmp_compexpr_right_3 = tmp_mvar_value_3;
                tmp_res = RICH_COMPARE_BOOL_EQ_OBJECT_OBJECT( tmp_compexpr_left_3, tmp_compexpr_right_3 );
                if ( tmp_res == -1 )
                {
                    assert( ERROR_OCCURRED() );

                    FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                    exception_lineno = 1341;
                    type_description_1 = "oooooooooo";
                    goto frame_exception_exit_1;
                }
                tmp_condition_result_3 = ( tmp_res != 0 ) ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
                if ( tmp_condition_result_3 == NUITKA_BOOL_TRUE )
                {
                    goto branch_yes_3;
                }
                else
                {
                    goto branch_no_3;
                }
                branch_yes_3:;
                {
                    PyObject *tmp_assign_source_21;
                    PyObject *tmp_called_instance_2;
                    CHECK_OBJECT( par_self );
                    tmp_called_instance_2 = par_self;
                    frame_495b7c0e9bc8fdb79276f40655ad3103->m_frame.f_lineno = 1342;
                    tmp_assign_source_21 = CALL_METHOD_NO_ARGS( tmp_called_instance_2, const_str_plain__get_devnull );
                    if ( tmp_assign_source_21 == NULL )
                    {
                        assert( ERROR_OCCURRED() );

                        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                        exception_lineno = 1342;
                        type_description_1 = "oooooooooo";
                        goto frame_exception_exit_1;
                    }
                    {
                        PyObject *old = var_p2cread;
                        assert( old != NULL );
                        var_p2cread = tmp_assign_source_21;
                        Py_DECREF( old );
                    }

                }
                goto branch_end_3;
                branch_no_3:;
                {
                    nuitka_bool tmp_condition_result_4;
                    PyObject *tmp_isinstance_inst_1;
                    PyObject *tmp_isinstance_cls_1;
                    CHECK_OBJECT( par_stdin );
                    tmp_isinstance_inst_1 = par_stdin;
                    tmp_isinstance_cls_1 = (PyObject *)&PyLong_Type;
                    tmp_res = Nuitka_IsInstance( tmp_isinstance_inst_1, tmp_isinstance_cls_1 );
                    if ( tmp_res == -1 )
                    {
                        assert( ERROR_OCCURRED() );

                        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                        exception_lineno = 1343;
                        type_description_1 = "oooooooooo";
                        goto frame_exception_exit_1;
                    }
                    tmp_condition_result_4 = ( tmp_res != 0 ) ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
                    if ( tmp_condition_result_4 == NUITKA_BOOL_TRUE )
                    {
                        goto branch_yes_4;
                    }
                    else
                    {
                        goto branch_no_4;
                    }
                    branch_yes_4:;
                    {
                        PyObject *tmp_assign_source_22;
                        CHECK_OBJECT( par_stdin );
                        tmp_assign_source_22 = par_stdin;
                        {
                            PyObject *old = var_p2cread;
                            assert( old != NULL );
                            var_p2cread = tmp_assign_source_22;
                            Py_INCREF( var_p2cread );
                            Py_DECREF( old );
                        }

                    }
                    goto branch_end_4;
                    branch_no_4:;
                    {
                        PyObject *tmp_assign_source_23;
                        PyObject *tmp_called_instance_3;
                        CHECK_OBJECT( par_stdin );
                        tmp_called_instance_3 = par_stdin;
                        frame_495b7c0e9bc8fdb79276f40655ad3103->m_frame.f_lineno = 1347;
                        tmp_assign_source_23 = CALL_METHOD_NO_ARGS( tmp_called_instance_3, const_str_plain_fileno );
                        if ( tmp_assign_source_23 == NULL )
                        {
                            assert( ERROR_OCCURRED() );

                            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                            exception_lineno = 1347;
                            type_description_1 = "oooooooooo";
                            goto frame_exception_exit_1;
                        }
                        {
                            PyObject *old = var_p2cread;
                            assert( old != NULL );
                            var_p2cread = tmp_assign_source_23;
                            Py_DECREF( old );
                        }

                    }
                    branch_end_4:;
                }
                branch_end_3:;
            }
            branch_end_2:;
        }
        branch_no_1:;
    }
    {
        nuitka_bool tmp_condition_result_5;
        PyObject *tmp_compexpr_left_4;
        PyObject *tmp_compexpr_right_4;
        CHECK_OBJECT( par_stdout );
        tmp_compexpr_left_4 = par_stdout;
        tmp_compexpr_right_4 = Py_None;
        tmp_condition_result_5 = ( tmp_compexpr_left_4 != tmp_compexpr_right_4 ) ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
        if ( tmp_condition_result_5 == NUITKA_BOOL_TRUE )
        {
            goto branch_yes_5;
        }
        else
        {
            goto branch_no_5;
        }
        branch_yes_5:;
        {
            nuitka_bool tmp_condition_result_6;
            PyObject *tmp_compexpr_left_5;
            PyObject *tmp_compexpr_right_5;
            PyObject *tmp_mvar_value_4;
            CHECK_OBJECT( par_stdout );
            tmp_compexpr_left_5 = par_stdout;
            tmp_mvar_value_4 = GET_STRING_DICT_VALUE( moduledict_subprocess, (Nuitka_StringObject *)const_str_plain_PIPE );

            if (unlikely( tmp_mvar_value_4 == NULL ))
            {
                tmp_mvar_value_4 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_PIPE );
            }

            if ( tmp_mvar_value_4 == NULL )
            {

                exception_type = PyExc_NameError;
                Py_INCREF( exception_type );
                exception_value = PyUnicode_FromFormat( "name '%s' is not defined", "PIPE" );
                exception_tb = NULL;
                NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
                CHAIN_EXCEPTION( exception_value );

                exception_lineno = 1351;
                type_description_1 = "oooooooooo";
                goto frame_exception_exit_1;
            }

            tmp_compexpr_right_5 = tmp_mvar_value_4;
            tmp_res = RICH_COMPARE_BOOL_EQ_OBJECT_OBJECT( tmp_compexpr_left_5, tmp_compexpr_right_5 );
            if ( tmp_res == -1 )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 1351;
                type_description_1 = "oooooooooo";
                goto frame_exception_exit_1;
            }
            tmp_condition_result_6 = ( tmp_res != 0 ) ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
            if ( tmp_condition_result_6 == NUITKA_BOOL_TRUE )
            {
                goto branch_yes_6;
            }
            else
            {
                goto branch_no_6;
            }
            branch_yes_6:;
            // Tried code:
            {
                PyObject *tmp_assign_source_24;
                PyObject *tmp_iter_arg_5;
                PyObject *tmp_called_instance_4;
                PyObject *tmp_mvar_value_5;
                tmp_mvar_value_5 = GET_STRING_DICT_VALUE( moduledict_subprocess, (Nuitka_StringObject *)const_str_plain_os );

                if (unlikely( tmp_mvar_value_5 == NULL ))
                {
                    tmp_mvar_value_5 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_os );
                }

                if ( tmp_mvar_value_5 == NULL )
                {

                    exception_type = PyExc_NameError;
                    Py_INCREF( exception_type );
                    exception_value = PyUnicode_FromFormat( "name '%s' is not defined", "os" );
                    exception_tb = NULL;
                    NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
                    CHAIN_EXCEPTION( exception_value );

                    exception_lineno = 1352;
                    type_description_1 = "oooooooooo";
                    goto try_except_handler_10;
                }

                tmp_called_instance_4 = tmp_mvar_value_5;
                frame_495b7c0e9bc8fdb79276f40655ad3103->m_frame.f_lineno = 1352;
                tmp_iter_arg_5 = CALL_METHOD_NO_ARGS( tmp_called_instance_4, const_str_plain_pipe );
                if ( tmp_iter_arg_5 == NULL )
                {
                    assert( ERROR_OCCURRED() );

                    FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                    exception_lineno = 1352;
                    type_description_1 = "oooooooooo";
                    goto try_except_handler_10;
                }
                tmp_assign_source_24 = MAKE_UNPACK_ITERATOR( tmp_iter_arg_5 );
                Py_DECREF( tmp_iter_arg_5 );
                if ( tmp_assign_source_24 == NULL )
                {
                    assert( ERROR_OCCURRED() );

                    FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                    exception_lineno = 1352;
                    type_description_1 = "oooooooooo";
                    goto try_except_handler_10;
                }
                assert( tmp_tuple_unpack_5__source_iter == NULL );
                tmp_tuple_unpack_5__source_iter = tmp_assign_source_24;
            }
            // Tried code:
            {
                PyObject *tmp_assign_source_25;
                PyObject *tmp_unpack_9;
                CHECK_OBJECT( tmp_tuple_unpack_5__source_iter );
                tmp_unpack_9 = tmp_tuple_unpack_5__source_iter;
                tmp_assign_source_25 = UNPACK_NEXT( tmp_unpack_9, 0, 2 );
                if ( tmp_assign_source_25 == NULL )
                {
                    if ( !ERROR_OCCURRED() )
                    {
                        exception_type = PyExc_StopIteration;
                        Py_INCREF( exception_type );
                        exception_value = NULL;
                        exception_tb = NULL;
                    }
                    else
                    {
                        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
                    }


                    type_description_1 = "oooooooooo";
                    exception_lineno = 1352;
                    goto try_except_handler_11;
                }
                assert( tmp_tuple_unpack_5__element_1 == NULL );
                tmp_tuple_unpack_5__element_1 = tmp_assign_source_25;
            }
            {
                PyObject *tmp_assign_source_26;
                PyObject *tmp_unpack_10;
                CHECK_OBJECT( tmp_tuple_unpack_5__source_iter );
                tmp_unpack_10 = tmp_tuple_unpack_5__source_iter;
                tmp_assign_source_26 = UNPACK_NEXT( tmp_unpack_10, 1, 2 );
                if ( tmp_assign_source_26 == NULL )
                {
                    if ( !ERROR_OCCURRED() )
                    {
                        exception_type = PyExc_StopIteration;
                        Py_INCREF( exception_type );
                        exception_value = NULL;
                        exception_tb = NULL;
                    }
                    else
                    {
                        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
                    }


                    type_description_1 = "oooooooooo";
                    exception_lineno = 1352;
                    goto try_except_handler_11;
                }
                assert( tmp_tuple_unpack_5__element_2 == NULL );
                tmp_tuple_unpack_5__element_2 = tmp_assign_source_26;
            }
            {
                PyObject *tmp_iterator_name_2;
                CHECK_OBJECT( tmp_tuple_unpack_5__source_iter );
                tmp_iterator_name_2 = tmp_tuple_unpack_5__source_iter;
                // Check if iterator has left-over elements.
                CHECK_OBJECT( tmp_iterator_name_2 ); assert( HAS_ITERNEXT( tmp_iterator_name_2 ) );

                tmp_iterator_attempt = (*Py_TYPE( tmp_iterator_name_2 )->tp_iternext)( tmp_iterator_name_2 );

                if (likely( tmp_iterator_attempt == NULL ))
                {
                    PyObject *error = GET_ERROR_OCCURRED();

                    if ( error != NULL )
                    {
                        if ( EXCEPTION_MATCH_BOOL_SINGLE( error, PyExc_StopIteration ))
                        {
                            CLEAR_ERROR_OCCURRED();
                        }
                        else
                        {
                            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );

                            type_description_1 = "oooooooooo";
                            exception_lineno = 1352;
                            goto try_except_handler_11;
                        }
                    }
                }
                else
                {
                    Py_DECREF( tmp_iterator_attempt );

                    // TODO: Could avoid PyErr_Format.
#if PYTHON_VERSION < 300
                    PyErr_Format( PyExc_ValueError, "too many values to unpack" );
#else
                    PyErr_Format( PyExc_ValueError, "too many values to unpack (expected 2)" );
#endif
                    FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );

                    type_description_1 = "oooooooooo";
                    exception_lineno = 1352;
                    goto try_except_handler_11;
                }
            }
            goto try_end_9;
            // Exception handler code:
            try_except_handler_11:;
            exception_keeper_type_9 = exception_type;
            exception_keeper_value_9 = exception_value;
            exception_keeper_tb_9 = exception_tb;
            exception_keeper_lineno_9 = exception_lineno;
            exception_type = NULL;
            exception_value = NULL;
            exception_tb = NULL;
            exception_lineno = 0;

            CHECK_OBJECT( (PyObject *)tmp_tuple_unpack_5__source_iter );
            Py_DECREF( tmp_tuple_unpack_5__source_iter );
            tmp_tuple_unpack_5__source_iter = NULL;

            // Re-raise.
            exception_type = exception_keeper_type_9;
            exception_value = exception_keeper_value_9;
            exception_tb = exception_keeper_tb_9;
            exception_lineno = exception_keeper_lineno_9;

            goto try_except_handler_10;
            // End of try:
            try_end_9:;
            goto try_end_10;
            // Exception handler code:
            try_except_handler_10:;
            exception_keeper_type_10 = exception_type;
            exception_keeper_value_10 = exception_value;
            exception_keeper_tb_10 = exception_tb;
            exception_keeper_lineno_10 = exception_lineno;
            exception_type = NULL;
            exception_value = NULL;
            exception_tb = NULL;
            exception_lineno = 0;

            Py_XDECREF( tmp_tuple_unpack_5__element_1 );
            tmp_tuple_unpack_5__element_1 = NULL;

            Py_XDECREF( tmp_tuple_unpack_5__element_2 );
            tmp_tuple_unpack_5__element_2 = NULL;

            // Re-raise.
            exception_type = exception_keeper_type_10;
            exception_value = exception_keeper_value_10;
            exception_tb = exception_keeper_tb_10;
            exception_lineno = exception_keeper_lineno_10;

            goto frame_exception_exit_1;
            // End of try:
            try_end_10:;
            CHECK_OBJECT( (PyObject *)tmp_tuple_unpack_5__source_iter );
            Py_DECREF( tmp_tuple_unpack_5__source_iter );
            tmp_tuple_unpack_5__source_iter = NULL;

            {
                PyObject *tmp_assign_source_27;
                CHECK_OBJECT( tmp_tuple_unpack_5__element_1 );
                tmp_assign_source_27 = tmp_tuple_unpack_5__element_1;
                {
                    PyObject *old = var_c2pread;
                    assert( old != NULL );
                    var_c2pread = tmp_assign_source_27;
                    Py_INCREF( var_c2pread );
                    Py_DECREF( old );
                }

            }
            Py_XDECREF( tmp_tuple_unpack_5__element_1 );
            tmp_tuple_unpack_5__element_1 = NULL;

            {
                PyObject *tmp_assign_source_28;
                CHECK_OBJECT( tmp_tuple_unpack_5__element_2 );
                tmp_assign_source_28 = tmp_tuple_unpack_5__element_2;
                {
                    PyObject *old = var_c2pwrite;
                    assert( old != NULL );
                    var_c2pwrite = tmp_assign_source_28;
                    Py_INCREF( var_c2pwrite );
                    Py_DECREF( old );
                }

            }
            Py_XDECREF( tmp_tuple_unpack_5__element_2 );
            tmp_tuple_unpack_5__element_2 = NULL;

            goto branch_end_6;
            branch_no_6:;
            {
                nuitka_bool tmp_condition_result_7;
                PyObject *tmp_compexpr_left_6;
                PyObject *tmp_compexpr_right_6;
                PyObject *tmp_mvar_value_6;
                CHECK_OBJECT( par_stdout );
                tmp_compexpr_left_6 = par_stdout;
                tmp_mvar_value_6 = GET_STRING_DICT_VALUE( moduledict_subprocess, (Nuitka_StringObject *)const_str_plain_DEVNULL );

                if (unlikely( tmp_mvar_value_6 == NULL ))
                {
                    tmp_mvar_value_6 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_DEVNULL );
                }

                if ( tmp_mvar_value_6 == NULL )
                {

                    exception_type = PyExc_NameError;
                    Py_INCREF( exception_type );
                    exception_value = PyUnicode_FromFormat( "name '%s' is not defined", "DEVNULL" );
                    exception_tb = NULL;
                    NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
                    CHAIN_EXCEPTION( exception_value );

                    exception_lineno = 1353;
                    type_description_1 = "oooooooooo";
                    goto frame_exception_exit_1;
                }

                tmp_compexpr_right_6 = tmp_mvar_value_6;
                tmp_res = RICH_COMPARE_BOOL_EQ_OBJECT_OBJECT( tmp_compexpr_left_6, tmp_compexpr_right_6 );
                if ( tmp_res == -1 )
                {
                    assert( ERROR_OCCURRED() );

                    FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                    exception_lineno = 1353;
                    type_description_1 = "oooooooooo";
                    goto frame_exception_exit_1;
                }
                tmp_condition_result_7 = ( tmp_res != 0 ) ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
                if ( tmp_condition_result_7 == NUITKA_BOOL_TRUE )
                {
                    goto branch_yes_7;
                }
                else
                {
                    goto branch_no_7;
                }
                branch_yes_7:;
                {
                    PyObject *tmp_assign_source_29;
                    PyObject *tmp_called_instance_5;
                    CHECK_OBJECT( par_self );
                    tmp_called_instance_5 = par_self;
                    frame_495b7c0e9bc8fdb79276f40655ad3103->m_frame.f_lineno = 1354;
                    tmp_assign_source_29 = CALL_METHOD_NO_ARGS( tmp_called_instance_5, const_str_plain__get_devnull );
                    if ( tmp_assign_source_29 == NULL )
                    {
                        assert( ERROR_OCCURRED() );

                        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                        exception_lineno = 1354;
                        type_description_1 = "oooooooooo";
                        goto frame_exception_exit_1;
                    }
                    {
                        PyObject *old = var_c2pwrite;
                        assert( old != NULL );
                        var_c2pwrite = tmp_assign_source_29;
                        Py_DECREF( old );
                    }

                }
                goto branch_end_7;
                branch_no_7:;
                {
                    nuitka_bool tmp_condition_result_8;
                    PyObject *tmp_isinstance_inst_2;
                    PyObject *tmp_isinstance_cls_2;
                    CHECK_OBJECT( par_stdout );
                    tmp_isinstance_inst_2 = par_stdout;
                    tmp_isinstance_cls_2 = (PyObject *)&PyLong_Type;
                    tmp_res = Nuitka_IsInstance( tmp_isinstance_inst_2, tmp_isinstance_cls_2 );
                    if ( tmp_res == -1 )
                    {
                        assert( ERROR_OCCURRED() );

                        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                        exception_lineno = 1355;
                        type_description_1 = "oooooooooo";
                        goto frame_exception_exit_1;
                    }
                    tmp_condition_result_8 = ( tmp_res != 0 ) ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
                    if ( tmp_condition_result_8 == NUITKA_BOOL_TRUE )
                    {
                        goto branch_yes_8;
                    }
                    else
                    {
                        goto branch_no_8;
                    }
                    branch_yes_8:;
                    {
                        PyObject *tmp_assign_source_30;
                        CHECK_OBJECT( par_stdout );
                        tmp_assign_source_30 = par_stdout;
                        {
                            PyObject *old = var_c2pwrite;
                            assert( old != NULL );
                            var_c2pwrite = tmp_assign_source_30;
                            Py_INCREF( var_c2pwrite );
                            Py_DECREF( old );
                        }

                    }
                    goto branch_end_8;
                    branch_no_8:;
                    {
                        PyObject *tmp_assign_source_31;
                        PyObject *tmp_called_instance_6;
                        CHECK_OBJECT( par_stdout );
                        tmp_called_instance_6 = par_stdout;
                        frame_495b7c0e9bc8fdb79276f40655ad3103->m_frame.f_lineno = 1359;
                        tmp_assign_source_31 = CALL_METHOD_NO_ARGS( tmp_called_instance_6, const_str_plain_fileno );
                        if ( tmp_assign_source_31 == NULL )
                        {
                            assert( ERROR_OCCURRED() );

                            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                            exception_lineno = 1359;
                            type_description_1 = "oooooooooo";
                            goto frame_exception_exit_1;
                        }
                        {
                            PyObject *old = var_c2pwrite;
                            assert( old != NULL );
                            var_c2pwrite = tmp_assign_source_31;
                            Py_DECREF( old );
                        }

                    }
                    branch_end_8:;
                }
                branch_end_7:;
            }
            branch_end_6:;
        }
        branch_no_5:;
    }
    {
        nuitka_bool tmp_condition_result_9;
        PyObject *tmp_compexpr_left_7;
        PyObject *tmp_compexpr_right_7;
        CHECK_OBJECT( par_stderr );
        tmp_compexpr_left_7 = par_stderr;
        tmp_compexpr_right_7 = Py_None;
        tmp_condition_result_9 = ( tmp_compexpr_left_7 != tmp_compexpr_right_7 ) ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
        if ( tmp_condition_result_9 == NUITKA_BOOL_TRUE )
        {
            goto branch_yes_9;
        }
        else
        {
            goto branch_no_9;
        }
        branch_yes_9:;
        {
            nuitka_bool tmp_condition_result_10;
            PyObject *tmp_compexpr_left_8;
            PyObject *tmp_compexpr_right_8;
            PyObject *tmp_mvar_value_7;
            CHECK_OBJECT( par_stderr );
            tmp_compexpr_left_8 = par_stderr;
            tmp_mvar_value_7 = GET_STRING_DICT_VALUE( moduledict_subprocess, (Nuitka_StringObject *)const_str_plain_PIPE );

            if (unlikely( tmp_mvar_value_7 == NULL ))
            {
                tmp_mvar_value_7 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_PIPE );
            }

            if ( tmp_mvar_value_7 == NULL )
            {

                exception_type = PyExc_NameError;
                Py_INCREF( exception_type );
                exception_value = PyUnicode_FromFormat( "name '%s' is not defined", "PIPE" );
                exception_tb = NULL;
                NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
                CHAIN_EXCEPTION( exception_value );

                exception_lineno = 1363;
                type_description_1 = "oooooooooo";
                goto frame_exception_exit_1;
            }

            tmp_compexpr_right_8 = tmp_mvar_value_7;
            tmp_res = RICH_COMPARE_BOOL_EQ_OBJECT_OBJECT( tmp_compexpr_left_8, tmp_compexpr_right_8 );
            if ( tmp_res == -1 )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 1363;
                type_description_1 = "oooooooooo";
                goto frame_exception_exit_1;
            }
            tmp_condition_result_10 = ( tmp_res != 0 ) ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
            if ( tmp_condition_result_10 == NUITKA_BOOL_TRUE )
            {
                goto branch_yes_10;
            }
            else
            {
                goto branch_no_10;
            }
            branch_yes_10:;
            // Tried code:
            {
                PyObject *tmp_assign_source_32;
                PyObject *tmp_iter_arg_6;
                PyObject *tmp_called_instance_7;
                PyObject *tmp_mvar_value_8;
                tmp_mvar_value_8 = GET_STRING_DICT_VALUE( moduledict_subprocess, (Nuitka_StringObject *)const_str_plain_os );

                if (unlikely( tmp_mvar_value_8 == NULL ))
                {
                    tmp_mvar_value_8 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_os );
                }

                if ( tmp_mvar_value_8 == NULL )
                {

                    exception_type = PyExc_NameError;
                    Py_INCREF( exception_type );
                    exception_value = PyUnicode_FromFormat( "name '%s' is not defined", "os" );
                    exception_tb = NULL;
                    NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
                    CHAIN_EXCEPTION( exception_value );

                    exception_lineno = 1364;
                    type_description_1 = "oooooooooo";
                    goto try_except_handler_12;
                }

                tmp_called_instance_7 = tmp_mvar_value_8;
                frame_495b7c0e9bc8fdb79276f40655ad3103->m_frame.f_lineno = 1364;
                tmp_iter_arg_6 = CALL_METHOD_NO_ARGS( tmp_called_instance_7, const_str_plain_pipe );
                if ( tmp_iter_arg_6 == NULL )
                {
                    assert( ERROR_OCCURRED() );

                    FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                    exception_lineno = 1364;
                    type_description_1 = "oooooooooo";
                    goto try_except_handler_12;
                }
                tmp_assign_source_32 = MAKE_UNPACK_ITERATOR( tmp_iter_arg_6 );
                Py_DECREF( tmp_iter_arg_6 );
                if ( tmp_assign_source_32 == NULL )
                {
                    assert( ERROR_OCCURRED() );

                    FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                    exception_lineno = 1364;
                    type_description_1 = "oooooooooo";
                    goto try_except_handler_12;
                }
                assert( tmp_tuple_unpack_6__source_iter == NULL );
                tmp_tuple_unpack_6__source_iter = tmp_assign_source_32;
            }
            // Tried code:
            {
                PyObject *tmp_assign_source_33;
                PyObject *tmp_unpack_11;
                CHECK_OBJECT( tmp_tuple_unpack_6__source_iter );
                tmp_unpack_11 = tmp_tuple_unpack_6__source_iter;
                tmp_assign_source_33 = UNPACK_NEXT( tmp_unpack_11, 0, 2 );
                if ( tmp_assign_source_33 == NULL )
                {
                    if ( !ERROR_OCCURRED() )
                    {
                        exception_type = PyExc_StopIteration;
                        Py_INCREF( exception_type );
                        exception_value = NULL;
                        exception_tb = NULL;
                    }
                    else
                    {
                        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
                    }


                    type_description_1 = "oooooooooo";
                    exception_lineno = 1364;
                    goto try_except_handler_13;
                }
                assert( tmp_tuple_unpack_6__element_1 == NULL );
                tmp_tuple_unpack_6__element_1 = tmp_assign_source_33;
            }
            {
                PyObject *tmp_assign_source_34;
                PyObject *tmp_unpack_12;
                CHECK_OBJECT( tmp_tuple_unpack_6__source_iter );
                tmp_unpack_12 = tmp_tuple_unpack_6__source_iter;
                tmp_assign_source_34 = UNPACK_NEXT( tmp_unpack_12, 1, 2 );
                if ( tmp_assign_source_34 == NULL )
                {
                    if ( !ERROR_OCCURRED() )
                    {
                        exception_type = PyExc_StopIteration;
                        Py_INCREF( exception_type );
                        exception_value = NULL;
                        exception_tb = NULL;
                    }
                    else
                    {
                        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
                    }


                    type_description_1 = "oooooooooo";
                    exception_lineno = 1364;
                    goto try_except_handler_13;
                }
                assert( tmp_tuple_unpack_6__element_2 == NULL );
                tmp_tuple_unpack_6__element_2 = tmp_assign_source_34;
            }
            {
                PyObject *tmp_iterator_name_3;
                CHECK_OBJECT( tmp_tuple_unpack_6__source_iter );
                tmp_iterator_name_3 = tmp_tuple_unpack_6__source_iter;
                // Check if iterator has left-over elements.
                CHECK_OBJECT( tmp_iterator_name_3 ); assert( HAS_ITERNEXT( tmp_iterator_name_3 ) );

                tmp_iterator_attempt = (*Py_TYPE( tmp_iterator_name_3 )->tp_iternext)( tmp_iterator_name_3 );

                if (likely( tmp_iterator_attempt == NULL ))
                {
                    PyObject *error = GET_ERROR_OCCURRED();

                    if ( error != NULL )
                    {
                        if ( EXCEPTION_MATCH_BOOL_SINGLE( error, PyExc_StopIteration ))
                        {
                            CLEAR_ERROR_OCCURRED();
                        }
                        else
                        {
                            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );

                            type_description_1 = "oooooooooo";
                            exception_lineno = 1364;
                            goto try_except_handler_13;
                        }
                    }
                }
                else
                {
                    Py_DECREF( tmp_iterator_attempt );

                    // TODO: Could avoid PyErr_Format.
#if PYTHON_VERSION < 300
                    PyErr_Format( PyExc_ValueError, "too many values to unpack" );
#else
                    PyErr_Format( PyExc_ValueError, "too many values to unpack (expected 2)" );
#endif
                    FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );

                    type_description_1 = "oooooooooo";
                    exception_lineno = 1364;
                    goto try_except_handler_13;
                }
            }
            goto try_end_11;
            // Exception handler code:
            try_except_handler_13:;
            exception_keeper_type_11 = exception_type;
            exception_keeper_value_11 = exception_value;
            exception_keeper_tb_11 = exception_tb;
            exception_keeper_lineno_11 = exception_lineno;
            exception_type = NULL;
            exception_value = NULL;
            exception_tb = NULL;
            exception_lineno = 0;

            CHECK_OBJECT( (PyObject *)tmp_tuple_unpack_6__source_iter );
            Py_DECREF( tmp_tuple_unpack_6__source_iter );
            tmp_tuple_unpack_6__source_iter = NULL;

            // Re-raise.
            exception_type = exception_keeper_type_11;
            exception_value = exception_keeper_value_11;
            exception_tb = exception_keeper_tb_11;
            exception_lineno = exception_keeper_lineno_11;

            goto try_except_handler_12;
            // End of try:
            try_end_11:;
            goto try_end_12;
            // Exception handler code:
            try_except_handler_12:;
            exception_keeper_type_12 = exception_type;
            exception_keeper_value_12 = exception_value;
            exception_keeper_tb_12 = exception_tb;
            exception_keeper_lineno_12 = exception_lineno;
            exception_type = NULL;
            exception_value = NULL;
            exception_tb = NULL;
            exception_lineno = 0;

            Py_XDECREF( tmp_tuple_unpack_6__element_1 );
            tmp_tuple_unpack_6__element_1 = NULL;

            Py_XDECREF( tmp_tuple_unpack_6__element_2 );
            tmp_tuple_unpack_6__element_2 = NULL;

            // Re-raise.
            exception_type = exception_keeper_type_12;
            exception_value = exception_keeper_value_12;
            exception_tb = exception_keeper_tb_12;
            exception_lineno = exception_keeper_lineno_12;

            goto frame_exception_exit_1;
            // End of try:
            try_end_12:;
            CHECK_OBJECT( (PyObject *)tmp_tuple_unpack_6__source_iter );
            Py_DECREF( tmp_tuple_unpack_6__source_iter );
            tmp_tuple_unpack_6__source_iter = NULL;

            {
                PyObject *tmp_assign_source_35;
                CHECK_OBJECT( tmp_tuple_unpack_6__element_1 );
                tmp_assign_source_35 = tmp_tuple_unpack_6__element_1;
                {
                    PyObject *old = var_errread;
                    assert( old != NULL );
                    var_errread = tmp_assign_source_35;
                    Py_INCREF( var_errread );
                    Py_DECREF( old );
                }

            }
            Py_XDECREF( tmp_tuple_unpack_6__element_1 );
            tmp_tuple_unpack_6__element_1 = NULL;

            {
                PyObject *tmp_assign_source_36;
                CHECK_OBJECT( tmp_tuple_unpack_6__element_2 );
                tmp_assign_source_36 = tmp_tuple_unpack_6__element_2;
                {
                    PyObject *old = var_errwrite;
                    assert( old != NULL );
                    var_errwrite = tmp_assign_source_36;
                    Py_INCREF( var_errwrite );
                    Py_DECREF( old );
                }

            }
            Py_XDECREF( tmp_tuple_unpack_6__element_2 );
            tmp_tuple_unpack_6__element_2 = NULL;

            goto branch_end_10;
            branch_no_10:;
            {
                nuitka_bool tmp_condition_result_11;
                PyObject *tmp_compexpr_left_9;
                PyObject *tmp_compexpr_right_9;
                PyObject *tmp_mvar_value_9;
                CHECK_OBJECT( par_stderr );
                tmp_compexpr_left_9 = par_stderr;
                tmp_mvar_value_9 = GET_STRING_DICT_VALUE( moduledict_subprocess, (Nuitka_StringObject *)const_str_plain_STDOUT );

                if (unlikely( tmp_mvar_value_9 == NULL ))
                {
                    tmp_mvar_value_9 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_STDOUT );
                }

                if ( tmp_mvar_value_9 == NULL )
                {

                    exception_type = PyExc_NameError;
                    Py_INCREF( exception_type );
                    exception_value = PyUnicode_FromFormat( "name '%s' is not defined", "STDOUT" );
                    exception_tb = NULL;
                    NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
                    CHAIN_EXCEPTION( exception_value );

                    exception_lineno = 1365;
                    type_description_1 = "oooooooooo";
                    goto frame_exception_exit_1;
                }

                tmp_compexpr_right_9 = tmp_mvar_value_9;
                tmp_res = RICH_COMPARE_BOOL_EQ_OBJECT_OBJECT( tmp_compexpr_left_9, tmp_compexpr_right_9 );
                if ( tmp_res == -1 )
                {
                    assert( ERROR_OCCURRED() );

                    FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                    exception_lineno = 1365;
                    type_description_1 = "oooooooooo";
                    goto frame_exception_exit_1;
                }
                tmp_condition_result_11 = ( tmp_res != 0 ) ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
                if ( tmp_condition_result_11 == NUITKA_BOOL_TRUE )
                {
                    goto branch_yes_11;
                }
                else
                {
                    goto branch_no_11;
                }
                branch_yes_11:;
                {
                    nuitka_bool tmp_condition_result_12;
                    PyObject *tmp_compexpr_left_10;
                    PyObject *tmp_compexpr_right_10;
                    if ( var_c2pwrite == NULL )
                    {

                        exception_type = PyExc_UnboundLocalError;
                        Py_INCREF( exception_type );
                        exception_value = PyUnicode_FromFormat( "local variable '%s' referenced before assignment", "c2pwrite" );
                        exception_tb = NULL;
                        NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
                        CHAIN_EXCEPTION( exception_value );

                        exception_lineno = 1366;
                        type_description_1 = "oooooooooo";
                        goto frame_exception_exit_1;
                    }

                    tmp_compexpr_left_10 = var_c2pwrite;
                    tmp_compexpr_right_10 = const_int_neg_1;
                    tmp_res = RICH_COMPARE_BOOL_NOTEQ_OBJECT_OBJECT( tmp_compexpr_left_10, tmp_compexpr_right_10 );
                    if ( tmp_res == -1 )
                    {
                        assert( ERROR_OCCURRED() );

                        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                        exception_lineno = 1366;
                        type_description_1 = "oooooooooo";
                        goto frame_exception_exit_1;
                    }
                    tmp_condition_result_12 = ( tmp_res != 0 ) ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
                    if ( tmp_condition_result_12 == NUITKA_BOOL_TRUE )
                    {
                        goto branch_yes_12;
                    }
                    else
                    {
                        goto branch_no_12;
                    }
                    branch_yes_12:;
                    {
                        PyObject *tmp_assign_source_37;
                        if ( var_c2pwrite == NULL )
                        {

                            exception_type = PyExc_UnboundLocalError;
                            Py_INCREF( exception_type );
                            exception_value = PyUnicode_FromFormat( "local variable '%s' referenced before assignment", "c2pwrite" );
                            exception_tb = NULL;
                            NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
                            CHAIN_EXCEPTION( exception_value );

                            exception_lineno = 1367;
                            type_description_1 = "oooooooooo";
                            goto frame_exception_exit_1;
                        }

                        tmp_assign_source_37 = var_c2pwrite;
                        {
                            PyObject *old = var_errwrite;
                            assert( old != NULL );
                            var_errwrite = tmp_assign_source_37;
                            Py_INCREF( var_errwrite );
                            Py_DECREF( old );
                        }

                    }
                    goto branch_end_12;
                    branch_no_12:;
                    {
                        PyObject *tmp_assign_source_38;
                        PyObject *tmp_called_instance_8;
                        PyObject *tmp_source_name_1;
                        PyObject *tmp_mvar_value_10;
                        tmp_mvar_value_10 = GET_STRING_DICT_VALUE( moduledict_subprocess, (Nuitka_StringObject *)const_str_plain_sys );

                        if (unlikely( tmp_mvar_value_10 == NULL ))
                        {
                            tmp_mvar_value_10 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_sys );
                        }

                        if ( tmp_mvar_value_10 == NULL )
                        {

                            exception_type = PyExc_NameError;
                            Py_INCREF( exception_type );
                            exception_value = PyUnicode_FromFormat( "name '%s' is not defined", "sys" );
                            exception_tb = NULL;
                            NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
                            CHAIN_EXCEPTION( exception_value );

                            exception_lineno = 1369;
                            type_description_1 = "oooooooooo";
                            goto frame_exception_exit_1;
                        }

                        tmp_source_name_1 = tmp_mvar_value_10;
                        tmp_called_instance_8 = LOOKUP_ATTRIBUTE( tmp_source_name_1, const_str_plain___stdout__ );
                        if ( tmp_called_instance_8 == NULL )
                        {
                            assert( ERROR_OCCURRED() );

                            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                            exception_lineno = 1369;
                            type_description_1 = "oooooooooo";
                            goto frame_exception_exit_1;
                        }
                        frame_495b7c0e9bc8fdb79276f40655ad3103->m_frame.f_lineno = 1369;
                        tmp_assign_source_38 = CALL_METHOD_NO_ARGS( tmp_called_instance_8, const_str_plain_fileno );
                        Py_DECREF( tmp_called_instance_8 );
                        if ( tmp_assign_source_38 == NULL )
                        {
                            assert( ERROR_OCCURRED() );

                            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                            exception_lineno = 1369;
                            type_description_1 = "oooooooooo";
                            goto frame_exception_exit_1;
                        }
                        {
                            PyObject *old = var_errwrite;
                            assert( old != NULL );
                            var_errwrite = tmp_assign_source_38;
                            Py_DECREF( old );
                        }

                    }
                    branch_end_12:;
                }
                goto branch_end_11;
                branch_no_11:;
                {
                    nuitka_bool tmp_condition_result_13;
                    PyObject *tmp_compexpr_left_11;
                    PyObject *tmp_compexpr_right_11;
                    PyObject *tmp_mvar_value_11;
                    CHECK_OBJECT( par_stderr );
                    tmp_compexpr_left_11 = par_stderr;
                    tmp_mvar_value_11 = GET_STRING_DICT_VALUE( moduledict_subprocess, (Nuitka_StringObject *)const_str_plain_DEVNULL );

                    if (unlikely( tmp_mvar_value_11 == NULL ))
                    {
                        tmp_mvar_value_11 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_DEVNULL );
                    }

                    if ( tmp_mvar_value_11 == NULL )
                    {

                        exception_type = PyExc_NameError;
                        Py_INCREF( exception_type );
                        exception_value = PyUnicode_FromFormat( "name '%s' is not defined", "DEVNULL" );
                        exception_tb = NULL;
                        NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
                        CHAIN_EXCEPTION( exception_value );

                        exception_lineno = 1370;
                        type_description_1 = "oooooooooo";
                        goto frame_exception_exit_1;
                    }

                    tmp_compexpr_right_11 = tmp_mvar_value_11;
                    tmp_res = RICH_COMPARE_BOOL_EQ_OBJECT_OBJECT( tmp_compexpr_left_11, tmp_compexpr_right_11 );
                    if ( tmp_res == -1 )
                    {
                        assert( ERROR_OCCURRED() );

                        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                        exception_lineno = 1370;
                        type_description_1 = "oooooooooo";
                        goto frame_exception_exit_1;
                    }
                    tmp_condition_result_13 = ( tmp_res != 0 ) ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
                    if ( tmp_condition_result_13 == NUITKA_BOOL_TRUE )
                    {
                        goto branch_yes_13;
                    }
                    else
                    {
                        goto branch_no_13;
                    }
                    branch_yes_13:;
                    {
                        PyObject *tmp_assign_source_39;
                        PyObject *tmp_called_instance_9;
                        CHECK_OBJECT( par_self );
                        tmp_called_instance_9 = par_self;
                        frame_495b7c0e9bc8fdb79276f40655ad3103->m_frame.f_lineno = 1371;
                        tmp_assign_source_39 = CALL_METHOD_NO_ARGS( tmp_called_instance_9, const_str_plain__get_devnull );
                        if ( tmp_assign_source_39 == NULL )
                        {
                            assert( ERROR_OCCURRED() );

                            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                            exception_lineno = 1371;
                            type_description_1 = "oooooooooo";
                            goto frame_exception_exit_1;
                        }
                        {
                            PyObject *old = var_errwrite;
                            assert( old != NULL );
                            var_errwrite = tmp_assign_source_39;
                            Py_DECREF( old );
                        }

                    }
                    goto branch_end_13;
                    branch_no_13:;
                    {
                        nuitka_bool tmp_condition_result_14;
                        PyObject *tmp_isinstance_inst_3;
                        PyObject *tmp_isinstance_cls_3;
                        CHECK_OBJECT( par_stderr );
                        tmp_isinstance_inst_3 = par_stderr;
                        tmp_isinstance_cls_3 = (PyObject *)&PyLong_Type;
                        tmp_res = Nuitka_IsInstance( tmp_isinstance_inst_3, tmp_isinstance_cls_3 );
                        if ( tmp_res == -1 )
                        {
                            assert( ERROR_OCCURRED() );

                            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                            exception_lineno = 1372;
                            type_description_1 = "oooooooooo";
                            goto frame_exception_exit_1;
                        }
                        tmp_condition_result_14 = ( tmp_res != 0 ) ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
                        if ( tmp_condition_result_14 == NUITKA_BOOL_TRUE )
                        {
                            goto branch_yes_14;
                        }
                        else
                        {
                            goto branch_no_14;
                        }
                        branch_yes_14:;
                        {
                            PyObject *tmp_assign_source_40;
                            CHECK_OBJECT( par_stderr );
                            tmp_assign_source_40 = par_stderr;
                            {
                                PyObject *old = var_errwrite;
                                assert( old != NULL );
                                var_errwrite = tmp_assign_source_40;
                                Py_INCREF( var_errwrite );
                                Py_DECREF( old );
                            }

                        }
                        goto branch_end_14;
                        branch_no_14:;
                        {
                            PyObject *tmp_assign_source_41;
                            PyObject *tmp_called_instance_10;
                            CHECK_OBJECT( par_stderr );
                            tmp_called_instance_10 = par_stderr;
                            frame_495b7c0e9bc8fdb79276f40655ad3103->m_frame.f_lineno = 1376;
                            tmp_assign_source_41 = CALL_METHOD_NO_ARGS( tmp_called_instance_10, const_str_plain_fileno );
                            if ( tmp_assign_source_41 == NULL )
                            {
                                assert( ERROR_OCCURRED() );

                                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                                exception_lineno = 1376;
                                type_description_1 = "oooooooooo";
                                goto frame_exception_exit_1;
                            }
                            {
                                PyObject *old = var_errwrite;
                                assert( old != NULL );
                                var_errwrite = tmp_assign_source_41;
                                Py_DECREF( old );
                            }

                        }
                        branch_end_14:;
                    }
                    branch_end_13:;
                }
                branch_end_11:;
            }
            branch_end_10:;
        }
        branch_no_9:;
    }
    {
        PyObject *tmp_tuple_element_1;
        if ( var_p2cread == NULL )
        {

            exception_type = PyExc_UnboundLocalError;
            Py_INCREF( exception_type );
            exception_value = PyUnicode_FromFormat( "local variable '%s' referenced before assignment", "p2cread" );
            exception_tb = NULL;
            NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
            CHAIN_EXCEPTION( exception_value );

            exception_lineno = 1378;
            type_description_1 = "oooooooooo";
            goto frame_exception_exit_1;
        }

        tmp_tuple_element_1 = var_p2cread;
        tmp_return_value = PyTuple_New( 6 );
        Py_INCREF( tmp_tuple_element_1 );
        PyTuple_SET_ITEM( tmp_return_value, 0, tmp_tuple_element_1 );
        if ( var_p2cwrite == NULL )
        {
            Py_DECREF( tmp_return_value );
            exception_type = PyExc_UnboundLocalError;
            Py_INCREF( exception_type );
            exception_value = PyUnicode_FromFormat( "local variable '%s' referenced before assignment", "p2cwrite" );
            exception_tb = NULL;
            NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
            CHAIN_EXCEPTION( exception_value );

            exception_lineno = 1378;
            type_description_1 = "oooooooooo";
            goto frame_exception_exit_1;
        }

        tmp_tuple_element_1 = var_p2cwrite;
        Py_INCREF( tmp_tuple_element_1 );
        PyTuple_SET_ITEM( tmp_return_value, 1, tmp_tuple_element_1 );
        if ( var_c2pread == NULL )
        {
            Py_DECREF( tmp_return_value );
            exception_type = PyExc_UnboundLocalError;
            Py_INCREF( exception_type );
            exception_value = PyUnicode_FromFormat( "local variable '%s' referenced before assignment", "c2pread" );
            exception_tb = NULL;
            NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
            CHAIN_EXCEPTION( exception_value );

            exception_lineno = 1379;
            type_description_1 = "oooooooooo";
            goto frame_exception_exit_1;
        }

        tmp_tuple_element_1 = var_c2pread;
        Py_INCREF( tmp_tuple_element_1 );
        PyTuple_SET_ITEM( tmp_return_value, 2, tmp_tuple_element_1 );
        if ( var_c2pwrite == NULL )
        {
            Py_DECREF( tmp_return_value );
            exception_type = PyExc_UnboundLocalError;
            Py_INCREF( exception_type );
            exception_value = PyUnicode_FromFormat( "local variable '%s' referenced before assignment", "c2pwrite" );
            exception_tb = NULL;
            NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
            CHAIN_EXCEPTION( exception_value );

            exception_lineno = 1379;
            type_description_1 = "oooooooooo";
            goto frame_exception_exit_1;
        }

        tmp_tuple_element_1 = var_c2pwrite;
        Py_INCREF( tmp_tuple_element_1 );
        PyTuple_SET_ITEM( tmp_return_value, 3, tmp_tuple_element_1 );
        if ( var_errread == NULL )
        {
            Py_DECREF( tmp_return_value );
            exception_type = PyExc_UnboundLocalError;
            Py_INCREF( exception_type );
            exception_value = PyUnicode_FromFormat( "local variable '%s' referenced before assignment", "errread" );
            exception_tb = NULL;
            NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
            CHAIN_EXCEPTION( exception_value );

            exception_lineno = 1380;
            type_description_1 = "oooooooooo";
            goto frame_exception_exit_1;
        }

        tmp_tuple_element_1 = var_errread;
        Py_INCREF( tmp_tuple_element_1 );
        PyTuple_SET_ITEM( tmp_return_value, 4, tmp_tuple_element_1 );
        if ( var_errwrite == NULL )
        {
            Py_DECREF( tmp_return_value );
            exception_type = PyExc_UnboundLocalError;
            Py_INCREF( exception_type );
            exception_value = PyUnicode_FromFormat( "local variable '%s' referenced before assignment", "errwrite" );
            exception_tb = NULL;
            NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
            CHAIN_EXCEPTION( exception_value );

            exception_lineno = 1380;
            type_description_1 = "oooooooooo";
            goto frame_exception_exit_1;
        }

        tmp_tuple_element_1 = var_errwrite;
        Py_INCREF( tmp_tuple_element_1 );
        PyTuple_SET_ITEM( tmp_return_value, 5, tmp_tuple_element_1 );
        goto frame_return_exit_1;
    }

#if 0
    RESTORE_FRAME_EXCEPTION( frame_495b7c0e9bc8fdb79276f40655ad3103 );
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto frame_no_exception_1;

    frame_return_exit_1:;
#if 0
    RESTORE_FRAME_EXCEPTION( frame_495b7c0e9bc8fdb79276f40655ad3103 );
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto try_return_handler_1;

    frame_exception_exit_1:;

#if 0
    RESTORE_FRAME_EXCEPTION( frame_495b7c0e9bc8fdb79276f40655ad3103 );
#endif

    if ( exception_tb == NULL )
    {
        exception_tb = MAKE_TRACEBACK( frame_495b7c0e9bc8fdb79276f40655ad3103, exception_lineno );
    }
    else if ( exception_tb->tb_frame != &frame_495b7c0e9bc8fdb79276f40655ad3103->m_frame )
    {
        exception_tb = ADD_TRACEBACK( exception_tb, frame_495b7c0e9bc8fdb79276f40655ad3103, exception_lineno );
    }

    // Attachs locals to frame if any.
    Nuitka_Frame_AttachLocals(
        (struct Nuitka_FrameObject *)frame_495b7c0e9bc8fdb79276f40655ad3103,
        type_description_1,
        par_self,
        par_stdin,
        par_stdout,
        par_stderr,
        var_p2cread,
        var_p2cwrite,
        var_c2pread,
        var_c2pwrite,
        var_errread,
        var_errwrite
    );


    // Release cached frame.
    if ( frame_495b7c0e9bc8fdb79276f40655ad3103 == cache_frame_495b7c0e9bc8fdb79276f40655ad3103 )
    {
        Py_DECREF( frame_495b7c0e9bc8fdb79276f40655ad3103 );
    }
    cache_frame_495b7c0e9bc8fdb79276f40655ad3103 = NULL;

    assertFrameObject( frame_495b7c0e9bc8fdb79276f40655ad3103 );

    // Put the previous frame back on top.
    popFrameStack();

    // Return the error.
    goto try_except_handler_1;

    frame_no_exception_1:;
    // tried codes exits in all cases
    NUITKA_CANNOT_GET_HERE( subprocess$$$function_51__get_handles );
    return NULL;
    // Return handler code:
    try_return_handler_1:;
    CHECK_OBJECT( (PyObject *)par_self );
    Py_DECREF( par_self );
    par_self = NULL;

    CHECK_OBJECT( (PyObject *)par_stdin );
    Py_DECREF( par_stdin );
    par_stdin = NULL;

    CHECK_OBJECT( (PyObject *)par_stdout );
    Py_DECREF( par_stdout );
    par_stdout = NULL;

    CHECK_OBJECT( (PyObject *)par_stderr );
    Py_DECREF( par_stderr );
    par_stderr = NULL;

    Py_XDECREF( var_p2cread );
    var_p2cread = NULL;

    Py_XDECREF( var_p2cwrite );
    var_p2cwrite = NULL;

    Py_XDECREF( var_c2pread );
    var_c2pread = NULL;

    Py_XDECREF( var_c2pwrite );
    var_c2pwrite = NULL;

    Py_XDECREF( var_errread );
    var_errread = NULL;

    Py_XDECREF( var_errwrite );
    var_errwrite = NULL;

    goto function_return_exit;
    // Exception handler code:
    try_except_handler_1:;
    exception_keeper_type_13 = exception_type;
    exception_keeper_value_13 = exception_value;
    exception_keeper_tb_13 = exception_tb;
    exception_keeper_lineno_13 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    CHECK_OBJECT( (PyObject *)par_self );
    Py_DECREF( par_self );
    par_self = NULL;

    CHECK_OBJECT( (PyObject *)par_stdin );
    Py_DECREF( par_stdin );
    par_stdin = NULL;

    CHECK_OBJECT( (PyObject *)par_stdout );
    Py_DECREF( par_stdout );
    par_stdout = NULL;

    CHECK_OBJECT( (PyObject *)par_stderr );
    Py_DECREF( par_stderr );
    par_stderr = NULL;

    Py_XDECREF( var_p2cread );
    var_p2cread = NULL;

    Py_XDECREF( var_p2cwrite );
    var_p2cwrite = NULL;

    Py_XDECREF( var_c2pread );
    var_c2pread = NULL;

    Py_XDECREF( var_c2pwrite );
    var_c2pwrite = NULL;

    Py_XDECREF( var_errread );
    var_errread = NULL;

    Py_XDECREF( var_errwrite );
    var_errwrite = NULL;

    // Re-raise.
    exception_type = exception_keeper_type_13;
    exception_value = exception_keeper_value_13;
    exception_tb = exception_keeper_tb_13;
    exception_lineno = exception_keeper_lineno_13;

    goto function_exception_exit;
    // End of try:

    // Return statement must have exited already.
    NUITKA_CANNOT_GET_HERE( subprocess$$$function_51__get_handles );
    return NULL;

function_exception_exit:
    assert( exception_type );
    RESTORE_ERROR_OCCURRED( exception_type, exception_value, exception_tb );

    return NULL;

function_return_exit:
   // Function cleanup code if any.


   // Actual function exit with return value, making sure we did not make
   // the error status worse despite non-NULL return.
   CHECK_OBJECT( tmp_return_value );
   assert( had_error || !ERROR_OCCURRED() );
   return tmp_return_value;
}


static PyObject *impl_subprocess$$$function_52__execute_child( struct Nuitka_FunctionObject const *self, PyObject **python_pars )
{
    // Preserve error status for checks
#ifndef __NUITKA_NO_ASSERT__
    NUITKA_MAY_BE_UNUSED bool had_error = ERROR_OCCURRED();
#endif

    // Local variable declarations.
    PyObject *par_self = python_pars[ 0 ];
    PyObject *par_args = python_pars[ 1 ];
    struct Nuitka_CellObject *par_executable = PyCell_NEW1( python_pars[ 2 ] );
    PyObject *par_preexec_fn = python_pars[ 3 ];
    PyObject *par_close_fds = python_pars[ 4 ];
    PyObject *par_pass_fds = python_pars[ 5 ];
    PyObject *par_cwd = python_pars[ 6 ];
    PyObject *par_env = python_pars[ 7 ];
    PyObject *par_startupinfo = python_pars[ 8 ];
    PyObject *par_creationflags = python_pars[ 9 ];
    PyObject *par_shell = python_pars[ 10 ];
    PyObject *par_p2cread = python_pars[ 11 ];
    PyObject *par_p2cwrite = python_pars[ 12 ];
    PyObject *par_c2pread = python_pars[ 13 ];
    PyObject *par_c2pwrite = python_pars[ 14 ];
    PyObject *par_errread = python_pars[ 15 ];
    PyObject *par_errwrite = python_pars[ 16 ];
    PyObject *par_restore_signals = python_pars[ 17 ];
    PyObject *par_start_new_session = python_pars[ 18 ];
    PyObject *var_unix_shell = NULL;
    PyObject *var_orig_executable = NULL;
    PyObject *var_errpipe_read = NULL;
    PyObject *var_errpipe_write = NULL;
    PyObject *var_low_fds_to_close = NULL;
    PyObject *var_low_fd = NULL;
    PyObject *var_env_list = NULL;
    PyObject *var_k = NULL;
    PyObject *var_v = NULL;
    PyObject *var_executable_list = NULL;
    PyObject *var_fds_to_keep = NULL;
    PyObject *var_devnull_fd = NULL;
    PyObject *var_errpipe_data = NULL;
    PyObject *var_part = NULL;
    PyObject *var_pid = NULL;
    PyObject *var_sts = NULL;
    PyObject *var_exception_name = NULL;
    PyObject *var_hex_errno = NULL;
    PyObject *var_err_msg = NULL;
    PyObject *var_child_exception_type = NULL;
    PyObject *var_errno_num = NULL;
    PyObject *var_child_exec_never_called = NULL;
    PyObject *var_err_filename = NULL;
    PyObject *tmp_for_loop_1__for_iterator = NULL;
    PyObject *tmp_for_loop_1__iter_value = NULL;
    PyObject *tmp_for_loop_2__for_iterator = NULL;
    PyObject *tmp_for_loop_2__iter_value = NULL;
    PyObject *tmp_genexpr_1__$0 = NULL;
    PyObject *tmp_tuple_unpack_1__element_1 = NULL;
    PyObject *tmp_tuple_unpack_1__element_2 = NULL;
    PyObject *tmp_tuple_unpack_1__source_iter = NULL;
    PyObject *tmp_tuple_unpack_2__element_1 = NULL;
    PyObject *tmp_tuple_unpack_2__element_2 = NULL;
    PyObject *tmp_tuple_unpack_2__source_iter = NULL;
    PyObject *tmp_tuple_unpack_3__element_1 = NULL;
    PyObject *tmp_tuple_unpack_3__element_2 = NULL;
    PyObject *tmp_tuple_unpack_3__source_iter = NULL;
    PyObject *tmp_tuple_unpack_4__element_1 = NULL;
    PyObject *tmp_tuple_unpack_4__element_2 = NULL;
    PyObject *tmp_tuple_unpack_4__element_3 = NULL;
    PyObject *tmp_tuple_unpack_4__source_iter = NULL;
    struct Nuitka_FrameObject *frame_f8a56ca7f4381c06bb242e27d9cd6c68;
    NUITKA_MAY_BE_UNUSED char const *type_description_1 = NULL;
    int tmp_res;
    PyObject *exception_type = NULL;
    PyObject *exception_value = NULL;
    PyTracebackObject *exception_tb = NULL;
    NUITKA_MAY_BE_UNUSED int exception_lineno = 0;
    PyObject *tmp_iterator_attempt;
    PyObject *exception_keeper_type_1;
    PyObject *exception_keeper_value_1;
    PyTracebackObject *exception_keeper_tb_1;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_1;
    PyObject *exception_keeper_type_2;
    PyObject *exception_keeper_value_2;
    PyTracebackObject *exception_keeper_tb_2;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_2;
    PyObject *exception_keeper_type_3;
    PyObject *exception_keeper_value_3;
    PyTracebackObject *exception_keeper_tb_3;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_3;
    PyObject *exception_keeper_type_4;
    PyObject *exception_keeper_value_4;
    PyTracebackObject *exception_keeper_tb_4;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_4;
    PyObject *exception_keeper_type_5;
    PyObject *exception_keeper_value_5;
    PyTracebackObject *exception_keeper_tb_5;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_5;
    PyObject *exception_keeper_type_6;
    PyObject *exception_keeper_value_6;
    PyTracebackObject *exception_keeper_tb_6;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_6;
    bool tmp_result;
    PyObject *exception_keeper_type_7;
    PyObject *exception_keeper_value_7;
    PyTracebackObject *exception_keeper_tb_7;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_7;
    PyObject *exception_preserved_type_1;
    PyObject *exception_preserved_value_1;
    PyTracebackObject *exception_preserved_tb_1;
    PyObject *exception_keeper_type_8;
    PyObject *exception_keeper_value_8;
    PyTracebackObject *exception_keeper_tb_8;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_8;
    PyObject *exception_keeper_type_9;
    PyObject *exception_keeper_value_9;
    PyTracebackObject *exception_keeper_tb_9;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_9;
    PyObject *exception_preserved_type_2;
    PyObject *exception_preserved_value_2;
    PyTracebackObject *exception_preserved_tb_2;
    PyObject *exception_keeper_type_10;
    PyObject *exception_keeper_value_10;
    PyTracebackObject *exception_keeper_tb_10;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_10;
    PyObject *exception_keeper_type_11;
    PyObject *exception_keeper_value_11;
    PyTracebackObject *exception_keeper_tb_11;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_11;
    PyObject *exception_keeper_type_12;
    PyObject *exception_keeper_value_12;
    PyTracebackObject *exception_keeper_tb_12;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_12;
    PyObject *exception_keeper_type_13;
    PyObject *exception_keeper_value_13;
    PyTracebackObject *exception_keeper_tb_13;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_13;
    PyObject *exception_preserved_type_3;
    PyObject *exception_preserved_value_3;
    PyTracebackObject *exception_preserved_tb_3;
    PyObject *exception_keeper_type_14;
    PyObject *exception_keeper_value_14;
    PyTracebackObject *exception_keeper_tb_14;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_14;
    PyObject *exception_keeper_type_15;
    PyObject *exception_keeper_value_15;
    PyTracebackObject *exception_keeper_tb_15;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_15;
    PyObject *exception_keeper_type_16;
    PyObject *exception_keeper_value_16;
    PyTracebackObject *exception_keeper_tb_16;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_16;
    PyObject *exception_keeper_type_17;
    PyObject *exception_keeper_value_17;
    PyTracebackObject *exception_keeper_tb_17;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_17;
    PyObject *exception_preserved_type_4;
    PyObject *exception_preserved_value_4;
    PyTracebackObject *exception_preserved_tb_4;
    PyObject *exception_keeper_type_18;
    PyObject *exception_keeper_value_18;
    PyTracebackObject *exception_keeper_tb_18;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_18;
    static struct Nuitka_FrameObject *cache_frame_f8a56ca7f4381c06bb242e27d9cd6c68 = NULL;
    PyObject *tmp_return_value = NULL;
    PyObject *exception_keeper_type_19;
    PyObject *exception_keeper_value_19;
    PyTracebackObject *exception_keeper_tb_19;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_19;

    // Actual function body.
    // Tried code:
    MAKE_OR_REUSE_FRAME( cache_frame_f8a56ca7f4381c06bb242e27d9cd6c68, codeobj_f8a56ca7f4381c06bb242e27d9cd6c68, module_subprocess, sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *) );
    frame_f8a56ca7f4381c06bb242e27d9cd6c68 = cache_frame_f8a56ca7f4381c06bb242e27d9cd6c68;

    // Push the new frame as the currently active one.
    pushFrameStack( frame_f8a56ca7f4381c06bb242e27d9cd6c68 );

    // Mark the frame object as in use, ref count 1 will be up for reuse.
    assert( Py_REFCNT( frame_f8a56ca7f4381c06bb242e27d9cd6c68 ) == 2 ); // Frame stack

    // Framed code:
    {
        nuitka_bool tmp_condition_result_1;
        PyObject *tmp_isinstance_inst_1;
        PyObject *tmp_isinstance_cls_1;
        CHECK_OBJECT( par_args );
        tmp_isinstance_inst_1 = par_args;
        tmp_isinstance_cls_1 = const_tuple_type_str_type_bytes_tuple;
        tmp_res = Nuitka_IsInstance( tmp_isinstance_inst_1, tmp_isinstance_cls_1 );
        if ( tmp_res == -1 )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 1392;
            type_description_1 = "oocooooooooooooooooooooooooooooooooooooooo";
            goto frame_exception_exit_1;
        }
        tmp_condition_result_1 = ( tmp_res != 0 ) ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
        if ( tmp_condition_result_1 == NUITKA_BOOL_TRUE )
        {
            goto branch_yes_1;
        }
        else
        {
            goto branch_no_1;
        }
        branch_yes_1:;
        {
            PyObject *tmp_assign_source_1;
            PyObject *tmp_list_element_1;
            CHECK_OBJECT( par_args );
            tmp_list_element_1 = par_args;
            tmp_assign_source_1 = PyList_New( 1 );
            Py_INCREF( tmp_list_element_1 );
            PyList_SET_ITEM( tmp_assign_source_1, 0, tmp_list_element_1 );
            {
                PyObject *old = par_args;
                assert( old != NULL );
                par_args = tmp_assign_source_1;
                Py_DECREF( old );
            }

        }
        goto branch_end_1;
        branch_no_1:;
        {
            PyObject *tmp_assign_source_2;
            PyObject *tmp_list_arg_1;
            CHECK_OBJECT( par_args );
            tmp_list_arg_1 = par_args;
            tmp_assign_source_2 = PySequence_List( tmp_list_arg_1 );
            if ( tmp_assign_source_2 == NULL )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 1395;
                type_description_1 = "oocooooooooooooooooooooooooooooooooooooooo";
                goto frame_exception_exit_1;
            }
            {
                PyObject *old = par_args;
                assert( old != NULL );
                par_args = tmp_assign_source_2;
                Py_DECREF( old );
            }

        }
        branch_end_1:;
    }
    {
        nuitka_bool tmp_condition_result_2;
        int tmp_truth_name_1;
        CHECK_OBJECT( par_shell );
        tmp_truth_name_1 = CHECK_IF_TRUE( par_shell );
        if ( tmp_truth_name_1 == -1 )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 1397;
            type_description_1 = "oocooooooooooooooooooooooooooooooooooooooo";
            goto frame_exception_exit_1;
        }
        tmp_condition_result_2 = tmp_truth_name_1 == 1 ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
        if ( tmp_condition_result_2 == NUITKA_BOOL_TRUE )
        {
            goto branch_yes_2;
        }
        else
        {
            goto branch_no_2;
        }
        branch_yes_2:;
        {
            PyObject *tmp_assign_source_3;
            nuitka_bool tmp_condition_result_3;
            PyObject *tmp_source_name_1;
            PyObject *tmp_mvar_value_1;
            PyObject *tmp_attribute_name_1;
            tmp_mvar_value_1 = GET_STRING_DICT_VALUE( moduledict_subprocess, (Nuitka_StringObject *)const_str_plain_sys );

            if (unlikely( tmp_mvar_value_1 == NULL ))
            {
                tmp_mvar_value_1 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_sys );
            }

            if ( tmp_mvar_value_1 == NULL )
            {

                exception_type = PyExc_NameError;
                Py_INCREF( exception_type );
                exception_value = PyUnicode_FromFormat( "name '%s' is not defined", "sys" );
                exception_tb = NULL;
                NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
                CHAIN_EXCEPTION( exception_value );

                exception_lineno = 1400;
                type_description_1 = "oocooooooooooooooooooooooooooooooooooooooo";
                goto frame_exception_exit_1;
            }

            tmp_source_name_1 = tmp_mvar_value_1;
            tmp_attribute_name_1 = const_str_plain_getandroidapilevel;
            tmp_res = BUILTIN_HASATTR_BOOL( tmp_source_name_1, tmp_attribute_name_1 );
            if ( tmp_res == -1 )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 1400;
                type_description_1 = "oocooooooooooooooooooooooooooooooooooooooo";
                goto frame_exception_exit_1;
            }
            tmp_condition_result_3 = ( tmp_res != 0 ) ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
            if ( tmp_condition_result_3 == NUITKA_BOOL_TRUE )
            {
                goto condexpr_true_1;
            }
            else
            {
                goto condexpr_false_1;
            }
            condexpr_true_1:;
            tmp_assign_source_3 = const_str_digest_833b0499a7c50df55adf92e47cee19b7;
            goto condexpr_end_1;
            condexpr_false_1:;
            tmp_assign_source_3 = const_str_digest_e1055fdcc238bf0745885200755a16f7;
            condexpr_end_1:;
            assert( var_unix_shell == NULL );
            Py_INCREF( tmp_assign_source_3 );
            var_unix_shell = tmp_assign_source_3;
        }
        {
            PyObject *tmp_assign_source_4;
            PyObject *tmp_left_name_1;
            PyObject *tmp_list_element_2;
            PyObject *tmp_right_name_1;
            CHECK_OBJECT( var_unix_shell );
            tmp_list_element_2 = var_unix_shell;
            tmp_left_name_1 = PyList_New( 2 );
            Py_INCREF( tmp_list_element_2 );
            PyList_SET_ITEM( tmp_left_name_1, 0, tmp_list_element_2 );
            tmp_list_element_2 = const_str_digest_8b4c8c81913e132a2fb432c041f3150f;
            Py_INCREF( tmp_list_element_2 );
            PyList_SET_ITEM( tmp_left_name_1, 1, tmp_list_element_2 );
            CHECK_OBJECT( par_args );
            tmp_right_name_1 = par_args;
            tmp_assign_source_4 = BINARY_OPERATION_ADD_LIST_OBJECT( tmp_left_name_1, tmp_right_name_1 );
            Py_DECREF( tmp_left_name_1 );
            if ( tmp_assign_source_4 == NULL )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 1401;
                type_description_1 = "oocooooooooooooooooooooooooooooooooooooooo";
                goto frame_exception_exit_1;
            }
            {
                PyObject *old = par_args;
                assert( old != NULL );
                par_args = tmp_assign_source_4;
                Py_DECREF( old );
            }

        }
        {
            nuitka_bool tmp_condition_result_4;
            int tmp_truth_name_2;
            CHECK_OBJECT( PyCell_GET( par_executable ) );
            tmp_truth_name_2 = CHECK_IF_TRUE( PyCell_GET( par_executable ) );
            if ( tmp_truth_name_2 == -1 )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 1402;
                type_description_1 = "oocooooooooooooooooooooooooooooooooooooooo";
                goto frame_exception_exit_1;
            }
            tmp_condition_result_4 = tmp_truth_name_2 == 1 ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
            if ( tmp_condition_result_4 == NUITKA_BOOL_TRUE )
            {
                goto branch_yes_3;
            }
            else
            {
                goto branch_no_3;
            }
            branch_yes_3:;
            {
                PyObject *tmp_ass_subvalue_1;
                PyObject *tmp_ass_subscribed_1;
                PyObject *tmp_ass_subscript_1;
                int tmp_ass_subscript_res_1;
                CHECK_OBJECT( PyCell_GET( par_executable ) );
                tmp_ass_subvalue_1 = PyCell_GET( par_executable );
                CHECK_OBJECT( par_args );
                tmp_ass_subscribed_1 = par_args;
                tmp_ass_subscript_1 = const_int_0;
                tmp_ass_subscript_res_1 = SET_SUBSCRIPT_CONST( tmp_ass_subscribed_1, tmp_ass_subscript_1, 0, tmp_ass_subvalue_1 );
                if ( tmp_ass_subscript_res_1 == false )
                {
                    assert( ERROR_OCCURRED() );

                    FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                    exception_lineno = 1403;
                    type_description_1 = "oocooooooooooooooooooooooooooooooooooooooo";
                    goto frame_exception_exit_1;
                }
            }
            branch_no_3:;
        }
        branch_no_2:;
    }
    {
        nuitka_bool tmp_condition_result_5;
        PyObject *tmp_compexpr_left_1;
        PyObject *tmp_compexpr_right_1;
        CHECK_OBJECT( PyCell_GET( par_executable ) );
        tmp_compexpr_left_1 = PyCell_GET( par_executable );
        tmp_compexpr_right_1 = Py_None;
        tmp_condition_result_5 = ( tmp_compexpr_left_1 == tmp_compexpr_right_1 ) ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
        if ( tmp_condition_result_5 == NUITKA_BOOL_TRUE )
        {
            goto branch_yes_4;
        }
        else
        {
            goto branch_no_4;
        }
        branch_yes_4:;
        {
            PyObject *tmp_assign_source_5;
            PyObject *tmp_subscribed_name_1;
            PyObject *tmp_subscript_name_1;
            if ( par_args == NULL )
            {

                exception_type = PyExc_UnboundLocalError;
                Py_INCREF( exception_type );
                exception_value = PyUnicode_FromFormat( "local variable '%s' referenced before assignment", "args" );
                exception_tb = NULL;
                NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
                CHAIN_EXCEPTION( exception_value );

                exception_lineno = 1406;
                type_description_1 = "oocooooooooooooooooooooooooooooooooooooooo";
                goto frame_exception_exit_1;
            }

            tmp_subscribed_name_1 = par_args;
            tmp_subscript_name_1 = const_int_0;
            tmp_assign_source_5 = LOOKUP_SUBSCRIPT_CONST( tmp_subscribed_name_1, tmp_subscript_name_1, 0 );
            if ( tmp_assign_source_5 == NULL )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 1406;
                type_description_1 = "oocooooooooooooooooooooooooooooooooooooooo";
                goto frame_exception_exit_1;
            }
            {
                PyObject *old = PyCell_GET( par_executable );
                PyCell_SET( par_executable, tmp_assign_source_5 );
                Py_XDECREF( old );
            }

        }
        branch_no_4:;
    }
    {
        PyObject *tmp_assign_source_6;
        CHECK_OBJECT( PyCell_GET( par_executable ) );
        tmp_assign_source_6 = PyCell_GET( par_executable );
        assert( var_orig_executable == NULL );
        Py_INCREF( tmp_assign_source_6 );
        var_orig_executable = tmp_assign_source_6;
    }
    // Tried code:
    {
        PyObject *tmp_assign_source_7;
        PyObject *tmp_iter_arg_1;
        PyObject *tmp_called_instance_1;
        PyObject *tmp_mvar_value_2;
        tmp_mvar_value_2 = GET_STRING_DICT_VALUE( moduledict_subprocess, (Nuitka_StringObject *)const_str_plain_os );

        if (unlikely( tmp_mvar_value_2 == NULL ))
        {
            tmp_mvar_value_2 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_os );
        }

        if ( tmp_mvar_value_2 == NULL )
        {

            exception_type = PyExc_NameError;
            Py_INCREF( exception_type );
            exception_value = PyUnicode_FromFormat( "name '%s' is not defined", "os" );
            exception_tb = NULL;
            NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
            CHAIN_EXCEPTION( exception_value );

            exception_lineno = 1412;
            type_description_1 = "oocooooooooooooooooooooooooooooooooooooooo";
            goto try_except_handler_2;
        }

        tmp_called_instance_1 = tmp_mvar_value_2;
        frame_f8a56ca7f4381c06bb242e27d9cd6c68->m_frame.f_lineno = 1412;
        tmp_iter_arg_1 = CALL_METHOD_NO_ARGS( tmp_called_instance_1, const_str_plain_pipe );
        if ( tmp_iter_arg_1 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 1412;
            type_description_1 = "oocooooooooooooooooooooooooooooooooooooooo";
            goto try_except_handler_2;
        }
        tmp_assign_source_7 = MAKE_UNPACK_ITERATOR( tmp_iter_arg_1 );
        Py_DECREF( tmp_iter_arg_1 );
        if ( tmp_assign_source_7 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 1412;
            type_description_1 = "oocooooooooooooooooooooooooooooooooooooooo";
            goto try_except_handler_2;
        }
        assert( tmp_tuple_unpack_1__source_iter == NULL );
        tmp_tuple_unpack_1__source_iter = tmp_assign_source_7;
    }
    // Tried code:
    {
        PyObject *tmp_assign_source_8;
        PyObject *tmp_unpack_1;
        CHECK_OBJECT( tmp_tuple_unpack_1__source_iter );
        tmp_unpack_1 = tmp_tuple_unpack_1__source_iter;
        tmp_assign_source_8 = UNPACK_NEXT( tmp_unpack_1, 0, 2 );
        if ( tmp_assign_source_8 == NULL )
        {
            if ( !ERROR_OCCURRED() )
            {
                exception_type = PyExc_StopIteration;
                Py_INCREF( exception_type );
                exception_value = NULL;
                exception_tb = NULL;
            }
            else
            {
                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
            }


            type_description_1 = "oocooooooooooooooooooooooooooooooooooooooo";
            exception_lineno = 1412;
            goto try_except_handler_3;
        }
        assert( tmp_tuple_unpack_1__element_1 == NULL );
        tmp_tuple_unpack_1__element_1 = tmp_assign_source_8;
    }
    {
        PyObject *tmp_assign_source_9;
        PyObject *tmp_unpack_2;
        CHECK_OBJECT( tmp_tuple_unpack_1__source_iter );
        tmp_unpack_2 = tmp_tuple_unpack_1__source_iter;
        tmp_assign_source_9 = UNPACK_NEXT( tmp_unpack_2, 1, 2 );
        if ( tmp_assign_source_9 == NULL )
        {
            if ( !ERROR_OCCURRED() )
            {
                exception_type = PyExc_StopIteration;
                Py_INCREF( exception_type );
                exception_value = NULL;
                exception_tb = NULL;
            }
            else
            {
                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
            }


            type_description_1 = "oocooooooooooooooooooooooooooooooooooooooo";
            exception_lineno = 1412;
            goto try_except_handler_3;
        }
        assert( tmp_tuple_unpack_1__element_2 == NULL );
        tmp_tuple_unpack_1__element_2 = tmp_assign_source_9;
    }
    {
        PyObject *tmp_iterator_name_1;
        CHECK_OBJECT( tmp_tuple_unpack_1__source_iter );
        tmp_iterator_name_1 = tmp_tuple_unpack_1__source_iter;
        // Check if iterator has left-over elements.
        CHECK_OBJECT( tmp_iterator_name_1 ); assert( HAS_ITERNEXT( tmp_iterator_name_1 ) );

        tmp_iterator_attempt = (*Py_TYPE( tmp_iterator_name_1 )->tp_iternext)( tmp_iterator_name_1 );

        if (likely( tmp_iterator_attempt == NULL ))
        {
            PyObject *error = GET_ERROR_OCCURRED();

            if ( error != NULL )
            {
                if ( EXCEPTION_MATCH_BOOL_SINGLE( error, PyExc_StopIteration ))
                {
                    CLEAR_ERROR_OCCURRED();
                }
                else
                {
                    FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );

                    type_description_1 = "oocooooooooooooooooooooooooooooooooooooooo";
                    exception_lineno = 1412;
                    goto try_except_handler_3;
                }
            }
        }
        else
        {
            Py_DECREF( tmp_iterator_attempt );

            // TODO: Could avoid PyErr_Format.
#if PYTHON_VERSION < 300
            PyErr_Format( PyExc_ValueError, "too many values to unpack" );
#else
            PyErr_Format( PyExc_ValueError, "too many values to unpack (expected 2)" );
#endif
            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );

            type_description_1 = "oocooooooooooooooooooooooooooooooooooooooo";
            exception_lineno = 1412;
            goto try_except_handler_3;
        }
    }
    goto try_end_1;
    // Exception handler code:
    try_except_handler_3:;
    exception_keeper_type_1 = exception_type;
    exception_keeper_value_1 = exception_value;
    exception_keeper_tb_1 = exception_tb;
    exception_keeper_lineno_1 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    CHECK_OBJECT( (PyObject *)tmp_tuple_unpack_1__source_iter );
    Py_DECREF( tmp_tuple_unpack_1__source_iter );
    tmp_tuple_unpack_1__source_iter = NULL;

    // Re-raise.
    exception_type = exception_keeper_type_1;
    exception_value = exception_keeper_value_1;
    exception_tb = exception_keeper_tb_1;
    exception_lineno = exception_keeper_lineno_1;

    goto try_except_handler_2;
    // End of try:
    try_end_1:;
    goto try_end_2;
    // Exception handler code:
    try_except_handler_2:;
    exception_keeper_type_2 = exception_type;
    exception_keeper_value_2 = exception_value;
    exception_keeper_tb_2 = exception_tb;
    exception_keeper_lineno_2 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    Py_XDECREF( tmp_tuple_unpack_1__element_1 );
    tmp_tuple_unpack_1__element_1 = NULL;

    Py_XDECREF( tmp_tuple_unpack_1__element_2 );
    tmp_tuple_unpack_1__element_2 = NULL;

    // Re-raise.
    exception_type = exception_keeper_type_2;
    exception_value = exception_keeper_value_2;
    exception_tb = exception_keeper_tb_2;
    exception_lineno = exception_keeper_lineno_2;

    goto frame_exception_exit_1;
    // End of try:
    try_end_2:;
    CHECK_OBJECT( (PyObject *)tmp_tuple_unpack_1__source_iter );
    Py_DECREF( tmp_tuple_unpack_1__source_iter );
    tmp_tuple_unpack_1__source_iter = NULL;

    {
        PyObject *tmp_assign_source_10;
        CHECK_OBJECT( tmp_tuple_unpack_1__element_1 );
        tmp_assign_source_10 = tmp_tuple_unpack_1__element_1;
        assert( var_errpipe_read == NULL );
        Py_INCREF( tmp_assign_source_10 );
        var_errpipe_read = tmp_assign_source_10;
    }
    Py_XDECREF( tmp_tuple_unpack_1__element_1 );
    tmp_tuple_unpack_1__element_1 = NULL;

    {
        PyObject *tmp_assign_source_11;
        CHECK_OBJECT( tmp_tuple_unpack_1__element_2 );
        tmp_assign_source_11 = tmp_tuple_unpack_1__element_2;
        assert( var_errpipe_write == NULL );
        Py_INCREF( tmp_assign_source_11 );
        var_errpipe_write = tmp_assign_source_11;
    }
    Py_XDECREF( tmp_tuple_unpack_1__element_2 );
    tmp_tuple_unpack_1__element_2 = NULL;

    {
        PyObject *tmp_assign_source_12;
        tmp_assign_source_12 = PyList_New( 0 );
        assert( var_low_fds_to_close == NULL );
        var_low_fds_to_close = tmp_assign_source_12;
    }
    loop_start_1:;
    {
        nuitka_bool tmp_condition_result_6;
        PyObject *tmp_operand_name_1;
        PyObject *tmp_compexpr_left_2;
        PyObject *tmp_compexpr_right_2;
        CHECK_OBJECT( var_errpipe_write );
        tmp_compexpr_left_2 = var_errpipe_write;
        tmp_compexpr_right_2 = const_int_pos_3;
        tmp_operand_name_1 = RICH_COMPARE_LT_OBJECT_OBJECT( tmp_compexpr_left_2, tmp_compexpr_right_2 );
        if ( tmp_operand_name_1 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 1415;
            type_description_1 = "oocooooooooooooooooooooooooooooooooooooooo";
            goto frame_exception_exit_1;
        }
        tmp_res = CHECK_IF_TRUE( tmp_operand_name_1 );
        Py_DECREF( tmp_operand_name_1 );
        if ( tmp_res == -1 )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 1415;
            type_description_1 = "oocooooooooooooooooooooooooooooooooooooooo";
            goto frame_exception_exit_1;
        }
        tmp_condition_result_6 = ( tmp_res == 0 ) ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
        if ( tmp_condition_result_6 == NUITKA_BOOL_TRUE )
        {
            goto branch_yes_5;
        }
        else
        {
            goto branch_no_5;
        }
        branch_yes_5:;
        goto loop_end_1;
        branch_no_5:;
    }
    {
        PyObject *tmp_called_instance_2;
        PyObject *tmp_call_result_1;
        PyObject *tmp_args_element_name_1;
        CHECK_OBJECT( var_low_fds_to_close );
        tmp_called_instance_2 = var_low_fds_to_close;
        CHECK_OBJECT( var_errpipe_write );
        tmp_args_element_name_1 = var_errpipe_write;
        frame_f8a56ca7f4381c06bb242e27d9cd6c68->m_frame.f_lineno = 1416;
        {
            PyObject *call_args[] = { tmp_args_element_name_1 };
            tmp_call_result_1 = CALL_METHOD_WITH_ARGS1( tmp_called_instance_2, const_str_plain_append, call_args );
        }

        if ( tmp_call_result_1 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 1416;
            type_description_1 = "oocooooooooooooooooooooooooooooooooooooooo";
            goto frame_exception_exit_1;
        }
        Py_DECREF( tmp_call_result_1 );
    }
    {
        PyObject *tmp_assign_source_13;
        PyObject *tmp_called_instance_3;
        PyObject *tmp_mvar_value_3;
        PyObject *tmp_args_element_name_2;
        tmp_mvar_value_3 = GET_STRING_DICT_VALUE( moduledict_subprocess, (Nuitka_StringObject *)const_str_plain_os );

        if (unlikely( tmp_mvar_value_3 == NULL ))
        {
            tmp_mvar_value_3 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_os );
        }

        if ( tmp_mvar_value_3 == NULL )
        {

            exception_type = PyExc_NameError;
            Py_INCREF( exception_type );
            exception_value = PyUnicode_FromFormat( "name '%s' is not defined", "os" );
            exception_tb = NULL;
            NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
            CHAIN_EXCEPTION( exception_value );

            exception_lineno = 1417;
            type_description_1 = "oocooooooooooooooooooooooooooooooooooooooo";
            goto frame_exception_exit_1;
        }

        tmp_called_instance_3 = tmp_mvar_value_3;
        CHECK_OBJECT( var_errpipe_write );
        tmp_args_element_name_2 = var_errpipe_write;
        frame_f8a56ca7f4381c06bb242e27d9cd6c68->m_frame.f_lineno = 1417;
        {
            PyObject *call_args[] = { tmp_args_element_name_2 };
            tmp_assign_source_13 = CALL_METHOD_WITH_ARGS1( tmp_called_instance_3, const_str_plain_dup, call_args );
        }

        if ( tmp_assign_source_13 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 1417;
            type_description_1 = "oocooooooooooooooooooooooooooooooooooooooo";
            goto frame_exception_exit_1;
        }
        {
            PyObject *old = var_errpipe_write;
            assert( old != NULL );
            var_errpipe_write = tmp_assign_source_13;
            Py_DECREF( old );
        }

    }
    if ( CONSIDER_THREADING() == false )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 1415;
        type_description_1 = "oocooooooooooooooooooooooooooooooooooooooo";
        goto frame_exception_exit_1;
    }
    goto loop_start_1;
    loop_end_1:;
    {
        PyObject *tmp_assign_source_14;
        PyObject *tmp_iter_arg_2;
        CHECK_OBJECT( var_low_fds_to_close );
        tmp_iter_arg_2 = var_low_fds_to_close;
        tmp_assign_source_14 = MAKE_ITERATOR( tmp_iter_arg_2 );
        if ( tmp_assign_source_14 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 1418;
            type_description_1 = "oocooooooooooooooooooooooooooooooooooooooo";
            goto frame_exception_exit_1;
        }
        assert( tmp_for_loop_1__for_iterator == NULL );
        tmp_for_loop_1__for_iterator = tmp_assign_source_14;
    }
    // Tried code:
    loop_start_2:;
    {
        PyObject *tmp_next_source_1;
        PyObject *tmp_assign_source_15;
        CHECK_OBJECT( tmp_for_loop_1__for_iterator );
        tmp_next_source_1 = tmp_for_loop_1__for_iterator;
        tmp_assign_source_15 = ITERATOR_NEXT( tmp_next_source_1 );
        if ( tmp_assign_source_15 == NULL )
        {
            if ( CHECK_AND_CLEAR_STOP_ITERATION_OCCURRED() )
            {

                goto loop_end_2;
            }
            else
            {

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
                type_description_1 = "oocooooooooooooooooooooooooooooooooooooooo";
                exception_lineno = 1418;
                goto try_except_handler_4;
            }
        }

        {
            PyObject *old = tmp_for_loop_1__iter_value;
            tmp_for_loop_1__iter_value = tmp_assign_source_15;
            Py_XDECREF( old );
        }

    }
    {
        PyObject *tmp_assign_source_16;
        CHECK_OBJECT( tmp_for_loop_1__iter_value );
        tmp_assign_source_16 = tmp_for_loop_1__iter_value;
        {
            PyObject *old = var_low_fd;
            var_low_fd = tmp_assign_source_16;
            Py_INCREF( var_low_fd );
            Py_XDECREF( old );
        }

    }
    {
        PyObject *tmp_called_instance_4;
        PyObject *tmp_mvar_value_4;
        PyObject *tmp_call_result_2;
        PyObject *tmp_args_element_name_3;
        tmp_mvar_value_4 = GET_STRING_DICT_VALUE( moduledict_subprocess, (Nuitka_StringObject *)const_str_plain_os );

        if (unlikely( tmp_mvar_value_4 == NULL ))
        {
            tmp_mvar_value_4 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_os );
        }

        if ( tmp_mvar_value_4 == NULL )
        {

            exception_type = PyExc_NameError;
            Py_INCREF( exception_type );
            exception_value = PyUnicode_FromFormat( "name '%s' is not defined", "os" );
            exception_tb = NULL;
            NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
            CHAIN_EXCEPTION( exception_value );

            exception_lineno = 1419;
            type_description_1 = "oocooooooooooooooooooooooooooooooooooooooo";
            goto try_except_handler_4;
        }

        tmp_called_instance_4 = tmp_mvar_value_4;
        CHECK_OBJECT( var_low_fd );
        tmp_args_element_name_3 = var_low_fd;
        frame_f8a56ca7f4381c06bb242e27d9cd6c68->m_frame.f_lineno = 1419;
        {
            PyObject *call_args[] = { tmp_args_element_name_3 };
            tmp_call_result_2 = CALL_METHOD_WITH_ARGS1( tmp_called_instance_4, const_str_plain_close, call_args );
        }

        if ( tmp_call_result_2 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 1419;
            type_description_1 = "oocooooooooooooooooooooooooooooooooooooooo";
            goto try_except_handler_4;
        }
        Py_DECREF( tmp_call_result_2 );
    }
    if ( CONSIDER_THREADING() == false )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 1418;
        type_description_1 = "oocooooooooooooooooooooooooooooooooooooooo";
        goto try_except_handler_4;
    }
    goto loop_start_2;
    loop_end_2:;
    goto try_end_3;
    // Exception handler code:
    try_except_handler_4:;
    exception_keeper_type_3 = exception_type;
    exception_keeper_value_3 = exception_value;
    exception_keeper_tb_3 = exception_tb;
    exception_keeper_lineno_3 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    Py_XDECREF( tmp_for_loop_1__iter_value );
    tmp_for_loop_1__iter_value = NULL;

    CHECK_OBJECT( (PyObject *)tmp_for_loop_1__for_iterator );
    Py_DECREF( tmp_for_loop_1__for_iterator );
    tmp_for_loop_1__for_iterator = NULL;

    // Re-raise.
    exception_type = exception_keeper_type_3;
    exception_value = exception_keeper_value_3;
    exception_tb = exception_keeper_tb_3;
    exception_lineno = exception_keeper_lineno_3;

    goto frame_exception_exit_1;
    // End of try:
    try_end_3:;
    Py_XDECREF( tmp_for_loop_1__iter_value );
    tmp_for_loop_1__iter_value = NULL;

    CHECK_OBJECT( (PyObject *)tmp_for_loop_1__for_iterator );
    Py_DECREF( tmp_for_loop_1__for_iterator );
    tmp_for_loop_1__for_iterator = NULL;

    // Tried code:
    // Tried code:
    {
        nuitka_bool tmp_condition_result_7;
        PyObject *tmp_compexpr_left_3;
        PyObject *tmp_compexpr_right_3;
        CHECK_OBJECT( par_env );
        tmp_compexpr_left_3 = par_env;
        tmp_compexpr_right_3 = Py_None;
        tmp_condition_result_7 = ( tmp_compexpr_left_3 != tmp_compexpr_right_3 ) ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
        if ( tmp_condition_result_7 == NUITKA_BOOL_TRUE )
        {
            goto branch_yes_6;
        }
        else
        {
            goto branch_no_6;
        }
        branch_yes_6:;
        {
            PyObject *tmp_assign_source_17;
            tmp_assign_source_17 = PyList_New( 0 );
            assert( var_env_list == NULL );
            var_env_list = tmp_assign_source_17;
        }
        {
            PyObject *tmp_assign_source_18;
            PyObject *tmp_iter_arg_3;
            PyObject *tmp_called_instance_5;
            CHECK_OBJECT( par_env );
            tmp_called_instance_5 = par_env;
            frame_f8a56ca7f4381c06bb242e27d9cd6c68->m_frame.f_lineno = 1429;
            tmp_iter_arg_3 = CALL_METHOD_NO_ARGS( tmp_called_instance_5, const_str_plain_items );
            if ( tmp_iter_arg_3 == NULL )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 1429;
                type_description_1 = "oocooooooooooooooooooooooooooooooooooooooo";
                goto try_except_handler_6;
            }
            tmp_assign_source_18 = MAKE_ITERATOR( tmp_iter_arg_3 );
            Py_DECREF( tmp_iter_arg_3 );
            if ( tmp_assign_source_18 == NULL )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 1429;
                type_description_1 = "oocooooooooooooooooooooooooooooooooooooooo";
                goto try_except_handler_6;
            }
            assert( tmp_for_loop_2__for_iterator == NULL );
            tmp_for_loop_2__for_iterator = tmp_assign_source_18;
        }
        // Tried code:
        loop_start_3:;
        {
            PyObject *tmp_next_source_2;
            PyObject *tmp_assign_source_19;
            CHECK_OBJECT( tmp_for_loop_2__for_iterator );
            tmp_next_source_2 = tmp_for_loop_2__for_iterator;
            tmp_assign_source_19 = ITERATOR_NEXT( tmp_next_source_2 );
            if ( tmp_assign_source_19 == NULL )
            {
                if ( CHECK_AND_CLEAR_STOP_ITERATION_OCCURRED() )
                {

                    goto loop_end_3;
                }
                else
                {

                    FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
                    type_description_1 = "oocooooooooooooooooooooooooooooooooooooooo";
                    exception_lineno = 1429;
                    goto try_except_handler_7;
                }
            }

            {
                PyObject *old = tmp_for_loop_2__iter_value;
                tmp_for_loop_2__iter_value = tmp_assign_source_19;
                Py_XDECREF( old );
            }

        }
        // Tried code:
        {
            PyObject *tmp_assign_source_20;
            PyObject *tmp_iter_arg_4;
            CHECK_OBJECT( tmp_for_loop_2__iter_value );
            tmp_iter_arg_4 = tmp_for_loop_2__iter_value;
            tmp_assign_source_20 = MAKE_UNPACK_ITERATOR( tmp_iter_arg_4 );
            if ( tmp_assign_source_20 == NULL )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 1429;
                type_description_1 = "oocooooooooooooooooooooooooooooooooooooooo";
                goto try_except_handler_8;
            }
            {
                PyObject *old = tmp_tuple_unpack_2__source_iter;
                tmp_tuple_unpack_2__source_iter = tmp_assign_source_20;
                Py_XDECREF( old );
            }

        }
        // Tried code:
        {
            PyObject *tmp_assign_source_21;
            PyObject *tmp_unpack_3;
            CHECK_OBJECT( tmp_tuple_unpack_2__source_iter );
            tmp_unpack_3 = tmp_tuple_unpack_2__source_iter;
            tmp_assign_source_21 = UNPACK_NEXT( tmp_unpack_3, 0, 2 );
            if ( tmp_assign_source_21 == NULL )
            {
                if ( !ERROR_OCCURRED() )
                {
                    exception_type = PyExc_StopIteration;
                    Py_INCREF( exception_type );
                    exception_value = NULL;
                    exception_tb = NULL;
                }
                else
                {
                    FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
                }


                type_description_1 = "oocooooooooooooooooooooooooooooooooooooooo";
                exception_lineno = 1429;
                goto try_except_handler_9;
            }
            {
                PyObject *old = tmp_tuple_unpack_2__element_1;
                tmp_tuple_unpack_2__element_1 = tmp_assign_source_21;
                Py_XDECREF( old );
            }

        }
        {
            PyObject *tmp_assign_source_22;
            PyObject *tmp_unpack_4;
            CHECK_OBJECT( tmp_tuple_unpack_2__source_iter );
            tmp_unpack_4 = tmp_tuple_unpack_2__source_iter;
            tmp_assign_source_22 = UNPACK_NEXT( tmp_unpack_4, 1, 2 );
            if ( tmp_assign_source_22 == NULL )
            {
                if ( !ERROR_OCCURRED() )
                {
                    exception_type = PyExc_StopIteration;
                    Py_INCREF( exception_type );
                    exception_value = NULL;
                    exception_tb = NULL;
                }
                else
                {
                    FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
                }


                type_description_1 = "oocooooooooooooooooooooooooooooooooooooooo";
                exception_lineno = 1429;
                goto try_except_handler_9;
            }
            {
                PyObject *old = tmp_tuple_unpack_2__element_2;
                tmp_tuple_unpack_2__element_2 = tmp_assign_source_22;
                Py_XDECREF( old );
            }

        }
        {
            PyObject *tmp_iterator_name_2;
            CHECK_OBJECT( tmp_tuple_unpack_2__source_iter );
            tmp_iterator_name_2 = tmp_tuple_unpack_2__source_iter;
            // Check if iterator has left-over elements.
            CHECK_OBJECT( tmp_iterator_name_2 ); assert( HAS_ITERNEXT( tmp_iterator_name_2 ) );

            tmp_iterator_attempt = (*Py_TYPE( tmp_iterator_name_2 )->tp_iternext)( tmp_iterator_name_2 );

            if (likely( tmp_iterator_attempt == NULL ))
            {
                PyObject *error = GET_ERROR_OCCURRED();

                if ( error != NULL )
                {
                    if ( EXCEPTION_MATCH_BOOL_SINGLE( error, PyExc_StopIteration ))
                    {
                        CLEAR_ERROR_OCCURRED();
                    }
                    else
                    {
                        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );

                        type_description_1 = "oocooooooooooooooooooooooooooooooooooooooo";
                        exception_lineno = 1429;
                        goto try_except_handler_9;
                    }
                }
            }
            else
            {
                Py_DECREF( tmp_iterator_attempt );

                // TODO: Could avoid PyErr_Format.
#if PYTHON_VERSION < 300
                PyErr_Format( PyExc_ValueError, "too many values to unpack" );
#else
                PyErr_Format( PyExc_ValueError, "too many values to unpack (expected 2)" );
#endif
                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );

                type_description_1 = "oocooooooooooooooooooooooooooooooooooooooo";
                exception_lineno = 1429;
                goto try_except_handler_9;
            }
        }
        goto try_end_4;
        // Exception handler code:
        try_except_handler_9:;
        exception_keeper_type_4 = exception_type;
        exception_keeper_value_4 = exception_value;
        exception_keeper_tb_4 = exception_tb;
        exception_keeper_lineno_4 = exception_lineno;
        exception_type = NULL;
        exception_value = NULL;
        exception_tb = NULL;
        exception_lineno = 0;

        CHECK_OBJECT( (PyObject *)tmp_tuple_unpack_2__source_iter );
        Py_DECREF( tmp_tuple_unpack_2__source_iter );
        tmp_tuple_unpack_2__source_iter = NULL;

        // Re-raise.
        exception_type = exception_keeper_type_4;
        exception_value = exception_keeper_value_4;
        exception_tb = exception_keeper_tb_4;
        exception_lineno = exception_keeper_lineno_4;

        goto try_except_handler_8;
        // End of try:
        try_end_4:;
        goto try_end_5;
        // Exception handler code:
        try_except_handler_8:;
        exception_keeper_type_5 = exception_type;
        exception_keeper_value_5 = exception_value;
        exception_keeper_tb_5 = exception_tb;
        exception_keeper_lineno_5 = exception_lineno;
        exception_type = NULL;
        exception_value = NULL;
        exception_tb = NULL;
        exception_lineno = 0;

        Py_XDECREF( tmp_tuple_unpack_2__element_1 );
        tmp_tuple_unpack_2__element_1 = NULL;

        Py_XDECREF( tmp_tuple_unpack_2__element_2 );
        tmp_tuple_unpack_2__element_2 = NULL;

        // Re-raise.
        exception_type = exception_keeper_type_5;
        exception_value = exception_keeper_value_5;
        exception_tb = exception_keeper_tb_5;
        exception_lineno = exception_keeper_lineno_5;

        goto try_except_handler_7;
        // End of try:
        try_end_5:;
        CHECK_OBJECT( (PyObject *)tmp_tuple_unpack_2__source_iter );
        Py_DECREF( tmp_tuple_unpack_2__source_iter );
        tmp_tuple_unpack_2__source_iter = NULL;

        {
            PyObject *tmp_assign_source_23;
            CHECK_OBJECT( tmp_tuple_unpack_2__element_1 );
            tmp_assign_source_23 = tmp_tuple_unpack_2__element_1;
            {
                PyObject *old = var_k;
                var_k = tmp_assign_source_23;
                Py_INCREF( var_k );
                Py_XDECREF( old );
            }

        }
        Py_XDECREF( tmp_tuple_unpack_2__element_1 );
        tmp_tuple_unpack_2__element_1 = NULL;

        {
            PyObject *tmp_assign_source_24;
            CHECK_OBJECT( tmp_tuple_unpack_2__element_2 );
            tmp_assign_source_24 = tmp_tuple_unpack_2__element_2;
            {
                PyObject *old = var_v;
                var_v = tmp_assign_source_24;
                Py_INCREF( var_v );
                Py_XDECREF( old );
            }

        }
        Py_XDECREF( tmp_tuple_unpack_2__element_2 );
        tmp_tuple_unpack_2__element_2 = NULL;

        {
            PyObject *tmp_assign_source_25;
            PyObject *tmp_called_instance_6;
            PyObject *tmp_mvar_value_5;
            PyObject *tmp_args_element_name_4;
            tmp_mvar_value_5 = GET_STRING_DICT_VALUE( moduledict_subprocess, (Nuitka_StringObject *)const_str_plain_os );

            if (unlikely( tmp_mvar_value_5 == NULL ))
            {
                tmp_mvar_value_5 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_os );
            }

            if ( tmp_mvar_value_5 == NULL )
            {

                exception_type = PyExc_NameError;
                Py_INCREF( exception_type );
                exception_value = PyUnicode_FromFormat( "name '%s' is not defined", "os" );
                exception_tb = NULL;
                NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
                CHAIN_EXCEPTION( exception_value );

                exception_lineno = 1430;
                type_description_1 = "oocooooooooooooooooooooooooooooooooooooooo";
                goto try_except_handler_7;
            }

            tmp_called_instance_6 = tmp_mvar_value_5;
            CHECK_OBJECT( var_k );
            tmp_args_element_name_4 = var_k;
            frame_f8a56ca7f4381c06bb242e27d9cd6c68->m_frame.f_lineno = 1430;
            {
                PyObject *call_args[] = { tmp_args_element_name_4 };
                tmp_assign_source_25 = CALL_METHOD_WITH_ARGS1( tmp_called_instance_6, const_str_plain_fsencode, call_args );
            }

            if ( tmp_assign_source_25 == NULL )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 1430;
                type_description_1 = "oocooooooooooooooooooooooooooooooooooooooo";
                goto try_except_handler_7;
            }
            {
                PyObject *old = var_k;
                assert( old != NULL );
                var_k = tmp_assign_source_25;
                Py_DECREF( old );
            }

        }
        {
            nuitka_bool tmp_condition_result_8;
            PyObject *tmp_compexpr_left_4;
            PyObject *tmp_compexpr_right_4;
            tmp_compexpr_left_4 = const_bytes_chr_61;
            CHECK_OBJECT( var_k );
            tmp_compexpr_right_4 = var_k;
            tmp_res = PySequence_Contains( tmp_compexpr_right_4, tmp_compexpr_left_4 );
            if ( tmp_res == -1 )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 1431;
                type_description_1 = "oocooooooooooooooooooooooooooooooooooooooo";
                goto try_except_handler_7;
            }
            tmp_condition_result_8 = ( tmp_res == 1 ) ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
            if ( tmp_condition_result_8 == NUITKA_BOOL_TRUE )
            {
                goto branch_yes_7;
            }
            else
            {
                goto branch_no_7;
            }
            branch_yes_7:;
            {
                PyObject *tmp_raise_type_1;
                PyObject *tmp_make_exception_arg_1;
                tmp_make_exception_arg_1 = const_str_digest_a7fe184903448f080dd53d3fd8903dfe;
                frame_f8a56ca7f4381c06bb242e27d9cd6c68->m_frame.f_lineno = 1432;
                {
                    PyObject *call_args[] = { tmp_make_exception_arg_1 };
                    tmp_raise_type_1 = CALL_FUNCTION_WITH_ARGS1( PyExc_ValueError, call_args );
                }

                assert( !(tmp_raise_type_1 == NULL) );
                exception_type = tmp_raise_type_1;
                exception_lineno = 1432;
                RAISE_EXCEPTION_WITH_TYPE( &exception_type, &exception_value, &exception_tb );
                type_description_1 = "oocooooooooooooooooooooooooooooooooooooooo";
                goto try_except_handler_7;
            }
            branch_no_7:;
        }
        {
            PyObject *tmp_called_name_1;
            PyObject *tmp_source_name_2;
            PyObject *tmp_call_result_3;
            PyObject *tmp_args_element_name_5;
            PyObject *tmp_left_name_2;
            PyObject *tmp_left_name_3;
            PyObject *tmp_right_name_2;
            PyObject *tmp_right_name_3;
            PyObject *tmp_called_instance_7;
            PyObject *tmp_mvar_value_6;
            PyObject *tmp_args_element_name_6;
            CHECK_OBJECT( var_env_list );
            tmp_source_name_2 = var_env_list;
            tmp_called_name_1 = LOOKUP_ATTRIBUTE( tmp_source_name_2, const_str_plain_append );
            if ( tmp_called_name_1 == NULL )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 1433;
                type_description_1 = "oocooooooooooooooooooooooooooooooooooooooo";
                goto try_except_handler_7;
            }
            CHECK_OBJECT( var_k );
            tmp_left_name_3 = var_k;
            tmp_right_name_2 = const_bytes_chr_61;
            tmp_left_name_2 = BINARY_OPERATION_ADD_OBJECT_BYTES( tmp_left_name_3, tmp_right_name_2 );
            if ( tmp_left_name_2 == NULL )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
                Py_DECREF( tmp_called_name_1 );

                exception_lineno = 1433;
                type_description_1 = "oocooooooooooooooooooooooooooooooooooooooo";
                goto try_except_handler_7;
            }
            tmp_mvar_value_6 = GET_STRING_DICT_VALUE( moduledict_subprocess, (Nuitka_StringObject *)const_str_plain_os );

            if (unlikely( tmp_mvar_value_6 == NULL ))
            {
                tmp_mvar_value_6 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_os );
            }

            if ( tmp_mvar_value_6 == NULL )
            {
                Py_DECREF( tmp_called_name_1 );
                Py_DECREF( tmp_left_name_2 );
                exception_type = PyExc_NameError;
                Py_INCREF( exception_type );
                exception_value = PyUnicode_FromFormat( "name '%s' is not defined", "os" );
                exception_tb = NULL;
                NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
                CHAIN_EXCEPTION( exception_value );

                exception_lineno = 1433;
                type_description_1 = "oocooooooooooooooooooooooooooooooooooooooo";
                goto try_except_handler_7;
            }

            tmp_called_instance_7 = tmp_mvar_value_6;
            CHECK_OBJECT( var_v );
            tmp_args_element_name_6 = var_v;
            frame_f8a56ca7f4381c06bb242e27d9cd6c68->m_frame.f_lineno = 1433;
            {
                PyObject *call_args[] = { tmp_args_element_name_6 };
                tmp_right_name_3 = CALL_METHOD_WITH_ARGS1( tmp_called_instance_7, const_str_plain_fsencode, call_args );
            }

            if ( tmp_right_name_3 == NULL )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
                Py_DECREF( tmp_called_name_1 );
                Py_DECREF( tmp_left_name_2 );

                exception_lineno = 1433;
                type_description_1 = "oocooooooooooooooooooooooooooooooooooooooo";
                goto try_except_handler_7;
            }
            tmp_args_element_name_5 = BINARY_OPERATION_ADD_OBJECT_OBJECT( tmp_left_name_2, tmp_right_name_3 );
            Py_DECREF( tmp_left_name_2 );
            Py_DECREF( tmp_right_name_3 );
            if ( tmp_args_element_name_5 == NULL )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
                Py_DECREF( tmp_called_name_1 );

                exception_lineno = 1433;
                type_description_1 = "oocooooooooooooooooooooooooooooooooooooooo";
                goto try_except_handler_7;
            }
            frame_f8a56ca7f4381c06bb242e27d9cd6c68->m_frame.f_lineno = 1433;
            {
                PyObject *call_args[] = { tmp_args_element_name_5 };
                tmp_call_result_3 = CALL_FUNCTION_WITH_ARGS1( tmp_called_name_1, call_args );
            }

            Py_DECREF( tmp_called_name_1 );
            Py_DECREF( tmp_args_element_name_5 );
            if ( tmp_call_result_3 == NULL )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 1433;
                type_description_1 = "oocooooooooooooooooooooooooooooooooooooooo";
                goto try_except_handler_7;
            }
            Py_DECREF( tmp_call_result_3 );
        }
        if ( CONSIDER_THREADING() == false )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 1429;
            type_description_1 = "oocooooooooooooooooooooooooooooooooooooooo";
            goto try_except_handler_7;
        }
        goto loop_start_3;
        loop_end_3:;
        goto try_end_6;
        // Exception handler code:
        try_except_handler_7:;
        exception_keeper_type_6 = exception_type;
        exception_keeper_value_6 = exception_value;
        exception_keeper_tb_6 = exception_tb;
        exception_keeper_lineno_6 = exception_lineno;
        exception_type = NULL;
        exception_value = NULL;
        exception_tb = NULL;
        exception_lineno = 0;

        Py_XDECREF( tmp_for_loop_2__iter_value );
        tmp_for_loop_2__iter_value = NULL;

        CHECK_OBJECT( (PyObject *)tmp_for_loop_2__for_iterator );
        Py_DECREF( tmp_for_loop_2__for_iterator );
        tmp_for_loop_2__for_iterator = NULL;

        // Re-raise.
        exception_type = exception_keeper_type_6;
        exception_value = exception_keeper_value_6;
        exception_tb = exception_keeper_tb_6;
        exception_lineno = exception_keeper_lineno_6;

        goto try_except_handler_6;
        // End of try:
        try_end_6:;
        Py_XDECREF( tmp_for_loop_2__iter_value );
        tmp_for_loop_2__iter_value = NULL;

        CHECK_OBJECT( (PyObject *)tmp_for_loop_2__for_iterator );
        Py_DECREF( tmp_for_loop_2__for_iterator );
        tmp_for_loop_2__for_iterator = NULL;

        goto branch_end_6;
        branch_no_6:;
        {
            PyObject *tmp_assign_source_26;
            tmp_assign_source_26 = Py_None;
            assert( var_env_list == NULL );
            Py_INCREF( tmp_assign_source_26 );
            var_env_list = tmp_assign_source_26;
        }
        branch_end_6:;
    }
    {
        PyObject *tmp_assign_source_27;
        PyObject *tmp_called_instance_8;
        PyObject *tmp_mvar_value_7;
        PyObject *tmp_args_element_name_7;
        tmp_mvar_value_7 = GET_STRING_DICT_VALUE( moduledict_subprocess, (Nuitka_StringObject *)const_str_plain_os );

        if (unlikely( tmp_mvar_value_7 == NULL ))
        {
            tmp_mvar_value_7 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_os );
        }

        if ( tmp_mvar_value_7 == NULL )
        {

            exception_type = PyExc_NameError;
            Py_INCREF( exception_type );
            exception_value = PyUnicode_FromFormat( "name '%s' is not defined", "os" );
            exception_tb = NULL;
            NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
            CHAIN_EXCEPTION( exception_value );

            exception_lineno = 1436;
            type_description_1 = "oocooooooooooooooooooooooooooooooooooooooo";
            goto try_except_handler_6;
        }

        tmp_called_instance_8 = tmp_mvar_value_7;
        CHECK_OBJECT( PyCell_GET( par_executable ) );
        tmp_args_element_name_7 = PyCell_GET( par_executable );
        frame_f8a56ca7f4381c06bb242e27d9cd6c68->m_frame.f_lineno = 1436;
        {
            PyObject *call_args[] = { tmp_args_element_name_7 };
            tmp_assign_source_27 = CALL_METHOD_WITH_ARGS1( tmp_called_instance_8, const_str_plain_fsencode, call_args );
        }

        if ( tmp_assign_source_27 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 1436;
            type_description_1 = "oocooooooooooooooooooooooooooooooooooooooo";
            goto try_except_handler_6;
        }
        {
            PyObject *old = PyCell_GET( par_executable );
            PyCell_SET( par_executable, tmp_assign_source_27 );
            Py_XDECREF( old );
        }

    }
    {
        nuitka_bool tmp_condition_result_9;
        PyObject *tmp_called_instance_9;
        PyObject *tmp_source_name_3;
        PyObject *tmp_mvar_value_8;
        PyObject *tmp_call_result_4;
        PyObject *tmp_args_element_name_8;
        int tmp_truth_name_3;
        tmp_mvar_value_8 = GET_STRING_DICT_VALUE( moduledict_subprocess, (Nuitka_StringObject *)const_str_plain_os );

        if (unlikely( tmp_mvar_value_8 == NULL ))
        {
            tmp_mvar_value_8 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_os );
        }

        if ( tmp_mvar_value_8 == NULL )
        {

            exception_type = PyExc_NameError;
            Py_INCREF( exception_type );
            exception_value = PyUnicode_FromFormat( "name '%s' is not defined", "os" );
            exception_tb = NULL;
            NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
            CHAIN_EXCEPTION( exception_value );

            exception_lineno = 1437;
            type_description_1 = "oocooooooooooooooooooooooooooooooooooooooo";
            goto try_except_handler_6;
        }

        tmp_source_name_3 = tmp_mvar_value_8;
        tmp_called_instance_9 = LOOKUP_ATTRIBUTE( tmp_source_name_3, const_str_plain_path );
        if ( tmp_called_instance_9 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 1437;
            type_description_1 = "oocooooooooooooooooooooooooooooooooooooooo";
            goto try_except_handler_6;
        }
        CHECK_OBJECT( PyCell_GET( par_executable ) );
        tmp_args_element_name_8 = PyCell_GET( par_executable );
        frame_f8a56ca7f4381c06bb242e27d9cd6c68->m_frame.f_lineno = 1437;
        {
            PyObject *call_args[] = { tmp_args_element_name_8 };
            tmp_call_result_4 = CALL_METHOD_WITH_ARGS1( tmp_called_instance_9, const_str_plain_dirname, call_args );
        }

        Py_DECREF( tmp_called_instance_9 );
        if ( tmp_call_result_4 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 1437;
            type_description_1 = "oocooooooooooooooooooooooooooooooooooooooo";
            goto try_except_handler_6;
        }
        tmp_truth_name_3 = CHECK_IF_TRUE( tmp_call_result_4 );
        if ( tmp_truth_name_3 == -1 )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
            Py_DECREF( tmp_call_result_4 );

            exception_lineno = 1437;
            type_description_1 = "oocooooooooooooooooooooooooooooooooooooooo";
            goto try_except_handler_6;
        }
        tmp_condition_result_9 = tmp_truth_name_3 == 1 ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
        Py_DECREF( tmp_call_result_4 );
        if ( tmp_condition_result_9 == NUITKA_BOOL_TRUE )
        {
            goto branch_yes_8;
        }
        else
        {
            goto branch_no_8;
        }
        branch_yes_8:;
        {
            PyObject *tmp_assign_source_28;
            PyObject *tmp_tuple_element_1;
            CHECK_OBJECT( PyCell_GET( par_executable ) );
            tmp_tuple_element_1 = PyCell_GET( par_executable );
            tmp_assign_source_28 = PyTuple_New( 1 );
            Py_INCREF( tmp_tuple_element_1 );
            PyTuple_SET_ITEM( tmp_assign_source_28, 0, tmp_tuple_element_1 );
            assert( var_executable_list == NULL );
            var_executable_list = tmp_assign_source_28;
        }
        goto branch_end_8;
        branch_no_8:;
        {
            PyObject *tmp_assign_source_29;
            PyObject *tmp_tuple_arg_1;
            {
                PyObject *tmp_assign_source_30;
                PyObject *tmp_iter_arg_5;
                PyObject *tmp_called_instance_10;
                PyObject *tmp_mvar_value_9;
                PyObject *tmp_args_element_name_9;
                tmp_mvar_value_9 = GET_STRING_DICT_VALUE( moduledict_subprocess, (Nuitka_StringObject *)const_str_plain_os );

                if (unlikely( tmp_mvar_value_9 == NULL ))
                {
                    tmp_mvar_value_9 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_os );
                }

                if ( tmp_mvar_value_9 == NULL )
                {

                    exception_type = PyExc_NameError;
                    Py_INCREF( exception_type );
                    exception_value = PyUnicode_FromFormat( "name '%s' is not defined", "os" );
                    exception_tb = NULL;
                    NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
                    CHAIN_EXCEPTION( exception_value );

                    exception_lineno = 1443;
                    type_description_1 = "oocooooooooooooooooooooooooooooooooooooooo";
                    goto try_except_handler_6;
                }

                tmp_called_instance_10 = tmp_mvar_value_9;
                CHECK_OBJECT( par_env );
                tmp_args_element_name_9 = par_env;
                frame_f8a56ca7f4381c06bb242e27d9cd6c68->m_frame.f_lineno = 1443;
                {
                    PyObject *call_args[] = { tmp_args_element_name_9 };
                    tmp_iter_arg_5 = CALL_METHOD_WITH_ARGS1( tmp_called_instance_10, const_str_plain_get_exec_path, call_args );
                }

                if ( tmp_iter_arg_5 == NULL )
                {
                    assert( ERROR_OCCURRED() );

                    FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                    exception_lineno = 1443;
                    type_description_1 = "oocooooooooooooooooooooooooooooooooooooooo";
                    goto try_except_handler_6;
                }
                tmp_assign_source_30 = MAKE_ITERATOR( tmp_iter_arg_5 );
                Py_DECREF( tmp_iter_arg_5 );
                if ( tmp_assign_source_30 == NULL )
                {
                    assert( ERROR_OCCURRED() );

                    FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                    exception_lineno = 1442;
                    type_description_1 = "oocooooooooooooooooooooooooooooooooooooooo";
                    goto try_except_handler_6;
                }
                assert( tmp_genexpr_1__$0 == NULL );
                tmp_genexpr_1__$0 = tmp_assign_source_30;
            }
            // Tried code:
            tmp_tuple_arg_1 = subprocess$$$function_52__execute_child$$$genexpr_1_genexpr_maker();

            ((struct Nuitka_GeneratorObject *)tmp_tuple_arg_1)->m_closure[0] = par_executable;
            Py_INCREF( ((struct Nuitka_GeneratorObject *)tmp_tuple_arg_1)->m_closure[0] );
            ((struct Nuitka_GeneratorObject *)tmp_tuple_arg_1)->m_closure[1] = PyCell_NEW0( tmp_genexpr_1__$0 );


            goto try_return_handler_10;
            // tried codes exits in all cases
            NUITKA_CANNOT_GET_HERE( subprocess$$$function_52__execute_child );
            return NULL;
            // Return handler code:
            try_return_handler_10:;
            CHECK_OBJECT( (PyObject *)tmp_genexpr_1__$0 );
            Py_DECREF( tmp_genexpr_1__$0 );
            tmp_genexpr_1__$0 = NULL;

            goto outline_result_1;
            // End of try:
            CHECK_OBJECT( (PyObject *)tmp_genexpr_1__$0 );
            Py_DECREF( tmp_genexpr_1__$0 );
            tmp_genexpr_1__$0 = NULL;

            // Return statement must have exited already.
            NUITKA_CANNOT_GET_HERE( subprocess$$$function_52__execute_child );
            return NULL;
            outline_result_1:;
            tmp_assign_source_29 = PySequence_Tuple( tmp_tuple_arg_1 );
            Py_DECREF( tmp_tuple_arg_1 );
            if ( tmp_assign_source_29 == NULL )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 1441;
                type_description_1 = "oocooooooooooooooooooooooooooooooooooooooo";
                goto try_except_handler_6;
            }
            assert( var_executable_list == NULL );
            var_executable_list = tmp_assign_source_29;
        }
        branch_end_8:;
    }
    {
        PyObject *tmp_assign_source_31;
        PyObject *tmp_set_arg_1;
        CHECK_OBJECT( par_pass_fds );
        tmp_set_arg_1 = par_pass_fds;
        tmp_assign_source_31 = PySet_New( tmp_set_arg_1 );
        if ( tmp_assign_source_31 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 1444;
            type_description_1 = "oocooooooooooooooooooooooooooooooooooooooo";
            goto try_except_handler_6;
        }
        assert( var_fds_to_keep == NULL );
        var_fds_to_keep = tmp_assign_source_31;
    }
    {
        PyObject *tmp_called_instance_11;
        PyObject *tmp_call_result_5;
        PyObject *tmp_args_element_name_10;
        CHECK_OBJECT( var_fds_to_keep );
        tmp_called_instance_11 = var_fds_to_keep;
        CHECK_OBJECT( var_errpipe_write );
        tmp_args_element_name_10 = var_errpipe_write;
        frame_f8a56ca7f4381c06bb242e27d9cd6c68->m_frame.f_lineno = 1445;
        {
            PyObject *call_args[] = { tmp_args_element_name_10 };
            tmp_call_result_5 = CALL_METHOD_WITH_ARGS1( tmp_called_instance_11, const_str_plain_add, call_args );
        }

        if ( tmp_call_result_5 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 1445;
            type_description_1 = "oocooooooooooooooooooooooooooooooooooooooo";
            goto try_except_handler_6;
        }
        Py_DECREF( tmp_call_result_5 );
    }
    {
        PyObject *tmp_assattr_name_1;
        PyObject *tmp_called_name_2;
        PyObject *tmp_source_name_4;
        PyObject *tmp_mvar_value_10;
        PyObject *tmp_args_element_name_11;
        PyObject *tmp_args_element_name_12;
        PyObject *tmp_args_element_name_13;
        PyObject *tmp_args_element_name_14;
        PyObject *tmp_tuple_arg_2;
        PyObject *tmp_called_name_3;
        PyObject *tmp_args_element_name_15;
        PyObject *tmp_called_name_4;
        PyObject *tmp_args_element_name_16;
        PyObject *tmp_args_element_name_17;
        PyObject *tmp_args_element_name_18;
        PyObject *tmp_args_element_name_19;
        PyObject *tmp_args_element_name_20;
        PyObject *tmp_args_element_name_21;
        PyObject *tmp_args_element_name_22;
        PyObject *tmp_args_element_name_23;
        PyObject *tmp_args_element_name_24;
        PyObject *tmp_args_element_name_25;
        PyObject *tmp_args_element_name_26;
        PyObject *tmp_args_element_name_27;
        PyObject *tmp_args_element_name_28;
        PyObject *tmp_args_element_name_29;
        PyObject *tmp_args_element_name_30;
        PyObject *tmp_assattr_target_1;
        tmp_mvar_value_10 = GET_STRING_DICT_VALUE( moduledict_subprocess, (Nuitka_StringObject *)const_str_plain__posixsubprocess );

        if (unlikely( tmp_mvar_value_10 == NULL ))
        {
            tmp_mvar_value_10 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain__posixsubprocess );
        }

        if ( tmp_mvar_value_10 == NULL )
        {

            exception_type = PyExc_NameError;
            Py_INCREF( exception_type );
            exception_value = PyUnicode_FromFormat( "name '%s' is not defined", "_posixsubprocess" );
            exception_tb = NULL;
            NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
            CHAIN_EXCEPTION( exception_value );

            exception_lineno = 1446;
            type_description_1 = "oocooooooooooooooooooooooooooooooooooooooo";
            goto try_except_handler_6;
        }

        tmp_source_name_4 = tmp_mvar_value_10;
        tmp_called_name_2 = LOOKUP_ATTRIBUTE( tmp_source_name_4, const_str_plain_fork_exec );
        if ( tmp_called_name_2 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 1446;
            type_description_1 = "oocooooooooooooooooooooooooooooooooooooooo";
            goto try_except_handler_6;
        }
        if ( par_args == NULL )
        {
            Py_DECREF( tmp_called_name_2 );
            exception_type = PyExc_UnboundLocalError;
            Py_INCREF( exception_type );
            exception_value = PyUnicode_FromFormat( "local variable '%s' referenced before assignment", "args" );
            exception_tb = NULL;
            NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
            CHAIN_EXCEPTION( exception_value );

            exception_lineno = 1447;
            type_description_1 = "oocooooooooooooooooooooooooooooooooooooooo";
            goto try_except_handler_6;
        }

        tmp_args_element_name_11 = par_args;
        CHECK_OBJECT( var_executable_list );
        tmp_args_element_name_12 = var_executable_list;
        CHECK_OBJECT( par_close_fds );
        tmp_args_element_name_13 = par_close_fds;
        tmp_called_name_3 = LOOKUP_BUILTIN( const_str_plain_sorted );
        assert( tmp_called_name_3 != NULL );
        tmp_called_name_4 = (PyObject *)&PyMap_Type;
        tmp_args_element_name_16 = (PyObject *)&PyLong_Type;
        CHECK_OBJECT( var_fds_to_keep );
        tmp_args_element_name_17 = var_fds_to_keep;
        frame_f8a56ca7f4381c06bb242e27d9cd6c68->m_frame.f_lineno = 1448;
        {
            PyObject *call_args[] = { tmp_args_element_name_16, tmp_args_element_name_17 };
            tmp_args_element_name_15 = CALL_FUNCTION_WITH_ARGS2( tmp_called_name_4, call_args );
        }

        if ( tmp_args_element_name_15 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
            Py_DECREF( tmp_called_name_2 );

            exception_lineno = 1448;
            type_description_1 = "oocooooooooooooooooooooooooooooooooooooooo";
            goto try_except_handler_6;
        }
        frame_f8a56ca7f4381c06bb242e27d9cd6c68->m_frame.f_lineno = 1448;
        {
            PyObject *call_args[] = { tmp_args_element_name_15 };
            tmp_tuple_arg_2 = CALL_FUNCTION_WITH_ARGS1( tmp_called_name_3, call_args );
        }

        Py_DECREF( tmp_args_element_name_15 );
        if ( tmp_tuple_arg_2 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
            Py_DECREF( tmp_called_name_2 );

            exception_lineno = 1448;
            type_description_1 = "oocooooooooooooooooooooooooooooooooooooooo";
            goto try_except_handler_6;
        }
        tmp_args_element_name_14 = PySequence_Tuple( tmp_tuple_arg_2 );
        Py_DECREF( tmp_tuple_arg_2 );
        if ( tmp_args_element_name_14 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
            Py_DECREF( tmp_called_name_2 );

            exception_lineno = 1448;
            type_description_1 = "oocooooooooooooooooooooooooooooooooooooooo";
            goto try_except_handler_6;
        }
        CHECK_OBJECT( par_cwd );
        tmp_args_element_name_18 = par_cwd;
        CHECK_OBJECT( var_env_list );
        tmp_args_element_name_19 = var_env_list;
        CHECK_OBJECT( par_p2cread );
        tmp_args_element_name_20 = par_p2cread;
        CHECK_OBJECT( par_p2cwrite );
        tmp_args_element_name_21 = par_p2cwrite;
        CHECK_OBJECT( par_c2pread );
        tmp_args_element_name_22 = par_c2pread;
        CHECK_OBJECT( par_c2pwrite );
        tmp_args_element_name_23 = par_c2pwrite;
        CHECK_OBJECT( par_errread );
        tmp_args_element_name_24 = par_errread;
        CHECK_OBJECT( par_errwrite );
        tmp_args_element_name_25 = par_errwrite;
        CHECK_OBJECT( var_errpipe_read );
        tmp_args_element_name_26 = var_errpipe_read;
        CHECK_OBJECT( var_errpipe_write );
        tmp_args_element_name_27 = var_errpipe_write;
        CHECK_OBJECT( par_restore_signals );
        tmp_args_element_name_28 = par_restore_signals;
        CHECK_OBJECT( par_start_new_session );
        tmp_args_element_name_29 = par_start_new_session;
        CHECK_OBJECT( par_preexec_fn );
        tmp_args_element_name_30 = par_preexec_fn;
        frame_f8a56ca7f4381c06bb242e27d9cd6c68->m_frame.f_lineno = 1446;
        {
            PyObject *call_args[] = { tmp_args_element_name_11, tmp_args_element_name_12, tmp_args_element_name_13, tmp_args_element_name_14, tmp_args_element_name_18, tmp_args_element_name_19, tmp_args_element_name_20, tmp_args_element_name_21, tmp_args_element_name_22, tmp_args_element_name_23, tmp_args_element_name_24, tmp_args_element_name_25, tmp_args_element_name_26, tmp_args_element_name_27, tmp_args_element_name_28, tmp_args_element_name_29, tmp_args_element_name_30 };
            tmp_assattr_name_1 = CALL_FUNCTION_WITH_ARGS17( tmp_called_name_2, call_args );
        }

        Py_DECREF( tmp_called_name_2 );
        Py_DECREF( tmp_args_element_name_14 );
        if ( tmp_assattr_name_1 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 1446;
            type_description_1 = "oocooooooooooooooooooooooooooooooooooooooo";
            goto try_except_handler_6;
        }
        CHECK_OBJECT( par_self );
        tmp_assattr_target_1 = par_self;
        tmp_result = SET_ATTRIBUTE( tmp_assattr_target_1, const_str_plain_pid, tmp_assattr_name_1 );
        Py_DECREF( tmp_assattr_name_1 );
        if ( tmp_result == false )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 1446;
            type_description_1 = "oocooooooooooooooooooooooooooooooooooooooo";
            goto try_except_handler_6;
        }
    }
    {
        PyObject *tmp_assattr_name_2;
        PyObject *tmp_assattr_target_2;
        tmp_assattr_name_2 = Py_True;
        CHECK_OBJECT( par_self );
        tmp_assattr_target_2 = par_self;
        tmp_result = SET_ATTRIBUTE( tmp_assattr_target_2, const_str_plain__child_created, tmp_assattr_name_2 );
        if ( tmp_result == false )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 1454;
            type_description_1 = "oocooooooooooooooooooooooooooooooooooooooo";
            goto try_except_handler_6;
        }
    }
    goto try_end_7;
    // Exception handler code:
    try_except_handler_6:;
    exception_keeper_type_7 = exception_type;
    exception_keeper_value_7 = exception_value;
    exception_keeper_tb_7 = exception_tb;
    exception_keeper_lineno_7 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    // Preserve existing published exception.
    exception_preserved_type_1 = EXC_TYPE(PyThreadState_GET());
    Py_XINCREF( exception_preserved_type_1 );
    exception_preserved_value_1 = EXC_VALUE(PyThreadState_GET());
    Py_XINCREF( exception_preserved_value_1 );
    exception_preserved_tb_1 = (PyTracebackObject *)EXC_TRACEBACK(PyThreadState_GET());
    Py_XINCREF( exception_preserved_tb_1 );

    if ( exception_keeper_tb_7 == NULL )
    {
        exception_keeper_tb_7 = MAKE_TRACEBACK( frame_f8a56ca7f4381c06bb242e27d9cd6c68, exception_keeper_lineno_7 );
    }
    else if ( exception_keeper_lineno_7 != 0 )
    {
        exception_keeper_tb_7 = ADD_TRACEBACK( exception_keeper_tb_7, frame_f8a56ca7f4381c06bb242e27d9cd6c68, exception_keeper_lineno_7 );
    }

    NORMALIZE_EXCEPTION( &exception_keeper_type_7, &exception_keeper_value_7, &exception_keeper_tb_7 );
    PyException_SetTraceback( exception_keeper_value_7, (PyObject *)exception_keeper_tb_7 );
    PUBLISH_EXCEPTION( &exception_keeper_type_7, &exception_keeper_value_7, &exception_keeper_tb_7 );
    // Tried code:
    {
        PyObject *tmp_called_instance_12;
        PyObject *tmp_mvar_value_11;
        PyObject *tmp_call_result_6;
        PyObject *tmp_args_element_name_31;
        tmp_mvar_value_11 = GET_STRING_DICT_VALUE( moduledict_subprocess, (Nuitka_StringObject *)const_str_plain_os );

        if (unlikely( tmp_mvar_value_11 == NULL ))
        {
            tmp_mvar_value_11 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_os );
        }

        if ( tmp_mvar_value_11 == NULL )
        {

            exception_type = PyExc_NameError;
            Py_INCREF( exception_type );
            exception_value = PyUnicode_FromFormat( "name '%s' is not defined", "os" );
            exception_tb = NULL;
            NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
            CHAIN_EXCEPTION( exception_value );

            exception_lineno = 1457;
            type_description_1 = "oocooooooooooooooooooooooooooooooooooooooo";
            goto try_except_handler_11;
        }

        tmp_called_instance_12 = tmp_mvar_value_11;
        CHECK_OBJECT( var_errpipe_write );
        tmp_args_element_name_31 = var_errpipe_write;
        frame_f8a56ca7f4381c06bb242e27d9cd6c68->m_frame.f_lineno = 1457;
        {
            PyObject *call_args[] = { tmp_args_element_name_31 };
            tmp_call_result_6 = CALL_METHOD_WITH_ARGS1( tmp_called_instance_12, const_str_plain_close, call_args );
        }

        if ( tmp_call_result_6 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 1457;
            type_description_1 = "oocooooooooooooooooooooooooooooooooooooooo";
            goto try_except_handler_11;
        }
        Py_DECREF( tmp_call_result_6 );
    }
    tmp_result = RERAISE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
    if (unlikely( tmp_result == false ))
    {
        exception_lineno = 1421;
    }

    if (exception_tb && exception_tb->tb_frame == &frame_f8a56ca7f4381c06bb242e27d9cd6c68->m_frame) frame_f8a56ca7f4381c06bb242e27d9cd6c68->m_frame.f_lineno = exception_tb->tb_lineno;
    type_description_1 = "oocooooooooooooooooooooooooooooooooooooooo";
    goto try_except_handler_11;
    // tried codes exits in all cases
    NUITKA_CANNOT_GET_HERE( subprocess$$$function_52__execute_child );
    return NULL;
    // Exception handler code:
    try_except_handler_11:;
    exception_keeper_type_8 = exception_type;
    exception_keeper_value_8 = exception_value;
    exception_keeper_tb_8 = exception_tb;
    exception_keeper_lineno_8 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    // Restore previous exception.
    SET_CURRENT_EXCEPTION( exception_preserved_type_1, exception_preserved_value_1, exception_preserved_tb_1 );
    // Re-raise.
    exception_type = exception_keeper_type_8;
    exception_value = exception_keeper_value_8;
    exception_tb = exception_keeper_tb_8;
    exception_lineno = exception_keeper_lineno_8;

    goto try_except_handler_5;
    // End of try:
    // End of try:
    try_end_7:;
    {
        PyObject *tmp_called_instance_13;
        PyObject *tmp_mvar_value_12;
        PyObject *tmp_call_result_7;
        PyObject *tmp_args_element_name_32;
        tmp_mvar_value_12 = GET_STRING_DICT_VALUE( moduledict_subprocess, (Nuitka_StringObject *)const_str_plain_os );

        if (unlikely( tmp_mvar_value_12 == NULL ))
        {
            tmp_mvar_value_12 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_os );
        }

        if ( tmp_mvar_value_12 == NULL )
        {

            exception_type = PyExc_NameError;
            Py_INCREF( exception_type );
            exception_value = PyUnicode_FromFormat( "name '%s' is not defined", "os" );
            exception_tb = NULL;
            NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
            CHAIN_EXCEPTION( exception_value );

            exception_lineno = 1457;
            type_description_1 = "oocooooooooooooooooooooooooooooooooooooooo";
            goto try_except_handler_5;
        }

        tmp_called_instance_13 = tmp_mvar_value_12;
        CHECK_OBJECT( var_errpipe_write );
        tmp_args_element_name_32 = var_errpipe_write;
        frame_f8a56ca7f4381c06bb242e27d9cd6c68->m_frame.f_lineno = 1457;
        {
            PyObject *call_args[] = { tmp_args_element_name_32 };
            tmp_call_result_7 = CALL_METHOD_WITH_ARGS1( tmp_called_instance_13, const_str_plain_close, call_args );
        }

        if ( tmp_call_result_7 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 1457;
            type_description_1 = "oocooooooooooooooooooooooooooooooooooooooo";
            goto try_except_handler_5;
        }
        Py_DECREF( tmp_call_result_7 );
    }
    {
        PyObject *tmp_assign_source_32;
        PyObject *tmp_getattr_target_1;
        PyObject *tmp_getattr_attr_1;
        PyObject *tmp_getattr_default_1;
        CHECK_OBJECT( par_self );
        tmp_getattr_target_1 = par_self;
        tmp_getattr_attr_1 = const_str_plain__devnull;
        tmp_getattr_default_1 = Py_None;
        tmp_assign_source_32 = BUILTIN_GETATTR( tmp_getattr_target_1, tmp_getattr_attr_1, tmp_getattr_default_1 );
        if ( tmp_assign_source_32 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 1460;
            type_description_1 = "oocooooooooooooooooooooooooooooooooooooooo";
            goto try_except_handler_5;
        }
        assert( var_devnull_fd == NULL );
        var_devnull_fd = tmp_assign_source_32;
    }
    {
        nuitka_bool tmp_condition_result_10;
        int tmp_and_left_truth_1;
        nuitka_bool tmp_and_left_value_1;
        nuitka_bool tmp_and_right_value_1;
        PyObject *tmp_compexpr_left_5;
        PyObject *tmp_compexpr_right_5;
        int tmp_and_left_truth_2;
        nuitka_bool tmp_and_left_value_2;
        nuitka_bool tmp_and_right_value_2;
        PyObject *tmp_compexpr_left_6;
        PyObject *tmp_compexpr_right_6;
        PyObject *tmp_compexpr_left_7;
        PyObject *tmp_compexpr_right_7;
        CHECK_OBJECT( par_p2cread );
        tmp_compexpr_left_5 = par_p2cread;
        tmp_compexpr_right_5 = const_int_neg_1;
        tmp_res = RICH_COMPARE_BOOL_NOTEQ_OBJECT_OBJECT( tmp_compexpr_left_5, tmp_compexpr_right_5 );
        if ( tmp_res == -1 )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 1461;
            type_description_1 = "oocooooooooooooooooooooooooooooooooooooooo";
            goto try_except_handler_5;
        }
        tmp_and_left_value_1 = ( tmp_res != 0 ) ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
        tmp_and_left_truth_1 = tmp_and_left_value_1 == NUITKA_BOOL_TRUE ? 1 : 0;
        if ( tmp_and_left_truth_1 == 1 )
        {
            goto and_right_1;
        }
        else
        {
            goto and_left_1;
        }
        and_right_1:;
        CHECK_OBJECT( par_p2cwrite );
        tmp_compexpr_left_6 = par_p2cwrite;
        tmp_compexpr_right_6 = const_int_neg_1;
        tmp_res = RICH_COMPARE_BOOL_NOTEQ_OBJECT_OBJECT( tmp_compexpr_left_6, tmp_compexpr_right_6 );
        if ( tmp_res == -1 )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 1461;
            type_description_1 = "oocooooooooooooooooooooooooooooooooooooooo";
            goto try_except_handler_5;
        }
        tmp_and_left_value_2 = ( tmp_res != 0 ) ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
        tmp_and_left_truth_2 = tmp_and_left_value_2 == NUITKA_BOOL_TRUE ? 1 : 0;
        if ( tmp_and_left_truth_2 == 1 )
        {
            goto and_right_2;
        }
        else
        {
            goto and_left_2;
        }
        and_right_2:;
        CHECK_OBJECT( par_p2cread );
        tmp_compexpr_left_7 = par_p2cread;
        CHECK_OBJECT( var_devnull_fd );
        tmp_compexpr_right_7 = var_devnull_fd;
        tmp_res = RICH_COMPARE_BOOL_NOTEQ_OBJECT_OBJECT( tmp_compexpr_left_7, tmp_compexpr_right_7 );
        if ( tmp_res == -1 )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 1461;
            type_description_1 = "oocooooooooooooooooooooooooooooooooooooooo";
            goto try_except_handler_5;
        }
        tmp_and_right_value_2 = ( tmp_res != 0 ) ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
        tmp_and_right_value_1 = tmp_and_right_value_2;
        goto and_end_2;
        and_left_2:;
        tmp_and_right_value_1 = tmp_and_left_value_2;
        and_end_2:;
        tmp_condition_result_10 = tmp_and_right_value_1;
        goto and_end_1;
        and_left_1:;
        tmp_condition_result_10 = tmp_and_left_value_1;
        and_end_1:;
        if ( tmp_condition_result_10 == NUITKA_BOOL_TRUE )
        {
            goto branch_yes_9;
        }
        else
        {
            goto branch_no_9;
        }
        branch_yes_9:;
        {
            PyObject *tmp_called_instance_14;
            PyObject *tmp_mvar_value_13;
            PyObject *tmp_call_result_8;
            PyObject *tmp_args_element_name_33;
            tmp_mvar_value_13 = GET_STRING_DICT_VALUE( moduledict_subprocess, (Nuitka_StringObject *)const_str_plain_os );

            if (unlikely( tmp_mvar_value_13 == NULL ))
            {
                tmp_mvar_value_13 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_os );
            }

            if ( tmp_mvar_value_13 == NULL )
            {

                exception_type = PyExc_NameError;
                Py_INCREF( exception_type );
                exception_value = PyUnicode_FromFormat( "name '%s' is not defined", "os" );
                exception_tb = NULL;
                NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
                CHAIN_EXCEPTION( exception_value );

                exception_lineno = 1462;
                type_description_1 = "oocooooooooooooooooooooooooooooooooooooooo";
                goto try_except_handler_5;
            }

            tmp_called_instance_14 = tmp_mvar_value_13;
            CHECK_OBJECT( par_p2cread );
            tmp_args_element_name_33 = par_p2cread;
            frame_f8a56ca7f4381c06bb242e27d9cd6c68->m_frame.f_lineno = 1462;
            {
                PyObject *call_args[] = { tmp_args_element_name_33 };
                tmp_call_result_8 = CALL_METHOD_WITH_ARGS1( tmp_called_instance_14, const_str_plain_close, call_args );
            }

            if ( tmp_call_result_8 == NULL )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 1462;
                type_description_1 = "oocooooooooooooooooooooooooooooooooooooooo";
                goto try_except_handler_5;
            }
            Py_DECREF( tmp_call_result_8 );
        }
        branch_no_9:;
    }
    {
        nuitka_bool tmp_condition_result_11;
        int tmp_and_left_truth_3;
        nuitka_bool tmp_and_left_value_3;
        nuitka_bool tmp_and_right_value_3;
        PyObject *tmp_compexpr_left_8;
        PyObject *tmp_compexpr_right_8;
        int tmp_and_left_truth_4;
        nuitka_bool tmp_and_left_value_4;
        nuitka_bool tmp_and_right_value_4;
        PyObject *tmp_compexpr_left_9;
        PyObject *tmp_compexpr_right_9;
        PyObject *tmp_compexpr_left_10;
        PyObject *tmp_compexpr_right_10;
        CHECK_OBJECT( par_c2pwrite );
        tmp_compexpr_left_8 = par_c2pwrite;
        tmp_compexpr_right_8 = const_int_neg_1;
        tmp_res = RICH_COMPARE_BOOL_NOTEQ_OBJECT_OBJECT( tmp_compexpr_left_8, tmp_compexpr_right_8 );
        if ( tmp_res == -1 )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 1463;
            type_description_1 = "oocooooooooooooooooooooooooooooooooooooooo";
            goto try_except_handler_5;
        }
        tmp_and_left_value_3 = ( tmp_res != 0 ) ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
        tmp_and_left_truth_3 = tmp_and_left_value_3 == NUITKA_BOOL_TRUE ? 1 : 0;
        if ( tmp_and_left_truth_3 == 1 )
        {
            goto and_right_3;
        }
        else
        {
            goto and_left_3;
        }
        and_right_3:;
        CHECK_OBJECT( par_c2pread );
        tmp_compexpr_left_9 = par_c2pread;
        tmp_compexpr_right_9 = const_int_neg_1;
        tmp_res = RICH_COMPARE_BOOL_NOTEQ_OBJECT_OBJECT( tmp_compexpr_left_9, tmp_compexpr_right_9 );
        if ( tmp_res == -1 )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 1463;
            type_description_1 = "oocooooooooooooooooooooooooooooooooooooooo";
            goto try_except_handler_5;
        }
        tmp_and_left_value_4 = ( tmp_res != 0 ) ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
        tmp_and_left_truth_4 = tmp_and_left_value_4 == NUITKA_BOOL_TRUE ? 1 : 0;
        if ( tmp_and_left_truth_4 == 1 )
        {
            goto and_right_4;
        }
        else
        {
            goto and_left_4;
        }
        and_right_4:;
        CHECK_OBJECT( par_c2pwrite );
        tmp_compexpr_left_10 = par_c2pwrite;
        CHECK_OBJECT( var_devnull_fd );
        tmp_compexpr_right_10 = var_devnull_fd;
        tmp_res = RICH_COMPARE_BOOL_NOTEQ_OBJECT_OBJECT( tmp_compexpr_left_10, tmp_compexpr_right_10 );
        if ( tmp_res == -1 )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 1463;
            type_description_1 = "oocooooooooooooooooooooooooooooooooooooooo";
            goto try_except_handler_5;
        }
        tmp_and_right_value_4 = ( tmp_res != 0 ) ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
        tmp_and_right_value_3 = tmp_and_right_value_4;
        goto and_end_4;
        and_left_4:;
        tmp_and_right_value_3 = tmp_and_left_value_4;
        and_end_4:;
        tmp_condition_result_11 = tmp_and_right_value_3;
        goto and_end_3;
        and_left_3:;
        tmp_condition_result_11 = tmp_and_left_value_3;
        and_end_3:;
        if ( tmp_condition_result_11 == NUITKA_BOOL_TRUE )
        {
            goto branch_yes_10;
        }
        else
        {
            goto branch_no_10;
        }
        branch_yes_10:;
        {
            PyObject *tmp_called_instance_15;
            PyObject *tmp_mvar_value_14;
            PyObject *tmp_call_result_9;
            PyObject *tmp_args_element_name_34;
            tmp_mvar_value_14 = GET_STRING_DICT_VALUE( moduledict_subprocess, (Nuitka_StringObject *)const_str_plain_os );

            if (unlikely( tmp_mvar_value_14 == NULL ))
            {
                tmp_mvar_value_14 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_os );
            }

            if ( tmp_mvar_value_14 == NULL )
            {

                exception_type = PyExc_NameError;
                Py_INCREF( exception_type );
                exception_value = PyUnicode_FromFormat( "name '%s' is not defined", "os" );
                exception_tb = NULL;
                NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
                CHAIN_EXCEPTION( exception_value );

                exception_lineno = 1464;
                type_description_1 = "oocooooooooooooooooooooooooooooooooooooooo";
                goto try_except_handler_5;
            }

            tmp_called_instance_15 = tmp_mvar_value_14;
            CHECK_OBJECT( par_c2pwrite );
            tmp_args_element_name_34 = par_c2pwrite;
            frame_f8a56ca7f4381c06bb242e27d9cd6c68->m_frame.f_lineno = 1464;
            {
                PyObject *call_args[] = { tmp_args_element_name_34 };
                tmp_call_result_9 = CALL_METHOD_WITH_ARGS1( tmp_called_instance_15, const_str_plain_close, call_args );
            }

            if ( tmp_call_result_9 == NULL )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 1464;
                type_description_1 = "oocooooooooooooooooooooooooooooooooooooooo";
                goto try_except_handler_5;
            }
            Py_DECREF( tmp_call_result_9 );
        }
        branch_no_10:;
    }
    {
        nuitka_bool tmp_condition_result_12;
        int tmp_and_left_truth_5;
        nuitka_bool tmp_and_left_value_5;
        nuitka_bool tmp_and_right_value_5;
        PyObject *tmp_compexpr_left_11;
        PyObject *tmp_compexpr_right_11;
        int tmp_and_left_truth_6;
        nuitka_bool tmp_and_left_value_6;
        nuitka_bool tmp_and_right_value_6;
        PyObject *tmp_compexpr_left_12;
        PyObject *tmp_compexpr_right_12;
        PyObject *tmp_compexpr_left_13;
        PyObject *tmp_compexpr_right_13;
        CHECK_OBJECT( par_errwrite );
        tmp_compexpr_left_11 = par_errwrite;
        tmp_compexpr_right_11 = const_int_neg_1;
        tmp_res = RICH_COMPARE_BOOL_NOTEQ_OBJECT_OBJECT( tmp_compexpr_left_11, tmp_compexpr_right_11 );
        if ( tmp_res == -1 )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 1465;
            type_description_1 = "oocooooooooooooooooooooooooooooooooooooooo";
            goto try_except_handler_5;
        }
        tmp_and_left_value_5 = ( tmp_res != 0 ) ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
        tmp_and_left_truth_5 = tmp_and_left_value_5 == NUITKA_BOOL_TRUE ? 1 : 0;
        if ( tmp_and_left_truth_5 == 1 )
        {
            goto and_right_5;
        }
        else
        {
            goto and_left_5;
        }
        and_right_5:;
        CHECK_OBJECT( par_errread );
        tmp_compexpr_left_12 = par_errread;
        tmp_compexpr_right_12 = const_int_neg_1;
        tmp_res = RICH_COMPARE_BOOL_NOTEQ_OBJECT_OBJECT( tmp_compexpr_left_12, tmp_compexpr_right_12 );
        if ( tmp_res == -1 )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 1465;
            type_description_1 = "oocooooooooooooooooooooooooooooooooooooooo";
            goto try_except_handler_5;
        }
        tmp_and_left_value_6 = ( tmp_res != 0 ) ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
        tmp_and_left_truth_6 = tmp_and_left_value_6 == NUITKA_BOOL_TRUE ? 1 : 0;
        if ( tmp_and_left_truth_6 == 1 )
        {
            goto and_right_6;
        }
        else
        {
            goto and_left_6;
        }
        and_right_6:;
        CHECK_OBJECT( par_errwrite );
        tmp_compexpr_left_13 = par_errwrite;
        CHECK_OBJECT( var_devnull_fd );
        tmp_compexpr_right_13 = var_devnull_fd;
        tmp_res = RICH_COMPARE_BOOL_NOTEQ_OBJECT_OBJECT( tmp_compexpr_left_13, tmp_compexpr_right_13 );
        if ( tmp_res == -1 )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 1465;
            type_description_1 = "oocooooooooooooooooooooooooooooooooooooooo";
            goto try_except_handler_5;
        }
        tmp_and_right_value_6 = ( tmp_res != 0 ) ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
        tmp_and_right_value_5 = tmp_and_right_value_6;
        goto and_end_6;
        and_left_6:;
        tmp_and_right_value_5 = tmp_and_left_value_6;
        and_end_6:;
        tmp_condition_result_12 = tmp_and_right_value_5;
        goto and_end_5;
        and_left_5:;
        tmp_condition_result_12 = tmp_and_left_value_5;
        and_end_5:;
        if ( tmp_condition_result_12 == NUITKA_BOOL_TRUE )
        {
            goto branch_yes_11;
        }
        else
        {
            goto branch_no_11;
        }
        branch_yes_11:;
        {
            PyObject *tmp_called_instance_16;
            PyObject *tmp_mvar_value_15;
            PyObject *tmp_call_result_10;
            PyObject *tmp_args_element_name_35;
            tmp_mvar_value_15 = GET_STRING_DICT_VALUE( moduledict_subprocess, (Nuitka_StringObject *)const_str_plain_os );

            if (unlikely( tmp_mvar_value_15 == NULL ))
            {
                tmp_mvar_value_15 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_os );
            }

            if ( tmp_mvar_value_15 == NULL )
            {

                exception_type = PyExc_NameError;
                Py_INCREF( exception_type );
                exception_value = PyUnicode_FromFormat( "name '%s' is not defined", "os" );
                exception_tb = NULL;
                NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
                CHAIN_EXCEPTION( exception_value );

                exception_lineno = 1466;
                type_description_1 = "oocooooooooooooooooooooooooooooooooooooooo";
                goto try_except_handler_5;
            }

            tmp_called_instance_16 = tmp_mvar_value_15;
            CHECK_OBJECT( par_errwrite );
            tmp_args_element_name_35 = par_errwrite;
            frame_f8a56ca7f4381c06bb242e27d9cd6c68->m_frame.f_lineno = 1466;
            {
                PyObject *call_args[] = { tmp_args_element_name_35 };
                tmp_call_result_10 = CALL_METHOD_WITH_ARGS1( tmp_called_instance_16, const_str_plain_close, call_args );
            }

            if ( tmp_call_result_10 == NULL )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 1466;
                type_description_1 = "oocooooooooooooooooooooooooooooooooooooooo";
                goto try_except_handler_5;
            }
            Py_DECREF( tmp_call_result_10 );
        }
        branch_no_11:;
    }
    {
        nuitka_bool tmp_condition_result_13;
        PyObject *tmp_compexpr_left_14;
        PyObject *tmp_compexpr_right_14;
        CHECK_OBJECT( var_devnull_fd );
        tmp_compexpr_left_14 = var_devnull_fd;
        tmp_compexpr_right_14 = Py_None;
        tmp_condition_result_13 = ( tmp_compexpr_left_14 != tmp_compexpr_right_14 ) ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
        if ( tmp_condition_result_13 == NUITKA_BOOL_TRUE )
        {
            goto branch_yes_12;
        }
        else
        {
            goto branch_no_12;
        }
        branch_yes_12:;
        {
            PyObject *tmp_called_instance_17;
            PyObject *tmp_mvar_value_16;
            PyObject *tmp_call_result_11;
            PyObject *tmp_args_element_name_36;
            tmp_mvar_value_16 = GET_STRING_DICT_VALUE( moduledict_subprocess, (Nuitka_StringObject *)const_str_plain_os );

            if (unlikely( tmp_mvar_value_16 == NULL ))
            {
                tmp_mvar_value_16 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_os );
            }

            if ( tmp_mvar_value_16 == NULL )
            {

                exception_type = PyExc_NameError;
                Py_INCREF( exception_type );
                exception_value = PyUnicode_FromFormat( "name '%s' is not defined", "os" );
                exception_tb = NULL;
                NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
                CHAIN_EXCEPTION( exception_value );

                exception_lineno = 1468;
                type_description_1 = "oocooooooooooooooooooooooooooooooooooooooo";
                goto try_except_handler_5;
            }

            tmp_called_instance_17 = tmp_mvar_value_16;
            CHECK_OBJECT( var_devnull_fd );
            tmp_args_element_name_36 = var_devnull_fd;
            frame_f8a56ca7f4381c06bb242e27d9cd6c68->m_frame.f_lineno = 1468;
            {
                PyObject *call_args[] = { tmp_args_element_name_36 };
                tmp_call_result_11 = CALL_METHOD_WITH_ARGS1( tmp_called_instance_17, const_str_plain_close, call_args );
            }

            if ( tmp_call_result_11 == NULL )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 1468;
                type_description_1 = "oocooooooooooooooooooooooooooooooooooooooo";
                goto try_except_handler_5;
            }
            Py_DECREF( tmp_call_result_11 );
        }
        branch_no_12:;
    }
    {
        PyObject *tmp_assattr_name_3;
        PyObject *tmp_assattr_target_3;
        tmp_assattr_name_3 = Py_True;
        CHECK_OBJECT( par_self );
        tmp_assattr_target_3 = par_self;
        tmp_result = SET_ATTRIBUTE( tmp_assattr_target_3, const_str_plain__closed_child_pipe_fds, tmp_assattr_name_3 );
        if ( tmp_result == false )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 1470;
            type_description_1 = "oocooooooooooooooooooooooooooooooooooooooo";
            goto try_except_handler_5;
        }
    }
    {
        PyObject *tmp_assign_source_33;
        tmp_assign_source_33 = BYTEARRAY_COPY( const_bytearray_72cdf64f605ef12d57287fc4b61c2b5e );
        assert( var_errpipe_data == NULL );
        var_errpipe_data = tmp_assign_source_33;
    }
    loop_start_4:;
    {
        PyObject *tmp_assign_source_34;
        PyObject *tmp_called_instance_18;
        PyObject *tmp_mvar_value_17;
        PyObject *tmp_args_element_name_37;
        PyObject *tmp_args_element_name_38;
        tmp_mvar_value_17 = GET_STRING_DICT_VALUE( moduledict_subprocess, (Nuitka_StringObject *)const_str_plain_os );

        if (unlikely( tmp_mvar_value_17 == NULL ))
        {
            tmp_mvar_value_17 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_os );
        }

        if ( tmp_mvar_value_17 == NULL )
        {

            exception_type = PyExc_NameError;
            Py_INCREF( exception_type );
            exception_value = PyUnicode_FromFormat( "name '%s' is not defined", "os" );
            exception_tb = NULL;
            NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
            CHAIN_EXCEPTION( exception_value );

            exception_lineno = 1476;
            type_description_1 = "oocooooooooooooooooooooooooooooooooooooooo";
            goto try_except_handler_5;
        }

        tmp_called_instance_18 = tmp_mvar_value_17;
        CHECK_OBJECT( var_errpipe_read );
        tmp_args_element_name_37 = var_errpipe_read;
        tmp_args_element_name_38 = const_int_pos_50000;
        frame_f8a56ca7f4381c06bb242e27d9cd6c68->m_frame.f_lineno = 1476;
        {
            PyObject *call_args[] = { tmp_args_element_name_37, tmp_args_element_name_38 };
            tmp_assign_source_34 = CALL_METHOD_WITH_ARGS2( tmp_called_instance_18, const_str_plain_read, call_args );
        }

        if ( tmp_assign_source_34 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 1476;
            type_description_1 = "oocooooooooooooooooooooooooooooooooooooooo";
            goto try_except_handler_5;
        }
        {
            PyObject *old = var_part;
            var_part = tmp_assign_source_34;
            Py_XDECREF( old );
        }

    }
    {
        PyObject *tmp_assign_source_35;
        PyObject *tmp_left_name_4;
        PyObject *tmp_right_name_4;
        CHECK_OBJECT( var_errpipe_data );
        tmp_left_name_4 = var_errpipe_data;
        CHECK_OBJECT( var_part );
        tmp_right_name_4 = var_part;
        tmp_result = BINARY_OPERATION_ADD_OBJECT_OBJECT_INPLACE( &tmp_left_name_4, tmp_right_name_4 );
        if ( tmp_result == false )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 1477;
            type_description_1 = "oocooooooooooooooooooooooooooooooooooooooo";
            goto try_except_handler_5;
        }
        tmp_assign_source_35 = tmp_left_name_4;
        var_errpipe_data = tmp_assign_source_35;

    }
    {
        nuitka_bool tmp_condition_result_14;
        int tmp_or_left_truth_1;
        nuitka_bool tmp_or_left_value_1;
        nuitka_bool tmp_or_right_value_1;
        PyObject *tmp_operand_name_2;
        PyObject *tmp_compexpr_left_15;
        PyObject *tmp_compexpr_right_15;
        PyObject *tmp_len_arg_1;
        CHECK_OBJECT( var_part );
        tmp_operand_name_2 = var_part;
        tmp_res = CHECK_IF_TRUE( tmp_operand_name_2 );
        if ( tmp_res == -1 )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 1478;
            type_description_1 = "oocooooooooooooooooooooooooooooooooooooooo";
            goto try_except_handler_5;
        }
        tmp_or_left_value_1 = ( tmp_res == 0 ) ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
        tmp_or_left_truth_1 = tmp_or_left_value_1 == NUITKA_BOOL_TRUE ? 1 : 0;
        if ( tmp_or_left_truth_1 == 1 )
        {
            goto or_left_1;
        }
        else
        {
            goto or_right_1;
        }
        or_right_1:;
        CHECK_OBJECT( var_errpipe_data );
        tmp_len_arg_1 = var_errpipe_data;
        tmp_compexpr_left_15 = BUILTIN_LEN( tmp_len_arg_1 );
        if ( tmp_compexpr_left_15 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 1478;
            type_description_1 = "oocooooooooooooooooooooooooooooooooooooooo";
            goto try_except_handler_5;
        }
        tmp_compexpr_right_15 = const_int_pos_50000;
        tmp_res = RICH_COMPARE_BOOL_GT_OBJECT_OBJECT( tmp_compexpr_left_15, tmp_compexpr_right_15 );
        Py_DECREF( tmp_compexpr_left_15 );
        assert( !(tmp_res == -1) );
        tmp_or_right_value_1 = ( tmp_res != 0 ) ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
        tmp_condition_result_14 = tmp_or_right_value_1;
        goto or_end_1;
        or_left_1:;
        tmp_condition_result_14 = tmp_or_left_value_1;
        or_end_1:;
        if ( tmp_condition_result_14 == NUITKA_BOOL_TRUE )
        {
            goto branch_yes_13;
        }
        else
        {
            goto branch_no_13;
        }
        branch_yes_13:;
        goto loop_end_4;
        branch_no_13:;
    }
    if ( CONSIDER_THREADING() == false )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 1475;
        type_description_1 = "oocooooooooooooooooooooooooooooooooooooooo";
        goto try_except_handler_5;
    }
    goto loop_start_4;
    loop_end_4:;
    goto try_end_8;
    // Exception handler code:
    try_except_handler_5:;
    exception_keeper_type_9 = exception_type;
    exception_keeper_value_9 = exception_value;
    exception_keeper_tb_9 = exception_tb;
    exception_keeper_lineno_9 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    // Preserve existing published exception.
    exception_preserved_type_2 = EXC_TYPE(PyThreadState_GET());
    Py_XINCREF( exception_preserved_type_2 );
    exception_preserved_value_2 = EXC_VALUE(PyThreadState_GET());
    Py_XINCREF( exception_preserved_value_2 );
    exception_preserved_tb_2 = (PyTracebackObject *)EXC_TRACEBACK(PyThreadState_GET());
    Py_XINCREF( exception_preserved_tb_2 );

    if ( exception_keeper_tb_9 == NULL )
    {
        exception_keeper_tb_9 = MAKE_TRACEBACK( frame_f8a56ca7f4381c06bb242e27d9cd6c68, exception_keeper_lineno_9 );
    }
    else if ( exception_keeper_lineno_9 != 0 )
    {
        exception_keeper_tb_9 = ADD_TRACEBACK( exception_keeper_tb_9, frame_f8a56ca7f4381c06bb242e27d9cd6c68, exception_keeper_lineno_9 );
    }

    NORMALIZE_EXCEPTION( &exception_keeper_type_9, &exception_keeper_value_9, &exception_keeper_tb_9 );
    PyException_SetTraceback( exception_keeper_value_9, (PyObject *)exception_keeper_tb_9 );
    PUBLISH_EXCEPTION( &exception_keeper_type_9, &exception_keeper_value_9, &exception_keeper_tb_9 );
    // Tried code:
    {
        PyObject *tmp_called_instance_19;
        PyObject *tmp_mvar_value_18;
        PyObject *tmp_call_result_12;
        PyObject *tmp_args_element_name_39;
        tmp_mvar_value_18 = GET_STRING_DICT_VALUE( moduledict_subprocess, (Nuitka_StringObject *)const_str_plain_os );

        if (unlikely( tmp_mvar_value_18 == NULL ))
        {
            tmp_mvar_value_18 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_os );
        }

        if ( tmp_mvar_value_18 == NULL )
        {

            exception_type = PyExc_NameError;
            Py_INCREF( exception_type );
            exception_value = PyUnicode_FromFormat( "name '%s' is not defined", "os" );
            exception_tb = NULL;
            NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
            CHAIN_EXCEPTION( exception_value );

            exception_lineno = 1482;
            type_description_1 = "oocooooooooooooooooooooooooooooooooooooooo";
            goto try_except_handler_12;
        }

        tmp_called_instance_19 = tmp_mvar_value_18;
        CHECK_OBJECT( var_errpipe_read );
        tmp_args_element_name_39 = var_errpipe_read;
        frame_f8a56ca7f4381c06bb242e27d9cd6c68->m_frame.f_lineno = 1482;
        {
            PyObject *call_args[] = { tmp_args_element_name_39 };
            tmp_call_result_12 = CALL_METHOD_WITH_ARGS1( tmp_called_instance_19, const_str_plain_close, call_args );
        }

        if ( tmp_call_result_12 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 1482;
            type_description_1 = "oocooooooooooooooooooooooooooooooooooooooo";
            goto try_except_handler_12;
        }
        Py_DECREF( tmp_call_result_12 );
    }
    tmp_result = RERAISE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
    if (unlikely( tmp_result == false ))
    {
        exception_lineno = 1420;
    }

    if (exception_tb && exception_tb->tb_frame == &frame_f8a56ca7f4381c06bb242e27d9cd6c68->m_frame) frame_f8a56ca7f4381c06bb242e27d9cd6c68->m_frame.f_lineno = exception_tb->tb_lineno;
    type_description_1 = "oocooooooooooooooooooooooooooooooooooooooo";
    goto try_except_handler_12;
    // tried codes exits in all cases
    NUITKA_CANNOT_GET_HERE( subprocess$$$function_52__execute_child );
    return NULL;
    // Exception handler code:
    try_except_handler_12:;
    exception_keeper_type_10 = exception_type;
    exception_keeper_value_10 = exception_value;
    exception_keeper_tb_10 = exception_tb;
    exception_keeper_lineno_10 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    // Restore previous exception.
    SET_CURRENT_EXCEPTION( exception_preserved_type_2, exception_preserved_value_2, exception_preserved_tb_2 );
    // Re-raise.
    exception_type = exception_keeper_type_10;
    exception_value = exception_keeper_value_10;
    exception_tb = exception_keeper_tb_10;
    exception_lineno = exception_keeper_lineno_10;

    goto frame_exception_exit_1;
    // End of try:
    // End of try:
    try_end_8:;
    {
        PyObject *tmp_called_instance_20;
        PyObject *tmp_mvar_value_19;
        PyObject *tmp_call_result_13;
        PyObject *tmp_args_element_name_40;
        tmp_mvar_value_19 = GET_STRING_DICT_VALUE( moduledict_subprocess, (Nuitka_StringObject *)const_str_plain_os );

        if (unlikely( tmp_mvar_value_19 == NULL ))
        {
            tmp_mvar_value_19 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_os );
        }

        if ( tmp_mvar_value_19 == NULL )
        {

            exception_type = PyExc_NameError;
            Py_INCREF( exception_type );
            exception_value = PyUnicode_FromFormat( "name '%s' is not defined", "os" );
            exception_tb = NULL;
            NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
            CHAIN_EXCEPTION( exception_value );

            exception_lineno = 1482;
            type_description_1 = "oocooooooooooooooooooooooooooooooooooooooo";
            goto frame_exception_exit_1;
        }

        tmp_called_instance_20 = tmp_mvar_value_19;
        CHECK_OBJECT( var_errpipe_read );
        tmp_args_element_name_40 = var_errpipe_read;
        frame_f8a56ca7f4381c06bb242e27d9cd6c68->m_frame.f_lineno = 1482;
        {
            PyObject *call_args[] = { tmp_args_element_name_40 };
            tmp_call_result_13 = CALL_METHOD_WITH_ARGS1( tmp_called_instance_20, const_str_plain_close, call_args );
        }

        if ( tmp_call_result_13 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 1482;
            type_description_1 = "oocooooooooooooooooooooooooooooooooooooooo";
            goto frame_exception_exit_1;
        }
        Py_DECREF( tmp_call_result_13 );
    }
    {
        nuitka_bool tmp_condition_result_15;
        int tmp_truth_name_4;
        CHECK_OBJECT( var_errpipe_data );
        tmp_truth_name_4 = CHECK_IF_TRUE( var_errpipe_data );
        if ( tmp_truth_name_4 == -1 )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 1484;
            type_description_1 = "oocooooooooooooooooooooooooooooooooooooooo";
            goto frame_exception_exit_1;
        }
        tmp_condition_result_15 = tmp_truth_name_4 == 1 ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
        if ( tmp_condition_result_15 == NUITKA_BOOL_TRUE )
        {
            goto branch_yes_14;
        }
        else
        {
            goto branch_no_14;
        }
        branch_yes_14:;
        // Tried code:
        // Tried code:
        {
            PyObject *tmp_assign_source_36;
            PyObject *tmp_iter_arg_6;
            PyObject *tmp_called_name_5;
            PyObject *tmp_source_name_5;
            PyObject *tmp_mvar_value_20;
            PyObject *tmp_args_element_name_41;
            PyObject *tmp_source_name_6;
            PyObject *tmp_args_element_name_42;
            tmp_mvar_value_20 = GET_STRING_DICT_VALUE( moduledict_subprocess, (Nuitka_StringObject *)const_str_plain_os );

            if (unlikely( tmp_mvar_value_20 == NULL ))
            {
                tmp_mvar_value_20 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_os );
            }

            if ( tmp_mvar_value_20 == NULL )
            {

                exception_type = PyExc_NameError;
                Py_INCREF( exception_type );
                exception_value = PyUnicode_FromFormat( "name '%s' is not defined", "os" );
                exception_tb = NULL;
                NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
                CHAIN_EXCEPTION( exception_value );

                exception_lineno = 1486;
                type_description_1 = "oocooooooooooooooooooooooooooooooooooooooo";
                goto try_except_handler_14;
            }

            tmp_source_name_5 = tmp_mvar_value_20;
            tmp_called_name_5 = LOOKUP_ATTRIBUTE( tmp_source_name_5, const_str_plain_waitpid );
            if ( tmp_called_name_5 == NULL )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 1486;
                type_description_1 = "oocooooooooooooooooooooooooooooooooooooooo";
                goto try_except_handler_14;
            }
            CHECK_OBJECT( par_self );
            tmp_source_name_6 = par_self;
            tmp_args_element_name_41 = LOOKUP_ATTRIBUTE( tmp_source_name_6, const_str_plain_pid );
            if ( tmp_args_element_name_41 == NULL )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
                Py_DECREF( tmp_called_name_5 );

                exception_lineno = 1486;
                type_description_1 = "oocooooooooooooooooooooooooooooooooooooooo";
                goto try_except_handler_14;
            }
            tmp_args_element_name_42 = const_int_0;
            frame_f8a56ca7f4381c06bb242e27d9cd6c68->m_frame.f_lineno = 1486;
            {
                PyObject *call_args[] = { tmp_args_element_name_41, tmp_args_element_name_42 };
                tmp_iter_arg_6 = CALL_FUNCTION_WITH_ARGS2( tmp_called_name_5, call_args );
            }

            Py_DECREF( tmp_called_name_5 );
            Py_DECREF( tmp_args_element_name_41 );
            if ( tmp_iter_arg_6 == NULL )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 1486;
                type_description_1 = "oocooooooooooooooooooooooooooooooooooooooo";
                goto try_except_handler_14;
            }
            tmp_assign_source_36 = MAKE_UNPACK_ITERATOR( tmp_iter_arg_6 );
            Py_DECREF( tmp_iter_arg_6 );
            if ( tmp_assign_source_36 == NULL )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 1486;
                type_description_1 = "oocooooooooooooooooooooooooooooooooooooooo";
                goto try_except_handler_14;
            }
            assert( tmp_tuple_unpack_3__source_iter == NULL );
            tmp_tuple_unpack_3__source_iter = tmp_assign_source_36;
        }
        // Tried code:
        {
            PyObject *tmp_assign_source_37;
            PyObject *tmp_unpack_5;
            CHECK_OBJECT( tmp_tuple_unpack_3__source_iter );
            tmp_unpack_5 = tmp_tuple_unpack_3__source_iter;
            tmp_assign_source_37 = UNPACK_NEXT( tmp_unpack_5, 0, 2 );
            if ( tmp_assign_source_37 == NULL )
            {
                if ( !ERROR_OCCURRED() )
                {
                    exception_type = PyExc_StopIteration;
                    Py_INCREF( exception_type );
                    exception_value = NULL;
                    exception_tb = NULL;
                }
                else
                {
                    FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
                }


                type_description_1 = "oocooooooooooooooooooooooooooooooooooooooo";
                exception_lineno = 1486;
                goto try_except_handler_15;
            }
            assert( tmp_tuple_unpack_3__element_1 == NULL );
            tmp_tuple_unpack_3__element_1 = tmp_assign_source_37;
        }
        {
            PyObject *tmp_assign_source_38;
            PyObject *tmp_unpack_6;
            CHECK_OBJECT( tmp_tuple_unpack_3__source_iter );
            tmp_unpack_6 = tmp_tuple_unpack_3__source_iter;
            tmp_assign_source_38 = UNPACK_NEXT( tmp_unpack_6, 1, 2 );
            if ( tmp_assign_source_38 == NULL )
            {
                if ( !ERROR_OCCURRED() )
                {
                    exception_type = PyExc_StopIteration;
                    Py_INCREF( exception_type );
                    exception_value = NULL;
                    exception_tb = NULL;
                }
                else
                {
                    FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
                }


                type_description_1 = "oocooooooooooooooooooooooooooooooooooooooo";
                exception_lineno = 1486;
                goto try_except_handler_15;
            }
            assert( tmp_tuple_unpack_3__element_2 == NULL );
            tmp_tuple_unpack_3__element_2 = tmp_assign_source_38;
        }
        {
            PyObject *tmp_iterator_name_3;
            CHECK_OBJECT( tmp_tuple_unpack_3__source_iter );
            tmp_iterator_name_3 = tmp_tuple_unpack_3__source_iter;
            // Check if iterator has left-over elements.
            CHECK_OBJECT( tmp_iterator_name_3 ); assert( HAS_ITERNEXT( tmp_iterator_name_3 ) );

            tmp_iterator_attempt = (*Py_TYPE( tmp_iterator_name_3 )->tp_iternext)( tmp_iterator_name_3 );

            if (likely( tmp_iterator_attempt == NULL ))
            {
                PyObject *error = GET_ERROR_OCCURRED();

                if ( error != NULL )
                {
                    if ( EXCEPTION_MATCH_BOOL_SINGLE( error, PyExc_StopIteration ))
                    {
                        CLEAR_ERROR_OCCURRED();
                    }
                    else
                    {
                        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );

                        type_description_1 = "oocooooooooooooooooooooooooooooooooooooooo";
                        exception_lineno = 1486;
                        goto try_except_handler_15;
                    }
                }
            }
            else
            {
                Py_DECREF( tmp_iterator_attempt );

                // TODO: Could avoid PyErr_Format.
#if PYTHON_VERSION < 300
                PyErr_Format( PyExc_ValueError, "too many values to unpack" );
#else
                PyErr_Format( PyExc_ValueError, "too many values to unpack (expected 2)" );
#endif
                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );

                type_description_1 = "oocooooooooooooooooooooooooooooooooooooooo";
                exception_lineno = 1486;
                goto try_except_handler_15;
            }
        }
        goto try_end_9;
        // Exception handler code:
        try_except_handler_15:;
        exception_keeper_type_11 = exception_type;
        exception_keeper_value_11 = exception_value;
        exception_keeper_tb_11 = exception_tb;
        exception_keeper_lineno_11 = exception_lineno;
        exception_type = NULL;
        exception_value = NULL;
        exception_tb = NULL;
        exception_lineno = 0;

        CHECK_OBJECT( (PyObject *)tmp_tuple_unpack_3__source_iter );
        Py_DECREF( tmp_tuple_unpack_3__source_iter );
        tmp_tuple_unpack_3__source_iter = NULL;

        // Re-raise.
        exception_type = exception_keeper_type_11;
        exception_value = exception_keeper_value_11;
        exception_tb = exception_keeper_tb_11;
        exception_lineno = exception_keeper_lineno_11;

        goto try_except_handler_14;
        // End of try:
        try_end_9:;
        goto try_end_10;
        // Exception handler code:
        try_except_handler_14:;
        exception_keeper_type_12 = exception_type;
        exception_keeper_value_12 = exception_value;
        exception_keeper_tb_12 = exception_tb;
        exception_keeper_lineno_12 = exception_lineno;
        exception_type = NULL;
        exception_value = NULL;
        exception_tb = NULL;
        exception_lineno = 0;

        Py_XDECREF( tmp_tuple_unpack_3__element_1 );
        tmp_tuple_unpack_3__element_1 = NULL;

        Py_XDECREF( tmp_tuple_unpack_3__element_2 );
        tmp_tuple_unpack_3__element_2 = NULL;

        // Re-raise.
        exception_type = exception_keeper_type_12;
        exception_value = exception_keeper_value_12;
        exception_tb = exception_keeper_tb_12;
        exception_lineno = exception_keeper_lineno_12;

        goto try_except_handler_13;
        // End of try:
        try_end_10:;
        CHECK_OBJECT( (PyObject *)tmp_tuple_unpack_3__source_iter );
        Py_DECREF( tmp_tuple_unpack_3__source_iter );
        tmp_tuple_unpack_3__source_iter = NULL;

        {
            PyObject *tmp_assign_source_39;
            CHECK_OBJECT( tmp_tuple_unpack_3__element_1 );
            tmp_assign_source_39 = tmp_tuple_unpack_3__element_1;
            assert( var_pid == NULL );
            Py_INCREF( tmp_assign_source_39 );
            var_pid = tmp_assign_source_39;
        }
        Py_XDECREF( tmp_tuple_unpack_3__element_1 );
        tmp_tuple_unpack_3__element_1 = NULL;

        {
            PyObject *tmp_assign_source_40;
            CHECK_OBJECT( tmp_tuple_unpack_3__element_2 );
            tmp_assign_source_40 = tmp_tuple_unpack_3__element_2;
            assert( var_sts == NULL );
            Py_INCREF( tmp_assign_source_40 );
            var_sts = tmp_assign_source_40;
        }
        Py_XDECREF( tmp_tuple_unpack_3__element_2 );
        tmp_tuple_unpack_3__element_2 = NULL;

        {
            nuitka_bool tmp_condition_result_16;
            PyObject *tmp_compexpr_left_16;
            PyObject *tmp_compexpr_right_16;
            PyObject *tmp_source_name_7;
            CHECK_OBJECT( var_pid );
            tmp_compexpr_left_16 = var_pid;
            CHECK_OBJECT( par_self );
            tmp_source_name_7 = par_self;
            tmp_compexpr_right_16 = LOOKUP_ATTRIBUTE( tmp_source_name_7, const_str_plain_pid );
            if ( tmp_compexpr_right_16 == NULL )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 1487;
                type_description_1 = "oocooooooooooooooooooooooooooooooooooooooo";
                goto try_except_handler_13;
            }
            tmp_res = RICH_COMPARE_BOOL_EQ_OBJECT_OBJECT( tmp_compexpr_left_16, tmp_compexpr_right_16 );
            Py_DECREF( tmp_compexpr_right_16 );
            if ( tmp_res == -1 )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 1487;
                type_description_1 = "oocooooooooooooooooooooooooooooooooooooooo";
                goto try_except_handler_13;
            }
            tmp_condition_result_16 = ( tmp_res != 0 ) ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
            if ( tmp_condition_result_16 == NUITKA_BOOL_TRUE )
            {
                goto branch_yes_15;
            }
            else
            {
                goto branch_no_15;
            }
            branch_yes_15:;
            {
                PyObject *tmp_called_instance_21;
                PyObject *tmp_call_result_14;
                PyObject *tmp_args_element_name_43;
                CHECK_OBJECT( par_self );
                tmp_called_instance_21 = par_self;
                CHECK_OBJECT( var_sts );
                tmp_args_element_name_43 = var_sts;
                frame_f8a56ca7f4381c06bb242e27d9cd6c68->m_frame.f_lineno = 1488;
                {
                    PyObject *call_args[] = { tmp_args_element_name_43 };
                    tmp_call_result_14 = CALL_METHOD_WITH_ARGS1( tmp_called_instance_21, const_str_plain__handle_exitstatus, call_args );
                }

                if ( tmp_call_result_14 == NULL )
                {
                    assert( ERROR_OCCURRED() );

                    FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                    exception_lineno = 1488;
                    type_description_1 = "oocooooooooooooooooooooooooooooooooooooooo";
                    goto try_except_handler_13;
                }
                Py_DECREF( tmp_call_result_14 );
            }
            goto branch_end_15;
            branch_no_15:;
            {
                PyObject *tmp_assattr_name_4;
                PyObject *tmp_source_name_8;
                PyObject *tmp_mvar_value_21;
                PyObject *tmp_assattr_target_4;
                tmp_mvar_value_21 = GET_STRING_DICT_VALUE( moduledict_subprocess, (Nuitka_StringObject *)const_str_plain_sys );

                if (unlikely( tmp_mvar_value_21 == NULL ))
                {
                    tmp_mvar_value_21 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_sys );
                }

                if ( tmp_mvar_value_21 == NULL )
                {

                    exception_type = PyExc_NameError;
                    Py_INCREF( exception_type );
                    exception_value = PyUnicode_FromFormat( "name '%s' is not defined", "sys" );
                    exception_tb = NULL;
                    NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
                    CHAIN_EXCEPTION( exception_value );

                    exception_lineno = 1490;
                    type_description_1 = "oocooooooooooooooooooooooooooooooooooooooo";
                    goto try_except_handler_13;
                }

                tmp_source_name_8 = tmp_mvar_value_21;
                tmp_assattr_name_4 = LOOKUP_ATTRIBUTE( tmp_source_name_8, const_str_plain_maxsize );
                if ( tmp_assattr_name_4 == NULL )
                {
                    assert( ERROR_OCCURRED() );

                    FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                    exception_lineno = 1490;
                    type_description_1 = "oocooooooooooooooooooooooooooooooooooooooo";
                    goto try_except_handler_13;
                }
                CHECK_OBJECT( par_self );
                tmp_assattr_target_4 = par_self;
                tmp_result = SET_ATTRIBUTE( tmp_assattr_target_4, const_str_plain_returncode, tmp_assattr_name_4 );
                Py_DECREF( tmp_assattr_name_4 );
                if ( tmp_result == false )
                {
                    assert( ERROR_OCCURRED() );

                    FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                    exception_lineno = 1490;
                    type_description_1 = "oocooooooooooooooooooooooooooooooooooooooo";
                    goto try_except_handler_13;
                }
            }
            branch_end_15:;
        }
        goto try_end_11;
        // Exception handler code:
        try_except_handler_13:;
        exception_keeper_type_13 = exception_type;
        exception_keeper_value_13 = exception_value;
        exception_keeper_tb_13 = exception_tb;
        exception_keeper_lineno_13 = exception_lineno;
        exception_type = NULL;
        exception_value = NULL;
        exception_tb = NULL;
        exception_lineno = 0;

        // Preserve existing published exception.
        exception_preserved_type_3 = EXC_TYPE(PyThreadState_GET());
        Py_XINCREF( exception_preserved_type_3 );
        exception_preserved_value_3 = EXC_VALUE(PyThreadState_GET());
        Py_XINCREF( exception_preserved_value_3 );
        exception_preserved_tb_3 = (PyTracebackObject *)EXC_TRACEBACK(PyThreadState_GET());
        Py_XINCREF( exception_preserved_tb_3 );

        if ( exception_keeper_tb_13 == NULL )
        {
            exception_keeper_tb_13 = MAKE_TRACEBACK( frame_f8a56ca7f4381c06bb242e27d9cd6c68, exception_keeper_lineno_13 );
        }
        else if ( exception_keeper_lineno_13 != 0 )
        {
            exception_keeper_tb_13 = ADD_TRACEBACK( exception_keeper_tb_13, frame_f8a56ca7f4381c06bb242e27d9cd6c68, exception_keeper_lineno_13 );
        }

        NORMALIZE_EXCEPTION( &exception_keeper_type_13, &exception_keeper_value_13, &exception_keeper_tb_13 );
        PyException_SetTraceback( exception_keeper_value_13, (PyObject *)exception_keeper_tb_13 );
        PUBLISH_EXCEPTION( &exception_keeper_type_13, &exception_keeper_value_13, &exception_keeper_tb_13 );
        // Tried code:
        {
            nuitka_bool tmp_condition_result_17;
            PyObject *tmp_operand_name_3;
            PyObject *tmp_compexpr_left_17;
            PyObject *tmp_compexpr_right_17;
            tmp_compexpr_left_17 = EXC_TYPE(PyThreadState_GET());
            tmp_compexpr_right_17 = PyExc_ChildProcessError;
            tmp_res = EXCEPTION_MATCH_BOOL( tmp_compexpr_left_17, tmp_compexpr_right_17 );
            if ( tmp_res == -1 )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 1491;
                type_description_1 = "oocooooooooooooooooooooooooooooooooooooooo";
                goto try_except_handler_16;
            }
            tmp_operand_name_3 = ( tmp_res != 0 ) ? Py_True : Py_False;
            tmp_res = CHECK_IF_TRUE( tmp_operand_name_3 );
            if ( tmp_res == -1 )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 1491;
                type_description_1 = "oocooooooooooooooooooooooooooooooooooooooo";
                goto try_except_handler_16;
            }
            tmp_condition_result_17 = ( tmp_res == 0 ) ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
            if ( tmp_condition_result_17 == NUITKA_BOOL_TRUE )
            {
                goto branch_yes_16;
            }
            else
            {
                goto branch_no_16;
            }
            branch_yes_16:;
            tmp_result = RERAISE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
            if (unlikely( tmp_result == false ))
            {
                exception_lineno = 1485;
            }

            if (exception_tb && exception_tb->tb_frame == &frame_f8a56ca7f4381c06bb242e27d9cd6c68->m_frame) frame_f8a56ca7f4381c06bb242e27d9cd6c68->m_frame.f_lineno = exception_tb->tb_lineno;
            type_description_1 = "oocooooooooooooooooooooooooooooooooooooooo";
            goto try_except_handler_16;
            branch_no_16:;
        }
        goto try_end_12;
        // Exception handler code:
        try_except_handler_16:;
        exception_keeper_type_14 = exception_type;
        exception_keeper_value_14 = exception_value;
        exception_keeper_tb_14 = exception_tb;
        exception_keeper_lineno_14 = exception_lineno;
        exception_type = NULL;
        exception_value = NULL;
        exception_tb = NULL;
        exception_lineno = 0;

        // Restore previous exception.
        SET_CURRENT_EXCEPTION( exception_preserved_type_3, exception_preserved_value_3, exception_preserved_tb_3 );
        // Re-raise.
        exception_type = exception_keeper_type_14;
        exception_value = exception_keeper_value_14;
        exception_tb = exception_keeper_tb_14;
        exception_lineno = exception_keeper_lineno_14;

        goto frame_exception_exit_1;
        // End of try:
        try_end_12:;
        // Restore previous exception.
        SET_CURRENT_EXCEPTION( exception_preserved_type_3, exception_preserved_value_3, exception_preserved_tb_3 );
        goto try_end_11;
        // exception handler codes exits in all cases
        NUITKA_CANNOT_GET_HERE( subprocess$$$function_52__execute_child );
        return NULL;
        // End of try:
        try_end_11:;
        // Tried code:
        // Tried code:
        {
            PyObject *tmp_assign_source_41;
            PyObject *tmp_iter_arg_7;
            PyObject *tmp_called_instance_22;
            CHECK_OBJECT( var_errpipe_data );
            tmp_called_instance_22 = var_errpipe_data;
            frame_f8a56ca7f4381c06bb242e27d9cd6c68->m_frame.f_lineno = 1496;
            tmp_iter_arg_7 = CALL_METHOD_WITH_ARGS2( tmp_called_instance_22, const_str_plain_split, &PyTuple_GET_ITEM( const_tuple_bytes_chr_58_int_pos_2_tuple, 0 ) );

            if ( tmp_iter_arg_7 == NULL )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 1496;
                type_description_1 = "oocooooooooooooooooooooooooooooooooooooooo";
                goto try_except_handler_18;
            }
            tmp_assign_source_41 = MAKE_UNPACK_ITERATOR( tmp_iter_arg_7 );
            Py_DECREF( tmp_iter_arg_7 );
            if ( tmp_assign_source_41 == NULL )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 1495;
                type_description_1 = "oocooooooooooooooooooooooooooooooooooooooo";
                goto try_except_handler_18;
            }
            assert( tmp_tuple_unpack_4__source_iter == NULL );
            tmp_tuple_unpack_4__source_iter = tmp_assign_source_41;
        }
        // Tried code:
        {
            PyObject *tmp_assign_source_42;
            PyObject *tmp_unpack_7;
            CHECK_OBJECT( tmp_tuple_unpack_4__source_iter );
            tmp_unpack_7 = tmp_tuple_unpack_4__source_iter;
            tmp_assign_source_42 = UNPACK_NEXT( tmp_unpack_7, 0, 3 );
            if ( tmp_assign_source_42 == NULL )
            {
                if ( !ERROR_OCCURRED() )
                {
                    exception_type = PyExc_StopIteration;
                    Py_INCREF( exception_type );
                    exception_value = NULL;
                    exception_tb = NULL;
                }
                else
                {
                    FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
                }


                type_description_1 = "oocooooooooooooooooooooooooooooooooooooooo";
                exception_lineno = 1495;
                goto try_except_handler_19;
            }
            assert( tmp_tuple_unpack_4__element_1 == NULL );
            tmp_tuple_unpack_4__element_1 = tmp_assign_source_42;
        }
        {
            PyObject *tmp_assign_source_43;
            PyObject *tmp_unpack_8;
            CHECK_OBJECT( tmp_tuple_unpack_4__source_iter );
            tmp_unpack_8 = tmp_tuple_unpack_4__source_iter;
            tmp_assign_source_43 = UNPACK_NEXT( tmp_unpack_8, 1, 3 );
            if ( tmp_assign_source_43 == NULL )
            {
                if ( !ERROR_OCCURRED() )
                {
                    exception_type = PyExc_StopIteration;
                    Py_INCREF( exception_type );
                    exception_value = NULL;
                    exception_tb = NULL;
                }
                else
                {
                    FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
                }


                type_description_1 = "oocooooooooooooooooooooooooooooooooooooooo";
                exception_lineno = 1495;
                goto try_except_handler_19;
            }
            assert( tmp_tuple_unpack_4__element_2 == NULL );
            tmp_tuple_unpack_4__element_2 = tmp_assign_source_43;
        }
        {
            PyObject *tmp_assign_source_44;
            PyObject *tmp_unpack_9;
            CHECK_OBJECT( tmp_tuple_unpack_4__source_iter );
            tmp_unpack_9 = tmp_tuple_unpack_4__source_iter;
            tmp_assign_source_44 = UNPACK_NEXT( tmp_unpack_9, 2, 3 );
            if ( tmp_assign_source_44 == NULL )
            {
                if ( !ERROR_OCCURRED() )
                {
                    exception_type = PyExc_StopIteration;
                    Py_INCREF( exception_type );
                    exception_value = NULL;
                    exception_tb = NULL;
                }
                else
                {
                    FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
                }


                type_description_1 = "oocooooooooooooooooooooooooooooooooooooooo";
                exception_lineno = 1495;
                goto try_except_handler_19;
            }
            assert( tmp_tuple_unpack_4__element_3 == NULL );
            tmp_tuple_unpack_4__element_3 = tmp_assign_source_44;
        }
        {
            PyObject *tmp_iterator_name_4;
            CHECK_OBJECT( tmp_tuple_unpack_4__source_iter );
            tmp_iterator_name_4 = tmp_tuple_unpack_4__source_iter;
            // Check if iterator has left-over elements.
            CHECK_OBJECT( tmp_iterator_name_4 ); assert( HAS_ITERNEXT( tmp_iterator_name_4 ) );

            tmp_iterator_attempt = (*Py_TYPE( tmp_iterator_name_4 )->tp_iternext)( tmp_iterator_name_4 );

            if (likely( tmp_iterator_attempt == NULL ))
            {
                PyObject *error = GET_ERROR_OCCURRED();

                if ( error != NULL )
                {
                    if ( EXCEPTION_MATCH_BOOL_SINGLE( error, PyExc_StopIteration ))
                    {
                        CLEAR_ERROR_OCCURRED();
                    }
                    else
                    {
                        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );

                        type_description_1 = "oocooooooooooooooooooooooooooooooooooooooo";
                        exception_lineno = 1495;
                        goto try_except_handler_19;
                    }
                }
            }
            else
            {
                Py_DECREF( tmp_iterator_attempt );

                // TODO: Could avoid PyErr_Format.
#if PYTHON_VERSION < 300
                PyErr_Format( PyExc_ValueError, "too many values to unpack" );
#else
                PyErr_Format( PyExc_ValueError, "too many values to unpack (expected 3)" );
#endif
                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );

                type_description_1 = "oocooooooooooooooooooooooooooooooooooooooo";
                exception_lineno = 1495;
                goto try_except_handler_19;
            }
        }
        goto try_end_13;
        // Exception handler code:
        try_except_handler_19:;
        exception_keeper_type_15 = exception_type;
        exception_keeper_value_15 = exception_value;
        exception_keeper_tb_15 = exception_tb;
        exception_keeper_lineno_15 = exception_lineno;
        exception_type = NULL;
        exception_value = NULL;
        exception_tb = NULL;
        exception_lineno = 0;

        CHECK_OBJECT( (PyObject *)tmp_tuple_unpack_4__source_iter );
        Py_DECREF( tmp_tuple_unpack_4__source_iter );
        tmp_tuple_unpack_4__source_iter = NULL;

        // Re-raise.
        exception_type = exception_keeper_type_15;
        exception_value = exception_keeper_value_15;
        exception_tb = exception_keeper_tb_15;
        exception_lineno = exception_keeper_lineno_15;

        goto try_except_handler_18;
        // End of try:
        try_end_13:;
        goto try_end_14;
        // Exception handler code:
        try_except_handler_18:;
        exception_keeper_type_16 = exception_type;
        exception_keeper_value_16 = exception_value;
        exception_keeper_tb_16 = exception_tb;
        exception_keeper_lineno_16 = exception_lineno;
        exception_type = NULL;
        exception_value = NULL;
        exception_tb = NULL;
        exception_lineno = 0;

        Py_XDECREF( tmp_tuple_unpack_4__element_1 );
        tmp_tuple_unpack_4__element_1 = NULL;

        Py_XDECREF( tmp_tuple_unpack_4__element_2 );
        tmp_tuple_unpack_4__element_2 = NULL;

        Py_XDECREF( tmp_tuple_unpack_4__element_3 );
        tmp_tuple_unpack_4__element_3 = NULL;

        // Re-raise.
        exception_type = exception_keeper_type_16;
        exception_value = exception_keeper_value_16;
        exception_tb = exception_keeper_tb_16;
        exception_lineno = exception_keeper_lineno_16;

        goto try_except_handler_17;
        // End of try:
        try_end_14:;
        CHECK_OBJECT( (PyObject *)tmp_tuple_unpack_4__source_iter );
        Py_DECREF( tmp_tuple_unpack_4__source_iter );
        tmp_tuple_unpack_4__source_iter = NULL;

        {
            PyObject *tmp_assign_source_45;
            CHECK_OBJECT( tmp_tuple_unpack_4__element_1 );
            tmp_assign_source_45 = tmp_tuple_unpack_4__element_1;
            assert( var_exception_name == NULL );
            Py_INCREF( tmp_assign_source_45 );
            var_exception_name = tmp_assign_source_45;
        }
        Py_XDECREF( tmp_tuple_unpack_4__element_1 );
        tmp_tuple_unpack_4__element_1 = NULL;

        {
            PyObject *tmp_assign_source_46;
            CHECK_OBJECT( tmp_tuple_unpack_4__element_2 );
            tmp_assign_source_46 = tmp_tuple_unpack_4__element_2;
            assert( var_hex_errno == NULL );
            Py_INCREF( tmp_assign_source_46 );
            var_hex_errno = tmp_assign_source_46;
        }
        Py_XDECREF( tmp_tuple_unpack_4__element_2 );
        tmp_tuple_unpack_4__element_2 = NULL;

        {
            PyObject *tmp_assign_source_47;
            CHECK_OBJECT( tmp_tuple_unpack_4__element_3 );
            tmp_assign_source_47 = tmp_tuple_unpack_4__element_3;
            assert( var_err_msg == NULL );
            Py_INCREF( tmp_assign_source_47 );
            var_err_msg = tmp_assign_source_47;
        }
        Py_XDECREF( tmp_tuple_unpack_4__element_3 );
        tmp_tuple_unpack_4__element_3 = NULL;

        {
            PyObject *tmp_assign_source_48;
            PyObject *tmp_called_instance_23;
            CHECK_OBJECT( var_err_msg );
            tmp_called_instance_23 = var_err_msg;
            frame_f8a56ca7f4381c06bb242e27d9cd6c68->m_frame.f_lineno = 1500;
            tmp_assign_source_48 = CALL_METHOD_NO_ARGS( tmp_called_instance_23, const_str_plain_decode );
            if ( tmp_assign_source_48 == NULL )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 1500;
                type_description_1 = "oocooooooooooooooooooooooooooooooooooooooo";
                goto try_except_handler_17;
            }
            {
                PyObject *old = var_err_msg;
                assert( old != NULL );
                var_err_msg = tmp_assign_source_48;
                Py_DECREF( old );
            }

        }
        goto try_end_15;
        // Exception handler code:
        try_except_handler_17:;
        exception_keeper_type_17 = exception_type;
        exception_keeper_value_17 = exception_value;
        exception_keeper_tb_17 = exception_tb;
        exception_keeper_lineno_17 = exception_lineno;
        exception_type = NULL;
        exception_value = NULL;
        exception_tb = NULL;
        exception_lineno = 0;

        // Preserve existing published exception.
        exception_preserved_type_4 = EXC_TYPE(PyThreadState_GET());
        Py_XINCREF( exception_preserved_type_4 );
        exception_preserved_value_4 = EXC_VALUE(PyThreadState_GET());
        Py_XINCREF( exception_preserved_value_4 );
        exception_preserved_tb_4 = (PyTracebackObject *)EXC_TRACEBACK(PyThreadState_GET());
        Py_XINCREF( exception_preserved_tb_4 );

        if ( exception_keeper_tb_17 == NULL )
        {
            exception_keeper_tb_17 = MAKE_TRACEBACK( frame_f8a56ca7f4381c06bb242e27d9cd6c68, exception_keeper_lineno_17 );
        }
        else if ( exception_keeper_lineno_17 != 0 )
        {
            exception_keeper_tb_17 = ADD_TRACEBACK( exception_keeper_tb_17, frame_f8a56ca7f4381c06bb242e27d9cd6c68, exception_keeper_lineno_17 );
        }

        NORMALIZE_EXCEPTION( &exception_keeper_type_17, &exception_keeper_value_17, &exception_keeper_tb_17 );
        PyException_SetTraceback( exception_keeper_value_17, (PyObject *)exception_keeper_tb_17 );
        PUBLISH_EXCEPTION( &exception_keeper_type_17, &exception_keeper_value_17, &exception_keeper_tb_17 );
        // Tried code:
        {
            nuitka_bool tmp_condition_result_18;
            PyObject *tmp_compexpr_left_18;
            PyObject *tmp_compexpr_right_18;
            tmp_compexpr_left_18 = EXC_TYPE(PyThreadState_GET());
            tmp_compexpr_right_18 = PyExc_ValueError;
            tmp_res = EXCEPTION_MATCH_BOOL( tmp_compexpr_left_18, tmp_compexpr_right_18 );
            if ( tmp_res == -1 )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 1501;
                type_description_1 = "oocooooooooooooooooooooooooooooooooooooooo";
                goto try_except_handler_20;
            }
            tmp_condition_result_18 = ( tmp_res != 0 ) ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
            if ( tmp_condition_result_18 == NUITKA_BOOL_TRUE )
            {
                goto branch_yes_17;
            }
            else
            {
                goto branch_no_17;
            }
            branch_yes_17:;
            {
                PyObject *tmp_assign_source_49;
                tmp_assign_source_49 = const_bytes_digest_92a77d7ec5d45eaee3b796fbf5eebb91;
                {
                    PyObject *old = var_exception_name;
                    var_exception_name = tmp_assign_source_49;
                    Py_INCREF( var_exception_name );
                    Py_XDECREF( old );
                }

            }
            {
                PyObject *tmp_assign_source_50;
                tmp_assign_source_50 = const_bytes_chr_48;
                {
                    PyObject *old = var_hex_errno;
                    var_hex_errno = tmp_assign_source_50;
                    Py_INCREF( var_hex_errno );
                    Py_XDECREF( old );
                }

            }
            {
                PyObject *tmp_assign_source_51;
                PyObject *tmp_called_name_6;
                PyObject *tmp_source_name_9;
                PyObject *tmp_args_element_name_44;
                PyObject *tmp_bytes_arg_1;
                tmp_source_name_9 = const_str_digest_c293a5f4ec55acb4d02352a014e64c8e;
                tmp_called_name_6 = LOOKUP_ATTRIBUTE( tmp_source_name_9, const_str_plain_format );
                assert( !(tmp_called_name_6 == NULL) );
                CHECK_OBJECT( var_errpipe_data );
                tmp_bytes_arg_1 = var_errpipe_data;
                tmp_args_element_name_44 = BUILTIN_BYTES1( tmp_bytes_arg_1 );
                if ( tmp_args_element_name_44 == NULL )
                {
                    assert( ERROR_OCCURRED() );

                    FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
                    Py_DECREF( tmp_called_name_6 );

                    exception_lineno = 1505;
                    type_description_1 = "oocooooooooooooooooooooooooooooooooooooooo";
                    goto try_except_handler_20;
                }
                frame_f8a56ca7f4381c06bb242e27d9cd6c68->m_frame.f_lineno = 1504;
                {
                    PyObject *call_args[] = { tmp_args_element_name_44 };
                    tmp_assign_source_51 = CALL_FUNCTION_WITH_ARGS1( tmp_called_name_6, call_args );
                }

                Py_DECREF( tmp_called_name_6 );
                Py_DECREF( tmp_args_element_name_44 );
                if ( tmp_assign_source_51 == NULL )
                {
                    assert( ERROR_OCCURRED() );

                    FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                    exception_lineno = 1504;
                    type_description_1 = "oocooooooooooooooooooooooooooooooooooooooo";
                    goto try_except_handler_20;
                }
                {
                    PyObject *old = var_err_msg;
                    var_err_msg = tmp_assign_source_51;
                    Py_XDECREF( old );
                }

            }
            goto branch_end_17;
            branch_no_17:;
            tmp_result = RERAISE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
            if (unlikely( tmp_result == false ))
            {
                exception_lineno = 1494;
            }

            if (exception_tb && exception_tb->tb_frame == &frame_f8a56ca7f4381c06bb242e27d9cd6c68->m_frame) frame_f8a56ca7f4381c06bb242e27d9cd6c68->m_frame.f_lineno = exception_tb->tb_lineno;
            type_description_1 = "oocooooooooooooooooooooooooooooooooooooooo";
            goto try_except_handler_20;
            branch_end_17:;
        }
        goto try_end_16;
        // Exception handler code:
        try_except_handler_20:;
        exception_keeper_type_18 = exception_type;
        exception_keeper_value_18 = exception_value;
        exception_keeper_tb_18 = exception_tb;
        exception_keeper_lineno_18 = exception_lineno;
        exception_type = NULL;
        exception_value = NULL;
        exception_tb = NULL;
        exception_lineno = 0;

        // Restore previous exception.
        SET_CURRENT_EXCEPTION( exception_preserved_type_4, exception_preserved_value_4, exception_preserved_tb_4 );
        // Re-raise.
        exception_type = exception_keeper_type_18;
        exception_value = exception_keeper_value_18;
        exception_tb = exception_keeper_tb_18;
        exception_lineno = exception_keeper_lineno_18;

        goto frame_exception_exit_1;
        // End of try:
        try_end_16:;
        // Restore previous exception.
        SET_CURRENT_EXCEPTION( exception_preserved_type_4, exception_preserved_value_4, exception_preserved_tb_4 );
        goto try_end_15;
        // exception handler codes exits in all cases
        NUITKA_CANNOT_GET_HERE( subprocess$$$function_52__execute_child );
        return NULL;
        // End of try:
        try_end_15:;
        {
            PyObject *tmp_assign_source_52;
            PyObject *tmp_getattr_target_2;
            PyObject *tmp_mvar_value_22;
            PyObject *tmp_getattr_attr_2;
            PyObject *tmp_called_instance_24;
            PyObject *tmp_getattr_default_2;
            PyObject *tmp_mvar_value_23;
            tmp_mvar_value_22 = GET_STRING_DICT_VALUE( moduledict_subprocess, (Nuitka_StringObject *)const_str_plain_builtins );

            if (unlikely( tmp_mvar_value_22 == NULL ))
            {
                tmp_mvar_value_22 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_builtins );
            }

            if ( tmp_mvar_value_22 == NULL )
            {

                exception_type = PyExc_NameError;
                Py_INCREF( exception_type );
                exception_value = PyUnicode_FromFormat( "name '%s' is not defined", "builtins" );
                exception_tb = NULL;
                NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
                CHAIN_EXCEPTION( exception_value );

                exception_lineno = 1507;
                type_description_1 = "oocooooooooooooooooooooooooooooooooooooooo";
                goto frame_exception_exit_1;
            }

            tmp_getattr_target_2 = tmp_mvar_value_22;
            if ( var_exception_name == NULL )
            {

                exception_type = PyExc_UnboundLocalError;
                Py_INCREF( exception_type );
                exception_value = PyUnicode_FromFormat( "local variable '%s' referenced before assignment", "exception_name" );
                exception_tb = NULL;
                NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
                CHAIN_EXCEPTION( exception_value );

                exception_lineno = 1507;
                type_description_1 = "oocooooooooooooooooooooooooooooooooooooooo";
                goto frame_exception_exit_1;
            }

            tmp_called_instance_24 = var_exception_name;
            frame_f8a56ca7f4381c06bb242e27d9cd6c68->m_frame.f_lineno = 1507;
            tmp_getattr_attr_2 = CALL_METHOD_WITH_ARGS1( tmp_called_instance_24, const_str_plain_decode, &PyTuple_GET_ITEM( const_tuple_str_plain_ascii_tuple, 0 ) );

            if ( tmp_getattr_attr_2 == NULL )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 1507;
                type_description_1 = "oocooooooooooooooooooooooooooooooooooooooo";
                goto frame_exception_exit_1;
            }
            tmp_mvar_value_23 = GET_STRING_DICT_VALUE( moduledict_subprocess, (Nuitka_StringObject *)const_str_plain_SubprocessError );

            if (unlikely( tmp_mvar_value_23 == NULL ))
            {
                tmp_mvar_value_23 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_SubprocessError );
            }

            if ( tmp_mvar_value_23 == NULL )
            {
                Py_DECREF( tmp_getattr_attr_2 );
                exception_type = PyExc_NameError;
                Py_INCREF( exception_type );
                exception_value = PyUnicode_FromFormat( "name '%s' is not defined", "SubprocessError" );
                exception_tb = NULL;
                NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
                CHAIN_EXCEPTION( exception_value );

                exception_lineno = 1508;
                type_description_1 = "oocooooooooooooooooooooooooooooooooooooooo";
                goto frame_exception_exit_1;
            }

            tmp_getattr_default_2 = tmp_mvar_value_23;
            tmp_assign_source_52 = BUILTIN_GETATTR( tmp_getattr_target_2, tmp_getattr_attr_2, tmp_getattr_default_2 );
            Py_DECREF( tmp_getattr_attr_2 );
            if ( tmp_assign_source_52 == NULL )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 1506;
                type_description_1 = "oocooooooooooooooooooooooooooooooooooooooo";
                goto frame_exception_exit_1;
            }
            assert( var_child_exception_type == NULL );
            var_child_exception_type = tmp_assign_source_52;
        }
        {
            nuitka_bool tmp_condition_result_19;
            int tmp_and_left_truth_7;
            nuitka_bool tmp_and_left_value_7;
            nuitka_bool tmp_and_right_value_7;
            PyObject *tmp_called_name_7;
            PyObject *tmp_call_result_15;
            PyObject *tmp_args_element_name_45;
            PyObject *tmp_args_element_name_46;
            int tmp_truth_name_5;
            int tmp_truth_name_6;
            tmp_called_name_7 = LOOKUP_BUILTIN( const_str_plain_issubclass );
            assert( tmp_called_name_7 != NULL );
            CHECK_OBJECT( var_child_exception_type );
            tmp_args_element_name_45 = var_child_exception_type;
            tmp_args_element_name_46 = PyExc_OSError;
            frame_f8a56ca7f4381c06bb242e27d9cd6c68->m_frame.f_lineno = 1509;
            {
                PyObject *call_args[] = { tmp_args_element_name_45, tmp_args_element_name_46 };
                tmp_call_result_15 = CALL_FUNCTION_WITH_ARGS2( tmp_called_name_7, call_args );
            }

            if ( tmp_call_result_15 == NULL )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 1509;
                type_description_1 = "oocooooooooooooooooooooooooooooooooooooooo";
                goto frame_exception_exit_1;
            }
            tmp_truth_name_5 = CHECK_IF_TRUE( tmp_call_result_15 );
            if ( tmp_truth_name_5 == -1 )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
                Py_DECREF( tmp_call_result_15 );

                exception_lineno = 1509;
                type_description_1 = "oocooooooooooooooooooooooooooooooooooooooo";
                goto frame_exception_exit_1;
            }
            tmp_and_left_value_7 = tmp_truth_name_5 == 1 ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
            Py_DECREF( tmp_call_result_15 );
            tmp_and_left_truth_7 = tmp_and_left_value_7 == NUITKA_BOOL_TRUE ? 1 : 0;
            if ( tmp_and_left_truth_7 == 1 )
            {
                goto and_right_7;
            }
            else
            {
                goto and_left_7;
            }
            and_right_7:;
            if ( var_hex_errno == NULL )
            {

                exception_type = PyExc_UnboundLocalError;
                Py_INCREF( exception_type );
                exception_value = PyUnicode_FromFormat( "local variable '%s' referenced before assignment", "hex_errno" );
                exception_tb = NULL;
                NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
                CHAIN_EXCEPTION( exception_value );

                exception_lineno = 1509;
                type_description_1 = "oocooooooooooooooooooooooooooooooooooooooo";
                goto frame_exception_exit_1;
            }

            tmp_truth_name_6 = CHECK_IF_TRUE( var_hex_errno );
            if ( tmp_truth_name_6 == -1 )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 1509;
                type_description_1 = "oocooooooooooooooooooooooooooooooooooooooo";
                goto frame_exception_exit_1;
            }
            tmp_and_right_value_7 = tmp_truth_name_6 == 1 ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
            tmp_condition_result_19 = tmp_and_right_value_7;
            goto and_end_7;
            and_left_7:;
            tmp_condition_result_19 = tmp_and_left_value_7;
            and_end_7:;
            if ( tmp_condition_result_19 == NUITKA_BOOL_TRUE )
            {
                goto branch_yes_18;
            }
            else
            {
                goto branch_no_18;
            }
            branch_yes_18:;
            {
                PyObject *tmp_assign_source_53;
                PyObject *tmp_value_name_1;
                PyObject *tmp_base_name_1;
                if ( var_hex_errno == NULL )
                {

                    exception_type = PyExc_UnboundLocalError;
                    Py_INCREF( exception_type );
                    exception_value = PyUnicode_FromFormat( "local variable '%s' referenced before assignment", "hex_errno" );
                    exception_tb = NULL;
                    NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
                    CHAIN_EXCEPTION( exception_value );

                    exception_lineno = 1510;
                    type_description_1 = "oocooooooooooooooooooooooooooooooooooooooo";
                    goto frame_exception_exit_1;
                }

                tmp_value_name_1 = var_hex_errno;
                tmp_base_name_1 = const_int_pos_16;
                tmp_assign_source_53 = BUILTIN_INT2( tmp_value_name_1, tmp_base_name_1 );
                if ( tmp_assign_source_53 == NULL )
                {
                    assert( ERROR_OCCURRED() );

                    FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                    exception_lineno = 1510;
                    type_description_1 = "oocooooooooooooooooooooooooooooooooooooooo";
                    goto frame_exception_exit_1;
                }
                assert( var_errno_num == NULL );
                var_errno_num = tmp_assign_source_53;
            }
            {
                PyObject *tmp_assign_source_54;
                PyObject *tmp_compexpr_left_19;
                PyObject *tmp_compexpr_right_19;
                if ( var_err_msg == NULL )
                {

                    exception_type = PyExc_UnboundLocalError;
                    Py_INCREF( exception_type );
                    exception_value = PyUnicode_FromFormat( "local variable '%s' referenced before assignment", "err_msg" );
                    exception_tb = NULL;
                    NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
                    CHAIN_EXCEPTION( exception_value );

                    exception_lineno = 1511;
                    type_description_1 = "oocooooooooooooooooooooooooooooooooooooooo";
                    goto frame_exception_exit_1;
                }

                tmp_compexpr_left_19 = var_err_msg;
                tmp_compexpr_right_19 = const_str_plain_noexec;
                tmp_assign_source_54 = RICH_COMPARE_EQ_OBJECT_OBJECT( tmp_compexpr_left_19, tmp_compexpr_right_19 );
                if ( tmp_assign_source_54 == NULL )
                {
                    assert( ERROR_OCCURRED() );

                    FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                    exception_lineno = 1511;
                    type_description_1 = "oocooooooooooooooooooooooooooooooooooooooo";
                    goto frame_exception_exit_1;
                }
                assert( var_child_exec_never_called == NULL );
                var_child_exec_never_called = tmp_assign_source_54;
            }
            {
                nuitka_bool tmp_condition_result_20;
                int tmp_truth_name_7;
                CHECK_OBJECT( var_child_exec_never_called );
                tmp_truth_name_7 = CHECK_IF_TRUE( var_child_exec_never_called );
                if ( tmp_truth_name_7 == -1 )
                {
                    assert( ERROR_OCCURRED() );

                    FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                    exception_lineno = 1512;
                    type_description_1 = "oocooooooooooooooooooooooooooooooooooooooo";
                    goto frame_exception_exit_1;
                }
                tmp_condition_result_20 = tmp_truth_name_7 == 1 ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
                if ( tmp_condition_result_20 == NUITKA_BOOL_TRUE )
                {
                    goto branch_yes_19;
                }
                else
                {
                    goto branch_no_19;
                }
                branch_yes_19:;
                {
                    PyObject *tmp_assign_source_55;
                    tmp_assign_source_55 = const_str_empty;
                    {
                        PyObject *old = var_err_msg;
                        var_err_msg = tmp_assign_source_55;
                        Py_INCREF( var_err_msg );
                        Py_XDECREF( old );
                    }

                }
                {
                    PyObject *tmp_assign_source_56;
                    CHECK_OBJECT( par_cwd );
                    tmp_assign_source_56 = par_cwd;
                    assert( var_err_filename == NULL );
                    Py_INCREF( tmp_assign_source_56 );
                    var_err_filename = tmp_assign_source_56;
                }
                goto branch_end_19;
                branch_no_19:;
                {
                    PyObject *tmp_assign_source_57;
                    CHECK_OBJECT( var_orig_executable );
                    tmp_assign_source_57 = var_orig_executable;
                    assert( var_err_filename == NULL );
                    Py_INCREF( tmp_assign_source_57 );
                    var_err_filename = tmp_assign_source_57;
                }
                branch_end_19:;
            }
            {
                nuitka_bool tmp_condition_result_21;
                PyObject *tmp_compexpr_left_20;
                PyObject *tmp_compexpr_right_20;
                CHECK_OBJECT( var_errno_num );
                tmp_compexpr_left_20 = var_errno_num;
                tmp_compexpr_right_20 = const_int_0;
                tmp_res = RICH_COMPARE_BOOL_NOTEQ_OBJECT_OBJECT( tmp_compexpr_left_20, tmp_compexpr_right_20 );
                assert( !(tmp_res == -1) );
                tmp_condition_result_21 = ( tmp_res != 0 ) ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
                if ( tmp_condition_result_21 == NUITKA_BOOL_TRUE )
                {
                    goto branch_yes_20;
                }
                else
                {
                    goto branch_no_20;
                }
                branch_yes_20:;
                {
                    PyObject *tmp_assign_source_58;
                    PyObject *tmp_called_instance_25;
                    PyObject *tmp_mvar_value_24;
                    PyObject *tmp_args_element_name_47;
                    tmp_mvar_value_24 = GET_STRING_DICT_VALUE( moduledict_subprocess, (Nuitka_StringObject *)const_str_plain_os );

                    if (unlikely( tmp_mvar_value_24 == NULL ))
                    {
                        tmp_mvar_value_24 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_os );
                    }

                    if ( tmp_mvar_value_24 == NULL )
                    {

                        exception_type = PyExc_NameError;
                        Py_INCREF( exception_type );
                        exception_value = PyUnicode_FromFormat( "name '%s' is not defined", "os" );
                        exception_tb = NULL;
                        NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
                        CHAIN_EXCEPTION( exception_value );

                        exception_lineno = 1519;
                        type_description_1 = "oocooooooooooooooooooooooooooooooooooooooo";
                        goto frame_exception_exit_1;
                    }

                    tmp_called_instance_25 = tmp_mvar_value_24;
                    CHECK_OBJECT( var_errno_num );
                    tmp_args_element_name_47 = var_errno_num;
                    frame_f8a56ca7f4381c06bb242e27d9cd6c68->m_frame.f_lineno = 1519;
                    {
                        PyObject *call_args[] = { tmp_args_element_name_47 };
                        tmp_assign_source_58 = CALL_METHOD_WITH_ARGS1( tmp_called_instance_25, const_str_plain_strerror, call_args );
                    }

                    if ( tmp_assign_source_58 == NULL )
                    {
                        assert( ERROR_OCCURRED() );

                        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                        exception_lineno = 1519;
                        type_description_1 = "oocooooooooooooooooooooooooooooooooooooooo";
                        goto frame_exception_exit_1;
                    }
                    {
                        PyObject *old = var_err_msg;
                        var_err_msg = tmp_assign_source_58;
                        Py_XDECREF( old );
                    }

                }
                {
                    nuitka_bool tmp_condition_result_22;
                    PyObject *tmp_compexpr_left_21;
                    PyObject *tmp_compexpr_right_21;
                    PyObject *tmp_source_name_10;
                    PyObject *tmp_mvar_value_25;
                    CHECK_OBJECT( var_errno_num );
                    tmp_compexpr_left_21 = var_errno_num;
                    tmp_mvar_value_25 = GET_STRING_DICT_VALUE( moduledict_subprocess, (Nuitka_StringObject *)const_str_plain_errno );

                    if (unlikely( tmp_mvar_value_25 == NULL ))
                    {
                        tmp_mvar_value_25 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_errno );
                    }

                    if ( tmp_mvar_value_25 == NULL )
                    {

                        exception_type = PyExc_NameError;
                        Py_INCREF( exception_type );
                        exception_value = PyUnicode_FromFormat( "name '%s' is not defined", "errno" );
                        exception_tb = NULL;
                        NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
                        CHAIN_EXCEPTION( exception_value );

                        exception_lineno = 1520;
                        type_description_1 = "oocooooooooooooooooooooooooooooooooooooooo";
                        goto frame_exception_exit_1;
                    }

                    tmp_source_name_10 = tmp_mvar_value_25;
                    tmp_compexpr_right_21 = LOOKUP_ATTRIBUTE( tmp_source_name_10, const_str_plain_ENOENT );
                    if ( tmp_compexpr_right_21 == NULL )
                    {
                        assert( ERROR_OCCURRED() );

                        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                        exception_lineno = 1520;
                        type_description_1 = "oocooooooooooooooooooooooooooooooooooooooo";
                        goto frame_exception_exit_1;
                    }
                    tmp_res = RICH_COMPARE_BOOL_EQ_OBJECT_OBJECT( tmp_compexpr_left_21, tmp_compexpr_right_21 );
                    Py_DECREF( tmp_compexpr_right_21 );
                    if ( tmp_res == -1 )
                    {
                        assert( ERROR_OCCURRED() );

                        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                        exception_lineno = 1520;
                        type_description_1 = "oocooooooooooooooooooooooooooooooooooooooo";
                        goto frame_exception_exit_1;
                    }
                    tmp_condition_result_22 = ( tmp_res != 0 ) ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
                    if ( tmp_condition_result_22 == NUITKA_BOOL_TRUE )
                    {
                        goto branch_yes_21;
                    }
                    else
                    {
                        goto branch_no_21;
                    }
                    branch_yes_21:;
                    {
                        PyObject *tmp_assign_source_59;
                        PyObject *tmp_left_name_5;
                        PyObject *tmp_right_name_5;
                        PyObject *tmp_left_name_6;
                        PyObject *tmp_right_name_6;
                        PyObject *tmp_operand_name_4;
                        CHECK_OBJECT( var_err_msg );
                        tmp_left_name_5 = var_err_msg;
                        tmp_left_name_6 = const_str_digest_439d1398e2f3d2739cafa9b75372a63f;
                        CHECK_OBJECT( var_err_filename );
                        tmp_operand_name_4 = var_err_filename;
                        tmp_right_name_6 = UNARY_OPERATION( PyObject_Repr, tmp_operand_name_4 );
                        if ( tmp_right_name_6 == NULL )
                        {
                            assert( ERROR_OCCURRED() );

                            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                            exception_lineno = 1521;
                            type_description_1 = "oocooooooooooooooooooooooooooooooooooooooo";
                            goto frame_exception_exit_1;
                        }
                        tmp_right_name_5 = BINARY_OPERATION_ADD_UNICODE_OBJECT( tmp_left_name_6, tmp_right_name_6 );
                        Py_DECREF( tmp_right_name_6 );
                        if ( tmp_right_name_5 == NULL )
                        {
                            assert( ERROR_OCCURRED() );

                            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                            exception_lineno = 1521;
                            type_description_1 = "oocooooooooooooooooooooooooooooooooooooooo";
                            goto frame_exception_exit_1;
                        }
                        tmp_result = BINARY_OPERATION_ADD_OBJECT_OBJECT_INPLACE( &tmp_left_name_5, tmp_right_name_5 );
                        Py_DECREF( tmp_right_name_5 );
                        if ( tmp_result == false )
                        {
                            assert( ERROR_OCCURRED() );

                            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                            exception_lineno = 1521;
                            type_description_1 = "oocooooooooooooooooooooooooooooooooooooooo";
                            goto frame_exception_exit_1;
                        }
                        tmp_assign_source_59 = tmp_left_name_5;
                        var_err_msg = tmp_assign_source_59;

                    }
                    branch_no_21:;
                }
                branch_no_20:;
            }
            {
                PyObject *tmp_raise_type_2;
                PyObject *tmp_called_name_8;
                PyObject *tmp_args_element_name_48;
                PyObject *tmp_args_element_name_49;
                PyObject *tmp_args_element_name_50;
                CHECK_OBJECT( var_child_exception_type );
                tmp_called_name_8 = var_child_exception_type;
                CHECK_OBJECT( var_errno_num );
                tmp_args_element_name_48 = var_errno_num;
                if ( var_err_msg == NULL )
                {

                    exception_type = PyExc_UnboundLocalError;
                    Py_INCREF( exception_type );
                    exception_value = PyUnicode_FromFormat( "local variable '%s' referenced before assignment", "err_msg" );
                    exception_tb = NULL;
                    NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
                    CHAIN_EXCEPTION( exception_value );

                    exception_lineno = 1522;
                    type_description_1 = "oocooooooooooooooooooooooooooooooooooooooo";
                    goto frame_exception_exit_1;
                }

                tmp_args_element_name_49 = var_err_msg;
                CHECK_OBJECT( var_err_filename );
                tmp_args_element_name_50 = var_err_filename;
                frame_f8a56ca7f4381c06bb242e27d9cd6c68->m_frame.f_lineno = 1522;
                {
                    PyObject *call_args[] = { tmp_args_element_name_48, tmp_args_element_name_49, tmp_args_element_name_50 };
                    tmp_raise_type_2 = CALL_FUNCTION_WITH_ARGS3( tmp_called_name_8, call_args );
                }

                if ( tmp_raise_type_2 == NULL )
                {
                    assert( ERROR_OCCURRED() );

                    FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                    exception_lineno = 1522;
                    type_description_1 = "oocooooooooooooooooooooooooooooooooooooooo";
                    goto frame_exception_exit_1;
                }
                exception_type = tmp_raise_type_2;
                exception_lineno = 1522;
                RAISE_EXCEPTION_WITH_TYPE( &exception_type, &exception_value, &exception_tb );
                type_description_1 = "oocooooooooooooooooooooooooooooooooooooooo";
                goto frame_exception_exit_1;
            }
            branch_no_18:;
        }
        {
            PyObject *tmp_raise_type_3;
            PyObject *tmp_called_name_9;
            PyObject *tmp_args_element_name_51;
            CHECK_OBJECT( var_child_exception_type );
            tmp_called_name_9 = var_child_exception_type;
            if ( var_err_msg == NULL )
            {

                exception_type = PyExc_UnboundLocalError;
                Py_INCREF( exception_type );
                exception_value = PyUnicode_FromFormat( "local variable '%s' referenced before assignment", "err_msg" );
                exception_tb = NULL;
                NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
                CHAIN_EXCEPTION( exception_value );

                exception_lineno = 1523;
                type_description_1 = "oocooooooooooooooooooooooooooooooooooooooo";
                goto frame_exception_exit_1;
            }

            tmp_args_element_name_51 = var_err_msg;
            frame_f8a56ca7f4381c06bb242e27d9cd6c68->m_frame.f_lineno = 1523;
            {
                PyObject *call_args[] = { tmp_args_element_name_51 };
                tmp_raise_type_3 = CALL_FUNCTION_WITH_ARGS1( tmp_called_name_9, call_args );
            }

            if ( tmp_raise_type_3 == NULL )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 1523;
                type_description_1 = "oocooooooooooooooooooooooooooooooooooooooo";
                goto frame_exception_exit_1;
            }
            exception_type = tmp_raise_type_3;
            exception_lineno = 1523;
            RAISE_EXCEPTION_WITH_TYPE( &exception_type, &exception_value, &exception_tb );
            type_description_1 = "oocooooooooooooooooooooooooooooooooooooooo";
            goto frame_exception_exit_1;
        }
        branch_no_14:;
    }

#if 0
    RESTORE_FRAME_EXCEPTION( frame_f8a56ca7f4381c06bb242e27d9cd6c68 );
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto frame_no_exception_1;

    frame_exception_exit_1:;

#if 0
    RESTORE_FRAME_EXCEPTION( frame_f8a56ca7f4381c06bb242e27d9cd6c68 );
#endif

    if ( exception_tb == NULL )
    {
        exception_tb = MAKE_TRACEBACK( frame_f8a56ca7f4381c06bb242e27d9cd6c68, exception_lineno );
    }
    else if ( exception_tb->tb_frame != &frame_f8a56ca7f4381c06bb242e27d9cd6c68->m_frame )
    {
        exception_tb = ADD_TRACEBACK( exception_tb, frame_f8a56ca7f4381c06bb242e27d9cd6c68, exception_lineno );
    }

    // Attachs locals to frame if any.
    Nuitka_Frame_AttachLocals(
        (struct Nuitka_FrameObject *)frame_f8a56ca7f4381c06bb242e27d9cd6c68,
        type_description_1,
        par_self,
        par_args,
        par_executable,
        par_preexec_fn,
        par_close_fds,
        par_pass_fds,
        par_cwd,
        par_env,
        par_startupinfo,
        par_creationflags,
        par_shell,
        par_p2cread,
        par_p2cwrite,
        par_c2pread,
        par_c2pwrite,
        par_errread,
        par_errwrite,
        par_restore_signals,
        par_start_new_session,
        var_unix_shell,
        var_orig_executable,
        var_errpipe_read,
        var_errpipe_write,
        var_low_fds_to_close,
        var_low_fd,
        var_env_list,
        var_k,
        var_v,
        var_executable_list,
        var_fds_to_keep,
        var_devnull_fd,
        var_errpipe_data,
        var_part,
        var_pid,
        var_sts,
        var_exception_name,
        var_hex_errno,
        var_err_msg,
        var_child_exception_type,
        var_errno_num,
        var_child_exec_never_called,
        var_err_filename
    );


    // Release cached frame.
    if ( frame_f8a56ca7f4381c06bb242e27d9cd6c68 == cache_frame_f8a56ca7f4381c06bb242e27d9cd6c68 )
    {
        Py_DECREF( frame_f8a56ca7f4381c06bb242e27d9cd6c68 );
    }
    cache_frame_f8a56ca7f4381c06bb242e27d9cd6c68 = NULL;

    assertFrameObject( frame_f8a56ca7f4381c06bb242e27d9cd6c68 );

    // Put the previous frame back on top.
    popFrameStack();

    // Return the error.
    goto try_except_handler_1;

    frame_no_exception_1:;
    tmp_return_value = Py_None;
    Py_INCREF( tmp_return_value );
    goto try_return_handler_1;
    // tried codes exits in all cases
    NUITKA_CANNOT_GET_HERE( subprocess$$$function_52__execute_child );
    return NULL;
    // Return handler code:
    try_return_handler_1:;
    CHECK_OBJECT( (PyObject *)par_self );
    Py_DECREF( par_self );
    par_self = NULL;

    Py_XDECREF( par_args );
    par_args = NULL;

    CHECK_OBJECT( (PyObject *)par_executable );
    Py_DECREF( par_executable );
    par_executable = NULL;

    CHECK_OBJECT( (PyObject *)par_preexec_fn );
    Py_DECREF( par_preexec_fn );
    par_preexec_fn = NULL;

    CHECK_OBJECT( (PyObject *)par_close_fds );
    Py_DECREF( par_close_fds );
    par_close_fds = NULL;

    CHECK_OBJECT( (PyObject *)par_pass_fds );
    Py_DECREF( par_pass_fds );
    par_pass_fds = NULL;

    CHECK_OBJECT( (PyObject *)par_cwd );
    Py_DECREF( par_cwd );
    par_cwd = NULL;

    CHECK_OBJECT( (PyObject *)par_env );
    Py_DECREF( par_env );
    par_env = NULL;

    CHECK_OBJECT( (PyObject *)par_startupinfo );
    Py_DECREF( par_startupinfo );
    par_startupinfo = NULL;

    CHECK_OBJECT( (PyObject *)par_creationflags );
    Py_DECREF( par_creationflags );
    par_creationflags = NULL;

    CHECK_OBJECT( (PyObject *)par_shell );
    Py_DECREF( par_shell );
    par_shell = NULL;

    CHECK_OBJECT( (PyObject *)par_p2cread );
    Py_DECREF( par_p2cread );
    par_p2cread = NULL;

    CHECK_OBJECT( (PyObject *)par_p2cwrite );
    Py_DECREF( par_p2cwrite );
    par_p2cwrite = NULL;

    CHECK_OBJECT( (PyObject *)par_c2pread );
    Py_DECREF( par_c2pread );
    par_c2pread = NULL;

    CHECK_OBJECT( (PyObject *)par_c2pwrite );
    Py_DECREF( par_c2pwrite );
    par_c2pwrite = NULL;

    CHECK_OBJECT( (PyObject *)par_errread );
    Py_DECREF( par_errread );
    par_errread = NULL;

    CHECK_OBJECT( (PyObject *)par_errwrite );
    Py_DECREF( par_errwrite );
    par_errwrite = NULL;

    CHECK_OBJECT( (PyObject *)par_restore_signals );
    Py_DECREF( par_restore_signals );
    par_restore_signals = NULL;

    CHECK_OBJECT( (PyObject *)par_start_new_session );
    Py_DECREF( par_start_new_session );
    par_start_new_session = NULL;

    Py_XDECREF( var_unix_shell );
    var_unix_shell = NULL;

    CHECK_OBJECT( (PyObject *)var_orig_executable );
    Py_DECREF( var_orig_executable );
    var_orig_executable = NULL;

    CHECK_OBJECT( (PyObject *)var_errpipe_read );
    Py_DECREF( var_errpipe_read );
    var_errpipe_read = NULL;

    CHECK_OBJECT( (PyObject *)var_errpipe_write );
    Py_DECREF( var_errpipe_write );
    var_errpipe_write = NULL;

    CHECK_OBJECT( (PyObject *)var_low_fds_to_close );
    Py_DECREF( var_low_fds_to_close );
    var_low_fds_to_close = NULL;

    Py_XDECREF( var_low_fd );
    var_low_fd = NULL;

    CHECK_OBJECT( (PyObject *)var_env_list );
    Py_DECREF( var_env_list );
    var_env_list = NULL;

    Py_XDECREF( var_k );
    var_k = NULL;

    Py_XDECREF( var_v );
    var_v = NULL;

    CHECK_OBJECT( (PyObject *)var_executable_list );
    Py_DECREF( var_executable_list );
    var_executable_list = NULL;

    CHECK_OBJECT( (PyObject *)var_fds_to_keep );
    Py_DECREF( var_fds_to_keep );
    var_fds_to_keep = NULL;

    CHECK_OBJECT( (PyObject *)var_devnull_fd );
    Py_DECREF( var_devnull_fd );
    var_devnull_fd = NULL;

    CHECK_OBJECT( (PyObject *)var_errpipe_data );
    Py_DECREF( var_errpipe_data );
    var_errpipe_data = NULL;

    CHECK_OBJECT( (PyObject *)var_part );
    Py_DECREF( var_part );
    var_part = NULL;

    goto function_return_exit;
    // Exception handler code:
    try_except_handler_1:;
    exception_keeper_type_19 = exception_type;
    exception_keeper_value_19 = exception_value;
    exception_keeper_tb_19 = exception_tb;
    exception_keeper_lineno_19 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    CHECK_OBJECT( (PyObject *)par_self );
    Py_DECREF( par_self );
    par_self = NULL;

    Py_XDECREF( par_args );
    par_args = NULL;

    CHECK_OBJECT( (PyObject *)par_executable );
    Py_DECREF( par_executable );
    par_executable = NULL;

    CHECK_OBJECT( (PyObject *)par_preexec_fn );
    Py_DECREF( par_preexec_fn );
    par_preexec_fn = NULL;

    CHECK_OBJECT( (PyObject *)par_close_fds );
    Py_DECREF( par_close_fds );
    par_close_fds = NULL;

    CHECK_OBJECT( (PyObject *)par_pass_fds );
    Py_DECREF( par_pass_fds );
    par_pass_fds = NULL;

    CHECK_OBJECT( (PyObject *)par_cwd );
    Py_DECREF( par_cwd );
    par_cwd = NULL;

    CHECK_OBJECT( (PyObject *)par_env );
    Py_DECREF( par_env );
    par_env = NULL;

    CHECK_OBJECT( (PyObject *)par_startupinfo );
    Py_DECREF( par_startupinfo );
    par_startupinfo = NULL;

    CHECK_OBJECT( (PyObject *)par_creationflags );
    Py_DECREF( par_creationflags );
    par_creationflags = NULL;

    CHECK_OBJECT( (PyObject *)par_shell );
    Py_DECREF( par_shell );
    par_shell = NULL;

    CHECK_OBJECT( (PyObject *)par_p2cread );
    Py_DECREF( par_p2cread );
    par_p2cread = NULL;

    CHECK_OBJECT( (PyObject *)par_p2cwrite );
    Py_DECREF( par_p2cwrite );
    par_p2cwrite = NULL;

    CHECK_OBJECT( (PyObject *)par_c2pread );
    Py_DECREF( par_c2pread );
    par_c2pread = NULL;

    CHECK_OBJECT( (PyObject *)par_c2pwrite );
    Py_DECREF( par_c2pwrite );
    par_c2pwrite = NULL;

    CHECK_OBJECT( (PyObject *)par_errread );
    Py_DECREF( par_errread );
    par_errread = NULL;

    CHECK_OBJECT( (PyObject *)par_errwrite );
    Py_DECREF( par_errwrite );
    par_errwrite = NULL;

    CHECK_OBJECT( (PyObject *)par_restore_signals );
    Py_DECREF( par_restore_signals );
    par_restore_signals = NULL;

    CHECK_OBJECT( (PyObject *)par_start_new_session );
    Py_DECREF( par_start_new_session );
    par_start_new_session = NULL;

    Py_XDECREF( var_unix_shell );
    var_unix_shell = NULL;

    Py_XDECREF( var_orig_executable );
    var_orig_executable = NULL;

    Py_XDECREF( var_errpipe_read );
    var_errpipe_read = NULL;

    Py_XDECREF( var_errpipe_write );
    var_errpipe_write = NULL;

    Py_XDECREF( var_low_fds_to_close );
    var_low_fds_to_close = NULL;

    Py_XDECREF( var_low_fd );
    var_low_fd = NULL;

    Py_XDECREF( var_env_list );
    var_env_list = NULL;

    Py_XDECREF( var_k );
    var_k = NULL;

    Py_XDECREF( var_v );
    var_v = NULL;

    Py_XDECREF( var_executable_list );
    var_executable_list = NULL;

    Py_XDECREF( var_fds_to_keep );
    var_fds_to_keep = NULL;

    Py_XDECREF( var_devnull_fd );
    var_devnull_fd = NULL;

    Py_XDECREF( var_errpipe_data );
    var_errpipe_data = NULL;

    Py_XDECREF( var_part );
    var_part = NULL;

    Py_XDECREF( var_pid );
    var_pid = NULL;

    Py_XDECREF( var_sts );
    var_sts = NULL;

    Py_XDECREF( var_exception_name );
    var_exception_name = NULL;

    Py_XDECREF( var_hex_errno );
    var_hex_errno = NULL;

    Py_XDECREF( var_err_msg );
    var_err_msg = NULL;

    Py_XDECREF( var_child_exception_type );
    var_child_exception_type = NULL;

    Py_XDECREF( var_errno_num );
    var_errno_num = NULL;

    Py_XDECREF( var_child_exec_never_called );
    var_child_exec_never_called = NULL;

    Py_XDECREF( var_err_filename );
    var_err_filename = NULL;

    // Re-raise.
    exception_type = exception_keeper_type_19;
    exception_value = exception_keeper_value_19;
    exception_tb = exception_keeper_tb_19;
    exception_lineno = exception_keeper_lineno_19;

    goto function_exception_exit;
    // End of try:

    // Return statement must have exited already.
    NUITKA_CANNOT_GET_HERE( subprocess$$$function_52__execute_child );
    return NULL;

function_exception_exit:
    assert( exception_type );
    RESTORE_ERROR_OCCURRED( exception_type, exception_value, exception_tb );

    return NULL;

function_return_exit:
   // Function cleanup code if any.


   // Actual function exit with return value, making sure we did not make
   // the error status worse despite non-NULL return.
   CHECK_OBJECT( tmp_return_value );
   assert( had_error || !ERROR_OCCURRED() );
   return tmp_return_value;
}



struct subprocess$$$function_52__execute_child$$$genexpr_1_genexpr_locals {
    PyObject *var_dir;
    PyObject *tmp_iter_value_0;
    char const *type_description_1;
    PyObject *exception_type;
    PyObject *exception_value;
    PyTracebackObject *exception_tb;
    int exception_lineno;
    char yield_tmps[1024];
    PyObject *exception_keeper_type_1;
    PyObject *exception_keeper_value_1;
    PyTracebackObject *exception_keeper_tb_1;
    int exception_keeper_lineno_1;
    PyObject *exception_keeper_type_2;
    PyObject *exception_keeper_value_2;
    PyTracebackObject *exception_keeper_tb_2;
    int exception_keeper_lineno_2;
};

static PyObject *subprocess$$$function_52__execute_child$$$genexpr_1_genexpr_context( struct Nuitka_GeneratorObject *generator, PyObject *yield_return_value )
{
    CHECK_OBJECT( (PyObject *)generator );
    assert( Nuitka_Generator_Check( (PyObject *)generator ) );

    // Heap access if used.
    struct subprocess$$$function_52__execute_child$$$genexpr_1_genexpr_locals *generator_heap = (struct subprocess$$$function_52__execute_child$$$genexpr_1_genexpr_locals *)generator->m_heap_storage;

    // Dispatch to yield based on return label index:
    switch(generator->m_yield_return_index) {
    case 1: goto yield_return_1;
    }

    // Local variable initialization
    static struct Nuitka_FrameObject *cache_m_frame = NULL;
    generator_heap->var_dir = NULL;
    generator_heap->tmp_iter_value_0 = NULL;
    generator_heap->type_description_1 = NULL;
    generator_heap->exception_type = NULL;
    generator_heap->exception_value = NULL;
    generator_heap->exception_tb = NULL;
    generator_heap->exception_lineno = 0;

    // Actual generator function body.
    // Tried code:
    MAKE_OR_REUSE_FRAME( cache_m_frame, codeobj_344493d524bfa8f2de55b875388073d9, module_subprocess, sizeof(void *)+sizeof(void *)+sizeof(void *) );
    generator->m_frame = cache_m_frame;

    // Mark the frame object as in use, ref count 1 will be up for reuse.
    Py_INCREF( generator->m_frame );
    assert( Py_REFCNT( generator->m_frame ) == 2 ); // Frame stack

#if PYTHON_VERSION >= 340
    generator->m_frame->m_frame.f_gen = (PyObject *)generator;
#endif

    Py_CLEAR( generator->m_frame->m_frame.f_back );

    generator->m_frame->m_frame.f_back = PyThreadState_GET()->frame;
    Py_INCREF( generator->m_frame->m_frame.f_back );

    PyThreadState_GET()->frame = &generator->m_frame->m_frame;
    Py_INCREF( generator->m_frame );

    Nuitka_Frame_MarkAsExecuting( generator->m_frame );

#if PYTHON_VERSION >= 300
    // Accept currently existing exception as the one to publish again when we
    // yield or yield from.
    {
        PyThreadState *thread_state = PyThreadState_GET();

#if PYTHON_VERSION < 370
        generator->m_frame->m_frame.f_exc_type = EXC_TYPE( thread_state );
    if ( generator->m_frame->m_frame.f_exc_type == Py_None ) generator->m_frame->m_frame.f_exc_type = NULL;
        Py_XINCREF( generator->m_frame->m_frame.f_exc_type );
    generator->m_frame->m_frame.f_exc_value = EXC_VALUE( thread_state );
        Py_XINCREF( generator->m_frame->m_frame.f_exc_value );
    generator->m_frame->m_frame.f_exc_traceback = EXC_TRACEBACK( thread_state );
        Py_XINCREF( generator->m_frame->m_frame.f_exc_traceback );
#else
        generator->m_exc_state.exc_type = EXC_TYPE( thread_state );
        if ( generator->m_exc_state.exc_type == Py_None ) generator->m_exc_state.exc_type = NULL;
        Py_XINCREF( generator->m_exc_state.exc_type );
        generator->m_exc_state.exc_value = EXC_VALUE( thread_state );
        Py_XINCREF( generator->m_exc_state.exc_value );
        generator->m_exc_state.exc_traceback = EXC_TRACEBACK( thread_state );
        Py_XINCREF( generator->m_exc_state.exc_traceback );
#endif
    }

#endif

    // Framed code:
    // Tried code:
    loop_start_1:;
    {
        PyObject *tmp_next_source_1;
        PyObject *tmp_assign_source_1;
        CHECK_OBJECT( PyCell_GET( generator->m_closure[1] ) );
        tmp_next_source_1 = PyCell_GET( generator->m_closure[1] );
        tmp_assign_source_1 = ITERATOR_NEXT( tmp_next_source_1 );
        if ( tmp_assign_source_1 == NULL )
        {
            if ( CHECK_AND_CLEAR_STOP_ITERATION_OCCURRED() )
            {

                goto loop_end_1;
            }
            else
            {

                FETCH_ERROR_OCCURRED( &generator_heap->exception_type, &generator_heap->exception_value, &generator_heap->exception_tb );
                generator_heap->type_description_1 = "Noc";
                generator_heap->exception_lineno = 1442;
                goto try_except_handler_2;
            }
        }

        {
            PyObject *old = generator_heap->tmp_iter_value_0;
            generator_heap->tmp_iter_value_0 = tmp_assign_source_1;
            Py_XDECREF( old );
        }

    }
    {
        PyObject *tmp_assign_source_2;
        CHECK_OBJECT( generator_heap->tmp_iter_value_0 );
        tmp_assign_source_2 = generator_heap->tmp_iter_value_0;
        {
            PyObject *old = generator_heap->var_dir;
            generator_heap->var_dir = tmp_assign_source_2;
            Py_INCREF( generator_heap->var_dir );
            Py_XDECREF( old );
        }

    }
    {
        PyObject *tmp_expression_name_1;
        PyObject *tmp_called_name_1;
        PyObject *tmp_source_name_1;
        PyObject *tmp_source_name_2;
        PyObject *tmp_mvar_value_1;
        PyObject *tmp_args_element_name_1;
        PyObject *tmp_called_instance_1;
        PyObject *tmp_mvar_value_2;
        PyObject *tmp_args_element_name_2;
        PyObject *tmp_args_element_name_3;
        NUITKA_MAY_BE_UNUSED PyObject *tmp_yield_result_1;
        tmp_mvar_value_1 = GET_STRING_DICT_VALUE( moduledict_subprocess, (Nuitka_StringObject *)const_str_plain_os );

        if (unlikely( tmp_mvar_value_1 == NULL ))
        {
            tmp_mvar_value_1 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_os );
        }

        if ( tmp_mvar_value_1 == NULL )
        {

            generator_heap->exception_type = PyExc_NameError;
            Py_INCREF( generator_heap->exception_type );
            generator_heap->exception_value = PyUnicode_FromFormat( "name '%s' is not defined", "os" );
            generator_heap->exception_tb = NULL;
            NORMALIZE_EXCEPTION( &generator_heap->exception_type, &generator_heap->exception_value, &generator_heap->exception_tb );
            CHAIN_EXCEPTION( generator_heap->exception_value );

            generator_heap->exception_lineno = 1442;
            generator_heap->type_description_1 = "Noc";
            goto try_except_handler_2;
        }

        tmp_source_name_2 = tmp_mvar_value_1;
        tmp_source_name_1 = LOOKUP_ATTRIBUTE( tmp_source_name_2, const_str_plain_path );
        if ( tmp_source_name_1 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &generator_heap->exception_type, &generator_heap->exception_value, &generator_heap->exception_tb );


            generator_heap->exception_lineno = 1442;
            generator_heap->type_description_1 = "Noc";
            goto try_except_handler_2;
        }
        tmp_called_name_1 = LOOKUP_ATTRIBUTE( tmp_source_name_1, const_str_plain_join );
        Py_DECREF( tmp_source_name_1 );
        if ( tmp_called_name_1 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &generator_heap->exception_type, &generator_heap->exception_value, &generator_heap->exception_tb );


            generator_heap->exception_lineno = 1442;
            generator_heap->type_description_1 = "Noc";
            goto try_except_handler_2;
        }
        tmp_mvar_value_2 = GET_STRING_DICT_VALUE( moduledict_subprocess, (Nuitka_StringObject *)const_str_plain_os );

        if (unlikely( tmp_mvar_value_2 == NULL ))
        {
            tmp_mvar_value_2 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_os );
        }

        if ( tmp_mvar_value_2 == NULL )
        {
            Py_DECREF( tmp_called_name_1 );
            generator_heap->exception_type = PyExc_NameError;
            Py_INCREF( generator_heap->exception_type );
            generator_heap->exception_value = PyUnicode_FromFormat( "name '%s' is not defined", "os" );
            generator_heap->exception_tb = NULL;
            NORMALIZE_EXCEPTION( &generator_heap->exception_type, &generator_heap->exception_value, &generator_heap->exception_tb );
            CHAIN_EXCEPTION( generator_heap->exception_value );

            generator_heap->exception_lineno = 1442;
            generator_heap->type_description_1 = "Noc";
            goto try_except_handler_2;
        }

        tmp_called_instance_1 = tmp_mvar_value_2;
        CHECK_OBJECT( generator_heap->var_dir );
        tmp_args_element_name_2 = generator_heap->var_dir;
        generator->m_frame->m_frame.f_lineno = 1442;
        {
            PyObject *call_args[] = { tmp_args_element_name_2 };
            tmp_args_element_name_1 = CALL_METHOD_WITH_ARGS1( tmp_called_instance_1, const_str_plain_fsencode, call_args );
        }

        if ( tmp_args_element_name_1 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &generator_heap->exception_type, &generator_heap->exception_value, &generator_heap->exception_tb );
            Py_DECREF( tmp_called_name_1 );

            generator_heap->exception_lineno = 1442;
            generator_heap->type_description_1 = "Noc";
            goto try_except_handler_2;
        }
        if ( PyCell_GET( generator->m_closure[0] ) == NULL )
        {
            Py_DECREF( tmp_called_name_1 );
            Py_DECREF( tmp_args_element_name_1 );
            generator_heap->exception_type = PyExc_NameError;
            Py_INCREF( generator_heap->exception_type );
            generator_heap->exception_value = PyUnicode_FromFormat( "free variable '%s' referenced before assignment in enclosing scope", "executable" );
            generator_heap->exception_tb = NULL;
            NORMALIZE_EXCEPTION( &generator_heap->exception_type, &generator_heap->exception_value, &generator_heap->exception_tb );
            CHAIN_EXCEPTION( generator_heap->exception_value );

            generator_heap->exception_lineno = 1442;
            generator_heap->type_description_1 = "Noc";
            goto try_except_handler_2;
        }

        tmp_args_element_name_3 = PyCell_GET( generator->m_closure[0] );
        generator->m_frame->m_frame.f_lineno = 1442;
        {
            PyObject *call_args[] = { tmp_args_element_name_1, tmp_args_element_name_3 };
            tmp_expression_name_1 = CALL_FUNCTION_WITH_ARGS2( tmp_called_name_1, call_args );
        }

        Py_DECREF( tmp_called_name_1 );
        Py_DECREF( tmp_args_element_name_1 );
        if ( tmp_expression_name_1 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &generator_heap->exception_type, &generator_heap->exception_value, &generator_heap->exception_tb );


            generator_heap->exception_lineno = 1442;
            generator_heap->type_description_1 = "Noc";
            goto try_except_handler_2;
        }
        Nuitka_PreserveHeap( generator_heap->yield_tmps, &tmp_called_name_1, sizeof(PyObject *), &tmp_source_name_1, sizeof(PyObject *), &tmp_source_name_2, sizeof(PyObject *), &tmp_mvar_value_1, sizeof(PyObject *), &tmp_args_element_name_1, sizeof(PyObject *), &tmp_called_instance_1, sizeof(PyObject *), &tmp_mvar_value_2, sizeof(PyObject *), &tmp_args_element_name_2, sizeof(PyObject *), &tmp_args_element_name_3, sizeof(PyObject *), NULL );
        generator->m_yield_return_index = 1;
        return tmp_expression_name_1;
        yield_return_1:
        Nuitka_RestoreHeap( generator_heap->yield_tmps, &tmp_called_name_1, sizeof(PyObject *), &tmp_source_name_1, sizeof(PyObject *), &tmp_source_name_2, sizeof(PyObject *), &tmp_mvar_value_1, sizeof(PyObject *), &tmp_args_element_name_1, sizeof(PyObject *), &tmp_called_instance_1, sizeof(PyObject *), &tmp_mvar_value_2, sizeof(PyObject *), &tmp_args_element_name_2, sizeof(PyObject *), &tmp_args_element_name_3, sizeof(PyObject *), NULL );
        if ( yield_return_value == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &generator_heap->exception_type, &generator_heap->exception_value, &generator_heap->exception_tb );


            generator_heap->exception_lineno = 1442;
            generator_heap->type_description_1 = "Noc";
            goto try_except_handler_2;
        }
        tmp_yield_result_1 = yield_return_value;
    }
    if ( CONSIDER_THREADING() == false )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &generator_heap->exception_type, &generator_heap->exception_value, &generator_heap->exception_tb );


        generator_heap->exception_lineno = 1442;
        generator_heap->type_description_1 = "Noc";
        goto try_except_handler_2;
    }
    goto loop_start_1;
    loop_end_1:;
    goto try_end_1;
    // Exception handler code:
    try_except_handler_2:;
    generator_heap->exception_keeper_type_1 = generator_heap->exception_type;
    generator_heap->exception_keeper_value_1 = generator_heap->exception_value;
    generator_heap->exception_keeper_tb_1 = generator_heap->exception_tb;
    generator_heap->exception_keeper_lineno_1 = generator_heap->exception_lineno;
    generator_heap->exception_type = NULL;
    generator_heap->exception_value = NULL;
    generator_heap->exception_tb = NULL;
    generator_heap->exception_lineno = 0;

    Py_XDECREF( generator_heap->tmp_iter_value_0 );
    generator_heap->tmp_iter_value_0 = NULL;

    // Re-raise.
    generator_heap->exception_type = generator_heap->exception_keeper_type_1;
    generator_heap->exception_value = generator_heap->exception_keeper_value_1;
    generator_heap->exception_tb = generator_heap->exception_keeper_tb_1;
    generator_heap->exception_lineno = generator_heap->exception_keeper_lineno_1;

    goto frame_exception_exit_1;
    // End of try:
    try_end_1:;

    Nuitka_Frame_MarkAsNotExecuting( generator->m_frame );

#if PYTHON_VERSION >= 370
    Py_CLEAR( generator->m_exc_state.exc_type );
    Py_CLEAR( generator->m_exc_state.exc_value );
    Py_CLEAR( generator->m_exc_state.exc_traceback );
#elif PYTHON_VERSION >= 300
    Py_CLEAR( generator->m_frame->m_frame.f_exc_type );
    Py_CLEAR( generator->m_frame->m_frame.f_exc_value );
    Py_CLEAR( generator->m_frame->m_frame.f_exc_traceback );
#endif

    // Allow re-use of the frame again.
    Py_DECREF( generator->m_frame );
    goto frame_no_exception_1;

    frame_exception_exit_1:;

    // If it's not an exit exception, consider and create a traceback for it.
    if ( !EXCEPTION_MATCH_GENERATOR( generator_heap->exception_type ) )
    {
        if ( generator_heap->exception_tb == NULL )
        {
            generator_heap->exception_tb = MAKE_TRACEBACK( generator->m_frame, generator_heap->exception_lineno );
        }
        else if ( generator_heap->exception_tb->tb_frame != &generator->m_frame->m_frame )
        {
            generator_heap->exception_tb = ADD_TRACEBACK( generator_heap->exception_tb, generator->m_frame, generator_heap->exception_lineno );
        }

        Nuitka_Frame_AttachLocals(
            (struct Nuitka_FrameObject *)generator->m_frame,
            generator_heap->type_description_1,
            NULL,
            generator_heap->var_dir,
            generator->m_closure[0]
        );


        // Release cached frame.
        if ( generator->m_frame == cache_m_frame )
        {
            Py_DECREF( generator->m_frame );
        }
        cache_m_frame = NULL;

        assertFrameObject( generator->m_frame );
    }

#if PYTHON_VERSION >= 370
    Py_CLEAR( generator->m_exc_state.exc_type );
    Py_CLEAR( generator->m_exc_state.exc_value );
    Py_CLEAR( generator->m_exc_state.exc_traceback );
#elif PYTHON_VERSION >= 300
    Py_CLEAR( generator->m_frame->m_frame.f_exc_type );
    Py_CLEAR( generator->m_frame->m_frame.f_exc_value );
    Py_CLEAR( generator->m_frame->m_frame.f_exc_traceback );
#endif

    Py_DECREF( generator->m_frame );

    // Return the error.
    goto try_except_handler_1;

    frame_no_exception_1:;
    goto try_end_2;
    // Exception handler code:
    try_except_handler_1:;
    generator_heap->exception_keeper_type_2 = generator_heap->exception_type;
    generator_heap->exception_keeper_value_2 = generator_heap->exception_value;
    generator_heap->exception_keeper_tb_2 = generator_heap->exception_tb;
    generator_heap->exception_keeper_lineno_2 = generator_heap->exception_lineno;
    generator_heap->exception_type = NULL;
    generator_heap->exception_value = NULL;
    generator_heap->exception_tb = NULL;
    generator_heap->exception_lineno = 0;

    Py_XDECREF( generator_heap->var_dir );
    generator_heap->var_dir = NULL;

    // Re-raise.
    generator_heap->exception_type = generator_heap->exception_keeper_type_2;
    generator_heap->exception_value = generator_heap->exception_keeper_value_2;
    generator_heap->exception_tb = generator_heap->exception_keeper_tb_2;
    generator_heap->exception_lineno = generator_heap->exception_keeper_lineno_2;

    goto function_exception_exit;
    // End of try:
    try_end_2:;
    Py_XDECREF( generator_heap->tmp_iter_value_0 );
    generator_heap->tmp_iter_value_0 = NULL;

    Py_XDECREF( generator_heap->var_dir );
    generator_heap->var_dir = NULL;



    return NULL;

    function_exception_exit:
    assert( generator_heap->exception_type );
    RESTORE_ERROR_OCCURRED( generator_heap->exception_type, generator_heap->exception_value, generator_heap->exception_tb );

    return NULL;

}

static PyObject *subprocess$$$function_52__execute_child$$$genexpr_1_genexpr_maker( void )
{
    return Nuitka_Generator_New(
        subprocess$$$function_52__execute_child$$$genexpr_1_genexpr_context,
        module_subprocess,
        const_str_angle_genexpr,
#if PYTHON_VERSION >= 350
        const_str_digest_e2dc63c649962018f41bc6960a48c125,
#endif
        codeobj_344493d524bfa8f2de55b875388073d9,
        2,
        sizeof(struct subprocess$$$function_52__execute_child$$$genexpr_1_genexpr_locals)
    );
}


static PyObject *impl_subprocess$$$function_53__handle_exitstatus( struct Nuitka_FunctionObject const *self, PyObject **python_pars )
{
    // Preserve error status for checks
#ifndef __NUITKA_NO_ASSERT__
    NUITKA_MAY_BE_UNUSED bool had_error = ERROR_OCCURRED();
#endif

    // Local variable declarations.
    PyObject *par_self = python_pars[ 0 ];
    PyObject *par_sts = python_pars[ 1 ];
    PyObject *par__WIFSIGNALED = python_pars[ 2 ];
    PyObject *par__WTERMSIG = python_pars[ 3 ];
    PyObject *par__WIFEXITED = python_pars[ 4 ];
    PyObject *par__WEXITSTATUS = python_pars[ 5 ];
    PyObject *par__WIFSTOPPED = python_pars[ 6 ];
    PyObject *par__WSTOPSIG = python_pars[ 7 ];
    struct Nuitka_FrameObject *frame_90571a4b7308f1f4fd3c602274ac0a6e;
    NUITKA_MAY_BE_UNUSED char const *type_description_1 = NULL;
    PyObject *exception_type = NULL;
    PyObject *exception_value = NULL;
    PyTracebackObject *exception_tb = NULL;
    NUITKA_MAY_BE_UNUSED int exception_lineno = 0;
    bool tmp_result;
    static struct Nuitka_FrameObject *cache_frame_90571a4b7308f1f4fd3c602274ac0a6e = NULL;
    PyObject *tmp_return_value = NULL;
    PyObject *exception_keeper_type_1;
    PyObject *exception_keeper_value_1;
    PyTracebackObject *exception_keeper_tb_1;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_1;

    // Actual function body.
    // Tried code:
    MAKE_OR_REUSE_FRAME( cache_frame_90571a4b7308f1f4fd3c602274ac0a6e, codeobj_90571a4b7308f1f4fd3c602274ac0a6e, module_subprocess, sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *) );
    frame_90571a4b7308f1f4fd3c602274ac0a6e = cache_frame_90571a4b7308f1f4fd3c602274ac0a6e;

    // Push the new frame as the currently active one.
    pushFrameStack( frame_90571a4b7308f1f4fd3c602274ac0a6e );

    // Mark the frame object as in use, ref count 1 will be up for reuse.
    assert( Py_REFCNT( frame_90571a4b7308f1f4fd3c602274ac0a6e ) == 2 ); // Frame stack

    // Framed code:
    {
        nuitka_bool tmp_condition_result_1;
        PyObject *tmp_called_name_1;
        PyObject *tmp_call_result_1;
        PyObject *tmp_args_element_name_1;
        int tmp_truth_name_1;
        CHECK_OBJECT( par__WIFSIGNALED );
        tmp_called_name_1 = par__WIFSIGNALED;
        CHECK_OBJECT( par_sts );
        tmp_args_element_name_1 = par_sts;
        frame_90571a4b7308f1f4fd3c602274ac0a6e->m_frame.f_lineno = 1533;
        {
            PyObject *call_args[] = { tmp_args_element_name_1 };
            tmp_call_result_1 = CALL_FUNCTION_WITH_ARGS1( tmp_called_name_1, call_args );
        }

        if ( tmp_call_result_1 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 1533;
            type_description_1 = "oooooooo";
            goto frame_exception_exit_1;
        }
        tmp_truth_name_1 = CHECK_IF_TRUE( tmp_call_result_1 );
        if ( tmp_truth_name_1 == -1 )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
            Py_DECREF( tmp_call_result_1 );

            exception_lineno = 1533;
            type_description_1 = "oooooooo";
            goto frame_exception_exit_1;
        }
        tmp_condition_result_1 = tmp_truth_name_1 == 1 ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
        Py_DECREF( tmp_call_result_1 );
        if ( tmp_condition_result_1 == NUITKA_BOOL_TRUE )
        {
            goto branch_yes_1;
        }
        else
        {
            goto branch_no_1;
        }
        branch_yes_1:;
        {
            PyObject *tmp_assattr_name_1;
            PyObject *tmp_operand_name_1;
            PyObject *tmp_called_name_2;
            PyObject *tmp_args_element_name_2;
            PyObject *tmp_assattr_target_1;
            CHECK_OBJECT( par__WTERMSIG );
            tmp_called_name_2 = par__WTERMSIG;
            CHECK_OBJECT( par_sts );
            tmp_args_element_name_2 = par_sts;
            frame_90571a4b7308f1f4fd3c602274ac0a6e->m_frame.f_lineno = 1534;
            {
                PyObject *call_args[] = { tmp_args_element_name_2 };
                tmp_operand_name_1 = CALL_FUNCTION_WITH_ARGS1( tmp_called_name_2, call_args );
            }

            if ( tmp_operand_name_1 == NULL )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 1534;
                type_description_1 = "oooooooo";
                goto frame_exception_exit_1;
            }
            tmp_assattr_name_1 = UNARY_OPERATION( PyNumber_Negative, tmp_operand_name_1 );
            Py_DECREF( tmp_operand_name_1 );
            if ( tmp_assattr_name_1 == NULL )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 1534;
                type_description_1 = "oooooooo";
                goto frame_exception_exit_1;
            }
            CHECK_OBJECT( par_self );
            tmp_assattr_target_1 = par_self;
            tmp_result = SET_ATTRIBUTE( tmp_assattr_target_1, const_str_plain_returncode, tmp_assattr_name_1 );
            Py_DECREF( tmp_assattr_name_1 );
            if ( tmp_result == false )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 1534;
                type_description_1 = "oooooooo";
                goto frame_exception_exit_1;
            }
        }
        goto branch_end_1;
        branch_no_1:;
        {
            nuitka_bool tmp_condition_result_2;
            PyObject *tmp_called_name_3;
            PyObject *tmp_call_result_2;
            PyObject *tmp_args_element_name_3;
            int tmp_truth_name_2;
            CHECK_OBJECT( par__WIFEXITED );
            tmp_called_name_3 = par__WIFEXITED;
            CHECK_OBJECT( par_sts );
            tmp_args_element_name_3 = par_sts;
            frame_90571a4b7308f1f4fd3c602274ac0a6e->m_frame.f_lineno = 1535;
            {
                PyObject *call_args[] = { tmp_args_element_name_3 };
                tmp_call_result_2 = CALL_FUNCTION_WITH_ARGS1( tmp_called_name_3, call_args );
            }

            if ( tmp_call_result_2 == NULL )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 1535;
                type_description_1 = "oooooooo";
                goto frame_exception_exit_1;
            }
            tmp_truth_name_2 = CHECK_IF_TRUE( tmp_call_result_2 );
            if ( tmp_truth_name_2 == -1 )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
                Py_DECREF( tmp_call_result_2 );

                exception_lineno = 1535;
                type_description_1 = "oooooooo";
                goto frame_exception_exit_1;
            }
            tmp_condition_result_2 = tmp_truth_name_2 == 1 ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
            Py_DECREF( tmp_call_result_2 );
            if ( tmp_condition_result_2 == NUITKA_BOOL_TRUE )
            {
                goto branch_yes_2;
            }
            else
            {
                goto branch_no_2;
            }
            branch_yes_2:;
            {
                PyObject *tmp_assattr_name_2;
                PyObject *tmp_called_name_4;
                PyObject *tmp_args_element_name_4;
                PyObject *tmp_assattr_target_2;
                CHECK_OBJECT( par__WEXITSTATUS );
                tmp_called_name_4 = par__WEXITSTATUS;
                CHECK_OBJECT( par_sts );
                tmp_args_element_name_4 = par_sts;
                frame_90571a4b7308f1f4fd3c602274ac0a6e->m_frame.f_lineno = 1536;
                {
                    PyObject *call_args[] = { tmp_args_element_name_4 };
                    tmp_assattr_name_2 = CALL_FUNCTION_WITH_ARGS1( tmp_called_name_4, call_args );
                }

                if ( tmp_assattr_name_2 == NULL )
                {
                    assert( ERROR_OCCURRED() );

                    FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                    exception_lineno = 1536;
                    type_description_1 = "oooooooo";
                    goto frame_exception_exit_1;
                }
                CHECK_OBJECT( par_self );
                tmp_assattr_target_2 = par_self;
                tmp_result = SET_ATTRIBUTE( tmp_assattr_target_2, const_str_plain_returncode, tmp_assattr_name_2 );
                Py_DECREF( tmp_assattr_name_2 );
                if ( tmp_result == false )
                {
                    assert( ERROR_OCCURRED() );

                    FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                    exception_lineno = 1536;
                    type_description_1 = "oooooooo";
                    goto frame_exception_exit_1;
                }
            }
            goto branch_end_2;
            branch_no_2:;
            {
                nuitka_bool tmp_condition_result_3;
                PyObject *tmp_called_name_5;
                PyObject *tmp_call_result_3;
                PyObject *tmp_args_element_name_5;
                int tmp_truth_name_3;
                CHECK_OBJECT( par__WIFSTOPPED );
                tmp_called_name_5 = par__WIFSTOPPED;
                CHECK_OBJECT( par_sts );
                tmp_args_element_name_5 = par_sts;
                frame_90571a4b7308f1f4fd3c602274ac0a6e->m_frame.f_lineno = 1537;
                {
                    PyObject *call_args[] = { tmp_args_element_name_5 };
                    tmp_call_result_3 = CALL_FUNCTION_WITH_ARGS1( tmp_called_name_5, call_args );
                }

                if ( tmp_call_result_3 == NULL )
                {
                    assert( ERROR_OCCURRED() );

                    FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                    exception_lineno = 1537;
                    type_description_1 = "oooooooo";
                    goto frame_exception_exit_1;
                }
                tmp_truth_name_3 = CHECK_IF_TRUE( tmp_call_result_3 );
                if ( tmp_truth_name_3 == -1 )
                {
                    assert( ERROR_OCCURRED() );

                    FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
                    Py_DECREF( tmp_call_result_3 );

                    exception_lineno = 1537;
                    type_description_1 = "oooooooo";
                    goto frame_exception_exit_1;
                }
                tmp_condition_result_3 = tmp_truth_name_3 == 1 ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
                Py_DECREF( tmp_call_result_3 );
                if ( tmp_condition_result_3 == NUITKA_BOOL_TRUE )
                {
                    goto branch_yes_3;
                }
                else
                {
                    goto branch_no_3;
                }
                branch_yes_3:;
                {
                    PyObject *tmp_assattr_name_3;
                    PyObject *tmp_operand_name_2;
                    PyObject *tmp_called_name_6;
                    PyObject *tmp_args_element_name_6;
                    PyObject *tmp_assattr_target_3;
                    CHECK_OBJECT( par__WSTOPSIG );
                    tmp_called_name_6 = par__WSTOPSIG;
                    CHECK_OBJECT( par_sts );
                    tmp_args_element_name_6 = par_sts;
                    frame_90571a4b7308f1f4fd3c602274ac0a6e->m_frame.f_lineno = 1538;
                    {
                        PyObject *call_args[] = { tmp_args_element_name_6 };
                        tmp_operand_name_2 = CALL_FUNCTION_WITH_ARGS1( tmp_called_name_6, call_args );
                    }

                    if ( tmp_operand_name_2 == NULL )
                    {
                        assert( ERROR_OCCURRED() );

                        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                        exception_lineno = 1538;
                        type_description_1 = "oooooooo";
                        goto frame_exception_exit_1;
                    }
                    tmp_assattr_name_3 = UNARY_OPERATION( PyNumber_Negative, tmp_operand_name_2 );
                    Py_DECREF( tmp_operand_name_2 );
                    if ( tmp_assattr_name_3 == NULL )
                    {
                        assert( ERROR_OCCURRED() );

                        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                        exception_lineno = 1538;
                        type_description_1 = "oooooooo";
                        goto frame_exception_exit_1;
                    }
                    CHECK_OBJECT( par_self );
                    tmp_assattr_target_3 = par_self;
                    tmp_result = SET_ATTRIBUTE( tmp_assattr_target_3, const_str_plain_returncode, tmp_assattr_name_3 );
                    Py_DECREF( tmp_assattr_name_3 );
                    if ( tmp_result == false )
                    {
                        assert( ERROR_OCCURRED() );

                        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                        exception_lineno = 1538;
                        type_description_1 = "oooooooo";
                        goto frame_exception_exit_1;
                    }
                }
                goto branch_end_3;
                branch_no_3:;
                {
                    PyObject *tmp_raise_type_1;
                    PyObject *tmp_called_name_7;
                    PyObject *tmp_mvar_value_1;
                    tmp_mvar_value_1 = GET_STRING_DICT_VALUE( moduledict_subprocess, (Nuitka_StringObject *)const_str_plain_SubprocessError );

                    if (unlikely( tmp_mvar_value_1 == NULL ))
                    {
                        tmp_mvar_value_1 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_SubprocessError );
                    }

                    if ( tmp_mvar_value_1 == NULL )
                    {

                        exception_type = PyExc_NameError;
                        Py_INCREF( exception_type );
                        exception_value = PyUnicode_FromFormat( "name '%s' is not defined", "SubprocessError" );
                        exception_tb = NULL;
                        NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
                        CHAIN_EXCEPTION( exception_value );

                        exception_lineno = 1541;
                        type_description_1 = "oooooooo";
                        goto frame_exception_exit_1;
                    }

                    tmp_called_name_7 = tmp_mvar_value_1;
                    frame_90571a4b7308f1f4fd3c602274ac0a6e->m_frame.f_lineno = 1541;
                    tmp_raise_type_1 = CALL_FUNCTION_WITH_ARGS1( tmp_called_name_7, &PyTuple_GET_ITEM( const_tuple_str_digest_c2199ddfa55a575bd2b108a574a03ff2_tuple, 0 ) );

                    if ( tmp_raise_type_1 == NULL )
                    {
                        assert( ERROR_OCCURRED() );

                        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                        exception_lineno = 1541;
                        type_description_1 = "oooooooo";
                        goto frame_exception_exit_1;
                    }
                    exception_type = tmp_raise_type_1;
                    exception_lineno = 1541;
                    RAISE_EXCEPTION_WITH_TYPE( &exception_type, &exception_value, &exception_tb );
                    type_description_1 = "oooooooo";
                    goto frame_exception_exit_1;
                }
                branch_end_3:;
            }
            branch_end_2:;
        }
        branch_end_1:;
    }

#if 0
    RESTORE_FRAME_EXCEPTION( frame_90571a4b7308f1f4fd3c602274ac0a6e );
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto frame_no_exception_1;

    frame_exception_exit_1:;

#if 0
    RESTORE_FRAME_EXCEPTION( frame_90571a4b7308f1f4fd3c602274ac0a6e );
#endif

    if ( exception_tb == NULL )
    {
        exception_tb = MAKE_TRACEBACK( frame_90571a4b7308f1f4fd3c602274ac0a6e, exception_lineno );
    }
    else if ( exception_tb->tb_frame != &frame_90571a4b7308f1f4fd3c602274ac0a6e->m_frame )
    {
        exception_tb = ADD_TRACEBACK( exception_tb, frame_90571a4b7308f1f4fd3c602274ac0a6e, exception_lineno );
    }

    // Attachs locals to frame if any.
    Nuitka_Frame_AttachLocals(
        (struct Nuitka_FrameObject *)frame_90571a4b7308f1f4fd3c602274ac0a6e,
        type_description_1,
        par_self,
        par_sts,
        par__WIFSIGNALED,
        par__WTERMSIG,
        par__WIFEXITED,
        par__WEXITSTATUS,
        par__WIFSTOPPED,
        par__WSTOPSIG
    );


    // Release cached frame.
    if ( frame_90571a4b7308f1f4fd3c602274ac0a6e == cache_frame_90571a4b7308f1f4fd3c602274ac0a6e )
    {
        Py_DECREF( frame_90571a4b7308f1f4fd3c602274ac0a6e );
    }
    cache_frame_90571a4b7308f1f4fd3c602274ac0a6e = NULL;

    assertFrameObject( frame_90571a4b7308f1f4fd3c602274ac0a6e );

    // Put the previous frame back on top.
    popFrameStack();

    // Return the error.
    goto try_except_handler_1;

    frame_no_exception_1:;
    tmp_return_value = Py_None;
    Py_INCREF( tmp_return_value );
    goto try_return_handler_1;
    // tried codes exits in all cases
    NUITKA_CANNOT_GET_HERE( subprocess$$$function_53__handle_exitstatus );
    return NULL;
    // Return handler code:
    try_return_handler_1:;
    CHECK_OBJECT( (PyObject *)par_self );
    Py_DECREF( par_self );
    par_self = NULL;

    CHECK_OBJECT( (PyObject *)par_sts );
    Py_DECREF( par_sts );
    par_sts = NULL;

    CHECK_OBJECT( (PyObject *)par__WIFSIGNALED );
    Py_DECREF( par__WIFSIGNALED );
    par__WIFSIGNALED = NULL;

    CHECK_OBJECT( (PyObject *)par__WTERMSIG );
    Py_DECREF( par__WTERMSIG );
    par__WTERMSIG = NULL;

    CHECK_OBJECT( (PyObject *)par__WIFEXITED );
    Py_DECREF( par__WIFEXITED );
    par__WIFEXITED = NULL;

    CHECK_OBJECT( (PyObject *)par__WEXITSTATUS );
    Py_DECREF( par__WEXITSTATUS );
    par__WEXITSTATUS = NULL;

    CHECK_OBJECT( (PyObject *)par__WIFSTOPPED );
    Py_DECREF( par__WIFSTOPPED );
    par__WIFSTOPPED = NULL;

    CHECK_OBJECT( (PyObject *)par__WSTOPSIG );
    Py_DECREF( par__WSTOPSIG );
    par__WSTOPSIG = NULL;

    goto function_return_exit;
    // Exception handler code:
    try_except_handler_1:;
    exception_keeper_type_1 = exception_type;
    exception_keeper_value_1 = exception_value;
    exception_keeper_tb_1 = exception_tb;
    exception_keeper_lineno_1 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    CHECK_OBJECT( (PyObject *)par_self );
    Py_DECREF( par_self );
    par_self = NULL;

    CHECK_OBJECT( (PyObject *)par_sts );
    Py_DECREF( par_sts );
    par_sts = NULL;

    CHECK_OBJECT( (PyObject *)par__WIFSIGNALED );
    Py_DECREF( par__WIFSIGNALED );
    par__WIFSIGNALED = NULL;

    CHECK_OBJECT( (PyObject *)par__WTERMSIG );
    Py_DECREF( par__WTERMSIG );
    par__WTERMSIG = NULL;

    CHECK_OBJECT( (PyObject *)par__WIFEXITED );
    Py_DECREF( par__WIFEXITED );
    par__WIFEXITED = NULL;

    CHECK_OBJECT( (PyObject *)par__WEXITSTATUS );
    Py_DECREF( par__WEXITSTATUS );
    par__WEXITSTATUS = NULL;

    CHECK_OBJECT( (PyObject *)par__WIFSTOPPED );
    Py_DECREF( par__WIFSTOPPED );
    par__WIFSTOPPED = NULL;

    CHECK_OBJECT( (PyObject *)par__WSTOPSIG );
    Py_DECREF( par__WSTOPSIG );
    par__WSTOPSIG = NULL;

    // Re-raise.
    exception_type = exception_keeper_type_1;
    exception_value = exception_keeper_value_1;
    exception_tb = exception_keeper_tb_1;
    exception_lineno = exception_keeper_lineno_1;

    goto function_exception_exit;
    // End of try:

    // Return statement must have exited already.
    NUITKA_CANNOT_GET_HERE( subprocess$$$function_53__handle_exitstatus );
    return NULL;

function_exception_exit:
    assert( exception_type );
    RESTORE_ERROR_OCCURRED( exception_type, exception_value, exception_tb );

    return NULL;

function_return_exit:
   // Function cleanup code if any.


   // Actual function exit with return value, making sure we did not make
   // the error status worse despite non-NULL return.
   CHECK_OBJECT( tmp_return_value );
   assert( had_error || !ERROR_OCCURRED() );
   return tmp_return_value;
}


static PyObject *impl_subprocess$$$function_54__internal_poll( struct Nuitka_FunctionObject const *self, PyObject **python_pars )
{
    // Preserve error status for checks
#ifndef __NUITKA_NO_ASSERT__
    NUITKA_MAY_BE_UNUSED bool had_error = ERROR_OCCURRED();
#endif

    // Local variable declarations.
    PyObject *par_self = python_pars[ 0 ];
    PyObject *par__deadstate = python_pars[ 1 ];
    PyObject *par__waitpid = python_pars[ 2 ];
    PyObject *par__WNOHANG = python_pars[ 3 ];
    PyObject *par__ECHILD = python_pars[ 4 ];
    PyObject *var_pid = NULL;
    PyObject *var_sts = NULL;
    PyObject *var_e = NULL;
    PyObject *tmp_tuple_unpack_1__element_1 = NULL;
    PyObject *tmp_tuple_unpack_1__element_2 = NULL;
    PyObject *tmp_tuple_unpack_1__source_iter = NULL;
    struct Nuitka_FrameObject *frame_0f3fa34b6ea5a1c6fe10cb63908c593e;
    NUITKA_MAY_BE_UNUSED char const *type_description_1 = NULL;
    PyObject *exception_type = NULL;
    PyObject *exception_value = NULL;
    PyTracebackObject *exception_tb = NULL;
    NUITKA_MAY_BE_UNUSED int exception_lineno = 0;
    int tmp_res;
    PyObject *tmp_return_value = NULL;
    PyObject *tmp_iterator_attempt;
    PyObject *exception_keeper_type_1;
    PyObject *exception_keeper_value_1;
    PyTracebackObject *exception_keeper_tb_1;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_1;
    PyObject *exception_keeper_type_2;
    PyObject *exception_keeper_value_2;
    PyTracebackObject *exception_keeper_tb_2;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_2;
    PyObject *exception_keeper_type_3;
    PyObject *exception_keeper_value_3;
    PyTracebackObject *exception_keeper_tb_3;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_3;
    PyObject *exception_preserved_type_1;
    PyObject *exception_preserved_value_1;
    PyTracebackObject *exception_preserved_tb_1;
    bool tmp_result;
    PyObject *exception_keeper_type_4;
    PyObject *exception_keeper_value_4;
    PyTracebackObject *exception_keeper_tb_4;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_4;
    PyObject *exception_keeper_type_5;
    PyObject *exception_keeper_value_5;
    PyTracebackObject *exception_keeper_tb_5;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_5;
    PyObject *exception_keeper_type_6;
    PyObject *exception_keeper_value_6;
    PyTracebackObject *exception_keeper_tb_6;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_6;
    PyObject *exception_preserved_type_2;
    PyObject *exception_preserved_value_2;
    PyTracebackObject *exception_preserved_tb_2;
    PyObject *exception_keeper_type_7;
    PyObject *exception_keeper_value_7;
    PyTracebackObject *exception_keeper_tb_7;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_7;
    static struct Nuitka_FrameObject *cache_frame_0f3fa34b6ea5a1c6fe10cb63908c593e = NULL;
    PyObject *exception_keeper_type_8;
    PyObject *exception_keeper_value_8;
    PyTracebackObject *exception_keeper_tb_8;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_8;

    // Actual function body.
    // Tried code:
    MAKE_OR_REUSE_FRAME( cache_frame_0f3fa34b6ea5a1c6fe10cb63908c593e, codeobj_0f3fa34b6ea5a1c6fe10cb63908c593e, module_subprocess, sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *) );
    frame_0f3fa34b6ea5a1c6fe10cb63908c593e = cache_frame_0f3fa34b6ea5a1c6fe10cb63908c593e;

    // Push the new frame as the currently active one.
    pushFrameStack( frame_0f3fa34b6ea5a1c6fe10cb63908c593e );

    // Mark the frame object as in use, ref count 1 will be up for reuse.
    assert( Py_REFCNT( frame_0f3fa34b6ea5a1c6fe10cb63908c593e ) == 2 ); // Frame stack

    // Framed code:
    {
        nuitka_bool tmp_condition_result_1;
        PyObject *tmp_compexpr_left_1;
        PyObject *tmp_compexpr_right_1;
        PyObject *tmp_source_name_1;
        CHECK_OBJECT( par_self );
        tmp_source_name_1 = par_self;
        tmp_compexpr_left_1 = LOOKUP_ATTRIBUTE( tmp_source_name_1, const_str_plain_returncode );
        if ( tmp_compexpr_left_1 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 1553;
            type_description_1 = "oooooooo";
            goto frame_exception_exit_1;
        }
        tmp_compexpr_right_1 = Py_None;
        tmp_condition_result_1 = ( tmp_compexpr_left_1 == tmp_compexpr_right_1 ) ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
        Py_DECREF( tmp_compexpr_left_1 );
        if ( tmp_condition_result_1 == NUITKA_BOOL_TRUE )
        {
            goto branch_yes_1;
        }
        else
        {
            goto branch_no_1;
        }
        branch_yes_1:;
        {
            nuitka_bool tmp_condition_result_2;
            PyObject *tmp_operand_name_1;
            PyObject *tmp_called_instance_1;
            PyObject *tmp_source_name_2;
            CHECK_OBJECT( par_self );
            tmp_source_name_2 = par_self;
            tmp_called_instance_1 = LOOKUP_ATTRIBUTE( tmp_source_name_2, const_str_plain__waitpid_lock );
            if ( tmp_called_instance_1 == NULL )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 1554;
                type_description_1 = "oooooooo";
                goto frame_exception_exit_1;
            }
            frame_0f3fa34b6ea5a1c6fe10cb63908c593e->m_frame.f_lineno = 1554;
            tmp_operand_name_1 = CALL_METHOD_WITH_ARGS1( tmp_called_instance_1, const_str_plain_acquire, &PyTuple_GET_ITEM( const_tuple_false_tuple, 0 ) );

            Py_DECREF( tmp_called_instance_1 );
            if ( tmp_operand_name_1 == NULL )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 1554;
                type_description_1 = "oooooooo";
                goto frame_exception_exit_1;
            }
            tmp_res = CHECK_IF_TRUE( tmp_operand_name_1 );
            Py_DECREF( tmp_operand_name_1 );
            if ( tmp_res == -1 )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 1554;
                type_description_1 = "oooooooo";
                goto frame_exception_exit_1;
            }
            tmp_condition_result_2 = ( tmp_res == 0 ) ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
            if ( tmp_condition_result_2 == NUITKA_BOOL_TRUE )
            {
                goto branch_yes_2;
            }
            else
            {
                goto branch_no_2;
            }
            branch_yes_2:;
            tmp_return_value = Py_None;
            Py_INCREF( tmp_return_value );
            goto frame_return_exit_1;
            branch_no_2:;
        }
        // Tried code:
        // Tried code:
        {
            nuitka_bool tmp_condition_result_3;
            PyObject *tmp_compexpr_left_2;
            PyObject *tmp_compexpr_right_2;
            PyObject *tmp_source_name_3;
            CHECK_OBJECT( par_self );
            tmp_source_name_3 = par_self;
            tmp_compexpr_left_2 = LOOKUP_ATTRIBUTE( tmp_source_name_3, const_str_plain_returncode );
            if ( tmp_compexpr_left_2 == NULL )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 1559;
                type_description_1 = "oooooooo";
                goto try_except_handler_3;
            }
            tmp_compexpr_right_2 = Py_None;
            tmp_condition_result_3 = ( tmp_compexpr_left_2 != tmp_compexpr_right_2 ) ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
            Py_DECREF( tmp_compexpr_left_2 );
            if ( tmp_condition_result_3 == NUITKA_BOOL_TRUE )
            {
                goto branch_yes_3;
            }
            else
            {
                goto branch_no_3;
            }
            branch_yes_3:;
            {
                PyObject *tmp_source_name_4;
                CHECK_OBJECT( par_self );
                tmp_source_name_4 = par_self;
                tmp_return_value = LOOKUP_ATTRIBUTE( tmp_source_name_4, const_str_plain_returncode );
                if ( tmp_return_value == NULL )
                {
                    assert( ERROR_OCCURRED() );

                    FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                    exception_lineno = 1560;
                    type_description_1 = "oooooooo";
                    goto try_except_handler_3;
                }
                goto try_return_handler_2;
            }
            branch_no_3:;
        }
        // Tried code:
        {
            PyObject *tmp_assign_source_1;
            PyObject *tmp_iter_arg_1;
            PyObject *tmp_called_name_1;
            PyObject *tmp_args_element_name_1;
            PyObject *tmp_source_name_5;
            PyObject *tmp_args_element_name_2;
            CHECK_OBJECT( par__waitpid );
            tmp_called_name_1 = par__waitpid;
            CHECK_OBJECT( par_self );
            tmp_source_name_5 = par_self;
            tmp_args_element_name_1 = LOOKUP_ATTRIBUTE( tmp_source_name_5, const_str_plain_pid );
            if ( tmp_args_element_name_1 == NULL )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 1561;
                type_description_1 = "oooooooo";
                goto try_except_handler_4;
            }
            CHECK_OBJECT( par__WNOHANG );
            tmp_args_element_name_2 = par__WNOHANG;
            frame_0f3fa34b6ea5a1c6fe10cb63908c593e->m_frame.f_lineno = 1561;
            {
                PyObject *call_args[] = { tmp_args_element_name_1, tmp_args_element_name_2 };
                tmp_iter_arg_1 = CALL_FUNCTION_WITH_ARGS2( tmp_called_name_1, call_args );
            }

            Py_DECREF( tmp_args_element_name_1 );
            if ( tmp_iter_arg_1 == NULL )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 1561;
                type_description_1 = "oooooooo";
                goto try_except_handler_4;
            }
            tmp_assign_source_1 = MAKE_UNPACK_ITERATOR( tmp_iter_arg_1 );
            Py_DECREF( tmp_iter_arg_1 );
            if ( tmp_assign_source_1 == NULL )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 1561;
                type_description_1 = "oooooooo";
                goto try_except_handler_4;
            }
            assert( tmp_tuple_unpack_1__source_iter == NULL );
            tmp_tuple_unpack_1__source_iter = tmp_assign_source_1;
        }
        // Tried code:
        {
            PyObject *tmp_assign_source_2;
            PyObject *tmp_unpack_1;
            CHECK_OBJECT( tmp_tuple_unpack_1__source_iter );
            tmp_unpack_1 = tmp_tuple_unpack_1__source_iter;
            tmp_assign_source_2 = UNPACK_NEXT( tmp_unpack_1, 0, 2 );
            if ( tmp_assign_source_2 == NULL )
            {
                if ( !ERROR_OCCURRED() )
                {
                    exception_type = PyExc_StopIteration;
                    Py_INCREF( exception_type );
                    exception_value = NULL;
                    exception_tb = NULL;
                }
                else
                {
                    FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
                }


                type_description_1 = "oooooooo";
                exception_lineno = 1561;
                goto try_except_handler_5;
            }
            assert( tmp_tuple_unpack_1__element_1 == NULL );
            tmp_tuple_unpack_1__element_1 = tmp_assign_source_2;
        }
        {
            PyObject *tmp_assign_source_3;
            PyObject *tmp_unpack_2;
            CHECK_OBJECT( tmp_tuple_unpack_1__source_iter );
            tmp_unpack_2 = tmp_tuple_unpack_1__source_iter;
            tmp_assign_source_3 = UNPACK_NEXT( tmp_unpack_2, 1, 2 );
            if ( tmp_assign_source_3 == NULL )
            {
                if ( !ERROR_OCCURRED() )
                {
                    exception_type = PyExc_StopIteration;
                    Py_INCREF( exception_type );
                    exception_value = NULL;
                    exception_tb = NULL;
                }
                else
                {
                    FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
                }


                type_description_1 = "oooooooo";
                exception_lineno = 1561;
                goto try_except_handler_5;
            }
            assert( tmp_tuple_unpack_1__element_2 == NULL );
            tmp_tuple_unpack_1__element_2 = tmp_assign_source_3;
        }
        {
            PyObject *tmp_iterator_name_1;
            CHECK_OBJECT( tmp_tuple_unpack_1__source_iter );
            tmp_iterator_name_1 = tmp_tuple_unpack_1__source_iter;
            // Check if iterator has left-over elements.
            CHECK_OBJECT( tmp_iterator_name_1 ); assert( HAS_ITERNEXT( tmp_iterator_name_1 ) );

            tmp_iterator_attempt = (*Py_TYPE( tmp_iterator_name_1 )->tp_iternext)( tmp_iterator_name_1 );

            if (likely( tmp_iterator_attempt == NULL ))
            {
                PyObject *error = GET_ERROR_OCCURRED();

                if ( error != NULL )
                {
                    if ( EXCEPTION_MATCH_BOOL_SINGLE( error, PyExc_StopIteration ))
                    {
                        CLEAR_ERROR_OCCURRED();
                    }
                    else
                    {
                        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );

                        type_description_1 = "oooooooo";
                        exception_lineno = 1561;
                        goto try_except_handler_5;
                    }
                }
            }
            else
            {
                Py_DECREF( tmp_iterator_attempt );

                // TODO: Could avoid PyErr_Format.
#if PYTHON_VERSION < 300
                PyErr_Format( PyExc_ValueError, "too many values to unpack" );
#else
                PyErr_Format( PyExc_ValueError, "too many values to unpack (expected 2)" );
#endif
                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );

                type_description_1 = "oooooooo";
                exception_lineno = 1561;
                goto try_except_handler_5;
            }
        }
        goto try_end_1;
        // Exception handler code:
        try_except_handler_5:;
        exception_keeper_type_1 = exception_type;
        exception_keeper_value_1 = exception_value;
        exception_keeper_tb_1 = exception_tb;
        exception_keeper_lineno_1 = exception_lineno;
        exception_type = NULL;
        exception_value = NULL;
        exception_tb = NULL;
        exception_lineno = 0;

        CHECK_OBJECT( (PyObject *)tmp_tuple_unpack_1__source_iter );
        Py_DECREF( tmp_tuple_unpack_1__source_iter );
        tmp_tuple_unpack_1__source_iter = NULL;

        // Re-raise.
        exception_type = exception_keeper_type_1;
        exception_value = exception_keeper_value_1;
        exception_tb = exception_keeper_tb_1;
        exception_lineno = exception_keeper_lineno_1;

        goto try_except_handler_4;
        // End of try:
        try_end_1:;
        goto try_end_2;
        // Exception handler code:
        try_except_handler_4:;
        exception_keeper_type_2 = exception_type;
        exception_keeper_value_2 = exception_value;
        exception_keeper_tb_2 = exception_tb;
        exception_keeper_lineno_2 = exception_lineno;
        exception_type = NULL;
        exception_value = NULL;
        exception_tb = NULL;
        exception_lineno = 0;

        Py_XDECREF( tmp_tuple_unpack_1__element_1 );
        tmp_tuple_unpack_1__element_1 = NULL;

        Py_XDECREF( tmp_tuple_unpack_1__element_2 );
        tmp_tuple_unpack_1__element_2 = NULL;

        // Re-raise.
        exception_type = exception_keeper_type_2;
        exception_value = exception_keeper_value_2;
        exception_tb = exception_keeper_tb_2;
        exception_lineno = exception_keeper_lineno_2;

        goto try_except_handler_3;
        // End of try:
        try_end_2:;
        CHECK_OBJECT( (PyObject *)tmp_tuple_unpack_1__source_iter );
        Py_DECREF( tmp_tuple_unpack_1__source_iter );
        tmp_tuple_unpack_1__source_iter = NULL;

        {
            PyObject *tmp_assign_source_4;
            CHECK_OBJECT( tmp_tuple_unpack_1__element_1 );
            tmp_assign_source_4 = tmp_tuple_unpack_1__element_1;
            assert( var_pid == NULL );
            Py_INCREF( tmp_assign_source_4 );
            var_pid = tmp_assign_source_4;
        }
        Py_XDECREF( tmp_tuple_unpack_1__element_1 );
        tmp_tuple_unpack_1__element_1 = NULL;

        {
            PyObject *tmp_assign_source_5;
            CHECK_OBJECT( tmp_tuple_unpack_1__element_2 );
            tmp_assign_source_5 = tmp_tuple_unpack_1__element_2;
            assert( var_sts == NULL );
            Py_INCREF( tmp_assign_source_5 );
            var_sts = tmp_assign_source_5;
        }
        Py_XDECREF( tmp_tuple_unpack_1__element_2 );
        tmp_tuple_unpack_1__element_2 = NULL;

        {
            nuitka_bool tmp_condition_result_4;
            PyObject *tmp_compexpr_left_3;
            PyObject *tmp_compexpr_right_3;
            PyObject *tmp_source_name_6;
            CHECK_OBJECT( var_pid );
            tmp_compexpr_left_3 = var_pid;
            CHECK_OBJECT( par_self );
            tmp_source_name_6 = par_self;
            tmp_compexpr_right_3 = LOOKUP_ATTRIBUTE( tmp_source_name_6, const_str_plain_pid );
            if ( tmp_compexpr_right_3 == NULL )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 1562;
                type_description_1 = "oooooooo";
                goto try_except_handler_3;
            }
            tmp_res = RICH_COMPARE_BOOL_EQ_OBJECT_OBJECT( tmp_compexpr_left_3, tmp_compexpr_right_3 );
            Py_DECREF( tmp_compexpr_right_3 );
            if ( tmp_res == -1 )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 1562;
                type_description_1 = "oooooooo";
                goto try_except_handler_3;
            }
            tmp_condition_result_4 = ( tmp_res != 0 ) ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
            if ( tmp_condition_result_4 == NUITKA_BOOL_TRUE )
            {
                goto branch_yes_4;
            }
            else
            {
                goto branch_no_4;
            }
            branch_yes_4:;
            {
                PyObject *tmp_called_instance_2;
                PyObject *tmp_call_result_1;
                PyObject *tmp_args_element_name_3;
                CHECK_OBJECT( par_self );
                tmp_called_instance_2 = par_self;
                CHECK_OBJECT( var_sts );
                tmp_args_element_name_3 = var_sts;
                frame_0f3fa34b6ea5a1c6fe10cb63908c593e->m_frame.f_lineno = 1563;
                {
                    PyObject *call_args[] = { tmp_args_element_name_3 };
                    tmp_call_result_1 = CALL_METHOD_WITH_ARGS1( tmp_called_instance_2, const_str_plain__handle_exitstatus, call_args );
                }

                if ( tmp_call_result_1 == NULL )
                {
                    assert( ERROR_OCCURRED() );

                    FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                    exception_lineno = 1563;
                    type_description_1 = "oooooooo";
                    goto try_except_handler_3;
                }
                Py_DECREF( tmp_call_result_1 );
            }
            branch_no_4:;
        }
        goto try_end_3;
        // Exception handler code:
        try_except_handler_3:;
        exception_keeper_type_3 = exception_type;
        exception_keeper_value_3 = exception_value;
        exception_keeper_tb_3 = exception_tb;
        exception_keeper_lineno_3 = exception_lineno;
        exception_type = NULL;
        exception_value = NULL;
        exception_tb = NULL;
        exception_lineno = 0;

        // Preserve existing published exception.
        exception_preserved_type_1 = EXC_TYPE(PyThreadState_GET());
        Py_XINCREF( exception_preserved_type_1 );
        exception_preserved_value_1 = EXC_VALUE(PyThreadState_GET());
        Py_XINCREF( exception_preserved_value_1 );
        exception_preserved_tb_1 = (PyTracebackObject *)EXC_TRACEBACK(PyThreadState_GET());
        Py_XINCREF( exception_preserved_tb_1 );

        if ( exception_keeper_tb_3 == NULL )
        {
            exception_keeper_tb_3 = MAKE_TRACEBACK( frame_0f3fa34b6ea5a1c6fe10cb63908c593e, exception_keeper_lineno_3 );
        }
        else if ( exception_keeper_lineno_3 != 0 )
        {
            exception_keeper_tb_3 = ADD_TRACEBACK( exception_keeper_tb_3, frame_0f3fa34b6ea5a1c6fe10cb63908c593e, exception_keeper_lineno_3 );
        }

        NORMALIZE_EXCEPTION( &exception_keeper_type_3, &exception_keeper_value_3, &exception_keeper_tb_3 );
        PyException_SetTraceback( exception_keeper_value_3, (PyObject *)exception_keeper_tb_3 );
        PUBLISH_EXCEPTION( &exception_keeper_type_3, &exception_keeper_value_3, &exception_keeper_tb_3 );
        // Tried code:
        {
            nuitka_bool tmp_condition_result_5;
            PyObject *tmp_compexpr_left_4;
            PyObject *tmp_compexpr_right_4;
            tmp_compexpr_left_4 = EXC_TYPE(PyThreadState_GET());
            tmp_compexpr_right_4 = PyExc_OSError;
            tmp_res = EXCEPTION_MATCH_BOOL( tmp_compexpr_left_4, tmp_compexpr_right_4 );
            if ( tmp_res == -1 )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 1564;
                type_description_1 = "oooooooo";
                goto try_except_handler_6;
            }
            tmp_condition_result_5 = ( tmp_res != 0 ) ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
            if ( tmp_condition_result_5 == NUITKA_BOOL_TRUE )
            {
                goto branch_yes_5;
            }
            else
            {
                goto branch_no_5;
            }
            branch_yes_5:;
            {
                PyObject *tmp_assign_source_6;
                tmp_assign_source_6 = EXC_VALUE(PyThreadState_GET());
                assert( var_e == NULL );
                Py_INCREF( tmp_assign_source_6 );
                var_e = tmp_assign_source_6;
            }
            // Tried code:
            {
                nuitka_bool tmp_condition_result_6;
                PyObject *tmp_compexpr_left_5;
                PyObject *tmp_compexpr_right_5;
                CHECK_OBJECT( par__deadstate );
                tmp_compexpr_left_5 = par__deadstate;
                tmp_compexpr_right_5 = Py_None;
                tmp_condition_result_6 = ( tmp_compexpr_left_5 != tmp_compexpr_right_5 ) ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
                if ( tmp_condition_result_6 == NUITKA_BOOL_TRUE )
                {
                    goto branch_yes_6;
                }
                else
                {
                    goto branch_no_6;
                }
                branch_yes_6:;
                {
                    PyObject *tmp_assattr_name_1;
                    PyObject *tmp_assattr_target_1;
                    CHECK_OBJECT( par__deadstate );
                    tmp_assattr_name_1 = par__deadstate;
                    CHECK_OBJECT( par_self );
                    tmp_assattr_target_1 = par_self;
                    tmp_result = SET_ATTRIBUTE( tmp_assattr_target_1, const_str_plain_returncode, tmp_assattr_name_1 );
                    if ( tmp_result == false )
                    {
                        assert( ERROR_OCCURRED() );

                        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                        exception_lineno = 1566;
                        type_description_1 = "oooooooo";
                        goto try_except_handler_7;
                    }
                }
                goto branch_end_6;
                branch_no_6:;
                {
                    nuitka_bool tmp_condition_result_7;
                    PyObject *tmp_compexpr_left_6;
                    PyObject *tmp_compexpr_right_6;
                    PyObject *tmp_source_name_7;
                    CHECK_OBJECT( var_e );
                    tmp_source_name_7 = var_e;
                    tmp_compexpr_left_6 = LOOKUP_ATTRIBUTE( tmp_source_name_7, const_str_plain_errno );
                    if ( tmp_compexpr_left_6 == NULL )
                    {
                        assert( ERROR_OCCURRED() );

                        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                        exception_lineno = 1567;
                        type_description_1 = "oooooooo";
                        goto try_except_handler_7;
                    }
                    CHECK_OBJECT( par__ECHILD );
                    tmp_compexpr_right_6 = par__ECHILD;
                    tmp_res = RICH_COMPARE_BOOL_EQ_OBJECT_OBJECT( tmp_compexpr_left_6, tmp_compexpr_right_6 );
                    Py_DECREF( tmp_compexpr_left_6 );
                    if ( tmp_res == -1 )
                    {
                        assert( ERROR_OCCURRED() );

                        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                        exception_lineno = 1567;
                        type_description_1 = "oooooooo";
                        goto try_except_handler_7;
                    }
                    tmp_condition_result_7 = ( tmp_res != 0 ) ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
                    if ( tmp_condition_result_7 == NUITKA_BOOL_TRUE )
                    {
                        goto branch_yes_7;
                    }
                    else
                    {
                        goto branch_no_7;
                    }
                    branch_yes_7:;
                    {
                        PyObject *tmp_assattr_name_2;
                        PyObject *tmp_assattr_target_2;
                        tmp_assattr_name_2 = const_int_0;
                        CHECK_OBJECT( par_self );
                        tmp_assattr_target_2 = par_self;
                        tmp_result = SET_ATTRIBUTE( tmp_assattr_target_2, const_str_plain_returncode, tmp_assattr_name_2 );
                        if ( tmp_result == false )
                        {
                            assert( ERROR_OCCURRED() );

                            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                            exception_lineno = 1573;
                            type_description_1 = "oooooooo";
                            goto try_except_handler_7;
                        }
                    }
                    branch_no_7:;
                }
                branch_end_6:;
            }
            goto try_end_4;
            // Exception handler code:
            try_except_handler_7:;
            exception_keeper_type_4 = exception_type;
            exception_keeper_value_4 = exception_value;
            exception_keeper_tb_4 = exception_tb;
            exception_keeper_lineno_4 = exception_lineno;
            exception_type = NULL;
            exception_value = NULL;
            exception_tb = NULL;
            exception_lineno = 0;

            Py_XDECREF( var_e );
            var_e = NULL;

            // Re-raise.
            exception_type = exception_keeper_type_4;
            exception_value = exception_keeper_value_4;
            exception_tb = exception_keeper_tb_4;
            exception_lineno = exception_keeper_lineno_4;

            goto try_except_handler_6;
            // End of try:
            try_end_4:;
            Py_XDECREF( var_e );
            var_e = NULL;

            goto branch_end_5;
            branch_no_5:;
            tmp_result = RERAISE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
            if (unlikely( tmp_result == false ))
            {
                exception_lineno = 1558;
            }

            if (exception_tb && exception_tb->tb_frame == &frame_0f3fa34b6ea5a1c6fe10cb63908c593e->m_frame) frame_0f3fa34b6ea5a1c6fe10cb63908c593e->m_frame.f_lineno = exception_tb->tb_lineno;
            type_description_1 = "oooooooo";
            goto try_except_handler_6;
            branch_end_5:;
        }
        goto try_end_5;
        // Exception handler code:
        try_except_handler_6:;
        exception_keeper_type_5 = exception_type;
        exception_keeper_value_5 = exception_value;
        exception_keeper_tb_5 = exception_tb;
        exception_keeper_lineno_5 = exception_lineno;
        exception_type = NULL;
        exception_value = NULL;
        exception_tb = NULL;
        exception_lineno = 0;

        // Restore previous exception.
        SET_CURRENT_EXCEPTION( exception_preserved_type_1, exception_preserved_value_1, exception_preserved_tb_1 );
        // Re-raise.
        exception_type = exception_keeper_type_5;
        exception_value = exception_keeper_value_5;
        exception_tb = exception_keeper_tb_5;
        exception_lineno = exception_keeper_lineno_5;

        goto try_except_handler_2;
        // End of try:
        try_end_5:;
        // Restore previous exception.
        SET_CURRENT_EXCEPTION( exception_preserved_type_1, exception_preserved_value_1, exception_preserved_tb_1 );
        goto try_end_3;
        // exception handler codes exits in all cases
        NUITKA_CANNOT_GET_HERE( subprocess$$$function_54__internal_poll );
        return NULL;
        // End of try:
        try_end_3:;
        goto try_end_6;
        // Return handler code:
        try_return_handler_2:;
        {
            PyObject *tmp_called_instance_3;
            PyObject *tmp_source_name_8;
            PyObject *tmp_call_result_2;
            CHECK_OBJECT( par_self );
            tmp_source_name_8 = par_self;
            tmp_called_instance_3 = LOOKUP_ATTRIBUTE( tmp_source_name_8, const_str_plain__waitpid_lock );
            if ( tmp_called_instance_3 == NULL )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 1575;
                type_description_1 = "oooooooo";
                goto frame_exception_exit_1;
            }
            frame_0f3fa34b6ea5a1c6fe10cb63908c593e->m_frame.f_lineno = 1575;
            tmp_call_result_2 = CALL_METHOD_NO_ARGS( tmp_called_instance_3, const_str_plain_release );
            Py_DECREF( tmp_called_instance_3 );
            if ( tmp_call_result_2 == NULL )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 1575;
                type_description_1 = "oooooooo";
                goto frame_exception_exit_1;
            }
            Py_DECREF( tmp_call_result_2 );
        }
        goto frame_return_exit_1;
        // Exception handler code:
        try_except_handler_2:;
        exception_keeper_type_6 = exception_type;
        exception_keeper_value_6 = exception_value;
        exception_keeper_tb_6 = exception_tb;
        exception_keeper_lineno_6 = exception_lineno;
        exception_type = NULL;
        exception_value = NULL;
        exception_tb = NULL;
        exception_lineno = 0;

        // Preserve existing published exception.
        exception_preserved_type_2 = EXC_TYPE(PyThreadState_GET());
        Py_XINCREF( exception_preserved_type_2 );
        exception_preserved_value_2 = EXC_VALUE(PyThreadState_GET());
        Py_XINCREF( exception_preserved_value_2 );
        exception_preserved_tb_2 = (PyTracebackObject *)EXC_TRACEBACK(PyThreadState_GET());
        Py_XINCREF( exception_preserved_tb_2 );

        if ( exception_keeper_tb_6 == NULL )
        {
            exception_keeper_tb_6 = MAKE_TRACEBACK( frame_0f3fa34b6ea5a1c6fe10cb63908c593e, exception_keeper_lineno_6 );
        }
        else if ( exception_keeper_lineno_6 != 0 )
        {
            exception_keeper_tb_6 = ADD_TRACEBACK( exception_keeper_tb_6, frame_0f3fa34b6ea5a1c6fe10cb63908c593e, exception_keeper_lineno_6 );
        }

        NORMALIZE_EXCEPTION( &exception_keeper_type_6, &exception_keeper_value_6, &exception_keeper_tb_6 );
        PyException_SetTraceback( exception_keeper_value_6, (PyObject *)exception_keeper_tb_6 );
        PUBLISH_EXCEPTION( &exception_keeper_type_6, &exception_keeper_value_6, &exception_keeper_tb_6 );
        // Tried code:
        {
            PyObject *tmp_called_instance_4;
            PyObject *tmp_source_name_9;
            PyObject *tmp_call_result_3;
            CHECK_OBJECT( par_self );
            tmp_source_name_9 = par_self;
            tmp_called_instance_4 = LOOKUP_ATTRIBUTE( tmp_source_name_9, const_str_plain__waitpid_lock );
            if ( tmp_called_instance_4 == NULL )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 1575;
                type_description_1 = "oooooooo";
                goto try_except_handler_8;
            }
            frame_0f3fa34b6ea5a1c6fe10cb63908c593e->m_frame.f_lineno = 1575;
            tmp_call_result_3 = CALL_METHOD_NO_ARGS( tmp_called_instance_4, const_str_plain_release );
            Py_DECREF( tmp_called_instance_4 );
            if ( tmp_call_result_3 == NULL )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 1575;
                type_description_1 = "oooooooo";
                goto try_except_handler_8;
            }
            Py_DECREF( tmp_call_result_3 );
        }
        tmp_result = RERAISE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
        if (unlikely( tmp_result == false ))
        {
            exception_lineno = 1558;
        }

        if (exception_tb && exception_tb->tb_frame == &frame_0f3fa34b6ea5a1c6fe10cb63908c593e->m_frame) frame_0f3fa34b6ea5a1c6fe10cb63908c593e->m_frame.f_lineno = exception_tb->tb_lineno;
        type_description_1 = "oooooooo";
        goto try_except_handler_8;
        // tried codes exits in all cases
        NUITKA_CANNOT_GET_HERE( subprocess$$$function_54__internal_poll );
        return NULL;
        // Exception handler code:
        try_except_handler_8:;
        exception_keeper_type_7 = exception_type;
        exception_keeper_value_7 = exception_value;
        exception_keeper_tb_7 = exception_tb;
        exception_keeper_lineno_7 = exception_lineno;
        exception_type = NULL;
        exception_value = NULL;
        exception_tb = NULL;
        exception_lineno = 0;

        // Restore previous exception.
        SET_CURRENT_EXCEPTION( exception_preserved_type_2, exception_preserved_value_2, exception_preserved_tb_2 );
        // Re-raise.
        exception_type = exception_keeper_type_7;
        exception_value = exception_keeper_value_7;
        exception_tb = exception_keeper_tb_7;
        exception_lineno = exception_keeper_lineno_7;

        goto frame_exception_exit_1;
        // End of try:
        // End of try:
        try_end_6:;
        {
            PyObject *tmp_called_instance_5;
            PyObject *tmp_source_name_10;
            PyObject *tmp_call_result_4;
            CHECK_OBJECT( par_self );
            tmp_source_name_10 = par_self;
            tmp_called_instance_5 = LOOKUP_ATTRIBUTE( tmp_source_name_10, const_str_plain__waitpid_lock );
            if ( tmp_called_instance_5 == NULL )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 1575;
                type_description_1 = "oooooooo";
                goto frame_exception_exit_1;
            }
            frame_0f3fa34b6ea5a1c6fe10cb63908c593e->m_frame.f_lineno = 1575;
            tmp_call_result_4 = CALL_METHOD_NO_ARGS( tmp_called_instance_5, const_str_plain_release );
            Py_DECREF( tmp_called_instance_5 );
            if ( tmp_call_result_4 == NULL )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 1575;
                type_description_1 = "oooooooo";
                goto frame_exception_exit_1;
            }
            Py_DECREF( tmp_call_result_4 );
        }
        branch_no_1:;
    }
    {
        PyObject *tmp_source_name_11;
        CHECK_OBJECT( par_self );
        tmp_source_name_11 = par_self;
        tmp_return_value = LOOKUP_ATTRIBUTE( tmp_source_name_11, const_str_plain_returncode );
        if ( tmp_return_value == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 1576;
            type_description_1 = "oooooooo";
            goto frame_exception_exit_1;
        }
        goto frame_return_exit_1;
    }

#if 0
    RESTORE_FRAME_EXCEPTION( frame_0f3fa34b6ea5a1c6fe10cb63908c593e );
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto frame_no_exception_1;

    frame_return_exit_1:;
#if 0
    RESTORE_FRAME_EXCEPTION( frame_0f3fa34b6ea5a1c6fe10cb63908c593e );
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto try_return_handler_1;

    frame_exception_exit_1:;

#if 0
    RESTORE_FRAME_EXCEPTION( frame_0f3fa34b6ea5a1c6fe10cb63908c593e );
#endif

    if ( exception_tb == NULL )
    {
        exception_tb = MAKE_TRACEBACK( frame_0f3fa34b6ea5a1c6fe10cb63908c593e, exception_lineno );
    }
    else if ( exception_tb->tb_frame != &frame_0f3fa34b6ea5a1c6fe10cb63908c593e->m_frame )
    {
        exception_tb = ADD_TRACEBACK( exception_tb, frame_0f3fa34b6ea5a1c6fe10cb63908c593e, exception_lineno );
    }

    // Attachs locals to frame if any.
    Nuitka_Frame_AttachLocals(
        (struct Nuitka_FrameObject *)frame_0f3fa34b6ea5a1c6fe10cb63908c593e,
        type_description_1,
        par_self,
        par__deadstate,
        par__waitpid,
        par__WNOHANG,
        par__ECHILD,
        var_pid,
        var_sts,
        var_e
    );


    // Release cached frame.
    if ( frame_0f3fa34b6ea5a1c6fe10cb63908c593e == cache_frame_0f3fa34b6ea5a1c6fe10cb63908c593e )
    {
        Py_DECREF( frame_0f3fa34b6ea5a1c6fe10cb63908c593e );
    }
    cache_frame_0f3fa34b6ea5a1c6fe10cb63908c593e = NULL;

    assertFrameObject( frame_0f3fa34b6ea5a1c6fe10cb63908c593e );

    // Put the previous frame back on top.
    popFrameStack();

    // Return the error.
    goto try_except_handler_1;

    frame_no_exception_1:;
    // tried codes exits in all cases
    NUITKA_CANNOT_GET_HERE( subprocess$$$function_54__internal_poll );
    return NULL;
    // Return handler code:
    try_return_handler_1:;
    CHECK_OBJECT( (PyObject *)par_self );
    Py_DECREF( par_self );
    par_self = NULL;

    CHECK_OBJECT( (PyObject *)par__deadstate );
    Py_DECREF( par__deadstate );
    par__deadstate = NULL;

    CHECK_OBJECT( (PyObject *)par__waitpid );
    Py_DECREF( par__waitpid );
    par__waitpid = NULL;

    CHECK_OBJECT( (PyObject *)par__WNOHANG );
    Py_DECREF( par__WNOHANG );
    par__WNOHANG = NULL;

    CHECK_OBJECT( (PyObject *)par__ECHILD );
    Py_DECREF( par__ECHILD );
    par__ECHILD = NULL;

    Py_XDECREF( var_pid );
    var_pid = NULL;

    Py_XDECREF( var_sts );
    var_sts = NULL;

    Py_XDECREF( var_e );
    var_e = NULL;

    goto function_return_exit;
    // Exception handler code:
    try_except_handler_1:;
    exception_keeper_type_8 = exception_type;
    exception_keeper_value_8 = exception_value;
    exception_keeper_tb_8 = exception_tb;
    exception_keeper_lineno_8 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    CHECK_OBJECT( (PyObject *)par_self );
    Py_DECREF( par_self );
    par_self = NULL;

    CHECK_OBJECT( (PyObject *)par__deadstate );
    Py_DECREF( par__deadstate );
    par__deadstate = NULL;

    CHECK_OBJECT( (PyObject *)par__waitpid );
    Py_DECREF( par__waitpid );
    par__waitpid = NULL;

    CHECK_OBJECT( (PyObject *)par__WNOHANG );
    Py_DECREF( par__WNOHANG );
    par__WNOHANG = NULL;

    CHECK_OBJECT( (PyObject *)par__ECHILD );
    Py_DECREF( par__ECHILD );
    par__ECHILD = NULL;

    Py_XDECREF( var_pid );
    var_pid = NULL;

    Py_XDECREF( var_sts );
    var_sts = NULL;

    Py_XDECREF( var_e );
    var_e = NULL;

    // Re-raise.
    exception_type = exception_keeper_type_8;
    exception_value = exception_keeper_value_8;
    exception_tb = exception_keeper_tb_8;
    exception_lineno = exception_keeper_lineno_8;

    goto function_exception_exit;
    // End of try:

    // Return statement must have exited already.
    NUITKA_CANNOT_GET_HERE( subprocess$$$function_54__internal_poll );
    return NULL;

function_exception_exit:
    assert( exception_type );
    RESTORE_ERROR_OCCURRED( exception_type, exception_value, exception_tb );

    return NULL;

function_return_exit:
   // Function cleanup code if any.


   // Actual function exit with return value, making sure we did not make
   // the error status worse despite non-NULL return.
   CHECK_OBJECT( tmp_return_value );
   assert( had_error || !ERROR_OCCURRED() );
   return tmp_return_value;
}


static PyObject *impl_subprocess$$$function_55__try_wait( struct Nuitka_FunctionObject const *self, PyObject **python_pars )
{
    // Preserve error status for checks
#ifndef __NUITKA_NO_ASSERT__
    NUITKA_MAY_BE_UNUSED bool had_error = ERROR_OCCURRED();
#endif

    // Local variable declarations.
    PyObject *par_self = python_pars[ 0 ];
    PyObject *par_wait_flags = python_pars[ 1 ];
    PyObject *var_pid = NULL;
    PyObject *var_sts = NULL;
    PyObject *tmp_tuple_unpack_1__element_1 = NULL;
    PyObject *tmp_tuple_unpack_1__element_2 = NULL;
    PyObject *tmp_tuple_unpack_1__source_iter = NULL;
    struct Nuitka_FrameObject *frame_3e52afa8f05d71315554cd661e6674c6;
    NUITKA_MAY_BE_UNUSED char const *type_description_1 = NULL;
    PyObject *exception_type = NULL;
    PyObject *exception_value = NULL;
    PyTracebackObject *exception_tb = NULL;
    NUITKA_MAY_BE_UNUSED int exception_lineno = 0;
    PyObject *tmp_iterator_attempt;
    PyObject *exception_keeper_type_1;
    PyObject *exception_keeper_value_1;
    PyTracebackObject *exception_keeper_tb_1;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_1;
    PyObject *exception_keeper_type_2;
    PyObject *exception_keeper_value_2;
    PyTracebackObject *exception_keeper_tb_2;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_2;
    PyObject *exception_keeper_type_3;
    PyObject *exception_keeper_value_3;
    PyTracebackObject *exception_keeper_tb_3;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_3;
    PyObject *exception_preserved_type_1;
    PyObject *exception_preserved_value_1;
    PyTracebackObject *exception_preserved_tb_1;
    int tmp_res;
    bool tmp_result;
    PyObject *exception_keeper_type_4;
    PyObject *exception_keeper_value_4;
    PyTracebackObject *exception_keeper_tb_4;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_4;
    PyObject *tmp_return_value = NULL;
    static struct Nuitka_FrameObject *cache_frame_3e52afa8f05d71315554cd661e6674c6 = NULL;
    PyObject *exception_keeper_type_5;
    PyObject *exception_keeper_value_5;
    PyTracebackObject *exception_keeper_tb_5;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_5;

    // Actual function body.
    // Tried code:
    MAKE_OR_REUSE_FRAME( cache_frame_3e52afa8f05d71315554cd661e6674c6, codeobj_3e52afa8f05d71315554cd661e6674c6, module_subprocess, sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *) );
    frame_3e52afa8f05d71315554cd661e6674c6 = cache_frame_3e52afa8f05d71315554cd661e6674c6;

    // Push the new frame as the currently active one.
    pushFrameStack( frame_3e52afa8f05d71315554cd661e6674c6 );

    // Mark the frame object as in use, ref count 1 will be up for reuse.
    assert( Py_REFCNT( frame_3e52afa8f05d71315554cd661e6674c6 ) == 2 ); // Frame stack

    // Framed code:
    // Tried code:
    // Tried code:
    {
        PyObject *tmp_assign_source_1;
        PyObject *tmp_iter_arg_1;
        PyObject *tmp_called_name_1;
        PyObject *tmp_source_name_1;
        PyObject *tmp_mvar_value_1;
        PyObject *tmp_args_element_name_1;
        PyObject *tmp_source_name_2;
        PyObject *tmp_args_element_name_2;
        tmp_mvar_value_1 = GET_STRING_DICT_VALUE( moduledict_subprocess, (Nuitka_StringObject *)const_str_plain_os );

        if (unlikely( tmp_mvar_value_1 == NULL ))
        {
            tmp_mvar_value_1 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_os );
        }

        if ( tmp_mvar_value_1 == NULL )
        {

            exception_type = PyExc_NameError;
            Py_INCREF( exception_type );
            exception_value = PyUnicode_FromFormat( "name '%s' is not defined", "os" );
            exception_tb = NULL;
            NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
            CHAIN_EXCEPTION( exception_value );

            exception_lineno = 1582;
            type_description_1 = "oooo";
            goto try_except_handler_3;
        }

        tmp_source_name_1 = tmp_mvar_value_1;
        tmp_called_name_1 = LOOKUP_ATTRIBUTE( tmp_source_name_1, const_str_plain_waitpid );
        if ( tmp_called_name_1 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 1582;
            type_description_1 = "oooo";
            goto try_except_handler_3;
        }
        CHECK_OBJECT( par_self );
        tmp_source_name_2 = par_self;
        tmp_args_element_name_1 = LOOKUP_ATTRIBUTE( tmp_source_name_2, const_str_plain_pid );
        if ( tmp_args_element_name_1 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
            Py_DECREF( tmp_called_name_1 );

            exception_lineno = 1582;
            type_description_1 = "oooo";
            goto try_except_handler_3;
        }
        CHECK_OBJECT( par_wait_flags );
        tmp_args_element_name_2 = par_wait_flags;
        frame_3e52afa8f05d71315554cd661e6674c6->m_frame.f_lineno = 1582;
        {
            PyObject *call_args[] = { tmp_args_element_name_1, tmp_args_element_name_2 };
            tmp_iter_arg_1 = CALL_FUNCTION_WITH_ARGS2( tmp_called_name_1, call_args );
        }

        Py_DECREF( tmp_called_name_1 );
        Py_DECREF( tmp_args_element_name_1 );
        if ( tmp_iter_arg_1 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 1582;
            type_description_1 = "oooo";
            goto try_except_handler_3;
        }
        tmp_assign_source_1 = MAKE_UNPACK_ITERATOR( tmp_iter_arg_1 );
        Py_DECREF( tmp_iter_arg_1 );
        if ( tmp_assign_source_1 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 1582;
            type_description_1 = "oooo";
            goto try_except_handler_3;
        }
        assert( tmp_tuple_unpack_1__source_iter == NULL );
        tmp_tuple_unpack_1__source_iter = tmp_assign_source_1;
    }
    // Tried code:
    {
        PyObject *tmp_assign_source_2;
        PyObject *tmp_unpack_1;
        CHECK_OBJECT( tmp_tuple_unpack_1__source_iter );
        tmp_unpack_1 = tmp_tuple_unpack_1__source_iter;
        tmp_assign_source_2 = UNPACK_NEXT( tmp_unpack_1, 0, 2 );
        if ( tmp_assign_source_2 == NULL )
        {
            if ( !ERROR_OCCURRED() )
            {
                exception_type = PyExc_StopIteration;
                Py_INCREF( exception_type );
                exception_value = NULL;
                exception_tb = NULL;
            }
            else
            {
                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
            }


            type_description_1 = "oooo";
            exception_lineno = 1582;
            goto try_except_handler_4;
        }
        assert( tmp_tuple_unpack_1__element_1 == NULL );
        tmp_tuple_unpack_1__element_1 = tmp_assign_source_2;
    }
    {
        PyObject *tmp_assign_source_3;
        PyObject *tmp_unpack_2;
        CHECK_OBJECT( tmp_tuple_unpack_1__source_iter );
        tmp_unpack_2 = tmp_tuple_unpack_1__source_iter;
        tmp_assign_source_3 = UNPACK_NEXT( tmp_unpack_2, 1, 2 );
        if ( tmp_assign_source_3 == NULL )
        {
            if ( !ERROR_OCCURRED() )
            {
                exception_type = PyExc_StopIteration;
                Py_INCREF( exception_type );
                exception_value = NULL;
                exception_tb = NULL;
            }
            else
            {
                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
            }


            type_description_1 = "oooo";
            exception_lineno = 1582;
            goto try_except_handler_4;
        }
        assert( tmp_tuple_unpack_1__element_2 == NULL );
        tmp_tuple_unpack_1__element_2 = tmp_assign_source_3;
    }
    {
        PyObject *tmp_iterator_name_1;
        CHECK_OBJECT( tmp_tuple_unpack_1__source_iter );
        tmp_iterator_name_1 = tmp_tuple_unpack_1__source_iter;
        // Check if iterator has left-over elements.
        CHECK_OBJECT( tmp_iterator_name_1 ); assert( HAS_ITERNEXT( tmp_iterator_name_1 ) );

        tmp_iterator_attempt = (*Py_TYPE( tmp_iterator_name_1 )->tp_iternext)( tmp_iterator_name_1 );

        if (likely( tmp_iterator_attempt == NULL ))
        {
            PyObject *error = GET_ERROR_OCCURRED();

            if ( error != NULL )
            {
                if ( EXCEPTION_MATCH_BOOL_SINGLE( error, PyExc_StopIteration ))
                {
                    CLEAR_ERROR_OCCURRED();
                }
                else
                {
                    FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );

                    type_description_1 = "oooo";
                    exception_lineno = 1582;
                    goto try_except_handler_4;
                }
            }
        }
        else
        {
            Py_DECREF( tmp_iterator_attempt );

            // TODO: Could avoid PyErr_Format.
#if PYTHON_VERSION < 300
            PyErr_Format( PyExc_ValueError, "too many values to unpack" );
#else
            PyErr_Format( PyExc_ValueError, "too many values to unpack (expected 2)" );
#endif
            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );

            type_description_1 = "oooo";
            exception_lineno = 1582;
            goto try_except_handler_4;
        }
    }
    goto try_end_1;
    // Exception handler code:
    try_except_handler_4:;
    exception_keeper_type_1 = exception_type;
    exception_keeper_value_1 = exception_value;
    exception_keeper_tb_1 = exception_tb;
    exception_keeper_lineno_1 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    CHECK_OBJECT( (PyObject *)tmp_tuple_unpack_1__source_iter );
    Py_DECREF( tmp_tuple_unpack_1__source_iter );
    tmp_tuple_unpack_1__source_iter = NULL;

    // Re-raise.
    exception_type = exception_keeper_type_1;
    exception_value = exception_keeper_value_1;
    exception_tb = exception_keeper_tb_1;
    exception_lineno = exception_keeper_lineno_1;

    goto try_except_handler_3;
    // End of try:
    try_end_1:;
    goto try_end_2;
    // Exception handler code:
    try_except_handler_3:;
    exception_keeper_type_2 = exception_type;
    exception_keeper_value_2 = exception_value;
    exception_keeper_tb_2 = exception_tb;
    exception_keeper_lineno_2 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    Py_XDECREF( tmp_tuple_unpack_1__element_1 );
    tmp_tuple_unpack_1__element_1 = NULL;

    Py_XDECREF( tmp_tuple_unpack_1__element_2 );
    tmp_tuple_unpack_1__element_2 = NULL;

    // Re-raise.
    exception_type = exception_keeper_type_2;
    exception_value = exception_keeper_value_2;
    exception_tb = exception_keeper_tb_2;
    exception_lineno = exception_keeper_lineno_2;

    goto try_except_handler_2;
    // End of try:
    try_end_2:;
    CHECK_OBJECT( (PyObject *)tmp_tuple_unpack_1__source_iter );
    Py_DECREF( tmp_tuple_unpack_1__source_iter );
    tmp_tuple_unpack_1__source_iter = NULL;

    {
        PyObject *tmp_assign_source_4;
        CHECK_OBJECT( tmp_tuple_unpack_1__element_1 );
        tmp_assign_source_4 = tmp_tuple_unpack_1__element_1;
        assert( var_pid == NULL );
        Py_INCREF( tmp_assign_source_4 );
        var_pid = tmp_assign_source_4;
    }
    Py_XDECREF( tmp_tuple_unpack_1__element_1 );
    tmp_tuple_unpack_1__element_1 = NULL;

    {
        PyObject *tmp_assign_source_5;
        CHECK_OBJECT( tmp_tuple_unpack_1__element_2 );
        tmp_assign_source_5 = tmp_tuple_unpack_1__element_2;
        assert( var_sts == NULL );
        Py_INCREF( tmp_assign_source_5 );
        var_sts = tmp_assign_source_5;
    }
    Py_XDECREF( tmp_tuple_unpack_1__element_2 );
    tmp_tuple_unpack_1__element_2 = NULL;

    goto try_end_3;
    // Exception handler code:
    try_except_handler_2:;
    exception_keeper_type_3 = exception_type;
    exception_keeper_value_3 = exception_value;
    exception_keeper_tb_3 = exception_tb;
    exception_keeper_lineno_3 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    // Preserve existing published exception.
    exception_preserved_type_1 = EXC_TYPE(PyThreadState_GET());
    Py_XINCREF( exception_preserved_type_1 );
    exception_preserved_value_1 = EXC_VALUE(PyThreadState_GET());
    Py_XINCREF( exception_preserved_value_1 );
    exception_preserved_tb_1 = (PyTracebackObject *)EXC_TRACEBACK(PyThreadState_GET());
    Py_XINCREF( exception_preserved_tb_1 );

    if ( exception_keeper_tb_3 == NULL )
    {
        exception_keeper_tb_3 = MAKE_TRACEBACK( frame_3e52afa8f05d71315554cd661e6674c6, exception_keeper_lineno_3 );
    }
    else if ( exception_keeper_lineno_3 != 0 )
    {
        exception_keeper_tb_3 = ADD_TRACEBACK( exception_keeper_tb_3, frame_3e52afa8f05d71315554cd661e6674c6, exception_keeper_lineno_3 );
    }

    NORMALIZE_EXCEPTION( &exception_keeper_type_3, &exception_keeper_value_3, &exception_keeper_tb_3 );
    PyException_SetTraceback( exception_keeper_value_3, (PyObject *)exception_keeper_tb_3 );
    PUBLISH_EXCEPTION( &exception_keeper_type_3, &exception_keeper_value_3, &exception_keeper_tb_3 );
    // Tried code:
    {
        nuitka_bool tmp_condition_result_1;
        PyObject *tmp_compexpr_left_1;
        PyObject *tmp_compexpr_right_1;
        tmp_compexpr_left_1 = EXC_TYPE(PyThreadState_GET());
        tmp_compexpr_right_1 = PyExc_ChildProcessError;
        tmp_res = EXCEPTION_MATCH_BOOL( tmp_compexpr_left_1, tmp_compexpr_right_1 );
        if ( tmp_res == -1 )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 1583;
            type_description_1 = "oooo";
            goto try_except_handler_5;
        }
        tmp_condition_result_1 = ( tmp_res != 0 ) ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
        if ( tmp_condition_result_1 == NUITKA_BOOL_TRUE )
        {
            goto branch_yes_1;
        }
        else
        {
            goto branch_no_1;
        }
        branch_yes_1:;
        {
            PyObject *tmp_assign_source_6;
            PyObject *tmp_source_name_3;
            CHECK_OBJECT( par_self );
            tmp_source_name_3 = par_self;
            tmp_assign_source_6 = LOOKUP_ATTRIBUTE( tmp_source_name_3, const_str_plain_pid );
            if ( tmp_assign_source_6 == NULL )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 1587;
                type_description_1 = "oooo";
                goto try_except_handler_5;
            }
            assert( var_pid == NULL );
            var_pid = tmp_assign_source_6;
        }
        {
            PyObject *tmp_assign_source_7;
            tmp_assign_source_7 = const_int_0;
            assert( var_sts == NULL );
            Py_INCREF( tmp_assign_source_7 );
            var_sts = tmp_assign_source_7;
        }
        goto branch_end_1;
        branch_no_1:;
        tmp_result = RERAISE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
        if (unlikely( tmp_result == false ))
        {
            exception_lineno = 1581;
        }

        if (exception_tb && exception_tb->tb_frame == &frame_3e52afa8f05d71315554cd661e6674c6->m_frame) frame_3e52afa8f05d71315554cd661e6674c6->m_frame.f_lineno = exception_tb->tb_lineno;
        type_description_1 = "oooo";
        goto try_except_handler_5;
        branch_end_1:;
    }
    goto try_end_4;
    // Exception handler code:
    try_except_handler_5:;
    exception_keeper_type_4 = exception_type;
    exception_keeper_value_4 = exception_value;
    exception_keeper_tb_4 = exception_tb;
    exception_keeper_lineno_4 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    // Restore previous exception.
    SET_CURRENT_EXCEPTION( exception_preserved_type_1, exception_preserved_value_1, exception_preserved_tb_1 );
    // Re-raise.
    exception_type = exception_keeper_type_4;
    exception_value = exception_keeper_value_4;
    exception_tb = exception_keeper_tb_4;
    exception_lineno = exception_keeper_lineno_4;

    goto frame_exception_exit_1;
    // End of try:
    try_end_4:;
    // Restore previous exception.
    SET_CURRENT_EXCEPTION( exception_preserved_type_1, exception_preserved_value_1, exception_preserved_tb_1 );
    goto try_end_3;
    // exception handler codes exits in all cases
    NUITKA_CANNOT_GET_HERE( subprocess$$$function_55__try_wait );
    return NULL;
    // End of try:
    try_end_3:;
    {
        PyObject *tmp_tuple_element_1;
        if ( var_pid == NULL )
        {

            exception_type = PyExc_UnboundLocalError;
            Py_INCREF( exception_type );
            exception_value = PyUnicode_FromFormat( "local variable '%s' referenced before assignment", "pid" );
            exception_tb = NULL;
            NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
            CHAIN_EXCEPTION( exception_value );

            exception_lineno = 1589;
            type_description_1 = "oooo";
            goto frame_exception_exit_1;
        }

        tmp_tuple_element_1 = var_pid;
        tmp_return_value = PyTuple_New( 2 );
        Py_INCREF( tmp_tuple_element_1 );
        PyTuple_SET_ITEM( tmp_return_value, 0, tmp_tuple_element_1 );
        if ( var_sts == NULL )
        {
            Py_DECREF( tmp_return_value );
            exception_type = PyExc_UnboundLocalError;
            Py_INCREF( exception_type );
            exception_value = PyUnicode_FromFormat( "local variable '%s' referenced before assignment", "sts" );
            exception_tb = NULL;
            NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
            CHAIN_EXCEPTION( exception_value );

            exception_lineno = 1589;
            type_description_1 = "oooo";
            goto frame_exception_exit_1;
        }

        tmp_tuple_element_1 = var_sts;
        Py_INCREF( tmp_tuple_element_1 );
        PyTuple_SET_ITEM( tmp_return_value, 1, tmp_tuple_element_1 );
        goto frame_return_exit_1;
    }

#if 0
    RESTORE_FRAME_EXCEPTION( frame_3e52afa8f05d71315554cd661e6674c6 );
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto frame_no_exception_1;

    frame_return_exit_1:;
#if 0
    RESTORE_FRAME_EXCEPTION( frame_3e52afa8f05d71315554cd661e6674c6 );
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto try_return_handler_1;

    frame_exception_exit_1:;

#if 0
    RESTORE_FRAME_EXCEPTION( frame_3e52afa8f05d71315554cd661e6674c6 );
#endif

    if ( exception_tb == NULL )
    {
        exception_tb = MAKE_TRACEBACK( frame_3e52afa8f05d71315554cd661e6674c6, exception_lineno );
    }
    else if ( exception_tb->tb_frame != &frame_3e52afa8f05d71315554cd661e6674c6->m_frame )
    {
        exception_tb = ADD_TRACEBACK( exception_tb, frame_3e52afa8f05d71315554cd661e6674c6, exception_lineno );
    }

    // Attachs locals to frame if any.
    Nuitka_Frame_AttachLocals(
        (struct Nuitka_FrameObject *)frame_3e52afa8f05d71315554cd661e6674c6,
        type_description_1,
        par_self,
        par_wait_flags,
        var_pid,
        var_sts
    );


    // Release cached frame.
    if ( frame_3e52afa8f05d71315554cd661e6674c6 == cache_frame_3e52afa8f05d71315554cd661e6674c6 )
    {
        Py_DECREF( frame_3e52afa8f05d71315554cd661e6674c6 );
    }
    cache_frame_3e52afa8f05d71315554cd661e6674c6 = NULL;

    assertFrameObject( frame_3e52afa8f05d71315554cd661e6674c6 );

    // Put the previous frame back on top.
    popFrameStack();

    // Return the error.
    goto try_except_handler_1;

    frame_no_exception_1:;
    // tried codes exits in all cases
    NUITKA_CANNOT_GET_HERE( subprocess$$$function_55__try_wait );
    return NULL;
    // Return handler code:
    try_return_handler_1:;
    CHECK_OBJECT( (PyObject *)par_self );
    Py_DECREF( par_self );
    par_self = NULL;

    CHECK_OBJECT( (PyObject *)par_wait_flags );
    Py_DECREF( par_wait_flags );
    par_wait_flags = NULL;

    Py_XDECREF( var_pid );
    var_pid = NULL;

    Py_XDECREF( var_sts );
    var_sts = NULL;

    goto function_return_exit;
    // Exception handler code:
    try_except_handler_1:;
    exception_keeper_type_5 = exception_type;
    exception_keeper_value_5 = exception_value;
    exception_keeper_tb_5 = exception_tb;
    exception_keeper_lineno_5 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    CHECK_OBJECT( (PyObject *)par_self );
    Py_DECREF( par_self );
    par_self = NULL;

    CHECK_OBJECT( (PyObject *)par_wait_flags );
    Py_DECREF( par_wait_flags );
    par_wait_flags = NULL;

    Py_XDECREF( var_pid );
    var_pid = NULL;

    Py_XDECREF( var_sts );
    var_sts = NULL;

    // Re-raise.
    exception_type = exception_keeper_type_5;
    exception_value = exception_keeper_value_5;
    exception_tb = exception_keeper_tb_5;
    exception_lineno = exception_keeper_lineno_5;

    goto function_exception_exit;
    // End of try:

    // Return statement must have exited already.
    NUITKA_CANNOT_GET_HERE( subprocess$$$function_55__try_wait );
    return NULL;

function_exception_exit:
    assert( exception_type );
    RESTORE_ERROR_OCCURRED( exception_type, exception_value, exception_tb );

    return NULL;

function_return_exit:
   // Function cleanup code if any.


   // Actual function exit with return value, making sure we did not make
   // the error status worse despite non-NULL return.
   CHECK_OBJECT( tmp_return_value );
   assert( had_error || !ERROR_OCCURRED() );
   return tmp_return_value;
}


static PyObject *impl_subprocess$$$function_56__wait( struct Nuitka_FunctionObject const *self, PyObject **python_pars )
{
    // Preserve error status for checks
#ifndef __NUITKA_NO_ASSERT__
    NUITKA_MAY_BE_UNUSED bool had_error = ERROR_OCCURRED();
#endif

    // Local variable declarations.
    PyObject *par_self = python_pars[ 0 ];
    PyObject *par_timeout = python_pars[ 1 ];
    PyObject *var_endtime = NULL;
    PyObject *var_delay = NULL;
    PyObject *var_pid = NULL;
    PyObject *var_sts = NULL;
    PyObject *var_remaining = NULL;
    PyObject *tmp_tuple_unpack_1__element_1 = NULL;
    PyObject *tmp_tuple_unpack_1__element_2 = NULL;
    PyObject *tmp_tuple_unpack_1__source_iter = NULL;
    PyObject *tmp_tuple_unpack_2__element_1 = NULL;
    PyObject *tmp_tuple_unpack_2__element_2 = NULL;
    PyObject *tmp_tuple_unpack_2__source_iter = NULL;
    PyObject *tmp_with_1__enter = NULL;
    PyObject *tmp_with_1__exit = NULL;
    PyObject *tmp_with_1__indicator = NULL;
    PyObject *tmp_with_1__source = NULL;
    struct Nuitka_FrameObject *frame_9ac704ea3f4336924bb76de6e74b8ce5;
    NUITKA_MAY_BE_UNUSED char const *type_description_1 = NULL;
    PyObject *exception_type = NULL;
    PyObject *exception_value = NULL;
    PyTracebackObject *exception_tb = NULL;
    NUITKA_MAY_BE_UNUSED int exception_lineno = 0;
    PyObject *tmp_return_value = NULL;
    PyObject *tmp_iterator_attempt;
    PyObject *exception_keeper_type_1;
    PyObject *exception_keeper_value_1;
    PyTracebackObject *exception_keeper_tb_1;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_1;
    PyObject *exception_keeper_type_2;
    PyObject *exception_keeper_value_2;
    PyTracebackObject *exception_keeper_tb_2;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_2;
    int tmp_res;
    PyObject *exception_keeper_type_3;
    PyObject *exception_keeper_value_3;
    PyTracebackObject *exception_keeper_tb_3;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_3;
    PyObject *exception_preserved_type_1;
    PyObject *exception_preserved_value_1;
    PyTracebackObject *exception_preserved_tb_1;
    bool tmp_result;
    PyObject *exception_keeper_type_4;
    PyObject *exception_keeper_value_4;
    PyTracebackObject *exception_keeper_tb_4;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_4;
    PyObject *exception_keeper_type_5;
    PyObject *exception_keeper_value_5;
    PyTracebackObject *exception_keeper_tb_5;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_5;
    PyObject *exception_keeper_type_6;
    PyObject *exception_keeper_value_6;
    PyTracebackObject *exception_keeper_tb_6;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_6;
    PyObject *exception_keeper_type_7;
    PyObject *exception_keeper_value_7;
    PyTracebackObject *exception_keeper_tb_7;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_7;
    PyObject *exception_preserved_type_2;
    PyObject *exception_preserved_value_2;
    PyTracebackObject *exception_preserved_tb_2;
    PyObject *exception_keeper_type_8;
    PyObject *exception_keeper_value_8;
    PyTracebackObject *exception_keeper_tb_8;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_8;
    PyObject *exception_keeper_type_9;
    PyObject *exception_keeper_value_9;
    PyTracebackObject *exception_keeper_tb_9;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_9;
    PyObject *exception_keeper_type_10;
    PyObject *exception_keeper_value_10;
    PyTracebackObject *exception_keeper_tb_10;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_10;
    static struct Nuitka_FrameObject *cache_frame_9ac704ea3f4336924bb76de6e74b8ce5 = NULL;
    PyObject *exception_keeper_type_11;
    PyObject *exception_keeper_value_11;
    PyTracebackObject *exception_keeper_tb_11;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_11;

    // Actual function body.
    // Tried code:
    MAKE_OR_REUSE_FRAME( cache_frame_9ac704ea3f4336924bb76de6e74b8ce5, codeobj_9ac704ea3f4336924bb76de6e74b8ce5, module_subprocess, sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *) );
    frame_9ac704ea3f4336924bb76de6e74b8ce5 = cache_frame_9ac704ea3f4336924bb76de6e74b8ce5;

    // Push the new frame as the currently active one.
    pushFrameStack( frame_9ac704ea3f4336924bb76de6e74b8ce5 );

    // Mark the frame object as in use, ref count 1 will be up for reuse.
    assert( Py_REFCNT( frame_9ac704ea3f4336924bb76de6e74b8ce5 ) == 2 ); // Frame stack

    // Framed code:
    {
        nuitka_bool tmp_condition_result_1;
        PyObject *tmp_compexpr_left_1;
        PyObject *tmp_compexpr_right_1;
        PyObject *tmp_source_name_1;
        CHECK_OBJECT( par_self );
        tmp_source_name_1 = par_self;
        tmp_compexpr_left_1 = LOOKUP_ATTRIBUTE( tmp_source_name_1, const_str_plain_returncode );
        if ( tmp_compexpr_left_1 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 1594;
            type_description_1 = "ooooooo";
            goto frame_exception_exit_1;
        }
        tmp_compexpr_right_1 = Py_None;
        tmp_condition_result_1 = ( tmp_compexpr_left_1 != tmp_compexpr_right_1 ) ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
        Py_DECREF( tmp_compexpr_left_1 );
        if ( tmp_condition_result_1 == NUITKA_BOOL_TRUE )
        {
            goto branch_yes_1;
        }
        else
        {
            goto branch_no_1;
        }
        branch_yes_1:;
        {
            PyObject *tmp_source_name_2;
            CHECK_OBJECT( par_self );
            tmp_source_name_2 = par_self;
            tmp_return_value = LOOKUP_ATTRIBUTE( tmp_source_name_2, const_str_plain_returncode );
            if ( tmp_return_value == NULL )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 1595;
                type_description_1 = "ooooooo";
                goto frame_exception_exit_1;
            }
            goto frame_return_exit_1;
        }
        branch_no_1:;
    }
    {
        nuitka_bool tmp_condition_result_2;
        PyObject *tmp_compexpr_left_2;
        PyObject *tmp_compexpr_right_2;
        CHECK_OBJECT( par_timeout );
        tmp_compexpr_left_2 = par_timeout;
        tmp_compexpr_right_2 = Py_None;
        tmp_condition_result_2 = ( tmp_compexpr_left_2 != tmp_compexpr_right_2 ) ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
        if ( tmp_condition_result_2 == NUITKA_BOOL_TRUE )
        {
            goto branch_yes_2;
        }
        else
        {
            goto branch_no_2;
        }
        branch_yes_2:;
        {
            PyObject *tmp_assign_source_1;
            PyObject *tmp_left_name_1;
            PyObject *tmp_called_name_1;
            PyObject *tmp_mvar_value_1;
            PyObject *tmp_right_name_1;
            tmp_mvar_value_1 = GET_STRING_DICT_VALUE( moduledict_subprocess, (Nuitka_StringObject *)const_str_plain__time );

            if (unlikely( tmp_mvar_value_1 == NULL ))
            {
                tmp_mvar_value_1 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain__time );
            }

            if ( tmp_mvar_value_1 == NULL )
            {

                exception_type = PyExc_NameError;
                Py_INCREF( exception_type );
                exception_value = PyUnicode_FromFormat( "name '%s' is not defined", "_time" );
                exception_tb = NULL;
                NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
                CHAIN_EXCEPTION( exception_value );

                exception_lineno = 1598;
                type_description_1 = "ooooooo";
                goto frame_exception_exit_1;
            }

            tmp_called_name_1 = tmp_mvar_value_1;
            frame_9ac704ea3f4336924bb76de6e74b8ce5->m_frame.f_lineno = 1598;
            tmp_left_name_1 = CALL_FUNCTION_NO_ARGS( tmp_called_name_1 );
            if ( tmp_left_name_1 == NULL )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 1598;
                type_description_1 = "ooooooo";
                goto frame_exception_exit_1;
            }
            CHECK_OBJECT( par_timeout );
            tmp_right_name_1 = par_timeout;
            tmp_assign_source_1 = BINARY_OPERATION_ADD_OBJECT_OBJECT( tmp_left_name_1, tmp_right_name_1 );
            Py_DECREF( tmp_left_name_1 );
            if ( tmp_assign_source_1 == NULL )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 1598;
                type_description_1 = "ooooooo";
                goto frame_exception_exit_1;
            }
            assert( var_endtime == NULL );
            var_endtime = tmp_assign_source_1;
        }
        {
            PyObject *tmp_assign_source_2;
            tmp_assign_source_2 = const_float_0_0005;
            assert( var_delay == NULL );
            Py_INCREF( tmp_assign_source_2 );
            var_delay = tmp_assign_source_2;
        }
        loop_start_1:;
        {
            nuitka_bool tmp_condition_result_3;
            PyObject *tmp_called_instance_1;
            PyObject *tmp_source_name_3;
            PyObject *tmp_call_result_1;
            int tmp_truth_name_1;
            CHECK_OBJECT( par_self );
            tmp_source_name_3 = par_self;
            tmp_called_instance_1 = LOOKUP_ATTRIBUTE( tmp_source_name_3, const_str_plain__waitpid_lock );
            if ( tmp_called_instance_1 == NULL )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 1603;
                type_description_1 = "ooooooo";
                goto frame_exception_exit_1;
            }
            frame_9ac704ea3f4336924bb76de6e74b8ce5->m_frame.f_lineno = 1603;
            tmp_call_result_1 = CALL_METHOD_WITH_ARGS1( tmp_called_instance_1, const_str_plain_acquire, &PyTuple_GET_ITEM( const_tuple_false_tuple, 0 ) );

            Py_DECREF( tmp_called_instance_1 );
            if ( tmp_call_result_1 == NULL )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 1603;
                type_description_1 = "ooooooo";
                goto frame_exception_exit_1;
            }
            tmp_truth_name_1 = CHECK_IF_TRUE( tmp_call_result_1 );
            if ( tmp_truth_name_1 == -1 )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
                Py_DECREF( tmp_call_result_1 );

                exception_lineno = 1603;
                type_description_1 = "ooooooo";
                goto frame_exception_exit_1;
            }
            tmp_condition_result_3 = tmp_truth_name_1 == 1 ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
            Py_DECREF( tmp_call_result_1 );
            if ( tmp_condition_result_3 == NUITKA_BOOL_TRUE )
            {
                goto branch_yes_3;
            }
            else
            {
                goto branch_no_3;
            }
            branch_yes_3:;
            // Tried code:
            {
                nuitka_bool tmp_condition_result_4;
                PyObject *tmp_compexpr_left_3;
                PyObject *tmp_compexpr_right_3;
                PyObject *tmp_source_name_4;
                CHECK_OBJECT( par_self );
                tmp_source_name_4 = par_self;
                tmp_compexpr_left_3 = LOOKUP_ATTRIBUTE( tmp_source_name_4, const_str_plain_returncode );
                if ( tmp_compexpr_left_3 == NULL )
                {
                    assert( ERROR_OCCURRED() );

                    FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                    exception_lineno = 1605;
                    type_description_1 = "ooooooo";
                    goto try_except_handler_2;
                }
                tmp_compexpr_right_3 = Py_None;
                tmp_condition_result_4 = ( tmp_compexpr_left_3 != tmp_compexpr_right_3 ) ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
                Py_DECREF( tmp_compexpr_left_3 );
                if ( tmp_condition_result_4 == NUITKA_BOOL_TRUE )
                {
                    goto branch_yes_4;
                }
                else
                {
                    goto branch_no_4;
                }
                branch_yes_4:;
                goto try_break_handler_2;
                branch_no_4:;
            }
            // Tried code:
            {
                PyObject *tmp_assign_source_3;
                PyObject *tmp_iter_arg_1;
                PyObject *tmp_called_name_2;
                PyObject *tmp_source_name_5;
                PyObject *tmp_args_element_name_1;
                PyObject *tmp_source_name_6;
                PyObject *tmp_mvar_value_2;
                CHECK_OBJECT( par_self );
                tmp_source_name_5 = par_self;
                tmp_called_name_2 = LOOKUP_ATTRIBUTE( tmp_source_name_5, const_str_plain__try_wait );
                if ( tmp_called_name_2 == NULL )
                {
                    assert( ERROR_OCCURRED() );

                    FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                    exception_lineno = 1607;
                    type_description_1 = "ooooooo";
                    goto try_except_handler_3;
                }
                tmp_mvar_value_2 = GET_STRING_DICT_VALUE( moduledict_subprocess, (Nuitka_StringObject *)const_str_plain_os );

                if (unlikely( tmp_mvar_value_2 == NULL ))
                {
                    tmp_mvar_value_2 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_os );
                }

                if ( tmp_mvar_value_2 == NULL )
                {
                    Py_DECREF( tmp_called_name_2 );
                    exception_type = PyExc_NameError;
                    Py_INCREF( exception_type );
                    exception_value = PyUnicode_FromFormat( "name '%s' is not defined", "os" );
                    exception_tb = NULL;
                    NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
                    CHAIN_EXCEPTION( exception_value );

                    exception_lineno = 1607;
                    type_description_1 = "ooooooo";
                    goto try_except_handler_3;
                }

                tmp_source_name_6 = tmp_mvar_value_2;
                tmp_args_element_name_1 = LOOKUP_ATTRIBUTE( tmp_source_name_6, const_str_plain_WNOHANG );
                if ( tmp_args_element_name_1 == NULL )
                {
                    assert( ERROR_OCCURRED() );

                    FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
                    Py_DECREF( tmp_called_name_2 );

                    exception_lineno = 1607;
                    type_description_1 = "ooooooo";
                    goto try_except_handler_3;
                }
                frame_9ac704ea3f4336924bb76de6e74b8ce5->m_frame.f_lineno = 1607;
                {
                    PyObject *call_args[] = { tmp_args_element_name_1 };
                    tmp_iter_arg_1 = CALL_FUNCTION_WITH_ARGS1( tmp_called_name_2, call_args );
                }

                Py_DECREF( tmp_called_name_2 );
                Py_DECREF( tmp_args_element_name_1 );
                if ( tmp_iter_arg_1 == NULL )
                {
                    assert( ERROR_OCCURRED() );

                    FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                    exception_lineno = 1607;
                    type_description_1 = "ooooooo";
                    goto try_except_handler_3;
                }
                tmp_assign_source_3 = MAKE_UNPACK_ITERATOR( tmp_iter_arg_1 );
                Py_DECREF( tmp_iter_arg_1 );
                if ( tmp_assign_source_3 == NULL )
                {
                    assert( ERROR_OCCURRED() );

                    FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                    exception_lineno = 1607;
                    type_description_1 = "ooooooo";
                    goto try_except_handler_3;
                }
                {
                    PyObject *old = tmp_tuple_unpack_1__source_iter;
                    tmp_tuple_unpack_1__source_iter = tmp_assign_source_3;
                    Py_XDECREF( old );
                }

            }
            // Tried code:
            {
                PyObject *tmp_assign_source_4;
                PyObject *tmp_unpack_1;
                CHECK_OBJECT( tmp_tuple_unpack_1__source_iter );
                tmp_unpack_1 = tmp_tuple_unpack_1__source_iter;
                tmp_assign_source_4 = UNPACK_NEXT( tmp_unpack_1, 0, 2 );
                if ( tmp_assign_source_4 == NULL )
                {
                    if ( !ERROR_OCCURRED() )
                    {
                        exception_type = PyExc_StopIteration;
                        Py_INCREF( exception_type );
                        exception_value = NULL;
                        exception_tb = NULL;
                    }
                    else
                    {
                        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
                    }


                    type_description_1 = "ooooooo";
                    exception_lineno = 1607;
                    goto try_except_handler_4;
                }
                {
                    PyObject *old = tmp_tuple_unpack_1__element_1;
                    tmp_tuple_unpack_1__element_1 = tmp_assign_source_4;
                    Py_XDECREF( old );
                }

            }
            {
                PyObject *tmp_assign_source_5;
                PyObject *tmp_unpack_2;
                CHECK_OBJECT( tmp_tuple_unpack_1__source_iter );
                tmp_unpack_2 = tmp_tuple_unpack_1__source_iter;
                tmp_assign_source_5 = UNPACK_NEXT( tmp_unpack_2, 1, 2 );
                if ( tmp_assign_source_5 == NULL )
                {
                    if ( !ERROR_OCCURRED() )
                    {
                        exception_type = PyExc_StopIteration;
                        Py_INCREF( exception_type );
                        exception_value = NULL;
                        exception_tb = NULL;
                    }
                    else
                    {
                        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
                    }


                    type_description_1 = "ooooooo";
                    exception_lineno = 1607;
                    goto try_except_handler_4;
                }
                {
                    PyObject *old = tmp_tuple_unpack_1__element_2;
                    tmp_tuple_unpack_1__element_2 = tmp_assign_source_5;
                    Py_XDECREF( old );
                }

            }
            {
                PyObject *tmp_iterator_name_1;
                CHECK_OBJECT( tmp_tuple_unpack_1__source_iter );
                tmp_iterator_name_1 = tmp_tuple_unpack_1__source_iter;
                // Check if iterator has left-over elements.
                CHECK_OBJECT( tmp_iterator_name_1 ); assert( HAS_ITERNEXT( tmp_iterator_name_1 ) );

                tmp_iterator_attempt = (*Py_TYPE( tmp_iterator_name_1 )->tp_iternext)( tmp_iterator_name_1 );

                if (likely( tmp_iterator_attempt == NULL ))
                {
                    PyObject *error = GET_ERROR_OCCURRED();

                    if ( error != NULL )
                    {
                        if ( EXCEPTION_MATCH_BOOL_SINGLE( error, PyExc_StopIteration ))
                        {
                            CLEAR_ERROR_OCCURRED();
                        }
                        else
                        {
                            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );

                            type_description_1 = "ooooooo";
                            exception_lineno = 1607;
                            goto try_except_handler_4;
                        }
                    }
                }
                else
                {
                    Py_DECREF( tmp_iterator_attempt );

                    // TODO: Could avoid PyErr_Format.
#if PYTHON_VERSION < 300
                    PyErr_Format( PyExc_ValueError, "too many values to unpack" );
#else
                    PyErr_Format( PyExc_ValueError, "too many values to unpack (expected 2)" );
#endif
                    FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );

                    type_description_1 = "ooooooo";
                    exception_lineno = 1607;
                    goto try_except_handler_4;
                }
            }
            goto try_end_1;
            // Exception handler code:
            try_except_handler_4:;
            exception_keeper_type_1 = exception_type;
            exception_keeper_value_1 = exception_value;
            exception_keeper_tb_1 = exception_tb;
            exception_keeper_lineno_1 = exception_lineno;
            exception_type = NULL;
            exception_value = NULL;
            exception_tb = NULL;
            exception_lineno = 0;

            CHECK_OBJECT( (PyObject *)tmp_tuple_unpack_1__source_iter );
            Py_DECREF( tmp_tuple_unpack_1__source_iter );
            tmp_tuple_unpack_1__source_iter = NULL;

            // Re-raise.
            exception_type = exception_keeper_type_1;
            exception_value = exception_keeper_value_1;
            exception_tb = exception_keeper_tb_1;
            exception_lineno = exception_keeper_lineno_1;

            goto try_except_handler_3;
            // End of try:
            try_end_1:;
            goto try_end_2;
            // Exception handler code:
            try_except_handler_3:;
            exception_keeper_type_2 = exception_type;
            exception_keeper_value_2 = exception_value;
            exception_keeper_tb_2 = exception_tb;
            exception_keeper_lineno_2 = exception_lineno;
            exception_type = NULL;
            exception_value = NULL;
            exception_tb = NULL;
            exception_lineno = 0;

            Py_XDECREF( tmp_tuple_unpack_1__element_1 );
            tmp_tuple_unpack_1__element_1 = NULL;

            Py_XDECREF( tmp_tuple_unpack_1__element_2 );
            tmp_tuple_unpack_1__element_2 = NULL;

            // Re-raise.
            exception_type = exception_keeper_type_2;
            exception_value = exception_keeper_value_2;
            exception_tb = exception_keeper_tb_2;
            exception_lineno = exception_keeper_lineno_2;

            goto try_except_handler_2;
            // End of try:
            try_end_2:;
            CHECK_OBJECT( (PyObject *)tmp_tuple_unpack_1__source_iter );
            Py_DECREF( tmp_tuple_unpack_1__source_iter );
            tmp_tuple_unpack_1__source_iter = NULL;

            {
                PyObject *tmp_assign_source_6;
                CHECK_OBJECT( tmp_tuple_unpack_1__element_1 );
                tmp_assign_source_6 = tmp_tuple_unpack_1__element_1;
                {
                    PyObject *old = var_pid;
                    var_pid = tmp_assign_source_6;
                    Py_INCREF( var_pid );
                    Py_XDECREF( old );
                }

            }
            Py_XDECREF( tmp_tuple_unpack_1__element_1 );
            tmp_tuple_unpack_1__element_1 = NULL;

            {
                PyObject *tmp_assign_source_7;
                CHECK_OBJECT( tmp_tuple_unpack_1__element_2 );
                tmp_assign_source_7 = tmp_tuple_unpack_1__element_2;
                {
                    PyObject *old = var_sts;
                    var_sts = tmp_assign_source_7;
                    Py_INCREF( var_sts );
                    Py_XDECREF( old );
                }

            }
            Py_XDECREF( tmp_tuple_unpack_1__element_2 );
            tmp_tuple_unpack_1__element_2 = NULL;

            {
                nuitka_bool tmp_condition_result_5;
                PyObject *tmp_operand_name_1;
                int tmp_or_left_truth_1;
                PyObject *tmp_or_left_value_1;
                PyObject *tmp_or_right_value_1;
                PyObject *tmp_compexpr_left_4;
                PyObject *tmp_compexpr_right_4;
                PyObject *tmp_source_name_7;
                PyObject *tmp_compexpr_left_5;
                PyObject *tmp_compexpr_right_5;
                CHECK_OBJECT( var_pid );
                tmp_compexpr_left_4 = var_pid;
                CHECK_OBJECT( par_self );
                tmp_source_name_7 = par_self;
                tmp_compexpr_right_4 = LOOKUP_ATTRIBUTE( tmp_source_name_7, const_str_plain_pid );
                if ( tmp_compexpr_right_4 == NULL )
                {
                    assert( ERROR_OCCURRED() );

                    FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                    exception_lineno = 1608;
                    type_description_1 = "ooooooo";
                    goto try_except_handler_2;
                }
                tmp_or_left_value_1 = RICH_COMPARE_EQ_OBJECT_OBJECT( tmp_compexpr_left_4, tmp_compexpr_right_4 );
                Py_DECREF( tmp_compexpr_right_4 );
                if ( tmp_or_left_value_1 == NULL )
                {
                    assert( ERROR_OCCURRED() );

                    FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                    exception_lineno = 1608;
                    type_description_1 = "ooooooo";
                    goto try_except_handler_2;
                }
                tmp_or_left_truth_1 = CHECK_IF_TRUE( tmp_or_left_value_1 );
                if ( tmp_or_left_truth_1 == -1 )
                {
                    assert( ERROR_OCCURRED() );

                    FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
                    Py_DECREF( tmp_or_left_value_1 );

                    exception_lineno = 1608;
                    type_description_1 = "ooooooo";
                    goto try_except_handler_2;
                }
                if ( tmp_or_left_truth_1 == 1 )
                {
                    goto or_left_1;
                }
                else
                {
                    goto or_right_1;
                }
                or_right_1:;
                Py_DECREF( tmp_or_left_value_1 );
                CHECK_OBJECT( var_pid );
                tmp_compexpr_left_5 = var_pid;
                tmp_compexpr_right_5 = const_int_0;
                tmp_or_right_value_1 = RICH_COMPARE_EQ_OBJECT_OBJECT( tmp_compexpr_left_5, tmp_compexpr_right_5 );
                if ( tmp_or_right_value_1 == NULL )
                {
                    assert( ERROR_OCCURRED() );

                    FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                    exception_lineno = 1608;
                    type_description_1 = "ooooooo";
                    goto try_except_handler_2;
                }
                tmp_operand_name_1 = tmp_or_right_value_1;
                goto or_end_1;
                or_left_1:;
                tmp_operand_name_1 = tmp_or_left_value_1;
                or_end_1:;
                tmp_res = CHECK_IF_TRUE( tmp_operand_name_1 );
                Py_DECREF( tmp_operand_name_1 );
                if ( tmp_res == -1 )
                {
                    assert( ERROR_OCCURRED() );

                    FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                    exception_lineno = 1608;
                    type_description_1 = "ooooooo";
                    goto try_except_handler_2;
                }
                tmp_condition_result_5 = ( tmp_res == 0 ) ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
                if ( tmp_condition_result_5 == NUITKA_BOOL_TRUE )
                {
                    goto branch_yes_5;
                }
                else
                {
                    goto branch_no_5;
                }
                branch_yes_5:;
                {
                    PyObject *tmp_raise_type_1;
                    tmp_raise_type_1 = PyExc_AssertionError;
                    exception_type = tmp_raise_type_1;
                    Py_INCREF( tmp_raise_type_1 );
                    exception_lineno = 1608;
                    RAISE_EXCEPTION_WITH_TYPE( &exception_type, &exception_value, &exception_tb );
                    type_description_1 = "ooooooo";
                    goto try_except_handler_2;
                }
                branch_no_5:;
            }
            {
                nuitka_bool tmp_condition_result_6;
                PyObject *tmp_compexpr_left_6;
                PyObject *tmp_compexpr_right_6;
                PyObject *tmp_source_name_8;
                CHECK_OBJECT( var_pid );
                tmp_compexpr_left_6 = var_pid;
                CHECK_OBJECT( par_self );
                tmp_source_name_8 = par_self;
                tmp_compexpr_right_6 = LOOKUP_ATTRIBUTE( tmp_source_name_8, const_str_plain_pid );
                if ( tmp_compexpr_right_6 == NULL )
                {
                    assert( ERROR_OCCURRED() );

                    FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                    exception_lineno = 1609;
                    type_description_1 = "ooooooo";
                    goto try_except_handler_2;
                }
                tmp_res = RICH_COMPARE_BOOL_EQ_OBJECT_OBJECT( tmp_compexpr_left_6, tmp_compexpr_right_6 );
                Py_DECREF( tmp_compexpr_right_6 );
                if ( tmp_res == -1 )
                {
                    assert( ERROR_OCCURRED() );

                    FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                    exception_lineno = 1609;
                    type_description_1 = "ooooooo";
                    goto try_except_handler_2;
                }
                tmp_condition_result_6 = ( tmp_res != 0 ) ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
                if ( tmp_condition_result_6 == NUITKA_BOOL_TRUE )
                {
                    goto branch_yes_6;
                }
                else
                {
                    goto branch_no_6;
                }
                branch_yes_6:;
                {
                    PyObject *tmp_called_instance_2;
                    PyObject *tmp_call_result_2;
                    PyObject *tmp_args_element_name_2;
                    CHECK_OBJECT( par_self );
                    tmp_called_instance_2 = par_self;
                    CHECK_OBJECT( var_sts );
                    tmp_args_element_name_2 = var_sts;
                    frame_9ac704ea3f4336924bb76de6e74b8ce5->m_frame.f_lineno = 1610;
                    {
                        PyObject *call_args[] = { tmp_args_element_name_2 };
                        tmp_call_result_2 = CALL_METHOD_WITH_ARGS1( tmp_called_instance_2, const_str_plain__handle_exitstatus, call_args );
                    }

                    if ( tmp_call_result_2 == NULL )
                    {
                        assert( ERROR_OCCURRED() );

                        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                        exception_lineno = 1610;
                        type_description_1 = "ooooooo";
                        goto try_except_handler_2;
                    }
                    Py_DECREF( tmp_call_result_2 );
                }
                goto try_break_handler_2;
                branch_no_6:;
            }
            goto try_end_3;
            // Exception handler code:
            try_except_handler_2:;
            exception_keeper_type_3 = exception_type;
            exception_keeper_value_3 = exception_value;
            exception_keeper_tb_3 = exception_tb;
            exception_keeper_lineno_3 = exception_lineno;
            exception_type = NULL;
            exception_value = NULL;
            exception_tb = NULL;
            exception_lineno = 0;

            // Preserve existing published exception.
            exception_preserved_type_1 = EXC_TYPE(PyThreadState_GET());
            Py_XINCREF( exception_preserved_type_1 );
            exception_preserved_value_1 = EXC_VALUE(PyThreadState_GET());
            Py_XINCREF( exception_preserved_value_1 );
            exception_preserved_tb_1 = (PyTracebackObject *)EXC_TRACEBACK(PyThreadState_GET());
            Py_XINCREF( exception_preserved_tb_1 );

            if ( exception_keeper_tb_3 == NULL )
            {
                exception_keeper_tb_3 = MAKE_TRACEBACK( frame_9ac704ea3f4336924bb76de6e74b8ce5, exception_keeper_lineno_3 );
            }
            else if ( exception_keeper_lineno_3 != 0 )
            {
                exception_keeper_tb_3 = ADD_TRACEBACK( exception_keeper_tb_3, frame_9ac704ea3f4336924bb76de6e74b8ce5, exception_keeper_lineno_3 );
            }

            NORMALIZE_EXCEPTION( &exception_keeper_type_3, &exception_keeper_value_3, &exception_keeper_tb_3 );
            PyException_SetTraceback( exception_keeper_value_3, (PyObject *)exception_keeper_tb_3 );
            PUBLISH_EXCEPTION( &exception_keeper_type_3, &exception_keeper_value_3, &exception_keeper_tb_3 );
            // Tried code:
            {
                PyObject *tmp_called_instance_3;
                PyObject *tmp_source_name_9;
                PyObject *tmp_call_result_3;
                CHECK_OBJECT( par_self );
                tmp_source_name_9 = par_self;
                tmp_called_instance_3 = LOOKUP_ATTRIBUTE( tmp_source_name_9, const_str_plain__waitpid_lock );
                if ( tmp_called_instance_3 == NULL )
                {
                    assert( ERROR_OCCURRED() );

                    FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                    exception_lineno = 1613;
                    type_description_1 = "ooooooo";
                    goto try_except_handler_5;
                }
                frame_9ac704ea3f4336924bb76de6e74b8ce5->m_frame.f_lineno = 1613;
                tmp_call_result_3 = CALL_METHOD_NO_ARGS( tmp_called_instance_3, const_str_plain_release );
                Py_DECREF( tmp_called_instance_3 );
                if ( tmp_call_result_3 == NULL )
                {
                    assert( ERROR_OCCURRED() );

                    FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                    exception_lineno = 1613;
                    type_description_1 = "ooooooo";
                    goto try_except_handler_5;
                }
                Py_DECREF( tmp_call_result_3 );
            }
            tmp_result = RERAISE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
            if (unlikely( tmp_result == false ))
            {
                exception_lineno = 1604;
            }

            if (exception_tb && exception_tb->tb_frame == &frame_9ac704ea3f4336924bb76de6e74b8ce5->m_frame) frame_9ac704ea3f4336924bb76de6e74b8ce5->m_frame.f_lineno = exception_tb->tb_lineno;
            type_description_1 = "ooooooo";
            goto try_except_handler_5;
            // tried codes exits in all cases
            NUITKA_CANNOT_GET_HERE( subprocess$$$function_56__wait );
            return NULL;
            // Exception handler code:
            try_except_handler_5:;
            exception_keeper_type_4 = exception_type;
            exception_keeper_value_4 = exception_value;
            exception_keeper_tb_4 = exception_tb;
            exception_keeper_lineno_4 = exception_lineno;
            exception_type = NULL;
            exception_value = NULL;
            exception_tb = NULL;
            exception_lineno = 0;

            // Restore previous exception.
            SET_CURRENT_EXCEPTION( exception_preserved_type_1, exception_preserved_value_1, exception_preserved_tb_1 );
            // Re-raise.
            exception_type = exception_keeper_type_4;
            exception_value = exception_keeper_value_4;
            exception_tb = exception_keeper_tb_4;
            exception_lineno = exception_keeper_lineno_4;

            goto frame_exception_exit_1;
            // End of try:
            // try break handler code:
            try_break_handler_2:;
            {
                PyObject *tmp_called_instance_4;
                PyObject *tmp_source_name_10;
                PyObject *tmp_call_result_4;
                CHECK_OBJECT( par_self );
                tmp_source_name_10 = par_self;
                tmp_called_instance_4 = LOOKUP_ATTRIBUTE( tmp_source_name_10, const_str_plain__waitpid_lock );
                if ( tmp_called_instance_4 == NULL )
                {
                    assert( ERROR_OCCURRED() );

                    FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                    exception_lineno = 1613;
                    type_description_1 = "ooooooo";
                    goto frame_exception_exit_1;
                }
                frame_9ac704ea3f4336924bb76de6e74b8ce5->m_frame.f_lineno = 1613;
                tmp_call_result_4 = CALL_METHOD_NO_ARGS( tmp_called_instance_4, const_str_plain_release );
                Py_DECREF( tmp_called_instance_4 );
                if ( tmp_call_result_4 == NULL )
                {
                    assert( ERROR_OCCURRED() );

                    FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                    exception_lineno = 1613;
                    type_description_1 = "ooooooo";
                    goto frame_exception_exit_1;
                }
                Py_DECREF( tmp_call_result_4 );
            }
            goto loop_end_1;
            // End of try:
            try_end_3:;
            {
                PyObject *tmp_called_instance_5;
                PyObject *tmp_source_name_11;
                PyObject *tmp_call_result_5;
                CHECK_OBJECT( par_self );
                tmp_source_name_11 = par_self;
                tmp_called_instance_5 = LOOKUP_ATTRIBUTE( tmp_source_name_11, const_str_plain__waitpid_lock );
                if ( tmp_called_instance_5 == NULL )
                {
                    assert( ERROR_OCCURRED() );

                    FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                    exception_lineno = 1613;
                    type_description_1 = "ooooooo";
                    goto frame_exception_exit_1;
                }
                frame_9ac704ea3f4336924bb76de6e74b8ce5->m_frame.f_lineno = 1613;
                tmp_call_result_5 = CALL_METHOD_NO_ARGS( tmp_called_instance_5, const_str_plain_release );
                Py_DECREF( tmp_called_instance_5 );
                if ( tmp_call_result_5 == NULL )
                {
                    assert( ERROR_OCCURRED() );

                    FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                    exception_lineno = 1613;
                    type_description_1 = "ooooooo";
                    goto frame_exception_exit_1;
                }
                Py_DECREF( tmp_call_result_5 );
            }
            branch_no_3:;
        }
        {
            PyObject *tmp_assign_source_8;
            PyObject *tmp_called_instance_6;
            PyObject *tmp_args_element_name_3;
            CHECK_OBJECT( par_self );
            tmp_called_instance_6 = par_self;
            CHECK_OBJECT( var_endtime );
            tmp_args_element_name_3 = var_endtime;
            frame_9ac704ea3f4336924bb76de6e74b8ce5->m_frame.f_lineno = 1614;
            {
                PyObject *call_args[] = { tmp_args_element_name_3 };
                tmp_assign_source_8 = CALL_METHOD_WITH_ARGS1( tmp_called_instance_6, const_str_plain__remaining_time, call_args );
            }

            if ( tmp_assign_source_8 == NULL )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 1614;
                type_description_1 = "ooooooo";
                goto frame_exception_exit_1;
            }
            {
                PyObject *old = var_remaining;
                var_remaining = tmp_assign_source_8;
                Py_XDECREF( old );
            }

        }
        {
            nuitka_bool tmp_condition_result_7;
            PyObject *tmp_compexpr_left_7;
            PyObject *tmp_compexpr_right_7;
            CHECK_OBJECT( var_remaining );
            tmp_compexpr_left_7 = var_remaining;
            tmp_compexpr_right_7 = const_int_0;
            tmp_res = RICH_COMPARE_BOOL_LTE_OBJECT_OBJECT( tmp_compexpr_left_7, tmp_compexpr_right_7 );
            if ( tmp_res == -1 )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 1615;
                type_description_1 = "ooooooo";
                goto frame_exception_exit_1;
            }
            tmp_condition_result_7 = ( tmp_res != 0 ) ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
            if ( tmp_condition_result_7 == NUITKA_BOOL_TRUE )
            {
                goto branch_yes_7;
            }
            else
            {
                goto branch_no_7;
            }
            branch_yes_7:;
            {
                PyObject *tmp_raise_type_2;
                PyObject *tmp_called_name_3;
                PyObject *tmp_mvar_value_3;
                PyObject *tmp_args_element_name_4;
                PyObject *tmp_source_name_12;
                PyObject *tmp_args_element_name_5;
                tmp_mvar_value_3 = GET_STRING_DICT_VALUE( moduledict_subprocess, (Nuitka_StringObject *)const_str_plain_TimeoutExpired );

                if (unlikely( tmp_mvar_value_3 == NULL ))
                {
                    tmp_mvar_value_3 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_TimeoutExpired );
                }

                if ( tmp_mvar_value_3 == NULL )
                {

                    exception_type = PyExc_NameError;
                    Py_INCREF( exception_type );
                    exception_value = PyUnicode_FromFormat( "name '%s' is not defined", "TimeoutExpired" );
                    exception_tb = NULL;
                    NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
                    CHAIN_EXCEPTION( exception_value );

                    exception_lineno = 1616;
                    type_description_1 = "ooooooo";
                    goto frame_exception_exit_1;
                }

                tmp_called_name_3 = tmp_mvar_value_3;
                CHECK_OBJECT( par_self );
                tmp_source_name_12 = par_self;
                tmp_args_element_name_4 = LOOKUP_ATTRIBUTE( tmp_source_name_12, const_str_plain_args );
                if ( tmp_args_element_name_4 == NULL )
                {
                    assert( ERROR_OCCURRED() );

                    FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                    exception_lineno = 1616;
                    type_description_1 = "ooooooo";
                    goto frame_exception_exit_1;
                }
                CHECK_OBJECT( par_timeout );
                tmp_args_element_name_5 = par_timeout;
                frame_9ac704ea3f4336924bb76de6e74b8ce5->m_frame.f_lineno = 1616;
                {
                    PyObject *call_args[] = { tmp_args_element_name_4, tmp_args_element_name_5 };
                    tmp_raise_type_2 = CALL_FUNCTION_WITH_ARGS2( tmp_called_name_3, call_args );
                }

                Py_DECREF( tmp_args_element_name_4 );
                if ( tmp_raise_type_2 == NULL )
                {
                    assert( ERROR_OCCURRED() );

                    FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                    exception_lineno = 1616;
                    type_description_1 = "ooooooo";
                    goto frame_exception_exit_1;
                }
                exception_type = tmp_raise_type_2;
                exception_lineno = 1616;
                RAISE_EXCEPTION_WITH_TYPE( &exception_type, &exception_value, &exception_tb );
                type_description_1 = "ooooooo";
                goto frame_exception_exit_1;
            }
            branch_no_7:;
        }
        {
            PyObject *tmp_assign_source_9;
            PyObject *tmp_called_name_4;
            PyObject *tmp_args_element_name_6;
            PyObject *tmp_left_name_2;
            PyObject *tmp_right_name_2;
            PyObject *tmp_args_element_name_7;
            PyObject *tmp_args_element_name_8;
            tmp_called_name_4 = LOOKUP_BUILTIN( const_str_plain_min );
            assert( tmp_called_name_4 != NULL );
            CHECK_OBJECT( var_delay );
            tmp_left_name_2 = var_delay;
            tmp_right_name_2 = const_int_pos_2;
            tmp_args_element_name_6 = BINARY_OPERATION_MUL( tmp_left_name_2, tmp_right_name_2 );
            if ( tmp_args_element_name_6 == NULL )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 1617;
                type_description_1 = "ooooooo";
                goto frame_exception_exit_1;
            }
            CHECK_OBJECT( var_remaining );
            tmp_args_element_name_7 = var_remaining;
            tmp_args_element_name_8 = const_float_0_05;
            frame_9ac704ea3f4336924bb76de6e74b8ce5->m_frame.f_lineno = 1617;
            {
                PyObject *call_args[] = { tmp_args_element_name_6, tmp_args_element_name_7, tmp_args_element_name_8 };
                tmp_assign_source_9 = CALL_FUNCTION_WITH_ARGS3( tmp_called_name_4, call_args );
            }

            Py_DECREF( tmp_args_element_name_6 );
            if ( tmp_assign_source_9 == NULL )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 1617;
                type_description_1 = "ooooooo";
                goto frame_exception_exit_1;
            }
            {
                PyObject *old = var_delay;
                assert( old != NULL );
                var_delay = tmp_assign_source_9;
                Py_DECREF( old );
            }

        }
        {
            PyObject *tmp_called_instance_7;
            PyObject *tmp_mvar_value_4;
            PyObject *tmp_call_result_6;
            PyObject *tmp_args_element_name_9;
            tmp_mvar_value_4 = GET_STRING_DICT_VALUE( moduledict_subprocess, (Nuitka_StringObject *)const_str_plain_time );

            if (unlikely( tmp_mvar_value_4 == NULL ))
            {
                tmp_mvar_value_4 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_time );
            }

            if ( tmp_mvar_value_4 == NULL )
            {

                exception_type = PyExc_NameError;
                Py_INCREF( exception_type );
                exception_value = PyUnicode_FromFormat( "name '%s' is not defined", "time" );
                exception_tb = NULL;
                NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
                CHAIN_EXCEPTION( exception_value );

                exception_lineno = 1618;
                type_description_1 = "ooooooo";
                goto frame_exception_exit_1;
            }

            tmp_called_instance_7 = tmp_mvar_value_4;
            CHECK_OBJECT( var_delay );
            tmp_args_element_name_9 = var_delay;
            frame_9ac704ea3f4336924bb76de6e74b8ce5->m_frame.f_lineno = 1618;
            {
                PyObject *call_args[] = { tmp_args_element_name_9 };
                tmp_call_result_6 = CALL_METHOD_WITH_ARGS1( tmp_called_instance_7, const_str_plain_sleep, call_args );
            }

            if ( tmp_call_result_6 == NULL )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 1618;
                type_description_1 = "ooooooo";
                goto frame_exception_exit_1;
            }
            Py_DECREF( tmp_call_result_6 );
        }
        if ( CONSIDER_THREADING() == false )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 1602;
            type_description_1 = "ooooooo";
            goto frame_exception_exit_1;
        }
        goto loop_start_1;
        loop_end_1:;
        goto branch_end_2;
        branch_no_2:;
        loop_start_2:;
        {
            nuitka_bool tmp_condition_result_8;
            PyObject *tmp_compexpr_left_8;
            PyObject *tmp_compexpr_right_8;
            PyObject *tmp_source_name_13;
            CHECK_OBJECT( par_self );
            tmp_source_name_13 = par_self;
            tmp_compexpr_left_8 = LOOKUP_ATTRIBUTE( tmp_source_name_13, const_str_plain_returncode );
            if ( tmp_compexpr_left_8 == NULL )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 1620;
                type_description_1 = "ooooooo";
                goto frame_exception_exit_1;
            }
            tmp_compexpr_right_8 = Py_None;
            tmp_condition_result_8 = ( tmp_compexpr_left_8 != tmp_compexpr_right_8 ) ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
            Py_DECREF( tmp_compexpr_left_8 );
            if ( tmp_condition_result_8 == NUITKA_BOOL_TRUE )
            {
                goto branch_yes_8;
            }
            else
            {
                goto branch_no_8;
            }
            branch_yes_8:;
            goto loop_end_2;
            branch_no_8:;
        }
        // Tried code:
        {
            PyObject *tmp_assign_source_10;
            PyObject *tmp_source_name_14;
            CHECK_OBJECT( par_self );
            tmp_source_name_14 = par_self;
            tmp_assign_source_10 = LOOKUP_ATTRIBUTE( tmp_source_name_14, const_str_plain__waitpid_lock );
            if ( tmp_assign_source_10 == NULL )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 1621;
                type_description_1 = "ooooooo";
                goto try_except_handler_6;
            }
            {
                PyObject *old = tmp_with_1__source;
                tmp_with_1__source = tmp_assign_source_10;
                Py_XDECREF( old );
            }

        }
        {
            PyObject *tmp_assign_source_11;
            PyObject *tmp_called_name_5;
            PyObject *tmp_source_name_15;
            CHECK_OBJECT( tmp_with_1__source );
            tmp_source_name_15 = tmp_with_1__source;
            tmp_called_name_5 = LOOKUP_SPECIAL( tmp_source_name_15, const_str_plain___enter__ );
            if ( tmp_called_name_5 == NULL )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 1621;
                type_description_1 = "ooooooo";
                goto try_except_handler_6;
            }
            frame_9ac704ea3f4336924bb76de6e74b8ce5->m_frame.f_lineno = 1621;
            tmp_assign_source_11 = CALL_FUNCTION_NO_ARGS( tmp_called_name_5 );
            Py_DECREF( tmp_called_name_5 );
            if ( tmp_assign_source_11 == NULL )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 1621;
                type_description_1 = "ooooooo";
                goto try_except_handler_6;
            }
            {
                PyObject *old = tmp_with_1__enter;
                tmp_with_1__enter = tmp_assign_source_11;
                Py_XDECREF( old );
            }

        }
        {
            PyObject *tmp_assign_source_12;
            PyObject *tmp_source_name_16;
            CHECK_OBJECT( tmp_with_1__source );
            tmp_source_name_16 = tmp_with_1__source;
            tmp_assign_source_12 = LOOKUP_SPECIAL( tmp_source_name_16, const_str_plain___exit__ );
            if ( tmp_assign_source_12 == NULL )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 1621;
                type_description_1 = "ooooooo";
                goto try_except_handler_6;
            }
            {
                PyObject *old = tmp_with_1__exit;
                tmp_with_1__exit = tmp_assign_source_12;
                Py_XDECREF( old );
            }

        }
        {
            PyObject *tmp_assign_source_13;
            tmp_assign_source_13 = Py_True;
            {
                PyObject *old = tmp_with_1__indicator;
                tmp_with_1__indicator = tmp_assign_source_13;
                Py_INCREF( tmp_with_1__indicator );
                Py_XDECREF( old );
            }

        }
        // Tried code:
        // Tried code:
        {
            nuitka_bool tmp_condition_result_9;
            PyObject *tmp_compexpr_left_9;
            PyObject *tmp_compexpr_right_9;
            PyObject *tmp_source_name_17;
            CHECK_OBJECT( par_self );
            tmp_source_name_17 = par_self;
            tmp_compexpr_left_9 = LOOKUP_ATTRIBUTE( tmp_source_name_17, const_str_plain_returncode );
            if ( tmp_compexpr_left_9 == NULL )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 1622;
                type_description_1 = "ooooooo";
                goto try_except_handler_8;
            }
            tmp_compexpr_right_9 = Py_None;
            tmp_condition_result_9 = ( tmp_compexpr_left_9 != tmp_compexpr_right_9 ) ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
            Py_DECREF( tmp_compexpr_left_9 );
            if ( tmp_condition_result_9 == NUITKA_BOOL_TRUE )
            {
                goto branch_yes_9;
            }
            else
            {
                goto branch_no_9;
            }
            branch_yes_9:;
            goto try_break_handler_7;
            branch_no_9:;
        }
        // Tried code:
        {
            PyObject *tmp_assign_source_14;
            PyObject *tmp_iter_arg_2;
            PyObject *tmp_called_instance_8;
            CHECK_OBJECT( par_self );
            tmp_called_instance_8 = par_self;
            frame_9ac704ea3f4336924bb76de6e74b8ce5->m_frame.f_lineno = 1624;
            tmp_iter_arg_2 = CALL_METHOD_WITH_ARGS1( tmp_called_instance_8, const_str_plain__try_wait, &PyTuple_GET_ITEM( const_tuple_int_0_tuple, 0 ) );

            if ( tmp_iter_arg_2 == NULL )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 1624;
                type_description_1 = "ooooooo";
                goto try_except_handler_9;
            }
            tmp_assign_source_14 = MAKE_UNPACK_ITERATOR( tmp_iter_arg_2 );
            Py_DECREF( tmp_iter_arg_2 );
            if ( tmp_assign_source_14 == NULL )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 1624;
                type_description_1 = "ooooooo";
                goto try_except_handler_9;
            }
            {
                PyObject *old = tmp_tuple_unpack_2__source_iter;
                tmp_tuple_unpack_2__source_iter = tmp_assign_source_14;
                Py_XDECREF( old );
            }

        }
        // Tried code:
        {
            PyObject *tmp_assign_source_15;
            PyObject *tmp_unpack_3;
            CHECK_OBJECT( tmp_tuple_unpack_2__source_iter );
            tmp_unpack_3 = tmp_tuple_unpack_2__source_iter;
            tmp_assign_source_15 = UNPACK_NEXT( tmp_unpack_3, 0, 2 );
            if ( tmp_assign_source_15 == NULL )
            {
                if ( !ERROR_OCCURRED() )
                {
                    exception_type = PyExc_StopIteration;
                    Py_INCREF( exception_type );
                    exception_value = NULL;
                    exception_tb = NULL;
                }
                else
                {
                    FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
                }


                type_description_1 = "ooooooo";
                exception_lineno = 1624;
                goto try_except_handler_10;
            }
            {
                PyObject *old = tmp_tuple_unpack_2__element_1;
                tmp_tuple_unpack_2__element_1 = tmp_assign_source_15;
                Py_XDECREF( old );
            }

        }
        {
            PyObject *tmp_assign_source_16;
            PyObject *tmp_unpack_4;
            CHECK_OBJECT( tmp_tuple_unpack_2__source_iter );
            tmp_unpack_4 = tmp_tuple_unpack_2__source_iter;
            tmp_assign_source_16 = UNPACK_NEXT( tmp_unpack_4, 1, 2 );
            if ( tmp_assign_source_16 == NULL )
            {
                if ( !ERROR_OCCURRED() )
                {
                    exception_type = PyExc_StopIteration;
                    Py_INCREF( exception_type );
                    exception_value = NULL;
                    exception_tb = NULL;
                }
                else
                {
                    FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
                }


                type_description_1 = "ooooooo";
                exception_lineno = 1624;
                goto try_except_handler_10;
            }
            {
                PyObject *old = tmp_tuple_unpack_2__element_2;
                tmp_tuple_unpack_2__element_2 = tmp_assign_source_16;
                Py_XDECREF( old );
            }

        }
        {
            PyObject *tmp_iterator_name_2;
            CHECK_OBJECT( tmp_tuple_unpack_2__source_iter );
            tmp_iterator_name_2 = tmp_tuple_unpack_2__source_iter;
            // Check if iterator has left-over elements.
            CHECK_OBJECT( tmp_iterator_name_2 ); assert( HAS_ITERNEXT( tmp_iterator_name_2 ) );

            tmp_iterator_attempt = (*Py_TYPE( tmp_iterator_name_2 )->tp_iternext)( tmp_iterator_name_2 );

            if (likely( tmp_iterator_attempt == NULL ))
            {
                PyObject *error = GET_ERROR_OCCURRED();

                if ( error != NULL )
                {
                    if ( EXCEPTION_MATCH_BOOL_SINGLE( error, PyExc_StopIteration ))
                    {
                        CLEAR_ERROR_OCCURRED();
                    }
                    else
                    {
                        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );

                        type_description_1 = "ooooooo";
                        exception_lineno = 1624;
                        goto try_except_handler_10;
                    }
                }
            }
            else
            {
                Py_DECREF( tmp_iterator_attempt );

                // TODO: Could avoid PyErr_Format.
#if PYTHON_VERSION < 300
                PyErr_Format( PyExc_ValueError, "too many values to unpack" );
#else
                PyErr_Format( PyExc_ValueError, "too many values to unpack (expected 2)" );
#endif
                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );

                type_description_1 = "ooooooo";
                exception_lineno = 1624;
                goto try_except_handler_10;
            }
        }
        goto try_end_4;
        // Exception handler code:
        try_except_handler_10:;
        exception_keeper_type_5 = exception_type;
        exception_keeper_value_5 = exception_value;
        exception_keeper_tb_5 = exception_tb;
        exception_keeper_lineno_5 = exception_lineno;
        exception_type = NULL;
        exception_value = NULL;
        exception_tb = NULL;
        exception_lineno = 0;

        CHECK_OBJECT( (PyObject *)tmp_tuple_unpack_2__source_iter );
        Py_DECREF( tmp_tuple_unpack_2__source_iter );
        tmp_tuple_unpack_2__source_iter = NULL;

        // Re-raise.
        exception_type = exception_keeper_type_5;
        exception_value = exception_keeper_value_5;
        exception_tb = exception_keeper_tb_5;
        exception_lineno = exception_keeper_lineno_5;

        goto try_except_handler_9;
        // End of try:
        try_end_4:;
        goto try_end_5;
        // Exception handler code:
        try_except_handler_9:;
        exception_keeper_type_6 = exception_type;
        exception_keeper_value_6 = exception_value;
        exception_keeper_tb_6 = exception_tb;
        exception_keeper_lineno_6 = exception_lineno;
        exception_type = NULL;
        exception_value = NULL;
        exception_tb = NULL;
        exception_lineno = 0;

        Py_XDECREF( tmp_tuple_unpack_2__element_1 );
        tmp_tuple_unpack_2__element_1 = NULL;

        Py_XDECREF( tmp_tuple_unpack_2__element_2 );
        tmp_tuple_unpack_2__element_2 = NULL;

        // Re-raise.
        exception_type = exception_keeper_type_6;
        exception_value = exception_keeper_value_6;
        exception_tb = exception_keeper_tb_6;
        exception_lineno = exception_keeper_lineno_6;

        goto try_except_handler_8;
        // End of try:
        try_end_5:;
        CHECK_OBJECT( (PyObject *)tmp_tuple_unpack_2__source_iter );
        Py_DECREF( tmp_tuple_unpack_2__source_iter );
        tmp_tuple_unpack_2__source_iter = NULL;

        {
            PyObject *tmp_assign_source_17;
            CHECK_OBJECT( tmp_tuple_unpack_2__element_1 );
            tmp_assign_source_17 = tmp_tuple_unpack_2__element_1;
            {
                PyObject *old = var_pid;
                var_pid = tmp_assign_source_17;
                Py_INCREF( var_pid );
                Py_XDECREF( old );
            }

        }
        Py_XDECREF( tmp_tuple_unpack_2__element_1 );
        tmp_tuple_unpack_2__element_1 = NULL;

        {
            PyObject *tmp_assign_source_18;
            CHECK_OBJECT( tmp_tuple_unpack_2__element_2 );
            tmp_assign_source_18 = tmp_tuple_unpack_2__element_2;
            {
                PyObject *old = var_sts;
                var_sts = tmp_assign_source_18;
                Py_INCREF( var_sts );
                Py_XDECREF( old );
            }

        }
        Py_XDECREF( tmp_tuple_unpack_2__element_2 );
        tmp_tuple_unpack_2__element_2 = NULL;

        {
            nuitka_bool tmp_condition_result_10;
            PyObject *tmp_compexpr_left_10;
            PyObject *tmp_compexpr_right_10;
            PyObject *tmp_source_name_18;
            CHECK_OBJECT( var_pid );
            tmp_compexpr_left_10 = var_pid;
            CHECK_OBJECT( par_self );
            tmp_source_name_18 = par_self;
            tmp_compexpr_right_10 = LOOKUP_ATTRIBUTE( tmp_source_name_18, const_str_plain_pid );
            if ( tmp_compexpr_right_10 == NULL )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 1628;
                type_description_1 = "ooooooo";
                goto try_except_handler_8;
            }
            tmp_res = RICH_COMPARE_BOOL_EQ_OBJECT_OBJECT( tmp_compexpr_left_10, tmp_compexpr_right_10 );
            Py_DECREF( tmp_compexpr_right_10 );
            if ( tmp_res == -1 )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 1628;
                type_description_1 = "ooooooo";
                goto try_except_handler_8;
            }
            tmp_condition_result_10 = ( tmp_res != 0 ) ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
            if ( tmp_condition_result_10 == NUITKA_BOOL_TRUE )
            {
                goto branch_yes_10;
            }
            else
            {
                goto branch_no_10;
            }
            branch_yes_10:;
            {
                PyObject *tmp_called_instance_9;
                PyObject *tmp_call_result_7;
                PyObject *tmp_args_element_name_10;
                CHECK_OBJECT( par_self );
                tmp_called_instance_9 = par_self;
                CHECK_OBJECT( var_sts );
                tmp_args_element_name_10 = var_sts;
                frame_9ac704ea3f4336924bb76de6e74b8ce5->m_frame.f_lineno = 1629;
                {
                    PyObject *call_args[] = { tmp_args_element_name_10 };
                    tmp_call_result_7 = CALL_METHOD_WITH_ARGS1( tmp_called_instance_9, const_str_plain__handle_exitstatus, call_args );
                }

                if ( tmp_call_result_7 == NULL )
                {
                    assert( ERROR_OCCURRED() );

                    FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                    exception_lineno = 1629;
                    type_description_1 = "ooooooo";
                    goto try_except_handler_8;
                }
                Py_DECREF( tmp_call_result_7 );
            }
            branch_no_10:;
        }
        goto try_end_6;
        // Exception handler code:
        try_except_handler_8:;
        exception_keeper_type_7 = exception_type;
        exception_keeper_value_7 = exception_value;
        exception_keeper_tb_7 = exception_tb;
        exception_keeper_lineno_7 = exception_lineno;
        exception_type = NULL;
        exception_value = NULL;
        exception_tb = NULL;
        exception_lineno = 0;

        // Preserve existing published exception.
        exception_preserved_type_2 = EXC_TYPE(PyThreadState_GET());
        Py_XINCREF( exception_preserved_type_2 );
        exception_preserved_value_2 = EXC_VALUE(PyThreadState_GET());
        Py_XINCREF( exception_preserved_value_2 );
        exception_preserved_tb_2 = (PyTracebackObject *)EXC_TRACEBACK(PyThreadState_GET());
        Py_XINCREF( exception_preserved_tb_2 );

        if ( exception_keeper_tb_7 == NULL )
        {
            exception_keeper_tb_7 = MAKE_TRACEBACK( frame_9ac704ea3f4336924bb76de6e74b8ce5, exception_keeper_lineno_7 );
        }
        else if ( exception_keeper_lineno_7 != 0 )
        {
            exception_keeper_tb_7 = ADD_TRACEBACK( exception_keeper_tb_7, frame_9ac704ea3f4336924bb76de6e74b8ce5, exception_keeper_lineno_7 );
        }

        NORMALIZE_EXCEPTION( &exception_keeper_type_7, &exception_keeper_value_7, &exception_keeper_tb_7 );
        PyException_SetTraceback( exception_keeper_value_7, (PyObject *)exception_keeper_tb_7 );
        PUBLISH_EXCEPTION( &exception_keeper_type_7, &exception_keeper_value_7, &exception_keeper_tb_7 );
        // Tried code:
        {
            nuitka_bool tmp_condition_result_11;
            PyObject *tmp_compexpr_left_11;
            PyObject *tmp_compexpr_right_11;
            tmp_compexpr_left_11 = EXC_TYPE(PyThreadState_GET());
            tmp_compexpr_right_11 = PyExc_BaseException;
            tmp_res = EXCEPTION_MATCH_BOOL( tmp_compexpr_left_11, tmp_compexpr_right_11 );
            if ( tmp_res == -1 )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 1621;
                type_description_1 = "ooooooo";
                goto try_except_handler_11;
            }
            tmp_condition_result_11 = ( tmp_res != 0 ) ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
            if ( tmp_condition_result_11 == NUITKA_BOOL_TRUE )
            {
                goto branch_yes_11;
            }
            else
            {
                goto branch_no_11;
            }
            branch_yes_11:;
            {
                PyObject *tmp_assign_source_19;
                tmp_assign_source_19 = Py_False;
                {
                    PyObject *old = tmp_with_1__indicator;
                    assert( old != NULL );
                    tmp_with_1__indicator = tmp_assign_source_19;
                    Py_INCREF( tmp_with_1__indicator );
                    Py_DECREF( old );
                }

            }
            {
                nuitka_bool tmp_condition_result_12;
                PyObject *tmp_operand_name_2;
                PyObject *tmp_called_name_6;
                PyObject *tmp_args_element_name_11;
                PyObject *tmp_args_element_name_12;
                PyObject *tmp_args_element_name_13;
                CHECK_OBJECT( tmp_with_1__exit );
                tmp_called_name_6 = tmp_with_1__exit;
                tmp_args_element_name_11 = EXC_TYPE(PyThreadState_GET());
                tmp_args_element_name_12 = EXC_VALUE(PyThreadState_GET());
                tmp_args_element_name_13 = EXC_TRACEBACK(PyThreadState_GET());
                frame_9ac704ea3f4336924bb76de6e74b8ce5->m_frame.f_lineno = 1621;
                {
                    PyObject *call_args[] = { tmp_args_element_name_11, tmp_args_element_name_12, tmp_args_element_name_13 };
                    tmp_operand_name_2 = CALL_FUNCTION_WITH_ARGS3( tmp_called_name_6, call_args );
                }

                if ( tmp_operand_name_2 == NULL )
                {
                    assert( ERROR_OCCURRED() );

                    FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                    exception_lineno = 1621;
                    type_description_1 = "ooooooo";
                    goto try_except_handler_11;
                }
                tmp_res = CHECK_IF_TRUE( tmp_operand_name_2 );
                Py_DECREF( tmp_operand_name_2 );
                if ( tmp_res == -1 )
                {
                    assert( ERROR_OCCURRED() );

                    FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                    exception_lineno = 1621;
                    type_description_1 = "ooooooo";
                    goto try_except_handler_11;
                }
                tmp_condition_result_12 = ( tmp_res == 0 ) ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
                if ( tmp_condition_result_12 == NUITKA_BOOL_TRUE )
                {
                    goto branch_yes_12;
                }
                else
                {
                    goto branch_no_12;
                }
                branch_yes_12:;
                tmp_result = RERAISE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
                if (unlikely( tmp_result == false ))
                {
                    exception_lineno = 1621;
                }

                if (exception_tb && exception_tb->tb_frame == &frame_9ac704ea3f4336924bb76de6e74b8ce5->m_frame) frame_9ac704ea3f4336924bb76de6e74b8ce5->m_frame.f_lineno = exception_tb->tb_lineno;
                type_description_1 = "ooooooo";
                goto try_except_handler_11;
                branch_no_12:;
            }
            goto branch_end_11;
            branch_no_11:;
            tmp_result = RERAISE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
            if (unlikely( tmp_result == false ))
            {
                exception_lineno = 1621;
            }

            if (exception_tb && exception_tb->tb_frame == &frame_9ac704ea3f4336924bb76de6e74b8ce5->m_frame) frame_9ac704ea3f4336924bb76de6e74b8ce5->m_frame.f_lineno = exception_tb->tb_lineno;
            type_description_1 = "ooooooo";
            goto try_except_handler_11;
            branch_end_11:;
        }
        goto try_end_7;
        // Exception handler code:
        try_except_handler_11:;
        exception_keeper_type_8 = exception_type;
        exception_keeper_value_8 = exception_value;
        exception_keeper_tb_8 = exception_tb;
        exception_keeper_lineno_8 = exception_lineno;
        exception_type = NULL;
        exception_value = NULL;
        exception_tb = NULL;
        exception_lineno = 0;

        // Restore previous exception.
        SET_CURRENT_EXCEPTION( exception_preserved_type_2, exception_preserved_value_2, exception_preserved_tb_2 );
        // Re-raise.
        exception_type = exception_keeper_type_8;
        exception_value = exception_keeper_value_8;
        exception_tb = exception_keeper_tb_8;
        exception_lineno = exception_keeper_lineno_8;

        goto try_except_handler_7;
        // End of try:
        try_end_7:;
        // Restore previous exception.
        SET_CURRENT_EXCEPTION( exception_preserved_type_2, exception_preserved_value_2, exception_preserved_tb_2 );
        goto try_end_6;
        // exception handler codes exits in all cases
        NUITKA_CANNOT_GET_HERE( subprocess$$$function_56__wait );
        return NULL;
        // End of try:
        try_end_6:;
        goto try_end_8;
        // Exception handler code:
        try_except_handler_7:;
        exception_keeper_type_9 = exception_type;
        exception_keeper_value_9 = exception_value;
        exception_keeper_tb_9 = exception_tb;
        exception_keeper_lineno_9 = exception_lineno;
        exception_type = NULL;
        exception_value = NULL;
        exception_tb = NULL;
        exception_lineno = 0;

        {
            nuitka_bool tmp_condition_result_13;
            nuitka_bool tmp_compexpr_left_12;
            nuitka_bool tmp_compexpr_right_12;
            int tmp_truth_name_2;
            CHECK_OBJECT( tmp_with_1__indicator );
            tmp_truth_name_2 = CHECK_IF_TRUE( tmp_with_1__indicator );
            if ( tmp_truth_name_2 == -1 )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );

                Py_DECREF( exception_keeper_type_9 );
                Py_XDECREF( exception_keeper_value_9 );
                Py_XDECREF( exception_keeper_tb_9 );

                exception_lineno = 1621;
                type_description_1 = "ooooooo";
                goto try_except_handler_6;
            }
            tmp_compexpr_left_12 = tmp_truth_name_2 == 1 ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
            tmp_compexpr_right_12 = NUITKA_BOOL_TRUE;
            tmp_condition_result_13 = ( tmp_compexpr_left_12 == tmp_compexpr_right_12 ) ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
            if ( tmp_condition_result_13 == NUITKA_BOOL_TRUE )
            {
                goto branch_yes_13;
            }
            else
            {
                goto branch_no_13;
            }
            branch_yes_13:;
            {
                PyObject *tmp_called_name_7;
                PyObject *tmp_call_result_8;
                CHECK_OBJECT( tmp_with_1__exit );
                tmp_called_name_7 = tmp_with_1__exit;
                frame_9ac704ea3f4336924bb76de6e74b8ce5->m_frame.f_lineno = 1621;
                tmp_call_result_8 = CALL_FUNCTION_WITH_ARGS3( tmp_called_name_7, &PyTuple_GET_ITEM( const_tuple_none_none_none_tuple, 0 ) );

                if ( tmp_call_result_8 == NULL )
                {
                    assert( ERROR_OCCURRED() );

                    FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );

                    Py_DECREF( exception_keeper_type_9 );
                    Py_XDECREF( exception_keeper_value_9 );
                    Py_XDECREF( exception_keeper_tb_9 );

                    exception_lineno = 1621;
                    type_description_1 = "ooooooo";
                    goto try_except_handler_6;
                }
                Py_DECREF( tmp_call_result_8 );
            }
            branch_no_13:;
        }
        // Re-raise.
        exception_type = exception_keeper_type_9;
        exception_value = exception_keeper_value_9;
        exception_tb = exception_keeper_tb_9;
        exception_lineno = exception_keeper_lineno_9;

        goto try_except_handler_6;
        // try break handler code:
        try_break_handler_7:;
        {
            nuitka_bool tmp_condition_result_14;
            nuitka_bool tmp_compexpr_left_13;
            nuitka_bool tmp_compexpr_right_13;
            int tmp_truth_name_3;
            CHECK_OBJECT( tmp_with_1__indicator );
            tmp_truth_name_3 = CHECK_IF_TRUE( tmp_with_1__indicator );
            if ( tmp_truth_name_3 == -1 )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 1621;
                type_description_1 = "ooooooo";
                goto try_except_handler_6;
            }
            tmp_compexpr_left_13 = tmp_truth_name_3 == 1 ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
            tmp_compexpr_right_13 = NUITKA_BOOL_TRUE;
            tmp_condition_result_14 = ( tmp_compexpr_left_13 == tmp_compexpr_right_13 ) ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
            if ( tmp_condition_result_14 == NUITKA_BOOL_TRUE )
            {
                goto branch_yes_14;
            }
            else
            {
                goto branch_no_14;
            }
            branch_yes_14:;
            {
                PyObject *tmp_called_name_8;
                PyObject *tmp_call_result_9;
                CHECK_OBJECT( tmp_with_1__exit );
                tmp_called_name_8 = tmp_with_1__exit;
                frame_9ac704ea3f4336924bb76de6e74b8ce5->m_frame.f_lineno = 1621;
                tmp_call_result_9 = CALL_FUNCTION_WITH_ARGS3( tmp_called_name_8, &PyTuple_GET_ITEM( const_tuple_none_none_none_tuple, 0 ) );

                if ( tmp_call_result_9 == NULL )
                {
                    assert( ERROR_OCCURRED() );

                    FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                    exception_lineno = 1621;
                    type_description_1 = "ooooooo";
                    goto try_except_handler_6;
                }
                Py_DECREF( tmp_call_result_9 );
            }
            branch_no_14:;
        }
        goto try_break_handler_6;
        // End of try:
        try_end_8:;
        {
            nuitka_bool tmp_condition_result_15;
            nuitka_bool tmp_compexpr_left_14;
            nuitka_bool tmp_compexpr_right_14;
            int tmp_truth_name_4;
            CHECK_OBJECT( tmp_with_1__indicator );
            tmp_truth_name_4 = CHECK_IF_TRUE( tmp_with_1__indicator );
            if ( tmp_truth_name_4 == -1 )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 1621;
                type_description_1 = "ooooooo";
                goto try_except_handler_6;
            }
            tmp_compexpr_left_14 = tmp_truth_name_4 == 1 ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
            tmp_compexpr_right_14 = NUITKA_BOOL_TRUE;
            tmp_condition_result_15 = ( tmp_compexpr_left_14 == tmp_compexpr_right_14 ) ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
            if ( tmp_condition_result_15 == NUITKA_BOOL_TRUE )
            {
                goto branch_yes_15;
            }
            else
            {
                goto branch_no_15;
            }
            branch_yes_15:;
            {
                PyObject *tmp_called_name_9;
                PyObject *tmp_call_result_10;
                CHECK_OBJECT( tmp_with_1__exit );
                tmp_called_name_9 = tmp_with_1__exit;
                frame_9ac704ea3f4336924bb76de6e74b8ce5->m_frame.f_lineno = 1621;
                tmp_call_result_10 = CALL_FUNCTION_WITH_ARGS3( tmp_called_name_9, &PyTuple_GET_ITEM( const_tuple_none_none_none_tuple, 0 ) );

                if ( tmp_call_result_10 == NULL )
                {
                    assert( ERROR_OCCURRED() );

                    FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                    exception_lineno = 1621;
                    type_description_1 = "ooooooo";
                    goto try_except_handler_6;
                }
                Py_DECREF( tmp_call_result_10 );
            }
            branch_no_15:;
        }
        goto try_end_9;
        // Exception handler code:
        try_except_handler_6:;
        exception_keeper_type_10 = exception_type;
        exception_keeper_value_10 = exception_value;
        exception_keeper_tb_10 = exception_tb;
        exception_keeper_lineno_10 = exception_lineno;
        exception_type = NULL;
        exception_value = NULL;
        exception_tb = NULL;
        exception_lineno = 0;

        Py_XDECREF( tmp_with_1__source );
        tmp_with_1__source = NULL;

        Py_XDECREF( tmp_with_1__enter );
        tmp_with_1__enter = NULL;

        Py_XDECREF( tmp_with_1__exit );
        tmp_with_1__exit = NULL;

        Py_XDECREF( tmp_with_1__indicator );
        tmp_with_1__indicator = NULL;

        // Re-raise.
        exception_type = exception_keeper_type_10;
        exception_value = exception_keeper_value_10;
        exception_tb = exception_keeper_tb_10;
        exception_lineno = exception_keeper_lineno_10;

        goto frame_exception_exit_1;
        // try break handler code:
        try_break_handler_6:;
        CHECK_OBJECT( (PyObject *)tmp_with_1__source );
        Py_DECREF( tmp_with_1__source );
        tmp_with_1__source = NULL;

        CHECK_OBJECT( (PyObject *)tmp_with_1__enter );
        Py_DECREF( tmp_with_1__enter );
        tmp_with_1__enter = NULL;

        CHECK_OBJECT( (PyObject *)tmp_with_1__exit );
        Py_DECREF( tmp_with_1__exit );
        tmp_with_1__exit = NULL;

        CHECK_OBJECT( (PyObject *)tmp_with_1__indicator );
        Py_DECREF( tmp_with_1__indicator );
        tmp_with_1__indicator = NULL;

        goto loop_end_2;
        // End of try:
        try_end_9:;
        CHECK_OBJECT( (PyObject *)tmp_with_1__source );
        Py_DECREF( tmp_with_1__source );
        tmp_with_1__source = NULL;

        CHECK_OBJECT( (PyObject *)tmp_with_1__enter );
        Py_DECREF( tmp_with_1__enter );
        tmp_with_1__enter = NULL;

        CHECK_OBJECT( (PyObject *)tmp_with_1__exit );
        Py_DECREF( tmp_with_1__exit );
        tmp_with_1__exit = NULL;

        Py_XDECREF( tmp_with_1__indicator );
        tmp_with_1__indicator = NULL;

        if ( CONSIDER_THREADING() == false )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 1620;
            type_description_1 = "ooooooo";
            goto frame_exception_exit_1;
        }
        goto loop_start_2;
        loop_end_2:;
        branch_end_2:;
    }
    {
        PyObject *tmp_source_name_19;
        CHECK_OBJECT( par_self );
        tmp_source_name_19 = par_self;
        tmp_return_value = LOOKUP_ATTRIBUTE( tmp_source_name_19, const_str_plain_returncode );
        if ( tmp_return_value == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 1630;
            type_description_1 = "ooooooo";
            goto frame_exception_exit_1;
        }
        goto frame_return_exit_1;
    }

#if 0
    RESTORE_FRAME_EXCEPTION( frame_9ac704ea3f4336924bb76de6e74b8ce5 );
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto frame_no_exception_1;

    frame_return_exit_1:;
#if 0
    RESTORE_FRAME_EXCEPTION( frame_9ac704ea3f4336924bb76de6e74b8ce5 );
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto try_return_handler_1;

    frame_exception_exit_1:;

#if 0
    RESTORE_FRAME_EXCEPTION( frame_9ac704ea3f4336924bb76de6e74b8ce5 );
#endif

    if ( exception_tb == NULL )
    {
        exception_tb = MAKE_TRACEBACK( frame_9ac704ea3f4336924bb76de6e74b8ce5, exception_lineno );
    }
    else if ( exception_tb->tb_frame != &frame_9ac704ea3f4336924bb76de6e74b8ce5->m_frame )
    {
        exception_tb = ADD_TRACEBACK( exception_tb, frame_9ac704ea3f4336924bb76de6e74b8ce5, exception_lineno );
    }

    // Attachs locals to frame if any.
    Nuitka_Frame_AttachLocals(
        (struct Nuitka_FrameObject *)frame_9ac704ea3f4336924bb76de6e74b8ce5,
        type_description_1,
        par_self,
        par_timeout,
        var_endtime,
        var_delay,
        var_pid,
        var_sts,
        var_remaining
    );


    // Release cached frame.
    if ( frame_9ac704ea3f4336924bb76de6e74b8ce5 == cache_frame_9ac704ea3f4336924bb76de6e74b8ce5 )
    {
        Py_DECREF( frame_9ac704ea3f4336924bb76de6e74b8ce5 );
    }
    cache_frame_9ac704ea3f4336924bb76de6e74b8ce5 = NULL;

    assertFrameObject( frame_9ac704ea3f4336924bb76de6e74b8ce5 );

    // Put the previous frame back on top.
    popFrameStack();

    // Return the error.
    goto try_except_handler_1;

    frame_no_exception_1:;
    // tried codes exits in all cases
    NUITKA_CANNOT_GET_HERE( subprocess$$$function_56__wait );
    return NULL;
    // Return handler code:
    try_return_handler_1:;
    CHECK_OBJECT( (PyObject *)par_self );
    Py_DECREF( par_self );
    par_self = NULL;

    CHECK_OBJECT( (PyObject *)par_timeout );
    Py_DECREF( par_timeout );
    par_timeout = NULL;

    Py_XDECREF( var_endtime );
    var_endtime = NULL;

    Py_XDECREF( var_delay );
    var_delay = NULL;

    Py_XDECREF( var_pid );
    var_pid = NULL;

    Py_XDECREF( var_sts );
    var_sts = NULL;

    Py_XDECREF( var_remaining );
    var_remaining = NULL;

    goto function_return_exit;
    // Exception handler code:
    try_except_handler_1:;
    exception_keeper_type_11 = exception_type;
    exception_keeper_value_11 = exception_value;
    exception_keeper_tb_11 = exception_tb;
    exception_keeper_lineno_11 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    CHECK_OBJECT( (PyObject *)par_self );
    Py_DECREF( par_self );
    par_self = NULL;

    CHECK_OBJECT( (PyObject *)par_timeout );
    Py_DECREF( par_timeout );
    par_timeout = NULL;

    Py_XDECREF( var_endtime );
    var_endtime = NULL;

    Py_XDECREF( var_delay );
    var_delay = NULL;

    Py_XDECREF( var_pid );
    var_pid = NULL;

    Py_XDECREF( var_sts );
    var_sts = NULL;

    Py_XDECREF( var_remaining );
    var_remaining = NULL;

    // Re-raise.
    exception_type = exception_keeper_type_11;
    exception_value = exception_keeper_value_11;
    exception_tb = exception_keeper_tb_11;
    exception_lineno = exception_keeper_lineno_11;

    goto function_exception_exit;
    // End of try:

    // Return statement must have exited already.
    NUITKA_CANNOT_GET_HERE( subprocess$$$function_56__wait );
    return NULL;

function_exception_exit:
    assert( exception_type );
    RESTORE_ERROR_OCCURRED( exception_type, exception_value, exception_tb );

    return NULL;

function_return_exit:
   // Function cleanup code if any.


   // Actual function exit with return value, making sure we did not make
   // the error status worse despite non-NULL return.
   CHECK_OBJECT( tmp_return_value );
   assert( had_error || !ERROR_OCCURRED() );
   return tmp_return_value;
}


static PyObject *impl_subprocess$$$function_57__communicate( struct Nuitka_FunctionObject const *self, PyObject **python_pars )
{
    // Preserve error status for checks
#ifndef __NUITKA_NO_ASSERT__
    NUITKA_MAY_BE_UNUSED bool had_error = ERROR_OCCURRED();
#endif

    // Local variable declarations.
    PyObject *par_self = python_pars[ 0 ];
    PyObject *par_input = python_pars[ 1 ];
    PyObject *par_endtime = python_pars[ 2 ];
    PyObject *par_orig_timeout = python_pars[ 3 ];
    PyObject *var_stdout = NULL;
    PyObject *var_stderr = NULL;
    PyObject *var_input_view = NULL;
    PyObject *var_selector = NULL;
    PyObject *var_timeout = NULL;
    PyObject *var_ready = NULL;
    PyObject *var_key = NULL;
    PyObject *var_events = NULL;
    PyObject *var_chunk = NULL;
    PyObject *var_data = NULL;
    PyObject *tmp_for_loop_1__for_iterator = NULL;
    PyObject *tmp_for_loop_1__iter_value = NULL;
    PyObject *tmp_inplace_assign_attr_1__end = NULL;
    PyObject *tmp_inplace_assign_attr_1__start = NULL;
    PyObject *tmp_try_except_1__unhandled_indicator = NULL;
    PyObject *tmp_tuple_unpack_1__element_1 = NULL;
    PyObject *tmp_tuple_unpack_1__element_2 = NULL;
    PyObject *tmp_tuple_unpack_1__source_iter = NULL;
    PyObject *tmp_with_1__enter = NULL;
    PyObject *tmp_with_1__exit = NULL;
    nuitka_bool tmp_with_1__indicator = NUITKA_BOOL_UNASSIGNED;
    PyObject *tmp_with_1__source = NULL;
    struct Nuitka_FrameObject *frame_b3fe41aa9e45c0ee93ce9ccbee67af61;
    NUITKA_MAY_BE_UNUSED char const *type_description_1 = NULL;
    PyObject *exception_type = NULL;
    PyObject *exception_value = NULL;
    PyTracebackObject *exception_tb = NULL;
    NUITKA_MAY_BE_UNUSED int exception_lineno = 0;
    int tmp_res;
    PyObject *exception_keeper_type_1;
    PyObject *exception_keeper_value_1;
    PyTracebackObject *exception_keeper_tb_1;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_1;
    PyObject *exception_preserved_type_1;
    PyObject *exception_preserved_value_1;
    PyTracebackObject *exception_preserved_tb_1;
    bool tmp_result;
    PyObject *exception_keeper_type_2;
    PyObject *exception_keeper_value_2;
    PyTracebackObject *exception_keeper_tb_2;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_2;
    PyObject *exception_keeper_type_3;
    PyObject *exception_keeper_value_3;
    PyTracebackObject *exception_keeper_tb_3;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_3;
    PyObject *exception_preserved_type_2;
    PyObject *exception_preserved_value_2;
    PyTracebackObject *exception_preserved_tb_2;
    PyObject *exception_keeper_type_4;
    PyObject *exception_keeper_value_4;
    PyTracebackObject *exception_keeper_tb_4;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_4;
    PyObject *tmp_iterator_attempt;
    PyObject *exception_keeper_type_5;
    PyObject *exception_keeper_value_5;
    PyTracebackObject *exception_keeper_tb_5;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_5;
    PyObject *exception_keeper_type_6;
    PyObject *exception_keeper_value_6;
    PyTracebackObject *exception_keeper_tb_6;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_6;
    PyObject *exception_keeper_type_7;
    PyObject *exception_keeper_value_7;
    PyTracebackObject *exception_keeper_tb_7;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_7;
    PyObject *exception_keeper_type_8;
    PyObject *exception_keeper_value_8;
    PyTracebackObject *exception_keeper_tb_8;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_8;
    PyObject *exception_keeper_type_9;
    PyObject *exception_keeper_value_9;
    PyTracebackObject *exception_keeper_tb_9;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_9;
    PyObject *exception_preserved_type_3;
    PyObject *exception_preserved_value_3;
    PyTracebackObject *exception_preserved_tb_3;
    PyObject *exception_keeper_type_10;
    PyObject *exception_keeper_value_10;
    PyTracebackObject *exception_keeper_tb_10;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_10;
    PyObject *exception_keeper_type_11;
    PyObject *exception_keeper_value_11;
    PyTracebackObject *exception_keeper_tb_11;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_11;
    PyObject *exception_keeper_type_12;
    PyObject *exception_keeper_value_12;
    PyTracebackObject *exception_keeper_tb_12;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_12;
    PyObject *exception_keeper_type_13;
    PyObject *exception_keeper_value_13;
    PyTracebackObject *exception_keeper_tb_13;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_13;
    PyObject *exception_preserved_type_4;
    PyObject *exception_preserved_value_4;
    PyTracebackObject *exception_preserved_tb_4;
    PyObject *exception_keeper_type_14;
    PyObject *exception_keeper_value_14;
    PyTracebackObject *exception_keeper_tb_14;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_14;
    PyObject *exception_keeper_type_15;
    PyObject *exception_keeper_value_15;
    PyTracebackObject *exception_keeper_tb_15;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_15;
    PyObject *exception_keeper_type_16;
    PyObject *exception_keeper_value_16;
    PyTracebackObject *exception_keeper_tb_16;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_16;
    PyObject *tmp_return_value = NULL;
    static struct Nuitka_FrameObject *cache_frame_b3fe41aa9e45c0ee93ce9ccbee67af61 = NULL;
    PyObject *exception_keeper_type_17;
    PyObject *exception_keeper_value_17;
    PyTracebackObject *exception_keeper_tb_17;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_17;

    // Actual function body.
    // Tried code:
    MAKE_OR_REUSE_FRAME( cache_frame_b3fe41aa9e45c0ee93ce9ccbee67af61, codeobj_b3fe41aa9e45c0ee93ce9ccbee67af61, module_subprocess, sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *) );
    frame_b3fe41aa9e45c0ee93ce9ccbee67af61 = cache_frame_b3fe41aa9e45c0ee93ce9ccbee67af61;

    // Push the new frame as the currently active one.
    pushFrameStack( frame_b3fe41aa9e45c0ee93ce9ccbee67af61 );

    // Mark the frame object as in use, ref count 1 will be up for reuse.
    assert( Py_REFCNT( frame_b3fe41aa9e45c0ee93ce9ccbee67af61 ) == 2 ); // Frame stack

    // Framed code:
    {
        nuitka_bool tmp_condition_result_1;
        int tmp_and_left_truth_1;
        nuitka_bool tmp_and_left_value_1;
        nuitka_bool tmp_and_right_value_1;
        PyObject *tmp_source_name_1;
        PyObject *tmp_attribute_value_1;
        int tmp_truth_name_1;
        PyObject *tmp_operand_name_1;
        PyObject *tmp_source_name_2;
        CHECK_OBJECT( par_self );
        tmp_source_name_1 = par_self;
        tmp_attribute_value_1 = LOOKUP_ATTRIBUTE( tmp_source_name_1, const_str_plain_stdin );
        if ( tmp_attribute_value_1 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 1634;
            type_description_1 = "oooooooooooooo";
            goto frame_exception_exit_1;
        }
        tmp_truth_name_1 = CHECK_IF_TRUE( tmp_attribute_value_1 );
        if ( tmp_truth_name_1 == -1 )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
            Py_DECREF( tmp_attribute_value_1 );

            exception_lineno = 1634;
            type_description_1 = "oooooooooooooo";
            goto frame_exception_exit_1;
        }
        tmp_and_left_value_1 = tmp_truth_name_1 == 1 ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
        Py_DECREF( tmp_attribute_value_1 );
        tmp_and_left_truth_1 = tmp_and_left_value_1 == NUITKA_BOOL_TRUE ? 1 : 0;
        if ( tmp_and_left_truth_1 == 1 )
        {
            goto and_right_1;
        }
        else
        {
            goto and_left_1;
        }
        and_right_1:;
        CHECK_OBJECT( par_self );
        tmp_source_name_2 = par_self;
        tmp_operand_name_1 = LOOKUP_ATTRIBUTE( tmp_source_name_2, const_str_plain__communication_started );
        if ( tmp_operand_name_1 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 1634;
            type_description_1 = "oooooooooooooo";
            goto frame_exception_exit_1;
        }
        tmp_res = CHECK_IF_TRUE( tmp_operand_name_1 );
        Py_DECREF( tmp_operand_name_1 );
        if ( tmp_res == -1 )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 1634;
            type_description_1 = "oooooooooooooo";
            goto frame_exception_exit_1;
        }
        tmp_and_right_value_1 = ( tmp_res == 0 ) ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
        tmp_condition_result_1 = tmp_and_right_value_1;
        goto and_end_1;
        and_left_1:;
        tmp_condition_result_1 = tmp_and_left_value_1;
        and_end_1:;
        if ( tmp_condition_result_1 == NUITKA_BOOL_TRUE )
        {
            goto branch_yes_1;
        }
        else
        {
            goto branch_no_1;
        }
        branch_yes_1:;
        // Tried code:
        {
            PyObject *tmp_called_instance_1;
            PyObject *tmp_source_name_3;
            PyObject *tmp_call_result_1;
            CHECK_OBJECT( par_self );
            tmp_source_name_3 = par_self;
            tmp_called_instance_1 = LOOKUP_ATTRIBUTE( tmp_source_name_3, const_str_plain_stdin );
            if ( tmp_called_instance_1 == NULL )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 1638;
                type_description_1 = "oooooooooooooo";
                goto try_except_handler_2;
            }
            frame_b3fe41aa9e45c0ee93ce9ccbee67af61->m_frame.f_lineno = 1638;
            tmp_call_result_1 = CALL_METHOD_NO_ARGS( tmp_called_instance_1, const_str_plain_flush );
            Py_DECREF( tmp_called_instance_1 );
            if ( tmp_call_result_1 == NULL )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 1638;
                type_description_1 = "oooooooooooooo";
                goto try_except_handler_2;
            }
            Py_DECREF( tmp_call_result_1 );
        }
        goto try_end_1;
        // Exception handler code:
        try_except_handler_2:;
        exception_keeper_type_1 = exception_type;
        exception_keeper_value_1 = exception_value;
        exception_keeper_tb_1 = exception_tb;
        exception_keeper_lineno_1 = exception_lineno;
        exception_type = NULL;
        exception_value = NULL;
        exception_tb = NULL;
        exception_lineno = 0;

        // Preserve existing published exception.
        exception_preserved_type_1 = EXC_TYPE(PyThreadState_GET());
        Py_XINCREF( exception_preserved_type_1 );
        exception_preserved_value_1 = EXC_VALUE(PyThreadState_GET());
        Py_XINCREF( exception_preserved_value_1 );
        exception_preserved_tb_1 = (PyTracebackObject *)EXC_TRACEBACK(PyThreadState_GET());
        Py_XINCREF( exception_preserved_tb_1 );

        if ( exception_keeper_tb_1 == NULL )
        {
            exception_keeper_tb_1 = MAKE_TRACEBACK( frame_b3fe41aa9e45c0ee93ce9ccbee67af61, exception_keeper_lineno_1 );
        }
        else if ( exception_keeper_lineno_1 != 0 )
        {
            exception_keeper_tb_1 = ADD_TRACEBACK( exception_keeper_tb_1, frame_b3fe41aa9e45c0ee93ce9ccbee67af61, exception_keeper_lineno_1 );
        }

        NORMALIZE_EXCEPTION( &exception_keeper_type_1, &exception_keeper_value_1, &exception_keeper_tb_1 );
        PyException_SetTraceback( exception_keeper_value_1, (PyObject *)exception_keeper_tb_1 );
        PUBLISH_EXCEPTION( &exception_keeper_type_1, &exception_keeper_value_1, &exception_keeper_tb_1 );
        // Tried code:
        {
            nuitka_bool tmp_condition_result_2;
            PyObject *tmp_operand_name_2;
            PyObject *tmp_compexpr_left_1;
            PyObject *tmp_compexpr_right_1;
            tmp_compexpr_left_1 = EXC_TYPE(PyThreadState_GET());
            tmp_compexpr_right_1 = PyExc_BrokenPipeError;
            tmp_res = EXCEPTION_MATCH_BOOL( tmp_compexpr_left_1, tmp_compexpr_right_1 );
            if ( tmp_res == -1 )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 1639;
                type_description_1 = "oooooooooooooo";
                goto try_except_handler_3;
            }
            tmp_operand_name_2 = ( tmp_res != 0 ) ? Py_True : Py_False;
            tmp_res = CHECK_IF_TRUE( tmp_operand_name_2 );
            if ( tmp_res == -1 )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 1639;
                type_description_1 = "oooooooooooooo";
                goto try_except_handler_3;
            }
            tmp_condition_result_2 = ( tmp_res == 0 ) ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
            if ( tmp_condition_result_2 == NUITKA_BOOL_TRUE )
            {
                goto branch_yes_2;
            }
            else
            {
                goto branch_no_2;
            }
            branch_yes_2:;
            tmp_result = RERAISE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
            if (unlikely( tmp_result == false ))
            {
                exception_lineno = 1637;
            }

            if (exception_tb && exception_tb->tb_frame == &frame_b3fe41aa9e45c0ee93ce9ccbee67af61->m_frame) frame_b3fe41aa9e45c0ee93ce9ccbee67af61->m_frame.f_lineno = exception_tb->tb_lineno;
            type_description_1 = "oooooooooooooo";
            goto try_except_handler_3;
            branch_no_2:;
        }
        goto try_end_2;
        // Exception handler code:
        try_except_handler_3:;
        exception_keeper_type_2 = exception_type;
        exception_keeper_value_2 = exception_value;
        exception_keeper_tb_2 = exception_tb;
        exception_keeper_lineno_2 = exception_lineno;
        exception_type = NULL;
        exception_value = NULL;
        exception_tb = NULL;
        exception_lineno = 0;

        // Restore previous exception.
        SET_CURRENT_EXCEPTION( exception_preserved_type_1, exception_preserved_value_1, exception_preserved_tb_1 );
        // Re-raise.
        exception_type = exception_keeper_type_2;
        exception_value = exception_keeper_value_2;
        exception_tb = exception_keeper_tb_2;
        exception_lineno = exception_keeper_lineno_2;

        goto frame_exception_exit_1;
        // End of try:
        try_end_2:;
        // Restore previous exception.
        SET_CURRENT_EXCEPTION( exception_preserved_type_1, exception_preserved_value_1, exception_preserved_tb_1 );
        goto try_end_1;
        // exception handler codes exits in all cases
        NUITKA_CANNOT_GET_HERE( subprocess$$$function_57__communicate );
        return NULL;
        // End of try:
        try_end_1:;
        {
            nuitka_bool tmp_condition_result_3;
            PyObject *tmp_operand_name_3;
            CHECK_OBJECT( par_input );
            tmp_operand_name_3 = par_input;
            tmp_res = CHECK_IF_TRUE( tmp_operand_name_3 );
            if ( tmp_res == -1 )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 1641;
                type_description_1 = "oooooooooooooo";
                goto frame_exception_exit_1;
            }
            tmp_condition_result_3 = ( tmp_res == 0 ) ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
            if ( tmp_condition_result_3 == NUITKA_BOOL_TRUE )
            {
                goto branch_yes_3;
            }
            else
            {
                goto branch_no_3;
            }
            branch_yes_3:;
            // Tried code:
            {
                PyObject *tmp_called_instance_2;
                PyObject *tmp_source_name_4;
                PyObject *tmp_call_result_2;
                CHECK_OBJECT( par_self );
                tmp_source_name_4 = par_self;
                tmp_called_instance_2 = LOOKUP_ATTRIBUTE( tmp_source_name_4, const_str_plain_stdin );
                if ( tmp_called_instance_2 == NULL )
                {
                    assert( ERROR_OCCURRED() );

                    FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                    exception_lineno = 1643;
                    type_description_1 = "oooooooooooooo";
                    goto try_except_handler_4;
                }
                frame_b3fe41aa9e45c0ee93ce9ccbee67af61->m_frame.f_lineno = 1643;
                tmp_call_result_2 = CALL_METHOD_NO_ARGS( tmp_called_instance_2, const_str_plain_close );
                Py_DECREF( tmp_called_instance_2 );
                if ( tmp_call_result_2 == NULL )
                {
                    assert( ERROR_OCCURRED() );

                    FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                    exception_lineno = 1643;
                    type_description_1 = "oooooooooooooo";
                    goto try_except_handler_4;
                }
                Py_DECREF( tmp_call_result_2 );
            }
            goto try_end_3;
            // Exception handler code:
            try_except_handler_4:;
            exception_keeper_type_3 = exception_type;
            exception_keeper_value_3 = exception_value;
            exception_keeper_tb_3 = exception_tb;
            exception_keeper_lineno_3 = exception_lineno;
            exception_type = NULL;
            exception_value = NULL;
            exception_tb = NULL;
            exception_lineno = 0;

            // Preserve existing published exception.
            exception_preserved_type_2 = EXC_TYPE(PyThreadState_GET());
            Py_XINCREF( exception_preserved_type_2 );
            exception_preserved_value_2 = EXC_VALUE(PyThreadState_GET());
            Py_XINCREF( exception_preserved_value_2 );
            exception_preserved_tb_2 = (PyTracebackObject *)EXC_TRACEBACK(PyThreadState_GET());
            Py_XINCREF( exception_preserved_tb_2 );

            if ( exception_keeper_tb_3 == NULL )
            {
                exception_keeper_tb_3 = MAKE_TRACEBACK( frame_b3fe41aa9e45c0ee93ce9ccbee67af61, exception_keeper_lineno_3 );
            }
            else if ( exception_keeper_lineno_3 != 0 )
            {
                exception_keeper_tb_3 = ADD_TRACEBACK( exception_keeper_tb_3, frame_b3fe41aa9e45c0ee93ce9ccbee67af61, exception_keeper_lineno_3 );
            }

            NORMALIZE_EXCEPTION( &exception_keeper_type_3, &exception_keeper_value_3, &exception_keeper_tb_3 );
            PyException_SetTraceback( exception_keeper_value_3, (PyObject *)exception_keeper_tb_3 );
            PUBLISH_EXCEPTION( &exception_keeper_type_3, &exception_keeper_value_3, &exception_keeper_tb_3 );
            // Tried code:
            {
                nuitka_bool tmp_condition_result_4;
                PyObject *tmp_operand_name_4;
                PyObject *tmp_compexpr_left_2;
                PyObject *tmp_compexpr_right_2;
                tmp_compexpr_left_2 = EXC_TYPE(PyThreadState_GET());
                tmp_compexpr_right_2 = PyExc_BrokenPipeError;
                tmp_res = EXCEPTION_MATCH_BOOL( tmp_compexpr_left_2, tmp_compexpr_right_2 );
                if ( tmp_res == -1 )
                {
                    assert( ERROR_OCCURRED() );

                    FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                    exception_lineno = 1644;
                    type_description_1 = "oooooooooooooo";
                    goto try_except_handler_5;
                }
                tmp_operand_name_4 = ( tmp_res != 0 ) ? Py_True : Py_False;
                tmp_res = CHECK_IF_TRUE( tmp_operand_name_4 );
                if ( tmp_res == -1 )
                {
                    assert( ERROR_OCCURRED() );

                    FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                    exception_lineno = 1644;
                    type_description_1 = "oooooooooooooo";
                    goto try_except_handler_5;
                }
                tmp_condition_result_4 = ( tmp_res == 0 ) ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
                if ( tmp_condition_result_4 == NUITKA_BOOL_TRUE )
                {
                    goto branch_yes_4;
                }
                else
                {
                    goto branch_no_4;
                }
                branch_yes_4:;
                tmp_result = RERAISE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
                if (unlikely( tmp_result == false ))
                {
                    exception_lineno = 1642;
                }

                if (exception_tb && exception_tb->tb_frame == &frame_b3fe41aa9e45c0ee93ce9ccbee67af61->m_frame) frame_b3fe41aa9e45c0ee93ce9ccbee67af61->m_frame.f_lineno = exception_tb->tb_lineno;
                type_description_1 = "oooooooooooooo";
                goto try_except_handler_5;
                branch_no_4:;
            }
            goto try_end_4;
            // Exception handler code:
            try_except_handler_5:;
            exception_keeper_type_4 = exception_type;
            exception_keeper_value_4 = exception_value;
            exception_keeper_tb_4 = exception_tb;
            exception_keeper_lineno_4 = exception_lineno;
            exception_type = NULL;
            exception_value = NULL;
            exception_tb = NULL;
            exception_lineno = 0;

            // Restore previous exception.
            SET_CURRENT_EXCEPTION( exception_preserved_type_2, exception_preserved_value_2, exception_preserved_tb_2 );
            // Re-raise.
            exception_type = exception_keeper_type_4;
            exception_value = exception_keeper_value_4;
            exception_tb = exception_keeper_tb_4;
            exception_lineno = exception_keeper_lineno_4;

            goto frame_exception_exit_1;
            // End of try:
            try_end_4:;
            // Restore previous exception.
            SET_CURRENT_EXCEPTION( exception_preserved_type_2, exception_preserved_value_2, exception_preserved_tb_2 );
            goto try_end_3;
            // exception handler codes exits in all cases
            NUITKA_CANNOT_GET_HERE( subprocess$$$function_57__communicate );
            return NULL;
            // End of try:
            try_end_3:;
            branch_no_3:;
        }
        branch_no_1:;
    }
    {
        PyObject *tmp_assign_source_1;
        tmp_assign_source_1 = Py_None;
        assert( var_stdout == NULL );
        Py_INCREF( tmp_assign_source_1 );
        var_stdout = tmp_assign_source_1;
    }
    {
        PyObject *tmp_assign_source_2;
        tmp_assign_source_2 = Py_None;
        assert( var_stderr == NULL );
        Py_INCREF( tmp_assign_source_2 );
        var_stderr = tmp_assign_source_2;
    }
    {
        nuitka_bool tmp_condition_result_5;
        PyObject *tmp_operand_name_5;
        PyObject *tmp_source_name_5;
        CHECK_OBJECT( par_self );
        tmp_source_name_5 = par_self;
        tmp_operand_name_5 = LOOKUP_ATTRIBUTE( tmp_source_name_5, const_str_plain__communication_started );
        if ( tmp_operand_name_5 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 1651;
            type_description_1 = "oooooooooooooo";
            goto frame_exception_exit_1;
        }
        tmp_res = CHECK_IF_TRUE( tmp_operand_name_5 );
        Py_DECREF( tmp_operand_name_5 );
        if ( tmp_res == -1 )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 1651;
            type_description_1 = "oooooooooooooo";
            goto frame_exception_exit_1;
        }
        tmp_condition_result_5 = ( tmp_res == 0 ) ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
        if ( tmp_condition_result_5 == NUITKA_BOOL_TRUE )
        {
            goto branch_yes_5;
        }
        else
        {
            goto branch_no_5;
        }
        branch_yes_5:;
        {
            PyObject *tmp_assattr_name_1;
            PyObject *tmp_assattr_target_1;
            tmp_assattr_name_1 = PyDict_New();
            CHECK_OBJECT( par_self );
            tmp_assattr_target_1 = par_self;
            tmp_result = SET_ATTRIBUTE( tmp_assattr_target_1, const_str_plain__fileobj2output, tmp_assattr_name_1 );
            Py_DECREF( tmp_assattr_name_1 );
            if ( tmp_result == false )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 1652;
                type_description_1 = "oooooooooooooo";
                goto frame_exception_exit_1;
            }
        }
        {
            nuitka_bool tmp_condition_result_6;
            PyObject *tmp_source_name_6;
            PyObject *tmp_attribute_value_2;
            int tmp_truth_name_2;
            CHECK_OBJECT( par_self );
            tmp_source_name_6 = par_self;
            tmp_attribute_value_2 = LOOKUP_ATTRIBUTE( tmp_source_name_6, const_str_plain_stdout );
            if ( tmp_attribute_value_2 == NULL )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 1653;
                type_description_1 = "oooooooooooooo";
                goto frame_exception_exit_1;
            }
            tmp_truth_name_2 = CHECK_IF_TRUE( tmp_attribute_value_2 );
            if ( tmp_truth_name_2 == -1 )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
                Py_DECREF( tmp_attribute_value_2 );

                exception_lineno = 1653;
                type_description_1 = "oooooooooooooo";
                goto frame_exception_exit_1;
            }
            tmp_condition_result_6 = tmp_truth_name_2 == 1 ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
            Py_DECREF( tmp_attribute_value_2 );
            if ( tmp_condition_result_6 == NUITKA_BOOL_TRUE )
            {
                goto branch_yes_6;
            }
            else
            {
                goto branch_no_6;
            }
            branch_yes_6:;
            {
                PyObject *tmp_ass_subvalue_1;
                PyObject *tmp_ass_subscribed_1;
                PyObject *tmp_source_name_7;
                PyObject *tmp_ass_subscript_1;
                PyObject *tmp_source_name_8;
                tmp_ass_subvalue_1 = PyList_New( 0 );
                CHECK_OBJECT( par_self );
                tmp_source_name_7 = par_self;
                tmp_ass_subscribed_1 = LOOKUP_ATTRIBUTE( tmp_source_name_7, const_str_plain__fileobj2output );
                if ( tmp_ass_subscribed_1 == NULL )
                {
                    assert( ERROR_OCCURRED() );

                    FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
                    Py_DECREF( tmp_ass_subvalue_1 );

                    exception_lineno = 1654;
                    type_description_1 = "oooooooooooooo";
                    goto frame_exception_exit_1;
                }
                CHECK_OBJECT( par_self );
                tmp_source_name_8 = par_self;
                tmp_ass_subscript_1 = LOOKUP_ATTRIBUTE( tmp_source_name_8, const_str_plain_stdout );
                if ( tmp_ass_subscript_1 == NULL )
                {
                    assert( ERROR_OCCURRED() );

                    FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
                    Py_DECREF( tmp_ass_subvalue_1 );
                    Py_DECREF( tmp_ass_subscribed_1 );

                    exception_lineno = 1654;
                    type_description_1 = "oooooooooooooo";
                    goto frame_exception_exit_1;
                }
                tmp_result = SET_SUBSCRIPT( tmp_ass_subscribed_1, tmp_ass_subscript_1, tmp_ass_subvalue_1 );
                Py_DECREF( tmp_ass_subscribed_1 );
                Py_DECREF( tmp_ass_subscript_1 );
                Py_DECREF( tmp_ass_subvalue_1 );
                if ( tmp_result == false )
                {
                    assert( ERROR_OCCURRED() );

                    FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                    exception_lineno = 1654;
                    type_description_1 = "oooooooooooooo";
                    goto frame_exception_exit_1;
                }
            }
            branch_no_6:;
        }
        {
            nuitka_bool tmp_condition_result_7;
            PyObject *tmp_source_name_9;
            PyObject *tmp_attribute_value_3;
            int tmp_truth_name_3;
            CHECK_OBJECT( par_self );
            tmp_source_name_9 = par_self;
            tmp_attribute_value_3 = LOOKUP_ATTRIBUTE( tmp_source_name_9, const_str_plain_stderr );
            if ( tmp_attribute_value_3 == NULL )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 1655;
                type_description_1 = "oooooooooooooo";
                goto frame_exception_exit_1;
            }
            tmp_truth_name_3 = CHECK_IF_TRUE( tmp_attribute_value_3 );
            if ( tmp_truth_name_3 == -1 )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
                Py_DECREF( tmp_attribute_value_3 );

                exception_lineno = 1655;
                type_description_1 = "oooooooooooooo";
                goto frame_exception_exit_1;
            }
            tmp_condition_result_7 = tmp_truth_name_3 == 1 ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
            Py_DECREF( tmp_attribute_value_3 );
            if ( tmp_condition_result_7 == NUITKA_BOOL_TRUE )
            {
                goto branch_yes_7;
            }
            else
            {
                goto branch_no_7;
            }
            branch_yes_7:;
            {
                PyObject *tmp_ass_subvalue_2;
                PyObject *tmp_ass_subscribed_2;
                PyObject *tmp_source_name_10;
                PyObject *tmp_ass_subscript_2;
                PyObject *tmp_source_name_11;
                tmp_ass_subvalue_2 = PyList_New( 0 );
                CHECK_OBJECT( par_self );
                tmp_source_name_10 = par_self;
                tmp_ass_subscribed_2 = LOOKUP_ATTRIBUTE( tmp_source_name_10, const_str_plain__fileobj2output );
                if ( tmp_ass_subscribed_2 == NULL )
                {
                    assert( ERROR_OCCURRED() );

                    FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
                    Py_DECREF( tmp_ass_subvalue_2 );

                    exception_lineno = 1656;
                    type_description_1 = "oooooooooooooo";
                    goto frame_exception_exit_1;
                }
                CHECK_OBJECT( par_self );
                tmp_source_name_11 = par_self;
                tmp_ass_subscript_2 = LOOKUP_ATTRIBUTE( tmp_source_name_11, const_str_plain_stderr );
                if ( tmp_ass_subscript_2 == NULL )
                {
                    assert( ERROR_OCCURRED() );

                    FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
                    Py_DECREF( tmp_ass_subvalue_2 );
                    Py_DECREF( tmp_ass_subscribed_2 );

                    exception_lineno = 1656;
                    type_description_1 = "oooooooooooooo";
                    goto frame_exception_exit_1;
                }
                tmp_result = SET_SUBSCRIPT( tmp_ass_subscribed_2, tmp_ass_subscript_2, tmp_ass_subvalue_2 );
                Py_DECREF( tmp_ass_subscribed_2 );
                Py_DECREF( tmp_ass_subscript_2 );
                Py_DECREF( tmp_ass_subvalue_2 );
                if ( tmp_result == false )
                {
                    assert( ERROR_OCCURRED() );

                    FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                    exception_lineno = 1656;
                    type_description_1 = "oooooooooooooo";
                    goto frame_exception_exit_1;
                }
            }
            branch_no_7:;
        }
        branch_no_5:;
    }
    {
        nuitka_bool tmp_condition_result_8;
        PyObject *tmp_source_name_12;
        PyObject *tmp_attribute_value_4;
        int tmp_truth_name_4;
        CHECK_OBJECT( par_self );
        tmp_source_name_12 = par_self;
        tmp_attribute_value_4 = LOOKUP_ATTRIBUTE( tmp_source_name_12, const_str_plain_stdout );
        if ( tmp_attribute_value_4 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 1658;
            type_description_1 = "oooooooooooooo";
            goto frame_exception_exit_1;
        }
        tmp_truth_name_4 = CHECK_IF_TRUE( tmp_attribute_value_4 );
        if ( tmp_truth_name_4 == -1 )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
            Py_DECREF( tmp_attribute_value_4 );

            exception_lineno = 1658;
            type_description_1 = "oooooooooooooo";
            goto frame_exception_exit_1;
        }
        tmp_condition_result_8 = tmp_truth_name_4 == 1 ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
        Py_DECREF( tmp_attribute_value_4 );
        if ( tmp_condition_result_8 == NUITKA_BOOL_TRUE )
        {
            goto branch_yes_8;
        }
        else
        {
            goto branch_no_8;
        }
        branch_yes_8:;
        {
            PyObject *tmp_assign_source_3;
            PyObject *tmp_subscribed_name_1;
            PyObject *tmp_source_name_13;
            PyObject *tmp_subscript_name_1;
            PyObject *tmp_source_name_14;
            CHECK_OBJECT( par_self );
            tmp_source_name_13 = par_self;
            tmp_subscribed_name_1 = LOOKUP_ATTRIBUTE( tmp_source_name_13, const_str_plain__fileobj2output );
            if ( tmp_subscribed_name_1 == NULL )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 1659;
                type_description_1 = "oooooooooooooo";
                goto frame_exception_exit_1;
            }
            CHECK_OBJECT( par_self );
            tmp_source_name_14 = par_self;
            tmp_subscript_name_1 = LOOKUP_ATTRIBUTE( tmp_source_name_14, const_str_plain_stdout );
            if ( tmp_subscript_name_1 == NULL )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
                Py_DECREF( tmp_subscribed_name_1 );

                exception_lineno = 1659;
                type_description_1 = "oooooooooooooo";
                goto frame_exception_exit_1;
            }
            tmp_assign_source_3 = LOOKUP_SUBSCRIPT( tmp_subscribed_name_1, tmp_subscript_name_1 );
            Py_DECREF( tmp_subscribed_name_1 );
            Py_DECREF( tmp_subscript_name_1 );
            if ( tmp_assign_source_3 == NULL )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 1659;
                type_description_1 = "oooooooooooooo";
                goto frame_exception_exit_1;
            }
            {
                PyObject *old = var_stdout;
                assert( old != NULL );
                var_stdout = tmp_assign_source_3;
                Py_DECREF( old );
            }

        }
        branch_no_8:;
    }
    {
        nuitka_bool tmp_condition_result_9;
        PyObject *tmp_source_name_15;
        PyObject *tmp_attribute_value_5;
        int tmp_truth_name_5;
        CHECK_OBJECT( par_self );
        tmp_source_name_15 = par_self;
        tmp_attribute_value_5 = LOOKUP_ATTRIBUTE( tmp_source_name_15, const_str_plain_stderr );
        if ( tmp_attribute_value_5 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 1660;
            type_description_1 = "oooooooooooooo";
            goto frame_exception_exit_1;
        }
        tmp_truth_name_5 = CHECK_IF_TRUE( tmp_attribute_value_5 );
        if ( tmp_truth_name_5 == -1 )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
            Py_DECREF( tmp_attribute_value_5 );

            exception_lineno = 1660;
            type_description_1 = "oooooooooooooo";
            goto frame_exception_exit_1;
        }
        tmp_condition_result_9 = tmp_truth_name_5 == 1 ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
        Py_DECREF( tmp_attribute_value_5 );
        if ( tmp_condition_result_9 == NUITKA_BOOL_TRUE )
        {
            goto branch_yes_9;
        }
        else
        {
            goto branch_no_9;
        }
        branch_yes_9:;
        {
            PyObject *tmp_assign_source_4;
            PyObject *tmp_subscribed_name_2;
            PyObject *tmp_source_name_16;
            PyObject *tmp_subscript_name_2;
            PyObject *tmp_source_name_17;
            CHECK_OBJECT( par_self );
            tmp_source_name_16 = par_self;
            tmp_subscribed_name_2 = LOOKUP_ATTRIBUTE( tmp_source_name_16, const_str_plain__fileobj2output );
            if ( tmp_subscribed_name_2 == NULL )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 1661;
                type_description_1 = "oooooooooooooo";
                goto frame_exception_exit_1;
            }
            CHECK_OBJECT( par_self );
            tmp_source_name_17 = par_self;
            tmp_subscript_name_2 = LOOKUP_ATTRIBUTE( tmp_source_name_17, const_str_plain_stderr );
            if ( tmp_subscript_name_2 == NULL )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
                Py_DECREF( tmp_subscribed_name_2 );

                exception_lineno = 1661;
                type_description_1 = "oooooooooooooo";
                goto frame_exception_exit_1;
            }
            tmp_assign_source_4 = LOOKUP_SUBSCRIPT( tmp_subscribed_name_2, tmp_subscript_name_2 );
            Py_DECREF( tmp_subscribed_name_2 );
            Py_DECREF( tmp_subscript_name_2 );
            if ( tmp_assign_source_4 == NULL )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 1661;
                type_description_1 = "oooooooooooooo";
                goto frame_exception_exit_1;
            }
            {
                PyObject *old = var_stderr;
                assert( old != NULL );
                var_stderr = tmp_assign_source_4;
                Py_DECREF( old );
            }

        }
        branch_no_9:;
    }
    {
        PyObject *tmp_called_instance_3;
        PyObject *tmp_call_result_3;
        PyObject *tmp_args_element_name_1;
        CHECK_OBJECT( par_self );
        tmp_called_instance_3 = par_self;
        CHECK_OBJECT( par_input );
        tmp_args_element_name_1 = par_input;
        frame_b3fe41aa9e45c0ee93ce9ccbee67af61->m_frame.f_lineno = 1663;
        {
            PyObject *call_args[] = { tmp_args_element_name_1 };
            tmp_call_result_3 = CALL_METHOD_WITH_ARGS1( tmp_called_instance_3, const_str_plain__save_input, call_args );
        }

        if ( tmp_call_result_3 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 1663;
            type_description_1 = "oooooooooooooo";
            goto frame_exception_exit_1;
        }
        Py_DECREF( tmp_call_result_3 );
    }
    {
        nuitka_bool tmp_condition_result_10;
        PyObject *tmp_source_name_18;
        PyObject *tmp_attribute_value_6;
        int tmp_truth_name_6;
        CHECK_OBJECT( par_self );
        tmp_source_name_18 = par_self;
        tmp_attribute_value_6 = LOOKUP_ATTRIBUTE( tmp_source_name_18, const_str_plain__input );
        if ( tmp_attribute_value_6 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 1665;
            type_description_1 = "oooooooooooooo";
            goto frame_exception_exit_1;
        }
        tmp_truth_name_6 = CHECK_IF_TRUE( tmp_attribute_value_6 );
        if ( tmp_truth_name_6 == -1 )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
            Py_DECREF( tmp_attribute_value_6 );

            exception_lineno = 1665;
            type_description_1 = "oooooooooooooo";
            goto frame_exception_exit_1;
        }
        tmp_condition_result_10 = tmp_truth_name_6 == 1 ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
        Py_DECREF( tmp_attribute_value_6 );
        if ( tmp_condition_result_10 == NUITKA_BOOL_TRUE )
        {
            goto branch_yes_10;
        }
        else
        {
            goto branch_no_10;
        }
        branch_yes_10:;
        {
            PyObject *tmp_assign_source_5;
            PyObject *tmp_called_name_1;
            PyObject *tmp_args_element_name_2;
            PyObject *tmp_source_name_19;
            tmp_called_name_1 = (PyObject *)&PyMemoryView_Type;
            CHECK_OBJECT( par_self );
            tmp_source_name_19 = par_self;
            tmp_args_element_name_2 = LOOKUP_ATTRIBUTE( tmp_source_name_19, const_str_plain__input );
            if ( tmp_args_element_name_2 == NULL )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 1666;
                type_description_1 = "oooooooooooooo";
                goto frame_exception_exit_1;
            }
            frame_b3fe41aa9e45c0ee93ce9ccbee67af61->m_frame.f_lineno = 1666;
            {
                PyObject *call_args[] = { tmp_args_element_name_2 };
                tmp_assign_source_5 = CALL_FUNCTION_WITH_ARGS1( tmp_called_name_1, call_args );
            }

            Py_DECREF( tmp_args_element_name_2 );
            if ( tmp_assign_source_5 == NULL )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 1666;
                type_description_1 = "oooooooooooooo";
                goto frame_exception_exit_1;
            }
            assert( var_input_view == NULL );
            var_input_view = tmp_assign_source_5;
        }
        branch_no_10:;
    }
    // Tried code:
    {
        PyObject *tmp_assign_source_6;
        PyObject *tmp_called_name_2;
        PyObject *tmp_mvar_value_1;
        tmp_mvar_value_1 = GET_STRING_DICT_VALUE( moduledict_subprocess, (Nuitka_StringObject *)const_str_plain__PopenSelector );

        if (unlikely( tmp_mvar_value_1 == NULL ))
        {
            tmp_mvar_value_1 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain__PopenSelector );
        }

        if ( tmp_mvar_value_1 == NULL )
        {

            exception_type = PyExc_NameError;
            Py_INCREF( exception_type );
            exception_value = PyUnicode_FromFormat( "name '%s' is not defined", "_PopenSelector" );
            exception_tb = NULL;
            NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
            CHAIN_EXCEPTION( exception_value );

            exception_lineno = 1668;
            type_description_1 = "oooooooooooooo";
            goto try_except_handler_6;
        }

        tmp_called_name_2 = tmp_mvar_value_1;
        frame_b3fe41aa9e45c0ee93ce9ccbee67af61->m_frame.f_lineno = 1668;
        tmp_assign_source_6 = CALL_FUNCTION_NO_ARGS( tmp_called_name_2 );
        if ( tmp_assign_source_6 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 1668;
            type_description_1 = "oooooooooooooo";
            goto try_except_handler_6;
        }
        assert( tmp_with_1__source == NULL );
        tmp_with_1__source = tmp_assign_source_6;
    }
    {
        PyObject *tmp_assign_source_7;
        PyObject *tmp_called_name_3;
        PyObject *tmp_source_name_20;
        CHECK_OBJECT( tmp_with_1__source );
        tmp_source_name_20 = tmp_with_1__source;
        tmp_called_name_3 = LOOKUP_SPECIAL( tmp_source_name_20, const_str_plain___enter__ );
        if ( tmp_called_name_3 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 1668;
            type_description_1 = "oooooooooooooo";
            goto try_except_handler_6;
        }
        frame_b3fe41aa9e45c0ee93ce9ccbee67af61->m_frame.f_lineno = 1668;
        tmp_assign_source_7 = CALL_FUNCTION_NO_ARGS( tmp_called_name_3 );
        Py_DECREF( tmp_called_name_3 );
        if ( tmp_assign_source_7 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 1668;
            type_description_1 = "oooooooooooooo";
            goto try_except_handler_6;
        }
        assert( tmp_with_1__enter == NULL );
        tmp_with_1__enter = tmp_assign_source_7;
    }
    {
        PyObject *tmp_assign_source_8;
        PyObject *tmp_source_name_21;
        CHECK_OBJECT( tmp_with_1__source );
        tmp_source_name_21 = tmp_with_1__source;
        tmp_assign_source_8 = LOOKUP_SPECIAL( tmp_source_name_21, const_str_plain___exit__ );
        if ( tmp_assign_source_8 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 1668;
            type_description_1 = "oooooooooooooo";
            goto try_except_handler_6;
        }
        assert( tmp_with_1__exit == NULL );
        tmp_with_1__exit = tmp_assign_source_8;
    }
    {
        nuitka_bool tmp_assign_source_9;
        tmp_assign_source_9 = NUITKA_BOOL_TRUE;
        tmp_with_1__indicator = tmp_assign_source_9;
    }
    {
        PyObject *tmp_assign_source_10;
        CHECK_OBJECT( tmp_with_1__enter );
        tmp_assign_source_10 = tmp_with_1__enter;
        assert( var_selector == NULL );
        Py_INCREF( tmp_assign_source_10 );
        var_selector = tmp_assign_source_10;
    }
    // Tried code:
    // Tried code:
    {
        nuitka_bool tmp_condition_result_11;
        int tmp_and_left_truth_2;
        nuitka_bool tmp_and_left_value_2;
        nuitka_bool tmp_and_right_value_2;
        PyObject *tmp_source_name_22;
        PyObject *tmp_attribute_value_7;
        int tmp_truth_name_7;
        int tmp_truth_name_8;
        CHECK_OBJECT( par_self );
        tmp_source_name_22 = par_self;
        tmp_attribute_value_7 = LOOKUP_ATTRIBUTE( tmp_source_name_22, const_str_plain_stdin );
        if ( tmp_attribute_value_7 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 1669;
            type_description_1 = "oooooooooooooo";
            goto try_except_handler_8;
        }
        tmp_truth_name_7 = CHECK_IF_TRUE( tmp_attribute_value_7 );
        if ( tmp_truth_name_7 == -1 )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
            Py_DECREF( tmp_attribute_value_7 );

            exception_lineno = 1669;
            type_description_1 = "oooooooooooooo";
            goto try_except_handler_8;
        }
        tmp_and_left_value_2 = tmp_truth_name_7 == 1 ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
        Py_DECREF( tmp_attribute_value_7 );
        tmp_and_left_truth_2 = tmp_and_left_value_2 == NUITKA_BOOL_TRUE ? 1 : 0;
        if ( tmp_and_left_truth_2 == 1 )
        {
            goto and_right_2;
        }
        else
        {
            goto and_left_2;
        }
        and_right_2:;
        CHECK_OBJECT( par_input );
        tmp_truth_name_8 = CHECK_IF_TRUE( par_input );
        if ( tmp_truth_name_8 == -1 )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 1669;
            type_description_1 = "oooooooooooooo";
            goto try_except_handler_8;
        }
        tmp_and_right_value_2 = tmp_truth_name_8 == 1 ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
        tmp_condition_result_11 = tmp_and_right_value_2;
        goto and_end_2;
        and_left_2:;
        tmp_condition_result_11 = tmp_and_left_value_2;
        and_end_2:;
        if ( tmp_condition_result_11 == NUITKA_BOOL_TRUE )
        {
            goto branch_yes_11;
        }
        else
        {
            goto branch_no_11;
        }
        branch_yes_11:;
        {
            PyObject *tmp_called_name_4;
            PyObject *tmp_source_name_23;
            PyObject *tmp_call_result_4;
            PyObject *tmp_args_element_name_3;
            PyObject *tmp_source_name_24;
            PyObject *tmp_args_element_name_4;
            PyObject *tmp_source_name_25;
            PyObject *tmp_mvar_value_2;
            CHECK_OBJECT( var_selector );
            tmp_source_name_23 = var_selector;
            tmp_called_name_4 = LOOKUP_ATTRIBUTE( tmp_source_name_23, const_str_plain_register );
            if ( tmp_called_name_4 == NULL )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 1670;
                type_description_1 = "oooooooooooooo";
                goto try_except_handler_8;
            }
            CHECK_OBJECT( par_self );
            tmp_source_name_24 = par_self;
            tmp_args_element_name_3 = LOOKUP_ATTRIBUTE( tmp_source_name_24, const_str_plain_stdin );
            if ( tmp_args_element_name_3 == NULL )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
                Py_DECREF( tmp_called_name_4 );

                exception_lineno = 1670;
                type_description_1 = "oooooooooooooo";
                goto try_except_handler_8;
            }
            tmp_mvar_value_2 = GET_STRING_DICT_VALUE( moduledict_subprocess, (Nuitka_StringObject *)const_str_plain_selectors );

            if (unlikely( tmp_mvar_value_2 == NULL ))
            {
                tmp_mvar_value_2 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_selectors );
            }

            if ( tmp_mvar_value_2 == NULL )
            {
                Py_DECREF( tmp_called_name_4 );
                Py_DECREF( tmp_args_element_name_3 );
                exception_type = PyExc_NameError;
                Py_INCREF( exception_type );
                exception_value = PyUnicode_FromFormat( "name '%s' is not defined", "selectors" );
                exception_tb = NULL;
                NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
                CHAIN_EXCEPTION( exception_value );

                exception_lineno = 1670;
                type_description_1 = "oooooooooooooo";
                goto try_except_handler_8;
            }

            tmp_source_name_25 = tmp_mvar_value_2;
            tmp_args_element_name_4 = LOOKUP_ATTRIBUTE( tmp_source_name_25, const_str_plain_EVENT_WRITE );
            if ( tmp_args_element_name_4 == NULL )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
                Py_DECREF( tmp_called_name_4 );
                Py_DECREF( tmp_args_element_name_3 );

                exception_lineno = 1670;
                type_description_1 = "oooooooooooooo";
                goto try_except_handler_8;
            }
            frame_b3fe41aa9e45c0ee93ce9ccbee67af61->m_frame.f_lineno = 1670;
            {
                PyObject *call_args[] = { tmp_args_element_name_3, tmp_args_element_name_4 };
                tmp_call_result_4 = CALL_FUNCTION_WITH_ARGS2( tmp_called_name_4, call_args );
            }

            Py_DECREF( tmp_called_name_4 );
            Py_DECREF( tmp_args_element_name_3 );
            Py_DECREF( tmp_args_element_name_4 );
            if ( tmp_call_result_4 == NULL )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 1670;
                type_description_1 = "oooooooooooooo";
                goto try_except_handler_8;
            }
            Py_DECREF( tmp_call_result_4 );
        }
        branch_no_11:;
    }
    {
        nuitka_bool tmp_condition_result_12;
        PyObject *tmp_source_name_26;
        PyObject *tmp_attribute_value_8;
        int tmp_truth_name_9;
        CHECK_OBJECT( par_self );
        tmp_source_name_26 = par_self;
        tmp_attribute_value_8 = LOOKUP_ATTRIBUTE( tmp_source_name_26, const_str_plain_stdout );
        if ( tmp_attribute_value_8 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 1671;
            type_description_1 = "oooooooooooooo";
            goto try_except_handler_8;
        }
        tmp_truth_name_9 = CHECK_IF_TRUE( tmp_attribute_value_8 );
        if ( tmp_truth_name_9 == -1 )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
            Py_DECREF( tmp_attribute_value_8 );

            exception_lineno = 1671;
            type_description_1 = "oooooooooooooo";
            goto try_except_handler_8;
        }
        tmp_condition_result_12 = tmp_truth_name_9 == 1 ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
        Py_DECREF( tmp_attribute_value_8 );
        if ( tmp_condition_result_12 == NUITKA_BOOL_TRUE )
        {
            goto branch_yes_12;
        }
        else
        {
            goto branch_no_12;
        }
        branch_yes_12:;
        {
            PyObject *tmp_called_name_5;
            PyObject *tmp_source_name_27;
            PyObject *tmp_call_result_5;
            PyObject *tmp_args_element_name_5;
            PyObject *tmp_source_name_28;
            PyObject *tmp_args_element_name_6;
            PyObject *tmp_source_name_29;
            PyObject *tmp_mvar_value_3;
            CHECK_OBJECT( var_selector );
            tmp_source_name_27 = var_selector;
            tmp_called_name_5 = LOOKUP_ATTRIBUTE( tmp_source_name_27, const_str_plain_register );
            if ( tmp_called_name_5 == NULL )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 1672;
                type_description_1 = "oooooooooooooo";
                goto try_except_handler_8;
            }
            CHECK_OBJECT( par_self );
            tmp_source_name_28 = par_self;
            tmp_args_element_name_5 = LOOKUP_ATTRIBUTE( tmp_source_name_28, const_str_plain_stdout );
            if ( tmp_args_element_name_5 == NULL )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
                Py_DECREF( tmp_called_name_5 );

                exception_lineno = 1672;
                type_description_1 = "oooooooooooooo";
                goto try_except_handler_8;
            }
            tmp_mvar_value_3 = GET_STRING_DICT_VALUE( moduledict_subprocess, (Nuitka_StringObject *)const_str_plain_selectors );

            if (unlikely( tmp_mvar_value_3 == NULL ))
            {
                tmp_mvar_value_3 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_selectors );
            }

            if ( tmp_mvar_value_3 == NULL )
            {
                Py_DECREF( tmp_called_name_5 );
                Py_DECREF( tmp_args_element_name_5 );
                exception_type = PyExc_NameError;
                Py_INCREF( exception_type );
                exception_value = PyUnicode_FromFormat( "name '%s' is not defined", "selectors" );
                exception_tb = NULL;
                NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
                CHAIN_EXCEPTION( exception_value );

                exception_lineno = 1672;
                type_description_1 = "oooooooooooooo";
                goto try_except_handler_8;
            }

            tmp_source_name_29 = tmp_mvar_value_3;
            tmp_args_element_name_6 = LOOKUP_ATTRIBUTE( tmp_source_name_29, const_str_plain_EVENT_READ );
            if ( tmp_args_element_name_6 == NULL )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
                Py_DECREF( tmp_called_name_5 );
                Py_DECREF( tmp_args_element_name_5 );

                exception_lineno = 1672;
                type_description_1 = "oooooooooooooo";
                goto try_except_handler_8;
            }
            frame_b3fe41aa9e45c0ee93ce9ccbee67af61->m_frame.f_lineno = 1672;
            {
                PyObject *call_args[] = { tmp_args_element_name_5, tmp_args_element_name_6 };
                tmp_call_result_5 = CALL_FUNCTION_WITH_ARGS2( tmp_called_name_5, call_args );
            }

            Py_DECREF( tmp_called_name_5 );
            Py_DECREF( tmp_args_element_name_5 );
            Py_DECREF( tmp_args_element_name_6 );
            if ( tmp_call_result_5 == NULL )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 1672;
                type_description_1 = "oooooooooooooo";
                goto try_except_handler_8;
            }
            Py_DECREF( tmp_call_result_5 );
        }
        branch_no_12:;
    }
    {
        nuitka_bool tmp_condition_result_13;
        PyObject *tmp_source_name_30;
        PyObject *tmp_attribute_value_9;
        int tmp_truth_name_10;
        CHECK_OBJECT( par_self );
        tmp_source_name_30 = par_self;
        tmp_attribute_value_9 = LOOKUP_ATTRIBUTE( tmp_source_name_30, const_str_plain_stderr );
        if ( tmp_attribute_value_9 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 1673;
            type_description_1 = "oooooooooooooo";
            goto try_except_handler_8;
        }
        tmp_truth_name_10 = CHECK_IF_TRUE( tmp_attribute_value_9 );
        if ( tmp_truth_name_10 == -1 )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
            Py_DECREF( tmp_attribute_value_9 );

            exception_lineno = 1673;
            type_description_1 = "oooooooooooooo";
            goto try_except_handler_8;
        }
        tmp_condition_result_13 = tmp_truth_name_10 == 1 ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
        Py_DECREF( tmp_attribute_value_9 );
        if ( tmp_condition_result_13 == NUITKA_BOOL_TRUE )
        {
            goto branch_yes_13;
        }
        else
        {
            goto branch_no_13;
        }
        branch_yes_13:;
        {
            PyObject *tmp_called_name_6;
            PyObject *tmp_source_name_31;
            PyObject *tmp_call_result_6;
            PyObject *tmp_args_element_name_7;
            PyObject *tmp_source_name_32;
            PyObject *tmp_args_element_name_8;
            PyObject *tmp_source_name_33;
            PyObject *tmp_mvar_value_4;
            CHECK_OBJECT( var_selector );
            tmp_source_name_31 = var_selector;
            tmp_called_name_6 = LOOKUP_ATTRIBUTE( tmp_source_name_31, const_str_plain_register );
            if ( tmp_called_name_6 == NULL )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 1674;
                type_description_1 = "oooooooooooooo";
                goto try_except_handler_8;
            }
            CHECK_OBJECT( par_self );
            tmp_source_name_32 = par_self;
            tmp_args_element_name_7 = LOOKUP_ATTRIBUTE( tmp_source_name_32, const_str_plain_stderr );
            if ( tmp_args_element_name_7 == NULL )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
                Py_DECREF( tmp_called_name_6 );

                exception_lineno = 1674;
                type_description_1 = "oooooooooooooo";
                goto try_except_handler_8;
            }
            tmp_mvar_value_4 = GET_STRING_DICT_VALUE( moduledict_subprocess, (Nuitka_StringObject *)const_str_plain_selectors );

            if (unlikely( tmp_mvar_value_4 == NULL ))
            {
                tmp_mvar_value_4 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_selectors );
            }

            if ( tmp_mvar_value_4 == NULL )
            {
                Py_DECREF( tmp_called_name_6 );
                Py_DECREF( tmp_args_element_name_7 );
                exception_type = PyExc_NameError;
                Py_INCREF( exception_type );
                exception_value = PyUnicode_FromFormat( "name '%s' is not defined", "selectors" );
                exception_tb = NULL;
                NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
                CHAIN_EXCEPTION( exception_value );

                exception_lineno = 1674;
                type_description_1 = "oooooooooooooo";
                goto try_except_handler_8;
            }

            tmp_source_name_33 = tmp_mvar_value_4;
            tmp_args_element_name_8 = LOOKUP_ATTRIBUTE( tmp_source_name_33, const_str_plain_EVENT_READ );
            if ( tmp_args_element_name_8 == NULL )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
                Py_DECREF( tmp_called_name_6 );
                Py_DECREF( tmp_args_element_name_7 );

                exception_lineno = 1674;
                type_description_1 = "oooooooooooooo";
                goto try_except_handler_8;
            }
            frame_b3fe41aa9e45c0ee93ce9ccbee67af61->m_frame.f_lineno = 1674;
            {
                PyObject *call_args[] = { tmp_args_element_name_7, tmp_args_element_name_8 };
                tmp_call_result_6 = CALL_FUNCTION_WITH_ARGS2( tmp_called_name_6, call_args );
            }

            Py_DECREF( tmp_called_name_6 );
            Py_DECREF( tmp_args_element_name_7 );
            Py_DECREF( tmp_args_element_name_8 );
            if ( tmp_call_result_6 == NULL )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 1674;
                type_description_1 = "oooooooooooooo";
                goto try_except_handler_8;
            }
            Py_DECREF( tmp_call_result_6 );
        }
        branch_no_13:;
    }
    loop_start_1:;
    {
        nuitka_bool tmp_condition_result_14;
        PyObject *tmp_operand_name_6;
        PyObject *tmp_called_instance_4;
        CHECK_OBJECT( var_selector );
        tmp_called_instance_4 = var_selector;
        frame_b3fe41aa9e45c0ee93ce9ccbee67af61->m_frame.f_lineno = 1676;
        tmp_operand_name_6 = CALL_METHOD_NO_ARGS( tmp_called_instance_4, const_str_plain_get_map );
        if ( tmp_operand_name_6 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 1676;
            type_description_1 = "oooooooooooooo";
            goto try_except_handler_8;
        }
        tmp_res = CHECK_IF_TRUE( tmp_operand_name_6 );
        Py_DECREF( tmp_operand_name_6 );
        if ( tmp_res == -1 )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 1676;
            type_description_1 = "oooooooooooooo";
            goto try_except_handler_8;
        }
        tmp_condition_result_14 = ( tmp_res == 0 ) ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
        if ( tmp_condition_result_14 == NUITKA_BOOL_TRUE )
        {
            goto branch_yes_14;
        }
        else
        {
            goto branch_no_14;
        }
        branch_yes_14:;
        goto loop_end_1;
        branch_no_14:;
    }
    {
        PyObject *tmp_assign_source_11;
        PyObject *tmp_called_instance_5;
        PyObject *tmp_args_element_name_9;
        CHECK_OBJECT( par_self );
        tmp_called_instance_5 = par_self;
        CHECK_OBJECT( par_endtime );
        tmp_args_element_name_9 = par_endtime;
        frame_b3fe41aa9e45c0ee93ce9ccbee67af61->m_frame.f_lineno = 1677;
        {
            PyObject *call_args[] = { tmp_args_element_name_9 };
            tmp_assign_source_11 = CALL_METHOD_WITH_ARGS1( tmp_called_instance_5, const_str_plain__remaining_time, call_args );
        }

        if ( tmp_assign_source_11 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 1677;
            type_description_1 = "oooooooooooooo";
            goto try_except_handler_8;
        }
        {
            PyObject *old = var_timeout;
            var_timeout = tmp_assign_source_11;
            Py_XDECREF( old );
        }

    }
    {
        nuitka_bool tmp_condition_result_15;
        int tmp_and_left_truth_3;
        nuitka_bool tmp_and_left_value_3;
        nuitka_bool tmp_and_right_value_3;
        PyObject *tmp_compexpr_left_3;
        PyObject *tmp_compexpr_right_3;
        PyObject *tmp_compexpr_left_4;
        PyObject *tmp_compexpr_right_4;
        CHECK_OBJECT( var_timeout );
        tmp_compexpr_left_3 = var_timeout;
        tmp_compexpr_right_3 = Py_None;
        tmp_and_left_value_3 = ( tmp_compexpr_left_3 != tmp_compexpr_right_3 ) ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
        tmp_and_left_truth_3 = tmp_and_left_value_3 == NUITKA_BOOL_TRUE ? 1 : 0;
        if ( tmp_and_left_truth_3 == 1 )
        {
            goto and_right_3;
        }
        else
        {
            goto and_left_3;
        }
        and_right_3:;
        CHECK_OBJECT( var_timeout );
        tmp_compexpr_left_4 = var_timeout;
        tmp_compexpr_right_4 = const_int_0;
        tmp_res = RICH_COMPARE_BOOL_LT_OBJECT_OBJECT( tmp_compexpr_left_4, tmp_compexpr_right_4 );
        if ( tmp_res == -1 )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 1678;
            type_description_1 = "oooooooooooooo";
            goto try_except_handler_8;
        }
        tmp_and_right_value_3 = ( tmp_res != 0 ) ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
        tmp_condition_result_15 = tmp_and_right_value_3;
        goto and_end_3;
        and_left_3:;
        tmp_condition_result_15 = tmp_and_left_value_3;
        and_end_3:;
        if ( tmp_condition_result_15 == NUITKA_BOOL_TRUE )
        {
            goto branch_yes_15;
        }
        else
        {
            goto branch_no_15;
        }
        branch_yes_15:;
        {
            PyObject *tmp_raise_type_1;
            PyObject *tmp_called_name_7;
            PyObject *tmp_mvar_value_5;
            PyObject *tmp_args_element_name_10;
            PyObject *tmp_source_name_34;
            PyObject *tmp_args_element_name_11;
            tmp_mvar_value_5 = GET_STRING_DICT_VALUE( moduledict_subprocess, (Nuitka_StringObject *)const_str_plain_TimeoutExpired );

            if (unlikely( tmp_mvar_value_5 == NULL ))
            {
                tmp_mvar_value_5 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_TimeoutExpired );
            }

            if ( tmp_mvar_value_5 == NULL )
            {

                exception_type = PyExc_NameError;
                Py_INCREF( exception_type );
                exception_value = PyUnicode_FromFormat( "name '%s' is not defined", "TimeoutExpired" );
                exception_tb = NULL;
                NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
                CHAIN_EXCEPTION( exception_value );

                exception_lineno = 1679;
                type_description_1 = "oooooooooooooo";
                goto try_except_handler_8;
            }

            tmp_called_name_7 = tmp_mvar_value_5;
            CHECK_OBJECT( par_self );
            tmp_source_name_34 = par_self;
            tmp_args_element_name_10 = LOOKUP_ATTRIBUTE( tmp_source_name_34, const_str_plain_args );
            if ( tmp_args_element_name_10 == NULL )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 1679;
                type_description_1 = "oooooooooooooo";
                goto try_except_handler_8;
            }
            CHECK_OBJECT( par_orig_timeout );
            tmp_args_element_name_11 = par_orig_timeout;
            frame_b3fe41aa9e45c0ee93ce9ccbee67af61->m_frame.f_lineno = 1679;
            {
                PyObject *call_args[] = { tmp_args_element_name_10, tmp_args_element_name_11 };
                tmp_raise_type_1 = CALL_FUNCTION_WITH_ARGS2( tmp_called_name_7, call_args );
            }

            Py_DECREF( tmp_args_element_name_10 );
            if ( tmp_raise_type_1 == NULL )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 1679;
                type_description_1 = "oooooooooooooo";
                goto try_except_handler_8;
            }
            exception_type = tmp_raise_type_1;
            exception_lineno = 1679;
            RAISE_EXCEPTION_WITH_TYPE( &exception_type, &exception_value, &exception_tb );
            type_description_1 = "oooooooooooooo";
            goto try_except_handler_8;
        }
        branch_no_15:;
    }
    {
        PyObject *tmp_assign_source_12;
        PyObject *tmp_called_instance_6;
        PyObject *tmp_args_element_name_12;
        CHECK_OBJECT( var_selector );
        tmp_called_instance_6 = var_selector;
        CHECK_OBJECT( var_timeout );
        tmp_args_element_name_12 = var_timeout;
        frame_b3fe41aa9e45c0ee93ce9ccbee67af61->m_frame.f_lineno = 1681;
        {
            PyObject *call_args[] = { tmp_args_element_name_12 };
            tmp_assign_source_12 = CALL_METHOD_WITH_ARGS1( tmp_called_instance_6, const_str_plain_select, call_args );
        }

        if ( tmp_assign_source_12 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 1681;
            type_description_1 = "oooooooooooooo";
            goto try_except_handler_8;
        }
        {
            PyObject *old = var_ready;
            var_ready = tmp_assign_source_12;
            Py_XDECREF( old );
        }

    }
    {
        PyObject *tmp_called_instance_7;
        PyObject *tmp_call_result_7;
        PyObject *tmp_args_element_name_13;
        PyObject *tmp_args_element_name_14;
        CHECK_OBJECT( par_self );
        tmp_called_instance_7 = par_self;
        CHECK_OBJECT( par_endtime );
        tmp_args_element_name_13 = par_endtime;
        CHECK_OBJECT( par_orig_timeout );
        tmp_args_element_name_14 = par_orig_timeout;
        frame_b3fe41aa9e45c0ee93ce9ccbee67af61->m_frame.f_lineno = 1682;
        {
            PyObject *call_args[] = { tmp_args_element_name_13, tmp_args_element_name_14 };
            tmp_call_result_7 = CALL_METHOD_WITH_ARGS2( tmp_called_instance_7, const_str_plain__check_timeout, call_args );
        }

        if ( tmp_call_result_7 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 1682;
            type_description_1 = "oooooooooooooo";
            goto try_except_handler_8;
        }
        Py_DECREF( tmp_call_result_7 );
    }
    {
        PyObject *tmp_assign_source_13;
        PyObject *tmp_iter_arg_1;
        CHECK_OBJECT( var_ready );
        tmp_iter_arg_1 = var_ready;
        tmp_assign_source_13 = MAKE_ITERATOR( tmp_iter_arg_1 );
        if ( tmp_assign_source_13 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 1687;
            type_description_1 = "oooooooooooooo";
            goto try_except_handler_8;
        }
        {
            PyObject *old = tmp_for_loop_1__for_iterator;
            tmp_for_loop_1__for_iterator = tmp_assign_source_13;
            Py_XDECREF( old );
        }

    }
    // Tried code:
    loop_start_2:;
    {
        PyObject *tmp_next_source_1;
        PyObject *tmp_assign_source_14;
        CHECK_OBJECT( tmp_for_loop_1__for_iterator );
        tmp_next_source_1 = tmp_for_loop_1__for_iterator;
        tmp_assign_source_14 = ITERATOR_NEXT( tmp_next_source_1 );
        if ( tmp_assign_source_14 == NULL )
        {
            if ( CHECK_AND_CLEAR_STOP_ITERATION_OCCURRED() )
            {

                goto loop_end_2;
            }
            else
            {

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
                type_description_1 = "oooooooooooooo";
                exception_lineno = 1687;
                goto try_except_handler_9;
            }
        }

        {
            PyObject *old = tmp_for_loop_1__iter_value;
            tmp_for_loop_1__iter_value = tmp_assign_source_14;
            Py_XDECREF( old );
        }

    }
    // Tried code:
    {
        PyObject *tmp_assign_source_15;
        PyObject *tmp_iter_arg_2;
        CHECK_OBJECT( tmp_for_loop_1__iter_value );
        tmp_iter_arg_2 = tmp_for_loop_1__iter_value;
        tmp_assign_source_15 = MAKE_UNPACK_ITERATOR( tmp_iter_arg_2 );
        if ( tmp_assign_source_15 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 1687;
            type_description_1 = "oooooooooooooo";
            goto try_except_handler_10;
        }
        {
            PyObject *old = tmp_tuple_unpack_1__source_iter;
            tmp_tuple_unpack_1__source_iter = tmp_assign_source_15;
            Py_XDECREF( old );
        }

    }
    // Tried code:
    {
        PyObject *tmp_assign_source_16;
        PyObject *tmp_unpack_1;
        CHECK_OBJECT( tmp_tuple_unpack_1__source_iter );
        tmp_unpack_1 = tmp_tuple_unpack_1__source_iter;
        tmp_assign_source_16 = UNPACK_NEXT( tmp_unpack_1, 0, 2 );
        if ( tmp_assign_source_16 == NULL )
        {
            if ( !ERROR_OCCURRED() )
            {
                exception_type = PyExc_StopIteration;
                Py_INCREF( exception_type );
                exception_value = NULL;
                exception_tb = NULL;
            }
            else
            {
                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
            }


            type_description_1 = "oooooooooooooo";
            exception_lineno = 1687;
            goto try_except_handler_11;
        }
        {
            PyObject *old = tmp_tuple_unpack_1__element_1;
            tmp_tuple_unpack_1__element_1 = tmp_assign_source_16;
            Py_XDECREF( old );
        }

    }
    {
        PyObject *tmp_assign_source_17;
        PyObject *tmp_unpack_2;
        CHECK_OBJECT( tmp_tuple_unpack_1__source_iter );
        tmp_unpack_2 = tmp_tuple_unpack_1__source_iter;
        tmp_assign_source_17 = UNPACK_NEXT( tmp_unpack_2, 1, 2 );
        if ( tmp_assign_source_17 == NULL )
        {
            if ( !ERROR_OCCURRED() )
            {
                exception_type = PyExc_StopIteration;
                Py_INCREF( exception_type );
                exception_value = NULL;
                exception_tb = NULL;
            }
            else
            {
                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
            }


            type_description_1 = "oooooooooooooo";
            exception_lineno = 1687;
            goto try_except_handler_11;
        }
        {
            PyObject *old = tmp_tuple_unpack_1__element_2;
            tmp_tuple_unpack_1__element_2 = tmp_assign_source_17;
            Py_XDECREF( old );
        }

    }
    {
        PyObject *tmp_iterator_name_1;
        CHECK_OBJECT( tmp_tuple_unpack_1__source_iter );
        tmp_iterator_name_1 = tmp_tuple_unpack_1__source_iter;
        // Check if iterator has left-over elements.
        CHECK_OBJECT( tmp_iterator_name_1 ); assert( HAS_ITERNEXT( tmp_iterator_name_1 ) );

        tmp_iterator_attempt = (*Py_TYPE( tmp_iterator_name_1 )->tp_iternext)( tmp_iterator_name_1 );

        if (likely( tmp_iterator_attempt == NULL ))
        {
            PyObject *error = GET_ERROR_OCCURRED();

            if ( error != NULL )
            {
                if ( EXCEPTION_MATCH_BOOL_SINGLE( error, PyExc_StopIteration ))
                {
                    CLEAR_ERROR_OCCURRED();
                }
                else
                {
                    FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );

                    type_description_1 = "oooooooooooooo";
                    exception_lineno = 1687;
                    goto try_except_handler_11;
                }
            }
        }
        else
        {
            Py_DECREF( tmp_iterator_attempt );

            // TODO: Could avoid PyErr_Format.
#if PYTHON_VERSION < 300
            PyErr_Format( PyExc_ValueError, "too many values to unpack" );
#else
            PyErr_Format( PyExc_ValueError, "too many values to unpack (expected 2)" );
#endif
            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );

            type_description_1 = "oooooooooooooo";
            exception_lineno = 1687;
            goto try_except_handler_11;
        }
    }
    goto try_end_5;
    // Exception handler code:
    try_except_handler_11:;
    exception_keeper_type_5 = exception_type;
    exception_keeper_value_5 = exception_value;
    exception_keeper_tb_5 = exception_tb;
    exception_keeper_lineno_5 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    CHECK_OBJECT( (PyObject *)tmp_tuple_unpack_1__source_iter );
    Py_DECREF( tmp_tuple_unpack_1__source_iter );
    tmp_tuple_unpack_1__source_iter = NULL;

    // Re-raise.
    exception_type = exception_keeper_type_5;
    exception_value = exception_keeper_value_5;
    exception_tb = exception_keeper_tb_5;
    exception_lineno = exception_keeper_lineno_5;

    goto try_except_handler_10;
    // End of try:
    try_end_5:;
    goto try_end_6;
    // Exception handler code:
    try_except_handler_10:;
    exception_keeper_type_6 = exception_type;
    exception_keeper_value_6 = exception_value;
    exception_keeper_tb_6 = exception_tb;
    exception_keeper_lineno_6 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    Py_XDECREF( tmp_tuple_unpack_1__element_1 );
    tmp_tuple_unpack_1__element_1 = NULL;

    Py_XDECREF( tmp_tuple_unpack_1__element_2 );
    tmp_tuple_unpack_1__element_2 = NULL;

    // Re-raise.
    exception_type = exception_keeper_type_6;
    exception_value = exception_keeper_value_6;
    exception_tb = exception_keeper_tb_6;
    exception_lineno = exception_keeper_lineno_6;

    goto try_except_handler_9;
    // End of try:
    try_end_6:;
    CHECK_OBJECT( (PyObject *)tmp_tuple_unpack_1__source_iter );
    Py_DECREF( tmp_tuple_unpack_1__source_iter );
    tmp_tuple_unpack_1__source_iter = NULL;

    {
        PyObject *tmp_assign_source_18;
        CHECK_OBJECT( tmp_tuple_unpack_1__element_1 );
        tmp_assign_source_18 = tmp_tuple_unpack_1__element_1;
        {
            PyObject *old = var_key;
            var_key = tmp_assign_source_18;
            Py_INCREF( var_key );
            Py_XDECREF( old );
        }

    }
    Py_XDECREF( tmp_tuple_unpack_1__element_1 );
    tmp_tuple_unpack_1__element_1 = NULL;

    {
        PyObject *tmp_assign_source_19;
        CHECK_OBJECT( tmp_tuple_unpack_1__element_2 );
        tmp_assign_source_19 = tmp_tuple_unpack_1__element_2;
        {
            PyObject *old = var_events;
            var_events = tmp_assign_source_19;
            Py_INCREF( var_events );
            Py_XDECREF( old );
        }

    }
    Py_XDECREF( tmp_tuple_unpack_1__element_2 );
    tmp_tuple_unpack_1__element_2 = NULL;

    {
        nuitka_bool tmp_condition_result_16;
        PyObject *tmp_compexpr_left_5;
        PyObject *tmp_compexpr_right_5;
        PyObject *tmp_source_name_35;
        PyObject *tmp_source_name_36;
        CHECK_OBJECT( var_key );
        tmp_source_name_35 = var_key;
        tmp_compexpr_left_5 = LOOKUP_ATTRIBUTE( tmp_source_name_35, const_str_plain_fileobj );
        if ( tmp_compexpr_left_5 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 1688;
            type_description_1 = "oooooooooooooo";
            goto try_except_handler_9;
        }
        CHECK_OBJECT( par_self );
        tmp_source_name_36 = par_self;
        tmp_compexpr_right_5 = LOOKUP_ATTRIBUTE( tmp_source_name_36, const_str_plain_stdin );
        if ( tmp_compexpr_right_5 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
            Py_DECREF( tmp_compexpr_left_5 );

            exception_lineno = 1688;
            type_description_1 = "oooooooooooooo";
            goto try_except_handler_9;
        }
        tmp_condition_result_16 = ( tmp_compexpr_left_5 == tmp_compexpr_right_5 ) ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
        Py_DECREF( tmp_compexpr_left_5 );
        Py_DECREF( tmp_compexpr_right_5 );
        if ( tmp_condition_result_16 == NUITKA_BOOL_TRUE )
        {
            goto branch_yes_16;
        }
        else
        {
            goto branch_no_16;
        }
        branch_yes_16:;
        {
            PyObject *tmp_assign_source_20;
            PyObject *tmp_subscribed_name_3;
            PyObject *tmp_subscript_name_3;
            PyObject *tmp_start_name_1;
            PyObject *tmp_source_name_37;
            PyObject *tmp_stop_name_1;
            PyObject *tmp_left_name_1;
            PyObject *tmp_source_name_38;
            PyObject *tmp_right_name_1;
            PyObject *tmp_mvar_value_6;
            PyObject *tmp_step_name_1;
            if ( var_input_view == NULL )
            {

                exception_type = PyExc_UnboundLocalError;
                Py_INCREF( exception_type );
                exception_value = PyUnicode_FromFormat( "local variable '%s' referenced before assignment", "input_view" );
                exception_tb = NULL;
                NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
                CHAIN_EXCEPTION( exception_value );

                exception_lineno = 1689;
                type_description_1 = "oooooooooooooo";
                goto try_except_handler_9;
            }

            tmp_subscribed_name_3 = var_input_view;
            CHECK_OBJECT( par_self );
            tmp_source_name_37 = par_self;
            tmp_start_name_1 = LOOKUP_ATTRIBUTE( tmp_source_name_37, const_str_plain__input_offset );
            if ( tmp_start_name_1 == NULL )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 1689;
                type_description_1 = "oooooooooooooo";
                goto try_except_handler_9;
            }
            CHECK_OBJECT( par_self );
            tmp_source_name_38 = par_self;
            tmp_left_name_1 = LOOKUP_ATTRIBUTE( tmp_source_name_38, const_str_plain__input_offset );
            if ( tmp_left_name_1 == NULL )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
                Py_DECREF( tmp_start_name_1 );

                exception_lineno = 1690;
                type_description_1 = "oooooooooooooo";
                goto try_except_handler_9;
            }
            tmp_mvar_value_6 = GET_STRING_DICT_VALUE( moduledict_subprocess, (Nuitka_StringObject *)const_str_plain__PIPE_BUF );

            if (unlikely( tmp_mvar_value_6 == NULL ))
            {
                tmp_mvar_value_6 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain__PIPE_BUF );
            }

            if ( tmp_mvar_value_6 == NULL )
            {
                Py_DECREF( tmp_start_name_1 );
                Py_DECREF( tmp_left_name_1 );
                exception_type = PyExc_NameError;
                Py_INCREF( exception_type );
                exception_value = PyUnicode_FromFormat( "name '%s' is not defined", "_PIPE_BUF" );
                exception_tb = NULL;
                NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
                CHAIN_EXCEPTION( exception_value );

                exception_lineno = 1690;
                type_description_1 = "oooooooooooooo";
                goto try_except_handler_9;
            }

            tmp_right_name_1 = tmp_mvar_value_6;
            tmp_stop_name_1 = BINARY_OPERATION_ADD_OBJECT_OBJECT( tmp_left_name_1, tmp_right_name_1 );
            Py_DECREF( tmp_left_name_1 );
            if ( tmp_stop_name_1 == NULL )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
                Py_DECREF( tmp_start_name_1 );

                exception_lineno = 1690;
                type_description_1 = "oooooooooooooo";
                goto try_except_handler_9;
            }
            tmp_step_name_1 = Py_None;
            tmp_subscript_name_3 = MAKE_SLICEOBJ3( tmp_start_name_1, tmp_stop_name_1, tmp_step_name_1 );
            Py_DECREF( tmp_start_name_1 );
            Py_DECREF( tmp_stop_name_1 );
            assert( !(tmp_subscript_name_3 == NULL) );
            tmp_assign_source_20 = LOOKUP_SUBSCRIPT( tmp_subscribed_name_3, tmp_subscript_name_3 );
            Py_DECREF( tmp_subscript_name_3 );
            if ( tmp_assign_source_20 == NULL )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 1689;
                type_description_1 = "oooooooooooooo";
                goto try_except_handler_9;
            }
            {
                PyObject *old = var_chunk;
                var_chunk = tmp_assign_source_20;
                Py_XDECREF( old );
            }

        }
        {
            PyObject *tmp_assign_source_21;
            tmp_assign_source_21 = Py_True;
            {
                PyObject *old = tmp_try_except_1__unhandled_indicator;
                tmp_try_except_1__unhandled_indicator = tmp_assign_source_21;
                Py_INCREF( tmp_try_except_1__unhandled_indicator );
                Py_XDECREF( old );
            }

        }
        // Tried code:
        // Tried code:
        {
            PyObject *tmp_assign_source_22;
            PyObject *tmp_source_name_39;
            CHECK_OBJECT( par_self );
            tmp_source_name_39 = par_self;
            tmp_assign_source_22 = LOOKUP_ATTRIBUTE( tmp_source_name_39, const_str_plain__input_offset );
            if ( tmp_assign_source_22 == NULL )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 1692;
                type_description_1 = "oooooooooooooo";
                goto try_except_handler_13;
            }
            {
                PyObject *old = tmp_inplace_assign_attr_1__start;
                tmp_inplace_assign_attr_1__start = tmp_assign_source_22;
                Py_XDECREF( old );
            }

        }
        // Tried code:
        {
            PyObject *tmp_assign_source_23;
            PyObject *tmp_left_name_2;
            PyObject *tmp_right_name_2;
            PyObject *tmp_called_name_8;
            PyObject *tmp_source_name_40;
            PyObject *tmp_mvar_value_7;
            PyObject *tmp_args_element_name_15;
            PyObject *tmp_source_name_41;
            PyObject *tmp_args_element_name_16;
            CHECK_OBJECT( tmp_inplace_assign_attr_1__start );
            tmp_left_name_2 = tmp_inplace_assign_attr_1__start;
            tmp_mvar_value_7 = GET_STRING_DICT_VALUE( moduledict_subprocess, (Nuitka_StringObject *)const_str_plain_os );

            if (unlikely( tmp_mvar_value_7 == NULL ))
            {
                tmp_mvar_value_7 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_os );
            }

            if ( tmp_mvar_value_7 == NULL )
            {

                exception_type = PyExc_NameError;
                Py_INCREF( exception_type );
                exception_value = PyUnicode_FromFormat( "name '%s' is not defined", "os" );
                exception_tb = NULL;
                NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
                CHAIN_EXCEPTION( exception_value );

                exception_lineno = 1692;
                type_description_1 = "oooooooooooooo";
                goto try_except_handler_14;
            }

            tmp_source_name_40 = tmp_mvar_value_7;
            tmp_called_name_8 = LOOKUP_ATTRIBUTE( tmp_source_name_40, const_str_plain_write );
            if ( tmp_called_name_8 == NULL )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 1692;
                type_description_1 = "oooooooooooooo";
                goto try_except_handler_14;
            }
            CHECK_OBJECT( var_key );
            tmp_source_name_41 = var_key;
            tmp_args_element_name_15 = LOOKUP_ATTRIBUTE( tmp_source_name_41, const_str_plain_fd );
            if ( tmp_args_element_name_15 == NULL )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
                Py_DECREF( tmp_called_name_8 );

                exception_lineno = 1692;
                type_description_1 = "oooooooooooooo";
                goto try_except_handler_14;
            }
            CHECK_OBJECT( var_chunk );
            tmp_args_element_name_16 = var_chunk;
            frame_b3fe41aa9e45c0ee93ce9ccbee67af61->m_frame.f_lineno = 1692;
            {
                PyObject *call_args[] = { tmp_args_element_name_15, tmp_args_element_name_16 };
                tmp_right_name_2 = CALL_FUNCTION_WITH_ARGS2( tmp_called_name_8, call_args );
            }

            Py_DECREF( tmp_called_name_8 );
            Py_DECREF( tmp_args_element_name_15 );
            if ( tmp_right_name_2 == NULL )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 1692;
                type_description_1 = "oooooooooooooo";
                goto try_except_handler_14;
            }
            tmp_assign_source_23 = BINARY_OPERATION( PyNumber_InPlaceAdd, tmp_left_name_2, tmp_right_name_2 );
            Py_DECREF( tmp_right_name_2 );
            if ( tmp_assign_source_23 == NULL )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 1692;
                type_description_1 = "oooooooooooooo";
                goto try_except_handler_14;
            }
            {
                PyObject *old = tmp_inplace_assign_attr_1__end;
                tmp_inplace_assign_attr_1__end = tmp_assign_source_23;
                Py_XDECREF( old );
            }

        }
        // Tried code:
        {
            PyObject *tmp_assattr_name_2;
            PyObject *tmp_assattr_target_2;
            CHECK_OBJECT( tmp_inplace_assign_attr_1__end );
            tmp_assattr_name_2 = tmp_inplace_assign_attr_1__end;
            CHECK_OBJECT( par_self );
            tmp_assattr_target_2 = par_self;
            tmp_result = SET_ATTRIBUTE( tmp_assattr_target_2, const_str_plain__input_offset, tmp_assattr_name_2 );
            if ( tmp_result == false )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 1692;
                type_description_1 = "oooooooooooooo";
                goto try_except_handler_15;
            }
        }
        goto try_end_7;
        // Exception handler code:
        try_except_handler_15:;
        exception_keeper_type_7 = exception_type;
        exception_keeper_value_7 = exception_value;
        exception_keeper_tb_7 = exception_tb;
        exception_keeper_lineno_7 = exception_lineno;
        exception_type = NULL;
        exception_value = NULL;
        exception_tb = NULL;
        exception_lineno = 0;

        CHECK_OBJECT( (PyObject *)tmp_inplace_assign_attr_1__end );
        Py_DECREF( tmp_inplace_assign_attr_1__end );
        tmp_inplace_assign_attr_1__end = NULL;

        // Re-raise.
        exception_type = exception_keeper_type_7;
        exception_value = exception_keeper_value_7;
        exception_tb = exception_keeper_tb_7;
        exception_lineno = exception_keeper_lineno_7;

        goto try_except_handler_14;
        // End of try:
        try_end_7:;
        goto try_end_8;
        // Exception handler code:
        try_except_handler_14:;
        exception_keeper_type_8 = exception_type;
        exception_keeper_value_8 = exception_value;
        exception_keeper_tb_8 = exception_tb;
        exception_keeper_lineno_8 = exception_lineno;
        exception_type = NULL;
        exception_value = NULL;
        exception_tb = NULL;
        exception_lineno = 0;

        CHECK_OBJECT( (PyObject *)tmp_inplace_assign_attr_1__start );
        Py_DECREF( tmp_inplace_assign_attr_1__start );
        tmp_inplace_assign_attr_1__start = NULL;

        // Re-raise.
        exception_type = exception_keeper_type_8;
        exception_value = exception_keeper_value_8;
        exception_tb = exception_keeper_tb_8;
        exception_lineno = exception_keeper_lineno_8;

        goto try_except_handler_13;
        // End of try:
        try_end_8:;
        CHECK_OBJECT( (PyObject *)tmp_inplace_assign_attr_1__end );
        Py_DECREF( tmp_inplace_assign_attr_1__end );
        tmp_inplace_assign_attr_1__end = NULL;

        CHECK_OBJECT( (PyObject *)tmp_inplace_assign_attr_1__start );
        Py_DECREF( tmp_inplace_assign_attr_1__start );
        tmp_inplace_assign_attr_1__start = NULL;

        goto try_end_9;
        // Exception handler code:
        try_except_handler_13:;
        exception_keeper_type_9 = exception_type;
        exception_keeper_value_9 = exception_value;
        exception_keeper_tb_9 = exception_tb;
        exception_keeper_lineno_9 = exception_lineno;
        exception_type = NULL;
        exception_value = NULL;
        exception_tb = NULL;
        exception_lineno = 0;

        {
            PyObject *tmp_assign_source_24;
            tmp_assign_source_24 = Py_False;
            {
                PyObject *old = tmp_try_except_1__unhandled_indicator;
                assert( old != NULL );
                tmp_try_except_1__unhandled_indicator = tmp_assign_source_24;
                Py_INCREF( tmp_try_except_1__unhandled_indicator );
                Py_DECREF( old );
            }

        }
        // Preserve existing published exception.
        exception_preserved_type_3 = EXC_TYPE(PyThreadState_GET());
        Py_XINCREF( exception_preserved_type_3 );
        exception_preserved_value_3 = EXC_VALUE(PyThreadState_GET());
        Py_XINCREF( exception_preserved_value_3 );
        exception_preserved_tb_3 = (PyTracebackObject *)EXC_TRACEBACK(PyThreadState_GET());
        Py_XINCREF( exception_preserved_tb_3 );

        if ( exception_keeper_tb_9 == NULL )
        {
            exception_keeper_tb_9 = MAKE_TRACEBACK( frame_b3fe41aa9e45c0ee93ce9ccbee67af61, exception_keeper_lineno_9 );
        }
        else if ( exception_keeper_lineno_9 != 0 )
        {
            exception_keeper_tb_9 = ADD_TRACEBACK( exception_keeper_tb_9, frame_b3fe41aa9e45c0ee93ce9ccbee67af61, exception_keeper_lineno_9 );
        }

        NORMALIZE_EXCEPTION( &exception_keeper_type_9, &exception_keeper_value_9, &exception_keeper_tb_9 );
        PyException_SetTraceback( exception_keeper_value_9, (PyObject *)exception_keeper_tb_9 );
        PUBLISH_EXCEPTION( &exception_keeper_type_9, &exception_keeper_value_9, &exception_keeper_tb_9 );
        // Tried code:
        {
            nuitka_bool tmp_condition_result_17;
            PyObject *tmp_compexpr_left_6;
            PyObject *tmp_compexpr_right_6;
            tmp_compexpr_left_6 = EXC_TYPE(PyThreadState_GET());
            tmp_compexpr_right_6 = PyExc_BrokenPipeError;
            tmp_res = EXCEPTION_MATCH_BOOL( tmp_compexpr_left_6, tmp_compexpr_right_6 );
            if ( tmp_res == -1 )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 1693;
                type_description_1 = "oooooooooooooo";
                goto try_except_handler_16;
            }
            tmp_condition_result_17 = ( tmp_res != 0 ) ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
            if ( tmp_condition_result_17 == NUITKA_BOOL_TRUE )
            {
                goto branch_yes_17;
            }
            else
            {
                goto branch_no_17;
            }
            branch_yes_17:;
            {
                PyObject *tmp_called_name_9;
                PyObject *tmp_source_name_42;
                PyObject *tmp_call_result_8;
                PyObject *tmp_args_element_name_17;
                PyObject *tmp_source_name_43;
                CHECK_OBJECT( var_selector );
                tmp_source_name_42 = var_selector;
                tmp_called_name_9 = LOOKUP_ATTRIBUTE( tmp_source_name_42, const_str_plain_unregister );
                if ( tmp_called_name_9 == NULL )
                {
                    assert( ERROR_OCCURRED() );

                    FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                    exception_lineno = 1694;
                    type_description_1 = "oooooooooooooo";
                    goto try_except_handler_16;
                }
                CHECK_OBJECT( var_key );
                tmp_source_name_43 = var_key;
                tmp_args_element_name_17 = LOOKUP_ATTRIBUTE( tmp_source_name_43, const_str_plain_fileobj );
                if ( tmp_args_element_name_17 == NULL )
                {
                    assert( ERROR_OCCURRED() );

                    FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
                    Py_DECREF( tmp_called_name_9 );

                    exception_lineno = 1694;
                    type_description_1 = "oooooooooooooo";
                    goto try_except_handler_16;
                }
                frame_b3fe41aa9e45c0ee93ce9ccbee67af61->m_frame.f_lineno = 1694;
                {
                    PyObject *call_args[] = { tmp_args_element_name_17 };
                    tmp_call_result_8 = CALL_FUNCTION_WITH_ARGS1( tmp_called_name_9, call_args );
                }

                Py_DECREF( tmp_called_name_9 );
                Py_DECREF( tmp_args_element_name_17 );
                if ( tmp_call_result_8 == NULL )
                {
                    assert( ERROR_OCCURRED() );

                    FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                    exception_lineno = 1694;
                    type_description_1 = "oooooooooooooo";
                    goto try_except_handler_16;
                }
                Py_DECREF( tmp_call_result_8 );
            }
            {
                PyObject *tmp_called_instance_8;
                PyObject *tmp_source_name_44;
                PyObject *tmp_call_result_9;
                CHECK_OBJECT( var_key );
                tmp_source_name_44 = var_key;
                tmp_called_instance_8 = LOOKUP_ATTRIBUTE( tmp_source_name_44, const_str_plain_fileobj );
                if ( tmp_called_instance_8 == NULL )
                {
                    assert( ERROR_OCCURRED() );

                    FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                    exception_lineno = 1695;
                    type_description_1 = "oooooooooooooo";
                    goto try_except_handler_16;
                }
                frame_b3fe41aa9e45c0ee93ce9ccbee67af61->m_frame.f_lineno = 1695;
                tmp_call_result_9 = CALL_METHOD_NO_ARGS( tmp_called_instance_8, const_str_plain_close );
                Py_DECREF( tmp_called_instance_8 );
                if ( tmp_call_result_9 == NULL )
                {
                    assert( ERROR_OCCURRED() );

                    FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                    exception_lineno = 1695;
                    type_description_1 = "oooooooooooooo";
                    goto try_except_handler_16;
                }
                Py_DECREF( tmp_call_result_9 );
            }
            goto branch_end_17;
            branch_no_17:;
            tmp_result = RERAISE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
            if (unlikely( tmp_result == false ))
            {
                exception_lineno = 1691;
            }

            if (exception_tb && exception_tb->tb_frame == &frame_b3fe41aa9e45c0ee93ce9ccbee67af61->m_frame) frame_b3fe41aa9e45c0ee93ce9ccbee67af61->m_frame.f_lineno = exception_tb->tb_lineno;
            type_description_1 = "oooooooooooooo";
            goto try_except_handler_16;
            branch_end_17:;
        }
        goto try_end_10;
        // Exception handler code:
        try_except_handler_16:;
        exception_keeper_type_10 = exception_type;
        exception_keeper_value_10 = exception_value;
        exception_keeper_tb_10 = exception_tb;
        exception_keeper_lineno_10 = exception_lineno;
        exception_type = NULL;
        exception_value = NULL;
        exception_tb = NULL;
        exception_lineno = 0;

        // Restore previous exception.
        SET_CURRENT_EXCEPTION( exception_preserved_type_3, exception_preserved_value_3, exception_preserved_tb_3 );
        // Re-raise.
        exception_type = exception_keeper_type_10;
        exception_value = exception_keeper_value_10;
        exception_tb = exception_keeper_tb_10;
        exception_lineno = exception_keeper_lineno_10;

        goto try_except_handler_12;
        // End of try:
        try_end_10:;
        // Restore previous exception.
        SET_CURRENT_EXCEPTION( exception_preserved_type_3, exception_preserved_value_3, exception_preserved_tb_3 );
        goto try_end_9;
        // exception handler codes exits in all cases
        NUITKA_CANNOT_GET_HERE( subprocess$$$function_57__communicate );
        return NULL;
        // End of try:
        try_end_9:;
        {
            nuitka_bool tmp_condition_result_18;
            nuitka_bool tmp_compexpr_left_7;
            nuitka_bool tmp_compexpr_right_7;
            int tmp_truth_name_11;
            CHECK_OBJECT( tmp_try_except_1__unhandled_indicator );
            tmp_truth_name_11 = CHECK_IF_TRUE( tmp_try_except_1__unhandled_indicator );
            if ( tmp_truth_name_11 == -1 )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 1691;
                type_description_1 = "oooooooooooooo";
                goto try_except_handler_12;
            }
            tmp_compexpr_left_7 = tmp_truth_name_11 == 1 ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
            tmp_compexpr_right_7 = NUITKA_BOOL_TRUE;
            tmp_condition_result_18 = ( tmp_compexpr_left_7 == tmp_compexpr_right_7 ) ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
            if ( tmp_condition_result_18 == NUITKA_BOOL_TRUE )
            {
                goto branch_yes_18;
            }
            else
            {
                goto branch_no_18;
            }
            branch_yes_18:;
            {
                nuitka_bool tmp_condition_result_19;
                PyObject *tmp_compexpr_left_8;
                PyObject *tmp_compexpr_right_8;
                PyObject *tmp_source_name_45;
                PyObject *tmp_len_arg_1;
                PyObject *tmp_source_name_46;
                CHECK_OBJECT( par_self );
                tmp_source_name_45 = par_self;
                tmp_compexpr_left_8 = LOOKUP_ATTRIBUTE( tmp_source_name_45, const_str_plain__input_offset );
                if ( tmp_compexpr_left_8 == NULL )
                {
                    assert( ERROR_OCCURRED() );

                    FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                    exception_lineno = 1697;
                    type_description_1 = "oooooooooooooo";
                    goto try_except_handler_12;
                }
                CHECK_OBJECT( par_self );
                tmp_source_name_46 = par_self;
                tmp_len_arg_1 = LOOKUP_ATTRIBUTE( tmp_source_name_46, const_str_plain__input );
                if ( tmp_len_arg_1 == NULL )
                {
                    assert( ERROR_OCCURRED() );

                    FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
                    Py_DECREF( tmp_compexpr_left_8 );

                    exception_lineno = 1697;
                    type_description_1 = "oooooooooooooo";
                    goto try_except_handler_12;
                }
                tmp_compexpr_right_8 = BUILTIN_LEN( tmp_len_arg_1 );
                Py_DECREF( tmp_len_arg_1 );
                if ( tmp_compexpr_right_8 == NULL )
                {
                    assert( ERROR_OCCURRED() );

                    FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
                    Py_DECREF( tmp_compexpr_left_8 );

                    exception_lineno = 1697;
                    type_description_1 = "oooooooooooooo";
                    goto try_except_handler_12;
                }
                tmp_res = RICH_COMPARE_BOOL_GTE_OBJECT_OBJECT( tmp_compexpr_left_8, tmp_compexpr_right_8 );
                Py_DECREF( tmp_compexpr_left_8 );
                Py_DECREF( tmp_compexpr_right_8 );
                if ( tmp_res == -1 )
                {
                    assert( ERROR_OCCURRED() );

                    FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                    exception_lineno = 1697;
                    type_description_1 = "oooooooooooooo";
                    goto try_except_handler_12;
                }
                tmp_condition_result_19 = ( tmp_res != 0 ) ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
                if ( tmp_condition_result_19 == NUITKA_BOOL_TRUE )
                {
                    goto branch_yes_19;
                }
                else
                {
                    goto branch_no_19;
                }
                branch_yes_19:;
                {
                    PyObject *tmp_called_name_10;
                    PyObject *tmp_source_name_47;
                    PyObject *tmp_call_result_10;
                    PyObject *tmp_args_element_name_18;
                    PyObject *tmp_source_name_48;
                    CHECK_OBJECT( var_selector );
                    tmp_source_name_47 = var_selector;
                    tmp_called_name_10 = LOOKUP_ATTRIBUTE( tmp_source_name_47, const_str_plain_unregister );
                    if ( tmp_called_name_10 == NULL )
                    {
                        assert( ERROR_OCCURRED() );

                        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                        exception_lineno = 1698;
                        type_description_1 = "oooooooooooooo";
                        goto try_except_handler_12;
                    }
                    CHECK_OBJECT( var_key );
                    tmp_source_name_48 = var_key;
                    tmp_args_element_name_18 = LOOKUP_ATTRIBUTE( tmp_source_name_48, const_str_plain_fileobj );
                    if ( tmp_args_element_name_18 == NULL )
                    {
                        assert( ERROR_OCCURRED() );

                        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
                        Py_DECREF( tmp_called_name_10 );

                        exception_lineno = 1698;
                        type_description_1 = "oooooooooooooo";
                        goto try_except_handler_12;
                    }
                    frame_b3fe41aa9e45c0ee93ce9ccbee67af61->m_frame.f_lineno = 1698;
                    {
                        PyObject *call_args[] = { tmp_args_element_name_18 };
                        tmp_call_result_10 = CALL_FUNCTION_WITH_ARGS1( tmp_called_name_10, call_args );
                    }

                    Py_DECREF( tmp_called_name_10 );
                    Py_DECREF( tmp_args_element_name_18 );
                    if ( tmp_call_result_10 == NULL )
                    {
                        assert( ERROR_OCCURRED() );

                        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                        exception_lineno = 1698;
                        type_description_1 = "oooooooooooooo";
                        goto try_except_handler_12;
                    }
                    Py_DECREF( tmp_call_result_10 );
                }
                {
                    PyObject *tmp_called_instance_9;
                    PyObject *tmp_source_name_49;
                    PyObject *tmp_call_result_11;
                    CHECK_OBJECT( var_key );
                    tmp_source_name_49 = var_key;
                    tmp_called_instance_9 = LOOKUP_ATTRIBUTE( tmp_source_name_49, const_str_plain_fileobj );
                    if ( tmp_called_instance_9 == NULL )
                    {
                        assert( ERROR_OCCURRED() );

                        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                        exception_lineno = 1699;
                        type_description_1 = "oooooooooooooo";
                        goto try_except_handler_12;
                    }
                    frame_b3fe41aa9e45c0ee93ce9ccbee67af61->m_frame.f_lineno = 1699;
                    tmp_call_result_11 = CALL_METHOD_NO_ARGS( tmp_called_instance_9, const_str_plain_close );
                    Py_DECREF( tmp_called_instance_9 );
                    if ( tmp_call_result_11 == NULL )
                    {
                        assert( ERROR_OCCURRED() );

                        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                        exception_lineno = 1699;
                        type_description_1 = "oooooooooooooo";
                        goto try_except_handler_12;
                    }
                    Py_DECREF( tmp_call_result_11 );
                }
                branch_no_19:;
            }
            branch_no_18:;
        }
        goto try_end_11;
        // Exception handler code:
        try_except_handler_12:;
        exception_keeper_type_11 = exception_type;
        exception_keeper_value_11 = exception_value;
        exception_keeper_tb_11 = exception_tb;
        exception_keeper_lineno_11 = exception_lineno;
        exception_type = NULL;
        exception_value = NULL;
        exception_tb = NULL;
        exception_lineno = 0;

        Py_XDECREF( tmp_try_except_1__unhandled_indicator );
        tmp_try_except_1__unhandled_indicator = NULL;

        // Re-raise.
        exception_type = exception_keeper_type_11;
        exception_value = exception_keeper_value_11;
        exception_tb = exception_keeper_tb_11;
        exception_lineno = exception_keeper_lineno_11;

        goto try_except_handler_9;
        // End of try:
        try_end_11:;
        CHECK_OBJECT( (PyObject *)tmp_try_except_1__unhandled_indicator );
        Py_DECREF( tmp_try_except_1__unhandled_indicator );
        tmp_try_except_1__unhandled_indicator = NULL;

        goto branch_end_16;
        branch_no_16:;
        {
            nuitka_bool tmp_condition_result_20;
            PyObject *tmp_compexpr_left_9;
            PyObject *tmp_compexpr_right_9;
            PyObject *tmp_source_name_50;
            PyObject *tmp_tuple_element_1;
            PyObject *tmp_source_name_51;
            PyObject *tmp_source_name_52;
            CHECK_OBJECT( var_key );
            tmp_source_name_50 = var_key;
            tmp_compexpr_left_9 = LOOKUP_ATTRIBUTE( tmp_source_name_50, const_str_plain_fileobj );
            if ( tmp_compexpr_left_9 == NULL )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 1700;
                type_description_1 = "oooooooooooooo";
                goto try_except_handler_9;
            }
            CHECK_OBJECT( par_self );
            tmp_source_name_51 = par_self;
            tmp_tuple_element_1 = LOOKUP_ATTRIBUTE( tmp_source_name_51, const_str_plain_stdout );
            if ( tmp_tuple_element_1 == NULL )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
                Py_DECREF( tmp_compexpr_left_9 );

                exception_lineno = 1700;
                type_description_1 = "oooooooooooooo";
                goto try_except_handler_9;
            }
            tmp_compexpr_right_9 = PyTuple_New( 2 );
            PyTuple_SET_ITEM( tmp_compexpr_right_9, 0, tmp_tuple_element_1 );
            CHECK_OBJECT( par_self );
            tmp_source_name_52 = par_self;
            tmp_tuple_element_1 = LOOKUP_ATTRIBUTE( tmp_source_name_52, const_str_plain_stderr );
            if ( tmp_tuple_element_1 == NULL )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
                Py_DECREF( tmp_compexpr_left_9 );
                Py_DECREF( tmp_compexpr_right_9 );

                exception_lineno = 1700;
                type_description_1 = "oooooooooooooo";
                goto try_except_handler_9;
            }
            PyTuple_SET_ITEM( tmp_compexpr_right_9, 1, tmp_tuple_element_1 );
            tmp_res = PySequence_Contains( tmp_compexpr_right_9, tmp_compexpr_left_9 );
            Py_DECREF( tmp_compexpr_left_9 );
            Py_DECREF( tmp_compexpr_right_9 );
            if ( tmp_res == -1 )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 1700;
                type_description_1 = "oooooooooooooo";
                goto try_except_handler_9;
            }
            tmp_condition_result_20 = ( tmp_res == 1 ) ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
            if ( tmp_condition_result_20 == NUITKA_BOOL_TRUE )
            {
                goto branch_yes_20;
            }
            else
            {
                goto branch_no_20;
            }
            branch_yes_20:;
            {
                PyObject *tmp_assign_source_25;
                PyObject *tmp_called_name_11;
                PyObject *tmp_source_name_53;
                PyObject *tmp_mvar_value_8;
                PyObject *tmp_args_element_name_19;
                PyObject *tmp_source_name_54;
                PyObject *tmp_args_element_name_20;
                tmp_mvar_value_8 = GET_STRING_DICT_VALUE( moduledict_subprocess, (Nuitka_StringObject *)const_str_plain_os );

                if (unlikely( tmp_mvar_value_8 == NULL ))
                {
                    tmp_mvar_value_8 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_os );
                }

                if ( tmp_mvar_value_8 == NULL )
                {

                    exception_type = PyExc_NameError;
                    Py_INCREF( exception_type );
                    exception_value = PyUnicode_FromFormat( "name '%s' is not defined", "os" );
                    exception_tb = NULL;
                    NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
                    CHAIN_EXCEPTION( exception_value );

                    exception_lineno = 1701;
                    type_description_1 = "oooooooooooooo";
                    goto try_except_handler_9;
                }

                tmp_source_name_53 = tmp_mvar_value_8;
                tmp_called_name_11 = LOOKUP_ATTRIBUTE( tmp_source_name_53, const_str_plain_read );
                if ( tmp_called_name_11 == NULL )
                {
                    assert( ERROR_OCCURRED() );

                    FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                    exception_lineno = 1701;
                    type_description_1 = "oooooooooooooo";
                    goto try_except_handler_9;
                }
                CHECK_OBJECT( var_key );
                tmp_source_name_54 = var_key;
                tmp_args_element_name_19 = LOOKUP_ATTRIBUTE( tmp_source_name_54, const_str_plain_fd );
                if ( tmp_args_element_name_19 == NULL )
                {
                    assert( ERROR_OCCURRED() );

                    FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
                    Py_DECREF( tmp_called_name_11 );

                    exception_lineno = 1701;
                    type_description_1 = "oooooooooooooo";
                    goto try_except_handler_9;
                }
                tmp_args_element_name_20 = const_int_pos_32768;
                frame_b3fe41aa9e45c0ee93ce9ccbee67af61->m_frame.f_lineno = 1701;
                {
                    PyObject *call_args[] = { tmp_args_element_name_19, tmp_args_element_name_20 };
                    tmp_assign_source_25 = CALL_FUNCTION_WITH_ARGS2( tmp_called_name_11, call_args );
                }

                Py_DECREF( tmp_called_name_11 );
                Py_DECREF( tmp_args_element_name_19 );
                if ( tmp_assign_source_25 == NULL )
                {
                    assert( ERROR_OCCURRED() );

                    FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                    exception_lineno = 1701;
                    type_description_1 = "oooooooooooooo";
                    goto try_except_handler_9;
                }
                {
                    PyObject *old = var_data;
                    var_data = tmp_assign_source_25;
                    Py_XDECREF( old );
                }

            }
            {
                nuitka_bool tmp_condition_result_21;
                PyObject *tmp_operand_name_7;
                CHECK_OBJECT( var_data );
                tmp_operand_name_7 = var_data;
                tmp_res = CHECK_IF_TRUE( tmp_operand_name_7 );
                if ( tmp_res == -1 )
                {
                    assert( ERROR_OCCURRED() );

                    FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                    exception_lineno = 1702;
                    type_description_1 = "oooooooooooooo";
                    goto try_except_handler_9;
                }
                tmp_condition_result_21 = ( tmp_res == 0 ) ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
                if ( tmp_condition_result_21 == NUITKA_BOOL_TRUE )
                {
                    goto branch_yes_21;
                }
                else
                {
                    goto branch_no_21;
                }
                branch_yes_21:;
                {
                    PyObject *tmp_called_name_12;
                    PyObject *tmp_source_name_55;
                    PyObject *tmp_call_result_12;
                    PyObject *tmp_args_element_name_21;
                    PyObject *tmp_source_name_56;
                    CHECK_OBJECT( var_selector );
                    tmp_source_name_55 = var_selector;
                    tmp_called_name_12 = LOOKUP_ATTRIBUTE( tmp_source_name_55, const_str_plain_unregister );
                    if ( tmp_called_name_12 == NULL )
                    {
                        assert( ERROR_OCCURRED() );

                        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                        exception_lineno = 1703;
                        type_description_1 = "oooooooooooooo";
                        goto try_except_handler_9;
                    }
                    CHECK_OBJECT( var_key );
                    tmp_source_name_56 = var_key;
                    tmp_args_element_name_21 = LOOKUP_ATTRIBUTE( tmp_source_name_56, const_str_plain_fileobj );
                    if ( tmp_args_element_name_21 == NULL )
                    {
                        assert( ERROR_OCCURRED() );

                        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
                        Py_DECREF( tmp_called_name_12 );

                        exception_lineno = 1703;
                        type_description_1 = "oooooooooooooo";
                        goto try_except_handler_9;
                    }
                    frame_b3fe41aa9e45c0ee93ce9ccbee67af61->m_frame.f_lineno = 1703;
                    {
                        PyObject *call_args[] = { tmp_args_element_name_21 };
                        tmp_call_result_12 = CALL_FUNCTION_WITH_ARGS1( tmp_called_name_12, call_args );
                    }

                    Py_DECREF( tmp_called_name_12 );
                    Py_DECREF( tmp_args_element_name_21 );
                    if ( tmp_call_result_12 == NULL )
                    {
                        assert( ERROR_OCCURRED() );

                        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                        exception_lineno = 1703;
                        type_description_1 = "oooooooooooooo";
                        goto try_except_handler_9;
                    }
                    Py_DECREF( tmp_call_result_12 );
                }
                {
                    PyObject *tmp_called_instance_10;
                    PyObject *tmp_source_name_57;
                    PyObject *tmp_call_result_13;
                    CHECK_OBJECT( var_key );
                    tmp_source_name_57 = var_key;
                    tmp_called_instance_10 = LOOKUP_ATTRIBUTE( tmp_source_name_57, const_str_plain_fileobj );
                    if ( tmp_called_instance_10 == NULL )
                    {
                        assert( ERROR_OCCURRED() );

                        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                        exception_lineno = 1704;
                        type_description_1 = "oooooooooooooo";
                        goto try_except_handler_9;
                    }
                    frame_b3fe41aa9e45c0ee93ce9ccbee67af61->m_frame.f_lineno = 1704;
                    tmp_call_result_13 = CALL_METHOD_NO_ARGS( tmp_called_instance_10, const_str_plain_close );
                    Py_DECREF( tmp_called_instance_10 );
                    if ( tmp_call_result_13 == NULL )
                    {
                        assert( ERROR_OCCURRED() );

                        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                        exception_lineno = 1704;
                        type_description_1 = "oooooooooooooo";
                        goto try_except_handler_9;
                    }
                    Py_DECREF( tmp_call_result_13 );
                }
                branch_no_21:;
            }
            {
                PyObject *tmp_called_instance_11;
                PyObject *tmp_subscribed_name_4;
                PyObject *tmp_source_name_58;
                PyObject *tmp_subscript_name_4;
                PyObject *tmp_source_name_59;
                PyObject *tmp_call_result_14;
                PyObject *tmp_args_element_name_22;
                CHECK_OBJECT( par_self );
                tmp_source_name_58 = par_self;
                tmp_subscribed_name_4 = LOOKUP_ATTRIBUTE( tmp_source_name_58, const_str_plain__fileobj2output );
                if ( tmp_subscribed_name_4 == NULL )
                {
                    assert( ERROR_OCCURRED() );

                    FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                    exception_lineno = 1705;
                    type_description_1 = "oooooooooooooo";
                    goto try_except_handler_9;
                }
                CHECK_OBJECT( var_key );
                tmp_source_name_59 = var_key;
                tmp_subscript_name_4 = LOOKUP_ATTRIBUTE( tmp_source_name_59, const_str_plain_fileobj );
                if ( tmp_subscript_name_4 == NULL )
                {
                    assert( ERROR_OCCURRED() );

                    FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
                    Py_DECREF( tmp_subscribed_name_4 );

                    exception_lineno = 1705;
                    type_description_1 = "oooooooooooooo";
                    goto try_except_handler_9;
                }
                tmp_called_instance_11 = LOOKUP_SUBSCRIPT( tmp_subscribed_name_4, tmp_subscript_name_4 );
                Py_DECREF( tmp_subscribed_name_4 );
                Py_DECREF( tmp_subscript_name_4 );
                if ( tmp_called_instance_11 == NULL )
                {
                    assert( ERROR_OCCURRED() );

                    FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                    exception_lineno = 1705;
                    type_description_1 = "oooooooooooooo";
                    goto try_except_handler_9;
                }
                CHECK_OBJECT( var_data );
                tmp_args_element_name_22 = var_data;
                frame_b3fe41aa9e45c0ee93ce9ccbee67af61->m_frame.f_lineno = 1705;
                {
                    PyObject *call_args[] = { tmp_args_element_name_22 };
                    tmp_call_result_14 = CALL_METHOD_WITH_ARGS1( tmp_called_instance_11, const_str_plain_append, call_args );
                }

                Py_DECREF( tmp_called_instance_11 );
                if ( tmp_call_result_14 == NULL )
                {
                    assert( ERROR_OCCURRED() );

                    FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                    exception_lineno = 1705;
                    type_description_1 = "oooooooooooooo";
                    goto try_except_handler_9;
                }
                Py_DECREF( tmp_call_result_14 );
            }
            branch_no_20:;
        }
        branch_end_16:;
    }
    if ( CONSIDER_THREADING() == false )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 1687;
        type_description_1 = "oooooooooooooo";
        goto try_except_handler_9;
    }
    goto loop_start_2;
    loop_end_2:;
    goto try_end_12;
    // Exception handler code:
    try_except_handler_9:;
    exception_keeper_type_12 = exception_type;
    exception_keeper_value_12 = exception_value;
    exception_keeper_tb_12 = exception_tb;
    exception_keeper_lineno_12 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    Py_XDECREF( tmp_for_loop_1__iter_value );
    tmp_for_loop_1__iter_value = NULL;

    CHECK_OBJECT( (PyObject *)tmp_for_loop_1__for_iterator );
    Py_DECREF( tmp_for_loop_1__for_iterator );
    tmp_for_loop_1__for_iterator = NULL;

    // Re-raise.
    exception_type = exception_keeper_type_12;
    exception_value = exception_keeper_value_12;
    exception_tb = exception_keeper_tb_12;
    exception_lineno = exception_keeper_lineno_12;

    goto try_except_handler_8;
    // End of try:
    try_end_12:;
    Py_XDECREF( tmp_for_loop_1__iter_value );
    tmp_for_loop_1__iter_value = NULL;

    CHECK_OBJECT( (PyObject *)tmp_for_loop_1__for_iterator );
    Py_DECREF( tmp_for_loop_1__for_iterator );
    tmp_for_loop_1__for_iterator = NULL;

    if ( CONSIDER_THREADING() == false )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 1676;
        type_description_1 = "oooooooooooooo";
        goto try_except_handler_8;
    }
    goto loop_start_1;
    loop_end_1:;
    goto try_end_13;
    // Exception handler code:
    try_except_handler_8:;
    exception_keeper_type_13 = exception_type;
    exception_keeper_value_13 = exception_value;
    exception_keeper_tb_13 = exception_tb;
    exception_keeper_lineno_13 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    // Preserve existing published exception.
    exception_preserved_type_4 = EXC_TYPE(PyThreadState_GET());
    Py_XINCREF( exception_preserved_type_4 );
    exception_preserved_value_4 = EXC_VALUE(PyThreadState_GET());
    Py_XINCREF( exception_preserved_value_4 );
    exception_preserved_tb_4 = (PyTracebackObject *)EXC_TRACEBACK(PyThreadState_GET());
    Py_XINCREF( exception_preserved_tb_4 );

    if ( exception_keeper_tb_13 == NULL )
    {
        exception_keeper_tb_13 = MAKE_TRACEBACK( frame_b3fe41aa9e45c0ee93ce9ccbee67af61, exception_keeper_lineno_13 );
    }
    else if ( exception_keeper_lineno_13 != 0 )
    {
        exception_keeper_tb_13 = ADD_TRACEBACK( exception_keeper_tb_13, frame_b3fe41aa9e45c0ee93ce9ccbee67af61, exception_keeper_lineno_13 );
    }

    NORMALIZE_EXCEPTION( &exception_keeper_type_13, &exception_keeper_value_13, &exception_keeper_tb_13 );
    PyException_SetTraceback( exception_keeper_value_13, (PyObject *)exception_keeper_tb_13 );
    PUBLISH_EXCEPTION( &exception_keeper_type_13, &exception_keeper_value_13, &exception_keeper_tb_13 );
    // Tried code:
    {
        nuitka_bool tmp_condition_result_22;
        PyObject *tmp_compexpr_left_10;
        PyObject *tmp_compexpr_right_10;
        tmp_compexpr_left_10 = EXC_TYPE(PyThreadState_GET());
        tmp_compexpr_right_10 = PyExc_BaseException;
        tmp_res = EXCEPTION_MATCH_BOOL( tmp_compexpr_left_10, tmp_compexpr_right_10 );
        if ( tmp_res == -1 )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 1668;
            type_description_1 = "oooooooooooooo";
            goto try_except_handler_17;
        }
        tmp_condition_result_22 = ( tmp_res != 0 ) ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
        if ( tmp_condition_result_22 == NUITKA_BOOL_TRUE )
        {
            goto branch_yes_22;
        }
        else
        {
            goto branch_no_22;
        }
        branch_yes_22:;
        {
            nuitka_bool tmp_assign_source_26;
            tmp_assign_source_26 = NUITKA_BOOL_FALSE;
            tmp_with_1__indicator = tmp_assign_source_26;
        }
        {
            nuitka_bool tmp_condition_result_23;
            PyObject *tmp_operand_name_8;
            PyObject *tmp_called_name_13;
            PyObject *tmp_args_element_name_23;
            PyObject *tmp_args_element_name_24;
            PyObject *tmp_args_element_name_25;
            CHECK_OBJECT( tmp_with_1__exit );
            tmp_called_name_13 = tmp_with_1__exit;
            tmp_args_element_name_23 = EXC_TYPE(PyThreadState_GET());
            tmp_args_element_name_24 = EXC_VALUE(PyThreadState_GET());
            tmp_args_element_name_25 = EXC_TRACEBACK(PyThreadState_GET());
            frame_b3fe41aa9e45c0ee93ce9ccbee67af61->m_frame.f_lineno = 1668;
            {
                PyObject *call_args[] = { tmp_args_element_name_23, tmp_args_element_name_24, tmp_args_element_name_25 };
                tmp_operand_name_8 = CALL_FUNCTION_WITH_ARGS3( tmp_called_name_13, call_args );
            }

            if ( tmp_operand_name_8 == NULL )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 1668;
                type_description_1 = "oooooooooooooo";
                goto try_except_handler_17;
            }
            tmp_res = CHECK_IF_TRUE( tmp_operand_name_8 );
            Py_DECREF( tmp_operand_name_8 );
            if ( tmp_res == -1 )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 1668;
                type_description_1 = "oooooooooooooo";
                goto try_except_handler_17;
            }
            tmp_condition_result_23 = ( tmp_res == 0 ) ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
            if ( tmp_condition_result_23 == NUITKA_BOOL_TRUE )
            {
                goto branch_yes_23;
            }
            else
            {
                goto branch_no_23;
            }
            branch_yes_23:;
            tmp_result = RERAISE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
            if (unlikely( tmp_result == false ))
            {
                exception_lineno = 1668;
            }

            if (exception_tb && exception_tb->tb_frame == &frame_b3fe41aa9e45c0ee93ce9ccbee67af61->m_frame) frame_b3fe41aa9e45c0ee93ce9ccbee67af61->m_frame.f_lineno = exception_tb->tb_lineno;
            type_description_1 = "oooooooooooooo";
            goto try_except_handler_17;
            branch_no_23:;
        }
        goto branch_end_22;
        branch_no_22:;
        tmp_result = RERAISE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
        if (unlikely( tmp_result == false ))
        {
            exception_lineno = 1668;
        }

        if (exception_tb && exception_tb->tb_frame == &frame_b3fe41aa9e45c0ee93ce9ccbee67af61->m_frame) frame_b3fe41aa9e45c0ee93ce9ccbee67af61->m_frame.f_lineno = exception_tb->tb_lineno;
        type_description_1 = "oooooooooooooo";
        goto try_except_handler_17;
        branch_end_22:;
    }
    goto try_end_14;
    // Exception handler code:
    try_except_handler_17:;
    exception_keeper_type_14 = exception_type;
    exception_keeper_value_14 = exception_value;
    exception_keeper_tb_14 = exception_tb;
    exception_keeper_lineno_14 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    // Restore previous exception.
    SET_CURRENT_EXCEPTION( exception_preserved_type_4, exception_preserved_value_4, exception_preserved_tb_4 );
    // Re-raise.
    exception_type = exception_keeper_type_14;
    exception_value = exception_keeper_value_14;
    exception_tb = exception_keeper_tb_14;
    exception_lineno = exception_keeper_lineno_14;

    goto try_except_handler_7;
    // End of try:
    try_end_14:;
    // Restore previous exception.
    SET_CURRENT_EXCEPTION( exception_preserved_type_4, exception_preserved_value_4, exception_preserved_tb_4 );
    goto try_end_13;
    // exception handler codes exits in all cases
    NUITKA_CANNOT_GET_HERE( subprocess$$$function_57__communicate );
    return NULL;
    // End of try:
    try_end_13:;
    goto try_end_15;
    // Exception handler code:
    try_except_handler_7:;
    exception_keeper_type_15 = exception_type;
    exception_keeper_value_15 = exception_value;
    exception_keeper_tb_15 = exception_tb;
    exception_keeper_lineno_15 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    {
        nuitka_bool tmp_condition_result_24;
        nuitka_bool tmp_compexpr_left_11;
        nuitka_bool tmp_compexpr_right_11;
        assert( tmp_with_1__indicator != NUITKA_BOOL_UNASSIGNED);
        tmp_compexpr_left_11 = tmp_with_1__indicator;
        tmp_compexpr_right_11 = NUITKA_BOOL_TRUE;
        tmp_condition_result_24 = ( tmp_compexpr_left_11 == tmp_compexpr_right_11 ) ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
        if ( tmp_condition_result_24 == NUITKA_BOOL_TRUE )
        {
            goto branch_yes_24;
        }
        else
        {
            goto branch_no_24;
        }
        branch_yes_24:;
        {
            PyObject *tmp_called_name_14;
            PyObject *tmp_call_result_15;
            CHECK_OBJECT( tmp_with_1__exit );
            tmp_called_name_14 = tmp_with_1__exit;
            frame_b3fe41aa9e45c0ee93ce9ccbee67af61->m_frame.f_lineno = 1668;
            tmp_call_result_15 = CALL_FUNCTION_WITH_ARGS3( tmp_called_name_14, &PyTuple_GET_ITEM( const_tuple_none_none_none_tuple, 0 ) );

            if ( tmp_call_result_15 == NULL )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );

                Py_DECREF( exception_keeper_type_15 );
                Py_XDECREF( exception_keeper_value_15 );
                Py_XDECREF( exception_keeper_tb_15 );

                exception_lineno = 1668;
                type_description_1 = "oooooooooooooo";
                goto try_except_handler_6;
            }
            Py_DECREF( tmp_call_result_15 );
        }
        branch_no_24:;
    }
    // Re-raise.
    exception_type = exception_keeper_type_15;
    exception_value = exception_keeper_value_15;
    exception_tb = exception_keeper_tb_15;
    exception_lineno = exception_keeper_lineno_15;

    goto try_except_handler_6;
    // End of try:
    try_end_15:;
    {
        nuitka_bool tmp_condition_result_25;
        nuitka_bool tmp_compexpr_left_12;
        nuitka_bool tmp_compexpr_right_12;
        assert( tmp_with_1__indicator != NUITKA_BOOL_UNASSIGNED);
        tmp_compexpr_left_12 = tmp_with_1__indicator;
        tmp_compexpr_right_12 = NUITKA_BOOL_TRUE;
        tmp_condition_result_25 = ( tmp_compexpr_left_12 == tmp_compexpr_right_12 ) ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
        if ( tmp_condition_result_25 == NUITKA_BOOL_TRUE )
        {
            goto branch_yes_25;
        }
        else
        {
            goto branch_no_25;
        }
        branch_yes_25:;
        {
            PyObject *tmp_called_name_15;
            PyObject *tmp_call_result_16;
            CHECK_OBJECT( tmp_with_1__exit );
            tmp_called_name_15 = tmp_with_1__exit;
            frame_b3fe41aa9e45c0ee93ce9ccbee67af61->m_frame.f_lineno = 1668;
            tmp_call_result_16 = CALL_FUNCTION_WITH_ARGS3( tmp_called_name_15, &PyTuple_GET_ITEM( const_tuple_none_none_none_tuple, 0 ) );

            if ( tmp_call_result_16 == NULL )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 1668;
                type_description_1 = "oooooooooooooo";
                goto try_except_handler_6;
            }
            Py_DECREF( tmp_call_result_16 );
        }
        branch_no_25:;
    }
    goto try_end_16;
    // Exception handler code:
    try_except_handler_6:;
    exception_keeper_type_16 = exception_type;
    exception_keeper_value_16 = exception_value;
    exception_keeper_tb_16 = exception_tb;
    exception_keeper_lineno_16 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    Py_XDECREF( tmp_with_1__source );
    tmp_with_1__source = NULL;

    Py_XDECREF( tmp_with_1__enter );
    tmp_with_1__enter = NULL;

    Py_XDECREF( tmp_with_1__exit );
    tmp_with_1__exit = NULL;

    // Re-raise.
    exception_type = exception_keeper_type_16;
    exception_value = exception_keeper_value_16;
    exception_tb = exception_keeper_tb_16;
    exception_lineno = exception_keeper_lineno_16;

    goto frame_exception_exit_1;
    // End of try:
    try_end_16:;
    CHECK_OBJECT( (PyObject *)tmp_with_1__source );
    Py_DECREF( tmp_with_1__source );
    tmp_with_1__source = NULL;

    CHECK_OBJECT( (PyObject *)tmp_with_1__enter );
    Py_DECREF( tmp_with_1__enter );
    tmp_with_1__enter = NULL;

    CHECK_OBJECT( (PyObject *)tmp_with_1__exit );
    Py_DECREF( tmp_with_1__exit );
    tmp_with_1__exit = NULL;

    {
        PyObject *tmp_called_name_16;
        PyObject *tmp_source_name_60;
        PyObject *tmp_call_result_17;
        PyObject *tmp_kw_name_1;
        PyObject *tmp_dict_key_1;
        PyObject *tmp_dict_value_1;
        PyObject *tmp_called_instance_12;
        PyObject *tmp_args_element_name_26;
        CHECK_OBJECT( par_self );
        tmp_source_name_60 = par_self;
        tmp_called_name_16 = LOOKUP_ATTRIBUTE( tmp_source_name_60, const_str_plain_wait );
        if ( tmp_called_name_16 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 1707;
            type_description_1 = "oooooooooooooo";
            goto frame_exception_exit_1;
        }
        tmp_dict_key_1 = const_str_plain_timeout;
        CHECK_OBJECT( par_self );
        tmp_called_instance_12 = par_self;
        CHECK_OBJECT( par_endtime );
        tmp_args_element_name_26 = par_endtime;
        frame_b3fe41aa9e45c0ee93ce9ccbee67af61->m_frame.f_lineno = 1707;
        {
            PyObject *call_args[] = { tmp_args_element_name_26 };
            tmp_dict_value_1 = CALL_METHOD_WITH_ARGS1( tmp_called_instance_12, const_str_plain__remaining_time, call_args );
        }

        if ( tmp_dict_value_1 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
            Py_DECREF( tmp_called_name_16 );

            exception_lineno = 1707;
            type_description_1 = "oooooooooooooo";
            goto frame_exception_exit_1;
        }
        tmp_kw_name_1 = _PyDict_NewPresized( 1 );
        tmp_res = PyDict_SetItem( tmp_kw_name_1, tmp_dict_key_1, tmp_dict_value_1 );
        Py_DECREF( tmp_dict_value_1 );
        assert( !(tmp_res != 0) );
        frame_b3fe41aa9e45c0ee93ce9ccbee67af61->m_frame.f_lineno = 1707;
        tmp_call_result_17 = CALL_FUNCTION_WITH_KEYARGS( tmp_called_name_16, tmp_kw_name_1 );
        Py_DECREF( tmp_called_name_16 );
        Py_DECREF( tmp_kw_name_1 );
        if ( tmp_call_result_17 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 1707;
            type_description_1 = "oooooooooooooo";
            goto frame_exception_exit_1;
        }
        Py_DECREF( tmp_call_result_17 );
    }
    {
        nuitka_bool tmp_condition_result_26;
        PyObject *tmp_compexpr_left_13;
        PyObject *tmp_compexpr_right_13;
        CHECK_OBJECT( var_stdout );
        tmp_compexpr_left_13 = var_stdout;
        tmp_compexpr_right_13 = Py_None;
        tmp_condition_result_26 = ( tmp_compexpr_left_13 != tmp_compexpr_right_13 ) ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
        if ( tmp_condition_result_26 == NUITKA_BOOL_TRUE )
        {
            goto branch_yes_26;
        }
        else
        {
            goto branch_no_26;
        }
        branch_yes_26:;
        {
            PyObject *tmp_assign_source_27;
            PyObject *tmp_called_instance_13;
            PyObject *tmp_args_element_name_27;
            tmp_called_instance_13 = const_bytes_empty;
            CHECK_OBJECT( var_stdout );
            tmp_args_element_name_27 = var_stdout;
            frame_b3fe41aa9e45c0ee93ce9ccbee67af61->m_frame.f_lineno = 1711;
            {
                PyObject *call_args[] = { tmp_args_element_name_27 };
                tmp_assign_source_27 = CALL_METHOD_WITH_ARGS1( tmp_called_instance_13, const_str_plain_join, call_args );
            }

            if ( tmp_assign_source_27 == NULL )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 1711;
                type_description_1 = "oooooooooooooo";
                goto frame_exception_exit_1;
            }
            {
                PyObject *old = var_stdout;
                assert( old != NULL );
                var_stdout = tmp_assign_source_27;
                Py_DECREF( old );
            }

        }
        branch_no_26:;
    }
    {
        nuitka_bool tmp_condition_result_27;
        PyObject *tmp_compexpr_left_14;
        PyObject *tmp_compexpr_right_14;
        CHECK_OBJECT( var_stderr );
        tmp_compexpr_left_14 = var_stderr;
        tmp_compexpr_right_14 = Py_None;
        tmp_condition_result_27 = ( tmp_compexpr_left_14 != tmp_compexpr_right_14 ) ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
        if ( tmp_condition_result_27 == NUITKA_BOOL_TRUE )
        {
            goto branch_yes_27;
        }
        else
        {
            goto branch_no_27;
        }
        branch_yes_27:;
        {
            PyObject *tmp_assign_source_28;
            PyObject *tmp_called_instance_14;
            PyObject *tmp_args_element_name_28;
            tmp_called_instance_14 = const_bytes_empty;
            CHECK_OBJECT( var_stderr );
            tmp_args_element_name_28 = var_stderr;
            frame_b3fe41aa9e45c0ee93ce9ccbee67af61->m_frame.f_lineno = 1713;
            {
                PyObject *call_args[] = { tmp_args_element_name_28 };
                tmp_assign_source_28 = CALL_METHOD_WITH_ARGS1( tmp_called_instance_14, const_str_plain_join, call_args );
            }

            if ( tmp_assign_source_28 == NULL )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 1713;
                type_description_1 = "oooooooooooooo";
                goto frame_exception_exit_1;
            }
            {
                PyObject *old = var_stderr;
                assert( old != NULL );
                var_stderr = tmp_assign_source_28;
                Py_DECREF( old );
            }

        }
        branch_no_27:;
    }
    {
        nuitka_bool tmp_condition_result_28;
        PyObject *tmp_source_name_61;
        PyObject *tmp_attribute_value_10;
        int tmp_truth_name_12;
        CHECK_OBJECT( par_self );
        tmp_source_name_61 = par_self;
        tmp_attribute_value_10 = LOOKUP_ATTRIBUTE( tmp_source_name_61, const_str_plain_text_mode );
        if ( tmp_attribute_value_10 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 1717;
            type_description_1 = "oooooooooooooo";
            goto frame_exception_exit_1;
        }
        tmp_truth_name_12 = CHECK_IF_TRUE( tmp_attribute_value_10 );
        if ( tmp_truth_name_12 == -1 )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
            Py_DECREF( tmp_attribute_value_10 );

            exception_lineno = 1717;
            type_description_1 = "oooooooooooooo";
            goto frame_exception_exit_1;
        }
        tmp_condition_result_28 = tmp_truth_name_12 == 1 ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
        Py_DECREF( tmp_attribute_value_10 );
        if ( tmp_condition_result_28 == NUITKA_BOOL_TRUE )
        {
            goto branch_yes_28;
        }
        else
        {
            goto branch_no_28;
        }
        branch_yes_28:;
        {
            nuitka_bool tmp_condition_result_29;
            PyObject *tmp_compexpr_left_15;
            PyObject *tmp_compexpr_right_15;
            if ( var_stdout == NULL )
            {

                exception_type = PyExc_UnboundLocalError;
                Py_INCREF( exception_type );
                exception_value = PyUnicode_FromFormat( "local variable '%s' referenced before assignment", "stdout" );
                exception_tb = NULL;
                NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
                CHAIN_EXCEPTION( exception_value );

                exception_lineno = 1718;
                type_description_1 = "oooooooooooooo";
                goto frame_exception_exit_1;
            }

            tmp_compexpr_left_15 = var_stdout;
            tmp_compexpr_right_15 = Py_None;
            tmp_condition_result_29 = ( tmp_compexpr_left_15 != tmp_compexpr_right_15 ) ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
            if ( tmp_condition_result_29 == NUITKA_BOOL_TRUE )
            {
                goto branch_yes_29;
            }
            else
            {
                goto branch_no_29;
            }
            branch_yes_29:;
            {
                PyObject *tmp_assign_source_29;
                PyObject *tmp_called_name_17;
                PyObject *tmp_source_name_62;
                PyObject *tmp_args_element_name_29;
                PyObject *tmp_args_element_name_30;
                PyObject *tmp_source_name_63;
                PyObject *tmp_source_name_64;
                PyObject *tmp_args_element_name_31;
                PyObject *tmp_source_name_65;
                PyObject *tmp_source_name_66;
                CHECK_OBJECT( par_self );
                tmp_source_name_62 = par_self;
                tmp_called_name_17 = LOOKUP_ATTRIBUTE( tmp_source_name_62, const_str_plain__translate_newlines );
                if ( tmp_called_name_17 == NULL )
                {
                    assert( ERROR_OCCURRED() );

                    FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                    exception_lineno = 1719;
                    type_description_1 = "oooooooooooooo";
                    goto frame_exception_exit_1;
                }
                if ( var_stdout == NULL )
                {
                    Py_DECREF( tmp_called_name_17 );
                    exception_type = PyExc_UnboundLocalError;
                    Py_INCREF( exception_type );
                    exception_value = PyUnicode_FromFormat( "local variable '%s' referenced before assignment", "stdout" );
                    exception_tb = NULL;
                    NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
                    CHAIN_EXCEPTION( exception_value );

                    exception_lineno = 1719;
                    type_description_1 = "oooooooooooooo";
                    goto frame_exception_exit_1;
                }

                tmp_args_element_name_29 = var_stdout;
                CHECK_OBJECT( par_self );
                tmp_source_name_64 = par_self;
                tmp_source_name_63 = LOOKUP_ATTRIBUTE( tmp_source_name_64, const_str_plain_stdout );
                if ( tmp_source_name_63 == NULL )
                {
                    assert( ERROR_OCCURRED() );

                    FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
                    Py_DECREF( tmp_called_name_17 );

                    exception_lineno = 1720;
                    type_description_1 = "oooooooooooooo";
                    goto frame_exception_exit_1;
                }
                tmp_args_element_name_30 = LOOKUP_ATTRIBUTE( tmp_source_name_63, const_str_plain_encoding );
                Py_DECREF( tmp_source_name_63 );
                if ( tmp_args_element_name_30 == NULL )
                {
                    assert( ERROR_OCCURRED() );

                    FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
                    Py_DECREF( tmp_called_name_17 );

                    exception_lineno = 1720;
                    type_description_1 = "oooooooooooooo";
                    goto frame_exception_exit_1;
                }
                CHECK_OBJECT( par_self );
                tmp_source_name_66 = par_self;
                tmp_source_name_65 = LOOKUP_ATTRIBUTE( tmp_source_name_66, const_str_plain_stdout );
                if ( tmp_source_name_65 == NULL )
                {
                    assert( ERROR_OCCURRED() );

                    FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
                    Py_DECREF( tmp_called_name_17 );
                    Py_DECREF( tmp_args_element_name_30 );

                    exception_lineno = 1721;
                    type_description_1 = "oooooooooooooo";
                    goto frame_exception_exit_1;
                }
                tmp_args_element_name_31 = LOOKUP_ATTRIBUTE( tmp_source_name_65, const_str_plain_errors );
                Py_DECREF( tmp_source_name_65 );
                if ( tmp_args_element_name_31 == NULL )
                {
                    assert( ERROR_OCCURRED() );

                    FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
                    Py_DECREF( tmp_called_name_17 );
                    Py_DECREF( tmp_args_element_name_30 );

                    exception_lineno = 1721;
                    type_description_1 = "oooooooooooooo";
                    goto frame_exception_exit_1;
                }
                frame_b3fe41aa9e45c0ee93ce9ccbee67af61->m_frame.f_lineno = 1719;
                {
                    PyObject *call_args[] = { tmp_args_element_name_29, tmp_args_element_name_30, tmp_args_element_name_31 };
                    tmp_assign_source_29 = CALL_FUNCTION_WITH_ARGS3( tmp_called_name_17, call_args );
                }

                Py_DECREF( tmp_called_name_17 );
                Py_DECREF( tmp_args_element_name_30 );
                Py_DECREF( tmp_args_element_name_31 );
                if ( tmp_assign_source_29 == NULL )
                {
                    assert( ERROR_OCCURRED() );

                    FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                    exception_lineno = 1719;
                    type_description_1 = "oooooooooooooo";
                    goto frame_exception_exit_1;
                }
                {
                    PyObject *old = var_stdout;
                    var_stdout = tmp_assign_source_29;
                    Py_XDECREF( old );
                }

            }
            branch_no_29:;
        }
        {
            nuitka_bool tmp_condition_result_30;
            PyObject *tmp_compexpr_left_16;
            PyObject *tmp_compexpr_right_16;
            if ( var_stderr == NULL )
            {

                exception_type = PyExc_UnboundLocalError;
                Py_INCREF( exception_type );
                exception_value = PyUnicode_FromFormat( "local variable '%s' referenced before assignment", "stderr" );
                exception_tb = NULL;
                NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
                CHAIN_EXCEPTION( exception_value );

                exception_lineno = 1722;
                type_description_1 = "oooooooooooooo";
                goto frame_exception_exit_1;
            }

            tmp_compexpr_left_16 = var_stderr;
            tmp_compexpr_right_16 = Py_None;
            tmp_condition_result_30 = ( tmp_compexpr_left_16 != tmp_compexpr_right_16 ) ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
            if ( tmp_condition_result_30 == NUITKA_BOOL_TRUE )
            {
                goto branch_yes_30;
            }
            else
            {
                goto branch_no_30;
            }
            branch_yes_30:;
            {
                PyObject *tmp_assign_source_30;
                PyObject *tmp_called_name_18;
                PyObject *tmp_source_name_67;
                PyObject *tmp_args_element_name_32;
                PyObject *tmp_args_element_name_33;
                PyObject *tmp_source_name_68;
                PyObject *tmp_source_name_69;
                PyObject *tmp_args_element_name_34;
                PyObject *tmp_source_name_70;
                PyObject *tmp_source_name_71;
                CHECK_OBJECT( par_self );
                tmp_source_name_67 = par_self;
                tmp_called_name_18 = LOOKUP_ATTRIBUTE( tmp_source_name_67, const_str_plain__translate_newlines );
                if ( tmp_called_name_18 == NULL )
                {
                    assert( ERROR_OCCURRED() );

                    FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                    exception_lineno = 1723;
                    type_description_1 = "oooooooooooooo";
                    goto frame_exception_exit_1;
                }
                if ( var_stderr == NULL )
                {
                    Py_DECREF( tmp_called_name_18 );
                    exception_type = PyExc_UnboundLocalError;
                    Py_INCREF( exception_type );
                    exception_value = PyUnicode_FromFormat( "local variable '%s' referenced before assignment", "stderr" );
                    exception_tb = NULL;
                    NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
                    CHAIN_EXCEPTION( exception_value );

                    exception_lineno = 1723;
                    type_description_1 = "oooooooooooooo";
                    goto frame_exception_exit_1;
                }

                tmp_args_element_name_32 = var_stderr;
                CHECK_OBJECT( par_self );
                tmp_source_name_69 = par_self;
                tmp_source_name_68 = LOOKUP_ATTRIBUTE( tmp_source_name_69, const_str_plain_stderr );
                if ( tmp_source_name_68 == NULL )
                {
                    assert( ERROR_OCCURRED() );

                    FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
                    Py_DECREF( tmp_called_name_18 );

                    exception_lineno = 1724;
                    type_description_1 = "oooooooooooooo";
                    goto frame_exception_exit_1;
                }
                tmp_args_element_name_33 = LOOKUP_ATTRIBUTE( tmp_source_name_68, const_str_plain_encoding );
                Py_DECREF( tmp_source_name_68 );
                if ( tmp_args_element_name_33 == NULL )
                {
                    assert( ERROR_OCCURRED() );

                    FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
                    Py_DECREF( tmp_called_name_18 );

                    exception_lineno = 1724;
                    type_description_1 = "oooooooooooooo";
                    goto frame_exception_exit_1;
                }
                CHECK_OBJECT( par_self );
                tmp_source_name_71 = par_self;
                tmp_source_name_70 = LOOKUP_ATTRIBUTE( tmp_source_name_71, const_str_plain_stderr );
                if ( tmp_source_name_70 == NULL )
                {
                    assert( ERROR_OCCURRED() );

                    FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
                    Py_DECREF( tmp_called_name_18 );
                    Py_DECREF( tmp_args_element_name_33 );

                    exception_lineno = 1725;
                    type_description_1 = "oooooooooooooo";
                    goto frame_exception_exit_1;
                }
                tmp_args_element_name_34 = LOOKUP_ATTRIBUTE( tmp_source_name_70, const_str_plain_errors );
                Py_DECREF( tmp_source_name_70 );
                if ( tmp_args_element_name_34 == NULL )
                {
                    assert( ERROR_OCCURRED() );

                    FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
                    Py_DECREF( tmp_called_name_18 );
                    Py_DECREF( tmp_args_element_name_33 );

                    exception_lineno = 1725;
                    type_description_1 = "oooooooooooooo";
                    goto frame_exception_exit_1;
                }
                frame_b3fe41aa9e45c0ee93ce9ccbee67af61->m_frame.f_lineno = 1723;
                {
                    PyObject *call_args[] = { tmp_args_element_name_32, tmp_args_element_name_33, tmp_args_element_name_34 };
                    tmp_assign_source_30 = CALL_FUNCTION_WITH_ARGS3( tmp_called_name_18, call_args );
                }

                Py_DECREF( tmp_called_name_18 );
                Py_DECREF( tmp_args_element_name_33 );
                Py_DECREF( tmp_args_element_name_34 );
                if ( tmp_assign_source_30 == NULL )
                {
                    assert( ERROR_OCCURRED() );

                    FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                    exception_lineno = 1723;
                    type_description_1 = "oooooooooooooo";
                    goto frame_exception_exit_1;
                }
                {
                    PyObject *old = var_stderr;
                    var_stderr = tmp_assign_source_30;
                    Py_XDECREF( old );
                }

            }
            branch_no_30:;
        }
        branch_no_28:;
    }
    {
        PyObject *tmp_tuple_element_2;
        if ( var_stdout == NULL )
        {

            exception_type = PyExc_UnboundLocalError;
            Py_INCREF( exception_type );
            exception_value = PyUnicode_FromFormat( "local variable '%s' referenced before assignment", "stdout" );
            exception_tb = NULL;
            NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
            CHAIN_EXCEPTION( exception_value );

            exception_lineno = 1727;
            type_description_1 = "oooooooooooooo";
            goto frame_exception_exit_1;
        }

        tmp_tuple_element_2 = var_stdout;
        tmp_return_value = PyTuple_New( 2 );
        Py_INCREF( tmp_tuple_element_2 );
        PyTuple_SET_ITEM( tmp_return_value, 0, tmp_tuple_element_2 );
        if ( var_stderr == NULL )
        {
            Py_DECREF( tmp_return_value );
            exception_type = PyExc_UnboundLocalError;
            Py_INCREF( exception_type );
            exception_value = PyUnicode_FromFormat( "local variable '%s' referenced before assignment", "stderr" );
            exception_tb = NULL;
            NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
            CHAIN_EXCEPTION( exception_value );

            exception_lineno = 1727;
            type_description_1 = "oooooooooooooo";
            goto frame_exception_exit_1;
        }

        tmp_tuple_element_2 = var_stderr;
        Py_INCREF( tmp_tuple_element_2 );
        PyTuple_SET_ITEM( tmp_return_value, 1, tmp_tuple_element_2 );
        goto frame_return_exit_1;
    }

#if 0
    RESTORE_FRAME_EXCEPTION( frame_b3fe41aa9e45c0ee93ce9ccbee67af61 );
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto frame_no_exception_1;

    frame_return_exit_1:;
#if 0
    RESTORE_FRAME_EXCEPTION( frame_b3fe41aa9e45c0ee93ce9ccbee67af61 );
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto try_return_handler_1;

    frame_exception_exit_1:;

#if 0
    RESTORE_FRAME_EXCEPTION( frame_b3fe41aa9e45c0ee93ce9ccbee67af61 );
#endif

    if ( exception_tb == NULL )
    {
        exception_tb = MAKE_TRACEBACK( frame_b3fe41aa9e45c0ee93ce9ccbee67af61, exception_lineno );
    }
    else if ( exception_tb->tb_frame != &frame_b3fe41aa9e45c0ee93ce9ccbee67af61->m_frame )
    {
        exception_tb = ADD_TRACEBACK( exception_tb, frame_b3fe41aa9e45c0ee93ce9ccbee67af61, exception_lineno );
    }

    // Attachs locals to frame if any.
    Nuitka_Frame_AttachLocals(
        (struct Nuitka_FrameObject *)frame_b3fe41aa9e45c0ee93ce9ccbee67af61,
        type_description_1,
        par_self,
        par_input,
        par_endtime,
        par_orig_timeout,
        var_stdout,
        var_stderr,
        var_input_view,
        var_selector,
        var_timeout,
        var_ready,
        var_key,
        var_events,
        var_chunk,
        var_data
    );


    // Release cached frame.
    if ( frame_b3fe41aa9e45c0ee93ce9ccbee67af61 == cache_frame_b3fe41aa9e45c0ee93ce9ccbee67af61 )
    {
        Py_DECREF( frame_b3fe41aa9e45c0ee93ce9ccbee67af61 );
    }
    cache_frame_b3fe41aa9e45c0ee93ce9ccbee67af61 = NULL;

    assertFrameObject( frame_b3fe41aa9e45c0ee93ce9ccbee67af61 );

    // Put the previous frame back on top.
    popFrameStack();

    // Return the error.
    goto try_except_handler_1;

    frame_no_exception_1:;
    // tried codes exits in all cases
    NUITKA_CANNOT_GET_HERE( subprocess$$$function_57__communicate );
    return NULL;
    // Return handler code:
    try_return_handler_1:;
    CHECK_OBJECT( (PyObject *)par_self );
    Py_DECREF( par_self );
    par_self = NULL;

    CHECK_OBJECT( (PyObject *)par_input );
    Py_DECREF( par_input );
    par_input = NULL;

    CHECK_OBJECT( (PyObject *)par_endtime );
    Py_DECREF( par_endtime );
    par_endtime = NULL;

    CHECK_OBJECT( (PyObject *)par_orig_timeout );
    Py_DECREF( par_orig_timeout );
    par_orig_timeout = NULL;

    Py_XDECREF( var_stdout );
    var_stdout = NULL;

    Py_XDECREF( var_stderr );
    var_stderr = NULL;

    Py_XDECREF( var_input_view );
    var_input_view = NULL;

    CHECK_OBJECT( (PyObject *)var_selector );
    Py_DECREF( var_selector );
    var_selector = NULL;

    Py_XDECREF( var_timeout );
    var_timeout = NULL;

    Py_XDECREF( var_ready );
    var_ready = NULL;

    Py_XDECREF( var_key );
    var_key = NULL;

    Py_XDECREF( var_events );
    var_events = NULL;

    Py_XDECREF( var_chunk );
    var_chunk = NULL;

    Py_XDECREF( var_data );
    var_data = NULL;

    goto function_return_exit;
    // Exception handler code:
    try_except_handler_1:;
    exception_keeper_type_17 = exception_type;
    exception_keeper_value_17 = exception_value;
    exception_keeper_tb_17 = exception_tb;
    exception_keeper_lineno_17 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    CHECK_OBJECT( (PyObject *)par_self );
    Py_DECREF( par_self );
    par_self = NULL;

    CHECK_OBJECT( (PyObject *)par_input );
    Py_DECREF( par_input );
    par_input = NULL;

    CHECK_OBJECT( (PyObject *)par_endtime );
    Py_DECREF( par_endtime );
    par_endtime = NULL;

    CHECK_OBJECT( (PyObject *)par_orig_timeout );
    Py_DECREF( par_orig_timeout );
    par_orig_timeout = NULL;

    Py_XDECREF( var_stdout );
    var_stdout = NULL;

    Py_XDECREF( var_stderr );
    var_stderr = NULL;

    Py_XDECREF( var_input_view );
    var_input_view = NULL;

    Py_XDECREF( var_selector );
    var_selector = NULL;

    Py_XDECREF( var_timeout );
    var_timeout = NULL;

    Py_XDECREF( var_ready );
    var_ready = NULL;

    Py_XDECREF( var_key );
    var_key = NULL;

    Py_XDECREF( var_events );
    var_events = NULL;

    Py_XDECREF( var_chunk );
    var_chunk = NULL;

    Py_XDECREF( var_data );
    var_data = NULL;

    // Re-raise.
    exception_type = exception_keeper_type_17;
    exception_value = exception_keeper_value_17;
    exception_tb = exception_keeper_tb_17;
    exception_lineno = exception_keeper_lineno_17;

    goto function_exception_exit;
    // End of try:

    // Return statement must have exited already.
    NUITKA_CANNOT_GET_HERE( subprocess$$$function_57__communicate );
    return NULL;

function_exception_exit:
    assert( exception_type );
    RESTORE_ERROR_OCCURRED( exception_type, exception_value, exception_tb );

    return NULL;

function_return_exit:
   // Function cleanup code if any.


   // Actual function exit with return value, making sure we did not make
   // the error status worse despite non-NULL return.
   CHECK_OBJECT( tmp_return_value );
   assert( had_error || !ERROR_OCCURRED() );
   return tmp_return_value;
}


static PyObject *impl_subprocess$$$function_58__save_input( struct Nuitka_FunctionObject const *self, PyObject **python_pars )
{
    // Preserve error status for checks
#ifndef __NUITKA_NO_ASSERT__
    NUITKA_MAY_BE_UNUSED bool had_error = ERROR_OCCURRED();
#endif

    // Local variable declarations.
    PyObject *par_self = python_pars[ 0 ];
    PyObject *par_input = python_pars[ 1 ];
    struct Nuitka_FrameObject *frame_d661584a44e154f3de3b31a0ecaf959b;
    NUITKA_MAY_BE_UNUSED char const *type_description_1 = NULL;
    PyObject *exception_type = NULL;
    PyObject *exception_value = NULL;
    PyTracebackObject *exception_tb = NULL;
    NUITKA_MAY_BE_UNUSED int exception_lineno = 0;
    bool tmp_result;
    static struct Nuitka_FrameObject *cache_frame_d661584a44e154f3de3b31a0ecaf959b = NULL;
    PyObject *tmp_return_value = NULL;
    PyObject *exception_keeper_type_1;
    PyObject *exception_keeper_value_1;
    PyTracebackObject *exception_keeper_tb_1;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_1;

    // Actual function body.
    // Tried code:
    MAKE_OR_REUSE_FRAME( cache_frame_d661584a44e154f3de3b31a0ecaf959b, codeobj_d661584a44e154f3de3b31a0ecaf959b, module_subprocess, sizeof(void *)+sizeof(void *) );
    frame_d661584a44e154f3de3b31a0ecaf959b = cache_frame_d661584a44e154f3de3b31a0ecaf959b;

    // Push the new frame as the currently active one.
    pushFrameStack( frame_d661584a44e154f3de3b31a0ecaf959b );

    // Mark the frame object as in use, ref count 1 will be up for reuse.
    assert( Py_REFCNT( frame_d661584a44e154f3de3b31a0ecaf959b ) == 2 ); // Frame stack

    // Framed code:
    {
        nuitka_bool tmp_condition_result_1;
        int tmp_and_left_truth_1;
        nuitka_bool tmp_and_left_value_1;
        nuitka_bool tmp_and_right_value_1;
        PyObject *tmp_source_name_1;
        PyObject *tmp_attribute_value_1;
        int tmp_truth_name_1;
        PyObject *tmp_compexpr_left_1;
        PyObject *tmp_compexpr_right_1;
        PyObject *tmp_source_name_2;
        CHECK_OBJECT( par_self );
        tmp_source_name_1 = par_self;
        tmp_attribute_value_1 = LOOKUP_ATTRIBUTE( tmp_source_name_1, const_str_plain_stdin );
        if ( tmp_attribute_value_1 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 1734;
            type_description_1 = "oo";
            goto frame_exception_exit_1;
        }
        tmp_truth_name_1 = CHECK_IF_TRUE( tmp_attribute_value_1 );
        if ( tmp_truth_name_1 == -1 )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
            Py_DECREF( tmp_attribute_value_1 );

            exception_lineno = 1734;
            type_description_1 = "oo";
            goto frame_exception_exit_1;
        }
        tmp_and_left_value_1 = tmp_truth_name_1 == 1 ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
        Py_DECREF( tmp_attribute_value_1 );
        tmp_and_left_truth_1 = tmp_and_left_value_1 == NUITKA_BOOL_TRUE ? 1 : 0;
        if ( tmp_and_left_truth_1 == 1 )
        {
            goto and_right_1;
        }
        else
        {
            goto and_left_1;
        }
        and_right_1:;
        CHECK_OBJECT( par_self );
        tmp_source_name_2 = par_self;
        tmp_compexpr_left_1 = LOOKUP_ATTRIBUTE( tmp_source_name_2, const_str_plain__input );
        if ( tmp_compexpr_left_1 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 1734;
            type_description_1 = "oo";
            goto frame_exception_exit_1;
        }
        tmp_compexpr_right_1 = Py_None;
        tmp_and_right_value_1 = ( tmp_compexpr_left_1 == tmp_compexpr_right_1 ) ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
        Py_DECREF( tmp_compexpr_left_1 );
        tmp_condition_result_1 = tmp_and_right_value_1;
        goto and_end_1;
        and_left_1:;
        tmp_condition_result_1 = tmp_and_left_value_1;
        and_end_1:;
        if ( tmp_condition_result_1 == NUITKA_BOOL_TRUE )
        {
            goto branch_yes_1;
        }
        else
        {
            goto branch_no_1;
        }
        branch_yes_1:;
        {
            PyObject *tmp_assattr_name_1;
            PyObject *tmp_assattr_target_1;
            tmp_assattr_name_1 = const_int_0;
            CHECK_OBJECT( par_self );
            tmp_assattr_target_1 = par_self;
            tmp_result = SET_ATTRIBUTE( tmp_assattr_target_1, const_str_plain__input_offset, tmp_assattr_name_1 );
            if ( tmp_result == false )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 1735;
                type_description_1 = "oo";
                goto frame_exception_exit_1;
            }
        }
        {
            PyObject *tmp_assattr_name_2;
            PyObject *tmp_assattr_target_2;
            CHECK_OBJECT( par_input );
            tmp_assattr_name_2 = par_input;
            CHECK_OBJECT( par_self );
            tmp_assattr_target_2 = par_self;
            tmp_result = SET_ATTRIBUTE( tmp_assattr_target_2, const_str_plain__input, tmp_assattr_name_2 );
            if ( tmp_result == false )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 1736;
                type_description_1 = "oo";
                goto frame_exception_exit_1;
            }
        }
        {
            nuitka_bool tmp_condition_result_2;
            int tmp_and_left_truth_2;
            nuitka_bool tmp_and_left_value_2;
            nuitka_bool tmp_and_right_value_2;
            PyObject *tmp_compexpr_left_2;
            PyObject *tmp_compexpr_right_2;
            PyObject *tmp_source_name_3;
            PyObject *tmp_attribute_value_2;
            int tmp_truth_name_2;
            CHECK_OBJECT( par_input );
            tmp_compexpr_left_2 = par_input;
            tmp_compexpr_right_2 = Py_None;
            tmp_and_left_value_2 = ( tmp_compexpr_left_2 != tmp_compexpr_right_2 ) ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
            tmp_and_left_truth_2 = tmp_and_left_value_2 == NUITKA_BOOL_TRUE ? 1 : 0;
            if ( tmp_and_left_truth_2 == 1 )
            {
                goto and_right_2;
            }
            else
            {
                goto and_left_2;
            }
            and_right_2:;
            CHECK_OBJECT( par_self );
            tmp_source_name_3 = par_self;
            tmp_attribute_value_2 = LOOKUP_ATTRIBUTE( tmp_source_name_3, const_str_plain_text_mode );
            if ( tmp_attribute_value_2 == NULL )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 1737;
                type_description_1 = "oo";
                goto frame_exception_exit_1;
            }
            tmp_truth_name_2 = CHECK_IF_TRUE( tmp_attribute_value_2 );
            if ( tmp_truth_name_2 == -1 )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
                Py_DECREF( tmp_attribute_value_2 );

                exception_lineno = 1737;
                type_description_1 = "oo";
                goto frame_exception_exit_1;
            }
            tmp_and_right_value_2 = tmp_truth_name_2 == 1 ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
            Py_DECREF( tmp_attribute_value_2 );
            tmp_condition_result_2 = tmp_and_right_value_2;
            goto and_end_2;
            and_left_2:;
            tmp_condition_result_2 = tmp_and_left_value_2;
            and_end_2:;
            if ( tmp_condition_result_2 == NUITKA_BOOL_TRUE )
            {
                goto branch_yes_2;
            }
            else
            {
                goto branch_no_2;
            }
            branch_yes_2:;
            {
                PyObject *tmp_assattr_name_3;
                PyObject *tmp_called_name_1;
                PyObject *tmp_source_name_4;
                PyObject *tmp_source_name_5;
                PyObject *tmp_args_element_name_1;
                PyObject *tmp_source_name_6;
                PyObject *tmp_source_name_7;
                PyObject *tmp_args_element_name_2;
                PyObject *tmp_source_name_8;
                PyObject *tmp_source_name_9;
                PyObject *tmp_assattr_target_3;
                CHECK_OBJECT( par_self );
                tmp_source_name_5 = par_self;
                tmp_source_name_4 = LOOKUP_ATTRIBUTE( tmp_source_name_5, const_str_plain__input );
                if ( tmp_source_name_4 == NULL )
                {
                    assert( ERROR_OCCURRED() );

                    FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                    exception_lineno = 1738;
                    type_description_1 = "oo";
                    goto frame_exception_exit_1;
                }
                tmp_called_name_1 = LOOKUP_ATTRIBUTE( tmp_source_name_4, const_str_plain_encode );
                Py_DECREF( tmp_source_name_4 );
                if ( tmp_called_name_1 == NULL )
                {
                    assert( ERROR_OCCURRED() );

                    FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                    exception_lineno = 1738;
                    type_description_1 = "oo";
                    goto frame_exception_exit_1;
                }
                CHECK_OBJECT( par_self );
                tmp_source_name_7 = par_self;
                tmp_source_name_6 = LOOKUP_ATTRIBUTE( tmp_source_name_7, const_str_plain_stdin );
                if ( tmp_source_name_6 == NULL )
                {
                    assert( ERROR_OCCURRED() );

                    FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
                    Py_DECREF( tmp_called_name_1 );

                    exception_lineno = 1738;
                    type_description_1 = "oo";
                    goto frame_exception_exit_1;
                }
                tmp_args_element_name_1 = LOOKUP_ATTRIBUTE( tmp_source_name_6, const_str_plain_encoding );
                Py_DECREF( tmp_source_name_6 );
                if ( tmp_args_element_name_1 == NULL )
                {
                    assert( ERROR_OCCURRED() );

                    FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
                    Py_DECREF( tmp_called_name_1 );

                    exception_lineno = 1738;
                    type_description_1 = "oo";
                    goto frame_exception_exit_1;
                }
                CHECK_OBJECT( par_self );
                tmp_source_name_9 = par_self;
                tmp_source_name_8 = LOOKUP_ATTRIBUTE( tmp_source_name_9, const_str_plain_stdin );
                if ( tmp_source_name_8 == NULL )
                {
                    assert( ERROR_OCCURRED() );

                    FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
                    Py_DECREF( tmp_called_name_1 );
                    Py_DECREF( tmp_args_element_name_1 );

                    exception_lineno = 1739;
                    type_description_1 = "oo";
                    goto frame_exception_exit_1;
                }
                tmp_args_element_name_2 = LOOKUP_ATTRIBUTE( tmp_source_name_8, const_str_plain_errors );
                Py_DECREF( tmp_source_name_8 );
                if ( tmp_args_element_name_2 == NULL )
                {
                    assert( ERROR_OCCURRED() );

                    FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
                    Py_DECREF( tmp_called_name_1 );
                    Py_DECREF( tmp_args_element_name_1 );

                    exception_lineno = 1739;
                    type_description_1 = "oo";
                    goto frame_exception_exit_1;
                }
                frame_d661584a44e154f3de3b31a0ecaf959b->m_frame.f_lineno = 1738;
                {
                    PyObject *call_args[] = { tmp_args_element_name_1, tmp_args_element_name_2 };
                    tmp_assattr_name_3 = CALL_FUNCTION_WITH_ARGS2( tmp_called_name_1, call_args );
                }

                Py_DECREF( tmp_called_name_1 );
                Py_DECREF( tmp_args_element_name_1 );
                Py_DECREF( tmp_args_element_name_2 );
                if ( tmp_assattr_name_3 == NULL )
                {
                    assert( ERROR_OCCURRED() );

                    FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                    exception_lineno = 1738;
                    type_description_1 = "oo";
                    goto frame_exception_exit_1;
                }
                CHECK_OBJECT( par_self );
                tmp_assattr_target_3 = par_self;
                tmp_result = SET_ATTRIBUTE( tmp_assattr_target_3, const_str_plain__input, tmp_assattr_name_3 );
                Py_DECREF( tmp_assattr_name_3 );
                if ( tmp_result == false )
                {
                    assert( ERROR_OCCURRED() );

                    FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                    exception_lineno = 1738;
                    type_description_1 = "oo";
                    goto frame_exception_exit_1;
                }
            }
            branch_no_2:;
        }
        branch_no_1:;
    }

#if 0
    RESTORE_FRAME_EXCEPTION( frame_d661584a44e154f3de3b31a0ecaf959b );
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto frame_no_exception_1;

    frame_exception_exit_1:;

#if 0
    RESTORE_FRAME_EXCEPTION( frame_d661584a44e154f3de3b31a0ecaf959b );
#endif

    if ( exception_tb == NULL )
    {
        exception_tb = MAKE_TRACEBACK( frame_d661584a44e154f3de3b31a0ecaf959b, exception_lineno );
    }
    else if ( exception_tb->tb_frame != &frame_d661584a44e154f3de3b31a0ecaf959b->m_frame )
    {
        exception_tb = ADD_TRACEBACK( exception_tb, frame_d661584a44e154f3de3b31a0ecaf959b, exception_lineno );
    }

    // Attachs locals to frame if any.
    Nuitka_Frame_AttachLocals(
        (struct Nuitka_FrameObject *)frame_d661584a44e154f3de3b31a0ecaf959b,
        type_description_1,
        par_self,
        par_input
    );


    // Release cached frame.
    if ( frame_d661584a44e154f3de3b31a0ecaf959b == cache_frame_d661584a44e154f3de3b31a0ecaf959b )
    {
        Py_DECREF( frame_d661584a44e154f3de3b31a0ecaf959b );
    }
    cache_frame_d661584a44e154f3de3b31a0ecaf959b = NULL;

    assertFrameObject( frame_d661584a44e154f3de3b31a0ecaf959b );

    // Put the previous frame back on top.
    popFrameStack();

    // Return the error.
    goto try_except_handler_1;

    frame_no_exception_1:;
    tmp_return_value = Py_None;
    Py_INCREF( tmp_return_value );
    goto try_return_handler_1;
    // tried codes exits in all cases
    NUITKA_CANNOT_GET_HERE( subprocess$$$function_58__save_input );
    return NULL;
    // Return handler code:
    try_return_handler_1:;
    CHECK_OBJECT( (PyObject *)par_self );
    Py_DECREF( par_self );
    par_self = NULL;

    CHECK_OBJECT( (PyObject *)par_input );
    Py_DECREF( par_input );
    par_input = NULL;

    goto function_return_exit;
    // Exception handler code:
    try_except_handler_1:;
    exception_keeper_type_1 = exception_type;
    exception_keeper_value_1 = exception_value;
    exception_keeper_tb_1 = exception_tb;
    exception_keeper_lineno_1 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    CHECK_OBJECT( (PyObject *)par_self );
    Py_DECREF( par_self );
    par_self = NULL;

    CHECK_OBJECT( (PyObject *)par_input );
    Py_DECREF( par_input );
    par_input = NULL;

    // Re-raise.
    exception_type = exception_keeper_type_1;
    exception_value = exception_keeper_value_1;
    exception_tb = exception_keeper_tb_1;
    exception_lineno = exception_keeper_lineno_1;

    goto function_exception_exit;
    // End of try:

    // Return statement must have exited already.
    NUITKA_CANNOT_GET_HERE( subprocess$$$function_58__save_input );
    return NULL;

function_exception_exit:
    assert( exception_type );
    RESTORE_ERROR_OCCURRED( exception_type, exception_value, exception_tb );

    return NULL;

function_return_exit:
   // Function cleanup code if any.


   // Actual function exit with return value, making sure we did not make
   // the error status worse despite non-NULL return.
   CHECK_OBJECT( tmp_return_value );
   assert( had_error || !ERROR_OCCURRED() );
   return tmp_return_value;
}


static PyObject *impl_subprocess$$$function_59_send_signal( struct Nuitka_FunctionObject const *self, PyObject **python_pars )
{
    // Preserve error status for checks
#ifndef __NUITKA_NO_ASSERT__
    NUITKA_MAY_BE_UNUSED bool had_error = ERROR_OCCURRED();
#endif

    // Local variable declarations.
    PyObject *par_self = python_pars[ 0 ];
    PyObject *par_sig = python_pars[ 1 ];
    struct Nuitka_FrameObject *frame_a1324c786d80e8d4c439d7cf3e3789e5;
    NUITKA_MAY_BE_UNUSED char const *type_description_1 = NULL;
    PyObject *exception_type = NULL;
    PyObject *exception_value = NULL;
    PyTracebackObject *exception_tb = NULL;
    NUITKA_MAY_BE_UNUSED int exception_lineno = 0;
    static struct Nuitka_FrameObject *cache_frame_a1324c786d80e8d4c439d7cf3e3789e5 = NULL;
    PyObject *tmp_return_value = NULL;
    PyObject *exception_keeper_type_1;
    PyObject *exception_keeper_value_1;
    PyTracebackObject *exception_keeper_tb_1;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_1;

    // Actual function body.
    // Tried code:
    MAKE_OR_REUSE_FRAME( cache_frame_a1324c786d80e8d4c439d7cf3e3789e5, codeobj_a1324c786d80e8d4c439d7cf3e3789e5, module_subprocess, sizeof(void *)+sizeof(void *) );
    frame_a1324c786d80e8d4c439d7cf3e3789e5 = cache_frame_a1324c786d80e8d4c439d7cf3e3789e5;

    // Push the new frame as the currently active one.
    pushFrameStack( frame_a1324c786d80e8d4c439d7cf3e3789e5 );

    // Mark the frame object as in use, ref count 1 will be up for reuse.
    assert( Py_REFCNT( frame_a1324c786d80e8d4c439d7cf3e3789e5 ) == 2 ); // Frame stack

    // Framed code:
    {
        nuitka_bool tmp_condition_result_1;
        PyObject *tmp_compexpr_left_1;
        PyObject *tmp_compexpr_right_1;
        PyObject *tmp_source_name_1;
        CHECK_OBJECT( par_self );
        tmp_source_name_1 = par_self;
        tmp_compexpr_left_1 = LOOKUP_ATTRIBUTE( tmp_source_name_1, const_str_plain_returncode );
        if ( tmp_compexpr_left_1 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 1745;
            type_description_1 = "oo";
            goto frame_exception_exit_1;
        }
        tmp_compexpr_right_1 = Py_None;
        tmp_condition_result_1 = ( tmp_compexpr_left_1 == tmp_compexpr_right_1 ) ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
        Py_DECREF( tmp_compexpr_left_1 );
        if ( tmp_condition_result_1 == NUITKA_BOOL_TRUE )
        {
            goto branch_yes_1;
        }
        else
        {
            goto branch_no_1;
        }
        branch_yes_1:;
        {
            PyObject *tmp_called_name_1;
            PyObject *tmp_source_name_2;
            PyObject *tmp_mvar_value_1;
            PyObject *tmp_call_result_1;
            PyObject *tmp_args_element_name_1;
            PyObject *tmp_source_name_3;
            PyObject *tmp_args_element_name_2;
            tmp_mvar_value_1 = GET_STRING_DICT_VALUE( moduledict_subprocess, (Nuitka_StringObject *)const_str_plain_os );

            if (unlikely( tmp_mvar_value_1 == NULL ))
            {
                tmp_mvar_value_1 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_os );
            }

            if ( tmp_mvar_value_1 == NULL )
            {

                exception_type = PyExc_NameError;
                Py_INCREF( exception_type );
                exception_value = PyUnicode_FromFormat( "name '%s' is not defined", "os" );
                exception_tb = NULL;
                NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
                CHAIN_EXCEPTION( exception_value );

                exception_lineno = 1746;
                type_description_1 = "oo";
                goto frame_exception_exit_1;
            }

            tmp_source_name_2 = tmp_mvar_value_1;
            tmp_called_name_1 = LOOKUP_ATTRIBUTE( tmp_source_name_2, const_str_plain_kill );
            if ( tmp_called_name_1 == NULL )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 1746;
                type_description_1 = "oo";
                goto frame_exception_exit_1;
            }
            CHECK_OBJECT( par_self );
            tmp_source_name_3 = par_self;
            tmp_args_element_name_1 = LOOKUP_ATTRIBUTE( tmp_source_name_3, const_str_plain_pid );
            if ( tmp_args_element_name_1 == NULL )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
                Py_DECREF( tmp_called_name_1 );

                exception_lineno = 1746;
                type_description_1 = "oo";
                goto frame_exception_exit_1;
            }
            CHECK_OBJECT( par_sig );
            tmp_args_element_name_2 = par_sig;
            frame_a1324c786d80e8d4c439d7cf3e3789e5->m_frame.f_lineno = 1746;
            {
                PyObject *call_args[] = { tmp_args_element_name_1, tmp_args_element_name_2 };
                tmp_call_result_1 = CALL_FUNCTION_WITH_ARGS2( tmp_called_name_1, call_args );
            }

            Py_DECREF( tmp_called_name_1 );
            Py_DECREF( tmp_args_element_name_1 );
            if ( tmp_call_result_1 == NULL )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 1746;
                type_description_1 = "oo";
                goto frame_exception_exit_1;
            }
            Py_DECREF( tmp_call_result_1 );
        }
        branch_no_1:;
    }

#if 0
    RESTORE_FRAME_EXCEPTION( frame_a1324c786d80e8d4c439d7cf3e3789e5 );
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto frame_no_exception_1;

    frame_exception_exit_1:;

#if 0
    RESTORE_FRAME_EXCEPTION( frame_a1324c786d80e8d4c439d7cf3e3789e5 );
#endif

    if ( exception_tb == NULL )
    {
        exception_tb = MAKE_TRACEBACK( frame_a1324c786d80e8d4c439d7cf3e3789e5, exception_lineno );
    }
    else if ( exception_tb->tb_frame != &frame_a1324c786d80e8d4c439d7cf3e3789e5->m_frame )
    {
        exception_tb = ADD_TRACEBACK( exception_tb, frame_a1324c786d80e8d4c439d7cf3e3789e5, exception_lineno );
    }

    // Attachs locals to frame if any.
    Nuitka_Frame_AttachLocals(
        (struct Nuitka_FrameObject *)frame_a1324c786d80e8d4c439d7cf3e3789e5,
        type_description_1,
        par_self,
        par_sig
    );


    // Release cached frame.
    if ( frame_a1324c786d80e8d4c439d7cf3e3789e5 == cache_frame_a1324c786d80e8d4c439d7cf3e3789e5 )
    {
        Py_DECREF( frame_a1324c786d80e8d4c439d7cf3e3789e5 );
    }
    cache_frame_a1324c786d80e8d4c439d7cf3e3789e5 = NULL;

    assertFrameObject( frame_a1324c786d80e8d4c439d7cf3e3789e5 );

    // Put the previous frame back on top.
    popFrameStack();

    // Return the error.
    goto try_except_handler_1;

    frame_no_exception_1:;
    tmp_return_value = Py_None;
    Py_INCREF( tmp_return_value );
    goto try_return_handler_1;
    // tried codes exits in all cases
    NUITKA_CANNOT_GET_HERE( subprocess$$$function_59_send_signal );
    return NULL;
    // Return handler code:
    try_return_handler_1:;
    CHECK_OBJECT( (PyObject *)par_self );
    Py_DECREF( par_self );
    par_self = NULL;

    CHECK_OBJECT( (PyObject *)par_sig );
    Py_DECREF( par_sig );
    par_sig = NULL;

    goto function_return_exit;
    // Exception handler code:
    try_except_handler_1:;
    exception_keeper_type_1 = exception_type;
    exception_keeper_value_1 = exception_value;
    exception_keeper_tb_1 = exception_tb;
    exception_keeper_lineno_1 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    CHECK_OBJECT( (PyObject *)par_self );
    Py_DECREF( par_self );
    par_self = NULL;

    CHECK_OBJECT( (PyObject *)par_sig );
    Py_DECREF( par_sig );
    par_sig = NULL;

    // Re-raise.
    exception_type = exception_keeper_type_1;
    exception_value = exception_keeper_value_1;
    exception_tb = exception_keeper_tb_1;
    exception_lineno = exception_keeper_lineno_1;

    goto function_exception_exit;
    // End of try:

    // Return statement must have exited already.
    NUITKA_CANNOT_GET_HERE( subprocess$$$function_59_send_signal );
    return NULL;

function_exception_exit:
    assert( exception_type );
    RESTORE_ERROR_OCCURRED( exception_type, exception_value, exception_tb );

    return NULL;

function_return_exit:
   // Function cleanup code if any.


   // Actual function exit with return value, making sure we did not make
   // the error status worse despite non-NULL return.
   CHECK_OBJECT( tmp_return_value );
   assert( had_error || !ERROR_OCCURRED() );
   return tmp_return_value;
}


static PyObject *impl_subprocess$$$function_60_terminate( struct Nuitka_FunctionObject const *self, PyObject **python_pars )
{
    // Preserve error status for checks
#ifndef __NUITKA_NO_ASSERT__
    NUITKA_MAY_BE_UNUSED bool had_error = ERROR_OCCURRED();
#endif

    // Local variable declarations.
    PyObject *par_self = python_pars[ 0 ];
    struct Nuitka_FrameObject *frame_d9743507f2d846e87fae35855b109ba4;
    NUITKA_MAY_BE_UNUSED char const *type_description_1 = NULL;
    PyObject *exception_type = NULL;
    PyObject *exception_value = NULL;
    PyTracebackObject *exception_tb = NULL;
    NUITKA_MAY_BE_UNUSED int exception_lineno = 0;
    static struct Nuitka_FrameObject *cache_frame_d9743507f2d846e87fae35855b109ba4 = NULL;
    PyObject *tmp_return_value = NULL;
    PyObject *exception_keeper_type_1;
    PyObject *exception_keeper_value_1;
    PyTracebackObject *exception_keeper_tb_1;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_1;

    // Actual function body.
    // Tried code:
    MAKE_OR_REUSE_FRAME( cache_frame_d9743507f2d846e87fae35855b109ba4, codeobj_d9743507f2d846e87fae35855b109ba4, module_subprocess, sizeof(void *) );
    frame_d9743507f2d846e87fae35855b109ba4 = cache_frame_d9743507f2d846e87fae35855b109ba4;

    // Push the new frame as the currently active one.
    pushFrameStack( frame_d9743507f2d846e87fae35855b109ba4 );

    // Mark the frame object as in use, ref count 1 will be up for reuse.
    assert( Py_REFCNT( frame_d9743507f2d846e87fae35855b109ba4 ) == 2 ); // Frame stack

    // Framed code:
    {
        PyObject *tmp_called_name_1;
        PyObject *tmp_source_name_1;
        PyObject *tmp_call_result_1;
        PyObject *tmp_args_element_name_1;
        PyObject *tmp_source_name_2;
        PyObject *tmp_mvar_value_1;
        CHECK_OBJECT( par_self );
        tmp_source_name_1 = par_self;
        tmp_called_name_1 = LOOKUP_ATTRIBUTE( tmp_source_name_1, const_str_plain_send_signal );
        if ( tmp_called_name_1 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 1751;
            type_description_1 = "o";
            goto frame_exception_exit_1;
        }
        tmp_mvar_value_1 = GET_STRING_DICT_VALUE( moduledict_subprocess, (Nuitka_StringObject *)const_str_plain_signal );

        if (unlikely( tmp_mvar_value_1 == NULL ))
        {
            tmp_mvar_value_1 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_signal );
        }

        if ( tmp_mvar_value_1 == NULL )
        {
            Py_DECREF( tmp_called_name_1 );
            exception_type = PyExc_NameError;
            Py_INCREF( exception_type );
            exception_value = PyUnicode_FromFormat( "name '%s' is not defined", "signal" );
            exception_tb = NULL;
            NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
            CHAIN_EXCEPTION( exception_value );

            exception_lineno = 1751;
            type_description_1 = "o";
            goto frame_exception_exit_1;
        }

        tmp_source_name_2 = tmp_mvar_value_1;
        tmp_args_element_name_1 = LOOKUP_ATTRIBUTE( tmp_source_name_2, const_str_plain_SIGTERM );
        if ( tmp_args_element_name_1 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
            Py_DECREF( tmp_called_name_1 );

            exception_lineno = 1751;
            type_description_1 = "o";
            goto frame_exception_exit_1;
        }
        frame_d9743507f2d846e87fae35855b109ba4->m_frame.f_lineno = 1751;
        {
            PyObject *call_args[] = { tmp_args_element_name_1 };
            tmp_call_result_1 = CALL_FUNCTION_WITH_ARGS1( tmp_called_name_1, call_args );
        }

        Py_DECREF( tmp_called_name_1 );
        Py_DECREF( tmp_args_element_name_1 );
        if ( tmp_call_result_1 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 1751;
            type_description_1 = "o";
            goto frame_exception_exit_1;
        }
        Py_DECREF( tmp_call_result_1 );
    }

#if 0
    RESTORE_FRAME_EXCEPTION( frame_d9743507f2d846e87fae35855b109ba4 );
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto frame_no_exception_1;

    frame_exception_exit_1:;

#if 0
    RESTORE_FRAME_EXCEPTION( frame_d9743507f2d846e87fae35855b109ba4 );
#endif

    if ( exception_tb == NULL )
    {
        exception_tb = MAKE_TRACEBACK( frame_d9743507f2d846e87fae35855b109ba4, exception_lineno );
    }
    else if ( exception_tb->tb_frame != &frame_d9743507f2d846e87fae35855b109ba4->m_frame )
    {
        exception_tb = ADD_TRACEBACK( exception_tb, frame_d9743507f2d846e87fae35855b109ba4, exception_lineno );
    }

    // Attachs locals to frame if any.
    Nuitka_Frame_AttachLocals(
        (struct Nuitka_FrameObject *)frame_d9743507f2d846e87fae35855b109ba4,
        type_description_1,
        par_self
    );


    // Release cached frame.
    if ( frame_d9743507f2d846e87fae35855b109ba4 == cache_frame_d9743507f2d846e87fae35855b109ba4 )
    {
        Py_DECREF( frame_d9743507f2d846e87fae35855b109ba4 );
    }
    cache_frame_d9743507f2d846e87fae35855b109ba4 = NULL;

    assertFrameObject( frame_d9743507f2d846e87fae35855b109ba4 );

    // Put the previous frame back on top.
    popFrameStack();

    // Return the error.
    goto try_except_handler_1;

    frame_no_exception_1:;
    tmp_return_value = Py_None;
    Py_INCREF( tmp_return_value );
    goto try_return_handler_1;
    // tried codes exits in all cases
    NUITKA_CANNOT_GET_HERE( subprocess$$$function_60_terminate );
    return NULL;
    // Return handler code:
    try_return_handler_1:;
    CHECK_OBJECT( (PyObject *)par_self );
    Py_DECREF( par_self );
    par_self = NULL;

    goto function_return_exit;
    // Exception handler code:
    try_except_handler_1:;
    exception_keeper_type_1 = exception_type;
    exception_keeper_value_1 = exception_value;
    exception_keeper_tb_1 = exception_tb;
    exception_keeper_lineno_1 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    CHECK_OBJECT( (PyObject *)par_self );
    Py_DECREF( par_self );
    par_self = NULL;

    // Re-raise.
    exception_type = exception_keeper_type_1;
    exception_value = exception_keeper_value_1;
    exception_tb = exception_keeper_tb_1;
    exception_lineno = exception_keeper_lineno_1;

    goto function_exception_exit;
    // End of try:

    // Return statement must have exited already.
    NUITKA_CANNOT_GET_HERE( subprocess$$$function_60_terminate );
    return NULL;

function_exception_exit:
    assert( exception_type );
    RESTORE_ERROR_OCCURRED( exception_type, exception_value, exception_tb );

    return NULL;

function_return_exit:
   // Function cleanup code if any.


   // Actual function exit with return value, making sure we did not make
   // the error status worse despite non-NULL return.
   CHECK_OBJECT( tmp_return_value );
   assert( had_error || !ERROR_OCCURRED() );
   return tmp_return_value;
}


static PyObject *impl_subprocess$$$function_61_kill( struct Nuitka_FunctionObject const *self, PyObject **python_pars )
{
    // Preserve error status for checks
#ifndef __NUITKA_NO_ASSERT__
    NUITKA_MAY_BE_UNUSED bool had_error = ERROR_OCCURRED();
#endif

    // Local variable declarations.
    PyObject *par_self = python_pars[ 0 ];
    struct Nuitka_FrameObject *frame_4d1e11f8c56bd49daa3f383638f665b8;
    NUITKA_MAY_BE_UNUSED char const *type_description_1 = NULL;
    PyObject *exception_type = NULL;
    PyObject *exception_value = NULL;
    PyTracebackObject *exception_tb = NULL;
    NUITKA_MAY_BE_UNUSED int exception_lineno = 0;
    static struct Nuitka_FrameObject *cache_frame_4d1e11f8c56bd49daa3f383638f665b8 = NULL;
    PyObject *tmp_return_value = NULL;
    PyObject *exception_keeper_type_1;
    PyObject *exception_keeper_value_1;
    PyTracebackObject *exception_keeper_tb_1;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_1;

    // Actual function body.
    // Tried code:
    MAKE_OR_REUSE_FRAME( cache_frame_4d1e11f8c56bd49daa3f383638f665b8, codeobj_4d1e11f8c56bd49daa3f383638f665b8, module_subprocess, sizeof(void *) );
    frame_4d1e11f8c56bd49daa3f383638f665b8 = cache_frame_4d1e11f8c56bd49daa3f383638f665b8;

    // Push the new frame as the currently active one.
    pushFrameStack( frame_4d1e11f8c56bd49daa3f383638f665b8 );

    // Mark the frame object as in use, ref count 1 will be up for reuse.
    assert( Py_REFCNT( frame_4d1e11f8c56bd49daa3f383638f665b8 ) == 2 ); // Frame stack

    // Framed code:
    {
        PyObject *tmp_called_name_1;
        PyObject *tmp_source_name_1;
        PyObject *tmp_call_result_1;
        PyObject *tmp_args_element_name_1;
        PyObject *tmp_source_name_2;
        PyObject *tmp_mvar_value_1;
        CHECK_OBJECT( par_self );
        tmp_source_name_1 = par_self;
        tmp_called_name_1 = LOOKUP_ATTRIBUTE( tmp_source_name_1, const_str_plain_send_signal );
        if ( tmp_called_name_1 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 1756;
            type_description_1 = "o";
            goto frame_exception_exit_1;
        }
        tmp_mvar_value_1 = GET_STRING_DICT_VALUE( moduledict_subprocess, (Nuitka_StringObject *)const_str_plain_signal );

        if (unlikely( tmp_mvar_value_1 == NULL ))
        {
            tmp_mvar_value_1 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_signal );
        }

        if ( tmp_mvar_value_1 == NULL )
        {
            Py_DECREF( tmp_called_name_1 );
            exception_type = PyExc_NameError;
            Py_INCREF( exception_type );
            exception_value = PyUnicode_FromFormat( "name '%s' is not defined", "signal" );
            exception_tb = NULL;
            NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
            CHAIN_EXCEPTION( exception_value );

            exception_lineno = 1756;
            type_description_1 = "o";
            goto frame_exception_exit_1;
        }

        tmp_source_name_2 = tmp_mvar_value_1;
        tmp_args_element_name_1 = LOOKUP_ATTRIBUTE( tmp_source_name_2, const_str_plain_SIGKILL );
        if ( tmp_args_element_name_1 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
            Py_DECREF( tmp_called_name_1 );

            exception_lineno = 1756;
            type_description_1 = "o";
            goto frame_exception_exit_1;
        }
        frame_4d1e11f8c56bd49daa3f383638f665b8->m_frame.f_lineno = 1756;
        {
            PyObject *call_args[] = { tmp_args_element_name_1 };
            tmp_call_result_1 = CALL_FUNCTION_WITH_ARGS1( tmp_called_name_1, call_args );
        }

        Py_DECREF( tmp_called_name_1 );
        Py_DECREF( tmp_args_element_name_1 );
        if ( tmp_call_result_1 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 1756;
            type_description_1 = "o";
            goto frame_exception_exit_1;
        }
        Py_DECREF( tmp_call_result_1 );
    }

#if 0
    RESTORE_FRAME_EXCEPTION( frame_4d1e11f8c56bd49daa3f383638f665b8 );
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto frame_no_exception_1;

    frame_exception_exit_1:;

#if 0
    RESTORE_FRAME_EXCEPTION( frame_4d1e11f8c56bd49daa3f383638f665b8 );
#endif

    if ( exception_tb == NULL )
    {
        exception_tb = MAKE_TRACEBACK( frame_4d1e11f8c56bd49daa3f383638f665b8, exception_lineno );
    }
    else if ( exception_tb->tb_frame != &frame_4d1e11f8c56bd49daa3f383638f665b8->m_frame )
    {
        exception_tb = ADD_TRACEBACK( exception_tb, frame_4d1e11f8c56bd49daa3f383638f665b8, exception_lineno );
    }

    // Attachs locals to frame if any.
    Nuitka_Frame_AttachLocals(
        (struct Nuitka_FrameObject *)frame_4d1e11f8c56bd49daa3f383638f665b8,
        type_description_1,
        par_self
    );


    // Release cached frame.
    if ( frame_4d1e11f8c56bd49daa3f383638f665b8 == cache_frame_4d1e11f8c56bd49daa3f383638f665b8 )
    {
        Py_DECREF( frame_4d1e11f8c56bd49daa3f383638f665b8 );
    }
    cache_frame_4d1e11f8c56bd49daa3f383638f665b8 = NULL;

    assertFrameObject( frame_4d1e11f8c56bd49daa3f383638f665b8 );

    // Put the previous frame back on top.
    popFrameStack();

    // Return the error.
    goto try_except_handler_1;

    frame_no_exception_1:;
    tmp_return_value = Py_None;
    Py_INCREF( tmp_return_value );
    goto try_return_handler_1;
    // tried codes exits in all cases
    NUITKA_CANNOT_GET_HERE( subprocess$$$function_61_kill );
    return NULL;
    // Return handler code:
    try_return_handler_1:;
    CHECK_OBJECT( (PyObject *)par_self );
    Py_DECREF( par_self );
    par_self = NULL;

    goto function_return_exit;
    // Exception handler code:
    try_except_handler_1:;
    exception_keeper_type_1 = exception_type;
    exception_keeper_value_1 = exception_value;
    exception_keeper_tb_1 = exception_tb;
    exception_keeper_lineno_1 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    CHECK_OBJECT( (PyObject *)par_self );
    Py_DECREF( par_self );
    par_self = NULL;

    // Re-raise.
    exception_type = exception_keeper_type_1;
    exception_value = exception_keeper_value_1;
    exception_tb = exception_keeper_tb_1;
    exception_lineno = exception_keeper_lineno_1;

    goto function_exception_exit;
    // End of try:

    // Return statement must have exited already.
    NUITKA_CANNOT_GET_HERE( subprocess$$$function_61_kill );
    return NULL;

function_exception_exit:
    assert( exception_type );
    RESTORE_ERROR_OCCURRED( exception_type, exception_value, exception_tb );

    return NULL;

function_return_exit:
   // Function cleanup code if any.


   // Actual function exit with return value, making sure we did not make
   // the error status worse despite non-NULL return.
   CHECK_OBJECT( tmp_return_value );
   assert( had_error || !ERROR_OCCURRED() );
   return tmp_return_value;
}



static PyObject *MAKE_FUNCTION_subprocess$$$function_10__copy(  )
{
    struct Nuitka_FunctionObject *result = Nuitka_Function_New(
        impl_subprocess$$$function_10__copy,
        const_str_plain__copy,
#if PYTHON_VERSION >= 300
        const_str_digest_5dfadc7c87bc4f008360fea2b750683b,
#endif
        codeobj_52856dea11ed4d8c00f05a44a2bb7a1b,
        NULL,
#if PYTHON_VERSION >= 300
        NULL,
        NULL,
#endif
        module_subprocess,
        NULL,
        0
    );

    return (PyObject *)result;
}



static PyObject *MAKE_FUNCTION_subprocess$$$function_11_Close( PyObject *defaults )
{
    struct Nuitka_FunctionObject *result = Nuitka_Function_New(
        impl_subprocess$$$function_11_Close,
        const_str_plain_Close,
#if PYTHON_VERSION >= 300
        const_str_digest_6a219ad0399ae48eefe9eb5e907f4323,
#endif
        codeobj_800df6b7458649b7309b2810385e4019,
        defaults,
#if PYTHON_VERSION >= 300
        NULL,
        NULL,
#endif
        module_subprocess,
        NULL,
        0
    );

    return (PyObject *)result;
}



static PyObject *MAKE_FUNCTION_subprocess$$$function_12_Detach(  )
{
    struct Nuitka_FunctionObject *result = Nuitka_Function_New(
        impl_subprocess$$$function_12_Detach,
        const_str_plain_Detach,
#if PYTHON_VERSION >= 300
        const_str_digest_4e4c098f9de9960963ee1b8db5526b4f,
#endif
        codeobj_62c892bd90657b3e328cf24a2a5cb717,
        NULL,
#if PYTHON_VERSION >= 300
        NULL,
        NULL,
#endif
        module_subprocess,
        NULL,
        0
    );

    return (PyObject *)result;
}



static PyObject *MAKE_FUNCTION_subprocess$$$function_13___repr__(  )
{
    struct Nuitka_FunctionObject *result = Nuitka_Function_New(
        impl_subprocess$$$function_13___repr__,
        const_str_plain___repr__,
#if PYTHON_VERSION >= 300
        const_str_digest_35f84ffd5f8558a1b8bb435acb0aabe1,
#endif
        codeobj_4a08f6b780e038c83cf85b523d9b9679,
        NULL,
#if PYTHON_VERSION >= 300
        NULL,
        NULL,
#endif
        module_subprocess,
        NULL,
        0
    );

    return (PyObject *)result;
}



static PyObject *MAKE_FUNCTION_subprocess$$$function_14__cleanup(  )
{
    struct Nuitka_FunctionObject *result = Nuitka_Function_New(
        impl_subprocess$$$function_14__cleanup,
        const_str_plain__cleanup,
#if PYTHON_VERSION >= 300
        NULL,
#endif
        codeobj_35541e506aecaa1fe122d7df64fdd496,
        NULL,
#if PYTHON_VERSION >= 300
        NULL,
        NULL,
#endif
        module_subprocess,
        NULL,
        0
    );

    return (PyObject *)result;
}



static PyObject *MAKE_FUNCTION_subprocess$$$function_15__optim_args_from_interpreter_flags(  )
{
    struct Nuitka_FunctionObject *result = Nuitka_Function_New(
        impl_subprocess$$$function_15__optim_args_from_interpreter_flags,
        const_str_plain__optim_args_from_interpreter_flags,
#if PYTHON_VERSION >= 300
        NULL,
#endif
        codeobj_650c2a689f3dbec589e4aff67a1ae95f,
        NULL,
#if PYTHON_VERSION >= 300
        NULL,
        NULL,
#endif
        module_subprocess,
        const_str_digest_64262d9d765dd22583ae3b093ab328f8,
        0
    );

    return (PyObject *)result;
}



static PyObject *MAKE_FUNCTION_subprocess$$$function_16__args_from_interpreter_flags(  )
{
    struct Nuitka_FunctionObject *result = Nuitka_Function_New(
        impl_subprocess$$$function_16__args_from_interpreter_flags,
        const_str_plain__args_from_interpreter_flags,
#if PYTHON_VERSION >= 300
        NULL,
#endif
        codeobj_ff315f57888600677cc6737090042b3f,
        NULL,
#if PYTHON_VERSION >= 300
        NULL,
        NULL,
#endif
        module_subprocess,
        const_str_digest_e7bc3a787f33637108c4ae505936e97f,
        0
    );

    return (PyObject *)result;
}



static PyObject *MAKE_FUNCTION_subprocess$$$function_17_call( PyObject *kw_defaults )
{
    struct Nuitka_FunctionObject *result = Nuitka_Function_New(
        impl_subprocess$$$function_17_call,
        const_str_plain_call,
#if PYTHON_VERSION >= 300
        NULL,
#endif
        codeobj_88bdef2e440093790ddc6f18b2662761,
        NULL,
#if PYTHON_VERSION >= 300
        kw_defaults,
        NULL,
#endif
        module_subprocess,
        const_str_digest_0abfbff0054faa56a9b013b694deb65a,
        0
    );

    return (PyObject *)result;
}



static PyObject *MAKE_FUNCTION_subprocess$$$function_18_check_call(  )
{
    struct Nuitka_FunctionObject *result = Nuitka_Function_New(
        impl_subprocess$$$function_18_check_call,
        const_str_plain_check_call,
#if PYTHON_VERSION >= 300
        NULL,
#endif
        codeobj_0dd12d5ae3ba750cb624023663caa12b,
        NULL,
#if PYTHON_VERSION >= 300
        NULL,
        NULL,
#endif
        module_subprocess,
        const_str_digest_6d1a327b39e434d86db0dcab2f1a3781,
        0
    );

    return (PyObject *)result;
}



static PyObject *MAKE_FUNCTION_subprocess$$$function_19_check_output( PyObject *kw_defaults )
{
    struct Nuitka_FunctionObject *result = Nuitka_Function_New(
        impl_subprocess$$$function_19_check_output,
        const_str_plain_check_output,
#if PYTHON_VERSION >= 300
        NULL,
#endif
        codeobj_ca16cf62941d8c38ddb7a8897aa86002,
        NULL,
#if PYTHON_VERSION >= 300
        kw_defaults,
        NULL,
#endif
        module_subprocess,
        const_str_digest_ff62834d72b88ff76d329084e1313437,
        0
    );

    return (PyObject *)result;
}



static PyObject *MAKE_FUNCTION_subprocess$$$function_1___init__( PyObject *defaults )
{
    struct Nuitka_FunctionObject *result = Nuitka_Function_New(
        impl_subprocess$$$function_1___init__,
        const_str_plain___init__,
#if PYTHON_VERSION >= 300
        const_str_digest_7eeb7240d1d21e44dc1879ad2e2e8102,
#endif
        codeobj_0621318b9179e2fc44838b0d713462aa,
        defaults,
#if PYTHON_VERSION >= 300
        NULL,
        NULL,
#endif
        module_subprocess,
        NULL,
        0
    );

    return (PyObject *)result;
}



static PyObject *MAKE_FUNCTION_subprocess$$$function_20___init__( PyObject *defaults )
{
    struct Nuitka_FunctionObject *result = Nuitka_Function_New(
        impl_subprocess$$$function_20___init__,
        const_str_plain___init__,
#if PYTHON_VERSION >= 300
        const_str_digest_8ec5ae439f87f3f0c243fb8d22338d95,
#endif
        codeobj_7665585c959149b8e34fdc68aca32362,
        defaults,
#if PYTHON_VERSION >= 300
        NULL,
        NULL,
#endif
        module_subprocess,
        NULL,
        0
    );

    return (PyObject *)result;
}



static PyObject *MAKE_FUNCTION_subprocess$$$function_21___repr__(  )
{
    struct Nuitka_FunctionObject *result = Nuitka_Function_New(
        impl_subprocess$$$function_21___repr__,
        const_str_plain___repr__,
#if PYTHON_VERSION >= 300
        const_str_digest_6bfbca1b772b87689ce29d96787e292d,
#endif
        codeobj_3a2b66c8ce864438c352c2c20c126501,
        NULL,
#if PYTHON_VERSION >= 300
        NULL,
        NULL,
#endif
        module_subprocess,
        NULL,
        0
    );

    return (PyObject *)result;
}



static PyObject *MAKE_FUNCTION_subprocess$$$function_22_check_returncode(  )
{
    struct Nuitka_FunctionObject *result = Nuitka_Function_New(
        impl_subprocess$$$function_22_check_returncode,
        const_str_plain_check_returncode,
#if PYTHON_VERSION >= 300
        const_str_digest_e1960ce654cb854d574db0763ef9f0c9,
#endif
        codeobj_09aa7102ace1ff05e255e991f636cddd,
        NULL,
#if PYTHON_VERSION >= 300
        NULL,
        NULL,
#endif
        module_subprocess,
        const_str_digest_04075ac2a07d98a51e5d2365cf949798,
        0
    );

    return (PyObject *)result;
}



static PyObject *MAKE_FUNCTION_subprocess$$$function_23_run( PyObject *kw_defaults )
{
    struct Nuitka_FunctionObject *result = Nuitka_Function_New(
        impl_subprocess$$$function_23_run,
        const_str_plain_run,
#if PYTHON_VERSION >= 300
        NULL,
#endif
        codeobj_b7ad6617339f8bbe8f5dcdac8aa127fa,
        NULL,
#if PYTHON_VERSION >= 300
        kw_defaults,
        NULL,
#endif
        module_subprocess,
        const_str_digest_48844c21ab42096c08c915c9a31d8a19,
        0
    );

    return (PyObject *)result;
}



static PyObject *MAKE_FUNCTION_subprocess$$$function_24_list2cmdline(  )
{
    struct Nuitka_FunctionObject *result = Nuitka_Function_New(
        impl_subprocess$$$function_24_list2cmdline,
        const_str_plain_list2cmdline,
#if PYTHON_VERSION >= 300
        NULL,
#endif
        codeobj_3ab7bcc7becc4741b37856918d8ae0ba,
        NULL,
#if PYTHON_VERSION >= 300
        NULL,
        NULL,
#endif
        module_subprocess,
        const_str_digest_013753546732b33c34f2ebb05638c59c,
        0
    );

    return (PyObject *)result;
}



static PyObject *MAKE_FUNCTION_subprocess$$$function_25_getstatusoutput(  )
{
    struct Nuitka_FunctionObject *result = Nuitka_Function_New(
        impl_subprocess$$$function_25_getstatusoutput,
        const_str_plain_getstatusoutput,
#if PYTHON_VERSION >= 300
        NULL,
#endif
        codeobj_cd37d8e56d2bad5c732a7fd11b219980,
        NULL,
#if PYTHON_VERSION >= 300
        NULL,
        NULL,
#endif
        module_subprocess,
        const_str_digest_c2f9c4fb5ab6dcd3948ba0f41215e217,
        0
    );

    return (PyObject *)result;
}



static PyObject *MAKE_FUNCTION_subprocess$$$function_26_getoutput(  )
{
    struct Nuitka_FunctionObject *result = Nuitka_Function_New(
        impl_subprocess$$$function_26_getoutput,
        const_str_plain_getoutput,
#if PYTHON_VERSION >= 300
        NULL,
#endif
        codeobj_3e0d6e816dfe25aa8c0ca80bd02ad8e4,
        NULL,
#if PYTHON_VERSION >= 300
        NULL,
        NULL,
#endif
        module_subprocess,
        const_str_digest_cd49e8e73e2a29b6371b14c295709203,
        0
    );

    return (PyObject *)result;
}



static PyObject *MAKE_FUNCTION_subprocess$$$function_27___init__( PyObject *defaults, PyObject *kw_defaults )
{
    struct Nuitka_FunctionObject *result = Nuitka_Function_New(
        impl_subprocess$$$function_27___init__,
        const_str_plain___init__,
#if PYTHON_VERSION >= 300
        const_str_digest_a18273144a57c4519b4c0da4d8a57d6c,
#endif
        codeobj_3307251e478e6f87577905ed55fc01cd,
        defaults,
#if PYTHON_VERSION >= 300
        kw_defaults,
        NULL,
#endif
        module_subprocess,
        const_str_digest_20717f32ff2e8fa49a275f684313d4c7,
        0
    );

    return (PyObject *)result;
}



static PyObject *MAKE_FUNCTION_subprocess$$$function_28_universal_newlines(  )
{
    struct Nuitka_FunctionObject *result = Nuitka_Function_New(
        impl_subprocess$$$function_28_universal_newlines,
        const_str_plain_universal_newlines,
#if PYTHON_VERSION >= 300
        const_str_digest_c52570f1e4c4b8688cc11fd57b87de93,
#endif
        codeobj_4897b9eeb94c896eae280946e0cffe8e,
        NULL,
#if PYTHON_VERSION >= 300
        NULL,
        NULL,
#endif
        module_subprocess,
        NULL,
        0
    );

    return (PyObject *)result;
}



static PyObject *MAKE_FUNCTION_subprocess$$$function_29_universal_newlines(  )
{
    struct Nuitka_FunctionObject *result = Nuitka_Function_New(
        impl_subprocess$$$function_29_universal_newlines,
        const_str_plain_universal_newlines,
#if PYTHON_VERSION >= 300
        const_str_digest_c52570f1e4c4b8688cc11fd57b87de93,
#endif
        codeobj_dddc561887afa411fcad41520a6648b6,
        NULL,
#if PYTHON_VERSION >= 300
        NULL,
        NULL,
#endif
        module_subprocess,
        NULL,
        0
    );

    return (PyObject *)result;
}



static PyObject *MAKE_FUNCTION_subprocess$$$function_2___str__(  )
{
    struct Nuitka_FunctionObject *result = Nuitka_Function_New(
        impl_subprocess$$$function_2___str__,
        const_str_plain___str__,
#if PYTHON_VERSION >= 300
        const_str_digest_1fe7c2f33755e78e0808f49c8f55e2fb,
#endif
        codeobj_289d47da2f84ee299300ab1657e1c7c0,
        NULL,
#if PYTHON_VERSION >= 300
        NULL,
        NULL,
#endif
        module_subprocess,
        NULL,
        0
    );

    return (PyObject *)result;
}



static PyObject *MAKE_FUNCTION_subprocess$$$function_30__translate_newlines(  )
{
    struct Nuitka_FunctionObject *result = Nuitka_Function_New(
        impl_subprocess$$$function_30__translate_newlines,
        const_str_plain__translate_newlines,
#if PYTHON_VERSION >= 300
        const_str_digest_29b37c1962ac8c0d3a43f5fdd853deaf,
#endif
        codeobj_48a7fa25571490ca92c398c7d8159669,
        NULL,
#if PYTHON_VERSION >= 300
        NULL,
        NULL,
#endif
        module_subprocess,
        NULL,
        0
    );

    return (PyObject *)result;
}



static PyObject *MAKE_FUNCTION_subprocess$$$function_31___enter__(  )
{
    struct Nuitka_FunctionObject *result = Nuitka_Function_New(
        impl_subprocess$$$function_31___enter__,
        const_str_plain___enter__,
#if PYTHON_VERSION >= 300
        const_str_digest_90a82a8b07cad57e858e4baab680e96c,
#endif
        codeobj_5db1c771e454ce7efc2d55a455db0551,
        NULL,
#if PYTHON_VERSION >= 300
        NULL,
        NULL,
#endif
        module_subprocess,
        NULL,
        0
    );

    return (PyObject *)result;
}



static PyObject *MAKE_FUNCTION_subprocess$$$function_32___exit__(  )
{
    struct Nuitka_FunctionObject *result = Nuitka_Function_New(
        impl_subprocess$$$function_32___exit__,
        const_str_plain___exit__,
#if PYTHON_VERSION >= 300
        const_str_digest_b2039696d546f34d83614019cb0ad468,
#endif
        codeobj_3af98ecbcd655216221180d14227e886,
        NULL,
#if PYTHON_VERSION >= 300
        NULL,
        NULL,
#endif
        module_subprocess,
        NULL,
        0
    );

    return (PyObject *)result;
}



static PyObject *MAKE_FUNCTION_subprocess$$$function_33___del__( PyObject *defaults )
{
    struct Nuitka_FunctionObject *result = Nuitka_Function_New(
        impl_subprocess$$$function_33___del__,
        const_str_plain___del__,
#if PYTHON_VERSION >= 300
        const_str_digest_f7cc3ebb17bcca148e03473a571dfdea,
#endif
        codeobj_1201f74c0ffd90a63b69d50f62ce3a39,
        defaults,
#if PYTHON_VERSION >= 300
        NULL,
        NULL,
#endif
        module_subprocess,
        NULL,
        0
    );

    return (PyObject *)result;
}



static PyObject *MAKE_FUNCTION_subprocess$$$function_34__get_devnull(  )
{
    struct Nuitka_FunctionObject *result = Nuitka_Function_New(
        impl_subprocess$$$function_34__get_devnull,
        const_str_plain__get_devnull,
#if PYTHON_VERSION >= 300
        const_str_digest_d9cffe6f287cc82f3b2a6b7bfea4bc0e,
#endif
        codeobj_f237254193b28e16736fc7794a633862,
        NULL,
#if PYTHON_VERSION >= 300
        NULL,
        NULL,
#endif
        module_subprocess,
        NULL,
        0
    );

    return (PyObject *)result;
}



static PyObject *MAKE_FUNCTION_subprocess$$$function_35__stdin_write(  )
{
    struct Nuitka_FunctionObject *result = Nuitka_Function_New(
        impl_subprocess$$$function_35__stdin_write,
        const_str_plain__stdin_write,
#if PYTHON_VERSION >= 300
        const_str_digest_5b15356b3e57532a4751bdb812b0091e,
#endif
        codeobj_6878daaf3da84a8cdb9f86ec178c7a88,
        NULL,
#if PYTHON_VERSION >= 300
        NULL,
        NULL,
#endif
        module_subprocess,
        NULL,
        0
    );

    return (PyObject *)result;
}



static PyObject *MAKE_FUNCTION_subprocess$$$function_36_communicate( PyObject *defaults )
{
    struct Nuitka_FunctionObject *result = Nuitka_Function_New(
        impl_subprocess$$$function_36_communicate,
        const_str_plain_communicate,
#if PYTHON_VERSION >= 300
        const_str_digest_aba692270bbf18608b3180d8e88dacf3,
#endif
        codeobj_78e27b0fea17bb4807da1cbf00c46c61,
        defaults,
#if PYTHON_VERSION >= 300
        NULL,
        NULL,
#endif
        module_subprocess,
        const_str_digest_2d9aade0afb2c93d441372ae2b274606,
        0
    );

    return (PyObject *)result;
}



static PyObject *MAKE_FUNCTION_subprocess$$$function_37_poll(  )
{
    struct Nuitka_FunctionObject *result = Nuitka_Function_New(
        impl_subprocess$$$function_37_poll,
        const_str_plain_poll,
#if PYTHON_VERSION >= 300
        const_str_digest_8a04e8f481c7ca9444a23a83f56c2d84,
#endif
        codeobj_87577be703ef6ca741a608913b4ddfe9,
        NULL,
#if PYTHON_VERSION >= 300
        NULL,
        NULL,
#endif
        module_subprocess,
        const_str_digest_0e6a2015259e836fd56329226048ed97,
        0
    );

    return (PyObject *)result;
}



static PyObject *MAKE_FUNCTION_subprocess$$$function_38__remaining_time(  )
{
    struct Nuitka_FunctionObject *result = Nuitka_Function_New(
        impl_subprocess$$$function_38__remaining_time,
        const_str_plain__remaining_time,
#if PYTHON_VERSION >= 300
        const_str_digest_95b6ea17ae512e14a9afdf83d45b254e,
#endif
        codeobj_f509d8cccefcdfabcd164c7da0c88071,
        NULL,
#if PYTHON_VERSION >= 300
        NULL,
        NULL,
#endif
        module_subprocess,
        const_str_digest_cad0983096c75ec466fc8048e9db576d,
        0
    );

    return (PyObject *)result;
}



static PyObject *MAKE_FUNCTION_subprocess$$$function_39__check_timeout(  )
{
    struct Nuitka_FunctionObject *result = Nuitka_Function_New(
        impl_subprocess$$$function_39__check_timeout,
        const_str_plain__check_timeout,
#if PYTHON_VERSION >= 300
        const_str_digest_93ffc62d6616f571ceaa45141505e352,
#endif
        codeobj_0b619157658b6bba36dd9c0cb11c64d6,
        NULL,
#if PYTHON_VERSION >= 300
        NULL,
        NULL,
#endif
        module_subprocess,
        const_str_digest_d2dd934860f14f99585c78ba1e12ccb4,
        0
    );

    return (PyObject *)result;
}



static PyObject *MAKE_FUNCTION_subprocess$$$function_3_stdout(  )
{
    struct Nuitka_FunctionObject *result = Nuitka_Function_New(
        impl_subprocess$$$function_3_stdout,
        const_str_plain_stdout,
#if PYTHON_VERSION >= 300
        const_str_digest_2386d871d226995e0c34ee5ff8d725b0,
#endif
        codeobj_2e69df50cbecb4b3decb2a2de054c9a4,
        NULL,
#if PYTHON_VERSION >= 300
        NULL,
        NULL,
#endif
        module_subprocess,
        const_str_digest_ba4c66db524f9f7ea35f9ca80bb0f03a,
        0
    );

    return (PyObject *)result;
}



static PyObject *MAKE_FUNCTION_subprocess$$$function_40_wait( PyObject *defaults )
{
    struct Nuitka_FunctionObject *result = Nuitka_Function_New(
        impl_subprocess$$$function_40_wait,
        const_str_plain_wait,
#if PYTHON_VERSION >= 300
        const_str_digest_6a5c73467512a55bc94316b05a6227e5,
#endif
        codeobj_12f0d521926b7d02309cee945224ffb2,
        defaults,
#if PYTHON_VERSION >= 300
        NULL,
        NULL,
#endif
        module_subprocess,
        const_str_digest_4e5d48093781680053716042e6c0ae8f,
        0
    );

    return (PyObject *)result;
}



static PyObject *MAKE_FUNCTION_subprocess$$$function_41__get_handles(  )
{
    struct Nuitka_FunctionObject *result = Nuitka_Function_New(
        impl_subprocess$$$function_41__get_handles,
        const_str_plain__get_handles,
#if PYTHON_VERSION >= 300
        const_str_digest_f63dd4474459d20b2148cad38ff3a3a4,
#endif
        codeobj_1ccac2e96ff9427e4b97325ca6a6800b,
        NULL,
#if PYTHON_VERSION >= 300
        NULL,
        NULL,
#endif
        module_subprocess,
        const_str_digest_549f1a66edfa79c8b0272a3b6b8d9d50,
        0
    );

    return (PyObject *)result;
}



static PyObject *MAKE_FUNCTION_subprocess$$$function_42__make_inheritable(  )
{
    struct Nuitka_FunctionObject *result = Nuitka_Function_New(
        impl_subprocess$$$function_42__make_inheritable,
        const_str_plain__make_inheritable,
#if PYTHON_VERSION >= 300
        const_str_digest_28798c26179676c7fa1a3ff06fce120f,
#endif
        codeobj_f4ca8605c9569418bc8039f668bf7a67,
        NULL,
#if PYTHON_VERSION >= 300
        NULL,
        NULL,
#endif
        module_subprocess,
        const_str_digest_bc5a75fca86ecfaf571f8d5223e48666,
        0
    );

    return (PyObject *)result;
}



static PyObject *MAKE_FUNCTION_subprocess$$$function_43__filter_handle_list(  )
{
    struct Nuitka_FunctionObject *result = Nuitka_Function_New(
        impl_subprocess$$$function_43__filter_handle_list,
        const_str_plain__filter_handle_list,
#if PYTHON_VERSION >= 300
        const_str_digest_9872b006876be6449800507bda736085,
#endif
        codeobj_595fbfe0f24c4e1cf92bb35eb23a0fd7,
        NULL,
#if PYTHON_VERSION >= 300
        NULL,
        NULL,
#endif
        module_subprocess,
        const_str_digest_02074f0e49b72edf13efe1e05bfa3e94,
        0
    );

    return (PyObject *)result;
}



static PyObject *MAKE_FUNCTION_subprocess$$$function_44__execute_child(  )
{
    struct Nuitka_FunctionObject *result = Nuitka_Function_New(
        impl_subprocess$$$function_44__execute_child,
        const_str_plain__execute_child,
#if PYTHON_VERSION >= 300
        const_str_digest_32c9e04a9bd5680040a0920d9760bb51,
#endif
        codeobj_3e8d1a1c7da302cd9107f80bea120660,
        NULL,
#if PYTHON_VERSION >= 300
        NULL,
        NULL,
#endif
        module_subprocess,
        const_str_digest_4b89cb8f2efcc65423014358bf5bbcaa,
        0
    );

    return (PyObject *)result;
}



static PyObject *MAKE_FUNCTION_subprocess$$$function_45__internal_poll( PyObject *defaults )
{
    struct Nuitka_FunctionObject *result = Nuitka_Function_New(
        impl_subprocess$$$function_45__internal_poll,
        const_str_plain__internal_poll,
#if PYTHON_VERSION >= 300
        const_str_digest_c67562936c6fdce3db01658a88125f57,
#endif
        codeobj_cb01cf9133dac884d7efaf334d2fc08e,
        defaults,
#if PYTHON_VERSION >= 300
        NULL,
        NULL,
#endif
        module_subprocess,
        const_str_digest_5b563e342c6fb75d214ffb280a2e5464,
        0
    );

    return (PyObject *)result;
}



static PyObject *MAKE_FUNCTION_subprocess$$$function_46__wait(  )
{
    struct Nuitka_FunctionObject *result = Nuitka_Function_New(
        impl_subprocess$$$function_46__wait,
        const_str_plain__wait,
#if PYTHON_VERSION >= 300
        const_str_digest_121b2b9ade4ed6778d76629e1abd32c7,
#endif
        codeobj_0a9e54124646f9f125d4cee5c810af87,
        NULL,
#if PYTHON_VERSION >= 300
        NULL,
        NULL,
#endif
        module_subprocess,
        const_str_digest_927c83f65f23dc939b13cf98a20b74de,
        0
    );

    return (PyObject *)result;
}



static PyObject *MAKE_FUNCTION_subprocess$$$function_47__readerthread(  )
{
    struct Nuitka_FunctionObject *result = Nuitka_Function_New(
        impl_subprocess$$$function_47__readerthread,
        const_str_plain__readerthread,
#if PYTHON_VERSION >= 300
        const_str_digest_79ad71fbe87b58faeda4ba23873ab316,
#endif
        codeobj_21dae82fed1de99da6d824d21ade5909,
        NULL,
#if PYTHON_VERSION >= 300
        NULL,
        NULL,
#endif
        module_subprocess,
        NULL,
        0
    );

    return (PyObject *)result;
}



static PyObject *MAKE_FUNCTION_subprocess$$$function_48__communicate(  )
{
    struct Nuitka_FunctionObject *result = Nuitka_Function_New(
        impl_subprocess$$$function_48__communicate,
        const_str_plain__communicate,
#if PYTHON_VERSION >= 300
        const_str_digest_50731d62964f79d5fbaa6d7d14ba78dc,
#endif
        codeobj_8def44d887a0ac5f684876bf2dcf6269,
        NULL,
#if PYTHON_VERSION >= 300
        NULL,
        NULL,
#endif
        module_subprocess,
        NULL,
        0
    );

    return (PyObject *)result;
}



static PyObject *MAKE_FUNCTION_subprocess$$$function_49_send_signal(  )
{
    struct Nuitka_FunctionObject *result = Nuitka_Function_New(
        impl_subprocess$$$function_49_send_signal,
        const_str_plain_send_signal,
#if PYTHON_VERSION >= 300
        const_str_digest_228a056f29f7ed5444f6cd76fc5830dd,
#endif
        codeobj_f2e84d6d5d5d645355d81357adbd86d6,
        NULL,
#if PYTHON_VERSION >= 300
        NULL,
        NULL,
#endif
        module_subprocess,
        const_str_digest_654362c78432fb5fb1e872a376dbf470,
        0
    );

    return (PyObject *)result;
}



static PyObject *MAKE_FUNCTION_subprocess$$$function_4_stdout(  )
{
    struct Nuitka_FunctionObject *result = Nuitka_Function_New(
        impl_subprocess$$$function_4_stdout,
        const_str_plain_stdout,
#if PYTHON_VERSION >= 300
        const_str_digest_2386d871d226995e0c34ee5ff8d725b0,
#endif
        codeobj_85e1efc804e970d045260ba73e076811,
        NULL,
#if PYTHON_VERSION >= 300
        NULL,
        NULL,
#endif
        module_subprocess,
        NULL,
        0
    );

    return (PyObject *)result;
}



static PyObject *MAKE_FUNCTION_subprocess$$$function_50_terminate(  )
{
    struct Nuitka_FunctionObject *result = Nuitka_Function_New(
        impl_subprocess$$$function_50_terminate,
        const_str_plain_terminate,
#if PYTHON_VERSION >= 300
        const_str_digest_01cd7c708ecfb9de8b6cc9427d24ca89,
#endif
        codeobj_5b0375b01e6bdd838edb3483499aae6a,
        NULL,
#if PYTHON_VERSION >= 300
        NULL,
        NULL,
#endif
        module_subprocess,
        const_str_digest_dcd462023a553d64f3f2590b895d01db,
        0
    );

    return (PyObject *)result;
}



static PyObject *MAKE_FUNCTION_subprocess$$$function_51__get_handles(  )
{
    struct Nuitka_FunctionObject *result = Nuitka_Function_New(
        impl_subprocess$$$function_51__get_handles,
        const_str_plain__get_handles,
#if PYTHON_VERSION >= 300
        const_str_digest_f63dd4474459d20b2148cad38ff3a3a4,
#endif
        codeobj_495b7c0e9bc8fdb79276f40655ad3103,
        NULL,
#if PYTHON_VERSION >= 300
        NULL,
        NULL,
#endif
        module_subprocess,
        const_str_digest_549f1a66edfa79c8b0272a3b6b8d9d50,
        0
    );

    return (PyObject *)result;
}



static PyObject *MAKE_FUNCTION_subprocess$$$function_52__execute_child(  )
{
    struct Nuitka_FunctionObject *result = Nuitka_Function_New(
        impl_subprocess$$$function_52__execute_child,
        const_str_plain__execute_child,
#if PYTHON_VERSION >= 300
        const_str_digest_32c9e04a9bd5680040a0920d9760bb51,
#endif
        codeobj_f8a56ca7f4381c06bb242e27d9cd6c68,
        NULL,
#if PYTHON_VERSION >= 300
        NULL,
        NULL,
#endif
        module_subprocess,
        const_str_digest_b364aa0abc3244518b37748082f33aee,
        0
    );

    return (PyObject *)result;
}



static PyObject *MAKE_FUNCTION_subprocess$$$function_53__handle_exitstatus( PyObject *defaults )
{
    struct Nuitka_FunctionObject *result = Nuitka_Function_New(
        impl_subprocess$$$function_53__handle_exitstatus,
        const_str_plain__handle_exitstatus,
#if PYTHON_VERSION >= 300
        const_str_digest_671f0d482711dcaa6854d3a0cc514994,
#endif
        codeobj_90571a4b7308f1f4fd3c602274ac0a6e,
        defaults,
#if PYTHON_VERSION >= 300
        NULL,
        NULL,
#endif
        module_subprocess,
        const_str_digest_a9baa6c4286527d268d784d318f29772,
        0
    );

    return (PyObject *)result;
}



static PyObject *MAKE_FUNCTION_subprocess$$$function_54__internal_poll( PyObject *defaults )
{
    struct Nuitka_FunctionObject *result = Nuitka_Function_New(
        impl_subprocess$$$function_54__internal_poll,
        const_str_plain__internal_poll,
#if PYTHON_VERSION >= 300
        const_str_digest_c67562936c6fdce3db01658a88125f57,
#endif
        codeobj_0f3fa34b6ea5a1c6fe10cb63908c593e,
        defaults,
#if PYTHON_VERSION >= 300
        NULL,
        NULL,
#endif
        module_subprocess,
        const_str_digest_f43f5e0af2382671e17ef2c95186da07,
        0
    );

    return (PyObject *)result;
}



static PyObject *MAKE_FUNCTION_subprocess$$$function_55__try_wait(  )
{
    struct Nuitka_FunctionObject *result = Nuitka_Function_New(
        impl_subprocess$$$function_55__try_wait,
        const_str_plain__try_wait,
#if PYTHON_VERSION >= 300
        const_str_digest_7171fe58b58f607b78d848b1d715f626,
#endif
        codeobj_3e52afa8f05d71315554cd661e6674c6,
        NULL,
#if PYTHON_VERSION >= 300
        NULL,
        NULL,
#endif
        module_subprocess,
        const_str_digest_a9baa6c4286527d268d784d318f29772,
        0
    );

    return (PyObject *)result;
}



static PyObject *MAKE_FUNCTION_subprocess$$$function_56__wait(  )
{
    struct Nuitka_FunctionObject *result = Nuitka_Function_New(
        impl_subprocess$$$function_56__wait,
        const_str_plain__wait,
#if PYTHON_VERSION >= 300
        const_str_digest_121b2b9ade4ed6778d76629e1abd32c7,
#endif
        codeobj_9ac704ea3f4336924bb76de6e74b8ce5,
        NULL,
#if PYTHON_VERSION >= 300
        NULL,
        NULL,
#endif
        module_subprocess,
        const_str_digest_0a633d267f972c6e0c6b9540b7fcf4fa,
        0
    );

    return (PyObject *)result;
}



static PyObject *MAKE_FUNCTION_subprocess$$$function_57__communicate(  )
{
    struct Nuitka_FunctionObject *result = Nuitka_Function_New(
        impl_subprocess$$$function_57__communicate,
        const_str_plain__communicate,
#if PYTHON_VERSION >= 300
        const_str_digest_50731d62964f79d5fbaa6d7d14ba78dc,
#endif
        codeobj_b3fe41aa9e45c0ee93ce9ccbee67af61,
        NULL,
#if PYTHON_VERSION >= 300
        NULL,
        NULL,
#endif
        module_subprocess,
        NULL,
        0
    );

    return (PyObject *)result;
}



static PyObject *MAKE_FUNCTION_subprocess$$$function_58__save_input(  )
{
    struct Nuitka_FunctionObject *result = Nuitka_Function_New(
        impl_subprocess$$$function_58__save_input,
        const_str_plain__save_input,
#if PYTHON_VERSION >= 300
        const_str_digest_c3c4dae216dc74ce02c15a7aab8a2cb4,
#endif
        codeobj_d661584a44e154f3de3b31a0ecaf959b,
        NULL,
#if PYTHON_VERSION >= 300
        NULL,
        NULL,
#endif
        module_subprocess,
        NULL,
        0
    );

    return (PyObject *)result;
}



static PyObject *MAKE_FUNCTION_subprocess$$$function_59_send_signal(  )
{
    struct Nuitka_FunctionObject *result = Nuitka_Function_New(
        impl_subprocess$$$function_59_send_signal,
        const_str_plain_send_signal,
#if PYTHON_VERSION >= 300
        const_str_digest_228a056f29f7ed5444f6cd76fc5830dd,
#endif
        codeobj_a1324c786d80e8d4c439d7cf3e3789e5,
        NULL,
#if PYTHON_VERSION >= 300
        NULL,
        NULL,
#endif
        module_subprocess,
        const_str_digest_654362c78432fb5fb1e872a376dbf470,
        0
    );

    return (PyObject *)result;
}



static PyObject *MAKE_FUNCTION_subprocess$$$function_5___init__( PyObject *defaults )
{
    struct Nuitka_FunctionObject *result = Nuitka_Function_New(
        impl_subprocess$$$function_5___init__,
        const_str_plain___init__,
#if PYTHON_VERSION >= 300
        const_str_digest_ed42f52d2cf5b3ed02ea77ba3eb9cc1a,
#endif
        codeobj_44b15ad53077c34eed61c357f6697f1e,
        defaults,
#if PYTHON_VERSION >= 300
        NULL,
        NULL,
#endif
        module_subprocess,
        NULL,
        0
    );

    return (PyObject *)result;
}



static PyObject *MAKE_FUNCTION_subprocess$$$function_60_terminate(  )
{
    struct Nuitka_FunctionObject *result = Nuitka_Function_New(
        impl_subprocess$$$function_60_terminate,
        const_str_plain_terminate,
#if PYTHON_VERSION >= 300
        const_str_digest_01cd7c708ecfb9de8b6cc9427d24ca89,
#endif
        codeobj_d9743507f2d846e87fae35855b109ba4,
        NULL,
#if PYTHON_VERSION >= 300
        NULL,
        NULL,
#endif
        module_subprocess,
        const_str_digest_fe1b075d3056cfb43cf764c5a738a164,
        0
    );

    return (PyObject *)result;
}



static PyObject *MAKE_FUNCTION_subprocess$$$function_61_kill(  )
{
    struct Nuitka_FunctionObject *result = Nuitka_Function_New(
        impl_subprocess$$$function_61_kill,
        const_str_plain_kill,
#if PYTHON_VERSION >= 300
        const_str_digest_64c2209e0c91061515d2da3a8a8c5e6a,
#endif
        codeobj_4d1e11f8c56bd49daa3f383638f665b8,
        NULL,
#if PYTHON_VERSION >= 300
        NULL,
        NULL,
#endif
        module_subprocess,
        const_str_digest_6c36c7bffe6106b4899f065ba37e0541,
        0
    );

    return (PyObject *)result;
}



static PyObject *MAKE_FUNCTION_subprocess$$$function_6___str__(  )
{
    struct Nuitka_FunctionObject *result = Nuitka_Function_New(
        impl_subprocess$$$function_6___str__,
        const_str_plain___str__,
#if PYTHON_VERSION >= 300
        const_str_digest_b24355a78cfa4ecb206db6eb94a902c2,
#endif
        codeobj_323a42d7dbbe5bdc0b337dd2ef1c320e,
        NULL,
#if PYTHON_VERSION >= 300
        NULL,
        NULL,
#endif
        module_subprocess,
        NULL,
        0
    );

    return (PyObject *)result;
}



static PyObject *MAKE_FUNCTION_subprocess$$$function_7_stdout(  )
{
    struct Nuitka_FunctionObject *result = Nuitka_Function_New(
        impl_subprocess$$$function_7_stdout,
        const_str_plain_stdout,
#if PYTHON_VERSION >= 300
        const_str_digest_f58f57a774a6a0292157f8096bb67059,
#endif
        codeobj_a7894b3dfd0b661a4dc1a04158eea63e,
        NULL,
#if PYTHON_VERSION >= 300
        NULL,
        NULL,
#endif
        module_subprocess,
        NULL,
        0
    );

    return (PyObject *)result;
}



static PyObject *MAKE_FUNCTION_subprocess$$$function_8_stdout(  )
{
    struct Nuitka_FunctionObject *result = Nuitka_Function_New(
        impl_subprocess$$$function_8_stdout,
        const_str_plain_stdout,
#if PYTHON_VERSION >= 300
        const_str_digest_f58f57a774a6a0292157f8096bb67059,
#endif
        codeobj_90d6a8357ef671f37e6c6ec00861d6a2,
        NULL,
#if PYTHON_VERSION >= 300
        NULL,
        NULL,
#endif
        module_subprocess,
        NULL,
        0
    );

    return (PyObject *)result;
}



static PyObject *MAKE_FUNCTION_subprocess$$$function_9___init__( PyObject *kw_defaults )
{
    struct Nuitka_FunctionObject *result = Nuitka_Function_New(
        impl_subprocess$$$function_9___init__,
        const_str_plain___init__,
#if PYTHON_VERSION >= 300
        const_str_digest_b0f9489f19895430140f8c443e5e12cc,
#endif
        codeobj_0bf27aad494dc8f368128ec83ef540d3,
        NULL,
#if PYTHON_VERSION >= 300
        kw_defaults,
        NULL,
#endif
        module_subprocess,
        NULL,
        0
    );

    return (PyObject *)result;
}



#if PYTHON_VERSION >= 300
static struct PyModuleDef mdef_subprocess =
{
    PyModuleDef_HEAD_INIT,
    "subprocess",
    NULL,                /* m_doc */
    -1,                  /* m_size */
    NULL,                /* m_methods */
    NULL,                /* m_reload */
    NULL,                /* m_traverse */
    NULL,                /* m_clear */
    NULL,                /* m_free */
  };
#endif

extern PyObject *const_str_plain___compiled__;

extern PyObject *const_str_plain___package__;

#if PYTHON_VERSION >= 300
extern PyObject *const_str_dot;
extern PyObject *const_str_plain___loader__;
#endif

#if PYTHON_VERSION >= 340
extern PyObject *const_str_plain___spec__;
extern PyObject *const_str_plain__initializing;
extern PyObject *const_str_plain_submodule_search_locations;
#endif

extern void _initCompiledCellType();
extern void _initCompiledGeneratorType();
extern void _initCompiledFunctionType();
extern void _initCompiledMethodType();
extern void _initCompiledFrameType();
#if PYTHON_VERSION >= 350
extern void _initCompiledCoroutineTypes();
#endif
#if PYTHON_VERSION >= 360
extern void _initCompiledAsyncgenTypes();
#endif

extern PyTypeObject Nuitka_Loader_Type;

// The exported interface to CPython. On import of the module, this function
// gets called. It has to have an exact function name, in cases it's a shared
// library export. This is hidden behind the MOD_INIT_DECL.

MOD_INIT_DECL( subprocess )
{
#if defined(_NUITKA_EXE) || PYTHON_VERSION >= 300
    static bool _init_done = false;

    // Modules might be imported repeatedly, which is to be ignored.
    if ( _init_done )
    {
        return MOD_RETURN_VALUE( module_subprocess );
    }
    else
    {
        _init_done = true;
    }
#endif

#ifdef _NUITKA_MODULE
    // In case of a stand alone extension module, need to call initialization
    // the init here because that's the first and only time we are going to get
    // called here.

    // Initialize the constant values used.
    _initBuiltinModule();
    createGlobalConstants();

    /* Initialize the compiled types of Nuitka. */
    _initCompiledCellType();
    _initCompiledGeneratorType();
    _initCompiledFunctionType();
    _initCompiledMethodType();
    _initCompiledFrameType();
#if PYTHON_VERSION >= 350
    _initCompiledCoroutineTypes();
#endif
#if PYTHON_VERSION >= 360
    _initCompiledAsyncgenTypes();
#endif

#if PYTHON_VERSION < 300
    _initSlotCompare();
#endif
#if PYTHON_VERSION >= 270
    _initSlotIternext();
#endif

    patchBuiltinModule();
    patchTypeComparison();

    // Enable meta path based loader if not already done.
#ifdef _NUITKA_TRACE
    puts("subprocess: Calling setupMetaPathBasedLoader().");
#endif
    setupMetaPathBasedLoader();

#if PYTHON_VERSION >= 300
    patchInspectModule();
#endif

#endif

    /* The constants only used by this module are created now. */
#ifdef _NUITKA_TRACE
    puts("subprocess: Calling createModuleConstants().");
#endif
    createModuleConstants();

    /* The code objects used by this module are created now. */
#ifdef _NUITKA_TRACE
    puts("subprocess: Calling createModuleCodeObjects().");
#endif
    createModuleCodeObjects();

    // puts( "in initsubprocess" );

    // Create the module object first. There are no methods initially, all are
    // added dynamically in actual code only.  Also no "__doc__" is initially
    // set at this time, as it could not contain NUL characters this way, they
    // are instead set in early module code.  No "self" for modules, we have no
    // use for it.
#if PYTHON_VERSION < 300
    module_subprocess = Py_InitModule4(
        "subprocess",       // Module Name
        NULL,                    // No methods initially, all are added
                                 // dynamically in actual module code only.
        NULL,                    // No "__doc__" is initially set, as it could
                                 // not contain NUL this way, added early in
                                 // actual code.
        NULL,                    // No self for modules, we don't use it.
        PYTHON_API_VERSION
    );
#else

    module_subprocess = PyModule_Create( &mdef_subprocess );
#endif

    moduledict_subprocess = MODULE_DICT( module_subprocess );

    // Set __compiled__ to what it we know.
    UPDATE_STRING_DICT1(
        moduledict_subprocess,
        (Nuitka_StringObject *)const_str_plain___compiled__,
        Nuitka_dunder_compiled_value
    );

    // Update "__package__" value to what it ought to be.
    {
#if 0
        PyObject *module_name = GET_STRING_DICT_VALUE( moduledict_subprocess, (Nuitka_StringObject *)const_str_plain___name__ );

        UPDATE_STRING_DICT1(
            moduledict_subprocess,
            (Nuitka_StringObject *)const_str_plain___package__,
            module_name
        );
#else

#if PYTHON_VERSION < 300
        PyObject *module_name = GET_STRING_DICT_VALUE( moduledict_subprocess, (Nuitka_StringObject *)const_str_plain___name__ );
        char const *module_name_cstr = PyString_AS_STRING( module_name );

        char const *last_dot = strrchr( module_name_cstr, '.' );

        if ( last_dot != NULL )
        {
            UPDATE_STRING_DICT1(
                moduledict_subprocess,
                (Nuitka_StringObject *)const_str_plain___package__,
                PyString_FromStringAndSize( module_name_cstr, last_dot - module_name_cstr )
            );
        }
#else
        PyObject *module_name = GET_STRING_DICT_VALUE( moduledict_subprocess, (Nuitka_StringObject *)const_str_plain___name__ );
        Py_ssize_t dot_index = PyUnicode_Find( module_name, const_str_dot, 0, PyUnicode_GetLength( module_name ), -1 );

        if ( dot_index != -1 )
        {
            UPDATE_STRING_DICT1(
                moduledict_subprocess,
                (Nuitka_StringObject *)const_str_plain___package__,
                PyUnicode_Substring( module_name, 0, dot_index )
            );
        }
#endif
#endif
    }

    CHECK_OBJECT( module_subprocess );

// Seems to work for Python2.7 out of the box, but for Python3, the module
// doesn't automatically enter "sys.modules", so do it manually.
#if PYTHON_VERSION >= 300
    {
        int r = PyObject_SetItem( PyImport_GetModuleDict(), const_str_plain_subprocess, module_subprocess );

        assert( r != -1 );
    }
#endif

    // For deep importing of a module we need to have "__builtins__", so we set
    // it ourselves in the same way than CPython does. Note: This must be done
    // before the frame object is allocated, or else it may fail.

    if ( GET_STRING_DICT_VALUE( moduledict_subprocess, (Nuitka_StringObject *)const_str_plain___builtins__ ) == NULL )
    {
        PyObject *value = (PyObject *)builtin_module;

        // Check if main module, not a dict then but the module itself.
#if !defined(_NUITKA_EXE) || !0
        value = PyModule_GetDict( value );
#endif

        UPDATE_STRING_DICT0( moduledict_subprocess, (Nuitka_StringObject *)const_str_plain___builtins__, value );
    }

#if PYTHON_VERSION >= 300
    UPDATE_STRING_DICT0( moduledict_subprocess, (Nuitka_StringObject *)const_str_plain___loader__, (PyObject *)&Nuitka_Loader_Type );
#endif

#if PYTHON_VERSION >= 340
// Set the "__spec__" value

#if 0
    // Main modules just get "None" as spec.
    UPDATE_STRING_DICT0( moduledict_subprocess, (Nuitka_StringObject *)const_str_plain___spec__, Py_None );
#else
    // Other modules get a "ModuleSpec" from the standard mechanism.
    {
        PyObject *bootstrap_module = PyImport_ImportModule("importlib._bootstrap");
        CHECK_OBJECT( bootstrap_module );
        PyObject *module_spec_class = PyObject_GetAttrString( bootstrap_module, "ModuleSpec" );
        Py_DECREF( bootstrap_module );

        PyObject *args[] = {
            GET_STRING_DICT_VALUE( moduledict_subprocess, (Nuitka_StringObject *)const_str_plain___name__ ),
            (PyObject *)&Nuitka_Loader_Type
        };

        PyObject *spec_value = CALL_FUNCTION_WITH_ARGS2(
            module_spec_class,
            args
        );
        Py_DECREF( module_spec_class );

        // We can assume this to never fail, or else we are in trouble anyway.
        CHECK_OBJECT( spec_value );

// For packages set the submodule search locations as well, even if to empty
// list, so investigating code will consider it a package.
#if 0
        SET_ATTRIBUTE( spec_value, const_str_plain_submodule_search_locations, PyList_New(0) );
#endif

// Mark the execution in the "__spec__" value.
        SET_ATTRIBUTE( spec_value, const_str_plain__initializing, Py_True );

        UPDATE_STRING_DICT1( moduledict_subprocess, (Nuitka_StringObject *)const_str_plain___spec__, spec_value );
    }
#endif
#endif

    // Temp variables if any
    PyObject *outline_0_var___class__ = NULL;
    PyObject *outline_1_var___class__ = NULL;
    PyObject *outline_2_var___class__ = NULL;
    PyObject *outline_3_var___class__ = NULL;
    PyObject *outline_4_var___class__ = NULL;
    PyObject *outline_5_var___class__ = NULL;
    PyObject *outline_6_var___class__ = NULL;
    PyObject *tmp_class_creation_1__bases = NULL;
    PyObject *tmp_class_creation_1__class_decl_dict = NULL;
    PyObject *tmp_class_creation_1__metaclass = NULL;
    PyObject *tmp_class_creation_1__prepared = NULL;
    PyObject *tmp_class_creation_2__bases = NULL;
    PyObject *tmp_class_creation_2__bases_orig = NULL;
    PyObject *tmp_class_creation_2__class_decl_dict = NULL;
    PyObject *tmp_class_creation_2__metaclass = NULL;
    PyObject *tmp_class_creation_2__prepared = NULL;
    PyObject *tmp_class_creation_3__bases = NULL;
    PyObject *tmp_class_creation_3__bases_orig = NULL;
    PyObject *tmp_class_creation_3__class_decl_dict = NULL;
    PyObject *tmp_class_creation_3__metaclass = NULL;
    PyObject *tmp_class_creation_3__prepared = NULL;
    PyObject *tmp_class_creation_4__class_decl_dict = NULL;
    PyObject *tmp_class_creation_4__metaclass = NULL;
    PyObject *tmp_class_creation_4__prepared = NULL;
    PyObject *tmp_class_creation_5__bases = NULL;
    PyObject *tmp_class_creation_5__class_decl_dict = NULL;
    PyObject *tmp_class_creation_5__metaclass = NULL;
    PyObject *tmp_class_creation_5__prepared = NULL;
    PyObject *tmp_class_creation_6__bases = NULL;
    PyObject *tmp_class_creation_6__class_decl_dict = NULL;
    PyObject *tmp_class_creation_6__metaclass = NULL;
    PyObject *tmp_class_creation_6__prepared = NULL;
    PyObject *tmp_class_creation_7__bases = NULL;
    PyObject *tmp_class_creation_7__class_decl_dict = NULL;
    PyObject *tmp_class_creation_7__metaclass = NULL;
    PyObject *tmp_class_creation_7__prepared = NULL;
    PyObject *tmp_import_from_1__module = NULL;
    struct Nuitka_FrameObject *frame_3b8ded27a474e748966db3dc93ed4330;
    NUITKA_MAY_BE_UNUSED char const *type_description_1 = NULL;
    bool tmp_result;
    PyObject *exception_type = NULL;
    PyObject *exception_value = NULL;
    PyTracebackObject *exception_tb = NULL;
    NUITKA_MAY_BE_UNUSED int exception_lineno = 0;
    int tmp_res;
    PyObject *tmp_dictdel_dict;
    PyObject *tmp_dictdel_key;
    PyObject *locals_subprocess_57 = NULL;
    PyObject *tmp_dictset_value;
    PyObject *exception_keeper_type_1;
    PyObject *exception_keeper_value_1;
    PyTracebackObject *exception_keeper_tb_1;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_1;
    PyObject *exception_keeper_type_2;
    PyObject *exception_keeper_value_2;
    PyTracebackObject *exception_keeper_tb_2;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_2;
    PyObject *exception_keeper_type_3;
    PyObject *exception_keeper_value_3;
    PyTracebackObject *exception_keeper_tb_3;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_3;
    PyObject *locals_subprocess_60 = NULL;
    struct Nuitka_FrameObject *frame_511b93c0afbf8069afc1fef349c67d72_2;
    NUITKA_MAY_BE_UNUSED char const *type_description_2 = NULL;
    static struct Nuitka_FrameObject *cache_frame_511b93c0afbf8069afc1fef349c67d72_2 = NULL;
    PyObject *exception_keeper_type_4;
    PyObject *exception_keeper_value_4;
    PyTracebackObject *exception_keeper_tb_4;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_4;
    PyObject *exception_keeper_type_5;
    PyObject *exception_keeper_value_5;
    PyTracebackObject *exception_keeper_tb_5;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_5;
    PyObject *exception_keeper_type_6;
    PyObject *exception_keeper_value_6;
    PyTracebackObject *exception_keeper_tb_6;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_6;
    PyObject *locals_subprocess_97 = NULL;
    struct Nuitka_FrameObject *frame_276abd04051027d5fca15e73c89233a1_3;
    NUITKA_MAY_BE_UNUSED char const *type_description_3 = NULL;
    static struct Nuitka_FrameObject *cache_frame_276abd04051027d5fca15e73c89233a1_3 = NULL;
    PyObject *exception_keeper_type_7;
    PyObject *exception_keeper_value_7;
    PyTracebackObject *exception_keeper_tb_7;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_7;
    PyObject *exception_keeper_type_8;
    PyObject *exception_keeper_value_8;
    PyTracebackObject *exception_keeper_tb_8;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_8;
    PyObject *exception_keeper_type_9;
    PyObject *exception_keeper_value_9;
    PyTracebackObject *exception_keeper_tb_9;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_9;
    PyObject *locals_subprocess_129 = NULL;
    struct Nuitka_FrameObject *frame_c34aed000ce9d0c2f8b25617b8641037_4;
    NUITKA_MAY_BE_UNUSED char const *type_description_4 = NULL;
    static struct Nuitka_FrameObject *cache_frame_c34aed000ce9d0c2f8b25617b8641037_4 = NULL;
    PyObject *exception_keeper_type_10;
    PyObject *exception_keeper_value_10;
    PyTracebackObject *exception_keeper_tb_10;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_10;
    PyObject *exception_keeper_type_11;
    PyObject *exception_keeper_value_11;
    PyTracebackObject *exception_keeper_tb_11;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_11;
    PyObject *exception_keeper_type_12;
    PyObject *exception_keeper_value_12;
    PyTracebackObject *exception_keeper_tb_12;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_12;
    PyObject *locals_subprocess_199 = NULL;
    struct Nuitka_FrameObject *frame_5e53de9cfb00a7770460518e667a6e26_5;
    NUITKA_MAY_BE_UNUSED char const *type_description_5 = NULL;
    static struct Nuitka_FrameObject *cache_frame_5e53de9cfb00a7770460518e667a6e26_5 = NULL;
    PyObject *exception_keeper_type_13;
    PyObject *exception_keeper_value_13;
    PyTracebackObject *exception_keeper_tb_13;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_13;
    PyObject *exception_keeper_type_14;
    PyObject *exception_keeper_value_14;
    PyTracebackObject *exception_keeper_tb_14;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_14;
    PyObject *exception_keeper_type_15;
    PyObject *exception_keeper_value_15;
    PyTracebackObject *exception_keeper_tb_15;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_15;
    PyObject *locals_subprocess_398 = NULL;
    struct Nuitka_FrameObject *frame_975e88a8e14ee44e8b0b0239cd447315_6;
    NUITKA_MAY_BE_UNUSED char const *type_description_6 = NULL;
    static struct Nuitka_FrameObject *cache_frame_975e88a8e14ee44e8b0b0239cd447315_6 = NULL;
    PyObject *exception_keeper_type_16;
    PyObject *exception_keeper_value_16;
    PyTracebackObject *exception_keeper_tb_16;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_16;
    PyObject *exception_keeper_type_17;
    PyObject *exception_keeper_value_17;
    PyTracebackObject *exception_keeper_tb_17;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_17;
    PyObject *exception_keeper_type_18;
    PyObject *exception_keeper_value_18;
    PyTracebackObject *exception_keeper_tb_18;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_18;
    PyObject *locals_subprocess_608 = NULL;
    struct Nuitka_FrameObject *frame_175fb9997171de0186ab4a7d7aec4913_7;
    NUITKA_MAY_BE_UNUSED char const *type_description_7 = NULL;
    static struct Nuitka_FrameObject *cache_frame_175fb9997171de0186ab4a7d7aec4913_7 = NULL;
    PyObject *exception_keeper_type_19;
    PyObject *exception_keeper_value_19;
    PyTracebackObject *exception_keeper_tb_19;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_19;
    PyObject *exception_keeper_type_20;
    PyObject *exception_keeper_value_20;
    PyTracebackObject *exception_keeper_tb_20;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_20;
    PyObject *exception_keeper_type_21;
    PyObject *exception_keeper_value_21;
    PyTracebackObject *exception_keeper_tb_21;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_21;

    // Module code.
    {
        PyObject *tmp_assign_source_1;
        tmp_assign_source_1 = const_str_digest_eb773ccb8bd268b82caeedc82ba70185;
        UPDATE_STRING_DICT0( moduledict_subprocess, (Nuitka_StringObject *)const_str_plain___doc__, tmp_assign_source_1 );
    }
    {
        PyObject *tmp_assign_source_2;
        tmp_assign_source_2 = module_filename_obj;
        UPDATE_STRING_DICT0( moduledict_subprocess, (Nuitka_StringObject *)const_str_plain___file__, tmp_assign_source_2 );
    }
    // Frame without reuse.
    frame_3b8ded27a474e748966db3dc93ed4330 = MAKE_MODULE_FRAME( codeobj_3b8ded27a474e748966db3dc93ed4330, module_subprocess );

    // Push the new frame as the currently active one, and we should be exclusively
    // owning it.
    pushFrameStack( frame_3b8ded27a474e748966db3dc93ed4330 );
    assert( Py_REFCNT( frame_3b8ded27a474e748966db3dc93ed4330 ) == 2 );

    // Framed code:
    {
        PyObject *tmp_assattr_name_1;
        PyObject *tmp_assattr_target_1;
        PyObject *tmp_mvar_value_1;
        tmp_assattr_name_1 = module_filename_obj;
        tmp_mvar_value_1 = GET_STRING_DICT_VALUE( moduledict_subprocess, (Nuitka_StringObject *)const_str_plain___spec__ );

        if (unlikely( tmp_mvar_value_1 == NULL ))
        {
            tmp_mvar_value_1 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain___spec__ );
        }

        CHECK_OBJECT( tmp_mvar_value_1 );
        tmp_assattr_target_1 = tmp_mvar_value_1;
        tmp_result = SET_ATTRIBUTE( tmp_assattr_target_1, const_str_plain_origin, tmp_assattr_name_1 );
        if ( tmp_result == false )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 1;

            goto frame_exception_exit_1;
        }
    }
    {
        PyObject *tmp_assattr_name_2;
        PyObject *tmp_assattr_target_2;
        PyObject *tmp_mvar_value_2;
        tmp_assattr_name_2 = Py_True;
        tmp_mvar_value_2 = GET_STRING_DICT_VALUE( moduledict_subprocess, (Nuitka_StringObject *)const_str_plain___spec__ );

        if (unlikely( tmp_mvar_value_2 == NULL ))
        {
            tmp_mvar_value_2 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain___spec__ );
        }

        CHECK_OBJECT( tmp_mvar_value_2 );
        tmp_assattr_target_2 = tmp_mvar_value_2;
        tmp_result = SET_ATTRIBUTE( tmp_assattr_target_2, const_str_plain_has_location, tmp_assattr_name_2 );
        if ( tmp_result == false )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 1;

            goto frame_exception_exit_1;
        }
    }
    {
        PyObject *tmp_assign_source_3;
        tmp_assign_source_3 = Py_None;
        UPDATE_STRING_DICT0( moduledict_subprocess, (Nuitka_StringObject *)const_str_plain___cached__, tmp_assign_source_3 );
    }
    {
        PyObject *tmp_assign_source_4;
        PyObject *tmp_name_name_1;
        PyObject *tmp_globals_name_1;
        PyObject *tmp_locals_name_1;
        PyObject *tmp_fromlist_name_1;
        PyObject *tmp_level_name_1;
        tmp_name_name_1 = const_str_plain_sys;
        tmp_globals_name_1 = (PyObject *)moduledict_subprocess;
        tmp_locals_name_1 = Py_None;
        tmp_fromlist_name_1 = Py_None;
        tmp_level_name_1 = const_int_0;
        frame_3b8ded27a474e748966db3dc93ed4330->m_frame.f_lineno = 44;
        tmp_assign_source_4 = IMPORT_MODULE5( tmp_name_name_1, tmp_globals_name_1, tmp_locals_name_1, tmp_fromlist_name_1, tmp_level_name_1 );
        assert( !(tmp_assign_source_4 == NULL) );
        UPDATE_STRING_DICT1( moduledict_subprocess, (Nuitka_StringObject *)const_str_plain_sys, tmp_assign_source_4 );
    }
    {
        PyObject *tmp_assign_source_5;
        PyObject *tmp_compexpr_left_1;
        PyObject *tmp_compexpr_right_1;
        PyObject *tmp_source_name_1;
        PyObject *tmp_mvar_value_3;
        tmp_mvar_value_3 = GET_STRING_DICT_VALUE( moduledict_subprocess, (Nuitka_StringObject *)const_str_plain_sys );

        if (unlikely( tmp_mvar_value_3 == NULL ))
        {
            tmp_mvar_value_3 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_sys );
        }

        CHECK_OBJECT( tmp_mvar_value_3 );
        tmp_source_name_1 = tmp_mvar_value_3;
        tmp_compexpr_left_1 = LOOKUP_ATTRIBUTE( tmp_source_name_1, const_str_plain_platform );
        if ( tmp_compexpr_left_1 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 45;

            goto frame_exception_exit_1;
        }
        tmp_compexpr_right_1 = const_str_plain_win32;
        tmp_assign_source_5 = RICH_COMPARE_EQ_OBJECT_OBJECT_NORECURSE( tmp_compexpr_left_1, tmp_compexpr_right_1 );
        Py_DECREF( tmp_compexpr_left_1 );
        if ( tmp_assign_source_5 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 45;

            goto frame_exception_exit_1;
        }
        UPDATE_STRING_DICT1( moduledict_subprocess, (Nuitka_StringObject *)const_str_plain__mswindows, tmp_assign_source_5 );
    }
    {
        PyObject *tmp_assign_source_6;
        PyObject *tmp_name_name_2;
        PyObject *tmp_globals_name_2;
        PyObject *tmp_locals_name_2;
        PyObject *tmp_fromlist_name_2;
        PyObject *tmp_level_name_2;
        tmp_name_name_2 = const_str_plain_io;
        tmp_globals_name_2 = (PyObject *)moduledict_subprocess;
        tmp_locals_name_2 = Py_None;
        tmp_fromlist_name_2 = Py_None;
        tmp_level_name_2 = const_int_0;
        frame_3b8ded27a474e748966db3dc93ed4330->m_frame.f_lineno = 47;
        tmp_assign_source_6 = IMPORT_MODULE5( tmp_name_name_2, tmp_globals_name_2, tmp_locals_name_2, tmp_fromlist_name_2, tmp_level_name_2 );
        if ( tmp_assign_source_6 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 47;

            goto frame_exception_exit_1;
        }
        UPDATE_STRING_DICT1( moduledict_subprocess, (Nuitka_StringObject *)const_str_plain_io, tmp_assign_source_6 );
    }
    {
        PyObject *tmp_assign_source_7;
        PyObject *tmp_name_name_3;
        PyObject *tmp_globals_name_3;
        PyObject *tmp_locals_name_3;
        PyObject *tmp_fromlist_name_3;
        PyObject *tmp_level_name_3;
        tmp_name_name_3 = const_str_plain_os;
        tmp_globals_name_3 = (PyObject *)moduledict_subprocess;
        tmp_locals_name_3 = Py_None;
        tmp_fromlist_name_3 = Py_None;
        tmp_level_name_3 = const_int_0;
        frame_3b8ded27a474e748966db3dc93ed4330->m_frame.f_lineno = 48;
        tmp_assign_source_7 = IMPORT_MODULE5( tmp_name_name_3, tmp_globals_name_3, tmp_locals_name_3, tmp_fromlist_name_3, tmp_level_name_3 );
        if ( tmp_assign_source_7 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 48;

            goto frame_exception_exit_1;
        }
        UPDATE_STRING_DICT1( moduledict_subprocess, (Nuitka_StringObject *)const_str_plain_os, tmp_assign_source_7 );
    }
    {
        PyObject *tmp_assign_source_8;
        PyObject *tmp_name_name_4;
        PyObject *tmp_globals_name_4;
        PyObject *tmp_locals_name_4;
        PyObject *tmp_fromlist_name_4;
        PyObject *tmp_level_name_4;
        tmp_name_name_4 = const_str_plain_time;
        tmp_globals_name_4 = (PyObject *)moduledict_subprocess;
        tmp_locals_name_4 = Py_None;
        tmp_fromlist_name_4 = Py_None;
        tmp_level_name_4 = const_int_0;
        frame_3b8ded27a474e748966db3dc93ed4330->m_frame.f_lineno = 49;
        tmp_assign_source_8 = IMPORT_MODULE5( tmp_name_name_4, tmp_globals_name_4, tmp_locals_name_4, tmp_fromlist_name_4, tmp_level_name_4 );
        assert( !(tmp_assign_source_8 == NULL) );
        UPDATE_STRING_DICT1( moduledict_subprocess, (Nuitka_StringObject *)const_str_plain_time, tmp_assign_source_8 );
    }
    {
        PyObject *tmp_assign_source_9;
        PyObject *tmp_name_name_5;
        PyObject *tmp_globals_name_5;
        PyObject *tmp_locals_name_5;
        PyObject *tmp_fromlist_name_5;
        PyObject *tmp_level_name_5;
        tmp_name_name_5 = const_str_plain_signal;
        tmp_globals_name_5 = (PyObject *)moduledict_subprocess;
        tmp_locals_name_5 = Py_None;
        tmp_fromlist_name_5 = Py_None;
        tmp_level_name_5 = const_int_0;
        frame_3b8ded27a474e748966db3dc93ed4330->m_frame.f_lineno = 50;
        tmp_assign_source_9 = IMPORT_MODULE5( tmp_name_name_5, tmp_globals_name_5, tmp_locals_name_5, tmp_fromlist_name_5, tmp_level_name_5 );
        if ( tmp_assign_source_9 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 50;

            goto frame_exception_exit_1;
        }
        UPDATE_STRING_DICT1( moduledict_subprocess, (Nuitka_StringObject *)const_str_plain_signal, tmp_assign_source_9 );
    }
    {
        PyObject *tmp_assign_source_10;
        PyObject *tmp_name_name_6;
        PyObject *tmp_globals_name_6;
        PyObject *tmp_locals_name_6;
        PyObject *tmp_fromlist_name_6;
        PyObject *tmp_level_name_6;
        tmp_name_name_6 = const_str_plain_builtins;
        tmp_globals_name_6 = (PyObject *)moduledict_subprocess;
        tmp_locals_name_6 = Py_None;
        tmp_fromlist_name_6 = Py_None;
        tmp_level_name_6 = const_int_0;
        frame_3b8ded27a474e748966db3dc93ed4330->m_frame.f_lineno = 51;
        tmp_assign_source_10 = IMPORT_MODULE5( tmp_name_name_6, tmp_globals_name_6, tmp_locals_name_6, tmp_fromlist_name_6, tmp_level_name_6 );
        assert( !(tmp_assign_source_10 == NULL) );
        UPDATE_STRING_DICT1( moduledict_subprocess, (Nuitka_StringObject *)const_str_plain_builtins, tmp_assign_source_10 );
    }
    {
        PyObject *tmp_assign_source_11;
        PyObject *tmp_name_name_7;
        PyObject *tmp_globals_name_7;
        PyObject *tmp_locals_name_7;
        PyObject *tmp_fromlist_name_7;
        PyObject *tmp_level_name_7;
        tmp_name_name_7 = const_str_plain_warnings;
        tmp_globals_name_7 = (PyObject *)moduledict_subprocess;
        tmp_locals_name_7 = Py_None;
        tmp_fromlist_name_7 = Py_None;
        tmp_level_name_7 = const_int_0;
        frame_3b8ded27a474e748966db3dc93ed4330->m_frame.f_lineno = 52;
        tmp_assign_source_11 = IMPORT_MODULE5( tmp_name_name_7, tmp_globals_name_7, tmp_locals_name_7, tmp_fromlist_name_7, tmp_level_name_7 );
        if ( tmp_assign_source_11 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 52;

            goto frame_exception_exit_1;
        }
        UPDATE_STRING_DICT1( moduledict_subprocess, (Nuitka_StringObject *)const_str_plain_warnings, tmp_assign_source_11 );
    }
    {
        PyObject *tmp_assign_source_12;
        PyObject *tmp_name_name_8;
        PyObject *tmp_globals_name_8;
        PyObject *tmp_locals_name_8;
        PyObject *tmp_fromlist_name_8;
        PyObject *tmp_level_name_8;
        tmp_name_name_8 = const_str_plain_errno;
        tmp_globals_name_8 = (PyObject *)moduledict_subprocess;
        tmp_locals_name_8 = Py_None;
        tmp_fromlist_name_8 = Py_None;
        tmp_level_name_8 = const_int_0;
        frame_3b8ded27a474e748966db3dc93ed4330->m_frame.f_lineno = 53;
        tmp_assign_source_12 = IMPORT_MODULE5( tmp_name_name_8, tmp_globals_name_8, tmp_locals_name_8, tmp_fromlist_name_8, tmp_level_name_8 );
        assert( !(tmp_assign_source_12 == NULL) );
        UPDATE_STRING_DICT1( moduledict_subprocess, (Nuitka_StringObject *)const_str_plain_errno, tmp_assign_source_12 );
    }
    {
        PyObject *tmp_assign_source_13;
        PyObject *tmp_import_name_from_1;
        PyObject *tmp_name_name_9;
        PyObject *tmp_globals_name_9;
        PyObject *tmp_locals_name_9;
        PyObject *tmp_fromlist_name_9;
        PyObject *tmp_level_name_9;
        tmp_name_name_9 = const_str_plain_time;
        tmp_globals_name_9 = (PyObject *)moduledict_subprocess;
        tmp_locals_name_9 = Py_None;
        tmp_fromlist_name_9 = const_tuple_str_plain_monotonic_tuple;
        tmp_level_name_9 = const_int_0;
        frame_3b8ded27a474e748966db3dc93ed4330->m_frame.f_lineno = 54;
        tmp_import_name_from_1 = IMPORT_MODULE5( tmp_name_name_9, tmp_globals_name_9, tmp_locals_name_9, tmp_fromlist_name_9, tmp_level_name_9 );
        assert( !(tmp_import_name_from_1 == NULL) );
        tmp_assign_source_13 = IMPORT_NAME( tmp_import_name_from_1, const_str_plain_monotonic );
        Py_DECREF( tmp_import_name_from_1 );
        assert( !(tmp_assign_source_13 == NULL) );
        UPDATE_STRING_DICT1( moduledict_subprocess, (Nuitka_StringObject *)const_str_plain__time, tmp_assign_source_13 );
    }
    // Tried code:
    {
        PyObject *tmp_assign_source_14;
        PyObject *tmp_dircall_arg1_1;
        tmp_dircall_arg1_1 = const_tuple_type_Exception_tuple;
        Py_INCREF( tmp_dircall_arg1_1 );

        {
            PyObject *dir_call_args[] = {tmp_dircall_arg1_1};
            tmp_assign_source_14 = impl___internal__$$$function_1__mro_entries_conversion( dir_call_args );
        }
        if ( tmp_assign_source_14 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 57;

            goto try_except_handler_1;
        }
        assert( tmp_class_creation_1__bases == NULL );
        tmp_class_creation_1__bases = tmp_assign_source_14;
    }
    {
        PyObject *tmp_assign_source_15;
        tmp_assign_source_15 = PyDict_New();
        assert( tmp_class_creation_1__class_decl_dict == NULL );
        tmp_class_creation_1__class_decl_dict = tmp_assign_source_15;
    }
    {
        PyObject *tmp_assign_source_16;
        PyObject *tmp_metaclass_name_1;
        nuitka_bool tmp_condition_result_1;
        PyObject *tmp_key_name_1;
        PyObject *tmp_dict_name_1;
        PyObject *tmp_dict_name_2;
        PyObject *tmp_key_name_2;
        nuitka_bool tmp_condition_result_2;
        int tmp_truth_name_1;
        PyObject *tmp_type_arg_1;
        PyObject *tmp_subscribed_name_1;
        PyObject *tmp_subscript_name_1;
        PyObject *tmp_bases_name_1;
        tmp_key_name_1 = const_str_plain_metaclass;
        CHECK_OBJECT( tmp_class_creation_1__class_decl_dict );
        tmp_dict_name_1 = tmp_class_creation_1__class_decl_dict;
        tmp_res = PyDict_Contains( tmp_dict_name_1, tmp_key_name_1 );
        if ( tmp_res == -1 )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 57;

            goto try_except_handler_1;
        }
        tmp_condition_result_1 = ( tmp_res != 0 ) ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
        if ( tmp_condition_result_1 == NUITKA_BOOL_TRUE )
        {
            goto condexpr_true_1;
        }
        else
        {
            goto condexpr_false_1;
        }
        condexpr_true_1:;
        CHECK_OBJECT( tmp_class_creation_1__class_decl_dict );
        tmp_dict_name_2 = tmp_class_creation_1__class_decl_dict;
        tmp_key_name_2 = const_str_plain_metaclass;
        tmp_metaclass_name_1 = DICT_GET_ITEM( tmp_dict_name_2, tmp_key_name_2 );
        if ( tmp_metaclass_name_1 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 57;

            goto try_except_handler_1;
        }
        goto condexpr_end_1;
        condexpr_false_1:;
        CHECK_OBJECT( tmp_class_creation_1__bases );
        tmp_truth_name_1 = CHECK_IF_TRUE( tmp_class_creation_1__bases );
        if ( tmp_truth_name_1 == -1 )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 57;

            goto try_except_handler_1;
        }
        tmp_condition_result_2 = tmp_truth_name_1 == 1 ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
        if ( tmp_condition_result_2 == NUITKA_BOOL_TRUE )
        {
            goto condexpr_true_2;
        }
        else
        {
            goto condexpr_false_2;
        }
        condexpr_true_2:;
        CHECK_OBJECT( tmp_class_creation_1__bases );
        tmp_subscribed_name_1 = tmp_class_creation_1__bases;
        tmp_subscript_name_1 = const_int_0;
        tmp_type_arg_1 = LOOKUP_SUBSCRIPT_CONST( tmp_subscribed_name_1, tmp_subscript_name_1, 0 );
        if ( tmp_type_arg_1 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 57;

            goto try_except_handler_1;
        }
        tmp_metaclass_name_1 = BUILTIN_TYPE1( tmp_type_arg_1 );
        Py_DECREF( tmp_type_arg_1 );
        if ( tmp_metaclass_name_1 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 57;

            goto try_except_handler_1;
        }
        goto condexpr_end_2;
        condexpr_false_2:;
        tmp_metaclass_name_1 = (PyObject *)&PyType_Type;
        Py_INCREF( tmp_metaclass_name_1 );
        condexpr_end_2:;
        condexpr_end_1:;
        CHECK_OBJECT( tmp_class_creation_1__bases );
        tmp_bases_name_1 = tmp_class_creation_1__bases;
        tmp_assign_source_16 = SELECT_METACLASS( tmp_metaclass_name_1, tmp_bases_name_1 );
        Py_DECREF( tmp_metaclass_name_1 );
        if ( tmp_assign_source_16 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 57;

            goto try_except_handler_1;
        }
        assert( tmp_class_creation_1__metaclass == NULL );
        tmp_class_creation_1__metaclass = tmp_assign_source_16;
    }
    {
        nuitka_bool tmp_condition_result_3;
        PyObject *tmp_key_name_3;
        PyObject *tmp_dict_name_3;
        tmp_key_name_3 = const_str_plain_metaclass;
        CHECK_OBJECT( tmp_class_creation_1__class_decl_dict );
        tmp_dict_name_3 = tmp_class_creation_1__class_decl_dict;
        tmp_res = PyDict_Contains( tmp_dict_name_3, tmp_key_name_3 );
        if ( tmp_res == -1 )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 57;

            goto try_except_handler_1;
        }
        tmp_condition_result_3 = ( tmp_res != 0 ) ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
        if ( tmp_condition_result_3 == NUITKA_BOOL_TRUE )
        {
            goto branch_yes_1;
        }
        else
        {
            goto branch_no_1;
        }
        branch_yes_1:;
        CHECK_OBJECT( tmp_class_creation_1__class_decl_dict );
        tmp_dictdel_dict = tmp_class_creation_1__class_decl_dict;
        tmp_dictdel_key = const_str_plain_metaclass;
        tmp_result = DICT_REMOVE_ITEM( tmp_dictdel_dict, tmp_dictdel_key );
        if ( tmp_result == false )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 57;

            goto try_except_handler_1;
        }
        branch_no_1:;
    }
    {
        nuitka_bool tmp_condition_result_4;
        PyObject *tmp_source_name_2;
        CHECK_OBJECT( tmp_class_creation_1__metaclass );
        tmp_source_name_2 = tmp_class_creation_1__metaclass;
        tmp_res = PyObject_HasAttr( tmp_source_name_2, const_str_plain___prepare__ );
        tmp_condition_result_4 = ( tmp_res != 0 ) ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
        if ( tmp_condition_result_4 == NUITKA_BOOL_TRUE )
        {
            goto branch_yes_2;
        }
        else
        {
            goto branch_no_2;
        }
        branch_yes_2:;
        {
            PyObject *tmp_assign_source_17;
            PyObject *tmp_called_name_1;
            PyObject *tmp_source_name_3;
            PyObject *tmp_args_name_1;
            PyObject *tmp_tuple_element_1;
            PyObject *tmp_kw_name_1;
            CHECK_OBJECT( tmp_class_creation_1__metaclass );
            tmp_source_name_3 = tmp_class_creation_1__metaclass;
            tmp_called_name_1 = LOOKUP_ATTRIBUTE( tmp_source_name_3, const_str_plain___prepare__ );
            if ( tmp_called_name_1 == NULL )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 57;

                goto try_except_handler_1;
            }
            tmp_tuple_element_1 = const_str_plain_SubprocessError;
            tmp_args_name_1 = PyTuple_New( 2 );
            Py_INCREF( tmp_tuple_element_1 );
            PyTuple_SET_ITEM( tmp_args_name_1, 0, tmp_tuple_element_1 );
            CHECK_OBJECT( tmp_class_creation_1__bases );
            tmp_tuple_element_1 = tmp_class_creation_1__bases;
            Py_INCREF( tmp_tuple_element_1 );
            PyTuple_SET_ITEM( tmp_args_name_1, 1, tmp_tuple_element_1 );
            CHECK_OBJECT( tmp_class_creation_1__class_decl_dict );
            tmp_kw_name_1 = tmp_class_creation_1__class_decl_dict;
            frame_3b8ded27a474e748966db3dc93ed4330->m_frame.f_lineno = 57;
            tmp_assign_source_17 = CALL_FUNCTION( tmp_called_name_1, tmp_args_name_1, tmp_kw_name_1 );
            Py_DECREF( tmp_called_name_1 );
            Py_DECREF( tmp_args_name_1 );
            if ( tmp_assign_source_17 == NULL )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 57;

                goto try_except_handler_1;
            }
            assert( tmp_class_creation_1__prepared == NULL );
            tmp_class_creation_1__prepared = tmp_assign_source_17;
        }
        {
            nuitka_bool tmp_condition_result_5;
            PyObject *tmp_operand_name_1;
            PyObject *tmp_source_name_4;
            CHECK_OBJECT( tmp_class_creation_1__prepared );
            tmp_source_name_4 = tmp_class_creation_1__prepared;
            tmp_res = PyObject_HasAttr( tmp_source_name_4, const_str_plain___getitem__ );
            tmp_operand_name_1 = ( tmp_res != 0 ) ? Py_True : Py_False;
            tmp_res = CHECK_IF_TRUE( tmp_operand_name_1 );
            if ( tmp_res == -1 )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 57;

                goto try_except_handler_1;
            }
            tmp_condition_result_5 = ( tmp_res == 0 ) ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
            if ( tmp_condition_result_5 == NUITKA_BOOL_TRUE )
            {
                goto branch_yes_3;
            }
            else
            {
                goto branch_no_3;
            }
            branch_yes_3:;
            {
                PyObject *tmp_raise_type_1;
                PyObject *tmp_raise_value_1;
                PyObject *tmp_left_name_1;
                PyObject *tmp_right_name_1;
                PyObject *tmp_tuple_element_2;
                PyObject *tmp_getattr_target_1;
                PyObject *tmp_getattr_attr_1;
                PyObject *tmp_getattr_default_1;
                PyObject *tmp_source_name_5;
                PyObject *tmp_type_arg_2;
                tmp_raise_type_1 = PyExc_TypeError;
                tmp_left_name_1 = const_str_digest_75fd71b1edada749c2ef7ac810062295;
                CHECK_OBJECT( tmp_class_creation_1__metaclass );
                tmp_getattr_target_1 = tmp_class_creation_1__metaclass;
                tmp_getattr_attr_1 = const_str_plain___name__;
                tmp_getattr_default_1 = const_str_angle_metaclass;
                tmp_tuple_element_2 = BUILTIN_GETATTR( tmp_getattr_target_1, tmp_getattr_attr_1, tmp_getattr_default_1 );
                if ( tmp_tuple_element_2 == NULL )
                {
                    assert( ERROR_OCCURRED() );

                    FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                    exception_lineno = 57;

                    goto try_except_handler_1;
                }
                tmp_right_name_1 = PyTuple_New( 2 );
                PyTuple_SET_ITEM( tmp_right_name_1, 0, tmp_tuple_element_2 );
                CHECK_OBJECT( tmp_class_creation_1__prepared );
                tmp_type_arg_2 = tmp_class_creation_1__prepared;
                tmp_source_name_5 = BUILTIN_TYPE1( tmp_type_arg_2 );
                assert( !(tmp_source_name_5 == NULL) );
                tmp_tuple_element_2 = LOOKUP_ATTRIBUTE( tmp_source_name_5, const_str_plain___name__ );
                Py_DECREF( tmp_source_name_5 );
                if ( tmp_tuple_element_2 == NULL )
                {
                    assert( ERROR_OCCURRED() );

                    FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
                    Py_DECREF( tmp_right_name_1 );

                    exception_lineno = 57;

                    goto try_except_handler_1;
                }
                PyTuple_SET_ITEM( tmp_right_name_1, 1, tmp_tuple_element_2 );
                tmp_raise_value_1 = BINARY_OPERATION_REMAINDER( tmp_left_name_1, tmp_right_name_1 );
                Py_DECREF( tmp_right_name_1 );
                if ( tmp_raise_value_1 == NULL )
                {
                    assert( ERROR_OCCURRED() );

                    FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                    exception_lineno = 57;

                    goto try_except_handler_1;
                }
                exception_type = tmp_raise_type_1;
                Py_INCREF( tmp_raise_type_1 );
                exception_value = tmp_raise_value_1;
                exception_lineno = 57;
                RAISE_EXCEPTION_IMPLICIT( &exception_type, &exception_value, &exception_tb );

                goto try_except_handler_1;
            }
            branch_no_3:;
        }
        goto branch_end_2;
        branch_no_2:;
        {
            PyObject *tmp_assign_source_18;
            tmp_assign_source_18 = PyDict_New();
            assert( tmp_class_creation_1__prepared == NULL );
            tmp_class_creation_1__prepared = tmp_assign_source_18;
        }
        branch_end_2:;
    }
    {
        PyObject *tmp_assign_source_19;
        {
            PyObject *tmp_set_locals_1;
            CHECK_OBJECT( tmp_class_creation_1__prepared );
            tmp_set_locals_1 = tmp_class_creation_1__prepared;
            locals_subprocess_57 = tmp_set_locals_1;
            Py_INCREF( tmp_set_locals_1 );
        }
        // Tried code:
        // Tried code:
        tmp_dictset_value = const_str_plain_subprocess;
        tmp_res = PyObject_SetItem( locals_subprocess_57, const_str_plain___module__, tmp_dictset_value );
        if ( tmp_res != 0 )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 57;

            goto try_except_handler_3;
        }
        tmp_dictset_value = const_str_plain_SubprocessError;
        tmp_res = PyObject_SetItem( locals_subprocess_57, const_str_plain___qualname__, tmp_dictset_value );
        if ( tmp_res != 0 )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 57;

            goto try_except_handler_3;
        }
        {
            nuitka_bool tmp_condition_result_6;
            PyObject *tmp_compexpr_left_2;
            PyObject *tmp_compexpr_right_2;
            CHECK_OBJECT( tmp_class_creation_1__bases );
            tmp_compexpr_left_2 = tmp_class_creation_1__bases;
            tmp_compexpr_right_2 = const_tuple_type_Exception_tuple;
            tmp_res = RICH_COMPARE_BOOL_NOTEQ_OBJECT_OBJECT( tmp_compexpr_left_2, tmp_compexpr_right_2 );
            if ( tmp_res == -1 )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 57;

                goto try_except_handler_3;
            }
            tmp_condition_result_6 = ( tmp_res != 0 ) ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
            if ( tmp_condition_result_6 == NUITKA_BOOL_TRUE )
            {
                goto branch_yes_4;
            }
            else
            {
                goto branch_no_4;
            }
            branch_yes_4:;
            tmp_dictset_value = const_tuple_type_Exception_tuple;
            tmp_res = PyObject_SetItem( locals_subprocess_57, const_str_plain___orig_bases__, tmp_dictset_value );
            if ( tmp_res != 0 )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 57;

                goto try_except_handler_3;
            }
            branch_no_4:;
        }
        {
            PyObject *tmp_assign_source_20;
            PyObject *tmp_called_name_2;
            PyObject *tmp_args_name_2;
            PyObject *tmp_tuple_element_3;
            PyObject *tmp_kw_name_2;
            CHECK_OBJECT( tmp_class_creation_1__metaclass );
            tmp_called_name_2 = tmp_class_creation_1__metaclass;
            tmp_tuple_element_3 = const_str_plain_SubprocessError;
            tmp_args_name_2 = PyTuple_New( 3 );
            Py_INCREF( tmp_tuple_element_3 );
            PyTuple_SET_ITEM( tmp_args_name_2, 0, tmp_tuple_element_3 );
            CHECK_OBJECT( tmp_class_creation_1__bases );
            tmp_tuple_element_3 = tmp_class_creation_1__bases;
            Py_INCREF( tmp_tuple_element_3 );
            PyTuple_SET_ITEM( tmp_args_name_2, 1, tmp_tuple_element_3 );
            tmp_tuple_element_3 = locals_subprocess_57;
            Py_INCREF( tmp_tuple_element_3 );
            PyTuple_SET_ITEM( tmp_args_name_2, 2, tmp_tuple_element_3 );
            CHECK_OBJECT( tmp_class_creation_1__class_decl_dict );
            tmp_kw_name_2 = tmp_class_creation_1__class_decl_dict;
            frame_3b8ded27a474e748966db3dc93ed4330->m_frame.f_lineno = 57;
            tmp_assign_source_20 = CALL_FUNCTION( tmp_called_name_2, tmp_args_name_2, tmp_kw_name_2 );
            Py_DECREF( tmp_args_name_2 );
            if ( tmp_assign_source_20 == NULL )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 57;

                goto try_except_handler_3;
            }
            assert( outline_0_var___class__ == NULL );
            outline_0_var___class__ = tmp_assign_source_20;
        }
        CHECK_OBJECT( outline_0_var___class__ );
        tmp_assign_source_19 = outline_0_var___class__;
        Py_INCREF( tmp_assign_source_19 );
        goto try_return_handler_3;
        // tried codes exits in all cases
        NUITKA_CANNOT_GET_HERE( subprocess );
        return MOD_RETURN_VALUE( NULL );
        // Return handler code:
        try_return_handler_3:;
        Py_DECREF( locals_subprocess_57 );
        locals_subprocess_57 = NULL;
        goto try_return_handler_2;
        // Exception handler code:
        try_except_handler_3:;
        exception_keeper_type_1 = exception_type;
        exception_keeper_value_1 = exception_value;
        exception_keeper_tb_1 = exception_tb;
        exception_keeper_lineno_1 = exception_lineno;
        exception_type = NULL;
        exception_value = NULL;
        exception_tb = NULL;
        exception_lineno = 0;

        Py_DECREF( locals_subprocess_57 );
        locals_subprocess_57 = NULL;
        // Re-raise.
        exception_type = exception_keeper_type_1;
        exception_value = exception_keeper_value_1;
        exception_tb = exception_keeper_tb_1;
        exception_lineno = exception_keeper_lineno_1;

        goto try_except_handler_2;
        // End of try:
        // tried codes exits in all cases
        NUITKA_CANNOT_GET_HERE( subprocess );
        return MOD_RETURN_VALUE( NULL );
        // Return handler code:
        try_return_handler_2:;
        CHECK_OBJECT( (PyObject *)outline_0_var___class__ );
        Py_DECREF( outline_0_var___class__ );
        outline_0_var___class__ = NULL;

        goto outline_result_1;
        // Exception handler code:
        try_except_handler_2:;
        exception_keeper_type_2 = exception_type;
        exception_keeper_value_2 = exception_value;
        exception_keeper_tb_2 = exception_tb;
        exception_keeper_lineno_2 = exception_lineno;
        exception_type = NULL;
        exception_value = NULL;
        exception_tb = NULL;
        exception_lineno = 0;

        // Re-raise.
        exception_type = exception_keeper_type_2;
        exception_value = exception_keeper_value_2;
        exception_tb = exception_keeper_tb_2;
        exception_lineno = exception_keeper_lineno_2;

        goto outline_exception_1;
        // End of try:
        // Return statement must have exited already.
        NUITKA_CANNOT_GET_HERE( subprocess );
        return MOD_RETURN_VALUE( NULL );
        outline_exception_1:;
        exception_lineno = 57;
        goto try_except_handler_1;
        outline_result_1:;
        UPDATE_STRING_DICT1( moduledict_subprocess, (Nuitka_StringObject *)const_str_plain_SubprocessError, tmp_assign_source_19 );
    }
    goto try_end_1;
    // Exception handler code:
    try_except_handler_1:;
    exception_keeper_type_3 = exception_type;
    exception_keeper_value_3 = exception_value;
    exception_keeper_tb_3 = exception_tb;
    exception_keeper_lineno_3 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    Py_XDECREF( tmp_class_creation_1__bases );
    tmp_class_creation_1__bases = NULL;

    Py_XDECREF( tmp_class_creation_1__class_decl_dict );
    tmp_class_creation_1__class_decl_dict = NULL;

    Py_XDECREF( tmp_class_creation_1__metaclass );
    tmp_class_creation_1__metaclass = NULL;

    Py_XDECREF( tmp_class_creation_1__prepared );
    tmp_class_creation_1__prepared = NULL;

    // Re-raise.
    exception_type = exception_keeper_type_3;
    exception_value = exception_keeper_value_3;
    exception_tb = exception_keeper_tb_3;
    exception_lineno = exception_keeper_lineno_3;

    goto frame_exception_exit_1;
    // End of try:
    try_end_1:;
    CHECK_OBJECT( (PyObject *)tmp_class_creation_1__bases );
    Py_DECREF( tmp_class_creation_1__bases );
    tmp_class_creation_1__bases = NULL;

    CHECK_OBJECT( (PyObject *)tmp_class_creation_1__class_decl_dict );
    Py_DECREF( tmp_class_creation_1__class_decl_dict );
    tmp_class_creation_1__class_decl_dict = NULL;

    CHECK_OBJECT( (PyObject *)tmp_class_creation_1__metaclass );
    Py_DECREF( tmp_class_creation_1__metaclass );
    tmp_class_creation_1__metaclass = NULL;

    CHECK_OBJECT( (PyObject *)tmp_class_creation_1__prepared );
    Py_DECREF( tmp_class_creation_1__prepared );
    tmp_class_creation_1__prepared = NULL;

    // Tried code:
    {
        PyObject *tmp_assign_source_21;
        PyObject *tmp_tuple_element_4;
        PyObject *tmp_mvar_value_4;
        tmp_mvar_value_4 = GET_STRING_DICT_VALUE( moduledict_subprocess, (Nuitka_StringObject *)const_str_plain_SubprocessError );

        if (unlikely( tmp_mvar_value_4 == NULL ))
        {
            tmp_mvar_value_4 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_SubprocessError );
        }

        if ( tmp_mvar_value_4 == NULL )
        {

            exception_type = PyExc_NameError;
            Py_INCREF( exception_type );
            exception_value = PyUnicode_FromFormat( "name '%s' is not defined", "SubprocessError" );
            exception_tb = NULL;
            NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
            CHAIN_EXCEPTION( exception_value );

            exception_lineno = 60;

            goto try_except_handler_4;
        }

        tmp_tuple_element_4 = tmp_mvar_value_4;
        tmp_assign_source_21 = PyTuple_New( 1 );
        Py_INCREF( tmp_tuple_element_4 );
        PyTuple_SET_ITEM( tmp_assign_source_21, 0, tmp_tuple_element_4 );
        assert( tmp_class_creation_2__bases_orig == NULL );
        tmp_class_creation_2__bases_orig = tmp_assign_source_21;
    }
    {
        PyObject *tmp_assign_source_22;
        PyObject *tmp_dircall_arg1_2;
        CHECK_OBJECT( tmp_class_creation_2__bases_orig );
        tmp_dircall_arg1_2 = tmp_class_creation_2__bases_orig;
        Py_INCREF( tmp_dircall_arg1_2 );

        {
            PyObject *dir_call_args[] = {tmp_dircall_arg1_2};
            tmp_assign_source_22 = impl___internal__$$$function_1__mro_entries_conversion( dir_call_args );
        }
        if ( tmp_assign_source_22 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 60;

            goto try_except_handler_4;
        }
        assert( tmp_class_creation_2__bases == NULL );
        tmp_class_creation_2__bases = tmp_assign_source_22;
    }
    {
        PyObject *tmp_assign_source_23;
        tmp_assign_source_23 = PyDict_New();
        assert( tmp_class_creation_2__class_decl_dict == NULL );
        tmp_class_creation_2__class_decl_dict = tmp_assign_source_23;
    }
    {
        PyObject *tmp_assign_source_24;
        PyObject *tmp_metaclass_name_2;
        nuitka_bool tmp_condition_result_7;
        PyObject *tmp_key_name_4;
        PyObject *tmp_dict_name_4;
        PyObject *tmp_dict_name_5;
        PyObject *tmp_key_name_5;
        nuitka_bool tmp_condition_result_8;
        int tmp_truth_name_2;
        PyObject *tmp_type_arg_3;
        PyObject *tmp_subscribed_name_2;
        PyObject *tmp_subscript_name_2;
        PyObject *tmp_bases_name_2;
        tmp_key_name_4 = const_str_plain_metaclass;
        CHECK_OBJECT( tmp_class_creation_2__class_decl_dict );
        tmp_dict_name_4 = tmp_class_creation_2__class_decl_dict;
        tmp_res = PyDict_Contains( tmp_dict_name_4, tmp_key_name_4 );
        if ( tmp_res == -1 )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 60;

            goto try_except_handler_4;
        }
        tmp_condition_result_7 = ( tmp_res != 0 ) ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
        if ( tmp_condition_result_7 == NUITKA_BOOL_TRUE )
        {
            goto condexpr_true_3;
        }
        else
        {
            goto condexpr_false_3;
        }
        condexpr_true_3:;
        CHECK_OBJECT( tmp_class_creation_2__class_decl_dict );
        tmp_dict_name_5 = tmp_class_creation_2__class_decl_dict;
        tmp_key_name_5 = const_str_plain_metaclass;
        tmp_metaclass_name_2 = DICT_GET_ITEM( tmp_dict_name_5, tmp_key_name_5 );
        if ( tmp_metaclass_name_2 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 60;

            goto try_except_handler_4;
        }
        goto condexpr_end_3;
        condexpr_false_3:;
        CHECK_OBJECT( tmp_class_creation_2__bases );
        tmp_truth_name_2 = CHECK_IF_TRUE( tmp_class_creation_2__bases );
        if ( tmp_truth_name_2 == -1 )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 60;

            goto try_except_handler_4;
        }
        tmp_condition_result_8 = tmp_truth_name_2 == 1 ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
        if ( tmp_condition_result_8 == NUITKA_BOOL_TRUE )
        {
            goto condexpr_true_4;
        }
        else
        {
            goto condexpr_false_4;
        }
        condexpr_true_4:;
        CHECK_OBJECT( tmp_class_creation_2__bases );
        tmp_subscribed_name_2 = tmp_class_creation_2__bases;
        tmp_subscript_name_2 = const_int_0;
        tmp_type_arg_3 = LOOKUP_SUBSCRIPT_CONST( tmp_subscribed_name_2, tmp_subscript_name_2, 0 );
        if ( tmp_type_arg_3 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 60;

            goto try_except_handler_4;
        }
        tmp_metaclass_name_2 = BUILTIN_TYPE1( tmp_type_arg_3 );
        Py_DECREF( tmp_type_arg_3 );
        if ( tmp_metaclass_name_2 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 60;

            goto try_except_handler_4;
        }
        goto condexpr_end_4;
        condexpr_false_4:;
        tmp_metaclass_name_2 = (PyObject *)&PyType_Type;
        Py_INCREF( tmp_metaclass_name_2 );
        condexpr_end_4:;
        condexpr_end_3:;
        CHECK_OBJECT( tmp_class_creation_2__bases );
        tmp_bases_name_2 = tmp_class_creation_2__bases;
        tmp_assign_source_24 = SELECT_METACLASS( tmp_metaclass_name_2, tmp_bases_name_2 );
        Py_DECREF( tmp_metaclass_name_2 );
        if ( tmp_assign_source_24 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 60;

            goto try_except_handler_4;
        }
        assert( tmp_class_creation_2__metaclass == NULL );
        tmp_class_creation_2__metaclass = tmp_assign_source_24;
    }
    {
        nuitka_bool tmp_condition_result_9;
        PyObject *tmp_key_name_6;
        PyObject *tmp_dict_name_6;
        tmp_key_name_6 = const_str_plain_metaclass;
        CHECK_OBJECT( tmp_class_creation_2__class_decl_dict );
        tmp_dict_name_6 = tmp_class_creation_2__class_decl_dict;
        tmp_res = PyDict_Contains( tmp_dict_name_6, tmp_key_name_6 );
        if ( tmp_res == -1 )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 60;

            goto try_except_handler_4;
        }
        tmp_condition_result_9 = ( tmp_res != 0 ) ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
        if ( tmp_condition_result_9 == NUITKA_BOOL_TRUE )
        {
            goto branch_yes_5;
        }
        else
        {
            goto branch_no_5;
        }
        branch_yes_5:;
        CHECK_OBJECT( tmp_class_creation_2__class_decl_dict );
        tmp_dictdel_dict = tmp_class_creation_2__class_decl_dict;
        tmp_dictdel_key = const_str_plain_metaclass;
        tmp_result = DICT_REMOVE_ITEM( tmp_dictdel_dict, tmp_dictdel_key );
        if ( tmp_result == false )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 60;

            goto try_except_handler_4;
        }
        branch_no_5:;
    }
    {
        nuitka_bool tmp_condition_result_10;
        PyObject *tmp_source_name_6;
        CHECK_OBJECT( tmp_class_creation_2__metaclass );
        tmp_source_name_6 = tmp_class_creation_2__metaclass;
        tmp_res = PyObject_HasAttr( tmp_source_name_6, const_str_plain___prepare__ );
        tmp_condition_result_10 = ( tmp_res != 0 ) ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
        if ( tmp_condition_result_10 == NUITKA_BOOL_TRUE )
        {
            goto branch_yes_6;
        }
        else
        {
            goto branch_no_6;
        }
        branch_yes_6:;
        {
            PyObject *tmp_assign_source_25;
            PyObject *tmp_called_name_3;
            PyObject *tmp_source_name_7;
            PyObject *tmp_args_name_3;
            PyObject *tmp_tuple_element_5;
            PyObject *tmp_kw_name_3;
            CHECK_OBJECT( tmp_class_creation_2__metaclass );
            tmp_source_name_7 = tmp_class_creation_2__metaclass;
            tmp_called_name_3 = LOOKUP_ATTRIBUTE( tmp_source_name_7, const_str_plain___prepare__ );
            if ( tmp_called_name_3 == NULL )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 60;

                goto try_except_handler_4;
            }
            tmp_tuple_element_5 = const_str_plain_CalledProcessError;
            tmp_args_name_3 = PyTuple_New( 2 );
            Py_INCREF( tmp_tuple_element_5 );
            PyTuple_SET_ITEM( tmp_args_name_3, 0, tmp_tuple_element_5 );
            CHECK_OBJECT( tmp_class_creation_2__bases );
            tmp_tuple_element_5 = tmp_class_creation_2__bases;
            Py_INCREF( tmp_tuple_element_5 );
            PyTuple_SET_ITEM( tmp_args_name_3, 1, tmp_tuple_element_5 );
            CHECK_OBJECT( tmp_class_creation_2__class_decl_dict );
            tmp_kw_name_3 = tmp_class_creation_2__class_decl_dict;
            frame_3b8ded27a474e748966db3dc93ed4330->m_frame.f_lineno = 60;
            tmp_assign_source_25 = CALL_FUNCTION( tmp_called_name_3, tmp_args_name_3, tmp_kw_name_3 );
            Py_DECREF( tmp_called_name_3 );
            Py_DECREF( tmp_args_name_3 );
            if ( tmp_assign_source_25 == NULL )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 60;

                goto try_except_handler_4;
            }
            assert( tmp_class_creation_2__prepared == NULL );
            tmp_class_creation_2__prepared = tmp_assign_source_25;
        }
        {
            nuitka_bool tmp_condition_result_11;
            PyObject *tmp_operand_name_2;
            PyObject *tmp_source_name_8;
            CHECK_OBJECT( tmp_class_creation_2__prepared );
            tmp_source_name_8 = tmp_class_creation_2__prepared;
            tmp_res = PyObject_HasAttr( tmp_source_name_8, const_str_plain___getitem__ );
            tmp_operand_name_2 = ( tmp_res != 0 ) ? Py_True : Py_False;
            tmp_res = CHECK_IF_TRUE( tmp_operand_name_2 );
            if ( tmp_res == -1 )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 60;

                goto try_except_handler_4;
            }
            tmp_condition_result_11 = ( tmp_res == 0 ) ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
            if ( tmp_condition_result_11 == NUITKA_BOOL_TRUE )
            {
                goto branch_yes_7;
            }
            else
            {
                goto branch_no_7;
            }
            branch_yes_7:;
            {
                PyObject *tmp_raise_type_2;
                PyObject *tmp_raise_value_2;
                PyObject *tmp_left_name_2;
                PyObject *tmp_right_name_2;
                PyObject *tmp_tuple_element_6;
                PyObject *tmp_getattr_target_2;
                PyObject *tmp_getattr_attr_2;
                PyObject *tmp_getattr_default_2;
                PyObject *tmp_source_name_9;
                PyObject *tmp_type_arg_4;
                tmp_raise_type_2 = PyExc_TypeError;
                tmp_left_name_2 = const_str_digest_75fd71b1edada749c2ef7ac810062295;
                CHECK_OBJECT( tmp_class_creation_2__metaclass );
                tmp_getattr_target_2 = tmp_class_creation_2__metaclass;
                tmp_getattr_attr_2 = const_str_plain___name__;
                tmp_getattr_default_2 = const_str_angle_metaclass;
                tmp_tuple_element_6 = BUILTIN_GETATTR( tmp_getattr_target_2, tmp_getattr_attr_2, tmp_getattr_default_2 );
                if ( tmp_tuple_element_6 == NULL )
                {
                    assert( ERROR_OCCURRED() );

                    FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                    exception_lineno = 60;

                    goto try_except_handler_4;
                }
                tmp_right_name_2 = PyTuple_New( 2 );
                PyTuple_SET_ITEM( tmp_right_name_2, 0, tmp_tuple_element_6 );
                CHECK_OBJECT( tmp_class_creation_2__prepared );
                tmp_type_arg_4 = tmp_class_creation_2__prepared;
                tmp_source_name_9 = BUILTIN_TYPE1( tmp_type_arg_4 );
                assert( !(tmp_source_name_9 == NULL) );
                tmp_tuple_element_6 = LOOKUP_ATTRIBUTE( tmp_source_name_9, const_str_plain___name__ );
                Py_DECREF( tmp_source_name_9 );
                if ( tmp_tuple_element_6 == NULL )
                {
                    assert( ERROR_OCCURRED() );

                    FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
                    Py_DECREF( tmp_right_name_2 );

                    exception_lineno = 60;

                    goto try_except_handler_4;
                }
                PyTuple_SET_ITEM( tmp_right_name_2, 1, tmp_tuple_element_6 );
                tmp_raise_value_2 = BINARY_OPERATION_REMAINDER( tmp_left_name_2, tmp_right_name_2 );
                Py_DECREF( tmp_right_name_2 );
                if ( tmp_raise_value_2 == NULL )
                {
                    assert( ERROR_OCCURRED() );

                    FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                    exception_lineno = 60;

                    goto try_except_handler_4;
                }
                exception_type = tmp_raise_type_2;
                Py_INCREF( tmp_raise_type_2 );
                exception_value = tmp_raise_value_2;
                exception_lineno = 60;
                RAISE_EXCEPTION_IMPLICIT( &exception_type, &exception_value, &exception_tb );

                goto try_except_handler_4;
            }
            branch_no_7:;
        }
        goto branch_end_6;
        branch_no_6:;
        {
            PyObject *tmp_assign_source_26;
            tmp_assign_source_26 = PyDict_New();
            assert( tmp_class_creation_2__prepared == NULL );
            tmp_class_creation_2__prepared = tmp_assign_source_26;
        }
        branch_end_6:;
    }
    {
        PyObject *tmp_assign_source_27;
        {
            PyObject *tmp_set_locals_2;
            CHECK_OBJECT( tmp_class_creation_2__prepared );
            tmp_set_locals_2 = tmp_class_creation_2__prepared;
            locals_subprocess_60 = tmp_set_locals_2;
            Py_INCREF( tmp_set_locals_2 );
        }
        // Tried code:
        // Tried code:
        tmp_dictset_value = const_str_plain_subprocess;
        tmp_res = PyObject_SetItem( locals_subprocess_60, const_str_plain___module__, tmp_dictset_value );
        if ( tmp_res != 0 )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 60;

            goto try_except_handler_6;
        }
        tmp_dictset_value = const_str_digest_8cf228ee982ca1d76c1701e22ea65d38;
        tmp_res = PyObject_SetItem( locals_subprocess_60, const_str_plain___doc__, tmp_dictset_value );
        if ( tmp_res != 0 )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 60;

            goto try_except_handler_6;
        }
        tmp_dictset_value = const_str_plain_CalledProcessError;
        tmp_res = PyObject_SetItem( locals_subprocess_60, const_str_plain___qualname__, tmp_dictset_value );
        if ( tmp_res != 0 )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 60;

            goto try_except_handler_6;
        }
        MAKE_OR_REUSE_FRAME( cache_frame_511b93c0afbf8069afc1fef349c67d72_2, codeobj_511b93c0afbf8069afc1fef349c67d72, module_subprocess, sizeof(void *) );
        frame_511b93c0afbf8069afc1fef349c67d72_2 = cache_frame_511b93c0afbf8069afc1fef349c67d72_2;

        // Push the new frame as the currently active one.
        pushFrameStack( frame_511b93c0afbf8069afc1fef349c67d72_2 );

        // Mark the frame object as in use, ref count 1 will be up for reuse.
        assert( Py_REFCNT( frame_511b93c0afbf8069afc1fef349c67d72_2 ) == 2 ); // Frame stack

        // Framed code:
        {
            PyObject *tmp_defaults_1;
            tmp_defaults_1 = const_tuple_none_none_tuple;
            Py_INCREF( tmp_defaults_1 );
            tmp_dictset_value = MAKE_FUNCTION_subprocess$$$function_1___init__( tmp_defaults_1 );



            tmp_res = PyObject_SetItem( locals_subprocess_60, const_str_plain___init__, tmp_dictset_value );
            Py_DECREF( tmp_dictset_value );
            if ( tmp_res != 0 )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 67;
                type_description_2 = "o";
                goto frame_exception_exit_2;
            }
        }
        tmp_dictset_value = MAKE_FUNCTION_subprocess$$$function_2___str__(  );



        tmp_res = PyObject_SetItem( locals_subprocess_60, const_str_plain___str__, tmp_dictset_value );
        Py_DECREF( tmp_dictset_value );
        if ( tmp_res != 0 )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 73;
            type_description_2 = "o";
            goto frame_exception_exit_2;
        }
        {
            nuitka_bool tmp_condition_result_12;
            PyObject *tmp_called_name_4;
            PyObject *tmp_args_element_name_1;
            PyObject *tmp_called_name_5;
            PyObject *tmp_args_element_name_2;
            tmp_res = MAPPING_HAS_ITEM( locals_subprocess_60, const_str_plain_property );

            if ( tmp_res == -1 )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 85;
                type_description_2 = "o";
                goto frame_exception_exit_2;
            }
            tmp_condition_result_12 = ( tmp_res == 1 ) ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
            if ( tmp_condition_result_12 == NUITKA_BOOL_TRUE )
            {
                goto condexpr_true_5;
            }
            else
            {
                goto condexpr_false_5;
            }
            condexpr_true_5:;
            tmp_called_name_4 = PyObject_GetItem( locals_subprocess_60, const_str_plain_property );

            if ( tmp_called_name_4 == NULL && CHECK_AND_CLEAR_KEY_ERROR_OCCURRED() )
            {

                exception_type = PyExc_NameError;
                Py_INCREF( exception_type );
                exception_value = PyUnicode_FromFormat( "name '%s' is not defined", "property" );
                exception_tb = NULL;
                NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
                CHAIN_EXCEPTION( exception_value );

                exception_lineno = 85;
                type_description_2 = "o";
                goto frame_exception_exit_2;
            }

            if ( tmp_called_name_4 == NULL )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 85;
                type_description_2 = "o";
                goto frame_exception_exit_2;
            }
            tmp_args_element_name_1 = MAKE_FUNCTION_subprocess$$$function_3_stdout(  );



            frame_511b93c0afbf8069afc1fef349c67d72_2->m_frame.f_lineno = 85;
            {
                PyObject *call_args[] = { tmp_args_element_name_1 };
                tmp_dictset_value = CALL_FUNCTION_WITH_ARGS1( tmp_called_name_4, call_args );
            }

            Py_DECREF( tmp_called_name_4 );
            Py_DECREF( tmp_args_element_name_1 );
            if ( tmp_dictset_value == NULL )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 85;
                type_description_2 = "o";
                goto frame_exception_exit_2;
            }
            goto condexpr_end_5;
            condexpr_false_5:;
            tmp_called_name_5 = (PyObject *)&PyProperty_Type;
            tmp_args_element_name_2 = MAKE_FUNCTION_subprocess$$$function_3_stdout(  );



            frame_511b93c0afbf8069afc1fef349c67d72_2->m_frame.f_lineno = 85;
            {
                PyObject *call_args[] = { tmp_args_element_name_2 };
                tmp_dictset_value = CALL_FUNCTION_WITH_ARGS1( tmp_called_name_5, call_args );
            }

            Py_DECREF( tmp_args_element_name_2 );
            if ( tmp_dictset_value == NULL )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 85;
                type_description_2 = "o";
                goto frame_exception_exit_2;
            }
            condexpr_end_5:;
            tmp_res = PyObject_SetItem( locals_subprocess_60, const_str_plain_stdout, tmp_dictset_value );
            Py_DECREF( tmp_dictset_value );
            if ( tmp_res != 0 )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 85;
                type_description_2 = "o";
                goto frame_exception_exit_2;
            }
        }
        {
            PyObject *tmp_called_instance_1;
            PyObject *tmp_args_element_name_3;
            tmp_called_instance_1 = PyObject_GetItem( locals_subprocess_60, const_str_plain_stdout );

            if ( tmp_called_instance_1 == NULL && CHECK_AND_CLEAR_KEY_ERROR_OCCURRED() )
            {

                exception_type = PyExc_NameError;
                Py_INCREF( exception_type );
                exception_value = PyUnicode_FromFormat( "name '%s' is not defined", "stdout" );
                exception_tb = NULL;
                NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
                CHAIN_EXCEPTION( exception_value );

                exception_lineno = 90;
                type_description_2 = "o";
                goto frame_exception_exit_2;
            }

            if ( tmp_called_instance_1 == NULL )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 90;
                type_description_2 = "o";
                goto frame_exception_exit_2;
            }
            tmp_args_element_name_3 = MAKE_FUNCTION_subprocess$$$function_4_stdout(  );



            frame_511b93c0afbf8069afc1fef349c67d72_2->m_frame.f_lineno = 90;
            {
                PyObject *call_args[] = { tmp_args_element_name_3 };
                tmp_dictset_value = CALL_METHOD_WITH_ARGS1( tmp_called_instance_1, const_str_plain_setter, call_args );
            }

            Py_DECREF( tmp_called_instance_1 );
            Py_DECREF( tmp_args_element_name_3 );
            if ( tmp_dictset_value == NULL )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 90;
                type_description_2 = "o";
                goto frame_exception_exit_2;
            }
            tmp_res = PyObject_SetItem( locals_subprocess_60, const_str_plain_stdout, tmp_dictset_value );
            Py_DECREF( tmp_dictset_value );
            if ( tmp_res != 0 )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 90;
                type_description_2 = "o";
                goto frame_exception_exit_2;
            }
        }

#if 0
        RESTORE_FRAME_EXCEPTION( frame_511b93c0afbf8069afc1fef349c67d72_2 );
#endif

        // Put the previous frame back on top.
        popFrameStack();

        goto frame_no_exception_1;

        frame_exception_exit_2:;

#if 0
        RESTORE_FRAME_EXCEPTION( frame_511b93c0afbf8069afc1fef349c67d72_2 );
#endif

        if ( exception_tb == NULL )
        {
            exception_tb = MAKE_TRACEBACK( frame_511b93c0afbf8069afc1fef349c67d72_2, exception_lineno );
        }
        else if ( exception_tb->tb_frame != &frame_511b93c0afbf8069afc1fef349c67d72_2->m_frame )
        {
            exception_tb = ADD_TRACEBACK( exception_tb, frame_511b93c0afbf8069afc1fef349c67d72_2, exception_lineno );
        }

        // Attachs locals to frame if any.
        Nuitka_Frame_AttachLocals(
            (struct Nuitka_FrameObject *)frame_511b93c0afbf8069afc1fef349c67d72_2,
            type_description_2,
            outline_1_var___class__
        );


        // Release cached frame.
        if ( frame_511b93c0afbf8069afc1fef349c67d72_2 == cache_frame_511b93c0afbf8069afc1fef349c67d72_2 )
        {
            Py_DECREF( frame_511b93c0afbf8069afc1fef349c67d72_2 );
        }
        cache_frame_511b93c0afbf8069afc1fef349c67d72_2 = NULL;

        assertFrameObject( frame_511b93c0afbf8069afc1fef349c67d72_2 );

        // Put the previous frame back on top.
        popFrameStack();

        // Return the error.
        goto nested_frame_exit_1;

        frame_no_exception_1:;
        goto skip_nested_handling_1;
        nested_frame_exit_1:;

        goto try_except_handler_6;
        skip_nested_handling_1:;
        {
            nuitka_bool tmp_condition_result_13;
            PyObject *tmp_compexpr_left_3;
            PyObject *tmp_compexpr_right_3;
            CHECK_OBJECT( tmp_class_creation_2__bases );
            tmp_compexpr_left_3 = tmp_class_creation_2__bases;
            CHECK_OBJECT( tmp_class_creation_2__bases_orig );
            tmp_compexpr_right_3 = tmp_class_creation_2__bases_orig;
            tmp_res = RICH_COMPARE_BOOL_NOTEQ_OBJECT_OBJECT( tmp_compexpr_left_3, tmp_compexpr_right_3 );
            if ( tmp_res == -1 )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 60;

                goto try_except_handler_6;
            }
            tmp_condition_result_13 = ( tmp_res != 0 ) ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
            if ( tmp_condition_result_13 == NUITKA_BOOL_TRUE )
            {
                goto branch_yes_8;
            }
            else
            {
                goto branch_no_8;
            }
            branch_yes_8:;
            CHECK_OBJECT( tmp_class_creation_2__bases_orig );
            tmp_dictset_value = tmp_class_creation_2__bases_orig;
            tmp_res = PyObject_SetItem( locals_subprocess_60, const_str_plain___orig_bases__, tmp_dictset_value );
            if ( tmp_res != 0 )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 60;

                goto try_except_handler_6;
            }
            branch_no_8:;
        }
        {
            PyObject *tmp_assign_source_28;
            PyObject *tmp_called_name_6;
            PyObject *tmp_args_name_4;
            PyObject *tmp_tuple_element_7;
            PyObject *tmp_kw_name_4;
            CHECK_OBJECT( tmp_class_creation_2__metaclass );
            tmp_called_name_6 = tmp_class_creation_2__metaclass;
            tmp_tuple_element_7 = const_str_plain_CalledProcessError;
            tmp_args_name_4 = PyTuple_New( 3 );
            Py_INCREF( tmp_tuple_element_7 );
            PyTuple_SET_ITEM( tmp_args_name_4, 0, tmp_tuple_element_7 );
            CHECK_OBJECT( tmp_class_creation_2__bases );
            tmp_tuple_element_7 = tmp_class_creation_2__bases;
            Py_INCREF( tmp_tuple_element_7 );
            PyTuple_SET_ITEM( tmp_args_name_4, 1, tmp_tuple_element_7 );
            tmp_tuple_element_7 = locals_subprocess_60;
            Py_INCREF( tmp_tuple_element_7 );
            PyTuple_SET_ITEM( tmp_args_name_4, 2, tmp_tuple_element_7 );
            CHECK_OBJECT( tmp_class_creation_2__class_decl_dict );
            tmp_kw_name_4 = tmp_class_creation_2__class_decl_dict;
            frame_3b8ded27a474e748966db3dc93ed4330->m_frame.f_lineno = 60;
            tmp_assign_source_28 = CALL_FUNCTION( tmp_called_name_6, tmp_args_name_4, tmp_kw_name_4 );
            Py_DECREF( tmp_args_name_4 );
            if ( tmp_assign_source_28 == NULL )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 60;

                goto try_except_handler_6;
            }
            assert( outline_1_var___class__ == NULL );
            outline_1_var___class__ = tmp_assign_source_28;
        }
        CHECK_OBJECT( outline_1_var___class__ );
        tmp_assign_source_27 = outline_1_var___class__;
        Py_INCREF( tmp_assign_source_27 );
        goto try_return_handler_6;
        // tried codes exits in all cases
        NUITKA_CANNOT_GET_HERE( subprocess );
        return MOD_RETURN_VALUE( NULL );
        // Return handler code:
        try_return_handler_6:;
        Py_DECREF( locals_subprocess_60 );
        locals_subprocess_60 = NULL;
        goto try_return_handler_5;
        // Exception handler code:
        try_except_handler_6:;
        exception_keeper_type_4 = exception_type;
        exception_keeper_value_4 = exception_value;
        exception_keeper_tb_4 = exception_tb;
        exception_keeper_lineno_4 = exception_lineno;
        exception_type = NULL;
        exception_value = NULL;
        exception_tb = NULL;
        exception_lineno = 0;

        Py_DECREF( locals_subprocess_60 );
        locals_subprocess_60 = NULL;
        // Re-raise.
        exception_type = exception_keeper_type_4;
        exception_value = exception_keeper_value_4;
        exception_tb = exception_keeper_tb_4;
        exception_lineno = exception_keeper_lineno_4;

        goto try_except_handler_5;
        // End of try:
        // tried codes exits in all cases
        NUITKA_CANNOT_GET_HERE( subprocess );
        return MOD_RETURN_VALUE( NULL );
        // Return handler code:
        try_return_handler_5:;
        CHECK_OBJECT( (PyObject *)outline_1_var___class__ );
        Py_DECREF( outline_1_var___class__ );
        outline_1_var___class__ = NULL;

        goto outline_result_2;
        // Exception handler code:
        try_except_handler_5:;
        exception_keeper_type_5 = exception_type;
        exception_keeper_value_5 = exception_value;
        exception_keeper_tb_5 = exception_tb;
        exception_keeper_lineno_5 = exception_lineno;
        exception_type = NULL;
        exception_value = NULL;
        exception_tb = NULL;
        exception_lineno = 0;

        // Re-raise.
        exception_type = exception_keeper_type_5;
        exception_value = exception_keeper_value_5;
        exception_tb = exception_keeper_tb_5;
        exception_lineno = exception_keeper_lineno_5;

        goto outline_exception_2;
        // End of try:
        // Return statement must have exited already.
        NUITKA_CANNOT_GET_HERE( subprocess );
        return MOD_RETURN_VALUE( NULL );
        outline_exception_2:;
        exception_lineno = 60;
        goto try_except_handler_4;
        outline_result_2:;
        UPDATE_STRING_DICT1( moduledict_subprocess, (Nuitka_StringObject *)const_str_plain_CalledProcessError, tmp_assign_source_27 );
    }
    goto try_end_2;
    // Exception handler code:
    try_except_handler_4:;
    exception_keeper_type_6 = exception_type;
    exception_keeper_value_6 = exception_value;
    exception_keeper_tb_6 = exception_tb;
    exception_keeper_lineno_6 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    Py_XDECREF( tmp_class_creation_2__bases_orig );
    tmp_class_creation_2__bases_orig = NULL;

    Py_XDECREF( tmp_class_creation_2__bases );
    tmp_class_creation_2__bases = NULL;

    Py_XDECREF( tmp_class_creation_2__class_decl_dict );
    tmp_class_creation_2__class_decl_dict = NULL;

    Py_XDECREF( tmp_class_creation_2__metaclass );
    tmp_class_creation_2__metaclass = NULL;

    Py_XDECREF( tmp_class_creation_2__prepared );
    tmp_class_creation_2__prepared = NULL;

    // Re-raise.
    exception_type = exception_keeper_type_6;
    exception_value = exception_keeper_value_6;
    exception_tb = exception_keeper_tb_6;
    exception_lineno = exception_keeper_lineno_6;

    goto frame_exception_exit_1;
    // End of try:
    try_end_2:;
    CHECK_OBJECT( (PyObject *)tmp_class_creation_2__bases_orig );
    Py_DECREF( tmp_class_creation_2__bases_orig );
    tmp_class_creation_2__bases_orig = NULL;

    CHECK_OBJECT( (PyObject *)tmp_class_creation_2__bases );
    Py_DECREF( tmp_class_creation_2__bases );
    tmp_class_creation_2__bases = NULL;

    CHECK_OBJECT( (PyObject *)tmp_class_creation_2__class_decl_dict );
    Py_DECREF( tmp_class_creation_2__class_decl_dict );
    tmp_class_creation_2__class_decl_dict = NULL;

    CHECK_OBJECT( (PyObject *)tmp_class_creation_2__metaclass );
    Py_DECREF( tmp_class_creation_2__metaclass );
    tmp_class_creation_2__metaclass = NULL;

    CHECK_OBJECT( (PyObject *)tmp_class_creation_2__prepared );
    Py_DECREF( tmp_class_creation_2__prepared );
    tmp_class_creation_2__prepared = NULL;

    // Tried code:
    {
        PyObject *tmp_assign_source_29;
        PyObject *tmp_tuple_element_8;
        PyObject *tmp_mvar_value_5;
        tmp_mvar_value_5 = GET_STRING_DICT_VALUE( moduledict_subprocess, (Nuitka_StringObject *)const_str_plain_SubprocessError );

        if (unlikely( tmp_mvar_value_5 == NULL ))
        {
            tmp_mvar_value_5 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_SubprocessError );
        }

        if ( tmp_mvar_value_5 == NULL )
        {

            exception_type = PyExc_NameError;
            Py_INCREF( exception_type );
            exception_value = PyUnicode_FromFormat( "name '%s' is not defined", "SubprocessError" );
            exception_tb = NULL;
            NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
            CHAIN_EXCEPTION( exception_value );

            exception_lineno = 97;

            goto try_except_handler_7;
        }

        tmp_tuple_element_8 = tmp_mvar_value_5;
        tmp_assign_source_29 = PyTuple_New( 1 );
        Py_INCREF( tmp_tuple_element_8 );
        PyTuple_SET_ITEM( tmp_assign_source_29, 0, tmp_tuple_element_8 );
        assert( tmp_class_creation_3__bases_orig == NULL );
        tmp_class_creation_3__bases_orig = tmp_assign_source_29;
    }
    {
        PyObject *tmp_assign_source_30;
        PyObject *tmp_dircall_arg1_3;
        CHECK_OBJECT( tmp_class_creation_3__bases_orig );
        tmp_dircall_arg1_3 = tmp_class_creation_3__bases_orig;
        Py_INCREF( tmp_dircall_arg1_3 );

        {
            PyObject *dir_call_args[] = {tmp_dircall_arg1_3};
            tmp_assign_source_30 = impl___internal__$$$function_1__mro_entries_conversion( dir_call_args );
        }
        if ( tmp_assign_source_30 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 97;

            goto try_except_handler_7;
        }
        assert( tmp_class_creation_3__bases == NULL );
        tmp_class_creation_3__bases = tmp_assign_source_30;
    }
    {
        PyObject *tmp_assign_source_31;
        tmp_assign_source_31 = PyDict_New();
        assert( tmp_class_creation_3__class_decl_dict == NULL );
        tmp_class_creation_3__class_decl_dict = tmp_assign_source_31;
    }
    {
        PyObject *tmp_assign_source_32;
        PyObject *tmp_metaclass_name_3;
        nuitka_bool tmp_condition_result_14;
        PyObject *tmp_key_name_7;
        PyObject *tmp_dict_name_7;
        PyObject *tmp_dict_name_8;
        PyObject *tmp_key_name_8;
        nuitka_bool tmp_condition_result_15;
        int tmp_truth_name_3;
        PyObject *tmp_type_arg_5;
        PyObject *tmp_subscribed_name_3;
        PyObject *tmp_subscript_name_3;
        PyObject *tmp_bases_name_3;
        tmp_key_name_7 = const_str_plain_metaclass;
        CHECK_OBJECT( tmp_class_creation_3__class_decl_dict );
        tmp_dict_name_7 = tmp_class_creation_3__class_decl_dict;
        tmp_res = PyDict_Contains( tmp_dict_name_7, tmp_key_name_7 );
        if ( tmp_res == -1 )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 97;

            goto try_except_handler_7;
        }
        tmp_condition_result_14 = ( tmp_res != 0 ) ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
        if ( tmp_condition_result_14 == NUITKA_BOOL_TRUE )
        {
            goto condexpr_true_6;
        }
        else
        {
            goto condexpr_false_6;
        }
        condexpr_true_6:;
        CHECK_OBJECT( tmp_class_creation_3__class_decl_dict );
        tmp_dict_name_8 = tmp_class_creation_3__class_decl_dict;
        tmp_key_name_8 = const_str_plain_metaclass;
        tmp_metaclass_name_3 = DICT_GET_ITEM( tmp_dict_name_8, tmp_key_name_8 );
        if ( tmp_metaclass_name_3 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 97;

            goto try_except_handler_7;
        }
        goto condexpr_end_6;
        condexpr_false_6:;
        CHECK_OBJECT( tmp_class_creation_3__bases );
        tmp_truth_name_3 = CHECK_IF_TRUE( tmp_class_creation_3__bases );
        if ( tmp_truth_name_3 == -1 )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 97;

            goto try_except_handler_7;
        }
        tmp_condition_result_15 = tmp_truth_name_3 == 1 ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
        if ( tmp_condition_result_15 == NUITKA_BOOL_TRUE )
        {
            goto condexpr_true_7;
        }
        else
        {
            goto condexpr_false_7;
        }
        condexpr_true_7:;
        CHECK_OBJECT( tmp_class_creation_3__bases );
        tmp_subscribed_name_3 = tmp_class_creation_3__bases;
        tmp_subscript_name_3 = const_int_0;
        tmp_type_arg_5 = LOOKUP_SUBSCRIPT_CONST( tmp_subscribed_name_3, tmp_subscript_name_3, 0 );
        if ( tmp_type_arg_5 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 97;

            goto try_except_handler_7;
        }
        tmp_metaclass_name_3 = BUILTIN_TYPE1( tmp_type_arg_5 );
        Py_DECREF( tmp_type_arg_5 );
        if ( tmp_metaclass_name_3 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 97;

            goto try_except_handler_7;
        }
        goto condexpr_end_7;
        condexpr_false_7:;
        tmp_metaclass_name_3 = (PyObject *)&PyType_Type;
        Py_INCREF( tmp_metaclass_name_3 );
        condexpr_end_7:;
        condexpr_end_6:;
        CHECK_OBJECT( tmp_class_creation_3__bases );
        tmp_bases_name_3 = tmp_class_creation_3__bases;
        tmp_assign_source_32 = SELECT_METACLASS( tmp_metaclass_name_3, tmp_bases_name_3 );
        Py_DECREF( tmp_metaclass_name_3 );
        if ( tmp_assign_source_32 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 97;

            goto try_except_handler_7;
        }
        assert( tmp_class_creation_3__metaclass == NULL );
        tmp_class_creation_3__metaclass = tmp_assign_source_32;
    }
    {
        nuitka_bool tmp_condition_result_16;
        PyObject *tmp_key_name_9;
        PyObject *tmp_dict_name_9;
        tmp_key_name_9 = const_str_plain_metaclass;
        CHECK_OBJECT( tmp_class_creation_3__class_decl_dict );
        tmp_dict_name_9 = tmp_class_creation_3__class_decl_dict;
        tmp_res = PyDict_Contains( tmp_dict_name_9, tmp_key_name_9 );
        if ( tmp_res == -1 )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 97;

            goto try_except_handler_7;
        }
        tmp_condition_result_16 = ( tmp_res != 0 ) ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
        if ( tmp_condition_result_16 == NUITKA_BOOL_TRUE )
        {
            goto branch_yes_9;
        }
        else
        {
            goto branch_no_9;
        }
        branch_yes_9:;
        CHECK_OBJECT( tmp_class_creation_3__class_decl_dict );
        tmp_dictdel_dict = tmp_class_creation_3__class_decl_dict;
        tmp_dictdel_key = const_str_plain_metaclass;
        tmp_result = DICT_REMOVE_ITEM( tmp_dictdel_dict, tmp_dictdel_key );
        if ( tmp_result == false )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 97;

            goto try_except_handler_7;
        }
        branch_no_9:;
    }
    {
        nuitka_bool tmp_condition_result_17;
        PyObject *tmp_source_name_10;
        CHECK_OBJECT( tmp_class_creation_3__metaclass );
        tmp_source_name_10 = tmp_class_creation_3__metaclass;
        tmp_res = PyObject_HasAttr( tmp_source_name_10, const_str_plain___prepare__ );
        tmp_condition_result_17 = ( tmp_res != 0 ) ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
        if ( tmp_condition_result_17 == NUITKA_BOOL_TRUE )
        {
            goto branch_yes_10;
        }
        else
        {
            goto branch_no_10;
        }
        branch_yes_10:;
        {
            PyObject *tmp_assign_source_33;
            PyObject *tmp_called_name_7;
            PyObject *tmp_source_name_11;
            PyObject *tmp_args_name_5;
            PyObject *tmp_tuple_element_9;
            PyObject *tmp_kw_name_5;
            CHECK_OBJECT( tmp_class_creation_3__metaclass );
            tmp_source_name_11 = tmp_class_creation_3__metaclass;
            tmp_called_name_7 = LOOKUP_ATTRIBUTE( tmp_source_name_11, const_str_plain___prepare__ );
            if ( tmp_called_name_7 == NULL )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 97;

                goto try_except_handler_7;
            }
            tmp_tuple_element_9 = const_str_plain_TimeoutExpired;
            tmp_args_name_5 = PyTuple_New( 2 );
            Py_INCREF( tmp_tuple_element_9 );
            PyTuple_SET_ITEM( tmp_args_name_5, 0, tmp_tuple_element_9 );
            CHECK_OBJECT( tmp_class_creation_3__bases );
            tmp_tuple_element_9 = tmp_class_creation_3__bases;
            Py_INCREF( tmp_tuple_element_9 );
            PyTuple_SET_ITEM( tmp_args_name_5, 1, tmp_tuple_element_9 );
            CHECK_OBJECT( tmp_class_creation_3__class_decl_dict );
            tmp_kw_name_5 = tmp_class_creation_3__class_decl_dict;
            frame_3b8ded27a474e748966db3dc93ed4330->m_frame.f_lineno = 97;
            tmp_assign_source_33 = CALL_FUNCTION( tmp_called_name_7, tmp_args_name_5, tmp_kw_name_5 );
            Py_DECREF( tmp_called_name_7 );
            Py_DECREF( tmp_args_name_5 );
            if ( tmp_assign_source_33 == NULL )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 97;

                goto try_except_handler_7;
            }
            assert( tmp_class_creation_3__prepared == NULL );
            tmp_class_creation_3__prepared = tmp_assign_source_33;
        }
        {
            nuitka_bool tmp_condition_result_18;
            PyObject *tmp_operand_name_3;
            PyObject *tmp_source_name_12;
            CHECK_OBJECT( tmp_class_creation_3__prepared );
            tmp_source_name_12 = tmp_class_creation_3__prepared;
            tmp_res = PyObject_HasAttr( tmp_source_name_12, const_str_plain___getitem__ );
            tmp_operand_name_3 = ( tmp_res != 0 ) ? Py_True : Py_False;
            tmp_res = CHECK_IF_TRUE( tmp_operand_name_3 );
            if ( tmp_res == -1 )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 97;

                goto try_except_handler_7;
            }
            tmp_condition_result_18 = ( tmp_res == 0 ) ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
            if ( tmp_condition_result_18 == NUITKA_BOOL_TRUE )
            {
                goto branch_yes_11;
            }
            else
            {
                goto branch_no_11;
            }
            branch_yes_11:;
            {
                PyObject *tmp_raise_type_3;
                PyObject *tmp_raise_value_3;
                PyObject *tmp_left_name_3;
                PyObject *tmp_right_name_3;
                PyObject *tmp_tuple_element_10;
                PyObject *tmp_getattr_target_3;
                PyObject *tmp_getattr_attr_3;
                PyObject *tmp_getattr_default_3;
                PyObject *tmp_source_name_13;
                PyObject *tmp_type_arg_6;
                tmp_raise_type_3 = PyExc_TypeError;
                tmp_left_name_3 = const_str_digest_75fd71b1edada749c2ef7ac810062295;
                CHECK_OBJECT( tmp_class_creation_3__metaclass );
                tmp_getattr_target_3 = tmp_class_creation_3__metaclass;
                tmp_getattr_attr_3 = const_str_plain___name__;
                tmp_getattr_default_3 = const_str_angle_metaclass;
                tmp_tuple_element_10 = BUILTIN_GETATTR( tmp_getattr_target_3, tmp_getattr_attr_3, tmp_getattr_default_3 );
                if ( tmp_tuple_element_10 == NULL )
                {
                    assert( ERROR_OCCURRED() );

                    FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                    exception_lineno = 97;

                    goto try_except_handler_7;
                }
                tmp_right_name_3 = PyTuple_New( 2 );
                PyTuple_SET_ITEM( tmp_right_name_3, 0, tmp_tuple_element_10 );
                CHECK_OBJECT( tmp_class_creation_3__prepared );
                tmp_type_arg_6 = tmp_class_creation_3__prepared;
                tmp_source_name_13 = BUILTIN_TYPE1( tmp_type_arg_6 );
                assert( !(tmp_source_name_13 == NULL) );
                tmp_tuple_element_10 = LOOKUP_ATTRIBUTE( tmp_source_name_13, const_str_plain___name__ );
                Py_DECREF( tmp_source_name_13 );
                if ( tmp_tuple_element_10 == NULL )
                {
                    assert( ERROR_OCCURRED() );

                    FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
                    Py_DECREF( tmp_right_name_3 );

                    exception_lineno = 97;

                    goto try_except_handler_7;
                }
                PyTuple_SET_ITEM( tmp_right_name_3, 1, tmp_tuple_element_10 );
                tmp_raise_value_3 = BINARY_OPERATION_REMAINDER( tmp_left_name_3, tmp_right_name_3 );
                Py_DECREF( tmp_right_name_3 );
                if ( tmp_raise_value_3 == NULL )
                {
                    assert( ERROR_OCCURRED() );

                    FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                    exception_lineno = 97;

                    goto try_except_handler_7;
                }
                exception_type = tmp_raise_type_3;
                Py_INCREF( tmp_raise_type_3 );
                exception_value = tmp_raise_value_3;
                exception_lineno = 97;
                RAISE_EXCEPTION_IMPLICIT( &exception_type, &exception_value, &exception_tb );

                goto try_except_handler_7;
            }
            branch_no_11:;
        }
        goto branch_end_10;
        branch_no_10:;
        {
            PyObject *tmp_assign_source_34;
            tmp_assign_source_34 = PyDict_New();
            assert( tmp_class_creation_3__prepared == NULL );
            tmp_class_creation_3__prepared = tmp_assign_source_34;
        }
        branch_end_10:;
    }
    {
        PyObject *tmp_assign_source_35;
        {
            PyObject *tmp_set_locals_3;
            CHECK_OBJECT( tmp_class_creation_3__prepared );
            tmp_set_locals_3 = tmp_class_creation_3__prepared;
            locals_subprocess_97 = tmp_set_locals_3;
            Py_INCREF( tmp_set_locals_3 );
        }
        // Tried code:
        // Tried code:
        tmp_dictset_value = const_str_plain_subprocess;
        tmp_res = PyObject_SetItem( locals_subprocess_97, const_str_plain___module__, tmp_dictset_value );
        if ( tmp_res != 0 )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 97;

            goto try_except_handler_9;
        }
        tmp_dictset_value = const_str_digest_db0bae7c8ec4265d177cd95885bf2b67;
        tmp_res = PyObject_SetItem( locals_subprocess_97, const_str_plain___doc__, tmp_dictset_value );
        if ( tmp_res != 0 )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 97;

            goto try_except_handler_9;
        }
        tmp_dictset_value = const_str_plain_TimeoutExpired;
        tmp_res = PyObject_SetItem( locals_subprocess_97, const_str_plain___qualname__, tmp_dictset_value );
        if ( tmp_res != 0 )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 97;

            goto try_except_handler_9;
        }
        MAKE_OR_REUSE_FRAME( cache_frame_276abd04051027d5fca15e73c89233a1_3, codeobj_276abd04051027d5fca15e73c89233a1, module_subprocess, sizeof(void *) );
        frame_276abd04051027d5fca15e73c89233a1_3 = cache_frame_276abd04051027d5fca15e73c89233a1_3;

        // Push the new frame as the currently active one.
        pushFrameStack( frame_276abd04051027d5fca15e73c89233a1_3 );

        // Mark the frame object as in use, ref count 1 will be up for reuse.
        assert( Py_REFCNT( frame_276abd04051027d5fca15e73c89233a1_3 ) == 2 ); // Frame stack

        // Framed code:
        {
            PyObject *tmp_defaults_2;
            tmp_defaults_2 = const_tuple_none_none_tuple;
            Py_INCREF( tmp_defaults_2 );
            tmp_dictset_value = MAKE_FUNCTION_subprocess$$$function_5___init__( tmp_defaults_2 );



            tmp_res = PyObject_SetItem( locals_subprocess_97, const_str_plain___init__, tmp_dictset_value );
            Py_DECREF( tmp_dictset_value );
            if ( tmp_res != 0 )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 104;
                type_description_2 = "o";
                goto frame_exception_exit_3;
            }
        }
        tmp_dictset_value = MAKE_FUNCTION_subprocess$$$function_6___str__(  );



        tmp_res = PyObject_SetItem( locals_subprocess_97, const_str_plain___str__, tmp_dictset_value );
        Py_DECREF( tmp_dictset_value );
        if ( tmp_res != 0 )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 110;
            type_description_2 = "o";
            goto frame_exception_exit_3;
        }
        {
            nuitka_bool tmp_condition_result_19;
            PyObject *tmp_called_name_8;
            PyObject *tmp_args_element_name_4;
            PyObject *tmp_called_name_9;
            PyObject *tmp_args_element_name_5;
            tmp_res = MAPPING_HAS_ITEM( locals_subprocess_97, const_str_plain_property );

            if ( tmp_res == -1 )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 114;
                type_description_2 = "o";
                goto frame_exception_exit_3;
            }
            tmp_condition_result_19 = ( tmp_res == 1 ) ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
            if ( tmp_condition_result_19 == NUITKA_BOOL_TRUE )
            {
                goto condexpr_true_8;
            }
            else
            {
                goto condexpr_false_8;
            }
            condexpr_true_8:;
            tmp_called_name_8 = PyObject_GetItem( locals_subprocess_97, const_str_plain_property );

            if ( tmp_called_name_8 == NULL && CHECK_AND_CLEAR_KEY_ERROR_OCCURRED() )
            {

                exception_type = PyExc_NameError;
                Py_INCREF( exception_type );
                exception_value = PyUnicode_FromFormat( "name '%s' is not defined", "property" );
                exception_tb = NULL;
                NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
                CHAIN_EXCEPTION( exception_value );

                exception_lineno = 114;
                type_description_2 = "o";
                goto frame_exception_exit_3;
            }

            if ( tmp_called_name_8 == NULL )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 114;
                type_description_2 = "o";
                goto frame_exception_exit_3;
            }
            tmp_args_element_name_4 = MAKE_FUNCTION_subprocess$$$function_7_stdout(  );



            frame_276abd04051027d5fca15e73c89233a1_3->m_frame.f_lineno = 114;
            {
                PyObject *call_args[] = { tmp_args_element_name_4 };
                tmp_dictset_value = CALL_FUNCTION_WITH_ARGS1( tmp_called_name_8, call_args );
            }

            Py_DECREF( tmp_called_name_8 );
            Py_DECREF( tmp_args_element_name_4 );
            if ( tmp_dictset_value == NULL )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 114;
                type_description_2 = "o";
                goto frame_exception_exit_3;
            }
            goto condexpr_end_8;
            condexpr_false_8:;
            tmp_called_name_9 = (PyObject *)&PyProperty_Type;
            tmp_args_element_name_5 = MAKE_FUNCTION_subprocess$$$function_7_stdout(  );



            frame_276abd04051027d5fca15e73c89233a1_3->m_frame.f_lineno = 114;
            {
                PyObject *call_args[] = { tmp_args_element_name_5 };
                tmp_dictset_value = CALL_FUNCTION_WITH_ARGS1( tmp_called_name_9, call_args );
            }

            Py_DECREF( tmp_args_element_name_5 );
            if ( tmp_dictset_value == NULL )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 114;
                type_description_2 = "o";
                goto frame_exception_exit_3;
            }
            condexpr_end_8:;
            tmp_res = PyObject_SetItem( locals_subprocess_97, const_str_plain_stdout, tmp_dictset_value );
            Py_DECREF( tmp_dictset_value );
            if ( tmp_res != 0 )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 114;
                type_description_2 = "o";
                goto frame_exception_exit_3;
            }
        }
        {
            PyObject *tmp_called_instance_2;
            PyObject *tmp_args_element_name_6;
            tmp_called_instance_2 = PyObject_GetItem( locals_subprocess_97, const_str_plain_stdout );

            if ( tmp_called_instance_2 == NULL && CHECK_AND_CLEAR_KEY_ERROR_OCCURRED() )
            {

                exception_type = PyExc_NameError;
                Py_INCREF( exception_type );
                exception_value = PyUnicode_FromFormat( "name '%s' is not defined", "stdout" );
                exception_tb = NULL;
                NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
                CHAIN_EXCEPTION( exception_value );

                exception_lineno = 118;
                type_description_2 = "o";
                goto frame_exception_exit_3;
            }

            if ( tmp_called_instance_2 == NULL )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 118;
                type_description_2 = "o";
                goto frame_exception_exit_3;
            }
            tmp_args_element_name_6 = MAKE_FUNCTION_subprocess$$$function_8_stdout(  );



            frame_276abd04051027d5fca15e73c89233a1_3->m_frame.f_lineno = 118;
            {
                PyObject *call_args[] = { tmp_args_element_name_6 };
                tmp_dictset_value = CALL_METHOD_WITH_ARGS1( tmp_called_instance_2, const_str_plain_setter, call_args );
            }

            Py_DECREF( tmp_called_instance_2 );
            Py_DECREF( tmp_args_element_name_6 );
            if ( tmp_dictset_value == NULL )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 118;
                type_description_2 = "o";
                goto frame_exception_exit_3;
            }
            tmp_res = PyObject_SetItem( locals_subprocess_97, const_str_plain_stdout, tmp_dictset_value );
            Py_DECREF( tmp_dictset_value );
            if ( tmp_res != 0 )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 118;
                type_description_2 = "o";
                goto frame_exception_exit_3;
            }
        }

#if 0
        RESTORE_FRAME_EXCEPTION( frame_276abd04051027d5fca15e73c89233a1_3 );
#endif

        // Put the previous frame back on top.
        popFrameStack();

        goto frame_no_exception_2;

        frame_exception_exit_3:;

#if 0
        RESTORE_FRAME_EXCEPTION( frame_276abd04051027d5fca15e73c89233a1_3 );
#endif

        if ( exception_tb == NULL )
        {
            exception_tb = MAKE_TRACEBACK( frame_276abd04051027d5fca15e73c89233a1_3, exception_lineno );
        }
        else if ( exception_tb->tb_frame != &frame_276abd04051027d5fca15e73c89233a1_3->m_frame )
        {
            exception_tb = ADD_TRACEBACK( exception_tb, frame_276abd04051027d5fca15e73c89233a1_3, exception_lineno );
        }

        // Attachs locals to frame if any.
        Nuitka_Frame_AttachLocals(
            (struct Nuitka_FrameObject *)frame_276abd04051027d5fca15e73c89233a1_3,
            type_description_2,
            outline_2_var___class__
        );


        // Release cached frame.
        if ( frame_276abd04051027d5fca15e73c89233a1_3 == cache_frame_276abd04051027d5fca15e73c89233a1_3 )
        {
            Py_DECREF( frame_276abd04051027d5fca15e73c89233a1_3 );
        }
        cache_frame_276abd04051027d5fca15e73c89233a1_3 = NULL;

        assertFrameObject( frame_276abd04051027d5fca15e73c89233a1_3 );

        // Put the previous frame back on top.
        popFrameStack();

        // Return the error.
        goto nested_frame_exit_2;

        frame_no_exception_2:;
        goto skip_nested_handling_2;
        nested_frame_exit_2:;

        goto try_except_handler_9;
        skip_nested_handling_2:;
        {
            nuitka_bool tmp_condition_result_20;
            PyObject *tmp_compexpr_left_4;
            PyObject *tmp_compexpr_right_4;
            CHECK_OBJECT( tmp_class_creation_3__bases );
            tmp_compexpr_left_4 = tmp_class_creation_3__bases;
            CHECK_OBJECT( tmp_class_creation_3__bases_orig );
            tmp_compexpr_right_4 = tmp_class_creation_3__bases_orig;
            tmp_res = RICH_COMPARE_BOOL_NOTEQ_OBJECT_OBJECT( tmp_compexpr_left_4, tmp_compexpr_right_4 );
            if ( tmp_res == -1 )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 97;

                goto try_except_handler_9;
            }
            tmp_condition_result_20 = ( tmp_res != 0 ) ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
            if ( tmp_condition_result_20 == NUITKA_BOOL_TRUE )
            {
                goto branch_yes_12;
            }
            else
            {
                goto branch_no_12;
            }
            branch_yes_12:;
            CHECK_OBJECT( tmp_class_creation_3__bases_orig );
            tmp_dictset_value = tmp_class_creation_3__bases_orig;
            tmp_res = PyObject_SetItem( locals_subprocess_97, const_str_plain___orig_bases__, tmp_dictset_value );
            if ( tmp_res != 0 )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 97;

                goto try_except_handler_9;
            }
            branch_no_12:;
        }
        {
            PyObject *tmp_assign_source_36;
            PyObject *tmp_called_name_10;
            PyObject *tmp_args_name_6;
            PyObject *tmp_tuple_element_11;
            PyObject *tmp_kw_name_6;
            CHECK_OBJECT( tmp_class_creation_3__metaclass );
            tmp_called_name_10 = tmp_class_creation_3__metaclass;
            tmp_tuple_element_11 = const_str_plain_TimeoutExpired;
            tmp_args_name_6 = PyTuple_New( 3 );
            Py_INCREF( tmp_tuple_element_11 );
            PyTuple_SET_ITEM( tmp_args_name_6, 0, tmp_tuple_element_11 );
            CHECK_OBJECT( tmp_class_creation_3__bases );
            tmp_tuple_element_11 = tmp_class_creation_3__bases;
            Py_INCREF( tmp_tuple_element_11 );
            PyTuple_SET_ITEM( tmp_args_name_6, 1, tmp_tuple_element_11 );
            tmp_tuple_element_11 = locals_subprocess_97;
            Py_INCREF( tmp_tuple_element_11 );
            PyTuple_SET_ITEM( tmp_args_name_6, 2, tmp_tuple_element_11 );
            CHECK_OBJECT( tmp_class_creation_3__class_decl_dict );
            tmp_kw_name_6 = tmp_class_creation_3__class_decl_dict;
            frame_3b8ded27a474e748966db3dc93ed4330->m_frame.f_lineno = 97;
            tmp_assign_source_36 = CALL_FUNCTION( tmp_called_name_10, tmp_args_name_6, tmp_kw_name_6 );
            Py_DECREF( tmp_args_name_6 );
            if ( tmp_assign_source_36 == NULL )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 97;

                goto try_except_handler_9;
            }
            assert( outline_2_var___class__ == NULL );
            outline_2_var___class__ = tmp_assign_source_36;
        }
        CHECK_OBJECT( outline_2_var___class__ );
        tmp_assign_source_35 = outline_2_var___class__;
        Py_INCREF( tmp_assign_source_35 );
        goto try_return_handler_9;
        // tried codes exits in all cases
        NUITKA_CANNOT_GET_HERE( subprocess );
        return MOD_RETURN_VALUE( NULL );
        // Return handler code:
        try_return_handler_9:;
        Py_DECREF( locals_subprocess_97 );
        locals_subprocess_97 = NULL;
        goto try_return_handler_8;
        // Exception handler code:
        try_except_handler_9:;
        exception_keeper_type_7 = exception_type;
        exception_keeper_value_7 = exception_value;
        exception_keeper_tb_7 = exception_tb;
        exception_keeper_lineno_7 = exception_lineno;
        exception_type = NULL;
        exception_value = NULL;
        exception_tb = NULL;
        exception_lineno = 0;

        Py_DECREF( locals_subprocess_97 );
        locals_subprocess_97 = NULL;
        // Re-raise.
        exception_type = exception_keeper_type_7;
        exception_value = exception_keeper_value_7;
        exception_tb = exception_keeper_tb_7;
        exception_lineno = exception_keeper_lineno_7;

        goto try_except_handler_8;
        // End of try:
        // tried codes exits in all cases
        NUITKA_CANNOT_GET_HERE( subprocess );
        return MOD_RETURN_VALUE( NULL );
        // Return handler code:
        try_return_handler_8:;
        CHECK_OBJECT( (PyObject *)outline_2_var___class__ );
        Py_DECREF( outline_2_var___class__ );
        outline_2_var___class__ = NULL;

        goto outline_result_3;
        // Exception handler code:
        try_except_handler_8:;
        exception_keeper_type_8 = exception_type;
        exception_keeper_value_8 = exception_value;
        exception_keeper_tb_8 = exception_tb;
        exception_keeper_lineno_8 = exception_lineno;
        exception_type = NULL;
        exception_value = NULL;
        exception_tb = NULL;
        exception_lineno = 0;

        // Re-raise.
        exception_type = exception_keeper_type_8;
        exception_value = exception_keeper_value_8;
        exception_tb = exception_keeper_tb_8;
        exception_lineno = exception_keeper_lineno_8;

        goto outline_exception_3;
        // End of try:
        // Return statement must have exited already.
        NUITKA_CANNOT_GET_HERE( subprocess );
        return MOD_RETURN_VALUE( NULL );
        outline_exception_3:;
        exception_lineno = 97;
        goto try_except_handler_7;
        outline_result_3:;
        UPDATE_STRING_DICT1( moduledict_subprocess, (Nuitka_StringObject *)const_str_plain_TimeoutExpired, tmp_assign_source_35 );
    }
    goto try_end_3;
    // Exception handler code:
    try_except_handler_7:;
    exception_keeper_type_9 = exception_type;
    exception_keeper_value_9 = exception_value;
    exception_keeper_tb_9 = exception_tb;
    exception_keeper_lineno_9 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    Py_XDECREF( tmp_class_creation_3__bases_orig );
    tmp_class_creation_3__bases_orig = NULL;

    Py_XDECREF( tmp_class_creation_3__bases );
    tmp_class_creation_3__bases = NULL;

    Py_XDECREF( tmp_class_creation_3__class_decl_dict );
    tmp_class_creation_3__class_decl_dict = NULL;

    Py_XDECREF( tmp_class_creation_3__metaclass );
    tmp_class_creation_3__metaclass = NULL;

    Py_XDECREF( tmp_class_creation_3__prepared );
    tmp_class_creation_3__prepared = NULL;

    // Re-raise.
    exception_type = exception_keeper_type_9;
    exception_value = exception_keeper_value_9;
    exception_tb = exception_keeper_tb_9;
    exception_lineno = exception_keeper_lineno_9;

    goto frame_exception_exit_1;
    // End of try:
    try_end_3:;
    CHECK_OBJECT( (PyObject *)tmp_class_creation_3__bases_orig );
    Py_DECREF( tmp_class_creation_3__bases_orig );
    tmp_class_creation_3__bases_orig = NULL;

    CHECK_OBJECT( (PyObject *)tmp_class_creation_3__bases );
    Py_DECREF( tmp_class_creation_3__bases );
    tmp_class_creation_3__bases = NULL;

    CHECK_OBJECT( (PyObject *)tmp_class_creation_3__class_decl_dict );
    Py_DECREF( tmp_class_creation_3__class_decl_dict );
    tmp_class_creation_3__class_decl_dict = NULL;

    CHECK_OBJECT( (PyObject *)tmp_class_creation_3__metaclass );
    Py_DECREF( tmp_class_creation_3__metaclass );
    tmp_class_creation_3__metaclass = NULL;

    CHECK_OBJECT( (PyObject *)tmp_class_creation_3__prepared );
    Py_DECREF( tmp_class_creation_3__prepared );
    tmp_class_creation_3__prepared = NULL;

    {
        nuitka_bool tmp_condition_result_21;
        PyObject *tmp_mvar_value_6;
        int tmp_truth_name_4;
        tmp_mvar_value_6 = GET_STRING_DICT_VALUE( moduledict_subprocess, (Nuitka_StringObject *)const_str_plain__mswindows );

        if (unlikely( tmp_mvar_value_6 == NULL ))
        {
            tmp_mvar_value_6 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain__mswindows );
        }

        if ( tmp_mvar_value_6 == NULL )
        {

            exception_type = PyExc_NameError;
            Py_INCREF( exception_type );
            exception_value = PyUnicode_FromFormat( "name '%s' is not defined", "_mswindows" );
            exception_tb = NULL;
            NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
            CHAIN_EXCEPTION( exception_value );

            exception_lineno = 125;

            goto frame_exception_exit_1;
        }

        tmp_truth_name_4 = CHECK_IF_TRUE( tmp_mvar_value_6 );
        if ( tmp_truth_name_4 == -1 )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 125;

            goto frame_exception_exit_1;
        }
        tmp_condition_result_21 = tmp_truth_name_4 == 1 ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
        if ( tmp_condition_result_21 == NUITKA_BOOL_TRUE )
        {
            goto branch_yes_13;
        }
        else
        {
            goto branch_no_13;
        }
        branch_yes_13:;
        {
            PyObject *tmp_assign_source_37;
            PyObject *tmp_name_name_10;
            PyObject *tmp_globals_name_10;
            PyObject *tmp_locals_name_10;
            PyObject *tmp_fromlist_name_10;
            PyObject *tmp_level_name_10;
            tmp_name_name_10 = const_str_plain_threading;
            tmp_globals_name_10 = (PyObject *)moduledict_subprocess;
            tmp_locals_name_10 = Py_None;
            tmp_fromlist_name_10 = Py_None;
            tmp_level_name_10 = const_int_0;
            frame_3b8ded27a474e748966db3dc93ed4330->m_frame.f_lineno = 126;
            tmp_assign_source_37 = IMPORT_MODULE5( tmp_name_name_10, tmp_globals_name_10, tmp_locals_name_10, tmp_fromlist_name_10, tmp_level_name_10 );
            if ( tmp_assign_source_37 == NULL )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 126;

                goto frame_exception_exit_1;
            }
            UPDATE_STRING_DICT1( moduledict_subprocess, (Nuitka_StringObject *)const_str_plain_threading, tmp_assign_source_37 );
        }
        {
            PyObject *tmp_assign_source_38;
            PyObject *tmp_name_name_11;
            PyObject *tmp_globals_name_11;
            PyObject *tmp_locals_name_11;
            PyObject *tmp_fromlist_name_11;
            PyObject *tmp_level_name_11;
            tmp_name_name_11 = const_str_plain_msvcrt;
            tmp_globals_name_11 = (PyObject *)moduledict_subprocess;
            tmp_locals_name_11 = Py_None;
            tmp_fromlist_name_11 = Py_None;
            tmp_level_name_11 = const_int_0;
            frame_3b8ded27a474e748966db3dc93ed4330->m_frame.f_lineno = 127;
            tmp_assign_source_38 = IMPORT_MODULE5( tmp_name_name_11, tmp_globals_name_11, tmp_locals_name_11, tmp_fromlist_name_11, tmp_level_name_11 );
            assert( !(tmp_assign_source_38 == NULL) );
            UPDATE_STRING_DICT1( moduledict_subprocess, (Nuitka_StringObject *)const_str_plain_msvcrt, tmp_assign_source_38 );
        }
        {
            PyObject *tmp_assign_source_39;
            PyObject *tmp_name_name_12;
            PyObject *tmp_globals_name_12;
            PyObject *tmp_locals_name_12;
            PyObject *tmp_fromlist_name_12;
            PyObject *tmp_level_name_12;
            tmp_name_name_12 = const_str_plain__winapi;
            tmp_globals_name_12 = (PyObject *)moduledict_subprocess;
            tmp_locals_name_12 = Py_None;
            tmp_fromlist_name_12 = Py_None;
            tmp_level_name_12 = const_int_0;
            frame_3b8ded27a474e748966db3dc93ed4330->m_frame.f_lineno = 128;
            tmp_assign_source_39 = IMPORT_MODULE5( tmp_name_name_12, tmp_globals_name_12, tmp_locals_name_12, tmp_fromlist_name_12, tmp_level_name_12 );
            assert( !(tmp_assign_source_39 == NULL) );
            UPDATE_STRING_DICT1( moduledict_subprocess, (Nuitka_StringObject *)const_str_plain__winapi, tmp_assign_source_39 );
        }
        {
            PyObject *tmp_assign_source_40;
            tmp_assign_source_40 = PyDict_New();
            assert( tmp_class_creation_4__class_decl_dict == NULL );
            tmp_class_creation_4__class_decl_dict = tmp_assign_source_40;
        }
        // Tried code:
        {
            PyObject *tmp_assign_source_41;
            PyObject *tmp_metaclass_name_4;
            nuitka_bool tmp_condition_result_22;
            PyObject *tmp_key_name_10;
            PyObject *tmp_dict_name_10;
            PyObject *tmp_dict_name_11;
            PyObject *tmp_key_name_11;
            PyObject *tmp_bases_name_4;
            tmp_key_name_10 = const_str_plain_metaclass;
            CHECK_OBJECT( tmp_class_creation_4__class_decl_dict );
            tmp_dict_name_10 = tmp_class_creation_4__class_decl_dict;
            tmp_res = PyDict_Contains( tmp_dict_name_10, tmp_key_name_10 );
            if ( tmp_res == -1 )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 129;

                goto try_except_handler_10;
            }
            tmp_condition_result_22 = ( tmp_res != 0 ) ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
            if ( tmp_condition_result_22 == NUITKA_BOOL_TRUE )
            {
                goto condexpr_true_9;
            }
            else
            {
                goto condexpr_false_9;
            }
            condexpr_true_9:;
            CHECK_OBJECT( tmp_class_creation_4__class_decl_dict );
            tmp_dict_name_11 = tmp_class_creation_4__class_decl_dict;
            tmp_key_name_11 = const_str_plain_metaclass;
            tmp_metaclass_name_4 = DICT_GET_ITEM( tmp_dict_name_11, tmp_key_name_11 );
            if ( tmp_metaclass_name_4 == NULL )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 129;

                goto try_except_handler_10;
            }
            goto condexpr_end_9;
            condexpr_false_9:;
            tmp_metaclass_name_4 = (PyObject *)&PyType_Type;
            Py_INCREF( tmp_metaclass_name_4 );
            condexpr_end_9:;
            tmp_bases_name_4 = const_tuple_empty;
            tmp_assign_source_41 = SELECT_METACLASS( tmp_metaclass_name_4, tmp_bases_name_4 );
            Py_DECREF( tmp_metaclass_name_4 );
            if ( tmp_assign_source_41 == NULL )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 129;

                goto try_except_handler_10;
            }
            assert( tmp_class_creation_4__metaclass == NULL );
            tmp_class_creation_4__metaclass = tmp_assign_source_41;
        }
        {
            nuitka_bool tmp_condition_result_23;
            PyObject *tmp_key_name_12;
            PyObject *tmp_dict_name_12;
            tmp_key_name_12 = const_str_plain_metaclass;
            CHECK_OBJECT( tmp_class_creation_4__class_decl_dict );
            tmp_dict_name_12 = tmp_class_creation_4__class_decl_dict;
            tmp_res = PyDict_Contains( tmp_dict_name_12, tmp_key_name_12 );
            if ( tmp_res == -1 )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 129;

                goto try_except_handler_10;
            }
            tmp_condition_result_23 = ( tmp_res != 0 ) ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
            if ( tmp_condition_result_23 == NUITKA_BOOL_TRUE )
            {
                goto branch_yes_14;
            }
            else
            {
                goto branch_no_14;
            }
            branch_yes_14:;
            CHECK_OBJECT( tmp_class_creation_4__class_decl_dict );
            tmp_dictdel_dict = tmp_class_creation_4__class_decl_dict;
            tmp_dictdel_key = const_str_plain_metaclass;
            tmp_result = DICT_REMOVE_ITEM( tmp_dictdel_dict, tmp_dictdel_key );
            if ( tmp_result == false )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 129;

                goto try_except_handler_10;
            }
            branch_no_14:;
        }
        {
            nuitka_bool tmp_condition_result_24;
            PyObject *tmp_source_name_14;
            CHECK_OBJECT( tmp_class_creation_4__metaclass );
            tmp_source_name_14 = tmp_class_creation_4__metaclass;
            tmp_res = PyObject_HasAttr( tmp_source_name_14, const_str_plain___prepare__ );
            tmp_condition_result_24 = ( tmp_res != 0 ) ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
            if ( tmp_condition_result_24 == NUITKA_BOOL_TRUE )
            {
                goto branch_yes_15;
            }
            else
            {
                goto branch_no_15;
            }
            branch_yes_15:;
            {
                PyObject *tmp_assign_source_42;
                PyObject *tmp_called_name_11;
                PyObject *tmp_source_name_15;
                PyObject *tmp_args_name_7;
                PyObject *tmp_kw_name_7;
                CHECK_OBJECT( tmp_class_creation_4__metaclass );
                tmp_source_name_15 = tmp_class_creation_4__metaclass;
                tmp_called_name_11 = LOOKUP_ATTRIBUTE( tmp_source_name_15, const_str_plain___prepare__ );
                if ( tmp_called_name_11 == NULL )
                {
                    assert( ERROR_OCCURRED() );

                    FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                    exception_lineno = 129;

                    goto try_except_handler_10;
                }
                tmp_args_name_7 = const_tuple_str_plain_STARTUPINFO_tuple_empty_tuple;
                CHECK_OBJECT( tmp_class_creation_4__class_decl_dict );
                tmp_kw_name_7 = tmp_class_creation_4__class_decl_dict;
                frame_3b8ded27a474e748966db3dc93ed4330->m_frame.f_lineno = 129;
                tmp_assign_source_42 = CALL_FUNCTION( tmp_called_name_11, tmp_args_name_7, tmp_kw_name_7 );
                Py_DECREF( tmp_called_name_11 );
                if ( tmp_assign_source_42 == NULL )
                {
                    assert( ERROR_OCCURRED() );

                    FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                    exception_lineno = 129;

                    goto try_except_handler_10;
                }
                assert( tmp_class_creation_4__prepared == NULL );
                tmp_class_creation_4__prepared = tmp_assign_source_42;
            }
            {
                nuitka_bool tmp_condition_result_25;
                PyObject *tmp_operand_name_4;
                PyObject *tmp_source_name_16;
                CHECK_OBJECT( tmp_class_creation_4__prepared );
                tmp_source_name_16 = tmp_class_creation_4__prepared;
                tmp_res = PyObject_HasAttr( tmp_source_name_16, const_str_plain___getitem__ );
                tmp_operand_name_4 = ( tmp_res != 0 ) ? Py_True : Py_False;
                tmp_res = CHECK_IF_TRUE( tmp_operand_name_4 );
                if ( tmp_res == -1 )
                {
                    assert( ERROR_OCCURRED() );

                    FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                    exception_lineno = 129;

                    goto try_except_handler_10;
                }
                tmp_condition_result_25 = ( tmp_res == 0 ) ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
                if ( tmp_condition_result_25 == NUITKA_BOOL_TRUE )
                {
                    goto branch_yes_16;
                }
                else
                {
                    goto branch_no_16;
                }
                branch_yes_16:;
                {
                    PyObject *tmp_raise_type_4;
                    PyObject *tmp_raise_value_4;
                    PyObject *tmp_left_name_4;
                    PyObject *tmp_right_name_4;
                    PyObject *tmp_tuple_element_12;
                    PyObject *tmp_getattr_target_4;
                    PyObject *tmp_getattr_attr_4;
                    PyObject *tmp_getattr_default_4;
                    PyObject *tmp_source_name_17;
                    PyObject *tmp_type_arg_7;
                    tmp_raise_type_4 = PyExc_TypeError;
                    tmp_left_name_4 = const_str_digest_75fd71b1edada749c2ef7ac810062295;
                    CHECK_OBJECT( tmp_class_creation_4__metaclass );
                    tmp_getattr_target_4 = tmp_class_creation_4__metaclass;
                    tmp_getattr_attr_4 = const_str_plain___name__;
                    tmp_getattr_default_4 = const_str_angle_metaclass;
                    tmp_tuple_element_12 = BUILTIN_GETATTR( tmp_getattr_target_4, tmp_getattr_attr_4, tmp_getattr_default_4 );
                    if ( tmp_tuple_element_12 == NULL )
                    {
                        assert( ERROR_OCCURRED() );

                        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                        exception_lineno = 129;

                        goto try_except_handler_10;
                    }
                    tmp_right_name_4 = PyTuple_New( 2 );
                    PyTuple_SET_ITEM( tmp_right_name_4, 0, tmp_tuple_element_12 );
                    CHECK_OBJECT( tmp_class_creation_4__prepared );
                    tmp_type_arg_7 = tmp_class_creation_4__prepared;
                    tmp_source_name_17 = BUILTIN_TYPE1( tmp_type_arg_7 );
                    assert( !(tmp_source_name_17 == NULL) );
                    tmp_tuple_element_12 = LOOKUP_ATTRIBUTE( tmp_source_name_17, const_str_plain___name__ );
                    Py_DECREF( tmp_source_name_17 );
                    if ( tmp_tuple_element_12 == NULL )
                    {
                        assert( ERROR_OCCURRED() );

                        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
                        Py_DECREF( tmp_right_name_4 );

                        exception_lineno = 129;

                        goto try_except_handler_10;
                    }
                    PyTuple_SET_ITEM( tmp_right_name_4, 1, tmp_tuple_element_12 );
                    tmp_raise_value_4 = BINARY_OPERATION_REMAINDER( tmp_left_name_4, tmp_right_name_4 );
                    Py_DECREF( tmp_right_name_4 );
                    if ( tmp_raise_value_4 == NULL )
                    {
                        assert( ERROR_OCCURRED() );

                        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                        exception_lineno = 129;

                        goto try_except_handler_10;
                    }
                    exception_type = tmp_raise_type_4;
                    Py_INCREF( tmp_raise_type_4 );
                    exception_value = tmp_raise_value_4;
                    exception_lineno = 129;
                    RAISE_EXCEPTION_IMPLICIT( &exception_type, &exception_value, &exception_tb );

                    goto try_except_handler_10;
                }
                branch_no_16:;
            }
            goto branch_end_15;
            branch_no_15:;
            {
                PyObject *tmp_assign_source_43;
                tmp_assign_source_43 = PyDict_New();
                assert( tmp_class_creation_4__prepared == NULL );
                tmp_class_creation_4__prepared = tmp_assign_source_43;
            }
            branch_end_15:;
        }
        {
            PyObject *tmp_assign_source_44;
            {
                PyObject *tmp_set_locals_4;
                CHECK_OBJECT( tmp_class_creation_4__prepared );
                tmp_set_locals_4 = tmp_class_creation_4__prepared;
                locals_subprocess_129 = tmp_set_locals_4;
                Py_INCREF( tmp_set_locals_4 );
            }
            // Tried code:
            // Tried code:
            tmp_dictset_value = const_str_plain_subprocess;
            tmp_res = PyObject_SetItem( locals_subprocess_129, const_str_plain___module__, tmp_dictset_value );
            if ( tmp_res != 0 )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 129;

                goto try_except_handler_12;
            }
            tmp_dictset_value = const_str_plain_STARTUPINFO;
            tmp_res = PyObject_SetItem( locals_subprocess_129, const_str_plain___qualname__, tmp_dictset_value );
            if ( tmp_res != 0 )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 129;

                goto try_except_handler_12;
            }
            MAKE_OR_REUSE_FRAME( cache_frame_c34aed000ce9d0c2f8b25617b8641037_4, codeobj_c34aed000ce9d0c2f8b25617b8641037, module_subprocess, sizeof(void *) );
            frame_c34aed000ce9d0c2f8b25617b8641037_4 = cache_frame_c34aed000ce9d0c2f8b25617b8641037_4;

            // Push the new frame as the currently active one.
            pushFrameStack( frame_c34aed000ce9d0c2f8b25617b8641037_4 );

            // Mark the frame object as in use, ref count 1 will be up for reuse.
            assert( Py_REFCNT( frame_c34aed000ce9d0c2f8b25617b8641037_4 ) == 2 ); // Frame stack

            // Framed code:
            {
                PyObject *tmp_kw_defaults_1;
                tmp_kw_defaults_1 = PyDict_Copy( const_dict_073457380201d8dc13a75e4bf4f18aab );
                tmp_dictset_value = MAKE_FUNCTION_subprocess$$$function_9___init__( tmp_kw_defaults_1 );



                tmp_res = PyObject_SetItem( locals_subprocess_129, const_str_plain___init__, tmp_dictset_value );
                Py_DECREF( tmp_dictset_value );
                if ( tmp_res != 0 )
                {
                    assert( ERROR_OCCURRED() );

                    FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                    exception_lineno = 130;
                    type_description_2 = "o";
                    goto frame_exception_exit_4;
                }
            }
            tmp_dictset_value = MAKE_FUNCTION_subprocess$$$function_10__copy(  );



            tmp_res = PyObject_SetItem( locals_subprocess_129, const_str_plain__copy, tmp_dictset_value );
            Py_DECREF( tmp_dictset_value );
            if ( tmp_res != 0 )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 139;
                type_description_2 = "o";
                goto frame_exception_exit_4;
            }

#if 0
            RESTORE_FRAME_EXCEPTION( frame_c34aed000ce9d0c2f8b25617b8641037_4 );
#endif

            // Put the previous frame back on top.
            popFrameStack();

            goto frame_no_exception_3;

            frame_exception_exit_4:;

#if 0
            RESTORE_FRAME_EXCEPTION( frame_c34aed000ce9d0c2f8b25617b8641037_4 );
#endif

            if ( exception_tb == NULL )
            {
                exception_tb = MAKE_TRACEBACK( frame_c34aed000ce9d0c2f8b25617b8641037_4, exception_lineno );
            }
            else if ( exception_tb->tb_frame != &frame_c34aed000ce9d0c2f8b25617b8641037_4->m_frame )
            {
                exception_tb = ADD_TRACEBACK( exception_tb, frame_c34aed000ce9d0c2f8b25617b8641037_4, exception_lineno );
            }

            // Attachs locals to frame if any.
            Nuitka_Frame_AttachLocals(
                (struct Nuitka_FrameObject *)frame_c34aed000ce9d0c2f8b25617b8641037_4,
                type_description_2,
                outline_3_var___class__
            );


            // Release cached frame.
            if ( frame_c34aed000ce9d0c2f8b25617b8641037_4 == cache_frame_c34aed000ce9d0c2f8b25617b8641037_4 )
            {
                Py_DECREF( frame_c34aed000ce9d0c2f8b25617b8641037_4 );
            }
            cache_frame_c34aed000ce9d0c2f8b25617b8641037_4 = NULL;

            assertFrameObject( frame_c34aed000ce9d0c2f8b25617b8641037_4 );

            // Put the previous frame back on top.
            popFrameStack();

            // Return the error.
            goto nested_frame_exit_3;

            frame_no_exception_3:;
            goto skip_nested_handling_3;
            nested_frame_exit_3:;

            goto try_except_handler_12;
            skip_nested_handling_3:;
            {
                PyObject *tmp_assign_source_45;
                PyObject *tmp_called_name_12;
                PyObject *tmp_args_name_8;
                PyObject *tmp_tuple_element_13;
                PyObject *tmp_kw_name_8;
                CHECK_OBJECT( tmp_class_creation_4__metaclass );
                tmp_called_name_12 = tmp_class_creation_4__metaclass;
                tmp_tuple_element_13 = const_str_plain_STARTUPINFO;
                tmp_args_name_8 = PyTuple_New( 3 );
                Py_INCREF( tmp_tuple_element_13 );
                PyTuple_SET_ITEM( tmp_args_name_8, 0, tmp_tuple_element_13 );
                tmp_tuple_element_13 = const_tuple_empty;
                Py_INCREF( tmp_tuple_element_13 );
                PyTuple_SET_ITEM( tmp_args_name_8, 1, tmp_tuple_element_13 );
                tmp_tuple_element_13 = locals_subprocess_129;
                Py_INCREF( tmp_tuple_element_13 );
                PyTuple_SET_ITEM( tmp_args_name_8, 2, tmp_tuple_element_13 );
                CHECK_OBJECT( tmp_class_creation_4__class_decl_dict );
                tmp_kw_name_8 = tmp_class_creation_4__class_decl_dict;
                frame_3b8ded27a474e748966db3dc93ed4330->m_frame.f_lineno = 129;
                tmp_assign_source_45 = CALL_FUNCTION( tmp_called_name_12, tmp_args_name_8, tmp_kw_name_8 );
                Py_DECREF( tmp_args_name_8 );
                if ( tmp_assign_source_45 == NULL )
                {
                    assert( ERROR_OCCURRED() );

                    FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                    exception_lineno = 129;

                    goto try_except_handler_12;
                }
                assert( outline_3_var___class__ == NULL );
                outline_3_var___class__ = tmp_assign_source_45;
            }
            CHECK_OBJECT( outline_3_var___class__ );
            tmp_assign_source_44 = outline_3_var___class__;
            Py_INCREF( tmp_assign_source_44 );
            goto try_return_handler_12;
            // tried codes exits in all cases
            NUITKA_CANNOT_GET_HERE( subprocess );
            return MOD_RETURN_VALUE( NULL );
            // Return handler code:
            try_return_handler_12:;
            Py_DECREF( locals_subprocess_129 );
            locals_subprocess_129 = NULL;
            goto try_return_handler_11;
            // Exception handler code:
            try_except_handler_12:;
            exception_keeper_type_10 = exception_type;
            exception_keeper_value_10 = exception_value;
            exception_keeper_tb_10 = exception_tb;
            exception_keeper_lineno_10 = exception_lineno;
            exception_type = NULL;
            exception_value = NULL;
            exception_tb = NULL;
            exception_lineno = 0;

            Py_DECREF( locals_subprocess_129 );
            locals_subprocess_129 = NULL;
            // Re-raise.
            exception_type = exception_keeper_type_10;
            exception_value = exception_keeper_value_10;
            exception_tb = exception_keeper_tb_10;
            exception_lineno = exception_keeper_lineno_10;

            goto try_except_handler_11;
            // End of try:
            // tried codes exits in all cases
            NUITKA_CANNOT_GET_HERE( subprocess );
            return MOD_RETURN_VALUE( NULL );
            // Return handler code:
            try_return_handler_11:;
            CHECK_OBJECT( (PyObject *)outline_3_var___class__ );
            Py_DECREF( outline_3_var___class__ );
            outline_3_var___class__ = NULL;

            goto outline_result_4;
            // Exception handler code:
            try_except_handler_11:;
            exception_keeper_type_11 = exception_type;
            exception_keeper_value_11 = exception_value;
            exception_keeper_tb_11 = exception_tb;
            exception_keeper_lineno_11 = exception_lineno;
            exception_type = NULL;
            exception_value = NULL;
            exception_tb = NULL;
            exception_lineno = 0;

            // Re-raise.
            exception_type = exception_keeper_type_11;
            exception_value = exception_keeper_value_11;
            exception_tb = exception_keeper_tb_11;
            exception_lineno = exception_keeper_lineno_11;

            goto outline_exception_4;
            // End of try:
            // Return statement must have exited already.
            NUITKA_CANNOT_GET_HERE( subprocess );
            return MOD_RETURN_VALUE( NULL );
            outline_exception_4:;
            exception_lineno = 129;
            goto try_except_handler_10;
            outline_result_4:;
            UPDATE_STRING_DICT1( moduledict_subprocess, (Nuitka_StringObject *)const_str_plain_STARTUPINFO, tmp_assign_source_44 );
        }
        goto try_end_4;
        // Exception handler code:
        try_except_handler_10:;
        exception_keeper_type_12 = exception_type;
        exception_keeper_value_12 = exception_value;
        exception_keeper_tb_12 = exception_tb;
        exception_keeper_lineno_12 = exception_lineno;
        exception_type = NULL;
        exception_value = NULL;
        exception_tb = NULL;
        exception_lineno = 0;

        CHECK_OBJECT( (PyObject *)tmp_class_creation_4__class_decl_dict );
        Py_DECREF( tmp_class_creation_4__class_decl_dict );
        tmp_class_creation_4__class_decl_dict = NULL;

        Py_XDECREF( tmp_class_creation_4__metaclass );
        tmp_class_creation_4__metaclass = NULL;

        Py_XDECREF( tmp_class_creation_4__prepared );
        tmp_class_creation_4__prepared = NULL;

        // Re-raise.
        exception_type = exception_keeper_type_12;
        exception_value = exception_keeper_value_12;
        exception_tb = exception_keeper_tb_12;
        exception_lineno = exception_keeper_lineno_12;

        goto frame_exception_exit_1;
        // End of try:
        try_end_4:;
        CHECK_OBJECT( (PyObject *)tmp_class_creation_4__class_decl_dict );
        Py_DECREF( tmp_class_creation_4__class_decl_dict );
        tmp_class_creation_4__class_decl_dict = NULL;

        CHECK_OBJECT( (PyObject *)tmp_class_creation_4__metaclass );
        Py_DECREF( tmp_class_creation_4__metaclass );
        tmp_class_creation_4__metaclass = NULL;

        CHECK_OBJECT( (PyObject *)tmp_class_creation_4__prepared );
        Py_DECREF( tmp_class_creation_4__prepared );
        tmp_class_creation_4__prepared = NULL;

        goto branch_end_13;
        branch_no_13:;
        {
            PyObject *tmp_assign_source_46;
            PyObject *tmp_name_name_13;
            PyObject *tmp_globals_name_13;
            PyObject *tmp_locals_name_13;
            PyObject *tmp_fromlist_name_13;
            PyObject *tmp_level_name_13;
            tmp_name_name_13 = const_str_plain__posixsubprocess;
            tmp_globals_name_13 = (PyObject *)moduledict_subprocess;
            tmp_locals_name_13 = Py_None;
            tmp_fromlist_name_13 = Py_None;
            tmp_level_name_13 = const_int_0;
            frame_3b8ded27a474e748966db3dc93ed4330->m_frame.f_lineno = 152;
            tmp_assign_source_46 = IMPORT_MODULE5( tmp_name_name_13, tmp_globals_name_13, tmp_locals_name_13, tmp_fromlist_name_13, tmp_level_name_13 );
            if ( tmp_assign_source_46 == NULL )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 152;

                goto frame_exception_exit_1;
            }
            UPDATE_STRING_DICT1( moduledict_subprocess, (Nuitka_StringObject *)const_str_plain__posixsubprocess, tmp_assign_source_46 );
        }
        {
            PyObject *tmp_assign_source_47;
            PyObject *tmp_name_name_14;
            PyObject *tmp_globals_name_14;
            PyObject *tmp_locals_name_14;
            PyObject *tmp_fromlist_name_14;
            PyObject *tmp_level_name_14;
            tmp_name_name_14 = const_str_plain_select;
            tmp_globals_name_14 = (PyObject *)moduledict_subprocess;
            tmp_locals_name_14 = Py_None;
            tmp_fromlist_name_14 = Py_None;
            tmp_level_name_14 = const_int_0;
            frame_3b8ded27a474e748966db3dc93ed4330->m_frame.f_lineno = 153;
            tmp_assign_source_47 = IMPORT_MODULE5( tmp_name_name_14, tmp_globals_name_14, tmp_locals_name_14, tmp_fromlist_name_14, tmp_level_name_14 );
            if ( tmp_assign_source_47 == NULL )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 153;

                goto frame_exception_exit_1;
            }
            UPDATE_STRING_DICT1( moduledict_subprocess, (Nuitka_StringObject *)const_str_plain_select, tmp_assign_source_47 );
        }
        {
            PyObject *tmp_assign_source_48;
            PyObject *tmp_name_name_15;
            PyObject *tmp_globals_name_15;
            PyObject *tmp_locals_name_15;
            PyObject *tmp_fromlist_name_15;
            PyObject *tmp_level_name_15;
            tmp_name_name_15 = const_str_plain_selectors;
            tmp_globals_name_15 = (PyObject *)moduledict_subprocess;
            tmp_locals_name_15 = Py_None;
            tmp_fromlist_name_15 = Py_None;
            tmp_level_name_15 = const_int_0;
            frame_3b8ded27a474e748966db3dc93ed4330->m_frame.f_lineno = 154;
            tmp_assign_source_48 = IMPORT_MODULE5( tmp_name_name_15, tmp_globals_name_15, tmp_locals_name_15, tmp_fromlist_name_15, tmp_level_name_15 );
            if ( tmp_assign_source_48 == NULL )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 154;

                goto frame_exception_exit_1;
            }
            UPDATE_STRING_DICT1( moduledict_subprocess, (Nuitka_StringObject *)const_str_plain_selectors, tmp_assign_source_48 );
        }
        {
            PyObject *tmp_assign_source_49;
            PyObject *tmp_name_name_16;
            PyObject *tmp_globals_name_16;
            PyObject *tmp_locals_name_16;
            PyObject *tmp_fromlist_name_16;
            PyObject *tmp_level_name_16;
            tmp_name_name_16 = const_str_plain_threading;
            tmp_globals_name_16 = (PyObject *)moduledict_subprocess;
            tmp_locals_name_16 = Py_None;
            tmp_fromlist_name_16 = Py_None;
            tmp_level_name_16 = const_int_0;
            frame_3b8ded27a474e748966db3dc93ed4330->m_frame.f_lineno = 155;
            tmp_assign_source_49 = IMPORT_MODULE5( tmp_name_name_16, tmp_globals_name_16, tmp_locals_name_16, tmp_fromlist_name_16, tmp_level_name_16 );
            if ( tmp_assign_source_49 == NULL )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 155;

                goto frame_exception_exit_1;
            }
            UPDATE_STRING_DICT1( moduledict_subprocess, (Nuitka_StringObject *)const_str_plain_threading, tmp_assign_source_49 );
        }
        {
            PyObject *tmp_assign_source_50;
            PyObject *tmp_getattr_target_5;
            PyObject *tmp_mvar_value_7;
            PyObject *tmp_getattr_attr_5;
            PyObject *tmp_getattr_default_5;
            tmp_mvar_value_7 = GET_STRING_DICT_VALUE( moduledict_subprocess, (Nuitka_StringObject *)const_str_plain_select );

            if (unlikely( tmp_mvar_value_7 == NULL ))
            {
                tmp_mvar_value_7 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_select );
            }

            CHECK_OBJECT( tmp_mvar_value_7 );
            tmp_getattr_target_5 = tmp_mvar_value_7;
            tmp_getattr_attr_5 = const_str_plain_PIPE_BUF;
            tmp_getattr_default_5 = const_int_pos_512;
            tmp_assign_source_50 = BUILTIN_GETATTR( tmp_getattr_target_5, tmp_getattr_attr_5, tmp_getattr_default_5 );
            if ( tmp_assign_source_50 == NULL )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 160;

                goto frame_exception_exit_1;
            }
            UPDATE_STRING_DICT1( moduledict_subprocess, (Nuitka_StringObject *)const_str_plain__PIPE_BUF, tmp_assign_source_50 );
        }
        {
            nuitka_bool tmp_condition_result_26;
            PyObject *tmp_source_name_18;
            PyObject *tmp_mvar_value_8;
            PyObject *tmp_attribute_name_1;
            tmp_mvar_value_8 = GET_STRING_DICT_VALUE( moduledict_subprocess, (Nuitka_StringObject *)const_str_plain_selectors );

            if (unlikely( tmp_mvar_value_8 == NULL ))
            {
                tmp_mvar_value_8 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_selectors );
            }

            CHECK_OBJECT( tmp_mvar_value_8 );
            tmp_source_name_18 = tmp_mvar_value_8;
            tmp_attribute_name_1 = const_str_plain_PollSelector;
            tmp_res = BUILTIN_HASATTR_BOOL( tmp_source_name_18, tmp_attribute_name_1 );
            if ( tmp_res == -1 )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 165;

                goto frame_exception_exit_1;
            }
            tmp_condition_result_26 = ( tmp_res != 0 ) ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
            if ( tmp_condition_result_26 == NUITKA_BOOL_TRUE )
            {
                goto branch_yes_17;
            }
            else
            {
                goto branch_no_17;
            }
            branch_yes_17:;
            {
                PyObject *tmp_assign_source_51;
                PyObject *tmp_source_name_19;
                PyObject *tmp_mvar_value_9;
                tmp_mvar_value_9 = GET_STRING_DICT_VALUE( moduledict_subprocess, (Nuitka_StringObject *)const_str_plain_selectors );

                if (unlikely( tmp_mvar_value_9 == NULL ))
                {
                    tmp_mvar_value_9 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_selectors );
                }

                CHECK_OBJECT( tmp_mvar_value_9 );
                tmp_source_name_19 = tmp_mvar_value_9;
                tmp_assign_source_51 = LOOKUP_ATTRIBUTE( tmp_source_name_19, const_str_plain_PollSelector );
                if ( tmp_assign_source_51 == NULL )
                {
                    assert( ERROR_OCCURRED() );

                    FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                    exception_lineno = 166;

                    goto frame_exception_exit_1;
                }
                UPDATE_STRING_DICT1( moduledict_subprocess, (Nuitka_StringObject *)const_str_plain__PopenSelector, tmp_assign_source_51 );
            }
            goto branch_end_17;
            branch_no_17:;
            {
                PyObject *tmp_assign_source_52;
                PyObject *tmp_source_name_20;
                PyObject *tmp_mvar_value_10;
                tmp_mvar_value_10 = GET_STRING_DICT_VALUE( moduledict_subprocess, (Nuitka_StringObject *)const_str_plain_selectors );

                if (unlikely( tmp_mvar_value_10 == NULL ))
                {
                    tmp_mvar_value_10 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_selectors );
                }

                CHECK_OBJECT( tmp_mvar_value_10 );
                tmp_source_name_20 = tmp_mvar_value_10;
                tmp_assign_source_52 = LOOKUP_ATTRIBUTE( tmp_source_name_20, const_str_plain_SelectSelector );
                if ( tmp_assign_source_52 == NULL )
                {
                    assert( ERROR_OCCURRED() );

                    FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                    exception_lineno = 168;

                    goto frame_exception_exit_1;
                }
                UPDATE_STRING_DICT1( moduledict_subprocess, (Nuitka_StringObject *)const_str_plain__PopenSelector, tmp_assign_source_52 );
            }
            branch_end_17:;
        }
        branch_end_13:;
    }
    {
        PyObject *tmp_assign_source_53;
        tmp_assign_source_53 = LIST_COPY( const_list_2de1e2426e82522523b314e32dc118d0_list );
        UPDATE_STRING_DICT1( moduledict_subprocess, (Nuitka_StringObject *)const_str_plain___all__, tmp_assign_source_53 );
    }
    {
        nuitka_bool tmp_condition_result_27;
        PyObject *tmp_mvar_value_11;
        int tmp_truth_name_5;
        tmp_mvar_value_11 = GET_STRING_DICT_VALUE( moduledict_subprocess, (Nuitka_StringObject *)const_str_plain__mswindows );

        if (unlikely( tmp_mvar_value_11 == NULL ))
        {
            tmp_mvar_value_11 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain__mswindows );
        }

        if ( tmp_mvar_value_11 == NULL )
        {

            exception_type = PyExc_NameError;
            Py_INCREF( exception_type );
            exception_value = PyUnicode_FromFormat( "name '%s' is not defined", "_mswindows" );
            exception_tb = NULL;
            NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
            CHAIN_EXCEPTION( exception_value );

            exception_lineno = 177;

            goto frame_exception_exit_1;
        }

        tmp_truth_name_5 = CHECK_IF_TRUE( tmp_mvar_value_11 );
        if ( tmp_truth_name_5 == -1 )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 177;

            goto frame_exception_exit_1;
        }
        tmp_condition_result_27 = tmp_truth_name_5 == 1 ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
        if ( tmp_condition_result_27 == NUITKA_BOOL_TRUE )
        {
            goto branch_yes_18;
        }
        else
        {
            goto branch_no_18;
        }
        branch_yes_18:;
        {
            PyObject *tmp_assign_source_54;
            PyObject *tmp_name_name_17;
            PyObject *tmp_globals_name_17;
            PyObject *tmp_locals_name_17;
            PyObject *tmp_fromlist_name_17;
            PyObject *tmp_level_name_17;
            tmp_name_name_17 = const_str_plain__winapi;
            tmp_globals_name_17 = (PyObject *)moduledict_subprocess;
            tmp_locals_name_17 = Py_None;
            tmp_fromlist_name_17 = const_tuple_0b4b80302a0dd2641ae2bccda19bd994_tuple;
            tmp_level_name_17 = const_int_0;
            frame_3b8ded27a474e748966db3dc93ed4330->m_frame.f_lineno = 178;
            tmp_assign_source_54 = IMPORT_MODULE5( tmp_name_name_17, tmp_globals_name_17, tmp_locals_name_17, tmp_fromlist_name_17, tmp_level_name_17 );
            assert( !(tmp_assign_source_54 == NULL) );
            assert( tmp_import_from_1__module == NULL );
            tmp_import_from_1__module = tmp_assign_source_54;
        }
        {
            PyObject *tmp_assign_source_55;
            PyObject *tmp_import_name_from_2;
            CHECK_OBJECT( tmp_import_from_1__module );
            tmp_import_name_from_2 = tmp_import_from_1__module;
            tmp_assign_source_55 = IMPORT_NAME( tmp_import_name_from_2, const_str_plain_CREATE_NEW_CONSOLE );
            assert( !(tmp_assign_source_55 == NULL) );
            UPDATE_STRING_DICT1( moduledict_subprocess, (Nuitka_StringObject *)const_str_plain_CREATE_NEW_CONSOLE, tmp_assign_source_55 );
        }
        {
            PyObject *tmp_assign_source_56;
            PyObject *tmp_import_name_from_3;
            CHECK_OBJECT( tmp_import_from_1__module );
            tmp_import_name_from_3 = tmp_import_from_1__module;
            tmp_assign_source_56 = IMPORT_NAME( tmp_import_name_from_3, const_str_plain_CREATE_NEW_PROCESS_GROUP );
            assert( !(tmp_assign_source_56 == NULL) );
            UPDATE_STRING_DICT1( moduledict_subprocess, (Nuitka_StringObject *)const_str_plain_CREATE_NEW_PROCESS_GROUP, tmp_assign_source_56 );
        }
        {
            PyObject *tmp_assign_source_57;
            PyObject *tmp_import_name_from_4;
            CHECK_OBJECT( tmp_import_from_1__module );
            tmp_import_name_from_4 = tmp_import_from_1__module;
            tmp_assign_source_57 = IMPORT_NAME( tmp_import_name_from_4, const_str_plain_STD_INPUT_HANDLE );
            assert( !(tmp_assign_source_57 == NULL) );
            UPDATE_STRING_DICT1( moduledict_subprocess, (Nuitka_StringObject *)const_str_plain_STD_INPUT_HANDLE, tmp_assign_source_57 );
        }
        {
            PyObject *tmp_assign_source_58;
            PyObject *tmp_import_name_from_5;
            CHECK_OBJECT( tmp_import_from_1__module );
            tmp_import_name_from_5 = tmp_import_from_1__module;
            tmp_assign_source_58 = IMPORT_NAME( tmp_import_name_from_5, const_str_plain_STD_OUTPUT_HANDLE );
            assert( !(tmp_assign_source_58 == NULL) );
            UPDATE_STRING_DICT1( moduledict_subprocess, (Nuitka_StringObject *)const_str_plain_STD_OUTPUT_HANDLE, tmp_assign_source_58 );
        }
        {
            PyObject *tmp_assign_source_59;
            PyObject *tmp_import_name_from_6;
            CHECK_OBJECT( tmp_import_from_1__module );
            tmp_import_name_from_6 = tmp_import_from_1__module;
            tmp_assign_source_59 = IMPORT_NAME( tmp_import_name_from_6, const_str_plain_STD_ERROR_HANDLE );
            assert( !(tmp_assign_source_59 == NULL) );
            UPDATE_STRING_DICT1( moduledict_subprocess, (Nuitka_StringObject *)const_str_plain_STD_ERROR_HANDLE, tmp_assign_source_59 );
        }
        {
            PyObject *tmp_assign_source_60;
            PyObject *tmp_import_name_from_7;
            CHECK_OBJECT( tmp_import_from_1__module );
            tmp_import_name_from_7 = tmp_import_from_1__module;
            tmp_assign_source_60 = IMPORT_NAME( tmp_import_name_from_7, const_str_plain_SW_HIDE );
            assert( !(tmp_assign_source_60 == NULL) );
            UPDATE_STRING_DICT1( moduledict_subprocess, (Nuitka_StringObject *)const_str_plain_SW_HIDE, tmp_assign_source_60 );
        }
        {
            PyObject *tmp_assign_source_61;
            PyObject *tmp_import_name_from_8;
            CHECK_OBJECT( tmp_import_from_1__module );
            tmp_import_name_from_8 = tmp_import_from_1__module;
            tmp_assign_source_61 = IMPORT_NAME( tmp_import_name_from_8, const_str_plain_STARTF_USESTDHANDLES );
            assert( !(tmp_assign_source_61 == NULL) );
            UPDATE_STRING_DICT1( moduledict_subprocess, (Nuitka_StringObject *)const_str_plain_STARTF_USESTDHANDLES, tmp_assign_source_61 );
        }
        {
            PyObject *tmp_assign_source_62;
            PyObject *tmp_import_name_from_9;
            CHECK_OBJECT( tmp_import_from_1__module );
            tmp_import_name_from_9 = tmp_import_from_1__module;
            tmp_assign_source_62 = IMPORT_NAME( tmp_import_name_from_9, const_str_plain_STARTF_USESHOWWINDOW );
            assert( !(tmp_assign_source_62 == NULL) );
            UPDATE_STRING_DICT1( moduledict_subprocess, (Nuitka_StringObject *)const_str_plain_STARTF_USESHOWWINDOW, tmp_assign_source_62 );
        }
        {
            PyObject *tmp_assign_source_63;
            PyObject *tmp_import_name_from_10;
            CHECK_OBJECT( tmp_import_from_1__module );
            tmp_import_name_from_10 = tmp_import_from_1__module;
            tmp_assign_source_63 = IMPORT_NAME( tmp_import_name_from_10, const_str_plain_ABOVE_NORMAL_PRIORITY_CLASS );
            assert( !(tmp_assign_source_63 == NULL) );
            UPDATE_STRING_DICT1( moduledict_subprocess, (Nuitka_StringObject *)const_str_plain_ABOVE_NORMAL_PRIORITY_CLASS, tmp_assign_source_63 );
        }
        {
            PyObject *tmp_assign_source_64;
            PyObject *tmp_import_name_from_11;
            CHECK_OBJECT( tmp_import_from_1__module );
            tmp_import_name_from_11 = tmp_import_from_1__module;
            tmp_assign_source_64 = IMPORT_NAME( tmp_import_name_from_11, const_str_plain_BELOW_NORMAL_PRIORITY_CLASS );
            assert( !(tmp_assign_source_64 == NULL) );
            UPDATE_STRING_DICT1( moduledict_subprocess, (Nuitka_StringObject *)const_str_plain_BELOW_NORMAL_PRIORITY_CLASS, tmp_assign_source_64 );
        }
        {
            PyObject *tmp_assign_source_65;
            PyObject *tmp_import_name_from_12;
            CHECK_OBJECT( tmp_import_from_1__module );
            tmp_import_name_from_12 = tmp_import_from_1__module;
            tmp_assign_source_65 = IMPORT_NAME( tmp_import_name_from_12, const_str_plain_HIGH_PRIORITY_CLASS );
            assert( !(tmp_assign_source_65 == NULL) );
            UPDATE_STRING_DICT1( moduledict_subprocess, (Nuitka_StringObject *)const_str_plain_HIGH_PRIORITY_CLASS, tmp_assign_source_65 );
        }
        {
            PyObject *tmp_assign_source_66;
            PyObject *tmp_import_name_from_13;
            CHECK_OBJECT( tmp_import_from_1__module );
            tmp_import_name_from_13 = tmp_import_from_1__module;
            tmp_assign_source_66 = IMPORT_NAME( tmp_import_name_from_13, const_str_plain_IDLE_PRIORITY_CLASS );
            assert( !(tmp_assign_source_66 == NULL) );
            UPDATE_STRING_DICT1( moduledict_subprocess, (Nuitka_StringObject *)const_str_plain_IDLE_PRIORITY_CLASS, tmp_assign_source_66 );
        }
        {
            PyObject *tmp_assign_source_67;
            PyObject *tmp_import_name_from_14;
            CHECK_OBJECT( tmp_import_from_1__module );
            tmp_import_name_from_14 = tmp_import_from_1__module;
            tmp_assign_source_67 = IMPORT_NAME( tmp_import_name_from_14, const_str_plain_NORMAL_PRIORITY_CLASS );
            assert( !(tmp_assign_source_67 == NULL) );
            UPDATE_STRING_DICT1( moduledict_subprocess, (Nuitka_StringObject *)const_str_plain_NORMAL_PRIORITY_CLASS, tmp_assign_source_67 );
        }
        {
            PyObject *tmp_assign_source_68;
            PyObject *tmp_import_name_from_15;
            CHECK_OBJECT( tmp_import_from_1__module );
            tmp_import_name_from_15 = tmp_import_from_1__module;
            tmp_assign_source_68 = IMPORT_NAME( tmp_import_name_from_15, const_str_plain_REALTIME_PRIORITY_CLASS );
            assert( !(tmp_assign_source_68 == NULL) );
            UPDATE_STRING_DICT1( moduledict_subprocess, (Nuitka_StringObject *)const_str_plain_REALTIME_PRIORITY_CLASS, tmp_assign_source_68 );
        }
        {
            PyObject *tmp_assign_source_69;
            PyObject *tmp_import_name_from_16;
            CHECK_OBJECT( tmp_import_from_1__module );
            tmp_import_name_from_16 = tmp_import_from_1__module;
            tmp_assign_source_69 = IMPORT_NAME( tmp_import_name_from_16, const_str_plain_CREATE_NO_WINDOW );
            assert( !(tmp_assign_source_69 == NULL) );
            UPDATE_STRING_DICT1( moduledict_subprocess, (Nuitka_StringObject *)const_str_plain_CREATE_NO_WINDOW, tmp_assign_source_69 );
        }
        {
            PyObject *tmp_assign_source_70;
            PyObject *tmp_import_name_from_17;
            CHECK_OBJECT( tmp_import_from_1__module );
            tmp_import_name_from_17 = tmp_import_from_1__module;
            tmp_assign_source_70 = IMPORT_NAME( tmp_import_name_from_17, const_str_plain_DETACHED_PROCESS );
            assert( !(tmp_assign_source_70 == NULL) );
            UPDATE_STRING_DICT1( moduledict_subprocess, (Nuitka_StringObject *)const_str_plain_DETACHED_PROCESS, tmp_assign_source_70 );
        }
        {
            PyObject *tmp_assign_source_71;
            PyObject *tmp_import_name_from_18;
            CHECK_OBJECT( tmp_import_from_1__module );
            tmp_import_name_from_18 = tmp_import_from_1__module;
            tmp_assign_source_71 = IMPORT_NAME( tmp_import_name_from_18, const_str_plain_CREATE_DEFAULT_ERROR_MODE );
            assert( !(tmp_assign_source_71 == NULL) );
            UPDATE_STRING_DICT1( moduledict_subprocess, (Nuitka_StringObject *)const_str_plain_CREATE_DEFAULT_ERROR_MODE, tmp_assign_source_71 );
        }
        {
            PyObject *tmp_assign_source_72;
            PyObject *tmp_import_name_from_19;
            CHECK_OBJECT( tmp_import_from_1__module );
            tmp_import_name_from_19 = tmp_import_from_1__module;
            tmp_assign_source_72 = IMPORT_NAME( tmp_import_name_from_19, const_str_plain_CREATE_BREAKAWAY_FROM_JOB );
            assert( !(tmp_assign_source_72 == NULL) );
            UPDATE_STRING_DICT1( moduledict_subprocess, (Nuitka_StringObject *)const_str_plain_CREATE_BREAKAWAY_FROM_JOB, tmp_assign_source_72 );
        }
        CHECK_OBJECT( (PyObject *)tmp_import_from_1__module );
        Py_DECREF( tmp_import_from_1__module );
        tmp_import_from_1__module = NULL;

        {
            PyObject *tmp_called_instance_3;
            PyObject *tmp_mvar_value_12;
            PyObject *tmp_call_result_1;
            PyObject *tmp_call_arg_element_1;
            tmp_mvar_value_12 = GET_STRING_DICT_VALUE( moduledict_subprocess, (Nuitka_StringObject *)const_str_plain___all__ );

            if (unlikely( tmp_mvar_value_12 == NULL ))
            {
                tmp_mvar_value_12 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain___all__ );
            }

            if ( tmp_mvar_value_12 == NULL )
            {

                exception_type = PyExc_NameError;
                Py_INCREF( exception_type );
                exception_value = PyUnicode_FromFormat( "name '%s' is not defined", "__all__" );
                exception_tb = NULL;
                NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
                CHAIN_EXCEPTION( exception_value );

                exception_lineno = 188;

                goto frame_exception_exit_1;
            }

            tmp_called_instance_3 = tmp_mvar_value_12;
            tmp_call_arg_element_1 = LIST_COPY( const_list_fdef13c4c35998d41daafbf2cb2f200f_list );
            frame_3b8ded27a474e748966db3dc93ed4330->m_frame.f_lineno = 188;
            {
                PyObject *call_args[] = { tmp_call_arg_element_1 };
                tmp_call_result_1 = CALL_METHOD_WITH_ARGS1( tmp_called_instance_3, const_str_plain_extend, call_args );
            }

            Py_DECREF( tmp_call_arg_element_1 );
            if ( tmp_call_result_1 == NULL )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 188;

                goto frame_exception_exit_1;
            }
            Py_DECREF( tmp_call_result_1 );
        }
        // Tried code:
        {
            PyObject *tmp_assign_source_73;
            PyObject *tmp_dircall_arg1_4;
            tmp_dircall_arg1_4 = const_tuple_type_int_tuple;
            Py_INCREF( tmp_dircall_arg1_4 );

            {
                PyObject *dir_call_args[] = {tmp_dircall_arg1_4};
                tmp_assign_source_73 = impl___internal__$$$function_1__mro_entries_conversion( dir_call_args );
            }
            if ( tmp_assign_source_73 == NULL )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 199;

                goto try_except_handler_13;
            }
            assert( tmp_class_creation_5__bases == NULL );
            tmp_class_creation_5__bases = tmp_assign_source_73;
        }
        {
            PyObject *tmp_assign_source_74;
            tmp_assign_source_74 = PyDict_New();
            assert( tmp_class_creation_5__class_decl_dict == NULL );
            tmp_class_creation_5__class_decl_dict = tmp_assign_source_74;
        }
        {
            PyObject *tmp_assign_source_75;
            PyObject *tmp_metaclass_name_5;
            nuitka_bool tmp_condition_result_28;
            PyObject *tmp_key_name_13;
            PyObject *tmp_dict_name_13;
            PyObject *tmp_dict_name_14;
            PyObject *tmp_key_name_14;
            nuitka_bool tmp_condition_result_29;
            int tmp_truth_name_6;
            PyObject *tmp_type_arg_8;
            PyObject *tmp_subscribed_name_4;
            PyObject *tmp_subscript_name_4;
            PyObject *tmp_bases_name_5;
            tmp_key_name_13 = const_str_plain_metaclass;
            CHECK_OBJECT( tmp_class_creation_5__class_decl_dict );
            tmp_dict_name_13 = tmp_class_creation_5__class_decl_dict;
            tmp_res = PyDict_Contains( tmp_dict_name_13, tmp_key_name_13 );
            if ( tmp_res == -1 )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 199;

                goto try_except_handler_13;
            }
            tmp_condition_result_28 = ( tmp_res != 0 ) ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
            if ( tmp_condition_result_28 == NUITKA_BOOL_TRUE )
            {
                goto condexpr_true_10;
            }
            else
            {
                goto condexpr_false_10;
            }
            condexpr_true_10:;
            CHECK_OBJECT( tmp_class_creation_5__class_decl_dict );
            tmp_dict_name_14 = tmp_class_creation_5__class_decl_dict;
            tmp_key_name_14 = const_str_plain_metaclass;
            tmp_metaclass_name_5 = DICT_GET_ITEM( tmp_dict_name_14, tmp_key_name_14 );
            if ( tmp_metaclass_name_5 == NULL )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 199;

                goto try_except_handler_13;
            }
            goto condexpr_end_10;
            condexpr_false_10:;
            CHECK_OBJECT( tmp_class_creation_5__bases );
            tmp_truth_name_6 = CHECK_IF_TRUE( tmp_class_creation_5__bases );
            if ( tmp_truth_name_6 == -1 )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 199;

                goto try_except_handler_13;
            }
            tmp_condition_result_29 = tmp_truth_name_6 == 1 ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
            if ( tmp_condition_result_29 == NUITKA_BOOL_TRUE )
            {
                goto condexpr_true_11;
            }
            else
            {
                goto condexpr_false_11;
            }
            condexpr_true_11:;
            CHECK_OBJECT( tmp_class_creation_5__bases );
            tmp_subscribed_name_4 = tmp_class_creation_5__bases;
            tmp_subscript_name_4 = const_int_0;
            tmp_type_arg_8 = LOOKUP_SUBSCRIPT_CONST( tmp_subscribed_name_4, tmp_subscript_name_4, 0 );
            if ( tmp_type_arg_8 == NULL )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 199;

                goto try_except_handler_13;
            }
            tmp_metaclass_name_5 = BUILTIN_TYPE1( tmp_type_arg_8 );
            Py_DECREF( tmp_type_arg_8 );
            if ( tmp_metaclass_name_5 == NULL )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 199;

                goto try_except_handler_13;
            }
            goto condexpr_end_11;
            condexpr_false_11:;
            tmp_metaclass_name_5 = (PyObject *)&PyType_Type;
            Py_INCREF( tmp_metaclass_name_5 );
            condexpr_end_11:;
            condexpr_end_10:;
            CHECK_OBJECT( tmp_class_creation_5__bases );
            tmp_bases_name_5 = tmp_class_creation_5__bases;
            tmp_assign_source_75 = SELECT_METACLASS( tmp_metaclass_name_5, tmp_bases_name_5 );
            Py_DECREF( tmp_metaclass_name_5 );
            if ( tmp_assign_source_75 == NULL )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 199;

                goto try_except_handler_13;
            }
            assert( tmp_class_creation_5__metaclass == NULL );
            tmp_class_creation_5__metaclass = tmp_assign_source_75;
        }
        {
            nuitka_bool tmp_condition_result_30;
            PyObject *tmp_key_name_15;
            PyObject *tmp_dict_name_15;
            tmp_key_name_15 = const_str_plain_metaclass;
            CHECK_OBJECT( tmp_class_creation_5__class_decl_dict );
            tmp_dict_name_15 = tmp_class_creation_5__class_decl_dict;
            tmp_res = PyDict_Contains( tmp_dict_name_15, tmp_key_name_15 );
            if ( tmp_res == -1 )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 199;

                goto try_except_handler_13;
            }
            tmp_condition_result_30 = ( tmp_res != 0 ) ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
            if ( tmp_condition_result_30 == NUITKA_BOOL_TRUE )
            {
                goto branch_yes_19;
            }
            else
            {
                goto branch_no_19;
            }
            branch_yes_19:;
            CHECK_OBJECT( tmp_class_creation_5__class_decl_dict );
            tmp_dictdel_dict = tmp_class_creation_5__class_decl_dict;
            tmp_dictdel_key = const_str_plain_metaclass;
            tmp_result = DICT_REMOVE_ITEM( tmp_dictdel_dict, tmp_dictdel_key );
            if ( tmp_result == false )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 199;

                goto try_except_handler_13;
            }
            branch_no_19:;
        }
        {
            nuitka_bool tmp_condition_result_31;
            PyObject *tmp_source_name_21;
            CHECK_OBJECT( tmp_class_creation_5__metaclass );
            tmp_source_name_21 = tmp_class_creation_5__metaclass;
            tmp_res = PyObject_HasAttr( tmp_source_name_21, const_str_plain___prepare__ );
            tmp_condition_result_31 = ( tmp_res != 0 ) ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
            if ( tmp_condition_result_31 == NUITKA_BOOL_TRUE )
            {
                goto branch_yes_20;
            }
            else
            {
                goto branch_no_20;
            }
            branch_yes_20:;
            {
                PyObject *tmp_assign_source_76;
                PyObject *tmp_called_name_13;
                PyObject *tmp_source_name_22;
                PyObject *tmp_args_name_9;
                PyObject *tmp_tuple_element_14;
                PyObject *tmp_kw_name_9;
                CHECK_OBJECT( tmp_class_creation_5__metaclass );
                tmp_source_name_22 = tmp_class_creation_5__metaclass;
                tmp_called_name_13 = LOOKUP_ATTRIBUTE( tmp_source_name_22, const_str_plain___prepare__ );
                if ( tmp_called_name_13 == NULL )
                {
                    assert( ERROR_OCCURRED() );

                    FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                    exception_lineno = 199;

                    goto try_except_handler_13;
                }
                tmp_tuple_element_14 = const_str_plain_Handle;
                tmp_args_name_9 = PyTuple_New( 2 );
                Py_INCREF( tmp_tuple_element_14 );
                PyTuple_SET_ITEM( tmp_args_name_9, 0, tmp_tuple_element_14 );
                CHECK_OBJECT( tmp_class_creation_5__bases );
                tmp_tuple_element_14 = tmp_class_creation_5__bases;
                Py_INCREF( tmp_tuple_element_14 );
                PyTuple_SET_ITEM( tmp_args_name_9, 1, tmp_tuple_element_14 );
                CHECK_OBJECT( tmp_class_creation_5__class_decl_dict );
                tmp_kw_name_9 = tmp_class_creation_5__class_decl_dict;
                frame_3b8ded27a474e748966db3dc93ed4330->m_frame.f_lineno = 199;
                tmp_assign_source_76 = CALL_FUNCTION( tmp_called_name_13, tmp_args_name_9, tmp_kw_name_9 );
                Py_DECREF( tmp_called_name_13 );
                Py_DECREF( tmp_args_name_9 );
                if ( tmp_assign_source_76 == NULL )
                {
                    assert( ERROR_OCCURRED() );

                    FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                    exception_lineno = 199;

                    goto try_except_handler_13;
                }
                assert( tmp_class_creation_5__prepared == NULL );
                tmp_class_creation_5__prepared = tmp_assign_source_76;
            }
            {
                nuitka_bool tmp_condition_result_32;
                PyObject *tmp_operand_name_5;
                PyObject *tmp_source_name_23;
                CHECK_OBJECT( tmp_class_creation_5__prepared );
                tmp_source_name_23 = tmp_class_creation_5__prepared;
                tmp_res = PyObject_HasAttr( tmp_source_name_23, const_str_plain___getitem__ );
                tmp_operand_name_5 = ( tmp_res != 0 ) ? Py_True : Py_False;
                tmp_res = CHECK_IF_TRUE( tmp_operand_name_5 );
                if ( tmp_res == -1 )
                {
                    assert( ERROR_OCCURRED() );

                    FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                    exception_lineno = 199;

                    goto try_except_handler_13;
                }
                tmp_condition_result_32 = ( tmp_res == 0 ) ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
                if ( tmp_condition_result_32 == NUITKA_BOOL_TRUE )
                {
                    goto branch_yes_21;
                }
                else
                {
                    goto branch_no_21;
                }
                branch_yes_21:;
                {
                    PyObject *tmp_raise_type_5;
                    PyObject *tmp_raise_value_5;
                    PyObject *tmp_left_name_5;
                    PyObject *tmp_right_name_5;
                    PyObject *tmp_tuple_element_15;
                    PyObject *tmp_getattr_target_6;
                    PyObject *tmp_getattr_attr_6;
                    PyObject *tmp_getattr_default_6;
                    PyObject *tmp_source_name_24;
                    PyObject *tmp_type_arg_9;
                    tmp_raise_type_5 = PyExc_TypeError;
                    tmp_left_name_5 = const_str_digest_75fd71b1edada749c2ef7ac810062295;
                    CHECK_OBJECT( tmp_class_creation_5__metaclass );
                    tmp_getattr_target_6 = tmp_class_creation_5__metaclass;
                    tmp_getattr_attr_6 = const_str_plain___name__;
                    tmp_getattr_default_6 = const_str_angle_metaclass;
                    tmp_tuple_element_15 = BUILTIN_GETATTR( tmp_getattr_target_6, tmp_getattr_attr_6, tmp_getattr_default_6 );
                    if ( tmp_tuple_element_15 == NULL )
                    {
                        assert( ERROR_OCCURRED() );

                        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                        exception_lineno = 199;

                        goto try_except_handler_13;
                    }
                    tmp_right_name_5 = PyTuple_New( 2 );
                    PyTuple_SET_ITEM( tmp_right_name_5, 0, tmp_tuple_element_15 );
                    CHECK_OBJECT( tmp_class_creation_5__prepared );
                    tmp_type_arg_9 = tmp_class_creation_5__prepared;
                    tmp_source_name_24 = BUILTIN_TYPE1( tmp_type_arg_9 );
                    assert( !(tmp_source_name_24 == NULL) );
                    tmp_tuple_element_15 = LOOKUP_ATTRIBUTE( tmp_source_name_24, const_str_plain___name__ );
                    Py_DECREF( tmp_source_name_24 );
                    if ( tmp_tuple_element_15 == NULL )
                    {
                        assert( ERROR_OCCURRED() );

                        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
                        Py_DECREF( tmp_right_name_5 );

                        exception_lineno = 199;

                        goto try_except_handler_13;
                    }
                    PyTuple_SET_ITEM( tmp_right_name_5, 1, tmp_tuple_element_15 );
                    tmp_raise_value_5 = BINARY_OPERATION_REMAINDER( tmp_left_name_5, tmp_right_name_5 );
                    Py_DECREF( tmp_right_name_5 );
                    if ( tmp_raise_value_5 == NULL )
                    {
                        assert( ERROR_OCCURRED() );

                        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                        exception_lineno = 199;

                        goto try_except_handler_13;
                    }
                    exception_type = tmp_raise_type_5;
                    Py_INCREF( tmp_raise_type_5 );
                    exception_value = tmp_raise_value_5;
                    exception_lineno = 199;
                    RAISE_EXCEPTION_IMPLICIT( &exception_type, &exception_value, &exception_tb );

                    goto try_except_handler_13;
                }
                branch_no_21:;
            }
            goto branch_end_20;
            branch_no_20:;
            {
                PyObject *tmp_assign_source_77;
                tmp_assign_source_77 = PyDict_New();
                assert( tmp_class_creation_5__prepared == NULL );
                tmp_class_creation_5__prepared = tmp_assign_source_77;
            }
            branch_end_20:;
        }
        {
            PyObject *tmp_assign_source_78;
            {
                PyObject *tmp_set_locals_5;
                CHECK_OBJECT( tmp_class_creation_5__prepared );
                tmp_set_locals_5 = tmp_class_creation_5__prepared;
                locals_subprocess_199 = tmp_set_locals_5;
                Py_INCREF( tmp_set_locals_5 );
            }
            // Tried code:
            // Tried code:
            tmp_dictset_value = const_str_plain_subprocess;
            tmp_res = PyObject_SetItem( locals_subprocess_199, const_str_plain___module__, tmp_dictset_value );
            if ( tmp_res != 0 )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 199;

                goto try_except_handler_15;
            }
            tmp_dictset_value = const_str_plain_Handle;
            tmp_res = PyObject_SetItem( locals_subprocess_199, const_str_plain___qualname__, tmp_dictset_value );
            if ( tmp_res != 0 )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 199;

                goto try_except_handler_15;
            }
            MAKE_OR_REUSE_FRAME( cache_frame_5e53de9cfb00a7770460518e667a6e26_5, codeobj_5e53de9cfb00a7770460518e667a6e26, module_subprocess, sizeof(void *) );
            frame_5e53de9cfb00a7770460518e667a6e26_5 = cache_frame_5e53de9cfb00a7770460518e667a6e26_5;

            // Push the new frame as the currently active one.
            pushFrameStack( frame_5e53de9cfb00a7770460518e667a6e26_5 );

            // Mark the frame object as in use, ref count 1 will be up for reuse.
            assert( Py_REFCNT( frame_5e53de9cfb00a7770460518e667a6e26_5 ) == 2 ); // Frame stack

            // Framed code:
            tmp_dictset_value = Py_False;
            tmp_res = PyObject_SetItem( locals_subprocess_199, const_str_plain_closed, tmp_dictset_value );
            if ( tmp_res != 0 )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 200;
                type_description_2 = "o";
                goto frame_exception_exit_5;
            }
            {
                PyObject *tmp_defaults_3;
                PyObject *tmp_tuple_element_16;
                PyObject *tmp_source_name_25;
                PyObject *tmp_mvar_value_13;
                tmp_source_name_25 = PyObject_GetItem( locals_subprocess_199, const_str_plain__winapi );

                if ( tmp_source_name_25 == NULL )
                {
                    if ( CHECK_AND_CLEAR_KEY_ERROR_OCCURRED() )
                    {
                    tmp_mvar_value_13 = GET_STRING_DICT_VALUE( moduledict_subprocess, (Nuitka_StringObject *)const_str_plain__winapi );

                    if (unlikely( tmp_mvar_value_13 == NULL ))
                    {
                        tmp_mvar_value_13 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain__winapi );
                    }

                    if ( tmp_mvar_value_13 == NULL )
                    {

                        exception_type = PyExc_NameError;
                        Py_INCREF( exception_type );
                        exception_value = PyUnicode_FromFormat( "name '%s' is not defined", "_winapi" );
                        exception_tb = NULL;
                        NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
                        CHAIN_EXCEPTION( exception_value );

                        exception_lineno = 202;
                        type_description_2 = "o";
                        goto frame_exception_exit_5;
                    }

                    tmp_source_name_25 = tmp_mvar_value_13;
                    Py_INCREF( tmp_source_name_25 );
                    }
                }

                tmp_tuple_element_16 = LOOKUP_ATTRIBUTE( tmp_source_name_25, const_str_plain_CloseHandle );
                Py_DECREF( tmp_source_name_25 );
                if ( tmp_tuple_element_16 == NULL )
                {
                    assert( ERROR_OCCURRED() );

                    FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                    exception_lineno = 202;
                    type_description_2 = "o";
                    goto frame_exception_exit_5;
                }
                tmp_defaults_3 = PyTuple_New( 1 );
                PyTuple_SET_ITEM( tmp_defaults_3, 0, tmp_tuple_element_16 );
                tmp_dictset_value = MAKE_FUNCTION_subprocess$$$function_11_Close( tmp_defaults_3 );



                tmp_res = PyObject_SetItem( locals_subprocess_199, const_str_plain_Close, tmp_dictset_value );
                Py_DECREF( tmp_dictset_value );
                if ( tmp_res != 0 )
                {
                    assert( ERROR_OCCURRED() );

                    FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                    exception_lineno = 202;
                    type_description_2 = "o";
                    goto frame_exception_exit_5;
                }
            }
            tmp_dictset_value = MAKE_FUNCTION_subprocess$$$function_12_Detach(  );



            tmp_res = PyObject_SetItem( locals_subprocess_199, const_str_plain_Detach, tmp_dictset_value );
            Py_DECREF( tmp_dictset_value );
            if ( tmp_res != 0 )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 207;
                type_description_2 = "o";
                goto frame_exception_exit_5;
            }
            tmp_dictset_value = MAKE_FUNCTION_subprocess$$$function_13___repr__(  );



            tmp_res = PyObject_SetItem( locals_subprocess_199, const_str_plain___repr__, tmp_dictset_value );
            Py_DECREF( tmp_dictset_value );
            if ( tmp_res != 0 )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 213;
                type_description_2 = "o";
                goto frame_exception_exit_5;
            }
            tmp_dictset_value = PyObject_GetItem( locals_subprocess_199, const_str_plain_Close );

            if ( tmp_dictset_value == NULL && CHECK_AND_CLEAR_KEY_ERROR_OCCURRED() )
            {

                exception_type = PyExc_NameError;
                Py_INCREF( exception_type );
                exception_value = PyUnicode_FromFormat( "name '%s' is not defined", "Close" );
                exception_tb = NULL;
                NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
                CHAIN_EXCEPTION( exception_value );

                exception_lineno = 216;
                type_description_2 = "o";
                goto frame_exception_exit_5;
            }

            if ( tmp_dictset_value == NULL )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 216;
                type_description_2 = "o";
                goto frame_exception_exit_5;
            }
            tmp_res = PyObject_SetItem( locals_subprocess_199, const_str_plain___del__, tmp_dictset_value );
            Py_DECREF( tmp_dictset_value );
            if ( tmp_res != 0 )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 216;
                type_description_2 = "o";
                goto frame_exception_exit_5;
            }
            tmp_dictset_value = PyObject_GetItem( locals_subprocess_199, const_str_plain___repr__ );

            if ( tmp_dictset_value == NULL && CHECK_AND_CLEAR_KEY_ERROR_OCCURRED() )
            {

                exception_type = PyExc_NameError;
                Py_INCREF( exception_type );
                exception_value = PyUnicode_FromFormat( "name '%s' is not defined", "__repr__" );
                exception_tb = NULL;
                NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
                CHAIN_EXCEPTION( exception_value );

                exception_lineno = 217;
                type_description_2 = "o";
                goto frame_exception_exit_5;
            }

            if ( tmp_dictset_value == NULL )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 217;
                type_description_2 = "o";
                goto frame_exception_exit_5;
            }
            tmp_res = PyObject_SetItem( locals_subprocess_199, const_str_plain___str__, tmp_dictset_value );
            Py_DECREF( tmp_dictset_value );
            if ( tmp_res != 0 )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 217;
                type_description_2 = "o";
                goto frame_exception_exit_5;
            }

#if 0
            RESTORE_FRAME_EXCEPTION( frame_5e53de9cfb00a7770460518e667a6e26_5 );
#endif

            // Put the previous frame back on top.
            popFrameStack();

            goto frame_no_exception_4;

            frame_exception_exit_5:;

#if 0
            RESTORE_FRAME_EXCEPTION( frame_5e53de9cfb00a7770460518e667a6e26_5 );
#endif

            if ( exception_tb == NULL )
            {
                exception_tb = MAKE_TRACEBACK( frame_5e53de9cfb00a7770460518e667a6e26_5, exception_lineno );
            }
            else if ( exception_tb->tb_frame != &frame_5e53de9cfb00a7770460518e667a6e26_5->m_frame )
            {
                exception_tb = ADD_TRACEBACK( exception_tb, frame_5e53de9cfb00a7770460518e667a6e26_5, exception_lineno );
            }

            // Attachs locals to frame if any.
            Nuitka_Frame_AttachLocals(
                (struct Nuitka_FrameObject *)frame_5e53de9cfb00a7770460518e667a6e26_5,
                type_description_2,
                outline_4_var___class__
            );


            // Release cached frame.
            if ( frame_5e53de9cfb00a7770460518e667a6e26_5 == cache_frame_5e53de9cfb00a7770460518e667a6e26_5 )
            {
                Py_DECREF( frame_5e53de9cfb00a7770460518e667a6e26_5 );
            }
            cache_frame_5e53de9cfb00a7770460518e667a6e26_5 = NULL;

            assertFrameObject( frame_5e53de9cfb00a7770460518e667a6e26_5 );

            // Put the previous frame back on top.
            popFrameStack();

            // Return the error.
            goto nested_frame_exit_4;

            frame_no_exception_4:;
            goto skip_nested_handling_4;
            nested_frame_exit_4:;

            goto try_except_handler_15;
            skip_nested_handling_4:;
            {
                nuitka_bool tmp_condition_result_33;
                PyObject *tmp_compexpr_left_5;
                PyObject *tmp_compexpr_right_5;
                CHECK_OBJECT( tmp_class_creation_5__bases );
                tmp_compexpr_left_5 = tmp_class_creation_5__bases;
                tmp_compexpr_right_5 = const_tuple_type_int_tuple;
                tmp_res = RICH_COMPARE_BOOL_NOTEQ_OBJECT_OBJECT( tmp_compexpr_left_5, tmp_compexpr_right_5 );
                if ( tmp_res == -1 )
                {
                    assert( ERROR_OCCURRED() );

                    FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                    exception_lineno = 199;

                    goto try_except_handler_15;
                }
                tmp_condition_result_33 = ( tmp_res != 0 ) ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
                if ( tmp_condition_result_33 == NUITKA_BOOL_TRUE )
                {
                    goto branch_yes_22;
                }
                else
                {
                    goto branch_no_22;
                }
                branch_yes_22:;
                tmp_dictset_value = const_tuple_type_int_tuple;
                tmp_res = PyObject_SetItem( locals_subprocess_199, const_str_plain___orig_bases__, tmp_dictset_value );
                if ( tmp_res != 0 )
                {
                    assert( ERROR_OCCURRED() );

                    FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                    exception_lineno = 199;

                    goto try_except_handler_15;
                }
                branch_no_22:;
            }
            {
                PyObject *tmp_assign_source_79;
                PyObject *tmp_called_name_14;
                PyObject *tmp_args_name_10;
                PyObject *tmp_tuple_element_17;
                PyObject *tmp_kw_name_10;
                CHECK_OBJECT( tmp_class_creation_5__metaclass );
                tmp_called_name_14 = tmp_class_creation_5__metaclass;
                tmp_tuple_element_17 = const_str_plain_Handle;
                tmp_args_name_10 = PyTuple_New( 3 );
                Py_INCREF( tmp_tuple_element_17 );
                PyTuple_SET_ITEM( tmp_args_name_10, 0, tmp_tuple_element_17 );
                CHECK_OBJECT( tmp_class_creation_5__bases );
                tmp_tuple_element_17 = tmp_class_creation_5__bases;
                Py_INCREF( tmp_tuple_element_17 );
                PyTuple_SET_ITEM( tmp_args_name_10, 1, tmp_tuple_element_17 );
                tmp_tuple_element_17 = locals_subprocess_199;
                Py_INCREF( tmp_tuple_element_17 );
                PyTuple_SET_ITEM( tmp_args_name_10, 2, tmp_tuple_element_17 );
                CHECK_OBJECT( tmp_class_creation_5__class_decl_dict );
                tmp_kw_name_10 = tmp_class_creation_5__class_decl_dict;
                frame_3b8ded27a474e748966db3dc93ed4330->m_frame.f_lineno = 199;
                tmp_assign_source_79 = CALL_FUNCTION( tmp_called_name_14, tmp_args_name_10, tmp_kw_name_10 );
                Py_DECREF( tmp_args_name_10 );
                if ( tmp_assign_source_79 == NULL )
                {
                    assert( ERROR_OCCURRED() );

                    FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                    exception_lineno = 199;

                    goto try_except_handler_15;
                }
                assert( outline_4_var___class__ == NULL );
                outline_4_var___class__ = tmp_assign_source_79;
            }
            CHECK_OBJECT( outline_4_var___class__ );
            tmp_assign_source_78 = outline_4_var___class__;
            Py_INCREF( tmp_assign_source_78 );
            goto try_return_handler_15;
            // tried codes exits in all cases
            NUITKA_CANNOT_GET_HERE( subprocess );
            return MOD_RETURN_VALUE( NULL );
            // Return handler code:
            try_return_handler_15:;
            Py_DECREF( locals_subprocess_199 );
            locals_subprocess_199 = NULL;
            goto try_return_handler_14;
            // Exception handler code:
            try_except_handler_15:;
            exception_keeper_type_13 = exception_type;
            exception_keeper_value_13 = exception_value;
            exception_keeper_tb_13 = exception_tb;
            exception_keeper_lineno_13 = exception_lineno;
            exception_type = NULL;
            exception_value = NULL;
            exception_tb = NULL;
            exception_lineno = 0;

            Py_DECREF( locals_subprocess_199 );
            locals_subprocess_199 = NULL;
            // Re-raise.
            exception_type = exception_keeper_type_13;
            exception_value = exception_keeper_value_13;
            exception_tb = exception_keeper_tb_13;
            exception_lineno = exception_keeper_lineno_13;

            goto try_except_handler_14;
            // End of try:
            // tried codes exits in all cases
            NUITKA_CANNOT_GET_HERE( subprocess );
            return MOD_RETURN_VALUE( NULL );
            // Return handler code:
            try_return_handler_14:;
            CHECK_OBJECT( (PyObject *)outline_4_var___class__ );
            Py_DECREF( outline_4_var___class__ );
            outline_4_var___class__ = NULL;

            goto outline_result_5;
            // Exception handler code:
            try_except_handler_14:;
            exception_keeper_type_14 = exception_type;
            exception_keeper_value_14 = exception_value;
            exception_keeper_tb_14 = exception_tb;
            exception_keeper_lineno_14 = exception_lineno;
            exception_type = NULL;
            exception_value = NULL;
            exception_tb = NULL;
            exception_lineno = 0;

            // Re-raise.
            exception_type = exception_keeper_type_14;
            exception_value = exception_keeper_value_14;
            exception_tb = exception_keeper_tb_14;
            exception_lineno = exception_keeper_lineno_14;

            goto outline_exception_5;
            // End of try:
            // Return statement must have exited already.
            NUITKA_CANNOT_GET_HERE( subprocess );
            return MOD_RETURN_VALUE( NULL );
            outline_exception_5:;
            exception_lineno = 199;
            goto try_except_handler_13;
            outline_result_5:;
            UPDATE_STRING_DICT1( moduledict_subprocess, (Nuitka_StringObject *)const_str_plain_Handle, tmp_assign_source_78 );
        }
        goto try_end_5;
        // Exception handler code:
        try_except_handler_13:;
        exception_keeper_type_15 = exception_type;
        exception_keeper_value_15 = exception_value;
        exception_keeper_tb_15 = exception_tb;
        exception_keeper_lineno_15 = exception_lineno;
        exception_type = NULL;
        exception_value = NULL;
        exception_tb = NULL;
        exception_lineno = 0;

        Py_XDECREF( tmp_class_creation_5__bases );
        tmp_class_creation_5__bases = NULL;

        Py_XDECREF( tmp_class_creation_5__class_decl_dict );
        tmp_class_creation_5__class_decl_dict = NULL;

        Py_XDECREF( tmp_class_creation_5__metaclass );
        tmp_class_creation_5__metaclass = NULL;

        Py_XDECREF( tmp_class_creation_5__prepared );
        tmp_class_creation_5__prepared = NULL;

        // Re-raise.
        exception_type = exception_keeper_type_15;
        exception_value = exception_keeper_value_15;
        exception_tb = exception_keeper_tb_15;
        exception_lineno = exception_keeper_lineno_15;

        goto frame_exception_exit_1;
        // End of try:
        try_end_5:;
        CHECK_OBJECT( (PyObject *)tmp_class_creation_5__bases );
        Py_DECREF( tmp_class_creation_5__bases );
        tmp_class_creation_5__bases = NULL;

        CHECK_OBJECT( (PyObject *)tmp_class_creation_5__class_decl_dict );
        Py_DECREF( tmp_class_creation_5__class_decl_dict );
        tmp_class_creation_5__class_decl_dict = NULL;

        CHECK_OBJECT( (PyObject *)tmp_class_creation_5__metaclass );
        Py_DECREF( tmp_class_creation_5__metaclass );
        tmp_class_creation_5__metaclass = NULL;

        CHECK_OBJECT( (PyObject *)tmp_class_creation_5__prepared );
        Py_DECREF( tmp_class_creation_5__prepared );
        tmp_class_creation_5__prepared = NULL;

        branch_no_18:;
    }
    {
        PyObject *tmp_assign_source_80;
        tmp_assign_source_80 = PyList_New( 0 );
        UPDATE_STRING_DICT1( moduledict_subprocess, (Nuitka_StringObject *)const_str_plain__active, tmp_assign_source_80 );
    }
    {
        PyObject *tmp_assign_source_81;
        tmp_assign_source_81 = MAKE_FUNCTION_subprocess$$$function_14__cleanup(  );



        UPDATE_STRING_DICT1( moduledict_subprocess, (Nuitka_StringObject *)const_str_plain__cleanup, tmp_assign_source_81 );
    }
    {
        PyObject *tmp_assign_source_82;
        tmp_assign_source_82 = const_int_neg_1;
        UPDATE_STRING_DICT0( moduledict_subprocess, (Nuitka_StringObject *)const_str_plain_PIPE, tmp_assign_source_82 );
    }
    {
        PyObject *tmp_assign_source_83;
        tmp_assign_source_83 = const_int_neg_2;
        UPDATE_STRING_DICT0( moduledict_subprocess, (Nuitka_StringObject *)const_str_plain_STDOUT, tmp_assign_source_83 );
    }
    {
        PyObject *tmp_assign_source_84;
        tmp_assign_source_84 = const_int_neg_3;
        UPDATE_STRING_DICT0( moduledict_subprocess, (Nuitka_StringObject *)const_str_plain_DEVNULL, tmp_assign_source_84 );
    }
    {
        PyObject *tmp_assign_source_85;
        tmp_assign_source_85 = MAKE_FUNCTION_subprocess$$$function_15__optim_args_from_interpreter_flags(  );



        UPDATE_STRING_DICT1( moduledict_subprocess, (Nuitka_StringObject *)const_str_plain__optim_args_from_interpreter_flags, tmp_assign_source_85 );
    }
    {
        PyObject *tmp_assign_source_86;
        tmp_assign_source_86 = MAKE_FUNCTION_subprocess$$$function_16__args_from_interpreter_flags(  );



        UPDATE_STRING_DICT1( moduledict_subprocess, (Nuitka_StringObject *)const_str_plain__args_from_interpreter_flags, tmp_assign_source_86 );
    }
    {
        PyObject *tmp_assign_source_87;
        PyObject *tmp_kw_defaults_2;
        tmp_kw_defaults_2 = PyDict_Copy( const_dict_a5979bd3e78699eae28243cd65531cb5 );
        tmp_assign_source_87 = MAKE_FUNCTION_subprocess$$$function_17_call( tmp_kw_defaults_2 );



        UPDATE_STRING_DICT1( moduledict_subprocess, (Nuitka_StringObject *)const_str_plain_call, tmp_assign_source_87 );
    }
    {
        PyObject *tmp_assign_source_88;
        tmp_assign_source_88 = MAKE_FUNCTION_subprocess$$$function_18_check_call(  );



        UPDATE_STRING_DICT1( moduledict_subprocess, (Nuitka_StringObject *)const_str_plain_check_call, tmp_assign_source_88 );
    }
    {
        PyObject *tmp_assign_source_89;
        PyObject *tmp_kw_defaults_3;
        tmp_kw_defaults_3 = PyDict_Copy( const_dict_a5979bd3e78699eae28243cd65531cb5 );
        tmp_assign_source_89 = MAKE_FUNCTION_subprocess$$$function_19_check_output( tmp_kw_defaults_3 );



        UPDATE_STRING_DICT1( moduledict_subprocess, (Nuitka_StringObject *)const_str_plain_check_output, tmp_assign_source_89 );
    }
    // Tried code:
    {
        PyObject *tmp_assign_source_90;
        PyObject *tmp_dircall_arg1_5;
        tmp_dircall_arg1_5 = const_tuple_type_object_tuple;
        Py_INCREF( tmp_dircall_arg1_5 );

        {
            PyObject *dir_call_args[] = {tmp_dircall_arg1_5};
            tmp_assign_source_90 = impl___internal__$$$function_1__mro_entries_conversion( dir_call_args );
        }
        if ( tmp_assign_source_90 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 398;

            goto try_except_handler_16;
        }
        assert( tmp_class_creation_6__bases == NULL );
        tmp_class_creation_6__bases = tmp_assign_source_90;
    }
    {
        PyObject *tmp_assign_source_91;
        tmp_assign_source_91 = PyDict_New();
        assert( tmp_class_creation_6__class_decl_dict == NULL );
        tmp_class_creation_6__class_decl_dict = tmp_assign_source_91;
    }
    {
        PyObject *tmp_assign_source_92;
        PyObject *tmp_metaclass_name_6;
        nuitka_bool tmp_condition_result_34;
        PyObject *tmp_key_name_16;
        PyObject *tmp_dict_name_16;
        PyObject *tmp_dict_name_17;
        PyObject *tmp_key_name_17;
        nuitka_bool tmp_condition_result_35;
        int tmp_truth_name_7;
        PyObject *tmp_type_arg_10;
        PyObject *tmp_subscribed_name_5;
        PyObject *tmp_subscript_name_5;
        PyObject *tmp_bases_name_6;
        tmp_key_name_16 = const_str_plain_metaclass;
        CHECK_OBJECT( tmp_class_creation_6__class_decl_dict );
        tmp_dict_name_16 = tmp_class_creation_6__class_decl_dict;
        tmp_res = PyDict_Contains( tmp_dict_name_16, tmp_key_name_16 );
        if ( tmp_res == -1 )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 398;

            goto try_except_handler_16;
        }
        tmp_condition_result_34 = ( tmp_res != 0 ) ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
        if ( tmp_condition_result_34 == NUITKA_BOOL_TRUE )
        {
            goto condexpr_true_12;
        }
        else
        {
            goto condexpr_false_12;
        }
        condexpr_true_12:;
        CHECK_OBJECT( tmp_class_creation_6__class_decl_dict );
        tmp_dict_name_17 = tmp_class_creation_6__class_decl_dict;
        tmp_key_name_17 = const_str_plain_metaclass;
        tmp_metaclass_name_6 = DICT_GET_ITEM( tmp_dict_name_17, tmp_key_name_17 );
        if ( tmp_metaclass_name_6 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 398;

            goto try_except_handler_16;
        }
        goto condexpr_end_12;
        condexpr_false_12:;
        CHECK_OBJECT( tmp_class_creation_6__bases );
        tmp_truth_name_7 = CHECK_IF_TRUE( tmp_class_creation_6__bases );
        if ( tmp_truth_name_7 == -1 )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 398;

            goto try_except_handler_16;
        }
        tmp_condition_result_35 = tmp_truth_name_7 == 1 ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
        if ( tmp_condition_result_35 == NUITKA_BOOL_TRUE )
        {
            goto condexpr_true_13;
        }
        else
        {
            goto condexpr_false_13;
        }
        condexpr_true_13:;
        CHECK_OBJECT( tmp_class_creation_6__bases );
        tmp_subscribed_name_5 = tmp_class_creation_6__bases;
        tmp_subscript_name_5 = const_int_0;
        tmp_type_arg_10 = LOOKUP_SUBSCRIPT_CONST( tmp_subscribed_name_5, tmp_subscript_name_5, 0 );
        if ( tmp_type_arg_10 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 398;

            goto try_except_handler_16;
        }
        tmp_metaclass_name_6 = BUILTIN_TYPE1( tmp_type_arg_10 );
        Py_DECREF( tmp_type_arg_10 );
        if ( tmp_metaclass_name_6 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 398;

            goto try_except_handler_16;
        }
        goto condexpr_end_13;
        condexpr_false_13:;
        tmp_metaclass_name_6 = (PyObject *)&PyType_Type;
        Py_INCREF( tmp_metaclass_name_6 );
        condexpr_end_13:;
        condexpr_end_12:;
        CHECK_OBJECT( tmp_class_creation_6__bases );
        tmp_bases_name_6 = tmp_class_creation_6__bases;
        tmp_assign_source_92 = SELECT_METACLASS( tmp_metaclass_name_6, tmp_bases_name_6 );
        Py_DECREF( tmp_metaclass_name_6 );
        if ( tmp_assign_source_92 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 398;

            goto try_except_handler_16;
        }
        assert( tmp_class_creation_6__metaclass == NULL );
        tmp_class_creation_6__metaclass = tmp_assign_source_92;
    }
    {
        nuitka_bool tmp_condition_result_36;
        PyObject *tmp_key_name_18;
        PyObject *tmp_dict_name_18;
        tmp_key_name_18 = const_str_plain_metaclass;
        CHECK_OBJECT( tmp_class_creation_6__class_decl_dict );
        tmp_dict_name_18 = tmp_class_creation_6__class_decl_dict;
        tmp_res = PyDict_Contains( tmp_dict_name_18, tmp_key_name_18 );
        if ( tmp_res == -1 )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 398;

            goto try_except_handler_16;
        }
        tmp_condition_result_36 = ( tmp_res != 0 ) ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
        if ( tmp_condition_result_36 == NUITKA_BOOL_TRUE )
        {
            goto branch_yes_23;
        }
        else
        {
            goto branch_no_23;
        }
        branch_yes_23:;
        CHECK_OBJECT( tmp_class_creation_6__class_decl_dict );
        tmp_dictdel_dict = tmp_class_creation_6__class_decl_dict;
        tmp_dictdel_key = const_str_plain_metaclass;
        tmp_result = DICT_REMOVE_ITEM( tmp_dictdel_dict, tmp_dictdel_key );
        if ( tmp_result == false )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 398;

            goto try_except_handler_16;
        }
        branch_no_23:;
    }
    {
        nuitka_bool tmp_condition_result_37;
        PyObject *tmp_source_name_26;
        CHECK_OBJECT( tmp_class_creation_6__metaclass );
        tmp_source_name_26 = tmp_class_creation_6__metaclass;
        tmp_res = PyObject_HasAttr( tmp_source_name_26, const_str_plain___prepare__ );
        tmp_condition_result_37 = ( tmp_res != 0 ) ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
        if ( tmp_condition_result_37 == NUITKA_BOOL_TRUE )
        {
            goto branch_yes_24;
        }
        else
        {
            goto branch_no_24;
        }
        branch_yes_24:;
        {
            PyObject *tmp_assign_source_93;
            PyObject *tmp_called_name_15;
            PyObject *tmp_source_name_27;
            PyObject *tmp_args_name_11;
            PyObject *tmp_tuple_element_18;
            PyObject *tmp_kw_name_11;
            CHECK_OBJECT( tmp_class_creation_6__metaclass );
            tmp_source_name_27 = tmp_class_creation_6__metaclass;
            tmp_called_name_15 = LOOKUP_ATTRIBUTE( tmp_source_name_27, const_str_plain___prepare__ );
            if ( tmp_called_name_15 == NULL )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 398;

                goto try_except_handler_16;
            }
            tmp_tuple_element_18 = const_str_plain_CompletedProcess;
            tmp_args_name_11 = PyTuple_New( 2 );
            Py_INCREF( tmp_tuple_element_18 );
            PyTuple_SET_ITEM( tmp_args_name_11, 0, tmp_tuple_element_18 );
            CHECK_OBJECT( tmp_class_creation_6__bases );
            tmp_tuple_element_18 = tmp_class_creation_6__bases;
            Py_INCREF( tmp_tuple_element_18 );
            PyTuple_SET_ITEM( tmp_args_name_11, 1, tmp_tuple_element_18 );
            CHECK_OBJECT( tmp_class_creation_6__class_decl_dict );
            tmp_kw_name_11 = tmp_class_creation_6__class_decl_dict;
            frame_3b8ded27a474e748966db3dc93ed4330->m_frame.f_lineno = 398;
            tmp_assign_source_93 = CALL_FUNCTION( tmp_called_name_15, tmp_args_name_11, tmp_kw_name_11 );
            Py_DECREF( tmp_called_name_15 );
            Py_DECREF( tmp_args_name_11 );
            if ( tmp_assign_source_93 == NULL )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 398;

                goto try_except_handler_16;
            }
            assert( tmp_class_creation_6__prepared == NULL );
            tmp_class_creation_6__prepared = tmp_assign_source_93;
        }
        {
            nuitka_bool tmp_condition_result_38;
            PyObject *tmp_operand_name_6;
            PyObject *tmp_source_name_28;
            CHECK_OBJECT( tmp_class_creation_6__prepared );
            tmp_source_name_28 = tmp_class_creation_6__prepared;
            tmp_res = PyObject_HasAttr( tmp_source_name_28, const_str_plain___getitem__ );
            tmp_operand_name_6 = ( tmp_res != 0 ) ? Py_True : Py_False;
            tmp_res = CHECK_IF_TRUE( tmp_operand_name_6 );
            if ( tmp_res == -1 )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 398;

                goto try_except_handler_16;
            }
            tmp_condition_result_38 = ( tmp_res == 0 ) ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
            if ( tmp_condition_result_38 == NUITKA_BOOL_TRUE )
            {
                goto branch_yes_25;
            }
            else
            {
                goto branch_no_25;
            }
            branch_yes_25:;
            {
                PyObject *tmp_raise_type_6;
                PyObject *tmp_raise_value_6;
                PyObject *tmp_left_name_6;
                PyObject *tmp_right_name_6;
                PyObject *tmp_tuple_element_19;
                PyObject *tmp_getattr_target_7;
                PyObject *tmp_getattr_attr_7;
                PyObject *tmp_getattr_default_7;
                PyObject *tmp_source_name_29;
                PyObject *tmp_type_arg_11;
                tmp_raise_type_6 = PyExc_TypeError;
                tmp_left_name_6 = const_str_digest_75fd71b1edada749c2ef7ac810062295;
                CHECK_OBJECT( tmp_class_creation_6__metaclass );
                tmp_getattr_target_7 = tmp_class_creation_6__metaclass;
                tmp_getattr_attr_7 = const_str_plain___name__;
                tmp_getattr_default_7 = const_str_angle_metaclass;
                tmp_tuple_element_19 = BUILTIN_GETATTR( tmp_getattr_target_7, tmp_getattr_attr_7, tmp_getattr_default_7 );
                if ( tmp_tuple_element_19 == NULL )
                {
                    assert( ERROR_OCCURRED() );

                    FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                    exception_lineno = 398;

                    goto try_except_handler_16;
                }
                tmp_right_name_6 = PyTuple_New( 2 );
                PyTuple_SET_ITEM( tmp_right_name_6, 0, tmp_tuple_element_19 );
                CHECK_OBJECT( tmp_class_creation_6__prepared );
                tmp_type_arg_11 = tmp_class_creation_6__prepared;
                tmp_source_name_29 = BUILTIN_TYPE1( tmp_type_arg_11 );
                assert( !(tmp_source_name_29 == NULL) );
                tmp_tuple_element_19 = LOOKUP_ATTRIBUTE( tmp_source_name_29, const_str_plain___name__ );
                Py_DECREF( tmp_source_name_29 );
                if ( tmp_tuple_element_19 == NULL )
                {
                    assert( ERROR_OCCURRED() );

                    FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
                    Py_DECREF( tmp_right_name_6 );

                    exception_lineno = 398;

                    goto try_except_handler_16;
                }
                PyTuple_SET_ITEM( tmp_right_name_6, 1, tmp_tuple_element_19 );
                tmp_raise_value_6 = BINARY_OPERATION_REMAINDER( tmp_left_name_6, tmp_right_name_6 );
                Py_DECREF( tmp_right_name_6 );
                if ( tmp_raise_value_6 == NULL )
                {
                    assert( ERROR_OCCURRED() );

                    FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                    exception_lineno = 398;

                    goto try_except_handler_16;
                }
                exception_type = tmp_raise_type_6;
                Py_INCREF( tmp_raise_type_6 );
                exception_value = tmp_raise_value_6;
                exception_lineno = 398;
                RAISE_EXCEPTION_IMPLICIT( &exception_type, &exception_value, &exception_tb );

                goto try_except_handler_16;
            }
            branch_no_25:;
        }
        goto branch_end_24;
        branch_no_24:;
        {
            PyObject *tmp_assign_source_94;
            tmp_assign_source_94 = PyDict_New();
            assert( tmp_class_creation_6__prepared == NULL );
            tmp_class_creation_6__prepared = tmp_assign_source_94;
        }
        branch_end_24:;
    }
    {
        PyObject *tmp_assign_source_95;
        {
            PyObject *tmp_set_locals_6;
            CHECK_OBJECT( tmp_class_creation_6__prepared );
            tmp_set_locals_6 = tmp_class_creation_6__prepared;
            locals_subprocess_398 = tmp_set_locals_6;
            Py_INCREF( tmp_set_locals_6 );
        }
        // Tried code:
        // Tried code:
        tmp_dictset_value = const_str_plain_subprocess;
        tmp_res = PyObject_SetItem( locals_subprocess_398, const_str_plain___module__, tmp_dictset_value );
        if ( tmp_res != 0 )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 398;

            goto try_except_handler_18;
        }
        tmp_dictset_value = const_str_digest_d4cf3b1ab6270b5f4023d8f76f66fb62;
        tmp_res = PyObject_SetItem( locals_subprocess_398, const_str_plain___doc__, tmp_dictset_value );
        if ( tmp_res != 0 )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 398;

            goto try_except_handler_18;
        }
        tmp_dictset_value = const_str_plain_CompletedProcess;
        tmp_res = PyObject_SetItem( locals_subprocess_398, const_str_plain___qualname__, tmp_dictset_value );
        if ( tmp_res != 0 )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 398;

            goto try_except_handler_18;
        }
        MAKE_OR_REUSE_FRAME( cache_frame_975e88a8e14ee44e8b0b0239cd447315_6, codeobj_975e88a8e14ee44e8b0b0239cd447315, module_subprocess, sizeof(void *) );
        frame_975e88a8e14ee44e8b0b0239cd447315_6 = cache_frame_975e88a8e14ee44e8b0b0239cd447315_6;

        // Push the new frame as the currently active one.
        pushFrameStack( frame_975e88a8e14ee44e8b0b0239cd447315_6 );

        // Mark the frame object as in use, ref count 1 will be up for reuse.
        assert( Py_REFCNT( frame_975e88a8e14ee44e8b0b0239cd447315_6 ) == 2 ); // Frame stack

        // Framed code:
        {
            PyObject *tmp_defaults_4;
            tmp_defaults_4 = const_tuple_none_none_tuple;
            Py_INCREF( tmp_defaults_4 );
            tmp_dictset_value = MAKE_FUNCTION_subprocess$$$function_20___init__( tmp_defaults_4 );



            tmp_res = PyObject_SetItem( locals_subprocess_398, const_str_plain___init__, tmp_dictset_value );
            Py_DECREF( tmp_dictset_value );
            if ( tmp_res != 0 )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 409;
                type_description_2 = "o";
                goto frame_exception_exit_6;
            }
        }
        tmp_dictset_value = MAKE_FUNCTION_subprocess$$$function_21___repr__(  );



        tmp_res = PyObject_SetItem( locals_subprocess_398, const_str_plain___repr__, tmp_dictset_value );
        Py_DECREF( tmp_dictset_value );
        if ( tmp_res != 0 )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 415;
            type_description_2 = "o";
            goto frame_exception_exit_6;
        }
        tmp_dictset_value = MAKE_FUNCTION_subprocess$$$function_22_check_returncode(  );



        tmp_res = PyObject_SetItem( locals_subprocess_398, const_str_plain_check_returncode, tmp_dictset_value );
        Py_DECREF( tmp_dictset_value );
        if ( tmp_res != 0 )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 424;
            type_description_2 = "o";
            goto frame_exception_exit_6;
        }

#if 0
        RESTORE_FRAME_EXCEPTION( frame_975e88a8e14ee44e8b0b0239cd447315_6 );
#endif

        // Put the previous frame back on top.
        popFrameStack();

        goto frame_no_exception_5;

        frame_exception_exit_6:;

#if 0
        RESTORE_FRAME_EXCEPTION( frame_975e88a8e14ee44e8b0b0239cd447315_6 );
#endif

        if ( exception_tb == NULL )
        {
            exception_tb = MAKE_TRACEBACK( frame_975e88a8e14ee44e8b0b0239cd447315_6, exception_lineno );
        }
        else if ( exception_tb->tb_frame != &frame_975e88a8e14ee44e8b0b0239cd447315_6->m_frame )
        {
            exception_tb = ADD_TRACEBACK( exception_tb, frame_975e88a8e14ee44e8b0b0239cd447315_6, exception_lineno );
        }

        // Attachs locals to frame if any.
        Nuitka_Frame_AttachLocals(
            (struct Nuitka_FrameObject *)frame_975e88a8e14ee44e8b0b0239cd447315_6,
            type_description_2,
            outline_5_var___class__
        );


        // Release cached frame.
        if ( frame_975e88a8e14ee44e8b0b0239cd447315_6 == cache_frame_975e88a8e14ee44e8b0b0239cd447315_6 )
        {
            Py_DECREF( frame_975e88a8e14ee44e8b0b0239cd447315_6 );
        }
        cache_frame_975e88a8e14ee44e8b0b0239cd447315_6 = NULL;

        assertFrameObject( frame_975e88a8e14ee44e8b0b0239cd447315_6 );

        // Put the previous frame back on top.
        popFrameStack();

        // Return the error.
        goto nested_frame_exit_5;

        frame_no_exception_5:;
        goto skip_nested_handling_5;
        nested_frame_exit_5:;

        goto try_except_handler_18;
        skip_nested_handling_5:;
        {
            nuitka_bool tmp_condition_result_39;
            PyObject *tmp_compexpr_left_6;
            PyObject *tmp_compexpr_right_6;
            CHECK_OBJECT( tmp_class_creation_6__bases );
            tmp_compexpr_left_6 = tmp_class_creation_6__bases;
            tmp_compexpr_right_6 = const_tuple_type_object_tuple;
            tmp_res = RICH_COMPARE_BOOL_NOTEQ_OBJECT_OBJECT( tmp_compexpr_left_6, tmp_compexpr_right_6 );
            if ( tmp_res == -1 )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 398;

                goto try_except_handler_18;
            }
            tmp_condition_result_39 = ( tmp_res != 0 ) ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
            if ( tmp_condition_result_39 == NUITKA_BOOL_TRUE )
            {
                goto branch_yes_26;
            }
            else
            {
                goto branch_no_26;
            }
            branch_yes_26:;
            tmp_dictset_value = const_tuple_type_object_tuple;
            tmp_res = PyObject_SetItem( locals_subprocess_398, const_str_plain___orig_bases__, tmp_dictset_value );
            if ( tmp_res != 0 )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 398;

                goto try_except_handler_18;
            }
            branch_no_26:;
        }
        {
            PyObject *tmp_assign_source_96;
            PyObject *tmp_called_name_16;
            PyObject *tmp_args_name_12;
            PyObject *tmp_tuple_element_20;
            PyObject *tmp_kw_name_12;
            CHECK_OBJECT( tmp_class_creation_6__metaclass );
            tmp_called_name_16 = tmp_class_creation_6__metaclass;
            tmp_tuple_element_20 = const_str_plain_CompletedProcess;
            tmp_args_name_12 = PyTuple_New( 3 );
            Py_INCREF( tmp_tuple_element_20 );
            PyTuple_SET_ITEM( tmp_args_name_12, 0, tmp_tuple_element_20 );
            CHECK_OBJECT( tmp_class_creation_6__bases );
            tmp_tuple_element_20 = tmp_class_creation_6__bases;
            Py_INCREF( tmp_tuple_element_20 );
            PyTuple_SET_ITEM( tmp_args_name_12, 1, tmp_tuple_element_20 );
            tmp_tuple_element_20 = locals_subprocess_398;
            Py_INCREF( tmp_tuple_element_20 );
            PyTuple_SET_ITEM( tmp_args_name_12, 2, tmp_tuple_element_20 );
            CHECK_OBJECT( tmp_class_creation_6__class_decl_dict );
            tmp_kw_name_12 = tmp_class_creation_6__class_decl_dict;
            frame_3b8ded27a474e748966db3dc93ed4330->m_frame.f_lineno = 398;
            tmp_assign_source_96 = CALL_FUNCTION( tmp_called_name_16, tmp_args_name_12, tmp_kw_name_12 );
            Py_DECREF( tmp_args_name_12 );
            if ( tmp_assign_source_96 == NULL )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 398;

                goto try_except_handler_18;
            }
            assert( outline_5_var___class__ == NULL );
            outline_5_var___class__ = tmp_assign_source_96;
        }
        CHECK_OBJECT( outline_5_var___class__ );
        tmp_assign_source_95 = outline_5_var___class__;
        Py_INCREF( tmp_assign_source_95 );
        goto try_return_handler_18;
        // tried codes exits in all cases
        NUITKA_CANNOT_GET_HERE( subprocess );
        return MOD_RETURN_VALUE( NULL );
        // Return handler code:
        try_return_handler_18:;
        Py_DECREF( locals_subprocess_398 );
        locals_subprocess_398 = NULL;
        goto try_return_handler_17;
        // Exception handler code:
        try_except_handler_18:;
        exception_keeper_type_16 = exception_type;
        exception_keeper_value_16 = exception_value;
        exception_keeper_tb_16 = exception_tb;
        exception_keeper_lineno_16 = exception_lineno;
        exception_type = NULL;
        exception_value = NULL;
        exception_tb = NULL;
        exception_lineno = 0;

        Py_DECREF( locals_subprocess_398 );
        locals_subprocess_398 = NULL;
        // Re-raise.
        exception_type = exception_keeper_type_16;
        exception_value = exception_keeper_value_16;
        exception_tb = exception_keeper_tb_16;
        exception_lineno = exception_keeper_lineno_16;

        goto try_except_handler_17;
        // End of try:
        // tried codes exits in all cases
        NUITKA_CANNOT_GET_HERE( subprocess );
        return MOD_RETURN_VALUE( NULL );
        // Return handler code:
        try_return_handler_17:;
        CHECK_OBJECT( (PyObject *)outline_5_var___class__ );
        Py_DECREF( outline_5_var___class__ );
        outline_5_var___class__ = NULL;

        goto outline_result_6;
        // Exception handler code:
        try_except_handler_17:;
        exception_keeper_type_17 = exception_type;
        exception_keeper_value_17 = exception_value;
        exception_keeper_tb_17 = exception_tb;
        exception_keeper_lineno_17 = exception_lineno;
        exception_type = NULL;
        exception_value = NULL;
        exception_tb = NULL;
        exception_lineno = 0;

        // Re-raise.
        exception_type = exception_keeper_type_17;
        exception_value = exception_keeper_value_17;
        exception_tb = exception_keeper_tb_17;
        exception_lineno = exception_keeper_lineno_17;

        goto outline_exception_6;
        // End of try:
        // Return statement must have exited already.
        NUITKA_CANNOT_GET_HERE( subprocess );
        return MOD_RETURN_VALUE( NULL );
        outline_exception_6:;
        exception_lineno = 398;
        goto try_except_handler_16;
        outline_result_6:;
        UPDATE_STRING_DICT1( moduledict_subprocess, (Nuitka_StringObject *)const_str_plain_CompletedProcess, tmp_assign_source_95 );
    }
    goto try_end_6;
    // Exception handler code:
    try_except_handler_16:;
    exception_keeper_type_18 = exception_type;
    exception_keeper_value_18 = exception_value;
    exception_keeper_tb_18 = exception_tb;
    exception_keeper_lineno_18 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    Py_XDECREF( tmp_class_creation_6__bases );
    tmp_class_creation_6__bases = NULL;

    Py_XDECREF( tmp_class_creation_6__class_decl_dict );
    tmp_class_creation_6__class_decl_dict = NULL;

    Py_XDECREF( tmp_class_creation_6__metaclass );
    tmp_class_creation_6__metaclass = NULL;

    Py_XDECREF( tmp_class_creation_6__prepared );
    tmp_class_creation_6__prepared = NULL;

    // Re-raise.
    exception_type = exception_keeper_type_18;
    exception_value = exception_keeper_value_18;
    exception_tb = exception_keeper_tb_18;
    exception_lineno = exception_keeper_lineno_18;

    goto frame_exception_exit_1;
    // End of try:
    try_end_6:;
    CHECK_OBJECT( (PyObject *)tmp_class_creation_6__bases );
    Py_DECREF( tmp_class_creation_6__bases );
    tmp_class_creation_6__bases = NULL;

    CHECK_OBJECT( (PyObject *)tmp_class_creation_6__class_decl_dict );
    Py_DECREF( tmp_class_creation_6__class_decl_dict );
    tmp_class_creation_6__class_decl_dict = NULL;

    CHECK_OBJECT( (PyObject *)tmp_class_creation_6__metaclass );
    Py_DECREF( tmp_class_creation_6__metaclass );
    tmp_class_creation_6__metaclass = NULL;

    CHECK_OBJECT( (PyObject *)tmp_class_creation_6__prepared );
    Py_DECREF( tmp_class_creation_6__prepared );
    tmp_class_creation_6__prepared = NULL;

    {
        PyObject *tmp_assign_source_97;
        PyObject *tmp_kw_defaults_4;
        tmp_kw_defaults_4 = PyDict_Copy( const_dict_e546620670da4aad7a6759469fad34a0 );
        tmp_assign_source_97 = MAKE_FUNCTION_subprocess$$$function_23_run( tmp_kw_defaults_4 );



        UPDATE_STRING_DICT1( moduledict_subprocess, (Nuitka_StringObject *)const_str_plain_run, tmp_assign_source_97 );
    }
    {
        PyObject *tmp_assign_source_98;
        tmp_assign_source_98 = MAKE_FUNCTION_subprocess$$$function_24_list2cmdline(  );



        UPDATE_STRING_DICT1( moduledict_subprocess, (Nuitka_StringObject *)const_str_plain_list2cmdline, tmp_assign_source_98 );
    }
    {
        PyObject *tmp_assign_source_99;
        tmp_assign_source_99 = MAKE_FUNCTION_subprocess$$$function_25_getstatusoutput(  );



        UPDATE_STRING_DICT1( moduledict_subprocess, (Nuitka_StringObject *)const_str_plain_getstatusoutput, tmp_assign_source_99 );
    }
    {
        PyObject *tmp_assign_source_100;
        tmp_assign_source_100 = MAKE_FUNCTION_subprocess$$$function_26_getoutput(  );



        UPDATE_STRING_DICT1( moduledict_subprocess, (Nuitka_StringObject *)const_str_plain_getoutput, tmp_assign_source_100 );
    }
    // Tried code:
    {
        PyObject *tmp_assign_source_101;
        PyObject *tmp_dircall_arg1_6;
        tmp_dircall_arg1_6 = const_tuple_type_object_tuple;
        Py_INCREF( tmp_dircall_arg1_6 );

        {
            PyObject *dir_call_args[] = {tmp_dircall_arg1_6};
            tmp_assign_source_101 = impl___internal__$$$function_1__mro_entries_conversion( dir_call_args );
        }
        if ( tmp_assign_source_101 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 608;

            goto try_except_handler_19;
        }
        assert( tmp_class_creation_7__bases == NULL );
        tmp_class_creation_7__bases = tmp_assign_source_101;
    }
    {
        PyObject *tmp_assign_source_102;
        tmp_assign_source_102 = PyDict_New();
        assert( tmp_class_creation_7__class_decl_dict == NULL );
        tmp_class_creation_7__class_decl_dict = tmp_assign_source_102;
    }
    {
        PyObject *tmp_assign_source_103;
        PyObject *tmp_metaclass_name_7;
        nuitka_bool tmp_condition_result_40;
        PyObject *tmp_key_name_19;
        PyObject *tmp_dict_name_19;
        PyObject *tmp_dict_name_20;
        PyObject *tmp_key_name_20;
        nuitka_bool tmp_condition_result_41;
        int tmp_truth_name_8;
        PyObject *tmp_type_arg_12;
        PyObject *tmp_subscribed_name_6;
        PyObject *tmp_subscript_name_6;
        PyObject *tmp_bases_name_7;
        tmp_key_name_19 = const_str_plain_metaclass;
        CHECK_OBJECT( tmp_class_creation_7__class_decl_dict );
        tmp_dict_name_19 = tmp_class_creation_7__class_decl_dict;
        tmp_res = PyDict_Contains( tmp_dict_name_19, tmp_key_name_19 );
        if ( tmp_res == -1 )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 608;

            goto try_except_handler_19;
        }
        tmp_condition_result_40 = ( tmp_res != 0 ) ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
        if ( tmp_condition_result_40 == NUITKA_BOOL_TRUE )
        {
            goto condexpr_true_14;
        }
        else
        {
            goto condexpr_false_14;
        }
        condexpr_true_14:;
        CHECK_OBJECT( tmp_class_creation_7__class_decl_dict );
        tmp_dict_name_20 = tmp_class_creation_7__class_decl_dict;
        tmp_key_name_20 = const_str_plain_metaclass;
        tmp_metaclass_name_7 = DICT_GET_ITEM( tmp_dict_name_20, tmp_key_name_20 );
        if ( tmp_metaclass_name_7 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 608;

            goto try_except_handler_19;
        }
        goto condexpr_end_14;
        condexpr_false_14:;
        CHECK_OBJECT( tmp_class_creation_7__bases );
        tmp_truth_name_8 = CHECK_IF_TRUE( tmp_class_creation_7__bases );
        if ( tmp_truth_name_8 == -1 )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 608;

            goto try_except_handler_19;
        }
        tmp_condition_result_41 = tmp_truth_name_8 == 1 ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
        if ( tmp_condition_result_41 == NUITKA_BOOL_TRUE )
        {
            goto condexpr_true_15;
        }
        else
        {
            goto condexpr_false_15;
        }
        condexpr_true_15:;
        CHECK_OBJECT( tmp_class_creation_7__bases );
        tmp_subscribed_name_6 = tmp_class_creation_7__bases;
        tmp_subscript_name_6 = const_int_0;
        tmp_type_arg_12 = LOOKUP_SUBSCRIPT_CONST( tmp_subscribed_name_6, tmp_subscript_name_6, 0 );
        if ( tmp_type_arg_12 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 608;

            goto try_except_handler_19;
        }
        tmp_metaclass_name_7 = BUILTIN_TYPE1( tmp_type_arg_12 );
        Py_DECREF( tmp_type_arg_12 );
        if ( tmp_metaclass_name_7 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 608;

            goto try_except_handler_19;
        }
        goto condexpr_end_15;
        condexpr_false_15:;
        tmp_metaclass_name_7 = (PyObject *)&PyType_Type;
        Py_INCREF( tmp_metaclass_name_7 );
        condexpr_end_15:;
        condexpr_end_14:;
        CHECK_OBJECT( tmp_class_creation_7__bases );
        tmp_bases_name_7 = tmp_class_creation_7__bases;
        tmp_assign_source_103 = SELECT_METACLASS( tmp_metaclass_name_7, tmp_bases_name_7 );
        Py_DECREF( tmp_metaclass_name_7 );
        if ( tmp_assign_source_103 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 608;

            goto try_except_handler_19;
        }
        assert( tmp_class_creation_7__metaclass == NULL );
        tmp_class_creation_7__metaclass = tmp_assign_source_103;
    }
    {
        nuitka_bool tmp_condition_result_42;
        PyObject *tmp_key_name_21;
        PyObject *tmp_dict_name_21;
        tmp_key_name_21 = const_str_plain_metaclass;
        CHECK_OBJECT( tmp_class_creation_7__class_decl_dict );
        tmp_dict_name_21 = tmp_class_creation_7__class_decl_dict;
        tmp_res = PyDict_Contains( tmp_dict_name_21, tmp_key_name_21 );
        if ( tmp_res == -1 )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 608;

            goto try_except_handler_19;
        }
        tmp_condition_result_42 = ( tmp_res != 0 ) ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
        if ( tmp_condition_result_42 == NUITKA_BOOL_TRUE )
        {
            goto branch_yes_27;
        }
        else
        {
            goto branch_no_27;
        }
        branch_yes_27:;
        CHECK_OBJECT( tmp_class_creation_7__class_decl_dict );
        tmp_dictdel_dict = tmp_class_creation_7__class_decl_dict;
        tmp_dictdel_key = const_str_plain_metaclass;
        tmp_result = DICT_REMOVE_ITEM( tmp_dictdel_dict, tmp_dictdel_key );
        if ( tmp_result == false )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 608;

            goto try_except_handler_19;
        }
        branch_no_27:;
    }
    {
        nuitka_bool tmp_condition_result_43;
        PyObject *tmp_source_name_30;
        CHECK_OBJECT( tmp_class_creation_7__metaclass );
        tmp_source_name_30 = tmp_class_creation_7__metaclass;
        tmp_res = PyObject_HasAttr( tmp_source_name_30, const_str_plain___prepare__ );
        tmp_condition_result_43 = ( tmp_res != 0 ) ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
        if ( tmp_condition_result_43 == NUITKA_BOOL_TRUE )
        {
            goto branch_yes_28;
        }
        else
        {
            goto branch_no_28;
        }
        branch_yes_28:;
        {
            PyObject *tmp_assign_source_104;
            PyObject *tmp_called_name_17;
            PyObject *tmp_source_name_31;
            PyObject *tmp_args_name_13;
            PyObject *tmp_tuple_element_21;
            PyObject *tmp_kw_name_13;
            CHECK_OBJECT( tmp_class_creation_7__metaclass );
            tmp_source_name_31 = tmp_class_creation_7__metaclass;
            tmp_called_name_17 = LOOKUP_ATTRIBUTE( tmp_source_name_31, const_str_plain___prepare__ );
            if ( tmp_called_name_17 == NULL )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 608;

                goto try_except_handler_19;
            }
            tmp_tuple_element_21 = const_str_plain_Popen;
            tmp_args_name_13 = PyTuple_New( 2 );
            Py_INCREF( tmp_tuple_element_21 );
            PyTuple_SET_ITEM( tmp_args_name_13, 0, tmp_tuple_element_21 );
            CHECK_OBJECT( tmp_class_creation_7__bases );
            tmp_tuple_element_21 = tmp_class_creation_7__bases;
            Py_INCREF( tmp_tuple_element_21 );
            PyTuple_SET_ITEM( tmp_args_name_13, 1, tmp_tuple_element_21 );
            CHECK_OBJECT( tmp_class_creation_7__class_decl_dict );
            tmp_kw_name_13 = tmp_class_creation_7__class_decl_dict;
            frame_3b8ded27a474e748966db3dc93ed4330->m_frame.f_lineno = 608;
            tmp_assign_source_104 = CALL_FUNCTION( tmp_called_name_17, tmp_args_name_13, tmp_kw_name_13 );
            Py_DECREF( tmp_called_name_17 );
            Py_DECREF( tmp_args_name_13 );
            if ( tmp_assign_source_104 == NULL )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 608;

                goto try_except_handler_19;
            }
            assert( tmp_class_creation_7__prepared == NULL );
            tmp_class_creation_7__prepared = tmp_assign_source_104;
        }
        {
            nuitka_bool tmp_condition_result_44;
            PyObject *tmp_operand_name_7;
            PyObject *tmp_source_name_32;
            CHECK_OBJECT( tmp_class_creation_7__prepared );
            tmp_source_name_32 = tmp_class_creation_7__prepared;
            tmp_res = PyObject_HasAttr( tmp_source_name_32, const_str_plain___getitem__ );
            tmp_operand_name_7 = ( tmp_res != 0 ) ? Py_True : Py_False;
            tmp_res = CHECK_IF_TRUE( tmp_operand_name_7 );
            if ( tmp_res == -1 )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 608;

                goto try_except_handler_19;
            }
            tmp_condition_result_44 = ( tmp_res == 0 ) ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
            if ( tmp_condition_result_44 == NUITKA_BOOL_TRUE )
            {
                goto branch_yes_29;
            }
            else
            {
                goto branch_no_29;
            }
            branch_yes_29:;
            {
                PyObject *tmp_raise_type_7;
                PyObject *tmp_raise_value_7;
                PyObject *tmp_left_name_7;
                PyObject *tmp_right_name_7;
                PyObject *tmp_tuple_element_22;
                PyObject *tmp_getattr_target_8;
                PyObject *tmp_getattr_attr_8;
                PyObject *tmp_getattr_default_8;
                PyObject *tmp_source_name_33;
                PyObject *tmp_type_arg_13;
                tmp_raise_type_7 = PyExc_TypeError;
                tmp_left_name_7 = const_str_digest_75fd71b1edada749c2ef7ac810062295;
                CHECK_OBJECT( tmp_class_creation_7__metaclass );
                tmp_getattr_target_8 = tmp_class_creation_7__metaclass;
                tmp_getattr_attr_8 = const_str_plain___name__;
                tmp_getattr_default_8 = const_str_angle_metaclass;
                tmp_tuple_element_22 = BUILTIN_GETATTR( tmp_getattr_target_8, tmp_getattr_attr_8, tmp_getattr_default_8 );
                if ( tmp_tuple_element_22 == NULL )
                {
                    assert( ERROR_OCCURRED() );

                    FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                    exception_lineno = 608;

                    goto try_except_handler_19;
                }
                tmp_right_name_7 = PyTuple_New( 2 );
                PyTuple_SET_ITEM( tmp_right_name_7, 0, tmp_tuple_element_22 );
                CHECK_OBJECT( tmp_class_creation_7__prepared );
                tmp_type_arg_13 = tmp_class_creation_7__prepared;
                tmp_source_name_33 = BUILTIN_TYPE1( tmp_type_arg_13 );
                assert( !(tmp_source_name_33 == NULL) );
                tmp_tuple_element_22 = LOOKUP_ATTRIBUTE( tmp_source_name_33, const_str_plain___name__ );
                Py_DECREF( tmp_source_name_33 );
                if ( tmp_tuple_element_22 == NULL )
                {
                    assert( ERROR_OCCURRED() );

                    FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
                    Py_DECREF( tmp_right_name_7 );

                    exception_lineno = 608;

                    goto try_except_handler_19;
                }
                PyTuple_SET_ITEM( tmp_right_name_7, 1, tmp_tuple_element_22 );
                tmp_raise_value_7 = BINARY_OPERATION_REMAINDER( tmp_left_name_7, tmp_right_name_7 );
                Py_DECREF( tmp_right_name_7 );
                if ( tmp_raise_value_7 == NULL )
                {
                    assert( ERROR_OCCURRED() );

                    FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                    exception_lineno = 608;

                    goto try_except_handler_19;
                }
                exception_type = tmp_raise_type_7;
                Py_INCREF( tmp_raise_type_7 );
                exception_value = tmp_raise_value_7;
                exception_lineno = 608;
                RAISE_EXCEPTION_IMPLICIT( &exception_type, &exception_value, &exception_tb );

                goto try_except_handler_19;
            }
            branch_no_29:;
        }
        goto branch_end_28;
        branch_no_28:;
        {
            PyObject *tmp_assign_source_105;
            tmp_assign_source_105 = PyDict_New();
            assert( tmp_class_creation_7__prepared == NULL );
            tmp_class_creation_7__prepared = tmp_assign_source_105;
        }
        branch_end_28:;
    }
    {
        PyObject *tmp_assign_source_106;
        {
            PyObject *tmp_set_locals_7;
            CHECK_OBJECT( tmp_class_creation_7__prepared );
            tmp_set_locals_7 = tmp_class_creation_7__prepared;
            locals_subprocess_608 = tmp_set_locals_7;
            Py_INCREF( tmp_set_locals_7 );
        }
        // Tried code:
        // Tried code:
        tmp_dictset_value = const_str_plain_subprocess;
        tmp_res = PyObject_SetItem( locals_subprocess_608, const_str_plain___module__, tmp_dictset_value );
        if ( tmp_res != 0 )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 608;

            goto try_except_handler_21;
        }
        tmp_dictset_value = const_str_digest_f4fe94d7cfc53f3b8f1f9e21a8236719;
        tmp_res = PyObject_SetItem( locals_subprocess_608, const_str_plain___doc__, tmp_dictset_value );
        if ( tmp_res != 0 )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 608;

            goto try_except_handler_21;
        }
        tmp_dictset_value = const_str_plain_Popen;
        tmp_res = PyObject_SetItem( locals_subprocess_608, const_str_plain___qualname__, tmp_dictset_value );
        if ( tmp_res != 0 )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 608;

            goto try_except_handler_21;
        }
        MAKE_OR_REUSE_FRAME( cache_frame_175fb9997171de0186ab4a7d7aec4913_7, codeobj_175fb9997171de0186ab4a7d7aec4913, module_subprocess, sizeof(void *) );
        frame_175fb9997171de0186ab4a7d7aec4913_7 = cache_frame_175fb9997171de0186ab4a7d7aec4913_7;

        // Push the new frame as the currently active one.
        pushFrameStack( frame_175fb9997171de0186ab4a7d7aec4913_7 );

        // Mark the frame object as in use, ref count 1 will be up for reuse.
        assert( Py_REFCNT( frame_175fb9997171de0186ab4a7d7aec4913_7 ) == 2 ); // Frame stack

        // Framed code:
        tmp_dictset_value = Py_False;
        tmp_res = PyObject_SetItem( locals_subprocess_608, const_str_plain__child_created, tmp_dictset_value );
        if ( tmp_res != 0 )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 654;
            type_description_2 = "o";
            goto frame_exception_exit_7;
        }
        {
            PyObject *tmp_defaults_5;
            PyObject *tmp_kw_defaults_5;
            tmp_defaults_5 = const_tuple_f457fab1f66c6184eb685077fc2b03b6_tuple;
            tmp_kw_defaults_5 = PyDict_Copy( const_dict_22c19d2ba6a30c2bc2d52043b2a0b7a3 );
            Py_INCREF( tmp_defaults_5 );
            tmp_dictset_value = MAKE_FUNCTION_subprocess$$$function_27___init__( tmp_defaults_5, tmp_kw_defaults_5 );



            tmp_res = PyObject_SetItem( locals_subprocess_608, const_str_plain___init__, tmp_dictset_value );
            Py_DECREF( tmp_dictset_value );
            if ( tmp_res != 0 )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 656;
                type_description_2 = "o";
                goto frame_exception_exit_7;
            }
        }
        {
            nuitka_bool tmp_condition_result_45;
            PyObject *tmp_called_name_18;
            PyObject *tmp_args_element_name_7;
            PyObject *tmp_called_name_19;
            PyObject *tmp_args_element_name_8;
            tmp_res = MAPPING_HAS_ITEM( locals_subprocess_608, const_str_plain_property );

            if ( tmp_res == -1 )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 805;
                type_description_2 = "o";
                goto frame_exception_exit_7;
            }
            tmp_condition_result_45 = ( tmp_res == 1 ) ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
            if ( tmp_condition_result_45 == NUITKA_BOOL_TRUE )
            {
                goto condexpr_true_16;
            }
            else
            {
                goto condexpr_false_16;
            }
            condexpr_true_16:;
            tmp_called_name_18 = PyObject_GetItem( locals_subprocess_608, const_str_plain_property );

            if ( tmp_called_name_18 == NULL && CHECK_AND_CLEAR_KEY_ERROR_OCCURRED() )
            {

                exception_type = PyExc_NameError;
                Py_INCREF( exception_type );
                exception_value = PyUnicode_FromFormat( "name '%s' is not defined", "property" );
                exception_tb = NULL;
                NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
                CHAIN_EXCEPTION( exception_value );

                exception_lineno = 805;
                type_description_2 = "o";
                goto frame_exception_exit_7;
            }

            if ( tmp_called_name_18 == NULL )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 805;
                type_description_2 = "o";
                goto frame_exception_exit_7;
            }
            tmp_args_element_name_7 = MAKE_FUNCTION_subprocess$$$function_28_universal_newlines(  );



            frame_175fb9997171de0186ab4a7d7aec4913_7->m_frame.f_lineno = 805;
            {
                PyObject *call_args[] = { tmp_args_element_name_7 };
                tmp_dictset_value = CALL_FUNCTION_WITH_ARGS1( tmp_called_name_18, call_args );
            }

            Py_DECREF( tmp_called_name_18 );
            Py_DECREF( tmp_args_element_name_7 );
            if ( tmp_dictset_value == NULL )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 805;
                type_description_2 = "o";
                goto frame_exception_exit_7;
            }
            goto condexpr_end_16;
            condexpr_false_16:;
            tmp_called_name_19 = (PyObject *)&PyProperty_Type;
            tmp_args_element_name_8 = MAKE_FUNCTION_subprocess$$$function_28_universal_newlines(  );



            frame_175fb9997171de0186ab4a7d7aec4913_7->m_frame.f_lineno = 805;
            {
                PyObject *call_args[] = { tmp_args_element_name_8 };
                tmp_dictset_value = CALL_FUNCTION_WITH_ARGS1( tmp_called_name_19, call_args );
            }

            Py_DECREF( tmp_args_element_name_8 );
            if ( tmp_dictset_value == NULL )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 805;
                type_description_2 = "o";
                goto frame_exception_exit_7;
            }
            condexpr_end_16:;
            tmp_res = PyObject_SetItem( locals_subprocess_608, const_str_plain_universal_newlines, tmp_dictset_value );
            Py_DECREF( tmp_dictset_value );
            if ( tmp_res != 0 )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 805;
                type_description_2 = "o";
                goto frame_exception_exit_7;
            }
        }
        {
            PyObject *tmp_called_instance_4;
            PyObject *tmp_args_element_name_9;
            tmp_called_instance_4 = PyObject_GetItem( locals_subprocess_608, const_str_plain_universal_newlines );

            if ( tmp_called_instance_4 == NULL && CHECK_AND_CLEAR_KEY_ERROR_OCCURRED() )
            {

                exception_type = PyExc_NameError;
                Py_INCREF( exception_type );
                exception_value = PyUnicode_FromFormat( "name '%s' is not defined", "universal_newlines" );
                exception_tb = NULL;
                NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
                CHAIN_EXCEPTION( exception_value );

                exception_lineno = 811;
                type_description_2 = "o";
                goto frame_exception_exit_7;
            }

            if ( tmp_called_instance_4 == NULL )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 811;
                type_description_2 = "o";
                goto frame_exception_exit_7;
            }
            tmp_args_element_name_9 = MAKE_FUNCTION_subprocess$$$function_29_universal_newlines(  );



            frame_175fb9997171de0186ab4a7d7aec4913_7->m_frame.f_lineno = 811;
            {
                PyObject *call_args[] = { tmp_args_element_name_9 };
                tmp_dictset_value = CALL_METHOD_WITH_ARGS1( tmp_called_instance_4, const_str_plain_setter, call_args );
            }

            Py_DECREF( tmp_called_instance_4 );
            Py_DECREF( tmp_args_element_name_9 );
            if ( tmp_dictset_value == NULL )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 811;
                type_description_2 = "o";
                goto frame_exception_exit_7;
            }
            tmp_res = PyObject_SetItem( locals_subprocess_608, const_str_plain_universal_newlines, tmp_dictset_value );
            Py_DECREF( tmp_dictset_value );
            if ( tmp_res != 0 )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 811;
                type_description_2 = "o";
                goto frame_exception_exit_7;
            }
        }
        tmp_dictset_value = MAKE_FUNCTION_subprocess$$$function_30__translate_newlines(  );



        tmp_res = PyObject_SetItem( locals_subprocess_608, const_str_plain__translate_newlines, tmp_dictset_value );
        Py_DECREF( tmp_dictset_value );
        if ( tmp_res != 0 )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 815;
            type_description_2 = "o";
            goto frame_exception_exit_7;
        }
        tmp_dictset_value = MAKE_FUNCTION_subprocess$$$function_31___enter__(  );



        tmp_res = PyObject_SetItem( locals_subprocess_608, const_str_plain___enter__, tmp_dictset_value );
        Py_DECREF( tmp_dictset_value );
        if ( tmp_res != 0 )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 819;
            type_description_2 = "o";
            goto frame_exception_exit_7;
        }
        tmp_dictset_value = MAKE_FUNCTION_subprocess$$$function_32___exit__(  );



        tmp_res = PyObject_SetItem( locals_subprocess_608, const_str_plain___exit__, tmp_dictset_value );
        Py_DECREF( tmp_dictset_value );
        if ( tmp_res != 0 )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 822;
            type_description_2 = "o";
            goto frame_exception_exit_7;
        }
        {
            PyObject *tmp_defaults_6;
            PyObject *tmp_tuple_element_23;
            PyObject *tmp_source_name_34;
            PyObject *tmp_mvar_value_14;
            PyObject *tmp_source_name_35;
            PyObject *tmp_mvar_value_15;
            tmp_source_name_34 = PyObject_GetItem( locals_subprocess_608, const_str_plain_sys );

            if ( tmp_source_name_34 == NULL )
            {
                if ( CHECK_AND_CLEAR_KEY_ERROR_OCCURRED() )
                {
                tmp_mvar_value_14 = GET_STRING_DICT_VALUE( moduledict_subprocess, (Nuitka_StringObject *)const_str_plain_sys );

                if (unlikely( tmp_mvar_value_14 == NULL ))
                {
                    tmp_mvar_value_14 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_sys );
                }

                if ( tmp_mvar_value_14 == NULL )
                {

                    exception_type = PyExc_NameError;
                    Py_INCREF( exception_type );
                    exception_value = PyUnicode_FromFormat( "name '%s' is not defined", "sys" );
                    exception_tb = NULL;
                    NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
                    CHAIN_EXCEPTION( exception_value );

                    exception_lineno = 850;
                    type_description_2 = "o";
                    goto frame_exception_exit_7;
                }

                tmp_source_name_34 = tmp_mvar_value_14;
                Py_INCREF( tmp_source_name_34 );
                }
            }

            tmp_tuple_element_23 = LOOKUP_ATTRIBUTE( tmp_source_name_34, const_str_plain_maxsize );
            Py_DECREF( tmp_source_name_34 );
            if ( tmp_tuple_element_23 == NULL )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 850;
                type_description_2 = "o";
                goto frame_exception_exit_7;
            }
            tmp_defaults_6 = PyTuple_New( 2 );
            PyTuple_SET_ITEM( tmp_defaults_6, 0, tmp_tuple_element_23 );
            tmp_source_name_35 = PyObject_GetItem( locals_subprocess_608, const_str_plain_warnings );

            if ( tmp_source_name_35 == NULL )
            {
                if ( CHECK_AND_CLEAR_KEY_ERROR_OCCURRED() )
                {
                tmp_mvar_value_15 = GET_STRING_DICT_VALUE( moduledict_subprocess, (Nuitka_StringObject *)const_str_plain_warnings );

                if (unlikely( tmp_mvar_value_15 == NULL ))
                {
                    tmp_mvar_value_15 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_warnings );
                }

                if ( tmp_mvar_value_15 == NULL )
                {
                    Py_DECREF( tmp_defaults_6 );
                    exception_type = PyExc_NameError;
                    Py_INCREF( exception_type );
                    exception_value = PyUnicode_FromFormat( "name '%s' is not defined", "warnings" );
                    exception_tb = NULL;
                    NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
                    CHAIN_EXCEPTION( exception_value );

                    exception_lineno = 850;
                    type_description_2 = "o";
                    goto frame_exception_exit_7;
                }

                tmp_source_name_35 = tmp_mvar_value_15;
                Py_INCREF( tmp_source_name_35 );
                }
            }

            tmp_tuple_element_23 = LOOKUP_ATTRIBUTE( tmp_source_name_35, const_str_plain_warn );
            Py_DECREF( tmp_source_name_35 );
            if ( tmp_tuple_element_23 == NULL )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
                Py_DECREF( tmp_defaults_6 );

                exception_lineno = 850;
                type_description_2 = "o";
                goto frame_exception_exit_7;
            }
            PyTuple_SET_ITEM( tmp_defaults_6, 1, tmp_tuple_element_23 );
            tmp_dictset_value = MAKE_FUNCTION_subprocess$$$function_33___del__( tmp_defaults_6 );



            tmp_res = PyObject_SetItem( locals_subprocess_608, const_str_plain___del__, tmp_dictset_value );
            Py_DECREF( tmp_dictset_value );
            if ( tmp_res != 0 )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 850;
                type_description_2 = "o";
                goto frame_exception_exit_7;
            }
        }
        tmp_dictset_value = MAKE_FUNCTION_subprocess$$$function_34__get_devnull(  );



        tmp_res = PyObject_SetItem( locals_subprocess_608, const_str_plain__get_devnull, tmp_dictset_value );
        Py_DECREF( tmp_dictset_value );
        if ( tmp_res != 0 )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 865;
            type_description_2 = "o";
            goto frame_exception_exit_7;
        }
        tmp_dictset_value = MAKE_FUNCTION_subprocess$$$function_35__stdin_write(  );



        tmp_res = PyObject_SetItem( locals_subprocess_608, const_str_plain__stdin_write, tmp_dictset_value );
        Py_DECREF( tmp_dictset_value );
        if ( tmp_res != 0 )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 870;
            type_description_2 = "o";
            goto frame_exception_exit_7;
        }
        {
            PyObject *tmp_defaults_7;
            tmp_defaults_7 = const_tuple_none_none_tuple;
            Py_INCREF( tmp_defaults_7 );
            tmp_dictset_value = MAKE_FUNCTION_subprocess$$$function_36_communicate( tmp_defaults_7 );



            tmp_res = PyObject_SetItem( locals_subprocess_608, const_str_plain_communicate, tmp_dictset_value );
            Py_DECREF( tmp_dictset_value );
            if ( tmp_res != 0 )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 895;
                type_description_2 = "o";
                goto frame_exception_exit_7;
            }
        }
        tmp_dictset_value = MAKE_FUNCTION_subprocess$$$function_37_poll(  );



        tmp_res = PyObject_SetItem( locals_subprocess_608, const_str_plain_poll, tmp_dictset_value );
        Py_DECREF( tmp_dictset_value );
        if ( tmp_res != 0 )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 963;
            type_description_2 = "o";
            goto frame_exception_exit_7;
        }
        tmp_dictset_value = MAKE_FUNCTION_subprocess$$$function_38__remaining_time(  );



        tmp_res = PyObject_SetItem( locals_subprocess_608, const_str_plain__remaining_time, tmp_dictset_value );
        Py_DECREF( tmp_dictset_value );
        if ( tmp_res != 0 )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 969;
            type_description_2 = "o";
            goto frame_exception_exit_7;
        }
        tmp_dictset_value = MAKE_FUNCTION_subprocess$$$function_39__check_timeout(  );



        tmp_res = PyObject_SetItem( locals_subprocess_608, const_str_plain__check_timeout, tmp_dictset_value );
        Py_DECREF( tmp_dictset_value );
        if ( tmp_res != 0 )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 977;
            type_description_2 = "o";
            goto frame_exception_exit_7;
        }
        {
            PyObject *tmp_defaults_8;
            tmp_defaults_8 = const_tuple_none_tuple;
            Py_INCREF( tmp_defaults_8 );
            tmp_dictset_value = MAKE_FUNCTION_subprocess$$$function_40_wait( tmp_defaults_8 );



            tmp_res = PyObject_SetItem( locals_subprocess_608, const_str_plain_wait, tmp_dictset_value );
            Py_DECREF( tmp_dictset_value );
            if ( tmp_res != 0 )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 985;
                type_description_2 = "o";
                goto frame_exception_exit_7;
            }
        }
        {
            nuitka_bool tmp_condition_result_46;
            PyObject *tmp_locals_lookup_value_1;
            PyObject *tmp_mvar_value_16;
            int tmp_truth_name_9;
            tmp_locals_lookup_value_1 = PyObject_GetItem( locals_subprocess_608, const_str_plain__mswindows );

            if ( tmp_locals_lookup_value_1 == NULL )
            {
                if ( CHECK_AND_CLEAR_KEY_ERROR_OCCURRED() )
                {
                tmp_mvar_value_16 = GET_STRING_DICT_VALUE( moduledict_subprocess, (Nuitka_StringObject *)const_str_plain__mswindows );

                if (unlikely( tmp_mvar_value_16 == NULL ))
                {
                    tmp_mvar_value_16 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain__mswindows );
                }

                if ( tmp_mvar_value_16 == NULL )
                {

                    exception_type = PyExc_NameError;
                    Py_INCREF( exception_type );
                    exception_value = PyUnicode_FromFormat( "name '%s' is not defined", "_mswindows" );
                    exception_tb = NULL;
                    NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
                    CHAIN_EXCEPTION( exception_value );

                    exception_lineno = 1009;
                    type_description_2 = "o";
                    goto frame_exception_exit_7;
                }

                tmp_locals_lookup_value_1 = tmp_mvar_value_16;
                Py_INCREF( tmp_locals_lookup_value_1 );
                }
            }

            tmp_truth_name_9 = CHECK_IF_TRUE( tmp_locals_lookup_value_1 );
            if ( tmp_truth_name_9 == -1 )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
                Py_DECREF( tmp_locals_lookup_value_1 );

                exception_lineno = 1009;
                type_description_2 = "o";
                goto frame_exception_exit_7;
            }
            tmp_condition_result_46 = tmp_truth_name_9 == 1 ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
            Py_DECREF( tmp_locals_lookup_value_1 );
            if ( tmp_condition_result_46 == NUITKA_BOOL_TRUE )
            {
                goto branch_yes_30;
            }
            else
            {
                goto branch_no_30;
            }
            branch_yes_30:;
            tmp_dictset_value = MAKE_FUNCTION_subprocess$$$function_41__get_handles(  );



            tmp_res = PyObject_SetItem( locals_subprocess_608, const_str_plain__get_handles, tmp_dictset_value );
            Py_DECREF( tmp_dictset_value );
            if ( tmp_res != 0 )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 1013;
                type_description_2 = "o";
                goto frame_exception_exit_7;
            }
            tmp_dictset_value = MAKE_FUNCTION_subprocess$$$function_42__make_inheritable(  );



            tmp_res = PyObject_SetItem( locals_subprocess_608, const_str_plain__make_inheritable, tmp_dictset_value );
            Py_DECREF( tmp_dictset_value );
            if ( tmp_res != 0 )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 1085;
                type_description_2 = "o";
                goto frame_exception_exit_7;
            }
            tmp_dictset_value = MAKE_FUNCTION_subprocess$$$function_43__filter_handle_list(  );



            tmp_res = PyObject_SetItem( locals_subprocess_608, const_str_plain__filter_handle_list, tmp_dictset_value );
            Py_DECREF( tmp_dictset_value );
            if ( tmp_res != 0 )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 1094;
                type_description_2 = "o";
                goto frame_exception_exit_7;
            }
            tmp_dictset_value = MAKE_FUNCTION_subprocess$$$function_44__execute_child(  );



            tmp_res = PyObject_SetItem( locals_subprocess_608, const_str_plain__execute_child, tmp_dictset_value );
            Py_DECREF( tmp_dictset_value );
            if ( tmp_res != 0 )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 1107;
                type_description_2 = "o";
                goto frame_exception_exit_7;
            }
            {
                PyObject *tmp_defaults_9;
                PyObject *tmp_tuple_element_24;
                PyObject *tmp_source_name_36;
                PyObject *tmp_mvar_value_17;
                PyObject *tmp_source_name_37;
                PyObject *tmp_mvar_value_18;
                PyObject *tmp_source_name_38;
                PyObject *tmp_mvar_value_19;
                tmp_tuple_element_24 = Py_None;
                tmp_defaults_9 = PyTuple_New( 4 );
                Py_INCREF( tmp_tuple_element_24 );
                PyTuple_SET_ITEM( tmp_defaults_9, 0, tmp_tuple_element_24 );
                tmp_source_name_36 = PyObject_GetItem( locals_subprocess_608, const_str_plain__winapi );

                if ( tmp_source_name_36 == NULL )
                {
                    if ( CHECK_AND_CLEAR_KEY_ERROR_OCCURRED() )
                    {
                    tmp_mvar_value_17 = GET_STRING_DICT_VALUE( moduledict_subprocess, (Nuitka_StringObject *)const_str_plain__winapi );

                    if (unlikely( tmp_mvar_value_17 == NULL ))
                    {
                        tmp_mvar_value_17 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain__winapi );
                    }

                    if ( tmp_mvar_value_17 == NULL )
                    {
                        Py_DECREF( tmp_defaults_9 );
                        exception_type = PyExc_NameError;
                        Py_INCREF( exception_type );
                        exception_value = PyUnicode_FromFormat( "name '%s' is not defined", "_winapi" );
                        exception_tb = NULL;
                        NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
                        CHAIN_EXCEPTION( exception_value );

                        exception_lineno = 1205;
                        type_description_2 = "o";
                        goto frame_exception_exit_7;
                    }

                    tmp_source_name_36 = tmp_mvar_value_17;
                    Py_INCREF( tmp_source_name_36 );
                    }
                }

                tmp_tuple_element_24 = LOOKUP_ATTRIBUTE( tmp_source_name_36, const_str_plain_WaitForSingleObject );
                Py_DECREF( tmp_source_name_36 );
                if ( tmp_tuple_element_24 == NULL )
                {
                    assert( ERROR_OCCURRED() );

                    FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
                    Py_DECREF( tmp_defaults_9 );

                    exception_lineno = 1205;
                    type_description_2 = "o";
                    goto frame_exception_exit_7;
                }
                PyTuple_SET_ITEM( tmp_defaults_9, 1, tmp_tuple_element_24 );
                tmp_source_name_37 = PyObject_GetItem( locals_subprocess_608, const_str_plain__winapi );

                if ( tmp_source_name_37 == NULL )
                {
                    if ( CHECK_AND_CLEAR_KEY_ERROR_OCCURRED() )
                    {
                    tmp_mvar_value_18 = GET_STRING_DICT_VALUE( moduledict_subprocess, (Nuitka_StringObject *)const_str_plain__winapi );

                    if (unlikely( tmp_mvar_value_18 == NULL ))
                    {
                        tmp_mvar_value_18 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain__winapi );
                    }

                    if ( tmp_mvar_value_18 == NULL )
                    {
                        Py_DECREF( tmp_defaults_9 );
                        exception_type = PyExc_NameError;
                        Py_INCREF( exception_type );
                        exception_value = PyUnicode_FromFormat( "name '%s' is not defined", "_winapi" );
                        exception_tb = NULL;
                        NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
                        CHAIN_EXCEPTION( exception_value );

                        exception_lineno = 1206;
                        type_description_2 = "o";
                        goto frame_exception_exit_7;
                    }

                    tmp_source_name_37 = tmp_mvar_value_18;
                    Py_INCREF( tmp_source_name_37 );
                    }
                }

                tmp_tuple_element_24 = LOOKUP_ATTRIBUTE( tmp_source_name_37, const_str_plain_WAIT_OBJECT_0 );
                Py_DECREF( tmp_source_name_37 );
                if ( tmp_tuple_element_24 == NULL )
                {
                    assert( ERROR_OCCURRED() );

                    FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
                    Py_DECREF( tmp_defaults_9 );

                    exception_lineno = 1206;
                    type_description_2 = "o";
                    goto frame_exception_exit_7;
                }
                PyTuple_SET_ITEM( tmp_defaults_9, 2, tmp_tuple_element_24 );
                tmp_source_name_38 = PyObject_GetItem( locals_subprocess_608, const_str_plain__winapi );

                if ( tmp_source_name_38 == NULL )
                {
                    if ( CHECK_AND_CLEAR_KEY_ERROR_OCCURRED() )
                    {
                    tmp_mvar_value_19 = GET_STRING_DICT_VALUE( moduledict_subprocess, (Nuitka_StringObject *)const_str_plain__winapi );

                    if (unlikely( tmp_mvar_value_19 == NULL ))
                    {
                        tmp_mvar_value_19 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain__winapi );
                    }

                    if ( tmp_mvar_value_19 == NULL )
                    {
                        Py_DECREF( tmp_defaults_9 );
                        exception_type = PyExc_NameError;
                        Py_INCREF( exception_type );
                        exception_value = PyUnicode_FromFormat( "name '%s' is not defined", "_winapi" );
                        exception_tb = NULL;
                        NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
                        CHAIN_EXCEPTION( exception_value );

                        exception_lineno = 1207;
                        type_description_2 = "o";
                        goto frame_exception_exit_7;
                    }

                    tmp_source_name_38 = tmp_mvar_value_19;
                    Py_INCREF( tmp_source_name_38 );
                    }
                }

                tmp_tuple_element_24 = LOOKUP_ATTRIBUTE( tmp_source_name_38, const_str_plain_GetExitCodeProcess );
                Py_DECREF( tmp_source_name_38 );
                if ( tmp_tuple_element_24 == NULL )
                {
                    assert( ERROR_OCCURRED() );

                    FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
                    Py_DECREF( tmp_defaults_9 );

                    exception_lineno = 1207;
                    type_description_2 = "o";
                    goto frame_exception_exit_7;
                }
                PyTuple_SET_ITEM( tmp_defaults_9, 3, tmp_tuple_element_24 );
                tmp_dictset_value = MAKE_FUNCTION_subprocess$$$function_45__internal_poll( tmp_defaults_9 );



                tmp_res = PyObject_SetItem( locals_subprocess_608, const_str_plain__internal_poll, tmp_dictset_value );
                Py_DECREF( tmp_dictset_value );
                if ( tmp_res != 0 )
                {
                    assert( ERROR_OCCURRED() );

                    FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                    exception_lineno = 1204;
                    type_description_2 = "o";
                    goto frame_exception_exit_7;
                }
            }
            tmp_dictset_value = MAKE_FUNCTION_subprocess$$$function_46__wait(  );



            tmp_res = PyObject_SetItem( locals_subprocess_608, const_str_plain__wait, tmp_dictset_value );
            Py_DECREF( tmp_dictset_value );
            if ( tmp_res != 0 )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 1221;
                type_description_2 = "o";
                goto frame_exception_exit_7;
            }
            tmp_dictset_value = MAKE_FUNCTION_subprocess$$$function_47__readerthread(  );



            tmp_res = PyObject_SetItem( locals_subprocess_608, const_str_plain__readerthread, tmp_dictset_value );
            Py_DECREF( tmp_dictset_value );
            if ( tmp_res != 0 )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 1237;
                type_description_2 = "o";
                goto frame_exception_exit_7;
            }
            tmp_dictset_value = MAKE_FUNCTION_subprocess$$$function_48__communicate(  );



            tmp_res = PyObject_SetItem( locals_subprocess_608, const_str_plain__communicate, tmp_dictset_value );
            Py_DECREF( tmp_dictset_value );
            if ( tmp_res != 0 )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 1242;
                type_description_2 = "o";
                goto frame_exception_exit_7;
            }
            tmp_dictset_value = MAKE_FUNCTION_subprocess$$$function_49_send_signal(  );



            tmp_res = PyObject_SetItem( locals_subprocess_608, const_str_plain_send_signal, tmp_dictset_value );
            Py_DECREF( tmp_dictset_value );
            if ( tmp_res != 0 )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 1294;
                type_description_2 = "o";
                goto frame_exception_exit_7;
            }
            tmp_dictset_value = MAKE_FUNCTION_subprocess$$$function_50_terminate(  );



            tmp_res = PyObject_SetItem( locals_subprocess_608, const_str_plain_terminate, tmp_dictset_value );
            Py_DECREF( tmp_dictset_value );
            if ( tmp_res != 0 )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 1308;
                type_description_2 = "o";
                goto frame_exception_exit_7;
            }
            tmp_dictset_value = PyObject_GetItem( locals_subprocess_608, const_str_plain_terminate );

            if ( tmp_dictset_value == NULL && CHECK_AND_CLEAR_KEY_ERROR_OCCURRED() )
            {

                exception_type = PyExc_NameError;
                Py_INCREF( exception_type );
                exception_value = PyUnicode_FromFormat( "name '%s' is not defined", "terminate" );
                exception_tb = NULL;
                NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
                CHAIN_EXCEPTION( exception_value );

                exception_lineno = 1323;
                type_description_2 = "o";
                goto frame_exception_exit_7;
            }

            if ( tmp_dictset_value == NULL )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 1323;
                type_description_2 = "o";
                goto frame_exception_exit_7;
            }
            tmp_res = PyObject_SetItem( locals_subprocess_608, const_str_plain_kill, tmp_dictset_value );
            Py_DECREF( tmp_dictset_value );
            if ( tmp_res != 0 )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 1323;
                type_description_2 = "o";
                goto frame_exception_exit_7;
            }
            goto branch_end_30;
            branch_no_30:;
            tmp_dictset_value = MAKE_FUNCTION_subprocess$$$function_51__get_handles(  );



            tmp_res = PyObject_SetItem( locals_subprocess_608, const_str_plain__get_handles, tmp_dictset_value );
            Py_DECREF( tmp_dictset_value );
            if ( tmp_res != 0 )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 1329;
                type_description_2 = "o";
                goto frame_exception_exit_7;
            }
            tmp_dictset_value = MAKE_FUNCTION_subprocess$$$function_52__execute_child(  );



            tmp_res = PyObject_SetItem( locals_subprocess_608, const_str_plain__execute_child, tmp_dictset_value );
            Py_DECREF( tmp_dictset_value );
            if ( tmp_res != 0 )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 1383;
                type_description_2 = "o";
                goto frame_exception_exit_7;
            }
            {
                PyObject *tmp_defaults_10;
                PyObject *tmp_tuple_element_25;
                PyObject *tmp_source_name_39;
                PyObject *tmp_mvar_value_20;
                PyObject *tmp_source_name_40;
                PyObject *tmp_mvar_value_21;
                PyObject *tmp_source_name_41;
                PyObject *tmp_mvar_value_22;
                PyObject *tmp_source_name_42;
                PyObject *tmp_mvar_value_23;
                PyObject *tmp_source_name_43;
                PyObject *tmp_mvar_value_24;
                PyObject *tmp_source_name_44;
                PyObject *tmp_mvar_value_25;
                tmp_source_name_39 = PyObject_GetItem( locals_subprocess_608, const_str_plain_os );

                if ( tmp_source_name_39 == NULL )
                {
                    if ( CHECK_AND_CLEAR_KEY_ERROR_OCCURRED() )
                    {
                    tmp_mvar_value_20 = GET_STRING_DICT_VALUE( moduledict_subprocess, (Nuitka_StringObject *)const_str_plain_os );

                    if (unlikely( tmp_mvar_value_20 == NULL ))
                    {
                        tmp_mvar_value_20 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_os );
                    }

                    if ( tmp_mvar_value_20 == NULL )
                    {

                        exception_type = PyExc_NameError;
                        Py_INCREF( exception_type );
                        exception_value = PyUnicode_FromFormat( "name '%s' is not defined", "os" );
                        exception_tb = NULL;
                        NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
                        CHAIN_EXCEPTION( exception_value );

                        exception_lineno = 1526;
                        type_description_2 = "o";
                        goto frame_exception_exit_7;
                    }

                    tmp_source_name_39 = tmp_mvar_value_20;
                    Py_INCREF( tmp_source_name_39 );
                    }
                }

                tmp_tuple_element_25 = LOOKUP_ATTRIBUTE( tmp_source_name_39, const_str_plain_WIFSIGNALED );
                Py_DECREF( tmp_source_name_39 );
                if ( tmp_tuple_element_25 == NULL )
                {
                    assert( ERROR_OCCURRED() );

                    FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                    exception_lineno = 1526;
                    type_description_2 = "o";
                    goto frame_exception_exit_7;
                }
                tmp_defaults_10 = PyTuple_New( 6 );
                PyTuple_SET_ITEM( tmp_defaults_10, 0, tmp_tuple_element_25 );
                tmp_source_name_40 = PyObject_GetItem( locals_subprocess_608, const_str_plain_os );

                if ( tmp_source_name_40 == NULL )
                {
                    if ( CHECK_AND_CLEAR_KEY_ERROR_OCCURRED() )
                    {
                    tmp_mvar_value_21 = GET_STRING_DICT_VALUE( moduledict_subprocess, (Nuitka_StringObject *)const_str_plain_os );

                    if (unlikely( tmp_mvar_value_21 == NULL ))
                    {
                        tmp_mvar_value_21 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_os );
                    }

                    if ( tmp_mvar_value_21 == NULL )
                    {
                        Py_DECREF( tmp_defaults_10 );
                        exception_type = PyExc_NameError;
                        Py_INCREF( exception_type );
                        exception_value = PyUnicode_FromFormat( "name '%s' is not defined", "os" );
                        exception_tb = NULL;
                        NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
                        CHAIN_EXCEPTION( exception_value );

                        exception_lineno = 1527;
                        type_description_2 = "o";
                        goto frame_exception_exit_7;
                    }

                    tmp_source_name_40 = tmp_mvar_value_21;
                    Py_INCREF( tmp_source_name_40 );
                    }
                }

                tmp_tuple_element_25 = LOOKUP_ATTRIBUTE( tmp_source_name_40, const_str_plain_WTERMSIG );
                Py_DECREF( tmp_source_name_40 );
                if ( tmp_tuple_element_25 == NULL )
                {
                    assert( ERROR_OCCURRED() );

                    FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
                    Py_DECREF( tmp_defaults_10 );

                    exception_lineno = 1527;
                    type_description_2 = "o";
                    goto frame_exception_exit_7;
                }
                PyTuple_SET_ITEM( tmp_defaults_10, 1, tmp_tuple_element_25 );
                tmp_source_name_41 = PyObject_GetItem( locals_subprocess_608, const_str_plain_os );

                if ( tmp_source_name_41 == NULL )
                {
                    if ( CHECK_AND_CLEAR_KEY_ERROR_OCCURRED() )
                    {
                    tmp_mvar_value_22 = GET_STRING_DICT_VALUE( moduledict_subprocess, (Nuitka_StringObject *)const_str_plain_os );

                    if (unlikely( tmp_mvar_value_22 == NULL ))
                    {
                        tmp_mvar_value_22 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_os );
                    }

                    if ( tmp_mvar_value_22 == NULL )
                    {
                        Py_DECREF( tmp_defaults_10 );
                        exception_type = PyExc_NameError;
                        Py_INCREF( exception_type );
                        exception_value = PyUnicode_FromFormat( "name '%s' is not defined", "os" );
                        exception_tb = NULL;
                        NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
                        CHAIN_EXCEPTION( exception_value );

                        exception_lineno = 1527;
                        type_description_2 = "o";
                        goto frame_exception_exit_7;
                    }

                    tmp_source_name_41 = tmp_mvar_value_22;
                    Py_INCREF( tmp_source_name_41 );
                    }
                }

                tmp_tuple_element_25 = LOOKUP_ATTRIBUTE( tmp_source_name_41, const_str_plain_WIFEXITED );
                Py_DECREF( tmp_source_name_41 );
                if ( tmp_tuple_element_25 == NULL )
                {
                    assert( ERROR_OCCURRED() );

                    FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
                    Py_DECREF( tmp_defaults_10 );

                    exception_lineno = 1527;
                    type_description_2 = "o";
                    goto frame_exception_exit_7;
                }
                PyTuple_SET_ITEM( tmp_defaults_10, 2, tmp_tuple_element_25 );
                tmp_source_name_42 = PyObject_GetItem( locals_subprocess_608, const_str_plain_os );

                if ( tmp_source_name_42 == NULL )
                {
                    if ( CHECK_AND_CLEAR_KEY_ERROR_OCCURRED() )
                    {
                    tmp_mvar_value_23 = GET_STRING_DICT_VALUE( moduledict_subprocess, (Nuitka_StringObject *)const_str_plain_os );

                    if (unlikely( tmp_mvar_value_23 == NULL ))
                    {
                        tmp_mvar_value_23 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_os );
                    }

                    if ( tmp_mvar_value_23 == NULL )
                    {
                        Py_DECREF( tmp_defaults_10 );
                        exception_type = PyExc_NameError;
                        Py_INCREF( exception_type );
                        exception_value = PyUnicode_FromFormat( "name '%s' is not defined", "os" );
                        exception_tb = NULL;
                        NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
                        CHAIN_EXCEPTION( exception_value );

                        exception_lineno = 1528;
                        type_description_2 = "o";
                        goto frame_exception_exit_7;
                    }

                    tmp_source_name_42 = tmp_mvar_value_23;
                    Py_INCREF( tmp_source_name_42 );
                    }
                }

                tmp_tuple_element_25 = LOOKUP_ATTRIBUTE( tmp_source_name_42, const_str_plain_WEXITSTATUS );
                Py_DECREF( tmp_source_name_42 );
                if ( tmp_tuple_element_25 == NULL )
                {
                    assert( ERROR_OCCURRED() );

                    FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
                    Py_DECREF( tmp_defaults_10 );

                    exception_lineno = 1528;
                    type_description_2 = "o";
                    goto frame_exception_exit_7;
                }
                PyTuple_SET_ITEM( tmp_defaults_10, 3, tmp_tuple_element_25 );
                tmp_source_name_43 = PyObject_GetItem( locals_subprocess_608, const_str_plain_os );

                if ( tmp_source_name_43 == NULL )
                {
                    if ( CHECK_AND_CLEAR_KEY_ERROR_OCCURRED() )
                    {
                    tmp_mvar_value_24 = GET_STRING_DICT_VALUE( moduledict_subprocess, (Nuitka_StringObject *)const_str_plain_os );

                    if (unlikely( tmp_mvar_value_24 == NULL ))
                    {
                        tmp_mvar_value_24 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_os );
                    }

                    if ( tmp_mvar_value_24 == NULL )
                    {
                        Py_DECREF( tmp_defaults_10 );
                        exception_type = PyExc_NameError;
                        Py_INCREF( exception_type );
                        exception_value = PyUnicode_FromFormat( "name '%s' is not defined", "os" );
                        exception_tb = NULL;
                        NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
                        CHAIN_EXCEPTION( exception_value );

                        exception_lineno = 1528;
                        type_description_2 = "o";
                        goto frame_exception_exit_7;
                    }

                    tmp_source_name_43 = tmp_mvar_value_24;
                    Py_INCREF( tmp_source_name_43 );
                    }
                }

                tmp_tuple_element_25 = LOOKUP_ATTRIBUTE( tmp_source_name_43, const_str_plain_WIFSTOPPED );
                Py_DECREF( tmp_source_name_43 );
                if ( tmp_tuple_element_25 == NULL )
                {
                    assert( ERROR_OCCURRED() );

                    FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
                    Py_DECREF( tmp_defaults_10 );

                    exception_lineno = 1528;
                    type_description_2 = "o";
                    goto frame_exception_exit_7;
                }
                PyTuple_SET_ITEM( tmp_defaults_10, 4, tmp_tuple_element_25 );
                tmp_source_name_44 = PyObject_GetItem( locals_subprocess_608, const_str_plain_os );

                if ( tmp_source_name_44 == NULL )
                {
                    if ( CHECK_AND_CLEAR_KEY_ERROR_OCCURRED() )
                    {
                    tmp_mvar_value_25 = GET_STRING_DICT_VALUE( moduledict_subprocess, (Nuitka_StringObject *)const_str_plain_os );

                    if (unlikely( tmp_mvar_value_25 == NULL ))
                    {
                        tmp_mvar_value_25 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_os );
                    }

                    if ( tmp_mvar_value_25 == NULL )
                    {
                        Py_DECREF( tmp_defaults_10 );
                        exception_type = PyExc_NameError;
                        Py_INCREF( exception_type );
                        exception_value = PyUnicode_FromFormat( "name '%s' is not defined", "os" );
                        exception_tb = NULL;
                        NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
                        CHAIN_EXCEPTION( exception_value );

                        exception_lineno = 1529;
                        type_description_2 = "o";
                        goto frame_exception_exit_7;
                    }

                    tmp_source_name_44 = tmp_mvar_value_25;
                    Py_INCREF( tmp_source_name_44 );
                    }
                }

                tmp_tuple_element_25 = LOOKUP_ATTRIBUTE( tmp_source_name_44, const_str_plain_WSTOPSIG );
                Py_DECREF( tmp_source_name_44 );
                if ( tmp_tuple_element_25 == NULL )
                {
                    assert( ERROR_OCCURRED() );

                    FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
                    Py_DECREF( tmp_defaults_10 );

                    exception_lineno = 1529;
                    type_description_2 = "o";
                    goto frame_exception_exit_7;
                }
                PyTuple_SET_ITEM( tmp_defaults_10, 5, tmp_tuple_element_25 );
                tmp_dictset_value = MAKE_FUNCTION_subprocess$$$function_53__handle_exitstatus( tmp_defaults_10 );



                tmp_res = PyObject_SetItem( locals_subprocess_608, const_str_plain__handle_exitstatus, tmp_dictset_value );
                Py_DECREF( tmp_dictset_value );
                if ( tmp_res != 0 )
                {
                    assert( ERROR_OCCURRED() );

                    FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                    exception_lineno = 1526;
                    type_description_2 = "o";
                    goto frame_exception_exit_7;
                }
            }
            {
                PyObject *tmp_defaults_11;
                PyObject *tmp_tuple_element_26;
                PyObject *tmp_source_name_45;
                PyObject *tmp_mvar_value_26;
                PyObject *tmp_source_name_46;
                PyObject *tmp_mvar_value_27;
                PyObject *tmp_source_name_47;
                PyObject *tmp_mvar_value_28;
                tmp_tuple_element_26 = Py_None;
                tmp_defaults_11 = PyTuple_New( 4 );
                Py_INCREF( tmp_tuple_element_26 );
                PyTuple_SET_ITEM( tmp_defaults_11, 0, tmp_tuple_element_26 );
                tmp_source_name_45 = PyObject_GetItem( locals_subprocess_608, const_str_plain_os );

                if ( tmp_source_name_45 == NULL )
                {
                    if ( CHECK_AND_CLEAR_KEY_ERROR_OCCURRED() )
                    {
                    tmp_mvar_value_26 = GET_STRING_DICT_VALUE( moduledict_subprocess, (Nuitka_StringObject *)const_str_plain_os );

                    if (unlikely( tmp_mvar_value_26 == NULL ))
                    {
                        tmp_mvar_value_26 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_os );
                    }

                    if ( tmp_mvar_value_26 == NULL )
                    {
                        Py_DECREF( tmp_defaults_11 );
                        exception_type = PyExc_NameError;
                        Py_INCREF( exception_type );
                        exception_value = PyUnicode_FromFormat( "name '%s' is not defined", "os" );
                        exception_tb = NULL;
                        NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
                        CHAIN_EXCEPTION( exception_value );

                        exception_lineno = 1544;
                        type_description_2 = "o";
                        goto frame_exception_exit_7;
                    }

                    tmp_source_name_45 = tmp_mvar_value_26;
                    Py_INCREF( tmp_source_name_45 );
                    }
                }

                tmp_tuple_element_26 = LOOKUP_ATTRIBUTE( tmp_source_name_45, const_str_plain_waitpid );
                Py_DECREF( tmp_source_name_45 );
                if ( tmp_tuple_element_26 == NULL )
                {
                    assert( ERROR_OCCURRED() );

                    FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
                    Py_DECREF( tmp_defaults_11 );

                    exception_lineno = 1544;
                    type_description_2 = "o";
                    goto frame_exception_exit_7;
                }
                PyTuple_SET_ITEM( tmp_defaults_11, 1, tmp_tuple_element_26 );
                tmp_source_name_46 = PyObject_GetItem( locals_subprocess_608, const_str_plain_os );

                if ( tmp_source_name_46 == NULL )
                {
                    if ( CHECK_AND_CLEAR_KEY_ERROR_OCCURRED() )
                    {
                    tmp_mvar_value_27 = GET_STRING_DICT_VALUE( moduledict_subprocess, (Nuitka_StringObject *)const_str_plain_os );

                    if (unlikely( tmp_mvar_value_27 == NULL ))
                    {
                        tmp_mvar_value_27 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_os );
                    }

                    if ( tmp_mvar_value_27 == NULL )
                    {
                        Py_DECREF( tmp_defaults_11 );
                        exception_type = PyExc_NameError;
                        Py_INCREF( exception_type );
                        exception_value = PyUnicode_FromFormat( "name '%s' is not defined", "os" );
                        exception_tb = NULL;
                        NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
                        CHAIN_EXCEPTION( exception_value );

                        exception_lineno = 1545;
                        type_description_2 = "o";
                        goto frame_exception_exit_7;
                    }

                    tmp_source_name_46 = tmp_mvar_value_27;
                    Py_INCREF( tmp_source_name_46 );
                    }
                }

                tmp_tuple_element_26 = LOOKUP_ATTRIBUTE( tmp_source_name_46, const_str_plain_WNOHANG );
                Py_DECREF( tmp_source_name_46 );
                if ( tmp_tuple_element_26 == NULL )
                {
                    assert( ERROR_OCCURRED() );

                    FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
                    Py_DECREF( tmp_defaults_11 );

                    exception_lineno = 1545;
                    type_description_2 = "o";
                    goto frame_exception_exit_7;
                }
                PyTuple_SET_ITEM( tmp_defaults_11, 2, tmp_tuple_element_26 );
                tmp_source_name_47 = PyObject_GetItem( locals_subprocess_608, const_str_plain_errno );

                if ( tmp_source_name_47 == NULL )
                {
                    if ( CHECK_AND_CLEAR_KEY_ERROR_OCCURRED() )
                    {
                    tmp_mvar_value_28 = GET_STRING_DICT_VALUE( moduledict_subprocess, (Nuitka_StringObject *)const_str_plain_errno );

                    if (unlikely( tmp_mvar_value_28 == NULL ))
                    {
                        tmp_mvar_value_28 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_errno );
                    }

                    if ( tmp_mvar_value_28 == NULL )
                    {
                        Py_DECREF( tmp_defaults_11 );
                        exception_type = PyExc_NameError;
                        Py_INCREF( exception_type );
                        exception_value = PyUnicode_FromFormat( "name '%s' is not defined", "errno" );
                        exception_tb = NULL;
                        NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
                        CHAIN_EXCEPTION( exception_value );

                        exception_lineno = 1545;
                        type_description_2 = "o";
                        goto frame_exception_exit_7;
                    }

                    tmp_source_name_47 = tmp_mvar_value_28;
                    Py_INCREF( tmp_source_name_47 );
                    }
                }

                tmp_tuple_element_26 = LOOKUP_ATTRIBUTE( tmp_source_name_47, const_str_plain_ECHILD );
                Py_DECREF( tmp_source_name_47 );
                if ( tmp_tuple_element_26 == NULL )
                {
                    assert( ERROR_OCCURRED() );

                    FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
                    Py_DECREF( tmp_defaults_11 );

                    exception_lineno = 1545;
                    type_description_2 = "o";
                    goto frame_exception_exit_7;
                }
                PyTuple_SET_ITEM( tmp_defaults_11, 3, tmp_tuple_element_26 );
                tmp_dictset_value = MAKE_FUNCTION_subprocess$$$function_54__internal_poll( tmp_defaults_11 );



                tmp_res = PyObject_SetItem( locals_subprocess_608, const_str_plain__internal_poll, tmp_dictset_value );
                Py_DECREF( tmp_dictset_value );
                if ( tmp_res != 0 )
                {
                    assert( ERROR_OCCURRED() );

                    FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                    exception_lineno = 1544;
                    type_description_2 = "o";
                    goto frame_exception_exit_7;
                }
            }
            tmp_dictset_value = MAKE_FUNCTION_subprocess$$$function_55__try_wait(  );



            tmp_res = PyObject_SetItem( locals_subprocess_608, const_str_plain__try_wait, tmp_dictset_value );
            Py_DECREF( tmp_dictset_value );
            if ( tmp_res != 0 )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 1579;
                type_description_2 = "o";
                goto frame_exception_exit_7;
            }
            tmp_dictset_value = MAKE_FUNCTION_subprocess$$$function_56__wait(  );



            tmp_res = PyObject_SetItem( locals_subprocess_608, const_str_plain__wait, tmp_dictset_value );
            Py_DECREF( tmp_dictset_value );
            if ( tmp_res != 0 )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 1592;
                type_description_2 = "o";
                goto frame_exception_exit_7;
            }
            tmp_dictset_value = MAKE_FUNCTION_subprocess$$$function_57__communicate(  );



            tmp_res = PyObject_SetItem( locals_subprocess_608, const_str_plain__communicate, tmp_dictset_value );
            Py_DECREF( tmp_dictset_value );
            if ( tmp_res != 0 )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 1633;
                type_description_2 = "o";
                goto frame_exception_exit_7;
            }
            tmp_dictset_value = MAKE_FUNCTION_subprocess$$$function_58__save_input(  );



            tmp_res = PyObject_SetItem( locals_subprocess_608, const_str_plain__save_input, tmp_dictset_value );
            Py_DECREF( tmp_dictset_value );
            if ( tmp_res != 0 )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 1730;
                type_description_2 = "o";
                goto frame_exception_exit_7;
            }
            tmp_dictset_value = MAKE_FUNCTION_subprocess$$$function_59_send_signal(  );



            tmp_res = PyObject_SetItem( locals_subprocess_608, const_str_plain_send_signal, tmp_dictset_value );
            Py_DECREF( tmp_dictset_value );
            if ( tmp_res != 0 )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 1742;
                type_description_2 = "o";
                goto frame_exception_exit_7;
            }
            tmp_dictset_value = MAKE_FUNCTION_subprocess$$$function_60_terminate(  );



            tmp_res = PyObject_SetItem( locals_subprocess_608, const_str_plain_terminate, tmp_dictset_value );
            Py_DECREF( tmp_dictset_value );
            if ( tmp_res != 0 )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 1748;
                type_description_2 = "o";
                goto frame_exception_exit_7;
            }
            tmp_dictset_value = MAKE_FUNCTION_subprocess$$$function_61_kill(  );



            tmp_res = PyObject_SetItem( locals_subprocess_608, const_str_plain_kill, tmp_dictset_value );
            Py_DECREF( tmp_dictset_value );
            if ( tmp_res != 0 )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 1753;
                type_description_2 = "o";
                goto frame_exception_exit_7;
            }
            branch_end_30:;
        }

#if 0
        RESTORE_FRAME_EXCEPTION( frame_175fb9997171de0186ab4a7d7aec4913_7 );
#endif

        // Put the previous frame back on top.
        popFrameStack();

        goto frame_no_exception_6;

        frame_exception_exit_7:;

#if 0
        RESTORE_FRAME_EXCEPTION( frame_175fb9997171de0186ab4a7d7aec4913_7 );
#endif

        if ( exception_tb == NULL )
        {
            exception_tb = MAKE_TRACEBACK( frame_175fb9997171de0186ab4a7d7aec4913_7, exception_lineno );
        }
        else if ( exception_tb->tb_frame != &frame_175fb9997171de0186ab4a7d7aec4913_7->m_frame )
        {
            exception_tb = ADD_TRACEBACK( exception_tb, frame_175fb9997171de0186ab4a7d7aec4913_7, exception_lineno );
        }

        // Attachs locals to frame if any.
        Nuitka_Frame_AttachLocals(
            (struct Nuitka_FrameObject *)frame_175fb9997171de0186ab4a7d7aec4913_7,
            type_description_2,
            outline_6_var___class__
        );


        // Release cached frame.
        if ( frame_175fb9997171de0186ab4a7d7aec4913_7 == cache_frame_175fb9997171de0186ab4a7d7aec4913_7 )
        {
            Py_DECREF( frame_175fb9997171de0186ab4a7d7aec4913_7 );
        }
        cache_frame_175fb9997171de0186ab4a7d7aec4913_7 = NULL;

        assertFrameObject( frame_175fb9997171de0186ab4a7d7aec4913_7 );

        // Put the previous frame back on top.
        popFrameStack();

        // Return the error.
        goto nested_frame_exit_6;

        frame_no_exception_6:;
        goto skip_nested_handling_6;
        nested_frame_exit_6:;

        goto try_except_handler_21;
        skip_nested_handling_6:;
        {
            nuitka_bool tmp_condition_result_47;
            PyObject *tmp_compexpr_left_7;
            PyObject *tmp_compexpr_right_7;
            CHECK_OBJECT( tmp_class_creation_7__bases );
            tmp_compexpr_left_7 = tmp_class_creation_7__bases;
            tmp_compexpr_right_7 = const_tuple_type_object_tuple;
            tmp_res = RICH_COMPARE_BOOL_NOTEQ_OBJECT_OBJECT( tmp_compexpr_left_7, tmp_compexpr_right_7 );
            if ( tmp_res == -1 )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 608;

                goto try_except_handler_21;
            }
            tmp_condition_result_47 = ( tmp_res != 0 ) ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
            if ( tmp_condition_result_47 == NUITKA_BOOL_TRUE )
            {
                goto branch_yes_31;
            }
            else
            {
                goto branch_no_31;
            }
            branch_yes_31:;
            tmp_dictset_value = const_tuple_type_object_tuple;
            tmp_res = PyObject_SetItem( locals_subprocess_608, const_str_plain___orig_bases__, tmp_dictset_value );
            if ( tmp_res != 0 )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 608;

                goto try_except_handler_21;
            }
            branch_no_31:;
        }
        {
            PyObject *tmp_assign_source_107;
            PyObject *tmp_called_name_20;
            PyObject *tmp_args_name_14;
            PyObject *tmp_tuple_element_27;
            PyObject *tmp_kw_name_14;
            CHECK_OBJECT( tmp_class_creation_7__metaclass );
            tmp_called_name_20 = tmp_class_creation_7__metaclass;
            tmp_tuple_element_27 = const_str_plain_Popen;
            tmp_args_name_14 = PyTuple_New( 3 );
            Py_INCREF( tmp_tuple_element_27 );
            PyTuple_SET_ITEM( tmp_args_name_14, 0, tmp_tuple_element_27 );
            CHECK_OBJECT( tmp_class_creation_7__bases );
            tmp_tuple_element_27 = tmp_class_creation_7__bases;
            Py_INCREF( tmp_tuple_element_27 );
            PyTuple_SET_ITEM( tmp_args_name_14, 1, tmp_tuple_element_27 );
            tmp_tuple_element_27 = locals_subprocess_608;
            Py_INCREF( tmp_tuple_element_27 );
            PyTuple_SET_ITEM( tmp_args_name_14, 2, tmp_tuple_element_27 );
            CHECK_OBJECT( tmp_class_creation_7__class_decl_dict );
            tmp_kw_name_14 = tmp_class_creation_7__class_decl_dict;
            frame_3b8ded27a474e748966db3dc93ed4330->m_frame.f_lineno = 608;
            tmp_assign_source_107 = CALL_FUNCTION( tmp_called_name_20, tmp_args_name_14, tmp_kw_name_14 );
            Py_DECREF( tmp_args_name_14 );
            if ( tmp_assign_source_107 == NULL )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 608;

                goto try_except_handler_21;
            }
            assert( outline_6_var___class__ == NULL );
            outline_6_var___class__ = tmp_assign_source_107;
        }
        CHECK_OBJECT( outline_6_var___class__ );
        tmp_assign_source_106 = outline_6_var___class__;
        Py_INCREF( tmp_assign_source_106 );
        goto try_return_handler_21;
        // tried codes exits in all cases
        NUITKA_CANNOT_GET_HERE( subprocess );
        return MOD_RETURN_VALUE( NULL );
        // Return handler code:
        try_return_handler_21:;
        Py_DECREF( locals_subprocess_608 );
        locals_subprocess_608 = NULL;
        goto try_return_handler_20;
        // Exception handler code:
        try_except_handler_21:;
        exception_keeper_type_19 = exception_type;
        exception_keeper_value_19 = exception_value;
        exception_keeper_tb_19 = exception_tb;
        exception_keeper_lineno_19 = exception_lineno;
        exception_type = NULL;
        exception_value = NULL;
        exception_tb = NULL;
        exception_lineno = 0;

        Py_DECREF( locals_subprocess_608 );
        locals_subprocess_608 = NULL;
        // Re-raise.
        exception_type = exception_keeper_type_19;
        exception_value = exception_keeper_value_19;
        exception_tb = exception_keeper_tb_19;
        exception_lineno = exception_keeper_lineno_19;

        goto try_except_handler_20;
        // End of try:
        // tried codes exits in all cases
        NUITKA_CANNOT_GET_HERE( subprocess );
        return MOD_RETURN_VALUE( NULL );
        // Return handler code:
        try_return_handler_20:;
        CHECK_OBJECT( (PyObject *)outline_6_var___class__ );
        Py_DECREF( outline_6_var___class__ );
        outline_6_var___class__ = NULL;

        goto outline_result_7;
        // Exception handler code:
        try_except_handler_20:;
        exception_keeper_type_20 = exception_type;
        exception_keeper_value_20 = exception_value;
        exception_keeper_tb_20 = exception_tb;
        exception_keeper_lineno_20 = exception_lineno;
        exception_type = NULL;
        exception_value = NULL;
        exception_tb = NULL;
        exception_lineno = 0;

        // Re-raise.
        exception_type = exception_keeper_type_20;
        exception_value = exception_keeper_value_20;
        exception_tb = exception_keeper_tb_20;
        exception_lineno = exception_keeper_lineno_20;

        goto outline_exception_7;
        // End of try:
        // Return statement must have exited already.
        NUITKA_CANNOT_GET_HERE( subprocess );
        return MOD_RETURN_VALUE( NULL );
        outline_exception_7:;
        exception_lineno = 608;
        goto try_except_handler_19;
        outline_result_7:;
        UPDATE_STRING_DICT1( moduledict_subprocess, (Nuitka_StringObject *)const_str_plain_Popen, tmp_assign_source_106 );
    }
    goto try_end_7;
    // Exception handler code:
    try_except_handler_19:;
    exception_keeper_type_21 = exception_type;
    exception_keeper_value_21 = exception_value;
    exception_keeper_tb_21 = exception_tb;
    exception_keeper_lineno_21 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    Py_XDECREF( tmp_class_creation_7__bases );
    tmp_class_creation_7__bases = NULL;

    Py_XDECREF( tmp_class_creation_7__class_decl_dict );
    tmp_class_creation_7__class_decl_dict = NULL;

    Py_XDECREF( tmp_class_creation_7__metaclass );
    tmp_class_creation_7__metaclass = NULL;

    Py_XDECREF( tmp_class_creation_7__prepared );
    tmp_class_creation_7__prepared = NULL;

    // Re-raise.
    exception_type = exception_keeper_type_21;
    exception_value = exception_keeper_value_21;
    exception_tb = exception_keeper_tb_21;
    exception_lineno = exception_keeper_lineno_21;

    goto frame_exception_exit_1;
    // End of try:
    try_end_7:;

    // Restore frame exception if necessary.
#if 0
    RESTORE_FRAME_EXCEPTION( frame_3b8ded27a474e748966db3dc93ed4330 );
#endif
    popFrameStack();

    assertFrameObject( frame_3b8ded27a474e748966db3dc93ed4330 );

    goto frame_no_exception_7;

    frame_exception_exit_1:;
#if 0
    RESTORE_FRAME_EXCEPTION( frame_3b8ded27a474e748966db3dc93ed4330 );
#endif

    if ( exception_tb == NULL )
    {
        exception_tb = MAKE_TRACEBACK( frame_3b8ded27a474e748966db3dc93ed4330, exception_lineno );
    }
    else if ( exception_tb->tb_frame != &frame_3b8ded27a474e748966db3dc93ed4330->m_frame )
    {
        exception_tb = ADD_TRACEBACK( exception_tb, frame_3b8ded27a474e748966db3dc93ed4330, exception_lineno );
    }

    // Put the previous frame back on top.
    popFrameStack();

    // Return the error.
    goto module_exception_exit;

    frame_no_exception_7:;
    CHECK_OBJECT( (PyObject *)tmp_class_creation_7__bases );
    Py_DECREF( tmp_class_creation_7__bases );
    tmp_class_creation_7__bases = NULL;

    CHECK_OBJECT( (PyObject *)tmp_class_creation_7__class_decl_dict );
    Py_DECREF( tmp_class_creation_7__class_decl_dict );
    tmp_class_creation_7__class_decl_dict = NULL;

    CHECK_OBJECT( (PyObject *)tmp_class_creation_7__metaclass );
    Py_DECREF( tmp_class_creation_7__metaclass );
    tmp_class_creation_7__metaclass = NULL;

    CHECK_OBJECT( (PyObject *)tmp_class_creation_7__prepared );
    Py_DECREF( tmp_class_creation_7__prepared );
    tmp_class_creation_7__prepared = NULL;


#if _NUITKA_EXPERIMENTAL_PKGUTIL_ITERMODULES
#if 0 && 0
    {
        PyObject *path_value = GET_STRING_DICT_VALUE( moduledict_subprocess, (Nuitka_StringObject *)const_str_plain___path__ );

        if (path_value && PyList_CheckExact(path_value) && PyList_Size(path_value) > 0)
        {
            PyObject *path_element = PyList_GetItem( path_value, 0 );

            PyObject *path_importer_cache = PySys_GetObject((char *)"path_importer_cache");
            CHECK_OBJECT( path_importer_cache );

            int res = PyDict_SetItem( path_importer_cache, path_element, (PyObject *)&Nuitka_Loader_Type );
            assert( res == 0 );
        }
    }
#endif
#endif

    return MOD_RETURN_VALUE( module_subprocess );
    module_exception_exit:
    RESTORE_ERROR_OCCURRED( exception_type, exception_value, exception_tb );
    return MOD_RETURN_VALUE( NULL );
}
