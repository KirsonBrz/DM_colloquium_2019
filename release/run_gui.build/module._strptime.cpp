/* Generated code for Python module '_strptime'
 * created by Nuitka version 0.6.2
 *
 * This code is in part copyright 2019 Kay Hayen.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

#include "nuitka/prelude.h"

#include "__helpers.h"

/* The "_module__strptime" is a Python object pointer of module type.
 *
 * Note: For full compatibility with CPython, every module variable access
 * needs to go through it except for cases where the module cannot possibly
 * have changed in the mean time.
 */

PyObject *module__strptime;
PyDictObject *moduledict__strptime;

/* The declarations of module constants used, if any. */
extern PyObject *const_int_pos_12;
static PyObject *const_str_plain__LocaleTime__pad;
static PyObject *const_tuple_str_digest_5adc0e3d875a5ff48f1e38880ecc9bce_tuple;
extern PyObject *const_str_plain___spec__;
extern PyObject *const_str_plain_dict;
extern PyObject *const_str_plain___name__;
static PyObject *const_str_plain_whitespace_replacement;
extern PyObject *const_str_plain_sorted;
extern PyObject *const_str_plain_locale;
extern PyObject *const_int_pos_22;
extern PyObject *const_str_plain_i;
extern PyObject *const_str_plain_object;
static PyObject *const_int_pos_55;
static PyObject *const_str_digest_f48ab9da326247418c919b7675ccc719;
extern PyObject *const_str_plain_daylight;
static PyObject *const_slice_int_pos_8_none_none;
static PyObject *const_str_digest_b18d4ed10eb19ebc287a599231b0ef06;
extern PyObject *const_str_plain_microseconds;
static PyObject *const_str_plain___calc_timezone;
extern PyObject *const_str_digest_502a96b8b32621f9b74f46be611a07df;
static PyObject *const_str_plain__LocaleTime__calc_weekday;
extern PyObject *const_str_plain_hour;
extern PyObject *const_str_plain_m;
static PyObject *const_str_plain_76;
extern PyObject *const_str_plain_end;
extern PyObject *const_str_plain_None;
extern PyObject *const_str_plain_toordinal;
static PyObject *const_str_digest_135af06a4607ec91acf95b5a457cca04;
extern PyObject *const_int_pos_5;
static PyObject *const_str_digest_bcf4f77f232344278a1e35c533afe592;
static PyObject *const_str_plain_days_to_week;
static PyObject *const_str_plain_LC_date_time;
static PyObject *const_str_plain_Y;
extern PyObject *const_tuple_none_none_none_tuple;
static PyObject *const_str_digest_e090d6e90dec24a868d5c6640787c5a5;
extern PyObject *const_str_plain___debug__;
extern PyObject *const_str_plain_time;
static PyObject *const_str_plain_locale_time;
extern PyObject *const_str_angle_genexpr;
extern PyObject *const_str_plain_str;
extern PyObject *const_str_plain_j;
static PyObject *const_str_plain_LC_date;
static PyObject *const_xrange_0_13;
extern PyObject *const_str_plain_Z;
extern PyObject *const_int_neg_2;
extern PyObject *const_str_chr_45;
extern PyObject *const_int_pos_68;
extern PyObject *const_str_plain_seconds;
static PyObject *const_tuple_str_plain_Z_tuple;
extern PyObject *const_int_pos_8;
static PyObject *const_int_pos_1904;
extern PyObject *const_str_plain_calendar;
static PyObject *const_tuple_int_pos_2_str_digest_602784fc5f474284dba606745fdc9a6e_tuple;
static PyObject *const_str_digest_8b225a8ee7e5283a9f3dc53601795e6c;
static PyObject *const_tuple_str_plain_p_str_empty_tuple;
static PyObject *const_str_plain_iso_week;
extern PyObject *const_str_plain__strptime;
extern PyObject *const_str_plain_regex;
extern PyObject *const_str_plain_False;
extern PyObject *const_slice_none_int_pos_6_none;
static PyObject *const_str_digest_27b466477e824207e30ceead501d4dc3;
extern PyObject *const_int_0;
static PyObject *const_tuple_tuple_cc60455df3a4404f39dbb99f7aea2b5f_tuple_tuple;
extern PyObject *const_str_plain_B;
static PyObject *const_str_plain_regex_chars;
static PyObject *const_str_plain_LocaleTime;
static PyObject *const_tuple_3f6db087114f1a120175750ee1b33a74_tuple;
static PyObject *const_tuple_8deb1d4bed8d67fb14e0230ad27a2e2a_tuple;
extern PyObject *const_str_plain_year;
extern PyObject *const_int_pos_4;
static PyObject *const_str_plain_iso_year;
static PyObject *const_str_digest_42020f17c41fc459d60e7300e3b00c9f;
static PyObject *const_str_plain_re_compile;
extern PyObject *const_str_plain_struct_time;
extern PyObject *const_str_plain_type;
extern PyObject *const_tuple_str_chr_37_str_digest_14d760694ac12dfa4c72b22a180ebfa1_tuple;
static PyObject *const_str_plain___pad;
static PyObject *const_str_digest_0dd41777202cf18fda33aa3b03231172;
extern PyObject *const_str_plain___cached__;
extern PyObject *const_str_chr_124;
extern PyObject *const_tuple_none_tuple;
extern PyObject *const_str_digest_796413f1c221747c0f6e6dee10cbaa30;
static PyObject *const_str_digest_613642195e4070a6a4e08d5e22cabe18;
extern PyObject *const_int_pos_1;
extern PyObject *const_str_plain_replace;
static PyObject *const_tuple_str_digest_2717a74e8094c62311bf53472f4de0ca_tuple;
static PyObject *const_slice_int_pos_6_none_none;
extern PyObject *const_str_plain___prepare__;
extern PyObject *const_int_pos_2000;
extern PyObject *const_int_pos_365;
extern PyObject *const_str_plain_month_abbr;
extern PyObject *const_str_plain_utc;
extern PyObject *const_str_plain_A;
static PyObject *const_str_plain__LocaleTime__calc_timezone;
extern PyObject *const_str_plain_format;
extern PyObject *const_str_plain_startswith;
extern PyObject *const_str_plain_U;
extern PyObject *const_str_plain_index;
static PyObject *const_str_plain___calc_month;
extern PyObject *const_str_plain_month_name;
extern PyObject *const_str_plain__thread;
extern PyObject *const_str_plain_timedelta;
extern PyObject *const_slice_int_neg_2_none_none;
static PyObject *const_tuple_str_digest_b9c4baf879ebd882d40843df3a4dead7_str_plain_stuff_tuple;
extern PyObject *const_slice_int_pos_1_none_none;
extern PyObject *const_str_plain___file__;
static PyObject *const_str_digest_45e05c6158b924d4dd8bd9acaeecb0a4;
static PyObject *const_str_digest_f43cf1ead0b8ec9f715c50ee8fb085ee;
static PyObject *const_tuple_str_plain_IGNORECASE_tuple;
static PyObject *const_str_plain__TimeRE_cache;
static PyObject *const_str_digest_66a4a94a3151be16c19886374b90ea74;
static PyObject *const_tuple_str_plain_escape_tuple;
extern PyObject *const_str_plain_getlocale;
static PyObject *const_str_plain_correction;
extern PyObject *const_str_chr_37;
static PyObject *const_str_digest_0869db2b508bb219994b41be3e755c80;
extern PyObject *const_str_plain_H;
static PyObject *const_tuple_str_plain_compile_tuple;
static PyObject *const_str_digest_f9dffda5992fb7caa5d3d1aaf81a4c09;
static PyObject *const_str_plain_to_convert;
extern PyObject *const_str_plain_reverse;
extern PyObject *const_str_plain_lower;
extern PyObject *const_str_plain_day_abbr;
extern PyObject *const_str_plain___orig_bases__;
static PyObject *const_str_plain_f_weekday;
extern PyObject *const_str_plain__strptime_datetime;
static PyObject *const_str_digest_756b540a7e3239892249fd3513071154;
extern PyObject *const_str_plain___qualname__;
static PyObject *const_tuple_str_plain_10_str_digest_e51dfba98805340d6c511fb7780da144_tuple;
extern PyObject *const_str_plain_w;
static PyObject *const_str_digest_f72e7f82ee73c3367364c7c251ec1769;
static PyObject *const_str_digest_668fe03828d334620b699b8b7deadbd4;
extern PyObject *const_str_plain_p;
static PyObject *const_str_plain_datetime_date;
extern PyObject *const_str_plain_value;
static PyObject *const_str_plain_replacement_pairs;
extern PyObject *const_str_plain_insert;
static PyObject *const_str_digest_c93b5d16052f4aae4c6fab6ca2740278;
extern PyObject *const_str_plain_IGNORECASE;
extern PyObject *const_str_plain_pattern;
static PyObject *const_str_plain__regex_cache;
extern PyObject *const_tuple_str_chr_37_tuple;
static PyObject *const_str_digest_5adc0e3d875a5ff48f1e38880ecc9bce;
static PyObject *const_str_plain_44;
static PyObject *const_tuple_9a3e76e3206e4ecaeb37bba0c487eba6_tuple;
extern PyObject *const_str_plain_old;
extern PyObject *const_tuple_str_chr_45_tuple;
static PyObject *const_str_digest_dd7f404000da4186c6331a3054c838c0;
static PyObject *const_str_plain_week_starts_Mon;
extern PyObject *const_str_plain_enumerate;
extern PyObject *const_str_plain_new;
extern PyObject *const_str_plain_datetime;
static PyObject *const_str_digest_9ba850cce6d5f5935ce25f34055f7349;
extern PyObject *const_str_plain_groupdict;
static PyObject *const_str_digest_095a200de7b492308b44ac541287650b;
static PyObject *const_str_plain__calc_julian_from_U_or_W;
extern PyObject *const_int_pos_60;
extern PyObject *const_str_plain_strftime;
static PyObject *const_tuple_str_plain_allocate_lock_tuple;
static PyObject *const_str_digest_6faf706aa81bd74e9873064504519d03;
extern PyObject *const_tuple_str_empty_tuple;
extern PyObject *const_str_plain___getitem__;
extern PyObject *const_str_plain___all__;
extern PyObject *const_str_plain_f;
extern PyObject *const_str_plain_lang;
static PyObject *const_tuple_str_plain_data_string_str_plain_format_str_plain_tt_tuple;
static PyObject *const_str_plain_00;
static PyObject *const_str_plain_W;
extern PyObject *const_str_plain_I;
extern PyObject *const_slice_none_int_pos_3_none;
extern PyObject *const_str_plain_timezone;
extern PyObject *const_slice_none_int_pos_5_none;
static PyObject *const_str_digest_280989b05aef9055d027d8441be13132;
extern PyObject *const_str_plain_origin;
extern PyObject *const_str_digest_75fd71b1edada749c2ef7ac810062295;
static PyObject *const_str_digest_e51dfba98805340d6c511fb7780da144;
extern PyObject *const_str_plain_allocate_lock;
static PyObject *const_str_digest_1cfaa7410665eaa83a33dc9c2b2ef5a2;
static PyObject *const_str_plain_front;
extern PyObject *const_str_plain_base;
extern PyObject *const_str_plain_d;
static PyObject *const_tuple_int_pos_1_str_digest_1cfaa7410665eaa83a33dc9c2b2ef5a2_tuple;
extern PyObject *const_str_plain_LC_TIME;
static PyObject *const_str_digest_cba93ff8a430730b02281234da3a234f;
extern PyObject *const_str_plain_S;
static PyObject *const_tuple_str_plain_1999_str_digest_dd7f404000da4186c6331a3054c838c0_tuple;
extern PyObject *const_str_plain_tzname;
static PyObject *const_tuple_str_plain_55_str_digest_e8b2ef18b3a8d6cb16eef935f28e7bab_tuple;
static PyObject *const_tuple_int_0_str_digest_3db15d44fa892144fa260be16ae07276_tuple;
extern PyObject *const_str_plain_z;
static PyObject *const_str_plain_tz_names;
extern PyObject *const_str_plain_y;
static PyObject *const_str_plain_processed_format;
static PyObject *const_str_plain_M;
extern PyObject *const_str_plain_day;
static PyObject *const_str_digest_29cfb83d36e7afcd72fd37a844d76701;
extern PyObject *const_str_plain_key;
static PyObject *const_str_plain__strptime_time;
extern PyObject *const_str_plain___init__;
static PyObject *const_str_plain_tz_values;
static PyObject *const_str_digest_1bee1f17b3baa5d47a23e96e655c40ba;
static PyObject *const_str_plain_fraction;
static PyObject *const_str_plain__LocaleTime__calc_month;
static PyObject *const_str_plain_a_month;
static PyObject *const_str_digest_e94f12c078916b3a7545ed5421b17178;
static PyObject *const_str_digest_734ed8a6681e2a78633dcd46b4fb23cc;
static PyObject *const_tuple_str_plain_17_str_digest_a9f9a21e276932d061c34fdf077216a6_tuple;
static PyObject *const_str_plain__calc_julian_from_V;
static PyObject *const_tuple_str_plain_U_str_plain_W_tuple;
extern PyObject *const_str_plain_has_location;
extern PyObject *const_str_plain_date;
static PyObject *const_str_plain_week_of_year;
extern PyObject *const_str_empty;
static PyObject *const_str_plain_99;
static PyObject *const_str_plain__TimeRE__seqToRE;
static PyObject *const_str_plain_a_weekday;
static PyObject *const_str_digest_dcef34e00dab13e1e5d5ef5cdd74a2cd;
extern PyObject *const_str_plain_seq;
extern PyObject *const_tuple_str_plain_i_tuple;
extern PyObject *const_tuple_str_plain_self_str_plain_format_tuple;
static PyObject *const_str_plain_has_saving;
static PyObject *const_str_digest_602784fc5f474284dba606745fdc9a6e;
static PyObject *const_str_plain_iso_weekday;
static PyObject *const_str_plain_re_escape;
static PyObject *const_tuple_str_plain_22_str_digest_095a200de7b492308b44ac541287650b_tuple;
static PyObject *const_tuple_str_plain_3_str_digest_2f11dc103ad593a8035a5dba9bd7df86_tuple;
extern PyObject *const_str_plain_0;
static PyObject *const_tuple_cb95b6009cd67490dcd09e4543c7a7a7_tuple;
static PyObject *const_tuple_str_plain_U_tuple;
extern PyObject *const_str_plain_month;
extern PyObject *const_int_neg_1;
static PyObject *const_str_digest_fd61be9f3f494f3b88354414923d5b6f;
static PyObject *const_tuple_str_plain_date_str_plain_timedelta_str_plain_timezone_tuple;
extern PyObject *const_int_pos_17;
static PyObject *const_str_digest_5a48c03edd1e289937c9fa6132bb349f;
static PyObject *const_str_plain___calc_weekday;
static PyObject *const_str_plain_LC_time;
static PyObject *const_str_plain_03;
static PyObject *const_str_digest_194f06b016fac4d554c2a56693646f66;
static PyObject *const_str_digest_a1dad5a69b4ac4ada447a90529284d36;
extern PyObject *const_str_plain_date_time;
extern PyObject *const_tuple_type_dict_tuple;
extern PyObject *const_str_plain___doc__;
extern PyObject *const_str_plain_re;
static PyObject *const_tuple_45d0bd9492a3285bf6d849b2ff3dfb9d_tuple;
extern PyObject *const_str_plain_extend;
static PyObject *const_str_digest_2eab68aacd7a38dffc3ebe30a6a082be;
extern PyObject *const_int_pos_76;
static PyObject *const_str_plain__STRUCT_TM_ITEMS;
static PyObject *const_str_digest_fe21203dbd9b4a7be79eaa5cc9577858;
extern PyObject *const_str_digest_d76462298f66c95b4d3ee22e9427a916;
static PyObject *const_tuple_str_plain_self_str_plain_a_month_str_plain_f_month_tuple;
extern PyObject *const_str_digest_b9c4baf879ebd882d40843df3a4dead7;
static PyObject *const_str_plain_directive_index;
extern PyObject *const_str_digest_3c956e665586af00b965b921b351d009;
extern PyObject *const_tuple_str_plain_self_tuple;
extern PyObject *const_str_plain_day_name;
extern PyObject *const_tuple_empty;
static PyObject *const_str_digest_ae1cc841a7086e2cb0917c15d6e6cce8;
static PyObject *const_tuple_cc60455df3a4404f39dbb99f7aea2b5f_tuple;
extern PyObject *const_str_plain_V;
static PyObject *const_tuple_str_plain_self_str_plain_a_weekday_str_plain_f_weekday_tuple;
static PyObject *const_str_digest_ed9378a159fa85aae69d41fc9736e292;
extern PyObject *const_str_plain_append;
static PyObject *const_tuple_9899724aff1bc8b3d6fd4339ab30b13e_tuple;
static PyObject *const_str_digest_554ef6b54c88f852fcfe5140d92d8a59;
extern PyObject *const_str_chr_92;
static PyObject *const_tuple_a4e09e249a22cf6eb464ae0f56b70644_tuple;
static PyObject *const_str_plain_22;
extern PyObject *const_str_plain_compile;
extern PyObject *const_str_plain_gmtoff;
static PyObject *const_str_digest_3cd3c20bf654c082b578a07eaba5f8fe;
extern PyObject *const_str_plain_b;
static PyObject *const_str_digest_707eac0e96936c05e0f90929dff6d017;
static PyObject *const_list_none_none_none_list;
static PyObject *const_str_digest_5934c43a6b9494586fb06ee43de4d255;
extern PyObject *const_slice_int_pos_4_none_none;
static PyObject *const_str_plain_f_month;
extern PyObject *const_str_plain_isoweekday;
static PyObject *const_tuple_ca92c32eb8e4ab6a92ef2d7ec2cb7f46_tuple;
static PyObject *const_str_plain_am_pm;
static PyObject *const_str_plain_17;
static PyObject *const_tuple_str_plain_self_str_plain_no_saving_str_plain_has_saving_tuple;
extern PyObject *const_str_plain_tz;
static PyObject *const_str_plain_gmtoff_fraction;
static PyObject *const_str_digest_f541030bac9d18f2e3518bef013dfab1;
static PyObject *const_str_digest_eb981a24cf74d5964e84baae545fed48;
extern PyObject *const_str_plain_x;
extern PyObject *const_str_plain_c;
static PyObject *const_frozenset_empty;
static PyObject *const_str_plain__getlang;
static PyObject *const_str_digest_528e58d8d5b8b0d5b8ae690ca05bbffe;
static PyObject *const_str_plain_55;
static PyObject *const_tuple_28a83bd9da8715db8526536e95886bcb_tuple;
extern PyObject *const_int_pos_13;
extern PyObject *const_str_plain_stuff;
static PyObject *const_str_digest_d050adeed118b2b6fa9aeda7a879ccd3;
static PyObject *const_str_digest_fa1b5dacae75a98b63c71b2a200f7be5;
static PyObject *const_str_digest_e8b2ef18b3a8d6cb16eef935f28e7bab;
extern PyObject *const_str_plain___class__;
static PyObject *const_str_plain_first_weekday;
extern PyObject *const_str_plain___module__;
static PyObject *const_tuple_str_plain_03_str_digest_2f11dc103ad593a8035a5dba9bd7df86_tuple;
static PyObject *const_tuple_str_plain_76_str_digest_280989b05aef9055d027d8441be13132_tuple;
extern PyObject *const_str_plain_2;
extern PyObject *const_str_plain_X;
extern PyObject *const_str_plain_fromordinal;
static PyObject *const_str_plain___calc_date_time;
extern PyObject *const_slice_int_pos_5_int_pos_7_none;
static PyObject *const_str_digest_cb4778dd4702622e6404f1a827f5d9cd;
static PyObject *const_str_digest_96556b6ad4d880315a12b5df59eefee5;
extern PyObject *const_slice_int_pos_1_int_pos_3_none;
static PyObject *const_str_digest_f069a4bffd0780e16d1b713f09a79fa6;
static PyObject *const_str_digest_4813bdb85fc9d2403fae86959757c450;
extern PyObject *const_str_plain_u;
extern PyObject *const_str_plain_get;
static PyObject *const_tuple_tuple_45d0bd9492a3285bf6d849b2ff3dfb9d_tuple_tuple;
static PyObject *const_str_digest_e3e45623a66850eabddcebbe5fab8ae7;
static PyObject *const_str_digest_0fdc61cd879bdacbb7aa8390d2ee851e;
static PyObject *const_str_plain_tzdelta;
extern PyObject *const_int_pos_29;
static PyObject *const_int_pos_366;
static PyObject *const_str_digest_de0573355e52d4a2c0d9ce5f58d9c469;
extern PyObject *const_str_digest_c9f0f3d4e43e594d04f0881714d4fd29;
extern PyObject *const_str_plain_escape;
static PyObject *const_tuple_str_plain_44_str_digest_6faf706aa81bd74e9873064504519d03_tuple;
extern PyObject *const_xrange_0_7;
extern PyObject *const_str_plain_metaclass;
static PyObject *const_str_plain___calc_am_pm;
static PyObject *const_str_plain_G;
extern PyObject *const_str_digest_2fe71b40974e92f7a4ed2043bfd21fa9;
extern PyObject *const_tuple_str_plain___class___tuple;
extern PyObject *const_str_angle_metaclass;
extern PyObject *const_str_plain_offset;
extern PyObject *const_str_plain_args;
extern PyObject *const_str_plain___exit__;
extern PyObject *const_str_plain_a;
static PyObject *const_slice_int_pos_3_int_pos_5_none;
static PyObject *const_str_plain_ordinal;
static PyObject *const_str_digest_0e93fff1318b51482f5e234abcce0d5f;
static PyObject *const_str_plain_time_tuple;
extern PyObject *const_str_plain_sub;
extern PyObject *const_int_pos_6;
extern PyObject *const_str_digest_8a6099b4aacb3464aabad3f932913077;
static PyObject *const_tuple_str_plain_2_str_digest_b18d4ed10eb19ebc287a599231b0ef06_tuple;
extern PyObject *const_str_plain___enter__;
static PyObject *const_str_plain_TimeRE;
extern PyObject *const_str_plain_cls;
static PyObject *const_str_plain___seqToRE;
static PyObject *const_str_digest_5ef42c1c23e9dfdbef08a75419973057;
extern PyObject *const_str_plain_isleap;
extern PyObject *const_str_plain_join;
static PyObject *const_str_digest_8ea9ba6a2811d574ae22e79121873812;
static PyObject *const_str_digest_d95eb2c150cd92562c6756c5ef604c48;
static PyObject *const_tuple_str_digest_ed9378a159fa85aae69d41fc9736e292_tuple;
static PyObject *const_str_digest_1364b07bcffd5557cadb2760e6492786;
static PyObject *const_str_digest_356c3e90aa7cbcbb5874a3145cfb9892;
extern PyObject *const_str_plain_len;
static PyObject *const_str_plain_10;
static PyObject *const_str_plain_datetime_timedelta;
static PyObject *const_str_plain_current_format;
static PyObject *const_str_digest_3252b6ffe82fefaf9fd2236e330b05d8;
static PyObject *const_str_plain_U_W;
extern PyObject *const_str_plain_3;
static PyObject *const_tuple_str_plain_utc_str_plain_gmt_tuple;
extern PyObject *const_str_plain_keys;
static PyObject *const_str_plain_1999;
static PyObject *const_str_digest_3683d4bace38680daec2435fba7cecae;
static PyObject *const_str_digest_c75a3b30fd04be1805c7e20026a18c37;
static PyObject *const_tuple_97bd6f3ffb8f917cc1b0d1bff897fa81_tuple;
extern PyObject *const_str_digest_2717a74e8094c62311bf53472f4de0ca;
static PyObject *const_str_digest_2f11dc103ad593a8035a5dba9bd7df86;
static PyObject *const_str_plain_gmt;
static PyObject *const_str_plain__CACHE_MAX_SIZE;
static PyObject *const_tuple_str_plain_self_str_plain_seq_str_plain_front_tuple;
extern PyObject *const_str_plain_match;
extern PyObject *const_str_plain_tt;
extern PyObject *const_str_plain_weekday;
static PyObject *const_tuple_int_pos_1_int_pos_22_tuple;
extern PyObject *const_str_digest_a9f9a21e276932d061c34fdf077216a6;
extern PyObject *const_int_pos_1900;
static PyObject *const_int_pos_1999;
extern PyObject *const_str_chr_58;
static PyObject *const_str_plain_no_saving;
static PyObject *const_tuple_str_plain_tz_values_str_plain_tz_tuple;
static PyObject *const_str_digest_e9a6c8eccf0f98806bf0f2954fb5592c;
static PyObject *const_str_plain__LocaleTime__calc_am_pm;
extern PyObject *const_str_angle_listcomp;
static PyObject *const_str_plain_week_0_length;
static PyObject *const_str_plain_day_of_week;
static PyObject *const_str_digest_30dc8503ac0d0105df0c5bb7524c2a7c;
extern PyObject *const_tuple_type_object_tuple;
extern PyObject *const_int_pos_44;
static PyObject *const_str_plain_11;
static PyObject *const_str_plain_datetime_timezone;
static PyObject *const_str_digest_72f14e2d9988b4ce1192074f13ad0ba5;
static PyObject *const_tuple_int_0_str_empty_tuple;
extern PyObject *const_int_pos_3;
static PyObject *const_tuple_cc1017ed5ff48a45b588a58e18d96df7_tuple;
extern PyObject *const_str_plain___setitem__;
static PyObject *const_tuple_b7015fd509173c5e879b0e947824f6d7_tuple;
static PyObject *const_str_digest_12cf5a32f923705439cef8dcb9c68a71;
extern PyObject *const_str_plain_self;
extern PyObject *const_str_plain_clear;
static PyObject *const_str_digest_83f99027874593222e45fae974a2895d;
extern PyObject *const_int_pos_7;
static PyObject *const_str_plain_data_string;
extern PyObject *const_str_digest_14d760694ac12dfa4c72b22a180ebfa1;
static PyObject *const_str_plain__LocaleTime__calc_date_time;
static PyObject *const_str_digest_f9fc6b92b906bcf1a679fa592b3173da;
static PyObject *const_str_plain_directive;
extern PyObject *const_int_pos_2;
static PyObject *const_str_plain__thread_allocate_lock;
static PyObject *const_str_digest_faf906145885b0a33d10a72a272c1edd;
static PyObject *const_str_digest_3db15d44fa892144fa260be16ae07276;
static PyObject *const_str_plain_tzset;
static PyObject *const_tuple_str_plain_99_str_digest_fa1b5dacae75a98b63c71b2a200f7be5_tuple;
static PyObject *const_str_plain__cache_lock;
static PyObject *module_filename_obj;

/* Indicator if this modules private constants were created yet. */
static bool constants_created = false;

/* Function to create module private constants. */
static void createModuleConstants( void )
{
    const_str_plain__LocaleTime__pad = UNSTREAM_STRING_ASCII( &constant_bin[ 8948 ], 16, 1 );
    const_tuple_str_digest_5adc0e3d875a5ff48f1e38880ecc9bce_tuple = PyTuple_New( 1 );
    const_str_digest_5adc0e3d875a5ff48f1e38880ecc9bce = UNSTREAM_STRING_ASCII( &constant_bin[ 8964 ], 23, 0 );
    PyTuple_SET_ITEM( const_tuple_str_digest_5adc0e3d875a5ff48f1e38880ecc9bce_tuple, 0, const_str_digest_5adc0e3d875a5ff48f1e38880ecc9bce ); Py_INCREF( const_str_digest_5adc0e3d875a5ff48f1e38880ecc9bce );
    const_str_plain_whitespace_replacement = UNSTREAM_STRING_ASCII( &constant_bin[ 8987 ], 22, 1 );
    const_int_pos_55 = PyLong_FromUnsignedLong( 55ul );
    const_str_digest_f48ab9da326247418c919b7675ccc719 = UNSTREAM_STRING_ASCII( &constant_bin[ 9009 ], 3, 0 );
    const_slice_int_pos_8_none_none = PySlice_New( const_int_pos_8, Py_None, Py_None );
    const_str_digest_b18d4ed10eb19ebc287a599231b0ef06 = UNSTREAM_STRING_ASCII( &constant_bin[ 9012 ], 2, 0 );
    const_str_plain___calc_timezone = UNSTREAM_STRING_ASCII( &constant_bin[ 9014 ], 15, 1 );
    const_str_plain__LocaleTime__calc_weekday = UNSTREAM_STRING_ASCII( &constant_bin[ 9029 ], 25, 1 );
    const_str_plain_76 = UNSTREAM_STRING_ASCII( &constant_bin[ 9054 ], 2, 0 );
    const_str_digest_135af06a4607ec91acf95b5a457cca04 = UNSTREAM_STRING_ASCII( &constant_bin[ 9056 ], 80, 0 );
    const_str_digest_bcf4f77f232344278a1e35c533afe592 = UNSTREAM_STRING_ASCII( &constant_bin[ 9136 ], 23, 0 );
    const_str_plain_days_to_week = UNSTREAM_STRING_ASCII( &constant_bin[ 9159 ], 12, 1 );
    const_str_plain_LC_date_time = UNSTREAM_STRING_ASCII( &constant_bin[ 9171 ], 12, 1 );
    const_str_plain_Y = UNSTREAM_STRING_ASCII( &constant_bin[ 473 ], 1, 1 );
    const_str_digest_e090d6e90dec24a868d5c6640787c5a5 = UNSTREAM_STRING_ASCII( &constant_bin[ 9183 ], 26, 0 );
    const_str_plain_locale_time = UNSTREAM_STRING_ASCII( &constant_bin[ 9209 ], 11, 1 );
    const_str_plain_LC_date = UNSTREAM_STRING_ASCII( &constant_bin[ 9171 ], 7, 1 );
    const_xrange_0_13 = BUILTIN_XRANGE3( const_int_0, const_int_pos_13, const_int_pos_1 );
    const_tuple_str_plain_Z_tuple = PyTuple_New( 1 );
    PyTuple_SET_ITEM( const_tuple_str_plain_Z_tuple, 0, const_str_plain_Z ); Py_INCREF( const_str_plain_Z );
    const_int_pos_1904 = PyLong_FromUnsignedLong( 1904ul );
    const_tuple_int_pos_2_str_digest_602784fc5f474284dba606745fdc9a6e_tuple = PyTuple_New( 2 );
    PyTuple_SET_ITEM( const_tuple_int_pos_2_str_digest_602784fc5f474284dba606745fdc9a6e_tuple, 0, const_int_pos_2 ); Py_INCREF( const_int_pos_2 );
    const_str_digest_602784fc5f474284dba606745fdc9a6e = UNSTREAM_STRING_ASCII( &constant_bin[ 9220 ], 2, 0 );
    PyTuple_SET_ITEM( const_tuple_int_pos_2_str_digest_602784fc5f474284dba606745fdc9a6e_tuple, 1, const_str_digest_602784fc5f474284dba606745fdc9a6e ); Py_INCREF( const_str_digest_602784fc5f474284dba606745fdc9a6e );
    const_str_digest_8b225a8ee7e5283a9f3dc53601795e6c = UNSTREAM_STRING_ASCII( &constant_bin[ 9222 ], 34, 0 );
    const_tuple_str_plain_p_str_empty_tuple = PyTuple_New( 2 );
    PyTuple_SET_ITEM( const_tuple_str_plain_p_str_empty_tuple, 0, const_str_plain_p ); Py_INCREF( const_str_plain_p );
    PyTuple_SET_ITEM( const_tuple_str_plain_p_str_empty_tuple, 1, const_str_empty ); Py_INCREF( const_str_empty );
    const_str_plain_iso_week = UNSTREAM_STRING_ASCII( &constant_bin[ 9256 ], 8, 1 );
    const_str_digest_27b466477e824207e30ceead501d4dc3 = UNSTREAM_STRING_ASCII( &constant_bin[ 9264 ], 209, 0 );
    const_tuple_tuple_cc60455df3a4404f39dbb99f7aea2b5f_tuple_tuple = PyTuple_New( 1 );
    const_tuple_cc60455df3a4404f39dbb99f7aea2b5f_tuple = PyTuple_New( 9 );
    const_int_pos_1999 = PyLong_FromUnsignedLong( 1999ul );
    PyTuple_SET_ITEM( const_tuple_cc60455df3a4404f39dbb99f7aea2b5f_tuple, 0, const_int_pos_1999 ); Py_INCREF( const_int_pos_1999 );
    PyTuple_SET_ITEM( const_tuple_cc60455df3a4404f39dbb99f7aea2b5f_tuple, 1, const_int_pos_3 ); Py_INCREF( const_int_pos_3 );
    PyTuple_SET_ITEM( const_tuple_cc60455df3a4404f39dbb99f7aea2b5f_tuple, 2, const_int_pos_17 ); Py_INCREF( const_int_pos_17 );
    PyTuple_SET_ITEM( const_tuple_cc60455df3a4404f39dbb99f7aea2b5f_tuple, 3, const_int_pos_22 ); Py_INCREF( const_int_pos_22 );
    PyTuple_SET_ITEM( const_tuple_cc60455df3a4404f39dbb99f7aea2b5f_tuple, 4, const_int_pos_44 ); Py_INCREF( const_int_pos_44 );
    PyTuple_SET_ITEM( const_tuple_cc60455df3a4404f39dbb99f7aea2b5f_tuple, 5, const_int_pos_55 ); Py_INCREF( const_int_pos_55 );
    PyTuple_SET_ITEM( const_tuple_cc60455df3a4404f39dbb99f7aea2b5f_tuple, 6, const_int_pos_2 ); Py_INCREF( const_int_pos_2 );
    PyTuple_SET_ITEM( const_tuple_cc60455df3a4404f39dbb99f7aea2b5f_tuple, 7, const_int_pos_76 ); Py_INCREF( const_int_pos_76 );
    PyTuple_SET_ITEM( const_tuple_cc60455df3a4404f39dbb99f7aea2b5f_tuple, 8, const_int_0 ); Py_INCREF( const_int_0 );
    PyTuple_SET_ITEM( const_tuple_tuple_cc60455df3a4404f39dbb99f7aea2b5f_tuple_tuple, 0, const_tuple_cc60455df3a4404f39dbb99f7aea2b5f_tuple ); Py_INCREF( const_tuple_cc60455df3a4404f39dbb99f7aea2b5f_tuple );
    const_str_plain_regex_chars = UNSTREAM_STRING_ASCII( &constant_bin[ 9473 ], 11, 1 );
    const_str_plain_LocaleTime = UNSTREAM_STRING_ASCII( &constant_bin[ 8949 ], 10, 1 );
    const_tuple_3f6db087114f1a120175750ee1b33a74_tuple = PyTuple_New( 7 );
    PyTuple_SET_ITEM( const_tuple_3f6db087114f1a120175750ee1b33a74_tuple, 0, const_str_plain_year ); Py_INCREF( const_str_plain_year );
    const_str_plain_week_of_year = UNSTREAM_STRING_ASCII( &constant_bin[ 9484 ], 12, 1 );
    PyTuple_SET_ITEM( const_tuple_3f6db087114f1a120175750ee1b33a74_tuple, 1, const_str_plain_week_of_year ); Py_INCREF( const_str_plain_week_of_year );
    const_str_plain_day_of_week = UNSTREAM_STRING_ASCII( &constant_bin[ 9496 ], 11, 1 );
    PyTuple_SET_ITEM( const_tuple_3f6db087114f1a120175750ee1b33a74_tuple, 2, const_str_plain_day_of_week ); Py_INCREF( const_str_plain_day_of_week );
    const_str_plain_week_starts_Mon = UNSTREAM_STRING_ASCII( &constant_bin[ 9507 ], 15, 1 );
    PyTuple_SET_ITEM( const_tuple_3f6db087114f1a120175750ee1b33a74_tuple, 3, const_str_plain_week_starts_Mon ); Py_INCREF( const_str_plain_week_starts_Mon );
    const_str_plain_first_weekday = UNSTREAM_STRING_ASCII( &constant_bin[ 9522 ], 13, 1 );
    PyTuple_SET_ITEM( const_tuple_3f6db087114f1a120175750ee1b33a74_tuple, 4, const_str_plain_first_weekday ); Py_INCREF( const_str_plain_first_weekday );
    const_str_plain_week_0_length = UNSTREAM_STRING_ASCII( &constant_bin[ 9535 ], 13, 1 );
    PyTuple_SET_ITEM( const_tuple_3f6db087114f1a120175750ee1b33a74_tuple, 5, const_str_plain_week_0_length ); Py_INCREF( const_str_plain_week_0_length );
    PyTuple_SET_ITEM( const_tuple_3f6db087114f1a120175750ee1b33a74_tuple, 6, const_str_plain_days_to_week ); Py_INCREF( const_str_plain_days_to_week );
    const_tuple_8deb1d4bed8d67fb14e0230ad27a2e2a_tuple = PyTuple_New( 11 );
    PyTuple_SET_ITEM( const_tuple_8deb1d4bed8d67fb14e0230ad27a2e2a_tuple, 0, const_str_plain_cls ); Py_INCREF( const_str_plain_cls );
    const_str_plain_data_string = UNSTREAM_STRING_ASCII( &constant_bin[ 9548 ], 11, 1 );
    PyTuple_SET_ITEM( const_tuple_8deb1d4bed8d67fb14e0230ad27a2e2a_tuple, 1, const_str_plain_data_string ); Py_INCREF( const_str_plain_data_string );
    PyTuple_SET_ITEM( const_tuple_8deb1d4bed8d67fb14e0230ad27a2e2a_tuple, 2, const_str_plain_format ); Py_INCREF( const_str_plain_format );
    PyTuple_SET_ITEM( const_tuple_8deb1d4bed8d67fb14e0230ad27a2e2a_tuple, 3, const_str_plain_tt ); Py_INCREF( const_str_plain_tt );
    const_str_plain_fraction = UNSTREAM_STRING_ASCII( &constant_bin[ 9559 ], 8, 1 );
    PyTuple_SET_ITEM( const_tuple_8deb1d4bed8d67fb14e0230ad27a2e2a_tuple, 4, const_str_plain_fraction ); Py_INCREF( const_str_plain_fraction );
    const_str_plain_gmtoff_fraction = UNSTREAM_STRING_ASCII( &constant_bin[ 9567 ], 15, 1 );
    PyTuple_SET_ITEM( const_tuple_8deb1d4bed8d67fb14e0230ad27a2e2a_tuple, 5, const_str_plain_gmtoff_fraction ); Py_INCREF( const_str_plain_gmtoff_fraction );
    PyTuple_SET_ITEM( const_tuple_8deb1d4bed8d67fb14e0230ad27a2e2a_tuple, 6, const_str_plain_tzname ); Py_INCREF( const_str_plain_tzname );
    PyTuple_SET_ITEM( const_tuple_8deb1d4bed8d67fb14e0230ad27a2e2a_tuple, 7, const_str_plain_gmtoff ); Py_INCREF( const_str_plain_gmtoff );
    PyTuple_SET_ITEM( const_tuple_8deb1d4bed8d67fb14e0230ad27a2e2a_tuple, 8, const_str_plain_args ); Py_INCREF( const_str_plain_args );
    const_str_plain_tzdelta = UNSTREAM_STRING_ASCII( &constant_bin[ 9582 ], 7, 1 );
    PyTuple_SET_ITEM( const_tuple_8deb1d4bed8d67fb14e0230ad27a2e2a_tuple, 9, const_str_plain_tzdelta ); Py_INCREF( const_str_plain_tzdelta );
    PyTuple_SET_ITEM( const_tuple_8deb1d4bed8d67fb14e0230ad27a2e2a_tuple, 10, const_str_plain_tz ); Py_INCREF( const_str_plain_tz );
    const_str_plain_iso_year = UNSTREAM_STRING_ASCII( &constant_bin[ 9589 ], 8, 1 );
    const_str_digest_42020f17c41fc459d60e7300e3b00c9f = UNSTREAM_STRING_ASCII( &constant_bin[ 9597 ], 24, 0 );
    const_str_plain_re_compile = UNSTREAM_STRING_ASCII( &constant_bin[ 9621 ], 10, 1 );
    const_str_plain___pad = UNSTREAM_STRING_ASCII( &constant_bin[ 8959 ], 5, 1 );
    const_str_digest_0dd41777202cf18fda33aa3b03231172 = UNSTREAM_STRING_ASCII( &constant_bin[ 9631 ], 100, 0 );
    const_str_digest_613642195e4070a6a4e08d5e22cabe18 = UNSTREAM_STRING_ASCII( &constant_bin[ 9731 ], 26, 0 );
    const_tuple_str_digest_2717a74e8094c62311bf53472f4de0ca_tuple = PyTuple_New( 1 );
    PyTuple_SET_ITEM( const_tuple_str_digest_2717a74e8094c62311bf53472f4de0ca_tuple, 0, const_str_digest_2717a74e8094c62311bf53472f4de0ca ); Py_INCREF( const_str_digest_2717a74e8094c62311bf53472f4de0ca );
    const_slice_int_pos_6_none_none = PySlice_New( const_int_pos_6, Py_None, Py_None );
    const_str_plain__LocaleTime__calc_timezone = UNSTREAM_STRING_ASCII( &constant_bin[ 9757 ], 26, 1 );
    const_str_plain___calc_month = UNSTREAM_STRING_ASCII( &constant_bin[ 9783 ], 12, 1 );
    const_tuple_str_digest_b9c4baf879ebd882d40843df3a4dead7_str_plain_stuff_tuple = PyTuple_New( 2 );
    PyTuple_SET_ITEM( const_tuple_str_digest_b9c4baf879ebd882d40843df3a4dead7_str_plain_stuff_tuple, 0, const_str_digest_b9c4baf879ebd882d40843df3a4dead7 ); Py_INCREF( const_str_digest_b9c4baf879ebd882d40843df3a4dead7 );
    PyTuple_SET_ITEM( const_tuple_str_digest_b9c4baf879ebd882d40843df3a4dead7_str_plain_stuff_tuple, 1, const_str_plain_stuff ); Py_INCREF( const_str_plain_stuff );
    const_str_digest_45e05c6158b924d4dd8bd9acaeecb0a4 = UNSTREAM_STRING_ASCII( &constant_bin[ 9795 ], 52, 0 );
    const_str_digest_f43cf1ead0b8ec9f715c50ee8fb085ee = UNSTREAM_STRING_ASCII( &constant_bin[ 9847 ], 28, 0 );
    const_tuple_str_plain_IGNORECASE_tuple = PyTuple_New( 1 );
    PyTuple_SET_ITEM( const_tuple_str_plain_IGNORECASE_tuple, 0, const_str_plain_IGNORECASE ); Py_INCREF( const_str_plain_IGNORECASE );
    const_str_plain__TimeRE_cache = UNSTREAM_STRING_ASCII( &constant_bin[ 9875 ], 13, 1 );
    const_str_digest_66a4a94a3151be16c19886374b90ea74 = UNSTREAM_STRING_ASCII( &constant_bin[ 9888 ], 357, 0 );
    const_tuple_str_plain_escape_tuple = PyTuple_New( 1 );
    PyTuple_SET_ITEM( const_tuple_str_plain_escape_tuple, 0, const_str_plain_escape ); Py_INCREF( const_str_plain_escape );
    const_str_plain_correction = UNSTREAM_STRING_ASCII( &constant_bin[ 10245 ], 10, 1 );
    const_str_digest_0869db2b508bb219994b41be3e755c80 = UNSTREAM_STRING_ASCII( &constant_bin[ 10255 ], 4, 0 );
    const_tuple_str_plain_compile_tuple = PyTuple_New( 1 );
    PyTuple_SET_ITEM( const_tuple_str_plain_compile_tuple, 0, const_str_plain_compile ); Py_INCREF( const_str_plain_compile );
    const_str_digest_f9dffda5992fb7caa5d3d1aaf81a4c09 = UNSTREAM_STRING_ASCII( &constant_bin[ 10259 ], 953, 0 );
    const_str_plain_to_convert = UNSTREAM_STRING_ASCII( &constant_bin[ 11212 ], 10, 1 );
    const_str_plain_f_weekday = UNSTREAM_STRING_ASCII( &constant_bin[ 11222 ], 9, 1 );
    const_str_digest_756b540a7e3239892249fd3513071154 = UNSTREAM_STRING_ASCII( &constant_bin[ 11231 ], 23, 0 );
    const_tuple_str_plain_10_str_digest_e51dfba98805340d6c511fb7780da144_tuple = PyTuple_New( 2 );
    const_str_plain_10 = UNSTREAM_STRING_ASCII( &constant_bin[ 11254 ], 2, 0 );
    PyTuple_SET_ITEM( const_tuple_str_plain_10_str_digest_e51dfba98805340d6c511fb7780da144_tuple, 0, const_str_plain_10 ); Py_INCREF( const_str_plain_10 );
    const_str_digest_e51dfba98805340d6c511fb7780da144 = UNSTREAM_STRING_ASCII( &constant_bin[ 11256 ], 2, 0 );
    PyTuple_SET_ITEM( const_tuple_str_plain_10_str_digest_e51dfba98805340d6c511fb7780da144_tuple, 1, const_str_digest_e51dfba98805340d6c511fb7780da144 ); Py_INCREF( const_str_digest_e51dfba98805340d6c511fb7780da144 );
    const_str_digest_f72e7f82ee73c3367364c7c251ec1769 = UNSTREAM_STRING_ASCII( &constant_bin[ 11258 ], 15, 0 );
    const_str_digest_668fe03828d334620b699b8b7deadbd4 = UNSTREAM_STRING_ASCII( &constant_bin[ 11273 ], 14, 0 );
    const_str_plain_datetime_date = UNSTREAM_STRING_ASCII( &constant_bin[ 11287 ], 13, 1 );
    const_str_plain_replacement_pairs = UNSTREAM_STRING_ASCII( &constant_bin[ 11300 ], 17, 1 );
    const_str_digest_c93b5d16052f4aae4c6fab6ca2740278 = UNSTREAM_STRING_ASCII( &constant_bin[ 11317 ], 2, 0 );
    const_str_plain__regex_cache = UNSTREAM_STRING_ASCII( &constant_bin[ 11319 ], 12, 1 );
    const_str_plain_44 = UNSTREAM_STRING_ASCII( &constant_bin[ 11331 ], 2, 0 );
    const_tuple_9a3e76e3206e4ecaeb37bba0c487eba6_tuple = PyTuple_New( 3 );
    const_tuple_int_0_str_digest_3db15d44fa892144fa260be16ae07276_tuple = PyTuple_New( 2 );
    PyTuple_SET_ITEM( const_tuple_int_0_str_digest_3db15d44fa892144fa260be16ae07276_tuple, 0, const_int_0 ); Py_INCREF( const_int_0 );
    const_str_digest_3db15d44fa892144fa260be16ae07276 = UNSTREAM_STRING_ASCII( &constant_bin[ 11333 ], 2, 0 );
    PyTuple_SET_ITEM( const_tuple_int_0_str_digest_3db15d44fa892144fa260be16ae07276_tuple, 1, const_str_digest_3db15d44fa892144fa260be16ae07276 ); Py_INCREF( const_str_digest_3db15d44fa892144fa260be16ae07276 );
    PyTuple_SET_ITEM( const_tuple_9a3e76e3206e4ecaeb37bba0c487eba6_tuple, 0, const_tuple_int_0_str_digest_3db15d44fa892144fa260be16ae07276_tuple ); Py_INCREF( const_tuple_int_0_str_digest_3db15d44fa892144fa260be16ae07276_tuple );
    const_tuple_int_pos_1_str_digest_1cfaa7410665eaa83a33dc9c2b2ef5a2_tuple = PyTuple_New( 2 );
    PyTuple_SET_ITEM( const_tuple_int_pos_1_str_digest_1cfaa7410665eaa83a33dc9c2b2ef5a2_tuple, 0, const_int_pos_1 ); Py_INCREF( const_int_pos_1 );
    const_str_digest_1cfaa7410665eaa83a33dc9c2b2ef5a2 = UNSTREAM_STRING_ASCII( &constant_bin[ 11335 ], 2, 0 );
    PyTuple_SET_ITEM( const_tuple_int_pos_1_str_digest_1cfaa7410665eaa83a33dc9c2b2ef5a2_tuple, 1, const_str_digest_1cfaa7410665eaa83a33dc9c2b2ef5a2 ); Py_INCREF( const_str_digest_1cfaa7410665eaa83a33dc9c2b2ef5a2 );
    PyTuple_SET_ITEM( const_tuple_9a3e76e3206e4ecaeb37bba0c487eba6_tuple, 1, const_tuple_int_pos_1_str_digest_1cfaa7410665eaa83a33dc9c2b2ef5a2_tuple ); Py_INCREF( const_tuple_int_pos_1_str_digest_1cfaa7410665eaa83a33dc9c2b2ef5a2_tuple );
    PyTuple_SET_ITEM( const_tuple_9a3e76e3206e4ecaeb37bba0c487eba6_tuple, 2, const_tuple_int_pos_2_str_digest_602784fc5f474284dba606745fdc9a6e_tuple ); Py_INCREF( const_tuple_int_pos_2_str_digest_602784fc5f474284dba606745fdc9a6e_tuple );
    const_str_digest_dd7f404000da4186c6331a3054c838c0 = UNSTREAM_STRING_ASCII( &constant_bin[ 9696 ], 2, 0 );
    const_str_digest_9ba850cce6d5f5935ce25f34055f7349 = UNSTREAM_STRING_ASCII( &constant_bin[ 11337 ], 94, 0 );
    const_str_digest_095a200de7b492308b44ac541287650b = UNSTREAM_STRING_ASCII( &constant_bin[ 11431 ], 2, 0 );
    const_str_plain__calc_julian_from_U_or_W = UNSTREAM_STRING_ASCII( &constant_bin[ 11433 ], 24, 1 );
    const_tuple_str_plain_allocate_lock_tuple = PyTuple_New( 1 );
    PyTuple_SET_ITEM( const_tuple_str_plain_allocate_lock_tuple, 0, const_str_plain_allocate_lock ); Py_INCREF( const_str_plain_allocate_lock );
    const_str_digest_6faf706aa81bd74e9873064504519d03 = UNSTREAM_STRING_ASCII( &constant_bin[ 11457 ], 2, 0 );
    const_tuple_str_plain_data_string_str_plain_format_str_plain_tt_tuple = PyTuple_New( 3 );
    PyTuple_SET_ITEM( const_tuple_str_plain_data_string_str_plain_format_str_plain_tt_tuple, 0, const_str_plain_data_string ); Py_INCREF( const_str_plain_data_string );
    PyTuple_SET_ITEM( const_tuple_str_plain_data_string_str_plain_format_str_plain_tt_tuple, 1, const_str_plain_format ); Py_INCREF( const_str_plain_format );
    PyTuple_SET_ITEM( const_tuple_str_plain_data_string_str_plain_format_str_plain_tt_tuple, 2, const_str_plain_tt ); Py_INCREF( const_str_plain_tt );
    const_str_plain_00 = UNSTREAM_STRING_ASCII( &constant_bin[ 11459 ], 2, 0 );
    const_str_plain_W = UNSTREAM_STRING_ASCII( &constant_bin[ 604 ], 1, 1 );
    const_str_digest_280989b05aef9055d027d8441be13132 = UNSTREAM_STRING_ASCII( &constant_bin[ 11461 ], 2, 0 );
    const_str_plain_front = UNSTREAM_STRING_ASCII( &constant_bin[ 11463 ], 5, 1 );
    const_str_digest_cba93ff8a430730b02281234da3a234f = UNSTREAM_STRING_ASCII( &constant_bin[ 11468 ], 24, 0 );
    const_tuple_str_plain_1999_str_digest_dd7f404000da4186c6331a3054c838c0_tuple = PyTuple_New( 2 );
    const_str_plain_1999 = UNSTREAM_STRING_ASCII( &constant_bin[ 11492 ], 4, 0 );
    PyTuple_SET_ITEM( const_tuple_str_plain_1999_str_digest_dd7f404000da4186c6331a3054c838c0_tuple, 0, const_str_plain_1999 ); Py_INCREF( const_str_plain_1999 );
    PyTuple_SET_ITEM( const_tuple_str_plain_1999_str_digest_dd7f404000da4186c6331a3054c838c0_tuple, 1, const_str_digest_dd7f404000da4186c6331a3054c838c0 ); Py_INCREF( const_str_digest_dd7f404000da4186c6331a3054c838c0 );
    const_tuple_str_plain_55_str_digest_e8b2ef18b3a8d6cb16eef935f28e7bab_tuple = PyTuple_New( 2 );
    const_str_plain_55 = UNSTREAM_STRING_ASCII( &constant_bin[ 11496 ], 2, 0 );
    PyTuple_SET_ITEM( const_tuple_str_plain_55_str_digest_e8b2ef18b3a8d6cb16eef935f28e7bab_tuple, 0, const_str_plain_55 ); Py_INCREF( const_str_plain_55 );
    const_str_digest_e8b2ef18b3a8d6cb16eef935f28e7bab = UNSTREAM_STRING_ASCII( &constant_bin[ 11498 ], 2, 0 );
    PyTuple_SET_ITEM( const_tuple_str_plain_55_str_digest_e8b2ef18b3a8d6cb16eef935f28e7bab_tuple, 1, const_str_digest_e8b2ef18b3a8d6cb16eef935f28e7bab ); Py_INCREF( const_str_digest_e8b2ef18b3a8d6cb16eef935f28e7bab );
    const_str_plain_tz_names = UNSTREAM_STRING_ASCII( &constant_bin[ 11500 ], 8, 1 );
    const_str_plain_processed_format = UNSTREAM_STRING_ASCII( &constant_bin[ 11508 ], 16, 1 );
    const_str_plain_M = UNSTREAM_STRING_ASCII( &constant_bin[ 614 ], 1, 1 );
    const_str_digest_29cfb83d36e7afcd72fd37a844d76701 = UNSTREAM_STRING_ASCII( &constant_bin[ 11524 ], 122, 0 );
    const_str_plain__strptime_time = UNSTREAM_STRING_ASCII( &constant_bin[ 11646 ], 14, 1 );
    const_str_plain_tz_values = UNSTREAM_STRING_ASCII( &constant_bin[ 11660 ], 9, 1 );
    const_str_digest_1bee1f17b3baa5d47a23e96e655c40ba = UNSTREAM_STRING_ASCII( &constant_bin[ 11669 ], 16, 0 );
    const_str_plain__LocaleTime__calc_month = UNSTREAM_STRING_ASCII( &constant_bin[ 11685 ], 23, 1 );
    const_str_plain_a_month = UNSTREAM_STRING_ASCII( &constant_bin[ 11708 ], 7, 1 );
    const_str_digest_e94f12c078916b3a7545ed5421b17178 = UNSTREAM_STRING_ASCII( &constant_bin[ 11715 ], 73, 0 );
    const_str_digest_734ed8a6681e2a78633dcd46b4fb23cc = UNSTREAM_STRING_ASCII( &constant_bin[ 11788 ], 96, 0 );
    const_tuple_str_plain_17_str_digest_a9f9a21e276932d061c34fdf077216a6_tuple = PyTuple_New( 2 );
    const_str_plain_17 = UNSTREAM_STRING_ASCII( &constant_bin[ 11884 ], 2, 0 );
    PyTuple_SET_ITEM( const_tuple_str_plain_17_str_digest_a9f9a21e276932d061c34fdf077216a6_tuple, 0, const_str_plain_17 ); Py_INCREF( const_str_plain_17 );
    PyTuple_SET_ITEM( const_tuple_str_plain_17_str_digest_a9f9a21e276932d061c34fdf077216a6_tuple, 1, const_str_digest_a9f9a21e276932d061c34fdf077216a6 ); Py_INCREF( const_str_digest_a9f9a21e276932d061c34fdf077216a6 );
    const_str_plain__calc_julian_from_V = UNSTREAM_STRING_ASCII( &constant_bin[ 11886 ], 19, 1 );
    const_tuple_str_plain_U_str_plain_W_tuple = PyTuple_New( 2 );
    PyTuple_SET_ITEM( const_tuple_str_plain_U_str_plain_W_tuple, 0, const_str_plain_U ); Py_INCREF( const_str_plain_U );
    PyTuple_SET_ITEM( const_tuple_str_plain_U_str_plain_W_tuple, 1, const_str_plain_W ); Py_INCREF( const_str_plain_W );
    const_str_plain_99 = UNSTREAM_STRING_ASCII( &constant_bin[ 11493 ], 2, 0 );
    const_str_plain__TimeRE__seqToRE = UNSTREAM_STRING_ASCII( &constant_bin[ 11905 ], 16, 1 );
    const_str_plain_a_weekday = UNSTREAM_STRING_ASCII( &constant_bin[ 11921 ], 9, 1 );
    const_str_digest_dcef34e00dab13e1e5d5ef5cdd74a2cd = UNSTREAM_STRING_ASCII( &constant_bin[ 11930 ], 16, 0 );
    const_str_plain_has_saving = UNSTREAM_STRING_ASCII( &constant_bin[ 11946 ], 10, 1 );
    const_str_plain_iso_weekday = UNSTREAM_STRING_ASCII( &constant_bin[ 11956 ], 11, 1 );
    const_str_plain_re_escape = UNSTREAM_STRING_ASCII( &constant_bin[ 11967 ], 9, 1 );
    const_tuple_str_plain_22_str_digest_095a200de7b492308b44ac541287650b_tuple = PyTuple_New( 2 );
    const_str_plain_22 = UNSTREAM_STRING_ASCII( &constant_bin[ 11976 ], 2, 0 );
    PyTuple_SET_ITEM( const_tuple_str_plain_22_str_digest_095a200de7b492308b44ac541287650b_tuple, 0, const_str_plain_22 ); Py_INCREF( const_str_plain_22 );
    PyTuple_SET_ITEM( const_tuple_str_plain_22_str_digest_095a200de7b492308b44ac541287650b_tuple, 1, const_str_digest_095a200de7b492308b44ac541287650b ); Py_INCREF( const_str_digest_095a200de7b492308b44ac541287650b );
    const_tuple_str_plain_3_str_digest_2f11dc103ad593a8035a5dba9bd7df86_tuple = PyTuple_New( 2 );
    PyTuple_SET_ITEM( const_tuple_str_plain_3_str_digest_2f11dc103ad593a8035a5dba9bd7df86_tuple, 0, const_str_plain_3 ); Py_INCREF( const_str_plain_3 );
    const_str_digest_2f11dc103ad593a8035a5dba9bd7df86 = UNSTREAM_STRING_ASCII( &constant_bin[ 11978 ], 2, 0 );
    PyTuple_SET_ITEM( const_tuple_str_plain_3_str_digest_2f11dc103ad593a8035a5dba9bd7df86_tuple, 1, const_str_digest_2f11dc103ad593a8035a5dba9bd7df86 ); Py_INCREF( const_str_digest_2f11dc103ad593a8035a5dba9bd7df86 );
    const_tuple_cb95b6009cd67490dcd09e4543c7a7a7_tuple = PyTuple_New( 6 );
    PyTuple_SET_ITEM( const_tuple_cb95b6009cd67490dcd09e4543c7a7a7_tuple, 0, const_str_plain_self ); Py_INCREF( const_str_plain_self );
    PyTuple_SET_ITEM( const_tuple_cb95b6009cd67490dcd09e4543c7a7a7_tuple, 1, const_str_plain_format ); Py_INCREF( const_str_plain_format );
    PyTuple_SET_ITEM( const_tuple_cb95b6009cd67490dcd09e4543c7a7a7_tuple, 2, const_str_plain_processed_format ); Py_INCREF( const_str_plain_processed_format );
    PyTuple_SET_ITEM( const_tuple_cb95b6009cd67490dcd09e4543c7a7a7_tuple, 3, const_str_plain_regex_chars ); Py_INCREF( const_str_plain_regex_chars );
    PyTuple_SET_ITEM( const_tuple_cb95b6009cd67490dcd09e4543c7a7a7_tuple, 4, const_str_plain_whitespace_replacement ); Py_INCREF( const_str_plain_whitespace_replacement );
    const_str_plain_directive_index = UNSTREAM_STRING_ASCII( &constant_bin[ 11980 ], 15, 1 );
    PyTuple_SET_ITEM( const_tuple_cb95b6009cd67490dcd09e4543c7a7a7_tuple, 5, const_str_plain_directive_index ); Py_INCREF( const_str_plain_directive_index );
    const_tuple_str_plain_U_tuple = PyTuple_New( 1 );
    PyTuple_SET_ITEM( const_tuple_str_plain_U_tuple, 0, const_str_plain_U ); Py_INCREF( const_str_plain_U );
    const_str_digest_fd61be9f3f494f3b88354414923d5b6f = UNSTREAM_STRING_ASCII( &constant_bin[ 11995 ], 24, 0 );
    const_tuple_str_plain_date_str_plain_timedelta_str_plain_timezone_tuple = PyTuple_New( 3 );
    PyTuple_SET_ITEM( const_tuple_str_plain_date_str_plain_timedelta_str_plain_timezone_tuple, 0, const_str_plain_date ); Py_INCREF( const_str_plain_date );
    PyTuple_SET_ITEM( const_tuple_str_plain_date_str_plain_timedelta_str_plain_timezone_tuple, 1, const_str_plain_timedelta ); Py_INCREF( const_str_plain_timedelta );
    PyTuple_SET_ITEM( const_tuple_str_plain_date_str_plain_timedelta_str_plain_timezone_tuple, 2, const_str_plain_timezone ); Py_INCREF( const_str_plain_timezone );
    const_str_digest_5a48c03edd1e289937c9fa6132bb349f = UNSTREAM_STRING_ASCII( &constant_bin[ 12019 ], 12, 0 );
    const_str_plain___calc_weekday = UNSTREAM_STRING_ASCII( &constant_bin[ 9040 ], 14, 1 );
    const_str_plain_LC_time = UNSTREAM_STRING_ASCII( &constant_bin[ 12031 ], 7, 1 );
    const_str_plain_03 = UNSTREAM_STRING_ASCII( &constant_bin[ 12038 ], 2, 0 );
    const_str_digest_194f06b016fac4d554c2a56693646f66 = UNSTREAM_STRING_ASCII( &constant_bin[ 12040 ], 17, 0 );
    const_str_digest_a1dad5a69b4ac4ada447a90529284d36 = UNSTREAM_STRING_ASCII( &constant_bin[ 12057 ], 38, 0 );
    const_tuple_45d0bd9492a3285bf6d849b2ff3dfb9d_tuple = PyTuple_New( 9 );
    PyTuple_SET_ITEM( const_tuple_45d0bd9492a3285bf6d849b2ff3dfb9d_tuple, 0, const_int_pos_1999 ); Py_INCREF( const_int_pos_1999 );
    PyTuple_SET_ITEM( const_tuple_45d0bd9492a3285bf6d849b2ff3dfb9d_tuple, 1, const_int_pos_1 ); Py_INCREF( const_int_pos_1 );
    PyTuple_SET_ITEM( const_tuple_45d0bd9492a3285bf6d849b2ff3dfb9d_tuple, 2, const_int_pos_3 ); Py_INCREF( const_int_pos_3 );
    PyTuple_SET_ITEM( const_tuple_45d0bd9492a3285bf6d849b2ff3dfb9d_tuple, 3, const_int_pos_1 ); Py_INCREF( const_int_pos_1 );
    PyTuple_SET_ITEM( const_tuple_45d0bd9492a3285bf6d849b2ff3dfb9d_tuple, 4, const_int_pos_1 ); Py_INCREF( const_int_pos_1 );
    PyTuple_SET_ITEM( const_tuple_45d0bd9492a3285bf6d849b2ff3dfb9d_tuple, 5, const_int_pos_1 ); Py_INCREF( const_int_pos_1 );
    PyTuple_SET_ITEM( const_tuple_45d0bd9492a3285bf6d849b2ff3dfb9d_tuple, 6, const_int_pos_6 ); Py_INCREF( const_int_pos_6 );
    PyTuple_SET_ITEM( const_tuple_45d0bd9492a3285bf6d849b2ff3dfb9d_tuple, 7, const_int_pos_3 ); Py_INCREF( const_int_pos_3 );
    PyTuple_SET_ITEM( const_tuple_45d0bd9492a3285bf6d849b2ff3dfb9d_tuple, 8, const_int_0 ); Py_INCREF( const_int_0 );
    const_str_digest_2eab68aacd7a38dffc3ebe30a6a082be = UNSTREAM_STRING_ASCII( &constant_bin[ 12095 ], 42, 0 );
    const_str_plain__STRUCT_TM_ITEMS = UNSTREAM_STRING_ASCII( &constant_bin[ 12137 ], 16, 1 );
    const_str_digest_fe21203dbd9b4a7be79eaa5cc9577858 = UNSTREAM_STRING_ASCII( &constant_bin[ 12153 ], 15, 0 );
    const_tuple_str_plain_self_str_plain_a_month_str_plain_f_month_tuple = PyTuple_New( 3 );
    PyTuple_SET_ITEM( const_tuple_str_plain_self_str_plain_a_month_str_plain_f_month_tuple, 0, const_str_plain_self ); Py_INCREF( const_str_plain_self );
    PyTuple_SET_ITEM( const_tuple_str_plain_self_str_plain_a_month_str_plain_f_month_tuple, 1, const_str_plain_a_month ); Py_INCREF( const_str_plain_a_month );
    const_str_plain_f_month = UNSTREAM_STRING_ASCII( &constant_bin[ 12168 ], 7, 1 );
    PyTuple_SET_ITEM( const_tuple_str_plain_self_str_plain_a_month_str_plain_f_month_tuple, 2, const_str_plain_f_month ); Py_INCREF( const_str_plain_f_month );
    const_str_digest_ae1cc841a7086e2cb0917c15d6e6cce8 = UNSTREAM_STRING_ASCII( &constant_bin[ 12175 ], 25, 0 );
    const_tuple_str_plain_self_str_plain_a_weekday_str_plain_f_weekday_tuple = PyTuple_New( 3 );
    PyTuple_SET_ITEM( const_tuple_str_plain_self_str_plain_a_weekday_str_plain_f_weekday_tuple, 0, const_str_plain_self ); Py_INCREF( const_str_plain_self );
    PyTuple_SET_ITEM( const_tuple_str_plain_self_str_plain_a_weekday_str_plain_f_weekday_tuple, 1, const_str_plain_a_weekday ); Py_INCREF( const_str_plain_a_weekday );
    PyTuple_SET_ITEM( const_tuple_str_plain_self_str_plain_a_weekday_str_plain_f_weekday_tuple, 2, const_str_plain_f_weekday ); Py_INCREF( const_str_plain_f_weekday );
    const_str_digest_ed9378a159fa85aae69d41fc9736e292 = UNSTREAM_STRING_ASCII( &constant_bin[ 12200 ], 20, 0 );
    const_tuple_9899724aff1bc8b3d6fd4339ab30b13e_tuple = PyTuple_New( 5 );
    PyTuple_SET_ITEM( const_tuple_9899724aff1bc8b3d6fd4339ab30b13e_tuple, 0, const_str_plain_iso_year ); Py_INCREF( const_str_plain_iso_year );
    PyTuple_SET_ITEM( const_tuple_9899724aff1bc8b3d6fd4339ab30b13e_tuple, 1, const_str_plain_iso_week ); Py_INCREF( const_str_plain_iso_week );
    PyTuple_SET_ITEM( const_tuple_9899724aff1bc8b3d6fd4339ab30b13e_tuple, 2, const_str_plain_iso_weekday ); Py_INCREF( const_str_plain_iso_weekday );
    PyTuple_SET_ITEM( const_tuple_9899724aff1bc8b3d6fd4339ab30b13e_tuple, 3, const_str_plain_correction ); Py_INCREF( const_str_plain_correction );
    const_str_plain_ordinal = UNSTREAM_STRING_ASCII( &constant_bin[ 12220 ], 7, 1 );
    PyTuple_SET_ITEM( const_tuple_9899724aff1bc8b3d6fd4339ab30b13e_tuple, 4, const_str_plain_ordinal ); Py_INCREF( const_str_plain_ordinal );
    const_str_digest_554ef6b54c88f852fcfe5140d92d8a59 = UNSTREAM_STRING_ASCII( &constant_bin[ 12227 ], 2, 0 );
    const_tuple_a4e09e249a22cf6eb464ae0f56b70644_tuple = PyTuple_New( 10 );
    PyTuple_SET_ITEM( const_tuple_a4e09e249a22cf6eb464ae0f56b70644_tuple, 0, const_str_plain_self ); Py_INCREF( const_str_plain_self );
    const_str_plain_time_tuple = UNSTREAM_STRING_ASCII( &constant_bin[ 12229 ], 10, 1 );
    PyTuple_SET_ITEM( const_tuple_a4e09e249a22cf6eb464ae0f56b70644_tuple, 1, const_str_plain_time_tuple ); Py_INCREF( const_str_plain_time_tuple );
    PyTuple_SET_ITEM( const_tuple_a4e09e249a22cf6eb464ae0f56b70644_tuple, 2, const_str_plain_date_time ); Py_INCREF( const_str_plain_date_time );
    PyTuple_SET_ITEM( const_tuple_a4e09e249a22cf6eb464ae0f56b70644_tuple, 3, const_str_plain_replacement_pairs ); Py_INCREF( const_str_plain_replacement_pairs );
    PyTuple_SET_ITEM( const_tuple_a4e09e249a22cf6eb464ae0f56b70644_tuple, 4, const_str_plain_offset ); Py_INCREF( const_str_plain_offset );
    const_str_plain_directive = UNSTREAM_STRING_ASCII( &constant_bin[ 9640 ], 9, 1 );
    PyTuple_SET_ITEM( const_tuple_a4e09e249a22cf6eb464ae0f56b70644_tuple, 5, const_str_plain_directive ); Py_INCREF( const_str_plain_directive );
    const_str_plain_current_format = UNSTREAM_STRING_ASCII( &constant_bin[ 12239 ], 14, 1 );
    PyTuple_SET_ITEM( const_tuple_a4e09e249a22cf6eb464ae0f56b70644_tuple, 6, const_str_plain_current_format ); Py_INCREF( const_str_plain_current_format );
    PyTuple_SET_ITEM( const_tuple_a4e09e249a22cf6eb464ae0f56b70644_tuple, 7, const_str_plain_old ); Py_INCREF( const_str_plain_old );
    PyTuple_SET_ITEM( const_tuple_a4e09e249a22cf6eb464ae0f56b70644_tuple, 8, const_str_plain_new ); Py_INCREF( const_str_plain_new );
    const_str_plain_U_W = UNSTREAM_STRING_ASCII( &constant_bin[ 12253 ], 3, 1 );
    PyTuple_SET_ITEM( const_tuple_a4e09e249a22cf6eb464ae0f56b70644_tuple, 9, const_str_plain_U_W ); Py_INCREF( const_str_plain_U_W );
    const_str_digest_3cd3c20bf654c082b578a07eaba5f8fe = UNSTREAM_STRING_ASCII( &constant_bin[ 12256 ], 18, 0 );
    const_str_digest_707eac0e96936c05e0f90929dff6d017 = UNSTREAM_STRING_ASCII( &constant_bin[ 12274 ], 35, 0 );
    const_list_none_none_none_list = PyList_New( 3 );
    PyList_SET_ITEM( const_list_none_none_none_list, 0, Py_None ); Py_INCREF( Py_None );
    PyList_SET_ITEM( const_list_none_none_none_list, 1, Py_None ); Py_INCREF( Py_None );
    PyList_SET_ITEM( const_list_none_none_none_list, 2, Py_None ); Py_INCREF( Py_None );
    const_str_digest_5934c43a6b9494586fb06ee43de4d255 = UNSTREAM_STRING_ASCII( &constant_bin[ 12309 ], 26, 0 );
    const_tuple_ca92c32eb8e4ab6a92ef2d7ec2cb7f46_tuple = PyTuple_New( 4 );
    PyTuple_SET_ITEM( const_tuple_ca92c32eb8e4ab6a92ef2d7ec2cb7f46_tuple, 0, const_str_plain_self ); Py_INCREF( const_str_plain_self );
    PyTuple_SET_ITEM( const_tuple_ca92c32eb8e4ab6a92ef2d7ec2cb7f46_tuple, 1, const_str_plain_locale_time ); Py_INCREF( const_str_plain_locale_time );
    PyTuple_SET_ITEM( const_tuple_ca92c32eb8e4ab6a92ef2d7ec2cb7f46_tuple, 2, const_str_plain_base ); Py_INCREF( const_str_plain_base );
    PyTuple_SET_ITEM( const_tuple_ca92c32eb8e4ab6a92ef2d7ec2cb7f46_tuple, 3, const_str_plain___class__ ); Py_INCREF( const_str_plain___class__ );
    const_str_plain_am_pm = UNSTREAM_STRING_ASCII( &constant_bin[ 9154 ], 5, 1 );
    const_tuple_str_plain_self_str_plain_no_saving_str_plain_has_saving_tuple = PyTuple_New( 3 );
    PyTuple_SET_ITEM( const_tuple_str_plain_self_str_plain_no_saving_str_plain_has_saving_tuple, 0, const_str_plain_self ); Py_INCREF( const_str_plain_self );
    const_str_plain_no_saving = UNSTREAM_STRING_ASCII( &constant_bin[ 12335 ], 9, 1 );
    PyTuple_SET_ITEM( const_tuple_str_plain_self_str_plain_no_saving_str_plain_has_saving_tuple, 1, const_str_plain_no_saving ); Py_INCREF( const_str_plain_no_saving );
    PyTuple_SET_ITEM( const_tuple_str_plain_self_str_plain_no_saving_str_plain_has_saving_tuple, 2, const_str_plain_has_saving ); Py_INCREF( const_str_plain_has_saving );
    const_str_digest_f541030bac9d18f2e3518bef013dfab1 = UNSTREAM_STRING_ASCII( &constant_bin[ 12344 ], 36, 0 );
    const_str_digest_eb981a24cf74d5964e84baae545fed48 = UNSTREAM_STRING_ASCII( &constant_bin[ 12380 ], 27, 0 );
    const_frozenset_empty = PyObject_CallFunction((PyObject*)&PyFrozenSet_Type, NULL);
    const_str_plain__getlang = UNSTREAM_STRING_ASCII( &constant_bin[ 12407 ], 8, 1 );
    const_str_digest_528e58d8d5b8b0d5b8ae690ca05bbffe = UNSTREAM_STRING_ASCII( &constant_bin[ 12415 ], 41, 0 );
    const_tuple_28a83bd9da8715db8526536e95886bcb_tuple = PyTuple_New( 3 );
    PyTuple_SET_ITEM( const_tuple_28a83bd9da8715db8526536e95886bcb_tuple, 0, const_str_digest_b9c4baf879ebd882d40843df3a4dead7 ); Py_INCREF( const_str_digest_b9c4baf879ebd882d40843df3a4dead7 );
    PyTuple_SET_ITEM( const_tuple_28a83bd9da8715db8526536e95886bcb_tuple, 1, const_str_plain_tz_names ); Py_INCREF( const_str_plain_tz_names );
    PyTuple_SET_ITEM( const_tuple_28a83bd9da8715db8526536e95886bcb_tuple, 2, const_str_plain_tz ); Py_INCREF( const_str_plain_tz );
    const_str_digest_d050adeed118b2b6fa9aeda7a879ccd3 = UNSTREAM_STRING_ASCII( &constant_bin[ 12456 ], 11, 0 );
    const_str_digest_fa1b5dacae75a98b63c71b2a200f7be5 = UNSTREAM_STRING_ASCII( &constant_bin[ 12467 ], 2, 0 );
    const_tuple_str_plain_03_str_digest_2f11dc103ad593a8035a5dba9bd7df86_tuple = PyTuple_New( 2 );
    PyTuple_SET_ITEM( const_tuple_str_plain_03_str_digest_2f11dc103ad593a8035a5dba9bd7df86_tuple, 0, const_str_plain_03 ); Py_INCREF( const_str_plain_03 );
    PyTuple_SET_ITEM( const_tuple_str_plain_03_str_digest_2f11dc103ad593a8035a5dba9bd7df86_tuple, 1, const_str_digest_2f11dc103ad593a8035a5dba9bd7df86 ); Py_INCREF( const_str_digest_2f11dc103ad593a8035a5dba9bd7df86 );
    const_tuple_str_plain_76_str_digest_280989b05aef9055d027d8441be13132_tuple = PyTuple_New( 2 );
    PyTuple_SET_ITEM( const_tuple_str_plain_76_str_digest_280989b05aef9055d027d8441be13132_tuple, 0, const_str_plain_76 ); Py_INCREF( const_str_plain_76 );
    PyTuple_SET_ITEM( const_tuple_str_plain_76_str_digest_280989b05aef9055d027d8441be13132_tuple, 1, const_str_digest_280989b05aef9055d027d8441be13132 ); Py_INCREF( const_str_digest_280989b05aef9055d027d8441be13132 );
    const_str_plain___calc_date_time = UNSTREAM_STRING_ASCII( &constant_bin[ 12391 ], 16, 1 );
    const_str_digest_cb4778dd4702622e6404f1a827f5d9cd = UNSTREAM_STRING_ASCII( &constant_bin[ 12469 ], 9, 0 );
    const_str_digest_96556b6ad4d880315a12b5df59eefee5 = UNSTREAM_STRING_ASCII( &constant_bin[ 12478 ], 2, 0 );
    const_str_digest_f069a4bffd0780e16d1b713f09a79fa6 = UNSTREAM_STRING_ASCII( &constant_bin[ 12480 ], 50, 0 );
    const_str_digest_4813bdb85fc9d2403fae86959757c450 = UNSTREAM_STRING_ASCII( &constant_bin[ 12530 ], 38, 0 );
    const_tuple_tuple_45d0bd9492a3285bf6d849b2ff3dfb9d_tuple_tuple = PyTuple_New( 1 );
    PyTuple_SET_ITEM( const_tuple_tuple_45d0bd9492a3285bf6d849b2ff3dfb9d_tuple_tuple, 0, const_tuple_45d0bd9492a3285bf6d849b2ff3dfb9d_tuple ); Py_INCREF( const_tuple_45d0bd9492a3285bf6d849b2ff3dfb9d_tuple );
    const_str_digest_e3e45623a66850eabddcebbe5fab8ae7 = UNSTREAM_STRING_ASCII( &constant_bin[ 12568 ], 31, 0 );
    const_str_digest_0fdc61cd879bdacbb7aa8390d2ee851e = UNSTREAM_STRING_ASCII( &constant_bin[ 12599 ], 12, 0 );
    const_int_pos_366 = PyLong_FromUnsignedLong( 366ul );
    const_str_digest_de0573355e52d4a2c0d9ce5f58d9c469 = UNSTREAM_STRING_ASCII( &constant_bin[ 12611 ], 206, 0 );
    const_tuple_str_plain_44_str_digest_6faf706aa81bd74e9873064504519d03_tuple = PyTuple_New( 2 );
    PyTuple_SET_ITEM( const_tuple_str_plain_44_str_digest_6faf706aa81bd74e9873064504519d03_tuple, 0, const_str_plain_44 ); Py_INCREF( const_str_plain_44 );
    PyTuple_SET_ITEM( const_tuple_str_plain_44_str_digest_6faf706aa81bd74e9873064504519d03_tuple, 1, const_str_digest_6faf706aa81bd74e9873064504519d03 ); Py_INCREF( const_str_digest_6faf706aa81bd74e9873064504519d03 );
    const_str_plain___calc_am_pm = UNSTREAM_STRING_ASCII( &constant_bin[ 9147 ], 12, 1 );
    const_str_plain_G = UNSTREAM_STRING_ASCII( &constant_bin[ 12 ], 1, 1 );
    const_slice_int_pos_3_int_pos_5_none = PySlice_New( const_int_pos_3, const_int_pos_5, Py_None );
    const_str_digest_0e93fff1318b51482f5e234abcce0d5f = UNSTREAM_STRING_ASCII( &constant_bin[ 12817 ], 150, 0 );
    const_tuple_str_plain_2_str_digest_b18d4ed10eb19ebc287a599231b0ef06_tuple = PyTuple_New( 2 );
    PyTuple_SET_ITEM( const_tuple_str_plain_2_str_digest_b18d4ed10eb19ebc287a599231b0ef06_tuple, 0, const_str_plain_2 ); Py_INCREF( const_str_plain_2 );
    PyTuple_SET_ITEM( const_tuple_str_plain_2_str_digest_b18d4ed10eb19ebc287a599231b0ef06_tuple, 1, const_str_digest_b18d4ed10eb19ebc287a599231b0ef06 ); Py_INCREF( const_str_digest_b18d4ed10eb19ebc287a599231b0ef06 );
    const_str_plain_TimeRE = UNSTREAM_STRING_ASCII( &constant_bin[ 9222 ], 6, 1 );
    const_str_plain___seqToRE = UNSTREAM_STRING_ASCII( &constant_bin[ 11912 ], 9, 1 );
    const_str_digest_5ef42c1c23e9dfdbef08a75419973057 = UNSTREAM_STRING_ASCII( &constant_bin[ 12967 ], 875, 0 );
    const_str_digest_8ea9ba6a2811d574ae22e79121873812 = UNSTREAM_STRING_ASCII( &constant_bin[ 13842 ], 122, 0 );
    const_str_digest_d95eb2c150cd92562c6756c5ef604c48 = UNSTREAM_STRING_ASCII( &constant_bin[ 13964 ], 163, 0 );
    const_tuple_str_digest_ed9378a159fa85aae69d41fc9736e292_tuple = PyTuple_New( 1 );
    PyTuple_SET_ITEM( const_tuple_str_digest_ed9378a159fa85aae69d41fc9736e292_tuple, 0, const_str_digest_ed9378a159fa85aae69d41fc9736e292 ); Py_INCREF( const_str_digest_ed9378a159fa85aae69d41fc9736e292 );
    const_str_digest_1364b07bcffd5557cadb2760e6492786 = UNSTREAM_STRING_ASCII( &constant_bin[ 9222 ], 15, 0 );
    const_str_digest_356c3e90aa7cbcbb5874a3145cfb9892 = UNSTREAM_STRING_ASCII( &constant_bin[ 14127 ], 19, 0 );
    const_str_plain_datetime_timedelta = UNSTREAM_STRING_ASCII( &constant_bin[ 14146 ], 18, 1 );
    const_str_digest_3252b6ffe82fefaf9fd2236e330b05d8 = UNSTREAM_STRING_ASCII( &constant_bin[ 14164 ], 71, 0 );
    const_tuple_str_plain_utc_str_plain_gmt_tuple = PyTuple_New( 2 );
    PyTuple_SET_ITEM( const_tuple_str_plain_utc_str_plain_gmt_tuple, 0, const_str_plain_utc ); Py_INCREF( const_str_plain_utc );
    const_str_plain_gmt = UNSTREAM_STRING_ASCII( &constant_bin[ 9567 ], 3, 1 );
    PyTuple_SET_ITEM( const_tuple_str_plain_utc_str_plain_gmt_tuple, 1, const_str_plain_gmt ); Py_INCREF( const_str_plain_gmt );
    const_str_digest_3683d4bace38680daec2435fba7cecae = UNSTREAM_STRING_ASCII( &constant_bin[ 14235 ], 25, 0 );
    const_str_digest_c75a3b30fd04be1805c7e20026a18c37 = UNSTREAM_STRING_ASCII( &constant_bin[ 14260 ], 396, 0 );
    const_tuple_97bd6f3ffb8f917cc1b0d1bff897fa81_tuple = PyTuple_New( 5 );
    PyTuple_SET_ITEM( const_tuple_97bd6f3ffb8f917cc1b0d1bff897fa81_tuple, 0, const_str_plain_self ); Py_INCREF( const_str_plain_self );
    PyTuple_SET_ITEM( const_tuple_97bd6f3ffb8f917cc1b0d1bff897fa81_tuple, 1, const_str_plain_to_convert ); Py_INCREF( const_str_plain_to_convert );
    PyTuple_SET_ITEM( const_tuple_97bd6f3ffb8f917cc1b0d1bff897fa81_tuple, 2, const_str_plain_directive ); Py_INCREF( const_str_plain_directive );
    PyTuple_SET_ITEM( const_tuple_97bd6f3ffb8f917cc1b0d1bff897fa81_tuple, 3, const_str_plain_value ); Py_INCREF( const_str_plain_value );
    PyTuple_SET_ITEM( const_tuple_97bd6f3ffb8f917cc1b0d1bff897fa81_tuple, 4, const_str_plain_regex ); Py_INCREF( const_str_plain_regex );
    const_str_plain__CACHE_MAX_SIZE = UNSTREAM_STRING_ASCII( &constant_bin[ 14656 ], 15, 1 );
    const_tuple_str_plain_self_str_plain_seq_str_plain_front_tuple = PyTuple_New( 3 );
    PyTuple_SET_ITEM( const_tuple_str_plain_self_str_plain_seq_str_plain_front_tuple, 0, const_str_plain_self ); Py_INCREF( const_str_plain_self );
    PyTuple_SET_ITEM( const_tuple_str_plain_self_str_plain_seq_str_plain_front_tuple, 1, const_str_plain_seq ); Py_INCREF( const_str_plain_seq );
    PyTuple_SET_ITEM( const_tuple_str_plain_self_str_plain_seq_str_plain_front_tuple, 2, const_str_plain_front ); Py_INCREF( const_str_plain_front );
    const_tuple_int_pos_1_int_pos_22_tuple = PyTuple_New( 2 );
    PyTuple_SET_ITEM( const_tuple_int_pos_1_int_pos_22_tuple, 0, const_int_pos_1 ); Py_INCREF( const_int_pos_1 );
    PyTuple_SET_ITEM( const_tuple_int_pos_1_int_pos_22_tuple, 1, const_int_pos_22 ); Py_INCREF( const_int_pos_22 );
    const_tuple_str_plain_tz_values_str_plain_tz_tuple = PyTuple_New( 2 );
    PyTuple_SET_ITEM( const_tuple_str_plain_tz_values_str_plain_tz_tuple, 0, const_str_plain_tz_values ); Py_INCREF( const_str_plain_tz_values );
    PyTuple_SET_ITEM( const_tuple_str_plain_tz_values_str_plain_tz_tuple, 1, const_str_plain_tz ); Py_INCREF( const_str_plain_tz );
    const_str_digest_e9a6c8eccf0f98806bf0f2954fb5592c = UNSTREAM_STRING_ASCII( &constant_bin[ 14671 ], 23, 0 );
    const_str_plain__LocaleTime__calc_am_pm = UNSTREAM_STRING_ASCII( &constant_bin[ 14694 ], 23, 1 );
    const_str_digest_30dc8503ac0d0105df0c5bb7524c2a7c = UNSTREAM_STRING_ASCII( &constant_bin[ 14717 ], 12, 0 );
    const_str_plain_11 = UNSTREAM_STRING_ASCII( &constant_bin[ 14729 ], 2, 0 );
    const_str_plain_datetime_timezone = UNSTREAM_STRING_ASCII( &constant_bin[ 14731 ], 17, 1 );
    const_str_digest_72f14e2d9988b4ce1192074f13ad0ba5 = UNSTREAM_STRING_ASCII( &constant_bin[ 14748 ], 17, 0 );
    const_tuple_int_0_str_empty_tuple = PyTuple_New( 2 );
    PyTuple_SET_ITEM( const_tuple_int_0_str_empty_tuple, 0, const_int_0 ); Py_INCREF( const_int_0 );
    PyTuple_SET_ITEM( const_tuple_int_0_str_empty_tuple, 1, const_str_empty ); Py_INCREF( const_str_empty );
    const_tuple_cc1017ed5ff48a45b588a58e18d96df7_tuple = PyTuple_New( 4 );
    PyTuple_SET_ITEM( const_tuple_cc1017ed5ff48a45b588a58e18d96df7_tuple, 0, const_str_plain_self ); Py_INCREF( const_str_plain_self );
    PyTuple_SET_ITEM( const_tuple_cc1017ed5ff48a45b588a58e18d96df7_tuple, 1, const_str_plain_am_pm ); Py_INCREF( const_str_plain_am_pm );
    PyTuple_SET_ITEM( const_tuple_cc1017ed5ff48a45b588a58e18d96df7_tuple, 2, const_str_plain_hour ); Py_INCREF( const_str_plain_hour );
    PyTuple_SET_ITEM( const_tuple_cc1017ed5ff48a45b588a58e18d96df7_tuple, 3, const_str_plain_time_tuple ); Py_INCREF( const_str_plain_time_tuple );
    const_tuple_b7015fd509173c5e879b0e947824f6d7_tuple = PyMarshal_ReadObjectFromString( (char *)&constant_bin[ 14765 ], 441 );
    const_str_digest_12cf5a32f923705439cef8dcb9c68a71 = UNSTREAM_STRING_ASCII( &constant_bin[ 15206 ], 14, 0 );
    const_str_digest_83f99027874593222e45fae974a2895d = UNSTREAM_STRING_ASCII( &constant_bin[ 15220 ], 6, 0 );
    const_str_plain__LocaleTime__calc_date_time = UNSTREAM_STRING_ASCII( &constant_bin[ 15226 ], 27, 1 );
    const_str_digest_f9fc6b92b906bcf1a679fa592b3173da = UNSTREAM_STRING_ASCII( &constant_bin[ 15253 ], 50, 0 );
    const_str_plain__thread_allocate_lock = UNSTREAM_STRING_ASCII( &constant_bin[ 15303 ], 21, 1 );
    const_str_digest_faf906145885b0a33d10a72a272c1edd = UNSTREAM_STRING_ASCII( &constant_bin[ 15324 ], 37, 0 );
    const_str_plain_tzset = UNSTREAM_STRING_ASCII( &constant_bin[ 11081 ], 5, 1 );
    const_tuple_str_plain_99_str_digest_fa1b5dacae75a98b63c71b2a200f7be5_tuple = PyTuple_New( 2 );
    PyTuple_SET_ITEM( const_tuple_str_plain_99_str_digest_fa1b5dacae75a98b63c71b2a200f7be5_tuple, 0, const_str_plain_99 ); Py_INCREF( const_str_plain_99 );
    PyTuple_SET_ITEM( const_tuple_str_plain_99_str_digest_fa1b5dacae75a98b63c71b2a200f7be5_tuple, 1, const_str_digest_fa1b5dacae75a98b63c71b2a200f7be5 ); Py_INCREF( const_str_digest_fa1b5dacae75a98b63c71b2a200f7be5 );
    const_str_plain__cache_lock = UNSTREAM_STRING_ASCII( &constant_bin[ 15361 ], 11, 1 );

    constants_created = true;
}

/* Function to verify module private constants for non-corruption. */
#ifndef __NUITKA_NO_ASSERT__
void checkModuleConstants__strptime( void )
{
    // The module may not have been used at all, then ignore this.
    if (constants_created == false) return;


}
#endif

// The module code objects.
static PyCodeObject *codeobj_cf43a6d34148899b7932d822e31c8f2e;
static PyCodeObject *codeobj_87025261fc36446f5ab92e2a5cab2c5f;
static PyCodeObject *codeobj_bf758a3d8324b0d4d5087b418b221c0f;
static PyCodeObject *codeobj_f88a2de6eba3a60fc603af4a7c553cac;
static PyCodeObject *codeobj_89f9b88bf9793ecadd1d2edbb90861c0;
static PyCodeObject *codeobj_a6ef5fcbeb91dd840f612b5c19ab8c40;
static PyCodeObject *codeobj_ce652515a9e179106980a19fe1e55af4;
static PyCodeObject *codeobj_7438384fed32ebca9a6ff01bccfb3fea;
static PyCodeObject *codeobj_43b4ad36a6908d2a03719ed1490267d8;
static PyCodeObject *codeobj_3e06da09ee1ae5362db794a4fe90f5c2;
static PyCodeObject *codeobj_042cbd0942877416c47609c4ddfe85c8;
static PyCodeObject *codeobj_68a9d0a26d7b8b382e7cb285e1b41374;
static PyCodeObject *codeobj_a2bd7fedebd3e4f98d505ee04dfef0a0;
static PyCodeObject *codeobj_ca9ca9f53a265adc62ad7d1f9f0a3299;
static PyCodeObject *codeobj_50088acb7867a7649aefc1a93e216267;
static PyCodeObject *codeobj_db18c91e2480c1832ae8445405c2fd5c;
static PyCodeObject *codeobj_869fc41df2b388ecc0919cc53a3b31d5;
static PyCodeObject *codeobj_957545efe84ec5b080d34a969999bbb4;
static PyCodeObject *codeobj_f5d16e06a9c33f44540f4c03a29f4f26;
static PyCodeObject *codeobj_69d48dfe50bd36d23301b5b816c9a25b;
static PyCodeObject *codeobj_6213f678fd90493715fea7b571319cd2;
static PyCodeObject *codeobj_d376003ce1f00a357a5daf67789baadc;
static PyCodeObject *codeobj_285d3548e213aa4c5d6aef1855a305f1;
static PyCodeObject *codeobj_c6a98338e308194720e568c3cff013c2;
static PyCodeObject *codeobj_edff8205a2d414bbd7a00404a66b8323;
static PyCodeObject *codeobj_40f40fb82a3cce28816beecf489ed964;
static PyCodeObject *codeobj_f044b6a80b1a45ed0fb018deca7c413c;

static void createModuleCodeObjects(void)
{
    module_filename_obj = MAKE_RELATIVE_PATH( const_str_digest_0fdc61cd879bdacbb7aa8390d2ee851e );
    codeobj_cf43a6d34148899b7932d822e31c8f2e = MAKE_CODEOBJ( module_filename_obj, const_str_angle_genexpr, 219, const_tuple_28a83bd9da8715db8526536e95886bcb_tuple, 1, 0, CO_GENERATOR | CO_OPTIMIZED | CO_NEWLOCALS );
    codeobj_87025261fc36446f5ab92e2a5cab2c5f = MAKE_CODEOBJ( module_filename_obj, const_str_angle_genexpr, 243, const_tuple_str_digest_b9c4baf879ebd882d40843df3a4dead7_str_plain_stuff_tuple, 1, 0, CO_GENERATOR | CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE );
    codeobj_bf758a3d8324b0d4d5087b418b221c0f = MAKE_CODEOBJ( module_filename_obj, const_str_angle_listcomp, 92, const_tuple_str_plain_i_tuple, 1, 0, CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE );
    codeobj_f88a2de6eba3a60fc603af4a7c553cac = MAKE_CODEOBJ( module_filename_obj, const_str_angle_listcomp, 93, const_tuple_str_plain_i_tuple, 1, 0, CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE );
    codeobj_89f9b88bf9793ecadd1d2edbb90861c0 = MAKE_CODEOBJ( module_filename_obj, const_str_angle_listcomp, 99, const_tuple_str_plain_i_tuple, 1, 0, CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE );
    codeobj_a6ef5fcbeb91dd840f612b5c19ab8c40 = MAKE_CODEOBJ( module_filename_obj, const_str_angle_listcomp, 100, const_tuple_str_plain_i_tuple, 1, 0, CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE );
    codeobj_ce652515a9e179106980a19fe1e55af4 = MAKE_CODEOBJ( module_filename_obj, const_str_angle_listcomp, 137, const_tuple_str_plain_tz_values_str_plain_tz_tuple, 1, 0, CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE );
    codeobj_7438384fed32ebca9a6ff01bccfb3fea = MAKE_CODEOBJ( module_filename_obj, const_str_digest_3cd3c20bf654c082b578a07eaba5f8fe, 1, const_tuple_empty, 0, 0, CO_NOFREE );
    codeobj_43b4ad36a6908d2a03719ed1490267d8 = MAKE_CODEOBJ( module_filename_obj, const_str_plain_LocaleTime, 30, const_tuple_str_plain___class___tuple, 0, 0, CO_NOFREE );
    codeobj_3e06da09ee1ae5362db794a4fe90f5c2 = MAKE_CODEOBJ( module_filename_obj, const_str_plain_TimeRE, 179, const_tuple_str_plain___class___tuple, 0, 0, CO_NOFREE );
    codeobj_042cbd0942877416c47609c4ddfe85c8 = MAKE_CODEOBJ( module_filename_obj, const_str_plain___calc_am_pm, 104, const_tuple_cc1017ed5ff48a45b588a58e18d96df7_tuple, 1, 0, CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE );
    codeobj_68a9d0a26d7b8b382e7cb285e1b41374 = MAKE_CODEOBJ( module_filename_obj, const_str_plain___calc_date_time, 116, const_tuple_a4e09e249a22cf6eb464ae0f56b70644_tuple, 1, 0, CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE );
    codeobj_a2bd7fedebd3e4f98d505ee04dfef0a0 = MAKE_CODEOBJ( module_filename_obj, const_str_plain___calc_month, 97, const_tuple_str_plain_self_str_plain_a_month_str_plain_f_month_tuple, 1, 0, CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE );
    codeobj_ca9ca9f53a265adc62ad7d1f9f0a3299 = MAKE_CODEOBJ( module_filename_obj, const_str_plain___calc_timezone, 161, const_tuple_str_plain_self_str_plain_no_saving_str_plain_has_saving_tuple, 1, 0, CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE );
    codeobj_50088acb7867a7649aefc1a93e216267 = MAKE_CODEOBJ( module_filename_obj, const_str_plain___calc_weekday, 89, const_tuple_str_plain_self_str_plain_a_weekday_str_plain_f_weekday_tuple, 1, 0, CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE );
    codeobj_db18c91e2480c1832ae8445405c2fd5c = MAKE_CODEOBJ( module_filename_obj, const_str_plain___init__, 49, const_tuple_str_plain_self_tuple, 1, 0, CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE );
    codeobj_869fc41df2b388ecc0919cc53a3b31d5 = MAKE_CODEOBJ( module_filename_obj, const_str_plain___init__, 182, const_tuple_ca92c32eb8e4ab6a92ef2d7ec2cb7f46_tuple, 2, 0, CO_OPTIMIZED | CO_NEWLOCALS );
    codeobj_957545efe84ec5b080d34a969999bbb4 = MAKE_CODEOBJ( module_filename_obj, const_str_plain___pad, 80, const_tuple_str_plain_self_str_plain_seq_str_plain_front_tuple, 3, 0, CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE );
    codeobj_f5d16e06a9c33f44540f4c03a29f4f26 = MAKE_CODEOBJ( module_filename_obj, const_str_plain___seqToRE, 228, const_tuple_97bd6f3ffb8f917cc1b0d1bff897fa81_tuple, 3, 0, CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE );
    codeobj_69d48dfe50bd36d23301b5b816c9a25b = MAKE_CODEOBJ( module_filename_obj, const_str_plain__calc_julian_from_U_or_W, 281, const_tuple_3f6db087114f1a120175750ee1b33a74_tuple, 4, 0, CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE );
    codeobj_6213f678fd90493715fea7b571319cd2 = MAKE_CODEOBJ( module_filename_obj, const_str_plain__calc_julian_from_V, 302, const_tuple_9899724aff1bc8b3d6fd4339ab30b13e_tuple, 3, 0, CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE );
    codeobj_d376003ce1f00a357a5daf67789baadc = MAKE_CODEOBJ( module_filename_obj, const_str_plain__getlang, 26, const_tuple_empty, 0, 0, CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE );
    codeobj_285d3548e213aa4c5d6aef1855a305f1 = MAKE_CODEOBJ( module_filename_obj, const_str_plain__strptime, 318, const_tuple_b7015fd509173c5e879b0e947824f6d7_tuple, 2, 0, CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE );
    codeobj_c6a98338e308194720e568c3cff013c2 = MAKE_CODEOBJ( module_filename_obj, const_str_plain__strptime_datetime, 574, const_tuple_8deb1d4bed8d67fb14e0230ad27a2e2a_tuple, 3, 0, CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE );
    codeobj_edff8205a2d414bbd7a00404a66b8323 = MAKE_CODEOBJ( module_filename_obj, const_str_plain__strptime_time, 568, const_tuple_str_plain_data_string_str_plain_format_str_plain_tt_tuple, 2, 0, CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE );
    codeobj_40f40fb82a3cce28816beecf489ed964 = MAKE_CODEOBJ( module_filename_obj, const_str_plain_compile, 270, const_tuple_str_plain_self_str_plain_format_tuple, 2, 0, CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE );
    codeobj_f044b6a80b1a45ed0fb018deca7c413c = MAKE_CODEOBJ( module_filename_obj, const_str_plain_pattern, 247, const_tuple_cb95b6009cd67490dcd09e4543c7a7a7_tuple, 2, 0, CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE );
}

// The module function declarations.
static PyObject *_strptime$$$function_9___init__$$$genexpr_1_genexpr_maker( void );


static PyObject *_strptime$$$function_10___seqToRE$$$genexpr_1_genexpr_maker( void );


NUITKA_CROSS_MODULE PyObject *impl___internal__$$$function_1__mro_entries_conversion( PyObject **python_pars );


NUITKA_CROSS_MODULE PyObject *impl___internal__$$$function_2_complex_call_helper_star_list( PyObject **python_pars );


static PyObject *MAKE_FUNCTION__strptime$$$function_10___seqToRE(  );


static PyObject *MAKE_FUNCTION__strptime$$$function_11_pattern(  );


static PyObject *MAKE_FUNCTION__strptime$$$function_12_compile(  );


static PyObject *MAKE_FUNCTION__strptime$$$function_13__calc_julian_from_U_or_W(  );


static PyObject *MAKE_FUNCTION__strptime$$$function_14__calc_julian_from_V(  );


static PyObject *MAKE_FUNCTION__strptime$$$function_15__strptime( PyObject *defaults );


static PyObject *MAKE_FUNCTION__strptime$$$function_16__strptime_time( PyObject *defaults );


static PyObject *MAKE_FUNCTION__strptime$$$function_17__strptime_datetime( PyObject *defaults );


static PyObject *MAKE_FUNCTION__strptime$$$function_1__getlang(  );


static PyObject *MAKE_FUNCTION__strptime$$$function_2___init__(  );


static PyObject *MAKE_FUNCTION__strptime$$$function_3___pad(  );


static PyObject *MAKE_FUNCTION__strptime$$$function_4___calc_weekday(  );


static PyObject *MAKE_FUNCTION__strptime$$$function_5___calc_month(  );


static PyObject *MAKE_FUNCTION__strptime$$$function_6___calc_am_pm(  );


static PyObject *MAKE_FUNCTION__strptime$$$function_7___calc_date_time(  );


static PyObject *MAKE_FUNCTION__strptime$$$function_8___calc_timezone(  );


static PyObject *MAKE_FUNCTION__strptime$$$function_9___init__( PyObject *defaults );


// The module function definitions.
static PyObject *impl__strptime$$$function_1__getlang( struct Nuitka_FunctionObject const *self, PyObject **python_pars )
{
    // Preserve error status for checks
#ifndef __NUITKA_NO_ASSERT__
    NUITKA_MAY_BE_UNUSED bool had_error = ERROR_OCCURRED();
#endif

    // Local variable declarations.
    struct Nuitka_FrameObject *frame_d376003ce1f00a357a5daf67789baadc;
    NUITKA_MAY_BE_UNUSED char const *type_description_1 = NULL;
    PyObject *tmp_return_value = NULL;
    PyObject *exception_type = NULL;
    PyObject *exception_value = NULL;
    PyTracebackObject *exception_tb = NULL;
    NUITKA_MAY_BE_UNUSED int exception_lineno = 0;
    static struct Nuitka_FrameObject *cache_frame_d376003ce1f00a357a5daf67789baadc = NULL;

    // Actual function body.
    MAKE_OR_REUSE_FRAME( cache_frame_d376003ce1f00a357a5daf67789baadc, codeobj_d376003ce1f00a357a5daf67789baadc, module__strptime, 0 );
    frame_d376003ce1f00a357a5daf67789baadc = cache_frame_d376003ce1f00a357a5daf67789baadc;

    // Push the new frame as the currently active one.
    pushFrameStack( frame_d376003ce1f00a357a5daf67789baadc );

    // Mark the frame object as in use, ref count 1 will be up for reuse.
    assert( Py_REFCNT( frame_d376003ce1f00a357a5daf67789baadc ) == 2 ); // Frame stack

    // Framed code:
    {
        PyObject *tmp_called_name_1;
        PyObject *tmp_source_name_1;
        PyObject *tmp_mvar_value_1;
        PyObject *tmp_args_element_name_1;
        PyObject *tmp_source_name_2;
        PyObject *tmp_mvar_value_2;
        tmp_mvar_value_1 = GET_STRING_DICT_VALUE( moduledict__strptime, (Nuitka_StringObject *)const_str_plain_locale );

        if (unlikely( tmp_mvar_value_1 == NULL ))
        {
            tmp_mvar_value_1 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_locale );
        }

        if ( tmp_mvar_value_1 == NULL )
        {

            exception_type = PyExc_NameError;
            Py_INCREF( exception_type );
            exception_value = PyUnicode_FromFormat( "name '%s' is not defined", "locale" );
            exception_tb = NULL;
            NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
            CHAIN_EXCEPTION( exception_value );

            exception_lineno = 28;

            goto frame_exception_exit_1;
        }

        tmp_source_name_1 = tmp_mvar_value_1;
        tmp_called_name_1 = LOOKUP_ATTRIBUTE( tmp_source_name_1, const_str_plain_getlocale );
        if ( tmp_called_name_1 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 28;

            goto frame_exception_exit_1;
        }
        tmp_mvar_value_2 = GET_STRING_DICT_VALUE( moduledict__strptime, (Nuitka_StringObject *)const_str_plain_locale );

        if (unlikely( tmp_mvar_value_2 == NULL ))
        {
            tmp_mvar_value_2 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_locale );
        }

        if ( tmp_mvar_value_2 == NULL )
        {
            Py_DECREF( tmp_called_name_1 );
            exception_type = PyExc_NameError;
            Py_INCREF( exception_type );
            exception_value = PyUnicode_FromFormat( "name '%s' is not defined", "locale" );
            exception_tb = NULL;
            NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
            CHAIN_EXCEPTION( exception_value );

            exception_lineno = 28;

            goto frame_exception_exit_1;
        }

        tmp_source_name_2 = tmp_mvar_value_2;
        tmp_args_element_name_1 = LOOKUP_ATTRIBUTE( tmp_source_name_2, const_str_plain_LC_TIME );
        if ( tmp_args_element_name_1 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
            Py_DECREF( tmp_called_name_1 );

            exception_lineno = 28;

            goto frame_exception_exit_1;
        }
        frame_d376003ce1f00a357a5daf67789baadc->m_frame.f_lineno = 28;
        {
            PyObject *call_args[] = { tmp_args_element_name_1 };
            tmp_return_value = CALL_FUNCTION_WITH_ARGS1( tmp_called_name_1, call_args );
        }

        Py_DECREF( tmp_called_name_1 );
        Py_DECREF( tmp_args_element_name_1 );
        if ( tmp_return_value == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 28;

            goto frame_exception_exit_1;
        }
        goto frame_return_exit_1;
    }

#if 0
    RESTORE_FRAME_EXCEPTION( frame_d376003ce1f00a357a5daf67789baadc );
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto frame_no_exception_1;

    frame_return_exit_1:;
#if 0
    RESTORE_FRAME_EXCEPTION( frame_d376003ce1f00a357a5daf67789baadc );
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto function_return_exit;

    frame_exception_exit_1:;

#if 0
    RESTORE_FRAME_EXCEPTION( frame_d376003ce1f00a357a5daf67789baadc );
#endif

    if ( exception_tb == NULL )
    {
        exception_tb = MAKE_TRACEBACK( frame_d376003ce1f00a357a5daf67789baadc, exception_lineno );
    }
    else if ( exception_tb->tb_frame != &frame_d376003ce1f00a357a5daf67789baadc->m_frame )
    {
        exception_tb = ADD_TRACEBACK( exception_tb, frame_d376003ce1f00a357a5daf67789baadc, exception_lineno );
    }

    // Attachs locals to frame if any.
    Nuitka_Frame_AttachLocals(
        (struct Nuitka_FrameObject *)frame_d376003ce1f00a357a5daf67789baadc,
        type_description_1
    );


    // Release cached frame.
    if ( frame_d376003ce1f00a357a5daf67789baadc == cache_frame_d376003ce1f00a357a5daf67789baadc )
    {
        Py_DECREF( frame_d376003ce1f00a357a5daf67789baadc );
    }
    cache_frame_d376003ce1f00a357a5daf67789baadc = NULL;

    assertFrameObject( frame_d376003ce1f00a357a5daf67789baadc );

    // Put the previous frame back on top.
    popFrameStack();

    // Return the error.
    goto function_exception_exit;

    frame_no_exception_1:;

    // Return statement must have exited already.
    NUITKA_CANNOT_GET_HERE( _strptime$$$function_1__getlang );
    return NULL;

function_exception_exit:
    assert( exception_type );
    RESTORE_ERROR_OCCURRED( exception_type, exception_value, exception_tb );

    return NULL;

function_return_exit:
   // Function cleanup code if any.


   // Actual function exit with return value, making sure we did not make
   // the error status worse despite non-NULL return.
   CHECK_OBJECT( tmp_return_value );
   assert( had_error || !ERROR_OCCURRED() );
   return tmp_return_value;
}


static PyObject *impl__strptime$$$function_2___init__( struct Nuitka_FunctionObject const *self, PyObject **python_pars )
{
    // Preserve error status for checks
#ifndef __NUITKA_NO_ASSERT__
    NUITKA_MAY_BE_UNUSED bool had_error = ERROR_OCCURRED();
#endif

    // Local variable declarations.
    PyObject *par_self = python_pars[ 0 ];
    struct Nuitka_FrameObject *frame_db18c91e2480c1832ae8445405c2fd5c;
    NUITKA_MAY_BE_UNUSED char const *type_description_1 = NULL;
    PyObject *exception_type = NULL;
    PyObject *exception_value = NULL;
    PyTracebackObject *exception_tb = NULL;
    NUITKA_MAY_BE_UNUSED int exception_lineno = 0;
    bool tmp_result;
    int tmp_res;
    static struct Nuitka_FrameObject *cache_frame_db18c91e2480c1832ae8445405c2fd5c = NULL;
    PyObject *tmp_return_value = NULL;
    PyObject *exception_keeper_type_1;
    PyObject *exception_keeper_value_1;
    PyTracebackObject *exception_keeper_tb_1;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_1;

    // Actual function body.
    // Tried code:
    MAKE_OR_REUSE_FRAME( cache_frame_db18c91e2480c1832ae8445405c2fd5c, codeobj_db18c91e2480c1832ae8445405c2fd5c, module__strptime, sizeof(void *) );
    frame_db18c91e2480c1832ae8445405c2fd5c = cache_frame_db18c91e2480c1832ae8445405c2fd5c;

    // Push the new frame as the currently active one.
    pushFrameStack( frame_db18c91e2480c1832ae8445405c2fd5c );

    // Mark the frame object as in use, ref count 1 will be up for reuse.
    assert( Py_REFCNT( frame_db18c91e2480c1832ae8445405c2fd5c ) == 2 ); // Frame stack

    // Framed code:
    {
        PyObject *tmp_assattr_name_1;
        PyObject *tmp_called_name_1;
        PyObject *tmp_mvar_value_1;
        PyObject *tmp_assattr_target_1;
        tmp_mvar_value_1 = GET_STRING_DICT_VALUE( moduledict__strptime, (Nuitka_StringObject *)const_str_plain__getlang );

        if (unlikely( tmp_mvar_value_1 == NULL ))
        {
            tmp_mvar_value_1 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain__getlang );
        }

        if ( tmp_mvar_value_1 == NULL )
        {

            exception_type = PyExc_NameError;
            Py_INCREF( exception_type );
            exception_value = PyUnicode_FromFormat( "name '%s' is not defined", "_getlang" );
            exception_tb = NULL;
            NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
            CHAIN_EXCEPTION( exception_value );

            exception_lineno = 69;
            type_description_1 = "o";
            goto frame_exception_exit_1;
        }

        tmp_called_name_1 = tmp_mvar_value_1;
        frame_db18c91e2480c1832ae8445405c2fd5c->m_frame.f_lineno = 69;
        tmp_assattr_name_1 = CALL_FUNCTION_NO_ARGS( tmp_called_name_1 );
        if ( tmp_assattr_name_1 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 69;
            type_description_1 = "o";
            goto frame_exception_exit_1;
        }
        CHECK_OBJECT( par_self );
        tmp_assattr_target_1 = par_self;
        tmp_result = SET_ATTRIBUTE( tmp_assattr_target_1, const_str_plain_lang, tmp_assattr_name_1 );
        Py_DECREF( tmp_assattr_name_1 );
        if ( tmp_result == false )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 69;
            type_description_1 = "o";
            goto frame_exception_exit_1;
        }
    }
    {
        PyObject *tmp_called_instance_1;
        PyObject *tmp_call_result_1;
        CHECK_OBJECT( par_self );
        tmp_called_instance_1 = par_self;
        frame_db18c91e2480c1832ae8445405c2fd5c->m_frame.f_lineno = 70;
        tmp_call_result_1 = CALL_METHOD_NO_ARGS( tmp_called_instance_1, const_str_plain__LocaleTime__calc_weekday );
        if ( tmp_call_result_1 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 70;
            type_description_1 = "o";
            goto frame_exception_exit_1;
        }
        Py_DECREF( tmp_call_result_1 );
    }
    {
        PyObject *tmp_called_instance_2;
        PyObject *tmp_call_result_2;
        CHECK_OBJECT( par_self );
        tmp_called_instance_2 = par_self;
        frame_db18c91e2480c1832ae8445405c2fd5c->m_frame.f_lineno = 71;
        tmp_call_result_2 = CALL_METHOD_NO_ARGS( tmp_called_instance_2, const_str_plain__LocaleTime__calc_month );
        if ( tmp_call_result_2 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 71;
            type_description_1 = "o";
            goto frame_exception_exit_1;
        }
        Py_DECREF( tmp_call_result_2 );
    }
    {
        PyObject *tmp_called_instance_3;
        PyObject *tmp_call_result_3;
        CHECK_OBJECT( par_self );
        tmp_called_instance_3 = par_self;
        frame_db18c91e2480c1832ae8445405c2fd5c->m_frame.f_lineno = 72;
        tmp_call_result_3 = CALL_METHOD_NO_ARGS( tmp_called_instance_3, const_str_plain__LocaleTime__calc_am_pm );
        if ( tmp_call_result_3 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 72;
            type_description_1 = "o";
            goto frame_exception_exit_1;
        }
        Py_DECREF( tmp_call_result_3 );
    }
    {
        PyObject *tmp_called_instance_4;
        PyObject *tmp_call_result_4;
        CHECK_OBJECT( par_self );
        tmp_called_instance_4 = par_self;
        frame_db18c91e2480c1832ae8445405c2fd5c->m_frame.f_lineno = 73;
        tmp_call_result_4 = CALL_METHOD_NO_ARGS( tmp_called_instance_4, const_str_plain__LocaleTime__calc_timezone );
        if ( tmp_call_result_4 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 73;
            type_description_1 = "o";
            goto frame_exception_exit_1;
        }
        Py_DECREF( tmp_call_result_4 );
    }
    {
        PyObject *tmp_called_instance_5;
        PyObject *tmp_call_result_5;
        CHECK_OBJECT( par_self );
        tmp_called_instance_5 = par_self;
        frame_db18c91e2480c1832ae8445405c2fd5c->m_frame.f_lineno = 74;
        tmp_call_result_5 = CALL_METHOD_NO_ARGS( tmp_called_instance_5, const_str_plain__LocaleTime__calc_date_time );
        if ( tmp_call_result_5 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 74;
            type_description_1 = "o";
            goto frame_exception_exit_1;
        }
        Py_DECREF( tmp_call_result_5 );
    }
    {
        nuitka_bool tmp_condition_result_1;
        PyObject *tmp_compexpr_left_1;
        PyObject *tmp_compexpr_right_1;
        PyObject *tmp_called_name_2;
        PyObject *tmp_mvar_value_2;
        PyObject *tmp_source_name_1;
        tmp_mvar_value_2 = GET_STRING_DICT_VALUE( moduledict__strptime, (Nuitka_StringObject *)const_str_plain__getlang );

        if (unlikely( tmp_mvar_value_2 == NULL ))
        {
            tmp_mvar_value_2 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain__getlang );
        }

        if ( tmp_mvar_value_2 == NULL )
        {

            exception_type = PyExc_NameError;
            Py_INCREF( exception_type );
            exception_value = PyUnicode_FromFormat( "name '%s' is not defined", "_getlang" );
            exception_tb = NULL;
            NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
            CHAIN_EXCEPTION( exception_value );

            exception_lineno = 75;
            type_description_1 = "o";
            goto frame_exception_exit_1;
        }

        tmp_called_name_2 = tmp_mvar_value_2;
        frame_db18c91e2480c1832ae8445405c2fd5c->m_frame.f_lineno = 75;
        tmp_compexpr_left_1 = CALL_FUNCTION_NO_ARGS( tmp_called_name_2 );
        if ( tmp_compexpr_left_1 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 75;
            type_description_1 = "o";
            goto frame_exception_exit_1;
        }
        CHECK_OBJECT( par_self );
        tmp_source_name_1 = par_self;
        tmp_compexpr_right_1 = LOOKUP_ATTRIBUTE( tmp_source_name_1, const_str_plain_lang );
        if ( tmp_compexpr_right_1 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
            Py_DECREF( tmp_compexpr_left_1 );

            exception_lineno = 75;
            type_description_1 = "o";
            goto frame_exception_exit_1;
        }
        tmp_res = RICH_COMPARE_BOOL_NOTEQ_OBJECT_OBJECT( tmp_compexpr_left_1, tmp_compexpr_right_1 );
        Py_DECREF( tmp_compexpr_left_1 );
        Py_DECREF( tmp_compexpr_right_1 );
        if ( tmp_res == -1 )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 75;
            type_description_1 = "o";
            goto frame_exception_exit_1;
        }
        tmp_condition_result_1 = ( tmp_res != 0 ) ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
        if ( tmp_condition_result_1 == NUITKA_BOOL_TRUE )
        {
            goto branch_yes_1;
        }
        else
        {
            goto branch_no_1;
        }
        branch_yes_1:;
        {
            PyObject *tmp_raise_type_1;
            PyObject *tmp_make_exception_arg_1;
            tmp_make_exception_arg_1 = const_str_digest_f541030bac9d18f2e3518bef013dfab1;
            frame_db18c91e2480c1832ae8445405c2fd5c->m_frame.f_lineno = 76;
            {
                PyObject *call_args[] = { tmp_make_exception_arg_1 };
                tmp_raise_type_1 = CALL_FUNCTION_WITH_ARGS1( PyExc_ValueError, call_args );
            }

            assert( !(tmp_raise_type_1 == NULL) );
            exception_type = tmp_raise_type_1;
            exception_lineno = 76;
            RAISE_EXCEPTION_WITH_TYPE( &exception_type, &exception_value, &exception_tb );
            type_description_1 = "o";
            goto frame_exception_exit_1;
        }
        branch_no_1:;
    }
    {
        nuitka_bool tmp_condition_result_2;
        int tmp_or_left_truth_1;
        nuitka_bool tmp_or_left_value_1;
        nuitka_bool tmp_or_right_value_1;
        PyObject *tmp_compexpr_left_2;
        PyObject *tmp_compexpr_right_2;
        PyObject *tmp_source_name_2;
        PyObject *tmp_mvar_value_3;
        PyObject *tmp_source_name_3;
        PyObject *tmp_compexpr_left_3;
        PyObject *tmp_compexpr_right_3;
        PyObject *tmp_source_name_4;
        PyObject *tmp_mvar_value_4;
        PyObject *tmp_source_name_5;
        tmp_mvar_value_3 = GET_STRING_DICT_VALUE( moduledict__strptime, (Nuitka_StringObject *)const_str_plain_time );

        if (unlikely( tmp_mvar_value_3 == NULL ))
        {
            tmp_mvar_value_3 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_time );
        }

        if ( tmp_mvar_value_3 == NULL )
        {

            exception_type = PyExc_NameError;
            Py_INCREF( exception_type );
            exception_value = PyUnicode_FromFormat( "name '%s' is not defined", "time" );
            exception_tb = NULL;
            NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
            CHAIN_EXCEPTION( exception_value );

            exception_lineno = 77;
            type_description_1 = "o";
            goto frame_exception_exit_1;
        }

        tmp_source_name_2 = tmp_mvar_value_3;
        tmp_compexpr_left_2 = LOOKUP_ATTRIBUTE( tmp_source_name_2, const_str_plain_tzname );
        if ( tmp_compexpr_left_2 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 77;
            type_description_1 = "o";
            goto frame_exception_exit_1;
        }
        CHECK_OBJECT( par_self );
        tmp_source_name_3 = par_self;
        tmp_compexpr_right_2 = LOOKUP_ATTRIBUTE( tmp_source_name_3, const_str_plain_tzname );
        if ( tmp_compexpr_right_2 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
            Py_DECREF( tmp_compexpr_left_2 );

            exception_lineno = 77;
            type_description_1 = "o";
            goto frame_exception_exit_1;
        }
        tmp_res = RICH_COMPARE_BOOL_NOTEQ_OBJECT_OBJECT( tmp_compexpr_left_2, tmp_compexpr_right_2 );
        Py_DECREF( tmp_compexpr_left_2 );
        Py_DECREF( tmp_compexpr_right_2 );
        if ( tmp_res == -1 )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 77;
            type_description_1 = "o";
            goto frame_exception_exit_1;
        }
        tmp_or_left_value_1 = ( tmp_res != 0 ) ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
        tmp_or_left_truth_1 = tmp_or_left_value_1 == NUITKA_BOOL_TRUE ? 1 : 0;
        if ( tmp_or_left_truth_1 == 1 )
        {
            goto or_left_1;
        }
        else
        {
            goto or_right_1;
        }
        or_right_1:;
        tmp_mvar_value_4 = GET_STRING_DICT_VALUE( moduledict__strptime, (Nuitka_StringObject *)const_str_plain_time );

        if (unlikely( tmp_mvar_value_4 == NULL ))
        {
            tmp_mvar_value_4 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_time );
        }

        if ( tmp_mvar_value_4 == NULL )
        {

            exception_type = PyExc_NameError;
            Py_INCREF( exception_type );
            exception_value = PyUnicode_FromFormat( "name '%s' is not defined", "time" );
            exception_tb = NULL;
            NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
            CHAIN_EXCEPTION( exception_value );

            exception_lineno = 77;
            type_description_1 = "o";
            goto frame_exception_exit_1;
        }

        tmp_source_name_4 = tmp_mvar_value_4;
        tmp_compexpr_left_3 = LOOKUP_ATTRIBUTE( tmp_source_name_4, const_str_plain_daylight );
        if ( tmp_compexpr_left_3 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 77;
            type_description_1 = "o";
            goto frame_exception_exit_1;
        }
        CHECK_OBJECT( par_self );
        tmp_source_name_5 = par_self;
        tmp_compexpr_right_3 = LOOKUP_ATTRIBUTE( tmp_source_name_5, const_str_plain_daylight );
        if ( tmp_compexpr_right_3 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
            Py_DECREF( tmp_compexpr_left_3 );

            exception_lineno = 77;
            type_description_1 = "o";
            goto frame_exception_exit_1;
        }
        tmp_res = RICH_COMPARE_BOOL_NOTEQ_OBJECT_OBJECT( tmp_compexpr_left_3, tmp_compexpr_right_3 );
        Py_DECREF( tmp_compexpr_left_3 );
        Py_DECREF( tmp_compexpr_right_3 );
        if ( tmp_res == -1 )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 77;
            type_description_1 = "o";
            goto frame_exception_exit_1;
        }
        tmp_or_right_value_1 = ( tmp_res != 0 ) ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
        tmp_condition_result_2 = tmp_or_right_value_1;
        goto or_end_1;
        or_left_1:;
        tmp_condition_result_2 = tmp_or_left_value_1;
        or_end_1:;
        if ( tmp_condition_result_2 == NUITKA_BOOL_TRUE )
        {
            goto branch_yes_2;
        }
        else
        {
            goto branch_no_2;
        }
        branch_yes_2:;
        {
            PyObject *tmp_raise_type_2;
            PyObject *tmp_make_exception_arg_2;
            tmp_make_exception_arg_2 = const_str_digest_4813bdb85fc9d2403fae86959757c450;
            frame_db18c91e2480c1832ae8445405c2fd5c->m_frame.f_lineno = 78;
            {
                PyObject *call_args[] = { tmp_make_exception_arg_2 };
                tmp_raise_type_2 = CALL_FUNCTION_WITH_ARGS1( PyExc_ValueError, call_args );
            }

            assert( !(tmp_raise_type_2 == NULL) );
            exception_type = tmp_raise_type_2;
            exception_lineno = 78;
            RAISE_EXCEPTION_WITH_TYPE( &exception_type, &exception_value, &exception_tb );
            type_description_1 = "o";
            goto frame_exception_exit_1;
        }
        branch_no_2:;
    }

#if 0
    RESTORE_FRAME_EXCEPTION( frame_db18c91e2480c1832ae8445405c2fd5c );
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto frame_no_exception_1;

    frame_exception_exit_1:;

#if 0
    RESTORE_FRAME_EXCEPTION( frame_db18c91e2480c1832ae8445405c2fd5c );
#endif

    if ( exception_tb == NULL )
    {
        exception_tb = MAKE_TRACEBACK( frame_db18c91e2480c1832ae8445405c2fd5c, exception_lineno );
    }
    else if ( exception_tb->tb_frame != &frame_db18c91e2480c1832ae8445405c2fd5c->m_frame )
    {
        exception_tb = ADD_TRACEBACK( exception_tb, frame_db18c91e2480c1832ae8445405c2fd5c, exception_lineno );
    }

    // Attachs locals to frame if any.
    Nuitka_Frame_AttachLocals(
        (struct Nuitka_FrameObject *)frame_db18c91e2480c1832ae8445405c2fd5c,
        type_description_1,
        par_self
    );


    // Release cached frame.
    if ( frame_db18c91e2480c1832ae8445405c2fd5c == cache_frame_db18c91e2480c1832ae8445405c2fd5c )
    {
        Py_DECREF( frame_db18c91e2480c1832ae8445405c2fd5c );
    }
    cache_frame_db18c91e2480c1832ae8445405c2fd5c = NULL;

    assertFrameObject( frame_db18c91e2480c1832ae8445405c2fd5c );

    // Put the previous frame back on top.
    popFrameStack();

    // Return the error.
    goto try_except_handler_1;

    frame_no_exception_1:;
    tmp_return_value = Py_None;
    Py_INCREF( tmp_return_value );
    goto try_return_handler_1;
    // tried codes exits in all cases
    NUITKA_CANNOT_GET_HERE( _strptime$$$function_2___init__ );
    return NULL;
    // Return handler code:
    try_return_handler_1:;
    CHECK_OBJECT( (PyObject *)par_self );
    Py_DECREF( par_self );
    par_self = NULL;

    goto function_return_exit;
    // Exception handler code:
    try_except_handler_1:;
    exception_keeper_type_1 = exception_type;
    exception_keeper_value_1 = exception_value;
    exception_keeper_tb_1 = exception_tb;
    exception_keeper_lineno_1 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    CHECK_OBJECT( (PyObject *)par_self );
    Py_DECREF( par_self );
    par_self = NULL;

    // Re-raise.
    exception_type = exception_keeper_type_1;
    exception_value = exception_keeper_value_1;
    exception_tb = exception_keeper_tb_1;
    exception_lineno = exception_keeper_lineno_1;

    goto function_exception_exit;
    // End of try:

    // Return statement must have exited already.
    NUITKA_CANNOT_GET_HERE( _strptime$$$function_2___init__ );
    return NULL;

function_exception_exit:
    assert( exception_type );
    RESTORE_ERROR_OCCURRED( exception_type, exception_value, exception_tb );

    return NULL;

function_return_exit:
   // Function cleanup code if any.


   // Actual function exit with return value, making sure we did not make
   // the error status worse despite non-NULL return.
   CHECK_OBJECT( tmp_return_value );
   assert( had_error || !ERROR_OCCURRED() );
   return tmp_return_value;
}


static PyObject *impl__strptime$$$function_3___pad( struct Nuitka_FunctionObject const *self, PyObject **python_pars )
{
    // Preserve error status for checks
#ifndef __NUITKA_NO_ASSERT__
    NUITKA_MAY_BE_UNUSED bool had_error = ERROR_OCCURRED();
#endif

    // Local variable declarations.
    PyObject *par_self = python_pars[ 0 ];
    PyObject *par_seq = python_pars[ 1 ];
    PyObject *par_front = python_pars[ 2 ];
    struct Nuitka_FrameObject *frame_957545efe84ec5b080d34a969999bbb4;
    NUITKA_MAY_BE_UNUSED char const *type_description_1 = NULL;
    PyObject *exception_type = NULL;
    PyObject *exception_value = NULL;
    PyTracebackObject *exception_tb = NULL;
    NUITKA_MAY_BE_UNUSED int exception_lineno = 0;
    static struct Nuitka_FrameObject *cache_frame_957545efe84ec5b080d34a969999bbb4 = NULL;
    PyObject *tmp_return_value = NULL;
    PyObject *exception_keeper_type_1;
    PyObject *exception_keeper_value_1;
    PyTracebackObject *exception_keeper_tb_1;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_1;

    // Actual function body.
    // Tried code:
    MAKE_OR_REUSE_FRAME( cache_frame_957545efe84ec5b080d34a969999bbb4, codeobj_957545efe84ec5b080d34a969999bbb4, module__strptime, sizeof(void *)+sizeof(void *)+sizeof(void *) );
    frame_957545efe84ec5b080d34a969999bbb4 = cache_frame_957545efe84ec5b080d34a969999bbb4;

    // Push the new frame as the currently active one.
    pushFrameStack( frame_957545efe84ec5b080d34a969999bbb4 );

    // Mark the frame object as in use, ref count 1 will be up for reuse.
    assert( Py_REFCNT( frame_957545efe84ec5b080d34a969999bbb4 ) == 2 ); // Frame stack

    // Framed code:
    {
        PyObject *tmp_assign_source_1;
        PyObject *tmp_list_arg_1;
        CHECK_OBJECT( par_seq );
        tmp_list_arg_1 = par_seq;
        tmp_assign_source_1 = PySequence_List( tmp_list_arg_1 );
        if ( tmp_assign_source_1 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 82;
            type_description_1 = "ooo";
            goto frame_exception_exit_1;
        }
        {
            PyObject *old = par_seq;
            assert( old != NULL );
            par_seq = tmp_assign_source_1;
            Py_DECREF( old );
        }

    }
    {
        nuitka_bool tmp_condition_result_1;
        int tmp_truth_name_1;
        CHECK_OBJECT( par_front );
        tmp_truth_name_1 = CHECK_IF_TRUE( par_front );
        if ( tmp_truth_name_1 == -1 )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 83;
            type_description_1 = "ooo";
            goto frame_exception_exit_1;
        }
        tmp_condition_result_1 = tmp_truth_name_1 == 1 ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
        if ( tmp_condition_result_1 == NUITKA_BOOL_TRUE )
        {
            goto branch_yes_1;
        }
        else
        {
            goto branch_no_1;
        }
        branch_yes_1:;
        {
            PyObject *tmp_called_instance_1;
            PyObject *tmp_call_result_1;
            CHECK_OBJECT( par_seq );
            tmp_called_instance_1 = par_seq;
            frame_957545efe84ec5b080d34a969999bbb4->m_frame.f_lineno = 84;
            tmp_call_result_1 = CALL_METHOD_WITH_ARGS2( tmp_called_instance_1, const_str_plain_insert, &PyTuple_GET_ITEM( const_tuple_int_0_str_empty_tuple, 0 ) );

            if ( tmp_call_result_1 == NULL )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 84;
                type_description_1 = "ooo";
                goto frame_exception_exit_1;
            }
            Py_DECREF( tmp_call_result_1 );
        }
        goto branch_end_1;
        branch_no_1:;
        {
            PyObject *tmp_called_instance_2;
            PyObject *tmp_call_result_2;
            CHECK_OBJECT( par_seq );
            tmp_called_instance_2 = par_seq;
            frame_957545efe84ec5b080d34a969999bbb4->m_frame.f_lineno = 86;
            tmp_call_result_2 = CALL_METHOD_WITH_ARGS1( tmp_called_instance_2, const_str_plain_append, &PyTuple_GET_ITEM( const_tuple_str_empty_tuple, 0 ) );

            if ( tmp_call_result_2 == NULL )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 86;
                type_description_1 = "ooo";
                goto frame_exception_exit_1;
            }
            Py_DECREF( tmp_call_result_2 );
        }
        branch_end_1:;
    }

#if 0
    RESTORE_FRAME_EXCEPTION( frame_957545efe84ec5b080d34a969999bbb4 );
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto frame_no_exception_1;

    frame_exception_exit_1:;

#if 0
    RESTORE_FRAME_EXCEPTION( frame_957545efe84ec5b080d34a969999bbb4 );
#endif

    if ( exception_tb == NULL )
    {
        exception_tb = MAKE_TRACEBACK( frame_957545efe84ec5b080d34a969999bbb4, exception_lineno );
    }
    else if ( exception_tb->tb_frame != &frame_957545efe84ec5b080d34a969999bbb4->m_frame )
    {
        exception_tb = ADD_TRACEBACK( exception_tb, frame_957545efe84ec5b080d34a969999bbb4, exception_lineno );
    }

    // Attachs locals to frame if any.
    Nuitka_Frame_AttachLocals(
        (struct Nuitka_FrameObject *)frame_957545efe84ec5b080d34a969999bbb4,
        type_description_1,
        par_self,
        par_seq,
        par_front
    );


    // Release cached frame.
    if ( frame_957545efe84ec5b080d34a969999bbb4 == cache_frame_957545efe84ec5b080d34a969999bbb4 )
    {
        Py_DECREF( frame_957545efe84ec5b080d34a969999bbb4 );
    }
    cache_frame_957545efe84ec5b080d34a969999bbb4 = NULL;

    assertFrameObject( frame_957545efe84ec5b080d34a969999bbb4 );

    // Put the previous frame back on top.
    popFrameStack();

    // Return the error.
    goto try_except_handler_1;

    frame_no_exception_1:;
    CHECK_OBJECT( par_seq );
    tmp_return_value = par_seq;
    Py_INCREF( tmp_return_value );
    goto try_return_handler_1;
    // tried codes exits in all cases
    NUITKA_CANNOT_GET_HERE( _strptime$$$function_3___pad );
    return NULL;
    // Return handler code:
    try_return_handler_1:;
    CHECK_OBJECT( (PyObject *)par_self );
    Py_DECREF( par_self );
    par_self = NULL;

    CHECK_OBJECT( (PyObject *)par_seq );
    Py_DECREF( par_seq );
    par_seq = NULL;

    CHECK_OBJECT( (PyObject *)par_front );
    Py_DECREF( par_front );
    par_front = NULL;

    goto function_return_exit;
    // Exception handler code:
    try_except_handler_1:;
    exception_keeper_type_1 = exception_type;
    exception_keeper_value_1 = exception_value;
    exception_keeper_tb_1 = exception_tb;
    exception_keeper_lineno_1 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    CHECK_OBJECT( (PyObject *)par_self );
    Py_DECREF( par_self );
    par_self = NULL;

    CHECK_OBJECT( (PyObject *)par_seq );
    Py_DECREF( par_seq );
    par_seq = NULL;

    CHECK_OBJECT( (PyObject *)par_front );
    Py_DECREF( par_front );
    par_front = NULL;

    // Re-raise.
    exception_type = exception_keeper_type_1;
    exception_value = exception_keeper_value_1;
    exception_tb = exception_keeper_tb_1;
    exception_lineno = exception_keeper_lineno_1;

    goto function_exception_exit;
    // End of try:

    // Return statement must have exited already.
    NUITKA_CANNOT_GET_HERE( _strptime$$$function_3___pad );
    return NULL;

function_exception_exit:
    assert( exception_type );
    RESTORE_ERROR_OCCURRED( exception_type, exception_value, exception_tb );

    return NULL;

function_return_exit:
   // Function cleanup code if any.


   // Actual function exit with return value, making sure we did not make
   // the error status worse despite non-NULL return.
   CHECK_OBJECT( tmp_return_value );
   assert( had_error || !ERROR_OCCURRED() );
   return tmp_return_value;
}


static PyObject *impl__strptime$$$function_4___calc_weekday( struct Nuitka_FunctionObject const *self, PyObject **python_pars )
{
    // Preserve error status for checks
#ifndef __NUITKA_NO_ASSERT__
    NUITKA_MAY_BE_UNUSED bool had_error = ERROR_OCCURRED();
#endif

    // Local variable declarations.
    PyObject *par_self = python_pars[ 0 ];
    PyObject *var_a_weekday = NULL;
    PyObject *var_f_weekday = NULL;
    PyObject *outline_0_var_i = NULL;
    PyObject *outline_1_var_i = NULL;
    PyObject *tmp_listcomp_1__$0 = NULL;
    PyObject *tmp_listcomp_1__contraction = NULL;
    PyObject *tmp_listcomp_1__iter_value_0 = NULL;
    PyObject *tmp_listcomp_2__$0 = NULL;
    PyObject *tmp_listcomp_2__contraction = NULL;
    PyObject *tmp_listcomp_2__iter_value_0 = NULL;
    struct Nuitka_FrameObject *frame_50088acb7867a7649aefc1a93e216267;
    NUITKA_MAY_BE_UNUSED char const *type_description_1 = NULL;
    struct Nuitka_FrameObject *frame_bf758a3d8324b0d4d5087b418b221c0f_2;
    NUITKA_MAY_BE_UNUSED char const *type_description_2 = NULL;
    PyObject *exception_type = NULL;
    PyObject *exception_value = NULL;
    PyTracebackObject *exception_tb = NULL;
    NUITKA_MAY_BE_UNUSED int exception_lineno = 0;
    int tmp_res;
    PyObject *exception_keeper_type_1;
    PyObject *exception_keeper_value_1;
    PyTracebackObject *exception_keeper_tb_1;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_1;
    static struct Nuitka_FrameObject *cache_frame_bf758a3d8324b0d4d5087b418b221c0f_2 = NULL;
    PyObject *exception_keeper_type_2;
    PyObject *exception_keeper_value_2;
    PyTracebackObject *exception_keeper_tb_2;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_2;
    struct Nuitka_FrameObject *frame_f88a2de6eba3a60fc603af4a7c553cac_3;
    NUITKA_MAY_BE_UNUSED char const *type_description_3 = NULL;
    PyObject *exception_keeper_type_3;
    PyObject *exception_keeper_value_3;
    PyTracebackObject *exception_keeper_tb_3;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_3;
    static struct Nuitka_FrameObject *cache_frame_f88a2de6eba3a60fc603af4a7c553cac_3 = NULL;
    PyObject *exception_keeper_type_4;
    PyObject *exception_keeper_value_4;
    PyTracebackObject *exception_keeper_tb_4;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_4;
    bool tmp_result;
    static struct Nuitka_FrameObject *cache_frame_50088acb7867a7649aefc1a93e216267 = NULL;
    PyObject *tmp_return_value = NULL;
    PyObject *exception_keeper_type_5;
    PyObject *exception_keeper_value_5;
    PyTracebackObject *exception_keeper_tb_5;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_5;

    // Actual function body.
    // Tried code:
    MAKE_OR_REUSE_FRAME( cache_frame_50088acb7867a7649aefc1a93e216267, codeobj_50088acb7867a7649aefc1a93e216267, module__strptime, sizeof(void *)+sizeof(void *)+sizeof(void *) );
    frame_50088acb7867a7649aefc1a93e216267 = cache_frame_50088acb7867a7649aefc1a93e216267;

    // Push the new frame as the currently active one.
    pushFrameStack( frame_50088acb7867a7649aefc1a93e216267 );

    // Mark the frame object as in use, ref count 1 will be up for reuse.
    assert( Py_REFCNT( frame_50088acb7867a7649aefc1a93e216267 ) == 2 ); // Frame stack

    // Framed code:
    {
        PyObject *tmp_assign_source_1;
        {
            PyObject *tmp_assign_source_2;
            PyObject *tmp_iter_arg_1;
            tmp_iter_arg_1 = const_xrange_0_7;
            tmp_assign_source_2 = MAKE_ITERATOR( tmp_iter_arg_1 );
            assert( !(tmp_assign_source_2 == NULL) );
            assert( tmp_listcomp_1__$0 == NULL );
            tmp_listcomp_1__$0 = tmp_assign_source_2;
        }
        {
            PyObject *tmp_assign_source_3;
            tmp_assign_source_3 = PyList_New( 0 );
            assert( tmp_listcomp_1__contraction == NULL );
            tmp_listcomp_1__contraction = tmp_assign_source_3;
        }
        // Tried code:
        MAKE_OR_REUSE_FRAME( cache_frame_bf758a3d8324b0d4d5087b418b221c0f_2, codeobj_bf758a3d8324b0d4d5087b418b221c0f, module__strptime, sizeof(void *) );
        frame_bf758a3d8324b0d4d5087b418b221c0f_2 = cache_frame_bf758a3d8324b0d4d5087b418b221c0f_2;

        // Push the new frame as the currently active one.
        pushFrameStack( frame_bf758a3d8324b0d4d5087b418b221c0f_2 );

        // Mark the frame object as in use, ref count 1 will be up for reuse.
        assert( Py_REFCNT( frame_bf758a3d8324b0d4d5087b418b221c0f_2 ) == 2 ); // Frame stack

        // Framed code:
        // Tried code:
        loop_start_1:;
        {
            PyObject *tmp_next_source_1;
            PyObject *tmp_assign_source_4;
            CHECK_OBJECT( tmp_listcomp_1__$0 );
            tmp_next_source_1 = tmp_listcomp_1__$0;
            tmp_assign_source_4 = ITERATOR_NEXT( tmp_next_source_1 );
            if ( tmp_assign_source_4 == NULL )
            {
                if ( CHECK_AND_CLEAR_STOP_ITERATION_OCCURRED() )
                {

                    goto loop_end_1;
                }
                else
                {

                    FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
                    type_description_2 = "o";
                    exception_lineno = 92;
                    goto try_except_handler_3;
                }
            }

            {
                PyObject *old = tmp_listcomp_1__iter_value_0;
                tmp_listcomp_1__iter_value_0 = tmp_assign_source_4;
                Py_XDECREF( old );
            }

        }
        {
            PyObject *tmp_assign_source_5;
            CHECK_OBJECT( tmp_listcomp_1__iter_value_0 );
            tmp_assign_source_5 = tmp_listcomp_1__iter_value_0;
            {
                PyObject *old = outline_0_var_i;
                outline_0_var_i = tmp_assign_source_5;
                Py_INCREF( outline_0_var_i );
                Py_XDECREF( old );
            }

        }
        {
            PyObject *tmp_append_list_1;
            PyObject *tmp_append_value_1;
            PyObject *tmp_called_instance_1;
            PyObject *tmp_subscribed_name_1;
            PyObject *tmp_source_name_1;
            PyObject *tmp_mvar_value_1;
            PyObject *tmp_subscript_name_1;
            CHECK_OBJECT( tmp_listcomp_1__contraction );
            tmp_append_list_1 = tmp_listcomp_1__contraction;
            tmp_mvar_value_1 = GET_STRING_DICT_VALUE( moduledict__strptime, (Nuitka_StringObject *)const_str_plain_calendar );

            if (unlikely( tmp_mvar_value_1 == NULL ))
            {
                tmp_mvar_value_1 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_calendar );
            }

            if ( tmp_mvar_value_1 == NULL )
            {

                exception_type = PyExc_NameError;
                Py_INCREF( exception_type );
                exception_value = PyUnicode_FromFormat( "name '%s' is not defined", "calendar" );
                exception_tb = NULL;
                NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
                CHAIN_EXCEPTION( exception_value );

                exception_lineno = 92;
                type_description_2 = "o";
                goto try_except_handler_3;
            }

            tmp_source_name_1 = tmp_mvar_value_1;
            tmp_subscribed_name_1 = LOOKUP_ATTRIBUTE( tmp_source_name_1, const_str_plain_day_abbr );
            if ( tmp_subscribed_name_1 == NULL )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 92;
                type_description_2 = "o";
                goto try_except_handler_3;
            }
            CHECK_OBJECT( outline_0_var_i );
            tmp_subscript_name_1 = outline_0_var_i;
            tmp_called_instance_1 = LOOKUP_SUBSCRIPT( tmp_subscribed_name_1, tmp_subscript_name_1 );
            Py_DECREF( tmp_subscribed_name_1 );
            if ( tmp_called_instance_1 == NULL )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 92;
                type_description_2 = "o";
                goto try_except_handler_3;
            }
            frame_bf758a3d8324b0d4d5087b418b221c0f_2->m_frame.f_lineno = 92;
            tmp_append_value_1 = CALL_METHOD_NO_ARGS( tmp_called_instance_1, const_str_plain_lower );
            Py_DECREF( tmp_called_instance_1 );
            if ( tmp_append_value_1 == NULL )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 92;
                type_description_2 = "o";
                goto try_except_handler_3;
            }
            assert( PyList_Check( tmp_append_list_1 ) );
            tmp_res = PyList_Append( tmp_append_list_1, tmp_append_value_1 );
            Py_DECREF( tmp_append_value_1 );
            if ( tmp_res == -1 )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 92;
                type_description_2 = "o";
                goto try_except_handler_3;
            }
        }
        if ( CONSIDER_THREADING() == false )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 92;
            type_description_2 = "o";
            goto try_except_handler_3;
        }
        goto loop_start_1;
        loop_end_1:;
        CHECK_OBJECT( tmp_listcomp_1__contraction );
        tmp_assign_source_1 = tmp_listcomp_1__contraction;
        Py_INCREF( tmp_assign_source_1 );
        goto try_return_handler_3;
        // tried codes exits in all cases
        NUITKA_CANNOT_GET_HERE( _strptime$$$function_4___calc_weekday );
        return NULL;
        // Return handler code:
        try_return_handler_3:;
        CHECK_OBJECT( (PyObject *)tmp_listcomp_1__$0 );
        Py_DECREF( tmp_listcomp_1__$0 );
        tmp_listcomp_1__$0 = NULL;

        CHECK_OBJECT( (PyObject *)tmp_listcomp_1__contraction );
        Py_DECREF( tmp_listcomp_1__contraction );
        tmp_listcomp_1__contraction = NULL;

        Py_XDECREF( tmp_listcomp_1__iter_value_0 );
        tmp_listcomp_1__iter_value_0 = NULL;

        goto frame_return_exit_1;
        // Exception handler code:
        try_except_handler_3:;
        exception_keeper_type_1 = exception_type;
        exception_keeper_value_1 = exception_value;
        exception_keeper_tb_1 = exception_tb;
        exception_keeper_lineno_1 = exception_lineno;
        exception_type = NULL;
        exception_value = NULL;
        exception_tb = NULL;
        exception_lineno = 0;

        CHECK_OBJECT( (PyObject *)tmp_listcomp_1__$0 );
        Py_DECREF( tmp_listcomp_1__$0 );
        tmp_listcomp_1__$0 = NULL;

        CHECK_OBJECT( (PyObject *)tmp_listcomp_1__contraction );
        Py_DECREF( tmp_listcomp_1__contraction );
        tmp_listcomp_1__contraction = NULL;

        Py_XDECREF( tmp_listcomp_1__iter_value_0 );
        tmp_listcomp_1__iter_value_0 = NULL;

        // Re-raise.
        exception_type = exception_keeper_type_1;
        exception_value = exception_keeper_value_1;
        exception_tb = exception_keeper_tb_1;
        exception_lineno = exception_keeper_lineno_1;

        goto frame_exception_exit_2;
        // End of try:

#if 0
        RESTORE_FRAME_EXCEPTION( frame_bf758a3d8324b0d4d5087b418b221c0f_2 );
#endif

        // Put the previous frame back on top.
        popFrameStack();

        goto frame_no_exception_1;

        frame_return_exit_1:;
#if 0
        RESTORE_FRAME_EXCEPTION( frame_bf758a3d8324b0d4d5087b418b221c0f_2 );
#endif

        // Put the previous frame back on top.
        popFrameStack();

        goto try_return_handler_2;

        frame_exception_exit_2:;

#if 0
        RESTORE_FRAME_EXCEPTION( frame_bf758a3d8324b0d4d5087b418b221c0f_2 );
#endif

        if ( exception_tb == NULL )
        {
            exception_tb = MAKE_TRACEBACK( frame_bf758a3d8324b0d4d5087b418b221c0f_2, exception_lineno );
        }
        else if ( exception_tb->tb_frame != &frame_bf758a3d8324b0d4d5087b418b221c0f_2->m_frame )
        {
            exception_tb = ADD_TRACEBACK( exception_tb, frame_bf758a3d8324b0d4d5087b418b221c0f_2, exception_lineno );
        }

        // Attachs locals to frame if any.
        Nuitka_Frame_AttachLocals(
            (struct Nuitka_FrameObject *)frame_bf758a3d8324b0d4d5087b418b221c0f_2,
            type_description_2,
            outline_0_var_i
        );


        // Release cached frame.
        if ( frame_bf758a3d8324b0d4d5087b418b221c0f_2 == cache_frame_bf758a3d8324b0d4d5087b418b221c0f_2 )
        {
            Py_DECREF( frame_bf758a3d8324b0d4d5087b418b221c0f_2 );
        }
        cache_frame_bf758a3d8324b0d4d5087b418b221c0f_2 = NULL;

        assertFrameObject( frame_bf758a3d8324b0d4d5087b418b221c0f_2 );

        // Put the previous frame back on top.
        popFrameStack();

        // Return the error.
        goto nested_frame_exit_1;

        frame_no_exception_1:;
        goto skip_nested_handling_1;
        nested_frame_exit_1:;
        type_description_1 = "ooo";
        goto try_except_handler_2;
        skip_nested_handling_1:;
        // tried codes exits in all cases
        NUITKA_CANNOT_GET_HERE( _strptime$$$function_4___calc_weekday );
        return NULL;
        // Return handler code:
        try_return_handler_2:;
        Py_XDECREF( outline_0_var_i );
        outline_0_var_i = NULL;

        goto outline_result_1;
        // Exception handler code:
        try_except_handler_2:;
        exception_keeper_type_2 = exception_type;
        exception_keeper_value_2 = exception_value;
        exception_keeper_tb_2 = exception_tb;
        exception_keeper_lineno_2 = exception_lineno;
        exception_type = NULL;
        exception_value = NULL;
        exception_tb = NULL;
        exception_lineno = 0;

        Py_XDECREF( outline_0_var_i );
        outline_0_var_i = NULL;

        // Re-raise.
        exception_type = exception_keeper_type_2;
        exception_value = exception_keeper_value_2;
        exception_tb = exception_keeper_tb_2;
        exception_lineno = exception_keeper_lineno_2;

        goto outline_exception_1;
        // End of try:
        // Return statement must have exited already.
        NUITKA_CANNOT_GET_HERE( _strptime$$$function_4___calc_weekday );
        return NULL;
        outline_exception_1:;
        exception_lineno = 92;
        goto frame_exception_exit_1;
        outline_result_1:;
        assert( var_a_weekday == NULL );
        var_a_weekday = tmp_assign_source_1;
    }
    {
        PyObject *tmp_assign_source_6;
        {
            PyObject *tmp_assign_source_7;
            PyObject *tmp_iter_arg_2;
            tmp_iter_arg_2 = const_xrange_0_7;
            tmp_assign_source_7 = MAKE_ITERATOR( tmp_iter_arg_2 );
            assert( !(tmp_assign_source_7 == NULL) );
            assert( tmp_listcomp_2__$0 == NULL );
            tmp_listcomp_2__$0 = tmp_assign_source_7;
        }
        {
            PyObject *tmp_assign_source_8;
            tmp_assign_source_8 = PyList_New( 0 );
            assert( tmp_listcomp_2__contraction == NULL );
            tmp_listcomp_2__contraction = tmp_assign_source_8;
        }
        // Tried code:
        MAKE_OR_REUSE_FRAME( cache_frame_f88a2de6eba3a60fc603af4a7c553cac_3, codeobj_f88a2de6eba3a60fc603af4a7c553cac, module__strptime, sizeof(void *) );
        frame_f88a2de6eba3a60fc603af4a7c553cac_3 = cache_frame_f88a2de6eba3a60fc603af4a7c553cac_3;

        // Push the new frame as the currently active one.
        pushFrameStack( frame_f88a2de6eba3a60fc603af4a7c553cac_3 );

        // Mark the frame object as in use, ref count 1 will be up for reuse.
        assert( Py_REFCNT( frame_f88a2de6eba3a60fc603af4a7c553cac_3 ) == 2 ); // Frame stack

        // Framed code:
        // Tried code:
        loop_start_2:;
        {
            PyObject *tmp_next_source_2;
            PyObject *tmp_assign_source_9;
            CHECK_OBJECT( tmp_listcomp_2__$0 );
            tmp_next_source_2 = tmp_listcomp_2__$0;
            tmp_assign_source_9 = ITERATOR_NEXT( tmp_next_source_2 );
            if ( tmp_assign_source_9 == NULL )
            {
                if ( CHECK_AND_CLEAR_STOP_ITERATION_OCCURRED() )
                {

                    goto loop_end_2;
                }
                else
                {

                    FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
                    type_description_2 = "o";
                    exception_lineno = 93;
                    goto try_except_handler_5;
                }
            }

            {
                PyObject *old = tmp_listcomp_2__iter_value_0;
                tmp_listcomp_2__iter_value_0 = tmp_assign_source_9;
                Py_XDECREF( old );
            }

        }
        {
            PyObject *tmp_assign_source_10;
            CHECK_OBJECT( tmp_listcomp_2__iter_value_0 );
            tmp_assign_source_10 = tmp_listcomp_2__iter_value_0;
            {
                PyObject *old = outline_1_var_i;
                outline_1_var_i = tmp_assign_source_10;
                Py_INCREF( outline_1_var_i );
                Py_XDECREF( old );
            }

        }
        {
            PyObject *tmp_append_list_2;
            PyObject *tmp_append_value_2;
            PyObject *tmp_called_instance_2;
            PyObject *tmp_subscribed_name_2;
            PyObject *tmp_source_name_2;
            PyObject *tmp_mvar_value_2;
            PyObject *tmp_subscript_name_2;
            CHECK_OBJECT( tmp_listcomp_2__contraction );
            tmp_append_list_2 = tmp_listcomp_2__contraction;
            tmp_mvar_value_2 = GET_STRING_DICT_VALUE( moduledict__strptime, (Nuitka_StringObject *)const_str_plain_calendar );

            if (unlikely( tmp_mvar_value_2 == NULL ))
            {
                tmp_mvar_value_2 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_calendar );
            }

            if ( tmp_mvar_value_2 == NULL )
            {

                exception_type = PyExc_NameError;
                Py_INCREF( exception_type );
                exception_value = PyUnicode_FromFormat( "name '%s' is not defined", "calendar" );
                exception_tb = NULL;
                NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
                CHAIN_EXCEPTION( exception_value );

                exception_lineno = 93;
                type_description_2 = "o";
                goto try_except_handler_5;
            }

            tmp_source_name_2 = tmp_mvar_value_2;
            tmp_subscribed_name_2 = LOOKUP_ATTRIBUTE( tmp_source_name_2, const_str_plain_day_name );
            if ( tmp_subscribed_name_2 == NULL )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 93;
                type_description_2 = "o";
                goto try_except_handler_5;
            }
            CHECK_OBJECT( outline_1_var_i );
            tmp_subscript_name_2 = outline_1_var_i;
            tmp_called_instance_2 = LOOKUP_SUBSCRIPT( tmp_subscribed_name_2, tmp_subscript_name_2 );
            Py_DECREF( tmp_subscribed_name_2 );
            if ( tmp_called_instance_2 == NULL )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 93;
                type_description_2 = "o";
                goto try_except_handler_5;
            }
            frame_f88a2de6eba3a60fc603af4a7c553cac_3->m_frame.f_lineno = 93;
            tmp_append_value_2 = CALL_METHOD_NO_ARGS( tmp_called_instance_2, const_str_plain_lower );
            Py_DECREF( tmp_called_instance_2 );
            if ( tmp_append_value_2 == NULL )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 93;
                type_description_2 = "o";
                goto try_except_handler_5;
            }
            assert( PyList_Check( tmp_append_list_2 ) );
            tmp_res = PyList_Append( tmp_append_list_2, tmp_append_value_2 );
            Py_DECREF( tmp_append_value_2 );
            if ( tmp_res == -1 )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 93;
                type_description_2 = "o";
                goto try_except_handler_5;
            }
        }
        if ( CONSIDER_THREADING() == false )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 93;
            type_description_2 = "o";
            goto try_except_handler_5;
        }
        goto loop_start_2;
        loop_end_2:;
        CHECK_OBJECT( tmp_listcomp_2__contraction );
        tmp_assign_source_6 = tmp_listcomp_2__contraction;
        Py_INCREF( tmp_assign_source_6 );
        goto try_return_handler_5;
        // tried codes exits in all cases
        NUITKA_CANNOT_GET_HERE( _strptime$$$function_4___calc_weekday );
        return NULL;
        // Return handler code:
        try_return_handler_5:;
        CHECK_OBJECT( (PyObject *)tmp_listcomp_2__$0 );
        Py_DECREF( tmp_listcomp_2__$0 );
        tmp_listcomp_2__$0 = NULL;

        CHECK_OBJECT( (PyObject *)tmp_listcomp_2__contraction );
        Py_DECREF( tmp_listcomp_2__contraction );
        tmp_listcomp_2__contraction = NULL;

        Py_XDECREF( tmp_listcomp_2__iter_value_0 );
        tmp_listcomp_2__iter_value_0 = NULL;

        goto frame_return_exit_2;
        // Exception handler code:
        try_except_handler_5:;
        exception_keeper_type_3 = exception_type;
        exception_keeper_value_3 = exception_value;
        exception_keeper_tb_3 = exception_tb;
        exception_keeper_lineno_3 = exception_lineno;
        exception_type = NULL;
        exception_value = NULL;
        exception_tb = NULL;
        exception_lineno = 0;

        CHECK_OBJECT( (PyObject *)tmp_listcomp_2__$0 );
        Py_DECREF( tmp_listcomp_2__$0 );
        tmp_listcomp_2__$0 = NULL;

        CHECK_OBJECT( (PyObject *)tmp_listcomp_2__contraction );
        Py_DECREF( tmp_listcomp_2__contraction );
        tmp_listcomp_2__contraction = NULL;

        Py_XDECREF( tmp_listcomp_2__iter_value_0 );
        tmp_listcomp_2__iter_value_0 = NULL;

        // Re-raise.
        exception_type = exception_keeper_type_3;
        exception_value = exception_keeper_value_3;
        exception_tb = exception_keeper_tb_3;
        exception_lineno = exception_keeper_lineno_3;

        goto frame_exception_exit_3;
        // End of try:

#if 0
        RESTORE_FRAME_EXCEPTION( frame_f88a2de6eba3a60fc603af4a7c553cac_3 );
#endif

        // Put the previous frame back on top.
        popFrameStack();

        goto frame_no_exception_2;

        frame_return_exit_2:;
#if 0
        RESTORE_FRAME_EXCEPTION( frame_f88a2de6eba3a60fc603af4a7c553cac_3 );
#endif

        // Put the previous frame back on top.
        popFrameStack();

        goto try_return_handler_4;

        frame_exception_exit_3:;

#if 0
        RESTORE_FRAME_EXCEPTION( frame_f88a2de6eba3a60fc603af4a7c553cac_3 );
#endif

        if ( exception_tb == NULL )
        {
            exception_tb = MAKE_TRACEBACK( frame_f88a2de6eba3a60fc603af4a7c553cac_3, exception_lineno );
        }
        else if ( exception_tb->tb_frame != &frame_f88a2de6eba3a60fc603af4a7c553cac_3->m_frame )
        {
            exception_tb = ADD_TRACEBACK( exception_tb, frame_f88a2de6eba3a60fc603af4a7c553cac_3, exception_lineno );
        }

        // Attachs locals to frame if any.
        Nuitka_Frame_AttachLocals(
            (struct Nuitka_FrameObject *)frame_f88a2de6eba3a60fc603af4a7c553cac_3,
            type_description_2,
            outline_1_var_i
        );


        // Release cached frame.
        if ( frame_f88a2de6eba3a60fc603af4a7c553cac_3 == cache_frame_f88a2de6eba3a60fc603af4a7c553cac_3 )
        {
            Py_DECREF( frame_f88a2de6eba3a60fc603af4a7c553cac_3 );
        }
        cache_frame_f88a2de6eba3a60fc603af4a7c553cac_3 = NULL;

        assertFrameObject( frame_f88a2de6eba3a60fc603af4a7c553cac_3 );

        // Put the previous frame back on top.
        popFrameStack();

        // Return the error.
        goto nested_frame_exit_2;

        frame_no_exception_2:;
        goto skip_nested_handling_2;
        nested_frame_exit_2:;
        type_description_1 = "ooo";
        goto try_except_handler_4;
        skip_nested_handling_2:;
        // tried codes exits in all cases
        NUITKA_CANNOT_GET_HERE( _strptime$$$function_4___calc_weekday );
        return NULL;
        // Return handler code:
        try_return_handler_4:;
        Py_XDECREF( outline_1_var_i );
        outline_1_var_i = NULL;

        goto outline_result_2;
        // Exception handler code:
        try_except_handler_4:;
        exception_keeper_type_4 = exception_type;
        exception_keeper_value_4 = exception_value;
        exception_keeper_tb_4 = exception_tb;
        exception_keeper_lineno_4 = exception_lineno;
        exception_type = NULL;
        exception_value = NULL;
        exception_tb = NULL;
        exception_lineno = 0;

        Py_XDECREF( outline_1_var_i );
        outline_1_var_i = NULL;

        // Re-raise.
        exception_type = exception_keeper_type_4;
        exception_value = exception_keeper_value_4;
        exception_tb = exception_keeper_tb_4;
        exception_lineno = exception_keeper_lineno_4;

        goto outline_exception_2;
        // End of try:
        // Return statement must have exited already.
        NUITKA_CANNOT_GET_HERE( _strptime$$$function_4___calc_weekday );
        return NULL;
        outline_exception_2:;
        exception_lineno = 93;
        goto frame_exception_exit_1;
        outline_result_2:;
        assert( var_f_weekday == NULL );
        var_f_weekday = tmp_assign_source_6;
    }
    {
        PyObject *tmp_assattr_name_1;
        PyObject *tmp_assattr_target_1;
        CHECK_OBJECT( var_a_weekday );
        tmp_assattr_name_1 = var_a_weekday;
        CHECK_OBJECT( par_self );
        tmp_assattr_target_1 = par_self;
        tmp_result = SET_ATTRIBUTE( tmp_assattr_target_1, const_str_plain_a_weekday, tmp_assattr_name_1 );
        if ( tmp_result == false )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 94;
            type_description_1 = "ooo";
            goto frame_exception_exit_1;
        }
    }
    {
        PyObject *tmp_assattr_name_2;
        PyObject *tmp_assattr_target_2;
        CHECK_OBJECT( var_f_weekday );
        tmp_assattr_name_2 = var_f_weekday;
        CHECK_OBJECT( par_self );
        tmp_assattr_target_2 = par_self;
        tmp_result = SET_ATTRIBUTE( tmp_assattr_target_2, const_str_plain_f_weekday, tmp_assattr_name_2 );
        if ( tmp_result == false )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 95;
            type_description_1 = "ooo";
            goto frame_exception_exit_1;
        }
    }

#if 0
    RESTORE_FRAME_EXCEPTION( frame_50088acb7867a7649aefc1a93e216267 );
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto frame_no_exception_3;

    frame_exception_exit_1:;

#if 0
    RESTORE_FRAME_EXCEPTION( frame_50088acb7867a7649aefc1a93e216267 );
#endif

    if ( exception_tb == NULL )
    {
        exception_tb = MAKE_TRACEBACK( frame_50088acb7867a7649aefc1a93e216267, exception_lineno );
    }
    else if ( exception_tb->tb_frame != &frame_50088acb7867a7649aefc1a93e216267->m_frame )
    {
        exception_tb = ADD_TRACEBACK( exception_tb, frame_50088acb7867a7649aefc1a93e216267, exception_lineno );
    }

    // Attachs locals to frame if any.
    Nuitka_Frame_AttachLocals(
        (struct Nuitka_FrameObject *)frame_50088acb7867a7649aefc1a93e216267,
        type_description_1,
        par_self,
        var_a_weekday,
        var_f_weekday
    );


    // Release cached frame.
    if ( frame_50088acb7867a7649aefc1a93e216267 == cache_frame_50088acb7867a7649aefc1a93e216267 )
    {
        Py_DECREF( frame_50088acb7867a7649aefc1a93e216267 );
    }
    cache_frame_50088acb7867a7649aefc1a93e216267 = NULL;

    assertFrameObject( frame_50088acb7867a7649aefc1a93e216267 );

    // Put the previous frame back on top.
    popFrameStack();

    // Return the error.
    goto try_except_handler_1;

    frame_no_exception_3:;
    tmp_return_value = Py_None;
    Py_INCREF( tmp_return_value );
    goto try_return_handler_1;
    // tried codes exits in all cases
    NUITKA_CANNOT_GET_HERE( _strptime$$$function_4___calc_weekday );
    return NULL;
    // Return handler code:
    try_return_handler_1:;
    CHECK_OBJECT( (PyObject *)par_self );
    Py_DECREF( par_self );
    par_self = NULL;

    CHECK_OBJECT( (PyObject *)var_a_weekday );
    Py_DECREF( var_a_weekday );
    var_a_weekday = NULL;

    CHECK_OBJECT( (PyObject *)var_f_weekday );
    Py_DECREF( var_f_weekday );
    var_f_weekday = NULL;

    goto function_return_exit;
    // Exception handler code:
    try_except_handler_1:;
    exception_keeper_type_5 = exception_type;
    exception_keeper_value_5 = exception_value;
    exception_keeper_tb_5 = exception_tb;
    exception_keeper_lineno_5 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    CHECK_OBJECT( (PyObject *)par_self );
    Py_DECREF( par_self );
    par_self = NULL;

    Py_XDECREF( var_a_weekday );
    var_a_weekday = NULL;

    Py_XDECREF( var_f_weekday );
    var_f_weekday = NULL;

    // Re-raise.
    exception_type = exception_keeper_type_5;
    exception_value = exception_keeper_value_5;
    exception_tb = exception_keeper_tb_5;
    exception_lineno = exception_keeper_lineno_5;

    goto function_exception_exit;
    // End of try:

    // Return statement must have exited already.
    NUITKA_CANNOT_GET_HERE( _strptime$$$function_4___calc_weekday );
    return NULL;

function_exception_exit:
    assert( exception_type );
    RESTORE_ERROR_OCCURRED( exception_type, exception_value, exception_tb );

    return NULL;

function_return_exit:
   // Function cleanup code if any.


   // Actual function exit with return value, making sure we did not make
   // the error status worse despite non-NULL return.
   CHECK_OBJECT( tmp_return_value );
   assert( had_error || !ERROR_OCCURRED() );
   return tmp_return_value;
}


static PyObject *impl__strptime$$$function_5___calc_month( struct Nuitka_FunctionObject const *self, PyObject **python_pars )
{
    // Preserve error status for checks
#ifndef __NUITKA_NO_ASSERT__
    NUITKA_MAY_BE_UNUSED bool had_error = ERROR_OCCURRED();
#endif

    // Local variable declarations.
    PyObject *par_self = python_pars[ 0 ];
    PyObject *var_a_month = NULL;
    PyObject *var_f_month = NULL;
    PyObject *outline_0_var_i = NULL;
    PyObject *outline_1_var_i = NULL;
    PyObject *tmp_listcomp_1__$0 = NULL;
    PyObject *tmp_listcomp_1__contraction = NULL;
    PyObject *tmp_listcomp_1__iter_value_0 = NULL;
    PyObject *tmp_listcomp_2__$0 = NULL;
    PyObject *tmp_listcomp_2__contraction = NULL;
    PyObject *tmp_listcomp_2__iter_value_0 = NULL;
    struct Nuitka_FrameObject *frame_a2bd7fedebd3e4f98d505ee04dfef0a0;
    NUITKA_MAY_BE_UNUSED char const *type_description_1 = NULL;
    struct Nuitka_FrameObject *frame_89f9b88bf9793ecadd1d2edbb90861c0_2;
    NUITKA_MAY_BE_UNUSED char const *type_description_2 = NULL;
    PyObject *exception_type = NULL;
    PyObject *exception_value = NULL;
    PyTracebackObject *exception_tb = NULL;
    NUITKA_MAY_BE_UNUSED int exception_lineno = 0;
    int tmp_res;
    PyObject *exception_keeper_type_1;
    PyObject *exception_keeper_value_1;
    PyTracebackObject *exception_keeper_tb_1;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_1;
    static struct Nuitka_FrameObject *cache_frame_89f9b88bf9793ecadd1d2edbb90861c0_2 = NULL;
    PyObject *exception_keeper_type_2;
    PyObject *exception_keeper_value_2;
    PyTracebackObject *exception_keeper_tb_2;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_2;
    struct Nuitka_FrameObject *frame_a6ef5fcbeb91dd840f612b5c19ab8c40_3;
    NUITKA_MAY_BE_UNUSED char const *type_description_3 = NULL;
    PyObject *exception_keeper_type_3;
    PyObject *exception_keeper_value_3;
    PyTracebackObject *exception_keeper_tb_3;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_3;
    static struct Nuitka_FrameObject *cache_frame_a6ef5fcbeb91dd840f612b5c19ab8c40_3 = NULL;
    PyObject *exception_keeper_type_4;
    PyObject *exception_keeper_value_4;
    PyTracebackObject *exception_keeper_tb_4;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_4;
    bool tmp_result;
    static struct Nuitka_FrameObject *cache_frame_a2bd7fedebd3e4f98d505ee04dfef0a0 = NULL;
    PyObject *tmp_return_value = NULL;
    PyObject *exception_keeper_type_5;
    PyObject *exception_keeper_value_5;
    PyTracebackObject *exception_keeper_tb_5;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_5;

    // Actual function body.
    // Tried code:
    MAKE_OR_REUSE_FRAME( cache_frame_a2bd7fedebd3e4f98d505ee04dfef0a0, codeobj_a2bd7fedebd3e4f98d505ee04dfef0a0, module__strptime, sizeof(void *)+sizeof(void *)+sizeof(void *) );
    frame_a2bd7fedebd3e4f98d505ee04dfef0a0 = cache_frame_a2bd7fedebd3e4f98d505ee04dfef0a0;

    // Push the new frame as the currently active one.
    pushFrameStack( frame_a2bd7fedebd3e4f98d505ee04dfef0a0 );

    // Mark the frame object as in use, ref count 1 will be up for reuse.
    assert( Py_REFCNT( frame_a2bd7fedebd3e4f98d505ee04dfef0a0 ) == 2 ); // Frame stack

    // Framed code:
    {
        PyObject *tmp_assign_source_1;
        {
            PyObject *tmp_assign_source_2;
            PyObject *tmp_iter_arg_1;
            tmp_iter_arg_1 = const_xrange_0_13;
            tmp_assign_source_2 = MAKE_ITERATOR( tmp_iter_arg_1 );
            assert( !(tmp_assign_source_2 == NULL) );
            assert( tmp_listcomp_1__$0 == NULL );
            tmp_listcomp_1__$0 = tmp_assign_source_2;
        }
        {
            PyObject *tmp_assign_source_3;
            tmp_assign_source_3 = PyList_New( 0 );
            assert( tmp_listcomp_1__contraction == NULL );
            tmp_listcomp_1__contraction = tmp_assign_source_3;
        }
        // Tried code:
        MAKE_OR_REUSE_FRAME( cache_frame_89f9b88bf9793ecadd1d2edbb90861c0_2, codeobj_89f9b88bf9793ecadd1d2edbb90861c0, module__strptime, sizeof(void *) );
        frame_89f9b88bf9793ecadd1d2edbb90861c0_2 = cache_frame_89f9b88bf9793ecadd1d2edbb90861c0_2;

        // Push the new frame as the currently active one.
        pushFrameStack( frame_89f9b88bf9793ecadd1d2edbb90861c0_2 );

        // Mark the frame object as in use, ref count 1 will be up for reuse.
        assert( Py_REFCNT( frame_89f9b88bf9793ecadd1d2edbb90861c0_2 ) == 2 ); // Frame stack

        // Framed code:
        // Tried code:
        loop_start_1:;
        {
            PyObject *tmp_next_source_1;
            PyObject *tmp_assign_source_4;
            CHECK_OBJECT( tmp_listcomp_1__$0 );
            tmp_next_source_1 = tmp_listcomp_1__$0;
            tmp_assign_source_4 = ITERATOR_NEXT( tmp_next_source_1 );
            if ( tmp_assign_source_4 == NULL )
            {
                if ( CHECK_AND_CLEAR_STOP_ITERATION_OCCURRED() )
                {

                    goto loop_end_1;
                }
                else
                {

                    FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
                    type_description_2 = "o";
                    exception_lineno = 99;
                    goto try_except_handler_3;
                }
            }

            {
                PyObject *old = tmp_listcomp_1__iter_value_0;
                tmp_listcomp_1__iter_value_0 = tmp_assign_source_4;
                Py_XDECREF( old );
            }

        }
        {
            PyObject *tmp_assign_source_5;
            CHECK_OBJECT( tmp_listcomp_1__iter_value_0 );
            tmp_assign_source_5 = tmp_listcomp_1__iter_value_0;
            {
                PyObject *old = outline_0_var_i;
                outline_0_var_i = tmp_assign_source_5;
                Py_INCREF( outline_0_var_i );
                Py_XDECREF( old );
            }

        }
        {
            PyObject *tmp_append_list_1;
            PyObject *tmp_append_value_1;
            PyObject *tmp_called_instance_1;
            PyObject *tmp_subscribed_name_1;
            PyObject *tmp_source_name_1;
            PyObject *tmp_mvar_value_1;
            PyObject *tmp_subscript_name_1;
            CHECK_OBJECT( tmp_listcomp_1__contraction );
            tmp_append_list_1 = tmp_listcomp_1__contraction;
            tmp_mvar_value_1 = GET_STRING_DICT_VALUE( moduledict__strptime, (Nuitka_StringObject *)const_str_plain_calendar );

            if (unlikely( tmp_mvar_value_1 == NULL ))
            {
                tmp_mvar_value_1 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_calendar );
            }

            if ( tmp_mvar_value_1 == NULL )
            {

                exception_type = PyExc_NameError;
                Py_INCREF( exception_type );
                exception_value = PyUnicode_FromFormat( "name '%s' is not defined", "calendar" );
                exception_tb = NULL;
                NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
                CHAIN_EXCEPTION( exception_value );

                exception_lineno = 99;
                type_description_2 = "o";
                goto try_except_handler_3;
            }

            tmp_source_name_1 = tmp_mvar_value_1;
            tmp_subscribed_name_1 = LOOKUP_ATTRIBUTE( tmp_source_name_1, const_str_plain_month_abbr );
            if ( tmp_subscribed_name_1 == NULL )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 99;
                type_description_2 = "o";
                goto try_except_handler_3;
            }
            CHECK_OBJECT( outline_0_var_i );
            tmp_subscript_name_1 = outline_0_var_i;
            tmp_called_instance_1 = LOOKUP_SUBSCRIPT( tmp_subscribed_name_1, tmp_subscript_name_1 );
            Py_DECREF( tmp_subscribed_name_1 );
            if ( tmp_called_instance_1 == NULL )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 99;
                type_description_2 = "o";
                goto try_except_handler_3;
            }
            frame_89f9b88bf9793ecadd1d2edbb90861c0_2->m_frame.f_lineno = 99;
            tmp_append_value_1 = CALL_METHOD_NO_ARGS( tmp_called_instance_1, const_str_plain_lower );
            Py_DECREF( tmp_called_instance_1 );
            if ( tmp_append_value_1 == NULL )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 99;
                type_description_2 = "o";
                goto try_except_handler_3;
            }
            assert( PyList_Check( tmp_append_list_1 ) );
            tmp_res = PyList_Append( tmp_append_list_1, tmp_append_value_1 );
            Py_DECREF( tmp_append_value_1 );
            if ( tmp_res == -1 )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 99;
                type_description_2 = "o";
                goto try_except_handler_3;
            }
        }
        if ( CONSIDER_THREADING() == false )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 99;
            type_description_2 = "o";
            goto try_except_handler_3;
        }
        goto loop_start_1;
        loop_end_1:;
        CHECK_OBJECT( tmp_listcomp_1__contraction );
        tmp_assign_source_1 = tmp_listcomp_1__contraction;
        Py_INCREF( tmp_assign_source_1 );
        goto try_return_handler_3;
        // tried codes exits in all cases
        NUITKA_CANNOT_GET_HERE( _strptime$$$function_5___calc_month );
        return NULL;
        // Return handler code:
        try_return_handler_3:;
        CHECK_OBJECT( (PyObject *)tmp_listcomp_1__$0 );
        Py_DECREF( tmp_listcomp_1__$0 );
        tmp_listcomp_1__$0 = NULL;

        CHECK_OBJECT( (PyObject *)tmp_listcomp_1__contraction );
        Py_DECREF( tmp_listcomp_1__contraction );
        tmp_listcomp_1__contraction = NULL;

        Py_XDECREF( tmp_listcomp_1__iter_value_0 );
        tmp_listcomp_1__iter_value_0 = NULL;

        goto frame_return_exit_1;
        // Exception handler code:
        try_except_handler_3:;
        exception_keeper_type_1 = exception_type;
        exception_keeper_value_1 = exception_value;
        exception_keeper_tb_1 = exception_tb;
        exception_keeper_lineno_1 = exception_lineno;
        exception_type = NULL;
        exception_value = NULL;
        exception_tb = NULL;
        exception_lineno = 0;

        CHECK_OBJECT( (PyObject *)tmp_listcomp_1__$0 );
        Py_DECREF( tmp_listcomp_1__$0 );
        tmp_listcomp_1__$0 = NULL;

        CHECK_OBJECT( (PyObject *)tmp_listcomp_1__contraction );
        Py_DECREF( tmp_listcomp_1__contraction );
        tmp_listcomp_1__contraction = NULL;

        Py_XDECREF( tmp_listcomp_1__iter_value_0 );
        tmp_listcomp_1__iter_value_0 = NULL;

        // Re-raise.
        exception_type = exception_keeper_type_1;
        exception_value = exception_keeper_value_1;
        exception_tb = exception_keeper_tb_1;
        exception_lineno = exception_keeper_lineno_1;

        goto frame_exception_exit_2;
        // End of try:

#if 0
        RESTORE_FRAME_EXCEPTION( frame_89f9b88bf9793ecadd1d2edbb90861c0_2 );
#endif

        // Put the previous frame back on top.
        popFrameStack();

        goto frame_no_exception_1;

        frame_return_exit_1:;
#if 0
        RESTORE_FRAME_EXCEPTION( frame_89f9b88bf9793ecadd1d2edbb90861c0_2 );
#endif

        // Put the previous frame back on top.
        popFrameStack();

        goto try_return_handler_2;

        frame_exception_exit_2:;

#if 0
        RESTORE_FRAME_EXCEPTION( frame_89f9b88bf9793ecadd1d2edbb90861c0_2 );
#endif

        if ( exception_tb == NULL )
        {
            exception_tb = MAKE_TRACEBACK( frame_89f9b88bf9793ecadd1d2edbb90861c0_2, exception_lineno );
        }
        else if ( exception_tb->tb_frame != &frame_89f9b88bf9793ecadd1d2edbb90861c0_2->m_frame )
        {
            exception_tb = ADD_TRACEBACK( exception_tb, frame_89f9b88bf9793ecadd1d2edbb90861c0_2, exception_lineno );
        }

        // Attachs locals to frame if any.
        Nuitka_Frame_AttachLocals(
            (struct Nuitka_FrameObject *)frame_89f9b88bf9793ecadd1d2edbb90861c0_2,
            type_description_2,
            outline_0_var_i
        );


        // Release cached frame.
        if ( frame_89f9b88bf9793ecadd1d2edbb90861c0_2 == cache_frame_89f9b88bf9793ecadd1d2edbb90861c0_2 )
        {
            Py_DECREF( frame_89f9b88bf9793ecadd1d2edbb90861c0_2 );
        }
        cache_frame_89f9b88bf9793ecadd1d2edbb90861c0_2 = NULL;

        assertFrameObject( frame_89f9b88bf9793ecadd1d2edbb90861c0_2 );

        // Put the previous frame back on top.
        popFrameStack();

        // Return the error.
        goto nested_frame_exit_1;

        frame_no_exception_1:;
        goto skip_nested_handling_1;
        nested_frame_exit_1:;
        type_description_1 = "ooo";
        goto try_except_handler_2;
        skip_nested_handling_1:;
        // tried codes exits in all cases
        NUITKA_CANNOT_GET_HERE( _strptime$$$function_5___calc_month );
        return NULL;
        // Return handler code:
        try_return_handler_2:;
        Py_XDECREF( outline_0_var_i );
        outline_0_var_i = NULL;

        goto outline_result_1;
        // Exception handler code:
        try_except_handler_2:;
        exception_keeper_type_2 = exception_type;
        exception_keeper_value_2 = exception_value;
        exception_keeper_tb_2 = exception_tb;
        exception_keeper_lineno_2 = exception_lineno;
        exception_type = NULL;
        exception_value = NULL;
        exception_tb = NULL;
        exception_lineno = 0;

        Py_XDECREF( outline_0_var_i );
        outline_0_var_i = NULL;

        // Re-raise.
        exception_type = exception_keeper_type_2;
        exception_value = exception_keeper_value_2;
        exception_tb = exception_keeper_tb_2;
        exception_lineno = exception_keeper_lineno_2;

        goto outline_exception_1;
        // End of try:
        // Return statement must have exited already.
        NUITKA_CANNOT_GET_HERE( _strptime$$$function_5___calc_month );
        return NULL;
        outline_exception_1:;
        exception_lineno = 99;
        goto frame_exception_exit_1;
        outline_result_1:;
        assert( var_a_month == NULL );
        var_a_month = tmp_assign_source_1;
    }
    {
        PyObject *tmp_assign_source_6;
        {
            PyObject *tmp_assign_source_7;
            PyObject *tmp_iter_arg_2;
            tmp_iter_arg_2 = const_xrange_0_13;
            tmp_assign_source_7 = MAKE_ITERATOR( tmp_iter_arg_2 );
            assert( !(tmp_assign_source_7 == NULL) );
            assert( tmp_listcomp_2__$0 == NULL );
            tmp_listcomp_2__$0 = tmp_assign_source_7;
        }
        {
            PyObject *tmp_assign_source_8;
            tmp_assign_source_8 = PyList_New( 0 );
            assert( tmp_listcomp_2__contraction == NULL );
            tmp_listcomp_2__contraction = tmp_assign_source_8;
        }
        // Tried code:
        MAKE_OR_REUSE_FRAME( cache_frame_a6ef5fcbeb91dd840f612b5c19ab8c40_3, codeobj_a6ef5fcbeb91dd840f612b5c19ab8c40, module__strptime, sizeof(void *) );
        frame_a6ef5fcbeb91dd840f612b5c19ab8c40_3 = cache_frame_a6ef5fcbeb91dd840f612b5c19ab8c40_3;

        // Push the new frame as the currently active one.
        pushFrameStack( frame_a6ef5fcbeb91dd840f612b5c19ab8c40_3 );

        // Mark the frame object as in use, ref count 1 will be up for reuse.
        assert( Py_REFCNT( frame_a6ef5fcbeb91dd840f612b5c19ab8c40_3 ) == 2 ); // Frame stack

        // Framed code:
        // Tried code:
        loop_start_2:;
        {
            PyObject *tmp_next_source_2;
            PyObject *tmp_assign_source_9;
            CHECK_OBJECT( tmp_listcomp_2__$0 );
            tmp_next_source_2 = tmp_listcomp_2__$0;
            tmp_assign_source_9 = ITERATOR_NEXT( tmp_next_source_2 );
            if ( tmp_assign_source_9 == NULL )
            {
                if ( CHECK_AND_CLEAR_STOP_ITERATION_OCCURRED() )
                {

                    goto loop_end_2;
                }
                else
                {

                    FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
                    type_description_2 = "o";
                    exception_lineno = 100;
                    goto try_except_handler_5;
                }
            }

            {
                PyObject *old = tmp_listcomp_2__iter_value_0;
                tmp_listcomp_2__iter_value_0 = tmp_assign_source_9;
                Py_XDECREF( old );
            }

        }
        {
            PyObject *tmp_assign_source_10;
            CHECK_OBJECT( tmp_listcomp_2__iter_value_0 );
            tmp_assign_source_10 = tmp_listcomp_2__iter_value_0;
            {
                PyObject *old = outline_1_var_i;
                outline_1_var_i = tmp_assign_source_10;
                Py_INCREF( outline_1_var_i );
                Py_XDECREF( old );
            }

        }
        {
            PyObject *tmp_append_list_2;
            PyObject *tmp_append_value_2;
            PyObject *tmp_called_instance_2;
            PyObject *tmp_subscribed_name_2;
            PyObject *tmp_source_name_2;
            PyObject *tmp_mvar_value_2;
            PyObject *tmp_subscript_name_2;
            CHECK_OBJECT( tmp_listcomp_2__contraction );
            tmp_append_list_2 = tmp_listcomp_2__contraction;
            tmp_mvar_value_2 = GET_STRING_DICT_VALUE( moduledict__strptime, (Nuitka_StringObject *)const_str_plain_calendar );

            if (unlikely( tmp_mvar_value_2 == NULL ))
            {
                tmp_mvar_value_2 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_calendar );
            }

            if ( tmp_mvar_value_2 == NULL )
            {

                exception_type = PyExc_NameError;
                Py_INCREF( exception_type );
                exception_value = PyUnicode_FromFormat( "name '%s' is not defined", "calendar" );
                exception_tb = NULL;
                NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
                CHAIN_EXCEPTION( exception_value );

                exception_lineno = 100;
                type_description_2 = "o";
                goto try_except_handler_5;
            }

            tmp_source_name_2 = tmp_mvar_value_2;
            tmp_subscribed_name_2 = LOOKUP_ATTRIBUTE( tmp_source_name_2, const_str_plain_month_name );
            if ( tmp_subscribed_name_2 == NULL )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 100;
                type_description_2 = "o";
                goto try_except_handler_5;
            }
            CHECK_OBJECT( outline_1_var_i );
            tmp_subscript_name_2 = outline_1_var_i;
            tmp_called_instance_2 = LOOKUP_SUBSCRIPT( tmp_subscribed_name_2, tmp_subscript_name_2 );
            Py_DECREF( tmp_subscribed_name_2 );
            if ( tmp_called_instance_2 == NULL )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 100;
                type_description_2 = "o";
                goto try_except_handler_5;
            }
            frame_a6ef5fcbeb91dd840f612b5c19ab8c40_3->m_frame.f_lineno = 100;
            tmp_append_value_2 = CALL_METHOD_NO_ARGS( tmp_called_instance_2, const_str_plain_lower );
            Py_DECREF( tmp_called_instance_2 );
            if ( tmp_append_value_2 == NULL )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 100;
                type_description_2 = "o";
                goto try_except_handler_5;
            }
            assert( PyList_Check( tmp_append_list_2 ) );
            tmp_res = PyList_Append( tmp_append_list_2, tmp_append_value_2 );
            Py_DECREF( tmp_append_value_2 );
            if ( tmp_res == -1 )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 100;
                type_description_2 = "o";
                goto try_except_handler_5;
            }
        }
        if ( CONSIDER_THREADING() == false )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 100;
            type_description_2 = "o";
            goto try_except_handler_5;
        }
        goto loop_start_2;
        loop_end_2:;
        CHECK_OBJECT( tmp_listcomp_2__contraction );
        tmp_assign_source_6 = tmp_listcomp_2__contraction;
        Py_INCREF( tmp_assign_source_6 );
        goto try_return_handler_5;
        // tried codes exits in all cases
        NUITKA_CANNOT_GET_HERE( _strptime$$$function_5___calc_month );
        return NULL;
        // Return handler code:
        try_return_handler_5:;
        CHECK_OBJECT( (PyObject *)tmp_listcomp_2__$0 );
        Py_DECREF( tmp_listcomp_2__$0 );
        tmp_listcomp_2__$0 = NULL;

        CHECK_OBJECT( (PyObject *)tmp_listcomp_2__contraction );
        Py_DECREF( tmp_listcomp_2__contraction );
        tmp_listcomp_2__contraction = NULL;

        Py_XDECREF( tmp_listcomp_2__iter_value_0 );
        tmp_listcomp_2__iter_value_0 = NULL;

        goto frame_return_exit_2;
        // Exception handler code:
        try_except_handler_5:;
        exception_keeper_type_3 = exception_type;
        exception_keeper_value_3 = exception_value;
        exception_keeper_tb_3 = exception_tb;
        exception_keeper_lineno_3 = exception_lineno;
        exception_type = NULL;
        exception_value = NULL;
        exception_tb = NULL;
        exception_lineno = 0;

        CHECK_OBJECT( (PyObject *)tmp_listcomp_2__$0 );
        Py_DECREF( tmp_listcomp_2__$0 );
        tmp_listcomp_2__$0 = NULL;

        CHECK_OBJECT( (PyObject *)tmp_listcomp_2__contraction );
        Py_DECREF( tmp_listcomp_2__contraction );
        tmp_listcomp_2__contraction = NULL;

        Py_XDECREF( tmp_listcomp_2__iter_value_0 );
        tmp_listcomp_2__iter_value_0 = NULL;

        // Re-raise.
        exception_type = exception_keeper_type_3;
        exception_value = exception_keeper_value_3;
        exception_tb = exception_keeper_tb_3;
        exception_lineno = exception_keeper_lineno_3;

        goto frame_exception_exit_3;
        // End of try:

#if 0
        RESTORE_FRAME_EXCEPTION( frame_a6ef5fcbeb91dd840f612b5c19ab8c40_3 );
#endif

        // Put the previous frame back on top.
        popFrameStack();

        goto frame_no_exception_2;

        frame_return_exit_2:;
#if 0
        RESTORE_FRAME_EXCEPTION( frame_a6ef5fcbeb91dd840f612b5c19ab8c40_3 );
#endif

        // Put the previous frame back on top.
        popFrameStack();

        goto try_return_handler_4;

        frame_exception_exit_3:;

#if 0
        RESTORE_FRAME_EXCEPTION( frame_a6ef5fcbeb91dd840f612b5c19ab8c40_3 );
#endif

        if ( exception_tb == NULL )
        {
            exception_tb = MAKE_TRACEBACK( frame_a6ef5fcbeb91dd840f612b5c19ab8c40_3, exception_lineno );
        }
        else if ( exception_tb->tb_frame != &frame_a6ef5fcbeb91dd840f612b5c19ab8c40_3->m_frame )
        {
            exception_tb = ADD_TRACEBACK( exception_tb, frame_a6ef5fcbeb91dd840f612b5c19ab8c40_3, exception_lineno );
        }

        // Attachs locals to frame if any.
        Nuitka_Frame_AttachLocals(
            (struct Nuitka_FrameObject *)frame_a6ef5fcbeb91dd840f612b5c19ab8c40_3,
            type_description_2,
            outline_1_var_i
        );


        // Release cached frame.
        if ( frame_a6ef5fcbeb91dd840f612b5c19ab8c40_3 == cache_frame_a6ef5fcbeb91dd840f612b5c19ab8c40_3 )
        {
            Py_DECREF( frame_a6ef5fcbeb91dd840f612b5c19ab8c40_3 );
        }
        cache_frame_a6ef5fcbeb91dd840f612b5c19ab8c40_3 = NULL;

        assertFrameObject( frame_a6ef5fcbeb91dd840f612b5c19ab8c40_3 );

        // Put the previous frame back on top.
        popFrameStack();

        // Return the error.
        goto nested_frame_exit_2;

        frame_no_exception_2:;
        goto skip_nested_handling_2;
        nested_frame_exit_2:;
        type_description_1 = "ooo";
        goto try_except_handler_4;
        skip_nested_handling_2:;
        // tried codes exits in all cases
        NUITKA_CANNOT_GET_HERE( _strptime$$$function_5___calc_month );
        return NULL;
        // Return handler code:
        try_return_handler_4:;
        Py_XDECREF( outline_1_var_i );
        outline_1_var_i = NULL;

        goto outline_result_2;
        // Exception handler code:
        try_except_handler_4:;
        exception_keeper_type_4 = exception_type;
        exception_keeper_value_4 = exception_value;
        exception_keeper_tb_4 = exception_tb;
        exception_keeper_lineno_4 = exception_lineno;
        exception_type = NULL;
        exception_value = NULL;
        exception_tb = NULL;
        exception_lineno = 0;

        Py_XDECREF( outline_1_var_i );
        outline_1_var_i = NULL;

        // Re-raise.
        exception_type = exception_keeper_type_4;
        exception_value = exception_keeper_value_4;
        exception_tb = exception_keeper_tb_4;
        exception_lineno = exception_keeper_lineno_4;

        goto outline_exception_2;
        // End of try:
        // Return statement must have exited already.
        NUITKA_CANNOT_GET_HERE( _strptime$$$function_5___calc_month );
        return NULL;
        outline_exception_2:;
        exception_lineno = 100;
        goto frame_exception_exit_1;
        outline_result_2:;
        assert( var_f_month == NULL );
        var_f_month = tmp_assign_source_6;
    }
    {
        PyObject *tmp_assattr_name_1;
        PyObject *tmp_assattr_target_1;
        CHECK_OBJECT( var_a_month );
        tmp_assattr_name_1 = var_a_month;
        CHECK_OBJECT( par_self );
        tmp_assattr_target_1 = par_self;
        tmp_result = SET_ATTRIBUTE( tmp_assattr_target_1, const_str_plain_a_month, tmp_assattr_name_1 );
        if ( tmp_result == false )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 101;
            type_description_1 = "ooo";
            goto frame_exception_exit_1;
        }
    }
    {
        PyObject *tmp_assattr_name_2;
        PyObject *tmp_assattr_target_2;
        CHECK_OBJECT( var_f_month );
        tmp_assattr_name_2 = var_f_month;
        CHECK_OBJECT( par_self );
        tmp_assattr_target_2 = par_self;
        tmp_result = SET_ATTRIBUTE( tmp_assattr_target_2, const_str_plain_f_month, tmp_assattr_name_2 );
        if ( tmp_result == false )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 102;
            type_description_1 = "ooo";
            goto frame_exception_exit_1;
        }
    }

#if 0
    RESTORE_FRAME_EXCEPTION( frame_a2bd7fedebd3e4f98d505ee04dfef0a0 );
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto frame_no_exception_3;

    frame_exception_exit_1:;

#if 0
    RESTORE_FRAME_EXCEPTION( frame_a2bd7fedebd3e4f98d505ee04dfef0a0 );
#endif

    if ( exception_tb == NULL )
    {
        exception_tb = MAKE_TRACEBACK( frame_a2bd7fedebd3e4f98d505ee04dfef0a0, exception_lineno );
    }
    else if ( exception_tb->tb_frame != &frame_a2bd7fedebd3e4f98d505ee04dfef0a0->m_frame )
    {
        exception_tb = ADD_TRACEBACK( exception_tb, frame_a2bd7fedebd3e4f98d505ee04dfef0a0, exception_lineno );
    }

    // Attachs locals to frame if any.
    Nuitka_Frame_AttachLocals(
        (struct Nuitka_FrameObject *)frame_a2bd7fedebd3e4f98d505ee04dfef0a0,
        type_description_1,
        par_self,
        var_a_month,
        var_f_month
    );


    // Release cached frame.
    if ( frame_a2bd7fedebd3e4f98d505ee04dfef0a0 == cache_frame_a2bd7fedebd3e4f98d505ee04dfef0a0 )
    {
        Py_DECREF( frame_a2bd7fedebd3e4f98d505ee04dfef0a0 );
    }
    cache_frame_a2bd7fedebd3e4f98d505ee04dfef0a0 = NULL;

    assertFrameObject( frame_a2bd7fedebd3e4f98d505ee04dfef0a0 );

    // Put the previous frame back on top.
    popFrameStack();

    // Return the error.
    goto try_except_handler_1;

    frame_no_exception_3:;
    tmp_return_value = Py_None;
    Py_INCREF( tmp_return_value );
    goto try_return_handler_1;
    // tried codes exits in all cases
    NUITKA_CANNOT_GET_HERE( _strptime$$$function_5___calc_month );
    return NULL;
    // Return handler code:
    try_return_handler_1:;
    CHECK_OBJECT( (PyObject *)par_self );
    Py_DECREF( par_self );
    par_self = NULL;

    CHECK_OBJECT( (PyObject *)var_a_month );
    Py_DECREF( var_a_month );
    var_a_month = NULL;

    CHECK_OBJECT( (PyObject *)var_f_month );
    Py_DECREF( var_f_month );
    var_f_month = NULL;

    goto function_return_exit;
    // Exception handler code:
    try_except_handler_1:;
    exception_keeper_type_5 = exception_type;
    exception_keeper_value_5 = exception_value;
    exception_keeper_tb_5 = exception_tb;
    exception_keeper_lineno_5 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    CHECK_OBJECT( (PyObject *)par_self );
    Py_DECREF( par_self );
    par_self = NULL;

    Py_XDECREF( var_a_month );
    var_a_month = NULL;

    Py_XDECREF( var_f_month );
    var_f_month = NULL;

    // Re-raise.
    exception_type = exception_keeper_type_5;
    exception_value = exception_keeper_value_5;
    exception_tb = exception_keeper_tb_5;
    exception_lineno = exception_keeper_lineno_5;

    goto function_exception_exit;
    // End of try:

    // Return statement must have exited already.
    NUITKA_CANNOT_GET_HERE( _strptime$$$function_5___calc_month );
    return NULL;

function_exception_exit:
    assert( exception_type );
    RESTORE_ERROR_OCCURRED( exception_type, exception_value, exception_tb );

    return NULL;

function_return_exit:
   // Function cleanup code if any.


   // Actual function exit with return value, making sure we did not make
   // the error status worse despite non-NULL return.
   CHECK_OBJECT( tmp_return_value );
   assert( had_error || !ERROR_OCCURRED() );
   return tmp_return_value;
}


static PyObject *impl__strptime$$$function_6___calc_am_pm( struct Nuitka_FunctionObject const *self, PyObject **python_pars )
{
    // Preserve error status for checks
#ifndef __NUITKA_NO_ASSERT__
    NUITKA_MAY_BE_UNUSED bool had_error = ERROR_OCCURRED();
#endif

    // Local variable declarations.
    PyObject *par_self = python_pars[ 0 ];
    PyObject *var_am_pm = NULL;
    PyObject *var_hour = NULL;
    PyObject *var_time_tuple = NULL;
    PyObject *tmp_for_loop_1__for_iterator = NULL;
    PyObject *tmp_for_loop_1__iter_value = NULL;
    struct Nuitka_FrameObject *frame_042cbd0942877416c47609c4ddfe85c8;
    NUITKA_MAY_BE_UNUSED char const *type_description_1 = NULL;
    PyObject *exception_type = NULL;
    PyObject *exception_value = NULL;
    PyTracebackObject *exception_tb = NULL;
    NUITKA_MAY_BE_UNUSED int exception_lineno = 0;
    PyObject *exception_keeper_type_1;
    PyObject *exception_keeper_value_1;
    PyTracebackObject *exception_keeper_tb_1;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_1;
    bool tmp_result;
    static struct Nuitka_FrameObject *cache_frame_042cbd0942877416c47609c4ddfe85c8 = NULL;
    PyObject *tmp_return_value = NULL;
    PyObject *exception_keeper_type_2;
    PyObject *exception_keeper_value_2;
    PyTracebackObject *exception_keeper_tb_2;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_2;

    // Actual function body.
    {
        PyObject *tmp_assign_source_1;
        tmp_assign_source_1 = PyList_New( 0 );
        assert( var_am_pm == NULL );
        var_am_pm = tmp_assign_source_1;
    }
    {
        PyObject *tmp_assign_source_2;
        PyObject *tmp_iter_arg_1;
        tmp_iter_arg_1 = const_tuple_int_pos_1_int_pos_22_tuple;
        tmp_assign_source_2 = MAKE_ITERATOR( tmp_iter_arg_1 );
        assert( !(tmp_assign_source_2 == NULL) );
        assert( tmp_for_loop_1__for_iterator == NULL );
        tmp_for_loop_1__for_iterator = tmp_assign_source_2;
    }
    // Tried code:
    MAKE_OR_REUSE_FRAME( cache_frame_042cbd0942877416c47609c4ddfe85c8, codeobj_042cbd0942877416c47609c4ddfe85c8, module__strptime, sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *) );
    frame_042cbd0942877416c47609c4ddfe85c8 = cache_frame_042cbd0942877416c47609c4ddfe85c8;

    // Push the new frame as the currently active one.
    pushFrameStack( frame_042cbd0942877416c47609c4ddfe85c8 );

    // Mark the frame object as in use, ref count 1 will be up for reuse.
    assert( Py_REFCNT( frame_042cbd0942877416c47609c4ddfe85c8 ) == 2 ); // Frame stack

    // Framed code:
    // Tried code:
    loop_start_1:;
    {
        PyObject *tmp_next_source_1;
        PyObject *tmp_assign_source_3;
        CHECK_OBJECT( tmp_for_loop_1__for_iterator );
        tmp_next_source_1 = tmp_for_loop_1__for_iterator;
        tmp_assign_source_3 = ITERATOR_NEXT( tmp_next_source_1 );
        if ( tmp_assign_source_3 == NULL )
        {
            if ( CHECK_AND_CLEAR_STOP_ITERATION_OCCURRED() )
            {

                goto loop_end_1;
            }
            else
            {

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
                type_description_1 = "oooo";
                exception_lineno = 111;
                goto try_except_handler_2;
            }
        }

        {
            PyObject *old = tmp_for_loop_1__iter_value;
            tmp_for_loop_1__iter_value = tmp_assign_source_3;
            Py_XDECREF( old );
        }

    }
    {
        PyObject *tmp_assign_source_4;
        CHECK_OBJECT( tmp_for_loop_1__iter_value );
        tmp_assign_source_4 = tmp_for_loop_1__iter_value;
        {
            PyObject *old = var_hour;
            var_hour = tmp_assign_source_4;
            Py_INCREF( var_hour );
            Py_XDECREF( old );
        }

    }
    {
        PyObject *tmp_assign_source_5;
        PyObject *tmp_called_instance_1;
        PyObject *tmp_mvar_value_1;
        PyObject *tmp_args_element_name_1;
        PyObject *tmp_tuple_element_1;
        tmp_mvar_value_1 = GET_STRING_DICT_VALUE( moduledict__strptime, (Nuitka_StringObject *)const_str_plain_time );

        if (unlikely( tmp_mvar_value_1 == NULL ))
        {
            tmp_mvar_value_1 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_time );
        }

        if ( tmp_mvar_value_1 == NULL )
        {

            exception_type = PyExc_NameError;
            Py_INCREF( exception_type );
            exception_value = PyUnicode_FromFormat( "name '%s' is not defined", "time" );
            exception_tb = NULL;
            NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
            CHAIN_EXCEPTION( exception_value );

            exception_lineno = 112;
            type_description_1 = "oooo";
            goto try_except_handler_2;
        }

        tmp_called_instance_1 = tmp_mvar_value_1;
        tmp_tuple_element_1 = const_int_pos_1999;
        tmp_args_element_name_1 = PyTuple_New( 9 );
        Py_INCREF( tmp_tuple_element_1 );
        PyTuple_SET_ITEM( tmp_args_element_name_1, 0, tmp_tuple_element_1 );
        tmp_tuple_element_1 = const_int_pos_3;
        Py_INCREF( tmp_tuple_element_1 );
        PyTuple_SET_ITEM( tmp_args_element_name_1, 1, tmp_tuple_element_1 );
        tmp_tuple_element_1 = const_int_pos_17;
        Py_INCREF( tmp_tuple_element_1 );
        PyTuple_SET_ITEM( tmp_args_element_name_1, 2, tmp_tuple_element_1 );
        CHECK_OBJECT( var_hour );
        tmp_tuple_element_1 = var_hour;
        Py_INCREF( tmp_tuple_element_1 );
        PyTuple_SET_ITEM( tmp_args_element_name_1, 3, tmp_tuple_element_1 );
        tmp_tuple_element_1 = const_int_pos_44;
        Py_INCREF( tmp_tuple_element_1 );
        PyTuple_SET_ITEM( tmp_args_element_name_1, 4, tmp_tuple_element_1 );
        tmp_tuple_element_1 = const_int_pos_55;
        Py_INCREF( tmp_tuple_element_1 );
        PyTuple_SET_ITEM( tmp_args_element_name_1, 5, tmp_tuple_element_1 );
        tmp_tuple_element_1 = const_int_pos_2;
        Py_INCREF( tmp_tuple_element_1 );
        PyTuple_SET_ITEM( tmp_args_element_name_1, 6, tmp_tuple_element_1 );
        tmp_tuple_element_1 = const_int_pos_76;
        Py_INCREF( tmp_tuple_element_1 );
        PyTuple_SET_ITEM( tmp_args_element_name_1, 7, tmp_tuple_element_1 );
        tmp_tuple_element_1 = const_int_0;
        Py_INCREF( tmp_tuple_element_1 );
        PyTuple_SET_ITEM( tmp_args_element_name_1, 8, tmp_tuple_element_1 );
        frame_042cbd0942877416c47609c4ddfe85c8->m_frame.f_lineno = 112;
        {
            PyObject *call_args[] = { tmp_args_element_name_1 };
            tmp_assign_source_5 = CALL_METHOD_WITH_ARGS1( tmp_called_instance_1, const_str_plain_struct_time, call_args );
        }

        Py_DECREF( tmp_args_element_name_1 );
        if ( tmp_assign_source_5 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 112;
            type_description_1 = "oooo";
            goto try_except_handler_2;
        }
        {
            PyObject *old = var_time_tuple;
            var_time_tuple = tmp_assign_source_5;
            Py_XDECREF( old );
        }

    }
    {
        PyObject *tmp_called_name_1;
        PyObject *tmp_source_name_1;
        PyObject *tmp_call_result_1;
        PyObject *tmp_args_element_name_2;
        PyObject *tmp_called_instance_2;
        PyObject *tmp_called_instance_3;
        PyObject *tmp_mvar_value_2;
        PyObject *tmp_args_element_name_3;
        PyObject *tmp_args_element_name_4;
        CHECK_OBJECT( var_am_pm );
        tmp_source_name_1 = var_am_pm;
        tmp_called_name_1 = LOOKUP_ATTRIBUTE( tmp_source_name_1, const_str_plain_append );
        if ( tmp_called_name_1 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 113;
            type_description_1 = "oooo";
            goto try_except_handler_2;
        }
        tmp_mvar_value_2 = GET_STRING_DICT_VALUE( moduledict__strptime, (Nuitka_StringObject *)const_str_plain_time );

        if (unlikely( tmp_mvar_value_2 == NULL ))
        {
            tmp_mvar_value_2 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_time );
        }

        if ( tmp_mvar_value_2 == NULL )
        {
            Py_DECREF( tmp_called_name_1 );
            exception_type = PyExc_NameError;
            Py_INCREF( exception_type );
            exception_value = PyUnicode_FromFormat( "name '%s' is not defined", "time" );
            exception_tb = NULL;
            NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
            CHAIN_EXCEPTION( exception_value );

            exception_lineno = 113;
            type_description_1 = "oooo";
            goto try_except_handler_2;
        }

        tmp_called_instance_3 = tmp_mvar_value_2;
        tmp_args_element_name_3 = const_str_digest_554ef6b54c88f852fcfe5140d92d8a59;
        CHECK_OBJECT( var_time_tuple );
        tmp_args_element_name_4 = var_time_tuple;
        frame_042cbd0942877416c47609c4ddfe85c8->m_frame.f_lineno = 113;
        {
            PyObject *call_args[] = { tmp_args_element_name_3, tmp_args_element_name_4 };
            tmp_called_instance_2 = CALL_METHOD_WITH_ARGS2( tmp_called_instance_3, const_str_plain_strftime, call_args );
        }

        if ( tmp_called_instance_2 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
            Py_DECREF( tmp_called_name_1 );

            exception_lineno = 113;
            type_description_1 = "oooo";
            goto try_except_handler_2;
        }
        frame_042cbd0942877416c47609c4ddfe85c8->m_frame.f_lineno = 113;
        tmp_args_element_name_2 = CALL_METHOD_NO_ARGS( tmp_called_instance_2, const_str_plain_lower );
        Py_DECREF( tmp_called_instance_2 );
        if ( tmp_args_element_name_2 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
            Py_DECREF( tmp_called_name_1 );

            exception_lineno = 113;
            type_description_1 = "oooo";
            goto try_except_handler_2;
        }
        frame_042cbd0942877416c47609c4ddfe85c8->m_frame.f_lineno = 113;
        {
            PyObject *call_args[] = { tmp_args_element_name_2 };
            tmp_call_result_1 = CALL_FUNCTION_WITH_ARGS1( tmp_called_name_1, call_args );
        }

        Py_DECREF( tmp_called_name_1 );
        Py_DECREF( tmp_args_element_name_2 );
        if ( tmp_call_result_1 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 113;
            type_description_1 = "oooo";
            goto try_except_handler_2;
        }
        Py_DECREF( tmp_call_result_1 );
    }
    if ( CONSIDER_THREADING() == false )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 111;
        type_description_1 = "oooo";
        goto try_except_handler_2;
    }
    goto loop_start_1;
    loop_end_1:;
    goto try_end_1;
    // Exception handler code:
    try_except_handler_2:;
    exception_keeper_type_1 = exception_type;
    exception_keeper_value_1 = exception_value;
    exception_keeper_tb_1 = exception_tb;
    exception_keeper_lineno_1 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    Py_XDECREF( tmp_for_loop_1__iter_value );
    tmp_for_loop_1__iter_value = NULL;

    CHECK_OBJECT( (PyObject *)tmp_for_loop_1__for_iterator );
    Py_DECREF( tmp_for_loop_1__for_iterator );
    tmp_for_loop_1__for_iterator = NULL;

    // Re-raise.
    exception_type = exception_keeper_type_1;
    exception_value = exception_keeper_value_1;
    exception_tb = exception_keeper_tb_1;
    exception_lineno = exception_keeper_lineno_1;

    goto frame_exception_exit_1;
    // End of try:
    try_end_1:;
    Py_XDECREF( tmp_for_loop_1__iter_value );
    tmp_for_loop_1__iter_value = NULL;

    CHECK_OBJECT( (PyObject *)tmp_for_loop_1__for_iterator );
    Py_DECREF( tmp_for_loop_1__for_iterator );
    tmp_for_loop_1__for_iterator = NULL;

    {
        PyObject *tmp_assattr_name_1;
        PyObject *tmp_assattr_target_1;
        CHECK_OBJECT( var_am_pm );
        tmp_assattr_name_1 = var_am_pm;
        CHECK_OBJECT( par_self );
        tmp_assattr_target_1 = par_self;
        tmp_result = SET_ATTRIBUTE( tmp_assattr_target_1, const_str_plain_am_pm, tmp_assattr_name_1 );
        if ( tmp_result == false )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 114;
            type_description_1 = "oooo";
            goto frame_exception_exit_1;
        }
    }

#if 0
    RESTORE_FRAME_EXCEPTION( frame_042cbd0942877416c47609c4ddfe85c8 );
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto frame_no_exception_1;

    frame_exception_exit_1:;

#if 0
    RESTORE_FRAME_EXCEPTION( frame_042cbd0942877416c47609c4ddfe85c8 );
#endif

    if ( exception_tb == NULL )
    {
        exception_tb = MAKE_TRACEBACK( frame_042cbd0942877416c47609c4ddfe85c8, exception_lineno );
    }
    else if ( exception_tb->tb_frame != &frame_042cbd0942877416c47609c4ddfe85c8->m_frame )
    {
        exception_tb = ADD_TRACEBACK( exception_tb, frame_042cbd0942877416c47609c4ddfe85c8, exception_lineno );
    }

    // Attachs locals to frame if any.
    Nuitka_Frame_AttachLocals(
        (struct Nuitka_FrameObject *)frame_042cbd0942877416c47609c4ddfe85c8,
        type_description_1,
        par_self,
        var_am_pm,
        var_hour,
        var_time_tuple
    );


    // Release cached frame.
    if ( frame_042cbd0942877416c47609c4ddfe85c8 == cache_frame_042cbd0942877416c47609c4ddfe85c8 )
    {
        Py_DECREF( frame_042cbd0942877416c47609c4ddfe85c8 );
    }
    cache_frame_042cbd0942877416c47609c4ddfe85c8 = NULL;

    assertFrameObject( frame_042cbd0942877416c47609c4ddfe85c8 );

    // Put the previous frame back on top.
    popFrameStack();

    // Return the error.
    goto try_except_handler_1;

    frame_no_exception_1:;
    tmp_return_value = Py_None;
    Py_INCREF( tmp_return_value );
    goto try_return_handler_1;
    // tried codes exits in all cases
    NUITKA_CANNOT_GET_HERE( _strptime$$$function_6___calc_am_pm );
    return NULL;
    // Return handler code:
    try_return_handler_1:;
    CHECK_OBJECT( (PyObject *)par_self );
    Py_DECREF( par_self );
    par_self = NULL;

    CHECK_OBJECT( (PyObject *)var_am_pm );
    Py_DECREF( var_am_pm );
    var_am_pm = NULL;

    Py_XDECREF( var_hour );
    var_hour = NULL;

    Py_XDECREF( var_time_tuple );
    var_time_tuple = NULL;

    goto function_return_exit;
    // Exception handler code:
    try_except_handler_1:;
    exception_keeper_type_2 = exception_type;
    exception_keeper_value_2 = exception_value;
    exception_keeper_tb_2 = exception_tb;
    exception_keeper_lineno_2 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    CHECK_OBJECT( (PyObject *)par_self );
    Py_DECREF( par_self );
    par_self = NULL;

    CHECK_OBJECT( (PyObject *)var_am_pm );
    Py_DECREF( var_am_pm );
    var_am_pm = NULL;

    Py_XDECREF( var_hour );
    var_hour = NULL;

    Py_XDECREF( var_time_tuple );
    var_time_tuple = NULL;

    // Re-raise.
    exception_type = exception_keeper_type_2;
    exception_value = exception_keeper_value_2;
    exception_tb = exception_keeper_tb_2;
    exception_lineno = exception_keeper_lineno_2;

    goto function_exception_exit;
    // End of try:

    // Return statement must have exited already.
    NUITKA_CANNOT_GET_HERE( _strptime$$$function_6___calc_am_pm );
    return NULL;

function_exception_exit:
    assert( exception_type );
    RESTORE_ERROR_OCCURRED( exception_type, exception_value, exception_tb );

    return NULL;

function_return_exit:
   // Function cleanup code if any.


   // Actual function exit with return value, making sure we did not make
   // the error status worse despite non-NULL return.
   CHECK_OBJECT( tmp_return_value );
   assert( had_error || !ERROR_OCCURRED() );
   return tmp_return_value;
}


static PyObject *impl__strptime$$$function_7___calc_date_time( struct Nuitka_FunctionObject const *self, PyObject **python_pars )
{
    // Preserve error status for checks
#ifndef __NUITKA_NO_ASSERT__
    NUITKA_MAY_BE_UNUSED bool had_error = ERROR_OCCURRED();
#endif

    // Local variable declarations.
    PyObject *par_self = python_pars[ 0 ];
    PyObject *var_time_tuple = NULL;
    PyObject *var_date_time = NULL;
    PyObject *var_replacement_pairs = NULL;
    PyObject *var_offset = NULL;
    PyObject *var_directive = NULL;
    PyObject *var_current_format = NULL;
    PyObject *var_old = NULL;
    PyObject *var_new = NULL;
    PyObject *var_U_W = NULL;
    PyObject *outline_0_var_tz_values = NULL;
    PyObject *outline_0_var_tz = NULL;
    PyObject *tmp_for_loop_1__for_iterator = NULL;
    PyObject *tmp_for_loop_1__iter_value = NULL;
    PyObject *tmp_for_loop_2__for_iterator = NULL;
    PyObject *tmp_for_loop_2__iter_value = NULL;
    PyObject *tmp_listcomp_1__$0 = NULL;
    PyObject *tmp_listcomp_1__contraction = NULL;
    PyObject *tmp_listcomp_1__contraction_iter_0 = NULL;
    PyObject *tmp_listcomp_1__iter_value_0 = NULL;
    PyObject *tmp_listcomp_1__iter_value_1 = NULL;
    PyObject *tmp_tuple_unpack_1__element_1 = NULL;
    PyObject *tmp_tuple_unpack_1__element_2 = NULL;
    PyObject *tmp_tuple_unpack_1__source_iter = NULL;
    PyObject *tmp_tuple_unpack_2__element_1 = NULL;
    PyObject *tmp_tuple_unpack_2__element_2 = NULL;
    PyObject *tmp_tuple_unpack_2__source_iter = NULL;
    struct Nuitka_FrameObject *frame_68a9d0a26d7b8b382e7cb285e1b41374;
    NUITKA_MAY_BE_UNUSED char const *type_description_1 = NULL;
    PyObject *exception_type = NULL;
    PyObject *exception_value = NULL;
    PyTracebackObject *exception_tb = NULL;
    NUITKA_MAY_BE_UNUSED int exception_lineno = 0;
    struct Nuitka_FrameObject *frame_ce652515a9e179106980a19fe1e55af4_2;
    NUITKA_MAY_BE_UNUSED char const *type_description_2 = NULL;
    int tmp_res;
    PyObject *exception_keeper_type_1;
    PyObject *exception_keeper_value_1;
    PyTracebackObject *exception_keeper_tb_1;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_1;
    static struct Nuitka_FrameObject *cache_frame_ce652515a9e179106980a19fe1e55af4_2 = NULL;
    PyObject *exception_keeper_type_2;
    PyObject *exception_keeper_value_2;
    PyTracebackObject *exception_keeper_tb_2;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_2;
    PyObject *tmp_iterator_attempt;
    PyObject *exception_keeper_type_3;
    PyObject *exception_keeper_value_3;
    PyTracebackObject *exception_keeper_tb_3;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_3;
    PyObject *exception_keeper_type_4;
    PyObject *exception_keeper_value_4;
    PyTracebackObject *exception_keeper_tb_4;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_4;
    PyObject *exception_keeper_type_5;
    PyObject *exception_keeper_value_5;
    PyTracebackObject *exception_keeper_tb_5;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_5;
    PyObject *exception_keeper_type_6;
    PyObject *exception_keeper_value_6;
    PyTracebackObject *exception_keeper_tb_6;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_6;
    PyObject *exception_keeper_type_7;
    PyObject *exception_keeper_value_7;
    PyTracebackObject *exception_keeper_tb_7;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_7;
    bool tmp_result;
    PyObject *exception_keeper_type_8;
    PyObject *exception_keeper_value_8;
    PyTracebackObject *exception_keeper_tb_8;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_8;
    static struct Nuitka_FrameObject *cache_frame_68a9d0a26d7b8b382e7cb285e1b41374 = NULL;
    PyObject *tmp_return_value = NULL;
    PyObject *exception_keeper_type_9;
    PyObject *exception_keeper_value_9;
    PyTracebackObject *exception_keeper_tb_9;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_9;

    // Actual function body.
    // Tried code:
    MAKE_OR_REUSE_FRAME( cache_frame_68a9d0a26d7b8b382e7cb285e1b41374, codeobj_68a9d0a26d7b8b382e7cb285e1b41374, module__strptime, sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *) );
    frame_68a9d0a26d7b8b382e7cb285e1b41374 = cache_frame_68a9d0a26d7b8b382e7cb285e1b41374;

    // Push the new frame as the currently active one.
    pushFrameStack( frame_68a9d0a26d7b8b382e7cb285e1b41374 );

    // Mark the frame object as in use, ref count 1 will be up for reuse.
    assert( Py_REFCNT( frame_68a9d0a26d7b8b382e7cb285e1b41374 ) == 2 ); // Frame stack

    // Framed code:
    {
        PyObject *tmp_assign_source_1;
        PyObject *tmp_called_instance_1;
        PyObject *tmp_mvar_value_1;
        tmp_mvar_value_1 = GET_STRING_DICT_VALUE( moduledict__strptime, (Nuitka_StringObject *)const_str_plain_time );

        if (unlikely( tmp_mvar_value_1 == NULL ))
        {
            tmp_mvar_value_1 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_time );
        }

        if ( tmp_mvar_value_1 == NULL )
        {

            exception_type = PyExc_NameError;
            Py_INCREF( exception_type );
            exception_value = PyUnicode_FromFormat( "name '%s' is not defined", "time" );
            exception_tb = NULL;
            NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
            CHAIN_EXCEPTION( exception_value );

            exception_lineno = 124;
            type_description_1 = "oooooooooo";
            goto frame_exception_exit_1;
        }

        tmp_called_instance_1 = tmp_mvar_value_1;
        frame_68a9d0a26d7b8b382e7cb285e1b41374->m_frame.f_lineno = 124;
        tmp_assign_source_1 = CALL_METHOD_WITH_ARGS1( tmp_called_instance_1, const_str_plain_struct_time, &PyTuple_GET_ITEM( const_tuple_tuple_cc60455df3a4404f39dbb99f7aea2b5f_tuple_tuple, 0 ) );

        if ( tmp_assign_source_1 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 124;
            type_description_1 = "oooooooooo";
            goto frame_exception_exit_1;
        }
        assert( var_time_tuple == NULL );
        var_time_tuple = tmp_assign_source_1;
    }
    {
        PyObject *tmp_assign_source_2;
        tmp_assign_source_2 = LIST_COPY( const_list_none_none_none_list );
        assert( var_date_time == NULL );
        var_date_time = tmp_assign_source_2;
    }
    {
        PyObject *tmp_ass_subvalue_1;
        PyObject *tmp_called_instance_2;
        PyObject *tmp_called_instance_3;
        PyObject *tmp_mvar_value_2;
        PyObject *tmp_args_element_name_1;
        PyObject *tmp_args_element_name_2;
        PyObject *tmp_ass_subscribed_1;
        PyObject *tmp_ass_subscript_1;
        int tmp_ass_subscript_res_1;
        tmp_mvar_value_2 = GET_STRING_DICT_VALUE( moduledict__strptime, (Nuitka_StringObject *)const_str_plain_time );

        if (unlikely( tmp_mvar_value_2 == NULL ))
        {
            tmp_mvar_value_2 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_time );
        }

        if ( tmp_mvar_value_2 == NULL )
        {

            exception_type = PyExc_NameError;
            Py_INCREF( exception_type );
            exception_value = PyUnicode_FromFormat( "name '%s' is not defined", "time" );
            exception_tb = NULL;
            NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
            CHAIN_EXCEPTION( exception_value );

            exception_lineno = 126;
            type_description_1 = "oooooooooo";
            goto frame_exception_exit_1;
        }

        tmp_called_instance_3 = tmp_mvar_value_2;
        tmp_args_element_name_1 = const_str_digest_3db15d44fa892144fa260be16ae07276;
        CHECK_OBJECT( var_time_tuple );
        tmp_args_element_name_2 = var_time_tuple;
        frame_68a9d0a26d7b8b382e7cb285e1b41374->m_frame.f_lineno = 126;
        {
            PyObject *call_args[] = { tmp_args_element_name_1, tmp_args_element_name_2 };
            tmp_called_instance_2 = CALL_METHOD_WITH_ARGS2( tmp_called_instance_3, const_str_plain_strftime, call_args );
        }

        if ( tmp_called_instance_2 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 126;
            type_description_1 = "oooooooooo";
            goto frame_exception_exit_1;
        }
        frame_68a9d0a26d7b8b382e7cb285e1b41374->m_frame.f_lineno = 126;
        tmp_ass_subvalue_1 = CALL_METHOD_NO_ARGS( tmp_called_instance_2, const_str_plain_lower );
        Py_DECREF( tmp_called_instance_2 );
        if ( tmp_ass_subvalue_1 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 126;
            type_description_1 = "oooooooooo";
            goto frame_exception_exit_1;
        }
        CHECK_OBJECT( var_date_time );
        tmp_ass_subscribed_1 = var_date_time;
        tmp_ass_subscript_1 = const_int_0;
        tmp_ass_subscript_res_1 = SET_SUBSCRIPT_CONST( tmp_ass_subscribed_1, tmp_ass_subscript_1, 0, tmp_ass_subvalue_1 );
        Py_DECREF( tmp_ass_subvalue_1 );
        if ( tmp_ass_subscript_res_1 == false )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 126;
            type_description_1 = "oooooooooo";
            goto frame_exception_exit_1;
        }
    }
    {
        PyObject *tmp_ass_subvalue_2;
        PyObject *tmp_called_instance_4;
        PyObject *tmp_called_instance_5;
        PyObject *tmp_mvar_value_3;
        PyObject *tmp_args_element_name_3;
        PyObject *tmp_args_element_name_4;
        PyObject *tmp_ass_subscribed_2;
        PyObject *tmp_ass_subscript_2;
        int tmp_ass_subscript_res_2;
        tmp_mvar_value_3 = GET_STRING_DICT_VALUE( moduledict__strptime, (Nuitka_StringObject *)const_str_plain_time );

        if (unlikely( tmp_mvar_value_3 == NULL ))
        {
            tmp_mvar_value_3 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_time );
        }

        if ( tmp_mvar_value_3 == NULL )
        {

            exception_type = PyExc_NameError;
            Py_INCREF( exception_type );
            exception_value = PyUnicode_FromFormat( "name '%s' is not defined", "time" );
            exception_tb = NULL;
            NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
            CHAIN_EXCEPTION( exception_value );

            exception_lineno = 127;
            type_description_1 = "oooooooooo";
            goto frame_exception_exit_1;
        }

        tmp_called_instance_5 = tmp_mvar_value_3;
        tmp_args_element_name_3 = const_str_digest_1cfaa7410665eaa83a33dc9c2b2ef5a2;
        CHECK_OBJECT( var_time_tuple );
        tmp_args_element_name_4 = var_time_tuple;
        frame_68a9d0a26d7b8b382e7cb285e1b41374->m_frame.f_lineno = 127;
        {
            PyObject *call_args[] = { tmp_args_element_name_3, tmp_args_element_name_4 };
            tmp_called_instance_4 = CALL_METHOD_WITH_ARGS2( tmp_called_instance_5, const_str_plain_strftime, call_args );
        }

        if ( tmp_called_instance_4 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 127;
            type_description_1 = "oooooooooo";
            goto frame_exception_exit_1;
        }
        frame_68a9d0a26d7b8b382e7cb285e1b41374->m_frame.f_lineno = 127;
        tmp_ass_subvalue_2 = CALL_METHOD_NO_ARGS( tmp_called_instance_4, const_str_plain_lower );
        Py_DECREF( tmp_called_instance_4 );
        if ( tmp_ass_subvalue_2 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 127;
            type_description_1 = "oooooooooo";
            goto frame_exception_exit_1;
        }
        CHECK_OBJECT( var_date_time );
        tmp_ass_subscribed_2 = var_date_time;
        tmp_ass_subscript_2 = const_int_pos_1;
        tmp_ass_subscript_res_2 = SET_SUBSCRIPT_CONST( tmp_ass_subscribed_2, tmp_ass_subscript_2, 1, tmp_ass_subvalue_2 );
        Py_DECREF( tmp_ass_subvalue_2 );
        if ( tmp_ass_subscript_res_2 == false )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 127;
            type_description_1 = "oooooooooo";
            goto frame_exception_exit_1;
        }
    }
    {
        PyObject *tmp_ass_subvalue_3;
        PyObject *tmp_called_instance_6;
        PyObject *tmp_called_instance_7;
        PyObject *tmp_mvar_value_4;
        PyObject *tmp_args_element_name_5;
        PyObject *tmp_args_element_name_6;
        PyObject *tmp_ass_subscribed_3;
        PyObject *tmp_ass_subscript_3;
        int tmp_ass_subscript_res_3;
        tmp_mvar_value_4 = GET_STRING_DICT_VALUE( moduledict__strptime, (Nuitka_StringObject *)const_str_plain_time );

        if (unlikely( tmp_mvar_value_4 == NULL ))
        {
            tmp_mvar_value_4 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_time );
        }

        if ( tmp_mvar_value_4 == NULL )
        {

            exception_type = PyExc_NameError;
            Py_INCREF( exception_type );
            exception_value = PyUnicode_FromFormat( "name '%s' is not defined", "time" );
            exception_tb = NULL;
            NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
            CHAIN_EXCEPTION( exception_value );

            exception_lineno = 128;
            type_description_1 = "oooooooooo";
            goto frame_exception_exit_1;
        }

        tmp_called_instance_7 = tmp_mvar_value_4;
        tmp_args_element_name_5 = const_str_digest_602784fc5f474284dba606745fdc9a6e;
        CHECK_OBJECT( var_time_tuple );
        tmp_args_element_name_6 = var_time_tuple;
        frame_68a9d0a26d7b8b382e7cb285e1b41374->m_frame.f_lineno = 128;
        {
            PyObject *call_args[] = { tmp_args_element_name_5, tmp_args_element_name_6 };
            tmp_called_instance_6 = CALL_METHOD_WITH_ARGS2( tmp_called_instance_7, const_str_plain_strftime, call_args );
        }

        if ( tmp_called_instance_6 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 128;
            type_description_1 = "oooooooooo";
            goto frame_exception_exit_1;
        }
        frame_68a9d0a26d7b8b382e7cb285e1b41374->m_frame.f_lineno = 128;
        tmp_ass_subvalue_3 = CALL_METHOD_NO_ARGS( tmp_called_instance_6, const_str_plain_lower );
        Py_DECREF( tmp_called_instance_6 );
        if ( tmp_ass_subvalue_3 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 128;
            type_description_1 = "oooooooooo";
            goto frame_exception_exit_1;
        }
        CHECK_OBJECT( var_date_time );
        tmp_ass_subscribed_3 = var_date_time;
        tmp_ass_subscript_3 = const_int_pos_2;
        tmp_ass_subscript_res_3 = SET_SUBSCRIPT_CONST( tmp_ass_subscribed_3, tmp_ass_subscript_3, 2, tmp_ass_subvalue_3 );
        Py_DECREF( tmp_ass_subvalue_3 );
        if ( tmp_ass_subscript_res_3 == false )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 128;
            type_description_1 = "oooooooooo";
            goto frame_exception_exit_1;
        }
    }
    {
        PyObject *tmp_assign_source_3;
        PyObject *tmp_list_element_1;
        PyObject *tmp_tuple_element_1;
        PyObject *tmp_subscribed_name_1;
        PyObject *tmp_source_name_1;
        PyObject *tmp_subscript_name_1;
        PyObject *tmp_tuple_element_2;
        PyObject *tmp_subscribed_name_2;
        PyObject *tmp_source_name_2;
        PyObject *tmp_subscript_name_2;
        PyObject *tmp_tuple_element_3;
        PyObject *tmp_subscribed_name_3;
        PyObject *tmp_source_name_3;
        PyObject *tmp_subscript_name_3;
        PyObject *tmp_tuple_element_4;
        PyObject *tmp_subscribed_name_4;
        PyObject *tmp_source_name_4;
        PyObject *tmp_subscript_name_4;
        PyObject *tmp_tuple_element_5;
        PyObject *tmp_subscribed_name_5;
        PyObject *tmp_source_name_5;
        PyObject *tmp_subscript_name_5;
        tmp_list_element_1 = const_tuple_str_chr_37_str_digest_14d760694ac12dfa4c72b22a180ebfa1_tuple;
        tmp_assign_source_3 = PyList_New( 17 );
        Py_INCREF( tmp_list_element_1 );
        PyList_SET_ITEM( tmp_assign_source_3, 0, tmp_list_element_1 );
        CHECK_OBJECT( par_self );
        tmp_source_name_1 = par_self;
        tmp_subscribed_name_1 = LOOKUP_ATTRIBUTE( tmp_source_name_1, const_str_plain_f_weekday );
        if ( tmp_subscribed_name_1 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
            Py_DECREF( tmp_assign_source_3 );

            exception_lineno = 129;
            type_description_1 = "oooooooooo";
            goto frame_exception_exit_1;
        }
        tmp_subscript_name_1 = const_int_pos_2;
        tmp_tuple_element_1 = LOOKUP_SUBSCRIPT_CONST( tmp_subscribed_name_1, tmp_subscript_name_1, 2 );
        Py_DECREF( tmp_subscribed_name_1 );
        if ( tmp_tuple_element_1 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
            Py_DECREF( tmp_assign_source_3 );

            exception_lineno = 129;
            type_description_1 = "oooooooooo";
            goto frame_exception_exit_1;
        }
        tmp_list_element_1 = PyTuple_New( 2 );
        PyTuple_SET_ITEM( tmp_list_element_1, 0, tmp_tuple_element_1 );
        tmp_tuple_element_1 = const_str_digest_796413f1c221747c0f6e6dee10cbaa30;
        Py_INCREF( tmp_tuple_element_1 );
        PyTuple_SET_ITEM( tmp_list_element_1, 1, tmp_tuple_element_1 );
        PyList_SET_ITEM( tmp_assign_source_3, 1, tmp_list_element_1 );
        CHECK_OBJECT( par_self );
        tmp_source_name_2 = par_self;
        tmp_subscribed_name_2 = LOOKUP_ATTRIBUTE( tmp_source_name_2, const_str_plain_f_month );
        if ( tmp_subscribed_name_2 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
            Py_DECREF( tmp_assign_source_3 );

            exception_lineno = 130;
            type_description_1 = "oooooooooo";
            goto frame_exception_exit_1;
        }
        tmp_subscript_name_2 = const_int_pos_3;
        tmp_tuple_element_2 = LOOKUP_SUBSCRIPT_CONST( tmp_subscribed_name_2, tmp_subscript_name_2, 3 );
        Py_DECREF( tmp_subscribed_name_2 );
        if ( tmp_tuple_element_2 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
            Py_DECREF( tmp_assign_source_3 );

            exception_lineno = 130;
            type_description_1 = "oooooooooo";
            goto frame_exception_exit_1;
        }
        tmp_list_element_1 = PyTuple_New( 2 );
        PyTuple_SET_ITEM( tmp_list_element_1, 0, tmp_tuple_element_2 );
        tmp_tuple_element_2 = const_str_digest_3c956e665586af00b965b921b351d009;
        Py_INCREF( tmp_tuple_element_2 );
        PyTuple_SET_ITEM( tmp_list_element_1, 1, tmp_tuple_element_2 );
        PyList_SET_ITEM( tmp_assign_source_3, 2, tmp_list_element_1 );
        CHECK_OBJECT( par_self );
        tmp_source_name_3 = par_self;
        tmp_subscribed_name_3 = LOOKUP_ATTRIBUTE( tmp_source_name_3, const_str_plain_a_weekday );
        if ( tmp_subscribed_name_3 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
            Py_DECREF( tmp_assign_source_3 );

            exception_lineno = 130;
            type_description_1 = "oooooooooo";
            goto frame_exception_exit_1;
        }
        tmp_subscript_name_3 = const_int_pos_2;
        tmp_tuple_element_3 = LOOKUP_SUBSCRIPT_CONST( tmp_subscribed_name_3, tmp_subscript_name_3, 2 );
        Py_DECREF( tmp_subscribed_name_3 );
        if ( tmp_tuple_element_3 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
            Py_DECREF( tmp_assign_source_3 );

            exception_lineno = 130;
            type_description_1 = "oooooooooo";
            goto frame_exception_exit_1;
        }
        tmp_list_element_1 = PyTuple_New( 2 );
        PyTuple_SET_ITEM( tmp_list_element_1, 0, tmp_tuple_element_3 );
        tmp_tuple_element_3 = const_str_digest_c9f0f3d4e43e594d04f0881714d4fd29;
        Py_INCREF( tmp_tuple_element_3 );
        PyTuple_SET_ITEM( tmp_list_element_1, 1, tmp_tuple_element_3 );
        PyList_SET_ITEM( tmp_assign_source_3, 3, tmp_list_element_1 );
        CHECK_OBJECT( par_self );
        tmp_source_name_4 = par_self;
        tmp_subscribed_name_4 = LOOKUP_ATTRIBUTE( tmp_source_name_4, const_str_plain_a_month );
        if ( tmp_subscribed_name_4 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
            Py_DECREF( tmp_assign_source_3 );

            exception_lineno = 131;
            type_description_1 = "oooooooooo";
            goto frame_exception_exit_1;
        }
        tmp_subscript_name_4 = const_int_pos_3;
        tmp_tuple_element_4 = LOOKUP_SUBSCRIPT_CONST( tmp_subscribed_name_4, tmp_subscript_name_4, 3 );
        Py_DECREF( tmp_subscribed_name_4 );
        if ( tmp_tuple_element_4 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
            Py_DECREF( tmp_assign_source_3 );

            exception_lineno = 131;
            type_description_1 = "oooooooooo";
            goto frame_exception_exit_1;
        }
        tmp_list_element_1 = PyTuple_New( 2 );
        PyTuple_SET_ITEM( tmp_list_element_1, 0, tmp_tuple_element_4 );
        tmp_tuple_element_4 = const_str_digest_8a6099b4aacb3464aabad3f932913077;
        Py_INCREF( tmp_tuple_element_4 );
        PyTuple_SET_ITEM( tmp_list_element_1, 1, tmp_tuple_element_4 );
        PyList_SET_ITEM( tmp_assign_source_3, 4, tmp_list_element_1 );
        CHECK_OBJECT( par_self );
        tmp_source_name_5 = par_self;
        tmp_subscribed_name_5 = LOOKUP_ATTRIBUTE( tmp_source_name_5, const_str_plain_am_pm );
        if ( tmp_subscribed_name_5 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
            Py_DECREF( tmp_assign_source_3 );

            exception_lineno = 131;
            type_description_1 = "oooooooooo";
            goto frame_exception_exit_1;
        }
        tmp_subscript_name_5 = const_int_pos_1;
        tmp_tuple_element_5 = LOOKUP_SUBSCRIPT_CONST( tmp_subscribed_name_5, tmp_subscript_name_5, 1 );
        Py_DECREF( tmp_subscribed_name_5 );
        if ( tmp_tuple_element_5 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
            Py_DECREF( tmp_assign_source_3 );

            exception_lineno = 131;
            type_description_1 = "oooooooooo";
            goto frame_exception_exit_1;
        }
        tmp_list_element_1 = PyTuple_New( 2 );
        PyTuple_SET_ITEM( tmp_list_element_1, 0, tmp_tuple_element_5 );
        tmp_tuple_element_5 = const_str_digest_554ef6b54c88f852fcfe5140d92d8a59;
        Py_INCREF( tmp_tuple_element_5 );
        PyTuple_SET_ITEM( tmp_list_element_1, 1, tmp_tuple_element_5 );
        PyList_SET_ITEM( tmp_assign_source_3, 5, tmp_list_element_1 );
        tmp_list_element_1 = const_tuple_str_plain_1999_str_digest_dd7f404000da4186c6331a3054c838c0_tuple;
        Py_INCREF( tmp_list_element_1 );
        PyList_SET_ITEM( tmp_assign_source_3, 6, tmp_list_element_1 );
        tmp_list_element_1 = const_tuple_str_plain_99_str_digest_fa1b5dacae75a98b63c71b2a200f7be5_tuple;
        Py_INCREF( tmp_list_element_1 );
        PyList_SET_ITEM( tmp_assign_source_3, 7, tmp_list_element_1 );
        tmp_list_element_1 = const_tuple_str_plain_22_str_digest_095a200de7b492308b44ac541287650b_tuple;
        Py_INCREF( tmp_list_element_1 );
        PyList_SET_ITEM( tmp_assign_source_3, 8, tmp_list_element_1 );
        tmp_list_element_1 = const_tuple_str_plain_44_str_digest_6faf706aa81bd74e9873064504519d03_tuple;
        Py_INCREF( tmp_list_element_1 );
        PyList_SET_ITEM( tmp_assign_source_3, 9, tmp_list_element_1 );
        tmp_list_element_1 = const_tuple_str_plain_55_str_digest_e8b2ef18b3a8d6cb16eef935f28e7bab_tuple;
        Py_INCREF( tmp_list_element_1 );
        PyList_SET_ITEM( tmp_assign_source_3, 10, tmp_list_element_1 );
        tmp_list_element_1 = const_tuple_str_plain_76_str_digest_280989b05aef9055d027d8441be13132_tuple;
        Py_INCREF( tmp_list_element_1 );
        PyList_SET_ITEM( tmp_assign_source_3, 11, tmp_list_element_1 );
        tmp_list_element_1 = const_tuple_str_plain_17_str_digest_a9f9a21e276932d061c34fdf077216a6_tuple;
        Py_INCREF( tmp_list_element_1 );
        PyList_SET_ITEM( tmp_assign_source_3, 12, tmp_list_element_1 );
        tmp_list_element_1 = const_tuple_str_plain_03_str_digest_2f11dc103ad593a8035a5dba9bd7df86_tuple;
        Py_INCREF( tmp_list_element_1 );
        PyList_SET_ITEM( tmp_assign_source_3, 13, tmp_list_element_1 );
        tmp_list_element_1 = const_tuple_str_plain_3_str_digest_2f11dc103ad593a8035a5dba9bd7df86_tuple;
        Py_INCREF( tmp_list_element_1 );
        PyList_SET_ITEM( tmp_assign_source_3, 14, tmp_list_element_1 );
        tmp_list_element_1 = const_tuple_str_plain_2_str_digest_b18d4ed10eb19ebc287a599231b0ef06_tuple;
        Py_INCREF( tmp_list_element_1 );
        PyList_SET_ITEM( tmp_assign_source_3, 15, tmp_list_element_1 );
        tmp_list_element_1 = const_tuple_str_plain_10_str_digest_e51dfba98805340d6c511fb7780da144_tuple;
        Py_INCREF( tmp_list_element_1 );
        PyList_SET_ITEM( tmp_assign_source_3, 16, tmp_list_element_1 );
        assert( var_replacement_pairs == NULL );
        var_replacement_pairs = tmp_assign_source_3;
    }
    {
        PyObject *tmp_called_name_1;
        PyObject *tmp_source_name_6;
        PyObject *tmp_call_result_1;
        PyObject *tmp_args_element_name_7;
        CHECK_OBJECT( var_replacement_pairs );
        tmp_source_name_6 = var_replacement_pairs;
        tmp_called_name_1 = LOOKUP_ATTRIBUTE( tmp_source_name_6, const_str_plain_extend );
        if ( tmp_called_name_1 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 137;
            type_description_1 = "oooooooooo";
            goto frame_exception_exit_1;
        }
        // Tried code:
        {
            PyObject *tmp_assign_source_4;
            PyObject *tmp_iter_arg_1;
            PyObject *tmp_source_name_7;
            CHECK_OBJECT( par_self );
            tmp_source_name_7 = par_self;
            tmp_iter_arg_1 = LOOKUP_ATTRIBUTE( tmp_source_name_7, const_str_plain_timezone );
            if ( tmp_iter_arg_1 == NULL )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 137;
                type_description_1 = "oooooooooo";
                goto try_except_handler_2;
            }
            tmp_assign_source_4 = MAKE_ITERATOR( tmp_iter_arg_1 );
            Py_DECREF( tmp_iter_arg_1 );
            if ( tmp_assign_source_4 == NULL )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 137;
                type_description_1 = "oooooooooo";
                goto try_except_handler_2;
            }
            assert( tmp_listcomp_1__$0 == NULL );
            tmp_listcomp_1__$0 = tmp_assign_source_4;
        }
        {
            PyObject *tmp_assign_source_5;
            tmp_assign_source_5 = PyList_New( 0 );
            assert( tmp_listcomp_1__contraction == NULL );
            tmp_listcomp_1__contraction = tmp_assign_source_5;
        }
        MAKE_OR_REUSE_FRAME( cache_frame_ce652515a9e179106980a19fe1e55af4_2, codeobj_ce652515a9e179106980a19fe1e55af4, module__strptime, sizeof(void *)+sizeof(void *) );
        frame_ce652515a9e179106980a19fe1e55af4_2 = cache_frame_ce652515a9e179106980a19fe1e55af4_2;

        // Push the new frame as the currently active one.
        pushFrameStack( frame_ce652515a9e179106980a19fe1e55af4_2 );

        // Mark the frame object as in use, ref count 1 will be up for reuse.
        assert( Py_REFCNT( frame_ce652515a9e179106980a19fe1e55af4_2 ) == 2 ); // Frame stack

        // Framed code:
        // Tried code:
        loop_start_1:;
        {
            PyObject *tmp_next_source_1;
            PyObject *tmp_assign_source_6;
            CHECK_OBJECT( tmp_listcomp_1__$0 );
            tmp_next_source_1 = tmp_listcomp_1__$0;
            tmp_assign_source_6 = ITERATOR_NEXT( tmp_next_source_1 );
            if ( tmp_assign_source_6 == NULL )
            {
                if ( CHECK_AND_CLEAR_STOP_ITERATION_OCCURRED() )
                {

                    goto loop_end_1;
                }
                else
                {

                    FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
                    type_description_2 = "oo";
                    exception_lineno = 137;
                    goto try_except_handler_3;
                }
            }

            {
                PyObject *old = tmp_listcomp_1__iter_value_1;
                tmp_listcomp_1__iter_value_1 = tmp_assign_source_6;
                Py_XDECREF( old );
            }

        }
        {
            PyObject *tmp_assign_source_7;
            CHECK_OBJECT( tmp_listcomp_1__iter_value_1 );
            tmp_assign_source_7 = tmp_listcomp_1__iter_value_1;
            {
                PyObject *old = outline_0_var_tz_values;
                outline_0_var_tz_values = tmp_assign_source_7;
                Py_INCREF( outline_0_var_tz_values );
                Py_XDECREF( old );
            }

        }
        {
            PyObject *tmp_assign_source_8;
            PyObject *tmp_iter_arg_2;
            CHECK_OBJECT( outline_0_var_tz_values );
            tmp_iter_arg_2 = outline_0_var_tz_values;
            tmp_assign_source_8 = MAKE_ITERATOR( tmp_iter_arg_2 );
            if ( tmp_assign_source_8 == NULL )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 137;
                type_description_2 = "oo";
                goto try_except_handler_3;
            }
            {
                PyObject *old = tmp_listcomp_1__contraction_iter_0;
                tmp_listcomp_1__contraction_iter_0 = tmp_assign_source_8;
                Py_XDECREF( old );
            }

        }
        loop_start_2:;
        {
            PyObject *tmp_next_source_2;
            PyObject *tmp_assign_source_9;
            CHECK_OBJECT( tmp_listcomp_1__contraction_iter_0 );
            tmp_next_source_2 = tmp_listcomp_1__contraction_iter_0;
            tmp_assign_source_9 = ITERATOR_NEXT( tmp_next_source_2 );
            if ( tmp_assign_source_9 == NULL )
            {
                if ( CHECK_AND_CLEAR_STOP_ITERATION_OCCURRED() )
                {

                    goto loop_end_2;
                }
                else
                {

                    FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
                    type_description_2 = "oo";
                    exception_lineno = 137;
                    goto try_except_handler_3;
                }
            }

            {
                PyObject *old = tmp_listcomp_1__iter_value_0;
                tmp_listcomp_1__iter_value_0 = tmp_assign_source_9;
                Py_XDECREF( old );
            }

        }
        {
            PyObject *tmp_assign_source_10;
            CHECK_OBJECT( tmp_listcomp_1__iter_value_0 );
            tmp_assign_source_10 = tmp_listcomp_1__iter_value_0;
            {
                PyObject *old = outline_0_var_tz;
                outline_0_var_tz = tmp_assign_source_10;
                Py_INCREF( outline_0_var_tz );
                Py_XDECREF( old );
            }

        }
        {
            PyObject *tmp_append_list_1;
            PyObject *tmp_append_value_1;
            PyObject *tmp_tuple_element_6;
            CHECK_OBJECT( tmp_listcomp_1__contraction );
            tmp_append_list_1 = tmp_listcomp_1__contraction;
            CHECK_OBJECT( outline_0_var_tz );
            tmp_tuple_element_6 = outline_0_var_tz;
            tmp_append_value_1 = PyTuple_New( 2 );
            Py_INCREF( tmp_tuple_element_6 );
            PyTuple_SET_ITEM( tmp_append_value_1, 0, tmp_tuple_element_6 );
            tmp_tuple_element_6 = const_str_digest_502a96b8b32621f9b74f46be611a07df;
            Py_INCREF( tmp_tuple_element_6 );
            PyTuple_SET_ITEM( tmp_append_value_1, 1, tmp_tuple_element_6 );
            assert( PyList_Check( tmp_append_list_1 ) );
            tmp_res = PyList_Append( tmp_append_list_1, tmp_append_value_1 );
            Py_DECREF( tmp_append_value_1 );
            if ( tmp_res == -1 )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 137;
                type_description_2 = "oo";
                goto try_except_handler_3;
            }
        }
        if ( CONSIDER_THREADING() == false )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 137;
            type_description_2 = "oo";
            goto try_except_handler_3;
        }
        goto loop_start_2;
        loop_end_2:;
        CHECK_OBJECT( (PyObject *)tmp_listcomp_1__contraction_iter_0 );
        Py_DECREF( tmp_listcomp_1__contraction_iter_0 );
        tmp_listcomp_1__contraction_iter_0 = NULL;

        if ( CONSIDER_THREADING() == false )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 137;
            type_description_2 = "oo";
            goto try_except_handler_3;
        }
        goto loop_start_1;
        loop_end_1:;
        CHECK_OBJECT( tmp_listcomp_1__contraction );
        tmp_args_element_name_7 = tmp_listcomp_1__contraction;
        Py_INCREF( tmp_args_element_name_7 );
        goto try_return_handler_3;
        // tried codes exits in all cases
        NUITKA_CANNOT_GET_HERE( _strptime$$$function_7___calc_date_time );
        return NULL;
        // Return handler code:
        try_return_handler_3:;
        CHECK_OBJECT( (PyObject *)tmp_listcomp_1__$0 );
        Py_DECREF( tmp_listcomp_1__$0 );
        tmp_listcomp_1__$0 = NULL;

        CHECK_OBJECT( (PyObject *)tmp_listcomp_1__contraction );
        Py_DECREF( tmp_listcomp_1__contraction );
        tmp_listcomp_1__contraction = NULL;

        Py_XDECREF( tmp_listcomp_1__iter_value_0 );
        tmp_listcomp_1__iter_value_0 = NULL;

        Py_XDECREF( tmp_listcomp_1__contraction_iter_0 );
        tmp_listcomp_1__contraction_iter_0 = NULL;

        Py_XDECREF( tmp_listcomp_1__iter_value_1 );
        tmp_listcomp_1__iter_value_1 = NULL;

        goto frame_return_exit_1;
        // Exception handler code:
        try_except_handler_3:;
        exception_keeper_type_1 = exception_type;
        exception_keeper_value_1 = exception_value;
        exception_keeper_tb_1 = exception_tb;
        exception_keeper_lineno_1 = exception_lineno;
        exception_type = NULL;
        exception_value = NULL;
        exception_tb = NULL;
        exception_lineno = 0;

        CHECK_OBJECT( (PyObject *)tmp_listcomp_1__$0 );
        Py_DECREF( tmp_listcomp_1__$0 );
        tmp_listcomp_1__$0 = NULL;

        CHECK_OBJECT( (PyObject *)tmp_listcomp_1__contraction );
        Py_DECREF( tmp_listcomp_1__contraction );
        tmp_listcomp_1__contraction = NULL;

        Py_XDECREF( tmp_listcomp_1__iter_value_0 );
        tmp_listcomp_1__iter_value_0 = NULL;

        Py_XDECREF( tmp_listcomp_1__contraction_iter_0 );
        tmp_listcomp_1__contraction_iter_0 = NULL;

        Py_XDECREF( tmp_listcomp_1__iter_value_1 );
        tmp_listcomp_1__iter_value_1 = NULL;

        // Re-raise.
        exception_type = exception_keeper_type_1;
        exception_value = exception_keeper_value_1;
        exception_tb = exception_keeper_tb_1;
        exception_lineno = exception_keeper_lineno_1;

        goto frame_exception_exit_2;
        // End of try:

#if 0
        RESTORE_FRAME_EXCEPTION( frame_ce652515a9e179106980a19fe1e55af4_2 );
#endif

        // Put the previous frame back on top.
        popFrameStack();

        goto frame_no_exception_1;

        frame_return_exit_1:;
#if 0
        RESTORE_FRAME_EXCEPTION( frame_ce652515a9e179106980a19fe1e55af4_2 );
#endif

        // Put the previous frame back on top.
        popFrameStack();

        goto try_return_handler_2;

        frame_exception_exit_2:;

#if 0
        RESTORE_FRAME_EXCEPTION( frame_ce652515a9e179106980a19fe1e55af4_2 );
#endif

        if ( exception_tb == NULL )
        {
            exception_tb = MAKE_TRACEBACK( frame_ce652515a9e179106980a19fe1e55af4_2, exception_lineno );
        }
        else if ( exception_tb->tb_frame != &frame_ce652515a9e179106980a19fe1e55af4_2->m_frame )
        {
            exception_tb = ADD_TRACEBACK( exception_tb, frame_ce652515a9e179106980a19fe1e55af4_2, exception_lineno );
        }

        // Attachs locals to frame if any.
        Nuitka_Frame_AttachLocals(
            (struct Nuitka_FrameObject *)frame_ce652515a9e179106980a19fe1e55af4_2,
            type_description_2,
            outline_0_var_tz_values,
            outline_0_var_tz
        );


        // Release cached frame.
        if ( frame_ce652515a9e179106980a19fe1e55af4_2 == cache_frame_ce652515a9e179106980a19fe1e55af4_2 )
        {
            Py_DECREF( frame_ce652515a9e179106980a19fe1e55af4_2 );
        }
        cache_frame_ce652515a9e179106980a19fe1e55af4_2 = NULL;

        assertFrameObject( frame_ce652515a9e179106980a19fe1e55af4_2 );

        // Put the previous frame back on top.
        popFrameStack();

        // Return the error.
        goto nested_frame_exit_1;

        frame_no_exception_1:;
        goto skip_nested_handling_1;
        nested_frame_exit_1:;
        type_description_1 = "oooooooooo";
        goto try_except_handler_2;
        skip_nested_handling_1:;
        // tried codes exits in all cases
        NUITKA_CANNOT_GET_HERE( _strptime$$$function_7___calc_date_time );
        return NULL;
        // Return handler code:
        try_return_handler_2:;
        Py_XDECREF( outline_0_var_tz_values );
        outline_0_var_tz_values = NULL;

        Py_XDECREF( outline_0_var_tz );
        outline_0_var_tz = NULL;

        goto outline_result_1;
        // Exception handler code:
        try_except_handler_2:;
        exception_keeper_type_2 = exception_type;
        exception_keeper_value_2 = exception_value;
        exception_keeper_tb_2 = exception_tb;
        exception_keeper_lineno_2 = exception_lineno;
        exception_type = NULL;
        exception_value = NULL;
        exception_tb = NULL;
        exception_lineno = 0;

        Py_XDECREF( outline_0_var_tz_values );
        outline_0_var_tz_values = NULL;

        Py_XDECREF( outline_0_var_tz );
        outline_0_var_tz = NULL;

        // Re-raise.
        exception_type = exception_keeper_type_2;
        exception_value = exception_keeper_value_2;
        exception_tb = exception_keeper_tb_2;
        exception_lineno = exception_keeper_lineno_2;

        goto outline_exception_1;
        // End of try:
        // Return statement must have exited already.
        NUITKA_CANNOT_GET_HERE( _strptime$$$function_7___calc_date_time );
        return NULL;
        outline_exception_1:;
        exception_lineno = 137;
        goto frame_exception_exit_1;
        outline_result_1:;
        frame_68a9d0a26d7b8b382e7cb285e1b41374->m_frame.f_lineno = 137;
        {
            PyObject *call_args[] = { tmp_args_element_name_7 };
            tmp_call_result_1 = CALL_FUNCTION_WITH_ARGS1( tmp_called_name_1, call_args );
        }

        Py_DECREF( tmp_called_name_1 );
        Py_DECREF( tmp_args_element_name_7 );
        if ( tmp_call_result_1 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 137;
            type_description_1 = "oooooooooo";
            goto frame_exception_exit_1;
        }
        Py_DECREF( tmp_call_result_1 );
    }
    {
        PyObject *tmp_assign_source_11;
        PyObject *tmp_iter_arg_3;
        tmp_iter_arg_3 = const_tuple_9a3e76e3206e4ecaeb37bba0c487eba6_tuple;
        tmp_assign_source_11 = MAKE_ITERATOR( tmp_iter_arg_3 );
        assert( !(tmp_assign_source_11 == NULL) );
        assert( tmp_for_loop_1__for_iterator == NULL );
        tmp_for_loop_1__for_iterator = tmp_assign_source_11;
    }
    // Tried code:
    loop_start_3:;
    {
        PyObject *tmp_next_source_3;
        PyObject *tmp_assign_source_12;
        CHECK_OBJECT( tmp_for_loop_1__for_iterator );
        tmp_next_source_3 = tmp_for_loop_1__for_iterator;
        tmp_assign_source_12 = ITERATOR_NEXT( tmp_next_source_3 );
        if ( tmp_assign_source_12 == NULL )
        {
            if ( CHECK_AND_CLEAR_STOP_ITERATION_OCCURRED() )
            {

                goto loop_end_3;
            }
            else
            {

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
                type_description_1 = "oooooooooo";
                exception_lineno = 139;
                goto try_except_handler_4;
            }
        }

        {
            PyObject *old = tmp_for_loop_1__iter_value;
            tmp_for_loop_1__iter_value = tmp_assign_source_12;
            Py_XDECREF( old );
        }

    }
    // Tried code:
    {
        PyObject *tmp_assign_source_13;
        PyObject *tmp_iter_arg_4;
        CHECK_OBJECT( tmp_for_loop_1__iter_value );
        tmp_iter_arg_4 = tmp_for_loop_1__iter_value;
        tmp_assign_source_13 = MAKE_UNPACK_ITERATOR( tmp_iter_arg_4 );
        if ( tmp_assign_source_13 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 139;
            type_description_1 = "oooooooooo";
            goto try_except_handler_5;
        }
        {
            PyObject *old = tmp_tuple_unpack_1__source_iter;
            tmp_tuple_unpack_1__source_iter = tmp_assign_source_13;
            Py_XDECREF( old );
        }

    }
    // Tried code:
    {
        PyObject *tmp_assign_source_14;
        PyObject *tmp_unpack_1;
        CHECK_OBJECT( tmp_tuple_unpack_1__source_iter );
        tmp_unpack_1 = tmp_tuple_unpack_1__source_iter;
        tmp_assign_source_14 = UNPACK_NEXT( tmp_unpack_1, 0, 2 );
        if ( tmp_assign_source_14 == NULL )
        {
            if ( !ERROR_OCCURRED() )
            {
                exception_type = PyExc_StopIteration;
                Py_INCREF( exception_type );
                exception_value = NULL;
                exception_tb = NULL;
            }
            else
            {
                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
            }


            type_description_1 = "oooooooooo";
            exception_lineno = 139;
            goto try_except_handler_6;
        }
        {
            PyObject *old = tmp_tuple_unpack_1__element_1;
            tmp_tuple_unpack_1__element_1 = tmp_assign_source_14;
            Py_XDECREF( old );
        }

    }
    {
        PyObject *tmp_assign_source_15;
        PyObject *tmp_unpack_2;
        CHECK_OBJECT( tmp_tuple_unpack_1__source_iter );
        tmp_unpack_2 = tmp_tuple_unpack_1__source_iter;
        tmp_assign_source_15 = UNPACK_NEXT( tmp_unpack_2, 1, 2 );
        if ( tmp_assign_source_15 == NULL )
        {
            if ( !ERROR_OCCURRED() )
            {
                exception_type = PyExc_StopIteration;
                Py_INCREF( exception_type );
                exception_value = NULL;
                exception_tb = NULL;
            }
            else
            {
                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
            }


            type_description_1 = "oooooooooo";
            exception_lineno = 139;
            goto try_except_handler_6;
        }
        {
            PyObject *old = tmp_tuple_unpack_1__element_2;
            tmp_tuple_unpack_1__element_2 = tmp_assign_source_15;
            Py_XDECREF( old );
        }

    }
    {
        PyObject *tmp_iterator_name_1;
        CHECK_OBJECT( tmp_tuple_unpack_1__source_iter );
        tmp_iterator_name_1 = tmp_tuple_unpack_1__source_iter;
        // Check if iterator has left-over elements.
        CHECK_OBJECT( tmp_iterator_name_1 ); assert( HAS_ITERNEXT( tmp_iterator_name_1 ) );

        tmp_iterator_attempt = (*Py_TYPE( tmp_iterator_name_1 )->tp_iternext)( tmp_iterator_name_1 );

        if (likely( tmp_iterator_attempt == NULL ))
        {
            PyObject *error = GET_ERROR_OCCURRED();

            if ( error != NULL )
            {
                if ( EXCEPTION_MATCH_BOOL_SINGLE( error, PyExc_StopIteration ))
                {
                    CLEAR_ERROR_OCCURRED();
                }
                else
                {
                    FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );

                    type_description_1 = "oooooooooo";
                    exception_lineno = 139;
                    goto try_except_handler_6;
                }
            }
        }
        else
        {
            Py_DECREF( tmp_iterator_attempt );

            // TODO: Could avoid PyErr_Format.
#if PYTHON_VERSION < 300
            PyErr_Format( PyExc_ValueError, "too many values to unpack" );
#else
            PyErr_Format( PyExc_ValueError, "too many values to unpack (expected 2)" );
#endif
            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );

            type_description_1 = "oooooooooo";
            exception_lineno = 139;
            goto try_except_handler_6;
        }
    }
    goto try_end_1;
    // Exception handler code:
    try_except_handler_6:;
    exception_keeper_type_3 = exception_type;
    exception_keeper_value_3 = exception_value;
    exception_keeper_tb_3 = exception_tb;
    exception_keeper_lineno_3 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    CHECK_OBJECT( (PyObject *)tmp_tuple_unpack_1__source_iter );
    Py_DECREF( tmp_tuple_unpack_1__source_iter );
    tmp_tuple_unpack_1__source_iter = NULL;

    // Re-raise.
    exception_type = exception_keeper_type_3;
    exception_value = exception_keeper_value_3;
    exception_tb = exception_keeper_tb_3;
    exception_lineno = exception_keeper_lineno_3;

    goto try_except_handler_5;
    // End of try:
    try_end_1:;
    goto try_end_2;
    // Exception handler code:
    try_except_handler_5:;
    exception_keeper_type_4 = exception_type;
    exception_keeper_value_4 = exception_value;
    exception_keeper_tb_4 = exception_tb;
    exception_keeper_lineno_4 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    Py_XDECREF( tmp_tuple_unpack_1__element_1 );
    tmp_tuple_unpack_1__element_1 = NULL;

    Py_XDECREF( tmp_tuple_unpack_1__element_2 );
    tmp_tuple_unpack_1__element_2 = NULL;

    // Re-raise.
    exception_type = exception_keeper_type_4;
    exception_value = exception_keeper_value_4;
    exception_tb = exception_keeper_tb_4;
    exception_lineno = exception_keeper_lineno_4;

    goto try_except_handler_4;
    // End of try:
    try_end_2:;
    CHECK_OBJECT( (PyObject *)tmp_tuple_unpack_1__source_iter );
    Py_DECREF( tmp_tuple_unpack_1__source_iter );
    tmp_tuple_unpack_1__source_iter = NULL;

    {
        PyObject *tmp_assign_source_16;
        CHECK_OBJECT( tmp_tuple_unpack_1__element_1 );
        tmp_assign_source_16 = tmp_tuple_unpack_1__element_1;
        {
            PyObject *old = var_offset;
            var_offset = tmp_assign_source_16;
            Py_INCREF( var_offset );
            Py_XDECREF( old );
        }

    }
    Py_XDECREF( tmp_tuple_unpack_1__element_1 );
    tmp_tuple_unpack_1__element_1 = NULL;

    {
        PyObject *tmp_assign_source_17;
        CHECK_OBJECT( tmp_tuple_unpack_1__element_2 );
        tmp_assign_source_17 = tmp_tuple_unpack_1__element_2;
        {
            PyObject *old = var_directive;
            var_directive = tmp_assign_source_17;
            Py_INCREF( var_directive );
            Py_XDECREF( old );
        }

    }
    Py_XDECREF( tmp_tuple_unpack_1__element_2 );
    tmp_tuple_unpack_1__element_2 = NULL;

    {
        PyObject *tmp_assign_source_18;
        PyObject *tmp_subscribed_name_6;
        PyObject *tmp_subscript_name_6;
        CHECK_OBJECT( var_date_time );
        tmp_subscribed_name_6 = var_date_time;
        CHECK_OBJECT( var_offset );
        tmp_subscript_name_6 = var_offset;
        tmp_assign_source_18 = LOOKUP_SUBSCRIPT( tmp_subscribed_name_6, tmp_subscript_name_6 );
        if ( tmp_assign_source_18 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 140;
            type_description_1 = "oooooooooo";
            goto try_except_handler_4;
        }
        {
            PyObject *old = var_current_format;
            var_current_format = tmp_assign_source_18;
            Py_XDECREF( old );
        }

    }
    {
        PyObject *tmp_assign_source_19;
        PyObject *tmp_iter_arg_5;
        CHECK_OBJECT( var_replacement_pairs );
        tmp_iter_arg_5 = var_replacement_pairs;
        tmp_assign_source_19 = MAKE_ITERATOR( tmp_iter_arg_5 );
        if ( tmp_assign_source_19 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 141;
            type_description_1 = "oooooooooo";
            goto try_except_handler_4;
        }
        {
            PyObject *old = tmp_for_loop_2__for_iterator;
            tmp_for_loop_2__for_iterator = tmp_assign_source_19;
            Py_XDECREF( old );
        }

    }
    // Tried code:
    loop_start_4:;
    {
        PyObject *tmp_next_source_4;
        PyObject *tmp_assign_source_20;
        CHECK_OBJECT( tmp_for_loop_2__for_iterator );
        tmp_next_source_4 = tmp_for_loop_2__for_iterator;
        tmp_assign_source_20 = ITERATOR_NEXT( tmp_next_source_4 );
        if ( tmp_assign_source_20 == NULL )
        {
            if ( CHECK_AND_CLEAR_STOP_ITERATION_OCCURRED() )
            {

                goto loop_end_4;
            }
            else
            {

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
                type_description_1 = "oooooooooo";
                exception_lineno = 141;
                goto try_except_handler_7;
            }
        }

        {
            PyObject *old = tmp_for_loop_2__iter_value;
            tmp_for_loop_2__iter_value = tmp_assign_source_20;
            Py_XDECREF( old );
        }

    }
    // Tried code:
    {
        PyObject *tmp_assign_source_21;
        PyObject *tmp_iter_arg_6;
        CHECK_OBJECT( tmp_for_loop_2__iter_value );
        tmp_iter_arg_6 = tmp_for_loop_2__iter_value;
        tmp_assign_source_21 = MAKE_UNPACK_ITERATOR( tmp_iter_arg_6 );
        if ( tmp_assign_source_21 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 141;
            type_description_1 = "oooooooooo";
            goto try_except_handler_8;
        }
        {
            PyObject *old = tmp_tuple_unpack_2__source_iter;
            tmp_tuple_unpack_2__source_iter = tmp_assign_source_21;
            Py_XDECREF( old );
        }

    }
    // Tried code:
    {
        PyObject *tmp_assign_source_22;
        PyObject *tmp_unpack_3;
        CHECK_OBJECT( tmp_tuple_unpack_2__source_iter );
        tmp_unpack_3 = tmp_tuple_unpack_2__source_iter;
        tmp_assign_source_22 = UNPACK_NEXT( tmp_unpack_3, 0, 2 );
        if ( tmp_assign_source_22 == NULL )
        {
            if ( !ERROR_OCCURRED() )
            {
                exception_type = PyExc_StopIteration;
                Py_INCREF( exception_type );
                exception_value = NULL;
                exception_tb = NULL;
            }
            else
            {
                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
            }


            type_description_1 = "oooooooooo";
            exception_lineno = 141;
            goto try_except_handler_9;
        }
        {
            PyObject *old = tmp_tuple_unpack_2__element_1;
            tmp_tuple_unpack_2__element_1 = tmp_assign_source_22;
            Py_XDECREF( old );
        }

    }
    {
        PyObject *tmp_assign_source_23;
        PyObject *tmp_unpack_4;
        CHECK_OBJECT( tmp_tuple_unpack_2__source_iter );
        tmp_unpack_4 = tmp_tuple_unpack_2__source_iter;
        tmp_assign_source_23 = UNPACK_NEXT( tmp_unpack_4, 1, 2 );
        if ( tmp_assign_source_23 == NULL )
        {
            if ( !ERROR_OCCURRED() )
            {
                exception_type = PyExc_StopIteration;
                Py_INCREF( exception_type );
                exception_value = NULL;
                exception_tb = NULL;
            }
            else
            {
                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
            }


            type_description_1 = "oooooooooo";
            exception_lineno = 141;
            goto try_except_handler_9;
        }
        {
            PyObject *old = tmp_tuple_unpack_2__element_2;
            tmp_tuple_unpack_2__element_2 = tmp_assign_source_23;
            Py_XDECREF( old );
        }

    }
    {
        PyObject *tmp_iterator_name_2;
        CHECK_OBJECT( tmp_tuple_unpack_2__source_iter );
        tmp_iterator_name_2 = tmp_tuple_unpack_2__source_iter;
        // Check if iterator has left-over elements.
        CHECK_OBJECT( tmp_iterator_name_2 ); assert( HAS_ITERNEXT( tmp_iterator_name_2 ) );

        tmp_iterator_attempt = (*Py_TYPE( tmp_iterator_name_2 )->tp_iternext)( tmp_iterator_name_2 );

        if (likely( tmp_iterator_attempt == NULL ))
        {
            PyObject *error = GET_ERROR_OCCURRED();

            if ( error != NULL )
            {
                if ( EXCEPTION_MATCH_BOOL_SINGLE( error, PyExc_StopIteration ))
                {
                    CLEAR_ERROR_OCCURRED();
                }
                else
                {
                    FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );

                    type_description_1 = "oooooooooo";
                    exception_lineno = 141;
                    goto try_except_handler_9;
                }
            }
        }
        else
        {
            Py_DECREF( tmp_iterator_attempt );

            // TODO: Could avoid PyErr_Format.
#if PYTHON_VERSION < 300
            PyErr_Format( PyExc_ValueError, "too many values to unpack" );
#else
            PyErr_Format( PyExc_ValueError, "too many values to unpack (expected 2)" );
#endif
            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );

            type_description_1 = "oooooooooo";
            exception_lineno = 141;
            goto try_except_handler_9;
        }
    }
    goto try_end_3;
    // Exception handler code:
    try_except_handler_9:;
    exception_keeper_type_5 = exception_type;
    exception_keeper_value_5 = exception_value;
    exception_keeper_tb_5 = exception_tb;
    exception_keeper_lineno_5 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    CHECK_OBJECT( (PyObject *)tmp_tuple_unpack_2__source_iter );
    Py_DECREF( tmp_tuple_unpack_2__source_iter );
    tmp_tuple_unpack_2__source_iter = NULL;

    // Re-raise.
    exception_type = exception_keeper_type_5;
    exception_value = exception_keeper_value_5;
    exception_tb = exception_keeper_tb_5;
    exception_lineno = exception_keeper_lineno_5;

    goto try_except_handler_8;
    // End of try:
    try_end_3:;
    goto try_end_4;
    // Exception handler code:
    try_except_handler_8:;
    exception_keeper_type_6 = exception_type;
    exception_keeper_value_6 = exception_value;
    exception_keeper_tb_6 = exception_tb;
    exception_keeper_lineno_6 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    Py_XDECREF( tmp_tuple_unpack_2__element_1 );
    tmp_tuple_unpack_2__element_1 = NULL;

    Py_XDECREF( tmp_tuple_unpack_2__element_2 );
    tmp_tuple_unpack_2__element_2 = NULL;

    // Re-raise.
    exception_type = exception_keeper_type_6;
    exception_value = exception_keeper_value_6;
    exception_tb = exception_keeper_tb_6;
    exception_lineno = exception_keeper_lineno_6;

    goto try_except_handler_7;
    // End of try:
    try_end_4:;
    CHECK_OBJECT( (PyObject *)tmp_tuple_unpack_2__source_iter );
    Py_DECREF( tmp_tuple_unpack_2__source_iter );
    tmp_tuple_unpack_2__source_iter = NULL;

    {
        PyObject *tmp_assign_source_24;
        CHECK_OBJECT( tmp_tuple_unpack_2__element_1 );
        tmp_assign_source_24 = tmp_tuple_unpack_2__element_1;
        {
            PyObject *old = var_old;
            var_old = tmp_assign_source_24;
            Py_INCREF( var_old );
            Py_XDECREF( old );
        }

    }
    Py_XDECREF( tmp_tuple_unpack_2__element_1 );
    tmp_tuple_unpack_2__element_1 = NULL;

    {
        PyObject *tmp_assign_source_25;
        CHECK_OBJECT( tmp_tuple_unpack_2__element_2 );
        tmp_assign_source_25 = tmp_tuple_unpack_2__element_2;
        {
            PyObject *old = var_new;
            var_new = tmp_assign_source_25;
            Py_INCREF( var_new );
            Py_XDECREF( old );
        }

    }
    Py_XDECREF( tmp_tuple_unpack_2__element_2 );
    tmp_tuple_unpack_2__element_2 = NULL;

    {
        nuitka_bool tmp_condition_result_1;
        int tmp_truth_name_1;
        CHECK_OBJECT( var_old );
        tmp_truth_name_1 = CHECK_IF_TRUE( var_old );
        if ( tmp_truth_name_1 == -1 )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 146;
            type_description_1 = "oooooooooo";
            goto try_except_handler_7;
        }
        tmp_condition_result_1 = tmp_truth_name_1 == 1 ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
        if ( tmp_condition_result_1 == NUITKA_BOOL_TRUE )
        {
            goto branch_yes_1;
        }
        else
        {
            goto branch_no_1;
        }
        branch_yes_1:;
        {
            PyObject *tmp_assign_source_26;
            PyObject *tmp_called_instance_8;
            PyObject *tmp_args_element_name_8;
            PyObject *tmp_args_element_name_9;
            if ( var_current_format == NULL )
            {

                exception_type = PyExc_UnboundLocalError;
                Py_INCREF( exception_type );
                exception_value = PyUnicode_FromFormat( "local variable '%s' referenced before assignment", "current_format" );
                exception_tb = NULL;
                NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
                CHAIN_EXCEPTION( exception_value );

                exception_lineno = 147;
                type_description_1 = "oooooooooo";
                goto try_except_handler_7;
            }

            tmp_called_instance_8 = var_current_format;
            CHECK_OBJECT( var_old );
            tmp_args_element_name_8 = var_old;
            CHECK_OBJECT( var_new );
            tmp_args_element_name_9 = var_new;
            frame_68a9d0a26d7b8b382e7cb285e1b41374->m_frame.f_lineno = 147;
            {
                PyObject *call_args[] = { tmp_args_element_name_8, tmp_args_element_name_9 };
                tmp_assign_source_26 = CALL_METHOD_WITH_ARGS2( tmp_called_instance_8, const_str_plain_replace, call_args );
            }

            if ( tmp_assign_source_26 == NULL )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 147;
                type_description_1 = "oooooooooo";
                goto try_except_handler_7;
            }
            {
                PyObject *old = var_current_format;
                var_current_format = tmp_assign_source_26;
                Py_XDECREF( old );
            }

        }
        branch_no_1:;
    }
    if ( CONSIDER_THREADING() == false )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 141;
        type_description_1 = "oooooooooo";
        goto try_except_handler_7;
    }
    goto loop_start_4;
    loop_end_4:;
    goto try_end_5;
    // Exception handler code:
    try_except_handler_7:;
    exception_keeper_type_7 = exception_type;
    exception_keeper_value_7 = exception_value;
    exception_keeper_tb_7 = exception_tb;
    exception_keeper_lineno_7 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    Py_XDECREF( tmp_for_loop_2__iter_value );
    tmp_for_loop_2__iter_value = NULL;

    CHECK_OBJECT( (PyObject *)tmp_for_loop_2__for_iterator );
    Py_DECREF( tmp_for_loop_2__for_iterator );
    tmp_for_loop_2__for_iterator = NULL;

    // Re-raise.
    exception_type = exception_keeper_type_7;
    exception_value = exception_keeper_value_7;
    exception_tb = exception_keeper_tb_7;
    exception_lineno = exception_keeper_lineno_7;

    goto try_except_handler_4;
    // End of try:
    try_end_5:;
    Py_XDECREF( tmp_for_loop_2__iter_value );
    tmp_for_loop_2__iter_value = NULL;

    CHECK_OBJECT( (PyObject *)tmp_for_loop_2__for_iterator );
    Py_DECREF( tmp_for_loop_2__for_iterator );
    tmp_for_loop_2__for_iterator = NULL;

    {
        PyObject *tmp_assign_source_27;
        PyObject *tmp_called_instance_9;
        PyObject *tmp_mvar_value_5;
        tmp_mvar_value_5 = GET_STRING_DICT_VALUE( moduledict__strptime, (Nuitka_StringObject *)const_str_plain_time );

        if (unlikely( tmp_mvar_value_5 == NULL ))
        {
            tmp_mvar_value_5 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_time );
        }

        if ( tmp_mvar_value_5 == NULL )
        {

            exception_type = PyExc_NameError;
            Py_INCREF( exception_type );
            exception_value = PyUnicode_FromFormat( "name '%s' is not defined", "time" );
            exception_tb = NULL;
            NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
            CHAIN_EXCEPTION( exception_value );

            exception_lineno = 151;
            type_description_1 = "oooooooooo";
            goto try_except_handler_4;
        }

        tmp_called_instance_9 = tmp_mvar_value_5;
        frame_68a9d0a26d7b8b382e7cb285e1b41374->m_frame.f_lineno = 151;
        tmp_assign_source_27 = CALL_METHOD_WITH_ARGS1( tmp_called_instance_9, const_str_plain_struct_time, &PyTuple_GET_ITEM( const_tuple_tuple_45d0bd9492a3285bf6d849b2ff3dfb9d_tuple_tuple, 0 ) );

        if ( tmp_assign_source_27 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 151;
            type_description_1 = "oooooooooo";
            goto try_except_handler_4;
        }
        {
            PyObject *old = var_time_tuple;
            assert( old != NULL );
            var_time_tuple = tmp_assign_source_27;
            Py_DECREF( old );
        }

    }
    {
        nuitka_bool tmp_condition_result_2;
        PyObject *tmp_compexpr_left_1;
        PyObject *tmp_compexpr_right_1;
        PyObject *tmp_called_instance_10;
        PyObject *tmp_mvar_value_6;
        PyObject *tmp_args_element_name_10;
        PyObject *tmp_args_element_name_11;
        tmp_compexpr_left_1 = const_str_plain_00;
        tmp_mvar_value_6 = GET_STRING_DICT_VALUE( moduledict__strptime, (Nuitka_StringObject *)const_str_plain_time );

        if (unlikely( tmp_mvar_value_6 == NULL ))
        {
            tmp_mvar_value_6 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_time );
        }

        if ( tmp_mvar_value_6 == NULL )
        {

            exception_type = PyExc_NameError;
            Py_INCREF( exception_type );
            exception_value = PyUnicode_FromFormat( "name '%s' is not defined", "time" );
            exception_tb = NULL;
            NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
            CHAIN_EXCEPTION( exception_value );

            exception_lineno = 152;
            type_description_1 = "oooooooooo";
            goto try_except_handler_4;
        }

        tmp_called_instance_10 = tmp_mvar_value_6;
        CHECK_OBJECT( var_directive );
        tmp_args_element_name_10 = var_directive;
        CHECK_OBJECT( var_time_tuple );
        tmp_args_element_name_11 = var_time_tuple;
        frame_68a9d0a26d7b8b382e7cb285e1b41374->m_frame.f_lineno = 152;
        {
            PyObject *call_args[] = { tmp_args_element_name_10, tmp_args_element_name_11 };
            tmp_compexpr_right_1 = CALL_METHOD_WITH_ARGS2( tmp_called_instance_10, const_str_plain_strftime, call_args );
        }

        if ( tmp_compexpr_right_1 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 152;
            type_description_1 = "oooooooooo";
            goto try_except_handler_4;
        }
        tmp_res = PySequence_Contains( tmp_compexpr_right_1, tmp_compexpr_left_1 );
        Py_DECREF( tmp_compexpr_right_1 );
        if ( tmp_res == -1 )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 152;
            type_description_1 = "oooooooooo";
            goto try_except_handler_4;
        }
        tmp_condition_result_2 = ( tmp_res == 1 ) ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
        if ( tmp_condition_result_2 == NUITKA_BOOL_TRUE )
        {
            goto branch_yes_2;
        }
        else
        {
            goto branch_no_2;
        }
        branch_yes_2:;
        {
            PyObject *tmp_assign_source_28;
            tmp_assign_source_28 = const_str_digest_c93b5d16052f4aae4c6fab6ca2740278;
            {
                PyObject *old = var_U_W;
                var_U_W = tmp_assign_source_28;
                Py_INCREF( var_U_W );
                Py_XDECREF( old );
            }

        }
        goto branch_end_2;
        branch_no_2:;
        {
            PyObject *tmp_assign_source_29;
            tmp_assign_source_29 = const_str_digest_96556b6ad4d880315a12b5df59eefee5;
            {
                PyObject *old = var_U_W;
                var_U_W = tmp_assign_source_29;
                Py_INCREF( var_U_W );
                Py_XDECREF( old );
            }

        }
        branch_end_2:;
    }
    {
        PyObject *tmp_ass_subvalue_4;
        PyObject *tmp_called_instance_11;
        PyObject *tmp_args_element_name_12;
        PyObject *tmp_args_element_name_13;
        PyObject *tmp_ass_subscribed_4;
        PyObject *tmp_ass_subscript_4;
        if ( var_current_format == NULL )
        {

            exception_type = PyExc_UnboundLocalError;
            Py_INCREF( exception_type );
            exception_value = PyUnicode_FromFormat( "local variable '%s' referenced before assignment", "current_format" );
            exception_tb = NULL;
            NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
            CHAIN_EXCEPTION( exception_value );

            exception_lineno = 156;
            type_description_1 = "oooooooooo";
            goto try_except_handler_4;
        }

        tmp_called_instance_11 = var_current_format;
        tmp_args_element_name_12 = const_str_plain_11;
        CHECK_OBJECT( var_U_W );
        tmp_args_element_name_13 = var_U_W;
        frame_68a9d0a26d7b8b382e7cb285e1b41374->m_frame.f_lineno = 156;
        {
            PyObject *call_args[] = { tmp_args_element_name_12, tmp_args_element_name_13 };
            tmp_ass_subvalue_4 = CALL_METHOD_WITH_ARGS2( tmp_called_instance_11, const_str_plain_replace, call_args );
        }

        if ( tmp_ass_subvalue_4 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 156;
            type_description_1 = "oooooooooo";
            goto try_except_handler_4;
        }
        CHECK_OBJECT( var_date_time );
        tmp_ass_subscribed_4 = var_date_time;
        CHECK_OBJECT( var_offset );
        tmp_ass_subscript_4 = var_offset;
        tmp_result = SET_SUBSCRIPT( tmp_ass_subscribed_4, tmp_ass_subscript_4, tmp_ass_subvalue_4 );
        Py_DECREF( tmp_ass_subvalue_4 );
        if ( tmp_result == false )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 156;
            type_description_1 = "oooooooooo";
            goto try_except_handler_4;
        }
    }
    if ( CONSIDER_THREADING() == false )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 139;
        type_description_1 = "oooooooooo";
        goto try_except_handler_4;
    }
    goto loop_start_3;
    loop_end_3:;
    goto try_end_6;
    // Exception handler code:
    try_except_handler_4:;
    exception_keeper_type_8 = exception_type;
    exception_keeper_value_8 = exception_value;
    exception_keeper_tb_8 = exception_tb;
    exception_keeper_lineno_8 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    Py_XDECREF( tmp_for_loop_1__iter_value );
    tmp_for_loop_1__iter_value = NULL;

    CHECK_OBJECT( (PyObject *)tmp_for_loop_1__for_iterator );
    Py_DECREF( tmp_for_loop_1__for_iterator );
    tmp_for_loop_1__for_iterator = NULL;

    // Re-raise.
    exception_type = exception_keeper_type_8;
    exception_value = exception_keeper_value_8;
    exception_tb = exception_keeper_tb_8;
    exception_lineno = exception_keeper_lineno_8;

    goto frame_exception_exit_1;
    // End of try:
    try_end_6:;
    Py_XDECREF( tmp_for_loop_1__iter_value );
    tmp_for_loop_1__iter_value = NULL;

    CHECK_OBJECT( (PyObject *)tmp_for_loop_1__for_iterator );
    Py_DECREF( tmp_for_loop_1__for_iterator );
    tmp_for_loop_1__for_iterator = NULL;

    {
        PyObject *tmp_assattr_name_1;
        PyObject *tmp_subscribed_name_7;
        PyObject *tmp_subscript_name_7;
        PyObject *tmp_assattr_target_1;
        CHECK_OBJECT( var_date_time );
        tmp_subscribed_name_7 = var_date_time;
        tmp_subscript_name_7 = const_int_0;
        tmp_assattr_name_1 = LOOKUP_SUBSCRIPT_CONST( tmp_subscribed_name_7, tmp_subscript_name_7, 0 );
        if ( tmp_assattr_name_1 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 157;
            type_description_1 = "oooooooooo";
            goto frame_exception_exit_1;
        }
        CHECK_OBJECT( par_self );
        tmp_assattr_target_1 = par_self;
        tmp_result = SET_ATTRIBUTE( tmp_assattr_target_1, const_str_plain_LC_date_time, tmp_assattr_name_1 );
        Py_DECREF( tmp_assattr_name_1 );
        if ( tmp_result == false )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 157;
            type_description_1 = "oooooooooo";
            goto frame_exception_exit_1;
        }
    }
    {
        PyObject *tmp_assattr_name_2;
        PyObject *tmp_subscribed_name_8;
        PyObject *tmp_subscript_name_8;
        PyObject *tmp_assattr_target_2;
        CHECK_OBJECT( var_date_time );
        tmp_subscribed_name_8 = var_date_time;
        tmp_subscript_name_8 = const_int_pos_1;
        tmp_assattr_name_2 = LOOKUP_SUBSCRIPT_CONST( tmp_subscribed_name_8, tmp_subscript_name_8, 1 );
        if ( tmp_assattr_name_2 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 158;
            type_description_1 = "oooooooooo";
            goto frame_exception_exit_1;
        }
        CHECK_OBJECT( par_self );
        tmp_assattr_target_2 = par_self;
        tmp_result = SET_ATTRIBUTE( tmp_assattr_target_2, const_str_plain_LC_date, tmp_assattr_name_2 );
        Py_DECREF( tmp_assattr_name_2 );
        if ( tmp_result == false )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 158;
            type_description_1 = "oooooooooo";
            goto frame_exception_exit_1;
        }
    }
    {
        PyObject *tmp_assattr_name_3;
        PyObject *tmp_subscribed_name_9;
        PyObject *tmp_subscript_name_9;
        PyObject *tmp_assattr_target_3;
        CHECK_OBJECT( var_date_time );
        tmp_subscribed_name_9 = var_date_time;
        tmp_subscript_name_9 = const_int_pos_2;
        tmp_assattr_name_3 = LOOKUP_SUBSCRIPT_CONST( tmp_subscribed_name_9, tmp_subscript_name_9, 2 );
        if ( tmp_assattr_name_3 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 159;
            type_description_1 = "oooooooooo";
            goto frame_exception_exit_1;
        }
        CHECK_OBJECT( par_self );
        tmp_assattr_target_3 = par_self;
        tmp_result = SET_ATTRIBUTE( tmp_assattr_target_3, const_str_plain_LC_time, tmp_assattr_name_3 );
        Py_DECREF( tmp_assattr_name_3 );
        if ( tmp_result == false )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 159;
            type_description_1 = "oooooooooo";
            goto frame_exception_exit_1;
        }
    }

#if 0
    RESTORE_FRAME_EXCEPTION( frame_68a9d0a26d7b8b382e7cb285e1b41374 );
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto frame_no_exception_2;

    frame_exception_exit_1:;

#if 0
    RESTORE_FRAME_EXCEPTION( frame_68a9d0a26d7b8b382e7cb285e1b41374 );
#endif

    if ( exception_tb == NULL )
    {
        exception_tb = MAKE_TRACEBACK( frame_68a9d0a26d7b8b382e7cb285e1b41374, exception_lineno );
    }
    else if ( exception_tb->tb_frame != &frame_68a9d0a26d7b8b382e7cb285e1b41374->m_frame )
    {
        exception_tb = ADD_TRACEBACK( exception_tb, frame_68a9d0a26d7b8b382e7cb285e1b41374, exception_lineno );
    }

    // Attachs locals to frame if any.
    Nuitka_Frame_AttachLocals(
        (struct Nuitka_FrameObject *)frame_68a9d0a26d7b8b382e7cb285e1b41374,
        type_description_1,
        par_self,
        var_time_tuple,
        var_date_time,
        var_replacement_pairs,
        var_offset,
        var_directive,
        var_current_format,
        var_old,
        var_new,
        var_U_W
    );


    // Release cached frame.
    if ( frame_68a9d0a26d7b8b382e7cb285e1b41374 == cache_frame_68a9d0a26d7b8b382e7cb285e1b41374 )
    {
        Py_DECREF( frame_68a9d0a26d7b8b382e7cb285e1b41374 );
    }
    cache_frame_68a9d0a26d7b8b382e7cb285e1b41374 = NULL;

    assertFrameObject( frame_68a9d0a26d7b8b382e7cb285e1b41374 );

    // Put the previous frame back on top.
    popFrameStack();

    // Return the error.
    goto try_except_handler_1;

    frame_no_exception_2:;
    tmp_return_value = Py_None;
    Py_INCREF( tmp_return_value );
    goto try_return_handler_1;
    // tried codes exits in all cases
    NUITKA_CANNOT_GET_HERE( _strptime$$$function_7___calc_date_time );
    return NULL;
    // Return handler code:
    try_return_handler_1:;
    CHECK_OBJECT( (PyObject *)par_self );
    Py_DECREF( par_self );
    par_self = NULL;

    CHECK_OBJECT( (PyObject *)var_time_tuple );
    Py_DECREF( var_time_tuple );
    var_time_tuple = NULL;

    CHECK_OBJECT( (PyObject *)var_date_time );
    Py_DECREF( var_date_time );
    var_date_time = NULL;

    CHECK_OBJECT( (PyObject *)var_replacement_pairs );
    Py_DECREF( var_replacement_pairs );
    var_replacement_pairs = NULL;

    Py_XDECREF( var_offset );
    var_offset = NULL;

    Py_XDECREF( var_directive );
    var_directive = NULL;

    Py_XDECREF( var_current_format );
    var_current_format = NULL;

    Py_XDECREF( var_old );
    var_old = NULL;

    Py_XDECREF( var_new );
    var_new = NULL;

    Py_XDECREF( var_U_W );
    var_U_W = NULL;

    goto function_return_exit;
    // Exception handler code:
    try_except_handler_1:;
    exception_keeper_type_9 = exception_type;
    exception_keeper_value_9 = exception_value;
    exception_keeper_tb_9 = exception_tb;
    exception_keeper_lineno_9 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    CHECK_OBJECT( (PyObject *)par_self );
    Py_DECREF( par_self );
    par_self = NULL;

    Py_XDECREF( var_time_tuple );
    var_time_tuple = NULL;

    Py_XDECREF( var_date_time );
    var_date_time = NULL;

    Py_XDECREF( var_replacement_pairs );
    var_replacement_pairs = NULL;

    Py_XDECREF( var_offset );
    var_offset = NULL;

    Py_XDECREF( var_directive );
    var_directive = NULL;

    Py_XDECREF( var_current_format );
    var_current_format = NULL;

    Py_XDECREF( var_old );
    var_old = NULL;

    Py_XDECREF( var_new );
    var_new = NULL;

    Py_XDECREF( var_U_W );
    var_U_W = NULL;

    // Re-raise.
    exception_type = exception_keeper_type_9;
    exception_value = exception_keeper_value_9;
    exception_tb = exception_keeper_tb_9;
    exception_lineno = exception_keeper_lineno_9;

    goto function_exception_exit;
    // End of try:

    // Return statement must have exited already.
    NUITKA_CANNOT_GET_HERE( _strptime$$$function_7___calc_date_time );
    return NULL;

function_exception_exit:
    assert( exception_type );
    RESTORE_ERROR_OCCURRED( exception_type, exception_value, exception_tb );

    return NULL;

function_return_exit:
   // Function cleanup code if any.


   // Actual function exit with return value, making sure we did not make
   // the error status worse despite non-NULL return.
   CHECK_OBJECT( tmp_return_value );
   assert( had_error || !ERROR_OCCURRED() );
   return tmp_return_value;
}


static PyObject *impl__strptime$$$function_8___calc_timezone( struct Nuitka_FunctionObject const *self, PyObject **python_pars )
{
    // Preserve error status for checks
#ifndef __NUITKA_NO_ASSERT__
    NUITKA_MAY_BE_UNUSED bool had_error = ERROR_OCCURRED();
#endif

    // Local variable declarations.
    PyObject *par_self = python_pars[ 0 ];
    PyObject *var_no_saving = NULL;
    PyObject *var_has_saving = NULL;
    struct Nuitka_FrameObject *frame_ca9ca9f53a265adc62ad7d1f9f0a3299;
    NUITKA_MAY_BE_UNUSED char const *type_description_1 = NULL;
    PyObject *exception_type = NULL;
    PyObject *exception_value = NULL;
    PyTracebackObject *exception_tb = NULL;
    NUITKA_MAY_BE_UNUSED int exception_lineno = 0;
    PyObject *exception_keeper_type_1;
    PyObject *exception_keeper_value_1;
    PyTracebackObject *exception_keeper_tb_1;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_1;
    PyObject *exception_preserved_type_1;
    PyObject *exception_preserved_value_1;
    PyTracebackObject *exception_preserved_tb_1;
    int tmp_res;
    bool tmp_result;
    PyObject *exception_keeper_type_2;
    PyObject *exception_keeper_value_2;
    PyTracebackObject *exception_keeper_tb_2;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_2;
    static struct Nuitka_FrameObject *cache_frame_ca9ca9f53a265adc62ad7d1f9f0a3299 = NULL;
    PyObject *tmp_return_value = NULL;
    PyObject *exception_keeper_type_3;
    PyObject *exception_keeper_value_3;
    PyTracebackObject *exception_keeper_tb_3;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_3;

    // Actual function body.
    // Tried code:
    MAKE_OR_REUSE_FRAME( cache_frame_ca9ca9f53a265adc62ad7d1f9f0a3299, codeobj_ca9ca9f53a265adc62ad7d1f9f0a3299, module__strptime, sizeof(void *)+sizeof(void *)+sizeof(void *) );
    frame_ca9ca9f53a265adc62ad7d1f9f0a3299 = cache_frame_ca9ca9f53a265adc62ad7d1f9f0a3299;

    // Push the new frame as the currently active one.
    pushFrameStack( frame_ca9ca9f53a265adc62ad7d1f9f0a3299 );

    // Mark the frame object as in use, ref count 1 will be up for reuse.
    assert( Py_REFCNT( frame_ca9ca9f53a265adc62ad7d1f9f0a3299 ) == 2 ); // Frame stack

    // Framed code:
    // Tried code:
    {
        PyObject *tmp_called_instance_1;
        PyObject *tmp_mvar_value_1;
        PyObject *tmp_call_result_1;
        tmp_mvar_value_1 = GET_STRING_DICT_VALUE( moduledict__strptime, (Nuitka_StringObject *)const_str_plain_time );

        if (unlikely( tmp_mvar_value_1 == NULL ))
        {
            tmp_mvar_value_1 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_time );
        }

        if ( tmp_mvar_value_1 == NULL )
        {

            exception_type = PyExc_NameError;
            Py_INCREF( exception_type );
            exception_value = PyUnicode_FromFormat( "name '%s' is not defined", "time" );
            exception_tb = NULL;
            NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
            CHAIN_EXCEPTION( exception_value );

            exception_lineno = 166;
            type_description_1 = "ooo";
            goto try_except_handler_2;
        }

        tmp_called_instance_1 = tmp_mvar_value_1;
        frame_ca9ca9f53a265adc62ad7d1f9f0a3299->m_frame.f_lineno = 166;
        tmp_call_result_1 = CALL_METHOD_NO_ARGS( tmp_called_instance_1, const_str_plain_tzset );
        if ( tmp_call_result_1 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 166;
            type_description_1 = "ooo";
            goto try_except_handler_2;
        }
        Py_DECREF( tmp_call_result_1 );
    }
    goto try_end_1;
    // Exception handler code:
    try_except_handler_2:;
    exception_keeper_type_1 = exception_type;
    exception_keeper_value_1 = exception_value;
    exception_keeper_tb_1 = exception_tb;
    exception_keeper_lineno_1 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    // Preserve existing published exception.
    exception_preserved_type_1 = EXC_TYPE(PyThreadState_GET());
    Py_XINCREF( exception_preserved_type_1 );
    exception_preserved_value_1 = EXC_VALUE(PyThreadState_GET());
    Py_XINCREF( exception_preserved_value_1 );
    exception_preserved_tb_1 = (PyTracebackObject *)EXC_TRACEBACK(PyThreadState_GET());
    Py_XINCREF( exception_preserved_tb_1 );

    if ( exception_keeper_tb_1 == NULL )
    {
        exception_keeper_tb_1 = MAKE_TRACEBACK( frame_ca9ca9f53a265adc62ad7d1f9f0a3299, exception_keeper_lineno_1 );
    }
    else if ( exception_keeper_lineno_1 != 0 )
    {
        exception_keeper_tb_1 = ADD_TRACEBACK( exception_keeper_tb_1, frame_ca9ca9f53a265adc62ad7d1f9f0a3299, exception_keeper_lineno_1 );
    }

    NORMALIZE_EXCEPTION( &exception_keeper_type_1, &exception_keeper_value_1, &exception_keeper_tb_1 );
    PyException_SetTraceback( exception_keeper_value_1, (PyObject *)exception_keeper_tb_1 );
    PUBLISH_EXCEPTION( &exception_keeper_type_1, &exception_keeper_value_1, &exception_keeper_tb_1 );
    // Tried code:
    {
        nuitka_bool tmp_condition_result_1;
        PyObject *tmp_operand_name_1;
        PyObject *tmp_compexpr_left_1;
        PyObject *tmp_compexpr_right_1;
        tmp_compexpr_left_1 = EXC_TYPE(PyThreadState_GET());
        tmp_compexpr_right_1 = PyExc_AttributeError;
        tmp_res = EXCEPTION_MATCH_BOOL( tmp_compexpr_left_1, tmp_compexpr_right_1 );
        if ( tmp_res == -1 )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 167;
            type_description_1 = "ooo";
            goto try_except_handler_3;
        }
        tmp_operand_name_1 = ( tmp_res != 0 ) ? Py_True : Py_False;
        tmp_res = CHECK_IF_TRUE( tmp_operand_name_1 );
        if ( tmp_res == -1 )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 167;
            type_description_1 = "ooo";
            goto try_except_handler_3;
        }
        tmp_condition_result_1 = ( tmp_res == 0 ) ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
        if ( tmp_condition_result_1 == NUITKA_BOOL_TRUE )
        {
            goto branch_yes_1;
        }
        else
        {
            goto branch_no_1;
        }
        branch_yes_1:;
        tmp_result = RERAISE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
        if (unlikely( tmp_result == false ))
        {
            exception_lineno = 165;
        }

        if (exception_tb && exception_tb->tb_frame == &frame_ca9ca9f53a265adc62ad7d1f9f0a3299->m_frame) frame_ca9ca9f53a265adc62ad7d1f9f0a3299->m_frame.f_lineno = exception_tb->tb_lineno;
        type_description_1 = "ooo";
        goto try_except_handler_3;
        branch_no_1:;
    }
    goto try_end_2;
    // Exception handler code:
    try_except_handler_3:;
    exception_keeper_type_2 = exception_type;
    exception_keeper_value_2 = exception_value;
    exception_keeper_tb_2 = exception_tb;
    exception_keeper_lineno_2 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    // Restore previous exception.
    SET_CURRENT_EXCEPTION( exception_preserved_type_1, exception_preserved_value_1, exception_preserved_tb_1 );
    // Re-raise.
    exception_type = exception_keeper_type_2;
    exception_value = exception_keeper_value_2;
    exception_tb = exception_keeper_tb_2;
    exception_lineno = exception_keeper_lineno_2;

    goto frame_exception_exit_1;
    // End of try:
    try_end_2:;
    // Restore previous exception.
    SET_CURRENT_EXCEPTION( exception_preserved_type_1, exception_preserved_value_1, exception_preserved_tb_1 );
    goto try_end_1;
    // exception handler codes exits in all cases
    NUITKA_CANNOT_GET_HERE( _strptime$$$function_8___calc_timezone );
    return NULL;
    // End of try:
    try_end_1:;
    {
        PyObject *tmp_assattr_name_1;
        PyObject *tmp_source_name_1;
        PyObject *tmp_mvar_value_2;
        PyObject *tmp_assattr_target_1;
        tmp_mvar_value_2 = GET_STRING_DICT_VALUE( moduledict__strptime, (Nuitka_StringObject *)const_str_plain_time );

        if (unlikely( tmp_mvar_value_2 == NULL ))
        {
            tmp_mvar_value_2 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_time );
        }

        if ( tmp_mvar_value_2 == NULL )
        {

            exception_type = PyExc_NameError;
            Py_INCREF( exception_type );
            exception_value = PyUnicode_FromFormat( "name '%s' is not defined", "time" );
            exception_tb = NULL;
            NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
            CHAIN_EXCEPTION( exception_value );

            exception_lineno = 169;
            type_description_1 = "ooo";
            goto frame_exception_exit_1;
        }

        tmp_source_name_1 = tmp_mvar_value_2;
        tmp_assattr_name_1 = LOOKUP_ATTRIBUTE( tmp_source_name_1, const_str_plain_tzname );
        if ( tmp_assattr_name_1 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 169;
            type_description_1 = "ooo";
            goto frame_exception_exit_1;
        }
        CHECK_OBJECT( par_self );
        tmp_assattr_target_1 = par_self;
        tmp_result = SET_ATTRIBUTE( tmp_assattr_target_1, const_str_plain_tzname, tmp_assattr_name_1 );
        Py_DECREF( tmp_assattr_name_1 );
        if ( tmp_result == false )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 169;
            type_description_1 = "ooo";
            goto frame_exception_exit_1;
        }
    }
    {
        PyObject *tmp_assattr_name_2;
        PyObject *tmp_source_name_2;
        PyObject *tmp_mvar_value_3;
        PyObject *tmp_assattr_target_2;
        tmp_mvar_value_3 = GET_STRING_DICT_VALUE( moduledict__strptime, (Nuitka_StringObject *)const_str_plain_time );

        if (unlikely( tmp_mvar_value_3 == NULL ))
        {
            tmp_mvar_value_3 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_time );
        }

        if ( tmp_mvar_value_3 == NULL )
        {

            exception_type = PyExc_NameError;
            Py_INCREF( exception_type );
            exception_value = PyUnicode_FromFormat( "name '%s' is not defined", "time" );
            exception_tb = NULL;
            NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
            CHAIN_EXCEPTION( exception_value );

            exception_lineno = 170;
            type_description_1 = "ooo";
            goto frame_exception_exit_1;
        }

        tmp_source_name_2 = tmp_mvar_value_3;
        tmp_assattr_name_2 = LOOKUP_ATTRIBUTE( tmp_source_name_2, const_str_plain_daylight );
        if ( tmp_assattr_name_2 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 170;
            type_description_1 = "ooo";
            goto frame_exception_exit_1;
        }
        CHECK_OBJECT( par_self );
        tmp_assattr_target_2 = par_self;
        tmp_result = SET_ATTRIBUTE( tmp_assattr_target_2, const_str_plain_daylight, tmp_assattr_name_2 );
        Py_DECREF( tmp_assattr_name_2 );
        if ( tmp_result == false )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 170;
            type_description_1 = "ooo";
            goto frame_exception_exit_1;
        }
    }
    {
        PyObject *tmp_assign_source_1;
        PyObject *tmp_frozenset_arg_1;
        PyObject *tmp_set_element_1;
        PyObject *tmp_called_instance_2;
        PyObject *tmp_subscribed_name_1;
        PyObject *tmp_source_name_3;
        PyObject *tmp_subscript_name_1;
        tmp_set_element_1 = const_str_plain_utc;
        tmp_frozenset_arg_1 = PySet_New( NULL );
        assert( tmp_frozenset_arg_1 );
        tmp_res = PySet_Add( tmp_frozenset_arg_1, tmp_set_element_1 );
        assert( !(tmp_res != 0) );
        tmp_set_element_1 = const_str_plain_gmt;
        tmp_res = PySet_Add( tmp_frozenset_arg_1, tmp_set_element_1 );
        assert( !(tmp_res != 0) );
        CHECK_OBJECT( par_self );
        tmp_source_name_3 = par_self;
        tmp_subscribed_name_1 = LOOKUP_ATTRIBUTE( tmp_source_name_3, const_str_plain_tzname );
        if ( tmp_subscribed_name_1 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
            Py_DECREF( tmp_frozenset_arg_1 );

            exception_lineno = 171;
            type_description_1 = "ooo";
            goto frame_exception_exit_1;
        }
        tmp_subscript_name_1 = const_int_0;
        tmp_called_instance_2 = LOOKUP_SUBSCRIPT_CONST( tmp_subscribed_name_1, tmp_subscript_name_1, 0 );
        Py_DECREF( tmp_subscribed_name_1 );
        if ( tmp_called_instance_2 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
            Py_DECREF( tmp_frozenset_arg_1 );

            exception_lineno = 171;
            type_description_1 = "ooo";
            goto frame_exception_exit_1;
        }
        frame_ca9ca9f53a265adc62ad7d1f9f0a3299->m_frame.f_lineno = 171;
        tmp_set_element_1 = CALL_METHOD_NO_ARGS( tmp_called_instance_2, const_str_plain_lower );
        Py_DECREF( tmp_called_instance_2 );
        if ( tmp_set_element_1 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
            Py_DECREF( tmp_frozenset_arg_1 );

            exception_lineno = 171;
            type_description_1 = "ooo";
            goto frame_exception_exit_1;
        }
        tmp_res = PySet_Add( tmp_frozenset_arg_1, tmp_set_element_1 );
        if ( tmp_res != 0 )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
            Py_DECREF( tmp_frozenset_arg_1 );
            Py_DECREF( tmp_set_element_1 );

            exception_lineno = 171;
            type_description_1 = "ooo";
            goto frame_exception_exit_1;
        }
        Py_DECREF( tmp_set_element_1 );
        tmp_assign_source_1 = PyFrozenSet_New( tmp_frozenset_arg_1 );
        Py_DECREF( tmp_frozenset_arg_1 );
        if ( tmp_assign_source_1 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 171;
            type_description_1 = "ooo";
            goto frame_exception_exit_1;
        }
        assert( var_no_saving == NULL );
        var_no_saving = tmp_assign_source_1;
    }
    {
        nuitka_bool tmp_condition_result_2;
        PyObject *tmp_source_name_4;
        PyObject *tmp_attribute_value_1;
        int tmp_truth_name_1;
        CHECK_OBJECT( par_self );
        tmp_source_name_4 = par_self;
        tmp_attribute_value_1 = LOOKUP_ATTRIBUTE( tmp_source_name_4, const_str_plain_daylight );
        if ( tmp_attribute_value_1 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 172;
            type_description_1 = "ooo";
            goto frame_exception_exit_1;
        }
        tmp_truth_name_1 = CHECK_IF_TRUE( tmp_attribute_value_1 );
        if ( tmp_truth_name_1 == -1 )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
            Py_DECREF( tmp_attribute_value_1 );

            exception_lineno = 172;
            type_description_1 = "ooo";
            goto frame_exception_exit_1;
        }
        tmp_condition_result_2 = tmp_truth_name_1 == 1 ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
        Py_DECREF( tmp_attribute_value_1 );
        if ( tmp_condition_result_2 == NUITKA_BOOL_TRUE )
        {
            goto branch_yes_2;
        }
        else
        {
            goto branch_no_2;
        }
        branch_yes_2:;
        {
            PyObject *tmp_assign_source_2;
            PyObject *tmp_frozenset_arg_2;
            PyObject *tmp_set_element_2;
            PyObject *tmp_called_instance_3;
            PyObject *tmp_subscribed_name_2;
            PyObject *tmp_source_name_5;
            PyObject *tmp_subscript_name_2;
            CHECK_OBJECT( par_self );
            tmp_source_name_5 = par_self;
            tmp_subscribed_name_2 = LOOKUP_ATTRIBUTE( tmp_source_name_5, const_str_plain_tzname );
            if ( tmp_subscribed_name_2 == NULL )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 173;
                type_description_1 = "ooo";
                goto frame_exception_exit_1;
            }
            tmp_subscript_name_2 = const_int_pos_1;
            tmp_called_instance_3 = LOOKUP_SUBSCRIPT_CONST( tmp_subscribed_name_2, tmp_subscript_name_2, 1 );
            Py_DECREF( tmp_subscribed_name_2 );
            if ( tmp_called_instance_3 == NULL )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 173;
                type_description_1 = "ooo";
                goto frame_exception_exit_1;
            }
            frame_ca9ca9f53a265adc62ad7d1f9f0a3299->m_frame.f_lineno = 173;
            tmp_set_element_2 = CALL_METHOD_NO_ARGS( tmp_called_instance_3, const_str_plain_lower );
            Py_DECREF( tmp_called_instance_3 );
            if ( tmp_set_element_2 == NULL )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 173;
                type_description_1 = "ooo";
                goto frame_exception_exit_1;
            }
            tmp_frozenset_arg_2 = PySet_New( NULL );
            assert( tmp_frozenset_arg_2 );
            tmp_res = PySet_Add( tmp_frozenset_arg_2, tmp_set_element_2 );
            if ( tmp_res != 0 )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
                Py_DECREF( tmp_set_element_2 );
                Py_DECREF( tmp_frozenset_arg_2 );

                exception_lineno = 173;
                type_description_1 = "ooo";
                goto frame_exception_exit_1;
            }
            Py_DECREF( tmp_set_element_2 );
            tmp_assign_source_2 = PyFrozenSet_New( tmp_frozenset_arg_2 );
            Py_DECREF( tmp_frozenset_arg_2 );
            if ( tmp_assign_source_2 == NULL )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 173;
                type_description_1 = "ooo";
                goto frame_exception_exit_1;
            }
            assert( var_has_saving == NULL );
            var_has_saving = tmp_assign_source_2;
        }
        goto branch_end_2;
        branch_no_2:;
        {
            PyObject *tmp_assign_source_3;
            tmp_assign_source_3 = const_frozenset_empty;
            assert( var_has_saving == NULL );
            Py_INCREF( tmp_assign_source_3 );
            var_has_saving = tmp_assign_source_3;
        }
        branch_end_2:;
    }
    {
        PyObject *tmp_assattr_name_3;
        PyObject *tmp_tuple_element_1;
        PyObject *tmp_assattr_target_3;
        CHECK_OBJECT( var_no_saving );
        tmp_tuple_element_1 = var_no_saving;
        tmp_assattr_name_3 = PyTuple_New( 2 );
        Py_INCREF( tmp_tuple_element_1 );
        PyTuple_SET_ITEM( tmp_assattr_name_3, 0, tmp_tuple_element_1 );
        CHECK_OBJECT( var_has_saving );
        tmp_tuple_element_1 = var_has_saving;
        Py_INCREF( tmp_tuple_element_1 );
        PyTuple_SET_ITEM( tmp_assattr_name_3, 1, tmp_tuple_element_1 );
        CHECK_OBJECT( par_self );
        tmp_assattr_target_3 = par_self;
        tmp_result = SET_ATTRIBUTE( tmp_assattr_target_3, const_str_plain_timezone, tmp_assattr_name_3 );
        Py_DECREF( tmp_assattr_name_3 );
        if ( tmp_result == false )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 176;
            type_description_1 = "ooo";
            goto frame_exception_exit_1;
        }
    }

#if 0
    RESTORE_FRAME_EXCEPTION( frame_ca9ca9f53a265adc62ad7d1f9f0a3299 );
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto frame_no_exception_1;

    frame_exception_exit_1:;

#if 0
    RESTORE_FRAME_EXCEPTION( frame_ca9ca9f53a265adc62ad7d1f9f0a3299 );
#endif

    if ( exception_tb == NULL )
    {
        exception_tb = MAKE_TRACEBACK( frame_ca9ca9f53a265adc62ad7d1f9f0a3299, exception_lineno );
    }
    else if ( exception_tb->tb_frame != &frame_ca9ca9f53a265adc62ad7d1f9f0a3299->m_frame )
    {
        exception_tb = ADD_TRACEBACK( exception_tb, frame_ca9ca9f53a265adc62ad7d1f9f0a3299, exception_lineno );
    }

    // Attachs locals to frame if any.
    Nuitka_Frame_AttachLocals(
        (struct Nuitka_FrameObject *)frame_ca9ca9f53a265adc62ad7d1f9f0a3299,
        type_description_1,
        par_self,
        var_no_saving,
        var_has_saving
    );


    // Release cached frame.
    if ( frame_ca9ca9f53a265adc62ad7d1f9f0a3299 == cache_frame_ca9ca9f53a265adc62ad7d1f9f0a3299 )
    {
        Py_DECREF( frame_ca9ca9f53a265adc62ad7d1f9f0a3299 );
    }
    cache_frame_ca9ca9f53a265adc62ad7d1f9f0a3299 = NULL;

    assertFrameObject( frame_ca9ca9f53a265adc62ad7d1f9f0a3299 );

    // Put the previous frame back on top.
    popFrameStack();

    // Return the error.
    goto try_except_handler_1;

    frame_no_exception_1:;
    tmp_return_value = Py_None;
    Py_INCREF( tmp_return_value );
    goto try_return_handler_1;
    // tried codes exits in all cases
    NUITKA_CANNOT_GET_HERE( _strptime$$$function_8___calc_timezone );
    return NULL;
    // Return handler code:
    try_return_handler_1:;
    CHECK_OBJECT( (PyObject *)par_self );
    Py_DECREF( par_self );
    par_self = NULL;

    CHECK_OBJECT( (PyObject *)var_no_saving );
    Py_DECREF( var_no_saving );
    var_no_saving = NULL;

    CHECK_OBJECT( (PyObject *)var_has_saving );
    Py_DECREF( var_has_saving );
    var_has_saving = NULL;

    goto function_return_exit;
    // Exception handler code:
    try_except_handler_1:;
    exception_keeper_type_3 = exception_type;
    exception_keeper_value_3 = exception_value;
    exception_keeper_tb_3 = exception_tb;
    exception_keeper_lineno_3 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    CHECK_OBJECT( (PyObject *)par_self );
    Py_DECREF( par_self );
    par_self = NULL;

    Py_XDECREF( var_no_saving );
    var_no_saving = NULL;

    Py_XDECREF( var_has_saving );
    var_has_saving = NULL;

    // Re-raise.
    exception_type = exception_keeper_type_3;
    exception_value = exception_keeper_value_3;
    exception_tb = exception_keeper_tb_3;
    exception_lineno = exception_keeper_lineno_3;

    goto function_exception_exit;
    // End of try:

    // Return statement must have exited already.
    NUITKA_CANNOT_GET_HERE( _strptime$$$function_8___calc_timezone );
    return NULL;

function_exception_exit:
    assert( exception_type );
    RESTORE_ERROR_OCCURRED( exception_type, exception_value, exception_tb );

    return NULL;

function_return_exit:
   // Function cleanup code if any.


   // Actual function exit with return value, making sure we did not make
   // the error status worse despite non-NULL return.
   CHECK_OBJECT( tmp_return_value );
   assert( had_error || !ERROR_OCCURRED() );
   return tmp_return_value;
}


static PyObject *impl__strptime$$$function_9___init__( struct Nuitka_FunctionObject const *self, PyObject **python_pars )
{
    // Preserve error status for checks
#ifndef __NUITKA_NO_ASSERT__
    NUITKA_MAY_BE_UNUSED bool had_error = ERROR_OCCURRED();
#endif

    // Local variable declarations.
    PyObject *par_self = python_pars[ 0 ];
    PyObject *par_locale_time = python_pars[ 1 ];
    PyObject *var_base = NULL;
    PyObject *tmp_genexpr_1__$0 = NULL;
    struct Nuitka_FrameObject *frame_869fc41df2b388ecc0919cc53a3b31d5;
    NUITKA_MAY_BE_UNUSED char const *type_description_1 = NULL;
    PyObject *exception_type = NULL;
    PyObject *exception_value = NULL;
    PyTracebackObject *exception_tb = NULL;
    NUITKA_MAY_BE_UNUSED int exception_lineno = 0;
    bool tmp_result;
    int tmp_res;
    static struct Nuitka_FrameObject *cache_frame_869fc41df2b388ecc0919cc53a3b31d5 = NULL;
    PyObject *tmp_return_value = NULL;
    PyObject *exception_keeper_type_1;
    PyObject *exception_keeper_value_1;
    PyTracebackObject *exception_keeper_tb_1;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_1;

    // Actual function body.
    // Tried code:
    MAKE_OR_REUSE_FRAME( cache_frame_869fc41df2b388ecc0919cc53a3b31d5, codeobj_869fc41df2b388ecc0919cc53a3b31d5, module__strptime, sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *) );
    frame_869fc41df2b388ecc0919cc53a3b31d5 = cache_frame_869fc41df2b388ecc0919cc53a3b31d5;

    // Push the new frame as the currently active one.
    pushFrameStack( frame_869fc41df2b388ecc0919cc53a3b31d5 );

    // Mark the frame object as in use, ref count 1 will be up for reuse.
    assert( Py_REFCNT( frame_869fc41df2b388ecc0919cc53a3b31d5 ) == 2 ); // Frame stack

    // Framed code:
    {
        nuitka_bool tmp_condition_result_1;
        int tmp_truth_name_1;
        CHECK_OBJECT( par_locale_time );
        tmp_truth_name_1 = CHECK_IF_TRUE( par_locale_time );
        if ( tmp_truth_name_1 == -1 )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 188;
            type_description_1 = "oooc";
            goto frame_exception_exit_1;
        }
        tmp_condition_result_1 = tmp_truth_name_1 == 1 ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
        if ( tmp_condition_result_1 == NUITKA_BOOL_TRUE )
        {
            goto branch_yes_1;
        }
        else
        {
            goto branch_no_1;
        }
        branch_yes_1:;
        {
            PyObject *tmp_assattr_name_1;
            PyObject *tmp_assattr_target_1;
            CHECK_OBJECT( par_locale_time );
            tmp_assattr_name_1 = par_locale_time;
            CHECK_OBJECT( par_self );
            tmp_assattr_target_1 = par_self;
            tmp_result = SET_ATTRIBUTE( tmp_assattr_target_1, const_str_plain_locale_time, tmp_assattr_name_1 );
            if ( tmp_result == false )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 189;
                type_description_1 = "oooc";
                goto frame_exception_exit_1;
            }
        }
        goto branch_end_1;
        branch_no_1:;
        {
            PyObject *tmp_assattr_name_2;
            PyObject *tmp_called_name_1;
            PyObject *tmp_mvar_value_1;
            PyObject *tmp_assattr_target_2;
            tmp_mvar_value_1 = GET_STRING_DICT_VALUE( moduledict__strptime, (Nuitka_StringObject *)const_str_plain_LocaleTime );

            if (unlikely( tmp_mvar_value_1 == NULL ))
            {
                tmp_mvar_value_1 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_LocaleTime );
            }

            if ( tmp_mvar_value_1 == NULL )
            {

                exception_type = PyExc_NameError;
                Py_INCREF( exception_type );
                exception_value = PyUnicode_FromFormat( "name '%s' is not defined", "LocaleTime" );
                exception_tb = NULL;
                NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
                CHAIN_EXCEPTION( exception_value );

                exception_lineno = 191;
                type_description_1 = "oooc";
                goto frame_exception_exit_1;
            }

            tmp_called_name_1 = tmp_mvar_value_1;
            frame_869fc41df2b388ecc0919cc53a3b31d5->m_frame.f_lineno = 191;
            tmp_assattr_name_2 = CALL_FUNCTION_NO_ARGS( tmp_called_name_1 );
            if ( tmp_assattr_name_2 == NULL )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 191;
                type_description_1 = "oooc";
                goto frame_exception_exit_1;
            }
            CHECK_OBJECT( par_self );
            tmp_assattr_target_2 = par_self;
            tmp_result = SET_ATTRIBUTE( tmp_assattr_target_2, const_str_plain_locale_time, tmp_assattr_name_2 );
            Py_DECREF( tmp_assattr_name_2 );
            if ( tmp_result == false )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 191;
                type_description_1 = "oooc";
                goto frame_exception_exit_1;
            }
        }
        branch_end_1:;
    }
    {
        PyObject *tmp_assign_source_1;
        PyObject *tmp_type_name_1;
        PyObject *tmp_object_name_1;
        if ( PyCell_GET( self->m_closure[0] ) == NULL )
        {

            exception_type = PyExc_NameError;
            Py_INCREF( exception_type );
            exception_value = PyUnicode_FromFormat( "free variable '%s' referenced before assignment in enclosing scope", "__class__" );
            exception_tb = NULL;
            NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
            CHAIN_EXCEPTION( exception_value );

            exception_lineno = 192;
            type_description_1 = "oooc";
            goto frame_exception_exit_1;
        }

        tmp_type_name_1 = PyCell_GET( self->m_closure[0] );
        CHECK_OBJECT( par_self );
        tmp_object_name_1 = par_self;
        tmp_assign_source_1 = BUILTIN_SUPER( tmp_type_name_1, tmp_object_name_1 );
        if ( tmp_assign_source_1 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 192;
            type_description_1 = "oooc";
            goto frame_exception_exit_1;
        }
        assert( var_base == NULL );
        var_base = tmp_assign_source_1;
    }
    {
        PyObject *tmp_called_name_2;
        PyObject *tmp_source_name_1;
        PyObject *tmp_call_result_1;
        PyObject *tmp_args_element_name_1;
        PyObject *tmp_dict_key_1;
        PyObject *tmp_dict_value_1;
        PyObject *tmp_dict_key_2;
        PyObject *tmp_dict_value_2;
        PyObject *tmp_dict_key_3;
        PyObject *tmp_dict_value_3;
        PyObject *tmp_dict_key_4;
        PyObject *tmp_dict_value_4;
        PyObject *tmp_dict_key_5;
        PyObject *tmp_dict_value_5;
        PyObject *tmp_dict_key_6;
        PyObject *tmp_dict_value_6;
        PyObject *tmp_dict_key_7;
        PyObject *tmp_dict_value_7;
        PyObject *tmp_dict_key_8;
        PyObject *tmp_dict_value_8;
        PyObject *tmp_dict_key_9;
        PyObject *tmp_dict_value_9;
        PyObject *tmp_dict_key_10;
        PyObject *tmp_dict_value_10;
        PyObject *tmp_dict_key_11;
        PyObject *tmp_dict_value_11;
        PyObject *tmp_dict_key_12;
        PyObject *tmp_dict_value_12;
        PyObject *tmp_dict_key_13;
        PyObject *tmp_dict_value_13;
        PyObject *tmp_dict_key_14;
        PyObject *tmp_dict_value_14;
        PyObject *tmp_dict_key_15;
        PyObject *tmp_dict_value_15;
        PyObject *tmp_dict_key_16;
        PyObject *tmp_dict_value_16;
        PyObject *tmp_dict_key_17;
        PyObject *tmp_dict_value_17;
        PyObject *tmp_called_name_3;
        PyObject *tmp_source_name_2;
        PyObject *tmp_args_element_name_2;
        PyObject *tmp_source_name_3;
        PyObject *tmp_source_name_4;
        PyObject *tmp_args_element_name_3;
        PyObject *tmp_dict_key_18;
        PyObject *tmp_dict_value_18;
        PyObject *tmp_called_name_4;
        PyObject *tmp_source_name_5;
        PyObject *tmp_args_element_name_4;
        PyObject *tmp_source_name_6;
        PyObject *tmp_source_name_7;
        PyObject *tmp_args_element_name_5;
        PyObject *tmp_dict_key_19;
        PyObject *tmp_dict_value_19;
        PyObject *tmp_called_name_5;
        PyObject *tmp_source_name_8;
        PyObject *tmp_args_element_name_6;
        PyObject *tmp_subscribed_name_1;
        PyObject *tmp_source_name_9;
        PyObject *tmp_source_name_10;
        PyObject *tmp_subscript_name_1;
        PyObject *tmp_args_element_name_7;
        PyObject *tmp_dict_key_20;
        PyObject *tmp_dict_value_20;
        PyObject *tmp_called_name_6;
        PyObject *tmp_source_name_11;
        PyObject *tmp_args_element_name_8;
        PyObject *tmp_subscribed_name_2;
        PyObject *tmp_source_name_12;
        PyObject *tmp_source_name_13;
        PyObject *tmp_subscript_name_2;
        PyObject *tmp_args_element_name_9;
        PyObject *tmp_dict_key_21;
        PyObject *tmp_dict_value_21;
        PyObject *tmp_called_name_7;
        PyObject *tmp_source_name_14;
        PyObject *tmp_args_element_name_10;
        PyObject *tmp_source_name_15;
        PyObject *tmp_source_name_16;
        PyObject *tmp_args_element_name_11;
        PyObject *tmp_dict_key_22;
        PyObject *tmp_dict_value_22;
        PyObject *tmp_called_name_8;
        PyObject *tmp_source_name_17;
        PyObject *tmp_args_element_name_12;
        PyObject *tmp_args_element_name_13;
        PyObject *tmp_dict_key_23;
        PyObject *tmp_dict_value_23;
        CHECK_OBJECT( var_base );
        tmp_source_name_1 = var_base;
        tmp_called_name_2 = LOOKUP_ATTRIBUTE( tmp_source_name_1, const_str_plain___init__ );
        if ( tmp_called_name_2 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 193;
            type_description_1 = "oooc";
            goto frame_exception_exit_1;
        }
        tmp_dict_key_1 = const_str_plain_d;
        tmp_dict_value_1 = const_str_digest_528e58d8d5b8b0d5b8ae690ca05bbffe;
        tmp_args_element_name_1 = _PyDict_NewPresized( 23 );
        tmp_res = PyDict_SetItem( tmp_args_element_name_1, tmp_dict_key_1, tmp_dict_value_1 );
        assert( !(tmp_res != 0) );
        tmp_dict_key_2 = const_str_plain_f;
        tmp_dict_value_2 = const_str_digest_194f06b016fac4d554c2a56693646f66;
        tmp_res = PyDict_SetItem( tmp_args_element_name_1, tmp_dict_key_2, tmp_dict_value_2 );
        assert( !(tmp_res != 0) );
        tmp_dict_key_3 = const_str_plain_H;
        tmp_dict_value_3 = const_str_digest_fd61be9f3f494f3b88354414923d5b6f;
        tmp_res = PyDict_SetItem( tmp_args_element_name_1, tmp_dict_key_3, tmp_dict_value_3 );
        assert( !(tmp_res != 0) );
        tmp_dict_key_4 = const_str_plain_I;
        tmp_dict_value_4 = const_str_digest_e090d6e90dec24a868d5c6640787c5a5;
        tmp_res = PyDict_SetItem( tmp_args_element_name_1, tmp_dict_key_4, tmp_dict_value_4 );
        assert( !(tmp_res != 0) );
        tmp_dict_key_5 = const_str_plain_G;
        tmp_dict_value_5 = const_str_digest_f72e7f82ee73c3367364c7c251ec1769;
        tmp_res = PyDict_SetItem( tmp_args_element_name_1, tmp_dict_key_5, tmp_dict_value_5 );
        assert( !(tmp_res != 0) );
        tmp_dict_key_6 = const_str_plain_j;
        tmp_dict_value_6 = const_str_digest_3252b6ffe82fefaf9fd2236e330b05d8;
        tmp_res = PyDict_SetItem( tmp_args_element_name_1, tmp_dict_key_6, tmp_dict_value_6 );
        assert( !(tmp_res != 0) );
        tmp_dict_key_7 = const_str_plain_m;
        tmp_dict_value_7 = const_str_digest_5934c43a6b9494586fb06ee43de4d255;
        tmp_res = PyDict_SetItem( tmp_args_element_name_1, tmp_dict_key_7, tmp_dict_value_7 );
        assert( !(tmp_res != 0) );
        tmp_dict_key_8 = const_str_plain_M;
        tmp_dict_value_8 = const_str_digest_72f14e2d9988b4ce1192074f13ad0ba5;
        tmp_res = PyDict_SetItem( tmp_args_element_name_1, tmp_dict_key_8, tmp_dict_value_8 );
        assert( !(tmp_res != 0) );
        tmp_dict_key_9 = const_str_plain_S;
        tmp_dict_value_9 = const_str_digest_cba93ff8a430730b02281234da3a234f;
        tmp_res = PyDict_SetItem( tmp_args_element_name_1, tmp_dict_key_9, tmp_dict_value_9 );
        assert( !(tmp_res != 0) );
        tmp_dict_key_10 = const_str_plain_U;
        tmp_dict_value_10 = const_str_digest_42020f17c41fc459d60e7300e3b00c9f;
        tmp_res = PyDict_SetItem( tmp_args_element_name_1, tmp_dict_key_10, tmp_dict_value_10 );
        assert( !(tmp_res != 0) );
        tmp_dict_key_11 = const_str_plain_w;
        tmp_dict_value_11 = const_str_digest_5a48c03edd1e289937c9fa6132bb349f;
        tmp_res = PyDict_SetItem( tmp_args_element_name_1, tmp_dict_key_11, tmp_dict_value_11 );
        assert( !(tmp_res != 0) );
        tmp_dict_key_12 = const_str_plain_u;
        tmp_dict_value_12 = const_str_digest_30dc8503ac0d0105df0c5bb7524c2a7c;
        tmp_res = PyDict_SetItem( tmp_args_element_name_1, tmp_dict_key_12, tmp_dict_value_12 );
        assert( !(tmp_res != 0) );
        tmp_dict_key_13 = const_str_plain_V;
        tmp_dict_value_13 = const_str_digest_e3e45623a66850eabddcebbe5fab8ae7;
        tmp_res = PyDict_SetItem( tmp_args_element_name_1, tmp_dict_key_13, tmp_dict_value_13 );
        assert( !(tmp_res != 0) );
        tmp_dict_key_14 = const_str_plain_y;
        tmp_dict_value_14 = const_str_digest_d050adeed118b2b6fa9aeda7a879ccd3;
        tmp_res = PyDict_SetItem( tmp_args_element_name_1, tmp_dict_key_14, tmp_dict_value_14 );
        assert( !(tmp_res != 0) );
        tmp_dict_key_15 = const_str_plain_Y;
        tmp_dict_value_15 = const_str_digest_fe21203dbd9b4a7be79eaa5cc9577858;
        tmp_res = PyDict_SetItem( tmp_args_element_name_1, tmp_dict_key_15, tmp_dict_value_15 );
        assert( !(tmp_res != 0) );
        tmp_dict_key_16 = const_str_plain_z;
        tmp_dict_value_16 = const_str_digest_f9fc6b92b906bcf1a679fa592b3173da;
        tmp_res = PyDict_SetItem( tmp_args_element_name_1, tmp_dict_key_16, tmp_dict_value_16 );
        assert( !(tmp_res != 0) );
        tmp_dict_key_17 = const_str_plain_A;
        CHECK_OBJECT( par_self );
        tmp_source_name_2 = par_self;
        tmp_called_name_3 = LOOKUP_ATTRIBUTE( tmp_source_name_2, const_str_plain__TimeRE__seqToRE );
        if ( tmp_called_name_3 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
            Py_DECREF( tmp_called_name_2 );
            Py_DECREF( tmp_args_element_name_1 );

            exception_lineno = 214;
            type_description_1 = "oooc";
            goto frame_exception_exit_1;
        }
        CHECK_OBJECT( par_self );
        tmp_source_name_4 = par_self;
        tmp_source_name_3 = LOOKUP_ATTRIBUTE( tmp_source_name_4, const_str_plain_locale_time );
        if ( tmp_source_name_3 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
            Py_DECREF( tmp_called_name_2 );
            Py_DECREF( tmp_args_element_name_1 );
            Py_DECREF( tmp_called_name_3 );

            exception_lineno = 214;
            type_description_1 = "oooc";
            goto frame_exception_exit_1;
        }
        tmp_args_element_name_2 = LOOKUP_ATTRIBUTE( tmp_source_name_3, const_str_plain_f_weekday );
        Py_DECREF( tmp_source_name_3 );
        if ( tmp_args_element_name_2 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
            Py_DECREF( tmp_called_name_2 );
            Py_DECREF( tmp_args_element_name_1 );
            Py_DECREF( tmp_called_name_3 );

            exception_lineno = 214;
            type_description_1 = "oooc";
            goto frame_exception_exit_1;
        }
        tmp_args_element_name_3 = const_str_plain_A;
        frame_869fc41df2b388ecc0919cc53a3b31d5->m_frame.f_lineno = 214;
        {
            PyObject *call_args[] = { tmp_args_element_name_2, tmp_args_element_name_3 };
            tmp_dict_value_17 = CALL_FUNCTION_WITH_ARGS2( tmp_called_name_3, call_args );
        }

        Py_DECREF( tmp_called_name_3 );
        Py_DECREF( tmp_args_element_name_2 );
        if ( tmp_dict_value_17 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
            Py_DECREF( tmp_called_name_2 );
            Py_DECREF( tmp_args_element_name_1 );

            exception_lineno = 214;
            type_description_1 = "oooc";
            goto frame_exception_exit_1;
        }
        tmp_res = PyDict_SetItem( tmp_args_element_name_1, tmp_dict_key_17, tmp_dict_value_17 );
        Py_DECREF( tmp_dict_value_17 );
        assert( !(tmp_res != 0) );
        tmp_dict_key_18 = const_str_plain_a;
        CHECK_OBJECT( par_self );
        tmp_source_name_5 = par_self;
        tmp_called_name_4 = LOOKUP_ATTRIBUTE( tmp_source_name_5, const_str_plain__TimeRE__seqToRE );
        if ( tmp_called_name_4 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
            Py_DECREF( tmp_called_name_2 );
            Py_DECREF( tmp_args_element_name_1 );

            exception_lineno = 215;
            type_description_1 = "oooc";
            goto frame_exception_exit_1;
        }
        CHECK_OBJECT( par_self );
        tmp_source_name_7 = par_self;
        tmp_source_name_6 = LOOKUP_ATTRIBUTE( tmp_source_name_7, const_str_plain_locale_time );
        if ( tmp_source_name_6 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
            Py_DECREF( tmp_called_name_2 );
            Py_DECREF( tmp_args_element_name_1 );
            Py_DECREF( tmp_called_name_4 );

            exception_lineno = 215;
            type_description_1 = "oooc";
            goto frame_exception_exit_1;
        }
        tmp_args_element_name_4 = LOOKUP_ATTRIBUTE( tmp_source_name_6, const_str_plain_a_weekday );
        Py_DECREF( tmp_source_name_6 );
        if ( tmp_args_element_name_4 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
            Py_DECREF( tmp_called_name_2 );
            Py_DECREF( tmp_args_element_name_1 );
            Py_DECREF( tmp_called_name_4 );

            exception_lineno = 215;
            type_description_1 = "oooc";
            goto frame_exception_exit_1;
        }
        tmp_args_element_name_5 = const_str_plain_a;
        frame_869fc41df2b388ecc0919cc53a3b31d5->m_frame.f_lineno = 215;
        {
            PyObject *call_args[] = { tmp_args_element_name_4, tmp_args_element_name_5 };
            tmp_dict_value_18 = CALL_FUNCTION_WITH_ARGS2( tmp_called_name_4, call_args );
        }

        Py_DECREF( tmp_called_name_4 );
        Py_DECREF( tmp_args_element_name_4 );
        if ( tmp_dict_value_18 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
            Py_DECREF( tmp_called_name_2 );
            Py_DECREF( tmp_args_element_name_1 );

            exception_lineno = 215;
            type_description_1 = "oooc";
            goto frame_exception_exit_1;
        }
        tmp_res = PyDict_SetItem( tmp_args_element_name_1, tmp_dict_key_18, tmp_dict_value_18 );
        Py_DECREF( tmp_dict_value_18 );
        assert( !(tmp_res != 0) );
        tmp_dict_key_19 = const_str_plain_B;
        CHECK_OBJECT( par_self );
        tmp_source_name_8 = par_self;
        tmp_called_name_5 = LOOKUP_ATTRIBUTE( tmp_source_name_8, const_str_plain__TimeRE__seqToRE );
        if ( tmp_called_name_5 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
            Py_DECREF( tmp_called_name_2 );
            Py_DECREF( tmp_args_element_name_1 );

            exception_lineno = 216;
            type_description_1 = "oooc";
            goto frame_exception_exit_1;
        }
        CHECK_OBJECT( par_self );
        tmp_source_name_10 = par_self;
        tmp_source_name_9 = LOOKUP_ATTRIBUTE( tmp_source_name_10, const_str_plain_locale_time );
        if ( tmp_source_name_9 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
            Py_DECREF( tmp_called_name_2 );
            Py_DECREF( tmp_args_element_name_1 );
            Py_DECREF( tmp_called_name_5 );

            exception_lineno = 216;
            type_description_1 = "oooc";
            goto frame_exception_exit_1;
        }
        tmp_subscribed_name_1 = LOOKUP_ATTRIBUTE( tmp_source_name_9, const_str_plain_f_month );
        Py_DECREF( tmp_source_name_9 );
        if ( tmp_subscribed_name_1 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
            Py_DECREF( tmp_called_name_2 );
            Py_DECREF( tmp_args_element_name_1 );
            Py_DECREF( tmp_called_name_5 );

            exception_lineno = 216;
            type_description_1 = "oooc";
            goto frame_exception_exit_1;
        }
        tmp_subscript_name_1 = const_slice_int_pos_1_none_none;
        tmp_args_element_name_6 = LOOKUP_SUBSCRIPT( tmp_subscribed_name_1, tmp_subscript_name_1 );
        Py_DECREF( tmp_subscribed_name_1 );
        if ( tmp_args_element_name_6 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
            Py_DECREF( tmp_called_name_2 );
            Py_DECREF( tmp_args_element_name_1 );
            Py_DECREF( tmp_called_name_5 );

            exception_lineno = 216;
            type_description_1 = "oooc";
            goto frame_exception_exit_1;
        }
        tmp_args_element_name_7 = const_str_plain_B;
        frame_869fc41df2b388ecc0919cc53a3b31d5->m_frame.f_lineno = 216;
        {
            PyObject *call_args[] = { tmp_args_element_name_6, tmp_args_element_name_7 };
            tmp_dict_value_19 = CALL_FUNCTION_WITH_ARGS2( tmp_called_name_5, call_args );
        }

        Py_DECREF( tmp_called_name_5 );
        Py_DECREF( tmp_args_element_name_6 );
        if ( tmp_dict_value_19 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
            Py_DECREF( tmp_called_name_2 );
            Py_DECREF( tmp_args_element_name_1 );

            exception_lineno = 216;
            type_description_1 = "oooc";
            goto frame_exception_exit_1;
        }
        tmp_res = PyDict_SetItem( tmp_args_element_name_1, tmp_dict_key_19, tmp_dict_value_19 );
        Py_DECREF( tmp_dict_value_19 );
        assert( !(tmp_res != 0) );
        tmp_dict_key_20 = const_str_plain_b;
        CHECK_OBJECT( par_self );
        tmp_source_name_11 = par_self;
        tmp_called_name_6 = LOOKUP_ATTRIBUTE( tmp_source_name_11, const_str_plain__TimeRE__seqToRE );
        if ( tmp_called_name_6 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
            Py_DECREF( tmp_called_name_2 );
            Py_DECREF( tmp_args_element_name_1 );

            exception_lineno = 217;
            type_description_1 = "oooc";
            goto frame_exception_exit_1;
        }
        CHECK_OBJECT( par_self );
        tmp_source_name_13 = par_self;
        tmp_source_name_12 = LOOKUP_ATTRIBUTE( tmp_source_name_13, const_str_plain_locale_time );
        if ( tmp_source_name_12 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
            Py_DECREF( tmp_called_name_2 );
            Py_DECREF( tmp_args_element_name_1 );
            Py_DECREF( tmp_called_name_6 );

            exception_lineno = 217;
            type_description_1 = "oooc";
            goto frame_exception_exit_1;
        }
        tmp_subscribed_name_2 = LOOKUP_ATTRIBUTE( tmp_source_name_12, const_str_plain_a_month );
        Py_DECREF( tmp_source_name_12 );
        if ( tmp_subscribed_name_2 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
            Py_DECREF( tmp_called_name_2 );
            Py_DECREF( tmp_args_element_name_1 );
            Py_DECREF( tmp_called_name_6 );

            exception_lineno = 217;
            type_description_1 = "oooc";
            goto frame_exception_exit_1;
        }
        tmp_subscript_name_2 = const_slice_int_pos_1_none_none;
        tmp_args_element_name_8 = LOOKUP_SUBSCRIPT( tmp_subscribed_name_2, tmp_subscript_name_2 );
        Py_DECREF( tmp_subscribed_name_2 );
        if ( tmp_args_element_name_8 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
            Py_DECREF( tmp_called_name_2 );
            Py_DECREF( tmp_args_element_name_1 );
            Py_DECREF( tmp_called_name_6 );

            exception_lineno = 217;
            type_description_1 = "oooc";
            goto frame_exception_exit_1;
        }
        tmp_args_element_name_9 = const_str_plain_b;
        frame_869fc41df2b388ecc0919cc53a3b31d5->m_frame.f_lineno = 217;
        {
            PyObject *call_args[] = { tmp_args_element_name_8, tmp_args_element_name_9 };
            tmp_dict_value_20 = CALL_FUNCTION_WITH_ARGS2( tmp_called_name_6, call_args );
        }

        Py_DECREF( tmp_called_name_6 );
        Py_DECREF( tmp_args_element_name_8 );
        if ( tmp_dict_value_20 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
            Py_DECREF( tmp_called_name_2 );
            Py_DECREF( tmp_args_element_name_1 );

            exception_lineno = 217;
            type_description_1 = "oooc";
            goto frame_exception_exit_1;
        }
        tmp_res = PyDict_SetItem( tmp_args_element_name_1, tmp_dict_key_20, tmp_dict_value_20 );
        Py_DECREF( tmp_dict_value_20 );
        assert( !(tmp_res != 0) );
        tmp_dict_key_21 = const_str_plain_p;
        CHECK_OBJECT( par_self );
        tmp_source_name_14 = par_self;
        tmp_called_name_7 = LOOKUP_ATTRIBUTE( tmp_source_name_14, const_str_plain__TimeRE__seqToRE );
        if ( tmp_called_name_7 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
            Py_DECREF( tmp_called_name_2 );
            Py_DECREF( tmp_args_element_name_1 );

            exception_lineno = 218;
            type_description_1 = "oooc";
            goto frame_exception_exit_1;
        }
        CHECK_OBJECT( par_self );
        tmp_source_name_16 = par_self;
        tmp_source_name_15 = LOOKUP_ATTRIBUTE( tmp_source_name_16, const_str_plain_locale_time );
        if ( tmp_source_name_15 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
            Py_DECREF( tmp_called_name_2 );
            Py_DECREF( tmp_args_element_name_1 );
            Py_DECREF( tmp_called_name_7 );

            exception_lineno = 218;
            type_description_1 = "oooc";
            goto frame_exception_exit_1;
        }
        tmp_args_element_name_10 = LOOKUP_ATTRIBUTE( tmp_source_name_15, const_str_plain_am_pm );
        Py_DECREF( tmp_source_name_15 );
        if ( tmp_args_element_name_10 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
            Py_DECREF( tmp_called_name_2 );
            Py_DECREF( tmp_args_element_name_1 );
            Py_DECREF( tmp_called_name_7 );

            exception_lineno = 218;
            type_description_1 = "oooc";
            goto frame_exception_exit_1;
        }
        tmp_args_element_name_11 = const_str_plain_p;
        frame_869fc41df2b388ecc0919cc53a3b31d5->m_frame.f_lineno = 218;
        {
            PyObject *call_args[] = { tmp_args_element_name_10, tmp_args_element_name_11 };
            tmp_dict_value_21 = CALL_FUNCTION_WITH_ARGS2( tmp_called_name_7, call_args );
        }

        Py_DECREF( tmp_called_name_7 );
        Py_DECREF( tmp_args_element_name_10 );
        if ( tmp_dict_value_21 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
            Py_DECREF( tmp_called_name_2 );
            Py_DECREF( tmp_args_element_name_1 );

            exception_lineno = 218;
            type_description_1 = "oooc";
            goto frame_exception_exit_1;
        }
        tmp_res = PyDict_SetItem( tmp_args_element_name_1, tmp_dict_key_21, tmp_dict_value_21 );
        Py_DECREF( tmp_dict_value_21 );
        assert( !(tmp_res != 0) );
        tmp_dict_key_22 = const_str_plain_Z;
        CHECK_OBJECT( par_self );
        tmp_source_name_17 = par_self;
        tmp_called_name_8 = LOOKUP_ATTRIBUTE( tmp_source_name_17, const_str_plain__TimeRE__seqToRE );
        if ( tmp_called_name_8 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
            Py_DECREF( tmp_called_name_2 );
            Py_DECREF( tmp_args_element_name_1 );

            exception_lineno = 219;
            type_description_1 = "oooc";
            goto frame_exception_exit_1;
        }
        {
            PyObject *tmp_assign_source_2;
            PyObject *tmp_iter_arg_1;
            PyObject *tmp_source_name_18;
            PyObject *tmp_source_name_19;
            CHECK_OBJECT( par_self );
            tmp_source_name_19 = par_self;
            tmp_source_name_18 = LOOKUP_ATTRIBUTE( tmp_source_name_19, const_str_plain_locale_time );
            if ( tmp_source_name_18 == NULL )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 219;
                type_description_1 = "oooc";
                goto frame_exception_exit_1;
            }
            tmp_iter_arg_1 = LOOKUP_ATTRIBUTE( tmp_source_name_18, const_str_plain_timezone );
            Py_DECREF( tmp_source_name_18 );
            if ( tmp_iter_arg_1 == NULL )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 219;
                type_description_1 = "oooc";
                goto frame_exception_exit_1;
            }
            tmp_assign_source_2 = MAKE_ITERATOR( tmp_iter_arg_1 );
            Py_DECREF( tmp_iter_arg_1 );
            if ( tmp_assign_source_2 == NULL )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 219;
                type_description_1 = "oooc";
                goto frame_exception_exit_1;
            }
            assert( tmp_genexpr_1__$0 == NULL );
            tmp_genexpr_1__$0 = tmp_assign_source_2;
        }
        // Tried code:
        tmp_args_element_name_12 = _strptime$$$function_9___init__$$$genexpr_1_genexpr_maker();

        ((struct Nuitka_GeneratorObject *)tmp_args_element_name_12)->m_closure[0] = PyCell_NEW0( tmp_genexpr_1__$0 );


        goto try_return_handler_2;
        // tried codes exits in all cases
        NUITKA_CANNOT_GET_HERE( _strptime$$$function_9___init__ );
        return NULL;
        // Return handler code:
        try_return_handler_2:;
        CHECK_OBJECT( (PyObject *)tmp_genexpr_1__$0 );
        Py_DECREF( tmp_genexpr_1__$0 );
        tmp_genexpr_1__$0 = NULL;

        goto outline_result_1;
        // End of try:
        CHECK_OBJECT( (PyObject *)tmp_genexpr_1__$0 );
        Py_DECREF( tmp_genexpr_1__$0 );
        tmp_genexpr_1__$0 = NULL;

        // Return statement must have exited already.
        NUITKA_CANNOT_GET_HERE( _strptime$$$function_9___init__ );
        return NULL;
        outline_result_1:;
        tmp_args_element_name_13 = const_str_plain_Z;
        frame_869fc41df2b388ecc0919cc53a3b31d5->m_frame.f_lineno = 219;
        {
            PyObject *call_args[] = { tmp_args_element_name_12, tmp_args_element_name_13 };
            tmp_dict_value_22 = CALL_FUNCTION_WITH_ARGS2( tmp_called_name_8, call_args );
        }

        Py_DECREF( tmp_called_name_8 );
        Py_DECREF( tmp_args_element_name_12 );
        if ( tmp_dict_value_22 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
            Py_DECREF( tmp_called_name_2 );
            Py_DECREF( tmp_args_element_name_1 );

            exception_lineno = 219;
            type_description_1 = "oooc";
            goto frame_exception_exit_1;
        }
        tmp_res = PyDict_SetItem( tmp_args_element_name_1, tmp_dict_key_22, tmp_dict_value_22 );
        Py_DECREF( tmp_dict_value_22 );
        assert( !(tmp_res != 0) );
        tmp_dict_key_23 = const_str_chr_37;
        tmp_dict_value_23 = const_str_chr_37;
        tmp_res = PyDict_SetItem( tmp_args_element_name_1, tmp_dict_key_23, tmp_dict_value_23 );
        assert( !(tmp_res != 0) );
        frame_869fc41df2b388ecc0919cc53a3b31d5->m_frame.f_lineno = 193;
        {
            PyObject *call_args[] = { tmp_args_element_name_1 };
            tmp_call_result_1 = CALL_FUNCTION_WITH_ARGS1( tmp_called_name_2, call_args );
        }

        Py_DECREF( tmp_called_name_2 );
        Py_DECREF( tmp_args_element_name_1 );
        if ( tmp_call_result_1 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 193;
            type_description_1 = "oooc";
            goto frame_exception_exit_1;
        }
        Py_DECREF( tmp_call_result_1 );
    }
    {
        PyObject *tmp_called_name_9;
        PyObject *tmp_source_name_20;
        PyObject *tmp_call_result_2;
        PyObject *tmp_args_element_name_14;
        PyObject *tmp_args_element_name_15;
        PyObject *tmp_called_instance_1;
        PyObject *tmp_called_instance_2;
        CHECK_OBJECT( var_base );
        tmp_source_name_20 = var_base;
        tmp_called_name_9 = LOOKUP_ATTRIBUTE( tmp_source_name_20, const_str_plain___setitem__ );
        if ( tmp_called_name_9 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 223;
            type_description_1 = "oooc";
            goto frame_exception_exit_1;
        }
        tmp_args_element_name_14 = const_str_plain_W;
        CHECK_OBJECT( var_base );
        tmp_called_instance_2 = var_base;
        frame_869fc41df2b388ecc0919cc53a3b31d5->m_frame.f_lineno = 223;
        tmp_called_instance_1 = CALL_METHOD_WITH_ARGS1( tmp_called_instance_2, const_str_plain___getitem__, &PyTuple_GET_ITEM( const_tuple_str_plain_U_tuple, 0 ) );

        if ( tmp_called_instance_1 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
            Py_DECREF( tmp_called_name_9 );

            exception_lineno = 223;
            type_description_1 = "oooc";
            goto frame_exception_exit_1;
        }
        frame_869fc41df2b388ecc0919cc53a3b31d5->m_frame.f_lineno = 223;
        tmp_args_element_name_15 = CALL_METHOD_WITH_ARGS2( tmp_called_instance_1, const_str_plain_replace, &PyTuple_GET_ITEM( const_tuple_str_plain_U_str_plain_W_tuple, 0 ) );

        Py_DECREF( tmp_called_instance_1 );
        if ( tmp_args_element_name_15 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
            Py_DECREF( tmp_called_name_9 );

            exception_lineno = 223;
            type_description_1 = "oooc";
            goto frame_exception_exit_1;
        }
        frame_869fc41df2b388ecc0919cc53a3b31d5->m_frame.f_lineno = 223;
        {
            PyObject *call_args[] = { tmp_args_element_name_14, tmp_args_element_name_15 };
            tmp_call_result_2 = CALL_FUNCTION_WITH_ARGS2( tmp_called_name_9, call_args );
        }

        Py_DECREF( tmp_called_name_9 );
        Py_DECREF( tmp_args_element_name_15 );
        if ( tmp_call_result_2 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 223;
            type_description_1 = "oooc";
            goto frame_exception_exit_1;
        }
        Py_DECREF( tmp_call_result_2 );
    }
    {
        PyObject *tmp_called_name_10;
        PyObject *tmp_source_name_21;
        PyObject *tmp_call_result_3;
        PyObject *tmp_args_element_name_16;
        PyObject *tmp_args_element_name_17;
        PyObject *tmp_called_name_11;
        PyObject *tmp_source_name_22;
        PyObject *tmp_args_element_name_18;
        PyObject *tmp_source_name_23;
        PyObject *tmp_source_name_24;
        CHECK_OBJECT( var_base );
        tmp_source_name_21 = var_base;
        tmp_called_name_10 = LOOKUP_ATTRIBUTE( tmp_source_name_21, const_str_plain___setitem__ );
        if ( tmp_called_name_10 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 224;
            type_description_1 = "oooc";
            goto frame_exception_exit_1;
        }
        tmp_args_element_name_16 = const_str_plain_c;
        CHECK_OBJECT( par_self );
        tmp_source_name_22 = par_self;
        tmp_called_name_11 = LOOKUP_ATTRIBUTE( tmp_source_name_22, const_str_plain_pattern );
        if ( tmp_called_name_11 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
            Py_DECREF( tmp_called_name_10 );

            exception_lineno = 224;
            type_description_1 = "oooc";
            goto frame_exception_exit_1;
        }
        CHECK_OBJECT( par_self );
        tmp_source_name_24 = par_self;
        tmp_source_name_23 = LOOKUP_ATTRIBUTE( tmp_source_name_24, const_str_plain_locale_time );
        if ( tmp_source_name_23 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
            Py_DECREF( tmp_called_name_10 );
            Py_DECREF( tmp_called_name_11 );

            exception_lineno = 224;
            type_description_1 = "oooc";
            goto frame_exception_exit_1;
        }
        tmp_args_element_name_18 = LOOKUP_ATTRIBUTE( tmp_source_name_23, const_str_plain_LC_date_time );
        Py_DECREF( tmp_source_name_23 );
        if ( tmp_args_element_name_18 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
            Py_DECREF( tmp_called_name_10 );
            Py_DECREF( tmp_called_name_11 );

            exception_lineno = 224;
            type_description_1 = "oooc";
            goto frame_exception_exit_1;
        }
        frame_869fc41df2b388ecc0919cc53a3b31d5->m_frame.f_lineno = 224;
        {
            PyObject *call_args[] = { tmp_args_element_name_18 };
            tmp_args_element_name_17 = CALL_FUNCTION_WITH_ARGS1( tmp_called_name_11, call_args );
        }

        Py_DECREF( tmp_called_name_11 );
        Py_DECREF( tmp_args_element_name_18 );
        if ( tmp_args_element_name_17 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
            Py_DECREF( tmp_called_name_10 );

            exception_lineno = 224;
            type_description_1 = "oooc";
            goto frame_exception_exit_1;
        }
        frame_869fc41df2b388ecc0919cc53a3b31d5->m_frame.f_lineno = 224;
        {
            PyObject *call_args[] = { tmp_args_element_name_16, tmp_args_element_name_17 };
            tmp_call_result_3 = CALL_FUNCTION_WITH_ARGS2( tmp_called_name_10, call_args );
        }

        Py_DECREF( tmp_called_name_10 );
        Py_DECREF( tmp_args_element_name_17 );
        if ( tmp_call_result_3 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 224;
            type_description_1 = "oooc";
            goto frame_exception_exit_1;
        }
        Py_DECREF( tmp_call_result_3 );
    }
    {
        PyObject *tmp_called_name_12;
        PyObject *tmp_source_name_25;
        PyObject *tmp_call_result_4;
        PyObject *tmp_args_element_name_19;
        PyObject *tmp_args_element_name_20;
        PyObject *tmp_called_name_13;
        PyObject *tmp_source_name_26;
        PyObject *tmp_args_element_name_21;
        PyObject *tmp_source_name_27;
        PyObject *tmp_source_name_28;
        CHECK_OBJECT( var_base );
        tmp_source_name_25 = var_base;
        tmp_called_name_12 = LOOKUP_ATTRIBUTE( tmp_source_name_25, const_str_plain___setitem__ );
        if ( tmp_called_name_12 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 225;
            type_description_1 = "oooc";
            goto frame_exception_exit_1;
        }
        tmp_args_element_name_19 = const_str_plain_x;
        CHECK_OBJECT( par_self );
        tmp_source_name_26 = par_self;
        tmp_called_name_13 = LOOKUP_ATTRIBUTE( tmp_source_name_26, const_str_plain_pattern );
        if ( tmp_called_name_13 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
            Py_DECREF( tmp_called_name_12 );

            exception_lineno = 225;
            type_description_1 = "oooc";
            goto frame_exception_exit_1;
        }
        CHECK_OBJECT( par_self );
        tmp_source_name_28 = par_self;
        tmp_source_name_27 = LOOKUP_ATTRIBUTE( tmp_source_name_28, const_str_plain_locale_time );
        if ( tmp_source_name_27 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
            Py_DECREF( tmp_called_name_12 );
            Py_DECREF( tmp_called_name_13 );

            exception_lineno = 225;
            type_description_1 = "oooc";
            goto frame_exception_exit_1;
        }
        tmp_args_element_name_21 = LOOKUP_ATTRIBUTE( tmp_source_name_27, const_str_plain_LC_date );
        Py_DECREF( tmp_source_name_27 );
        if ( tmp_args_element_name_21 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
            Py_DECREF( tmp_called_name_12 );
            Py_DECREF( tmp_called_name_13 );

            exception_lineno = 225;
            type_description_1 = "oooc";
            goto frame_exception_exit_1;
        }
        frame_869fc41df2b388ecc0919cc53a3b31d5->m_frame.f_lineno = 225;
        {
            PyObject *call_args[] = { tmp_args_element_name_21 };
            tmp_args_element_name_20 = CALL_FUNCTION_WITH_ARGS1( tmp_called_name_13, call_args );
        }

        Py_DECREF( tmp_called_name_13 );
        Py_DECREF( tmp_args_element_name_21 );
        if ( tmp_args_element_name_20 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
            Py_DECREF( tmp_called_name_12 );

            exception_lineno = 225;
            type_description_1 = "oooc";
            goto frame_exception_exit_1;
        }
        frame_869fc41df2b388ecc0919cc53a3b31d5->m_frame.f_lineno = 225;
        {
            PyObject *call_args[] = { tmp_args_element_name_19, tmp_args_element_name_20 };
            tmp_call_result_4 = CALL_FUNCTION_WITH_ARGS2( tmp_called_name_12, call_args );
        }

        Py_DECREF( tmp_called_name_12 );
        Py_DECREF( tmp_args_element_name_20 );
        if ( tmp_call_result_4 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 225;
            type_description_1 = "oooc";
            goto frame_exception_exit_1;
        }
        Py_DECREF( tmp_call_result_4 );
    }
    {
        PyObject *tmp_called_name_14;
        PyObject *tmp_source_name_29;
        PyObject *tmp_call_result_5;
        PyObject *tmp_args_element_name_22;
        PyObject *tmp_args_element_name_23;
        PyObject *tmp_called_name_15;
        PyObject *tmp_source_name_30;
        PyObject *tmp_args_element_name_24;
        PyObject *tmp_source_name_31;
        PyObject *tmp_source_name_32;
        CHECK_OBJECT( var_base );
        tmp_source_name_29 = var_base;
        tmp_called_name_14 = LOOKUP_ATTRIBUTE( tmp_source_name_29, const_str_plain___setitem__ );
        if ( tmp_called_name_14 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 226;
            type_description_1 = "oooc";
            goto frame_exception_exit_1;
        }
        tmp_args_element_name_22 = const_str_plain_X;
        CHECK_OBJECT( par_self );
        tmp_source_name_30 = par_self;
        tmp_called_name_15 = LOOKUP_ATTRIBUTE( tmp_source_name_30, const_str_plain_pattern );
        if ( tmp_called_name_15 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
            Py_DECREF( tmp_called_name_14 );

            exception_lineno = 226;
            type_description_1 = "oooc";
            goto frame_exception_exit_1;
        }
        CHECK_OBJECT( par_self );
        tmp_source_name_32 = par_self;
        tmp_source_name_31 = LOOKUP_ATTRIBUTE( tmp_source_name_32, const_str_plain_locale_time );
        if ( tmp_source_name_31 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
            Py_DECREF( tmp_called_name_14 );
            Py_DECREF( tmp_called_name_15 );

            exception_lineno = 226;
            type_description_1 = "oooc";
            goto frame_exception_exit_1;
        }
        tmp_args_element_name_24 = LOOKUP_ATTRIBUTE( tmp_source_name_31, const_str_plain_LC_time );
        Py_DECREF( tmp_source_name_31 );
        if ( tmp_args_element_name_24 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
            Py_DECREF( tmp_called_name_14 );
            Py_DECREF( tmp_called_name_15 );

            exception_lineno = 226;
            type_description_1 = "oooc";
            goto frame_exception_exit_1;
        }
        frame_869fc41df2b388ecc0919cc53a3b31d5->m_frame.f_lineno = 226;
        {
            PyObject *call_args[] = { tmp_args_element_name_24 };
            tmp_args_element_name_23 = CALL_FUNCTION_WITH_ARGS1( tmp_called_name_15, call_args );
        }

        Py_DECREF( tmp_called_name_15 );
        Py_DECREF( tmp_args_element_name_24 );
        if ( tmp_args_element_name_23 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
            Py_DECREF( tmp_called_name_14 );

            exception_lineno = 226;
            type_description_1 = "oooc";
            goto frame_exception_exit_1;
        }
        frame_869fc41df2b388ecc0919cc53a3b31d5->m_frame.f_lineno = 226;
        {
            PyObject *call_args[] = { tmp_args_element_name_22, tmp_args_element_name_23 };
            tmp_call_result_5 = CALL_FUNCTION_WITH_ARGS2( tmp_called_name_14, call_args );
        }

        Py_DECREF( tmp_called_name_14 );
        Py_DECREF( tmp_args_element_name_23 );
        if ( tmp_call_result_5 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 226;
            type_description_1 = "oooc";
            goto frame_exception_exit_1;
        }
        Py_DECREF( tmp_call_result_5 );
    }

#if 0
    RESTORE_FRAME_EXCEPTION( frame_869fc41df2b388ecc0919cc53a3b31d5 );
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto frame_no_exception_1;

    frame_exception_exit_1:;

#if 0
    RESTORE_FRAME_EXCEPTION( frame_869fc41df2b388ecc0919cc53a3b31d5 );
#endif

    if ( exception_tb == NULL )
    {
        exception_tb = MAKE_TRACEBACK( frame_869fc41df2b388ecc0919cc53a3b31d5, exception_lineno );
    }
    else if ( exception_tb->tb_frame != &frame_869fc41df2b388ecc0919cc53a3b31d5->m_frame )
    {
        exception_tb = ADD_TRACEBACK( exception_tb, frame_869fc41df2b388ecc0919cc53a3b31d5, exception_lineno );
    }

    // Attachs locals to frame if any.
    Nuitka_Frame_AttachLocals(
        (struct Nuitka_FrameObject *)frame_869fc41df2b388ecc0919cc53a3b31d5,
        type_description_1,
        par_self,
        par_locale_time,
        var_base,
        self->m_closure[0]
    );


    // Release cached frame.
    if ( frame_869fc41df2b388ecc0919cc53a3b31d5 == cache_frame_869fc41df2b388ecc0919cc53a3b31d5 )
    {
        Py_DECREF( frame_869fc41df2b388ecc0919cc53a3b31d5 );
    }
    cache_frame_869fc41df2b388ecc0919cc53a3b31d5 = NULL;

    assertFrameObject( frame_869fc41df2b388ecc0919cc53a3b31d5 );

    // Put the previous frame back on top.
    popFrameStack();

    // Return the error.
    goto try_except_handler_1;

    frame_no_exception_1:;
    tmp_return_value = Py_None;
    Py_INCREF( tmp_return_value );
    goto try_return_handler_1;
    // tried codes exits in all cases
    NUITKA_CANNOT_GET_HERE( _strptime$$$function_9___init__ );
    return NULL;
    // Return handler code:
    try_return_handler_1:;
    CHECK_OBJECT( (PyObject *)par_self );
    Py_DECREF( par_self );
    par_self = NULL;

    CHECK_OBJECT( (PyObject *)par_locale_time );
    Py_DECREF( par_locale_time );
    par_locale_time = NULL;

    CHECK_OBJECT( (PyObject *)var_base );
    Py_DECREF( var_base );
    var_base = NULL;

    goto function_return_exit;
    // Exception handler code:
    try_except_handler_1:;
    exception_keeper_type_1 = exception_type;
    exception_keeper_value_1 = exception_value;
    exception_keeper_tb_1 = exception_tb;
    exception_keeper_lineno_1 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    CHECK_OBJECT( (PyObject *)par_self );
    Py_DECREF( par_self );
    par_self = NULL;

    CHECK_OBJECT( (PyObject *)par_locale_time );
    Py_DECREF( par_locale_time );
    par_locale_time = NULL;

    Py_XDECREF( var_base );
    var_base = NULL;

    // Re-raise.
    exception_type = exception_keeper_type_1;
    exception_value = exception_keeper_value_1;
    exception_tb = exception_keeper_tb_1;
    exception_lineno = exception_keeper_lineno_1;

    goto function_exception_exit;
    // End of try:

    // Return statement must have exited already.
    NUITKA_CANNOT_GET_HERE( _strptime$$$function_9___init__ );
    return NULL;

function_exception_exit:
    assert( exception_type );
    RESTORE_ERROR_OCCURRED( exception_type, exception_value, exception_tb );

    return NULL;

function_return_exit:
   // Function cleanup code if any.


   // Actual function exit with return value, making sure we did not make
   // the error status worse despite non-NULL return.
   CHECK_OBJECT( tmp_return_value );
   assert( had_error || !ERROR_OCCURRED() );
   return tmp_return_value;
}



struct _strptime$$$function_9___init__$$$genexpr_1_genexpr_locals {
    PyObject *var_tz_names;
    PyObject *var_tz;
    PyObject *tmp_contraction_iter_0;
    PyObject *tmp_iter_value_0;
    PyObject *tmp_iter_value_1;
    char const *type_description_1;
    PyObject *exception_type;
    PyObject *exception_value;
    PyTracebackObject *exception_tb;
    int exception_lineno;
    PyObject *exception_keeper_type_1;
    PyObject *exception_keeper_value_1;
    PyTracebackObject *exception_keeper_tb_1;
    int exception_keeper_lineno_1;
    PyObject *exception_keeper_type_2;
    PyObject *exception_keeper_value_2;
    PyTracebackObject *exception_keeper_tb_2;
    int exception_keeper_lineno_2;
};

static PyObject *_strptime$$$function_9___init__$$$genexpr_1_genexpr_context( struct Nuitka_GeneratorObject *generator, PyObject *yield_return_value )
{
    CHECK_OBJECT( (PyObject *)generator );
    assert( Nuitka_Generator_Check( (PyObject *)generator ) );

    // Heap access if used.
    struct _strptime$$$function_9___init__$$$genexpr_1_genexpr_locals *generator_heap = (struct _strptime$$$function_9___init__$$$genexpr_1_genexpr_locals *)generator->m_heap_storage;

    // Dispatch to yield based on return label index:
    switch(generator->m_yield_return_index) {
    case 1: goto yield_return_1;
    }

    // Local variable initialization
    static struct Nuitka_FrameObject *cache_m_frame = NULL;
    generator_heap->var_tz_names = NULL;
    generator_heap->var_tz = NULL;
    generator_heap->tmp_contraction_iter_0 = NULL;
    generator_heap->tmp_iter_value_0 = NULL;
    generator_heap->tmp_iter_value_1 = NULL;
    generator_heap->type_description_1 = NULL;
    generator_heap->exception_type = NULL;
    generator_heap->exception_value = NULL;
    generator_heap->exception_tb = NULL;
    generator_heap->exception_lineno = 0;

    // Actual generator function body.
    // Tried code:
    MAKE_OR_REUSE_FRAME( cache_m_frame, codeobj_cf43a6d34148899b7932d822e31c8f2e, module__strptime, sizeof(void *)+sizeof(void *)+sizeof(void *) );
    generator->m_frame = cache_m_frame;

    // Mark the frame object as in use, ref count 1 will be up for reuse.
    Py_INCREF( generator->m_frame );
    assert( Py_REFCNT( generator->m_frame ) == 2 ); // Frame stack

#if PYTHON_VERSION >= 340
    generator->m_frame->m_frame.f_gen = (PyObject *)generator;
#endif

    Py_CLEAR( generator->m_frame->m_frame.f_back );

    generator->m_frame->m_frame.f_back = PyThreadState_GET()->frame;
    Py_INCREF( generator->m_frame->m_frame.f_back );

    PyThreadState_GET()->frame = &generator->m_frame->m_frame;
    Py_INCREF( generator->m_frame );

    Nuitka_Frame_MarkAsExecuting( generator->m_frame );

#if PYTHON_VERSION >= 300
    // Accept currently existing exception as the one to publish again when we
    // yield or yield from.
    {
        PyThreadState *thread_state = PyThreadState_GET();

#if PYTHON_VERSION < 370
        generator->m_frame->m_frame.f_exc_type = EXC_TYPE( thread_state );
    if ( generator->m_frame->m_frame.f_exc_type == Py_None ) generator->m_frame->m_frame.f_exc_type = NULL;
        Py_XINCREF( generator->m_frame->m_frame.f_exc_type );
    generator->m_frame->m_frame.f_exc_value = EXC_VALUE( thread_state );
        Py_XINCREF( generator->m_frame->m_frame.f_exc_value );
    generator->m_frame->m_frame.f_exc_traceback = EXC_TRACEBACK( thread_state );
        Py_XINCREF( generator->m_frame->m_frame.f_exc_traceback );
#else
        generator->m_exc_state.exc_type = EXC_TYPE( thread_state );
        if ( generator->m_exc_state.exc_type == Py_None ) generator->m_exc_state.exc_type = NULL;
        Py_XINCREF( generator->m_exc_state.exc_type );
        generator->m_exc_state.exc_value = EXC_VALUE( thread_state );
        Py_XINCREF( generator->m_exc_state.exc_value );
        generator->m_exc_state.exc_traceback = EXC_TRACEBACK( thread_state );
        Py_XINCREF( generator->m_exc_state.exc_traceback );
#endif
    }

#endif

    // Framed code:
    // Tried code:
    loop_start_1:;
    {
        PyObject *tmp_next_source_1;
        PyObject *tmp_assign_source_1;
        CHECK_OBJECT( PyCell_GET( generator->m_closure[0] ) );
        tmp_next_source_1 = PyCell_GET( generator->m_closure[0] );
        tmp_assign_source_1 = ITERATOR_NEXT( tmp_next_source_1 );
        if ( tmp_assign_source_1 == NULL )
        {
            if ( CHECK_AND_CLEAR_STOP_ITERATION_OCCURRED() )
            {

                goto loop_end_1;
            }
            else
            {

                FETCH_ERROR_OCCURRED( &generator_heap->exception_type, &generator_heap->exception_value, &generator_heap->exception_tb );
                generator_heap->type_description_1 = "Noo";
                generator_heap->exception_lineno = 219;
                goto try_except_handler_2;
            }
        }

        {
            PyObject *old = generator_heap->tmp_iter_value_1;
            generator_heap->tmp_iter_value_1 = tmp_assign_source_1;
            Py_XDECREF( old );
        }

    }
    {
        PyObject *tmp_assign_source_2;
        CHECK_OBJECT( generator_heap->tmp_iter_value_1 );
        tmp_assign_source_2 = generator_heap->tmp_iter_value_1;
        {
            PyObject *old = generator_heap->var_tz_names;
            generator_heap->var_tz_names = tmp_assign_source_2;
            Py_INCREF( generator_heap->var_tz_names );
            Py_XDECREF( old );
        }

    }
    {
        PyObject *tmp_assign_source_3;
        PyObject *tmp_iter_arg_1;
        CHECK_OBJECT( generator_heap->var_tz_names );
        tmp_iter_arg_1 = generator_heap->var_tz_names;
        tmp_assign_source_3 = MAKE_ITERATOR( tmp_iter_arg_1 );
        if ( tmp_assign_source_3 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &generator_heap->exception_type, &generator_heap->exception_value, &generator_heap->exception_tb );


            generator_heap->exception_lineno = 219;
            generator_heap->type_description_1 = "Noo";
            goto try_except_handler_2;
        }
        {
            PyObject *old = generator_heap->tmp_contraction_iter_0;
            generator_heap->tmp_contraction_iter_0 = tmp_assign_source_3;
            Py_XDECREF( old );
        }

    }
    loop_start_2:;
    {
        PyObject *tmp_next_source_2;
        PyObject *tmp_assign_source_4;
        CHECK_OBJECT( generator_heap->tmp_contraction_iter_0 );
        tmp_next_source_2 = generator_heap->tmp_contraction_iter_0;
        tmp_assign_source_4 = ITERATOR_NEXT( tmp_next_source_2 );
        if ( tmp_assign_source_4 == NULL )
        {
            if ( CHECK_AND_CLEAR_STOP_ITERATION_OCCURRED() )
            {

                goto loop_end_2;
            }
            else
            {

                FETCH_ERROR_OCCURRED( &generator_heap->exception_type, &generator_heap->exception_value, &generator_heap->exception_tb );
                generator_heap->type_description_1 = "Noo";
                generator_heap->exception_lineno = 219;
                goto try_except_handler_2;
            }
        }

        {
            PyObject *old = generator_heap->tmp_iter_value_0;
            generator_heap->tmp_iter_value_0 = tmp_assign_source_4;
            Py_XDECREF( old );
        }

    }
    {
        PyObject *tmp_assign_source_5;
        CHECK_OBJECT( generator_heap->tmp_iter_value_0 );
        tmp_assign_source_5 = generator_heap->tmp_iter_value_0;
        {
            PyObject *old = generator_heap->var_tz;
            generator_heap->var_tz = tmp_assign_source_5;
            Py_INCREF( generator_heap->var_tz );
            Py_XDECREF( old );
        }

    }
    {
        PyObject *tmp_expression_name_1;
        NUITKA_MAY_BE_UNUSED PyObject *tmp_yield_result_1;
        CHECK_OBJECT( generator_heap->var_tz );
        tmp_expression_name_1 = generator_heap->var_tz;
        Py_INCREF( tmp_expression_name_1 );
        generator->m_yield_return_index = 1;
        return tmp_expression_name_1;
        yield_return_1:
        if ( yield_return_value == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &generator_heap->exception_type, &generator_heap->exception_value, &generator_heap->exception_tb );


            generator_heap->exception_lineno = 219;
            generator_heap->type_description_1 = "Noo";
            goto try_except_handler_2;
        }
        tmp_yield_result_1 = yield_return_value;
    }
    if ( CONSIDER_THREADING() == false )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &generator_heap->exception_type, &generator_heap->exception_value, &generator_heap->exception_tb );


        generator_heap->exception_lineno = 219;
        generator_heap->type_description_1 = "Noo";
        goto try_except_handler_2;
    }
    goto loop_start_2;
    loop_end_2:;
    CHECK_OBJECT( (PyObject *)generator_heap->tmp_contraction_iter_0 );
    Py_DECREF( generator_heap->tmp_contraction_iter_0 );
    generator_heap->tmp_contraction_iter_0 = NULL;

    if ( CONSIDER_THREADING() == false )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &generator_heap->exception_type, &generator_heap->exception_value, &generator_heap->exception_tb );


        generator_heap->exception_lineno = 219;
        generator_heap->type_description_1 = "Noo";
        goto try_except_handler_2;
    }
    goto loop_start_1;
    loop_end_1:;
    goto try_end_1;
    // Exception handler code:
    try_except_handler_2:;
    generator_heap->exception_keeper_type_1 = generator_heap->exception_type;
    generator_heap->exception_keeper_value_1 = generator_heap->exception_value;
    generator_heap->exception_keeper_tb_1 = generator_heap->exception_tb;
    generator_heap->exception_keeper_lineno_1 = generator_heap->exception_lineno;
    generator_heap->exception_type = NULL;
    generator_heap->exception_value = NULL;
    generator_heap->exception_tb = NULL;
    generator_heap->exception_lineno = 0;

    Py_XDECREF( generator_heap->tmp_iter_value_0 );
    generator_heap->tmp_iter_value_0 = NULL;

    Py_XDECREF( generator_heap->tmp_contraction_iter_0 );
    generator_heap->tmp_contraction_iter_0 = NULL;

    Py_XDECREF( generator_heap->tmp_iter_value_1 );
    generator_heap->tmp_iter_value_1 = NULL;

    // Re-raise.
    generator_heap->exception_type = generator_heap->exception_keeper_type_1;
    generator_heap->exception_value = generator_heap->exception_keeper_value_1;
    generator_heap->exception_tb = generator_heap->exception_keeper_tb_1;
    generator_heap->exception_lineno = generator_heap->exception_keeper_lineno_1;

    goto frame_exception_exit_1;
    // End of try:
    try_end_1:;

    Nuitka_Frame_MarkAsNotExecuting( generator->m_frame );

#if PYTHON_VERSION >= 370
    Py_CLEAR( generator->m_exc_state.exc_type );
    Py_CLEAR( generator->m_exc_state.exc_value );
    Py_CLEAR( generator->m_exc_state.exc_traceback );
#elif PYTHON_VERSION >= 300
    Py_CLEAR( generator->m_frame->m_frame.f_exc_type );
    Py_CLEAR( generator->m_frame->m_frame.f_exc_value );
    Py_CLEAR( generator->m_frame->m_frame.f_exc_traceback );
#endif

    // Allow re-use of the frame again.
    Py_DECREF( generator->m_frame );
    goto frame_no_exception_1;

    frame_exception_exit_1:;

    // If it's not an exit exception, consider and create a traceback for it.
    if ( !EXCEPTION_MATCH_GENERATOR( generator_heap->exception_type ) )
    {
        if ( generator_heap->exception_tb == NULL )
        {
            generator_heap->exception_tb = MAKE_TRACEBACK( generator->m_frame, generator_heap->exception_lineno );
        }
        else if ( generator_heap->exception_tb->tb_frame != &generator->m_frame->m_frame )
        {
            generator_heap->exception_tb = ADD_TRACEBACK( generator_heap->exception_tb, generator->m_frame, generator_heap->exception_lineno );
        }

        Nuitka_Frame_AttachLocals(
            (struct Nuitka_FrameObject *)generator->m_frame,
            generator_heap->type_description_1,
            NULL,
            generator_heap->var_tz_names,
            generator_heap->var_tz
        );


        // Release cached frame.
        if ( generator->m_frame == cache_m_frame )
        {
            Py_DECREF( generator->m_frame );
        }
        cache_m_frame = NULL;

        assertFrameObject( generator->m_frame );
    }

#if PYTHON_VERSION >= 370
    Py_CLEAR( generator->m_exc_state.exc_type );
    Py_CLEAR( generator->m_exc_state.exc_value );
    Py_CLEAR( generator->m_exc_state.exc_traceback );
#elif PYTHON_VERSION >= 300
    Py_CLEAR( generator->m_frame->m_frame.f_exc_type );
    Py_CLEAR( generator->m_frame->m_frame.f_exc_value );
    Py_CLEAR( generator->m_frame->m_frame.f_exc_traceback );
#endif

    Py_DECREF( generator->m_frame );

    // Return the error.
    goto try_except_handler_1;

    frame_no_exception_1:;
    goto try_end_2;
    // Exception handler code:
    try_except_handler_1:;
    generator_heap->exception_keeper_type_2 = generator_heap->exception_type;
    generator_heap->exception_keeper_value_2 = generator_heap->exception_value;
    generator_heap->exception_keeper_tb_2 = generator_heap->exception_tb;
    generator_heap->exception_keeper_lineno_2 = generator_heap->exception_lineno;
    generator_heap->exception_type = NULL;
    generator_heap->exception_value = NULL;
    generator_heap->exception_tb = NULL;
    generator_heap->exception_lineno = 0;

    Py_XDECREF( generator_heap->var_tz_names );
    generator_heap->var_tz_names = NULL;

    Py_XDECREF( generator_heap->var_tz );
    generator_heap->var_tz = NULL;

    // Re-raise.
    generator_heap->exception_type = generator_heap->exception_keeper_type_2;
    generator_heap->exception_value = generator_heap->exception_keeper_value_2;
    generator_heap->exception_tb = generator_heap->exception_keeper_tb_2;
    generator_heap->exception_lineno = generator_heap->exception_keeper_lineno_2;

    goto function_exception_exit;
    // End of try:
    try_end_2:;
    Py_XDECREF( generator_heap->tmp_iter_value_0 );
    generator_heap->tmp_iter_value_0 = NULL;

    Py_XDECREF( generator_heap->tmp_contraction_iter_0 );
    generator_heap->tmp_contraction_iter_0 = NULL;

    Py_XDECREF( generator_heap->tmp_iter_value_1 );
    generator_heap->tmp_iter_value_1 = NULL;

    Py_XDECREF( generator_heap->var_tz_names );
    generator_heap->var_tz_names = NULL;

    Py_XDECREF( generator_heap->var_tz );
    generator_heap->var_tz = NULL;



    return NULL;

    function_exception_exit:
    assert( generator_heap->exception_type );
    RESTORE_ERROR_OCCURRED( generator_heap->exception_type, generator_heap->exception_value, generator_heap->exception_tb );

    return NULL;

}

static PyObject *_strptime$$$function_9___init__$$$genexpr_1_genexpr_maker( void )
{
    return Nuitka_Generator_New(
        _strptime$$$function_9___init__$$$genexpr_1_genexpr_context,
        module__strptime,
        const_str_angle_genexpr,
#if PYTHON_VERSION >= 350
        const_str_digest_8b225a8ee7e5283a9f3dc53601795e6c,
#endif
        codeobj_cf43a6d34148899b7932d822e31c8f2e,
        1,
        sizeof(struct _strptime$$$function_9___init__$$$genexpr_1_genexpr_locals)
    );
}


static PyObject *impl__strptime$$$function_10___seqToRE( struct Nuitka_FunctionObject const *self, PyObject **python_pars )
{
    // Preserve error status for checks
#ifndef __NUITKA_NO_ASSERT__
    NUITKA_MAY_BE_UNUSED bool had_error = ERROR_OCCURRED();
#endif

    // Local variable declarations.
    PyObject *par_self = python_pars[ 0 ];
    PyObject *par_to_convert = python_pars[ 1 ];
    PyObject *par_directive = python_pars[ 2 ];
    PyObject *var_value = NULL;
    PyObject *var_regex = NULL;
    nuitka_bool tmp_for_loop_1__break_indicator = NUITKA_BOOL_UNASSIGNED;
    PyObject *tmp_for_loop_1__for_iterator = NULL;
    PyObject *tmp_for_loop_1__iter_value = NULL;
    PyObject *tmp_genexpr_1__$0 = NULL;
    struct Nuitka_FrameObject *frame_f5d16e06a9c33f44540f4c03a29f4f26;
    NUITKA_MAY_BE_UNUSED char const *type_description_1 = NULL;
    int tmp_res;
    PyObject *exception_type = NULL;
    PyObject *exception_value = NULL;
    PyTracebackObject *exception_tb = NULL;
    NUITKA_MAY_BE_UNUSED int exception_lineno = 0;
    PyObject *exception_keeper_type_1;
    PyObject *exception_keeper_value_1;
    PyTracebackObject *exception_keeper_tb_1;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_1;
    PyObject *exception_keeper_type_2;
    PyObject *exception_keeper_value_2;
    PyTracebackObject *exception_keeper_tb_2;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_2;
    PyObject *tmp_return_value = NULL;
    PyObject *exception_keeper_type_3;
    PyObject *exception_keeper_value_3;
    PyTracebackObject *exception_keeper_tb_3;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_3;
    static struct Nuitka_FrameObject *cache_frame_f5d16e06a9c33f44540f4c03a29f4f26 = NULL;
    PyObject *exception_keeper_type_4;
    PyObject *exception_keeper_value_4;
    PyTracebackObject *exception_keeper_tb_4;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_4;

    // Actual function body.
    // Tried code:
    MAKE_OR_REUSE_FRAME( cache_frame_f5d16e06a9c33f44540f4c03a29f4f26, codeobj_f5d16e06a9c33f44540f4c03a29f4f26, module__strptime, sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *) );
    frame_f5d16e06a9c33f44540f4c03a29f4f26 = cache_frame_f5d16e06a9c33f44540f4c03a29f4f26;

    // Push the new frame as the currently active one.
    pushFrameStack( frame_f5d16e06a9c33f44540f4c03a29f4f26 );

    // Mark the frame object as in use, ref count 1 will be up for reuse.
    assert( Py_REFCNT( frame_f5d16e06a9c33f44540f4c03a29f4f26 ) == 2 ); // Frame stack

    // Framed code:
    {
        PyObject *tmp_assign_source_1;
        PyObject *tmp_called_name_1;
        PyObject *tmp_args_name_1;
        PyObject *tmp_tuple_element_1;
        PyObject *tmp_kw_name_1;
        PyObject *tmp_dict_key_1;
        PyObject *tmp_dict_value_1;
        PyObject *tmp_dict_key_2;
        PyObject *tmp_dict_value_2;
        tmp_called_name_1 = LOOKUP_BUILTIN( const_str_plain_sorted );
        assert( tmp_called_name_1 != NULL );
        CHECK_OBJECT( par_to_convert );
        tmp_tuple_element_1 = par_to_convert;
        tmp_args_name_1 = PyTuple_New( 1 );
        Py_INCREF( tmp_tuple_element_1 );
        PyTuple_SET_ITEM( tmp_args_name_1, 0, tmp_tuple_element_1 );
        tmp_dict_key_1 = const_str_plain_key;
        tmp_dict_value_1 = LOOKUP_BUILTIN( const_str_plain_len );
        assert( tmp_dict_value_1 != NULL );
        tmp_kw_name_1 = _PyDict_NewPresized( 2 );
        tmp_res = PyDict_SetItem( tmp_kw_name_1, tmp_dict_key_1, tmp_dict_value_1 );
        assert( !(tmp_res != 0) );
        tmp_dict_key_2 = const_str_plain_reverse;
        tmp_dict_value_2 = Py_True;
        tmp_res = PyDict_SetItem( tmp_kw_name_1, tmp_dict_key_2, tmp_dict_value_2 );
        assert( !(tmp_res != 0) );
        frame_f5d16e06a9c33f44540f4c03a29f4f26->m_frame.f_lineno = 237;
        tmp_assign_source_1 = CALL_FUNCTION( tmp_called_name_1, tmp_args_name_1, tmp_kw_name_1 );
        Py_DECREF( tmp_args_name_1 );
        Py_DECREF( tmp_kw_name_1 );
        if ( tmp_assign_source_1 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 237;
            type_description_1 = "ooooo";
            goto frame_exception_exit_1;
        }
        {
            PyObject *old = par_to_convert;
            assert( old != NULL );
            par_to_convert = tmp_assign_source_1;
            Py_DECREF( old );
        }

    }
    {
        nuitka_bool tmp_assign_source_2;
        tmp_assign_source_2 = NUITKA_BOOL_FALSE;
        tmp_for_loop_1__break_indicator = tmp_assign_source_2;
    }
    // Tried code:
    {
        PyObject *tmp_assign_source_3;
        PyObject *tmp_iter_arg_1;
        CHECK_OBJECT( par_to_convert );
        tmp_iter_arg_1 = par_to_convert;
        tmp_assign_source_3 = MAKE_ITERATOR( tmp_iter_arg_1 );
        if ( tmp_assign_source_3 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 238;
            type_description_1 = "ooooo";
            goto try_except_handler_2;
        }
        assert( tmp_for_loop_1__for_iterator == NULL );
        tmp_for_loop_1__for_iterator = tmp_assign_source_3;
    }
    // Tried code:
    loop_start_1:;
    // Tried code:
    {
        PyObject *tmp_assign_source_4;
        PyObject *tmp_value_name_1;
        CHECK_OBJECT( tmp_for_loop_1__for_iterator );
        tmp_value_name_1 = tmp_for_loop_1__for_iterator;
        tmp_assign_source_4 = ITERATOR_NEXT( tmp_value_name_1 );
        if ( tmp_assign_source_4 == NULL )
        {
            if ( !ERROR_OCCURRED() )
            {
                exception_type = PyExc_StopIteration;
                Py_INCREF( exception_type );
                exception_value = NULL;
                exception_tb = NULL;
            }
            else
            {
                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
            }


            type_description_1 = "ooooo";
            exception_lineno = 238;
            goto try_except_handler_4;
        }
        {
            PyObject *old = tmp_for_loop_1__iter_value;
            tmp_for_loop_1__iter_value = tmp_assign_source_4;
            Py_XDECREF( old );
        }

    }
    goto try_end_1;
    // Exception handler code:
    try_except_handler_4:;
    exception_keeper_type_1 = exception_type;
    exception_keeper_value_1 = exception_value;
    exception_keeper_tb_1 = exception_tb;
    exception_keeper_lineno_1 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    {
        nuitka_bool tmp_condition_result_1;
        PyObject *tmp_compexpr_left_1;
        PyObject *tmp_compexpr_right_1;
        tmp_compexpr_left_1 = exception_keeper_type_1;
        tmp_compexpr_right_1 = PyExc_StopIteration;
        tmp_res = EXCEPTION_MATCH_BOOL( tmp_compexpr_left_1, tmp_compexpr_right_1 );
        if ( tmp_res == -1 )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );

            Py_DECREF( exception_keeper_type_1 );
            Py_XDECREF( exception_keeper_value_1 );
            Py_XDECREF( exception_keeper_tb_1 );

            exception_lineno = 238;
            type_description_1 = "ooooo";
            goto try_except_handler_3;
        }
        tmp_condition_result_1 = ( tmp_res != 0 ) ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
        if ( tmp_condition_result_1 == NUITKA_BOOL_TRUE )
        {
            goto branch_yes_1;
        }
        else
        {
            goto branch_no_1;
        }
        branch_yes_1:;
        {
            nuitka_bool tmp_assign_source_5;
            tmp_assign_source_5 = NUITKA_BOOL_TRUE;
            tmp_for_loop_1__break_indicator = tmp_assign_source_5;
        }
        Py_DECREF( exception_keeper_type_1 );
        Py_XDECREF( exception_keeper_value_1 );
        Py_XDECREF( exception_keeper_tb_1 );
        goto loop_end_1;
        goto branch_end_1;
        branch_no_1:;
        // Re-raise.
        exception_type = exception_keeper_type_1;
        exception_value = exception_keeper_value_1;
        exception_tb = exception_keeper_tb_1;
        exception_lineno = exception_keeper_lineno_1;

        goto try_except_handler_3;
        branch_end_1:;
    }
    // End of try:
    try_end_1:;
    {
        PyObject *tmp_assign_source_6;
        CHECK_OBJECT( tmp_for_loop_1__iter_value );
        tmp_assign_source_6 = tmp_for_loop_1__iter_value;
        {
            PyObject *old = var_value;
            var_value = tmp_assign_source_6;
            Py_INCREF( var_value );
            Py_XDECREF( old );
        }

    }
    {
        nuitka_bool tmp_condition_result_2;
        PyObject *tmp_compexpr_left_2;
        PyObject *tmp_compexpr_right_2;
        CHECK_OBJECT( var_value );
        tmp_compexpr_left_2 = var_value;
        tmp_compexpr_right_2 = const_str_empty;
        tmp_res = RICH_COMPARE_BOOL_NOTEQ_OBJECT_OBJECT( tmp_compexpr_left_2, tmp_compexpr_right_2 );
        if ( tmp_res == -1 )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 239;
            type_description_1 = "ooooo";
            goto try_except_handler_3;
        }
        tmp_condition_result_2 = ( tmp_res != 0 ) ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
        if ( tmp_condition_result_2 == NUITKA_BOOL_TRUE )
        {
            goto branch_yes_2;
        }
        else
        {
            goto branch_no_2;
        }
        branch_yes_2:;
        goto loop_end_1;
        branch_no_2:;
    }
    if ( CONSIDER_THREADING() == false )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 238;
        type_description_1 = "ooooo";
        goto try_except_handler_3;
    }
    goto loop_start_1;
    loop_end_1:;
    goto try_end_2;
    // Exception handler code:
    try_except_handler_3:;
    exception_keeper_type_2 = exception_type;
    exception_keeper_value_2 = exception_value;
    exception_keeper_tb_2 = exception_tb;
    exception_keeper_lineno_2 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    Py_XDECREF( tmp_for_loop_1__iter_value );
    tmp_for_loop_1__iter_value = NULL;

    CHECK_OBJECT( (PyObject *)tmp_for_loop_1__for_iterator );
    Py_DECREF( tmp_for_loop_1__for_iterator );
    tmp_for_loop_1__for_iterator = NULL;

    // Re-raise.
    exception_type = exception_keeper_type_2;
    exception_value = exception_keeper_value_2;
    exception_tb = exception_keeper_tb_2;
    exception_lineno = exception_keeper_lineno_2;

    goto try_except_handler_2;
    // End of try:
    try_end_2:;
    Py_XDECREF( tmp_for_loop_1__iter_value );
    tmp_for_loop_1__iter_value = NULL;

    CHECK_OBJECT( (PyObject *)tmp_for_loop_1__for_iterator );
    Py_DECREF( tmp_for_loop_1__for_iterator );
    tmp_for_loop_1__for_iterator = NULL;

    {
        nuitka_bool tmp_condition_result_3;
        nuitka_bool tmp_compexpr_left_3;
        nuitka_bool tmp_compexpr_right_3;
        assert( tmp_for_loop_1__break_indicator != NUITKA_BOOL_UNASSIGNED);
        tmp_compexpr_left_3 = tmp_for_loop_1__break_indicator;
        tmp_compexpr_right_3 = NUITKA_BOOL_TRUE;
        tmp_condition_result_3 = ( tmp_compexpr_left_3 == tmp_compexpr_right_3 ) ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
        if ( tmp_condition_result_3 == NUITKA_BOOL_TRUE )
        {
            goto branch_yes_3;
        }
        else
        {
            goto branch_no_3;
        }
        branch_yes_3:;
        tmp_return_value = const_str_empty;
        Py_INCREF( tmp_return_value );
        goto try_return_handler_2;
        branch_no_3:;
    }
    goto try_end_3;
    // Return handler code:
    try_return_handler_2:;
    goto frame_return_exit_1;
    // Exception handler code:
    try_except_handler_2:;
    exception_keeper_type_3 = exception_type;
    exception_keeper_value_3 = exception_value;
    exception_keeper_tb_3 = exception_tb;
    exception_keeper_lineno_3 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    // Re-raise.
    exception_type = exception_keeper_type_3;
    exception_value = exception_keeper_value_3;
    exception_tb = exception_keeper_tb_3;
    exception_lineno = exception_keeper_lineno_3;

    goto frame_exception_exit_1;
    // End of try:
    try_end_3:;
    {
        PyObject *tmp_assign_source_7;
        PyObject *tmp_called_name_2;
        PyObject *tmp_source_name_1;
        PyObject *tmp_args_element_name_1;
        tmp_source_name_1 = const_str_chr_124;
        tmp_called_name_2 = LOOKUP_ATTRIBUTE( tmp_source_name_1, const_str_plain_join );
        assert( !(tmp_called_name_2 == NULL) );
        {
            PyObject *tmp_assign_source_8;
            PyObject *tmp_iter_arg_2;
            CHECK_OBJECT( par_to_convert );
            tmp_iter_arg_2 = par_to_convert;
            tmp_assign_source_8 = MAKE_ITERATOR( tmp_iter_arg_2 );
            if ( tmp_assign_source_8 == NULL )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 243;
                type_description_1 = "ooooo";
                goto frame_exception_exit_1;
            }
            assert( tmp_genexpr_1__$0 == NULL );
            tmp_genexpr_1__$0 = tmp_assign_source_8;
        }
        // Tried code:
        tmp_args_element_name_1 = _strptime$$$function_10___seqToRE$$$genexpr_1_genexpr_maker();

        ((struct Nuitka_GeneratorObject *)tmp_args_element_name_1)->m_closure[0] = PyCell_NEW0( tmp_genexpr_1__$0 );


        goto try_return_handler_5;
        // tried codes exits in all cases
        NUITKA_CANNOT_GET_HERE( _strptime$$$function_10___seqToRE );
        return NULL;
        // Return handler code:
        try_return_handler_5:;
        CHECK_OBJECT( (PyObject *)tmp_genexpr_1__$0 );
        Py_DECREF( tmp_genexpr_1__$0 );
        tmp_genexpr_1__$0 = NULL;

        goto outline_result_1;
        // End of try:
        CHECK_OBJECT( (PyObject *)tmp_genexpr_1__$0 );
        Py_DECREF( tmp_genexpr_1__$0 );
        tmp_genexpr_1__$0 = NULL;

        // Return statement must have exited already.
        NUITKA_CANNOT_GET_HERE( _strptime$$$function_10___seqToRE );
        return NULL;
        outline_result_1:;
        frame_f5d16e06a9c33f44540f4c03a29f4f26->m_frame.f_lineno = 243;
        {
            PyObject *call_args[] = { tmp_args_element_name_1 };
            tmp_assign_source_7 = CALL_FUNCTION_WITH_ARGS1( tmp_called_name_2, call_args );
        }

        Py_DECREF( tmp_called_name_2 );
        Py_DECREF( tmp_args_element_name_1 );
        if ( tmp_assign_source_7 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 243;
            type_description_1 = "ooooo";
            goto frame_exception_exit_1;
        }
        assert( var_regex == NULL );
        var_regex = tmp_assign_source_7;
    }
    {
        PyObject *tmp_assign_source_9;
        PyObject *tmp_left_name_1;
        PyObject *tmp_right_name_1;
        PyObject *tmp_tuple_element_2;
        tmp_left_name_1 = const_str_digest_cb4778dd4702622e6404f1a827f5d9cd;
        CHECK_OBJECT( par_directive );
        tmp_tuple_element_2 = par_directive;
        tmp_right_name_1 = PyTuple_New( 2 );
        Py_INCREF( tmp_tuple_element_2 );
        PyTuple_SET_ITEM( tmp_right_name_1, 0, tmp_tuple_element_2 );
        CHECK_OBJECT( var_regex );
        tmp_tuple_element_2 = var_regex;
        Py_INCREF( tmp_tuple_element_2 );
        PyTuple_SET_ITEM( tmp_right_name_1, 1, tmp_tuple_element_2 );
        tmp_assign_source_9 = BINARY_OPERATION_REMAINDER( tmp_left_name_1, tmp_right_name_1 );
        Py_DECREF( tmp_right_name_1 );
        if ( tmp_assign_source_9 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 244;
            type_description_1 = "ooooo";
            goto frame_exception_exit_1;
        }
        {
            PyObject *old = var_regex;
            assert( old != NULL );
            var_regex = tmp_assign_source_9;
            Py_DECREF( old );
        }

    }
    {
        PyObject *tmp_left_name_2;
        PyObject *tmp_right_name_2;
        tmp_left_name_2 = const_str_digest_f48ab9da326247418c919b7675ccc719;
        CHECK_OBJECT( var_regex );
        tmp_right_name_2 = var_regex;
        tmp_return_value = BINARY_OPERATION_REMAINDER( tmp_left_name_2, tmp_right_name_2 );
        if ( tmp_return_value == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 245;
            type_description_1 = "ooooo";
            goto frame_exception_exit_1;
        }
        goto frame_return_exit_1;
    }

#if 0
    RESTORE_FRAME_EXCEPTION( frame_f5d16e06a9c33f44540f4c03a29f4f26 );
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto frame_no_exception_1;

    frame_return_exit_1:;
#if 0
    RESTORE_FRAME_EXCEPTION( frame_f5d16e06a9c33f44540f4c03a29f4f26 );
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto try_return_handler_1;

    frame_exception_exit_1:;

#if 0
    RESTORE_FRAME_EXCEPTION( frame_f5d16e06a9c33f44540f4c03a29f4f26 );
#endif

    if ( exception_tb == NULL )
    {
        exception_tb = MAKE_TRACEBACK( frame_f5d16e06a9c33f44540f4c03a29f4f26, exception_lineno );
    }
    else if ( exception_tb->tb_frame != &frame_f5d16e06a9c33f44540f4c03a29f4f26->m_frame )
    {
        exception_tb = ADD_TRACEBACK( exception_tb, frame_f5d16e06a9c33f44540f4c03a29f4f26, exception_lineno );
    }

    // Attachs locals to frame if any.
    Nuitka_Frame_AttachLocals(
        (struct Nuitka_FrameObject *)frame_f5d16e06a9c33f44540f4c03a29f4f26,
        type_description_1,
        par_self,
        par_to_convert,
        par_directive,
        var_value,
        var_regex
    );


    // Release cached frame.
    if ( frame_f5d16e06a9c33f44540f4c03a29f4f26 == cache_frame_f5d16e06a9c33f44540f4c03a29f4f26 )
    {
        Py_DECREF( frame_f5d16e06a9c33f44540f4c03a29f4f26 );
    }
    cache_frame_f5d16e06a9c33f44540f4c03a29f4f26 = NULL;

    assertFrameObject( frame_f5d16e06a9c33f44540f4c03a29f4f26 );

    // Put the previous frame back on top.
    popFrameStack();

    // Return the error.
    goto try_except_handler_1;

    frame_no_exception_1:;
    // tried codes exits in all cases
    NUITKA_CANNOT_GET_HERE( _strptime$$$function_10___seqToRE );
    return NULL;
    // Return handler code:
    try_return_handler_1:;
    CHECK_OBJECT( (PyObject *)par_self );
    Py_DECREF( par_self );
    par_self = NULL;

    CHECK_OBJECT( (PyObject *)par_to_convert );
    Py_DECREF( par_to_convert );
    par_to_convert = NULL;

    CHECK_OBJECT( (PyObject *)par_directive );
    Py_DECREF( par_directive );
    par_directive = NULL;

    Py_XDECREF( var_value );
    var_value = NULL;

    Py_XDECREF( var_regex );
    var_regex = NULL;

    goto function_return_exit;
    // Exception handler code:
    try_except_handler_1:;
    exception_keeper_type_4 = exception_type;
    exception_keeper_value_4 = exception_value;
    exception_keeper_tb_4 = exception_tb;
    exception_keeper_lineno_4 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    CHECK_OBJECT( (PyObject *)par_self );
    Py_DECREF( par_self );
    par_self = NULL;

    CHECK_OBJECT( (PyObject *)par_to_convert );
    Py_DECREF( par_to_convert );
    par_to_convert = NULL;

    CHECK_OBJECT( (PyObject *)par_directive );
    Py_DECREF( par_directive );
    par_directive = NULL;

    Py_XDECREF( var_value );
    var_value = NULL;

    Py_XDECREF( var_regex );
    var_regex = NULL;

    // Re-raise.
    exception_type = exception_keeper_type_4;
    exception_value = exception_keeper_value_4;
    exception_tb = exception_keeper_tb_4;
    exception_lineno = exception_keeper_lineno_4;

    goto function_exception_exit;
    // End of try:

    // Return statement must have exited already.
    NUITKA_CANNOT_GET_HERE( _strptime$$$function_10___seqToRE );
    return NULL;

function_exception_exit:
    assert( exception_type );
    RESTORE_ERROR_OCCURRED( exception_type, exception_value, exception_tb );

    return NULL;

function_return_exit:
   // Function cleanup code if any.


   // Actual function exit with return value, making sure we did not make
   // the error status worse despite non-NULL return.
   CHECK_OBJECT( tmp_return_value );
   assert( had_error || !ERROR_OCCURRED() );
   return tmp_return_value;
}



struct _strptime$$$function_10___seqToRE$$$genexpr_1_genexpr_locals {
    PyObject *var_stuff;
    PyObject *tmp_iter_value_0;
    char const *type_description_1;
    PyObject *exception_type;
    PyObject *exception_value;
    PyTracebackObject *exception_tb;
    int exception_lineno;
    char yield_tmps[1024];
    PyObject *exception_keeper_type_1;
    PyObject *exception_keeper_value_1;
    PyTracebackObject *exception_keeper_tb_1;
    int exception_keeper_lineno_1;
    PyObject *exception_keeper_type_2;
    PyObject *exception_keeper_value_2;
    PyTracebackObject *exception_keeper_tb_2;
    int exception_keeper_lineno_2;
};

static PyObject *_strptime$$$function_10___seqToRE$$$genexpr_1_genexpr_context( struct Nuitka_GeneratorObject *generator, PyObject *yield_return_value )
{
    CHECK_OBJECT( (PyObject *)generator );
    assert( Nuitka_Generator_Check( (PyObject *)generator ) );

    // Heap access if used.
    struct _strptime$$$function_10___seqToRE$$$genexpr_1_genexpr_locals *generator_heap = (struct _strptime$$$function_10___seqToRE$$$genexpr_1_genexpr_locals *)generator->m_heap_storage;

    // Dispatch to yield based on return label index:
    switch(generator->m_yield_return_index) {
    case 1: goto yield_return_1;
    }

    // Local variable initialization
    static struct Nuitka_FrameObject *cache_m_frame = NULL;
    generator_heap->var_stuff = NULL;
    generator_heap->tmp_iter_value_0 = NULL;
    generator_heap->type_description_1 = NULL;
    generator_heap->exception_type = NULL;
    generator_heap->exception_value = NULL;
    generator_heap->exception_tb = NULL;
    generator_heap->exception_lineno = 0;

    // Actual generator function body.
    // Tried code:
    MAKE_OR_REUSE_FRAME( cache_m_frame, codeobj_87025261fc36446f5ab92e2a5cab2c5f, module__strptime, sizeof(void *)+sizeof(void *) );
    generator->m_frame = cache_m_frame;

    // Mark the frame object as in use, ref count 1 will be up for reuse.
    Py_INCREF( generator->m_frame );
    assert( Py_REFCNT( generator->m_frame ) == 2 ); // Frame stack

#if PYTHON_VERSION >= 340
    generator->m_frame->m_frame.f_gen = (PyObject *)generator;
#endif

    Py_CLEAR( generator->m_frame->m_frame.f_back );

    generator->m_frame->m_frame.f_back = PyThreadState_GET()->frame;
    Py_INCREF( generator->m_frame->m_frame.f_back );

    PyThreadState_GET()->frame = &generator->m_frame->m_frame;
    Py_INCREF( generator->m_frame );

    Nuitka_Frame_MarkAsExecuting( generator->m_frame );

#if PYTHON_VERSION >= 300
    // Accept currently existing exception as the one to publish again when we
    // yield or yield from.
    {
        PyThreadState *thread_state = PyThreadState_GET();

#if PYTHON_VERSION < 370
        generator->m_frame->m_frame.f_exc_type = EXC_TYPE( thread_state );
    if ( generator->m_frame->m_frame.f_exc_type == Py_None ) generator->m_frame->m_frame.f_exc_type = NULL;
        Py_XINCREF( generator->m_frame->m_frame.f_exc_type );
    generator->m_frame->m_frame.f_exc_value = EXC_VALUE( thread_state );
        Py_XINCREF( generator->m_frame->m_frame.f_exc_value );
    generator->m_frame->m_frame.f_exc_traceback = EXC_TRACEBACK( thread_state );
        Py_XINCREF( generator->m_frame->m_frame.f_exc_traceback );
#else
        generator->m_exc_state.exc_type = EXC_TYPE( thread_state );
        if ( generator->m_exc_state.exc_type == Py_None ) generator->m_exc_state.exc_type = NULL;
        Py_XINCREF( generator->m_exc_state.exc_type );
        generator->m_exc_state.exc_value = EXC_VALUE( thread_state );
        Py_XINCREF( generator->m_exc_state.exc_value );
        generator->m_exc_state.exc_traceback = EXC_TRACEBACK( thread_state );
        Py_XINCREF( generator->m_exc_state.exc_traceback );
#endif
    }

#endif

    // Framed code:
    // Tried code:
    loop_start_1:;
    {
        PyObject *tmp_next_source_1;
        PyObject *tmp_assign_source_1;
        CHECK_OBJECT( PyCell_GET( generator->m_closure[0] ) );
        tmp_next_source_1 = PyCell_GET( generator->m_closure[0] );
        tmp_assign_source_1 = ITERATOR_NEXT( tmp_next_source_1 );
        if ( tmp_assign_source_1 == NULL )
        {
            if ( CHECK_AND_CLEAR_STOP_ITERATION_OCCURRED() )
            {

                goto loop_end_1;
            }
            else
            {

                FETCH_ERROR_OCCURRED( &generator_heap->exception_type, &generator_heap->exception_value, &generator_heap->exception_tb );
                generator_heap->type_description_1 = "No";
                generator_heap->exception_lineno = 243;
                goto try_except_handler_2;
            }
        }

        {
            PyObject *old = generator_heap->tmp_iter_value_0;
            generator_heap->tmp_iter_value_0 = tmp_assign_source_1;
            Py_XDECREF( old );
        }

    }
    {
        PyObject *tmp_assign_source_2;
        CHECK_OBJECT( generator_heap->tmp_iter_value_0 );
        tmp_assign_source_2 = generator_heap->tmp_iter_value_0;
        {
            PyObject *old = generator_heap->var_stuff;
            generator_heap->var_stuff = tmp_assign_source_2;
            Py_INCREF( generator_heap->var_stuff );
            Py_XDECREF( old );
        }

    }
    {
        PyObject *tmp_expression_name_1;
        PyObject *tmp_called_name_1;
        PyObject *tmp_mvar_value_1;
        PyObject *tmp_args_element_name_1;
        NUITKA_MAY_BE_UNUSED PyObject *tmp_yield_result_1;
        tmp_mvar_value_1 = GET_STRING_DICT_VALUE( moduledict__strptime, (Nuitka_StringObject *)const_str_plain_re_escape );

        if (unlikely( tmp_mvar_value_1 == NULL ))
        {
            tmp_mvar_value_1 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_re_escape );
        }

        if ( tmp_mvar_value_1 == NULL )
        {

            generator_heap->exception_type = PyExc_NameError;
            Py_INCREF( generator_heap->exception_type );
            generator_heap->exception_value = PyUnicode_FromFormat( "name '%s' is not defined", "re_escape" );
            generator_heap->exception_tb = NULL;
            NORMALIZE_EXCEPTION( &generator_heap->exception_type, &generator_heap->exception_value, &generator_heap->exception_tb );
            CHAIN_EXCEPTION( generator_heap->exception_value );

            generator_heap->exception_lineno = 243;
            generator_heap->type_description_1 = "No";
            goto try_except_handler_2;
        }

        tmp_called_name_1 = tmp_mvar_value_1;
        CHECK_OBJECT( generator_heap->var_stuff );
        tmp_args_element_name_1 = generator_heap->var_stuff;
        generator->m_frame->m_frame.f_lineno = 243;
        {
            PyObject *call_args[] = { tmp_args_element_name_1 };
            tmp_expression_name_1 = CALL_FUNCTION_WITH_ARGS1( tmp_called_name_1, call_args );
        }

        if ( tmp_expression_name_1 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &generator_heap->exception_type, &generator_heap->exception_value, &generator_heap->exception_tb );


            generator_heap->exception_lineno = 243;
            generator_heap->type_description_1 = "No";
            goto try_except_handler_2;
        }
        Nuitka_PreserveHeap( generator_heap->yield_tmps, &tmp_called_name_1, sizeof(PyObject *), &tmp_mvar_value_1, sizeof(PyObject *), &tmp_args_element_name_1, sizeof(PyObject *), NULL );
        generator->m_yield_return_index = 1;
        return tmp_expression_name_1;
        yield_return_1:
        Nuitka_RestoreHeap( generator_heap->yield_tmps, &tmp_called_name_1, sizeof(PyObject *), &tmp_mvar_value_1, sizeof(PyObject *), &tmp_args_element_name_1, sizeof(PyObject *), NULL );
        if ( yield_return_value == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &generator_heap->exception_type, &generator_heap->exception_value, &generator_heap->exception_tb );


            generator_heap->exception_lineno = 243;
            generator_heap->type_description_1 = "No";
            goto try_except_handler_2;
        }
        tmp_yield_result_1 = yield_return_value;
    }
    if ( CONSIDER_THREADING() == false )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &generator_heap->exception_type, &generator_heap->exception_value, &generator_heap->exception_tb );


        generator_heap->exception_lineno = 243;
        generator_heap->type_description_1 = "No";
        goto try_except_handler_2;
    }
    goto loop_start_1;
    loop_end_1:;
    goto try_end_1;
    // Exception handler code:
    try_except_handler_2:;
    generator_heap->exception_keeper_type_1 = generator_heap->exception_type;
    generator_heap->exception_keeper_value_1 = generator_heap->exception_value;
    generator_heap->exception_keeper_tb_1 = generator_heap->exception_tb;
    generator_heap->exception_keeper_lineno_1 = generator_heap->exception_lineno;
    generator_heap->exception_type = NULL;
    generator_heap->exception_value = NULL;
    generator_heap->exception_tb = NULL;
    generator_heap->exception_lineno = 0;

    Py_XDECREF( generator_heap->tmp_iter_value_0 );
    generator_heap->tmp_iter_value_0 = NULL;

    // Re-raise.
    generator_heap->exception_type = generator_heap->exception_keeper_type_1;
    generator_heap->exception_value = generator_heap->exception_keeper_value_1;
    generator_heap->exception_tb = generator_heap->exception_keeper_tb_1;
    generator_heap->exception_lineno = generator_heap->exception_keeper_lineno_1;

    goto frame_exception_exit_1;
    // End of try:
    try_end_1:;

    Nuitka_Frame_MarkAsNotExecuting( generator->m_frame );

#if PYTHON_VERSION >= 370
    Py_CLEAR( generator->m_exc_state.exc_type );
    Py_CLEAR( generator->m_exc_state.exc_value );
    Py_CLEAR( generator->m_exc_state.exc_traceback );
#elif PYTHON_VERSION >= 300
    Py_CLEAR( generator->m_frame->m_frame.f_exc_type );
    Py_CLEAR( generator->m_frame->m_frame.f_exc_value );
    Py_CLEAR( generator->m_frame->m_frame.f_exc_traceback );
#endif

    // Allow re-use of the frame again.
    Py_DECREF( generator->m_frame );
    goto frame_no_exception_1;

    frame_exception_exit_1:;

    // If it's not an exit exception, consider and create a traceback for it.
    if ( !EXCEPTION_MATCH_GENERATOR( generator_heap->exception_type ) )
    {
        if ( generator_heap->exception_tb == NULL )
        {
            generator_heap->exception_tb = MAKE_TRACEBACK( generator->m_frame, generator_heap->exception_lineno );
        }
        else if ( generator_heap->exception_tb->tb_frame != &generator->m_frame->m_frame )
        {
            generator_heap->exception_tb = ADD_TRACEBACK( generator_heap->exception_tb, generator->m_frame, generator_heap->exception_lineno );
        }

        Nuitka_Frame_AttachLocals(
            (struct Nuitka_FrameObject *)generator->m_frame,
            generator_heap->type_description_1,
            NULL,
            generator_heap->var_stuff
        );


        // Release cached frame.
        if ( generator->m_frame == cache_m_frame )
        {
            Py_DECREF( generator->m_frame );
        }
        cache_m_frame = NULL;

        assertFrameObject( generator->m_frame );
    }

#if PYTHON_VERSION >= 370
    Py_CLEAR( generator->m_exc_state.exc_type );
    Py_CLEAR( generator->m_exc_state.exc_value );
    Py_CLEAR( generator->m_exc_state.exc_traceback );
#elif PYTHON_VERSION >= 300
    Py_CLEAR( generator->m_frame->m_frame.f_exc_type );
    Py_CLEAR( generator->m_frame->m_frame.f_exc_value );
    Py_CLEAR( generator->m_frame->m_frame.f_exc_traceback );
#endif

    Py_DECREF( generator->m_frame );

    // Return the error.
    goto try_except_handler_1;

    frame_no_exception_1:;
    goto try_end_2;
    // Exception handler code:
    try_except_handler_1:;
    generator_heap->exception_keeper_type_2 = generator_heap->exception_type;
    generator_heap->exception_keeper_value_2 = generator_heap->exception_value;
    generator_heap->exception_keeper_tb_2 = generator_heap->exception_tb;
    generator_heap->exception_keeper_lineno_2 = generator_heap->exception_lineno;
    generator_heap->exception_type = NULL;
    generator_heap->exception_value = NULL;
    generator_heap->exception_tb = NULL;
    generator_heap->exception_lineno = 0;

    Py_XDECREF( generator_heap->var_stuff );
    generator_heap->var_stuff = NULL;

    // Re-raise.
    generator_heap->exception_type = generator_heap->exception_keeper_type_2;
    generator_heap->exception_value = generator_heap->exception_keeper_value_2;
    generator_heap->exception_tb = generator_heap->exception_keeper_tb_2;
    generator_heap->exception_lineno = generator_heap->exception_keeper_lineno_2;

    goto function_exception_exit;
    // End of try:
    try_end_2:;
    Py_XDECREF( generator_heap->tmp_iter_value_0 );
    generator_heap->tmp_iter_value_0 = NULL;

    Py_XDECREF( generator_heap->var_stuff );
    generator_heap->var_stuff = NULL;



    return NULL;

    function_exception_exit:
    assert( generator_heap->exception_type );
    RESTORE_ERROR_OCCURRED( generator_heap->exception_type, generator_heap->exception_value, generator_heap->exception_tb );

    return NULL;

}

static PyObject *_strptime$$$function_10___seqToRE$$$genexpr_1_genexpr_maker( void )
{
    return Nuitka_Generator_New(
        _strptime$$$function_10___seqToRE$$$genexpr_1_genexpr_context,
        module__strptime,
        const_str_angle_genexpr,
#if PYTHON_VERSION >= 350
        const_str_digest_707eac0e96936c05e0f90929dff6d017,
#endif
        codeobj_87025261fc36446f5ab92e2a5cab2c5f,
        1,
        sizeof(struct _strptime$$$function_10___seqToRE$$$genexpr_1_genexpr_locals)
    );
}


static PyObject *impl__strptime$$$function_11_pattern( struct Nuitka_FunctionObject const *self, PyObject **python_pars )
{
    // Preserve error status for checks
#ifndef __NUITKA_NO_ASSERT__
    NUITKA_MAY_BE_UNUSED bool had_error = ERROR_OCCURRED();
#endif

    // Local variable declarations.
    PyObject *par_self = python_pars[ 0 ];
    PyObject *par_format = python_pars[ 1 ];
    PyObject *var_processed_format = NULL;
    PyObject *var_regex_chars = NULL;
    PyObject *var_whitespace_replacement = NULL;
    PyObject *var_directive_index = NULL;
    struct Nuitka_FrameObject *frame_f044b6a80b1a45ed0fb018deca7c413c;
    NUITKA_MAY_BE_UNUSED char const *type_description_1 = NULL;
    PyObject *exception_type = NULL;
    PyObject *exception_value = NULL;
    PyTracebackObject *exception_tb = NULL;
    NUITKA_MAY_BE_UNUSED int exception_lineno = 0;
    int tmp_res;
    PyObject *tmp_return_value = NULL;
    static struct Nuitka_FrameObject *cache_frame_f044b6a80b1a45ed0fb018deca7c413c = NULL;
    PyObject *exception_keeper_type_1;
    PyObject *exception_keeper_value_1;
    PyTracebackObject *exception_keeper_tb_1;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_1;

    // Actual function body.
    {
        PyObject *tmp_assign_source_1;
        tmp_assign_source_1 = const_str_empty;
        assert( var_processed_format == NULL );
        Py_INCREF( tmp_assign_source_1 );
        var_processed_format = tmp_assign_source_1;
    }
    // Tried code:
    MAKE_OR_REUSE_FRAME( cache_frame_f044b6a80b1a45ed0fb018deca7c413c, codeobj_f044b6a80b1a45ed0fb018deca7c413c, module__strptime, sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *) );
    frame_f044b6a80b1a45ed0fb018deca7c413c = cache_frame_f044b6a80b1a45ed0fb018deca7c413c;

    // Push the new frame as the currently active one.
    pushFrameStack( frame_f044b6a80b1a45ed0fb018deca7c413c );

    // Mark the frame object as in use, ref count 1 will be up for reuse.
    assert( Py_REFCNT( frame_f044b6a80b1a45ed0fb018deca7c413c ) == 2 ); // Frame stack

    // Framed code:
    {
        PyObject *tmp_assign_source_2;
        PyObject *tmp_called_name_1;
        PyObject *tmp_mvar_value_1;
        tmp_mvar_value_1 = GET_STRING_DICT_VALUE( moduledict__strptime, (Nuitka_StringObject *)const_str_plain_re_compile );

        if (unlikely( tmp_mvar_value_1 == NULL ))
        {
            tmp_mvar_value_1 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_re_compile );
        }

        if ( tmp_mvar_value_1 == NULL )
        {

            exception_type = PyExc_NameError;
            Py_INCREF( exception_type );
            exception_value = PyUnicode_FromFormat( "name '%s' is not defined", "re_compile" );
            exception_tb = NULL;
            NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
            CHAIN_EXCEPTION( exception_value );

            exception_lineno = 258;
            type_description_1 = "oooooo";
            goto frame_exception_exit_1;
        }

        tmp_called_name_1 = tmp_mvar_value_1;
        frame_f044b6a80b1a45ed0fb018deca7c413c->m_frame.f_lineno = 258;
        tmp_assign_source_2 = CALL_FUNCTION_WITH_ARGS1( tmp_called_name_1, &PyTuple_GET_ITEM( const_tuple_str_digest_5adc0e3d875a5ff48f1e38880ecc9bce_tuple, 0 ) );

        if ( tmp_assign_source_2 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 258;
            type_description_1 = "oooooo";
            goto frame_exception_exit_1;
        }
        assert( var_regex_chars == NULL );
        var_regex_chars = tmp_assign_source_2;
    }
    {
        PyObject *tmp_assign_source_3;
        PyObject *tmp_called_instance_1;
        PyObject *tmp_args_element_name_1;
        PyObject *tmp_args_element_name_2;
        CHECK_OBJECT( var_regex_chars );
        tmp_called_instance_1 = var_regex_chars;
        tmp_args_element_name_1 = const_str_digest_2fe71b40974e92f7a4ed2043bfd21fa9;
        CHECK_OBJECT( par_format );
        tmp_args_element_name_2 = par_format;
        frame_f044b6a80b1a45ed0fb018deca7c413c->m_frame.f_lineno = 259;
        {
            PyObject *call_args[] = { tmp_args_element_name_1, tmp_args_element_name_2 };
            tmp_assign_source_3 = CALL_METHOD_WITH_ARGS2( tmp_called_instance_1, const_str_plain_sub, call_args );
        }

        if ( tmp_assign_source_3 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 259;
            type_description_1 = "oooooo";
            goto frame_exception_exit_1;
        }
        {
            PyObject *old = par_format;
            assert( old != NULL );
            par_format = tmp_assign_source_3;
            Py_DECREF( old );
        }

    }
    {
        PyObject *tmp_assign_source_4;
        PyObject *tmp_called_name_2;
        PyObject *tmp_mvar_value_2;
        tmp_mvar_value_2 = GET_STRING_DICT_VALUE( moduledict__strptime, (Nuitka_StringObject *)const_str_plain_re_compile );

        if (unlikely( tmp_mvar_value_2 == NULL ))
        {
            tmp_mvar_value_2 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_re_compile );
        }

        if ( tmp_mvar_value_2 == NULL )
        {

            exception_type = PyExc_NameError;
            Py_INCREF( exception_type );
            exception_value = PyUnicode_FromFormat( "name '%s' is not defined", "re_compile" );
            exception_tb = NULL;
            NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
            CHAIN_EXCEPTION( exception_value );

            exception_lineno = 260;
            type_description_1 = "oooooo";
            goto frame_exception_exit_1;
        }

        tmp_called_name_2 = tmp_mvar_value_2;
        frame_f044b6a80b1a45ed0fb018deca7c413c->m_frame.f_lineno = 260;
        tmp_assign_source_4 = CALL_FUNCTION_WITH_ARGS1( tmp_called_name_2, &PyTuple_GET_ITEM( const_tuple_str_digest_2717a74e8094c62311bf53472f4de0ca_tuple, 0 ) );

        if ( tmp_assign_source_4 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 260;
            type_description_1 = "oooooo";
            goto frame_exception_exit_1;
        }
        assert( var_whitespace_replacement == NULL );
        var_whitespace_replacement = tmp_assign_source_4;
    }
    {
        PyObject *tmp_assign_source_5;
        PyObject *tmp_called_instance_2;
        PyObject *tmp_args_element_name_3;
        PyObject *tmp_args_element_name_4;
        CHECK_OBJECT( var_whitespace_replacement );
        tmp_called_instance_2 = var_whitespace_replacement;
        tmp_args_element_name_3 = const_str_digest_0869db2b508bb219994b41be3e755c80;
        CHECK_OBJECT( par_format );
        tmp_args_element_name_4 = par_format;
        frame_f044b6a80b1a45ed0fb018deca7c413c->m_frame.f_lineno = 261;
        {
            PyObject *call_args[] = { tmp_args_element_name_3, tmp_args_element_name_4 };
            tmp_assign_source_5 = CALL_METHOD_WITH_ARGS2( tmp_called_instance_2, const_str_plain_sub, call_args );
        }

        if ( tmp_assign_source_5 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 261;
            type_description_1 = "oooooo";
            goto frame_exception_exit_1;
        }
        {
            PyObject *old = par_format;
            assert( old != NULL );
            par_format = tmp_assign_source_5;
            Py_DECREF( old );
        }

    }
    loop_start_1:;
    {
        nuitka_bool tmp_condition_result_1;
        PyObject *tmp_compexpr_left_1;
        PyObject *tmp_compexpr_right_1;
        tmp_compexpr_left_1 = const_str_chr_37;
        CHECK_OBJECT( par_format );
        tmp_compexpr_right_1 = par_format;
        tmp_res = PySequence_Contains( tmp_compexpr_right_1, tmp_compexpr_left_1 );
        if ( tmp_res == -1 )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 262;
            type_description_1 = "oooooo";
            goto frame_exception_exit_1;
        }
        tmp_condition_result_1 = ( tmp_res == 0 ) ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
        if ( tmp_condition_result_1 == NUITKA_BOOL_TRUE )
        {
            goto branch_yes_1;
        }
        else
        {
            goto branch_no_1;
        }
        branch_yes_1:;
        goto loop_end_1;
        branch_no_1:;
    }
    {
        PyObject *tmp_assign_source_6;
        PyObject *tmp_left_name_1;
        PyObject *tmp_called_instance_3;
        PyObject *tmp_right_name_1;
        CHECK_OBJECT( par_format );
        tmp_called_instance_3 = par_format;
        frame_f044b6a80b1a45ed0fb018deca7c413c->m_frame.f_lineno = 263;
        tmp_left_name_1 = CALL_METHOD_WITH_ARGS1( tmp_called_instance_3, const_str_plain_index, &PyTuple_GET_ITEM( const_tuple_str_chr_37_tuple, 0 ) );

        if ( tmp_left_name_1 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 263;
            type_description_1 = "oooooo";
            goto frame_exception_exit_1;
        }
        tmp_right_name_1 = const_int_pos_1;
        tmp_assign_source_6 = BINARY_OPERATION_ADD_OBJECT_LONG( tmp_left_name_1, tmp_right_name_1 );
        Py_DECREF( tmp_left_name_1 );
        if ( tmp_assign_source_6 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 263;
            type_description_1 = "oooooo";
            goto frame_exception_exit_1;
        }
        {
            PyObject *old = var_directive_index;
            var_directive_index = tmp_assign_source_6;
            Py_XDECREF( old );
        }

    }
    {
        PyObject *tmp_assign_source_7;
        PyObject *tmp_left_name_2;
        PyObject *tmp_right_name_2;
        PyObject *tmp_tuple_element_1;
        PyObject *tmp_subscribed_name_1;
        PyObject *tmp_subscript_name_1;
        PyObject *tmp_start_name_1;
        PyObject *tmp_stop_name_1;
        PyObject *tmp_left_name_3;
        PyObject *tmp_right_name_3;
        PyObject *tmp_step_name_1;
        PyObject *tmp_subscribed_name_2;
        PyObject *tmp_subscript_name_2;
        PyObject *tmp_subscribed_name_3;
        PyObject *tmp_subscript_name_3;
        tmp_left_name_2 = const_str_digest_83f99027874593222e45fae974a2895d;
        CHECK_OBJECT( var_processed_format );
        tmp_tuple_element_1 = var_processed_format;
        tmp_right_name_2 = PyTuple_New( 3 );
        Py_INCREF( tmp_tuple_element_1 );
        PyTuple_SET_ITEM( tmp_right_name_2, 0, tmp_tuple_element_1 );
        CHECK_OBJECT( par_format );
        tmp_subscribed_name_1 = par_format;
        tmp_start_name_1 = Py_None;
        CHECK_OBJECT( var_directive_index );
        tmp_left_name_3 = var_directive_index;
        tmp_right_name_3 = const_int_pos_1;
        tmp_stop_name_1 = BINARY_OPERATION_SUB( tmp_left_name_3, tmp_right_name_3 );
        if ( tmp_stop_name_1 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
            Py_DECREF( tmp_right_name_2 );

            exception_lineno = 265;
            type_description_1 = "oooooo";
            goto frame_exception_exit_1;
        }
        tmp_step_name_1 = Py_None;
        tmp_subscript_name_1 = MAKE_SLICEOBJ3( tmp_start_name_1, tmp_stop_name_1, tmp_step_name_1 );
        Py_DECREF( tmp_stop_name_1 );
        assert( !(tmp_subscript_name_1 == NULL) );
        tmp_tuple_element_1 = LOOKUP_SUBSCRIPT( tmp_subscribed_name_1, tmp_subscript_name_1 );
        Py_DECREF( tmp_subscript_name_1 );
        if ( tmp_tuple_element_1 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
            Py_DECREF( tmp_right_name_2 );

            exception_lineno = 265;
            type_description_1 = "oooooo";
            goto frame_exception_exit_1;
        }
        PyTuple_SET_ITEM( tmp_right_name_2, 1, tmp_tuple_element_1 );
        CHECK_OBJECT( par_self );
        tmp_subscribed_name_2 = par_self;
        CHECK_OBJECT( par_format );
        tmp_subscribed_name_3 = par_format;
        CHECK_OBJECT( var_directive_index );
        tmp_subscript_name_3 = var_directive_index;
        tmp_subscript_name_2 = LOOKUP_SUBSCRIPT( tmp_subscribed_name_3, tmp_subscript_name_3 );
        if ( tmp_subscript_name_2 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
            Py_DECREF( tmp_right_name_2 );

            exception_lineno = 266;
            type_description_1 = "oooooo";
            goto frame_exception_exit_1;
        }
        tmp_tuple_element_1 = LOOKUP_SUBSCRIPT( tmp_subscribed_name_2, tmp_subscript_name_2 );
        Py_DECREF( tmp_subscript_name_2 );
        if ( tmp_tuple_element_1 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
            Py_DECREF( tmp_right_name_2 );

            exception_lineno = 266;
            type_description_1 = "oooooo";
            goto frame_exception_exit_1;
        }
        PyTuple_SET_ITEM( tmp_right_name_2, 2, tmp_tuple_element_1 );
        tmp_assign_source_7 = BINARY_OPERATION_REMAINDER( tmp_left_name_2, tmp_right_name_2 );
        Py_DECREF( tmp_right_name_2 );
        if ( tmp_assign_source_7 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 264;
            type_description_1 = "oooooo";
            goto frame_exception_exit_1;
        }
        {
            PyObject *old = var_processed_format;
            assert( old != NULL );
            var_processed_format = tmp_assign_source_7;
            Py_DECREF( old );
        }

    }
    {
        PyObject *tmp_assign_source_8;
        PyObject *tmp_subscribed_name_4;
        PyObject *tmp_subscript_name_4;
        PyObject *tmp_start_name_2;
        PyObject *tmp_left_name_4;
        PyObject *tmp_right_name_4;
        PyObject *tmp_stop_name_2;
        PyObject *tmp_step_name_2;
        CHECK_OBJECT( par_format );
        tmp_subscribed_name_4 = par_format;
        CHECK_OBJECT( var_directive_index );
        tmp_left_name_4 = var_directive_index;
        tmp_right_name_4 = const_int_pos_1;
        tmp_start_name_2 = BINARY_OPERATION_ADD_OBJECT_LONG( tmp_left_name_4, tmp_right_name_4 );
        if ( tmp_start_name_2 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 267;
            type_description_1 = "oooooo";
            goto frame_exception_exit_1;
        }
        tmp_stop_name_2 = Py_None;
        tmp_step_name_2 = Py_None;
        tmp_subscript_name_4 = MAKE_SLICEOBJ3( tmp_start_name_2, tmp_stop_name_2, tmp_step_name_2 );
        Py_DECREF( tmp_start_name_2 );
        assert( !(tmp_subscript_name_4 == NULL) );
        tmp_assign_source_8 = LOOKUP_SUBSCRIPT( tmp_subscribed_name_4, tmp_subscript_name_4 );
        Py_DECREF( tmp_subscript_name_4 );
        if ( tmp_assign_source_8 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 267;
            type_description_1 = "oooooo";
            goto frame_exception_exit_1;
        }
        {
            PyObject *old = par_format;
            assert( old != NULL );
            par_format = tmp_assign_source_8;
            Py_DECREF( old );
        }

    }
    if ( CONSIDER_THREADING() == false )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 262;
        type_description_1 = "oooooo";
        goto frame_exception_exit_1;
    }
    goto loop_start_1;
    loop_end_1:;
    {
        PyObject *tmp_left_name_5;
        PyObject *tmp_right_name_5;
        PyObject *tmp_tuple_element_2;
        tmp_left_name_5 = const_str_digest_d76462298f66c95b4d3ee22e9427a916;
        CHECK_OBJECT( var_processed_format );
        tmp_tuple_element_2 = var_processed_format;
        tmp_right_name_5 = PyTuple_New( 2 );
        Py_INCREF( tmp_tuple_element_2 );
        PyTuple_SET_ITEM( tmp_right_name_5, 0, tmp_tuple_element_2 );
        CHECK_OBJECT( par_format );
        tmp_tuple_element_2 = par_format;
        Py_INCREF( tmp_tuple_element_2 );
        PyTuple_SET_ITEM( tmp_right_name_5, 1, tmp_tuple_element_2 );
        tmp_return_value = BINARY_OPERATION_REMAINDER( tmp_left_name_5, tmp_right_name_5 );
        Py_DECREF( tmp_right_name_5 );
        if ( tmp_return_value == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 268;
            type_description_1 = "oooooo";
            goto frame_exception_exit_1;
        }
        goto frame_return_exit_1;
    }

#if 0
    RESTORE_FRAME_EXCEPTION( frame_f044b6a80b1a45ed0fb018deca7c413c );
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto frame_no_exception_1;

    frame_return_exit_1:;
#if 0
    RESTORE_FRAME_EXCEPTION( frame_f044b6a80b1a45ed0fb018deca7c413c );
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto try_return_handler_1;

    frame_exception_exit_1:;

#if 0
    RESTORE_FRAME_EXCEPTION( frame_f044b6a80b1a45ed0fb018deca7c413c );
#endif

    if ( exception_tb == NULL )
    {
        exception_tb = MAKE_TRACEBACK( frame_f044b6a80b1a45ed0fb018deca7c413c, exception_lineno );
    }
    else if ( exception_tb->tb_frame != &frame_f044b6a80b1a45ed0fb018deca7c413c->m_frame )
    {
        exception_tb = ADD_TRACEBACK( exception_tb, frame_f044b6a80b1a45ed0fb018deca7c413c, exception_lineno );
    }

    // Attachs locals to frame if any.
    Nuitka_Frame_AttachLocals(
        (struct Nuitka_FrameObject *)frame_f044b6a80b1a45ed0fb018deca7c413c,
        type_description_1,
        par_self,
        par_format,
        var_processed_format,
        var_regex_chars,
        var_whitespace_replacement,
        var_directive_index
    );


    // Release cached frame.
    if ( frame_f044b6a80b1a45ed0fb018deca7c413c == cache_frame_f044b6a80b1a45ed0fb018deca7c413c )
    {
        Py_DECREF( frame_f044b6a80b1a45ed0fb018deca7c413c );
    }
    cache_frame_f044b6a80b1a45ed0fb018deca7c413c = NULL;

    assertFrameObject( frame_f044b6a80b1a45ed0fb018deca7c413c );

    // Put the previous frame back on top.
    popFrameStack();

    // Return the error.
    goto try_except_handler_1;

    frame_no_exception_1:;
    // tried codes exits in all cases
    NUITKA_CANNOT_GET_HERE( _strptime$$$function_11_pattern );
    return NULL;
    // Return handler code:
    try_return_handler_1:;
    CHECK_OBJECT( (PyObject *)par_self );
    Py_DECREF( par_self );
    par_self = NULL;

    CHECK_OBJECT( (PyObject *)par_format );
    Py_DECREF( par_format );
    par_format = NULL;

    CHECK_OBJECT( (PyObject *)var_processed_format );
    Py_DECREF( var_processed_format );
    var_processed_format = NULL;

    CHECK_OBJECT( (PyObject *)var_regex_chars );
    Py_DECREF( var_regex_chars );
    var_regex_chars = NULL;

    CHECK_OBJECT( (PyObject *)var_whitespace_replacement );
    Py_DECREF( var_whitespace_replacement );
    var_whitespace_replacement = NULL;

    Py_XDECREF( var_directive_index );
    var_directive_index = NULL;

    goto function_return_exit;
    // Exception handler code:
    try_except_handler_1:;
    exception_keeper_type_1 = exception_type;
    exception_keeper_value_1 = exception_value;
    exception_keeper_tb_1 = exception_tb;
    exception_keeper_lineno_1 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    CHECK_OBJECT( (PyObject *)par_self );
    Py_DECREF( par_self );
    par_self = NULL;

    Py_XDECREF( par_format );
    par_format = NULL;

    Py_XDECREF( var_processed_format );
    var_processed_format = NULL;

    Py_XDECREF( var_regex_chars );
    var_regex_chars = NULL;

    Py_XDECREF( var_whitespace_replacement );
    var_whitespace_replacement = NULL;

    Py_XDECREF( var_directive_index );
    var_directive_index = NULL;

    // Re-raise.
    exception_type = exception_keeper_type_1;
    exception_value = exception_keeper_value_1;
    exception_tb = exception_keeper_tb_1;
    exception_lineno = exception_keeper_lineno_1;

    goto function_exception_exit;
    // End of try:

    // Return statement must have exited already.
    NUITKA_CANNOT_GET_HERE( _strptime$$$function_11_pattern );
    return NULL;

function_exception_exit:
    assert( exception_type );
    RESTORE_ERROR_OCCURRED( exception_type, exception_value, exception_tb );

    return NULL;

function_return_exit:
   // Function cleanup code if any.


   // Actual function exit with return value, making sure we did not make
   // the error status worse despite non-NULL return.
   CHECK_OBJECT( tmp_return_value );
   assert( had_error || !ERROR_OCCURRED() );
   return tmp_return_value;
}


static PyObject *impl__strptime$$$function_12_compile( struct Nuitka_FunctionObject const *self, PyObject **python_pars )
{
    // Preserve error status for checks
#ifndef __NUITKA_NO_ASSERT__
    NUITKA_MAY_BE_UNUSED bool had_error = ERROR_OCCURRED();
#endif

    // Local variable declarations.
    PyObject *par_self = python_pars[ 0 ];
    PyObject *par_format = python_pars[ 1 ];
    struct Nuitka_FrameObject *frame_40f40fb82a3cce28816beecf489ed964;
    NUITKA_MAY_BE_UNUSED char const *type_description_1 = NULL;
    PyObject *tmp_return_value = NULL;
    PyObject *exception_type = NULL;
    PyObject *exception_value = NULL;
    PyTracebackObject *exception_tb = NULL;
    NUITKA_MAY_BE_UNUSED int exception_lineno = 0;
    static struct Nuitka_FrameObject *cache_frame_40f40fb82a3cce28816beecf489ed964 = NULL;
    PyObject *exception_keeper_type_1;
    PyObject *exception_keeper_value_1;
    PyTracebackObject *exception_keeper_tb_1;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_1;

    // Actual function body.
    // Tried code:
    MAKE_OR_REUSE_FRAME( cache_frame_40f40fb82a3cce28816beecf489ed964, codeobj_40f40fb82a3cce28816beecf489ed964, module__strptime, sizeof(void *)+sizeof(void *) );
    frame_40f40fb82a3cce28816beecf489ed964 = cache_frame_40f40fb82a3cce28816beecf489ed964;

    // Push the new frame as the currently active one.
    pushFrameStack( frame_40f40fb82a3cce28816beecf489ed964 );

    // Mark the frame object as in use, ref count 1 will be up for reuse.
    assert( Py_REFCNT( frame_40f40fb82a3cce28816beecf489ed964 ) == 2 ); // Frame stack

    // Framed code:
    {
        PyObject *tmp_called_name_1;
        PyObject *tmp_mvar_value_1;
        PyObject *tmp_args_element_name_1;
        PyObject *tmp_called_instance_1;
        PyObject *tmp_args_element_name_2;
        PyObject *tmp_args_element_name_3;
        PyObject *tmp_mvar_value_2;
        tmp_mvar_value_1 = GET_STRING_DICT_VALUE( moduledict__strptime, (Nuitka_StringObject *)const_str_plain_re_compile );

        if (unlikely( tmp_mvar_value_1 == NULL ))
        {
            tmp_mvar_value_1 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_re_compile );
        }

        if ( tmp_mvar_value_1 == NULL )
        {

            exception_type = PyExc_NameError;
            Py_INCREF( exception_type );
            exception_value = PyUnicode_FromFormat( "name '%s' is not defined", "re_compile" );
            exception_tb = NULL;
            NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
            CHAIN_EXCEPTION( exception_value );

            exception_lineno = 272;
            type_description_1 = "oo";
            goto frame_exception_exit_1;
        }

        tmp_called_name_1 = tmp_mvar_value_1;
        CHECK_OBJECT( par_self );
        tmp_called_instance_1 = par_self;
        CHECK_OBJECT( par_format );
        tmp_args_element_name_2 = par_format;
        frame_40f40fb82a3cce28816beecf489ed964->m_frame.f_lineno = 272;
        {
            PyObject *call_args[] = { tmp_args_element_name_2 };
            tmp_args_element_name_1 = CALL_METHOD_WITH_ARGS1( tmp_called_instance_1, const_str_plain_pattern, call_args );
        }

        if ( tmp_args_element_name_1 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 272;
            type_description_1 = "oo";
            goto frame_exception_exit_1;
        }
        tmp_mvar_value_2 = GET_STRING_DICT_VALUE( moduledict__strptime, (Nuitka_StringObject *)const_str_plain_IGNORECASE );

        if (unlikely( tmp_mvar_value_2 == NULL ))
        {
            tmp_mvar_value_2 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_IGNORECASE );
        }

        if ( tmp_mvar_value_2 == NULL )
        {
            Py_DECREF( tmp_args_element_name_1 );
            exception_type = PyExc_NameError;
            Py_INCREF( exception_type );
            exception_value = PyUnicode_FromFormat( "name '%s' is not defined", "IGNORECASE" );
            exception_tb = NULL;
            NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
            CHAIN_EXCEPTION( exception_value );

            exception_lineno = 272;
            type_description_1 = "oo";
            goto frame_exception_exit_1;
        }

        tmp_args_element_name_3 = tmp_mvar_value_2;
        frame_40f40fb82a3cce28816beecf489ed964->m_frame.f_lineno = 272;
        {
            PyObject *call_args[] = { tmp_args_element_name_1, tmp_args_element_name_3 };
            tmp_return_value = CALL_FUNCTION_WITH_ARGS2( tmp_called_name_1, call_args );
        }

        Py_DECREF( tmp_args_element_name_1 );
        if ( tmp_return_value == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 272;
            type_description_1 = "oo";
            goto frame_exception_exit_1;
        }
        goto frame_return_exit_1;
    }

#if 0
    RESTORE_FRAME_EXCEPTION( frame_40f40fb82a3cce28816beecf489ed964 );
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto frame_no_exception_1;

    frame_return_exit_1:;
#if 0
    RESTORE_FRAME_EXCEPTION( frame_40f40fb82a3cce28816beecf489ed964 );
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto try_return_handler_1;

    frame_exception_exit_1:;

#if 0
    RESTORE_FRAME_EXCEPTION( frame_40f40fb82a3cce28816beecf489ed964 );
#endif

    if ( exception_tb == NULL )
    {
        exception_tb = MAKE_TRACEBACK( frame_40f40fb82a3cce28816beecf489ed964, exception_lineno );
    }
    else if ( exception_tb->tb_frame != &frame_40f40fb82a3cce28816beecf489ed964->m_frame )
    {
        exception_tb = ADD_TRACEBACK( exception_tb, frame_40f40fb82a3cce28816beecf489ed964, exception_lineno );
    }

    // Attachs locals to frame if any.
    Nuitka_Frame_AttachLocals(
        (struct Nuitka_FrameObject *)frame_40f40fb82a3cce28816beecf489ed964,
        type_description_1,
        par_self,
        par_format
    );


    // Release cached frame.
    if ( frame_40f40fb82a3cce28816beecf489ed964 == cache_frame_40f40fb82a3cce28816beecf489ed964 )
    {
        Py_DECREF( frame_40f40fb82a3cce28816beecf489ed964 );
    }
    cache_frame_40f40fb82a3cce28816beecf489ed964 = NULL;

    assertFrameObject( frame_40f40fb82a3cce28816beecf489ed964 );

    // Put the previous frame back on top.
    popFrameStack();

    // Return the error.
    goto try_except_handler_1;

    frame_no_exception_1:;
    // tried codes exits in all cases
    NUITKA_CANNOT_GET_HERE( _strptime$$$function_12_compile );
    return NULL;
    // Return handler code:
    try_return_handler_1:;
    CHECK_OBJECT( (PyObject *)par_self );
    Py_DECREF( par_self );
    par_self = NULL;

    CHECK_OBJECT( (PyObject *)par_format );
    Py_DECREF( par_format );
    par_format = NULL;

    goto function_return_exit;
    // Exception handler code:
    try_except_handler_1:;
    exception_keeper_type_1 = exception_type;
    exception_keeper_value_1 = exception_value;
    exception_keeper_tb_1 = exception_tb;
    exception_keeper_lineno_1 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    CHECK_OBJECT( (PyObject *)par_self );
    Py_DECREF( par_self );
    par_self = NULL;

    CHECK_OBJECT( (PyObject *)par_format );
    Py_DECREF( par_format );
    par_format = NULL;

    // Re-raise.
    exception_type = exception_keeper_type_1;
    exception_value = exception_keeper_value_1;
    exception_tb = exception_keeper_tb_1;
    exception_lineno = exception_keeper_lineno_1;

    goto function_exception_exit;
    // End of try:

    // Return statement must have exited already.
    NUITKA_CANNOT_GET_HERE( _strptime$$$function_12_compile );
    return NULL;

function_exception_exit:
    assert( exception_type );
    RESTORE_ERROR_OCCURRED( exception_type, exception_value, exception_tb );

    return NULL;

function_return_exit:
   // Function cleanup code if any.


   // Actual function exit with return value, making sure we did not make
   // the error status worse despite non-NULL return.
   CHECK_OBJECT( tmp_return_value );
   assert( had_error || !ERROR_OCCURRED() );
   return tmp_return_value;
}


static PyObject *impl__strptime$$$function_13__calc_julian_from_U_or_W( struct Nuitka_FunctionObject const *self, PyObject **python_pars )
{
    // Preserve error status for checks
#ifndef __NUITKA_NO_ASSERT__
    NUITKA_MAY_BE_UNUSED bool had_error = ERROR_OCCURRED();
#endif

    // Local variable declarations.
    PyObject *par_year = python_pars[ 0 ];
    PyObject *par_week_of_year = python_pars[ 1 ];
    PyObject *par_day_of_week = python_pars[ 2 ];
    PyObject *par_week_starts_Mon = python_pars[ 3 ];
    PyObject *var_first_weekday = NULL;
    PyObject *var_week_0_length = NULL;
    PyObject *var_days_to_week = NULL;
    struct Nuitka_FrameObject *frame_69d48dfe50bd36d23301b5b816c9a25b;
    NUITKA_MAY_BE_UNUSED char const *type_description_1 = NULL;
    PyObject *exception_type = NULL;
    PyObject *exception_value = NULL;
    PyTracebackObject *exception_tb = NULL;
    NUITKA_MAY_BE_UNUSED int exception_lineno = 0;
    int tmp_res;
    PyObject *tmp_return_value = NULL;
    static struct Nuitka_FrameObject *cache_frame_69d48dfe50bd36d23301b5b816c9a25b = NULL;
    PyObject *exception_keeper_type_1;
    PyObject *exception_keeper_value_1;
    PyTracebackObject *exception_keeper_tb_1;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_1;

    // Actual function body.
    // Tried code:
    MAKE_OR_REUSE_FRAME( cache_frame_69d48dfe50bd36d23301b5b816c9a25b, codeobj_69d48dfe50bd36d23301b5b816c9a25b, module__strptime, sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *) );
    frame_69d48dfe50bd36d23301b5b816c9a25b = cache_frame_69d48dfe50bd36d23301b5b816c9a25b;

    // Push the new frame as the currently active one.
    pushFrameStack( frame_69d48dfe50bd36d23301b5b816c9a25b );

    // Mark the frame object as in use, ref count 1 will be up for reuse.
    assert( Py_REFCNT( frame_69d48dfe50bd36d23301b5b816c9a25b ) == 2 ); // Frame stack

    // Framed code:
    {
        PyObject *tmp_assign_source_1;
        PyObject *tmp_called_instance_1;
        PyObject *tmp_called_name_1;
        PyObject *tmp_mvar_value_1;
        PyObject *tmp_args_element_name_1;
        PyObject *tmp_args_element_name_2;
        PyObject *tmp_args_element_name_3;
        tmp_mvar_value_1 = GET_STRING_DICT_VALUE( moduledict__strptime, (Nuitka_StringObject *)const_str_plain_datetime_date );

        if (unlikely( tmp_mvar_value_1 == NULL ))
        {
            tmp_mvar_value_1 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_datetime_date );
        }

        if ( tmp_mvar_value_1 == NULL )
        {

            exception_type = PyExc_NameError;
            Py_INCREF( exception_type );
            exception_value = PyUnicode_FromFormat( "name '%s' is not defined", "datetime_date" );
            exception_tb = NULL;
            NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
            CHAIN_EXCEPTION( exception_value );

            exception_lineno = 285;
            type_description_1 = "ooooooo";
            goto frame_exception_exit_1;
        }

        tmp_called_name_1 = tmp_mvar_value_1;
        CHECK_OBJECT( par_year );
        tmp_args_element_name_1 = par_year;
        tmp_args_element_name_2 = const_int_pos_1;
        tmp_args_element_name_3 = const_int_pos_1;
        frame_69d48dfe50bd36d23301b5b816c9a25b->m_frame.f_lineno = 285;
        {
            PyObject *call_args[] = { tmp_args_element_name_1, tmp_args_element_name_2, tmp_args_element_name_3 };
            tmp_called_instance_1 = CALL_FUNCTION_WITH_ARGS3( tmp_called_name_1, call_args );
        }

        if ( tmp_called_instance_1 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 285;
            type_description_1 = "ooooooo";
            goto frame_exception_exit_1;
        }
        frame_69d48dfe50bd36d23301b5b816c9a25b->m_frame.f_lineno = 285;
        tmp_assign_source_1 = CALL_METHOD_NO_ARGS( tmp_called_instance_1, const_str_plain_weekday );
        Py_DECREF( tmp_called_instance_1 );
        if ( tmp_assign_source_1 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 285;
            type_description_1 = "ooooooo";
            goto frame_exception_exit_1;
        }
        assert( var_first_weekday == NULL );
        var_first_weekday = tmp_assign_source_1;
    }
    {
        nuitka_bool tmp_condition_result_1;
        PyObject *tmp_operand_name_1;
        CHECK_OBJECT( par_week_starts_Mon );
        tmp_operand_name_1 = par_week_starts_Mon;
        tmp_res = CHECK_IF_TRUE( tmp_operand_name_1 );
        if ( tmp_res == -1 )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 289;
            type_description_1 = "ooooooo";
            goto frame_exception_exit_1;
        }
        tmp_condition_result_1 = ( tmp_res == 0 ) ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
        if ( tmp_condition_result_1 == NUITKA_BOOL_TRUE )
        {
            goto branch_yes_1;
        }
        else
        {
            goto branch_no_1;
        }
        branch_yes_1:;
        {
            PyObject *tmp_assign_source_2;
            PyObject *tmp_left_name_1;
            PyObject *tmp_left_name_2;
            PyObject *tmp_right_name_1;
            PyObject *tmp_right_name_2;
            CHECK_OBJECT( var_first_weekday );
            tmp_left_name_2 = var_first_weekday;
            tmp_right_name_1 = const_int_pos_1;
            tmp_left_name_1 = BINARY_OPERATION_ADD_OBJECT_LONG( tmp_left_name_2, tmp_right_name_1 );
            if ( tmp_left_name_1 == NULL )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 290;
                type_description_1 = "ooooooo";
                goto frame_exception_exit_1;
            }
            tmp_right_name_2 = const_int_pos_7;
            tmp_assign_source_2 = BINARY_OPERATION_REMAINDER( tmp_left_name_1, tmp_right_name_2 );
            Py_DECREF( tmp_left_name_1 );
            if ( tmp_assign_source_2 == NULL )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 290;
                type_description_1 = "ooooooo";
                goto frame_exception_exit_1;
            }
            {
                PyObject *old = var_first_weekday;
                assert( old != NULL );
                var_first_weekday = tmp_assign_source_2;
                Py_DECREF( old );
            }

        }
        {
            PyObject *tmp_assign_source_3;
            PyObject *tmp_left_name_3;
            PyObject *tmp_left_name_4;
            PyObject *tmp_right_name_3;
            PyObject *tmp_right_name_4;
            CHECK_OBJECT( par_day_of_week );
            tmp_left_name_4 = par_day_of_week;
            tmp_right_name_3 = const_int_pos_1;
            tmp_left_name_3 = BINARY_OPERATION_ADD_OBJECT_LONG( tmp_left_name_4, tmp_right_name_3 );
            if ( tmp_left_name_3 == NULL )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 291;
                type_description_1 = "ooooooo";
                goto frame_exception_exit_1;
            }
            tmp_right_name_4 = const_int_pos_7;
            tmp_assign_source_3 = BINARY_OPERATION_REMAINDER( tmp_left_name_3, tmp_right_name_4 );
            Py_DECREF( tmp_left_name_3 );
            if ( tmp_assign_source_3 == NULL )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 291;
                type_description_1 = "ooooooo";
                goto frame_exception_exit_1;
            }
            {
                PyObject *old = par_day_of_week;
                assert( old != NULL );
                par_day_of_week = tmp_assign_source_3;
                Py_DECREF( old );
            }

        }
        branch_no_1:;
    }
    {
        PyObject *tmp_assign_source_4;
        PyObject *tmp_left_name_5;
        PyObject *tmp_left_name_6;
        PyObject *tmp_right_name_5;
        PyObject *tmp_right_name_6;
        tmp_left_name_6 = const_int_pos_7;
        CHECK_OBJECT( var_first_weekday );
        tmp_right_name_5 = var_first_weekday;
        tmp_left_name_5 = BINARY_OPERATION_SUB( tmp_left_name_6, tmp_right_name_5 );
        if ( tmp_left_name_5 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 294;
            type_description_1 = "ooooooo";
            goto frame_exception_exit_1;
        }
        tmp_right_name_6 = const_int_pos_7;
        tmp_assign_source_4 = BINARY_OPERATION_REMAINDER( tmp_left_name_5, tmp_right_name_6 );
        Py_DECREF( tmp_left_name_5 );
        if ( tmp_assign_source_4 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 294;
            type_description_1 = "ooooooo";
            goto frame_exception_exit_1;
        }
        assert( var_week_0_length == NULL );
        var_week_0_length = tmp_assign_source_4;
    }
    {
        nuitka_bool tmp_condition_result_2;
        PyObject *tmp_compexpr_left_1;
        PyObject *tmp_compexpr_right_1;
        CHECK_OBJECT( par_week_of_year );
        tmp_compexpr_left_1 = par_week_of_year;
        tmp_compexpr_right_1 = const_int_0;
        tmp_res = RICH_COMPARE_BOOL_EQ_OBJECT_OBJECT( tmp_compexpr_left_1, tmp_compexpr_right_1 );
        if ( tmp_res == -1 )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 295;
            type_description_1 = "ooooooo";
            goto frame_exception_exit_1;
        }
        tmp_condition_result_2 = ( tmp_res != 0 ) ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
        if ( tmp_condition_result_2 == NUITKA_BOOL_TRUE )
        {
            goto branch_yes_2;
        }
        else
        {
            goto branch_no_2;
        }
        branch_yes_2:;
        {
            PyObject *tmp_left_name_7;
            PyObject *tmp_left_name_8;
            PyObject *tmp_right_name_7;
            PyObject *tmp_right_name_8;
            tmp_left_name_8 = const_int_pos_1;
            CHECK_OBJECT( par_day_of_week );
            tmp_right_name_7 = par_day_of_week;
            tmp_left_name_7 = BINARY_OPERATION_ADD_LONG_OBJECT( tmp_left_name_8, tmp_right_name_7 );
            if ( tmp_left_name_7 == NULL )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 296;
                type_description_1 = "ooooooo";
                goto frame_exception_exit_1;
            }
            CHECK_OBJECT( var_first_weekday );
            tmp_right_name_8 = var_first_weekday;
            tmp_return_value = BINARY_OPERATION_SUB( tmp_left_name_7, tmp_right_name_8 );
            Py_DECREF( tmp_left_name_7 );
            if ( tmp_return_value == NULL )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 296;
                type_description_1 = "ooooooo";
                goto frame_exception_exit_1;
            }
            goto frame_return_exit_1;
        }
        goto branch_end_2;
        branch_no_2:;
        {
            PyObject *tmp_assign_source_5;
            PyObject *tmp_left_name_9;
            PyObject *tmp_right_name_9;
            PyObject *tmp_left_name_10;
            PyObject *tmp_right_name_10;
            PyObject *tmp_left_name_11;
            PyObject *tmp_right_name_11;
            CHECK_OBJECT( var_week_0_length );
            tmp_left_name_9 = var_week_0_length;
            tmp_left_name_10 = const_int_pos_7;
            CHECK_OBJECT( par_week_of_year );
            tmp_left_name_11 = par_week_of_year;
            tmp_right_name_11 = const_int_pos_1;
            tmp_right_name_10 = BINARY_OPERATION_SUB( tmp_left_name_11, tmp_right_name_11 );
            if ( tmp_right_name_10 == NULL )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 298;
                type_description_1 = "ooooooo";
                goto frame_exception_exit_1;
            }
            tmp_right_name_9 = BINARY_OPERATION_MUL( tmp_left_name_10, tmp_right_name_10 );
            Py_DECREF( tmp_right_name_10 );
            if ( tmp_right_name_9 == NULL )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 298;
                type_description_1 = "ooooooo";
                goto frame_exception_exit_1;
            }
            tmp_assign_source_5 = BINARY_OPERATION_ADD_OBJECT_OBJECT( tmp_left_name_9, tmp_right_name_9 );
            Py_DECREF( tmp_right_name_9 );
            if ( tmp_assign_source_5 == NULL )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 298;
                type_description_1 = "ooooooo";
                goto frame_exception_exit_1;
            }
            assert( var_days_to_week == NULL );
            var_days_to_week = tmp_assign_source_5;
        }
        {
            PyObject *tmp_left_name_12;
            PyObject *tmp_left_name_13;
            PyObject *tmp_right_name_12;
            PyObject *tmp_right_name_13;
            tmp_left_name_13 = const_int_pos_1;
            CHECK_OBJECT( var_days_to_week );
            tmp_right_name_12 = var_days_to_week;
            tmp_left_name_12 = BINARY_OPERATION_ADD_LONG_OBJECT( tmp_left_name_13, tmp_right_name_12 );
            if ( tmp_left_name_12 == NULL )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 299;
                type_description_1 = "ooooooo";
                goto frame_exception_exit_1;
            }
            CHECK_OBJECT( par_day_of_week );
            tmp_right_name_13 = par_day_of_week;
            tmp_return_value = BINARY_OPERATION_ADD_OBJECT_OBJECT( tmp_left_name_12, tmp_right_name_13 );
            Py_DECREF( tmp_left_name_12 );
            if ( tmp_return_value == NULL )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 299;
                type_description_1 = "ooooooo";
                goto frame_exception_exit_1;
            }
            goto frame_return_exit_1;
        }
        branch_end_2:;
    }

#if 0
    RESTORE_FRAME_EXCEPTION( frame_69d48dfe50bd36d23301b5b816c9a25b );
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto frame_no_exception_1;

    frame_return_exit_1:;
#if 0
    RESTORE_FRAME_EXCEPTION( frame_69d48dfe50bd36d23301b5b816c9a25b );
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto try_return_handler_1;

    frame_exception_exit_1:;

#if 0
    RESTORE_FRAME_EXCEPTION( frame_69d48dfe50bd36d23301b5b816c9a25b );
#endif

    if ( exception_tb == NULL )
    {
        exception_tb = MAKE_TRACEBACK( frame_69d48dfe50bd36d23301b5b816c9a25b, exception_lineno );
    }
    else if ( exception_tb->tb_frame != &frame_69d48dfe50bd36d23301b5b816c9a25b->m_frame )
    {
        exception_tb = ADD_TRACEBACK( exception_tb, frame_69d48dfe50bd36d23301b5b816c9a25b, exception_lineno );
    }

    // Attachs locals to frame if any.
    Nuitka_Frame_AttachLocals(
        (struct Nuitka_FrameObject *)frame_69d48dfe50bd36d23301b5b816c9a25b,
        type_description_1,
        par_year,
        par_week_of_year,
        par_day_of_week,
        par_week_starts_Mon,
        var_first_weekday,
        var_week_0_length,
        var_days_to_week
    );


    // Release cached frame.
    if ( frame_69d48dfe50bd36d23301b5b816c9a25b == cache_frame_69d48dfe50bd36d23301b5b816c9a25b )
    {
        Py_DECREF( frame_69d48dfe50bd36d23301b5b816c9a25b );
    }
    cache_frame_69d48dfe50bd36d23301b5b816c9a25b = NULL;

    assertFrameObject( frame_69d48dfe50bd36d23301b5b816c9a25b );

    // Put the previous frame back on top.
    popFrameStack();

    // Return the error.
    goto try_except_handler_1;

    frame_no_exception_1:;
    // tried codes exits in all cases
    NUITKA_CANNOT_GET_HERE( _strptime$$$function_13__calc_julian_from_U_or_W );
    return NULL;
    // Return handler code:
    try_return_handler_1:;
    CHECK_OBJECT( (PyObject *)par_year );
    Py_DECREF( par_year );
    par_year = NULL;

    CHECK_OBJECT( (PyObject *)par_week_of_year );
    Py_DECREF( par_week_of_year );
    par_week_of_year = NULL;

    CHECK_OBJECT( (PyObject *)par_day_of_week );
    Py_DECREF( par_day_of_week );
    par_day_of_week = NULL;

    CHECK_OBJECT( (PyObject *)par_week_starts_Mon );
    Py_DECREF( par_week_starts_Mon );
    par_week_starts_Mon = NULL;

    CHECK_OBJECT( (PyObject *)var_first_weekday );
    Py_DECREF( var_first_weekday );
    var_first_weekday = NULL;

    CHECK_OBJECT( (PyObject *)var_week_0_length );
    Py_DECREF( var_week_0_length );
    var_week_0_length = NULL;

    Py_XDECREF( var_days_to_week );
    var_days_to_week = NULL;

    goto function_return_exit;
    // Exception handler code:
    try_except_handler_1:;
    exception_keeper_type_1 = exception_type;
    exception_keeper_value_1 = exception_value;
    exception_keeper_tb_1 = exception_tb;
    exception_keeper_lineno_1 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    CHECK_OBJECT( (PyObject *)par_year );
    Py_DECREF( par_year );
    par_year = NULL;

    CHECK_OBJECT( (PyObject *)par_week_of_year );
    Py_DECREF( par_week_of_year );
    par_week_of_year = NULL;

    Py_XDECREF( par_day_of_week );
    par_day_of_week = NULL;

    CHECK_OBJECT( (PyObject *)par_week_starts_Mon );
    Py_DECREF( par_week_starts_Mon );
    par_week_starts_Mon = NULL;

    Py_XDECREF( var_first_weekday );
    var_first_weekday = NULL;

    Py_XDECREF( var_week_0_length );
    var_week_0_length = NULL;

    Py_XDECREF( var_days_to_week );
    var_days_to_week = NULL;

    // Re-raise.
    exception_type = exception_keeper_type_1;
    exception_value = exception_keeper_value_1;
    exception_tb = exception_keeper_tb_1;
    exception_lineno = exception_keeper_lineno_1;

    goto function_exception_exit;
    // End of try:

    // Return statement must have exited already.
    NUITKA_CANNOT_GET_HERE( _strptime$$$function_13__calc_julian_from_U_or_W );
    return NULL;

function_exception_exit:
    assert( exception_type );
    RESTORE_ERROR_OCCURRED( exception_type, exception_value, exception_tb );

    return NULL;

function_return_exit:
   // Function cleanup code if any.


   // Actual function exit with return value, making sure we did not make
   // the error status worse despite non-NULL return.
   CHECK_OBJECT( tmp_return_value );
   assert( had_error || !ERROR_OCCURRED() );
   return tmp_return_value;
}


static PyObject *impl__strptime$$$function_14__calc_julian_from_V( struct Nuitka_FunctionObject const *self, PyObject **python_pars )
{
    // Preserve error status for checks
#ifndef __NUITKA_NO_ASSERT__
    NUITKA_MAY_BE_UNUSED bool had_error = ERROR_OCCURRED();
#endif

    // Local variable declarations.
    PyObject *par_iso_year = python_pars[ 0 ];
    PyObject *par_iso_week = python_pars[ 1 ];
    PyObject *par_iso_weekday = python_pars[ 2 ];
    PyObject *var_correction = NULL;
    PyObject *var_ordinal = NULL;
    struct Nuitka_FrameObject *frame_6213f678fd90493715fea7b571319cd2;
    NUITKA_MAY_BE_UNUSED char const *type_description_1 = NULL;
    PyObject *exception_type = NULL;
    PyObject *exception_value = NULL;
    PyTracebackObject *exception_tb = NULL;
    NUITKA_MAY_BE_UNUSED int exception_lineno = 0;
    int tmp_res;
    bool tmp_result;
    static struct Nuitka_FrameObject *cache_frame_6213f678fd90493715fea7b571319cd2 = NULL;
    PyObject *tmp_return_value = NULL;
    PyObject *exception_keeper_type_1;
    PyObject *exception_keeper_value_1;
    PyTracebackObject *exception_keeper_tb_1;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_1;

    // Actual function body.
    // Tried code:
    MAKE_OR_REUSE_FRAME( cache_frame_6213f678fd90493715fea7b571319cd2, codeobj_6213f678fd90493715fea7b571319cd2, module__strptime, sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *) );
    frame_6213f678fd90493715fea7b571319cd2 = cache_frame_6213f678fd90493715fea7b571319cd2;

    // Push the new frame as the currently active one.
    pushFrameStack( frame_6213f678fd90493715fea7b571319cd2 );

    // Mark the frame object as in use, ref count 1 will be up for reuse.
    assert( Py_REFCNT( frame_6213f678fd90493715fea7b571319cd2 ) == 2 ); // Frame stack

    // Framed code:
    {
        PyObject *tmp_assign_source_1;
        PyObject *tmp_left_name_1;
        PyObject *tmp_called_instance_1;
        PyObject *tmp_called_name_1;
        PyObject *tmp_mvar_value_1;
        PyObject *tmp_args_element_name_1;
        PyObject *tmp_args_element_name_2;
        PyObject *tmp_args_element_name_3;
        PyObject *tmp_right_name_1;
        tmp_mvar_value_1 = GET_STRING_DICT_VALUE( moduledict__strptime, (Nuitka_StringObject *)const_str_plain_datetime_date );

        if (unlikely( tmp_mvar_value_1 == NULL ))
        {
            tmp_mvar_value_1 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_datetime_date );
        }

        if ( tmp_mvar_value_1 == NULL )
        {

            exception_type = PyExc_NameError;
            Py_INCREF( exception_type );
            exception_value = PyUnicode_FromFormat( "name '%s' is not defined", "datetime_date" );
            exception_tb = NULL;
            NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
            CHAIN_EXCEPTION( exception_value );

            exception_lineno = 307;
            type_description_1 = "ooooo";
            goto frame_exception_exit_1;
        }

        tmp_called_name_1 = tmp_mvar_value_1;
        CHECK_OBJECT( par_iso_year );
        tmp_args_element_name_1 = par_iso_year;
        tmp_args_element_name_2 = const_int_pos_1;
        tmp_args_element_name_3 = const_int_pos_4;
        frame_6213f678fd90493715fea7b571319cd2->m_frame.f_lineno = 307;
        {
            PyObject *call_args[] = { tmp_args_element_name_1, tmp_args_element_name_2, tmp_args_element_name_3 };
            tmp_called_instance_1 = CALL_FUNCTION_WITH_ARGS3( tmp_called_name_1, call_args );
        }

        if ( tmp_called_instance_1 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 307;
            type_description_1 = "ooooo";
            goto frame_exception_exit_1;
        }
        frame_6213f678fd90493715fea7b571319cd2->m_frame.f_lineno = 307;
        tmp_left_name_1 = CALL_METHOD_NO_ARGS( tmp_called_instance_1, const_str_plain_isoweekday );
        Py_DECREF( tmp_called_instance_1 );
        if ( tmp_left_name_1 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 307;
            type_description_1 = "ooooo";
            goto frame_exception_exit_1;
        }
        tmp_right_name_1 = const_int_pos_3;
        tmp_assign_source_1 = BINARY_OPERATION_ADD_OBJECT_LONG( tmp_left_name_1, tmp_right_name_1 );
        Py_DECREF( tmp_left_name_1 );
        if ( tmp_assign_source_1 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 307;
            type_description_1 = "ooooo";
            goto frame_exception_exit_1;
        }
        assert( var_correction == NULL );
        var_correction = tmp_assign_source_1;
    }
    {
        PyObject *tmp_assign_source_2;
        PyObject *tmp_left_name_2;
        PyObject *tmp_left_name_3;
        PyObject *tmp_left_name_4;
        PyObject *tmp_right_name_2;
        PyObject *tmp_right_name_3;
        PyObject *tmp_right_name_4;
        CHECK_OBJECT( par_iso_week );
        tmp_left_name_4 = par_iso_week;
        tmp_right_name_2 = const_int_pos_7;
        tmp_left_name_3 = BINARY_OPERATION_MUL( tmp_left_name_4, tmp_right_name_2 );
        if ( tmp_left_name_3 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 308;
            type_description_1 = "ooooo";
            goto frame_exception_exit_1;
        }
        CHECK_OBJECT( par_iso_weekday );
        tmp_right_name_3 = par_iso_weekday;
        tmp_left_name_2 = BINARY_OPERATION_ADD_OBJECT_OBJECT( tmp_left_name_3, tmp_right_name_3 );
        Py_DECREF( tmp_left_name_3 );
        if ( tmp_left_name_2 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 308;
            type_description_1 = "ooooo";
            goto frame_exception_exit_1;
        }
        CHECK_OBJECT( var_correction );
        tmp_right_name_4 = var_correction;
        tmp_assign_source_2 = BINARY_OPERATION_SUB( tmp_left_name_2, tmp_right_name_4 );
        Py_DECREF( tmp_left_name_2 );
        if ( tmp_assign_source_2 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 308;
            type_description_1 = "ooooo";
            goto frame_exception_exit_1;
        }
        assert( var_ordinal == NULL );
        var_ordinal = tmp_assign_source_2;
    }
    {
        nuitka_bool tmp_condition_result_1;
        PyObject *tmp_compexpr_left_1;
        PyObject *tmp_compexpr_right_1;
        CHECK_OBJECT( var_ordinal );
        tmp_compexpr_left_1 = var_ordinal;
        tmp_compexpr_right_1 = const_int_pos_1;
        tmp_res = RICH_COMPARE_BOOL_LT_OBJECT_OBJECT( tmp_compexpr_left_1, tmp_compexpr_right_1 );
        if ( tmp_res == -1 )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 311;
            type_description_1 = "ooooo";
            goto frame_exception_exit_1;
        }
        tmp_condition_result_1 = ( tmp_res != 0 ) ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
        if ( tmp_condition_result_1 == NUITKA_BOOL_TRUE )
        {
            goto branch_yes_1;
        }
        else
        {
            goto branch_no_1;
        }
        branch_yes_1:;
        {
            PyObject *tmp_assign_source_3;
            PyObject *tmp_left_name_5;
            PyObject *tmp_right_name_5;
            PyObject *tmp_called_instance_2;
            PyObject *tmp_called_name_2;
            PyObject *tmp_mvar_value_2;
            PyObject *tmp_args_element_name_4;
            PyObject *tmp_args_element_name_5;
            PyObject *tmp_args_element_name_6;
            CHECK_OBJECT( var_ordinal );
            tmp_left_name_5 = var_ordinal;
            tmp_mvar_value_2 = GET_STRING_DICT_VALUE( moduledict__strptime, (Nuitka_StringObject *)const_str_plain_datetime_date );

            if (unlikely( tmp_mvar_value_2 == NULL ))
            {
                tmp_mvar_value_2 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_datetime_date );
            }

            if ( tmp_mvar_value_2 == NULL )
            {

                exception_type = PyExc_NameError;
                Py_INCREF( exception_type );
                exception_value = PyUnicode_FromFormat( "name '%s' is not defined", "datetime_date" );
                exception_tb = NULL;
                NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
                CHAIN_EXCEPTION( exception_value );

                exception_lineno = 312;
                type_description_1 = "ooooo";
                goto frame_exception_exit_1;
            }

            tmp_called_name_2 = tmp_mvar_value_2;
            CHECK_OBJECT( par_iso_year );
            tmp_args_element_name_4 = par_iso_year;
            tmp_args_element_name_5 = const_int_pos_1;
            tmp_args_element_name_6 = const_int_pos_1;
            frame_6213f678fd90493715fea7b571319cd2->m_frame.f_lineno = 312;
            {
                PyObject *call_args[] = { tmp_args_element_name_4, tmp_args_element_name_5, tmp_args_element_name_6 };
                tmp_called_instance_2 = CALL_FUNCTION_WITH_ARGS3( tmp_called_name_2, call_args );
            }

            if ( tmp_called_instance_2 == NULL )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 312;
                type_description_1 = "ooooo";
                goto frame_exception_exit_1;
            }
            frame_6213f678fd90493715fea7b571319cd2->m_frame.f_lineno = 312;
            tmp_right_name_5 = CALL_METHOD_NO_ARGS( tmp_called_instance_2, const_str_plain_toordinal );
            Py_DECREF( tmp_called_instance_2 );
            if ( tmp_right_name_5 == NULL )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 312;
                type_description_1 = "ooooo";
                goto frame_exception_exit_1;
            }
            tmp_result = BINARY_OPERATION_ADD_OBJECT_OBJECT_INPLACE( &tmp_left_name_5, tmp_right_name_5 );
            Py_DECREF( tmp_right_name_5 );
            if ( tmp_result == false )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 312;
                type_description_1 = "ooooo";
                goto frame_exception_exit_1;
            }
            tmp_assign_source_3 = tmp_left_name_5;
            var_ordinal = tmp_assign_source_3;

        }
        {
            PyObject *tmp_assign_source_4;
            PyObject *tmp_left_name_6;
            PyObject *tmp_right_name_6;
            CHECK_OBJECT( par_iso_year );
            tmp_left_name_6 = par_iso_year;
            tmp_right_name_6 = const_int_pos_1;
            tmp_result = BINARY_OPERATION_INPLACE( PyNumber_InPlaceSubtract, &tmp_left_name_6, tmp_right_name_6 );
            if ( tmp_result == false )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 313;
                type_description_1 = "ooooo";
                goto frame_exception_exit_1;
            }
            tmp_assign_source_4 = tmp_left_name_6;
            par_iso_year = tmp_assign_source_4;

        }
        {
            PyObject *tmp_assign_source_5;
            PyObject *tmp_left_name_7;
            PyObject *tmp_right_name_7;
            PyObject *tmp_called_instance_3;
            PyObject *tmp_called_name_3;
            PyObject *tmp_mvar_value_3;
            PyObject *tmp_args_element_name_7;
            PyObject *tmp_args_element_name_8;
            PyObject *tmp_args_element_name_9;
            CHECK_OBJECT( var_ordinal );
            tmp_left_name_7 = var_ordinal;
            tmp_mvar_value_3 = GET_STRING_DICT_VALUE( moduledict__strptime, (Nuitka_StringObject *)const_str_plain_datetime_date );

            if (unlikely( tmp_mvar_value_3 == NULL ))
            {
                tmp_mvar_value_3 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_datetime_date );
            }

            if ( tmp_mvar_value_3 == NULL )
            {

                exception_type = PyExc_NameError;
                Py_INCREF( exception_type );
                exception_value = PyUnicode_FromFormat( "name '%s' is not defined", "datetime_date" );
                exception_tb = NULL;
                NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
                CHAIN_EXCEPTION( exception_value );

                exception_lineno = 314;
                type_description_1 = "ooooo";
                goto frame_exception_exit_1;
            }

            tmp_called_name_3 = tmp_mvar_value_3;
            CHECK_OBJECT( par_iso_year );
            tmp_args_element_name_7 = par_iso_year;
            tmp_args_element_name_8 = const_int_pos_1;
            tmp_args_element_name_9 = const_int_pos_1;
            frame_6213f678fd90493715fea7b571319cd2->m_frame.f_lineno = 314;
            {
                PyObject *call_args[] = { tmp_args_element_name_7, tmp_args_element_name_8, tmp_args_element_name_9 };
                tmp_called_instance_3 = CALL_FUNCTION_WITH_ARGS3( tmp_called_name_3, call_args );
            }

            if ( tmp_called_instance_3 == NULL )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 314;
                type_description_1 = "ooooo";
                goto frame_exception_exit_1;
            }
            frame_6213f678fd90493715fea7b571319cd2->m_frame.f_lineno = 314;
            tmp_right_name_7 = CALL_METHOD_NO_ARGS( tmp_called_instance_3, const_str_plain_toordinal );
            Py_DECREF( tmp_called_instance_3 );
            if ( tmp_right_name_7 == NULL )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 314;
                type_description_1 = "ooooo";
                goto frame_exception_exit_1;
            }
            tmp_result = BINARY_OPERATION_INPLACE( PyNumber_InPlaceSubtract, &tmp_left_name_7, tmp_right_name_7 );
            Py_DECREF( tmp_right_name_7 );
            if ( tmp_result == false )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 314;
                type_description_1 = "ooooo";
                goto frame_exception_exit_1;
            }
            tmp_assign_source_5 = tmp_left_name_7;
            var_ordinal = tmp_assign_source_5;

        }
        branch_no_1:;
    }

#if 0
    RESTORE_FRAME_EXCEPTION( frame_6213f678fd90493715fea7b571319cd2 );
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto frame_no_exception_1;

    frame_exception_exit_1:;

#if 0
    RESTORE_FRAME_EXCEPTION( frame_6213f678fd90493715fea7b571319cd2 );
#endif

    if ( exception_tb == NULL )
    {
        exception_tb = MAKE_TRACEBACK( frame_6213f678fd90493715fea7b571319cd2, exception_lineno );
    }
    else if ( exception_tb->tb_frame != &frame_6213f678fd90493715fea7b571319cd2->m_frame )
    {
        exception_tb = ADD_TRACEBACK( exception_tb, frame_6213f678fd90493715fea7b571319cd2, exception_lineno );
    }

    // Attachs locals to frame if any.
    Nuitka_Frame_AttachLocals(
        (struct Nuitka_FrameObject *)frame_6213f678fd90493715fea7b571319cd2,
        type_description_1,
        par_iso_year,
        par_iso_week,
        par_iso_weekday,
        var_correction,
        var_ordinal
    );


    // Release cached frame.
    if ( frame_6213f678fd90493715fea7b571319cd2 == cache_frame_6213f678fd90493715fea7b571319cd2 )
    {
        Py_DECREF( frame_6213f678fd90493715fea7b571319cd2 );
    }
    cache_frame_6213f678fd90493715fea7b571319cd2 = NULL;

    assertFrameObject( frame_6213f678fd90493715fea7b571319cd2 );

    // Put the previous frame back on top.
    popFrameStack();

    // Return the error.
    goto try_except_handler_1;

    frame_no_exception_1:;
    {
        PyObject *tmp_tuple_element_1;
        CHECK_OBJECT( par_iso_year );
        tmp_tuple_element_1 = par_iso_year;
        tmp_return_value = PyTuple_New( 2 );
        Py_INCREF( tmp_tuple_element_1 );
        PyTuple_SET_ITEM( tmp_return_value, 0, tmp_tuple_element_1 );
        CHECK_OBJECT( var_ordinal );
        tmp_tuple_element_1 = var_ordinal;
        Py_INCREF( tmp_tuple_element_1 );
        PyTuple_SET_ITEM( tmp_return_value, 1, tmp_tuple_element_1 );
        goto try_return_handler_1;
    }
    // tried codes exits in all cases
    NUITKA_CANNOT_GET_HERE( _strptime$$$function_14__calc_julian_from_V );
    return NULL;
    // Return handler code:
    try_return_handler_1:;
    CHECK_OBJECT( (PyObject *)par_iso_year );
    Py_DECREF( par_iso_year );
    par_iso_year = NULL;

    CHECK_OBJECT( (PyObject *)par_iso_week );
    Py_DECREF( par_iso_week );
    par_iso_week = NULL;

    CHECK_OBJECT( (PyObject *)par_iso_weekday );
    Py_DECREF( par_iso_weekday );
    par_iso_weekday = NULL;

    CHECK_OBJECT( (PyObject *)var_correction );
    Py_DECREF( var_correction );
    var_correction = NULL;

    CHECK_OBJECT( (PyObject *)var_ordinal );
    Py_DECREF( var_ordinal );
    var_ordinal = NULL;

    goto function_return_exit;
    // Exception handler code:
    try_except_handler_1:;
    exception_keeper_type_1 = exception_type;
    exception_keeper_value_1 = exception_value;
    exception_keeper_tb_1 = exception_tb;
    exception_keeper_lineno_1 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    CHECK_OBJECT( (PyObject *)par_iso_year );
    Py_DECREF( par_iso_year );
    par_iso_year = NULL;

    CHECK_OBJECT( (PyObject *)par_iso_week );
    Py_DECREF( par_iso_week );
    par_iso_week = NULL;

    CHECK_OBJECT( (PyObject *)par_iso_weekday );
    Py_DECREF( par_iso_weekday );
    par_iso_weekday = NULL;

    Py_XDECREF( var_correction );
    var_correction = NULL;

    Py_XDECREF( var_ordinal );
    var_ordinal = NULL;

    // Re-raise.
    exception_type = exception_keeper_type_1;
    exception_value = exception_keeper_value_1;
    exception_tb = exception_keeper_tb_1;
    exception_lineno = exception_keeper_lineno_1;

    goto function_exception_exit;
    // End of try:

    // Return statement must have exited already.
    NUITKA_CANNOT_GET_HERE( _strptime$$$function_14__calc_julian_from_V );
    return NULL;

function_exception_exit:
    assert( exception_type );
    RESTORE_ERROR_OCCURRED( exception_type, exception_value, exception_tb );

    return NULL;

function_return_exit:
   // Function cleanup code if any.


   // Actual function exit with return value, making sure we did not make
   // the error status worse despite non-NULL return.
   CHECK_OBJECT( tmp_return_value );
   assert( had_error || !ERROR_OCCURRED() );
   return tmp_return_value;
}


static PyObject *impl__strptime$$$function_15__strptime( struct Nuitka_FunctionObject const *self, PyObject **python_pars )
{
    // Preserve error status for checks
#ifndef __NUITKA_NO_ASSERT__
    NUITKA_MAY_BE_UNUSED bool had_error = ERROR_OCCURRED();
#endif

    // Local variable declarations.
    PyObject *par_data_string = python_pars[ 0 ];
    PyObject *par_format = python_pars[ 1 ];
    PyObject *var_index = NULL;
    PyObject *var_arg = NULL;
    PyObject *var_msg = NULL;
    PyObject *var_locale_time = NULL;
    PyObject *var_format_regex = NULL;
    PyObject *var_err = NULL;
    PyObject *var_bad_directive = NULL;
    PyObject *var_found = NULL;
    PyObject *var_iso_year = NULL;
    PyObject *var_year = NULL;
    PyObject *var_month = NULL;
    PyObject *var_day = NULL;
    PyObject *var_hour = NULL;
    PyObject *var_minute = NULL;
    PyObject *var_second = NULL;
    PyObject *var_fraction = NULL;
    PyObject *var_tz = NULL;
    PyObject *var_gmtoff = NULL;
    PyObject *var_gmtoff_fraction = NULL;
    PyObject *var_iso_week = NULL;
    PyObject *var_week_of_year = NULL;
    PyObject *var_week_of_year_start = NULL;
    PyObject *var_weekday = NULL;
    PyObject *var_julian = NULL;
    PyObject *var_found_dict = NULL;
    PyObject *var_group_key = NULL;
    PyObject *var_ampm = NULL;
    PyObject *var_s = NULL;
    PyObject *var_z = NULL;
    PyObject *var_hours = NULL;
    PyObject *var_minutes = NULL;
    PyObject *var_seconds = NULL;
    PyObject *var_gmtoff_remainder = NULL;
    PyObject *var_gmtoff_remainder_padding = NULL;
    PyObject *var_found_zone = NULL;
    PyObject *var_value = NULL;
    PyObject *var_tz_values = NULL;
    nuitka_bool var_leap_year_fix = NUITKA_BOOL_UNASSIGNED;
    PyObject *var_week_starts_Mon = NULL;
    PyObject *var_yday = NULL;
    PyObject *var_datetime_result = NULL;
    PyObject *var_tzname = NULL;
    PyObject *tmp_for_loop_1__for_iterator = NULL;
    PyObject *tmp_for_loop_1__iter_value = NULL;
    PyObject *tmp_for_loop_2__for_iterator = NULL;
    PyObject *tmp_for_loop_2__iter_value = NULL;
    PyObject *tmp_for_loop_3__for_iterator = NULL;
    PyObject *tmp_for_loop_3__iter_value = NULL;
    PyObject *tmp_tuple_unpack_1__element_1 = NULL;
    PyObject *tmp_tuple_unpack_1__element_2 = NULL;
    PyObject *tmp_tuple_unpack_1__source_iter = NULL;
    PyObject *tmp_tuple_unpack_2__element_1 = NULL;
    PyObject *tmp_tuple_unpack_2__element_2 = NULL;
    PyObject *tmp_tuple_unpack_2__source_iter = NULL;
    PyObject *tmp_tuple_unpack_3__element_1 = NULL;
    PyObject *tmp_tuple_unpack_3__element_2 = NULL;
    PyObject *tmp_tuple_unpack_3__source_iter = NULL;
    PyObject *tmp_with_1__enter = NULL;
    PyObject *tmp_with_1__exit = NULL;
    nuitka_bool tmp_with_1__indicator = NUITKA_BOOL_UNASSIGNED;
    PyObject *tmp_with_1__source = NULL;
    struct Nuitka_FrameObject *frame_285d3548e213aa4c5d6aef1855a305f1;
    NUITKA_MAY_BE_UNUSED char const *type_description_1 = NULL;
    PyObject *exception_type = NULL;
    PyObject *exception_value = NULL;
    PyTracebackObject *exception_tb = NULL;
    NUITKA_MAY_BE_UNUSED int exception_lineno = 0;
    PyObject *tmp_iterator_attempt;
    PyObject *exception_keeper_type_1;
    PyObject *exception_keeper_value_1;
    PyTracebackObject *exception_keeper_tb_1;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_1;
    PyObject *exception_keeper_type_2;
    PyObject *exception_keeper_value_2;
    PyTracebackObject *exception_keeper_tb_2;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_2;
    int tmp_res;
    PyObject *exception_keeper_type_3;
    PyObject *exception_keeper_value_3;
    PyTracebackObject *exception_keeper_tb_3;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_3;
    PyObject *exception_keeper_type_4;
    PyObject *exception_keeper_value_4;
    PyTracebackObject *exception_keeper_tb_4;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_4;
    PyObject *exception_preserved_type_1;
    PyObject *exception_preserved_value_1;
    PyTracebackObject *exception_preserved_tb_1;
    PyObject *exception_keeper_type_5;
    PyObject *exception_keeper_value_5;
    PyTracebackObject *exception_keeper_tb_5;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_5;
    bool tmp_result;
    PyObject *exception_keeper_type_6;
    PyObject *exception_keeper_value_6;
    PyTracebackObject *exception_keeper_tb_6;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_6;
    PyObject *exception_keeper_type_7;
    PyObject *exception_keeper_value_7;
    PyTracebackObject *exception_keeper_tb_7;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_7;
    PyObject *exception_preserved_type_2;
    PyObject *exception_preserved_value_2;
    PyTracebackObject *exception_preserved_tb_2;
    PyObject *exception_keeper_type_8;
    PyObject *exception_keeper_value_8;
    PyTracebackObject *exception_keeper_tb_8;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_8;
    PyObject *exception_keeper_type_9;
    PyObject *exception_keeper_value_9;
    PyTracebackObject *exception_keeper_tb_9;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_9;
    PyObject *exception_keeper_type_10;
    PyObject *exception_keeper_value_10;
    PyTracebackObject *exception_keeper_tb_10;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_10;
    PyObject *exception_keeper_type_11;
    PyObject *exception_keeper_value_11;
    PyTracebackObject *exception_keeper_tb_11;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_11;
    PyObject *exception_keeper_type_12;
    PyObject *exception_keeper_value_12;
    PyTracebackObject *exception_keeper_tb_12;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_12;
    PyObject *exception_keeper_type_13;
    PyObject *exception_keeper_value_13;
    PyTracebackObject *exception_keeper_tb_13;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_13;
    PyObject *exception_keeper_type_14;
    PyObject *exception_keeper_value_14;
    PyTracebackObject *exception_keeper_tb_14;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_14;
    PyObject *exception_keeper_type_15;
    PyObject *exception_keeper_value_15;
    PyTracebackObject *exception_keeper_tb_15;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_15;
    PyObject *exception_keeper_type_16;
    PyObject *exception_keeper_value_16;
    PyTracebackObject *exception_keeper_tb_16;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_16;
    PyObject *tmp_return_value = NULL;
    static struct Nuitka_FrameObject *cache_frame_285d3548e213aa4c5d6aef1855a305f1 = NULL;
    PyObject *exception_keeper_type_17;
    PyObject *exception_keeper_value_17;
    PyTracebackObject *exception_keeper_tb_17;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_17;

    // Actual function body.
    // Tried code:
    MAKE_OR_REUSE_FRAME( cache_frame_285d3548e213aa4c5d6aef1855a305f1, codeobj_285d3548e213aa4c5d6aef1855a305f1, module__strptime, sizeof(nuitka_bool)+sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *) );
    frame_285d3548e213aa4c5d6aef1855a305f1 = cache_frame_285d3548e213aa4c5d6aef1855a305f1;

    // Push the new frame as the currently active one.
    pushFrameStack( frame_285d3548e213aa4c5d6aef1855a305f1 );

    // Mark the frame object as in use, ref count 1 will be up for reuse.
    assert( Py_REFCNT( frame_285d3548e213aa4c5d6aef1855a305f1 ) == 2 ); // Frame stack

    // Framed code:
    {
        PyObject *tmp_assign_source_1;
        PyObject *tmp_iter_arg_1;
        PyObject *tmp_called_name_1;
        PyObject *tmp_args_element_name_1;
        PyObject *tmp_list_element_1;
        tmp_called_name_1 = (PyObject *)&PyEnum_Type;
        CHECK_OBJECT( par_data_string );
        tmp_list_element_1 = par_data_string;
        tmp_args_element_name_1 = PyList_New( 2 );
        Py_INCREF( tmp_list_element_1 );
        PyList_SET_ITEM( tmp_args_element_name_1, 0, tmp_list_element_1 );
        CHECK_OBJECT( par_format );
        tmp_list_element_1 = par_format;
        Py_INCREF( tmp_list_element_1 );
        PyList_SET_ITEM( tmp_args_element_name_1, 1, tmp_list_element_1 );
        frame_285d3548e213aa4c5d6aef1855a305f1->m_frame.f_lineno = 323;
        {
            PyObject *call_args[] = { tmp_args_element_name_1 };
            tmp_iter_arg_1 = CALL_FUNCTION_WITH_ARGS1( tmp_called_name_1, call_args );
        }

        Py_DECREF( tmp_args_element_name_1 );
        if ( tmp_iter_arg_1 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 323;
            type_description_1 = "oooooooooooooooooooooooooooooooooooooooboooo";
            goto frame_exception_exit_1;
        }
        tmp_assign_source_1 = MAKE_ITERATOR( tmp_iter_arg_1 );
        Py_DECREF( tmp_iter_arg_1 );
        if ( tmp_assign_source_1 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 323;
            type_description_1 = "oooooooooooooooooooooooooooooooooooooooboooo";
            goto frame_exception_exit_1;
        }
        assert( tmp_for_loop_1__for_iterator == NULL );
        tmp_for_loop_1__for_iterator = tmp_assign_source_1;
    }
    // Tried code:
    loop_start_1:;
    {
        PyObject *tmp_next_source_1;
        PyObject *tmp_assign_source_2;
        CHECK_OBJECT( tmp_for_loop_1__for_iterator );
        tmp_next_source_1 = tmp_for_loop_1__for_iterator;
        tmp_assign_source_2 = ITERATOR_NEXT( tmp_next_source_1 );
        if ( tmp_assign_source_2 == NULL )
        {
            if ( CHECK_AND_CLEAR_STOP_ITERATION_OCCURRED() )
            {

                goto loop_end_1;
            }
            else
            {

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
                type_description_1 = "oooooooooooooooooooooooooooooooooooooooboooo";
                exception_lineno = 323;
                goto try_except_handler_2;
            }
        }

        {
            PyObject *old = tmp_for_loop_1__iter_value;
            tmp_for_loop_1__iter_value = tmp_assign_source_2;
            Py_XDECREF( old );
        }

    }
    // Tried code:
    {
        PyObject *tmp_assign_source_3;
        PyObject *tmp_iter_arg_2;
        CHECK_OBJECT( tmp_for_loop_1__iter_value );
        tmp_iter_arg_2 = tmp_for_loop_1__iter_value;
        tmp_assign_source_3 = MAKE_UNPACK_ITERATOR( tmp_iter_arg_2 );
        if ( tmp_assign_source_3 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 323;
            type_description_1 = "oooooooooooooooooooooooooooooooooooooooboooo";
            goto try_except_handler_3;
        }
        {
            PyObject *old = tmp_tuple_unpack_1__source_iter;
            tmp_tuple_unpack_1__source_iter = tmp_assign_source_3;
            Py_XDECREF( old );
        }

    }
    // Tried code:
    {
        PyObject *tmp_assign_source_4;
        PyObject *tmp_unpack_1;
        CHECK_OBJECT( tmp_tuple_unpack_1__source_iter );
        tmp_unpack_1 = tmp_tuple_unpack_1__source_iter;
        tmp_assign_source_4 = UNPACK_NEXT( tmp_unpack_1, 0, 2 );
        if ( tmp_assign_source_4 == NULL )
        {
            if ( !ERROR_OCCURRED() )
            {
                exception_type = PyExc_StopIteration;
                Py_INCREF( exception_type );
                exception_value = NULL;
                exception_tb = NULL;
            }
            else
            {
                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
            }


            type_description_1 = "oooooooooooooooooooooooooooooooooooooooboooo";
            exception_lineno = 323;
            goto try_except_handler_4;
        }
        {
            PyObject *old = tmp_tuple_unpack_1__element_1;
            tmp_tuple_unpack_1__element_1 = tmp_assign_source_4;
            Py_XDECREF( old );
        }

    }
    {
        PyObject *tmp_assign_source_5;
        PyObject *tmp_unpack_2;
        CHECK_OBJECT( tmp_tuple_unpack_1__source_iter );
        tmp_unpack_2 = tmp_tuple_unpack_1__source_iter;
        tmp_assign_source_5 = UNPACK_NEXT( tmp_unpack_2, 1, 2 );
        if ( tmp_assign_source_5 == NULL )
        {
            if ( !ERROR_OCCURRED() )
            {
                exception_type = PyExc_StopIteration;
                Py_INCREF( exception_type );
                exception_value = NULL;
                exception_tb = NULL;
            }
            else
            {
                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
            }


            type_description_1 = "oooooooooooooooooooooooooooooooooooooooboooo";
            exception_lineno = 323;
            goto try_except_handler_4;
        }
        {
            PyObject *old = tmp_tuple_unpack_1__element_2;
            tmp_tuple_unpack_1__element_2 = tmp_assign_source_5;
            Py_XDECREF( old );
        }

    }
    {
        PyObject *tmp_iterator_name_1;
        CHECK_OBJECT( tmp_tuple_unpack_1__source_iter );
        tmp_iterator_name_1 = tmp_tuple_unpack_1__source_iter;
        // Check if iterator has left-over elements.
        CHECK_OBJECT( tmp_iterator_name_1 ); assert( HAS_ITERNEXT( tmp_iterator_name_1 ) );

        tmp_iterator_attempt = (*Py_TYPE( tmp_iterator_name_1 )->tp_iternext)( tmp_iterator_name_1 );

        if (likely( tmp_iterator_attempt == NULL ))
        {
            PyObject *error = GET_ERROR_OCCURRED();

            if ( error != NULL )
            {
                if ( EXCEPTION_MATCH_BOOL_SINGLE( error, PyExc_StopIteration ))
                {
                    CLEAR_ERROR_OCCURRED();
                }
                else
                {
                    FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );

                    type_description_1 = "oooooooooooooooooooooooooooooooooooooooboooo";
                    exception_lineno = 323;
                    goto try_except_handler_4;
                }
            }
        }
        else
        {
            Py_DECREF( tmp_iterator_attempt );

            // TODO: Could avoid PyErr_Format.
#if PYTHON_VERSION < 300
            PyErr_Format( PyExc_ValueError, "too many values to unpack" );
#else
            PyErr_Format( PyExc_ValueError, "too many values to unpack (expected 2)" );
#endif
            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );

            type_description_1 = "oooooooooooooooooooooooooooooooooooooooboooo";
            exception_lineno = 323;
            goto try_except_handler_4;
        }
    }
    goto try_end_1;
    // Exception handler code:
    try_except_handler_4:;
    exception_keeper_type_1 = exception_type;
    exception_keeper_value_1 = exception_value;
    exception_keeper_tb_1 = exception_tb;
    exception_keeper_lineno_1 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    CHECK_OBJECT( (PyObject *)tmp_tuple_unpack_1__source_iter );
    Py_DECREF( tmp_tuple_unpack_1__source_iter );
    tmp_tuple_unpack_1__source_iter = NULL;

    // Re-raise.
    exception_type = exception_keeper_type_1;
    exception_value = exception_keeper_value_1;
    exception_tb = exception_keeper_tb_1;
    exception_lineno = exception_keeper_lineno_1;

    goto try_except_handler_3;
    // End of try:
    try_end_1:;
    goto try_end_2;
    // Exception handler code:
    try_except_handler_3:;
    exception_keeper_type_2 = exception_type;
    exception_keeper_value_2 = exception_value;
    exception_keeper_tb_2 = exception_tb;
    exception_keeper_lineno_2 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    Py_XDECREF( tmp_tuple_unpack_1__element_1 );
    tmp_tuple_unpack_1__element_1 = NULL;

    Py_XDECREF( tmp_tuple_unpack_1__element_2 );
    tmp_tuple_unpack_1__element_2 = NULL;

    // Re-raise.
    exception_type = exception_keeper_type_2;
    exception_value = exception_keeper_value_2;
    exception_tb = exception_keeper_tb_2;
    exception_lineno = exception_keeper_lineno_2;

    goto try_except_handler_2;
    // End of try:
    try_end_2:;
    CHECK_OBJECT( (PyObject *)tmp_tuple_unpack_1__source_iter );
    Py_DECREF( tmp_tuple_unpack_1__source_iter );
    tmp_tuple_unpack_1__source_iter = NULL;

    {
        PyObject *tmp_assign_source_6;
        CHECK_OBJECT( tmp_tuple_unpack_1__element_1 );
        tmp_assign_source_6 = tmp_tuple_unpack_1__element_1;
        {
            PyObject *old = var_index;
            var_index = tmp_assign_source_6;
            Py_INCREF( var_index );
            Py_XDECREF( old );
        }

    }
    Py_XDECREF( tmp_tuple_unpack_1__element_1 );
    tmp_tuple_unpack_1__element_1 = NULL;

    {
        PyObject *tmp_assign_source_7;
        CHECK_OBJECT( tmp_tuple_unpack_1__element_2 );
        tmp_assign_source_7 = tmp_tuple_unpack_1__element_2;
        {
            PyObject *old = var_arg;
            var_arg = tmp_assign_source_7;
            Py_INCREF( var_arg );
            Py_XDECREF( old );
        }

    }
    Py_XDECREF( tmp_tuple_unpack_1__element_2 );
    tmp_tuple_unpack_1__element_2 = NULL;

    {
        nuitka_bool tmp_condition_result_1;
        PyObject *tmp_operand_name_1;
        PyObject *tmp_isinstance_inst_1;
        PyObject *tmp_isinstance_cls_1;
        CHECK_OBJECT( var_arg );
        tmp_isinstance_inst_1 = var_arg;
        tmp_isinstance_cls_1 = (PyObject *)&PyUnicode_Type;
        tmp_res = Nuitka_IsInstance( tmp_isinstance_inst_1, tmp_isinstance_cls_1 );
        if ( tmp_res == -1 )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 324;
            type_description_1 = "oooooooooooooooooooooooooooooooooooooooboooo";
            goto try_except_handler_2;
        }
        tmp_operand_name_1 = ( tmp_res != 0 ) ? Py_True : Py_False;
        tmp_res = CHECK_IF_TRUE( tmp_operand_name_1 );
        if ( tmp_res == -1 )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 324;
            type_description_1 = "oooooooooooooooooooooooooooooooooooooooboooo";
            goto try_except_handler_2;
        }
        tmp_condition_result_1 = ( tmp_res == 0 ) ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
        if ( tmp_condition_result_1 == NUITKA_BOOL_TRUE )
        {
            goto branch_yes_1;
        }
        else
        {
            goto branch_no_1;
        }
        branch_yes_1:;
        Py_XDECREF( var_msg );
        var_msg = NULL;

        {
            PyObject *tmp_raise_type_1;
            PyObject *tmp_make_exception_arg_1;
            PyObject *tmp_called_instance_1;
            PyObject *tmp_args_element_name_2;
            PyObject *tmp_args_element_name_3;
            PyObject *tmp_type_arg_1;
            tmp_called_instance_1 = const_str_digest_2eab68aacd7a38dffc3ebe30a6a082be;
            CHECK_OBJECT( var_index );
            tmp_args_element_name_2 = var_index;
            CHECK_OBJECT( var_arg );
            tmp_type_arg_1 = var_arg;
            tmp_args_element_name_3 = BUILTIN_TYPE1( tmp_type_arg_1 );
            assert( !(tmp_args_element_name_3 == NULL) );
            frame_285d3548e213aa4c5d6aef1855a305f1->m_frame.f_lineno = 326;
            {
                PyObject *call_args[] = { tmp_args_element_name_2, tmp_args_element_name_3 };
                tmp_make_exception_arg_1 = CALL_METHOD_WITH_ARGS2( tmp_called_instance_1, const_str_plain_format, call_args );
            }

            Py_DECREF( tmp_args_element_name_3 );
            if ( tmp_make_exception_arg_1 == NULL )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 326;
                type_description_1 = "oooooooooooooooooooooooooooooooooooooooboooo";
                goto try_except_handler_2;
            }
            frame_285d3548e213aa4c5d6aef1855a305f1->m_frame.f_lineno = 326;
            {
                PyObject *call_args[] = { tmp_make_exception_arg_1 };
                tmp_raise_type_1 = CALL_FUNCTION_WITH_ARGS1( PyExc_TypeError, call_args );
            }

            Py_DECREF( tmp_make_exception_arg_1 );
            assert( !(tmp_raise_type_1 == NULL) );
            exception_type = tmp_raise_type_1;
            exception_lineno = 326;
            RAISE_EXCEPTION_WITH_TYPE( &exception_type, &exception_value, &exception_tb );
            type_description_1 = "oooooooooooooooooooooooooooooooooooooooboooo";
            goto try_except_handler_2;
        }
        branch_no_1:;
    }
    if ( CONSIDER_THREADING() == false )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 323;
        type_description_1 = "oooooooooooooooooooooooooooooooooooooooboooo";
        goto try_except_handler_2;
    }
    goto loop_start_1;
    loop_end_1:;
    goto try_end_3;
    // Exception handler code:
    try_except_handler_2:;
    exception_keeper_type_3 = exception_type;
    exception_keeper_value_3 = exception_value;
    exception_keeper_tb_3 = exception_tb;
    exception_keeper_lineno_3 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    Py_XDECREF( tmp_for_loop_1__iter_value );
    tmp_for_loop_1__iter_value = NULL;

    CHECK_OBJECT( (PyObject *)tmp_for_loop_1__for_iterator );
    Py_DECREF( tmp_for_loop_1__for_iterator );
    tmp_for_loop_1__for_iterator = NULL;

    // Re-raise.
    exception_type = exception_keeper_type_3;
    exception_value = exception_keeper_value_3;
    exception_tb = exception_keeper_tb_3;
    exception_lineno = exception_keeper_lineno_3;

    goto frame_exception_exit_1;
    // End of try:
    try_end_3:;
    Py_XDECREF( tmp_for_loop_1__iter_value );
    tmp_for_loop_1__iter_value = NULL;

    CHECK_OBJECT( (PyObject *)tmp_for_loop_1__for_iterator );
    Py_DECREF( tmp_for_loop_1__for_iterator );
    tmp_for_loop_1__for_iterator = NULL;

    // Tried code:
    {
        PyObject *tmp_assign_source_8;
        PyObject *tmp_mvar_value_1;
        tmp_mvar_value_1 = GET_STRING_DICT_VALUE( moduledict__strptime, (Nuitka_StringObject *)const_str_plain__cache_lock );

        if (unlikely( tmp_mvar_value_1 == NULL ))
        {
            tmp_mvar_value_1 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain__cache_lock );
        }

        if ( tmp_mvar_value_1 == NULL )
        {

            exception_type = PyExc_NameError;
            Py_INCREF( exception_type );
            exception_value = PyUnicode_FromFormat( "name '%s' is not defined", "_cache_lock" );
            exception_tb = NULL;
            NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
            CHAIN_EXCEPTION( exception_value );

            exception_lineno = 329;
            type_description_1 = "oooooooooooooooooooooooooooooooooooooooboooo";
            goto try_except_handler_5;
        }

        tmp_assign_source_8 = tmp_mvar_value_1;
        assert( tmp_with_1__source == NULL );
        Py_INCREF( tmp_assign_source_8 );
        tmp_with_1__source = tmp_assign_source_8;
    }
    {
        PyObject *tmp_assign_source_9;
        PyObject *tmp_called_name_2;
        PyObject *tmp_source_name_1;
        CHECK_OBJECT( tmp_with_1__source );
        tmp_source_name_1 = tmp_with_1__source;
        tmp_called_name_2 = LOOKUP_SPECIAL( tmp_source_name_1, const_str_plain___enter__ );
        if ( tmp_called_name_2 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 329;
            type_description_1 = "oooooooooooooooooooooooooooooooooooooooboooo";
            goto try_except_handler_5;
        }
        frame_285d3548e213aa4c5d6aef1855a305f1->m_frame.f_lineno = 329;
        tmp_assign_source_9 = CALL_FUNCTION_NO_ARGS( tmp_called_name_2 );
        Py_DECREF( tmp_called_name_2 );
        if ( tmp_assign_source_9 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 329;
            type_description_1 = "oooooooooooooooooooooooooooooooooooooooboooo";
            goto try_except_handler_5;
        }
        assert( tmp_with_1__enter == NULL );
        tmp_with_1__enter = tmp_assign_source_9;
    }
    {
        PyObject *tmp_assign_source_10;
        PyObject *tmp_source_name_2;
        CHECK_OBJECT( tmp_with_1__source );
        tmp_source_name_2 = tmp_with_1__source;
        tmp_assign_source_10 = LOOKUP_SPECIAL( tmp_source_name_2, const_str_plain___exit__ );
        if ( tmp_assign_source_10 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 329;
            type_description_1 = "oooooooooooooooooooooooooooooooooooooooboooo";
            goto try_except_handler_5;
        }
        assert( tmp_with_1__exit == NULL );
        tmp_with_1__exit = tmp_assign_source_10;
    }
    {
        nuitka_bool tmp_assign_source_11;
        tmp_assign_source_11 = NUITKA_BOOL_TRUE;
        tmp_with_1__indicator = tmp_assign_source_11;
    }
    // Tried code:
    // Tried code:
    {
        PyObject *tmp_assign_source_12;
        PyObject *tmp_source_name_3;
        PyObject *tmp_mvar_value_2;
        tmp_mvar_value_2 = GET_STRING_DICT_VALUE( moduledict__strptime, (Nuitka_StringObject *)const_str_plain__TimeRE_cache );

        if (unlikely( tmp_mvar_value_2 == NULL ))
        {
            tmp_mvar_value_2 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain__TimeRE_cache );
        }

        if ( tmp_mvar_value_2 == NULL )
        {

            exception_type = PyExc_NameError;
            Py_INCREF( exception_type );
            exception_value = PyUnicode_FromFormat( "name '%s' is not defined", "_TimeRE_cache" );
            exception_tb = NULL;
            NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
            CHAIN_EXCEPTION( exception_value );

            exception_lineno = 330;
            type_description_1 = "oooooooooooooooooooooooooooooooooooooooboooo";
            goto try_except_handler_7;
        }

        tmp_source_name_3 = tmp_mvar_value_2;
        tmp_assign_source_12 = LOOKUP_ATTRIBUTE( tmp_source_name_3, const_str_plain_locale_time );
        if ( tmp_assign_source_12 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 330;
            type_description_1 = "oooooooooooooooooooooooooooooooooooooooboooo";
            goto try_except_handler_7;
        }
        assert( var_locale_time == NULL );
        var_locale_time = tmp_assign_source_12;
    }
    {
        nuitka_bool tmp_condition_result_2;
        int tmp_or_left_truth_1;
        nuitka_bool tmp_or_left_value_1;
        nuitka_bool tmp_or_right_value_1;
        PyObject *tmp_compexpr_left_1;
        PyObject *tmp_compexpr_right_1;
        PyObject *tmp_called_name_3;
        PyObject *tmp_mvar_value_3;
        PyObject *tmp_source_name_4;
        int tmp_or_left_truth_2;
        nuitka_bool tmp_or_left_value_2;
        nuitka_bool tmp_or_right_value_2;
        PyObject *tmp_compexpr_left_2;
        PyObject *tmp_compexpr_right_2;
        PyObject *tmp_source_name_5;
        PyObject *tmp_mvar_value_4;
        PyObject *tmp_source_name_6;
        PyObject *tmp_compexpr_left_3;
        PyObject *tmp_compexpr_right_3;
        PyObject *tmp_source_name_7;
        PyObject *tmp_mvar_value_5;
        PyObject *tmp_source_name_8;
        tmp_mvar_value_3 = GET_STRING_DICT_VALUE( moduledict__strptime, (Nuitka_StringObject *)const_str_plain__getlang );

        if (unlikely( tmp_mvar_value_3 == NULL ))
        {
            tmp_mvar_value_3 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain__getlang );
        }

        if ( tmp_mvar_value_3 == NULL )
        {

            exception_type = PyExc_NameError;
            Py_INCREF( exception_type );
            exception_value = PyUnicode_FromFormat( "name '%s' is not defined", "_getlang" );
            exception_tb = NULL;
            NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
            CHAIN_EXCEPTION( exception_value );

            exception_lineno = 331;
            type_description_1 = "oooooooooooooooooooooooooooooooooooooooboooo";
            goto try_except_handler_7;
        }

        tmp_called_name_3 = tmp_mvar_value_3;
        frame_285d3548e213aa4c5d6aef1855a305f1->m_frame.f_lineno = 331;
        tmp_compexpr_left_1 = CALL_FUNCTION_NO_ARGS( tmp_called_name_3 );
        if ( tmp_compexpr_left_1 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 331;
            type_description_1 = "oooooooooooooooooooooooooooooooooooooooboooo";
            goto try_except_handler_7;
        }
        CHECK_OBJECT( var_locale_time );
        tmp_source_name_4 = var_locale_time;
        tmp_compexpr_right_1 = LOOKUP_ATTRIBUTE( tmp_source_name_4, const_str_plain_lang );
        if ( tmp_compexpr_right_1 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
            Py_DECREF( tmp_compexpr_left_1 );

            exception_lineno = 331;
            type_description_1 = "oooooooooooooooooooooooooooooooooooooooboooo";
            goto try_except_handler_7;
        }
        tmp_res = RICH_COMPARE_BOOL_NOTEQ_OBJECT_OBJECT( tmp_compexpr_left_1, tmp_compexpr_right_1 );
        Py_DECREF( tmp_compexpr_left_1 );
        Py_DECREF( tmp_compexpr_right_1 );
        if ( tmp_res == -1 )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 331;
            type_description_1 = "oooooooooooooooooooooooooooooooooooooooboooo";
            goto try_except_handler_7;
        }
        tmp_or_left_value_1 = ( tmp_res != 0 ) ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
        tmp_or_left_truth_1 = tmp_or_left_value_1 == NUITKA_BOOL_TRUE ? 1 : 0;
        if ( tmp_or_left_truth_1 == 1 )
        {
            goto or_left_1;
        }
        else
        {
            goto or_right_1;
        }
        or_right_1:;
        tmp_mvar_value_4 = GET_STRING_DICT_VALUE( moduledict__strptime, (Nuitka_StringObject *)const_str_plain_time );

        if (unlikely( tmp_mvar_value_4 == NULL ))
        {
            tmp_mvar_value_4 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_time );
        }

        if ( tmp_mvar_value_4 == NULL )
        {

            exception_type = PyExc_NameError;
            Py_INCREF( exception_type );
            exception_value = PyUnicode_FromFormat( "name '%s' is not defined", "time" );
            exception_tb = NULL;
            NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
            CHAIN_EXCEPTION( exception_value );

            exception_lineno = 332;
            type_description_1 = "oooooooooooooooooooooooooooooooooooooooboooo";
            goto try_except_handler_7;
        }

        tmp_source_name_5 = tmp_mvar_value_4;
        tmp_compexpr_left_2 = LOOKUP_ATTRIBUTE( tmp_source_name_5, const_str_plain_tzname );
        if ( tmp_compexpr_left_2 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 332;
            type_description_1 = "oooooooooooooooooooooooooooooooooooooooboooo";
            goto try_except_handler_7;
        }
        CHECK_OBJECT( var_locale_time );
        tmp_source_name_6 = var_locale_time;
        tmp_compexpr_right_2 = LOOKUP_ATTRIBUTE( tmp_source_name_6, const_str_plain_tzname );
        if ( tmp_compexpr_right_2 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
            Py_DECREF( tmp_compexpr_left_2 );

            exception_lineno = 332;
            type_description_1 = "oooooooooooooooooooooooooooooooooooooooboooo";
            goto try_except_handler_7;
        }
        tmp_res = RICH_COMPARE_BOOL_NOTEQ_OBJECT_OBJECT( tmp_compexpr_left_2, tmp_compexpr_right_2 );
        Py_DECREF( tmp_compexpr_left_2 );
        Py_DECREF( tmp_compexpr_right_2 );
        if ( tmp_res == -1 )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 332;
            type_description_1 = "oooooooooooooooooooooooooooooooooooooooboooo";
            goto try_except_handler_7;
        }
        tmp_or_left_value_2 = ( tmp_res != 0 ) ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
        tmp_or_left_truth_2 = tmp_or_left_value_2 == NUITKA_BOOL_TRUE ? 1 : 0;
        if ( tmp_or_left_truth_2 == 1 )
        {
            goto or_left_2;
        }
        else
        {
            goto or_right_2;
        }
        or_right_2:;
        tmp_mvar_value_5 = GET_STRING_DICT_VALUE( moduledict__strptime, (Nuitka_StringObject *)const_str_plain_time );

        if (unlikely( tmp_mvar_value_5 == NULL ))
        {
            tmp_mvar_value_5 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_time );
        }

        if ( tmp_mvar_value_5 == NULL )
        {

            exception_type = PyExc_NameError;
            Py_INCREF( exception_type );
            exception_value = PyUnicode_FromFormat( "name '%s' is not defined", "time" );
            exception_tb = NULL;
            NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
            CHAIN_EXCEPTION( exception_value );

            exception_lineno = 333;
            type_description_1 = "oooooooooooooooooooooooooooooooooooooooboooo";
            goto try_except_handler_7;
        }

        tmp_source_name_7 = tmp_mvar_value_5;
        tmp_compexpr_left_3 = LOOKUP_ATTRIBUTE( tmp_source_name_7, const_str_plain_daylight );
        if ( tmp_compexpr_left_3 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 333;
            type_description_1 = "oooooooooooooooooooooooooooooooooooooooboooo";
            goto try_except_handler_7;
        }
        CHECK_OBJECT( var_locale_time );
        tmp_source_name_8 = var_locale_time;
        tmp_compexpr_right_3 = LOOKUP_ATTRIBUTE( tmp_source_name_8, const_str_plain_daylight );
        if ( tmp_compexpr_right_3 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
            Py_DECREF( tmp_compexpr_left_3 );

            exception_lineno = 333;
            type_description_1 = "oooooooooooooooooooooooooooooooooooooooboooo";
            goto try_except_handler_7;
        }
        tmp_res = RICH_COMPARE_BOOL_NOTEQ_OBJECT_OBJECT( tmp_compexpr_left_3, tmp_compexpr_right_3 );
        Py_DECREF( tmp_compexpr_left_3 );
        Py_DECREF( tmp_compexpr_right_3 );
        if ( tmp_res == -1 )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 333;
            type_description_1 = "oooooooooooooooooooooooooooooooooooooooboooo";
            goto try_except_handler_7;
        }
        tmp_or_right_value_2 = ( tmp_res != 0 ) ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
        tmp_or_right_value_1 = tmp_or_right_value_2;
        goto or_end_2;
        or_left_2:;
        tmp_or_right_value_1 = tmp_or_left_value_2;
        or_end_2:;
        tmp_condition_result_2 = tmp_or_right_value_1;
        goto or_end_1;
        or_left_1:;
        tmp_condition_result_2 = tmp_or_left_value_1;
        or_end_1:;
        if ( tmp_condition_result_2 == NUITKA_BOOL_TRUE )
        {
            goto branch_yes_2;
        }
        else
        {
            goto branch_no_2;
        }
        branch_yes_2:;
        {
            PyObject *tmp_assign_source_13;
            PyObject *tmp_called_name_4;
            PyObject *tmp_mvar_value_6;
            tmp_mvar_value_6 = GET_STRING_DICT_VALUE( moduledict__strptime, (Nuitka_StringObject *)const_str_plain_TimeRE );

            if (unlikely( tmp_mvar_value_6 == NULL ))
            {
                tmp_mvar_value_6 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_TimeRE );
            }

            if ( tmp_mvar_value_6 == NULL )
            {

                exception_type = PyExc_NameError;
                Py_INCREF( exception_type );
                exception_value = PyUnicode_FromFormat( "name '%s' is not defined", "TimeRE" );
                exception_tb = NULL;
                NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
                CHAIN_EXCEPTION( exception_value );

                exception_lineno = 334;
                type_description_1 = "oooooooooooooooooooooooooooooooooooooooboooo";
                goto try_except_handler_7;
            }

            tmp_called_name_4 = tmp_mvar_value_6;
            frame_285d3548e213aa4c5d6aef1855a305f1->m_frame.f_lineno = 334;
            tmp_assign_source_13 = CALL_FUNCTION_NO_ARGS( tmp_called_name_4 );
            if ( tmp_assign_source_13 == NULL )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 334;
                type_description_1 = "oooooooooooooooooooooooooooooooooooooooboooo";
                goto try_except_handler_7;
            }
            UPDATE_STRING_DICT1( moduledict__strptime, (Nuitka_StringObject *)const_str_plain__TimeRE_cache, tmp_assign_source_13 );
        }
        {
            PyObject *tmp_called_instance_2;
            PyObject *tmp_mvar_value_7;
            PyObject *tmp_call_result_1;
            tmp_mvar_value_7 = GET_STRING_DICT_VALUE( moduledict__strptime, (Nuitka_StringObject *)const_str_plain__regex_cache );

            if (unlikely( tmp_mvar_value_7 == NULL ))
            {
                tmp_mvar_value_7 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain__regex_cache );
            }

            if ( tmp_mvar_value_7 == NULL )
            {

                exception_type = PyExc_NameError;
                Py_INCREF( exception_type );
                exception_value = PyUnicode_FromFormat( "name '%s' is not defined", "_regex_cache" );
                exception_tb = NULL;
                NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
                CHAIN_EXCEPTION( exception_value );

                exception_lineno = 335;
                type_description_1 = "oooooooooooooooooooooooooooooooooooooooboooo";
                goto try_except_handler_7;
            }

            tmp_called_instance_2 = tmp_mvar_value_7;
            frame_285d3548e213aa4c5d6aef1855a305f1->m_frame.f_lineno = 335;
            tmp_call_result_1 = CALL_METHOD_NO_ARGS( tmp_called_instance_2, const_str_plain_clear );
            if ( tmp_call_result_1 == NULL )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 335;
                type_description_1 = "oooooooooooooooooooooooooooooooooooooooboooo";
                goto try_except_handler_7;
            }
            Py_DECREF( tmp_call_result_1 );
        }
        {
            PyObject *tmp_assign_source_14;
            PyObject *tmp_source_name_9;
            PyObject *tmp_mvar_value_8;
            tmp_mvar_value_8 = GET_STRING_DICT_VALUE( moduledict__strptime, (Nuitka_StringObject *)const_str_plain__TimeRE_cache );

            if (unlikely( tmp_mvar_value_8 == NULL ))
            {
                tmp_mvar_value_8 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain__TimeRE_cache );
            }

            if ( tmp_mvar_value_8 == NULL )
            {

                exception_type = PyExc_NameError;
                Py_INCREF( exception_type );
                exception_value = PyUnicode_FromFormat( "name '%s' is not defined", "_TimeRE_cache" );
                exception_tb = NULL;
                NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
                CHAIN_EXCEPTION( exception_value );

                exception_lineno = 336;
                type_description_1 = "oooooooooooooooooooooooooooooooooooooooboooo";
                goto try_except_handler_7;
            }

            tmp_source_name_9 = tmp_mvar_value_8;
            tmp_assign_source_14 = LOOKUP_ATTRIBUTE( tmp_source_name_9, const_str_plain_locale_time );
            if ( tmp_assign_source_14 == NULL )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 336;
                type_description_1 = "oooooooooooooooooooooooooooooooooooooooboooo";
                goto try_except_handler_7;
            }
            {
                PyObject *old = var_locale_time;
                assert( old != NULL );
                var_locale_time = tmp_assign_source_14;
                Py_DECREF( old );
            }

        }
        branch_no_2:;
    }
    {
        nuitka_bool tmp_condition_result_3;
        PyObject *tmp_compexpr_left_4;
        PyObject *tmp_compexpr_right_4;
        PyObject *tmp_len_arg_1;
        PyObject *tmp_mvar_value_9;
        PyObject *tmp_mvar_value_10;
        tmp_mvar_value_9 = GET_STRING_DICT_VALUE( moduledict__strptime, (Nuitka_StringObject *)const_str_plain__regex_cache );

        if (unlikely( tmp_mvar_value_9 == NULL ))
        {
            tmp_mvar_value_9 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain__regex_cache );
        }

        if ( tmp_mvar_value_9 == NULL )
        {

            exception_type = PyExc_NameError;
            Py_INCREF( exception_type );
            exception_value = PyUnicode_FromFormat( "name '%s' is not defined", "_regex_cache" );
            exception_tb = NULL;
            NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
            CHAIN_EXCEPTION( exception_value );

            exception_lineno = 337;
            type_description_1 = "oooooooooooooooooooooooooooooooooooooooboooo";
            goto try_except_handler_7;
        }

        tmp_len_arg_1 = tmp_mvar_value_9;
        tmp_compexpr_left_4 = BUILTIN_LEN( tmp_len_arg_1 );
        if ( tmp_compexpr_left_4 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 337;
            type_description_1 = "oooooooooooooooooooooooooooooooooooooooboooo";
            goto try_except_handler_7;
        }
        tmp_mvar_value_10 = GET_STRING_DICT_VALUE( moduledict__strptime, (Nuitka_StringObject *)const_str_plain__CACHE_MAX_SIZE );

        if (unlikely( tmp_mvar_value_10 == NULL ))
        {
            tmp_mvar_value_10 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain__CACHE_MAX_SIZE );
        }

        if ( tmp_mvar_value_10 == NULL )
        {
            Py_DECREF( tmp_compexpr_left_4 );
            exception_type = PyExc_NameError;
            Py_INCREF( exception_type );
            exception_value = PyUnicode_FromFormat( "name '%s' is not defined", "_CACHE_MAX_SIZE" );
            exception_tb = NULL;
            NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
            CHAIN_EXCEPTION( exception_value );

            exception_lineno = 337;
            type_description_1 = "oooooooooooooooooooooooooooooooooooooooboooo";
            goto try_except_handler_7;
        }

        tmp_compexpr_right_4 = tmp_mvar_value_10;
        tmp_res = RICH_COMPARE_BOOL_GT_OBJECT_OBJECT( tmp_compexpr_left_4, tmp_compexpr_right_4 );
        Py_DECREF( tmp_compexpr_left_4 );
        if ( tmp_res == -1 )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 337;
            type_description_1 = "oooooooooooooooooooooooooooooooooooooooboooo";
            goto try_except_handler_7;
        }
        tmp_condition_result_3 = ( tmp_res != 0 ) ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
        if ( tmp_condition_result_3 == NUITKA_BOOL_TRUE )
        {
            goto branch_yes_3;
        }
        else
        {
            goto branch_no_3;
        }
        branch_yes_3:;
        {
            PyObject *tmp_called_instance_3;
            PyObject *tmp_mvar_value_11;
            PyObject *tmp_call_result_2;
            tmp_mvar_value_11 = GET_STRING_DICT_VALUE( moduledict__strptime, (Nuitka_StringObject *)const_str_plain__regex_cache );

            if (unlikely( tmp_mvar_value_11 == NULL ))
            {
                tmp_mvar_value_11 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain__regex_cache );
            }

            if ( tmp_mvar_value_11 == NULL )
            {

                exception_type = PyExc_NameError;
                Py_INCREF( exception_type );
                exception_value = PyUnicode_FromFormat( "name '%s' is not defined", "_regex_cache" );
                exception_tb = NULL;
                NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
                CHAIN_EXCEPTION( exception_value );

                exception_lineno = 338;
                type_description_1 = "oooooooooooooooooooooooooooooooooooooooboooo";
                goto try_except_handler_7;
            }

            tmp_called_instance_3 = tmp_mvar_value_11;
            frame_285d3548e213aa4c5d6aef1855a305f1->m_frame.f_lineno = 338;
            tmp_call_result_2 = CALL_METHOD_NO_ARGS( tmp_called_instance_3, const_str_plain_clear );
            if ( tmp_call_result_2 == NULL )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 338;
                type_description_1 = "oooooooooooooooooooooooooooooooooooooooboooo";
                goto try_except_handler_7;
            }
            Py_DECREF( tmp_call_result_2 );
        }
        branch_no_3:;
    }
    {
        PyObject *tmp_assign_source_15;
        PyObject *tmp_called_instance_4;
        PyObject *tmp_mvar_value_12;
        PyObject *tmp_args_element_name_4;
        tmp_mvar_value_12 = GET_STRING_DICT_VALUE( moduledict__strptime, (Nuitka_StringObject *)const_str_plain__regex_cache );

        if (unlikely( tmp_mvar_value_12 == NULL ))
        {
            tmp_mvar_value_12 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain__regex_cache );
        }

        if ( tmp_mvar_value_12 == NULL )
        {

            exception_type = PyExc_NameError;
            Py_INCREF( exception_type );
            exception_value = PyUnicode_FromFormat( "name '%s' is not defined", "_regex_cache" );
            exception_tb = NULL;
            NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
            CHAIN_EXCEPTION( exception_value );

            exception_lineno = 339;
            type_description_1 = "oooooooooooooooooooooooooooooooooooooooboooo";
            goto try_except_handler_7;
        }

        tmp_called_instance_4 = tmp_mvar_value_12;
        CHECK_OBJECT( par_format );
        tmp_args_element_name_4 = par_format;
        frame_285d3548e213aa4c5d6aef1855a305f1->m_frame.f_lineno = 339;
        {
            PyObject *call_args[] = { tmp_args_element_name_4 };
            tmp_assign_source_15 = CALL_METHOD_WITH_ARGS1( tmp_called_instance_4, const_str_plain_get, call_args );
        }

        if ( tmp_assign_source_15 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 339;
            type_description_1 = "oooooooooooooooooooooooooooooooooooooooboooo";
            goto try_except_handler_7;
        }
        assert( var_format_regex == NULL );
        var_format_regex = tmp_assign_source_15;
    }
    {
        nuitka_bool tmp_condition_result_4;
        PyObject *tmp_operand_name_2;
        CHECK_OBJECT( var_format_regex );
        tmp_operand_name_2 = var_format_regex;
        tmp_res = CHECK_IF_TRUE( tmp_operand_name_2 );
        if ( tmp_res == -1 )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 340;
            type_description_1 = "oooooooooooooooooooooooooooooooooooooooboooo";
            goto try_except_handler_7;
        }
        tmp_condition_result_4 = ( tmp_res == 0 ) ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
        if ( tmp_condition_result_4 == NUITKA_BOOL_TRUE )
        {
            goto branch_yes_4;
        }
        else
        {
            goto branch_no_4;
        }
        branch_yes_4:;
        // Tried code:
        {
            PyObject *tmp_assign_source_16;
            PyObject *tmp_called_instance_5;
            PyObject *tmp_mvar_value_13;
            PyObject *tmp_args_element_name_5;
            tmp_mvar_value_13 = GET_STRING_DICT_VALUE( moduledict__strptime, (Nuitka_StringObject *)const_str_plain__TimeRE_cache );

            if (unlikely( tmp_mvar_value_13 == NULL ))
            {
                tmp_mvar_value_13 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain__TimeRE_cache );
            }

            if ( tmp_mvar_value_13 == NULL )
            {

                exception_type = PyExc_NameError;
                Py_INCREF( exception_type );
                exception_value = PyUnicode_FromFormat( "name '%s' is not defined", "_TimeRE_cache" );
                exception_tb = NULL;
                NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
                CHAIN_EXCEPTION( exception_value );

                exception_lineno = 342;
                type_description_1 = "oooooooooooooooooooooooooooooooooooooooboooo";
                goto try_except_handler_8;
            }

            tmp_called_instance_5 = tmp_mvar_value_13;
            CHECK_OBJECT( par_format );
            tmp_args_element_name_5 = par_format;
            frame_285d3548e213aa4c5d6aef1855a305f1->m_frame.f_lineno = 342;
            {
                PyObject *call_args[] = { tmp_args_element_name_5 };
                tmp_assign_source_16 = CALL_METHOD_WITH_ARGS1( tmp_called_instance_5, const_str_plain_compile, call_args );
            }

            if ( tmp_assign_source_16 == NULL )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 342;
                type_description_1 = "oooooooooooooooooooooooooooooooooooooooboooo";
                goto try_except_handler_8;
            }
            {
                PyObject *old = var_format_regex;
                assert( old != NULL );
                var_format_regex = tmp_assign_source_16;
                Py_DECREF( old );
            }

        }
        goto try_end_4;
        // Exception handler code:
        try_except_handler_8:;
        exception_keeper_type_4 = exception_type;
        exception_keeper_value_4 = exception_value;
        exception_keeper_tb_4 = exception_tb;
        exception_keeper_lineno_4 = exception_lineno;
        exception_type = NULL;
        exception_value = NULL;
        exception_tb = NULL;
        exception_lineno = 0;

        // Preserve existing published exception.
        exception_preserved_type_1 = EXC_TYPE(PyThreadState_GET());
        Py_XINCREF( exception_preserved_type_1 );
        exception_preserved_value_1 = EXC_VALUE(PyThreadState_GET());
        Py_XINCREF( exception_preserved_value_1 );
        exception_preserved_tb_1 = (PyTracebackObject *)EXC_TRACEBACK(PyThreadState_GET());
        Py_XINCREF( exception_preserved_tb_1 );

        if ( exception_keeper_tb_4 == NULL )
        {
            exception_keeper_tb_4 = MAKE_TRACEBACK( frame_285d3548e213aa4c5d6aef1855a305f1, exception_keeper_lineno_4 );
        }
        else if ( exception_keeper_lineno_4 != 0 )
        {
            exception_keeper_tb_4 = ADD_TRACEBACK( exception_keeper_tb_4, frame_285d3548e213aa4c5d6aef1855a305f1, exception_keeper_lineno_4 );
        }

        NORMALIZE_EXCEPTION( &exception_keeper_type_4, &exception_keeper_value_4, &exception_keeper_tb_4 );
        PyException_SetTraceback( exception_keeper_value_4, (PyObject *)exception_keeper_tb_4 );
        PUBLISH_EXCEPTION( &exception_keeper_type_4, &exception_keeper_value_4, &exception_keeper_tb_4 );
        // Tried code:
        {
            nuitka_bool tmp_condition_result_5;
            PyObject *tmp_compexpr_left_5;
            PyObject *tmp_compexpr_right_5;
            tmp_compexpr_left_5 = EXC_TYPE(PyThreadState_GET());
            tmp_compexpr_right_5 = PyExc_KeyError;
            tmp_res = EXCEPTION_MATCH_BOOL( tmp_compexpr_left_5, tmp_compexpr_right_5 );
            if ( tmp_res == -1 )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 345;
                type_description_1 = "oooooooooooooooooooooooooooooooooooooooboooo";
                goto try_except_handler_9;
            }
            tmp_condition_result_5 = ( tmp_res != 0 ) ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
            if ( tmp_condition_result_5 == NUITKA_BOOL_TRUE )
            {
                goto branch_yes_5;
            }
            else
            {
                goto branch_no_5;
            }
            branch_yes_5:;
            {
                PyObject *tmp_assign_source_17;
                tmp_assign_source_17 = EXC_VALUE(PyThreadState_GET());
                assert( var_err == NULL );
                Py_INCREF( tmp_assign_source_17 );
                var_err = tmp_assign_source_17;
            }
            // Tried code:
            {
                PyObject *tmp_assign_source_18;
                PyObject *tmp_subscribed_name_1;
                PyObject *tmp_source_name_10;
                PyObject *tmp_subscript_name_1;
                CHECK_OBJECT( var_err );
                tmp_source_name_10 = var_err;
                tmp_subscribed_name_1 = LOOKUP_ATTRIBUTE( tmp_source_name_10, const_str_plain_args );
                if ( tmp_subscribed_name_1 == NULL )
                {
                    assert( ERROR_OCCURRED() );

                    FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                    exception_lineno = 346;
                    type_description_1 = "oooooooooooooooooooooooooooooooooooooooboooo";
                    goto try_except_handler_10;
                }
                tmp_subscript_name_1 = const_int_0;
                tmp_assign_source_18 = LOOKUP_SUBSCRIPT_CONST( tmp_subscribed_name_1, tmp_subscript_name_1, 0 );
                Py_DECREF( tmp_subscribed_name_1 );
                if ( tmp_assign_source_18 == NULL )
                {
                    assert( ERROR_OCCURRED() );

                    FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                    exception_lineno = 346;
                    type_description_1 = "oooooooooooooooooooooooooooooooooooooooboooo";
                    goto try_except_handler_10;
                }
                assert( var_bad_directive == NULL );
                var_bad_directive = tmp_assign_source_18;
            }
            {
                nuitka_bool tmp_condition_result_6;
                PyObject *tmp_compexpr_left_6;
                PyObject *tmp_compexpr_right_6;
                CHECK_OBJECT( var_bad_directive );
                tmp_compexpr_left_6 = var_bad_directive;
                tmp_compexpr_right_6 = const_str_chr_92;
                tmp_res = RICH_COMPARE_BOOL_EQ_OBJECT_OBJECT( tmp_compexpr_left_6, tmp_compexpr_right_6 );
                if ( tmp_res == -1 )
                {
                    assert( ERROR_OCCURRED() );

                    FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                    exception_lineno = 347;
                    type_description_1 = "oooooooooooooooooooooooooooooooooooooooboooo";
                    goto try_except_handler_10;
                }
                tmp_condition_result_6 = ( tmp_res != 0 ) ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
                if ( tmp_condition_result_6 == NUITKA_BOOL_TRUE )
                {
                    goto branch_yes_6;
                }
                else
                {
                    goto branch_no_6;
                }
                branch_yes_6:;
                {
                    PyObject *tmp_assign_source_19;
                    tmp_assign_source_19 = const_str_chr_37;
                    {
                        PyObject *old = var_bad_directive;
                        assert( old != NULL );
                        var_bad_directive = tmp_assign_source_19;
                        Py_INCREF( var_bad_directive );
                        Py_DECREF( old );
                    }

                }
                branch_no_6:;
            }
            CHECK_OBJECT( var_err );
            Py_DECREF( var_err );
            var_err = NULL;

            {
                PyObject *tmp_raise_type_2;
                PyObject *tmp_make_exception_arg_2;
                PyObject *tmp_left_name_1;
                PyObject *tmp_right_name_1;
                PyObject *tmp_tuple_element_1;
                PyObject *tmp_raise_cause_1;
                tmp_left_name_1 = const_str_digest_a1dad5a69b4ac4ada447a90529284d36;
                CHECK_OBJECT( var_bad_directive );
                tmp_tuple_element_1 = var_bad_directive;
                tmp_right_name_1 = PyTuple_New( 2 );
                Py_INCREF( tmp_tuple_element_1 );
                PyTuple_SET_ITEM( tmp_right_name_1, 0, tmp_tuple_element_1 );
                CHECK_OBJECT( par_format );
                tmp_tuple_element_1 = par_format;
                Py_INCREF( tmp_tuple_element_1 );
                PyTuple_SET_ITEM( tmp_right_name_1, 1, tmp_tuple_element_1 );
                tmp_make_exception_arg_2 = BINARY_OPERATION_REMAINDER( tmp_left_name_1, tmp_right_name_1 );
                Py_DECREF( tmp_right_name_1 );
                if ( tmp_make_exception_arg_2 == NULL )
                {
                    assert( ERROR_OCCURRED() );

                    FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                    exception_lineno = 350;
                    type_description_1 = "oooooooooooooooooooooooooooooooooooooooboooo";
                    goto try_except_handler_10;
                }
                frame_285d3548e213aa4c5d6aef1855a305f1->m_frame.f_lineno = 350;
                {
                    PyObject *call_args[] = { tmp_make_exception_arg_2 };
                    tmp_raise_type_2 = CALL_FUNCTION_WITH_ARGS1( PyExc_ValueError, call_args );
                }

                Py_DECREF( tmp_make_exception_arg_2 );
                assert( !(tmp_raise_type_2 == NULL) );
                tmp_raise_cause_1 = Py_None;
                exception_type = tmp_raise_type_2;
                exception_value = NULL;
                Py_INCREF( tmp_raise_cause_1 );
                exception_lineno = 351;
                RAISE_EXCEPTION_WITH_CAUSE( &exception_type, &exception_value, &exception_tb, tmp_raise_cause_1 );
                type_description_1 = "oooooooooooooooooooooooooooooooooooooooboooo";
                goto try_except_handler_10;
            }
            // tried codes exits in all cases
            NUITKA_CANNOT_GET_HERE( _strptime$$$function_15__strptime );
            return NULL;
            // Exception handler code:
            try_except_handler_10:;
            exception_keeper_type_5 = exception_type;
            exception_keeper_value_5 = exception_value;
            exception_keeper_tb_5 = exception_tb;
            exception_keeper_lineno_5 = exception_lineno;
            exception_type = NULL;
            exception_value = NULL;
            exception_tb = NULL;
            exception_lineno = 0;

            Py_XDECREF( var_err );
            var_err = NULL;

            // Re-raise.
            exception_type = exception_keeper_type_5;
            exception_value = exception_keeper_value_5;
            exception_tb = exception_keeper_tb_5;
            exception_lineno = exception_keeper_lineno_5;

            goto try_except_handler_9;
            // End of try:
            goto branch_end_5;
            branch_no_5:;
            {
                nuitka_bool tmp_condition_result_7;
                PyObject *tmp_compexpr_left_7;
                PyObject *tmp_compexpr_right_7;
                tmp_compexpr_left_7 = EXC_TYPE(PyThreadState_GET());
                tmp_compexpr_right_7 = PyExc_IndexError;
                tmp_res = EXCEPTION_MATCH_BOOL( tmp_compexpr_left_7, tmp_compexpr_right_7 );
                if ( tmp_res == -1 )
                {
                    assert( ERROR_OCCURRED() );

                    FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                    exception_lineno = 353;
                    type_description_1 = "oooooooooooooooooooooooooooooooooooooooboooo";
                    goto try_except_handler_9;
                }
                tmp_condition_result_7 = ( tmp_res != 0 ) ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
                if ( tmp_condition_result_7 == NUITKA_BOOL_TRUE )
                {
                    goto branch_yes_7;
                }
                else
                {
                    goto branch_no_7;
                }
                branch_yes_7:;
                {
                    PyObject *tmp_raise_type_3;
                    PyObject *tmp_make_exception_arg_3;
                    PyObject *tmp_left_name_2;
                    PyObject *tmp_right_name_2;
                    PyObject *tmp_raise_cause_2;
                    tmp_left_name_2 = const_str_digest_e9a6c8eccf0f98806bf0f2954fb5592c;
                    CHECK_OBJECT( par_format );
                    tmp_right_name_2 = par_format;
                    tmp_make_exception_arg_3 = BINARY_OPERATION_REMAINDER( tmp_left_name_2, tmp_right_name_2 );
                    if ( tmp_make_exception_arg_3 == NULL )
                    {
                        assert( ERROR_OCCURRED() );

                        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                        exception_lineno = 354;
                        type_description_1 = "oooooooooooooooooooooooooooooooooooooooboooo";
                        goto try_except_handler_9;
                    }
                    frame_285d3548e213aa4c5d6aef1855a305f1->m_frame.f_lineno = 354;
                    {
                        PyObject *call_args[] = { tmp_make_exception_arg_3 };
                        tmp_raise_type_3 = CALL_FUNCTION_WITH_ARGS1( PyExc_ValueError, call_args );
                    }

                    Py_DECREF( tmp_make_exception_arg_3 );
                    assert( !(tmp_raise_type_3 == NULL) );
                    tmp_raise_cause_2 = Py_None;
                    exception_type = tmp_raise_type_3;
                    exception_value = NULL;
                    Py_INCREF( tmp_raise_cause_2 );
                    exception_lineno = 354;
                    RAISE_EXCEPTION_WITH_CAUSE( &exception_type, &exception_value, &exception_tb, tmp_raise_cause_2 );
                    type_description_1 = "oooooooooooooooooooooooooooooooooooooooboooo";
                    goto try_except_handler_9;
                }
                goto branch_end_7;
                branch_no_7:;
                tmp_result = RERAISE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
                if (unlikely( tmp_result == false ))
                {
                    exception_lineno = 341;
                }

                if (exception_tb && exception_tb->tb_frame == &frame_285d3548e213aa4c5d6aef1855a305f1->m_frame) frame_285d3548e213aa4c5d6aef1855a305f1->m_frame.f_lineno = exception_tb->tb_lineno;
                type_description_1 = "oooooooooooooooooooooooooooooooooooooooboooo";
                goto try_except_handler_9;
                branch_end_7:;
            }
            branch_end_5:;
        }
        // tried codes exits in all cases
        NUITKA_CANNOT_GET_HERE( _strptime$$$function_15__strptime );
        return NULL;
        // Exception handler code:
        try_except_handler_9:;
        exception_keeper_type_6 = exception_type;
        exception_keeper_value_6 = exception_value;
        exception_keeper_tb_6 = exception_tb;
        exception_keeper_lineno_6 = exception_lineno;
        exception_type = NULL;
        exception_value = NULL;
        exception_tb = NULL;
        exception_lineno = 0;

        // Restore previous exception.
        SET_CURRENT_EXCEPTION( exception_preserved_type_1, exception_preserved_value_1, exception_preserved_tb_1 );
        // Re-raise.
        exception_type = exception_keeper_type_6;
        exception_value = exception_keeper_value_6;
        exception_tb = exception_keeper_tb_6;
        exception_lineno = exception_keeper_lineno_6;

        goto try_except_handler_7;
        // End of try:
        // End of try:
        try_end_4:;
        {
            PyObject *tmp_ass_subvalue_1;
            PyObject *tmp_ass_subscribed_1;
            PyObject *tmp_mvar_value_14;
            PyObject *tmp_ass_subscript_1;
            CHECK_OBJECT( var_format_regex );
            tmp_ass_subvalue_1 = var_format_regex;
            tmp_mvar_value_14 = GET_STRING_DICT_VALUE( moduledict__strptime, (Nuitka_StringObject *)const_str_plain__regex_cache );

            if (unlikely( tmp_mvar_value_14 == NULL ))
            {
                tmp_mvar_value_14 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain__regex_cache );
            }

            if ( tmp_mvar_value_14 == NULL )
            {

                exception_type = PyExc_NameError;
                Py_INCREF( exception_type );
                exception_value = PyUnicode_FromFormat( "name '%s' is not defined", "_regex_cache" );
                exception_tb = NULL;
                NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
                CHAIN_EXCEPTION( exception_value );

                exception_lineno = 355;
                type_description_1 = "oooooooooooooooooooooooooooooooooooooooboooo";
                goto try_except_handler_7;
            }

            tmp_ass_subscribed_1 = tmp_mvar_value_14;
            CHECK_OBJECT( par_format );
            tmp_ass_subscript_1 = par_format;
            tmp_result = SET_SUBSCRIPT( tmp_ass_subscribed_1, tmp_ass_subscript_1, tmp_ass_subvalue_1 );
            if ( tmp_result == false )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 355;
                type_description_1 = "oooooooooooooooooooooooooooooooooooooooboooo";
                goto try_except_handler_7;
            }
        }
        branch_no_4:;
    }
    goto try_end_5;
    // Exception handler code:
    try_except_handler_7:;
    exception_keeper_type_7 = exception_type;
    exception_keeper_value_7 = exception_value;
    exception_keeper_tb_7 = exception_tb;
    exception_keeper_lineno_7 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    // Preserve existing published exception.
    exception_preserved_type_2 = EXC_TYPE(PyThreadState_GET());
    Py_XINCREF( exception_preserved_type_2 );
    exception_preserved_value_2 = EXC_VALUE(PyThreadState_GET());
    Py_XINCREF( exception_preserved_value_2 );
    exception_preserved_tb_2 = (PyTracebackObject *)EXC_TRACEBACK(PyThreadState_GET());
    Py_XINCREF( exception_preserved_tb_2 );

    if ( exception_keeper_tb_7 == NULL )
    {
        exception_keeper_tb_7 = MAKE_TRACEBACK( frame_285d3548e213aa4c5d6aef1855a305f1, exception_keeper_lineno_7 );
    }
    else if ( exception_keeper_lineno_7 != 0 )
    {
        exception_keeper_tb_7 = ADD_TRACEBACK( exception_keeper_tb_7, frame_285d3548e213aa4c5d6aef1855a305f1, exception_keeper_lineno_7 );
    }

    NORMALIZE_EXCEPTION( &exception_keeper_type_7, &exception_keeper_value_7, &exception_keeper_tb_7 );
    PyException_SetTraceback( exception_keeper_value_7, (PyObject *)exception_keeper_tb_7 );
    PUBLISH_EXCEPTION( &exception_keeper_type_7, &exception_keeper_value_7, &exception_keeper_tb_7 );
    // Tried code:
    {
        nuitka_bool tmp_condition_result_8;
        PyObject *tmp_compexpr_left_8;
        PyObject *tmp_compexpr_right_8;
        tmp_compexpr_left_8 = EXC_TYPE(PyThreadState_GET());
        tmp_compexpr_right_8 = PyExc_BaseException;
        tmp_res = EXCEPTION_MATCH_BOOL( tmp_compexpr_left_8, tmp_compexpr_right_8 );
        if ( tmp_res == -1 )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 329;
            type_description_1 = "oooooooooooooooooooooooooooooooooooooooboooo";
            goto try_except_handler_11;
        }
        tmp_condition_result_8 = ( tmp_res != 0 ) ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
        if ( tmp_condition_result_8 == NUITKA_BOOL_TRUE )
        {
            goto branch_yes_8;
        }
        else
        {
            goto branch_no_8;
        }
        branch_yes_8:;
        {
            nuitka_bool tmp_assign_source_20;
            tmp_assign_source_20 = NUITKA_BOOL_FALSE;
            tmp_with_1__indicator = tmp_assign_source_20;
        }
        {
            nuitka_bool tmp_condition_result_9;
            PyObject *tmp_operand_name_3;
            PyObject *tmp_called_name_5;
            PyObject *tmp_args_element_name_6;
            PyObject *tmp_args_element_name_7;
            PyObject *tmp_args_element_name_8;
            CHECK_OBJECT( tmp_with_1__exit );
            tmp_called_name_5 = tmp_with_1__exit;
            tmp_args_element_name_6 = EXC_TYPE(PyThreadState_GET());
            tmp_args_element_name_7 = EXC_VALUE(PyThreadState_GET());
            tmp_args_element_name_8 = EXC_TRACEBACK(PyThreadState_GET());
            frame_285d3548e213aa4c5d6aef1855a305f1->m_frame.f_lineno = 329;
            {
                PyObject *call_args[] = { tmp_args_element_name_6, tmp_args_element_name_7, tmp_args_element_name_8 };
                tmp_operand_name_3 = CALL_FUNCTION_WITH_ARGS3( tmp_called_name_5, call_args );
            }

            if ( tmp_operand_name_3 == NULL )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 329;
                type_description_1 = "oooooooooooooooooooooooooooooooooooooooboooo";
                goto try_except_handler_11;
            }
            tmp_res = CHECK_IF_TRUE( tmp_operand_name_3 );
            Py_DECREF( tmp_operand_name_3 );
            if ( tmp_res == -1 )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 329;
                type_description_1 = "oooooooooooooooooooooooooooooooooooooooboooo";
                goto try_except_handler_11;
            }
            tmp_condition_result_9 = ( tmp_res == 0 ) ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
            if ( tmp_condition_result_9 == NUITKA_BOOL_TRUE )
            {
                goto branch_yes_9;
            }
            else
            {
                goto branch_no_9;
            }
            branch_yes_9:;
            tmp_result = RERAISE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
            if (unlikely( tmp_result == false ))
            {
                exception_lineno = 329;
            }

            if (exception_tb && exception_tb->tb_frame == &frame_285d3548e213aa4c5d6aef1855a305f1->m_frame) frame_285d3548e213aa4c5d6aef1855a305f1->m_frame.f_lineno = exception_tb->tb_lineno;
            type_description_1 = "oooooooooooooooooooooooooooooooooooooooboooo";
            goto try_except_handler_11;
            branch_no_9:;
        }
        goto branch_end_8;
        branch_no_8:;
        tmp_result = RERAISE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
        if (unlikely( tmp_result == false ))
        {
            exception_lineno = 329;
        }

        if (exception_tb && exception_tb->tb_frame == &frame_285d3548e213aa4c5d6aef1855a305f1->m_frame) frame_285d3548e213aa4c5d6aef1855a305f1->m_frame.f_lineno = exception_tb->tb_lineno;
        type_description_1 = "oooooooooooooooooooooooooooooooooooooooboooo";
        goto try_except_handler_11;
        branch_end_8:;
    }
    goto try_end_6;
    // Exception handler code:
    try_except_handler_11:;
    exception_keeper_type_8 = exception_type;
    exception_keeper_value_8 = exception_value;
    exception_keeper_tb_8 = exception_tb;
    exception_keeper_lineno_8 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    // Restore previous exception.
    SET_CURRENT_EXCEPTION( exception_preserved_type_2, exception_preserved_value_2, exception_preserved_tb_2 );
    // Re-raise.
    exception_type = exception_keeper_type_8;
    exception_value = exception_keeper_value_8;
    exception_tb = exception_keeper_tb_8;
    exception_lineno = exception_keeper_lineno_8;

    goto try_except_handler_6;
    // End of try:
    try_end_6:;
    // Restore previous exception.
    SET_CURRENT_EXCEPTION( exception_preserved_type_2, exception_preserved_value_2, exception_preserved_tb_2 );
    goto try_end_5;
    // exception handler codes exits in all cases
    NUITKA_CANNOT_GET_HERE( _strptime$$$function_15__strptime );
    return NULL;
    // End of try:
    try_end_5:;
    goto try_end_7;
    // Exception handler code:
    try_except_handler_6:;
    exception_keeper_type_9 = exception_type;
    exception_keeper_value_9 = exception_value;
    exception_keeper_tb_9 = exception_tb;
    exception_keeper_lineno_9 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    {
        nuitka_bool tmp_condition_result_10;
        nuitka_bool tmp_compexpr_left_9;
        nuitka_bool tmp_compexpr_right_9;
        assert( tmp_with_1__indicator != NUITKA_BOOL_UNASSIGNED);
        tmp_compexpr_left_9 = tmp_with_1__indicator;
        tmp_compexpr_right_9 = NUITKA_BOOL_TRUE;
        tmp_condition_result_10 = ( tmp_compexpr_left_9 == tmp_compexpr_right_9 ) ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
        if ( tmp_condition_result_10 == NUITKA_BOOL_TRUE )
        {
            goto branch_yes_10;
        }
        else
        {
            goto branch_no_10;
        }
        branch_yes_10:;
        {
            PyObject *tmp_called_name_6;
            PyObject *tmp_call_result_3;
            CHECK_OBJECT( tmp_with_1__exit );
            tmp_called_name_6 = tmp_with_1__exit;
            frame_285d3548e213aa4c5d6aef1855a305f1->m_frame.f_lineno = 329;
            tmp_call_result_3 = CALL_FUNCTION_WITH_ARGS3( tmp_called_name_6, &PyTuple_GET_ITEM( const_tuple_none_none_none_tuple, 0 ) );

            if ( tmp_call_result_3 == NULL )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );

                Py_DECREF( exception_keeper_type_9 );
                Py_XDECREF( exception_keeper_value_9 );
                Py_XDECREF( exception_keeper_tb_9 );

                exception_lineno = 329;
                type_description_1 = "oooooooooooooooooooooooooooooooooooooooboooo";
                goto try_except_handler_5;
            }
            Py_DECREF( tmp_call_result_3 );
        }
        branch_no_10:;
    }
    // Re-raise.
    exception_type = exception_keeper_type_9;
    exception_value = exception_keeper_value_9;
    exception_tb = exception_keeper_tb_9;
    exception_lineno = exception_keeper_lineno_9;

    goto try_except_handler_5;
    // End of try:
    try_end_7:;
    {
        nuitka_bool tmp_condition_result_11;
        nuitka_bool tmp_compexpr_left_10;
        nuitka_bool tmp_compexpr_right_10;
        assert( tmp_with_1__indicator != NUITKA_BOOL_UNASSIGNED);
        tmp_compexpr_left_10 = tmp_with_1__indicator;
        tmp_compexpr_right_10 = NUITKA_BOOL_TRUE;
        tmp_condition_result_11 = ( tmp_compexpr_left_10 == tmp_compexpr_right_10 ) ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
        if ( tmp_condition_result_11 == NUITKA_BOOL_TRUE )
        {
            goto branch_yes_11;
        }
        else
        {
            goto branch_no_11;
        }
        branch_yes_11:;
        {
            PyObject *tmp_called_name_7;
            PyObject *tmp_call_result_4;
            CHECK_OBJECT( tmp_with_1__exit );
            tmp_called_name_7 = tmp_with_1__exit;
            frame_285d3548e213aa4c5d6aef1855a305f1->m_frame.f_lineno = 329;
            tmp_call_result_4 = CALL_FUNCTION_WITH_ARGS3( tmp_called_name_7, &PyTuple_GET_ITEM( const_tuple_none_none_none_tuple, 0 ) );

            if ( tmp_call_result_4 == NULL )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 329;
                type_description_1 = "oooooooooooooooooooooooooooooooooooooooboooo";
                goto try_except_handler_5;
            }
            Py_DECREF( tmp_call_result_4 );
        }
        branch_no_11:;
    }
    goto try_end_8;
    // Exception handler code:
    try_except_handler_5:;
    exception_keeper_type_10 = exception_type;
    exception_keeper_value_10 = exception_value;
    exception_keeper_tb_10 = exception_tb;
    exception_keeper_lineno_10 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    Py_XDECREF( tmp_with_1__source );
    tmp_with_1__source = NULL;

    Py_XDECREF( tmp_with_1__enter );
    tmp_with_1__enter = NULL;

    Py_XDECREF( tmp_with_1__exit );
    tmp_with_1__exit = NULL;

    // Re-raise.
    exception_type = exception_keeper_type_10;
    exception_value = exception_keeper_value_10;
    exception_tb = exception_keeper_tb_10;
    exception_lineno = exception_keeper_lineno_10;

    goto frame_exception_exit_1;
    // End of try:
    try_end_8:;
    CHECK_OBJECT( (PyObject *)tmp_with_1__source );
    Py_DECREF( tmp_with_1__source );
    tmp_with_1__source = NULL;

    CHECK_OBJECT( (PyObject *)tmp_with_1__enter );
    Py_DECREF( tmp_with_1__enter );
    tmp_with_1__enter = NULL;

    CHECK_OBJECT( (PyObject *)tmp_with_1__exit );
    Py_DECREF( tmp_with_1__exit );
    tmp_with_1__exit = NULL;

    {
        PyObject *tmp_assign_source_21;
        PyObject *tmp_called_instance_6;
        PyObject *tmp_args_element_name_9;
        if ( var_format_regex == NULL )
        {

            exception_type = PyExc_UnboundLocalError;
            Py_INCREF( exception_type );
            exception_value = PyUnicode_FromFormat( "local variable '%s' referenced before assignment", "format_regex" );
            exception_tb = NULL;
            NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
            CHAIN_EXCEPTION( exception_value );

            exception_lineno = 356;
            type_description_1 = "oooooooooooooooooooooooooooooooooooooooboooo";
            goto frame_exception_exit_1;
        }

        tmp_called_instance_6 = var_format_regex;
        CHECK_OBJECT( par_data_string );
        tmp_args_element_name_9 = par_data_string;
        frame_285d3548e213aa4c5d6aef1855a305f1->m_frame.f_lineno = 356;
        {
            PyObject *call_args[] = { tmp_args_element_name_9 };
            tmp_assign_source_21 = CALL_METHOD_WITH_ARGS1( tmp_called_instance_6, const_str_plain_match, call_args );
        }

        if ( tmp_assign_source_21 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 356;
            type_description_1 = "oooooooooooooooooooooooooooooooooooooooboooo";
            goto frame_exception_exit_1;
        }
        assert( var_found == NULL );
        var_found = tmp_assign_source_21;
    }
    {
        nuitka_bool tmp_condition_result_12;
        PyObject *tmp_operand_name_4;
        CHECK_OBJECT( var_found );
        tmp_operand_name_4 = var_found;
        tmp_res = CHECK_IF_TRUE( tmp_operand_name_4 );
        if ( tmp_res == -1 )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 357;
            type_description_1 = "oooooooooooooooooooooooooooooooooooooooboooo";
            goto frame_exception_exit_1;
        }
        tmp_condition_result_12 = ( tmp_res == 0 ) ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
        if ( tmp_condition_result_12 == NUITKA_BOOL_TRUE )
        {
            goto branch_yes_12;
        }
        else
        {
            goto branch_no_12;
        }
        branch_yes_12:;
        {
            PyObject *tmp_raise_type_4;
            PyObject *tmp_make_exception_arg_4;
            PyObject *tmp_left_name_3;
            PyObject *tmp_right_name_3;
            PyObject *tmp_tuple_element_2;
            tmp_left_name_3 = const_str_digest_faf906145885b0a33d10a72a272c1edd;
            CHECK_OBJECT( par_data_string );
            tmp_tuple_element_2 = par_data_string;
            tmp_right_name_3 = PyTuple_New( 2 );
            Py_INCREF( tmp_tuple_element_2 );
            PyTuple_SET_ITEM( tmp_right_name_3, 0, tmp_tuple_element_2 );
            CHECK_OBJECT( par_format );
            tmp_tuple_element_2 = par_format;
            Py_INCREF( tmp_tuple_element_2 );
            PyTuple_SET_ITEM( tmp_right_name_3, 1, tmp_tuple_element_2 );
            tmp_make_exception_arg_4 = BINARY_OPERATION_REMAINDER( tmp_left_name_3, tmp_right_name_3 );
            Py_DECREF( tmp_right_name_3 );
            if ( tmp_make_exception_arg_4 == NULL )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 358;
                type_description_1 = "oooooooooooooooooooooooooooooooooooooooboooo";
                goto frame_exception_exit_1;
            }
            frame_285d3548e213aa4c5d6aef1855a305f1->m_frame.f_lineno = 358;
            {
                PyObject *call_args[] = { tmp_make_exception_arg_4 };
                tmp_raise_type_4 = CALL_FUNCTION_WITH_ARGS1( PyExc_ValueError, call_args );
            }

            Py_DECREF( tmp_make_exception_arg_4 );
            assert( !(tmp_raise_type_4 == NULL) );
            exception_type = tmp_raise_type_4;
            exception_lineno = 358;
            RAISE_EXCEPTION_WITH_TYPE( &exception_type, &exception_value, &exception_tb );
            type_description_1 = "oooooooooooooooooooooooooooooooooooooooboooo";
            goto frame_exception_exit_1;
        }
        branch_no_12:;
    }
    {
        nuitka_bool tmp_condition_result_13;
        PyObject *tmp_compexpr_left_11;
        PyObject *tmp_compexpr_right_11;
        PyObject *tmp_len_arg_2;
        PyObject *tmp_called_instance_7;
        CHECK_OBJECT( par_data_string );
        tmp_len_arg_2 = par_data_string;
        tmp_compexpr_left_11 = BUILTIN_LEN( tmp_len_arg_2 );
        if ( tmp_compexpr_left_11 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 360;
            type_description_1 = "oooooooooooooooooooooooooooooooooooooooboooo";
            goto frame_exception_exit_1;
        }
        CHECK_OBJECT( var_found );
        tmp_called_instance_7 = var_found;
        frame_285d3548e213aa4c5d6aef1855a305f1->m_frame.f_lineno = 360;
        tmp_compexpr_right_11 = CALL_METHOD_NO_ARGS( tmp_called_instance_7, const_str_plain_end );
        if ( tmp_compexpr_right_11 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
            Py_DECREF( tmp_compexpr_left_11 );

            exception_lineno = 360;
            type_description_1 = "oooooooooooooooooooooooooooooooooooooooboooo";
            goto frame_exception_exit_1;
        }
        tmp_res = RICH_COMPARE_BOOL_NOTEQ_OBJECT_OBJECT( tmp_compexpr_left_11, tmp_compexpr_right_11 );
        Py_DECREF( tmp_compexpr_left_11 );
        Py_DECREF( tmp_compexpr_right_11 );
        if ( tmp_res == -1 )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 360;
            type_description_1 = "oooooooooooooooooooooooooooooooooooooooboooo";
            goto frame_exception_exit_1;
        }
        tmp_condition_result_13 = ( tmp_res != 0 ) ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
        if ( tmp_condition_result_13 == NUITKA_BOOL_TRUE )
        {
            goto branch_yes_13;
        }
        else
        {
            goto branch_no_13;
        }
        branch_yes_13:;
        {
            PyObject *tmp_raise_type_5;
            PyObject *tmp_make_exception_arg_5;
            PyObject *tmp_left_name_4;
            PyObject *tmp_right_name_4;
            PyObject *tmp_subscribed_name_2;
            PyObject *tmp_subscript_name_2;
            PyObject *tmp_start_name_1;
            PyObject *tmp_called_instance_8;
            PyObject *tmp_stop_name_1;
            PyObject *tmp_step_name_1;
            tmp_left_name_4 = const_str_digest_f43cf1ead0b8ec9f715c50ee8fb085ee;
            CHECK_OBJECT( par_data_string );
            tmp_subscribed_name_2 = par_data_string;
            CHECK_OBJECT( var_found );
            tmp_called_instance_8 = var_found;
            frame_285d3548e213aa4c5d6aef1855a305f1->m_frame.f_lineno = 362;
            tmp_start_name_1 = CALL_METHOD_NO_ARGS( tmp_called_instance_8, const_str_plain_end );
            if ( tmp_start_name_1 == NULL )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 362;
                type_description_1 = "oooooooooooooooooooooooooooooooooooooooboooo";
                goto frame_exception_exit_1;
            }
            tmp_stop_name_1 = Py_None;
            tmp_step_name_1 = Py_None;
            tmp_subscript_name_2 = MAKE_SLICEOBJ3( tmp_start_name_1, tmp_stop_name_1, tmp_step_name_1 );
            Py_DECREF( tmp_start_name_1 );
            assert( !(tmp_subscript_name_2 == NULL) );
            tmp_right_name_4 = LOOKUP_SUBSCRIPT( tmp_subscribed_name_2, tmp_subscript_name_2 );
            Py_DECREF( tmp_subscript_name_2 );
            if ( tmp_right_name_4 == NULL )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 362;
                type_description_1 = "oooooooooooooooooooooooooooooooooooooooboooo";
                goto frame_exception_exit_1;
            }
            tmp_make_exception_arg_5 = BINARY_OPERATION_REMAINDER( tmp_left_name_4, tmp_right_name_4 );
            Py_DECREF( tmp_right_name_4 );
            if ( tmp_make_exception_arg_5 == NULL )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 361;
                type_description_1 = "oooooooooooooooooooooooooooooooooooooooboooo";
                goto frame_exception_exit_1;
            }
            frame_285d3548e213aa4c5d6aef1855a305f1->m_frame.f_lineno = 361;
            {
                PyObject *call_args[] = { tmp_make_exception_arg_5 };
                tmp_raise_type_5 = CALL_FUNCTION_WITH_ARGS1( PyExc_ValueError, call_args );
            }

            Py_DECREF( tmp_make_exception_arg_5 );
            assert( !(tmp_raise_type_5 == NULL) );
            exception_type = tmp_raise_type_5;
            exception_lineno = 361;
            RAISE_EXCEPTION_WITH_TYPE( &exception_type, &exception_value, &exception_tb );
            type_description_1 = "oooooooooooooooooooooooooooooooooooooooboooo";
            goto frame_exception_exit_1;
        }
        branch_no_13:;
    }
    {
        PyObject *tmp_assign_source_22;
        tmp_assign_source_22 = Py_None;
        assert( var_iso_year == NULL );
        Py_INCREF( tmp_assign_source_22 );
        var_iso_year = tmp_assign_source_22;
    }
    {
        PyObject *tmp_assign_source_23;
        tmp_assign_source_23 = Py_None;
        assert( var_year == NULL );
        Py_INCREF( tmp_assign_source_23 );
        var_year = tmp_assign_source_23;
    }
    {
        PyObject *tmp_assign_source_24;
        tmp_assign_source_24 = const_int_pos_1;
        assert( var_month == NULL );
        Py_INCREF( tmp_assign_source_24 );
        var_month = tmp_assign_source_24;
    }
    {
        PyObject *tmp_assign_source_25;
        tmp_assign_source_25 = const_int_pos_1;
        assert( var_day == NULL );
        Py_INCREF( tmp_assign_source_25 );
        var_day = tmp_assign_source_25;
    }
    {
        PyObject *tmp_assign_source_26;
        tmp_assign_source_26 = const_int_0;
        assert( var_hour == NULL );
        Py_INCREF( tmp_assign_source_26 );
        var_hour = tmp_assign_source_26;
    }
    {
        PyObject *tmp_assign_source_27;
        tmp_assign_source_27 = const_int_0;
        assert( var_minute == NULL );
        Py_INCREF( tmp_assign_source_27 );
        var_minute = tmp_assign_source_27;
    }
    {
        PyObject *tmp_assign_source_28;
        tmp_assign_source_28 = const_int_0;
        assert( var_second == NULL );
        Py_INCREF( tmp_assign_source_28 );
        var_second = tmp_assign_source_28;
    }
    {
        PyObject *tmp_assign_source_29;
        tmp_assign_source_29 = const_int_0;
        assert( var_fraction == NULL );
        Py_INCREF( tmp_assign_source_29 );
        var_fraction = tmp_assign_source_29;
    }
    {
        PyObject *tmp_assign_source_30;
        tmp_assign_source_30 = const_int_neg_1;
        assert( var_tz == NULL );
        Py_INCREF( tmp_assign_source_30 );
        var_tz = tmp_assign_source_30;
    }
    {
        PyObject *tmp_assign_source_31;
        tmp_assign_source_31 = Py_None;
        assert( var_gmtoff == NULL );
        Py_INCREF( tmp_assign_source_31 );
        var_gmtoff = tmp_assign_source_31;
    }
    {
        PyObject *tmp_assign_source_32;
        tmp_assign_source_32 = const_int_0;
        assert( var_gmtoff_fraction == NULL );
        Py_INCREF( tmp_assign_source_32 );
        var_gmtoff_fraction = tmp_assign_source_32;
    }
    {
        PyObject *tmp_assign_source_33;
        tmp_assign_source_33 = Py_None;
        assert( var_iso_week == NULL );
        Py_INCREF( tmp_assign_source_33 );
        var_iso_week = tmp_assign_source_33;
    }
    {
        PyObject *tmp_assign_source_34;
        tmp_assign_source_34 = Py_None;
        assert( var_week_of_year == NULL );
        Py_INCREF( tmp_assign_source_34 );
        var_week_of_year = tmp_assign_source_34;
    }
    {
        PyObject *tmp_assign_source_35;
        tmp_assign_source_35 = Py_None;
        assert( var_week_of_year_start == NULL );
        Py_INCREF( tmp_assign_source_35 );
        var_week_of_year_start = tmp_assign_source_35;
    }
    {
        PyObject *tmp_assign_source_36;
        tmp_assign_source_36 = Py_None;
        assert( var_weekday == NULL );
        Py_INCREF( tmp_assign_source_36 );
        var_weekday = tmp_assign_source_36;
    }
    {
        PyObject *tmp_assign_source_37;
        tmp_assign_source_37 = Py_None;
        assert( var_julian == NULL );
        Py_INCREF( tmp_assign_source_37 );
        var_julian = tmp_assign_source_37;
    }
    {
        PyObject *tmp_assign_source_38;
        PyObject *tmp_called_instance_9;
        CHECK_OBJECT( var_found );
        tmp_called_instance_9 = var_found;
        frame_285d3548e213aa4c5d6aef1855a305f1->m_frame.f_lineno = 377;
        tmp_assign_source_38 = CALL_METHOD_NO_ARGS( tmp_called_instance_9, const_str_plain_groupdict );
        if ( tmp_assign_source_38 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 377;
            type_description_1 = "oooooooooooooooooooooooooooooooooooooooboooo";
            goto frame_exception_exit_1;
        }
        assert( var_found_dict == NULL );
        var_found_dict = tmp_assign_source_38;
    }
    {
        PyObject *tmp_assign_source_39;
        PyObject *tmp_iter_arg_3;
        PyObject *tmp_called_instance_10;
        CHECK_OBJECT( var_found_dict );
        tmp_called_instance_10 = var_found_dict;
        frame_285d3548e213aa4c5d6aef1855a305f1->m_frame.f_lineno = 378;
        tmp_iter_arg_3 = CALL_METHOD_NO_ARGS( tmp_called_instance_10, const_str_plain_keys );
        if ( tmp_iter_arg_3 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 378;
            type_description_1 = "oooooooooooooooooooooooooooooooooooooooboooo";
            goto frame_exception_exit_1;
        }
        tmp_assign_source_39 = MAKE_ITERATOR( tmp_iter_arg_3 );
        Py_DECREF( tmp_iter_arg_3 );
        if ( tmp_assign_source_39 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 378;
            type_description_1 = "oooooooooooooooooooooooooooooooooooooooboooo";
            goto frame_exception_exit_1;
        }
        assert( tmp_for_loop_2__for_iterator == NULL );
        tmp_for_loop_2__for_iterator = tmp_assign_source_39;
    }
    // Tried code:
    loop_start_2:;
    {
        PyObject *tmp_next_source_2;
        PyObject *tmp_assign_source_40;
        CHECK_OBJECT( tmp_for_loop_2__for_iterator );
        tmp_next_source_2 = tmp_for_loop_2__for_iterator;
        tmp_assign_source_40 = ITERATOR_NEXT( tmp_next_source_2 );
        if ( tmp_assign_source_40 == NULL )
        {
            if ( CHECK_AND_CLEAR_STOP_ITERATION_OCCURRED() )
            {

                goto loop_end_2;
            }
            else
            {

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
                type_description_1 = "oooooooooooooooooooooooooooooooooooooooboooo";
                exception_lineno = 378;
                goto try_except_handler_12;
            }
        }

        {
            PyObject *old = tmp_for_loop_2__iter_value;
            tmp_for_loop_2__iter_value = tmp_assign_source_40;
            Py_XDECREF( old );
        }

    }
    {
        PyObject *tmp_assign_source_41;
        CHECK_OBJECT( tmp_for_loop_2__iter_value );
        tmp_assign_source_41 = tmp_for_loop_2__iter_value;
        {
            PyObject *old = var_group_key;
            var_group_key = tmp_assign_source_41;
            Py_INCREF( var_group_key );
            Py_XDECREF( old );
        }

    }
    {
        nuitka_bool tmp_condition_result_14;
        PyObject *tmp_compexpr_left_12;
        PyObject *tmp_compexpr_right_12;
        CHECK_OBJECT( var_group_key );
        tmp_compexpr_left_12 = var_group_key;
        tmp_compexpr_right_12 = const_str_plain_y;
        tmp_res = RICH_COMPARE_BOOL_EQ_OBJECT_OBJECT( tmp_compexpr_left_12, tmp_compexpr_right_12 );
        if ( tmp_res == -1 )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 384;
            type_description_1 = "oooooooooooooooooooooooooooooooooooooooboooo";
            goto try_except_handler_12;
        }
        tmp_condition_result_14 = ( tmp_res != 0 ) ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
        if ( tmp_condition_result_14 == NUITKA_BOOL_TRUE )
        {
            goto branch_yes_14;
        }
        else
        {
            goto branch_no_14;
        }
        branch_yes_14:;
        {
            PyObject *tmp_assign_source_42;
            PyObject *tmp_int_arg_1;
            PyObject *tmp_subscribed_name_3;
            PyObject *tmp_subscript_name_3;
            CHECK_OBJECT( var_found_dict );
            tmp_subscribed_name_3 = var_found_dict;
            tmp_subscript_name_3 = const_str_plain_y;
            tmp_int_arg_1 = LOOKUP_SUBSCRIPT( tmp_subscribed_name_3, tmp_subscript_name_3 );
            if ( tmp_int_arg_1 == NULL )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 385;
                type_description_1 = "oooooooooooooooooooooooooooooooooooooooboooo";
                goto try_except_handler_12;
            }
            tmp_assign_source_42 = PyNumber_Int( tmp_int_arg_1 );
            Py_DECREF( tmp_int_arg_1 );
            if ( tmp_assign_source_42 == NULL )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 385;
                type_description_1 = "oooooooooooooooooooooooooooooooooooooooboooo";
                goto try_except_handler_12;
            }
            {
                PyObject *old = var_year;
                var_year = tmp_assign_source_42;
                Py_XDECREF( old );
            }

        }
        {
            nuitka_bool tmp_condition_result_15;
            PyObject *tmp_compexpr_left_13;
            PyObject *tmp_compexpr_right_13;
            CHECK_OBJECT( var_year );
            tmp_compexpr_left_13 = var_year;
            tmp_compexpr_right_13 = const_int_pos_68;
            tmp_res = RICH_COMPARE_BOOL_LTE_OBJECT_OBJECT( tmp_compexpr_left_13, tmp_compexpr_right_13 );
            if ( tmp_res == -1 )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 389;
                type_description_1 = "oooooooooooooooooooooooooooooooooooooooboooo";
                goto try_except_handler_12;
            }
            tmp_condition_result_15 = ( tmp_res != 0 ) ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
            if ( tmp_condition_result_15 == NUITKA_BOOL_TRUE )
            {
                goto branch_yes_15;
            }
            else
            {
                goto branch_no_15;
            }
            branch_yes_15:;
            {
                PyObject *tmp_assign_source_43;
                PyObject *tmp_left_name_5;
                PyObject *tmp_right_name_5;
                CHECK_OBJECT( var_year );
                tmp_left_name_5 = var_year;
                tmp_right_name_5 = const_int_pos_2000;
                tmp_result = BINARY_OPERATION_ADD_OBJECT_LONG_INPLACE( &tmp_left_name_5, tmp_right_name_5 );
                if ( tmp_result == false )
                {
                    assert( ERROR_OCCURRED() );

                    FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                    exception_lineno = 390;
                    type_description_1 = "oooooooooooooooooooooooooooooooooooooooboooo";
                    goto try_except_handler_12;
                }
                tmp_assign_source_43 = tmp_left_name_5;
                var_year = tmp_assign_source_43;

            }
            goto branch_end_15;
            branch_no_15:;
            {
                PyObject *tmp_assign_source_44;
                PyObject *tmp_left_name_6;
                PyObject *tmp_right_name_6;
                CHECK_OBJECT( var_year );
                tmp_left_name_6 = var_year;
                tmp_right_name_6 = const_int_pos_1900;
                tmp_result = BINARY_OPERATION_ADD_OBJECT_LONG_INPLACE( &tmp_left_name_6, tmp_right_name_6 );
                if ( tmp_result == false )
                {
                    assert( ERROR_OCCURRED() );

                    FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                    exception_lineno = 392;
                    type_description_1 = "oooooooooooooooooooooooooooooooooooooooboooo";
                    goto try_except_handler_12;
                }
                tmp_assign_source_44 = tmp_left_name_6;
                var_year = tmp_assign_source_44;

            }
            branch_end_15:;
        }
        goto branch_end_14;
        branch_no_14:;
        {
            nuitka_bool tmp_condition_result_16;
            PyObject *tmp_compexpr_left_14;
            PyObject *tmp_compexpr_right_14;
            CHECK_OBJECT( var_group_key );
            tmp_compexpr_left_14 = var_group_key;
            tmp_compexpr_right_14 = const_str_plain_Y;
            tmp_res = RICH_COMPARE_BOOL_EQ_OBJECT_OBJECT( tmp_compexpr_left_14, tmp_compexpr_right_14 );
            if ( tmp_res == -1 )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 393;
                type_description_1 = "oooooooooooooooooooooooooooooooooooooooboooo";
                goto try_except_handler_12;
            }
            tmp_condition_result_16 = ( tmp_res != 0 ) ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
            if ( tmp_condition_result_16 == NUITKA_BOOL_TRUE )
            {
                goto branch_yes_16;
            }
            else
            {
                goto branch_no_16;
            }
            branch_yes_16:;
            {
                PyObject *tmp_assign_source_45;
                PyObject *tmp_int_arg_2;
                PyObject *tmp_subscribed_name_4;
                PyObject *tmp_subscript_name_4;
                CHECK_OBJECT( var_found_dict );
                tmp_subscribed_name_4 = var_found_dict;
                tmp_subscript_name_4 = const_str_plain_Y;
                tmp_int_arg_2 = LOOKUP_SUBSCRIPT( tmp_subscribed_name_4, tmp_subscript_name_4 );
                if ( tmp_int_arg_2 == NULL )
                {
                    assert( ERROR_OCCURRED() );

                    FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                    exception_lineno = 394;
                    type_description_1 = "oooooooooooooooooooooooooooooooooooooooboooo";
                    goto try_except_handler_12;
                }
                tmp_assign_source_45 = PyNumber_Int( tmp_int_arg_2 );
                Py_DECREF( tmp_int_arg_2 );
                if ( tmp_assign_source_45 == NULL )
                {
                    assert( ERROR_OCCURRED() );

                    FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                    exception_lineno = 394;
                    type_description_1 = "oooooooooooooooooooooooooooooooooooooooboooo";
                    goto try_except_handler_12;
                }
                {
                    PyObject *old = var_year;
                    var_year = tmp_assign_source_45;
                    Py_XDECREF( old );
                }

            }
            goto branch_end_16;
            branch_no_16:;
            {
                nuitka_bool tmp_condition_result_17;
                PyObject *tmp_compexpr_left_15;
                PyObject *tmp_compexpr_right_15;
                CHECK_OBJECT( var_group_key );
                tmp_compexpr_left_15 = var_group_key;
                tmp_compexpr_right_15 = const_str_plain_G;
                tmp_res = RICH_COMPARE_BOOL_EQ_OBJECT_OBJECT( tmp_compexpr_left_15, tmp_compexpr_right_15 );
                if ( tmp_res == -1 )
                {
                    assert( ERROR_OCCURRED() );

                    FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                    exception_lineno = 395;
                    type_description_1 = "oooooooooooooooooooooooooooooooooooooooboooo";
                    goto try_except_handler_12;
                }
                tmp_condition_result_17 = ( tmp_res != 0 ) ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
                if ( tmp_condition_result_17 == NUITKA_BOOL_TRUE )
                {
                    goto branch_yes_17;
                }
                else
                {
                    goto branch_no_17;
                }
                branch_yes_17:;
                {
                    PyObject *tmp_assign_source_46;
                    PyObject *tmp_int_arg_3;
                    PyObject *tmp_subscribed_name_5;
                    PyObject *tmp_subscript_name_5;
                    CHECK_OBJECT( var_found_dict );
                    tmp_subscribed_name_5 = var_found_dict;
                    tmp_subscript_name_5 = const_str_plain_G;
                    tmp_int_arg_3 = LOOKUP_SUBSCRIPT( tmp_subscribed_name_5, tmp_subscript_name_5 );
                    if ( tmp_int_arg_3 == NULL )
                    {
                        assert( ERROR_OCCURRED() );

                        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                        exception_lineno = 396;
                        type_description_1 = "oooooooooooooooooooooooooooooooooooooooboooo";
                        goto try_except_handler_12;
                    }
                    tmp_assign_source_46 = PyNumber_Int( tmp_int_arg_3 );
                    Py_DECREF( tmp_int_arg_3 );
                    if ( tmp_assign_source_46 == NULL )
                    {
                        assert( ERROR_OCCURRED() );

                        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                        exception_lineno = 396;
                        type_description_1 = "oooooooooooooooooooooooooooooooooooooooboooo";
                        goto try_except_handler_12;
                    }
                    {
                        PyObject *old = var_iso_year;
                        var_iso_year = tmp_assign_source_46;
                        Py_XDECREF( old );
                    }

                }
                goto branch_end_17;
                branch_no_17:;
                {
                    nuitka_bool tmp_condition_result_18;
                    PyObject *tmp_compexpr_left_16;
                    PyObject *tmp_compexpr_right_16;
                    CHECK_OBJECT( var_group_key );
                    tmp_compexpr_left_16 = var_group_key;
                    tmp_compexpr_right_16 = const_str_plain_m;
                    tmp_res = RICH_COMPARE_BOOL_EQ_OBJECT_OBJECT( tmp_compexpr_left_16, tmp_compexpr_right_16 );
                    if ( tmp_res == -1 )
                    {
                        assert( ERROR_OCCURRED() );

                        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                        exception_lineno = 397;
                        type_description_1 = "oooooooooooooooooooooooooooooooooooooooboooo";
                        goto try_except_handler_12;
                    }
                    tmp_condition_result_18 = ( tmp_res != 0 ) ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
                    if ( tmp_condition_result_18 == NUITKA_BOOL_TRUE )
                    {
                        goto branch_yes_18;
                    }
                    else
                    {
                        goto branch_no_18;
                    }
                    branch_yes_18:;
                    {
                        PyObject *tmp_assign_source_47;
                        PyObject *tmp_int_arg_4;
                        PyObject *tmp_subscribed_name_6;
                        PyObject *tmp_subscript_name_6;
                        CHECK_OBJECT( var_found_dict );
                        tmp_subscribed_name_6 = var_found_dict;
                        tmp_subscript_name_6 = const_str_plain_m;
                        tmp_int_arg_4 = LOOKUP_SUBSCRIPT( tmp_subscribed_name_6, tmp_subscript_name_6 );
                        if ( tmp_int_arg_4 == NULL )
                        {
                            assert( ERROR_OCCURRED() );

                            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                            exception_lineno = 398;
                            type_description_1 = "oooooooooooooooooooooooooooooooooooooooboooo";
                            goto try_except_handler_12;
                        }
                        tmp_assign_source_47 = PyNumber_Int( tmp_int_arg_4 );
                        Py_DECREF( tmp_int_arg_4 );
                        if ( tmp_assign_source_47 == NULL )
                        {
                            assert( ERROR_OCCURRED() );

                            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                            exception_lineno = 398;
                            type_description_1 = "oooooooooooooooooooooooooooooooooooooooboooo";
                            goto try_except_handler_12;
                        }
                        {
                            PyObject *old = var_month;
                            var_month = tmp_assign_source_47;
                            Py_XDECREF( old );
                        }

                    }
                    goto branch_end_18;
                    branch_no_18:;
                    {
                        nuitka_bool tmp_condition_result_19;
                        PyObject *tmp_compexpr_left_17;
                        PyObject *tmp_compexpr_right_17;
                        CHECK_OBJECT( var_group_key );
                        tmp_compexpr_left_17 = var_group_key;
                        tmp_compexpr_right_17 = const_str_plain_B;
                        tmp_res = RICH_COMPARE_BOOL_EQ_OBJECT_OBJECT( tmp_compexpr_left_17, tmp_compexpr_right_17 );
                        if ( tmp_res == -1 )
                        {
                            assert( ERROR_OCCURRED() );

                            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                            exception_lineno = 399;
                            type_description_1 = "oooooooooooooooooooooooooooooooooooooooboooo";
                            goto try_except_handler_12;
                        }
                        tmp_condition_result_19 = ( tmp_res != 0 ) ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
                        if ( tmp_condition_result_19 == NUITKA_BOOL_TRUE )
                        {
                            goto branch_yes_19;
                        }
                        else
                        {
                            goto branch_no_19;
                        }
                        branch_yes_19:;
                        {
                            PyObject *tmp_assign_source_48;
                            PyObject *tmp_called_name_8;
                            PyObject *tmp_source_name_11;
                            PyObject *tmp_source_name_12;
                            PyObject *tmp_args_element_name_10;
                            PyObject *tmp_called_instance_11;
                            PyObject *tmp_subscribed_name_7;
                            PyObject *tmp_subscript_name_7;
                            if ( var_locale_time == NULL )
                            {

                                exception_type = PyExc_UnboundLocalError;
                                Py_INCREF( exception_type );
                                exception_value = PyUnicode_FromFormat( "local variable '%s' referenced before assignment", "locale_time" );
                                exception_tb = NULL;
                                NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
                                CHAIN_EXCEPTION( exception_value );

                                exception_lineno = 400;
                                type_description_1 = "oooooooooooooooooooooooooooooooooooooooboooo";
                                goto try_except_handler_12;
                            }

                            tmp_source_name_12 = var_locale_time;
                            tmp_source_name_11 = LOOKUP_ATTRIBUTE( tmp_source_name_12, const_str_plain_f_month );
                            if ( tmp_source_name_11 == NULL )
                            {
                                assert( ERROR_OCCURRED() );

                                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                                exception_lineno = 400;
                                type_description_1 = "oooooooooooooooooooooooooooooooooooooooboooo";
                                goto try_except_handler_12;
                            }
                            tmp_called_name_8 = LOOKUP_ATTRIBUTE( tmp_source_name_11, const_str_plain_index );
                            Py_DECREF( tmp_source_name_11 );
                            if ( tmp_called_name_8 == NULL )
                            {
                                assert( ERROR_OCCURRED() );

                                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                                exception_lineno = 400;
                                type_description_1 = "oooooooooooooooooooooooooooooooooooooooboooo";
                                goto try_except_handler_12;
                            }
                            CHECK_OBJECT( var_found_dict );
                            tmp_subscribed_name_7 = var_found_dict;
                            tmp_subscript_name_7 = const_str_plain_B;
                            tmp_called_instance_11 = LOOKUP_SUBSCRIPT( tmp_subscribed_name_7, tmp_subscript_name_7 );
                            if ( tmp_called_instance_11 == NULL )
                            {
                                assert( ERROR_OCCURRED() );

                                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
                                Py_DECREF( tmp_called_name_8 );

                                exception_lineno = 400;
                                type_description_1 = "oooooooooooooooooooooooooooooooooooooooboooo";
                                goto try_except_handler_12;
                            }
                            frame_285d3548e213aa4c5d6aef1855a305f1->m_frame.f_lineno = 400;
                            tmp_args_element_name_10 = CALL_METHOD_NO_ARGS( tmp_called_instance_11, const_str_plain_lower );
                            Py_DECREF( tmp_called_instance_11 );
                            if ( tmp_args_element_name_10 == NULL )
                            {
                                assert( ERROR_OCCURRED() );

                                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
                                Py_DECREF( tmp_called_name_8 );

                                exception_lineno = 400;
                                type_description_1 = "oooooooooooooooooooooooooooooooooooooooboooo";
                                goto try_except_handler_12;
                            }
                            frame_285d3548e213aa4c5d6aef1855a305f1->m_frame.f_lineno = 400;
                            {
                                PyObject *call_args[] = { tmp_args_element_name_10 };
                                tmp_assign_source_48 = CALL_FUNCTION_WITH_ARGS1( tmp_called_name_8, call_args );
                            }

                            Py_DECREF( tmp_called_name_8 );
                            Py_DECREF( tmp_args_element_name_10 );
                            if ( tmp_assign_source_48 == NULL )
                            {
                                assert( ERROR_OCCURRED() );

                                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                                exception_lineno = 400;
                                type_description_1 = "oooooooooooooooooooooooooooooooooooooooboooo";
                                goto try_except_handler_12;
                            }
                            {
                                PyObject *old = var_month;
                                var_month = tmp_assign_source_48;
                                Py_XDECREF( old );
                            }

                        }
                        goto branch_end_19;
                        branch_no_19:;
                        {
                            nuitka_bool tmp_condition_result_20;
                            PyObject *tmp_compexpr_left_18;
                            PyObject *tmp_compexpr_right_18;
                            CHECK_OBJECT( var_group_key );
                            tmp_compexpr_left_18 = var_group_key;
                            tmp_compexpr_right_18 = const_str_plain_b;
                            tmp_res = RICH_COMPARE_BOOL_EQ_OBJECT_OBJECT( tmp_compexpr_left_18, tmp_compexpr_right_18 );
                            if ( tmp_res == -1 )
                            {
                                assert( ERROR_OCCURRED() );

                                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                                exception_lineno = 401;
                                type_description_1 = "oooooooooooooooooooooooooooooooooooooooboooo";
                                goto try_except_handler_12;
                            }
                            tmp_condition_result_20 = ( tmp_res != 0 ) ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
                            if ( tmp_condition_result_20 == NUITKA_BOOL_TRUE )
                            {
                                goto branch_yes_20;
                            }
                            else
                            {
                                goto branch_no_20;
                            }
                            branch_yes_20:;
                            {
                                PyObject *tmp_assign_source_49;
                                PyObject *tmp_called_name_9;
                                PyObject *tmp_source_name_13;
                                PyObject *tmp_source_name_14;
                                PyObject *tmp_args_element_name_11;
                                PyObject *tmp_called_instance_12;
                                PyObject *tmp_subscribed_name_8;
                                PyObject *tmp_subscript_name_8;
                                if ( var_locale_time == NULL )
                                {

                                    exception_type = PyExc_UnboundLocalError;
                                    Py_INCREF( exception_type );
                                    exception_value = PyUnicode_FromFormat( "local variable '%s' referenced before assignment", "locale_time" );
                                    exception_tb = NULL;
                                    NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
                                    CHAIN_EXCEPTION( exception_value );

                                    exception_lineno = 402;
                                    type_description_1 = "oooooooooooooooooooooooooooooooooooooooboooo";
                                    goto try_except_handler_12;
                                }

                                tmp_source_name_14 = var_locale_time;
                                tmp_source_name_13 = LOOKUP_ATTRIBUTE( tmp_source_name_14, const_str_plain_a_month );
                                if ( tmp_source_name_13 == NULL )
                                {
                                    assert( ERROR_OCCURRED() );

                                    FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                                    exception_lineno = 402;
                                    type_description_1 = "oooooooooooooooooooooooooooooooooooooooboooo";
                                    goto try_except_handler_12;
                                }
                                tmp_called_name_9 = LOOKUP_ATTRIBUTE( tmp_source_name_13, const_str_plain_index );
                                Py_DECREF( tmp_source_name_13 );
                                if ( tmp_called_name_9 == NULL )
                                {
                                    assert( ERROR_OCCURRED() );

                                    FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                                    exception_lineno = 402;
                                    type_description_1 = "oooooooooooooooooooooooooooooooooooooooboooo";
                                    goto try_except_handler_12;
                                }
                                CHECK_OBJECT( var_found_dict );
                                tmp_subscribed_name_8 = var_found_dict;
                                tmp_subscript_name_8 = const_str_plain_b;
                                tmp_called_instance_12 = LOOKUP_SUBSCRIPT( tmp_subscribed_name_8, tmp_subscript_name_8 );
                                if ( tmp_called_instance_12 == NULL )
                                {
                                    assert( ERROR_OCCURRED() );

                                    FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
                                    Py_DECREF( tmp_called_name_9 );

                                    exception_lineno = 402;
                                    type_description_1 = "oooooooooooooooooooooooooooooooooooooooboooo";
                                    goto try_except_handler_12;
                                }
                                frame_285d3548e213aa4c5d6aef1855a305f1->m_frame.f_lineno = 402;
                                tmp_args_element_name_11 = CALL_METHOD_NO_ARGS( tmp_called_instance_12, const_str_plain_lower );
                                Py_DECREF( tmp_called_instance_12 );
                                if ( tmp_args_element_name_11 == NULL )
                                {
                                    assert( ERROR_OCCURRED() );

                                    FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
                                    Py_DECREF( tmp_called_name_9 );

                                    exception_lineno = 402;
                                    type_description_1 = "oooooooooooooooooooooooooooooooooooooooboooo";
                                    goto try_except_handler_12;
                                }
                                frame_285d3548e213aa4c5d6aef1855a305f1->m_frame.f_lineno = 402;
                                {
                                    PyObject *call_args[] = { tmp_args_element_name_11 };
                                    tmp_assign_source_49 = CALL_FUNCTION_WITH_ARGS1( tmp_called_name_9, call_args );
                                }

                                Py_DECREF( tmp_called_name_9 );
                                Py_DECREF( tmp_args_element_name_11 );
                                if ( tmp_assign_source_49 == NULL )
                                {
                                    assert( ERROR_OCCURRED() );

                                    FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                                    exception_lineno = 402;
                                    type_description_1 = "oooooooooooooooooooooooooooooooooooooooboooo";
                                    goto try_except_handler_12;
                                }
                                {
                                    PyObject *old = var_month;
                                    var_month = tmp_assign_source_49;
                                    Py_XDECREF( old );
                                }

                            }
                            goto branch_end_20;
                            branch_no_20:;
                            {
                                nuitka_bool tmp_condition_result_21;
                                PyObject *tmp_compexpr_left_19;
                                PyObject *tmp_compexpr_right_19;
                                CHECK_OBJECT( var_group_key );
                                tmp_compexpr_left_19 = var_group_key;
                                tmp_compexpr_right_19 = const_str_plain_d;
                                tmp_res = RICH_COMPARE_BOOL_EQ_OBJECT_OBJECT( tmp_compexpr_left_19, tmp_compexpr_right_19 );
                                if ( tmp_res == -1 )
                                {
                                    assert( ERROR_OCCURRED() );

                                    FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                                    exception_lineno = 403;
                                    type_description_1 = "oooooooooooooooooooooooooooooooooooooooboooo";
                                    goto try_except_handler_12;
                                }
                                tmp_condition_result_21 = ( tmp_res != 0 ) ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
                                if ( tmp_condition_result_21 == NUITKA_BOOL_TRUE )
                                {
                                    goto branch_yes_21;
                                }
                                else
                                {
                                    goto branch_no_21;
                                }
                                branch_yes_21:;
                                {
                                    PyObject *tmp_assign_source_50;
                                    PyObject *tmp_int_arg_5;
                                    PyObject *tmp_subscribed_name_9;
                                    PyObject *tmp_subscript_name_9;
                                    CHECK_OBJECT( var_found_dict );
                                    tmp_subscribed_name_9 = var_found_dict;
                                    tmp_subscript_name_9 = const_str_plain_d;
                                    tmp_int_arg_5 = LOOKUP_SUBSCRIPT( tmp_subscribed_name_9, tmp_subscript_name_9 );
                                    if ( tmp_int_arg_5 == NULL )
                                    {
                                        assert( ERROR_OCCURRED() );

                                        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                                        exception_lineno = 404;
                                        type_description_1 = "oooooooooooooooooooooooooooooooooooooooboooo";
                                        goto try_except_handler_12;
                                    }
                                    tmp_assign_source_50 = PyNumber_Int( tmp_int_arg_5 );
                                    Py_DECREF( tmp_int_arg_5 );
                                    if ( tmp_assign_source_50 == NULL )
                                    {
                                        assert( ERROR_OCCURRED() );

                                        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                                        exception_lineno = 404;
                                        type_description_1 = "oooooooooooooooooooooooooooooooooooooooboooo";
                                        goto try_except_handler_12;
                                    }
                                    {
                                        PyObject *old = var_day;
                                        var_day = tmp_assign_source_50;
                                        Py_XDECREF( old );
                                    }

                                }
                                goto branch_end_21;
                                branch_no_21:;
                                {
                                    nuitka_bool tmp_condition_result_22;
                                    PyObject *tmp_compexpr_left_20;
                                    PyObject *tmp_compexpr_right_20;
                                    CHECK_OBJECT( var_group_key );
                                    tmp_compexpr_left_20 = var_group_key;
                                    tmp_compexpr_right_20 = const_str_plain_H;
                                    tmp_res = RICH_COMPARE_BOOL_EQ_OBJECT_OBJECT( tmp_compexpr_left_20, tmp_compexpr_right_20 );
                                    if ( tmp_res == -1 )
                                    {
                                        assert( ERROR_OCCURRED() );

                                        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                                        exception_lineno = 405;
                                        type_description_1 = "oooooooooooooooooooooooooooooooooooooooboooo";
                                        goto try_except_handler_12;
                                    }
                                    tmp_condition_result_22 = ( tmp_res != 0 ) ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
                                    if ( tmp_condition_result_22 == NUITKA_BOOL_TRUE )
                                    {
                                        goto branch_yes_22;
                                    }
                                    else
                                    {
                                        goto branch_no_22;
                                    }
                                    branch_yes_22:;
                                    {
                                        PyObject *tmp_assign_source_51;
                                        PyObject *tmp_int_arg_6;
                                        PyObject *tmp_subscribed_name_10;
                                        PyObject *tmp_subscript_name_10;
                                        CHECK_OBJECT( var_found_dict );
                                        tmp_subscribed_name_10 = var_found_dict;
                                        tmp_subscript_name_10 = const_str_plain_H;
                                        tmp_int_arg_6 = LOOKUP_SUBSCRIPT( tmp_subscribed_name_10, tmp_subscript_name_10 );
                                        if ( tmp_int_arg_6 == NULL )
                                        {
                                            assert( ERROR_OCCURRED() );

                                            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                                            exception_lineno = 406;
                                            type_description_1 = "oooooooooooooooooooooooooooooooooooooooboooo";
                                            goto try_except_handler_12;
                                        }
                                        tmp_assign_source_51 = PyNumber_Int( tmp_int_arg_6 );
                                        Py_DECREF( tmp_int_arg_6 );
                                        if ( tmp_assign_source_51 == NULL )
                                        {
                                            assert( ERROR_OCCURRED() );

                                            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                                            exception_lineno = 406;
                                            type_description_1 = "oooooooooooooooooooooooooooooooooooooooboooo";
                                            goto try_except_handler_12;
                                        }
                                        {
                                            PyObject *old = var_hour;
                                            var_hour = tmp_assign_source_51;
                                            Py_XDECREF( old );
                                        }

                                    }
                                    goto branch_end_22;
                                    branch_no_22:;
                                    {
                                        nuitka_bool tmp_condition_result_23;
                                        PyObject *tmp_compexpr_left_21;
                                        PyObject *tmp_compexpr_right_21;
                                        CHECK_OBJECT( var_group_key );
                                        tmp_compexpr_left_21 = var_group_key;
                                        tmp_compexpr_right_21 = const_str_plain_I;
                                        tmp_res = RICH_COMPARE_BOOL_EQ_OBJECT_OBJECT( tmp_compexpr_left_21, tmp_compexpr_right_21 );
                                        if ( tmp_res == -1 )
                                        {
                                            assert( ERROR_OCCURRED() );

                                            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                                            exception_lineno = 407;
                                            type_description_1 = "oooooooooooooooooooooooooooooooooooooooboooo";
                                            goto try_except_handler_12;
                                        }
                                        tmp_condition_result_23 = ( tmp_res != 0 ) ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
                                        if ( tmp_condition_result_23 == NUITKA_BOOL_TRUE )
                                        {
                                            goto branch_yes_23;
                                        }
                                        else
                                        {
                                            goto branch_no_23;
                                        }
                                        branch_yes_23:;
                                        {
                                            PyObject *tmp_assign_source_52;
                                            PyObject *tmp_int_arg_7;
                                            PyObject *tmp_subscribed_name_11;
                                            PyObject *tmp_subscript_name_11;
                                            CHECK_OBJECT( var_found_dict );
                                            tmp_subscribed_name_11 = var_found_dict;
                                            tmp_subscript_name_11 = const_str_plain_I;
                                            tmp_int_arg_7 = LOOKUP_SUBSCRIPT( tmp_subscribed_name_11, tmp_subscript_name_11 );
                                            if ( tmp_int_arg_7 == NULL )
                                            {
                                                assert( ERROR_OCCURRED() );

                                                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                                                exception_lineno = 408;
                                                type_description_1 = "oooooooooooooooooooooooooooooooooooooooboooo";
                                                goto try_except_handler_12;
                                            }
                                            tmp_assign_source_52 = PyNumber_Int( tmp_int_arg_7 );
                                            Py_DECREF( tmp_int_arg_7 );
                                            if ( tmp_assign_source_52 == NULL )
                                            {
                                                assert( ERROR_OCCURRED() );

                                                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                                                exception_lineno = 408;
                                                type_description_1 = "oooooooooooooooooooooooooooooooooooooooboooo";
                                                goto try_except_handler_12;
                                            }
                                            {
                                                PyObject *old = var_hour;
                                                var_hour = tmp_assign_source_52;
                                                Py_XDECREF( old );
                                            }

                                        }
                                        {
                                            PyObject *tmp_assign_source_53;
                                            PyObject *tmp_called_instance_13;
                                            PyObject *tmp_called_instance_14;
                                            CHECK_OBJECT( var_found_dict );
                                            tmp_called_instance_14 = var_found_dict;
                                            frame_285d3548e213aa4c5d6aef1855a305f1->m_frame.f_lineno = 409;
                                            tmp_called_instance_13 = CALL_METHOD_WITH_ARGS2( tmp_called_instance_14, const_str_plain_get, &PyTuple_GET_ITEM( const_tuple_str_plain_p_str_empty_tuple, 0 ) );

                                            if ( tmp_called_instance_13 == NULL )
                                            {
                                                assert( ERROR_OCCURRED() );

                                                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                                                exception_lineno = 409;
                                                type_description_1 = "oooooooooooooooooooooooooooooooooooooooboooo";
                                                goto try_except_handler_12;
                                            }
                                            frame_285d3548e213aa4c5d6aef1855a305f1->m_frame.f_lineno = 409;
                                            tmp_assign_source_53 = CALL_METHOD_NO_ARGS( tmp_called_instance_13, const_str_plain_lower );
                                            Py_DECREF( tmp_called_instance_13 );
                                            if ( tmp_assign_source_53 == NULL )
                                            {
                                                assert( ERROR_OCCURRED() );

                                                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                                                exception_lineno = 409;
                                                type_description_1 = "oooooooooooooooooooooooooooooooooooooooboooo";
                                                goto try_except_handler_12;
                                            }
                                            {
                                                PyObject *old = var_ampm;
                                                var_ampm = tmp_assign_source_53;
                                                Py_XDECREF( old );
                                            }

                                        }
                                        {
                                            nuitka_bool tmp_condition_result_24;
                                            PyObject *tmp_compexpr_left_22;
                                            PyObject *tmp_compexpr_right_22;
                                            PyObject *tmp_tuple_element_3;
                                            PyObject *tmp_subscribed_name_12;
                                            PyObject *tmp_source_name_15;
                                            PyObject *tmp_subscript_name_12;
                                            CHECK_OBJECT( var_ampm );
                                            tmp_compexpr_left_22 = var_ampm;
                                            tmp_tuple_element_3 = const_str_empty;
                                            tmp_compexpr_right_22 = PyTuple_New( 2 );
                                            Py_INCREF( tmp_tuple_element_3 );
                                            PyTuple_SET_ITEM( tmp_compexpr_right_22, 0, tmp_tuple_element_3 );
                                            if ( var_locale_time == NULL )
                                            {
                                                Py_DECREF( tmp_compexpr_right_22 );
                                                exception_type = PyExc_UnboundLocalError;
                                                Py_INCREF( exception_type );
                                                exception_value = PyUnicode_FromFormat( "local variable '%s' referenced before assignment", "locale_time" );
                                                exception_tb = NULL;
                                                NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
                                                CHAIN_EXCEPTION( exception_value );

                                                exception_lineno = 411;
                                                type_description_1 = "oooooooooooooooooooooooooooooooooooooooboooo";
                                                goto try_except_handler_12;
                                            }

                                            tmp_source_name_15 = var_locale_time;
                                            tmp_subscribed_name_12 = LOOKUP_ATTRIBUTE( tmp_source_name_15, const_str_plain_am_pm );
                                            if ( tmp_subscribed_name_12 == NULL )
                                            {
                                                assert( ERROR_OCCURRED() );

                                                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
                                                Py_DECREF( tmp_compexpr_right_22 );

                                                exception_lineno = 411;
                                                type_description_1 = "oooooooooooooooooooooooooooooooooooooooboooo";
                                                goto try_except_handler_12;
                                            }
                                            tmp_subscript_name_12 = const_int_0;
                                            tmp_tuple_element_3 = LOOKUP_SUBSCRIPT_CONST( tmp_subscribed_name_12, tmp_subscript_name_12, 0 );
                                            Py_DECREF( tmp_subscribed_name_12 );
                                            if ( tmp_tuple_element_3 == NULL )
                                            {
                                                assert( ERROR_OCCURRED() );

                                                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
                                                Py_DECREF( tmp_compexpr_right_22 );

                                                exception_lineno = 411;
                                                type_description_1 = "oooooooooooooooooooooooooooooooooooooooboooo";
                                                goto try_except_handler_12;
                                            }
                                            PyTuple_SET_ITEM( tmp_compexpr_right_22, 1, tmp_tuple_element_3 );
                                            tmp_res = PySequence_Contains( tmp_compexpr_right_22, tmp_compexpr_left_22 );
                                            Py_DECREF( tmp_compexpr_right_22 );
                                            if ( tmp_res == -1 )
                                            {
                                                assert( ERROR_OCCURRED() );

                                                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                                                exception_lineno = 411;
                                                type_description_1 = "oooooooooooooooooooooooooooooooooooooooboooo";
                                                goto try_except_handler_12;
                                            }
                                            tmp_condition_result_24 = ( tmp_res == 1 ) ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
                                            if ( tmp_condition_result_24 == NUITKA_BOOL_TRUE )
                                            {
                                                goto branch_yes_24;
                                            }
                                            else
                                            {
                                                goto branch_no_24;
                                            }
                                            branch_yes_24:;
                                            {
                                                nuitka_bool tmp_condition_result_25;
                                                PyObject *tmp_compexpr_left_23;
                                                PyObject *tmp_compexpr_right_23;
                                                CHECK_OBJECT( var_hour );
                                                tmp_compexpr_left_23 = var_hour;
                                                tmp_compexpr_right_23 = const_int_pos_12;
                                                tmp_res = RICH_COMPARE_BOOL_EQ_OBJECT_OBJECT( tmp_compexpr_left_23, tmp_compexpr_right_23 );
                                                if ( tmp_res == -1 )
                                                {
                                                    assert( ERROR_OCCURRED() );

                                                    FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                                                    exception_lineno = 415;
                                                    type_description_1 = "oooooooooooooooooooooooooooooooooooooooboooo";
                                                    goto try_except_handler_12;
                                                }
                                                tmp_condition_result_25 = ( tmp_res != 0 ) ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
                                                if ( tmp_condition_result_25 == NUITKA_BOOL_TRUE )
                                                {
                                                    goto branch_yes_25;
                                                }
                                                else
                                                {
                                                    goto branch_no_25;
                                                }
                                                branch_yes_25:;
                                                {
                                                    PyObject *tmp_assign_source_54;
                                                    tmp_assign_source_54 = const_int_0;
                                                    {
                                                        PyObject *old = var_hour;
                                                        assert( old != NULL );
                                                        var_hour = tmp_assign_source_54;
                                                        Py_INCREF( var_hour );
                                                        Py_DECREF( old );
                                                    }

                                                }
                                                branch_no_25:;
                                            }
                                            goto branch_end_24;
                                            branch_no_24:;
                                            {
                                                nuitka_bool tmp_condition_result_26;
                                                PyObject *tmp_compexpr_left_24;
                                                PyObject *tmp_compexpr_right_24;
                                                PyObject *tmp_subscribed_name_13;
                                                PyObject *tmp_source_name_16;
                                                PyObject *tmp_subscript_name_13;
                                                CHECK_OBJECT( var_ampm );
                                                tmp_compexpr_left_24 = var_ampm;
                                                if ( var_locale_time == NULL )
                                                {

                                                    exception_type = PyExc_UnboundLocalError;
                                                    Py_INCREF( exception_type );
                                                    exception_value = PyUnicode_FromFormat( "local variable '%s' referenced before assignment", "locale_time" );
                                                    exception_tb = NULL;
                                                    NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
                                                    CHAIN_EXCEPTION( exception_value );

                                                    exception_lineno = 417;
                                                    type_description_1 = "oooooooooooooooooooooooooooooooooooooooboooo";
                                                    goto try_except_handler_12;
                                                }

                                                tmp_source_name_16 = var_locale_time;
                                                tmp_subscribed_name_13 = LOOKUP_ATTRIBUTE( tmp_source_name_16, const_str_plain_am_pm );
                                                if ( tmp_subscribed_name_13 == NULL )
                                                {
                                                    assert( ERROR_OCCURRED() );

                                                    FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                                                    exception_lineno = 417;
                                                    type_description_1 = "oooooooooooooooooooooooooooooooooooooooboooo";
                                                    goto try_except_handler_12;
                                                }
                                                tmp_subscript_name_13 = const_int_pos_1;
                                                tmp_compexpr_right_24 = LOOKUP_SUBSCRIPT_CONST( tmp_subscribed_name_13, tmp_subscript_name_13, 1 );
                                                Py_DECREF( tmp_subscribed_name_13 );
                                                if ( tmp_compexpr_right_24 == NULL )
                                                {
                                                    assert( ERROR_OCCURRED() );

                                                    FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                                                    exception_lineno = 417;
                                                    type_description_1 = "oooooooooooooooooooooooooooooooooooooooboooo";
                                                    goto try_except_handler_12;
                                                }
                                                tmp_res = RICH_COMPARE_BOOL_EQ_OBJECT_OBJECT( tmp_compexpr_left_24, tmp_compexpr_right_24 );
                                                Py_DECREF( tmp_compexpr_right_24 );
                                                if ( tmp_res == -1 )
                                                {
                                                    assert( ERROR_OCCURRED() );

                                                    FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                                                    exception_lineno = 417;
                                                    type_description_1 = "oooooooooooooooooooooooooooooooooooooooboooo";
                                                    goto try_except_handler_12;
                                                }
                                                tmp_condition_result_26 = ( tmp_res != 0 ) ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
                                                if ( tmp_condition_result_26 == NUITKA_BOOL_TRUE )
                                                {
                                                    goto branch_yes_26;
                                                }
                                                else
                                                {
                                                    goto branch_no_26;
                                                }
                                                branch_yes_26:;
                                                {
                                                    nuitka_bool tmp_condition_result_27;
                                                    PyObject *tmp_compexpr_left_25;
                                                    PyObject *tmp_compexpr_right_25;
                                                    CHECK_OBJECT( var_hour );
                                                    tmp_compexpr_left_25 = var_hour;
                                                    tmp_compexpr_right_25 = const_int_pos_12;
                                                    tmp_res = RICH_COMPARE_BOOL_NOTEQ_OBJECT_OBJECT( tmp_compexpr_left_25, tmp_compexpr_right_25 );
                                                    if ( tmp_res == -1 )
                                                    {
                                                        assert( ERROR_OCCURRED() );

                                                        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                                                        exception_lineno = 421;
                                                        type_description_1 = "oooooooooooooooooooooooooooooooooooooooboooo";
                                                        goto try_except_handler_12;
                                                    }
                                                    tmp_condition_result_27 = ( tmp_res != 0 ) ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
                                                    if ( tmp_condition_result_27 == NUITKA_BOOL_TRUE )
                                                    {
                                                        goto branch_yes_27;
                                                    }
                                                    else
                                                    {
                                                        goto branch_no_27;
                                                    }
                                                    branch_yes_27:;
                                                    {
                                                        PyObject *tmp_assign_source_55;
                                                        PyObject *tmp_left_name_7;
                                                        PyObject *tmp_right_name_7;
                                                        CHECK_OBJECT( var_hour );
                                                        tmp_left_name_7 = var_hour;
                                                        tmp_right_name_7 = const_int_pos_12;
                                                        tmp_result = BINARY_OPERATION_ADD_OBJECT_LONG_INPLACE( &tmp_left_name_7, tmp_right_name_7 );
                                                        if ( tmp_result == false )
                                                        {
                                                            assert( ERROR_OCCURRED() );

                                                            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                                                            exception_lineno = 422;
                                                            type_description_1 = "oooooooooooooooooooooooooooooooooooooooboooo";
                                                            goto try_except_handler_12;
                                                        }
                                                        tmp_assign_source_55 = tmp_left_name_7;
                                                        var_hour = tmp_assign_source_55;

                                                    }
                                                    branch_no_27:;
                                                }
                                                branch_no_26:;
                                            }
                                            branch_end_24:;
                                        }
                                        goto branch_end_23;
                                        branch_no_23:;
                                        {
                                            nuitka_bool tmp_condition_result_28;
                                            PyObject *tmp_compexpr_left_26;
                                            PyObject *tmp_compexpr_right_26;
                                            CHECK_OBJECT( var_group_key );
                                            tmp_compexpr_left_26 = var_group_key;
                                            tmp_compexpr_right_26 = const_str_plain_M;
                                            tmp_res = RICH_COMPARE_BOOL_EQ_OBJECT_OBJECT( tmp_compexpr_left_26, tmp_compexpr_right_26 );
                                            if ( tmp_res == -1 )
                                            {
                                                assert( ERROR_OCCURRED() );

                                                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                                                exception_lineno = 423;
                                                type_description_1 = "oooooooooooooooooooooooooooooooooooooooboooo";
                                                goto try_except_handler_12;
                                            }
                                            tmp_condition_result_28 = ( tmp_res != 0 ) ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
                                            if ( tmp_condition_result_28 == NUITKA_BOOL_TRUE )
                                            {
                                                goto branch_yes_28;
                                            }
                                            else
                                            {
                                                goto branch_no_28;
                                            }
                                            branch_yes_28:;
                                            {
                                                PyObject *tmp_assign_source_56;
                                                PyObject *tmp_int_arg_8;
                                                PyObject *tmp_subscribed_name_14;
                                                PyObject *tmp_subscript_name_14;
                                                CHECK_OBJECT( var_found_dict );
                                                tmp_subscribed_name_14 = var_found_dict;
                                                tmp_subscript_name_14 = const_str_plain_M;
                                                tmp_int_arg_8 = LOOKUP_SUBSCRIPT( tmp_subscribed_name_14, tmp_subscript_name_14 );
                                                if ( tmp_int_arg_8 == NULL )
                                                {
                                                    assert( ERROR_OCCURRED() );

                                                    FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                                                    exception_lineno = 424;
                                                    type_description_1 = "oooooooooooooooooooooooooooooooooooooooboooo";
                                                    goto try_except_handler_12;
                                                }
                                                tmp_assign_source_56 = PyNumber_Int( tmp_int_arg_8 );
                                                Py_DECREF( tmp_int_arg_8 );
                                                if ( tmp_assign_source_56 == NULL )
                                                {
                                                    assert( ERROR_OCCURRED() );

                                                    FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                                                    exception_lineno = 424;
                                                    type_description_1 = "oooooooooooooooooooooooooooooooooooooooboooo";
                                                    goto try_except_handler_12;
                                                }
                                                {
                                                    PyObject *old = var_minute;
                                                    var_minute = tmp_assign_source_56;
                                                    Py_XDECREF( old );
                                                }

                                            }
                                            goto branch_end_28;
                                            branch_no_28:;
                                            {
                                                nuitka_bool tmp_condition_result_29;
                                                PyObject *tmp_compexpr_left_27;
                                                PyObject *tmp_compexpr_right_27;
                                                CHECK_OBJECT( var_group_key );
                                                tmp_compexpr_left_27 = var_group_key;
                                                tmp_compexpr_right_27 = const_str_plain_S;
                                                tmp_res = RICH_COMPARE_BOOL_EQ_OBJECT_OBJECT( tmp_compexpr_left_27, tmp_compexpr_right_27 );
                                                if ( tmp_res == -1 )
                                                {
                                                    assert( ERROR_OCCURRED() );

                                                    FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                                                    exception_lineno = 425;
                                                    type_description_1 = "oooooooooooooooooooooooooooooooooooooooboooo";
                                                    goto try_except_handler_12;
                                                }
                                                tmp_condition_result_29 = ( tmp_res != 0 ) ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
                                                if ( tmp_condition_result_29 == NUITKA_BOOL_TRUE )
                                                {
                                                    goto branch_yes_29;
                                                }
                                                else
                                                {
                                                    goto branch_no_29;
                                                }
                                                branch_yes_29:;
                                                {
                                                    PyObject *tmp_assign_source_57;
                                                    PyObject *tmp_int_arg_9;
                                                    PyObject *tmp_subscribed_name_15;
                                                    PyObject *tmp_subscript_name_15;
                                                    CHECK_OBJECT( var_found_dict );
                                                    tmp_subscribed_name_15 = var_found_dict;
                                                    tmp_subscript_name_15 = const_str_plain_S;
                                                    tmp_int_arg_9 = LOOKUP_SUBSCRIPT( tmp_subscribed_name_15, tmp_subscript_name_15 );
                                                    if ( tmp_int_arg_9 == NULL )
                                                    {
                                                        assert( ERROR_OCCURRED() );

                                                        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                                                        exception_lineno = 426;
                                                        type_description_1 = "oooooooooooooooooooooooooooooooooooooooboooo";
                                                        goto try_except_handler_12;
                                                    }
                                                    tmp_assign_source_57 = PyNumber_Int( tmp_int_arg_9 );
                                                    Py_DECREF( tmp_int_arg_9 );
                                                    if ( tmp_assign_source_57 == NULL )
                                                    {
                                                        assert( ERROR_OCCURRED() );

                                                        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                                                        exception_lineno = 426;
                                                        type_description_1 = "oooooooooooooooooooooooooooooooooooooooboooo";
                                                        goto try_except_handler_12;
                                                    }
                                                    {
                                                        PyObject *old = var_second;
                                                        var_second = tmp_assign_source_57;
                                                        Py_XDECREF( old );
                                                    }

                                                }
                                                goto branch_end_29;
                                                branch_no_29:;
                                                {
                                                    nuitka_bool tmp_condition_result_30;
                                                    PyObject *tmp_compexpr_left_28;
                                                    PyObject *tmp_compexpr_right_28;
                                                    CHECK_OBJECT( var_group_key );
                                                    tmp_compexpr_left_28 = var_group_key;
                                                    tmp_compexpr_right_28 = const_str_plain_f;
                                                    tmp_res = RICH_COMPARE_BOOL_EQ_OBJECT_OBJECT( tmp_compexpr_left_28, tmp_compexpr_right_28 );
                                                    if ( tmp_res == -1 )
                                                    {
                                                        assert( ERROR_OCCURRED() );

                                                        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                                                        exception_lineno = 427;
                                                        type_description_1 = "oooooooooooooooooooooooooooooooooooooooboooo";
                                                        goto try_except_handler_12;
                                                    }
                                                    tmp_condition_result_30 = ( tmp_res != 0 ) ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
                                                    if ( tmp_condition_result_30 == NUITKA_BOOL_TRUE )
                                                    {
                                                        goto branch_yes_30;
                                                    }
                                                    else
                                                    {
                                                        goto branch_no_30;
                                                    }
                                                    branch_yes_30:;
                                                    {
                                                        PyObject *tmp_assign_source_58;
                                                        PyObject *tmp_subscribed_name_16;
                                                        PyObject *tmp_subscript_name_16;
                                                        CHECK_OBJECT( var_found_dict );
                                                        tmp_subscribed_name_16 = var_found_dict;
                                                        tmp_subscript_name_16 = const_str_plain_f;
                                                        tmp_assign_source_58 = LOOKUP_SUBSCRIPT( tmp_subscribed_name_16, tmp_subscript_name_16 );
                                                        if ( tmp_assign_source_58 == NULL )
                                                        {
                                                            assert( ERROR_OCCURRED() );

                                                            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                                                            exception_lineno = 428;
                                                            type_description_1 = "oooooooooooooooooooooooooooooooooooooooboooo";
                                                            goto try_except_handler_12;
                                                        }
                                                        {
                                                            PyObject *old = var_s;
                                                            var_s = tmp_assign_source_58;
                                                            Py_XDECREF( old );
                                                        }

                                                    }
                                                    {
                                                        PyObject *tmp_assign_source_59;
                                                        PyObject *tmp_left_name_8;
                                                        PyObject *tmp_right_name_8;
                                                        PyObject *tmp_left_name_9;
                                                        PyObject *tmp_right_name_9;
                                                        PyObject *tmp_left_name_10;
                                                        PyObject *tmp_right_name_10;
                                                        PyObject *tmp_len_arg_3;
                                                        CHECK_OBJECT( var_s );
                                                        tmp_left_name_8 = var_s;
                                                        tmp_left_name_9 = const_str_plain_0;
                                                        tmp_left_name_10 = const_int_pos_6;
                                                        CHECK_OBJECT( var_s );
                                                        tmp_len_arg_3 = var_s;
                                                        tmp_right_name_10 = BUILTIN_LEN( tmp_len_arg_3 );
                                                        if ( tmp_right_name_10 == NULL )
                                                        {
                                                            assert( ERROR_OCCURRED() );

                                                            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                                                            exception_lineno = 430;
                                                            type_description_1 = "oooooooooooooooooooooooooooooooooooooooboooo";
                                                            goto try_except_handler_12;
                                                        }
                                                        tmp_right_name_9 = BINARY_OPERATION_SUB( tmp_left_name_10, tmp_right_name_10 );
                                                        Py_DECREF( tmp_right_name_10 );
                                                        if ( tmp_right_name_9 == NULL )
                                                        {
                                                            assert( ERROR_OCCURRED() );

                                                            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                                                            exception_lineno = 430;
                                                            type_description_1 = "oooooooooooooooooooooooooooooooooooooooboooo";
                                                            goto try_except_handler_12;
                                                        }
                                                        tmp_right_name_8 = BINARY_OPERATION_MUL( tmp_left_name_9, tmp_right_name_9 );
                                                        Py_DECREF( tmp_right_name_9 );
                                                        if ( tmp_right_name_8 == NULL )
                                                        {
                                                            assert( ERROR_OCCURRED() );

                                                            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                                                            exception_lineno = 430;
                                                            type_description_1 = "oooooooooooooooooooooooooooooooooooooooboooo";
                                                            goto try_except_handler_12;
                                                        }
                                                        tmp_result = BINARY_OPERATION_ADD_OBJECT_OBJECT_INPLACE( &tmp_left_name_8, tmp_right_name_8 );
                                                        Py_DECREF( tmp_right_name_8 );
                                                        if ( tmp_result == false )
                                                        {
                                                            assert( ERROR_OCCURRED() );

                                                            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                                                            exception_lineno = 430;
                                                            type_description_1 = "oooooooooooooooooooooooooooooooooooooooboooo";
                                                            goto try_except_handler_12;
                                                        }
                                                        tmp_assign_source_59 = tmp_left_name_8;
                                                        var_s = tmp_assign_source_59;

                                                    }
                                                    {
                                                        PyObject *tmp_assign_source_60;
                                                        PyObject *tmp_int_arg_10;
                                                        CHECK_OBJECT( var_s );
                                                        tmp_int_arg_10 = var_s;
                                                        tmp_assign_source_60 = PyNumber_Int( tmp_int_arg_10 );
                                                        if ( tmp_assign_source_60 == NULL )
                                                        {
                                                            assert( ERROR_OCCURRED() );

                                                            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                                                            exception_lineno = 431;
                                                            type_description_1 = "oooooooooooooooooooooooooooooooooooooooboooo";
                                                            goto try_except_handler_12;
                                                        }
                                                        {
                                                            PyObject *old = var_fraction;
                                                            var_fraction = tmp_assign_source_60;
                                                            Py_XDECREF( old );
                                                        }

                                                    }
                                                    goto branch_end_30;
                                                    branch_no_30:;
                                                    {
                                                        nuitka_bool tmp_condition_result_31;
                                                        PyObject *tmp_compexpr_left_29;
                                                        PyObject *tmp_compexpr_right_29;
                                                        CHECK_OBJECT( var_group_key );
                                                        tmp_compexpr_left_29 = var_group_key;
                                                        tmp_compexpr_right_29 = const_str_plain_A;
                                                        tmp_res = RICH_COMPARE_BOOL_EQ_OBJECT_OBJECT( tmp_compexpr_left_29, tmp_compexpr_right_29 );
                                                        if ( tmp_res == -1 )
                                                        {
                                                            assert( ERROR_OCCURRED() );

                                                            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                                                            exception_lineno = 432;
                                                            type_description_1 = "oooooooooooooooooooooooooooooooooooooooboooo";
                                                            goto try_except_handler_12;
                                                        }
                                                        tmp_condition_result_31 = ( tmp_res != 0 ) ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
                                                        if ( tmp_condition_result_31 == NUITKA_BOOL_TRUE )
                                                        {
                                                            goto branch_yes_31;
                                                        }
                                                        else
                                                        {
                                                            goto branch_no_31;
                                                        }
                                                        branch_yes_31:;
                                                        {
                                                            PyObject *tmp_assign_source_61;
                                                            PyObject *tmp_called_name_10;
                                                            PyObject *tmp_source_name_17;
                                                            PyObject *tmp_source_name_18;
                                                            PyObject *tmp_args_element_name_12;
                                                            PyObject *tmp_called_instance_15;
                                                            PyObject *tmp_subscribed_name_17;
                                                            PyObject *tmp_subscript_name_17;
                                                            if ( var_locale_time == NULL )
                                                            {

                                                                exception_type = PyExc_UnboundLocalError;
                                                                Py_INCREF( exception_type );
                                                                exception_value = PyUnicode_FromFormat( "local variable '%s' referenced before assignment", "locale_time" );
                                                                exception_tb = NULL;
                                                                NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
                                                                CHAIN_EXCEPTION( exception_value );

                                                                exception_lineno = 433;
                                                                type_description_1 = "oooooooooooooooooooooooooooooooooooooooboooo";
                                                                goto try_except_handler_12;
                                                            }

                                                            tmp_source_name_18 = var_locale_time;
                                                            tmp_source_name_17 = LOOKUP_ATTRIBUTE( tmp_source_name_18, const_str_plain_f_weekday );
                                                            if ( tmp_source_name_17 == NULL )
                                                            {
                                                                assert( ERROR_OCCURRED() );

                                                                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                                                                exception_lineno = 433;
                                                                type_description_1 = "oooooooooooooooooooooooooooooooooooooooboooo";
                                                                goto try_except_handler_12;
                                                            }
                                                            tmp_called_name_10 = LOOKUP_ATTRIBUTE( tmp_source_name_17, const_str_plain_index );
                                                            Py_DECREF( tmp_source_name_17 );
                                                            if ( tmp_called_name_10 == NULL )
                                                            {
                                                                assert( ERROR_OCCURRED() );

                                                                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                                                                exception_lineno = 433;
                                                                type_description_1 = "oooooooooooooooooooooooooooooooooooooooboooo";
                                                                goto try_except_handler_12;
                                                            }
                                                            CHECK_OBJECT( var_found_dict );
                                                            tmp_subscribed_name_17 = var_found_dict;
                                                            tmp_subscript_name_17 = const_str_plain_A;
                                                            tmp_called_instance_15 = LOOKUP_SUBSCRIPT( tmp_subscribed_name_17, tmp_subscript_name_17 );
                                                            if ( tmp_called_instance_15 == NULL )
                                                            {
                                                                assert( ERROR_OCCURRED() );

                                                                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
                                                                Py_DECREF( tmp_called_name_10 );

                                                                exception_lineno = 433;
                                                                type_description_1 = "oooooooooooooooooooooooooooooooooooooooboooo";
                                                                goto try_except_handler_12;
                                                            }
                                                            frame_285d3548e213aa4c5d6aef1855a305f1->m_frame.f_lineno = 433;
                                                            tmp_args_element_name_12 = CALL_METHOD_NO_ARGS( tmp_called_instance_15, const_str_plain_lower );
                                                            Py_DECREF( tmp_called_instance_15 );
                                                            if ( tmp_args_element_name_12 == NULL )
                                                            {
                                                                assert( ERROR_OCCURRED() );

                                                                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
                                                                Py_DECREF( tmp_called_name_10 );

                                                                exception_lineno = 433;
                                                                type_description_1 = "oooooooooooooooooooooooooooooooooooooooboooo";
                                                                goto try_except_handler_12;
                                                            }
                                                            frame_285d3548e213aa4c5d6aef1855a305f1->m_frame.f_lineno = 433;
                                                            {
                                                                PyObject *call_args[] = { tmp_args_element_name_12 };
                                                                tmp_assign_source_61 = CALL_FUNCTION_WITH_ARGS1( tmp_called_name_10, call_args );
                                                            }

                                                            Py_DECREF( tmp_called_name_10 );
                                                            Py_DECREF( tmp_args_element_name_12 );
                                                            if ( tmp_assign_source_61 == NULL )
                                                            {
                                                                assert( ERROR_OCCURRED() );

                                                                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                                                                exception_lineno = 433;
                                                                type_description_1 = "oooooooooooooooooooooooooooooooooooooooboooo";
                                                                goto try_except_handler_12;
                                                            }
                                                            {
                                                                PyObject *old = var_weekday;
                                                                var_weekday = tmp_assign_source_61;
                                                                Py_XDECREF( old );
                                                            }

                                                        }
                                                        goto branch_end_31;
                                                        branch_no_31:;
                                                        {
                                                            nuitka_bool tmp_condition_result_32;
                                                            PyObject *tmp_compexpr_left_30;
                                                            PyObject *tmp_compexpr_right_30;
                                                            CHECK_OBJECT( var_group_key );
                                                            tmp_compexpr_left_30 = var_group_key;
                                                            tmp_compexpr_right_30 = const_str_plain_a;
                                                            tmp_res = RICH_COMPARE_BOOL_EQ_OBJECT_OBJECT( tmp_compexpr_left_30, tmp_compexpr_right_30 );
                                                            if ( tmp_res == -1 )
                                                            {
                                                                assert( ERROR_OCCURRED() );

                                                                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                                                                exception_lineno = 434;
                                                                type_description_1 = "oooooooooooooooooooooooooooooooooooooooboooo";
                                                                goto try_except_handler_12;
                                                            }
                                                            tmp_condition_result_32 = ( tmp_res != 0 ) ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
                                                            if ( tmp_condition_result_32 == NUITKA_BOOL_TRUE )
                                                            {
                                                                goto branch_yes_32;
                                                            }
                                                            else
                                                            {
                                                                goto branch_no_32;
                                                            }
                                                            branch_yes_32:;
                                                            {
                                                                PyObject *tmp_assign_source_62;
                                                                PyObject *tmp_called_name_11;
                                                                PyObject *tmp_source_name_19;
                                                                PyObject *tmp_source_name_20;
                                                                PyObject *tmp_args_element_name_13;
                                                                PyObject *tmp_called_instance_16;
                                                                PyObject *tmp_subscribed_name_18;
                                                                PyObject *tmp_subscript_name_18;
                                                                if ( var_locale_time == NULL )
                                                                {

                                                                    exception_type = PyExc_UnboundLocalError;
                                                                    Py_INCREF( exception_type );
                                                                    exception_value = PyUnicode_FromFormat( "local variable '%s' referenced before assignment", "locale_time" );
                                                                    exception_tb = NULL;
                                                                    NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
                                                                    CHAIN_EXCEPTION( exception_value );

                                                                    exception_lineno = 435;
                                                                    type_description_1 = "oooooooooooooooooooooooooooooooooooooooboooo";
                                                                    goto try_except_handler_12;
                                                                }

                                                                tmp_source_name_20 = var_locale_time;
                                                                tmp_source_name_19 = LOOKUP_ATTRIBUTE( tmp_source_name_20, const_str_plain_a_weekday );
                                                                if ( tmp_source_name_19 == NULL )
                                                                {
                                                                    assert( ERROR_OCCURRED() );

                                                                    FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                                                                    exception_lineno = 435;
                                                                    type_description_1 = "oooooooooooooooooooooooooooooooooooooooboooo";
                                                                    goto try_except_handler_12;
                                                                }
                                                                tmp_called_name_11 = LOOKUP_ATTRIBUTE( tmp_source_name_19, const_str_plain_index );
                                                                Py_DECREF( tmp_source_name_19 );
                                                                if ( tmp_called_name_11 == NULL )
                                                                {
                                                                    assert( ERROR_OCCURRED() );

                                                                    FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                                                                    exception_lineno = 435;
                                                                    type_description_1 = "oooooooooooooooooooooooooooooooooooooooboooo";
                                                                    goto try_except_handler_12;
                                                                }
                                                                CHECK_OBJECT( var_found_dict );
                                                                tmp_subscribed_name_18 = var_found_dict;
                                                                tmp_subscript_name_18 = const_str_plain_a;
                                                                tmp_called_instance_16 = LOOKUP_SUBSCRIPT( tmp_subscribed_name_18, tmp_subscript_name_18 );
                                                                if ( tmp_called_instance_16 == NULL )
                                                                {
                                                                    assert( ERROR_OCCURRED() );

                                                                    FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
                                                                    Py_DECREF( tmp_called_name_11 );

                                                                    exception_lineno = 435;
                                                                    type_description_1 = "oooooooooooooooooooooooooooooooooooooooboooo";
                                                                    goto try_except_handler_12;
                                                                }
                                                                frame_285d3548e213aa4c5d6aef1855a305f1->m_frame.f_lineno = 435;
                                                                tmp_args_element_name_13 = CALL_METHOD_NO_ARGS( tmp_called_instance_16, const_str_plain_lower );
                                                                Py_DECREF( tmp_called_instance_16 );
                                                                if ( tmp_args_element_name_13 == NULL )
                                                                {
                                                                    assert( ERROR_OCCURRED() );

                                                                    FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
                                                                    Py_DECREF( tmp_called_name_11 );

                                                                    exception_lineno = 435;
                                                                    type_description_1 = "oooooooooooooooooooooooooooooooooooooooboooo";
                                                                    goto try_except_handler_12;
                                                                }
                                                                frame_285d3548e213aa4c5d6aef1855a305f1->m_frame.f_lineno = 435;
                                                                {
                                                                    PyObject *call_args[] = { tmp_args_element_name_13 };
                                                                    tmp_assign_source_62 = CALL_FUNCTION_WITH_ARGS1( tmp_called_name_11, call_args );
                                                                }

                                                                Py_DECREF( tmp_called_name_11 );
                                                                Py_DECREF( tmp_args_element_name_13 );
                                                                if ( tmp_assign_source_62 == NULL )
                                                                {
                                                                    assert( ERROR_OCCURRED() );

                                                                    FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                                                                    exception_lineno = 435;
                                                                    type_description_1 = "oooooooooooooooooooooooooooooooooooooooboooo";
                                                                    goto try_except_handler_12;
                                                                }
                                                                {
                                                                    PyObject *old = var_weekday;
                                                                    var_weekday = tmp_assign_source_62;
                                                                    Py_XDECREF( old );
                                                                }

                                                            }
                                                            goto branch_end_32;
                                                            branch_no_32:;
                                                            {
                                                                nuitka_bool tmp_condition_result_33;
                                                                PyObject *tmp_compexpr_left_31;
                                                                PyObject *tmp_compexpr_right_31;
                                                                CHECK_OBJECT( var_group_key );
                                                                tmp_compexpr_left_31 = var_group_key;
                                                                tmp_compexpr_right_31 = const_str_plain_w;
                                                                tmp_res = RICH_COMPARE_BOOL_EQ_OBJECT_OBJECT( tmp_compexpr_left_31, tmp_compexpr_right_31 );
                                                                if ( tmp_res == -1 )
                                                                {
                                                                    assert( ERROR_OCCURRED() );

                                                                    FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                                                                    exception_lineno = 436;
                                                                    type_description_1 = "oooooooooooooooooooooooooooooooooooooooboooo";
                                                                    goto try_except_handler_12;
                                                                }
                                                                tmp_condition_result_33 = ( tmp_res != 0 ) ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
                                                                if ( tmp_condition_result_33 == NUITKA_BOOL_TRUE )
                                                                {
                                                                    goto branch_yes_33;
                                                                }
                                                                else
                                                                {
                                                                    goto branch_no_33;
                                                                }
                                                                branch_yes_33:;
                                                                {
                                                                    PyObject *tmp_assign_source_63;
                                                                    PyObject *tmp_int_arg_11;
                                                                    PyObject *tmp_subscribed_name_19;
                                                                    PyObject *tmp_subscript_name_19;
                                                                    CHECK_OBJECT( var_found_dict );
                                                                    tmp_subscribed_name_19 = var_found_dict;
                                                                    tmp_subscript_name_19 = const_str_plain_w;
                                                                    tmp_int_arg_11 = LOOKUP_SUBSCRIPT( tmp_subscribed_name_19, tmp_subscript_name_19 );
                                                                    if ( tmp_int_arg_11 == NULL )
                                                                    {
                                                                        assert( ERROR_OCCURRED() );

                                                                        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                                                                        exception_lineno = 437;
                                                                        type_description_1 = "oooooooooooooooooooooooooooooooooooooooboooo";
                                                                        goto try_except_handler_12;
                                                                    }
                                                                    tmp_assign_source_63 = PyNumber_Int( tmp_int_arg_11 );
                                                                    Py_DECREF( tmp_int_arg_11 );
                                                                    if ( tmp_assign_source_63 == NULL )
                                                                    {
                                                                        assert( ERROR_OCCURRED() );

                                                                        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                                                                        exception_lineno = 437;
                                                                        type_description_1 = "oooooooooooooooooooooooooooooooooooooooboooo";
                                                                        goto try_except_handler_12;
                                                                    }
                                                                    {
                                                                        PyObject *old = var_weekday;
                                                                        var_weekday = tmp_assign_source_63;
                                                                        Py_XDECREF( old );
                                                                    }

                                                                }
                                                                {
                                                                    nuitka_bool tmp_condition_result_34;
                                                                    PyObject *tmp_compexpr_left_32;
                                                                    PyObject *tmp_compexpr_right_32;
                                                                    CHECK_OBJECT( var_weekday );
                                                                    tmp_compexpr_left_32 = var_weekday;
                                                                    tmp_compexpr_right_32 = const_int_0;
                                                                    tmp_res = RICH_COMPARE_BOOL_EQ_OBJECT_OBJECT( tmp_compexpr_left_32, tmp_compexpr_right_32 );
                                                                    if ( tmp_res == -1 )
                                                                    {
                                                                        assert( ERROR_OCCURRED() );

                                                                        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                                                                        exception_lineno = 438;
                                                                        type_description_1 = "oooooooooooooooooooooooooooooooooooooooboooo";
                                                                        goto try_except_handler_12;
                                                                    }
                                                                    tmp_condition_result_34 = ( tmp_res != 0 ) ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
                                                                    if ( tmp_condition_result_34 == NUITKA_BOOL_TRUE )
                                                                    {
                                                                        goto branch_yes_34;
                                                                    }
                                                                    else
                                                                    {
                                                                        goto branch_no_34;
                                                                    }
                                                                    branch_yes_34:;
                                                                    {
                                                                        PyObject *tmp_assign_source_64;
                                                                        tmp_assign_source_64 = const_int_pos_6;
                                                                        {
                                                                            PyObject *old = var_weekday;
                                                                            assert( old != NULL );
                                                                            var_weekday = tmp_assign_source_64;
                                                                            Py_INCREF( var_weekday );
                                                                            Py_DECREF( old );
                                                                        }

                                                                    }
                                                                    goto branch_end_34;
                                                                    branch_no_34:;
                                                                    {
                                                                        PyObject *tmp_assign_source_65;
                                                                        PyObject *tmp_left_name_11;
                                                                        PyObject *tmp_right_name_11;
                                                                        CHECK_OBJECT( var_weekday );
                                                                        tmp_left_name_11 = var_weekday;
                                                                        tmp_right_name_11 = const_int_pos_1;
                                                                        tmp_result = BINARY_OPERATION_INPLACE( PyNumber_InPlaceSubtract, &tmp_left_name_11, tmp_right_name_11 );
                                                                        if ( tmp_result == false )
                                                                        {
                                                                            assert( ERROR_OCCURRED() );

                                                                            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                                                                            exception_lineno = 441;
                                                                            type_description_1 = "oooooooooooooooooooooooooooooooooooooooboooo";
                                                                            goto try_except_handler_12;
                                                                        }
                                                                        tmp_assign_source_65 = tmp_left_name_11;
                                                                        var_weekday = tmp_assign_source_65;

                                                                    }
                                                                    branch_end_34:;
                                                                }
                                                                goto branch_end_33;
                                                                branch_no_33:;
                                                                {
                                                                    nuitka_bool tmp_condition_result_35;
                                                                    PyObject *tmp_compexpr_left_33;
                                                                    PyObject *tmp_compexpr_right_33;
                                                                    CHECK_OBJECT( var_group_key );
                                                                    tmp_compexpr_left_33 = var_group_key;
                                                                    tmp_compexpr_right_33 = const_str_plain_u;
                                                                    tmp_res = RICH_COMPARE_BOOL_EQ_OBJECT_OBJECT( tmp_compexpr_left_33, tmp_compexpr_right_33 );
                                                                    if ( tmp_res == -1 )
                                                                    {
                                                                        assert( ERROR_OCCURRED() );

                                                                        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                                                                        exception_lineno = 442;
                                                                        type_description_1 = "oooooooooooooooooooooooooooooooooooooooboooo";
                                                                        goto try_except_handler_12;
                                                                    }
                                                                    tmp_condition_result_35 = ( tmp_res != 0 ) ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
                                                                    if ( tmp_condition_result_35 == NUITKA_BOOL_TRUE )
                                                                    {
                                                                        goto branch_yes_35;
                                                                    }
                                                                    else
                                                                    {
                                                                        goto branch_no_35;
                                                                    }
                                                                    branch_yes_35:;
                                                                    {
                                                                        PyObject *tmp_assign_source_66;
                                                                        PyObject *tmp_int_arg_12;
                                                                        PyObject *tmp_subscribed_name_20;
                                                                        PyObject *tmp_subscript_name_20;
                                                                        CHECK_OBJECT( var_found_dict );
                                                                        tmp_subscribed_name_20 = var_found_dict;
                                                                        tmp_subscript_name_20 = const_str_plain_u;
                                                                        tmp_int_arg_12 = LOOKUP_SUBSCRIPT( tmp_subscribed_name_20, tmp_subscript_name_20 );
                                                                        if ( tmp_int_arg_12 == NULL )
                                                                        {
                                                                            assert( ERROR_OCCURRED() );

                                                                            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                                                                            exception_lineno = 443;
                                                                            type_description_1 = "oooooooooooooooooooooooooooooooooooooooboooo";
                                                                            goto try_except_handler_12;
                                                                        }
                                                                        tmp_assign_source_66 = PyNumber_Int( tmp_int_arg_12 );
                                                                        Py_DECREF( tmp_int_arg_12 );
                                                                        if ( tmp_assign_source_66 == NULL )
                                                                        {
                                                                            assert( ERROR_OCCURRED() );

                                                                            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                                                                            exception_lineno = 443;
                                                                            type_description_1 = "oooooooooooooooooooooooooooooooooooooooboooo";
                                                                            goto try_except_handler_12;
                                                                        }
                                                                        {
                                                                            PyObject *old = var_weekday;
                                                                            var_weekday = tmp_assign_source_66;
                                                                            Py_XDECREF( old );
                                                                        }

                                                                    }
                                                                    {
                                                                        PyObject *tmp_assign_source_67;
                                                                        PyObject *tmp_left_name_12;
                                                                        PyObject *tmp_right_name_12;
                                                                        CHECK_OBJECT( var_weekday );
                                                                        tmp_left_name_12 = var_weekday;
                                                                        tmp_right_name_12 = const_int_pos_1;
                                                                        tmp_result = BINARY_OPERATION_INPLACE( PyNumber_InPlaceSubtract, &tmp_left_name_12, tmp_right_name_12 );
                                                                        if ( tmp_result == false )
                                                                        {
                                                                            assert( ERROR_OCCURRED() );

                                                                            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                                                                            exception_lineno = 444;
                                                                            type_description_1 = "oooooooooooooooooooooooooooooooooooooooboooo";
                                                                            goto try_except_handler_12;
                                                                        }
                                                                        tmp_assign_source_67 = tmp_left_name_12;
                                                                        var_weekday = tmp_assign_source_67;

                                                                    }
                                                                    goto branch_end_35;
                                                                    branch_no_35:;
                                                                    {
                                                                        nuitka_bool tmp_condition_result_36;
                                                                        PyObject *tmp_compexpr_left_34;
                                                                        PyObject *tmp_compexpr_right_34;
                                                                        CHECK_OBJECT( var_group_key );
                                                                        tmp_compexpr_left_34 = var_group_key;
                                                                        tmp_compexpr_right_34 = const_str_plain_j;
                                                                        tmp_res = RICH_COMPARE_BOOL_EQ_OBJECT_OBJECT( tmp_compexpr_left_34, tmp_compexpr_right_34 );
                                                                        if ( tmp_res == -1 )
                                                                        {
                                                                            assert( ERROR_OCCURRED() );

                                                                            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                                                                            exception_lineno = 445;
                                                                            type_description_1 = "oooooooooooooooooooooooooooooooooooooooboooo";
                                                                            goto try_except_handler_12;
                                                                        }
                                                                        tmp_condition_result_36 = ( tmp_res != 0 ) ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
                                                                        if ( tmp_condition_result_36 == NUITKA_BOOL_TRUE )
                                                                        {
                                                                            goto branch_yes_36;
                                                                        }
                                                                        else
                                                                        {
                                                                            goto branch_no_36;
                                                                        }
                                                                        branch_yes_36:;
                                                                        {
                                                                            PyObject *tmp_assign_source_68;
                                                                            PyObject *tmp_int_arg_13;
                                                                            PyObject *tmp_subscribed_name_21;
                                                                            PyObject *tmp_subscript_name_21;
                                                                            CHECK_OBJECT( var_found_dict );
                                                                            tmp_subscribed_name_21 = var_found_dict;
                                                                            tmp_subscript_name_21 = const_str_plain_j;
                                                                            tmp_int_arg_13 = LOOKUP_SUBSCRIPT( tmp_subscribed_name_21, tmp_subscript_name_21 );
                                                                            if ( tmp_int_arg_13 == NULL )
                                                                            {
                                                                                assert( ERROR_OCCURRED() );

                                                                                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                                                                                exception_lineno = 446;
                                                                                type_description_1 = "oooooooooooooooooooooooooooooooooooooooboooo";
                                                                                goto try_except_handler_12;
                                                                            }
                                                                            tmp_assign_source_68 = PyNumber_Int( tmp_int_arg_13 );
                                                                            Py_DECREF( tmp_int_arg_13 );
                                                                            if ( tmp_assign_source_68 == NULL )
                                                                            {
                                                                                assert( ERROR_OCCURRED() );

                                                                                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                                                                                exception_lineno = 446;
                                                                                type_description_1 = "oooooooooooooooooooooooooooooooooooooooboooo";
                                                                                goto try_except_handler_12;
                                                                            }
                                                                            {
                                                                                PyObject *old = var_julian;
                                                                                var_julian = tmp_assign_source_68;
                                                                                Py_XDECREF( old );
                                                                            }

                                                                        }
                                                                        goto branch_end_36;
                                                                        branch_no_36:;
                                                                        {
                                                                            nuitka_bool tmp_condition_result_37;
                                                                            PyObject *tmp_compexpr_left_35;
                                                                            PyObject *tmp_compexpr_right_35;
                                                                            CHECK_OBJECT( var_group_key );
                                                                            tmp_compexpr_left_35 = var_group_key;
                                                                            tmp_compexpr_right_35 = const_tuple_str_plain_U_str_plain_W_tuple;
                                                                            tmp_res = PySequence_Contains( tmp_compexpr_right_35, tmp_compexpr_left_35 );
                                                                            if ( tmp_res == -1 )
                                                                            {
                                                                                assert( ERROR_OCCURRED() );

                                                                                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                                                                                exception_lineno = 447;
                                                                                type_description_1 = "oooooooooooooooooooooooooooooooooooooooboooo";
                                                                                goto try_except_handler_12;
                                                                            }
                                                                            tmp_condition_result_37 = ( tmp_res == 1 ) ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
                                                                            if ( tmp_condition_result_37 == NUITKA_BOOL_TRUE )
                                                                            {
                                                                                goto branch_yes_37;
                                                                            }
                                                                            else
                                                                            {
                                                                                goto branch_no_37;
                                                                            }
                                                                            branch_yes_37:;
                                                                            {
                                                                                PyObject *tmp_assign_source_69;
                                                                                PyObject *tmp_int_arg_14;
                                                                                PyObject *tmp_subscribed_name_22;
                                                                                PyObject *tmp_subscript_name_22;
                                                                                CHECK_OBJECT( var_found_dict );
                                                                                tmp_subscribed_name_22 = var_found_dict;
                                                                                CHECK_OBJECT( var_group_key );
                                                                                tmp_subscript_name_22 = var_group_key;
                                                                                tmp_int_arg_14 = LOOKUP_SUBSCRIPT( tmp_subscribed_name_22, tmp_subscript_name_22 );
                                                                                if ( tmp_int_arg_14 == NULL )
                                                                                {
                                                                                    assert( ERROR_OCCURRED() );

                                                                                    FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                                                                                    exception_lineno = 448;
                                                                                    type_description_1 = "oooooooooooooooooooooooooooooooooooooooboooo";
                                                                                    goto try_except_handler_12;
                                                                                }
                                                                                tmp_assign_source_69 = PyNumber_Int( tmp_int_arg_14 );
                                                                                Py_DECREF( tmp_int_arg_14 );
                                                                                if ( tmp_assign_source_69 == NULL )
                                                                                {
                                                                                    assert( ERROR_OCCURRED() );

                                                                                    FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                                                                                    exception_lineno = 448;
                                                                                    type_description_1 = "oooooooooooooooooooooooooooooooooooooooboooo";
                                                                                    goto try_except_handler_12;
                                                                                }
                                                                                {
                                                                                    PyObject *old = var_week_of_year;
                                                                                    var_week_of_year = tmp_assign_source_69;
                                                                                    Py_XDECREF( old );
                                                                                }

                                                                            }
                                                                            {
                                                                                nuitka_bool tmp_condition_result_38;
                                                                                PyObject *tmp_compexpr_left_36;
                                                                                PyObject *tmp_compexpr_right_36;
                                                                                CHECK_OBJECT( var_group_key );
                                                                                tmp_compexpr_left_36 = var_group_key;
                                                                                tmp_compexpr_right_36 = const_str_plain_U;
                                                                                tmp_res = RICH_COMPARE_BOOL_EQ_OBJECT_OBJECT( tmp_compexpr_left_36, tmp_compexpr_right_36 );
                                                                                if ( tmp_res == -1 )
                                                                                {
                                                                                    assert( ERROR_OCCURRED() );

                                                                                    FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                                                                                    exception_lineno = 449;
                                                                                    type_description_1 = "oooooooooooooooooooooooooooooooooooooooboooo";
                                                                                    goto try_except_handler_12;
                                                                                }
                                                                                tmp_condition_result_38 = ( tmp_res != 0 ) ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
                                                                                if ( tmp_condition_result_38 == NUITKA_BOOL_TRUE )
                                                                                {
                                                                                    goto branch_yes_38;
                                                                                }
                                                                                else
                                                                                {
                                                                                    goto branch_no_38;
                                                                                }
                                                                                branch_yes_38:;
                                                                                {
                                                                                    PyObject *tmp_assign_source_70;
                                                                                    tmp_assign_source_70 = const_int_pos_6;
                                                                                    {
                                                                                        PyObject *old = var_week_of_year_start;
                                                                                        var_week_of_year_start = tmp_assign_source_70;
                                                                                        Py_INCREF( var_week_of_year_start );
                                                                                        Py_XDECREF( old );
                                                                                    }

                                                                                }
                                                                                goto branch_end_38;
                                                                                branch_no_38:;
                                                                                {
                                                                                    PyObject *tmp_assign_source_71;
                                                                                    tmp_assign_source_71 = const_int_0;
                                                                                    {
                                                                                        PyObject *old = var_week_of_year_start;
                                                                                        var_week_of_year_start = tmp_assign_source_71;
                                                                                        Py_INCREF( var_week_of_year_start );
                                                                                        Py_XDECREF( old );
                                                                                    }

                                                                                }
                                                                                branch_end_38:;
                                                                            }
                                                                            goto branch_end_37;
                                                                            branch_no_37:;
                                                                            {
                                                                                nuitka_bool tmp_condition_result_39;
                                                                                PyObject *tmp_compexpr_left_37;
                                                                                PyObject *tmp_compexpr_right_37;
                                                                                CHECK_OBJECT( var_group_key );
                                                                                tmp_compexpr_left_37 = var_group_key;
                                                                                tmp_compexpr_right_37 = const_str_plain_V;
                                                                                tmp_res = RICH_COMPARE_BOOL_EQ_OBJECT_OBJECT( tmp_compexpr_left_37, tmp_compexpr_right_37 );
                                                                                if ( tmp_res == -1 )
                                                                                {
                                                                                    assert( ERROR_OCCURRED() );

                                                                                    FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                                                                                    exception_lineno = 455;
                                                                                    type_description_1 = "oooooooooooooooooooooooooooooooooooooooboooo";
                                                                                    goto try_except_handler_12;
                                                                                }
                                                                                tmp_condition_result_39 = ( tmp_res != 0 ) ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
                                                                                if ( tmp_condition_result_39 == NUITKA_BOOL_TRUE )
                                                                                {
                                                                                    goto branch_yes_39;
                                                                                }
                                                                                else
                                                                                {
                                                                                    goto branch_no_39;
                                                                                }
                                                                                branch_yes_39:;
                                                                                {
                                                                                    PyObject *tmp_assign_source_72;
                                                                                    PyObject *tmp_int_arg_15;
                                                                                    PyObject *tmp_subscribed_name_23;
                                                                                    PyObject *tmp_subscript_name_23;
                                                                                    CHECK_OBJECT( var_found_dict );
                                                                                    tmp_subscribed_name_23 = var_found_dict;
                                                                                    tmp_subscript_name_23 = const_str_plain_V;
                                                                                    tmp_int_arg_15 = LOOKUP_SUBSCRIPT( tmp_subscribed_name_23, tmp_subscript_name_23 );
                                                                                    if ( tmp_int_arg_15 == NULL )
                                                                                    {
                                                                                        assert( ERROR_OCCURRED() );

                                                                                        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                                                                                        exception_lineno = 456;
                                                                                        type_description_1 = "oooooooooooooooooooooooooooooooooooooooboooo";
                                                                                        goto try_except_handler_12;
                                                                                    }
                                                                                    tmp_assign_source_72 = PyNumber_Int( tmp_int_arg_15 );
                                                                                    Py_DECREF( tmp_int_arg_15 );
                                                                                    if ( tmp_assign_source_72 == NULL )
                                                                                    {
                                                                                        assert( ERROR_OCCURRED() );

                                                                                        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                                                                                        exception_lineno = 456;
                                                                                        type_description_1 = "oooooooooooooooooooooooooooooooooooooooboooo";
                                                                                        goto try_except_handler_12;
                                                                                    }
                                                                                    {
                                                                                        PyObject *old = var_iso_week;
                                                                                        var_iso_week = tmp_assign_source_72;
                                                                                        Py_XDECREF( old );
                                                                                    }

                                                                                }
                                                                                goto branch_end_39;
                                                                                branch_no_39:;
                                                                                {
                                                                                    nuitka_bool tmp_condition_result_40;
                                                                                    PyObject *tmp_compexpr_left_38;
                                                                                    PyObject *tmp_compexpr_right_38;
                                                                                    CHECK_OBJECT( var_group_key );
                                                                                    tmp_compexpr_left_38 = var_group_key;
                                                                                    tmp_compexpr_right_38 = const_str_plain_z;
                                                                                    tmp_res = RICH_COMPARE_BOOL_EQ_OBJECT_OBJECT( tmp_compexpr_left_38, tmp_compexpr_right_38 );
                                                                                    if ( tmp_res == -1 )
                                                                                    {
                                                                                        assert( ERROR_OCCURRED() );

                                                                                        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                                                                                        exception_lineno = 457;
                                                                                        type_description_1 = "oooooooooooooooooooooooooooooooooooooooboooo";
                                                                                        goto try_except_handler_12;
                                                                                    }
                                                                                    tmp_condition_result_40 = ( tmp_res != 0 ) ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
                                                                                    if ( tmp_condition_result_40 == NUITKA_BOOL_TRUE )
                                                                                    {
                                                                                        goto branch_yes_40;
                                                                                    }
                                                                                    else
                                                                                    {
                                                                                        goto branch_no_40;
                                                                                    }
                                                                                    branch_yes_40:;
                                                                                    {
                                                                                        PyObject *tmp_assign_source_73;
                                                                                        PyObject *tmp_subscribed_name_24;
                                                                                        PyObject *tmp_subscript_name_24;
                                                                                        CHECK_OBJECT( var_found_dict );
                                                                                        tmp_subscribed_name_24 = var_found_dict;
                                                                                        tmp_subscript_name_24 = const_str_plain_z;
                                                                                        tmp_assign_source_73 = LOOKUP_SUBSCRIPT( tmp_subscribed_name_24, tmp_subscript_name_24 );
                                                                                        if ( tmp_assign_source_73 == NULL )
                                                                                        {
                                                                                            assert( ERROR_OCCURRED() );

                                                                                            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                                                                                            exception_lineno = 458;
                                                                                            type_description_1 = "oooooooooooooooooooooooooooooooooooooooboooo";
                                                                                            goto try_except_handler_12;
                                                                                        }
                                                                                        {
                                                                                            PyObject *old = var_z;
                                                                                            var_z = tmp_assign_source_73;
                                                                                            Py_XDECREF( old );
                                                                                        }

                                                                                    }
                                                                                    {
                                                                                        nuitka_bool tmp_condition_result_41;
                                                                                        PyObject *tmp_compexpr_left_39;
                                                                                        PyObject *tmp_compexpr_right_39;
                                                                                        CHECK_OBJECT( var_z );
                                                                                        tmp_compexpr_left_39 = var_z;
                                                                                        tmp_compexpr_right_39 = const_str_plain_Z;
                                                                                        tmp_res = RICH_COMPARE_BOOL_EQ_OBJECT_OBJECT( tmp_compexpr_left_39, tmp_compexpr_right_39 );
                                                                                        if ( tmp_res == -1 )
                                                                                        {
                                                                                            assert( ERROR_OCCURRED() );

                                                                                            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                                                                                            exception_lineno = 459;
                                                                                            type_description_1 = "oooooooooooooooooooooooooooooooooooooooboooo";
                                                                                            goto try_except_handler_12;
                                                                                        }
                                                                                        tmp_condition_result_41 = ( tmp_res != 0 ) ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
                                                                                        if ( tmp_condition_result_41 == NUITKA_BOOL_TRUE )
                                                                                        {
                                                                                            goto branch_yes_41;
                                                                                        }
                                                                                        else
                                                                                        {
                                                                                            goto branch_no_41;
                                                                                        }
                                                                                        branch_yes_41:;
                                                                                        {
                                                                                            PyObject *tmp_assign_source_74;
                                                                                            tmp_assign_source_74 = const_int_0;
                                                                                            {
                                                                                                PyObject *old = var_gmtoff;
                                                                                                var_gmtoff = tmp_assign_source_74;
                                                                                                Py_INCREF( var_gmtoff );
                                                                                                Py_XDECREF( old );
                                                                                            }

                                                                                        }
                                                                                        goto branch_end_41;
                                                                                        branch_no_41:;
                                                                                        {
                                                                                            nuitka_bool tmp_condition_result_42;
                                                                                            PyObject *tmp_compexpr_left_40;
                                                                                            PyObject *tmp_compexpr_right_40;
                                                                                            PyObject *tmp_subscribed_name_25;
                                                                                            PyObject *tmp_subscript_name_25;
                                                                                            CHECK_OBJECT( var_z );
                                                                                            tmp_subscribed_name_25 = var_z;
                                                                                            tmp_subscript_name_25 = const_int_pos_3;
                                                                                            tmp_compexpr_left_40 = LOOKUP_SUBSCRIPT_CONST( tmp_subscribed_name_25, tmp_subscript_name_25, 3 );
                                                                                            if ( tmp_compexpr_left_40 == NULL )
                                                                                            {
                                                                                                assert( ERROR_OCCURRED() );

                                                                                                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                                                                                                exception_lineno = 462;
                                                                                                type_description_1 = "oooooooooooooooooooooooooooooooooooooooboooo";
                                                                                                goto try_except_handler_12;
                                                                                            }
                                                                                            tmp_compexpr_right_40 = const_str_chr_58;
                                                                                            tmp_res = RICH_COMPARE_BOOL_EQ_OBJECT_OBJECT( tmp_compexpr_left_40, tmp_compexpr_right_40 );
                                                                                            Py_DECREF( tmp_compexpr_left_40 );
                                                                                            if ( tmp_res == -1 )
                                                                                            {
                                                                                                assert( ERROR_OCCURRED() );

                                                                                                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                                                                                                exception_lineno = 462;
                                                                                                type_description_1 = "oooooooooooooooooooooooooooooooooooooooboooo";
                                                                                                goto try_except_handler_12;
                                                                                            }
                                                                                            tmp_condition_result_42 = ( tmp_res != 0 ) ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
                                                                                            if ( tmp_condition_result_42 == NUITKA_BOOL_TRUE )
                                                                                            {
                                                                                                goto branch_yes_42;
                                                                                            }
                                                                                            else
                                                                                            {
                                                                                                goto branch_no_42;
                                                                                            }
                                                                                            branch_yes_42:;
                                                                                            {
                                                                                                PyObject *tmp_assign_source_75;
                                                                                                PyObject *tmp_left_name_13;
                                                                                                PyObject *tmp_subscribed_name_26;
                                                                                                PyObject *tmp_subscript_name_26;
                                                                                                PyObject *tmp_right_name_13;
                                                                                                PyObject *tmp_subscribed_name_27;
                                                                                                PyObject *tmp_subscript_name_27;
                                                                                                CHECK_OBJECT( var_z );
                                                                                                tmp_subscribed_name_26 = var_z;
                                                                                                tmp_subscript_name_26 = const_slice_none_int_pos_3_none;
                                                                                                tmp_left_name_13 = LOOKUP_SUBSCRIPT( tmp_subscribed_name_26, tmp_subscript_name_26 );
                                                                                                if ( tmp_left_name_13 == NULL )
                                                                                                {
                                                                                                    assert( ERROR_OCCURRED() );

                                                                                                    FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                                                                                                    exception_lineno = 463;
                                                                                                    type_description_1 = "oooooooooooooooooooooooooooooooooooooooboooo";
                                                                                                    goto try_except_handler_12;
                                                                                                }
                                                                                                CHECK_OBJECT( var_z );
                                                                                                tmp_subscribed_name_27 = var_z;
                                                                                                tmp_subscript_name_27 = const_slice_int_pos_4_none_none;
                                                                                                tmp_right_name_13 = LOOKUP_SUBSCRIPT( tmp_subscribed_name_27, tmp_subscript_name_27 );
                                                                                                if ( tmp_right_name_13 == NULL )
                                                                                                {
                                                                                                    assert( ERROR_OCCURRED() );

                                                                                                    FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
                                                                                                    Py_DECREF( tmp_left_name_13 );

                                                                                                    exception_lineno = 463;
                                                                                                    type_description_1 = "oooooooooooooooooooooooooooooooooooooooboooo";
                                                                                                    goto try_except_handler_12;
                                                                                                }
                                                                                                tmp_assign_source_75 = BINARY_OPERATION_ADD_OBJECT_OBJECT( tmp_left_name_13, tmp_right_name_13 );
                                                                                                Py_DECREF( tmp_left_name_13 );
                                                                                                Py_DECREF( tmp_right_name_13 );
                                                                                                if ( tmp_assign_source_75 == NULL )
                                                                                                {
                                                                                                    assert( ERROR_OCCURRED() );

                                                                                                    FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                                                                                                    exception_lineno = 463;
                                                                                                    type_description_1 = "oooooooooooooooooooooooooooooooooooooooboooo";
                                                                                                    goto try_except_handler_12;
                                                                                                }
                                                                                                {
                                                                                                    PyObject *old = var_z;
                                                                                                    assert( old != NULL );
                                                                                                    var_z = tmp_assign_source_75;
                                                                                                    Py_DECREF( old );
                                                                                                }

                                                                                            }
                                                                                            {
                                                                                                nuitka_bool tmp_condition_result_43;
                                                                                                PyObject *tmp_compexpr_left_41;
                                                                                                PyObject *tmp_compexpr_right_41;
                                                                                                PyObject *tmp_len_arg_4;
                                                                                                CHECK_OBJECT( var_z );
                                                                                                tmp_len_arg_4 = var_z;
                                                                                                tmp_compexpr_left_41 = BUILTIN_LEN( tmp_len_arg_4 );
                                                                                                if ( tmp_compexpr_left_41 == NULL )
                                                                                                {
                                                                                                    assert( ERROR_OCCURRED() );

                                                                                                    FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                                                                                                    exception_lineno = 464;
                                                                                                    type_description_1 = "oooooooooooooooooooooooooooooooooooooooboooo";
                                                                                                    goto try_except_handler_12;
                                                                                                }
                                                                                                tmp_compexpr_right_41 = const_int_pos_5;
                                                                                                tmp_res = RICH_COMPARE_BOOL_GT_OBJECT_OBJECT( tmp_compexpr_left_41, tmp_compexpr_right_41 );
                                                                                                Py_DECREF( tmp_compexpr_left_41 );
                                                                                                assert( !(tmp_res == -1) );
                                                                                                tmp_condition_result_43 = ( tmp_res != 0 ) ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
                                                                                                if ( tmp_condition_result_43 == NUITKA_BOOL_TRUE )
                                                                                                {
                                                                                                    goto branch_yes_43;
                                                                                                }
                                                                                                else
                                                                                                {
                                                                                                    goto branch_no_43;
                                                                                                }
                                                                                                branch_yes_43:;
                                                                                                {
                                                                                                    nuitka_bool tmp_condition_result_44;
                                                                                                    PyObject *tmp_compexpr_left_42;
                                                                                                    PyObject *tmp_compexpr_right_42;
                                                                                                    PyObject *tmp_subscribed_name_28;
                                                                                                    PyObject *tmp_subscript_name_28;
                                                                                                    CHECK_OBJECT( var_z );
                                                                                                    tmp_subscribed_name_28 = var_z;
                                                                                                    tmp_subscript_name_28 = const_int_pos_5;
                                                                                                    tmp_compexpr_left_42 = LOOKUP_SUBSCRIPT_CONST( tmp_subscribed_name_28, tmp_subscript_name_28, 5 );
                                                                                                    if ( tmp_compexpr_left_42 == NULL )
                                                                                                    {
                                                                                                        assert( ERROR_OCCURRED() );

                                                                                                        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                                                                                                        exception_lineno = 465;
                                                                                                        type_description_1 = "oooooooooooooooooooooooooooooooooooooooboooo";
                                                                                                        goto try_except_handler_12;
                                                                                                    }
                                                                                                    tmp_compexpr_right_42 = const_str_chr_58;
                                                                                                    tmp_res = RICH_COMPARE_BOOL_NOTEQ_OBJECT_OBJECT( tmp_compexpr_left_42, tmp_compexpr_right_42 );
                                                                                                    Py_DECREF( tmp_compexpr_left_42 );
                                                                                                    if ( tmp_res == -1 )
                                                                                                    {
                                                                                                        assert( ERROR_OCCURRED() );

                                                                                                        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                                                                                                        exception_lineno = 465;
                                                                                                        type_description_1 = "oooooooooooooooooooooooooooooooooooooooboooo";
                                                                                                        goto try_except_handler_12;
                                                                                                    }
                                                                                                    tmp_condition_result_44 = ( tmp_res != 0 ) ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
                                                                                                    if ( tmp_condition_result_44 == NUITKA_BOOL_TRUE )
                                                                                                    {
                                                                                                        goto branch_yes_44;
                                                                                                    }
                                                                                                    else
                                                                                                    {
                                                                                                        goto branch_no_44;
                                                                                                    }
                                                                                                    branch_yes_44:;
                                                                                                    {
                                                                                                        PyObject *tmp_assign_source_76;
                                                                                                        PyObject *tmp_string_concat_values_1;
                                                                                                        PyObject *tmp_tuple_element_4;
                                                                                                        PyObject *tmp_format_value_1;
                                                                                                        PyObject *tmp_subscribed_name_29;
                                                                                                        PyObject *tmp_subscript_name_29;
                                                                                                        PyObject *tmp_format_spec_1;
                                                                                                        tmp_tuple_element_4 = const_str_digest_ae1cc841a7086e2cb0917c15d6e6cce8;
                                                                                                        tmp_string_concat_values_1 = PyTuple_New( 2 );
                                                                                                        Py_INCREF( tmp_tuple_element_4 );
                                                                                                        PyTuple_SET_ITEM( tmp_string_concat_values_1, 0, tmp_tuple_element_4 );
                                                                                                        CHECK_OBJECT( var_found_dict );
                                                                                                        tmp_subscribed_name_29 = var_found_dict;
                                                                                                        tmp_subscript_name_29 = const_str_plain_z;
                                                                                                        tmp_format_value_1 = LOOKUP_SUBSCRIPT( tmp_subscribed_name_29, tmp_subscript_name_29 );
                                                                                                        if ( tmp_format_value_1 == NULL )
                                                                                                        {
                                                                                                            assert( ERROR_OCCURRED() );

                                                                                                            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
                                                                                                            Py_DECREF( tmp_string_concat_values_1 );

                                                                                                            exception_lineno = 466;
                                                                                                            type_description_1 = "oooooooooooooooooooooooooooooooooooooooboooo";
                                                                                                            goto try_except_handler_12;
                                                                                                        }
                                                                                                        tmp_format_spec_1 = const_str_empty;
                                                                                                        tmp_tuple_element_4 = BUILTIN_FORMAT( tmp_format_value_1, tmp_format_spec_1 );
                                                                                                        Py_DECREF( tmp_format_value_1 );
                                                                                                        if ( tmp_tuple_element_4 == NULL )
                                                                                                        {
                                                                                                            assert( ERROR_OCCURRED() );

                                                                                                            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
                                                                                                            Py_DECREF( tmp_string_concat_values_1 );

                                                                                                            exception_lineno = 466;
                                                                                                            type_description_1 = "oooooooooooooooooooooooooooooooooooooooboooo";
                                                                                                            goto try_except_handler_12;
                                                                                                        }
                                                                                                        PyTuple_SET_ITEM( tmp_string_concat_values_1, 1, tmp_tuple_element_4 );
                                                                                                        tmp_assign_source_76 = PyUnicode_Join( const_str_empty, tmp_string_concat_values_1 );
                                                                                                        Py_DECREF( tmp_string_concat_values_1 );
                                                                                                        if ( tmp_assign_source_76 == NULL )
                                                                                                        {
                                                                                                            assert( ERROR_OCCURRED() );

                                                                                                            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                                                                                                            exception_lineno = 466;
                                                                                                            type_description_1 = "oooooooooooooooooooooooooooooooooooooooboooo";
                                                                                                            goto try_except_handler_12;
                                                                                                        }
                                                                                                        {
                                                                                                            PyObject *old = var_msg;
                                                                                                            var_msg = tmp_assign_source_76;
                                                                                                            Py_XDECREF( old );
                                                                                                        }

                                                                                                    }
                                                                                                    {
                                                                                                        PyObject *tmp_raise_type_6;
                                                                                                        PyObject *tmp_make_exception_arg_6;
                                                                                                        CHECK_OBJECT( var_msg );
                                                                                                        tmp_make_exception_arg_6 = var_msg;
                                                                                                        frame_285d3548e213aa4c5d6aef1855a305f1->m_frame.f_lineno = 467;
                                                                                                        {
                                                                                                            PyObject *call_args[] = { tmp_make_exception_arg_6 };
                                                                                                            tmp_raise_type_6 = CALL_FUNCTION_WITH_ARGS1( PyExc_ValueError, call_args );
                                                                                                        }

                                                                                                        assert( !(tmp_raise_type_6 == NULL) );
                                                                                                        exception_type = tmp_raise_type_6;
                                                                                                        exception_lineno = 467;
                                                                                                        RAISE_EXCEPTION_WITH_TYPE( &exception_type, &exception_value, &exception_tb );
                                                                                                        type_description_1 = "oooooooooooooooooooooooooooooooooooooooboooo";
                                                                                                        goto try_except_handler_12;
                                                                                                    }
                                                                                                    branch_no_44:;
                                                                                                }
                                                                                                {
                                                                                                    PyObject *tmp_assign_source_77;
                                                                                                    PyObject *tmp_left_name_14;
                                                                                                    PyObject *tmp_subscribed_name_30;
                                                                                                    PyObject *tmp_subscript_name_30;
                                                                                                    PyObject *tmp_right_name_14;
                                                                                                    PyObject *tmp_subscribed_name_31;
                                                                                                    PyObject *tmp_subscript_name_31;
                                                                                                    CHECK_OBJECT( var_z );
                                                                                                    tmp_subscribed_name_30 = var_z;
                                                                                                    tmp_subscript_name_30 = const_slice_none_int_pos_5_none;
                                                                                                    tmp_left_name_14 = LOOKUP_SUBSCRIPT( tmp_subscribed_name_30, tmp_subscript_name_30 );
                                                                                                    if ( tmp_left_name_14 == NULL )
                                                                                                    {
                                                                                                        assert( ERROR_OCCURRED() );

                                                                                                        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                                                                                                        exception_lineno = 468;
                                                                                                        type_description_1 = "oooooooooooooooooooooooooooooooooooooooboooo";
                                                                                                        goto try_except_handler_12;
                                                                                                    }
                                                                                                    CHECK_OBJECT( var_z );
                                                                                                    tmp_subscribed_name_31 = var_z;
                                                                                                    tmp_subscript_name_31 = const_slice_int_pos_6_none_none;
                                                                                                    tmp_right_name_14 = LOOKUP_SUBSCRIPT( tmp_subscribed_name_31, tmp_subscript_name_31 );
                                                                                                    if ( tmp_right_name_14 == NULL )
                                                                                                    {
                                                                                                        assert( ERROR_OCCURRED() );

                                                                                                        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
                                                                                                        Py_DECREF( tmp_left_name_14 );

                                                                                                        exception_lineno = 468;
                                                                                                        type_description_1 = "oooooooooooooooooooooooooooooooooooooooboooo";
                                                                                                        goto try_except_handler_12;
                                                                                                    }
                                                                                                    tmp_assign_source_77 = BINARY_OPERATION_ADD_OBJECT_OBJECT( tmp_left_name_14, tmp_right_name_14 );
                                                                                                    Py_DECREF( tmp_left_name_14 );
                                                                                                    Py_DECREF( tmp_right_name_14 );
                                                                                                    if ( tmp_assign_source_77 == NULL )
                                                                                                    {
                                                                                                        assert( ERROR_OCCURRED() );

                                                                                                        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                                                                                                        exception_lineno = 468;
                                                                                                        type_description_1 = "oooooooooooooooooooooooooooooooooooooooboooo";
                                                                                                        goto try_except_handler_12;
                                                                                                    }
                                                                                                    {
                                                                                                        PyObject *old = var_z;
                                                                                                        assert( old != NULL );
                                                                                                        var_z = tmp_assign_source_77;
                                                                                                        Py_DECREF( old );
                                                                                                    }

                                                                                                }
                                                                                                branch_no_43:;
                                                                                            }
                                                                                            branch_no_42:;
                                                                                        }
                                                                                        {
                                                                                            PyObject *tmp_assign_source_78;
                                                                                            PyObject *tmp_int_arg_16;
                                                                                            PyObject *tmp_subscribed_name_32;
                                                                                            PyObject *tmp_subscript_name_32;
                                                                                            if ( var_z == NULL )
                                                                                            {

                                                                                                exception_type = PyExc_UnboundLocalError;
                                                                                                Py_INCREF( exception_type );
                                                                                                exception_value = PyUnicode_FromFormat( "local variable '%s' referenced before assignment", "z" );
                                                                                                exception_tb = NULL;
                                                                                                NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
                                                                                                CHAIN_EXCEPTION( exception_value );

                                                                                                exception_lineno = 469;
                                                                                                type_description_1 = "oooooooooooooooooooooooooooooooooooooooboooo";
                                                                                                goto try_except_handler_12;
                                                                                            }

                                                                                            tmp_subscribed_name_32 = var_z;
                                                                                            tmp_subscript_name_32 = const_slice_int_pos_1_int_pos_3_none;
                                                                                            tmp_int_arg_16 = LOOKUP_SUBSCRIPT( tmp_subscribed_name_32, tmp_subscript_name_32 );
                                                                                            if ( tmp_int_arg_16 == NULL )
                                                                                            {
                                                                                                assert( ERROR_OCCURRED() );

                                                                                                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                                                                                                exception_lineno = 469;
                                                                                                type_description_1 = "oooooooooooooooooooooooooooooooooooooooboooo";
                                                                                                goto try_except_handler_12;
                                                                                            }
                                                                                            tmp_assign_source_78 = PyNumber_Int( tmp_int_arg_16 );
                                                                                            Py_DECREF( tmp_int_arg_16 );
                                                                                            if ( tmp_assign_source_78 == NULL )
                                                                                            {
                                                                                                assert( ERROR_OCCURRED() );

                                                                                                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                                                                                                exception_lineno = 469;
                                                                                                type_description_1 = "oooooooooooooooooooooooooooooooooooooooboooo";
                                                                                                goto try_except_handler_12;
                                                                                            }
                                                                                            {
                                                                                                PyObject *old = var_hours;
                                                                                                var_hours = tmp_assign_source_78;
                                                                                                Py_XDECREF( old );
                                                                                            }

                                                                                        }
                                                                                        {
                                                                                            PyObject *tmp_assign_source_79;
                                                                                            PyObject *tmp_int_arg_17;
                                                                                            PyObject *tmp_subscribed_name_33;
                                                                                            PyObject *tmp_subscript_name_33;
                                                                                            if ( var_z == NULL )
                                                                                            {

                                                                                                exception_type = PyExc_UnboundLocalError;
                                                                                                Py_INCREF( exception_type );
                                                                                                exception_value = PyUnicode_FromFormat( "local variable '%s' referenced before assignment", "z" );
                                                                                                exception_tb = NULL;
                                                                                                NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
                                                                                                CHAIN_EXCEPTION( exception_value );

                                                                                                exception_lineno = 470;
                                                                                                type_description_1 = "oooooooooooooooooooooooooooooooooooooooboooo";
                                                                                                goto try_except_handler_12;
                                                                                            }

                                                                                            tmp_subscribed_name_33 = var_z;
                                                                                            tmp_subscript_name_33 = const_slice_int_pos_3_int_pos_5_none;
                                                                                            tmp_int_arg_17 = LOOKUP_SUBSCRIPT( tmp_subscribed_name_33, tmp_subscript_name_33 );
                                                                                            if ( tmp_int_arg_17 == NULL )
                                                                                            {
                                                                                                assert( ERROR_OCCURRED() );

                                                                                                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                                                                                                exception_lineno = 470;
                                                                                                type_description_1 = "oooooooooooooooooooooooooooooooooooooooboooo";
                                                                                                goto try_except_handler_12;
                                                                                            }
                                                                                            tmp_assign_source_79 = PyNumber_Int( tmp_int_arg_17 );
                                                                                            Py_DECREF( tmp_int_arg_17 );
                                                                                            if ( tmp_assign_source_79 == NULL )
                                                                                            {
                                                                                                assert( ERROR_OCCURRED() );

                                                                                                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                                                                                                exception_lineno = 470;
                                                                                                type_description_1 = "oooooooooooooooooooooooooooooooooooooooboooo";
                                                                                                goto try_except_handler_12;
                                                                                            }
                                                                                            {
                                                                                                PyObject *old = var_minutes;
                                                                                                var_minutes = tmp_assign_source_79;
                                                                                                Py_XDECREF( old );
                                                                                            }

                                                                                        }
                                                                                        {
                                                                                            PyObject *tmp_assign_source_80;
                                                                                            PyObject *tmp_int_arg_18;
                                                                                            int tmp_or_left_truth_3;
                                                                                            PyObject *tmp_or_left_value_3;
                                                                                            PyObject *tmp_or_right_value_3;
                                                                                            PyObject *tmp_subscribed_name_34;
                                                                                            PyObject *tmp_subscript_name_34;
                                                                                            if ( var_z == NULL )
                                                                                            {

                                                                                                exception_type = PyExc_UnboundLocalError;
                                                                                                Py_INCREF( exception_type );
                                                                                                exception_value = PyUnicode_FromFormat( "local variable '%s' referenced before assignment", "z" );
                                                                                                exception_tb = NULL;
                                                                                                NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
                                                                                                CHAIN_EXCEPTION( exception_value );

                                                                                                exception_lineno = 471;
                                                                                                type_description_1 = "oooooooooooooooooooooooooooooooooooooooboooo";
                                                                                                goto try_except_handler_12;
                                                                                            }

                                                                                            tmp_subscribed_name_34 = var_z;
                                                                                            tmp_subscript_name_34 = const_slice_int_pos_5_int_pos_7_none;
                                                                                            tmp_or_left_value_3 = LOOKUP_SUBSCRIPT( tmp_subscribed_name_34, tmp_subscript_name_34 );
                                                                                            if ( tmp_or_left_value_3 == NULL )
                                                                                            {
                                                                                                assert( ERROR_OCCURRED() );

                                                                                                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                                                                                                exception_lineno = 471;
                                                                                                type_description_1 = "oooooooooooooooooooooooooooooooooooooooboooo";
                                                                                                goto try_except_handler_12;
                                                                                            }
                                                                                            tmp_or_left_truth_3 = CHECK_IF_TRUE( tmp_or_left_value_3 );
                                                                                            if ( tmp_or_left_truth_3 == -1 )
                                                                                            {
                                                                                                assert( ERROR_OCCURRED() );

                                                                                                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
                                                                                                Py_DECREF( tmp_or_left_value_3 );

                                                                                                exception_lineno = 471;
                                                                                                type_description_1 = "oooooooooooooooooooooooooooooooooooooooboooo";
                                                                                                goto try_except_handler_12;
                                                                                            }
                                                                                            if ( tmp_or_left_truth_3 == 1 )
                                                                                            {
                                                                                                goto or_left_3;
                                                                                            }
                                                                                            else
                                                                                            {
                                                                                                goto or_right_3;
                                                                                            }
                                                                                            or_right_3:;
                                                                                            Py_DECREF( tmp_or_left_value_3 );
                                                                                            tmp_or_right_value_3 = const_int_0;
                                                                                            Py_INCREF( tmp_or_right_value_3 );
                                                                                            tmp_int_arg_18 = tmp_or_right_value_3;
                                                                                            goto or_end_3;
                                                                                            or_left_3:;
                                                                                            tmp_int_arg_18 = tmp_or_left_value_3;
                                                                                            or_end_3:;
                                                                                            tmp_assign_source_80 = PyNumber_Int( tmp_int_arg_18 );
                                                                                            Py_DECREF( tmp_int_arg_18 );
                                                                                            if ( tmp_assign_source_80 == NULL )
                                                                                            {
                                                                                                assert( ERROR_OCCURRED() );

                                                                                                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                                                                                                exception_lineno = 471;
                                                                                                type_description_1 = "oooooooooooooooooooooooooooooooooooooooboooo";
                                                                                                goto try_except_handler_12;
                                                                                            }
                                                                                            {
                                                                                                PyObject *old = var_seconds;
                                                                                                var_seconds = tmp_assign_source_80;
                                                                                                Py_XDECREF( old );
                                                                                            }

                                                                                        }
                                                                                        {
                                                                                            PyObject *tmp_assign_source_81;
                                                                                            PyObject *tmp_left_name_15;
                                                                                            PyObject *tmp_left_name_16;
                                                                                            PyObject *tmp_left_name_17;
                                                                                            PyObject *tmp_left_name_18;
                                                                                            PyObject *tmp_right_name_15;
                                                                                            PyObject *tmp_right_name_16;
                                                                                            PyObject *tmp_right_name_17;
                                                                                            PyObject *tmp_left_name_19;
                                                                                            PyObject *tmp_right_name_18;
                                                                                            PyObject *tmp_right_name_19;
                                                                                            CHECK_OBJECT( var_hours );
                                                                                            tmp_left_name_18 = var_hours;
                                                                                            tmp_right_name_15 = const_int_pos_60;
                                                                                            tmp_left_name_17 = BINARY_OPERATION_MUL( tmp_left_name_18, tmp_right_name_15 );
                                                                                            if ( tmp_left_name_17 == NULL )
                                                                                            {
                                                                                                assert( ERROR_OCCURRED() );

                                                                                                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                                                                                                exception_lineno = 472;
                                                                                                type_description_1 = "oooooooooooooooooooooooooooooooooooooooboooo";
                                                                                                goto try_except_handler_12;
                                                                                            }
                                                                                            tmp_right_name_16 = const_int_pos_60;
                                                                                            tmp_left_name_16 = BINARY_OPERATION_MUL( tmp_left_name_17, tmp_right_name_16 );
                                                                                            Py_DECREF( tmp_left_name_17 );
                                                                                            if ( tmp_left_name_16 == NULL )
                                                                                            {
                                                                                                assert( ERROR_OCCURRED() );

                                                                                                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                                                                                                exception_lineno = 472;
                                                                                                type_description_1 = "oooooooooooooooooooooooooooooooooooooooboooo";
                                                                                                goto try_except_handler_12;
                                                                                            }
                                                                                            CHECK_OBJECT( var_minutes );
                                                                                            tmp_left_name_19 = var_minutes;
                                                                                            tmp_right_name_18 = const_int_pos_60;
                                                                                            tmp_right_name_17 = BINARY_OPERATION_MUL( tmp_left_name_19, tmp_right_name_18 );
                                                                                            if ( tmp_right_name_17 == NULL )
                                                                                            {
                                                                                                assert( ERROR_OCCURRED() );

                                                                                                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
                                                                                                Py_DECREF( tmp_left_name_16 );

                                                                                                exception_lineno = 472;
                                                                                                type_description_1 = "oooooooooooooooooooooooooooooooooooooooboooo";
                                                                                                goto try_except_handler_12;
                                                                                            }
                                                                                            tmp_left_name_15 = BINARY_OPERATION_ADD_OBJECT_OBJECT( tmp_left_name_16, tmp_right_name_17 );
                                                                                            Py_DECREF( tmp_left_name_16 );
                                                                                            Py_DECREF( tmp_right_name_17 );
                                                                                            if ( tmp_left_name_15 == NULL )
                                                                                            {
                                                                                                assert( ERROR_OCCURRED() );

                                                                                                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                                                                                                exception_lineno = 472;
                                                                                                type_description_1 = "oooooooooooooooooooooooooooooooooooooooboooo";
                                                                                                goto try_except_handler_12;
                                                                                            }
                                                                                            CHECK_OBJECT( var_seconds );
                                                                                            tmp_right_name_19 = var_seconds;
                                                                                            tmp_assign_source_81 = BINARY_OPERATION_ADD_OBJECT_OBJECT( tmp_left_name_15, tmp_right_name_19 );
                                                                                            Py_DECREF( tmp_left_name_15 );
                                                                                            if ( tmp_assign_source_81 == NULL )
                                                                                            {
                                                                                                assert( ERROR_OCCURRED() );

                                                                                                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                                                                                                exception_lineno = 472;
                                                                                                type_description_1 = "oooooooooooooooooooooooooooooooooooooooboooo";
                                                                                                goto try_except_handler_12;
                                                                                            }
                                                                                            {
                                                                                                PyObject *old = var_gmtoff;
                                                                                                var_gmtoff = tmp_assign_source_81;
                                                                                                Py_XDECREF( old );
                                                                                            }

                                                                                        }
                                                                                        {
                                                                                            PyObject *tmp_assign_source_82;
                                                                                            PyObject *tmp_subscribed_name_35;
                                                                                            PyObject *tmp_subscript_name_35;
                                                                                            if ( var_z == NULL )
                                                                                            {

                                                                                                exception_type = PyExc_UnboundLocalError;
                                                                                                Py_INCREF( exception_type );
                                                                                                exception_value = PyUnicode_FromFormat( "local variable '%s' referenced before assignment", "z" );
                                                                                                exception_tb = NULL;
                                                                                                NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
                                                                                                CHAIN_EXCEPTION( exception_value );

                                                                                                exception_lineno = 473;
                                                                                                type_description_1 = "oooooooooooooooooooooooooooooooooooooooboooo";
                                                                                                goto try_except_handler_12;
                                                                                            }

                                                                                            tmp_subscribed_name_35 = var_z;
                                                                                            tmp_subscript_name_35 = const_slice_int_pos_8_none_none;
                                                                                            tmp_assign_source_82 = LOOKUP_SUBSCRIPT( tmp_subscribed_name_35, tmp_subscript_name_35 );
                                                                                            if ( tmp_assign_source_82 == NULL )
                                                                                            {
                                                                                                assert( ERROR_OCCURRED() );

                                                                                                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                                                                                                exception_lineno = 473;
                                                                                                type_description_1 = "oooooooooooooooooooooooooooooooooooooooboooo";
                                                                                                goto try_except_handler_12;
                                                                                            }
                                                                                            {
                                                                                                PyObject *old = var_gmtoff_remainder;
                                                                                                var_gmtoff_remainder = tmp_assign_source_82;
                                                                                                Py_XDECREF( old );
                                                                                            }

                                                                                        }
                                                                                        {
                                                                                            PyObject *tmp_assign_source_83;
                                                                                            PyObject *tmp_left_name_20;
                                                                                            PyObject *tmp_right_name_20;
                                                                                            PyObject *tmp_left_name_21;
                                                                                            PyObject *tmp_right_name_21;
                                                                                            PyObject *tmp_len_arg_5;
                                                                                            tmp_left_name_20 = const_str_plain_0;
                                                                                            tmp_left_name_21 = const_int_pos_6;
                                                                                            CHECK_OBJECT( var_gmtoff_remainder );
                                                                                            tmp_len_arg_5 = var_gmtoff_remainder;
                                                                                            tmp_right_name_21 = BUILTIN_LEN( tmp_len_arg_5 );
                                                                                            if ( tmp_right_name_21 == NULL )
                                                                                            {
                                                                                                assert( ERROR_OCCURRED() );

                                                                                                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                                                                                                exception_lineno = 475;
                                                                                                type_description_1 = "oooooooooooooooooooooooooooooooooooooooboooo";
                                                                                                goto try_except_handler_12;
                                                                                            }
                                                                                            tmp_right_name_20 = BINARY_OPERATION_SUB( tmp_left_name_21, tmp_right_name_21 );
                                                                                            Py_DECREF( tmp_right_name_21 );
                                                                                            if ( tmp_right_name_20 == NULL )
                                                                                            {
                                                                                                assert( ERROR_OCCURRED() );

                                                                                                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                                                                                                exception_lineno = 475;
                                                                                                type_description_1 = "oooooooooooooooooooooooooooooooooooooooboooo";
                                                                                                goto try_except_handler_12;
                                                                                            }
                                                                                            tmp_assign_source_83 = BINARY_OPERATION_MUL( tmp_left_name_20, tmp_right_name_20 );
                                                                                            Py_DECREF( tmp_right_name_20 );
                                                                                            if ( tmp_assign_source_83 == NULL )
                                                                                            {
                                                                                                assert( ERROR_OCCURRED() );

                                                                                                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                                                                                                exception_lineno = 475;
                                                                                                type_description_1 = "oooooooooooooooooooooooooooooooooooooooboooo";
                                                                                                goto try_except_handler_12;
                                                                                            }
                                                                                            {
                                                                                                PyObject *old = var_gmtoff_remainder_padding;
                                                                                                var_gmtoff_remainder_padding = tmp_assign_source_83;
                                                                                                Py_XDECREF( old );
                                                                                            }

                                                                                        }
                                                                                        {
                                                                                            PyObject *tmp_assign_source_84;
                                                                                            PyObject *tmp_int_arg_19;
                                                                                            PyObject *tmp_left_name_22;
                                                                                            PyObject *tmp_right_name_22;
                                                                                            CHECK_OBJECT( var_gmtoff_remainder );
                                                                                            tmp_left_name_22 = var_gmtoff_remainder;
                                                                                            CHECK_OBJECT( var_gmtoff_remainder_padding );
                                                                                            tmp_right_name_22 = var_gmtoff_remainder_padding;
                                                                                            tmp_int_arg_19 = BINARY_OPERATION_ADD_OBJECT_OBJECT( tmp_left_name_22, tmp_right_name_22 );
                                                                                            if ( tmp_int_arg_19 == NULL )
                                                                                            {
                                                                                                assert( ERROR_OCCURRED() );

                                                                                                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                                                                                                exception_lineno = 476;
                                                                                                type_description_1 = "oooooooooooooooooooooooooooooooooooooooboooo";
                                                                                                goto try_except_handler_12;
                                                                                            }
                                                                                            tmp_assign_source_84 = PyNumber_Int( tmp_int_arg_19 );
                                                                                            Py_DECREF( tmp_int_arg_19 );
                                                                                            if ( tmp_assign_source_84 == NULL )
                                                                                            {
                                                                                                assert( ERROR_OCCURRED() );

                                                                                                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                                                                                                exception_lineno = 476;
                                                                                                type_description_1 = "oooooooooooooooooooooooooooooooooooooooboooo";
                                                                                                goto try_except_handler_12;
                                                                                            }
                                                                                            {
                                                                                                PyObject *old = var_gmtoff_fraction;
                                                                                                var_gmtoff_fraction = tmp_assign_source_84;
                                                                                                Py_XDECREF( old );
                                                                                            }

                                                                                        }
                                                                                        {
                                                                                            nuitka_bool tmp_condition_result_45;
                                                                                            PyObject *tmp_called_instance_17;
                                                                                            PyObject *tmp_call_result_5;
                                                                                            int tmp_truth_name_1;
                                                                                            if ( var_z == NULL )
                                                                                            {

                                                                                                exception_type = PyExc_UnboundLocalError;
                                                                                                Py_INCREF( exception_type );
                                                                                                exception_value = PyUnicode_FromFormat( "local variable '%s' referenced before assignment", "z" );
                                                                                                exception_tb = NULL;
                                                                                                NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
                                                                                                CHAIN_EXCEPTION( exception_value );

                                                                                                exception_lineno = 477;
                                                                                                type_description_1 = "oooooooooooooooooooooooooooooooooooooooboooo";
                                                                                                goto try_except_handler_12;
                                                                                            }

                                                                                            tmp_called_instance_17 = var_z;
                                                                                            frame_285d3548e213aa4c5d6aef1855a305f1->m_frame.f_lineno = 477;
                                                                                            tmp_call_result_5 = CALL_METHOD_WITH_ARGS1( tmp_called_instance_17, const_str_plain_startswith, &PyTuple_GET_ITEM( const_tuple_str_chr_45_tuple, 0 ) );

                                                                                            if ( tmp_call_result_5 == NULL )
                                                                                            {
                                                                                                assert( ERROR_OCCURRED() );

                                                                                                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                                                                                                exception_lineno = 477;
                                                                                                type_description_1 = "oooooooooooooooooooooooooooooooooooooooboooo";
                                                                                                goto try_except_handler_12;
                                                                                            }
                                                                                            tmp_truth_name_1 = CHECK_IF_TRUE( tmp_call_result_5 );
                                                                                            if ( tmp_truth_name_1 == -1 )
                                                                                            {
                                                                                                assert( ERROR_OCCURRED() );

                                                                                                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
                                                                                                Py_DECREF( tmp_call_result_5 );

                                                                                                exception_lineno = 477;
                                                                                                type_description_1 = "oooooooooooooooooooooooooooooooooooooooboooo";
                                                                                                goto try_except_handler_12;
                                                                                            }
                                                                                            tmp_condition_result_45 = tmp_truth_name_1 == 1 ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
                                                                                            Py_DECREF( tmp_call_result_5 );
                                                                                            if ( tmp_condition_result_45 == NUITKA_BOOL_TRUE )
                                                                                            {
                                                                                                goto branch_yes_45;
                                                                                            }
                                                                                            else
                                                                                            {
                                                                                                goto branch_no_45;
                                                                                            }
                                                                                            branch_yes_45:;
                                                                                            {
                                                                                                PyObject *tmp_assign_source_85;
                                                                                                PyObject *tmp_operand_name_5;
                                                                                                CHECK_OBJECT( var_gmtoff );
                                                                                                tmp_operand_name_5 = var_gmtoff;
                                                                                                tmp_assign_source_85 = UNARY_OPERATION( PyNumber_Negative, tmp_operand_name_5 );
                                                                                                if ( tmp_assign_source_85 == NULL )
                                                                                                {
                                                                                                    assert( ERROR_OCCURRED() );

                                                                                                    FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                                                                                                    exception_lineno = 478;
                                                                                                    type_description_1 = "oooooooooooooooooooooooooooooooooooooooboooo";
                                                                                                    goto try_except_handler_12;
                                                                                                }
                                                                                                {
                                                                                                    PyObject *old = var_gmtoff;
                                                                                                    assert( old != NULL );
                                                                                                    var_gmtoff = tmp_assign_source_85;
                                                                                                    Py_DECREF( old );
                                                                                                }

                                                                                            }
                                                                                            {
                                                                                                PyObject *tmp_assign_source_86;
                                                                                                PyObject *tmp_operand_name_6;
                                                                                                CHECK_OBJECT( var_gmtoff_fraction );
                                                                                                tmp_operand_name_6 = var_gmtoff_fraction;
                                                                                                tmp_assign_source_86 = UNARY_OPERATION( PyNumber_Negative, tmp_operand_name_6 );
                                                                                                if ( tmp_assign_source_86 == NULL )
                                                                                                {
                                                                                                    assert( ERROR_OCCURRED() );

                                                                                                    FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                                                                                                    exception_lineno = 479;
                                                                                                    type_description_1 = "oooooooooooooooooooooooooooooooooooooooboooo";
                                                                                                    goto try_except_handler_12;
                                                                                                }
                                                                                                {
                                                                                                    PyObject *old = var_gmtoff_fraction;
                                                                                                    assert( old != NULL );
                                                                                                    var_gmtoff_fraction = tmp_assign_source_86;
                                                                                                    Py_DECREF( old );
                                                                                                }

                                                                                            }
                                                                                            branch_no_45:;
                                                                                        }
                                                                                        branch_end_41:;
                                                                                    }
                                                                                    goto branch_end_40;
                                                                                    branch_no_40:;
                                                                                    {
                                                                                        nuitka_bool tmp_condition_result_46;
                                                                                        PyObject *tmp_compexpr_left_43;
                                                                                        PyObject *tmp_compexpr_right_43;
                                                                                        CHECK_OBJECT( var_group_key );
                                                                                        tmp_compexpr_left_43 = var_group_key;
                                                                                        tmp_compexpr_right_43 = const_str_plain_Z;
                                                                                        tmp_res = RICH_COMPARE_BOOL_EQ_OBJECT_OBJECT( tmp_compexpr_left_43, tmp_compexpr_right_43 );
                                                                                        if ( tmp_res == -1 )
                                                                                        {
                                                                                            assert( ERROR_OCCURRED() );

                                                                                            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                                                                                            exception_lineno = 480;
                                                                                            type_description_1 = "oooooooooooooooooooooooooooooooooooooooboooo";
                                                                                            goto try_except_handler_12;
                                                                                        }
                                                                                        tmp_condition_result_46 = ( tmp_res != 0 ) ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
                                                                                        if ( tmp_condition_result_46 == NUITKA_BOOL_TRUE )
                                                                                        {
                                                                                            goto branch_yes_46;
                                                                                        }
                                                                                        else
                                                                                        {
                                                                                            goto branch_no_46;
                                                                                        }
                                                                                        branch_yes_46:;
                                                                                        {
                                                                                            PyObject *tmp_assign_source_87;
                                                                                            PyObject *tmp_called_instance_18;
                                                                                            PyObject *tmp_subscribed_name_36;
                                                                                            PyObject *tmp_subscript_name_36;
                                                                                            CHECK_OBJECT( var_found_dict );
                                                                                            tmp_subscribed_name_36 = var_found_dict;
                                                                                            tmp_subscript_name_36 = const_str_plain_Z;
                                                                                            tmp_called_instance_18 = LOOKUP_SUBSCRIPT( tmp_subscribed_name_36, tmp_subscript_name_36 );
                                                                                            if ( tmp_called_instance_18 == NULL )
                                                                                            {
                                                                                                assert( ERROR_OCCURRED() );

                                                                                                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                                                                                                exception_lineno = 483;
                                                                                                type_description_1 = "oooooooooooooooooooooooooooooooooooooooboooo";
                                                                                                goto try_except_handler_12;
                                                                                            }
                                                                                            frame_285d3548e213aa4c5d6aef1855a305f1->m_frame.f_lineno = 483;
                                                                                            tmp_assign_source_87 = CALL_METHOD_NO_ARGS( tmp_called_instance_18, const_str_plain_lower );
                                                                                            Py_DECREF( tmp_called_instance_18 );
                                                                                            if ( tmp_assign_source_87 == NULL )
                                                                                            {
                                                                                                assert( ERROR_OCCURRED() );

                                                                                                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                                                                                                exception_lineno = 483;
                                                                                                type_description_1 = "oooooooooooooooooooooooooooooooooooooooboooo";
                                                                                                goto try_except_handler_12;
                                                                                            }
                                                                                            {
                                                                                                PyObject *old = var_found_zone;
                                                                                                var_found_zone = tmp_assign_source_87;
                                                                                                Py_XDECREF( old );
                                                                                            }

                                                                                        }
                                                                                        {
                                                                                            PyObject *tmp_assign_source_88;
                                                                                            PyObject *tmp_iter_arg_4;
                                                                                            PyObject *tmp_called_name_12;
                                                                                            PyObject *tmp_args_element_name_14;
                                                                                            PyObject *tmp_source_name_21;
                                                                                            tmp_called_name_12 = (PyObject *)&PyEnum_Type;
                                                                                            if ( var_locale_time == NULL )
                                                                                            {

                                                                                                exception_type = PyExc_UnboundLocalError;
                                                                                                Py_INCREF( exception_type );
                                                                                                exception_value = PyUnicode_FromFormat( "local variable '%s' referenced before assignment", "locale_time" );
                                                                                                exception_tb = NULL;
                                                                                                NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
                                                                                                CHAIN_EXCEPTION( exception_value );

                                                                                                exception_lineno = 484;
                                                                                                type_description_1 = "oooooooooooooooooooooooooooooooooooooooboooo";
                                                                                                goto try_except_handler_12;
                                                                                            }

                                                                                            tmp_source_name_21 = var_locale_time;
                                                                                            tmp_args_element_name_14 = LOOKUP_ATTRIBUTE( tmp_source_name_21, const_str_plain_timezone );
                                                                                            if ( tmp_args_element_name_14 == NULL )
                                                                                            {
                                                                                                assert( ERROR_OCCURRED() );

                                                                                                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                                                                                                exception_lineno = 484;
                                                                                                type_description_1 = "oooooooooooooooooooooooooooooooooooooooboooo";
                                                                                                goto try_except_handler_12;
                                                                                            }
                                                                                            frame_285d3548e213aa4c5d6aef1855a305f1->m_frame.f_lineno = 484;
                                                                                            {
                                                                                                PyObject *call_args[] = { tmp_args_element_name_14 };
                                                                                                tmp_iter_arg_4 = CALL_FUNCTION_WITH_ARGS1( tmp_called_name_12, call_args );
                                                                                            }

                                                                                            Py_DECREF( tmp_args_element_name_14 );
                                                                                            if ( tmp_iter_arg_4 == NULL )
                                                                                            {
                                                                                                assert( ERROR_OCCURRED() );

                                                                                                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                                                                                                exception_lineno = 484;
                                                                                                type_description_1 = "oooooooooooooooooooooooooooooooooooooooboooo";
                                                                                                goto try_except_handler_12;
                                                                                            }
                                                                                            tmp_assign_source_88 = MAKE_ITERATOR( tmp_iter_arg_4 );
                                                                                            Py_DECREF( tmp_iter_arg_4 );
                                                                                            if ( tmp_assign_source_88 == NULL )
                                                                                            {
                                                                                                assert( ERROR_OCCURRED() );

                                                                                                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                                                                                                exception_lineno = 484;
                                                                                                type_description_1 = "oooooooooooooooooooooooooooooooooooooooboooo";
                                                                                                goto try_except_handler_12;
                                                                                            }
                                                                                            {
                                                                                                PyObject *old = tmp_for_loop_3__for_iterator;
                                                                                                tmp_for_loop_3__for_iterator = tmp_assign_source_88;
                                                                                                Py_XDECREF( old );
                                                                                            }

                                                                                        }
                                                                                        // Tried code:
                                                                                        loop_start_3:;
                                                                                        {
                                                                                            PyObject *tmp_next_source_3;
                                                                                            PyObject *tmp_assign_source_89;
                                                                                            CHECK_OBJECT( tmp_for_loop_3__for_iterator );
                                                                                            tmp_next_source_3 = tmp_for_loop_3__for_iterator;
                                                                                            tmp_assign_source_89 = ITERATOR_NEXT( tmp_next_source_3 );
                                                                                            if ( tmp_assign_source_89 == NULL )
                                                                                            {
                                                                                                if ( CHECK_AND_CLEAR_STOP_ITERATION_OCCURRED() )
                                                                                                {

                                                                                                    goto loop_end_3;
                                                                                                }
                                                                                                else
                                                                                                {

                                                                                                    FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
                                                                                                    type_description_1 = "oooooooooooooooooooooooooooooooooooooooboooo";
                                                                                                    exception_lineno = 484;
                                                                                                    goto try_except_handler_13;
                                                                                                }
                                                                                            }

                                                                                            {
                                                                                                PyObject *old = tmp_for_loop_3__iter_value;
                                                                                                tmp_for_loop_3__iter_value = tmp_assign_source_89;
                                                                                                Py_XDECREF( old );
                                                                                            }

                                                                                        }
                                                                                        // Tried code:
                                                                                        {
                                                                                            PyObject *tmp_assign_source_90;
                                                                                            PyObject *tmp_iter_arg_5;
                                                                                            CHECK_OBJECT( tmp_for_loop_3__iter_value );
                                                                                            tmp_iter_arg_5 = tmp_for_loop_3__iter_value;
                                                                                            tmp_assign_source_90 = MAKE_UNPACK_ITERATOR( tmp_iter_arg_5 );
                                                                                            if ( tmp_assign_source_90 == NULL )
                                                                                            {
                                                                                                assert( ERROR_OCCURRED() );

                                                                                                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                                                                                                exception_lineno = 484;
                                                                                                type_description_1 = "oooooooooooooooooooooooooooooooooooooooboooo";
                                                                                                goto try_except_handler_14;
                                                                                            }
                                                                                            {
                                                                                                PyObject *old = tmp_tuple_unpack_2__source_iter;
                                                                                                tmp_tuple_unpack_2__source_iter = tmp_assign_source_90;
                                                                                                Py_XDECREF( old );
                                                                                            }

                                                                                        }
                                                                                        // Tried code:
                                                                                        {
                                                                                            PyObject *tmp_assign_source_91;
                                                                                            PyObject *tmp_unpack_3;
                                                                                            CHECK_OBJECT( tmp_tuple_unpack_2__source_iter );
                                                                                            tmp_unpack_3 = tmp_tuple_unpack_2__source_iter;
                                                                                            tmp_assign_source_91 = UNPACK_NEXT( tmp_unpack_3, 0, 2 );
                                                                                            if ( tmp_assign_source_91 == NULL )
                                                                                            {
                                                                                                if ( !ERROR_OCCURRED() )
                                                                                                {
                                                                                                    exception_type = PyExc_StopIteration;
                                                                                                    Py_INCREF( exception_type );
                                                                                                    exception_value = NULL;
                                                                                                    exception_tb = NULL;
                                                                                                }
                                                                                                else
                                                                                                {
                                                                                                    FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
                                                                                                }


                                                                                                type_description_1 = "oooooooooooooooooooooooooooooooooooooooboooo";
                                                                                                exception_lineno = 484;
                                                                                                goto try_except_handler_15;
                                                                                            }
                                                                                            {
                                                                                                PyObject *old = tmp_tuple_unpack_2__element_1;
                                                                                                tmp_tuple_unpack_2__element_1 = tmp_assign_source_91;
                                                                                                Py_XDECREF( old );
                                                                                            }

                                                                                        }
                                                                                        {
                                                                                            PyObject *tmp_assign_source_92;
                                                                                            PyObject *tmp_unpack_4;
                                                                                            CHECK_OBJECT( tmp_tuple_unpack_2__source_iter );
                                                                                            tmp_unpack_4 = tmp_tuple_unpack_2__source_iter;
                                                                                            tmp_assign_source_92 = UNPACK_NEXT( tmp_unpack_4, 1, 2 );
                                                                                            if ( tmp_assign_source_92 == NULL )
                                                                                            {
                                                                                                if ( !ERROR_OCCURRED() )
                                                                                                {
                                                                                                    exception_type = PyExc_StopIteration;
                                                                                                    Py_INCREF( exception_type );
                                                                                                    exception_value = NULL;
                                                                                                    exception_tb = NULL;
                                                                                                }
                                                                                                else
                                                                                                {
                                                                                                    FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
                                                                                                }


                                                                                                type_description_1 = "oooooooooooooooooooooooooooooooooooooooboooo";
                                                                                                exception_lineno = 484;
                                                                                                goto try_except_handler_15;
                                                                                            }
                                                                                            {
                                                                                                PyObject *old = tmp_tuple_unpack_2__element_2;
                                                                                                tmp_tuple_unpack_2__element_2 = tmp_assign_source_92;
                                                                                                Py_XDECREF( old );
                                                                                            }

                                                                                        }
                                                                                        {
                                                                                            PyObject *tmp_iterator_name_2;
                                                                                            CHECK_OBJECT( tmp_tuple_unpack_2__source_iter );
                                                                                            tmp_iterator_name_2 = tmp_tuple_unpack_2__source_iter;
                                                                                            // Check if iterator has left-over elements.
                                                                                            CHECK_OBJECT( tmp_iterator_name_2 ); assert( HAS_ITERNEXT( tmp_iterator_name_2 ) );

                                                                                            tmp_iterator_attempt = (*Py_TYPE( tmp_iterator_name_2 )->tp_iternext)( tmp_iterator_name_2 );

                                                                                            if (likely( tmp_iterator_attempt == NULL ))
                                                                                            {
                                                                                                PyObject *error = GET_ERROR_OCCURRED();

                                                                                                if ( error != NULL )
                                                                                                {
                                                                                                    if ( EXCEPTION_MATCH_BOOL_SINGLE( error, PyExc_StopIteration ))
                                                                                                    {
                                                                                                        CLEAR_ERROR_OCCURRED();
                                                                                                    }
                                                                                                    else
                                                                                                    {
                                                                                                        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );

                                                                                                        type_description_1 = "oooooooooooooooooooooooooooooooooooooooboooo";
                                                                                                        exception_lineno = 484;
                                                                                                        goto try_except_handler_15;
                                                                                                    }
                                                                                                }
                                                                                            }
                                                                                            else
                                                                                            {
                                                                                                Py_DECREF( tmp_iterator_attempt );

                                                                                                // TODO: Could avoid PyErr_Format.
#if PYTHON_VERSION < 300
                                                                                                PyErr_Format( PyExc_ValueError, "too many values to unpack" );
#else
                                                                                                PyErr_Format( PyExc_ValueError, "too many values to unpack (expected 2)" );
#endif
                                                                                                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );

                                                                                                type_description_1 = "oooooooooooooooooooooooooooooooooooooooboooo";
                                                                                                exception_lineno = 484;
                                                                                                goto try_except_handler_15;
                                                                                            }
                                                                                        }
                                                                                        goto try_end_9;
                                                                                        // Exception handler code:
                                                                                        try_except_handler_15:;
                                                                                        exception_keeper_type_11 = exception_type;
                                                                                        exception_keeper_value_11 = exception_value;
                                                                                        exception_keeper_tb_11 = exception_tb;
                                                                                        exception_keeper_lineno_11 = exception_lineno;
                                                                                        exception_type = NULL;
                                                                                        exception_value = NULL;
                                                                                        exception_tb = NULL;
                                                                                        exception_lineno = 0;

                                                                                        CHECK_OBJECT( (PyObject *)tmp_tuple_unpack_2__source_iter );
                                                                                        Py_DECREF( tmp_tuple_unpack_2__source_iter );
                                                                                        tmp_tuple_unpack_2__source_iter = NULL;

                                                                                        // Re-raise.
                                                                                        exception_type = exception_keeper_type_11;
                                                                                        exception_value = exception_keeper_value_11;
                                                                                        exception_tb = exception_keeper_tb_11;
                                                                                        exception_lineno = exception_keeper_lineno_11;

                                                                                        goto try_except_handler_14;
                                                                                        // End of try:
                                                                                        try_end_9:;
                                                                                        goto try_end_10;
                                                                                        // Exception handler code:
                                                                                        try_except_handler_14:;
                                                                                        exception_keeper_type_12 = exception_type;
                                                                                        exception_keeper_value_12 = exception_value;
                                                                                        exception_keeper_tb_12 = exception_tb;
                                                                                        exception_keeper_lineno_12 = exception_lineno;
                                                                                        exception_type = NULL;
                                                                                        exception_value = NULL;
                                                                                        exception_tb = NULL;
                                                                                        exception_lineno = 0;

                                                                                        Py_XDECREF( tmp_tuple_unpack_2__element_1 );
                                                                                        tmp_tuple_unpack_2__element_1 = NULL;

                                                                                        Py_XDECREF( tmp_tuple_unpack_2__element_2 );
                                                                                        tmp_tuple_unpack_2__element_2 = NULL;

                                                                                        // Re-raise.
                                                                                        exception_type = exception_keeper_type_12;
                                                                                        exception_value = exception_keeper_value_12;
                                                                                        exception_tb = exception_keeper_tb_12;
                                                                                        exception_lineno = exception_keeper_lineno_12;

                                                                                        goto try_except_handler_13;
                                                                                        // End of try:
                                                                                        try_end_10:;
                                                                                        CHECK_OBJECT( (PyObject *)tmp_tuple_unpack_2__source_iter );
                                                                                        Py_DECREF( tmp_tuple_unpack_2__source_iter );
                                                                                        tmp_tuple_unpack_2__source_iter = NULL;

                                                                                        {
                                                                                            PyObject *tmp_assign_source_93;
                                                                                            CHECK_OBJECT( tmp_tuple_unpack_2__element_1 );
                                                                                            tmp_assign_source_93 = tmp_tuple_unpack_2__element_1;
                                                                                            {
                                                                                                PyObject *old = var_value;
                                                                                                var_value = tmp_assign_source_93;
                                                                                                Py_INCREF( var_value );
                                                                                                Py_XDECREF( old );
                                                                                            }

                                                                                        }
                                                                                        Py_XDECREF( tmp_tuple_unpack_2__element_1 );
                                                                                        tmp_tuple_unpack_2__element_1 = NULL;

                                                                                        {
                                                                                            PyObject *tmp_assign_source_94;
                                                                                            CHECK_OBJECT( tmp_tuple_unpack_2__element_2 );
                                                                                            tmp_assign_source_94 = tmp_tuple_unpack_2__element_2;
                                                                                            {
                                                                                                PyObject *old = var_tz_values;
                                                                                                var_tz_values = tmp_assign_source_94;
                                                                                                Py_INCREF( var_tz_values );
                                                                                                Py_XDECREF( old );
                                                                                            }

                                                                                        }
                                                                                        Py_XDECREF( tmp_tuple_unpack_2__element_2 );
                                                                                        tmp_tuple_unpack_2__element_2 = NULL;

                                                                                        {
                                                                                            nuitka_bool tmp_condition_result_47;
                                                                                            PyObject *tmp_compexpr_left_44;
                                                                                            PyObject *tmp_compexpr_right_44;
                                                                                            CHECK_OBJECT( var_found_zone );
                                                                                            tmp_compexpr_left_44 = var_found_zone;
                                                                                            CHECK_OBJECT( var_tz_values );
                                                                                            tmp_compexpr_right_44 = var_tz_values;
                                                                                            tmp_res = PySequence_Contains( tmp_compexpr_right_44, tmp_compexpr_left_44 );
                                                                                            if ( tmp_res == -1 )
                                                                                            {
                                                                                                assert( ERROR_OCCURRED() );

                                                                                                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                                                                                                exception_lineno = 485;
                                                                                                type_description_1 = "oooooooooooooooooooooooooooooooooooooooboooo";
                                                                                                goto try_except_handler_13;
                                                                                            }
                                                                                            tmp_condition_result_47 = ( tmp_res == 1 ) ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
                                                                                            if ( tmp_condition_result_47 == NUITKA_BOOL_TRUE )
                                                                                            {
                                                                                                goto branch_yes_47;
                                                                                            }
                                                                                            else
                                                                                            {
                                                                                                goto branch_no_47;
                                                                                            }
                                                                                            branch_yes_47:;
                                                                                            {
                                                                                                nuitka_bool tmp_condition_result_48;
                                                                                                int tmp_and_left_truth_1;
                                                                                                nuitka_bool tmp_and_left_value_1;
                                                                                                nuitka_bool tmp_and_right_value_1;
                                                                                                PyObject *tmp_compexpr_left_45;
                                                                                                PyObject *tmp_compexpr_right_45;
                                                                                                PyObject *tmp_subscribed_name_37;
                                                                                                PyObject *tmp_source_name_22;
                                                                                                PyObject *tmp_mvar_value_15;
                                                                                                PyObject *tmp_subscript_name_37;
                                                                                                PyObject *tmp_subscribed_name_38;
                                                                                                PyObject *tmp_source_name_23;
                                                                                                PyObject *tmp_mvar_value_16;
                                                                                                PyObject *tmp_subscript_name_38;
                                                                                                int tmp_and_left_truth_2;
                                                                                                nuitka_bool tmp_and_left_value_2;
                                                                                                nuitka_bool tmp_and_right_value_2;
                                                                                                PyObject *tmp_source_name_24;
                                                                                                PyObject *tmp_mvar_value_17;
                                                                                                PyObject *tmp_attribute_value_1;
                                                                                                int tmp_truth_name_2;
                                                                                                PyObject *tmp_compexpr_left_46;
                                                                                                PyObject *tmp_compexpr_right_46;
                                                                                                tmp_mvar_value_15 = GET_STRING_DICT_VALUE( moduledict__strptime, (Nuitka_StringObject *)const_str_plain_time );

                                                                                                if (unlikely( tmp_mvar_value_15 == NULL ))
                                                                                                {
                                                                                                    tmp_mvar_value_15 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_time );
                                                                                                }

                                                                                                if ( tmp_mvar_value_15 == NULL )
                                                                                                {

                                                                                                    exception_type = PyExc_NameError;
                                                                                                    Py_INCREF( exception_type );
                                                                                                    exception_value = PyUnicode_FromFormat( "name '%s' is not defined", "time" );
                                                                                                    exception_tb = NULL;
                                                                                                    NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
                                                                                                    CHAIN_EXCEPTION( exception_value );

                                                                                                    exception_lineno = 489;
                                                                                                    type_description_1 = "oooooooooooooooooooooooooooooooooooooooboooo";
                                                                                                    goto try_except_handler_13;
                                                                                                }

                                                                                                tmp_source_name_22 = tmp_mvar_value_15;
                                                                                                tmp_subscribed_name_37 = LOOKUP_ATTRIBUTE( tmp_source_name_22, const_str_plain_tzname );
                                                                                                if ( tmp_subscribed_name_37 == NULL )
                                                                                                {
                                                                                                    assert( ERROR_OCCURRED() );

                                                                                                    FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                                                                                                    exception_lineno = 489;
                                                                                                    type_description_1 = "oooooooooooooooooooooooooooooooooooooooboooo";
                                                                                                    goto try_except_handler_13;
                                                                                                }
                                                                                                tmp_subscript_name_37 = const_int_0;
                                                                                                tmp_compexpr_left_45 = LOOKUP_SUBSCRIPT_CONST( tmp_subscribed_name_37, tmp_subscript_name_37, 0 );
                                                                                                Py_DECREF( tmp_subscribed_name_37 );
                                                                                                if ( tmp_compexpr_left_45 == NULL )
                                                                                                {
                                                                                                    assert( ERROR_OCCURRED() );

                                                                                                    FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                                                                                                    exception_lineno = 489;
                                                                                                    type_description_1 = "oooooooooooooooooooooooooooooooooooooooboooo";
                                                                                                    goto try_except_handler_13;
                                                                                                }
                                                                                                tmp_mvar_value_16 = GET_STRING_DICT_VALUE( moduledict__strptime, (Nuitka_StringObject *)const_str_plain_time );

                                                                                                if (unlikely( tmp_mvar_value_16 == NULL ))
                                                                                                {
                                                                                                    tmp_mvar_value_16 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_time );
                                                                                                }

                                                                                                if ( tmp_mvar_value_16 == NULL )
                                                                                                {
                                                                                                    Py_DECREF( tmp_compexpr_left_45 );
                                                                                                    exception_type = PyExc_NameError;
                                                                                                    Py_INCREF( exception_type );
                                                                                                    exception_value = PyUnicode_FromFormat( "name '%s' is not defined", "time" );
                                                                                                    exception_tb = NULL;
                                                                                                    NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
                                                                                                    CHAIN_EXCEPTION( exception_value );

                                                                                                    exception_lineno = 489;
                                                                                                    type_description_1 = "oooooooooooooooooooooooooooooooooooooooboooo";
                                                                                                    goto try_except_handler_13;
                                                                                                }

                                                                                                tmp_source_name_23 = tmp_mvar_value_16;
                                                                                                tmp_subscribed_name_38 = LOOKUP_ATTRIBUTE( tmp_source_name_23, const_str_plain_tzname );
                                                                                                if ( tmp_subscribed_name_38 == NULL )
                                                                                                {
                                                                                                    assert( ERROR_OCCURRED() );

                                                                                                    FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
                                                                                                    Py_DECREF( tmp_compexpr_left_45 );

                                                                                                    exception_lineno = 489;
                                                                                                    type_description_1 = "oooooooooooooooooooooooooooooooooooooooboooo";
                                                                                                    goto try_except_handler_13;
                                                                                                }
                                                                                                tmp_subscript_name_38 = const_int_pos_1;
                                                                                                tmp_compexpr_right_45 = LOOKUP_SUBSCRIPT_CONST( tmp_subscribed_name_38, tmp_subscript_name_38, 1 );
                                                                                                Py_DECREF( tmp_subscribed_name_38 );
                                                                                                if ( tmp_compexpr_right_45 == NULL )
                                                                                                {
                                                                                                    assert( ERROR_OCCURRED() );

                                                                                                    FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
                                                                                                    Py_DECREF( tmp_compexpr_left_45 );

                                                                                                    exception_lineno = 489;
                                                                                                    type_description_1 = "oooooooooooooooooooooooooooooooooooooooboooo";
                                                                                                    goto try_except_handler_13;
                                                                                                }
                                                                                                tmp_res = RICH_COMPARE_BOOL_EQ_OBJECT_OBJECT( tmp_compexpr_left_45, tmp_compexpr_right_45 );
                                                                                                Py_DECREF( tmp_compexpr_left_45 );
                                                                                                Py_DECREF( tmp_compexpr_right_45 );
                                                                                                if ( tmp_res == -1 )
                                                                                                {
                                                                                                    assert( ERROR_OCCURRED() );

                                                                                                    FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                                                                                                    exception_lineno = 489;
                                                                                                    type_description_1 = "oooooooooooooooooooooooooooooooooooooooboooo";
                                                                                                    goto try_except_handler_13;
                                                                                                }
                                                                                                tmp_and_left_value_1 = ( tmp_res != 0 ) ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
                                                                                                tmp_and_left_truth_1 = tmp_and_left_value_1 == NUITKA_BOOL_TRUE ? 1 : 0;
                                                                                                if ( tmp_and_left_truth_1 == 1 )
                                                                                                {
                                                                                                    goto and_right_1;
                                                                                                }
                                                                                                else
                                                                                                {
                                                                                                    goto and_left_1;
                                                                                                }
                                                                                                and_right_1:;
                                                                                                tmp_mvar_value_17 = GET_STRING_DICT_VALUE( moduledict__strptime, (Nuitka_StringObject *)const_str_plain_time );

                                                                                                if (unlikely( tmp_mvar_value_17 == NULL ))
                                                                                                {
                                                                                                    tmp_mvar_value_17 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_time );
                                                                                                }

                                                                                                if ( tmp_mvar_value_17 == NULL )
                                                                                                {

                                                                                                    exception_type = PyExc_NameError;
                                                                                                    Py_INCREF( exception_type );
                                                                                                    exception_value = PyUnicode_FromFormat( "name '%s' is not defined", "time" );
                                                                                                    exception_tb = NULL;
                                                                                                    NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
                                                                                                    CHAIN_EXCEPTION( exception_value );

                                                                                                    exception_lineno = 490;
                                                                                                    type_description_1 = "oooooooooooooooooooooooooooooooooooooooboooo";
                                                                                                    goto try_except_handler_13;
                                                                                                }

                                                                                                tmp_source_name_24 = tmp_mvar_value_17;
                                                                                                tmp_attribute_value_1 = LOOKUP_ATTRIBUTE( tmp_source_name_24, const_str_plain_daylight );
                                                                                                if ( tmp_attribute_value_1 == NULL )
                                                                                                {
                                                                                                    assert( ERROR_OCCURRED() );

                                                                                                    FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                                                                                                    exception_lineno = 490;
                                                                                                    type_description_1 = "oooooooooooooooooooooooooooooooooooooooboooo";
                                                                                                    goto try_except_handler_13;
                                                                                                }
                                                                                                tmp_truth_name_2 = CHECK_IF_TRUE( tmp_attribute_value_1 );
                                                                                                if ( tmp_truth_name_2 == -1 )
                                                                                                {
                                                                                                    assert( ERROR_OCCURRED() );

                                                                                                    FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
                                                                                                    Py_DECREF( tmp_attribute_value_1 );

                                                                                                    exception_lineno = 490;
                                                                                                    type_description_1 = "oooooooooooooooooooooooooooooooooooooooboooo";
                                                                                                    goto try_except_handler_13;
                                                                                                }
                                                                                                tmp_and_left_value_2 = tmp_truth_name_2 == 1 ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
                                                                                                Py_DECREF( tmp_attribute_value_1 );
                                                                                                tmp_and_left_truth_2 = tmp_and_left_value_2 == NUITKA_BOOL_TRUE ? 1 : 0;
                                                                                                if ( tmp_and_left_truth_2 == 1 )
                                                                                                {
                                                                                                    goto and_right_2;
                                                                                                }
                                                                                                else
                                                                                                {
                                                                                                    goto and_left_2;
                                                                                                }
                                                                                                and_right_2:;
                                                                                                CHECK_OBJECT( var_found_zone );
                                                                                                tmp_compexpr_left_46 = var_found_zone;
                                                                                                tmp_compexpr_right_46 = const_tuple_str_plain_utc_str_plain_gmt_tuple;
                                                                                                tmp_res = PySequence_Contains( tmp_compexpr_right_46, tmp_compexpr_left_46 );
                                                                                                if ( tmp_res == -1 )
                                                                                                {
                                                                                                    assert( ERROR_OCCURRED() );

                                                                                                    FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                                                                                                    exception_lineno = 490;
                                                                                                    type_description_1 = "oooooooooooooooooooooooooooooooooooooooboooo";
                                                                                                    goto try_except_handler_13;
                                                                                                }
                                                                                                tmp_and_right_value_2 = ( tmp_res == 0 ) ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
                                                                                                tmp_and_right_value_1 = tmp_and_right_value_2;
                                                                                                goto and_end_2;
                                                                                                and_left_2:;
                                                                                                tmp_and_right_value_1 = tmp_and_left_value_2;
                                                                                                and_end_2:;
                                                                                                tmp_condition_result_48 = tmp_and_right_value_1;
                                                                                                goto and_end_1;
                                                                                                and_left_1:;
                                                                                                tmp_condition_result_48 = tmp_and_left_value_1;
                                                                                                and_end_1:;
                                                                                                if ( tmp_condition_result_48 == NUITKA_BOOL_TRUE )
                                                                                                {
                                                                                                    goto branch_yes_48;
                                                                                                }
                                                                                                else
                                                                                                {
                                                                                                    goto branch_no_48;
                                                                                                }
                                                                                                branch_yes_48:;
                                                                                                goto loop_end_3;
                                                                                                goto branch_end_48;
                                                                                                branch_no_48:;
                                                                                                {
                                                                                                    PyObject *tmp_assign_source_95;
                                                                                                    CHECK_OBJECT( var_value );
                                                                                                    tmp_assign_source_95 = var_value;
                                                                                                    {
                                                                                                        PyObject *old = var_tz;
                                                                                                        var_tz = tmp_assign_source_95;
                                                                                                        Py_INCREF( var_tz );
                                                                                                        Py_XDECREF( old );
                                                                                                    }

                                                                                                }
                                                                                                goto loop_end_3;
                                                                                                branch_end_48:;
                                                                                            }
                                                                                            branch_no_47:;
                                                                                        }
                                                                                        if ( CONSIDER_THREADING() == false )
                                                                                        {
                                                                                            assert( ERROR_OCCURRED() );

                                                                                            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                                                                                            exception_lineno = 484;
                                                                                            type_description_1 = "oooooooooooooooooooooooooooooooooooooooboooo";
                                                                                            goto try_except_handler_13;
                                                                                        }
                                                                                        goto loop_start_3;
                                                                                        loop_end_3:;
                                                                                        goto try_end_11;
                                                                                        // Exception handler code:
                                                                                        try_except_handler_13:;
                                                                                        exception_keeper_type_13 = exception_type;
                                                                                        exception_keeper_value_13 = exception_value;
                                                                                        exception_keeper_tb_13 = exception_tb;
                                                                                        exception_keeper_lineno_13 = exception_lineno;
                                                                                        exception_type = NULL;
                                                                                        exception_value = NULL;
                                                                                        exception_tb = NULL;
                                                                                        exception_lineno = 0;

                                                                                        Py_XDECREF( tmp_for_loop_3__iter_value );
                                                                                        tmp_for_loop_3__iter_value = NULL;

                                                                                        CHECK_OBJECT( (PyObject *)tmp_for_loop_3__for_iterator );
                                                                                        Py_DECREF( tmp_for_loop_3__for_iterator );
                                                                                        tmp_for_loop_3__for_iterator = NULL;

                                                                                        // Re-raise.
                                                                                        exception_type = exception_keeper_type_13;
                                                                                        exception_value = exception_keeper_value_13;
                                                                                        exception_tb = exception_keeper_tb_13;
                                                                                        exception_lineno = exception_keeper_lineno_13;

                                                                                        goto try_except_handler_12;
                                                                                        // End of try:
                                                                                        try_end_11:;
                                                                                        Py_XDECREF( tmp_for_loop_3__iter_value );
                                                                                        tmp_for_loop_3__iter_value = NULL;

                                                                                        CHECK_OBJECT( (PyObject *)tmp_for_loop_3__for_iterator );
                                                                                        Py_DECREF( tmp_for_loop_3__for_iterator );
                                                                                        tmp_for_loop_3__for_iterator = NULL;

                                                                                        branch_no_46:;
                                                                                    }
                                                                                    branch_end_40:;
                                                                                }
                                                                                branch_end_39:;
                                                                            }
                                                                            branch_end_37:;
                                                                        }
                                                                        branch_end_36:;
                                                                    }
                                                                    branch_end_35:;
                                                                }
                                                                branch_end_33:;
                                                            }
                                                            branch_end_32:;
                                                        }
                                                        branch_end_31:;
                                                    }
                                                    branch_end_30:;
                                                }
                                                branch_end_29:;
                                            }
                                            branch_end_28:;
                                        }
                                        branch_end_23:;
                                    }
                                    branch_end_22:;
                                }
                                branch_end_21:;
                            }
                            branch_end_20:;
                        }
                        branch_end_19:;
                    }
                    branch_end_18:;
                }
                branch_end_17:;
            }
            branch_end_16:;
        }
        branch_end_14:;
    }
    if ( CONSIDER_THREADING() == false )
    {
        assert( ERROR_OCCURRED() );

        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


        exception_lineno = 378;
        type_description_1 = "oooooooooooooooooooooooooooooooooooooooboooo";
        goto try_except_handler_12;
    }
    goto loop_start_2;
    loop_end_2:;
    goto try_end_12;
    // Exception handler code:
    try_except_handler_12:;
    exception_keeper_type_14 = exception_type;
    exception_keeper_value_14 = exception_value;
    exception_keeper_tb_14 = exception_tb;
    exception_keeper_lineno_14 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    Py_XDECREF( tmp_for_loop_2__iter_value );
    tmp_for_loop_2__iter_value = NULL;

    CHECK_OBJECT( (PyObject *)tmp_for_loop_2__for_iterator );
    Py_DECREF( tmp_for_loop_2__for_iterator );
    tmp_for_loop_2__for_iterator = NULL;

    // Re-raise.
    exception_type = exception_keeper_type_14;
    exception_value = exception_keeper_value_14;
    exception_tb = exception_keeper_tb_14;
    exception_lineno = exception_keeper_lineno_14;

    goto frame_exception_exit_1;
    // End of try:
    try_end_12:;
    Py_XDECREF( tmp_for_loop_2__iter_value );
    tmp_for_loop_2__iter_value = NULL;

    CHECK_OBJECT( (PyObject *)tmp_for_loop_2__for_iterator );
    Py_DECREF( tmp_for_loop_2__for_iterator );
    tmp_for_loop_2__for_iterator = NULL;

    {
        nuitka_bool tmp_condition_result_49;
        int tmp_and_left_truth_3;
        nuitka_bool tmp_and_left_value_3;
        nuitka_bool tmp_and_right_value_3;
        PyObject *tmp_compexpr_left_47;
        PyObject *tmp_compexpr_right_47;
        PyObject *tmp_compexpr_left_48;
        PyObject *tmp_compexpr_right_48;
        if ( var_year == NULL )
        {

            exception_type = PyExc_UnboundLocalError;
            Py_INCREF( exception_type );
            exception_value = PyUnicode_FromFormat( "local variable '%s' referenced before assignment", "year" );
            exception_tb = NULL;
            NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
            CHAIN_EXCEPTION( exception_value );

            exception_lineno = 497;
            type_description_1 = "oooooooooooooooooooooooooooooooooooooooboooo";
            goto frame_exception_exit_1;
        }

        tmp_compexpr_left_47 = var_year;
        tmp_compexpr_right_47 = Py_None;
        tmp_and_left_value_3 = ( tmp_compexpr_left_47 == tmp_compexpr_right_47 ) ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
        tmp_and_left_truth_3 = tmp_and_left_value_3 == NUITKA_BOOL_TRUE ? 1 : 0;
        if ( tmp_and_left_truth_3 == 1 )
        {
            goto and_right_3;
        }
        else
        {
            goto and_left_3;
        }
        and_right_3:;
        if ( var_iso_year == NULL )
        {

            exception_type = PyExc_UnboundLocalError;
            Py_INCREF( exception_type );
            exception_value = PyUnicode_FromFormat( "local variable '%s' referenced before assignment", "iso_year" );
            exception_tb = NULL;
            NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
            CHAIN_EXCEPTION( exception_value );

            exception_lineno = 497;
            type_description_1 = "oooooooooooooooooooooooooooooooooooooooboooo";
            goto frame_exception_exit_1;
        }

        tmp_compexpr_left_48 = var_iso_year;
        tmp_compexpr_right_48 = Py_None;
        tmp_and_right_value_3 = ( tmp_compexpr_left_48 != tmp_compexpr_right_48 ) ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
        tmp_condition_result_49 = tmp_and_right_value_3;
        goto and_end_3;
        and_left_3:;
        tmp_condition_result_49 = tmp_and_left_value_3;
        and_end_3:;
        if ( tmp_condition_result_49 == NUITKA_BOOL_TRUE )
        {
            goto branch_yes_49;
        }
        else
        {
            goto branch_no_49;
        }
        branch_yes_49:;
        {
            nuitka_bool tmp_condition_result_50;
            int tmp_or_left_truth_4;
            nuitka_bool tmp_or_left_value_4;
            nuitka_bool tmp_or_right_value_4;
            PyObject *tmp_compexpr_left_49;
            PyObject *tmp_compexpr_right_49;
            PyObject *tmp_compexpr_left_50;
            PyObject *tmp_compexpr_right_50;
            if ( var_iso_week == NULL )
            {

                exception_type = PyExc_UnboundLocalError;
                Py_INCREF( exception_type );
                exception_value = PyUnicode_FromFormat( "local variable '%s' referenced before assignment", "iso_week" );
                exception_tb = NULL;
                NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
                CHAIN_EXCEPTION( exception_value );

                exception_lineno = 498;
                type_description_1 = "oooooooooooooooooooooooooooooooooooooooboooo";
                goto frame_exception_exit_1;
            }

            tmp_compexpr_left_49 = var_iso_week;
            tmp_compexpr_right_49 = Py_None;
            tmp_or_left_value_4 = ( tmp_compexpr_left_49 == tmp_compexpr_right_49 ) ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
            tmp_or_left_truth_4 = tmp_or_left_value_4 == NUITKA_BOOL_TRUE ? 1 : 0;
            if ( tmp_or_left_truth_4 == 1 )
            {
                goto or_left_4;
            }
            else
            {
                goto or_right_4;
            }
            or_right_4:;
            if ( var_weekday == NULL )
            {

                exception_type = PyExc_UnboundLocalError;
                Py_INCREF( exception_type );
                exception_value = PyUnicode_FromFormat( "local variable '%s' referenced before assignment", "weekday" );
                exception_tb = NULL;
                NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
                CHAIN_EXCEPTION( exception_value );

                exception_lineno = 498;
                type_description_1 = "oooooooooooooooooooooooooooooooooooooooboooo";
                goto frame_exception_exit_1;
            }

            tmp_compexpr_left_50 = var_weekday;
            tmp_compexpr_right_50 = Py_None;
            tmp_or_right_value_4 = ( tmp_compexpr_left_50 == tmp_compexpr_right_50 ) ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
            tmp_condition_result_50 = tmp_or_right_value_4;
            goto or_end_4;
            or_left_4:;
            tmp_condition_result_50 = tmp_or_left_value_4;
            or_end_4:;
            if ( tmp_condition_result_50 == NUITKA_BOOL_TRUE )
            {
                goto branch_yes_50;
            }
            else
            {
                goto branch_no_50;
            }
            branch_yes_50:;
            {
                PyObject *tmp_raise_type_7;
                PyObject *tmp_make_exception_arg_7;
                tmp_make_exception_arg_7 = const_str_digest_8ea9ba6a2811d574ae22e79121873812;
                frame_285d3548e213aa4c5d6aef1855a305f1->m_frame.f_lineno = 499;
                {
                    PyObject *call_args[] = { tmp_make_exception_arg_7 };
                    tmp_raise_type_7 = CALL_FUNCTION_WITH_ARGS1( PyExc_ValueError, call_args );
                }

                assert( !(tmp_raise_type_7 == NULL) );
                exception_type = tmp_raise_type_7;
                exception_lineno = 499;
                RAISE_EXCEPTION_WITH_TYPE( &exception_type, &exception_value, &exception_tb );
                type_description_1 = "oooooooooooooooooooooooooooooooooooooooboooo";
                goto frame_exception_exit_1;
            }
            branch_no_50:;
        }
        {
            nuitka_bool tmp_condition_result_51;
            PyObject *tmp_compexpr_left_51;
            PyObject *tmp_compexpr_right_51;
            if ( var_julian == NULL )
            {

                exception_type = PyExc_UnboundLocalError;
                Py_INCREF( exception_type );
                exception_value = PyUnicode_FromFormat( "local variable '%s' referenced before assignment", "julian" );
                exception_tb = NULL;
                NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
                CHAIN_EXCEPTION( exception_value );

                exception_lineno = 502;
                type_description_1 = "oooooooooooooooooooooooooooooooooooooooboooo";
                goto frame_exception_exit_1;
            }

            tmp_compexpr_left_51 = var_julian;
            tmp_compexpr_right_51 = Py_None;
            tmp_condition_result_51 = ( tmp_compexpr_left_51 != tmp_compexpr_right_51 ) ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
            if ( tmp_condition_result_51 == NUITKA_BOOL_TRUE )
            {
                goto branch_yes_51;
            }
            else
            {
                goto branch_no_51;
            }
            branch_yes_51:;
            {
                PyObject *tmp_raise_type_8;
                PyObject *tmp_make_exception_arg_8;
                tmp_make_exception_arg_8 = const_str_digest_734ed8a6681e2a78633dcd46b4fb23cc;
                frame_285d3548e213aa4c5d6aef1855a305f1->m_frame.f_lineno = 503;
                {
                    PyObject *call_args[] = { tmp_make_exception_arg_8 };
                    tmp_raise_type_8 = CALL_FUNCTION_WITH_ARGS1( PyExc_ValueError, call_args );
                }

                assert( !(tmp_raise_type_8 == NULL) );
                exception_type = tmp_raise_type_8;
                exception_lineno = 503;
                RAISE_EXCEPTION_WITH_TYPE( &exception_type, &exception_value, &exception_tb );
                type_description_1 = "oooooooooooooooooooooooooooooooooooooooboooo";
                goto frame_exception_exit_1;
            }
            branch_no_51:;
        }
        goto branch_end_49;
        branch_no_49:;
        {
            nuitka_bool tmp_condition_result_52;
            int tmp_and_left_truth_4;
            nuitka_bool tmp_and_left_value_4;
            nuitka_bool tmp_and_right_value_4;
            PyObject *tmp_compexpr_left_52;
            PyObject *tmp_compexpr_right_52;
            PyObject *tmp_compexpr_left_53;
            PyObject *tmp_compexpr_right_53;
            if ( var_week_of_year == NULL )
            {

                exception_type = PyExc_UnboundLocalError;
                Py_INCREF( exception_type );
                exception_value = PyUnicode_FromFormat( "local variable '%s' referenced before assignment", "week_of_year" );
                exception_tb = NULL;
                NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
                CHAIN_EXCEPTION( exception_value );

                exception_lineno = 506;
                type_description_1 = "oooooooooooooooooooooooooooooooooooooooboooo";
                goto frame_exception_exit_1;
            }

            tmp_compexpr_left_52 = var_week_of_year;
            tmp_compexpr_right_52 = Py_None;
            tmp_and_left_value_4 = ( tmp_compexpr_left_52 == tmp_compexpr_right_52 ) ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
            tmp_and_left_truth_4 = tmp_and_left_value_4 == NUITKA_BOOL_TRUE ? 1 : 0;
            if ( tmp_and_left_truth_4 == 1 )
            {
                goto and_right_4;
            }
            else
            {
                goto and_left_4;
            }
            and_right_4:;
            if ( var_iso_week == NULL )
            {

                exception_type = PyExc_UnboundLocalError;
                Py_INCREF( exception_type );
                exception_value = PyUnicode_FromFormat( "local variable '%s' referenced before assignment", "iso_week" );
                exception_tb = NULL;
                NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
                CHAIN_EXCEPTION( exception_value );

                exception_lineno = 506;
                type_description_1 = "oooooooooooooooooooooooooooooooooooooooboooo";
                goto frame_exception_exit_1;
            }

            tmp_compexpr_left_53 = var_iso_week;
            tmp_compexpr_right_53 = Py_None;
            tmp_and_right_value_4 = ( tmp_compexpr_left_53 != tmp_compexpr_right_53 ) ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
            tmp_condition_result_52 = tmp_and_right_value_4;
            goto and_end_4;
            and_left_4:;
            tmp_condition_result_52 = tmp_and_left_value_4;
            and_end_4:;
            if ( tmp_condition_result_52 == NUITKA_BOOL_TRUE )
            {
                goto branch_yes_52;
            }
            else
            {
                goto branch_no_52;
            }
            branch_yes_52:;
            {
                nuitka_bool tmp_condition_result_53;
                PyObject *tmp_compexpr_left_54;
                PyObject *tmp_compexpr_right_54;
                if ( var_weekday == NULL )
                {

                    exception_type = PyExc_UnboundLocalError;
                    Py_INCREF( exception_type );
                    exception_value = PyUnicode_FromFormat( "local variable '%s' referenced before assignment", "weekday" );
                    exception_tb = NULL;
                    NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
                    CHAIN_EXCEPTION( exception_value );

                    exception_lineno = 507;
                    type_description_1 = "oooooooooooooooooooooooooooooooooooooooboooo";
                    goto frame_exception_exit_1;
                }

                tmp_compexpr_left_54 = var_weekday;
                tmp_compexpr_right_54 = Py_None;
                tmp_condition_result_53 = ( tmp_compexpr_left_54 == tmp_compexpr_right_54 ) ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
                if ( tmp_condition_result_53 == NUITKA_BOOL_TRUE )
                {
                    goto branch_yes_53;
                }
                else
                {
                    goto branch_no_53;
                }
                branch_yes_53:;
                {
                    PyObject *tmp_raise_type_9;
                    PyObject *tmp_make_exception_arg_9;
                    tmp_make_exception_arg_9 = const_str_digest_29cfb83d36e7afcd72fd37a844d76701;
                    frame_285d3548e213aa4c5d6aef1855a305f1->m_frame.f_lineno = 508;
                    {
                        PyObject *call_args[] = { tmp_make_exception_arg_9 };
                        tmp_raise_type_9 = CALL_FUNCTION_WITH_ARGS1( PyExc_ValueError, call_args );
                    }

                    assert( !(tmp_raise_type_9 == NULL) );
                    exception_type = tmp_raise_type_9;
                    exception_lineno = 508;
                    RAISE_EXCEPTION_WITH_TYPE( &exception_type, &exception_value, &exception_tb );
                    type_description_1 = "oooooooooooooooooooooooooooooooooooooooboooo";
                    goto frame_exception_exit_1;
                }
                goto branch_end_53;
                branch_no_53:;
                {
                    PyObject *tmp_raise_type_10;
                    PyObject *tmp_make_exception_arg_10;
                    tmp_make_exception_arg_10 = const_str_digest_0dd41777202cf18fda33aa3b03231172;
                    frame_285d3548e213aa4c5d6aef1855a305f1->m_frame.f_lineno = 512;
                    {
                        PyObject *call_args[] = { tmp_make_exception_arg_10 };
                        tmp_raise_type_10 = CALL_FUNCTION_WITH_ARGS1( PyExc_ValueError, call_args );
                    }

                    assert( !(tmp_raise_type_10 == NULL) );
                    exception_type = tmp_raise_type_10;
                    exception_lineno = 512;
                    RAISE_EXCEPTION_WITH_TYPE( &exception_type, &exception_value, &exception_tb );
                    type_description_1 = "oooooooooooooooooooooooooooooooooooooooboooo";
                    goto frame_exception_exit_1;
                }
                branch_end_53:;
            }
            branch_no_52:;
        }
        branch_end_49:;
    }
    {
        nuitka_bool tmp_assign_source_96;
        tmp_assign_source_96 = NUITKA_BOOL_FALSE;
        var_leap_year_fix = tmp_assign_source_96;
    }
    {
        nuitka_bool tmp_condition_result_54;
        int tmp_and_left_truth_5;
        nuitka_bool tmp_and_left_value_5;
        nuitka_bool tmp_and_right_value_5;
        PyObject *tmp_compexpr_left_55;
        PyObject *tmp_compexpr_right_55;
        int tmp_and_left_truth_6;
        nuitka_bool tmp_and_left_value_6;
        nuitka_bool tmp_and_right_value_6;
        PyObject *tmp_compexpr_left_56;
        PyObject *tmp_compexpr_right_56;
        PyObject *tmp_compexpr_left_57;
        PyObject *tmp_compexpr_right_57;
        if ( var_year == NULL )
        {

            exception_type = PyExc_UnboundLocalError;
            Py_INCREF( exception_type );
            exception_value = PyUnicode_FromFormat( "local variable '%s' referenced before assignment", "year" );
            exception_tb = NULL;
            NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
            CHAIN_EXCEPTION( exception_value );

            exception_lineno = 517;
            type_description_1 = "oooooooooooooooooooooooooooooooooooooooboooo";
            goto frame_exception_exit_1;
        }

        tmp_compexpr_left_55 = var_year;
        tmp_compexpr_right_55 = Py_None;
        tmp_and_left_value_5 = ( tmp_compexpr_left_55 == tmp_compexpr_right_55 ) ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
        tmp_and_left_truth_5 = tmp_and_left_value_5 == NUITKA_BOOL_TRUE ? 1 : 0;
        if ( tmp_and_left_truth_5 == 1 )
        {
            goto and_right_5;
        }
        else
        {
            goto and_left_5;
        }
        and_right_5:;
        if ( var_month == NULL )
        {

            exception_type = PyExc_UnboundLocalError;
            Py_INCREF( exception_type );
            exception_value = PyUnicode_FromFormat( "local variable '%s' referenced before assignment", "month" );
            exception_tb = NULL;
            NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
            CHAIN_EXCEPTION( exception_value );

            exception_lineno = 517;
            type_description_1 = "oooooooooooooooooooooooooooooooooooooooboooo";
            goto frame_exception_exit_1;
        }

        tmp_compexpr_left_56 = var_month;
        tmp_compexpr_right_56 = const_int_pos_2;
        tmp_res = RICH_COMPARE_BOOL_EQ_OBJECT_OBJECT( tmp_compexpr_left_56, tmp_compexpr_right_56 );
        if ( tmp_res == -1 )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 517;
            type_description_1 = "oooooooooooooooooooooooooooooooooooooooboooo";
            goto frame_exception_exit_1;
        }
        tmp_and_left_value_6 = ( tmp_res != 0 ) ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
        tmp_and_left_truth_6 = tmp_and_left_value_6 == NUITKA_BOOL_TRUE ? 1 : 0;
        if ( tmp_and_left_truth_6 == 1 )
        {
            goto and_right_6;
        }
        else
        {
            goto and_left_6;
        }
        and_right_6:;
        if ( var_day == NULL )
        {

            exception_type = PyExc_UnboundLocalError;
            Py_INCREF( exception_type );
            exception_value = PyUnicode_FromFormat( "local variable '%s' referenced before assignment", "day" );
            exception_tb = NULL;
            NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
            CHAIN_EXCEPTION( exception_value );

            exception_lineno = 517;
            type_description_1 = "oooooooooooooooooooooooooooooooooooooooboooo";
            goto frame_exception_exit_1;
        }

        tmp_compexpr_left_57 = var_day;
        tmp_compexpr_right_57 = const_int_pos_29;
        tmp_res = RICH_COMPARE_BOOL_EQ_OBJECT_OBJECT( tmp_compexpr_left_57, tmp_compexpr_right_57 );
        if ( tmp_res == -1 )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 517;
            type_description_1 = "oooooooooooooooooooooooooooooooooooooooboooo";
            goto frame_exception_exit_1;
        }
        tmp_and_right_value_6 = ( tmp_res != 0 ) ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
        tmp_and_right_value_5 = tmp_and_right_value_6;
        goto and_end_6;
        and_left_6:;
        tmp_and_right_value_5 = tmp_and_left_value_6;
        and_end_6:;
        tmp_condition_result_54 = tmp_and_right_value_5;
        goto and_end_5;
        and_left_5:;
        tmp_condition_result_54 = tmp_and_left_value_5;
        and_end_5:;
        if ( tmp_condition_result_54 == NUITKA_BOOL_TRUE )
        {
            goto branch_yes_54;
        }
        else
        {
            goto branch_no_54;
        }
        branch_yes_54:;
        {
            PyObject *tmp_assign_source_97;
            tmp_assign_source_97 = const_int_pos_1904;
            {
                PyObject *old = var_year;
                var_year = tmp_assign_source_97;
                Py_INCREF( var_year );
                Py_XDECREF( old );
            }

        }
        {
            nuitka_bool tmp_assign_source_98;
            tmp_assign_source_98 = NUITKA_BOOL_TRUE;
            var_leap_year_fix = tmp_assign_source_98;
        }
        goto branch_end_54;
        branch_no_54:;
        {
            nuitka_bool tmp_condition_result_55;
            PyObject *tmp_compexpr_left_58;
            PyObject *tmp_compexpr_right_58;
            if ( var_year == NULL )
            {

                exception_type = PyExc_UnboundLocalError;
                Py_INCREF( exception_type );
                exception_value = PyUnicode_FromFormat( "local variable '%s' referenced before assignment", "year" );
                exception_tb = NULL;
                NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
                CHAIN_EXCEPTION( exception_value );

                exception_lineno = 520;
                type_description_1 = "oooooooooooooooooooooooooooooooooooooooboooo";
                goto frame_exception_exit_1;
            }

            tmp_compexpr_left_58 = var_year;
            tmp_compexpr_right_58 = Py_None;
            tmp_condition_result_55 = ( tmp_compexpr_left_58 == tmp_compexpr_right_58 ) ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
            if ( tmp_condition_result_55 == NUITKA_BOOL_TRUE )
            {
                goto branch_yes_55;
            }
            else
            {
                goto branch_no_55;
            }
            branch_yes_55:;
            {
                PyObject *tmp_assign_source_99;
                tmp_assign_source_99 = const_int_pos_1900;
                {
                    PyObject *old = var_year;
                    var_year = tmp_assign_source_99;
                    Py_INCREF( var_year );
                    Py_XDECREF( old );
                }

            }
            branch_no_55:;
        }
        branch_end_54:;
    }
    {
        nuitka_bool tmp_condition_result_56;
        int tmp_and_left_truth_7;
        nuitka_bool tmp_and_left_value_7;
        nuitka_bool tmp_and_right_value_7;
        PyObject *tmp_compexpr_left_59;
        PyObject *tmp_compexpr_right_59;
        PyObject *tmp_compexpr_left_60;
        PyObject *tmp_compexpr_right_60;
        if ( var_julian == NULL )
        {

            exception_type = PyExc_UnboundLocalError;
            Py_INCREF( exception_type );
            exception_value = PyUnicode_FromFormat( "local variable '%s' referenced before assignment", "julian" );
            exception_tb = NULL;
            NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
            CHAIN_EXCEPTION( exception_value );

            exception_lineno = 526;
            type_description_1 = "oooooooooooooooooooooooooooooooooooooooboooo";
            goto frame_exception_exit_1;
        }

        tmp_compexpr_left_59 = var_julian;
        tmp_compexpr_right_59 = Py_None;
        tmp_and_left_value_7 = ( tmp_compexpr_left_59 == tmp_compexpr_right_59 ) ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
        tmp_and_left_truth_7 = tmp_and_left_value_7 == NUITKA_BOOL_TRUE ? 1 : 0;
        if ( tmp_and_left_truth_7 == 1 )
        {
            goto and_right_7;
        }
        else
        {
            goto and_left_7;
        }
        and_right_7:;
        if ( var_weekday == NULL )
        {

            exception_type = PyExc_UnboundLocalError;
            Py_INCREF( exception_type );
            exception_value = PyUnicode_FromFormat( "local variable '%s' referenced before assignment", "weekday" );
            exception_tb = NULL;
            NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
            CHAIN_EXCEPTION( exception_value );

            exception_lineno = 526;
            type_description_1 = "oooooooooooooooooooooooooooooooooooooooboooo";
            goto frame_exception_exit_1;
        }

        tmp_compexpr_left_60 = var_weekday;
        tmp_compexpr_right_60 = Py_None;
        tmp_and_right_value_7 = ( tmp_compexpr_left_60 != tmp_compexpr_right_60 ) ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
        tmp_condition_result_56 = tmp_and_right_value_7;
        goto and_end_7;
        and_left_7:;
        tmp_condition_result_56 = tmp_and_left_value_7;
        and_end_7:;
        if ( tmp_condition_result_56 == NUITKA_BOOL_TRUE )
        {
            goto branch_yes_56;
        }
        else
        {
            goto branch_no_56;
        }
        branch_yes_56:;
        {
            nuitka_bool tmp_condition_result_57;
            PyObject *tmp_compexpr_left_61;
            PyObject *tmp_compexpr_right_61;
            if ( var_week_of_year == NULL )
            {

                exception_type = PyExc_UnboundLocalError;
                Py_INCREF( exception_type );
                exception_value = PyUnicode_FromFormat( "local variable '%s' referenced before assignment", "week_of_year" );
                exception_tb = NULL;
                NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
                CHAIN_EXCEPTION( exception_value );

                exception_lineno = 527;
                type_description_1 = "oooooooooooooooooooooooooooooooooooooooboooo";
                goto frame_exception_exit_1;
            }

            tmp_compexpr_left_61 = var_week_of_year;
            tmp_compexpr_right_61 = Py_None;
            tmp_condition_result_57 = ( tmp_compexpr_left_61 != tmp_compexpr_right_61 ) ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
            if ( tmp_condition_result_57 == NUITKA_BOOL_TRUE )
            {
                goto branch_yes_57;
            }
            else
            {
                goto branch_no_57;
            }
            branch_yes_57:;
            {
                PyObject *tmp_assign_source_100;
                nuitka_bool tmp_condition_result_58;
                PyObject *tmp_compexpr_left_62;
                PyObject *tmp_compexpr_right_62;
                if ( var_week_of_year_start == NULL )
                {

                    exception_type = PyExc_UnboundLocalError;
                    Py_INCREF( exception_type );
                    exception_value = PyUnicode_FromFormat( "local variable '%s' referenced before assignment", "week_of_year_start" );
                    exception_tb = NULL;
                    NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
                    CHAIN_EXCEPTION( exception_value );

                    exception_lineno = 528;
                    type_description_1 = "oooooooooooooooooooooooooooooooooooooooboooo";
                    goto frame_exception_exit_1;
                }

                tmp_compexpr_left_62 = var_week_of_year_start;
                tmp_compexpr_right_62 = const_int_0;
                tmp_res = RICH_COMPARE_BOOL_EQ_OBJECT_OBJECT( tmp_compexpr_left_62, tmp_compexpr_right_62 );
                if ( tmp_res == -1 )
                {
                    assert( ERROR_OCCURRED() );

                    FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                    exception_lineno = 528;
                    type_description_1 = "oooooooooooooooooooooooooooooooooooooooboooo";
                    goto frame_exception_exit_1;
                }
                tmp_condition_result_58 = ( tmp_res != 0 ) ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
                if ( tmp_condition_result_58 == NUITKA_BOOL_TRUE )
                {
                    goto condexpr_true_1;
                }
                else
                {
                    goto condexpr_false_1;
                }
                condexpr_true_1:;
                tmp_assign_source_100 = Py_True;
                goto condexpr_end_1;
                condexpr_false_1:;
                tmp_assign_source_100 = Py_False;
                condexpr_end_1:;
                assert( var_week_starts_Mon == NULL );
                Py_INCREF( tmp_assign_source_100 );
                var_week_starts_Mon = tmp_assign_source_100;
            }
            {
                PyObject *tmp_assign_source_101;
                PyObject *tmp_called_name_13;
                PyObject *tmp_mvar_value_18;
                PyObject *tmp_args_element_name_15;
                PyObject *tmp_args_element_name_16;
                PyObject *tmp_args_element_name_17;
                PyObject *tmp_args_element_name_18;
                tmp_mvar_value_18 = GET_STRING_DICT_VALUE( moduledict__strptime, (Nuitka_StringObject *)const_str_plain__calc_julian_from_U_or_W );

                if (unlikely( tmp_mvar_value_18 == NULL ))
                {
                    tmp_mvar_value_18 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain__calc_julian_from_U_or_W );
                }

                if ( tmp_mvar_value_18 == NULL )
                {

                    exception_type = PyExc_NameError;
                    Py_INCREF( exception_type );
                    exception_value = PyUnicode_FromFormat( "name '%s' is not defined", "_calc_julian_from_U_or_W" );
                    exception_tb = NULL;
                    NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
                    CHAIN_EXCEPTION( exception_value );

                    exception_lineno = 529;
                    type_description_1 = "oooooooooooooooooooooooooooooooooooooooboooo";
                    goto frame_exception_exit_1;
                }

                tmp_called_name_13 = tmp_mvar_value_18;
                if ( var_year == NULL )
                {

                    exception_type = PyExc_UnboundLocalError;
                    Py_INCREF( exception_type );
                    exception_value = PyUnicode_FromFormat( "local variable '%s' referenced before assignment", "year" );
                    exception_tb = NULL;
                    NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
                    CHAIN_EXCEPTION( exception_value );

                    exception_lineno = 529;
                    type_description_1 = "oooooooooooooooooooooooooooooooooooooooboooo";
                    goto frame_exception_exit_1;
                }

                tmp_args_element_name_15 = var_year;
                if ( var_week_of_year == NULL )
                {

                    exception_type = PyExc_UnboundLocalError;
                    Py_INCREF( exception_type );
                    exception_value = PyUnicode_FromFormat( "local variable '%s' referenced before assignment", "week_of_year" );
                    exception_tb = NULL;
                    NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
                    CHAIN_EXCEPTION( exception_value );

                    exception_lineno = 529;
                    type_description_1 = "oooooooooooooooooooooooooooooooooooooooboooo";
                    goto frame_exception_exit_1;
                }

                tmp_args_element_name_16 = var_week_of_year;
                if ( var_weekday == NULL )
                {

                    exception_type = PyExc_UnboundLocalError;
                    Py_INCREF( exception_type );
                    exception_value = PyUnicode_FromFormat( "local variable '%s' referenced before assignment", "weekday" );
                    exception_tb = NULL;
                    NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
                    CHAIN_EXCEPTION( exception_value );

                    exception_lineno = 529;
                    type_description_1 = "oooooooooooooooooooooooooooooooooooooooboooo";
                    goto frame_exception_exit_1;
                }

                tmp_args_element_name_17 = var_weekday;
                CHECK_OBJECT( var_week_starts_Mon );
                tmp_args_element_name_18 = var_week_starts_Mon;
                frame_285d3548e213aa4c5d6aef1855a305f1->m_frame.f_lineno = 529;
                {
                    PyObject *call_args[] = { tmp_args_element_name_15, tmp_args_element_name_16, tmp_args_element_name_17, tmp_args_element_name_18 };
                    tmp_assign_source_101 = CALL_FUNCTION_WITH_ARGS4( tmp_called_name_13, call_args );
                }

                if ( tmp_assign_source_101 == NULL )
                {
                    assert( ERROR_OCCURRED() );

                    FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                    exception_lineno = 529;
                    type_description_1 = "oooooooooooooooooooooooooooooooooooooooboooo";
                    goto frame_exception_exit_1;
                }
                {
                    PyObject *old = var_julian;
                    var_julian = tmp_assign_source_101;
                    Py_XDECREF( old );
                }

            }
            goto branch_end_57;
            branch_no_57:;
            {
                nuitka_bool tmp_condition_result_59;
                int tmp_and_left_truth_8;
                nuitka_bool tmp_and_left_value_8;
                nuitka_bool tmp_and_right_value_8;
                PyObject *tmp_compexpr_left_63;
                PyObject *tmp_compexpr_right_63;
                PyObject *tmp_compexpr_left_64;
                PyObject *tmp_compexpr_right_64;
                if ( var_iso_year == NULL )
                {

                    exception_type = PyExc_UnboundLocalError;
                    Py_INCREF( exception_type );
                    exception_value = PyUnicode_FromFormat( "local variable '%s' referenced before assignment", "iso_year" );
                    exception_tb = NULL;
                    NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
                    CHAIN_EXCEPTION( exception_value );

                    exception_lineno = 531;
                    type_description_1 = "oooooooooooooooooooooooooooooooooooooooboooo";
                    goto frame_exception_exit_1;
                }

                tmp_compexpr_left_63 = var_iso_year;
                tmp_compexpr_right_63 = Py_None;
                tmp_and_left_value_8 = ( tmp_compexpr_left_63 != tmp_compexpr_right_63 ) ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
                tmp_and_left_truth_8 = tmp_and_left_value_8 == NUITKA_BOOL_TRUE ? 1 : 0;
                if ( tmp_and_left_truth_8 == 1 )
                {
                    goto and_right_8;
                }
                else
                {
                    goto and_left_8;
                }
                and_right_8:;
                if ( var_iso_week == NULL )
                {

                    exception_type = PyExc_UnboundLocalError;
                    Py_INCREF( exception_type );
                    exception_value = PyUnicode_FromFormat( "local variable '%s' referenced before assignment", "iso_week" );
                    exception_tb = NULL;
                    NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
                    CHAIN_EXCEPTION( exception_value );

                    exception_lineno = 531;
                    type_description_1 = "oooooooooooooooooooooooooooooooooooooooboooo";
                    goto frame_exception_exit_1;
                }

                tmp_compexpr_left_64 = var_iso_week;
                tmp_compexpr_right_64 = Py_None;
                tmp_and_right_value_8 = ( tmp_compexpr_left_64 != tmp_compexpr_right_64 ) ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
                tmp_condition_result_59 = tmp_and_right_value_8;
                goto and_end_8;
                and_left_8:;
                tmp_condition_result_59 = tmp_and_left_value_8;
                and_end_8:;
                if ( tmp_condition_result_59 == NUITKA_BOOL_TRUE )
                {
                    goto branch_yes_58;
                }
                else
                {
                    goto branch_no_58;
                }
                branch_yes_58:;
                // Tried code:
                {
                    PyObject *tmp_assign_source_102;
                    PyObject *tmp_iter_arg_6;
                    PyObject *tmp_called_name_14;
                    PyObject *tmp_mvar_value_19;
                    PyObject *tmp_args_element_name_19;
                    PyObject *tmp_args_element_name_20;
                    PyObject *tmp_args_element_name_21;
                    PyObject *tmp_left_name_23;
                    PyObject *tmp_right_name_23;
                    tmp_mvar_value_19 = GET_STRING_DICT_VALUE( moduledict__strptime, (Nuitka_StringObject *)const_str_plain__calc_julian_from_V );

                    if (unlikely( tmp_mvar_value_19 == NULL ))
                    {
                        tmp_mvar_value_19 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain__calc_julian_from_V );
                    }

                    if ( tmp_mvar_value_19 == NULL )
                    {

                        exception_type = PyExc_NameError;
                        Py_INCREF( exception_type );
                        exception_value = PyUnicode_FromFormat( "name '%s' is not defined", "_calc_julian_from_V" );
                        exception_tb = NULL;
                        NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
                        CHAIN_EXCEPTION( exception_value );

                        exception_lineno = 532;
                        type_description_1 = "oooooooooooooooooooooooooooooooooooooooboooo";
                        goto try_except_handler_16;
                    }

                    tmp_called_name_14 = tmp_mvar_value_19;
                    if ( var_iso_year == NULL )
                    {

                        exception_type = PyExc_UnboundLocalError;
                        Py_INCREF( exception_type );
                        exception_value = PyUnicode_FromFormat( "local variable '%s' referenced before assignment", "iso_year" );
                        exception_tb = NULL;
                        NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
                        CHAIN_EXCEPTION( exception_value );

                        exception_lineno = 532;
                        type_description_1 = "oooooooooooooooooooooooooooooooooooooooboooo";
                        goto try_except_handler_16;
                    }

                    tmp_args_element_name_19 = var_iso_year;
                    if ( var_iso_week == NULL )
                    {

                        exception_type = PyExc_UnboundLocalError;
                        Py_INCREF( exception_type );
                        exception_value = PyUnicode_FromFormat( "local variable '%s' referenced before assignment", "iso_week" );
                        exception_tb = NULL;
                        NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
                        CHAIN_EXCEPTION( exception_value );

                        exception_lineno = 532;
                        type_description_1 = "oooooooooooooooooooooooooooooooooooooooboooo";
                        goto try_except_handler_16;
                    }

                    tmp_args_element_name_20 = var_iso_week;
                    if ( var_weekday == NULL )
                    {

                        exception_type = PyExc_UnboundLocalError;
                        Py_INCREF( exception_type );
                        exception_value = PyUnicode_FromFormat( "local variable '%s' referenced before assignment", "weekday" );
                        exception_tb = NULL;
                        NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
                        CHAIN_EXCEPTION( exception_value );

                        exception_lineno = 532;
                        type_description_1 = "oooooooooooooooooooooooooooooooooooooooboooo";
                        goto try_except_handler_16;
                    }

                    tmp_left_name_23 = var_weekday;
                    tmp_right_name_23 = const_int_pos_1;
                    tmp_args_element_name_21 = BINARY_OPERATION_ADD_OBJECT_LONG( tmp_left_name_23, tmp_right_name_23 );
                    if ( tmp_args_element_name_21 == NULL )
                    {
                        assert( ERROR_OCCURRED() );

                        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                        exception_lineno = 532;
                        type_description_1 = "oooooooooooooooooooooooooooooooooooooooboooo";
                        goto try_except_handler_16;
                    }
                    frame_285d3548e213aa4c5d6aef1855a305f1->m_frame.f_lineno = 532;
                    {
                        PyObject *call_args[] = { tmp_args_element_name_19, tmp_args_element_name_20, tmp_args_element_name_21 };
                        tmp_iter_arg_6 = CALL_FUNCTION_WITH_ARGS3( tmp_called_name_14, call_args );
                    }

                    Py_DECREF( tmp_args_element_name_21 );
                    if ( tmp_iter_arg_6 == NULL )
                    {
                        assert( ERROR_OCCURRED() );

                        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                        exception_lineno = 532;
                        type_description_1 = "oooooooooooooooooooooooooooooooooooooooboooo";
                        goto try_except_handler_16;
                    }
                    tmp_assign_source_102 = MAKE_UNPACK_ITERATOR( tmp_iter_arg_6 );
                    Py_DECREF( tmp_iter_arg_6 );
                    if ( tmp_assign_source_102 == NULL )
                    {
                        assert( ERROR_OCCURRED() );

                        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                        exception_lineno = 532;
                        type_description_1 = "oooooooooooooooooooooooooooooooooooooooboooo";
                        goto try_except_handler_16;
                    }
                    assert( tmp_tuple_unpack_3__source_iter == NULL );
                    tmp_tuple_unpack_3__source_iter = tmp_assign_source_102;
                }
                // Tried code:
                {
                    PyObject *tmp_assign_source_103;
                    PyObject *tmp_unpack_5;
                    CHECK_OBJECT( tmp_tuple_unpack_3__source_iter );
                    tmp_unpack_5 = tmp_tuple_unpack_3__source_iter;
                    tmp_assign_source_103 = UNPACK_NEXT( tmp_unpack_5, 0, 2 );
                    if ( tmp_assign_source_103 == NULL )
                    {
                        if ( !ERROR_OCCURRED() )
                        {
                            exception_type = PyExc_StopIteration;
                            Py_INCREF( exception_type );
                            exception_value = NULL;
                            exception_tb = NULL;
                        }
                        else
                        {
                            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
                        }


                        type_description_1 = "oooooooooooooooooooooooooooooooooooooooboooo";
                        exception_lineno = 532;
                        goto try_except_handler_17;
                    }
                    assert( tmp_tuple_unpack_3__element_1 == NULL );
                    tmp_tuple_unpack_3__element_1 = tmp_assign_source_103;
                }
                {
                    PyObject *tmp_assign_source_104;
                    PyObject *tmp_unpack_6;
                    CHECK_OBJECT( tmp_tuple_unpack_3__source_iter );
                    tmp_unpack_6 = tmp_tuple_unpack_3__source_iter;
                    tmp_assign_source_104 = UNPACK_NEXT( tmp_unpack_6, 1, 2 );
                    if ( tmp_assign_source_104 == NULL )
                    {
                        if ( !ERROR_OCCURRED() )
                        {
                            exception_type = PyExc_StopIteration;
                            Py_INCREF( exception_type );
                            exception_value = NULL;
                            exception_tb = NULL;
                        }
                        else
                        {
                            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
                        }


                        type_description_1 = "oooooooooooooooooooooooooooooooooooooooboooo";
                        exception_lineno = 532;
                        goto try_except_handler_17;
                    }
                    assert( tmp_tuple_unpack_3__element_2 == NULL );
                    tmp_tuple_unpack_3__element_2 = tmp_assign_source_104;
                }
                {
                    PyObject *tmp_iterator_name_3;
                    CHECK_OBJECT( tmp_tuple_unpack_3__source_iter );
                    tmp_iterator_name_3 = tmp_tuple_unpack_3__source_iter;
                    // Check if iterator has left-over elements.
                    CHECK_OBJECT( tmp_iterator_name_3 ); assert( HAS_ITERNEXT( tmp_iterator_name_3 ) );

                    tmp_iterator_attempt = (*Py_TYPE( tmp_iterator_name_3 )->tp_iternext)( tmp_iterator_name_3 );

                    if (likely( tmp_iterator_attempt == NULL ))
                    {
                        PyObject *error = GET_ERROR_OCCURRED();

                        if ( error != NULL )
                        {
                            if ( EXCEPTION_MATCH_BOOL_SINGLE( error, PyExc_StopIteration ))
                            {
                                CLEAR_ERROR_OCCURRED();
                            }
                            else
                            {
                                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );

                                type_description_1 = "oooooooooooooooooooooooooooooooooooooooboooo";
                                exception_lineno = 532;
                                goto try_except_handler_17;
                            }
                        }
                    }
                    else
                    {
                        Py_DECREF( tmp_iterator_attempt );

                        // TODO: Could avoid PyErr_Format.
#if PYTHON_VERSION < 300
                        PyErr_Format( PyExc_ValueError, "too many values to unpack" );
#else
                        PyErr_Format( PyExc_ValueError, "too many values to unpack (expected 2)" );
#endif
                        FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );

                        type_description_1 = "oooooooooooooooooooooooooooooooooooooooboooo";
                        exception_lineno = 532;
                        goto try_except_handler_17;
                    }
                }
                goto try_end_13;
                // Exception handler code:
                try_except_handler_17:;
                exception_keeper_type_15 = exception_type;
                exception_keeper_value_15 = exception_value;
                exception_keeper_tb_15 = exception_tb;
                exception_keeper_lineno_15 = exception_lineno;
                exception_type = NULL;
                exception_value = NULL;
                exception_tb = NULL;
                exception_lineno = 0;

                CHECK_OBJECT( (PyObject *)tmp_tuple_unpack_3__source_iter );
                Py_DECREF( tmp_tuple_unpack_3__source_iter );
                tmp_tuple_unpack_3__source_iter = NULL;

                // Re-raise.
                exception_type = exception_keeper_type_15;
                exception_value = exception_keeper_value_15;
                exception_tb = exception_keeper_tb_15;
                exception_lineno = exception_keeper_lineno_15;

                goto try_except_handler_16;
                // End of try:
                try_end_13:;
                goto try_end_14;
                // Exception handler code:
                try_except_handler_16:;
                exception_keeper_type_16 = exception_type;
                exception_keeper_value_16 = exception_value;
                exception_keeper_tb_16 = exception_tb;
                exception_keeper_lineno_16 = exception_lineno;
                exception_type = NULL;
                exception_value = NULL;
                exception_tb = NULL;
                exception_lineno = 0;

                Py_XDECREF( tmp_tuple_unpack_3__element_1 );
                tmp_tuple_unpack_3__element_1 = NULL;

                Py_XDECREF( tmp_tuple_unpack_3__element_2 );
                tmp_tuple_unpack_3__element_2 = NULL;

                // Re-raise.
                exception_type = exception_keeper_type_16;
                exception_value = exception_keeper_value_16;
                exception_tb = exception_keeper_tb_16;
                exception_lineno = exception_keeper_lineno_16;

                goto frame_exception_exit_1;
                // End of try:
                try_end_14:;
                CHECK_OBJECT( (PyObject *)tmp_tuple_unpack_3__source_iter );
                Py_DECREF( tmp_tuple_unpack_3__source_iter );
                tmp_tuple_unpack_3__source_iter = NULL;

                {
                    PyObject *tmp_assign_source_105;
                    CHECK_OBJECT( tmp_tuple_unpack_3__element_1 );
                    tmp_assign_source_105 = tmp_tuple_unpack_3__element_1;
                    {
                        PyObject *old = var_year;
                        var_year = tmp_assign_source_105;
                        Py_INCREF( var_year );
                        Py_XDECREF( old );
                    }

                }
                Py_XDECREF( tmp_tuple_unpack_3__element_1 );
                tmp_tuple_unpack_3__element_1 = NULL;

                {
                    PyObject *tmp_assign_source_106;
                    CHECK_OBJECT( tmp_tuple_unpack_3__element_2 );
                    tmp_assign_source_106 = tmp_tuple_unpack_3__element_2;
                    {
                        PyObject *old = var_julian;
                        var_julian = tmp_assign_source_106;
                        Py_INCREF( var_julian );
                        Py_XDECREF( old );
                    }

                }
                Py_XDECREF( tmp_tuple_unpack_3__element_2 );
                tmp_tuple_unpack_3__element_2 = NULL;

                branch_no_58:;
            }
            branch_end_57:;
        }
        {
            nuitka_bool tmp_condition_result_60;
            int tmp_and_left_truth_9;
            nuitka_bool tmp_and_left_value_9;
            nuitka_bool tmp_and_right_value_9;
            PyObject *tmp_compexpr_left_65;
            PyObject *tmp_compexpr_right_65;
            PyObject *tmp_compexpr_left_66;
            PyObject *tmp_compexpr_right_66;
            if ( var_julian == NULL )
            {

                exception_type = PyExc_UnboundLocalError;
                Py_INCREF( exception_type );
                exception_value = PyUnicode_FromFormat( "local variable '%s' referenced before assignment", "julian" );
                exception_tb = NULL;
                NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
                CHAIN_EXCEPTION( exception_value );

                exception_lineno = 533;
                type_description_1 = "oooooooooooooooooooooooooooooooooooooooboooo";
                goto frame_exception_exit_1;
            }

            tmp_compexpr_left_65 = var_julian;
            tmp_compexpr_right_65 = Py_None;
            tmp_and_left_value_9 = ( tmp_compexpr_left_65 != tmp_compexpr_right_65 ) ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
            tmp_and_left_truth_9 = tmp_and_left_value_9 == NUITKA_BOOL_TRUE ? 1 : 0;
            if ( tmp_and_left_truth_9 == 1 )
            {
                goto and_right_9;
            }
            else
            {
                goto and_left_9;
            }
            and_right_9:;
            if ( var_julian == NULL )
            {

                exception_type = PyExc_UnboundLocalError;
                Py_INCREF( exception_type );
                exception_value = PyUnicode_FromFormat( "local variable '%s' referenced before assignment", "julian" );
                exception_tb = NULL;
                NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
                CHAIN_EXCEPTION( exception_value );

                exception_lineno = 533;
                type_description_1 = "oooooooooooooooooooooooooooooooooooooooboooo";
                goto frame_exception_exit_1;
            }

            tmp_compexpr_left_66 = var_julian;
            tmp_compexpr_right_66 = const_int_0;
            tmp_res = RICH_COMPARE_BOOL_LTE_OBJECT_OBJECT( tmp_compexpr_left_66, tmp_compexpr_right_66 );
            if ( tmp_res == -1 )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 533;
                type_description_1 = "oooooooooooooooooooooooooooooooooooooooboooo";
                goto frame_exception_exit_1;
            }
            tmp_and_right_value_9 = ( tmp_res != 0 ) ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
            tmp_condition_result_60 = tmp_and_right_value_9;
            goto and_end_9;
            and_left_9:;
            tmp_condition_result_60 = tmp_and_left_value_9;
            and_end_9:;
            if ( tmp_condition_result_60 == NUITKA_BOOL_TRUE )
            {
                goto branch_yes_59;
            }
            else
            {
                goto branch_no_59;
            }
            branch_yes_59:;
            {
                PyObject *tmp_assign_source_107;
                PyObject *tmp_left_name_24;
                PyObject *tmp_right_name_24;
                if ( var_year == NULL )
                {

                    exception_type = PyExc_UnboundLocalError;
                    Py_INCREF( exception_type );
                    exception_value = PyUnicode_FromFormat( "local variable '%s' referenced before assignment", "year" );
                    exception_tb = NULL;
                    NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
                    CHAIN_EXCEPTION( exception_value );

                    exception_lineno = 534;
                    type_description_1 = "oooooooooooooooooooooooooooooooooooooooboooo";
                    goto frame_exception_exit_1;
                }

                tmp_left_name_24 = var_year;
                tmp_right_name_24 = const_int_pos_1;
                tmp_result = BINARY_OPERATION_INPLACE( PyNumber_InPlaceSubtract, &tmp_left_name_24, tmp_right_name_24 );
                if ( tmp_result == false )
                {
                    assert( ERROR_OCCURRED() );

                    FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                    exception_lineno = 534;
                    type_description_1 = "oooooooooooooooooooooooooooooooooooooooboooo";
                    goto frame_exception_exit_1;
                }
                tmp_assign_source_107 = tmp_left_name_24;
                var_year = tmp_assign_source_107;

            }
            {
                PyObject *tmp_assign_source_108;
                nuitka_bool tmp_condition_result_61;
                PyObject *tmp_called_instance_19;
                PyObject *tmp_mvar_value_20;
                PyObject *tmp_call_result_6;
                PyObject *tmp_args_element_name_22;
                int tmp_truth_name_3;
                tmp_mvar_value_20 = GET_STRING_DICT_VALUE( moduledict__strptime, (Nuitka_StringObject *)const_str_plain_calendar );

                if (unlikely( tmp_mvar_value_20 == NULL ))
                {
                    tmp_mvar_value_20 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_calendar );
                }

                if ( tmp_mvar_value_20 == NULL )
                {

                    exception_type = PyExc_NameError;
                    Py_INCREF( exception_type );
                    exception_value = PyUnicode_FromFormat( "name '%s' is not defined", "calendar" );
                    exception_tb = NULL;
                    NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
                    CHAIN_EXCEPTION( exception_value );

                    exception_lineno = 535;
                    type_description_1 = "oooooooooooooooooooooooooooooooooooooooboooo";
                    goto frame_exception_exit_1;
                }

                tmp_called_instance_19 = tmp_mvar_value_20;
                CHECK_OBJECT( var_year );
                tmp_args_element_name_22 = var_year;
                frame_285d3548e213aa4c5d6aef1855a305f1->m_frame.f_lineno = 535;
                {
                    PyObject *call_args[] = { tmp_args_element_name_22 };
                    tmp_call_result_6 = CALL_METHOD_WITH_ARGS1( tmp_called_instance_19, const_str_plain_isleap, call_args );
                }

                if ( tmp_call_result_6 == NULL )
                {
                    assert( ERROR_OCCURRED() );

                    FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                    exception_lineno = 535;
                    type_description_1 = "oooooooooooooooooooooooooooooooooooooooboooo";
                    goto frame_exception_exit_1;
                }
                tmp_truth_name_3 = CHECK_IF_TRUE( tmp_call_result_6 );
                if ( tmp_truth_name_3 == -1 )
                {
                    assert( ERROR_OCCURRED() );

                    FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
                    Py_DECREF( tmp_call_result_6 );

                    exception_lineno = 535;
                    type_description_1 = "oooooooooooooooooooooooooooooooooooooooboooo";
                    goto frame_exception_exit_1;
                }
                tmp_condition_result_61 = tmp_truth_name_3 == 1 ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
                Py_DECREF( tmp_call_result_6 );
                if ( tmp_condition_result_61 == NUITKA_BOOL_TRUE )
                {
                    goto condexpr_true_2;
                }
                else
                {
                    goto condexpr_false_2;
                }
                condexpr_true_2:;
                tmp_assign_source_108 = const_int_pos_366;
                goto condexpr_end_2;
                condexpr_false_2:;
                tmp_assign_source_108 = const_int_pos_365;
                condexpr_end_2:;
                assert( var_yday == NULL );
                Py_INCREF( tmp_assign_source_108 );
                var_yday = tmp_assign_source_108;
            }
            {
                PyObject *tmp_assign_source_109;
                PyObject *tmp_left_name_25;
                PyObject *tmp_right_name_25;
                if ( var_julian == NULL )
                {

                    exception_type = PyExc_UnboundLocalError;
                    Py_INCREF( exception_type );
                    exception_value = PyUnicode_FromFormat( "local variable '%s' referenced before assignment", "julian" );
                    exception_tb = NULL;
                    NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
                    CHAIN_EXCEPTION( exception_value );

                    exception_lineno = 536;
                    type_description_1 = "oooooooooooooooooooooooooooooooooooooooboooo";
                    goto frame_exception_exit_1;
                }

                tmp_left_name_25 = var_julian;
                CHECK_OBJECT( var_yday );
                tmp_right_name_25 = var_yday;
                tmp_result = BINARY_OPERATION_ADD_OBJECT_OBJECT_INPLACE( &tmp_left_name_25, tmp_right_name_25 );
                if ( tmp_result == false )
                {
                    assert( ERROR_OCCURRED() );

                    FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                    exception_lineno = 536;
                    type_description_1 = "oooooooooooooooooooooooooooooooooooooooboooo";
                    goto frame_exception_exit_1;
                }
                tmp_assign_source_109 = tmp_left_name_25;
                var_julian = tmp_assign_source_109;

            }
            branch_no_59:;
        }
        branch_no_56:;
    }
    {
        nuitka_bool tmp_condition_result_62;
        PyObject *tmp_compexpr_left_67;
        PyObject *tmp_compexpr_right_67;
        if ( var_julian == NULL )
        {

            exception_type = PyExc_UnboundLocalError;
            Py_INCREF( exception_type );
            exception_value = PyUnicode_FromFormat( "local variable '%s' referenced before assignment", "julian" );
            exception_tb = NULL;
            NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
            CHAIN_EXCEPTION( exception_value );

            exception_lineno = 538;
            type_description_1 = "oooooooooooooooooooooooooooooooooooooooboooo";
            goto frame_exception_exit_1;
        }

        tmp_compexpr_left_67 = var_julian;
        tmp_compexpr_right_67 = Py_None;
        tmp_condition_result_62 = ( tmp_compexpr_left_67 == tmp_compexpr_right_67 ) ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
        if ( tmp_condition_result_62 == NUITKA_BOOL_TRUE )
        {
            goto branch_yes_60;
        }
        else
        {
            goto branch_no_60;
        }
        branch_yes_60:;
        {
            PyObject *tmp_assign_source_110;
            PyObject *tmp_left_name_26;
            PyObject *tmp_left_name_27;
            PyObject *tmp_called_instance_20;
            PyObject *tmp_called_name_15;
            PyObject *tmp_mvar_value_21;
            PyObject *tmp_args_element_name_23;
            PyObject *tmp_args_element_name_24;
            PyObject *tmp_args_element_name_25;
            PyObject *tmp_right_name_26;
            PyObject *tmp_called_instance_21;
            PyObject *tmp_called_name_16;
            PyObject *tmp_mvar_value_22;
            PyObject *tmp_args_element_name_26;
            PyObject *tmp_args_element_name_27;
            PyObject *tmp_args_element_name_28;
            PyObject *tmp_right_name_27;
            tmp_mvar_value_21 = GET_STRING_DICT_VALUE( moduledict__strptime, (Nuitka_StringObject *)const_str_plain_datetime_date );

            if (unlikely( tmp_mvar_value_21 == NULL ))
            {
                tmp_mvar_value_21 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_datetime_date );
            }

            if ( tmp_mvar_value_21 == NULL )
            {

                exception_type = PyExc_NameError;
                Py_INCREF( exception_type );
                exception_value = PyUnicode_FromFormat( "name '%s' is not defined", "datetime_date" );
                exception_tb = NULL;
                NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
                CHAIN_EXCEPTION( exception_value );

                exception_lineno = 543;
                type_description_1 = "oooooooooooooooooooooooooooooooooooooooboooo";
                goto frame_exception_exit_1;
            }

            tmp_called_name_15 = tmp_mvar_value_21;
            if ( var_year == NULL )
            {

                exception_type = PyExc_UnboundLocalError;
                Py_INCREF( exception_type );
                exception_value = PyUnicode_FromFormat( "local variable '%s' referenced before assignment", "year" );
                exception_tb = NULL;
                NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
                CHAIN_EXCEPTION( exception_value );

                exception_lineno = 543;
                type_description_1 = "oooooooooooooooooooooooooooooooooooooooboooo";
                goto frame_exception_exit_1;
            }

            tmp_args_element_name_23 = var_year;
            if ( var_month == NULL )
            {

                exception_type = PyExc_UnboundLocalError;
                Py_INCREF( exception_type );
                exception_value = PyUnicode_FromFormat( "local variable '%s' referenced before assignment", "month" );
                exception_tb = NULL;
                NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
                CHAIN_EXCEPTION( exception_value );

                exception_lineno = 543;
                type_description_1 = "oooooooooooooooooooooooooooooooooooooooboooo";
                goto frame_exception_exit_1;
            }

            tmp_args_element_name_24 = var_month;
            if ( var_day == NULL )
            {

                exception_type = PyExc_UnboundLocalError;
                Py_INCREF( exception_type );
                exception_value = PyUnicode_FromFormat( "local variable '%s' referenced before assignment", "day" );
                exception_tb = NULL;
                NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
                CHAIN_EXCEPTION( exception_value );

                exception_lineno = 543;
                type_description_1 = "oooooooooooooooooooooooooooooooooooooooboooo";
                goto frame_exception_exit_1;
            }

            tmp_args_element_name_25 = var_day;
            frame_285d3548e213aa4c5d6aef1855a305f1->m_frame.f_lineno = 543;
            {
                PyObject *call_args[] = { tmp_args_element_name_23, tmp_args_element_name_24, tmp_args_element_name_25 };
                tmp_called_instance_20 = CALL_FUNCTION_WITH_ARGS3( tmp_called_name_15, call_args );
            }

            if ( tmp_called_instance_20 == NULL )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 543;
                type_description_1 = "oooooooooooooooooooooooooooooooooooooooboooo";
                goto frame_exception_exit_1;
            }
            frame_285d3548e213aa4c5d6aef1855a305f1->m_frame.f_lineno = 543;
            tmp_left_name_27 = CALL_METHOD_NO_ARGS( tmp_called_instance_20, const_str_plain_toordinal );
            Py_DECREF( tmp_called_instance_20 );
            if ( tmp_left_name_27 == NULL )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 543;
                type_description_1 = "oooooooooooooooooooooooooooooooooooooooboooo";
                goto frame_exception_exit_1;
            }
            tmp_mvar_value_22 = GET_STRING_DICT_VALUE( moduledict__strptime, (Nuitka_StringObject *)const_str_plain_datetime_date );

            if (unlikely( tmp_mvar_value_22 == NULL ))
            {
                tmp_mvar_value_22 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_datetime_date );
            }

            if ( tmp_mvar_value_22 == NULL )
            {
                Py_DECREF( tmp_left_name_27 );
                exception_type = PyExc_NameError;
                Py_INCREF( exception_type );
                exception_value = PyUnicode_FromFormat( "name '%s' is not defined", "datetime_date" );
                exception_tb = NULL;
                NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
                CHAIN_EXCEPTION( exception_value );

                exception_lineno = 544;
                type_description_1 = "oooooooooooooooooooooooooooooooooooooooboooo";
                goto frame_exception_exit_1;
            }

            tmp_called_name_16 = tmp_mvar_value_22;
            if ( var_year == NULL )
            {
                Py_DECREF( tmp_left_name_27 );
                exception_type = PyExc_UnboundLocalError;
                Py_INCREF( exception_type );
                exception_value = PyUnicode_FromFormat( "local variable '%s' referenced before assignment", "year" );
                exception_tb = NULL;
                NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
                CHAIN_EXCEPTION( exception_value );

                exception_lineno = 544;
                type_description_1 = "oooooooooooooooooooooooooooooooooooooooboooo";
                goto frame_exception_exit_1;
            }

            tmp_args_element_name_26 = var_year;
            tmp_args_element_name_27 = const_int_pos_1;
            tmp_args_element_name_28 = const_int_pos_1;
            frame_285d3548e213aa4c5d6aef1855a305f1->m_frame.f_lineno = 544;
            {
                PyObject *call_args[] = { tmp_args_element_name_26, tmp_args_element_name_27, tmp_args_element_name_28 };
                tmp_called_instance_21 = CALL_FUNCTION_WITH_ARGS3( tmp_called_name_16, call_args );
            }

            if ( tmp_called_instance_21 == NULL )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
                Py_DECREF( tmp_left_name_27 );

                exception_lineno = 544;
                type_description_1 = "oooooooooooooooooooooooooooooooooooooooboooo";
                goto frame_exception_exit_1;
            }
            frame_285d3548e213aa4c5d6aef1855a305f1->m_frame.f_lineno = 544;
            tmp_right_name_26 = CALL_METHOD_NO_ARGS( tmp_called_instance_21, const_str_plain_toordinal );
            Py_DECREF( tmp_called_instance_21 );
            if ( tmp_right_name_26 == NULL )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
                Py_DECREF( tmp_left_name_27 );

                exception_lineno = 544;
                type_description_1 = "oooooooooooooooooooooooooooooooooooooooboooo";
                goto frame_exception_exit_1;
            }
            tmp_left_name_26 = BINARY_OPERATION_SUB( tmp_left_name_27, tmp_right_name_26 );
            Py_DECREF( tmp_left_name_27 );
            Py_DECREF( tmp_right_name_26 );
            if ( tmp_left_name_26 == NULL )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 543;
                type_description_1 = "oooooooooooooooooooooooooooooooooooooooboooo";
                goto frame_exception_exit_1;
            }
            tmp_right_name_27 = const_int_pos_1;
            tmp_assign_source_110 = BINARY_OPERATION_ADD_OBJECT_LONG( tmp_left_name_26, tmp_right_name_27 );
            Py_DECREF( tmp_left_name_26 );
            if ( tmp_assign_source_110 == NULL )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 544;
                type_description_1 = "oooooooooooooooooooooooooooooooooooooooboooo";
                goto frame_exception_exit_1;
            }
            {
                PyObject *old = var_julian;
                var_julian = tmp_assign_source_110;
                Py_XDECREF( old );
            }

        }
        goto branch_end_60;
        branch_no_60:;
        {
            PyObject *tmp_assign_source_111;
            PyObject *tmp_called_name_17;
            PyObject *tmp_source_name_25;
            PyObject *tmp_mvar_value_23;
            PyObject *tmp_args_element_name_29;
            PyObject *tmp_left_name_28;
            PyObject *tmp_left_name_29;
            PyObject *tmp_right_name_28;
            PyObject *tmp_right_name_29;
            PyObject *tmp_called_instance_22;
            PyObject *tmp_called_name_18;
            PyObject *tmp_mvar_value_24;
            PyObject *tmp_args_element_name_30;
            PyObject *tmp_args_element_name_31;
            PyObject *tmp_args_element_name_32;
            tmp_mvar_value_23 = GET_STRING_DICT_VALUE( moduledict__strptime, (Nuitka_StringObject *)const_str_plain_datetime_date );

            if (unlikely( tmp_mvar_value_23 == NULL ))
            {
                tmp_mvar_value_23 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_datetime_date );
            }

            if ( tmp_mvar_value_23 == NULL )
            {

                exception_type = PyExc_NameError;
                Py_INCREF( exception_type );
                exception_value = PyUnicode_FromFormat( "name '%s' is not defined", "datetime_date" );
                exception_tb = NULL;
                NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
                CHAIN_EXCEPTION( exception_value );

                exception_lineno = 547;
                type_description_1 = "oooooooooooooooooooooooooooooooooooooooboooo";
                goto frame_exception_exit_1;
            }

            tmp_source_name_25 = tmp_mvar_value_23;
            tmp_called_name_17 = LOOKUP_ATTRIBUTE( tmp_source_name_25, const_str_plain_fromordinal );
            if ( tmp_called_name_17 == NULL )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 547;
                type_description_1 = "oooooooooooooooooooooooooooooooooooooooboooo";
                goto frame_exception_exit_1;
            }
            if ( var_julian == NULL )
            {
                Py_DECREF( tmp_called_name_17 );
                exception_type = PyExc_UnboundLocalError;
                Py_INCREF( exception_type );
                exception_value = PyUnicode_FromFormat( "local variable '%s' referenced before assignment", "julian" );
                exception_tb = NULL;
                NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
                CHAIN_EXCEPTION( exception_value );

                exception_lineno = 548;
                type_description_1 = "oooooooooooooooooooooooooooooooooooooooboooo";
                goto frame_exception_exit_1;
            }

            tmp_left_name_29 = var_julian;
            tmp_right_name_28 = const_int_pos_1;
            tmp_left_name_28 = BINARY_OPERATION_SUB( tmp_left_name_29, tmp_right_name_28 );
            if ( tmp_left_name_28 == NULL )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
                Py_DECREF( tmp_called_name_17 );

                exception_lineno = 548;
                type_description_1 = "oooooooooooooooooooooooooooooooooooooooboooo";
                goto frame_exception_exit_1;
            }
            tmp_mvar_value_24 = GET_STRING_DICT_VALUE( moduledict__strptime, (Nuitka_StringObject *)const_str_plain_datetime_date );

            if (unlikely( tmp_mvar_value_24 == NULL ))
            {
                tmp_mvar_value_24 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_datetime_date );
            }

            if ( tmp_mvar_value_24 == NULL )
            {
                Py_DECREF( tmp_called_name_17 );
                Py_DECREF( tmp_left_name_28 );
                exception_type = PyExc_NameError;
                Py_INCREF( exception_type );
                exception_value = PyUnicode_FromFormat( "name '%s' is not defined", "datetime_date" );
                exception_tb = NULL;
                NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
                CHAIN_EXCEPTION( exception_value );

                exception_lineno = 549;
                type_description_1 = "oooooooooooooooooooooooooooooooooooooooboooo";
                goto frame_exception_exit_1;
            }

            tmp_called_name_18 = tmp_mvar_value_24;
            if ( var_year == NULL )
            {
                Py_DECREF( tmp_called_name_17 );
                Py_DECREF( tmp_left_name_28 );
                exception_type = PyExc_UnboundLocalError;
                Py_INCREF( exception_type );
                exception_value = PyUnicode_FromFormat( "local variable '%s' referenced before assignment", "year" );
                exception_tb = NULL;
                NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
                CHAIN_EXCEPTION( exception_value );

                exception_lineno = 549;
                type_description_1 = "oooooooooooooooooooooooooooooooooooooooboooo";
                goto frame_exception_exit_1;
            }

            tmp_args_element_name_30 = var_year;
            tmp_args_element_name_31 = const_int_pos_1;
            tmp_args_element_name_32 = const_int_pos_1;
            frame_285d3548e213aa4c5d6aef1855a305f1->m_frame.f_lineno = 549;
            {
                PyObject *call_args[] = { tmp_args_element_name_30, tmp_args_element_name_31, tmp_args_element_name_32 };
                tmp_called_instance_22 = CALL_FUNCTION_WITH_ARGS3( tmp_called_name_18, call_args );
            }

            if ( tmp_called_instance_22 == NULL )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
                Py_DECREF( tmp_called_name_17 );
                Py_DECREF( tmp_left_name_28 );

                exception_lineno = 549;
                type_description_1 = "oooooooooooooooooooooooooooooooooooooooboooo";
                goto frame_exception_exit_1;
            }
            frame_285d3548e213aa4c5d6aef1855a305f1->m_frame.f_lineno = 549;
            tmp_right_name_29 = CALL_METHOD_NO_ARGS( tmp_called_instance_22, const_str_plain_toordinal );
            Py_DECREF( tmp_called_instance_22 );
            if ( tmp_right_name_29 == NULL )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
                Py_DECREF( tmp_called_name_17 );
                Py_DECREF( tmp_left_name_28 );

                exception_lineno = 549;
                type_description_1 = "oooooooooooooooooooooooooooooooooooooooboooo";
                goto frame_exception_exit_1;
            }
            tmp_args_element_name_29 = BINARY_OPERATION_ADD_OBJECT_OBJECT( tmp_left_name_28, tmp_right_name_29 );
            Py_DECREF( tmp_left_name_28 );
            Py_DECREF( tmp_right_name_29 );
            if ( tmp_args_element_name_29 == NULL )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
                Py_DECREF( tmp_called_name_17 );

                exception_lineno = 548;
                type_description_1 = "oooooooooooooooooooooooooooooooooooooooboooo";
                goto frame_exception_exit_1;
            }
            frame_285d3548e213aa4c5d6aef1855a305f1->m_frame.f_lineno = 547;
            {
                PyObject *call_args[] = { tmp_args_element_name_29 };
                tmp_assign_source_111 = CALL_FUNCTION_WITH_ARGS1( tmp_called_name_17, call_args );
            }

            Py_DECREF( tmp_called_name_17 );
            Py_DECREF( tmp_args_element_name_29 );
            if ( tmp_assign_source_111 == NULL )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 547;
                type_description_1 = "oooooooooooooooooooooooooooooooooooooooboooo";
                goto frame_exception_exit_1;
            }
            assert( var_datetime_result == NULL );
            var_datetime_result = tmp_assign_source_111;
        }
        {
            PyObject *tmp_assign_source_112;
            PyObject *tmp_source_name_26;
            CHECK_OBJECT( var_datetime_result );
            tmp_source_name_26 = var_datetime_result;
            tmp_assign_source_112 = LOOKUP_ATTRIBUTE( tmp_source_name_26, const_str_plain_year );
            if ( tmp_assign_source_112 == NULL )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 550;
                type_description_1 = "oooooooooooooooooooooooooooooooooooooooboooo";
                goto frame_exception_exit_1;
            }
            {
                PyObject *old = var_year;
                var_year = tmp_assign_source_112;
                Py_XDECREF( old );
            }

        }
        {
            PyObject *tmp_assign_source_113;
            PyObject *tmp_source_name_27;
            CHECK_OBJECT( var_datetime_result );
            tmp_source_name_27 = var_datetime_result;
            tmp_assign_source_113 = LOOKUP_ATTRIBUTE( tmp_source_name_27, const_str_plain_month );
            if ( tmp_assign_source_113 == NULL )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 551;
                type_description_1 = "oooooooooooooooooooooooooooooooooooooooboooo";
                goto frame_exception_exit_1;
            }
            {
                PyObject *old = var_month;
                var_month = tmp_assign_source_113;
                Py_XDECREF( old );
            }

        }
        {
            PyObject *tmp_assign_source_114;
            PyObject *tmp_source_name_28;
            CHECK_OBJECT( var_datetime_result );
            tmp_source_name_28 = var_datetime_result;
            tmp_assign_source_114 = LOOKUP_ATTRIBUTE( tmp_source_name_28, const_str_plain_day );
            if ( tmp_assign_source_114 == NULL )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 552;
                type_description_1 = "oooooooooooooooooooooooooooooooooooooooboooo";
                goto frame_exception_exit_1;
            }
            {
                PyObject *old = var_day;
                var_day = tmp_assign_source_114;
                Py_XDECREF( old );
            }

        }
        branch_end_60:;
    }
    {
        nuitka_bool tmp_condition_result_63;
        PyObject *tmp_compexpr_left_68;
        PyObject *tmp_compexpr_right_68;
        if ( var_weekday == NULL )
        {

            exception_type = PyExc_UnboundLocalError;
            Py_INCREF( exception_type );
            exception_value = PyUnicode_FromFormat( "local variable '%s' referenced before assignment", "weekday" );
            exception_tb = NULL;
            NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
            CHAIN_EXCEPTION( exception_value );

            exception_lineno = 553;
            type_description_1 = "oooooooooooooooooooooooooooooooooooooooboooo";
            goto frame_exception_exit_1;
        }

        tmp_compexpr_left_68 = var_weekday;
        tmp_compexpr_right_68 = Py_None;
        tmp_condition_result_63 = ( tmp_compexpr_left_68 == tmp_compexpr_right_68 ) ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
        if ( tmp_condition_result_63 == NUITKA_BOOL_TRUE )
        {
            goto branch_yes_61;
        }
        else
        {
            goto branch_no_61;
        }
        branch_yes_61:;
        {
            PyObject *tmp_assign_source_115;
            PyObject *tmp_called_instance_23;
            PyObject *tmp_called_name_19;
            PyObject *tmp_mvar_value_25;
            PyObject *tmp_args_element_name_33;
            PyObject *tmp_args_element_name_34;
            PyObject *tmp_args_element_name_35;
            tmp_mvar_value_25 = GET_STRING_DICT_VALUE( moduledict__strptime, (Nuitka_StringObject *)const_str_plain_datetime_date );

            if (unlikely( tmp_mvar_value_25 == NULL ))
            {
                tmp_mvar_value_25 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_datetime_date );
            }

            if ( tmp_mvar_value_25 == NULL )
            {

                exception_type = PyExc_NameError;
                Py_INCREF( exception_type );
                exception_value = PyUnicode_FromFormat( "name '%s' is not defined", "datetime_date" );
                exception_tb = NULL;
                NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
                CHAIN_EXCEPTION( exception_value );

                exception_lineno = 554;
                type_description_1 = "oooooooooooooooooooooooooooooooooooooooboooo";
                goto frame_exception_exit_1;
            }

            tmp_called_name_19 = tmp_mvar_value_25;
            if ( var_year == NULL )
            {

                exception_type = PyExc_UnboundLocalError;
                Py_INCREF( exception_type );
                exception_value = PyUnicode_FromFormat( "local variable '%s' referenced before assignment", "year" );
                exception_tb = NULL;
                NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
                CHAIN_EXCEPTION( exception_value );

                exception_lineno = 554;
                type_description_1 = "oooooooooooooooooooooooooooooooooooooooboooo";
                goto frame_exception_exit_1;
            }

            tmp_args_element_name_33 = var_year;
            if ( var_month == NULL )
            {

                exception_type = PyExc_UnboundLocalError;
                Py_INCREF( exception_type );
                exception_value = PyUnicode_FromFormat( "local variable '%s' referenced before assignment", "month" );
                exception_tb = NULL;
                NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
                CHAIN_EXCEPTION( exception_value );

                exception_lineno = 554;
                type_description_1 = "oooooooooooooooooooooooooooooooooooooooboooo";
                goto frame_exception_exit_1;
            }

            tmp_args_element_name_34 = var_month;
            if ( var_day == NULL )
            {

                exception_type = PyExc_UnboundLocalError;
                Py_INCREF( exception_type );
                exception_value = PyUnicode_FromFormat( "local variable '%s' referenced before assignment", "day" );
                exception_tb = NULL;
                NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
                CHAIN_EXCEPTION( exception_value );

                exception_lineno = 554;
                type_description_1 = "oooooooooooooooooooooooooooooooooooooooboooo";
                goto frame_exception_exit_1;
            }

            tmp_args_element_name_35 = var_day;
            frame_285d3548e213aa4c5d6aef1855a305f1->m_frame.f_lineno = 554;
            {
                PyObject *call_args[] = { tmp_args_element_name_33, tmp_args_element_name_34, tmp_args_element_name_35 };
                tmp_called_instance_23 = CALL_FUNCTION_WITH_ARGS3( tmp_called_name_19, call_args );
            }

            if ( tmp_called_instance_23 == NULL )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 554;
                type_description_1 = "oooooooooooooooooooooooooooooooooooooooboooo";
                goto frame_exception_exit_1;
            }
            frame_285d3548e213aa4c5d6aef1855a305f1->m_frame.f_lineno = 554;
            tmp_assign_source_115 = CALL_METHOD_NO_ARGS( tmp_called_instance_23, const_str_plain_weekday );
            Py_DECREF( tmp_called_instance_23 );
            if ( tmp_assign_source_115 == NULL )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 554;
                type_description_1 = "oooooooooooooooooooooooooooooooooooooooboooo";
                goto frame_exception_exit_1;
            }
            {
                PyObject *old = var_weekday;
                var_weekday = tmp_assign_source_115;
                Py_XDECREF( old );
            }

        }
        branch_no_61:;
    }
    {
        PyObject *tmp_assign_source_116;
        PyObject *tmp_called_instance_24;
        CHECK_OBJECT( var_found_dict );
        tmp_called_instance_24 = var_found_dict;
        frame_285d3548e213aa4c5d6aef1855a305f1->m_frame.f_lineno = 556;
        tmp_assign_source_116 = CALL_METHOD_WITH_ARGS1( tmp_called_instance_24, const_str_plain_get, &PyTuple_GET_ITEM( const_tuple_str_plain_Z_tuple, 0 ) );

        if ( tmp_assign_source_116 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 556;
            type_description_1 = "oooooooooooooooooooooooooooooooooooooooboooo";
            goto frame_exception_exit_1;
        }
        assert( var_tzname == NULL );
        var_tzname = tmp_assign_source_116;
    }
    {
        nuitka_bool tmp_condition_result_64;
        assert( var_leap_year_fix != NUITKA_BOOL_UNASSIGNED);
        tmp_condition_result_64 = var_leap_year_fix;
        if ( tmp_condition_result_64 == NUITKA_BOOL_TRUE )
        {
            goto branch_yes_62;
        }
        else
        {
            goto branch_no_62;
        }
        branch_yes_62:;
        {
            PyObject *tmp_assign_source_117;
            tmp_assign_source_117 = const_int_pos_1900;
            {
                PyObject *old = var_year;
                var_year = tmp_assign_source_117;
                Py_INCREF( var_year );
                Py_XDECREF( old );
            }

        }
        branch_no_62:;
    }
    {
        PyObject *tmp_tuple_element_5;
        PyObject *tmp_tuple_element_6;
        if ( var_year == NULL )
        {

            exception_type = PyExc_UnboundLocalError;
            Py_INCREF( exception_type );
            exception_value = PyUnicode_FromFormat( "local variable '%s' referenced before assignment", "year" );
            exception_tb = NULL;
            NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
            CHAIN_EXCEPTION( exception_value );

            exception_lineno = 564;
            type_description_1 = "oooooooooooooooooooooooooooooooooooooooboooo";
            goto frame_exception_exit_1;
        }

        tmp_tuple_element_6 = var_year;
        tmp_tuple_element_5 = PyTuple_New( 11 );
        Py_INCREF( tmp_tuple_element_6 );
        PyTuple_SET_ITEM( tmp_tuple_element_5, 0, tmp_tuple_element_6 );
        if ( var_month == NULL )
        {
            Py_DECREF( tmp_tuple_element_5 );
            exception_type = PyExc_UnboundLocalError;
            Py_INCREF( exception_type );
            exception_value = PyUnicode_FromFormat( "local variable '%s' referenced before assignment", "month" );
            exception_tb = NULL;
            NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
            CHAIN_EXCEPTION( exception_value );

            exception_lineno = 564;
            type_description_1 = "oooooooooooooooooooooooooooooooooooooooboooo";
            goto frame_exception_exit_1;
        }

        tmp_tuple_element_6 = var_month;
        Py_INCREF( tmp_tuple_element_6 );
        PyTuple_SET_ITEM( tmp_tuple_element_5, 1, tmp_tuple_element_6 );
        if ( var_day == NULL )
        {
            Py_DECREF( tmp_tuple_element_5 );
            exception_type = PyExc_UnboundLocalError;
            Py_INCREF( exception_type );
            exception_value = PyUnicode_FromFormat( "local variable '%s' referenced before assignment", "day" );
            exception_tb = NULL;
            NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
            CHAIN_EXCEPTION( exception_value );

            exception_lineno = 564;
            type_description_1 = "oooooooooooooooooooooooooooooooooooooooboooo";
            goto frame_exception_exit_1;
        }

        tmp_tuple_element_6 = var_day;
        Py_INCREF( tmp_tuple_element_6 );
        PyTuple_SET_ITEM( tmp_tuple_element_5, 2, tmp_tuple_element_6 );
        if ( var_hour == NULL )
        {
            Py_DECREF( tmp_tuple_element_5 );
            exception_type = PyExc_UnboundLocalError;
            Py_INCREF( exception_type );
            exception_value = PyUnicode_FromFormat( "local variable '%s' referenced before assignment", "hour" );
            exception_tb = NULL;
            NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
            CHAIN_EXCEPTION( exception_value );

            exception_lineno = 565;
            type_description_1 = "oooooooooooooooooooooooooooooooooooooooboooo";
            goto frame_exception_exit_1;
        }

        tmp_tuple_element_6 = var_hour;
        Py_INCREF( tmp_tuple_element_6 );
        PyTuple_SET_ITEM( tmp_tuple_element_5, 3, tmp_tuple_element_6 );
        if ( var_minute == NULL )
        {
            Py_DECREF( tmp_tuple_element_5 );
            exception_type = PyExc_UnboundLocalError;
            Py_INCREF( exception_type );
            exception_value = PyUnicode_FromFormat( "local variable '%s' referenced before assignment", "minute" );
            exception_tb = NULL;
            NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
            CHAIN_EXCEPTION( exception_value );

            exception_lineno = 565;
            type_description_1 = "oooooooooooooooooooooooooooooooooooooooboooo";
            goto frame_exception_exit_1;
        }

        tmp_tuple_element_6 = var_minute;
        Py_INCREF( tmp_tuple_element_6 );
        PyTuple_SET_ITEM( tmp_tuple_element_5, 4, tmp_tuple_element_6 );
        if ( var_second == NULL )
        {
            Py_DECREF( tmp_tuple_element_5 );
            exception_type = PyExc_UnboundLocalError;
            Py_INCREF( exception_type );
            exception_value = PyUnicode_FromFormat( "local variable '%s' referenced before assignment", "second" );
            exception_tb = NULL;
            NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
            CHAIN_EXCEPTION( exception_value );

            exception_lineno = 565;
            type_description_1 = "oooooooooooooooooooooooooooooooooooooooboooo";
            goto frame_exception_exit_1;
        }

        tmp_tuple_element_6 = var_second;
        Py_INCREF( tmp_tuple_element_6 );
        PyTuple_SET_ITEM( tmp_tuple_element_5, 5, tmp_tuple_element_6 );
        if ( var_weekday == NULL )
        {
            Py_DECREF( tmp_tuple_element_5 );
            exception_type = PyExc_UnboundLocalError;
            Py_INCREF( exception_type );
            exception_value = PyUnicode_FromFormat( "local variable '%s' referenced before assignment", "weekday" );
            exception_tb = NULL;
            NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
            CHAIN_EXCEPTION( exception_value );

            exception_lineno = 566;
            type_description_1 = "oooooooooooooooooooooooooooooooooooooooboooo";
            goto frame_exception_exit_1;
        }

        tmp_tuple_element_6 = var_weekday;
        Py_INCREF( tmp_tuple_element_6 );
        PyTuple_SET_ITEM( tmp_tuple_element_5, 6, tmp_tuple_element_6 );
        if ( var_julian == NULL )
        {
            Py_DECREF( tmp_tuple_element_5 );
            exception_type = PyExc_UnboundLocalError;
            Py_INCREF( exception_type );
            exception_value = PyUnicode_FromFormat( "local variable '%s' referenced before assignment", "julian" );
            exception_tb = NULL;
            NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
            CHAIN_EXCEPTION( exception_value );

            exception_lineno = 566;
            type_description_1 = "oooooooooooooooooooooooooooooooooooooooboooo";
            goto frame_exception_exit_1;
        }

        tmp_tuple_element_6 = var_julian;
        Py_INCREF( tmp_tuple_element_6 );
        PyTuple_SET_ITEM( tmp_tuple_element_5, 7, tmp_tuple_element_6 );
        if ( var_tz == NULL )
        {
            Py_DECREF( tmp_tuple_element_5 );
            exception_type = PyExc_UnboundLocalError;
            Py_INCREF( exception_type );
            exception_value = PyUnicode_FromFormat( "local variable '%s' referenced before assignment", "tz" );
            exception_tb = NULL;
            NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
            CHAIN_EXCEPTION( exception_value );

            exception_lineno = 566;
            type_description_1 = "oooooooooooooooooooooooooooooooooooooooboooo";
            goto frame_exception_exit_1;
        }

        tmp_tuple_element_6 = var_tz;
        Py_INCREF( tmp_tuple_element_6 );
        PyTuple_SET_ITEM( tmp_tuple_element_5, 8, tmp_tuple_element_6 );
        CHECK_OBJECT( var_tzname );
        tmp_tuple_element_6 = var_tzname;
        Py_INCREF( tmp_tuple_element_6 );
        PyTuple_SET_ITEM( tmp_tuple_element_5, 9, tmp_tuple_element_6 );
        if ( var_gmtoff == NULL )
        {
            Py_DECREF( tmp_tuple_element_5 );
            exception_type = PyExc_UnboundLocalError;
            Py_INCREF( exception_type );
            exception_value = PyUnicode_FromFormat( "local variable '%s' referenced before assignment", "gmtoff" );
            exception_tb = NULL;
            NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
            CHAIN_EXCEPTION( exception_value );

            exception_lineno = 566;
            type_description_1 = "oooooooooooooooooooooooooooooooooooooooboooo";
            goto frame_exception_exit_1;
        }

        tmp_tuple_element_6 = var_gmtoff;
        Py_INCREF( tmp_tuple_element_6 );
        PyTuple_SET_ITEM( tmp_tuple_element_5, 10, tmp_tuple_element_6 );
        tmp_return_value = PyTuple_New( 3 );
        PyTuple_SET_ITEM( tmp_return_value, 0, tmp_tuple_element_5 );
        if ( var_fraction == NULL )
        {
            Py_DECREF( tmp_return_value );
            exception_type = PyExc_UnboundLocalError;
            Py_INCREF( exception_type );
            exception_value = PyUnicode_FromFormat( "local variable '%s' referenced before assignment", "fraction" );
            exception_tb = NULL;
            NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
            CHAIN_EXCEPTION( exception_value );

            exception_lineno = 566;
            type_description_1 = "oooooooooooooooooooooooooooooooooooooooboooo";
            goto frame_exception_exit_1;
        }

        tmp_tuple_element_5 = var_fraction;
        Py_INCREF( tmp_tuple_element_5 );
        PyTuple_SET_ITEM( tmp_return_value, 1, tmp_tuple_element_5 );
        if ( var_gmtoff_fraction == NULL )
        {
            Py_DECREF( tmp_return_value );
            exception_type = PyExc_UnboundLocalError;
            Py_INCREF( exception_type );
            exception_value = PyUnicode_FromFormat( "local variable '%s' referenced before assignment", "gmtoff_fraction" );
            exception_tb = NULL;
            NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
            CHAIN_EXCEPTION( exception_value );

            exception_lineno = 566;
            type_description_1 = "oooooooooooooooooooooooooooooooooooooooboooo";
            goto frame_exception_exit_1;
        }

        tmp_tuple_element_5 = var_gmtoff_fraction;
        Py_INCREF( tmp_tuple_element_5 );
        PyTuple_SET_ITEM( tmp_return_value, 2, tmp_tuple_element_5 );
        goto frame_return_exit_1;
    }

#if 0
    RESTORE_FRAME_EXCEPTION( frame_285d3548e213aa4c5d6aef1855a305f1 );
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto frame_no_exception_1;

    frame_return_exit_1:;
#if 0
    RESTORE_FRAME_EXCEPTION( frame_285d3548e213aa4c5d6aef1855a305f1 );
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto try_return_handler_1;

    frame_exception_exit_1:;

#if 0
    RESTORE_FRAME_EXCEPTION( frame_285d3548e213aa4c5d6aef1855a305f1 );
#endif

    if ( exception_tb == NULL )
    {
        exception_tb = MAKE_TRACEBACK( frame_285d3548e213aa4c5d6aef1855a305f1, exception_lineno );
    }
    else if ( exception_tb->tb_frame != &frame_285d3548e213aa4c5d6aef1855a305f1->m_frame )
    {
        exception_tb = ADD_TRACEBACK( exception_tb, frame_285d3548e213aa4c5d6aef1855a305f1, exception_lineno );
    }

    // Attachs locals to frame if any.
    Nuitka_Frame_AttachLocals(
        (struct Nuitka_FrameObject *)frame_285d3548e213aa4c5d6aef1855a305f1,
        type_description_1,
        par_data_string,
        par_format,
        var_index,
        var_arg,
        var_msg,
        var_locale_time,
        var_format_regex,
        var_err,
        var_bad_directive,
        var_found,
        var_iso_year,
        var_year,
        var_month,
        var_day,
        var_hour,
        var_minute,
        var_second,
        var_fraction,
        var_tz,
        var_gmtoff,
        var_gmtoff_fraction,
        var_iso_week,
        var_week_of_year,
        var_week_of_year_start,
        var_weekday,
        var_julian,
        var_found_dict,
        var_group_key,
        var_ampm,
        var_s,
        var_z,
        var_hours,
        var_minutes,
        var_seconds,
        var_gmtoff_remainder,
        var_gmtoff_remainder_padding,
        var_found_zone,
        var_value,
        var_tz_values,
        (int)var_leap_year_fix,
        var_week_starts_Mon,
        var_yday,
        var_datetime_result,
        var_tzname
    );


    // Release cached frame.
    if ( frame_285d3548e213aa4c5d6aef1855a305f1 == cache_frame_285d3548e213aa4c5d6aef1855a305f1 )
    {
        Py_DECREF( frame_285d3548e213aa4c5d6aef1855a305f1 );
    }
    cache_frame_285d3548e213aa4c5d6aef1855a305f1 = NULL;

    assertFrameObject( frame_285d3548e213aa4c5d6aef1855a305f1 );

    // Put the previous frame back on top.
    popFrameStack();

    // Return the error.
    goto try_except_handler_1;

    frame_no_exception_1:;
    // tried codes exits in all cases
    NUITKA_CANNOT_GET_HERE( _strptime$$$function_15__strptime );
    return NULL;
    // Return handler code:
    try_return_handler_1:;
    CHECK_OBJECT( (PyObject *)par_data_string );
    Py_DECREF( par_data_string );
    par_data_string = NULL;

    CHECK_OBJECT( (PyObject *)par_format );
    Py_DECREF( par_format );
    par_format = NULL;

    Py_XDECREF( var_index );
    var_index = NULL;

    Py_XDECREF( var_arg );
    var_arg = NULL;

    Py_XDECREF( var_msg );
    var_msg = NULL;

    Py_XDECREF( var_locale_time );
    var_locale_time = NULL;

    Py_XDECREF( var_format_regex );
    var_format_regex = NULL;

    Py_XDECREF( var_err );
    var_err = NULL;

    Py_XDECREF( var_bad_directive );
    var_bad_directive = NULL;

    CHECK_OBJECT( (PyObject *)var_found );
    Py_DECREF( var_found );
    var_found = NULL;

    Py_XDECREF( var_iso_year );
    var_iso_year = NULL;

    Py_XDECREF( var_year );
    var_year = NULL;

    Py_XDECREF( var_month );
    var_month = NULL;

    Py_XDECREF( var_day );
    var_day = NULL;

    Py_XDECREF( var_hour );
    var_hour = NULL;

    Py_XDECREF( var_minute );
    var_minute = NULL;

    Py_XDECREF( var_second );
    var_second = NULL;

    Py_XDECREF( var_fraction );
    var_fraction = NULL;

    Py_XDECREF( var_tz );
    var_tz = NULL;

    Py_XDECREF( var_gmtoff );
    var_gmtoff = NULL;

    Py_XDECREF( var_gmtoff_fraction );
    var_gmtoff_fraction = NULL;

    Py_XDECREF( var_iso_week );
    var_iso_week = NULL;

    Py_XDECREF( var_week_of_year );
    var_week_of_year = NULL;

    Py_XDECREF( var_week_of_year_start );
    var_week_of_year_start = NULL;

    Py_XDECREF( var_weekday );
    var_weekday = NULL;

    Py_XDECREF( var_julian );
    var_julian = NULL;

    CHECK_OBJECT( (PyObject *)var_found_dict );
    Py_DECREF( var_found_dict );
    var_found_dict = NULL;

    Py_XDECREF( var_group_key );
    var_group_key = NULL;

    Py_XDECREF( var_ampm );
    var_ampm = NULL;

    Py_XDECREF( var_s );
    var_s = NULL;

    Py_XDECREF( var_z );
    var_z = NULL;

    Py_XDECREF( var_hours );
    var_hours = NULL;

    Py_XDECREF( var_minutes );
    var_minutes = NULL;

    Py_XDECREF( var_seconds );
    var_seconds = NULL;

    Py_XDECREF( var_gmtoff_remainder );
    var_gmtoff_remainder = NULL;

    Py_XDECREF( var_gmtoff_remainder_padding );
    var_gmtoff_remainder_padding = NULL;

    Py_XDECREF( var_found_zone );
    var_found_zone = NULL;

    Py_XDECREF( var_value );
    var_value = NULL;

    Py_XDECREF( var_tz_values );
    var_tz_values = NULL;

    Py_XDECREF( var_week_starts_Mon );
    var_week_starts_Mon = NULL;

    Py_XDECREF( var_yday );
    var_yday = NULL;

    Py_XDECREF( var_datetime_result );
    var_datetime_result = NULL;

    CHECK_OBJECT( (PyObject *)var_tzname );
    Py_DECREF( var_tzname );
    var_tzname = NULL;

    goto function_return_exit;
    // Exception handler code:
    try_except_handler_1:;
    exception_keeper_type_17 = exception_type;
    exception_keeper_value_17 = exception_value;
    exception_keeper_tb_17 = exception_tb;
    exception_keeper_lineno_17 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    CHECK_OBJECT( (PyObject *)par_data_string );
    Py_DECREF( par_data_string );
    par_data_string = NULL;

    CHECK_OBJECT( (PyObject *)par_format );
    Py_DECREF( par_format );
    par_format = NULL;

    Py_XDECREF( var_index );
    var_index = NULL;

    Py_XDECREF( var_arg );
    var_arg = NULL;

    Py_XDECREF( var_msg );
    var_msg = NULL;

    Py_XDECREF( var_locale_time );
    var_locale_time = NULL;

    Py_XDECREF( var_format_regex );
    var_format_regex = NULL;

    Py_XDECREF( var_err );
    var_err = NULL;

    Py_XDECREF( var_bad_directive );
    var_bad_directive = NULL;

    Py_XDECREF( var_found );
    var_found = NULL;

    Py_XDECREF( var_iso_year );
    var_iso_year = NULL;

    Py_XDECREF( var_year );
    var_year = NULL;

    Py_XDECREF( var_month );
    var_month = NULL;

    Py_XDECREF( var_day );
    var_day = NULL;

    Py_XDECREF( var_hour );
    var_hour = NULL;

    Py_XDECREF( var_minute );
    var_minute = NULL;

    Py_XDECREF( var_second );
    var_second = NULL;

    Py_XDECREF( var_fraction );
    var_fraction = NULL;

    Py_XDECREF( var_tz );
    var_tz = NULL;

    Py_XDECREF( var_gmtoff );
    var_gmtoff = NULL;

    Py_XDECREF( var_gmtoff_fraction );
    var_gmtoff_fraction = NULL;

    Py_XDECREF( var_iso_week );
    var_iso_week = NULL;

    Py_XDECREF( var_week_of_year );
    var_week_of_year = NULL;

    Py_XDECREF( var_week_of_year_start );
    var_week_of_year_start = NULL;

    Py_XDECREF( var_weekday );
    var_weekday = NULL;

    Py_XDECREF( var_julian );
    var_julian = NULL;

    Py_XDECREF( var_found_dict );
    var_found_dict = NULL;

    Py_XDECREF( var_group_key );
    var_group_key = NULL;

    Py_XDECREF( var_ampm );
    var_ampm = NULL;

    Py_XDECREF( var_s );
    var_s = NULL;

    Py_XDECREF( var_z );
    var_z = NULL;

    Py_XDECREF( var_hours );
    var_hours = NULL;

    Py_XDECREF( var_minutes );
    var_minutes = NULL;

    Py_XDECREF( var_seconds );
    var_seconds = NULL;

    Py_XDECREF( var_gmtoff_remainder );
    var_gmtoff_remainder = NULL;

    Py_XDECREF( var_gmtoff_remainder_padding );
    var_gmtoff_remainder_padding = NULL;

    Py_XDECREF( var_found_zone );
    var_found_zone = NULL;

    Py_XDECREF( var_value );
    var_value = NULL;

    Py_XDECREF( var_tz_values );
    var_tz_values = NULL;

    Py_XDECREF( var_week_starts_Mon );
    var_week_starts_Mon = NULL;

    Py_XDECREF( var_yday );
    var_yday = NULL;

    Py_XDECREF( var_datetime_result );
    var_datetime_result = NULL;

    Py_XDECREF( var_tzname );
    var_tzname = NULL;

    // Re-raise.
    exception_type = exception_keeper_type_17;
    exception_value = exception_keeper_value_17;
    exception_tb = exception_keeper_tb_17;
    exception_lineno = exception_keeper_lineno_17;

    goto function_exception_exit;
    // End of try:

    // Return statement must have exited already.
    NUITKA_CANNOT_GET_HERE( _strptime$$$function_15__strptime );
    return NULL;

function_exception_exit:
    assert( exception_type );
    RESTORE_ERROR_OCCURRED( exception_type, exception_value, exception_tb );

    return NULL;

function_return_exit:
   // Function cleanup code if any.


   // Actual function exit with return value, making sure we did not make
   // the error status worse despite non-NULL return.
   CHECK_OBJECT( tmp_return_value );
   assert( had_error || !ERROR_OCCURRED() );
   return tmp_return_value;
}


static PyObject *impl__strptime$$$function_16__strptime_time( struct Nuitka_FunctionObject const *self, PyObject **python_pars )
{
    // Preserve error status for checks
#ifndef __NUITKA_NO_ASSERT__
    NUITKA_MAY_BE_UNUSED bool had_error = ERROR_OCCURRED();
#endif

    // Local variable declarations.
    PyObject *par_data_string = python_pars[ 0 ];
    PyObject *par_format = python_pars[ 1 ];
    PyObject *var_tt = NULL;
    struct Nuitka_FrameObject *frame_edff8205a2d414bbd7a00404a66b8323;
    NUITKA_MAY_BE_UNUSED char const *type_description_1 = NULL;
    PyObject *exception_type = NULL;
    PyObject *exception_value = NULL;
    PyTracebackObject *exception_tb = NULL;
    NUITKA_MAY_BE_UNUSED int exception_lineno = 0;
    PyObject *tmp_return_value = NULL;
    static struct Nuitka_FrameObject *cache_frame_edff8205a2d414bbd7a00404a66b8323 = NULL;
    PyObject *exception_keeper_type_1;
    PyObject *exception_keeper_value_1;
    PyTracebackObject *exception_keeper_tb_1;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_1;

    // Actual function body.
    // Tried code:
    MAKE_OR_REUSE_FRAME( cache_frame_edff8205a2d414bbd7a00404a66b8323, codeobj_edff8205a2d414bbd7a00404a66b8323, module__strptime, sizeof(void *)+sizeof(void *)+sizeof(void *) );
    frame_edff8205a2d414bbd7a00404a66b8323 = cache_frame_edff8205a2d414bbd7a00404a66b8323;

    // Push the new frame as the currently active one.
    pushFrameStack( frame_edff8205a2d414bbd7a00404a66b8323 );

    // Mark the frame object as in use, ref count 1 will be up for reuse.
    assert( Py_REFCNT( frame_edff8205a2d414bbd7a00404a66b8323 ) == 2 ); // Frame stack

    // Framed code:
    {
        PyObject *tmp_assign_source_1;
        PyObject *tmp_subscribed_name_1;
        PyObject *tmp_called_name_1;
        PyObject *tmp_mvar_value_1;
        PyObject *tmp_args_element_name_1;
        PyObject *tmp_args_element_name_2;
        PyObject *tmp_subscript_name_1;
        tmp_mvar_value_1 = GET_STRING_DICT_VALUE( moduledict__strptime, (Nuitka_StringObject *)const_str_plain__strptime );

        if (unlikely( tmp_mvar_value_1 == NULL ))
        {
            tmp_mvar_value_1 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain__strptime );
        }

        if ( tmp_mvar_value_1 == NULL )
        {

            exception_type = PyExc_NameError;
            Py_INCREF( exception_type );
            exception_value = PyUnicode_FromFormat( "name '%s' is not defined", "_strptime" );
            exception_tb = NULL;
            NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
            CHAIN_EXCEPTION( exception_value );

            exception_lineno = 571;
            type_description_1 = "ooo";
            goto frame_exception_exit_1;
        }

        tmp_called_name_1 = tmp_mvar_value_1;
        CHECK_OBJECT( par_data_string );
        tmp_args_element_name_1 = par_data_string;
        CHECK_OBJECT( par_format );
        tmp_args_element_name_2 = par_format;
        frame_edff8205a2d414bbd7a00404a66b8323->m_frame.f_lineno = 571;
        {
            PyObject *call_args[] = { tmp_args_element_name_1, tmp_args_element_name_2 };
            tmp_subscribed_name_1 = CALL_FUNCTION_WITH_ARGS2( tmp_called_name_1, call_args );
        }

        if ( tmp_subscribed_name_1 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 571;
            type_description_1 = "ooo";
            goto frame_exception_exit_1;
        }
        tmp_subscript_name_1 = const_int_0;
        tmp_assign_source_1 = LOOKUP_SUBSCRIPT_CONST( tmp_subscribed_name_1, tmp_subscript_name_1, 0 );
        Py_DECREF( tmp_subscribed_name_1 );
        if ( tmp_assign_source_1 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 571;
            type_description_1 = "ooo";
            goto frame_exception_exit_1;
        }
        assert( var_tt == NULL );
        var_tt = tmp_assign_source_1;
    }
    {
        PyObject *tmp_called_name_2;
        PyObject *tmp_source_name_1;
        PyObject *tmp_mvar_value_2;
        PyObject *tmp_args_element_name_3;
        PyObject *tmp_subscribed_name_2;
        PyObject *tmp_subscript_name_2;
        PyObject *tmp_start_name_1;
        PyObject *tmp_stop_name_1;
        PyObject *tmp_source_name_2;
        PyObject *tmp_mvar_value_3;
        PyObject *tmp_step_name_1;
        tmp_mvar_value_2 = GET_STRING_DICT_VALUE( moduledict__strptime, (Nuitka_StringObject *)const_str_plain_time );

        if (unlikely( tmp_mvar_value_2 == NULL ))
        {
            tmp_mvar_value_2 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_time );
        }

        if ( tmp_mvar_value_2 == NULL )
        {

            exception_type = PyExc_NameError;
            Py_INCREF( exception_type );
            exception_value = PyUnicode_FromFormat( "name '%s' is not defined", "time" );
            exception_tb = NULL;
            NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
            CHAIN_EXCEPTION( exception_value );

            exception_lineno = 572;
            type_description_1 = "ooo";
            goto frame_exception_exit_1;
        }

        tmp_source_name_1 = tmp_mvar_value_2;
        tmp_called_name_2 = LOOKUP_ATTRIBUTE( tmp_source_name_1, const_str_plain_struct_time );
        if ( tmp_called_name_2 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 572;
            type_description_1 = "ooo";
            goto frame_exception_exit_1;
        }
        CHECK_OBJECT( var_tt );
        tmp_subscribed_name_2 = var_tt;
        tmp_start_name_1 = Py_None;
        tmp_mvar_value_3 = GET_STRING_DICT_VALUE( moduledict__strptime, (Nuitka_StringObject *)const_str_plain_time );

        if (unlikely( tmp_mvar_value_3 == NULL ))
        {
            tmp_mvar_value_3 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_time );
        }

        if ( tmp_mvar_value_3 == NULL )
        {
            Py_DECREF( tmp_called_name_2 );
            exception_type = PyExc_NameError;
            Py_INCREF( exception_type );
            exception_value = PyUnicode_FromFormat( "name '%s' is not defined", "time" );
            exception_tb = NULL;
            NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
            CHAIN_EXCEPTION( exception_value );

            exception_lineno = 572;
            type_description_1 = "ooo";
            goto frame_exception_exit_1;
        }

        tmp_source_name_2 = tmp_mvar_value_3;
        tmp_stop_name_1 = LOOKUP_ATTRIBUTE( tmp_source_name_2, const_str_plain__STRUCT_TM_ITEMS );
        if ( tmp_stop_name_1 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
            Py_DECREF( tmp_called_name_2 );

            exception_lineno = 572;
            type_description_1 = "ooo";
            goto frame_exception_exit_1;
        }
        tmp_step_name_1 = Py_None;
        tmp_subscript_name_2 = MAKE_SLICEOBJ3( tmp_start_name_1, tmp_stop_name_1, tmp_step_name_1 );
        Py_DECREF( tmp_stop_name_1 );
        assert( !(tmp_subscript_name_2 == NULL) );
        tmp_args_element_name_3 = LOOKUP_SUBSCRIPT( tmp_subscribed_name_2, tmp_subscript_name_2 );
        Py_DECREF( tmp_subscript_name_2 );
        if ( tmp_args_element_name_3 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
            Py_DECREF( tmp_called_name_2 );

            exception_lineno = 572;
            type_description_1 = "ooo";
            goto frame_exception_exit_1;
        }
        frame_edff8205a2d414bbd7a00404a66b8323->m_frame.f_lineno = 572;
        {
            PyObject *call_args[] = { tmp_args_element_name_3 };
            tmp_return_value = CALL_FUNCTION_WITH_ARGS1( tmp_called_name_2, call_args );
        }

        Py_DECREF( tmp_called_name_2 );
        Py_DECREF( tmp_args_element_name_3 );
        if ( tmp_return_value == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 572;
            type_description_1 = "ooo";
            goto frame_exception_exit_1;
        }
        goto frame_return_exit_1;
    }

#if 0
    RESTORE_FRAME_EXCEPTION( frame_edff8205a2d414bbd7a00404a66b8323 );
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto frame_no_exception_1;

    frame_return_exit_1:;
#if 0
    RESTORE_FRAME_EXCEPTION( frame_edff8205a2d414bbd7a00404a66b8323 );
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto try_return_handler_1;

    frame_exception_exit_1:;

#if 0
    RESTORE_FRAME_EXCEPTION( frame_edff8205a2d414bbd7a00404a66b8323 );
#endif

    if ( exception_tb == NULL )
    {
        exception_tb = MAKE_TRACEBACK( frame_edff8205a2d414bbd7a00404a66b8323, exception_lineno );
    }
    else if ( exception_tb->tb_frame != &frame_edff8205a2d414bbd7a00404a66b8323->m_frame )
    {
        exception_tb = ADD_TRACEBACK( exception_tb, frame_edff8205a2d414bbd7a00404a66b8323, exception_lineno );
    }

    // Attachs locals to frame if any.
    Nuitka_Frame_AttachLocals(
        (struct Nuitka_FrameObject *)frame_edff8205a2d414bbd7a00404a66b8323,
        type_description_1,
        par_data_string,
        par_format,
        var_tt
    );


    // Release cached frame.
    if ( frame_edff8205a2d414bbd7a00404a66b8323 == cache_frame_edff8205a2d414bbd7a00404a66b8323 )
    {
        Py_DECREF( frame_edff8205a2d414bbd7a00404a66b8323 );
    }
    cache_frame_edff8205a2d414bbd7a00404a66b8323 = NULL;

    assertFrameObject( frame_edff8205a2d414bbd7a00404a66b8323 );

    // Put the previous frame back on top.
    popFrameStack();

    // Return the error.
    goto try_except_handler_1;

    frame_no_exception_1:;
    // tried codes exits in all cases
    NUITKA_CANNOT_GET_HERE( _strptime$$$function_16__strptime_time );
    return NULL;
    // Return handler code:
    try_return_handler_1:;
    CHECK_OBJECT( (PyObject *)par_data_string );
    Py_DECREF( par_data_string );
    par_data_string = NULL;

    CHECK_OBJECT( (PyObject *)par_format );
    Py_DECREF( par_format );
    par_format = NULL;

    CHECK_OBJECT( (PyObject *)var_tt );
    Py_DECREF( var_tt );
    var_tt = NULL;

    goto function_return_exit;
    // Exception handler code:
    try_except_handler_1:;
    exception_keeper_type_1 = exception_type;
    exception_keeper_value_1 = exception_value;
    exception_keeper_tb_1 = exception_tb;
    exception_keeper_lineno_1 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    CHECK_OBJECT( (PyObject *)par_data_string );
    Py_DECREF( par_data_string );
    par_data_string = NULL;

    CHECK_OBJECT( (PyObject *)par_format );
    Py_DECREF( par_format );
    par_format = NULL;

    Py_XDECREF( var_tt );
    var_tt = NULL;

    // Re-raise.
    exception_type = exception_keeper_type_1;
    exception_value = exception_keeper_value_1;
    exception_tb = exception_keeper_tb_1;
    exception_lineno = exception_keeper_lineno_1;

    goto function_exception_exit;
    // End of try:

    // Return statement must have exited already.
    NUITKA_CANNOT_GET_HERE( _strptime$$$function_16__strptime_time );
    return NULL;

function_exception_exit:
    assert( exception_type );
    RESTORE_ERROR_OCCURRED( exception_type, exception_value, exception_tb );

    return NULL;

function_return_exit:
   // Function cleanup code if any.


   // Actual function exit with return value, making sure we did not make
   // the error status worse despite non-NULL return.
   CHECK_OBJECT( tmp_return_value );
   assert( had_error || !ERROR_OCCURRED() );
   return tmp_return_value;
}


static PyObject *impl__strptime$$$function_17__strptime_datetime( struct Nuitka_FunctionObject const *self, PyObject **python_pars )
{
    // Preserve error status for checks
#ifndef __NUITKA_NO_ASSERT__
    NUITKA_MAY_BE_UNUSED bool had_error = ERROR_OCCURRED();
#endif

    // Local variable declarations.
    PyObject *par_cls = python_pars[ 0 ];
    PyObject *par_data_string = python_pars[ 1 ];
    PyObject *par_format = python_pars[ 2 ];
    PyObject *var_tt = NULL;
    PyObject *var_fraction = NULL;
    PyObject *var_gmtoff_fraction = NULL;
    PyObject *var_tzname = NULL;
    PyObject *var_gmtoff = NULL;
    PyObject *var_args = NULL;
    PyObject *var_tzdelta = NULL;
    PyObject *var_tz = NULL;
    PyObject *tmp_tuple_unpack_1__element_1 = NULL;
    PyObject *tmp_tuple_unpack_1__element_2 = NULL;
    PyObject *tmp_tuple_unpack_1__element_3 = NULL;
    PyObject *tmp_tuple_unpack_1__source_iter = NULL;
    PyObject *tmp_tuple_unpack_2__element_1 = NULL;
    PyObject *tmp_tuple_unpack_2__element_2 = NULL;
    PyObject *tmp_tuple_unpack_2__source_iter = NULL;
    struct Nuitka_FrameObject *frame_c6a98338e308194720e568c3cff013c2;
    NUITKA_MAY_BE_UNUSED char const *type_description_1 = NULL;
    PyObject *exception_type = NULL;
    PyObject *exception_value = NULL;
    PyTracebackObject *exception_tb = NULL;
    NUITKA_MAY_BE_UNUSED int exception_lineno = 0;
    PyObject *tmp_iterator_attempt;
    PyObject *exception_keeper_type_1;
    PyObject *exception_keeper_value_1;
    PyTracebackObject *exception_keeper_tb_1;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_1;
    PyObject *exception_keeper_type_2;
    PyObject *exception_keeper_value_2;
    PyTracebackObject *exception_keeper_tb_2;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_2;
    PyObject *exception_keeper_type_3;
    PyObject *exception_keeper_value_3;
    PyTracebackObject *exception_keeper_tb_3;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_3;
    PyObject *exception_keeper_type_4;
    PyObject *exception_keeper_value_4;
    PyTracebackObject *exception_keeper_tb_4;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_4;
    int tmp_res;
    bool tmp_result;
    PyObject *tmp_return_value = NULL;
    static struct Nuitka_FrameObject *cache_frame_c6a98338e308194720e568c3cff013c2 = NULL;
    PyObject *exception_keeper_type_5;
    PyObject *exception_keeper_value_5;
    PyTracebackObject *exception_keeper_tb_5;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_5;

    // Actual function body.
    // Tried code:
    MAKE_OR_REUSE_FRAME( cache_frame_c6a98338e308194720e568c3cff013c2, codeobj_c6a98338e308194720e568c3cff013c2, module__strptime, sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *) );
    frame_c6a98338e308194720e568c3cff013c2 = cache_frame_c6a98338e308194720e568c3cff013c2;

    // Push the new frame as the currently active one.
    pushFrameStack( frame_c6a98338e308194720e568c3cff013c2 );

    // Mark the frame object as in use, ref count 1 will be up for reuse.
    assert( Py_REFCNT( frame_c6a98338e308194720e568c3cff013c2 ) == 2 ); // Frame stack

    // Framed code:
    // Tried code:
    {
        PyObject *tmp_assign_source_1;
        PyObject *tmp_iter_arg_1;
        PyObject *tmp_called_name_1;
        PyObject *tmp_mvar_value_1;
        PyObject *tmp_args_element_name_1;
        PyObject *tmp_args_element_name_2;
        tmp_mvar_value_1 = GET_STRING_DICT_VALUE( moduledict__strptime, (Nuitka_StringObject *)const_str_plain__strptime );

        if (unlikely( tmp_mvar_value_1 == NULL ))
        {
            tmp_mvar_value_1 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain__strptime );
        }

        if ( tmp_mvar_value_1 == NULL )
        {

            exception_type = PyExc_NameError;
            Py_INCREF( exception_type );
            exception_value = PyUnicode_FromFormat( "name '%s' is not defined", "_strptime" );
            exception_tb = NULL;
            NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
            CHAIN_EXCEPTION( exception_value );

            exception_lineno = 577;
            type_description_1 = "ooooooooooo";
            goto try_except_handler_2;
        }

        tmp_called_name_1 = tmp_mvar_value_1;
        CHECK_OBJECT( par_data_string );
        tmp_args_element_name_1 = par_data_string;
        CHECK_OBJECT( par_format );
        tmp_args_element_name_2 = par_format;
        frame_c6a98338e308194720e568c3cff013c2->m_frame.f_lineno = 577;
        {
            PyObject *call_args[] = { tmp_args_element_name_1, tmp_args_element_name_2 };
            tmp_iter_arg_1 = CALL_FUNCTION_WITH_ARGS2( tmp_called_name_1, call_args );
        }

        if ( tmp_iter_arg_1 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 577;
            type_description_1 = "ooooooooooo";
            goto try_except_handler_2;
        }
        tmp_assign_source_1 = MAKE_UNPACK_ITERATOR( tmp_iter_arg_1 );
        Py_DECREF( tmp_iter_arg_1 );
        if ( tmp_assign_source_1 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 577;
            type_description_1 = "ooooooooooo";
            goto try_except_handler_2;
        }
        assert( tmp_tuple_unpack_1__source_iter == NULL );
        tmp_tuple_unpack_1__source_iter = tmp_assign_source_1;
    }
    // Tried code:
    {
        PyObject *tmp_assign_source_2;
        PyObject *tmp_unpack_1;
        CHECK_OBJECT( tmp_tuple_unpack_1__source_iter );
        tmp_unpack_1 = tmp_tuple_unpack_1__source_iter;
        tmp_assign_source_2 = UNPACK_NEXT( tmp_unpack_1, 0, 3 );
        if ( tmp_assign_source_2 == NULL )
        {
            if ( !ERROR_OCCURRED() )
            {
                exception_type = PyExc_StopIteration;
                Py_INCREF( exception_type );
                exception_value = NULL;
                exception_tb = NULL;
            }
            else
            {
                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
            }


            type_description_1 = "ooooooooooo";
            exception_lineno = 577;
            goto try_except_handler_3;
        }
        assert( tmp_tuple_unpack_1__element_1 == NULL );
        tmp_tuple_unpack_1__element_1 = tmp_assign_source_2;
    }
    {
        PyObject *tmp_assign_source_3;
        PyObject *tmp_unpack_2;
        CHECK_OBJECT( tmp_tuple_unpack_1__source_iter );
        tmp_unpack_2 = tmp_tuple_unpack_1__source_iter;
        tmp_assign_source_3 = UNPACK_NEXT( tmp_unpack_2, 1, 3 );
        if ( tmp_assign_source_3 == NULL )
        {
            if ( !ERROR_OCCURRED() )
            {
                exception_type = PyExc_StopIteration;
                Py_INCREF( exception_type );
                exception_value = NULL;
                exception_tb = NULL;
            }
            else
            {
                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
            }


            type_description_1 = "ooooooooooo";
            exception_lineno = 577;
            goto try_except_handler_3;
        }
        assert( tmp_tuple_unpack_1__element_2 == NULL );
        tmp_tuple_unpack_1__element_2 = tmp_assign_source_3;
    }
    {
        PyObject *tmp_assign_source_4;
        PyObject *tmp_unpack_3;
        CHECK_OBJECT( tmp_tuple_unpack_1__source_iter );
        tmp_unpack_3 = tmp_tuple_unpack_1__source_iter;
        tmp_assign_source_4 = UNPACK_NEXT( tmp_unpack_3, 2, 3 );
        if ( tmp_assign_source_4 == NULL )
        {
            if ( !ERROR_OCCURRED() )
            {
                exception_type = PyExc_StopIteration;
                Py_INCREF( exception_type );
                exception_value = NULL;
                exception_tb = NULL;
            }
            else
            {
                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
            }


            type_description_1 = "ooooooooooo";
            exception_lineno = 577;
            goto try_except_handler_3;
        }
        assert( tmp_tuple_unpack_1__element_3 == NULL );
        tmp_tuple_unpack_1__element_3 = tmp_assign_source_4;
    }
    {
        PyObject *tmp_iterator_name_1;
        CHECK_OBJECT( tmp_tuple_unpack_1__source_iter );
        tmp_iterator_name_1 = tmp_tuple_unpack_1__source_iter;
        // Check if iterator has left-over elements.
        CHECK_OBJECT( tmp_iterator_name_1 ); assert( HAS_ITERNEXT( tmp_iterator_name_1 ) );

        tmp_iterator_attempt = (*Py_TYPE( tmp_iterator_name_1 )->tp_iternext)( tmp_iterator_name_1 );

        if (likely( tmp_iterator_attempt == NULL ))
        {
            PyObject *error = GET_ERROR_OCCURRED();

            if ( error != NULL )
            {
                if ( EXCEPTION_MATCH_BOOL_SINGLE( error, PyExc_StopIteration ))
                {
                    CLEAR_ERROR_OCCURRED();
                }
                else
                {
                    FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );

                    type_description_1 = "ooooooooooo";
                    exception_lineno = 577;
                    goto try_except_handler_3;
                }
            }
        }
        else
        {
            Py_DECREF( tmp_iterator_attempt );

            // TODO: Could avoid PyErr_Format.
#if PYTHON_VERSION < 300
            PyErr_Format( PyExc_ValueError, "too many values to unpack" );
#else
            PyErr_Format( PyExc_ValueError, "too many values to unpack (expected 3)" );
#endif
            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );

            type_description_1 = "ooooooooooo";
            exception_lineno = 577;
            goto try_except_handler_3;
        }
    }
    goto try_end_1;
    // Exception handler code:
    try_except_handler_3:;
    exception_keeper_type_1 = exception_type;
    exception_keeper_value_1 = exception_value;
    exception_keeper_tb_1 = exception_tb;
    exception_keeper_lineno_1 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    CHECK_OBJECT( (PyObject *)tmp_tuple_unpack_1__source_iter );
    Py_DECREF( tmp_tuple_unpack_1__source_iter );
    tmp_tuple_unpack_1__source_iter = NULL;

    // Re-raise.
    exception_type = exception_keeper_type_1;
    exception_value = exception_keeper_value_1;
    exception_tb = exception_keeper_tb_1;
    exception_lineno = exception_keeper_lineno_1;

    goto try_except_handler_2;
    // End of try:
    try_end_1:;
    goto try_end_2;
    // Exception handler code:
    try_except_handler_2:;
    exception_keeper_type_2 = exception_type;
    exception_keeper_value_2 = exception_value;
    exception_keeper_tb_2 = exception_tb;
    exception_keeper_lineno_2 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    Py_XDECREF( tmp_tuple_unpack_1__element_1 );
    tmp_tuple_unpack_1__element_1 = NULL;

    Py_XDECREF( tmp_tuple_unpack_1__element_2 );
    tmp_tuple_unpack_1__element_2 = NULL;

    Py_XDECREF( tmp_tuple_unpack_1__element_3 );
    tmp_tuple_unpack_1__element_3 = NULL;

    // Re-raise.
    exception_type = exception_keeper_type_2;
    exception_value = exception_keeper_value_2;
    exception_tb = exception_keeper_tb_2;
    exception_lineno = exception_keeper_lineno_2;

    goto frame_exception_exit_1;
    // End of try:
    try_end_2:;
    CHECK_OBJECT( (PyObject *)tmp_tuple_unpack_1__source_iter );
    Py_DECREF( tmp_tuple_unpack_1__source_iter );
    tmp_tuple_unpack_1__source_iter = NULL;

    {
        PyObject *tmp_assign_source_5;
        CHECK_OBJECT( tmp_tuple_unpack_1__element_1 );
        tmp_assign_source_5 = tmp_tuple_unpack_1__element_1;
        assert( var_tt == NULL );
        Py_INCREF( tmp_assign_source_5 );
        var_tt = tmp_assign_source_5;
    }
    Py_XDECREF( tmp_tuple_unpack_1__element_1 );
    tmp_tuple_unpack_1__element_1 = NULL;

    {
        PyObject *tmp_assign_source_6;
        CHECK_OBJECT( tmp_tuple_unpack_1__element_2 );
        tmp_assign_source_6 = tmp_tuple_unpack_1__element_2;
        assert( var_fraction == NULL );
        Py_INCREF( tmp_assign_source_6 );
        var_fraction = tmp_assign_source_6;
    }
    Py_XDECREF( tmp_tuple_unpack_1__element_2 );
    tmp_tuple_unpack_1__element_2 = NULL;

    {
        PyObject *tmp_assign_source_7;
        CHECK_OBJECT( tmp_tuple_unpack_1__element_3 );
        tmp_assign_source_7 = tmp_tuple_unpack_1__element_3;
        assert( var_gmtoff_fraction == NULL );
        Py_INCREF( tmp_assign_source_7 );
        var_gmtoff_fraction = tmp_assign_source_7;
    }
    Py_XDECREF( tmp_tuple_unpack_1__element_3 );
    tmp_tuple_unpack_1__element_3 = NULL;

    // Tried code:
    {
        PyObject *tmp_assign_source_8;
        PyObject *tmp_iter_arg_2;
        PyObject *tmp_subscribed_name_1;
        PyObject *tmp_subscript_name_1;
        CHECK_OBJECT( var_tt );
        tmp_subscribed_name_1 = var_tt;
        tmp_subscript_name_1 = const_slice_int_neg_2_none_none;
        tmp_iter_arg_2 = LOOKUP_SUBSCRIPT( tmp_subscribed_name_1, tmp_subscript_name_1 );
        if ( tmp_iter_arg_2 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 578;
            type_description_1 = "ooooooooooo";
            goto try_except_handler_4;
        }
        tmp_assign_source_8 = MAKE_UNPACK_ITERATOR( tmp_iter_arg_2 );
        Py_DECREF( tmp_iter_arg_2 );
        if ( tmp_assign_source_8 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 578;
            type_description_1 = "ooooooooooo";
            goto try_except_handler_4;
        }
        assert( tmp_tuple_unpack_2__source_iter == NULL );
        tmp_tuple_unpack_2__source_iter = tmp_assign_source_8;
    }
    // Tried code:
    {
        PyObject *tmp_assign_source_9;
        PyObject *tmp_unpack_4;
        CHECK_OBJECT( tmp_tuple_unpack_2__source_iter );
        tmp_unpack_4 = tmp_tuple_unpack_2__source_iter;
        tmp_assign_source_9 = UNPACK_NEXT( tmp_unpack_4, 0, 2 );
        if ( tmp_assign_source_9 == NULL )
        {
            if ( !ERROR_OCCURRED() )
            {
                exception_type = PyExc_StopIteration;
                Py_INCREF( exception_type );
                exception_value = NULL;
                exception_tb = NULL;
            }
            else
            {
                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
            }


            type_description_1 = "ooooooooooo";
            exception_lineno = 578;
            goto try_except_handler_5;
        }
        assert( tmp_tuple_unpack_2__element_1 == NULL );
        tmp_tuple_unpack_2__element_1 = tmp_assign_source_9;
    }
    {
        PyObject *tmp_assign_source_10;
        PyObject *tmp_unpack_5;
        CHECK_OBJECT( tmp_tuple_unpack_2__source_iter );
        tmp_unpack_5 = tmp_tuple_unpack_2__source_iter;
        tmp_assign_source_10 = UNPACK_NEXT( tmp_unpack_5, 1, 2 );
        if ( tmp_assign_source_10 == NULL )
        {
            if ( !ERROR_OCCURRED() )
            {
                exception_type = PyExc_StopIteration;
                Py_INCREF( exception_type );
                exception_value = NULL;
                exception_tb = NULL;
            }
            else
            {
                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
            }


            type_description_1 = "ooooooooooo";
            exception_lineno = 578;
            goto try_except_handler_5;
        }
        assert( tmp_tuple_unpack_2__element_2 == NULL );
        tmp_tuple_unpack_2__element_2 = tmp_assign_source_10;
    }
    {
        PyObject *tmp_iterator_name_2;
        CHECK_OBJECT( tmp_tuple_unpack_2__source_iter );
        tmp_iterator_name_2 = tmp_tuple_unpack_2__source_iter;
        // Check if iterator has left-over elements.
        CHECK_OBJECT( tmp_iterator_name_2 ); assert( HAS_ITERNEXT( tmp_iterator_name_2 ) );

        tmp_iterator_attempt = (*Py_TYPE( tmp_iterator_name_2 )->tp_iternext)( tmp_iterator_name_2 );

        if (likely( tmp_iterator_attempt == NULL ))
        {
            PyObject *error = GET_ERROR_OCCURRED();

            if ( error != NULL )
            {
                if ( EXCEPTION_MATCH_BOOL_SINGLE( error, PyExc_StopIteration ))
                {
                    CLEAR_ERROR_OCCURRED();
                }
                else
                {
                    FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );

                    type_description_1 = "ooooooooooo";
                    exception_lineno = 578;
                    goto try_except_handler_5;
                }
            }
        }
        else
        {
            Py_DECREF( tmp_iterator_attempt );

            // TODO: Could avoid PyErr_Format.
#if PYTHON_VERSION < 300
            PyErr_Format( PyExc_ValueError, "too many values to unpack" );
#else
            PyErr_Format( PyExc_ValueError, "too many values to unpack (expected 2)" );
#endif
            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );

            type_description_1 = "ooooooooooo";
            exception_lineno = 578;
            goto try_except_handler_5;
        }
    }
    goto try_end_3;
    // Exception handler code:
    try_except_handler_5:;
    exception_keeper_type_3 = exception_type;
    exception_keeper_value_3 = exception_value;
    exception_keeper_tb_3 = exception_tb;
    exception_keeper_lineno_3 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    CHECK_OBJECT( (PyObject *)tmp_tuple_unpack_2__source_iter );
    Py_DECREF( tmp_tuple_unpack_2__source_iter );
    tmp_tuple_unpack_2__source_iter = NULL;

    // Re-raise.
    exception_type = exception_keeper_type_3;
    exception_value = exception_keeper_value_3;
    exception_tb = exception_keeper_tb_3;
    exception_lineno = exception_keeper_lineno_3;

    goto try_except_handler_4;
    // End of try:
    try_end_3:;
    goto try_end_4;
    // Exception handler code:
    try_except_handler_4:;
    exception_keeper_type_4 = exception_type;
    exception_keeper_value_4 = exception_value;
    exception_keeper_tb_4 = exception_tb;
    exception_keeper_lineno_4 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    Py_XDECREF( tmp_tuple_unpack_2__element_1 );
    tmp_tuple_unpack_2__element_1 = NULL;

    Py_XDECREF( tmp_tuple_unpack_2__element_2 );
    tmp_tuple_unpack_2__element_2 = NULL;

    // Re-raise.
    exception_type = exception_keeper_type_4;
    exception_value = exception_keeper_value_4;
    exception_tb = exception_keeper_tb_4;
    exception_lineno = exception_keeper_lineno_4;

    goto frame_exception_exit_1;
    // End of try:
    try_end_4:;
    CHECK_OBJECT( (PyObject *)tmp_tuple_unpack_2__source_iter );
    Py_DECREF( tmp_tuple_unpack_2__source_iter );
    tmp_tuple_unpack_2__source_iter = NULL;

    {
        PyObject *tmp_assign_source_11;
        CHECK_OBJECT( tmp_tuple_unpack_2__element_1 );
        tmp_assign_source_11 = tmp_tuple_unpack_2__element_1;
        assert( var_tzname == NULL );
        Py_INCREF( tmp_assign_source_11 );
        var_tzname = tmp_assign_source_11;
    }
    Py_XDECREF( tmp_tuple_unpack_2__element_1 );
    tmp_tuple_unpack_2__element_1 = NULL;

    {
        PyObject *tmp_assign_source_12;
        CHECK_OBJECT( tmp_tuple_unpack_2__element_2 );
        tmp_assign_source_12 = tmp_tuple_unpack_2__element_2;
        assert( var_gmtoff == NULL );
        Py_INCREF( tmp_assign_source_12 );
        var_gmtoff = tmp_assign_source_12;
    }
    Py_XDECREF( tmp_tuple_unpack_2__element_2 );
    tmp_tuple_unpack_2__element_2 = NULL;

    {
        PyObject *tmp_assign_source_13;
        PyObject *tmp_left_name_1;
        PyObject *tmp_subscribed_name_2;
        PyObject *tmp_subscript_name_2;
        PyObject *tmp_right_name_1;
        PyObject *tmp_tuple_element_1;
        CHECK_OBJECT( var_tt );
        tmp_subscribed_name_2 = var_tt;
        tmp_subscript_name_2 = const_slice_none_int_pos_6_none;
        tmp_left_name_1 = LOOKUP_SUBSCRIPT( tmp_subscribed_name_2, tmp_subscript_name_2 );
        if ( tmp_left_name_1 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 579;
            type_description_1 = "ooooooooooo";
            goto frame_exception_exit_1;
        }
        CHECK_OBJECT( var_fraction );
        tmp_tuple_element_1 = var_fraction;
        tmp_right_name_1 = PyTuple_New( 1 );
        Py_INCREF( tmp_tuple_element_1 );
        PyTuple_SET_ITEM( tmp_right_name_1, 0, tmp_tuple_element_1 );
        tmp_assign_source_13 = BINARY_OPERATION_ADD_OBJECT_TUPLE( tmp_left_name_1, tmp_right_name_1 );
        Py_DECREF( tmp_left_name_1 );
        Py_DECREF( tmp_right_name_1 );
        if ( tmp_assign_source_13 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 579;
            type_description_1 = "ooooooooooo";
            goto frame_exception_exit_1;
        }
        assert( var_args == NULL );
        var_args = tmp_assign_source_13;
    }
    {
        nuitka_bool tmp_condition_result_1;
        PyObject *tmp_compexpr_left_1;
        PyObject *tmp_compexpr_right_1;
        CHECK_OBJECT( var_gmtoff );
        tmp_compexpr_left_1 = var_gmtoff;
        tmp_compexpr_right_1 = Py_None;
        tmp_condition_result_1 = ( tmp_compexpr_left_1 != tmp_compexpr_right_1 ) ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
        if ( tmp_condition_result_1 == NUITKA_BOOL_TRUE )
        {
            goto branch_yes_1;
        }
        else
        {
            goto branch_no_1;
        }
        branch_yes_1:;
        {
            PyObject *tmp_assign_source_14;
            PyObject *tmp_called_name_2;
            PyObject *tmp_mvar_value_2;
            PyObject *tmp_kw_name_1;
            PyObject *tmp_dict_key_1;
            PyObject *tmp_dict_value_1;
            PyObject *tmp_dict_key_2;
            PyObject *tmp_dict_value_2;
            tmp_mvar_value_2 = GET_STRING_DICT_VALUE( moduledict__strptime, (Nuitka_StringObject *)const_str_plain_datetime_timedelta );

            if (unlikely( tmp_mvar_value_2 == NULL ))
            {
                tmp_mvar_value_2 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_datetime_timedelta );
            }

            if ( tmp_mvar_value_2 == NULL )
            {

                exception_type = PyExc_NameError;
                Py_INCREF( exception_type );
                exception_value = PyUnicode_FromFormat( "name '%s' is not defined", "datetime_timedelta" );
                exception_tb = NULL;
                NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
                CHAIN_EXCEPTION( exception_value );

                exception_lineno = 581;
                type_description_1 = "ooooooooooo";
                goto frame_exception_exit_1;
            }

            tmp_called_name_2 = tmp_mvar_value_2;
            tmp_dict_key_1 = const_str_plain_seconds;
            CHECK_OBJECT( var_gmtoff );
            tmp_dict_value_1 = var_gmtoff;
            tmp_kw_name_1 = _PyDict_NewPresized( 2 );
            tmp_res = PyDict_SetItem( tmp_kw_name_1, tmp_dict_key_1, tmp_dict_value_1 );
            assert( !(tmp_res != 0) );
            tmp_dict_key_2 = const_str_plain_microseconds;
            CHECK_OBJECT( var_gmtoff_fraction );
            tmp_dict_value_2 = var_gmtoff_fraction;
            tmp_res = PyDict_SetItem( tmp_kw_name_1, tmp_dict_key_2, tmp_dict_value_2 );
            assert( !(tmp_res != 0) );
            frame_c6a98338e308194720e568c3cff013c2->m_frame.f_lineno = 581;
            tmp_assign_source_14 = CALL_FUNCTION_WITH_KEYARGS( tmp_called_name_2, tmp_kw_name_1 );
            Py_DECREF( tmp_kw_name_1 );
            if ( tmp_assign_source_14 == NULL )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 581;
                type_description_1 = "ooooooooooo";
                goto frame_exception_exit_1;
            }
            assert( var_tzdelta == NULL );
            var_tzdelta = tmp_assign_source_14;
        }
        {
            nuitka_bool tmp_condition_result_2;
            int tmp_truth_name_1;
            CHECK_OBJECT( var_tzname );
            tmp_truth_name_1 = CHECK_IF_TRUE( var_tzname );
            if ( tmp_truth_name_1 == -1 )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 582;
                type_description_1 = "ooooooooooo";
                goto frame_exception_exit_1;
            }
            tmp_condition_result_2 = tmp_truth_name_1 == 1 ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
            if ( tmp_condition_result_2 == NUITKA_BOOL_TRUE )
            {
                goto branch_yes_2;
            }
            else
            {
                goto branch_no_2;
            }
            branch_yes_2:;
            {
                PyObject *tmp_assign_source_15;
                PyObject *tmp_called_name_3;
                PyObject *tmp_mvar_value_3;
                PyObject *tmp_args_element_name_3;
                PyObject *tmp_args_element_name_4;
                tmp_mvar_value_3 = GET_STRING_DICT_VALUE( moduledict__strptime, (Nuitka_StringObject *)const_str_plain_datetime_timezone );

                if (unlikely( tmp_mvar_value_3 == NULL ))
                {
                    tmp_mvar_value_3 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_datetime_timezone );
                }

                if ( tmp_mvar_value_3 == NULL )
                {

                    exception_type = PyExc_NameError;
                    Py_INCREF( exception_type );
                    exception_value = PyUnicode_FromFormat( "name '%s' is not defined", "datetime_timezone" );
                    exception_tb = NULL;
                    NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
                    CHAIN_EXCEPTION( exception_value );

                    exception_lineno = 583;
                    type_description_1 = "ooooooooooo";
                    goto frame_exception_exit_1;
                }

                tmp_called_name_3 = tmp_mvar_value_3;
                CHECK_OBJECT( var_tzdelta );
                tmp_args_element_name_3 = var_tzdelta;
                CHECK_OBJECT( var_tzname );
                tmp_args_element_name_4 = var_tzname;
                frame_c6a98338e308194720e568c3cff013c2->m_frame.f_lineno = 583;
                {
                    PyObject *call_args[] = { tmp_args_element_name_3, tmp_args_element_name_4 };
                    tmp_assign_source_15 = CALL_FUNCTION_WITH_ARGS2( tmp_called_name_3, call_args );
                }

                if ( tmp_assign_source_15 == NULL )
                {
                    assert( ERROR_OCCURRED() );

                    FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                    exception_lineno = 583;
                    type_description_1 = "ooooooooooo";
                    goto frame_exception_exit_1;
                }
                assert( var_tz == NULL );
                var_tz = tmp_assign_source_15;
            }
            goto branch_end_2;
            branch_no_2:;
            {
                PyObject *tmp_assign_source_16;
                PyObject *tmp_called_name_4;
                PyObject *tmp_mvar_value_4;
                PyObject *tmp_args_element_name_5;
                tmp_mvar_value_4 = GET_STRING_DICT_VALUE( moduledict__strptime, (Nuitka_StringObject *)const_str_plain_datetime_timezone );

                if (unlikely( tmp_mvar_value_4 == NULL ))
                {
                    tmp_mvar_value_4 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_datetime_timezone );
                }

                if ( tmp_mvar_value_4 == NULL )
                {

                    exception_type = PyExc_NameError;
                    Py_INCREF( exception_type );
                    exception_value = PyUnicode_FromFormat( "name '%s' is not defined", "datetime_timezone" );
                    exception_tb = NULL;
                    NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
                    CHAIN_EXCEPTION( exception_value );

                    exception_lineno = 585;
                    type_description_1 = "ooooooooooo";
                    goto frame_exception_exit_1;
                }

                tmp_called_name_4 = tmp_mvar_value_4;
                CHECK_OBJECT( var_tzdelta );
                tmp_args_element_name_5 = var_tzdelta;
                frame_c6a98338e308194720e568c3cff013c2->m_frame.f_lineno = 585;
                {
                    PyObject *call_args[] = { tmp_args_element_name_5 };
                    tmp_assign_source_16 = CALL_FUNCTION_WITH_ARGS1( tmp_called_name_4, call_args );
                }

                if ( tmp_assign_source_16 == NULL )
                {
                    assert( ERROR_OCCURRED() );

                    FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                    exception_lineno = 585;
                    type_description_1 = "ooooooooooo";
                    goto frame_exception_exit_1;
                }
                assert( var_tz == NULL );
                var_tz = tmp_assign_source_16;
            }
            branch_end_2:;
        }
        {
            PyObject *tmp_assign_source_17;
            PyObject *tmp_left_name_2;
            PyObject *tmp_right_name_2;
            PyObject *tmp_tuple_element_2;
            CHECK_OBJECT( var_args );
            tmp_left_name_2 = var_args;
            CHECK_OBJECT( var_tz );
            tmp_tuple_element_2 = var_tz;
            tmp_right_name_2 = PyTuple_New( 1 );
            Py_INCREF( tmp_tuple_element_2 );
            PyTuple_SET_ITEM( tmp_right_name_2, 0, tmp_tuple_element_2 );
            tmp_result = BINARY_OPERATION_ADD_OBJECT_TUPLE_INPLACE( &tmp_left_name_2, tmp_right_name_2 );
            Py_DECREF( tmp_right_name_2 );
            if ( tmp_result == false )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 586;
                type_description_1 = "ooooooooooo";
                goto frame_exception_exit_1;
            }
            tmp_assign_source_17 = tmp_left_name_2;
            var_args = tmp_assign_source_17;

        }
        branch_no_1:;
    }
    {
        PyObject *tmp_dircall_arg1_1;
        PyObject *tmp_dircall_arg2_1;
        CHECK_OBJECT( par_cls );
        tmp_dircall_arg1_1 = par_cls;
        CHECK_OBJECT( var_args );
        tmp_dircall_arg2_1 = var_args;
        Py_INCREF( tmp_dircall_arg1_1 );
        Py_INCREF( tmp_dircall_arg2_1 );

        {
            PyObject *dir_call_args[] = {tmp_dircall_arg1_1, tmp_dircall_arg2_1};
            tmp_return_value = impl___internal__$$$function_2_complex_call_helper_star_list( dir_call_args );
        }
        if ( tmp_return_value == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 588;
            type_description_1 = "ooooooooooo";
            goto frame_exception_exit_1;
        }
        goto frame_return_exit_1;
    }

#if 0
    RESTORE_FRAME_EXCEPTION( frame_c6a98338e308194720e568c3cff013c2 );
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto frame_no_exception_1;

    frame_return_exit_1:;
#if 0
    RESTORE_FRAME_EXCEPTION( frame_c6a98338e308194720e568c3cff013c2 );
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto try_return_handler_1;

    frame_exception_exit_1:;

#if 0
    RESTORE_FRAME_EXCEPTION( frame_c6a98338e308194720e568c3cff013c2 );
#endif

    if ( exception_tb == NULL )
    {
        exception_tb = MAKE_TRACEBACK( frame_c6a98338e308194720e568c3cff013c2, exception_lineno );
    }
    else if ( exception_tb->tb_frame != &frame_c6a98338e308194720e568c3cff013c2->m_frame )
    {
        exception_tb = ADD_TRACEBACK( exception_tb, frame_c6a98338e308194720e568c3cff013c2, exception_lineno );
    }

    // Attachs locals to frame if any.
    Nuitka_Frame_AttachLocals(
        (struct Nuitka_FrameObject *)frame_c6a98338e308194720e568c3cff013c2,
        type_description_1,
        par_cls,
        par_data_string,
        par_format,
        var_tt,
        var_fraction,
        var_gmtoff_fraction,
        var_tzname,
        var_gmtoff,
        var_args,
        var_tzdelta,
        var_tz
    );


    // Release cached frame.
    if ( frame_c6a98338e308194720e568c3cff013c2 == cache_frame_c6a98338e308194720e568c3cff013c2 )
    {
        Py_DECREF( frame_c6a98338e308194720e568c3cff013c2 );
    }
    cache_frame_c6a98338e308194720e568c3cff013c2 = NULL;

    assertFrameObject( frame_c6a98338e308194720e568c3cff013c2 );

    // Put the previous frame back on top.
    popFrameStack();

    // Return the error.
    goto try_except_handler_1;

    frame_no_exception_1:;
    // tried codes exits in all cases
    NUITKA_CANNOT_GET_HERE( _strptime$$$function_17__strptime_datetime );
    return NULL;
    // Return handler code:
    try_return_handler_1:;
    CHECK_OBJECT( (PyObject *)par_cls );
    Py_DECREF( par_cls );
    par_cls = NULL;

    CHECK_OBJECT( (PyObject *)par_data_string );
    Py_DECREF( par_data_string );
    par_data_string = NULL;

    CHECK_OBJECT( (PyObject *)par_format );
    Py_DECREF( par_format );
    par_format = NULL;

    CHECK_OBJECT( (PyObject *)var_tt );
    Py_DECREF( var_tt );
    var_tt = NULL;

    CHECK_OBJECT( (PyObject *)var_fraction );
    Py_DECREF( var_fraction );
    var_fraction = NULL;

    CHECK_OBJECT( (PyObject *)var_gmtoff_fraction );
    Py_DECREF( var_gmtoff_fraction );
    var_gmtoff_fraction = NULL;

    CHECK_OBJECT( (PyObject *)var_tzname );
    Py_DECREF( var_tzname );
    var_tzname = NULL;

    CHECK_OBJECT( (PyObject *)var_gmtoff );
    Py_DECREF( var_gmtoff );
    var_gmtoff = NULL;

    CHECK_OBJECT( (PyObject *)var_args );
    Py_DECREF( var_args );
    var_args = NULL;

    Py_XDECREF( var_tzdelta );
    var_tzdelta = NULL;

    Py_XDECREF( var_tz );
    var_tz = NULL;

    goto function_return_exit;
    // Exception handler code:
    try_except_handler_1:;
    exception_keeper_type_5 = exception_type;
    exception_keeper_value_5 = exception_value;
    exception_keeper_tb_5 = exception_tb;
    exception_keeper_lineno_5 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    CHECK_OBJECT( (PyObject *)par_cls );
    Py_DECREF( par_cls );
    par_cls = NULL;

    CHECK_OBJECT( (PyObject *)par_data_string );
    Py_DECREF( par_data_string );
    par_data_string = NULL;

    CHECK_OBJECT( (PyObject *)par_format );
    Py_DECREF( par_format );
    par_format = NULL;

    Py_XDECREF( var_tt );
    var_tt = NULL;

    Py_XDECREF( var_fraction );
    var_fraction = NULL;

    Py_XDECREF( var_gmtoff_fraction );
    var_gmtoff_fraction = NULL;

    Py_XDECREF( var_tzname );
    var_tzname = NULL;

    Py_XDECREF( var_gmtoff );
    var_gmtoff = NULL;

    Py_XDECREF( var_args );
    var_args = NULL;

    Py_XDECREF( var_tzdelta );
    var_tzdelta = NULL;

    Py_XDECREF( var_tz );
    var_tz = NULL;

    // Re-raise.
    exception_type = exception_keeper_type_5;
    exception_value = exception_keeper_value_5;
    exception_tb = exception_keeper_tb_5;
    exception_lineno = exception_keeper_lineno_5;

    goto function_exception_exit;
    // End of try:

    // Return statement must have exited already.
    NUITKA_CANNOT_GET_HERE( _strptime$$$function_17__strptime_datetime );
    return NULL;

function_exception_exit:
    assert( exception_type );
    RESTORE_ERROR_OCCURRED( exception_type, exception_value, exception_tb );

    return NULL;

function_return_exit:
   // Function cleanup code if any.


   // Actual function exit with return value, making sure we did not make
   // the error status worse despite non-NULL return.
   CHECK_OBJECT( tmp_return_value );
   assert( had_error || !ERROR_OCCURRED() );
   return tmp_return_value;
}



static PyObject *MAKE_FUNCTION__strptime$$$function_10___seqToRE(  )
{
    struct Nuitka_FunctionObject *result = Nuitka_Function_New(
        impl__strptime$$$function_10___seqToRE,
        const_str_plain___seqToRE,
#if PYTHON_VERSION >= 300
        const_str_digest_dcef34e00dab13e1e5d5ef5cdd74a2cd,
#endif
        codeobj_f5d16e06a9c33f44540f4c03a29f4f26,
        NULL,
#if PYTHON_VERSION >= 300
        NULL,
        NULL,
#endif
        module__strptime,
        const_str_digest_66a4a94a3151be16c19886374b90ea74,
        0
    );

    return (PyObject *)result;
}



static PyObject *MAKE_FUNCTION__strptime$$$function_11_pattern(  )
{
    struct Nuitka_FunctionObject *result = Nuitka_Function_New(
        impl__strptime$$$function_11_pattern,
        const_str_plain_pattern,
#if PYTHON_VERSION >= 300
        const_str_digest_12cf5a32f923705439cef8dcb9c68a71,
#endif
        codeobj_f044b6a80b1a45ed0fb018deca7c413c,
        NULL,
#if PYTHON_VERSION >= 300
        NULL,
        NULL,
#endif
        module__strptime,
        const_str_digest_d95eb2c150cd92562c6756c5ef604c48,
        0
    );

    return (PyObject *)result;
}



static PyObject *MAKE_FUNCTION__strptime$$$function_12_compile(  )
{
    struct Nuitka_FunctionObject *result = Nuitka_Function_New(
        impl__strptime$$$function_12_compile,
        const_str_plain_compile,
#if PYTHON_VERSION >= 300
        const_str_digest_668fe03828d334620b699b8b7deadbd4,
#endif
        codeobj_40f40fb82a3cce28816beecf489ed964,
        NULL,
#if PYTHON_VERSION >= 300
        NULL,
        NULL,
#endif
        module__strptime,
        const_str_digest_f069a4bffd0780e16d1b713f09a79fa6,
        0
    );

    return (PyObject *)result;
}



static PyObject *MAKE_FUNCTION__strptime$$$function_13__calc_julian_from_U_or_W(  )
{
    struct Nuitka_FunctionObject *result = Nuitka_Function_New(
        impl__strptime$$$function_13__calc_julian_from_U_or_W,
        const_str_plain__calc_julian_from_U_or_W,
#if PYTHON_VERSION >= 300
        NULL,
#endif
        codeobj_69d48dfe50bd36d23301b5b816c9a25b,
        NULL,
#if PYTHON_VERSION >= 300
        NULL,
        NULL,
#endif
        module__strptime,
        const_str_digest_de0573355e52d4a2c0d9ce5f58d9c469,
        0
    );

    return (PyObject *)result;
}



static PyObject *MAKE_FUNCTION__strptime$$$function_14__calc_julian_from_V(  )
{
    struct Nuitka_FunctionObject *result = Nuitka_Function_New(
        impl__strptime$$$function_14__calc_julian_from_V,
        const_str_plain__calc_julian_from_V,
#if PYTHON_VERSION >= 300
        NULL,
#endif
        codeobj_6213f678fd90493715fea7b571319cd2,
        NULL,
#if PYTHON_VERSION >= 300
        NULL,
        NULL,
#endif
        module__strptime,
        const_str_digest_27b466477e824207e30ceead501d4dc3,
        0
    );

    return (PyObject *)result;
}



static PyObject *MAKE_FUNCTION__strptime$$$function_15__strptime( PyObject *defaults )
{
    struct Nuitka_FunctionObject *result = Nuitka_Function_New(
        impl__strptime$$$function_15__strptime,
        const_str_plain__strptime,
#if PYTHON_VERSION >= 300
        NULL,
#endif
        codeobj_285d3548e213aa4c5d6aef1855a305f1,
        defaults,
#if PYTHON_VERSION >= 300
        NULL,
        NULL,
#endif
        module__strptime,
        const_str_digest_0e93fff1318b51482f5e234abcce0d5f,
        0
    );

    return (PyObject *)result;
}



static PyObject *MAKE_FUNCTION__strptime$$$function_16__strptime_time( PyObject *defaults )
{
    struct Nuitka_FunctionObject *result = Nuitka_Function_New(
        impl__strptime$$$function_16__strptime_time,
        const_str_plain__strptime_time,
#if PYTHON_VERSION >= 300
        NULL,
#endif
        codeobj_edff8205a2d414bbd7a00404a66b8323,
        defaults,
#if PYTHON_VERSION >= 300
        NULL,
        NULL,
#endif
        module__strptime,
        const_str_digest_e94f12c078916b3a7545ed5421b17178,
        0
    );

    return (PyObject *)result;
}



static PyObject *MAKE_FUNCTION__strptime$$$function_17__strptime_datetime( PyObject *defaults )
{
    struct Nuitka_FunctionObject *result = Nuitka_Function_New(
        impl__strptime$$$function_17__strptime_datetime,
        const_str_plain__strptime_datetime,
#if PYTHON_VERSION >= 300
        NULL,
#endif
        codeobj_c6a98338e308194720e568c3cff013c2,
        defaults,
#if PYTHON_VERSION >= 300
        NULL,
        NULL,
#endif
        module__strptime,
        const_str_digest_135af06a4607ec91acf95b5a457cca04,
        0
    );

    return (PyObject *)result;
}



static PyObject *MAKE_FUNCTION__strptime$$$function_1__getlang(  )
{
    struct Nuitka_FunctionObject *result = Nuitka_Function_New(
        impl__strptime$$$function_1__getlang,
        const_str_plain__getlang,
#if PYTHON_VERSION >= 300
        NULL,
#endif
        codeobj_d376003ce1f00a357a5daf67789baadc,
        NULL,
#if PYTHON_VERSION >= 300
        NULL,
        NULL,
#endif
        module__strptime,
        NULL,
        0
    );

    return (PyObject *)result;
}



static PyObject *MAKE_FUNCTION__strptime$$$function_2___init__(  )
{
    struct Nuitka_FunctionObject *result = Nuitka_Function_New(
        impl__strptime$$$function_2___init__,
        const_str_plain___init__,
#if PYTHON_VERSION >= 300
        const_str_digest_356c3e90aa7cbcbb5874a3145cfb9892,
#endif
        codeobj_db18c91e2480c1832ae8445405c2fd5c,
        NULL,
#if PYTHON_VERSION >= 300
        NULL,
        NULL,
#endif
        module__strptime,
        const_str_digest_f9dffda5992fb7caa5d3d1aaf81a4c09,
        0
    );

    return (PyObject *)result;
}



static PyObject *MAKE_FUNCTION__strptime$$$function_3___pad(  )
{
    struct Nuitka_FunctionObject *result = Nuitka_Function_New(
        impl__strptime$$$function_3___pad,
        const_str_plain___pad,
#if PYTHON_VERSION >= 300
        const_str_digest_1bee1f17b3baa5d47a23e96e655c40ba,
#endif
        codeobj_957545efe84ec5b080d34a969999bbb4,
        NULL,
#if PYTHON_VERSION >= 300
        NULL,
        NULL,
#endif
        module__strptime,
        NULL,
        0
    );

    return (PyObject *)result;
}



static PyObject *MAKE_FUNCTION__strptime$$$function_4___calc_weekday(  )
{
    struct Nuitka_FunctionObject *result = Nuitka_Function_New(
        impl__strptime$$$function_4___calc_weekday,
        const_str_plain___calc_weekday,
#if PYTHON_VERSION >= 300
        const_str_digest_3683d4bace38680daec2435fba7cecae,
#endif
        codeobj_50088acb7867a7649aefc1a93e216267,
        NULL,
#if PYTHON_VERSION >= 300
        NULL,
        NULL,
#endif
        module__strptime,
        NULL,
        0
    );

    return (PyObject *)result;
}



static PyObject *MAKE_FUNCTION__strptime$$$function_5___calc_month(  )
{
    struct Nuitka_FunctionObject *result = Nuitka_Function_New(
        impl__strptime$$$function_5___calc_month,
        const_str_plain___calc_month,
#if PYTHON_VERSION >= 300
        const_str_digest_756b540a7e3239892249fd3513071154,
#endif
        codeobj_a2bd7fedebd3e4f98d505ee04dfef0a0,
        NULL,
#if PYTHON_VERSION >= 300
        NULL,
        NULL,
#endif
        module__strptime,
        NULL,
        0
    );

    return (PyObject *)result;
}



static PyObject *MAKE_FUNCTION__strptime$$$function_6___calc_am_pm(  )
{
    struct Nuitka_FunctionObject *result = Nuitka_Function_New(
        impl__strptime$$$function_6___calc_am_pm,
        const_str_plain___calc_am_pm,
#if PYTHON_VERSION >= 300
        const_str_digest_bcf4f77f232344278a1e35c533afe592,
#endif
        codeobj_042cbd0942877416c47609c4ddfe85c8,
        NULL,
#if PYTHON_VERSION >= 300
        NULL,
        NULL,
#endif
        module__strptime,
        NULL,
        0
    );

    return (PyObject *)result;
}



static PyObject *MAKE_FUNCTION__strptime$$$function_7___calc_date_time(  )
{
    struct Nuitka_FunctionObject *result = Nuitka_Function_New(
        impl__strptime$$$function_7___calc_date_time,
        const_str_plain___calc_date_time,
#if PYTHON_VERSION >= 300
        const_str_digest_eb981a24cf74d5964e84baae545fed48,
#endif
        codeobj_68a9d0a26d7b8b382e7cb285e1b41374,
        NULL,
#if PYTHON_VERSION >= 300
        NULL,
        NULL,
#endif
        module__strptime,
        NULL,
        0
    );

    return (PyObject *)result;
}



static PyObject *MAKE_FUNCTION__strptime$$$function_8___calc_timezone(  )
{
    struct Nuitka_FunctionObject *result = Nuitka_Function_New(
        impl__strptime$$$function_8___calc_timezone,
        const_str_plain___calc_timezone,
#if PYTHON_VERSION >= 300
        const_str_digest_613642195e4070a6a4e08d5e22cabe18,
#endif
        codeobj_ca9ca9f53a265adc62ad7d1f9f0a3299,
        NULL,
#if PYTHON_VERSION >= 300
        NULL,
        NULL,
#endif
        module__strptime,
        NULL,
        0
    );

    return (PyObject *)result;
}



static PyObject *MAKE_FUNCTION__strptime$$$function_9___init__( PyObject *defaults )
{
    struct Nuitka_FunctionObject *result = Nuitka_Function_New(
        impl__strptime$$$function_9___init__,
        const_str_plain___init__,
#if PYTHON_VERSION >= 300
        const_str_digest_1364b07bcffd5557cadb2760e6492786,
#endif
        codeobj_869fc41df2b388ecc0919cc53a3b31d5,
        defaults,
#if PYTHON_VERSION >= 300
        NULL,
        NULL,
#endif
        module__strptime,
        const_str_digest_9ba850cce6d5f5935ce25f34055f7349,
        1
    );

    return (PyObject *)result;
}



#if PYTHON_VERSION >= 300
static struct PyModuleDef mdef__strptime =
{
    PyModuleDef_HEAD_INIT,
    "_strptime",
    NULL,                /* m_doc */
    -1,                  /* m_size */
    NULL,                /* m_methods */
    NULL,                /* m_reload */
    NULL,                /* m_traverse */
    NULL,                /* m_clear */
    NULL,                /* m_free */
  };
#endif

extern PyObject *const_str_plain___compiled__;

extern PyObject *const_str_plain___package__;

#if PYTHON_VERSION >= 300
extern PyObject *const_str_dot;
extern PyObject *const_str_plain___loader__;
#endif

#if PYTHON_VERSION >= 340
extern PyObject *const_str_plain___spec__;
extern PyObject *const_str_plain__initializing;
extern PyObject *const_str_plain_submodule_search_locations;
#endif

extern void _initCompiledCellType();
extern void _initCompiledGeneratorType();
extern void _initCompiledFunctionType();
extern void _initCompiledMethodType();
extern void _initCompiledFrameType();
#if PYTHON_VERSION >= 350
extern void _initCompiledCoroutineTypes();
#endif
#if PYTHON_VERSION >= 360
extern void _initCompiledAsyncgenTypes();
#endif

extern PyTypeObject Nuitka_Loader_Type;

// The exported interface to CPython. On import of the module, this function
// gets called. It has to have an exact function name, in cases it's a shared
// library export. This is hidden behind the MOD_INIT_DECL.

MOD_INIT_DECL( _strptime )
{
#if defined(_NUITKA_EXE) || PYTHON_VERSION >= 300
    static bool _init_done = false;

    // Modules might be imported repeatedly, which is to be ignored.
    if ( _init_done )
    {
        return MOD_RETURN_VALUE( module__strptime );
    }
    else
    {
        _init_done = true;
    }
#endif

#ifdef _NUITKA_MODULE
    // In case of a stand alone extension module, need to call initialization
    // the init here because that's the first and only time we are going to get
    // called here.

    // Initialize the constant values used.
    _initBuiltinModule();
    createGlobalConstants();

    /* Initialize the compiled types of Nuitka. */
    _initCompiledCellType();
    _initCompiledGeneratorType();
    _initCompiledFunctionType();
    _initCompiledMethodType();
    _initCompiledFrameType();
#if PYTHON_VERSION >= 350
    _initCompiledCoroutineTypes();
#endif
#if PYTHON_VERSION >= 360
    _initCompiledAsyncgenTypes();
#endif

#if PYTHON_VERSION < 300
    _initSlotCompare();
#endif
#if PYTHON_VERSION >= 270
    _initSlotIternext();
#endif

    patchBuiltinModule();
    patchTypeComparison();

    // Enable meta path based loader if not already done.
#ifdef _NUITKA_TRACE
    puts("_strptime: Calling setupMetaPathBasedLoader().");
#endif
    setupMetaPathBasedLoader();

#if PYTHON_VERSION >= 300
    patchInspectModule();
#endif

#endif

    /* The constants only used by this module are created now. */
#ifdef _NUITKA_TRACE
    puts("_strptime: Calling createModuleConstants().");
#endif
    createModuleConstants();

    /* The code objects used by this module are created now. */
#ifdef _NUITKA_TRACE
    puts("_strptime: Calling createModuleCodeObjects().");
#endif
    createModuleCodeObjects();

    // puts( "in init_strptime" );

    // Create the module object first. There are no methods initially, all are
    // added dynamically in actual code only.  Also no "__doc__" is initially
    // set at this time, as it could not contain NUL characters this way, they
    // are instead set in early module code.  No "self" for modules, we have no
    // use for it.
#if PYTHON_VERSION < 300
    module__strptime = Py_InitModule4(
        "_strptime",       // Module Name
        NULL,                    // No methods initially, all are added
                                 // dynamically in actual module code only.
        NULL,                    // No "__doc__" is initially set, as it could
                                 // not contain NUL this way, added early in
                                 // actual code.
        NULL,                    // No self for modules, we don't use it.
        PYTHON_API_VERSION
    );
#else

    module__strptime = PyModule_Create( &mdef__strptime );
#endif

    moduledict__strptime = MODULE_DICT( module__strptime );

    // Set __compiled__ to what it we know.
    UPDATE_STRING_DICT1(
        moduledict__strptime,
        (Nuitka_StringObject *)const_str_plain___compiled__,
        Nuitka_dunder_compiled_value
    );

    // Update "__package__" value to what it ought to be.
    {
#if 0
        PyObject *module_name = GET_STRING_DICT_VALUE( moduledict__strptime, (Nuitka_StringObject *)const_str_plain___name__ );

        UPDATE_STRING_DICT1(
            moduledict__strptime,
            (Nuitka_StringObject *)const_str_plain___package__,
            module_name
        );
#else

#if PYTHON_VERSION < 300
        PyObject *module_name = GET_STRING_DICT_VALUE( moduledict__strptime, (Nuitka_StringObject *)const_str_plain___name__ );
        char const *module_name_cstr = PyString_AS_STRING( module_name );

        char const *last_dot = strrchr( module_name_cstr, '.' );

        if ( last_dot != NULL )
        {
            UPDATE_STRING_DICT1(
                moduledict__strptime,
                (Nuitka_StringObject *)const_str_plain___package__,
                PyString_FromStringAndSize( module_name_cstr, last_dot - module_name_cstr )
            );
        }
#else
        PyObject *module_name = GET_STRING_DICT_VALUE( moduledict__strptime, (Nuitka_StringObject *)const_str_plain___name__ );
        Py_ssize_t dot_index = PyUnicode_Find( module_name, const_str_dot, 0, PyUnicode_GetLength( module_name ), -1 );

        if ( dot_index != -1 )
        {
            UPDATE_STRING_DICT1(
                moduledict__strptime,
                (Nuitka_StringObject *)const_str_plain___package__,
                PyUnicode_Substring( module_name, 0, dot_index )
            );
        }
#endif
#endif
    }

    CHECK_OBJECT( module__strptime );

// Seems to work for Python2.7 out of the box, but for Python3, the module
// doesn't automatically enter "sys.modules", so do it manually.
#if PYTHON_VERSION >= 300
    {
        int r = PyObject_SetItem( PyImport_GetModuleDict(), const_str_plain__strptime, module__strptime );

        assert( r != -1 );
    }
#endif

    // For deep importing of a module we need to have "__builtins__", so we set
    // it ourselves in the same way than CPython does. Note: This must be done
    // before the frame object is allocated, or else it may fail.

    if ( GET_STRING_DICT_VALUE( moduledict__strptime, (Nuitka_StringObject *)const_str_plain___builtins__ ) == NULL )
    {
        PyObject *value = (PyObject *)builtin_module;

        // Check if main module, not a dict then but the module itself.
#if !defined(_NUITKA_EXE) || !0
        value = PyModule_GetDict( value );
#endif

        UPDATE_STRING_DICT0( moduledict__strptime, (Nuitka_StringObject *)const_str_plain___builtins__, value );
    }

#if PYTHON_VERSION >= 300
    UPDATE_STRING_DICT0( moduledict__strptime, (Nuitka_StringObject *)const_str_plain___loader__, (PyObject *)&Nuitka_Loader_Type );
#endif

#if PYTHON_VERSION >= 340
// Set the "__spec__" value

#if 0
    // Main modules just get "None" as spec.
    UPDATE_STRING_DICT0( moduledict__strptime, (Nuitka_StringObject *)const_str_plain___spec__, Py_None );
#else
    // Other modules get a "ModuleSpec" from the standard mechanism.
    {
        PyObject *bootstrap_module = PyImport_ImportModule("importlib._bootstrap");
        CHECK_OBJECT( bootstrap_module );
        PyObject *module_spec_class = PyObject_GetAttrString( bootstrap_module, "ModuleSpec" );
        Py_DECREF( bootstrap_module );

        PyObject *args[] = {
            GET_STRING_DICT_VALUE( moduledict__strptime, (Nuitka_StringObject *)const_str_plain___name__ ),
            (PyObject *)&Nuitka_Loader_Type
        };

        PyObject *spec_value = CALL_FUNCTION_WITH_ARGS2(
            module_spec_class,
            args
        );
        Py_DECREF( module_spec_class );

        // We can assume this to never fail, or else we are in trouble anyway.
        CHECK_OBJECT( spec_value );

// For packages set the submodule search locations as well, even if to empty
// list, so investigating code will consider it a package.
#if 0
        SET_ATTRIBUTE( spec_value, const_str_plain_submodule_search_locations, PyList_New(0) );
#endif

// Mark the execution in the "__spec__" value.
        SET_ATTRIBUTE( spec_value, const_str_plain__initializing, Py_True );

        UPDATE_STRING_DICT1( moduledict__strptime, (Nuitka_StringObject *)const_str_plain___spec__, spec_value );
    }
#endif
#endif

    // Temp variables if any
    PyObject *outline_0_var___class__ = NULL;
    struct Nuitka_CellObject *outline_1_var___class__ = PyCell_EMPTY();
    PyObject *tmp_class_creation_1__bases = NULL;
    PyObject *tmp_class_creation_1__class_decl_dict = NULL;
    PyObject *tmp_class_creation_1__metaclass = NULL;
    PyObject *tmp_class_creation_1__prepared = NULL;
    PyObject *tmp_class_creation_2__bases = NULL;
    PyObject *tmp_class_creation_2__class_decl_dict = NULL;
    PyObject *tmp_class_creation_2__metaclass = NULL;
    PyObject *tmp_class_creation_2__prepared = NULL;
    PyObject *tmp_import_from_1__module = NULL;
    struct Nuitka_FrameObject *frame_7438384fed32ebca9a6ff01bccfb3fea;
    NUITKA_MAY_BE_UNUSED char const *type_description_1 = NULL;
    bool tmp_result;
    PyObject *exception_type = NULL;
    PyObject *exception_value = NULL;
    PyTracebackObject *exception_tb = NULL;
    NUITKA_MAY_BE_UNUSED int exception_lineno = 0;
    PyObject *exception_keeper_type_1;
    PyObject *exception_keeper_value_1;
    PyTracebackObject *exception_keeper_tb_1;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_1;
    int tmp_res;
    PyObject *tmp_dictdel_dict;
    PyObject *tmp_dictdel_key;
    PyObject *locals__strptime_30 = NULL;
    PyObject *tmp_dictset_value;
    struct Nuitka_FrameObject *frame_43b4ad36a6908d2a03719ed1490267d8_2;
    NUITKA_MAY_BE_UNUSED char const *type_description_2 = NULL;
    static struct Nuitka_FrameObject *cache_frame_43b4ad36a6908d2a03719ed1490267d8_2 = NULL;
    PyObject *exception_keeper_type_2;
    PyObject *exception_keeper_value_2;
    PyTracebackObject *exception_keeper_tb_2;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_2;
    PyObject *exception_keeper_type_3;
    PyObject *exception_keeper_value_3;
    PyTracebackObject *exception_keeper_tb_3;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_3;
    PyObject *exception_keeper_type_4;
    PyObject *exception_keeper_value_4;
    PyTracebackObject *exception_keeper_tb_4;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_4;
    PyObject *locals__strptime_179 = NULL;
    struct Nuitka_FrameObject *frame_3e06da09ee1ae5362db794a4fe90f5c2_3;
    NUITKA_MAY_BE_UNUSED char const *type_description_3 = NULL;
    static struct Nuitka_FrameObject *cache_frame_3e06da09ee1ae5362db794a4fe90f5c2_3 = NULL;
    PyObject *exception_keeper_type_5;
    PyObject *exception_keeper_value_5;
    PyTracebackObject *exception_keeper_tb_5;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_5;
    PyObject *exception_keeper_type_6;
    PyObject *exception_keeper_value_6;
    PyTracebackObject *exception_keeper_tb_6;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_6;
    PyObject *exception_keeper_type_7;
    PyObject *exception_keeper_value_7;
    PyTracebackObject *exception_keeper_tb_7;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_7;

    // Module code.
    {
        PyObject *tmp_assign_source_1;
        tmp_assign_source_1 = const_str_digest_c75a3b30fd04be1805c7e20026a18c37;
        UPDATE_STRING_DICT0( moduledict__strptime, (Nuitka_StringObject *)const_str_plain___doc__, tmp_assign_source_1 );
    }
    {
        PyObject *tmp_assign_source_2;
        tmp_assign_source_2 = module_filename_obj;
        UPDATE_STRING_DICT0( moduledict__strptime, (Nuitka_StringObject *)const_str_plain___file__, tmp_assign_source_2 );
    }
    // Frame without reuse.
    frame_7438384fed32ebca9a6ff01bccfb3fea = MAKE_MODULE_FRAME( codeobj_7438384fed32ebca9a6ff01bccfb3fea, module__strptime );

    // Push the new frame as the currently active one, and we should be exclusively
    // owning it.
    pushFrameStack( frame_7438384fed32ebca9a6ff01bccfb3fea );
    assert( Py_REFCNT( frame_7438384fed32ebca9a6ff01bccfb3fea ) == 2 );

    // Framed code:
    {
        PyObject *tmp_assattr_name_1;
        PyObject *tmp_assattr_target_1;
        PyObject *tmp_mvar_value_1;
        tmp_assattr_name_1 = module_filename_obj;
        tmp_mvar_value_1 = GET_STRING_DICT_VALUE( moduledict__strptime, (Nuitka_StringObject *)const_str_plain___spec__ );

        if (unlikely( tmp_mvar_value_1 == NULL ))
        {
            tmp_mvar_value_1 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain___spec__ );
        }

        CHECK_OBJECT( tmp_mvar_value_1 );
        tmp_assattr_target_1 = tmp_mvar_value_1;
        tmp_result = SET_ATTRIBUTE( tmp_assattr_target_1, const_str_plain_origin, tmp_assattr_name_1 );
        if ( tmp_result == false )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 1;

            goto frame_exception_exit_1;
        }
    }
    {
        PyObject *tmp_assattr_name_2;
        PyObject *tmp_assattr_target_2;
        PyObject *tmp_mvar_value_2;
        tmp_assattr_name_2 = Py_True;
        tmp_mvar_value_2 = GET_STRING_DICT_VALUE( moduledict__strptime, (Nuitka_StringObject *)const_str_plain___spec__ );

        if (unlikely( tmp_mvar_value_2 == NULL ))
        {
            tmp_mvar_value_2 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain___spec__ );
        }

        CHECK_OBJECT( tmp_mvar_value_2 );
        tmp_assattr_target_2 = tmp_mvar_value_2;
        tmp_result = SET_ATTRIBUTE( tmp_assattr_target_2, const_str_plain_has_location, tmp_assattr_name_2 );
        if ( tmp_result == false )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 1;

            goto frame_exception_exit_1;
        }
    }
    {
        PyObject *tmp_assign_source_3;
        tmp_assign_source_3 = Py_None;
        UPDATE_STRING_DICT0( moduledict__strptime, (Nuitka_StringObject *)const_str_plain___cached__, tmp_assign_source_3 );
    }
    {
        PyObject *tmp_assign_source_4;
        PyObject *tmp_name_name_1;
        PyObject *tmp_globals_name_1;
        PyObject *tmp_locals_name_1;
        PyObject *tmp_fromlist_name_1;
        PyObject *tmp_level_name_1;
        tmp_name_name_1 = const_str_plain_time;
        tmp_globals_name_1 = (PyObject *)moduledict__strptime;
        tmp_locals_name_1 = Py_None;
        tmp_fromlist_name_1 = Py_None;
        tmp_level_name_1 = const_int_0;
        frame_7438384fed32ebca9a6ff01bccfb3fea->m_frame.f_lineno = 13;
        tmp_assign_source_4 = IMPORT_MODULE5( tmp_name_name_1, tmp_globals_name_1, tmp_locals_name_1, tmp_fromlist_name_1, tmp_level_name_1 );
        assert( !(tmp_assign_source_4 == NULL) );
        UPDATE_STRING_DICT1( moduledict__strptime, (Nuitka_StringObject *)const_str_plain_time, tmp_assign_source_4 );
    }
    {
        PyObject *tmp_assign_source_5;
        PyObject *tmp_name_name_2;
        PyObject *tmp_globals_name_2;
        PyObject *tmp_locals_name_2;
        PyObject *tmp_fromlist_name_2;
        PyObject *tmp_level_name_2;
        tmp_name_name_2 = const_str_plain_locale;
        tmp_globals_name_2 = (PyObject *)moduledict__strptime;
        tmp_locals_name_2 = Py_None;
        tmp_fromlist_name_2 = Py_None;
        tmp_level_name_2 = const_int_0;
        frame_7438384fed32ebca9a6ff01bccfb3fea->m_frame.f_lineno = 14;
        tmp_assign_source_5 = IMPORT_MODULE5( tmp_name_name_2, tmp_globals_name_2, tmp_locals_name_2, tmp_fromlist_name_2, tmp_level_name_2 );
        if ( tmp_assign_source_5 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 14;

            goto frame_exception_exit_1;
        }
        UPDATE_STRING_DICT1( moduledict__strptime, (Nuitka_StringObject *)const_str_plain_locale, tmp_assign_source_5 );
    }
    {
        PyObject *tmp_assign_source_6;
        PyObject *tmp_name_name_3;
        PyObject *tmp_globals_name_3;
        PyObject *tmp_locals_name_3;
        PyObject *tmp_fromlist_name_3;
        PyObject *tmp_level_name_3;
        tmp_name_name_3 = const_str_plain_calendar;
        tmp_globals_name_3 = (PyObject *)moduledict__strptime;
        tmp_locals_name_3 = Py_None;
        tmp_fromlist_name_3 = Py_None;
        tmp_level_name_3 = const_int_0;
        frame_7438384fed32ebca9a6ff01bccfb3fea->m_frame.f_lineno = 15;
        tmp_assign_source_6 = IMPORT_MODULE5( tmp_name_name_3, tmp_globals_name_3, tmp_locals_name_3, tmp_fromlist_name_3, tmp_level_name_3 );
        if ( tmp_assign_source_6 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 15;

            goto frame_exception_exit_1;
        }
        UPDATE_STRING_DICT1( moduledict__strptime, (Nuitka_StringObject *)const_str_plain_calendar, tmp_assign_source_6 );
    }
    {
        PyObject *tmp_assign_source_7;
        PyObject *tmp_import_name_from_1;
        PyObject *tmp_name_name_4;
        PyObject *tmp_globals_name_4;
        PyObject *tmp_locals_name_4;
        PyObject *tmp_fromlist_name_4;
        PyObject *tmp_level_name_4;
        tmp_name_name_4 = const_str_plain_re;
        tmp_globals_name_4 = (PyObject *)moduledict__strptime;
        tmp_locals_name_4 = Py_None;
        tmp_fromlist_name_4 = const_tuple_str_plain_compile_tuple;
        tmp_level_name_4 = const_int_0;
        frame_7438384fed32ebca9a6ff01bccfb3fea->m_frame.f_lineno = 16;
        tmp_import_name_from_1 = IMPORT_MODULE5( tmp_name_name_4, tmp_globals_name_4, tmp_locals_name_4, tmp_fromlist_name_4, tmp_level_name_4 );
        if ( tmp_import_name_from_1 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 16;

            goto frame_exception_exit_1;
        }
        tmp_assign_source_7 = IMPORT_NAME( tmp_import_name_from_1, const_str_plain_compile );
        Py_DECREF( tmp_import_name_from_1 );
        if ( tmp_assign_source_7 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 16;

            goto frame_exception_exit_1;
        }
        UPDATE_STRING_DICT1( moduledict__strptime, (Nuitka_StringObject *)const_str_plain_re_compile, tmp_assign_source_7 );
    }
    {
        PyObject *tmp_assign_source_8;
        PyObject *tmp_import_name_from_2;
        PyObject *tmp_name_name_5;
        PyObject *tmp_globals_name_5;
        PyObject *tmp_locals_name_5;
        PyObject *tmp_fromlist_name_5;
        PyObject *tmp_level_name_5;
        tmp_name_name_5 = const_str_plain_re;
        tmp_globals_name_5 = (PyObject *)moduledict__strptime;
        tmp_locals_name_5 = Py_None;
        tmp_fromlist_name_5 = const_tuple_str_plain_IGNORECASE_tuple;
        tmp_level_name_5 = const_int_0;
        frame_7438384fed32ebca9a6ff01bccfb3fea->m_frame.f_lineno = 17;
        tmp_import_name_from_2 = IMPORT_MODULE5( tmp_name_name_5, tmp_globals_name_5, tmp_locals_name_5, tmp_fromlist_name_5, tmp_level_name_5 );
        if ( tmp_import_name_from_2 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 17;

            goto frame_exception_exit_1;
        }
        tmp_assign_source_8 = IMPORT_NAME( tmp_import_name_from_2, const_str_plain_IGNORECASE );
        Py_DECREF( tmp_import_name_from_2 );
        if ( tmp_assign_source_8 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 17;

            goto frame_exception_exit_1;
        }
        UPDATE_STRING_DICT1( moduledict__strptime, (Nuitka_StringObject *)const_str_plain_IGNORECASE, tmp_assign_source_8 );
    }
    {
        PyObject *tmp_assign_source_9;
        PyObject *tmp_import_name_from_3;
        PyObject *tmp_name_name_6;
        PyObject *tmp_globals_name_6;
        PyObject *tmp_locals_name_6;
        PyObject *tmp_fromlist_name_6;
        PyObject *tmp_level_name_6;
        tmp_name_name_6 = const_str_plain_re;
        tmp_globals_name_6 = (PyObject *)moduledict__strptime;
        tmp_locals_name_6 = Py_None;
        tmp_fromlist_name_6 = const_tuple_str_plain_escape_tuple;
        tmp_level_name_6 = const_int_0;
        frame_7438384fed32ebca9a6ff01bccfb3fea->m_frame.f_lineno = 18;
        tmp_import_name_from_3 = IMPORT_MODULE5( tmp_name_name_6, tmp_globals_name_6, tmp_locals_name_6, tmp_fromlist_name_6, tmp_level_name_6 );
        if ( tmp_import_name_from_3 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 18;

            goto frame_exception_exit_1;
        }
        tmp_assign_source_9 = IMPORT_NAME( tmp_import_name_from_3, const_str_plain_escape );
        Py_DECREF( tmp_import_name_from_3 );
        if ( tmp_assign_source_9 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 18;

            goto frame_exception_exit_1;
        }
        UPDATE_STRING_DICT1( moduledict__strptime, (Nuitka_StringObject *)const_str_plain_re_escape, tmp_assign_source_9 );
    }
    {
        PyObject *tmp_assign_source_10;
        PyObject *tmp_name_name_7;
        PyObject *tmp_globals_name_7;
        PyObject *tmp_locals_name_7;
        PyObject *tmp_fromlist_name_7;
        PyObject *tmp_level_name_7;
        tmp_name_name_7 = const_str_plain_datetime;
        tmp_globals_name_7 = (PyObject *)moduledict__strptime;
        tmp_locals_name_7 = Py_None;
        tmp_fromlist_name_7 = const_tuple_str_plain_date_str_plain_timedelta_str_plain_timezone_tuple;
        tmp_level_name_7 = const_int_0;
        frame_7438384fed32ebca9a6ff01bccfb3fea->m_frame.f_lineno = 19;
        tmp_assign_source_10 = IMPORT_MODULE5( tmp_name_name_7, tmp_globals_name_7, tmp_locals_name_7, tmp_fromlist_name_7, tmp_level_name_7 );
        if ( tmp_assign_source_10 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 19;

            goto frame_exception_exit_1;
        }
        assert( tmp_import_from_1__module == NULL );
        tmp_import_from_1__module = tmp_assign_source_10;
    }
    // Tried code:
    {
        PyObject *tmp_assign_source_11;
        PyObject *tmp_import_name_from_4;
        CHECK_OBJECT( tmp_import_from_1__module );
        tmp_import_name_from_4 = tmp_import_from_1__module;
        tmp_assign_source_11 = IMPORT_NAME( tmp_import_name_from_4, const_str_plain_date );
        if ( tmp_assign_source_11 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 19;

            goto try_except_handler_1;
        }
        UPDATE_STRING_DICT1( moduledict__strptime, (Nuitka_StringObject *)const_str_plain_datetime_date, tmp_assign_source_11 );
    }
    {
        PyObject *tmp_assign_source_12;
        PyObject *tmp_import_name_from_5;
        CHECK_OBJECT( tmp_import_from_1__module );
        tmp_import_name_from_5 = tmp_import_from_1__module;
        tmp_assign_source_12 = IMPORT_NAME( tmp_import_name_from_5, const_str_plain_timedelta );
        if ( tmp_assign_source_12 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 19;

            goto try_except_handler_1;
        }
        UPDATE_STRING_DICT1( moduledict__strptime, (Nuitka_StringObject *)const_str_plain_datetime_timedelta, tmp_assign_source_12 );
    }
    {
        PyObject *tmp_assign_source_13;
        PyObject *tmp_import_name_from_6;
        CHECK_OBJECT( tmp_import_from_1__module );
        tmp_import_name_from_6 = tmp_import_from_1__module;
        tmp_assign_source_13 = IMPORT_NAME( tmp_import_name_from_6, const_str_plain_timezone );
        if ( tmp_assign_source_13 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 19;

            goto try_except_handler_1;
        }
        UPDATE_STRING_DICT1( moduledict__strptime, (Nuitka_StringObject *)const_str_plain_datetime_timezone, tmp_assign_source_13 );
    }
    goto try_end_1;
    // Exception handler code:
    try_except_handler_1:;
    exception_keeper_type_1 = exception_type;
    exception_keeper_value_1 = exception_value;
    exception_keeper_tb_1 = exception_tb;
    exception_keeper_lineno_1 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    CHECK_OBJECT( (PyObject *)tmp_import_from_1__module );
    Py_DECREF( tmp_import_from_1__module );
    tmp_import_from_1__module = NULL;

    // Re-raise.
    exception_type = exception_keeper_type_1;
    exception_value = exception_keeper_value_1;
    exception_tb = exception_keeper_tb_1;
    exception_lineno = exception_keeper_lineno_1;

    goto frame_exception_exit_1;
    // End of try:
    try_end_1:;
    CHECK_OBJECT( (PyObject *)tmp_import_from_1__module );
    Py_DECREF( tmp_import_from_1__module );
    tmp_import_from_1__module = NULL;

    {
        PyObject *tmp_assign_source_14;
        PyObject *tmp_import_name_from_7;
        PyObject *tmp_name_name_8;
        PyObject *tmp_globals_name_8;
        PyObject *tmp_locals_name_8;
        PyObject *tmp_fromlist_name_8;
        PyObject *tmp_level_name_8;
        tmp_name_name_8 = const_str_plain__thread;
        tmp_globals_name_8 = (PyObject *)moduledict__strptime;
        tmp_locals_name_8 = Py_None;
        tmp_fromlist_name_8 = const_tuple_str_plain_allocate_lock_tuple;
        tmp_level_name_8 = const_int_0;
        frame_7438384fed32ebca9a6ff01bccfb3fea->m_frame.f_lineno = 22;
        tmp_import_name_from_7 = IMPORT_MODULE5( tmp_name_name_8, tmp_globals_name_8, tmp_locals_name_8, tmp_fromlist_name_8, tmp_level_name_8 );
        assert( !(tmp_import_name_from_7 == NULL) );
        tmp_assign_source_14 = IMPORT_NAME( tmp_import_name_from_7, const_str_plain_allocate_lock );
        Py_DECREF( tmp_import_name_from_7 );
        assert( !(tmp_assign_source_14 == NULL) );
        UPDATE_STRING_DICT1( moduledict__strptime, (Nuitka_StringObject *)const_str_plain__thread_allocate_lock, tmp_assign_source_14 );
    }
    {
        PyObject *tmp_assign_source_15;
        tmp_assign_source_15 = PyList_New( 0 );
        UPDATE_STRING_DICT1( moduledict__strptime, (Nuitka_StringObject *)const_str_plain___all__, tmp_assign_source_15 );
    }
    {
        PyObject *tmp_assign_source_16;
        tmp_assign_source_16 = MAKE_FUNCTION__strptime$$$function_1__getlang(  );



        UPDATE_STRING_DICT1( moduledict__strptime, (Nuitka_StringObject *)const_str_plain__getlang, tmp_assign_source_16 );
    }
    // Tried code:
    {
        PyObject *tmp_assign_source_17;
        PyObject *tmp_dircall_arg1_1;
        tmp_dircall_arg1_1 = const_tuple_type_object_tuple;
        Py_INCREF( tmp_dircall_arg1_1 );

        {
            PyObject *dir_call_args[] = {tmp_dircall_arg1_1};
            tmp_assign_source_17 = impl___internal__$$$function_1__mro_entries_conversion( dir_call_args );
        }
        if ( tmp_assign_source_17 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 30;

            goto try_except_handler_2;
        }
        assert( tmp_class_creation_1__bases == NULL );
        tmp_class_creation_1__bases = tmp_assign_source_17;
    }
    {
        PyObject *tmp_assign_source_18;
        tmp_assign_source_18 = PyDict_New();
        assert( tmp_class_creation_1__class_decl_dict == NULL );
        tmp_class_creation_1__class_decl_dict = tmp_assign_source_18;
    }
    {
        PyObject *tmp_assign_source_19;
        PyObject *tmp_metaclass_name_1;
        nuitka_bool tmp_condition_result_1;
        PyObject *tmp_key_name_1;
        PyObject *tmp_dict_name_1;
        PyObject *tmp_dict_name_2;
        PyObject *tmp_key_name_2;
        nuitka_bool tmp_condition_result_2;
        int tmp_truth_name_1;
        PyObject *tmp_type_arg_1;
        PyObject *tmp_subscribed_name_1;
        PyObject *tmp_subscript_name_1;
        PyObject *tmp_bases_name_1;
        tmp_key_name_1 = const_str_plain_metaclass;
        CHECK_OBJECT( tmp_class_creation_1__class_decl_dict );
        tmp_dict_name_1 = tmp_class_creation_1__class_decl_dict;
        tmp_res = PyDict_Contains( tmp_dict_name_1, tmp_key_name_1 );
        if ( tmp_res == -1 )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 30;

            goto try_except_handler_2;
        }
        tmp_condition_result_1 = ( tmp_res != 0 ) ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
        if ( tmp_condition_result_1 == NUITKA_BOOL_TRUE )
        {
            goto condexpr_true_1;
        }
        else
        {
            goto condexpr_false_1;
        }
        condexpr_true_1:;
        CHECK_OBJECT( tmp_class_creation_1__class_decl_dict );
        tmp_dict_name_2 = tmp_class_creation_1__class_decl_dict;
        tmp_key_name_2 = const_str_plain_metaclass;
        tmp_metaclass_name_1 = DICT_GET_ITEM( tmp_dict_name_2, tmp_key_name_2 );
        if ( tmp_metaclass_name_1 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 30;

            goto try_except_handler_2;
        }
        goto condexpr_end_1;
        condexpr_false_1:;
        CHECK_OBJECT( tmp_class_creation_1__bases );
        tmp_truth_name_1 = CHECK_IF_TRUE( tmp_class_creation_1__bases );
        if ( tmp_truth_name_1 == -1 )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 30;

            goto try_except_handler_2;
        }
        tmp_condition_result_2 = tmp_truth_name_1 == 1 ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
        if ( tmp_condition_result_2 == NUITKA_BOOL_TRUE )
        {
            goto condexpr_true_2;
        }
        else
        {
            goto condexpr_false_2;
        }
        condexpr_true_2:;
        CHECK_OBJECT( tmp_class_creation_1__bases );
        tmp_subscribed_name_1 = tmp_class_creation_1__bases;
        tmp_subscript_name_1 = const_int_0;
        tmp_type_arg_1 = LOOKUP_SUBSCRIPT_CONST( tmp_subscribed_name_1, tmp_subscript_name_1, 0 );
        if ( tmp_type_arg_1 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 30;

            goto try_except_handler_2;
        }
        tmp_metaclass_name_1 = BUILTIN_TYPE1( tmp_type_arg_1 );
        Py_DECREF( tmp_type_arg_1 );
        if ( tmp_metaclass_name_1 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 30;

            goto try_except_handler_2;
        }
        goto condexpr_end_2;
        condexpr_false_2:;
        tmp_metaclass_name_1 = (PyObject *)&PyType_Type;
        Py_INCREF( tmp_metaclass_name_1 );
        condexpr_end_2:;
        condexpr_end_1:;
        CHECK_OBJECT( tmp_class_creation_1__bases );
        tmp_bases_name_1 = tmp_class_creation_1__bases;
        tmp_assign_source_19 = SELECT_METACLASS( tmp_metaclass_name_1, tmp_bases_name_1 );
        Py_DECREF( tmp_metaclass_name_1 );
        if ( tmp_assign_source_19 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 30;

            goto try_except_handler_2;
        }
        assert( tmp_class_creation_1__metaclass == NULL );
        tmp_class_creation_1__metaclass = tmp_assign_source_19;
    }
    {
        nuitka_bool tmp_condition_result_3;
        PyObject *tmp_key_name_3;
        PyObject *tmp_dict_name_3;
        tmp_key_name_3 = const_str_plain_metaclass;
        CHECK_OBJECT( tmp_class_creation_1__class_decl_dict );
        tmp_dict_name_3 = tmp_class_creation_1__class_decl_dict;
        tmp_res = PyDict_Contains( tmp_dict_name_3, tmp_key_name_3 );
        if ( tmp_res == -1 )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 30;

            goto try_except_handler_2;
        }
        tmp_condition_result_3 = ( tmp_res != 0 ) ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
        if ( tmp_condition_result_3 == NUITKA_BOOL_TRUE )
        {
            goto branch_yes_1;
        }
        else
        {
            goto branch_no_1;
        }
        branch_yes_1:;
        CHECK_OBJECT( tmp_class_creation_1__class_decl_dict );
        tmp_dictdel_dict = tmp_class_creation_1__class_decl_dict;
        tmp_dictdel_key = const_str_plain_metaclass;
        tmp_result = DICT_REMOVE_ITEM( tmp_dictdel_dict, tmp_dictdel_key );
        if ( tmp_result == false )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 30;

            goto try_except_handler_2;
        }
        branch_no_1:;
    }
    {
        nuitka_bool tmp_condition_result_4;
        PyObject *tmp_source_name_1;
        CHECK_OBJECT( tmp_class_creation_1__metaclass );
        tmp_source_name_1 = tmp_class_creation_1__metaclass;
        tmp_res = PyObject_HasAttr( tmp_source_name_1, const_str_plain___prepare__ );
        tmp_condition_result_4 = ( tmp_res != 0 ) ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
        if ( tmp_condition_result_4 == NUITKA_BOOL_TRUE )
        {
            goto branch_yes_2;
        }
        else
        {
            goto branch_no_2;
        }
        branch_yes_2:;
        {
            PyObject *tmp_assign_source_20;
            PyObject *tmp_called_name_1;
            PyObject *tmp_source_name_2;
            PyObject *tmp_args_name_1;
            PyObject *tmp_tuple_element_1;
            PyObject *tmp_kw_name_1;
            CHECK_OBJECT( tmp_class_creation_1__metaclass );
            tmp_source_name_2 = tmp_class_creation_1__metaclass;
            tmp_called_name_1 = LOOKUP_ATTRIBUTE( tmp_source_name_2, const_str_plain___prepare__ );
            if ( tmp_called_name_1 == NULL )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 30;

                goto try_except_handler_2;
            }
            tmp_tuple_element_1 = const_str_plain_LocaleTime;
            tmp_args_name_1 = PyTuple_New( 2 );
            Py_INCREF( tmp_tuple_element_1 );
            PyTuple_SET_ITEM( tmp_args_name_1, 0, tmp_tuple_element_1 );
            CHECK_OBJECT( tmp_class_creation_1__bases );
            tmp_tuple_element_1 = tmp_class_creation_1__bases;
            Py_INCREF( tmp_tuple_element_1 );
            PyTuple_SET_ITEM( tmp_args_name_1, 1, tmp_tuple_element_1 );
            CHECK_OBJECT( tmp_class_creation_1__class_decl_dict );
            tmp_kw_name_1 = tmp_class_creation_1__class_decl_dict;
            frame_7438384fed32ebca9a6ff01bccfb3fea->m_frame.f_lineno = 30;
            tmp_assign_source_20 = CALL_FUNCTION( tmp_called_name_1, tmp_args_name_1, tmp_kw_name_1 );
            Py_DECREF( tmp_called_name_1 );
            Py_DECREF( tmp_args_name_1 );
            if ( tmp_assign_source_20 == NULL )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 30;

                goto try_except_handler_2;
            }
            assert( tmp_class_creation_1__prepared == NULL );
            tmp_class_creation_1__prepared = tmp_assign_source_20;
        }
        {
            nuitka_bool tmp_condition_result_5;
            PyObject *tmp_operand_name_1;
            PyObject *tmp_source_name_3;
            CHECK_OBJECT( tmp_class_creation_1__prepared );
            tmp_source_name_3 = tmp_class_creation_1__prepared;
            tmp_res = PyObject_HasAttr( tmp_source_name_3, const_str_plain___getitem__ );
            tmp_operand_name_1 = ( tmp_res != 0 ) ? Py_True : Py_False;
            tmp_res = CHECK_IF_TRUE( tmp_operand_name_1 );
            if ( tmp_res == -1 )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 30;

                goto try_except_handler_2;
            }
            tmp_condition_result_5 = ( tmp_res == 0 ) ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
            if ( tmp_condition_result_5 == NUITKA_BOOL_TRUE )
            {
                goto branch_yes_3;
            }
            else
            {
                goto branch_no_3;
            }
            branch_yes_3:;
            {
                PyObject *tmp_raise_type_1;
                PyObject *tmp_raise_value_1;
                PyObject *tmp_left_name_1;
                PyObject *tmp_right_name_1;
                PyObject *tmp_tuple_element_2;
                PyObject *tmp_getattr_target_1;
                PyObject *tmp_getattr_attr_1;
                PyObject *tmp_getattr_default_1;
                PyObject *tmp_source_name_4;
                PyObject *tmp_type_arg_2;
                tmp_raise_type_1 = PyExc_TypeError;
                tmp_left_name_1 = const_str_digest_75fd71b1edada749c2ef7ac810062295;
                CHECK_OBJECT( tmp_class_creation_1__metaclass );
                tmp_getattr_target_1 = tmp_class_creation_1__metaclass;
                tmp_getattr_attr_1 = const_str_plain___name__;
                tmp_getattr_default_1 = const_str_angle_metaclass;
                tmp_tuple_element_2 = BUILTIN_GETATTR( tmp_getattr_target_1, tmp_getattr_attr_1, tmp_getattr_default_1 );
                if ( tmp_tuple_element_2 == NULL )
                {
                    assert( ERROR_OCCURRED() );

                    FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                    exception_lineno = 30;

                    goto try_except_handler_2;
                }
                tmp_right_name_1 = PyTuple_New( 2 );
                PyTuple_SET_ITEM( tmp_right_name_1, 0, tmp_tuple_element_2 );
                CHECK_OBJECT( tmp_class_creation_1__prepared );
                tmp_type_arg_2 = tmp_class_creation_1__prepared;
                tmp_source_name_4 = BUILTIN_TYPE1( tmp_type_arg_2 );
                assert( !(tmp_source_name_4 == NULL) );
                tmp_tuple_element_2 = LOOKUP_ATTRIBUTE( tmp_source_name_4, const_str_plain___name__ );
                Py_DECREF( tmp_source_name_4 );
                if ( tmp_tuple_element_2 == NULL )
                {
                    assert( ERROR_OCCURRED() );

                    FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
                    Py_DECREF( tmp_right_name_1 );

                    exception_lineno = 30;

                    goto try_except_handler_2;
                }
                PyTuple_SET_ITEM( tmp_right_name_1, 1, tmp_tuple_element_2 );
                tmp_raise_value_1 = BINARY_OPERATION_REMAINDER( tmp_left_name_1, tmp_right_name_1 );
                Py_DECREF( tmp_right_name_1 );
                if ( tmp_raise_value_1 == NULL )
                {
                    assert( ERROR_OCCURRED() );

                    FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                    exception_lineno = 30;

                    goto try_except_handler_2;
                }
                exception_type = tmp_raise_type_1;
                Py_INCREF( tmp_raise_type_1 );
                exception_value = tmp_raise_value_1;
                exception_lineno = 30;
                RAISE_EXCEPTION_IMPLICIT( &exception_type, &exception_value, &exception_tb );

                goto try_except_handler_2;
            }
            branch_no_3:;
        }
        goto branch_end_2;
        branch_no_2:;
        {
            PyObject *tmp_assign_source_21;
            tmp_assign_source_21 = PyDict_New();
            assert( tmp_class_creation_1__prepared == NULL );
            tmp_class_creation_1__prepared = tmp_assign_source_21;
        }
        branch_end_2:;
    }
    {
        PyObject *tmp_assign_source_22;
        {
            PyObject *tmp_set_locals_1;
            CHECK_OBJECT( tmp_class_creation_1__prepared );
            tmp_set_locals_1 = tmp_class_creation_1__prepared;
            locals__strptime_30 = tmp_set_locals_1;
            Py_INCREF( tmp_set_locals_1 );
        }
        // Tried code:
        // Tried code:
        tmp_dictset_value = const_str_plain__strptime;
        tmp_res = PyObject_SetItem( locals__strptime_30, const_str_plain___module__, tmp_dictset_value );
        if ( tmp_res != 0 )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 30;

            goto try_except_handler_4;
        }
        tmp_dictset_value = const_str_digest_5ef42c1c23e9dfdbef08a75419973057;
        tmp_res = PyObject_SetItem( locals__strptime_30, const_str_plain___doc__, tmp_dictset_value );
        if ( tmp_res != 0 )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 30;

            goto try_except_handler_4;
        }
        tmp_dictset_value = const_str_plain_LocaleTime;
        tmp_res = PyObject_SetItem( locals__strptime_30, const_str_plain___qualname__, tmp_dictset_value );
        if ( tmp_res != 0 )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 30;

            goto try_except_handler_4;
        }
        MAKE_OR_REUSE_FRAME( cache_frame_43b4ad36a6908d2a03719ed1490267d8_2, codeobj_43b4ad36a6908d2a03719ed1490267d8, module__strptime, sizeof(void *) );
        frame_43b4ad36a6908d2a03719ed1490267d8_2 = cache_frame_43b4ad36a6908d2a03719ed1490267d8_2;

        // Push the new frame as the currently active one.
        pushFrameStack( frame_43b4ad36a6908d2a03719ed1490267d8_2 );

        // Mark the frame object as in use, ref count 1 will be up for reuse.
        assert( Py_REFCNT( frame_43b4ad36a6908d2a03719ed1490267d8_2 ) == 2 ); // Frame stack

        // Framed code:
        tmp_dictset_value = MAKE_FUNCTION__strptime$$$function_2___init__(  );



        tmp_res = PyObject_SetItem( locals__strptime_30, const_str_plain___init__, tmp_dictset_value );
        Py_DECREF( tmp_dictset_value );
        if ( tmp_res != 0 )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 49;
            type_description_2 = "o";
            goto frame_exception_exit_2;
        }
        tmp_dictset_value = MAKE_FUNCTION__strptime$$$function_3___pad(  );



        tmp_res = PyObject_SetItem( locals__strptime_30, const_str_plain__LocaleTime__pad, tmp_dictset_value );
        Py_DECREF( tmp_dictset_value );
        if ( tmp_res != 0 )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 80;
            type_description_2 = "o";
            goto frame_exception_exit_2;
        }
        tmp_dictset_value = MAKE_FUNCTION__strptime$$$function_4___calc_weekday(  );



        tmp_res = PyObject_SetItem( locals__strptime_30, const_str_plain__LocaleTime__calc_weekday, tmp_dictset_value );
        Py_DECREF( tmp_dictset_value );
        if ( tmp_res != 0 )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 89;
            type_description_2 = "o";
            goto frame_exception_exit_2;
        }
        tmp_dictset_value = MAKE_FUNCTION__strptime$$$function_5___calc_month(  );



        tmp_res = PyObject_SetItem( locals__strptime_30, const_str_plain__LocaleTime__calc_month, tmp_dictset_value );
        Py_DECREF( tmp_dictset_value );
        if ( tmp_res != 0 )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 97;
            type_description_2 = "o";
            goto frame_exception_exit_2;
        }
        tmp_dictset_value = MAKE_FUNCTION__strptime$$$function_6___calc_am_pm(  );



        tmp_res = PyObject_SetItem( locals__strptime_30, const_str_plain__LocaleTime__calc_am_pm, tmp_dictset_value );
        Py_DECREF( tmp_dictset_value );
        if ( tmp_res != 0 )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 104;
            type_description_2 = "o";
            goto frame_exception_exit_2;
        }
        tmp_dictset_value = MAKE_FUNCTION__strptime$$$function_7___calc_date_time(  );



        tmp_res = PyObject_SetItem( locals__strptime_30, const_str_plain__LocaleTime__calc_date_time, tmp_dictset_value );
        Py_DECREF( tmp_dictset_value );
        if ( tmp_res != 0 )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 116;
            type_description_2 = "o";
            goto frame_exception_exit_2;
        }
        tmp_dictset_value = MAKE_FUNCTION__strptime$$$function_8___calc_timezone(  );



        tmp_res = PyObject_SetItem( locals__strptime_30, const_str_plain__LocaleTime__calc_timezone, tmp_dictset_value );
        Py_DECREF( tmp_dictset_value );
        if ( tmp_res != 0 )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 161;
            type_description_2 = "o";
            goto frame_exception_exit_2;
        }

#if 0
        RESTORE_FRAME_EXCEPTION( frame_43b4ad36a6908d2a03719ed1490267d8_2 );
#endif

        // Put the previous frame back on top.
        popFrameStack();

        goto frame_no_exception_1;

        frame_exception_exit_2:;

#if 0
        RESTORE_FRAME_EXCEPTION( frame_43b4ad36a6908d2a03719ed1490267d8_2 );
#endif

        if ( exception_tb == NULL )
        {
            exception_tb = MAKE_TRACEBACK( frame_43b4ad36a6908d2a03719ed1490267d8_2, exception_lineno );
        }
        else if ( exception_tb->tb_frame != &frame_43b4ad36a6908d2a03719ed1490267d8_2->m_frame )
        {
            exception_tb = ADD_TRACEBACK( exception_tb, frame_43b4ad36a6908d2a03719ed1490267d8_2, exception_lineno );
        }

        // Attachs locals to frame if any.
        Nuitka_Frame_AttachLocals(
            (struct Nuitka_FrameObject *)frame_43b4ad36a6908d2a03719ed1490267d8_2,
            type_description_2,
            outline_0_var___class__
        );


        // Release cached frame.
        if ( frame_43b4ad36a6908d2a03719ed1490267d8_2 == cache_frame_43b4ad36a6908d2a03719ed1490267d8_2 )
        {
            Py_DECREF( frame_43b4ad36a6908d2a03719ed1490267d8_2 );
        }
        cache_frame_43b4ad36a6908d2a03719ed1490267d8_2 = NULL;

        assertFrameObject( frame_43b4ad36a6908d2a03719ed1490267d8_2 );

        // Put the previous frame back on top.
        popFrameStack();

        // Return the error.
        goto nested_frame_exit_1;

        frame_no_exception_1:;
        goto skip_nested_handling_1;
        nested_frame_exit_1:;

        goto try_except_handler_4;
        skip_nested_handling_1:;
        {
            nuitka_bool tmp_condition_result_6;
            PyObject *tmp_compexpr_left_1;
            PyObject *tmp_compexpr_right_1;
            CHECK_OBJECT( tmp_class_creation_1__bases );
            tmp_compexpr_left_1 = tmp_class_creation_1__bases;
            tmp_compexpr_right_1 = const_tuple_type_object_tuple;
            tmp_res = RICH_COMPARE_BOOL_NOTEQ_OBJECT_OBJECT( tmp_compexpr_left_1, tmp_compexpr_right_1 );
            if ( tmp_res == -1 )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 30;

                goto try_except_handler_4;
            }
            tmp_condition_result_6 = ( tmp_res != 0 ) ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
            if ( tmp_condition_result_6 == NUITKA_BOOL_TRUE )
            {
                goto branch_yes_4;
            }
            else
            {
                goto branch_no_4;
            }
            branch_yes_4:;
            tmp_dictset_value = const_tuple_type_object_tuple;
            tmp_res = PyObject_SetItem( locals__strptime_30, const_str_plain___orig_bases__, tmp_dictset_value );
            if ( tmp_res != 0 )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 30;

                goto try_except_handler_4;
            }
            branch_no_4:;
        }
        {
            PyObject *tmp_assign_source_23;
            PyObject *tmp_called_name_2;
            PyObject *tmp_args_name_2;
            PyObject *tmp_tuple_element_3;
            PyObject *tmp_kw_name_2;
            CHECK_OBJECT( tmp_class_creation_1__metaclass );
            tmp_called_name_2 = tmp_class_creation_1__metaclass;
            tmp_tuple_element_3 = const_str_plain_LocaleTime;
            tmp_args_name_2 = PyTuple_New( 3 );
            Py_INCREF( tmp_tuple_element_3 );
            PyTuple_SET_ITEM( tmp_args_name_2, 0, tmp_tuple_element_3 );
            CHECK_OBJECT( tmp_class_creation_1__bases );
            tmp_tuple_element_3 = tmp_class_creation_1__bases;
            Py_INCREF( tmp_tuple_element_3 );
            PyTuple_SET_ITEM( tmp_args_name_2, 1, tmp_tuple_element_3 );
            tmp_tuple_element_3 = locals__strptime_30;
            Py_INCREF( tmp_tuple_element_3 );
            PyTuple_SET_ITEM( tmp_args_name_2, 2, tmp_tuple_element_3 );
            CHECK_OBJECT( tmp_class_creation_1__class_decl_dict );
            tmp_kw_name_2 = tmp_class_creation_1__class_decl_dict;
            frame_7438384fed32ebca9a6ff01bccfb3fea->m_frame.f_lineno = 30;
            tmp_assign_source_23 = CALL_FUNCTION( tmp_called_name_2, tmp_args_name_2, tmp_kw_name_2 );
            Py_DECREF( tmp_args_name_2 );
            if ( tmp_assign_source_23 == NULL )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 30;

                goto try_except_handler_4;
            }
            assert( outline_0_var___class__ == NULL );
            outline_0_var___class__ = tmp_assign_source_23;
        }
        CHECK_OBJECT( outline_0_var___class__ );
        tmp_assign_source_22 = outline_0_var___class__;
        Py_INCREF( tmp_assign_source_22 );
        goto try_return_handler_4;
        // tried codes exits in all cases
        NUITKA_CANNOT_GET_HERE( _strptime );
        return MOD_RETURN_VALUE( NULL );
        // Return handler code:
        try_return_handler_4:;
        Py_DECREF( locals__strptime_30 );
        locals__strptime_30 = NULL;
        goto try_return_handler_3;
        // Exception handler code:
        try_except_handler_4:;
        exception_keeper_type_2 = exception_type;
        exception_keeper_value_2 = exception_value;
        exception_keeper_tb_2 = exception_tb;
        exception_keeper_lineno_2 = exception_lineno;
        exception_type = NULL;
        exception_value = NULL;
        exception_tb = NULL;
        exception_lineno = 0;

        Py_DECREF( locals__strptime_30 );
        locals__strptime_30 = NULL;
        // Re-raise.
        exception_type = exception_keeper_type_2;
        exception_value = exception_keeper_value_2;
        exception_tb = exception_keeper_tb_2;
        exception_lineno = exception_keeper_lineno_2;

        goto try_except_handler_3;
        // End of try:
        // tried codes exits in all cases
        NUITKA_CANNOT_GET_HERE( _strptime );
        return MOD_RETURN_VALUE( NULL );
        // Return handler code:
        try_return_handler_3:;
        CHECK_OBJECT( (PyObject *)outline_0_var___class__ );
        Py_DECREF( outline_0_var___class__ );
        outline_0_var___class__ = NULL;

        goto outline_result_1;
        // Exception handler code:
        try_except_handler_3:;
        exception_keeper_type_3 = exception_type;
        exception_keeper_value_3 = exception_value;
        exception_keeper_tb_3 = exception_tb;
        exception_keeper_lineno_3 = exception_lineno;
        exception_type = NULL;
        exception_value = NULL;
        exception_tb = NULL;
        exception_lineno = 0;

        // Re-raise.
        exception_type = exception_keeper_type_3;
        exception_value = exception_keeper_value_3;
        exception_tb = exception_keeper_tb_3;
        exception_lineno = exception_keeper_lineno_3;

        goto outline_exception_1;
        // End of try:
        // Return statement must have exited already.
        NUITKA_CANNOT_GET_HERE( _strptime );
        return MOD_RETURN_VALUE( NULL );
        outline_exception_1:;
        exception_lineno = 30;
        goto try_except_handler_2;
        outline_result_1:;
        UPDATE_STRING_DICT1( moduledict__strptime, (Nuitka_StringObject *)const_str_plain_LocaleTime, tmp_assign_source_22 );
    }
    goto try_end_2;
    // Exception handler code:
    try_except_handler_2:;
    exception_keeper_type_4 = exception_type;
    exception_keeper_value_4 = exception_value;
    exception_keeper_tb_4 = exception_tb;
    exception_keeper_lineno_4 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    Py_XDECREF( tmp_class_creation_1__bases );
    tmp_class_creation_1__bases = NULL;

    Py_XDECREF( tmp_class_creation_1__class_decl_dict );
    tmp_class_creation_1__class_decl_dict = NULL;

    Py_XDECREF( tmp_class_creation_1__metaclass );
    tmp_class_creation_1__metaclass = NULL;

    Py_XDECREF( tmp_class_creation_1__prepared );
    tmp_class_creation_1__prepared = NULL;

    // Re-raise.
    exception_type = exception_keeper_type_4;
    exception_value = exception_keeper_value_4;
    exception_tb = exception_keeper_tb_4;
    exception_lineno = exception_keeper_lineno_4;

    goto frame_exception_exit_1;
    // End of try:
    try_end_2:;
    CHECK_OBJECT( (PyObject *)tmp_class_creation_1__bases );
    Py_DECREF( tmp_class_creation_1__bases );
    tmp_class_creation_1__bases = NULL;

    CHECK_OBJECT( (PyObject *)tmp_class_creation_1__class_decl_dict );
    Py_DECREF( tmp_class_creation_1__class_decl_dict );
    tmp_class_creation_1__class_decl_dict = NULL;

    CHECK_OBJECT( (PyObject *)tmp_class_creation_1__metaclass );
    Py_DECREF( tmp_class_creation_1__metaclass );
    tmp_class_creation_1__metaclass = NULL;

    CHECK_OBJECT( (PyObject *)tmp_class_creation_1__prepared );
    Py_DECREF( tmp_class_creation_1__prepared );
    tmp_class_creation_1__prepared = NULL;

    // Tried code:
    {
        PyObject *tmp_assign_source_24;
        PyObject *tmp_dircall_arg1_2;
        tmp_dircall_arg1_2 = const_tuple_type_dict_tuple;
        Py_INCREF( tmp_dircall_arg1_2 );

        {
            PyObject *dir_call_args[] = {tmp_dircall_arg1_2};
            tmp_assign_source_24 = impl___internal__$$$function_1__mro_entries_conversion( dir_call_args );
        }
        if ( tmp_assign_source_24 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 179;

            goto try_except_handler_5;
        }
        assert( tmp_class_creation_2__bases == NULL );
        tmp_class_creation_2__bases = tmp_assign_source_24;
    }
    {
        PyObject *tmp_assign_source_25;
        tmp_assign_source_25 = PyDict_New();
        assert( tmp_class_creation_2__class_decl_dict == NULL );
        tmp_class_creation_2__class_decl_dict = tmp_assign_source_25;
    }
    {
        PyObject *tmp_assign_source_26;
        PyObject *tmp_metaclass_name_2;
        nuitka_bool tmp_condition_result_7;
        PyObject *tmp_key_name_4;
        PyObject *tmp_dict_name_4;
        PyObject *tmp_dict_name_5;
        PyObject *tmp_key_name_5;
        nuitka_bool tmp_condition_result_8;
        int tmp_truth_name_2;
        PyObject *tmp_type_arg_3;
        PyObject *tmp_subscribed_name_2;
        PyObject *tmp_subscript_name_2;
        PyObject *tmp_bases_name_2;
        tmp_key_name_4 = const_str_plain_metaclass;
        CHECK_OBJECT( tmp_class_creation_2__class_decl_dict );
        tmp_dict_name_4 = tmp_class_creation_2__class_decl_dict;
        tmp_res = PyDict_Contains( tmp_dict_name_4, tmp_key_name_4 );
        if ( tmp_res == -1 )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 179;

            goto try_except_handler_5;
        }
        tmp_condition_result_7 = ( tmp_res != 0 ) ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
        if ( tmp_condition_result_7 == NUITKA_BOOL_TRUE )
        {
            goto condexpr_true_3;
        }
        else
        {
            goto condexpr_false_3;
        }
        condexpr_true_3:;
        CHECK_OBJECT( tmp_class_creation_2__class_decl_dict );
        tmp_dict_name_5 = tmp_class_creation_2__class_decl_dict;
        tmp_key_name_5 = const_str_plain_metaclass;
        tmp_metaclass_name_2 = DICT_GET_ITEM( tmp_dict_name_5, tmp_key_name_5 );
        if ( tmp_metaclass_name_2 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 179;

            goto try_except_handler_5;
        }
        goto condexpr_end_3;
        condexpr_false_3:;
        CHECK_OBJECT( tmp_class_creation_2__bases );
        tmp_truth_name_2 = CHECK_IF_TRUE( tmp_class_creation_2__bases );
        if ( tmp_truth_name_2 == -1 )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 179;

            goto try_except_handler_5;
        }
        tmp_condition_result_8 = tmp_truth_name_2 == 1 ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
        if ( tmp_condition_result_8 == NUITKA_BOOL_TRUE )
        {
            goto condexpr_true_4;
        }
        else
        {
            goto condexpr_false_4;
        }
        condexpr_true_4:;
        CHECK_OBJECT( tmp_class_creation_2__bases );
        tmp_subscribed_name_2 = tmp_class_creation_2__bases;
        tmp_subscript_name_2 = const_int_0;
        tmp_type_arg_3 = LOOKUP_SUBSCRIPT_CONST( tmp_subscribed_name_2, tmp_subscript_name_2, 0 );
        if ( tmp_type_arg_3 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 179;

            goto try_except_handler_5;
        }
        tmp_metaclass_name_2 = BUILTIN_TYPE1( tmp_type_arg_3 );
        Py_DECREF( tmp_type_arg_3 );
        if ( tmp_metaclass_name_2 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 179;

            goto try_except_handler_5;
        }
        goto condexpr_end_4;
        condexpr_false_4:;
        tmp_metaclass_name_2 = (PyObject *)&PyType_Type;
        Py_INCREF( tmp_metaclass_name_2 );
        condexpr_end_4:;
        condexpr_end_3:;
        CHECK_OBJECT( tmp_class_creation_2__bases );
        tmp_bases_name_2 = tmp_class_creation_2__bases;
        tmp_assign_source_26 = SELECT_METACLASS( tmp_metaclass_name_2, tmp_bases_name_2 );
        Py_DECREF( tmp_metaclass_name_2 );
        if ( tmp_assign_source_26 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 179;

            goto try_except_handler_5;
        }
        assert( tmp_class_creation_2__metaclass == NULL );
        tmp_class_creation_2__metaclass = tmp_assign_source_26;
    }
    {
        nuitka_bool tmp_condition_result_9;
        PyObject *tmp_key_name_6;
        PyObject *tmp_dict_name_6;
        tmp_key_name_6 = const_str_plain_metaclass;
        CHECK_OBJECT( tmp_class_creation_2__class_decl_dict );
        tmp_dict_name_6 = tmp_class_creation_2__class_decl_dict;
        tmp_res = PyDict_Contains( tmp_dict_name_6, tmp_key_name_6 );
        if ( tmp_res == -1 )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 179;

            goto try_except_handler_5;
        }
        tmp_condition_result_9 = ( tmp_res != 0 ) ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
        if ( tmp_condition_result_9 == NUITKA_BOOL_TRUE )
        {
            goto branch_yes_5;
        }
        else
        {
            goto branch_no_5;
        }
        branch_yes_5:;
        CHECK_OBJECT( tmp_class_creation_2__class_decl_dict );
        tmp_dictdel_dict = tmp_class_creation_2__class_decl_dict;
        tmp_dictdel_key = const_str_plain_metaclass;
        tmp_result = DICT_REMOVE_ITEM( tmp_dictdel_dict, tmp_dictdel_key );
        if ( tmp_result == false )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 179;

            goto try_except_handler_5;
        }
        branch_no_5:;
    }
    {
        nuitka_bool tmp_condition_result_10;
        PyObject *tmp_source_name_5;
        CHECK_OBJECT( tmp_class_creation_2__metaclass );
        tmp_source_name_5 = tmp_class_creation_2__metaclass;
        tmp_res = PyObject_HasAttr( tmp_source_name_5, const_str_plain___prepare__ );
        tmp_condition_result_10 = ( tmp_res != 0 ) ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
        if ( tmp_condition_result_10 == NUITKA_BOOL_TRUE )
        {
            goto branch_yes_6;
        }
        else
        {
            goto branch_no_6;
        }
        branch_yes_6:;
        {
            PyObject *tmp_assign_source_27;
            PyObject *tmp_called_name_3;
            PyObject *tmp_source_name_6;
            PyObject *tmp_args_name_3;
            PyObject *tmp_tuple_element_4;
            PyObject *tmp_kw_name_3;
            CHECK_OBJECT( tmp_class_creation_2__metaclass );
            tmp_source_name_6 = tmp_class_creation_2__metaclass;
            tmp_called_name_3 = LOOKUP_ATTRIBUTE( tmp_source_name_6, const_str_plain___prepare__ );
            if ( tmp_called_name_3 == NULL )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 179;

                goto try_except_handler_5;
            }
            tmp_tuple_element_4 = const_str_plain_TimeRE;
            tmp_args_name_3 = PyTuple_New( 2 );
            Py_INCREF( tmp_tuple_element_4 );
            PyTuple_SET_ITEM( tmp_args_name_3, 0, tmp_tuple_element_4 );
            CHECK_OBJECT( tmp_class_creation_2__bases );
            tmp_tuple_element_4 = tmp_class_creation_2__bases;
            Py_INCREF( tmp_tuple_element_4 );
            PyTuple_SET_ITEM( tmp_args_name_3, 1, tmp_tuple_element_4 );
            CHECK_OBJECT( tmp_class_creation_2__class_decl_dict );
            tmp_kw_name_3 = tmp_class_creation_2__class_decl_dict;
            frame_7438384fed32ebca9a6ff01bccfb3fea->m_frame.f_lineno = 179;
            tmp_assign_source_27 = CALL_FUNCTION( tmp_called_name_3, tmp_args_name_3, tmp_kw_name_3 );
            Py_DECREF( tmp_called_name_3 );
            Py_DECREF( tmp_args_name_3 );
            if ( tmp_assign_source_27 == NULL )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 179;

                goto try_except_handler_5;
            }
            assert( tmp_class_creation_2__prepared == NULL );
            tmp_class_creation_2__prepared = tmp_assign_source_27;
        }
        {
            nuitka_bool tmp_condition_result_11;
            PyObject *tmp_operand_name_2;
            PyObject *tmp_source_name_7;
            CHECK_OBJECT( tmp_class_creation_2__prepared );
            tmp_source_name_7 = tmp_class_creation_2__prepared;
            tmp_res = PyObject_HasAttr( tmp_source_name_7, const_str_plain___getitem__ );
            tmp_operand_name_2 = ( tmp_res != 0 ) ? Py_True : Py_False;
            tmp_res = CHECK_IF_TRUE( tmp_operand_name_2 );
            if ( tmp_res == -1 )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 179;

                goto try_except_handler_5;
            }
            tmp_condition_result_11 = ( tmp_res == 0 ) ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
            if ( tmp_condition_result_11 == NUITKA_BOOL_TRUE )
            {
                goto branch_yes_7;
            }
            else
            {
                goto branch_no_7;
            }
            branch_yes_7:;
            {
                PyObject *tmp_raise_type_2;
                PyObject *tmp_raise_value_2;
                PyObject *tmp_left_name_2;
                PyObject *tmp_right_name_2;
                PyObject *tmp_tuple_element_5;
                PyObject *tmp_getattr_target_2;
                PyObject *tmp_getattr_attr_2;
                PyObject *tmp_getattr_default_2;
                PyObject *tmp_source_name_8;
                PyObject *tmp_type_arg_4;
                tmp_raise_type_2 = PyExc_TypeError;
                tmp_left_name_2 = const_str_digest_75fd71b1edada749c2ef7ac810062295;
                CHECK_OBJECT( tmp_class_creation_2__metaclass );
                tmp_getattr_target_2 = tmp_class_creation_2__metaclass;
                tmp_getattr_attr_2 = const_str_plain___name__;
                tmp_getattr_default_2 = const_str_angle_metaclass;
                tmp_tuple_element_5 = BUILTIN_GETATTR( tmp_getattr_target_2, tmp_getattr_attr_2, tmp_getattr_default_2 );
                if ( tmp_tuple_element_5 == NULL )
                {
                    assert( ERROR_OCCURRED() );

                    FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                    exception_lineno = 179;

                    goto try_except_handler_5;
                }
                tmp_right_name_2 = PyTuple_New( 2 );
                PyTuple_SET_ITEM( tmp_right_name_2, 0, tmp_tuple_element_5 );
                CHECK_OBJECT( tmp_class_creation_2__prepared );
                tmp_type_arg_4 = tmp_class_creation_2__prepared;
                tmp_source_name_8 = BUILTIN_TYPE1( tmp_type_arg_4 );
                assert( !(tmp_source_name_8 == NULL) );
                tmp_tuple_element_5 = LOOKUP_ATTRIBUTE( tmp_source_name_8, const_str_plain___name__ );
                Py_DECREF( tmp_source_name_8 );
                if ( tmp_tuple_element_5 == NULL )
                {
                    assert( ERROR_OCCURRED() );

                    FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );
                    Py_DECREF( tmp_right_name_2 );

                    exception_lineno = 179;

                    goto try_except_handler_5;
                }
                PyTuple_SET_ITEM( tmp_right_name_2, 1, tmp_tuple_element_5 );
                tmp_raise_value_2 = BINARY_OPERATION_REMAINDER( tmp_left_name_2, tmp_right_name_2 );
                Py_DECREF( tmp_right_name_2 );
                if ( tmp_raise_value_2 == NULL )
                {
                    assert( ERROR_OCCURRED() );

                    FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                    exception_lineno = 179;

                    goto try_except_handler_5;
                }
                exception_type = tmp_raise_type_2;
                Py_INCREF( tmp_raise_type_2 );
                exception_value = tmp_raise_value_2;
                exception_lineno = 179;
                RAISE_EXCEPTION_IMPLICIT( &exception_type, &exception_value, &exception_tb );

                goto try_except_handler_5;
            }
            branch_no_7:;
        }
        goto branch_end_6;
        branch_no_6:;
        {
            PyObject *tmp_assign_source_28;
            tmp_assign_source_28 = PyDict_New();
            assert( tmp_class_creation_2__prepared == NULL );
            tmp_class_creation_2__prepared = tmp_assign_source_28;
        }
        branch_end_6:;
    }
    {
        PyObject *tmp_assign_source_29;
        {
            PyObject *tmp_set_locals_2;
            CHECK_OBJECT( tmp_class_creation_2__prepared );
            tmp_set_locals_2 = tmp_class_creation_2__prepared;
            locals__strptime_179 = tmp_set_locals_2;
            Py_INCREF( tmp_set_locals_2 );
        }
        // Tried code:
        // Tried code:
        tmp_dictset_value = const_str_plain__strptime;
        tmp_res = PyObject_SetItem( locals__strptime_179, const_str_plain___module__, tmp_dictset_value );
        if ( tmp_res != 0 )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 179;

            goto try_except_handler_7;
        }
        tmp_dictset_value = const_str_digest_45e05c6158b924d4dd8bd9acaeecb0a4;
        tmp_res = PyObject_SetItem( locals__strptime_179, const_str_plain___doc__, tmp_dictset_value );
        if ( tmp_res != 0 )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 179;

            goto try_except_handler_7;
        }
        tmp_dictset_value = const_str_plain_TimeRE;
        tmp_res = PyObject_SetItem( locals__strptime_179, const_str_plain___qualname__, tmp_dictset_value );
        if ( tmp_res != 0 )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 179;

            goto try_except_handler_7;
        }
        MAKE_OR_REUSE_FRAME( cache_frame_3e06da09ee1ae5362db794a4fe90f5c2_3, codeobj_3e06da09ee1ae5362db794a4fe90f5c2, module__strptime, sizeof(void *) );
        frame_3e06da09ee1ae5362db794a4fe90f5c2_3 = cache_frame_3e06da09ee1ae5362db794a4fe90f5c2_3;

        // Push the new frame as the currently active one.
        pushFrameStack( frame_3e06da09ee1ae5362db794a4fe90f5c2_3 );

        // Mark the frame object as in use, ref count 1 will be up for reuse.
        assert( Py_REFCNT( frame_3e06da09ee1ae5362db794a4fe90f5c2_3 ) == 2 ); // Frame stack

        // Framed code:
        {
            PyObject *tmp_defaults_1;
            tmp_defaults_1 = const_tuple_none_tuple;
            Py_INCREF( tmp_defaults_1 );
            tmp_dictset_value = MAKE_FUNCTION__strptime$$$function_9___init__( tmp_defaults_1 );

            ((struct Nuitka_FunctionObject *)tmp_dictset_value)->m_closure[0] = outline_1_var___class__;
            Py_INCREF( ((struct Nuitka_FunctionObject *)tmp_dictset_value)->m_closure[0] );


            tmp_res = PyObject_SetItem( locals__strptime_179, const_str_plain___init__, tmp_dictset_value );
            Py_DECREF( tmp_dictset_value );
            if ( tmp_res != 0 )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 182;
                type_description_2 = "c";
                goto frame_exception_exit_3;
            }
        }
        tmp_dictset_value = MAKE_FUNCTION__strptime$$$function_10___seqToRE(  );



        tmp_res = PyObject_SetItem( locals__strptime_179, const_str_plain__TimeRE__seqToRE, tmp_dictset_value );
        Py_DECREF( tmp_dictset_value );
        if ( tmp_res != 0 )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 228;
            type_description_2 = "c";
            goto frame_exception_exit_3;
        }
        tmp_dictset_value = MAKE_FUNCTION__strptime$$$function_11_pattern(  );



        tmp_res = PyObject_SetItem( locals__strptime_179, const_str_plain_pattern, tmp_dictset_value );
        Py_DECREF( tmp_dictset_value );
        if ( tmp_res != 0 )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 247;
            type_description_2 = "c";
            goto frame_exception_exit_3;
        }
        tmp_dictset_value = MAKE_FUNCTION__strptime$$$function_12_compile(  );



        tmp_res = PyObject_SetItem( locals__strptime_179, const_str_plain_compile, tmp_dictset_value );
        Py_DECREF( tmp_dictset_value );
        if ( tmp_res != 0 )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 270;
            type_description_2 = "c";
            goto frame_exception_exit_3;
        }

#if 0
        RESTORE_FRAME_EXCEPTION( frame_3e06da09ee1ae5362db794a4fe90f5c2_3 );
#endif

        // Put the previous frame back on top.
        popFrameStack();

        goto frame_no_exception_2;

        frame_exception_exit_3:;

#if 0
        RESTORE_FRAME_EXCEPTION( frame_3e06da09ee1ae5362db794a4fe90f5c2_3 );
#endif

        if ( exception_tb == NULL )
        {
            exception_tb = MAKE_TRACEBACK( frame_3e06da09ee1ae5362db794a4fe90f5c2_3, exception_lineno );
        }
        else if ( exception_tb->tb_frame != &frame_3e06da09ee1ae5362db794a4fe90f5c2_3->m_frame )
        {
            exception_tb = ADD_TRACEBACK( exception_tb, frame_3e06da09ee1ae5362db794a4fe90f5c2_3, exception_lineno );
        }

        // Attachs locals to frame if any.
        Nuitka_Frame_AttachLocals(
            (struct Nuitka_FrameObject *)frame_3e06da09ee1ae5362db794a4fe90f5c2_3,
            type_description_2,
            outline_1_var___class__
        );


        // Release cached frame.
        if ( frame_3e06da09ee1ae5362db794a4fe90f5c2_3 == cache_frame_3e06da09ee1ae5362db794a4fe90f5c2_3 )
        {
            Py_DECREF( frame_3e06da09ee1ae5362db794a4fe90f5c2_3 );
        }
        cache_frame_3e06da09ee1ae5362db794a4fe90f5c2_3 = NULL;

        assertFrameObject( frame_3e06da09ee1ae5362db794a4fe90f5c2_3 );

        // Put the previous frame back on top.
        popFrameStack();

        // Return the error.
        goto nested_frame_exit_2;

        frame_no_exception_2:;
        goto skip_nested_handling_2;
        nested_frame_exit_2:;

        goto try_except_handler_7;
        skip_nested_handling_2:;
        {
            nuitka_bool tmp_condition_result_12;
            PyObject *tmp_compexpr_left_2;
            PyObject *tmp_compexpr_right_2;
            CHECK_OBJECT( tmp_class_creation_2__bases );
            tmp_compexpr_left_2 = tmp_class_creation_2__bases;
            tmp_compexpr_right_2 = const_tuple_type_dict_tuple;
            tmp_res = RICH_COMPARE_BOOL_NOTEQ_OBJECT_OBJECT( tmp_compexpr_left_2, tmp_compexpr_right_2 );
            if ( tmp_res == -1 )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 179;

                goto try_except_handler_7;
            }
            tmp_condition_result_12 = ( tmp_res != 0 ) ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
            if ( tmp_condition_result_12 == NUITKA_BOOL_TRUE )
            {
                goto branch_yes_8;
            }
            else
            {
                goto branch_no_8;
            }
            branch_yes_8:;
            tmp_dictset_value = const_tuple_type_dict_tuple;
            tmp_res = PyObject_SetItem( locals__strptime_179, const_str_plain___orig_bases__, tmp_dictset_value );
            if ( tmp_res != 0 )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 179;

                goto try_except_handler_7;
            }
            branch_no_8:;
        }
        {
            PyObject *tmp_assign_source_30;
            PyObject *tmp_called_name_4;
            PyObject *tmp_args_name_4;
            PyObject *tmp_tuple_element_6;
            PyObject *tmp_kw_name_4;
            CHECK_OBJECT( tmp_class_creation_2__metaclass );
            tmp_called_name_4 = tmp_class_creation_2__metaclass;
            tmp_tuple_element_6 = const_str_plain_TimeRE;
            tmp_args_name_4 = PyTuple_New( 3 );
            Py_INCREF( tmp_tuple_element_6 );
            PyTuple_SET_ITEM( tmp_args_name_4, 0, tmp_tuple_element_6 );
            CHECK_OBJECT( tmp_class_creation_2__bases );
            tmp_tuple_element_6 = tmp_class_creation_2__bases;
            Py_INCREF( tmp_tuple_element_6 );
            PyTuple_SET_ITEM( tmp_args_name_4, 1, tmp_tuple_element_6 );
            tmp_tuple_element_6 = locals__strptime_179;
            Py_INCREF( tmp_tuple_element_6 );
            PyTuple_SET_ITEM( tmp_args_name_4, 2, tmp_tuple_element_6 );
            CHECK_OBJECT( tmp_class_creation_2__class_decl_dict );
            tmp_kw_name_4 = tmp_class_creation_2__class_decl_dict;
            frame_7438384fed32ebca9a6ff01bccfb3fea->m_frame.f_lineno = 179;
            tmp_assign_source_30 = CALL_FUNCTION( tmp_called_name_4, tmp_args_name_4, tmp_kw_name_4 );
            Py_DECREF( tmp_args_name_4 );
            if ( tmp_assign_source_30 == NULL )
            {
                assert( ERROR_OCCURRED() );

                FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


                exception_lineno = 179;

                goto try_except_handler_7;
            }
            {
                PyObject *old = PyCell_GET( outline_1_var___class__ );
                PyCell_SET( outline_1_var___class__, tmp_assign_source_30 );
                Py_XDECREF( old );
            }

        }
        CHECK_OBJECT( PyCell_GET( outline_1_var___class__ ) );
        tmp_assign_source_29 = PyCell_GET( outline_1_var___class__ );
        Py_INCREF( tmp_assign_source_29 );
        goto try_return_handler_7;
        // tried codes exits in all cases
        NUITKA_CANNOT_GET_HERE( _strptime );
        return MOD_RETURN_VALUE( NULL );
        // Return handler code:
        try_return_handler_7:;
        Py_DECREF( locals__strptime_179 );
        locals__strptime_179 = NULL;
        goto try_return_handler_6;
        // Exception handler code:
        try_except_handler_7:;
        exception_keeper_type_5 = exception_type;
        exception_keeper_value_5 = exception_value;
        exception_keeper_tb_5 = exception_tb;
        exception_keeper_lineno_5 = exception_lineno;
        exception_type = NULL;
        exception_value = NULL;
        exception_tb = NULL;
        exception_lineno = 0;

        Py_DECREF( locals__strptime_179 );
        locals__strptime_179 = NULL;
        // Re-raise.
        exception_type = exception_keeper_type_5;
        exception_value = exception_keeper_value_5;
        exception_tb = exception_keeper_tb_5;
        exception_lineno = exception_keeper_lineno_5;

        goto try_except_handler_6;
        // End of try:
        // tried codes exits in all cases
        NUITKA_CANNOT_GET_HERE( _strptime );
        return MOD_RETURN_VALUE( NULL );
        // Return handler code:
        try_return_handler_6:;
        CHECK_OBJECT( (PyObject *)outline_1_var___class__ );
        Py_DECREF( outline_1_var___class__ );
        outline_1_var___class__ = NULL;

        goto outline_result_2;
        // Exception handler code:
        try_except_handler_6:;
        exception_keeper_type_6 = exception_type;
        exception_keeper_value_6 = exception_value;
        exception_keeper_tb_6 = exception_tb;
        exception_keeper_lineno_6 = exception_lineno;
        exception_type = NULL;
        exception_value = NULL;
        exception_tb = NULL;
        exception_lineno = 0;

        CHECK_OBJECT( (PyObject *)outline_1_var___class__ );
        Py_DECREF( outline_1_var___class__ );
        outline_1_var___class__ = NULL;

        // Re-raise.
        exception_type = exception_keeper_type_6;
        exception_value = exception_keeper_value_6;
        exception_tb = exception_keeper_tb_6;
        exception_lineno = exception_keeper_lineno_6;

        goto outline_exception_2;
        // End of try:
        // Return statement must have exited already.
        NUITKA_CANNOT_GET_HERE( _strptime );
        return MOD_RETURN_VALUE( NULL );
        outline_exception_2:;
        exception_lineno = 179;
        goto try_except_handler_5;
        outline_result_2:;
        UPDATE_STRING_DICT1( moduledict__strptime, (Nuitka_StringObject *)const_str_plain_TimeRE, tmp_assign_source_29 );
    }
    goto try_end_3;
    // Exception handler code:
    try_except_handler_5:;
    exception_keeper_type_7 = exception_type;
    exception_keeper_value_7 = exception_value;
    exception_keeper_tb_7 = exception_tb;
    exception_keeper_lineno_7 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    Py_XDECREF( tmp_class_creation_2__bases );
    tmp_class_creation_2__bases = NULL;

    Py_XDECREF( tmp_class_creation_2__class_decl_dict );
    tmp_class_creation_2__class_decl_dict = NULL;

    Py_XDECREF( tmp_class_creation_2__metaclass );
    tmp_class_creation_2__metaclass = NULL;

    Py_XDECREF( tmp_class_creation_2__prepared );
    tmp_class_creation_2__prepared = NULL;

    // Re-raise.
    exception_type = exception_keeper_type_7;
    exception_value = exception_keeper_value_7;
    exception_tb = exception_keeper_tb_7;
    exception_lineno = exception_keeper_lineno_7;

    goto frame_exception_exit_1;
    // End of try:
    try_end_3:;
    CHECK_OBJECT( (PyObject *)tmp_class_creation_2__bases );
    Py_DECREF( tmp_class_creation_2__bases );
    tmp_class_creation_2__bases = NULL;

    CHECK_OBJECT( (PyObject *)tmp_class_creation_2__class_decl_dict );
    Py_DECREF( tmp_class_creation_2__class_decl_dict );
    tmp_class_creation_2__class_decl_dict = NULL;

    CHECK_OBJECT( (PyObject *)tmp_class_creation_2__metaclass );
    Py_DECREF( tmp_class_creation_2__metaclass );
    tmp_class_creation_2__metaclass = NULL;

    CHECK_OBJECT( (PyObject *)tmp_class_creation_2__prepared );
    Py_DECREF( tmp_class_creation_2__prepared );
    tmp_class_creation_2__prepared = NULL;

    {
        PyObject *tmp_assign_source_31;
        PyObject *tmp_called_name_5;
        PyObject *tmp_mvar_value_3;
        tmp_mvar_value_3 = GET_STRING_DICT_VALUE( moduledict__strptime, (Nuitka_StringObject *)const_str_plain__thread_allocate_lock );

        if (unlikely( tmp_mvar_value_3 == NULL ))
        {
            tmp_mvar_value_3 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain__thread_allocate_lock );
        }

        if ( tmp_mvar_value_3 == NULL )
        {

            exception_type = PyExc_NameError;
            Py_INCREF( exception_type );
            exception_value = PyUnicode_FromFormat( "name '%s' is not defined", "_thread_allocate_lock" );
            exception_tb = NULL;
            NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
            CHAIN_EXCEPTION( exception_value );

            exception_lineno = 274;

            goto frame_exception_exit_1;
        }

        tmp_called_name_5 = tmp_mvar_value_3;
        frame_7438384fed32ebca9a6ff01bccfb3fea->m_frame.f_lineno = 274;
        tmp_assign_source_31 = CALL_FUNCTION_NO_ARGS( tmp_called_name_5 );
        if ( tmp_assign_source_31 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 274;

            goto frame_exception_exit_1;
        }
        UPDATE_STRING_DICT1( moduledict__strptime, (Nuitka_StringObject *)const_str_plain__cache_lock, tmp_assign_source_31 );
    }
    {
        PyObject *tmp_assign_source_32;
        PyObject *tmp_called_name_6;
        PyObject *tmp_mvar_value_4;
        tmp_mvar_value_4 = GET_STRING_DICT_VALUE( moduledict__strptime, (Nuitka_StringObject *)const_str_plain_TimeRE );

        if (unlikely( tmp_mvar_value_4 == NULL ))
        {
            tmp_mvar_value_4 = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)const_str_plain_TimeRE );
        }

        if ( tmp_mvar_value_4 == NULL )
        {

            exception_type = PyExc_NameError;
            Py_INCREF( exception_type );
            exception_value = PyUnicode_FromFormat( "name '%s' is not defined", "TimeRE" );
            exception_tb = NULL;
            NORMALIZE_EXCEPTION( &exception_type, &exception_value, &exception_tb );
            CHAIN_EXCEPTION( exception_value );

            exception_lineno = 277;

            goto frame_exception_exit_1;
        }

        tmp_called_name_6 = tmp_mvar_value_4;
        frame_7438384fed32ebca9a6ff01bccfb3fea->m_frame.f_lineno = 277;
        tmp_assign_source_32 = CALL_FUNCTION_NO_ARGS( tmp_called_name_6 );
        if ( tmp_assign_source_32 == NULL )
        {
            assert( ERROR_OCCURRED() );

            FETCH_ERROR_OCCURRED( &exception_type, &exception_value, &exception_tb );


            exception_lineno = 277;

            goto frame_exception_exit_1;
        }
        UPDATE_STRING_DICT1( moduledict__strptime, (Nuitka_StringObject *)const_str_plain__TimeRE_cache, tmp_assign_source_32 );
    }

    // Restore frame exception if necessary.
#if 0
    RESTORE_FRAME_EXCEPTION( frame_7438384fed32ebca9a6ff01bccfb3fea );
#endif
    popFrameStack();

    assertFrameObject( frame_7438384fed32ebca9a6ff01bccfb3fea );

    goto frame_no_exception_3;

    frame_exception_exit_1:;
#if 0
    RESTORE_FRAME_EXCEPTION( frame_7438384fed32ebca9a6ff01bccfb3fea );
#endif

    if ( exception_tb == NULL )
    {
        exception_tb = MAKE_TRACEBACK( frame_7438384fed32ebca9a6ff01bccfb3fea, exception_lineno );
    }
    else if ( exception_tb->tb_frame != &frame_7438384fed32ebca9a6ff01bccfb3fea->m_frame )
    {
        exception_tb = ADD_TRACEBACK( exception_tb, frame_7438384fed32ebca9a6ff01bccfb3fea, exception_lineno );
    }

    // Put the previous frame back on top.
    popFrameStack();

    // Return the error.
    goto module_exception_exit;

    frame_no_exception_3:;
    {
        PyObject *tmp_assign_source_33;
        tmp_assign_source_33 = const_int_pos_5;
        UPDATE_STRING_DICT0( moduledict__strptime, (Nuitka_StringObject *)const_str_plain__CACHE_MAX_SIZE, tmp_assign_source_33 );
    }
    {
        PyObject *tmp_assign_source_34;
        tmp_assign_source_34 = PyDict_New();
        UPDATE_STRING_DICT1( moduledict__strptime, (Nuitka_StringObject *)const_str_plain__regex_cache, tmp_assign_source_34 );
    }
    {
        PyObject *tmp_assign_source_35;
        tmp_assign_source_35 = MAKE_FUNCTION__strptime$$$function_13__calc_julian_from_U_or_W(  );



        UPDATE_STRING_DICT1( moduledict__strptime, (Nuitka_StringObject *)const_str_plain__calc_julian_from_U_or_W, tmp_assign_source_35 );
    }
    {
        PyObject *tmp_assign_source_36;
        tmp_assign_source_36 = MAKE_FUNCTION__strptime$$$function_14__calc_julian_from_V(  );



        UPDATE_STRING_DICT1( moduledict__strptime, (Nuitka_StringObject *)const_str_plain__calc_julian_from_V, tmp_assign_source_36 );
    }
    {
        PyObject *tmp_assign_source_37;
        PyObject *tmp_defaults_2;
        tmp_defaults_2 = const_tuple_str_digest_ed9378a159fa85aae69d41fc9736e292_tuple;
        Py_INCREF( tmp_defaults_2 );
        tmp_assign_source_37 = MAKE_FUNCTION__strptime$$$function_15__strptime( tmp_defaults_2 );



        UPDATE_STRING_DICT1( moduledict__strptime, (Nuitka_StringObject *)const_str_plain__strptime, tmp_assign_source_37 );
    }
    {
        PyObject *tmp_assign_source_38;
        PyObject *tmp_defaults_3;
        tmp_defaults_3 = const_tuple_str_digest_ed9378a159fa85aae69d41fc9736e292_tuple;
        Py_INCREF( tmp_defaults_3 );
        tmp_assign_source_38 = MAKE_FUNCTION__strptime$$$function_16__strptime_time( tmp_defaults_3 );



        UPDATE_STRING_DICT1( moduledict__strptime, (Nuitka_StringObject *)const_str_plain__strptime_time, tmp_assign_source_38 );
    }
    {
        PyObject *tmp_assign_source_39;
        PyObject *tmp_defaults_4;
        tmp_defaults_4 = const_tuple_str_digest_ed9378a159fa85aae69d41fc9736e292_tuple;
        Py_INCREF( tmp_defaults_4 );
        tmp_assign_source_39 = MAKE_FUNCTION__strptime$$$function_17__strptime_datetime( tmp_defaults_4 );



        UPDATE_STRING_DICT1( moduledict__strptime, (Nuitka_StringObject *)const_str_plain__strptime_datetime, tmp_assign_source_39 );
    }

#if _NUITKA_EXPERIMENTAL_PKGUTIL_ITERMODULES
#if 0 && 0
    {
        PyObject *path_value = GET_STRING_DICT_VALUE( moduledict__strptime, (Nuitka_StringObject *)const_str_plain___path__ );

        if (path_value && PyList_CheckExact(path_value) && PyList_Size(path_value) > 0)
        {
            PyObject *path_element = PyList_GetItem( path_value, 0 );

            PyObject *path_importer_cache = PySys_GetObject((char *)"path_importer_cache");
            CHECK_OBJECT( path_importer_cache );

            int res = PyDict_SetItem( path_importer_cache, path_element, (PyObject *)&Nuitka_Loader_Type );
            assert( res == 0 );
        }
    }
#endif
#endif

    return MOD_RETURN_VALUE( module__strptime );
    module_exception_exit:
    RESTORE_ERROR_OCCURRED( exception_type, exception_value, exception_tb );
    return MOD_RETURN_VALUE( NULL );
}
